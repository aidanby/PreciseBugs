{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n *  Class used to manage Auth LDAP config\n */\nclass AuthLDAP extends CommonDBTM\n{\n    const SIMPLE_INTERFACE = 'simple';\n    const EXPERT_INTERFACE = 'expert';\n\n    const ACTION_IMPORT      = 0;\n    const ACTION_SYNCHRONIZE = 1;\n    const ACTION_ALL         = 2;\n\n    const USER_IMPORTED      = 0;\n    const USER_SYNCHRONIZED  = 1;\n    const USER_DELETED_LDAP  = 2;\n    const USER_RESTORED_LDAP = 3;\n\n   //Import user by giving his login\n    const IDENTIFIER_LOGIN = 'login';\n\n   //Import user by giving his email\n    const IDENTIFIER_EMAIL = 'email';\n\n    const GROUP_SEARCH_USER    = 0;\n    const GROUP_SEARCH_GROUP   = 1;\n    const GROUP_SEARCH_BOTH    = 2;\n\n    /**\n     * Deleted user strategy: preserve user.\n     * @var integer\n     */\n    const DELETED_USER_PRESERVE = 0;\n\n    /**\n     * Deleted user strategy: put user in trashbin.\n     * @var integer\n     */\n    const DELETED_USER_DELETE = 1;\n\n    /**\n     * Deleted user strategy: withdraw dynamic authorizations and groups.\n     * @var integer\n     */\n    const DELETED_USER_WITHDRAWDYNINFO = 2;\n\n    /**\n     * Deleted user strategy: disable user.\n     * @var integer\n     */\n    const DELETED_USER_DISABLE = 3;\n\n    /**\n     * Deleted user strategy: disable user and withdraw dynamic authorizations and groups.\n     * @var integer\n     */\n    const DELETED_USER_DISABLEANDWITHDRAWDYNINFO = 4;\n\n    /**\n     * Deleted user strategy: disable user and withdraw groups.\n     * @var integer\n     */\n    const DELETED_USER_DISABLEANDDELETEGROUPS = 5;\n\n    /**\n     * Restored user strategy: Make no change to GLPI user\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_PRESERVE = 0;\n\n    /**\n     * Restored user strategy: Restore user from trash\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_RESTORE = 1;\n\n    /**\n     * Restored user strategy: Re-enable user\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_ENABLE  = 3;\n\n   // From CommonDBTM\n    public $dohistory = true;\n\n    public static $rightname = 'config';\n\n   //connection caching stuff\n    public static $conn_cache = [];\n\n    public static $undisclosedFields = [\n        'rootdn_passwd',\n    ];\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('LDAP directory', 'LDAP directories', $nb);\n    }\n\n    public static function canCreate()\n    {\n        return static::canUpdate();\n    }\n\n    public static function canPurge()\n    {\n        return static::canUpdate();\n    }\n\n    public function post_getEmpty()\n    {\n\n        $this->fields['port']                        = '389';\n        $this->fields['condition']                   = '';\n        $this->fields['login_field']                 = 'uid';\n        $this->fields['sync_field']                  = null;\n        $this->fields['use_tls']                     = 0;\n        $this->fields['group_field']                 = '';\n        $this->fields['group_condition']             = '';\n        $this->fields['group_search_type']           = self::GROUP_SEARCH_USER;\n        $this->fields['group_member_field']          = '';\n        $this->fields['email1_field']                = 'mail';\n        $this->fields['email2_field']                = '';\n        $this->fields['email3_field']                = '';\n        $this->fields['email4_field']                = '';\n        $this->fields['realname_field']              = 'sn';\n        $this->fields['firstname_field']             = 'givenname';\n        $this->fields['phone_field']                 = 'telephonenumber';\n        $this->fields['phone2_field']                = '';\n        $this->fields['mobile_field']                = '';\n        $this->fields['registration_number_field']   = '';\n        $this->fields['comment_field']               = '';\n        $this->fields['title_field']                 = '';\n        $this->fields['use_dn']                      = 0;\n        $this->fields['use_bind']                    = 1;\n        $this->fields['picture_field']               = '';\n        $this->fields['responsible_field']           = '';\n        $this->fields['can_support_pagesize']        = 0;\n        $this->fields['pagesize']                    = 0;\n        $this->fields['ldap_maxlimit']               = 0;\n    }\n\n\n    /**\n     * Preconfig datas for standard system\n     *\n     * @param string $type type of standard system : AD\n     *\n     * @return void\n     */\n    public function preconfig($type)\n    {\n\n        switch ($type) {\n            case 'AD':\n                $this->fields['port']                      = \"389\";\n                $this->fields['condition']\n                 = '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))';\n                $this->fields['login_field']               = 'samaccountname';\n                $this->fields['sync_field']                = 'objectguid';\n                $this->fields['use_tls']                   = 0;\n                $this->fields['group_field']               = 'memberof';\n                $this->fields['group_condition']\n                 = '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))';\n                $this->fields['group_search_type']         = self::GROUP_SEARCH_USER;\n                $this->fields['group_member_field']        = '';\n                $this->fields['email1_field']              = 'mail';\n                $this->fields['email2_field']              = '';\n                $this->fields['email3_field']              = '';\n                $this->fields['email4_field']              = '';\n                $this->fields['realname_field']            = 'sn';\n                $this->fields['firstname_field']           = 'givenname';\n                $this->fields['phone_field']               = 'telephonenumber';\n                $this->fields['phone2_field']              = 'othertelephone';\n                $this->fields['mobile_field']              = 'mobile';\n                $this->fields['registration_number_field'] = 'employeenumber';\n                $this->fields['comment_field']             = 'info';\n                $this->fields['title_field']               = 'title';\n                $this->fields['entity_field']              = 'ou';\n                $this->fields['entity_condition']          = '(objectclass=organizationalUnit)';\n                $this->fields['use_dn']                    = 1;\n                $this->fields['can_support_pagesize']      = 1;\n                $this->fields['pagesize']                  = '1000';\n                $this->fields['picture_field']             = '';\n                $this->fields['responsible_field']         = 'manager';\n                break;\n            case 'OpenLDAP':\n                $this->fields['port']                      = \"389\";\n                $this->fields['condition']                 = '(objectClass=inetOrgPerson)';\n                $this->fields['login_field']               = 'uid';\n                $this->fields['sync_field']                = 'entryuuid';\n                $this->fields['use_tls']                   = 0;\n                $this->fields['group_field']               = '';\n                $this->fields['group_condition']           = '(objectClass=inetOrgPerson)';\n                $this->fields['group_search_type']         = self::GROUP_SEARCH_GROUP;\n                $this->fields['group_member_field']        = 'member';\n                $this->fields['email1_field']              = 'mail';\n                $this->fields['email2_field']              = '';\n                $this->fields['email3_field']              = '';\n                $this->fields['email4_field']              = '';\n                $this->fields['realname_field']            = 'sn';\n                $this->fields['firstname_field']           = 'givenname';\n                $this->fields['phone_field']               = 'telephonenumber';\n                $this->fields['phone2_field']              = 'homephone';\n                $this->fields['mobile_field']              = 'mobile';\n                $this->fields['registration_number_field'] = 'employeenumber';\n                $this->fields['comment_field']             = 'description';\n                $this->fields['title_field']               = 'title';\n                $this->fields['entity_field']              = 'ou';\n                $this->fields['entity_condition']          = '(objectClass=organizationalUnit)';\n                $this->fields['use_dn']                    = 1;\n                $this->fields['can_support_pagesize']      = 1;\n                $this->fields['pagesize']                  = '1000';\n                $this->fields['picture_field']             = 'jpegphoto';\n                $this->fields['responsible_field']         = 'manager';\n                $this->fields['category_field']            = 'businesscategory';\n                $this->fields['language_field']            = 'preferredlanguage';\n                $this->fields['location_field']            = 'l';\n                break;\n\n            default:\n                $this->post_getEmpty();\n        }\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n\n        if (isset($input[\"rootdn_passwd\"])) {\n            if (empty($input[\"rootdn_passwd\"])) {\n                unset($input[\"rootdn_passwd\"]);\n            } else {\n                $input[\"rootdn_passwd\"] = (new GLPIKey())->encrypt($input[\"rootdn_passwd\"]);\n            }\n        }\n\n        if (isset($input[\"_blank_passwd\"]) && $input[\"_blank_passwd\"]) {\n            $input['rootdn_passwd'] = '';\n        }\n\n       // Set attributes in lower case\n        if (count($input)) {\n            foreach ($input as $key => $val) {\n                if (preg_match('/_field$/', $key)) {\n                    $input[$key] = Toolbox::strtolower($val);\n                }\n            }\n        }\n\n       //do not permit to override sync_field\n        if (\n            $this->isSyncFieldEnabled()\n            && isset($input['sync_field'])\n            && $this->isSyncFieldUsed()\n        ) {\n            if ($input['sync_field'] == $this->fields['sync_field']) {\n                unset($input['sync_field']);\n            } else {\n                Session::addMessageAfterRedirect(\n                    __('Synchronization field cannot be changed once in use.'),\n                    false,\n                    ERROR\n                );\n                return false;\n            };\n        }\n\n        $this->checkFilesExist($input);\n        return $input;\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'group_search_type':\n                return self::getGroupSearchTypeName($values[$field]);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n        switch ($field) {\n            case 'group_search_type':\n                $options['value'] = $values[$field];\n                $options['name']  = $name;\n                return self::dropdownGroupSearchType($options);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n    public static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids)\n    {\n        $input = $ma->getInput();\n\n        switch ($ma->getAction()) {\n            case 'import_group':\n                $group = new Group();\n                if (\n                    !Session::haveRight(\"user\", User::UPDATEAUTHENT)\n                    || !$group->canGlobal(UPDATE)\n                ) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    return;\n                }\n                foreach ($ids as $id) {\n                    if (isset($input[\"dn\"][$id])) {\n                        $group_dn = $input[\"dn\"][$id];\n                        if (isset($input[\"ldap_import_entities\"][$id])) {\n                              $entity = $input[\"ldap_import_entities\"][$id];\n                        } else {\n                             $entity = $_SESSION[\"glpiactive_entity\"];\n                        }\n                      // Is recursive is in the main form and thus, don't pass through\n                      // zero_on_empty mechanism inside massive action form ...\n                        $is_recursive = (empty($input['ldap_import_recursive'][$id]) ? 0 : 1);\n                        $options      = ['authldaps_id' => $_SESSION['ldap_server'],\n                            'entities_id'  => $entity,\n                            'is_recursive' => $is_recursive,\n                            'type'         => $input['ldap_import_type'][$id]\n                        ];\n                        if (AuthLDAP::ldapImportGroup($group_dn, $options)) {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                        } else {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                            $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION, $group_dn));\n                        }\n                    }\n                   // Clean history as id does not correspond to group\n                    $_SESSION['glpimassiveactionselected'] = [];\n                }\n                return;\n\n            case 'import':\n            case 'sync':\n                if (!Session::haveRight(\"user\", User::IMPORTEXTAUTHUSERS)) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    return;\n                }\n                foreach ($ids as $id) {\n                    if (\n                        AuthLDAP::ldapImportUserByServerId(\n                            ['method' => AuthLDAP::IDENTIFIER_LOGIN,\n                                'value'  => $id\n                            ],\n                            $_SESSION['ldap_import']['mode'],\n                            $_SESSION['ldap_import']['authldaps_id'],\n                            true\n                        )\n                    ) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                    } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION, $id));\n                    }\n                }\n                return;\n        }\n\n        parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n    }\n\n    /**\n     * Print the auth ldap form\n     *\n     * @param integer $ID      ID of the item\n     * @param array   $options Options\n     *     - target for the form\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showForm($ID, array $options = [])\n    {\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n        if (empty($ID)) {\n            $this->getEmpty();\n            if (isset($options['preconfig'])) {\n                $this->preconfig($options['preconfig']);\n            }\n        } else {\n            $this->getFromDB($ID);\n        }\n\n        if (Toolbox::canUseLdap()) {\n            $this->showFormHeader($options);\n            if (empty($ID)) {\n                $target = $this->getFormURL();\n                echo \"<tr class='tab_bg_2'><td>\" . __('Preconfiguration') . \"</td> \";\n                echo \"<td colspan='3'>\";\n                echo \"<a href='$target?preconfig=AD'>\" . __('Active Directory') . \"</a>\";\n                echo \"&nbsp;&nbsp;/&nbsp;&nbsp;\";\n                echo \"<a href='$target?preconfig=OpenLDAP'>\" . __('OpenLDAP') . \"</a>\";\n                echo \"&nbsp;&nbsp;/&nbsp;&nbsp;\";\n                echo \"<a href='$target?preconfig=default'>\" . __('Default values');\n                echo \"</a></td></tr>\";\n            }\n            echo \"<tr class='tab_bg_1'><td><label for='name'>\" . __('Name') . \"</label></td>\";\n            echo \"<td><input type='text' id='name' name='name' value='\" . Html::cleanInputText($this->fields[\"name\"]) . \"' class='form-control'></td>\";\n            if ($ID > 0) {\n                echo \"<td>\" . __('Last update') . \"</td><td>\" . Html::convDateTime($this->fields[\"date_mod\"]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            $defaultrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='dropdown_is_default$defaultrand'>\" . __('Default server') . \"</label></td>\";\n            echo \"<td>\";\n            Dropdown::showYesNo('is_default', $this->fields['is_default'], -1, ['rand' => $defaultrand]);\n            echo \"</td>\";\n            $activerand = mt_rand();\n            echo \"<td><label for='dropdown_is_active$activerand'>\" . __('Active') . \"</label></td>\";\n            echo \"<td>\";\n            Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='host'>\" . __('Server') . \"</label></td>\";\n            echo \"<td><input type='text' id='host' name='host' value='\" . Html::cleanInputText($this->fields[\"host\"]) . \"' class='form-control'></td>\";\n            echo \"<td><label for='port'>\" . __('Port (default=389)') . \"</label></td>\";\n            echo \"<td><input id='port' type='number' id='port' name='port' value='\" . Html::cleanInputText($this->fields[\"port\"]) . \"' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='condition'>\" . __('Connection filter') . \"</label></td>\";\n            echo \"<td colspan='3'>\";\n            echo \"<textarea class='form-control' id='condition' name='condition'>\" . $this->fields[\"condition\"];\n            echo \"</textarea>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='basedn'>\" . __('BaseDN') . \"</label></td>\";\n            echo \"<td colspan='3'>\";\n            echo \"<input type='text' id='basedn' name='basedn' size='100' value=\\\"\" . Html::cleanInputText($this->fields[\"basedn\"]) . \"\\\" class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='use_bind'>\";\n            echo __('Use bind') . \"</label>&nbsp;\";\n            Html::showToolTip(__(\"Indicates whether a simple bind operation should be used during connection to LDAP server. Disabling this behaviour can be required when LDAPS bind is used.\"));\n            echo \"</td>\";\n            echo \"<td colspan='3'>\";\n            $rand_use_bind = mt_rand();\n            Dropdown::showYesNo('use_bind', $this->fields[\"use_bind\"], -1, [\n                'rand' => $rand_use_bind\n            ]);\n            echo Html::scriptBlock(\"$(document).ready(function() {\n                $('#dropdown_use_bind$rand_use_bind').on('select2:select', function() {\n                    if ($(this).val() == 1) {\n                        $('#rootdn_block, #rootdn_passwd_block')\n                            .addClass('d-table-row')\n                            .removeClass('d-none');\n                    } else {\n                        $('#rootdn_block, #rootdn_passwd_block')\n                            .removeClass('d-table-row')\n                            .addClass('d-none');\n                    }\n                });\n            });\");\n            echo \"</td></tr>\";\n\n            $rootdn_class = 'd-none';\n            if ($this->fields[\"use_bind\"]) {\n                $rootdn_class = 'd-table-row';\n            }\n            echo \"<tr class='tab_bg_1 $rootdn_class' id='rootdn_block'><td><label for='rootdn'>\" . __('RootDN (for non anonymous binds)') . \"</label></td>\";\n            echo \"<td colspan='3'><input type='text' name='rootdn' id='rootdn' size='100' value=\\\"\" .\n                Html::cleanInputText($this->fields[\"rootdn\"]) . \"\\\" class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1 $rootdn_class' id='rootdn_passwd_block'><td><label for='rootdn_passwd'>\" .\n            __('Password (for non-anonymous binds)') . \"</label></td>\";\n            echo \"<td><input type='password' id='rootdn_passwd' name='rootdn_passwd' value='' autocomplete='new-password' class='form-control'>\";\n            if ($ID) {\n                echo \"<input type='checkbox' name='_blank_passwd' id='_blank_passwd'>&nbsp;\"\n                . \"<label for='_blank_passwd'>\" . __('Clear') . \"</label>\";\n            }\n            echo \"</td>\";\n            echo \"<td rowspan='3'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n            echo \"<td rowspan='3' class='middle'>\";\n            echo \"<textarea class='form-control' name='comment' id='comment'>\" . $this->fields[\"comment\"] . \"</textarea>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='login_field'>\" . __('Login field') . \"</label></td>\";\n            echo \"<td><input type='text' id='login_field' name='login_field' value='\" . Html::cleanInputText($this->fields[\"login_field\"]) . \"' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            $info_message = __s('Synchronization field cannot be changed once in use.');\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='sync_field'>\" . __('Synchronization field') . \"<i class='pointer fa fa-info' title='$info_message'></i></td>\";\n            echo \"<td><input type='text' id='sync_field' name='sync_field' value='\" . Html::cleanInputText($this->fields[\"sync_field\"]) . \"' title='$info_message' class='form-control'\";\n            if ($this->isSyncFieldEnabled() && $this->isSyncFieldUsed()) {\n                echo \" disabled='disabled'\";\n            }\n            echo \">\";\n            echo \"</td></tr>\";\n\n           //Fill fields when using preconfiguration models\n            if (!$ID) {\n                $hidden_fields = ['comment_field', 'email1_field', 'email2_field',\n                    'email3_field', 'email4_field', 'entity_condition',\n                    'entity_field', 'firstname_field', 'group_condition',\n                    'group_field', 'group_member_field', 'group_search_type',\n                    'mobile_field', 'phone_field', 'phone2_field',\n                    'realname_field', 'registration_number_field', 'title_field',\n                    'use_dn', 'use_tls', 'picture_field', 'responsible_field',\n                    'category_field', 'language_field', 'location_field',\n                    'can_support_pagesize', 'pagesize',\n                ];\n\n                foreach ($hidden_fields as $hidden_field) {\n                    echo \"<input type='hidden' name='$hidden_field' value='\" .\n                      Html::cleanInputText($this->fields[$hidden_field]) . \"'>\";\n                }\n            }\n\n            echo \"</td></tr>\";\n\n            $this->showFormButtons($options);\n        } else {\n            echo \"<div class='center'>&nbsp;<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='2'>\" . self::getTypeName(1) . \"</th></tr>\";\n            echo \"<tr class='tab_bg_2'><td class='center'>\";\n            echo \"<p class='red'>\" . sprintf(__('%s extension is missing'), 'LDAP') . \"</p>\";\n            echo \"<p>\" . __('Impossible to use LDAP as external source of connection') . \"</p>\" .\n              \"</td></tr></table>\";\n\n            echo \"<p><strong>\" . GLPINetwork::getSupportPromoteMessage() . \"</strong></p>\";\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Show advanced config form\n     *\n     * @return void\n     */\n    public function showFormAdvancedConfig()\n    {\n\n        $ID = $this->getField('id');\n        $hidden = '';\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_2'><th colspan='4'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\" . __('Advanced information') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Use TLS') . \"</td><td>\";\n        if (function_exists(\"ldap_start_tls\")) {\n            Dropdown::showYesNo('use_tls', $this->fields[\"use_tls\"]);\n        } else {\n            echo \"<input type='hidden' name='use_tls' value='0'>\" . __('ldap_start_tls does not exist');\n        }\n        echo \"</td>\";\n        echo \"<td>\" . __('LDAP directory time zone') . \"</td><td>\";\n        Dropdown::showGMT(\"time_offset\", $this->fields[\"time_offset\"]);\n        echo\"</td></tr>\";\n\n        if (self::isLdapPageSizeAvailable(false, false)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Use paged results') . \"</td><td>\";\n            Dropdown::showYesNo('can_support_pagesize', $this->fields[\"can_support_pagesize\"]);\n            echo \"</td>\";\n            echo \"<td>\" . __('Page size') . \"</td><td>\";\n            Dropdown::showNumber(\"pagesize\", ['value' => $this->fields['pagesize'],\n                'min'   => 100,\n                'max'   => 100000,\n                'step'  => 100\n            ]);\n            echo\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Maximum number of results') . \"</td><td>\";\n            Dropdown::showNumber('ldap_maxlimit', ['value' => $this->fields['ldap_maxlimit'],\n                'min'   => 100,\n                'max'   => 999999,\n                'step'  => 100,\n                'toadd' => [0 => __('Unlimited')]\n            ]);\n            echo \"</td><td colspan='2'></td></tr>\";\n        } else {\n            $hidden .= \"<input type='hidden' name='can_support_pagesize' value='0'>\";\n            $hidden .= \"<input type='hidden' name='pagesize' value='0'>\";\n            $hidden .= \"<input type='hidden' name='ldap_maxlimit' value='0'>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('How LDAP aliases should be handled') . \"</td><td colspan='4'>\";\n        $alias_options = [\n            LDAP_DEREF_NEVER     => __('Never dereferenced (default)'),\n            LDAP_DEREF_ALWAYS    => __('Always dereferenced'),\n            LDAP_DEREF_SEARCHING => __('Dereferenced during the search (but not when locating)'),\n            LDAP_DEREF_FINDING   => __('Dereferenced when locating (not during the search)'),\n        ];\n        Dropdown::showFromArray(\n            \"deref_option\",\n            $alias_options,\n            ['value' => $this->fields[\"deref_option\"]]\n        );\n        echo\"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Domain name used by inventory tool for link the user') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo Html::input('inventory_domain', ['value' => $this->fields['inventory_domain'], 'size' => 100]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('TLS Certfile') . \"</td><td>\";\n        echo \"<input type='text' name='tls_certfile' class='form-control' id='tls_certfile' value='\" . $this->fields[\"tls_certfile\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . __('TLS Keyfile') . \"</td><td>\";\n        echo \"<input type='text' name='tls_keyfile' class='form-control' id='tls_keyfile' value='\" . $this->fields[\"tls_keyfile\"] . \"'>\";\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td><label for='timeout'>\" . __('Timeout') . \"</label></td>\";\n        echo \"<td colspan='3'>\";\n\n        Dropdown::showNumber('timeout', ['value'  => $this->fields[\"timeout\"],\n            'min'    => 1,\n            'max'    => 30,\n            'step'   => 1,\n            'toadd'  => [0 => __('No timeout')]\n        ]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo $hidden;\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show config replicates form\n     *\n     * @var DBmysql $DB\n     *\n     * @return void\n     */\n    public function showFormReplicatesConfig()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $ID     = $this->getField('id');\n        $target = $this->getFormURL();\n        $rand   = mt_rand();\n\n        AuthLdapReplicate::addNewReplicateForm($target, $ID);\n\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_authldapreplicates',\n            'WHERE'  => [\n                'authldaps_id' => $ID\n            ],\n            'ORDER'  => ['name']\n        ]);\n\n        if (($nb = count($iterator)) > 0) {\n            echo \"<br>\";\n\n            echo \"<div class='center'>\";\n            Html::openMassiveActionsForm('massAuthLdapReplicate' . $rand);\n            $massiveactionparams = ['num_displayed' => min($_SESSION['glpilist_limit'], $nb),\n                'container'     => 'massAuthLdapReplicate' . $rand\n            ];\n            Html::showMassiveActions($massiveactionparams);\n            echo \"<input type='hidden' name='id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixehov'>\";\n            echo \"<tr class='noHover'>\" .\n              \"<th colspan='4'>\" . __('List of LDAP directory replicates') . \"</th></tr>\";\n\n            if (isset($_SESSION[\"LDAP_TEST_MESSAGE\"])) {\n                echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n                echo $_SESSION[\"LDAP_TEST_MESSAGE\"];\n                echo\"</td></tr>\";\n                unset($_SESSION[\"LDAP_TEST_MESSAGE\"]);\n            }\n            $header_begin   = \"<tr>\";\n            $header_top     = \"<th>\" . Html::getCheckAllAsCheckbox('massAuthLdapReplicate' . $rand) . \"</th>\";\n            $header_bottom  = \"<th>\" . Html::getCheckAllAsCheckbox('massAuthLdapReplicate' . $rand) . \"</th>\";\n            $header_end     = \"<th class='center b'>\" . __('Name') . \"</th>\";\n            $header_end    .= \"<th class='center b'>\" . _n('Replicate', 'Replicates', 1) . \"</th>\";\n            $header_end    .= \"<th class='center b'>\" . __('Timeout') . \"</th>\" .\n              \"<th class='center'></th></tr>\";\n            echo $header_begin . $header_top . $header_end;\n\n            foreach ($iterator as $ldap_replicate) {\n                echo \"<tr class='tab_bg_1'><td class='center' width='10'>\";\n                Html::showMassiveActionCheckBox('AuthLdapReplicate', $ldap_replicate[\"id\"]);\n                echo \"</td>\";\n                echo \"<td class='center'>\" . $ldap_replicate[\"name\"] . \"</td>\";\n                echo \"<td class='center'>\" . sprintf(\n                    __('%1$s: %2$s'),\n                    $ldap_replicate[\"host\"],\n                    $ldap_replicate[\"port\"]\n                );\n                echo \"</td>\";\n                echo \"<td class='center'>\" . $ldap_replicate[\"timeout\"] . \"</td>\";\n                echo \"<td class='center'>\";\n                Html::showSimpleForm(\n                    static::getFormURL(),\n                    'test_ldap_replicate',\n                    _sx('button', 'Test'),\n                    ['id'                => $ID,\n                        'ldap_replicate_id' => $ldap_replicate[\"id\"]\n                    ]\n                );\n                echo \"</td></tr>\";\n            }\n            echo $header_begin . $header_bottom . $header_end;\n            echo \"</table>\";\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n\n            Html::closeForm();\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Build a dropdown\n     *\n     * @since 0.84\n     *\n     * @param array $options Options\n     *\n     * @return string\n     */\n    public static function dropdownGroupSearchType(array $options)\n    {\n\n        $p = [\n            'name'    => 'group_search_type',\n            'value'   => self::GROUP_SEARCH_USER,\n            'display' => true,\n        ];\n\n        if (count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        $tab = self::getGroupSearchTypeName();\n        return Dropdown::showFromArray($p['name'], $tab, $p);\n    }\n\n    /**\n     * Get the possible value for contract alert\n     *\n     * @since 0.83\n     *\n     * @param integer $val if not set, ask for all values, else for 1 value (default NULL)\n     *\n     * @return array|string\n     */\n    public static function getGroupSearchTypeName($val = null)\n    {\n        $tmp = [\n            self::GROUP_SEARCH_USER    => __('In users'),\n            self::GROUP_SEARCH_GROUP   => __('In groups'),\n            self::GROUP_SEARCH_BOTH    => __('In users and groups')\n        ];\n\n        if (is_null($val)) {\n            return $tmp;\n        }\n        if (isset($tmp[$val])) {\n            return $tmp[$val];\n        }\n        return NOT_AVAILABLE;\n    }\n\n    /**\n     * Show group config form\n     *\n     * @return void\n     */\n    public function showFormGroupsConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th class='center' colspan='4'>\" . __('Belonging to groups') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Search type') . \"</td><td>\";\n        self::dropdownGroupSearchType(['value' => $this->fields[\"group_search_type\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('User attribute containing its groups') . \"</td>\";\n        echo \"<td><input type='text' name='group_field' class='form-control' value='\" . $this->fields[\"group_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Filter to search in groups') . \"</td><td colspan='3'>\";\n        echo \"<textarea class='form-control' name='group_condition'>\" . $this->fields[\"group_condition\"];\n        echo \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Group attribute containing its users') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='group_member_field' value='\" .\n                 $this->fields[\"group_member_field\"] . \"'></td>\";\n        echo \"<td>\" . __('Use DN in the search') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"use_dn\", $this->fields[\"use_dn\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show ldap test form\n     *\n     * @return void\n     */\n    public function showFormTestLDAP()\n    {\n\n        $ID = $this->getField('id');\n\n        if ($ID > 0) {\n            echo \"<div class='center'>\";\n            echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n            echo \"<input type='hidden' name='id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='4'>\" . __('Test of connection to LDAP directory') . \"</th></tr>\";\n\n            if (isset($_SESSION[\"LDAP_TEST_MESSAGE\"])) {\n                echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n                echo $_SESSION[\"LDAP_TEST_MESSAGE\"];\n                echo\"</td></tr>\";\n                unset($_SESSION[\"LDAP_TEST_MESSAGE\"]);\n            }\n\n            echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n            echo \"<input type='submit' name='test_ldap' class='btn btn-primary' value=\\\"\" .\n                _sx('button', 'Test') . \"\\\">\";\n            echo \"</td></tr>\";\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Show user config form\n     *\n     * @return void\n     */\n    public function showFormUserConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th class='center' colspan='4'>\" . __('Binding to the LDAP directory') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Surname') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='realname_field' value='\" .\n                 $this->fields[\"realname_field\"] . \"'></td>\";\n        echo \"<td>\" . __('First name') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='firstname_field' value='\" .\n                 $this->fields[\"firstname_field\"] . \"'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Comments') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='comment_field' value='\" . $this->fields[\"comment_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . _x('user', 'Administrative number') . \"</td>\";\n        echo \"<td>\";\n        echo \"<input type='text' class='form-control' name='registration_number_field' value='\" .\n             $this->fields[\"registration_number_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . _n('Email', 'Emails', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email1_field' value='\" . $this->fields[\"email1_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '2') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email2_field' value='\" . $this->fields[\"email2_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '3') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email3_field' value='\" . $this->fields[\"email3_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '4') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email4_field' value='\" . $this->fields[\"email4_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _x('ldap', 'Phone') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='phone_field'value='\" . $this->fields[\"phone_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" .  __('Phone 2') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='phone2_field'value='\" . $this->fields[\"phone2_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Mobile phone') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='mobile_field'value='\" . $this->fields[\"mobile_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . _x('person', 'Title') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='title_field' value='\" . $this->fields[\"title_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _n('Category', 'Categories', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='category_field' value='\" .\n                 $this->fields[\"category_field\"] . \"'></td>\";\n        echo \"<td>\" . __('Language') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='language_field' value='\" .\n                 $this->fields[\"language_field\"] . \"'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='picture_field' value='\" .\n                 $this->fields[\"picture_field\"] . \"'></td>\";\n        echo \"<td>\" . Location::getTypeName(1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='location_field' value='\" . $this->fields[\"location_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Responsible') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='responsible_field' value='\" .\n           $this->fields[\"responsible_field\"] . \"'></td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr><td colspan=4 class='center green'>\" . __('You can use a field name or an expression using various %{fieldname}') .\n           \" <br />\" . __('Example for location: %{city} > %{roomnumber}') . \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show entity config form\n     *\n     * @return void\n     */\n    public function showFormEntityConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th class='center' colspan='4'>\" . __('Import entities from LDAP directory') .\n           \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Attribute representing entity') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='entity_field' value='\" . $this->fields[\"entity_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Search filter for entities') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='entity_condition' value='\" . $this->fields[\"entity_condition\"] . \"'\n             size='100'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addImpactTab($ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => $this->getTypeName(1)\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'datatype'           => 'number',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'host',\n            'name'               => __('Server'),\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'port',\n            'name'               => _n('Port', 'Ports', 1),\n            'datatype'           => 'integer'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'basedn',\n            'name'               => __('BaseDN'),\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'condition',\n            'name'               => __('Connection filter'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'is_default',\n            'name'               => __('Default server'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '8',\n            'table'              => $this->getTable(),\n            'field'              => 'login_field',\n            'name'               => __('Login field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '9',\n            'table'              => $this->getTable(),\n            'field'              => 'realname_field',\n            'name'               => __('Surname'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '10',\n            'table'              => $this->getTable(),\n            'field'              => 'firstname_field',\n            'name'               => __('First name'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '11',\n            'table'              => $this->getTable(),\n            'field'              => 'phone_field',\n            'name'               =>  _x('ldap', 'Phone'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '12',\n            'table'              => $this->getTable(),\n            'field'              => 'phone2_field',\n            'name'               => __('Phone 2'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '13',\n            'table'              => $this->getTable(),\n            'field'              => 'mobile_field',\n            'name'               => __('Mobile phone'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '14',\n            'table'              => $this->getTable(),\n            'field'              => 'title_field',\n            'name'               => _x('person', 'Title'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '15',\n            'table'              => $this->getTable(),\n            'field'              => 'category_field',\n            'name'               => _n('Category', 'Categories', 1),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '17',\n            'table'              => $this->getTable(),\n            'field'              => 'email1_field',\n            'name'               => _n('Email', 'Emails', 1),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '25',\n            'table'              => $this->getTable(),\n            'field'              => 'email2_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '2'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '26',\n            'table'              => $this->getTable(),\n            'field'              => 'email3_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '3'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '27',\n            'table'              => $this->getTable(),\n            'field'              => 'email4_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '4'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '18',\n            'table'              => $this->getTable(),\n            'field'              => 'use_dn',\n            'name'               => __('Use DN in the search'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => $this->getTable(),\n            'field'              => 'language_field',\n            'name'               => __('Language'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '21',\n            'table'              => $this->getTable(),\n            'field'              => 'group_field',\n            'name'               => __('User attribute containing its groups'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '22',\n            'table'              => $this->getTable(),\n            'field'              => 'group_condition',\n            'name'               => __('Filter to search in groups'),\n            'massiveaction'      => false,\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '23',\n            'table'              => $this->getTable(),\n            'field'              => 'group_member_field',\n            'name'               => __('Group attribute containing its users'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '24',\n            'table'              => $this->getTable(),\n            'field'              => 'group_search_type',\n            'datatype'           => 'specific',\n            'name'               => __('Search type'),\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '30',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '28',\n            'table'              => $this->getTable(),\n            'field'              => 'sync_field',\n            'name'               => __('Synchronization field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '29',\n            'table'              => $this->getTable(),\n            'field'              => 'responsible_field',\n            'name'               => __('Responsible'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '31',\n            'table'              => $this->getTable(),\n            'field'              => 'inventory_domain',\n            'name'               => __('Domain name used by inventory tool'),\n            'massiveaction'      => false,\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '32',\n            'table'              => $this->getTable(),\n            'field'              => 'timeout',\n            'name'               => __('Timeout'),\n            'massiveaction'      => false,\n            'datatype'           => 'number',\n            'unit'               => 'second',\n            'toadd'              => [\n                '0'                  => __('No timeout')\n            ],\n        ];\n\n        return $tab;\n    }\n\n    /**\n     * Show system information form\n     *\n     * @param integer $width The number of characters at which the string will be wrapped.\n     *\n     * @return void\n     */\n    public function showSystemInformations($width)\n    {\n\n       // No need to translate, this part always display in english (for copy/paste to forum)\n\n        $ldap_servers = self::getLdapServers();\n\n        if (!empty($ldap_servers)) {\n            echo \"<tr class='tab_bg_2'><th class='section-header'>\" . self::getTypeName(Session::getPluralNumber()) . \"</th></tr>\\n\";\n            echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n            foreach ($ldap_servers as $value) {\n                $fields = ['Server'            => 'host',\n                    'Port'              => 'port',\n                    'BaseDN'            => 'basedn',\n                    'Connection filter' => 'condition',\n                    'RootDN'            => 'rootdn',\n                    'Use TLS'           => 'use_tls'\n                ];\n                $msg   = '';\n                $first = true;\n                foreach ($fields as $label => $field) {\n                    $msg .= (!$first ? ', ' : '') .\n                        $label . ': ' .\n                        ($value[$field] ? '\\'' . $value[$field] . '\\'' : 'none');\n                    $first = false;\n                }\n                echo wordwrap($msg . \"\\n\", $width, \"\\n\\t\\t\");\n            }\n            echo \"\\n</pre></td></tr>\";\n        }\n    }\n\n\n    /**\n     * Get LDAP fields to sync to GLPI data from a glpi_authldaps array\n     *\n     * @param array $authtype_array Authentication method config array (from table)\n     *\n     * @return array of \"user table field name\" => \"config value\"\n     */\n    public static function getSyncFields(array $authtype_array)\n    {\n\n        $ret    = [];\n        $fields = ['login_field'               => 'name',\n            'email1_field'              => 'email1',\n            'email2_field'              => 'email2',\n            'email3_field'              => 'email3',\n            'email4_field'              => 'email4',\n            'realname_field'            => 'realname',\n            'firstname_field'           => 'firstname',\n            'phone_field'               => 'phone',\n            'phone2_field'              => 'phone2',\n            'mobile_field'              => 'mobile',\n            'location_field'            => 'locations_id',\n            'comment_field'             => 'comment',\n            'title_field'               => 'usertitles_id',\n            'category_field'            => 'usercategories_id',\n            'language_field'            => 'language',\n            'registration_number_field' => 'registration_number',\n            'picture_field'             => 'picture',\n            'responsible_field'         => 'users_id_supervisor',\n            'sync_field'                => 'sync_field'\n        ];\n\n        foreach ($fields as $key => $val) {\n            if (isset($authtype_array[$key]) && !empty($authtype_array[$key])) {\n                $ret[$val] = $authtype_array[$key];\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Display LDAP filter\n     *\n     * @param string  $target target for the form\n     * @param boolean $users  for user? (true by default)\n     *\n     * @return void\n     */\n    public static function displayLdapFilter($target, $users = true)\n    {\n\n        $config_ldap = new self();\n        if (!isset($_SESSION['ldap_server'])) {\n            throw new \\RuntimeException('LDAP server must be set!');\n        }\n        $config_ldap->getFromDB($_SESSION['ldap_server']);\n\n        $filter_name1 = null;\n        $filter_name2 = null;\n        if ($users) {\n            $filter_name1 = \"condition\";\n            $filter_var   = \"ldap_filter\";\n        } else {\n            $filter_var = \"ldap_group_filter\";\n            switch ($config_ldap->fields[\"group_search_type\"]) {\n                case self::GROUP_SEARCH_USER:\n                    $filter_name1 = \"condition\";\n                    break;\n\n                case self::GROUP_SEARCH_GROUP:\n                    $filter_name1 = \"group_condition\";\n                    break;\n\n                case self::GROUP_SEARCH_BOTH:\n                    $filter_name1 = \"group_condition\";\n                    $filter_name2 = \"condition\";\n                    break;\n            }\n        }\n\n        if ($filter_name1 !== null && (!isset($_SESSION[$filter_var]) || $_SESSION[$filter_var] == '')) {\n            $_SESSION[$filter_var] = Sanitizer::unsanitize($config_ldap->fields[$filter_name1]);\n        }\n\n        echo \"<div class='card'>\";\n        echo \"<form method='post' action='$target'>\";\n        echo \"<table class='table card-table'>\";\n        echo \"<tr><td>\" . ($users ? __('Search filter for users')\n                                           : __('Filter to search in groups')) . \"</td>\";\n\n        echo \"<td>\";\n        echo \"<input type='text' name='ldap_filter' value='\" . htmlspecialchars($_SESSION[$filter_var], ENT_QUOTES) . \"' size='70'>\";\n       //Only display when looking for groups in users AND groups\n        if (\n            !$users\n            && ($config_ldap->fields[\"group_search_type\"] == self::GROUP_SEARCH_BOTH)\n        ) {\n            if ($filter_name2 !== null && (!isset($_SESSION[\"ldap_group_filter2\"]) || $_SESSION[\"ldap_group_filter2\"] == '')) {\n                $_SESSION[\"ldap_group_filter2\"] = Sanitizer::unsanitize($config_ldap->fields[$filter_name2]);\n            }\n            echo \"</td></tr>\";\n\n            echo \"<tr><td>\" . __('Search filter for users') . \"</td\";\n\n            echo \"<td>\";\n            echo \"<input type='text' name='ldap_filter2' value='\" . htmlspecialchars($_SESSION[\"ldap_group_filter2\"], ENT_QUOTES) . \"'\n                size='70'></td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='2'>\";\n        echo \"<input class=submit type='submit' name='change_ldap_filter' value=\\\"\" .\n            _sx('button', 'Search') . \"\\\"></td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n\n    /**\n     * Converts LDAP timestamps over to Unix timestamps\n     *\n     * @param string  $ldapstamp        LDAP timestamp\n     * @param integer $ldap_time_offset time offset (default 0)\n     *\n     * @return integer unix timestamp\n     */\n    public static function ldapStamp2UnixStamp($ldapstamp, $ldap_time_offset = 0)\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n       //Check if timestamp is well format, otherwise return ''\n        if (!preg_match(\"/[\\d]{14}(\\.[\\d]{0,4})*Z/\", $ldapstamp)) {\n            return '';\n        }\n\n        $year    = substr($ldapstamp, 0, 4);\n        $month   = substr($ldapstamp, 4, 2);\n        $day     = substr($ldapstamp, 6, 2);\n        $hour    = substr($ldapstamp, 8, 2);\n        $minute  = substr($ldapstamp, 10, 2);\n        $seconds = substr($ldapstamp, 12, 2);\n        $stamp   = gmmktime($hour, $minute, $seconds, $month, $day, $year);\n        $stamp  += $CFG_GLPI[\"time_offset\"] - $ldap_time_offset;\n\n        return $stamp;\n    }\n\n\n    /**\n     * Converts a Unix timestamp to an LDAP timestamps\n     *\n     * @param string $date datetime\n     *\n     * @return string ldap timestamp\n     */\n    public static function date2ldapTimeStamp($date)\n    {\n        return date(\"YmdHis\", strtotime($date)) . '.0Z';\n    }\n\n\n    /**\n     * Return the LDAP field to use for user synchronization\n     * It may be sync_field if defined, or login_field\n     * @since 9.2\n     *\n     * @return string the ldap field to use for user synchronization\n     */\n    public function getLdapIdentifierToUse()\n    {\n        if (!empty($this->fields['sync_field'])) {\n            return $this->fields['sync_field'];\n        } else {\n            return $this->fields['login_field'];\n        }\n    }\n\n    /**\n     * Return the database field to use for user synchronization\n     * @since 9.2\n     *\n     * @return string the database field to use for user synchronization\n     */\n    public function getDatabaseIdentifierToUse()\n    {\n        if (!empty($this->fields['sync_field'])) {\n            return 'sync_field';\n        } else {\n            return 'name';\n        }\n    }\n\n    /**\n     * Indicates if there's a sync_field enabled in the LDAP configuration\n     * @since 9.2\n     *\n     * @return boolean true if the sync_field is enabled (the field is filled)\n     */\n    public function isSyncFieldEnabled()\n    {\n        return (!empty($this->fields['sync_field']));\n    }\n\n    /**\n     * Check if the sync_field is configured for an LDAP server\n     *\n     * @since 9.2\n     * @param integer authldaps_id the LDAP server ID\n     * @return boolean true if configured, false if not configured\n     */\n    public static function isSyncFieldConfigured($authldaps_id)\n    {\n        $authldap = new self();\n        $authldap->getFromDB($authldaps_id);\n        return ($authldap->isSyncFieldEnabled());\n    }\n\n    /**\n     * Test a LDAP connection\n     *\n     * @param integer $auths_id     ID of the LDAP server\n     * @param integer $replicate_id use a replicate if > 0 (default -1)\n     *\n     * @return boolean connection succeeded?\n     */\n    public static function testLDAPConnection($auths_id, $replicate_id = -1)\n    {\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($auths_id);\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n       //Test connection to a replicate\n        if ($replicate_id != -1) {\n            $replicate = new AuthLdapReplicate();\n            $replicate->getFromDB($replicate_id);\n            $host = $replicate->fields[\"host\"];\n            $port = $replicate->fields[\"port\"];\n        } else {\n           //Test connection to a master ldap server\n            $host = $config_ldap->fields['host'];\n            $port = $config_ldap->fields['port'];\n        }\n        $ds = self::connectToServer(\n            $host,\n            $port,\n            $config_ldap->fields['rootdn'],\n            (new GLPIKey())->decrypt($config_ldap->fields['rootdn_passwd']),\n            $config_ldap->fields['use_tls'],\n            $config_ldap->fields['deref_option'],\n            $config_ldap->fields['tls_certfile'],\n            $config_ldap->fields['tls_keyfile'],\n            $config_ldap->fields['use_bind'],\n            $config_ldap->fields['timeout']\n        );\n        if ($ds) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Display a warnign about size limit\n     *\n     * @since 0.84\n     *\n     * @param boolean $limitexceeded (false by default)\n     *\n     * @return void\n     */\n    public static function displaySizeLimitWarning($limitexceeded = false)\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n        if ($limitexceeded) {\n            echo \"<div class='firstbloc'><table class='tab_cadre_fixe'>\";\n            echo \"<tr><th class='red'>\";\n            echo \"<img class='center' src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/warning.png'\n                alt='\" . __('Warning') . \"'>&nbsp;\" .\n             __('Warning: The request exceeds the limit of the directory. The results are only partial.');\n            echo \"</th></tr></table><div>\";\n        }\n    }\n\n\n    /**\n     * Show LDAP users to add or synchronise\n     *\n     * @return void\n     */\n    public static function showLdapUsers()\n    {\n\n        $values = [\n            'order' => 'DESC',\n            'start' => 0,\n        ];\n\n        foreach ($_SESSION['ldap_import'] as $option => $value) {\n            $values[$option] = $value;\n        }\n\n        $rand          = mt_rand();\n        $results       = [];\n        $limitexceeded = false;\n        $ldap_users    = self::getUsers($values, $results, $limitexceeded);\n\n        $config_ldap   = new AuthLDAP();\n        $config_ldap->getFromDB($values['authldaps_id']);\n\n        if (is_array($ldap_users)) {\n            $numrows = count($ldap_users);\n\n            if ($numrows > 0) {\n                echo \"<div class='card'>\";\n                self::displaySizeLimitWarning($limitexceeded);\n\n                Html::printPager($values['start'], $numrows, $_SERVER['PHP_SELF'], '');\n\n               // delete end\n                array_splice($ldap_users, $values['start'] + $_SESSION['glpilist_limit']);\n               // delete begin\n                if ($values['start'] > 0) {\n                    array_splice($ldap_users, 0, $values['start']);\n                }\n\n                $form_action = '';\n                $textbutton  = '';\n                if ($_SESSION['ldap_import']['mode']) {\n                    $textbutton  = _x('button', 'Synchronize');\n                    $form_action = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'sync';\n                } else {\n                    $textbutton  = _x('button', 'Import');\n                    $form_action = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import';\n                }\n\n                Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n                $massiveactionparams = [\n                    'num_displayed'    => min(count($ldap_users), $_SESSION['glpilist_limit']),\n                    'container'        => 'mass' . __CLASS__ . $rand,\n                    'specific_actions' => [$form_action => $textbutton]\n                ];\n                echo \"<div class='ms-2 ps-1 d-flex mb-2'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                echo \"<table class='table card-table'>\";\n                echo \"<thead>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                echo Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n                echo \"</th>\";\n                $num = 0;\n                if ($config_ldap->isSyncFieldEnabled()) {\n                    echo Search::showHeaderItem(\n                        Search::HTML_OUTPUT,\n                        __('Synchronization field'),\n                        $num,\n                        $_SERVER['PHP_SELF'] .\n                        \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                    );\n                }\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    User::getTypeName(Session::getPluralNumber()),\n                    $num,\n                    $_SERVER['PHP_SELF'] .\n                    \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                );\n                echo \"<th>\" . __('Last update in the LDAP directory') . \"</th>\";\n                if ($_SESSION['ldap_import']['mode']) {\n                     echo \"<th>\" . __('Last update in GLPI') . \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</thead>\";\n\n                foreach ($ldap_users as $userinfos) {\n                    echo \"<tr>\";\n                    //Need to use \" instead of ' because it doesn't work with names with ' inside !\n                    echo \"<td>\";\n                    echo Html::getMassiveActionCheckBox(__CLASS__, $userinfos['uid']);\n                    echo \"</td>\";\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                        echo \"<td>\" . $userinfos['uid'] . \"</td>\";\n                    }\n                    echo \"<td>\";\n                    if (isset($userinfos['id']) && User::canView()) {\n                        echo \"<a href='\" . $userinfos['link'] . \"'>\" . $userinfos['name'] . \"</a>\";\n                    } else {\n                        echo $userinfos['link'];\n                    }\n                    echo \"</td>\";\n\n                    if ($userinfos['stamp'] != '') {\n                         echo \"<td>\" . Html::convDateTime(date(\"Y-m-d H:i:s\", $userinfos['stamp'])) . \"</td>\";\n                    } else {\n                        echo \"<td>&nbsp;</td>\";\n                    }\n                    if ($_SESSION['ldap_import']['mode']) {\n                        if ($userinfos['date_sync'] != '') {\n                            echo \"<td>\" . Html::convDateTime($userinfos['date_sync']) . \"</td>\";\n                        }\n                    }\n                    echo \"</tr>\";\n                }\n                echo \"<tfoot>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                echo Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n                echo \"</th>\";\n                $num = 0;\n\n                if ($config_ldap->isSyncFieldEnabled()) {\n                    echo Search::showHeaderItem(\n                        Search::HTML_OUTPUT,\n                        __('Synchronization field'),\n                        $num,\n                        $_SERVER['PHP_SELF'] .\n                        \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                    );\n                }\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    User::getTypeName(Session::getPluralNumber()),\n                    $num,\n                    $_SERVER['PHP_SELF'] .\n                    \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                );\n                echo \"<th>\" . __('Last update in the LDAP directory') . \"</th>\";\n                if ($_SESSION['ldap_import']['mode']) {\n                     echo \"<th>\" . __('Last update in GLPI') . \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</tfoot>\";\n                echo \"</table>\";\n\n                $massiveactionparams['ontop'] = false;\n                echo \"<div class='ms-2 ps-1 mt-2 d-flex'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                Html::closeForm();\n\n                Html::printPager($values['start'], $numrows, $_SERVER['PHP_SELF'], '');\n\n                echo \"</div>\";\n            } else {\n                echo \"<div class='center b'>\" .\n                  ($_SESSION['ldap_import']['mode'] ? __('No user to be synchronized')\n                                                   : __('No user to be imported')) . \"</div>\";\n            }\n        } else {\n            echo \"<div class='center b'>\" .\n               ($_SESSION['ldap_import']['mode'] ? __('No user to be synchronized')\n                                                : __('No user to be imported')) . \"</div>\";\n        }\n    }\n\n    /**\n     * Search users\n     *\n     * @param resource $ds            An LDAP link identifier\n     * @param array    $values        values to search\n     * @param string   $filter        search filter\n     * @param array    $attrs         An array of the required attributes\n     * @param boolean  $limitexceeded is limit exceeded\n     * @param array    $user_infos    user information\n     * @param array    $ldap_users    ldap users\n     * @param object   $config_ldap   ldap configuration\n     *\n     * @return boolean\n     */\n    public static function searchForUsers(\n        $ds,\n        $values,\n        $filter,\n        $attrs,\n        &$limitexceeded,\n        &$user_infos,\n        &$ldap_users,\n        $config_ldap\n    ) {\n\n       //If paged results cannot be used (PHP < 5.4)\n        $cookie   = ''; //Cookie used to perform query using pages\n        $count    = 0;  //Store the number of results ldap_search\n\n        do {\n            $filter = Sanitizer::unsanitize($filter);\n            if (self::isLdapPageSizeAvailable($config_ldap)) {\n                $controls = [\n                    [\n                        'oid'       => LDAP_CONTROL_PAGEDRESULTS,\n                        'iscritical' => true,\n                        'value'     => [\n                            'size'   => $config_ldap->fields['pagesize'],\n                            'cookie' => $cookie\n                        ]\n                    ]\n                ];\n                $sr = @ldap_search($ds, $values['basedn'], $filter, $attrs, 0, -1, -1, LDAP_DEREF_NEVER, $controls);\n                if (\n                    $sr === false\n                    || @ldap_parse_result($ds, $sr, $errcode, $matcheddn, $errmsg, $referrals, $controls) === false\n                ) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ds) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ds,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return false;\n                }\n                if (isset($controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'])) {\n                    $cookie = $controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'];\n                } else {\n                    $cookie = '';\n                }\n            } else {\n                $sr = @ldap_search($ds, $values['basedn'], $filter, $attrs);\n                if ($sr === false) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ds) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ds,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return false;\n                }\n            }\n\n            if (in_array(ldap_errno($ds), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $info = self::get_entries_clean($ds, $sr);\n            if (in_array(ldap_errno($ds), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $count += $info['count'];\n           //If page results are enabled and the number of results is greater than the maximum allowed\n           //warn user that limit is exceeded and stop search\n            if (\n                self::isLdapPageSizeAvailable($config_ldap)\n                && $config_ldap->fields['ldap_maxlimit']\n                && ($count > $config_ldap->fields['ldap_maxlimit'])\n            ) {\n                $limitexceeded = true;\n                break;\n            }\n\n            $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n            $login_field = $config_ldap->fields['login_field'];\n\n            for ($ligne = 0; $ligne < $info[\"count\"]; $ligne++) {\n                if (in_array($field_for_sync, $info[$ligne])) {\n                    $uid = self::getFieldValue($info[$ligne], $field_for_sync);\n\n                    if ($login_field != $field_for_sync && !isset($info[$ligne][$login_field])) {\n                         trigger_error(\"Missing field $login_field for LDAP entry $field_for_sync $uid\", E_USER_WARNING);\n                         //Login field may be missing... Skip the user\n                         continue;\n                    }\n\n                    if (isset($info[$ligne]['modifytimestamp'])) {\n                        $user_infos[$uid][\"timestamp\"] = self::ldapStamp2UnixStamp(\n                            $info[$ligne]['modifytimestamp'][0],\n                            $config_ldap->fields['time_offset']\n                        );\n                    } else {\n                        $user_infos[$uid][\"timestamp\"] = '';\n                    }\n\n                    $user_infos[$uid][\"user_dn\"] = $info[$ligne]['dn'];\n                    $user_infos[$uid][$field_for_sync] = $uid;\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                          $user_infos[$uid][$login_field] = $info[$ligne][$login_field][0];\n                    }\n\n                    if ($values['mode'] == self::ACTION_IMPORT) {\n                         //If ldap add\n                         $ldap_users[$uid] = $uid;\n                    } else {\n                       //If ldap synchronisation\n                        if (isset($info[$ligne]['modifytimestamp'])) {\n                            $ldap_users[$uid] = self::ldapStamp2UnixStamp(\n                                $info[$ligne]['modifytimestamp'][0],\n                                $config_ldap->fields['time_offset']\n                            );\n                        } else {\n                            $ldap_users[$uid] = '';\n                        }\n                        $user_infos[$uid][\"name\"] = $info[$ligne][$login_field][0];\n                    }\n                }\n            }\n        } while (($cookie !== null) && ($cookie != ''));\n\n        return true;\n    }\n\n\n    /**\n     * Get the list of LDAP users to add/synchronize\n     *\n     * @param array   $options       possible options:\n     *          - authldaps_id ID of the server to use\n     *          - mode user to synchronize or add?\n     *          - ldap_filter ldap filter to use\n     *          - basedn force basedn (default authldaps_id one)\n     *          - order display order\n     *          - begin_date begin date to time limit\n     *          - end_date end date to time limit\n     *          - script true if called by an external script\n     * @param array   $results       result stats\n     * @param boolean $limitexceeded limit exceeded exception\n     *\n     * @return false|array\n     */\n    public static function getAllUsers(array $options, &$results, &$limitexceeded)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($options['authldaps_id']);\n\n        $values = [\n            'order'       => 'DESC',\n            'mode'        => self::ACTION_SYNCHRONIZE,\n            'ldap_filter' => '',\n            'basedn'      => $config_ldap->fields['basedn'],\n            'begin_date'  => null,\n            'end_date'    => date('Y-m-d H:i:s', time() - DAY_TIMESTAMP),\n            'script'      => 0, //Called by an external script or not\n        ];\n\n        foreach ($options as $option => $value) {\n           // this test break mode detection - if ($value != '') {\n            $values[$option] = $value;\n           //}\n        }\n\n        $ldap_users    = [];\n        $user_infos    = [];\n        $limitexceeded = false;\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n        if ($values['order'] != \"DESC\") {\n            $values['order'] = \"ASC\";\n        }\n        $ds = $config_ldap->connect();\n        $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n        $field_for_db   = $config_ldap->getDatabaseIdentifierToUse();\n        if ($ds) {\n           //Search for ldap login AND modifyTimestamp,\n           //which indicates the last update of the object in directory\n            $attrs = [$config_ldap->fields['login_field'], \"modifyTimestamp\"];\n            if ($field_for_sync != $config_ldap->fields['login_field']) {\n                $attrs[] = $field_for_sync;\n            }\n\n           // Try a search to find the DN\n            if ($values['ldap_filter'] == '') {\n                $filter = \"(\" . $field_for_sync . \"=*)\";\n                if (!empty($config_ldap->fields['condition'])) {\n                    $filter = \"(& $filter \" . Sanitizer::unsanitize($config_ldap->fields['condition']) . \")\";\n                }\n            } else {\n                $filter = $values['ldap_filter'];\n            }\n\n            if ($values['script'] && !empty($values['begin_date'])) {\n                $filter_timestamp = self::addTimestampRestrictions(\n                    $values['begin_date'],\n                    $values['end_date']\n                );\n                $filter           = \"(&$filter $filter_timestamp)\";\n            }\n            $result = self::searchForUsers(\n                $ds,\n                $values,\n                $filter,\n                $attrs,\n                $limitexceeded,\n                $user_infos,\n                $ldap_users,\n                $config_ldap\n            );\n            if (!$result) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n        $glpi_users = [];\n\n        $select = [\n            'FROM'   => User::getTable(),\n            'ORDER'  => ['name ' . $values['order']]\n        ];\n\n        if ($values['mode'] != self::ACTION_IMPORT) {\n            $select['WHERE'] = [\n                'authtype'  => [-1, Auth::NOT_YET_AUTHENTIFIED, Auth::LDAP, Auth::EXTERNAL, Auth::CAS],\n                'auths_id'  => $options['authldaps_id']\n            ];\n        }\n\n        $iterator = $DB->request($select);\n\n        foreach ($iterator as $user) {\n            $tmpuser = new User();\n\n           //Ldap add : fill the array with the login of the user\n            if ($values['mode'] == self::ACTION_IMPORT) {\n                $glpi_users[$user['name']] = $user['name'];\n            } else {\n               //Ldap synchronisation : look if the user exists in the directory\n               //and compares the modifications dates (ldap and glpi db)\n                $userfound = self::dnExistsInLdap($user_infos, $user['user_dn']);\n                if (!empty($ldap_users[$user[$field_for_db]]) || $userfound) {\n                   // userfound seems that user dn is present in GLPI DB but do not correspond to an GLPI user\n                   // -> renaming case\n                    if ($userfound) {\n                        //Get user in DB with this dn\n                        if (!$tmpuser->getFromDBByDn(Sanitizer::sanitize($user['user_dn']))) {\n                          //This should never happened\n                          //If a user_dn is present more than one time in database\n                          //Just skip user synchronization to avoid errors\n                            continue;\n                        }\n                        $glpi_users[] = ['id'         => $user['id'],\n                            'user'       => $userfound['name'],\n                            $field_for_sync => (isset($userfound[$config_ldap->fields['sync_field']]) ? $userfound[$config_ldap->fields['sync_field']] : 'NULL'),\n                            'timestamp'  => $user_infos[$userfound[$field_for_sync]]['timestamp'],\n                            'date_sync'  => $tmpuser->fields['date_sync'],\n                            'dn'         => $user['user_dn']\n                        ];\n                    } else if (\n                        ($values['mode'] == self::ACTION_ALL)\n                          || (($ldap_users[$user[$field_for_db]] - strtotime($user['date_sync'])) > 0)\n                    ) {\n                       //If entry was modified or if script should synchronize all the users\n                        $glpi_users[] = ['id'         => $user['id'],\n                            'user'       => $user['name'],\n                            $field_for_sync => $user['sync_field'],\n                            'timestamp'  => $user_infos[$user[$field_for_db]]['timestamp'],\n                            'date_sync'  => $user['date_sync'],\n                            'dn'         => $user['user_dn']\n                        ];\n                    }\n                } else if (\n                    ($values['mode'] == self::ACTION_ALL)\n                        && !$limitexceeded\n                ) {\n                   // Only manage deleted user if ALL (because of entity visibility in delegated mode)\n\n                    if ($user['auths_id'] == $options['authldaps_id']) {\n                        if (!$userfound && $user['is_deleted_ldap'] == 0) {\n                             //If user is marked as coming from LDAP, but is not present in it anymore\n                             User::manageDeletedUserInLdap($user['id']);\n                             $results[self::USER_DELETED_LDAP]++;\n                        } elseif ($userfound && $user['is_deleted_ldap'] == 1) {\n                           // User is marked as coming from LDAP, but was previously deleted\n                            User::manageRestoredUserInLdap($user['id']);\n                            $results[self::USER_RESTORED_LDAP]++;\n                        }\n                    }\n                }\n            }\n        }\n\n       //If add, do the difference between ldap users and glpi users\n        if ($values['mode'] == self::ACTION_IMPORT) {\n            $diff    = array_diff_ukey($ldap_users, $glpi_users, 'strcasecmp');\n            $list    = [];\n            $tmpuser = new User();\n\n            foreach ($diff as $user) {\n               //If user dn exists in DB, it means that user login field has changed\n                if (!$tmpuser->getFromDBByDn(Sanitizer::sanitize($user_infos[$user][\"user_dn\"]))) {\n                    $entry  = [\"user\"      => $user_infos[$user][$config_ldap->fields['login_field']],\n                        \"timestamp\" => $user_infos[$user][\"timestamp\"],\n                        \"date_sync\" => Dropdown::EMPTY_VALUE\n                    ];\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                        $entry[$field_for_sync] = $user_infos[$user][$field_for_sync];\n                    }\n                    $list[] = $entry;\n                }\n            }\n            if ($values['order'] == 'DESC') {\n                rsort($list);\n            } else {\n                sort($list);\n            }\n\n            return $list;\n        }\n        return $glpi_users;\n    }\n\n\n    /**\n     * Check if a user DN exists in a ldap user search result\n     *\n     * @since 0.84\n     *\n     * @param array  $ldap_infos ldap user search result\n     * @param string $user_dn    user dn to look for\n     *\n     * @return false|array false if the user dn doesn't exist, user ldap infos otherwise\n     */\n    public static function dnExistsInLdap($ldap_infos, $user_dn)\n    {\n\n        $found = false;\n        foreach ($ldap_infos as $ldap_info) {\n            if ($ldap_info['user_dn'] == $user_dn) {\n                $found = $ldap_info;\n                break;\n            }\n        }\n        return $found;\n    }\n\n\n    /**\n     * Show LDAP groups to add or synchronize in an entity\n     *\n     * @param string  $target  target page for the form\n     * @param integer $start   where to start the list\n     * @param integer $sync    synchronize or add? (default 0)\n     * @param string  $filter  ldap filter to use (default '')\n     * @param string  $filter2 second ldap filter to use (which case?) (default '')\n     * @param integer $entity  working entity\n     * @param string  $order   display order (default DESC)\n     *\n     * @return void\n     */\n    public static function showLdapGroups(\n        $target,\n        $start,\n        $sync = 0,\n        $filter = '',\n        $filter2 = '',\n        $entity = 0,\n        $order = 'DESC'\n    ) {\n\n        echo \"<br>\";\n        $limitexceeded = false;\n        $ldap_groups   = self::getAllGroups(\n            $_SESSION[\"ldap_server\"],\n            $filter,\n            $filter2,\n            $entity,\n            $limitexceeded,\n            $order\n        );\n\n        if (is_array($ldap_groups)) {\n            $numrows     = count($ldap_groups);\n            $rand        = mt_rand();\n            if ($numrows > 0) {\n                echo \"<div class='card'>\";\n                self::displaySizeLimitWarning($limitexceeded);\n                $parameters = '';\n                Html::printPager($start, $numrows, $target, $parameters);\n\n                // delete end\n                array_splice($ldap_groups, $start + $_SESSION['glpilist_limit']);\n                // delete begin\n                if ($start > 0) {\n                    array_splice($ldap_groups, 0, $start);\n                }\n\n                Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n                $massiveactionparams  = [\n                    'num_displayed' => min($_SESSION['glpilist_limit'], count($ldap_groups)),\n                    'container' => 'mass' . __CLASS__ . $rand,\n                    'specific_actions' => [\n                        __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import_group'\n                                       => _sx('button', 'Import')\n                    ],\n                    'extraparams' => [\n                        'massive_action_fields' => [\n                            'dn',\n                            'ldap_import_type',\n                            'ldap_import_entities',\n                            'ldap_import_recursive'\n                        ]\n                    ]\n                ];\n                echo \"<div class='ms-2 ps-1 d-flex mb-2'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                echo \"<table class='table table-sm card-table'>\";\n                echo \"<thead>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                Html::showCheckbox(['criterion' => ['tag_for_massive' => 'select_item']]);\n                echo \"</th>\";\n                $header_num = 0;\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    Group::getTypeName(1),\n                    $header_num,\n                    $target . \"?order=\" . ($order == \"DESC\" ? \"ASC\" : \"DESC\"),\n                    1,\n                    $order\n                );\n                echo \"<th>\" . __('Group DN') . \"</th>\";\n                echo \"<th>\" . __('Destination entity') . \"</th>\";\n                if (Session::isMultiEntitiesMode()) {\n                     echo\"<th>\";\n                     Html::showCheckbox(['criterion' => ['tag_for_massive' => 'select_item_child_entities']]);\n                     echo \"&nbsp;\" . __('Child entities');\n                     echo \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</thead>\";\n\n                $dn_index = 0;\n                foreach ($ldap_groups as $groupinfos) {\n                    $group       = $groupinfos[\"cn\"];\n                    $group_dn    = $groupinfos[\"dn\"];\n                    $search_type = $groupinfos[\"search_type\"];\n\n                    echo \"<tr>\";\n                    echo \"<td>\";\n                    echo Html::hidden(\"dn[$dn_index]\", ['value'                 => $group_dn,\n                        'data-glpicore-ma-tags' => 'common'\n                    ]);\n                    echo Html::hidden(\"ldap_import_type[$dn_index]\", ['value'                 => $search_type,\n                        'data-glpicore-ma-tags' => 'common'\n                    ]);\n                    Html::showMassiveActionCheckBox(\n                        __CLASS__,\n                        $dn_index,\n                        ['massive_tags' => 'select_item']\n                    );\n                    echo \"</td>\";\n                    echo \"<td>\" . $group . \"</td>\";\n                    echo \"<td>\" . $group_dn . \"</td>\";\n                    echo \"<td>\";\n                    Entity::dropdown(['value'         => $entity,\n                        'name'          => \"ldap_import_entities[$dn_index]\",\n                        'specific_tags' => ['data-glpicore-ma-tags' => 'common']\n                    ]);\n                    echo \"</td>\";\n                    if (Session::isMultiEntitiesMode()) {\n                          echo \"<td>\";\n                          Html::showMassiveActionCheckBox(\n                              __CLASS__,\n                              $dn_index,\n                              ['massive_tags'  => 'select_item_child_entities',\n                                  'name'          => \"ldap_import_recursive[$dn_index]\",\n                                  'specific_tags' => ['data-glpicore-ma-tags' => 'common']\n                              ]\n                          );\n                            echo \"</td>\";\n                    } else {\n                        echo Html::hidden(\"ldap_import_recursive[$dn_index]\", ['value'                 => 0,\n                            'data-glpicore-ma-tags' => 'common'\n                        ]);\n                    }\n                    echo \"</tr>\";\n                    $dn_index++;\n                }\n                echo \"</table>\";\n\n                $massiveactionparams['ontop'] = false;\n                echo \"<div class='ms-2 ps-1 mt-2 d-flex'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                Html::closeForm();\n                Html::printPager($start, $numrows, $target, $parameters);\n                echo \"</div>\";\n            } else {\n                echo \"<div class='center b'>\" . __('No group to be imported') . \"</div>\";\n            }\n        } else {\n            echo \"<div class='center b'>\" . __('No group to be imported') . \"</div>\";\n        }\n    }\n\n\n    /**\n     * Get all LDAP groups from a ldap server which are not already in an entity\n     *\n     * @since 0.84 new parameter $limitexceeded\n     *\n     * @param integer $auths_id      ID of the server to use\n     * @param string  $filter        ldap filter to use\n     * @param string  $filter2       second ldap filter to use if needed\n     * @param string  $entity        entity to search\n     * @param boolean $limitexceeded is limit exceeded\n     * @param string  $order         order to use (default DESC)\n     *\n     * @return array of the groups\n     */\n    public static function getAllGroups(\n        $auths_id,\n        $filter,\n        $filter2,\n        $entity,\n        &$limitexceeded,\n        $order = 'DESC'\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $config_ldap = new self();\n        $config_ldap->getFromDB($auths_id);\n        $infos       = [];\n        $groups      = [];\n\n        $ds = $config_ldap->connect();\n        if ($ds) {\n            switch ($config_ldap->fields[\"group_search_type\"]) {\n                case self::GROUP_SEARCH_USER:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        false,\n                        $infos\n                    );\n                    break;\n\n                case self::GROUP_SEARCH_GROUP:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        true,\n                        $infos\n                    );\n                    break;\n\n                case self::GROUP_SEARCH_BOTH:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        true,\n                        $infos\n                    );\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter2,\n                        $limitexceeded,\n                        false,\n                        $infos\n                    );\n                    break;\n            }\n            if (!empty($infos)) {\n                $glpi_groups = [];\n\n               //Get all groups from GLPI DB for the current entity and the subentities\n                $iterator = $DB->request([\n                    'SELECT' => ['ldap_group_dn','ldap_value'],\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => getEntitiesRestrictCriteria('glpi_groups')\n                ]);\n\n               //If the group exists in DB -> unset it from the LDAP groups\n                foreach ($iterator as $group) {\n                      //use DN for next step\n                      //depending on the type of search when groups are imported\n                      //the DN may be in two separate fields\n                    if (isset($group[\"ldap_group_dn\"]) && !empty($group[\"ldap_group_dn\"])) {\n                        $glpi_groups[$group[\"ldap_group_dn\"]] = 1;\n                    } else if (isset($group[\"ldap_value\"]) && !empty($group[\"ldap_value\"])) {\n                        $glpi_groups[$group[\"ldap_value\"]] = 1;\n                    }\n                }\n                $ligne = 0;\n\n                foreach ($infos as $dn => $info) {\n                    //reconcile by DN\n                    if (!isset($glpi_groups[$dn])) {\n                        $groups[$ligne][\"dn\"]          = $dn;\n                        $groups[$ligne][\"cn\"]          = $info[\"cn\"];\n                        $groups[$ligne][\"search_type\"] = $info[\"search_type\"];\n                        $ligne++;\n                    }\n                }\n            }\n\n            usort(\n                $groups,\n                function ($a, $b) use ($order) {\n                    return $order == 'DESC' ? strcasecmp($b['cn'], $a['cn']) : strcasecmp($a['cn'], $b['cn']);\n                }\n            );\n        }\n        return $groups;\n    }\n\n\n    /**\n     * Get the group's cn by giving his DN\n     *\n     * @param resource $ldap_connection ldap connection to use\n     * @param string   $group_dn        the group's dn\n     *\n     * @return false|string the group cn\n     */\n    public static function getGroupCNByDn($ldap_connection, $group_dn)\n    {\n\n        $sr = @ldap_read($ldap_connection, $group_dn, \"objectClass=*\", [\"cn\"]);\n        if ($sr === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ldap_connection) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ldap_connection,\n                        sprintf(\n                            'Unable to get LDAP group having DN `%s`',\n                            $group_dn\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n        $v  = self::get_entries_clean($ldap_connection, $sr);\n        if (!is_array($v) || (count($v) == 0) || empty($v[0][\"cn\"][0])) {\n            return false;\n        }\n        return $v[0][\"cn\"][0];\n    }\n\n\n    /**\n     * Set groups from ldap\n     *\n     * @since 0.84 new parameter $limitexceeded\n     *\n     * @param resource $ldap_connection  LDAP connection\n     * @param object   $config_ldap      LDAP configuration\n     * @param string   $filter           Filters\n     * @param boolean  $limitexceeded    Is limit exceeded\n     * @param boolean  $search_in_groups Search in groups (true by default)\n     * @param array    $groups           Groups to search\n     *\n     * @return array\n     */\n    public static function getGroupsFromLDAP(\n        $ldap_connection,\n        $config_ldap,\n        $filter,\n        &$limitexceeded,\n        $search_in_groups = true,\n        $groups = []\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n       //First look for groups in group objects\n        $extra_attribute = ($search_in_groups ? \"cn\" : $config_ldap->fields[\"group_field\"]);\n        $attrs           = [\"dn\", $extra_attribute];\n\n        if ($filter == '') {\n            if ($search_in_groups) {\n                $filter = (!empty($config_ldap->fields['group_condition'])\n                       ? Sanitizer::unsanitize($config_ldap->fields['group_condition']) : \"(objectclass=*)\");\n            } else {\n                $filter = (!empty($config_ldap->fields['condition'])\n                       ? Sanitizer::unsanitize($config_ldap->fields['condition']) : \"(objectclass=*)\");\n            }\n        }\n        $cookie = '';\n        $count  = 0;\n        do {\n            $filter = Sanitizer::unsanitize($filter);\n            if (self::isLdapPageSizeAvailable($config_ldap)) {\n                $controls = [\n                    [\n                        'oid'       => LDAP_CONTROL_PAGEDRESULTS,\n                        'iscritical' => true,\n                        'value'     => [\n                            'size'   => $config_ldap->fields['pagesize'],\n                            'cookie' => $cookie\n                        ]\n                    ]\n                ];\n                $sr = @ldap_search($ldap_connection, $config_ldap->fields['basedn'], $filter, $attrs, 0, -1, -1, LDAP_DEREF_NEVER, $controls);\n                if (\n                    $sr === false\n                    || @ldap_parse_result($ldap_connection, $sr, $errcode, $matcheddn, $errmsg, $referrals, $controls) === false\n                ) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ldap_connection) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ldap_connection,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $config_ldap->fields['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return $groups;\n                }\n                if (isset($controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'])) {\n                    $cookie = $controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'];\n                } else {\n                    $cookie = '';\n                }\n            } else {\n                $sr = @ldap_search($ldap_connection, $config_ldap->fields['basedn'], $filter, $attrs);\n                if ($sr === false) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ldap_connection) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ldap_connection,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $config_ldap->fields['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return $groups;\n                }\n            }\n\n            if (in_array(ldap_errno($ldap_connection), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $infos  = self::get_entries_clean($ldap_connection, $sr);\n            if (in_array(ldap_errno($ldap_connection), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $count += $infos['count'];\n           //If page results are enabled and the number of results is greater than the maximum allowed\n           //warn user that limit is exceeded and stop search\n            if (\n                self::isLdapPageSizeAvailable($config_ldap)\n                && $config_ldap->fields['ldap_maxlimit']\n                && ($count > $config_ldap->fields['ldap_maxlimit'])\n            ) {\n                $limitexceeded = true;\n                break;\n            }\n\n            for ($ligne = 0; $ligne < $infos[\"count\"]; $ligne++) {\n                if ($search_in_groups) {\n                   // No cn : not a real object\n                    if (isset($infos[$ligne][\"cn\"][0])) {\n                         $groups[$infos[$ligne][\"dn\"]] = ([\"cn\" => $infos[$ligne][\"cn\"][0],\n                             \"search_type\" => \"groups\"\n                         ]);\n                    }\n                } else {\n                    if (isset($infos[$ligne][$extra_attribute])) {\n                        if (\n                            ($config_ldap->fields[\"group_field\"] == 'dn')\n                            || in_array('ou', $groups)\n                        ) {\n                            $dn = $infos[$ligne][$extra_attribute];\n                            $ou = [];\n                            for ($tmp = $dn; count($tmptab = explode(',', $tmp, 2)) == 2; $tmp = $tmptab[1]) {\n                                $ou[] = $tmptab[1];\n                            }\n\n                           /// Search in DB for group with ldap_group_dn\n                            if (\n                                ($config_ldap->fields[\"group_field\"] == 'dn')\n                                && (count($ou) > 0)\n                            ) {\n                                $iterator = $DB->request([\n                                    'SELECT' => ['ldap_value'],\n                                    'FROM'   => 'glpi_groups',\n                                    'WHERE'  => [\n                                        'ldap_group_dn' => Sanitizer::sanitize($ou)\n                                    ]\n                                ]);\n\n                                foreach ($iterator as $group) {\n                                     $groups[$group['ldap_value']] = [\"cn\"          => $group['ldap_value'],\n                                         \"search_type\" => \"users\"\n                                     ];\n                                }\n                            }\n                        } else {\n                            for (\n                                $ligne_extra = 0; $ligne_extra < $infos[$ligne][$extra_attribute][\"count\"];\n                                $ligne_extra++\n                            ) {\n                                $groups[$infos[$ligne][$extra_attribute][$ligne_extra]]\n                                = [\"cn\"   => self::getGroupCNByDn(\n                                    $ldap_connection,\n                                    $infos[$ligne][$extra_attribute][$ligne_extra]\n                                ),\n                                    \"search_type\"\n                                         => \"users\"\n                                ];\n                            }\n                        }\n                    }\n                }\n            }\n        } while (($cookie !== null) && ($cookie != ''));\n\n        return $groups;\n    }\n\n\n    /**\n     * Form to choose a ldap server\n     *\n     * @param string $target target page for the form\n     *\n     * @return void\n     */\n    public static function ldapChooseDirectory($target)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $iterator = $DB->request([\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'is_active' => 1\n            ],\n            'ORDER'  => 'name ASC'\n        ]);\n\n        if (count($iterator) == 1) {\n           //If only one server, do not show the choose ldap server window\n            $ldap                    = $iterator->current();\n            $_SESSION[\"ldap_server\"] = $ldap[\"id\"];\n            Html::redirect($_SERVER['PHP_SELF']);\n        }\n\n        echo TemplateRenderer::getInstance()->render('pages/admin/ldap.choose_directory.html.twig', [\n            'target'          => $target,\n            'nb_ldap_servers' => count($iterator),\n        ]);\n    }\n\n    /**\n     * Force synchronization for one user\n     *\n     * @param User    $user              User to synchronize\n     * @param boolean $clean_ldap_fields empty user_dn and sync_field before import user again\n     * @param boolean $display           Display message information on redirect (true by default)\n     *\n     * @return array|boolean  with state, else false\n     */\n    public static function forceOneUserSynchronization(User $user, $clean_ldap_fields = false, $display = true)\n    {\n        $authldap = new AuthLDAP();\n\n       //Get the LDAP server from which the user has been imported\n        if ($authldap->getFromDB($user->fields['auths_id'])) {\n           // clean ldap fields if asked by admin\n            if ($clean_ldap_fields) {\n                $user->update([\n                    'id'         => $user->fields['id'],\n                    'user_dn'    => '',\n                    'sync_field' => '',\n                ]);\n            }\n\n            $user_field = 'name';\n            $id_field = $authldap->fields['login_field'];\n            if ($authldap->isSyncFieldEnabled() && !empty($user->fields['sync_field'])) {\n                $user_field = 'sync_field';\n                $id_field   = $authldap->fields['sync_field'];\n            }\n            return AuthLDAP::ldapImportUserByServerId(\n                [\n                    'method'             => self::IDENTIFIER_LOGIN,\n                    'value'              => $user->fields[$user_field],\n                    'identifier_field'   => $id_field,\n                    'user_field'         => $user_field\n                ],\n                true,\n                $user->fields[\"auths_id\"],\n                $display\n            );\n        }\n        return false;\n    }\n\n    /**\n     * Import a user from a specific ldap server\n     *\n     * @param array   $params      of parameters: method (IDENTIFIER_LOGIN or IDENTIFIER_EMAIL) + value\n     * @param boolean $action      synchoronize (true) or import (false)\n     * @param integer $ldap_server ID of the LDAP server to use\n     * @param boolean $display     display message information on redirect (false by default)\n     *\n     * @return array|boolean  with state, else false\n     */\n    public static function ldapImportUserByServerId(\n        array $params,\n        $action,\n        $ldap_server,\n        $display = false\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $params      = Sanitizer::unsanitize($params);\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($ldap_server);\n        $input = [];\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n        if (!isset($params['identifier_field'])) {\n            $params['identifier_field'] = $config_ldap->getLdapIdentifierToUse();\n        }\n        if (!isset($params['user_field'])) {\n            $params['user_field'] = $config_ldap->getDatabaseIdentifierToUse();\n        }\n\n        $search_parameters = [];\n       //Connect to the directory\n        if (isset(self::$conn_cache[$ldap_server])) {\n            $ds = self::$conn_cache[$ldap_server];\n        } else {\n            $ds = $config_ldap->connect();\n        }\n        if ($ds) {\n            self::$conn_cache[$ldap_server] = $ds;\n            $search_parameters['method']                         = $params['method'];\n            $search_parameters['fields'][self::IDENTIFIER_LOGIN] = $params['identifier_field'];\n\n            if ($params['method'] == self::IDENTIFIER_EMAIL) {\n                $search_parameters['fields'][self::IDENTIFIER_EMAIL]\n                                       = $config_ldap->fields['email1_field'];\n            }\n\n           //Get the user's dn & login\n            $attribs = ['basedn'            => $config_ldap->fields['basedn'],\n                'login_field'       => $search_parameters['fields'][$search_parameters['method']],\n                'search_parameters' => $search_parameters,\n                'user_params'       => $params,\n                'condition'         => Sanitizer::unsanitize($config_ldap->fields['condition'])\n            ];\n\n            try {\n                $infos = self::searchUserDn($ds, $attribs);\n\n                if ($infos && $infos['dn']) {\n                    $user_dn = $infos['dn'];\n                    $user    = new User();\n\n                    $login   = self::getFieldValue($infos, $search_parameters['fields'][$search_parameters['method']]);\n\n                   //Get information from LDAP\n                    if (\n                        $user->getFromLDAP(\n                            $ds,\n                            $config_ldap->fields,\n                            $user_dn,\n                            Sanitizer::sanitize($login),\n                            ($action == self::ACTION_IMPORT)\n                        )\n                    ) {\n                        //Get the ID by sync field (Used to check if restoration is needed)\n                        $searched_user = new User();\n                        $user_found = false;\n                        if ($login === null || !($user_found = $searched_user->getFromDBbySyncField(Sanitizer::sanitize($login)))) {\n                         //In case user id has changed : get id by dn (Used to check if restoration is needed)\n                            $user_found = $searched_user->getFromDBbyDn(Sanitizer::sanitize($user_dn));\n                        }\n                        if ($user_found && $searched_user->fields['is_deleted_ldap'] && $searched_user->fields['user_dn']) {\n                            User::manageRestoredUserInLdap($searched_user->fields['id']);\n                            return ['action' => self::USER_RESTORED_LDAP,\n                                'id' => $searched_user->fields['id']\n                            ];\n                        }\n\n                      // Add the auth method\n                      // Force date sync\n                        $user->fields[\"date_sync\"] = $_SESSION[\"glpi_currenttime\"];\n                        $user->fields['is_deleted_ldap'] = 0;\n\n                      //Save information in database !\n                        $input = $user->fields;\n\n                      //clean picture from input\n                      // (picture managed in User::post_addItem and prepareInputForUpdate)\n                        unset($input['picture']);\n\n                        if ($action == self::ACTION_IMPORT) {\n                            $input[\"authtype\"] = Auth::LDAP;\n                            $input[\"auths_id\"] = $ldap_server;\n                            // Display message after redirect\n                            if ($display) {\n                                $input['add'] = 1;\n                            }\n\n                            $user->fields[\"id\"] = $user->add($input);\n                            return ['action' => self::USER_IMPORTED,\n                                'id'     => $user->fields[\"id\"]\n                            ];\n                        }\n                      //Get the ID by user name\n                        if (!($id = User::getIdByfield($params['user_field'], $login))) {\n                           //In case user id as changed : get id by dn\n                            $id = User::getIdByfield('user_dn', $user_dn);\n                        }\n                        $input['id'] = $id;\n\n                        if ($display) {\n                            $input['update'] = 1;\n                        }\n                        $user->update($input);\n                        return ['action' => self::USER_SYNCHRONIZED,\n                            'id'     => $input['id']\n                        ];\n                    }\n                    return false;\n                }\n                if ($action != self::ACTION_IMPORT) {\n                    $users_id = User::getIdByField($params['user_field'], $params['value']);\n                    User::manageDeletedUserInLdap($users_id);\n                    return ['action' => self::USER_DELETED_LDAP,\n                        'id'     => $users_id\n                    ];\n                }\n            } catch (\\RuntimeException $e) {\n                ErrorHandler::getInstance()->handleException($e);\n                return false;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Import grousp from an LDAP directory\n     *\n     * @param string $group_dn dn of the group to import\n     * @param array  $options  array for\n     *             - authldaps_id\n     *             - entities_id where group must to be imported\n     *             - is_recursive\n     *\n     * @return integer|false\n     */\n    public static function ldapImportGroup($group_dn, $options = [])\n    {\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($options['authldaps_id']);\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n       //Connect to the directory\n        $ds = $config_ldap->connect();\n        if ($ds) {\n            $group_infos = self::getGroupByDn($ds, Sanitizer::unsanitize($group_dn));\n            $group       = new Group();\n            if ($options['type'] == \"groups\") {\n                return $group->add(Sanitizer::sanitize([\n                    \"name\"          => $group_infos[\"cn\"][0],\n                    \"ldap_group_dn\" => $group_infos[\"dn\"],\n                    \"entities_id\"   => $options['entities_id'],\n                    \"is_recursive\"  => $options['is_recursive']\n                ]));\n            }\n            return $group->add(Sanitizer::sanitize([\n                \"name\"         => $group_infos[\"cn\"][0],\n                \"ldap_field\"   => $config_ldap->fields[\"group_field\"],\n                \"ldap_value\"   => $group_infos[\"dn\"],\n                \"entities_id\"  => $options['entities_id'],\n                \"is_recursive\" => $options['is_recursive']\n            ]));\n        }\n        return false;\n    }\n\n\n    /**\n     * Open LDAP connection to current server\n     *\n     * @return resource|boolean\n     */\n    public function connect()\n    {\n\n        return $this->connectToServer(\n            $this->fields['host'],\n            $this->fields['port'],\n            $this->fields['rootdn'],\n            (new GLPIKey())->decrypt($this->fields['rootdn_passwd']),\n            $this->fields['use_tls'],\n            $this->fields['deref_option'],\n            $this->fields['tls_certfile'],\n            $this->fields['tls_keyfile'],\n            $this->fields['use_bind'],\n            $this->fields['timeout']\n        );\n    }\n\n\n    /**\n     * Connect to a LDAP server\n     *\n     * @param string  $host                 LDAP host to connect\n     * @param string  $port                 port to use\n     * @param string  $login                login to use (default '')\n     * @param string  $password             password to use (default '')\n     * @param boolean $use_tls              use a TLS connection? (false by default)\n     * @param integer $deref_options        deref options used\n     * @param string  $tls_certfile         TLS CERT file name within config directory (default '')\n     * @param string  $tls_keyfile          TLS KEY file name within config directory (default '')\n     * @param boolean $use_bind             do we need to do an ldap_bind? (true by default)\n     * @param bool    $silent_bind_errors   Indicates whether bind errors must be silented\n     *\n     * @return resource|false|\\LDAP\\Connection link to the LDAP server : false if connection failed\n     */\n    public static function connectToServer(\n        $host,\n        $port,\n        $login = \"\",\n        $password = \"\",\n        $use_tls = false,\n        $deref_options = 0,\n        $tls_certfile = \"\",\n        $tls_keyfile = \"\",\n        $use_bind = true,\n        $timeout = 0,\n        bool $silent_bind_errors = false\n    ) {\n\n        $ds = @ldap_connect($host, intval($port));\n\n        if ($ds === false) {\n            trigger_error(\n                sprintf(\n                    \"Unable to connect to LDAP server %s:%s\",\n                    $host,\n                    $port\n                ),\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        $ldap_options = [\n            LDAP_OPT_PROTOCOL_VERSION => 3,\n            LDAP_OPT_REFERRALS        => 0,\n            LDAP_OPT_DEREF            => $deref_options,\n        ];\n\n        if ($timeout > 0) {\n            // Apply the timeout unless it is \"unlimited\" (\"unlimited\" is the default value defined in `libldap`).\n            // see https://linux.die.net/man/3/ldap_set_option\n            $ldap_options[LDAP_OPT_NETWORK_TIMEOUT] = $timeout;\n        }\n\n        foreach ($ldap_options as $option => $value) {\n            if (!@ldap_set_option($ds, $option, $value)) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to set LDAP option `%s` to `%s`\",\n                            $option,\n                            $value\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n        }\n        if (\n            !empty($tls_certfile)\n            && file_exists($tls_certfile)\n            && !@ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, $tls_certfile)\n        ) {\n            trigger_error(\"Unable to set LDAP option `LDAP_OPT_X_TLS_CERTFILE`\", E_USER_WARNING);\n        }\n        if (\n            !empty($tls_keyfile)\n            && file_exists($tls_keyfile)\n            && !@ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, $tls_keyfile)\n        ) {\n            trigger_error(\"Unable to set LDAP option `LDAP_OPT_X_TLS_KEYFILE`\", E_USER_WARNING);\n        }\n\n        if ($use_tls) {\n            if (!@ldap_start_tls($ds)) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to start TLS connection to LDAP server `%s:%s`\",\n                            $host,\n                            $port\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n                return false;\n            }\n        }\n\n        if (!$use_bind) {\n            return $ds;\n        }\n\n        if ($login != '') {\n            // Auth bind\n            $b = @ldap_bind($ds, $login, $password);\n        } else {\n            // Anonymous bind\n            $b = @ldap_bind($ds);\n        }\n        if ($b === false) {\n            if ($silent_bind_errors === false) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to bind to LDAP server `%s:%s` %s\",\n                            $host,\n                            $port,\n                            ($login != '' ? \"with RDN `$login`\" : 'anonymously')\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        return $ds;\n    }\n\n\n    /**\n     * Try to connect to a ldap server\n     *\n     * @param array  $ldap_method ldap_method array to use\n     * @param string $login       User Login\n     * @param string $password    User Password\n     *\n     * @return resource|boolean link to the LDAP server : false if connection failed\n     */\n    public static function tryToConnectToServer($ldap_method, $login, $password)\n    {\n        if (!function_exists('ldap_connect')) {\n            trigger_error(\"ldap_connect function is missing. Did you miss install php-ldap extension?\", E_USER_WARNING);\n            return false;\n        }\n        $ds = self::connectToServer(\n            $ldap_method['host'],\n            $ldap_method['port'],\n            $ldap_method['rootdn'],\n            (new GLPIKey())->decrypt($ldap_method['rootdn_passwd']),\n            $ldap_method['use_tls'],\n            $ldap_method['deref_option'],\n            $ldap_method['tls_certfile'] ?? '',\n            $ldap_method['tls_keyfile'] ?? '',\n            $ldap_method['use_bind'],\n            $ldap_method['timeout']\n        );\n\n        // Test with login and password of the user if exists\n        if (\n            !$ds\n            && !empty($login)\n            && (bool) $ldap_method['use_bind']\n        ) {\n            $ds = self::connectToServer(\n                $ldap_method['host'],\n                $ldap_method['port'],\n                $login,\n                $password,\n                $ldap_method['use_tls'],\n                $ldap_method['deref_option'],\n                $ldap_method['tls_certfile'] ?? '',\n                $ldap_method['tls_keyfile'] ?? '',\n                $ldap_method['use_bind'],\n                $ldap_method['timeout'],\n                true // silent bind error when trying to bind with user login/password\n            );\n        }\n\n       //If connection is not successful on this directory, try replicates (if replicates exists)\n        if (\n            !$ds\n            && ($ldap_method['id'] > 0)\n        ) {\n            foreach (self::getAllReplicateForAMaster($ldap_method['id']) as $replicate) {\n                $ds = self::connectToServer(\n                    $replicate[\"host\"],\n                    $replicate[\"port\"],\n                    $ldap_method['rootdn'],\n                    (new GLPIKey())->decrypt($ldap_method['rootdn_passwd']),\n                    $ldap_method['use_tls'],\n                    $ldap_method['deref_option'],\n                    $ldap_method['tls_certfile'] ?? '',\n                    $ldap_method['tls_keyfile'] ?? '',\n                    $ldap_method['use_bind'],\n                    $ldap_method['timeout']\n                );\n\n               // Test with login and password of the user\n                if (\n                    !$ds\n                    && !empty($login)\n                    && (bool) $ldap_method['use_bind']\n                ) {\n                     $ds = self::connectToServer(\n                         $replicate[\"host\"],\n                         $replicate[\"port\"],\n                         $login,\n                         $password,\n                         $ldap_method['use_tls'],\n                         $ldap_method['deref_option'],\n                         $ldap_method['tls_certfile'] ?? '',\n                         $ldap_method['tls_keyfile'] ?? '',\n                         $ldap_method['use_bind'],\n                         $ldap_method['timeout'],\n                         true // silent bind error when trying to bind with user login/password\n                     );\n                }\n                if ($ds) {\n                    return $ds;\n                }\n            }\n        }\n        return $ds;\n    }\n\n    /**\n     * Get LDAP servers\n     *\n     * @return array\n     */\n    public static function getLdapServers()\n    {\n        return getAllDataFromTable('glpi_authldaps', ['ORDER' => 'is_default DESC']);\n    }\n\n\n    /**\n     * Is the LDAP authentication used?\n     *\n     * @return boolean\n     */\n    public static function useAuthLdap()\n    {\n        return (countElementsInTable('glpi_authldaps', ['is_active' => 1]) > 0);\n    }\n\n\n    /**\n     * Import a user from ldap\n     * Check all the directories. When the user is found, then import it\n     *\n     * @param array $options array containing condition:\n     *                 array('name'=>'glpi') or array('email' => 'test at test.com')\n     *\n     * @return array|boolean false if fail\n     */\n    public static function importUserFromServers($options = [])\n    {\n\n        $auth   = new Auth();\n        $params = [];\n        if (isset($options['name'])) {\n            $params['value']  = $options['name'];\n            $params['method'] = self::IDENTIFIER_LOGIN;\n        }\n        if (isset($options['email'])) {\n            $params['value']  = $options['email'];\n            $params['method'] = self::IDENTIFIER_EMAIL;\n        }\n\n        $auth->user_present = $auth->userExists($options);\n\n       //If the user does not exists\n        if ($auth->user_present == 0) {\n            $auth->getAuthMethods();\n            $ldap_methods = $auth->authtypes[\"ldap\"];\n\n            foreach ($ldap_methods as $ldap_method) {\n                if ($ldap_method['is_active']) {\n                    //we're looking for a user login\n                    $params['identifier_field']   = $ldap_method['login_field'];\n                    $params['user_field']         = 'name';\n                    $result = self::ldapImportUserByServerId($params, 0, $ldap_method[\"id\"], true);\n                    if ($result != false) {\n                        return $result;\n                    }\n                }\n            }\n            Session::addMessageAfterRedirect(__('User not found or several users found'), false, ERROR);\n        } else {\n            Session::addMessageAfterRedirect(\n                __('Unable to add. The user already exist.'),\n                false,\n                ERROR\n            );\n        }\n        return false;\n    }\n\n\n    /**\n     * Authentify a user by checking a specific directory\n     *\n     * @param Auth      $auth        identification object\n     * @param string    $login       user login\n     * @param string    $password    user password\n     * @param array     $ldap_method ldap_method array to use\n     * @param string    $user_dn     user LDAP DN if present\n     * @param bool|null $error       Boolean flag that will be set to `true` if a LDAP error occurs during connection\n     *\n     * @return object identification object\n     */\n    public static function ldapAuth($auth, $login, $password, $ldap_method, $user_dn, ?bool &$error = null)\n    {\n\n        $auth->auth_succeded = false;\n        $auth->extauth       = 1;\n\n        $infos  = $auth->connection_ldap($ldap_method, $login, $password, $error);\n\n        if ($infos === false) {\n            return $auth;\n        }\n\n        $user_dn = $infos['dn'];\n        $user_sync = (isset($infos['sync_field']) ? $infos['sync_field'] : null);\n\n        if ($user_dn) {\n            $auth->auth_succeded            = true;\n           // try by login+auth_id and next by dn\n            if (\n                $auth->user->getFromDBbyNameAndAuth($login, Auth::LDAP, $ldap_method['id'])\n                || $auth->user->getFromDBbyDn(Sanitizer::sanitize($user_dn))\n            ) {\n                //There's already an existing user in DB with the same DN but its login field has changed\n                $auth->user->fields['name'] = $login;\n                $auth->user_present         = true;\n                $auth->user_dn              = $user_dn;\n            } else if ($user_sync !== null && $auth->user->getFromDBbySyncField($user_sync)) {\n               //user login/dn have changed\n                $auth->user->fields['name']      = $login;\n                $auth->user->fields['user_dn']   = $user_dn;\n                $auth->user_present              = true;\n                $auth->user_dn                   = $user_dn;\n            } else { // The user is a new user\n                $auth->user_present = false;\n            }\n            $auth->user->getFromLDAP(\n                $auth->ldap_connection,\n                $ldap_method,\n                $user_dn,\n                $login,\n                !$auth->user_present\n            );\n            $auth->user->fields[\"authtype\"] = Auth::LDAP;\n            $auth->user->fields[\"auths_id\"] = $ldap_method[\"id\"];\n        }\n        return $auth;\n    }\n\n\n    /**\n     * Try to authentify a user by checking all the directories\n     *\n     * @param Auth    $auth     identification object\n     * @param string  $login    user login\n     * @param string  $password user password\n     * @param integer $auths_id auths_id already used for the user (default 0)\n     * @param boolean $user_dn  user LDAP DN if present (false by default)\n     * @param boolean $break    if user is not found in the first directory,\n     *                          continue searching on the following ones (true by default)\n     *\n     * @return object identification object\n     */\n    public static function tryLdapAuth($auth, $login, $password, $auths_id = 0, $user_dn = false, $break = true)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n       //If no specific source is given, test all ldap directories\n        if ($auths_id <= 0) {\n            $user_found = false;\n\n            $ldap_methods = $auth->authtypes[\"ldap\"];\n\n           // Sort servers to first try on known servers for given login.\n           // It is necessary to still necessary to try to connect on all servers to handle following cases:\n           //  - there are multiple users having same login on different LDAP servers,\n           //  - a user has been migrated from a LDAP server to another one, but GLPI is not yet aware of this.\n           // Caveat: if user uses a wrong password, a login attempt will still be done on all active LDAP servers.\n            $known_servers = $DB->request(\n                [\n                    'SELECT' => 'auths_id',\n                    'FROM'   => User::getTable(),\n                    'WHERE'  => ['name' => addslashes($login)],\n                ]\n            );\n            $known_servers_id = array_column(iterator_to_array($known_servers), 'auths_id');\n            usort(\n                $ldap_methods,\n                function (array $a, array $b) use ($known_servers_id) {\n                    if (in_array($a['id'], $known_servers_id) && !in_array($b['id'], $known_servers_id)) {\n                        return -1;\n                    }\n                    if (!in_array($a['id'], $known_servers_id) && in_array($b['id'], $known_servers_id)) {\n                        return 1;\n                    }\n                    return $a['id'] <=> $b['id'];\n                }\n            );\n\n            foreach ($ldap_methods as $ldap_method) {\n                if ($ldap_method['is_active']) {\n                    $error = false;\n                    $auth = self::ldapAuth($auth, $login, $password, $ldap_method, $user_dn, $error);\n\n                    if ($error === true && in_array($ldap_method['id'], $known_servers_id)) {\n                        // Remember that an error occurs on the server on which we expect user to be find.\n                        // This will prevent user to be considered as deleted from the LDAP server.\n                        $auth->user_ldap_error = true;\n                    }\n\n                    if ($auth->user_found) {\n                        $user_found = true;\n                    }\n\n                    if (\n                        $auth->auth_succeded\n                        && $break\n                    ) {\n                        break;\n                    }\n                }\n            }\n\n            $auth->user_found = $user_found;\n        } else if (array_key_exists($auths_id, $auth->authtypes[\"ldap\"])) {\n           // Check if the ldap server indicated as the last good one still exists !\n           //A specific ldap directory is given, test it and only this one !\n            $auth = self::ldapAuth(\n                $auth,\n                $login,\n                $password,\n                $auth->authtypes[\"ldap\"][$auths_id],\n                $user_dn\n            );\n        }\n        return $auth;\n    }\n\n\n    /**\n     * Get dn for a user\n     *\n     * @param resource $ds      LDAP link\n     * @param array    $options array of possible options:\n     *          - basedn : base dn used to search\n     *          - login_field : attribute to store login\n     *          - search_parameters array of search parameters\n     *          - user_params  array of parameters : method (IDENTIFIER_LOGIN or IDENTIFIER_EMAIL) + value\n     *          - condition : ldap condition used\n     *\n     * @return array|boolean dn of the user, else false\n     * @throws \\RuntimeException\n     */\n    public static function searchUserDn($ds, $options = [])\n    {\n\n        $values = [\n            'basedn'            => '',\n            'login_field'       => '',\n            'search_parameters' => [],\n            'user_params'       => '',\n            'condition'         => '',\n            'user_dn'           => false,\n        ];\n\n        foreach ($options as $key => $value) {\n            $values[$key] = $value;\n        }\n\n       //By default authenticate users by login\n        $login_attr      = $values['search_parameters']['fields'][self::IDENTIFIER_LOGIN];\n        $sync_attr       = (isset($values['search_parameters']['fields']['sync_field'])) ?\n         $values['search_parameters']['fields']['sync_field'] : null;\n\n        $attrs = [\"dn\"];\n        foreach ($values['search_parameters']['fields'] as $attr) {\n            $attrs[] = $attr;\n        }\n\n       //First : if a user dn is provided, look for it in the directory\n       //Before trying to find the user using his login_field\n        if ($values['user_dn']) {\n            $info = self::getUserByDn($ds, $values['user_dn'], $attrs);\n\n            if ($info) {\n                $ret = [\n                    'dn'        => $values['user_dn'],\n                    $login_attr => $info[$login_attr][0]\n                ];\n                if ($sync_attr !== null && isset($info[0][$sync_attr])) {\n                    $ret['sync_field'] = self::getFieldValue($info[0], $sync_attr);\n                }\n                return $ret;\n            }\n        }\n\n       // Try a search to find the DN\n        $filter_value = $values['user_params']['value'];\n        if ($values['login_field'] == 'objectguid' && self::isValidGuid($filter_value)) {\n            $filter_value = self::guidToHex($filter_value);\n        }\n        $filter = \"(\" . $values['login_field'] . \"=\" . $filter_value . \")\";\n\n        if (!empty($values['condition'])) {\n            $filter = \"(& $filter \" . Sanitizer::unsanitize($values['condition']) . \")\";\n        }\n\n        $result = @ldap_search($ds, $values['basedn'], $filter, $attrs);\n        if ($result === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ds) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        //search has been done, let's check for found results\n        $info = self::get_entries_clean($ds, $result);\n\n        if (is_array($info) && ($info['count'] == 1)) {\n            $ret = [\n                'dn'        => $info[0]['dn'],\n                $login_attr => $info[0][$login_attr][0]\n            ];\n            if ($sync_attr !== null && isset($info[0][$sync_attr])) {\n                $ret['sync_field'] = self::getFieldValue($info[0], $sync_attr);\n            }\n            return $ret;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get an object from LDAP by giving his DN\n     *\n     * @param resource $ds        the active connection to the directory\n     * @param string   $condition the LDAP filter to use for the search\n     * @param string   $dn        DN of the object\n     * @param array    $attrs     Array of the attributes to retrieve\n     * @param boolean  $clean     (true by default)\n     *\n     * @return array|boolean false if failed\n     */\n    public static function getObjectByDn($ds, $condition, $dn, $attrs = [], $clean = true)\n    {\n        if (!$clean) {\n            Toolbox::deprecated('Use of $clean = false is deprecated');\n        }\n\n        $result = @ldap_read($ds, Sanitizer::unsanitize($dn), $condition, $attrs);\n        if ($result === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ds) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf('Unable to get LDAP object having DN `%s` with filter `%s`', $dn, $condition)\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        $info = self::get_entries_clean($ds, $result);\n        if (is_array($info) && ($info['count'] == 1)) {\n            return $info[0];\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get user by domain name\n     *\n     * @param resource $ds      the active connection to the directory\n     * @param string   $user_dn domain name\n     * @param array    $attrs   attributes\n     * @param boolean  $clean   (true by default)\n     *\n     * @return array|boolean false if failed\n     */\n    public static function getUserByDn($ds, $user_dn, $attrs, $clean = true)\n    {\n        if (!$clean) {\n            Toolbox::deprecated('Use of $clean = false is deprecated');\n        }\n\n        return self::getObjectByDn($ds, \"objectClass=*\", $user_dn, $attrs);\n    }\n\n    /**\n     * Get infos for groups\n     *\n     * @param resource $ds       LDAP link\n     * @param string   $group_dn dn of the group\n     *\n     * @return array|boolean group infos if found, else false\n     */\n    public static function getGroupByDn($ds, $group_dn)\n    {\n        return self::getObjectByDn($ds, \"objectClass=*\", $group_dn, [\"cn\"]);\n    }\n\n\n    /**\n     * Manage values stored in session\n     *\n     * @param array   $options Options\n     * @param boolean $delete  (false by default)\n     *\n     * @return void\n     */\n    public static function manageValuesInSession($options = [], $delete = false)\n    {\n\n        $fields = ['action', 'authldaps_id', 'basedn', 'begin_date', 'criterias',  'end_date',\n            'entities_id', 'interface', 'ldap_filter', 'mode'\n        ];\n\n       //If form accessed via modal, do not show expert mode link\n       // Manage new value is set : entity or mode\n        if (\n            isset($options['entity'])\n            || isset($options['mode'])\n        ) {\n            if (isset($options['_in_modal']) && $options['_in_modal']) {\n               //If coming form the helpdesk form : reset all criterias\n                $_SESSION['ldap_import']['_in_modal']      = 1;\n                $_SESSION['ldap_import']['no_expert_mode'] = 1;\n                $_SESSION['ldap_import']['action']         = 'show';\n                $_SESSION['ldap_import']['interface']      = self::SIMPLE_INTERFACE;\n                $_SESSION['ldap_import']['mode']           = self::ACTION_IMPORT;\n            } else {\n                $_SESSION['ldap_import']['_in_modal']      = 0;\n                $_SESSION['ldap_import']['no_expert_mode'] = 0;\n            }\n        }\n\n        if (!$delete) {\n            if (!isset($_SESSION['ldap_import']['entities_id'])) {\n                $options['entities_id'] = $_SESSION['glpiactive_entity'];\n            }\n\n            if (isset($options['toprocess'])) {\n                $_SESSION['ldap_import']['action'] = 'process';\n            }\n\n            if (isset($options['change_directory'])) {\n                $options['ldap_filter'] = '';\n            }\n\n            if (!isset($_SESSION['ldap_import']['authldaps_id'])) {\n                $_SESSION['ldap_import']['authldaps_id'] = NOT_AVAILABLE;\n            }\n\n            if (\n                (!Config::canUpdate()\n                && !Entity::canUpdate())\n                || (!isset($_SESSION['ldap_import']['interface'])\n                && !isset($options['interface']))\n            ) {\n                $options['interface'] = self::SIMPLE_INTERFACE;\n            }\n\n            foreach ($fields as $field) {\n                if (isset($options[$field])) {\n                    $_SESSION['ldap_import'][$field] = $options[$field];\n                }\n            }\n            if (\n                isset($_SESSION['ldap_import']['begin_date'])\n                && ($_SESSION['ldap_import']['begin_date'] == 'NULL')\n            ) {\n                $_SESSION['ldap_import']['begin_date'] = '';\n            }\n            if (\n                isset($_SESSION['ldap_import']['end_date'])\n                && ($_SESSION['ldap_import']['end_date'] == 'NULL')\n            ) {\n                $_SESSION['ldap_import']['end_date'] = '';\n            }\n            if (!isset($_SESSION['ldap_import']['criterias'])) {\n                $_SESSION['ldap_import']['criterias'] = [];\n            }\n\n            $authldap = new self();\n           //Filter computation\n            if ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE) {\n                $entity = new Entity();\n\n                if (\n                    $entity->getFromDB($_SESSION['ldap_import']['entities_id'])\n                    && ($entity->getField('authldaps_id') > 0)\n                ) {\n                    $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE) {\n                       // authldaps_id wasn't submitted by the user -> take entity config\n                        $_SESSION['ldap_import']['authldaps_id'] = $entity->getField('authldaps_id');\n                    }\n\n                    $_SESSION['ldap_import']['basedn']       = $entity->getField('ldap_dn');\n\n                   // No dn specified in entity : use standard one\n                    if (empty($_SESSION['ldap_import']['basedn'])) {\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n\n                    if ($entity->getField('entity_ldapfilter') != NOT_AVAILABLE) {\n                        $_SESSION['ldap_import']['entity_filter']\n                        = $entity->getField('entity_ldapfilter');\n                    }\n                } else {\n                    if (\n                        $_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE\n                        || !$_SESSION['ldap_import']['authldaps_id']\n                    ) {\n                        $_SESSION['ldap_import']['authldaps_id'] = self::getDefault();\n                    }\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n                }\n\n                if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                    $_SESSION['ldap_import']['ldap_filter'] = self::buildLdapFilter($authldap);\n                }\n            } else {\n                if (\n                    $_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE\n                    || !$_SESSION['ldap_import']['authldaps_id']\n                ) {\n                    $_SESSION['ldap_import']['authldaps_id'] = self::getDefault();\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n                }\n                if (\n                    !isset($_SESSION['ldap_import']['ldap_filter'])\n                    || $_SESSION['ldap_import']['ldap_filter'] == ''\n                ) {\n                    $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                    $_SESSION['ldap_import']['basedn']      = $authldap->getField('basedn');\n                    $_SESSION['ldap_import']['ldap_filter'] = self::buildLdapFilter($authldap);\n                }\n            }\n        } else { // Unset all values in session\n            unset($_SESSION['ldap_import']);\n        }\n    }\n\n\n    /**\n     * Show import user form\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return void\n     */\n    public static function showUserImportForm(AuthLDAP $authldap)\n    {\n\n       //Get data related to entity (directory and ldap filter)\n        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n\n        echo \"<form method='post' action='\" . $_SERVER['PHP_SELF'] . \"'>\";\n\n        echo \"<h2 class='center mb-3'>\" . ($_SESSION['ldap_import']['mode'] ? __('Synchronizing already imported users')\n                                                      : __('Import new users'));\n\n       // Expert interface allow user to override configuration.\n       // If not coming from the ticket form, then give expert/simple link\n        if (\n            (Config::canUpdate()\n            || Entity::canUpdate())\n            && (!isset($_SESSION['ldap_import']['no_expert_mode'])\n              || $_SESSION['ldap_import']['no_expert_mode'] != 1)\n        ) {\n            echo \"<a class='float-end btn btn-secondary' href='\" . $_SERVER['PHP_SELF'] . \"?action=\" .\n              $_SESSION['ldap_import']['action'] . \"&amp;mode=\" . $_SESSION['ldap_import']['mode'];\n\n            if ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE) {\n                echo \"&amp;interface=\" . self::EXPERT_INTERFACE . \"'>\" . __('Expert mode') . \"</a>\";\n            } else {\n                echo \"&amp;interface=\" . self::SIMPLE_INTERFACE . \"'>\" . __('Simple mode') . \"</a>\";\n            }\n        } else {\n            $_SESSION['ldap_import']['interface'] = self::SIMPLE_INTERFACE;\n        }\n        echo \"</h2>\";\n\n        echo \"<div class='card'>\";\n        echo \"<table class='table card-table'>\";\n\n        switch ($_SESSION['ldap_import']['interface']) {\n            case self::EXPERT_INTERFACE:\n               //If more than one directory configured\n               //Display dropdown ldap servers\n                if (\n                    ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n                    && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n                ) {\n                    if (self::getNumberOfServers() > 1) {\n                        $rand = mt_rand();\n                        echo \"<tr><td class='text-end'><label for='dropdown_authldaps_id$rand'>\" . __('LDAP directory choice') . \"</label></td>\";\n                        echo \"<td colspan='3'>\";\n                        self::dropdown(['name'                 => 'authldaps_id',\n                            'value'                => $_SESSION['ldap_import']['authldaps_id'],\n                            'condition'            => ['is_active' => 1],\n                            'display_emptychoice'  => false,\n                            'rand'                 => $rand\n                        ]);\n                        echo \"&nbsp;<input class='btn btn-secondary' type='submit' name='change_directory'\n                        value=\\\"\" . _sx('button', 'Change') . \"\\\">\";\n                        echo \"</td></tr>\";\n                    }\n\n                    echo \"<tr><td style='width: 250px' class='text-end'><label for='basedn'>\" . __('BaseDN') . \"</label></td><td colspan='3'>\";\n                    echo \"<input type='text' class='form-control' id='basedn' name='basedn' value=\\\"\" . htmlspecialchars($_SESSION['ldap_import']['basedn'], ENT_QUOTES) .\n                     \"\\\" \" . (!$_SESSION['ldap_import']['basedn'] ? \"disabled\" : \"\") . \">\";\n                    echo \"</td></tr>\";\n\n                    echo \"<tr><td class='text-end'><label for='ldap_filter'>\" . __('Search filter for users') . \"</label></td><td colspan='3'>\";\n                    echo \"<input type='text' class='form-control' id='ldap_filter' name='ldap_filter' value=\\\"\" .\n                      htmlspecialchars($_SESSION['ldap_import']['ldap_filter'], ENT_QUOTES) . \"\\\">\";\n                    echo \"</td></tr>\";\n                }\n                break;\n\n           //case self::SIMPLE_INTERFACE :\n            default:\n                if (self::getNumberOfServers() > 1) {\n                    $rand = mt_rand();\n                    echo \"<tr><td style='width: 250px' class='text-end'>\n                  <label for='dropdown_authldaps_id$rand'>\" . __('LDAP directory choice') . \"</label>\n               </td>\";\n                    echo \"<td>\";\n                    self::dropdown([\n                        'name'                 => 'authldaps_id',\n                        'value'                => $_SESSION['ldap_import']['authldaps_id'],\n                        'condition'            => ['is_active' => 1],\n                        'display_emptychoice'  => false,\n                        'rand'                 => $rand\n                    ]);\n                    echo \"&nbsp;<input class='btn btn-secondary' type='submit' name='change_directory'\n                     value=\\\"\" . _sx('button', 'Change') . \"\\\">\";\n                    echo \"</td></tr>\";\n                }\n\n               //If multi-entity mode and more than one entity visible\n               //else no need to select entity\n                if (\n                    Session::isMultiEntitiesMode()\n                    && (count($_SESSION['glpiactiveentities']) > 1)\n                ) {\n                    echo \"<tr><td class='text-end'>\" . __('Select the desired entity') . \"</td>\" .\n                    \"<td>\";\n                    Entity::dropdown([\n                        'value'       => $_SESSION['ldap_import']['entities_id'],\n                        'entity'      => $_SESSION['glpiactiveentities'],\n                        'on_change'    => 'this.form.submit()'\n                    ]);\n                    echo \"</td></tr>\";\n                } else {\n                   //Only one entity is active, store it\n                    echo \"<tr><td><input type='hidden' name='entities_id' value='\" .\n                              $_SESSION['glpiactive_entity'] . \"'></td></tr>\";\n                }\n\n                if (\n                    (isset($_SESSION['ldap_import']['begin_date'])\n                    && !empty($_SESSION['ldap_import']['begin_date']))\n                    || (isset($_SESSION['ldap_import']['end_date'])\n                    && !empty($_SESSION['ldap_import']['end_date']))\n                ) {\n                    $enabled = 1;\n                } else {\n                    $enabled = 0;\n                }\n                Dropdown::showAdvanceDateRestrictionSwitch($enabled);\n\n                echo \"<table class='table card-table'>\";\n\n                if (\n                    ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n                    && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n                ) {\n                    $field_counter = 0;\n                    $fields        = ['login_field'     => __('Login'),\n                        'sync_field'      => __('Synchronization field') . ' (' . $authldap->fields['sync_field'] . ')',\n                        'email1_field'    => _n('Email', 'Emails', 1),\n                        'email2_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '2'\n                        ),\n                        'email3_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '3'\n                        ),\n                        'email4_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '4'\n                        ),\n                        'realname_field'  => __('Surname'),\n                        'firstname_field' => __('First name'),\n                        'phone_field'     => _x('ldap', 'Phone'),\n                        'phone2_field'    => __('Phone 2'),\n                        'mobile_field'    => __('Mobile phone'),\n                        'title_field'     => _x('person', 'Title'),\n                        'category_field'  => _n('Category', 'Categories', 1),\n                        'picture_field'   => _n('Picture', 'Pictures', 1)\n                    ];\n                    $available_fields = [];\n                    foreach ($fields as $field => $label) {\n                        if (isset($authldap->fields[$field]) && ($authldap->fields[$field] != '')) {\n                            $available_fields[$field] = $label;\n                        }\n                    }\n                    echo \"<tr><td colspan='4' class='border-bottom-0'><h4>\" . __('Search criteria for users') . \"</h4></td></tr>\";\n                    foreach ($available_fields as $field => $label) {\n                        if ($field_counter == 0) {\n                            echo \"<tr>\";\n                        }\n                        echo \"<td style='width: 250px' class='text-end'><label for='criterias$field'>$label</label></td><td>\";\n                        $field_counter++;\n                        $field_value = '';\n                        if (isset($_SESSION['ldap_import']['criterias'][$field])) {\n                            $field_value = Html::entities_deep(Sanitizer::unsanitize($_SESSION['ldap_import']['criterias'][$field]));\n                        }\n                        echo \"<input type='text' class='form-control' id='criterias$field' name='criterias[$field]' value='$field_value'>\";\n                        echo \"</td>\";\n                        if ($field_counter == 2) {\n                            echo \"</tr>\";\n                            $field_counter = 0;\n                        }\n                    }\n                    if ($field_counter > 0) {\n                        while ($field_counter < 2) {\n                            echo \"<td colspan='2'></td>\";\n                            $field_counter++;\n                        }\n                        $field_counter = 0;\n                        echo \"</tr>\";\n                    }\n                }\n                break;\n        }\n\n        if (\n            ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n            && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n        ) {\n            if ($_SESSION['ldap_import']['authldaps_id']) {\n                echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n                echo \"<input class='btn btn-primary' type='submit' name='search' value=\\\"\" .\n                   _sx('button', 'Search') . \"\\\">\";\n                echo \"</td></tr>\";\n            } else {\n                echo \"<tr class='tab_bg_2'><\" .\n                 \"td colspan='4' class='center'>\" . __('No directory selected') . \"</td></tr>\";\n            }\n        } else {\n            echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\" .\n                __('No directory associated to entity: impossible search') . \"</td></tr>\";\n        }\n        echo \"</table>\";\n        echo \"</div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Get number of servers\n     *\n     * @var DBmysql $DB\n     *\n     * @return integer\n     */\n    public static function getNumberOfServers()\n    {\n        return countElementsInTable('glpi_authldaps', ['is_active' => 1]);\n    }\n\n\n    /**\n     * Build LDAP filter\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return string\n     */\n    public static function buildLdapFilter(AuthLDAP $authldap)\n    {\n       //Build search filter\n        $counter = 0;\n        $filter  = '';\n\n        if (\n            !empty($_SESSION['ldap_import']['criterias'])\n            && ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE)\n        ) {\n            foreach ($_SESSION['ldap_import']['criterias'] as $criteria => $value) {\n                if ($value != '') {\n                    $begin = 0;\n                    $end   = 0;\n                    if (($length = strlen($value)) > 0) {\n                        if ($value[0] == '^') {\n                             $begin = 1;\n                        }\n                        if ($value[$length - 1] == '$') {\n                            $end = 1;\n                        }\n                    }\n                    if ($begin || $end) {\n                     // no Toolbox::substr, to be consistent with strlen result\n                        $value = substr($value, $begin, $length - $end - $begin);\n                    }\n                    $counter++;\n                    $filter .= '(' . $authldap->fields[$criteria] . '=' . ($begin ? '' : '*') . $value . ($end ? '' : '*') . ')';\n                }\n            }\n        } else {\n            $filter = \"(\" . $authldap->getField(\"login_field\") . \"=*)\";\n        }\n\n       //If time restriction\n        $begin_date = (isset($_SESSION['ldap_import']['begin_date'])\n                     && !empty($_SESSION['ldap_import']['begin_date'])\n                        ? $_SESSION['ldap_import']['begin_date'] : null);\n        $end_date   = (isset($_SESSION['ldap_import']['end_date'])\n                     && !empty($_SESSION['ldap_import']['end_date'])\n                        ? $_SESSION['ldap_import']['end_date'] : null);\n        $filter    .= self::addTimestampRestrictions($begin_date, $end_date);\n        $ldap_condition = Sanitizer::unsanitize($authldap->getField('condition'));\n       //Add entity filter and filter filled in directory's configuration form\n        return  \"(&\" . (isset($_SESSION['ldap_import']['entity_filter'])\n                    ? $_SESSION['ldap_import']['entity_filter']\n                    : '') . \" $filter $ldap_condition)\";\n    }\n\n\n    /**\n     * Add timestamp restriction\n     *\n     * @param string $begin_date datetime begin date to search (NULL if not take into account)\n     * @param string $end_date   datetime end date to search (NULL if not take into account)\n     *\n     * @return string\n     */\n    public static function addTimestampRestrictions($begin_date, $end_date)\n    {\n\n        $condition = '';\n       //If begin date\n        if (!empty($begin_date)) {\n            $stampvalue = self::date2ldapTimeStamp($begin_date);\n            $condition .= \"(modifyTimestamp>=\" . $stampvalue . \")\";\n        }\n       //If end date\n        if (!empty($end_date)) {\n            $stampvalue = self::date2ldapTimeStamp($end_date);\n            $condition .= \"(modifyTimestamp<=\" . $stampvalue . \")\";\n        }\n        return $condition;\n    }\n\n\n    /**\n     * Search user\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return void\n     */\n    public static function searchUser(AuthLDAP $authldap)\n    {\n\n        if (\n            self::connectToServer(\n                $authldap->getField('host'),\n                $authldap->getField('port'),\n                $authldap->getField('rootdn'),\n                (new GLPIKey())->decrypt($authldap->getField('rootdn_passwd')),\n                $authldap->getField('use_tls'),\n                $authldap->getField('deref_option'),\n                $authldap->getField('tls_certfile'),\n                $authldap->getField('tls_keyfile'),\n                $authldap->getField('use_bind'),\n                $authldap->getField('timeout')\n            )\n        ) {\n            self::showLdapUsers();\n        } else {\n            echo \"<div class='center b firstbloc'>\" . __('Unable to connect to the LDAP directory');\n        }\n    }\n\n    /**\n     * Get default ldap\n     *\n     * @var DBmysql $DB DB instance\n     *\n     * @return integer\n     */\n    public static function getDefault()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        foreach ($DB->request('glpi_authldaps', ['is_default' => 1, 'is_active' => 1]) as $data) {\n            return $data['id'];\n        }\n        return 0;\n    }\n\n    public function post_updateItem($history = true)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (in_array('is_default', $this->updates) && $this->input[\"is_default\"] == 1) {\n            $DB->update(\n                $this->getTable(),\n                ['is_default' => 0],\n                ['id' => ['<>', $this->input['id']]]\n            );\n        }\n    }\n\n    public function post_addItem()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (isset($this->fields['is_default']) && $this->fields[\"is_default\"] == 1) {\n            $DB->update(\n                $this->getTable(),\n                ['is_default' => 0],\n                ['id' => ['<>', $this->fields['id']]]\n            );\n        }\n    }\n\n    public function prepareInputForAdd($input)\n    {\n\n       //If it's the first ldap directory then set it as the default directory\n        if (!self::getNumberOfServers()) {\n            $input['is_default'] = 1;\n        }\n\n        if (empty($input['can_support_pagesize'] ?? '')) {\n            $input['can_support_pagesize'] = 0;\n        }\n\n        if (isset($input[\"rootdn_passwd\"]) && !empty($input[\"rootdn_passwd\"])) {\n            $input[\"rootdn_passwd\"] = (new GLPIKey())->encrypt($input[\"rootdn_passwd\"]);\n        }\n\n        $this->checkFilesExist($input);\n\n        return $input;\n    }\n\n\n    /**\n     * Get LDAP deleted user action options.\n     *\n     * @return array\n     */\n    public static function getLdapDeletedUserActionOptions()\n    {\n\n        return [\n            self::DELETED_USER_PRESERVE                  => __('Preserve'),\n            self::DELETED_USER_DELETE                    => __('Put in trashbin'),\n            self::DELETED_USER_WITHDRAWDYNINFO           => __('Withdraw dynamic authorizations and groups'),\n            self::DELETED_USER_DISABLE                   => __('Disable'),\n            self::DELETED_USER_DISABLEANDWITHDRAWDYNINFO => __('Disable') . ' + ' . __('Withdraw dynamic authorizations and groups'),\n            self::DELETED_USER_DISABLEANDDELETEGROUPS => __('Disable') . ' + ' . __('Withdraw groups'),\n        ];\n    }\n\n    /**\n     * Get LDAP restored user action options.\n     *\n     * @since 10.0.0\n     * @return array\n     */\n    public static function getLdapRestoredUserActionOptions()\n    {\n        return [\n            self::RESTORED_USER_PRESERVE  => __('Do nothing'),\n            self::RESTORED_USER_RESTORE   => __('Restore (move out of trashbin)'),\n            self::RESTORED_USER_ENABLE    => __('Enable'),\n        ];\n    }\n\n    /**\n     * Builds deleted actions dropdown\n     *\n     * @param integer $value (default 0)\n     *\n     * @return string\n     */\n    public static function dropdownUserDeletedActions($value = 0)\n    {\n\n        $options = self::getLdapDeletedUserActionOptions();\n        asort($options);\n        return Dropdown::showFromArray('user_deleted_ldap', $options, ['value' => $value]);\n    }\n\n    /**\n     * Builds restored actions dropdown\n     *\n     * @param integer $value (default 0)\n     *\n     * @since 10.0.0\n     * @return string\n     */\n    public static function dropdownUserRestoredActions($value = 0)\n    {\n\n        $options = self::getLdapRestoredUserActionOptions();\n        asort($options);\n        return Dropdown::showFromArray('user_restored_ldap', $options, ['value' => $value]);\n    }\n\n    /**\n     * Return all the ldap servers where email field is configured\n     *\n     * @return array of LDAP server's ID\n     */\n    public static function getServersWithImportByEmailActive()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $ldaps = [];\n       // Always get default first\n\n        $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'  => 'glpi_authldaps',\n            'WHERE' => [\n                'is_active' => 1,\n                'OR'        => [\n                    'email1_field' => ['<>', ''],\n                    'email2_field' => ['<>', ''],\n                    'email3_field' => ['<>', ''],\n                    'email4_field' => ['<>', '']\n                ]\n            ],\n            'ORDER'  => ['is_default DESC']\n        ]);\n        foreach ($iterator as $data) {\n            $ldaps[] = $data['id'];\n        }\n        return $ldaps;\n    }\n\n\n    /**\n     * Show date restriction form\n     *\n     * @param array $options Options\n     *\n     * @return void\n     */\n    public static function showDateRestrictionForm($options = [])\n    {\n\n        echo \"<table class='table'>\";\n        echo \"<tr>\";\n\n        $enabled = (isset($options['enabled']) ? $options['enabled'] : false);\n        if (!$enabled) {\n            echo \"<td colspan='4'>\";\n            echo \"<a href='#' class='btn btn-outline-secondary' onClick='activateRestriction()'>\n            <i class='fas fa-toggle-off me-1'></i>\n            \" . __('Enable filtering by date') . \"\n         </a>\";\n            echo \"</td></tr>\";\n        }\n        if ($enabled) {\n            echo \"<td style='width: 250px' class='text-end border-bottom-0'>\" . __('View updated users') . \"</td>\";\n            echo \"<td class='border-bottom-0'>\" . __('from') . \"\";\n            $begin_date = (isset($_SESSION['ldap_import']['begin_date'])\n                           ? $_SESSION['ldap_import']['begin_date'] : '');\n            Html::showDateTimeField(\"begin_date\", ['value'    => $begin_date]);\n            echo \"</td>\";\n            echo \"<td class='border-bottom-0'>\" . __('to') . \"\";\n            $end_date = (isset($_SESSION['ldap_import']['end_date'])\n                        ? $_SESSION['ldap_import']['end_date']\n                        : date('Y-m-d H:i:s', time() - DAY_TIMESTAMP));\n            Html::showDateTimeField(\"end_date\", ['value'    => $end_date]);\n            echo \"</td></tr>\";\n            echo \"<tr><td colspan='4'>\";\n            echo \"<a href='#' class='btn btn-outline-secondary' onClick='deactivateRestriction()'>\n            <i class='fas fa-toggle-on me-1'></i>\n            \" . __('Disable filtering by date') . \"\n         </a>\";\n            echo \"</td></tr>\";\n        }\n        echo \"</table>\";\n    }\n\n    public function cleanDBonPurge()\n    {\n        Rule::cleanForItemCriteria($this, 'LDAP_SERVER');\n    }\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (\n            !$withtemplate\n            && $item->can($item->getField('id'), READ)\n        ) {\n            $ong     = [];\n            $ong[1]  = _sx('button', 'Test');                     // test connexion\n            $ong[2]  = User::getTypeName(Session::getPluralNumber());\n            $ong[3]  = Group::getTypeName(Session::getPluralNumber());\n           // TODO clean fields entity_XXX if not used\n           // $ong[4]  = Entity::getTypeName(1);                  // params for entity config\n            $ong[5]  = __('Advanced information');   // params for entity advanced config\n            $ong[6]  = _n('Replicate', 'Replicates', Session::getPluralNumber());\n\n            return $ong;\n        }\n        return '';\n    }\n\n    /**\n     * Choose wich form to show\n     *\n     * @param CommonGLPI $item         Item instance\n     * @param integer    $tabnum       Tab number\n     * @param integer    $withtemplate Unused\n     *\n     * @return boolean (TRUE)\n     */\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($tabnum) {\n            case 1:\n                $item->showFormTestLDAP();\n                break;\n\n            case 2:\n                $item->showFormUserConfig();\n                break;\n\n            case 3:\n                $item->showFormGroupsConfig();\n                break;\n\n            case 4:\n                $item->showFormEntityConfig();\n                break;\n\n            case 5:\n                $item->showFormAdvancedConfig();\n                break;\n\n            case 6:\n                $item->showFormReplicatesConfig();\n                break;\n        }\n        return true;\n    }\n\n\n    /**\n     * Get ldap query results and clean them at the same time\n     *\n     * @param resource $link   link to the directory connection\n     * @param array    $result the query results\n     *\n     * @return array which contains ldap query results\n     */\n    public static function get_entries_clean($link, $result)\n    {\n        $entries = @ldap_get_entries($link, $result);\n        if ($entries === false) {\n            trigger_error(\n                static::buildError(\n                    $link,\n                    'Error while getting LDAP entries'\n                ),\n                E_USER_WARNING\n            );\n        }\n        return $entries;\n    }\n\n\n    /**\n     * Get all replicate servers for a master one\n     *\n     * @param integer $master_id master ldap server ID\n     *\n     * @return array of the replicate servers\n     */\n    public static function getAllReplicateForAMaster($master_id)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $replicates = [];\n        $criteria = ['FIELDS' => ['id', 'host', 'port'],\n            'FROM'   => 'glpi_authldapreplicates',\n            'WHERE'  => ['authldaps_id' => $master_id]\n        ];\n        foreach ($DB->request($criteria) as $replicate) {\n            $replicates[] = [\"id\"   => $replicate[\"id\"],\n                \"host\" => $replicate[\"host\"],\n                \"port\" => $replicate[\"port\"]\n            ];\n        }\n        return $replicates;\n    }\n\n    /**\n     * Check if ldap results can be paged or not\n     * This functionality is available for PHP 5.4 and higher\n     *\n     * @since 0.84\n     *\n     * @param object   $config_ldap        LDAP configuration\n     * @param boolean  $check_config_value Whether to check config values\n     *\n     * @return boolean true if maxPageSize can be used, false otherwise\n     */\n    public static function isLdapPageSizeAvailable($config_ldap, $check_config_value = true)\n    {\n        return (extension_loaded('ldap') && (!$check_config_value\n         || ($check_config_value && $config_ldap->fields['can_support_pagesize'])));\n    }\n\n    /**\n     * Does LDAP user already exists in the database?\n     *\n     * @param string  $name          User login/name\n     * @param integer $authldaps_id  LDAP authentication server ID\n     * @param ?string $sync          Sync field\n     *\n     * @return false|User\n     */\n    public function getLdapExistingUser($name, $authldaps_id, $sync = null)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n        $user = new User();\n\n        if ($sync !== null && $user->getFromDBbySyncField($DB->escape($sync))) {\n            return $user;\n        }\n\n        if ($user->getFromDBbyNameAndAuth($DB->escape($name), Auth::LDAP, $authldaps_id)) {\n            return $user;\n        }\n\n        return false;\n    }\n\n    /**\n     * Is synchronisation field used for current server\n     *\n     * @return boolean\n     */\n    public function isSyncFieldUsed()\n    {\n        if ($this->getID() <= 0) {\n            return false;\n        }\n        $count = countElementsInTable(\n            'glpi_users',\n            [\n                'auths_id'  => $this->getID(),\n                'NOT'       => ['sync_field' => null]\n            ]\n        );\n        return $count > 0;\n    }\n\n    /**\n     * Get a LDAP field value\n     *\n     * @param array  $infos LDAP entry infos\n     * @param string $field Field name to retrieve\n     *\n     * @return string\n     */\n    public static function getFieldValue($infos, $field)\n    {\n        $value = null;\n        if (array_key_exists($field, $infos)) {\n            if (is_array($infos[$field])) {\n                $value = $infos[$field][0];\n            } else {\n                $value = $infos[$field];\n            }\n        }\n        if ($field != 'objectguid') {\n            return $value;\n        }\n\n       //handle special objectguid from AD directories\n        try {\n           //prevent double encoding\n            if (!self::isValidGuid($value)) {\n                $value = self::guidToString($value);\n                if (!self::isValidGuid($value)) {\n                    throw new \\RuntimeException('Not an objectguid!');\n                }\n            }\n        } catch (\\Throwable $e) {\n           //well... this is not an objectguid apparently\n            $value = $infos[$field];\n        }\n\n        return $value;\n    }\n\n    /**\n     * Converts a string representation of an objectguid to hexadecimal\n     * Used to build filters\n     *\n     * @param string $guid_str String representation\n     *\n     * @return string\n     */\n    public static function guidToHex($guid_str)\n    {\n        $str_g = explode('-', $guid_str);\n\n        $str_g[0] = strrev($str_g[0]);\n        $str_g[1] = strrev($str_g[1]);\n        $str_g[2] = strrev($str_g[2]);\n\n        $guid_hex = '\\\\';\n        $strrev = 0;\n        foreach ($str_g as $str) {\n            for ($i = 0; $i < strlen($str) + 2; $i++) {\n                if ($strrev < 3) {\n                    $guid_hex .= strrev(substr($str, 0, 2)) . '\\\\';\n                } else {\n                    $guid_hex .= substr($str, 0, 2) . '\\\\';\n                }\n                $str = substr($str, 2);\n            }\n            if ($strrev < 3) {\n                $guid_hex .= strrev($str);\n            } else {\n                $guid_hex .= $str;\n            }\n            $strrev++;\n        }\n        return $guid_hex;\n    }\n\n    /**\n     * Converts binary objectguid to string representation\n     *\n     * @param mixed $guid_bin Binary objectguid from AD\n     *\n     * @return string\n     */\n    public static function guidToString($guid_bin)\n    {\n        $guid_hex = unpack(\"H*hex\", $guid_bin);\n        $hex = $guid_hex[\"hex\"];\n\n        $hex1 = substr($hex, -26, 2) . substr($hex, -28, 2) . substr($hex, -30, 2) . substr($hex, -32, 2);\n        $hex2 = substr($hex, -22, 2) . substr($hex, -24, 2);\n        $hex3 = substr($hex, -18, 2) . substr($hex, -20, 2);\n        $hex4 = substr($hex, -16, 4);\n        $hex5 = substr($hex, -12, 12);\n\n        $guid_str = $hex1 . \"-\" . $hex2 . \"-\" . $hex3 . \"-\" . $hex4 . \"-\" . $hex5;\n        return $guid_str;\n    }\n\n    /**\n     * Check if text representation of an objectguid is valid\n     *\n     * @param string $guid_str String representation\n     *\n     * @return boolean\n     */\n    public static function isValidGuid($guid_str)\n    {\n        return (bool) preg_match('/^([0-9a-fA-F]){8}(-([0-9a-fA-F]){4}){3}-([0-9a-fA-F]){12}$/', $guid_str);\n    }\n\n    /**\n     * Get the list of LDAP users to add/synchronize\n     * When importing, already existing users will be filtered\n     *\n     * @param array   $values        possible options:\n     *          - authldaps_id ID of the server to use\n     *          - mode user to synchronise or add?\n     *          - ldap_filter ldap filter to use\n     *          - basedn force basedn (default authldaps_id one)\n     *          - order display order\n     *          - begin_date begin date to time limit\n     *          - end_date end date to time limit\n     *          - script true if called by an external script\n     * @param array   $results       result stats\n     * @param boolean $limitexceeded limit exceeded exception\n     *\n     * @return array\n     */\n    public static function getUsers($values, &$results, &$limitexceeded)\n    {\n        $users = [];\n        $ldap_users    = self::getAllUsers($values, $results, $limitexceeded);\n\n        $config_ldap   = new AuthLDAP();\n        $config_ldap->getFromDB($values['authldaps_id']);\n\n        if (!is_array($ldap_users) || count($ldap_users) == 0) {\n            return $users;\n        }\n\n\n        $sync_field = $config_ldap->isSyncFieldEnabled() ? $config_ldap->fields['sync_field'] : null;\n\n        foreach ($ldap_users as $userinfos) {\n            $user_to_add = [];\n            $user = new User();\n\n            $user_sync_field = $config_ldap->isSyncFieldEnabled() && isset($userinfos[$sync_field])\n                ? self::getFieldValue($userinfos, $sync_field)\n                : null;\n\n            $user = $config_ldap->getLdapExistingUser(\n                $userinfos['user'],\n                $values['authldaps_id'],\n                $user_sync_field\n            );\n            if (isset($_SESSION['ldap_import']) && !$_SESSION['ldap_import']['mode'] && $user) {\n                continue;\n            }\n            $user_to_add['link'] = $userinfos[\"user\"];\n            if (isset($userinfos['id']) && User::canView()) {\n                $user_to_add['id']   = $userinfos['id'];\n                $user_to_add['name'] = $user->fields['name'];\n                $user_to_add['link'] = Toolbox::getItemTypeFormURL('User') . '?id=' . $userinfos['id'];\n            }\n\n            $user_to_add['stamp']      = (isset($userinfos[\"timestamp\"])) ? $userinfos[\"timestamp\"] : '';\n            $user_to_add['date_sync']  = (isset($userinfos[\"date_sync\"])) ? $userinfos[\"date_sync\"] : '';\n\n            $user_to_add['uid'] = $userinfos['user'];\n            if ($config_ldap->isSyncFieldEnabled()) {\n                if (isset($userinfos[$sync_field])) {\n                    $user_to_add['uid'] = self::getFieldValue($userinfos, $sync_field);\n                }\n\n                $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n                if (isset($userinfos[$field_for_sync])) {\n                    $user_to_add['sync_field'] = $userinfos[$field_for_sync];\n                }\n            }\n\n            $users[] = $user_to_add;\n        }\n\n        return $users;\n    }\n\n    public function checkFilesExist(&$input)\n    {\n\n        if (isset($input['tls_certfile'])) {\n            $file = realpath($input['tls_certfile']);\n            if (!file_exists($file)) {\n                Session::addMessageAfterRedirect(\n                    __('TLS certificate path is incorrect'),\n                    false,\n                    ERROR\n                );\n                return false;\n            }\n        }\n\n        if (isset($input['tls_keyfile'])) {\n            $file = realpath($input['tls_keyfile']);\n            if (!file_exists($file)) {\n                Session::addMessageAfterRedirect(\n                    __('TLS key file path is incorrect'),\n                    false,\n                    ERROR\n                );\n                return false;\n            }\n        }\n    }\n\n\n    public static function getIcon()\n    {\n        return \"far fa-address-book\";\n    }\n\n    final public static function buildError($ds, string $message): string\n    {\n        $diag_message = '';\n        $err_message  = '';\n        $message = sprintf(\n            \"%s\\nerror: %s (%s)%s%s\",\n            $message,\n            ldap_error($ds),\n            ldap_errno($ds),\n            (ldap_get_option($ds, LDAP_OPT_DIAGNOSTIC_MESSAGE, $diag_message) ? \"\\nextended error: \" . $diag_message : ''),\n            (ldap_get_option($ds, LDAP_OPT_ERROR_STRING, $err_message) ? \"\\nerr string: \" . $err_message : '')\n        );\n        return $message;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace Glpi\\Toolbox;\n\nclass Filesystem\n{\n    /**\n     * Checks if the file with given path can be written.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public static function canWriteFile(string $path): bool\n    {\n        if (file_exists($path)) {\n            return is_writable($path);\n        }\n\n        // If the file does not exists, try to create it.\n        $file = @fopen($path, 'c');\n        if ($file === false) {\n            return false;\n        }\n        @fclose($file);\n\n        // Remove the file, as presence of an empty file may not be handled properly.\n        @unlink($path);\n\n        return true;\n    }\n\n    /**\n     * Checks if the files with given paths can be written.\n     *\n     * @param string[] $paths\n     *\n     * @return bool\n     */\n    public static function canWriteFiles(array $paths): bool\n    {\n        foreach ($paths as $path) {\n            if (!self::canWriteFile($path)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Toolbox;\n\nuse org\\bovigo\\vfs\\vfsStream;\n\nclass Filesystem extends \\GLPITestCase\n{\n    public function testCanWriteFile()\n    {\n        $config_dir = vfsStream::setup('config');\n\n        $this->newTestedInstance();\n\n        // Files can be written when they not exists and directory is writable\n        $config_dir->chmod(0700);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(true);\n\n        // Files cannot be written when they not exists and directory is not writable\n        $config_dir->chmod(0500);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(false);\n\n        // Files cannot be written when they exists but are not writable (even if directory is writable)\n        $config_dir->chmod(0700);\n        $file1 = vfsStream::newFile('config_db.php', 0400)->at($config_dir)->setContent('<?php //my config file');\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(false);\n\n        // Files can be written when they exists and are writable (even if directory is not writable)\n        $file1->chmod(0600);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(true);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nuse Glpi\\Application\\ErrorHandler;\nuse Glpi\\Application\\View\\TemplateRenderer;\nuse Glpi\\Toolbox\\Filesystem;\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n *  Class used to manage Auth LDAP config\n */\nclass AuthLDAP extends CommonDBTM\n{\n    const SIMPLE_INTERFACE = 'simple';\n    const EXPERT_INTERFACE = 'expert';\n\n    const ACTION_IMPORT      = 0;\n    const ACTION_SYNCHRONIZE = 1;\n    const ACTION_ALL         = 2;\n\n    const USER_IMPORTED      = 0;\n    const USER_SYNCHRONIZED  = 1;\n    const USER_DELETED_LDAP  = 2;\n    const USER_RESTORED_LDAP = 3;\n\n   //Import user by giving his login\n    const IDENTIFIER_LOGIN = 'login';\n\n   //Import user by giving his email\n    const IDENTIFIER_EMAIL = 'email';\n\n    const GROUP_SEARCH_USER    = 0;\n    const GROUP_SEARCH_GROUP   = 1;\n    const GROUP_SEARCH_BOTH    = 2;\n\n    /**\n     * Deleted user strategy: preserve user.\n     * @var integer\n     */\n    const DELETED_USER_PRESERVE = 0;\n\n    /**\n     * Deleted user strategy: put user in trashbin.\n     * @var integer\n     */\n    const DELETED_USER_DELETE = 1;\n\n    /**\n     * Deleted user strategy: withdraw dynamic authorizations and groups.\n     * @var integer\n     */\n    const DELETED_USER_WITHDRAWDYNINFO = 2;\n\n    /**\n     * Deleted user strategy: disable user.\n     * @var integer\n     */\n    const DELETED_USER_DISABLE = 3;\n\n    /**\n     * Deleted user strategy: disable user and withdraw dynamic authorizations and groups.\n     * @var integer\n     */\n    const DELETED_USER_DISABLEANDWITHDRAWDYNINFO = 4;\n\n    /**\n     * Deleted user strategy: disable user and withdraw groups.\n     * @var integer\n     */\n    const DELETED_USER_DISABLEANDDELETEGROUPS = 5;\n\n    /**\n     * Restored user strategy: Make no change to GLPI user\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_PRESERVE = 0;\n\n    /**\n     * Restored user strategy: Restore user from trash\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_RESTORE = 1;\n\n    /**\n     * Restored user strategy: Re-enable user\n     * @var integer\n     * @since 10.0.0\n     */\n    const RESTORED_USER_ENABLE  = 3;\n\n   // From CommonDBTM\n    public $dohistory = true;\n\n    public static $rightname = 'config';\n\n   //connection caching stuff\n    public static $conn_cache = [];\n\n    public static $undisclosedFields = [\n        'rootdn_passwd',\n    ];\n\n    public static function getTypeName($nb = 0)\n    {\n        return _n('LDAP directory', 'LDAP directories', $nb);\n    }\n\n    public static function canCreate()\n    {\n        return static::canUpdate();\n    }\n\n    public static function canPurge()\n    {\n        return static::canUpdate();\n    }\n\n    public function post_getEmpty()\n    {\n\n        $this->fields['port']                        = '389';\n        $this->fields['condition']                   = '';\n        $this->fields['login_field']                 = 'uid';\n        $this->fields['sync_field']                  = null;\n        $this->fields['use_tls']                     = 0;\n        $this->fields['group_field']                 = '';\n        $this->fields['group_condition']             = '';\n        $this->fields['group_search_type']           = self::GROUP_SEARCH_USER;\n        $this->fields['group_member_field']          = '';\n        $this->fields['email1_field']                = 'mail';\n        $this->fields['email2_field']                = '';\n        $this->fields['email3_field']                = '';\n        $this->fields['email4_field']                = '';\n        $this->fields['realname_field']              = 'sn';\n        $this->fields['firstname_field']             = 'givenname';\n        $this->fields['phone_field']                 = 'telephonenumber';\n        $this->fields['phone2_field']                = '';\n        $this->fields['mobile_field']                = '';\n        $this->fields['registration_number_field']   = '';\n        $this->fields['comment_field']               = '';\n        $this->fields['title_field']                 = '';\n        $this->fields['use_dn']                      = 0;\n        $this->fields['use_bind']                    = 1;\n        $this->fields['picture_field']               = '';\n        $this->fields['responsible_field']           = '';\n        $this->fields['can_support_pagesize']        = 0;\n        $this->fields['pagesize']                    = 0;\n        $this->fields['ldap_maxlimit']               = 0;\n    }\n\n\n    /**\n     * Preconfig datas for standard system\n     *\n     * @param string $type type of standard system : AD\n     *\n     * @return void\n     */\n    public function preconfig($type)\n    {\n\n        switch ($type) {\n            case 'AD':\n                $this->fields['port']                      = \"389\";\n                $this->fields['condition']\n                 = '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))';\n                $this->fields['login_field']               = 'samaccountname';\n                $this->fields['sync_field']                = 'objectguid';\n                $this->fields['use_tls']                   = 0;\n                $this->fields['group_field']               = 'memberof';\n                $this->fields['group_condition']\n                 = '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))';\n                $this->fields['group_search_type']         = self::GROUP_SEARCH_USER;\n                $this->fields['group_member_field']        = '';\n                $this->fields['email1_field']              = 'mail';\n                $this->fields['email2_field']              = '';\n                $this->fields['email3_field']              = '';\n                $this->fields['email4_field']              = '';\n                $this->fields['realname_field']            = 'sn';\n                $this->fields['firstname_field']           = 'givenname';\n                $this->fields['phone_field']               = 'telephonenumber';\n                $this->fields['phone2_field']              = 'othertelephone';\n                $this->fields['mobile_field']              = 'mobile';\n                $this->fields['registration_number_field'] = 'employeenumber';\n                $this->fields['comment_field']             = 'info';\n                $this->fields['title_field']               = 'title';\n                $this->fields['entity_field']              = 'ou';\n                $this->fields['entity_condition']          = '(objectclass=organizationalUnit)';\n                $this->fields['use_dn']                    = 1;\n                $this->fields['can_support_pagesize']      = 1;\n                $this->fields['pagesize']                  = '1000';\n                $this->fields['picture_field']             = '';\n                $this->fields['responsible_field']         = 'manager';\n                break;\n            case 'OpenLDAP':\n                $this->fields['port']                      = \"389\";\n                $this->fields['condition']                 = '(objectClass=inetOrgPerson)';\n                $this->fields['login_field']               = 'uid';\n                $this->fields['sync_field']                = 'entryuuid';\n                $this->fields['use_tls']                   = 0;\n                $this->fields['group_field']               = '';\n                $this->fields['group_condition']           = '(objectClass=inetOrgPerson)';\n                $this->fields['group_search_type']         = self::GROUP_SEARCH_GROUP;\n                $this->fields['group_member_field']        = 'member';\n                $this->fields['email1_field']              = 'mail';\n                $this->fields['email2_field']              = '';\n                $this->fields['email3_field']              = '';\n                $this->fields['email4_field']              = '';\n                $this->fields['realname_field']            = 'sn';\n                $this->fields['firstname_field']           = 'givenname';\n                $this->fields['phone_field']               = 'telephonenumber';\n                $this->fields['phone2_field']              = 'homephone';\n                $this->fields['mobile_field']              = 'mobile';\n                $this->fields['registration_number_field'] = 'employeenumber';\n                $this->fields['comment_field']             = 'description';\n                $this->fields['title_field']               = 'title';\n                $this->fields['entity_field']              = 'ou';\n                $this->fields['entity_condition']          = '(objectClass=organizationalUnit)';\n                $this->fields['use_dn']                    = 1;\n                $this->fields['can_support_pagesize']      = 1;\n                $this->fields['pagesize']                  = '1000';\n                $this->fields['picture_field']             = 'jpegphoto';\n                $this->fields['responsible_field']         = 'manager';\n                $this->fields['category_field']            = 'businesscategory';\n                $this->fields['language_field']            = 'preferredlanguage';\n                $this->fields['location_field']            = 'l';\n                break;\n\n            default:\n                $this->post_getEmpty();\n        }\n    }\n\n    public function prepareInputForUpdate($input)\n    {\n\n        if (isset($input[\"rootdn_passwd\"])) {\n            if (empty($input[\"rootdn_passwd\"])) {\n                unset($input[\"rootdn_passwd\"]);\n            } else {\n                $input[\"rootdn_passwd\"] = (new GLPIKey())->encrypt($input[\"rootdn_passwd\"]);\n            }\n        }\n\n        if (isset($input[\"_blank_passwd\"]) && $input[\"_blank_passwd\"]) {\n            $input['rootdn_passwd'] = '';\n        }\n\n       // Set attributes in lower case\n        if (count($input)) {\n            foreach ($input as $key => $val) {\n                if (preg_match('/_field$/', $key)) {\n                    $input[$key] = Toolbox::strtolower($val);\n                }\n            }\n        }\n\n       //do not permit to override sync_field\n        if (\n            $this->isSyncFieldEnabled()\n            && isset($input['sync_field'])\n            && $this->isSyncFieldUsed()\n        ) {\n            if ($input['sync_field'] == $this->fields['sync_field']) {\n                unset($input['sync_field']);\n            } else {\n                Session::addMessageAfterRedirect(\n                    __('Synchronization field cannot be changed once in use.'),\n                    false,\n                    ERROR\n                );\n                return false;\n            };\n        }\n\n        if (!$this->checkFilesExist($input)) {\n            return false;\n        }\n\n        return $input;\n    }\n\n    public static function getSpecificValueToDisplay($field, $values, array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        switch ($field) {\n            case 'group_search_type':\n                return self::getGroupSearchTypeName($values[$field]);\n        }\n        return parent::getSpecificValueToDisplay($field, $values, $options);\n    }\n\n    public static function getSpecificValueToSelect($field, $name = '', $values = '', array $options = [])\n    {\n\n        if (!is_array($values)) {\n            $values = [$field => $values];\n        }\n        $options['display'] = false;\n        switch ($field) {\n            case 'group_search_type':\n                $options['value'] = $values[$field];\n                $options['name']  = $name;\n                return self::dropdownGroupSearchType($options);\n        }\n        return parent::getSpecificValueToSelect($field, $name, $values, $options);\n    }\n\n    public static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids)\n    {\n        $input = $ma->getInput();\n\n        switch ($ma->getAction()) {\n            case 'import_group':\n                $group = new Group();\n                if (\n                    !Session::haveRight(\"user\", User::UPDATEAUTHENT)\n                    || !$group->canGlobal(UPDATE)\n                ) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    return;\n                }\n                foreach ($ids as $id) {\n                    if (isset($input[\"dn\"][$id])) {\n                        $group_dn = $input[\"dn\"][$id];\n                        if (isset($input[\"ldap_import_entities\"][$id])) {\n                              $entity = $input[\"ldap_import_entities\"][$id];\n                        } else {\n                             $entity = $_SESSION[\"glpiactive_entity\"];\n                        }\n                      // Is recursive is in the main form and thus, don't pass through\n                      // zero_on_empty mechanism inside massive action form ...\n                        $is_recursive = (empty($input['ldap_import_recursive'][$id]) ? 0 : 1);\n                        $options      = ['authldaps_id' => $_SESSION['ldap_server'],\n                            'entities_id'  => $entity,\n                            'is_recursive' => $is_recursive,\n                            'type'         => $input['ldap_import_type'][$id]\n                        ];\n                        if (AuthLDAP::ldapImportGroup($group_dn, $options)) {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                        } else {\n                            $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                            $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION, $group_dn));\n                        }\n                    }\n                   // Clean history as id does not correspond to group\n                    $_SESSION['glpimassiveactionselected'] = [];\n                }\n                return;\n\n            case 'import':\n            case 'sync':\n                if (!Session::haveRight(\"user\", User::IMPORTEXTAUTHUSERS)) {\n                    $ma->itemDone($item->getType(), $ids, MassiveAction::ACTION_NORIGHT);\n                    $ma->addMessage($item->getErrorMessage(ERROR_RIGHT));\n                    return;\n                }\n                foreach ($ids as $id) {\n                    if (\n                        AuthLDAP::ldapImportUserByServerId(\n                            ['method' => AuthLDAP::IDENTIFIER_LOGIN,\n                                'value'  => $id\n                            ],\n                            $_SESSION['ldap_import']['mode'],\n                            $_SESSION['ldap_import']['authldaps_id'],\n                            true\n                        )\n                    ) {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_OK);\n                    } else {\n                        $ma->itemDone($item->getType(), $id, MassiveAction::ACTION_KO);\n                        $ma->addMessage($item->getErrorMessage(ERROR_ON_ACTION, $id));\n                    }\n                }\n                return;\n        }\n\n        parent::processMassiveActionsForOneItemtype($ma, $item, $ids);\n    }\n\n    /**\n     * Print the auth ldap form\n     *\n     * @param integer $ID      ID of the item\n     * @param array   $options Options\n     *     - target for the form\n     *\n     * @return void|boolean (display) Returns false if there is a rights error.\n     */\n    public function showForm($ID, array $options = [])\n    {\n\n        if (!Config::canUpdate()) {\n            return false;\n        }\n        if (empty($ID)) {\n            $this->getEmpty();\n            if (isset($options['preconfig'])) {\n                $this->preconfig($options['preconfig']);\n            }\n        } else {\n            $this->getFromDB($ID);\n        }\n\n        if (Toolbox::canUseLdap()) {\n            $this->showFormHeader($options);\n            if (empty($ID)) {\n                $target = $this->getFormURL();\n                echo \"<tr class='tab_bg_2'><td>\" . __('Preconfiguration') . \"</td> \";\n                echo \"<td colspan='3'>\";\n                echo \"<a href='$target?preconfig=AD'>\" . __('Active Directory') . \"</a>\";\n                echo \"&nbsp;&nbsp;/&nbsp;&nbsp;\";\n                echo \"<a href='$target?preconfig=OpenLDAP'>\" . __('OpenLDAP') . \"</a>\";\n                echo \"&nbsp;&nbsp;/&nbsp;&nbsp;\";\n                echo \"<a href='$target?preconfig=default'>\" . __('Default values');\n                echo \"</a></td></tr>\";\n            }\n            echo \"<tr class='tab_bg_1'><td><label for='name'>\" . __('Name') . \"</label></td>\";\n            echo \"<td><input type='text' id='name' name='name' value='\" . Html::cleanInputText($this->fields[\"name\"]) . \"' class='form-control'></td>\";\n            if ($ID > 0) {\n                echo \"<td>\" . __('Last update') . \"</td><td>\" . Html::convDateTime($this->fields[\"date_mod\"]);\n            } else {\n                echo \"<td colspan='2'>&nbsp;\";\n            }\n            echo \"</td></tr>\";\n\n            $defaultrand = mt_rand();\n            echo \"<tr class='tab_bg_1'><td><label for='dropdown_is_default$defaultrand'>\" . __('Default server') . \"</label></td>\";\n            echo \"<td>\";\n            Dropdown::showYesNo('is_default', $this->fields['is_default'], -1, ['rand' => $defaultrand]);\n            echo \"</td>\";\n            $activerand = mt_rand();\n            echo \"<td><label for='dropdown_is_active$activerand'>\" . __('Active') . \"</label></td>\";\n            echo \"<td>\";\n            Dropdown::showYesNo('is_active', $this->fields['is_active'], -1, ['rand' => $activerand]);\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='host'>\" . __('Server') . \"</label></td>\";\n            echo \"<td><input type='text' id='host' name='host' value='\" . Html::cleanInputText($this->fields[\"host\"]) . \"' class='form-control'></td>\";\n            echo \"<td><label for='port'>\" . __('Port (default=389)') . \"</label></td>\";\n            echo \"<td><input id='port' type='number' id='port' name='port' value='\" . Html::cleanInputText($this->fields[\"port\"]) . \"' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='condition'>\" . __('Connection filter') . \"</label></td>\";\n            echo \"<td colspan='3'>\";\n            echo \"<textarea class='form-control' id='condition' name='condition'>\" . $this->fields[\"condition\"];\n            echo \"</textarea>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='basedn'>\" . __('BaseDN') . \"</label></td>\";\n            echo \"<td colspan='3'>\";\n            echo \"<input type='text' id='basedn' name='basedn' size='100' value=\\\"\" . Html::cleanInputText($this->fields[\"basedn\"]) . \"\\\" class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'><td><label for='use_bind'>\";\n            echo __('Use bind') . \"</label>&nbsp;\";\n            Html::showToolTip(__(\"Indicates whether a simple bind operation should be used during connection to LDAP server. Disabling this behaviour can be required when LDAPS bind is used.\"));\n            echo \"</td>\";\n            echo \"<td colspan='3'>\";\n            $rand_use_bind = mt_rand();\n            Dropdown::showYesNo('use_bind', $this->fields[\"use_bind\"], -1, [\n                'rand' => $rand_use_bind\n            ]);\n            echo Html::scriptBlock(\"$(document).ready(function() {\n                $('#dropdown_use_bind$rand_use_bind').on('select2:select', function() {\n                    if ($(this).val() == 1) {\n                        $('#rootdn_block, #rootdn_passwd_block')\n                            .addClass('d-table-row')\n                            .removeClass('d-none');\n                    } else {\n                        $('#rootdn_block, #rootdn_passwd_block')\n                            .removeClass('d-table-row')\n                            .addClass('d-none');\n                    }\n                });\n            });\");\n            echo \"</td></tr>\";\n\n            $rootdn_class = 'd-none';\n            if ($this->fields[\"use_bind\"]) {\n                $rootdn_class = 'd-table-row';\n            }\n            echo \"<tr class='tab_bg_1 $rootdn_class' id='rootdn_block'><td><label for='rootdn'>\" . __('RootDN (for non anonymous binds)') . \"</label></td>\";\n            echo \"<td colspan='3'><input type='text' name='rootdn' id='rootdn' size='100' value=\\\"\" .\n                Html::cleanInputText($this->fields[\"rootdn\"]) . \"\\\" class='form-control'>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1 $rootdn_class' id='rootdn_passwd_block'><td><label for='rootdn_passwd'>\" .\n            __('Password (for non-anonymous binds)') . \"</label></td>\";\n            echo \"<td><input type='password' id='rootdn_passwd' name='rootdn_passwd' value='' autocomplete='new-password' class='form-control'>\";\n            if ($ID) {\n                echo \"<input type='checkbox' name='_blank_passwd' id='_blank_passwd'>&nbsp;\"\n                . \"<label for='_blank_passwd'>\" . __('Clear') . \"</label>\";\n            }\n            echo \"</td>\";\n            echo \"<td rowspan='3'><label for='comment'>\" . __('Comments') . \"</label></td>\";\n            echo \"<td rowspan='3' class='middle'>\";\n            echo \"<textarea class='form-control' name='comment' id='comment'>\" . $this->fields[\"comment\"] . \"</textarea>\";\n            echo \"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='login_field'>\" . __('Login field') . \"</label></td>\";\n            echo \"<td><input type='text' id='login_field' name='login_field' value='\" . Html::cleanInputText($this->fields[\"login_field\"]) . \"' class='form-control'>\";\n            echo \"</td></tr>\";\n\n            $info_message = __s('Synchronization field cannot be changed once in use.');\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td><label for='sync_field'>\" . __('Synchronization field') . \"<i class='pointer fa fa-info' title='$info_message'></i></td>\";\n            echo \"<td><input type='text' id='sync_field' name='sync_field' value='\" . Html::cleanInputText($this->fields[\"sync_field\"]) . \"' title='$info_message' class='form-control'\";\n            if ($this->isSyncFieldEnabled() && $this->isSyncFieldUsed()) {\n                echo \" disabled='disabled'\";\n            }\n            echo \">\";\n            echo \"</td></tr>\";\n\n           //Fill fields when using preconfiguration models\n            if (!$ID) {\n                $hidden_fields = ['comment_field', 'email1_field', 'email2_field',\n                    'email3_field', 'email4_field', 'entity_condition',\n                    'entity_field', 'firstname_field', 'group_condition',\n                    'group_field', 'group_member_field', 'group_search_type',\n                    'mobile_field', 'phone_field', 'phone2_field',\n                    'realname_field', 'registration_number_field', 'title_field',\n                    'use_dn', 'use_tls', 'picture_field', 'responsible_field',\n                    'category_field', 'language_field', 'location_field',\n                    'can_support_pagesize', 'pagesize',\n                ];\n\n                foreach ($hidden_fields as $hidden_field) {\n                    echo \"<input type='hidden' name='$hidden_field' value='\" .\n                      Html::cleanInputText($this->fields[$hidden_field]) . \"'>\";\n                }\n            }\n\n            echo \"</td></tr>\";\n\n            $this->showFormButtons($options);\n        } else {\n            echo \"<div class='center'>&nbsp;<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='2'>\" . self::getTypeName(1) . \"</th></tr>\";\n            echo \"<tr class='tab_bg_2'><td class='center'>\";\n            echo \"<p class='red'>\" . sprintf(__('%s extension is missing'), 'LDAP') . \"</p>\";\n            echo \"<p>\" . __('Impossible to use LDAP as external source of connection') . \"</p>\" .\n              \"</td></tr></table>\";\n\n            echo \"<p><strong>\" . GLPINetwork::getSupportPromoteMessage() . \"</strong></p>\";\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Show advanced config form\n     *\n     * @return void\n     */\n    public function showFormAdvancedConfig()\n    {\n\n        $ID = $this->getField('id');\n        $hidden = '';\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_2'><th colspan='4'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\" . __('Advanced information') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Use TLS') . \"</td><td>\";\n        if (function_exists(\"ldap_start_tls\")) {\n            Dropdown::showYesNo('use_tls', $this->fields[\"use_tls\"]);\n        } else {\n            echo \"<input type='hidden' name='use_tls' value='0'>\" . __('ldap_start_tls does not exist');\n        }\n        echo \"</td>\";\n        echo \"<td>\" . __('LDAP directory time zone') . \"</td><td>\";\n        Dropdown::showGMT(\"time_offset\", $this->fields[\"time_offset\"]);\n        echo\"</td></tr>\";\n\n        if (self::isLdapPageSizeAvailable(false, false)) {\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Use paged results') . \"</td><td>\";\n            Dropdown::showYesNo('can_support_pagesize', $this->fields[\"can_support_pagesize\"]);\n            echo \"</td>\";\n            echo \"<td>\" . __('Page size') . \"</td><td>\";\n            Dropdown::showNumber(\"pagesize\", ['value' => $this->fields['pagesize'],\n                'min'   => 100,\n                'max'   => 100000,\n                'step'  => 100\n            ]);\n            echo\"</td></tr>\";\n\n            echo \"<tr class='tab_bg_1'>\";\n            echo \"<td>\" . __('Maximum number of results') . \"</td><td>\";\n            Dropdown::showNumber('ldap_maxlimit', ['value' => $this->fields['ldap_maxlimit'],\n                'min'   => 100,\n                'max'   => 999999,\n                'step'  => 100,\n                'toadd' => [0 => __('Unlimited')]\n            ]);\n            echo \"</td><td colspan='2'></td></tr>\";\n        } else {\n            $hidden .= \"<input type='hidden' name='can_support_pagesize' value='0'>\";\n            $hidden .= \"<input type='hidden' name='pagesize' value='0'>\";\n            $hidden .= \"<input type='hidden' name='ldap_maxlimit' value='0'>\";\n        }\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('How LDAP aliases should be handled') . \"</td><td colspan='4'>\";\n        $alias_options = [\n            LDAP_DEREF_NEVER     => __('Never dereferenced (default)'),\n            LDAP_DEREF_ALWAYS    => __('Always dereferenced'),\n            LDAP_DEREF_SEARCHING => __('Dereferenced during the search (but not when locating)'),\n            LDAP_DEREF_FINDING   => __('Dereferenced when locating (not during the search)'),\n        ];\n        Dropdown::showFromArray(\n            \"deref_option\",\n            $alias_options,\n            ['value' => $this->fields[\"deref_option\"]]\n        );\n        echo\"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Domain name used by inventory tool for link the user') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo Html::input('inventory_domain', ['value' => $this->fields['inventory_domain'], 'size' => 100]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('TLS Certfile') . \"</td><td>\";\n        echo \"<input type='text' name='tls_certfile' class='form-control' id='tls_certfile' value='\" . $this->fields[\"tls_certfile\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . __('TLS Keyfile') . \"</td><td>\";\n        echo \"<input type='text' name='tls_keyfile' class='form-control' id='tls_keyfile' value='\" . $this->fields[\"tls_keyfile\"] . \"'>\";\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'><td><label for='timeout'>\" . __('Timeout') . \"</label></td>\";\n        echo \"<td colspan='3'>\";\n\n        Dropdown::showNumber('timeout', ['value'  => $this->fields[\"timeout\"],\n            'min'    => 1,\n            'max'    => 30,\n            'step'   => 1,\n            'toadd'  => [0 => __('No timeout')]\n        ]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo $hidden;\n        echo \"</td></tr>\";\n\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show config replicates form\n     *\n     * @var DBmysql $DB\n     *\n     * @return void\n     */\n    public function showFormReplicatesConfig()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $ID     = $this->getField('id');\n        $target = $this->getFormURL();\n        $rand   = mt_rand();\n\n        AuthLdapReplicate::addNewReplicateForm($target, $ID);\n\n        $iterator = $DB->request([\n            'FROM'   => 'glpi_authldapreplicates',\n            'WHERE'  => [\n                'authldaps_id' => $ID\n            ],\n            'ORDER'  => ['name']\n        ]);\n\n        if (($nb = count($iterator)) > 0) {\n            echo \"<br>\";\n\n            echo \"<div class='center'>\";\n            Html::openMassiveActionsForm('massAuthLdapReplicate' . $rand);\n            $massiveactionparams = ['num_displayed' => min($_SESSION['glpilist_limit'], $nb),\n                'container'     => 'massAuthLdapReplicate' . $rand\n            ];\n            Html::showMassiveActions($massiveactionparams);\n            echo \"<input type='hidden' name='id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixehov'>\";\n            echo \"<tr class='noHover'>\" .\n              \"<th colspan='4'>\" . __('List of LDAP directory replicates') . \"</th></tr>\";\n\n            if (isset($_SESSION[\"LDAP_TEST_MESSAGE\"])) {\n                echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n                echo $_SESSION[\"LDAP_TEST_MESSAGE\"];\n                echo\"</td></tr>\";\n                unset($_SESSION[\"LDAP_TEST_MESSAGE\"]);\n            }\n            $header_begin   = \"<tr>\";\n            $header_top     = \"<th>\" . Html::getCheckAllAsCheckbox('massAuthLdapReplicate' . $rand) . \"</th>\";\n            $header_bottom  = \"<th>\" . Html::getCheckAllAsCheckbox('massAuthLdapReplicate' . $rand) . \"</th>\";\n            $header_end     = \"<th class='center b'>\" . __('Name') . \"</th>\";\n            $header_end    .= \"<th class='center b'>\" . _n('Replicate', 'Replicates', 1) . \"</th>\";\n            $header_end    .= \"<th class='center b'>\" . __('Timeout') . \"</th>\" .\n              \"<th class='center'></th></tr>\";\n            echo $header_begin . $header_top . $header_end;\n\n            foreach ($iterator as $ldap_replicate) {\n                echo \"<tr class='tab_bg_1'><td class='center' width='10'>\";\n                Html::showMassiveActionCheckBox('AuthLdapReplicate', $ldap_replicate[\"id\"]);\n                echo \"</td>\";\n                echo \"<td class='center'>\" . $ldap_replicate[\"name\"] . \"</td>\";\n                echo \"<td class='center'>\" . sprintf(\n                    __('%1$s: %2$s'),\n                    $ldap_replicate[\"host\"],\n                    $ldap_replicate[\"port\"]\n                );\n                echo \"</td>\";\n                echo \"<td class='center'>\" . $ldap_replicate[\"timeout\"] . \"</td>\";\n                echo \"<td class='center'>\";\n                Html::showSimpleForm(\n                    static::getFormURL(),\n                    'test_ldap_replicate',\n                    _sx('button', 'Test'),\n                    ['id'                => $ID,\n                        'ldap_replicate_id' => $ldap_replicate[\"id\"]\n                    ]\n                );\n                echo \"</td></tr>\";\n            }\n            echo $header_begin . $header_bottom . $header_end;\n            echo \"</table>\";\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n\n            Html::closeForm();\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Build a dropdown\n     *\n     * @since 0.84\n     *\n     * @param array $options Options\n     *\n     * @return string\n     */\n    public static function dropdownGroupSearchType(array $options)\n    {\n\n        $p = [\n            'name'    => 'group_search_type',\n            'value'   => self::GROUP_SEARCH_USER,\n            'display' => true,\n        ];\n\n        if (count($options)) {\n            foreach ($options as $key => $val) {\n                $p[$key] = $val;\n            }\n        }\n\n        $tab = self::getGroupSearchTypeName();\n        return Dropdown::showFromArray($p['name'], $tab, $p);\n    }\n\n    /**\n     * Get the possible value for contract alert\n     *\n     * @since 0.83\n     *\n     * @param integer $val if not set, ask for all values, else for 1 value (default NULL)\n     *\n     * @return array|string\n     */\n    public static function getGroupSearchTypeName($val = null)\n    {\n        $tmp = [\n            self::GROUP_SEARCH_USER    => __('In users'),\n            self::GROUP_SEARCH_GROUP   => __('In groups'),\n            self::GROUP_SEARCH_BOTH    => __('In users and groups')\n        ];\n\n        if (is_null($val)) {\n            return $tmp;\n        }\n        if (isset($tmp[$val])) {\n            return $tmp[$val];\n        }\n        return NOT_AVAILABLE;\n    }\n\n    /**\n     * Show group config form\n     *\n     * @return void\n     */\n    public function showFormGroupsConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th class='center' colspan='4'>\" . __('Belonging to groups') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Search type') . \"</td><td>\";\n        self::dropdownGroupSearchType(['value' => $this->fields[\"group_search_type\"]]);\n        echo \"</td>\";\n        echo \"<td>\" . __('User attribute containing its groups') . \"</td>\";\n        echo \"<td><input type='text' name='group_field' class='form-control' value='\" . $this->fields[\"group_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Filter to search in groups') . \"</td><td colspan='3'>\";\n        echo \"<textarea class='form-control' name='group_condition'>\" . $this->fields[\"group_condition\"];\n        echo \"</textarea>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Group attribute containing its users') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='group_member_field' value='\" .\n                 $this->fields[\"group_member_field\"] . \"'></td>\";\n        echo \"<td>\" . __('Use DN in the search') . \"</td>\";\n        echo \"<td>\";\n        Dropdown::showYesNo(\"use_dn\", $this->fields[\"use_dn\"]);\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show ldap test form\n     *\n     * @return void\n     */\n    public function showFormTestLDAP()\n    {\n\n        $ID = $this->getField('id');\n\n        if ($ID > 0) {\n            echo \"<div class='center'>\";\n            echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n            echo \"<input type='hidden' name='id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr><th colspan='4'>\" . __('Test of connection to LDAP directory') . \"</th></tr>\";\n\n            if (isset($_SESSION[\"LDAP_TEST_MESSAGE\"])) {\n                echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n                echo $_SESSION[\"LDAP_TEST_MESSAGE\"];\n                echo\"</td></tr>\";\n                unset($_SESSION[\"LDAP_TEST_MESSAGE\"]);\n            }\n\n            echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n            echo \"<input type='submit' name='test_ldap' class='btn btn-primary' value=\\\"\" .\n                _sx('button', 'Test') . \"\\\">\";\n            echo \"</td></tr>\";\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n        }\n    }\n\n    /**\n     * Show user config form\n     *\n     * @return void\n     */\n    public function showFormUserConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th class='center' colspan='4'>\" . __('Binding to the LDAP directory') . \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Surname') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='realname_field' value='\" .\n                 $this->fields[\"realname_field\"] . \"'></td>\";\n        echo \"<td>\" . __('First name') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='firstname_field' value='\" .\n                 $this->fields[\"firstname_field\"] . \"'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Comments') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='comment_field' value='\" . $this->fields[\"comment_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . _x('user', 'Administrative number') . \"</td>\";\n        echo \"<td>\";\n        echo \"<input type='text' class='form-control' name='registration_number_field' value='\" .\n             $this->fields[\"registration_number_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . _n('Email', 'Emails', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email1_field' value='\" . $this->fields[\"email1_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '2') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email2_field' value='\" . $this->fields[\"email2_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '3') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email3_field' value='\" . $this->fields[\"email3_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '4') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='email4_field' value='\" . $this->fields[\"email4_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _x('ldap', 'Phone') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='phone_field'value='\" . $this->fields[\"phone_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" .  __('Phone 2') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='phone2_field'value='\" . $this->fields[\"phone2_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Mobile phone') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='mobile_field'value='\" . $this->fields[\"mobile_field\"] . \"'>\";\n        echo \"</td>\";\n        echo \"<td>\" . _x('person', 'Title') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='title_field' value='\" . $this->fields[\"title_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _n('Category', 'Categories', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='category_field' value='\" .\n                 $this->fields[\"category_field\"] . \"'></td>\";\n        echo \"<td>\" . __('Language') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='language_field' value='\" .\n                 $this->fields[\"language_field\"] . \"'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . _n('Picture', 'Pictures', 1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='picture_field' value='\" .\n                 $this->fields[\"picture_field\"] . \"'></td>\";\n        echo \"<td>\" . Location::getTypeName(1) . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='location_field' value='\" . $this->fields[\"location_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td>\" . __('Responsible') . \"</td>\";\n        echo \"<td><input type='text' class='form-control' name='responsible_field' value='\" .\n           $this->fields[\"responsible_field\"] . \"'></td>\";\n        echo \"<td colspan='2'></td></tr>\";\n\n        echo \"<tr><td colspan=4 class='center green'>\" . __('You can use a field name or an expression using various %{fieldname}') .\n           \" <br />\" . __('Example for location: %{city} > %{roomnumber}') . \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    /**\n     * Show entity config form\n     *\n     * @return void\n     */\n    public function showFormEntityConfig()\n    {\n\n        $ID = $this->getField('id');\n\n        echo \"<div class='center'>\";\n        echo \"<form method='post' action='\" . Toolbox::getItemTypeFormURL(__CLASS__) . \"'>\";\n        echo \"<input type='hidden' name='id' value='$ID'>\";\n        echo \"<table class='tab_cadre_fixe'>\";\n\n        echo \"<tr><th class='center' colspan='4'>\" . __('Import entities from LDAP directory') .\n           \"</th></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Attribute representing entity') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='entity_field' value='\" . $this->fields[\"entity_field\"] . \"'>\";\n        echo \"</td></tr>\";\n\n        echo \"<tr class='tab_bg_1'><td>\" . __('Search filter for entities') . \"</td>\";\n        echo \"<td colspan='3'>\";\n        echo \"<input type='text' name='entity_condition' value='\" . $this->fields[\"entity_condition\"] . \"'\n             size='100'></td></tr>\";\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='4'>\";\n        echo \"<input type='submit' name='update' class='btn btn-primary' value=\\\"\" . __s('Save') . \"\\\">\";\n        echo \"</td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n    public function defineTabs($options = [])\n    {\n\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $this->addImpactTab($ong, $options);\n        $this->addStandardTab('Log', $ong, $options);\n\n        return $ong;\n    }\n\n    public function rawSearchOptions()\n    {\n        $tab = [];\n\n        $tab[] = [\n            'id'                 => 'common',\n            'name'               => $this->getTypeName(1)\n        ];\n\n        $tab[] = [\n            'id'                 => '1',\n            'table'              => $this->getTable(),\n            'field'              => 'name',\n            'name'               => __('Name'),\n            'datatype'           => 'itemlink',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '2',\n            'table'              => $this->getTable(),\n            'field'              => 'id',\n            'name'               => __('ID'),\n            'datatype'           => 'number',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '3',\n            'table'              => $this->getTable(),\n            'field'              => 'host',\n            'name'               => __('Server'),\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '4',\n            'table'              => $this->getTable(),\n            'field'              => 'port',\n            'name'               => _n('Port', 'Ports', 1),\n            'datatype'           => 'integer'\n        ];\n\n        $tab[] = [\n            'id'                 => '5',\n            'table'              => $this->getTable(),\n            'field'              => 'basedn',\n            'name'               => __('BaseDN'),\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '6',\n            'table'              => $this->getTable(),\n            'field'              => 'condition',\n            'name'               => __('Connection filter'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '7',\n            'table'              => $this->getTable(),\n            'field'              => 'is_default',\n            'name'               => __('Default server'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '8',\n            'table'              => $this->getTable(),\n            'field'              => 'login_field',\n            'name'               => __('Login field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '9',\n            'table'              => $this->getTable(),\n            'field'              => 'realname_field',\n            'name'               => __('Surname'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '10',\n            'table'              => $this->getTable(),\n            'field'              => 'firstname_field',\n            'name'               => __('First name'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '11',\n            'table'              => $this->getTable(),\n            'field'              => 'phone_field',\n            'name'               =>  _x('ldap', 'Phone'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '12',\n            'table'              => $this->getTable(),\n            'field'              => 'phone2_field',\n            'name'               => __('Phone 2'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '13',\n            'table'              => $this->getTable(),\n            'field'              => 'mobile_field',\n            'name'               => __('Mobile phone'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '14',\n            'table'              => $this->getTable(),\n            'field'              => 'title_field',\n            'name'               => _x('person', 'Title'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '15',\n            'table'              => $this->getTable(),\n            'field'              => 'category_field',\n            'name'               => _n('Category', 'Categories', 1),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '16',\n            'table'              => $this->getTable(),\n            'field'              => 'comment',\n            'name'               => __('Comments'),\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '17',\n            'table'              => $this->getTable(),\n            'field'              => 'email1_field',\n            'name'               => _n('Email', 'Emails', 1),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '25',\n            'table'              => $this->getTable(),\n            'field'              => 'email2_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '2'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '26',\n            'table'              => $this->getTable(),\n            'field'              => 'email3_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '3'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '27',\n            'table'              => $this->getTable(),\n            'field'              => 'email4_field',\n            'name'               => sprintf(__('%1$s %2$s'), _n('Email', 'Emails', 1), '4'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '18',\n            'table'              => $this->getTable(),\n            'field'              => 'use_dn',\n            'name'               => __('Use DN in the search'),\n            'datatype'           => 'bool',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '19',\n            'table'              => $this->getTable(),\n            'field'              => 'date_mod',\n            'name'               => __('Last update'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '121',\n            'table'              => $this->getTable(),\n            'field'              => 'date_creation',\n            'name'               => __('Creation date'),\n            'datatype'           => 'datetime',\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '20',\n            'table'              => $this->getTable(),\n            'field'              => 'language_field',\n            'name'               => __('Language'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '21',\n            'table'              => $this->getTable(),\n            'field'              => 'group_field',\n            'name'               => __('User attribute containing its groups'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '22',\n            'table'              => $this->getTable(),\n            'field'              => 'group_condition',\n            'name'               => __('Filter to search in groups'),\n            'massiveaction'      => false,\n            'datatype'           => 'text'\n        ];\n\n        $tab[] = [\n            'id'                 => '23',\n            'table'              => $this->getTable(),\n            'field'              => 'group_member_field',\n            'name'               => __('Group attribute containing its users'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '24',\n            'table'              => $this->getTable(),\n            'field'              => 'group_search_type',\n            'datatype'           => 'specific',\n            'name'               => __('Search type'),\n            'massiveaction'      => false\n        ];\n\n        $tab[] = [\n            'id'                 => '30',\n            'table'              => $this->getTable(),\n            'field'              => 'is_active',\n            'name'               => __('Active'),\n            'datatype'           => 'bool'\n        ];\n\n        $tab[] = [\n            'id'                 => '28',\n            'table'              => $this->getTable(),\n            'field'              => 'sync_field',\n            'name'               => __('Synchronization field'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '29',\n            'table'              => $this->getTable(),\n            'field'              => 'responsible_field',\n            'name'               => __('Responsible'),\n            'massiveaction'      => false,\n            'datatype'           => 'string'\n        ];\n\n        $tab[] = [\n            'id'                 => '31',\n            'table'              => $this->getTable(),\n            'field'              => 'inventory_domain',\n            'name'               => __('Domain name used by inventory tool'),\n            'massiveaction'      => false,\n            'datatype'           => 'string',\n        ];\n\n        $tab[] = [\n            'id'                 => '32',\n            'table'              => $this->getTable(),\n            'field'              => 'timeout',\n            'name'               => __('Timeout'),\n            'massiveaction'      => false,\n            'datatype'           => 'number',\n            'unit'               => 'second',\n            'toadd'              => [\n                '0'                  => __('No timeout')\n            ],\n        ];\n\n        return $tab;\n    }\n\n    /**\n     * Show system information form\n     *\n     * @param integer $width The number of characters at which the string will be wrapped.\n     *\n     * @return void\n     */\n    public function showSystemInformations($width)\n    {\n\n       // No need to translate, this part always display in english (for copy/paste to forum)\n\n        $ldap_servers = self::getLdapServers();\n\n        if (!empty($ldap_servers)) {\n            echo \"<tr class='tab_bg_2'><th class='section-header'>\" . self::getTypeName(Session::getPluralNumber()) . \"</th></tr>\\n\";\n            echo \"<tr class='tab_bg_1'><td><pre class='section-content'>\\n&nbsp;\\n\";\n            foreach ($ldap_servers as $value) {\n                $fields = ['Server'            => 'host',\n                    'Port'              => 'port',\n                    'BaseDN'            => 'basedn',\n                    'Connection filter' => 'condition',\n                    'RootDN'            => 'rootdn',\n                    'Use TLS'           => 'use_tls'\n                ];\n                $msg   = '';\n                $first = true;\n                foreach ($fields as $label => $field) {\n                    $msg .= (!$first ? ', ' : '') .\n                        $label . ': ' .\n                        ($value[$field] ? '\\'' . $value[$field] . '\\'' : 'none');\n                    $first = false;\n                }\n                echo wordwrap($msg . \"\\n\", $width, \"\\n\\t\\t\");\n            }\n            echo \"\\n</pre></td></tr>\";\n        }\n    }\n\n\n    /**\n     * Get LDAP fields to sync to GLPI data from a glpi_authldaps array\n     *\n     * @param array $authtype_array Authentication method config array (from table)\n     *\n     * @return array of \"user table field name\" => \"config value\"\n     */\n    public static function getSyncFields(array $authtype_array)\n    {\n\n        $ret    = [];\n        $fields = ['login_field'               => 'name',\n            'email1_field'              => 'email1',\n            'email2_field'              => 'email2',\n            'email3_field'              => 'email3',\n            'email4_field'              => 'email4',\n            'realname_field'            => 'realname',\n            'firstname_field'           => 'firstname',\n            'phone_field'               => 'phone',\n            'phone2_field'              => 'phone2',\n            'mobile_field'              => 'mobile',\n            'location_field'            => 'locations_id',\n            'comment_field'             => 'comment',\n            'title_field'               => 'usertitles_id',\n            'category_field'            => 'usercategories_id',\n            'language_field'            => 'language',\n            'registration_number_field' => 'registration_number',\n            'picture_field'             => 'picture',\n            'responsible_field'         => 'users_id_supervisor',\n            'sync_field'                => 'sync_field'\n        ];\n\n        foreach ($fields as $key => $val) {\n            if (isset($authtype_array[$key]) && !empty($authtype_array[$key])) {\n                $ret[$val] = $authtype_array[$key];\n            }\n        }\n        return $ret;\n    }\n\n\n    /**\n     * Display LDAP filter\n     *\n     * @param string  $target target for the form\n     * @param boolean $users  for user? (true by default)\n     *\n     * @return void\n     */\n    public static function displayLdapFilter($target, $users = true)\n    {\n\n        $config_ldap = new self();\n        if (!isset($_SESSION['ldap_server'])) {\n            throw new \\RuntimeException('LDAP server must be set!');\n        }\n        $config_ldap->getFromDB($_SESSION['ldap_server']);\n\n        $filter_name1 = null;\n        $filter_name2 = null;\n        if ($users) {\n            $filter_name1 = \"condition\";\n            $filter_var   = \"ldap_filter\";\n        } else {\n            $filter_var = \"ldap_group_filter\";\n            switch ($config_ldap->fields[\"group_search_type\"]) {\n                case self::GROUP_SEARCH_USER:\n                    $filter_name1 = \"condition\";\n                    break;\n\n                case self::GROUP_SEARCH_GROUP:\n                    $filter_name1 = \"group_condition\";\n                    break;\n\n                case self::GROUP_SEARCH_BOTH:\n                    $filter_name1 = \"group_condition\";\n                    $filter_name2 = \"condition\";\n                    break;\n            }\n        }\n\n        if ($filter_name1 !== null && (!isset($_SESSION[$filter_var]) || $_SESSION[$filter_var] == '')) {\n            $_SESSION[$filter_var] = Sanitizer::unsanitize($config_ldap->fields[$filter_name1]);\n        }\n\n        echo \"<div class='card'>\";\n        echo \"<form method='post' action='$target'>\";\n        echo \"<table class='table card-table'>\";\n        echo \"<tr><td>\" . ($users ? __('Search filter for users')\n                                           : __('Filter to search in groups')) . \"</td>\";\n\n        echo \"<td>\";\n        echo \"<input type='text' name='ldap_filter' value='\" . htmlspecialchars($_SESSION[$filter_var], ENT_QUOTES) . \"' size='70'>\";\n       //Only display when looking for groups in users AND groups\n        if (\n            !$users\n            && ($config_ldap->fields[\"group_search_type\"] == self::GROUP_SEARCH_BOTH)\n        ) {\n            if ($filter_name2 !== null && (!isset($_SESSION[\"ldap_group_filter2\"]) || $_SESSION[\"ldap_group_filter2\"] == '')) {\n                $_SESSION[\"ldap_group_filter2\"] = Sanitizer::unsanitize($config_ldap->fields[$filter_name2]);\n            }\n            echo \"</td></tr>\";\n\n            echo \"<tr><td>\" . __('Search filter for users') . \"</td\";\n\n            echo \"<td>\";\n            echo \"<input type='text' name='ldap_filter2' value='\" . htmlspecialchars($_SESSION[\"ldap_group_filter2\"], ENT_QUOTES) . \"'\n                size='70'></td></tr>\";\n        }\n\n        echo \"<tr class='tab_bg_2'><td class='center' colspan='2'>\";\n        echo \"<input class=submit type='submit' name='change_ldap_filter' value=\\\"\" .\n            _sx('button', 'Search') . \"\\\"></td></tr>\";\n        echo \"</table>\";\n        Html::closeForm();\n        echo \"</div>\";\n    }\n\n\n    /**\n     * Converts LDAP timestamps over to Unix timestamps\n     *\n     * @param string  $ldapstamp        LDAP timestamp\n     * @param integer $ldap_time_offset time offset (default 0)\n     *\n     * @return integer unix timestamp\n     */\n    public static function ldapStamp2UnixStamp($ldapstamp, $ldap_time_offset = 0)\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n       //Check if timestamp is well format, otherwise return ''\n        if (!preg_match(\"/[\\d]{14}(\\.[\\d]{0,4})*Z/\", $ldapstamp)) {\n            return '';\n        }\n\n        $year    = substr($ldapstamp, 0, 4);\n        $month   = substr($ldapstamp, 4, 2);\n        $day     = substr($ldapstamp, 6, 2);\n        $hour    = substr($ldapstamp, 8, 2);\n        $minute  = substr($ldapstamp, 10, 2);\n        $seconds = substr($ldapstamp, 12, 2);\n        $stamp   = gmmktime($hour, $minute, $seconds, $month, $day, $year);\n        $stamp  += $CFG_GLPI[\"time_offset\"] - $ldap_time_offset;\n\n        return $stamp;\n    }\n\n\n    /**\n     * Converts a Unix timestamp to an LDAP timestamps\n     *\n     * @param string $date datetime\n     *\n     * @return string ldap timestamp\n     */\n    public static function date2ldapTimeStamp($date)\n    {\n        return date(\"YmdHis\", strtotime($date)) . '.0Z';\n    }\n\n\n    /**\n     * Return the LDAP field to use for user synchronization\n     * It may be sync_field if defined, or login_field\n     * @since 9.2\n     *\n     * @return string the ldap field to use for user synchronization\n     */\n    public function getLdapIdentifierToUse()\n    {\n        if (!empty($this->fields['sync_field'])) {\n            return $this->fields['sync_field'];\n        } else {\n            return $this->fields['login_field'];\n        }\n    }\n\n    /**\n     * Return the database field to use for user synchronization\n     * @since 9.2\n     *\n     * @return string the database field to use for user synchronization\n     */\n    public function getDatabaseIdentifierToUse()\n    {\n        if (!empty($this->fields['sync_field'])) {\n            return 'sync_field';\n        } else {\n            return 'name';\n        }\n    }\n\n    /**\n     * Indicates if there's a sync_field enabled in the LDAP configuration\n     * @since 9.2\n     *\n     * @return boolean true if the sync_field is enabled (the field is filled)\n     */\n    public function isSyncFieldEnabled()\n    {\n        return (!empty($this->fields['sync_field']));\n    }\n\n    /**\n     * Check if the sync_field is configured for an LDAP server\n     *\n     * @since 9.2\n     * @param integer authldaps_id the LDAP server ID\n     * @return boolean true if configured, false if not configured\n     */\n    public static function isSyncFieldConfigured($authldaps_id)\n    {\n        $authldap = new self();\n        $authldap->getFromDB($authldaps_id);\n        return ($authldap->isSyncFieldEnabled());\n    }\n\n    /**\n     * Test a LDAP connection\n     *\n     * @param integer $auths_id     ID of the LDAP server\n     * @param integer $replicate_id use a replicate if > 0 (default -1)\n     *\n     * @return boolean connection succeeded?\n     */\n    public static function testLDAPConnection($auths_id, $replicate_id = -1)\n    {\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($auths_id);\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n       //Test connection to a replicate\n        if ($replicate_id != -1) {\n            $replicate = new AuthLdapReplicate();\n            $replicate->getFromDB($replicate_id);\n            $host = $replicate->fields[\"host\"];\n            $port = $replicate->fields[\"port\"];\n        } else {\n           //Test connection to a master ldap server\n            $host = $config_ldap->fields['host'];\n            $port = $config_ldap->fields['port'];\n        }\n        $ds = self::connectToServer(\n            $host,\n            $port,\n            $config_ldap->fields['rootdn'],\n            (new GLPIKey())->decrypt($config_ldap->fields['rootdn_passwd']),\n            $config_ldap->fields['use_tls'],\n            $config_ldap->fields['deref_option'],\n            $config_ldap->fields['tls_certfile'],\n            $config_ldap->fields['tls_keyfile'],\n            $config_ldap->fields['use_bind'],\n            $config_ldap->fields['timeout']\n        );\n        if ($ds) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * Display a warnign about size limit\n     *\n     * @since 0.84\n     *\n     * @param boolean $limitexceeded (false by default)\n     *\n     * @return void\n     */\n    public static function displaySizeLimitWarning($limitexceeded = false)\n    {\n        /** @var array $CFG_GLPI */\n        global $CFG_GLPI;\n\n        if ($limitexceeded) {\n            echo \"<div class='firstbloc'><table class='tab_cadre_fixe'>\";\n            echo \"<tr><th class='red'>\";\n            echo \"<img class='center' src='\" . $CFG_GLPI[\"root_doc\"] . \"/pics/warning.png'\n                alt='\" . __('Warning') . \"'>&nbsp;\" .\n             __('Warning: The request exceeds the limit of the directory. The results are only partial.');\n            echo \"</th></tr></table><div>\";\n        }\n    }\n\n\n    /**\n     * Show LDAP users to add or synchronise\n     *\n     * @return void\n     */\n    public static function showLdapUsers()\n    {\n\n        $values = [\n            'order' => 'DESC',\n            'start' => 0,\n        ];\n\n        foreach ($_SESSION['ldap_import'] as $option => $value) {\n            $values[$option] = $value;\n        }\n\n        $rand          = mt_rand();\n        $results       = [];\n        $limitexceeded = false;\n        $ldap_users    = self::getUsers($values, $results, $limitexceeded);\n\n        $config_ldap   = new AuthLDAP();\n        $config_ldap->getFromDB($values['authldaps_id']);\n\n        if (is_array($ldap_users)) {\n            $numrows = count($ldap_users);\n\n            if ($numrows > 0) {\n                echo \"<div class='card'>\";\n                self::displaySizeLimitWarning($limitexceeded);\n\n                Html::printPager($values['start'], $numrows, $_SERVER['PHP_SELF'], '');\n\n               // delete end\n                array_splice($ldap_users, $values['start'] + $_SESSION['glpilist_limit']);\n               // delete begin\n                if ($values['start'] > 0) {\n                    array_splice($ldap_users, 0, $values['start']);\n                }\n\n                $form_action = '';\n                $textbutton  = '';\n                if ($_SESSION['ldap_import']['mode']) {\n                    $textbutton  = _x('button', 'Synchronize');\n                    $form_action = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'sync';\n                } else {\n                    $textbutton  = _x('button', 'Import');\n                    $form_action = __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import';\n                }\n\n                Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n                $massiveactionparams = [\n                    'num_displayed'    => min(count($ldap_users), $_SESSION['glpilist_limit']),\n                    'container'        => 'mass' . __CLASS__ . $rand,\n                    'specific_actions' => [$form_action => $textbutton]\n                ];\n                echo \"<div class='ms-2 ps-1 d-flex mb-2'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                echo \"<table class='table card-table'>\";\n                echo \"<thead>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                echo Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n                echo \"</th>\";\n                $num = 0;\n                if ($config_ldap->isSyncFieldEnabled()) {\n                    echo Search::showHeaderItem(\n                        Search::HTML_OUTPUT,\n                        __('Synchronization field'),\n                        $num,\n                        $_SERVER['PHP_SELF'] .\n                        \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                    );\n                }\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    User::getTypeName(Session::getPluralNumber()),\n                    $num,\n                    $_SERVER['PHP_SELF'] .\n                    \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                );\n                echo \"<th>\" . __('Last update in the LDAP directory') . \"</th>\";\n                if ($_SESSION['ldap_import']['mode']) {\n                     echo \"<th>\" . __('Last update in GLPI') . \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</thead>\";\n\n                foreach ($ldap_users as $userinfos) {\n                    echo \"<tr>\";\n                    //Need to use \" instead of ' because it doesn't work with names with ' inside !\n                    echo \"<td>\";\n                    echo Html::getMassiveActionCheckBox(__CLASS__, $userinfos['uid']);\n                    echo \"</td>\";\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                        echo \"<td>\" . $userinfos['uid'] . \"</td>\";\n                    }\n                    echo \"<td>\";\n                    if (isset($userinfos['id']) && User::canView()) {\n                        echo \"<a href='\" . $userinfos['link'] . \"'>\" . $userinfos['name'] . \"</a>\";\n                    } else {\n                        echo $userinfos['link'];\n                    }\n                    echo \"</td>\";\n\n                    if ($userinfos['stamp'] != '') {\n                         echo \"<td>\" . Html::convDateTime(date(\"Y-m-d H:i:s\", $userinfos['stamp'])) . \"</td>\";\n                    } else {\n                        echo \"<td>&nbsp;</td>\";\n                    }\n                    if ($_SESSION['ldap_import']['mode']) {\n                        if ($userinfos['date_sync'] != '') {\n                            echo \"<td>\" . Html::convDateTime($userinfos['date_sync']) . \"</td>\";\n                        }\n                    }\n                    echo \"</tr>\";\n                }\n                echo \"<tfoot>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                echo Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n                echo \"</th>\";\n                $num = 0;\n\n                if ($config_ldap->isSyncFieldEnabled()) {\n                    echo Search::showHeaderItem(\n                        Search::HTML_OUTPUT,\n                        __('Synchronization field'),\n                        $num,\n                        $_SERVER['PHP_SELF'] .\n                        \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                    );\n                }\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    User::getTypeName(Session::getPluralNumber()),\n                    $num,\n                    $_SERVER['PHP_SELF'] .\n                    \"?order=\" . ($values['order'] == \"DESC\" ? \"ASC\" : \"DESC\")\n                );\n                echo \"<th>\" . __('Last update in the LDAP directory') . \"</th>\";\n                if ($_SESSION['ldap_import']['mode']) {\n                     echo \"<th>\" . __('Last update in GLPI') . \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</tfoot>\";\n                echo \"</table>\";\n\n                $massiveactionparams['ontop'] = false;\n                echo \"<div class='ms-2 ps-1 mt-2 d-flex'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                Html::closeForm();\n\n                Html::printPager($values['start'], $numrows, $_SERVER['PHP_SELF'], '');\n\n                echo \"</div>\";\n            } else {\n                echo \"<div class='center b'>\" .\n                  ($_SESSION['ldap_import']['mode'] ? __('No user to be synchronized')\n                                                   : __('No user to be imported')) . \"</div>\";\n            }\n        } else {\n            echo \"<div class='center b'>\" .\n               ($_SESSION['ldap_import']['mode'] ? __('No user to be synchronized')\n                                                : __('No user to be imported')) . \"</div>\";\n        }\n    }\n\n    /**\n     * Search users\n     *\n     * @param resource $ds            An LDAP link identifier\n     * @param array    $values        values to search\n     * @param string   $filter        search filter\n     * @param array    $attrs         An array of the required attributes\n     * @param boolean  $limitexceeded is limit exceeded\n     * @param array    $user_infos    user information\n     * @param array    $ldap_users    ldap users\n     * @param object   $config_ldap   ldap configuration\n     *\n     * @return boolean\n     */\n    public static function searchForUsers(\n        $ds,\n        $values,\n        $filter,\n        $attrs,\n        &$limitexceeded,\n        &$user_infos,\n        &$ldap_users,\n        $config_ldap\n    ) {\n\n       //If paged results cannot be used (PHP < 5.4)\n        $cookie   = ''; //Cookie used to perform query using pages\n        $count    = 0;  //Store the number of results ldap_search\n\n        do {\n            $filter = Sanitizer::unsanitize($filter);\n            if (self::isLdapPageSizeAvailable($config_ldap)) {\n                $controls = [\n                    [\n                        'oid'       => LDAP_CONTROL_PAGEDRESULTS,\n                        'iscritical' => true,\n                        'value'     => [\n                            'size'   => $config_ldap->fields['pagesize'],\n                            'cookie' => $cookie\n                        ]\n                    ]\n                ];\n                $sr = @ldap_search($ds, $values['basedn'], $filter, $attrs, 0, -1, -1, LDAP_DEREF_NEVER, $controls);\n                if (\n                    $sr === false\n                    || @ldap_parse_result($ds, $sr, $errcode, $matcheddn, $errmsg, $referrals, $controls) === false\n                ) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ds) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ds,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return false;\n                }\n                if (isset($controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'])) {\n                    $cookie = $controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'];\n                } else {\n                    $cookie = '';\n                }\n            } else {\n                $sr = @ldap_search($ds, $values['basedn'], $filter, $attrs);\n                if ($sr === false) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ds) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ds,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return false;\n                }\n            }\n\n            if (in_array(ldap_errno($ds), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $info = self::get_entries_clean($ds, $sr);\n            if (in_array(ldap_errno($ds), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $count += $info['count'];\n           //If page results are enabled and the number of results is greater than the maximum allowed\n           //warn user that limit is exceeded and stop search\n            if (\n                self::isLdapPageSizeAvailable($config_ldap)\n                && $config_ldap->fields['ldap_maxlimit']\n                && ($count > $config_ldap->fields['ldap_maxlimit'])\n            ) {\n                $limitexceeded = true;\n                break;\n            }\n\n            $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n            $login_field = $config_ldap->fields['login_field'];\n\n            for ($ligne = 0; $ligne < $info[\"count\"]; $ligne++) {\n                if (in_array($field_for_sync, $info[$ligne])) {\n                    $uid = self::getFieldValue($info[$ligne], $field_for_sync);\n\n                    if ($login_field != $field_for_sync && !isset($info[$ligne][$login_field])) {\n                         trigger_error(\"Missing field $login_field for LDAP entry $field_for_sync $uid\", E_USER_WARNING);\n                         //Login field may be missing... Skip the user\n                         continue;\n                    }\n\n                    if (isset($info[$ligne]['modifytimestamp'])) {\n                        $user_infos[$uid][\"timestamp\"] = self::ldapStamp2UnixStamp(\n                            $info[$ligne]['modifytimestamp'][0],\n                            $config_ldap->fields['time_offset']\n                        );\n                    } else {\n                        $user_infos[$uid][\"timestamp\"] = '';\n                    }\n\n                    $user_infos[$uid][\"user_dn\"] = $info[$ligne]['dn'];\n                    $user_infos[$uid][$field_for_sync] = $uid;\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                          $user_infos[$uid][$login_field] = $info[$ligne][$login_field][0];\n                    }\n\n                    if ($values['mode'] == self::ACTION_IMPORT) {\n                         //If ldap add\n                         $ldap_users[$uid] = $uid;\n                    } else {\n                       //If ldap synchronisation\n                        if (isset($info[$ligne]['modifytimestamp'])) {\n                            $ldap_users[$uid] = self::ldapStamp2UnixStamp(\n                                $info[$ligne]['modifytimestamp'][0],\n                                $config_ldap->fields['time_offset']\n                            );\n                        } else {\n                            $ldap_users[$uid] = '';\n                        }\n                        $user_infos[$uid][\"name\"] = $info[$ligne][$login_field][0];\n                    }\n                }\n            }\n        } while (($cookie !== null) && ($cookie != ''));\n\n        return true;\n    }\n\n\n    /**\n     * Get the list of LDAP users to add/synchronize\n     *\n     * @param array   $options       possible options:\n     *          - authldaps_id ID of the server to use\n     *          - mode user to synchronize or add?\n     *          - ldap_filter ldap filter to use\n     *          - basedn force basedn (default authldaps_id one)\n     *          - order display order\n     *          - begin_date begin date to time limit\n     *          - end_date end date to time limit\n     *          - script true if called by an external script\n     * @param array   $results       result stats\n     * @param boolean $limitexceeded limit exceeded exception\n     *\n     * @return false|array\n     */\n    public static function getAllUsers(array $options, &$results, &$limitexceeded)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($options['authldaps_id']);\n\n        $values = [\n            'order'       => 'DESC',\n            'mode'        => self::ACTION_SYNCHRONIZE,\n            'ldap_filter' => '',\n            'basedn'      => $config_ldap->fields['basedn'],\n            'begin_date'  => null,\n            'end_date'    => date('Y-m-d H:i:s', time() - DAY_TIMESTAMP),\n            'script'      => 0, //Called by an external script or not\n        ];\n\n        foreach ($options as $option => $value) {\n           // this test break mode detection - if ($value != '') {\n            $values[$option] = $value;\n           //}\n        }\n\n        $ldap_users    = [];\n        $user_infos    = [];\n        $limitexceeded = false;\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n        if ($values['order'] != \"DESC\") {\n            $values['order'] = \"ASC\";\n        }\n        $ds = $config_ldap->connect();\n        $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n        $field_for_db   = $config_ldap->getDatabaseIdentifierToUse();\n        if ($ds) {\n           //Search for ldap login AND modifyTimestamp,\n           //which indicates the last update of the object in directory\n            $attrs = [$config_ldap->fields['login_field'], \"modifyTimestamp\"];\n            if ($field_for_sync != $config_ldap->fields['login_field']) {\n                $attrs[] = $field_for_sync;\n            }\n\n           // Try a search to find the DN\n            if ($values['ldap_filter'] == '') {\n                $filter = \"(\" . $field_for_sync . \"=*)\";\n                if (!empty($config_ldap->fields['condition'])) {\n                    $filter = \"(& $filter \" . Sanitizer::unsanitize($config_ldap->fields['condition']) . \")\";\n                }\n            } else {\n                $filter = $values['ldap_filter'];\n            }\n\n            if ($values['script'] && !empty($values['begin_date'])) {\n                $filter_timestamp = self::addTimestampRestrictions(\n                    $values['begin_date'],\n                    $values['end_date']\n                );\n                $filter           = \"(&$filter $filter_timestamp)\";\n            }\n            $result = self::searchForUsers(\n                $ds,\n                $values,\n                $filter,\n                $attrs,\n                $limitexceeded,\n                $user_infos,\n                $ldap_users,\n                $config_ldap\n            );\n            if (!$result) {\n                return false;\n            }\n        } else {\n            return false;\n        }\n\n        $glpi_users = [];\n\n        $select = [\n            'FROM'   => User::getTable(),\n            'ORDER'  => ['name ' . $values['order']]\n        ];\n\n        if ($values['mode'] != self::ACTION_IMPORT) {\n            $select['WHERE'] = [\n                'authtype'  => [-1, Auth::NOT_YET_AUTHENTIFIED, Auth::LDAP, Auth::EXTERNAL, Auth::CAS],\n                'auths_id'  => $options['authldaps_id']\n            ];\n        }\n\n        $iterator = $DB->request($select);\n\n        foreach ($iterator as $user) {\n            $tmpuser = new User();\n\n           //Ldap add : fill the array with the login of the user\n            if ($values['mode'] == self::ACTION_IMPORT) {\n                $glpi_users[$user['name']] = $user['name'];\n            } else {\n               //Ldap synchronisation : look if the user exists in the directory\n               //and compares the modifications dates (ldap and glpi db)\n                $userfound = self::dnExistsInLdap($user_infos, $user['user_dn']);\n                if (!empty($ldap_users[$user[$field_for_db]]) || $userfound) {\n                   // userfound seems that user dn is present in GLPI DB but do not correspond to an GLPI user\n                   // -> renaming case\n                    if ($userfound) {\n                        //Get user in DB with this dn\n                        if (!$tmpuser->getFromDBByDn(Sanitizer::sanitize($user['user_dn']))) {\n                          //This should never happened\n                          //If a user_dn is present more than one time in database\n                          //Just skip user synchronization to avoid errors\n                            continue;\n                        }\n                        $glpi_users[] = ['id'         => $user['id'],\n                            'user'       => $userfound['name'],\n                            $field_for_sync => (isset($userfound[$config_ldap->fields['sync_field']]) ? $userfound[$config_ldap->fields['sync_field']] : 'NULL'),\n                            'timestamp'  => $user_infos[$userfound[$field_for_sync]]['timestamp'],\n                            'date_sync'  => $tmpuser->fields['date_sync'],\n                            'dn'         => $user['user_dn']\n                        ];\n                    } else if (\n                        ($values['mode'] == self::ACTION_ALL)\n                          || (($ldap_users[$user[$field_for_db]] - strtotime($user['date_sync'])) > 0)\n                    ) {\n                       //If entry was modified or if script should synchronize all the users\n                        $glpi_users[] = ['id'         => $user['id'],\n                            'user'       => $user['name'],\n                            $field_for_sync => $user['sync_field'],\n                            'timestamp'  => $user_infos[$user[$field_for_db]]['timestamp'],\n                            'date_sync'  => $user['date_sync'],\n                            'dn'         => $user['user_dn']\n                        ];\n                    }\n                } else if (\n                    ($values['mode'] == self::ACTION_ALL)\n                        && !$limitexceeded\n                ) {\n                   // Only manage deleted user if ALL (because of entity visibility in delegated mode)\n\n                    if ($user['auths_id'] == $options['authldaps_id']) {\n                        if (!$userfound && $user['is_deleted_ldap'] == 0) {\n                             //If user is marked as coming from LDAP, but is not present in it anymore\n                             User::manageDeletedUserInLdap($user['id']);\n                             $results[self::USER_DELETED_LDAP]++;\n                        } elseif ($userfound && $user['is_deleted_ldap'] == 1) {\n                           // User is marked as coming from LDAP, but was previously deleted\n                            User::manageRestoredUserInLdap($user['id']);\n                            $results[self::USER_RESTORED_LDAP]++;\n                        }\n                    }\n                }\n            }\n        }\n\n       //If add, do the difference between ldap users and glpi users\n        if ($values['mode'] == self::ACTION_IMPORT) {\n            $diff    = array_diff_ukey($ldap_users, $glpi_users, 'strcasecmp');\n            $list    = [];\n            $tmpuser = new User();\n\n            foreach ($diff as $user) {\n               //If user dn exists in DB, it means that user login field has changed\n                if (!$tmpuser->getFromDBByDn(Sanitizer::sanitize($user_infos[$user][\"user_dn\"]))) {\n                    $entry  = [\"user\"      => $user_infos[$user][$config_ldap->fields['login_field']],\n                        \"timestamp\" => $user_infos[$user][\"timestamp\"],\n                        \"date_sync\" => Dropdown::EMPTY_VALUE\n                    ];\n                    if ($config_ldap->isSyncFieldEnabled()) {\n                        $entry[$field_for_sync] = $user_infos[$user][$field_for_sync];\n                    }\n                    $list[] = $entry;\n                }\n            }\n            if ($values['order'] == 'DESC') {\n                rsort($list);\n            } else {\n                sort($list);\n            }\n\n            return $list;\n        }\n        return $glpi_users;\n    }\n\n\n    /**\n     * Check if a user DN exists in a ldap user search result\n     *\n     * @since 0.84\n     *\n     * @param array  $ldap_infos ldap user search result\n     * @param string $user_dn    user dn to look for\n     *\n     * @return false|array false if the user dn doesn't exist, user ldap infos otherwise\n     */\n    public static function dnExistsInLdap($ldap_infos, $user_dn)\n    {\n\n        $found = false;\n        foreach ($ldap_infos as $ldap_info) {\n            if ($ldap_info['user_dn'] == $user_dn) {\n                $found = $ldap_info;\n                break;\n            }\n        }\n        return $found;\n    }\n\n\n    /**\n     * Show LDAP groups to add or synchronize in an entity\n     *\n     * @param string  $target  target page for the form\n     * @param integer $start   where to start the list\n     * @param integer $sync    synchronize or add? (default 0)\n     * @param string  $filter  ldap filter to use (default '')\n     * @param string  $filter2 second ldap filter to use (which case?) (default '')\n     * @param integer $entity  working entity\n     * @param string  $order   display order (default DESC)\n     *\n     * @return void\n     */\n    public static function showLdapGroups(\n        $target,\n        $start,\n        $sync = 0,\n        $filter = '',\n        $filter2 = '',\n        $entity = 0,\n        $order = 'DESC'\n    ) {\n\n        echo \"<br>\";\n        $limitexceeded = false;\n        $ldap_groups   = self::getAllGroups(\n            $_SESSION[\"ldap_server\"],\n            $filter,\n            $filter2,\n            $entity,\n            $limitexceeded,\n            $order\n        );\n\n        if (is_array($ldap_groups)) {\n            $numrows     = count($ldap_groups);\n            $rand        = mt_rand();\n            if ($numrows > 0) {\n                echo \"<div class='card'>\";\n                self::displaySizeLimitWarning($limitexceeded);\n                $parameters = '';\n                Html::printPager($start, $numrows, $target, $parameters);\n\n                // delete end\n                array_splice($ldap_groups, $start + $_SESSION['glpilist_limit']);\n                // delete begin\n                if ($start > 0) {\n                    array_splice($ldap_groups, 0, $start);\n                }\n\n                Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n                $massiveactionparams  = [\n                    'num_displayed' => min($_SESSION['glpilist_limit'], count($ldap_groups)),\n                    'container' => 'mass' . __CLASS__ . $rand,\n                    'specific_actions' => [\n                        __CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import_group'\n                                       => _sx('button', 'Import')\n                    ],\n                    'extraparams' => [\n                        'massive_action_fields' => [\n                            'dn',\n                            'ldap_import_type',\n                            'ldap_import_entities',\n                            'ldap_import_recursive'\n                        ]\n                    ]\n                ];\n                echo \"<div class='ms-2 ps-1 d-flex mb-2'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                echo \"<table class='table table-sm card-table'>\";\n                echo \"<thead>\";\n                echo \"<tr>\";\n                echo \"<th width='10'>\";\n                Html::showCheckbox(['criterion' => ['tag_for_massive' => 'select_item']]);\n                echo \"</th>\";\n                $header_num = 0;\n                echo Search::showHeaderItem(\n                    Search::HTML_OUTPUT,\n                    Group::getTypeName(1),\n                    $header_num,\n                    $target . \"?order=\" . ($order == \"DESC\" ? \"ASC\" : \"DESC\"),\n                    1,\n                    $order\n                );\n                echo \"<th>\" . __('Group DN') . \"</th>\";\n                echo \"<th>\" . __('Destination entity') . \"</th>\";\n                if (Session::isMultiEntitiesMode()) {\n                     echo\"<th>\";\n                     Html::showCheckbox(['criterion' => ['tag_for_massive' => 'select_item_child_entities']]);\n                     echo \"&nbsp;\" . __('Child entities');\n                     echo \"</th>\";\n                }\n                echo \"</tr>\";\n                echo \"</thead>\";\n\n                $dn_index = 0;\n                foreach ($ldap_groups as $groupinfos) {\n                    $group       = $groupinfos[\"cn\"];\n                    $group_dn    = $groupinfos[\"dn\"];\n                    $search_type = $groupinfos[\"search_type\"];\n\n                    echo \"<tr>\";\n                    echo \"<td>\";\n                    echo Html::hidden(\"dn[$dn_index]\", ['value'                 => $group_dn,\n                        'data-glpicore-ma-tags' => 'common'\n                    ]);\n                    echo Html::hidden(\"ldap_import_type[$dn_index]\", ['value'                 => $search_type,\n                        'data-glpicore-ma-tags' => 'common'\n                    ]);\n                    Html::showMassiveActionCheckBox(\n                        __CLASS__,\n                        $dn_index,\n                        ['massive_tags' => 'select_item']\n                    );\n                    echo \"</td>\";\n                    echo \"<td>\" . $group . \"</td>\";\n                    echo \"<td>\" . $group_dn . \"</td>\";\n                    echo \"<td>\";\n                    Entity::dropdown(['value'         => $entity,\n                        'name'          => \"ldap_import_entities[$dn_index]\",\n                        'specific_tags' => ['data-glpicore-ma-tags' => 'common']\n                    ]);\n                    echo \"</td>\";\n                    if (Session::isMultiEntitiesMode()) {\n                          echo \"<td>\";\n                          Html::showMassiveActionCheckBox(\n                              __CLASS__,\n                              $dn_index,\n                              ['massive_tags'  => 'select_item_child_entities',\n                                  'name'          => \"ldap_import_recursive[$dn_index]\",\n                                  'specific_tags' => ['data-glpicore-ma-tags' => 'common']\n                              ]\n                          );\n                            echo \"</td>\";\n                    } else {\n                        echo Html::hidden(\"ldap_import_recursive[$dn_index]\", ['value'                 => 0,\n                            'data-glpicore-ma-tags' => 'common'\n                        ]);\n                    }\n                    echo \"</tr>\";\n                    $dn_index++;\n                }\n                echo \"</table>\";\n\n                $massiveactionparams['ontop'] = false;\n                echo \"<div class='ms-2 ps-1 mt-2 d-flex'>\";\n                Html::showMassiveActions($massiveactionparams);\n                echo \"</div>\";\n\n                Html::closeForm();\n                Html::printPager($start, $numrows, $target, $parameters);\n                echo \"</div>\";\n            } else {\n                echo \"<div class='center b'>\" . __('No group to be imported') . \"</div>\";\n            }\n        } else {\n            echo \"<div class='center b'>\" . __('No group to be imported') . \"</div>\";\n        }\n    }\n\n\n    /**\n     * Get all LDAP groups from a ldap server which are not already in an entity\n     *\n     * @since 0.84 new parameter $limitexceeded\n     *\n     * @param integer $auths_id      ID of the server to use\n     * @param string  $filter        ldap filter to use\n     * @param string  $filter2       second ldap filter to use if needed\n     * @param string  $entity        entity to search\n     * @param boolean $limitexceeded is limit exceeded\n     * @param string  $order         order to use (default DESC)\n     *\n     * @return array of the groups\n     */\n    public static function getAllGroups(\n        $auths_id,\n        $filter,\n        $filter2,\n        $entity,\n        &$limitexceeded,\n        $order = 'DESC'\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $config_ldap = new self();\n        $config_ldap->getFromDB($auths_id);\n        $infos       = [];\n        $groups      = [];\n\n        $ds = $config_ldap->connect();\n        if ($ds) {\n            switch ($config_ldap->fields[\"group_search_type\"]) {\n                case self::GROUP_SEARCH_USER:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        false,\n                        $infos\n                    );\n                    break;\n\n                case self::GROUP_SEARCH_GROUP:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        true,\n                        $infos\n                    );\n                    break;\n\n                case self::GROUP_SEARCH_BOTH:\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter,\n                        $limitexceeded,\n                        true,\n                        $infos\n                    );\n                    $infos = self::getGroupsFromLDAP(\n                        $ds,\n                        $config_ldap,\n                        $filter2,\n                        $limitexceeded,\n                        false,\n                        $infos\n                    );\n                    break;\n            }\n            if (!empty($infos)) {\n                $glpi_groups = [];\n\n               //Get all groups from GLPI DB for the current entity and the subentities\n                $iterator = $DB->request([\n                    'SELECT' => ['ldap_group_dn','ldap_value'],\n                    'FROM'   => 'glpi_groups',\n                    'WHERE'  => getEntitiesRestrictCriteria('glpi_groups')\n                ]);\n\n               //If the group exists in DB -> unset it from the LDAP groups\n                foreach ($iterator as $group) {\n                      //use DN for next step\n                      //depending on the type of search when groups are imported\n                      //the DN may be in two separate fields\n                    if (isset($group[\"ldap_group_dn\"]) && !empty($group[\"ldap_group_dn\"])) {\n                        $glpi_groups[$group[\"ldap_group_dn\"]] = 1;\n                    } else if (isset($group[\"ldap_value\"]) && !empty($group[\"ldap_value\"])) {\n                        $glpi_groups[$group[\"ldap_value\"]] = 1;\n                    }\n                }\n                $ligne = 0;\n\n                foreach ($infos as $dn => $info) {\n                    //reconcile by DN\n                    if (!isset($glpi_groups[$dn])) {\n                        $groups[$ligne][\"dn\"]          = $dn;\n                        $groups[$ligne][\"cn\"]          = $info[\"cn\"];\n                        $groups[$ligne][\"search_type\"] = $info[\"search_type\"];\n                        $ligne++;\n                    }\n                }\n            }\n\n            usort(\n                $groups,\n                function ($a, $b) use ($order) {\n                    return $order == 'DESC' ? strcasecmp($b['cn'], $a['cn']) : strcasecmp($a['cn'], $b['cn']);\n                }\n            );\n        }\n        return $groups;\n    }\n\n\n    /**\n     * Get the group's cn by giving his DN\n     *\n     * @param resource $ldap_connection ldap connection to use\n     * @param string   $group_dn        the group's dn\n     *\n     * @return false|string the group cn\n     */\n    public static function getGroupCNByDn($ldap_connection, $group_dn)\n    {\n\n        $sr = @ldap_read($ldap_connection, $group_dn, \"objectClass=*\", [\"cn\"]);\n        if ($sr === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ldap_connection) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ldap_connection,\n                        sprintf(\n                            'Unable to get LDAP group having DN `%s`',\n                            $group_dn\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n        $v  = self::get_entries_clean($ldap_connection, $sr);\n        if (!is_array($v) || (count($v) == 0) || empty($v[0][\"cn\"][0])) {\n            return false;\n        }\n        return $v[0][\"cn\"][0];\n    }\n\n\n    /**\n     * Set groups from ldap\n     *\n     * @since 0.84 new parameter $limitexceeded\n     *\n     * @param resource $ldap_connection  LDAP connection\n     * @param object   $config_ldap      LDAP configuration\n     * @param string   $filter           Filters\n     * @param boolean  $limitexceeded    Is limit exceeded\n     * @param boolean  $search_in_groups Search in groups (true by default)\n     * @param array    $groups           Groups to search\n     *\n     * @return array\n     */\n    public static function getGroupsFromLDAP(\n        $ldap_connection,\n        $config_ldap,\n        $filter,\n        &$limitexceeded,\n        $search_in_groups = true,\n        $groups = []\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n       //First look for groups in group objects\n        $extra_attribute = ($search_in_groups ? \"cn\" : $config_ldap->fields[\"group_field\"]);\n        $attrs           = [\"dn\", $extra_attribute];\n\n        if ($filter == '') {\n            if ($search_in_groups) {\n                $filter = (!empty($config_ldap->fields['group_condition'])\n                       ? Sanitizer::unsanitize($config_ldap->fields['group_condition']) : \"(objectclass=*)\");\n            } else {\n                $filter = (!empty($config_ldap->fields['condition'])\n                       ? Sanitizer::unsanitize($config_ldap->fields['condition']) : \"(objectclass=*)\");\n            }\n        }\n        $cookie = '';\n        $count  = 0;\n        do {\n            $filter = Sanitizer::unsanitize($filter);\n            if (self::isLdapPageSizeAvailable($config_ldap)) {\n                $controls = [\n                    [\n                        'oid'       => LDAP_CONTROL_PAGEDRESULTS,\n                        'iscritical' => true,\n                        'value'     => [\n                            'size'   => $config_ldap->fields['pagesize'],\n                            'cookie' => $cookie\n                        ]\n                    ]\n                ];\n                $sr = @ldap_search($ldap_connection, $config_ldap->fields['basedn'], $filter, $attrs, 0, -1, -1, LDAP_DEREF_NEVER, $controls);\n                if (\n                    $sr === false\n                    || @ldap_parse_result($ldap_connection, $sr, $errcode, $matcheddn, $errmsg, $referrals, $controls) === false\n                ) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ldap_connection) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ldap_connection,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $config_ldap->fields['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return $groups;\n                }\n                if (isset($controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'])) {\n                    $cookie = $controls[LDAP_CONTROL_PAGEDRESULTS]['value']['cookie'];\n                } else {\n                    $cookie = '';\n                }\n            } else {\n                $sr = @ldap_search($ldap_connection, $config_ldap->fields['basedn'], $filter, $attrs);\n                if ($sr === false) {\n                    // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n                    if (ldap_errno($ldap_connection) !== 32) {\n                        trigger_error(\n                            static::buildError(\n                                $ldap_connection,\n                                sprintf('LDAP search with base DN `%s` and filter `%s` failed', $config_ldap->fields['basedn'], $filter)\n                            ),\n                            E_USER_WARNING\n                        );\n                    }\n                    return $groups;\n                }\n            }\n\n            if (in_array(ldap_errno($ldap_connection), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $infos  = self::get_entries_clean($ldap_connection, $sr);\n            if (in_array(ldap_errno($ldap_connection), [4,11])) {\n               // openldap return 4 for Size limit exceeded\n                $limitexceeded = true;\n            }\n\n            $count += $infos['count'];\n           //If page results are enabled and the number of results is greater than the maximum allowed\n           //warn user that limit is exceeded and stop search\n            if (\n                self::isLdapPageSizeAvailable($config_ldap)\n                && $config_ldap->fields['ldap_maxlimit']\n                && ($count > $config_ldap->fields['ldap_maxlimit'])\n            ) {\n                $limitexceeded = true;\n                break;\n            }\n\n            for ($ligne = 0; $ligne < $infos[\"count\"]; $ligne++) {\n                if ($search_in_groups) {\n                   // No cn : not a real object\n                    if (isset($infos[$ligne][\"cn\"][0])) {\n                         $groups[$infos[$ligne][\"dn\"]] = ([\"cn\" => $infos[$ligne][\"cn\"][0],\n                             \"search_type\" => \"groups\"\n                         ]);\n                    }\n                } else {\n                    if (isset($infos[$ligne][$extra_attribute])) {\n                        if (\n                            ($config_ldap->fields[\"group_field\"] == 'dn')\n                            || in_array('ou', $groups)\n                        ) {\n                            $dn = $infos[$ligne][$extra_attribute];\n                            $ou = [];\n                            for ($tmp = $dn; count($tmptab = explode(',', $tmp, 2)) == 2; $tmp = $tmptab[1]) {\n                                $ou[] = $tmptab[1];\n                            }\n\n                           /// Search in DB for group with ldap_group_dn\n                            if (\n                                ($config_ldap->fields[\"group_field\"] == 'dn')\n                                && (count($ou) > 0)\n                            ) {\n                                $iterator = $DB->request([\n                                    'SELECT' => ['ldap_value'],\n                                    'FROM'   => 'glpi_groups',\n                                    'WHERE'  => [\n                                        'ldap_group_dn' => Sanitizer::sanitize($ou)\n                                    ]\n                                ]);\n\n                                foreach ($iterator as $group) {\n                                     $groups[$group['ldap_value']] = [\"cn\"          => $group['ldap_value'],\n                                         \"search_type\" => \"users\"\n                                     ];\n                                }\n                            }\n                        } else {\n                            for (\n                                $ligne_extra = 0; $ligne_extra < $infos[$ligne][$extra_attribute][\"count\"];\n                                $ligne_extra++\n                            ) {\n                                $groups[$infos[$ligne][$extra_attribute][$ligne_extra]]\n                                = [\"cn\"   => self::getGroupCNByDn(\n                                    $ldap_connection,\n                                    $infos[$ligne][$extra_attribute][$ligne_extra]\n                                ),\n                                    \"search_type\"\n                                         => \"users\"\n                                ];\n                            }\n                        }\n                    }\n                }\n            }\n        } while (($cookie !== null) && ($cookie != ''));\n\n        return $groups;\n    }\n\n\n    /**\n     * Form to choose a ldap server\n     *\n     * @param string $target target page for the form\n     *\n     * @return void\n     */\n    public static function ldapChooseDirectory($target)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $iterator = $DB->request([\n            'FROM'   => self::getTable(),\n            'WHERE'  => [\n                'is_active' => 1\n            ],\n            'ORDER'  => 'name ASC'\n        ]);\n\n        if (count($iterator) == 1) {\n           //If only one server, do not show the choose ldap server window\n            $ldap                    = $iterator->current();\n            $_SESSION[\"ldap_server\"] = $ldap[\"id\"];\n            Html::redirect($_SERVER['PHP_SELF']);\n        }\n\n        echo TemplateRenderer::getInstance()->render('pages/admin/ldap.choose_directory.html.twig', [\n            'target'          => $target,\n            'nb_ldap_servers' => count($iterator),\n        ]);\n    }\n\n    /**\n     * Force synchronization for one user\n     *\n     * @param User    $user              User to synchronize\n     * @param boolean $clean_ldap_fields empty user_dn and sync_field before import user again\n     * @param boolean $display           Display message information on redirect (true by default)\n     *\n     * @return array|boolean  with state, else false\n     */\n    public static function forceOneUserSynchronization(User $user, $clean_ldap_fields = false, $display = true)\n    {\n        $authldap = new AuthLDAP();\n\n       //Get the LDAP server from which the user has been imported\n        if ($authldap->getFromDB($user->fields['auths_id'])) {\n           // clean ldap fields if asked by admin\n            if ($clean_ldap_fields) {\n                $user->update([\n                    'id'         => $user->fields['id'],\n                    'user_dn'    => '',\n                    'sync_field' => '',\n                ]);\n            }\n\n            $user_field = 'name';\n            $id_field = $authldap->fields['login_field'];\n            if ($authldap->isSyncFieldEnabled() && !empty($user->fields['sync_field'])) {\n                $user_field = 'sync_field';\n                $id_field   = $authldap->fields['sync_field'];\n            }\n            return AuthLDAP::ldapImportUserByServerId(\n                [\n                    'method'             => self::IDENTIFIER_LOGIN,\n                    'value'              => $user->fields[$user_field],\n                    'identifier_field'   => $id_field,\n                    'user_field'         => $user_field\n                ],\n                true,\n                $user->fields[\"auths_id\"],\n                $display\n            );\n        }\n        return false;\n    }\n\n    /**\n     * Import a user from a specific ldap server\n     *\n     * @param array   $params      of parameters: method (IDENTIFIER_LOGIN or IDENTIFIER_EMAIL) + value\n     * @param boolean $action      synchoronize (true) or import (false)\n     * @param integer $ldap_server ID of the LDAP server to use\n     * @param boolean $display     display message information on redirect (false by default)\n     *\n     * @return array|boolean  with state, else false\n     */\n    public static function ldapImportUserByServerId(\n        array $params,\n        $action,\n        $ldap_server,\n        $display = false\n    ) {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $params      = Sanitizer::unsanitize($params);\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($ldap_server);\n        $input = [];\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n        if (!isset($params['identifier_field'])) {\n            $params['identifier_field'] = $config_ldap->getLdapIdentifierToUse();\n        }\n        if (!isset($params['user_field'])) {\n            $params['user_field'] = $config_ldap->getDatabaseIdentifierToUse();\n        }\n\n        $search_parameters = [];\n       //Connect to the directory\n        if (isset(self::$conn_cache[$ldap_server])) {\n            $ds = self::$conn_cache[$ldap_server];\n        } else {\n            $ds = $config_ldap->connect();\n        }\n        if ($ds) {\n            self::$conn_cache[$ldap_server] = $ds;\n            $search_parameters['method']                         = $params['method'];\n            $search_parameters['fields'][self::IDENTIFIER_LOGIN] = $params['identifier_field'];\n\n            if ($params['method'] == self::IDENTIFIER_EMAIL) {\n                $search_parameters['fields'][self::IDENTIFIER_EMAIL]\n                                       = $config_ldap->fields['email1_field'];\n            }\n\n           //Get the user's dn & login\n            $attribs = ['basedn'            => $config_ldap->fields['basedn'],\n                'login_field'       => $search_parameters['fields'][$search_parameters['method']],\n                'search_parameters' => $search_parameters,\n                'user_params'       => $params,\n                'condition'         => Sanitizer::unsanitize($config_ldap->fields['condition'])\n            ];\n\n            try {\n                $infos = self::searchUserDn($ds, $attribs);\n\n                if ($infos && $infos['dn']) {\n                    $user_dn = $infos['dn'];\n                    $user    = new User();\n\n                    $login   = self::getFieldValue($infos, $search_parameters['fields'][$search_parameters['method']]);\n\n                   //Get information from LDAP\n                    if (\n                        $user->getFromLDAP(\n                            $ds,\n                            $config_ldap->fields,\n                            $user_dn,\n                            Sanitizer::sanitize($login),\n                            ($action == self::ACTION_IMPORT)\n                        )\n                    ) {\n                        //Get the ID by sync field (Used to check if restoration is needed)\n                        $searched_user = new User();\n                        $user_found = false;\n                        if ($login === null || !($user_found = $searched_user->getFromDBbySyncField(Sanitizer::sanitize($login)))) {\n                         //In case user id has changed : get id by dn (Used to check if restoration is needed)\n                            $user_found = $searched_user->getFromDBbyDn(Sanitizer::sanitize($user_dn));\n                        }\n                        if ($user_found && $searched_user->fields['is_deleted_ldap'] && $searched_user->fields['user_dn']) {\n                            User::manageRestoredUserInLdap($searched_user->fields['id']);\n                            return ['action' => self::USER_RESTORED_LDAP,\n                                'id' => $searched_user->fields['id']\n                            ];\n                        }\n\n                      // Add the auth method\n                      // Force date sync\n                        $user->fields[\"date_sync\"] = $_SESSION[\"glpi_currenttime\"];\n                        $user->fields['is_deleted_ldap'] = 0;\n\n                      //Save information in database !\n                        $input = $user->fields;\n\n                      //clean picture from input\n                      // (picture managed in User::post_addItem and prepareInputForUpdate)\n                        unset($input['picture']);\n\n                        if ($action == self::ACTION_IMPORT) {\n                            $input[\"authtype\"] = Auth::LDAP;\n                            $input[\"auths_id\"] = $ldap_server;\n                            // Display message after redirect\n                            if ($display) {\n                                $input['add'] = 1;\n                            }\n\n                            $user->fields[\"id\"] = $user->add($input);\n                            return ['action' => self::USER_IMPORTED,\n                                'id'     => $user->fields[\"id\"]\n                            ];\n                        }\n                      //Get the ID by user name\n                        if (!($id = User::getIdByfield($params['user_field'], $login))) {\n                           //In case user id as changed : get id by dn\n                            $id = User::getIdByfield('user_dn', $user_dn);\n                        }\n                        $input['id'] = $id;\n\n                        if ($display) {\n                            $input['update'] = 1;\n                        }\n                        $user->update($input);\n                        return ['action' => self::USER_SYNCHRONIZED,\n                            'id'     => $input['id']\n                        ];\n                    }\n                    return false;\n                }\n                if ($action != self::ACTION_IMPORT) {\n                    $users_id = User::getIdByField($params['user_field'], $params['value']);\n                    User::manageDeletedUserInLdap($users_id);\n                    return ['action' => self::USER_DELETED_LDAP,\n                        'id'     => $users_id\n                    ];\n                }\n            } catch (\\RuntimeException $e) {\n                ErrorHandler::getInstance()->handleException($e);\n                return false;\n            }\n        }\n        return false;\n    }\n\n\n    /**\n     * Import grousp from an LDAP directory\n     *\n     * @param string $group_dn dn of the group to import\n     * @param array  $options  array for\n     *             - authldaps_id\n     *             - entities_id where group must to be imported\n     *             - is_recursive\n     *\n     * @return integer|false\n     */\n    public static function ldapImportGroup($group_dn, $options = [])\n    {\n\n        $config_ldap = new self();\n        $res         = $config_ldap->getFromDB($options['authldaps_id']);\n\n       // we prevent some delay...\n        if (!$res) {\n            return false;\n        }\n\n       //Connect to the directory\n        $ds = $config_ldap->connect();\n        if ($ds) {\n            $group_infos = self::getGroupByDn($ds, Sanitizer::unsanitize($group_dn));\n            $group       = new Group();\n            if ($options['type'] == \"groups\") {\n                return $group->add(Sanitizer::sanitize([\n                    \"name\"          => $group_infos[\"cn\"][0],\n                    \"ldap_group_dn\" => $group_infos[\"dn\"],\n                    \"entities_id\"   => $options['entities_id'],\n                    \"is_recursive\"  => $options['is_recursive']\n                ]));\n            }\n            return $group->add(Sanitizer::sanitize([\n                \"name\"         => $group_infos[\"cn\"][0],\n                \"ldap_field\"   => $config_ldap->fields[\"group_field\"],\n                \"ldap_value\"   => $group_infos[\"dn\"],\n                \"entities_id\"  => $options['entities_id'],\n                \"is_recursive\" => $options['is_recursive']\n            ]));\n        }\n        return false;\n    }\n\n\n    /**\n     * Open LDAP connection to current server\n     *\n     * @return resource|boolean\n     */\n    public function connect()\n    {\n\n        return $this->connectToServer(\n            $this->fields['host'],\n            $this->fields['port'],\n            $this->fields['rootdn'],\n            (new GLPIKey())->decrypt($this->fields['rootdn_passwd']),\n            $this->fields['use_tls'],\n            $this->fields['deref_option'],\n            $this->fields['tls_certfile'],\n            $this->fields['tls_keyfile'],\n            $this->fields['use_bind'],\n            $this->fields['timeout']\n        );\n    }\n\n\n    /**\n     * Connect to a LDAP server\n     *\n     * @param string  $host                 LDAP host to connect\n     * @param string  $port                 port to use\n     * @param string  $login                login to use (default '')\n     * @param string  $password             password to use (default '')\n     * @param boolean $use_tls              use a TLS connection? (false by default)\n     * @param integer $deref_options        deref options used\n     * @param string  $tls_certfile         TLS CERT file name within config directory (default '')\n     * @param string  $tls_keyfile          TLS KEY file name within config directory (default '')\n     * @param boolean $use_bind             do we need to do an ldap_bind? (true by default)\n     * @param bool    $silent_bind_errors   Indicates whether bind errors must be silented\n     *\n     * @return resource|false|\\LDAP\\Connection link to the LDAP server : false if connection failed\n     */\n    public static function connectToServer(\n        $host,\n        $port,\n        $login = \"\",\n        $password = \"\",\n        $use_tls = false,\n        $deref_options = 0,\n        $tls_certfile = \"\",\n        $tls_keyfile = \"\",\n        $use_bind = true,\n        $timeout = 0,\n        bool $silent_bind_errors = false\n    ) {\n\n        $ds = @ldap_connect($host, intval($port));\n\n        if ($ds === false) {\n            trigger_error(\n                sprintf(\n                    \"Unable to connect to LDAP server %s:%s\",\n                    $host,\n                    $port\n                ),\n                E_USER_WARNING\n            );\n            return false;\n        }\n\n        $ldap_options = [\n            LDAP_OPT_PROTOCOL_VERSION => 3,\n            LDAP_OPT_REFERRALS        => 0,\n            LDAP_OPT_DEREF            => $deref_options,\n        ];\n\n        if ($timeout > 0) {\n            // Apply the timeout unless it is \"unlimited\" (\"unlimited\" is the default value defined in `libldap`).\n            // see https://linux.die.net/man/3/ldap_set_option\n            $ldap_options[LDAP_OPT_NETWORK_TIMEOUT] = $timeout;\n        }\n\n        foreach ($ldap_options as $option => $value) {\n            if (!@ldap_set_option($ds, $option, $value)) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to set LDAP option `%s` to `%s`\",\n                            $option,\n                            $value\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n        }\n\n        if (!empty($tls_certfile)) {\n            if (!Filesystem::isFilepathSafe($tls_certfile)) {\n                trigger_error(\"TLS certificate path is not safe.\", E_USER_WARNING);\n            } elseif (!file_exists($tls_certfile)) {\n                trigger_error(\"TLS certificate path is not valid.\", E_USER_WARNING);\n            } elseif (!@ldap_set_option(null, LDAP_OPT_X_TLS_CERTFILE, $tls_certfile)) {\n                trigger_error(\"Unable to set LDAP option `LDAP_OPT_X_TLS_CERTFILE`\", E_USER_WARNING);\n            }\n        }\n        if (!empty($tls_keyfile)) {\n            if (!Filesystem::isFilepathSafe($tls_keyfile)) {\n                trigger_error(\"TLS key file path is not safe.\", E_USER_WARNING);\n            } elseif (!file_exists($tls_keyfile)) {\n                trigger_error(\"TLS key file path is not valid.\", E_USER_WARNING);\n            } elseif (!@ldap_set_option(null, LDAP_OPT_X_TLS_KEYFILE, $tls_keyfile)) {\n                trigger_error(\"Unable to set LDAP option `LDAP_OPT_X_TLS_KEYFILE`\", E_USER_WARNING);\n            }\n        }\n\n        if ($use_tls) {\n            if (!@ldap_start_tls($ds)) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to start TLS connection to LDAP server `%s:%s`\",\n                            $host,\n                            $port\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n                return false;\n            }\n        }\n\n        if (!$use_bind) {\n            return $ds;\n        }\n\n        if ($login != '') {\n            // Auth bind\n            $b = @ldap_bind($ds, $login, $password);\n        } else {\n            // Anonymous bind\n            $b = @ldap_bind($ds);\n        }\n        if ($b === false) {\n            if ($silent_bind_errors === false) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf(\n                            \"Unable to bind to LDAP server `%s:%s` %s\",\n                            $host,\n                            $port,\n                            ($login != '' ? \"with RDN `$login`\" : 'anonymously')\n                        )\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        return $ds;\n    }\n\n\n    /**\n     * Try to connect to a ldap server\n     *\n     * @param array  $ldap_method ldap_method array to use\n     * @param string $login       User Login\n     * @param string $password    User Password\n     *\n     * @return resource|boolean link to the LDAP server : false if connection failed\n     */\n    public static function tryToConnectToServer($ldap_method, $login, $password)\n    {\n        if (!function_exists('ldap_connect')) {\n            trigger_error(\"ldap_connect function is missing. Did you miss install php-ldap extension?\", E_USER_WARNING);\n            return false;\n        }\n        $ds = self::connectToServer(\n            $ldap_method['host'],\n            $ldap_method['port'],\n            $ldap_method['rootdn'],\n            (new GLPIKey())->decrypt($ldap_method['rootdn_passwd']),\n            $ldap_method['use_tls'],\n            $ldap_method['deref_option'],\n            $ldap_method['tls_certfile'] ?? '',\n            $ldap_method['tls_keyfile'] ?? '',\n            $ldap_method['use_bind'],\n            $ldap_method['timeout']\n        );\n\n        // Test with login and password of the user if exists\n        if (\n            !$ds\n            && !empty($login)\n            && (bool) $ldap_method['use_bind']\n        ) {\n            $ds = self::connectToServer(\n                $ldap_method['host'],\n                $ldap_method['port'],\n                $login,\n                $password,\n                $ldap_method['use_tls'],\n                $ldap_method['deref_option'],\n                $ldap_method['tls_certfile'] ?? '',\n                $ldap_method['tls_keyfile'] ?? '',\n                $ldap_method['use_bind'],\n                $ldap_method['timeout'],\n                true // silent bind error when trying to bind with user login/password\n            );\n        }\n\n       //If connection is not successful on this directory, try replicates (if replicates exists)\n        if (\n            !$ds\n            && ($ldap_method['id'] > 0)\n        ) {\n            foreach (self::getAllReplicateForAMaster($ldap_method['id']) as $replicate) {\n                $ds = self::connectToServer(\n                    $replicate[\"host\"],\n                    $replicate[\"port\"],\n                    $ldap_method['rootdn'],\n                    (new GLPIKey())->decrypt($ldap_method['rootdn_passwd']),\n                    $ldap_method['use_tls'],\n                    $ldap_method['deref_option'],\n                    $ldap_method['tls_certfile'] ?? '',\n                    $ldap_method['tls_keyfile'] ?? '',\n                    $ldap_method['use_bind'],\n                    $ldap_method['timeout']\n                );\n\n               // Test with login and password of the user\n                if (\n                    !$ds\n                    && !empty($login)\n                    && (bool) $ldap_method['use_bind']\n                ) {\n                     $ds = self::connectToServer(\n                         $replicate[\"host\"],\n                         $replicate[\"port\"],\n                         $login,\n                         $password,\n                         $ldap_method['use_tls'],\n                         $ldap_method['deref_option'],\n                         $ldap_method['tls_certfile'] ?? '',\n                         $ldap_method['tls_keyfile'] ?? '',\n                         $ldap_method['use_bind'],\n                         $ldap_method['timeout'],\n                         true // silent bind error when trying to bind with user login/password\n                     );\n                }\n                if ($ds) {\n                    return $ds;\n                }\n            }\n        }\n        return $ds;\n    }\n\n    /**\n     * Get LDAP servers\n     *\n     * @return array\n     */\n    public static function getLdapServers()\n    {\n        return getAllDataFromTable('glpi_authldaps', ['ORDER' => 'is_default DESC']);\n    }\n\n\n    /**\n     * Is the LDAP authentication used?\n     *\n     * @return boolean\n     */\n    public static function useAuthLdap()\n    {\n        return (countElementsInTable('glpi_authldaps', ['is_active' => 1]) > 0);\n    }\n\n\n    /**\n     * Import a user from ldap\n     * Check all the directories. When the user is found, then import it\n     *\n     * @param array $options array containing condition:\n     *                 array('name'=>'glpi') or array('email' => 'test at test.com')\n     *\n     * @return array|boolean false if fail\n     */\n    public static function importUserFromServers($options = [])\n    {\n\n        $auth   = new Auth();\n        $params = [];\n        if (isset($options['name'])) {\n            $params['value']  = $options['name'];\n            $params['method'] = self::IDENTIFIER_LOGIN;\n        }\n        if (isset($options['email'])) {\n            $params['value']  = $options['email'];\n            $params['method'] = self::IDENTIFIER_EMAIL;\n        }\n\n        $auth->user_present = $auth->userExists($options);\n\n       //If the user does not exists\n        if ($auth->user_present == 0) {\n            $auth->getAuthMethods();\n            $ldap_methods = $auth->authtypes[\"ldap\"];\n\n            foreach ($ldap_methods as $ldap_method) {\n                if ($ldap_method['is_active']) {\n                    //we're looking for a user login\n                    $params['identifier_field']   = $ldap_method['login_field'];\n                    $params['user_field']         = 'name';\n                    $result = self::ldapImportUserByServerId($params, 0, $ldap_method[\"id\"], true);\n                    if ($result != false) {\n                        return $result;\n                    }\n                }\n            }\n            Session::addMessageAfterRedirect(__('User not found or several users found'), false, ERROR);\n        } else {\n            Session::addMessageAfterRedirect(\n                __('Unable to add. The user already exist.'),\n                false,\n                ERROR\n            );\n        }\n        return false;\n    }\n\n\n    /**\n     * Authentify a user by checking a specific directory\n     *\n     * @param Auth      $auth        identification object\n     * @param string    $login       user login\n     * @param string    $password    user password\n     * @param array     $ldap_method ldap_method array to use\n     * @param string    $user_dn     user LDAP DN if present\n     * @param bool|null $error       Boolean flag that will be set to `true` if a LDAP error occurs during connection\n     *\n     * @return object identification object\n     */\n    public static function ldapAuth($auth, $login, $password, $ldap_method, $user_dn, ?bool &$error = null)\n    {\n\n        $auth->auth_succeded = false;\n        $auth->extauth       = 1;\n\n        $infos  = $auth->connection_ldap($ldap_method, $login, $password, $error);\n\n        if ($infos === false) {\n            return $auth;\n        }\n\n        $user_dn = $infos['dn'];\n        $user_sync = (isset($infos['sync_field']) ? $infos['sync_field'] : null);\n\n        if ($user_dn) {\n            $auth->auth_succeded            = true;\n           // try by login+auth_id and next by dn\n            if (\n                $auth->user->getFromDBbyNameAndAuth($login, Auth::LDAP, $ldap_method['id'])\n                || $auth->user->getFromDBbyDn(Sanitizer::sanitize($user_dn))\n            ) {\n                //There's already an existing user in DB with the same DN but its login field has changed\n                $auth->user->fields['name'] = $login;\n                $auth->user_present         = true;\n                $auth->user_dn              = $user_dn;\n            } else if ($user_sync !== null && $auth->user->getFromDBbySyncField($user_sync)) {\n               //user login/dn have changed\n                $auth->user->fields['name']      = $login;\n                $auth->user->fields['user_dn']   = $user_dn;\n                $auth->user_present              = true;\n                $auth->user_dn                   = $user_dn;\n            } else { // The user is a new user\n                $auth->user_present = false;\n            }\n            $auth->user->getFromLDAP(\n                $auth->ldap_connection,\n                $ldap_method,\n                $user_dn,\n                $login,\n                !$auth->user_present\n            );\n            $auth->user->fields[\"authtype\"] = Auth::LDAP;\n            $auth->user->fields[\"auths_id\"] = $ldap_method[\"id\"];\n        }\n        return $auth;\n    }\n\n\n    /**\n     * Try to authentify a user by checking all the directories\n     *\n     * @param Auth    $auth     identification object\n     * @param string  $login    user login\n     * @param string  $password user password\n     * @param integer $auths_id auths_id already used for the user (default 0)\n     * @param boolean $user_dn  user LDAP DN if present (false by default)\n     * @param boolean $break    if user is not found in the first directory,\n     *                          continue searching on the following ones (true by default)\n     *\n     * @return object identification object\n     */\n    public static function tryLdapAuth($auth, $login, $password, $auths_id = 0, $user_dn = false, $break = true)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n       //If no specific source is given, test all ldap directories\n        if ($auths_id <= 0) {\n            $user_found = false;\n\n            $ldap_methods = $auth->authtypes[\"ldap\"];\n\n           // Sort servers to first try on known servers for given login.\n           // It is necessary to still necessary to try to connect on all servers to handle following cases:\n           //  - there are multiple users having same login on different LDAP servers,\n           //  - a user has been migrated from a LDAP server to another one, but GLPI is not yet aware of this.\n           // Caveat: if user uses a wrong password, a login attempt will still be done on all active LDAP servers.\n            $known_servers = $DB->request(\n                [\n                    'SELECT' => 'auths_id',\n                    'FROM'   => User::getTable(),\n                    'WHERE'  => ['name' => addslashes($login)],\n                ]\n            );\n            $known_servers_id = array_column(iterator_to_array($known_servers), 'auths_id');\n            usort(\n                $ldap_methods,\n                function (array $a, array $b) use ($known_servers_id) {\n                    if (in_array($a['id'], $known_servers_id) && !in_array($b['id'], $known_servers_id)) {\n                        return -1;\n                    }\n                    if (!in_array($a['id'], $known_servers_id) && in_array($b['id'], $known_servers_id)) {\n                        return 1;\n                    }\n                    return $a['id'] <=> $b['id'];\n                }\n            );\n\n            foreach ($ldap_methods as $ldap_method) {\n                if ($ldap_method['is_active']) {\n                    $error = false;\n                    $auth = self::ldapAuth($auth, $login, $password, $ldap_method, $user_dn, $error);\n\n                    if ($error === true && in_array($ldap_method['id'], $known_servers_id)) {\n                        // Remember that an error occurs on the server on which we expect user to be find.\n                        // This will prevent user to be considered as deleted from the LDAP server.\n                        $auth->user_ldap_error = true;\n                    }\n\n                    if ($auth->user_found) {\n                        $user_found = true;\n                    }\n\n                    if (\n                        $auth->auth_succeded\n                        && $break\n                    ) {\n                        break;\n                    }\n                }\n            }\n\n            $auth->user_found = $user_found;\n        } else if (array_key_exists($auths_id, $auth->authtypes[\"ldap\"])) {\n           // Check if the ldap server indicated as the last good one still exists !\n           //A specific ldap directory is given, test it and only this one !\n            $auth = self::ldapAuth(\n                $auth,\n                $login,\n                $password,\n                $auth->authtypes[\"ldap\"][$auths_id],\n                $user_dn\n            );\n        }\n        return $auth;\n    }\n\n\n    /**\n     * Get dn for a user\n     *\n     * @param resource $ds      LDAP link\n     * @param array    $options array of possible options:\n     *          - basedn : base dn used to search\n     *          - login_field : attribute to store login\n     *          - search_parameters array of search parameters\n     *          - user_params  array of parameters : method (IDENTIFIER_LOGIN or IDENTIFIER_EMAIL) + value\n     *          - condition : ldap condition used\n     *\n     * @return array|boolean dn of the user, else false\n     * @throws \\RuntimeException\n     */\n    public static function searchUserDn($ds, $options = [])\n    {\n\n        $values = [\n            'basedn'            => '',\n            'login_field'       => '',\n            'search_parameters' => [],\n            'user_params'       => '',\n            'condition'         => '',\n            'user_dn'           => false,\n        ];\n\n        foreach ($options as $key => $value) {\n            $values[$key] = $value;\n        }\n\n       //By default authenticate users by login\n        $login_attr      = $values['search_parameters']['fields'][self::IDENTIFIER_LOGIN];\n        $sync_attr       = (isset($values['search_parameters']['fields']['sync_field'])) ?\n         $values['search_parameters']['fields']['sync_field'] : null;\n\n        $attrs = [\"dn\"];\n        foreach ($values['search_parameters']['fields'] as $attr) {\n            $attrs[] = $attr;\n        }\n\n       //First : if a user dn is provided, look for it in the directory\n       //Before trying to find the user using his login_field\n        if ($values['user_dn']) {\n            $info = self::getUserByDn($ds, $values['user_dn'], $attrs);\n\n            if ($info) {\n                $ret = [\n                    'dn'        => $values['user_dn'],\n                    $login_attr => $info[$login_attr][0]\n                ];\n                if ($sync_attr !== null && isset($info[0][$sync_attr])) {\n                    $ret['sync_field'] = self::getFieldValue($info[0], $sync_attr);\n                }\n                return $ret;\n            }\n        }\n\n       // Try a search to find the DN\n        $filter_value = $values['user_params']['value'];\n        if ($values['login_field'] == 'objectguid' && self::isValidGuid($filter_value)) {\n            $filter_value = self::guidToHex($filter_value);\n        }\n        $filter = \"(\" . $values['login_field'] . \"=\" . $filter_value . \")\";\n\n        if (!empty($values['condition'])) {\n            $filter = \"(& $filter \" . Sanitizer::unsanitize($values['condition']) . \")\";\n        }\n\n        $result = @ldap_search($ds, $values['basedn'], $filter, $attrs);\n        if ($result === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ds) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf('LDAP search with base DN `%s` and filter `%s` failed', $values['basedn'], $filter)\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        //search has been done, let's check for found results\n        $info = self::get_entries_clean($ds, $result);\n\n        if (is_array($info) && ($info['count'] == 1)) {\n            $ret = [\n                'dn'        => $info[0]['dn'],\n                $login_attr => $info[0][$login_attr][0]\n            ];\n            if ($sync_attr !== null && isset($info[0][$sync_attr])) {\n                $ret['sync_field'] = self::getFieldValue($info[0], $sync_attr);\n            }\n            return $ret;\n        }\n        return false;\n    }\n\n\n    /**\n     * Get an object from LDAP by giving his DN\n     *\n     * @param resource $ds        the active connection to the directory\n     * @param string   $condition the LDAP filter to use for the search\n     * @param string   $dn        DN of the object\n     * @param array    $attrs     Array of the attributes to retrieve\n     * @param boolean  $clean     (true by default)\n     *\n     * @return array|boolean false if failed\n     */\n    public static function getObjectByDn($ds, $condition, $dn, $attrs = [], $clean = true)\n    {\n        if (!$clean) {\n            Toolbox::deprecated('Use of $clean = false is deprecated');\n        }\n\n        $result = @ldap_read($ds, Sanitizer::unsanitize($dn), $condition, $attrs);\n        if ($result === false) {\n            // 32 = LDAP_NO_SUCH_OBJECT => This error can be silented as it just means that search produces no result.\n            if (ldap_errno($ds) !== 32) {\n                trigger_error(\n                    static::buildError(\n                        $ds,\n                        sprintf('Unable to get LDAP object having DN `%s` with filter `%s`', $dn, $condition)\n                    ),\n                    E_USER_WARNING\n                );\n            }\n            return false;\n        }\n\n        $info = self::get_entries_clean($ds, $result);\n        if (is_array($info) && ($info['count'] == 1)) {\n            return $info[0];\n        }\n\n        return false;\n    }\n\n\n    /**\n     * Get user by domain name\n     *\n     * @param resource $ds      the active connection to the directory\n     * @param string   $user_dn domain name\n     * @param array    $attrs   attributes\n     * @param boolean  $clean   (true by default)\n     *\n     * @return array|boolean false if failed\n     */\n    public static function getUserByDn($ds, $user_dn, $attrs, $clean = true)\n    {\n        if (!$clean) {\n            Toolbox::deprecated('Use of $clean = false is deprecated');\n        }\n\n        return self::getObjectByDn($ds, \"objectClass=*\", $user_dn, $attrs);\n    }\n\n    /**\n     * Get infos for groups\n     *\n     * @param resource $ds       LDAP link\n     * @param string   $group_dn dn of the group\n     *\n     * @return array|boolean group infos if found, else false\n     */\n    public static function getGroupByDn($ds, $group_dn)\n    {\n        return self::getObjectByDn($ds, \"objectClass=*\", $group_dn, [\"cn\"]);\n    }\n\n\n    /**\n     * Manage values stored in session\n     *\n     * @param array   $options Options\n     * @param boolean $delete  (false by default)\n     *\n     * @return void\n     */\n    public static function manageValuesInSession($options = [], $delete = false)\n    {\n\n        $fields = ['action', 'authldaps_id', 'basedn', 'begin_date', 'criterias',  'end_date',\n            'entities_id', 'interface', 'ldap_filter', 'mode'\n        ];\n\n       //If form accessed via modal, do not show expert mode link\n       // Manage new value is set : entity or mode\n        if (\n            isset($options['entity'])\n            || isset($options['mode'])\n        ) {\n            if (isset($options['_in_modal']) && $options['_in_modal']) {\n               //If coming form the helpdesk form : reset all criterias\n                $_SESSION['ldap_import']['_in_modal']      = 1;\n                $_SESSION['ldap_import']['no_expert_mode'] = 1;\n                $_SESSION['ldap_import']['action']         = 'show';\n                $_SESSION['ldap_import']['interface']      = self::SIMPLE_INTERFACE;\n                $_SESSION['ldap_import']['mode']           = self::ACTION_IMPORT;\n            } else {\n                $_SESSION['ldap_import']['_in_modal']      = 0;\n                $_SESSION['ldap_import']['no_expert_mode'] = 0;\n            }\n        }\n\n        if (!$delete) {\n            if (!isset($_SESSION['ldap_import']['entities_id'])) {\n                $options['entities_id'] = $_SESSION['glpiactive_entity'];\n            }\n\n            if (isset($options['toprocess'])) {\n                $_SESSION['ldap_import']['action'] = 'process';\n            }\n\n            if (isset($options['change_directory'])) {\n                $options['ldap_filter'] = '';\n            }\n\n            if (!isset($_SESSION['ldap_import']['authldaps_id'])) {\n                $_SESSION['ldap_import']['authldaps_id'] = NOT_AVAILABLE;\n            }\n\n            if (\n                (!Config::canUpdate()\n                && !Entity::canUpdate())\n                || (!isset($_SESSION['ldap_import']['interface'])\n                && !isset($options['interface']))\n            ) {\n                $options['interface'] = self::SIMPLE_INTERFACE;\n            }\n\n            foreach ($fields as $field) {\n                if (isset($options[$field])) {\n                    $_SESSION['ldap_import'][$field] = $options[$field];\n                }\n            }\n            if (\n                isset($_SESSION['ldap_import']['begin_date'])\n                && ($_SESSION['ldap_import']['begin_date'] == 'NULL')\n            ) {\n                $_SESSION['ldap_import']['begin_date'] = '';\n            }\n            if (\n                isset($_SESSION['ldap_import']['end_date'])\n                && ($_SESSION['ldap_import']['end_date'] == 'NULL')\n            ) {\n                $_SESSION['ldap_import']['end_date'] = '';\n            }\n            if (!isset($_SESSION['ldap_import']['criterias'])) {\n                $_SESSION['ldap_import']['criterias'] = [];\n            }\n\n            $authldap = new self();\n           //Filter computation\n            if ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE) {\n                $entity = new Entity();\n\n                if (\n                    $entity->getFromDB($_SESSION['ldap_import']['entities_id'])\n                    && ($entity->getField('authldaps_id') > 0)\n                ) {\n                    $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE) {\n                       // authldaps_id wasn't submitted by the user -> take entity config\n                        $_SESSION['ldap_import']['authldaps_id'] = $entity->getField('authldaps_id');\n                    }\n\n                    $_SESSION['ldap_import']['basedn']       = $entity->getField('ldap_dn');\n\n                   // No dn specified in entity : use standard one\n                    if (empty($_SESSION['ldap_import']['basedn'])) {\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n\n                    if ($entity->getField('entity_ldapfilter') != NOT_AVAILABLE) {\n                        $_SESSION['ldap_import']['entity_filter']\n                        = $entity->getField('entity_ldapfilter');\n                    }\n                } else {\n                    if (\n                        $_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE\n                        || !$_SESSION['ldap_import']['authldaps_id']\n                    ) {\n                        $_SESSION['ldap_import']['authldaps_id'] = self::getDefault();\n                    }\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n                }\n\n                if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                    $_SESSION['ldap_import']['ldap_filter'] = self::buildLdapFilter($authldap);\n                }\n            } else {\n                if (\n                    $_SESSION['ldap_import']['authldaps_id'] == NOT_AVAILABLE\n                    || !$_SESSION['ldap_import']['authldaps_id']\n                ) {\n                    $_SESSION['ldap_import']['authldaps_id'] = self::getDefault();\n\n                    if ($_SESSION['ldap_import']['authldaps_id'] > 0) {\n                        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                        $_SESSION['ldap_import']['basedn'] = $authldap->getField('basedn');\n                    }\n                }\n                if (\n                    !isset($_SESSION['ldap_import']['ldap_filter'])\n                    || $_SESSION['ldap_import']['ldap_filter'] == ''\n                ) {\n                    $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n                    $_SESSION['ldap_import']['basedn']      = $authldap->getField('basedn');\n                    $_SESSION['ldap_import']['ldap_filter'] = self::buildLdapFilter($authldap);\n                }\n            }\n        } else { // Unset all values in session\n            unset($_SESSION['ldap_import']);\n        }\n    }\n\n\n    /**\n     * Show import user form\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return void\n     */\n    public static function showUserImportForm(AuthLDAP $authldap)\n    {\n\n       //Get data related to entity (directory and ldap filter)\n        $authldap->getFromDB($_SESSION['ldap_import']['authldaps_id']);\n\n        echo \"<form method='post' action='\" . $_SERVER['PHP_SELF'] . \"'>\";\n\n        echo \"<h2 class='center mb-3'>\" . ($_SESSION['ldap_import']['mode'] ? __('Synchronizing already imported users')\n                                                      : __('Import new users'));\n\n       // Expert interface allow user to override configuration.\n       // If not coming from the ticket form, then give expert/simple link\n        if (\n            (Config::canUpdate()\n            || Entity::canUpdate())\n            && (!isset($_SESSION['ldap_import']['no_expert_mode'])\n              || $_SESSION['ldap_import']['no_expert_mode'] != 1)\n        ) {\n            echo \"<a class='float-end btn btn-secondary' href='\" . $_SERVER['PHP_SELF'] . \"?action=\" .\n              $_SESSION['ldap_import']['action'] . \"&amp;mode=\" . $_SESSION['ldap_import']['mode'];\n\n            if ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE) {\n                echo \"&amp;interface=\" . self::EXPERT_INTERFACE . \"'>\" . __('Expert mode') . \"</a>\";\n            } else {\n                echo \"&amp;interface=\" . self::SIMPLE_INTERFACE . \"'>\" . __('Simple mode') . \"</a>\";\n            }\n        } else {\n            $_SESSION['ldap_import']['interface'] = self::SIMPLE_INTERFACE;\n        }\n        echo \"</h2>\";\n\n        echo \"<div class='card'>\";\n        echo \"<table class='table card-table'>\";\n\n        switch ($_SESSION['ldap_import']['interface']) {\n            case self::EXPERT_INTERFACE:\n               //If more than one directory configured\n               //Display dropdown ldap servers\n                if (\n                    ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n                    && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n                ) {\n                    if (self::getNumberOfServers() > 1) {\n                        $rand = mt_rand();\n                        echo \"<tr><td class='text-end'><label for='dropdown_authldaps_id$rand'>\" . __('LDAP directory choice') . \"</label></td>\";\n                        echo \"<td colspan='3'>\";\n                        self::dropdown(['name'                 => 'authldaps_id',\n                            'value'                => $_SESSION['ldap_import']['authldaps_id'],\n                            'condition'            => ['is_active' => 1],\n                            'display_emptychoice'  => false,\n                            'rand'                 => $rand\n                        ]);\n                        echo \"&nbsp;<input class='btn btn-secondary' type='submit' name='change_directory'\n                        value=\\\"\" . _sx('button', 'Change') . \"\\\">\";\n                        echo \"</td></tr>\";\n                    }\n\n                    echo \"<tr><td style='width: 250px' class='text-end'><label for='basedn'>\" . __('BaseDN') . \"</label></td><td colspan='3'>\";\n                    echo \"<input type='text' class='form-control' id='basedn' name='basedn' value=\\\"\" . htmlspecialchars($_SESSION['ldap_import']['basedn'], ENT_QUOTES) .\n                     \"\\\" \" . (!$_SESSION['ldap_import']['basedn'] ? \"disabled\" : \"\") . \">\";\n                    echo \"</td></tr>\";\n\n                    echo \"<tr><td class='text-end'><label for='ldap_filter'>\" . __('Search filter for users') . \"</label></td><td colspan='3'>\";\n                    echo \"<input type='text' class='form-control' id='ldap_filter' name='ldap_filter' value=\\\"\" .\n                      htmlspecialchars($_SESSION['ldap_import']['ldap_filter'], ENT_QUOTES) . \"\\\">\";\n                    echo \"</td></tr>\";\n                }\n                break;\n\n           //case self::SIMPLE_INTERFACE :\n            default:\n                if (self::getNumberOfServers() > 1) {\n                    $rand = mt_rand();\n                    echo \"<tr><td style='width: 250px' class='text-end'>\n                  <label for='dropdown_authldaps_id$rand'>\" . __('LDAP directory choice') . \"</label>\n               </td>\";\n                    echo \"<td>\";\n                    self::dropdown([\n                        'name'                 => 'authldaps_id',\n                        'value'                => $_SESSION['ldap_import']['authldaps_id'],\n                        'condition'            => ['is_active' => 1],\n                        'display_emptychoice'  => false,\n                        'rand'                 => $rand\n                    ]);\n                    echo \"&nbsp;<input class='btn btn-secondary' type='submit' name='change_directory'\n                     value=\\\"\" . _sx('button', 'Change') . \"\\\">\";\n                    echo \"</td></tr>\";\n                }\n\n               //If multi-entity mode and more than one entity visible\n               //else no need to select entity\n                if (\n                    Session::isMultiEntitiesMode()\n                    && (count($_SESSION['glpiactiveentities']) > 1)\n                ) {\n                    echo \"<tr><td class='text-end'>\" . __('Select the desired entity') . \"</td>\" .\n                    \"<td>\";\n                    Entity::dropdown([\n                        'value'       => $_SESSION['ldap_import']['entities_id'],\n                        'entity'      => $_SESSION['glpiactiveentities'],\n                        'on_change'    => 'this.form.submit()'\n                    ]);\n                    echo \"</td></tr>\";\n                } else {\n                   //Only one entity is active, store it\n                    echo \"<tr><td><input type='hidden' name='entities_id' value='\" .\n                              $_SESSION['glpiactive_entity'] . \"'></td></tr>\";\n                }\n\n                if (\n                    (isset($_SESSION['ldap_import']['begin_date'])\n                    && !empty($_SESSION['ldap_import']['begin_date']))\n                    || (isset($_SESSION['ldap_import']['end_date'])\n                    && !empty($_SESSION['ldap_import']['end_date']))\n                ) {\n                    $enabled = 1;\n                } else {\n                    $enabled = 0;\n                }\n                Dropdown::showAdvanceDateRestrictionSwitch($enabled);\n\n                echo \"<table class='table card-table'>\";\n\n                if (\n                    ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n                    && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n                ) {\n                    $field_counter = 0;\n                    $fields        = ['login_field'     => __('Login'),\n                        'sync_field'      => __('Synchronization field') . ' (' . $authldap->fields['sync_field'] . ')',\n                        'email1_field'    => _n('Email', 'Emails', 1),\n                        'email2_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '2'\n                        ),\n                        'email3_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '3'\n                        ),\n                        'email4_field'    => sprintf(\n                            __('%1$s %2$s'),\n                            _n('Email', 'Emails', 1),\n                            '4'\n                        ),\n                        'realname_field'  => __('Surname'),\n                        'firstname_field' => __('First name'),\n                        'phone_field'     => _x('ldap', 'Phone'),\n                        'phone2_field'    => __('Phone 2'),\n                        'mobile_field'    => __('Mobile phone'),\n                        'title_field'     => _x('person', 'Title'),\n                        'category_field'  => _n('Category', 'Categories', 1),\n                        'picture_field'   => _n('Picture', 'Pictures', 1)\n                    ];\n                    $available_fields = [];\n                    foreach ($fields as $field => $label) {\n                        if (isset($authldap->fields[$field]) && ($authldap->fields[$field] != '')) {\n                            $available_fields[$field] = $label;\n                        }\n                    }\n                    echo \"<tr><td colspan='4' class='border-bottom-0'><h4>\" . __('Search criteria for users') . \"</h4></td></tr>\";\n                    foreach ($available_fields as $field => $label) {\n                        if ($field_counter == 0) {\n                            echo \"<tr>\";\n                        }\n                        echo \"<td style='width: 250px' class='text-end'><label for='criterias$field'>$label</label></td><td>\";\n                        $field_counter++;\n                        $field_value = '';\n                        if (isset($_SESSION['ldap_import']['criterias'][$field])) {\n                            $field_value = Html::entities_deep(Sanitizer::unsanitize($_SESSION['ldap_import']['criterias'][$field]));\n                        }\n                        echo \"<input type='text' class='form-control' id='criterias$field' name='criterias[$field]' value='$field_value'>\";\n                        echo \"</td>\";\n                        if ($field_counter == 2) {\n                            echo \"</tr>\";\n                            $field_counter = 0;\n                        }\n                    }\n                    if ($field_counter > 0) {\n                        while ($field_counter < 2) {\n                            echo \"<td colspan='2'></td>\";\n                            $field_counter++;\n                        }\n                        $field_counter = 0;\n                        echo \"</tr>\";\n                    }\n                }\n                break;\n        }\n\n        if (\n            ($_SESSION['ldap_import']['authldaps_id'] !=  NOT_AVAILABLE)\n            && ($_SESSION['ldap_import']['authldaps_id'] > 0)\n        ) {\n            if ($_SESSION['ldap_import']['authldaps_id']) {\n                echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\";\n                echo \"<input class='btn btn-primary' type='submit' name='search' value=\\\"\" .\n                   _sx('button', 'Search') . \"\\\">\";\n                echo \"</td></tr>\";\n            } else {\n                echo \"<tr class='tab_bg_2'><\" .\n                 \"td colspan='4' class='center'>\" . __('No directory selected') . \"</td></tr>\";\n            }\n        } else {\n            echo \"<tr class='tab_bg_2'><td colspan='4' class='center'>\" .\n                __('No directory associated to entity: impossible search') . \"</td></tr>\";\n        }\n        echo \"</table>\";\n        echo \"</div>\";\n        Html::closeForm();\n    }\n\n    /**\n     * Get number of servers\n     *\n     * @var DBmysql $DB\n     *\n     * @return integer\n     */\n    public static function getNumberOfServers()\n    {\n        return countElementsInTable('glpi_authldaps', ['is_active' => 1]);\n    }\n\n\n    /**\n     * Build LDAP filter\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return string\n     */\n    public static function buildLdapFilter(AuthLDAP $authldap)\n    {\n       //Build search filter\n        $counter = 0;\n        $filter  = '';\n\n        if (\n            !empty($_SESSION['ldap_import']['criterias'])\n            && ($_SESSION['ldap_import']['interface'] == self::SIMPLE_INTERFACE)\n        ) {\n            foreach ($_SESSION['ldap_import']['criterias'] as $criteria => $value) {\n                if ($value != '') {\n                    $begin = 0;\n                    $end   = 0;\n                    if (($length = strlen($value)) > 0) {\n                        if ($value[0] == '^') {\n                             $begin = 1;\n                        }\n                        if ($value[$length - 1] == '$') {\n                            $end = 1;\n                        }\n                    }\n                    if ($begin || $end) {\n                     // no Toolbox::substr, to be consistent with strlen result\n                        $value = substr($value, $begin, $length - $end - $begin);\n                    }\n                    $counter++;\n                    $filter .= '(' . $authldap->fields[$criteria] . '=' . ($begin ? '' : '*') . $value . ($end ? '' : '*') . ')';\n                }\n            }\n        } else {\n            $filter = \"(\" . $authldap->getField(\"login_field\") . \"=*)\";\n        }\n\n       //If time restriction\n        $begin_date = (isset($_SESSION['ldap_import']['begin_date'])\n                     && !empty($_SESSION['ldap_import']['begin_date'])\n                        ? $_SESSION['ldap_import']['begin_date'] : null);\n        $end_date   = (isset($_SESSION['ldap_import']['end_date'])\n                     && !empty($_SESSION['ldap_import']['end_date'])\n                        ? $_SESSION['ldap_import']['end_date'] : null);\n        $filter    .= self::addTimestampRestrictions($begin_date, $end_date);\n        $ldap_condition = Sanitizer::unsanitize($authldap->getField('condition'));\n       //Add entity filter and filter filled in directory's configuration form\n        return  \"(&\" . (isset($_SESSION['ldap_import']['entity_filter'])\n                    ? $_SESSION['ldap_import']['entity_filter']\n                    : '') . \" $filter $ldap_condition)\";\n    }\n\n\n    /**\n     * Add timestamp restriction\n     *\n     * @param string $begin_date datetime begin date to search (NULL if not take into account)\n     * @param string $end_date   datetime end date to search (NULL if not take into account)\n     *\n     * @return string\n     */\n    public static function addTimestampRestrictions($begin_date, $end_date)\n    {\n\n        $condition = '';\n       //If begin date\n        if (!empty($begin_date)) {\n            $stampvalue = self::date2ldapTimeStamp($begin_date);\n            $condition .= \"(modifyTimestamp>=\" . $stampvalue . \")\";\n        }\n       //If end date\n        if (!empty($end_date)) {\n            $stampvalue = self::date2ldapTimeStamp($end_date);\n            $condition .= \"(modifyTimestamp<=\" . $stampvalue . \")\";\n        }\n        return $condition;\n    }\n\n\n    /**\n     * Search user\n     *\n     * @param AuthLDAP $authldap AuthLDAP object\n     *\n     * @return void\n     */\n    public static function searchUser(AuthLDAP $authldap)\n    {\n\n        if (\n            self::connectToServer(\n                $authldap->getField('host'),\n                $authldap->getField('port'),\n                $authldap->getField('rootdn'),\n                (new GLPIKey())->decrypt($authldap->getField('rootdn_passwd')),\n                $authldap->getField('use_tls'),\n                $authldap->getField('deref_option'),\n                $authldap->getField('tls_certfile'),\n                $authldap->getField('tls_keyfile'),\n                $authldap->getField('use_bind'),\n                $authldap->getField('timeout')\n            )\n        ) {\n            self::showLdapUsers();\n        } else {\n            echo \"<div class='center b firstbloc'>\" . __('Unable to connect to the LDAP directory');\n        }\n    }\n\n    /**\n     * Get default ldap\n     *\n     * @var DBmysql $DB DB instance\n     *\n     * @return integer\n     */\n    public static function getDefault()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        foreach ($DB->request('glpi_authldaps', ['is_default' => 1, 'is_active' => 1]) as $data) {\n            return $data['id'];\n        }\n        return 0;\n    }\n\n    public function post_updateItem($history = true)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (in_array('is_default', $this->updates) && $this->input[\"is_default\"] == 1) {\n            $DB->update(\n                $this->getTable(),\n                ['is_default' => 0],\n                ['id' => ['<>', $this->input['id']]]\n            );\n        }\n    }\n\n    public function post_addItem()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        if (isset($this->fields['is_default']) && $this->fields[\"is_default\"] == 1) {\n            $DB->update(\n                $this->getTable(),\n                ['is_default' => 0],\n                ['id' => ['<>', $this->fields['id']]]\n            );\n        }\n    }\n\n    public function prepareInputForAdd($input)\n    {\n\n       //If it's the first ldap directory then set it as the default directory\n        if (!self::getNumberOfServers()) {\n            $input['is_default'] = 1;\n        }\n\n        if (empty($input['can_support_pagesize'] ?? '')) {\n            $input['can_support_pagesize'] = 0;\n        }\n\n        if (isset($input[\"rootdn_passwd\"]) && !empty($input[\"rootdn_passwd\"])) {\n            $input[\"rootdn_passwd\"] = (new GLPIKey())->encrypt($input[\"rootdn_passwd\"]);\n        }\n\n        $this->checkFilesExist($input);\n\n        return $input;\n    }\n\n\n    /**\n     * Get LDAP deleted user action options.\n     *\n     * @return array\n     */\n    public static function getLdapDeletedUserActionOptions()\n    {\n\n        return [\n            self::DELETED_USER_PRESERVE                  => __('Preserve'),\n            self::DELETED_USER_DELETE                    => __('Put in trashbin'),\n            self::DELETED_USER_WITHDRAWDYNINFO           => __('Withdraw dynamic authorizations and groups'),\n            self::DELETED_USER_DISABLE                   => __('Disable'),\n            self::DELETED_USER_DISABLEANDWITHDRAWDYNINFO => __('Disable') . ' + ' . __('Withdraw dynamic authorizations and groups'),\n            self::DELETED_USER_DISABLEANDDELETEGROUPS => __('Disable') . ' + ' . __('Withdraw groups'),\n        ];\n    }\n\n    /**\n     * Get LDAP restored user action options.\n     *\n     * @since 10.0.0\n     * @return array\n     */\n    public static function getLdapRestoredUserActionOptions()\n    {\n        return [\n            self::RESTORED_USER_PRESERVE  => __('Do nothing'),\n            self::RESTORED_USER_RESTORE   => __('Restore (move out of trashbin)'),\n            self::RESTORED_USER_ENABLE    => __('Enable'),\n        ];\n    }\n\n    /**\n     * Builds deleted actions dropdown\n     *\n     * @param integer $value (default 0)\n     *\n     * @return string\n     */\n    public static function dropdownUserDeletedActions($value = 0)\n    {\n\n        $options = self::getLdapDeletedUserActionOptions();\n        asort($options);\n        return Dropdown::showFromArray('user_deleted_ldap', $options, ['value' => $value]);\n    }\n\n    /**\n     * Builds restored actions dropdown\n     *\n     * @param integer $value (default 0)\n     *\n     * @since 10.0.0\n     * @return string\n     */\n    public static function dropdownUserRestoredActions($value = 0)\n    {\n\n        $options = self::getLdapRestoredUserActionOptions();\n        asort($options);\n        return Dropdown::showFromArray('user_restored_ldap', $options, ['value' => $value]);\n    }\n\n    /**\n     * Return all the ldap servers where email field is configured\n     *\n     * @return array of LDAP server's ID\n     */\n    public static function getServersWithImportByEmailActive()\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $ldaps = [];\n       // Always get default first\n\n        $iterator = $DB->request([\n            'SELECT' => ['id'],\n            'FROM'  => 'glpi_authldaps',\n            'WHERE' => [\n                'is_active' => 1,\n                'OR'        => [\n                    'email1_field' => ['<>', ''],\n                    'email2_field' => ['<>', ''],\n                    'email3_field' => ['<>', ''],\n                    'email4_field' => ['<>', '']\n                ]\n            ],\n            'ORDER'  => ['is_default DESC']\n        ]);\n        foreach ($iterator as $data) {\n            $ldaps[] = $data['id'];\n        }\n        return $ldaps;\n    }\n\n\n    /**\n     * Show date restriction form\n     *\n     * @param array $options Options\n     *\n     * @return void\n     */\n    public static function showDateRestrictionForm($options = [])\n    {\n\n        echo \"<table class='table'>\";\n        echo \"<tr>\";\n\n        $enabled = (isset($options['enabled']) ? $options['enabled'] : false);\n        if (!$enabled) {\n            echo \"<td colspan='4'>\";\n            echo \"<a href='#' class='btn btn-outline-secondary' onClick='activateRestriction()'>\n            <i class='fas fa-toggle-off me-1'></i>\n            \" . __('Enable filtering by date') . \"\n         </a>\";\n            echo \"</td></tr>\";\n        }\n        if ($enabled) {\n            echo \"<td style='width: 250px' class='text-end border-bottom-0'>\" . __('View updated users') . \"</td>\";\n            echo \"<td class='border-bottom-0'>\" . __('from') . \"\";\n            $begin_date = (isset($_SESSION['ldap_import']['begin_date'])\n                           ? $_SESSION['ldap_import']['begin_date'] : '');\n            Html::showDateTimeField(\"begin_date\", ['value'    => $begin_date]);\n            echo \"</td>\";\n            echo \"<td class='border-bottom-0'>\" . __('to') . \"\";\n            $end_date = (isset($_SESSION['ldap_import']['end_date'])\n                        ? $_SESSION['ldap_import']['end_date']\n                        : date('Y-m-d H:i:s', time() - DAY_TIMESTAMP));\n            Html::showDateTimeField(\"end_date\", ['value'    => $end_date]);\n            echo \"</td></tr>\";\n            echo \"<tr><td colspan='4'>\";\n            echo \"<a href='#' class='btn btn-outline-secondary' onClick='deactivateRestriction()'>\n            <i class='fas fa-toggle-on me-1'></i>\n            \" . __('Disable filtering by date') . \"\n         </a>\";\n            echo \"</td></tr>\";\n        }\n        echo \"</table>\";\n    }\n\n    public function cleanDBonPurge()\n    {\n        Rule::cleanForItemCriteria($this, 'LDAP_SERVER');\n    }\n\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (\n            !$withtemplate\n            && $item->can($item->getField('id'), READ)\n        ) {\n            $ong     = [];\n            $ong[1]  = _sx('button', 'Test');                     // test connexion\n            $ong[2]  = User::getTypeName(Session::getPluralNumber());\n            $ong[3]  = Group::getTypeName(Session::getPluralNumber());\n           // TODO clean fields entity_XXX if not used\n           // $ong[4]  = Entity::getTypeName(1);                  // params for entity config\n            $ong[5]  = __('Advanced information');   // params for entity advanced config\n            $ong[6]  = _n('Replicate', 'Replicates', Session::getPluralNumber());\n\n            return $ong;\n        }\n        return '';\n    }\n\n    /**\n     * Choose wich form to show\n     *\n     * @param CommonGLPI $item         Item instance\n     * @param integer    $tabnum       Tab number\n     * @param integer    $withtemplate Unused\n     *\n     * @return boolean (TRUE)\n     */\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        switch ($tabnum) {\n            case 1:\n                $item->showFormTestLDAP();\n                break;\n\n            case 2:\n                $item->showFormUserConfig();\n                break;\n\n            case 3:\n                $item->showFormGroupsConfig();\n                break;\n\n            case 4:\n                $item->showFormEntityConfig();\n                break;\n\n            case 5:\n                $item->showFormAdvancedConfig();\n                break;\n\n            case 6:\n                $item->showFormReplicatesConfig();\n                break;\n        }\n        return true;\n    }\n\n\n    /**\n     * Get ldap query results and clean them at the same time\n     *\n     * @param resource $link   link to the directory connection\n     * @param array    $result the query results\n     *\n     * @return array which contains ldap query results\n     */\n    public static function get_entries_clean($link, $result)\n    {\n        $entries = @ldap_get_entries($link, $result);\n        if ($entries === false) {\n            trigger_error(\n                static::buildError(\n                    $link,\n                    'Error while getting LDAP entries'\n                ),\n                E_USER_WARNING\n            );\n        }\n        return $entries;\n    }\n\n\n    /**\n     * Get all replicate servers for a master one\n     *\n     * @param integer $master_id master ldap server ID\n     *\n     * @return array of the replicate servers\n     */\n    public static function getAllReplicateForAMaster($master_id)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n\n        $replicates = [];\n        $criteria = ['FIELDS' => ['id', 'host', 'port'],\n            'FROM'   => 'glpi_authldapreplicates',\n            'WHERE'  => ['authldaps_id' => $master_id]\n        ];\n        foreach ($DB->request($criteria) as $replicate) {\n            $replicates[] = [\"id\"   => $replicate[\"id\"],\n                \"host\" => $replicate[\"host\"],\n                \"port\" => $replicate[\"port\"]\n            ];\n        }\n        return $replicates;\n    }\n\n    /**\n     * Check if ldap results can be paged or not\n     * This functionality is available for PHP 5.4 and higher\n     *\n     * @since 0.84\n     *\n     * @param object   $config_ldap        LDAP configuration\n     * @param boolean  $check_config_value Whether to check config values\n     *\n     * @return boolean true if maxPageSize can be used, false otherwise\n     */\n    public static function isLdapPageSizeAvailable($config_ldap, $check_config_value = true)\n    {\n        return (extension_loaded('ldap') && (!$check_config_value\n         || ($check_config_value && $config_ldap->fields['can_support_pagesize'])));\n    }\n\n    /**\n     * Does LDAP user already exists in the database?\n     *\n     * @param string  $name          User login/name\n     * @param integer $authldaps_id  LDAP authentication server ID\n     * @param ?string $sync          Sync field\n     *\n     * @return false|User\n     */\n    public function getLdapExistingUser($name, $authldaps_id, $sync = null)\n    {\n        /** @var \\DBmysql $DB */\n        global $DB;\n        $user = new User();\n\n        if ($sync !== null && $user->getFromDBbySyncField($DB->escape($sync))) {\n            return $user;\n        }\n\n        if ($user->getFromDBbyNameAndAuth($DB->escape($name), Auth::LDAP, $authldaps_id)) {\n            return $user;\n        }\n\n        return false;\n    }\n\n    /**\n     * Is synchronisation field used for current server\n     *\n     * @return boolean\n     */\n    public function isSyncFieldUsed()\n    {\n        if ($this->getID() <= 0) {\n            return false;\n        }\n        $count = countElementsInTable(\n            'glpi_users',\n            [\n                'auths_id'  => $this->getID(),\n                'NOT'       => ['sync_field' => null]\n            ]\n        );\n        return $count > 0;\n    }\n\n    /**\n     * Get a LDAP field value\n     *\n     * @param array  $infos LDAP entry infos\n     * @param string $field Field name to retrieve\n     *\n     * @return string\n     */\n    public static function getFieldValue($infos, $field)\n    {\n        $value = null;\n        if (array_key_exists($field, $infos)) {\n            if (is_array($infos[$field])) {\n                $value = $infos[$field][0];\n            } else {\n                $value = $infos[$field];\n            }\n        }\n        if ($field != 'objectguid') {\n            return $value;\n        }\n\n       //handle special objectguid from AD directories\n        try {\n           //prevent double encoding\n            if (!self::isValidGuid($value)) {\n                $value = self::guidToString($value);\n                if (!self::isValidGuid($value)) {\n                    throw new \\RuntimeException('Not an objectguid!');\n                }\n            }\n        } catch (\\Throwable $e) {\n           //well... this is not an objectguid apparently\n            $value = $infos[$field];\n        }\n\n        return $value;\n    }\n\n    /**\n     * Converts a string representation of an objectguid to hexadecimal\n     * Used to build filters\n     *\n     * @param string $guid_str String representation\n     *\n     * @return string\n     */\n    public static function guidToHex($guid_str)\n    {\n        $str_g = explode('-', $guid_str);\n\n        $str_g[0] = strrev($str_g[0]);\n        $str_g[1] = strrev($str_g[1]);\n        $str_g[2] = strrev($str_g[2]);\n\n        $guid_hex = '\\\\';\n        $strrev = 0;\n        foreach ($str_g as $str) {\n            for ($i = 0; $i < strlen($str) + 2; $i++) {\n                if ($strrev < 3) {\n                    $guid_hex .= strrev(substr($str, 0, 2)) . '\\\\';\n                } else {\n                    $guid_hex .= substr($str, 0, 2) . '\\\\';\n                }\n                $str = substr($str, 2);\n            }\n            if ($strrev < 3) {\n                $guid_hex .= strrev($str);\n            } else {\n                $guid_hex .= $str;\n            }\n            $strrev++;\n        }\n        return $guid_hex;\n    }\n\n    /**\n     * Converts binary objectguid to string representation\n     *\n     * @param mixed $guid_bin Binary objectguid from AD\n     *\n     * @return string\n     */\n    public static function guidToString($guid_bin)\n    {\n        $guid_hex = unpack(\"H*hex\", $guid_bin);\n        $hex = $guid_hex[\"hex\"];\n\n        $hex1 = substr($hex, -26, 2) . substr($hex, -28, 2) . substr($hex, -30, 2) . substr($hex, -32, 2);\n        $hex2 = substr($hex, -22, 2) . substr($hex, -24, 2);\n        $hex3 = substr($hex, -18, 2) . substr($hex, -20, 2);\n        $hex4 = substr($hex, -16, 4);\n        $hex5 = substr($hex, -12, 12);\n\n        $guid_str = $hex1 . \"-\" . $hex2 . \"-\" . $hex3 . \"-\" . $hex4 . \"-\" . $hex5;\n        return $guid_str;\n    }\n\n    /**\n     * Check if text representation of an objectguid is valid\n     *\n     * @param string $guid_str String representation\n     *\n     * @return boolean\n     */\n    public static function isValidGuid($guid_str)\n    {\n        return (bool) preg_match('/^([0-9a-fA-F]){8}(-([0-9a-fA-F]){4}){3}-([0-9a-fA-F]){12}$/', $guid_str);\n    }\n\n    /**\n     * Get the list of LDAP users to add/synchronize\n     * When importing, already existing users will be filtered\n     *\n     * @param array   $values        possible options:\n     *          - authldaps_id ID of the server to use\n     *          - mode user to synchronise or add?\n     *          - ldap_filter ldap filter to use\n     *          - basedn force basedn (default authldaps_id one)\n     *          - order display order\n     *          - begin_date begin date to time limit\n     *          - end_date end date to time limit\n     *          - script true if called by an external script\n     * @param array   $results       result stats\n     * @param boolean $limitexceeded limit exceeded exception\n     *\n     * @return array\n     */\n    public static function getUsers($values, &$results, &$limitexceeded)\n    {\n        $users = [];\n        $ldap_users    = self::getAllUsers($values, $results, $limitexceeded);\n\n        $config_ldap   = new AuthLDAP();\n        $config_ldap->getFromDB($values['authldaps_id']);\n\n        if (!is_array($ldap_users) || count($ldap_users) == 0) {\n            return $users;\n        }\n\n\n        $sync_field = $config_ldap->isSyncFieldEnabled() ? $config_ldap->fields['sync_field'] : null;\n\n        foreach ($ldap_users as $userinfos) {\n            $user_to_add = [];\n            $user = new User();\n\n            $user_sync_field = $config_ldap->isSyncFieldEnabled() && isset($userinfos[$sync_field])\n                ? self::getFieldValue($userinfos, $sync_field)\n                : null;\n\n            $user = $config_ldap->getLdapExistingUser(\n                $userinfos['user'],\n                $values['authldaps_id'],\n                $user_sync_field\n            );\n            if (isset($_SESSION['ldap_import']) && !$_SESSION['ldap_import']['mode'] && $user) {\n                continue;\n            }\n            $user_to_add['link'] = $userinfos[\"user\"];\n            if (isset($userinfos['id']) && User::canView()) {\n                $user_to_add['id']   = $userinfos['id'];\n                $user_to_add['name'] = $user->fields['name'];\n                $user_to_add['link'] = Toolbox::getItemTypeFormURL('User') . '?id=' . $userinfos['id'];\n            }\n\n            $user_to_add['stamp']      = (isset($userinfos[\"timestamp\"])) ? $userinfos[\"timestamp\"] : '';\n            $user_to_add['date_sync']  = (isset($userinfos[\"date_sync\"])) ? $userinfos[\"date_sync\"] : '';\n\n            $user_to_add['uid'] = $userinfos['user'];\n            if ($config_ldap->isSyncFieldEnabled()) {\n                if (isset($userinfos[$sync_field])) {\n                    $user_to_add['uid'] = self::getFieldValue($userinfos, $sync_field);\n                }\n\n                $field_for_sync = $config_ldap->getLdapIdentifierToUse();\n                if (isset($userinfos[$field_for_sync])) {\n                    $user_to_add['sync_field'] = $userinfos[$field_for_sync];\n                }\n            }\n\n            $users[] = $user_to_add;\n        }\n\n        return $users;\n    }\n\n    public function checkFilesExist(&$input)\n    {\n        if (\n            isset($input['tls_certfile'])\n            && (!Filesystem::isFilepathSafe($input['tls_certfile']) || !file_exists($input['tls_certfile']))\n        ) {\n            Session::addMessageAfterRedirect(\n                __('TLS certificate path is incorrect'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        if (\n            isset($input['tls_keyfile'])\n            && (!Filesystem::isFilepathSafe($input['tls_keyfile']) || !file_exists($input['tls_keyfile']))\n        ) {\n            Session::addMessageAfterRedirect(\n                __('TLS key file path is incorrect'),\n                false,\n                ERROR\n            );\n            return false;\n        }\n\n        return true;\n    }\n\n\n    public static function getIcon()\n    {\n        return \"far fa-address-book\";\n    }\n\n    final public static function buildError($ds, string $message): string\n    {\n        $diag_message = '';\n        $err_message  = '';\n        $message = sprintf(\n            \"%s\\nerror: %s (%s)%s%s\",\n            $message,\n            ldap_error($ds),\n            ldap_errno($ds),\n            (ldap_get_option($ds, LDAP_OPT_DIAGNOSTIC_MESSAGE, $diag_message) ? \"\\nextended error: \" . $diag_message : ''),\n            (ldap_get_option($ds, LDAP_OPT_ERROR_STRING, $err_message) ? \"\\nerr string: \" . $err_message : '')\n        );\n        return $message;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace Glpi\\Toolbox;\n\nfinal class Filesystem\n{\n    /**\n     * Checks if the file with given path can be written.\n     *\n     * @param string $path\n     *\n     * @return bool\n     */\n    public static function canWriteFile(string $path): bool\n    {\n        if (file_exists($path)) {\n            return is_writable($path);\n        }\n\n        // If the file does not exists, try to create it.\n        $file = @fopen($path, 'c');\n        if ($file === false) {\n            return false;\n        }\n        @fclose($file);\n\n        // Remove the file, as presence of an empty file may not be handled properly.\n        @unlink($path);\n\n        return true;\n    }\n\n    /**\n     * Checks if the files with given paths can be written.\n     *\n     * @param string[] $paths\n     *\n     * @return bool\n     */\n    public static function canWriteFiles(array $paths): bool\n    {\n        foreach ($paths as $path) {\n            if (!self::canWriteFile($path)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if the given file path is safe.\n     *\n     * @param string $path\n     * @param string $restricted_directory\n     *\n     * @return bool\n     */\n    public static function isFilepathSafe(string $path, ?string $restricted_directory = null): bool\n    {\n        $parsed_scheme = parse_url($path, PHP_URL_SCHEME);\n\n        if ($parsed_scheme === 'file') {\n            // If scheme is `file://`, parse the path again to validate that it does not contains itself\n            // an unexpected scheme.\n            $path = parse_url($path, PHP_URL_PATH);\n            $parsed_scheme = parse_url($path, PHP_URL_SCHEME);\n        }\n\n        if ($parsed_scheme !== null && preg_match('/^[a-z]$/i', $parsed_scheme) !== 1) {\n            // As soon as the path contains a scheme, it is not considered as safe,\n            // unless the scheme is 1 letter (corresponds to a drive letter on Windows system).\n            return false;\n        }\n\n        if ($restricted_directory === null) {\n            // All directories are allowed.\n            return true;\n        }\n\n        $restricted_directory = self::normalizePath($restricted_directory);\n        if (!str_ends_with($restricted_directory, '/')) {\n            // Ensure directory ends with a `/`, to prevent false positives:\n            // - /path/to/dir/file is inside /path/to/dir\n            // - /path/to/dir_file is not inside /path/to/dir\n            $restricted_directory .= '/';\n        }\n\n        return str_starts_with(self::normalizePath($path), $restricted_directory);\n    }\n\n    /**\n     * Normalize a path, to make comparisons and relative paths computation easier.\n     *\n     * @param string $path\n     * @return string\n     */\n    private static function normalizePath(string $path): string\n    {\n        $realpath = realpath($path);\n        if ($realpath !== false) {\n            // Use realpath if possible (not always possible, for instance when file not exists).\n            $path = $realpath;\n        }\n\n        // Normalize all directory separators to `/`.\n        $path = preg_replace('/\\\\\\/', '/', $path);\n        return $path;\n    }\n}\n", "<?php\n\n/**\n * ---------------------------------------------------------------------\n *\n * GLPI - Gestionnaire Libre de Parc Informatique\n *\n * http://glpi-project.org\n *\n * @copyright 2015-2023 Teclib' and contributors.\n * @copyright 2003-2014 by the INDEPNET Development Team.\n * @licence   https://www.gnu.org/licenses/gpl-3.0.html\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n * ---------------------------------------------------------------------\n */\n\nnamespace tests\\units\\Glpi\\Toolbox;\n\nuse org\\bovigo\\vfs\\vfsStream;\n\nclass Filesystem extends \\GLPITestCase\n{\n    public function testCanWriteFile(): void\n    {\n        $config_dir = vfsStream::setup('config');\n\n        $this->newTestedInstance();\n\n        // Files can be written when they not exists and directory is writable\n        $config_dir->chmod(0700);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(true);\n\n        // Files cannot be written when they not exists and directory is not writable\n        $config_dir->chmod(0500);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(false);\n\n        // Files cannot be written when they exists but are not writable (even if directory is writable)\n        $config_dir->chmod(0700);\n        $file1 = vfsStream::newFile('config_db.php', 0400)->at($config_dir)->setContent('<?php //my config file');\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(false);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(false);\n\n        // Files can be written when they exists and are writable (even if directory is not writable)\n        $file1->chmod(0600);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/config_db.php')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFile(vfsStream::url('config/whatever.yml')))->isEqualTo(true);\n        $this->boolean($this->testedInstance->canWriteFiles([vfsStream::url('config/config_db.php'), vfsStream::url('config/whatever.yml')]))->isEqualTo(true);\n    }\n\n    protected function isFilepathSafeProvider(): iterable\n    {\n        // Unix paths and file scheme\n        foreach (['', 'file://'] as $prefix) {\n            yield [\n                'path'                  => $prefix . '/path/to/whatever/file',\n                'restricted_directory'  => null,\n                'is_safe'               => true,\n            ];\n            yield [\n                'path'                  => $prefix . '/path/to/whatever/file',\n                'restricted_directory'  => '/path/to/whatever',\n                'is_safe'               => true,\n            ];\n            yield [\n                'path'                  => $prefix . '/path/to/whatever/file/in/a/subdir',\n                'restricted_directory'  => '/path/to/whatever',\n                'is_safe'               => true,\n            ];\n            yield [\n                'path'                  => $prefix . '/path/to/whatever_file',\n                'restricted_directory'  => '/path/to/whatever',\n                'is_safe'               => false,\n            ];\n            yield [\n                'path'                  => $prefix . '/path/to/whatever/file',\n                'restricted_directory'  => '/safedir',\n                'is_safe'               => false,\n            ];\n        }\n\n        // Windows paths (`\\` separator)\n        yield [\n            'path'                  => 'C:\\\\path\\\\to\\\\whatever\\\\file',\n            'restricted_directory'  => null,\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'C:\\\\path\\\\to\\\\whatever\\\\file',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'C:\\\\path\\\\to\\\\whatever\\\\file\\\\in\\\\a\\\\subdir',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'C:\\\\path\\\\to\\\\whatever_file',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => false,\n        ];\n        yield [\n            'path'                  => 'C:\\\\path\\\\to\\\\whatever\\\\file',\n            'restricted_directory'  => 'C:\\\\safedir',\n            'is_safe'               => false,\n        ];\n\n        // Windows path on file scheme\n        yield [\n            'path'                  => 'file:///C:/path/to/whatever/file',\n            'restricted_directory'  => null,\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'file:///C:/path/to/whatever/file',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'file:///C:/path/to/whatever/file/in/a/subdir',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => true,\n        ];\n        yield [\n            'path'                  => 'file:///C:/path/to/whatever_file',\n            'restricted_directory'  => 'C:\\\\path\\\\to\\\\whatever',\n            'is_safe'               => false,\n        ];\n        yield [\n            'path'                  => 'file:///C:/path/to/whatever/file',\n            'restricted_directory'  => 'C:\\\\safedir',\n            'is_safe'               => false,\n        ];\n\n        // Streams and remote paths\n        foreach (['ftp', 'http', 'https', 'phar', 'whateverstream'] as $scheme) {\n            yield [\n                'path'                  => $scheme . '://path/to/whatever/file',\n                'restricted_directory'  => null,\n                'is_safe'               => false, // path using scheme is never considered to be safe\n            ];\n\n            yield [\n                'path'                  => $scheme . '://path/to/whatever/file',\n                'restricted_directory'  => $scheme . '://path/to/whatever',\n                'is_safe'               => false, // path using scheme is never considered to be safe\n            ];\n        }\n    }\n\n    /**\n     * @dataProvider isFilepathSafeProvider\n     */\n    public function testIsFilepathSafe(string $path, ?string $restricted_directory, bool $is_safe): void\n    {\n        $this->newTestedInstance();\n        $this->boolean($this->testedInstance->isFilepathSafe($path, $restricted_directory))->isEqualTo($is_safe);\n    }\n}\n"], "filenames": ["src/AuthLDAP.php", "src/Toolbox/Filesystem.php", "tests/units/Glpi/Toolbox/Filesystem.php"], "buggy_code_start_loc": [37, 38, 42], "buggy_code_end_loc": [4786, 82, 72], "fixing_code_start_loc": [38, 38, 42], "fixing_code_end_loc": [4796, 143, 183], "type": "CWE-74", "message": "GLPI is a free asset and IT management software package. Starting in version 10.0.0 and prior to version 10.0.11, on PHP 7.4 only, the LDAP server configuration form can be used to execute arbitrary code previously uploaded as a GLPI document. Version 10.0.11 contains a patch for the issue.", "other": {"cve": {"id": "CVE-2023-46726", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-13T19:15:07.830", "lastModified": "2023-12-18T18:59:15.213", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a free asset and IT management software package. Starting in version 10.0.0 and prior to version 10.0.11, on PHP 7.4 only, the LDAP server configuration form can be used to execute arbitrary code previously uploaded as a GLPI document. Version 10.0.11 contains a patch for the issue."}, {"lang": "es", "value": "GLPI es un paquete de software gratuito de gesti\u00f3n de activos y TI. A partir de la versi\u00f3n 10.0.0 y anteriores a la versi\u00f3n 10.0.11, solo en PHP 7.4, el formulario de configuraci\u00f3n del servidor LDAP se puede utilizar para ejecutar c\u00f3digo arbitrario cargado previamente como un documento GLPI. La versi\u00f3n 10.0.11 contiene un parche para el problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.0.11", "matchCriteriaId": "26DF2F46-6455-4440-BB5D-75FEB6798705"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi/commit/42ba2b031bec0b3889317db25f3adf9080fc11b2", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/glpi-project/glpi/releases/tag/10.0.11", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/glpi-project/glpi/security/advisories/GHSA-qc92-gxc6-5f95", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi/commit/42ba2b031bec0b3889317db25f3adf9080fc11b2"}}