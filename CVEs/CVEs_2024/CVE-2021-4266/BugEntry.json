{"buggy_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>pentaho</groupId>\n    <artifactId>cpf-plugin</artifactId>\n    <version>9.3.0.0-SNAPSHOT</version>\n  </parent>\n\n  <artifactId>cpf-core</artifactId>\n  <packaging>bundle</packaging>\n\n  <dependencies>\n    <dependency>\n      <groupId>commons-io</groupId>\n      <artifactId>commons-io</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-logging</groupId>\n      <artifactId>commons-logging</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-lang</groupId>\n      <artifactId>commons-lang</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-vfs</groupId>\n      <artifactId>commons-vfs</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.dom4j</groupId>\n      <artifactId>dom4j</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.pentaho</groupId>\n      <artifactId>json</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mozilla</groupId>\n      <artifactId>rhino</artifactId>\n    </dependency>\n\n    <!-- Marking Spring as optional because is only being used by 'AbstractBeanFactory.java' and this class is not used in all assemblies -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <!-- region - Needed for testing -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-expression</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <!-- endregion -->\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-all</artifactId>\n    </dependency>\n  </dependencies>\n\n</project>\n", "/*!\n * Copyright 2002 - 2019 Webdetails, a Hitachi Vantara company.  All rights reserved.\n *\n * This software was developed by Webdetails and is provided under the terms\n * of the Mozilla Public License, Version 2.0, or any later version. You may not use\n * this file except in compliance with the license. If you need a copy of the license,\n * please go to  http://mozilla.org/MPL/2.0/. The Initial Developer is Webdetails.\n *\n * Software distributed under the Mozilla Public License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to\n * the license for the specific language governing your rights and limitations.\n */\npackage pt.webdetails.cpf.packager;\n\nimport pt.webdetails.cpf.context.api.IUrlProvider;\nimport pt.webdetails.cpf.packager.dependencies.CssMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.Dependency;\nimport pt.webdetails.cpf.packager.dependencies.FileDependency;\nimport pt.webdetails.cpf.packager.dependencies.JsMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.MapDependency;\nimport pt.webdetails.cpf.packager.dependencies.PackagedFileDependency;\nimport pt.webdetails.cpf.packager.dependencies.SnippetDependency;\nimport pt.webdetails.cpf.packager.origin.PathOrigin;\nimport pt.webdetails.cpf.packager.origin.StaticSystemOrigin;\nimport pt.webdetails.cpf.repository.api.IContentAccessFactory;\nimport pt.webdetails.cpf.repository.api.IRWAccess;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * A set of css|js files that can be packaged into a single file.<br> Encompasses former functionality of\n * DependenciesEngine/Packager<br> will be made abstract, more specific subclasses\n */\npublic class DependenciesPackage {\n\n  public enum PackagingMode {\n    MINIFY, CONCATENATE\n  }\n\n  public enum PackageType {\n    CSS, JS, MAP\n  }\n\n  private String name;\n  private PackageType type;\n\n  protected Map<String, FileDependency> fileDependencies;\n\n  protected PackagedFileDependency packagedDependency;\n  protected Object packagingLock = new Object();\n\n  private Map<String, SnippetDependency> rawDependencies;\n\n  protected IContentAccessFactory factory;\n  protected IUrlProvider urlProvider;\n\n  /**\n   * @param name\n   * @param type\n   * @param factory\n   */\n  public DependenciesPackage( String name, PackageType type, IContentAccessFactory factory, IUrlProvider urlProvider ) {\n    this.name = name;\n    this.fileDependencies = new LinkedHashMap<>();\n    this.rawDependencies = new LinkedHashMap<>();\n    this.type = type;\n    this.factory = factory;\n    this.urlProvider = urlProvider;\n  }\n\n  /**\n   * Registers a dependency in this package\n   *\n   * @param name\n   * @param version\n   * @param origin\n   * @param path\n   * @return\n   */\n  public boolean registerFileDependency( String name, String version, PathOrigin origin, String path ) {\n    final FileDependency dependency = new FileDependency( version, origin, path, this.urlProvider );\n\n    synchronized ( this.packagingLock ) {\n      if ( registerDependency( name, dependency, this.fileDependencies ) ) {\n        //invalidate packaged if there\n        this.packagedDependency = null;\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public boolean registerRawDependency( String name, String version, String contents ) {\n    final SnippetDependency snip = new SnippetDependency( version, contents );\n\n    return registerDependency( name, snip, this.rawDependencies );\n  }\n\n  protected <T extends Dependency> boolean registerDependency( String name, T dependency, Map<String, T> registry ) {\n    final Dependency dep = registry.get( name );\n    if ( dep == null || dep.isOlderVersionThan( dependency ) ) {\n      registry.put( name, dependency );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get references to the dependencies with customized output.\n   *\n   * @param format     receives file path strings\n   * @param isPackaged if to return a single compressed file\n   * @return script or link tag with file references\n   */\n  public String getDependencies( StringFilter format, boolean isPackaged ) {\n    return isPackaged ? getPackagedDependency( format, null ) : getUnpackagedDependencies( format, null );\n  }\n\n  public String getRawDependencies( boolean isPackaged ) {\n    StringBuilder sb = new StringBuilder();\n\n    for ( SnippetDependency dep : rawDependencies.values() ) {\n      sb.append( dep.getContents() );\n      sb.append( '\\n' );\n    }\n\n    return sb.toString();\n  }\n\n  /**\n   * Get references to the dependencies.\n   *\n   * @param isPackaged if to return a single compressed file\n   * @return script or link tag with file references\n   */\n  public String getDependencies( boolean isPackaged ) {\n    return getDependencies( getDefaultStringFilter( type ), isPackaged );\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Get references to the dependencies according to files.\n   *\n   * @param isPackaged if to return a single compressed file\n   * @param filter     used for validating the dependency files to be include\n   * @return script or link tag with file references\n   */\n  public String getDependencies( boolean isPackaged, IDependencyInclusionFilter filter ) {\n    return getDependencies( getDefaultStringFilter( type ), isPackaged, filter );\n  }\n\n  /**\n   * Get references to the dependencies that match the values of files with customized output.\n   *\n   * @param format     receives file path strings\n   * @param isPackaged if to return a single compressed file\n   * @param filter     used for validating the dependency files to be include\n   * @return script or link tag with file references\n   */\n  public String getDependencies( StringFilter format, boolean isPackaged, IDependencyInclusionFilter filter ) {\n    return isPackaged ? getPackagedDependency( format, filter ) : getUnpackagedDependencies( format, filter );\n  }\n\n  public String getUnpackagedDependencies( StringFilter format, IDependencyInclusionFilter filter ) {\n    StringBuilder sb = new StringBuilder( \"\\n\" );\n\n    if ( filter != null ) {\n      // return dashboard component dependencies\n      for ( FileDependency dep : fileDependencies.values() ) {\n        if ( filter.include( dep ) ) {\n          sb.append( format.filter( dep.getDependencyInclude() ) );\n        }\n      }\n    } else {\n      // return all dependencies\n      for ( Dependency dep : fileDependencies.values() ) {\n        sb.append( format.filter( dep.getDependencyInclude() ) );\n      }\n    }\n\n    return sb.toString();\n  }\n\n  protected String getPackagedDependency( StringFilter format, IDependencyInclusionFilter filter ) {\n    boolean isMap = type.equals( PackageType.MAP );\n    if ( filter != null ) {\n      // return minified dashboard component dependencies\n      Map<String, FileDependency> customDependencies = new LinkedHashMap<>();\n      for ( FileDependency dep : fileDependencies.values() ) {\n        if ( filter.include( dep ) ) {\n          customDependencies.put( dep.getDependencyInclude(), dep );\n        }\n      }\n\n      String packagedPath = isMap ? name : name + \".\" + type.toString().toLowerCase();\n      String baseDir = type.toString().toLowerCase();\n\n      IRWAccess writer = factory.getPluginSystemWriter( baseDir );\n      PathOrigin origin = new StaticSystemOrigin( baseDir );\n\n      switch ( type ) {\n        case CSS:\n          return format.filter(\n            new CssMinifiedDependency( origin, packagedPath, writer, customDependencies.values(), urlProvider )\n              .getDependencyInclude() );\n        case JS:\n          return format.filter(\n            new JsMinifiedDependency( origin, packagedPath, writer, customDependencies.values(), urlProvider )\n              .getDependencyInclude() );\n        case MAP:\n          return format.filter( new MapDependency( origin, packagedPath, writer, customDependencies.values(),\n            urlProvider ).getDependencyInclude() );\n        default:\n          throw new IllegalStateException( getClass().getSimpleName() + \" does not have a recognized type: \" + type );\n      }\n    } else {\n      // set packagedDependency if null and/or return all dependencies minified\n      synchronized ( packagingLock ) {\n        if ( packagedDependency == null ) {\n          String packagedPath = isMap ? name : name + \".\" + type.toString().toLowerCase();\n          String baseDir = isMap ? \"css\" : type.toString().toLowerCase();\n\n          IRWAccess writer = factory.getPluginSystemWriter( baseDir );\n          PathOrigin origin = new StaticSystemOrigin( baseDir );\n\n          switch ( type ) {\n            case CSS:\n              packagedDependency =\n                new CssMinifiedDependency( origin, packagedPath, writer, fileDependencies.values(), urlProvider );\n              break;\n            case JS:\n              packagedDependency =\n                new JsMinifiedDependency( origin, packagedPath, writer, fileDependencies.values(), urlProvider );\n              break;\n            case MAP:\n              packagedDependency =\n                new MapDependency( origin, name, writer, fileDependencies.values(), urlProvider );\n              break;\n            default:\n              throw new IllegalStateException(\n                getClass().getSimpleName() + \" does not have a recognized type: \" + type );\n          }\n        }\n\n        return format.filter( packagedDependency.getDependencyInclude() );\n      }\n    }\n  }\n\n  public PackageType getType() {\n    return type;\n  }\n\n  public interface IDependencyInclusionFilter {\n    public boolean include( Dependency dependency );\n  }\n\n  public StringFilter getDefaultFilter() {\n    return getDefaultStringFilter( this.type );\n  }\n\n  private static StringFilter getDefaultStringFilter( PackageType type ) {\n    switch ( type ) {\n      case CSS:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            return String.format(\n              \"\\t\\t<link href=\\\"%s%s\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n\",\n              baseUrl, baseUrl.endsWith( \"/\" ) && input.startsWith( \"/\" ) ? input.replaceFirst( \"/\", \"\" ) : input );\n          }\n        };\n      case JS:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            return String.format(\n              \"\\t\\t<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"%s%s\\\"></script>\\n\",\n              baseUrl, baseUrl.endsWith( \"/\" ) && input.startsWith( \"/\" ) ? input.replaceFirst( \"/\", \"\" ) : input );\n          }\n        };\n      case MAP:\n        return new StringFilter() {\n          @Override\n          public String filter( String input ) {\n            return \"\";\n          }\n\n          @Override\n          public String filter( String input, String absRoot ) {\n            return \"\";\n          }\n        };\n      default:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            return baseUrl + input + \"\\n\";\n          }\n        };\n    }\n  }\n\n}\n", "/*!\n * Copyright 2002 - 2017 Webdetails, a Hitachi Vantara company.  All rights reserved.\n *\n * This software was developed by Webdetails and is provided under the terms\n * of the Mozilla Public License, Version 2.0, or any later version. You may not use\n * this file except in compliance with the license. If you need a copy of the license,\n * please go to  http://mozilla.org/MPL/2.0/. The Initial Developer is Webdetails.\n *\n * Software distributed under the Mozilla Public License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to\n * the license for the specific language governing your rights and limitations.\n */\n\npackage pt.webdetails.cpf.packager;\n\nimport junit.framework.TestCase;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\nimport pt.webdetails.cpf.context.api.IUrlProvider;\nimport pt.webdetails.cpf.packager.dependencies.CssMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.Dependency;\nimport pt.webdetails.cpf.packager.dependencies.JsMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.MapDependency;\nimport pt.webdetails.cpf.packager.origin.PathOrigin;\nimport pt.webdetails.cpf.repository.api.IContentAccessFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.mockito.Mockito.*;\n\npublic class DependenciesPackageTest extends TestCase {\n\n  private static DependenciesPackage jsDepPackage;\n  private static DependenciesPackage cssDepPackage;\n  private static DependenciesPackage mapDepPackage;\n\n  private static final String JS_PACKAGE_NAME = \"js-package\";\n  private static final String CSS_PACKAGE_NAME = \"css-package\";\n  private static final String MAP_FILE_NAME = \"map-file.css.map\";\n\n  private static IContentAccessFactory mockFactory;\n  private static IUrlProvider mockUrlProvider;\n  private static PathOrigin mockPathOrigin;\n\n  @Before\n  protected void setUp() throws Exception {\n    mockFactory = mock( IContentAccessFactory.class );\n    mockUrlProvider = mock( IUrlProvider.class );\n    mockPathOrigin = mock( PathOrigin.class );\n    when( mockPathOrigin.getUrl( anyString(), any( IUrlProvider.class ) ) ).thenAnswer( new Answer<String>() {\n      @Override\n      public String answer( InvocationOnMock invocation ) throws Throwable {\n        return (String) invocation.getArguments()[0];\n      }\n    } );\n\n    jsDepPackage =\n      new DependenciesPackage( JS_PACKAGE_NAME, DependenciesPackage.PackageType.JS, mockFactory, mockUrlProvider );\n\n    cssDepPackage =\n      new DependenciesPackage( CSS_PACKAGE_NAME, DependenciesPackage.PackageType.CSS, mockFactory, mockUrlProvider );\n\n    mapDepPackage =\n      new DependenciesPackage( MAP_FILE_NAME, DependenciesPackage.PackageType.MAP, mockFactory, mockUrlProvider );\n\n\n  }\n\n  @Test\n  public void testRegisterFileDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    String[] filePaths = new String[]{\"path1\", \"path2\"};\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerFileDependency(\n          fileNames[ i ] + \".js\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n      assertTrue( cssDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n      assertTrue( mapDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n    }\n\n  }\n\n  @Test\n  public void testRegisterRawDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    String[] fileContents = new String[]{\"content1\", \"content2\"};\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerRawDependency(\n          fileNames[ i ] + \".js\", fileVersions[ i ], fileContents[ i ] ) );\n      assertTrue( cssDepPackage.registerRawDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], fileContents[ i ] ) );\n      assertTrue( mapDepPackage.registerRawDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], fileContents[ i ] ) );\n    }\n\n  }\n\n  @Test\n  public void testRegisterDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    Map<String, Dependency> registry = new HashMap<String, Dependency>();\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerDependency(\n          fileNames[ i ] + \".js\", mock( JsMinifiedDependency.class ), registry ) );\n      assertTrue( cssDepPackage.registerDependency(\n          fileNames[ i ] + \".css\", mock( CssMinifiedDependency.class ), registry ) );\n      assertTrue( mapDepPackage.registerDependency(\n          fileNames[ i ] + \".css.map\", mock( MapDependency.class ), registry ) );\n    }\n    assertEquals( fileNames.length * 3, registry.size() );\n  }\n\n\n  @Test\n  public void testGetDependencies() {\n\n\n    String jsPackagedDeps = jsDepPackage.getDependencies( true ).trim();\n    assertEquals( \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"/js/\"\n        + JS_PACKAGE_NAME + \".js\\\"></script>\", jsPackagedDeps );\n\n    String cssPackagedDeps = cssDepPackage.getDependencies( true ).trim();\n    assertEquals( \"<link href=\\\"/css/\"\n        + CSS_PACKAGE_NAME + \".css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\", cssPackagedDeps );\n\n    String mapPackagedDeps = mapDepPackage.getDependencies( true ).trim();\n    assertEquals( \"\", mapPackagedDeps );\n\n    String[] filePaths = new String[]{\"path1\", \"path2\"};\n    addFileDependencies( filePaths );\n\n    String jsUnpackagedDeps = jsDepPackage.getDependencies( false ).replaceAll( \"\\n\", \"\" ).replaceAll( \"\\t\", \"\" );\n    String jsUnpackedExpected = \"\";\n    for ( int i = 0; i < filePaths.length; i++ ) {\n      jsUnpackedExpected +=\n        \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"\" + filePaths[i] + \"\\\"></script>\";\n    }\n    assertEquals( jsUnpackedExpected, jsUnpackagedDeps );\n\n    String cssUnpackagedDeps = cssDepPackage.getDependencies( false ).replaceAll( \"\\n\", \"\" ).replaceAll( \"\\t\", \"\" );\n    String cssUnpackedExpected = \"\";\n    for ( int i = 0; i < filePaths.length; i++ ) {\n      cssUnpackedExpected +=\n        \"<link href=\\\"\" + filePaths[i] + \"\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\";\n    }\n    assertEquals( cssUnpackedExpected, cssUnpackagedDeps );\n\n    String mapUnpackagedDeps = mapDepPackage.getDependencies( false ).trim();\n    assertEquals( \"\", mapUnpackagedDeps );\n\n  }\n\n  @Test\n  public void testGetDefaultFilter() {\n    StringFilter jsFilter = jsDepPackage.getDefaultFilter();\n    StringFilter cssFilter = cssDepPackage.getDefaultFilter();\n    StringFilter mapFilter = mapDepPackage.getDefaultFilter();\n\n    assertEquals( \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"JS-FILTER\\\"></script>\",\n        jsFilter.filter( \"JS-FILTER\" ).trim() );\n    assertEquals( \"<link href=\\\"CSS-FILTER\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\",\n        cssFilter.filter( \"CSS-FILTER\" ).trim() );\n    assertEquals( \"\", mapFilter.filter( \"MAP-FILTER\" ) );\n  }\n\n  private static void addFileDependencies( String[] filePaths ) {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      jsDepPackage.registerFileDependency( fileNames[ i ] + \".js\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n      cssDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n      mapDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n    }\n  }\n\n\n\n\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.pentaho</groupId>\n    <artifactId>pentaho-ce-bundle-parent-pom</artifactId>\n    <version>9.3.0.0-SNAPSHOT</version>\n  </parent>\n\n  <groupId>pentaho</groupId>\n  <artifactId>cpf-plugin</artifactId>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>assemblies</module>\n    <module>core</module>\n    <module>pentaho</module>\n    <module>pentaho-rca</module>\n    <module>osgi</module>\n    <module>rca</module>\n  </modules>\n\n  <scm>\n    <connection>scm:git:git@github.com:webdetails/${project.artifactId}.git</connection>\n    <developerConnection>scm:git:git@github.com:webdetails/${project.artifactId}.git</developerConnection>\n    <url>scm:git:git@github.com:webdetails/${project.artifactId}.git</url>\n  </scm>\n\n  <distributionManagement>\n    <site>\n      <id>pentaho.public.snapshot.repo</id>\n      <name>${project.artifactId}-${project.version}</name>\n      <url>dav:${site.publish.url}/${project.groupId}/cpf-plugin-${project.version}</url>\n    </site>\n  </distributionManagement>\n\n  <properties>\n    <pentaho-json.version>9.3.0.0-SNAPSHOT</pentaho-json.version>\n    <platform.version>9.3.0.0-SNAPSHOT</platform.version>\n    <mondrian.version>9.3.0.0-SNAPSHOT</mondrian.version>\n    <log4j.version>1.2.16</log4j.version>\n    <rhino.version>1.7R4</rhino.version>\n    <mockito.version>1.10.19</mockito.version>\n    <powermock.version>1.7.3</powermock.version>\n    <commons-vfs.version>1.0</commons-vfs.version>\n    <commons-io.version>2.1</commons-io.version>\n    <commons-collections.version>3.2.2</commons-collections.version>\n    <commons-lang.version>2.6</commons-lang.version>\n    <hsqldb.version>2.3.2</hsqldb.version>\n    <servlet-api.version>3.0.1</servlet-api.version>\n    <junit.version>4.12</junit.version>\n    <jsr311-api.version>1.1.1</jsr311-api.version>\n    <eigenbase-xom.version>1.3.1</eigenbase-xom.version>\n    <snakeyaml.version>1.7</snakeyaml.version>\n    <jaxrpc-api.version>1.1</jaxrpc-api.version>\n    <olap4j.version>1.2.0</olap4j.version>\n    <orientdb.version>1.5.0</orientdb.version>\n    <javassist.version>3.20.0-GA</javassist.version>\n    <jta.version>1.1</jta.version>\n    <google-collections.version>1.0</google-collections.version>\n    <jersey.version>1.19.1</jersey.version>\n    <jcr.version>2.0</jcr.version>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>${commons-io.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-lang</groupId>\n        <artifactId>commons-lang</artifactId>\n        <version>${commons-lang.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-vfs</groupId>\n        <artifactId>commons-vfs</artifactId>\n        <version>${commons-vfs.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.mozilla</groupId>\n        <artifactId>rhino</artifactId>\n        <version>${rhino.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>${servlet-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.pentaho</groupId>\n        <artifactId>json</artifactId>\n        <version>${pentaho-json.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>${junit.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>commons-httpclient</groupId>\n        <artifactId>commons-httpclient</artifactId>\n        <version>${commons-httpclient.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>${hsqldb.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-all</artifactId>\n        <version>${mockito.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>${mockito.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-module-junit4</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-core</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-api-mockito</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>eigenbase</groupId>\n        <artifactId>eigenbase-xom</artifactId>\n        <version>${eigenbase-xom.version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>xerces</groupId>        \n            <artifactId>xercesImpl</artifactId>\n          </exclusion>\n        </exclusions>      \n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-api</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-core</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-repository</artifactId>\n        <version>${platform.version}</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>*</artifactId>\n            <groupId>*</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-scheduler</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-extensions</artifactId>\n        <version>${platform.version}</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>*</artifactId>\n            <groupId>*</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>mondrian</artifactId>\n        <version>${mondrian.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-connections</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.jcr</groupId>\n        <artifactId>jcr</artifactId>\n        <version>${jcr.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.transaction</groupId>\n        <artifactId>jta</artifactId>\n        <version>${jta.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.xml</groupId>\n        <artifactId>jaxrpc-api</artifactId>\n        <version>${jaxrpc-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.ws.rs</groupId>\n        <artifactId>jsr311-api</artifactId>\n        <version>${jsr311-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey.contribs</groupId>\n        <artifactId>jersey-spring</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-core</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-json</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-client</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-server</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-servlet</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.yaml</groupId>\n        <artifactId>snakeyaml</artifactId>\n        <version>${snakeyaml.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.javassist</groupId>\n        <artifactId>javassist</artifactId>\n        <version>${javassist.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.olap4j</groupId>\n        <artifactId>olap4j</artifactId>\n        <version>${olap4j.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-collections</groupId>\n        <artifactId>commons-collections</artifactId>\n        <version>${commons-collections.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.google.collections</groupId>\n        <artifactId>google-collections</artifactId>\n        <version>${google-collections.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orient-commons</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-core</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-server</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-client</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-enterprise</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <profiles>\n    <profile>\n      <id>aggregate-reporting</id>\n      <activation>\n        <property>\n          <name>!skipTests</name>\n        </property>\n      </activation>\n      <reporting>\n        <plugins>\n          <plugin>\n            <artifactId>maven-jxr-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-jxr</id>\n                <reports>\n                  <report>aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n          <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-javadoc</id>\n                <reports>\n                  <report>aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n          <plugin>\n            <artifactId>maven-checkstyle-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-checkstyle</id>\n                <reports>\n                  <report>checkstyle-aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n        </plugins>\n      </reporting>\n    </profile>\n  </profiles>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>${maven-bundle-plugin.version}</version>\n          <extensions>true</extensions>\n          <configuration>\n            <instructions>\n              <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n              <Bundle-Version>${project.version}</Bundle-Version>\n            </instructions>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <repositories>\n    <repository>\n      <id>pentaho-public</id>\n      <name>Pentaho Public</name>\n      <url>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/</url>\n      <releases>\n        <enabled>true</enabled>\n        <updatePolicy>daily</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>interval:15</updatePolicy>\n      </snapshots>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>pentaho-public-plugins</id>\n      <name>Pentaho Public Plugins</name>\n      <url>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n    </pluginRepository>\n  </pluginRepositories>\n\n\n</project>\n"], "fixing_code": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>pentaho</groupId>\n    <artifactId>cpf-plugin</artifactId>\n    <version>9.3.0.0-SNAPSHOT</version>\n  </parent>\n\n  <artifactId>cpf-core</artifactId>\n  <packaging>bundle</packaging>\n\n  <dependencies>\n    <dependency>\n      <groupId>commons-io</groupId>\n      <artifactId>commons-io</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-logging</groupId>\n      <artifactId>commons-logging</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-lang</groupId>\n      <artifactId>commons-lang</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>commons-vfs</groupId>\n      <artifactId>commons-vfs</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.dom4j</groupId>\n      <artifactId>dom4j</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-annotations</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>com.fasterxml.jackson.core</groupId>\n      <artifactId>jackson-core</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.pentaho</groupId>\n      <artifactId>json</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.mozilla</groupId>\n      <artifactId>rhino</artifactId>\n    </dependency>\n\n    <!-- Marking Spring as optional because is only being used by 'AbstractBeanFactory.java' and this class is not used in all assemblies -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-beans</artifactId>\n      <optional>true</optional>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-context</artifactId>\n      <optional>true</optional>\n    </dependency>\n\n    <dependency>\n      <groupId>org.owasp.encoder</groupId>\n      <artifactId>encoder</artifactId>\n    </dependency>\n\n    <!-- region - Needed for testing -->\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-aop</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework</groupId>\n      <artifactId>spring-expression</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <!-- endregion -->\n\n    <dependency>\n      <groupId>javax.servlet</groupId>\n      <artifactId>javax.servlet-api</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n    </dependency>\n\n    <dependency>\n      <groupId>org.hsqldb</groupId>\n      <artifactId>hsqldb</artifactId>\n      <scope>test</scope>\n    </dependency>\n    <dependency>\n      <groupId>org.mockito</groupId>\n      <artifactId>mockito-all</artifactId>\n    </dependency>\n  </dependencies>\n\n</project>\n", "/*!\n * Copyright 2002 - 2021 Webdetails, a Hitachi Vantara company.  All rights reserved.\n *\n * This software was developed by Webdetails and is provided under the terms\n * of the Mozilla Public License, Version 2.0, or any later version. You may not use\n * this file except in compliance with the license. If you need a copy of the license,\n * please go to  http://mozilla.org/MPL/2.0/. The Initial Developer is Webdetails.\n *\n * Software distributed under the Mozilla Public License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to\n * the license for the specific language governing your rights and limitations.\n */\npackage pt.webdetails.cpf.packager;\n\nimport org.owasp.encoder.Encode;\nimport pt.webdetails.cpf.context.api.IUrlProvider;\nimport pt.webdetails.cpf.packager.dependencies.CssMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.Dependency;\nimport pt.webdetails.cpf.packager.dependencies.FileDependency;\nimport pt.webdetails.cpf.packager.dependencies.JsMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.MapDependency;\nimport pt.webdetails.cpf.packager.dependencies.PackagedFileDependency;\nimport pt.webdetails.cpf.packager.dependencies.SnippetDependency;\nimport pt.webdetails.cpf.packager.origin.PathOrigin;\nimport pt.webdetails.cpf.packager.origin.StaticSystemOrigin;\nimport pt.webdetails.cpf.repository.api.IContentAccessFactory;\nimport pt.webdetails.cpf.repository.api.IRWAccess;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\n/**\n * A set of css|js files that can be packaged into a single file.<br> Encompasses former functionality of\n * DependenciesEngine/Packager<br> will be made abstract, more specific subclasses\n */\npublic class DependenciesPackage {\n\n  public enum PackagingMode {\n    MINIFY, CONCATENATE\n  }\n\n  public enum PackageType {\n    CSS, JS, MAP\n  }\n\n  private String name;\n  private PackageType type;\n\n  protected Map<String, FileDependency> fileDependencies;\n\n  protected PackagedFileDependency packagedDependency;\n  protected Object packagingLock = new Object();\n\n  private Map<String, SnippetDependency> rawDependencies;\n\n  protected IContentAccessFactory factory;\n  protected IUrlProvider urlProvider;\n\n  /**\n   * @param name\n   * @param type\n   * @param factory\n   */\n  public DependenciesPackage( String name, PackageType type, IContentAccessFactory factory, IUrlProvider urlProvider ) {\n    this.name = name;\n    this.fileDependencies = new LinkedHashMap<>();\n    this.rawDependencies = new LinkedHashMap<>();\n    this.type = type;\n    this.factory = factory;\n    this.urlProvider = urlProvider;\n  }\n\n  /**\n   * Registers a dependency in this package\n   *\n   * @param name\n   * @param version\n   * @param origin\n   * @param path\n   * @return\n   */\n  public boolean registerFileDependency( String name, String version, PathOrigin origin, String path ) {\n    final FileDependency dependency = new FileDependency( version, origin, path, this.urlProvider );\n\n    synchronized ( this.packagingLock ) {\n      if ( registerDependency( name, dependency, this.fileDependencies ) ) {\n        //invalidate packaged if there\n        this.packagedDependency = null;\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public boolean registerRawDependency( String name, String version, String contents ) {\n    final SnippetDependency snip = new SnippetDependency( version, contents );\n\n    return registerDependency( name, snip, this.rawDependencies );\n  }\n\n  protected <T extends Dependency> boolean registerDependency( String name, T dependency, Map<String, T> registry ) {\n    final Dependency dep = registry.get( name );\n    if ( dep == null || dep.isOlderVersionThan( dependency ) ) {\n      registry.put( name, dependency );\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Get references to the dependencies with customized output.\n   *\n   * @param format     receives file path strings\n   * @param isPackaged if to return a single compressed file\n   * @return script or link tag with file references\n   */\n  public String getDependencies( StringFilter format, boolean isPackaged ) {\n    return isPackaged ? getPackagedDependency( format, null ) : getUnpackagedDependencies( format, null );\n  }\n\n  public String getRawDependencies( boolean isPackaged ) {\n    StringBuilder sb = new StringBuilder();\n\n    for ( SnippetDependency dep : rawDependencies.values() ) {\n      sb.append( dep.getContents() );\n      sb.append( '\\n' );\n    }\n\n    return sb.toString();\n  }\n\n  /**\n   * Get references to the dependencies.\n   *\n   * @param isPackaged if to return a single compressed file\n   * @return script or link tag with file references\n   */\n  public String getDependencies( boolean isPackaged ) {\n    return getDependencies( getDefaultStringFilter( type ), isPackaged );\n  }\n\n  public String getName() {\n    return name;\n  }\n\n  /**\n   * Get references to the dependencies according to files.\n   *\n   * @param isPackaged if to return a single compressed file\n   * @param filter     used for validating the dependency files to be include\n   * @return script or link tag with file references\n   */\n  public String getDependencies( boolean isPackaged, IDependencyInclusionFilter filter ) {\n    return getDependencies( getDefaultStringFilter( type ), isPackaged, filter );\n  }\n\n  /**\n   * Get references to the dependencies that match the values of files with customized output.\n   *\n   * @param format     receives file path strings\n   * @param isPackaged if to return a single compressed file\n   * @param filter     used for validating the dependency files to be include\n   * @return script or link tag with file references\n   */\n  public String getDependencies( StringFilter format, boolean isPackaged, IDependencyInclusionFilter filter ) {\n    return isPackaged ? getPackagedDependency( format, filter ) : getUnpackagedDependencies( format, filter );\n  }\n\n  public String getUnpackagedDependencies( StringFilter format, IDependencyInclusionFilter filter ) {\n    StringBuilder sb = new StringBuilder( \"\\n\" );\n\n    if ( filter != null ) {\n      // return dashboard component dependencies\n      for ( FileDependency dep : fileDependencies.values() ) {\n        if ( filter.include( dep ) ) {\n          sb.append( format.filter( dep.getDependencyInclude() ) );\n        }\n      }\n    } else {\n      // return all dependencies\n      for ( Dependency dep : fileDependencies.values() ) {\n        sb.append( format.filter( dep.getDependencyInclude() ) );\n      }\n    }\n\n    return sb.toString();\n  }\n\n  protected String getPackagedDependency( StringFilter format, IDependencyInclusionFilter filter ) {\n    boolean isMap = type.equals( PackageType.MAP );\n    if ( filter != null ) {\n      // return minified dashboard component dependencies\n      Map<String, FileDependency> customDependencies = new LinkedHashMap<>();\n      for ( FileDependency dep : fileDependencies.values() ) {\n        if ( filter.include( dep ) ) {\n          customDependencies.put( dep.getDependencyInclude(), dep );\n        }\n      }\n\n      String packagedPath = isMap ? name : name + \".\" + type.toString().toLowerCase();\n      String baseDir = type.toString().toLowerCase();\n\n      IRWAccess writer = factory.getPluginSystemWriter( baseDir );\n      PathOrigin origin = new StaticSystemOrigin( baseDir );\n\n      switch ( type ) {\n        case CSS:\n          return format.filter(\n            new CssMinifiedDependency( origin, packagedPath, writer, customDependencies.values(), urlProvider )\n              .getDependencyInclude() );\n        case JS:\n          return format.filter(\n            new JsMinifiedDependency( origin, packagedPath, writer, customDependencies.values(), urlProvider )\n              .getDependencyInclude() );\n        case MAP:\n          return format.filter( new MapDependency( origin, packagedPath, writer, customDependencies.values(),\n            urlProvider ).getDependencyInclude() );\n        default:\n          throw new IllegalStateException( getClass().getSimpleName() + \" does not have a recognized type: \" + type );\n      }\n    } else {\n      // set packagedDependency if null and/or return all dependencies minified\n      synchronized ( packagingLock ) {\n        if ( packagedDependency == null ) {\n          String packagedPath = isMap ? name : name + \".\" + type.toString().toLowerCase();\n          String baseDir = isMap ? \"css\" : type.toString().toLowerCase();\n\n          IRWAccess writer = factory.getPluginSystemWriter( baseDir );\n          PathOrigin origin = new StaticSystemOrigin( baseDir );\n\n          switch ( type ) {\n            case CSS:\n              packagedDependency =\n                new CssMinifiedDependency( origin, packagedPath, writer, fileDependencies.values(), urlProvider );\n              break;\n            case JS:\n              packagedDependency =\n                new JsMinifiedDependency( origin, packagedPath, writer, fileDependencies.values(), urlProvider );\n              break;\n            case MAP:\n              packagedDependency =\n                new MapDependency( origin, name, writer, fileDependencies.values(), urlProvider );\n              break;\n            default:\n              throw new IllegalStateException(\n                getClass().getSimpleName() + \" does not have a recognized type: \" + type );\n          }\n        }\n\n        return format.filter( packagedDependency.getDependencyInclude() );\n      }\n    }\n  }\n\n  public PackageType getType() {\n    return type;\n  }\n\n  public interface IDependencyInclusionFilter {\n    public boolean include( Dependency dependency );\n  }\n\n  public StringFilter getDefaultFilter() {\n    return getDefaultStringFilter( this.type );\n  }\n\n  private static StringFilter getDefaultStringFilter( PackageType type ) {\n    switch ( type ) {\n      case CSS:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            baseUrl = Encode.forHtmlAttribute( baseUrl );\n            return String.format(\n              \"\\t\\t<link href=\\\"%s%s\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\\n\",\n              baseUrl, baseUrl.endsWith( \"/\" ) && input.startsWith( \"/\" ) ? input.replaceFirst( \"/\", \"\" ) : input );\n          }\n        };\n      case JS:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            baseUrl = Encode.forHtmlAttribute( baseUrl );\n            return String.format(\n              \"\\t\\t<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"%s%s\\\"></script>\\n\",\n              baseUrl, baseUrl.endsWith( \"/\" ) && input.startsWith( \"/\" ) ? input.replaceFirst( \"/\", \"\" ) : input );\n          }\n        };\n      case MAP:\n        return new StringFilter() {\n          @Override\n          public String filter( String input ) {\n            return \"\";\n          }\n\n          @Override\n          public String filter( String input, String absRoot ) {\n            return \"\";\n          }\n        };\n      default:\n        return new StringFilter() {\n          public String filter( String input ) {\n            return filter( input, \"\" );\n          }\n\n          public String filter( String input, String baseUrl ) {\n            return Encode.forHtmlAttribute( baseUrl ) + input + \"\\n\";\n          }\n        };\n    }\n  }\n\n}\n", "/*!\n * Copyright 2002 - 2021 Webdetails, a Hitachi Vantara company.  All rights reserved.\n *\n * This software was developed by Webdetails and is provided under the terms\n * of the Mozilla Public License, Version 2.0, or any later version. You may not use\n * this file except in compliance with the license. If you need a copy of the license,\n * please go to  http://mozilla.org/MPL/2.0/. The Initial Developer is Webdetails.\n *\n * Software distributed under the Mozilla Public License is distributed on an \"AS IS\"\n * basis, WITHOUT WARRANTY OF ANY KIND, either express or  implied. Please refer to\n * the license for the specific language governing your rights and limitations.\n */\n\npackage pt.webdetails.cpf.packager;\n\nimport junit.framework.TestCase;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.mockito.invocation.InvocationOnMock;\nimport org.mockito.stubbing.Answer;\nimport pt.webdetails.cpf.context.api.IUrlProvider;\nimport pt.webdetails.cpf.packager.dependencies.CssMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.Dependency;\nimport pt.webdetails.cpf.packager.dependencies.JsMinifiedDependency;\nimport pt.webdetails.cpf.packager.dependencies.MapDependency;\nimport pt.webdetails.cpf.packager.origin.PathOrigin;\nimport pt.webdetails.cpf.repository.api.IContentAccessFactory;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static org.mockito.Mockito.*;\n\npublic class DependenciesPackageTest extends TestCase {\n\n  private static DependenciesPackage jsDepPackage;\n  private static DependenciesPackage cssDepPackage;\n  private static DependenciesPackage mapDepPackage;\n\n  private static final String JS_PACKAGE_NAME = \"js-package\";\n  private static final String CSS_PACKAGE_NAME = \"css-package\";\n  private static final String MAP_FILE_NAME = \"map-file.css.map\";\n\n  private static IContentAccessFactory mockFactory;\n  private static IUrlProvider mockUrlProvider;\n  private static PathOrigin mockPathOrigin;\n\n  @Before\n  protected void setUp() throws Exception {\n    mockFactory = mock( IContentAccessFactory.class );\n    mockUrlProvider = mock( IUrlProvider.class );\n    mockPathOrigin = mock( PathOrigin.class );\n    when( mockPathOrigin.getUrl( anyString(), any( IUrlProvider.class ) ) ).thenAnswer( new Answer<String>() {\n      @Override\n      public String answer( InvocationOnMock invocation ) throws Throwable {\n        return (String) invocation.getArguments()[0];\n      }\n    } );\n\n    jsDepPackage =\n      new DependenciesPackage( JS_PACKAGE_NAME, DependenciesPackage.PackageType.JS, mockFactory, mockUrlProvider );\n\n    cssDepPackage =\n      new DependenciesPackage( CSS_PACKAGE_NAME, DependenciesPackage.PackageType.CSS, mockFactory, mockUrlProvider );\n\n    mapDepPackage =\n      new DependenciesPackage( MAP_FILE_NAME, DependenciesPackage.PackageType.MAP, mockFactory, mockUrlProvider );\n\n\n  }\n\n  @Test\n  public void testRegisterFileDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    String[] filePaths = new String[]{\"path1\", \"path2\"};\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerFileDependency(\n          fileNames[ i ] + \".js\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n      assertTrue( cssDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n      assertTrue( mapDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] ) );\n    }\n\n  }\n\n  @Test\n  public void testRegisterRawDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    String[] fileContents = new String[]{\"content1\", \"content2\"};\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerRawDependency(\n          fileNames[ i ] + \".js\", fileVersions[ i ], fileContents[ i ] ) );\n      assertTrue( cssDepPackage.registerRawDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], fileContents[ i ] ) );\n      assertTrue( mapDepPackage.registerRawDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], fileContents[ i ] ) );\n    }\n\n  }\n\n  @Test\n  public void testRegisterDependency() {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    Map<String, Dependency> registry = new HashMap<String, Dependency>();\n\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      assertTrue( jsDepPackage.registerDependency(\n          fileNames[ i ] + \".js\", mock( JsMinifiedDependency.class ), registry ) );\n      assertTrue( cssDepPackage.registerDependency(\n          fileNames[ i ] + \".css\", mock( CssMinifiedDependency.class ), registry ) );\n      assertTrue( mapDepPackage.registerDependency(\n          fileNames[ i ] + \".css.map\", mock( MapDependency.class ), registry ) );\n    }\n    assertEquals( fileNames.length * 3, registry.size() );\n  }\n\n\n  @Test\n  public void testGetDependencies() {\n\n\n    String jsPackagedDeps = jsDepPackage.getDependencies( true ).trim();\n    assertEquals( \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"/js/\"\n        + JS_PACKAGE_NAME + \".js\\\"></script>\", jsPackagedDeps );\n\n    String cssPackagedDeps = cssDepPackage.getDependencies( true ).trim();\n    assertEquals( \"<link href=\\\"/css/\"\n        + CSS_PACKAGE_NAME + \".css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\", cssPackagedDeps );\n\n    String mapPackagedDeps = mapDepPackage.getDependencies( true ).trim();\n    assertEquals( \"\", mapPackagedDeps );\n\n    String[] filePaths = new String[]{\"path1\", \"path2\"};\n    addFileDependencies( filePaths );\n\n    String jsUnpackagedDeps = jsDepPackage.getDependencies( false ).replaceAll( \"\\n\", \"\" ).replaceAll( \"\\t\", \"\" );\n    String jsUnpackedExpected = \"\";\n    for ( int i = 0; i < filePaths.length; i++ ) {\n      jsUnpackedExpected +=\n        \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"\" + filePaths[i] + \"\\\"></script>\";\n    }\n    assertEquals( jsUnpackedExpected, jsUnpackagedDeps );\n\n    String cssUnpackagedDeps = cssDepPackage.getDependencies( false ).replaceAll( \"\\n\", \"\" ).replaceAll( \"\\t\", \"\" );\n    String cssUnpackedExpected = \"\";\n    for ( int i = 0; i < filePaths.length; i++ ) {\n      cssUnpackedExpected +=\n        \"<link href=\\\"\" + filePaths[i] + \"\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\";\n    }\n    assertEquals( cssUnpackedExpected, cssUnpackagedDeps );\n\n    String mapUnpackagedDeps = mapDepPackage.getDependencies( false ).trim();\n    assertEquals( \"\", mapUnpackagedDeps );\n\n  }\n\n  @Test\n  public void testGetDefaultFilter() {\n    StringFilter jsFilter = jsDepPackage.getDefaultFilter();\n    StringFilter cssFilter = cssDepPackage.getDefaultFilter();\n    StringFilter mapFilter = mapDepPackage.getDefaultFilter();\n\n    assertEquals( \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"JS-FILTER\\\"></script>\",\n        jsFilter.filter( \"JS-FILTER\" ).trim() );\n    assertEquals( \"<link href=\\\"CSS-FILTER\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\",\n        cssFilter.filter( \"CSS-FILTER\" ).trim() );\n    assertEquals( \"\", mapFilter.filter( \"MAP-FILTER\" ) );\n  }\n\n  @Test\n  public void testGetDefaultFilterEscapesUntrustedBaseUrl() {\n    StringFilter jsFilter = jsDepPackage.getDefaultFilter();\n    StringFilter cssFilter = cssDepPackage.getDefaultFilter();\n    StringFilter mapFilter = mapDepPackage.getDefaultFilter();\n\n    String untrustedBaseUrl = \"http://foo\\\"/\";\n\n    assertEquals( \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\" src=\\\"http://foo&#34;/JS-FILTER\\\"></script>\",\n            jsFilter.filter( \"JS-FILTER\", untrustedBaseUrl ).trim() );\n\n    assertEquals( \"<link href=\\\"http://foo&#34;/CSS-FILTER\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\" />\",\n            cssFilter.filter( \"CSS-FILTER\", untrustedBaseUrl ).trim() );\n\n    assertEquals( \"\", mapFilter.filter( \"MAP-FILTER\", untrustedBaseUrl ) );\n  }\n\n  private static void addFileDependencies( String[] filePaths ) {\n    String[] fileNames = new String[]{\"file1\", \"file2\"};\n    String[] fileVersions = new String[]{\"v1\", \"v2\"};\n    for ( int i = 0; i < fileNames.length; i++ ) {\n      jsDepPackage.registerFileDependency( fileNames[ i ] + \".js\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n      cssDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n      mapDepPackage.registerFileDependency(\n          fileNames[ i ] + \".css.map\", fileVersions[ i ], mockPathOrigin, filePaths[ i ] );\n    }\n  }\n\n\n\n\n}\n", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <modelVersion>4.0.0</modelVersion>\n\n  <parent>\n    <groupId>org.pentaho</groupId>\n    <artifactId>pentaho-ce-bundle-parent-pom</artifactId>\n    <version>9.3.0.0-SNAPSHOT</version>\n  </parent>\n\n  <groupId>pentaho</groupId>\n  <artifactId>cpf-plugin</artifactId>\n  <packaging>pom</packaging>\n\n  <modules>\n    <module>assemblies</module>\n    <module>core</module>\n    <module>pentaho</module>\n    <module>pentaho-rca</module>\n    <module>osgi</module>\n    <module>rca</module>\n  </modules>\n\n  <scm>\n    <connection>scm:git:git@github.com:webdetails/${project.artifactId}.git</connection>\n    <developerConnection>scm:git:git@github.com:webdetails/${project.artifactId}.git</developerConnection>\n    <url>scm:git:git@github.com:webdetails/${project.artifactId}.git</url>\n  </scm>\n\n  <distributionManagement>\n    <site>\n      <id>pentaho.public.snapshot.repo</id>\n      <name>${project.artifactId}-${project.version}</name>\n      <url>dav:${site.publish.url}/${project.groupId}/cpf-plugin-${project.version}</url>\n    </site>\n  </distributionManagement>\n\n  <properties>\n    <pentaho-json.version>9.3.0.0-SNAPSHOT</pentaho-json.version>\n    <platform.version>9.3.0.0-SNAPSHOT</platform.version>\n    <mondrian.version>9.3.0.0-SNAPSHOT</mondrian.version>\n    <log4j.version>1.2.16</log4j.version>\n    <rhino.version>1.7R4</rhino.version>\n    <mockito.version>1.10.19</mockito.version>\n    <powermock.version>1.7.3</powermock.version>\n    <commons-vfs.version>1.0</commons-vfs.version>\n    <commons-io.version>2.1</commons-io.version>\n    <commons-collections.version>3.2.2</commons-collections.version>\n    <commons-lang.version>2.6</commons-lang.version>\n    <hsqldb.version>2.3.2</hsqldb.version>\n    <servlet-api.version>3.0.1</servlet-api.version>\n    <junit.version>4.12</junit.version>\n    <jsr311-api.version>1.1.1</jsr311-api.version>\n    <eigenbase-xom.version>1.3.1</eigenbase-xom.version>\n    <snakeyaml.version>1.7</snakeyaml.version>\n    <jaxrpc-api.version>1.1</jaxrpc-api.version>\n    <olap4j.version>1.2.0</olap4j.version>\n    <orientdb.version>1.5.0</orientdb.version>\n    <javassist.version>3.20.0-GA</javassist.version>\n    <jta.version>1.1</jta.version>\n    <google-collections.version>1.0</google-collections.version>\n    <jersey.version>1.19.1</jersey.version>\n    <jcr.version>2.0</jcr.version>\n    <owasp.encoder.version>1.2</owasp.encoder.version>\n  </properties>\n\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>commons-io</groupId>\n        <artifactId>commons-io</artifactId>\n        <version>${commons-io.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-lang</groupId>\n        <artifactId>commons-lang</artifactId>\n        <version>${commons-lang.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-vfs</groupId>\n        <artifactId>commons-vfs</artifactId>\n        <version>${commons-vfs.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.mozilla</groupId>\n        <artifactId>rhino</artifactId>\n        <version>${rhino.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.servlet</groupId>\n        <artifactId>javax.servlet-api</artifactId>\n        <version>${servlet-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.pentaho</groupId>\n        <artifactId>json</artifactId>\n        <version>${pentaho-json.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.owasp.encoder</groupId>\n        <artifactId>encoder</artifactId>\n        <version>${owasp.encoder.version}</version>\n        <scope>compile</scope>\n        <exclusions>\n          <exclusion>\n            <artifactId>*</artifactId>\n            <groupId>*</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>junit</groupId>\n        <artifactId>junit</artifactId>\n        <version>${junit.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>commons-httpclient</groupId>\n        <artifactId>commons-httpclient</artifactId>\n        <version>${commons-httpclient.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.hsqldb</groupId>\n        <artifactId>hsqldb</artifactId>\n        <version>${hsqldb.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-all</artifactId>\n        <version>${mockito.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.mockito</groupId>\n        <artifactId>mockito-core</artifactId>\n        <version>${mockito.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-module-junit4</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-core</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>org.powermock</groupId>\n        <artifactId>powermock-api-mockito</artifactId>\n        <version>${powermock.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>eigenbase</groupId>\n        <artifactId>eigenbase-xom</artifactId>\n        <version>${eigenbase-xom.version}</version>\n        <exclusions>\n          <exclusion>\n            <groupId>xerces</groupId>        \n            <artifactId>xercesImpl</artifactId>\n          </exclusion>\n        </exclusions>      \n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-api</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-core</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-repository</artifactId>\n        <version>${platform.version}</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>*</artifactId>\n            <groupId>*</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-scheduler</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-platform-extensions</artifactId>\n        <version>${platform.version}</version>\n        <exclusions>\n          <exclusion>\n            <artifactId>*</artifactId>\n            <groupId>*</groupId>\n          </exclusion>\n        </exclusions>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>mondrian</artifactId>\n        <version>${mondrian.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>pentaho</groupId>\n        <artifactId>pentaho-connections</artifactId>\n        <version>${platform.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.jcr</groupId>\n        <artifactId>jcr</artifactId>\n        <version>${jcr.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.transaction</groupId>\n        <artifactId>jta</artifactId>\n        <version>${jta.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.xml</groupId>\n        <artifactId>jaxrpc-api</artifactId>\n        <version>${jaxrpc-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>javax.ws.rs</groupId>\n        <artifactId>jsr311-api</artifactId>\n        <version>${jsr311-api.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey.contribs</groupId>\n        <artifactId>jersey-spring</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-core</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-json</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-client</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-server</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>com.sun.jersey</groupId>\n        <artifactId>jersey-servlet</artifactId>\n        <version>${jersey.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.yaml</groupId>\n        <artifactId>snakeyaml</artifactId>\n        <version>${snakeyaml.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.javassist</groupId>\n        <artifactId>javassist</artifactId>\n        <version>${javassist.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>org.olap4j</groupId>\n        <artifactId>olap4j</artifactId>\n        <version>${olap4j.version}</version>\n      </dependency>\n      <dependency>\n        <groupId>commons-collections</groupId>\n        <artifactId>commons-collections</artifactId>\n        <version>${commons-collections.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.google.collections</groupId>\n        <artifactId>google-collections</artifactId>\n        <version>${google-collections.version}</version>\n        <scope>test</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orient-commons</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-core</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-server</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-client</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n      <dependency>\n        <groupId>com.orientechnologies</groupId>\n        <artifactId>orientdb-enterprise</artifactId>\n        <version>${orientdb.version}</version>\n        <scope>provided</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n\n  <profiles>\n    <profile>\n      <id>aggregate-reporting</id>\n      <activation>\n        <property>\n          <name>!skipTests</name>\n        </property>\n      </activation>\n      <reporting>\n        <plugins>\n          <plugin>\n            <artifactId>maven-jxr-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-jxr</id>\n                <reports>\n                  <report>aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n          <plugin>\n            <artifactId>maven-javadoc-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-javadoc</id>\n                <reports>\n                  <report>aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n          <plugin>\n            <artifactId>maven-checkstyle-plugin</artifactId>\n            <reportSets>\n              <reportSet>\n                <id>aggregate-checkstyle</id>\n                <reports>\n                  <report>checkstyle-aggregate</report>\n                </reports>\n                <inherited>false</inherited>\n              </reportSet>\n            </reportSets>\n          </plugin>\n        </plugins>\n      </reporting>\n    </profile>\n  </profiles>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.apache.felix</groupId>\n          <artifactId>maven-bundle-plugin</artifactId>\n          <version>${maven-bundle-plugin.version}</version>\n          <extensions>true</extensions>\n          <configuration>\n            <instructions>\n              <Bundle-SymbolicName>${project.artifactId}</Bundle-SymbolicName>\n              <Bundle-Version>${project.version}</Bundle-Version>\n            </instructions>\n          </configuration>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n  </build>\n\n  <repositories>\n    <repository>\n      <id>pentaho-public</id>\n      <name>Pentaho Public</name>\n      <url>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/</url>\n      <releases>\n        <enabled>true</enabled>\n        <updatePolicy>daily</updatePolicy>\n      </releases>\n      <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>interval:15</updatePolicy>\n      </snapshots>\n    </repository>\n  </repositories>\n\n  <pluginRepositories>\n    <pluginRepository>\n      <id>pentaho-public-plugins</id>\n      <name>Pentaho Public Plugins</name>\n      <url>https://repo.orl.eng.hitachivantara.com/artifactory/pnt-mvn/</url>\n      <snapshots>\n        <enabled>false</enabled>\n      </snapshots>\n      <releases>\n        <updatePolicy>never</updatePolicy>\n      </releases>\n    </pluginRepository>\n  </pluginRepositories>\n\n\n</project>\n"], "filenames": ["core/pom.xml", "core/src/main/java/pt/webdetails/cpf/packager/DependenciesPackage.java", "core/src/test/java/pt/webdetails/cpf/packager/DependenciesPackageTest.java", "pom.xml"], "buggy_code_start_loc": [65, 2, 2, 64], "buggy_code_end_loc": [65, 316, 174, 97], "fixing_code_start_loc": [66, 2, 2, 65], "fixing_code_end_loc": [71, 319, 192, 111], "type": "CWE-79", "message": "A vulnerability classified as problematic has been found in Webdetails cpf up to 9.5.0.0-80. Affected is an unknown function of the file core/src/main/java/pt/webdetails/cpf/packager/DependenciesPackage.java. The manipulation of the argument baseUrl leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 9.5.0.0-81 is able to address this issue. The name of the patch is 3bff900d228e8cae3af256b447c5d15bdb03c174. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216468.", "other": {"cve": {"id": "CVE-2021-4266", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T19:15:12.803", "lastModified": "2022-12-28T18:50:53.693", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic has been found in Webdetails cpf up to 9.5.0.0-80. Affected is an unknown function of the file core/src/main/java/pt/webdetails/cpf/packager/DependenciesPackage.java. The manipulation of the argument baseUrl leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 9.5.0.0-81 is able to address this issue. The name of the patch is 3bff900d228e8cae3af256b447c5d15bdb03c174. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216468."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hitachi:community_plugin_framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.5.0.0-81", "matchCriteriaId": "29A14452-9D0B-4F4E-B70A-38EAAE14E995"}]}]}], "references": [{"url": "https://github.com/siwapp/siwapp-ror/pull/365", "source": "cna@vuldb.com", "tags": ["Not Applicable"]}, {"url": "https://github.com/webdetails/cpf/commit/3bff900d228e8cae3af256b447c5d15bdb03c174", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/webdetails/cpf/releases/tag/9.5.0.0-81", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216468", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/webdetails/cpf/commit/3bff900d228e8cae3af256b447c5d15bdb03c174"}}