{"buggy_code": ["<?php\n\nclass UbbParser extends XUBBP\n{\n\t// \u662f\u5426\u5904\u4e8emarkdown\u6a21\u5f0f\n\tprotected $markdownEnable = false;\n\t\n    protected $parse = array(\n        /*\n        * \u4e00\u6b21\u6027\u5339\u914d\u6807\u8bb0\n        *\n        * \u5982\u679c\u6807\u8bb0\u53ef\u4ee5\u4e00\u6b21\u6027\u5339\u914d\uff0c\n        * \u4e0d\u9700\u8981\u5206\u4e3a\u5f00\u59cb\u6807\u8bb0\u548c\u7ed3\u675f\u6807\u8bb0\u5206\u522b\u5339\u914d\uff0c\n        * \u5219\u5728\u8fd9\u4e00\u6bb5\u5b9a\u4e49\uff08\u52a0\u5728\u8fd9\u4e00\u6bb5\u672b\u5c3e\uff09\u3002\n        *\n        * \u6ce8\u610f\uff1a\u4e0d\u8981\u5b9a\u4e49\u5728code\u89c4\u5219\u7684\u524d\u9762\uff0c\n        * \u56e0\u4e3a[code][/code]\u6807\u8bb0\u91cc\u7684\u5185\u5bb9\uff08\u4ee3\u7801\u5757\uff09\u4e0d\u5e94\u8be5\u8fdb\u884c\u4efb\u4f55UBB\u89e3\u6790\u3002\n        * \u6309\u7167\u987a\u5e8f\u89e3\u6790\uff0c\u987a\u5e8f\u975e\u5e38\u91cd\u8981\uff0c\u6392\u5728\u540e\u9762\u7684\u5339\u914d\u53ef\u80fd\u4f1a\u88ab\u5ffd\u7565\u3002\n        */\n\n        /*code \u4ee3\u7801\u9ad8\u4eae\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[code(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/code\\](\\n+.*|$)$!is' => array(array(1, 4), 'code', array(2, 3)),\n        /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[html(=[^\\]]*)?\\](\\n+.*?\\n+)\\[/html\\](\\n+.*|$)$!is' => array(array(1, 4), 'html', array(2, 3)),\n        /* textbox \u6587\u672c\u6846\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[text(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/text\\](\\n+.*|$)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n        /*code \u4ee3\u7801\u9ad8\u4eae*/\n        '!^(.*?)\\[code(?:=([^\\]]*))?\\](.*?)\\[/code\\](.*)$!is' => array(array(1, 4), 'code', array(2, 3)),\n        /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165 */\n        '!^(.*?)\\[html(=[^\\]]*)?\\](.*?)\\[/html\\](.*)$!is' => array(array(1, 4), 'html', array(2, 3)),\n        /* textbox \u6587\u672c\u6846 */\n        '!^(.*?)\\[text(?:=([^\\]]*))?\\](.*?)\\[/text\\](.*)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n        /* iframe \u7f51\u9875\u5d4c\u5165 */\n        '!^(.*?)<iframe((?:\\s+[a-zA-Z0-9_-]+(?:=(?:\\'[^\\']*\\'|\"[^\"]*\"|[^\\s]*))?)*)>.*?</iframe>(.*)$!is' => array(array(1, 3), 'iframe', array(2)),\n\n        /*time \u65f6\u95f4*/\n        '!^(.*?)\\[time(?:=(.*?))?\\](.*)$!is' => array(array(1, 3), 'time', array(2)),\n        /*link \u94fe\u63a5*/\n        '!^(.*?)\\[url(?:=(.*?))?\\](.*?)\\[/url\\](.*)$!is' => array(array(1, 4), 'link', array('url', 2, 3)),\n        '!^(.*?)\u300a(\u94fe\u63a5|\u5916\u94fe|\u951a)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'link', array(2, 3)),\n        /*img \u56fe\u7247*/\n        '!^(.*?)\\[img(?:=(.*?))?\\](.*?)\\[/img\\](.*)$!is' => array(array(1, 4), 'img', array('img', 2, 3)),\n        '!^(.*?)\u300a(\u56fe\u7247|\u7f29\u7565\u56fe)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'img', array(2, 3)),\n        '!^(.*?)\u300a\u8868\u60c5[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n        /*video \u89c6\u9891*/\n        '!^(.*?)\u300a\u89c6\u9891[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'video', array(2)),\n        /*videoStream \u89c6\u9891*/\n        '!^(.*?)\u300a\u89c6\u9891\u6d41[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'videoStream', array(2)),\n        /*audio \u97f3\u9891*/\n        '!^(.*?)\u300a\u97f3\u9891[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'audio', array(2)),\n        /*audioStream \u89c6\u9891*/\n        '!^(.*?)\u300a\u97f3\u9891\u6d41[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'audioStream', array(2)),\n        /*copyright \u7248\u6743*/\n        '!^(.*?)\u300a\u7248\u6743[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'copyright', array(2)),\n        /*battlenet \u6218\u7f51*/\n        '!^(.*?)\u300a\u6218\u7f51[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'battlenet', array(2)),\n        /*math \u6570\u5b66\u516c\u5f0f*/\n        '!^(.*?)\\[math\\](.*?)\\[/math\\](.*)$!is' => array(array(1, 3), 'math', array('math', 2)),\n        '!^(.*?)\u300a\u516c\u5f0f[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'math', array('mathzh', 2)),\n        /*tab \u56db\u4e2a\u7a7a\u683c*/\n        '!^(.*?)\\[tab\\](.*)$!is' => array(array(1, 2), 'tab', array(2)),\n        /*empty UBB\u8f6c\u4e49*/\n        '!^(.*?)\\[empty\\](.*)$!is' => array(array(1, 2), 'emptyTag', array(2)),\n        /*newline \u6362\u884c*/\n        //'!^(.*?)(\\n)(.*)$!is' => array(array(1,3), 'newline', array(2)),\n        '!^(.*?)\\[([bh]r)\\](.*)$!is' => array(array(1, 3), 'newline', array(2)),\n        //'!^(.*?)(///|\uff1c\uff1c\uff1c|\uff1e\uff1e\uff1e)(.*)$!is' => array(array(1, 3), 'newline', array(2)),\n\n        /*\n        * \u5f00\u59cb\u6807\u8bb0\n        *\n        * \u8fd9\u4e00\u6bb5\u5e94\u8be5\u53ea\u5305\u62ec\u5f00\u59cb\u6807\u8bb0\uff0c\n        * \u7ed3\u675f\u6807\u8bb0\u4e0d\u5e94\u5b9a\u4e49\u5728\u8fd9\u4e00\u6bb5\uff0c\n        * \u5426\u5219\u4f1a\u51fa\u73b0\u4ee3\u7801\u5d4c\u5957\u9519\u8bef\u3002\n        */\n        /*layoutStart \u5e03\u5c40\u5f00\u59cb*/\n        '!^(.*?)\\[(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutStart', array(2)),\n        /*style \u6837\u5f0f\u5f00\u59cb*/\n        '!^(.*?)\\[(color|div|span)=(.*?)\\](.*)$!is' => array(array(1, 4), 'styleStart', array(2, 3)),\n        /*\n        * \u7ed3\u675f\u6807\u8bb0\n        *\n        * \u7ed3\u675f\u6807\u8bb0\u5e94\u8be5\u4ee5\u4e0e\u5f00\u59cb\u6807\u8bb0\u76f8\u53cd\u7684\u987a\u5e8f\u51fa\u73b0\uff0c\n        * \u5c31\u50cf[b][i][/i][/b]\u4e00\u6837\u6392\u5217\u3002\n        * \u5f53\u7136\u8fd9\u4e0d\u662f\u5f3a\u5236\u7684\uff0c\u53ea\u662f\u8fd9\u6837\u6392\u6bd4\u8f83\u7f8e\u89c2\u3002\n        *\n        * \u8fd9\u4e00\u6bb5\u5e94\u8be5\u53ea\u6709\u7ed3\u675f\u6807\u8bb0\uff0c\n        * \u5f00\u59cb\u6807\u8bb0\u4e0d\u8981\u653e\u5728\u8fd9\u91cc\uff0c\n        * \u5426\u5219\u4f1a\u51fa\u73b0\u5d4c\u5957\u9519\u8bef\u3002\n        */\n        /*style \u6837\u5f0f\u7ed3\u675f*/\n        '!^(.*?)\\[/(color|div|span)\\](.*)$!is' => array(array(1, 3), 'styleEnd', array(2)),\n        /*layout \u5e03\u5c40\u7ed3\u675f*/\n        '!^(.*?)\\[/(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutEnd', array(2)),\n\n        /*\n        * \u6613\u8bef\u5339\u914d\u7684\u6807\u8bb0\n        *\n        * \u8fd9\u91cc\u7684\u6807\u8bb0\u6700\u540e\u5339\u914d\uff0c\u4e3a\u4e86\u9632\u6b62\u8bef\u5339\u914d\u3002\n        * \u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u6807\u8bb0\u6b63\u5e38\u5339\u914d\u7684\u6807\u8bb0\u653e\u5728\u8fd9\u91cc\u3002\n        */\n        /*urltxt \u6587\u672c\u94fe\u63a5*/\n        '!^(.*?)((?:https?|ftps?|rtsp)\\://[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)(.*)$!is' => array(array(1, 3), 'urltxt', array(2)),\n        #'#^(.*?)((?<!@)[a-zA-Z0-9._-]{1,255}\\.(?:asia|mobi|name|com|net|org|xxx|cc|cn|hk|me|tk|tv|uk)(?:/[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)?)(.*)$#is' => array(array(1,3), 'urltxt', array(2)),\n        /*mailtxt \u6587\u672c\u7535\u5b50\u90ae\u4ef6\u5730\u5740*/\n        '!^(.*?)((?:mailto:)?[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]{2,4})(.*)$!is' => array(array(1, 3), 'mailtxt', array(2)),\n        /*at @\u6d88\u606f*/\n        '!^(.*?)[@\uff20]([@\uff20#\uff03a-zA-Z0-9\\p{Han}_-]+)(.*)$!uis' => array(array(1, 3), 'at', array(2)),\n        /*face \u8868\u60c5*/\n        '!^(.*?)\\{(ok|\\p{Han}{1,3})\\}(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n        '!^(.*?)\u300a[\uff1a:\u2236](ok|\\p{Han}{1,3})\u300b(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n    );\n\n\t/**\n\t* \u524d\u7f6e\u8fc7\u6ee4\u5668\uff0c\u66ff\u6362\u6362\u884c\u7b26\u548c\u7279\u6b8a\u7a7a\u683c\uff0c\u5220\u9664sid\u7b49\u654f\u611f\u5185\u5bb9\n\t*/\n\tpublic function filter($text) {\n        // \\r\\n \u548c \\r \u66ff\u6362\u4e3a \\n\n        $text = str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", $text);\n\t\t//\u628autf-8\u4e2d\u7684\u7279\u6b8a\u7a7a\u683c\u8f6c\u6362\u4e3a\u666e\u901a\u7a7a\u683c\uff0c\u9632\u6b62\u7c98\u8d34\u7684\u4ee3\u7801\u53d1\u751f\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\n        $text = str::nbsp2space($text);\n        // \u53bb\u9664\u7f51\u5740\u4e2d\u7684sid\n\t\t$text = preg_replace('#/q.php/[a-zA-Z0-9_-]+/#', '/q.php/', $text);\n\t\treturn $text;\n\t}\n\n\tpublic function parse($text, $serialize = false) {\n        global $USER, $USER_WORD_BLOCKLIST;\n        \n        // \u654f\u611f\u8bcd\u68c0\u67e5\n        if ($USER && $USER->uid && is_array($USER_WORD_BLOCKLIST)) {\n            foreach ($USER_WORD_BLOCKLIST as $v) {\n                if (empty($v['users']) || in_array($USER->uid, $v['users'])) {\n                    if (preg_match($v['preg_match'], $text, $arr)) {\n                        throw new Exception('\u201c'.$arr[0].'\u201d\u662f\u654f\u611f\u8bcd', 400);\n                    }\n                }\n            }\n        }\n\n\t\t$text = $this->filter($text);\n\n\t\t$markdownTag = NULL;\n\t\t\n\t\t// markdown\u6a21\u5f0f\u68c0\u6d4b\n\t\tif (preg_match('#^<!--\\s*markdown\\s*-->#is', $text) || preg_match('#^<!md>#is', $text)) {\n\t\t\t$text = preg_replace(['#^<!--\\s*markdown\\s*-->#is', '#^<!md>#is'], '', $text);\n\t\t\t$markdownTag = $this->markdown();\n\t\t}\n\t\t\n\t\t$result = parent::parse($text, false);\n\t\t\n\t\tif (NULL !== $markdownTag) {\n\t\t\t$result = array_merge($markdownTag, $result);\n\t\t}\n\t\t\n\t\tif ($serialize) {\n\t\t\t$result = data::serialize($result);\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\n    public function markdown(){\n\t\t$this->markdownEnable = true;\n\t\t\n\t\t// \u4fdd\u62a4markdown\u5185\u5bb9\u4e0d\u53d7XUBBP\u89e3\u6790\u5668\u5e72\u6270\n\t\t\n\t\t/*urltxt \u6587\u672c\u94fe\u63a5*/\n\t\t$this->parse['!^(.*?)((?:https?|ftps?|rtsp)\\://[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)(.*)$!is'] = array(array(1, 3), 'mdlink', array(2));\n\t\t\n\t\t/*mailtxt \u6587\u672c\u7535\u5b50\u90ae\u4ef6\u5730\u5740*/\n\t\t$this->parse['!^(.*?)((?:mailto:)?[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]{2,4})(.*)$!is'] = array(array(1, 3), 'mdpre', array(2));\n\t\t\n\t\t// \u6dfb\u52a0\u65b0\u7684\u5339\u914d\u89c4\u5219\n\t\t$parseHead = [\n            /*mdcode markdown\u4ee3\u7801\u9ad8\u4eae*/\n            '!^(^|.*?\\n)( *)(`{3,})( *[^`\\n]+?)?( *\\n.*?\\n *)\\3( *\\n.*| *$)$!is' => array(array(1, 6), 'mdcode', array(4, 5, 3, 2)),\n\n            /*code \u4ee3\u7801\u9ad8\u4eae\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[code(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/code\\](\\n+.*|$)$!is' => array(array(1, 4), 'code', array(2, 3)),\n            /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[html(=[^\\]]*)?\\](\\n+.*?\\n+)\\[/html\\](\\n+.*|$)$!is' => array(array(1, 4), 'html', array(2, 3)),\n            /* textbox \u6587\u672c\u6846\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[text(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/text\\](\\n+.*|$)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n            /* 4\u4e2a\u7a7a\u683c\u6216\u4e00\u4e2atab\u5f00\u5934\u7684markdown\u4ee3\u7801\u5757 */\n            '!^(^|.*?\\n+)((?:\\t|    )[^\\n]*(?:\\n+(?:\\t|    )[^\\n]*)*)(\\n+.*|$)$!is' => array(array(1, 3), 'mdpre', array(2)),\n\n            /*inline\u4ee3\u7801\uff08\u4f18\u5148\u7ea7\u6bd4\u4e0a\u9762\u7684\u4f4e\uff09*/\n            '!^(.*?)((`+).+?\\3)(.*)$!is' => array(array(1, 4), 'mdpre', array(2)),\n        ];\n\n\t\t$this->parse = $parseHead + $this->parse;\n\t\t\n\t\treturn array(array(\n          'type' => 'markdown',\n\t\t));\n    }\n\n    static public function parseWebPlug($lang, &$data) {\n        if (!preg_match('/^(?:webplug|\u7f51\u9875\u63d2\u4ef6)(?:\uff08\u7edf\u8ba1ID\u52ff\u5220#([a-z0-9]{16})\uff09)?(?:[:\uff1a](.*))?$/uis', $lang, $info)) {\n            return false;\n        }\n\n        // id\n        if (empty($info[1])) {\n            $info[1] = str::webplugId();\n        }\n\n        $data['lang'] = 'html';\n        $data['webplug'] = [\n            'id' => $info[1],\n            'name' => $info[2],\n        ];\n        return true;\n    }\n\n    /**\n     * @brief \u4ee3\u7801\u9ad8\u4eae\n     */\n    public function code($lang, $data)\n    {\n        $lang = trim($lang);\n        $result = [\n            'type' => 'code',\n            'lang' => strtolower($lang),\n            'data' => $data,\n        ];\n\n        self::parseWebPlug($lang, $result);\n\n        return [ $result ];\n    }\n\n\t/**\n     * @brief markdown\u4ee3\u7801\u9ad8\u4eae\n     */\n    public function mdcode($lang, $data, $quote, $indent)\n    {\n        $lang = trim($lang);\n\t\t$result = [\n            'type' => 'mdcode',\n\t\t\t'lang' => strtolower($lang),\n            'data' => $data,\n            'quote' => $quote,\n        ];\n\n        if (!empty($indent)) {\n            $result['indent'] = $indent;\n        }\n\n        self::parseWebPlug($lang, $result);\n\n        return [ $result ];\n    }\n\n\t/**\n     * @brief markdown\u53d7\u4fdd\u62a4\u5185\u5bb9\uff08\u4e0d\u88abXUBBP\u89e3\u6790\u5668\u5e72\u6270\uff09\n     */\n    public function mdpre($data)\n    {\n        return [[\n            'type' => 'mdpre',\n            'data' => $data,\n        ]];\n    }\n\n    /**\n     * @brief markdown\u53d7\u4fdd\u62a4\u94fe\u63a5\uff08\u4e0d\u88abXUBBP\u89e3\u6790\u5668\u5e72\u6270\uff09\n     */\n    public function mdlink($data)\n    {\n        return [[\n            'type' => 'mdpre',\n            'data' => url::decodeUrl64InLink($data),\n        ]];\n    }\n\n    /**\n     * @brief \u65f6\u95f4\u6807\u8bb0\n     */\n    public function time($tag)\n    {\n        return array(array(\n            'type' => 'time',\n            'tag' => $tag,\n        ));\n    }\n\n    /** @brief \u94fe\u63a5 */\n    public function link($type, $var, $var2 = '')\n    {\n        if ($type == '\u94fe\u63a5' || $type == '\u5916\u94fe' || $type == '\u951a') {\n            $var = $this->split('\uff0c', $var);\n            $url = $var[0];\n            $title = $var[1];\n\n            $type = $type == '\u94fe\u63a5' ? 'urlzh' : ($type == '\u5916\u94fe' ? 'urlout' : 'urlname');\n        } else {\n            $type = 'url';\n            if ($var == '') {\n                $url = $var2;\n                $title = '';\n            } else {\n                $url = $var;\n                $title = $var2;\n            }\n        }\n\n        if ($title != null &&\n            (preg_match('!\\[(b|i|u|center|left|right|color|div|span|img)=?!is', $title) ||\n            strpos($title, '\u300a\u56fe\u7247') !== false ||\n            strpos($title, '\u300a\u7f29\u7565\u56fe') !== false)) {\n            $obj = new ubbParser;\n            $obj->setParse(array(\n                /*layoutStart \u5e03\u5c40\u5f00\u59cb*/\n                '!^(.*?)\\[(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutStart', array(2)),\n                /*style \u6837\u5f0f\u5f00\u59cb*/\n                '!^(.*?)\\[(color|div|span)=(.*?)\\](.*)$!is' => array(array(1, 4), 'styleStart', array(2, 3)),\n\n                '!^(.*?)\\[img(?:=(.*?))?\\](.*?)\\[/img\\](.*)$!is' => array(array(1, 4), 'img', array('img_in_link', 2, 3)),\n                '!^(.*?)\u300a(\u56fe\u7247|\u7f29\u7565\u56fe)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'img_in_link', array(2, 3)),\n\n                /*style \u6837\u5f0f\u7ed3\u675f*/\n                '!^(.*?)\\[/(color|div|span)\\](.*)$!is' => array(array(1, 3), 'styleEnd', array(2)),\n                /*layout \u5e03\u5c40\u7ed3\u675f*/\n                '!^(.*?)\\[/(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutEnd', array(2)),\n            ));\n            $title = $obj->parse($title);\n        }\n\n        return array(array(\n            'type' => $type,\n            'url' => url::decodeUrl64InLink($url),\n            'title' => $title,\n        ));\n    }\n\n    /** @brief \u94fe\u63a5\u4e2d\u7684\u56fe\u7247 */\n    public function img_in_link($type, $var, $var2 = '') {\n        $result = $this->img($type, $var, $var2);\n        $result[0]['in_link'] = true;\n        return $result;\n    }\n\n    /** @brief \u56fe\u7247 */\n    public function img($type, $var, $var2 = '')\n    {\n        if ($type == '\u7f29\u7565\u56fe') {\n            $var = $this->split('\uff0c', $var);\n\n\t    if (count($var) == 1) {\n\t        array_unshift($var, '320'); //\u9ed8\u8ba4\u5bbd\u5ea6\n\t    }\n\n            $opt = $var[0];\n            $url = $var[1];\n            preg_match_all('![0-9]+!', $opt, $opt);\n            return array(array(\n                'type' => 'thumb',\n                'src' => trim($url),\n                'w' => $opt[0][0],\n                'h' => $opt[0][1],\n            ));\n        } else {\n            if ($type == '\u56fe\u7247') {\n                $var = $this->split('\uff0c', $var);\n                $src = $var[0];\n                $alt = $var[1];\n            } elseif ($var == '') {\n                $src = $var2;\n                $alt = '';\n            } else {\n                $src = $var;\n                $alt = $var2;\n            }\n            return array(array(\n                'type' => $type == 'img' ? 'img' : 'imgzh',\n                'src' => url::decodeUrl64InLink($src),\n                'alt' => $alt,\n            ));\n        }\n    }\n\n    /**\n     * @brief \u89c6\u9891\n     */\n    public function video($url)\n    {\n        // \u54d4\u54e9\u54d4\u54e9app\u7684\u5206\u4eab\u94fe\u63a5\uff0c\u4e0d\u80fd\u76f4\u63a5\u64ad\u653e\uff0c\u9700\u8981\u8f6c\u6362\u4e3a\u5e26BV\u53f7\u7684\u89c6\u9891\u94fe\u63a5\n        if (preg_match('#^https?://b23.tv/[a-zA-Z0-9]+#is', $url)) {\n            $headers = get_headers($url, 1, stream_context_create(['http' => ['timeout' => 1]]));\n            if (is_array($headers) && is_array($headers['Location'])) {\n                foreach ($headers['Location'] as $url) {\n                    if (preg_match('#^https?://#i', $url)) {\n                        $newUrl = $url;\n                        break;\n                    }\n                }\n            } else {\n                $newUrl = $headers['Location'];\n            }\n            if (preg_match('#\\b(?:bilibili\\.com|b23\\.tv)\\b.*\\b(BV[\\w]+)(?:.*\\bp=(\\d+))?#', $newUrl)) {\n                $url = $newUrl;\n            }\n        }\n\n        return array(array(\n            'type' => 'video',\n            'url' => trim($url),\n        ));\n    }\n\n    /**\n     * @brief \u97f3\u9891\n     */\n    public function audio($url)\n    {\n        return array(array(\n            'type' => 'audio',\n            'url' => trim($url),\n        ));\n    }\n\n    /**\n     * @brief \u89c6\u9891\u6d41\n     */\n    public function videoStream($url)\n    {\n        $url = $this->split('\uff0c', $url);\n        return array(array(\n            'type' => 'videoStream',\n            'url' => trim($url[0]),\n            'title' => $url[1],\n        ));\n    }\n\n    /**\n     * @brief \u97f3\u9891\u6d41\n     */\n    public function audioStream($url)\n    {\n        $url = $this->split('\uff0c', $url);\n        return array(array(\n            'type' => 'audioStream',\n            'url' => trim($url[0]),\n            'title' => $url[1],\n        ));\n    }\n\n    /**\n     * @brief \u7248\u6743\u58f0\u660e\u6807\u8bb0\n     */\n    public function copyright($tag)\n    {\n        return array(array(\n            'type' => 'copyright',\n            'tag' => trim($tag),\n        ));\n    }\n\n    /**\n     * @brief \u6218\u7f51\uff08\u9b54\u517d\u4e16\u754c\u82f1\u96c4\u699c\uff09\u94fe\u63a5\u6807\u8bb0\n     */\n    public function battlenet($tag)\n    {\n        $info = $this->split('@', str_replace('\uff20', '@', $tag));\n        $name = $this->split('\uff0c', $info[1]);\n        return array(array(\n            'type' => 'battlenet',\n            'name' => trim($info[0]),\n            'server' => trim($name[0]),\n            'display' => trim($name[1]),\n        ));\n    }\n\n    /**\n     * @brief \u6570\u5b66\u516c\u5f0f\n     */\n    public function math($type, $data)\n    {\n        return array(array(\n            'type' => $type,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u6362\u884c\n     */\n    public function newline($tag)\n    {\n        return array(array(\n            'type' => 'newline',\n            'tag' => $tag,\n        ));\n    }\n\n    /** @brief tab \u56db\u4e2a\u7a7a\u683c */\n    public function tab($tag)\n    {\n        return [[\n            'type' => 'tab',\n        ]];\n    }\n\n    /** @brief empty UBB\u8f6c\u4e49 */\n    public function emptyTag($tag)\n    {\n        return [[\n            'type' => 'empty',\n        ]];\n    }\n\n\n    /**\n     * @brief \u5e03\u5c40\u5f00\u59cb\n     */\n    function layoutStart($tag)\n    {\n        return array(array(\n            'type' => 'layout',\n            'tag' => strtolower($tag),\n        ));\n    }\n\n    /**\n     * @brief \u5e03\u5c40\u7ed3\u675f\n     */\n    function layoutEnd($tag)\n    {\n        /*\u7ed3\u675f\u6807\u8bb0\u7684tag\u4ee5\u659c\u6760(/)\u5f00\u59cb*/\n        return array(array(\n            'type' => 'layout',\n            'tag' => '/' . $tag,\n        ));\n    }\n\n    /**\n     * @brief \u6837\u5f0f\u5f00\u59cb\n     */\n    function styleStart($tag, $opt)\n    {\n        return array(array(\n            'type' => 'style',\n            'tag' => strtolower($tag),\n            'opt' => $opt,\n        ));\n    }\n\n    /**\n     * @brief \u6837\u5f0f\u7ed3\u675f\n     */\n    function styleEnd($tag)\n    {\n        /*\u7ed3\u675f\u6807\u8bb0\u7684tag\u4ee5\u659c\u6760(/)\u5f00\u59cb*/\n        return array(array(\n            'type' => 'style',\n            'tag' => '/' . $tag,\n        ));\n    }\n\n    /**\n     * @brief urltxt \u7f51\u5740\u6587\u672c\n     */\n    function urltxt($url)\n    {\n        return array(array(\n            'type' => 'urltxt',\n            'url' => url::decodeUrl64InLink($url),\n        ));\n    }\n\n    /**\n     * @brief mailtxt \u7535\u5b50\u90ae\u7bb1\u6587\u672c\n     */\n    function mailtxt($mail)\n    {\n        return array(array(\n            'type' => 'mailtxt',\n            'mail' => trim($mail),\n        ));\n    }\n\n    /**\n     * @brief at\u6d88\u606f\n     */\n    function at($tag)\n    {\n        $tag = str_replace('\uff20', '@', $tag);\n        $arr = explode('@', $tag);\n        if (count($arr) > 1) {\n            $result = array();\n            foreach ($arr as $v) {\n                $res = $this->at($v);\n                $result = array_merge($result, $res);\n            }\n            return $result;\n        }\n        global $USER;\n        //user\u7684at\u65b9\u6cd5\u4ea7\u751fat\u6d88\u606f\u5e76\u8fd4\u56deat\u5bf9\u8c61\u7684uid\n        //\u4f1a\u751f\u6210at\u4fe1\u606f\u7684\u9875\u9762\u987b\u7528regAt()\u65b9\u6cd5\u6ce8\u518cat\u6d88\u606f\n        //\u82e5\u672a\u6ce8\u518c\uff0c\u5219\u4e0d\u4ea7\u751fat\u6d88\u606f\uff0c\u4f46uid\u6b63\u5e38\u8fd4\u56de\n        if (!is_object($USER)) {\n            $user = new user;\n        } else {\n            $user = $USER;\n        }\n        $uid = $user->at($tag);\n\n        // @\u673a\u5668\u4eba\uff0c\u673a\u5668\u4eba\u804a\u5929\u8bf7\u6c42\n        if (UserInfo::uidIsBot($uid)) {\n            $this->setOpt('flags.TYPE_BOT_REQUEST', true);\n        }\n\n        return array(array(\n            'type' => 'at',\n            'tag' => trim($tag),\n            'uid' => $uid,\n        ));\n    }\n\n    /**\n     * @brief iframe \u7f51\u9875\u5d4c\u5165\n     */\n    function iframe($str)\n    {\n        $allowKeys = [\n            'allowfullscreen',\n            'height',\n            'importance',\n            'name',\n            'referrerpolicy',\n            'src',\n            'srcdoc',\n            'width',\n            'align',\n            'frameborder',\n            'framespacing',\n            'longdesc',\n            'marginheight',\n            'marginwidth',\n            'scrolling',\n            'style',\n            'seamless',\n            'border',\n        ];\n        $data = [];\n        preg_match_all('/([a-zA-Z0-9_-]+)(?:=(?:\\'([^\\']*)\\'|\"([^\"]*)\"|([^\\s]*)))?/s', $str, $arr, PREG_SET_ORDER);\n\n        foreach ($arr as $v) {\n            $k = strtolower($v[1]);\n            if (in_array($k, $allowKeys)) {\n                $v = html_entity_decode($v[2].$v[3].$v[4]);\n                $data[$k] = $v;\n            }\n        }\n\n        return array(array(\n            'type' => 'iframe',\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\n     */\n    public function html($opt, $data)\n    {\n        return array(array(\n            'type' => 'html',\n            'opt' => $opt,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief textbox \u6587\u672c\u6846\n     */\n    public function textbox($style, $data)\n    {\n        return array(array(\n            'type' => 'textbox',\n            'style' => $style,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u8868\u60c5\n     */\n    function face($face)\n    {\n        return array(array(\n            'type' => 'face',\n            'face' => trim($face),\n        ));\n    }\n\n    /**\n     * \u751f\u6210at\u6d88\u606f\u7684XUBBP\u6570\u636e\n     */\n    public static function createAtMsg($user, $pos, $url, $msg, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'atMsg',\n            'uid' => $user->uid,\n            'pos' => $pos,\n            'url' => $url,\n            'msg' => $msg,\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u7f16\u8f91\u901a\u77e5\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $pos \u7f16\u8f91\u5bf9\u8c61\u7684\u540d\u79f0\n     * @param string $url \u64cd\u4f5c\u5bf9\u8c61\u7684\u8def\u5f84\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param string $oriData \u7f16\u8f91\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5bb9\uff08serialize\u683c\u5f0f\u7684XUBBP\u6570\u636e\uff09\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminEditNotice($user, $pos, $url, $reason, $oriData, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'adminEdit',\n            'uid' => $user->uid,\n            'pos' => $pos,\n            'url' => $url,\n            'reason' => $reason,\n            'oriData' => data::unserialize($oriData),\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u5220\u9664\u901a\u77e5\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $pos \u5220\u9664\u5bf9\u8c61\u7684\u540d\u79f0\n     * @param string $url \u5220\u9664\u5bf9\u8c61\u7684\u8def\u5f84\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param string $oriData \u5220\u9664\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5bb9\uff08serialize\u683c\u5f0f\u7684XUBBP\u6570\u636e\uff09\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminDelNotice($user, $pos, $url, $reason, $oriData, $serialize = false, $ownUid = null, $topicUid = null)\n    {\n        $data = array(array(\n            'type' => 'adminDel',\n            'uid' => $user->uid,\n            'ownUid' => $ownUid,\n            'topicUid' => $topicUid,\n            'pos' => $pos,\n            'url' => $url,\n            'reason' => $reason,\n            'oriData' => data::unserialize($oriData),\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u5220\u9664\u5185\u5bb9\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminDelContent($user, $reason, $serialize = false, $ownUid = null, $noTime = false, $topicUid = null)\n    {\n        $data = array(array(\n            'type' => 'delContent',\n            'uid' => $user->uid,\n            'ownUid' => $ownUid,\n            'reason' => $reason,\n            'time' => $noTime ? null : $_SERVER['REQUEST_TIME'],\n        ));\n        if (!empty($topicUid)) {\n            $data[0]['topicUid'] = $topicUid;\n        }\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u64cd\u4f5c\u63d0\u9192\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminActionNotice($action, $admin, $title, $url, $reason, $ownUid = null, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'adminAction',\n            'act' => $action,\n            'uid' => $admin->uid,\n            'ownUid' => $ownUid,\n            'pos' => $title,\n            'url' => $url,\n            'reason' => $reason,\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n\t/**\n\t* \u751f\u6210\u201c\u7528\u6237\u53d1\u8a00\u9700\u8981\u5ba1\u6838\u201d\u63d0\u9192\u7684XUBBP\u6570\u636e\n\t* \n\t* @param $accessUser \u8bbf\u95ee\u5e16\u5b50\u7684\u7528\u6237\n\t* @param $authorUinfo \u5e16\u5b50\u4f5c\u8005\n\t* @param $content \u5e16\u5b50\u5185\u5bb9\u7684XUBBP\u6570\u636e\n\t* @param $serialize \u662f\u5426\u4e32\u884c\u5316\n\t*/\n\tpublic static function createPostNeedReviewNotice($accessUser, $authorUinfo, $contentId, $content, $topicId, $stat, $reviewLog, $serialize = false) {\n\t\t$data = array(array(\n\t\t\t'type' => 'postNeedReview',\n\t\t\t'contentId' => $contentId,\n\t\t\t'topicId' => $topicId,\n\t\t\t'isAdmin' => is_object($accessUser) && $accessUser->islogin && $accessUser->hasPermission(userinfo::PERMISSION_REVIEW_POST),\n            'stat' => $stat,\n            'reviewLog' => $reviewLog ? $reviewLog : [],\n\t\t));\n\n        if ($serialize) {\n            $content = data::unserialize($content);\n        }\n\n        /**\n         * \u5982\u679c\u7528\u6237@\u4e86\u6211\uff0c\u6211\u5c31\u83b7\u5f97\u67e5\u770b\u5185\u5bb9\u7684\u6743\u9650\n         */\n        $showContent = false;\n        foreach ($content as $vv) {\n            // \u5982\u679c\u5b58\u5728\u7c7b\u578b\u4e3aat\uff0c\u4e14@\u7684uid\u4e3a\u6211\u81ea\u5df1\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6d88\u606f\u5e94\u8be5\u5c55\u793a\n            if ($vv['type'] == 'at' && $vv['uid'] == $accessUser['uid']) {\n                $showContent = true;\n                break;\n            }\n        }\n\n\t\tif (is_object($accessUser) && is_object($authorUinfo) && $accessUser->islogin && ($accessUser->uid == $authorUinfo->uid || $showContent || $accessUser->hasPermission(userinfo::PERMISSION_REVIEW_POST))) {\n\t\t\t$data = array_merge($data, $content);\n\t\t}\n\n\t\tif ($serialize) {\n\t\t    $data = data::serialize($data);\n\t\t}\n\n\t\treturn $data;\n\t}\n\n    /*\u6309\u6307\u5b9a\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e24\u534a*/\n    protected static function split($split, $str)\n    {\n        $pos = strpos($str, $split);\n        $data = [];\n\n        if ($pos === false) {\n            $data[] = $str;\n        } else {\n            $data[] = substr($str, 0, $pos);\n            $data[] = substr($str, $pos + strlen($split));\n        }\n\n        return $data;\n    }\n\n    /*class end*/\n}\n"], "fixing_code": ["<?php\n\nclass UbbParser extends XUBBP\n{\n\t// \u662f\u5426\u5904\u4e8emarkdown\u6a21\u5f0f\n\tprotected $markdownEnable = false;\n\t\n    protected $parse = array(\n        /*\n        * \u4e00\u6b21\u6027\u5339\u914d\u6807\u8bb0\n        *\n        * \u5982\u679c\u6807\u8bb0\u53ef\u4ee5\u4e00\u6b21\u6027\u5339\u914d\uff0c\n        * \u4e0d\u9700\u8981\u5206\u4e3a\u5f00\u59cb\u6807\u8bb0\u548c\u7ed3\u675f\u6807\u8bb0\u5206\u522b\u5339\u914d\uff0c\n        * \u5219\u5728\u8fd9\u4e00\u6bb5\u5b9a\u4e49\uff08\u52a0\u5728\u8fd9\u4e00\u6bb5\u672b\u5c3e\uff09\u3002\n        *\n        * \u6ce8\u610f\uff1a\u4e0d\u8981\u5b9a\u4e49\u5728code\u89c4\u5219\u7684\u524d\u9762\uff0c\n        * \u56e0\u4e3a[code][/code]\u6807\u8bb0\u91cc\u7684\u5185\u5bb9\uff08\u4ee3\u7801\u5757\uff09\u4e0d\u5e94\u8be5\u8fdb\u884c\u4efb\u4f55UBB\u89e3\u6790\u3002\n        * \u6309\u7167\u987a\u5e8f\u89e3\u6790\uff0c\u987a\u5e8f\u975e\u5e38\u91cd\u8981\uff0c\u6392\u5728\u540e\u9762\u7684\u5339\u914d\u53ef\u80fd\u4f1a\u88ab\u5ffd\u7565\u3002\n        */\n\n        /*code \u4ee3\u7801\u9ad8\u4eae\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[code(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/code\\](\\n+.*|$)$!is' => array(array(1, 4), 'code', array(2, 3)),\n        /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[html(=[^\\]]*)?\\](\\n+.*?\\n+)\\[/html\\](\\n+.*|$)$!is' => array(array(1, 4), 'html', array(2, 3)),\n        /* textbox \u6587\u672c\u6846\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n        '!^(^|.*?\\n+)\\[text(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/text\\](\\n+.*|$)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n        /*code \u4ee3\u7801\u9ad8\u4eae*/\n        '!^(.*?)\\[code(?:=([^\\]]*))?\\](.*?)\\[/code\\](.*)$!is' => array(array(1, 4), 'code', array(2, 3)),\n        /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165 */\n        '!^(.*?)\\[html(=[^\\]]*)?\\](.*?)\\[/html\\](.*)$!is' => array(array(1, 4), 'html', array(2, 3)),\n        /* textbox \u6587\u672c\u6846 */\n        '!^(.*?)\\[text(?:=([^\\]]*))?\\](.*?)\\[/text\\](.*)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n        /* iframe \u7f51\u9875\u5d4c\u5165 */\n        '!^(.*?)<iframe((?:\\s+[a-zA-Z0-9_-]+(?:=(?:\\'[^\\']*\\'|\"[^\"]*\"|[^\\s]*))?)*)>.*?</iframe>(.*)$!is' => array(array(1, 3), 'iframe', array(2)),\n\n        /*time \u65f6\u95f4*/\n        '!^(.*?)\\[time(?:=(.*?))?\\](.*)$!is' => array(array(1, 3), 'time', array(2)),\n        /*link \u94fe\u63a5*/\n        '!^(.*?)\\[url(?:=(.*?))?\\](.*?)\\[/url\\](.*)$!is' => array(array(1, 4), 'link', array('url', 2, 3)),\n        '!^(.*?)\u300a(\u94fe\u63a5|\u5916\u94fe|\u951a)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'link', array(2, 3)),\n        /*img \u56fe\u7247*/\n        '!^(.*?)\\[img(?:=(.*?))?\\](.*?)\\[/img\\](.*)$!is' => array(array(1, 4), 'img', array('img', 2, 3)),\n        '!^(.*?)\u300a(\u56fe\u7247|\u7f29\u7565\u56fe)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'img', array(2, 3)),\n        '!^(.*?)\u300a\u8868\u60c5[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n        /*video \u89c6\u9891*/\n        '!^(.*?)\u300a\u89c6\u9891[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'video', array(2)),\n        /*videoStream \u89c6\u9891*/\n        '!^(.*?)\u300a\u89c6\u9891\u6d41[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'videoStream', array(2)),\n        /*audio \u97f3\u9891*/\n        '!^(.*?)\u300a\u97f3\u9891[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'audio', array(2)),\n        /*audioStream \u89c6\u9891*/\n        '!^(.*?)\u300a\u97f3\u9891\u6d41[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'audioStream', array(2)),\n        /*copyright \u7248\u6743*/\n        '!^(.*?)\u300a\u7248\u6743[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'copyright', array(2)),\n        /*battlenet \u6218\u7f51*/\n        '!^(.*?)\u300a\u6218\u7f51[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'battlenet', array(2)),\n        /*math \u6570\u5b66\u516c\u5f0f*/\n        '!^(.*?)\\[math\\](.*?)\\[/math\\](.*)$!is' => array(array(1, 3), 'math', array('math', 2)),\n        '!^(.*?)\u300a\u516c\u5f0f[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 3), 'math', array('mathzh', 2)),\n        /*tab \u56db\u4e2a\u7a7a\u683c*/\n        '!^(.*?)\\[tab\\](.*)$!is' => array(array(1, 2), 'tab', array(2)),\n        /*empty UBB\u8f6c\u4e49*/\n        '!^(.*?)\\[empty\\](.*)$!is' => array(array(1, 2), 'emptyTag', array(2)),\n        /*newline \u6362\u884c*/\n        //'!^(.*?)(\\n)(.*)$!is' => array(array(1,3), 'newline', array(2)),\n        '!^(.*?)\\[([bh]r)\\](.*)$!is' => array(array(1, 3), 'newline', array(2)),\n        //'!^(.*?)(///|\uff1c\uff1c\uff1c|\uff1e\uff1e\uff1e)(.*)$!is' => array(array(1, 3), 'newline', array(2)),\n\n        /*\n        * \u5f00\u59cb\u6807\u8bb0\n        *\n        * \u8fd9\u4e00\u6bb5\u5e94\u8be5\u53ea\u5305\u62ec\u5f00\u59cb\u6807\u8bb0\uff0c\n        * \u7ed3\u675f\u6807\u8bb0\u4e0d\u5e94\u5b9a\u4e49\u5728\u8fd9\u4e00\u6bb5\uff0c\n        * \u5426\u5219\u4f1a\u51fa\u73b0\u4ee3\u7801\u5d4c\u5957\u9519\u8bef\u3002\n        */\n        /*layoutStart \u5e03\u5c40\u5f00\u59cb*/\n        '!^(.*?)\\[(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutStart', array(2)),\n        /*style \u6837\u5f0f\u5f00\u59cb*/\n        '!^(.*?)\\[(color|div|span)=(.*?)\\](.*)$!is' => array(array(1, 4), 'styleStart', array(2, 3)),\n        /*\n        * \u7ed3\u675f\u6807\u8bb0\n        *\n        * \u7ed3\u675f\u6807\u8bb0\u5e94\u8be5\u4ee5\u4e0e\u5f00\u59cb\u6807\u8bb0\u76f8\u53cd\u7684\u987a\u5e8f\u51fa\u73b0\uff0c\n        * \u5c31\u50cf[b][i][/i][/b]\u4e00\u6837\u6392\u5217\u3002\n        * \u5f53\u7136\u8fd9\u4e0d\u662f\u5f3a\u5236\u7684\uff0c\u53ea\u662f\u8fd9\u6837\u6392\u6bd4\u8f83\u7f8e\u89c2\u3002\n        *\n        * \u8fd9\u4e00\u6bb5\u5e94\u8be5\u53ea\u6709\u7ed3\u675f\u6807\u8bb0\uff0c\n        * \u5f00\u59cb\u6807\u8bb0\u4e0d\u8981\u653e\u5728\u8fd9\u91cc\uff0c\n        * \u5426\u5219\u4f1a\u51fa\u73b0\u5d4c\u5957\u9519\u8bef\u3002\n        */\n        /*style \u6837\u5f0f\u7ed3\u675f*/\n        '!^(.*?)\\[/(color|div|span)\\](.*)$!is' => array(array(1, 3), 'styleEnd', array(2)),\n        /*layout \u5e03\u5c40\u7ed3\u675f*/\n        '!^(.*?)\\[/(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutEnd', array(2)),\n\n        /*\n        * \u6613\u8bef\u5339\u914d\u7684\u6807\u8bb0\n        *\n        * \u8fd9\u91cc\u7684\u6807\u8bb0\u6700\u540e\u5339\u914d\uff0c\u4e3a\u4e86\u9632\u6b62\u8bef\u5339\u914d\u3002\n        * \u53ef\u80fd\u4f1a\u5f71\u54cd\u5176\u4ed6\u6807\u8bb0\u6b63\u5e38\u5339\u914d\u7684\u6807\u8bb0\u653e\u5728\u8fd9\u91cc\u3002\n        */\n        /*urltxt \u6587\u672c\u94fe\u63a5*/\n        '!^(.*?)((?:https?|ftps?|rtsp)\\://[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)(.*)$!is' => array(array(1, 3), 'urltxt', array(2)),\n        #'#^(.*?)((?<!@)[a-zA-Z0-9._-]{1,255}\\.(?:asia|mobi|name|com|net|org|xxx|cc|cn|hk|me|tk|tv|uk)(?:/[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)?)(.*)$#is' => array(array(1,3), 'urltxt', array(2)),\n        /*mailtxt \u6587\u672c\u7535\u5b50\u90ae\u4ef6\u5730\u5740*/\n        '!^(.*?)((?:mailto:)?[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]{2,4})(.*)$!is' => array(array(1, 3), 'mailtxt', array(2)),\n        /*at @\u6d88\u606f*/\n        '!^(.*?)[@\uff20]([@\uff20#\uff03a-zA-Z0-9\\p{Han}_-]+)(.*)$!uis' => array(array(1, 3), 'at', array(2)),\n        /*face \u8868\u60c5*/\n        '!^(.*?)\\{(ok|\\p{Han}{1,3})\\}(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n        '!^(.*?)\u300a[\uff1a:\u2236](ok|\\p{Han}{1,3})\u300b(.*)$!uis' => array(array(1, 3), 'face', array(2)),\n    );\n\n\t/**\n\t* \u524d\u7f6e\u8fc7\u6ee4\u5668\uff0c\u66ff\u6362\u6362\u884c\u7b26\u548c\u7279\u6b8a\u7a7a\u683c\uff0c\u5220\u9664sid\u7b49\u654f\u611f\u5185\u5bb9\n\t*/\n\tpublic function filter($text) {\n        // \\r\\n \u548c \\r \u66ff\u6362\u4e3a \\n\n        $text = str_replace([\"\\r\\n\", \"\\r\"], \"\\n\", $text);\n\t\t//\u628autf-8\u4e2d\u7684\u7279\u6b8a\u7a7a\u683c\u8f6c\u6362\u4e3a\u666e\u901a\u7a7a\u683c\uff0c\u9632\u6b62\u7c98\u8d34\u7684\u4ee3\u7801\u53d1\u751f\u83ab\u540d\u5176\u5999\u7684\u95ee\u9898\n        $text = str::nbsp2space($text);\n        // \u53bb\u9664\u7f51\u5740\u4e2d\u7684sid\n\t\t$text = preg_replace('#/q.php/[a-zA-Z0-9_-]+/#', '/q.php/', $text);\n\t\treturn $text;\n\t}\n\n\tpublic function parse($text, $serialize = false) {\n        global $USER, $USER_WORD_BLOCKLIST;\n        \n        // \u654f\u611f\u8bcd\u68c0\u67e5\n        if ($USER && $USER->uid && is_array($USER_WORD_BLOCKLIST)) {\n            foreach ($USER_WORD_BLOCKLIST as $v) {\n                if (empty($v['users']) || in_array($USER->uid, $v['users'])) {\n                    if (preg_match($v['preg_match'], $text, $arr)) {\n                        throw new Exception('\u201c'.$arr[0].'\u201d\u662f\u654f\u611f\u8bcd', 400);\n                    }\n                }\n            }\n        }\n\n\t\t$text = $this->filter($text);\n\n\t\t$markdownTag = NULL;\n\t\t\n\t\t// markdown\u6a21\u5f0f\u68c0\u6d4b\n\t\tif (preg_match('#^<!--\\s*markdown\\s*-->#is', $text) || preg_match('#^<!md>#is', $text)) {\n\t\t\t$text = preg_replace(['#^<!--\\s*markdown\\s*-->#is', '#^<!md>#is'], '', $text);\n\t\t\t$markdownTag = $this->markdown();\n\t\t}\n\t\t\n\t\t$result = parent::parse($text, false);\n\t\t\n\t\tif (NULL !== $markdownTag) {\n\t\t\t$result = array_merge($markdownTag, $result);\n\t\t}\n\t\t\n\t\tif ($serialize) {\n\t\t\t$result = data::serialize($result);\n\t\t}\n\t\t\n\t\treturn $result;\n\t}\n\n    public function markdown(){\n\t\t$this->markdownEnable = true;\n\t\t\n\t\t// \u4fdd\u62a4markdown\u5185\u5bb9\u4e0d\u53d7XUBBP\u89e3\u6790\u5668\u5e72\u6270\n\t\t\n\t\t/*urltxt \u6587\u672c\u94fe\u63a5*/\n\t\t$this->parse['!^(.*?)((?:https?|ftps?|rtsp)\\://[a-zA-Z0-9\\.\\,\\?\\!\\(\\)\\[\\]\\@\\/\\:\\_\\;\\+\\&\\%\\*\\=\\~\\^\\#\\-]+)(.*)$!is'] = array(array(1, 3), 'mdlink', array(2));\n\t\t\n\t\t/*mailtxt \u6587\u672c\u7535\u5b50\u90ae\u4ef6\u5730\u5740*/\n\t\t$this->parse['!^(.*?)((?:mailto:)?[a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\\.[a-zA-Z]{2,4})(.*)$!is'] = array(array(1, 3), 'mdpre', array(2));\n\t\t\n\t\t// \u6dfb\u52a0\u65b0\u7684\u5339\u914d\u89c4\u5219\n\t\t$parseHead = [\n            /*mdcode markdown\u4ee3\u7801\u9ad8\u4eae*/\n            '!^(^|.*?\\n)( *)(`{3,})( *[^`\\n]+?)?( *\\n.*?\\n *)\\3( *\\n.*| *$)$!is' => array(array(1, 6), 'mdcode', array(4, 5, 3, 2)),\n\n            /*code \u4ee3\u7801\u9ad8\u4eae\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[code(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/code\\](\\n+.*|$)$!is' => array(array(1, 4), 'code', array(2, 3)),\n            /* html \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[html(=[^\\]]*)?\\](\\n+.*?\\n+)\\[/html\\](\\n+.*|$)$!is' => array(array(1, 4), 'html', array(2, 3)),\n            /* textbox \u6587\u672c\u6846\uff08\u6807\u8bb0\u72ec\u5360\u4e00\u884c\uff0c\u9ad8\u4f18\u5148\u7ea7\uff09*/\n            '!^(^|.*?\\n+)\\[text(?:=([^\\]]*))?\\](\\n+.*?\\n+)\\[/text\\](\\n+.*|$)$!is' => array(array(1, 4), 'textbox', array(2, 3)),\n\n            /* 4\u4e2a\u7a7a\u683c\u6216\u4e00\u4e2atab\u5f00\u5934\u7684markdown\u4ee3\u7801\u5757 */\n            // \u6ce8\u610f\u5982\u679c\u4ee3\u7801\u5757\u524d\u9762\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u5c31\u5fc5\u987b\u81f3\u5c11\u6709\u4e00\u4e2a\u7a7a\u884c\u9694\u5f00\uff0c\u5426\u5219Parsedown\u4e0d\u8ba4\u4e3a\u5b83\u662f\u4ee3\u7801\u5757\n            '!^(^(?:\\s*\\n)*|.*?(?:\\s*\\n){2,})((?:\\t|    )[^\\n]*(?:\\n+(?:\\t|    )[^\\n]*)*)(\\n+.*|$)$!is' => array(array(1, 3), 'mdpre', array(2)),\n\n            /*inline\u4ee3\u7801\uff08\u4f18\u5148\u7ea7\u6bd4\u4e0a\u9762\u7684\u4f4e\uff09*/\n            '!^(.*?)((`+).+?\\3)(.*)$!is' => array(array(1, 4), 'mdpre', array(2)),\n        ];\n\n\t\t$this->parse = $parseHead + $this->parse;\n\t\t\n\t\treturn array(array(\n          'type' => 'markdown',\n\t\t));\n    }\n\n    static public function parseWebPlug($lang, &$data) {\n        if (!preg_match('/^(?:webplug|\u7f51\u9875\u63d2\u4ef6)(?:\uff08\u7edf\u8ba1ID\u52ff\u5220#([a-z0-9]{16})\uff09)?(?:[:\uff1a](.*))?$/uis', $lang, $info)) {\n            return false;\n        }\n\n        // id\n        if (empty($info[1])) {\n            $info[1] = str::webplugId();\n        }\n\n        $data['lang'] = 'html';\n        $data['webplug'] = [\n            'id' => $info[1],\n            'name' => $info[2],\n        ];\n        return true;\n    }\n\n    /**\n     * @brief \u4ee3\u7801\u9ad8\u4eae\n     */\n    public function code($lang, $data)\n    {\n        $lang = trim($lang);\n        $result = [\n            'type' => 'code',\n            'lang' => strtolower($lang),\n            'data' => $data,\n        ];\n\n        self::parseWebPlug($lang, $result);\n\n        return [ $result ];\n    }\n\n\t/**\n     * @brief markdown\u4ee3\u7801\u9ad8\u4eae\n     */\n    public function mdcode($lang, $data, $quote, $indent)\n    {\n        $lang = trim($lang);\n\t\t$result = [\n            'type' => 'mdcode',\n\t\t\t'lang' => strtolower($lang),\n            'data' => $data,\n            'quote' => $quote,\n        ];\n\n        if (!empty($indent)) {\n            $result['indent'] = $indent;\n        }\n\n        self::parseWebPlug($lang, $result);\n\n        return [ $result ];\n    }\n\n\t/**\n     * @brief markdown\u53d7\u4fdd\u62a4\u5185\u5bb9\uff08\u4e0d\u88abXUBBP\u89e3\u6790\u5668\u5e72\u6270\uff09\n     */\n    public function mdpre($data)\n    {\n        return [[\n            'type' => 'mdpre',\n            'data' => $data,\n        ]];\n    }\n\n    /**\n     * @brief markdown\u53d7\u4fdd\u62a4\u94fe\u63a5\uff08\u4e0d\u88abXUBBP\u89e3\u6790\u5668\u5e72\u6270\uff09\n     */\n    public function mdlink($data)\n    {\n        return [[\n            'type' => 'mdpre',\n            'data' => url::decodeUrl64InLink($data),\n        ]];\n    }\n\n    /**\n     * @brief \u65f6\u95f4\u6807\u8bb0\n     */\n    public function time($tag)\n    {\n        return array(array(\n            'type' => 'time',\n            'tag' => $tag,\n        ));\n    }\n\n    /** @brief \u94fe\u63a5 */\n    public function link($type, $var, $var2 = '')\n    {\n        if ($type == '\u94fe\u63a5' || $type == '\u5916\u94fe' || $type == '\u951a') {\n            $var = $this->split('\uff0c', $var);\n            $url = $var[0];\n            $title = $var[1];\n\n            $type = $type == '\u94fe\u63a5' ? 'urlzh' : ($type == '\u5916\u94fe' ? 'urlout' : 'urlname');\n        } else {\n            $type = 'url';\n            if ($var == '') {\n                $url = $var2;\n                $title = '';\n            } else {\n                $url = $var;\n                $title = $var2;\n            }\n        }\n\n        if ($title != null &&\n            (preg_match('!\\[(b|i|u|center|left|right|color|div|span|img)=?!is', $title) ||\n            strpos($title, '\u300a\u56fe\u7247') !== false ||\n            strpos($title, '\u300a\u7f29\u7565\u56fe') !== false)) {\n            $obj = new ubbParser;\n            $obj->setParse(array(\n                /*layoutStart \u5e03\u5c40\u5f00\u59cb*/\n                '!^(.*?)\\[(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutStart', array(2)),\n                /*style \u6837\u5f0f\u5f00\u59cb*/\n                '!^(.*?)\\[(color|div|span)=(.*?)\\](.*)$!is' => array(array(1, 4), 'styleStart', array(2, 3)),\n\n                '!^(.*?)\\[img(?:=(.*?))?\\](.*?)\\[/img\\](.*)$!is' => array(array(1, 4), 'img', array('img_in_link', 2, 3)),\n                '!^(.*?)\u300a(\u56fe\u7247|\u7f29\u7565\u56fe)[\uff1a:\u2236](.*?)\u300b(.*)$!uis' => array(array(1, 4), 'img_in_link', array(2, 3)),\n\n                /*style \u6837\u5f0f\u7ed3\u675f*/\n                '!^(.*?)\\[/(color|div|span)\\](.*)$!is' => array(array(1, 3), 'styleEnd', array(2)),\n                /*layout \u5e03\u5c40\u7ed3\u675f*/\n                '!^(.*?)\\[/(b|i|u|center|left|right)\\](.*)$!is' => array(array(1, 3), 'layoutEnd', array(2)),\n            ));\n            $title = $obj->parse($title);\n        }\n\n        return array(array(\n            'type' => $type,\n            'url' => url::decodeUrl64InLink($url),\n            'title' => $title,\n        ));\n    }\n\n    /** @brief \u94fe\u63a5\u4e2d\u7684\u56fe\u7247 */\n    public function img_in_link($type, $var, $var2 = '') {\n        $result = $this->img($type, $var, $var2);\n        $result[0]['in_link'] = true;\n        return $result;\n    }\n\n    /** @brief \u56fe\u7247 */\n    public function img($type, $var, $var2 = '')\n    {\n        if ($type == '\u7f29\u7565\u56fe') {\n            $var = $this->split('\uff0c', $var);\n\n\t    if (count($var) == 1) {\n\t        array_unshift($var, '320'); //\u9ed8\u8ba4\u5bbd\u5ea6\n\t    }\n\n            $opt = $var[0];\n            $url = $var[1];\n            preg_match_all('![0-9]+!', $opt, $opt);\n            return array(array(\n                'type' => 'thumb',\n                'src' => trim($url),\n                'w' => $opt[0][0],\n                'h' => $opt[0][1],\n            ));\n        } else {\n            if ($type == '\u56fe\u7247') {\n                $var = $this->split('\uff0c', $var);\n                $src = $var[0];\n                $alt = $var[1];\n            } elseif ($var == '') {\n                $src = $var2;\n                $alt = '';\n            } else {\n                $src = $var;\n                $alt = $var2;\n            }\n            return array(array(\n                'type' => $type == 'img' ? 'img' : 'imgzh',\n                'src' => url::decodeUrl64InLink($src),\n                'alt' => $alt,\n            ));\n        }\n    }\n\n    /**\n     * @brief \u89c6\u9891\n     */\n    public function video($url)\n    {\n        // \u54d4\u54e9\u54d4\u54e9app\u7684\u5206\u4eab\u94fe\u63a5\uff0c\u4e0d\u80fd\u76f4\u63a5\u64ad\u653e\uff0c\u9700\u8981\u8f6c\u6362\u4e3a\u5e26BV\u53f7\u7684\u89c6\u9891\u94fe\u63a5\n        if (preg_match('#^https?://b23.tv/[a-zA-Z0-9]+#is', $url)) {\n            $headers = get_headers($url, 1, stream_context_create(['http' => ['timeout' => 1]]));\n            if (is_array($headers) && is_array($headers['Location'])) {\n                foreach ($headers['Location'] as $url) {\n                    if (preg_match('#^https?://#i', $url)) {\n                        $newUrl = $url;\n                        break;\n                    }\n                }\n            } else {\n                $newUrl = $headers['Location'];\n            }\n            if (preg_match('#\\b(?:bilibili\\.com|b23\\.tv)\\b.*\\b(BV[\\w]+)(?:.*\\bp=(\\d+))?#', $newUrl)) {\n                $url = $newUrl;\n            }\n        }\n\n        return array(array(\n            'type' => 'video',\n            'url' => trim($url),\n        ));\n    }\n\n    /**\n     * @brief \u97f3\u9891\n     */\n    public function audio($url)\n    {\n        return array(array(\n            'type' => 'audio',\n            'url' => trim($url),\n        ));\n    }\n\n    /**\n     * @brief \u89c6\u9891\u6d41\n     */\n    public function videoStream($url)\n    {\n        $url = $this->split('\uff0c', $url);\n        return array(array(\n            'type' => 'videoStream',\n            'url' => trim($url[0]),\n            'title' => $url[1],\n        ));\n    }\n\n    /**\n     * @brief \u97f3\u9891\u6d41\n     */\n    public function audioStream($url)\n    {\n        $url = $this->split('\uff0c', $url);\n        return array(array(\n            'type' => 'audioStream',\n            'url' => trim($url[0]),\n            'title' => $url[1],\n        ));\n    }\n\n    /**\n     * @brief \u7248\u6743\u58f0\u660e\u6807\u8bb0\n     */\n    public function copyright($tag)\n    {\n        return array(array(\n            'type' => 'copyright',\n            'tag' => trim($tag),\n        ));\n    }\n\n    /**\n     * @brief \u6218\u7f51\uff08\u9b54\u517d\u4e16\u754c\u82f1\u96c4\u699c\uff09\u94fe\u63a5\u6807\u8bb0\n     */\n    public function battlenet($tag)\n    {\n        $info = $this->split('@', str_replace('\uff20', '@', $tag));\n        $name = $this->split('\uff0c', $info[1]);\n        return array(array(\n            'type' => 'battlenet',\n            'name' => trim($info[0]),\n            'server' => trim($name[0]),\n            'display' => trim($name[1]),\n        ));\n    }\n\n    /**\n     * @brief \u6570\u5b66\u516c\u5f0f\n     */\n    public function math($type, $data)\n    {\n        return array(array(\n            'type' => $type,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u6362\u884c\n     */\n    public function newline($tag)\n    {\n        return array(array(\n            'type' => 'newline',\n            'tag' => $tag,\n        ));\n    }\n\n    /** @brief tab \u56db\u4e2a\u7a7a\u683c */\n    public function tab($tag)\n    {\n        return [[\n            'type' => 'tab',\n        ]];\n    }\n\n    /** @brief empty UBB\u8f6c\u4e49 */\n    public function emptyTag($tag)\n    {\n        return [[\n            'type' => 'empty',\n        ]];\n    }\n\n\n    /**\n     * @brief \u5e03\u5c40\u5f00\u59cb\n     */\n    function layoutStart($tag)\n    {\n        return array(array(\n            'type' => 'layout',\n            'tag' => strtolower($tag),\n        ));\n    }\n\n    /**\n     * @brief \u5e03\u5c40\u7ed3\u675f\n     */\n    function layoutEnd($tag)\n    {\n        /*\u7ed3\u675f\u6807\u8bb0\u7684tag\u4ee5\u659c\u6760(/)\u5f00\u59cb*/\n        return array(array(\n            'type' => 'layout',\n            'tag' => '/' . $tag,\n        ));\n    }\n\n    /**\n     * @brief \u6837\u5f0f\u5f00\u59cb\n     */\n    function styleStart($tag, $opt)\n    {\n        return array(array(\n            'type' => 'style',\n            'tag' => strtolower($tag),\n            'opt' => $opt,\n        ));\n    }\n\n    /**\n     * @brief \u6837\u5f0f\u7ed3\u675f\n     */\n    function styleEnd($tag)\n    {\n        /*\u7ed3\u675f\u6807\u8bb0\u7684tag\u4ee5\u659c\u6760(/)\u5f00\u59cb*/\n        return array(array(\n            'type' => 'style',\n            'tag' => '/' . $tag,\n        ));\n    }\n\n    /**\n     * @brief urltxt \u7f51\u5740\u6587\u672c\n     */\n    function urltxt($url)\n    {\n        return array(array(\n            'type' => 'urltxt',\n            'url' => url::decodeUrl64InLink($url),\n        ));\n    }\n\n    /**\n     * @brief mailtxt \u7535\u5b50\u90ae\u7bb1\u6587\u672c\n     */\n    function mailtxt($mail)\n    {\n        return array(array(\n            'type' => 'mailtxt',\n            'mail' => trim($mail),\n        ));\n    }\n\n    /**\n     * @brief at\u6d88\u606f\n     */\n    function at($tag)\n    {\n        $tag = str_replace('\uff20', '@', $tag);\n        $arr = explode('@', $tag);\n        if (count($arr) > 1) {\n            $result = array();\n            foreach ($arr as $v) {\n                $res = $this->at($v);\n                $result = array_merge($result, $res);\n            }\n            return $result;\n        }\n        global $USER;\n        //user\u7684at\u65b9\u6cd5\u4ea7\u751fat\u6d88\u606f\u5e76\u8fd4\u56deat\u5bf9\u8c61\u7684uid\n        //\u4f1a\u751f\u6210at\u4fe1\u606f\u7684\u9875\u9762\u987b\u7528regAt()\u65b9\u6cd5\u6ce8\u518cat\u6d88\u606f\n        //\u82e5\u672a\u6ce8\u518c\uff0c\u5219\u4e0d\u4ea7\u751fat\u6d88\u606f\uff0c\u4f46uid\u6b63\u5e38\u8fd4\u56de\n        if (!is_object($USER)) {\n            $user = new user;\n        } else {\n            $user = $USER;\n        }\n        $uid = $user->at($tag);\n\n        // @\u673a\u5668\u4eba\uff0c\u673a\u5668\u4eba\u804a\u5929\u8bf7\u6c42\n        if (UserInfo::uidIsBot($uid)) {\n            $this->setOpt('flags.TYPE_BOT_REQUEST', true);\n        }\n\n        return array(array(\n            'type' => 'at',\n            'tag' => trim($tag),\n            'uid' => $uid,\n        ));\n    }\n\n    /**\n     * @brief iframe \u7f51\u9875\u5d4c\u5165\n     */\n    function iframe($str)\n    {\n        $allowKeys = [\n            'allowfullscreen',\n            'height',\n            'importance',\n            'name',\n            'referrerpolicy',\n            'src',\n            'srcdoc',\n            'width',\n            'align',\n            'frameborder',\n            'framespacing',\n            'longdesc',\n            'marginheight',\n            'marginwidth',\n            'scrolling',\n            'style',\n            'seamless',\n            'border',\n        ];\n        $data = [];\n        preg_match_all('/([a-zA-Z0-9_-]+)(?:=(?:\\'([^\\']*)\\'|\"([^\"]*)\"|([^\\s]*)))?/s', $str, $arr, PREG_SET_ORDER);\n\n        foreach ($arr as $v) {\n            $k = strtolower($v[1]);\n            if (in_array($k, $allowKeys)) {\n                $v = html_entity_decode($v[2].$v[3].$v[4]);\n                $data[$k] = $v;\n            }\n        }\n\n        return array(array(\n            'type' => 'iframe',\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u901a\u8fc7iframe\u7684srcdoc\u5c5e\u6027\u5b9e\u73b0\u7684HTML\u5185\u5bb9\u5d4c\u5165\n     */\n    public function html($opt, $data)\n    {\n        return array(array(\n            'type' => 'html',\n            'opt' => $opt,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief textbox \u6587\u672c\u6846\n     */\n    public function textbox($style, $data)\n    {\n        return array(array(\n            'type' => 'textbox',\n            'style' => $style,\n            'data' => $data,\n        ));\n    }\n\n    /**\n     * @brief \u8868\u60c5\n     */\n    function face($face)\n    {\n        return array(array(\n            'type' => 'face',\n            'face' => trim($face),\n        ));\n    }\n\n    /**\n     * \u751f\u6210at\u6d88\u606f\u7684XUBBP\u6570\u636e\n     */\n    public static function createAtMsg($user, $pos, $url, $msg, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'atMsg',\n            'uid' => $user->uid,\n            'pos' => $pos,\n            'url' => $url,\n            'msg' => $msg,\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u7f16\u8f91\u901a\u77e5\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $pos \u7f16\u8f91\u5bf9\u8c61\u7684\u540d\u79f0\n     * @param string $url \u64cd\u4f5c\u5bf9\u8c61\u7684\u8def\u5f84\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param string $oriData \u7f16\u8f91\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5bb9\uff08serialize\u683c\u5f0f\u7684XUBBP\u6570\u636e\uff09\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminEditNotice($user, $pos, $url, $reason, $oriData, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'adminEdit',\n            'uid' => $user->uid,\n            'pos' => $pos,\n            'url' => $url,\n            'reason' => $reason,\n            'oriData' => data::unserialize($oriData),\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u5220\u9664\u901a\u77e5\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $pos \u5220\u9664\u5bf9\u8c61\u7684\u540d\u79f0\n     * @param string $url \u5220\u9664\u5bf9\u8c61\u7684\u8def\u5f84\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param string $oriData \u5220\u9664\u5bf9\u8c61\u7684\u539f\u59cb\u5185\u5bb9\uff08serialize\u683c\u5f0f\u7684XUBBP\u6570\u636e\uff09\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminDelNotice($user, $pos, $url, $reason, $oriData, $serialize = false, $ownUid = null, $topicUid = null)\n    {\n        $data = array(array(\n            'type' => 'adminDel',\n            'uid' => $user->uid,\n            'ownUid' => $ownUid,\n            'topicUid' => $topicUid,\n            'pos' => $pos,\n            'url' => $url,\n            'reason' => $reason,\n            'oriData' => data::unserialize($oriData),\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u5220\u9664\u5185\u5bb9\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminDelContent($user, $reason, $serialize = false, $ownUid = null, $noTime = false, $topicUid = null)\n    {\n        $data = array(array(\n            'type' => 'delContent',\n            'uid' => $user->uid,\n            'ownUid' => $ownUid,\n            'reason' => $reason,\n            'time' => $noTime ? null : $_SERVER['REQUEST_TIME'],\n        ));\n        if (!empty($topicUid)) {\n            $data[0]['topicUid'] = $topicUid;\n        }\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * \u751f\u6210\u7ba1\u7406\u5458\u64cd\u4f5c\u63d0\u9192\u7684XUBBP\u6570\u636e\n     *\n     * @param User $user \u64cd\u4f5c\u8005\n     * @param string $reason \u64cd\u4f5c\u539f\u56e0\n     * @param bool $serialize \u662f\u5426\u8fd4\u56de\u4e32\u884c\u5316\u7ed3\u679c\n     * @param int $ownUid \u697c\u5c42\u6240\u6709\u8005\u7684uid\n     *\n     * @return XUBBP \u6570\u636e\n     */\n    public static function createAdminActionNotice($action, $admin, $title, $url, $reason, $ownUid = null, $serialize = false)\n    {\n        $data = array(array(\n            'type' => 'adminAction',\n            'act' => $action,\n            'uid' => $admin->uid,\n            'ownUid' => $ownUid,\n            'pos' => $title,\n            'url' => $url,\n            'reason' => $reason,\n        ));\n\n        if ($serialize) {\n            $data = data::serialize($data);\n        }\n\n        return $data;\n    }\n\n\t/**\n\t* \u751f\u6210\u201c\u7528\u6237\u53d1\u8a00\u9700\u8981\u5ba1\u6838\u201d\u63d0\u9192\u7684XUBBP\u6570\u636e\n\t* \n\t* @param $accessUser \u8bbf\u95ee\u5e16\u5b50\u7684\u7528\u6237\n\t* @param $authorUinfo \u5e16\u5b50\u4f5c\u8005\n\t* @param $content \u5e16\u5b50\u5185\u5bb9\u7684XUBBP\u6570\u636e\n\t* @param $serialize \u662f\u5426\u4e32\u884c\u5316\n\t*/\n\tpublic static function createPostNeedReviewNotice($accessUser, $authorUinfo, $contentId, $content, $topicId, $stat, $reviewLog, $serialize = false) {\n\t\t$data = array(array(\n\t\t\t'type' => 'postNeedReview',\n\t\t\t'contentId' => $contentId,\n\t\t\t'topicId' => $topicId,\n\t\t\t'isAdmin' => is_object($accessUser) && $accessUser->islogin && $accessUser->hasPermission(userinfo::PERMISSION_REVIEW_POST),\n            'stat' => $stat,\n            'reviewLog' => $reviewLog ? $reviewLog : [],\n\t\t));\n\n        if ($serialize) {\n            $content = data::unserialize($content);\n        }\n\n        /**\n         * \u5982\u679c\u7528\u6237@\u4e86\u6211\uff0c\u6211\u5c31\u83b7\u5f97\u67e5\u770b\u5185\u5bb9\u7684\u6743\u9650\n         */\n        $showContent = false;\n        foreach ($content as $vv) {\n            // \u5982\u679c\u5b58\u5728\u7c7b\u578b\u4e3aat\uff0c\u4e14@\u7684uid\u4e3a\u6211\u81ea\u5df1\u7684\u8bb0\u5f55\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6d88\u606f\u5e94\u8be5\u5c55\u793a\n            if ($vv['type'] == 'at' && $vv['uid'] == $accessUser['uid']) {\n                $showContent = true;\n                break;\n            }\n        }\n\n\t\tif (is_object($accessUser) && is_object($authorUinfo) && $accessUser->islogin && ($accessUser->uid == $authorUinfo->uid || $showContent || $accessUser->hasPermission(userinfo::PERMISSION_REVIEW_POST))) {\n\t\t\t$data = array_merge($data, $content);\n\t\t}\n\n\t\tif ($serialize) {\n\t\t    $data = data::serialize($data);\n\t\t}\n\n\t\treturn $data;\n\t}\n\n    /*\u6309\u6307\u5b9a\u5206\u9694\u7b26\u5c06\u5b57\u7b26\u4e32\u5206\u6210\u4e24\u534a*/\n    protected static function split($split, $str)\n    {\n        $pos = strpos($str, $split);\n        $data = [];\n\n        if ($pos === false) {\n            $data[] = $str;\n        } else {\n            $data[] = substr($str, 0, $pos);\n            $data[] = substr($str, $pos + strlen($split));\n        }\n\n        return $data;\n    }\n\n    /*class end*/\n}\n"], "filenames": ["src/class/ubbparser.php"], "buggy_code_start_loc": [190], "buggy_code_end_loc": [191], "fixing_code_start_loc": [190], "fixing_code_end_loc": [192], "type": "CWE-79", "message": "A vulnerability classified as problematic was found in hu60t hu60wap6. Affected by this vulnerability is the function markdown of the file src/class/ubbparser.php. The manipulation leads to cross site scripting. The attack can be launched remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named a1cd9f12d7687243bfcb7ce295665acb83b9174e. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-243775.", "other": {"cve": {"id": "CVE-2023-5835", "sourceIdentifier": "cna@vuldb.com", "published": "2023-10-28T14:15:10.047", "lastModified": "2024-02-29T01:42:28.407", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability classified as problematic was found in hu60t hu60wap6. Affected by this vulnerability is the function markdown of the file src/class/ubbparser.php. The manipulation leads to cross site scripting. The attack can be launched remotely. This product does not use versioning. This is why information about affected and unaffected releases are unavailable. The patch is named a1cd9f12d7687243bfcb7ce295665acb83b9174e. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-243775."}, {"lang": "es", "value": "Una vulnerabilidad fue encontrada en hu60t hu60wap6 y clasificada como problem\u00e1tica. La funci\u00f3n markdown del archivo src/class/ubbparser.php es afectada por esta vulnerabilidad. La manipulaci\u00f3n conduce a Cross-Site Scripting (XSS). El ataque se puede lanzar de forma remota. Este producto no utiliza versiones. Esta es la raz\u00f3n por la que la informaci\u00f3n sobre las versiones afectadas y no afectadas no est\u00e1 disponible. El parche se llama a1cd9f12d7687243bfcb7ce295665acb83b9174e. Se recomienda aplicar un parche para solucionar este problema. El identificador asociado de esta vulnerabilidad es VDB-243775."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hu60:hu60wap6:-:*:*:*:*:*:*:*", "matchCriteriaId": "9E571CC1-5442-486F-829A-7F3FAFAF5F12"}]}]}], "references": [{"url": "https://github.com/hu60t/hu60wap6/commit/a1cd9f12d7687243bfcb7ce295665acb83b9174e", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://vuldb.com/?ctiid.243775", "source": "cna@vuldb.com", "tags": ["Permissions Required"]}, {"url": "https://vuldb.com/?id.243775", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hu60t/hu60wap6/commit/a1cd9f12d7687243bfcb7ce295665acb83b9174e"}}