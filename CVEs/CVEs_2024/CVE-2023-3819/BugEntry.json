{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Translation;\nuse Pimcore\\Tool\\Session;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/class\", name=\"pimcore_admin_dataobject_class_\")\n *\n * @internal\n */\nclass ClassController extends AdminAbstractController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/get-document-types\", name=\"getdocumenttypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDocumentTypesAction(Request $request)\n    {\n        $documentTypes = Document::getTypes();\n        $typeItems = [];\n        foreach ($documentTypes as $documentType) {\n            $typeItems[] = [\n                'text' => $documentType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-asset-types\", name=\"getassettypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAssetTypesAction(Request $request)\n    {\n        $assetTypes = Asset::getTypes();\n        $typeItems = [];\n        foreach ($assetTypes as $assetType) {\n            $typeItems[] = [\n                'text' => $assetType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-tree\", name=\"gettree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTreeAction(Request $request)\n    {\n        $defaultIcon = '/bundles/pimcoreadmin/img/flat-color-icons/class.svg';\n\n        $classesList = new DataObject\\ClassDefinition\\Listing();\n        $classesList->setOrderKey('name');\n        $classesList->setOrder('asc');\n        $classes = $classesList->load();\n\n        // filter classes\n        if ($request->get('createAllowed')) {\n            $tmpClasses = [];\n            foreach ($classes as $class) {\n                if ($this->getAdminUser()->isAllowed($class->getId(), 'class')) {\n                    $tmpClasses[] = $class;\n                }\n            }\n            $classes = $tmpClasses;\n        }\n\n        $withId = $request->get('withId');\n        $getClassConfig = function ($class) use ($defaultIcon, $withId) {\n            $text = $class->getname();\n            if ($withId) {\n                $text .= ' (' . $class->getId() . ')';\n            }\n\n            $hasBrickField = false;\n            foreach ($class->getFieldDefinitions() as $fieldDefinition) {\n                if ($fieldDefinition instanceof DataObject\\ClassDefinition\\Data\\Objectbricks) {\n                    $hasBrickField = true;\n\n                    break;\n                }\n            }\n\n            return [\n                'id' => $class->getId(),\n                'text' => $text,\n                'leaf' => true,\n                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,\n                'cls' => 'pimcore_class_icon',\n                'propertyVisibility' => $class->getPropertyVisibility(),\n                'enableGridLocking' => $class->isEnableGridLocking(),\n                'hasBrickField' => $hasBrickField,\n            ];\n        };\n\n        // build groups\n        $groups = [];\n        foreach ($classes as $class) {\n            $groupName = null;\n\n            if ($class->getGroup()) {\n                $type = 'manual';\n                $groupName = $class->getGroup();\n            } else {\n                $type = 'auto';\n                if (preg_match('@^([A-Za-z])([^A-Z]+)@', $class->getName(), $matches)) {\n                    $groupName = $matches[0];\n                }\n\n                if (!$groupName) {\n                    // this is eg. the case when class name uses only capital letters\n                    $groupName = $class->getName();\n                }\n            }\n\n            $groupName = Translation::getByKeyLocalized($groupName, Translation::DOMAIN_ADMIN, true, true);\n\n            if (!isset($groups[$groupName])) {\n                $groups[$groupName] = [\n                    'classes' => [],\n                    'type' => $type,\n                ];\n            }\n            $groups[$groupName]['classes'][] = $class;\n        }\n\n        $treeNodes = [];\n        if (!empty($groups)) {\n            $types = array_column($groups, 'type');\n            array_multisort($types, SORT_ASC, array_keys($groups), SORT_ASC, $groups);\n        }\n\n        if (!$request->get('grouped')) {\n            // list output\n            foreach ($groups as $groupName => $groupData) {\n                foreach ($groupData['classes'] as $class) {\n                    $node = $getClassConfig($class);\n                    if (count($groupData['classes']) > 1 || $groupData['type'] == 'manual') {\n                        $node['group'] = $groupName;\n                    }\n                    $treeNodes[] = $node;\n                }\n            }\n        } else {\n            // create json output\n            foreach ($groups as $groupName => $groupData) {\n                if (count($groupData['classes']) === 1 && $groupData['type'] == 'auto') {\n                    // no group, only one child\n                    $node = $getClassConfig($groupData['classes'][0]);\n                } else {\n                    // group classes\n                    $node = [\n                        'id' => 'folder_' . $groupName,\n                        'text' => $groupName,\n                        'leaf' => false,\n                        'expandable' => true,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'children' => [],\n                    ];\n\n                    foreach ($groupData['classes'] as $class) {\n                        $node['children'][] = $getClassConfig($class);\n                    }\n                }\n\n                $treeNodes[] = $node;\n            }\n        }\n\n        return $this->adminJson($treeNodes);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $class->setFieldDefinitions([]);\n        $isWriteable = $class->isWritable();\n        $class = $class->getObjectVars();\n        $class['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($class);\n    }\n\n    /**\n     * @Route(\"/get-custom-layout\", name=\"getcustomlayout\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            $brickLayoutSeparator = strpos($request->get('id'), '.brick.');\n            if ($brickLayoutSeparator !== false) {\n                $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById(substr($request->get('id'), 0, $brickLayoutSeparator));\n                if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                    $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n                        [\n                            'name' => $customLayout->getName().' '.substr($request->get('id'), $brickLayoutSeparator+strlen('.brick.')),\n                            'userOwner' => $this->getAdminUser()->getId(),\n                            'classId' => $customLayout->getClassId(),\n                        ]\n                    );\n\n                    $customLayout->setId($request->get('id'));\n                    $customLayout->save();\n                }\n            }\n\n            if (!$customLayout) {\n                throw $this->createNotFoundException();\n            }\n        }\n        $isWriteable = $customLayout->isWritable();\n        $customLayout = $customLayout->getObjectVars();\n        $customLayout['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'data' => $customLayout]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $className = $request->get('className');\n        $className = $this->correctClassname($className);\n\n        $classId = $request->get('classIdentifier');\n        $existingClass = DataObject\\ClassDefinition::getById($classId);\n        if ($existingClass) {\n            throw new \\Exception('Class identifier already exists');\n        }\n\n        $class = DataObject\\ClassDefinition::create(\n            ['name' => $className,\n                'userOwner' => $this->getAdminUser()->getId(), ]\n        );\n\n        $class->setId($classId);\n\n        $class->save(true);\n\n        return $this->adminJson(['success' => true, 'id' => $class->getId()]);\n    }\n\n    /**\n     * @Route(\"/add-custom-layout\", name=\"addcustomlayout\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCustomLayoutAction(Request $request)\n    {\n        $layoutId = $request->get('layoutIdentifier');\n        $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId);\n        if ($existingLayout) {\n            throw new \\Exception('Custom Layout identifier already exists');\n        }\n\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n            [\n                'name' => $request->get('layoutName'),\n                'userOwner' => $this->getAdminUser()->getId(),\n                'classId' => $request->get('classId'),\n            ]\n        );\n\n        $customLayout->setId($layoutId);\n        $customLayout->save();\n\n        $isWriteable = $customLayout->isWritable();\n        $data = $customLayout->getObjectVars();\n        $data['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'name' => $customLayout->getName(),\n                                 'data' => $data, ]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function deleteAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if ($class) {\n            $class->delete();\n        }\n\n        return new Response();\n    }\n\n    /**\n     * @Route(\"/delete-custom-layout\", name=\"deletecustomlayout\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLayoutAction(Request $request)\n    {\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $id = $request->get('id');\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($id) {\n            $currentLayoutId = $layout->getId();\n\n            return $currentLayoutId === $id || str_starts_with($currentLayoutId, $id . '.brick.');\n        });\n\n        foreach ($customLayouts->getLayoutDefinitions() as $customLayout) {\n            $customLayout->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/save-custom-layout\", name=\"savecustomlayout\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        $modificationDate = (int)$values['modificationDate'];\n        if ($modificationDate < $customLayout->getModificationDate()) {\n            return $this->adminJson(['success' => false, 'msg' => 'custom_layout_changed']);\n        }\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n            $customLayout->setLayoutDefinitions($layout);\n            $customLayout->setName($values['name']);\n            $customLayout->setDescription($values['description']);\n            $customLayout->setDefault($values['default']);\n            $customLayout->save();\n\n            return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'data' => $customLayout->getObjectVars()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/save\", name=\"save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        // check if the class was changed during editing in the frontend\n        if ($class->getModificationDate() != $values['modificationDate']) {\n            throw new \\Exception('The class was modified during editing, please reload the class and make your changes again');\n        }\n\n        if ($values['name'] != $class->getName()) {\n            $classByName = DataObject\\ClassDefinition::getByName($values['name']);\n            if ($classByName && $classByName->getId() != $class->getId()) {\n                throw new \\Exception('Class name already exists');\n            }\n\n            $values['name'] = $this->correctClassname($values['name']);\n            $class->rename($values['name']);\n        }\n\n        if ($values['compositeIndices']) {\n            foreach ($values['compositeIndices'] as $index => $compositeIndex) {\n                if ($compositeIndex['index_key'] !== ($sanitizedKey = preg_replace('/[^a-za-z0-9_\\-+]/', '', $compositeIndex['index_key']))) {\n                    $values['compositeIndices'][$index]['index_key'] = $sanitizedKey;\n                }\n            }\n        }\n\n        unset($values['creationDate']);\n        unset($values['userOwner']);\n        unset($values['layoutDefinitions']);\n        unset($values['fieldDefinitions']);\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        $class->setValues($values);\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n\n            $class->setLayoutDefinitions($layout);\n\n            $class->setUserModification($this->getAdminUser()->getId());\n            $class->setModificationDate(time());\n\n            $propertyVisibility = [];\n            foreach ($values as $key => $value) {\n                if (preg_match('/propertyVisibility/i', $key)) {\n                    if (preg_match(\"/\\.grid\\./i\", $key)) {\n                        $propertyVisibility['grid'][preg_replace(\"/propertyVisibility\\.grid\\./i\", '', $key)] = (bool) $value;\n                    } elseif (preg_match(\"/\\.search\\./i\", $key)) {\n                        $propertyVisibility['search'][preg_replace(\"/propertyVisibility\\.search\\./i\", '', $key)] = (bool) $value;\n                    }\n                }\n            }\n            if (!empty($propertyVisibility)) {\n                $class->setPropertyVisibility($propertyVisibility);\n            }\n\n            $class->save();\n\n            // set the fielddefinitions to [] because we don't need them in the response\n            $class->setFieldDefinitions([]);\n\n            return $this->adminJson(['success' => true, 'class' => $class]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    protected function correctClassname($name)\n    {\n        $name = preg_replace('/[^a-zA-Z0-9_]+/', '', $name);\n        $name = preg_replace('/^[0-9]+/', '', $name);\n\n        return $name;\n    }\n\n    /**\n     * @Route(\"/import-class\", name=\"importclass\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importClassAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, $json, false, true);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-custom-layout-definition\", name=\"importcustomlayoutdefinition\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importCustomLayoutDefinitionAction(Request $request)\n    {\n        $success = false;\n        $responseContent = [];\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $importData = $this->decodeJson($json);\n\n        $existingLayout = null;\n        if (isset($importData['name'])) {\n            $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getByName($importData['name']);\n\n            if ($existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                $responseContent['nameAlreadyInUse'] = true;\n            }\n        }\n\n        if (!$existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n            $customLayoutId = $request->get('id');\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($customLayoutId);\n            if ($customLayout) {\n                try {\n                    $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($importData['layoutDefinitions'], true);\n                    $customLayout->setLayoutDefinitions($layout);\n                    if (isset($importData['name']) === true) {\n                        $customLayout->setName($importData['name']);\n                    }\n                    $customLayout->setDescription($importData['description']);\n                    $customLayout->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    Logger::error($e->getMessage());\n                }\n            }\n\n            $responseContent['success'] = $success;\n        }\n\n        $response = $this->adminJson($responseContent);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-custom-layout-definitions\", name=\"getcustomlayoutdefinitions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutDefinitionsAction(Request $request)\n    {\n        $classIds = explode(',', $request->get('classId'));\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($classIds) {\n            return in_array($layout->getClassId(), $classIds) && !str_contains($layout->getId(), '.brick.');\n        });\n        $list = $list->load();\n        $result = [];\n        foreach ($list as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName() . ' (ID: ' . $item->getId() . ')',\n                'default' => $item->getDefault() ?: 0,\n            ];\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/get-all-layouts\", name=\"getalllayouts\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAllLayoutsAction(Request $request)\n    {\n        // get all classes\n        $resultList = [];\n        $mapping = [];\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) {\n            return !str_contains($layout->getId(), '.brick.');\n        });\n        $customLayouts->setOrder(function (DataObject\\ClassDefinition\\CustomLayout $a, DataObject\\ClassDefinition\\CustomLayout $b) {\n            return strcmp($a->getName(), $b->getName());\n        });\n\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $layout) {\n            $mapping[$layout->getClassId()][] = $layout;\n        }\n\n        $classList = new DataObject\\ClassDefinition\\Listing();\n        $classList->setOrder('ASC');\n        $classList->setOrderKey('name');\n        $classList = $classList->load();\n\n        foreach ($classList as $class) {\n            if (isset($mapping[$class->getId()])) {\n                $classMapping = $mapping[$class->getId()];\n                $resultList[] = [\n                    'type' => 'main',\n                    'id' => $class->getId() . '_' . 0,\n                    'name' => $class->getName(),\n                ];\n\n                foreach ($classMapping as $layout) {\n                    $resultList[] = [\n                        'type' => 'custom',\n                        'id' => $class->getId() . '_' . $layout->getId(),\n                        'name' => $class->getName() . ' - ' . $layout->getName(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson(['data' => $resultList]);\n    }\n\n    /**\n     * @Route(\"/export-class\", name=\"exportclass\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportClassAction(Request $request)\n    {\n        $id = $request->get('id');\n        $class = DataObject\\ClassDefinition::getById($id);\n\n        if (!$class instanceof DataObject\\ClassDefinition) {\n            $errorMessage = ': Class with id [ ' . $id . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class);\n\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"class_' . $class->getName() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-custom-layout-definition\", name=\"exportcustomlayoutdefinition\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportCustomLayoutDefinitionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        if ($id) {\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($id);\n            if ($customLayout) {\n                $name = $customLayout->getName();\n                $json = DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout);\n\n                $response = new Response($json);\n                $response->headers->set('Content-type', 'application/json');\n                $response->headers->set('Content-Disposition', 'attachment; filename=\"custom_definition_' . $name . '_export.json\"');\n\n                return $response;\n            }\n        }\n\n        $errorMessage = ': Custom Layout with id [ ' . $id . ' not found. ]';\n        Logger::error($errorMessage);\n\n        throw $this->createNotFoundException($errorMessage);\n    }\n\n    /**\n     * FIELDCOLLECTIONS\n     */\n\n    /**\n     * @Route(\"/fieldcollection-get\", name=\"fieldcollectionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionGetAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-update\", name=\"fieldcollectionupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionUpdateAction(Request $request)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing fieldcollection with same name with different lower/upper cases\n                $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('FieldCollection with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            $fcDef = new DataObject\\Fieldcollection\\Definition();\n            $fcDef->setKey($key);\n            $fcDef->setTitle($title);\n            $fcDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n                $fcDef->setParentClass($values['parentClass']);\n                $fcDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $fcDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $fcDef->setLayoutDefinitions($layout);\n            }\n\n            $fcDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $fcDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-fieldcollection\", name=\"importfieldcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-fieldcollection\", name=\"exportfieldcollection\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        if (!$fieldCollection instanceof DataObject\\Fieldcollection\\Definition) {\n            $errorMessage = ': Field-Collection with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection);\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"fieldcollection_' . $fieldCollection->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/fieldcollection-delete\", name=\"fieldcollectiondelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-tree\", name=\"fieldcollectiontree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $layoutDefinitions = [];\n\n        $definitions = [];\n\n        $allowedTypes = null;\n        if ($request->query->has('allowedTypes')) {\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n        }\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        $currentLayoutId = $request->get('layoutId', null);\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $groups = [];\n        foreach ($list as $item) {\n            if ($allowedTypes && !in_array($item->getKey(), $allowedTypes)) {\n                continue;\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_fieldcollection',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_fieldcollection',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n            'layoutDefinitions' => $layoutDefinitions,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n        $layoutDefinitions = $event->getArgument('layoutDefinitions');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['fieldcollections' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        }\n\n        return $this->adminJson($definitions);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-list\", name=\"fieldcollectionlist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n        $currentLayoutId = $request->get('layoutId');\n\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('allowedTypes')) {\n            $filteredList = [];\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n            foreach ($list as $type) {\n                if (in_array($type->getKey(), $allowedTypes)) {\n                    $filteredList[] = $type;\n\n                    // mainly for objects-meta data-type\n                    $layoutDefinitions = $type->getLayoutDefinitions();\n                    $context = [\n                        'containerType' => 'fieldcollection',\n                        'containerKey' => $type->getKey(),\n                        'outerFieldname' => $request->get('field_name'),\n                    ];\n\n                    $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                    DataObject\\Service::enrichLayoutDefinition($layoutDefinitions, $object, $context);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layoutDefinitions);\n                    }\n                }\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['fieldcollections' => $list]);\n    }\n\n    /**\n     * @Route(\"/get-class-definition-for-column-config\", name=\"getclassdefinitionforcolumnconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getClassDefinitionForColumnConfigAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $objectId = (int)$request->get('oid');\n\n        $filteredDefinitions = DataObject\\Service::getCustomLayoutDefinitionForGridColumnConfig($class, $objectId);\n\n        /** @var DataObject\\ClassDefinition\\Layout $layoutDefinitions */\n        $layoutDefinitions = isset($filteredDefinitions['layoutDefinition']) ? $filteredDefinitions['layoutDefinition'] : false;\n        $filteredFieldDefinition = isset($filteredDefinitions['fieldDefinition']) ? $filteredDefinitions['fieldDefinition'] : false;\n\n        $class->setFieldDefinitions([]);\n\n        $result = [];\n\n        DataObject\\Service::enrichLayoutDefinition($layoutDefinitions);\n\n        $result['objectColumns']['children'] = $layoutDefinitions->getChildren();\n        $result['objectColumns']['nodeLabel'] = 'object_columns';\n        $result['objectColumns']['nodeType'] = 'object';\n\n        // array(\"id\", \"fullpath\", \"published\", \"creationDate\", \"modificationDate\", \"filename\", \"classname\");\n        $systemColumnNames = DataObject\\Concrete::SYSTEM_COLUMN_NAMES;\n        $systemColumns = [];\n        foreach ($systemColumnNames as $systemColumn) {\n            $systemColumns[] = ['title' => $systemColumn, 'name' => $systemColumn, 'datatype' => 'data', 'fieldtype' => 'system'];\n        }\n        $result['systemColumns']['nodeLabel'] = 'system_columns';\n        $result['systemColumns']['nodeType'] = 'system';\n        $result['systemColumns']['children'] = $systemColumns;\n\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        foreach ($list as $brickDefinition) {\n            $classDefs = $brickDefinition->getClassDefinitions();\n            if (!empty($classDefs)) {\n                foreach ($classDefs as $classDef) {\n                    if ($classDef['classname'] == $class->getName()) {\n                        $fieldName = $classDef['fieldname'];\n                        if ($filteredFieldDefinition && !$filteredFieldDefinition[$fieldName]) {\n                            continue;\n                        }\n\n                        $key = $brickDefinition->getKey();\n\n                        $brickLayoutDefinitions = $brickDefinition->getLayoutDefinitions();\n                        $context = [\n                            'containerType' => 'objectbrick',\n                            'containerKey' => $key,\n                            'outerFieldname' => $fieldName,\n                        ];\n                        DataObject\\Service::enrichLayoutDefinition($brickLayoutDefinitions, null, $context);\n\n                        $result[$key]['nodeLabel'] = $key;\n                        $result[$key]['brickField'] = $fieldName;\n                        $result[$key]['nodeType'] = 'objectbricks';\n                        $result[$key]['children'] = $brickLayoutDefinitions->getChildren();\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * OBJECT BRICKS\n     */\n\n    /**\n     * @Route(\"/objectbrick-get\", name=\"objectbrickget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickGetAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/objectbrick-update\", name=\"objectbrickupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickUpdateAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing brick with same name with different lower/upper cases\n                $list = new DataObject\\Objectbrick\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('Brick with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            // now we create a new definition\n            $brickDef = new DataObject\\Objectbrick\\Definition();\n            $brickDef->setKey($key);\n            $brickDef->setTitle($title);\n            $brickDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n\n                $brickDef->setParentClass($values['parentClass']);\n                $brickDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $brickDef->setClassDefinitions($values['classDefinitions']);\n                $brickDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $brickDef->setLayoutDefinitions($layout);\n            }\n\n            $event = new GenericEvent($this, [\n                'brickDefinition' => $brickDef,\n            ]);\n            $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_UPDATE_DEFINITION);\n            $brickDef = $event->getArgument('brickDefinition');\n\n            $brickDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $brickDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-objectbrick\", name=\"importobjectbrick\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($objectBrick, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-objectbrick\", name=\"exportobjectbrick\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        if (!$objectBrick instanceof DataObject\\Objectbrick\\Definition) {\n            $errorMessage = ': Object-Brick with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $xml = DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick);\n        $response = new Response($xml);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"objectbrick_' . $objectBrick->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/objectbrick-delete\", name=\"objectbrickdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/objectbrick-tree\", name=\"objectbricktree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $context = null;\n        $layoutDefinitions = [];\n        $groups = [];\n        $definitions = [];\n        $fieldname = null;\n        $className = null;\n\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n        }\n\n        foreach ($list as $item) {\n            if ($forObjectEditor) {\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $item->getKey(),\n                    'outerFieldname' => $fieldname,\n                ];\n            }\n            if ($request->query->has('class_id') && $request->query->has('field_name')) {\n                $keep = false;\n                $clsDefs = $item->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $keep = true;\n\n                            continue;\n                        }\n                    }\n                }\n                if (!$keep) {\n                    continue;\n                }\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $layoutId = $request->get('layoutId');\n                    $itemLayoutDefinitions = null;\n                    if ($layoutId) {\n                        $layout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId.'.brick.'.$item->getKey());\n                        if ($layout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $itemLayoutDefinitions = $layout->getLayoutDefinitions();\n                        }\n                    }\n\n                    if ($itemLayoutDefinitions === null) {\n                        $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_objectbricks',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $layout = $item->getLayoutDefinitions();\n\n                    $currentLayoutId = $request->get('layoutId', null);\n\n                    $user = $this->getAdminUser();\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layout);\n                    } elseif ($currentLayoutId) {\n                        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($currentLayoutId.'.brick.'.$item->getKey());\n                        if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $layout = $customLayout->getLayoutDefinitions();\n                        }\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $layout;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_objectbricks',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['objectbricks' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        } else {\n            return $this->adminJson($definitions);\n        }\n    }\n\n    /**\n     * @Route(\"/objectbrick-list\", name=\"objectbricklist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $filteredList = [];\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n\n            foreach ($list as $type) {\n                $clsDefs = $type->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $filteredList[] = $type;\n\n                            continue;\n                        }\n                    }\n                }\n\n                $layout = $type->getLayoutDefinitions();\n\n                $currentLayoutId = $request->get('layoutId', null);\n\n                $user = $this->getAdminUser();\n                if ($currentLayoutId == -1 && $user->isAdmin()) {\n                    DataObject\\Service::createSuperLayout($layout);\n                    $objectData['layout'] = $layout;\n                }\n\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $type->getKey(),\n                    'outerFieldname' => $request->get('field_name'),\n                ];\n\n                $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n                $type->setLayoutDefinitions($layout);\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['objectbricks' => $list]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-import\", name=\"bulkimport\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkImportAction(Request $request)\n    {\n        $result = [];\n\n        $tmpName = $_FILES['Filedata']['tmp_name'];\n        $json = file_get_contents($tmpName);\n\n        $tmpName = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/bulk-import-' . uniqid() . '.tmp';\n        file_put_contents($tmpName, $json);\n\n        Session::useSession(function (AttributeBagInterface $session) use ($tmpName) {\n            $session->set('class_bulk_import_file', $tmpName);\n        }, 'pimcore_objects');\n\n        $json = json_decode($json, true);\n\n        foreach ($json as $groupName => $group) {\n            foreach ($group as $groupItem) {\n                $displayName = null;\n                $icon = null;\n\n                if ($groupName == 'class') {\n                    $name = $groupItem['name'];\n                    $icon = 'class';\n                } elseif ($groupName == 'customlayout') {\n                    $className = $groupItem['className'];\n\n                    $layoutData = ['className' => $className, 'name' => $groupItem['name']];\n                    $name = base64_encode(json_encode($layoutData));\n                    $displayName = $className . ' / ' . $groupItem['name'];\n                    $icon = 'custom_views';\n                } else {\n                    if ($groupName == 'objectbrick') {\n                        $icon = 'objectbricks';\n                    } elseif ($groupName == 'fieldcollection') {\n                        $icon = 'fieldcollection';\n                    }\n                    $name = $groupItem['key'];\n                }\n\n                if (!$displayName) {\n                    $displayName = $name;\n                }\n                $result[] = ['icon' => $icon, 'checked' => true, 'type' => $groupName, 'name' => $name, 'displayName' => $displayName];\n            }\n        }\n\n        $response = $this->adminJson(['success' => true, 'data' => $result]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-commit\", name=\"bulkcommit\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function bulkCommitAction(Request $request)\n    {\n        $data = json_decode($request->get('data'), true);\n\n        $session = Session::get('pimcore_objects');\n        $filename = $session->get('class_bulk_import_file');\n        $json = @file_get_contents($filename);\n        $json = json_decode($json, true);\n\n        $type = $data['type'];\n        $name = $data['name'];\n        $list = $json[$type];\n\n        foreach ($list as $item) {\n            unset($item['creationDate']);\n            unset($item['modificationDate']);\n            unset($item['userOwner']);\n            unset($item['userModification']);\n\n            if ($type == 'class' && $item['name'] == $name) {\n                $class = DataObject\\ClassDefinition::getByName($name);\n                if (!$class) {\n                    $class = new DataObject\\ClassDefinition();\n                    $class->setName($name);\n                }\n                $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'objectbrick' && $item['key'] == $name) {\n                if (!$brick = DataObject\\Objectbrick\\Definition::getByKey($name)) {\n                    $brick = new DataObject\\Objectbrick\\Definition();\n                    $brick->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($brick, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'fieldcollection' && $item['key'] == $name) {\n                if (!$fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($name)) {\n                    $fieldCollection = new DataObject\\Fieldcollection\\Definition();\n                    $fieldCollection->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'customlayout') {\n                $layoutData = json_decode(base64_decode($data['name']), true);\n                $className = $layoutData['className'];\n                $layoutName = $layoutData['name'];\n\n                if ($item['name'] == $layoutName && $item['className'] == $className) {\n                    $class = DataObject\\ClassDefinition::getByName($className);\n                    if (!$class) {\n                        throw new \\Exception('Class does not exist');\n                    }\n\n                    $classId = $class->getId();\n\n                    $layoutList = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n                    $layoutList->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($layoutName, $classId) {\n                        return $layout->getName() === $layoutName && $layout->getClassId() === $classId;\n                    });\n                    $layoutList = $layoutList->load();\n\n                    $layoutDefinition = null;\n                    if ($layoutList) {\n                        $layoutDefinition = $layoutList[0];\n                    }\n\n                    if (!$layoutDefinition) {\n                        $layoutDefinition = new DataObject\\ClassDefinition\\CustomLayout();\n                        $layoutDefinition->setName($layoutName);\n                        $layoutDefinition->setClassId($classId);\n                    }\n\n                    try {\n                        $layoutDefinition->setDescription($item['description']);\n                        $layoutDef = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($item['layoutDefinitions'], true);\n                        $layoutDefinition->setLayoutDefinitions($layoutDef);\n                        $layoutDefinition->save();\n                    } catch (\\Exception $e) {\n                        Logger::error($e->getMessage());\n\n                        return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-export-prepare\", name=\"bulkexportprepare\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportPrepareAction(Request $request)\n    {\n        $data = $request->get('data');\n\n        Session::useSession(function (AttributeBagInterface $session) use ($data) {\n            $session->set('class_bulk_export_settings', $data);\n        }, 'pimcore_objects');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/bulk-export\", name=\"bulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportAction(Request $request)\n    {\n        $result = [];\n\n        $fieldCollections = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $fieldCollections = $fieldCollections->load();\n\n        foreach ($fieldCollections as $fieldCollection) {\n            $result[] = [\n                'icon' => 'fieldcollection',\n                'checked' => true,\n                'type' => 'fieldcollection',\n                'name' => $fieldCollection->getKey(),\n                'displayName' => $fieldCollection->getKey(),\n            ];\n        }\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes->setOrder('ASC');\n        $classes->setOrderKey('id');\n        $classes = $classes->load();\n\n        foreach ($classes as $class) {\n            $result[] = [\n                'icon' => 'class',\n                'checked' => true,\n                'type' => 'class',\n                'name' => $class->getName(),\n                'displayName' => $class->getName(),\n            ];\n        }\n\n        $objectBricks = new DataObject\\Objectbrick\\Definition\\Listing();\n        $objectBricks = $objectBricks->load();\n\n        foreach ($objectBricks as $objectBrick) {\n            $result[] = [\n                'icon' => 'objectbricks',\n                'checked' => true,\n                'type' => 'objectbrick',\n                'name' => $objectBrick->getKey(),\n                'displayName' => $objectBrick->getKey(),\n            ];\n        }\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $customLayout) {\n            $class = DataObject\\ClassDefinition::getById($customLayout->getClassId());\n            $displayName = $class->getName() . ' / ' .  $customLayout->getName();\n\n            $result[] = [\n                'icon' => 'custom_views',\n                'checked' => true,\n                'type' => 'customlayout',\n                'name' => $customLayout->getId(),\n                'displayName' => $displayName,\n            ];\n        }\n\n        return new JsonResponse(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/do-bulk-export\", name=\"dobulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function doBulkExportAction(Request $request)\n    {\n        $session = Session::get('pimcore_objects');\n        $list = $session->get('class_bulk_export_settings');\n        $list = json_decode($list, true);\n        $result = [];\n\n        foreach ($list as $item) {\n            if ($item['type'] == 'fieldcollection') {\n                if ($fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($item['name'])) {\n                    $fieldCollectionJson = json_decode(DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection));\n                    $fieldCollectionJson->key = $item['name'];\n                    $result['fieldcollection'][] = $fieldCollectionJson;\n                }\n            } elseif ($item['type'] == 'class') {\n                if ($class = DataObject\\ClassDefinition::getByName($item['name'])) {\n                    $data = json_decode(DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class));\n                    $data->name = $item['name'];\n                    $result['class'][] = $data;\n                }\n            } elseif ($item['type'] == 'objectbrick') {\n                if ($objectBrick = DataObject\\Objectbrick\\Definition::getByKey($item['name'])) {\n                    $objectBrickJson = json_decode(DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick));\n                    $objectBrickJson->key = $item['name'];\n                    $result['objectbrick'][] = $objectBrickJson;\n                }\n            } elseif ($item['type'] == 'customlayout') {\n                if ($customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($item['name'])) {\n                    $classId = $customLayout->getClassId();\n                    $class = DataObject\\ClassDefinition::getById($classId);\n                    $customLayoutJson = json_decode(DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout));\n                    $customLayoutJson->name = $customLayout->getName();\n                    $customLayoutJson->className = $class->getName();\n                    $result['customlayout'][] = $customLayoutJson;\n                }\n            }\n        }\n\n        $result = json_encode($result, JSON_PRETTY_PRINT);\n        $response = new Response($result);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"bulk_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getTreeAction', 'fieldcollectionListAction', 'fieldcollectionTreeAction', 'fieldcollectionGetAction',\n            'getClassDefinitionForColumnConfigAction', 'objectbrickListAction', 'objectbrickTreeAction', 'objectbrickGetAction',\n        ];\n\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n\n    /**\n     * @Route(\"/get-fieldcollection-usages\", name=\"getfieldcollectionusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getFieldcollectionUsagesAction(Request $request)\n    {\n        $key = $request->get('key');\n        $result = [];\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes = $classes->load();\n        foreach ($classes as $class) {\n            $fieldDefs = $class->getFieldDefinitions();\n            foreach ($fieldDefs as $fieldDef) {\n                if ($fieldDef instanceof DataObject\\ClassDefinition\\Data\\Fieldcollections) {\n                    $allowedKeys = $fieldDef->getAllowedTypes();\n                    if (is_array($allowedKeys) && in_array($key, $allowedKeys)) {\n                        $result[] = [\n                            'class' => $class->getName(),\n                            'field' => $fieldDef->getName(),\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-bricks-usages\", name=\"getbrickusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getBrickUsagesAction(Request $request)\n    {\n        $classId = $request->get('classId');\n        $myclass = DataObject\\ClassDefinition::getById($classId);\n\n        $result = [];\n\n        $brickDefinitions = new DataObject\\Objectbrick\\Definition\\Listing();\n        $brickDefinitions = $brickDefinitions->load();\n        foreach ($brickDefinitions as $brickDefinition) {\n            $classes = $brickDefinition->getClassDefinitions();\n            foreach ($classes as $class) {\n                if ($myclass->getName() == $class['classname']) {\n                    $result[] = [\n                        'objectbrick' => $brickDefinition->getKey(),\n                        'field' => $class['fieldname'],\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-icons\", name=\"geticons\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return Response\n     */\n    public function getIconsAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $classId = $request->get('classId');\n\n        $iconDir = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img';\n        $classIcons = rscandir($iconDir . '/object-icons/');\n        $colorIcons = rscandir($iconDir . '/flat-color-icons/');\n        $twemoji = rscandir($iconDir . '/twemoji/');\n\n        $icons = array_merge($classIcons, $colorIcons, $twemoji);\n\n        foreach ($icons as &$icon) {\n            $icon = str_replace(PIMCORE_WEB_ROOT, '', $icon);\n        }\n\n        $event = new GenericEvent($this, [\n            'icons' => $icons,\n            'classId' => $classId,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECT_ICONS_PRE_SEND_DATA);\n        $icons = $event->getArgument('icons');\n\n        $result = [];\n        foreach ($icons as $icon) {\n            $content = file_get_contents(PIMCORE_WEB_ROOT . $icon);\n            $result[] = [\n                'text' => sprintf('<img src=\"data:%s;base64,%s\"/>', mime_content_type(PIMCORE_WEB_ROOT . $icon), base64_encode($content)),\n                'value' => $icon,\n            ];\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-class-identifier\", name=\"suggestclassidentifier\")\n     *\n     * @return Response\n     */\n    public function suggestClassIdentifierAction()\n    {\n        $db = Db::get();\n        $maxId = $db->fetchOne('SELECT MAX(CAST(id AS SIGNED)) FROM classes;');\n\n        $existingIds = $db->fetchFirstColumn('select LOWER(id) from classes');\n\n        $result = [\n            'suggestedIdentifier' => $maxId ? $maxId + 1 : 1,\n            'existingIds' => $existingIds,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-custom-layout-identifier\", name=\"suggestcustomlayoutidentifier\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function suggestCustomLayoutIdentifierAction(Request $request)\n    {\n        $classId = $request->get('classId');\n\n        $identifier = DataObject\\ClassDefinition\\CustomLayout::getIdentifier($classId);\n\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list = $list->load();\n        $existingIds = [];\n        $existingNames = [];\n\n        foreach ($list as $item) {\n            $existingIds[] = $item->getId();\n            if ($item->getClassId() == $classId) {\n                $existingNames[] = $item->getName();\n            }\n        }\n\n        $result = [\n            'suggestedIdentifier' => $identifier,\n            'existingIds' => $existingIds,\n            'existingNames' => $existingNames,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/text-layout-preview\", name=\"textlayoutpreview\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function textLayoutPreviewAction(Request $request)\n    {\n        $objPath = $request->get('previewObject', '');\n        $className = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . $request->get('className');\n        $obj = DataObject::getByPath($objPath) ?? new $className();\n\n        $textLayout = new DataObject\\ClassDefinition\\Layout\\Text();\n\n        $context = [\n          'data' => $request->get('renderingData'),\n        ];\n\n        if ($renderingClass = $request->get('renderingClass')) {\n            $textLayout->setRenderingClass($renderingClass);\n        }\n\n        if ($staticHtml = $request->get('html')) {\n            $textLayout->setHtml($staticHtml);\n        }\n\n        $html = $textLayout->enrichLayoutDefinition($obj, $context)->getHtml();\n\n        $content =\n            \"<html>\\n\" .\n            \"<head>\\n\" .\n            '<style type=\"text/css\">' . \"\\n\" .\n            file_get_contents(PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/css/admin.css') .\n            \"</style>\\n\" .\n            \"</head>\\n\\n\" .\n            \"<body class='objectlayout_element_text'>\\n\" .\n            $html .\n            \"\\n\\n</body>\\n\" .\n            \"</html>\\n\";\n\n        $response = new Response($content);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/video-supported-types\", name=\"videosupportedTypestypes\")\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function videoAllowedTypesAction(Request $request, TranslatorInterface $translator)\n    {\n        $videoDef = new DataObject\\ClassDefinition\\Data\\Video();\n        $res = [];\n\n        foreach ($videoDef->getSupportedTypes() as $type) {\n            $res[] = [\n                'key' => $type,\n                'value' => $translator->trans($type, [], 'admin'),\n            ];\n        }\n\n        return $this->adminJson($res);\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Doctrine\\DBAL\\Connection;\nuse Exception;\nuse Pimcore\\Analytics\\Google\\Config\\SiteConfigProvider;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Event\\Admin\\IndexActionSettingsEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Extension\\Bundle\\PimcoreBundleManager;\nuse Pimcore\\Maintenance\\Executor;\nuse Pimcore\\Maintenance\\ExecutorInterface;\nuse Pimcore\\Model\\Document\\DocType;\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Admin;\nuse Pimcore\\Tool\\Session;\nuse Pimcore\\Version;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @internal\n */\nclass IndexController extends AdminAbstractController implements KernelResponseEventInterface\n{\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $eventDispatcher;\n\n    /**\n     * @var PimcoreBundleManager\n     */\n    private $bundleManager;\n\n    /**\n     * @param EventDispatcherInterface $eventDispatcher\n     */\n    public function __construct(EventDispatcherInterface $eventDispatcher, PimcoreBundleManager $bundleManager)\n    {\n        $this->eventDispatcher = $eventDispatcher;\n        $this->bundleManager = $bundleManager;\n    }\n\n    /**\n     * @Route(\"/\", name=\"pimcore_admin_index\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param SiteConfigProvider $siteConfigProvider\n     * @param KernelInterface $kernel\n     * @param Executor $maintenanceExecutor\n     * @param CsrfProtectionHandler $csrfProtection\n     * @param Config $config\n     *\n     * @return Response\n     *\n     * @throws \\Exception\n     */\n    public function indexAction(\n        Request $request,\n        SiteConfigProvider $siteConfigProvider,\n        KernelInterface $kernel,\n        Executor $maintenanceExecutor,\n        CsrfProtectionHandler $csrfProtection,\n        Config $config\n    ) {\n        $user = $this->getAdminUser();\n        $perspectiveConfig = new \\Pimcore\\Perspective\\Config();\n        $templateParams = [\n            'config' => $config,\n            'perspectiveConfig' => $perspectiveConfig,\n        ];\n\n        $this\n            ->addRuntimePerspective($templateParams, $user)\n            ->addPluginAssets($templateParams);\n\n        $this->buildPimcoreSettings($request, $templateParams, $user, $kernel, $maintenanceExecutor, $csrfProtection, $siteConfigProvider);\n\n        if ($user->getTwoFactorAuthentication('required') && !$user->getTwoFactorAuthentication('enabled')) {\n            // only one login is allowed to setup 2FA by the user himself\n            $user->setTwoFactorAuthentication('enabled', true);\n            // disable the 2FA prompt for the current session\n            Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                $adminSession->set('2fa_required', false);\n            });\n\n            $user->save();\n\n            $templateParams['settings']['twoFactorSetupRequired'] = true;\n        }\n\n        // allow to alter settings via an event\n        $settingsEvent = new IndexActionSettingsEvent($templateParams['settings'] ?? []);\n        $this->eventDispatcher->dispatch($settingsEvent, AdminEvents::INDEX_ACTION_SETTINGS);\n        $templateParams['settings'] = $settingsEvent->getSettings();\n\n        return $this->render('@PimcoreAdmin/Admin/Index/index.html.twig', $templateParams);\n    }\n\n    /**\n     * @Route(\"/index/statistics\", name=\"pimcore_admin_index_statistics\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Connection $db\n     * @param KernelInterface $kernel\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function statisticsAction(Request $request, Connection $db, KernelInterface $kernel)\n    {\n        // DB\n        try {\n            $tables = $db->fetchAllAssociative('SELECT TABLE_NAME as name,TABLE_ROWS as `rows` from information_schema.TABLES\n                WHERE TABLE_ROWS IS NOT NULL AND TABLE_SCHEMA = ?', [$db->getDatabase()]);\n        } catch (\\Exception $e) {\n            $tables = [];\n        }\n\n        try {\n            $mysqlVersion = $db->fetchOne('SELECT VERSION()');\n        } catch (\\Exception $e) {\n            $mysqlVersion = null;\n        }\n\n        try {\n            $data = [\n                'instanceId' => $this->getInstanceId(),\n                'pimcore_major_version' => Version::getMajorVersion(),\n                'pimcore_version' => Version::getVersion(),\n                'pimcore_hash' => Version::getRevision(),\n                'php_version' => PHP_VERSION,\n                'mysql_version' => $mysqlVersion,\n                'bundles' => array_keys($kernel->getBundles()),\n                'tables' => $tables,\n            ];\n        } catch (\\Exception $e) {\n            $data = [];\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @param array $templateParams\n     * @param User $user\n     *\n     * @return $this\n     */\n    protected function addRuntimePerspective(array &$templateParams, User $user)\n    {\n        $runtimePerspective = \\Pimcore\\Perspective\\Config::getRuntimePerspective($user);\n        $templateParams['runtimePerspective'] = $runtimePerspective;\n\n        return $this;\n    }\n\n    /**\n     * @param array $templateParams\n     *\n     * @return $this\n     */\n    protected function addPluginAssets(array &$templateParams)\n    {\n        $templateParams['pluginJsPaths'] = $this->bundleManager->getJsPaths();\n        $templateParams['pluginCssPaths'] = $this->bundleManager->getCssPaths();\n\n        return $this;\n    }\n\n    /**\n     * @param Request $request\n     * @param array $templateParams\n     * @param User $user\n     * @param KernelInterface $kernel\n     * @param ExecutorInterface $maintenanceExecutor\n     * @param CsrfProtectionHandler $csrfProtection\n     * @param SiteConfigProvider $siteConfigProvider\n     *\n     * @return $this\n     */\n    protected function buildPimcoreSettings(Request $request, array &$templateParams, User $user, KernelInterface $kernel, ExecutorInterface $maintenanceExecutor, CsrfProtectionHandler $csrfProtection, SiteConfigProvider $siteConfigProvider)\n    {\n        $config                = $templateParams['config'];\n        $dashboardHelper       = new \\Pimcore\\Helper\\Dashboard($user);\n        $customAdminEntrypoint = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n        try {\n            $adminEntrypointUrl = $this->generateUrl($customAdminEntrypoint, [], UrlGeneratorInterface::ABSOLUTE_URL);\n        } catch (Exception) {\n            // if the custom admin entrypoint is not defined, return null in the settings\n            $adminEntrypointUrl = null;\n        }\n\n        $settings = [\n            'instanceId'          => $this->getInstanceId(),\n            'version'             => Version::getVersion(),\n            'build'               => Version::getRevision(),\n            'debug'               => \\Pimcore::inDebugMode(),\n            'devmode'             => \\Pimcore::inDevMode(),\n            'disableMinifyJs'     => \\Pimcore::disableMinifyJs(),\n            'environment'         => $kernel->getEnvironment(),\n            'cached_environments' => Tool::getCachedSymfonyEnvironments(),\n            'sessionId'           => htmlentities(Session::getSessionId(), ENT_QUOTES, 'UTF-8'),\n\n            // languages\n            'language'         => $request->getLocale(),\n            'websiteLanguages' => Admin::reorderWebsiteLanguages(\n                $this->getAdminUser(),\n                $config['general']['valid_languages'],\n                true\n            ),\n\n            // flags\n            'showCloseConfirmation'          => true,\n            'debug_admin_translations'       => (bool)$config['general']['debug_admin_translations'],\n            'document_generatepreviews'      => (bool)$config['documents']['generate_preview'],\n            'asset_disable_tree_preview'     => (bool)$config['assets']['disable_tree_preview'],\n            'chromium'                       => \\Pimcore\\Image\\Chromium::isSupported(),\n            'htmltoimage'                    => \\Pimcore\\Image\\HtmlToImage::isSupported(),\n            'videoconverter'                 => \\Pimcore\\Video::isAvailable(),\n            'asset_hide_edit'                => (bool)$config['assets']['hide_edit_image'],\n            'main_domain'                    => $config['general']['domain'],\n            'custom_admin_entrypoint_url'    => $adminEntrypointUrl,\n            'timezone'                       => $config['general']['timezone'],\n            'tile_layer_url_template'        => $config['maps']['tile_layer_url_template'],\n            'geocoding_url_template'         => $config['maps']['geocoding_url_template'],\n            'reverse_geocoding_url_template' => $config['maps']['reverse_geocoding_url_template'],\n            'asset_tree_paging_limit'        => $config['assets']['tree_paging_limit'],\n            'document_tree_paging_limit'     => $config['documents']['tree_paging_limit'],\n            'object_tree_paging_limit'       => $config['objects']['tree_paging_limit'],\n            'maxmind_geoip_installed'        => (bool) $this->getParameter('pimcore.geoip.db_file'),\n            'hostname'                       => htmlentities(\\Pimcore\\Tool::getHostname(), ENT_QUOTES, 'UTF-8'),\n\n            'document_auto_save_interval' => $config['documents']['auto_save_interval'],\n            'object_auto_save_interval'   => $config['objects']['auto_save_interval'],\n\n            // perspective and portlets\n            'perspective'           => $templateParams['runtimePerspective'],\n            'availablePerspectives' => \\Pimcore\\Perspective\\Config::getAvailablePerspectives($user),\n            'disabledPortlets'      => $dashboardHelper->getDisabledPortlets(),\n\n            // google analytics\n            'google_analytics_enabled' => (bool) $siteConfigProvider->isSiteReportingConfigured(),\n\n            // this stuff is used to decide whether the \"add\" button should be grayed out or not\n            'image-thumbnails-writeable'          => (new \\Pimcore\\Model\\Asset\\Image\\Thumbnail\\Config())->isWriteable(),\n            'video-thumbnails-writeable'          => (new \\Pimcore\\Model\\Asset\\Video\\Thumbnail\\Config())->isWriteable(),\n            'custom-reports-writeable'            => (new \\Pimcore\\Model\\Tool\\CustomReport\\Config())->isWriteable(),\n            'document-types-writeable'            => (new DocType())->isWriteable(),\n            'web2print-writeable'                 => \\Pimcore\\Web2Print\\Config::isWriteable(),\n            'predefined-properties-writeable'     => (new \\Pimcore\\Model\\Property\\Predefined())->isWriteable(),\n            'predefined-asset-metadata-writeable' => (new \\Pimcore\\Model\\Metadata\\Predefined())->isWriteable(),\n            'staticroutes-writeable'              => (new Staticroute())->isWriteable(),\n            'perspectives-writeable'              => \\Pimcore\\Perspective\\Config::isWriteable(),\n            'custom-views-writeable'              => \\Pimcore\\CustomView\\Config::isWriteable(),\n            'class-definition-writeable'          => isset($_SERVER['PIMCORE_CLASS_DEFINITION_WRITABLE']) ? (bool)$_SERVER['PIMCORE_CLASS_DEFINITION_WRITABLE'] : true,\n        ];\n\n        $this\n            ->addSystemVarSettings($settings)\n            ->addMaintenanceSettings($settings, $maintenanceExecutor)\n            ->addMailSettings($settings, $config)\n            ->addCustomViewSettings($settings);\n\n        $settings['csrfToken'] = $csrfProtection->getCsrfToken();\n\n        $templateParams['settings'] = $settings;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    private function getInstanceId()\n    {\n        $instanceId = 'not-set';\n\n        try {\n            $instanceId = $this->getParameter('secret');\n            $instanceId = sha1(substr($instanceId, 3, -3));\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        return $instanceId;\n    }\n\n    /**\n     * @param array $settings\n     *\n     * @return $this\n     */\n    protected function addSystemVarSettings(array &$settings)\n    {\n        // upload limit\n        $max_upload = filesize2bytes(ini_get('upload_max_filesize') . 'B');\n        $max_post = filesize2bytes(ini_get('post_max_size') . 'B');\n        $upload_mb = min($max_upload, $max_post);\n\n        $settings['upload_max_filesize'] = (int) $upload_mb;\n\n        // session lifetime (gc)\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $settings['session_gc_maxlifetime'] = (int)$session_gc_maxlifetime;\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     * @param ExecutorInterface $maintenanceExecutor\n     *\n     * @return $this\n     */\n    protected function addMaintenanceSettings(array &$settings, ExecutorInterface $maintenanceExecutor)\n    {\n        // check maintenance\n        $maintenance_active = false;\n        if ($lastExecution = $maintenanceExecutor->getLastExecution()) {\n            if ((time() - $lastExecution) < 3660) { // maintenance script should run at least every hour + a little tolerance\n                $maintenance_active = true;\n            }\n        }\n\n        $settings['maintenance_active'] = $maintenance_active;\n        $settings['maintenance_mode'] = Admin::isInMaintenanceMode();\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     * @param Config $config\n     *\n     * @return $this\n     */\n    protected function addMailSettings(array &$settings, $config)\n    {\n        //mail settings\n        $mailIncomplete = false;\n        if (isset($config['email'])) {\n            if (\\Pimcore::inDebugMode() && empty($config['email']['debug']['email_addresses'])) {\n                $mailIncomplete = true;\n            }\n            if (empty($config['email']['sender']['email'])) {\n                $mailIncomplete = true;\n            }\n        }\n\n        $settings['mail'] = !$mailIncomplete;\n        $settings['mailDefaultAddress'] = $config['email']['sender']['email'] ?? null;\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     *\n     * @return $this\n     */\n    protected function addCustomViewSettings(array &$settings)\n    {\n        $cvData = [];\n\n        // still needed when publishing objects\n        $cvConfig = \\Pimcore\\CustomView\\Config::get();\n\n        if ($cvConfig) {\n            foreach ($cvConfig as $node) {\n                $tmpData = $node;\n                // backwards compatibility\n                $treeType = $tmpData['treetype'] ? $tmpData['treetype'] : 'object';\n                $rootNode = Service::getElementByPath($treeType, $tmpData['rootfolder']);\n\n                if ($rootNode) {\n                    $tmpData['rootId'] = $rootNode->getId();\n                    $tmpData['allowedClasses'] = $tmpData['classes'] ?? null;\n                    $tmpData['showroot'] = (bool)$tmpData['showroot'];\n\n                    // Check if a user has privileges to that node\n                    if ($rootNode->isAllowed('list')) {\n                        $cvData[] = $tmpData;\n                    }\n                }\n            }\n        }\n\n        $settings['customviews'] = $cvData;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelResponseEvent(ResponseEvent $event)\n    {\n        $event->getResponse()->headers->set('X-Frame-Options', 'deny', true);\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Cache;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Cache\\Symfony\\CacheClearer;\nuse Pimcore\\Config;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\SystemEvents;\nuse Pimcore\\File;\nuse Pimcore\\Helper\\StopMessengerWorkersTrait;\nuse Pimcore\\Localization\\LocaleServiceInterface;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Glossary;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Property;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\Tool\\SettingsStore;\nuse Pimcore\\Model\\WebsiteSetting;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\TerminateEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Yaml\\Yaml;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/settings\")\n *\n * @internal\n */\nclass SettingsController extends AdminAbstractController\n{\n    use StopMessengerWorkersTrait;\n\n    private const CUSTOM_LOGO_PATH = 'custom-logo.image';\n\n    public function __construct(protected TranslatorInterface $translator)\n    {\n    }\n\n    /**\n     * @Route(\"/display-custom-logo\", name=\"pimcore_settings_display_custom_logo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function displayCustomLogoAction(Request $request)\n    {\n        $mime = 'image/svg+xml';\n        if ($request->get('white')) {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-white.svg';\n        } else {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-gray.svg';\n        }\n\n        $stream = fopen($logo, 'rb');\n\n        $storage = Tool\\Storage::get('admin');\n        if ($storage->fileExists(self::CUSTOM_LOGO_PATH)) {\n            try {\n                $mime = $storage->mimeType(self::CUSTOM_LOGO_PATH);\n                $stream = $storage->readStream(self::CUSTOM_LOGO_PATH);\n            } catch (\\Exception $e) {\n                // do nothing\n            }\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $mime,\n            'Content-Security-Policy' => \"script-src 'none'\",\n        ]);\n    }\n\n    /**\n     * @Route(\"/upload-custom-logo\", name=\"pimcore_admin_settings_uploadcustomlogo\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function uploadCustomLogoAction(Request $request)\n    {\n        $logoFile = $request->files->get('Filedata');\n\n        if (!$logoFile instanceof UploadedFile\n            || !in_array($logoFile->guessExtension(), ['svg', 'png', 'jpg'])\n        ) {\n            throw new \\Exception('Unsupported file format.');\n        }\n\n        $storage = Tool\\Storage::get('admin');\n        $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($logoFile->getPathname(), 'rb'));\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/delete-custom-logo\", name=\"pimcore_admin_settings_deletecustomlogo\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLogoAction(Request $request)\n    {\n        if (Tool\\Storage::get('admin')->fileExists(self::CUSTOM_LOGO_PATH)) {\n            Tool\\Storage::get('admin')->delete(self::CUSTOM_LOGO_PATH);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Used by the predefined metadata grid\n     *\n     * @Route(\"/predefined-metadata\", name=\"pimcore_admin_settings_metadata\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function metadataAction(Request $request)\n    {\n        $this->checkPermission('asset_metadata');\n\n        if ($request->get('data')) {\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $metadata = Metadata\\Predefined::getById($id);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $metadata = Metadata\\Predefined::getById($data['id']);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem && $existingItem->getId() != $metadata->getId()) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->minimize();\n                $metadata->save();\n                $metadata->expand();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Metadata\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $metadata = Metadata\\Predefined::create();\n\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->save();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Metadata\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Metadata\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getDefinitions() as $metadata) {\n                $metadata->expand();\n                $data = $metadata->getObjectVars();\n                $data['writeable'] = $metadata->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-predefined-metadata\", name=\"pimcore_admin_settings_getpredefinedmetadata\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedMetadataAction(Request $request)\n    {\n        $type = $request->get('type');\n        $subType = $request->get('subType');\n        $group = $request->get('group');\n        $list = Metadata\\Predefined\\Listing::getByTargetType($type, [$subType]);\n        $result = [];\n        foreach ($list as $item) {\n            $itemGroup = $item->getGroup() ?? '';\n            if ($group === 'default' || $group === $itemGroup) {\n                $item->expand();\n                $data = $item->getObjectVars();\n                $data['writeable'] = $item->isWriteable();\n                $result[] = $data;\n            }\n        }\n\n        return $this->adminJson(['data' => $result, 'success' => true]);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_settings_properties\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('predefined_properties');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $property = Property\\Predefined::getById($id);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $property->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $property = Property\\Predefined::getById($data['id']);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                if (is_array($data['ctype'])) {\n                    $data['ctype'] = implode(',', $data['ctype']);\n                }\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Property\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $property = Property\\Predefined::create();\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Property\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Property\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if ($value) {\n                            $cellValues = is_array($value) ? $value : [$value];\n\n                            foreach ($cellValues as $cellValue) {\n                                if (stripos((string)$cellValue, $filter) !== false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getProperties() as $property) {\n                $data = $property->getObjectVars();\n                $data['writeable'] = $property->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-system\", name=\"pimcore_admin_settings_getsystem\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function getSystemAction(Request $request, Config $config)\n    {\n        $this->checkPermission('system_settings');\n\n        $valueArray = [\n            'general' => $config['general'],\n            'documents' => $config['documents'],\n            'assets' => $config['assets'],\n            'objects' => $config['objects'],\n            'branding' => $config['branding'],\n            'email' => $config['email'],\n        ];\n\n        $locales = Tool::getSupportedLocales();\n        $languageOptions = [];\n        $validLanguages = [];\n        foreach ($locales as $short => $translation) {\n            if (!empty($short)) {\n                $languageOptions[] = [\n                    'language' => $short,\n                    'display' => $translation . \" ($short)\",\n                ];\n                $validLanguages[] = $short;\n            }\n        }\n\n        $valueArray['general']['valid_language'] = explode(',', $valueArray['general']['valid_languages']);\n\n        //for \"wrong\" legacy values\n        foreach ($valueArray['general']['valid_language'] as $existingValue) {\n            if (!in_array($existingValue, $validLanguages)) {\n                $languageOptions[] = [\n                    'language' => $existingValue,\n                    'display' => $existingValue,\n                ];\n            }\n        }\n\n        $response = [\n            'values' => $valueArray,\n            'config' => [\n                'languages' => $languageOptions,\n            ],\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-system\", name=\"pimcore_admin_settings_setsystem\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function setSystemAction(\n        LocaleServiceInterface $localeService,\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermission('system_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        $existingValues = [];\n\n        try {\n            $file = Config::locateConfigFile('system.yml');\n            $existingValues = Config::getConfigInstance($file, true);\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        // localized error pages\n        $localizedErrorPages = [];\n\n        // fallback languages\n        $fallbackLanguages = [];\n        $existingValues['pimcore']['general']['fallback_languages'] = [];\n        $languages = explode(',', $values['general.validLanguages']);\n        $filteredLanguages = [];\n\n        foreach ($languages as $language) {\n            if (isset($values['general.fallbackLanguages.' . $language])) {\n                $fallbackLanguages[$language] = str_replace(' ', '', $values['general.fallbackLanguages.' . $language]);\n            }\n\n            // localized error pages\n            if (isset($values['documents.error_pages.localized.' . $language])) {\n                $localizedErrorPages[$language] = $values['documents.error_pages.localized.' . $language];\n            }\n\n            if ($localeService->isLocale($language)) {\n                $filteredLanguages[] = $language;\n            }\n        }\n\n        // check if there's a fallback language endless loop\n        foreach ($fallbackLanguages as $sourceLang => $targetLang) {\n            $this->checkFallbackLanguageLoop($sourceLang, $fallbackLanguages);\n        }\n\n        $settings['pimcore'] = [\n            'general' => [\n                'domain' => $values['general.domain'],\n                'redirect_to_maindomain' => $values['general.redirect_to_maindomain'],\n                'language' => $values['general.language'],\n                'valid_languages' => implode(',', $filteredLanguages),\n                'fallback_languages' => $fallbackLanguages,\n                'default_language' => $values['general.defaultLanguage'],\n                'debug_admin_translations' => $values['general.debug_admin_translations'],\n            ],\n            'documents' => [\n                'versions' => [\n                    'days' => $values['documents.versions.days'] ?? null,\n                    'steps' => $values['documents.versions.steps'] ?? null,\n                ],\n                'error_pages' => [\n                    'default' => $values['documents.error_pages.default'],\n                    'localized' => $localizedErrorPages,\n                ],\n            ],\n            'objects' => [\n                'versions' => [\n                    'days' => $values['objects.versions.days'] ?? null,\n                    'steps' => $values['objects.versions.steps'] ?? null,\n                ],\n            ],\n            'assets' => [\n                'versions' => [\n                    'days' => $values['assets.versions.days'] ?? null,\n                    'steps' => $values['assets.versions.steps'] ?? null,\n                ],\n                'hide_edit_image' => $values['assets.hide_edit_image'],\n                'disable_tree_preview' => $values['assets.disable_tree_preview'],\n            ],\n        ];\n\n        //branding\n        $settings['pimcore_admin'] = [\n            'branding' =>\n                [\n                    'login_screen_invert_colors' => $values['branding.login_screen_invert_colors'],\n                    'color_login_screen' => $values['branding.color_login_screen'],\n                    'color_admin_interface' => $values['branding.color_admin_interface'],\n                    'color_admin_interface_background' => $values['branding.color_admin_interface_background'],\n                    'login_screen_custom_image' => str_replace('%', '%%', $values['branding.login_screen_custom_image']),\n                ],\n        ];\n\n        if (array_key_exists('email.debug.emailAddresses', $values) && $values['email.debug.emailAddresses']) {\n            $settings['pimcore']['email']['debug']['email_addresses'] = $values['email.debug.emailAddresses'];\n        }\n\n        $settingsYml = Yaml::dump($settings, 5);\n        $configFile = Config::locateConfigFile('system.yml');\n        File::put($configFile, $settingsYml);\n\n        // clear all caches\n        $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        $this->stopMessengerWorkers();\n\n        $eventDispatcher->addListener(KernelEvents::TERMINATE, function (TerminateEvent $event) use (\n            $cache, $eventDispatcher, $filesystem\n        ) {\n            // we need to clear the cache with a delay, because the cache is used by messenger:stop-workers\n            // to send the stop signal to all worker processes\n            sleep(2);\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        });\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param string $source\n     * @param array $definitions\n     * @param array $fallbacks\n     *\n     * @throws \\Exception\n     */\n    protected function checkFallbackLanguageLoop($source, $definitions, $fallbacks = [])\n    {\n        if (isset($definitions[$source])) {\n            $targets = explode(',', $definitions[$source]);\n            foreach ($targets as $l) {\n                $target = trim($l);\n                if ($target) {\n                    if (in_array($target, $fallbacks)) {\n                        throw new \\Exception(\"Language `$source` | `$target` causes an infinte loop.\");\n                    }\n                    $fallbacks[] = $target;\n\n                    $this->checkFallbackLanguageLoop($target, $definitions, $fallbacks);\n                }\n            }\n        } else {\n            throw new \\Exception(\"Language `$source` doesn't exist\");\n        }\n    }\n\n    /**\n     * @Route(\"/get-web2print\", name=\"pimcore_admin_settings_getweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = Config::getWeb2PrintConfig();\n        $valueArray = $values->toArray();\n\n        $optionsString = [];\n        if ($valueArray['wkhtml2pdfOptions'] ?? false) {\n            foreach ($valueArray['wkhtml2pdfOptions'] as $key => $value) {\n                $tmpStr = '--'.$key;\n                if ($value !== null && $value !== '') {\n                    $tmpStr .= ' '.$value;\n                }\n                $optionsString[] = $tmpStr;\n            }\n        }\n        $valueArray['wkhtml2pdfOptions'] = implode(\"\\n\", $optionsString);\n\n        $response = [\n            'values' => $valueArray,\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-web2print\", name=\"pimcore_admin_settings_setweb2print\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function setWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        unset($values['documentation']);\n        unset($values['additions']);\n        unset($values['json_converter']);\n\n        if ($values['wkhtml2pdfOptions']) {\n            $optionArray = [];\n            $lines = explode(\"\\n\", $values['wkhtml2pdfOptions']);\n            foreach ($lines as $line) {\n                $parts = explode(' ', substr($line, 2));\n                $key = trim($parts[0]);\n                if ($key) {\n                    $value = trim($parts[1] ?? '');\n                    $optionArray[$key] = $value;\n                }\n            }\n            $values['wkhtml2pdfOptions'] = $optionArray;\n        }\n\n        \\Pimcore\\Web2Print\\Config::save($values);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-cache\", name=\"pimcore_admin_settings_clearcache\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param KernelInterface $kernel\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param CoreCacheHandler $cache\n     * @param Filesystem $filesystem\n     * @param CacheClearer $symfonyCacheClearer\n     *\n     * @return JsonResponse\n     */\n    public function clearCacheAction(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermissionsHasOneOf(['clear_cache', 'system_settings']);\n\n        $result = [\n            'success' => true,\n        ];\n\n        $clearPimcoreCache = !(bool)$request->get('only_symfony_cache');\n        $clearSymfonyCache = !(bool)$request->get('only_pimcore_cache');\n\n        if ($clearPimcoreCache) {\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        }\n\n        if ($clearSymfonyCache) {\n            $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        }\n\n        $response = new JsonResponse($result);\n\n        if ($clearSymfonyCache) {\n            // we send the response directly here and exit to make sure no code depending on the stale container\n            // is running after this\n            $response->sendHeaders();\n            $response->sendContent();\n            exit;\n        }\n\n        return $response;\n    }\n\n    private function clearPimcoreCache(\n        CoreCacheHandler $cache,\n        EventDispatcherInterface $eventDispatcher,\n        Filesystem $filesystem,\n    ): void {\n        // empty document cache\n        $cache->clearAll();\n\n        if ($filesystem->exists(PIMCORE_CACHE_DIRECTORY)) {\n            $filesystem->remove(PIMCORE_CACHE_DIRECTORY);\n        }\n\n        // PIMCORE-1854 - recreate .dummy file => should remain\n        File::put(PIMCORE_CACHE_DIRECTORY . '/.gitkeep', '');\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR);\n    }\n\n    private function clearSymfonyCache(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CacheClearer $symfonyCacheClearer,\n    ): void {\n        // pass one or move env parameters to clear multiple envs\n        // if no env is passed it will use the current one\n        $environments = $request->get('env', $kernel->getEnvironment());\n\n        if (!is_array($environments)) {\n            $environments = trim((string)$environments);\n\n            if (empty($environments)) {\n                $environments = [];\n            } else {\n                $environments = [$environments];\n            }\n        }\n\n        if (empty($environments)) {\n            $environments = [$kernel->getEnvironment()];\n        }\n\n        $result['environments'] = $environments;\n\n        if (in_array($kernel->getEnvironment(), $environments)) {\n            // remove terminate and exception event listeners for the current env as they break with a\n            // cleared container - see #2434\n            foreach ($eventDispatcher->getListeners(KernelEvents::TERMINATE) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::TERMINATE, $listener);\n            }\n\n            foreach ($eventDispatcher->getListeners(KernelEvents::EXCEPTION) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::EXCEPTION, $listener);\n            }\n        }\n\n        foreach ($environments as $environment) {\n            try {\n                $symfonyCacheClearer->clear($environment);\n            } catch (\\Throwable $e) {\n                $errors = $result['errors'] ?? [];\n                $errors[] = $e->getMessage();\n\n                $result = array_merge($result, [\n                    'success' => false,\n                    'errors' => $errors,\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/clear-output-cache\", name=\"pimcore_admin_settings_clearoutputcache\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearOutputCacheAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_fullpage_cache');\n\n        // remove \"output\" out of the ignored tags, if a cache lifetime is specified\n        Cache::removeIgnoredTagOnClear('output');\n\n        // empty document cache\n        Cache::clearTags(['output', 'output_lifetime']);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_FULLPAGE_CACHE);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-temporary-files\", name=\"pimcore_admin_settings_cleartemporaryfiles\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearTemporaryFilesAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_temp_files');\n\n        // public files\n        Tool\\Storage::get('thumbnail')->deleteDirectory('/');\n        Db::get()->executeQuery('TRUNCATE TABLE assets_image_thumbnail_cache');\n\n        Tool\\Storage::get('asset_cache')->deleteDirectory('/');\n\n        // system files\n        recursiveDelete(PIMCORE_SYSTEM_TEMP_DIRECTORY, false);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_TEMPORARY_FILES);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/staticroutes\", name=\"pimcore_admin_settings_staticroutes\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function staticroutesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('routes');\n\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $route = Staticroute::getById($id);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $route->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $route = Staticroute::getById($data['id']);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n\n                $route->setValues($data);\n\n                $route->save();\n\n                return $this->adminJson(['data' => $route->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Staticroute())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                unset($data['id']);\n\n                // save route\n                $route = new Staticroute();\n                $route->setValues($data);\n\n                $route->save();\n\n                $responseData = $route->getObjectVars();\n                $responseData['writeable'] = $route->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Staticroute\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Staticroute $staticRoute) use ($filter) {\n                    foreach ($staticRoute->getObjectVars() as $value) {\n                        if (!is_scalar($value)) {\n                            continue;\n                        }\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $routes = [];\n            foreach ($list->getRoutes() as $routeFromList) {\n                $route = $routeFromList->getObjectVars();\n                $route['writeable'] = $routeFromList->isWriteable();\n                if (is_array($routeFromList->getSiteId())) {\n                    $route['siteId'] = implode(',', $routeFromList->getSiteId());\n                }\n                $routes[] = $route;\n            }\n\n            return $this->adminJson(['data' => $routes, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-admin-languages\", name=\"pimcore_admin_settings_getavailableadminlanguages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAdminLanguagesAction(Request $request)\n    {\n        $langs = [];\n        $availableLanguages = Tool\\Admin::getLanguages();\n        $locales = Tool::getSupportedLocales();\n\n        foreach ($availableLanguages as $lang) {\n            if (array_key_exists($lang, $locales)) {\n                $langs[] = [\n                    'language' => $lang,\n                    'display' => $locales[$lang],\n                ];\n            }\n        }\n\n        usort($langs, function ($a, $b) {\n            return strcmp($a['display'], $b['display']);\n        });\n\n        return $this->adminJson($langs);\n    }\n\n    /**\n     * @Route(\"/glossary\", name=\"pimcore_admin_settings_glossary\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function glossaryAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('glossary');\n\n            Cache::clearTag('glossary');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $glossary = Glossary::getById($id);\n                $glossary->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save glossary\n                $glossary = Glossary::getById($data['id']);\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save glossary\n                $glossary = new Glossary();\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of glossaries\n\n            $list = new Glossary\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`text` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $list->load();\n\n            $glossaries = [];\n            foreach ($list->getGlossary() as $glossary) {\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                $glossaries[] = $glossary->getObjectVars();\n            }\n\n            return $this->adminJson(['data' => $glossaries, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-sites\", name=\"pimcore_admin_settings_getavailablesites\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableSitesAction(Request $request)\n    {\n        $excludeMainSite = $request->get('excludeMainSite');\n\n        $sitesList = new Model\\Site\\Listing();\n        $sitesObjects = $sitesList->load();\n        $sites = [];\n        if (!$excludeMainSite) {\n            $sites[] = [\n                'id' => 'default',\n                'rootId' => 1,\n                'domains' => '',\n                'rootPath' => '/',\n                'domain' => $this->translator->trans('main_site'),\n            ];\n        }\n\n        foreach ($sitesObjects as $site) {\n            if ($site->getRootDocument()) {\n                if ($site->getMainDomain()) {\n                    $sites[] = [\n                        'id' => $site->getId(),\n                        'rootId' => $site->getRootId(),\n                        'domains' => implode(',', $site->getDomains()),\n                        'rootPath' => $site->getRootPath(),\n                        'domain' => $site->getMainDomain(),\n                    ];\n                }\n            } else {\n                // site is useless, parent doesn't exist anymore\n                $site->delete();\n            }\n        }\n\n        return $this->adminJson($sites);\n    }\n\n    /**\n     * @Route(\"/get-available-countries\", name=\"pimcore_admin_settings_getavailablecountries\", methods={\"GET\"})\n     *\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableCountriesAction(LocaleServiceInterface $localeService)\n    {\n        $countries = $localeService->getDisplayRegions();\n        asort($countries);\n\n        $options = [];\n\n        foreach ($countries as $short => $translation) {\n            if (strlen($short) == 2) {\n                $options[] = [\n                    'key' => $translation . ' (' . $short . ')',\n                    'value' => $short,\n                ];\n            }\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/thumbnail-adapter-check\", name=\"pimcore_admin_settings_thumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function thumbnailAdapterCheckAction(Request $request, TranslatorInterface $translator)\n    {\n        $content = '';\n\n        $instance = \\Pimcore\\Image::getInstance();\n        if ($instance instanceof \\Pimcore\\Image\\Adapter\\GD) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $translator->trans('important_use_imagick_pecl_extensions_for_best_results_gd_is_just_a_fallback_with_less_quality', [], 'admin') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\", name=\"pimcore_admin_settings_thumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_thumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_thumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-downloadable\", name=\"pimcore_admin_settings_thumbnaildownloadable\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDownloadableAction()\n    {\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n        $list->setFilter(function (Asset\\Image\\Thumbnail\\Config $config) {\n            return $config->isDownloadable();\n        });\n\n        foreach ($list->getThumbnails() as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName(),\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-add\", name=\"pimcore_admin_settings_thumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Image\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-delete\", name=\"pimcore_admin_settings_thumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-get\", name=\"pimcore_admin_settings_thumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/thumbnail-update\", name=\"pimcore_admin_settings_thumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            if (preg_match('/[\"<>]/', $mediaName)) {\n                throw new \\Exception('Invalid media query name');\n            }\n\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-adapter-check\", name=\"pimcore_admin_settings_videothumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function videoThumbnailAdapterCheckAction(Request $request, TranslatorInterface $translator)\n    {\n        $content = '';\n\n        if (!\\Pimcore\\Video::isAvailable()) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $translator->trans('php_cli_binary_and_or_ffmpeg_binary_setting_is_missing', [], 'admin') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-tree\", name=\"pimcore_admin_settings_videothumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Video\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_videothumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_videothumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-add\", name=\"pimcore_admin_settings_videothumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Video\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-delete\", name=\"pimcore_admin_settings_videothumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-get\", name=\"pimcore_admin_settings_videothumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-update\", name=\"pimcore_admin_settings_videothumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, htmlspecialchars($mediaName));\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtget\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtGetAction()\n    {\n        $this->checkPermission('robots.txt');\n\n        $config = Config::getRobotsConfig();\n        $config = $config->toArray();\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $config,\n            'onFileSystem' => file_exists(PIMCORE_WEB_ROOT . '/robots.txt'),\n        ]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtput\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtPutAction(Request $request)\n    {\n        $this->checkPermission('robots.txt');\n\n        $values = $request->get('data');\n        if (!is_array($values)) {\n            $values = [];\n        }\n\n        foreach ($values as $siteId => $robotsContent) {\n            SettingsStore::set('robots.txt-' . $siteId, $robotsContent, 'string', 'robots.txt');\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/website-settings\", name=\"pimcore_admin_settings_websitesettings\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function websiteSettingsAction(Request $request)\n    {\n        $this->checkPermission('website_settings');\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    $value = trim($value);\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $id = $data['id'];\n                $setting = WebsiteSetting::getById($id);\n                if ($setting instanceof WebsiteSetting) {\n                    $setting->delete();\n\n                    return $this->adminJson(['success' => true, 'data' => []]);\n                }\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $setting = WebsiteSetting::getById($data['id']);\n                if ($setting instanceof WebsiteSetting) {\n                    switch ($setting->getType()) {\n                        case 'document':\n                        case 'asset':\n                        case 'object':\n                            if (isset($data['data'])) {\n                                $element = Element\\Service::getElementByPath($setting->getType(), $data['data']);\n                                $data['data'] = $element;\n                            }\n\n                            break;\n                    }\n\n                    $setting->setValues($data);\n                    $setting->save();\n\n                    $data = $this->getWebsiteSettingForEditMode($setting);\n\n                    return $this->adminJson(['data' => $data, 'success' => true]);\n                }\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                // save route\n                $setting = new WebsiteSetting();\n                $setting->setValues($data);\n\n                $setting->save();\n\n                return $this->adminJson(['data' => $setting->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            $list = new WebsiteSetting\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            } else {\n                $list->setOrderKey('name');\n                $list->setOrder('asc');\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`name` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $totalCount = $list->getTotalCount();\n            $list = $list->load();\n\n            $settings = [];\n            foreach ($list as $item) {\n                $resultItem = $this->getWebsiteSettingForEditMode($item);\n                $settings[] = $resultItem;\n            }\n\n            return $this->adminJson(['data' => $settings, 'success' => true, 'total' => $totalCount]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param WebsiteSetting $item\n     *\n     * @return array\n     */\n    private function getWebsiteSettingForEditMode($item)\n    {\n        $resultItem = [\n            'id' => $item->getId(),\n            'name' => $item->getName(),\n            'language' => $item->getLanguage(),\n            'type' => $item->getType(),\n            'data' => null,\n            'siteId' => $item->getSiteId(),\n            'creationDate' => $item->getCreationDate(),\n            'modificationDate' => $item->getModificationDate(),\n        ];\n\n        switch ($item->getType()) {\n            case 'document':\n            case 'asset':\n            case 'object':\n                $element = $item->getData();\n                if ($element) {\n                    $resultItem['data'] = $element->getRealFullPath();\n                }\n\n                break;\n            default:\n                $resultItem['data'] = $item->getData();\n\n                break;\n        }\n\n        return $resultItem;\n    }\n\n    /**\n     * @Route(\"/get-available-algorithms\", name=\"pimcore_admin_settings_getavailablealgorithms\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAlgorithmsAction(Request $request)\n    {\n        $options = [\n            [\n                'key' => 'password_hash',\n                'value' => 'password_hash',\n            ],\n        ];\n\n        $algorithms = hash_algos();\n        foreach ($algorithms as $algorithm) {\n            $options[] = [\n                'key' => $algorithm,\n                'value' => $algorithm,\n            ];\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * deleteViews\n     * delete views for localized fields when languages are removed to\n     * prevent mysql errors\n     *\n     * @param string $language\n     * @param string $dbName\n     */\n    protected function deleteViews($language, $dbName)\n    {\n        $db = \\Pimcore\\Db::get();\n        $views = $db->fetchAllAssociative('SHOW FULL TABLES IN ' . $db->quoteIdentifier($dbName) . \" WHERE TABLE_TYPE LIKE 'VIEW'\");\n\n        foreach ($views as $view) {\n            if (preg_match('/^object_localized_[0-9]+_' . $language . '$/', $view['Tables_in_' . $dbName])) {\n                $sql = 'DROP VIEW ' . $db->quoteIdentifier($view['Tables_in_' . $dbName]);\n                $db->executeQuery($sql);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/test-web2print\", name=\"pimcore_admin_settings_testweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function testWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $response = $this->render('@PimcoreAdmin/Admin/Settings/testWeb2print.html.twig');\n        $html = $response->getContent();\n\n        $adapter = \\Pimcore\\Web2Print\\Processor::getInstance();\n        $params = [];\n\n        if ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\WkHtmlToPdf) {\n            $params['adapterConfig'] = '-O landscape';\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\PdfReactor) {\n            $params['adapterConfig'] = [\n                'javaScriptMode' => 0,\n                'addLinks' => true,\n                'appendLog' => true,\n                'enableDebugMode' => true,\n            ];\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\HeadlessChrome) {\n            $params = Config::getWeb2PrintConfig();\n            $params = $params->get('headlessChromeSettings');\n            $params = json_decode($params, true);\n        }\n\n        $responseOptions = [\n            'Content-Type' => 'application/pdf',\n        ];\n\n        $pdfData = $adapter->getPdfFromString($html, $params);\n\n        return new \\Symfony\\Component\\HttpFoundation\\Response(\n            $pdfData,\n            200,\n            $responseOptions\n\n        );\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\n// debug\nif (typeof console == \"undefined\") {\n    console = {\n        log: function (v) {\n        },\n        dir: function (v) {\n        },\n        debug: function (v) {\n        },\n        info: function (v) {\n        },\n        warn: function (v) {\n        },\n        error: function (v) {\n        },\n        trace: function (v) {\n        },\n        group: function (v) {\n        },\n        groupEnd: function (v) {\n        },\n        time: function (v) {\n        },\n        timeEnd: function (v) {\n        },\n        profile: function (v) {\n        },\n        profileEnd: function (v) {\n        }\n    };\n}\n\nvar xhrActive = 0; // number of active xhr requests\n\nExt.Loader.setConfig({\n    enabled: true\n});\nExt.enableAriaButtons = false;\n\nExt.Loader.setPath('Ext.ux', '/bundles/pimcoreadmin/extjs/ext-ux/src/classic/src');\n\nExt.require([\n    'Ext.ux.colorpick.Field',\n    'Ext.ux.colorpick.SliderAlpha',\n    'Ext.ux.form.MultiSelect',\n    'Ext.ux.TabCloseMenu',\n    'Ext.ux.TabReorderer',\n    'Ext.ux.grid.SubTable',\n    'Ext.window.Toast',\n    'Ext.slider.Single',\n    'Ext.form.field.Tag',\n    'Ext.ux.TabMiddleButtonClose'\n]);\n\nExt.ariaWarn = Ext.emptyFn;\n\nExt.onReady(function () {\n\n    pimcore.helpers.colorpicker.initOverrides();\n\n    var StateFullProvider = Ext.extend(Ext.state.Provider, {\n        namespace: \"default\",\n\n        constructor: function (config) {\n            StateFullProvider.superclass.constructor.call(this);\n            Ext.apply(this, config);\n\n            var data = localStorage.getItem(this.namespace);\n            if (!data) {\n                this.state = {};\n            } else {\n                data = JSON.parse(data);\n                if (data.state && data.user == pimcore.currentuser.id) {\n                    this.state = data.state;\n                } else {\n                    this.state = {};\n                }\n            }\n        },\n\n        get: function (name, defaultValue) {\n            try {\n                if (typeof this.state[name] == \"undefined\") {\n                    return defaultValue\n                } else {\n                    return this.decodeValue(this.state[name])\n                }\n            } catch (e) {\n                this.clear(name);\n                return defaultValue;\n            }\n        },\n        set: function (name, value) {\n            try {\n                if (typeof value == \"undefined\" || value === null) {\n                    this.clear(name);\n                    return;\n                }\n                this.state[name] = this.encodeValue(value)\n\n                var data = {\n                    state: this.state,\n                    user: pimcore.currentuser.id\n                };\n                var json = JSON.stringify(data);\n\n                localStorage.setItem(this.namespace, json);\n            } catch (e) {\n                this.clear(name);\n            }\n\n            this.fireEvent(\"statechange\", this, name, value);\n        }\n    });\n\n\n    var provider = new StateFullProvider({\n        namespace: \"pimcore_ui_states_6\"\n    });\n\n    Ext.state.Manager.setProvider(provider);\n\n    // confirmation to close pimcore\n    window.addEventListener('beforeunload', function () {\n        // set this here as a global so that eg. the editmode can access this (edit::iframeOnbeforeunload()),\n        // to prevent multiple warning messages to be shown\n        pimcore.globalmanager.add(\"pimcore_reload_in_progress\", true);\n\n        if (!pimcore.settings.devmode) {\n            // check for opened tabs and if the user has configured the warnings\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            var user = pimcore.globalmanager.get(\"user\");\n            if (pimcore.settings.showCloseConfirmation && tabPanel.items.getCount() > 0 && user[\"closeWarning\"]) {\n                return t(\"do_you_really_want_to_close_pimcore\");\n            }\n        }\n\n        var openTabs = pimcore.helpers.getOpenTab();\n        if(openTabs.length > 0) {\n            var elementsToBeUnlocked = [];\n            for (var i = 0; i < openTabs.length; i++) {\n                var elementIdentifier = openTabs[i].split(\"_\");\n                if(['object', 'asset', 'document'].indexOf(elementIdentifier[0]) > -1) {\n                    elementsToBeUnlocked.push({ id: elementIdentifier[1], type: elementIdentifier[0] });\n                }\n            }\n\n            if(elementsToBeUnlocked.length > 0) {\n                navigator.sendBeacon(Routing.generate('pimcore_admin_element_unlockelements')+'?csrfToken='+ pimcore.settings['csrfToken'], JSON.stringify({ elements: elementsToBeUnlocked }));\n            }\n        }\n    });\n\n    Ext.QuickTips.init();\n    Ext.MessageBox.minPromptWidth = 500;\n\n    Ext.Ajax.setDisableCaching(true);\n    Ext.Ajax.setTimeout(900000);\n    Ext.Ajax.setMethod(\"GET\");\n    Ext.Ajax.setDefaultHeaders({\n        'X-pimcore-csrf-token': pimcore.settings[\"csrfToken\"],\n        'X-pimcore-extjs-version-major': Ext.getVersion().getMajor(),\n        'X-pimcore-extjs-version-minor': Ext.getVersion().getMinor()\n    });\n    Ext.Ajax.on('requestexception', function (conn, response, options) {\n        if(response.aborted){\n            console.log(\"xhr request to \" + options.url + \" aborted\");\n        }else{\n            console.error(\"xhr request to \" + options.url + \" failed\");\n        }\n\n        var jsonData = response.responseJson;\n        if (!jsonData) {\n            try {\n                jsonData = JSON.parse(response.responseText);\n            } catch (e) {\n\n            }\n        }\n\n        var date = new Date();\n        var errorMessage = \"Timestamp: \" + date.toString() + \"\\n\";\n        var errorDetailMessage = \"\\n\" + response.responseText;\n\n        try {\n            errorMessage += \"Status: \" + response.status + \" | \" + response.statusText + \"\\n\";\n            errorMessage += \"URL: \" + options.url + \"\\n\";\n\n            if (options[\"params\"] && options[\"params\"].length > 0) {\n                errorMessage += \"Params:\\n\";\n                Ext.iterate(options.params, function (key, value) {\n                    errorMessage += (\"-> \" + key + \": \" + value.substr(0, 500) + \"\\n\");\n                });\n            }\n\n            if (options[\"method\"]) {\n                errorMessage += \"Method: \" + options.method + \"\\n\";\n            }\n\n            if(jsonData) {\n                if (jsonData['message']) {\n                    errorDetailMessage = jsonData['message'];\n                }\n\n                if(jsonData['traceString']) {\n                    errorDetailMessage += \"\\nTrace: \\n\" + jsonData['traceString'];\n                }\n            }\n\n            errorMessage += \"Message: \" + errorDetailMessage;\n        } catch (e) {\n            errorMessage += \"\\n\\n\";\n            errorMessage += response.responseText;\n        }\n\n        if (!response.aborted && options[\"ignoreErrors\"] !== true) {\n            if (response.status === 503) {\n                //show wait info\n                if (!pimcore.maintenanceWindow) {\n                    pimcore.maintenanceWindow = new Ext.Window({\n                        closable: false,\n                        title: t(\"please_wait\"),\n                        bodyStyle: \"padding: 20px;\",\n                        html: t(\"the_system_is_in_maintenance_mode_please_wait\"),\n                        closeAction: \"close\",\n                        modal: true,\n                        listeners: {\n                            show: function () {\n                                window.setInterval(function () {\n                                    Ext.Ajax.request({\n                                        url: Routing.generate('pimcore_admin_misc_ping'),\n                                        success: function (response) {\n                                            if (pimcore.maintenanceWindow) {\n                                                pimcore.maintenanceWindow.close();\n                                                window.setTimeout(function () {\n                                                    delete pimcore.maintenanceWindow;\n                                                }, 2000);\n                                                pimcore.viewport.updateLayout();\n                                            }\n                                        }\n                                    });\n                                }, 30000);\n                            }\n                        }\n\n                    });\n                    pimcore.viewport.add(pimcore.maintenanceWindow);\n                    pimcore.maintenanceWindow.show();\n                }\n            } else if(jsonData && jsonData['type'] === 'ValidationException') {\n                pimcore.helpers.showNotification(t(\"validation_failed\"), jsonData['message'], \"error\", errorMessage);\n            } else if(jsonData && jsonData['type'] === 'ConfigWriteException') {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"config_not_writeable\"), \"error\", errorMessage);\n            } else if (response.status === 403) {\n                pimcore.helpers.showNotification(t(\"access_denied\"), t(\"access_denied_description\"), \"error\");\n            } else if (response.status === 500) {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"error_general\"), \"error\", errorMessage);\n            } else {\n                let message = t(\"error\");\n                if (jsonData && jsonData['message']) {\n                    message = jsonData['message'];\n                }\n\n                pimcore.helpers.showNotification(t(\"error\"), message, \"error\", errorMessage);\n            }\n        }\n\n        xhrActive--;\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").hide();\n        }\n\n    });\n    Ext.Ajax.on(\"beforerequest\", function () {\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").show();\n        }\n        xhrActive++;\n    });\n    Ext.Ajax.on(\"requestcomplete\", function (conn, response, options) {\n        xhrActive--;\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").hide();\n        }\n    });\n\n    var user = new pimcore.user(pimcore.currentuser);\n    pimcore.globalmanager.add(\"user\", user);\n\n    // document types\n    Ext.define('pimcore.model.doctypes', {\n        extend: 'Ext.data.Model',\n        fields: [\n            'id',\n            {name: 'name', allowBlank: false},\n            {\n                name: \"translatedName\",\n                convert: function (v, rec) {\n                    return t(rec.data.name);\n                },\n                depends : ['name']\n            },\n            'group',\n            {\n                name: \"translatedGroup\",\n                convert: function (v, rec) {\n                    if (rec.data.group) {\n                        return t(rec.data.group);\n                    }\n                    return '';\n                },\n                depends : ['group']\n            },\n            'controller',\n            'template',\n            {name: 'type', allowBlank: false},\n            'priority',\n            'creationDate',\n            'modificationDate'\n        ],\n        autoSync: false,\n        proxy: {\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                totalProperty: 'total',\n                successProperty: 'success',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true',\n                // DocumentController's method expects single items, ExtJs amy batch them without this setting\n                batchActions: false\n            },\n            api: {\n                create: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"create\"}),\n                read: Routing.generate('pimcore_admin_document_document_doctypesget', {xaction: \"read\"}),\n                update: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"update\"}),\n                destroy: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"destroy\"}),\n            }\n        }\n    });\n\n    if (user.isAllowed(\"documents\") || user.isAllowed(\"users\")) {\n        var store = new Ext.data.Store({\n            id: 'doctypes',\n            model: 'pimcore.model.doctypes',\n            remoteSort: false,\n            autoSync: true,\n            autoLoad: true\n        });\n\n        pimcore.globalmanager.add(\"document_types_store\", store);\n        pimcore.globalmanager.add(\"document_valid_types\", [\"page\",\"snippet\",\"email\",\"newsletter\",\"link\",\"hardlink\",\"printpage\",\"printcontainer\"]);\n    }\n\n    //search element types\n    pimcore.globalmanager.add(\"document_search_types\", [\"page\", \"snippet\", \"folder\", \"link\", \"hardlink\", \"email\", \"newsletter\"]);\n    pimcore.globalmanager.add(\"asset_search_types\", [\"folder\", \"image\", \"text\", \"audio\", \"video\", \"document\", \"archive\", \"unknown\"]);\n    pimcore.globalmanager.add(\"object_search_types\", [\"object\", \"folder\", \"variant\"]);\n\n    //translation admin keys\n    pimcore.globalmanager.add(\"translations_admin_missing\", []);\n    pimcore.globalmanager.add(\"translations_admin_added\", []);\n    pimcore.globalmanager.add(\"translations_admin_translated_values\", []);\n\n\n    var objectClassFields = [\n        {name: 'id'},\n        {name: 'text', allowBlank: false},\n        {\n            name: \"translatedText\",\n            convert: function (v, rec) {\n                return t(rec.data.text);\n            },\n            depends : ['text']\n        },\n        {name: 'icon'},\n        {name: 'group'},\n        {\n            name: \"translatedGroup\",\n            convert: function (v, rec) {\n                if (rec.data.group) {\n                    return t(rec.data.group);\n                }\n                return '';\n            },\n            depends : ['group']\n        },\n        {name: \"propertyVisibility\"}\n    ];\n\n    Ext.define('pimcore.model.objecttypes', {\n        extend: 'Ext.data.Model',\n        fields: objectClassFields,\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_dataobject_class_gettree'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var storeo = new Ext.data.Store({\n        model: 'pimcore.model.objecttypes',\n        id: 'object_types'\n    });\n    storeo.load();\n\n    pimcore.globalmanager.add(\"object_types_store\", storeo);\n\n\n    // a store for filtered classes that can be created by the user\n    Ext.define('pimcore.model.objecttypes.create', {\n        extend: 'Ext.data.Model',\n        fields: objectClassFields,\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_dataobject_class_gettree', {createAllowed: true}),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var storeoc = new Ext.data.Store({\n        model: 'pimcore.model.objecttypes.create',\n        id: 'object_types'\n    });\n    storeoc.load();\n\n    pimcore.globalmanager.add(\"object_types_store_create\", storeoc);\n\n    pimcore.globalmanager.add(\"perspective\", new pimcore.perspective(pimcore.settings.perspective));\n\n\n    //pimcore languages\n    Ext.define('pimcore.model.languages', {\n        extend: 'Ext.data.Model',\n        fields: [\n            {name: 'language'},\n            {name: 'display'}\n        ],\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_settings_getavailableadminlanguages'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n\n    var languageStore = new Ext.data.Store({\n        model: \"pimcore.model.languages\"\n    });\n    languageStore.load();\n    pimcore.globalmanager.add(\"pimcorelanguages\", languageStore);\n\n    Ext.define('pimcore.model.sites', {\n        extend: 'Ext.data.Model',\n        fields: [\"id\", \"domains\", \"rootId\", \"rootPath\", \"domain\"],\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_settings_getavailablesites'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var sitesStore = new Ext.data.Store({\n        model: \"pimcore.model.sites\"\n        //restful:false,\n        //proxy:sitesProxy,\n        //reader:sitesReader\n    });\n    sitesStore.load();\n    pimcore.globalmanager.add(\"sites\", sitesStore);\n\n    // target groups\n    Ext.define('pimcore.model.target_groups', {\n        extend: 'Ext.data.Model',\n        fields: [\"id\", \"text\"]\n    });\n\n    var targetGroupStore = Ext.create('Ext.data.JsonStore', {\n        model: \"pimcore.model.target_groups\",\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_targeting_targetgrouplist'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    targetGroupStore.load();\n    pimcore.globalmanager.add(\"target_group_store\", targetGroupStore);\n\n\n    // check for updates\n    window.setTimeout(function () {\n\n        var domains = '';\n        pimcore.globalmanager.get(\"sites\").each(function (rec) {\n            if(rec.get('rootId') !== 1) {\n                if(!empty(rec.get('domain'))) {\n                    domains += rec.get('domain') + \",\";\n                }\n                if(!empty(rec.get('domains'))) {\n                    domains += rec.get('domains') + \",\";\n                }\n            }\n        });\n\n        // use vanilla javascript instead of ExtJS to bypass default error handling\n        var request = new XMLHttpRequest();\n        request.open('POST', \"https://liveupdate.pimcore.org/update-check\");\n\n        request.onload = function() {\n            if (this.status >= 200 && this.status < 400) {\n                var data = Ext.decode(this.response);\n                if (data.latestVersion) {\n                    if (pimcore.currentuser.admin) {\n\n                        pimcore.notification.helper.incrementCount();\n\n                        var toolbar = pimcore.globalmanager.get(\"layout_toolbar\");\n                        toolbar.notificationMenu.add({\n                            text: t(\"update_available\"),\n                            iconCls: \"pimcore_icon_reload\",\n                            handler: function () {\n                                var html = '<div class=\"pimcore_about_window\" xmlns=\"http://www.w3.org/1999/html\">';\n                                html += '<h2 style=\"text-decoration: underline\">New Version Available!</h2>';\n                                html += '<br><b>Your Version: ' + pimcore.settings.version + '</b>';\n                                html += '<br><b style=\"color: darkgreen;\">New Version: ' + data.latestVersion + '</b>';\n                                html += '<h3 style=\"color: darkred\">Please update as soon as possible!</h3>';\n                                html += '</div>';\n\n                                var win = new Ext.Window({\n                                    title: \"New Version Available!\",\n                                    width: 500,\n                                    height: 220,\n                                    bodyStyle: \"padding: 10px;\",\n                                    modal: true,\n                                    html: html\n                                });\n                                win.show();\n                            }\n                        });\n                    }\n                }\n\n                if (data.pushStatistics) {\n                    var request = new XMLHttpRequest();\n                    request.open('GET', Routing.generate('pimcore_admin_index_statistics'));\n\n                    request.onload = function () {\n                        if (this.status >= 200 && this.status < 400) {\n                            var res = Ext.decode(this.response);\n\n                            var request = new XMLHttpRequest();\n                            request.open('POST', \"https://liveupdate.pimcore.org/statistics\");\n\n                            var data = new FormData();\n                            data.append('data', encodeURIComponent(JSON.stringify(res)));\n\n                            request.send(data);\n                        }\n                    };\n                    request.send(data);\n                }\n            }\n        };\n\n        var data = new FormData();\n        data.append('id', pimcore.settings.instanceId);\n        data.append('revision', pimcore.settings.build);\n        data.append('version', pimcore.settings.version);\n        data.append('debug', pimcore.settings.debug);\n        data.append('devmode', pimcore.settings.devmode);\n        data.append('environment', pimcore.settings.environment);\n        data.append(\"language\", pimcore.settings.language);\n        data.append(\"main_domain\", pimcore.settings.main_domain);\n        data.append(\"domains\", domains);\n        data.append(\"timezone\", pimcore.settings.timezone);\n        data.append(\"websiteLanguages\", pimcore.settings.websiteLanguages.join(','));\n\n        request.send(data);\n\n    }, 5000);\n\n\n    Ext.get(\"pimcore_logout\").on('click', function () {\n        document.getElementById('pimcore_logout_form').submit();\n    })\n\n    // remove loading\n    Ext.get(\"pimcore_loading\").addCls(\"loaded\");\n    Ext.get(\"pimcore_loading\").hide();\n    Ext.get(\"pimcore_signet\").show();\n\n    // init general layout\n    try {\n        pimcore.viewport = Ext.create('Ext.container.Viewport', {\n            id: \"pimcore_viewport\",\n            layout: 'fit',\n            items: [\n                {\n                    xtype: \"panel\",\n                    id: \"pimcore_body\",\n                    cls: \"pimcore_body\",\n                    layout: \"border\",\n                    border: false,\n                    items: [\n                        Ext.create('Ext.panel.Panel',\n                            {\n                                region: 'west',\n                                id: 'pimcore_panel_tree_left',\n                                cls: 'pimcore_main_accordion',\n                                split: {\n                                    cls: 'pimcore_main_splitter'\n                                },\n                                width: 300,\n                                minSize: 175,\n                                collapsible: true,\n                                collapseMode: 'header',\n                                defaults: {\n                                    margin: '0'\n                                },\n                                layout: {\n                                    type: 'accordion',\n                                    hideCollapseTool: true,\n                                    animate: false\n                                },\n                                header: false,\n                                hidden: true,\n                                forceLayout: true,\n                                hideMode: \"offsets\",\n                                items: []\n                            }\n                        )\n                        ,\n                        Ext.create('Ext.tab.Panel', {\n                            region: 'center',\n                            deferredRender: false,\n                            id: \"pimcore_panel_tabs\",\n                            enableTabScroll: true,\n                            hideMode: \"offsets\",\n                            cls: \"tab_panel\",\n                            plugins:\n                                [\n                                    Ext.create('Ext.ux.TabCloseMenu', {\n                                        pluginId: 'tabclosemenu',\n                                        showCloseAll: false,\n                                        closeTabText: t(\"close_tab\"),\n                                        showCloseOthers: false,\n                                        extraItemsTail: pimcore.helpers.getMainTabMenuItems()\n                                    }),\n                                    Ext.create('Ext.ux.TabReorderer', {}),\n                                    Ext.create('Ext.ux.TabMiddleButtonClose', {})\n                                ]\n                        })\n                        ,\n                        {\n                            region: 'east',\n                            id: 'pimcore_panel_tree_right',\n                            cls: \"pimcore_main_accordion\",\n                            split: {\n                                cls: 'pimcore_main_splitter'\n                            },\n                            width: 300,\n                            minSize: 175,\n                            collapsible: true,\n                            collapseMode: 'header',\n                            defaults: {\n                                margin: '0'\n                            },\n                            layout: {\n                                type: 'accordion',\n                                hideCollapseTool: true,\n                                animate: false\n                            },\n                            header: false,\n                            hidden: true,\n                            forceLayout: true,\n                            hideMode: \"offsets\",\n                            items: []\n                        }\n                    ]\n                }\n            ],\n            listeners: {\n                \"afterrender\": function (el) {\n                    Ext.get(\"pimcore_navigation\").show();\n                    Ext.get(\"pimcore_avatar\").show();\n                    Ext.get(\"pimcore_logout\").show();\n\n                    pimcore.helpers.initMenuTooltips();\n\n                    var loadMask = new Ext.LoadMask(\n                        {\n                            target: Ext.getCmp(\"pimcore_viewport\"),\n                            msg: t(\"please_wait\")\n                        });\n                    loadMask.enable();\n                    pimcore.globalmanager.add(\"loadingmask\", loadMask);\n\n\n                    // prevent dropping files / folder outside the asset tree\n                    var fn = function (e) {\n                        e.preventDefault();\n                        e.dataTransfer.dropEffect = 'none';\n                    };\n\n                    el.getEl().dom.addEventListener(\"dragenter\", fn, true);\n                    el.getEl().dom.addEventListener(\"dragover\", fn, true);\n\n                    // open \"My Profile\" when clicking on avatar\n                    Ext.get(\"pimcore_avatar\").on(\"click\", function (ev) {\n                        pimcore.helpers.openProfile();\n                    });\n                }\n            }\n        });\n\n        // add sidebar panels\n\n        if (user.memorizeTabs || pimcore.helpers.forceOpenMemorizedTabsOnce()) {\n            // open previous opened tabs after the trees are ready\n            pimcore.layout.treepanelmanager.addOnReadyCallback(function () {\n                window.setTimeout(function () {\n                    pimcore.helpers.openMemorizedTabs();\n                }, 500);\n            });\n        }\n\n\n        var perspective = pimcore.globalmanager.get(\"perspective\");\n        var elementTree = perspective.getElementTree();\n\n        var locateConfigs = {\n            document: [],\n            asset: [],\n            object: []\n        };\n\n        for (var i = 0; i < elementTree.length; i++) {\n\n            var treeConfig = elementTree[i];\n            var type = treeConfig[\"type\"];\n            var side = treeConfig[\"position\"] ? treeConfig[\"position\"] : \"left\";\n            var treepanel = null;\n            var tree = null;\n            var treetype = null;\n\n            var locateKey = \"layout_\" + type + \"_locateintree_tree\";\n\n            switch (type) {\n                case \"documents\":\n                    if (user.isAllowed(\"documents\") && !treeConfig.hidden) {\n                        treetype = \"document\";\n                        tree = new pimcore.document.tree(null, treeConfig);\n                        pimcore.globalmanager.add(\"layout_document_tree\", tree);\n                        treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                        treepanel.setHidden(false);\n                    }\n                    break;\n                case \"assets\":\n                    if (user.isAllowed(\"assets\") && !treeConfig.hidden) {\n                        treetype = \"asset\";\n                        tree = new pimcore.asset.tree(null, treeConfig);\n                        pimcore.globalmanager.add(\"layout_asset_tree\", tree);\n                        treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                        treepanel.setHidden(false);\n                    }\n                    break;\n                case \"objects\":\n                    if (user.isAllowed(\"objects\")) {\n                        treetype = \"object\";\n                        if (!treeConfig.hidden) {\n                            treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                            tree = new pimcore.object.tree(null, treeConfig);\n                            pimcore.globalmanager.add(\"layout_object_tree\", tree);\n                            treepanel.setHidden(false);\n                        }\n                    }\n                    break;\n                case \"customview\":\n                    if (!treeConfig.hidden) {\n                        treetype = treeConfig.treetype ? treeConfig.treetype : \"object\";\n                        locateKey = \"layout_\" + treetype + \"s_locateintree_tree\";\n\n                        if (user.isAllowed(treetype + \"s\")) {\n                            treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n\n                            // Do not add pimcore_icon_material class to non-material icons\n                            let iconTypeClass = '';\n                            if (treeConfig.icon.match('flat-white')) {\n                                iconTypeClass += 'pimcore_icon_material';\n                            }\n\n                            var treeCls = window.pimcore[treetype].customviews.tree;\n\n                            tree = new treeCls({\n                                isCustomView: true,\n                                customViewId: treeConfig.id,\n                                allowedClasses: treeConfig.allowedClasses,\n                                rootId: treeConfig.rootId,\n                                rootVisible: treeConfig.showroot,\n                                treeId: \"pimcore_panel_tree_\" + treetype + \"_\" + treeConfig.id,\n                                treeIconCls: \"pimcore_\" + treetype + \"_customview_icon_\" + treeConfig.id + \" \" + iconTypeClass,\n                                treeTitle: t(treeConfig.name),\n                                parentPanel: treepanel,\n                                loaderBaseParams: {}\n                            }, treeConfig);\n                            pimcore.globalmanager.add(\"layout_\" + treetype + \"_tree_\" + treeConfig.id, tree);\n\n                            treepanel.setHidden(false);\n                        }\n                    }\n                    break;\n            }\n\n\n            if (tree && treetype) {\n                locateConfigs[treetype].push({\n                    key: locateKey,\n                    side: side,\n                    tree: tree\n                });\n            }\n\n        }\n        pimcore.globalmanager.add(\"tree_locate_configs\", locateConfigs);\n\n    }\n    catch (e) {\n        console.log(e);\n    }\n\n    layoutToolbar = new pimcore.layout.toolbar();\n    pimcore.globalmanager.add(\"layout_toolbar\", layoutToolbar);\n\n\n    // check for activated maintenance-mode with this session-id\n    if (pimcore.settings.maintenance_mode) {\n        pimcore.helpers.showMaintenanceDisableButton();\n    }\n\n\n    if (user.isAllowed(\"dashboards\") && pimcore.globalmanager.get(\"user\").welcomescreen) {\n        window.setTimeout(function () {\n            layoutPortal = new pimcore.layout.portal();\n            pimcore.globalmanager.add(\"layout_portal_welcome\", layoutPortal);\n        }, 1000);\n    }\n\n    pimcore.viewport.updateLayout();\n\n    // NOTE: the event pimcoreReady is fired in pimcore.layout.treepanelmanager\n    pimcore.layout.treepanelmanager.startup();\n\n    pimcore.helpers.registerKeyBindings(document);\n\n\n    if(pimcore.settings.twoFactorSetupRequired) {\n        Ext.Msg.show({\n            title: t('setup_two_factor'),\n            message: t('2fa_setup_message'),\n            buttons: Ext.Msg.OK,\n            icon: Ext.Msg.INFO,\n            fn: function(btn) {\n                pimcore.settings.profile.twoFactorSettings.prototype.openSetupWindow();\n            }\n        });\n    }\n\n    if(pimcore.currentuser.isPasswordReset) {\n        pimcore.helpers.openProfile();\n    }\n\n    // Quick Search\n    var quicksearchMap = new Ext.util.KeyMap({\n        target: document,\n        binding: [{\n            key:  Ext.event.Event.ESC,\n            fn: function () {\n                pimcore.helpers.hideQuickSearch();\n            }\n        }, {\n            key: Ext.event.Event.SPACE,\n            ctrl: true,\n            fn: function (keyCode, e) {\n                e.stopEvent();\n                pimcore.helpers.showQuickSearch();\n            }\n        }]\n    });\n\n    var quicksearchStore = new Ext.data.Store({\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_searchadmin_search_quicksearch'),\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            }\n        },\n        listeners: {\n            \"beforeload\": function (store) {\n                var previewEl = Ext.get('pimcore_quicksearch_preview');\n                if(previewEl) {\n                    previewEl.setHtml('');\n                }\n\n                store.getProxy().abort();\n            }\n        },\n        fields: [\"id\", 'type', \"subtype\", \"className\", \"fullpath\"]\n    });\n\n    var quickSearchTpl = new Ext.XTemplate(\n        '<tpl for=\".\">',\n            '<li role=\"option\" unselectable=\"on\" class=\"x-boundlist-item\">' +\n                '<div class=\"list-icon {iconCls}\"><tpl if=\"icon\"><img class=\"class-icon\" src=\"{icon}\"></tpl></div>' +\n                '<div class=\"list-path\" title=\"{fullpath}\">{fullpathList}</div>' +\n            '</li>',\n        '</tpl>'\n    );\n\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    var quickSearchCombo = Ext.create('Ext.form.ComboBox', {\n        width: 900,\n        hideTrigger: true,\n        border: false,\n        shadow: false,\n        tpl: quickSearchTpl,\n        listConfig: {\n            shadow: false,\n            border: false,\n            cls: 'pimcore_quicksearch_picker',\n            navigationModel: 'quicksearch.boundlist',\n            listeners: {\n                \"highlightitem\": function (view, node, opts) {\n                    var record = quicksearchStore.getAt(node.dataset.recordindex);\n                    if (!record.get('preview')) {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_searchadmin_search_quicksearch_by_id'),\n                            method: 'GET',\n                            params: {\n                                \"id\": record.get('id'),\n                                \"type\": record.get('type')\n                            },\n                            success: function (response) {\n                                var result = Ext.decode(response.responseText);\n\n                                record.preview = result.preview;\n                                Ext.get('pimcore_quicksearch_preview').setHtml(result.preview);\n                            },\n                            failure: function () {\n                                var previewHtml = '<div class=\"no_preview\">' + t('preview_not_available') + '</div>';\n\n                                Ext.get('pimcore_quicksearch_preview').setHtml(previewHtml);\n                            }\n                        });\n                    } else {\n                        var previewHtml = record.get('preview');\n                        if(!previewHtml) {\n                            previewHtml = '<div class=\"no_preview\">' + t('preview_not_available') + '</div>';\n                        }\n\n                        Ext.get('pimcore_quicksearch_preview').setHtml(previewHtml);\n                    }\n                }\n            }\n        },\n        id: 'quickSearchCombo',\n        store: quicksearchStore,\n        loadingText: t('searching'),\n        queryDelay: 100,\n        minChars: 4,\n        renderTo: quicksearchContainer,\n        enableKeyEvents: true,\n        displayField: 'fullpath',\n        valueField: \"id\",\n        typeAhead: true,\n        listeners: {\n            \"expand\": function (combo) {\n                if(!document.getElementById('pimcore_quicksearch_preview')) {\n                    combo.getPicker().getEl().insertHtml('beforeEnd', '<div id=\"pimcore_quicksearch_preview\"></div>');\n                }\n            },\n            \"keyup\": function (field) {\n                if(field.getValue()) {\n                    quicksearchContainer.addCls('filled');\n                }\n            },\n            \"select\": function (combo, record, index) {\n                pimcore.helpers.openElement(record.get('id'), record.get('type'), record.get('subtype'));\n                pimcore.helpers.hideQuickSearch();\n            }\n        }\n    });\n\n    Ext.getBody().on('click', function (event) {\n        // hide on click outside\n        if(quicksearchContainer && !quicksearchContainer.isAncestor(event.target)) {\n            var pickerEl = quickSearchCombo.getPicker().getEl();\n            if(!pickerEl || !pickerEl.isAncestor(event.target)) {\n                pimcore.helpers.hideQuickSearch();\n            }\n        }\n    });\n});\n\n\npimcore[\"intervals\"] = {};\n\n//add missing translation keys\npimcore[\"intervals\"][\"translations_admin_missing\"] = window.setInterval(function () {\n    var missingTranslations = pimcore.globalmanager.get(\"translations_admin_missing\");\n    var addedTranslations = pimcore.globalmanager.get(\"translations_admin_added\");\n    if (missingTranslations.length > 0) {\n        var thresholdIndex = 500;\n        var arraySurpassing = missingTranslations.length > thresholdIndex;\n        var sentTranslations = arraySurpassing ? missingTranslations.slice(0, thresholdIndex) : missingTranslations;\n        var params = Ext.encode(sentTranslations);\n        for (var i = 0; i < sentTranslations.length; i++) {\n            var translation = sentTranslations[i];\n            addedTranslations.push(translation);\n        }\n        var restMissingTranslations = missingTranslations.slice(thresholdIndex);\n        pimcore.globalmanager.add(\"translations_admin_missing\", restMissingTranslations);\n        Ext.Ajax.request({\n            method: \"POST\",\n            url: Routing.generate('pimcore_admin_translation_addadmintranslationkeys'),\n            params: {keys: params}\n        });\n    }\n}, 30000);\n\n// session renew\npimcore[\"intervals\"][\"ping\"] = window.setInterval(function () {\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_ping'),\n        success: function (response) {\n\n            var data;\n\n            try {\n                data = Ext.decode(response.responseText);\n\n                if (data.success != true) {\n                    throw \"session seems to be expired\";\n                }\n            } catch (e) {\n                data = false;\n                pimcore.settings.showCloseConfirmation = false;\n                window.location.href = Routing.generate('pimcore_admin_login', {session_expired: true});\n            }\n\n            if (pimcore.maintenanceWindow) {\n                pimcore.maintenanceWindow.close();\n                window.setTimeout(function () {\n                    delete pimcore.maintenanceWindow;\n                }, 2000);\n                pimcore.viewport.updateLayout();\n            }\n\n            if (data) {\n                // here comes the check for maintenance mode, ...\n            }\n        },\n        failure: function (response) {\n            if (response.status != 503) {\n                pimcore.settings.showCloseConfirmation = false;\n                window.location.href = Routing.generate('pimcore_admin_login', {session_expired: true, server_error: true});\n\n            }\n        }\n    });\n}, (pimcore.settings.session_gc_maxlifetime - 60) * 1000);\n\n\npimcore[\"intervals\"][\"checkNewNotification\"] = window.setInterval(function (elt) {\n    pimcore.notification.helper.updateFromServer();\n}, 30000);\n\n// refreshes the layout\npimcore.registerNS(\"pimcore.layout.refresh\");\npimcore.layout.refresh = function () {\n    try {\n        pimcore.viewport.updateLayout();\n    }\n    catch (e) {\n    }\n};\n\n// garbage collector\npimcore.helpers.unload = function () {\n\n};\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin\\DataObject;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Controller\\KernelControllerEventInterface;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Logger;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\DataObject;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Translation;\nuse Pimcore\\Tool\\Session;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ControllerEvent;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/class\", name=\"pimcore_admin_dataobject_class_\")\n *\n * @internal\n */\nclass ClassController extends AdminAbstractController implements KernelControllerEventInterface\n{\n    /**\n     * @Route(\"/get-document-types\", name=\"getdocumenttypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getDocumentTypesAction(Request $request)\n    {\n        $documentTypes = Document::getTypes();\n        $typeItems = [];\n        foreach ($documentTypes as $documentType) {\n            $typeItems[] = [\n                'text' => $documentType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-asset-types\", name=\"getassettypes\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAssetTypesAction(Request $request)\n    {\n        $assetTypes = Asset::getTypes();\n        $typeItems = [];\n        foreach ($assetTypes as $assetType) {\n            $typeItems[] = [\n                'text' => $assetType,\n            ];\n        }\n\n        return $this->adminJson($typeItems);\n    }\n\n    /**\n     * @Route(\"/get-tree\", name=\"gettree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getTreeAction(Request $request)\n    {\n        // we need to check objects permission for listing in pimcore.model.objecttypes ext model\n        $this->checkPermission('objects');\n\n        $defaultIcon = '/bundles/pimcoreadmin/img/flat-color-icons/class.svg';\n\n        $classesList = new DataObject\\ClassDefinition\\Listing();\n        $classesList->setOrderKey('name');\n        $classesList->setOrder('asc');\n        $classes = $classesList->load();\n\n        // filter classes\n        if ($request->get('createAllowed')) {\n            $tmpClasses = [];\n            foreach ($classes as $class) {\n                if ($this->getAdminUser()->isAllowed($class->getId(), 'class')) {\n                    $tmpClasses[] = $class;\n                }\n            }\n            $classes = $tmpClasses;\n        }\n\n        $withId = $request->get('withId');\n        $getClassConfig = function ($class) use ($defaultIcon, $withId) {\n            $text = $class->getname();\n            if ($withId) {\n                $text .= ' (' . $class->getId() . ')';\n            }\n\n            $hasBrickField = false;\n            foreach ($class->getFieldDefinitions() as $fieldDefinition) {\n                if ($fieldDefinition instanceof DataObject\\ClassDefinition\\Data\\Objectbricks) {\n                    $hasBrickField = true;\n\n                    break;\n                }\n            }\n\n            return [\n                'id' => $class->getId(),\n                'text' => $text,\n                'leaf' => true,\n                'icon' => $class->getIcon() ? htmlspecialchars($class->getIcon()) : $defaultIcon,\n                'cls' => 'pimcore_class_icon',\n                'propertyVisibility' => $class->getPropertyVisibility(),\n                'enableGridLocking' => $class->isEnableGridLocking(),\n                'hasBrickField' => $hasBrickField,\n            ];\n        };\n\n        // build groups\n        $groups = [];\n        foreach ($classes as $class) {\n            $groupName = null;\n\n            if ($class->getGroup()) {\n                $type = 'manual';\n                $groupName = $class->getGroup();\n            } else {\n                $type = 'auto';\n                if (preg_match('@^([A-Za-z])([^A-Z]+)@', $class->getName(), $matches)) {\n                    $groupName = $matches[0];\n                }\n\n                if (!$groupName) {\n                    // this is eg. the case when class name uses only capital letters\n                    $groupName = $class->getName();\n                }\n            }\n\n            $groupName = Translation::getByKeyLocalized($groupName, Translation::DOMAIN_ADMIN, true, true);\n\n            if (!isset($groups[$groupName])) {\n                $groups[$groupName] = [\n                    'classes' => [],\n                    'type' => $type,\n                ];\n            }\n            $groups[$groupName]['classes'][] = $class;\n        }\n\n        $treeNodes = [];\n        if (!empty($groups)) {\n            $types = array_column($groups, 'type');\n            array_multisort($types, SORT_ASC, array_keys($groups), SORT_ASC, $groups);\n        }\n\n        if (!$request->get('grouped')) {\n            // list output\n            foreach ($groups as $groupName => $groupData) {\n                foreach ($groupData['classes'] as $class) {\n                    $node = $getClassConfig($class);\n                    if (count($groupData['classes']) > 1 || $groupData['type'] == 'manual') {\n                        $node['group'] = $groupName;\n                    }\n                    $treeNodes[] = $node;\n                }\n            }\n        } else {\n            // create json output\n            foreach ($groups as $groupName => $groupData) {\n                if (count($groupData['classes']) === 1 && $groupData['type'] == 'auto') {\n                    // no group, only one child\n                    $node = $getClassConfig($groupData['classes'][0]);\n                } else {\n                    // group classes\n                    $node = [\n                        'id' => 'folder_' . $groupName,\n                        'text' => $groupName,\n                        'leaf' => false,\n                        'expandable' => true,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'children' => [],\n                    ];\n\n                    foreach ($groupData['classes'] as $class) {\n                        $node['children'][] = $getClassConfig($class);\n                    }\n                }\n\n                $treeNodes[] = $node;\n            }\n        }\n\n        return $this->adminJson($treeNodes);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $class->setFieldDefinitions([]);\n        $isWriteable = $class->isWritable();\n        $class = $class->getObjectVars();\n        $class['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($class);\n    }\n\n    /**\n     * @Route(\"/get-custom-layout\", name=\"getcustomlayout\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            $brickLayoutSeparator = strpos($request->get('id'), '.brick.');\n            if ($brickLayoutSeparator !== false) {\n                $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById(substr($request->get('id'), 0, $brickLayoutSeparator));\n                if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                    $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n                        [\n                            'name' => $customLayout->getName().' '.substr($request->get('id'), $brickLayoutSeparator+strlen('.brick.')),\n                            'userOwner' => $this->getAdminUser()->getId(),\n                            'classId' => $customLayout->getClassId(),\n                        ]\n                    );\n\n                    $customLayout->setId($request->get('id'));\n                    $customLayout->save();\n                }\n            }\n\n            if (!$customLayout) {\n                throw $this->createNotFoundException();\n            }\n        }\n        $isWriteable = $customLayout->isWritable();\n        $customLayout = $customLayout->getObjectVars();\n        $customLayout['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'data' => $customLayout]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $className = $request->get('className');\n        $className = $this->correctClassname($className);\n\n        $classId = $request->get('classIdentifier');\n        $existingClass = DataObject\\ClassDefinition::getById($classId);\n        if ($existingClass) {\n            throw new \\Exception('Class identifier already exists');\n        }\n\n        $class = DataObject\\ClassDefinition::create(\n            ['name' => $className,\n                'userOwner' => $this->getAdminUser()->getId(), ]\n        );\n\n        $class->setId($classId);\n\n        $class->save(true);\n\n        return $this->adminJson(['success' => true, 'id' => $class->getId()]);\n    }\n\n    /**\n     * @Route(\"/add-custom-layout\", name=\"addcustomlayout\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addCustomLayoutAction(Request $request)\n    {\n        $layoutId = $request->get('layoutIdentifier');\n        $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId);\n        if ($existingLayout) {\n            throw new \\Exception('Custom Layout identifier already exists');\n        }\n\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::create(\n            [\n                'name' => $request->get('layoutName'),\n                'userOwner' => $this->getAdminUser()->getId(),\n                'classId' => $request->get('classId'),\n            ]\n        );\n\n        $customLayout->setId($layoutId);\n        $customLayout->save();\n\n        $isWriteable = $customLayout->isWritable();\n        $data = $customLayout->getObjectVars();\n        $data['isWriteable'] = $isWriteable;\n\n        return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'name' => $customLayout->getName(),\n                                 'data' => $data, ]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function deleteAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if ($class) {\n            $class->delete();\n        }\n\n        return new Response();\n    }\n\n    /**\n     * @Route(\"/delete-custom-layout\", name=\"deletecustomlayout\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLayoutAction(Request $request)\n    {\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $id = $request->get('id');\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($id) {\n            $currentLayoutId = $layout->getId();\n\n            return $currentLayoutId === $id || str_starts_with($currentLayoutId, $id . '.brick.');\n        });\n\n        foreach ($customLayouts->getLayoutDefinitions() as $customLayout) {\n            $customLayout->delete();\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/save-custom-layout\", name=\"savecustomlayout\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function saveCustomLayoutAction(Request $request)\n    {\n        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($request->get('id'));\n        if (!$customLayout) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        $modificationDate = (int)$values['modificationDate'];\n        if ($modificationDate < $customLayout->getModificationDate()) {\n            return $this->adminJson(['success' => false, 'msg' => 'custom_layout_changed']);\n        }\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n            $customLayout->setLayoutDefinitions($layout);\n            $customLayout->setName($values['name']);\n            $customLayout->setDescription($values['description']);\n            $customLayout->setDefault($values['default']);\n            $customLayout->save();\n\n            return $this->adminJson(['success' => true, 'id' => $customLayout->getId(), 'data' => $customLayout->getObjectVars()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/save\", name=\"save\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function saveAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n\n        $configuration = $this->decodeJson($request->get('configuration'));\n        $values = $this->decodeJson($request->get('values'));\n\n        // check if the class was changed during editing in the frontend\n        if ($class->getModificationDate() != $values['modificationDate']) {\n            throw new \\Exception('The class was modified during editing, please reload the class and make your changes again');\n        }\n\n        if ($values['name'] != $class->getName()) {\n            $classByName = DataObject\\ClassDefinition::getByName($values['name']);\n            if ($classByName && $classByName->getId() != $class->getId()) {\n                throw new \\Exception('Class name already exists');\n            }\n\n            $values['name'] = $this->correctClassname($values['name']);\n            $class->rename($values['name']);\n        }\n\n        if ($values['compositeIndices']) {\n            foreach ($values['compositeIndices'] as $index => $compositeIndex) {\n                if ($compositeIndex['index_key'] !== ($sanitizedKey = preg_replace('/[^a-za-z0-9_\\-+]/', '', $compositeIndex['index_key']))) {\n                    $values['compositeIndices'][$index]['index_key'] = $sanitizedKey;\n                }\n            }\n        }\n\n        unset($values['creationDate']);\n        unset($values['userOwner']);\n        unset($values['layoutDefinitions']);\n        unset($values['fieldDefinitions']);\n\n        $configuration['datatype'] = 'layout';\n        $configuration['fieldtype'] = 'panel';\n        $configuration['name'] = 'pimcore_root';\n\n        $class->setValues($values);\n\n        try {\n            $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n\n            $class->setLayoutDefinitions($layout);\n\n            $class->setUserModification($this->getAdminUser()->getId());\n            $class->setModificationDate(time());\n\n            $propertyVisibility = [];\n            foreach ($values as $key => $value) {\n                if (preg_match('/propertyVisibility/i', $key)) {\n                    if (preg_match(\"/\\.grid\\./i\", $key)) {\n                        $propertyVisibility['grid'][preg_replace(\"/propertyVisibility\\.grid\\./i\", '', $key)] = (bool) $value;\n                    } elseif (preg_match(\"/\\.search\\./i\", $key)) {\n                        $propertyVisibility['search'][preg_replace(\"/propertyVisibility\\.search\\./i\", '', $key)] = (bool) $value;\n                    }\n                }\n            }\n            if (!empty($propertyVisibility)) {\n                $class->setPropertyVisibility($propertyVisibility);\n            }\n\n            $class->save();\n\n            // set the fielddefinitions to [] because we don't need them in the response\n            $class->setFieldDefinitions([]);\n\n            return $this->adminJson(['success' => true, 'class' => $class]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @param string $name\n     *\n     * @return string\n     */\n    protected function correctClassname($name)\n    {\n        $name = preg_replace('/[^a-zA-Z0-9_]+/', '', $name);\n        $name = preg_replace('/^[0-9]+/', '', $name);\n\n        return $name;\n    }\n\n    /**\n     * @Route(\"/import-class\", name=\"importclass\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importClassAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, $json, false, true);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/import-custom-layout-definition\", name=\"importcustomlayoutdefinition\", methods={\"POST\", \"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importCustomLayoutDefinitionAction(Request $request)\n    {\n        $success = false;\n        $responseContent = [];\n        $json = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $importData = $this->decodeJson($json);\n\n        $existingLayout = null;\n        if (isset($importData['name'])) {\n            $existingLayout = DataObject\\ClassDefinition\\CustomLayout::getByName($importData['name']);\n\n            if ($existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                $responseContent['nameAlreadyInUse'] = true;\n            }\n        }\n\n        if (!$existingLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n            $customLayoutId = $request->get('id');\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($customLayoutId);\n            if ($customLayout) {\n                try {\n                    $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($importData['layoutDefinitions'], true);\n                    $customLayout->setLayoutDefinitions($layout);\n                    if (isset($importData['name']) === true) {\n                        $customLayout->setName($importData['name']);\n                    }\n                    $customLayout->setDescription($importData['description']);\n                    $customLayout->save();\n                    $success = true;\n                } catch (\\Exception $e) {\n                    Logger::error($e->getMessage());\n                }\n            }\n\n            $responseContent['success'] = $success;\n        }\n\n        $response = $this->adminJson($responseContent);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/get-custom-layout-definitions\", name=\"getcustomlayoutdefinitions\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getCustomLayoutDefinitionsAction(Request $request)\n    {\n        $classIds = explode(',', $request->get('classId'));\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($classIds) {\n            return in_array($layout->getClassId(), $classIds) && !str_contains($layout->getId(), '.brick.');\n        });\n        $list = $list->load();\n        $result = [];\n        foreach ($list as $item) {\n            $result[] = [\n                'id' => $item->getId(),\n                'name' => $item->getName() . ' (ID: ' . $item->getId() . ')',\n                'default' => $item->getDefault() ?: 0,\n            ];\n        }\n\n        return $this->adminJson(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/get-all-layouts\", name=\"getalllayouts\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAllLayoutsAction(Request $request)\n    {\n        // get all classes\n        $resultList = [];\n        $mapping = [];\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) {\n            return !str_contains($layout->getId(), '.brick.');\n        });\n        $customLayouts->setOrder(function (DataObject\\ClassDefinition\\CustomLayout $a, DataObject\\ClassDefinition\\CustomLayout $b) {\n            return strcmp($a->getName(), $b->getName());\n        });\n\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $layout) {\n            $mapping[$layout->getClassId()][] = $layout;\n        }\n\n        $classList = new DataObject\\ClassDefinition\\Listing();\n        $classList->setOrder('ASC');\n        $classList->setOrderKey('name');\n        $classList = $classList->load();\n\n        foreach ($classList as $class) {\n            if (isset($mapping[$class->getId()])) {\n                $classMapping = $mapping[$class->getId()];\n                $resultList[] = [\n                    'type' => 'main',\n                    'id' => $class->getId() . '_' . 0,\n                    'name' => $class->getName(),\n                ];\n\n                foreach ($classMapping as $layout) {\n                    $resultList[] = [\n                        'type' => 'custom',\n                        'id' => $class->getId() . '_' . $layout->getId(),\n                        'name' => $class->getName() . ' - ' . $layout->getName(),\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson(['data' => $resultList]);\n    }\n\n    /**\n     * @Route(\"/export-class\", name=\"exportclass\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportClassAction(Request $request)\n    {\n        $id = $request->get('id');\n        $class = DataObject\\ClassDefinition::getById($id);\n\n        if (!$class instanceof DataObject\\ClassDefinition) {\n            $errorMessage = ': Class with id [ ' . $id . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class);\n\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"class_' . $class->getName() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-custom-layout-definition\", name=\"exportcustomlayoutdefinition\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportCustomLayoutDefinitionAction(Request $request)\n    {\n        $id = $request->get('id');\n\n        if ($id) {\n            $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($id);\n            if ($customLayout) {\n                $name = $customLayout->getName();\n                $json = DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout);\n\n                $response = new Response($json);\n                $response->headers->set('Content-type', 'application/json');\n                $response->headers->set('Content-Disposition', 'attachment; filename=\"custom_definition_' . $name . '_export.json\"');\n\n                return $response;\n            }\n        }\n\n        $errorMessage = ': Custom Layout with id [ ' . $id . ' not found. ]';\n        Logger::error($errorMessage);\n\n        throw $this->createNotFoundException($errorMessage);\n    }\n\n    /**\n     * FIELDCOLLECTIONS\n     */\n\n    /**\n     * @Route(\"/fieldcollection-get\", name=\"fieldcollectionget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionGetAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-update\", name=\"fieldcollectionupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionUpdateAction(Request $request)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing fieldcollection with same name with different lower/upper cases\n                $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('FieldCollection with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            $fcDef = new DataObject\\Fieldcollection\\Definition();\n            $fcDef->setKey($key);\n            $fcDef->setTitle($title);\n            $fcDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n                $fcDef->setParentClass($values['parentClass']);\n                $fcDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $fcDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $fcDef->setLayoutDefinitions($layout);\n            }\n\n            $fcDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $fcDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-fieldcollection\", name=\"importfieldcollection\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function importFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n\n        $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-fieldcollection\", name=\"exportfieldcollection\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportFieldcollectionAction(Request $request)\n    {\n        $fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n\n        if (!$fieldCollection instanceof DataObject\\Fieldcollection\\Definition) {\n            $errorMessage = ': Field-Collection with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $json = DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection);\n        $response = new Response($json);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"fieldcollection_' . $fieldCollection->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/fieldcollection-delete\", name=\"fieldcollectiondelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Fieldcollection\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-tree\", name=\"fieldcollectiontree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $layoutDefinitions = [];\n\n        $definitions = [];\n\n        $allowedTypes = null;\n        if ($request->query->has('allowedTypes')) {\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n        }\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        $currentLayoutId = $request->get('layoutId', null);\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n\n        $groups = [];\n        foreach ($list as $item) {\n            if ($allowedTypes && !in_array($item->getKey(), $allowedTypes)) {\n                continue;\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_fieldcollection',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($itemLayoutDefinitions);\n                    }\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_fieldcollection',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n            'layoutDefinitions' => $layoutDefinitions,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n        $layoutDefinitions = $event->getArgument('layoutDefinitions');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['fieldcollections' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        }\n\n        return $this->adminJson($definitions);\n    }\n\n    /**\n     * @Route(\"/fieldcollection-list\", name=\"fieldcollectionlist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function fieldcollectionListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $user = \\Pimcore\\Tool\\Admin::getCurrentUser();\n        $currentLayoutId = $request->get('layoutId');\n\n        $list = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('allowedTypes')) {\n            $filteredList = [];\n            $allowedTypes = explode(',', $request->get('allowedTypes'));\n            foreach ($list as $type) {\n                if (in_array($type->getKey(), $allowedTypes)) {\n                    $filteredList[] = $type;\n\n                    // mainly for objects-meta data-type\n                    $layoutDefinitions = $type->getLayoutDefinitions();\n                    $context = [\n                        'containerType' => 'fieldcollection',\n                        'containerKey' => $type->getKey(),\n                        'outerFieldname' => $request->get('field_name'),\n                    ];\n\n                    $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                    DataObject\\Service::enrichLayoutDefinition($layoutDefinitions, $object, $context);\n\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layoutDefinitions);\n                    }\n                }\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_FIELDCOLLECTION_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['fieldcollections' => $list]);\n    }\n\n    /**\n     * @Route(\"/get-class-definition-for-column-config\", name=\"getclassdefinitionforcolumnconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getClassDefinitionForColumnConfigAction(Request $request)\n    {\n        $class = DataObject\\ClassDefinition::getById($request->get('id'));\n        if (!$class) {\n            throw $this->createNotFoundException();\n        }\n        $objectId = (int)$request->get('oid');\n\n        $filteredDefinitions = DataObject\\Service::getCustomLayoutDefinitionForGridColumnConfig($class, $objectId);\n\n        /** @var DataObject\\ClassDefinition\\Layout $layoutDefinitions */\n        $layoutDefinitions = isset($filteredDefinitions['layoutDefinition']) ? $filteredDefinitions['layoutDefinition'] : false;\n        $filteredFieldDefinition = isset($filteredDefinitions['fieldDefinition']) ? $filteredDefinitions['fieldDefinition'] : false;\n\n        $class->setFieldDefinitions([]);\n\n        $result = [];\n\n        DataObject\\Service::enrichLayoutDefinition($layoutDefinitions);\n\n        $result['objectColumns']['children'] = $layoutDefinitions->getChildren();\n        $result['objectColumns']['nodeLabel'] = 'object_columns';\n        $result['objectColumns']['nodeType'] = 'object';\n\n        // array(\"id\", \"fullpath\", \"published\", \"creationDate\", \"modificationDate\", \"filename\", \"classname\");\n        $systemColumnNames = DataObject\\Concrete::SYSTEM_COLUMN_NAMES;\n        $systemColumns = [];\n        foreach ($systemColumnNames as $systemColumn) {\n            $systemColumns[] = ['title' => $systemColumn, 'name' => $systemColumn, 'datatype' => 'data', 'fieldtype' => 'system'];\n        }\n        $result['systemColumns']['nodeLabel'] = 'system_columns';\n        $result['systemColumns']['nodeType'] = 'system';\n        $result['systemColumns']['children'] = $systemColumns;\n\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        foreach ($list as $brickDefinition) {\n            $classDefs = $brickDefinition->getClassDefinitions();\n            if (!empty($classDefs)) {\n                foreach ($classDefs as $classDef) {\n                    if ($classDef['classname'] == $class->getName()) {\n                        $fieldName = $classDef['fieldname'];\n                        if ($filteredFieldDefinition && !$filteredFieldDefinition[$fieldName]) {\n                            continue;\n                        }\n\n                        $key = $brickDefinition->getKey();\n\n                        $brickLayoutDefinitions = $brickDefinition->getLayoutDefinitions();\n                        $context = [\n                            'containerType' => 'objectbrick',\n                            'containerKey' => $key,\n                            'outerFieldname' => $fieldName,\n                        ];\n                        DataObject\\Service::enrichLayoutDefinition($brickLayoutDefinitions, null, $context);\n\n                        $result[$key]['nodeLabel'] = $key;\n                        $result[$key]['brickField'] = $fieldName;\n                        $result[$key]['nodeType'] = 'objectbricks';\n                        $result[$key]['children'] = $brickLayoutDefinitions->getChildren();\n\n                        break;\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * OBJECT BRICKS\n     */\n\n    /**\n     * @Route(\"/objectbrick-get\", name=\"objectbrickget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickGetAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $isWriteable = $fc->isWritable();\n        $fc = $fc->getObjectVars();\n        $fc['isWriteable'] = $isWriteable;\n\n        return $this->adminJson($fc);\n    }\n\n    /**\n     * @Route(\"/objectbrick-update\", name=\"objectbrickupdate\", methods={\"PUT\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickUpdateAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        try {\n            $key = $request->get('key');\n            $title = $request->get('title');\n            $group = $request->get('group');\n\n            if ($request->get('task') == 'add') {\n                // check for existing brick with same name with different lower/upper cases\n                $list = new DataObject\\Objectbrick\\Definition\\Listing();\n                $list = $list->load();\n\n                foreach ($list as $item) {\n                    if (strtolower($key) === strtolower($item->getKey())) {\n                        throw new \\Exception('Brick with the same name already exists (lower/upper cases may be different)');\n                    }\n                }\n            }\n\n            // now we create a new definition\n            $brickDef = new DataObject\\Objectbrick\\Definition();\n            $brickDef->setKey($key);\n            $brickDef->setTitle($title);\n            $brickDef->setGroup($group);\n\n            if ($request->get('values')) {\n                $values = $this->decodeJson($request->get('values'));\n\n                $brickDef->setParentClass($values['parentClass']);\n                $brickDef->setImplementsInterfaces($values['implementsInterfaces']);\n                $brickDef->setClassDefinitions($values['classDefinitions']);\n                $brickDef->setGenerateTypeDeclarations($values['generateTypeDeclarations']);\n            }\n\n            if ($request->get('configuration')) {\n                $configuration = $this->decodeJson($request->get('configuration'));\n\n                $configuration['datatype'] = 'layout';\n                $configuration['fieldtype'] = 'panel';\n\n                $layout = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($configuration, true);\n                $brickDef->setLayoutDefinitions($layout);\n            }\n\n            $event = new GenericEvent($this, [\n                'brickDefinition' => $brickDef,\n            ]);\n            $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_UPDATE_DEFINITION);\n            $brickDef = $event->getArgument('brickDefinition');\n\n            $brickDef->save();\n\n            return $this->adminJson(['success' => true, 'id' => $brickDef->getKey()]);\n        } catch (\\Exception $e) {\n            Logger::error($e->getMessage());\n\n            return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n        }\n    }\n\n    /**\n     * @Route(\"/import-objectbrick\", name=\"importobjectbrick\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function importObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        $data = file_get_contents($_FILES['Filedata']['tmp_name']);\n        $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($objectBrick, $data);\n\n        $response = $this->adminJson([\n            'success' => $success,\n        ]);\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/export-objectbrick\", name=\"exportobjectbrick\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function exportObjectbrickAction(Request $request)\n    {\n        $objectBrick = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n\n        if (!$objectBrick instanceof DataObject\\Objectbrick\\Definition) {\n            $errorMessage = ': Object-Brick with id [ ' . $request->get('id') . ' not found. ]';\n            Logger::error($errorMessage);\n\n            throw $this->createNotFoundException($errorMessage);\n        }\n\n        $xml = DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick);\n        $response = new Response($xml);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"objectbrick_' . $objectBrick->getKey() . '_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/objectbrick-delete\", name=\"objectbrickdelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickDeleteAction(Request $request)\n    {\n        $fc = DataObject\\Objectbrick\\Definition::getByKey($request->get('id'));\n        $fc->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/objectbrick-tree\", name=\"objectbricktree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickTreeAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        $forObjectEditor = $request->get('forObjectEditor');\n\n        $context = null;\n        $layoutDefinitions = [];\n        $groups = [];\n        $definitions = [];\n        $fieldname = null;\n        $className = null;\n\n        $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n        }\n\n        foreach ($list as $item) {\n            if ($forObjectEditor) {\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $item->getKey(),\n                    'outerFieldname' => $fieldname,\n                ];\n            }\n            if ($request->query->has('class_id') && $request->query->has('field_name')) {\n                $keep = false;\n                $clsDefs = $item->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $keep = true;\n\n                            continue;\n                        }\n                    }\n                }\n                if (!$keep) {\n                    continue;\n                }\n            }\n\n            if ($item->getGroup()) {\n                if (!isset($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getKey(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                if ($forObjectEditor) {\n                    $layoutId = $request->get('layoutId');\n                    $itemLayoutDefinitions = null;\n                    if ($layoutId) {\n                        $layout = DataObject\\ClassDefinition\\CustomLayout::getById($layoutId.'.brick.'.$item->getKey());\n                        if ($layout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $itemLayoutDefinitions = $layout->getLayoutDefinitions();\n                        }\n                    }\n\n                    if ($itemLayoutDefinitions === null) {\n                        $itemLayoutDefinitions = $item->getLayoutDefinitions();\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($itemLayoutDefinitions, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $itemLayoutDefinitions;\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getKey(),\n                        'text' => $item->getKey(),\n                        'title' => $item->getTitle(),\n                        'key' => $item->getKey(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_objectbricks',\n                    ];\n            } else {\n                if ($forObjectEditor) {\n                    $layout = $item->getLayoutDefinitions();\n\n                    $currentLayoutId = $request->get('layoutId', null);\n\n                    $user = $this->getAdminUser();\n                    if ($currentLayoutId == -1 && $user->isAdmin()) {\n                        DataObject\\Service::createSuperLayout($layout);\n                    } elseif ($currentLayoutId) {\n                        $customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($currentLayoutId.'.brick.'.$item->getKey());\n                        if ($customLayout instanceof DataObject\\ClassDefinition\\CustomLayout) {\n                            $layout = $customLayout->getLayoutDefinitions();\n                        }\n                    }\n\n                    DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n\n                    $layoutDefinitions[$item->getKey()] = $layout;\n                }\n                $definitions[] = [\n                    'id' => $item->getKey(),\n                    'text' => $item->getKey(),\n                    'title' => $item->getTitle(),\n                    'key' => $item->getKey(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_objectbricks',\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $definitions[] = $group;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $definitions,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $definitions = $event->getArgument('list');\n\n        if ($forObjectEditor) {\n            return $this->adminJson(['objectbricks' => $definitions, 'layoutDefinitions' => $layoutDefinitions]);\n        } else {\n            return $this->adminJson($definitions);\n        }\n    }\n\n    /**\n     * @Route(\"/objectbrick-list\", name=\"objectbricklist\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function objectbrickListAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $list = new DataObject\\Objectbrick\\Definition\\Listing();\n        $list = $list->load();\n\n        if ($request->query->has('class_id') && $request->query->has('field_name')) {\n            $filteredList = [];\n            $classId = $request->get('class_id');\n            $fieldname = $request->get('field_name');\n            $classDefinition = DataObject\\ClassDefinition::getById($classId);\n            $className = $classDefinition->getName();\n\n            foreach ($list as $type) {\n                $clsDefs = $type->getClassDefinitions();\n                if (!empty($clsDefs)) {\n                    foreach ($clsDefs as $cd) {\n                        if ($cd['classname'] == $className && $cd['fieldname'] == $fieldname) {\n                            $filteredList[] = $type;\n\n                            continue;\n                        }\n                    }\n                }\n\n                $layout = $type->getLayoutDefinitions();\n\n                $currentLayoutId = $request->get('layoutId', null);\n\n                $user = $this->getAdminUser();\n                if ($currentLayoutId == -1 && $user->isAdmin()) {\n                    DataObject\\Service::createSuperLayout($layout);\n                    $objectData['layout'] = $layout;\n                }\n\n                $context = [\n                    'containerType' => 'objectbrick',\n                    'containerKey' => $type->getKey(),\n                    'outerFieldname' => $request->get('field_name'),\n                ];\n\n                $object = DataObject\\Concrete::getById((int) $request->get('object_id'));\n\n                DataObject\\Service::enrichLayoutDefinition($layout, $object, $context);\n                $type->setLayoutDefinitions($layout);\n            }\n\n            $list = $filteredList;\n        }\n\n        $event = new GenericEvent($this, [\n            'list' => $list,\n            'objectId' => $request->get('object_id'),\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECTBRICK_LIST_PRE_SEND_DATA);\n        $list = $event->getArgument('list');\n\n        return $this->adminJson(['objectbricks' => $list]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-import\", name=\"bulkimport\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function bulkImportAction(Request $request)\n    {\n        $result = [];\n\n        $tmpName = $_FILES['Filedata']['tmp_name'];\n        $json = file_get_contents($tmpName);\n\n        $tmpName = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/bulk-import-' . uniqid() . '.tmp';\n        file_put_contents($tmpName, $json);\n\n        Session::useSession(function (AttributeBagInterface $session) use ($tmpName) {\n            $session->set('class_bulk_import_file', $tmpName);\n        }, 'pimcore_objects');\n\n        $json = json_decode($json, true);\n\n        foreach ($json as $groupName => $group) {\n            foreach ($group as $groupItem) {\n                $displayName = null;\n                $icon = null;\n\n                if ($groupName == 'class') {\n                    $name = $groupItem['name'];\n                    $icon = 'class';\n                } elseif ($groupName == 'customlayout') {\n                    $className = $groupItem['className'];\n\n                    $layoutData = ['className' => $className, 'name' => $groupItem['name']];\n                    $name = base64_encode(json_encode($layoutData));\n                    $displayName = $className . ' / ' . $groupItem['name'];\n                    $icon = 'custom_views';\n                } else {\n                    if ($groupName == 'objectbrick') {\n                        $icon = 'objectbricks';\n                    } elseif ($groupName == 'fieldcollection') {\n                        $icon = 'fieldcollection';\n                    }\n                    $name = $groupItem['key'];\n                }\n\n                if (!$displayName) {\n                    $displayName = $name;\n                }\n                $result[] = ['icon' => $icon, 'checked' => true, 'type' => $groupName, 'name' => $name, 'displayName' => $displayName];\n            }\n        }\n\n        $response = $this->adminJson(['success' => true, 'data' => $result]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-commit\", name=\"bulkcommit\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function bulkCommitAction(Request $request)\n    {\n        $data = json_decode($request->get('data'), true);\n\n        $session = Session::get('pimcore_objects');\n        $filename = $session->get('class_bulk_import_file');\n        $json = @file_get_contents($filename);\n        $json = json_decode($json, true);\n\n        $type = $data['type'];\n        $name = $data['name'];\n        $list = $json[$type];\n\n        foreach ($list as $item) {\n            unset($item['creationDate']);\n            unset($item['modificationDate']);\n            unset($item['userOwner']);\n            unset($item['userModification']);\n\n            if ($type == 'class' && $item['name'] == $name) {\n                $class = DataObject\\ClassDefinition::getByName($name);\n                if (!$class) {\n                    $class = new DataObject\\ClassDefinition();\n                    $class->setName($name);\n                }\n                $success = DataObject\\ClassDefinition\\Service::importClassDefinitionFromJson($class, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'objectbrick' && $item['key'] == $name) {\n                if (!$brick = DataObject\\Objectbrick\\Definition::getByKey($name)) {\n                    $brick = new DataObject\\Objectbrick\\Definition();\n                    $brick->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importObjectBrickFromJson($brick, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'fieldcollection' && $item['key'] == $name) {\n                if (!$fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($name)) {\n                    $fieldCollection = new DataObject\\Fieldcollection\\Definition();\n                    $fieldCollection->setKey($name);\n                }\n\n                $success = DataObject\\ClassDefinition\\Service::importFieldCollectionFromJson($fieldCollection, json_encode($item), true);\n\n                return $this->adminJson(['success' => $success !== false]);\n            } elseif ($type == 'customlayout') {\n                $layoutData = json_decode(base64_decode($data['name']), true);\n                $className = $layoutData['className'];\n                $layoutName = $layoutData['name'];\n\n                if ($item['name'] == $layoutName && $item['className'] == $className) {\n                    $class = DataObject\\ClassDefinition::getByName($className);\n                    if (!$class) {\n                        throw new \\Exception('Class does not exist');\n                    }\n\n                    $classId = $class->getId();\n\n                    $layoutList = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n                    $layoutList->setFilter(function (DataObject\\ClassDefinition\\CustomLayout $layout) use ($layoutName, $classId) {\n                        return $layout->getName() === $layoutName && $layout->getClassId() === $classId;\n                    });\n                    $layoutList = $layoutList->load();\n\n                    $layoutDefinition = null;\n                    if ($layoutList) {\n                        $layoutDefinition = $layoutList[0];\n                    }\n\n                    if (!$layoutDefinition) {\n                        $layoutDefinition = new DataObject\\ClassDefinition\\CustomLayout();\n                        $layoutDefinition->setName($layoutName);\n                        $layoutDefinition->setClassId($classId);\n                    }\n\n                    try {\n                        $layoutDefinition->setDescription($item['description']);\n                        $layoutDef = DataObject\\ClassDefinition\\Service::generateLayoutTreeFromArray($item['layoutDefinitions'], true);\n                        $layoutDefinition->setLayoutDefinitions($layoutDef);\n                        $layoutDefinition->save();\n                    } catch (\\Exception $e) {\n                        Logger::error($e->getMessage());\n\n                        return $this->adminJson(['success' => false, 'message' => $e->getMessage()]);\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * See http://www.pimcore.org/issues/browse/PIMCORE-2358\n     * Add option to export/import all class definitions/brick definitions etc. at once\n     */\n\n    /**\n     * @Route(\"/bulk-export-prepare\", name=\"bulkexportprepare\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportPrepareAction(Request $request)\n    {\n        $data = $request->get('data');\n\n        Session::useSession(function (AttributeBagInterface $session) use ($data) {\n            $session->set('class_bulk_export_settings', $data);\n        }, 'pimcore_objects');\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/bulk-export\", name=\"bulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function bulkExportAction(Request $request)\n    {\n        $result = [];\n\n        $fieldCollections = new DataObject\\Fieldcollection\\Definition\\Listing();\n        $fieldCollections = $fieldCollections->load();\n\n        foreach ($fieldCollections as $fieldCollection) {\n            $result[] = [\n                'icon' => 'fieldcollection',\n                'checked' => true,\n                'type' => 'fieldcollection',\n                'name' => $fieldCollection->getKey(),\n                'displayName' => $fieldCollection->getKey(),\n            ];\n        }\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes->setOrder('ASC');\n        $classes->setOrderKey('id');\n        $classes = $classes->load();\n\n        foreach ($classes as $class) {\n            $result[] = [\n                'icon' => 'class',\n                'checked' => true,\n                'type' => 'class',\n                'name' => $class->getName(),\n                'displayName' => $class->getName(),\n            ];\n        }\n\n        $objectBricks = new DataObject\\Objectbrick\\Definition\\Listing();\n        $objectBricks = $objectBricks->load();\n\n        foreach ($objectBricks as $objectBrick) {\n            $result[] = [\n                'icon' => 'objectbricks',\n                'checked' => true,\n                'type' => 'objectbrick',\n                'name' => $objectBrick->getKey(),\n                'displayName' => $objectBrick->getKey(),\n            ];\n        }\n\n        $customLayouts = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n        $customLayouts = $customLayouts->load();\n        foreach ($customLayouts as $customLayout) {\n            $class = DataObject\\ClassDefinition::getById($customLayout->getClassId());\n            $displayName = $class->getName() . ' / ' .  $customLayout->getName();\n\n            $result[] = [\n                'icon' => 'custom_views',\n                'checked' => true,\n                'type' => 'customlayout',\n                'name' => $customLayout->getId(),\n                'displayName' => $displayName,\n            ];\n        }\n\n        return new JsonResponse(['success' => true, 'data' => $result]);\n    }\n\n    /**\n     * @Route(\"/do-bulk-export\", name=\"dobulkexport\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function doBulkExportAction(Request $request)\n    {\n        $session = Session::get('pimcore_objects');\n        $list = $session->get('class_bulk_export_settings');\n        $list = json_decode($list, true);\n        $result = [];\n\n        foreach ($list as $item) {\n            if ($item['type'] == 'fieldcollection') {\n                if ($fieldCollection = DataObject\\Fieldcollection\\Definition::getByKey($item['name'])) {\n                    $fieldCollectionJson = json_decode(DataObject\\ClassDefinition\\Service::generateFieldCollectionJson($fieldCollection));\n                    $fieldCollectionJson->key = $item['name'];\n                    $result['fieldcollection'][] = $fieldCollectionJson;\n                }\n            } elseif ($item['type'] == 'class') {\n                if ($class = DataObject\\ClassDefinition::getByName($item['name'])) {\n                    $data = json_decode(DataObject\\ClassDefinition\\Service::generateClassDefinitionJson($class));\n                    $data->name = $item['name'];\n                    $result['class'][] = $data;\n                }\n            } elseif ($item['type'] == 'objectbrick') {\n                if ($objectBrick = DataObject\\Objectbrick\\Definition::getByKey($item['name'])) {\n                    $objectBrickJson = json_decode(DataObject\\ClassDefinition\\Service::generateObjectBrickJson($objectBrick));\n                    $objectBrickJson->key = $item['name'];\n                    $result['objectbrick'][] = $objectBrickJson;\n                }\n            } elseif ($item['type'] == 'customlayout') {\n                if ($customLayout = DataObject\\ClassDefinition\\CustomLayout::getById($item['name'])) {\n                    $classId = $customLayout->getClassId();\n                    $class = DataObject\\ClassDefinition::getById($classId);\n                    $customLayoutJson = json_decode(DataObject\\ClassDefinition\\Service::generateCustomLayoutJson($customLayout));\n                    $customLayoutJson->name = $customLayout->getName();\n                    $customLayoutJson->className = $class->getName();\n                    $result['customlayout'][] = $customLayoutJson;\n                }\n            }\n        }\n\n        $result = json_encode($result, JSON_PRETTY_PRINT);\n        $response = new Response($result);\n        $response->headers->set('Content-type', 'application/json');\n        $response->headers->set('Content-Disposition', 'attachment; filename=\"bulk_export.json\"');\n\n        return $response;\n    }\n\n    /**\n     * @param ControllerEvent $event\n     */\n    public function onKernelControllerEvent(ControllerEvent $event)\n    {\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        // check permissions\n        $unrestrictedActions = [\n            'getTreeAction', 'fieldcollectionListAction', 'fieldcollectionTreeAction', 'fieldcollectionGetAction',\n            'getClassDefinitionForColumnConfigAction', 'objectbrickListAction', 'objectbrickTreeAction', 'objectbrickGetAction',\n        ];\n\n        $this->checkActionPermission($event, 'classes', $unrestrictedActions);\n    }\n\n    /**\n     * @Route(\"/get-fieldcollection-usages\", name=\"getfieldcollectionusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getFieldcollectionUsagesAction(Request $request)\n    {\n        $key = $request->get('key');\n        $result = [];\n\n        $classes = new DataObject\\ClassDefinition\\Listing();\n        $classes = $classes->load();\n        foreach ($classes as $class) {\n            $fieldDefs = $class->getFieldDefinitions();\n            foreach ($fieldDefs as $fieldDef) {\n                if ($fieldDef instanceof DataObject\\ClassDefinition\\Data\\Fieldcollections) {\n                    $allowedKeys = $fieldDef->getAllowedTypes();\n                    if (is_array($allowedKeys) && in_array($key, $allowedKeys)) {\n                        $result[] = [\n                            'class' => $class->getName(),\n                            'field' => $fieldDef->getName(),\n                        ];\n                    }\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-bricks-usages\", name=\"getbrickusages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function getBrickUsagesAction(Request $request)\n    {\n        $classId = $request->get('classId');\n        $myclass = DataObject\\ClassDefinition::getById($classId);\n\n        $result = [];\n\n        $brickDefinitions = new DataObject\\Objectbrick\\Definition\\Listing();\n        $brickDefinitions = $brickDefinitions->load();\n        foreach ($brickDefinitions as $brickDefinition) {\n            $classes = $brickDefinition->getClassDefinitions();\n            foreach ($classes as $class) {\n                if ($myclass->getName() == $class['classname']) {\n                    $result[] = [\n                        'objectbrick' => $brickDefinition->getKey(),\n                        'field' => $class['fieldname'],\n                    ];\n                }\n            }\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/get-icons\", name=\"geticons\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return Response\n     */\n    public function getIconsAction(Request $request, EventDispatcherInterface $eventDispatcher)\n    {\n        $classId = $request->get('classId');\n\n        $iconDir = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img';\n        $classIcons = rscandir($iconDir . '/object-icons/');\n        $colorIcons = rscandir($iconDir . '/flat-color-icons/');\n        $twemoji = rscandir($iconDir . '/twemoji/');\n\n        $icons = array_merge($classIcons, $colorIcons, $twemoji);\n\n        foreach ($icons as &$icon) {\n            $icon = str_replace(PIMCORE_WEB_ROOT, '', $icon);\n        }\n\n        $event = new GenericEvent($this, [\n            'icons' => $icons,\n            'classId' => $classId,\n        ]);\n        $eventDispatcher->dispatch($event, AdminEvents::CLASS_OBJECT_ICONS_PRE_SEND_DATA);\n        $icons = $event->getArgument('icons');\n\n        $result = [];\n        foreach ($icons as $icon) {\n            $content = file_get_contents(PIMCORE_WEB_ROOT . $icon);\n            $result[] = [\n                'text' => sprintf('<img src=\"data:%s;base64,%s\"/>', mime_content_type(PIMCORE_WEB_ROOT . $icon), base64_encode($content)),\n                'value' => $icon,\n            ];\n        }\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-class-identifier\", name=\"suggestclassidentifier\")\n     *\n     * @return Response\n     */\n    public function suggestClassIdentifierAction()\n    {\n        $db = Db::get();\n        $maxId = $db->fetchOne('SELECT MAX(CAST(id AS SIGNED)) FROM classes;');\n\n        $existingIds = $db->fetchFirstColumn('select LOWER(id) from classes');\n\n        $result = [\n            'suggestedIdentifier' => $maxId ? $maxId + 1 : 1,\n            'existingIds' => $existingIds,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/suggest-custom-layout-identifier\", name=\"suggestcustomlayoutidentifier\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function suggestCustomLayoutIdentifierAction(Request $request)\n    {\n        $classId = $request->get('classId');\n\n        $identifier = DataObject\\ClassDefinition\\CustomLayout::getIdentifier($classId);\n\n        $list = new DataObject\\ClassDefinition\\CustomLayout\\Listing();\n\n        $list = $list->load();\n        $existingIds = [];\n        $existingNames = [];\n\n        foreach ($list as $item) {\n            $existingIds[] = $item->getId();\n            if ($item->getClassId() == $classId) {\n                $existingNames[] = $item->getName();\n            }\n        }\n\n        $result = [\n            'suggestedIdentifier' => $identifier,\n            'existingIds' => $existingIds,\n            'existingNames' => $existingNames,\n            ];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/text-layout-preview\", name=\"textlayoutpreview\")\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function textLayoutPreviewAction(Request $request)\n    {\n        $objPath = $request->get('previewObject', '');\n        $className = '\\\\Pimcore\\\\Model\\\\DataObject\\\\' . $request->get('className');\n        $obj = DataObject::getByPath($objPath) ?? new $className();\n\n        $textLayout = new DataObject\\ClassDefinition\\Layout\\Text();\n\n        $context = [\n          'data' => $request->get('renderingData'),\n        ];\n\n        if ($renderingClass = $request->get('renderingClass')) {\n            $textLayout->setRenderingClass($renderingClass);\n        }\n\n        if ($staticHtml = $request->get('html')) {\n            $textLayout->setHtml($staticHtml);\n        }\n\n        $html = $textLayout->enrichLayoutDefinition($obj, $context)->getHtml();\n\n        $content =\n            \"<html>\\n\" .\n            \"<head>\\n\" .\n            '<style type=\"text/css\">' . \"\\n\" .\n            file_get_contents(PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/css/admin.css') .\n            \"</style>\\n\" .\n            \"</head>\\n\\n\" .\n            \"<body class='objectlayout_element_text'>\\n\" .\n            $html .\n            \"\\n\\n</body>\\n\" .\n            \"</html>\\n\";\n\n        $response = new Response($content);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/video-supported-types\", name=\"videosupportedTypestypes\")\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function videoAllowedTypesAction(Request $request, TranslatorInterface $translator)\n    {\n        $videoDef = new DataObject\\ClassDefinition\\Data\\Video();\n        $res = [];\n\n        foreach ($videoDef->getSupportedTypes() as $type) {\n            $res[] = [\n                'key' => $type,\n                'value' => $translator->trans($type, [], 'admin'),\n            ];\n        }\n\n        return $this->adminJson($res);\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Doctrine\\DBAL\\Connection;\nuse Exception;\nuse Pimcore\\Analytics\\Google\\Config\\SiteConfigProvider;\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Bundle\\AdminBundle\\Security\\CsrfProtectionHandler;\nuse Pimcore\\Config;\nuse Pimcore\\Controller\\KernelResponseEventInterface;\nuse Pimcore\\Event\\Admin\\IndexActionSettingsEvent;\nuse Pimcore\\Event\\AdminEvents;\nuse Pimcore\\Extension\\Bundle\\PimcoreBundleManager;\nuse Pimcore\\Maintenance\\Executor;\nuse Pimcore\\Maintenance\\ExecutorInterface;\nuse Pimcore\\Model\\Document\\DocType;\nuse Pimcore\\Model\\Element\\Service;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\User;\nuse Pimcore\\Tool;\nuse Pimcore\\Tool\\Admin;\nuse Pimcore\\Tool\\Session;\nuse Pimcore\\Version;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\Session\\Attribute\\AttributeBagInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\Contracts\\EventDispatcher\\EventDispatcherInterface;\n\n/**\n * @internal\n */\nclass IndexController extends AdminAbstractController implements KernelResponseEventInterface\n{\n    /**\n     * @var EventDispatcherInterface\n     */\n    private $eventDispatcher;\n\n    /**\n     * @var PimcoreBundleManager\n     */\n    private $bundleManager;\n\n    /**\n     * @param EventDispatcherInterface $eventDispatcher\n     */\n    public function __construct(EventDispatcherInterface $eventDispatcher, PimcoreBundleManager $bundleManager)\n    {\n        $this->eventDispatcher = $eventDispatcher;\n        $this->bundleManager = $bundleManager;\n    }\n\n    /**\n     * @Route(\"/\", name=\"pimcore_admin_index\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param SiteConfigProvider $siteConfigProvider\n     * @param KernelInterface $kernel\n     * @param Executor $maintenanceExecutor\n     * @param CsrfProtectionHandler $csrfProtection\n     * @param Config $config\n     *\n     * @return Response\n     *\n     * @throws \\Exception\n     */\n    public function indexAction(\n        Request $request,\n        SiteConfigProvider $siteConfigProvider,\n        KernelInterface $kernel,\n        Executor $maintenanceExecutor,\n        CsrfProtectionHandler $csrfProtection,\n        Config $config\n    ) {\n        $user = $this->getAdminUser();\n        $perspectiveConfig = new \\Pimcore\\Perspective\\Config();\n        $templateParams = [\n            'config' => $config,\n            'perspectiveConfig' => $perspectiveConfig,\n        ];\n\n        $this\n            ->addRuntimePerspective($templateParams, $user)\n            ->addPluginAssets($templateParams);\n\n        $this->buildPimcoreSettings($request, $templateParams, $user, $kernel, $maintenanceExecutor, $csrfProtection, $siteConfigProvider);\n\n        if ($user->getTwoFactorAuthentication('required') && !$user->getTwoFactorAuthentication('enabled')) {\n            // only one login is allowed to setup 2FA by the user himself\n            $user->setTwoFactorAuthentication('enabled', true);\n            // disable the 2FA prompt for the current session\n            Tool\\Session::useSession(function (AttributeBagInterface $adminSession) {\n                $adminSession->set('2fa_required', false);\n            });\n\n            $user->save();\n\n            $templateParams['settings']['twoFactorSetupRequired'] = true;\n        }\n\n        // allow to alter settings via an event\n        $settingsEvent = new IndexActionSettingsEvent($templateParams['settings'] ?? []);\n        $this->eventDispatcher->dispatch($settingsEvent, AdminEvents::INDEX_ACTION_SETTINGS);\n        $templateParams['settings'] = $settingsEvent->getSettings();\n\n        return $this->render('@PimcoreAdmin/Admin/Index/index.html.twig', $templateParams);\n    }\n\n    /**\n     * @Route(\"/index/statistics\", name=\"pimcore_admin_index_statistics\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Connection $db\n     * @param KernelInterface $kernel\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function statisticsAction(Request $request, Connection $db, KernelInterface $kernel)\n    {\n        if (!$request->isXmlHttpRequest()) {\n            throw $this->createAccessDeniedHttpException();\n        }\n\n        // DB\n        try {\n            $tables = $db->fetchAllAssociative('SELECT TABLE_NAME as name,TABLE_ROWS as `rows` from information_schema.TABLES\n                WHERE TABLE_ROWS IS NOT NULL AND TABLE_SCHEMA = ?', [$db->getDatabase()]);\n        } catch (\\Exception $e) {\n            $tables = [];\n        }\n\n        try {\n            $mysqlVersion = $db->fetchOne('SELECT VERSION()');\n        } catch (\\Exception $e) {\n            $mysqlVersion = null;\n        }\n\n        try {\n            $data = [\n                'instanceId' => $this->getInstanceId(),\n                'pimcore_major_version' => Version::getMajorVersion(),\n                'pimcore_version' => Version::getVersion(),\n                'pimcore_hash' => Version::getRevision(),\n                'php_version' => PHP_VERSION,\n                'mysql_version' => $mysqlVersion,\n                'bundles' => array_keys($kernel->getBundles()),\n                'tables' => $tables,\n            ];\n        } catch (\\Exception $e) {\n            $data = [];\n        }\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @param array $templateParams\n     * @param User $user\n     *\n     * @return $this\n     */\n    protected function addRuntimePerspective(array &$templateParams, User $user)\n    {\n        $runtimePerspective = \\Pimcore\\Perspective\\Config::getRuntimePerspective($user);\n        $templateParams['runtimePerspective'] = $runtimePerspective;\n\n        return $this;\n    }\n\n    /**\n     * @param array $templateParams\n     *\n     * @return $this\n     */\n    protected function addPluginAssets(array &$templateParams)\n    {\n        $templateParams['pluginJsPaths'] = $this->bundleManager->getJsPaths();\n        $templateParams['pluginCssPaths'] = $this->bundleManager->getCssPaths();\n\n        return $this;\n    }\n\n    /**\n     * @param Request $request\n     * @param array $templateParams\n     * @param User $user\n     * @param KernelInterface $kernel\n     * @param ExecutorInterface $maintenanceExecutor\n     * @param CsrfProtectionHandler $csrfProtection\n     * @param SiteConfigProvider $siteConfigProvider\n     *\n     * @return $this\n     */\n    protected function buildPimcoreSettings(Request $request, array &$templateParams, User $user, KernelInterface $kernel, ExecutorInterface $maintenanceExecutor, CsrfProtectionHandler $csrfProtection, SiteConfigProvider $siteConfigProvider)\n    {\n        $config                = $templateParams['config'];\n        $dashboardHelper       = new \\Pimcore\\Helper\\Dashboard($user);\n        $customAdminEntrypoint = $this->getParameter('pimcore_admin.custom_admin_route_name');\n\n        try {\n            $adminEntrypointUrl = $this->generateUrl($customAdminEntrypoint, [], UrlGeneratorInterface::ABSOLUTE_URL);\n        } catch (Exception) {\n            // if the custom admin entrypoint is not defined, return null in the settings\n            $adminEntrypointUrl = null;\n        }\n\n        $settings = [\n            'instanceId'          => $this->getInstanceId(),\n            'version'             => Version::getVersion(),\n            'build'               => Version::getRevision(),\n            'debug'               => \\Pimcore::inDebugMode(),\n            'devmode'             => \\Pimcore::inDevMode(),\n            'disableMinifyJs'     => \\Pimcore::disableMinifyJs(),\n            'environment'         => $kernel->getEnvironment(),\n            'cached_environments' => Tool::getCachedSymfonyEnvironments(),\n            'sessionId'           => htmlentities(Session::getSessionId(), ENT_QUOTES, 'UTF-8'),\n\n            // languages\n            'language'         => $request->getLocale(),\n            'websiteLanguages' => Admin::reorderWebsiteLanguages(\n                $this->getAdminUser(),\n                $config['general']['valid_languages'],\n                true\n            ),\n\n            // flags\n            'showCloseConfirmation'          => true,\n            'debug_admin_translations'       => (bool)$config['general']['debug_admin_translations'],\n            'document_generatepreviews'      => (bool)$config['documents']['generate_preview'],\n            'asset_disable_tree_preview'     => (bool)$config['assets']['disable_tree_preview'],\n            'chromium'                       => \\Pimcore\\Image\\Chromium::isSupported(),\n            'htmltoimage'                    => \\Pimcore\\Image\\HtmlToImage::isSupported(),\n            'videoconverter'                 => \\Pimcore\\Video::isAvailable(),\n            'asset_hide_edit'                => (bool)$config['assets']['hide_edit_image'],\n            'main_domain'                    => $config['general']['domain'],\n            'custom_admin_entrypoint_url'    => $adminEntrypointUrl,\n            'timezone'                       => $config['general']['timezone'],\n            'tile_layer_url_template'        => $config['maps']['tile_layer_url_template'],\n            'geocoding_url_template'         => $config['maps']['geocoding_url_template'],\n            'reverse_geocoding_url_template' => $config['maps']['reverse_geocoding_url_template'],\n            'asset_tree_paging_limit'        => $config['assets']['tree_paging_limit'],\n            'document_tree_paging_limit'     => $config['documents']['tree_paging_limit'],\n            'object_tree_paging_limit'       => $config['objects']['tree_paging_limit'],\n            'maxmind_geoip_installed'        => (bool) $this->getParameter('pimcore.geoip.db_file'),\n            'hostname'                       => htmlentities(\\Pimcore\\Tool::getHostname(), ENT_QUOTES, 'UTF-8'),\n\n            'document_auto_save_interval' => $config['documents']['auto_save_interval'],\n            'object_auto_save_interval'   => $config['objects']['auto_save_interval'],\n\n            // perspective and portlets\n            'perspective'           => $templateParams['runtimePerspective'],\n            'availablePerspectives' => \\Pimcore\\Perspective\\Config::getAvailablePerspectives($user),\n            'disabledPortlets'      => $dashboardHelper->getDisabledPortlets(),\n\n            // google analytics\n            'google_analytics_enabled' => (bool) $siteConfigProvider->isSiteReportingConfigured(),\n\n            // this stuff is used to decide whether the \"add\" button should be grayed out or not\n            'image-thumbnails-writeable'          => (new \\Pimcore\\Model\\Asset\\Image\\Thumbnail\\Config())->isWriteable(),\n            'video-thumbnails-writeable'          => (new \\Pimcore\\Model\\Asset\\Video\\Thumbnail\\Config())->isWriteable(),\n            'custom-reports-writeable'            => (new \\Pimcore\\Model\\Tool\\CustomReport\\Config())->isWriteable(),\n            'document-types-writeable'            => (new DocType())->isWriteable(),\n            'web2print-writeable'                 => \\Pimcore\\Web2Print\\Config::isWriteable(),\n            'predefined-properties-writeable'     => (new \\Pimcore\\Model\\Property\\Predefined())->isWriteable(),\n            'predefined-asset-metadata-writeable' => (new \\Pimcore\\Model\\Metadata\\Predefined())->isWriteable(),\n            'staticroutes-writeable'              => (new Staticroute())->isWriteable(),\n            'perspectives-writeable'              => \\Pimcore\\Perspective\\Config::isWriteable(),\n            'custom-views-writeable'              => \\Pimcore\\CustomView\\Config::isWriteable(),\n            'class-definition-writeable'          => isset($_SERVER['PIMCORE_CLASS_DEFINITION_WRITABLE']) ? (bool)$_SERVER['PIMCORE_CLASS_DEFINITION_WRITABLE'] : true,\n        ];\n\n        $this\n            ->addSystemVarSettings($settings)\n            ->addMaintenanceSettings($settings, $maintenanceExecutor)\n            ->addMailSettings($settings, $config)\n            ->addCustomViewSettings($settings);\n\n        $settings['csrfToken'] = $csrfProtection->getCsrfToken();\n\n        $templateParams['settings'] = $settings;\n\n        return $this;\n    }\n\n    /**\n     * @return string\n     */\n    private function getInstanceId()\n    {\n        $instanceId = 'not-set';\n\n        try {\n            $instanceId = $this->getParameter('secret');\n            $instanceId = sha1(substr($instanceId, 3, -3));\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        return $instanceId;\n    }\n\n    /**\n     * @param array $settings\n     *\n     * @return $this\n     */\n    protected function addSystemVarSettings(array &$settings)\n    {\n        // upload limit\n        $max_upload = filesize2bytes(ini_get('upload_max_filesize') . 'B');\n        $max_post = filesize2bytes(ini_get('post_max_size') . 'B');\n        $upload_mb = min($max_upload, $max_post);\n\n        $settings['upload_max_filesize'] = (int) $upload_mb;\n\n        // session lifetime (gc)\n        $session_gc_maxlifetime = ini_get('session.gc_maxlifetime');\n        if (empty($session_gc_maxlifetime)) {\n            $session_gc_maxlifetime = 120;\n        }\n\n        $settings['session_gc_maxlifetime'] = (int)$session_gc_maxlifetime;\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     * @param ExecutorInterface $maintenanceExecutor\n     *\n     * @return $this\n     */\n    protected function addMaintenanceSettings(array &$settings, ExecutorInterface $maintenanceExecutor)\n    {\n        // check maintenance\n        $maintenance_active = false;\n        if ($lastExecution = $maintenanceExecutor->getLastExecution()) {\n            if ((time() - $lastExecution) < 3660) { // maintenance script should run at least every hour + a little tolerance\n                $maintenance_active = true;\n            }\n        }\n\n        $settings['maintenance_active'] = $maintenance_active;\n        $settings['maintenance_mode'] = Admin::isInMaintenanceMode();\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     * @param Config $config\n     *\n     * @return $this\n     */\n    protected function addMailSettings(array &$settings, $config)\n    {\n        //mail settings\n        $mailIncomplete = false;\n        if (isset($config['email'])) {\n            if (\\Pimcore::inDebugMode() && empty($config['email']['debug']['email_addresses'])) {\n                $mailIncomplete = true;\n            }\n            if (empty($config['email']['sender']['email'])) {\n                $mailIncomplete = true;\n            }\n        }\n\n        $settings['mail'] = !$mailIncomplete;\n        $settings['mailDefaultAddress'] = $config['email']['sender']['email'] ?? null;\n\n        return $this;\n    }\n\n    /**\n     * @param array $settings\n     *\n     * @return $this\n     */\n    protected function addCustomViewSettings(array &$settings)\n    {\n        $cvData = [];\n\n        // still needed when publishing objects\n        $cvConfig = \\Pimcore\\CustomView\\Config::get();\n\n        if ($cvConfig) {\n            foreach ($cvConfig as $node) {\n                $tmpData = $node;\n                // backwards compatibility\n                $treeType = $tmpData['treetype'] ? $tmpData['treetype'] : 'object';\n                $rootNode = Service::getElementByPath($treeType, $tmpData['rootfolder']);\n\n                if ($rootNode) {\n                    $tmpData['rootId'] = $rootNode->getId();\n                    $tmpData['allowedClasses'] = $tmpData['classes'] ?? null;\n                    $tmpData['showroot'] = (bool)$tmpData['showroot'];\n\n                    // Check if a user has privileges to that node\n                    if ($rootNode->isAllowed('list')) {\n                        $cvData[] = $tmpData;\n                    }\n                }\n            }\n        }\n\n        $settings['customviews'] = $cvData;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public function onKernelResponseEvent(ResponseEvent $event)\n    {\n        $event->getResponse()->headers->set('X-Frame-Options', 'deny', true);\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Admin;\n\nuse Pimcore\\Bundle\\AdminBundle\\Controller\\AdminAbstractController;\nuse Pimcore\\Cache;\nuse Pimcore\\Cache\\Core\\CoreCacheHandler;\nuse Pimcore\\Cache\\Symfony\\CacheClearer;\nuse Pimcore\\Config;\nuse Pimcore\\Db;\nuse Pimcore\\Event\\SystemEvents;\nuse Pimcore\\File;\nuse Pimcore\\Helper\\StopMessengerWorkersTrait;\nuse Pimcore\\Localization\\LocaleServiceInterface;\nuse Pimcore\\Model;\nuse Pimcore\\Model\\Asset;\nuse Pimcore\\Model\\Document;\nuse Pimcore\\Model\\Element;\nuse Pimcore\\Model\\Exception\\ConfigWriteException;\nuse Pimcore\\Model\\Glossary;\nuse Pimcore\\Model\\Metadata;\nuse Pimcore\\Model\\Property;\nuse Pimcore\\Model\\Staticroute;\nuse Pimcore\\Model\\Tool\\SettingsStore;\nuse Pimcore\\Model\\WebsiteSetting;\nuse Pimcore\\Tool;\nuse Symfony\\Component\\EventDispatcher\\EventDispatcherInterface;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpFoundation\\StreamedResponse;\nuse Symfony\\Component\\HttpKernel\\Event\\TerminateEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\nuse Symfony\\Component\\HttpKernel\\KernelInterface;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Yaml\\Yaml;\nuse Symfony\\Contracts\\Translation\\TranslatorInterface;\n\n/**\n * @Route(\"/settings\")\n *\n * @internal\n */\nclass SettingsController extends AdminAbstractController\n{\n    use StopMessengerWorkersTrait;\n\n    private const CUSTOM_LOGO_PATH = 'custom-logo.image';\n\n    public function __construct(protected TranslatorInterface $translator)\n    {\n    }\n\n    /**\n     * @Route(\"/display-custom-logo\", name=\"pimcore_settings_display_custom_logo\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return StreamedResponse\n     */\n    public function displayCustomLogoAction(Request $request)\n    {\n        $mime = 'image/svg+xml';\n        if ($request->get('white')) {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-white.svg';\n        } else {\n            $logo = PIMCORE_WEB_ROOT . '/bundles/pimcoreadmin/img/logo-claim-gray.svg';\n        }\n\n        $stream = fopen($logo, 'rb');\n\n        $storage = Tool\\Storage::get('admin');\n        if ($storage->fileExists(self::CUSTOM_LOGO_PATH)) {\n            try {\n                $mime = $storage->mimeType(self::CUSTOM_LOGO_PATH);\n                $stream = $storage->readStream(self::CUSTOM_LOGO_PATH);\n            } catch (\\Exception $e) {\n                // do nothing\n            }\n        }\n\n        return new StreamedResponse(function () use ($stream) {\n            fpassthru($stream);\n        }, 200, [\n            'Content-Type' => $mime,\n            'Content-Security-Policy' => \"script-src 'none'\",\n        ]);\n    }\n\n    /**\n     * @Route(\"/upload-custom-logo\", name=\"pimcore_admin_settings_uploadcustomlogo\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function uploadCustomLogoAction(Request $request)\n    {\n        $logoFile = $request->files->get('Filedata');\n\n        if (!$logoFile instanceof UploadedFile\n            || !in_array($logoFile->guessExtension(), ['svg', 'png', 'jpg'])\n        ) {\n            throw new \\Exception('Unsupported file format.');\n        }\n\n        $storage = Tool\\Storage::get('admin');\n        $storage->writeStream(self::CUSTOM_LOGO_PATH, fopen($logoFile->getPathname(), 'rb'));\n\n        // set content-type to text/html, otherwise (when application/json is sent) chrome will complain in\n        // Ext.form.Action.Submit and mark the submission as failed\n\n        $response = $this->adminJson(['success' => true]);\n        $response->headers->set('Content-Type', 'text/html');\n\n        return $response;\n    }\n\n    /**\n     * @Route(\"/delete-custom-logo\", name=\"pimcore_admin_settings_deletecustomlogo\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteCustomLogoAction(Request $request)\n    {\n        if (Tool\\Storage::get('admin')->fileExists(self::CUSTOM_LOGO_PATH)) {\n            Tool\\Storage::get('admin')->delete(self::CUSTOM_LOGO_PATH);\n        }\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * Used by the predefined metadata grid\n     *\n     * @Route(\"/predefined-metadata\", name=\"pimcore_admin_settings_metadata\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function metadataAction(Request $request)\n    {\n        $this->checkPermission('asset_metadata');\n\n        if ($request->get('data')) {\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $metadata = Metadata\\Predefined::getById($id);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $metadata = Metadata\\Predefined::getById($data['id']);\n                if (!$metadata->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem && $existingItem->getId() != $metadata->getId()) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->minimize();\n                $metadata->save();\n                $metadata->expand();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Metadata\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $metadata = Metadata\\Predefined::create();\n\n                $metadata->setValues($data);\n\n                $existingItem = Metadata\\Predefined\\Listing::getByKeyAndLanguage($metadata->getName(), $metadata->getLanguage(), $metadata->getTargetSubtype());\n                if ($existingItem) {\n                    return $this->adminJson(['message' => 'rule_violation', 'success' => false]);\n                }\n\n                $metadata->save();\n\n                $responseData = $metadata->getObjectVars();\n                $responseData['writeable'] = $metadata->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Metadata\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Metadata\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getDefinitions() as $metadata) {\n                $metadata->expand();\n                $data = $metadata->getObjectVars();\n                $data['writeable'] = $metadata->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-predefined-metadata\", name=\"pimcore_admin_settings_getpredefinedmetadata\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getPredefinedMetadataAction(Request $request)\n    {\n        $type = $request->get('type');\n        $subType = $request->get('subType');\n        $group = $request->get('group');\n        $list = Metadata\\Predefined\\Listing::getByTargetType($type, [$subType]);\n        $result = [];\n        foreach ($list as $item) {\n            $itemGroup = $item->getGroup() ?? '';\n            if ($group === 'default' || $group === $itemGroup) {\n                $item->expand();\n                $data = $item->getObjectVars();\n                $data['writeable'] = $item->isWriteable();\n                $result[] = $data;\n            }\n        }\n\n        return $this->adminJson(['data' => $result, 'success' => true]);\n    }\n\n    /**\n     * @Route(\"/properties\", name=\"pimcore_admin_settings_properties\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function propertiesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('predefined_properties');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $property = Property\\Predefined::getById($id);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $property->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save type\n                $property = Property\\Predefined::getById($data['id']);\n                if (!$property->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                if (is_array($data['ctype'])) {\n                    $data['ctype'] = implode(',', $data['ctype']);\n                }\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Property\\Predefined())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save type\n                $property = Property\\Predefined::create();\n                $property->setValues($data);\n\n                $property->save();\n\n                $responseData = $property->getObjectVars();\n                $responseData['writeable'] = $property->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of types\n            $list = new Property\\Predefined\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Property\\Predefined $predefined) use ($filter) {\n                    foreach ($predefined->getObjectVars() as $value) {\n                        if ($value) {\n                            $cellValues = is_array($value) ? $value : [$value];\n\n                            foreach ($cellValues as $cellValue) {\n                                if (stripos((string)$cellValue, $filter) !== false) {\n                                    return true;\n                                }\n                            }\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $properties = [];\n            foreach ($list->getProperties() as $property) {\n                $data = $property->getObjectVars();\n                $data['writeable'] = $property->isWriteable();\n                $properties[] = $data;\n            }\n\n            return $this->adminJson(['data' => $properties, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-system\", name=\"pimcore_admin_settings_getsystem\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param Config $config\n     *\n     * @return JsonResponse\n     */\n    public function getSystemAction(Request $request, Config $config)\n    {\n        $this->checkPermission('system_settings');\n\n        $valueArray = [\n            'general' => $config['general'],\n            'documents' => $config['documents'],\n            'assets' => $config['assets'],\n            'objects' => $config['objects'],\n            'branding' => $config['branding'],\n            'email' => $config['email'],\n        ];\n\n        $locales = Tool::getSupportedLocales();\n        $languageOptions = [];\n        $validLanguages = [];\n        foreach ($locales as $short => $translation) {\n            if (!empty($short)) {\n                $languageOptions[] = [\n                    'language' => $short,\n                    'display' => $translation . \" ($short)\",\n                ];\n                $validLanguages[] = $short;\n            }\n        }\n\n        $valueArray['general']['valid_language'] = explode(',', $valueArray['general']['valid_languages']);\n\n        //for \"wrong\" legacy values\n        foreach ($valueArray['general']['valid_language'] as $existingValue) {\n            if (!in_array($existingValue, $validLanguages)) {\n                $languageOptions[] = [\n                    'language' => $existingValue,\n                    'display' => $existingValue,\n                ];\n            }\n        }\n\n        $response = [\n            'values' => $valueArray,\n            'config' => [\n                'languages' => $languageOptions,\n            ],\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-system\", name=\"pimcore_admin_settings_setsystem\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function setSystemAction(\n        LocaleServiceInterface $localeService,\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermission('system_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        $existingValues = [];\n\n        try {\n            $file = Config::locateConfigFile('system.yml');\n            $existingValues = Config::getConfigInstance($file, true);\n        } catch (\\Exception $e) {\n            // nothing to do\n        }\n\n        // localized error pages\n        $localizedErrorPages = [];\n\n        // fallback languages\n        $fallbackLanguages = [];\n        $existingValues['pimcore']['general']['fallback_languages'] = [];\n        $languages = explode(',', $values['general.validLanguages']);\n        $filteredLanguages = [];\n\n        foreach ($languages as $language) {\n            if (isset($values['general.fallbackLanguages.' . $language])) {\n                $fallbackLanguages[$language] = str_replace(' ', '', $values['general.fallbackLanguages.' . $language]);\n            }\n\n            // localized error pages\n            if (isset($values['documents.error_pages.localized.' . $language])) {\n                $localizedErrorPages[$language] = $values['documents.error_pages.localized.' . $language];\n            }\n\n            if ($localeService->isLocale($language)) {\n                $filteredLanguages[] = $language;\n            }\n        }\n\n        // check if there's a fallback language endless loop\n        foreach ($fallbackLanguages as $sourceLang => $targetLang) {\n            $this->checkFallbackLanguageLoop($sourceLang, $fallbackLanguages);\n        }\n\n        $settings['pimcore'] = [\n            'general' => [\n                'domain' => $values['general.domain'],\n                'redirect_to_maindomain' => $values['general.redirect_to_maindomain'],\n                'language' => $values['general.language'],\n                'valid_languages' => implode(',', $filteredLanguages),\n                'fallback_languages' => $fallbackLanguages,\n                'default_language' => $values['general.defaultLanguage'],\n                'debug_admin_translations' => $values['general.debug_admin_translations'],\n            ],\n            'documents' => [\n                'versions' => [\n                    'days' => $values['documents.versions.days'] ?? null,\n                    'steps' => $values['documents.versions.steps'] ?? null,\n                ],\n                'error_pages' => [\n                    'default' => $values['documents.error_pages.default'],\n                    'localized' => $localizedErrorPages,\n                ],\n            ],\n            'objects' => [\n                'versions' => [\n                    'days' => $values['objects.versions.days'] ?? null,\n                    'steps' => $values['objects.versions.steps'] ?? null,\n                ],\n            ],\n            'assets' => [\n                'versions' => [\n                    'days' => $values['assets.versions.days'] ?? null,\n                    'steps' => $values['assets.versions.steps'] ?? null,\n                ],\n                'hide_edit_image' => $values['assets.hide_edit_image'],\n                'disable_tree_preview' => $values['assets.disable_tree_preview'],\n            ],\n        ];\n\n        //branding\n        $settings['pimcore_admin'] = [\n            'branding' =>\n                [\n                    'login_screen_invert_colors' => $values['branding.login_screen_invert_colors'],\n                    'color_login_screen' => $values['branding.color_login_screen'],\n                    'color_admin_interface' => $values['branding.color_admin_interface'],\n                    'color_admin_interface_background' => $values['branding.color_admin_interface_background'],\n                    'login_screen_custom_image' => str_replace('%', '%%', $values['branding.login_screen_custom_image']),\n                ],\n        ];\n\n        if (array_key_exists('email.debug.emailAddresses', $values) && $values['email.debug.emailAddresses']) {\n            $settings['pimcore']['email']['debug']['email_addresses'] = $values['email.debug.emailAddresses'];\n        }\n\n        $settingsYml = Yaml::dump($settings, 5);\n        $configFile = Config::locateConfigFile('system.yml');\n        File::put($configFile, $settingsYml);\n\n        // clear all caches\n        $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        $this->stopMessengerWorkers();\n\n        $eventDispatcher->addListener(KernelEvents::TERMINATE, function (TerminateEvent $event) use (\n            $cache, $eventDispatcher, $filesystem\n        ) {\n            // we need to clear the cache with a delay, because the cache is used by messenger:stop-workers\n            // to send the stop signal to all worker processes\n            sleep(2);\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        });\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @param string $source\n     * @param array $definitions\n     * @param array $fallbacks\n     *\n     * @throws \\Exception\n     */\n    protected function checkFallbackLanguageLoop($source, $definitions, $fallbacks = [])\n    {\n        if (isset($definitions[$source])) {\n            $targets = explode(',', $definitions[$source]);\n            foreach ($targets as $l) {\n                $target = trim($l);\n                if ($target) {\n                    if (in_array($target, $fallbacks)) {\n                        throw new \\Exception(\"Language `$source` | `$target` causes an infinte loop.\");\n                    }\n                    $fallbacks[] = $target;\n\n                    $this->checkFallbackLanguageLoop($target, $definitions, $fallbacks);\n                }\n            }\n        } else {\n            throw new \\Exception(\"Language `$source` doesn't exist\");\n        }\n    }\n\n    /**\n     * @Route(\"/get-web2print\", name=\"pimcore_admin_settings_getweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = Config::getWeb2PrintConfig();\n        $valueArray = $values->toArray();\n\n        $optionsString = [];\n        if ($valueArray['wkhtml2pdfOptions'] ?? false) {\n            foreach ($valueArray['wkhtml2pdfOptions'] as $key => $value) {\n                $tmpStr = '--'.$key;\n                if ($value !== null && $value !== '') {\n                    $tmpStr .= ' '.$value;\n                }\n                $optionsString[] = $tmpStr;\n            }\n        }\n        $valueArray['wkhtml2pdfOptions'] = implode(\"\\n\", $optionsString);\n\n        $response = [\n            'values' => $valueArray,\n        ];\n\n        return $this->adminJson($response);\n    }\n\n    /**\n     * @Route(\"/set-web2print\", name=\"pimcore_admin_settings_setweb2print\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function setWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $values = $this->decodeJson($request->get('data'));\n\n        unset($values['documentation']);\n        unset($values['additions']);\n        unset($values['json_converter']);\n\n        if ($values['wkhtml2pdfOptions']) {\n            $optionArray = [];\n            $lines = explode(\"\\n\", $values['wkhtml2pdfOptions']);\n            foreach ($lines as $line) {\n                $parts = explode(' ', substr($line, 2));\n                $key = trim($parts[0]);\n                if ($key) {\n                    $value = trim($parts[1] ?? '');\n                    $optionArray[$key] = $value;\n                }\n            }\n            $values['wkhtml2pdfOptions'] = $optionArray;\n        }\n\n        \\Pimcore\\Web2Print\\Config::save($values);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-cache\", name=\"pimcore_admin_settings_clearcache\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     * @param KernelInterface $kernel\n     * @param EventDispatcherInterface $eventDispatcher\n     * @param CoreCacheHandler $cache\n     * @param Filesystem $filesystem\n     * @param CacheClearer $symfonyCacheClearer\n     *\n     * @return JsonResponse\n     */\n    public function clearCacheAction(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CoreCacheHandler $cache,\n        Filesystem $filesystem,\n        CacheClearer $symfonyCacheClearer\n    ) {\n        $this->checkPermissionsHasOneOf(['clear_cache', 'system_settings']);\n\n        $result = [\n            'success' => true,\n        ];\n\n        $clearPimcoreCache = !(bool)$request->get('only_symfony_cache');\n        $clearSymfonyCache = !(bool)$request->get('only_pimcore_cache');\n\n        if ($clearPimcoreCache) {\n            $this->clearPimcoreCache($cache, $eventDispatcher, $filesystem);\n        }\n\n        if ($clearSymfonyCache) {\n            $this->clearSymfonyCache($request, $kernel, $eventDispatcher, $symfonyCacheClearer);\n        }\n\n        $response = new JsonResponse($result);\n\n        if ($clearSymfonyCache) {\n            // we send the response directly here and exit to make sure no code depending on the stale container\n            // is running after this\n            $response->sendHeaders();\n            $response->sendContent();\n            exit;\n        }\n\n        return $response;\n    }\n\n    private function clearPimcoreCache(\n        CoreCacheHandler $cache,\n        EventDispatcherInterface $eventDispatcher,\n        Filesystem $filesystem,\n    ): void {\n        // empty document cache\n        $cache->clearAll();\n\n        if ($filesystem->exists(PIMCORE_CACHE_DIRECTORY)) {\n            $filesystem->remove(PIMCORE_CACHE_DIRECTORY);\n        }\n\n        // PIMCORE-1854 - recreate .dummy file => should remain\n        File::put(PIMCORE_CACHE_DIRECTORY . '/.gitkeep', '');\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR);\n    }\n\n    private function clearSymfonyCache(\n        Request $request,\n        KernelInterface $kernel,\n        EventDispatcherInterface $eventDispatcher,\n        CacheClearer $symfonyCacheClearer,\n    ): void {\n        // pass one or move env parameters to clear multiple envs\n        // if no env is passed it will use the current one\n        $environments = $request->get('env', $kernel->getEnvironment());\n\n        if (!is_array($environments)) {\n            $environments = trim((string)$environments);\n\n            if (empty($environments)) {\n                $environments = [];\n            } else {\n                $environments = [$environments];\n            }\n        }\n\n        if (empty($environments)) {\n            $environments = [$kernel->getEnvironment()];\n        }\n\n        $result['environments'] = $environments;\n\n        if (in_array($kernel->getEnvironment(), $environments)) {\n            // remove terminate and exception event listeners for the current env as they break with a\n            // cleared container - see #2434\n            foreach ($eventDispatcher->getListeners(KernelEvents::TERMINATE) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::TERMINATE, $listener);\n            }\n\n            foreach ($eventDispatcher->getListeners(KernelEvents::EXCEPTION) as $listener) {\n                $eventDispatcher->removeListener(KernelEvents::EXCEPTION, $listener);\n            }\n        }\n\n        foreach ($environments as $environment) {\n            try {\n                $symfonyCacheClearer->clear($environment);\n            } catch (\\Throwable $e) {\n                $errors = $result['errors'] ?? [];\n                $errors[] = $e->getMessage();\n\n                $result = array_merge($result, [\n                    'success' => false,\n                    'errors' => $errors,\n                ]);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/clear-output-cache\", name=\"pimcore_admin_settings_clearoutputcache\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearOutputCacheAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_fullpage_cache');\n\n        // remove \"output\" out of the ignored tags, if a cache lifetime is specified\n        Cache::removeIgnoredTagOnClear('output');\n\n        // empty document cache\n        Cache::clearTags(['output', 'output_lifetime']);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_FULLPAGE_CACHE);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clear-temporary-files\", name=\"pimcore_admin_settings_cleartemporaryfiles\", methods={\"DELETE\"})\n     *\n     * @param EventDispatcherInterface $eventDispatcher\n     *\n     * @return JsonResponse\n     */\n    public function clearTemporaryFilesAction(EventDispatcherInterface $eventDispatcher)\n    {\n        $this->checkPermission('clear_temp_files');\n\n        // public files\n        Tool\\Storage::get('thumbnail')->deleteDirectory('/');\n        Db::get()->executeQuery('TRUNCATE TABLE assets_image_thumbnail_cache');\n\n        Tool\\Storage::get('asset_cache')->deleteDirectory('/');\n\n        // system files\n        recursiveDelete(PIMCORE_SYSTEM_TEMP_DIRECTORY, false);\n\n        $eventDispatcher->dispatch(new GenericEvent(), SystemEvents::CACHE_CLEAR_TEMPORARY_FILES);\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/staticroutes\", name=\"pimcore_admin_settings_staticroutes\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function staticroutesAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('routes');\n\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    if (is_string($value)) {\n                        $value = trim($value);\n                    }\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $route = Staticroute::getById($id);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                $route->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $route = Staticroute::getById($data['id']);\n                if (!$route->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n\n                $route->setValues($data);\n\n                $route->save();\n\n                return $this->adminJson(['data' => $route->getObjectVars(), 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                if (!(new Staticroute())->isWriteable()) {\n                    throw new ConfigWriteException();\n                }\n                unset($data['id']);\n\n                // save route\n                $route = new Staticroute();\n                $route->setValues($data);\n\n                $route->save();\n\n                $responseData = $route->getObjectVars();\n                $responseData['writeable'] = $route->isWriteable();\n\n                return $this->adminJson(['data' => $responseData, 'success' => true]);\n            }\n        } else {\n            // get list of routes\n\n            $list = new Staticroute\\Listing();\n\n            if ($filter = $request->get('filter')) {\n                $list->setFilter(function (Staticroute $staticRoute) use ($filter) {\n                    foreach ($staticRoute->getObjectVars() as $value) {\n                        if (!is_scalar($value)) {\n                            continue;\n                        }\n                        if (stripos((string)$value, $filter) !== false) {\n                            return true;\n                        }\n                    }\n\n                    return false;\n                });\n            }\n\n            $routes = [];\n            foreach ($list->getRoutes() as $routeFromList) {\n                $route = $routeFromList->getObjectVars();\n                $route['writeable'] = $routeFromList->isWriteable();\n                if (is_array($routeFromList->getSiteId())) {\n                    $route['siteId'] = implode(',', $routeFromList->getSiteId());\n                }\n                $routes[] = $route;\n            }\n\n            return $this->adminJson(['data' => $routes, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-admin-languages\", name=\"pimcore_admin_settings_getavailableadminlanguages\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAdminLanguagesAction(Request $request)\n    {\n        $langs = [];\n        $availableLanguages = Tool\\Admin::getLanguages();\n        $locales = Tool::getSupportedLocales();\n\n        foreach ($availableLanguages as $lang) {\n            if (array_key_exists($lang, $locales)) {\n                $langs[] = [\n                    'language' => $lang,\n                    'display' => $locales[$lang],\n                ];\n            }\n        }\n\n        usort($langs, function ($a, $b) {\n            return strcmp($a['display'], $b['display']);\n        });\n\n        return $this->adminJson($langs);\n    }\n\n    /**\n     * @Route(\"/glossary\", name=\"pimcore_admin_settings_glossary\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function glossaryAction(Request $request)\n    {\n        if ($request->get('data')) {\n            $this->checkPermission('glossary');\n\n            Cache::clearTag('glossary');\n\n            if ($request->get('xaction') == 'destroy') {\n                $data = $this->decodeJson($request->get('data'));\n                $id = $data['id'];\n                $glossary = Glossary::getById($id);\n                $glossary->delete();\n\n                return $this->adminJson(['success' => true, 'data' => []]);\n            } elseif ($request->get('xaction') == 'update') {\n                $data = $this->decodeJson($request->get('data'));\n\n                // save glossary\n                $glossary = Glossary::getById($data['id']);\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary, 'success' => true]);\n            } elseif ($request->get('xaction') == 'create') {\n                $data = $this->decodeJson($request->get('data'));\n                unset($data['id']);\n\n                // save glossary\n                $glossary = new Glossary();\n\n                if (!empty($data['link'])) {\n                    if ($doc = Document::getByPath($data['link'])) {\n                        $data['link'] = $doc->getId();\n                    }\n                }\n\n                $glossary->setValues($data);\n\n                $glossary->save();\n\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                return $this->adminJson(['data' => $glossary->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            // get list of glossaries\n\n            $list = new Glossary\\Listing();\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`text` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $list->load();\n\n            $glossaries = [];\n            foreach ($list->getGlossary() as $glossary) {\n                if ($link = $glossary->getLink()) {\n                    if ((int)$link > 0) {\n                        if ($doc = Document::getById((int)$link)) {\n                            $glossary->setLink($doc->getRealFullPath());\n                        }\n                    }\n                }\n\n                $glossaries[] = $glossary->getObjectVars();\n            }\n\n            return $this->adminJson(['data' => $glossaries, 'success' => true, 'total' => $list->getTotalCount()]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @Route(\"/get-available-sites\", name=\"pimcore_admin_settings_getavailablesites\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableSitesAction(Request $request)\n    {\n        // we need to check documents permission for listing purposes in sites ext model & url-slugs\n        $this->checkPermission('documents');\n\n        $excludeMainSite = $request->get('excludeMainSite');\n\n        $sitesList = new Model\\Site\\Listing();\n        $sitesObjects = $sitesList->load();\n        $sites = [];\n        if (!$excludeMainSite) {\n            $sites[] = [\n                'id' => 'default',\n                'rootId' => 1,\n                'domains' => '',\n                'rootPath' => '/',\n                'domain' => $this->translator->trans('main_site'),\n            ];\n        }\n\n        foreach ($sitesObjects as $site) {\n            if ($site->getRootDocument()) {\n                if ($site->getMainDomain()) {\n                    $sites[] = [\n                        'id' => $site->getId(),\n                        'rootId' => $site->getRootId(),\n                        'domains' => implode(',', $site->getDomains()),\n                        'rootPath' => $site->getRootPath(),\n                        'domain' => $site->getMainDomain(),\n                    ];\n                }\n            } else {\n                // site is useless, parent doesn't exist anymore\n                $site->delete();\n            }\n        }\n\n        return $this->adminJson($sites);\n    }\n\n    /**\n     * @Route(\"/get-available-countries\", name=\"pimcore_admin_settings_getavailablecountries\", methods={\"GET\"})\n     *\n     * @param LocaleServiceInterface $localeService\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableCountriesAction(LocaleServiceInterface $localeService)\n    {\n        $countries = $localeService->getDisplayRegions();\n        asort($countries);\n\n        $options = [];\n\n        foreach ($countries as $short => $translation) {\n            if (strlen($short) == 2) {\n                $options[] = [\n                    'key' => $translation . ' (' . $short . ')',\n                    'value' => $short,\n                ];\n            }\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * @Route(\"/thumbnail-adapter-check\", name=\"pimcore_admin_settings_thumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function thumbnailAdapterCheckAction(Request $request, TranslatorInterface $translator)\n    {\n        $content = '';\n\n        $instance = \\Pimcore\\Image::getInstance();\n        if ($instance instanceof \\Pimcore\\Image\\Adapter\\GD) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $translator->trans('important_use_imagick_pecl_extensions_for_best_results_gd_is_just_a_fallback_with_less_quality', [], 'admin') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/thumbnail-tree\", name=\"pimcore_admin_settings_thumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_thumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_thumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-downloadable\", name=\"pimcore_admin_settings_thumbnaildownloadable\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDownloadableAction()\n    {\n        $thumbnails = [];\n\n        $list = new Asset\\Image\\Thumbnail\\Config\\Listing();\n        $list->setFilter(function (Asset\\Image\\Thumbnail\\Config $config) {\n            return $config->isDownloadable();\n        });\n\n        foreach ($list->getThumbnails() as $item) {\n            $thumbnails[] = [\n                'id' => $item->getName(),\n                'text' => $item->getName(),\n            ];\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/thumbnail-add\", name=\"pimcore_admin_settings_thumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Image\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-delete\", name=\"pimcore_admin_settings_thumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/thumbnail-get\", name=\"pimcore_admin_settings_thumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/thumbnail-update\", name=\"pimcore_admin_settings_thumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function thumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Image\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            if (preg_match('/[\"<>]/', $mediaName)) {\n                throw new \\Exception('Invalid media query name');\n            }\n\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, $mediaName);\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-adapter-check\", name=\"pimcore_admin_settings_videothumbnailadaptercheck\", methods={\"GET\"})\n     *\n     * @param Request $request\n     * @param TranslatorInterface $translator\n     *\n     * @return Response\n     */\n    public function videoThumbnailAdapterCheckAction(Request $request, TranslatorInterface $translator)\n    {\n        $content = '';\n\n        if (!\\Pimcore\\Video::isAvailable()) {\n            $content = '<span style=\"color: red; font-weight: bold;padding: 10px;margin:0 0 20px 0;border:1px solid red;display:block;\">' .\n                $translator->trans('php_cli_binary_and_or_ffmpeg_binary_setting_is_missing', [], 'admin') .\n                '</span>';\n        }\n\n        return new Response($content);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-tree\", name=\"pimcore_admin_settings_videothumbnailtree\", methods={\"GET\", \"POST\"})\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailTreeAction()\n    {\n        $this->checkPermission('thumbnails');\n\n        $thumbnails = [];\n\n        $list = new Asset\\Video\\Thumbnail\\Config\\Listing();\n\n        $groups = [];\n        foreach ($list->getThumbnails() as $item) {\n            if ($item->getGroup()) {\n                if (empty($groups[$item->getGroup()])) {\n                    $groups[$item->getGroup()] = [\n                        'id' => 'group_' . $item->getName(),\n                        'text' => htmlspecialchars($item->getGroup()),\n                        'expandable' => true,\n                        'leaf' => false,\n                        'allowChildren' => true,\n                        'iconCls' => 'pimcore_icon_folder',\n                        'group' => $item->getGroup(),\n                        'children' => [],\n                    ];\n                }\n                $groups[$item->getGroup()]['children'][] =\n                    [\n                        'id' => $item->getName(),\n                        'text' => $item->getName(),\n                        'leaf' => true,\n                        'iconCls' => 'pimcore_icon_videothumbnails',\n                        'cls' => 'pimcore_treenode_disabled',\n                        'writeable' => $item->isWriteable(),\n                    ];\n            } else {\n                $thumbnails[] = [\n                    'id' => $item->getName(),\n                    'text' => $item->getName(),\n                    'leaf' => true,\n                    'iconCls' => 'pimcore_icon_videothumbnails',\n                    'cls' => 'pimcore_treenode_disabled',\n                    'writeable' => $item->isWriteable(),\n                ];\n            }\n        }\n\n        foreach ($groups as $group) {\n            $thumbnails[] = $group;\n        }\n\n        return $this->adminJson($thumbnails);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-add\", name=\"pimcore_admin_settings_videothumbnailadd\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailAddAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $success = false;\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe) {\n            $pipe = new Asset\\Video\\Thumbnail\\Config();\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n\n            $pipe->setName($request->get('name'));\n            $pipe->save();\n\n            $success = true;\n        } else {\n            if (!$pipe->isWriteable()) {\n                throw new ConfigWriteException();\n            }\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $pipe->getName()]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-delete\", name=\"pimcore_admin_settings_videothumbnaildelete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailDeleteAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $pipe->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-get\", name=\"pimcore_admin_settings_videothumbnailget\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailGetAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        $data = $pipe->getObjectVars();\n        $data['writeable'] = $pipe->isWriteable();\n\n        return $this->adminJson($data);\n    }\n\n    /**\n     * @Route(\"/video-thumbnail-update\", name=\"pimcore_admin_settings_videothumbnailupdate\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function videoThumbnailUpdateAction(Request $request)\n    {\n        $this->checkPermission('thumbnails');\n\n        $pipe = Asset\\Video\\Thumbnail\\Config::getByName($request->get('name'));\n\n        if (!$pipe->isWriteable()) {\n            throw new ConfigWriteException();\n        }\n\n        $settingsData = $this->decodeJson($request->get('settings'));\n        $mediaData = $this->decodeJson($request->get('medias'));\n        $mediaOrder = $this->decodeJson($request->get('mediaOrder'));\n\n        foreach ($settingsData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($pipe, $setter)) {\n                $pipe->$setter($value);\n            }\n        }\n\n        $pipe->resetItems();\n\n        uksort($mediaData, function ($a, $b) use ($mediaOrder) {\n            if ($a === 'default') {\n                return -1;\n            }\n\n            return ($mediaOrder[$a] < $mediaOrder[$b]) ? -1 : 1;\n        });\n\n        foreach ($mediaData as $mediaName => $items) {\n            foreach ($items as $item) {\n                $type = $item['type'];\n                unset($item['type']);\n\n                $pipe->addItem($type, $item, htmlspecialchars($mediaName));\n            }\n        }\n\n        $pipe->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtget\", methods={\"GET\"})\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtGetAction()\n    {\n        $this->checkPermission('robots.txt');\n\n        $config = Config::getRobotsConfig();\n        $config = $config->toArray();\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $config,\n            'onFileSystem' => file_exists(PIMCORE_WEB_ROOT . '/robots.txt'),\n        ]);\n    }\n\n    /**\n     * @Route(\"/robots-txt\", name=\"pimcore_admin_settings_robotstxtput\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function robotsTxtPutAction(Request $request)\n    {\n        $this->checkPermission('robots.txt');\n\n        $values = $request->get('data');\n        if (!is_array($values)) {\n            $values = [];\n        }\n\n        foreach ($values as $siteId => $robotsContent) {\n            SettingsStore::set('robots.txt-' . $siteId, $robotsContent, 'string', 'robots.txt');\n        }\n\n        return $this->adminJson([\n            'success' => true,\n        ]);\n    }\n\n    /**\n     * @Route(\"/website-settings\", name=\"pimcore_admin_settings_websitesettings\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     *\n     * @throws \\Exception\n     */\n    public function websiteSettingsAction(Request $request)\n    {\n        $this->checkPermission('website_settings');\n\n        if ($request->get('data')) {\n            $data = $this->decodeJson($request->get('data'));\n\n            if (is_array($data)) {\n                foreach ($data as &$value) {\n                    $value = trim($value);\n                }\n            }\n\n            if ($request->get('xaction') == 'destroy') {\n                $id = $data['id'];\n                $setting = WebsiteSetting::getById($id);\n                if ($setting instanceof WebsiteSetting) {\n                    $setting->delete();\n\n                    return $this->adminJson(['success' => true, 'data' => []]);\n                }\n            } elseif ($request->get('xaction') == 'update') {\n                // save routes\n                $setting = WebsiteSetting::getById($data['id']);\n                if ($setting instanceof WebsiteSetting) {\n                    switch ($setting->getType()) {\n                        case 'document':\n                        case 'asset':\n                        case 'object':\n                            if (isset($data['data'])) {\n                                $element = Element\\Service::getElementByPath($setting->getType(), $data['data']);\n                                $data['data'] = $element;\n                            }\n\n                            break;\n                    }\n\n                    $setting->setValues($data);\n                    $setting->save();\n\n                    $data = $this->getWebsiteSettingForEditMode($setting);\n\n                    return $this->adminJson(['data' => $data, 'success' => true]);\n                }\n            } elseif ($request->get('xaction') == 'create') {\n                unset($data['id']);\n\n                // save route\n                $setting = new WebsiteSetting();\n                $setting->setValues($data);\n\n                $setting->save();\n\n                return $this->adminJson(['data' => $setting->getObjectVars(), 'success' => true]);\n            }\n        } else {\n            $list = new WebsiteSetting\\Listing();\n\n            $list->setLimit($request->get('limit'));\n            $list->setOffset($request->get('start'));\n\n            $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n            if ($sortingSettings['orderKey']) {\n                $list->setOrderKey($sortingSettings['orderKey']);\n                $list->setOrder($sortingSettings['order']);\n            } else {\n                $list->setOrderKey('name');\n                $list->setOrder('asc');\n            }\n\n            if ($request->get('filter')) {\n                $list->setCondition('`name` LIKE ' . $list->quote('%'.$request->get('filter').'%'));\n            }\n\n            $totalCount = $list->getTotalCount();\n            $list = $list->load();\n\n            $settings = [];\n            foreach ($list as $item) {\n                $resultItem = $this->getWebsiteSettingForEditMode($item);\n                $settings[] = $resultItem;\n            }\n\n            return $this->adminJson(['data' => $settings, 'success' => true, 'total' => $totalCount]);\n        }\n\n        return $this->adminJson(['success' => false]);\n    }\n\n    /**\n     * @param WebsiteSetting $item\n     *\n     * @return array\n     */\n    private function getWebsiteSettingForEditMode($item)\n    {\n        $resultItem = [\n            'id' => $item->getId(),\n            'name' => $item->getName(),\n            'language' => $item->getLanguage(),\n            'type' => $item->getType(),\n            'data' => null,\n            'siteId' => $item->getSiteId(),\n            'creationDate' => $item->getCreationDate(),\n            'modificationDate' => $item->getModificationDate(),\n        ];\n\n        switch ($item->getType()) {\n            case 'document':\n            case 'asset':\n            case 'object':\n                $element = $item->getData();\n                if ($element) {\n                    $resultItem['data'] = $element->getRealFullPath();\n                }\n\n                break;\n            default:\n                $resultItem['data'] = $item->getData();\n\n                break;\n        }\n\n        return $resultItem;\n    }\n\n    /**\n     * @Route(\"/get-available-algorithms\", name=\"pimcore_admin_settings_getavailablealgorithms\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAvailableAlgorithmsAction(Request $request)\n    {\n        $options = [\n            [\n                'key' => 'password_hash',\n                'value' => 'password_hash',\n            ],\n        ];\n\n        $algorithms = hash_algos();\n        foreach ($algorithms as $algorithm) {\n            $options[] = [\n                'key' => $algorithm,\n                'value' => $algorithm,\n            ];\n        }\n\n        $result = ['data' => $options, 'success' => true, 'total' => count($options)];\n\n        return $this->adminJson($result);\n    }\n\n    /**\n     * deleteViews\n     * delete views for localized fields when languages are removed to\n     * prevent mysql errors\n     *\n     * @param string $language\n     * @param string $dbName\n     */\n    protected function deleteViews($language, $dbName)\n    {\n        $db = \\Pimcore\\Db::get();\n        $views = $db->fetchAllAssociative('SHOW FULL TABLES IN ' . $db->quoteIdentifier($dbName) . \" WHERE TABLE_TYPE LIKE 'VIEW'\");\n\n        foreach ($views as $view) {\n            if (preg_match('/^object_localized_[0-9]+_' . $language . '$/', $view['Tables_in_' . $dbName])) {\n                $sql = 'DROP VIEW ' . $db->quoteIdentifier($view['Tables_in_' . $dbName]);\n                $db->executeQuery($sql);\n            }\n        }\n    }\n\n    /**\n     * @Route(\"/test-web2print\", name=\"pimcore_admin_settings_testweb2print\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return Response\n     */\n    public function testWeb2printAction(Request $request)\n    {\n        $this->checkPermission('web2print_settings');\n\n        $response = $this->render('@PimcoreAdmin/Admin/Settings/testWeb2print.html.twig');\n        $html = $response->getContent();\n\n        $adapter = \\Pimcore\\Web2Print\\Processor::getInstance();\n        $params = [];\n\n        if ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\WkHtmlToPdf) {\n            $params['adapterConfig'] = '-O landscape';\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\PdfReactor) {\n            $params['adapterConfig'] = [\n                'javaScriptMode' => 0,\n                'addLinks' => true,\n                'appendLog' => true,\n                'enableDebugMode' => true,\n            ];\n        } elseif ($adapter instanceof \\Pimcore\\Web2Print\\Processor\\HeadlessChrome) {\n            $params = Config::getWeb2PrintConfig();\n            $params = $params->get('headlessChromeSettings');\n            $params = json_decode($params, true);\n        }\n\n        $responseOptions = [\n            'Content-Type' => 'application/pdf',\n        ];\n\n        $pdfData = $adapter->getPdfFromString($html, $params);\n\n        return new \\Symfony\\Component\\HttpFoundation\\Response(\n            $pdfData,\n            200,\n            $responseOptions\n\n        );\n    }\n}\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\n// debug\nif (typeof console == \"undefined\") {\n    console = {\n        log: function (v) {\n        },\n        dir: function (v) {\n        },\n        debug: function (v) {\n        },\n        info: function (v) {\n        },\n        warn: function (v) {\n        },\n        error: function (v) {\n        },\n        trace: function (v) {\n        },\n        group: function (v) {\n        },\n        groupEnd: function (v) {\n        },\n        time: function (v) {\n        },\n        timeEnd: function (v) {\n        },\n        profile: function (v) {\n        },\n        profileEnd: function (v) {\n        }\n    };\n}\n\nvar xhrActive = 0; // number of active xhr requests\n\nExt.Loader.setConfig({\n    enabled: true\n});\nExt.enableAriaButtons = false;\n\nExt.Loader.setPath('Ext.ux', '/bundles/pimcoreadmin/extjs/ext-ux/src/classic/src');\n\nExt.require([\n    'Ext.ux.colorpick.Field',\n    'Ext.ux.colorpick.SliderAlpha',\n    'Ext.ux.form.MultiSelect',\n    'Ext.ux.TabCloseMenu',\n    'Ext.ux.TabReorderer',\n    'Ext.ux.grid.SubTable',\n    'Ext.window.Toast',\n    'Ext.slider.Single',\n    'Ext.form.field.Tag',\n    'Ext.ux.TabMiddleButtonClose'\n]);\n\nExt.ariaWarn = Ext.emptyFn;\n\nExt.onReady(function () {\n\n    pimcore.helpers.colorpicker.initOverrides();\n\n    var StateFullProvider = Ext.extend(Ext.state.Provider, {\n        namespace: \"default\",\n\n        constructor: function (config) {\n            StateFullProvider.superclass.constructor.call(this);\n            Ext.apply(this, config);\n\n            var data = localStorage.getItem(this.namespace);\n            if (!data) {\n                this.state = {};\n            } else {\n                data = JSON.parse(data);\n                if (data.state && data.user == pimcore.currentuser.id) {\n                    this.state = data.state;\n                } else {\n                    this.state = {};\n                }\n            }\n        },\n\n        get: function (name, defaultValue) {\n            try {\n                if (typeof this.state[name] == \"undefined\") {\n                    return defaultValue\n                } else {\n                    return this.decodeValue(this.state[name])\n                }\n            } catch (e) {\n                this.clear(name);\n                return defaultValue;\n            }\n        },\n        set: function (name, value) {\n            try {\n                if (typeof value == \"undefined\" || value === null) {\n                    this.clear(name);\n                    return;\n                }\n                this.state[name] = this.encodeValue(value)\n\n                var data = {\n                    state: this.state,\n                    user: pimcore.currentuser.id\n                };\n                var json = JSON.stringify(data);\n\n                localStorage.setItem(this.namespace, json);\n            } catch (e) {\n                this.clear(name);\n            }\n\n            this.fireEvent(\"statechange\", this, name, value);\n        }\n    });\n\n\n    var provider = new StateFullProvider({\n        namespace: \"pimcore_ui_states_6\"\n    });\n\n    Ext.state.Manager.setProvider(provider);\n\n    // confirmation to close pimcore\n    window.addEventListener('beforeunload', function () {\n        // set this here as a global so that eg. the editmode can access this (edit::iframeOnbeforeunload()),\n        // to prevent multiple warning messages to be shown\n        pimcore.globalmanager.add(\"pimcore_reload_in_progress\", true);\n\n        if (!pimcore.settings.devmode) {\n            // check for opened tabs and if the user has configured the warnings\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            var user = pimcore.globalmanager.get(\"user\");\n            if (pimcore.settings.showCloseConfirmation && tabPanel.items.getCount() > 0 && user[\"closeWarning\"]) {\n                return t(\"do_you_really_want_to_close_pimcore\");\n            }\n        }\n\n        var openTabs = pimcore.helpers.getOpenTab();\n        if(openTabs.length > 0) {\n            var elementsToBeUnlocked = [];\n            for (var i = 0; i < openTabs.length; i++) {\n                var elementIdentifier = openTabs[i].split(\"_\");\n                if(['object', 'asset', 'document'].indexOf(elementIdentifier[0]) > -1) {\n                    elementsToBeUnlocked.push({ id: elementIdentifier[1], type: elementIdentifier[0] });\n                }\n            }\n\n            if(elementsToBeUnlocked.length > 0) {\n                navigator.sendBeacon(Routing.generate('pimcore_admin_element_unlockelements')+'?csrfToken='+ pimcore.settings['csrfToken'], JSON.stringify({ elements: elementsToBeUnlocked }));\n            }\n        }\n    });\n\n    Ext.QuickTips.init();\n    Ext.MessageBox.minPromptWidth = 500;\n\n    Ext.Ajax.setDisableCaching(true);\n    Ext.Ajax.setTimeout(900000);\n    Ext.Ajax.setMethod(\"GET\");\n    Ext.Ajax.setDefaultHeaders({\n        'X-pimcore-csrf-token': pimcore.settings[\"csrfToken\"],\n        'X-pimcore-extjs-version-major': Ext.getVersion().getMajor(),\n        'X-pimcore-extjs-version-minor': Ext.getVersion().getMinor()\n    });\n    Ext.Ajax.on('requestexception', function (conn, response, options) {\n        if(response.aborted){\n            console.log(\"xhr request to \" + options.url + \" aborted\");\n        }else{\n            console.error(\"xhr request to \" + options.url + \" failed\");\n        }\n\n        var jsonData = response.responseJson;\n        if (!jsonData) {\n            try {\n                jsonData = JSON.parse(response.responseText);\n            } catch (e) {\n\n            }\n        }\n\n        var date = new Date();\n        var errorMessage = \"Timestamp: \" + date.toString() + \"\\n\";\n        var errorDetailMessage = \"\\n\" + response.responseText;\n\n        try {\n            errorMessage += \"Status: \" + response.status + \" | \" + response.statusText + \"\\n\";\n            errorMessage += \"URL: \" + options.url + \"\\n\";\n\n            if (options[\"params\"] && options[\"params\"].length > 0) {\n                errorMessage += \"Params:\\n\";\n                Ext.iterate(options.params, function (key, value) {\n                    errorMessage += (\"-> \" + key + \": \" + value.substr(0, 500) + \"\\n\");\n                });\n            }\n\n            if (options[\"method\"]) {\n                errorMessage += \"Method: \" + options.method + \"\\n\";\n            }\n\n            if(jsonData) {\n                if (jsonData['message']) {\n                    errorDetailMessage = jsonData['message'];\n                }\n\n                if(jsonData['traceString']) {\n                    errorDetailMessage += \"\\nTrace: \\n\" + jsonData['traceString'];\n                }\n            }\n\n            errorMessage += \"Message: \" + errorDetailMessage;\n        } catch (e) {\n            errorMessage += \"\\n\\n\";\n            errorMessage += response.responseText;\n        }\n\n        if (!response.aborted && options[\"ignoreErrors\"] !== true) {\n            if (response.status === 503) {\n                //show wait info\n                if (!pimcore.maintenanceWindow) {\n                    pimcore.maintenanceWindow = new Ext.Window({\n                        closable: false,\n                        title: t(\"please_wait\"),\n                        bodyStyle: \"padding: 20px;\",\n                        html: t(\"the_system_is_in_maintenance_mode_please_wait\"),\n                        closeAction: \"close\",\n                        modal: true,\n                        listeners: {\n                            show: function () {\n                                window.setInterval(function () {\n                                    Ext.Ajax.request({\n                                        url: Routing.generate('pimcore_admin_misc_ping'),\n                                        success: function (response) {\n                                            if (pimcore.maintenanceWindow) {\n                                                pimcore.maintenanceWindow.close();\n                                                window.setTimeout(function () {\n                                                    delete pimcore.maintenanceWindow;\n                                                }, 2000);\n                                                pimcore.viewport.updateLayout();\n                                            }\n                                        }\n                                    });\n                                }, 30000);\n                            }\n                        }\n\n                    });\n                    pimcore.viewport.add(pimcore.maintenanceWindow);\n                    pimcore.maintenanceWindow.show();\n                }\n            } else if(jsonData && jsonData['type'] === 'ValidationException') {\n                pimcore.helpers.showNotification(t(\"validation_failed\"), jsonData['message'], \"error\", errorMessage);\n            } else if(jsonData && jsonData['type'] === 'ConfigWriteException') {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"config_not_writeable\"), \"error\", errorMessage);\n            } else if (response.status === 403) {\n                pimcore.helpers.showNotification(t(\"access_denied\"), t(\"access_denied_description\"), \"error\");\n            } else if (response.status === 500) {\n                pimcore.helpers.showNotification(t(\"error\"), t(\"error_general\"), \"error\", errorMessage);\n            } else {\n                let message = t(\"error\");\n                if (jsonData && jsonData['message']) {\n                    message = jsonData['message'];\n                }\n\n                pimcore.helpers.showNotification(t(\"error\"), message, \"error\", errorMessage);\n            }\n        }\n\n        xhrActive--;\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").hide();\n        }\n\n    });\n    Ext.Ajax.on(\"beforerequest\", function () {\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").show();\n        }\n        xhrActive++;\n    });\n    Ext.Ajax.on(\"requestcomplete\", function (conn, response, options) {\n        xhrActive--;\n        if (xhrActive < 1) {\n            Ext.get(\"pimcore_loading\").hide();\n        }\n    });\n\n    var user = new pimcore.user(pimcore.currentuser);\n    pimcore.globalmanager.add(\"user\", user);\n\n    // document types\n    Ext.define('pimcore.model.doctypes', {\n        extend: 'Ext.data.Model',\n        fields: [\n            'id',\n            {name: 'name', allowBlank: false},\n            {\n                name: \"translatedName\",\n                convert: function (v, rec) {\n                    return t(rec.data.name);\n                },\n                depends : ['name']\n            },\n            'group',\n            {\n                name: \"translatedGroup\",\n                convert: function (v, rec) {\n                    if (rec.data.group) {\n                        return t(rec.data.group);\n                    }\n                    return '';\n                },\n                depends : ['group']\n            },\n            'controller',\n            'template',\n            {name: 'type', allowBlank: false},\n            'priority',\n            'creationDate',\n            'modificationDate'\n        ],\n        autoSync: false,\n        proxy: {\n            type: 'ajax',\n            reader: {\n                type: 'json',\n                totalProperty: 'total',\n                successProperty: 'success',\n                rootProperty: 'data'\n            },\n            writer: {\n                type: 'json',\n                writeAllFields: true,\n                rootProperty: 'data',\n                encode: 'true',\n                // DocumentController's method expects single items, ExtJs amy batch them without this setting\n                batchActions: false\n            },\n            api: {\n                create: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"create\"}),\n                read: Routing.generate('pimcore_admin_document_document_doctypesget', {xaction: \"read\"}),\n                update: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"update\"}),\n                destroy: Routing.generate('pimcore_admin_document_document_doctypes', {xaction: \"destroy\"}),\n            }\n        }\n    });\n\n    if (user.isAllowed(\"documents\") || user.isAllowed(\"users\")) {\n        var store = new Ext.data.Store({\n            id: 'doctypes',\n            model: 'pimcore.model.doctypes',\n            remoteSort: false,\n            autoSync: true,\n            autoLoad: true\n        });\n\n        pimcore.globalmanager.add(\"document_types_store\", store);\n        pimcore.globalmanager.add(\"document_valid_types\", [\"page\",\"snippet\",\"email\",\"newsletter\",\"link\",\"hardlink\",\"printpage\",\"printcontainer\"]);\n    }\n\n    //search element types\n    pimcore.globalmanager.add(\"document_search_types\", [\"page\", \"snippet\", \"folder\", \"link\", \"hardlink\", \"email\", \"newsletter\"]);\n    pimcore.globalmanager.add(\"asset_search_types\", [\"folder\", \"image\", \"text\", \"audio\", \"video\", \"document\", \"archive\", \"unknown\"]);\n    pimcore.globalmanager.add(\"object_search_types\", [\"object\", \"folder\", \"variant\"]);\n\n    //translation admin keys\n    pimcore.globalmanager.add(\"translations_admin_missing\", []);\n    pimcore.globalmanager.add(\"translations_admin_added\", []);\n    pimcore.globalmanager.add(\"translations_admin_translated_values\", []);\n\n\n    var objectClassFields = [\n        {name: 'id'},\n        {name: 'text', allowBlank: false},\n        {\n            name: \"translatedText\",\n            convert: function (v, rec) {\n                return t(rec.data.text);\n            },\n            depends : ['text']\n        },\n        {name: 'icon'},\n        {name: 'group'},\n        {\n            name: \"translatedGroup\",\n            convert: function (v, rec) {\n                if (rec.data.group) {\n                    return t(rec.data.group);\n                }\n                return '';\n            },\n            depends : ['group']\n        },\n        {name: \"propertyVisibility\"}\n    ];\n\n    Ext.define('pimcore.model.objecttypes', {\n        extend: 'Ext.data.Model',\n        fields: objectClassFields,\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_dataobject_class_gettree'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var storeo = new Ext.data.Store({\n        model: 'pimcore.model.objecttypes',\n        id: 'object_types'\n    });\n    storeo.load();\n\n    pimcore.globalmanager.add(\"object_types_store\", storeo);\n\n\n    // a store for filtered classes that can be created by the user\n    Ext.define('pimcore.model.objecttypes.create', {\n        extend: 'Ext.data.Model',\n        fields: objectClassFields,\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_dataobject_class_gettree', {createAllowed: true}),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var storeoc = new Ext.data.Store({\n        model: 'pimcore.model.objecttypes.create',\n        id: 'object_types'\n    });\n    storeoc.load();\n\n    pimcore.globalmanager.add(\"object_types_store_create\", storeoc);\n\n    pimcore.globalmanager.add(\"perspective\", new pimcore.perspective(pimcore.settings.perspective));\n\n\n    //pimcore languages\n    Ext.define('pimcore.model.languages', {\n        extend: 'Ext.data.Model',\n        fields: [\n            {name: 'language'},\n            {name: 'display'}\n        ],\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_settings_getavailableadminlanguages'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n\n    var languageStore = new Ext.data.Store({\n        model: \"pimcore.model.languages\"\n    });\n    languageStore.load();\n    pimcore.globalmanager.add(\"pimcorelanguages\", languageStore);\n\n    Ext.define('pimcore.model.sites', {\n        extend: 'Ext.data.Model',\n        fields: [\"id\", \"domains\", \"rootId\", \"rootPath\", \"domain\"],\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_settings_getavailablesites'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    var sitesStore = new Ext.data.Store({\n        model: \"pimcore.model.sites\"\n        //restful:false,\n        //proxy:sitesProxy,\n        //reader:sitesReader\n    });\n    sitesStore.load();\n    pimcore.globalmanager.add(\"sites\", sitesStore);\n\n    // target groups\n    Ext.define('pimcore.model.target_groups', {\n        extend: 'Ext.data.Model',\n        fields: [\"id\", \"text\"]\n    });\n\n    var targetGroupStore = Ext.create('Ext.data.JsonStore', {\n        model: \"pimcore.model.target_groups\",\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_targeting_targetgrouplist'),\n            reader: {\n                type: 'json'\n            }\n        }\n    });\n\n    targetGroupStore.load();\n    pimcore.globalmanager.add(\"target_group_store\", targetGroupStore);\n\n\n    // check for updates\n    window.setTimeout(function () {\n\n        var domains = '';\n        pimcore.globalmanager.get(\"sites\").each(function (rec) {\n            if(rec.get('rootId') !== 1) {\n                if(!empty(rec.get('domain'))) {\n                    domains += rec.get('domain') + \",\";\n                }\n                if(!empty(rec.get('domains'))) {\n                    domains += rec.get('domains') + \",\";\n                }\n            }\n        });\n\n        // use vanilla javascript instead of ExtJS to bypass default error handling\n        var request = new XMLHttpRequest();\n        request.open('POST', \"https://liveupdate.pimcore.org/update-check\");\n\n        request.onload = function() {\n            if (this.status >= 200 && this.status < 400) {\n                var data = Ext.decode(this.response);\n                if (data.latestVersion) {\n                    if (pimcore.currentuser.admin) {\n\n                        pimcore.notification.helper.incrementCount();\n\n                        var toolbar = pimcore.globalmanager.get(\"layout_toolbar\");\n                        toolbar.notificationMenu.add({\n                            text: t(\"update_available\"),\n                            iconCls: \"pimcore_icon_reload\",\n                            handler: function () {\n                                var html = '<div class=\"pimcore_about_window\" xmlns=\"http://www.w3.org/1999/html\">';\n                                html += '<h2 style=\"text-decoration: underline\">New Version Available!</h2>';\n                                html += '<br><b>Your Version: ' + pimcore.settings.version + '</b>';\n                                html += '<br><b style=\"color: darkgreen;\">New Version: ' + data.latestVersion + '</b>';\n                                html += '<h3 style=\"color: darkred\">Please update as soon as possible!</h3>';\n                                html += '</div>';\n\n                                var win = new Ext.Window({\n                                    title: \"New Version Available!\",\n                                    width: 500,\n                                    height: 220,\n                                    bodyStyle: \"padding: 10px;\",\n                                    modal: true,\n                                    html: html\n                                });\n                                win.show();\n                            }\n                        });\n                    }\n                }\n\n                if (data.pushStatistics) {\n                    const request = new XMLHttpRequest();\n                    request.open('GET', Routing.generate('pimcore_admin_index_statistics'));\n                    request.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n\n                    request.onload = function () {\n                        if (this.status >= 200 && this.status < 400) {\n                            var res = Ext.decode(this.response);\n\n                            var request = new XMLHttpRequest();\n                            request.open('POST', \"https://liveupdate.pimcore.org/statistics\");\n\n                            var data = new FormData();\n                            data.append('data', encodeURIComponent(JSON.stringify(res)));\n\n                            request.send(data);\n                        }\n                    };\n                    request.send(data);\n                }\n            }\n        };\n\n        var data = new FormData();\n        data.append('id', pimcore.settings.instanceId);\n        data.append('revision', pimcore.settings.build);\n        data.append('version', pimcore.settings.version);\n        data.append('debug', pimcore.settings.debug);\n        data.append('devmode', pimcore.settings.devmode);\n        data.append('environment', pimcore.settings.environment);\n        data.append(\"language\", pimcore.settings.language);\n        data.append(\"main_domain\", pimcore.settings.main_domain);\n        data.append(\"domains\", domains);\n        data.append(\"timezone\", pimcore.settings.timezone);\n        data.append(\"websiteLanguages\", pimcore.settings.websiteLanguages.join(','));\n\n        request.send(data);\n\n    }, 5000);\n\n\n    Ext.get(\"pimcore_logout\").on('click', function () {\n        document.getElementById('pimcore_logout_form').submit();\n    })\n\n    // remove loading\n    Ext.get(\"pimcore_loading\").addCls(\"loaded\");\n    Ext.get(\"pimcore_loading\").hide();\n    Ext.get(\"pimcore_signet\").show();\n\n    // init general layout\n    try {\n        pimcore.viewport = Ext.create('Ext.container.Viewport', {\n            id: \"pimcore_viewport\",\n            layout: 'fit',\n            items: [\n                {\n                    xtype: \"panel\",\n                    id: \"pimcore_body\",\n                    cls: \"pimcore_body\",\n                    layout: \"border\",\n                    border: false,\n                    items: [\n                        Ext.create('Ext.panel.Panel',\n                            {\n                                region: 'west',\n                                id: 'pimcore_panel_tree_left',\n                                cls: 'pimcore_main_accordion',\n                                split: {\n                                    cls: 'pimcore_main_splitter'\n                                },\n                                width: 300,\n                                minSize: 175,\n                                collapsible: true,\n                                collapseMode: 'header',\n                                defaults: {\n                                    margin: '0'\n                                },\n                                layout: {\n                                    type: 'accordion',\n                                    hideCollapseTool: true,\n                                    animate: false\n                                },\n                                header: false,\n                                hidden: true,\n                                forceLayout: true,\n                                hideMode: \"offsets\",\n                                items: []\n                            }\n                        )\n                        ,\n                        Ext.create('Ext.tab.Panel', {\n                            region: 'center',\n                            deferredRender: false,\n                            id: \"pimcore_panel_tabs\",\n                            enableTabScroll: true,\n                            hideMode: \"offsets\",\n                            cls: \"tab_panel\",\n                            plugins:\n                                [\n                                    Ext.create('Ext.ux.TabCloseMenu', {\n                                        pluginId: 'tabclosemenu',\n                                        showCloseAll: false,\n                                        closeTabText: t(\"close_tab\"),\n                                        showCloseOthers: false,\n                                        extraItemsTail: pimcore.helpers.getMainTabMenuItems()\n                                    }),\n                                    Ext.create('Ext.ux.TabReorderer', {}),\n                                    Ext.create('Ext.ux.TabMiddleButtonClose', {})\n                                ]\n                        })\n                        ,\n                        {\n                            region: 'east',\n                            id: 'pimcore_panel_tree_right',\n                            cls: \"pimcore_main_accordion\",\n                            split: {\n                                cls: 'pimcore_main_splitter'\n                            },\n                            width: 300,\n                            minSize: 175,\n                            collapsible: true,\n                            collapseMode: 'header',\n                            defaults: {\n                                margin: '0'\n                            },\n                            layout: {\n                                type: 'accordion',\n                                hideCollapseTool: true,\n                                animate: false\n                            },\n                            header: false,\n                            hidden: true,\n                            forceLayout: true,\n                            hideMode: \"offsets\",\n                            items: []\n                        }\n                    ]\n                }\n            ],\n            listeners: {\n                \"afterrender\": function (el) {\n                    Ext.get(\"pimcore_navigation\").show();\n                    Ext.get(\"pimcore_avatar\").show();\n                    Ext.get(\"pimcore_logout\").show();\n\n                    pimcore.helpers.initMenuTooltips();\n\n                    var loadMask = new Ext.LoadMask(\n                        {\n                            target: Ext.getCmp(\"pimcore_viewport\"),\n                            msg: t(\"please_wait\")\n                        });\n                    loadMask.enable();\n                    pimcore.globalmanager.add(\"loadingmask\", loadMask);\n\n\n                    // prevent dropping files / folder outside the asset tree\n                    var fn = function (e) {\n                        e.preventDefault();\n                        e.dataTransfer.dropEffect = 'none';\n                    };\n\n                    el.getEl().dom.addEventListener(\"dragenter\", fn, true);\n                    el.getEl().dom.addEventListener(\"dragover\", fn, true);\n\n                    // open \"My Profile\" when clicking on avatar\n                    Ext.get(\"pimcore_avatar\").on(\"click\", function (ev) {\n                        pimcore.helpers.openProfile();\n                    });\n                }\n            }\n        });\n\n        // add sidebar panels\n\n        if (user.memorizeTabs || pimcore.helpers.forceOpenMemorizedTabsOnce()) {\n            // open previous opened tabs after the trees are ready\n            pimcore.layout.treepanelmanager.addOnReadyCallback(function () {\n                window.setTimeout(function () {\n                    pimcore.helpers.openMemorizedTabs();\n                }, 500);\n            });\n        }\n\n\n        var perspective = pimcore.globalmanager.get(\"perspective\");\n        var elementTree = perspective.getElementTree();\n\n        var locateConfigs = {\n            document: [],\n            asset: [],\n            object: []\n        };\n\n        for (var i = 0; i < elementTree.length; i++) {\n\n            var treeConfig = elementTree[i];\n            var type = treeConfig[\"type\"];\n            var side = treeConfig[\"position\"] ? treeConfig[\"position\"] : \"left\";\n            var treepanel = null;\n            var tree = null;\n            var treetype = null;\n\n            var locateKey = \"layout_\" + type + \"_locateintree_tree\";\n\n            switch (type) {\n                case \"documents\":\n                    if (user.isAllowed(\"documents\") && !treeConfig.hidden) {\n                        treetype = \"document\";\n                        tree = new pimcore.document.tree(null, treeConfig);\n                        pimcore.globalmanager.add(\"layout_document_tree\", tree);\n                        treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                        treepanel.setHidden(false);\n                    }\n                    break;\n                case \"assets\":\n                    if (user.isAllowed(\"assets\") && !treeConfig.hidden) {\n                        treetype = \"asset\";\n                        tree = new pimcore.asset.tree(null, treeConfig);\n                        pimcore.globalmanager.add(\"layout_asset_tree\", tree);\n                        treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                        treepanel.setHidden(false);\n                    }\n                    break;\n                case \"objects\":\n                    if (user.isAllowed(\"objects\")) {\n                        treetype = \"object\";\n                        if (!treeConfig.hidden) {\n                            treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n                            tree = new pimcore.object.tree(null, treeConfig);\n                            pimcore.globalmanager.add(\"layout_object_tree\", tree);\n                            treepanel.setHidden(false);\n                        }\n                    }\n                    break;\n                case \"customview\":\n                    if (!treeConfig.hidden) {\n                        treetype = treeConfig.treetype ? treeConfig.treetype : \"object\";\n                        locateKey = \"layout_\" + treetype + \"s_locateintree_tree\";\n\n                        if (user.isAllowed(treetype + \"s\")) {\n                            treepanel = Ext.getCmp(\"pimcore_panel_tree_\" + side);\n\n                            // Do not add pimcore_icon_material class to non-material icons\n                            let iconTypeClass = '';\n                            if (treeConfig.icon.match('flat-white')) {\n                                iconTypeClass += 'pimcore_icon_material';\n                            }\n\n                            var treeCls = window.pimcore[treetype].customviews.tree;\n\n                            tree = new treeCls({\n                                isCustomView: true,\n                                customViewId: treeConfig.id,\n                                allowedClasses: treeConfig.allowedClasses,\n                                rootId: treeConfig.rootId,\n                                rootVisible: treeConfig.showroot,\n                                treeId: \"pimcore_panel_tree_\" + treetype + \"_\" + treeConfig.id,\n                                treeIconCls: \"pimcore_\" + treetype + \"_customview_icon_\" + treeConfig.id + \" \" + iconTypeClass,\n                                treeTitle: t(treeConfig.name),\n                                parentPanel: treepanel,\n                                loaderBaseParams: {}\n                            }, treeConfig);\n                            pimcore.globalmanager.add(\"layout_\" + treetype + \"_tree_\" + treeConfig.id, tree);\n\n                            treepanel.setHidden(false);\n                        }\n                    }\n                    break;\n            }\n\n\n            if (tree && treetype) {\n                locateConfigs[treetype].push({\n                    key: locateKey,\n                    side: side,\n                    tree: tree\n                });\n            }\n\n        }\n        pimcore.globalmanager.add(\"tree_locate_configs\", locateConfigs);\n\n    }\n    catch (e) {\n        console.log(e);\n    }\n\n    layoutToolbar = new pimcore.layout.toolbar();\n    pimcore.globalmanager.add(\"layout_toolbar\", layoutToolbar);\n\n\n    // check for activated maintenance-mode with this session-id\n    if (pimcore.settings.maintenance_mode) {\n        pimcore.helpers.showMaintenanceDisableButton();\n    }\n\n\n    if (user.isAllowed(\"dashboards\") && pimcore.globalmanager.get(\"user\").welcomescreen) {\n        window.setTimeout(function () {\n            layoutPortal = new pimcore.layout.portal();\n            pimcore.globalmanager.add(\"layout_portal_welcome\", layoutPortal);\n        }, 1000);\n    }\n\n    pimcore.viewport.updateLayout();\n\n    // NOTE: the event pimcoreReady is fired in pimcore.layout.treepanelmanager\n    pimcore.layout.treepanelmanager.startup();\n\n    pimcore.helpers.registerKeyBindings(document);\n\n\n    if(pimcore.settings.twoFactorSetupRequired) {\n        Ext.Msg.show({\n            title: t('setup_two_factor'),\n            message: t('2fa_setup_message'),\n            buttons: Ext.Msg.OK,\n            icon: Ext.Msg.INFO,\n            fn: function(btn) {\n                pimcore.settings.profile.twoFactorSettings.prototype.openSetupWindow();\n            }\n        });\n    }\n\n    if(pimcore.currentuser.isPasswordReset) {\n        pimcore.helpers.openProfile();\n    }\n\n    // Quick Search\n    var quicksearchMap = new Ext.util.KeyMap({\n        target: document,\n        binding: [{\n            key:  Ext.event.Event.ESC,\n            fn: function () {\n                pimcore.helpers.hideQuickSearch();\n            }\n        }, {\n            key: Ext.event.Event.SPACE,\n            ctrl: true,\n            fn: function (keyCode, e) {\n                e.stopEvent();\n                pimcore.helpers.showQuickSearch();\n            }\n        }]\n    });\n\n    var quicksearchStore = new Ext.data.Store({\n        proxy: {\n            type: 'ajax',\n            url: Routing.generate('pimcore_admin_searchadmin_search_quicksearch'),\n            reader: {\n                type: 'json',\n                rootProperty: 'data'\n            }\n        },\n        listeners: {\n            \"beforeload\": function (store) {\n                var previewEl = Ext.get('pimcore_quicksearch_preview');\n                if(previewEl) {\n                    previewEl.setHtml('');\n                }\n\n                store.getProxy().abort();\n            }\n        },\n        fields: [\"id\", 'type', \"subtype\", \"className\", \"fullpath\"]\n    });\n\n    var quickSearchTpl = new Ext.XTemplate(\n        '<tpl for=\".\">',\n            '<li role=\"option\" unselectable=\"on\" class=\"x-boundlist-item\">' +\n                '<div class=\"list-icon {iconCls}\"><tpl if=\"icon\"><img class=\"class-icon\" src=\"{icon}\"></tpl></div>' +\n                '<div class=\"list-path\" title=\"{fullpath}\">{fullpathList}</div>' +\n            '</li>',\n        '</tpl>'\n    );\n\n    var quicksearchContainer = Ext.get('pimcore_quicksearch');\n    var quickSearchCombo = Ext.create('Ext.form.ComboBox', {\n        width: 900,\n        hideTrigger: true,\n        border: false,\n        shadow: false,\n        tpl: quickSearchTpl,\n        listConfig: {\n            shadow: false,\n            border: false,\n            cls: 'pimcore_quicksearch_picker',\n            navigationModel: 'quicksearch.boundlist',\n            listeners: {\n                \"highlightitem\": function (view, node, opts) {\n                    var record = quicksearchStore.getAt(node.dataset.recordindex);\n                    if (!record.get('preview')) {\n                        Ext.Ajax.request({\n                            url: Routing.generate('pimcore_admin_searchadmin_search_quicksearch_by_id'),\n                            method: 'GET',\n                            params: {\n                                \"id\": record.get('id'),\n                                \"type\": record.get('type')\n                            },\n                            success: function (response) {\n                                var result = Ext.decode(response.responseText);\n\n                                record.preview = result.preview;\n                                Ext.get('pimcore_quicksearch_preview').setHtml(result.preview);\n                            },\n                            failure: function () {\n                                var previewHtml = '<div class=\"no_preview\">' + t('preview_not_available') + '</div>';\n\n                                Ext.get('pimcore_quicksearch_preview').setHtml(previewHtml);\n                            }\n                        });\n                    } else {\n                        var previewHtml = record.get('preview');\n                        if(!previewHtml) {\n                            previewHtml = '<div class=\"no_preview\">' + t('preview_not_available') + '</div>';\n                        }\n\n                        Ext.get('pimcore_quicksearch_preview').setHtml(previewHtml);\n                    }\n                }\n            }\n        },\n        id: 'quickSearchCombo',\n        store: quicksearchStore,\n        loadingText: t('searching'),\n        queryDelay: 100,\n        minChars: 4,\n        renderTo: quicksearchContainer,\n        enableKeyEvents: true,\n        displayField: 'fullpath',\n        valueField: \"id\",\n        typeAhead: true,\n        listeners: {\n            \"expand\": function (combo) {\n                if(!document.getElementById('pimcore_quicksearch_preview')) {\n                    combo.getPicker().getEl().insertHtml('beforeEnd', '<div id=\"pimcore_quicksearch_preview\"></div>');\n                }\n            },\n            \"keyup\": function (field) {\n                if(field.getValue()) {\n                    quicksearchContainer.addCls('filled');\n                }\n            },\n            \"select\": function (combo, record, index) {\n                pimcore.helpers.openElement(record.get('id'), record.get('type'), record.get('subtype'));\n                pimcore.helpers.hideQuickSearch();\n            }\n        }\n    });\n\n    Ext.getBody().on('click', function (event) {\n        // hide on click outside\n        if(quicksearchContainer && !quicksearchContainer.isAncestor(event.target)) {\n            var pickerEl = quickSearchCombo.getPicker().getEl();\n            if(!pickerEl || !pickerEl.isAncestor(event.target)) {\n                pimcore.helpers.hideQuickSearch();\n            }\n        }\n    });\n});\n\n\npimcore[\"intervals\"] = {};\n\n//add missing translation keys\npimcore[\"intervals\"][\"translations_admin_missing\"] = window.setInterval(function () {\n    var missingTranslations = pimcore.globalmanager.get(\"translations_admin_missing\");\n    var addedTranslations = pimcore.globalmanager.get(\"translations_admin_added\");\n    if (missingTranslations.length > 0) {\n        var thresholdIndex = 500;\n        var arraySurpassing = missingTranslations.length > thresholdIndex;\n        var sentTranslations = arraySurpassing ? missingTranslations.slice(0, thresholdIndex) : missingTranslations;\n        var params = Ext.encode(sentTranslations);\n        for (var i = 0; i < sentTranslations.length; i++) {\n            var translation = sentTranslations[i];\n            addedTranslations.push(translation);\n        }\n        var restMissingTranslations = missingTranslations.slice(thresholdIndex);\n        pimcore.globalmanager.add(\"translations_admin_missing\", restMissingTranslations);\n        Ext.Ajax.request({\n            method: \"POST\",\n            url: Routing.generate('pimcore_admin_translation_addadmintranslationkeys'),\n            params: {keys: params}\n        });\n    }\n}, 30000);\n\n// session renew\npimcore[\"intervals\"][\"ping\"] = window.setInterval(function () {\n    Ext.Ajax.request({\n        url: Routing.generate('pimcore_admin_misc_ping'),\n        success: function (response) {\n\n            var data;\n\n            try {\n                data = Ext.decode(response.responseText);\n\n                if (data.success != true) {\n                    throw \"session seems to be expired\";\n                }\n            } catch (e) {\n                data = false;\n                pimcore.settings.showCloseConfirmation = false;\n                window.location.href = Routing.generate('pimcore_admin_login', {session_expired: true});\n            }\n\n            if (pimcore.maintenanceWindow) {\n                pimcore.maintenanceWindow.close();\n                window.setTimeout(function () {\n                    delete pimcore.maintenanceWindow;\n                }, 2000);\n                pimcore.viewport.updateLayout();\n            }\n\n            if (data) {\n                // here comes the check for maintenance mode, ...\n            }\n        },\n        failure: function (response) {\n            if (response.status != 503) {\n                pimcore.settings.showCloseConfirmation = false;\n                window.location.href = Routing.generate('pimcore_admin_login', {session_expired: true, server_error: true});\n\n            }\n        }\n    });\n}, (pimcore.settings.session_gc_maxlifetime - 60) * 1000);\n\n\npimcore[\"intervals\"][\"checkNewNotification\"] = window.setInterval(function (elt) {\n    pimcore.notification.helper.updateFromServer();\n}, 30000);\n\n// refreshes the layout\npimcore.registerNS(\"pimcore.layout.refresh\");\npimcore.layout.refresh = function () {\n    try {\n        pimcore.viewport.updateLayout();\n    }\n    catch (e) {\n    }\n};\n\n// garbage collector\npimcore.helpers.unload = function () {\n\n};\n"], "filenames": ["bundles/AdminBundle/Controller/Admin/DataObject/ClassController.php", "bundles/AdminBundle/Controller/Admin/IndexController.php", "bundles/AdminBundle/Controller/Admin/SettingsController.php", "bundles/AdminBundle/Resources/public/js/pimcore/startup.js"], "buggy_code_start_loc": [93, 140, 1071, 574], "buggy_code_end_loc": [93, 140, 1071, 575], "fixing_code_start_loc": [94, 141, 1072, 574], "fixing_code_end_loc": [97, 145, 1075, 577], "type": "CWE-200", "message": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository pimcore/pimcore prior to 10.6.4.", "other": {"cve": {"id": "CVE-2023-3819", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-21T15:15:10.070", "lastModified": "2023-07-26T21:27:06.947", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Exposure of Sensitive Information to an Unauthorized Actor in GitHub repository pimcore/pimcore prior to 10.6.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.6.4", "matchCriteriaId": "E3D96DF5-A6F7-47ED-965B-AA5D6600071F"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/0237527b3244d251fa5ecd4912dfe4f8b2125c54", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/be5e4d4c-1b0b-4c01-a1fc-00533135817c", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/0237527b3244d251fa5ecd4912dfe4f8b2125c54"}}