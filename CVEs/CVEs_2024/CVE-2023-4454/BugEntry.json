{"buggy_code": ["<?php\n\nnamespace Wallabag\\CoreBundle\\Controller;\n\nuse Craue\\ConfigBundle\\Util\\Config;\nuse Doctrine\\DBAL\\Platforms\\SqlitePlatform;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse FOS\\UserBundle\\Model\\UserManagerInterface;\nuse JMS\\Serializer\\SerializationContext;\nuse JMS\\Serializer\\SerializerBuilder;\nuse PragmaRX\\Recovery\\Recovery as BackupCodes;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Validator\\Constraints\\Locale as LocaleConstraint;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse Wallabag\\AnnotationBundle\\Repository\\AnnotationRepository;\nuse Wallabag\\CoreBundle\\Entity\\Config as ConfigEntity;\nuse Wallabag\\CoreBundle\\Entity\\IgnoreOriginUserRule;\nuse Wallabag\\CoreBundle\\Entity\\RuleInterface;\nuse Wallabag\\CoreBundle\\Entity\\TaggingRule;\nuse Wallabag\\CoreBundle\\Form\\Type\\ChangePasswordType;\nuse Wallabag\\CoreBundle\\Form\\Type\\ConfigType;\nuse Wallabag\\CoreBundle\\Form\\Type\\FeedType;\nuse Wallabag\\CoreBundle\\Form\\Type\\IgnoreOriginUserRuleType;\nuse Wallabag\\CoreBundle\\Form\\Type\\TaggingRuleImportType;\nuse Wallabag\\CoreBundle\\Form\\Type\\TaggingRuleType;\nuse Wallabag\\CoreBundle\\Form\\Type\\UserInformationType;\nuse Wallabag\\CoreBundle\\Repository\\ConfigRepository;\nuse Wallabag\\CoreBundle\\Repository\\EntryRepository;\nuse Wallabag\\CoreBundle\\Repository\\IgnoreOriginUserRuleRepository;\nuse Wallabag\\CoreBundle\\Repository\\TaggingRuleRepository;\nuse Wallabag\\CoreBundle\\Repository\\TagRepository;\nuse Wallabag\\CoreBundle\\Tools\\Utils;\nuse Wallabag\\UserBundle\\Repository\\UserRepository;\n\nclass ConfigController extends AbstractController\n{\n    private EntityManagerInterface $entityManager;\n    private UserManagerInterface $userManager;\n    private EntryRepository $entryRepository;\n    private TagRepository $tagRepository;\n    private AnnotationRepository $annotationRepository;\n    private ConfigRepository $configRepository;\n\n    public function __construct(EntityManagerInterface $entityManager, UserManagerInterface $userManager, EntryRepository $entryRepository, TagRepository $tagRepository, AnnotationRepository $annotationRepository, ConfigRepository $configRepository)\n    {\n        $this->entityManager = $entityManager;\n        $this->userManager = $userManager;\n        $this->entryRepository = $entryRepository;\n        $this->tagRepository = $tagRepository;\n        $this->annotationRepository = $annotationRepository;\n        $this->configRepository = $configRepository;\n    }\n\n    /**\n     * @Route(\"/config\", name=\"config\")\n     */\n    public function indexAction(Request $request, Config $craueConfig, TaggingRuleRepository $taggingRuleRepository, IgnoreOriginUserRuleRepository $ignoreOriginUserRuleRepository, UserRepository $userRepository)\n    {\n        $config = $this->getConfig();\n        $user = $this->getUser();\n\n        // handle basic config detail (this form is defined as a service)\n        $configForm = $this->createForm(ConfigType::class, $config, ['action' => $this->generateUrl('config')]);\n        $configForm->handleRequest($request);\n\n        if ($configForm->isSubmitted() && $configForm->isValid()) {\n            $this->entityManager->persist($config);\n            $this->entityManager->flush();\n\n            $request->getSession()->set('_locale', $config->getLanguage());\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.config_saved'\n            );\n\n            return $this->redirect($this->generateUrl('config'));\n        }\n\n        // handle changing password\n        $pwdForm = $this->createForm(ChangePasswordType::class, null, ['action' => $this->generateUrl('config') . '#set4']);\n        $pwdForm->handleRequest($request);\n\n        if ($pwdForm->isSubmitted() && $pwdForm->isValid()) {\n            if ($craueConfig->get('demo_mode_enabled') && $craueConfig->get('demo_mode_username') === $user->getUsername()) {\n                $message = 'flashes.config.notice.password_not_updated_demo';\n            } else {\n                $message = 'flashes.config.notice.password_updated';\n\n                $user->setPlainPassword($pwdForm->get('new_password')->getData());\n                $this->userManager->updateUser($user, true);\n            }\n\n            $this->addFlash('notice', $message);\n\n            return $this->redirect($this->generateUrl('config') . '#set4');\n        }\n\n        // handle changing user information\n        $userForm = $this->createForm(UserInformationType::class, $user, [\n            'validation_groups' => ['Profile'],\n            'action' => $this->generateUrl('config') . '#set3',\n        ]);\n        $userForm->handleRequest($request);\n\n        if ($userForm->isSubmitted() && $userForm->isValid()) {\n            $this->userManager->updateUser($user, true);\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.user_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set3');\n        }\n\n        // handle feed information\n        $feedForm = $this->createForm(FeedType::class, $config, ['action' => $this->generateUrl('config') . '#set2']);\n        $feedForm->handleRequest($request);\n\n        if ($feedForm->isSubmitted() && $feedForm->isValid()) {\n            $this->entityManager->persist($config);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.feed_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set2');\n        }\n\n        // handle tagging rule\n        $taggingRule = new TaggingRule();\n        $action = $this->generateUrl('config') . '#set5';\n\n        if ($request->query->has('tagging-rule')) {\n            $taggingRule = $taggingRuleRepository->find($request->query->get('tagging-rule'));\n\n            if ($this->getUser()->getId() !== $taggingRule->getConfig()->getUser()->getId()) {\n                return $this->redirect($action);\n            }\n\n            $action = $this->generateUrl('config') . '?tagging-rule=' . $taggingRule->getId() . '#set5';\n        }\n\n        $newTaggingRule = $this->createForm(TaggingRuleType::class, $taggingRule, ['action' => $action]);\n        $newTaggingRule->handleRequest($request);\n\n        if ($newTaggingRule->isSubmitted() && $newTaggingRule->isValid()) {\n            $taggingRule->setConfig($config);\n            $this->entityManager->persist($taggingRule);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.tagging_rules_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set5');\n        }\n\n        // handle tagging rules import\n        $taggingRulesImportform = $this->createForm(TaggingRuleImportType::class);\n        $taggingRulesImportform->handleRequest($request);\n\n        if ($taggingRulesImportform->isSubmitted() && $taggingRulesImportform->isValid()) {\n            $message = 'flashes.config.notice.tagging_rules_not_imported';\n            $file = $taggingRulesImportform->get('file')->getData();\n\n            if (null !== $file && $file->isValid() && \\in_array($file->getClientMimeType(), ['application/json', 'application/octet-stream'], true)) {\n                $content = json_decode(file_get_contents($file->getPathname()), true);\n\n                if (\\is_array($content)) {\n                    foreach ($content as $rule) {\n                        $taggingRule = new TaggingRule();\n                        $taggingRule->setRule($rule['rule']);\n                        $taggingRule->setTags($rule['tags']);\n                        $taggingRule->setConfig($config);\n                        $this->entityManager->persist($taggingRule);\n                    }\n\n                    $this->entityManager->flush();\n\n                    $message = 'flashes.config.notice.tagging_rules_imported';\n                }\n            }\n\n            $this->addFlash('notice', $message);\n\n            return $this->redirect($this->generateUrl('config') . '#set5');\n        }\n\n        // handle ignore origin rules\n        $ignoreOriginUserRule = new IgnoreOriginUserRule();\n        $action = $this->generateUrl('config') . '#set6';\n\n        if ($request->query->has('ignore-origin-user-rule')) {\n            $ignoreOriginUserRule = $ignoreOriginUserRuleRepository\n                ->find($request->query->get('ignore-origin-user-rule'));\n\n            if ($this->getUser()->getId() !== $ignoreOriginUserRule->getConfig()->getUser()->getId()) {\n                return $this->redirect($action);\n            }\n\n            $action = $this->generateUrl('config', [\n                'ignore-origin-user-rule' => $ignoreOriginUserRule->getId(),\n            ]) . '#set6';\n        }\n\n        $newIgnoreOriginUserRule = $this->createForm(IgnoreOriginUserRuleType::class, $ignoreOriginUserRule, ['action' => $action]);\n        $newIgnoreOriginUserRule->handleRequest($request);\n\n        if ($newIgnoreOriginUserRule->isSubmitted() && $newIgnoreOriginUserRule->isValid()) {\n            $ignoreOriginUserRule->setConfig($config);\n            $this->entityManager->persist($ignoreOriginUserRule);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.ignore_origin_rules_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set6');\n        }\n\n        return $this->render('@WallabagCore/Config/index.html.twig', [\n            'form' => [\n                'config' => $configForm->createView(),\n                'feed' => $feedForm->createView(),\n                'pwd' => $pwdForm->createView(),\n                'user' => $userForm->createView(),\n                'new_tagging_rule' => $newTaggingRule->createView(),\n                'import_tagging_rule' => $taggingRulesImportform->createView(),\n                'new_ignore_origin_user_rule' => $newIgnoreOriginUserRule->createView(),\n            ],\n            'feed' => [\n                'username' => $user->getUsername(),\n                'token' => $config->getFeedToken(),\n            ],\n            'wallabag_url' => $this->getParameter('domain_name'),\n            'enabled_users' => $userRepository->getSumEnabledUsers(),\n        ]);\n    }\n\n    /**\n     * Disable 2FA using email.\n     *\n     * @Route(\"/config/otp/email/disable\", name=\"disable_otp_email\")\n     */\n    public function disableOtpEmailAction()\n    {\n        $user = $this->getUser();\n        $user->setEmailTwoFactor(false);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_disabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Enable 2FA using email.\n     *\n     * @Route(\"/config/otp/email\", name=\"config_otp_email\")\n     */\n    public function otpEmailAction()\n    {\n        $user = $this->getUser();\n\n        $user->setGoogleAuthenticatorSecret(null);\n        $user->setBackupCodes(null);\n        $user->setEmailTwoFactor(true);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_enabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Disable 2FA using OTP app.\n     *\n     * @Route(\"/config/otp/app/disable\", name=\"disable_otp_app\")\n     */\n    public function disableOtpAppAction()\n    {\n        $user = $this->getUser();\n\n        $user->setGoogleAuthenticatorSecret('');\n        $user->setBackupCodes(null);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_disabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Enable 2FA using OTP app, user will need to confirm the generated code from the app.\n     *\n     * @Route(\"/config/otp/app\", name=\"config_otp_app\")\n     */\n    public function otpAppAction(GoogleAuthenticatorInterface $googleAuthenticator)\n    {\n        $user = $this->getUser();\n        $secret = $googleAuthenticator->generateSecret();\n\n        $user->setGoogleAuthenticatorSecret($secret);\n        $user->setEmailTwoFactor(false);\n\n        $backupCodes = (new BackupCodes())->toArray();\n        $backupCodesHashed = array_map(\n            function ($backupCode) {\n                return password_hash($backupCode, \\PASSWORD_DEFAULT);\n            },\n            $backupCodes\n        );\n\n        $user->setBackupCodes($backupCodesHashed);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_enabled'\n        );\n\n        return $this->render('@WallabagCore/Config/otp_app.html.twig', [\n            'backupCodes' => $backupCodes,\n            'qr_code' => $googleAuthenticator->getQRContent($user),\n            'secret' => $secret,\n        ]);\n    }\n\n    /**\n     * Cancelling 2FA using OTP app.\n     *\n     * @Route(\"/config/otp/app/cancel\", name=\"config_otp_app_cancel\")\n     */\n    public function otpAppCancelAction()\n    {\n        $user = $this->getUser();\n        $user->setGoogleAuthenticatorSecret(null);\n        $user->setBackupCodes(null);\n\n        $this->userManager->updateUser($user, true);\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Validate OTP code.\n     *\n     * @Route(\"/config/otp/app/check\", name=\"config_otp_app_check\")\n     */\n    public function otpAppCheckAction(Request $request, GoogleAuthenticatorInterface $googleAuthenticator)\n    {\n        $isValid = $googleAuthenticator->checkCode(\n            $this->getUser(),\n            $request->get('_auth_code')\n        );\n\n        if (true === $isValid) {\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.otp_enabled'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set3');\n        }\n\n        $this->addFlash(\n            'two_factor',\n            'scheb_two_factor.code_invalid'\n        );\n\n        return $this->redirect($this->generateUrl('config_otp_app'));\n    }\n\n    /**\n     * @Route(\"/generate-token\", name=\"generate_token\")\n     *\n     * @return RedirectResponse|JsonResponse\n     */\n    public function generateTokenAction(Request $request)\n    {\n        $config = $this->getConfig();\n        $config->setFeedToken(Utils::generateToken());\n\n        $this->entityManager->persist($config);\n        $this->entityManager->flush();\n\n        if ($request->isXmlHttpRequest()) {\n            return new JsonResponse(['token' => $config->getFeedToken()]);\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.feed_token_updated'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set2');\n    }\n\n    /**\n     * @Route(\"/revoke-token\", name=\"revoke_token\")\n     *\n     * @return RedirectResponse|JsonResponse\n     */\n    public function revokeTokenAction(Request $request)\n    {\n        $config = $this->getConfig();\n        $config->setFeedToken(null);\n\n        $this->entityManager->persist($config);\n        $this->entityManager->flush();\n\n        if ($request->isXmlHttpRequest()) {\n            return new JsonResponse();\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.feed_token_revoked'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set2');\n    }\n\n    /**\n     * Deletes a tagging rule and redirect to the config homepage.\n     *\n     * @Route(\"/tagging-rule/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"delete_tagging_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function deleteTaggingRuleAction(TaggingRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        $this->entityManager->remove($rule);\n        $this->entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.tagging_rules_deleted'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set5');\n    }\n\n    /**\n     * Edit a tagging rule.\n     *\n     * @Route(\"/tagging-rule/edit/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"edit_tagging_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function editTaggingRuleAction(TaggingRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        return $this->redirect($this->generateUrl('config') . '?tagging-rule=' . $rule->getId() . '#set5');\n    }\n\n    /**\n     * Deletes an ignore origin rule and redirect to the config homepage.\n     *\n     * @Route(\"/ignore-origin-user-rule/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"delete_ignore_origin_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function deleteIgnoreOriginRuleAction(IgnoreOriginUserRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        $this->entityManager->remove($rule);\n        $this->entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.ignore_origin_rules_deleted'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set6');\n    }\n\n    /**\n     * Edit an ignore origin rule.\n     *\n     * @Route(\"/ignore-origin-user-rule/edit/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"edit_ignore_origin_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function editIgnoreOriginRuleAction(IgnoreOriginUserRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        return $this->redirect($this->generateUrl('config') . '?ignore-origin-user-rule=' . $rule->getId() . '#set6');\n    }\n\n    /**\n     * Remove all annotations OR tags OR entries for the current user.\n     *\n     * @Route(\"/reset/{type}\", requirements={\"id\" = \"annotations|tags|entries\"}, name=\"config_reset\")\n     *\n     * @return RedirectResponse\n     */\n    public function resetAction(string $type, AnnotationRepository $annotationRepository, EntryRepository $entryRepository)\n    {\n        switch ($type) {\n            case 'annotations':\n                $annotationRepository->removeAllByUserId($this->getUser()->getId());\n                break;\n            case 'tags':\n                $this->removeAllTagsByUserId($this->getUser()->getId());\n                break;\n            case 'entries':\n                // SQLite doesn't care about cascading remove, so we need to manually remove associated stuff\n                // otherwise they won't be removed ...\n                if ($this->entityManager->getConnection()->getDatabasePlatform() instanceof SqlitePlatform) {\n                    $annotationRepository->removeAllByUserId($this->getUser()->getId());\n                }\n\n                // manually remove tags to avoid orphan tag\n                $this->removeAllTagsByUserId($this->getUser()->getId());\n\n                $entryRepository->removeAllByUserId($this->getUser()->getId());\n                break;\n            case 'archived':\n                if ($this->entityManager->getConnection()->getDatabasePlatform() instanceof SqlitePlatform) {\n                    $this->removeAnnotationsForArchivedByUserId($this->getUser()->getId());\n                }\n\n                // manually remove tags to avoid orphan tag\n                $this->removeTagsForArchivedByUserId($this->getUser()->getId());\n\n                $entryRepository->removeArchivedByUserId($this->getUser()->getId());\n                break;\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.' . $type . '_reset'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Delete account for current user.\n     *\n     * @Route(\"/account/delete\", name=\"delete_account\", methods={\"POST\"})\n     *\n     * @throws AccessDeniedHttpException\n     *\n     * @return RedirectResponse\n     */\n    public function deleteAccountAction(Request $request, UserRepository $userRepository, TokenStorageInterface $tokenStorage)\n    {\n        if (!$this->isCsrfTokenValid('delete-account', $request->request->get('token'))) {\n            throw $this->createAccessDeniedException('Bad CSRF token.');\n        }\n\n        $enabledUsers = $userRepository->getSumEnabledUsers();\n\n        if ($enabledUsers <= 1) {\n            throw new AccessDeniedHttpException();\n        }\n\n        $user = $this->getUser();\n\n        // logout current user\n        $tokenStorage->setToken(null);\n        $request->getSession()->invalidate();\n\n        $this->userManager->deleteUser($user);\n\n        return $this->redirect($this->generateUrl('fos_user_security_login'));\n    }\n\n    /**\n     * Switch view mode for current user.\n     *\n     * @Route(\"/config/view-mode\", name=\"switch_view_mode\")\n     *\n     * @return RedirectResponse\n     */\n    public function changeViewModeAction(Request $request)\n    {\n        $user = $this->getUser();\n        $user->getConfig()->setListMode(!$user->getConfig()->getListMode());\n\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n\n        return $this->redirect($request->getSession()->get('prevUrl'));\n    }\n\n    /**\n     * Change the locale for the current user.\n     *\n     * @param string $language\n     *\n     * @Route(\"/locale/{language}\", name=\"changeLocale\")\n     *\n     * @return RedirectResponse\n     */\n    public function setLocaleAction(Request $request, ValidatorInterface $validator, $language = null)\n    {\n        $errors = $validator->validate($language, (new LocaleConstraint()));\n\n        if (0 === \\count($errors)) {\n            $request->getSession()->set('_locale', $language);\n        }\n\n        return $this->redirect($request->headers->get('referer', $this->generateUrl('homepage')));\n    }\n\n    /**\n     * Export tagging rules for the logged in user.\n     *\n     * @Route(\"/tagging-rule/export\", name=\"export_tagging_rule\")\n     *\n     * @return Response\n     */\n    public function exportTaggingRulesAction()\n    {\n        $data = SerializerBuilder::create()->build()->serialize(\n            $this->getUser()->getConfig()->getTaggingRules(),\n            'json',\n            SerializationContext::create()->setGroups(['export_tagging_rule'])\n        );\n\n        return Response::create(\n            $data,\n            200,\n            [\n                'Content-type' => 'application/json',\n                'Content-Disposition' => 'attachment; filename=\"tagging_rules_' . $this->getUser()->getUsername() . '.json\"',\n                'Content-Transfer-Encoding' => 'UTF-8',\n            ]\n        );\n    }\n\n    /**\n     * Remove all tags for given tags and a given user and cleanup orphan tags.\n     *\n     * @param array $tags\n     * @param int   $userId\n     */\n    private function removeAllTagsByStatusAndUserId($tags, $userId)\n    {\n        if (empty($tags)) {\n            return;\n        }\n\n        $this->entryRepository->removeTags($userId, $tags);\n\n        // cleanup orphan tags\n        foreach ($tags as $tag) {\n            if (0 === \\count($tag->getEntries())) {\n                $this->entityManager->remove($tag);\n            }\n        }\n\n        $this->entityManager->flush();\n    }\n\n    /**\n     * Remove all tags for a given user and cleanup orphan tags.\n     *\n     * @param int $userId\n     */\n    private function removeAllTagsByUserId($userId)\n    {\n        $tags = $this->tagRepository->findAllTags($userId);\n        $this->removeAllTagsByStatusAndUserId($tags, $userId);\n    }\n\n    /**\n     * Remove all tags for a given user and cleanup orphan tags.\n     *\n     * @param int $userId\n     */\n    private function removeTagsForArchivedByUserId($userId)\n    {\n        $tags = $this->tagRepository->findForArchivedArticlesByUser($userId);\n        $this->removeAllTagsByStatusAndUserId($tags, $userId);\n    }\n\n    private function removeAnnotationsForArchivedByUserId($userId)\n    {\n        $archivedEntriesAnnotations = $this->annotationRepository\n            ->findAllArchivedEntriesByUser($userId);\n\n        foreach ($archivedEntriesAnnotations as $archivedEntriesAnnotation) {\n            $this->entityManager->remove($archivedEntriesAnnotation);\n        }\n\n        $this->entityManager->flush();\n    }\n\n    /**\n     * Validate that a rule can be edited/deleted by the current user.\n     */\n    private function validateRuleAction(RuleInterface $rule)\n    {\n        if ($this->getUser()->getId() !== $rule->getConfig()->getUser()->getId()) {\n            throw $this->createAccessDeniedException('You can not access this rule.');\n        }\n    }\n\n    /**\n     * Retrieve config for the current user.\n     * If no config were found, create a new one.\n     *\n     * @return ConfigEntity\n     */\n    private function getConfig()\n    {\n        $config = $this->configRepository->findOneByUser($this->getUser());\n\n        // should NEVER HAPPEN ...\n        if (!$config) {\n            $config = new ConfigEntity($this->getUser());\n        }\n\n        return $config;\n    }\n}\n", "{% extends \"@WallabagCore/layout.html.twig\" %}\n\n{% block title %}{{ 'config.page_title'|trans }}{% endblock %}\n\n{% block content %}\n\n    <div class=\"row\">\n        <div class=\"col s12\">\n            <div class=\"card-panel settings\">\n\n                <div class=\"row\">\n                    <div class=\"tabs-container col s12\">\n                        <ul class=\"tabs\">\n                            <li class=\"tab col s12 m6 l3\"><a class=\"active\" href=\"#set1\">{{ 'config.tab_menu.settings'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set2\">{{ 'config.tab_menu.feed'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set3\">{{ 'config.tab_menu.user_info'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set4\">{{ 'config.tab_menu.password'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set5\">{{ 'config.tab_menu.rules'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set6\">{{ 'config.tab_menu.ignore_origin'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set7\">{{ 'config.tab_menu.reset'|trans }}</a></li>\n                        </ul>\n                    </div>\n\n                    <div id=\"set1\" class=\"col s12\">\n                        {{ form_start(form.config) }}\n                            {{ form_errors(form.config) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.items_per_page) }}\n                                    {{ form_widget(form.config.items_per_page) }}\n                                    {{ form_label(form.config.items_per_page) }}\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_items_per_page'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s11 settings-checkbox-col\">\n                                {{ form_errors(form.config.display_thumbnails) }}\n                                {{ form_widget(form.config.display_thumbnails) }}\n                                {{ form_label(form.config.display_thumbnails, null, {'label_attr': {'class': 'settings-checkbox-label'}}) }}\n                            </div>\n                            <div class=\"input-field col s1\">\n                                <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_display_thumbnails'|trans }}\">\n                                    <i class=\"material-icons\">live_help</i>\n                                </a>\n                            </div>\n                        </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.reading_speed) }}\n                                    {{ form_widget(form.config.reading_speed) }}\n                                    {{ form_label(form.config.reading_speed) }}\n                                    <p>\n                                        {{ 'config.form_settings.reading_speed.help_message'|trans }}\n                                        <a target=\"_blank\" href=\"https://wallabag.github.io/myreadspeed/\">myreadspeed</a>\n                                    </p>\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_reading_speed'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.action_mark_as_read) }}\n                                    {{ form_widget(form.config.action_mark_as_read) }}\n                                    {{ form_label(form.config.action_mark_as_read) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.language) }}\n                                    {{ form_widget(form.config.language) }}\n                                    {{ form_label(form.config.language) }}\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_language'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.pocket_consumer_key) }}\n                                    {{ form_widget(form.config.pocket_consumer_key) }}\n                                    {{ form_label(form.config.pocket_consumer_key) }}\n                                    <p>\n                                        &raquo;\n                                        <a target=\"_blank\" href=\"https://getpocket.com/developer/docs/authentication\">https://getpocket.com/developer/docs/authentication</a>\n                                    </p>\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_pocket_consumer_key'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    <h5>{{ 'config.form_settings.android_configuration'|trans }}</h5>\n                                    <a href=\"wallabag://{{ app.user.username }}@{{ wallabag_url }}\" class=\"waves-effect waves-light btn hide-on-large-only\">{{ 'config.form_settings.android_instruction'|trans }}</a>\n                                    <img id=\"androidQrcode\" class=\"hide-on-med-and-down\" alt=\"{{ 'config.otp.app.qrcode_label'|trans }}\" />\n                                </div>\n                                <script>\n                                    document.getElementById('androidQrcode').src = jrQrcode.getQrBase64('wallabag://{{ app.user.username }}@{{ wallabag_url }}');\n                                </script>\n                            </div>\n\n                            {{ form_widget(form.config.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.config) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set2\" class=\"col s12\">\n                        {{ form_start(form.feed) }}\n                            {{ form_errors(form.feed) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ 'config.form_feed.description'|trans }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_feed.token_label'|trans }}</h6>\n                                    <div>\n                                        {% if feed.token %}\n                                            {{ feed.token }}\n                                        {% else %}\n                                            <em>{{ 'config.form_feed.no_token'|trans }}</em>\n                                        {% endif %}\n\n                                        {% if feed.token %}\n                                            \u2013 <a href=\"{{ path('generate_token') }}\">{{ 'config.form_feed.token_reset'|trans }}</a>\n                                            \u2013 <a href=\"{{ path('revoke_token') }}\">{{ 'config.form_feed.token_revoke'|trans }}</a>\n                                        {% else %}\n                                            \u2013 <a href=\"{{ path('generate_token') }}\">{{ 'config.form_feed.token_create'|trans }}</a>\n                                        {% endif %}\n                                    </div>\n                                </div>\n                            </div>\n                            {% if feed.token %}\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_feed.feed_links'|trans }}</h6>\n                                    <ul>\n                                        <li><a href=\"{{ path('unread_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.unread'|trans }}</a></li>\n                                        <li><a href=\"{{ path('starred_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.starred'|trans }}</a></li>\n                                        <li><a href=\"{{ path('archive_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.archive'|trans }}</a></li>\n                                        <li><a href=\"{{ path('all_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.all'|trans }}</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                            {% endif %}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.feed.feed_limit) }}\n                                    {{ form_errors(form.feed.feed_limit) }}\n                                    {{ form_widget(form.feed.feed_limit) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.feed.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.feed) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set3\" class=\"col s12\">\n                        {{ form_start(form.user) }}\n                            {{ form_errors(form.user) }}\n\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_user.login_label'|trans }}</h6>\n                                    <div>\n                                        {{ app.user.username }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.user.name) }}\n                                    {{ form_errors(form.user.name) }}\n                                    {{ form_widget(form.user.name) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.user.email) }}\n                                    {{ form_errors(form.user.email) }}\n                                    {{ form_widget(form.user.email) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.user.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n\n                            <br/>\n                            <br/>\n                            <div class=\"row\">\n                                <h5>{{ 'config.otp.page_title'|trans }}</h5>\n\n                                <p>{{ 'config.form_user.two_factor_description'|trans }}</p>\n\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_user.two_factor.table_method'|trans }}</th>\n                                            <th>{{ 'config.form_user.two_factor.table_state'|trans }}</th>\n                                            <th>{{ 'config.form_user.two_factor.table_action'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>{{ 'config.form_user.two_factor.emailTwoFactor_label'|trans }}</td>\n                                            <td>{% if app.user.isEmailTwoFactor %}<b>{{ 'config.form_user.two_factor.state_enabled'|trans }}</b>{% else %}{{ 'config.form_user.two_factor.state_disabled'|trans }}{% endif %}</td>\n                                            <td><a href=\"{{ path('config_otp_email') }}\" class=\"waves-effect waves-light btn{% if app.user.isEmailTwoFactor %} disabled{% endif %}\">{{ 'config.form_user.two_factor.action_email'|trans }}</a> {% if app.user.isEmailTwoFactor %}<a href=\"{{ path('disable_otp_email') }}\" class=\"waves-effect waves-light btn red\">Disable</a>{% endif %}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'config.form_user.two_factor.googleTwoFactor_label'|trans }}</td>\n                                            <td>{% if app.user.isGoogleTwoFactor %}<b>{{ 'config.form_user.two_factor.state_enabled'|trans }}</b>{% else %}{{ 'config.form_user.two_factor.state_disabled'|trans }}{% endif %}</td>\n                                            <td><a href=\"{{ path('config_otp_app') }}\" class=\"waves-effect waves-light btn{% if app.user.isGoogleTwoFactor %} disabled{% endif %}\">{{ 'config.form_user.two_factor.action_app'|trans }}</a> {% if app.user.isGoogleTwoFactor %}<a href=\"{{ path('disable_otp_app') }}\" class=\"waves-effect waves-light btn red\">Disable</a>{% endif %}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                            {{ form_widget(form.user._token) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set4\" class=\"col s12\">\n                        {{ form_start(form.pwd) }}\n                            {{ form_errors(form.pwd) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ 'config.form_password.description'|trans }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.old_password) }}\n                                    {{ form_errors(form.pwd.old_password) }}\n                                    {{ form_widget(form.pwd.old_password) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.new_password.first) }}\n                                    {{ form_errors(form.pwd.new_password.first) }}\n                                    {{ form_widget(form.pwd.new_password.first) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.new_password.second) }}\n                                    {{ form_errors(form.pwd.new_password.second) }}\n                                    {{ form_widget(form.pwd.new_password.second) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.pwd.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.pwd) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set5\" class=\"col s12\">\n                        {% if app.user.config.taggingRules is not empty %}\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <ul>\n                                    {% for tagging_rule in app.user.config.taggingRules %}\n                                    <li>\n                                        {{ 'config.form_rules.if_label'|trans }}\n                                        \u00ab {{ tagging_rule.rule }} \u00bb\n                                        {{ 'config.form_rules.then_tag_as_label'|trans }}\n                                        \u00ab {{ tagging_rule.tags|join(', ') }} \u00bb\n\n                                        <a href=\"{{ path('edit_tagging_rule', {id: tagging_rule.id}) }}\" title=\"{{ 'config.form_rules.edit_rule_label'|trans }}\" class=\"mode_edit_tagging_rule\">\n                                            <i class=\"tool grey-text material-icons\">mode_edit</i>\n                                        </a>\n                                        <a href=\"{{ path('delete_tagging_rule', {id: tagging_rule.id}) }}\" title=\"{{ 'config.form_rules.delete_rule_label'|trans }}\" class=\"delete_tagging_rule\">\n                                            <i class=\"tool grey-text material-icons\">delete</i>\n                                        </a>\n                                    </li>\n                                    {% endfor %}\n                                </ul>\n                            </div>\n                        </div>\n                        {% endif %}\n\n                        <ul class=\"row\">\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.new_tagging_rule'|trans }}</span>\n\n                                        {{ form_start(form.new_tagging_rule) }}\n                                        {{ form_errors(form.new_tagging_rule) }}\n\n                                        <div class=\"row\">\n                                            <div class=\"input-field col s12\">\n                                                {{ form_label(form.new_tagging_rule.rule) }}\n                                                {{ form_errors(form.new_tagging_rule.rule) }}\n                                                {{ form_widget(form.new_tagging_rule.rule) }}\n                                            </div>\n                                        </div>\n\n                                        <div class=\"row\">\n                                            <div class=\"input-field col s12\">\n                                                {{ form_label(form.new_tagging_rule.tags) }}\n                                                {{ form_errors(form.new_tagging_rule.tags) }}\n                                                {{ form_widget(form.new_tagging_rule.tags) }}\n                                            </div>\n                                        </div>\n\n                                        {{ form_widget(form.new_tagging_rule.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                                        {{ form_rest(form.new_tagging_rule) }}\n                                    </form>\n                                    </div>\n                                </div>\n                            </li>\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card z-depth-1\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.import_tagging_rules'|trans }}</span>\n                                        <p>{{ 'config.form_rules.card.import_tagging_rules_detail'|trans }}</p>\n                                        {{ form_start(form.import_tagging_rule) }}\n                                            {{ form_errors(form.import_tagging_rule) }}\n                                            <div class=\"row\">\n                                                <div class=\"file-field input-field col s12\">\n                                                    {{ form_errors(form.import_tagging_rule.file) }}\n                                                    <div class=\"btn\">\n                                                        <span>{{ form.import_tagging_rule.file.vars.label|trans }}</span>\n                                                        {{ form_widget(form.import_tagging_rule.file) }}\n                                                    </div>\n                                                    <div class=\"file-path-wrapper\">\n                                                        <input class=\"file-path validate\" type=\"text\">\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            {{ form_widget(form.import_tagging_rule.import, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n\n                                            {{ form_rest(form.import_tagging_rule) }}\n                                        </form>\n                                    </div>\n                                </div>\n                            </li>\n                            {% if app.user.config.taggingRules is not empty %}\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card z-depth-1\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.export_tagging_rules'|trans }}</span>\n                                        <p>{{ 'config.form_rules.card.export_tagging_rules_detail'|trans }}</p>\n                                        <br/>\n                                        <p><a href=\"{{ path('export_tagging_rule') }}\" class=\"waves-effect waves-light btn\">{{ 'config.form_rules.export'|trans }}</a></p>\n                                    </div>\n                                </div>\n                            </li>\n                            {% endif %}\n                        </ul>\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <h4>{{ 'config.form_rules.faq.title'|trans }}</h4>\n\n                                <h5>{{ 'config.form_rules.faq.tagging_rules_definition_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_rules.faq.tagging_rules_definition_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_rules.faq.how_to_use_them_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_rules.faq.how_to_use_them_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_rules.faq.variables_available_title'|trans }}</h5>\n                                <p class=\"help\">\n                                    {{ 'config.form_rules.faq.variables_available_description'|trans }}\n                                </p>\n\n                                <table class=\"bordered\">\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_rules.faq.variable_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.meaning'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.operator_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.meaning'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>title</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.title'|trans }}</td>\n                                            <td>&lt;=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.less_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>url</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.url'|trans }}</td>\n                                            <td>&lt;</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.strictly_less_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>isArchived</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.isArchived'|trans }}</td>\n                                            <td>&gt;=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.greater_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>isStarred</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.isStarred'|trans }}</td>\n                                            <td>&gt;</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.strictly_greater_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>content</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.content'|trans }}</td>\n                                            <td>=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>language</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.language'|trans }}</td>\n                                            <td>!=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.not_equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>mimetype</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.mimetype'|trans }}</td>\n                                            <td>OR</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.or'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>readingTime</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.readingTime'|trans }}</td>\n                                            <td>AND</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.and'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>domainName</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.domainName'|trans }}</td>\n                                            <td>matches<br />notmaches</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.matches'|trans|raw }}<br />{{ 'config.form_rules.faq.operator_description.notmatches'|trans|raw }}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"set6\" class=\"col s12\">\n                        {% if app.user.config.ignoreOriginRules is not empty %}\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <ul>\n                                    {% for ignore_origin_rule in app.user.config.ignoreOriginRules %}\n                                    <li>\n                                        {{ 'config.form_rules.if_label'|trans }}\n                                        \u00ab {{ ignore_origin_rule.rule }} \u00bb\n                                        <a href=\"{{ path('edit_ignore_origin_rule', {id: ignore_origin_rule.id}) }}\" title=\"{{ 'config.form_rules.edit_rule_label'|trans }}\" class=\"mode_edit\">\n                                            <i class=\"tool grey-text material-icons\">mode_edit</i>\n                                        </a>\n                                        <a href=\"{{ path('delete_ignore_origin_rule', {id: ignore_origin_rule.id}) }}\" title=\"{{ 'config.form_rules.delete_rule_label'|trans }}\" class=\"delete\">\n                                            <i class=\"tool grey-text material-icons\">delete</i>\n                                        </a>\n                                    </li>\n                                    {% endfor %}\n                                </ul>\n                            </div>\n                        </div>\n                        {% endif %}\n\n                        {{ form_start(form.new_ignore_origin_user_rule) }}\n                            {{ form_errors(form.new_ignore_origin_user_rule) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.new_ignore_origin_user_rule.rule) }}\n                                    {{ form_errors(form.new_ignore_origin_user_rule.rule) }}\n                                    {{ form_widget(form.new_ignore_origin_user_rule.rule) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.new_ignore_origin_user_rule.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.new_ignore_origin_user_rule) }}\n                        </form>\n\n\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <h4>{{ 'config.form_ignore_origin_rules.faq.title'|trans }}</h4>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.ignore_origin_rules_definition_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_ignore_origin_rules.faq.ignore_origin_rules_definition_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.how_to_use_them_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_ignore_origin_rules.faq.how_to_use_them_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.variables_available_title'|trans }}</h5>\n                                <p class=\"help\">\n                                    {{ 'config.form_ignore_origin_rules.faq.variables_available_description'|trans }}\n                                </p>\n\n                                <table class=\"bordered\">\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.variable_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.meaning'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.operator_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.meaning'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>host</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.variable_description.host'|trans }}</td>\n                                            <td>=</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.operator_description.equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>_all</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.variable_description._all'|trans }}</td>\n                                            <td>~</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.operator_description.matches'|trans|raw }}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"set7\" class=\"col s12\">\n                        <div class=\"row\">\n                            <h5>{{ 'config.reset.title'|trans }}</h5>\n                            <p>{{ 'config.reset.description'|trans }}</p>\n                            <a href=\"{{ path('config_reset', {type: 'annotations'}) }}\" onclick=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" class=\"waves-effect waves-light btn red\">\n                                {{ 'config.reset.annotations'|trans }}\n                            </a>\n                            <a href=\"{{ path('config_reset', {type: 'tags'}) }}\" onclick=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" class=\"waves-effect waves-light btn red\">\n                                {{ 'config.reset.tags'|trans }}\n                            </a>\n                            <a href=\"{{ path('config_reset', {type: 'archived'}) }}\" onclick=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" class=\"waves-effect waves-light btn red\">\n                                {{ 'config.reset.archived'|trans }}\n                            </a>\n                            <a href=\"{{ path('config_reset', {type: 'entries'}) }}\" onclick=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" class=\"waves-effect waves-light btn red\">\n                                {{ 'config.reset.entries'|trans }}\n                            </a>\n                        </div>\n\n                        {% if enabled_users > 1 %}\n                            <br /><hr /><br />\n\n                            <div class=\"row\">\n                                <h5>{{ 'config.form_user.delete.title'|trans }}</h5>\n                                <p>{{ 'config.form_user.delete.description'|trans }}</p>\n                                <form action=\"{{ path('delete_account') }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.form_user.delete.confirm'|trans|escape('js') }}')\" name=\"delete-account\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('delete-account') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.form_user.delete.button'|trans }}</button>\n                                </form>\n                            </div>\n                        {% endif %}\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n{% endblock %}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Craue\\ConfigBundle\\Util\\Config;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Config as ConfigEntity;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\nuse Wallabag\\CoreBundle\\Entity\\IgnoreOriginUserRule;\nuse Wallabag\\CoreBundle\\Entity\\Tag;\nuse Wallabag\\CoreBundle\\Entity\\TaggingRule;\nuse Wallabag\\UserBundle\\Entity\\User;\n\nclass ConfigControllerTest extends WallabagCoreTestCase\n{\n    public function testLogin()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/new');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testIndex()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertCount(1, $crawler->filter('button[id=config_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=change_passwd_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=update_user_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=feed_config_save]'));\n    }\n\n    public function testUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $data = [\n            'config[items_per_page]' => '30',\n            'config[reading_speed]' => '100',\n            'config[action_mark_as_read]' => '0',\n            'config[language]' => 'en',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.config_saved', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function testChangeReadingSpeed()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $entry = new Entry($this->getLoggedInUser());\n        $entry->setUrl('http://0.0.0.0/test-entry1')\n            ->setReadingTime(22);\n        $this->getEntityManager()->persist($entry);\n\n        $this->getEntityManager()->flush();\n        $this->getEntityManager()->clear();\n\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $dataFilters = [\n            'entry_filter[readingTime][right_number]' => 22,\n            'entry_filter[readingTime][left_number]' => 22,\n        ];\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Change reading speed\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '400',\n        ];\n        $client->submit($form, $data);\n\n        // Is the entry still available via filters?\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Restore old configuration\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '100',\n        ];\n        $client->submit($form, $data);\n    }\n\n    public function dataForUpdateFailed()\n    {\n        return [\n            [[\n                'config[items_per_page]' => '',\n                'config[language]' => 'en',\n            ]],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUpdateFailed\n     */\n    public function testUpdateFailed($data)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('This value should not be blank', $alert[0]);\n    }\n\n    public function dataForChangePasswordFailed()\n    {\n        return [\n            [\n                [\n                    'change_passwd[old_password]' => 'material',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_wrong_value',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'This value should not be blank',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_must_match',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => 'hop',\n                ],\n                'validator.password_too_short',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForChangePasswordFailed\n     */\n    public function testChangePasswordFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testChangePassword()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.password_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForUserFailed()\n    {\n        return [\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => '',\n                ],\n                'fos_user.email.blank',\n            ],\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => 'test',\n                ],\n                'fos_user.email.invalid',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUserFailed\n     */\n    public function testUserFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testUserUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $data = [\n            'update_user[name]' => 'new name',\n            'update_user[email]' => 'admin@wallabag.io',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.user_updated', $alert[0]);\n    }\n\n    public function testFeedUpdateResetToken()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        // reset the token\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        if (!$user) {\n            $this->markTestSkipped('No user found in db.');\n        }\n\n        $config = $user->getConfig();\n        $config->setFeedToken(null);\n        $em->persist($config);\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.no_token', $body[0]);\n\n        $client->request('GET', '/generate-token');\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.token_reset', $body[0]);\n    }\n\n    public function testGenerateTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request(\n            'GET',\n            '/generate-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('token', $content);\n    }\n\n    public function testRevokeTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request(\n            'GET',\n            '/revoke-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testFeedUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $data = [\n            'feed_config[feed_limit]' => 12,\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.feed_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForFeedFailed()\n    {\n        return [\n            [\n                [\n                    'feed_config[feed_limit]' => 0,\n                ],\n                'This value should be between 1 and 100000.',\n            ],\n            [\n                [\n                    'feed_config[feed_limit]' => 1000000000000,\n                ],\n                'validator.feed_limit_too_high',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForFeedFailed\n     */\n    public function testFeedFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testTaggingRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 3',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('.mode_edit_tagging_rule')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?tagging-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 30',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('readingTime <= 30', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('.delete_tagging_rule')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForTaggingRuleFailed()\n    {\n        return [\n            [\n                [\n                    'tagging_rule[rule]' => 'unknownVar <= 3',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'tagging_rule[rule]' => 'length(domainName) <= 42',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForTaggingRuleFailed\n     */\n    public function testTaggingRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testTaggingRuleTooLong()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, [\n            'tagging_rule[rule]' => str_repeat('title', 60),\n            'tagging_rule[tags]' => 'cool tag',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        $this->assertStringContainsString('255 characters', $body[0]);\n    }\n\n    public function testDeletingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(TaggingRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/delete/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(TaggingRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testIgnoreOriginRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.com\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set6] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?ignore-origin-user-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.org\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('host = \"example.org\"', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set6] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForIgnoreOriginRuleCreationFail()\n    {\n        return [\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => 'foo = \"bar\"',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => '_all != \"none\"',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForIgnoreOriginRuleCreationFail\n     */\n    public function testIgnoreOriginRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testDeletingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(IgnoreOriginUserRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(IgnoreOriginUserRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testDemoMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $config = $client->getContainer()->get(Config::class);\n        $config->set('demo_mode_enabled', 1);\n        $config->set('demo_mode_username', 'admin');\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.password_not_updated_demo', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $config->set('demo_mode_enabled', 0);\n        $config->set('demo_mode_username', 'wallabag');\n    }\n\n    public function testDeleteUserButtonVisibility()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_user.delete.button', $body[0]);\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('empty');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('bob');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringNotContainsString('config.form_user.delete.button', $body[0]);\n\n        $client->request('POST', '/account/delete');\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('empty');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('bob');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $em->flush();\n    }\n\n    /**\n     * @group NetworkCalls\n     */\n    public function testDeleteAccount()\n    {\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = new User();\n        $user->setName('Wallace');\n        $user->setEmail('wallace@wallabag.org');\n        $user->setUsername('wallace');\n        $user->setPlainPassword('wallace');\n        $user->setEnabled(true);\n        $user->addRole('ROLE_SUPER_ADMIN');\n\n        $em->persist($user);\n\n        $config = new ConfigEntity($user);\n\n        $config->setItemsPerPage(30);\n        $config->setReadingSpeed(200);\n        $config->setLanguage('en');\n        $config->setPocketConsumerKey('xxxxx');\n\n        $em->persist($config);\n        $em->flush();\n\n        $this->logInAs('wallace');\n        $loggedInUserId = $this->getLoggedInUserId();\n\n        // create entry to check after user deletion\n        // that this entry is also deleted\n        $crawler = $client->request('GET', '/new');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=entry]')->form();\n        $data = [\n            'entry[url]' => $url = 'https://github.com/wallabag/wallabag',\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->request('GET', '/config');\n\n        $deleteForm = $crawler->filter('form[name=delete-account]')->form();\n\n        $client->submit($deleteForm);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $user = $em\n            ->getRepository(User::class)\n            ->createQueryBuilder('u')\n            ->where('u.username = :username')->setParameter('username', 'wallace')\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n\n        $this->assertNull($user);\n\n        $entries = $client->getContainer()\n            ->get(EntityManagerInterface::class)\n            ->getRepository(Entry::class)\n            ->findByUser($loggedInUserId);\n\n        $this->assertEmpty($entries);\n    }\n\n    public function testReset()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $entry2 = new Entry($user);\n        $entry2->setUrl('http://www.lemonde.de/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry2->setContent('Youhou');\n        $entry2->setTitle('Youhou');\n        $entry2->addTag($tag);\n        $em->persist($entry2);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        // reset annotations\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.annotations')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.annotations_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n\n        // reset tags\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.tags')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.tags_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        // reset entries\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n    }\n\n    public function testResetArchivedEntries()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $tagArchived = new Tag();\n        $tagArchived->setLabel('super');\n        $em->persist($tagArchived);\n\n        $entryArchived = new Entry($user);\n        $entryArchived->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entryArchived->setContent('Youhou');\n        $entryArchived->setTitle('Youhou');\n        $entryArchived->addTag($tagArchived);\n        $entryArchived->updateArchived(true);\n        $em->persist($entryArchived);\n\n        $annotationArchived = new Annotation($user);\n        $annotationArchived->setText('annotated');\n        $annotationArchived->setQuote('annotated');\n        $annotationArchived->setRanges([]);\n        $annotationArchived->setEntry($entryArchived);\n        $em->persist($annotationArchived);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.archived')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.archived_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(1, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(1, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($annotationArchived->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testResetEntriesCascade()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->click($crawler->selectLink('config.reset.entries')->link());\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testSwitchViewMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('row data', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n        $crawler = $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('collection', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n\n    public function testChangeLocaleWithoutReferer()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testChangeLocaleWithReferer()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testChangeLocaleToBadLocale()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/yuyuyuyu');\n        $client->followRedirect();\n\n        $this->assertNotSame('yuyuyuyu', $client->getRequest()->getLocale());\n        $this->assertNotSame('yuyuyuyu', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testUserEnable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/email');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_enabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isEmailTwoFactor());\n\n        $user->setEmailTwoFactor(false);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserDisable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/email/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isEmailTwoFactor());\n    }\n\n    public function testUserEnable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $user->setGoogleAuthenticatorSecret(false);\n        $user->setBackupCodes(null);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserEnable2faGoogleCancel()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $crawler = $client->request('GET', '/config/otp/app/cancel');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isGoogleTwoFactor());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testUserDisable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertEmpty($user->getGoogleAuthenticatorSecret());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testExportTaggingRule()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/tagging-rule/export');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"tagging_rules_admin.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n\n        $this->assertCount(4, $content);\n        $this->assertSame('content matches \"spurs\"', $content[0]['rule']);\n        $this->assertSame('sport', $content[0]['tags'][0]);\n    }\n\n    public function testImportTagginfRuleBadFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $data = [\n            'upload_tagging_rule_file[file]' => '',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n    }\n\n    public function testImportTagginfRuleFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $file = new UploadedFile(__DIR__ . '/../fixtures/tagging_rules_admin.json', 'tagging_rules_admin.json');\n\n        $data = [\n            'upload_tagging_rule_file[file]' => $file,\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $client->getContainer()->get('fos_user.user_manager.test')->findUserBy(['username' => 'admin']);\n        $taggingRules = $user->getConfig()->getTaggingRules()->toArray();\n        $this->assertCount(5, $taggingRules);\n        $this->assertSame('title matches \"football\"', $taggingRules[4]->getRule());\n    }\n\n    public function testSwitchDisplayThumbnails()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        // Change configuration to show thumbnails\n        $crawler = $client->request('GET', '/config');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[display_thumbnails]' => true,\n        ];\n        $client->submit($form, $data);\n        $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('class=\"preview\"', $client->getResponse()->getContent());\n\n        // Change configuration to hide thumbnails\n        $crawler = $client->request('GET', '/config');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[display_thumbnails]' => false,\n        ];\n        $client->submit($form, $data);\n        $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringNotContainsString('class=\"preview\"', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Wallabag\\CoreBundle\\Controller;\n\nuse Craue\\ConfigBundle\\Util\\Config;\nuse Doctrine\\DBAL\\Platforms\\SqlitePlatform;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse FOS\\UserBundle\\Model\\UserManagerInterface;\nuse JMS\\Serializer\\SerializationContext;\nuse JMS\\Serializer\\SerializerBuilder;\nuse PragmaRX\\Recovery\\Recovery as BackupCodes;\nuse Scheb\\TwoFactorBundle\\Security\\TwoFactor\\Provider\\Google\\GoogleAuthenticatorInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Symfony\\Component\\Validator\\Constraints\\Locale as LocaleConstraint;\nuse Symfony\\Component\\Validator\\Validator\\ValidatorInterface;\nuse Wallabag\\AnnotationBundle\\Repository\\AnnotationRepository;\nuse Wallabag\\CoreBundle\\Entity\\Config as ConfigEntity;\nuse Wallabag\\CoreBundle\\Entity\\IgnoreOriginUserRule;\nuse Wallabag\\CoreBundle\\Entity\\RuleInterface;\nuse Wallabag\\CoreBundle\\Entity\\TaggingRule;\nuse Wallabag\\CoreBundle\\Form\\Type\\ChangePasswordType;\nuse Wallabag\\CoreBundle\\Form\\Type\\ConfigType;\nuse Wallabag\\CoreBundle\\Form\\Type\\FeedType;\nuse Wallabag\\CoreBundle\\Form\\Type\\IgnoreOriginUserRuleType;\nuse Wallabag\\CoreBundle\\Form\\Type\\TaggingRuleImportType;\nuse Wallabag\\CoreBundle\\Form\\Type\\TaggingRuleType;\nuse Wallabag\\CoreBundle\\Form\\Type\\UserInformationType;\nuse Wallabag\\CoreBundle\\Repository\\ConfigRepository;\nuse Wallabag\\CoreBundle\\Repository\\EntryRepository;\nuse Wallabag\\CoreBundle\\Repository\\IgnoreOriginUserRuleRepository;\nuse Wallabag\\CoreBundle\\Repository\\TaggingRuleRepository;\nuse Wallabag\\CoreBundle\\Repository\\TagRepository;\nuse Wallabag\\CoreBundle\\Tools\\Utils;\nuse Wallabag\\UserBundle\\Repository\\UserRepository;\n\nclass ConfigController extends AbstractController\n{\n    private EntityManagerInterface $entityManager;\n    private UserManagerInterface $userManager;\n    private EntryRepository $entryRepository;\n    private TagRepository $tagRepository;\n    private AnnotationRepository $annotationRepository;\n    private ConfigRepository $configRepository;\n\n    public function __construct(EntityManagerInterface $entityManager, UserManagerInterface $userManager, EntryRepository $entryRepository, TagRepository $tagRepository, AnnotationRepository $annotationRepository, ConfigRepository $configRepository)\n    {\n        $this->entityManager = $entityManager;\n        $this->userManager = $userManager;\n        $this->entryRepository = $entryRepository;\n        $this->tagRepository = $tagRepository;\n        $this->annotationRepository = $annotationRepository;\n        $this->configRepository = $configRepository;\n    }\n\n    /**\n     * @Route(\"/config\", name=\"config\")\n     */\n    public function indexAction(Request $request, Config $craueConfig, TaggingRuleRepository $taggingRuleRepository, IgnoreOriginUserRuleRepository $ignoreOriginUserRuleRepository, UserRepository $userRepository)\n    {\n        $config = $this->getConfig();\n        $user = $this->getUser();\n\n        // handle basic config detail (this form is defined as a service)\n        $configForm = $this->createForm(ConfigType::class, $config, ['action' => $this->generateUrl('config')]);\n        $configForm->handleRequest($request);\n\n        if ($configForm->isSubmitted() && $configForm->isValid()) {\n            $this->entityManager->persist($config);\n            $this->entityManager->flush();\n\n            $request->getSession()->set('_locale', $config->getLanguage());\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.config_saved'\n            );\n\n            return $this->redirect($this->generateUrl('config'));\n        }\n\n        // handle changing password\n        $pwdForm = $this->createForm(ChangePasswordType::class, null, ['action' => $this->generateUrl('config') . '#set4']);\n        $pwdForm->handleRequest($request);\n\n        if ($pwdForm->isSubmitted() && $pwdForm->isValid()) {\n            if ($craueConfig->get('demo_mode_enabled') && $craueConfig->get('demo_mode_username') === $user->getUsername()) {\n                $message = 'flashes.config.notice.password_not_updated_demo';\n            } else {\n                $message = 'flashes.config.notice.password_updated';\n\n                $user->setPlainPassword($pwdForm->get('new_password')->getData());\n                $this->userManager->updateUser($user, true);\n            }\n\n            $this->addFlash('notice', $message);\n\n            return $this->redirect($this->generateUrl('config') . '#set4');\n        }\n\n        // handle changing user information\n        $userForm = $this->createForm(UserInformationType::class, $user, [\n            'validation_groups' => ['Profile'],\n            'action' => $this->generateUrl('config') . '#set3',\n        ]);\n        $userForm->handleRequest($request);\n\n        if ($userForm->isSubmitted() && $userForm->isValid()) {\n            $this->userManager->updateUser($user, true);\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.user_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set3');\n        }\n\n        // handle feed information\n        $feedForm = $this->createForm(FeedType::class, $config, ['action' => $this->generateUrl('config') . '#set2']);\n        $feedForm->handleRequest($request);\n\n        if ($feedForm->isSubmitted() && $feedForm->isValid()) {\n            $this->entityManager->persist($config);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.feed_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set2');\n        }\n\n        // handle tagging rule\n        $taggingRule = new TaggingRule();\n        $action = $this->generateUrl('config') . '#set5';\n\n        if ($request->query->has('tagging-rule')) {\n            $taggingRule = $taggingRuleRepository->find($request->query->get('tagging-rule'));\n\n            if ($this->getUser()->getId() !== $taggingRule->getConfig()->getUser()->getId()) {\n                return $this->redirect($action);\n            }\n\n            $action = $this->generateUrl('config') . '?tagging-rule=' . $taggingRule->getId() . '#set5';\n        }\n\n        $newTaggingRule = $this->createForm(TaggingRuleType::class, $taggingRule, ['action' => $action]);\n        $newTaggingRule->handleRequest($request);\n\n        if ($newTaggingRule->isSubmitted() && $newTaggingRule->isValid()) {\n            $taggingRule->setConfig($config);\n            $this->entityManager->persist($taggingRule);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.tagging_rules_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set5');\n        }\n\n        // handle tagging rules import\n        $taggingRulesImportform = $this->createForm(TaggingRuleImportType::class);\n        $taggingRulesImportform->handleRequest($request);\n\n        if ($taggingRulesImportform->isSubmitted() && $taggingRulesImportform->isValid()) {\n            $message = 'flashes.config.notice.tagging_rules_not_imported';\n            $file = $taggingRulesImportform->get('file')->getData();\n\n            if (null !== $file && $file->isValid() && \\in_array($file->getClientMimeType(), ['application/json', 'application/octet-stream'], true)) {\n                $content = json_decode(file_get_contents($file->getPathname()), true);\n\n                if (\\is_array($content)) {\n                    foreach ($content as $rule) {\n                        $taggingRule = new TaggingRule();\n                        $taggingRule->setRule($rule['rule']);\n                        $taggingRule->setTags($rule['tags']);\n                        $taggingRule->setConfig($config);\n                        $this->entityManager->persist($taggingRule);\n                    }\n\n                    $this->entityManager->flush();\n\n                    $message = 'flashes.config.notice.tagging_rules_imported';\n                }\n            }\n\n            $this->addFlash('notice', $message);\n\n            return $this->redirect($this->generateUrl('config') . '#set5');\n        }\n\n        // handle ignore origin rules\n        $ignoreOriginUserRule = new IgnoreOriginUserRule();\n        $action = $this->generateUrl('config') . '#set6';\n\n        if ($request->query->has('ignore-origin-user-rule')) {\n            $ignoreOriginUserRule = $ignoreOriginUserRuleRepository\n                ->find($request->query->get('ignore-origin-user-rule'));\n\n            if ($this->getUser()->getId() !== $ignoreOriginUserRule->getConfig()->getUser()->getId()) {\n                return $this->redirect($action);\n            }\n\n            $action = $this->generateUrl('config', [\n                'ignore-origin-user-rule' => $ignoreOriginUserRule->getId(),\n            ]) . '#set6';\n        }\n\n        $newIgnoreOriginUserRule = $this->createForm(IgnoreOriginUserRuleType::class, $ignoreOriginUserRule, ['action' => $action]);\n        $newIgnoreOriginUserRule->handleRequest($request);\n\n        if ($newIgnoreOriginUserRule->isSubmitted() && $newIgnoreOriginUserRule->isValid()) {\n            $ignoreOriginUserRule->setConfig($config);\n            $this->entityManager->persist($ignoreOriginUserRule);\n            $this->entityManager->flush();\n\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.ignore_origin_rules_updated'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set6');\n        }\n\n        return $this->render('@WallabagCore/Config/index.html.twig', [\n            'form' => [\n                'config' => $configForm->createView(),\n                'feed' => $feedForm->createView(),\n                'pwd' => $pwdForm->createView(),\n                'user' => $userForm->createView(),\n                'new_tagging_rule' => $newTaggingRule->createView(),\n                'import_tagging_rule' => $taggingRulesImportform->createView(),\n                'new_ignore_origin_user_rule' => $newIgnoreOriginUserRule->createView(),\n            ],\n            'feed' => [\n                'username' => $user->getUsername(),\n                'token' => $config->getFeedToken(),\n            ],\n            'wallabag_url' => $this->getParameter('domain_name'),\n            'enabled_users' => $userRepository->getSumEnabledUsers(),\n        ]);\n    }\n\n    /**\n     * Disable 2FA using email.\n     *\n     * @Route(\"/config/otp/email/disable\", name=\"disable_otp_email\")\n     */\n    public function disableOtpEmailAction()\n    {\n        $user = $this->getUser();\n        $user->setEmailTwoFactor(false);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_disabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Enable 2FA using email.\n     *\n     * @Route(\"/config/otp/email\", name=\"config_otp_email\")\n     */\n    public function otpEmailAction()\n    {\n        $user = $this->getUser();\n\n        $user->setGoogleAuthenticatorSecret(null);\n        $user->setBackupCodes(null);\n        $user->setEmailTwoFactor(true);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_enabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Disable 2FA using OTP app.\n     *\n     * @Route(\"/config/otp/app/disable\", name=\"disable_otp_app\")\n     */\n    public function disableOtpAppAction()\n    {\n        $user = $this->getUser();\n\n        $user->setGoogleAuthenticatorSecret('');\n        $user->setBackupCodes(null);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_disabled'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Enable 2FA using OTP app, user will need to confirm the generated code from the app.\n     *\n     * @Route(\"/config/otp/app\", name=\"config_otp_app\")\n     */\n    public function otpAppAction(GoogleAuthenticatorInterface $googleAuthenticator)\n    {\n        $user = $this->getUser();\n        $secret = $googleAuthenticator->generateSecret();\n\n        $user->setGoogleAuthenticatorSecret($secret);\n        $user->setEmailTwoFactor(false);\n\n        $backupCodes = (new BackupCodes())->toArray();\n        $backupCodesHashed = array_map(\n            function ($backupCode) {\n                return password_hash($backupCode, \\PASSWORD_DEFAULT);\n            },\n            $backupCodes\n        );\n\n        $user->setBackupCodes($backupCodesHashed);\n\n        $this->userManager->updateUser($user, true);\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.otp_enabled'\n        );\n\n        return $this->render('@WallabagCore/Config/otp_app.html.twig', [\n            'backupCodes' => $backupCodes,\n            'qr_code' => $googleAuthenticator->getQRContent($user),\n            'secret' => $secret,\n        ]);\n    }\n\n    /**\n     * Cancelling 2FA using OTP app.\n     *\n     * @Route(\"/config/otp/app/cancel\", name=\"config_otp_app_cancel\")\n     */\n    public function otpAppCancelAction()\n    {\n        $user = $this->getUser();\n        $user->setGoogleAuthenticatorSecret(null);\n        $user->setBackupCodes(null);\n\n        $this->userManager->updateUser($user, true);\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Validate OTP code.\n     *\n     * @Route(\"/config/otp/app/check\", name=\"config_otp_app_check\")\n     */\n    public function otpAppCheckAction(Request $request, GoogleAuthenticatorInterface $googleAuthenticator)\n    {\n        $isValid = $googleAuthenticator->checkCode(\n            $this->getUser(),\n            $request->get('_auth_code')\n        );\n\n        if (true === $isValid) {\n            $this->addFlash(\n                'notice',\n                'flashes.config.notice.otp_enabled'\n            );\n\n            return $this->redirect($this->generateUrl('config') . '#set3');\n        }\n\n        $this->addFlash(\n            'two_factor',\n            'scheb_two_factor.code_invalid'\n        );\n\n        return $this->redirect($this->generateUrl('config_otp_app'));\n    }\n\n    /**\n     * @Route(\"/generate-token\", name=\"generate_token\")\n     *\n     * @return RedirectResponse|JsonResponse\n     */\n    public function generateTokenAction(Request $request)\n    {\n        $config = $this->getConfig();\n        $config->setFeedToken(Utils::generateToken());\n\n        $this->entityManager->persist($config);\n        $this->entityManager->flush();\n\n        if ($request->isXmlHttpRequest()) {\n            return new JsonResponse(['token' => $config->getFeedToken()]);\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.feed_token_updated'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set2');\n    }\n\n    /**\n     * @Route(\"/revoke-token\", name=\"revoke_token\")\n     *\n     * @return RedirectResponse|JsonResponse\n     */\n    public function revokeTokenAction(Request $request)\n    {\n        $config = $this->getConfig();\n        $config->setFeedToken(null);\n\n        $this->entityManager->persist($config);\n        $this->entityManager->flush();\n\n        if ($request->isXmlHttpRequest()) {\n            return new JsonResponse();\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.feed_token_revoked'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set2');\n    }\n\n    /**\n     * Deletes a tagging rule and redirect to the config homepage.\n     *\n     * @Route(\"/tagging-rule/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"delete_tagging_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function deleteTaggingRuleAction(TaggingRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        $this->entityManager->remove($rule);\n        $this->entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.tagging_rules_deleted'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set5');\n    }\n\n    /**\n     * Edit a tagging rule.\n     *\n     * @Route(\"/tagging-rule/edit/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"edit_tagging_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function editTaggingRuleAction(TaggingRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        return $this->redirect($this->generateUrl('config') . '?tagging-rule=' . $rule->getId() . '#set5');\n    }\n\n    /**\n     * Deletes an ignore origin rule and redirect to the config homepage.\n     *\n     * @Route(\"/ignore-origin-user-rule/delete/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"delete_ignore_origin_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function deleteIgnoreOriginRuleAction(IgnoreOriginUserRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        $this->entityManager->remove($rule);\n        $this->entityManager->flush();\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.ignore_origin_rules_deleted'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set6');\n    }\n\n    /**\n     * Edit an ignore origin rule.\n     *\n     * @Route(\"/ignore-origin-user-rule/edit/{id}\", requirements={\"id\" = \"\\d+\"}, name=\"edit_ignore_origin_rule\")\n     *\n     * @return RedirectResponse\n     */\n    public function editIgnoreOriginRuleAction(IgnoreOriginUserRule $rule)\n    {\n        $this->validateRuleAction($rule);\n\n        return $this->redirect($this->generateUrl('config') . '?ignore-origin-user-rule=' . $rule->getId() . '#set6');\n    }\n\n    /**\n     * Remove all annotations OR tags OR entries for the current user.\n     *\n     * @Route(\"/reset/{type}\", requirements={\"id\" = \"annotations|tags|entries\"}, name=\"config_reset\", methods={\"POST\"})\n     *\n     * @return RedirectResponse\n     */\n    public function resetAction(Request $request, string $type, AnnotationRepository $annotationRepository, EntryRepository $entryRepository)\n    {\n        if (!$this->isCsrfTokenValid('reset-area', $request->request->get('token'))) {\n            throw $this->createAccessDeniedException('Bad CSRF token.');\n        }\n\n        switch ($type) {\n            case 'annotations':\n                $annotationRepository->removeAllByUserId($this->getUser()->getId());\n                break;\n            case 'tags':\n                $this->removeAllTagsByUserId($this->getUser()->getId());\n                break;\n            case 'entries':\n                // SQLite doesn't care about cascading remove, so we need to manually remove associated stuff\n                // otherwise they won't be removed ...\n                if ($this->entityManager->getConnection()->getDatabasePlatform() instanceof SqlitePlatform) {\n                    $annotationRepository->removeAllByUserId($this->getUser()->getId());\n                }\n\n                // manually remove tags to avoid orphan tag\n                $this->removeAllTagsByUserId($this->getUser()->getId());\n\n                $entryRepository->removeAllByUserId($this->getUser()->getId());\n                break;\n            case 'archived':\n                if ($this->entityManager->getConnection()->getDatabasePlatform() instanceof SqlitePlatform) {\n                    $this->removeAnnotationsForArchivedByUserId($this->getUser()->getId());\n                }\n\n                // manually remove tags to avoid orphan tag\n                $this->removeTagsForArchivedByUserId($this->getUser()->getId());\n\n                $entryRepository->removeArchivedByUserId($this->getUser()->getId());\n                break;\n        }\n\n        $this->addFlash(\n            'notice',\n            'flashes.config.notice.' . $type . '_reset'\n        );\n\n        return $this->redirect($this->generateUrl('config') . '#set3');\n    }\n\n    /**\n     * Delete account for current user.\n     *\n     * @Route(\"/account/delete\", name=\"delete_account\", methods={\"POST\"})\n     *\n     * @throws AccessDeniedHttpException\n     *\n     * @return RedirectResponse\n     */\n    public function deleteAccountAction(Request $request, UserRepository $userRepository, TokenStorageInterface $tokenStorage)\n    {\n        if (!$this->isCsrfTokenValid('delete-account', $request->request->get('token'))) {\n            throw $this->createAccessDeniedException('Bad CSRF token.');\n        }\n\n        $enabledUsers = $userRepository->getSumEnabledUsers();\n\n        if ($enabledUsers <= 1) {\n            throw new AccessDeniedHttpException();\n        }\n\n        $user = $this->getUser();\n\n        // logout current user\n        $tokenStorage->setToken(null);\n        $request->getSession()->invalidate();\n\n        $this->userManager->deleteUser($user);\n\n        return $this->redirect($this->generateUrl('fos_user_security_login'));\n    }\n\n    /**\n     * Switch view mode for current user.\n     *\n     * @Route(\"/config/view-mode\", name=\"switch_view_mode\")\n     *\n     * @return RedirectResponse\n     */\n    public function changeViewModeAction(Request $request)\n    {\n        $user = $this->getUser();\n        $user->getConfig()->setListMode(!$user->getConfig()->getListMode());\n\n        $this->entityManager->persist($user);\n        $this->entityManager->flush();\n\n        return $this->redirect($request->getSession()->get('prevUrl'));\n    }\n\n    /**\n     * Change the locale for the current user.\n     *\n     * @param string $language\n     *\n     * @Route(\"/locale/{language}\", name=\"changeLocale\")\n     *\n     * @return RedirectResponse\n     */\n    public function setLocaleAction(Request $request, ValidatorInterface $validator, $language = null)\n    {\n        $errors = $validator->validate($language, (new LocaleConstraint()));\n\n        if (0 === \\count($errors)) {\n            $request->getSession()->set('_locale', $language);\n        }\n\n        return $this->redirect($request->headers->get('referer', $this->generateUrl('homepage')));\n    }\n\n    /**\n     * Export tagging rules for the logged in user.\n     *\n     * @Route(\"/tagging-rule/export\", name=\"export_tagging_rule\")\n     *\n     * @return Response\n     */\n    public function exportTaggingRulesAction()\n    {\n        $data = SerializerBuilder::create()->build()->serialize(\n            $this->getUser()->getConfig()->getTaggingRules(),\n            'json',\n            SerializationContext::create()->setGroups(['export_tagging_rule'])\n        );\n\n        return Response::create(\n            $data,\n            200,\n            [\n                'Content-type' => 'application/json',\n                'Content-Disposition' => 'attachment; filename=\"tagging_rules_' . $this->getUser()->getUsername() . '.json\"',\n                'Content-Transfer-Encoding' => 'UTF-8',\n            ]\n        );\n    }\n\n    /**\n     * Remove all tags for given tags and a given user and cleanup orphan tags.\n     *\n     * @param array $tags\n     * @param int   $userId\n     */\n    private function removeAllTagsByStatusAndUserId($tags, $userId)\n    {\n        if (empty($tags)) {\n            return;\n        }\n\n        $this->entryRepository->removeTags($userId, $tags);\n\n        // cleanup orphan tags\n        foreach ($tags as $tag) {\n            if (0 === \\count($tag->getEntries())) {\n                $this->entityManager->remove($tag);\n            }\n        }\n\n        $this->entityManager->flush();\n    }\n\n    /**\n     * Remove all tags for a given user and cleanup orphan tags.\n     *\n     * @param int $userId\n     */\n    private function removeAllTagsByUserId($userId)\n    {\n        $tags = $this->tagRepository->findAllTags($userId);\n        $this->removeAllTagsByStatusAndUserId($tags, $userId);\n    }\n\n    /**\n     * Remove all tags for a given user and cleanup orphan tags.\n     *\n     * @param int $userId\n     */\n    private function removeTagsForArchivedByUserId($userId)\n    {\n        $tags = $this->tagRepository->findForArchivedArticlesByUser($userId);\n        $this->removeAllTagsByStatusAndUserId($tags, $userId);\n    }\n\n    private function removeAnnotationsForArchivedByUserId($userId)\n    {\n        $archivedEntriesAnnotations = $this->annotationRepository\n            ->findAllArchivedEntriesByUser($userId);\n\n        foreach ($archivedEntriesAnnotations as $archivedEntriesAnnotation) {\n            $this->entityManager->remove($archivedEntriesAnnotation);\n        }\n\n        $this->entityManager->flush();\n    }\n\n    /**\n     * Validate that a rule can be edited/deleted by the current user.\n     */\n    private function validateRuleAction(RuleInterface $rule)\n    {\n        if ($this->getUser()->getId() !== $rule->getConfig()->getUser()->getId()) {\n            throw $this->createAccessDeniedException('You can not access this rule.');\n        }\n    }\n\n    /**\n     * Retrieve config for the current user.\n     * If no config were found, create a new one.\n     *\n     * @return ConfigEntity\n     */\n    private function getConfig()\n    {\n        $config = $this->configRepository->findOneByUser($this->getUser());\n\n        // should NEVER HAPPEN ...\n        if (!$config) {\n            $config = new ConfigEntity($this->getUser());\n        }\n\n        return $config;\n    }\n}\n", "{% extends \"@WallabagCore/layout.html.twig\" %}\n\n{% block title %}{{ 'config.page_title'|trans }}{% endblock %}\n\n{% block content %}\n\n    <div class=\"row\">\n        <div class=\"col s12\">\n            <div class=\"card-panel settings\">\n\n                <div class=\"row\">\n                    <div class=\"tabs-container col s12\">\n                        <ul class=\"tabs\">\n                            <li class=\"tab col s12 m6 l3\"><a class=\"active\" href=\"#set1\">{{ 'config.tab_menu.settings'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set2\">{{ 'config.tab_menu.feed'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set3\">{{ 'config.tab_menu.user_info'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set4\">{{ 'config.tab_menu.password'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set5\">{{ 'config.tab_menu.rules'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set6\">{{ 'config.tab_menu.ignore_origin'|trans }}</a></li>\n                            <li class=\"tab col s12 m6 l3\"><a href=\"#set7\">{{ 'config.tab_menu.reset'|trans }}</a></li>\n                        </ul>\n                    </div>\n\n                    <div id=\"set1\" class=\"col s12\">\n                        {{ form_start(form.config) }}\n                            {{ form_errors(form.config) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.items_per_page) }}\n                                    {{ form_widget(form.config.items_per_page) }}\n                                    {{ form_label(form.config.items_per_page) }}\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_items_per_page'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s11 settings-checkbox-col\">\n                                {{ form_errors(form.config.display_thumbnails) }}\n                                {{ form_widget(form.config.display_thumbnails) }}\n                                {{ form_label(form.config.display_thumbnails, null, {'label_attr': {'class': 'settings-checkbox-label'}}) }}\n                            </div>\n                            <div class=\"input-field col s1\">\n                                <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_display_thumbnails'|trans }}\">\n                                    <i class=\"material-icons\">live_help</i>\n                                </a>\n                            </div>\n                        </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.reading_speed) }}\n                                    {{ form_widget(form.config.reading_speed) }}\n                                    {{ form_label(form.config.reading_speed) }}\n                                    <p>\n                                        {{ 'config.form_settings.reading_speed.help_message'|trans }}\n                                        <a target=\"_blank\" href=\"https://wallabag.github.io/myreadspeed/\">myreadspeed</a>\n                                    </p>\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_reading_speed'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.action_mark_as_read) }}\n                                    {{ form_widget(form.config.action_mark_as_read) }}\n                                    {{ form_label(form.config.action_mark_as_read) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.language) }}\n                                    {{ form_widget(form.config.language) }}\n                                    {{ form_label(form.config.language) }}\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_language'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s11\">\n                                    {{ form_errors(form.config.pocket_consumer_key) }}\n                                    {{ form_widget(form.config.pocket_consumer_key) }}\n                                    {{ form_label(form.config.pocket_consumer_key) }}\n                                    <p>\n                                        &raquo;\n                                        <a target=\"_blank\" href=\"https://getpocket.com/developer/docs/authentication\">https://getpocket.com/developer/docs/authentication</a>\n                                    </p>\n                                </div>\n                                <div class=\"input-field col s1\">\n                                    <a href=\"#\" class=\"tooltipped\" data-position=\"left\" data-delay=\"50\" data-tooltip=\"{{ 'config.form_settings.help_pocket_consumer_key'|trans }}\">\n                                        <i class=\"material-icons\">live_help</i>\n                                    </a>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    <h5>{{ 'config.form_settings.android_configuration'|trans }}</h5>\n                                    <a href=\"wallabag://{{ app.user.username }}@{{ wallabag_url }}\" class=\"waves-effect waves-light btn hide-on-large-only\">{{ 'config.form_settings.android_instruction'|trans }}</a>\n                                    <img id=\"androidQrcode\" class=\"hide-on-med-and-down\" alt=\"{{ 'config.otp.app.qrcode_label'|trans }}\" />\n                                </div>\n                                <script>\n                                    document.getElementById('androidQrcode').src = jrQrcode.getQrBase64('wallabag://{{ app.user.username }}@{{ wallabag_url }}');\n                                </script>\n                            </div>\n\n                            {{ form_widget(form.config.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.config) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set2\" class=\"col s12\">\n                        {{ form_start(form.feed) }}\n                            {{ form_errors(form.feed) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ 'config.form_feed.description'|trans }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_feed.token_label'|trans }}</h6>\n                                    <div>\n                                        {% if feed.token %}\n                                            {{ feed.token }}\n                                        {% else %}\n                                            <em>{{ 'config.form_feed.no_token'|trans }}</em>\n                                        {% endif %}\n\n                                        {% if feed.token %}\n                                            \u2013 <a href=\"{{ path('generate_token') }}\">{{ 'config.form_feed.token_reset'|trans }}</a>\n                                            \u2013 <a href=\"{{ path('revoke_token') }}\">{{ 'config.form_feed.token_revoke'|trans }}</a>\n                                        {% else %}\n                                            \u2013 <a href=\"{{ path('generate_token') }}\">{{ 'config.form_feed.token_create'|trans }}</a>\n                                        {% endif %}\n                                    </div>\n                                </div>\n                            </div>\n                            {% if feed.token %}\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_feed.feed_links'|trans }}</h6>\n                                    <ul>\n                                        <li><a href=\"{{ path('unread_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.unread'|trans }}</a></li>\n                                        <li><a href=\"{{ path('starred_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.starred'|trans }}</a></li>\n                                        <li><a href=\"{{ path('archive_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.archive'|trans }}</a></li>\n                                        <li><a href=\"{{ path('all_feed', {'username': feed.username, 'token': feed.token}) }}\">{{ 'config.form_feed.feed_link.all'|trans }}</a></li>\n                                    </ul>\n                                </div>\n                            </div>\n                            {% endif %}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.feed.feed_limit) }}\n                                    {{ form_errors(form.feed.feed_limit) }}\n                                    {{ form_widget(form.feed.feed_limit) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.feed.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.feed) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set3\" class=\"col s12\">\n                        {{ form_start(form.user) }}\n                            {{ form_errors(form.user) }}\n\n                            <div class=\"row\">\n                                <div class=\"col s12\">\n                                    <h6 class=\"grey-text\">{{ 'config.form_user.login_label'|trans }}</h6>\n                                    <div>\n                                        {{ app.user.username }}\n                                    </div>\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.user.name) }}\n                                    {{ form_errors(form.user.name) }}\n                                    {{ form_widget(form.user.name) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.user.email) }}\n                                    {{ form_errors(form.user.email) }}\n                                    {{ form_widget(form.user.email) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.user.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n\n                            <br/>\n                            <br/>\n                            <div class=\"row\">\n                                <h5>{{ 'config.otp.page_title'|trans }}</h5>\n\n                                <p>{{ 'config.form_user.two_factor_description'|trans }}</p>\n\n                                <table>\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_user.two_factor.table_method'|trans }}</th>\n                                            <th>{{ 'config.form_user.two_factor.table_state'|trans }}</th>\n                                            <th>{{ 'config.form_user.two_factor.table_action'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>{{ 'config.form_user.two_factor.emailTwoFactor_label'|trans }}</td>\n                                            <td>{% if app.user.isEmailTwoFactor %}<b>{{ 'config.form_user.two_factor.state_enabled'|trans }}</b>{% else %}{{ 'config.form_user.two_factor.state_disabled'|trans }}{% endif %}</td>\n                                            <td><a href=\"{{ path('config_otp_email') }}\" class=\"waves-effect waves-light btn{% if app.user.isEmailTwoFactor %} disabled{% endif %}\">{{ 'config.form_user.two_factor.action_email'|trans }}</a> {% if app.user.isEmailTwoFactor %}<a href=\"{{ path('disable_otp_email') }}\" class=\"waves-effect waves-light btn red\">Disable</a>{% endif %}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>{{ 'config.form_user.two_factor.googleTwoFactor_label'|trans }}</td>\n                                            <td>{% if app.user.isGoogleTwoFactor %}<b>{{ 'config.form_user.two_factor.state_enabled'|trans }}</b>{% else %}{{ 'config.form_user.two_factor.state_disabled'|trans }}{% endif %}</td>\n                                            <td><a href=\"{{ path('config_otp_app') }}\" class=\"waves-effect waves-light btn{% if app.user.isGoogleTwoFactor %} disabled{% endif %}\">{{ 'config.form_user.two_factor.action_app'|trans }}</a> {% if app.user.isGoogleTwoFactor %}<a href=\"{{ path('disable_otp_app') }}\" class=\"waves-effect waves-light btn red\">Disable</a>{% endif %}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                            {{ form_widget(form.user._token) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set4\" class=\"col s12\">\n                        {{ form_start(form.pwd) }}\n                            {{ form_errors(form.pwd) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ 'config.form_password.description'|trans }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.old_password) }}\n                                    {{ form_errors(form.pwd.old_password) }}\n                                    {{ form_widget(form.pwd.old_password) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.new_password.first) }}\n                                    {{ form_errors(form.pwd.new_password.first) }}\n                                    {{ form_widget(form.pwd.new_password.first) }}\n                                </div>\n                            </div>\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.pwd.new_password.second) }}\n                                    {{ form_errors(form.pwd.new_password.second) }}\n                                    {{ form_widget(form.pwd.new_password.second) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.pwd.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.pwd) }}\n                        </form>\n                    </div>\n\n                    <div id=\"set5\" class=\"col s12\">\n                        {% if app.user.config.taggingRules is not empty %}\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <ul>\n                                    {% for tagging_rule in app.user.config.taggingRules %}\n                                    <li>\n                                        {{ 'config.form_rules.if_label'|trans }}\n                                        \u00ab {{ tagging_rule.rule }} \u00bb\n                                        {{ 'config.form_rules.then_tag_as_label'|trans }}\n                                        \u00ab {{ tagging_rule.tags|join(', ') }} \u00bb\n\n                                        <a href=\"{{ path('edit_tagging_rule', {id: tagging_rule.id}) }}\" title=\"{{ 'config.form_rules.edit_rule_label'|trans }}\" class=\"mode_edit_tagging_rule\">\n                                            <i class=\"tool grey-text material-icons\">mode_edit</i>\n                                        </a>\n                                        <a href=\"{{ path('delete_tagging_rule', {id: tagging_rule.id}) }}\" title=\"{{ 'config.form_rules.delete_rule_label'|trans }}\" class=\"delete_tagging_rule\">\n                                            <i class=\"tool grey-text material-icons\">delete</i>\n                                        </a>\n                                    </li>\n                                    {% endfor %}\n                                </ul>\n                            </div>\n                        </div>\n                        {% endif %}\n\n                        <ul class=\"row\">\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.new_tagging_rule'|trans }}</span>\n\n                                        {{ form_start(form.new_tagging_rule) }}\n                                        {{ form_errors(form.new_tagging_rule) }}\n\n                                        <div class=\"row\">\n                                            <div class=\"input-field col s12\">\n                                                {{ form_label(form.new_tagging_rule.rule) }}\n                                                {{ form_errors(form.new_tagging_rule.rule) }}\n                                                {{ form_widget(form.new_tagging_rule.rule) }}\n                                            </div>\n                                        </div>\n\n                                        <div class=\"row\">\n                                            <div class=\"input-field col s12\">\n                                                {{ form_label(form.new_tagging_rule.tags) }}\n                                                {{ form_errors(form.new_tagging_rule.tags) }}\n                                                {{ form_widget(form.new_tagging_rule.tags) }}\n                                            </div>\n                                        </div>\n\n                                        {{ form_widget(form.new_tagging_rule.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                                        {{ form_rest(form.new_tagging_rule) }}\n                                    </form>\n                                    </div>\n                                </div>\n                            </li>\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card z-depth-1\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.import_tagging_rules'|trans }}</span>\n                                        <p>{{ 'config.form_rules.card.import_tagging_rules_detail'|trans }}</p>\n                                        {{ form_start(form.import_tagging_rule) }}\n                                            {{ form_errors(form.import_tagging_rule) }}\n                                            <div class=\"row\">\n                                                <div class=\"file-field input-field col s12\">\n                                                    {{ form_errors(form.import_tagging_rule.file) }}\n                                                    <div class=\"btn\">\n                                                        <span>{{ form.import_tagging_rule.file.vars.label|trans }}</span>\n                                                        {{ form_widget(form.import_tagging_rule.file) }}\n                                                    </div>\n                                                    <div class=\"file-path-wrapper\">\n                                                        <input class=\"file-path validate\" type=\"text\">\n                                                    </div>\n                                                </div>\n                                            </div>\n\n                                            {{ form_widget(form.import_tagging_rule.import, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n\n                                            {{ form_rest(form.import_tagging_rule) }}\n                                        </form>\n                                    </div>\n                                </div>\n                            </li>\n                            {% if app.user.config.taggingRules is not empty %}\n                            <li class=\"col l6 m6 s12\">\n                                <div class=\"card z-depth-1\">\n                                    <div class=\"card-content\">\n                                        <span class=\"card-title\">{{ 'config.form_rules.card.export_tagging_rules'|trans }}</span>\n                                        <p>{{ 'config.form_rules.card.export_tagging_rules_detail'|trans }}</p>\n                                        <br/>\n                                        <p><a href=\"{{ path('export_tagging_rule') }}\" class=\"waves-effect waves-light btn\">{{ 'config.form_rules.export'|trans }}</a></p>\n                                    </div>\n                                </div>\n                            </li>\n                            {% endif %}\n                        </ul>\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <h4>{{ 'config.form_rules.faq.title'|trans }}</h4>\n\n                                <h5>{{ 'config.form_rules.faq.tagging_rules_definition_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_rules.faq.tagging_rules_definition_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_rules.faq.how_to_use_them_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_rules.faq.how_to_use_them_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_rules.faq.variables_available_title'|trans }}</h5>\n                                <p class=\"help\">\n                                    {{ 'config.form_rules.faq.variables_available_description'|trans }}\n                                </p>\n\n                                <table class=\"bordered\">\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_rules.faq.variable_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.meaning'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.operator_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_rules.faq.meaning'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>title</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.title'|trans }}</td>\n                                            <td>&lt;=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.less_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>url</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.url'|trans }}</td>\n                                            <td>&lt;</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.strictly_less_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>isArchived</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.isArchived'|trans }}</td>\n                                            <td>&gt;=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.greater_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>isStarred</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.isStarred'|trans }}</td>\n                                            <td>&gt;</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.strictly_greater_than'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>content</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.content'|trans }}</td>\n                                            <td>=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>language</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.language'|trans }}</td>\n                                            <td>!=</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.not_equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>mimetype</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.mimetype'|trans }}</td>\n                                            <td>OR</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.or'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>readingTime</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.readingTime'|trans }}</td>\n                                            <td>AND</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.and'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>domainName</td>\n                                            <td>{{ 'config.form_rules.faq.variable_description.domainName'|trans }}</td>\n                                            <td>matches<br />notmaches</td>\n                                            <td>{{ 'config.form_rules.faq.operator_description.matches'|trans|raw }}<br />{{ 'config.form_rules.faq.operator_description.notmatches'|trans|raw }}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"set6\" class=\"col s12\">\n                        {% if app.user.config.ignoreOriginRules is not empty %}\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <ul>\n                                    {% for ignore_origin_rule in app.user.config.ignoreOriginRules %}\n                                    <li>\n                                        {{ 'config.form_rules.if_label'|trans }}\n                                        \u00ab {{ ignore_origin_rule.rule }} \u00bb\n                                        <a href=\"{{ path('edit_ignore_origin_rule', {id: ignore_origin_rule.id}) }}\" title=\"{{ 'config.form_rules.edit_rule_label'|trans }}\" class=\"mode_edit\">\n                                            <i class=\"tool grey-text material-icons\">mode_edit</i>\n                                        </a>\n                                        <a href=\"{{ path('delete_ignore_origin_rule', {id: ignore_origin_rule.id}) }}\" title=\"{{ 'config.form_rules.delete_rule_label'|trans }}\" class=\"delete\">\n                                            <i class=\"tool grey-text material-icons\">delete</i>\n                                        </a>\n                                    </li>\n                                    {% endfor %}\n                                </ul>\n                            </div>\n                        </div>\n                        {% endif %}\n\n                        {{ form_start(form.new_ignore_origin_user_rule) }}\n                            {{ form_errors(form.new_ignore_origin_user_rule) }}\n\n                            <div class=\"row\">\n                                <div class=\"input-field col s12\">\n                                    {{ form_label(form.new_ignore_origin_user_rule.rule) }}\n                                    {{ form_errors(form.new_ignore_origin_user_rule.rule) }}\n                                    {{ form_widget(form.new_ignore_origin_user_rule.rule) }}\n                                </div>\n                            </div>\n\n                            {{ form_widget(form.new_ignore_origin_user_rule.save, {'attr': {'class': 'btn waves-effect waves-light'}}) }}\n                            {{ form_rest(form.new_ignore_origin_user_rule) }}\n                        </form>\n\n\n\n                        <div class=\"row\">\n                            <div class=\"input-field col s12\">\n                                <h4>{{ 'config.form_ignore_origin_rules.faq.title'|trans }}</h4>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.ignore_origin_rules_definition_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_ignore_origin_rules.faq.ignore_origin_rules_definition_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.how_to_use_them_title'|trans }}</h5>\n                                <p class=\"help\">{{ 'config.form_ignore_origin_rules.faq.how_to_use_them_description'|trans|raw }}</p>\n\n                                <h5>{{ 'config.form_ignore_origin_rules.faq.variables_available_title'|trans }}</h5>\n                                <p class=\"help\">\n                                    {{ 'config.form_ignore_origin_rules.faq.variables_available_description'|trans }}\n                                </p>\n\n                                <table class=\"bordered\">\n                                    <thead>\n                                        <tr>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.variable_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.meaning'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.operator_description.label'|trans }}</th>\n                                            <th>{{ 'config.form_ignore_origin_rules.faq.meaning'|trans }}</th>\n                                        </tr>\n                                    </thead>\n\n                                    <tbody>\n                                        <tr>\n                                            <td>host</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.variable_description.host'|trans }}</td>\n                                            <td>=</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.operator_description.equal_to'|trans }}</td>\n                                        </tr>\n                                        <tr>\n                                            <td>_all</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.variable_description._all'|trans }}</td>\n                                            <td>~</td>\n                                            <td>{{ 'config.form_ignore_origin_rules.faq.operator_description.matches'|trans|raw }}</td>\n                                        </tr>\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div id=\"set7\" class=\"col s12\">\n                        <div class=\"row\">\n                            <h5>{{ 'config.reset.title'|trans }}</h5>\n                            <p>{{ 'config.reset.description'|trans }}</p>\n                            <p>\n                                <form action=\"{{ path('config_reset', { type: 'annotations' }) }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" name=\"reset-annotations\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('reset-area') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.reset.annotations'|trans }}</button>\n                                </form>\n                            </p>\n                            <p>\n                                <form action=\"{{ path('config_reset', { type: 'tags' }) }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" name=\"reset-tags\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('reset-area') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.reset.tags'|trans }}</button>\n                                </form>\n                            </p>\n                            <p>\n                                <form action=\"{{ path('config_reset', { type: 'archived' }) }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" name=\"reset-archived\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('reset-area') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.reset.archived'|trans }}</button>\n                                </form>\n                            </p>\n                            <p>\n                                <form action=\"{{ path('config_reset', { type: 'entries' }) }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.reset.confirm'|trans|escape('js') }}')\" name=\"reset-entries\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('reset-area') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.reset.entries'|trans }}</button>\n                                </form>\n                            </p>\n                        </div>\n\n                        {% if enabled_users > 1 %}\n                            <br /><hr /><br />\n\n                            <div class=\"row\">\n                                <h5>{{ 'config.form_user.delete.title'|trans }}</h5>\n                                <p>{{ 'config.form_user.delete.description'|trans }}</p>\n                                <form action=\"{{ path('delete_account') }}\" method=\"post\" onsubmit=\"return confirm('{{ 'config.form_user.delete.confirm'|trans|escape('js') }}')\" name=\"delete-account\">\n                                    <input type=\"hidden\" name=\"token\" value=\"{{ csrf_token('delete-account') }}\" />\n\n                                    <button class=\"waves-effect waves-light btn red\" type=\"submit\">{{ 'config.form_user.delete.button'|trans }}</button>\n                                </form>\n                            </div>\n                        {% endif %}\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </div>\n{% endblock %}\n", "<?php\n\nnamespace Tests\\Wallabag\\CoreBundle\\Controller;\n\nuse Craue\\ConfigBundle\\Util\\Config;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Component\\HttpFoundation\\File\\UploadedFile;\nuse Symfony\\Component\\HttpFoundation\\Session\\SessionInterface;\nuse Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface;\nuse Tests\\Wallabag\\CoreBundle\\WallabagCoreTestCase;\nuse Wallabag\\AnnotationBundle\\Entity\\Annotation;\nuse Wallabag\\CoreBundle\\Entity\\Config as ConfigEntity;\nuse Wallabag\\CoreBundle\\Entity\\Entry;\nuse Wallabag\\CoreBundle\\Entity\\IgnoreOriginUserRule;\nuse Wallabag\\CoreBundle\\Entity\\Tag;\nuse Wallabag\\CoreBundle\\Entity\\TaggingRule;\nuse Wallabag\\UserBundle\\Entity\\User;\n\nclass ConfigControllerTest extends WallabagCoreTestCase\n{\n    public function testLogin()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/new');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('login', $client->getResponse()->headers->get('location'));\n    }\n\n    public function testIndex()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertCount(1, $crawler->filter('button[id=config_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=change_passwd_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=update_user_save]'));\n        $this->assertCount(1, $crawler->filter('button[id=feed_config_save]'));\n    }\n\n    public function testUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $data = [\n            'config[items_per_page]' => '30',\n            'config[reading_speed]' => '100',\n            'config[action_mark_as_read]' => '0',\n            'config[language]' => 'en',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.config_saved', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function testChangeReadingSpeed()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $entry = new Entry($this->getLoggedInUser());\n        $entry->setUrl('http://0.0.0.0/test-entry1')\n            ->setReadingTime(22);\n        $this->getEntityManager()->persist($entry);\n\n        $this->getEntityManager()->flush();\n        $this->getEntityManager()->clear();\n\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $dataFilters = [\n            'entry_filter[readingTime][right_number]' => 22,\n            'entry_filter[readingTime][left_number]' => 22,\n        ];\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Change reading speed\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '400',\n        ];\n        $client->submit($form, $data);\n\n        // Is the entry still available via filters?\n        $crawler = $client->request('GET', '/unread/list');\n        $form = $crawler->filter('button[id=submit-filter]')->form();\n        $crawler = $client->submit($form, $dataFilters);\n        $this->assertCount(0, $crawler->filter('div[class=entry]'));\n\n        // Restore old configuration\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[reading_speed]' => '100',\n        ];\n        $client->submit($form, $data);\n    }\n\n    public function dataForUpdateFailed()\n    {\n        return [\n            [[\n                'config[items_per_page]' => '',\n                'config[language]' => 'en',\n            ]],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUpdateFailed\n     */\n    public function testUpdateFailed($data)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('This value should not be blank', $alert[0]);\n    }\n\n    public function dataForChangePasswordFailed()\n    {\n        return [\n            [\n                [\n                    'change_passwd[old_password]' => 'material',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_wrong_value',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => '',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'This value should not be blank',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => '',\n                ],\n                'validator.password_must_match',\n            ],\n            [\n                [\n                    'change_passwd[old_password]' => 'mypassword',\n                    'change_passwd[new_password][first]' => 'hop',\n                    'change_passwd[new_password][second]' => 'hop',\n                ],\n                'validator.password_too_short',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForChangePasswordFailed\n     */\n    public function testChangePasswordFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testChangePassword()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.password_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForUserFailed()\n    {\n        return [\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => '',\n                ],\n                'fos_user.email.blank',\n            ],\n            [\n                [\n                    'update_user[name]' => '',\n                    'update_user[email]' => 'test',\n                ],\n                'fos_user.email.invalid',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForUserFailed\n     */\n    public function testUserFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testUserUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=update_user_save]')->form();\n\n        $data = [\n            'update_user[name]' => 'new name',\n            'update_user[email]' => 'admin@wallabag.io',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.user_updated', $alert[0]);\n    }\n\n    public function testFeedUpdateResetToken()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        // reset the token\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        if (!$user) {\n            $this->markTestSkipped('No user found in db.');\n        }\n\n        $config = $user->getConfig();\n        $config->setFeedToken(null);\n        $em->persist($config);\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.no_token', $body[0]);\n\n        $client->request('GET', '/generate-token');\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_feed.token_reset', $body[0]);\n    }\n\n    public function testGenerateTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request(\n            'GET',\n            '/generate-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $content = json_decode($client->getResponse()->getContent(), true);\n        $this->assertArrayHasKey('token', $content);\n    }\n\n    public function testRevokeTokenAjax()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request(\n            'GET',\n            '/revoke-token',\n            [],\n            [],\n            ['HTTP_X-Requested-With' => 'XMLHttpRequest']\n        );\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n    }\n\n    public function testFeedUpdate()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $data = [\n            'feed_config[feed_limit]' => 12,\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.feed_updated', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForFeedFailed()\n    {\n        return [\n            [\n                [\n                    'feed_config[feed_limit]' => 0,\n                ],\n                'This value should be between 1 and 100000.',\n            ],\n            [\n                [\n                    'feed_config[feed_limit]' => 1000000000000,\n                ],\n                'validator.feed_limit_too_high',\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForFeedFailed\n     */\n    public function testFeedFailed($data, $expectedMessage)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=feed_config_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString($expectedMessage, $alert[0]);\n    }\n\n    public function testTaggingRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 3',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('.mode_edit_tagging_rule')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?tagging-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $data = [\n            'tagging_rule[rule]' => 'readingTime <= 30',\n            'tagging_rule[tags]' => 'short reading',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('readingTime <= 30', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('.delete_tagging_rule')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.tagging_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForTaggingRuleFailed()\n    {\n        return [\n            [\n                [\n                    'tagging_rule[rule]' => 'unknownVar <= 3',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'tagging_rule[rule]' => 'length(domainName) <= 42',\n                    'tagging_rule[tags]' => 'cool tag',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForTaggingRuleFailed\n     */\n    public function testTaggingRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testTaggingRuleTooLong()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=tagging_rule_save]')->form();\n\n        $crawler = $client->submit($form, [\n            'tagging_rule[rule]' => str_repeat('title', 60),\n            'tagging_rule[tags]' => 'cool tag',\n        ]);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        $this->assertStringContainsString('255 characters', $body[0]);\n    }\n\n    public function testDeletingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(TaggingRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/delete/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingTaggingRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(TaggingRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/tagging-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testIgnoreOriginRuleCreation()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.com\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $editLink = $crawler->filter('div[id=set6] a.mode_edit')->last()->link();\n\n        $crawler = $client->click($editLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('?ignore-origin-user-rule=', $client->getResponse()->headers->get('location'));\n\n        $crawler = $client->followRedirect();\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $data = [\n            'ignore_origin_user_rule[rule]' => 'host = \"example.org\"',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_updated', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $this->assertStringContainsString('host = \"example.org\"', $crawler->filter('body')->extract(['_text'])[0]);\n\n        $deleteLink = $crawler->filter('div[id=set6] a.delete')->last()->link();\n\n        $crawler = $client->click($deleteLink);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n        $this->assertStringContainsString('flashes.config.notice.ignore_origin_rules_deleted', $crawler->filter('body')->extract(['_text'])[0]);\n    }\n\n    public function dataForIgnoreOriginRuleCreationFail()\n    {\n        return [\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => 'foo = \"bar\"',\n                ],\n                [\n                    'The variable',\n                    'does not exist.',\n                ],\n            ],\n            [\n                [\n                    'ignore_origin_user_rule[rule]' => '_all != \"none\"',\n                ],\n                [\n                    'The operator',\n                    'does not exist.',\n                ],\n            ],\n        ];\n    }\n\n    /**\n     * @dataProvider dataForIgnoreOriginRuleCreationFail\n     */\n    public function testIgnoreOriginRuleCreationFail($data, $messages)\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=ignore_origin_user_rule_save]')->form();\n\n        $crawler = $client->submit($form, $data);\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n\n        foreach ($messages as $message) {\n            $this->assertStringContainsString($message, $body[0]);\n        }\n    }\n\n    public function testDeletingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(IgnoreOriginUserRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testEditingIgnoreOriginRuleFromAnOtherUser()\n    {\n        $this->logInAs('bob');\n        $client = $this->getTestClient();\n\n        $rule = $client->getContainer()->get(EntityManagerInterface::class)\n            ->getRepository(IgnoreOriginUserRule::class)\n            ->findAll()[0];\n\n        $crawler = $client->request('GET', '/ignore-origin-user-rule/edit/' . $rule->getId());\n\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('You can not access this rule', $body[0]);\n    }\n\n    public function testDemoMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $config = $client->getContainer()->get(Config::class);\n        $config->set('demo_mode_enabled', 1);\n        $config->set('demo_mode_username', 'admin');\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('button[id=change_passwd_save]')->form();\n\n        $data = [\n            'change_passwd[old_password]' => 'mypassword',\n            'change_passwd[new_password][first]' => 'mypassword',\n            'change_passwd[new_password][second]' => 'mypassword',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.password_not_updated_demo', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $config->set('demo_mode_enabled', 0);\n        $config->set('demo_mode_username', 'wallabag');\n    }\n\n    public function testDeleteUserButtonVisibility()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('config.form_user.delete.button', $body[0]);\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('empty');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('bob');\n        $user->setEnabled(false);\n        $em->persist($user);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config');\n\n        $this->assertGreaterThan(1, $body = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringNotContainsString('config.form_user.delete.button', $body[0]);\n\n        $client->request('POST', '/account/delete');\n        $this->assertSame(403, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('empty');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('bob');\n        $user->setEnabled(true);\n        $em->persist($user);\n\n        $em->flush();\n    }\n\n    /**\n     * @group NetworkCalls\n     */\n    public function testDeleteAccount()\n    {\n        $client = $this->getTestClient();\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = new User();\n        $user->setName('Wallace');\n        $user->setEmail('wallace@wallabag.org');\n        $user->setUsername('wallace');\n        $user->setPlainPassword('wallace');\n        $user->setEnabled(true);\n        $user->addRole('ROLE_SUPER_ADMIN');\n\n        $em->persist($user);\n\n        $config = new ConfigEntity($user);\n\n        $config->setItemsPerPage(30);\n        $config->setReadingSpeed(200);\n        $config->setLanguage('en');\n        $config->setPocketConsumerKey('xxxxx');\n\n        $em->persist($config);\n        $em->flush();\n\n        $this->logInAs('wallace');\n        $loggedInUserId = $this->getLoggedInUserId();\n\n        // create entry to check after user deletion\n        // that this entry is also deleted\n        $crawler = $client->request('GET', '/new');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=entry]')->form();\n        $data = [\n            'entry[url]' => $url = 'https://github.com/wallabag/wallabag',\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->request('GET', '/config');\n\n        $deleteForm = $crawler->filter('form[name=delete-account]')->form();\n\n        $client->submit($deleteForm);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n        $user = $em\n            ->getRepository(User::class)\n            ->createQueryBuilder('u')\n            ->where('u.username = :username')->setParameter('username', 'wallace')\n            ->getQuery()\n            ->getOneOrNullResult()\n        ;\n\n        $this->assertNull($user);\n\n        $entries = $client->getContainer()\n            ->get(EntityManagerInterface::class)\n            ->getRepository(Entry::class)\n            ->findByUser($loggedInUserId);\n\n        $this->assertEmpty($entries);\n    }\n\n    public function testReset()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $entry2 = new Entry($user);\n        $entry2->setUrl('http://www.lemonde.de/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry2->setContent('Youhou');\n        $entry2->setTitle('Youhou');\n        $entry2->addTag($tag);\n        $em->persist($entry2);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        // reset annotations\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=reset-annotations]')->form();\n        $client->submit($form);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.annotations_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n\n        // reset tags\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=reset-tags]')->form();\n        $client->submit($form);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.tags_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        // reset entries\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=reset-entries]')->form();\n        $client->submit($form);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n    }\n\n    public function testResetArchivedEntries()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $tagArchived = new Tag();\n        $tagArchived->setLabel('super');\n        $em->persist($tagArchived);\n\n        $entryArchived = new Entry($user);\n        $entryArchived->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entryArchived->setContent('Youhou');\n        $entryArchived->setTitle('Youhou');\n        $entryArchived->addTag($tagArchived);\n        $entryArchived->updateArchived(true);\n        $em->persist($entryArchived);\n\n        $annotationArchived = new Annotation($user);\n        $annotationArchived->setText('annotated');\n        $annotationArchived->setQuote('annotated');\n        $annotationArchived->setRanges([]);\n        $annotationArchived->setEntry($entryArchived);\n        $em->persist($annotationArchived);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=reset-archived]')->form();\n        $client->submit($form);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.archived_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(1, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(1, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($annotationArchived->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testResetEntriesCascade()\n    {\n        $this->logInAs('empty');\n        $client = $this->getTestClient();\n\n        $em = $client->getContainer()->get(EntityManagerInterface::class);\n\n        $user = static::$kernel->getContainer()->get(TokenStorageInterface::class)->getToken()->getUser();\n\n        \\assert($user instanceof User);\n\n        $tag = new Tag();\n        $tag->setLabel('super');\n        $em->persist($tag);\n\n        $entry = new Entry($user);\n        $entry->setUrl('https://www.lemonde.fr/europe/article/2016/10/01/pour-le-psoe-chaque-election-s-est-transformee-en-une-agonie_5006476_3214.html');\n        $entry->setContent('Youhou');\n        $entry->setTitle('Youhou');\n        $entry->addTag($tag);\n        $em->persist($entry);\n\n        $annotation = new Annotation($user);\n        $annotation->setText('annotated');\n        $annotation->setQuote('annotated');\n        $annotation->setRanges([]);\n        $annotation->setEntry($entry);\n        $em->persist($annotation);\n\n        $em->flush();\n\n        $crawler = $client->request('GET', '/config#set3');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $form = $crawler->filter('form[name=reset-entries]')->form();\n        $client->submit($form);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n        $this->assertStringContainsString('flashes.config.notice.entries_reset', $client->getContainer()->get(SessionInterface::class)->getFlashBag()->get('notice')[0]);\n\n        $entryReset = $em\n            ->getRepository(Entry::class)\n            ->countAllEntriesByUser($user->getId());\n\n        $this->assertSame(0, $entryReset, 'Entries were reset');\n\n        $tagReset = $em\n            ->getRepository(Tag::class)\n            ->countAllTags($user->getId());\n\n        $this->assertSame(0, $tagReset, 'Tags were reset');\n\n        $annotationsReset = $em\n            ->getRepository(Annotation::class)\n            ->findByEntryIdAndUserId($entry->getId(), $user->getId());\n\n        $this->assertEmpty($annotationsReset, 'Annotations were reset');\n    }\n\n    public function testSwitchViewMode()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('row data', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n        $crawler = $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('collection', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n\n    public function testChangeLocaleWithoutReferer()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testChangeLocaleWithReferer()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/de');\n        $client->followRedirect();\n\n        $this->assertSame('de', $client->getRequest()->getLocale());\n        $this->assertSame('de', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testChangeLocaleToBadLocale()\n    {\n        $client = $this->getTestClient();\n\n        $client->request('GET', '/login');\n        $client->request('GET', '/locale/yuyuyuyu');\n        $client->followRedirect();\n\n        $this->assertNotSame('yuyuyuyu', $client->getRequest()->getLocale());\n        $this->assertNotSame('yuyuyuyu', $client->getContainer()->get(SessionInterface::class)->get('_locale'));\n    }\n\n    public function testUserEnable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/email');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_enabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isEmailTwoFactor());\n\n        $user->setEmailTwoFactor(false);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserDisable2faEmail()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/email/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isEmailTwoFactor());\n    }\n\n    public function testUserEnable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $user->setGoogleAuthenticatorSecret(false);\n        $user->setBackupCodes(null);\n        $em->persist($user);\n        $em->flush();\n    }\n\n    public function testUserEnable2faGoogleCancel()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app');\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertTrue($user->isGoogleTwoFactor());\n        $this->assertGreaterThan(0, $user->getBackupCodes());\n\n        $crawler = $client->request('GET', '/config/otp/app/cancel');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertFalse($user->isGoogleTwoFactor());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testUserDisable2faGoogle()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config/otp/app/disable');\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $crawler = $client->followRedirect();\n\n        $this->assertGreaterThan(1, $alert = $crawler->filter('body')->extract(['_text']));\n        $this->assertStringContainsString('flashes.config.notice.otp_disabled', $alert[0]);\n\n        // restore user\n        $em = $this->getEntityManager();\n        $user = $em\n            ->getRepository(User::class)\n            ->findOneByUsername('admin');\n\n        $this->assertEmpty($user->getGoogleAuthenticatorSecret());\n        $this->assertEmpty($user->getBackupCodes());\n    }\n\n    public function testExportTaggingRule()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        ob_start();\n        $crawler = $client->request('GET', '/tagging-rule/export');\n        ob_end_clean();\n\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n\n        $headers = $client->getResponse()->headers;\n        $this->assertSame('application/json', $headers->get('content-type'));\n        $this->assertSame('attachment; filename=\"tagging_rules_admin.json\"', $headers->get('content-disposition'));\n        $this->assertSame('UTF-8', $headers->get('content-transfer-encoding'));\n\n        $content = json_decode($client->getResponse()->getContent(), true);\n\n        $this->assertCount(4, $content);\n        $this->assertSame('content matches \"spurs\"', $content[0]['rule']);\n        $this->assertSame('sport', $content[0]['tags'][0]);\n    }\n\n    public function testImportTagginfRuleBadFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $data = [\n            'upload_tagging_rule_file[file]' => '',\n        ];\n\n        $client->submit($form, $data);\n\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n    }\n\n    public function testImportTagginfRuleFile()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        $crawler = $client->request('GET', '/config');\n        $form = $crawler->filter('form[name=upload_tagging_rule_file] > button[type=submit]')->form();\n\n        $file = new UploadedFile(__DIR__ . '/../fixtures/tagging_rules_admin.json', 'tagging_rules_admin.json');\n\n        $data = [\n            'upload_tagging_rule_file[file]' => $file,\n        ];\n\n        $client->submit($form, $data);\n        $this->assertSame(302, $client->getResponse()->getStatusCode());\n\n        $user = $client->getContainer()->get('fos_user.user_manager.test')->findUserBy(['username' => 'admin']);\n        $taggingRules = $user->getConfig()->getTaggingRules()->toArray();\n        $this->assertCount(5, $taggingRules);\n        $this->assertSame('title matches \"football\"', $taggingRules[4]->getRule());\n    }\n\n    public function testSwitchDisplayThumbnails()\n    {\n        $this->logInAs('admin');\n        $client = $this->getTestClient();\n\n        // Change configuration to show thumbnails\n        $crawler = $client->request('GET', '/config');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[display_thumbnails]' => true,\n        ];\n        $client->submit($form, $data);\n        $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringContainsString('class=\"preview\"', $client->getResponse()->getContent());\n\n        // Change configuration to hide thumbnails\n        $crawler = $client->request('GET', '/config');\n        $this->assertSame(200, $client->getResponse()->getStatusCode());\n        $form = $crawler->filter('button[id=config_save]')->form();\n        $data = [\n            'config[display_thumbnails]' => false,\n        ];\n        $client->submit($form, $data);\n        $client->followRedirect();\n\n        $client->request('GET', '/unread/list');\n\n        $this->assertStringNotContainsString('class=\"preview\"', $client->getResponse()->getContent());\n\n        $client->request('GET', '/config/view-mode');\n    }\n}\n"], "filenames": ["src/Wallabag/CoreBundle/Controller/ConfigController.php", "src/Wallabag/CoreBundle/Resources/views/Config/index.html.twig", "tests/Wallabag/CoreBundle/Controller/ConfigControllerTest.php"], "buggy_code_start_loc": [526, 555, 932], "buggy_code_end_loc": [532, 567, 1090], "fixing_code_start_loc": [526, 555, 932], "fixing_code_end_loc": [536, 583, 1095], "type": "CWE-352", "message": "Cross-Site Request Forgery (CSRF) in GitHub repository wallabag/wallabag prior to 2.6.3.", "other": {"cve": {"id": "CVE-2023-4454", "sourceIdentifier": "security@huntr.dev", "published": "2023-08-21T10:15:09.943", "lastModified": "2023-08-24T21:14:29.063", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-Site Request Forgery (CSRF) in GitHub repository wallabag/wallabag prior to 2.6.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wallabag:wallabag:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.6.3", "matchCriteriaId": "81130FEB-7979-4BD8-A893-EF6A91CE66D5"}]}]}], "references": [{"url": "https://github.com/wallabag/wallabag/commit/78b0b55c40511e1f22d5bbb4897aa10fca68441c", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/4ee0ef74-e4d4-46e7-a05c-076bce522299", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/wallabag/wallabag/commit/78b0b55c40511e1f22d5bbb4897aa10fca68441c"}}