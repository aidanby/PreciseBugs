{"buggy_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter API\n *\n * @package CoreAPI\n * @subpackage FilterAPI\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses access_api.php\n * @uses authentication_api.php\n * @uses bug_api.php\n * @uses collapse_api.php\n * @uses columns_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses current_user_api.php\n * @uses custom_field_api.php\n * @uses database_api.php\n * @uses date_api.php\n * @uses error_api.php\n * @uses event_api.php\n * @uses filter_constants_inc.php\n * @uses gpc_api.php\n * @uses helper_api.php\n * @uses lang_api.php\n * @uses logging_api.php\n * @uses print_api.php\n * @uses profile_api.php\n * @uses project_api.php\n * @uses relationship_api.php\n * @uses string_api.php\n * @uses tag_api.php\n * @uses user_api.php\n * @uses utility_api.php\n * @uses version_api.php\n */\n\nrequire_api( 'access_api.php' );\nrequire_api( 'authentication_api.php' );\nrequire_api( 'bug_api.php' );\nrequire_api( 'collapse_api.php' );\nrequire_api( 'columns_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'current_user_api.php' );\nrequire_api( 'custom_field_api.php' );\nrequire_api( 'database_api.php' );\nrequire_api( 'date_api.php' );\nrequire_api( 'error_api.php' );\nrequire_api( 'event_api.php' );\nrequire_api( 'filter_constants_inc.php' );\nrequire_api( 'gpc_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'lang_api.php' );\nrequire_api( 'logging_api.php' );\nrequire_api( 'print_api.php' );\nrequire_api( 'profile_api.php' );\nrequire_api( 'project_api.php' );\nrequire_api( 'relationship_api.php' );\nrequire_api( 'string_api.php' );\nrequire_api( 'tag_api.php' );\nrequire_api( 'user_api.php' );\nrequire_api( 'utility_api.php' );\nrequire_api( 'version_api.php' );\n\n$g_filter = null;\n\n/**\n * Initialize the filter API with the current filter.\n * @param array $p_filter The filter to set as the current filter.\n */\nfunction filter_init( $p_filter ) {\n\tglobal $g_filter;\n\t$g_filter = $p_filter;\n}\n\n/**\n * Allow plugins to define a set of class-based filters, and register/load\n * them here to be used by the rest of filter_api.\n * @return array Mapping of field name to filter object\n */\nfunction filter_get_plugin_filters() {\n\tstatic $s_field_array = null;\n\n\tif( is_null( $s_field_array ) ) {\n\t\t$s_field_array = array();\n\n\t\t$t_all_plugin_filters = event_signal( 'EVENT_FILTER_FIELDS' );\n\t\tforeach( $t_all_plugin_filters as $t_plugin => $t_plugin_filters ) {\n\t\t\tforeach( $t_plugin_filters as $t_callback => $t_plugin_filter_array ) {\n\t\t\t\tif( is_array( $t_plugin_filter_array ) ) {\n\t\t\t\t\tforeach( $t_plugin_filter_array as $t_filter_class ) {\n\t\t\t\t\t\tif( class_exists( $t_filter_class ) && is_subclass_of( $t_filter_class, 'MantisFilter' ) ) {\n\t\t\t\t\t\t\t$t_filter_object = new $t_filter_class();\n\t\t\t\t\t\t\t$t_field_name = $t_plugin . '_' . $t_filter_object->field;\n\t\t\t\t\t\t\t$s_field_array[$t_field_name] = $t_filter_object;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $s_field_array;\n}\n\n/**\n * Get a permanent link for the current active filter.  The results of using these fields by other users\n * can be inconsistent with the original results due to fields like \"Myself\", \"Current Project\",\n * and due to access level.\n * @param array $p_custom_filter Array containing a custom filter definition.\n * @return string the search.php?xxxx or an empty string if no criteria applied.\n */\nfunction filter_get_url( array $p_custom_filter ) {\n\t$t_query = array();\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$t_project_id = $p_custom_filter[FILTER_PROPERTY_PROJECT_ID];\n\n\t\tif( count( $t_project_id ) == 1 && $t_project_id[0] == META_FILTER_CURRENT ) {\n\t\t\t$t_project_id = array(\n\t\t\t\thelper_get_current_project(),\n\t\t\t);\n\t\t}\n\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PROJECT_ID, $t_project_id );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SEARCH, $p_custom_filter[FILTER_PROPERTY_SEARCH] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_CATEGORY_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_CATEGORY_ID, $p_custom_filter[FILTER_PROPERTY_CATEGORY_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_REPORTER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_REPORTER_ID, $p_custom_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_STATUS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_STATUS, $p_custom_filter[FILTER_PROPERTY_STATUS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_MONITOR_USER_ID, $p_custom_filter[FILTER_PROPERTY_MONITOR_USER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HANDLER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HANDLER_ID, $p_custom_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_NOTE_USER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_NOTE_USER_ID, $p_custom_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SEVERITY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SEVERITY, $p_custom_filter[FILTER_PROPERTY_SEVERITY] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RESOLUTION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RESOLUTION, $p_custom_filter[FILTER_PROPERTY_RESOLUTION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PRIORITY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PRIORITY, $p_custom_filter[FILTER_PROPERTY_PRIORITY] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_VIEW_STATE, $p_custom_filter[FILTER_PROPERTY_VIEW_STATE] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_STICKY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value(\n\t\t\tFILTER_PROPERTY_STICKY,\n\t\t\t$p_custom_filter[FILTER_PROPERTY_STICKY] ? 'on' : 'off' );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_VERSION, $p_custom_filter[FILTER_PROPERTY_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_BUILD] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_BUILD, $p_custom_filter[FILTER_PROPERTY_BUILD] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_FIXED_IN_VERSION, $p_custom_filter[FILTER_PROPERTY_FIXED_IN_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TARGET_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TARGET_VERSION, $p_custom_filter[FILTER_PROPERTY_TARGET_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SORT_FIELD_NAME, $p_custom_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SORT_DIRECTION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SORT_DIRECTION, $p_custom_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] != config_get( 'default_limit_view' ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_ISSUES_PER_PAGE, $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] != config_get( 'default_show_changed' ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HIGHLIGHT_CHANGED, $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HIDE_STATUS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HIDE_STATUS, $p_custom_filter[FILTER_PROPERTY_HIDE_STATUS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value(\n\t\t\tFILTER_PROPERTY_FILTER_BY_DATE,\n\t\t\t$p_custom_filter[FILTER_PROPERTY_FILTER_BY_DATE] ? 'on' : 'off' );\n\n\t\t# The start and end dates are only applicable if filter by date is set.\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_DAY] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_DAY, $p_custom_filter[FILTER_PROPERTY_START_DAY] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_DAY] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_DAY, $p_custom_filter[FILTER_PROPERTY_END_DAY] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_MONTH] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_MONTH, $p_custom_filter[FILTER_PROPERTY_START_MONTH] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_MONTH] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_MONTH, $p_custom_filter[FILTER_PROPERTY_END_MONTH] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_YEAR] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_YEAR, $p_custom_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_YEAR] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_YEAR, $p_custom_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] != -1 ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RELATIONSHIP_TYPE, $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RELATIONSHIP_BUG, $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PLATFORM, $p_custom_filter[FILTER_PROPERTY_PLATFORM] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_OS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_OS, $p_custom_filter[FILTER_PROPERTY_OS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_OS_BUILD, $p_custom_filter[FILTER_PROPERTY_OS_BUILD] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TAG_STRING] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TAG_STRING, $p_custom_filter[FILTER_PROPERTY_TAG_STRING] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TAG_SELECT, $p_custom_filter[FILTER_PROPERTY_TAG_SELECT] );\n\t}\n\n\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_MATCH_TYPE, $p_custom_filter[FILTER_PROPERTY_MATCH_TYPE] );\n\n\tif( isset( $p_custom_filter['custom_fields'] ) ) {\n\t\tforeach( $p_custom_filter['custom_fields'] as $t_custom_field_id => $t_custom_field_values ) {\n\t\t\tif( !filter_field_is_any( $t_custom_field_values ) ) {\n\t\t\t\t$t_query[] = filter_encode_field_and_value( 'custom_field_' . $t_custom_field_id, $t_custom_field_values );\n\t\t\t}\n\t\t}\n\t}\n\n\t# Allow plugins to add filter fields\n\t$t_plugin_filter_array = filter_get_plugin_filters();\n\tforeach( $t_plugin_filter_array as $t_field_name => $t_filter_object ) {\n\t\tif( !filter_field_is_any( $p_custom_filter[$t_field_name] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( $t_field_name, $p_custom_filter[$t_field_name], $t_filter_object->type );\n\t\t}\n\t}\n\n\tif( count( $t_query ) > 0 ) {\n\t\t$t_query_str = implode( $t_query, '&' );\n\t\t$t_url = config_get( 'path' ) . 'search.php?' . $t_query_str;\n\t} else {\n\t\t$t_url = '';\n\t}\n\n\treturn $t_url;\n}\n\n/**\n * Encodes a field and it's value for the filter URL.  This handles the URL encoding and arrays.\n * @param string  $p_field_name  The field name.\n * @param string  $p_field_value The field value (can be an array).\n * @param integer $p_field_type  Field Type e.g. FILTER_TYPE_MULTI_STRING.\n * @return string url encoded string\n */\nfunction filter_encode_field_and_value( $p_field_name, $p_field_value, $p_field_type = null ) {\n\t$t_query_array = array();\n\tif( is_array( $p_field_value ) ) {\n\t\t$t_count = count( $p_field_value );\n\t\tif( $t_count > 1 || $p_field_type == FILTER_TYPE_MULTI_STRING || $p_field_type == FILTER_TYPE_MULTI_INT ) {\n\t\t\tforeach( $p_field_value as $t_value ) {\n\t\t\t\t$t_query_array[] = urlencode( $p_field_name . '[]' ) . '=' . urlencode( $t_value );\n\t\t\t}\n\t\t} else if( $t_count == 1 ) {\n\t\t\t$t_query_array[] = urlencode( $p_field_name ) . '=' . urlencode( $p_field_value[0] );\n\t\t}\n\t} else {\n\t\t$t_query_array[] = urlencode( $p_field_name ) . '=' . urlencode( $p_field_value );\n\t}\n\n\treturn implode( $t_query_array, '&' );\n}\n\n/**\n * Checks the supplied value to see if it is an ANY value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"ANY\" values and false for others.  \"ANY\" means filter criteria not active.\n */\nfunction filter_field_is_any( $p_field_value ) {\n\tif( is_array( $p_field_value ) ) {\n\t\tif( count( $p_field_value ) == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tforeach( $p_field_value as $t_value ) {\n\t\t\tif( ( META_FILTER_ANY == $t_value ) && ( is_numeric( $t_value ) ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif( is_string( $p_field_value ) && is_blank( $p_field_value ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif( is_bool( $p_field_value ) && !$p_field_value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif( ( META_FILTER_ANY == $p_field_value ) && ( is_numeric( $p_field_value ) ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks the supplied value to see if it is a NONE value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"NONE\" values and false for others.\n * @todo is a check for these necessary?  if( ( $t_filter_value === 'none' ) || ( $t_filter_value === '[none]' ) )\n */\nfunction filter_field_is_none( $p_field_value ) {\n\tif( is_array( $p_field_value ) ) {\n\t\tforeach( $p_field_value as $t_value ) {\n\t\t\tif( ( META_FILTER_NONE == $t_value ) && ( is_numeric( $t_value ) ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif( is_string( $p_field_value ) && is_blank( $p_field_value ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif( ( META_FILTER_NONE == $p_field_value ) && ( is_numeric( $p_field_value ) ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n *  Checks the supplied value to see if it is a MYSELF value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"MYSELF\" values and false for others.\n */\nfunction filter_field_is_myself( $p_field_value ) {\n\treturn( META_FILTER_MYSELF == $p_field_value ? true : false );\n}\n\n/**\n * Filter per page\n * @param array   $p_filter   Filter.\n * @param integer $p_count    Count.\n * @param integer $p_per_page Per page.\n * @return integer\n */\nfunction filter_per_page( array $p_filter, $p_count, $p_per_page ) {\n\t$p_per_page = (( null == $p_per_page ) ? (int)$p_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] : $p_per_page );\n\t$p_per_page = (( 0 == $p_per_page || -1 == $p_per_page ) ? $p_count : $p_per_page );\n\n\treturn (int)abs( $p_per_page );\n}\n\n/**\n *  Use $p_count and $p_per_page to determine how many pages to split this list up into.\n *  For the sake of consistency have at least one page, even if it is empty.\n * @param integer $p_count    Count.\n * @param integer $p_per_page Per page.\n * @return integer page count\n */\nfunction filter_page_count( $p_count, $p_per_page ) {\n\t$t_page_count = ceil( $p_count / $p_per_page );\n\tif( $t_page_count < 1 ) {\n\t\t$t_page_count = 1;\n\t}\n\treturn $t_page_count;\n}\n\n/**\n * Checks to make sure $p_page_number isn't past the last page.\n * and that $p_page_number isn't before the first page\n * @param integer $p_page_number Page number.\n * @param integer $p_page_count  Page count.\n * @return integer\n */\nfunction filter_valid_page_number( $p_page_number, $p_page_count ) {\n\tif( $p_page_number > $p_page_count ) {\n\t\t$p_page_number = $p_page_count;\n\t}\n\n\tif( $p_page_number < 1 ) {\n\t\t$p_page_number = 1;\n\t}\n\treturn $p_page_number;\n}\n\n/**\n * Figure out the offset into the db query, offset is which record to start querying from\n * @param integer $p_page_number Page number.\n * @param integer $p_per_page    Per page.\n * @return integer\n */\nfunction filter_offset( $p_page_number, $p_per_page ) {\n\treturn(( (int)$p_page_number -1 ) * (int)$p_per_page );\n}\n\n/**\n * Make sure that our filters are entirely correct and complete (it is possible that they are not).\n * We need to do this to cover cases where we don't have complete control over the filters given.\n * @param array $p_filter_arr A Filter definition.\n * @return array\n * @todo function needs to be abstracted\n */\nfunction filter_ensure_valid_filter( array $p_filter_arr ) {\n\t# extend current filter to add information passed via POST\n\tif( !isset( $p_filter_arr['_version'] ) ) {\n\t\t$p_filter_arr['_version'] = FILTER_VERSION;\n\t}\n\t$t_cookie_vers = (int)substr( $p_filter_arr['_version'], 1 );\n\tif( substr( FILTER_VERSION, 1 ) > $t_cookie_vers ) {\n\t\t# if the version is old, update it\n\t\t$p_filter_arr['_version'] = FILTER_VERSION;\n\t}\n\tif( !isset( $p_filter_arr['_view_type'] ) ) {\n\t\t$p_filter_arr['_view_type'] = gpc_get_string( 'view_type', 'simple' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] = gpc_get_int( FILTER_PROPERTY_ISSUES_PER_PAGE, config_get( 'default_limit_view' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_HIGHLIGHT_CHANGED] = config_get( 'default_show_changed' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_STICKY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_STICKY] = gpc_string_to_bool( config_get( 'show_sticky_issues' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SORT_FIELD_NAME] = 'last_updated';\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SORT_DIRECTION] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SORT_DIRECTION] = 'DESC';\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_PLATFORM] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_OS] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_OS] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_OS_BUILD] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t0 => META_FILTER_CURRENT,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_MONTH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_MONTH] = gpc_get_string( FILTER_PROPERTY_START_MONTH, date( 'm' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_DAY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_DAY] = gpc_get_string( FILTER_PROPERTY_START_DAY, 1 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_YEAR] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_YEAR] = gpc_get_string( FILTER_PROPERTY_START_YEAR, date( 'Y' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_MONTH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_MONTH] = gpc_get_string( FILTER_PROPERTY_END_MONTH, date( 'm' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_DAY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_DAY] = gpc_get_string( FILTER_PROPERTY_END_DAY, date( 'd' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_YEAR] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_YEAR] = gpc_get_string( FILTER_PROPERTY_END_YEAR, date( 'Y' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SEARCH] = '';\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_FILTER_BY_DATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_FILTER_BY_DATE] = gpc_get_bool( FILTER_PROPERTY_FILTER_BY_DATE, false );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_VIEW_STATE] = gpc_get( FILTER_PROPERTY_VIEW_STATE, META_FILTER_ANY );\n\t} else if( filter_field_is_any( $p_filter_arr[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_TYPE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_TYPE] = gpc_get_int( FILTER_PROPERTY_RELATIONSHIP_TYPE, -1 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_BUG] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_BUG] = gpc_get_int( FILTER_PROPERTY_RELATIONSHIP_BUG, 0 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_TAG_STRING] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_TAG_STRING] = gpc_get_string( FILTER_PROPERTY_TAG_STRING, '' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_TAG_SELECT] = gpc_get_string( FILTER_PROPERTY_TAG_SELECT, '' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_MATCH_TYPE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_MATCH_TYPE] = gpc_get_int( FILTER_PROPERTY_MATCH_TYPE, FILTER_MATCH_ALL );\n\t} else {\n\t\tsettype( $p_filter_arr[FILTER_PROPERTY_MATCH_TYPE], 'int' );\n\t}\n\n\t# initialize plugin filters\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\tif( !isset( $p_filter_arr[$t_field_name] ) ) {\n\t\t\tswitch( $t_filter_object->type ) {\n\t\t\t\tcase FILTER_TYPE_STRING:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_string( $t_field_name, $t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_int( $t_field_name, (int)$t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_bool( $t_field_name, (bool)$t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_string_array( $t_field_name, array( 0 => (string)META_FILTER_ANY ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_int_array( $t_field_name, array( 0 => META_FILTER_ANY ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = (string)META_FILTER_ANY;\n\t\t\t}\n\t\t}\n\n\t\tif( ! $t_filter_object->validate( $p_filter_arr[$t_field_name] ) ) {\n\t\t\t$p_filter_arr[$t_field_name] = $t_filter_object->default;\n\t\t}\n\t}\n\n\t$t_custom_fields = custom_field_get_ids();\n\n\t# @@@ (thraxisp) This should really be the linked ids, but we don't know the project\n\t$f_custom_fields_data = array();\n\tif( is_array( $t_custom_fields ) && ( count( $t_custom_fields ) > 0 ) ) {\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\tif( is_array( gpc_get( 'custom_field_' . $t_cfid, null ) ) ) {\n\t\t\t\t$f_custom_fields_data[$t_cfid] = gpc_get_string_array( 'custom_field_' . $t_cfid, array( META_FILTER_ANY ) );\n\t\t\t} else {\n\t\t\t\t$f_custom_fields_data[$t_cfid] = gpc_get_string( 'custom_field_' . $t_cfid, (string)META_FILTER_ANY );\n\t\t\t\t$f_custom_fields_data[$t_cfid] = array(\n\t\t\t\t\t$f_custom_fields_data[$t_cfid],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t# validate sorting\n\t$t_fields = helper_get_columns_to_view();\n\t$t_n_fields = count( $t_fields );\n\tfor( $i = 0;$i < $t_n_fields;$i++ ) {\n\t\tif( isset( $t_fields[$i] ) && in_array( $t_fields[$i], array( 'selection', 'edit', 'bugnotes_count', 'attachment_count' ) ) ) {\n\t\t\tunset( $t_fields[$i] );\n\t\t}\n\t}\n\n\t# Make sure array is no longer than 2 elements\n\t$t_sort_fields = explode( ',', $p_filter_arr['sort'] );\n\tif( count( $t_sort_fields ) > 2 ) {\n\t\t$t_sort_fields = array_slice( $t_sort_fields, 0, 2 );\n\t}\n\n\t# Make sure array is no longer than 2 elements\n\t$t_dir_fields = explode( ',', $p_filter_arr['dir'] );\n\tif( count( $t_dir_fields ) > 2 ) {\n\t\t$t_dir_fields = array_slice( $t_dir_fields, 0, 2 );\n\t}\n\n\t# Validate the max of two segments for $t_sort_fields and $t_dir_fields\n\tfor( $i = 0;$i < 2;$i++ ) {\n\t\tif( isset( $t_sort_fields[$i] ) ) {\n\t\t\t$t_drop = false;\n\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\tif( strpos( $t_sort, 'custom_' ) === 0 ) {\n\t\t\t\tif( false === custom_field_get_id_from_name( utf8_substr( $t_sort, utf8_strlen( 'custom_' ) ) ) ) {\n\t\t\t\t\t$t_drop = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif( !in_array( $t_sort, $t_fields ) ) {\n\t\t\t\t\t$t_drop = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( !in_array( $t_dir_fields[$i], array( 'ASC', 'DESC' ) ) ) {\n\t\t\t\t$t_drop = true;\n\t\t\t}\n\t\t\tif( $t_drop ) {\n\t\t\t\tunset( $t_sort_fields[$i] );\n\t\t\t\tunset( $t_dir_fields[$i] );\n\t\t\t}\n\t\t}\n\t}\n\tif( count( $t_sort_fields ) > 0 ) {\n\t\t$p_filter_arr['sort'] = implode( ',', $t_sort_fields );\n\t\t$p_filter_arr['dir'] = implode( ',', $t_dir_fields );\n\t} else {\n\t\t$p_filter_arr['sort'] = 'last_updated';\n\t\t$p_filter_arr['dir'] = 'DESC';\n\t}\n\n\t# validate or filter junk from other fields\n\t$t_multi_select_list = array(\n\t\tFILTER_PROPERTY_CATEGORY_ID => 'string',\n\t\tFILTER_PROPERTY_SEVERITY => 'int',\n\t\tFILTER_PROPERTY_STATUS => 'int',\n\t\tFILTER_PROPERTY_REPORTER_ID => 'int',\n\t\tFILTER_PROPERTY_HANDLER_ID => 'int',\n\t\tFILTER_PROPERTY_NOTE_USER_ID => 'int',\n\t\tFILTER_PROPERTY_RESOLUTION => 'int',\n\t\tFILTER_PROPERTY_PRIORITY => 'int',\n\t\tFILTER_PROPERTY_BUILD => 'string',\n\t\tFILTER_PROPERTY_VERSION => 'string',\n\t\tFILTER_PROPERTY_HIDE_STATUS => 'int',\n\t\tFILTER_PROPERTY_FIXED_IN_VERSION => 'string',\n\t\tFILTER_PROPERTY_TARGET_VERSION => 'string',\n\t\tFILTER_PROPERTY_MONITOR_USER_ID => 'int',\n\t\tFILTER_PROPERTY_PROFILE_ID => 'int',\n\t);\n\tforeach( $t_multi_select_list as $t_multi_field_name => $t_multi_field_type ) {\n\t\tif( !isset( $p_filter_arr[$t_multi_field_name] ) ) {\n\t\t\tif( FILTER_PROPERTY_HIDE_STATUS == $t_multi_field_name ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\tconfig_get( 'hide_status_default' ),\n\t\t\t\t);\n\t\t\t} else if( 'custom_fields' == $t_multi_field_name ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\t$f_custom_fields_data,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$t_val = META_FILTER_ANY;\n\t\t\t\t# Ensure the filter property has the right type - see #20087\n\t\t\t\tsettype( $t_val, $t_multi_field_type );\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array( $t_val );\n\t\t\t}\n\t\t} else {\n\t\t\tif( !is_array( $p_filter_arr[$t_multi_field_name] ) ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\t$p_filter_arr[$t_multi_field_name],\n\t\t\t\t);\n\t\t\t}\n\t\t\t$t_checked_array = array();\n\t\t\tforeach( $p_filter_arr[$t_multi_field_name] as $t_filter_value ) {\n\t\t\t\t$t_filter_value = stripslashes( $t_filter_value );\n\t\t\t\tif( ( $t_filter_value === 'any' ) || ( $t_filter_value === '[any]' ) ) {\n\t\t\t\t\t$t_filter_value = META_FILTER_ANY;\n\t\t\t\t}\n\t\t\t\tif( ( $t_filter_value === 'none' ) || ( $t_filter_value === '[none]' ) ) {\n\t\t\t\t\t$t_filter_value = META_FILTER_NONE;\n\t\t\t\t}\n\t\t\t\t# Ensure the filter property has the right type - see #20087\n\t\t\t\tswitch( $t_multi_field_type ) {\n\t\t\t\t\tcase 'string' :\n\t\t\t\t\tcase 'int' :\n\t\t\t\t\t\tsettype( $t_filter_value, $t_multi_field_type );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$t_checked_array[] = $t_filter_value;\n\t\t\t}\n\t\t\t$p_filter_arr[$t_multi_field_name] = $t_checked_array;\n\t\t}\n\t}\n\n\tif( is_array( $t_custom_fields ) && ( count( $t_custom_fields ) > 0 ) ) {\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\tif( !isset( $p_filter_arr['custom_fields'][$t_cfid] ) ) {\n\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = array(\n\t\t\t\t\tMETA_FILTER_ANY,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif( !is_array( $p_filter_arr['custom_fields'][$t_cfid] ) ) {\n\t\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = array(\n\t\t\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t$t_checked_array = array();\n\t\t\t\tforeach( $p_filter_arr['custom_fields'][$t_cfid] as $t_filter_value ) {\n\t\t\t\t\t$t_filter_value = stripslashes( $t_filter_value );\n\t\t\t\t\tif( ( $t_filter_value === 'any' ) || ( $t_filter_value === '[any]' ) ) {\n\t\t\t\t\t\t$t_filter_value = META_FILTER_ANY;\n\t\t\t\t\t}\n\t\t\t\t\t$t_checked_array[] = $t_filter_value;\n\t\t\t\t}\n\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = $t_checked_array;\n\t\t\t}\n\t\t}\n\t}\n\n\t# all of our filter values are now guaranteed to be there, and correct.\n\treturn $p_filter_arr;\n}\n\n/**\n *  Get the standard filter that is to be used when no filter was previously saved.\n *  When creating specific filters, this can be used as a basis for the filter, where\n *  specific entries can be overridden.\n * @return mixed\n */\nfunction filter_get_default() {\n\t$t_hide_status_default = config_get( 'hide_status_default' );\n\t$t_default_show_changed = config_get( 'default_show_changed' );\n\n\t$t_filter = array(\n\t\tFILTER_PROPERTY_CATEGORY_ID => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_SEVERITY => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_STATUS => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HIGHLIGHT_CHANGED => $t_default_show_changed,\n\t\tFILTER_PROPERTY_REPORTER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HANDLER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_PROJECT_ID => array(\n\t\t\t'0' => META_FILTER_CURRENT,\n\t\t),\n\t\tFILTER_PROPERTY_RESOLUTION => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_BUILD => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_VERSION => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HIDE_STATUS => array(\n\t\t\t'0' => $t_hide_status_default,\n\t\t),\n\t\tFILTER_PROPERTY_MONITOR_USER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_SORT_FIELD_NAME => 'last_updated',\n\t\tFILTER_PROPERTY_SORT_DIRECTION => 'DESC',\n\t\tFILTER_PROPERTY_ISSUES_PER_PAGE => config_get( 'default_limit_view' ),\n\t\tFILTER_PROPERTY_MATCH_TYPE => FILTER_MATCH_ALL\n\t);\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Deserialize filter string\n * @param string $p_serialized_filter Serialized filter string.\n * @return mixed $t_filter array\n * @see filter_ensure_valid_filter\n */\nfunction filter_deserialize( $p_serialized_filter ) {\n\tif( is_blank( $p_serialized_filter ) ) {\n\t\treturn false;\n\t}\n\n\t# check to see if new cookie is needed\n\t$t_setting_arr = explode( '#', $p_serialized_filter, 2 );\n\tif( ( $t_setting_arr[0] == 'v1' ) || ( $t_setting_arr[0] == 'v2' ) || ( $t_setting_arr[0] == 'v3' ) || ( $t_setting_arr[0] == 'v4' ) ) {\n\t\t# these versions can't be salvaged, they are too old to update\n\t\treturn false;\n\t}\n\n\t# We shouldn't need to do this anymore, as filters from v5 onwards should cope with changing\n\t# filter indices dynamically\n\t$t_filter_array = array();\n\tif( isset( $t_setting_arr[1] ) ) {\n\t\t$t_filter_array = json_decode( $t_setting_arr[1], true );\n\t} else {\n\t\treturn false;\n\t}\n\tif( $t_filter_array['_version'] != FILTER_VERSION ) {\n\t\t# if the version is not new enough, update it using defaults\n\t\treturn filter_ensure_valid_filter( $t_filter_array );\n\t}\n\n\treturn $t_filter_array;\n}\n\n/**\n * Check if the filter cookie exists and is of the correct version.\n * @return boolean\n */\nfunction filter_is_cookie_valid() {\n\t$t_view_all_cookie_id = gpc_get_cookie( config_get( 'view_all_cookie' ), '' );\n\t$t_view_all_cookie = filter_db_get_filter( $t_view_all_cookie_id );\n\n\t# check to see if the cookie does not exist\n\tif( is_blank( $t_view_all_cookie ) ) {\n\t\treturn false;\n\t}\n\n\t# check to see if new cookie is needed\n\t$t_setting_arr = explode( '#', $t_view_all_cookie, 2 );\n\tif( ( $t_setting_arr[0] == 'v1' ) || ( $t_setting_arr[0] == 'v2' ) || ( $t_setting_arr[0] == 'v3' ) || ( $t_setting_arr[0] == 'v4' ) ) {\n\t\treturn false;\n\t}\n\n\t# We shouldn't need to do this anymore, as filters from v5 onwards should cope with changing\n\t# filter indices dynamically\n\t$t_filter_cookie_arr = array();\n\tif( isset( $t_setting_arr[1] ) ) {\n\t\t$t_filter_cookie_arr = json_decode( $t_setting_arr[1], true );\n\t} else {\n\t\treturn false;\n\t}\n\tif( $t_filter_cookie_arr['_version'] != FILTER_VERSION ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get the array fields specified by $p_filter_id\n * using the cached row if it's available\n * @param integer $p_filter_id A filter identifier to look up in the database.\n * @return array a filter row\n */\nfunction filter_get_row( $p_filter_id ) {\n\treturn filter_cache_row( $p_filter_id );\n}\n\n/**\n * Get the value of the filter field specified by filter id and field name\n * @param integer $p_filter_id  A filter identifier to look up in the database.\n * @param string  $p_field_name Name of the filter field to retrieve.\n * @return string\n */\nfunction filter_get_field( $p_filter_id, $p_field_name ) {\n\t$t_row = filter_get_row( $p_filter_id );\n\n\tif( isset( $t_row[$p_field_name] ) ) {\n\t\treturn $t_row[$p_field_name];\n\t} else {\n\t\terror_parameters( $p_field_name );\n\t\ttrigger_error( ERROR_DB_FIELD_NOT_FOUND, WARNING );\n\t\treturn '';\n\t}\n}\n\n/**\n * Add sort parameters to the query clauses\n * @param array   &$p_filter       Filter to sort.\n * @param boolean $p_show_sticky   Whether to show sticky items.\n * @param array   $p_query_clauses Array of query clauses.\n * @return array $p_query_clauses\n */\nfunction filter_get_query_sort_data( array &$p_filter, $p_show_sticky, array $p_query_clauses ) {\n\t# if sort is blank then default the sort and direction.  This is to fix the\n\t# symptoms of #3953.  Note that even if the main problem is fixed, we may\n\t# have to keep this code for a while to handle filters saved with this blank field.\n\tif( is_blank( $p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] = 'last_updated';\n\t\t$p_filter[FILTER_PROPERTY_SORT_DIRECTION] = 'DESC';\n\t}\n\n\t$p_query_clauses['order'] = array();\n\t$t_sort_fields = explode( ',', $p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t$t_dir_fields = explode( ',', $p_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\n\t$t_plugin_columns = columns_get_plugin_columns();\n\n\tif( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_STICKY] ) && ( null !== $p_show_sticky ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.sticky DESC';\n\t}\n\n\t$t_count = count( $t_sort_fields );\n\tfor( $i = 0;$i < $t_count;$i++ ) {\n\t\t$c_sort = $t_sort_fields[$i];\n\t\t$c_dir = 'DESC' == $t_dir_fields[$i] ? 'DESC' : 'ASC';\n\n\t\tif( !in_array( $t_sort_fields[$i], array_slice( $t_sort_fields, $i + 1 ) ) ) {\n\t\t\t# if sorting by a custom field\n\t\t\tif( strpos( $c_sort, 'custom_' ) === 0 ) {\n\t\t\t\t$t_custom_field = utf8_substr( $c_sort, utf8_strlen( 'custom_' ) );\n\t\t\t\t$t_custom_field_id = custom_field_get_id_from_name( $t_custom_field );\n\t\t\t\t$t_def = custom_field_get_definition( $t_custom_field_id );\n\t\t\t\t$t_value_field = ( $t_def['type'] == CUSTOM_FIELD_TYPE_TEXTAREA ? 'text' : 'value' );\n\t\t\t\t$c_cf_alias = 'custom_field_' . $t_custom_field_id;\n\n\t\t\t\t# Distinguish filter table aliases from sort table aliases (see #19670)\n\t\t\t\t$t_cf_table_alias = 'cf_sort_' . $t_custom_field_id;\n\t\t\t\t$t_cf_select = $t_cf_table_alias . '.' . $t_value_field . ' ' . $c_cf_alias;\n\n\t\t\t\t# check to be sure this field wasn't already added to the query.\n\t\t\t\tif( !in_array( $t_cf_select, $p_query_clauses['select'] ) ) {\n\t\t\t\t\t$p_query_clauses['select'][] = $t_cf_select;\n\t\t\t\t\t$p_query_clauses['join'][] = 'LEFT JOIN {custom_field_string} ' . $t_cf_table_alias . ' ON\n\t\t\t\t\t\t\t\t\t\t\t\t{bug}.id = ' . $t_cf_table_alias . '.bug_id AND ' . $t_cf_table_alias . '.field_id = ' . $t_custom_field_id;\n\t\t\t\t}\n\n\t\t\t\t$p_query_clauses['order'][] = $c_cf_alias . ' ' . $c_dir;\n\n\t\t\t# if sorting by plugin columns\n\t\t\t} else if( isset( $t_plugin_columns[$t_sort_fields[$i]] ) ) {\n\t\t\t\t$t_column_object = $t_plugin_columns[$t_sort_fields[$i]];\n\n\t\t\t\tif( $t_column_object->sortable ) {\n\t\t\t\t\t$t_clauses = $t_column_object->sortquery( $c_dir );\n\n\t\t\t\t\tif( is_array( $t_clauses ) ) {\n\t\t\t\t\t\tif( isset( $t_clauses['join'] ) ) {\n\t\t\t\t\t\t\t$p_query_clauses['join'][] = $t_clauses['join'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( isset( $t_clauses['order'] ) ) {\n\t\t\t\t\t\t\t$p_query_clauses['order'][] = $t_clauses['order'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t# standard column\n\t\t\t} else {\n\t\t\t\t$t_sort_col = '{bug}.' . $c_sort;\n\n\t\t\t\t# when sorting by due_date, always display undefined dates last\n\t\t\t\tif( 'due_date' == $c_sort && 'ASC' == $c_dir ) {\n\t\t\t\t\t$t_sort_due_date = $t_sort_col . ' = 1';\n\t\t\t\t\t$p_query_clauses['select'][] = $t_sort_due_date;\n\t\t\t\t\t$t_sort_col = $t_sort_due_date . ', ' . $t_sort_col;\n\t\t\t\t}\n\n\t\t\t\t$p_query_clauses['order'][] = $t_sort_col . ' ' .$c_dir;\n\t\t\t}\n\t\t}\n\t}\n\n\t# add basic sorting if necessary\n\tif( !in_array( 'last_updated', $t_sort_fields ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.last_updated DESC';\n\t}\n\tif( !in_array( 'date_submitted', $t_sort_fields ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.date_submitted DESC';\n\t}\n\n\treturn $p_query_clauses;\n}\n\n/**\n * Remove any duplicate values in certain elements of query_clauses\n * Do not loop over query clauses as some keys may contain valid duplicate values.\n * We basically want unique values for just the base query elements select, from, and join\n * 'where' and 'where_values' key should not have duplicates as that is handled earlier and applying\n * array_unique here could cause problems with the query.\n * @param array $p_query_clauses Array of query clauses.\n * @return array\n */\nfunction filter_unique_query_clauses( array $p_query_clauses ) {\n\t$p_query_clauses['select'] = array_unique( $p_query_clauses['select'] );\n\t$p_query_clauses['from'] = array_unique( $p_query_clauses['from'] );\n\t$p_query_clauses['join'] = array_unique( $p_query_clauses['join'] );\n\treturn $p_query_clauses;\n}\n\n/**\n * Build a query with the query clauses array, query for bug count and return the result\n * @param array $p_query_clauses Array of query clauses.\n * @return integer\n */\nfunction filter_get_bug_count( array $p_query_clauses ) {\n\t$p_query_clauses = filter_unique_query_clauses( $p_query_clauses );\n\t$t_select_string = 'SELECT Count( DISTINCT {bug}.id ) as idcnt ';\n\t$t_from_string = ' FROM ' . implode( ', ', $p_query_clauses['from'] );\n\t$t_join_string = (( count( $p_query_clauses['join'] ) > 0 ) ? implode( ' ', $p_query_clauses['join'] ) : '' );\n\t$t_where_string = count( $p_query_clauses['project_where'] ) > 0 ? 'WHERE '. implode( ' AND ', $p_query_clauses['project_where'] ) : '';\n\tif( count( $p_query_clauses['where'] ) > 0 ) {\n\t\t$t_where_string .= ' AND ( ';\n\t\t$t_where_string .= implode( $p_query_clauses['operator'], $p_query_clauses['where'] );\n\t\t$t_where_string .= ' ) ';\n\t}\n\t$t_result = db_query( $t_select_string . ' ' . $t_from_string . ' ' . $t_join_string . ' ' . $t_where_string, $p_query_clauses['where_values'] );\n\treturn db_result( $t_result );\n}\n\n/**\n * Get set of bug rows from given filter\n * @todo Had to make all these parameters required because we can't use call-time pass by reference anymore.\n * I really preferred not having to pass all the params in if you didn't want to, but I wanted to get\n * rid of the errors for now.  If we can think of a better way later (maybe return an object) that would be great.\n *\n * @param integer &$p_page_number  Page number of the page you want to see (set to the actual page on return).\n * @param integer &$p_per_page     The number of bugs to see per page (set to actual on return)\n *                                 -1   indicates you want to see all bugs\n *                                 null indicates you want to use the value specified in the filter.\n * @param integer &$p_page_count   You don't need to give a value here, the number of pages will be stored here on return.\n * @param integer &$p_bug_count    You don't need to give a value here, the number of bugs will be stored here on return.\n * @param mixed   $p_custom_filter Custom Filter to use.\n * @param integer $p_project_id    Project id to use in filtering.\n * @param integer $p_user_id       User id to use as current user when filtering.\n * @param boolean $p_show_sticky   True/false - get sticky issues only.\n * @return boolean|array\n */\nfunction filter_get_bug_rows( &$p_page_number, &$p_per_page, &$p_page_count, &$p_bug_count, $p_custom_filter = null, $p_project_id = null, $p_user_id = null, $p_show_sticky = null ) {\n\t# assigning to $p_* for this function writes the values back in case the caller wants to know\n\n\tif( $p_custom_filter === null ) {\n\t\t$t_filter = filter_get_bug_rows_filter( $p_project_id, $p_user_id );\n\t} else {\n\t\t$t_filter = $p_custom_filter;\n\t}\n\n\t# Get the query clauses\n\t$t_query_clauses = filter_get_bug_rows_query_clauses( $t_filter, $p_project_id, $p_user_id, $p_show_sticky );\n\n\t# Get the total number of bugs that meet the criteria.\n\t$p_bug_count = filter_get_bug_count( $t_query_clauses );\n\tif( 0 == $p_bug_count ) {\n\t\treturn array();\n\t}\n\n\t# Calculate pagination\n\t$p_per_page = filter_per_page( $t_filter, $p_bug_count, $p_per_page );\n\t$p_page_count = filter_page_count( $p_bug_count, $p_per_page );\n\t$p_page_number = filter_valid_page_number( $p_page_number, $p_page_count );\n\t$t_offset = filter_offset( $p_page_number, $p_per_page );\n\t# Execute query\n\t$t_result = filter_get_bug_rows_result( $t_query_clauses, $p_per_page, $t_offset );\n\n\t# Read results into rows array\n\t$t_bug_id_array = array();\n\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_bug_id_array[] = (int)$t_row['id'];\n\t\t$t_rows[] = $t_row;\n\t}\n\n\t# Return the processed rows: cache data, convert to bug objects\n\treturn filter_cache_result( $t_rows, $t_bug_id_array );\n}\n\n/**\n * Get the filter defined by user and project.\n * @param integer $p_project_id    Project id to use in filtering.\n * @param integer $p_user_id       User id to use as current user when filtering.\n * @return array\n */\nfunction filter_get_bug_rows_filter( $p_project_id = null, $p_user_id = null ) {\n\t$t_current_user_id = auth_get_current_user_id();\n\n\tif( $p_user_id === null || $p_user_id === 0 ) {\n\t\t$t_user_id = $t_current_user_id;\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\tif( null === $p_project_id ) {\n\t\t# @@@ If project_id is not specified, then use the project id(s) in the filter if set, otherwise, use current project.\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = $p_project_id;\n\t}\n\n\tif( $t_user_id == $t_current_user_id ) {\n\t\t$t_filter = current_user_get_bug_filter();\n\t} else {\n\t\t$t_filter = user_get_bug_filter( $t_user_id, $t_project_id );\n\t}\n\n\t# if filter isn't return above, create a new filter from an empty array.\n\tif( false === $t_filter ) {\n\t\t$t_filter = array();\n\t}\n\treturn $t_filter;\n}\n\n/**\n * Creates a sql query with the supplied filter query clauses, and returns the unprocessed result set opbject\n * @param array   $p_query_clauses Array of query clauses\n * @param integer $p_count         The number of rows to return\n *                                 -1 or null indicates default query (no limits)\n * @param integer $p_offset        Offset query results for paging (number of rows)\n *                                 -1 or null indicates default query (no offset)\n * @return IteratorAggregate|boolean adodb result set or false if the query failed.\n */\nfunction filter_get_bug_rows_result( array $p_query_clauses, $p_count = null, $p_offset = null ) {\n\tif( null === $p_count ) {\n\t\t$t_count = -1;\n\t} else {\n\t\t$t_count = $p_count;\n\t}\n\tif( null === $p_offset ) {\n\t\t$t_offset = -1;\n\t} else {\n\t\t$t_offset = $p_offset;\n\t}\n\t$t_query_clauses = $p_query_clauses;\n\t$t_select_string = 'SELECT DISTINCT ' . implode( ', ', $t_query_clauses['select'] );\n\t$t_from_string = ' FROM ' . implode( ', ', $t_query_clauses['from'] );\n\t$t_order_string = ' ORDER BY ' . implode( ', ', $t_query_clauses['order'] );\n\t$t_join_string = count( $t_query_clauses['join'] ) > 0 ? implode( ' ', $t_query_clauses['join'] ) : ' ';\n\t$t_where_string = ' WHERE '. implode( ' AND ', $t_query_clauses['project_where'] );\n\tif( count( $t_query_clauses['where'] ) > 0 ) {\n\t\t$t_where_string .= ' AND ( ';\n\t\t$t_where_string .= implode( $t_query_clauses['operator'], $t_query_clauses['where'] );\n\t\t$t_where_string .= ' ) ';\n\t}\n\n\t$t_result = db_query( $t_select_string . $t_from_string . $t_join_string . $t_where_string . $t_order_string, $t_query_clauses['where_values'], $t_count, $t_offset );\t\n\treturn $t_result;\n}\n\n/**\n * Creates an array of formatted query clauses, based on the supplied\n * filter and parameters.\n * Note: this function executes db_param_push():\n *  - If the returned query is not executed, db_param_pop() should be executed\n *    to clean up the parameter stack\n *  - If the final query adds db_param() outside of this function,\n *    they must be added after this function is called.\n * @param array   $p_filter       Filter array object\n * @param integer $p_project_id   Project id to use in filtering.\n * @param integer $p_user_id      User id to use as current user when filtering.\n * @param boolean $p_show_sticky  True/false - get sticky issues only.\n * @return array\n */\nfunction filter_get_bug_rows_query_clauses( array $p_filter, $p_project_id = null, $p_user_id = null, $p_show_sticky = null ) {\n\tlog_event( LOG_FILTERING, 'START NEW FILTER QUERY' );\n\n\t$t_limit_reporters = config_get( 'limit_reporters' );\n\t$t_report_bug_threshold = config_get( 'report_bug_threshold' );\n\t$t_where_param_count = 0;\n\n\t$t_current_user_id = auth_get_current_user_id();\n\n\tif( $p_user_id === null || $p_user_id === 0 ) {\n\t\t$t_user_id = $t_current_user_id;\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\t$c_user_id = (int)$t_user_id;\n\n\tif( null === $p_project_id ) {\n\t\t# @@@ If project_id is not specified, then use the project id(s) in the filter if set, otherwise, use current project.\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = $p_project_id;\n\t}\n\n\t$t_filter = filter_ensure_valid_filter( $p_filter );\n\n\t$t_view_type = $t_filter['_view_type'];\n\n\tdb_param_push();\n\n\t# project query clauses must be AND-ed always, irrespective of how the filter\n\t# clauses are requested by the user ( all matching -> AND, any matching -> OR )\n\t$t_where_clauses = array();\n\n\t$t_project_where_clauses =  array( '{project}.enabled = ' . db_param() );\n\t$t_where_params = array(\n\t\t1,\n\t);\n\t$t_select_clauses = array(\n\t\t'{bug}.*',\n\t);\n\n\t$t_from_clauses = array(\n\t\t'{bug}',\n\t);\n\n\t$t_join_clauses = array(\n\t\t' JOIN {project} ON {project}.id = {bug}.project_id',\n\t);\n\n\t# normalize the project filtering into an array $t_project_ids\n\tif( 'simple' == $t_view_type ) {\n\t\tlog_event( LOG_FILTERING, 'Simple Filter' );\n\t\t$t_project_ids = array(\n\t\t\t$t_project_id,\n\t\t);\n\t\t$t_include_sub_projects = true;\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'Advanced Filter' );\n\t\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t\t$t_project_ids = array(\n\t\t\t\t(int)$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t\t);\n\t\t} else {\n\t\t\t$t_project_ids = array_map( 'intval', $t_filter[FILTER_PROPERTY_PROJECT_ID] );\n\t\t}\n\n\t\t$t_include_sub_projects = (( count( $t_project_ids ) == 1 ) && ( ( $t_project_ids[0] == META_FILTER_CURRENT ) || ( $t_project_ids[0] == ALL_PROJECTS ) ) );\n\t}\n\n\tlog_event( LOG_FILTERING, 'project_ids = @P' . implode( ', @P', $t_project_ids ) );\n\tlog_event( LOG_FILTERING, 'include sub-projects = ' . ( $t_include_sub_projects ? '1' : '0' ) );\n\n\t# if the array has ALL_PROJECTS, then reset the array to only contain ALL_PROJECTS.\n\t# replace META_FILTER_CURRENT with the actualy current project id.\n\t$t_all_projects_found = false;\n\t$t_new_project_ids = array();\n\tforeach( $t_project_ids as $t_pid ) {\n\t\tif( $t_pid == META_FILTER_CURRENT ) {\n\t\t\t$t_pid = $t_project_id;\n\t\t}\n\n\t\tif( $t_pid == ALL_PROJECTS ) {\n\t\t\t$t_all_projects_found = true;\n\t\t\tlog_event( LOG_FILTERING, 'all projects selected' );\n\t\t\tbreak;\n\t\t}\n\n\t\t# filter out inaccessible projects.\n\t\tif( !project_exists( $t_pid ) || !access_has_project_level( config_get( 'view_bug_threshold', null, $t_user_id, $t_pid ), $t_pid, $t_user_id ) ) {\n\t\t\tlog_event( LOG_FILTERING, 'Invalid or inaccessible project: ' . $t_pid );\n\t\t\tcontinue;\n\t\t}\n\n\t\t$t_new_project_ids[] = $t_pid;\n\t}\n\n\t$t_projects_query_required = true;\n\tif( $t_all_projects_found ) {\n\t\tif( user_is_administrator( $t_user_id ) ) {\n\t\t\tlog_event( LOG_FILTERING, 'all projects + administrator, hence no project filter.' );\n\t\t\t$t_projects_query_required = false;\n\t\t} else {\n\t\t\t$t_project_ids = user_get_accessible_projects( $t_user_id );\n\t\t}\n\t} else {\n\t\t$t_project_ids = $t_new_project_ids;\n\t}\n\n\tif( $t_projects_query_required ) {\n\t\t# expand project ids to include sub-projects\n\t\tif( $t_include_sub_projects ) {\n\t\t\t$t_top_project_ids = $t_project_ids;\n\n\t\t\tforeach( $t_top_project_ids as $t_pid ) {\n\t\t\t\tlog_event( LOG_FILTERING, 'Getting sub-projects for project id @P' . $t_pid );\n\t\t\t\t$t_subproject_ids = user_get_all_accessible_subprojects( $t_user_id, $t_pid );\n\t\t\t\tif( !$t_subproject_ids ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$t_project_ids = array_merge( $t_project_ids, $t_subproject_ids );\n\t\t\t}\n\n\t\t\t$t_project_ids = array_unique( $t_project_ids );\n\t\t}\n\n\t\t# if no projects are accessible, then return an empty array.\n\t\tif( count( $t_project_ids ) == 0 ) {\n\t\t\tlog_event( LOG_FILTERING, 'no accessible projects' );\n\t\t\treturn array();\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'project_ids after including sub-projects = @P' . implode( ', @P', $t_project_ids ) );\n\n\t\t# this array is to be populated with project ids for which we only want to show public issues.  This is due to the limited\n\t\t# access of the current user.\n\t\t$t_public_only_project_ids = array();\n\n\t\t# this array is populated with project ids that the current user has full access to.\n\t\t$t_private_and_public_project_ids = array();\n\t\t$t_limited_projects = array();\n\n\t\tforeach( $t_project_ids as $t_pid ) {\n\t\t\t# limit reporters to visible projects\n\t\t\tif( ( ON === $t_limit_reporters ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold', null, $t_user_id, $t_pid ) ) + 1, $t_pid, $t_user_id ) ) ) {\n\t\t\t\tarray_push( $t_limited_projects, '({bug}.project_id=' . $t_pid . ' AND ({bug}.reporter_id=' . $t_user_id . ') )' );\n\t\t\t} else {\n\t\t\t\t$t_access_required_to_view_private_bugs = config_get( 'private_bug_threshold', null, null, $t_pid );\n\t\t\t\tif( access_has_project_level( $t_access_required_to_view_private_bugs, $t_pid, $t_user_id ) ) {\n\t\t\t\t\t$t_private_and_public_project_ids[] = $t_pid;\n\t\t\t\t} else {\n\t\t\t\t\t$t_public_only_project_ids[] = $t_pid;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'project_ids (with public/private access) = @P' . implode( ', @P', $t_private_and_public_project_ids ) );\n\t\tlog_event( LOG_FILTERING, 'project_ids (with public access) = @P' . implode( ', @P', $t_public_only_project_ids ) );\n\n\t\t$t_count_private_and_public_project_ids = count( $t_private_and_public_project_ids );\n\t\tif( $t_count_private_and_public_project_ids == 1 ) {\n\t\t\t$t_private_and_public_query = '( {bug}.project_id = ' . $t_private_and_public_project_ids[0] . ' )';\n\t\t} else if( $t_count_private_and_public_project_ids > 1 ) {\n\t\t\t$t_private_and_public_query = '( {bug}.project_id in (' . implode( ', ', $t_private_and_public_project_ids ) . ') )';\n\t\t} else {\n\t\t\t$t_private_and_public_query = null;\n\t\t}\n\n\t\t$t_count_public_only_project_ids = count( $t_public_only_project_ids );\n\t\t$t_public_view_state_check = '( ( {bug}.view_state = ' . VS_PUBLIC . ' ) OR ( {bug}.reporter_id = ' . $t_user_id . ') )';\n\t\tif( $t_count_public_only_project_ids == 1 ) {\n\t\t\t$t_public_only_query = '( ( {bug}.project_id = ' . $t_public_only_project_ids[0] . ' ) AND ' . $t_public_view_state_check . ')';\n\t\t} else if( $t_count_public_only_project_ids > 1 ) {\n\t\t\t$t_public_only_query = '( ( {bug}.project_id in (' . implode( ', ', $t_public_only_project_ids ) . ') ) AND ' . $t_public_view_state_check . ')';\n\t\t} else {\n\t\t\t$t_public_only_query = null;\n\t\t}\n\n\t\t# both queries can't be null, so we either have one of them or both.\n\n\t\tif( $t_private_and_public_query === null ) {\n\t\t\t$t_project_query = $t_public_only_query;\n\t\t} else if( $t_public_only_query === null ) {\n\t\t\t$t_project_query = $t_private_and_public_query;\n\t\t} else {\n\t\t\t$t_project_query = '( ' . $t_public_only_query . ' OR ' . $t_private_and_public_query . ' )';\n\t\t}\n\n\t\tif( !empty( $t_limited_projects ) ) {\n\t\t\tforeach( $t_limited_projects as $t_string ) {\n\t\t\t\tif( $t_project_query ==  \"\" ) {\n\t\t\t\t\t$t_project_query = \" ( $t_string ) \";\n\t\t\t\t} else {\n\t\t\t\t\t$t_project_query = \" ( $t_project_query OR ( $t_string ) )\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlog_event( LOG_FILTERING, 'project query = ' . $t_project_query );\n\t\tarray_push( $t_project_where_clauses, $t_project_query );\n\t}\n\n\t# date filter\n\tif( ( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_MONTH] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_DAY] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_YEAR] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_MONTH] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_DAY] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_YEAR] ) ) {\n\n\t\t$t_start_string = $t_filter[FILTER_PROPERTY_START_YEAR] . '-' . $t_filter[FILTER_PROPERTY_START_MONTH] . '-' . $t_filter[FILTER_PROPERTY_START_DAY] . ' 00:00:00';\n\t\t$t_end_string = $t_filter[FILTER_PROPERTY_END_YEAR] . '-' . $t_filter[FILTER_PROPERTY_END_MONTH] . '-' . $t_filter[FILTER_PROPERTY_END_DAY] . ' 23:59:59';\n\n\t\t$t_where_params[] = strtotime( $t_start_string );\n\t\t$t_where_params[] = strtotime( $t_end_string );\n\t\tarray_push( $t_project_where_clauses, '({bug}.date_submitted BETWEEN ' . db_param() . ' AND ' . db_param() . ' )' );\n\t}\n\n\t# view state\n\t$t_view_state = (int)$t_filter[FILTER_PROPERTY_VIEW_STATE];\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$t_view_state_query = '({bug}.view_state=' . db_param() . ')';\n\t\tlog_event( LOG_FILTERING, 'view_state query = ' . $t_view_state_query );\n\t\t$t_where_params[] = $t_view_state;\n\t\tarray_push( $t_where_clauses, $t_view_state_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no view_state query' );\n\t}\n\n\t# reporter\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_filter_member ) {\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '0' );\n\t\t\t} else {\n\t\t\t\t$c_reporter_id = (int)$t_filter_member;\n\t\t\t\tif( filter_field_is_myself( $c_reporter_id ) ) {\n\t\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_clauses, $c_reporter_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_reporter_query = '( {bug}.reporter_id in (' . implode( ', ', $t_clauses ) . ') )';\n\t\t} else {\n\t\t\t$t_reporter_query = '( {bug}.reporter_id=' . $t_clauses[0] . ' )';\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'reporter query = ' . $t_reporter_query );\n\t\tarray_push( $t_where_clauses, $t_reporter_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no reporter query' );\n\t}\n\n\t# handler\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_filter_member ) {\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, 0 );\n\t\t\t} else {\n\t\t\t\t$c_handler_id = (int)$t_filter_member;\n\t\t\t\tif( filter_field_is_myself( $c_handler_id ) ) {\n\t\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_clauses, $c_handler_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_handler_query = '( {bug}.handler_id in (' . implode( ', ', $t_clauses ) . ') )';\n\t\t} else {\n\t\t\t$t_handler_query = '( {bug}.handler_id=' . $t_clauses[0] . ' )';\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'handler query = ' . $t_handler_query );\n\t\tarray_push( $t_where_clauses, $t_handler_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no handler query' );\n\t}\n\n\t# category\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_filter_member ) {\n\t\t\tif( !filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, $t_filter_member );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.category_id in ( SELECT id FROM {category} WHERE name in (' . implode( ', ', $t_where_tmp ) . ') ) )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.category_id in ( SELECT id FROM {category} WHERE name=' . db_param() . ') )' );\n\t\t}\n\t}\n\n\t# severity\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_SEVERITY] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_filter_member ) {\n\t\t\t$c_show_severity = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_severity );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.severity in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.severity=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# show / hide status\n\t# take a list of all available statuses then remove the ones that we want hidden, then make sure\n\t# the ones we want shown are still available\n\t$t_desired_statuses = array();\n\t$t_available_statuses = MantisEnum::getValues( config_get( 'status_enum_string' ) );\n\n\tif( 'simple' == $t_filter['_view_type'] ) {\n\t\t# simple filtering: if showing any, restrict by the hide status value, otherwise ignore the hide\n\t\t$t_this_status = $t_filter[FILTER_PROPERTY_STATUS][0];\n\t\t$t_this_hide_status = isset( $t_filter[FILTER_PROPERTY_HIDE_STATUS][0] )\n\t\t\t? $t_filter[FILTER_PROPERTY_HIDE_STATUS][0]\n\t\t\t: null;\n\n\t\tif( filter_field_is_any( $t_this_status ) ) {\n\t\t\tforeach( $t_available_statuses as $t_this_available_status ) {\n\t\t\t\tif( $t_this_hide_status > $t_this_available_status ) {\n\t\t\t\t\t$t_desired_statuses[] = $t_this_available_status;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$t_desired_statuses[] = $t_this_status;\n\t\t}\n\t} else {\n\t\t# advanced filtering: ignore the hide\n\t\tif( filter_field_is_any( $t_filter[FILTER_PROPERTY_STATUS] ) ) {\n\t\t\t$t_desired_statuses = array();\n\t\t} else {\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_this_status ) {\n\t\t\t\t$t_desired_statuses[] = $t_this_status;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( count( $t_desired_statuses ) > 0 ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_desired_statuses as $t_filter_member ) {\n\t\t\t$c_show_status = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_status );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.status in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.status=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# resolution\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_RESOLUTION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_filter_member ) {\n\t\t\t$c_show_resolution = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_resolution );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.resolution in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.resolution=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# priority\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PRIORITY] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_filter_member ) {\n\t\t\t$c_show_priority = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_priority );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.priority in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.priority=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# product build\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_BUILD] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_show_build = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_build );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.build in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.build=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# product version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_show_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_version );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# profile\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '0' );\n\t\t\t} else {\n\t\t\t\t$c_show_profile = (int)$t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_profile );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.profile_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.profile_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# platform\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PLATFORM] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_platform = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_platform );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.platform in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.platform = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# Operating System (os)\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_OS] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_OS] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_os = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_os );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# Operating System Build (os_build)\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_OS_BUILD] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_os_build = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_os_build );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os_build in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os_build = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# fixed in version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_fixed_in_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_fixed_in_version );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.fixed_in_version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.fixed_in_version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# target version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_target_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_target_version );\n\t\t\t}\n\t\t}\n\n\t\t# echo var_dump( $t_clauses ); exit;\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.target_version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.target_version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# users monitoring a bug\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) ) {\n\t\t$t_clauses = array();\n\t\t$t_table_name = 'user_monitor';\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_monitor} ' . $t_table_name . ' ON ' . $t_table_name . '.bug_id = {bug}.id' );\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_filter_member ) {\n\t\t\t$c_user_monitor = (int)$t_filter_member;\n\t\t\tif( filter_field_is_myself( $c_user_monitor ) ) {\n\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t} else {\n\t\t\t\tarray_push( $t_clauses, $c_user_monitor );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_table_name . '.user_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_table_name . '.user_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# bug relationship\n\t$t_any_found = false;\n\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\tif( -1 == $c_rel_type || 0 == $c_rel_bug ) {\n\t\t$t_any_found = true;\n\t}\n\tif( !$t_any_found ) {\n\t\t# use the complementary type\n\t\t$t_comp_type = relationship_get_complementary_type( $c_rel_type );\n\t\t$t_clauses = array();\n\t\t$t_table_dst = 'rel_dst';\n\t\t$t_table_src = 'rel_src';\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_relationship} ' . $t_table_dst . ' ON ' . $t_table_dst . '.destination_bug_id = {bug}.id' );\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_relationship} ' . $t_table_src . ' ON ' . $t_table_src . '.source_bug_id = {bug}.id' );\n\n\t\t# get reverse relationships\n\t\t$t_where_params[] = $t_comp_type;\n\t\t$t_where_params[] = $c_rel_bug;\n\t\t$t_where_params[] = $c_rel_type;\n\t\t$t_where_params[] = $c_rel_bug;\n\t\tarray_push( $t_clauses, '(' . $t_table_dst . '.relationship_type=' . db_param() . ' AND ' . $t_table_dst . '.source_bug_id=' . db_param() . ')' );\n\t\tarray_push( $t_clauses, '(' . $t_table_src . '.relationship_type=' . db_param() . ' AND ' . $t_table_src . '.destination_bug_id=' . db_param() . ')' );\n\t\tarray_push( $t_where_clauses, '(' . implode( ' OR ', $t_clauses ) . ')' );\n\t}\n\n\t# tags\n\t$c_tag_string = trim( $t_filter[FILTER_PROPERTY_TAG_STRING] );\n\t$c_tag_select = trim( $t_filter[FILTER_PROPERTY_TAG_SELECT] );\n\tif( is_blank( $c_tag_string ) && !is_blank( $c_tag_select ) && $c_tag_select != 0 && tag_exists( $c_tag_select ) ) {\n\t\t$t_tag = tag_get( $c_tag_select );\n\t\t$c_tag_string = $t_tag['name'];\n\t}\n\n\tif( !is_blank( $c_tag_string ) ) {\n\t\t$t_tags = tag_parse_filters( $c_tag_string );\n\n\t\tif( count( $t_tags ) ) {\n\n\t\t\t$t_tags_all = array();\n\t\t\t$t_tags_any = array();\n\t\t\t$t_tags_none = array();\n\n\t\t\tforeach( $t_tags as $t_tag_row ) {\n\t\t\t\tswitch( $t_tag_row['filter'] ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$t_tags_all[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t$t_tags_any[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\t$t_tags_none[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( 0 < $t_filter[FILTER_PROPERTY_TAG_SELECT] && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t\t\t$t_tags_any[] = tag_get( $t_filter[FILTER_PROPERTY_TAG_SELECT] );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_all ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_all as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug}.id IN ( SELECT bug_id FROM {bug_tag} WHERE {bug_tag}.tag_id = ' . $t_tag_row['id'] . ')' );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '(' . implode( ' AND ', $t_clauses ) . ')' );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_any ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_any as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug_tag}.tag_id = ' . $t_tag_row['id'] );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '{bug}.id IN ( SELECT bug_id FROM {bug_tag} WHERE ( ' . implode( ' OR ', $t_clauses ) . ') )' );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_none ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_none as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug_tag}.tag_id = ' . $t_tag_row['id'] );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '{bug}.id NOT IN ( SELECT bug_id FROM {bug_tag} WHERE ( ' . implode( ' OR ', $t_clauses ) . ') )' );\n\t\t\t}\n\t\t}\n\t}\n\n\t# note user id\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) ) {\n\t\t$t_bugnote_table_alias = 'mbnt';\n\t\t$t_clauses = array();\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bugnote} ' . $t_bugnote_table_alias . ' ON {bug}.id = ' . $t_bugnote_table_alias . '.bug_id' );\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_filter_member ) {\n\t\t\t$c_note_user_id = (int)$t_filter_member;\n\t\t\tif( filter_field_is_myself( $c_note_user_id ) ) {\n\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t} else {\n\t\t\t\tarray_push( $t_clauses, $c_note_user_id );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_bugnote_table_alias . '.reporter_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_bugnote_table_alias . '.reporter_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# plugin filters\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\tif( !filter_field_is_any( $t_filter[$t_field_name] ) || $t_filter_object->type == FILTER_TYPE_BOOLEAN ) {\n\t\t\t$t_filter_query = $t_filter_object->query( $t_filter[$t_field_name] );\n\t\t\tif( is_array( $t_filter_query ) ) {\n\t\t\t\tif( isset( $t_filter_query['join'] ) ) {\n\t\t\t\t\tarray_push( $t_join_clauses, $t_filter_query['join'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $t_filter_query['where'] ) ) {\n\t\t\t\t\tarray_push( $t_where_clauses, $t_filter_query['where'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $t_filter_query['params'] ) && is_array( $t_filter_query['params'] ) ) {\n\t\t\t\t\t$t_where_params = array_merge( $t_where_params, $t_filter_query['params'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t# custom field filters\n\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t# custom field filtering\n\t\t# @@@ At the moment this gets the linked fields relating to the current project\n\t\t#     It should get the ones relating to the project in the filter or all projects\n\t\t#     if multiple projects.\n\t\t$t_custom_fields = custom_field_get_linked_ids( $t_project_id );\n\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t$t_field_info = custom_field_cache_row( $t_cfid, true );\n\t\t\tif( !$t_field_info['filter_by'] ) {\n\t\t\t\tcontinue;\n\n\t\t\t\t# skip this custom field it shouldn't be filterable\n\t\t\t}\n\n\t\t\t$t_field = $t_filter['custom_fields'][$t_cfid];\n\t\t\t$t_custom_where_clause = '';\n\n\t\t\t# Ignore all custom filters that are not set, or that are set to '' or \"any\"\n\t\t\tif( !filter_field_is_any( $t_field ) ) {\n\t\t\t\t$t_def = custom_field_get_definition( $t_cfid );\n\t\t\t\t$t_table_name = '{custom_field_string}_' . $t_cfid;\n\n\t\t\t\t# We need to filter each joined table or the result query will explode in dimensions\n\t\t\t\t# Each custom field will result in a exponential growth like Number_of_Issues^Number_of_Custom_Fields\n\t\t\t\t# and only after this process ends (if it is able to) the result query will be filtered\n\t\t\t\t# by the WHERE clause and by the DISTINCT clause\n\t\t\t\t$t_cf_join_clause = 'LEFT JOIN {custom_field_string} ' . $t_table_name . ' ON {bug}.id = ' . $t_table_name . '.bug_id AND ' . $t_table_name . '.field_id = ' . $t_cfid;\n\n\t\t\t\tif( $t_def['type'] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\t\t\t# Define the value field with type cast to integer\n\t\t\t\t\t$t_value_field = 'CAST(COALESCE(NULLIF(' . $t_table_name . '.value, \\'\\'), \\'0\\') AS DECIMAL)';\n\t\t\t\t\tswitch( $t_field[0] ) {\n\t\t\t\t\t\t# Closing parenthesis intentionally omitted, will be added later on\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_table_name . '.bug_id is null OR ' . $t_value_field . ' = 0 ';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' != 0 AND ' . $t_value_field . ' < ' . $t_field[2];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' > ' . ( $t_field[1] + 1 );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' BETWEEN ' . $t_field[1] . ' AND ' . $t_field[2];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\n\t\t\t\t\t$t_filter_array = array();\n\t\t\t\t\tforeach( $t_field as $t_filter_member ) {\n\t\t\t\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\t\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\t\t\t\t# coerce filter value if selecting META_FILTER_NONE so it will match empty fields\n\t\t\t\t\t\t\t$t_filter_member = '';\n\n\t\t\t\t\t\t\t# but also add those _not_ present in the custom field string table\n\t\t\t\t\t\t\tarray_push( $t_filter_array, '{bug}.id NOT IN (SELECT bug_id FROM {custom_field_string} WHERE field_id=' . $t_cfid . ')' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch( $t_def['type'] ) {\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_CHECKBOX:\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_MULTILIST:\n\t\t\t\t\t\t\t\t$t_where_params[] = '%|' . $t_filter_member . '|%';\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, db_helper_like( $t_table_name . '.value' ) );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_TEXTAREA:\n\t\t\t\t\t\t\t\t$t_where_params[] = '%' . $t_filter_member . '%';\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, db_helper_like( $t_table_name . '.text' ) );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$t_where_params[] = $t_filter_member;\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, $t_table_name . '.value = ' . db_param() );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$t_custom_where_clause .= '(' . implode( ' OR ', $t_filter_array );\n\t\t\t\t}\n\t\t\t\tif( !is_blank( $t_custom_where_clause ) ) {\n\t\t\t\t\tarray_push( $t_where_clauses, $t_custom_where_clause . ')' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t# Text search\n\tif( !is_blank( $t_filter[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t# break up search terms by spacing or quoting\n\t\tpreg_match_all( \"/-?([^'\\\"\\s]+|\\\"[^\\\"]+\\\"|'[^']+')/\", $t_filter[FILTER_PROPERTY_SEARCH], $t_matches, PREG_SET_ORDER );\n\n\t\t# organize terms without quoting, paying attention to negation\n\t\t$t_search_terms = array();\n\t\tforeach( $t_matches as $t_match ) {\n\t\t\t$t_search_terms[trim( $t_match[1], \"\\'\\\"\" )] = ( $t_match[0][0] == '-' );\n\t\t}\n\n\t\t# build a big where-clause and param list for all search terms, including negations\n\t\t$t_first = true;\n\t\t$t_textsearch_where_clause = '( ';\n\t\tforeach( $t_search_terms as $t_search_term => $t_negate ) {\n\t\t\tif( !$t_first ) {\n\t\t\t\t$t_textsearch_where_clause .= ' AND ';\n\t\t\t}\n\n\t\t\tif( $t_negate ) {\n\t\t\t\t$t_textsearch_where_clause .= 'NOT ';\n\t\t\t}\n\n\t\t\t$c_search = '%' . $t_search_term . '%';\n\t\t\t$t_textsearch_where_clause .= '( ' . db_helper_like( '{bug}.summary' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.description' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.steps_to_reproduce' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.additional_information' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bugnote_text}.note' );\n\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\n\t\t\tif( is_numeric( $t_search_term ) ) {\n\t\t\t\t# PostgreSQL on 64-bit OS hack (see #14014)\n\t\t\t\tif( PHP_INT_MAX > 0x7FFFFFFF && db_is_pgsql() ) {\n\t\t\t\t\t$t_search_max = 0x7FFFFFFF;\n\t\t\t\t} else {\n\t\t\t\t\t$t_search_max = PHP_INT_MAX;\n\t\t\t\t}\n\t\t\t\t# Note: no need to test negative values, '-' sign has been removed\n\t\t\t\tif( $t_search_term <= $t_search_max ) {\n\t\t\t\t\t$c_search_int = (int)$t_search_term;\n\t\t\t\t\t$t_textsearch_where_clause .= ' OR {bug}.id = ' . db_param();\n\t\t\t\t\t$t_textsearch_where_clause .= ' OR {bugnote}.id = ' . db_param();\n\t\t\t\t\t$t_where_params[] = $c_search_int;\n\t\t\t\t\t$t_where_params[] = $c_search_int;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$t_textsearch_where_clause .= ' )';\n\t\t\t$t_first = false;\n\t\t}\n\t\t$t_textsearch_where_clause .= ' )';\n\n\t\t# add text query elements to arrays\n\t\tif( !$t_first ) {\n\t\t\t$t_join_clauses[] = 'JOIN {bug_text} ON {bug}.bug_text_id = {bug_text}.id';\n\t\t\t$t_join_clauses[] = 'LEFT JOIN {bugnote} ON {bug}.id = {bugnote}.bug_id';\n\t\t\t# Outer join required otherwise we don't retrieve issues without notes\n\t\t\t$t_join_clauses[] = 'LEFT JOIN {bugnote_text} ON {bugnote}.bugnote_text_id = {bugnote_text}.id';\n\t\t\t$t_where_clauses[] = $t_textsearch_where_clause;\n\t\t}\n\t}\n\n\t# End text search\n\n\t# Determine join operator\n\tif( $t_filter[FILTER_PROPERTY_MATCH_TYPE] == FILTER_MATCH_ANY ) {\n\t\t$t_join_operator = ' OR ';\n\t} else {\n\t\t$t_join_operator = ' AND ';\n\t}\n\n\tlog_event( LOG_FILTERING, 'Join operator : ' . $t_join_operator );\n\n\t$t_query_clauses['select'] = $t_select_clauses;\n\t$t_query_clauses['from'] = $t_from_clauses;\n\t$t_query_clauses['join'] = $t_join_clauses;\n\t$t_query_clauses['where'] = $t_where_clauses;\n\t$t_query_clauses['where_values'] = $t_where_params;\n\t$t_query_clauses['project_where'] = $t_project_where_clauses;\n\t$t_query_clauses['operator'] = $t_join_operator;\n\t$t_query_clauses = filter_get_query_sort_data( $t_filter, $p_show_sticky, $t_query_clauses );\n\n\t$t_query_clauses = filter_unique_query_clauses( $t_query_clauses );\n\treturn $t_query_clauses;\n}\n\n/**\n *  Cache the filter results with bugnote stats for later use\n * @param array $p_rows             Results of the filter query.\n * @param array $p_id_array_lastmod Array of bug ids.\n * @return array\n */\nfunction filter_cache_result( array $p_rows, array $p_id_array_lastmod ) {\n\t$t_id_array_lastmod = array_unique( $p_id_array_lastmod );\n\t$t_where_string = ' WHERE {bugnote}.bug_id in (' . implode( ', ', $t_id_array_lastmod ) . ')';\n\t$t_query = 'SELECT DISTINCT bug_id,MAX(last_modified) as last_modified, COUNT(last_modified) as count FROM {bugnote} ' . $t_where_string . ' GROUP BY bug_id';\n\n\t# perform query\n\t$t_result = db_query( $t_query );\n\t$t_row_count = db_num_rows( $t_result );\n\twhile ( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_stats[$t_row['bug_id']] = $t_row;\n\t}\n\n\t$t_rows = array();\n\tforeach( $p_rows as $t_row ) {\n\t\tif( !isset( $t_stats[$t_row['id']] ) ) {\n\t\t\t$t_rows[] = bug_row_to_object( bug_cache_database_result( $t_row ) );\n\t\t} else {\n\t\t\t$t_rows[] = bug_row_to_object( bug_cache_database_result( $t_row, $t_stats[$t_row['id']] ) );\n\t\t}\n\t}\n\treturn $t_rows;\n}\n\n/**\n * Mainly based on filter_draw_selection_area2() but adds the support for the collapsible\n * filter display.\n * @param integer $p_page_number Page number.\n * @param boolean $p_for_screen  Whether output is for screen view.\n * @return void\n * @see filter_draw_selection_area2\n */\nfunction filter_draw_selection_area( $p_page_number, $p_for_screen = true ) {\n\tcollapse_open( 'filter' );\n\tfilter_draw_selection_area2( $p_page_number, $p_for_screen, true );\n\tcollapse_closed( 'filter' );\n\tfilter_draw_selection_area2( $p_page_number, $p_for_screen, false );\n\tcollapse_end( 'filter' );\n}\n\n/**\n * Prints the filter selection area for both the bug list view screen and\n * the bug list print screen. This function was an attempt to make it easier to\n * add new filters and rearrange them on screen for both pages.\n * @param integer $p_page_number Page number.\n * @param boolean $p_for_screen  Whether output is for screen view.\n * @param boolean $p_expanded    Whether to display expanded.\n * @return void\n */\nfunction filter_draw_selection_area2( $p_page_number, $p_for_screen = true, $p_expanded = true ) {\n\t$t_form_name_suffix = $p_expanded ? '_open' : '_closed';\n\n\t$t_filter = current_user_get_bug_filter();\n\t$t_filter = filter_ensure_valid_filter( $t_filter === false ? array() : $t_filter );\n\t$t_project_id = helper_get_current_project();\n\t$t_page_number = (int)$p_page_number;\n\n\t$t_view_type = $t_filter['_view_type'];\n\n\t$t_tdclass = 'small-caption';\n\t$t_trclass = 'row-category2';\n\t$t_action = 'view_all_set.php?f=3';\n\n\tif( $p_for_screen == false ) {\n\t\t$t_tdclass = 'print';\n\t\t$t_trclass = '';\n\t\t$t_action = 'view_all_set.php';\n\t}\n\t?>\n\n\t<div class=\"filter-box\">\n\t\t<form method=\"post\" name=\"filters<?php echo $t_form_name_suffix?>\" id=\"filters_form<?php echo $t_form_name_suffix?>\" action=\"<?php echo $t_action;?>\">\n\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t<input type=\"hidden\" name=\"type\" value=\"1\" />\n\t\t<?php\n\t\t\tif( $p_for_screen == false ) {\n\t\techo '<input type=\"hidden\" name=\"print\" value=\"1\" />';\n\t\techo '<input type=\"hidden\" name=\"offset\" value=\"0\" />';\n\t}\n\t?>\n\t\t<input type=\"hidden\" name=\"page_number\" value=\"<?php echo $t_page_number?>\" />\n\t\t<input type=\"hidden\" name=\"view_type\" value=\"<?php echo $t_view_type?>\" />\n\t\t<?php\n\t\t$t_filter_cols = config_get( 'filter_custom_fields_per_row' );\n\tif( $p_expanded ) {\n\t\t?>\n\t\t<table width=\"100%\" cellspacing=\"1\">\n\t\t<?php\n\t\t$t_custom_cols = $t_filter_cols;\n\n\t\t$t_current_user_access_level = current_user_get_access_level();\n\t\t$t_accessible_custom_fields_ids = array();\n\t\t$t_accessible_custom_fields_names = array();\n\t\t$t_accessible_custom_fields_values = array();\n\t\t$t_num_custom_rows = 0;\n\t\t$t_per_row = 0;\n\n\t\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t\t$t_custom_fields = custom_field_get_linked_ids( $t_project_id );\n\n\t\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t\t$t_field_info = custom_field_cache_row( $t_cfid, true );\n\t\t\t\tif( $t_field_info['access_level_r'] <= $t_current_user_access_level && $t_field_info['filter_by'] ) {\n\t\t\t\t\t$t_accessible_custom_fields_ids[] = $t_cfid;\n\t\t\t\t\t$t_accessible_custom_fields_names[] = $t_field_info['name'];\n\t\t\t\t\t$t_accessible_custom_fields_types[] = $t_field_info['type'];\n\t\t\t\t\t$t_accessible_custom_fields_values[] = custom_field_distinct_values( $t_field_info );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( count( $t_accessible_custom_fields_ids ) > 0 ) {\n\t\t\t\t$t_per_row = config_get( 'filter_custom_fields_per_row' );\n\t\t\t\t$t_num_custom_rows = ceil( count( $t_accessible_custom_fields_ids ) / $t_per_row );\n\t\t\t}\n\t\t}\n\n\t\t$t_filters_url = 'view_filters_page.php?for_screen=' . $p_for_screen;\n\t\tif( 'advanced' == $t_view_type ) {\n\t\t\t$t_filters_url = $t_filters_url . '&amp;view_type=advanced';\n\t\t}\n\t\t$t_filters_url = $t_filters_url . '&amp;target_field=';\n\n\t\t$t_show_product_version =  version_should_show_product_version( $t_project_id );\n\t\t$t_show_build = $t_show_product_version && ( config_get( 'enable_product_build' ) == ON );\n\n\t\t# overload handler_id setting if user isn't supposed to see them (ref #6189)\n\t\tif( !access_has_any_project( config_get( 'view_handler_threshold' ) ) ) {\n\t\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array(\n\t\t\t\tMETA_FILTER_ANY,\n\t\t\t);\n\t\t}\n\n\t\t$t_dynamic_filter_expander_class = ( config_get( 'use_dynamic_filters' ) ) ? ' class=\"dynamic-filter-expander\"' : '';\n\t\t?>\n\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_REPORTER_ID . '[]';?>\" id=\"reporter_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'reporter_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_MONITOR_USER_ID . '[]';?>\" id=\"user_monitor_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'monitored_by_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_HANDLER_ID . '[]';?>\" id=\"handler_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'assigned_to_label' )?></a>\n\t\t\t</td>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_CATEGORY_ID . '[]';?>\" id=\"show_category_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'category_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_SEVERITY . '[]';?>\" id=\"show_severity_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'severity_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_RESOLUTION . '[]';?>\" id=\"show_resolution_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'resolution_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PROFILE_ID . '[]';?>\" id=\"show_profile_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'profile_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"reporter_id_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_current ) {\n\t\t\t\t$t_this_name = '';\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_REPORTER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"user_monitor_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_MONITOR_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo string_display( $t_output );\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"handler_id_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HANDLER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo string_display( $t_output );\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td colspan=\"2\" class=\"small-caption\" id=\"show_category_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_CATEGORY_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_severity_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_SEVERITY] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SEVERITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'severity', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_resolution_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_RESOLUTION] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RESOLUTION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'resolution', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t<td class=\"small-caption\" id=\"show_profile_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROFILE_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_profile = profile_get_row_direct( $t_current );\n\t\t\t\t\t$t_this_string = $t_profile['platform'] . ' ' . $t_profile['os'] . ' ' . $t_profile['os_build'];\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php } else { ?>\n\t\t\t\t<td></td>\n\t\t\t<?php }\n\t\t\t\tif( $t_filter_cols > 8 ) {\n\t\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t\t\t}?>\n\t\t</tr>\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_STATUS . '[]';?>\" id=\"show_status_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'status_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( 'simple' == $t_view_type ) {?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_HIDE_STATUS . '[]';?>\" id=\"hide_status_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'hide_status_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t<?php if( $t_show_build ) { ?>\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_BUILD . '[]';?>\" id=\"show_build_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'product_build_label' )?></a>\n\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_show_product_version ) {?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_VERSION . '[]';?>\" id=\"show_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'product_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_FIXED_IN_VERSION . '[]';?>\" id=\"show_fixed_in_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'fixed_in_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php } else {?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<?php } ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PRIORITY . '[]';?>\" id=\"show_priority_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'priority_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php if( $t_show_product_version ) {?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_TARGET_VERSION . '[]';?>\" id=\"show_target_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'target_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php\n\t\t\t} else {?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<?php\n\t\t\t}\n\t\t\tif( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 7 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"show_status_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_STATUS] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"hide_status_filter_target\">\n\t\t<?php\n\t\tif( 'simple' == $t_view_type ) {\n\t\t\t$t_output = '';\n\t\t\t$t_none_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 0 ) {\n\t\t\t\techo lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_HIDE_STATUS] as $t_current ) {\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HIDE_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_none_found = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\t$t_hide_status_post = '';\n\t\t\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 1 ) {\n\t\t\t\t\t$t_hide_status_post = ' (' . lang_get( 'and_above' ) . ')';\n\t\t\t\t}\n\t\t\t\tif( true == $t_none_found ) {\n\t\t\t\t\techo lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output . string_display_line( $t_hide_status_post );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t<?php\n\t\tif( $t_show_build ) {\n\t\t?>\n\t\t\t<td class=\"small-caption\" id=\"show_build_filter_target\">\n\t\t<?php\n\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_BUILD] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_BUILD, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t\t<?php } else { ?>\n\t\t\t<td class=\"small-caption\"></td>\n\t\t\t<?php }\n\t\t\t\tif( $t_show_product_version ) {\n\t\t\t?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\" id=\"show_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_VERSION] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_fixed_in_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FIXED_IN_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t<?php } else { ?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t<?php } ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_priority_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_PRIORITY] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PRIORITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'priority', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t</td>\n\t\t<?php if( $t_show_product_version ) { ?>\n\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_target_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_current ) {\n\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TARGET_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t<?php } else { ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t<?php }\n\n\t\tif( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 7 ) . '\">&#160;</td>';\n\t\t}?>\n\n\t\t</tr>\n\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" id=\"per_page_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'show_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_VIEW_STATE;?>\" id=\"view_state_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'view_status_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_STICKY;?>\" id=\"sticky_issues_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'sticky_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" >\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_FILTER_BY_DATE;?>\" id=\"do_filter_by_date_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'use_date_filters_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_RELATIONSHIP_TYPE;?>\" id=\"relationship_type_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'bug_relationships_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"per_page_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\techo( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] == 0 ) ? lang_get( 'all' ) : string_display_line( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_ISSUES_PER_PAGE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"view_state_filter_target\">\n\t\t\t\t<?php\n\t\t\t\tif( VS_PUBLIC === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\t\techo lang_get( 'public' );\n\t\t} else if( VS_PRIVATE === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\t\techo lang_get( 'private' );\n\t\t} else {\n\t\t\techo lang_get( 'any' );\n\t\t\t$t_filter[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t\t}\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VIEW_STATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_VIEW_STATE] ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"sticky_issues_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_sticky_filter_state = gpc_string_to_bool( $t_filter[FILTER_PROPERTY_STICKY] );\n\t\t\t\t\tprint( $t_sticky_filter_state ? lang_get( 'yes' ) : lang_get( 'no' ) );\n\t\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php\n\t\t\t\t\techo FILTER_PROPERTY_STICKY; ?>\" value=\"<?php\n\t\t\t\t\techo $t_sticky_filter_state ? 'on' : 'off'; ?>\" />\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">&#160;\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"do_filter_by_date_filter_target\">\n\t\t<?php\n\t\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_DATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_MONTH] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_DAY] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_YEAR] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_MONTH] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_DAY] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_YEAR] ), '\" />';\n\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_START_MONTH], $t_filter[FILTER_PROPERTY_START_DAY], $t_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t\tforeach( $t_chars as $t_char ) {\n\t\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'F', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'd', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'Y', $t_time );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo ' - ';\n\n\t\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_END_MONTH], $t_filter[FILTER_PROPERTY_END_DAY], $t_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t\tforeach( $t_chars as $t_char ) {\n\t\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'F', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'd', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'Y', $t_time );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\techo lang_get( 'no' );\n\t\t}\n\t\t?>\n\t\t\t</td>\n\n\t\t\t<td class=\"small-caption\" colspan=\"2\" id=\"relationship_type_filter_target\">\n\t\t<?php\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_TYPE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ), '\" />';\n\t\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\t\tif( -1 == $c_rel_type || 0 == $c_rel_bug ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo relationship_get_description_for_history( $c_rel_type ) . ' ' . $c_rel_bug;\n\t\t}\n\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PLATFORM;?>\" id=\"platform_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'platform_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_OS;?>\" id=\"os_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'os_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_OS_BUILD;?>\" id=\"os_build_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'os_version_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"5\">\n\t\t\t\t<?php if( access_has_global_level( config_get( 'tag_view_threshold' ) ) ) { ?>\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_TAG_STRING;?>\" id=\"tag_string_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'tags_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr class=\"row-1\">\n\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t<td class=\"small-caption\" id=\"platform_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_PLATFORM, $t_filter[FILTER_PROPERTY_PLATFORM] ); ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"os_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_OS, $t_filter[FILTER_PROPERTY_OS] ); ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"os_build_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_OS_BUILD, $t_filter[FILTER_PROPERTY_OS_BUILD] ); ?>\n\t\t\t</td>\n\t\t\t<?php } else {?>\n\t\t\t\t<td colspan=\"3\">&#160;</td>\n\t\t\t<?php } ?>\n\n\t\t\t<td class=\"small-caption\" id=\"tag_string_filter_target\" colspan=\"5\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_tag_string = $t_filter[FILTER_PROPERTY_TAG_STRING];\n\t\tif( $t_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t\t$t_tag_string .= tag_get_field( $t_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t\t}\n\t\techo string_html_entities( $t_tag_string );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TAG_STRING, '\" value=\"', string_attribute( $t_tag_string ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<?php\n\n\t\t# get plugin filters\n\t\t$t_plugin_filters = filter_get_plugin_filters();\n\t\t$t_plugin_filter_links = array();\n\t\t$t_plugin_filter_fields = array();\n\t\t$t_column_count_by_row = array();\n\t\t$t_row = 0;\n\t\t$t_column_count_by_row[$t_row] = 0;\n\t\tforeach( $t_plugin_filters as $t_field_name=>$t_filter_object ) {\n\t\t\t# be sure the colspan is an integer\n\t\t\t$t_colspan = (int)$t_filter_object->colspan;\n\n\t\t\t# prevent silliness.\n\t\t\tif( $t_colspan < 0 ) {\n\t\t\t\t$t_colspan = abs( $t_colspan );\n\t\t\t} else if( $t_colspan > $t_filter_cols ) {\n\t\t\t\t$t_colspan = $t_filter_cols;\n\t\t\t} else if( $t_colspan == 0 ) {\n\t\t\t\t$t_colspan = 1;\n\t\t\t}\n\t\t\t# the row may already have elements in it. find out.\n\t\t\t$t_columns_available = $t_filter_cols - $t_column_count_by_row[$t_row];\n\t\t\tif( $t_columns_available == 0 ) {\n\t\t\t\t$t_row++;\n\t\t\t\t$t_column_count_by_row[$t_row] = 0;\n\t\t\t}\n\n\t\t\t# see if there is room in the current row\n\t\t\tif( $t_columns_available >= $t_colspan ) {\n\t\t\t\t$t_assigned_row = $t_row;\n\t\t\t\t$t_column_count_by_row[$t_row] += $t_colspan;\n\t\t\t} else {\n\t\t\t\t$t_is_assigned = false;\n\t\t\t\t# find a row with space\n\t\t\t\tforeach( $t_column_count_by_row as $t_row_num=>$t_col_count ) {\n\t\t\t\t\tif( $t_colspan <= ( $t_filter_cols - $t_col_count ) ) {\n\t\t\t\t\t\t$t_assigned_row = $t_row_num;\n\t\t\t\t\t\t$t_column_count_by_row[$t_row_num] += $t_colspan;\n\t\t\t\t\t\t$t_is_assigned = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( !$t_is_assigned ) {\n\t\t\t\t\t# no space was found in existing rows. Add a new row for it.\n\t\t\t\t\t$t_assigned_row = count( $t_plugin_filter_links );\n\t\t\t\t\t$t_column_count_by_row[$t_assigned_row] = $t_colspan;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t_colspan_attr = ( $t_colspan > 1 ? 'colspan=\"' . $t_colspan . '\" ' : '' );\n\t\t\t$t_plugin_filter_links[$t_assigned_row][] = '<td ' . $t_colspan_attr . 'class=\"small-caption\"> <a href=\"' . $t_filters_url . string_attribute( $t_field_name ) .\n\t\t\t\t'\" id=\"' . string_attribute( $t_field_name ) . '_filter\"' . $t_dynamic_filter_expander_class . '>' . string_display_line( $t_filter_object->title ) . '</a> </td>';\n\t\t\t$t_values = '<td ' . $t_colspan_attr . 'class=\"small-caption\" id=\"' . string_attribute( $t_field_name ) . '_filter_target\"> ';\n\n\t\t\tif( !isset( $t_filter[$t_field_name] ) ) {\n\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\tswitch( $t_filter_object->type ) {\n\t\t\t\t\tcase FILTER_TYPE_STRING:\n\t\t\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\t\t\tif( filter_field_is_any( $t_filter[$t_field_name] ) ) {\n\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_values .= string_display_line( $t_filter[$t_field_name] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '\" value=\"' . string_attribute( $t_filter[$t_field_name] ) . '\"/>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\t\t\t$t_values .= string_display_line( $t_filter_object->display( (bool)$t_filter[$t_field_name] ) );\n\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '\" value=\"' . (bool)$t_filter[$t_field_name] . '\"/>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\t\t\t$t_first = true;\n\t\t\t\t\t\t$t_output = '';\n\n\t\t\t\t\t\tif( !is_array( $t_filter[$t_field_name] ) ) {\n\t\t\t\t\t\t\t$t_filter[$t_field_name] = array( $t_filter[$t_field_name] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tforeach( $t_filter[$t_field_name] as $t_current ) {\n\t\t\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t\t\t$t_output .= lang_get( 'any' );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$t_output .= ( $t_first ? '' : '<br/>' ) . string_display_line( $t_filter_object->display( $t_current ) );\n\t\t\t\t\t\t\t\t$t_first = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '[]\" value=\"' . string_attribute( $t_current ) . '\"/>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$t_values .= $t_output;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$t_values .= '</td>';\n\n\t\t\t$t_plugin_filter_fields[$t_assigned_row][] = $t_values;\n\t\t}\n\n\t\t$t_row_count = count( $t_plugin_filter_links );\n\t\tfor( $i=0; $i<$t_row_count; $i++ ) {\n\t\t\tif( $t_column_count_by_row[$i] < $t_filter_cols ) {\n\t\t\t\t$t_plugin_filter_links[$i][] = '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - $t_column_count_by_row[$i] ) . '\">&#160;</td>';\n\t\t\t\t$t_plugin_filter_fields[$i][] = '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - $t_column_count_by_row[$i] ) . '\">&#160;</td>';\n\t\t\t}\n\t\t\t$t_links_row = \"\\n\\t\\t\" . join( \"\\n\\t\\t\", $t_plugin_filter_links[$i] );\n\t\t\t$t_values_row = \"\\n\\t\\t\" . join( \"\\n\\t\\t\", $t_plugin_filter_fields[$i] );\n\t\t\techo \"\\n\\t\" . '<tr class=\"', $t_trclass, '\">', $t_links_row, \"\\n\\t</tr>\";\n\t\t\techo \"\\n\\t\" . '<tr class=\"row-1\">', $t_values_row, \"\\n\\t</tr>\\n\\t\";\n\t\t}\n\n\t\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\n\t\t\t# -- Custom Field Searching --\n\n\t\t\tif( count( $t_accessible_custom_fields_ids ) > 0 ) {\n\t\t\t\t$t_per_row = config_get( 'filter_custom_fields_per_row' );\n\t\t\t\t$t_num_fields = count( $t_accessible_custom_fields_ids );\n\t\t\t\t$t_row_idx = 0;\n\t\t\t\t$t_col_idx = 0;\n\n\t\t\t\t$t_fields = '';\n\t\t\t\t$t_values = '';\n\n\t\t\t\tfor( $i = 0;$i < $t_num_fields;$i++ ) {\n\t\t\t\t\tif( $t_col_idx == 0 ) {\n\t\t\t\t\t\t$t_fields = '<tr class=\"' . $t_trclass . '\">';\n\t\t\t\t\t\t$t_values = '<tr class=\"row-1\">';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( isset( $t_accessible_custom_fields_names[$i] ) ) {\n\t\t\t\t\t\t$t_fields .= '<td class=\"small-caption\"> ';\n\t\t\t\t\t\t$t_fields .= '<a href=\"' . $t_filters_url . 'custom_field_' . $t_accessible_custom_fields_ids[$i] . '[]\" id=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '_filter\"' . $t_dynamic_filter_expander_class . '>';\n\t\t\t\t\t\t$t_fields .= string_display_line( lang_get_defaulted( $t_accessible_custom_fields_names[$i] ) );\n\t\t\t\t\t\t$t_fields .= '</a> </td> ';\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = '';\n\t\t\t\t\t$t_any_found = false;\n\n\t\t\t\t\t$t_values .= '<td class=\"small-caption\" id=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '_filter_target\"> ';\n\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]] ) ) {\n\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( $t_accessible_custom_fields_types[$i] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\t\t\t\t\t$t_short_date_format = config_get( 'short_date_format' );\n\t\t\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] ) ) {\n\t\t\t\t\t\t\t\t$t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_start = date( $t_short_date_format, $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] );\n\n\t\t\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] ) ) {\n\t\t\t\t\t\t\t\t$t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_end = date( $t_short_date_format, $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] );\n\t\t\t\t\t\t\tswitch( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][0] ) {\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'none' );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'between_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start . '<br />' . $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_or_before_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'before_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'after_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_or_after_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_first_flag = true;\n\t\t\t\t\t\t\tforeach( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]] as $t_current ) {\n\t\t\t\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '[]\" value=\"' . string_attribute( $t_current ) . '\" />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_values .= $t_output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$t_values .= ' </td>';\n\n\t\t\t\t\t$t_col_idx++;\n\n\t\t\t\t\tif( $t_col_idx == $t_per_row ) {\n\t\t\t\t\t\tif( $t_filter_cols > $t_per_row ) {\n\t\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$t_fields .= '</tr>' . \"\\n\";\n\t\t\t\t\t\t$t_values .= '</tr>' . \"\\n\";\n\n\t\t\t\t\t\techo $t_fields;\n\t\t\t\t\t\techo $t_values;\n\n\t\t\t\t\t\t$t_col_idx = 0;\n\t\t\t\t\t\t$t_row_idx++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( $t_col_idx > 0 ) {\n\t\t\t\t\tif( $t_col_idx < $t_per_row ) {\n\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_per_row - $t_col_idx ) . '\">&#160;</td> ';\n\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_per_row - $t_col_idx ) . '\">&#160;</td> ';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $t_filter_cols > $t_per_row ) {\n\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$t_fields .= '</tr>' . \"\\n\";\n\t\t\t\t\t$t_values .= '</tr>' . \"\\n\";\n\n\t\t\t\t\techo $t_fields;\n\t\t\t\t\techo $t_values;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_NOTE_USER_ID;?>\" id=\"note_user_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'note_user_id_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"note_user_id_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_NOTE_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\n\t\t\t<!-- Sort by -->\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . 'show_sort';?>\" id=\"show_sort_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'sort_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_sort_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_sort_fields = explode( ',', $t_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t\t$t_dir_fields = explode( ',', $t_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\n\t\tfor( $i = 0;$i < 2;$i++ ) {\n\t\t\tif( isset( $t_sort_fields[$i] ) ) {\n\t\t\t\tif( 0 < $i ) {\n\t\t\t\t\techo ', ';\n\t\t\t\t}\n\t\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\t\tif( strpos( $t_sort, 'custom_' ) === 0 ) {\n\t\t\t\t\t$t_field_name = string_display( lang_get_defaulted( utf8_substr( $t_sort, utf8_strlen( 'custom_' ) ) ) );\n\t\t\t\t} else {\n\t\t\t\t\t$t_field_name = string_get_field_name( $t_sort );\n\t\t\t\t}\n\n\t\t\t\techo $t_field_name . ' ' . lang_get( 'bugnote_order_' . utf8_strtolower( $t_dir_fields[$i] ) );\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_', $i, '\" value=\"', string_attribute( $t_sort_fields[$i] ), '\" />';\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_', $i, '\" value=\"', string_attribute( $t_dir_fields[$i] ), '\" />';\n\t\t\t}\n\t\t}\n?>\n\t\t\t</td>\n<?php\n\t\tif( 'advanced' == $t_view_type ) {\n?>\n\t\t\t<!-- Project -->\n\t\t\t<td class=\"small-caption category2\" colspan=\"2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PROJECT_ID;?>\" id=\"project_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'email_project_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"project_id_filter_target\">\n<?php\n\t\t\t$t_output = '';\n\t\t\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t\t\t);\n\t\t\t}\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) == 0 ) {\n\t\t\t\techo lang_get( 'current' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_PROJECT_ID] as $t_current ) {\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROJECT_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_name = '';\n\t\t\t\t\tif( META_FILTER_CURRENT == $t_current ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'current' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_name = project_get_name( $t_current, false );\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t\t}\n\t\t\t\techo $t_output;\n\t\t\t}\n?>\n\t\t\t</td>\n<?php\n\t\t\tif( $t_filter_cols > 6 ) {\n\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 5 ) . '\">&#160;</td>';\n\t\t\t}\n\t\t} else {\n\t\t\tif( $t_filter_cols > 3 ) {\n\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 2 ) . '\">&#160;</td>';\n\t\t\t}\n\t\t}\n?>\n\t\t</tr>\n\n\t\t<!-- Match Type -->\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a id=\"match_type_filter\"\n\t\t\t\t\thref=\"<?php echo $t_filters_url . FILTER_PROPERTY_MATCH_TYPE;?>\"\n\t\t\t\t\t<?php echo $t_dynamic_filter_expander_class; ?>>\n\t\t\t\t\t<?php echo lang_get( 'filter_match_type_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"match_type_filter_target\">\n\t\t\t<?php\n\t\t\t\tswitch( $t_filter[FILTER_PROPERTY_MATCH_TYPE] ) {\n\t\t\t\t\tcase FILTER_MATCH_ANY:\n\t\t\t\t\t\techo lang_get( 'filter_match_any' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FILTER_MATCH_ALL:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\techo lang_get( 'filter_match_all' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t?>\n\t\t\t<input type=\"hidden\" name=\"match_type\" value=\"<?php echo $t_filter[FILTER_PROPERTY_MATCH_TYPE] ?>\"/>\n\t\t\t</td>\n\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a id=\"highlight_changed_filter\"\n\t\t\t\t\thref=\"<?php echo $t_filters_url . FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\t\t\t<?php echo $t_dynamic_filter_expander_class; ?>>\n\t\t\t\t\t<?php echo lang_get( 'changed_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" valign=\"top\" id=\"highlight_changed_filter_target\">\n\t\t\t\t<?php echo $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]; ?>\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\t\t\tvalue=\"<?php echo string_attribute( $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ); ?>\"\n\t\t\t\t/>\n\t\t\t</td>\n\n\t\t\t<td colspan=\"4\">&#160;</td>\n\t\t</tr>\n\t</table>\n\t\t<?php\n\t}\n\n\t# expanded\n\tcollapse_icon( 'filter' );\n\techo '&nbsp;'; # This is a hack to ensure the div is high enough\n\techo '<div class=\"search-box\">';\n\techo '<label>';\n\techo lang_get( 'search' ) . '&#160;';\n\techo '<input type=\"text\" size=\"16\" name=\"', FILTER_PROPERTY_SEARCH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_SEARCH] ), '\" />';\n\techo '</label>';\n\techo '</div>';\n\t?>\n\t<div class=\"submit-query\"><input type=\"submit\" name=\"filter\" value=\"<?php echo lang_get( 'filter_button' )?>\" /></div>\n\t</form>\n\t<?php\n\t$t_stored_queries_arr = filter_db_get_available_queries();\n\n\tif( access_has_project_level( config_get( 'stored_query_create_threshold' ) ) ) { ?>\n\t<div class=\"save-query\">\n\t\t<form method=\"post\" name=\"save_query\" action=\"query_store_page.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"submit\" name=\"save_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'save_query' )?>\" />\n\t\t</form>\n\t</div><?php\n\t}\n\tif( count( $t_stored_queries_arr ) > 0 ) { ?>\n\t<div class=\"manage-queries\">\n\t\t<form method=\"post\" name=\"open_queries\" action=\"query_view_page.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"submit\" name=\"switch_to_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'open_queries' )?>\" />\n\t\t</form>\n\t</div>\n\t<div class=\"stored-queries\">\n\t\t<form method=\"get\" name=\"list_queries<?php echo $t_form_name_suffix;?>\" action=\"view_all_set.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"hidden\" name=\"type\" value=\"3\" />\n\t\t\t<select name=\"source_query_id\">\n\t\t\t\t<option value=\"-1\"><?php echo '[' . lang_get( 'reset_query' ) . ']'?></option>\n\t\t\t\t<option value=\"-1\"></option>\n\t\t\t\t<?php\n\t\t\t\t$t_source_query_id = isset( $t_filter['_source_query_id'] ) ? (int)$t_filter['_source_query_id'] : -1;\n\t\t\t\tforeach( $t_stored_queries_arr as $t_query_id => $t_query_name ) {\n\t\t\t\t\techo '<option value=\"' . $t_query_id . '\" ';\n\t\t\t\t\tcheck_selected( $t_query_id, $t_source_query_id );\n\t\t\t\t\techo '>' . string_display_line( $t_query_name ) . '</option>';\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</select>\n\t\t\t<input type=\"submit\" name=\"switch_to_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'use_query' )?>\" />\n\t\t</form>\n\t</div> <?php\n\t} else { ?>\n\t<div class=\"reset-query\">\n\t\t<form method=\"get\" name=\"reset_query\" action=\"view_all_set.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"hidden\" name=\"type\" value=\"3\" />\n\t\t\t<input type=\"hidden\" name=\"source_query_id\" value=\"-1\" />\n\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'reset_query' )?>\" />\n\t\t</form>\n\t</div><?php\n\t}\n\t?>\n\n\t<div class=\"filter-links\">\n\t\t<?php\n\t\tif( access_has_project_level( config_get( 'create_permalink_threshold' ) ) ) {\n\t\t\t?>\n\t\t\t<form method=\"get\" action=\"permalink_page.php\">\n\t\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t\t<input type=\"hidden\" name=\"url\" value=\"<?php echo urlencode( filter_get_url( $t_filter ) ) ?>\" />\n\t\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'create_filter_link' ) ?>\" />\n\t\t\t</form>\n\t\t\t<?php\n\t\t}\n\n\t\t$t_view_filters = config_get( 'view_filters' );\n\t\tif( ( SIMPLE_ONLY != $t_view_filters ) && ( ADVANCED_ONLY != $t_view_filters ) ) {\n\t\t\t?>\n\t\t\t<form method=\"get\" action=\"view_all_set.php\">\n\t\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t\t<input type=\"hidden\" name=\"type\" value=\"<?php echo config_get( 'use_dynamic_filters' ) ? '6' : '' ?>\" />\n\t\t\t\t<input type=\"hidden\" name=\"view_type\" value=\"<?php echo 'advanced' == $t_view_type ? 'simple' : 'advanced' ?>\" />\n\t\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo 'advanced' == $t_view_type ? lang_get( 'simple_filters' ) : lang_get( 'advanced_filters' ) ?>\" />\n\t\t\t</form>\n\t\t\t<?php\n\t\t}\n\t\t?>\n\t</div>\n\n\t</div>\n\t<br />\n<?php\n}\n\n/**\n * @internal The following functions each print out filter field inputs.\n *      They are derived from view_filters_page.php\n *      The functions follow a strict naming convention:\n *\n * \t\tprint_filter_[filter_name]\n *\n *      Where [filter_name] is the same as the \"name\" of the form element for\n *      that filter. This naming convention is depended upon by the controller\n *      at the end of the script.\n *\n * @todo print functions should be abstracted.  Many of these functions\n *      are virtually identical except for the property name.\n *      Perhaps this code could be made simpler by refactoring into a\n *      class so as to avoid all those calls to global(which are pretty ugly)\n *      These functions could also be shared by view_filters_page.php\n */\n\n/**\n * Print the reporter field\n * @return void\n */\nfunction print_filter_reporter_id() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_REPORTER_ID;?>[]\">\n\t\t<?php\n\t# if current user is a reporter, and limited reports set to ON, only display that name\n\t# @@@ thraxisp - access_has_project_level checks greater than or equal to,\n\t#   this assumed that there aren't any holes above REPORTER where the limit would apply\n\t#\n\tif( ( ON === config_get( 'limit_reporters' ) ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold' ) ) + 1 ) ) ) {\n\t\t$t_id = auth_get_current_user_id();\n\t\t$t_username = user_get_field( $t_id, 'username' );\n\t\t$t_realname = user_get_field( $t_id, 'realname' );\n\t\t$t_display_name = string_attribute( $t_username );\n\t\tif( ( isset( $t_realname ) ) && ( $t_realname > '' ) && ( ON == config_get( 'show_realname' ) ) ) {\n\t\t\t$t_display_name = string_attribute( $t_realname );\n\t\t}\n\t\techo '<option value=\"' . $t_id . '\" selected=\"selected\">' . $t_display_name . '</option>';\n\t} else {\n\t\t?>\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\t\tprint_reporter_option_list( $g_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the user monitor field\n * @return void\n */\nfunction print_filter_user_monitor() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t<!-- Monitored by -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_MONITOR_USER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\tcheck_selected( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_MYSELF );\n\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t}\n\t$t_threshold = config_get( 'show_monitor_list_threshold' );\n\t$t_has_project_level = access_has_project_level( $t_threshold );\n\n\tif( $t_has_project_level ) {\n\t\tprint_reporter_option_list( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID] );\n\t}\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the handler field\n * @return void\n */\nfunction print_filter_handler_id() {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\t?>\n\t\t<!-- Handler -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_HANDLER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_MYSELF );\n\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t}\n\n\t\tprint_assign_to_option_list( $g_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the category field\n * @return void\n */\nfunction print_filter_show_category() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<!-- Category -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_CATEGORY_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_category_filter_option_list( $g_filter[FILTER_PROPERTY_CATEGORY_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the platform field\n * @return void\n */\nfunction print_filter_platform() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- Platform -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PLATFORM;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PLATFORM], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tlog_event( LOG_FILTERING, 'Platform = ' . var_export( $g_filter[FILTER_PROPERTY_PLATFORM], true ) );\n\tprint_platform_option_list( $g_filter[FILTER_PROPERTY_PLATFORM] );\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the os field\n * @return void\n */\nfunction print_filter_os() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- OS -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_OS;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_OS], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_option_list( $g_filter[FILTER_PROPERTY_OS] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the os build field\n * @return void\n */\nfunction print_filter_os_build() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- OS Build -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_OS_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_OS_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_build_option_list( $g_filter[FILTER_PROPERTY_OS_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the severity field\n * @return void\n */\nfunction print_filter_show_severity() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Severity -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_SEVERITY;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_SEVERITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'severity', $g_filter[FILTER_PROPERTY_SEVERITY] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print resolution field\n * @return void\n */\nfunction print_filter_show_resolution() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Resolution -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_RESOLUTION;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_RESOLUTION], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'resolution', $g_filter[FILTER_PROPERTY_RESOLUTION] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print status field\n * @return void\n */\nfunction print_filter_show_status() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\t<!-- Status -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_STATUS], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $g_filter[FILTER_PROPERTY_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print hide status field\n * @return void\n */\nfunction print_filter_hide_status() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Hide Status -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_HIDE_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\">[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $g_filter[FILTER_PROPERTY_HIDE_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print build field\n * @return void\n */\nfunction print_filter_show_build() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Build -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_build_option_list( $g_filter[FILTER_PROPERTY_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print version field\n * @return void\n */\nfunction print_filter_show_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print fixed in version field\n * @return void\n */\nfunction print_filter_show_fixed_in_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Fixed in Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_FIXED_IN_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print target version field\n * @return void\n */\nfunction print_filter_show_target_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Fixed in Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_TARGET_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_TARGET_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print priority field\n * @return void\n */\nfunction print_filter_show_priority() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Priority -->\n\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PRIORITY;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PRIORITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_enum_string_option_list( 'priority', $g_filter[FILTER_PROPERTY_PRIORITY] )?>\n\t</select>\n\t\t<?php\n}\n\n/**\n * print profile field\n * @return void\n */\nfunction print_filter_show_profile() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Profile -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PROFILE_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PROFILE_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_profile_option_list_for_project( helper_get_current_project(), $g_filter[FILTER_PROPERTY_PROFILE_ID] );?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print issues per page field\n * @return void\n */\nfunction print_filter_per_page() {\n\tglobal $g_filter;\n\t?><!-- Number of bugs per page -->\n\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $g_filter[FILTER_PROPERTY_ISSUES_PER_PAGE]?>\" />\n\t\t<?php\n}\n\n/**\n * print view state field\n * @return void\n */\nfunction print_filter_view_state() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- View Status -->\n\t\t<select name=\"<?php echo FILTER_PROPERTY_VIEW_STATE;?>\">\n\t\t\t<?php\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], META_FILTER_ANY );\n\techo '>[' . lang_get( 'any' ) . ']</option>';\n\techo '<option value=\"' . VS_PUBLIC . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], VS_PUBLIC );\n\techo '>' . lang_get( 'public' ) . '</option>';\n\techo '<option value=\"' . VS_PRIVATE . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], VS_PRIVATE );\n\techo '>' . lang_get( 'private' ) . '</option>';\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print sticky issues field\n * @return void\n */\nfunction print_filter_sticky_issues() {\n\tglobal $g_filter;\n\t?><!-- Show or hide sticky bugs -->\n\t\t\t<input type=\"checkbox\" name=\"<?php echo FILTER_PROPERTY_STICKY;?>\"<?php check_checked( gpc_string_to_bool( $g_filter[FILTER_PROPERTY_STICKY] ), true );?> />\n\t\t<?php\n}\n\n/**\n * print highlight changed field\n * @return void\n */\nfunction print_filter_highlight_changed() {\n\tglobal $g_filter;\n\t?><!-- Highlight changed bugs -->\n\t\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $g_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]?>\" />\n\t\t<?php\n}\n\n/**\n * Print filter by date fields\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @return void\n */\nfunction print_filter_do_filter_by_date( $p_hide_checkbox = false ) {\n\tglobal $g_filter;\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<label>\n\t\t\t\t\t<input type=\"checkbox\" id=\"use_date_filters\" name=\"<?php\n\t\t\t\t\t\techo FILTER_PROPERTY_FILTER_BY_DATE ?>\"<?php\n\t\t\t\t\t\tcheck_checked( gpc_string_to_bool( $g_filter[FILTER_PROPERTY_FILTER_BY_DATE] ), true ) ?> />\n\t\t\t\t\t<?php echo lang_get( 'use_date_filters' )?>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( 'on' !== $g_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $g_filter[FILTER_PROPERTY_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $g_filter[FILTER_PROPERTY_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $g_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $g_filter[FILTER_PROPERTY_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $g_filter[FILTER_PROPERTY_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $g_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * print relationship fields\n * @return void\n */\nfunction print_filter_relationship_type() {\n\tglobal $g_filter;\n\t$c_reltype_value = $g_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\tif( !$c_reltype_value ) {\n\t\t$c_reltype_value = -1;\n\t}\n\trelationship_list_box( $c_reltype_value, 'relationship_type', true );\n\techo '<input type=\"text\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" size=\"5\" maxlength=\"10\" value=\"', $g_filter[FILTER_PROPERTY_RELATIONSHIP_BUG], '\" />';\n}\n\n/**\n * print tag fields\n * @return void\n */\nfunction print_filter_tag_string() {\n\tif( !access_has_global_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\treturn;\n\t}\n\n\tglobal $g_filter;\n\t$t_tag_string = $g_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $g_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $g_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $g_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\t?>\n\t\t<input type=\"hidden\" id=\"tag_separator\" value=\"<?php echo config_get( 'tag_separator' )?>\" />\n\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" size=\"40\" value=\"<?php echo string_attribute( $t_tag_string )?>\" />\n\t\t<select <?php echo helper_get_tab_index()?> name=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\">\n\t\t\t<?php print_tag_option_list();?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print note reporter field\n * @return void\n */\nfunction print_filter_note_user_id() {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\t?>\n\t<!-- BUGNOTE REPORTER -->\n\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_NOTE_USER_ID;?>[]\">\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\"';\n\t\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\n\t\t\tprint_note_option_list( $g_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t\t}\n\t?>\n\t</select>\n\t<?php\n}\n\n\n/**\n * Print plugin filter fields as defined by MantisFilter objects.\n * @param string $p_field_name    Field name.\n * @param object $p_filter_object Filter object.\n * @return void\n */\nfunction print_filter_plugin_field( $p_field_name, $p_filter_object ) {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\n\t$t_size = (int)$p_filter_object->size;\n\n\tswitch( $p_filter_object->type ) {\n\t\tcase FILTER_TYPE_STRING:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\tstring_attribute( $g_filter[$p_field_name] ), '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_INT:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\t(int)$g_filter[$p_field_name], '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\" type=\"checkbox\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), check_checked( (bool)$g_filter[$p_field_name] ) , '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\techo '<select', $g_select_modifier, ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $g_filter[$p_field_name], (string)META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', string_attribute( $t_option_value ), '\" ',\n\t\t\t\t\tcheck_selected( $g_filter[$p_field_name], $t_option_value, false ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\techo '<select', $g_select_modifier, ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $g_filter[$p_field_name], META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', (int)$t_option_value, '\" ',\n\t\t\t\t\tcheck_selected( $g_filter[$p_field_name], (int)$t_option_value ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t}\n}\n\n/**\n * print custom fields\n * @param integer $p_field_id Custom field identifier.\n * @return void\n */\nfunction print_filter_custom_field( $p_field_id ) {\n\tglobal $g_filter, $t_accessible_custom_fields_names, $t_accessible_custom_fields_types, $t_accessible_custom_fields_values, $t_accessible_custom_fields_ids, $g_select_modifier;\n\n\t$j = array_search( $p_field_id, $t_accessible_custom_fields_ids );\n\tif( $j === null || $j === false ) {\n\t\t?>\n\t\t\t<span style=\"color:red;font-weight:bold;\">\n\t\t\t\tunknown custom filter (custom <?php echo $p_field_id;?>)\n\t\t\t</span>\n\t\t<?php\n\t} else if( isset( $t_accessible_custom_fields_names[$j] ) ) {\n\t\tif( $t_accessible_custom_fields_types[$j] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\tprint_filter_custom_field_date( $j, $p_field_id );\n\t\t} else if( $t_accessible_custom_fields_types[$j] == CUSTOM_FIELD_TYPE_TEXTAREA ) {\n\t\t\techo '<input type=\"text\" name=\"custom_field_', $p_field_id, '\" size=\"10\" value=\"\" />';\n\t\t} else {\n\t\t\techo '<select' . $g_select_modifier . ' name=\"custom_field_' . $p_field_id . '[]\">';\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], META_FILTER_ANY, false );\n\t\t\techo '>[' . lang_get( 'any' ) . ']</option>';\n\n\t\t\t# don't show META_FILTER_NONE for enumerated types as it's not possible for them to be blank\n\t\t\tif( !in_array( $t_accessible_custom_fields_types[$j], array( CUSTOM_FIELD_TYPE_ENUM, CUSTOM_FIELD_TYPE_LIST, CUSTOM_FIELD_TYPE_MULTILIST ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_NONE . '\"';\n\t\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], META_FILTER_NONE, false );\n\t\t\t\techo '>[' . lang_get( 'none' ) . ']</option>';\n\t\t\t}\n\t\t\tif( is_array( $t_accessible_custom_fields_values[$j] ) ) {\n\t\t\t\t$t_max_length = config_get( 'max_dropdown_length' );\n\t\t\t\tforeach( $t_accessible_custom_fields_values[$j] as $t_item ) {\n\t\t\t\t\tif( ( strtolower( $t_item ) !== META_FILTER_ANY ) && ( strtolower( $t_item ) !== META_FILTER_NONE ) ) {\n\t\t\t\t\t\techo '<option value=\"' . string_attribute( $t_item ) . '\"';\n\t\t\t\t\t\tif( isset( $g_filter['custom_fields'][$p_field_id] ) ) {\n\t\t\t\t\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], $t_item, false );\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo '>' . string_attribute( string_shorten( $t_item, $t_max_length ) ) . '</option>' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '</select>';\n\t\t}\n\t}\n}\n\n/**\n * Print sort fields\n * @return void\n */\nfunction print_filter_show_sort() {\n\tglobal $g_filter;\n\n\t# get all of the displayed fields for sort, then drop ones that\n\t#  are not appropriate and translate the rest\n\t$t_fields = helper_get_columns_to_view();\n\t$t_n_fields = count( $t_fields );\n\t$t_shown_fields[''] = '';\n\tfor( $i = 0;$i < $t_n_fields;$i++ ) {\n\t\tif( !in_array( $t_fields[$i], array( 'selection', 'edit', 'bugnotes_count', 'attachment_count' ) ) ) {\n\t\t\tif( strpos( $t_fields[$i], 'custom_' ) === 0 ) {\n\t\t\t\t$t_field_name = string_display( lang_get_defaulted( utf8_substr( $t_fields[$i], utf8_strlen( 'custom_' ) ) ) );\n\t\t\t} else {\n\t\t\t\t$t_field_name = string_get_field_name( $t_fields[$i] );\n\t\t\t}\n\t\t\t$t_shown_fields[$t_fields[$i]] = $t_field_name;\n\t\t}\n\t}\n\t$t_shown_dirs[''] = '';\n\t$t_shown_dirs['ASC'] = lang_get( 'bugnote_order_asc' );\n\t$t_shown_dirs['DESC'] = lang_get( 'bugnote_order_desc' );\n\n\t# get default values from filter structure\n\t$t_sort_fields = explode( ',', $g_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t$t_dir_fields = explode( ',', $g_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\tif( !isset( $t_sort_fields[1] ) ) {\n\t\t$t_sort_fields[1] = '';\n\t\t$t_dir_fields[1] = '';\n\t}\n\n\t# if there are fields to display, show the dropdowns\n\tif( count( $t_fields ) > 0 ) {\n\t\t# display a primary and secondary sort fields\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_0\">';\n\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_sort_fields[0] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_0\">';\n\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_dir_fields[0] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\n\t\techo ', ';\n\n\t\t# for secondary sort\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_1\">';\n\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_sort_fields[1] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_1\">';\n\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_dir_fields[1] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\t} else {\n\t\techo lang_get_defaulted( 'last_updated' ) . lang_get( 'bugnote_order_desc' );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_1\" value=\"last_updated\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_1\" value=\"DESC\" />';\n\t}\n}\n\n/**\n * Print custom field date fields\n * @param integer $p_field_num Field number.\n * @param integer $p_field_id  Field identifier.\n * @return void\n */\nfunction print_filter_custom_field_date( $p_field_num, $p_field_id ) {\n\tglobal $g_filter, $t_accessible_custom_fields_values;\n\n\t# Resort the values so there ordered numerically, they are sorted as strings otherwise which\n\t# may be wrong for dates before early 2001.\n\tif( is_array( $t_accessible_custom_fields_values[$p_field_num] ) ) {\n\t\tarray_multisort( $t_accessible_custom_fields_values[$p_field_num], SORT_NUMERIC, SORT_ASC );\n\t}\n\n\t$t_sel_start_year = null;\n\t$t_sel_end_year = null;\n\tif( isset( $t_accessible_custom_fields_values[$p_field_num][0] ) ) {\n\t\t$t_sel_start_year = date( 'Y', $t_accessible_custom_fields_values[$p_field_num][0] );\n\t}\n\t$t_count = count( $t_accessible_custom_fields_values[$p_field_num] );\n\tif( isset( $t_accessible_custom_fields_values[$p_field_num][$t_count - 1] ) ) {\n\t\t$t_sel_end_year = date( 'Y', $t_accessible_custom_fields_values[$p_field_num][$t_count - 1] );\n\t}\n\n\t$t_start = date( 'U' );\n\n\t# Default to today in filters..\n\t$t_end = $t_start;\n\n\tif( isset( $g_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$t_start_time = $g_filter['custom_fields'][$p_field_id][1];\n\t} else {\n\t\t$t_start_time = 0;\n\t}\n\n\tif( isset( $g_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$t_end_time = $g_filter['custom_fields'][$p_field_id][2];\n\t} else {\n\t\t$t_end_time = 0;\n\t}\n\n\t$t_start_disable = true;\n\t$t_end_disable = true;\n\n\t# if $g_filter['custom_fields'][$p_field_id][0] is not set (ie no filter),\n\t# we will drop through the following switch and use the default values\n\t# above, so no need to check if stuff is set or not.\n\tswitch( $g_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_end_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\t$t_end = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\tbreak;\n\t}\n\n\techo '<table cellspacing=\"0\" cellpadding=\"0\"><tr><td>' . \"\\n\";\n\techo '<select size=\"1\" name=\"custom_field_' . $p_field_id . '_control\">' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ANY . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ANY );\n\techo '>' . lang_get( 'any' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_NONE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_NONE );\n\techo '>' . lang_get( 'none' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BETWEEN . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BETWEEN );\n\techo '>' . lang_get( 'between_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORBEFORE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORBEFORE );\n\techo '>' . lang_get( 'on_or_before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BEFORE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BEFORE );\n\techo '>' . lang_get( 'before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ON . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ON );\n\techo '>' . lang_get( 'on_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_AFTER . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_AFTER );\n\techo '>' . lang_get( 'after_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORAFTER . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORAFTER );\n\techo '>' . lang_get( 'on_or_after_date' ) . '</option>' . \"\\n\";\n\techo '</select>' . \"\\n\";\n\n\techo \"</td></tr>\\n<tr><td>\";\n\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_start', config_get( 'short_date_format' ), $t_start, $t_start_disable, false, $t_sel_start_year, $t_sel_end_year );\n\tprint \"</td></tr>\\n<tr><td>\";\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_end', config_get( 'short_date_format' ), $t_end, $t_end_disable, false, $t_sel_start_year, $t_sel_end_year );\n\tprint \"</td></tr>\\n</table>\";\n}\n\n/**\n * Print project field\n * @return void\n */\nfunction print_filter_project_id() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<!-- Project -->\n\t\t<select <?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PROJECT_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_CURRENT ?>\"\n\t\t\t\t<?php check_selected( $g_filter[FILTER_PROPERTY_PROJECT_ID], META_FILTER_CURRENT );?>>\n\t\t\t\t[<?php echo lang_get( 'current' )?>]\n\t\t\t</option>\n\t\t\t<?php print_project_option_list( $g_filter[FILTER_PROPERTY_PROJECT_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print filter match type selector\n * @return void\n */\nfunction print_filter_match_type() {\n\tglobal $g_select_modifier, $g_filter;\n?>\n\t\t<!-- Project -->\n\t\t<select <?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_MATCH_TYPE;?>\">\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ALL?>\" <?php check_selected( $g_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ALL );?>>[<?php echo lang_get( 'filter_match_all' )?>]</option>\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ANY?>\" <?php check_selected( $g_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ANY );?>>[<?php echo lang_get( 'filter_match_any' )?>]</option>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Prints a multi-value filter field.\n * @param string $p_field_name  Field name.\n * @param mixed  $p_field_value Field value.\n * @return void\n */\nfunction print_multivalue_field( $p_field_name, $p_field_value ) {\n\t$t_output = '';\n\t$t_any_found = false;\n\n\tif( count( $p_field_value ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\n\t\t$t_field_value = is_array( $p_field_value ) ? $p_field_value : array( $p_field_value );\n\n\t\tforeach( $t_field_value as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo string_attribute( $p_field_name )?>[]\" value=\"<?php echo string_attribute( $t_current );?>\" />\n\t\t\t\t<?php\n\t\t\t\t$t_this_string = '';\n\n\t\t\tif( ( ( $t_current == META_FILTER_ANY ) && ( is_numeric( $t_current ) ) ) || ( is_blank( $t_current ) ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = string_display( $t_current );\n\t\t\t}\n\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output .= '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\n\t\t\t$t_output .= $t_this_string;\n\t\t}\n\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n# ==========================================================================\n# CACHING\n# ==========================================================================\n\n# @internal SECURITY NOTE: cache globals are initialized here to prevent them\n# being spoofed if register_globals is turned on.\n# We cache filter requests to reduce the number of SQL queries\n# @global array $g_cache_filter\n# @global array $g_cache_filter_db_filters\n$g_cache_filter = array();\n$g_cache_filter_db_filters = array();\n\n/**\n *  Cache a filter row if necessary and return the cached copy\n *  If the second parameter is true (default), trigger an error\n *  if the filter can't be found.  If the second parameter is\n *  false, return false if the filter can't be found.\n * @param integer $p_filter_id      A filter identifier to retrieve.\n * @param boolean $p_trigger_errors Whether to trigger an error if the filter is not found.\n * @return array|boolean\n */\nfunction filter_cache_row( $p_filter_id, $p_trigger_errors = true ) {\n\tglobal $g_cache_filter;\n\n\tif( isset( $g_cache_filter[$p_filter_id] ) ) {\n\t\treturn $g_cache_filter[$p_filter_id];\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $p_filter_id ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\n\tif( !$t_row ) {\n\t\tif( $p_trigger_errors ) {\n\t\t\terror_parameters( $p_filter_id );\n\t\t\ttrigger_error( ERROR_FILTER_NOT_FOUND, ERROR );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$g_cache_filter[$p_filter_id] = $t_row;\n\n\treturn $t_row;\n}\n\n/**\n * Clear the filter cache (or just the given id if specified)\n * @param integer $p_filter_id Filter id.\n * @return boolean\n */\nfunction filter_clear_cache( $p_filter_id = null ) {\n\tglobal $g_cache_filter;\n\n\tif( null === $p_filter_id ) {\n\t\t$g_cache_filter = array();\n\t} else {\n\t\tunset( $g_cache_filter[(int)$p_filter_id] );\n\t}\n\n\treturn true;\n}\n\n/**\n * Add a filter to the database for the current user\n * @param integer $p_project_id    Project id.\n * @param boolean $p_is_public     Whether filter is public or private.\n * @param string  $p_name          Filter name.\n * @param string  $p_filter_string Filter string.\n * @return integer\n */\nfunction filter_db_set_for_current_user( $p_project_id, $p_is_public, $p_name, $p_filter_string ) {\n\t$t_user_id = auth_get_current_user_id();\n\t$c_project_id = (int)$p_project_id;\n\n\t# check that the user can save non current filters (if required)\n\tif( ( ALL_PROJECTS <= $c_project_id ) && ( !is_blank( $p_name ) ) && ( !access_has_project_level( config_get( 'stored_query_create_threshold' ) ) ) ) {\n\t\treturn -1;\n\t}\n\n\t# ensure that we're not making this filter public if we're not allowed\n\tif( !access_has_project_level( config_get( 'stored_query_create_shared_threshold' ) ) ) {\n\t\t$p_is_public = false;\n\t}\n\n\t# Do I need to update or insert this value?\n\tdb_param_push();\n\t$t_query = 'SELECT id FROM {filters}\n\t\t\t\t\tWHERE user_id=' . db_param() . '\n\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\tAND name=' . db_param();\n\t$t_result = db_query( $t_query, array( $t_user_id, $c_project_id, $p_name ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\tif( $t_row ) {\n\t\tdb_param_push();\n\t\t$t_query = 'UPDATE {filters}\n\t\t\t\t\t  SET is_public=' . db_param() . ',\n\t\t\t\t\t\tfilter_string=' . db_param() . '\n\t\t\t\t\t  WHERE id=' . db_param();\n\t\tdb_query( $t_query, array( $p_is_public, $p_filter_string, $t_row['id'] ) );\n\n\t\treturn $t_row['id'];\n\t} else {\n\t\tdb_param_push();\n\t\t$t_query = 'INSERT INTO {filters}\n\t\t\t\t\t\t( user_id, project_id, is_public, name, filter_string )\n\t\t\t\t\t  VALUES\n\t\t\t\t\t\t( ' . db_param() . ', ' . db_param() . ', ' . db_param() . ', ' . db_param() . ', ' . db_param() . ' )';\n\t\tdb_query( $t_query, array( $t_user_id, $c_project_id, $p_is_public, $p_name, $p_filter_string ) );\n\n\t\t# Recall the query, we want the filter ID\n\t\tdb_param_push();\n\t\t$t_query = 'SELECT id\n\t\t\t\t\t\tFROM {filters}\n\t\t\t\t\t\tWHERE user_id=' . db_param() . '\n\t\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\t\tAND name=' . db_param();\n\t\t$t_result = db_query( $t_query, array( $t_user_id, $c_project_id, $p_name ) );\n\n\t\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\t\treturn $t_row['id'];\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n\n/**\n * This function returns the filter string that is tied to the unique id parameter. If the user\n * does not have permission to see this filter, the function returns null\n * @param integer $p_filter_id A Filter identifier.\n * @param integer $p_user_id   A valid user identifier.\n * @return mixed\n */\nfunction filter_db_get_filter( $p_filter_id, $p_user_id = null ) {\n\tglobal $g_cache_filter_db_filters;\n\t$c_filter_id = (int)$p_filter_id;\n\n\tif( isset( $g_cache_filter_db_filters[$p_filter_id] ) ) {\n\t\tif( $g_cache_filter_db_filters[$p_filter_id] === false ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $g_cache_filter_db_filters[$p_filter_id];\n\t}\n\n\tif( null === $p_user_id ) {\n\t\t$t_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\tif( $t_row['user_id'] != $t_user_id ) {\n\t\t\tif( $t_row['is_public'] != true ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t# check that the user has access to non current filters\n\t\tif( ( ALL_PROJECTS <= $t_row['project_id'] ) && ( !is_blank( $t_row['name'] ) ) && ( !access_has_project_level( config_get( 'stored_query_use_threshold', null, $t_user_id, $t_row['project_id'] ) ) ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$g_cache_filter_db_filters[$p_filter_id] = $t_row['filter_string'];\n\t\treturn $t_row['filter_string'];\n\t} else {\n\t\t$g_cache_filter_db_filters[$p_filter_id] = false;\n\t\treturn false;\n\t}\n}\n\n/**\n * get current filter for given project and user\n * @param integer $p_project_id A project identifier.\n * @param integer $p_user_id    A valid user identifier.\n * @return integer\n */\nfunction filter_db_get_project_current( $p_project_id, $p_user_id = null ) {\n\t$c_project_id = (int)$p_project_id;\n\t$c_project_id = $c_project_id * -1;\n\n\tif( null === $p_user_id ) {\n\t\t$c_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$c_user_id = (int)$p_user_id;\n\t}\n\n\t# we store current filters for each project with a special project index\n\tdb_param_push();\n\t$t_query = 'SELECT *\n\t\t\t\t  FROM {filters}\n\t\t\t\t  WHERE user_id=' . db_param() . '\n\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\tAND name=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_user_id, $c_project_id, '' ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\treturn $t_row['id'];\n\t}\n\n\treturn null;\n}\n\n/**\n * Query for the filter name using the filter id\n * @param integer $p_filter_id Filter id.\n * @return string\n */\nfunction filter_db_get_name( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\tif( $t_row['user_id'] != auth_get_current_user_id() ) {\n\t\t\tif( $t_row['is_public'] != true ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn $t_row['name'];\n\t}\n\n\treturn null;\n}\n\n/**\n * Check if the current user has permissions to delete the stored query\n * @param integer $p_filter_id Filter id.\n * @return boolean\n */\nfunction filter_db_can_delete_filter( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Administrators can delete any filter\n\tif( user_is_administrator( $t_user_id ) ) {\n\t\treturn true;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT id\n\t\t\t\t  FROM {filters}\n\t\t\t\t  WHERE id=' . db_param() . '\n\t\t\t\t  AND user_id=' . db_param() . '\n\t\t\t\t  AND project_id!=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id, $t_user_id, -1 ) );\n\n\tif( db_result( $t_result ) > 0 ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Delete the filter specified by $p_filter_id\n * @param integer $p_filter_id Filter identifier.\n * @return boolean\n */\nfunction filter_db_delete_filter( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\n\tif( !filter_db_can_delete_filter( $c_filter_id ) ) {\n\t\treturn false;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'DELETE FROM {filters} WHERE id=' . db_param();\n\tdb_query( $t_query, array( $c_filter_id ) );\n\n\treturn true;\n}\n\n/**\n * Delete all the unnamed filters\n * @return void\n */\nfunction filter_db_delete_current_filters() {\n\t$t_all_id = ALL_PROJECTS;\n\n\tdb_param_push();\n\t$t_query = 'DELETE FROM {filters} WHERE project_id<=' . db_param() . ' AND name=' . db_param();\n\tdb_query( $t_query, array( $t_all_id, '' ) );\n}\n\n/**\n * Note: any changes made in this function should be reflected in\n * mci_filter_db_get_available_queries())\n * @param integer $p_project_id A valid project identifier.\n * @param integer $p_user_id    A valid user identifier.\n * @return mixed\n */\nfunction filter_db_get_available_queries( $p_project_id = null, $p_user_id = null ) {\n\t$t_overall_query_arr = array();\n\n\tif( null === $p_project_id ) {\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = (int)$p_project_id;\n\t}\n\n\tif( null === $p_user_id ) {\n\t\t$t_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$t_user_id = (int)$p_user_id;\n\t}\n\n\t# If the user doesn't have access rights to stored queries, just return\n\tif( !access_has_project_level( config_get( 'stored_query_use_threshold' ) ) ) {\n\t\treturn $t_overall_query_arr;\n\t}\n\n\t# Get the list of available queries. By sorting such that public queries are\n\t# first, we can override any query that has the same name as a private query\n\t# with that private one\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters}\n\t\t\t\t\tWHERE (project_id=' . db_param() . '\n\t\t\t\t\t\tOR project_id=0)\n\t\t\t\t\tAND name!=\\'\\'\n\t\t\t\t\tAND (is_public = ' . db_param() . '\n\t\t\t\t\t\tOR user_id = ' . db_param() . ')\n\t\t\t\t\tORDER BY is_public DESC, name ASC';\n\t$t_result = db_query( $t_query, array( $t_project_id, true, $t_user_id ) );\n\n\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_overall_query_arr[$t_row['id']] = $t_row['name'];\n\t}\n\n\t$t_overall_query_arr = array_unique( $t_overall_query_arr );\n\tasort( $t_overall_query_arr );\n\n\treturn $t_overall_query_arr;\n}\n\n/**\n * Check that the given filter name does not exceed the maximum filter length\n * @param string $p_name Filter name.\n * @return boolean true when under max_length (64) and false when over\n */\nfunction filter_name_valid_length( $p_name ) {\n\tif( utf8_strlen( $p_name ) > 64 ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Create a filter for getting issues assigned to the specified project and user that\n * are not yet resolved.\n *\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    The user id or 0 to get unassigned issues.\n * @return mixed valid filter.\n */\nfunction filter_create_assigned_to_unresolved( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\n\tif( $p_user_id == 0 ) {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array( '0' => META_FILTER_NONE );\n\t} else {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array( '0' => $p_user_id );\n\t}\n\n\t$t_bug_resolved_status_threshold = config_get( 'bug_resolved_status_threshold', null, $p_user_id, $p_project_id );\n\t$t_filter[FILTER_PROPERTY_HIDE_STATUS] = array( '0' => $t_bug_resolved_status_threshold );\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Create a filter for getting issues reported by the specified project and user.\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    A valid user identifier.\n * @return array a valid filter.\n */\nfunction filter_create_reported_by( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\t$t_filter[FILTER_PROPERTY_REPORTER_ID] = array( '0' => $p_user_id );\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Create a filter for getting issues monitored by the specified project and user.\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    The user id.\n * @return array a valid filter.\n */\nfunction filter_create_monitored_by( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\n\tif( $p_user_id == 0 ) {\n\t\t$t_filter[FILTER_PROPERTY_MONITOR_USER_ID] = array( '0' => META_FILTER_NONE );\n\t} else {\n\t\t$t_filter[FILTER_PROPERTY_MONITOR_USER_ID] = array( '0' => $p_user_id );\n\t}\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n"], "fixing_code": ["<?php\n# MantisBT - A PHP based bugtracking system\n\n# MantisBT is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 2 of the License, or\n# (at your option) any later version.\n#\n# MantisBT is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with MantisBT.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Filter API\n *\n * @package CoreAPI\n * @subpackage FilterAPI\n * @copyright Copyright 2000 - 2002  Kenzaburo Ito - kenito@300baud.org\n * @copyright Copyright 2002  MantisBT Team - mantisbt-dev@lists.sourceforge.net\n * @link http://www.mantisbt.org\n *\n * @uses access_api.php\n * @uses authentication_api.php\n * @uses bug_api.php\n * @uses collapse_api.php\n * @uses columns_api.php\n * @uses config_api.php\n * @uses constant_inc.php\n * @uses current_user_api.php\n * @uses custom_field_api.php\n * @uses database_api.php\n * @uses date_api.php\n * @uses error_api.php\n * @uses event_api.php\n * @uses filter_constants_inc.php\n * @uses gpc_api.php\n * @uses helper_api.php\n * @uses lang_api.php\n * @uses logging_api.php\n * @uses print_api.php\n * @uses profile_api.php\n * @uses project_api.php\n * @uses relationship_api.php\n * @uses string_api.php\n * @uses tag_api.php\n * @uses user_api.php\n * @uses utility_api.php\n * @uses version_api.php\n */\n\nrequire_api( 'access_api.php' );\nrequire_api( 'authentication_api.php' );\nrequire_api( 'bug_api.php' );\nrequire_api( 'collapse_api.php' );\nrequire_api( 'columns_api.php' );\nrequire_api( 'config_api.php' );\nrequire_api( 'constant_inc.php' );\nrequire_api( 'current_user_api.php' );\nrequire_api( 'custom_field_api.php' );\nrequire_api( 'database_api.php' );\nrequire_api( 'date_api.php' );\nrequire_api( 'error_api.php' );\nrequire_api( 'event_api.php' );\nrequire_api( 'filter_constants_inc.php' );\nrequire_api( 'gpc_api.php' );\nrequire_api( 'helper_api.php' );\nrequire_api( 'lang_api.php' );\nrequire_api( 'logging_api.php' );\nrequire_api( 'print_api.php' );\nrequire_api( 'profile_api.php' );\nrequire_api( 'project_api.php' );\nrequire_api( 'relationship_api.php' );\nrequire_api( 'string_api.php' );\nrequire_api( 'tag_api.php' );\nrequire_api( 'user_api.php' );\nrequire_api( 'utility_api.php' );\nrequire_api( 'version_api.php' );\n\n$g_filter = null;\n\n/**\n * Initialize the filter API with the current filter.\n * @param array $p_filter The filter to set as the current filter.\n */\nfunction filter_init( $p_filter ) {\n\tglobal $g_filter;\n\t$g_filter = $p_filter;\n}\n\n/**\n * Allow plugins to define a set of class-based filters, and register/load\n * them here to be used by the rest of filter_api.\n * @return array Mapping of field name to filter object\n */\nfunction filter_get_plugin_filters() {\n\tstatic $s_field_array = null;\n\n\tif( is_null( $s_field_array ) ) {\n\t\t$s_field_array = array();\n\n\t\t$t_all_plugin_filters = event_signal( 'EVENT_FILTER_FIELDS' );\n\t\tforeach( $t_all_plugin_filters as $t_plugin => $t_plugin_filters ) {\n\t\t\tforeach( $t_plugin_filters as $t_callback => $t_plugin_filter_array ) {\n\t\t\t\tif( is_array( $t_plugin_filter_array ) ) {\n\t\t\t\t\tforeach( $t_plugin_filter_array as $t_filter_class ) {\n\t\t\t\t\t\tif( class_exists( $t_filter_class ) && is_subclass_of( $t_filter_class, 'MantisFilter' ) ) {\n\t\t\t\t\t\t\t$t_filter_object = new $t_filter_class();\n\t\t\t\t\t\t\t$t_field_name = $t_plugin . '_' . $t_filter_object->field;\n\t\t\t\t\t\t\t$s_field_array[$t_field_name] = $t_filter_object;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $s_field_array;\n}\n\n/**\n * Get a permanent link for the current active filter.  The results of using these fields by other users\n * can be inconsistent with the original results due to fields like \"Myself\", \"Current Project\",\n * and due to access level.\n * @param array $p_custom_filter Array containing a custom filter definition.\n * @return string the search.php?xxxx or an empty string if no criteria applied.\n */\nfunction filter_get_url( array $p_custom_filter ) {\n\t$t_query = array();\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$t_project_id = $p_custom_filter[FILTER_PROPERTY_PROJECT_ID];\n\n\t\tif( count( $t_project_id ) == 1 && $t_project_id[0] == META_FILTER_CURRENT ) {\n\t\t\t$t_project_id = array(\n\t\t\t\thelper_get_current_project(),\n\t\t\t);\n\t\t}\n\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PROJECT_ID, $t_project_id );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SEARCH, $p_custom_filter[FILTER_PROPERTY_SEARCH] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_CATEGORY_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_CATEGORY_ID, $p_custom_filter[FILTER_PROPERTY_CATEGORY_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_REPORTER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_REPORTER_ID, $p_custom_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_STATUS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_STATUS, $p_custom_filter[FILTER_PROPERTY_STATUS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_MONITOR_USER_ID, $p_custom_filter[FILTER_PROPERTY_MONITOR_USER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HANDLER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HANDLER_ID, $p_custom_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_NOTE_USER_ID] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_NOTE_USER_ID, $p_custom_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SEVERITY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SEVERITY, $p_custom_filter[FILTER_PROPERTY_SEVERITY] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RESOLUTION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RESOLUTION, $p_custom_filter[FILTER_PROPERTY_RESOLUTION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PRIORITY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PRIORITY, $p_custom_filter[FILTER_PROPERTY_PRIORITY] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_VIEW_STATE, $p_custom_filter[FILTER_PROPERTY_VIEW_STATE] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_STICKY] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value(\n\t\t\tFILTER_PROPERTY_STICKY,\n\t\t\t$p_custom_filter[FILTER_PROPERTY_STICKY] ? 'on' : 'off' );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_VERSION, $p_custom_filter[FILTER_PROPERTY_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_BUILD] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_BUILD, $p_custom_filter[FILTER_PROPERTY_BUILD] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_FIXED_IN_VERSION, $p_custom_filter[FILTER_PROPERTY_FIXED_IN_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TARGET_VERSION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TARGET_VERSION, $p_custom_filter[FILTER_PROPERTY_TARGET_VERSION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SORT_FIELD_NAME, $p_custom_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_SORT_DIRECTION] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_SORT_DIRECTION, $p_custom_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] != config_get( 'default_limit_view' ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_ISSUES_PER_PAGE, $p_custom_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] != config_get( 'default_show_changed' ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HIGHLIGHT_CHANGED, $p_custom_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_HIDE_STATUS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_HIDE_STATUS, $p_custom_filter[FILTER_PROPERTY_HIDE_STATUS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value(\n\t\t\tFILTER_PROPERTY_FILTER_BY_DATE,\n\t\t\t$p_custom_filter[FILTER_PROPERTY_FILTER_BY_DATE] ? 'on' : 'off' );\n\n\t\t# The start and end dates are only applicable if filter by date is set.\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_DAY] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_DAY, $p_custom_filter[FILTER_PROPERTY_START_DAY] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_DAY] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_DAY, $p_custom_filter[FILTER_PROPERTY_END_DAY] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_MONTH] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_MONTH, $p_custom_filter[FILTER_PROPERTY_START_MONTH] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_MONTH] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_MONTH, $p_custom_filter[FILTER_PROPERTY_END_MONTH] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_START_YEAR] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_START_YEAR, $p_custom_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t}\n\n\t\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_END_YEAR] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_END_YEAR, $p_custom_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ) ) {\n\t\tif( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] != -1 ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RELATIONSHIP_TYPE, $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] );\n\t\t}\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_RELATIONSHIP_BUG, $p_custom_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_PLATFORM, $p_custom_filter[FILTER_PROPERTY_PLATFORM] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_OS] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_OS, $p_custom_filter[FILTER_PROPERTY_OS] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_OS_BUILD, $p_custom_filter[FILTER_PROPERTY_OS_BUILD] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TAG_STRING] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TAG_STRING, $p_custom_filter[FILTER_PROPERTY_TAG_STRING] );\n\t}\n\n\tif( !filter_field_is_any( $p_custom_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_TAG_SELECT, $p_custom_filter[FILTER_PROPERTY_TAG_SELECT] );\n\t}\n\n\t$t_query[] = filter_encode_field_and_value( FILTER_PROPERTY_MATCH_TYPE, $p_custom_filter[FILTER_PROPERTY_MATCH_TYPE] );\n\n\tif( isset( $p_custom_filter['custom_fields'] ) ) {\n\t\tforeach( $p_custom_filter['custom_fields'] as $t_custom_field_id => $t_custom_field_values ) {\n\t\t\tif( !filter_field_is_any( $t_custom_field_values ) ) {\n\t\t\t\t$t_query[] = filter_encode_field_and_value( 'custom_field_' . $t_custom_field_id, $t_custom_field_values );\n\t\t\t}\n\t\t}\n\t}\n\n\t# Allow plugins to add filter fields\n\t$t_plugin_filter_array = filter_get_plugin_filters();\n\tforeach( $t_plugin_filter_array as $t_field_name => $t_filter_object ) {\n\t\tif( !filter_field_is_any( $p_custom_filter[$t_field_name] ) ) {\n\t\t\t$t_query[] = filter_encode_field_and_value( $t_field_name, $p_custom_filter[$t_field_name], $t_filter_object->type );\n\t\t}\n\t}\n\n\tif( count( $t_query ) > 0 ) {\n\t\t$t_query_str = implode( $t_query, '&' );\n\t\t$t_url = config_get( 'path' ) . 'search.php?' . $t_query_str;\n\t} else {\n\t\t$t_url = '';\n\t}\n\n\treturn $t_url;\n}\n\n/**\n * Encodes a field and it's value for the filter URL.  This handles the URL encoding and arrays.\n * @param string  $p_field_name  The field name.\n * @param string  $p_field_value The field value (can be an array).\n * @param integer $p_field_type  Field Type e.g. FILTER_TYPE_MULTI_STRING.\n * @return string url encoded string\n */\nfunction filter_encode_field_and_value( $p_field_name, $p_field_value, $p_field_type = null ) {\n\t$t_query_array = array();\n\tif( is_array( $p_field_value ) ) {\n\t\t$t_count = count( $p_field_value );\n\t\tif( $t_count > 1 || $p_field_type == FILTER_TYPE_MULTI_STRING || $p_field_type == FILTER_TYPE_MULTI_INT ) {\n\t\t\tforeach( $p_field_value as $t_value ) {\n\t\t\t\t$t_query_array[] = urlencode( $p_field_name . '[]' ) . '=' . urlencode( $t_value );\n\t\t\t}\n\t\t} else if( $t_count == 1 ) {\n\t\t\t$t_query_array[] = urlencode( $p_field_name ) . '=' . urlencode( $p_field_value[0] );\n\t\t}\n\t} else {\n\t\t$t_query_array[] = urlencode( $p_field_name ) . '=' . urlencode( $p_field_value );\n\t}\n\n\treturn implode( $t_query_array, '&' );\n}\n\n/**\n * Checks the supplied value to see if it is an ANY value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"ANY\" values and false for others.  \"ANY\" means filter criteria not active.\n */\nfunction filter_field_is_any( $p_field_value ) {\n\tif( is_array( $p_field_value ) ) {\n\t\tif( count( $p_field_value ) == 0 ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tforeach( $p_field_value as $t_value ) {\n\t\t\tif( ( META_FILTER_ANY == $t_value ) && ( is_numeric( $t_value ) ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif( is_string( $p_field_value ) && is_blank( $p_field_value ) ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif( is_bool( $p_field_value ) && !$p_field_value ) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif( ( META_FILTER_ANY == $p_field_value ) && ( is_numeric( $p_field_value ) ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Checks the supplied value to see if it is a NONE value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"NONE\" values and false for others.\n * @todo is a check for these necessary?  if( ( $t_filter_value === 'none' ) || ( $t_filter_value === '[none]' ) )\n */\nfunction filter_field_is_none( $p_field_value ) {\n\tif( is_array( $p_field_value ) ) {\n\t\tforeach( $p_field_value as $t_value ) {\n\t\t\tif( ( META_FILTER_NONE == $t_value ) && ( is_numeric( $t_value ) ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif( is_string( $p_field_value ) && is_blank( $p_field_value ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif( ( META_FILTER_NONE == $p_field_value ) && ( is_numeric( $p_field_value ) ) ) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n *  Checks the supplied value to see if it is a MYSELF value.\n * @param string $p_field_value The value to check.\n * @return boolean true for \"MYSELF\" values and false for others.\n */\nfunction filter_field_is_myself( $p_field_value ) {\n\treturn( META_FILTER_MYSELF == $p_field_value ? true : false );\n}\n\n/**\n * Filter per page\n * @param array   $p_filter   Filter.\n * @param integer $p_count    Count.\n * @param integer $p_per_page Per page.\n * @return integer\n */\nfunction filter_per_page( array $p_filter, $p_count, $p_per_page ) {\n\t$p_per_page = (( null == $p_per_page ) ? (int)$p_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] : $p_per_page );\n\t$p_per_page = (( 0 == $p_per_page || -1 == $p_per_page ) ? $p_count : $p_per_page );\n\n\treturn (int)abs( $p_per_page );\n}\n\n/**\n *  Use $p_count and $p_per_page to determine how many pages to split this list up into.\n *  For the sake of consistency have at least one page, even if it is empty.\n * @param integer $p_count    Count.\n * @param integer $p_per_page Per page.\n * @return integer page count\n */\nfunction filter_page_count( $p_count, $p_per_page ) {\n\t$t_page_count = ceil( $p_count / $p_per_page );\n\tif( $t_page_count < 1 ) {\n\t\t$t_page_count = 1;\n\t}\n\treturn $t_page_count;\n}\n\n/**\n * Checks to make sure $p_page_number isn't past the last page.\n * and that $p_page_number isn't before the first page\n * @param integer $p_page_number Page number.\n * @param integer $p_page_count  Page count.\n * @return integer\n */\nfunction filter_valid_page_number( $p_page_number, $p_page_count ) {\n\tif( $p_page_number > $p_page_count ) {\n\t\t$p_page_number = $p_page_count;\n\t}\n\n\tif( $p_page_number < 1 ) {\n\t\t$p_page_number = 1;\n\t}\n\treturn $p_page_number;\n}\n\n/**\n * Figure out the offset into the db query, offset is which record to start querying from\n * @param integer $p_page_number Page number.\n * @param integer $p_per_page    Per page.\n * @return integer\n */\nfunction filter_offset( $p_page_number, $p_per_page ) {\n\treturn(( (int)$p_page_number -1 ) * (int)$p_per_page );\n}\n\n/**\n * Make sure that our filters are entirely correct and complete (it is possible that they are not).\n * We need to do this to cover cases where we don't have complete control over the filters given.\n * @param array $p_filter_arr A Filter definition.\n * @return array\n * @todo function needs to be abstracted\n */\nfunction filter_ensure_valid_filter( array $p_filter_arr ) {\n\t# extend current filter to add information passed via POST\n\tif( !isset( $p_filter_arr['_version'] ) ) {\n\t\t$p_filter_arr['_version'] = FILTER_VERSION;\n\t}\n\t$t_cookie_vers = (int)substr( $p_filter_arr['_version'], 1 );\n\tif( substr( FILTER_VERSION, 1 ) > $t_cookie_vers ) {\n\t\t# if the version is old, update it\n\t\t$p_filter_arr['_version'] = FILTER_VERSION;\n\t}\n\n\t# Filter view type - ensure it's either 'simple' or 'advanced' (prevent XSS)\n\tif( !isset( $p_filter_arr['_view_type'] ) ) {\n\t\t$p_filter_arr['_view_type'] = gpc_get_string( 'view_type', 'simple' );\n\t}\n\tif( $p_filter_arr['_view_type'] !== 'advanced' ) {\n\t\t$p_filter_arr['_view_type'] = 'simple';\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_ISSUES_PER_PAGE] = gpc_get_int( FILTER_PROPERTY_ISSUES_PER_PAGE, config_get( 'default_limit_view' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_HIGHLIGHT_CHANGED] = config_get( 'default_show_changed' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_STICKY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_STICKY] = gpc_string_to_bool( config_get( 'show_sticky_issues' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SORT_FIELD_NAME] = 'last_updated';\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SORT_DIRECTION] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SORT_DIRECTION] = 'DESC';\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_PLATFORM] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_OS] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_OS] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_OS_BUILD] = array(\n\t\t\t0 => (string)META_FILTER_ANY,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t0 => META_FILTER_CURRENT,\n\t\t);\n\t}\n\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_MONTH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_MONTH] = gpc_get_string( FILTER_PROPERTY_START_MONTH, date( 'm' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_DAY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_DAY] = gpc_get_string( FILTER_PROPERTY_START_DAY, 1 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_START_YEAR] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_START_YEAR] = gpc_get_string( FILTER_PROPERTY_START_YEAR, date( 'Y' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_MONTH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_MONTH] = gpc_get_string( FILTER_PROPERTY_END_MONTH, date( 'm' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_DAY] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_DAY] = gpc_get_string( FILTER_PROPERTY_END_DAY, date( 'd' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_END_YEAR] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_END_YEAR] = gpc_get_string( FILTER_PROPERTY_END_YEAR, date( 'Y' ) );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_SEARCH] = '';\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_FILTER_BY_DATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_FILTER_BY_DATE] = gpc_get_bool( FILTER_PROPERTY_FILTER_BY_DATE, false );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_VIEW_STATE] = gpc_get( FILTER_PROPERTY_VIEW_STATE, META_FILTER_ANY );\n\t} else if( filter_field_is_any( $p_filter_arr[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_TYPE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_TYPE] = gpc_get_int( FILTER_PROPERTY_RELATIONSHIP_TYPE, -1 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_BUG] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_RELATIONSHIP_BUG] = gpc_get_int( FILTER_PROPERTY_RELATIONSHIP_BUG, 0 );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_TAG_STRING] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_TAG_STRING] = gpc_get_string( FILTER_PROPERTY_TAG_STRING, '' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_TAG_SELECT] = gpc_get_string( FILTER_PROPERTY_TAG_SELECT, '' );\n\t}\n\tif( !isset( $p_filter_arr[FILTER_PROPERTY_MATCH_TYPE] ) ) {\n\t\t$p_filter_arr[FILTER_PROPERTY_MATCH_TYPE] = gpc_get_int( FILTER_PROPERTY_MATCH_TYPE, FILTER_MATCH_ALL );\n\t} else {\n\t\tsettype( $p_filter_arr[FILTER_PROPERTY_MATCH_TYPE], 'int' );\n\t}\n\n\t# initialize plugin filters\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\tif( !isset( $p_filter_arr[$t_field_name] ) ) {\n\t\t\tswitch( $t_filter_object->type ) {\n\t\t\t\tcase FILTER_TYPE_STRING:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_string( $t_field_name, $t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_int( $t_field_name, (int)$t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_bool( $t_field_name, (bool)$t_filter_object->default );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_string_array( $t_field_name, array( 0 => (string)META_FILTER_ANY ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = gpc_get_int_array( $t_field_name, array( 0 => META_FILTER_ANY ) );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$p_filter_arr[$t_field_name] = (string)META_FILTER_ANY;\n\t\t\t}\n\t\t}\n\n\t\tif( ! $t_filter_object->validate( $p_filter_arr[$t_field_name] ) ) {\n\t\t\t$p_filter_arr[$t_field_name] = $t_filter_object->default;\n\t\t}\n\t}\n\n\t$t_custom_fields = custom_field_get_ids();\n\n\t# @@@ (thraxisp) This should really be the linked ids, but we don't know the project\n\t$f_custom_fields_data = array();\n\tif( is_array( $t_custom_fields ) && ( count( $t_custom_fields ) > 0 ) ) {\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\tif( is_array( gpc_get( 'custom_field_' . $t_cfid, null ) ) ) {\n\t\t\t\t$f_custom_fields_data[$t_cfid] = gpc_get_string_array( 'custom_field_' . $t_cfid, array( META_FILTER_ANY ) );\n\t\t\t} else {\n\t\t\t\t$f_custom_fields_data[$t_cfid] = gpc_get_string( 'custom_field_' . $t_cfid, (string)META_FILTER_ANY );\n\t\t\t\t$f_custom_fields_data[$t_cfid] = array(\n\t\t\t\t\t$f_custom_fields_data[$t_cfid],\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t# validate sorting\n\t$t_fields = helper_get_columns_to_view();\n\t$t_n_fields = count( $t_fields );\n\tfor( $i = 0;$i < $t_n_fields;$i++ ) {\n\t\tif( isset( $t_fields[$i] ) && in_array( $t_fields[$i], array( 'selection', 'edit', 'bugnotes_count', 'attachment_count' ) ) ) {\n\t\t\tunset( $t_fields[$i] );\n\t\t}\n\t}\n\n\t# Make sure array is no longer than 2 elements\n\t$t_sort_fields = explode( ',', $p_filter_arr['sort'] );\n\tif( count( $t_sort_fields ) > 2 ) {\n\t\t$t_sort_fields = array_slice( $t_sort_fields, 0, 2 );\n\t}\n\n\t# Make sure array is no longer than 2 elements\n\t$t_dir_fields = explode( ',', $p_filter_arr['dir'] );\n\tif( count( $t_dir_fields ) > 2 ) {\n\t\t$t_dir_fields = array_slice( $t_dir_fields, 0, 2 );\n\t}\n\n\t# Validate the max of two segments for $t_sort_fields and $t_dir_fields\n\tfor( $i = 0;$i < 2;$i++ ) {\n\t\tif( isset( $t_sort_fields[$i] ) ) {\n\t\t\t$t_drop = false;\n\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\tif( strpos( $t_sort, 'custom_' ) === 0 ) {\n\t\t\t\tif( false === custom_field_get_id_from_name( utf8_substr( $t_sort, utf8_strlen( 'custom_' ) ) ) ) {\n\t\t\t\t\t$t_drop = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif( !in_array( $t_sort, $t_fields ) ) {\n\t\t\t\t\t$t_drop = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( !in_array( $t_dir_fields[$i], array( 'ASC', 'DESC' ) ) ) {\n\t\t\t\t$t_drop = true;\n\t\t\t}\n\t\t\tif( $t_drop ) {\n\t\t\t\tunset( $t_sort_fields[$i] );\n\t\t\t\tunset( $t_dir_fields[$i] );\n\t\t\t}\n\t\t}\n\t}\n\tif( count( $t_sort_fields ) > 0 ) {\n\t\t$p_filter_arr['sort'] = implode( ',', $t_sort_fields );\n\t\t$p_filter_arr['dir'] = implode( ',', $t_dir_fields );\n\t} else {\n\t\t$p_filter_arr['sort'] = 'last_updated';\n\t\t$p_filter_arr['dir'] = 'DESC';\n\t}\n\n\t# validate or filter junk from other fields\n\t$t_multi_select_list = array(\n\t\tFILTER_PROPERTY_CATEGORY_ID => 'string',\n\t\tFILTER_PROPERTY_SEVERITY => 'int',\n\t\tFILTER_PROPERTY_STATUS => 'int',\n\t\tFILTER_PROPERTY_REPORTER_ID => 'int',\n\t\tFILTER_PROPERTY_HANDLER_ID => 'int',\n\t\tFILTER_PROPERTY_NOTE_USER_ID => 'int',\n\t\tFILTER_PROPERTY_RESOLUTION => 'int',\n\t\tFILTER_PROPERTY_PRIORITY => 'int',\n\t\tFILTER_PROPERTY_BUILD => 'string',\n\t\tFILTER_PROPERTY_VERSION => 'string',\n\t\tFILTER_PROPERTY_HIDE_STATUS => 'int',\n\t\tFILTER_PROPERTY_FIXED_IN_VERSION => 'string',\n\t\tFILTER_PROPERTY_TARGET_VERSION => 'string',\n\t\tFILTER_PROPERTY_MONITOR_USER_ID => 'int',\n\t\tFILTER_PROPERTY_PROFILE_ID => 'int',\n\t);\n\tforeach( $t_multi_select_list as $t_multi_field_name => $t_multi_field_type ) {\n\t\tif( !isset( $p_filter_arr[$t_multi_field_name] ) ) {\n\t\t\tif( FILTER_PROPERTY_HIDE_STATUS == $t_multi_field_name ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\tconfig_get( 'hide_status_default' ),\n\t\t\t\t);\n\t\t\t} else if( 'custom_fields' == $t_multi_field_name ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\t$f_custom_fields_data,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$t_val = META_FILTER_ANY;\n\t\t\t\t# Ensure the filter property has the right type - see #20087\n\t\t\t\tsettype( $t_val, $t_multi_field_type );\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array( $t_val );\n\t\t\t}\n\t\t} else {\n\t\t\tif( !is_array( $p_filter_arr[$t_multi_field_name] ) ) {\n\t\t\t\t$p_filter_arr[$t_multi_field_name] = array(\n\t\t\t\t\t$p_filter_arr[$t_multi_field_name],\n\t\t\t\t);\n\t\t\t}\n\t\t\t$t_checked_array = array();\n\t\t\tforeach( $p_filter_arr[$t_multi_field_name] as $t_filter_value ) {\n\t\t\t\t$t_filter_value = stripslashes( $t_filter_value );\n\t\t\t\tif( ( $t_filter_value === 'any' ) || ( $t_filter_value === '[any]' ) ) {\n\t\t\t\t\t$t_filter_value = META_FILTER_ANY;\n\t\t\t\t}\n\t\t\t\tif( ( $t_filter_value === 'none' ) || ( $t_filter_value === '[none]' ) ) {\n\t\t\t\t\t$t_filter_value = META_FILTER_NONE;\n\t\t\t\t}\n\t\t\t\t# Ensure the filter property has the right type - see #20087\n\t\t\t\tswitch( $t_multi_field_type ) {\n\t\t\t\t\tcase 'string' :\n\t\t\t\t\tcase 'int' :\n\t\t\t\t\t\tsettype( $t_filter_value, $t_multi_field_type );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$t_checked_array[] = $t_filter_value;\n\t\t\t}\n\t\t\t$p_filter_arr[$t_multi_field_name] = $t_checked_array;\n\t\t}\n\t}\n\n\tif( is_array( $t_custom_fields ) && ( count( $t_custom_fields ) > 0 ) ) {\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\tif( !isset( $p_filter_arr['custom_fields'][$t_cfid] ) ) {\n\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = array(\n\t\t\t\t\tMETA_FILTER_ANY,\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tif( !is_array( $p_filter_arr['custom_fields'][$t_cfid] ) ) {\n\t\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = array(\n\t\t\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t$t_checked_array = array();\n\t\t\t\tforeach( $p_filter_arr['custom_fields'][$t_cfid] as $t_filter_value ) {\n\t\t\t\t\t$t_filter_value = stripslashes( $t_filter_value );\n\t\t\t\t\tif( ( $t_filter_value === 'any' ) || ( $t_filter_value === '[any]' ) ) {\n\t\t\t\t\t\t$t_filter_value = META_FILTER_ANY;\n\t\t\t\t\t}\n\t\t\t\t\t$t_checked_array[] = $t_filter_value;\n\t\t\t\t}\n\t\t\t\t$p_filter_arr['custom_fields'][$t_cfid] = $t_checked_array;\n\t\t\t}\n\t\t}\n\t}\n\n\t# all of our filter values are now guaranteed to be there, and correct.\n\treturn $p_filter_arr;\n}\n\n/**\n *  Get the standard filter that is to be used when no filter was previously saved.\n *  When creating specific filters, this can be used as a basis for the filter, where\n *  specific entries can be overridden.\n * @return mixed\n */\nfunction filter_get_default() {\n\t$t_hide_status_default = config_get( 'hide_status_default' );\n\t$t_default_show_changed = config_get( 'default_show_changed' );\n\n\t$t_filter = array(\n\t\tFILTER_PROPERTY_CATEGORY_ID => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_SEVERITY => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_STATUS => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HIGHLIGHT_CHANGED => $t_default_show_changed,\n\t\tFILTER_PROPERTY_REPORTER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HANDLER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_PROJECT_ID => array(\n\t\t\t'0' => META_FILTER_CURRENT,\n\t\t),\n\t\tFILTER_PROPERTY_RESOLUTION => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_BUILD => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_VERSION => array(\n\t\t\t'0' => (string)META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_HIDE_STATUS => array(\n\t\t\t'0' => $t_hide_status_default,\n\t\t),\n\t\tFILTER_PROPERTY_MONITOR_USER_ID => array(\n\t\t\t'0' => META_FILTER_ANY,\n\t\t),\n\t\tFILTER_PROPERTY_SORT_FIELD_NAME => 'last_updated',\n\t\tFILTER_PROPERTY_SORT_DIRECTION => 'DESC',\n\t\tFILTER_PROPERTY_ISSUES_PER_PAGE => config_get( 'default_limit_view' ),\n\t\tFILTER_PROPERTY_MATCH_TYPE => FILTER_MATCH_ALL\n\t);\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Deserialize filter string\n * @param string $p_serialized_filter Serialized filter string.\n * @return mixed $t_filter array\n * @see filter_ensure_valid_filter\n */\nfunction filter_deserialize( $p_serialized_filter ) {\n\tif( is_blank( $p_serialized_filter ) ) {\n\t\treturn false;\n\t}\n\n\t# check to see if new cookie is needed\n\t$t_setting_arr = explode( '#', $p_serialized_filter, 2 );\n\tif( ( $t_setting_arr[0] == 'v1' ) || ( $t_setting_arr[0] == 'v2' ) || ( $t_setting_arr[0] == 'v3' ) || ( $t_setting_arr[0] == 'v4' ) ) {\n\t\t# these versions can't be salvaged, they are too old to update\n\t\treturn false;\n\t}\n\n\t# We shouldn't need to do this anymore, as filters from v5 onwards should cope with changing\n\t# filter indices dynamically\n\t$t_filter_array = array();\n\tif( isset( $t_setting_arr[1] ) ) {\n\t\t$t_filter_array = json_decode( $t_setting_arr[1], true );\n\t} else {\n\t\treturn false;\n\t}\n\tif( $t_filter_array['_version'] != FILTER_VERSION ) {\n\t\t# if the version is not new enough, update it using defaults\n\t\treturn filter_ensure_valid_filter( $t_filter_array );\n\t}\n\n\treturn $t_filter_array;\n}\n\n/**\n * Check if the filter cookie exists and is of the correct version.\n * @return boolean\n */\nfunction filter_is_cookie_valid() {\n\t$t_view_all_cookie_id = gpc_get_cookie( config_get( 'view_all_cookie' ), '' );\n\t$t_view_all_cookie = filter_db_get_filter( $t_view_all_cookie_id );\n\n\t# check to see if the cookie does not exist\n\tif( is_blank( $t_view_all_cookie ) ) {\n\t\treturn false;\n\t}\n\n\t# check to see if new cookie is needed\n\t$t_setting_arr = explode( '#', $t_view_all_cookie, 2 );\n\tif( ( $t_setting_arr[0] == 'v1' ) || ( $t_setting_arr[0] == 'v2' ) || ( $t_setting_arr[0] == 'v3' ) || ( $t_setting_arr[0] == 'v4' ) ) {\n\t\treturn false;\n\t}\n\n\t# We shouldn't need to do this anymore, as filters from v5 onwards should cope with changing\n\t# filter indices dynamically\n\t$t_filter_cookie_arr = array();\n\tif( isset( $t_setting_arr[1] ) ) {\n\t\t$t_filter_cookie_arr = json_decode( $t_setting_arr[1], true );\n\t} else {\n\t\treturn false;\n\t}\n\tif( $t_filter_cookie_arr['_version'] != FILTER_VERSION ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n/**\n * Get the array fields specified by $p_filter_id\n * using the cached row if it's available\n * @param integer $p_filter_id A filter identifier to look up in the database.\n * @return array a filter row\n */\nfunction filter_get_row( $p_filter_id ) {\n\treturn filter_cache_row( $p_filter_id );\n}\n\n/**\n * Get the value of the filter field specified by filter id and field name\n * @param integer $p_filter_id  A filter identifier to look up in the database.\n * @param string  $p_field_name Name of the filter field to retrieve.\n * @return string\n */\nfunction filter_get_field( $p_filter_id, $p_field_name ) {\n\t$t_row = filter_get_row( $p_filter_id );\n\n\tif( isset( $t_row[$p_field_name] ) ) {\n\t\treturn $t_row[$p_field_name];\n\t} else {\n\t\terror_parameters( $p_field_name );\n\t\ttrigger_error( ERROR_DB_FIELD_NOT_FOUND, WARNING );\n\t\treturn '';\n\t}\n}\n\n/**\n * Add sort parameters to the query clauses\n * @param array   &$p_filter       Filter to sort.\n * @param boolean $p_show_sticky   Whether to show sticky items.\n * @param array   $p_query_clauses Array of query clauses.\n * @return array $p_query_clauses\n */\nfunction filter_get_query_sort_data( array &$p_filter, $p_show_sticky, array $p_query_clauses ) {\n\t# if sort is blank then default the sort and direction.  This is to fix the\n\t# symptoms of #3953.  Note that even if the main problem is fixed, we may\n\t# have to keep this code for a while to handle filters saved with this blank field.\n\tif( is_blank( $p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] ) ) {\n\t\t$p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] = 'last_updated';\n\t\t$p_filter[FILTER_PROPERTY_SORT_DIRECTION] = 'DESC';\n\t}\n\n\t$p_query_clauses['order'] = array();\n\t$t_sort_fields = explode( ',', $p_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t$t_dir_fields = explode( ',', $p_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\n\t$t_plugin_columns = columns_get_plugin_columns();\n\n\tif( gpc_string_to_bool( $p_filter[FILTER_PROPERTY_STICKY] ) && ( null !== $p_show_sticky ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.sticky DESC';\n\t}\n\n\t$t_count = count( $t_sort_fields );\n\tfor( $i = 0;$i < $t_count;$i++ ) {\n\t\t$c_sort = $t_sort_fields[$i];\n\t\t$c_dir = 'DESC' == $t_dir_fields[$i] ? 'DESC' : 'ASC';\n\n\t\tif( !in_array( $t_sort_fields[$i], array_slice( $t_sort_fields, $i + 1 ) ) ) {\n\t\t\t# if sorting by a custom field\n\t\t\tif( strpos( $c_sort, 'custom_' ) === 0 ) {\n\t\t\t\t$t_custom_field = utf8_substr( $c_sort, utf8_strlen( 'custom_' ) );\n\t\t\t\t$t_custom_field_id = custom_field_get_id_from_name( $t_custom_field );\n\t\t\t\t$t_def = custom_field_get_definition( $t_custom_field_id );\n\t\t\t\t$t_value_field = ( $t_def['type'] == CUSTOM_FIELD_TYPE_TEXTAREA ? 'text' : 'value' );\n\t\t\t\t$c_cf_alias = 'custom_field_' . $t_custom_field_id;\n\n\t\t\t\t# Distinguish filter table aliases from sort table aliases (see #19670)\n\t\t\t\t$t_cf_table_alias = 'cf_sort_' . $t_custom_field_id;\n\t\t\t\t$t_cf_select = $t_cf_table_alias . '.' . $t_value_field . ' ' . $c_cf_alias;\n\n\t\t\t\t# check to be sure this field wasn't already added to the query.\n\t\t\t\tif( !in_array( $t_cf_select, $p_query_clauses['select'] ) ) {\n\t\t\t\t\t$p_query_clauses['select'][] = $t_cf_select;\n\t\t\t\t\t$p_query_clauses['join'][] = 'LEFT JOIN {custom_field_string} ' . $t_cf_table_alias . ' ON\n\t\t\t\t\t\t\t\t\t\t\t\t{bug}.id = ' . $t_cf_table_alias . '.bug_id AND ' . $t_cf_table_alias . '.field_id = ' . $t_custom_field_id;\n\t\t\t\t}\n\n\t\t\t\t$p_query_clauses['order'][] = $c_cf_alias . ' ' . $c_dir;\n\n\t\t\t# if sorting by plugin columns\n\t\t\t} else if( isset( $t_plugin_columns[$t_sort_fields[$i]] ) ) {\n\t\t\t\t$t_column_object = $t_plugin_columns[$t_sort_fields[$i]];\n\n\t\t\t\tif( $t_column_object->sortable ) {\n\t\t\t\t\t$t_clauses = $t_column_object->sortquery( $c_dir );\n\n\t\t\t\t\tif( is_array( $t_clauses ) ) {\n\t\t\t\t\t\tif( isset( $t_clauses['join'] ) ) {\n\t\t\t\t\t\t\t$p_query_clauses['join'][] = $t_clauses['join'];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif( isset( $t_clauses['order'] ) ) {\n\t\t\t\t\t\t\t$p_query_clauses['order'][] = $t_clauses['order'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t# standard column\n\t\t\t} else {\n\t\t\t\t$t_sort_col = '{bug}.' . $c_sort;\n\n\t\t\t\t# when sorting by due_date, always display undefined dates last\n\t\t\t\tif( 'due_date' == $c_sort && 'ASC' == $c_dir ) {\n\t\t\t\t\t$t_sort_due_date = $t_sort_col . ' = 1';\n\t\t\t\t\t$p_query_clauses['select'][] = $t_sort_due_date;\n\t\t\t\t\t$t_sort_col = $t_sort_due_date . ', ' . $t_sort_col;\n\t\t\t\t}\n\n\t\t\t\t$p_query_clauses['order'][] = $t_sort_col . ' ' .$c_dir;\n\t\t\t}\n\t\t}\n\t}\n\n\t# add basic sorting if necessary\n\tif( !in_array( 'last_updated', $t_sort_fields ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.last_updated DESC';\n\t}\n\tif( !in_array( 'date_submitted', $t_sort_fields ) ) {\n\t\t$p_query_clauses['order'][] = '{bug}.date_submitted DESC';\n\t}\n\n\treturn $p_query_clauses;\n}\n\n/**\n * Remove any duplicate values in certain elements of query_clauses\n * Do not loop over query clauses as some keys may contain valid duplicate values.\n * We basically want unique values for just the base query elements select, from, and join\n * 'where' and 'where_values' key should not have duplicates as that is handled earlier and applying\n * array_unique here could cause problems with the query.\n * @param array $p_query_clauses Array of query clauses.\n * @return array\n */\nfunction filter_unique_query_clauses( array $p_query_clauses ) {\n\t$p_query_clauses['select'] = array_unique( $p_query_clauses['select'] );\n\t$p_query_clauses['from'] = array_unique( $p_query_clauses['from'] );\n\t$p_query_clauses['join'] = array_unique( $p_query_clauses['join'] );\n\treturn $p_query_clauses;\n}\n\n/**\n * Build a query with the query clauses array, query for bug count and return the result\n * @param array $p_query_clauses Array of query clauses.\n * @return integer\n */\nfunction filter_get_bug_count( array $p_query_clauses ) {\n\t$p_query_clauses = filter_unique_query_clauses( $p_query_clauses );\n\t$t_select_string = 'SELECT Count( DISTINCT {bug}.id ) as idcnt ';\n\t$t_from_string = ' FROM ' . implode( ', ', $p_query_clauses['from'] );\n\t$t_join_string = (( count( $p_query_clauses['join'] ) > 0 ) ? implode( ' ', $p_query_clauses['join'] ) : '' );\n\t$t_where_string = count( $p_query_clauses['project_where'] ) > 0 ? 'WHERE '. implode( ' AND ', $p_query_clauses['project_where'] ) : '';\n\tif( count( $p_query_clauses['where'] ) > 0 ) {\n\t\t$t_where_string .= ' AND ( ';\n\t\t$t_where_string .= implode( $p_query_clauses['operator'], $p_query_clauses['where'] );\n\t\t$t_where_string .= ' ) ';\n\t}\n\t$t_result = db_query( $t_select_string . ' ' . $t_from_string . ' ' . $t_join_string . ' ' . $t_where_string, $p_query_clauses['where_values'] );\n\treturn db_result( $t_result );\n}\n\n/**\n * Get set of bug rows from given filter\n * @todo Had to make all these parameters required because we can't use call-time pass by reference anymore.\n * I really preferred not having to pass all the params in if you didn't want to, but I wanted to get\n * rid of the errors for now.  If we can think of a better way later (maybe return an object) that would be great.\n *\n * @param integer &$p_page_number  Page number of the page you want to see (set to the actual page on return).\n * @param integer &$p_per_page     The number of bugs to see per page (set to actual on return)\n *                                 -1   indicates you want to see all bugs\n *                                 null indicates you want to use the value specified in the filter.\n * @param integer &$p_page_count   You don't need to give a value here, the number of pages will be stored here on return.\n * @param integer &$p_bug_count    You don't need to give a value here, the number of bugs will be stored here on return.\n * @param mixed   $p_custom_filter Custom Filter to use.\n * @param integer $p_project_id    Project id to use in filtering.\n * @param integer $p_user_id       User id to use as current user when filtering.\n * @param boolean $p_show_sticky   True/false - get sticky issues only.\n * @return boolean|array\n */\nfunction filter_get_bug_rows( &$p_page_number, &$p_per_page, &$p_page_count, &$p_bug_count, $p_custom_filter = null, $p_project_id = null, $p_user_id = null, $p_show_sticky = null ) {\n\t# assigning to $p_* for this function writes the values back in case the caller wants to know\n\n\tif( $p_custom_filter === null ) {\n\t\t$t_filter = filter_get_bug_rows_filter( $p_project_id, $p_user_id );\n\t} else {\n\t\t$t_filter = $p_custom_filter;\n\t}\n\n\t# Get the query clauses\n\t$t_query_clauses = filter_get_bug_rows_query_clauses( $t_filter, $p_project_id, $p_user_id, $p_show_sticky );\n\n\t# Get the total number of bugs that meet the criteria.\n\t$p_bug_count = filter_get_bug_count( $t_query_clauses );\n\tif( 0 == $p_bug_count ) {\n\t\treturn array();\n\t}\n\n\t# Calculate pagination\n\t$p_per_page = filter_per_page( $t_filter, $p_bug_count, $p_per_page );\n\t$p_page_count = filter_page_count( $p_bug_count, $p_per_page );\n\t$p_page_number = filter_valid_page_number( $p_page_number, $p_page_count );\n\t$t_offset = filter_offset( $p_page_number, $p_per_page );\n\t# Execute query\n\t$t_result = filter_get_bug_rows_result( $t_query_clauses, $p_per_page, $t_offset );\n\n\t# Read results into rows array\n\t$t_bug_id_array = array();\n\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_bug_id_array[] = (int)$t_row['id'];\n\t\t$t_rows[] = $t_row;\n\t}\n\n\t# Return the processed rows: cache data, convert to bug objects\n\treturn filter_cache_result( $t_rows, $t_bug_id_array );\n}\n\n/**\n * Get the filter defined by user and project.\n * @param integer $p_project_id    Project id to use in filtering.\n * @param integer $p_user_id       User id to use as current user when filtering.\n * @return array\n */\nfunction filter_get_bug_rows_filter( $p_project_id = null, $p_user_id = null ) {\n\t$t_current_user_id = auth_get_current_user_id();\n\n\tif( $p_user_id === null || $p_user_id === 0 ) {\n\t\t$t_user_id = $t_current_user_id;\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\tif( null === $p_project_id ) {\n\t\t# @@@ If project_id is not specified, then use the project id(s) in the filter if set, otherwise, use current project.\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = $p_project_id;\n\t}\n\n\tif( $t_user_id == $t_current_user_id ) {\n\t\t$t_filter = current_user_get_bug_filter();\n\t} else {\n\t\t$t_filter = user_get_bug_filter( $t_user_id, $t_project_id );\n\t}\n\n\t# if filter isn't return above, create a new filter from an empty array.\n\tif( false === $t_filter ) {\n\t\t$t_filter = array();\n\t}\n\treturn $t_filter;\n}\n\n/**\n * Creates a sql query with the supplied filter query clauses, and returns the unprocessed result set opbject\n * @param array   $p_query_clauses Array of query clauses\n * @param integer $p_count         The number of rows to return\n *                                 -1 or null indicates default query (no limits)\n * @param integer $p_offset        Offset query results for paging (number of rows)\n *                                 -1 or null indicates default query (no offset)\n * @return IteratorAggregate|boolean adodb result set or false if the query failed.\n */\nfunction filter_get_bug_rows_result( array $p_query_clauses, $p_count = null, $p_offset = null ) {\n\tif( null === $p_count ) {\n\t\t$t_count = -1;\n\t} else {\n\t\t$t_count = $p_count;\n\t}\n\tif( null === $p_offset ) {\n\t\t$t_offset = -1;\n\t} else {\n\t\t$t_offset = $p_offset;\n\t}\n\t$t_query_clauses = $p_query_clauses;\n\t$t_select_string = 'SELECT DISTINCT ' . implode( ', ', $t_query_clauses['select'] );\n\t$t_from_string = ' FROM ' . implode( ', ', $t_query_clauses['from'] );\n\t$t_order_string = ' ORDER BY ' . implode( ', ', $t_query_clauses['order'] );\n\t$t_join_string = count( $t_query_clauses['join'] ) > 0 ? implode( ' ', $t_query_clauses['join'] ) : ' ';\n\t$t_where_string = ' WHERE '. implode( ' AND ', $t_query_clauses['project_where'] );\n\tif( count( $t_query_clauses['where'] ) > 0 ) {\n\t\t$t_where_string .= ' AND ( ';\n\t\t$t_where_string .= implode( $t_query_clauses['operator'], $t_query_clauses['where'] );\n\t\t$t_where_string .= ' ) ';\n\t}\n\n\t$t_result = db_query( $t_select_string . $t_from_string . $t_join_string . $t_where_string . $t_order_string, $t_query_clauses['where_values'], $t_count, $t_offset );\t\n\treturn $t_result;\n}\n\n/**\n * Creates an array of formatted query clauses, based on the supplied\n * filter and parameters.\n * Note: this function executes db_param_push():\n *  - If the returned query is not executed, db_param_pop() should be executed\n *    to clean up the parameter stack\n *  - If the final query adds db_param() outside of this function,\n *    they must be added after this function is called.\n * @param array   $p_filter       Filter array object\n * @param integer $p_project_id   Project id to use in filtering.\n * @param integer $p_user_id      User id to use as current user when filtering.\n * @param boolean $p_show_sticky  True/false - get sticky issues only.\n * @return array\n */\nfunction filter_get_bug_rows_query_clauses( array $p_filter, $p_project_id = null, $p_user_id = null, $p_show_sticky = null ) {\n\tlog_event( LOG_FILTERING, 'START NEW FILTER QUERY' );\n\n\t$t_limit_reporters = config_get( 'limit_reporters' );\n\t$t_report_bug_threshold = config_get( 'report_bug_threshold' );\n\t$t_where_param_count = 0;\n\n\t$t_current_user_id = auth_get_current_user_id();\n\n\tif( $p_user_id === null || $p_user_id === 0 ) {\n\t\t$t_user_id = $t_current_user_id;\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\t$c_user_id = (int)$t_user_id;\n\n\tif( null === $p_project_id ) {\n\t\t# @@@ If project_id is not specified, then use the project id(s) in the filter if set, otherwise, use current project.\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = $p_project_id;\n\t}\n\n\t$t_filter = filter_ensure_valid_filter( $p_filter );\n\n\t$t_view_type = $t_filter['_view_type'];\n\n\tdb_param_push();\n\n\t# project query clauses must be AND-ed always, irrespective of how the filter\n\t# clauses are requested by the user ( all matching -> AND, any matching -> OR )\n\t$t_where_clauses = array();\n\n\t$t_project_where_clauses =  array( '{project}.enabled = ' . db_param() );\n\t$t_where_params = array(\n\t\t1,\n\t);\n\t$t_select_clauses = array(\n\t\t'{bug}.*',\n\t);\n\n\t$t_from_clauses = array(\n\t\t'{bug}',\n\t);\n\n\t$t_join_clauses = array(\n\t\t' JOIN {project} ON {project}.id = {bug}.project_id',\n\t);\n\n\t# normalize the project filtering into an array $t_project_ids\n\tif( 'simple' == $t_view_type ) {\n\t\tlog_event( LOG_FILTERING, 'Simple Filter' );\n\t\t$t_project_ids = array(\n\t\t\t$t_project_id,\n\t\t);\n\t\t$t_include_sub_projects = true;\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'Advanced Filter' );\n\t\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t\t$t_project_ids = array(\n\t\t\t\t(int)$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t\t);\n\t\t} else {\n\t\t\t$t_project_ids = array_map( 'intval', $t_filter[FILTER_PROPERTY_PROJECT_ID] );\n\t\t}\n\n\t\t$t_include_sub_projects = (( count( $t_project_ids ) == 1 ) && ( ( $t_project_ids[0] == META_FILTER_CURRENT ) || ( $t_project_ids[0] == ALL_PROJECTS ) ) );\n\t}\n\n\tlog_event( LOG_FILTERING, 'project_ids = @P' . implode( ', @P', $t_project_ids ) );\n\tlog_event( LOG_FILTERING, 'include sub-projects = ' . ( $t_include_sub_projects ? '1' : '0' ) );\n\n\t# if the array has ALL_PROJECTS, then reset the array to only contain ALL_PROJECTS.\n\t# replace META_FILTER_CURRENT with the actualy current project id.\n\t$t_all_projects_found = false;\n\t$t_new_project_ids = array();\n\tforeach( $t_project_ids as $t_pid ) {\n\t\tif( $t_pid == META_FILTER_CURRENT ) {\n\t\t\t$t_pid = $t_project_id;\n\t\t}\n\n\t\tif( $t_pid == ALL_PROJECTS ) {\n\t\t\t$t_all_projects_found = true;\n\t\t\tlog_event( LOG_FILTERING, 'all projects selected' );\n\t\t\tbreak;\n\t\t}\n\n\t\t# filter out inaccessible projects.\n\t\tif( !project_exists( $t_pid ) || !access_has_project_level( config_get( 'view_bug_threshold', null, $t_user_id, $t_pid ), $t_pid, $t_user_id ) ) {\n\t\t\tlog_event( LOG_FILTERING, 'Invalid or inaccessible project: ' . $t_pid );\n\t\t\tcontinue;\n\t\t}\n\n\t\t$t_new_project_ids[] = $t_pid;\n\t}\n\n\t$t_projects_query_required = true;\n\tif( $t_all_projects_found ) {\n\t\tif( user_is_administrator( $t_user_id ) ) {\n\t\t\tlog_event( LOG_FILTERING, 'all projects + administrator, hence no project filter.' );\n\t\t\t$t_projects_query_required = false;\n\t\t} else {\n\t\t\t$t_project_ids = user_get_accessible_projects( $t_user_id );\n\t\t}\n\t} else {\n\t\t$t_project_ids = $t_new_project_ids;\n\t}\n\n\tif( $t_projects_query_required ) {\n\t\t# expand project ids to include sub-projects\n\t\tif( $t_include_sub_projects ) {\n\t\t\t$t_top_project_ids = $t_project_ids;\n\n\t\t\tforeach( $t_top_project_ids as $t_pid ) {\n\t\t\t\tlog_event( LOG_FILTERING, 'Getting sub-projects for project id @P' . $t_pid );\n\t\t\t\t$t_subproject_ids = user_get_all_accessible_subprojects( $t_user_id, $t_pid );\n\t\t\t\tif( !$t_subproject_ids ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$t_project_ids = array_merge( $t_project_ids, $t_subproject_ids );\n\t\t\t}\n\n\t\t\t$t_project_ids = array_unique( $t_project_ids );\n\t\t}\n\n\t\t# if no projects are accessible, then return an empty array.\n\t\tif( count( $t_project_ids ) == 0 ) {\n\t\t\tlog_event( LOG_FILTERING, 'no accessible projects' );\n\t\t\treturn array();\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'project_ids after including sub-projects = @P' . implode( ', @P', $t_project_ids ) );\n\n\t\t# this array is to be populated with project ids for which we only want to show public issues.  This is due to the limited\n\t\t# access of the current user.\n\t\t$t_public_only_project_ids = array();\n\n\t\t# this array is populated with project ids that the current user has full access to.\n\t\t$t_private_and_public_project_ids = array();\n\t\t$t_limited_projects = array();\n\n\t\tforeach( $t_project_ids as $t_pid ) {\n\t\t\t# limit reporters to visible projects\n\t\t\tif( ( ON === $t_limit_reporters ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold', null, $t_user_id, $t_pid ) ) + 1, $t_pid, $t_user_id ) ) ) {\n\t\t\t\tarray_push( $t_limited_projects, '({bug}.project_id=' . $t_pid . ' AND ({bug}.reporter_id=' . $t_user_id . ') )' );\n\t\t\t} else {\n\t\t\t\t$t_access_required_to_view_private_bugs = config_get( 'private_bug_threshold', null, null, $t_pid );\n\t\t\t\tif( access_has_project_level( $t_access_required_to_view_private_bugs, $t_pid, $t_user_id ) ) {\n\t\t\t\t\t$t_private_and_public_project_ids[] = $t_pid;\n\t\t\t\t} else {\n\t\t\t\t\t$t_public_only_project_ids[] = $t_pid;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'project_ids (with public/private access) = @P' . implode( ', @P', $t_private_and_public_project_ids ) );\n\t\tlog_event( LOG_FILTERING, 'project_ids (with public access) = @P' . implode( ', @P', $t_public_only_project_ids ) );\n\n\t\t$t_count_private_and_public_project_ids = count( $t_private_and_public_project_ids );\n\t\tif( $t_count_private_and_public_project_ids == 1 ) {\n\t\t\t$t_private_and_public_query = '( {bug}.project_id = ' . $t_private_and_public_project_ids[0] . ' )';\n\t\t} else if( $t_count_private_and_public_project_ids > 1 ) {\n\t\t\t$t_private_and_public_query = '( {bug}.project_id in (' . implode( ', ', $t_private_and_public_project_ids ) . ') )';\n\t\t} else {\n\t\t\t$t_private_and_public_query = null;\n\t\t}\n\n\t\t$t_count_public_only_project_ids = count( $t_public_only_project_ids );\n\t\t$t_public_view_state_check = '( ( {bug}.view_state = ' . VS_PUBLIC . ' ) OR ( {bug}.reporter_id = ' . $t_user_id . ') )';\n\t\tif( $t_count_public_only_project_ids == 1 ) {\n\t\t\t$t_public_only_query = '( ( {bug}.project_id = ' . $t_public_only_project_ids[0] . ' ) AND ' . $t_public_view_state_check . ')';\n\t\t} else if( $t_count_public_only_project_ids > 1 ) {\n\t\t\t$t_public_only_query = '( ( {bug}.project_id in (' . implode( ', ', $t_public_only_project_ids ) . ') ) AND ' . $t_public_view_state_check . ')';\n\t\t} else {\n\t\t\t$t_public_only_query = null;\n\t\t}\n\n\t\t# both queries can't be null, so we either have one of them or both.\n\n\t\tif( $t_private_and_public_query === null ) {\n\t\t\t$t_project_query = $t_public_only_query;\n\t\t} else if( $t_public_only_query === null ) {\n\t\t\t$t_project_query = $t_private_and_public_query;\n\t\t} else {\n\t\t\t$t_project_query = '( ' . $t_public_only_query . ' OR ' . $t_private_and_public_query . ' )';\n\t\t}\n\n\t\tif( !empty( $t_limited_projects ) ) {\n\t\t\tforeach( $t_limited_projects as $t_string ) {\n\t\t\t\tif( $t_project_query ==  \"\" ) {\n\t\t\t\t\t$t_project_query = \" ( $t_string ) \";\n\t\t\t\t} else {\n\t\t\t\t\t$t_project_query = \" ( $t_project_query OR ( $t_string ) )\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlog_event( LOG_FILTERING, 'project query = ' . $t_project_query );\n\t\tarray_push( $t_project_where_clauses, $t_project_query );\n\t}\n\n\t# date filter\n\tif( ( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_MONTH] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_DAY] ) && is_numeric( $t_filter[FILTER_PROPERTY_START_YEAR] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_MONTH] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_DAY] ) && is_numeric( $t_filter[FILTER_PROPERTY_END_YEAR] ) ) {\n\n\t\t$t_start_string = $t_filter[FILTER_PROPERTY_START_YEAR] . '-' . $t_filter[FILTER_PROPERTY_START_MONTH] . '-' . $t_filter[FILTER_PROPERTY_START_DAY] . ' 00:00:00';\n\t\t$t_end_string = $t_filter[FILTER_PROPERTY_END_YEAR] . '-' . $t_filter[FILTER_PROPERTY_END_MONTH] . '-' . $t_filter[FILTER_PROPERTY_END_DAY] . ' 23:59:59';\n\n\t\t$t_where_params[] = strtotime( $t_start_string );\n\t\t$t_where_params[] = strtotime( $t_end_string );\n\t\tarray_push( $t_project_where_clauses, '({bug}.date_submitted BETWEEN ' . db_param() . ' AND ' . db_param() . ' )' );\n\t}\n\n\t# view state\n\t$t_view_state = (int)$t_filter[FILTER_PROPERTY_VIEW_STATE];\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_VIEW_STATE] ) ) {\n\t\t$t_view_state_query = '({bug}.view_state=' . db_param() . ')';\n\t\tlog_event( LOG_FILTERING, 'view_state query = ' . $t_view_state_query );\n\t\t$t_where_params[] = $t_view_state;\n\t\tarray_push( $t_where_clauses, $t_view_state_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no view_state query' );\n\t}\n\n\t# reporter\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_filter_member ) {\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '0' );\n\t\t\t} else {\n\t\t\t\t$c_reporter_id = (int)$t_filter_member;\n\t\t\t\tif( filter_field_is_myself( $c_reporter_id ) ) {\n\t\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_clauses, $c_reporter_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_reporter_query = '( {bug}.reporter_id in (' . implode( ', ', $t_clauses ) . ') )';\n\t\t} else {\n\t\t\t$t_reporter_query = '( {bug}.reporter_id=' . $t_clauses[0] . ' )';\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'reporter query = ' . $t_reporter_query );\n\t\tarray_push( $t_where_clauses, $t_reporter_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no reporter query' );\n\t}\n\n\t# handler\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_filter_member ) {\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, 0 );\n\t\t\t} else {\n\t\t\t\t$c_handler_id = (int)$t_filter_member;\n\t\t\t\tif( filter_field_is_myself( $c_handler_id ) ) {\n\t\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_clauses, $c_handler_id );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_handler_query = '( {bug}.handler_id in (' . implode( ', ', $t_clauses ) . ') )';\n\t\t} else {\n\t\t\t$t_handler_query = '( {bug}.handler_id=' . $t_clauses[0] . ' )';\n\t\t}\n\n\t\tlog_event( LOG_FILTERING, 'handler query = ' . $t_handler_query );\n\t\tarray_push( $t_where_clauses, $t_handler_query );\n\t} else {\n\t\tlog_event( LOG_FILTERING, 'no handler query' );\n\t}\n\n\t# category\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_filter_member ) {\n\t\t\tif( !filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, $t_filter_member );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.category_id in ( SELECT id FROM {category} WHERE name in (' . implode( ', ', $t_where_tmp ) . ') ) )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.category_id in ( SELECT id FROM {category} WHERE name=' . db_param() . ') )' );\n\t\t}\n\t}\n\n\t# severity\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_SEVERITY] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_filter_member ) {\n\t\t\t$c_show_severity = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_severity );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.severity in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.severity=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# show / hide status\n\t# take a list of all available statuses then remove the ones that we want hidden, then make sure\n\t# the ones we want shown are still available\n\t$t_desired_statuses = array();\n\t$t_available_statuses = MantisEnum::getValues( config_get( 'status_enum_string' ) );\n\n\tif( 'simple' == $t_filter['_view_type'] ) {\n\t\t# simple filtering: if showing any, restrict by the hide status value, otherwise ignore the hide\n\t\t$t_this_status = $t_filter[FILTER_PROPERTY_STATUS][0];\n\t\t$t_this_hide_status = isset( $t_filter[FILTER_PROPERTY_HIDE_STATUS][0] )\n\t\t\t? $t_filter[FILTER_PROPERTY_HIDE_STATUS][0]\n\t\t\t: null;\n\n\t\tif( filter_field_is_any( $t_this_status ) ) {\n\t\t\tforeach( $t_available_statuses as $t_this_available_status ) {\n\t\t\t\tif( $t_this_hide_status > $t_this_available_status ) {\n\t\t\t\t\t$t_desired_statuses[] = $t_this_available_status;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$t_desired_statuses[] = $t_this_status;\n\t\t}\n\t} else {\n\t\t# advanced filtering: ignore the hide\n\t\tif( filter_field_is_any( $t_filter[FILTER_PROPERTY_STATUS] ) ) {\n\t\t\t$t_desired_statuses = array();\n\t\t} else {\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_this_status ) {\n\t\t\t\t$t_desired_statuses[] = $t_this_status;\n\t\t\t}\n\t\t}\n\t}\n\n\tif( count( $t_desired_statuses ) > 0 ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_desired_statuses as $t_filter_member ) {\n\t\t\t$c_show_status = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_status );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.status in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.status=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# resolution\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_RESOLUTION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_filter_member ) {\n\t\t\t$c_show_resolution = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_resolution );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.resolution in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.resolution=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# priority\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PRIORITY] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_filter_member ) {\n\t\t\t$c_show_priority = (int)$t_filter_member;\n\t\t\tarray_push( $t_clauses, $c_show_priority );\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.priority in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.priority=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# product build\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_BUILD] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_show_build = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_build );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.build in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.build=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# product version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_show_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_version );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# profile\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '0' );\n\t\t\t} else {\n\t\t\t\t$c_show_profile = (int)$t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_show_profile );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.profile_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.profile_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# platform\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_PLATFORM] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_PLATFORM] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_platform = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_platform );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.platform in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.platform = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# Operating System (os)\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_OS] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_OS] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_os = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_os );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# Operating System Build (os_build)\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_OS_BUILD] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_OS_BUILD] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_os_build = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_os_build );\n\t\t\t}\n\t\t}\n\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os_build in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.os_build = ' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# fixed in version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_fixed_in_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_fixed_in_version );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.fixed_in_version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.fixed_in_version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# target version\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) ) {\n\t\t$t_clauses = array();\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_filter_member ) {\n\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\tarray_push( $t_clauses, '' );\n\t\t\t} else {\n\t\t\t\t$c_target_version = $t_filter_member;\n\t\t\t\tarray_push( $t_clauses, $c_target_version );\n\t\t\t}\n\t\t}\n\n\t\t# echo var_dump( $t_clauses ); exit;\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( {bug}.target_version in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( {bug}.target_version=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# users monitoring a bug\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) ) {\n\t\t$t_clauses = array();\n\t\t$t_table_name = 'user_monitor';\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_monitor} ' . $t_table_name . ' ON ' . $t_table_name . '.bug_id = {bug}.id' );\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_filter_member ) {\n\t\t\t$c_user_monitor = (int)$t_filter_member;\n\t\t\tif( filter_field_is_myself( $c_user_monitor ) ) {\n\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t} else {\n\t\t\t\tarray_push( $t_clauses, $c_user_monitor );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_table_name . '.user_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_table_name . '.user_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# bug relationship\n\t$t_any_found = false;\n\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\tif( -1 == $c_rel_type || 0 == $c_rel_bug ) {\n\t\t$t_any_found = true;\n\t}\n\tif( !$t_any_found ) {\n\t\t# use the complementary type\n\t\t$t_comp_type = relationship_get_complementary_type( $c_rel_type );\n\t\t$t_clauses = array();\n\t\t$t_table_dst = 'rel_dst';\n\t\t$t_table_src = 'rel_src';\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_relationship} ' . $t_table_dst . ' ON ' . $t_table_dst . '.destination_bug_id = {bug}.id' );\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bug_relationship} ' . $t_table_src . ' ON ' . $t_table_src . '.source_bug_id = {bug}.id' );\n\n\t\t# get reverse relationships\n\t\t$t_where_params[] = $t_comp_type;\n\t\t$t_where_params[] = $c_rel_bug;\n\t\t$t_where_params[] = $c_rel_type;\n\t\t$t_where_params[] = $c_rel_bug;\n\t\tarray_push( $t_clauses, '(' . $t_table_dst . '.relationship_type=' . db_param() . ' AND ' . $t_table_dst . '.source_bug_id=' . db_param() . ')' );\n\t\tarray_push( $t_clauses, '(' . $t_table_src . '.relationship_type=' . db_param() . ' AND ' . $t_table_src . '.destination_bug_id=' . db_param() . ')' );\n\t\tarray_push( $t_where_clauses, '(' . implode( ' OR ', $t_clauses ) . ')' );\n\t}\n\n\t# tags\n\t$c_tag_string = trim( $t_filter[FILTER_PROPERTY_TAG_STRING] );\n\t$c_tag_select = trim( $t_filter[FILTER_PROPERTY_TAG_SELECT] );\n\tif( is_blank( $c_tag_string ) && !is_blank( $c_tag_select ) && $c_tag_select != 0 && tag_exists( $c_tag_select ) ) {\n\t\t$t_tag = tag_get( $c_tag_select );\n\t\t$c_tag_string = $t_tag['name'];\n\t}\n\n\tif( !is_blank( $c_tag_string ) ) {\n\t\t$t_tags = tag_parse_filters( $c_tag_string );\n\n\t\tif( count( $t_tags ) ) {\n\n\t\t\t$t_tags_all = array();\n\t\t\t$t_tags_any = array();\n\t\t\t$t_tags_none = array();\n\n\t\t\tforeach( $t_tags as $t_tag_row ) {\n\t\t\t\tswitch( $t_tag_row['filter'] ) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\t$t_tags_all[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\t$t_tags_any[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase -1:\n\t\t\t\t\t\t$t_tags_none[] = $t_tag_row;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( 0 < $t_filter[FILTER_PROPERTY_TAG_SELECT] && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t\t\t$t_tags_any[] = tag_get( $t_filter[FILTER_PROPERTY_TAG_SELECT] );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_all ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_all as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug}.id IN ( SELECT bug_id FROM {bug_tag} WHERE {bug_tag}.tag_id = ' . $t_tag_row['id'] . ')' );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '(' . implode( ' AND ', $t_clauses ) . ')' );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_any ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_any as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug_tag}.tag_id = ' . $t_tag_row['id'] );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '{bug}.id IN ( SELECT bug_id FROM {bug_tag} WHERE ( ' . implode( ' OR ', $t_clauses ) . ') )' );\n\t\t\t}\n\n\t\t\tif( count( $t_tags_none ) ) {\n\t\t\t\t$t_clauses = array();\n\t\t\t\tforeach( $t_tags_none as $t_tag_row ) {\n\t\t\t\t\tarray_push( $t_clauses, '{bug_tag}.tag_id = ' . $t_tag_row['id'] );\n\t\t\t\t}\n\t\t\t\tarray_push( $t_where_clauses, '{bug}.id NOT IN ( SELECT bug_id FROM {bug_tag} WHERE ( ' . implode( ' OR ', $t_clauses ) . ') )' );\n\t\t\t}\n\t\t}\n\t}\n\n\t# note user id\n\tif( !filter_field_is_any( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) ) {\n\t\t$t_bugnote_table_alias = 'mbnt';\n\t\t$t_clauses = array();\n\t\tarray_push( $t_join_clauses, 'LEFT JOIN {bugnote} ' . $t_bugnote_table_alias . ' ON {bug}.id = ' . $t_bugnote_table_alias . '.bug_id' );\n\n\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_filter_member ) {\n\t\t\t$c_note_user_id = (int)$t_filter_member;\n\t\t\tif( filter_field_is_myself( $c_note_user_id ) ) {\n\t\t\t\tarray_push( $t_clauses, $c_user_id );\n\t\t\t} else {\n\t\t\t\tarray_push( $t_clauses, $c_note_user_id );\n\t\t\t}\n\t\t}\n\t\tif( 1 < count( $t_clauses ) ) {\n\t\t\t$t_where_tmp = array();\n\t\t\tforeach( $t_clauses as $t_clause ) {\n\t\t\t\t$t_where_tmp[] = db_param();\n\t\t\t\t$t_where_params[] = $t_clause;\n\t\t\t}\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_bugnote_table_alias . '.reporter_id in (' . implode( ', ', $t_where_tmp ) . ') )' );\n\t\t} else {\n\t\t\t$t_where_params[] = $t_clauses[0];\n\t\t\tarray_push( $t_where_clauses, '( ' . $t_bugnote_table_alias . '.reporter_id=' . db_param() . ' )' );\n\t\t}\n\t}\n\n\t# plugin filters\n\t$t_plugin_filters = filter_get_plugin_filters();\n\tforeach( $t_plugin_filters as $t_field_name => $t_filter_object ) {\n\t\tif( !filter_field_is_any( $t_filter[$t_field_name] ) || $t_filter_object->type == FILTER_TYPE_BOOLEAN ) {\n\t\t\t$t_filter_query = $t_filter_object->query( $t_filter[$t_field_name] );\n\t\t\tif( is_array( $t_filter_query ) ) {\n\t\t\t\tif( isset( $t_filter_query['join'] ) ) {\n\t\t\t\t\tarray_push( $t_join_clauses, $t_filter_query['join'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $t_filter_query['where'] ) ) {\n\t\t\t\t\tarray_push( $t_where_clauses, $t_filter_query['where'] );\n\t\t\t\t}\n\t\t\t\tif( isset( $t_filter_query['params'] ) && is_array( $t_filter_query['params'] ) ) {\n\t\t\t\t\t$t_where_params = array_merge( $t_where_params, $t_filter_query['params'] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t# custom field filters\n\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t# custom field filtering\n\t\t# @@@ At the moment this gets the linked fields relating to the current project\n\t\t#     It should get the ones relating to the project in the filter or all projects\n\t\t#     if multiple projects.\n\t\t$t_custom_fields = custom_field_get_linked_ids( $t_project_id );\n\n\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t$t_field_info = custom_field_cache_row( $t_cfid, true );\n\t\t\tif( !$t_field_info['filter_by'] ) {\n\t\t\t\tcontinue;\n\n\t\t\t\t# skip this custom field it shouldn't be filterable\n\t\t\t}\n\n\t\t\t$t_field = $t_filter['custom_fields'][$t_cfid];\n\t\t\t$t_custom_where_clause = '';\n\n\t\t\t# Ignore all custom filters that are not set, or that are set to '' or \"any\"\n\t\t\tif( !filter_field_is_any( $t_field ) ) {\n\t\t\t\t$t_def = custom_field_get_definition( $t_cfid );\n\t\t\t\t$t_table_name = '{custom_field_string}_' . $t_cfid;\n\n\t\t\t\t# We need to filter each joined table or the result query will explode in dimensions\n\t\t\t\t# Each custom field will result in a exponential growth like Number_of_Issues^Number_of_Custom_Fields\n\t\t\t\t# and only after this process ends (if it is able to) the result query will be filtered\n\t\t\t\t# by the WHERE clause and by the DISTINCT clause\n\t\t\t\t$t_cf_join_clause = 'LEFT JOIN {custom_field_string} ' . $t_table_name . ' ON {bug}.id = ' . $t_table_name . '.bug_id AND ' . $t_table_name . '.field_id = ' . $t_cfid;\n\n\t\t\t\tif( $t_def['type'] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\t\t\t# Define the value field with type cast to integer\n\t\t\t\t\t$t_value_field = 'CAST(COALESCE(NULLIF(' . $t_table_name . '.value, \\'\\'), \\'0\\') AS DECIMAL)';\n\t\t\t\t\tswitch( $t_field[0] ) {\n\t\t\t\t\t\t# Closing parenthesis intentionally omitted, will be added later on\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_table_name . '.bug_id is null OR ' . $t_value_field . ' = 0 ';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' != 0 AND ' . $t_value_field . ' < ' . $t_field[2];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' > ' . ( $t_field[1] + 1 );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\t\t\t\t\t\t\t$t_custom_where_clause = '( ' . $t_value_field . ' BETWEEN ' . $t_field[1] . ' AND ' . $t_field[2];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tarray_push( $t_join_clauses, $t_cf_join_clause );\n\n\t\t\t\t\t$t_filter_array = array();\n\t\t\t\t\tforeach( $t_field as $t_filter_member ) {\n\t\t\t\t\t\t$t_filter_member = stripslashes( $t_filter_member );\n\t\t\t\t\t\tif( filter_field_is_none( $t_filter_member ) ) {\n\t\t\t\t\t\t\t# coerce filter value if selecting META_FILTER_NONE so it will match empty fields\n\t\t\t\t\t\t\t$t_filter_member = '';\n\n\t\t\t\t\t\t\t# but also add those _not_ present in the custom field string table\n\t\t\t\t\t\t\tarray_push( $t_filter_array, '{bug}.id NOT IN (SELECT bug_id FROM {custom_field_string} WHERE field_id=' . $t_cfid . ')' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tswitch( $t_def['type'] ) {\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_CHECKBOX:\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_MULTILIST:\n\t\t\t\t\t\t\t\t$t_where_params[] = '%|' . $t_filter_member . '|%';\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, db_helper_like( $t_table_name . '.value' ) );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase CUSTOM_FIELD_TYPE_TEXTAREA:\n\t\t\t\t\t\t\t\t$t_where_params[] = '%' . $t_filter_member . '%';\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, db_helper_like( $t_table_name . '.text' ) );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t$t_where_params[] = $t_filter_member;\n\t\t\t\t\t\t\t\tarray_push( $t_filter_array, $t_table_name . '.value = ' . db_param() );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$t_custom_where_clause .= '(' . implode( ' OR ', $t_filter_array );\n\t\t\t\t}\n\t\t\t\tif( !is_blank( $t_custom_where_clause ) ) {\n\t\t\t\t\tarray_push( $t_where_clauses, $t_custom_where_clause . ')' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t# Text search\n\tif( !is_blank( $t_filter[FILTER_PROPERTY_SEARCH] ) ) {\n\t\t# break up search terms by spacing or quoting\n\t\tpreg_match_all( \"/-?([^'\\\"\\s]+|\\\"[^\\\"]+\\\"|'[^']+')/\", $t_filter[FILTER_PROPERTY_SEARCH], $t_matches, PREG_SET_ORDER );\n\n\t\t# organize terms without quoting, paying attention to negation\n\t\t$t_search_terms = array();\n\t\tforeach( $t_matches as $t_match ) {\n\t\t\t$t_search_terms[trim( $t_match[1], \"\\'\\\"\" )] = ( $t_match[0][0] == '-' );\n\t\t}\n\n\t\t# build a big where-clause and param list for all search terms, including negations\n\t\t$t_first = true;\n\t\t$t_textsearch_where_clause = '( ';\n\t\tforeach( $t_search_terms as $t_search_term => $t_negate ) {\n\t\t\tif( !$t_first ) {\n\t\t\t\t$t_textsearch_where_clause .= ' AND ';\n\t\t\t}\n\n\t\t\tif( $t_negate ) {\n\t\t\t\t$t_textsearch_where_clause .= 'NOT ';\n\t\t\t}\n\n\t\t\t$c_search = '%' . $t_search_term . '%';\n\t\t\t$t_textsearch_where_clause .= '( ' . db_helper_like( '{bug}.summary' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.description' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.steps_to_reproduce' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bug_text}.additional_information' ) .\n\t\t\t\t' OR ' . db_helper_like( '{bugnote_text}.note' );\n\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\t\t\t$t_where_params[] = $c_search;\n\n\t\t\tif( is_numeric( $t_search_term ) ) {\n\t\t\t\t# PostgreSQL on 64-bit OS hack (see #14014)\n\t\t\t\tif( PHP_INT_MAX > 0x7FFFFFFF && db_is_pgsql() ) {\n\t\t\t\t\t$t_search_max = 0x7FFFFFFF;\n\t\t\t\t} else {\n\t\t\t\t\t$t_search_max = PHP_INT_MAX;\n\t\t\t\t}\n\t\t\t\t# Note: no need to test negative values, '-' sign has been removed\n\t\t\t\tif( $t_search_term <= $t_search_max ) {\n\t\t\t\t\t$c_search_int = (int)$t_search_term;\n\t\t\t\t\t$t_textsearch_where_clause .= ' OR {bug}.id = ' . db_param();\n\t\t\t\t\t$t_textsearch_where_clause .= ' OR {bugnote}.id = ' . db_param();\n\t\t\t\t\t$t_where_params[] = $c_search_int;\n\t\t\t\t\t$t_where_params[] = $c_search_int;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$t_textsearch_where_clause .= ' )';\n\t\t\t$t_first = false;\n\t\t}\n\t\t$t_textsearch_where_clause .= ' )';\n\n\t\t# add text query elements to arrays\n\t\tif( !$t_first ) {\n\t\t\t$t_join_clauses[] = 'JOIN {bug_text} ON {bug}.bug_text_id = {bug_text}.id';\n\t\t\t$t_join_clauses[] = 'LEFT JOIN {bugnote} ON {bug}.id = {bugnote}.bug_id';\n\t\t\t# Outer join required otherwise we don't retrieve issues without notes\n\t\t\t$t_join_clauses[] = 'LEFT JOIN {bugnote_text} ON {bugnote}.bugnote_text_id = {bugnote_text}.id';\n\t\t\t$t_where_clauses[] = $t_textsearch_where_clause;\n\t\t}\n\t}\n\n\t# End text search\n\n\t# Determine join operator\n\tif( $t_filter[FILTER_PROPERTY_MATCH_TYPE] == FILTER_MATCH_ANY ) {\n\t\t$t_join_operator = ' OR ';\n\t} else {\n\t\t$t_join_operator = ' AND ';\n\t}\n\n\tlog_event( LOG_FILTERING, 'Join operator : ' . $t_join_operator );\n\n\t$t_query_clauses['select'] = $t_select_clauses;\n\t$t_query_clauses['from'] = $t_from_clauses;\n\t$t_query_clauses['join'] = $t_join_clauses;\n\t$t_query_clauses['where'] = $t_where_clauses;\n\t$t_query_clauses['where_values'] = $t_where_params;\n\t$t_query_clauses['project_where'] = $t_project_where_clauses;\n\t$t_query_clauses['operator'] = $t_join_operator;\n\t$t_query_clauses = filter_get_query_sort_data( $t_filter, $p_show_sticky, $t_query_clauses );\n\n\t$t_query_clauses = filter_unique_query_clauses( $t_query_clauses );\n\treturn $t_query_clauses;\n}\n\n/**\n *  Cache the filter results with bugnote stats for later use\n * @param array $p_rows             Results of the filter query.\n * @param array $p_id_array_lastmod Array of bug ids.\n * @return array\n */\nfunction filter_cache_result( array $p_rows, array $p_id_array_lastmod ) {\n\t$t_id_array_lastmod = array_unique( $p_id_array_lastmod );\n\t$t_where_string = ' WHERE {bugnote}.bug_id in (' . implode( ', ', $t_id_array_lastmod ) . ')';\n\t$t_query = 'SELECT DISTINCT bug_id,MAX(last_modified) as last_modified, COUNT(last_modified) as count FROM {bugnote} ' . $t_where_string . ' GROUP BY bug_id';\n\n\t# perform query\n\t$t_result = db_query( $t_query );\n\t$t_row_count = db_num_rows( $t_result );\n\twhile ( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_stats[$t_row['bug_id']] = $t_row;\n\t}\n\n\t$t_rows = array();\n\tforeach( $p_rows as $t_row ) {\n\t\tif( !isset( $t_stats[$t_row['id']] ) ) {\n\t\t\t$t_rows[] = bug_row_to_object( bug_cache_database_result( $t_row ) );\n\t\t} else {\n\t\t\t$t_rows[] = bug_row_to_object( bug_cache_database_result( $t_row, $t_stats[$t_row['id']] ) );\n\t\t}\n\t}\n\treturn $t_rows;\n}\n\n/**\n * Mainly based on filter_draw_selection_area2() but adds the support for the collapsible\n * filter display.\n * @param integer $p_page_number Page number.\n * @param boolean $p_for_screen  Whether output is for screen view.\n * @return void\n * @see filter_draw_selection_area2\n */\nfunction filter_draw_selection_area( $p_page_number, $p_for_screen = true ) {\n\tcollapse_open( 'filter' );\n\tfilter_draw_selection_area2( $p_page_number, $p_for_screen, true );\n\tcollapse_closed( 'filter' );\n\tfilter_draw_selection_area2( $p_page_number, $p_for_screen, false );\n\tcollapse_end( 'filter' );\n}\n\n/**\n * Prints the filter selection area for both the bug list view screen and\n * the bug list print screen. This function was an attempt to make it easier to\n * add new filters and rearrange them on screen for both pages.\n * @param integer $p_page_number Page number.\n * @param boolean $p_for_screen  Whether output is for screen view.\n * @param boolean $p_expanded    Whether to display expanded.\n * @return void\n */\nfunction filter_draw_selection_area2( $p_page_number, $p_for_screen = true, $p_expanded = true ) {\n\t$t_form_name_suffix = $p_expanded ? '_open' : '_closed';\n\n\t$t_filter = current_user_get_bug_filter();\n\t$t_filter = filter_ensure_valid_filter( $t_filter === false ? array() : $t_filter );\n\t$t_project_id = helper_get_current_project();\n\t$t_page_number = (int)$p_page_number;\n\n\t$t_view_type = $t_filter['_view_type'];\n\n\t$t_tdclass = 'small-caption';\n\t$t_trclass = 'row-category2';\n\t$t_action = 'view_all_set.php?f=3';\n\n\tif( $p_for_screen == false ) {\n\t\t$t_tdclass = 'print';\n\t\t$t_trclass = '';\n\t\t$t_action = 'view_all_set.php';\n\t}\n\t?>\n\n\t<div class=\"filter-box\">\n\t\t<form method=\"post\" name=\"filters<?php echo $t_form_name_suffix?>\" id=\"filters_form<?php echo $t_form_name_suffix?>\" action=\"<?php echo $t_action;?>\">\n\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t<input type=\"hidden\" name=\"type\" value=\"1\" />\n\t\t<?php\n\t\t\tif( $p_for_screen == false ) {\n\t\techo '<input type=\"hidden\" name=\"print\" value=\"1\" />';\n\t\techo '<input type=\"hidden\" name=\"offset\" value=\"0\" />';\n\t}\n\t?>\n\t\t<input type=\"hidden\" name=\"page_number\" value=\"<?php echo $t_page_number?>\" />\n\t\t<input type=\"hidden\" name=\"view_type\" value=\"<?php echo $t_view_type?>\" />\n\t\t<?php\n\t\t$t_filter_cols = config_get( 'filter_custom_fields_per_row' );\n\tif( $p_expanded ) {\n\t\t?>\n\t\t<table width=\"100%\" cellspacing=\"1\">\n\t\t<?php\n\t\t$t_custom_cols = $t_filter_cols;\n\n\t\t$t_current_user_access_level = current_user_get_access_level();\n\t\t$t_accessible_custom_fields_ids = array();\n\t\t$t_accessible_custom_fields_names = array();\n\t\t$t_accessible_custom_fields_values = array();\n\t\t$t_num_custom_rows = 0;\n\t\t$t_per_row = 0;\n\n\t\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\t\t\t$t_custom_fields = custom_field_get_linked_ids( $t_project_id );\n\n\t\t\tforeach( $t_custom_fields as $t_cfid ) {\n\t\t\t\t$t_field_info = custom_field_cache_row( $t_cfid, true );\n\t\t\t\tif( $t_field_info['access_level_r'] <= $t_current_user_access_level && $t_field_info['filter_by'] ) {\n\t\t\t\t\t$t_accessible_custom_fields_ids[] = $t_cfid;\n\t\t\t\t\t$t_accessible_custom_fields_names[] = $t_field_info['name'];\n\t\t\t\t\t$t_accessible_custom_fields_types[] = $t_field_info['type'];\n\t\t\t\t\t$t_accessible_custom_fields_values[] = custom_field_distinct_values( $t_field_info );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( count( $t_accessible_custom_fields_ids ) > 0 ) {\n\t\t\t\t$t_per_row = config_get( 'filter_custom_fields_per_row' );\n\t\t\t\t$t_num_custom_rows = ceil( count( $t_accessible_custom_fields_ids ) / $t_per_row );\n\t\t\t}\n\t\t}\n\n\t\t$t_filters_url = 'view_filters_page.php?for_screen=' . $p_for_screen;\n\t\tif( 'advanced' == $t_view_type ) {\n\t\t\t$t_filters_url = $t_filters_url . '&amp;view_type=advanced';\n\t\t}\n\t\t$t_filters_url = $t_filters_url . '&amp;target_field=';\n\n\t\t$t_show_product_version =  version_should_show_product_version( $t_project_id );\n\t\t$t_show_build = $t_show_product_version && ( config_get( 'enable_product_build' ) == ON );\n\n\t\t# overload handler_id setting if user isn't supposed to see them (ref #6189)\n\t\tif( !access_has_any_project( config_get( 'view_handler_threshold' ) ) ) {\n\t\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array(\n\t\t\t\tMETA_FILTER_ANY,\n\t\t\t);\n\t\t}\n\n\t\t$t_dynamic_filter_expander_class = ( config_get( 'use_dynamic_filters' ) ) ? ' class=\"dynamic-filter-expander\"' : '';\n\t\t?>\n\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_REPORTER_ID . '[]';?>\" id=\"reporter_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'reporter_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_MONITOR_USER_ID . '[]';?>\" id=\"user_monitor_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'monitored_by_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_HANDLER_ID . '[]';?>\" id=\"handler_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'assigned_to_label' )?></a>\n\t\t\t</td>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_CATEGORY_ID . '[]';?>\" id=\"show_category_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'category_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_SEVERITY . '[]';?>\" id=\"show_severity_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'severity_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_RESOLUTION . '[]';?>\" id=\"show_resolution_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'resolution_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PROFILE_ID . '[]';?>\" id=\"show_profile_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'profile_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"reporter_id_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_REPORTER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_REPORTER_ID] as $t_current ) {\n\t\t\t\t$t_this_name = '';\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_REPORTER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"user_monitor_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_MONITOR_USER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_MONITOR_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo string_display( $t_output );\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"handler_id_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_HANDLER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_HANDLER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HANDLER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo string_display( $t_output );\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td colspan=\"2\" class=\"small-caption\" id=\"show_category_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_CATEGORY_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_CATEGORY_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_CATEGORY_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_severity_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_SEVERITY] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_SEVERITY] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SEVERITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'severity', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_resolution_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_RESOLUTION] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_RESOLUTION] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RESOLUTION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'resolution', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t<td class=\"small-caption\" id=\"show_profile_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_PROFILE_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_PROFILE_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROFILE_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_profile = profile_get_row_direct( $t_current );\n\t\t\t\t\t$t_this_string = $t_profile['platform'] . ' ' . $t_profile['os'] . ' ' . $t_profile['os_build'];\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php } else { ?>\n\t\t\t\t<td></td>\n\t\t\t<?php }\n\t\t\t\tif( $t_filter_cols > 8 ) {\n\t\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t\t\t}?>\n\t\t</tr>\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_STATUS . '[]';?>\" id=\"show_status_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'status_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( 'simple' == $t_view_type ) {?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_HIDE_STATUS . '[]';?>\" id=\"hide_status_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'hide_status_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t<?php if( $t_show_build ) { ?>\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_BUILD . '[]';?>\" id=\"show_build_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'product_build_label' )?></a>\n\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_show_product_version ) {?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_VERSION . '[]';?>\" id=\"show_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'product_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_FIXED_IN_VERSION . '[]';?>\" id=\"show_fixed_in_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'fixed_in_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php } else {?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<?php } ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PRIORITY . '[]';?>\" id=\"show_priority_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'priority_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php if( $t_show_product_version ) {?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_TARGET_VERSION . '[]';?>\" id=\"show_target_version_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'target_version_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php\n\t\t\t} else {?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<?php\n\t\t\t}\n\t\t\tif( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 7 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"show_status_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_STATUS] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_STATUS] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"hide_status_filter_target\">\n\t\t<?php\n\t\tif( 'simple' == $t_view_type ) {\n\t\t\t$t_output = '';\n\t\t\t$t_none_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 0 ) {\n\t\t\t\techo lang_get( 'none' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_HIDE_STATUS] as $t_current ) {\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_HIDE_STATUS, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_none_found = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = get_enum_element( 'status', $t_current );\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\t$t_hide_status_post = '';\n\t\t\t\tif( count( $t_filter[FILTER_PROPERTY_HIDE_STATUS] ) == 1 ) {\n\t\t\t\t\t$t_hide_status_post = ' (' . lang_get( 'and_above' ) . ')';\n\t\t\t\t}\n\t\t\t\tif( true == $t_none_found ) {\n\t\t\t\t\techo lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output . string_display_line( $t_hide_status_post );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t<?php\n\t\tif( $t_show_build ) {\n\t\t?>\n\t\t\t<td class=\"small-caption\" id=\"show_build_filter_target\">\n\t\t<?php\n\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_BUILD] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_BUILD] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_BUILD, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t\t<?php } else { ?>\n\t\t\t<td class=\"small-caption\"></td>\n\t\t\t<?php }\n\t\t\t\tif( $t_show_product_version ) {\n\t\t\t?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\" id=\"show_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_VERSION] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_VERSION] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_fixed_in_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t\t$t_any_found = false;\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] ) == 0 ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_FIXED_IN_VERSION] as $t_current ) {\n\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FIXED_IN_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t}\n\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\techo lang_get( 'any' );\n\t\t\t\t} else {\n\t\t\t\t\techo $t_output;\n\t\t\t\t}\n\t\t\t}\n\t\t\t?>\n\t\t\t</td>\n\t\t<?php } else { ?>\n\t\t\t<td colspan=\"2\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t<?php } ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_priority_filter_target\">\n\t\t<?php\n\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_PRIORITY] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_PRIORITY] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PRIORITY, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = get_enum_element( 'priority', $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t</td>\n\t\t<?php if( $t_show_product_version ) { ?>\n\t\t<td colspan=\"1\" class=\"small-caption\" id=\"show_target_version_filter_target\">\n\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_TARGET_VERSION] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_TARGET_VERSION] as $t_current ) {\n\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TARGET_VERSION, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_string = '';\n\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\t\t<?php } else { ?>\n\t\t\t<td colspan=\"1\" class=\"small-caption\">\n\t\t\t\t&#160;\n\t\t\t</td>\n\t\t<?php }\n\n\t\tif( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 7 ) . '\">&#160;</td>';\n\t\t}?>\n\n\t\t</tr>\n\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" id=\"per_page_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'show_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_VIEW_STATE;?>\" id=\"view_state_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'view_status_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_STICKY;?>\" id=\"sticky_issues_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'sticky_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" >\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_FILTER_BY_DATE;?>\" id=\"do_filter_by_date_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'use_date_filters_label' )?></a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_RELATIONSHIP_TYPE;?>\" id=\"relationship_type_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'bug_relationships_label' )?></a>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption\" id=\"per_page_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\techo( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] == 0 ) ? lang_get( 'all' ) : string_display_line( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_ISSUES_PER_PAGE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_ISSUES_PER_PAGE] ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"view_state_filter_target\">\n\t\t\t\t<?php\n\t\t\t\tif( VS_PUBLIC === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\t\techo lang_get( 'public' );\n\t\t} else if( VS_PRIVATE === $t_filter[FILTER_PROPERTY_VIEW_STATE] ) {\n\t\t\techo lang_get( 'private' );\n\t\t} else {\n\t\t\techo lang_get( 'any' );\n\t\t\t$t_filter[FILTER_PROPERTY_VIEW_STATE] = META_FILTER_ANY;\n\t\t}\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_VIEW_STATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_VIEW_STATE] ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"sticky_issues_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_sticky_filter_state = gpc_string_to_bool( $t_filter[FILTER_PROPERTY_STICKY] );\n\t\t\t\t\tprint( $t_sticky_filter_state ? lang_get( 'yes' ) : lang_get( 'no' ) );\n\t\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php\n\t\t\t\t\techo FILTER_PROPERTY_STICKY; ?>\" value=\"<?php\n\t\t\t\t\techo $t_sticky_filter_state ? 'on' : 'off'; ?>\" />\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"2\">&#160;\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"do_filter_by_date_filter_target\">\n\t\t<?php\n\t\tif( 'on' == $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) {\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_FILTER_BY_DATE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_FILTER_BY_DATE] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_MONTH] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_DAY] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_START_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_START_YEAR] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_MONTH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_MONTH] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_DAY, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_DAY] ), '\" />';\n\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_END_YEAR, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_END_YEAR] ), '\" />';\n\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\t\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_START_MONTH], $t_filter[FILTER_PROPERTY_START_DAY], $t_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t\tforeach( $t_chars as $t_char ) {\n\t\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'F', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'd', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'Y', $t_time );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\techo ' - ';\n\n\t\t\t$t_time = mktime( 0, 0, 0, $t_filter[FILTER_PROPERTY_END_MONTH], $t_filter[FILTER_PROPERTY_END_DAY], $t_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t\tforeach( $t_chars as $t_char ) {\n\t\t\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'F', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'd', $t_time );\n\t\t\t\t}\n\t\t\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\t\t\techo ' ';\n\t\t\t\t\techo date( 'Y', $t_time );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\techo lang_get( 'no' );\n\t\t}\n\t\t?>\n\t\t\t</td>\n\n\t\t\t<td class=\"small-caption\" colspan=\"2\" id=\"relationship_type_filter_target\">\n\t\t<?php\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_TYPE, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE] ), '\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG] ), '\" />';\n\t\t$c_rel_type = $t_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\t\t$c_rel_bug = $t_filter[FILTER_PROPERTY_RELATIONSHIP_BUG];\n\t\tif( -1 == $c_rel_type || 0 == $c_rel_bug ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo relationship_get_description_for_history( $c_rel_type ) . ' ' . $c_rel_bug;\n\t\t}\n\n\t\t?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr <?php echo 'class=\"' . $t_trclass . '\"';?>>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PLATFORM;?>\" id=\"platform_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'platform_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_OS;?>\" id=\"os_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'os_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\">\n\t\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_OS_BUILD;?>\" id=\"os_build_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'os_version_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" colspan=\"5\">\n\t\t\t\t<?php if( access_has_global_level( config_get( 'tag_view_threshold' ) ) ) { ?>\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_TAG_STRING;?>\" id=\"tag_string_filter\"<?php echo $t_dynamic_filter_expander_class ?>><?php echo lang_get( 'tags_label' )?></a>\n\t\t\t\t<?php } ?>\n\t\t\t</td>\n\t\t\t<?php if( $t_filter_cols > 8 ) {\n\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 8 ) . '\">&#160;</td>';\n\t\t}?>\n\t\t</tr>\n\t\t<tr class=\"row-1\">\n\t\t\t<?php if( ON == config_get( 'enable_profiles' ) ) { ?>\n\t\t\t<td class=\"small-caption\" id=\"platform_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_PLATFORM, $t_filter[FILTER_PROPERTY_PLATFORM] ); ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"os_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_OS, $t_filter[FILTER_PROPERTY_OS] ); ?>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"os_build_filter_target\">\n\t\t\t\t<?php print_multivalue_field( FILTER_PROPERTY_OS_BUILD, $t_filter[FILTER_PROPERTY_OS_BUILD] ); ?>\n\t\t\t</td>\n\t\t\t<?php } else {?>\n\t\t\t\t<td colspan=\"3\">&#160;</td>\n\t\t\t<?php } ?>\n\n\t\t\t<td class=\"small-caption\" id=\"tag_string_filter_target\" colspan=\"5\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_tag_string = $t_filter[FILTER_PROPERTY_TAG_STRING];\n\t\tif( $t_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $t_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t\t$t_tag_string .= tag_get_field( $t_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t\t}\n\t\techo string_html_entities( $t_tag_string );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_TAG_STRING, '\" value=\"', string_attribute( $t_tag_string ), '\" />';\n\t\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<?php\n\n\t\t# get plugin filters\n\t\t$t_plugin_filters = filter_get_plugin_filters();\n\t\t$t_plugin_filter_links = array();\n\t\t$t_plugin_filter_fields = array();\n\t\t$t_column_count_by_row = array();\n\t\t$t_row = 0;\n\t\t$t_column_count_by_row[$t_row] = 0;\n\t\tforeach( $t_plugin_filters as $t_field_name=>$t_filter_object ) {\n\t\t\t# be sure the colspan is an integer\n\t\t\t$t_colspan = (int)$t_filter_object->colspan;\n\n\t\t\t# prevent silliness.\n\t\t\tif( $t_colspan < 0 ) {\n\t\t\t\t$t_colspan = abs( $t_colspan );\n\t\t\t} else if( $t_colspan > $t_filter_cols ) {\n\t\t\t\t$t_colspan = $t_filter_cols;\n\t\t\t} else if( $t_colspan == 0 ) {\n\t\t\t\t$t_colspan = 1;\n\t\t\t}\n\t\t\t# the row may already have elements in it. find out.\n\t\t\t$t_columns_available = $t_filter_cols - $t_column_count_by_row[$t_row];\n\t\t\tif( $t_columns_available == 0 ) {\n\t\t\t\t$t_row++;\n\t\t\t\t$t_column_count_by_row[$t_row] = 0;\n\t\t\t}\n\n\t\t\t# see if there is room in the current row\n\t\t\tif( $t_columns_available >= $t_colspan ) {\n\t\t\t\t$t_assigned_row = $t_row;\n\t\t\t\t$t_column_count_by_row[$t_row] += $t_colspan;\n\t\t\t} else {\n\t\t\t\t$t_is_assigned = false;\n\t\t\t\t# find a row with space\n\t\t\t\tforeach( $t_column_count_by_row as $t_row_num=>$t_col_count ) {\n\t\t\t\t\tif( $t_colspan <= ( $t_filter_cols - $t_col_count ) ) {\n\t\t\t\t\t\t$t_assigned_row = $t_row_num;\n\t\t\t\t\t\t$t_column_count_by_row[$t_row_num] += $t_colspan;\n\t\t\t\t\t\t$t_is_assigned = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif( !$t_is_assigned ) {\n\t\t\t\t\t# no space was found in existing rows. Add a new row for it.\n\t\t\t\t\t$t_assigned_row = count( $t_plugin_filter_links );\n\t\t\t\t\t$t_column_count_by_row[$t_assigned_row] = $t_colspan;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$t_colspan_attr = ( $t_colspan > 1 ? 'colspan=\"' . $t_colspan . '\" ' : '' );\n\t\t\t$t_plugin_filter_links[$t_assigned_row][] = '<td ' . $t_colspan_attr . 'class=\"small-caption\"> <a href=\"' . $t_filters_url . string_attribute( $t_field_name ) .\n\t\t\t\t'\" id=\"' . string_attribute( $t_field_name ) . '_filter\"' . $t_dynamic_filter_expander_class . '>' . string_display_line( $t_filter_object->title ) . '</a> </td>';\n\t\t\t$t_values = '<td ' . $t_colspan_attr . 'class=\"small-caption\" id=\"' . string_attribute( $t_field_name ) . '_filter_target\"> ';\n\n\t\t\tif( !isset( $t_filter[$t_field_name] ) ) {\n\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\tswitch( $t_filter_object->type ) {\n\t\t\t\t\tcase FILTER_TYPE_STRING:\n\t\t\t\t\tcase FILTER_TYPE_INT:\n\t\t\t\t\t\tif( filter_field_is_any( $t_filter[$t_field_name] ) ) {\n\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_values .= string_display_line( $t_filter[$t_field_name] );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '\" value=\"' . string_attribute( $t_filter[$t_field_name] ) . '\"/>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\t\t\t\t$t_values .= string_display_line( $t_filter_object->display( (bool)$t_filter[$t_field_name] ) );\n\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '\" value=\"' . (bool)$t_filter[$t_field_name] . '\"/>';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\t\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\t\t\t\t$t_first = true;\n\t\t\t\t\t\t$t_output = '';\n\n\t\t\t\t\t\tif( !is_array( $t_filter[$t_field_name] ) ) {\n\t\t\t\t\t\t\t$t_filter[$t_field_name] = array( $t_filter[$t_field_name] );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tforeach( $t_filter[$t_field_name] as $t_current ) {\n\t\t\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t\t\t$t_output .= lang_get( 'any' );\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t$t_output .= ( $t_first ? '' : '<br/>' ) . string_display_line( $t_filter_object->display( $t_current ) );\n\t\t\t\t\t\t\t\t$t_first = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"' . string_attribute( $t_field_name ) . '[]\" value=\"' . string_attribute( $t_current ) . '\"/>';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$t_values .= $t_output;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$t_values .= '</td>';\n\n\t\t\t$t_plugin_filter_fields[$t_assigned_row][] = $t_values;\n\t\t}\n\n\t\t$t_row_count = count( $t_plugin_filter_links );\n\t\tfor( $i=0; $i<$t_row_count; $i++ ) {\n\t\t\tif( $t_column_count_by_row[$i] < $t_filter_cols ) {\n\t\t\t\t$t_plugin_filter_links[$i][] = '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - $t_column_count_by_row[$i] ) . '\">&#160;</td>';\n\t\t\t\t$t_plugin_filter_fields[$i][] = '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - $t_column_count_by_row[$i] ) . '\">&#160;</td>';\n\t\t\t}\n\t\t\t$t_links_row = \"\\n\\t\\t\" . join( \"\\n\\t\\t\", $t_plugin_filter_links[$i] );\n\t\t\t$t_values_row = \"\\n\\t\\t\" . join( \"\\n\\t\\t\", $t_plugin_filter_fields[$i] );\n\t\t\techo \"\\n\\t\" . '<tr class=\"', $t_trclass, '\">', $t_links_row, \"\\n\\t</tr>\";\n\t\t\techo \"\\n\\t\" . '<tr class=\"row-1\">', $t_values_row, \"\\n\\t</tr>\\n\\t\";\n\t\t}\n\n\t\tif( ON == config_get( 'filter_by_custom_fields' ) ) {\n\n\t\t\t# -- Custom Field Searching --\n\n\t\t\tif( count( $t_accessible_custom_fields_ids ) > 0 ) {\n\t\t\t\t$t_per_row = config_get( 'filter_custom_fields_per_row' );\n\t\t\t\t$t_num_fields = count( $t_accessible_custom_fields_ids );\n\t\t\t\t$t_row_idx = 0;\n\t\t\t\t$t_col_idx = 0;\n\n\t\t\t\t$t_fields = '';\n\t\t\t\t$t_values = '';\n\n\t\t\t\tfor( $i = 0;$i < $t_num_fields;$i++ ) {\n\t\t\t\t\tif( $t_col_idx == 0 ) {\n\t\t\t\t\t\t$t_fields = '<tr class=\"' . $t_trclass . '\">';\n\t\t\t\t\t\t$t_values = '<tr class=\"row-1\">';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( isset( $t_accessible_custom_fields_names[$i] ) ) {\n\t\t\t\t\t\t$t_fields .= '<td class=\"small-caption\"> ';\n\t\t\t\t\t\t$t_fields .= '<a href=\"' . $t_filters_url . 'custom_field_' . $t_accessible_custom_fields_ids[$i] . '[]\" id=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '_filter\"' . $t_dynamic_filter_expander_class . '>';\n\t\t\t\t\t\t$t_fields .= string_display_line( lang_get_defaulted( $t_accessible_custom_fields_names[$i] ) );\n\t\t\t\t\t\t$t_fields .= '</a> </td> ';\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = '';\n\t\t\t\t\t$t_any_found = false;\n\n\t\t\t\t\t$t_values .= '<td class=\"small-caption\" id=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '_filter_target\"> ';\n\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]] ) ) {\n\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif( $t_accessible_custom_fields_types[$i] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\t\t\t\t\t$t_short_date_format = config_get( 'short_date_format' );\n\t\t\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] ) ) {\n\t\t\t\t\t\t\t\t$t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_start = date( $t_short_date_format, $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][1] );\n\n\t\t\t\t\t\t\tif( !isset( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] ) ) {\n\t\t\t\t\t\t\t\t$t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] = 0;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$t_end = date( $t_short_date_format, $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][2] );\n\t\t\t\t\t\t\tswitch( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]][0] ) {\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'none' );\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'between_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start . '<br />' . $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_or_before_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'before_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_end;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'after_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t\t\t\t\t\t\t$t_values .= lang_get( 'on_or_after_date' ) . '<br />';\n\t\t\t\t\t\t\t\t\t$t_values .= $t_start;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_first_flag = true;\n\t\t\t\t\t\t\tforeach( $t_filter['custom_fields'][$t_accessible_custom_fields_ids[$i]] as $t_current ) {\n\t\t\t\t\t\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t\t\t\t\t\t$t_this_string = '';\n\t\t\t\t\t\t\t\tif( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t\t\t\t} else if( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t\t\t\t\t$t_this_string = lang_get( 'none' );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$t_this_string = $t_current;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_string );\n\t\t\t\t\t\t\t\t$t_values .= '<input type=\"hidden\" name=\"custom_field_' . $t_accessible_custom_fields_ids[$i] . '[]\" value=\"' . string_attribute( $t_current ) . '\" />';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif( true == $t_any_found ) {\n\t\t\t\t\t\t\t$t_values .= lang_get( 'any' );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$t_values .= $t_output;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t$t_values .= ' </td>';\n\n\t\t\t\t\t$t_col_idx++;\n\n\t\t\t\t\tif( $t_col_idx == $t_per_row ) {\n\t\t\t\t\t\tif( $t_filter_cols > $t_per_row ) {\n\t\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$t_fields .= '</tr>' . \"\\n\";\n\t\t\t\t\t\t$t_values .= '</tr>' . \"\\n\";\n\n\t\t\t\t\t\techo $t_fields;\n\t\t\t\t\t\techo $t_values;\n\n\t\t\t\t\t\t$t_col_idx = 0;\n\t\t\t\t\t\t$t_row_idx++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif( $t_col_idx > 0 ) {\n\t\t\t\t\tif( $t_col_idx < $t_per_row ) {\n\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_per_row - $t_col_idx ) . '\">&#160;</td> ';\n\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_per_row - $t_col_idx ) . '\">&#160;</td> ';\n\t\t\t\t\t}\n\n\t\t\t\t\tif( $t_filter_cols > $t_per_row ) {\n\t\t\t\t\t\t$t_fields .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t\t$t_values .= '<td colspan=\"' . ( $t_filter_cols - $t_per_row ) . '\">&#160;</td> ';\n\t\t\t\t\t}\n\n\t\t\t\t\t$t_fields .= '</tr>' . \"\\n\";\n\t\t\t\t\t$t_values .= '</tr>' . \"\\n\";\n\n\t\t\t\t\techo $t_fields;\n\t\t\t\t\techo $t_values;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_NOTE_USER_ID;?>\" id=\"note_user_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'note_user_id_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"note_user_id_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_output = '';\n\t\t$t_any_found = false;\n\t\tif( count( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] ) == 0 ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\t$t_first_flag = true;\n\t\t\tforeach( $t_filter[FILTER_PROPERTY_NOTE_USER_ID] as $t_current ) {\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_NOTE_USER_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t$t_this_name = '';\n\t\t\t\tif( filter_field_is_none( $t_current ) ) {\n\t\t\t\t\t$t_this_name = lang_get( 'none' );\n\t\t\t\t} else if( filter_field_is_any( $t_current ) ) {\n\t\t\t\t\t$t_any_found = true;\n\t\t\t\t} else if( filter_field_is_myself( $t_current ) ) {\n\t\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'myself' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_any_found = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$t_this_name = user_get_name( $t_current );\n\t\t\t\t}\n\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t} else {\n\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t}\n\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t}\n\t\t\tif( true == $t_any_found ) {\n\t\t\t\techo lang_get( 'any' );\n\t\t\t} else {\n\t\t\t\techo $t_output;\n\t\t\t}\n\t\t}\n\t\t?>\n\t\t\t</td>\n\n\t\t\t<!-- Sort by -->\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . 'show_sort';?>\" id=\"show_sort_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'sort_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"show_sort_filter_target\">\n\t\t\t\t<?php\n\t\t\t\t\t$t_sort_fields = explode( ',', $t_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t\t$t_dir_fields = explode( ',', $t_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\n\t\tfor( $i = 0;$i < 2;$i++ ) {\n\t\t\tif( isset( $t_sort_fields[$i] ) ) {\n\t\t\t\tif( 0 < $i ) {\n\t\t\t\t\techo ', ';\n\t\t\t\t}\n\t\t\t\t$t_sort = $t_sort_fields[$i];\n\t\t\t\tif( strpos( $t_sort, 'custom_' ) === 0 ) {\n\t\t\t\t\t$t_field_name = string_display( lang_get_defaulted( utf8_substr( $t_sort, utf8_strlen( 'custom_' ) ) ) );\n\t\t\t\t} else {\n\t\t\t\t\t$t_field_name = string_get_field_name( $t_sort );\n\t\t\t\t}\n\n\t\t\t\techo $t_field_name . ' ' . lang_get( 'bugnote_order_' . utf8_strtolower( $t_dir_fields[$i] ) );\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_', $i, '\" value=\"', string_attribute( $t_sort_fields[$i] ), '\" />';\n\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_', $i, '\" value=\"', string_attribute( $t_dir_fields[$i] ), '\" />';\n\t\t\t}\n\t\t}\n?>\n\t\t\t</td>\n<?php\n\t\tif( 'advanced' == $t_view_type ) {\n?>\n\t\t\t<!-- Project -->\n\t\t\t<td class=\"small-caption category2\" colspan=\"2\">\n\t\t\t\t<a href=\"<?php echo $t_filters_url . FILTER_PROPERTY_PROJECT_ID;?>\" id=\"project_id_filter\"<?php echo $t_dynamic_filter_expander_class ?>>\n\t\t\t\t\t<?php echo lang_get( 'email_project_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"project_id_filter_target\">\n<?php\n\t\t\t$t_output = '';\n\t\t\tif( !is_array( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) ) {\n\t\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array(\n\t\t\t\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID],\n\t\t\t\t);\n\t\t\t}\n\t\t\tif( count( $t_filter[FILTER_PROPERTY_PROJECT_ID] ) == 0 ) {\n\t\t\t\techo lang_get( 'current' );\n\t\t\t} else {\n\t\t\t\t$t_first_flag = true;\n\t\t\t\tforeach( $t_filter[FILTER_PROPERTY_PROJECT_ID] as $t_current ) {\n\t\t\t\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_PROJECT_ID, '[]\" value=\"', string_attribute( $t_current ), '\" />';\n\t\t\t\t\t$t_this_name = '';\n\t\t\t\t\tif( META_FILTER_CURRENT == $t_current ) {\n\t\t\t\t\t\t$t_this_name = '[' . lang_get( 'current' ) . ']';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_this_name = project_get_name( $t_current, false );\n\t\t\t\t\t}\n\t\t\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t\t\t$t_output = $t_output . '<br />';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$t_first_flag = false;\n\t\t\t\t\t}\n\t\t\t\t\t$t_output = $t_output . string_display_line( $t_this_name );\n\t\t\t\t}\n\t\t\t\techo $t_output;\n\t\t\t}\n?>\n\t\t\t</td>\n<?php\n\t\t\tif( $t_filter_cols > 6 ) {\n\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 5 ) . '\">&#160;</td>';\n\t\t\t}\n\t\t} else {\n\t\t\tif( $t_filter_cols > 3 ) {\n\t\t\t\techo '<td class=\"small-caption\" colspan=\"' . ( $t_filter_cols - 2 ) . '\">&#160;</td>';\n\t\t\t}\n\t\t}\n?>\n\t\t</tr>\n\n\t\t<!-- Match Type -->\n\t\t<tr class=\"row-1\">\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a id=\"match_type_filter\"\n\t\t\t\t\thref=\"<?php echo $t_filters_url . FILTER_PROPERTY_MATCH_TYPE;?>\"\n\t\t\t\t\t<?php echo $t_dynamic_filter_expander_class; ?>>\n\t\t\t\t\t<?php echo lang_get( 'filter_match_type_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" id=\"match_type_filter_target\">\n\t\t\t<?php\n\t\t\t\tswitch( $t_filter[FILTER_PROPERTY_MATCH_TYPE] ) {\n\t\t\t\t\tcase FILTER_MATCH_ANY:\n\t\t\t\t\t\techo lang_get( 'filter_match_any' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase FILTER_MATCH_ALL:\n\t\t\t\t\tdefault:\n\t\t\t\t\t\techo lang_get( 'filter_match_all' );\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t?>\n\t\t\t<input type=\"hidden\" name=\"match_type\" value=\"<?php echo $t_filter[FILTER_PROPERTY_MATCH_TYPE] ?>\"/>\n\t\t\t</td>\n\n\t\t\t<td class=\"small-caption category2\">\n\t\t\t\t<a id=\"highlight_changed_filter\"\n\t\t\t\t\thref=\"<?php echo $t_filters_url . FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\t\t\t<?php echo $t_dynamic_filter_expander_class; ?>>\n\t\t\t\t\t<?php echo lang_get( 'changed_label' )?>\n\t\t\t\t</a>\n\t\t\t</td>\n\t\t\t<td class=\"small-caption\" valign=\"top\" id=\"highlight_changed_filter_target\">\n\t\t\t\t<?php echo $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]; ?>\n\t\t\t\t<input type=\"hidden\"\n\t\t\t\t\tname=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED; ?>\"\n\t\t\t\t\tvalue=\"<?php echo string_attribute( $t_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED] ); ?>\"\n\t\t\t\t/>\n\t\t\t</td>\n\n\t\t\t<td colspan=\"4\">&#160;</td>\n\t\t</tr>\n\t</table>\n\t\t<?php\n\t}\n\n\t# expanded\n\tcollapse_icon( 'filter' );\n\techo '&nbsp;'; # This is a hack to ensure the div is high enough\n\techo '<div class=\"search-box\">';\n\techo '<label>';\n\techo lang_get( 'search' ) . '&#160;';\n\techo '<input type=\"text\" size=\"16\" name=\"', FILTER_PROPERTY_SEARCH, '\" value=\"', string_attribute( $t_filter[FILTER_PROPERTY_SEARCH] ), '\" />';\n\techo '</label>';\n\techo '</div>';\n\t?>\n\t<div class=\"submit-query\"><input type=\"submit\" name=\"filter\" value=\"<?php echo lang_get( 'filter_button' )?>\" /></div>\n\t</form>\n\t<?php\n\t$t_stored_queries_arr = filter_db_get_available_queries();\n\n\tif( access_has_project_level( config_get( 'stored_query_create_threshold' ) ) ) { ?>\n\t<div class=\"save-query\">\n\t\t<form method=\"post\" name=\"save_query\" action=\"query_store_page.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"submit\" name=\"save_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'save_query' )?>\" />\n\t\t</form>\n\t</div><?php\n\t}\n\tif( count( $t_stored_queries_arr ) > 0 ) { ?>\n\t<div class=\"manage-queries\">\n\t\t<form method=\"post\" name=\"open_queries\" action=\"query_view_page.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"submit\" name=\"switch_to_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'open_queries' )?>\" />\n\t\t</form>\n\t</div>\n\t<div class=\"stored-queries\">\n\t\t<form method=\"get\" name=\"list_queries<?php echo $t_form_name_suffix;?>\" action=\"view_all_set.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"hidden\" name=\"type\" value=\"3\" />\n\t\t\t<select name=\"source_query_id\">\n\t\t\t\t<option value=\"-1\"><?php echo '[' . lang_get( 'reset_query' ) . ']'?></option>\n\t\t\t\t<option value=\"-1\"></option>\n\t\t\t\t<?php\n\t\t\t\t$t_source_query_id = isset( $t_filter['_source_query_id'] ) ? (int)$t_filter['_source_query_id'] : -1;\n\t\t\t\tforeach( $t_stored_queries_arr as $t_query_id => $t_query_name ) {\n\t\t\t\t\techo '<option value=\"' . $t_query_id . '\" ';\n\t\t\t\t\tcheck_selected( $t_query_id, $t_source_query_id );\n\t\t\t\t\techo '>' . string_display_line( $t_query_name ) . '</option>';\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</select>\n\t\t\t<input type=\"submit\" name=\"switch_to_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'use_query' )?>\" />\n\t\t</form>\n\t</div> <?php\n\t} else { ?>\n\t<div class=\"reset-query\">\n\t\t<form method=\"get\" name=\"reset_query\" action=\"view_all_set.php\">\n\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t<input type=\"hidden\" name=\"type\" value=\"3\" />\n\t\t\t<input type=\"hidden\" name=\"source_query_id\" value=\"-1\" />\n\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'reset_query' )?>\" />\n\t\t</form>\n\t</div><?php\n\t}\n\t?>\n\n\t<div class=\"filter-links\">\n\t\t<?php\n\t\tif( access_has_project_level( config_get( 'create_permalink_threshold' ) ) ) {\n\t\t\t?>\n\t\t\t<form method=\"get\" action=\"permalink_page.php\">\n\t\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t\t<input type=\"hidden\" name=\"url\" value=\"<?php echo urlencode( filter_get_url( $t_filter ) ) ?>\" />\n\t\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo lang_get( 'create_filter_link' ) ?>\" />\n\t\t\t</form>\n\t\t\t<?php\n\t\t}\n\n\t\t$t_view_filters = config_get( 'view_filters' );\n\t\tif( ( SIMPLE_ONLY != $t_view_filters ) && ( ADVANCED_ONLY != $t_view_filters ) ) {\n\t\t\t?>\n\t\t\t<form method=\"get\" action=\"view_all_set.php\">\n\t\t\t\t<?php # CSRF protection not required here - form does not result in modifications ?>\n\t\t\t\t<input type=\"hidden\" name=\"type\" value=\"<?php echo config_get( 'use_dynamic_filters' ) ? '6' : '' ?>\" />\n\t\t\t\t<input type=\"hidden\" name=\"view_type\" value=\"<?php echo 'advanced' == $t_view_type ? 'simple' : 'advanced' ?>\" />\n\t\t\t\t<input type=\"submit\" name=\"reset_query_button\" class=\"button-small\" value=\"<?php echo 'advanced' == $t_view_type ? lang_get( 'simple_filters' ) : lang_get( 'advanced_filters' ) ?>\" />\n\t\t\t</form>\n\t\t\t<?php\n\t\t}\n\t\t?>\n\t</div>\n\n\t</div>\n\t<br />\n<?php\n}\n\n/**\n * @internal The following functions each print out filter field inputs.\n *      They are derived from view_filters_page.php\n *      The functions follow a strict naming convention:\n *\n * \t\tprint_filter_[filter_name]\n *\n *      Where [filter_name] is the same as the \"name\" of the form element for\n *      that filter. This naming convention is depended upon by the controller\n *      at the end of the script.\n *\n * @todo print functions should be abstracted.  Many of these functions\n *      are virtually identical except for the property name.\n *      Perhaps this code could be made simpler by refactoring into a\n *      class so as to avoid all those calls to global(which are pretty ugly)\n *      These functions could also be shared by view_filters_page.php\n */\n\n/**\n * Print the reporter field\n * @return void\n */\nfunction print_filter_reporter_id() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_REPORTER_ID;?>[]\">\n\t\t<?php\n\t# if current user is a reporter, and limited reports set to ON, only display that name\n\t# @@@ thraxisp - access_has_project_level checks greater than or equal to,\n\t#   this assumed that there aren't any holes above REPORTER where the limit would apply\n\t#\n\tif( ( ON === config_get( 'limit_reporters' ) ) && ( !access_has_project_level( access_threshold_min_level( config_get( 'report_bug_threshold' ) ) + 1 ) ) ) {\n\t\t$t_id = auth_get_current_user_id();\n\t\t$t_username = user_get_field( $t_id, 'username' );\n\t\t$t_realname = user_get_field( $t_id, 'realname' );\n\t\t$t_display_name = string_attribute( $t_username );\n\t\tif( ( isset( $t_realname ) ) && ( $t_realname > '' ) && ( ON == config_get( 'show_realname' ) ) ) {\n\t\t\t$t_display_name = string_attribute( $t_realname );\n\t\t}\n\t\techo '<option value=\"' . $t_id . '\" selected=\"selected\">' . $t_display_name . '</option>';\n\t} else {\n\t\t?>\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'report_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_REPORTER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\t\tprint_reporter_option_list( $g_filter[FILTER_PROPERTY_REPORTER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print the user monitor field\n * @return void\n */\nfunction print_filter_user_monitor() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t<!-- Monitored by -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_MONITOR_USER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'monitor_bug_threshold' ) ) ) {\n\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\tcheck_selected( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID], META_FILTER_MYSELF );\n\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t}\n\t$t_threshold = config_get( 'show_monitor_list_threshold' );\n\t$t_has_project_level = access_has_project_level( $t_threshold );\n\n\tif( $t_has_project_level ) {\n\t\tprint_reporter_option_list( $g_filter[FILTER_PROPERTY_MONITOR_USER_ID] );\n\t}\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the handler field\n * @return void\n */\nfunction print_filter_handler_id() {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\t?>\n\t\t<!-- Handler -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_HANDLER_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php\n\t\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\" ';\n\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_HANDLER_ID], META_FILTER_MYSELF );\n\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t}\n\n\t\tprint_assign_to_option_list( $g_filter[FILTER_PROPERTY_HANDLER_ID] );\n\t}?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the category field\n * @return void\n */\nfunction print_filter_show_category() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<!-- Category -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_CATEGORY_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_CATEGORY_ID], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_category_filter_option_list( $g_filter[FILTER_PROPERTY_CATEGORY_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the platform field\n * @return void\n */\nfunction print_filter_platform() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- Platform -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PLATFORM;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PLATFORM], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php\n\t\t\t\tlog_event( LOG_FILTERING, 'Platform = ' . var_export( $g_filter[FILTER_PROPERTY_PLATFORM], true ) );\n\tprint_platform_option_list( $g_filter[FILTER_PROPERTY_PLATFORM] );\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the os field\n * @return void\n */\nfunction print_filter_os() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- OS -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_OS;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_OS], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_option_list( $g_filter[FILTER_PROPERTY_OS] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the os build field\n * @return void\n */\nfunction print_filter_os_build() {\n\tglobal $g_select_modifier, $g_filter;\n\n\t?>\n\t\t<!-- OS Build -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_OS_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_OS_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_os_build_option_list( $g_filter[FILTER_PROPERTY_OS_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print the severity field\n * @return void\n */\nfunction print_filter_show_severity() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Severity -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_SEVERITY;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_SEVERITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'severity', $g_filter[FILTER_PROPERTY_SEVERITY] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print resolution field\n * @return void\n */\nfunction print_filter_show_resolution() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Resolution -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_RESOLUTION;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_RESOLUTION], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'resolution', $g_filter[FILTER_PROPERTY_RESOLUTION] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print status field\n * @return void\n */\nfunction print_filter_show_status() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\t<!-- Status -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_STATUS], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $g_filter[FILTER_PROPERTY_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print hide status field\n * @return void\n */\nfunction print_filter_hide_status() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Hide Status -->\n\t\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_HIDE_STATUS;?>[]\">\n\t\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\">[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t\t<?php print_enum_string_option_list( 'status', $g_filter[FILTER_PROPERTY_HIDE_STATUS] )?>\n\t\t\t</select>\n\t\t<?php\n}\n\n/**\n * print build field\n * @return void\n */\nfunction print_filter_show_build() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Build -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_BUILD;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_BUILD], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_build_option_list( $g_filter[FILTER_PROPERTY_BUILD] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print version field\n * @return void\n */\nfunction print_filter_show_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print fixed in version field\n * @return void\n */\nfunction print_filter_show_fixed_in_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Fixed in Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_FIXED_IN_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_FIXED_IN_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print target version field\n * @return void\n */\nfunction print_filter_show_target_version() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Fixed in Version -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_TARGET_VERSION;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_TARGET_VERSION], (string)META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t\t<?php print_version_option_list( $g_filter[FILTER_PROPERTY_TARGET_VERSION], null, VERSION_ALL, false, true )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print priority field\n * @return void\n */\nfunction print_filter_show_priority() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Priority -->\n\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PRIORITY;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PRIORITY], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_enum_string_option_list( 'priority', $g_filter[FILTER_PROPERTY_PRIORITY] )?>\n\t</select>\n\t\t<?php\n}\n\n/**\n * print profile field\n * @return void\n */\nfunction print_filter_show_profile() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- Profile -->\n\t\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PROFILE_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_PROFILE_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t\t<?php print_profile_option_list_for_project( helper_get_current_project(), $g_filter[FILTER_PROPERTY_PROFILE_ID] );?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print issues per page field\n * @return void\n */\nfunction print_filter_per_page() {\n\tglobal $g_filter;\n\t?><!-- Number of bugs per page -->\n\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_ISSUES_PER_PAGE;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $g_filter[FILTER_PROPERTY_ISSUES_PER_PAGE]?>\" />\n\t\t<?php\n}\n\n/**\n * print view state field\n * @return void\n */\nfunction print_filter_view_state() {\n\tglobal $g_select_modifier, $g_filter;\n\t?><!-- View Status -->\n\t\t<select name=\"<?php echo FILTER_PROPERTY_VIEW_STATE;?>\">\n\t\t\t<?php\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], META_FILTER_ANY );\n\techo '>[' . lang_get( 'any' ) . ']</option>';\n\techo '<option value=\"' . VS_PUBLIC . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], VS_PUBLIC );\n\techo '>' . lang_get( 'public' ) . '</option>';\n\techo '<option value=\"' . VS_PRIVATE . '\"';\n\tcheck_selected( $g_filter[FILTER_PROPERTY_VIEW_STATE], VS_PRIVATE );\n\techo '>' . lang_get( 'private' ) . '</option>';\n\t?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print sticky issues field\n * @return void\n */\nfunction print_filter_sticky_issues() {\n\tglobal $g_filter;\n\t?><!-- Show or hide sticky bugs -->\n\t\t\t<input type=\"checkbox\" name=\"<?php echo FILTER_PROPERTY_STICKY;?>\"<?php check_checked( gpc_string_to_bool( $g_filter[FILTER_PROPERTY_STICKY] ), true );?> />\n\t\t<?php\n}\n\n/**\n * print highlight changed field\n * @return void\n */\nfunction print_filter_highlight_changed() {\n\tglobal $g_filter;\n\t?><!-- Highlight changed bugs -->\n\t\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_HIGHLIGHT_CHANGED;?>\" size=\"3\" maxlength=\"7\" value=\"<?php echo $g_filter[FILTER_PROPERTY_HIGHLIGHT_CHANGED]?>\" />\n\t\t<?php\n}\n\n/**\n * Print filter by date fields\n * @param boolean $p_hide_checkbox Hide data filter checkbox.\n * @return void\n */\nfunction print_filter_do_filter_by_date( $p_hide_checkbox = false ) {\n\tglobal $g_filter;\n?>\n\t\t<table cellspacing=\"0\" cellpadding=\"0\">\n<?php\n\t$t_menu_disabled =  '';\n\tif( !$p_hide_checkbox ) {\n?>\n\t\t<tr>\n\t\t\t<td colspan=\"2\">\n\t\t\t\t<label>\n\t\t\t\t\t<input type=\"checkbox\" id=\"use_date_filters\" name=\"<?php\n\t\t\t\t\t\techo FILTER_PROPERTY_FILTER_BY_DATE ?>\"<?php\n\t\t\t\t\t\tcheck_checked( gpc_string_to_bool( $g_filter[FILTER_PROPERTY_FILTER_BY_DATE] ), true ) ?> />\n\t\t\t\t\t<?php echo lang_get( 'use_date_filters' )?>\n\t\t\t\t</label>\n\t\t\t</td>\n\t\t</tr>\n<?php\n\n\t\tif( 'on' !== $g_filter[FILTER_PROPERTY_FILTER_BY_DATE] ) {\n\t\t\t$t_menu_disabled = ' disabled=\"disabled\" ';\n\t\t}\n\t}\n?>\n\n\t\t<!-- Start date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'start_date_label' )?>\n\t\t\t</td>\n\t\t\t<td class=\"nowrap\">\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $g_filter[FILTER_PROPERTY_START_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $g_filter[FILTER_PROPERTY_START_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_START_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $g_filter[FILTER_PROPERTY_START_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t<!-- End date -->\n\t\t<tr>\n\t\t\t<td>\n\t\t\t<?php echo lang_get( 'end_date_label' )?>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t<?php\n\t\t\t$t_chars = preg_split( '//', config_get( 'short_date_format' ), -1, PREG_SPLIT_NO_EMPTY );\n\tforeach( $t_chars as $t_char ) {\n\t\tif( strcasecmp( $t_char, 'M' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_MONTH, '\"', $t_menu_disabled, '>';\n\t\t\tprint_month_option_list( $g_filter[FILTER_PROPERTY_END_MONTH] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'D' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_DAY, '\"', $t_menu_disabled, '>';\n\t\t\tprint_day_option_list( $g_filter[FILTER_PROPERTY_END_DAY] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t\tif( strcasecmp( $t_char, 'Y' ) == 0 ) {\n\t\t\techo '<select name=\"', FILTER_PROPERTY_END_YEAR, '\"', $t_menu_disabled, '>';\n\t\t\tprint_year_option_list( $g_filter[FILTER_PROPERTY_END_YEAR] );\n\t\t\tprint \"</select>\\n\";\n\t\t}\n\t}\n\t?>\n\t\t\t</td>\n\t\t</tr>\n\t\t</table>\n\t\t<?php\n}\n\n/**\n * print relationship fields\n * @return void\n */\nfunction print_filter_relationship_type() {\n\tglobal $g_filter;\n\t$c_reltype_value = $g_filter[FILTER_PROPERTY_RELATIONSHIP_TYPE];\n\tif( !$c_reltype_value ) {\n\t\t$c_reltype_value = -1;\n\t}\n\trelationship_list_box( $c_reltype_value, 'relationship_type', true );\n\techo '<input type=\"text\" name=\"', FILTER_PROPERTY_RELATIONSHIP_BUG, '\" size=\"5\" maxlength=\"10\" value=\"', $g_filter[FILTER_PROPERTY_RELATIONSHIP_BUG], '\" />';\n}\n\n/**\n * print tag fields\n * @return void\n */\nfunction print_filter_tag_string() {\n\tif( !access_has_global_level( config_get( 'tag_view_threshold' ) ) ) {\n\t\treturn;\n\t}\n\n\tglobal $g_filter;\n\t$t_tag_string = $g_filter[FILTER_PROPERTY_TAG_STRING];\n\tif( $g_filter[FILTER_PROPERTY_TAG_SELECT] != 0 && tag_exists( $g_filter[FILTER_PROPERTY_TAG_SELECT] ) ) {\n\t\t$t_tag_string .= ( is_blank( $t_tag_string ) ? '' : config_get( 'tag_separator' ) );\n\t\t$t_tag_string .= tag_get_field( $g_filter[FILTER_PROPERTY_TAG_SELECT], 'name' );\n\t}\n\t?>\n\t\t<input type=\"hidden\" id=\"tag_separator\" value=\"<?php echo config_get( 'tag_separator' )?>\" />\n\t\t<input type=\"text\" name=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_STRING;?>\" size=\"40\" value=\"<?php echo string_attribute( $t_tag_string )?>\" />\n\t\t<select <?php echo helper_get_tab_index()?> name=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\" id=\"<?php echo FILTER_PROPERTY_TAG_SELECT;?>\">\n\t\t\t<?php print_tag_option_list();?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * print note reporter field\n * @return void\n */\nfunction print_filter_note_user_id() {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\t?>\n\t<!-- BUGNOTE REPORTER -->\n\t<select<?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_NOTE_USER_ID;?>[]\">\n\t\t<option value=\"<?php echo META_FILTER_ANY?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_ANY );?>>[<?php echo lang_get( 'any' )?>]</option>\n\t\t<?php if( access_has_project_level( config_get( 'view_handler_threshold' ) ) ) {?>\n\t\t<option value=\"<?php echo META_FILTER_NONE?>\"<?php check_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_NONE );?>>[<?php echo lang_get( 'none' )?>]</option>\n\t\t<?php\n\t\t\tif( access_has_project_level( config_get( 'handle_bug_threshold' ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_MYSELF . '\"';\n\t\t\t\tcheck_selected( $g_filter[FILTER_PROPERTY_NOTE_USER_ID], META_FILTER_MYSELF );\n\t\t\t\techo '>[' . lang_get( 'myself' ) . ']</option>';\n\t\t\t}\n\n\t\t\tprint_note_option_list( $g_filter[FILTER_PROPERTY_NOTE_USER_ID] );\n\t\t}\n\t?>\n\t</select>\n\t<?php\n}\n\n\n/**\n * Print plugin filter fields as defined by MantisFilter objects.\n * @param string $p_field_name    Field name.\n * @param object $p_filter_object Filter object.\n * @return void\n */\nfunction print_filter_plugin_field( $p_field_name, $p_filter_object ) {\n\tglobal $g_select_modifier, $g_filter, $f_view_type;\n\n\t$t_size = (int)$p_filter_object->size;\n\n\tswitch( $p_filter_object->type ) {\n\t\tcase FILTER_TYPE_STRING:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\tstring_attribute( $g_filter[$p_field_name] ), '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_INT:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' value=\"',\n\t\t\t\t(int)$g_filter[$p_field_name], '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_BOOLEAN:\n\t\t\techo '<input name=\"', string_attribute( $p_field_name ), '\" type=\"checkbox\"',\n\t\t\t\t( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), check_checked( (bool)$g_filter[$p_field_name] ) , '\"/>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_STRING:\n\t\t\techo '<select', $g_select_modifier, ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $g_filter[$p_field_name], (string)META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', string_attribute( $t_option_value ), '\" ',\n\t\t\t\t\tcheck_selected( $g_filter[$p_field_name], $t_option_value, false ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t\tcase FILTER_TYPE_MULTI_INT:\n\t\t\techo '<select', $g_select_modifier, ( $t_size > 0 ? ' size=\"' . $t_size . '\"' : '' ), ' name=\"',\n\t\t\t\tstring_attribute( $p_field_name ), '[]\">', '<option value=\"', META_FILTER_ANY, '\"',\n\t\t\t\tcheck_selected( $g_filter[$p_field_name], META_FILTER_ANY ), '>[', lang_get( 'any' ), ']</option>';\n\n\t\t\tforeach( $p_filter_object->options() as $t_option_value => $t_option_name ) {\n\t\t\t\techo '<option value=\"', (int)$t_option_value, '\" ',\n\t\t\t\t\tcheck_selected( $g_filter[$p_field_name], (int)$t_option_value ), '>',\n\t\t\t\t\tstring_display_line( $t_option_name ), '</option>';\n\t\t\t}\n\n\t\t\techo '</select>';\n\t\t\tbreak;\n\n\t}\n}\n\n/**\n * print custom fields\n * @param integer $p_field_id Custom field identifier.\n * @return void\n */\nfunction print_filter_custom_field( $p_field_id ) {\n\tglobal $g_filter, $t_accessible_custom_fields_names, $t_accessible_custom_fields_types, $t_accessible_custom_fields_values, $t_accessible_custom_fields_ids, $g_select_modifier;\n\n\t$j = array_search( $p_field_id, $t_accessible_custom_fields_ids );\n\tif( $j === null || $j === false ) {\n\t\t?>\n\t\t\t<span style=\"color:red;font-weight:bold;\">\n\t\t\t\tunknown custom filter (custom <?php echo $p_field_id;?>)\n\t\t\t</span>\n\t\t<?php\n\t} else if( isset( $t_accessible_custom_fields_names[$j] ) ) {\n\t\tif( $t_accessible_custom_fields_types[$j] == CUSTOM_FIELD_TYPE_DATE ) {\n\t\t\tprint_filter_custom_field_date( $j, $p_field_id );\n\t\t} else if( $t_accessible_custom_fields_types[$j] == CUSTOM_FIELD_TYPE_TEXTAREA ) {\n\t\t\techo '<input type=\"text\" name=\"custom_field_', $p_field_id, '\" size=\"10\" value=\"\" />';\n\t\t} else {\n\t\t\techo '<select' . $g_select_modifier . ' name=\"custom_field_' . $p_field_id . '[]\">';\n\t\t\techo '<option value=\"' . META_FILTER_ANY . '\"';\n\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], META_FILTER_ANY, false );\n\t\t\techo '>[' . lang_get( 'any' ) . ']</option>';\n\n\t\t\t# don't show META_FILTER_NONE for enumerated types as it's not possible for them to be blank\n\t\t\tif( !in_array( $t_accessible_custom_fields_types[$j], array( CUSTOM_FIELD_TYPE_ENUM, CUSTOM_FIELD_TYPE_LIST, CUSTOM_FIELD_TYPE_MULTILIST ) ) ) {\n\t\t\t\techo '<option value=\"' . META_FILTER_NONE . '\"';\n\t\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], META_FILTER_NONE, false );\n\t\t\t\techo '>[' . lang_get( 'none' ) . ']</option>';\n\t\t\t}\n\t\t\tif( is_array( $t_accessible_custom_fields_values[$j] ) ) {\n\t\t\t\t$t_max_length = config_get( 'max_dropdown_length' );\n\t\t\t\tforeach( $t_accessible_custom_fields_values[$j] as $t_item ) {\n\t\t\t\t\tif( ( strtolower( $t_item ) !== META_FILTER_ANY ) && ( strtolower( $t_item ) !== META_FILTER_NONE ) ) {\n\t\t\t\t\t\techo '<option value=\"' . string_attribute( $t_item ) . '\"';\n\t\t\t\t\t\tif( isset( $g_filter['custom_fields'][$p_field_id] ) ) {\n\t\t\t\t\t\t\tcheck_selected( $g_filter['custom_fields'][$p_field_id], $t_item, false );\n\t\t\t\t\t\t}\n\t\t\t\t\t\techo '>' . string_attribute( string_shorten( $t_item, $t_max_length ) ) . '</option>' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\techo '</select>';\n\t\t}\n\t}\n}\n\n/**\n * Print sort fields\n * @return void\n */\nfunction print_filter_show_sort() {\n\tglobal $g_filter;\n\n\t# get all of the displayed fields for sort, then drop ones that\n\t#  are not appropriate and translate the rest\n\t$t_fields = helper_get_columns_to_view();\n\t$t_n_fields = count( $t_fields );\n\t$t_shown_fields[''] = '';\n\tfor( $i = 0;$i < $t_n_fields;$i++ ) {\n\t\tif( !in_array( $t_fields[$i], array( 'selection', 'edit', 'bugnotes_count', 'attachment_count' ) ) ) {\n\t\t\tif( strpos( $t_fields[$i], 'custom_' ) === 0 ) {\n\t\t\t\t$t_field_name = string_display( lang_get_defaulted( utf8_substr( $t_fields[$i], utf8_strlen( 'custom_' ) ) ) );\n\t\t\t} else {\n\t\t\t\t$t_field_name = string_get_field_name( $t_fields[$i] );\n\t\t\t}\n\t\t\t$t_shown_fields[$t_fields[$i]] = $t_field_name;\n\t\t}\n\t}\n\t$t_shown_dirs[''] = '';\n\t$t_shown_dirs['ASC'] = lang_get( 'bugnote_order_asc' );\n\t$t_shown_dirs['DESC'] = lang_get( 'bugnote_order_desc' );\n\n\t# get default values from filter structure\n\t$t_sort_fields = explode( ',', $g_filter[FILTER_PROPERTY_SORT_FIELD_NAME] );\n\t$t_dir_fields = explode( ',', $g_filter[FILTER_PROPERTY_SORT_DIRECTION] );\n\tif( !isset( $t_sort_fields[1] ) ) {\n\t\t$t_sort_fields[1] = '';\n\t\t$t_dir_fields[1] = '';\n\t}\n\n\t# if there are fields to display, show the dropdowns\n\tif( count( $t_fields ) > 0 ) {\n\t\t# display a primary and secondary sort fields\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_0\">';\n\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_sort_fields[0] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_0\">';\n\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_dir_fields[0] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\n\t\techo ', ';\n\n\t\t# for secondary sort\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_1\">';\n\t\tforeach( $t_shown_fields as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_sort_fields[1] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\t\techo '<select name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_1\">';\n\t\tforeach( $t_shown_dirs as $t_key => $t_val ) {\n\t\t\techo '<option value=\"' . $t_key . '\"';\n\t\t\tcheck_selected( $t_key, $t_dir_fields[1] );\n\t\t\techo '>' . $t_val . '</option>';\n\t\t}\n\t\techo '</select>';\n\t} else {\n\t\techo lang_get_defaulted( 'last_updated' ) . lang_get( 'bugnote_order_desc' );\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_FIELD_NAME, '_1\" value=\"last_updated\" />';\n\t\techo '<input type=\"hidden\" name=\"', FILTER_PROPERTY_SORT_DIRECTION, '_1\" value=\"DESC\" />';\n\t}\n}\n\n/**\n * Print custom field date fields\n * @param integer $p_field_num Field number.\n * @param integer $p_field_id  Field identifier.\n * @return void\n */\nfunction print_filter_custom_field_date( $p_field_num, $p_field_id ) {\n\tglobal $g_filter, $t_accessible_custom_fields_values;\n\n\t# Resort the values so there ordered numerically, they are sorted as strings otherwise which\n\t# may be wrong for dates before early 2001.\n\tif( is_array( $t_accessible_custom_fields_values[$p_field_num] ) ) {\n\t\tarray_multisort( $t_accessible_custom_fields_values[$p_field_num], SORT_NUMERIC, SORT_ASC );\n\t}\n\n\t$t_sel_start_year = null;\n\t$t_sel_end_year = null;\n\tif( isset( $t_accessible_custom_fields_values[$p_field_num][0] ) ) {\n\t\t$t_sel_start_year = date( 'Y', $t_accessible_custom_fields_values[$p_field_num][0] );\n\t}\n\t$t_count = count( $t_accessible_custom_fields_values[$p_field_num] );\n\tif( isset( $t_accessible_custom_fields_values[$p_field_num][$t_count - 1] ) ) {\n\t\t$t_sel_end_year = date( 'Y', $t_accessible_custom_fields_values[$p_field_num][$t_count - 1] );\n\t}\n\n\t$t_start = date( 'U' );\n\n\t# Default to today in filters..\n\t$t_end = $t_start;\n\n\tif( isset( $g_filter['custom_fields'][$p_field_id][1] ) ) {\n\t\t$t_start_time = $g_filter['custom_fields'][$p_field_id][1];\n\t} else {\n\t\t$t_start_time = 0;\n\t}\n\n\tif( isset( $g_filter['custom_fields'][$p_field_id][2] ) ) {\n\t\t$t_end_time = $g_filter['custom_fields'][$p_field_id][2];\n\t} else {\n\t\t$t_end_time = 0;\n\t}\n\n\t$t_start_disable = true;\n\t$t_end_disable = true;\n\n\t# if $g_filter['custom_fields'][$p_field_id][0] is not set (ie no filter),\n\t# we will drop through the following switch and use the default values\n\t# above, so no need to check if stuff is set or not.\n\tswitch( $g_filter['custom_fields'][$p_field_id][0] ) {\n\t\tcase CUSTOM_FIELD_DATE_ANY:\n\t\tcase CUSTOM_FIELD_DATE_NONE:\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_BETWEEN:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_end_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\t$t_end = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ONORBEFORE:\n\t\tcase CUSTOM_FIELD_DATE_BEFORE:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_end_time;\n\t\t\tbreak;\n\t\tcase CUSTOM_FIELD_DATE_ON:\n\t\tcase CUSTOM_FIELD_DATE_AFTER:\n\t\tcase CUSTOM_FIELD_DATE_ONORAFTER:\n\t\t\t$t_start_disable = false;\n\t\t\t$t_start = $t_start_time;\n\t\t\tbreak;\n\t}\n\n\techo '<table cellspacing=\"0\" cellpadding=\"0\"><tr><td>' . \"\\n\";\n\techo '<select size=\"1\" name=\"custom_field_' . $p_field_id . '_control\">' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ANY . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ANY );\n\techo '>' . lang_get( 'any' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_NONE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_NONE );\n\techo '>' . lang_get( 'none' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BETWEEN . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BETWEEN );\n\techo '>' . lang_get( 'between_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORBEFORE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORBEFORE );\n\techo '>' . lang_get( 'on_or_before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_BEFORE . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_BEFORE );\n\techo '>' . lang_get( 'before_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ON . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ON );\n\techo '>' . lang_get( 'on_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_AFTER . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_AFTER );\n\techo '>' . lang_get( 'after_date' ) . '</option>' . \"\\n\";\n\techo '<option value=\"' . CUSTOM_FIELD_DATE_ONORAFTER . '\"';\n\tcheck_selected( (int)$g_filter['custom_fields'][$p_field_id][0], CUSTOM_FIELD_DATE_ONORAFTER );\n\techo '>' . lang_get( 'on_or_after_date' ) . '</option>' . \"\\n\";\n\techo '</select>' . \"\\n\";\n\n\techo \"</td></tr>\\n<tr><td>\";\n\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_start', config_get( 'short_date_format' ), $t_start, $t_start_disable, false, $t_sel_start_year, $t_sel_end_year );\n\tprint \"</td></tr>\\n<tr><td>\";\n\tprint_date_selection_set( 'custom_field_' . $p_field_id . '_end', config_get( 'short_date_format' ), $t_end, $t_end_disable, false, $t_sel_start_year, $t_sel_end_year );\n\tprint \"</td></tr>\\n</table>\";\n}\n\n/**\n * Print project field\n * @return void\n */\nfunction print_filter_project_id() {\n\tglobal $g_select_modifier, $g_filter;\n\t?>\n\t\t<!-- Project -->\n\t\t<select <?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_PROJECT_ID;?>[]\">\n\t\t\t<option value=\"<?php echo META_FILTER_CURRENT ?>\"\n\t\t\t\t<?php check_selected( $g_filter[FILTER_PROPERTY_PROJECT_ID], META_FILTER_CURRENT );?>>\n\t\t\t\t[<?php echo lang_get( 'current' )?>]\n\t\t\t</option>\n\t\t\t<?php print_project_option_list( $g_filter[FILTER_PROPERTY_PROJECT_ID] )?>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Print filter match type selector\n * @return void\n */\nfunction print_filter_match_type() {\n\tglobal $g_select_modifier, $g_filter;\n?>\n\t\t<!-- Project -->\n\t\t<select <?php echo $g_select_modifier;?> name=\"<?php echo FILTER_PROPERTY_MATCH_TYPE;?>\">\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ALL?>\" <?php check_selected( $g_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ALL );?>>[<?php echo lang_get( 'filter_match_all' )?>]</option>\n\t\t\t<option value=\"<?php echo FILTER_MATCH_ANY?>\" <?php check_selected( $g_filter[FILTER_PROPERTY_MATCH_TYPE], FILTER_MATCH_ANY );?>>[<?php echo lang_get( 'filter_match_any' )?>]</option>\n\t\t</select>\n\t\t<?php\n}\n\n/**\n * Prints a multi-value filter field.\n * @param string $p_field_name  Field name.\n * @param mixed  $p_field_value Field value.\n * @return void\n */\nfunction print_multivalue_field( $p_field_name, $p_field_value ) {\n\t$t_output = '';\n\t$t_any_found = false;\n\n\tif( count( $p_field_value ) == 0 ) {\n\t\techo lang_get( 'any' );\n\t} else {\n\t\t$t_first_flag = true;\n\n\t\t$t_field_value = is_array( $p_field_value ) ? $p_field_value : array( $p_field_value );\n\n\t\tforeach( $t_field_value as $t_current ) {\n\t\t\t$t_current = stripslashes( $t_current );\n\t\t\t?>\n\t\t\t\t<input type=\"hidden\" name=\"<?php echo string_attribute( $p_field_name )?>[]\" value=\"<?php echo string_attribute( $t_current );?>\" />\n\t\t\t\t<?php\n\t\t\t\t$t_this_string = '';\n\n\t\t\tif( ( ( $t_current == META_FILTER_ANY ) && ( is_numeric( $t_current ) ) ) || ( is_blank( $t_current ) ) ) {\n\t\t\t\t$t_any_found = true;\n\t\t\t} else {\n\t\t\t\t$t_this_string = string_display( $t_current );\n\t\t\t}\n\n\t\t\tif( $t_first_flag != true ) {\n\t\t\t\t$t_output .= '<br />';\n\t\t\t} else {\n\t\t\t\t$t_first_flag = false;\n\t\t\t}\n\n\t\t\t$t_output .= $t_this_string;\n\t\t}\n\n\t\tif( true == $t_any_found ) {\n\t\t\techo lang_get( 'any' );\n\t\t} else {\n\t\t\techo $t_output;\n\t\t}\n\t}\n}\n\n# ==========================================================================\n# CACHING\n# ==========================================================================\n\n# @internal SECURITY NOTE: cache globals are initialized here to prevent them\n# being spoofed if register_globals is turned on.\n# We cache filter requests to reduce the number of SQL queries\n# @global array $g_cache_filter\n# @global array $g_cache_filter_db_filters\n$g_cache_filter = array();\n$g_cache_filter_db_filters = array();\n\n/**\n *  Cache a filter row if necessary and return the cached copy\n *  If the second parameter is true (default), trigger an error\n *  if the filter can't be found.  If the second parameter is\n *  false, return false if the filter can't be found.\n * @param integer $p_filter_id      A filter identifier to retrieve.\n * @param boolean $p_trigger_errors Whether to trigger an error if the filter is not found.\n * @return array|boolean\n */\nfunction filter_cache_row( $p_filter_id, $p_trigger_errors = true ) {\n\tglobal $g_cache_filter;\n\n\tif( isset( $g_cache_filter[$p_filter_id] ) ) {\n\t\treturn $g_cache_filter[$p_filter_id];\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $p_filter_id ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\n\tif( !$t_row ) {\n\t\tif( $p_trigger_errors ) {\n\t\t\terror_parameters( $p_filter_id );\n\t\t\ttrigger_error( ERROR_FILTER_NOT_FOUND, ERROR );\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t$g_cache_filter[$p_filter_id] = $t_row;\n\n\treturn $t_row;\n}\n\n/**\n * Clear the filter cache (or just the given id if specified)\n * @param integer $p_filter_id Filter id.\n * @return boolean\n */\nfunction filter_clear_cache( $p_filter_id = null ) {\n\tglobal $g_cache_filter;\n\n\tif( null === $p_filter_id ) {\n\t\t$g_cache_filter = array();\n\t} else {\n\t\tunset( $g_cache_filter[(int)$p_filter_id] );\n\t}\n\n\treturn true;\n}\n\n/**\n * Add a filter to the database for the current user\n * @param integer $p_project_id    Project id.\n * @param boolean $p_is_public     Whether filter is public or private.\n * @param string  $p_name          Filter name.\n * @param string  $p_filter_string Filter string.\n * @return integer\n */\nfunction filter_db_set_for_current_user( $p_project_id, $p_is_public, $p_name, $p_filter_string ) {\n\t$t_user_id = auth_get_current_user_id();\n\t$c_project_id = (int)$p_project_id;\n\n\t# check that the user can save non current filters (if required)\n\tif( ( ALL_PROJECTS <= $c_project_id ) && ( !is_blank( $p_name ) ) && ( !access_has_project_level( config_get( 'stored_query_create_threshold' ) ) ) ) {\n\t\treturn -1;\n\t}\n\n\t# ensure that we're not making this filter public if we're not allowed\n\tif( !access_has_project_level( config_get( 'stored_query_create_shared_threshold' ) ) ) {\n\t\t$p_is_public = false;\n\t}\n\n\t# Do I need to update or insert this value?\n\tdb_param_push();\n\t$t_query = 'SELECT id FROM {filters}\n\t\t\t\t\tWHERE user_id=' . db_param() . '\n\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\tAND name=' . db_param();\n\t$t_result = db_query( $t_query, array( $t_user_id, $c_project_id, $p_name ) );\n\n\t$t_row = db_fetch_array( $t_result );\n\tif( $t_row ) {\n\t\tdb_param_push();\n\t\t$t_query = 'UPDATE {filters}\n\t\t\t\t\t  SET is_public=' . db_param() . ',\n\t\t\t\t\t\tfilter_string=' . db_param() . '\n\t\t\t\t\t  WHERE id=' . db_param();\n\t\tdb_query( $t_query, array( $p_is_public, $p_filter_string, $t_row['id'] ) );\n\n\t\treturn $t_row['id'];\n\t} else {\n\t\tdb_param_push();\n\t\t$t_query = 'INSERT INTO {filters}\n\t\t\t\t\t\t( user_id, project_id, is_public, name, filter_string )\n\t\t\t\t\t  VALUES\n\t\t\t\t\t\t( ' . db_param() . ', ' . db_param() . ', ' . db_param() . ', ' . db_param() . ', ' . db_param() . ' )';\n\t\tdb_query( $t_query, array( $t_user_id, $c_project_id, $p_is_public, $p_name, $p_filter_string ) );\n\n\t\t# Recall the query, we want the filter ID\n\t\tdb_param_push();\n\t\t$t_query = 'SELECT id\n\t\t\t\t\t\tFROM {filters}\n\t\t\t\t\t\tWHERE user_id=' . db_param() . '\n\t\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\t\tAND name=' . db_param();\n\t\t$t_result = db_query( $t_query, array( $t_user_id, $c_project_id, $p_name ) );\n\n\t\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\t\treturn $t_row['id'];\n\t\t}\n\n\t\treturn -1;\n\t}\n}\n\n/**\n * This function returns the filter string that is tied to the unique id parameter. If the user\n * does not have permission to see this filter, the function returns null\n * @param integer $p_filter_id A Filter identifier.\n * @param integer $p_user_id   A valid user identifier.\n * @return mixed\n */\nfunction filter_db_get_filter( $p_filter_id, $p_user_id = null ) {\n\tglobal $g_cache_filter_db_filters;\n\t$c_filter_id = (int)$p_filter_id;\n\n\tif( isset( $g_cache_filter_db_filters[$p_filter_id] ) ) {\n\t\tif( $g_cache_filter_db_filters[$p_filter_id] === false ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn $g_cache_filter_db_filters[$p_filter_id];\n\t}\n\n\tif( null === $p_user_id ) {\n\t\t$t_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$t_user_id = $p_user_id;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\tif( $t_row['user_id'] != $t_user_id ) {\n\t\t\tif( $t_row['is_public'] != true ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t# check that the user has access to non current filters\n\t\tif( ( ALL_PROJECTS <= $t_row['project_id'] ) && ( !is_blank( $t_row['name'] ) ) && ( !access_has_project_level( config_get( 'stored_query_use_threshold', null, $t_user_id, $t_row['project_id'] ) ) ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$g_cache_filter_db_filters[$p_filter_id] = $t_row['filter_string'];\n\t\treturn $t_row['filter_string'];\n\t} else {\n\t\t$g_cache_filter_db_filters[$p_filter_id] = false;\n\t\treturn false;\n\t}\n}\n\n/**\n * get current filter for given project and user\n * @param integer $p_project_id A project identifier.\n * @param integer $p_user_id    A valid user identifier.\n * @return integer\n */\nfunction filter_db_get_project_current( $p_project_id, $p_user_id = null ) {\n\t$c_project_id = (int)$p_project_id;\n\t$c_project_id = $c_project_id * -1;\n\n\tif( null === $p_user_id ) {\n\t\t$c_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$c_user_id = (int)$p_user_id;\n\t}\n\n\t# we store current filters for each project with a special project index\n\tdb_param_push();\n\t$t_query = 'SELECT *\n\t\t\t\t  FROM {filters}\n\t\t\t\t  WHERE user_id=' . db_param() . '\n\t\t\t\t\tAND project_id=' . db_param() . '\n\t\t\t\t\tAND name=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_user_id, $c_project_id, '' ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\treturn $t_row['id'];\n\t}\n\n\treturn null;\n}\n\n/**\n * Query for the filter name using the filter id\n * @param integer $p_filter_id Filter id.\n * @return string\n */\nfunction filter_db_get_name( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters} WHERE id=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id ) );\n\n\tif( $t_row = db_fetch_array( $t_result ) ) {\n\t\tif( $t_row['user_id'] != auth_get_current_user_id() ) {\n\t\t\tif( $t_row['is_public'] != true ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn $t_row['name'];\n\t}\n\n\treturn null;\n}\n\n/**\n * Check if the current user has permissions to delete the stored query\n * @param integer $p_filter_id Filter id.\n * @return boolean\n */\nfunction filter_db_can_delete_filter( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\t$t_user_id = auth_get_current_user_id();\n\n\t# Administrators can delete any filter\n\tif( user_is_administrator( $t_user_id ) ) {\n\t\treturn true;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'SELECT id\n\t\t\t\t  FROM {filters}\n\t\t\t\t  WHERE id=' . db_param() . '\n\t\t\t\t  AND user_id=' . db_param() . '\n\t\t\t\t  AND project_id!=' . db_param();\n\t$t_result = db_query( $t_query, array( $c_filter_id, $t_user_id, -1 ) );\n\n\tif( db_result( $t_result ) > 0 ) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Delete the filter specified by $p_filter_id\n * @param integer $p_filter_id Filter identifier.\n * @return boolean\n */\nfunction filter_db_delete_filter( $p_filter_id ) {\n\t$c_filter_id = (int)$p_filter_id;\n\n\tif( !filter_db_can_delete_filter( $c_filter_id ) ) {\n\t\treturn false;\n\t}\n\n\tdb_param_push();\n\t$t_query = 'DELETE FROM {filters} WHERE id=' . db_param();\n\tdb_query( $t_query, array( $c_filter_id ) );\n\n\treturn true;\n}\n\n/**\n * Delete all the unnamed filters\n * @return void\n */\nfunction filter_db_delete_current_filters() {\n\t$t_all_id = ALL_PROJECTS;\n\n\tdb_param_push();\n\t$t_query = 'DELETE FROM {filters} WHERE project_id<=' . db_param() . ' AND name=' . db_param();\n\tdb_query( $t_query, array( $t_all_id, '' ) );\n}\n\n/**\n * Note: any changes made in this function should be reflected in\n * mci_filter_db_get_available_queries())\n * @param integer $p_project_id A valid project identifier.\n * @param integer $p_user_id    A valid user identifier.\n * @return mixed\n */\nfunction filter_db_get_available_queries( $p_project_id = null, $p_user_id = null ) {\n\t$t_overall_query_arr = array();\n\n\tif( null === $p_project_id ) {\n\t\t$t_project_id = helper_get_current_project();\n\t} else {\n\t\t$t_project_id = (int)$p_project_id;\n\t}\n\n\tif( null === $p_user_id ) {\n\t\t$t_user_id = auth_get_current_user_id();\n\t} else {\n\t\t$t_user_id = (int)$p_user_id;\n\t}\n\n\t# If the user doesn't have access rights to stored queries, just return\n\tif( !access_has_project_level( config_get( 'stored_query_use_threshold' ) ) ) {\n\t\treturn $t_overall_query_arr;\n\t}\n\n\t# Get the list of available queries. By sorting such that public queries are\n\t# first, we can override any query that has the same name as a private query\n\t# with that private one\n\tdb_param_push();\n\t$t_query = 'SELECT * FROM {filters}\n\t\t\t\t\tWHERE (project_id=' . db_param() . '\n\t\t\t\t\t\tOR project_id=0)\n\t\t\t\t\tAND name!=\\'\\'\n\t\t\t\t\tAND (is_public = ' . db_param() . '\n\t\t\t\t\t\tOR user_id = ' . db_param() . ')\n\t\t\t\t\tORDER BY is_public DESC, name ASC';\n\t$t_result = db_query( $t_query, array( $t_project_id, true, $t_user_id ) );\n\n\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t$t_overall_query_arr[$t_row['id']] = $t_row['name'];\n\t}\n\n\t$t_overall_query_arr = array_unique( $t_overall_query_arr );\n\tasort( $t_overall_query_arr );\n\n\treturn $t_overall_query_arr;\n}\n\n/**\n * Check that the given filter name does not exceed the maximum filter length\n * @param string $p_name Filter name.\n * @return boolean true when under max_length (64) and false when over\n */\nfunction filter_name_valid_length( $p_name ) {\n\tif( utf8_strlen( $p_name ) > 64 ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Create a filter for getting issues assigned to the specified project and user that\n * are not yet resolved.\n *\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    The user id or 0 to get unassigned issues.\n * @return mixed valid filter.\n */\nfunction filter_create_assigned_to_unresolved( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\n\tif( $p_user_id == 0 ) {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array( '0' => META_FILTER_NONE );\n\t} else {\n\t\t$t_filter[FILTER_PROPERTY_HANDLER_ID] = array( '0' => $p_user_id );\n\t}\n\n\t$t_bug_resolved_status_threshold = config_get( 'bug_resolved_status_threshold', null, $p_user_id, $p_project_id );\n\t$t_filter[FILTER_PROPERTY_HIDE_STATUS] = array( '0' => $t_bug_resolved_status_threshold );\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Create a filter for getting issues reported by the specified project and user.\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    A valid user identifier.\n * @return array a valid filter.\n */\nfunction filter_create_reported_by( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\t$t_filter[FILTER_PROPERTY_REPORTER_ID] = array( '0' => $p_user_id );\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n\n/**\n * Create a filter for getting issues monitored by the specified project and user.\n * @param integer $p_project_id The project id or ALL_PROJECTS.\n * @param integer $p_user_id    The user id.\n * @return array a valid filter.\n */\nfunction filter_create_monitored_by( $p_project_id, $p_user_id ) {\n\t$t_filter = filter_get_default();\n\n\tif( $p_user_id == 0 ) {\n\t\t$t_filter[FILTER_PROPERTY_MONITOR_USER_ID] = array( '0' => META_FILTER_NONE );\n\t} else {\n\t\t$t_filter[FILTER_PROPERTY_MONITOR_USER_ID] = array( '0' => $p_user_id );\n\t}\n\n\tif( $p_project_id != ALL_PROJECTS ) {\n\t\t$t_filter[FILTER_PROPERTY_PROJECT_ID] = array( '0' => $p_project_id );\n\t}\n\n\treturn filter_ensure_valid_filter( $t_filter );\n}\n"], "filenames": ["core/filter_api.php"], "buggy_code_start_loc": [491], "buggy_code_end_loc": [494], "fixing_code_start_loc": [492], "fixing_code_end_loc": [501], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in MantisBT Filter API in MantisBT versions before 1.2.19, and versions 2.0.0-beta1, 1.3.0-beta1 allows remote attackers to inject arbitrary web script or HTML via the 'view_type' parameter.", "other": {"cve": {"id": "CVE-2016-6837", "sourceIdentifier": "secalert@redhat.com", "published": "2017-01-10T15:59:00.500", "lastModified": "2017-01-11T02:17:27.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in MantisBT Filter API in MantisBT versions before 1.2.19, and versions 2.0.0-beta1, 1.3.0-beta1 allows remote attackers to inject arbitrary web script or HTML via the 'view_type' parameter."}, {"lang": "es", "value": "Vulnerabilidad de XSS en MantisBT Filter API en MantisBT en versiones anteriores a 1.2.19 y versiones 2.0.0-beta1, 1.3.0-beta1 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s del par\u00e1metro 'view_type'."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.2.18", "matchCriteriaId": "449F99FC-A5C4-4858-9013-C88827660E20"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:1.3.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "D355450F-4354-4E0B-BA86-A6BCF0672E1A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:mantisbt:2.0.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "541BD5B7-9F88-4B6A-A9D5-3BB182661EC8"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/92522", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1036655", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/mantisbt/mantisbt/commit/7086c2d8b4b20ac14013b36761ac04f0abf21a4e", "source": "secalert@redhat.com", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://mantisbt.org/bugs/view.php?id=21611", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mantisbt/mantisbt/commit/7086c2d8b4b20ac14013b36761ac04f0abf21a4e"}}