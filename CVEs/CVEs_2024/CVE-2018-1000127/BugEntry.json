{"buggy_code": ["/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/*\n *  memcached - memory caching daemon\n *\n *       http://www.memcached.org/\n *\n *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.\n *\n *  Use and distribution licensed under the BSD license.  See\n *  the LICENSE file for full text.\n *\n *  Authors:\n *      Anatoly Vorobey <mellon@pobox.com>\n *      Brad Fitzpatrick <brad@danga.com>\n */\n#include \"memcached.h\"\n#include <sys/stat.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <signal.h>\n#include <sys/param.h>\n#include <sys/resource.h>\n#include <sys/uio.h>\n#include <ctype.h>\n#include <stdarg.h>\n\n/* some POSIX systems need the following definition\n * to get mlockall flags out of sys/mman.h.  */\n#ifndef _P1003_1B_VISIBLE\n#define _P1003_1B_VISIBLE\n#endif\n/* need this to get IOV_MAX on some platforms. */\n#ifndef __need_IOV_MAX\n#define __need_IOV_MAX\n#endif\n#include <pwd.h>\n#include <sys/mman.h>\n#include <fcntl.h>\n#include <netinet/tcp.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <assert.h>\n#include <limits.h>\n#include <sysexits.h>\n#include <stddef.h>\n\n/* FreeBSD 4.x doesn't have IOV_MAX exposed. */\n#ifndef IOV_MAX\n#if defined(__FreeBSD__) || defined(__APPLE__) || defined(__GNU__)\n# define IOV_MAX 1024\n/* GNU/Hurd don't set MAXPATHLEN\n * http://www.gnu.org/software/hurd/hurd/porting/guidelines.html#PATH_MAX_tt_MAX_PATH_tt_MAXPATHL */\n#ifndef MAXPATHLEN\n#define MAXPATHLEN 4096\n#endif\n#endif\n#endif\n\n/*\n * forward declarations\n */\nstatic void drive_machine(conn *c);\nstatic int new_socket(struct addrinfo *ai);\nstatic int try_read_command(conn *c);\n\nenum try_read_result {\n    READ_DATA_RECEIVED,\n    READ_NO_DATA_RECEIVED,\n    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */\n    READ_MEMORY_ERROR      /** failed to allocate more memory */\n};\n\nstatic enum try_read_result try_read_network(conn *c);\nstatic enum try_read_result try_read_udp(conn *c);\n\nstatic void conn_set_state(conn *c, enum conn_states state);\nstatic int start_conn_timeout_thread();\n\n/* stats */\nstatic void stats_init(void);\nstatic void server_stats(ADD_STAT add_stats, conn *c);\nstatic void process_stat_settings(ADD_STAT add_stats, void *c);\nstatic void conn_to_str(const conn *c, char *buf);\n\n\n/* defaults */\nstatic void settings_init(void);\n\n/* event handling, network IO */\nstatic void event_handler(const int fd, const short which, void *arg);\nstatic void conn_close(conn *c);\nstatic void conn_init(void);\nstatic bool update_event(conn *c, const int new_flags);\nstatic void complete_nread(conn *c);\nstatic void process_command(conn *c, char *command);\nstatic void write_and_free(conn *c, char *buf, int bytes);\nstatic int ensure_iov_space(conn *c);\nstatic int add_iov(conn *c, const void *buf, int len);\nstatic int add_chunked_item_iovs(conn *c, item *it, int len);\nstatic int add_msghdr(conn *c);\nstatic void write_bin_error(conn *c, protocol_binary_response_status err,\n                            const char *errstr, int swallow);\n\nstatic void conn_free(conn *c);\n\n/** exported globals **/\nstruct stats stats;\nstruct stats_state stats_state;\nstruct settings settings;\ntime_t process_started;     /* when the process was started */\nconn **conns;\n\nstruct slab_rebalance slab_rebal;\nvolatile int slab_rebalance_signal;\n\n/** file scope variables **/\nstatic conn *listen_conn = NULL;\nstatic int max_fds;\nstatic struct event_base *main_base;\n\nenum transmit_result {\n    TRANSMIT_COMPLETE,   /** All done writing. */\n    TRANSMIT_INCOMPLETE, /** More data remaining to write. */\n    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */\n    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */\n};\n\nstatic enum transmit_result transmit(conn *c);\n\n/* This reduces the latency without adding lots of extra wiring to be able to\n * notify the listener thread of when to listen again.\n * Also, the clock timer could be broken out into its own thread and we\n * can block the listener via a condition.\n */\nstatic volatile bool allow_new_conns = true;\nstatic struct event maxconnsevent;\nstatic void maxconns_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};\n\n    if (fd == -42 || allow_new_conns == false) {\n        /* reschedule in 10ms if we need to keep polling */\n        evtimer_set(&maxconnsevent, maxconns_handler, 0);\n        event_base_set(main_base, &maxconnsevent);\n        evtimer_add(&maxconnsevent, &t);\n    } else {\n        evtimer_del(&maxconnsevent);\n        accept_new_conns(true);\n    }\n}\n\n#define REALTIME_MAXDELTA 60*60*24*30\n\n/*\n * given time value that's either unix time or delta from current unix time, return\n * unix time. Use the fact that delta can't exceed one month (and real time value can't\n * be that low).\n */\nstatic rel_time_t realtime(const time_t exptime) {\n    /* no. of seconds in 30 days - largest possible delta exptime */\n\n    if (exptime == 0) return 0; /* 0 means never expire */\n\n    if (exptime > REALTIME_MAXDELTA) {\n        /* if item expiration is at/before the server started, give it an\n           expiration time of 1 second after the server started.\n           (because 0 means don't expire).  without this, we'd\n           underflow and wrap around to some large value way in the\n           future, effectively making items expiring in the past\n           really expiring never */\n        if (exptime <= process_started)\n            return (rel_time_t)1;\n        return (rel_time_t)(exptime - process_started);\n    } else {\n        return (rel_time_t)(exptime + current_time);\n    }\n}\n\nstatic void stats_init(void) {\n    memset(&stats, 0, sizeof(struct stats));\n    memset(&stats_state, 0, sizeof(struct stats_state));\n    stats_state.accepting_conns = true; /* assuming we start in this state. */\n\n    /* make the time we started always be 2 seconds before we really\n       did, so time(0) - time.started is never zero.  if so, things\n       like 'settings.oldest_live' which act as booleans as well as\n       values are now false in boolean context... */\n    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;\n    stats_prefix_init();\n}\n\nstatic void stats_reset(void) {\n    STATS_LOCK();\n    memset(&stats, 0, sizeof(struct stats));\n    stats_prefix_clear();\n    STATS_UNLOCK();\n    threadlocal_stats_reset();\n    item_stats_reset();\n}\n\nstatic void settings_init(void) {\n    settings.use_cas = true;\n    settings.access = 0700;\n    settings.port = 11211;\n    settings.udpport = 11211;\n    /* By default this string should be NULL for getaddrinfo() */\n    settings.inter = NULL;\n    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */\n    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */\n    settings.verbose = 0;\n    settings.oldest_live = 0;\n    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */\n    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */\n    settings.socketpath = NULL;       /* by default, not using a unix socket */\n    settings.factor = 1.25;\n    settings.chunk_size = 48;         /* space for a modest key and value */\n    settings.num_threads = 4;         /* N workers */\n    settings.num_threads_per_udp = 0;\n    settings.prefix_delimiter = ':';\n    settings.detail_enabled = 0;\n    settings.reqs_per_event = 20;\n    settings.backlog = 1024;\n    settings.binding_protocol = negotiating_prot;\n    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */\n    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */\n    settings.slab_chunk_size_max = settings.slab_page_size;\n    settings.sasl = false;\n    settings.maxconns_fast = false;\n    settings.lru_crawler = false;\n    settings.lru_crawler_sleep = 100;\n    settings.lru_crawler_tocrawl = 0;\n    settings.lru_maintainer_thread = false;\n    settings.lru_segmented = false;\n    settings.hot_lru_pct = 32;\n    settings.warm_lru_pct = 32;\n    settings.hot_max_age = 3600;\n    settings.warm_max_factor = 2.0;\n    settings.inline_ascii_response = true;\n    settings.temp_lru = false;\n    settings.temporary_ttl = 61;\n    settings.idle_timeout = 0; /* disabled */\n    settings.hashpower_init = 0;\n    settings.slab_reassign = false;\n    settings.slab_automove = 0;\n    settings.shutdown_command = false;\n    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;\n    settings.flush_enabled = true;\n    settings.dump_enabled = true;\n    settings.crawls_persleep = 1000;\n    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;\n    settings.logger_buf_size = LOGGER_BUF_SIZE;\n}\n\n/*\n * Adds a message header to a connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int add_msghdr(conn *c)\n{\n    struct msghdr *msg;\n\n    assert(c != NULL);\n\n    if (c->msgsize == c->msgused) {\n        msg = realloc(c->msglist, c->msgsize * 2 * sizeof(struct msghdr));\n        if (! msg) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->msglist = msg;\n        c->msgsize *= 2;\n    }\n\n    msg = c->msglist + c->msgused;\n\n    /* this wipes msg_iovlen, msg_control, msg_controllen, and\n       msg_flags, the last 3 of which aren't defined on solaris: */\n    memset(msg, 0, sizeof(struct msghdr));\n\n    msg->msg_iov = &c->iov[c->iovused];\n\n    if (IS_UDP(c->transport) && c->request_addr_size > 0) {\n        msg->msg_name = &c->request_addr;\n        msg->msg_namelen = c->request_addr_size;\n    }\n\n    c->msgbytes = 0;\n    c->msgused++;\n\n    if (IS_UDP(c->transport)) {\n        /* Leave room for the UDP header, which we'll fill in later. */\n        return add_iov(c, NULL, UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\nextern pthread_mutex_t conn_lock;\n\n/* Connection timeout thread bits */\nstatic pthread_t conn_timeout_tid;\n\n#define CONNS_PER_SLICE 100\n#define TIMEOUT_MSG_SIZE (1 + sizeof(int))\nstatic void *conn_timeout_thread(void *arg) {\n    int i;\n    conn *c;\n    char buf[TIMEOUT_MSG_SIZE];\n    rel_time_t oldest_last_cmd;\n    int sleep_time;\n    useconds_t timeslice = 1000000 / (max_fds / CONNS_PER_SLICE);\n\n    while(1) {\n        if (settings.verbose > 2)\n            fprintf(stderr, \"idle timeout thread at top of connection list\\n\");\n\n        oldest_last_cmd = current_time;\n\n        for (i = 0; i < max_fds; i++) {\n            if ((i % CONNS_PER_SLICE) == 0) {\n                if (settings.verbose > 2)\n                    fprintf(stderr, \"idle timeout thread sleeping for %ulus\\n\",\n                        (unsigned int)timeslice);\n                usleep(timeslice);\n            }\n\n            if (!conns[i])\n                continue;\n\n            c = conns[i];\n\n            if (!IS_TCP(c->transport))\n                continue;\n\n            if (c->state != conn_new_cmd && c->state != conn_read)\n                continue;\n\n            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {\n                buf[0] = 't';\n                memcpy(&buf[1], &i, sizeof(int));\n                if (write(c->thread->notify_send_fd, buf, TIMEOUT_MSG_SIZE)\n                    != TIMEOUT_MSG_SIZE)\n                    perror(\"Failed to write timeout to notify pipe\");\n            } else {\n                if (c->last_cmd_time < oldest_last_cmd)\n                    oldest_last_cmd = c->last_cmd_time;\n            }\n        }\n\n        /* This is the soonest we could have another connection time out */\n        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;\n        if (sleep_time <= 0)\n            sleep_time = 1;\n\n        if (settings.verbose > 2)\n            fprintf(stderr,\n                    \"idle timeout thread finished pass, sleeping for %ds\\n\",\n                    sleep_time);\n        usleep((useconds_t) sleep_time * 1000000);\n    }\n\n    return NULL;\n}\n\nstatic int start_conn_timeout_thread() {\n    int ret;\n\n    if (settings.idle_timeout == 0)\n        return -1;\n\n    if ((ret = pthread_create(&conn_timeout_tid, NULL,\n        conn_timeout_thread, NULL)) != 0) {\n        fprintf(stderr, \"Can't create idle connection timeout thread: %s\\n\",\n            strerror(ret));\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * Initializes the connections array. We don't actually allocate connection\n * structures until they're needed, so as to avoid wasting memory when the\n * maximum connection count is much higher than the actual number of\n * connections.\n *\n * This does end up wasting a few pointers' worth of memory for FDs that are\n * used for things other than connections, but that's worth it in exchange for\n * being able to directly index the conns array by FD.\n */\nstatic void conn_init(void) {\n    /* We're unlikely to see an FD much higher than maxconns. */\n    int next_fd = dup(1);\n    int headroom = 10;      /* account for extra unexpected open FDs */\n    struct rlimit rl;\n\n    max_fds = settings.maxconns + headroom + next_fd;\n\n    /* But if possible, get the actual highest FD we can possibly ever see. */\n    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {\n        max_fds = rl.rlim_max;\n    } else {\n        fprintf(stderr, \"Failed to query maximum file descriptor; \"\n                        \"falling back to maxconns\\n\");\n    }\n\n    close(next_fd);\n\n    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {\n        fprintf(stderr, \"Failed to allocate connection structures\\n\");\n        /* This is unrecoverable so bail out early. */\n        exit(1);\n    }\n}\n\nstatic const char *prot_text(enum protocol prot) {\n    char *rv = \"unknown\";\n    switch(prot) {\n        case ascii_prot:\n            rv = \"ascii\";\n            break;\n        case binary_prot:\n            rv = \"binary\";\n            break;\n        case negotiating_prot:\n            rv = \"auto-negotiate\";\n            break;\n    }\n    return rv;\n}\n\nvoid conn_close_idle(conn *c) {\n    if (settings.idle_timeout > 0 &&\n        (current_time - c->last_cmd_time) > settings.idle_timeout) {\n        if (c->state != conn_new_cmd && c->state != conn_read) {\n            if (settings.verbose > 1)\n                fprintf(stderr,\n                    \"fd %d wants to timeout, but isn't in read state\", c->sfd);\n            return;\n        }\n\n        if (settings.verbose > 1)\n            fprintf(stderr, \"Closing idle fd %d\\n\", c->sfd);\n\n        c->thread->stats.idle_kicks++;\n\n        conn_set_state(c, conn_closing);\n        drive_machine(c);\n    }\n}\n\n/* bring conn back from a sidethread. could have had its event base moved. */\nvoid conn_worker_readd(conn *c) {\n    c->ev_flags = EV_READ | EV_PERSIST;\n    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);\n    event_base_set(c->thread->base, &c->event);\n    c->state = conn_new_cmd;\n\n    if (event_add(&c->event, 0) == -1) {\n        perror(\"event_add\");\n    }\n}\n\nconn *conn_new(const int sfd, enum conn_states init_state,\n                const int event_flags,\n                const int read_buffer_size, enum network_transport transport,\n                struct event_base *base) {\n    conn *c;\n\n    assert(sfd >= 0 && sfd < max_fds);\n    c = conns[sfd];\n\n    if (NULL == c) {\n        if (!(c = (conn *)calloc(1, sizeof(conn)))) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            fprintf(stderr, \"Failed to allocate connection object\\n\");\n            return NULL;\n        }\n        MEMCACHED_CONN_CREATE(c);\n\n        c->rbuf = c->wbuf = 0;\n        c->ilist = 0;\n        c->suffixlist = 0;\n        c->iov = 0;\n        c->msglist = 0;\n        c->hdrbuf = 0;\n\n        c->rsize = read_buffer_size;\n        c->wsize = DATA_BUFFER_SIZE;\n        c->isize = ITEM_LIST_INITIAL;\n        c->suffixsize = SUFFIX_LIST_INITIAL;\n        c->iovsize = IOV_LIST_INITIAL;\n        c->msgsize = MSG_LIST_INITIAL;\n        c->hdrsize = 0;\n\n        c->rbuf = (char *)malloc((size_t)c->rsize);\n        c->wbuf = (char *)malloc((size_t)c->wsize);\n        c->ilist = (item **)malloc(sizeof(item *) * c->isize);\n        c->suffixlist = (char **)malloc(sizeof(char *) * c->suffixsize);\n        c->iov = (struct iovec *)malloc(sizeof(struct iovec) * c->iovsize);\n        c->msglist = (struct msghdr *)malloc(sizeof(struct msghdr) * c->msgsize);\n\n        if (c->rbuf == 0 || c->wbuf == 0 || c->ilist == 0 || c->iov == 0 ||\n                c->msglist == 0 || c->suffixlist == 0) {\n            conn_free(c);\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            fprintf(stderr, \"Failed to allocate buffers for connection\\n\");\n            return NULL;\n        }\n\n        STATS_LOCK();\n        stats_state.conn_structs++;\n        STATS_UNLOCK();\n\n        c->sfd = sfd;\n        conns[sfd] = c;\n    }\n\n    c->transport = transport;\n    c->protocol = settings.binding_protocol;\n\n    /* unix socket mode doesn't need this, so zeroed out.  but why\n     * is this done for every command?  presumably for UDP\n     * mode.  */\n    if (!settings.socketpath) {\n        c->request_addr_size = sizeof(c->request_addr);\n    } else {\n        c->request_addr_size = 0;\n    }\n\n    if (transport == tcp_transport && init_state == conn_new_cmd) {\n        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,\n                        &c->request_addr_size)) {\n            perror(\"getpeername\");\n            memset(&c->request_addr, 0, sizeof(c->request_addr));\n        }\n    }\n\n    if (settings.verbose > 1) {\n        if (init_state == conn_listening) {\n            fprintf(stderr, \"<%d server listening (%s)\\n\", sfd,\n                prot_text(c->protocol));\n        } else if (IS_UDP(transport)) {\n            fprintf(stderr, \"<%d server listening (udp)\\n\", sfd);\n        } else if (c->protocol == negotiating_prot) {\n            fprintf(stderr, \"<%d new auto-negotiating client connection\\n\",\n                    sfd);\n        } else if (c->protocol == ascii_prot) {\n            fprintf(stderr, \"<%d new ascii client connection.\\n\", sfd);\n        } else if (c->protocol == binary_prot) {\n            fprintf(stderr, \"<%d new binary client connection.\\n\", sfd);\n        } else {\n            fprintf(stderr, \"<%d new unknown (%d) client connection\\n\",\n                sfd, c->protocol);\n            assert(false);\n        }\n    }\n\n    c->state = init_state;\n    c->rlbytes = 0;\n    c->cmd = -1;\n    c->rbytes = c->wbytes = 0;\n    c->wcurr = c->wbuf;\n    c->rcurr = c->rbuf;\n    c->ritem = 0;\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n    c->ileft = 0;\n    c->suffixleft = 0;\n    c->iovused = 0;\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->authenticated = false;\n    c->last_cmd_time = current_time; /* initialize for idle kicker */\n\n    c->write_and_go = init_state;\n    c->write_and_free = 0;\n    c->item = 0;\n\n    c->noreply = false;\n\n    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = event_flags;\n\n    if (event_add(&c->event, 0) == -1) {\n        perror(\"event_add\");\n        return NULL;\n    }\n\n    STATS_LOCK();\n    stats_state.curr_conns++;\n    stats.total_conns++;\n    STATS_UNLOCK();\n\n    MEMCACHED_CONN_ALLOCATE(c->sfd);\n\n    return c;\n}\n\nstatic void conn_release_items(conn *c) {\n    assert(c != NULL);\n\n    if (c->item) {\n        item_remove(c->item);\n        c->item = 0;\n    }\n\n    while (c->ileft > 0) {\n        item *it = *(c->icurr);\n        assert((it->it_flags & ITEM_SLABBED) == 0);\n        item_remove(it);\n        c->icurr++;\n        c->ileft--;\n    }\n\n    if (c->suffixleft != 0) {\n        for (; c->suffixleft > 0; c->suffixleft--, c->suffixcurr++) {\n            do_cache_free(c->thread->suffix_cache, *(c->suffixcurr));\n        }\n    }\n\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n}\n\nstatic void conn_cleanup(conn *c) {\n    assert(c != NULL);\n\n    conn_release_items(c);\n\n    if (c->write_and_free) {\n        free(c->write_and_free);\n        c->write_and_free = 0;\n    }\n\n    if (c->sasl_conn) {\n        assert(settings.sasl);\n        sasl_dispose(&c->sasl_conn);\n        c->sasl_conn = NULL;\n    }\n\n    if (IS_UDP(c->transport)) {\n        conn_set_state(c, conn_read);\n    }\n}\n\n/*\n * Frees a connection.\n */\nvoid conn_free(conn *c) {\n    if (c) {\n        assert(c != NULL);\n        assert(c->sfd >= 0 && c->sfd < max_fds);\n\n        MEMCACHED_CONN_DESTROY(c);\n        conns[c->sfd] = NULL;\n        if (c->hdrbuf)\n            free(c->hdrbuf);\n        if (c->msglist)\n            free(c->msglist);\n        if (c->rbuf)\n            free(c->rbuf);\n        if (c->wbuf)\n            free(c->wbuf);\n        if (c->ilist)\n            free(c->ilist);\n        if (c->suffixlist)\n            free(c->suffixlist);\n        if (c->iov)\n            free(c->iov);\n        free(c);\n    }\n}\n\nstatic void conn_close(conn *c) {\n    assert(c != NULL);\n\n    /* delete the event, the socket and the conn */\n    event_del(&c->event);\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d connection closed.\\n\", c->sfd);\n\n    conn_cleanup(c);\n\n    MEMCACHED_CONN_RELEASE(c->sfd);\n    conn_set_state(c, conn_closed);\n    close(c->sfd);\n\n    pthread_mutex_lock(&conn_lock);\n    allow_new_conns = true;\n    pthread_mutex_unlock(&conn_lock);\n\n    STATS_LOCK();\n    stats_state.curr_conns--;\n    STATS_UNLOCK();\n\n    return;\n}\n\n/*\n * Shrinks a connection's buffers if they're too big.  This prevents\n * periodic large \"get\" requests from permanently chewing lots of server\n * memory.\n *\n * This should only be called in between requests since it can wipe output\n * buffers!\n */\nstatic void conn_shrink(conn *c) {\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport))\n        return;\n\n    if (c->rsize > READ_BUFFER_HIGHWAT && c->rbytes < DATA_BUFFER_SIZE) {\n        char *newbuf;\n\n        if (c->rcurr != c->rbuf)\n            memmove(c->rbuf, c->rcurr, (size_t)c->rbytes);\n\n        newbuf = (char *)realloc((void *)c->rbuf, DATA_BUFFER_SIZE);\n\n        if (newbuf) {\n            c->rbuf = newbuf;\n            c->rsize = DATA_BUFFER_SIZE;\n        }\n        /* TODO check other branch... */\n        c->rcurr = c->rbuf;\n    }\n\n    if (c->isize > ITEM_LIST_HIGHWAT) {\n        item **newbuf = (item**) realloc((void *)c->ilist, ITEM_LIST_INITIAL * sizeof(c->ilist[0]));\n        if (newbuf) {\n            c->ilist = newbuf;\n            c->isize = ITEM_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->msgsize > MSG_LIST_HIGHWAT) {\n        struct msghdr *newbuf = (struct msghdr *) realloc((void *)c->msglist, MSG_LIST_INITIAL * sizeof(c->msglist[0]));\n        if (newbuf) {\n            c->msglist = newbuf;\n            c->msgsize = MSG_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->iovsize > IOV_LIST_HIGHWAT) {\n        struct iovec *newbuf = (struct iovec *) realloc((void *)c->iov, IOV_LIST_INITIAL * sizeof(c->iov[0]));\n        if (newbuf) {\n            c->iov = newbuf;\n            c->iovsize = IOV_LIST_INITIAL;\n        }\n    /* TODO check return value */\n    }\n}\n\n/**\n * Convert a state name to a human readable form.\n */\nstatic const char *state_text(enum conn_states state) {\n    const char* const statenames[] = { \"conn_listening\",\n                                       \"conn_new_cmd\",\n                                       \"conn_waiting\",\n                                       \"conn_read\",\n                                       \"conn_parse_cmd\",\n                                       \"conn_write\",\n                                       \"conn_nread\",\n                                       \"conn_swallow\",\n                                       \"conn_closing\",\n                                       \"conn_mwrite\",\n                                       \"conn_closed\",\n                                       \"conn_watch\" };\n    return statenames[state];\n}\n\n/*\n * Sets a connection's current state in the state machine. Any special\n * processing that needs to happen on certain state transitions can\n * happen here.\n */\nstatic void conn_set_state(conn *c, enum conn_states state) {\n    assert(c != NULL);\n    assert(state >= conn_listening && state < conn_max_state);\n\n    if (state != c->state) {\n        if (settings.verbose > 2) {\n            fprintf(stderr, \"%d: going from %s to %s\\n\",\n                    c->sfd, state_text(c->state),\n                    state_text(state));\n        }\n\n        if (state == conn_write || state == conn_mwrite) {\n            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->wbuf, c->wbytes);\n        }\n        c->state = state;\n    }\n}\n\n/*\n * Ensures that there is room for another struct iovec in a connection's\n * iov list.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int ensure_iov_space(conn *c) {\n    assert(c != NULL);\n\n    if (c->iovused >= c->iovsize) {\n        int i, iovnum;\n        struct iovec *new_iov = (struct iovec *)realloc(c->iov,\n                                (c->iovsize * 2) * sizeof(struct iovec));\n        if (! new_iov) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->iov = new_iov;\n        c->iovsize *= 2;\n\n        /* Point all the msghdr structures at the new list. */\n        for (i = 0, iovnum = 0; i < c->msgused; i++) {\n            c->msglist[i].msg_iov = &c->iov[iovnum];\n            iovnum += c->msglist[i].msg_iovlen;\n        }\n    }\n\n    return 0;\n}\n\n\n/*\n * Adds data to the list of pending data that will be written out to a\n * connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n * Note: This is a hot path for at least ASCII protocol. While there is\n * redundant code in splitting TCP/UDP handling, any reduction in steps has a\n * large impact for TCP connections.\n */\n\nstatic int add_iov(conn *c, const void *buf, int len) {\n    struct msghdr *m;\n    int leftover;\n\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport)) {\n        do {\n            m = &c->msglist[c->msgused - 1];\n\n            /*\n             * Limit UDP packets to UDP_MAX_PAYLOAD_SIZE bytes.\n             */\n\n            /* We may need to start a new msghdr if this one is full. */\n            if (m->msg_iovlen == IOV_MAX ||\n                (c->msgbytes >= UDP_MAX_PAYLOAD_SIZE)) {\n                add_msghdr(c);\n                m = &c->msglist[c->msgused - 1];\n            }\n\n            if (ensure_iov_space(c) != 0)\n                return -1;\n\n            /* If the fragment is too big to fit in the datagram, split it up */\n            if (len + c->msgbytes > UDP_MAX_PAYLOAD_SIZE) {\n                leftover = len + c->msgbytes - UDP_MAX_PAYLOAD_SIZE;\n                len -= leftover;\n            } else {\n                leftover = 0;\n            }\n\n            m = &c->msglist[c->msgused - 1];\n            m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n            m->msg_iov[m->msg_iovlen].iov_len = len;\n\n            c->msgbytes += len;\n            c->iovused++;\n            m->msg_iovlen++;\n\n            buf = ((char *)buf) + len;\n            len = leftover;\n        } while (leftover > 0);\n    } else {\n        /* Optimized path for TCP connections */\n        m = &c->msglist[c->msgused - 1];\n        if (m->msg_iovlen == IOV_MAX) {\n            add_msghdr(c);\n            m = &c->msglist[c->msgused - 1];\n        }\n\n        if (ensure_iov_space(c) != 0)\n            return -1;\n\n        m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n        m->msg_iov[m->msg_iovlen].iov_len = len;\n        c->msgbytes += len;\n        c->iovused++;\n        m->msg_iovlen++;\n    }\n\n    return 0;\n}\n\nstatic int add_chunked_item_iovs(conn *c, item *it, int len) {\n    assert(it->it_flags & ITEM_CHUNKED);\n    item_chunk *ch = (item_chunk *) ITEM_data(it);\n    while (ch) {\n        int todo = (len > ch->used) ? ch->used : len;\n        if (add_iov(c, ch->data, todo) != 0) {\n            return -1;\n        }\n        ch = ch->next;\n        len -= todo;\n    }\n    return 0;\n}\n\n/*\n * Constructs a set of UDP headers and attaches them to the outgoing messages.\n */\nstatic int build_udp_headers(conn *c) {\n    int i;\n    unsigned char *hdr;\n\n    assert(c != NULL);\n\n    if (c->msgused > c->hdrsize) {\n        void *new_hdrbuf;\n        if (c->hdrbuf) {\n            new_hdrbuf = realloc(c->hdrbuf, c->msgused * 2 * UDP_HEADER_SIZE);\n        } else {\n            new_hdrbuf = malloc(c->msgused * 2 * UDP_HEADER_SIZE);\n        }\n\n        if (! new_hdrbuf) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->hdrbuf = (unsigned char *)new_hdrbuf;\n        c->hdrsize = c->msgused * 2;\n    }\n\n    hdr = c->hdrbuf;\n    for (i = 0; i < c->msgused; i++) {\n        c->msglist[i].msg_iov[0].iov_base = (void*)hdr;\n        c->msglist[i].msg_iov[0].iov_len = UDP_HEADER_SIZE;\n        *hdr++ = c->request_id / 256;\n        *hdr++ = c->request_id % 256;\n        *hdr++ = i / 256;\n        *hdr++ = i % 256;\n        *hdr++ = c->msgused / 256;\n        *hdr++ = c->msgused % 256;\n        *hdr++ = 0;\n        *hdr++ = 0;\n        assert((void *) hdr == (caddr_t)c->msglist[i].msg_iov[0].iov_base + UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\n\nstatic void out_string(conn *c, const char *str) {\n    size_t len;\n\n    assert(c != NULL);\n\n    if (c->noreply) {\n        if (settings.verbose > 1)\n            fprintf(stderr, \">%d NOREPLY %s\\n\", c->sfd, str);\n        c->noreply = false;\n        conn_set_state(c, conn_new_cmd);\n        return;\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \">%d %s\\n\", c->sfd, str);\n\n    /* Nuke a partial output... */\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    add_msghdr(c);\n\n    len = strlen(str);\n    if ((len + 2) > c->wsize) {\n        /* ought to be always enough. just fail for simplicity */\n        str = \"SERVER_ERROR output line too long\";\n        len = strlen(str);\n    }\n\n    memcpy(c->wbuf, str, len);\n    memcpy(c->wbuf + len, \"\\r\\n\", 2);\n    c->wbytes = len + 2;\n    c->wcurr = c->wbuf;\n\n    conn_set_state(c, conn_write);\n    c->write_and_go = conn_new_cmd;\n    return;\n}\n\n/*\n * Outputs a protocol-specific \"out of memory\" error. For ASCII clients,\n * this is equivalent to out_string().\n */\nstatic void out_of_memory(conn *c, char *ascii_error) {\n    const static char error_prefix[] = \"SERVER_ERROR \";\n    const static int error_prefix_len = sizeof(error_prefix) - 1;\n\n    if (c->protocol == binary_prot) {\n        /* Strip off the generic error prefix; it's irrelevant in binary */\n        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {\n            ascii_error += error_prefix_len;\n        }\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);\n    } else {\n        out_string(c, ascii_error);\n    }\n}\n\n/*\n * we get here after reading the value in set/add/replace commands. The command\n * has been stored in c->cmd, and the item is ready in c->item.\n */\nstatic void complete_nread_ascii(conn *c) {\n    assert(c != NULL);\n\n    item *it = c->item;\n    int comm = c->cmd;\n    enum store_item_type ret;\n    bool is_valid = false;\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    if ((it->it_flags & ITEM_CHUNKED) == 0) {\n        if (strncmp(ITEM_data(it) + it->nbytes - 2, \"\\r\\n\", 2) == 0) {\n            is_valid = true;\n        }\n    } else {\n        char buf[2];\n        /* should point to the final item chunk */\n        item_chunk *ch = (item_chunk *) c->ritem;\n        assert(ch->used != 0);\n        /* :( We need to look at the last two bytes. This could span two\n         * chunks.\n         */\n        if (ch->used > 1) {\n            buf[0] = ch->data[ch->used - 2];\n            buf[1] = ch->data[ch->used - 1];\n        } else {\n            assert(ch->prev);\n            assert(ch->used == 1);\n            buf[0] = ch->prev->data[ch->prev->used - 1];\n            buf[1] = ch->data[ch->used - 1];\n        }\n        if (strncmp(buf, \"\\r\\n\", 2) == 0) {\n            is_valid = true;\n        } else {\n            assert(1 == 0);\n        }\n    }\n\n    if (!is_valid) {\n        out_string(c, \"CLIENT_ERROR bad data chunk\");\n    } else {\n      ret = store_item(it, comm, c);\n\n#ifdef ENABLE_DTRACE\n      uint64_t cas = ITEM_get_cas(it);\n      switch (c->cmd) {\n      case NREAD_ADD:\n          MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,\n                                (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_REPLACE:\n          MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,\n                                    (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_APPEND:\n          MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,\n                                   (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_PREPEND:\n          MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,\n                                    (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_SET:\n          MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,\n                                (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_CAS:\n          MEMCACHED_COMMAND_CAS(c->sfd, ITEM_key(it), it->nkey, it->nbytes,\n                                cas);\n          break;\n      }\n#endif\n\n      switch (ret) {\n      case STORED:\n          out_string(c, \"STORED\");\n          break;\n      case EXISTS:\n          out_string(c, \"EXISTS\");\n          break;\n      case NOT_FOUND:\n          out_string(c, \"NOT_FOUND\");\n          break;\n      case NOT_STORED:\n          out_string(c, \"NOT_STORED\");\n          break;\n      default:\n          out_string(c, \"SERVER_ERROR Unhandled storage type.\");\n      }\n\n    }\n\n    item_remove(c->item);       /* release the c->item reference */\n    c->item = 0;\n}\n\n/**\n * get a pointer to the start of the request struct for the current command\n */\nstatic void* binary_get_request(conn *c) {\n    char *ret = c->rcurr;\n    ret -= (sizeof(c->binary_header) + c->binary_header.request.keylen +\n            c->binary_header.request.extlen);\n\n    assert(ret >= c->rbuf);\n    return ret;\n}\n\n/**\n * get a pointer to the key in this request\n */\nstatic char* binary_get_key(conn *c) {\n    return c->rcurr - (c->binary_header.request.keylen);\n}\n\nstatic void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {\n    protocol_binary_response_header* header;\n\n    assert(c);\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        /* This should never run out of memory because iov and msg lists\n         * have minimum sizes big enough to hold an error response.\n         */\n        out_of_memory(c, \"SERVER_ERROR out of memory adding binary header\");\n        return;\n    }\n\n    header = (protocol_binary_response_header *)c->wbuf;\n\n    header->response.magic = (uint8_t)PROTOCOL_BINARY_RES;\n    header->response.opcode = c->binary_header.request.opcode;\n    header->response.keylen = (uint16_t)htons(key_len);\n\n    header->response.extlen = (uint8_t)hdr_len;\n    header->response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES;\n    header->response.status = (uint16_t)htons(err);\n\n    header->response.bodylen = htonl(body_len);\n    header->response.opaque = c->opaque;\n    header->response.cas = htonll(c->cas);\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \">%d Writing bin response:\", c->sfd);\n        for (ii = 0; ii < sizeof(header->bytes); ++ii) {\n            if (ii % 4 == 0) {\n                fprintf(stderr, \"\\n>%d  \", c->sfd);\n            }\n            fprintf(stderr, \" 0x%02x\", header->bytes[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    add_iov(c, c->wbuf, sizeof(header->response));\n}\n\n/**\n * Writes a binary error response. If errstr is supplied, it is used as the\n * error text; otherwise a generic description of the error status code is\n * included.\n */\nstatic void write_bin_error(conn *c, protocol_binary_response_status err,\n                            const char *errstr, int swallow) {\n    size_t len;\n\n    if (!errstr) {\n        switch (err) {\n        case PROTOCOL_BINARY_RESPONSE_ENOMEM:\n            errstr = \"Out of memory\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:\n            errstr = \"Unknown command\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:\n            errstr = \"Not found\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_EINVAL:\n            errstr = \"Invalid arguments\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:\n            errstr = \"Data exists for key.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_E2BIG:\n            errstr = \"Too large.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL:\n            errstr = \"Non-numeric server-side value for incr or decr\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_NOT_STORED:\n            errstr = \"Not stored.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_AUTH_ERROR:\n            errstr = \"Auth failure.\";\n            break;\n        default:\n            assert(false);\n            errstr = \"UNHANDLED ERROR\";\n            fprintf(stderr, \">%d UNHANDLED ERROR: %d\\n\", c->sfd, err);\n        }\n    }\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \">%d Writing an error: %s\\n\", c->sfd, errstr);\n    }\n\n    len = strlen(errstr);\n    add_bin_header(c, err, 0, 0, len);\n    if (len > 0) {\n        add_iov(c, errstr, len);\n    }\n    conn_set_state(c, conn_mwrite);\n    if(swallow > 0) {\n        c->sbytes = swallow;\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n}\n\n/* Form and send a response to a command over the binary protocol */\nstatic void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {\n    if (!c->noreply || c->cmd == PROTOCOL_BINARY_CMD_GET ||\n        c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n        add_bin_header(c, 0, hlen, keylen, dlen);\n        if(dlen > 0) {\n            add_iov(c, d, dlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        conn_set_state(c, conn_new_cmd);\n    }\n}\n\nstatic void complete_incr_bin(conn *c) {\n    item *it;\n    char *key;\n    size_t nkey;\n    /* Weird magic in add_delta forces me to pad here */\n    char tmpbuf[INCR_MAX_STORAGE_LEN];\n    uint64_t cas = 0;\n\n    protocol_binary_response_incr* rsp = (protocol_binary_response_incr*)c->wbuf;\n    protocol_binary_request_incr* req = binary_get_request(c);\n\n    assert(c != NULL);\n    assert(c->wsize >= sizeof(*rsp));\n\n    /* fix byteorder in the request */\n    req->message.body.delta = ntohll(req->message.body.delta);\n    req->message.body.initial = ntohll(req->message.body.initial);\n    req->message.body.expiration = ntohl(req->message.body.expiration);\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        int i;\n        fprintf(stderr, \"incr \");\n\n        for (i = 0; i < nkey; i++) {\n            fprintf(stderr, \"%c\", key[i]);\n        }\n        fprintf(stderr, \" %lld, %llu, %d\\n\",\n                (long long)req->message.body.delta,\n                (long long)req->message.body.initial,\n                req->message.body.expiration);\n    }\n\n    if (c->binary_header.request.cas != 0) {\n        cas = c->binary_header.request.cas;\n    }\n    switch(add_delta(c, key, nkey, c->cmd == PROTOCOL_BINARY_CMD_INCREMENT,\n                     req->message.body.delta, tmpbuf,\n                     &cas)) {\n    case OK:\n        rsp->message.body.value = htonll(strtoull(tmpbuf, NULL, 10));\n        if (cas) {\n            c->cas = cas;\n        }\n        write_bin_response(c, &rsp->message.body, 0, 0,\n                           sizeof(rsp->message.body.value));\n        break;\n    case NON_NUMERIC:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL, NULL, 0);\n        break;\n    case EOM:\n        out_of_memory(c, \"SERVER_ERROR Out of memory incrementing value\");\n        break;\n    case DELTA_ITEM_NOT_FOUND:\n        if (req->message.body.expiration != 0xffffffff) {\n            /* Save some room for the response */\n            rsp->message.body.value = htonll(req->message.body.initial);\n\n            snprintf(tmpbuf, INCR_MAX_STORAGE_LEN, \"%llu\",\n                (unsigned long long)req->message.body.initial);\n            int res = strlen(tmpbuf);\n            it = item_alloc(key, nkey, 0, realtime(req->message.body.expiration),\n                            res + 2);\n\n            if (it != NULL) {\n                memcpy(ITEM_data(it), tmpbuf, res);\n                memcpy(ITEM_data(it) + res, \"\\r\\n\", 2);\n\n                if (store_item(it, NREAD_ADD, c)) {\n                    c->cas = ITEM_get_cas(it);\n                    write_bin_response(c, &rsp->message.body, 0, 0, sizeof(rsp->message.body.value));\n                } else {\n                    write_bin_error(c, PROTOCOL_BINARY_RESPONSE_NOT_STORED,\n                                    NULL, 0);\n                }\n                item_remove(it);         /* release our reference */\n            } else {\n                out_of_memory(c,\n                        \"SERVER_ERROR Out of memory allocating new item\");\n            }\n        } else {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            if (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT) {\n                c->thread->stats.incr_misses++;\n            } else {\n                c->thread->stats.decr_misses++;\n            }\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        }\n        break;\n    case DELTA_ITEM_CAS_MISMATCH:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        break;\n    }\n}\n\nstatic void complete_update_bin(conn *c) {\n    protocol_binary_response_status eno = PROTOCOL_BINARY_RESPONSE_EINVAL;\n    enum store_item_type ret = NOT_STORED;\n    assert(c != NULL);\n\n    item *it = c->item;\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    /* We don't actually receive the trailing two characters in the bin\n     * protocol, so we're going to just set them here */\n    if ((it->it_flags & ITEM_CHUNKED) == 0) {\n        *(ITEM_data(it) + it->nbytes - 2) = '\\r';\n        *(ITEM_data(it) + it->nbytes - 1) = '\\n';\n    } else {\n        assert(c->ritem);\n        item_chunk *ch = (item_chunk *) c->ritem;\n        if (ch->size == ch->used)\n            ch = ch->next;\n        assert(ch->size - ch->used >= 2);\n        ch->data[ch->used + 1] = '\\r';\n        ch->data[ch->used + 2] = '\\n';\n        ch->used += 2;\n    }\n\n    ret = store_item(it, c->cmd, c);\n\n#ifdef ENABLE_DTRACE\n    uint64_t cas = ITEM_get_cas(it);\n    switch (c->cmd) {\n    case NREAD_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,\n                              (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,\n                                  (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,\n                                 (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,\n                                 (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,\n                              (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case STORED:\n        /* Stored */\n        write_bin_response(c, NULL, 0, 0, 0);\n        break;\n    case EXISTS:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        break;\n    case NOT_FOUND:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        break;\n    case NOT_STORED:\n    case TOO_LARGE:\n    case NO_MEMORY:\n        if (c->cmd == NREAD_ADD) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n        } else if(c->cmd == NREAD_REPLACE) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n        } else {\n            eno = PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n        }\n        write_bin_error(c, eno, NULL, 0);\n    }\n\n    item_remove(c->item);       /* release the c->item reference */\n    c->item = 0;\n}\n\nstatic void process_bin_get_or_touch(conn *c) {\n    item *it;\n\n    protocol_binary_response_get* rsp = (protocol_binary_response_get*)c->wbuf;\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n    int should_touch = (c->cmd == PROTOCOL_BINARY_CMD_TOUCH ||\n                        c->cmd == PROTOCOL_BINARY_CMD_GAT ||\n                        c->cmd == PROTOCOL_BINARY_CMD_GATK);\n    int should_return_key = (c->cmd == PROTOCOL_BINARY_CMD_GETK ||\n                             c->cmd == PROTOCOL_BINARY_CMD_GATK);\n    int should_return_value = (c->cmd != PROTOCOL_BINARY_CMD_TOUCH);\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"<%d %s \", c->sfd, should_touch ? \"TOUCH\" : \"GET\");\n        if (fwrite(key, 1, nkey, stderr)) {}\n        fputc('\\n', stderr);\n    }\n\n    if (should_touch) {\n        protocol_binary_request_touch *t = binary_get_request(c);\n        time_t exptime = ntohl(t->message.body.expiration);\n\n        it = item_touch(key, nkey, realtime(exptime), c);\n    } else {\n        it = item_get(key, nkey, c, DO_UPDATE);\n    }\n\n    if (it) {\n        /* the length has two unnecessary bytes (\"\\r\\n\") */\n        uint16_t keylen = 0;\n        uint32_t bodylen = sizeof(rsp->message.body) + (it->nbytes - 2);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (should_touch) {\n            c->thread->stats.touch_cmds++;\n            c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;\n        } else {\n            c->thread->stats.get_cmds++;\n            c->thread->stats.slab_stats[ITEM_clsid(it)].get_hits++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (should_touch) {\n            MEMCACHED_COMMAND_TOUCH(c->sfd, ITEM_key(it), it->nkey,\n                                    it->nbytes, ITEM_get_cas(it));\n        } else {\n            MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                  it->nbytes, ITEM_get_cas(it));\n        }\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_TOUCH) {\n            bodylen -= it->nbytes - 2;\n        } else if (should_return_key) {\n            bodylen += nkey;\n            keylen = nkey;\n        }\n\n        add_bin_header(c, 0, sizeof(rsp->message.body), keylen, bodylen);\n        rsp->message.header.response.cas = htonll(ITEM_get_cas(it));\n\n        // add the flags\n        if (settings.inline_ascii_response) {\n            rsp->message.body.flags = htonl(strtoul(ITEM_suffix(it), NULL, 10));\n        } else {\n            rsp->message.body.flags = htonl(*((uint32_t *)ITEM_suffix(it)));\n        }\n        add_iov(c, &rsp->message.body, sizeof(rsp->message.body));\n\n        if (should_return_key) {\n            add_iov(c, ITEM_key(it), nkey);\n        }\n\n        if (should_return_value) {\n            /* Add the data minus the CRLF */\n            if ((it->it_flags & ITEM_CHUNKED) == 0) {\n                add_iov(c, ITEM_data(it), it->nbytes - 2);\n            } else {\n                add_chunked_item_iovs(c, it, it->nbytes - 2);\n            }\n        }\n\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        /* Remember this command so we can garbage collect it later */\n        c->item = it;\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (should_touch) {\n            c->thread->stats.touch_cmds++;\n            c->thread->stats.touch_misses++;\n        } else {\n            c->thread->stats.get_cmds++;\n            c->thread->stats.get_misses++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (should_touch) {\n            MEMCACHED_COMMAND_TOUCH(c->sfd, key, nkey, -1, 0);\n        } else {\n            MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n        }\n\n        if (c->noreply) {\n            conn_set_state(c, conn_new_cmd);\n        } else {\n            if (should_return_key) {\n                char *ofs = c->wbuf + sizeof(protocol_binary_response_header);\n                add_bin_header(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                        0, nkey, nkey);\n                memcpy(ofs, key, nkey);\n                add_iov(c, ofs, nkey);\n                conn_set_state(c, conn_mwrite);\n                c->write_and_go = conn_new_cmd;\n            } else {\n                write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                                NULL, 0);\n            }\n        }\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_get(key, nkey, NULL != it);\n    }\n}\n\nstatic void append_bin_stats(const char *key, const uint16_t klen,\n                             const char *val, const uint32_t vlen,\n                             conn *c) {\n    char *buf = c->stats.buffer + c->stats.offset;\n    uint32_t bodylen = klen + vlen;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = PROTOCOL_BINARY_CMD_STAT,\n        .response.keylen = (uint16_t)htons(klen),\n        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,\n        .response.bodylen = htonl(bodylen),\n        .response.opaque = c->opaque\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (klen > 0) {\n        memcpy(buf, key, klen);\n        buf += klen;\n\n        if (vlen > 0) {\n            memcpy(buf, val, vlen);\n        }\n    }\n\n    c->stats.offset += sizeof(header.response) + bodylen;\n}\n\nstatic void append_ascii_stats(const char *key, const uint16_t klen,\n                               const char *val, const uint32_t vlen,\n                               conn *c) {\n    char *pos = c->stats.buffer + c->stats.offset;\n    uint32_t nbytes = 0;\n    int remaining = c->stats.size - c->stats.offset;\n    int room = remaining - 1;\n\n    if (klen == 0 && vlen == 0) {\n        nbytes = snprintf(pos, room, \"END\\r\\n\");\n    } else if (vlen == 0) {\n        nbytes = snprintf(pos, room, \"STAT %s\\r\\n\", key);\n    } else {\n        nbytes = snprintf(pos, room, \"STAT %s %s\\r\\n\", key, val);\n    }\n\n    c->stats.offset += nbytes;\n}\n\nstatic bool grow_stats_buf(conn *c, size_t needed) {\n    size_t nsize = c->stats.size;\n    size_t available = nsize - c->stats.offset;\n    bool rv = true;\n\n    /* Special case: No buffer -- need to allocate fresh */\n    if (c->stats.buffer == NULL) {\n        nsize = 1024;\n        available = c->stats.size = c->stats.offset = 0;\n    }\n\n    while (needed > available) {\n        assert(nsize > 0);\n        nsize = nsize << 1;\n        available = nsize - c->stats.offset;\n    }\n\n    if (nsize != c->stats.size) {\n        char *ptr = realloc(c->stats.buffer, nsize);\n        if (ptr) {\n            c->stats.buffer = ptr;\n            c->stats.size = nsize;\n        } else {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            rv = false;\n        }\n    }\n\n    return rv;\n}\n\nstatic void append_stats(const char *key, const uint16_t klen,\n                  const char *val, const uint32_t vlen,\n                  const void *cookie)\n{\n    /* value without a key is invalid */\n    if (klen == 0 && vlen > 0) {\n        return ;\n    }\n\n    conn *c = (conn*)cookie;\n\n    if (c->protocol == binary_prot) {\n        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);\n        if (!grow_stats_buf(c, needed)) {\n            return ;\n        }\n        append_bin_stats(key, klen, val, vlen, c);\n    } else {\n        size_t needed = vlen + klen + 10; // 10 == \"STAT = \\r\\n\"\n        if (!grow_stats_buf(c, needed)) {\n            return ;\n        }\n        append_ascii_stats(key, klen, val, vlen, c);\n    }\n\n    assert(c->stats.offset <= c->stats.size);\n}\n\nstatic void process_bin_stat(conn *c) {\n    char *subcommand = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \"<%d STATS \", c->sfd);\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", subcommand[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (nkey == 0) {\n        /* request all statistics */\n        server_stats(&append_stats, c);\n        (void)get_stats(NULL, 0, &append_stats, c);\n    } else if (strncmp(subcommand, \"reset\", 5) == 0) {\n        stats_reset();\n    } else if (strncmp(subcommand, \"settings\", 8) == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strncmp(subcommand, \"detail\", 6) == 0) {\n        char *subcmd_pos = subcommand + 6;\n        if (strncmp(subcmd_pos, \" dump\", 5) == 0) {\n            int len;\n            char *dump_buf = stats_prefix_dump(&len);\n            if (dump_buf == NULL || len <= 0) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory generating stats\");\n                return ;\n            } else {\n                append_stats(\"detailed\", strlen(\"detailed\"), dump_buf, len, c);\n                free(dump_buf);\n            }\n        } else if (strncmp(subcmd_pos, \" on\", 3) == 0) {\n            settings.detail_enabled = 1;\n        } else if (strncmp(subcmd_pos, \" off\", 4) == 0) {\n            settings.detail_enabled = 0;\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n            return;\n        }\n    } else {\n        if (get_stats(subcommand, nkey, &append_stats, c)) {\n            if (c->stats.buffer == NULL) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory generating stats\");\n            } else {\n                write_and_free(c, c->stats.buffer, c->stats.offset);\n                c->stats.buffer = NULL;\n            }\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        }\n\n        return;\n    }\n\n    /* Append termination package and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n    if (c->stats.buffer == NULL) {\n        out_of_memory(c, \"SERVER_ERROR Out of memory preparing to send stats\");\n    } else {\n        write_and_free(c, c->stats.buffer, c->stats.offset);\n        c->stats.buffer = NULL;\n    }\n}\n\nstatic void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {\n    assert(c);\n    c->substate = next_substate;\n    c->rlbytes = c->keylen + extra;\n\n    /* Ok... do we have room for the extras and the key in the input buffer? */\n    ptrdiff_t offset = c->rcurr + sizeof(protocol_binary_request_header) - c->rbuf;\n    if (c->rlbytes > c->rsize - offset) {\n        size_t nsize = c->rsize;\n        size_t size = c->rlbytes + sizeof(protocol_binary_request_header);\n\n        while (size > nsize) {\n            nsize *= 2;\n        }\n\n        if (nsize != c->rsize) {\n            if (settings.verbose > 1) {\n                fprintf(stderr, \"%d: Need to grow buffer from %lu to %lu\\n\",\n                        c->sfd, (unsigned long)c->rsize, (unsigned long)nsize);\n            }\n            char *newm = realloc(c->rbuf, nsize);\n            if (newm == NULL) {\n                STATS_LOCK();\n                stats.malloc_fails++;\n                STATS_UNLOCK();\n                if (settings.verbose) {\n                    fprintf(stderr, \"%d: Failed to grow buffer.. closing connection\\n\",\n                            c->sfd);\n                }\n                conn_set_state(c, conn_closing);\n                return;\n            }\n\n            c->rbuf= newm;\n            /* rcurr should point to the same offset in the packet */\n            c->rcurr = c->rbuf + offset - sizeof(protocol_binary_request_header);\n            c->rsize = nsize;\n        }\n        if (c->rbuf != c->rcurr) {\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n            c->rcurr = c->rbuf;\n            if (settings.verbose > 1) {\n                fprintf(stderr, \"%d: Repack input buffer\\n\", c->sfd);\n            }\n        }\n    }\n\n    /* preserve the header in the buffer.. */\n    c->ritem = c->rcurr + sizeof(protocol_binary_request_header);\n    conn_set_state(c, conn_nread);\n}\n\n/* Just write an error message and disconnect the client */\nstatic void handle_binary_protocol_error(conn *c) {\n    write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, 0);\n    if (settings.verbose) {\n        fprintf(stderr, \"Protocol error (opcode %02x), close connection %d\\n\",\n                c->binary_header.request.opcode, c->sfd);\n    }\n    c->write_and_go = conn_closing;\n}\n\nstatic void init_sasl_conn(conn *c) {\n    assert(c);\n    /* should something else be returned? */\n    if (!settings.sasl)\n        return;\n\n    c->authenticated = false;\n\n    if (!c->sasl_conn) {\n        int result=sasl_server_new(\"memcached\",\n                                   NULL,\n                                   my_sasl_hostname[0] ? my_sasl_hostname : NULL,\n                                   NULL, NULL,\n                                   NULL, 0, &c->sasl_conn);\n        if (result != SASL_OK) {\n            if (settings.verbose) {\n                fprintf(stderr, \"Failed to initialize SASL conn.\\n\");\n            }\n            c->sasl_conn = NULL;\n        }\n    }\n}\n\nstatic void bin_list_sasl_mechs(conn *c) {\n    // Guard against a disabled SASL.\n    if (!settings.sasl) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                        c->binary_header.request.bodylen\n                        - c->binary_header.request.keylen);\n        return;\n    }\n\n    init_sasl_conn(c);\n    const char *result_string = NULL;\n    unsigned int string_length = 0;\n    int result=sasl_listmech(c->sasl_conn, NULL,\n                             \"\",   /* What to prepend the string with */\n                             \" \",  /* What to separate mechanisms with */\n                             \"\",   /* What to append to the string */\n                             &result_string, &string_length,\n                             NULL);\n    if (result != SASL_OK) {\n        /* Perhaps there's a better error for this... */\n        if (settings.verbose) {\n            fprintf(stderr, \"Failed to list SASL mechanisms.\\n\");\n        }\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        return;\n    }\n    write_bin_response(c, (char*)result_string, 0, 0, string_length);\n}\n\nstatic void process_bin_sasl_auth(conn *c) {\n    // Guard for handling disabled SASL on the server.\n    if (!settings.sasl) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                        c->binary_header.request.bodylen\n                        - c->binary_header.request.keylen);\n        return;\n    }\n\n    assert(c->binary_header.request.extlen == 0);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > MAX_SASL_MECH_LEN) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    char *key = binary_get_key(c);\n    assert(key);\n\n    item *it = item_alloc(key, nkey, 0, 0, vlen+2);\n\n    /* Can't use a chunked item for SASL authentication. */\n    if (it == 0 || (it->it_flags & ITEM_CHUNKED)) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_reading_sasl_auth_data;\n}\n\nstatic void process_bin_complete_sasl_auth(conn *c) {\n    assert(settings.sasl);\n    const char *out = NULL;\n    unsigned int outlen = 0;\n\n    assert(c->item);\n    init_sasl_conn(c);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > ((item*) c->item)->nkey) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        item_unlink(c->item);\n        return;\n    }\n\n    char mech[nkey+1];\n    memcpy(mech, ITEM_key((item*)c->item), nkey);\n    mech[nkey] = 0x00;\n\n    if (settings.verbose)\n        fprintf(stderr, \"mech:  ``%s'' with %d bytes of data\\n\", mech, vlen);\n\n    const char *challenge = vlen == 0 ? NULL : ITEM_data((item*) c->item);\n\n    if (vlen > ((item*) c->item)->nbytes) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        item_unlink(c->item);\n        return;\n    }\n\n    int result=-1;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        result = sasl_server_start(c->sasl_conn, mech,\n                                   challenge, vlen,\n                                   &out, &outlen);\n        break;\n    case PROTOCOL_BINARY_CMD_SASL_STEP:\n        result = sasl_server_step(c->sasl_conn,\n                                  challenge, vlen,\n                                  &out, &outlen);\n        break;\n    default:\n        assert(false); /* CMD should be one of the above */\n        /* This code is pretty much impossible, but makes the compiler\n           happier */\n        if (settings.verbose) {\n            fprintf(stderr, \"Unhandled command %d with challenge %s\\n\",\n                    c->cmd, challenge);\n        }\n        break;\n    }\n\n    item_unlink(c->item);\n\n    if (settings.verbose) {\n        fprintf(stderr, \"sasl result code:  %d\\n\", result);\n    }\n\n    switch(result) {\n    case SASL_OK:\n        c->authenticated = true;\n        write_bin_response(c, \"Authenticated\", 0, 0, strlen(\"Authenticated\"));\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.auth_cmds++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n        break;\n    case SASL_CONTINUE:\n        add_bin_header(c, PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE, 0, 0, outlen);\n        if(outlen > 0) {\n            add_iov(c, out, outlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        break;\n    default:\n        if (settings.verbose)\n            fprintf(stderr, \"Unknown sasl response:  %d\\n\", result);\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.auth_cmds++;\n        c->thread->stats.auth_errors++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n    }\n}\n\nstatic bool authenticated(conn *c) {\n    assert(settings.sasl);\n    bool rv = false;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_STEP:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_VERSION:         /* FALLTHROUGH */\n        rv = true;\n        break;\n    default:\n        rv = c->authenticated;\n    }\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"authenticated() in cmd 0x%02x is %s\\n\",\n                c->cmd, rv ? \"true\" : \"false\");\n    }\n\n    return rv;\n}\n\nstatic void dispatch_bin_command(conn *c) {\n    int protocol_error = 0;\n\n    uint8_t extlen = c->binary_header.request.extlen;\n    uint16_t keylen = c->binary_header.request.keylen;\n    uint32_t bodylen = c->binary_header.request.bodylen;\n\n    if (keylen > bodylen || keylen + extlen > bodylen) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    if (settings.sasl && !authenticated(c)) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n    c->noreply = true;\n\n    /* binprot supports 16bit keys, but internals are still 8bit */\n    if (keylen > KEY_MAX_LENGTH) {\n        handle_binary_protocol_error(c);\n        return;\n    }\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_SET;\n        break;\n    case PROTOCOL_BINARY_CMD_ADDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_ADD;\n        break;\n    case PROTOCOL_BINARY_CMD_REPLACEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_REPLACE;\n        break;\n    case PROTOCOL_BINARY_CMD_DELETEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DELETE;\n        break;\n    case PROTOCOL_BINARY_CMD_INCREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_INCREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_DECREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DECREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_QUITQ:\n        c->cmd = PROTOCOL_BINARY_CMD_QUIT;\n        break;\n    case PROTOCOL_BINARY_CMD_FLUSHQ:\n        c->cmd = PROTOCOL_BINARY_CMD_FLUSH;\n        break;\n    case PROTOCOL_BINARY_CMD_APPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_APPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_PREPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_PREPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_GETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GET;\n        break;\n    case PROTOCOL_BINARY_CMD_GETKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GETK;\n        break;\n    case PROTOCOL_BINARY_CMD_GATQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GAT;\n        break;\n    case PROTOCOL_BINARY_CMD_GATKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GATK;\n        break;\n    default:\n        c->noreply = false;\n    }\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_VERSION:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, VERSION, 0, 0, strlen(VERSION));\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_FLUSH:\n            if (keylen == 0 && bodylen == extlen && (extlen == 0 || extlen == 4)) {\n                bin_read_key(c, bin_read_flush_exptime, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_NOOP:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SET: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_ADD: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            if (extlen == 8 && keylen != 0 && bodylen >= (keylen + 8)) {\n                bin_read_key(c, bin_reading_set_header, 8);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_GETQ:  /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GET:   /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETKQ: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETK:\n            if (extlen == 0 && bodylen == keylen && keylen > 0) {\n                bin_read_key(c, bin_reading_get_key, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_DELETE:\n            if (keylen > 0 && extlen == 0 && bodylen == keylen) {\n                bin_read_key(c, bin_reading_del_header, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_INCREMENT:\n        case PROTOCOL_BINARY_CMD_DECREMENT:\n            if (keylen > 0 && extlen == 20 && bodylen == (keylen + extlen)) {\n                bin_read_key(c, bin_reading_incr_header, 20);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_APPEND:\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            if (keylen > 0 && extlen == 0) {\n                bin_read_key(c, bin_reading_set_header, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_STAT:\n            if (extlen == 0) {\n                bin_read_key(c, bin_reading_stat, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_QUIT:\n            if (keylen == 0 && extlen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n                c->write_and_go = conn_closing;\n                if (c->noreply) {\n                    conn_set_state(c, conn_closing);\n                }\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                bin_list_sasl_mechs(c);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        case PROTOCOL_BINARY_CMD_SASL_STEP:\n            if (extlen == 0 && keylen != 0) {\n                bin_read_key(c, bin_reading_sasl_auth, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_TOUCH:\n        case PROTOCOL_BINARY_CMD_GAT:\n        case PROTOCOL_BINARY_CMD_GATQ:\n        case PROTOCOL_BINARY_CMD_GATK:\n        case PROTOCOL_BINARY_CMD_GATKQ:\n            if (extlen == 4 && keylen != 0) {\n                bin_read_key(c, bin_reading_touch_key, 4);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        default:\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                            bodylen);\n    }\n\n    if (protocol_error)\n        handle_binary_protocol_error(c);\n}\n\nstatic void process_bin_update(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n    protocol_binary_request_set* req = binary_get_request(c);\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    /* fix byteorder in the request */\n    req->message.body.flags = ntohl(req->message.body.flags);\n    req->message.body.expiration = ntohl(req->message.body.expiration);\n\n    vlen = c->binary_header.request.bodylen - (nkey + c->binary_header.request.extlen);\n\n    if (settings.verbose > 1) {\n        int ii;\n        if (c->cmd == PROTOCOL_BINARY_CMD_ADD) {\n            fprintf(stderr, \"<%d ADD \", c->sfd);\n        } else if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            fprintf(stderr, \"<%d SET \", c->sfd);\n        } else {\n            fprintf(stderr, \"<%d REPLACE \", c->sfd);\n        }\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", key[ii]);\n        }\n\n        fprintf(stderr, \" Value len is %d\", vlen);\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, req->message.body.flags,\n            realtime(req->message.body.expiration), vlen+2);\n\n    if (it == 0) {\n        enum store_item_type status;\n        if (! item_size_ok(nkey, req->message.body.flags, vlen + 2)) {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_E2BIG, NULL, vlen);\n            status = TOO_LARGE;\n        } else {\n            out_of_memory(c, \"SERVER_ERROR Out of memory allocating item\");\n            /* This error generating method eats the swallow value. Add here. */\n            c->sbytes = vlen;\n            status = NO_MEMORY;\n        }\n        /* FIXME: losing c->cmd since it's translated below. refactor? */\n        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,\n                NULL, status, 0, key, nkey, it->exptime, ITEM_clsid(it));\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            it = item_get(key, nkey, c, DONT_UPDATE);\n            if (it) {\n                item_unlink(it);\n                item_remove(it);\n            }\n        }\n\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    ITEM_set_cas(it, c->binary_header.request.cas);\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_ADD:\n            c->cmd = NREAD_ADD;\n            break;\n        case PROTOCOL_BINARY_CMD_SET:\n            c->cmd = NREAD_SET;\n            break;\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            c->cmd = NREAD_REPLACE;\n            break;\n        default:\n            assert(0);\n    }\n\n    if (ITEM_get_cas(it) != 0) {\n        c->cmd = NREAD_CAS;\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_read_set_value;\n}\n\nstatic void process_bin_append_prepend(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n    vlen = c->binary_header.request.bodylen - nkey;\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"Value len is %d\\n\", vlen);\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, 0, 0, vlen+2);\n\n    if (it == 0) {\n        if (! item_size_ok(nkey, 0, vlen + 2)) {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_E2BIG, NULL, vlen);\n        } else {\n            out_of_memory(c, \"SERVER_ERROR Out of memory allocating item\");\n            /* OOM calls eat the swallow value. Add here. */\n            c->sbytes = vlen;\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    ITEM_set_cas(it, c->binary_header.request.cas);\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_APPEND:\n            c->cmd = NREAD_APPEND;\n            break;\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            c->cmd = NREAD_PREPEND;\n            break;\n        default:\n            assert(0);\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_read_set_value;\n}\n\nstatic void process_bin_flush(conn *c) {\n    time_t exptime = 0;\n    protocol_binary_request_flush* req = binary_get_request(c);\n    rel_time_t new_oldest = 0;\n\n    if (!settings.flush_enabled) {\n      // flush_all is not allowed but we log it on stats\n      write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n      return;\n    }\n\n    if (c->binary_header.request.extlen == sizeof(req->message.body)) {\n        exptime = ntohl(req->message.body.expiration);\n    }\n\n    if (exptime > 0) {\n        new_oldest = realtime(exptime);\n    } else {\n        new_oldest = current_time;\n    }\n    if (settings.use_cas) {\n        settings.oldest_live = new_oldest - 1;\n        if (settings.oldest_live <= current_time)\n            settings.oldest_cas = get_cas_id();\n    } else {\n        settings.oldest_live = new_oldest;\n    }\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.flush_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    write_bin_response(c, NULL, 0, 0, 0);\n}\n\nstatic void process_bin_delete(conn *c) {\n    item *it;\n\n    protocol_binary_request_delete* req = binary_get_request(c);\n\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    assert(c != NULL);\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \"Deleting \");\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", key[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n\n    it = item_get(key, nkey, c, DONT_UPDATE);\n    if (it) {\n        uint64_t cas = ntohll(req->message.header.request.cas);\n        if (cas == 0 || cas == ITEM_get_cas(it)) {\n            MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n            item_unlink(it);\n            write_bin_response(c, NULL, 0, 0, 0);\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        }\n        item_remove(it);      /* release our reference */\n    } else {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.delete_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n    }\n}\n\nstatic void complete_nread_binary(conn *c) {\n    assert(c != NULL);\n    assert(c->cmd >= 0);\n\n    switch(c->substate) {\n    case bin_reading_set_header:\n        if (c->cmd == PROTOCOL_BINARY_CMD_APPEND ||\n                c->cmd == PROTOCOL_BINARY_CMD_PREPEND) {\n            process_bin_append_prepend(c);\n        } else {\n            process_bin_update(c);\n        }\n        break;\n    case bin_read_set_value:\n        complete_update_bin(c);\n        break;\n    case bin_reading_get_key:\n    case bin_reading_touch_key:\n        process_bin_get_or_touch(c);\n        break;\n    case bin_reading_stat:\n        process_bin_stat(c);\n        break;\n    case bin_reading_del_header:\n        process_bin_delete(c);\n        break;\n    case bin_reading_incr_header:\n        complete_incr_bin(c);\n        break;\n    case bin_read_flush_exptime:\n        process_bin_flush(c);\n        break;\n    case bin_reading_sasl_auth:\n        process_bin_sasl_auth(c);\n        break;\n    case bin_reading_sasl_auth_data:\n        process_bin_complete_sasl_auth(c);\n        break;\n    default:\n        fprintf(stderr, \"Not handling substate %d\\n\", c->substate);\n        assert(0);\n    }\n}\n\nstatic void reset_cmd_handler(conn *c) {\n    c->cmd = -1;\n    c->substate = bin_no_state;\n    if(c->item != NULL) {\n        item_remove(c->item);\n        c->item = NULL;\n    }\n    conn_shrink(c);\n    if (c->rbytes > 0) {\n        conn_set_state(c, conn_parse_cmd);\n    } else {\n        conn_set_state(c, conn_waiting);\n    }\n}\n\nstatic void complete_nread(conn *c) {\n    assert(c != NULL);\n    assert(c->protocol == ascii_prot\n           || c->protocol == binary_prot);\n\n    if (c->protocol == ascii_prot) {\n        complete_nread_ascii(c);\n    } else if (c->protocol == binary_prot) {\n        complete_nread_binary(c);\n    }\n}\n\n/* Destination must always be chunked */\n/* This should be part of item.c */\nstatic int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {\n    item_chunk *dch = (item_chunk *) ITEM_data(d_it);\n    /* Advance dch until we find free space */\n    while (dch->size == dch->used) {\n        if (dch->next) {\n            dch = dch->next;\n        } else {\n            break;\n        }\n    }\n\n    if (s_it->it_flags & ITEM_CHUNKED) {\n        int remain = len;\n        item_chunk *sch = (item_chunk *) ITEM_data(s_it);\n        int copied = 0;\n        /* Fills dch's to capacity, not straight copy sch in case data is\n         * being added or removed (ie append/prepend)\n         */\n        while (sch && dch && remain) {\n            assert(dch->used <= dch->size);\n            int todo = (dch->size - dch->used < sch->used - copied)\n                ? dch->size - dch->used : sch->used - copied;\n            if (remain < todo)\n                todo = remain;\n            memcpy(dch->data + dch->used, sch->data + copied, todo);\n            dch->used += todo;\n            copied += todo;\n            remain -= todo;\n            assert(dch->used <= dch->size);\n            if (dch->size == dch->used) {\n                item_chunk *tch = do_item_alloc_chunk(dch, remain);\n                if (tch) {\n                    dch = tch;\n                } else {\n                    return -1;\n                }\n            }\n            assert(copied <= sch->used);\n            if (copied == sch->used) {\n                copied = 0;\n                sch = sch->next;\n            }\n        }\n        /* assert that the destination had enough space for the source */\n        assert(remain == 0);\n    } else {\n        int done = 0;\n        /* Fill dch's via a non-chunked item. */\n        while (len > done && dch) {\n            int todo = (dch->size - dch->used < len - done)\n                ? dch->size - dch->used : len - done;\n            //assert(dch->size - dch->used != 0);\n            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);\n            done += todo;\n            dch->used += todo;\n            assert(dch->used <= dch->size);\n            if (dch->size == dch->used) {\n                item_chunk *tch = do_item_alloc_chunk(dch, len - done);\n                if (tch) {\n                    dch = tch;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        assert(len == done);\n    }\n    return 0;\n}\n\nstatic int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {\n    if (comm == NREAD_APPEND) {\n        if (new_it->it_flags & ITEM_CHUNKED) {\n            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||\n                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {\n                return -1;\n            }\n        } else {\n            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);\n            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);\n        }\n    } else {\n        /* NREAD_PREPEND */\n        if (new_it->it_flags & ITEM_CHUNKED) {\n            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||\n                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {\n                return -1;\n            }\n        } else {\n            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);\n            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);\n        }\n    }\n    return 0;\n}\n\n/*\n * Stores an item in the cache according to the semantics of one of the set\n * commands. In threaded mode, this is protected by the cache lock.\n *\n * Returns the state of storage.\n */\nenum store_item_type do_store_item(item *it, int comm, conn *c, const uint32_t hv) {\n    char *key = ITEM_key(it);\n    item *old_it = do_item_get(key, it->nkey, hv, c, DONT_UPDATE);\n    enum store_item_type stored = NOT_STORED;\n\n    item *new_it = NULL;\n    uint32_t flags;\n\n    if (old_it != NULL && comm == NREAD_ADD) {\n        /* add only adds a nonexistent item, but promote to head of LRU */\n        do_item_update(old_it);\n    } else if (!old_it && (comm == NREAD_REPLACE\n        || comm == NREAD_APPEND || comm == NREAD_PREPEND))\n    {\n        /* replace only replaces an existing value; don't store */\n    } else if (comm == NREAD_CAS) {\n        /* validate cas operation */\n        if(old_it == NULL) {\n            // LRU expired\n            stored = NOT_FOUND;\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.cas_misses++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n        }\n        else if (ITEM_get_cas(it) == ITEM_get_cas(old_it)) {\n            // cas validates\n            // it and old_it may belong to different classes.\n            // I'm updating the stats for the one that's getting pushed out\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            item_replace(old_it, it, hv);\n            stored = STORED;\n        } else {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            if(settings.verbose > 1) {\n                fprintf(stderr, \"CAS:  failure: expected %llu, got %llu\\n\",\n                        (unsigned long long)ITEM_get_cas(old_it),\n                        (unsigned long long)ITEM_get_cas(it));\n            }\n            stored = EXISTS;\n        }\n    } else {\n        int failed_alloc = 0;\n        /*\n         * Append - combine new and old record into single one. Here it's\n         * atomic and thread-safe.\n         */\n        if (comm == NREAD_APPEND || comm == NREAD_PREPEND) {\n            /*\n             * Validate CAS\n             */\n            if (ITEM_get_cas(it) != 0) {\n                // CAS much be equal\n                if (ITEM_get_cas(it) != ITEM_get_cas(old_it)) {\n                    stored = EXISTS;\n                }\n            }\n\n            if (stored == NOT_STORED) {\n                /* we have it and old_it here - alloc memory to hold both */\n                /* flags was already lost - so recover them from ITEM_suffix(it) */\n\n                if (settings.inline_ascii_response) {\n                    flags = (uint32_t) strtoul(ITEM_suffix(old_it), (char **) NULL, 10);\n                } else {\n                    flags = *((uint32_t *)ITEM_suffix(old_it));\n                }\n\n                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);\n\n                /* copy data from it and old_it to new_it */\n                if (new_it == NULL || _store_item_copy_data(comm, old_it, new_it, it) == -1) {\n                    failed_alloc = 1;\n                    stored = NOT_STORED;\n                    // failed data copy, free up.\n                    if (new_it != NULL)\n                        item_remove(new_it);\n                } else {\n                    it = new_it;\n                }\n            }\n        }\n\n        if (stored == NOT_STORED && failed_alloc == 0) {\n            if (old_it != NULL)\n                item_replace(old_it, it, hv);\n            else\n                do_item_link(it, hv);\n\n            c->cas = ITEM_get_cas(it);\n\n            stored = STORED;\n        }\n    }\n\n    if (old_it != NULL)\n        do_item_remove(old_it);         /* release our reference */\n    if (new_it != NULL)\n        do_item_remove(new_it);\n\n    if (stored == STORED) {\n        c->cas = ITEM_get_cas(it);\n    }\n    LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,\n            stored, comm, ITEM_key(it), it->nkey, it->exptime, ITEM_clsid(it));\n\n    return stored;\n}\n\ntypedef struct token_s {\n    char *value;\n    size_t length;\n} token_t;\n\n#define COMMAND_TOKEN 0\n#define SUBCOMMAND_TOKEN 1\n#define KEY_TOKEN 1\n\n#define MAX_TOKENS 8\n\n/*\n * Tokenize the command string by replacing whitespace with '\\0' and update\n * the token array tokens with pointer to start of each token and length.\n * Returns total number of tokens.  The last valid token is the terminal\n * token (value points to the first unprocessed character of the string and\n * length zero).\n *\n * Usage example:\n *\n *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {\n *      for(int ix = 0; tokens[ix].length != 0; ix++) {\n *          ...\n *      }\n *      ncommand = tokens[ix].value - command;\n *      command  = tokens[ix].value;\n *   }\n */\nstatic size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {\n    char *s, *e;\n    size_t ntokens = 0;\n    size_t len = strlen(command);\n    unsigned int i = 0;\n\n    assert(command != NULL && tokens != NULL && max_tokens > 1);\n\n    s = e = command;\n    for (i = 0; i < len; i++) {\n        if (*e == ' ') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n                *e = '\\0';\n                if (ntokens == max_tokens - 1) {\n                    e++;\n                    s = e; /* so we don't add an extra token */\n                    break;\n                }\n            }\n            s = e + 1;\n        }\n        e++;\n    }\n\n    if (s != e) {\n        tokens[ntokens].value = s;\n        tokens[ntokens].length = e - s;\n        ntokens++;\n    }\n\n    /*\n     * If we scanned the whole string, the terminal value pointer is null,\n     * otherwise it is the first unprocessed character.\n     */\n    tokens[ntokens].value =  *e == '\\0' ? NULL : e;\n    tokens[ntokens].length = 0;\n    ntokens++;\n\n    return ntokens;\n}\n\n/* set up a connection to write a buffer then free it, used for stats */\nstatic void write_and_free(conn *c, char *buf, int bytes) {\n    if (buf) {\n        c->write_and_free = buf;\n        c->wcurr = buf;\n        c->wbytes = bytes;\n        conn_set_state(c, conn_write);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n    }\n}\n\nstatic inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)\n{\n    int noreply_index = ntokens - 2;\n\n    /*\n      NOTE: this function is not the first place where we are going to\n      send the reply.  We could send it instead from process_command()\n      if the request line has wrong number of tokens.  However parsing\n      malformed line for \"noreply\" option is not reliable anyway, so\n      it can't be helped.\n    */\n    if (tokens[noreply_index].value\n        && strcmp(tokens[noreply_index].value, \"noreply\") == 0) {\n        c->noreply = true;\n    }\n    return c->noreply;\n}\n\nvoid append_stat(const char *name, ADD_STAT add_stats, conn *c,\n                 const char *fmt, ...) {\n    char val_str[STAT_VAL_LEN];\n    int vlen;\n    va_list ap;\n\n    assert(name);\n    assert(add_stats);\n    assert(c);\n    assert(fmt);\n\n    va_start(ap, fmt);\n    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);\n    va_end(ap);\n\n    add_stats(name, strlen(name), val_str, vlen, c);\n}\n\ninline static void process_stats_detail(conn *c, const char *command) {\n    assert(c != NULL);\n\n    if (strcmp(command, \"on\") == 0) {\n        settings.detail_enabled = 1;\n        out_string(c, \"OK\");\n    }\n    else if (strcmp(command, \"off\") == 0) {\n        settings.detail_enabled = 0;\n        out_string(c, \"OK\");\n    }\n    else if (strcmp(command, \"dump\") == 0) {\n        int len;\n        char *stats = stats_prefix_dump(&len);\n        write_and_free(c, stats, len);\n    }\n    else {\n        out_string(c, \"CLIENT_ERROR usage: stats detail on|off|dump\");\n    }\n}\n\n/* return server specific stats only */\nstatic void server_stats(ADD_STAT add_stats, conn *c) {\n    pid_t pid = getpid();\n    rel_time_t now = current_time;\n\n    struct thread_stats thread_stats;\n    threadlocal_stats_aggregate(&thread_stats);\n    struct slab_stats slab_stats;\n    slab_stats_aggregate(&thread_stats, &slab_stats);\n\n#ifndef WIN32\n    struct rusage usage;\n    getrusage(RUSAGE_SELF, &usage);\n#endif /* !WIN32 */\n\n    STATS_LOCK();\n\n    APPEND_STAT(\"pid\", \"%lu\", (long)pid);\n    APPEND_STAT(\"uptime\", \"%u\", now - ITEM_UPDATE_INTERVAL);\n    APPEND_STAT(\"time\", \"%ld\", now + (long)process_started);\n    APPEND_STAT(\"version\", \"%s\", VERSION);\n    APPEND_STAT(\"libevent\", \"%s\", event_get_version());\n    APPEND_STAT(\"pointer_size\", \"%d\", (int)(8 * sizeof(void *)));\n\n#ifndef WIN32\n    append_stat(\"rusage_user\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_utime.tv_sec,\n                (long)usage.ru_utime.tv_usec);\n    append_stat(\"rusage_system\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_stime.tv_sec,\n                (long)usage.ru_stime.tv_usec);\n#endif /* !WIN32 */\n\n    APPEND_STAT(\"curr_connections\", \"%llu\", (unsigned long long)stats_state.curr_conns - 1);\n    APPEND_STAT(\"total_connections\", \"%llu\", (unsigned long long)stats.total_conns);\n    if (settings.maxconns_fast) {\n        APPEND_STAT(\"rejected_connections\", \"%llu\", (unsigned long long)stats.rejected_conns);\n    }\n    APPEND_STAT(\"connection_structures\", \"%u\", stats_state.conn_structs);\n    APPEND_STAT(\"reserved_fds\", \"%u\", stats_state.reserved_fds);\n    APPEND_STAT(\"cmd_get\", \"%llu\", (unsigned long long)thread_stats.get_cmds);\n    APPEND_STAT(\"cmd_set\", \"%llu\", (unsigned long long)slab_stats.set_cmds);\n    APPEND_STAT(\"cmd_flush\", \"%llu\", (unsigned long long)thread_stats.flush_cmds);\n    APPEND_STAT(\"cmd_touch\", \"%llu\", (unsigned long long)thread_stats.touch_cmds);\n    APPEND_STAT(\"get_hits\", \"%llu\", (unsigned long long)slab_stats.get_hits);\n    APPEND_STAT(\"get_misses\", \"%llu\", (unsigned long long)thread_stats.get_misses);\n    APPEND_STAT(\"get_expired\", \"%llu\", (unsigned long long)thread_stats.get_expired);\n    APPEND_STAT(\"get_flushed\", \"%llu\", (unsigned long long)thread_stats.get_flushed);\n    APPEND_STAT(\"delete_misses\", \"%llu\", (unsigned long long)thread_stats.delete_misses);\n    APPEND_STAT(\"delete_hits\", \"%llu\", (unsigned long long)slab_stats.delete_hits);\n    APPEND_STAT(\"incr_misses\", \"%llu\", (unsigned long long)thread_stats.incr_misses);\n    APPEND_STAT(\"incr_hits\", \"%llu\", (unsigned long long)slab_stats.incr_hits);\n    APPEND_STAT(\"decr_misses\", \"%llu\", (unsigned long long)thread_stats.decr_misses);\n    APPEND_STAT(\"decr_hits\", \"%llu\", (unsigned long long)slab_stats.decr_hits);\n    APPEND_STAT(\"cas_misses\", \"%llu\", (unsigned long long)thread_stats.cas_misses);\n    APPEND_STAT(\"cas_hits\", \"%llu\", (unsigned long long)slab_stats.cas_hits);\n    APPEND_STAT(\"cas_badval\", \"%llu\", (unsigned long long)slab_stats.cas_badval);\n    APPEND_STAT(\"touch_hits\", \"%llu\", (unsigned long long)slab_stats.touch_hits);\n    APPEND_STAT(\"touch_misses\", \"%llu\", (unsigned long long)thread_stats.touch_misses);\n    APPEND_STAT(\"auth_cmds\", \"%llu\", (unsigned long long)thread_stats.auth_cmds);\n    APPEND_STAT(\"auth_errors\", \"%llu\", (unsigned long long)thread_stats.auth_errors);\n    if (settings.idle_timeout) {\n        APPEND_STAT(\"idle_kicks\", \"%llu\", (unsigned long long)thread_stats.idle_kicks);\n    }\n    APPEND_STAT(\"bytes_read\", \"%llu\", (unsigned long long)thread_stats.bytes_read);\n    APPEND_STAT(\"bytes_written\", \"%llu\", (unsigned long long)thread_stats.bytes_written);\n    APPEND_STAT(\"limit_maxbytes\", \"%llu\", (unsigned long long)settings.maxbytes);\n    APPEND_STAT(\"accepting_conns\", \"%u\", stats_state.accepting_conns);\n    APPEND_STAT(\"listen_disabled_num\", \"%llu\", (unsigned long long)stats.listen_disabled_num);\n    APPEND_STAT(\"time_in_listen_disabled_us\", \"%llu\", stats.time_in_listen_disabled_us);\n    APPEND_STAT(\"threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"conn_yields\", \"%llu\", (unsigned long long)thread_stats.conn_yields);\n    APPEND_STAT(\"hash_power_level\", \"%u\", stats_state.hash_power_level);\n    APPEND_STAT(\"hash_bytes\", \"%llu\", (unsigned long long)stats_state.hash_bytes);\n    APPEND_STAT(\"hash_is_expanding\", \"%u\", stats_state.hash_is_expanding);\n    if (settings.slab_reassign) {\n        APPEND_STAT(\"slab_reassign_rescues\", \"%llu\", stats.slab_reassign_rescues);\n        APPEND_STAT(\"slab_reassign_chunk_rescues\", \"%llu\", stats.slab_reassign_chunk_rescues);\n        APPEND_STAT(\"slab_reassign_evictions_nomem\", \"%llu\", stats.slab_reassign_evictions_nomem);\n        APPEND_STAT(\"slab_reassign_inline_reclaim\", \"%llu\", stats.slab_reassign_inline_reclaim);\n        APPEND_STAT(\"slab_reassign_busy_items\", \"%llu\", stats.slab_reassign_busy_items);\n        APPEND_STAT(\"slab_reassign_running\", \"%u\", stats_state.slab_reassign_running);\n        APPEND_STAT(\"slabs_moved\", \"%llu\", stats.slabs_moved);\n    }\n    if (settings.lru_crawler) {\n        APPEND_STAT(\"lru_crawler_running\", \"%u\", stats_state.lru_crawler_running);\n        APPEND_STAT(\"lru_crawler_starts\", \"%u\", stats.lru_crawler_starts);\n    }\n    if (settings.lru_maintainer_thread) {\n        APPEND_STAT(\"lru_maintainer_juggles\", \"%llu\", (unsigned long long)stats.lru_maintainer_juggles);\n    }\n    APPEND_STAT(\"malloc_fails\", \"%llu\",\n                (unsigned long long)stats.malloc_fails);\n    APPEND_STAT(\"log_worker_dropped\", \"%llu\", (unsigned long long)stats.log_worker_dropped);\n    APPEND_STAT(\"log_worker_written\", \"%llu\", (unsigned long long)stats.log_worker_written);\n    APPEND_STAT(\"log_watcher_skipped\", \"%llu\", (unsigned long long)stats.log_watcher_skipped);\n    APPEND_STAT(\"log_watcher_sent\", \"%llu\", (unsigned long long)stats.log_watcher_sent);\n    STATS_UNLOCK();\n}\n\nstatic void process_stat_settings(ADD_STAT add_stats, void *c) {\n    assert(add_stats);\n    APPEND_STAT(\"maxbytes\", \"%llu\", (unsigned long long)settings.maxbytes);\n    APPEND_STAT(\"maxconns\", \"%d\", settings.maxconns);\n    APPEND_STAT(\"tcpport\", \"%d\", settings.port);\n    APPEND_STAT(\"udpport\", \"%d\", settings.udpport);\n    APPEND_STAT(\"inter\", \"%s\", settings.inter ? settings.inter : \"NULL\");\n    APPEND_STAT(\"verbosity\", \"%d\", settings.verbose);\n    APPEND_STAT(\"oldest\", \"%lu\", (unsigned long)settings.oldest_live);\n    APPEND_STAT(\"evictions\", \"%s\", settings.evict_to_free ? \"on\" : \"off\");\n    APPEND_STAT(\"domain_socket\", \"%s\",\n                settings.socketpath ? settings.socketpath : \"NULL\");\n    APPEND_STAT(\"umask\", \"%o\", settings.access);\n    APPEND_STAT(\"growth_factor\", \"%.2f\", settings.factor);\n    APPEND_STAT(\"chunk_size\", \"%d\", settings.chunk_size);\n    APPEND_STAT(\"num_threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"num_threads_per_udp\", \"%d\", settings.num_threads_per_udp);\n    APPEND_STAT(\"stat_key_prefix\", \"%c\", settings.prefix_delimiter);\n    APPEND_STAT(\"detail_enabled\", \"%s\",\n                settings.detail_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"reqs_per_event\", \"%d\", settings.reqs_per_event);\n    APPEND_STAT(\"cas_enabled\", \"%s\", settings.use_cas ? \"yes\" : \"no\");\n    APPEND_STAT(\"tcp_backlog\", \"%d\", settings.backlog);\n    APPEND_STAT(\"binding_protocol\", \"%s\",\n                prot_text(settings.binding_protocol));\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", settings.sasl ? \"yes\" : \"no\");\n    APPEND_STAT(\"item_size_max\", \"%d\", settings.item_size_max);\n    APPEND_STAT(\"maxconns_fast\", \"%s\", settings.maxconns_fast ? \"yes\" : \"no\");\n    APPEND_STAT(\"hashpower_init\", \"%d\", settings.hashpower_init);\n    APPEND_STAT(\"slab_reassign\", \"%s\", settings.slab_reassign ? \"yes\" : \"no\");\n    APPEND_STAT(\"slab_automove\", \"%d\", settings.slab_automove);\n    APPEND_STAT(\"slab_chunk_max\", \"%d\", settings.slab_chunk_size_max);\n    APPEND_STAT(\"lru_crawler\", \"%s\", settings.lru_crawler ? \"yes\" : \"no\");\n    APPEND_STAT(\"lru_crawler_sleep\", \"%d\", settings.lru_crawler_sleep);\n    APPEND_STAT(\"lru_crawler_tocrawl\", \"%lu\", (unsigned long)settings.lru_crawler_tocrawl);\n    APPEND_STAT(\"tail_repair_time\", \"%d\", settings.tail_repair_time);\n    APPEND_STAT(\"flush_enabled\", \"%s\", settings.flush_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"dump_enabled\", \"%s\", settings.dump_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"hash_algorithm\", \"%s\", settings.hash_algorithm);\n    APPEND_STAT(\"lru_maintainer_thread\", \"%s\", settings.lru_maintainer_thread ? \"yes\" : \"no\");\n    APPEND_STAT(\"lru_segmented\", \"%s\", settings.lru_segmented ? \"yes\" : \"no\");\n    APPEND_STAT(\"hot_lru_pct\", \"%d\", settings.hot_lru_pct);\n    APPEND_STAT(\"warm_lru_pct\", \"%d\", settings.warm_lru_pct);\n    APPEND_STAT(\"hot_max_age\", \"%u\", settings.hot_max_age);\n    APPEND_STAT(\"warm_max_factor\", \"%.2f\", settings.warm_max_factor);\n    APPEND_STAT(\"temp_lru\", \"%s\", settings.temp_lru ? \"yes\" : \"no\");\n    APPEND_STAT(\"temporary_ttl\", \"%u\", settings.temporary_ttl);\n    APPEND_STAT(\"idle_timeout\", \"%d\", settings.idle_timeout);\n    APPEND_STAT(\"watcher_logbuf_size\", \"%u\", settings.logger_watcher_buf_size);\n    APPEND_STAT(\"worker_logbuf_size\", \"%u\", settings.logger_buf_size);\n    APPEND_STAT(\"track_sizes\", \"%s\", item_stats_sizes_status() ? \"yes\" : \"no\");\n    APPEND_STAT(\"inline_ascii_response\", \"%s\", settings.inline_ascii_response ? \"yes\" : \"no\");\n}\n\nstatic void conn_to_str(const conn *c, char *buf) {\n    char addr_text[MAXPATHLEN];\n\n    if (!c) {\n        strcpy(buf, \"<null>\");\n    } else if (c->state == conn_closed) {\n        strcpy(buf, \"<closed>\");\n    } else {\n        const char *protoname = \"?\";\n        struct sockaddr_in6 local_addr;\n        struct sockaddr *addr = (void *)&c->request_addr;\n        int af;\n        unsigned short port = 0;\n\n        /* For listen ports and idle UDP ports, show listen address */\n        if (c->state == conn_listening ||\n                (IS_UDP(c->transport) &&\n                 c->state == conn_read)) {\n            socklen_t local_addr_len = sizeof(local_addr);\n\n            if (getsockname(c->sfd,\n                        (struct sockaddr *)&local_addr,\n                        &local_addr_len) == 0) {\n                addr = (struct sockaddr *)&local_addr;\n            }\n        }\n\n        af = addr->sa_family;\n        addr_text[0] = '\\0';\n\n        switch (af) {\n            case AF_INET:\n                (void) inet_ntop(af,\n                        &((struct sockaddr_in *)addr)->sin_addr,\n                        addr_text,\n                        sizeof(addr_text) - 1);\n                port = ntohs(((struct sockaddr_in *)addr)->sin_port);\n                protoname = IS_UDP(c->transport) ? \"udp\" : \"tcp\";\n                break;\n\n            case AF_INET6:\n                addr_text[0] = '[';\n                addr_text[1] = '\\0';\n                if (inet_ntop(af,\n                        &((struct sockaddr_in6 *)addr)->sin6_addr,\n                        addr_text + 1,\n                        sizeof(addr_text) - 2)) {\n                    strcat(addr_text, \"]\");\n                }\n                port = ntohs(((struct sockaddr_in6 *)addr)->sin6_port);\n                protoname = IS_UDP(c->transport) ? \"udp6\" : \"tcp6\";\n                break;\n\n            case AF_UNIX:\n                strncpy(addr_text,\n                        ((struct sockaddr_un *)addr)->sun_path,\n                        sizeof(addr_text) - 1);\n                addr_text[sizeof(addr_text)-1] = '\\0';\n                protoname = \"unix\";\n                break;\n        }\n\n        if (strlen(addr_text) < 2) {\n            /* Most likely this is a connected UNIX-domain client which\n             * has no peer socket address, but there's no portable way\n             * to tell for sure.\n             */\n            sprintf(addr_text, \"<AF %d>\", af);\n        }\n\n        if (port) {\n            sprintf(buf, \"%s:%s:%u\", protoname, addr_text, port);\n        } else {\n            sprintf(buf, \"%s:%s\", protoname, addr_text);\n        }\n    }\n}\n\nstatic void process_stats_conns(ADD_STAT add_stats, void *c) {\n    int i;\n    char key_str[STAT_KEY_LEN];\n    char val_str[STAT_VAL_LEN];\n    char conn_name[MAXPATHLEN + sizeof(\"unix:\")];\n    int klen = 0, vlen = 0;\n\n    assert(add_stats);\n\n    for (i = 0; i < max_fds; i++) {\n        if (conns[i]) {\n            /* This is safe to do unlocked because conns are never freed; the\n             * worst that'll happen will be a minor inconsistency in the\n             * output -- not worth the complexity of the locking that'd be\n             * required to prevent it.\n             */\n            if (conns[i]->state != conn_closed) {\n                conn_to_str(conns[i], conn_name);\n\n                APPEND_NUM_STAT(i, \"addr\", \"%s\", conn_name);\n                APPEND_NUM_STAT(i, \"state\", \"%s\",\n                        state_text(conns[i]->state));\n                APPEND_NUM_STAT(i, \"secs_since_last_cmd\", \"%d\",\n                        current_time - conns[i]->last_cmd_time);\n            }\n        }\n    }\n}\n\nstatic void process_stat(conn *c, token_t *tokens, const size_t ntokens) {\n    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;\n    assert(c != NULL);\n\n    if (ntokens < 2) {\n        out_string(c, \"CLIENT_ERROR bad command line\");\n        return;\n    }\n\n    if (ntokens == 2) {\n        server_stats(&append_stats, c);\n        (void)get_stats(NULL, 0, &append_stats, c);\n    } else if (strcmp(subcommand, \"reset\") == 0) {\n        stats_reset();\n        out_string(c, \"RESET\");\n        return ;\n    } else if (strcmp(subcommand, \"detail\") == 0) {\n        /* NOTE: how to tackle detail with binary? */\n        if (ntokens < 4)\n            process_stats_detail(c, \"\");  /* outputs the error message */\n        else\n            process_stats_detail(c, tokens[2].value);\n        /* Output already generated */\n        return ;\n    } else if (strcmp(subcommand, \"settings\") == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strcmp(subcommand, \"cachedump\") == 0) {\n        char *buf;\n        unsigned int bytes, id, limit = 0;\n\n        if (!settings.dump_enabled) {\n            out_string(c, \"CLIENT_ERROR stats cachedump not allowed\");\n            return;\n        }\n\n        if (ntokens < 5) {\n            out_string(c, \"CLIENT_ERROR bad command line\");\n            return;\n        }\n\n        if (!safe_strtoul(tokens[2].value, &id) ||\n            !safe_strtoul(tokens[3].value, &limit)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n\n        if (id >= MAX_NUMBER_OF_SLAB_CLASSES) {\n            out_string(c, \"CLIENT_ERROR Illegal slab id\");\n            return;\n        }\n\n        buf = item_cachedump(id, limit, &bytes);\n        write_and_free(c, buf, bytes);\n        return ;\n    } else if (strcmp(subcommand, \"conns\") == 0) {\n        process_stats_conns(&append_stats, c);\n    } else {\n        /* getting here means that the subcommand is either engine specific or\n           is invalid. query the engine and see. */\n        if (get_stats(subcommand, strlen(subcommand), &append_stats, c)) {\n            if (c->stats.buffer == NULL) {\n                out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n            } else {\n                write_and_free(c, c->stats.buffer, c->stats.offset);\n                c->stats.buffer = NULL;\n            }\n        } else {\n            out_string(c, \"ERROR\");\n        }\n        return ;\n    }\n\n    /* append terminator and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n\n    if (c->stats.buffer == NULL) {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n    } else {\n        write_and_free(c, c->stats.buffer, c->stats.offset);\n        c->stats.buffer = NULL;\n    }\n}\n\nstatic inline int make_ascii_get_suffix(char *suffix, item *it, bool return_cas) {\n    char *p;\n    if (!settings.inline_ascii_response) {\n        *suffix = ' ';\n        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), suffix+1);\n        *p = ' ';\n        p = itoa_u32(it->nbytes-2, p+1);\n    } else {\n        p = suffix;\n    }\n    if (return_cas) {\n        *p = ' ';\n        p = itoa_u64(ITEM_get_cas(it), p+1);\n    }\n    *p = '\\r';\n    *(p+1) = '\\n';\n    *(p+2) = '\\0';\n    return (p - suffix) + 2;\n}\n\n/* ntokens is overwritten here... shrug.. */\nstatic inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {\n    char *key;\n    size_t nkey;\n    int i = 0;\n    item *it;\n    token_t *key_token = &tokens[KEY_TOKEN];\n    char *suffix;\n    assert(c != NULL);\n\n    do {\n        while(key_token->length != 0) {\n\n            key = key_token->value;\n            nkey = key_token->length;\n\n            if(nkey > KEY_MAX_LENGTH) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                while (i-- > 0) {\n                    item_remove(*(c->ilist + i));\n                }\n                return;\n            }\n\n            it = item_get(key, nkey, c, DO_UPDATE);\n            if (settings.detail_enabled) {\n                stats_prefix_record_get(key, nkey, NULL != it);\n            }\n            if (it) {\n                if (i >= c->isize) {\n                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);\n                    if (new_list) {\n                        c->isize *= 2;\n                        c->ilist = new_list;\n                    } else {\n                        STATS_LOCK();\n                        stats.malloc_fails++;\n                        STATS_UNLOCK();\n                        item_remove(it);\n                        break;\n                    }\n                }\n\n                /*\n                 * Construct the response. Each hit adds three elements to the\n                 * outgoing data list:\n                 *   \"VALUE \"\n                 *   key\n                 *   \" \" + flags + \" \" + data length + \"\\r\\n\" + data (with \\r\\n)\n                 */\n\n                if (return_cas || !settings.inline_ascii_response)\n                {\n                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                        it->nbytes, ITEM_get_cas(it));\n                  /* Goofy mid-flight realloc. */\n                  if (i >= c->suffixsize) {\n                    char **new_suffix_list = realloc(c->suffixlist,\n                                           sizeof(char *) * c->suffixsize * 2);\n                    if (new_suffix_list) {\n                        c->suffixsize *= 2;\n                        c->suffixlist  = new_suffix_list;\n                    } else {\n                        STATS_LOCK();\n                        stats.malloc_fails++;\n                        STATS_UNLOCK();\n                        item_remove(it);\n                        break;\n                    }\n                  }\n\n                  suffix = do_cache_alloc(c->thread->suffix_cache);\n                  if (suffix == NULL) {\n                      STATS_LOCK();\n                      stats.malloc_fails++;\n                      STATS_UNLOCK();\n                      out_of_memory(c, \"SERVER_ERROR out of memory making CAS suffix\");\n                      item_remove(it);\n                      while (i-- > 0) {\n                          item_remove(*(c->ilist + i));\n                      }\n                      return;\n                  }\n                  *(c->suffixlist + i) = suffix;\n                  int suffix_len = make_ascii_get_suffix(suffix, it, return_cas);\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, ITEM_key(it), it->nkey) != 0 ||\n                      (settings.inline_ascii_response && add_iov(c, ITEM_suffix(it), it->nsuffix - 2) != 0) ||\n                      add_iov(c, suffix, suffix_len) != 0)\n                      {\n                          item_remove(it);\n                          break;\n                      }\n                  if ((it->it_flags & ITEM_CHUNKED) == 0) {\n                      add_iov(c, ITEM_data(it), it->nbytes);\n                  } else if (add_chunked_item_iovs(c, it, it->nbytes) != 0) {\n                      item_remove(it);\n                      break;\n                  }\n                }\n                else\n                {\n                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                        it->nbytes, ITEM_get_cas(it));\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, ITEM_key(it), it->nkey) != 0)\n                      {\n                          item_remove(it);\n                          break;\n                      }\n                  if ((it->it_flags & ITEM_CHUNKED) == 0)\n                      {\n                          if (add_iov(c, ITEM_suffix(it), it->nsuffix + it->nbytes) != 0)\n                          {\n                              item_remove(it);\n                              break;\n                          }\n                      } else if (add_iov(c, ITEM_suffix(it), it->nsuffix) != 0 ||\n                                 add_chunked_item_iovs(c, it, it->nbytes) != 0) {\n                          item_remove(it);\n                          break;\n                      }\n                }\n\n\n                if (settings.verbose > 1) {\n                    int ii;\n                    fprintf(stderr, \">%d sending key \", c->sfd);\n                    for (ii = 0; ii < it->nkey; ++ii) {\n                        fprintf(stderr, \"%c\", key[ii]);\n                    }\n                    fprintf(stderr, \"\\n\");\n                }\n\n                /* item_get() has incremented it->refcount for us */\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.slab_stats[ITEM_clsid(it)].get_hits++;\n                c->thread->stats.get_cmds++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                *(c->ilist + i) = it;\n                i++;\n\n            } else {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.get_misses++;\n                c->thread->stats.get_cmds++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n            }\n\n            key_token++;\n        }\n\n        /*\n         * If the command string hasn't been fully processed, get the next set\n         * of tokens.\n         */\n        if(key_token->value != NULL) {\n            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);\n            key_token = tokens;\n        }\n\n    } while(key_token->value != NULL);\n\n    c->icurr = c->ilist;\n    c->ileft = i;\n    if (return_cas || !settings.inline_ascii_response) {\n        c->suffixcurr = c->suffixlist;\n        c->suffixleft = i;\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \">%d END\\n\", c->sfd);\n\n    /*\n        If the loop was terminated because of out-of-memory, it is not\n        reliable to add END\\r\\n to the buffer, because it might not end\n        in \\r\\n. So we send SERVER_ERROR instead.\n    */\n    if (key_token->value != NULL || add_iov(c, \"END\\r\\n\", 5) != 0\n        || (IS_UDP(c->transport) && build_udp_headers(c) != 0)) {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing get response\");\n    }\n    else {\n        conn_set_state(c, conn_mwrite);\n        c->msgcurr = 0;\n    }\n}\n\nstatic void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {\n    char *key;\n    size_t nkey;\n    unsigned int flags;\n    int32_t exptime_int = 0;\n    time_t exptime;\n    int vlen;\n    uint64_t req_cas_id=0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)\n           && safe_strtol(tokens[3].value, &exptime_int)\n           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    /* Ubuntu 8.04 breaks when I pass exptime to safe_strtol */\n    exptime = exptime_int;\n\n    /* Negative exptimes can underflow and end up immortal. realtime() will\n       immediately expire values that are greater than REALTIME_MAXDELTA, but less\n       than process_started, so lets aim for that. */\n    if (exptime < 0)\n        exptime = REALTIME_MAXDELTA + 1;\n\n    // does cas value exist?\n    if (handle_cas) {\n        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n    }\n\n    if (vlen < 0 || vlen > (INT_MAX - 2)) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n    vlen += 2;\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, flags, realtime(exptime), vlen);\n\n    if (it == 0) {\n        enum store_item_type status;\n        if (! item_size_ok(nkey, flags, vlen)) {\n            out_string(c, \"SERVER_ERROR object too large for cache\");\n            status = TOO_LARGE;\n        } else {\n            out_of_memory(c, \"SERVER_ERROR out of memory storing object\");\n            status = NO_MEMORY;\n        }\n        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,\n                NULL, status, comm, key, nkey, 0, 0);\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        c->sbytes = vlen;\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (comm == NREAD_SET) {\n            it = item_get(key, nkey, c, DONT_UPDATE);\n            if (it) {\n                item_unlink(it);\n                item_remove(it);\n            }\n        }\n\n        return;\n    }\n    ITEM_set_cas(it, req_cas_id);\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = it->nbytes;\n    c->cmd = comm;\n    conn_set_state(c, conn_nread);\n}\n\nstatic void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {\n    char *key;\n    size_t nkey;\n    int32_t exptime_int = 0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtol(tokens[2].value, &exptime_int)) {\n        out_string(c, \"CLIENT_ERROR invalid exptime argument\");\n        return;\n    }\n\n    it = item_touch(key, nkey, realtime(exptime_int), c);\n    if (it) {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.touch_cmds++;\n        c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"TOUCHED\");\n        item_remove(it);\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.touch_cmds++;\n        c->thread->stats.touch_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n    }\n}\n\nstatic void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {\n    char temp[INCR_MAX_STORAGE_LEN];\n    uint64_t delta;\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtoull(tokens[2].value, &delta)) {\n        out_string(c, \"CLIENT_ERROR invalid numeric delta argument\");\n        return;\n    }\n\n    switch(add_delta(c, key, nkey, incr, delta, temp, NULL)) {\n    case OK:\n        out_string(c, temp);\n        break;\n    case NON_NUMERIC:\n        out_string(c, \"CLIENT_ERROR cannot increment or decrement non-numeric value\");\n        break;\n    case EOM:\n        out_of_memory(c, \"SERVER_ERROR out of memory\");\n        break;\n    case DELTA_ITEM_NOT_FOUND:\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (incr) {\n            c->thread->stats.incr_misses++;\n        } else {\n            c->thread->stats.decr_misses++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case DELTA_ITEM_CAS_MISMATCH:\n        break; /* Should never get here */\n    }\n}\n\n/*\n * adds a delta value to a numeric item.\n *\n * c     connection requesting the operation\n * it    item to adjust\n * incr  true to increment value, false to decrement\n * delta amount to adjust value by\n * buf   buffer for response string\n *\n * returns a response string to send back to the client.\n */\nenum delta_result_type do_add_delta(conn *c, const char *key, const size_t nkey,\n                                    const bool incr, const int64_t delta,\n                                    char *buf, uint64_t *cas,\n                                    const uint32_t hv) {\n    char *ptr;\n    uint64_t value;\n    int res;\n    item *it;\n\n    it = do_item_get(key, nkey, hv, c, DONT_UPDATE);\n    if (!it) {\n        return DELTA_ITEM_NOT_FOUND;\n    }\n\n    /* Can't delta zero byte values. 2-byte are the \"\\r\\n\" */\n    /* Also can't delta for chunked items. Too large to be a number */\n    if (it->nbytes <= 2 || (it->it_flags & ITEM_CHUNKED) != 0) {\n        return NON_NUMERIC;\n    }\n\n    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {\n        do_item_remove(it);\n        return DELTA_ITEM_CAS_MISMATCH;\n    }\n\n    ptr = ITEM_data(it);\n\n    if (!safe_strtoull(ptr, &value)) {\n        do_item_remove(it);\n        return NON_NUMERIC;\n    }\n\n    if (incr) {\n        value += delta;\n        MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);\n    } else {\n        if(delta > value) {\n            value = 0;\n        } else {\n            value -= delta;\n        }\n        MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);\n    }\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    if (incr) {\n        c->thread->stats.slab_stats[ITEM_clsid(it)].incr_hits++;\n    } else {\n        c->thread->stats.slab_stats[ITEM_clsid(it)].decr_hits++;\n    }\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    snprintf(buf, INCR_MAX_STORAGE_LEN, \"%llu\", (unsigned long long)value);\n    res = strlen(buf);\n    /* refcount == 2 means we are the only ones holding the item, and it is\n     * linked. We hold the item's lock in this function, so refcount cannot\n     * increase. */\n    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */\n        /* When changing the value without replacing the item, we\n           need to update the CAS on the existing item. */\n        /* We also need to fiddle it in the sizes tracker in case the tracking\n         * was enabled at runtime, since it relies on the CAS value to know\n         * whether to remove an item or not. */\n        item_stats_sizes_remove(it);\n        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);\n        item_stats_sizes_add(it);\n        memcpy(ITEM_data(it), buf, res);\n        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);\n        do_item_update(it);\n    } else if (it->refcount > 1) {\n        item *new_it;\n        uint32_t flags;\n        if (settings.inline_ascii_response) {\n            flags = (uint32_t) strtoul(ITEM_suffix(it)+1, (char **) NULL, 10);\n        } else {\n            flags = *((uint32_t *)ITEM_suffix(it));\n        }\n        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);\n        if (new_it == 0) {\n            do_item_remove(it);\n            return EOM;\n        }\n        memcpy(ITEM_data(new_it), buf, res);\n        memcpy(ITEM_data(new_it) + res, \"\\r\\n\", 2);\n        item_replace(it, new_it, hv);\n        // Overwrite the older item's CAS with our new CAS since we're\n        // returning the CAS of the old item below.\n        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);\n        do_item_remove(new_it);       /* release our reference */\n    } else {\n        /* Should never get here. This means we somehow fetched an unlinked\n         * item. TODO: Add a counter? */\n        if (settings.verbose) {\n            fprintf(stderr, \"Tried to do incr/decr on invalid item\\n\");\n        }\n        if (it->refcount == 1)\n            do_item_remove(it);\n        return DELTA_ITEM_NOT_FOUND;\n    }\n\n    if (cas) {\n        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */\n    }\n    do_item_remove(it);         /* release our reference */\n    return OK;\n}\n\nstatic void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {\n    char *key;\n    size_t nkey;\n    item *it;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, \"0\") == 0;\n        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);\n        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))\n            || (ntokens == 5 && hold_is_zero && sets_noreply);\n        if (!valid) {\n            out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                       \"Usage: delete <key> [noreply]\");\n            return;\n        }\n    }\n\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if(nkey > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n\n    it = item_get(key, nkey, c, DONT_UPDATE);\n    if (it) {\n        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        item_unlink(it);\n        item_remove(it);      /* release our reference */\n        out_string(c, \"DELETED\");\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.delete_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n    }\n}\n\nstatic void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    level = strtoul(tokens[1].value, NULL, 10);\n    settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;\n    out_string(c, \"OK\");\n    return;\n}\n\nstatic void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    level = strtoul(tokens[2].value, NULL, 10);\n    if (level == 0) {\n        settings.slab_automove = 0;\n    } else if (level == 1 || level == 2) {\n        settings.slab_automove = level;\n    } else {\n        out_string(c, \"ERROR\");\n        return;\n    }\n    out_string(c, \"OK\");\n    return;\n}\n\n/* TODO: decide on syntax for sampling? */\nstatic void process_watch_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint16_t f = 0;\n    int x;\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n    if (ntokens > 2) {\n        for (x = COMMAND_TOKEN + 1; x < ntokens - 1; x++) {\n            if ((strcmp(tokens[x].value, \"rawcmds\") == 0)) {\n                f |= LOG_RAWCMDS;\n            } else if ((strcmp(tokens[x].value, \"evictions\") == 0)) {\n                f |= LOG_EVICTIONS;\n            } else if ((strcmp(tokens[x].value, \"fetchers\") == 0)) {\n                f |= LOG_FETCHERS;\n            } else if ((strcmp(tokens[x].value, \"mutations\") == 0)) {\n                f |= LOG_MUTATIONS;\n            } else if ((strcmp(tokens[x].value, \"sysevents\") == 0)) {\n                f |= LOG_SYSEVENTS;\n            } else {\n                out_string(c, \"ERROR\");\n                return;\n            }\n        }\n    } else {\n        f |= LOG_FETCHERS;\n    }\n\n    switch(logger_add_watcher(c, c->sfd, f)) {\n        case LOGGER_ADD_WATCHER_TOO_MANY:\n            out_string(c, \"WATCHER_TOO_MANY log watcher limit reached\");\n            break;\n        case LOGGER_ADD_WATCHER_FAILED:\n            out_string(c, \"WATCHER_FAILED failed to add log watcher\");\n            break;\n        case LOGGER_ADD_WATCHER_OK:\n            conn_set_state(c, conn_watch);\n            event_del(&c->event);\n            break;\n    }\n}\n\nstatic void process_memlimit_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint32_t memlimit;\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (!safe_strtoul(tokens[1].value, &memlimit)) {\n        out_string(c, \"ERROR\");\n    } else {\n        if (memlimit < 8) {\n            out_string(c, \"MEMLIMIT_TOO_SMALL cannot set maxbytes to less than 8m\");\n        } else {\n            if (memlimit > 1000000000) {\n                out_string(c, \"MEMLIMIT_ADJUST_FAILED input value is megabytes not bytes\");\n            } else if (slabs_adjust_mem_limit((size_t) memlimit * 1024 * 1024)) {\n                if (settings.verbose > 0) {\n                    fprintf(stderr, \"maxbytes adjusted to %llum\\n\", (unsigned long long)memlimit);\n                }\n\n                out_string(c, \"OK\");\n            } else {\n                out_string(c, \"MEMLIMIT_ADJUST_FAILED out of bounds or unable to adjust\");\n            }\n        }\n    }\n}\n\nstatic void process_lru_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint32_t pct_hot;\n    uint32_t pct_warm;\n    uint32_t hot_age;\n    int32_t ttl;\n    double factor;\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (strcmp(tokens[1].value, \"tune\") == 0 && ntokens >= 7) {\n        if (!safe_strtoul(tokens[2].value, &pct_hot) ||\n            !safe_strtoul(tokens[3].value, &pct_warm) ||\n            !safe_strtoul(tokens[4].value, &hot_age) ||\n            !safe_strtod(tokens[5].value, &factor)) {\n            out_string(c, \"ERROR\");\n        } else {\n            if (pct_hot + pct_warm > 80) {\n                out_string(c, \"ERROR hot and warm pcts must not exceed 80\");\n            } else if (factor <= 0) {\n                out_string(c, \"ERROR cold age factor must be greater than 0\");\n            } else {\n                settings.hot_lru_pct = pct_hot;\n                settings.warm_lru_pct = pct_warm;\n                settings.hot_max_age = hot_age;\n                settings.warm_max_factor = factor;\n                out_string(c, \"OK\");\n            }\n        }\n    } else if (strcmp(tokens[1].value, \"mode\") == 0 && ntokens >= 3 &&\n               settings.lru_maintainer_thread) {\n        if (strcmp(tokens[2].value, \"flat\") == 0) {\n            settings.lru_segmented = false;\n            out_string(c, \"OK\");\n        } else if (strcmp(tokens[2].value, \"segmented\") == 0) {\n            settings.lru_segmented = true;\n            out_string(c, \"OK\");\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (strcmp(tokens[1].value, \"temp_ttl\") == 0 && ntokens >= 3 &&\n               settings.lru_maintainer_thread) {\n        if (!safe_strtol(tokens[2].value, &ttl)) {\n            out_string(c, \"ERROR\");\n        } else {\n            if (ttl < 0) {\n                settings.temp_lru = false;\n            } else {\n                settings.temp_lru = true;\n                settings.temporary_ttl = ttl;\n            }\n            out_string(c, \"OK\");\n        }\n    } else {\n        out_string(c, \"ERROR\");\n    }\n}\n\nstatic void process_command(conn *c, char *command) {\n\n    token_t tokens[MAX_TOKENS];\n    size_t ntokens;\n    int comm;\n\n    assert(c != NULL);\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d %s\\n\", c->sfd, command);\n\n    /*\n     * for commands set/add/replace, we build an item and read the data\n     * directly into it, then continue in nread_complete().\n     */\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        out_of_memory(c, \"SERVER_ERROR out of memory preparing response\");\n        return;\n    }\n\n    ntokens = tokenize_command(command, tokens, MAX_TOKENS);\n    if (ntokens >= 3 &&\n        ((strcmp(tokens[COMMAND_TOKEN].value, \"get\") == 0) ||\n         (strcmp(tokens[COMMAND_TOKEN].value, \"bget\") == 0))) {\n\n        process_get_command(c, tokens, ntokens, false);\n\n    } else if ((ntokens == 6 || ntokens == 7) &&\n               ((strcmp(tokens[COMMAND_TOKEN].value, \"add\") == 0 && (comm = NREAD_ADD)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"set\") == 0 && (comm = NREAD_SET)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"replace\") == 0 && (comm = NREAD_REPLACE)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"prepend\") == 0 && (comm = NREAD_PREPEND)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"append\") == 0 && (comm = NREAD_APPEND)) )) {\n\n        process_update_command(c, tokens, ntokens, comm, false);\n\n    } else if ((ntokens == 7 || ntokens == 8) && (strcmp(tokens[COMMAND_TOKEN].value, \"cas\") == 0 && (comm = NREAD_CAS))) {\n\n        process_update_command(c, tokens, ntokens, comm, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"incr\") == 0)) {\n\n        process_arithmetic_command(c, tokens, ntokens, 1);\n\n    } else if (ntokens >= 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"gets\") == 0)) {\n\n        process_get_command(c, tokens, ntokens, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"decr\") == 0)) {\n\n        process_arithmetic_command(c, tokens, ntokens, 0);\n\n    } else if (ntokens >= 3 && ntokens <= 5 && (strcmp(tokens[COMMAND_TOKEN].value, \"delete\") == 0)) {\n\n        process_delete_command(c, tokens, ntokens);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"touch\") == 0)) {\n\n        process_touch_command(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"stats\") == 0)) {\n\n        process_stat(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && ntokens <= 4 && (strcmp(tokens[COMMAND_TOKEN].value, \"flush_all\") == 0)) {\n        time_t exptime = 0;\n        rel_time_t new_oldest = 0;\n\n        set_noreply_maybe(c, tokens, ntokens);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.flush_cmds++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (!settings.flush_enabled) {\n            // flush_all is not allowed but we log it on stats\n            out_string(c, \"CLIENT_ERROR flush_all not allowed\");\n            return;\n        }\n\n        if (ntokens != (c->noreply ? 3 : 2)) {\n            exptime = strtol(tokens[1].value, NULL, 10);\n            if(errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n        }\n\n        /*\n          If exptime is zero realtime() would return zero too, and\n          realtime(exptime) - 1 would overflow to the max unsigned\n          value.  So we process exptime == 0 the same way we do when\n          no delay is given at all.\n        */\n        if (exptime > 0) {\n            new_oldest = realtime(exptime);\n        } else { /* exptime == 0 */\n            new_oldest = current_time;\n        }\n\n        if (settings.use_cas) {\n            settings.oldest_live = new_oldest - 1;\n            if (settings.oldest_live <= current_time)\n                settings.oldest_cas = get_cas_id();\n        } else {\n            settings.oldest_live = new_oldest;\n        }\n        out_string(c, \"OK\");\n        return;\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"version\") == 0)) {\n\n        out_string(c, \"VERSION \" VERSION);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"quit\") == 0)) {\n\n        conn_set_state(c, conn_closing);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"shutdown\") == 0)) {\n\n        if (settings.shutdown_command) {\n            conn_set_state(c, conn_closing);\n            raise(SIGINT);\n        } else {\n            out_string(c, \"ERROR: shutdown not enabled\");\n        }\n\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"slabs\") == 0) {\n        if (ntokens == 5 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"reassign\") == 0) {\n            int src, dst, rv;\n\n            if (settings.slab_reassign == false) {\n                out_string(c, \"CLIENT_ERROR slab reassignment disabled\");\n                return;\n            }\n\n            src = strtol(tokens[2].value, NULL, 10);\n            dst = strtol(tokens[3].value, NULL, 10);\n\n            if (errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n\n            rv = slabs_reassign(src, dst);\n            switch (rv) {\n            case REASSIGN_OK:\n                out_string(c, \"OK\");\n                break;\n            case REASSIGN_RUNNING:\n                out_string(c, \"BUSY currently processing reassign request\");\n                break;\n            case REASSIGN_BADCLASS:\n                out_string(c, \"BADCLASS invalid src or dst class id\");\n                break;\n            case REASSIGN_NOSPARE:\n                out_string(c, \"NOSPARE source class has no spare pages\");\n                break;\n            case REASSIGN_SRC_DST_SAME:\n                out_string(c, \"SAME src and dst class are identical\");\n                break;\n            }\n            return;\n        } else if (ntokens == 4 &&\n            (strcmp(tokens[COMMAND_TOKEN + 1].value, \"automove\") == 0)) {\n            process_slabs_automove_command(c, tokens, ntokens);\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"lru_crawler\") == 0) {\n        if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"crawl\") == 0) {\n            int rv;\n            if (settings.lru_crawler == false) {\n                out_string(c, \"CLIENT_ERROR lru crawler disabled\");\n                return;\n            }\n\n            rv = lru_crawler_crawl(tokens[2].value, CRAWLER_EXPIRED, NULL, 0);\n            switch(rv) {\n            case CRAWLER_OK:\n                out_string(c, \"OK\");\n                break;\n            case CRAWLER_RUNNING:\n                out_string(c, \"BUSY currently processing crawler request\");\n                break;\n            case CRAWLER_BADCLASS:\n                out_string(c, \"BADCLASS invalid class id\");\n                break;\n            case CRAWLER_NOTSTARTED:\n                out_string(c, \"NOTSTARTED no items to crawl\");\n                break;\n            case CRAWLER_ERROR:\n                out_string(c, \"ERROR an unknown error happened\");\n                break;\n            }\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"metadump\") == 0) {\n            if (settings.lru_crawler == false) {\n                out_string(c, \"CLIENT_ERROR lru crawler disabled\");\n                return;\n            }\n            if (!settings.dump_enabled) {\n                out_string(c, \"ERROR metadump not allowed\");\n                return;\n            }\n\n            int rv = lru_crawler_crawl(tokens[2].value, CRAWLER_METADUMP,\n                    c, c->sfd);\n            switch(rv) {\n                case CRAWLER_OK:\n                    out_string(c, \"OK\");\n                    // TODO: Don't reuse conn_watch here.\n                    conn_set_state(c, conn_watch);\n                    event_del(&c->event);\n                    break;\n                case CRAWLER_RUNNING:\n                    out_string(c, \"BUSY currently processing crawler request\");\n                    break;\n                case CRAWLER_BADCLASS:\n                    out_string(c, \"BADCLASS invalid class id\");\n                    break;\n                case CRAWLER_NOTSTARTED:\n                    out_string(c, \"NOTSTARTED no items to crawl\");\n                    break;\n                case CRAWLER_ERROR:\n                    out_string(c, \"ERROR an unknown error happened\");\n                    break;\n            }\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"tocrawl\") == 0) {\n            uint32_t tocrawl;\n             if (!safe_strtoul(tokens[2].value, &tocrawl)) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n            settings.lru_crawler_tocrawl = tocrawl;\n            out_string(c, \"OK\");\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"sleep\") == 0) {\n            uint32_t tosleep;\n            if (!safe_strtoul(tokens[2].value, &tosleep)) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n            if (tosleep > 1000000) {\n                out_string(c, \"CLIENT_ERROR sleep must be one second or less\");\n                return;\n            }\n            settings.lru_crawler_sleep = tosleep;\n            out_string(c, \"OK\");\n            return;\n        } else if (ntokens == 3) {\n            if ((strcmp(tokens[COMMAND_TOKEN + 1].value, \"enable\") == 0)) {\n                if (start_item_crawler_thread() == 0) {\n                    out_string(c, \"OK\");\n                } else {\n                    out_string(c, \"ERROR failed to start lru crawler thread\");\n                }\n            } else if ((strcmp(tokens[COMMAND_TOKEN + 1].value, \"disable\") == 0)) {\n                if (stop_item_crawler_thread() == 0) {\n                    out_string(c, \"OK\");\n                } else {\n                    out_string(c, \"ERROR failed to stop lru crawler thread\");\n                }\n            } else {\n                out_string(c, \"ERROR\");\n            }\n            return;\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"watch\") == 0) {\n        process_watch_command(c, tokens, ntokens);\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"cache_memlimit\") == 0)) {\n        process_memlimit_command(c, tokens, ntokens);\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"verbosity\") == 0)) {\n        process_verbosity_command(c, tokens, ntokens);\n    } else if (ntokens >= 3 && strcmp(tokens[COMMAND_TOKEN].value, \"lru\") == 0) {\n        process_lru_command(c, tokens, ntokens);\n    } else {\n        out_string(c, \"ERROR\");\n    }\n    return;\n}\n\n/*\n * if we have a complete line in the buffer, process it.\n */\nstatic int try_read_command(conn *c) {\n    assert(c != NULL);\n    assert(c->rcurr <= (c->rbuf + c->rsize));\n    assert(c->rbytes > 0);\n\n    if (c->protocol == negotiating_prot || c->transport == udp_transport)  {\n        if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {\n            c->protocol = binary_prot;\n        } else {\n            c->protocol = ascii_prot;\n        }\n\n        if (settings.verbose > 1) {\n            fprintf(stderr, \"%d: Client using the %s protocol\\n\", c->sfd,\n                    prot_text(c->protocol));\n        }\n    }\n\n    if (c->protocol == binary_prot) {\n        /* Do we have the complete packet header? */\n        if (c->rbytes < sizeof(c->binary_header)) {\n            /* need more data! */\n            return 0;\n        } else {\n#ifdef NEED_ALIGN\n            if (((long)(c->rcurr)) % 8 != 0) {\n                /* must realign input buffer */\n                memmove(c->rbuf, c->rcurr, c->rbytes);\n                c->rcurr = c->rbuf;\n                if (settings.verbose > 1) {\n                    fprintf(stderr, \"%d: Realign input buffer\\n\", c->sfd);\n                }\n            }\n#endif\n            protocol_binary_request_header* req;\n            req = (protocol_binary_request_header*)c->rcurr;\n\n            if (settings.verbose > 1) {\n                /* Dump the packet before we convert it to host order */\n                int ii;\n                fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd);\n                for (ii = 0; ii < sizeof(req->bytes); ++ii) {\n                    if (ii % 4 == 0) {\n                        fprintf(stderr, \"\\n<%d   \", c->sfd);\n                    }\n                    fprintf(stderr, \" 0x%02x\", req->bytes[ii]);\n                }\n                fprintf(stderr, \"\\n\");\n            }\n\n            c->binary_header = *req;\n            c->binary_header.request.keylen = ntohs(req->request.keylen);\n            c->binary_header.request.bodylen = ntohl(req->request.bodylen);\n            c->binary_header.request.cas = ntohll(req->request.cas);\n\n            if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ) {\n                if (settings.verbose) {\n                    fprintf(stderr, \"Invalid magic:  %x\\n\",\n                            c->binary_header.request.magic);\n                }\n                conn_set_state(c, conn_closing);\n                return -1;\n            }\n\n            c->msgcurr = 0;\n            c->msgused = 0;\n            c->iovused = 0;\n            if (add_msghdr(c) != 0) {\n                out_of_memory(c,\n                        \"SERVER_ERROR Out of memory allocating headers\");\n                return 0;\n            }\n\n            c->cmd = c->binary_header.request.opcode;\n            c->keylen = c->binary_header.request.keylen;\n            c->opaque = c->binary_header.request.opaque;\n            /* clear the returned cas value */\n            c->cas = 0;\n\n            dispatch_bin_command(c);\n\n            c->rbytes -= sizeof(c->binary_header);\n            c->rcurr += sizeof(c->binary_header);\n        }\n    } else {\n        char *el, *cont;\n\n        if (c->rbytes == 0)\n            return 0;\n\n        el = memchr(c->rcurr, '\\n', c->rbytes);\n        if (!el) {\n            if (c->rbytes > 1024) {\n                /*\n                 * We didn't have a '\\n' in the first k. This _has_ to be a\n                 * large multiget, if not we should just nuke the connection.\n                 */\n                char *ptr = c->rcurr;\n                while (*ptr == ' ') { /* ignore leading whitespaces */\n                    ++ptr;\n                }\n\n                if (ptr - c->rcurr > 100 ||\n                    (strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {\n\n                    conn_set_state(c, conn_closing);\n                    return 1;\n                }\n            }\n\n            return 0;\n        }\n        cont = el + 1;\n        if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {\n            el--;\n        }\n        *el = '\\0';\n\n        assert(cont <= (c->rcurr + c->rbytes));\n\n        c->last_cmd_time = current_time;\n        process_command(c, c->rcurr);\n\n        c->rbytes -= (cont - c->rcurr);\n        c->rcurr = cont;\n\n        assert(c->rcurr <= (c->rbuf + c->rsize));\n    }\n\n    return 1;\n}\n\n/*\n * read a UDP request.\n */\nstatic enum try_read_result try_read_udp(conn *c) {\n    int res;\n\n    assert(c != NULL);\n\n    c->request_addr_size = sizeof(c->request_addr);\n    res = recvfrom(c->sfd, c->rbuf, c->rsize,\n                   0, (struct sockaddr *)&c->request_addr,\n                   &c->request_addr_size);\n    if (res > 8) {\n        unsigned char *buf = (unsigned char *)c->rbuf;\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.bytes_read += res;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        /* Beginning of UDP packet is the request ID; save it. */\n        c->request_id = buf[0] * 256 + buf[1];\n\n        /* If this is a multi-packet request, drop it. */\n        if (buf[4] != 0 || buf[5] != 1) {\n            out_string(c, \"SERVER_ERROR multi-packet request not supported\");\n            return READ_NO_DATA_RECEIVED;\n        }\n\n        /* Don't care about any of the rest of the header. */\n        res -= 8;\n        memmove(c->rbuf, c->rbuf + 8, res);\n\n        c->rbytes = res;\n        c->rcurr = c->rbuf;\n        return READ_DATA_RECEIVED;\n    }\n    return READ_NO_DATA_RECEIVED;\n}\n\n/*\n * read from network as much as we can, handle buffer overflow and connection\n * close.\n * before reading, move the remaining incomplete fragment of a command\n * (if any) to the beginning of the buffer.\n *\n * To protect us from someone flooding a connection with bogus data causing\n * the connection to eat up all available memory, break out and start looking\n * at the data I've got after a number of reallocs...\n *\n * @return enum try_read_result\n */\nstatic enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                STATS_LOCK();\n                stats.malloc_fails++;\n                STATS_UNLOCK();\n                if (settings.verbose > 0) {\n                    fprintf(stderr, \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_of_memory(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = read(c->sfd, c->rbuf + c->rbytes, avail);\n        if (res > 0) {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.bytes_read += res;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n\nstatic bool update_event(conn *c, const int new_flags) {\n    assert(c != NULL);\n\n    struct event_base *base = c->event.ev_base;\n    if (c->ev_flags == new_flags)\n        return true;\n    if (event_del(&c->event) == -1) return false;\n    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = new_flags;\n    if (event_add(&c->event, 0) == -1) return false;\n    return true;\n}\n\n/*\n * Sets whether we are listening for new connections or not.\n */\nvoid do_accept_new_conns(const bool do_accept) {\n    conn *next;\n\n    for (next = listen_conn; next; next = next->next) {\n        if (do_accept) {\n            update_event(next, EV_READ | EV_PERSIST);\n            if (listen(next->sfd, settings.backlog) != 0) {\n                perror(\"listen\");\n            }\n        }\n        else {\n            update_event(next, 0);\n            if (listen(next->sfd, 0) != 0) {\n                perror(\"listen\");\n            }\n        }\n    }\n\n    if (do_accept) {\n        struct timeval maxconns_exited;\n        uint64_t elapsed_us;\n        gettimeofday(&maxconns_exited,NULL);\n        STATS_LOCK();\n        elapsed_us =\n            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000\n            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);\n        stats.time_in_listen_disabled_us += elapsed_us;\n        stats_state.accepting_conns = true;\n        STATS_UNLOCK();\n    } else {\n        STATS_LOCK();\n        stats_state.accepting_conns = false;\n        gettimeofday(&stats.maxconns_entered,NULL);\n        stats.listen_disabled_num++;\n        STATS_UNLOCK();\n        allow_new_conns = false;\n        maxconns_handler(-42, 0, 0);\n    }\n}\n\n/*\n * Transmit the next chunk of data from our list of msgbuf structures.\n *\n * Returns:\n *   TRANSMIT_COMPLETE   All done writing.\n *   TRANSMIT_INCOMPLETE More data remaining to write.\n *   TRANSMIT_SOFT_ERROR Can't write any more right now.\n *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)\n */\nstatic enum transmit_result transmit(conn *c) {\n    assert(c != NULL);\n\n    if (c->msgcurr < c->msgused &&\n            c->msglist[c->msgcurr].msg_iovlen == 0) {\n        /* Finished writing the current msg; advance to the next. */\n        c->msgcurr++;\n    }\n    if (c->msgcurr < c->msgused) {\n        ssize_t res;\n        struct msghdr *m = &c->msglist[c->msgcurr];\n\n        res = sendmsg(c->sfd, m, 0);\n        if (res > 0) {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.bytes_written += res;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            /* We've written some of the data. Remove the completed\n               iovec entries from the list of pending writes. */\n            while (m->msg_iovlen > 0 && res >= m->msg_iov->iov_len) {\n                res -= m->msg_iov->iov_len;\n                m->msg_iovlen--;\n                m->msg_iov++;\n            }\n\n            /* Might have written just part of the last iovec entry;\n               adjust it so the next write will do the rest. */\n            if (res > 0) {\n                m->msg_iov->iov_base = (caddr_t)m->msg_iov->iov_base + res;\n                m->msg_iov->iov_len -= res;\n            }\n            return TRANSMIT_INCOMPLETE;\n        }\n        if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0)\n                    fprintf(stderr, \"Couldn't update event\\n\");\n                conn_set_state(c, conn_closing);\n                return TRANSMIT_HARD_ERROR;\n            }\n            return TRANSMIT_SOFT_ERROR;\n        }\n        /* if res == 0 or res == -1 and error is not EAGAIN or EWOULDBLOCK,\n           we have a real error, on which we close the connection */\n        if (settings.verbose > 0)\n            perror(\"Failed to write, and not due to blocking\");\n\n        if (IS_UDP(c->transport))\n            conn_set_state(c, conn_read);\n        else\n            conn_set_state(c, conn_closing);\n        return TRANSMIT_HARD_ERROR;\n    } else {\n        return TRANSMIT_COMPLETE;\n    }\n}\n\n/* Does a looped read to fill data chunks */\n/* TODO: restrict number of times this can loop.\n * Also, benchmark using readv's.\n */\nstatic int read_into_chunked_item(conn *c) {\n    int total = 0;\n    int res;\n    assert(c->rcurr != c->ritem);\n\n    while (c->rlbytes > 0) {\n        item_chunk *ch = (item_chunk *)c->ritem;\n        assert(ch->used <= ch->size);\n        if (ch->size == ch->used) {\n            // FIXME: ch->next is currently always 0. remove this?\n            if (ch->next) {\n                c->ritem = (char *) ch->next;\n            } else {\n                /* Allocate next chunk. Binary protocol needs 2b for \\r\\n */\n                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +\n                       ((c->protocol == binary_prot) ? 2 : 0));\n                if (!c->ritem) {\n                    // We failed an allocation. Let caller handle cleanup.\n                    total = -2;\n                    break;\n                }\n                // ritem has new chunk, restart the loop.\n                continue;\n                //assert(c->rlbytes == 0);\n            }\n        }\n\n        int unused = ch->size - ch->used;\n        /* first check if we have leftovers in the conn_read buffer */\n        if (c->rbytes > 0) {\n            total = 0;\n            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n            tocopy = tocopy > unused ? unused : tocopy;\n            if (c->ritem != c->rcurr) {\n                memmove(ch->data + ch->used, c->rcurr, tocopy);\n            }\n            total += tocopy;\n            c->rlbytes -= tocopy;\n            c->rcurr += tocopy;\n            c->rbytes -= tocopy;\n            ch->used += tocopy;\n            if (c->rlbytes == 0) {\n                break;\n            }\n        } else {\n            /*  now try reading from the socket */\n            res = read(c->sfd, ch->data + ch->used,\n                    (unused > c->rlbytes ? c->rlbytes : unused));\n            if (res > 0) {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.bytes_read += res;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                ch->used += res;\n                total += res;\n                c->rlbytes -= res;\n            } else {\n                /* Reset total to the latest result so caller can handle it */\n                total = res;\n                break;\n            }\n        }\n    }\n\n    /* At some point I will be able to ditch the \\r\\n from item storage and\n       remove all of these kludges.\n       The above binprot check ensures inline space for \\r\\n, but if we do\n       exactly enough allocs there will be no additional chunk for \\r\\n.\n     */\n    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {\n        item_chunk *ch = (item_chunk *)c->ritem;\n        if (ch->size - ch->used < 2) {\n            c->ritem = (char *) do_item_alloc_chunk(ch, 2);\n            if (!c->ritem) {\n                total = -2;\n            }\n        }\n    }\n    return total;\n}\n\nstatic void drive_machine(conn *c) {\n    bool stop = false;\n    int sfd;\n    socklen_t addrlen;\n    struct sockaddr_storage addr;\n    int nreqs = settings.reqs_per_event;\n    int res;\n    const char *str;\n#ifdef HAVE_ACCEPT4\n    static int  use_accept4 = 1;\n#else\n    static int  use_accept4 = 0;\n#endif\n\n    assert(c != NULL);\n\n    while (!stop) {\n\n        switch(c->state) {\n        case conn_listening:\n            addrlen = sizeof(addr);\n#ifdef HAVE_ACCEPT4\n            if (use_accept4) {\n                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);\n            } else {\n                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);\n            }\n#else\n            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);\n#endif\n            if (sfd == -1) {\n                if (use_accept4 && errno == ENOSYS) {\n                    use_accept4 = 0;\n                    continue;\n                }\n                perror(use_accept4 ? \"accept4()\" : \"accept()\");\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    /* these are transient, so don't log anything */\n                    stop = true;\n                } else if (errno == EMFILE) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Too many open connections\\n\");\n                    accept_new_conns(false);\n                    stop = true;\n                } else {\n                    perror(\"accept()\");\n                    stop = true;\n                }\n                break;\n            }\n            if (!use_accept4) {\n                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {\n                    perror(\"setting O_NONBLOCK\");\n                    close(sfd);\n                    break;\n                }\n            }\n\n            if (settings.maxconns_fast &&\n                stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {\n                str = \"ERROR Too many open connections\\r\\n\";\n                res = write(sfd, str, strlen(str));\n                close(sfd);\n                STATS_LOCK();\n                stats.rejected_conns++;\n                STATS_UNLOCK();\n            } else {\n                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,\n                                     DATA_BUFFER_SIZE, c->transport);\n            }\n\n            stop = true;\n            break;\n\n        case conn_waiting:\n            if (!update_event(c, EV_READ | EV_PERSIST)) {\n                if (settings.verbose > 0)\n                    fprintf(stderr, \"Couldn't update event\\n\");\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            conn_set_state(c, conn_read);\n            stop = true;\n            break;\n\n        case conn_read:\n            res = IS_UDP(c->transport) ? try_read_udp(c) : try_read_network(c);\n\n            switch (res) {\n            case READ_NO_DATA_RECEIVED:\n                conn_set_state(c, conn_waiting);\n                break;\n            case READ_DATA_RECEIVED:\n                conn_set_state(c, conn_parse_cmd);\n                break;\n            case READ_ERROR:\n                conn_set_state(c, conn_closing);\n                break;\n            case READ_MEMORY_ERROR: /* Failed to allocate more memory */\n                /* State already set by try_read_network */\n                break;\n            }\n            break;\n\n        case conn_parse_cmd :\n            if (try_read_command(c) == 0) {\n                /* wee need more data! */\n                conn_set_state(c, conn_waiting);\n            }\n\n            break;\n\n        case conn_new_cmd:\n            /* Only process nreqs at a time to avoid starving other\n               connections */\n\n            --nreqs;\n            if (nreqs >= 0) {\n                reset_cmd_handler(c);\n            } else {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.conn_yields++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                if (c->rbytes > 0) {\n                    /* We have already read in data into the input buffer,\n                       so libevent will most likely not signal read events\n                       on the socket (unless more data is available. As a\n                       hack we should just put in a request to write data,\n                       because that should be possible ;-)\n                    */\n                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                        if (settings.verbose > 0)\n                            fprintf(stderr, \"Couldn't update event\\n\");\n                        conn_set_state(c, conn_closing);\n                        break;\n                    }\n                }\n                stop = true;\n            }\n            break;\n\n        case conn_nread:\n            if (c->rlbytes == 0) {\n                complete_nread(c);\n                break;\n            }\n\n            /* Check if rbytes < 0, to prevent crash */\n            if (c->rlbytes < 0) {\n                if (settings.verbose) {\n                    fprintf(stderr, \"Invalid rlbytes to read: len %d\\n\", c->rlbytes);\n                }\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            if (!c->item || (((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) {\n                /* first check if we have leftovers in the conn_read buffer */\n                if (c->rbytes > 0) {\n                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n                    if (c->ritem != c->rcurr) {\n                        memmove(c->ritem, c->rcurr, tocopy);\n                    }\n                    c->ritem += tocopy;\n                    c->rlbytes -= tocopy;\n                    c->rcurr += tocopy;\n                    c->rbytes -= tocopy;\n                    if (c->rlbytes == 0) {\n                        break;\n                    }\n                }\n\n                /*  now try reading from the socket */\n                res = read(c->sfd, c->ritem, c->rlbytes);\n                if (res > 0) {\n                    pthread_mutex_lock(&c->thread->stats.mutex);\n                    c->thread->stats.bytes_read += res;\n                    pthread_mutex_unlock(&c->thread->stats.mutex);\n                    if (c->rcurr == c->ritem) {\n                        c->rcurr += res;\n                    }\n                    c->ritem += res;\n                    c->rlbytes -= res;\n                    break;\n                }\n            } else {\n                res = read_into_chunked_item(c);\n                if (res > 0)\n                    break;\n            }\n\n            if (res == 0) { /* end of stream */\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n                if (!update_event(c, EV_READ | EV_PERSIST)) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't update event\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n                stop = true;\n                break;\n            }\n\n            /* Memory allocation failure */\n            if (res == -2) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory during read\");\n                c->sbytes = c->rlbytes;\n                c->write_and_go = conn_swallow;\n                break;\n            }\n            /* otherwise we have a real error, on which we close the connection */\n            if (settings.verbose > 0) {\n                fprintf(stderr, \"Failed to read, and not due to blocking:\\n\"\n                        \"errno: %d %s \\n\"\n                        \"rcurr=%lx ritem=%lx rbuf=%lx rlbytes=%d rsize=%d\\n\",\n                        errno, strerror(errno),\n                        (long)c->rcurr, (long)c->ritem, (long)c->rbuf,\n                        (int)c->rlbytes, (int)c->rsize);\n            }\n            conn_set_state(c, conn_closing);\n            break;\n\n        case conn_swallow:\n            /* we are reading sbytes and throwing them away */\n            if (c->sbytes == 0) {\n                conn_set_state(c, conn_new_cmd);\n                break;\n            }\n\n            /* first check if we have leftovers in the conn_read buffer */\n            if (c->rbytes > 0) {\n                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;\n                c->sbytes -= tocopy;\n                c->rcurr += tocopy;\n                c->rbytes -= tocopy;\n                break;\n            }\n\n            /*  now try reading from the socket */\n            res = read(c->sfd, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);\n            if (res > 0) {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.bytes_read += res;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                c->sbytes -= res;\n                break;\n            }\n            if (res == 0) { /* end of stream */\n                conn_set_state(c, conn_closing);\n                break;\n            }\n            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n                if (!update_event(c, EV_READ | EV_PERSIST)) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't update event\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n                stop = true;\n                break;\n            }\n            /* otherwise we have a real error, on which we close the connection */\n            if (settings.verbose > 0)\n                fprintf(stderr, \"Failed to read, and not due to blocking\\n\");\n            conn_set_state(c, conn_closing);\n            break;\n\n        case conn_write:\n            /*\n             * We want to write out a simple response. If we haven't already,\n             * assemble it into a msgbuf list (this will be a single-entry\n             * list for TCP or a two-entry list for UDP).\n             */\n            if (c->iovused == 0 || (IS_UDP(c->transport) && c->iovused == 1)) {\n                if (add_iov(c, c->wcurr, c->wbytes) != 0) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't build response\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n            }\n\n            /* fall through... */\n\n        case conn_mwrite:\n          if (IS_UDP(c->transport) && c->msgcurr == 0 && build_udp_headers(c) != 0) {\n            if (settings.verbose > 0)\n              fprintf(stderr, \"Failed to build UDP headers\\n\");\n            conn_set_state(c, conn_closing);\n            break;\n          }\n            switch (transmit(c)) {\n            case TRANSMIT_COMPLETE:\n                if (c->state == conn_mwrite) {\n                    conn_release_items(c);\n                    /* XXX:  I don't know why this wasn't the general case */\n                    if(c->protocol == binary_prot) {\n                        conn_set_state(c, c->write_and_go);\n                    } else {\n                        conn_set_state(c, conn_new_cmd);\n                    }\n                } else if (c->state == conn_write) {\n                    if (c->write_and_free) {\n                        free(c->write_and_free);\n                        c->write_and_free = 0;\n                    }\n                    conn_set_state(c, c->write_and_go);\n                } else {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Unexpected state %d\\n\", c->state);\n                    conn_set_state(c, conn_closing);\n                }\n                break;\n\n            case TRANSMIT_INCOMPLETE:\n            case TRANSMIT_HARD_ERROR:\n                break;                   /* Continue in state machine. */\n\n            case TRANSMIT_SOFT_ERROR:\n                stop = true;\n                break;\n            }\n            break;\n\n        case conn_closing:\n            if (IS_UDP(c->transport))\n                conn_cleanup(c);\n            else\n                conn_close(c);\n            stop = true;\n            break;\n\n        case conn_closed:\n            /* This only happens if dormando is an idiot. */\n            abort();\n            break;\n\n        case conn_watch:\n            /* We handed off our connection to the logger thread. */\n            stop = true;\n            break;\n        case conn_max_state:\n            assert(false);\n            break;\n        }\n    }\n\n    return;\n}\n\nvoid event_handler(const int fd, const short which, void *arg) {\n    conn *c;\n\n    c = (conn *)arg;\n    assert(c != NULL);\n\n    c->which = which;\n\n    /* sanity */\n    if (fd != c->sfd) {\n        if (settings.verbose > 0)\n            fprintf(stderr, \"Catastrophic: event fd doesn't match conn fd!\\n\");\n        conn_close(c);\n        return;\n    }\n\n    drive_machine(c);\n\n    /* wait for next event */\n    return;\n}\n\nstatic int new_socket(struct addrinfo *ai) {\n    int sfd;\n    int flags;\n\n    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {\n        return -1;\n    }\n\n    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||\n        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {\n        perror(\"setting O_NONBLOCK\");\n        close(sfd);\n        return -1;\n    }\n    return sfd;\n}\n\n\n/*\n * Sets a socket's send buffer size to the maximum allowed by the system.\n */\nstatic void maximize_sndbuf(const int sfd) {\n    socklen_t intsize = sizeof(int);\n    int last_good = 0;\n    int min, max, avg;\n    int old_size;\n\n    /* Start with the default size. */\n    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {\n        if (settings.verbose > 0)\n            perror(\"getsockopt(SO_SNDBUF)\");\n        return;\n    }\n\n    /* Binary-search for the real maximum. */\n    min = old_size;\n    max = MAX_SENDBUF_SIZE;\n\n    while (min <= max) {\n        avg = ((unsigned int)(min + max)) / 2;\n        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {\n            last_good = avg;\n            min = avg + 1;\n        } else {\n            max = avg - 1;\n        }\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d send buffer was %d, now %d\\n\", sfd, old_size, last_good);\n}\n\n/**\n * Create a socket and bind it to a specific port number\n * @param interface the interface to bind to\n * @param port the port number to bind to\n * @param transport the transport protocol (TCP / UDP)\n * @param portnumber_file A filepointer to write the port numbers to\n *        when they are successfully added to the list of ports we\n *        listen on.\n */\nstatic int server_socket(const char *interface,\n                         int port,\n                         enum network_transport transport,\n                         FILE *portnumber_file) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct addrinfo *ai;\n    struct addrinfo *next;\n    struct addrinfo hints = { .ai_flags = AI_PASSIVE,\n                              .ai_family = AF_UNSPEC };\n    char port_buf[NI_MAXSERV];\n    int error;\n    int success = 0;\n    int flags =1;\n\n    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;\n\n    if (port == -1) {\n        port = 0;\n    }\n    snprintf(port_buf, sizeof(port_buf), \"%d\", port);\n    error= getaddrinfo(interface, port_buf, &hints, &ai);\n    if (error != 0) {\n        if (error != EAI_SYSTEM)\n          fprintf(stderr, \"getaddrinfo(): %s\\n\", gai_strerror(error));\n        else\n          perror(\"getaddrinfo()\");\n        return 1;\n    }\n\n    for (next= ai; next; next= next->ai_next) {\n        conn *listen_conn_add;\n        if ((sfd = new_socket(next)) == -1) {\n            /* getaddrinfo can return \"junk\" addresses,\n             * we make sure at least one works before erroring.\n             */\n            if (errno == EMFILE) {\n                /* ...unless we're out of fds */\n                perror(\"server_socket\");\n                exit(EX_OSERR);\n            }\n            continue;\n        }\n\n#ifdef IPV6_V6ONLY\n        if (next->ai_family == AF_INET6) {\n            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));\n            if (error != 0) {\n                perror(\"setsockopt\");\n                close(sfd);\n                continue;\n            }\n        }\n#endif\n\n        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n        if (IS_UDP(transport)) {\n            maximize_sndbuf(sfd);\n        } else {\n            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n            if (error != 0)\n                perror(\"setsockopt\");\n\n            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n            if (error != 0)\n                perror(\"setsockopt\");\n\n            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));\n            if (error != 0)\n                perror(\"setsockopt\");\n        }\n\n        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {\n            if (errno != EADDRINUSE) {\n                perror(\"bind()\");\n                close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            close(sfd);\n            continue;\n        } else {\n            success++;\n            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {\n                perror(\"listen()\");\n                close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            if (portnumber_file != NULL &&\n                (next->ai_addr->sa_family == AF_INET ||\n                 next->ai_addr->sa_family == AF_INET6)) {\n                union {\n                    struct sockaddr_in in;\n                    struct sockaddr_in6 in6;\n                } my_sockaddr;\n                socklen_t len = sizeof(my_sockaddr);\n                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {\n                    if (next->ai_addr->sa_family == AF_INET) {\n                        fprintf(portnumber_file, \"%s INET: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in.sin_port));\n                    } else {\n                        fprintf(portnumber_file, \"%s INET6: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in6.sin6_port));\n                    }\n                }\n            }\n        }\n\n        if (IS_UDP(transport)) {\n            int c;\n\n            for (c = 0; c < settings.num_threads_per_udp; c++) {\n                /* Allocate one UDP file descriptor per worker thread;\n                 * this allows \"stats conns\" to separately list multiple\n                 * parallel UDP requests in progress.\n                 *\n                 * The dispatch code round-robins new connection requests\n                 * among threads, so this is guaranteed to assign one\n                 * FD to each thread.\n                 */\n                int per_thread_fd = c ? dup(sfd) : sfd;\n                dispatch_conn_new(per_thread_fd, conn_read,\n                                  EV_READ | EV_PERSIST,\n                                  UDP_READ_BUFFER_SIZE, transport);\n            }\n        } else {\n            if (!(listen_conn_add = conn_new(sfd, conn_listening,\n                                             EV_READ | EV_PERSIST, 1,\n                                             transport, main_base))) {\n                fprintf(stderr, \"failed to create listening connection\\n\");\n                exit(EXIT_FAILURE);\n            }\n            listen_conn_add->next = listen_conn;\n            listen_conn = listen_conn_add;\n        }\n    }\n\n    freeaddrinfo(ai);\n\n    /* Return zero iff we detected no errors in starting up connections */\n    return success == 0;\n}\n\nstatic int server_sockets(int port, enum network_transport transport,\n                          FILE *portnumber_file) {\n    if (settings.inter == NULL) {\n        return server_socket(settings.inter, port, transport, portnumber_file);\n    } else {\n        // tokenize them and bind to each one of them..\n        char *b;\n        int ret = 0;\n        char *list = strdup(settings.inter);\n\n        if (list == NULL) {\n            fprintf(stderr, \"Failed to allocate memory for parsing server interface string\\n\");\n            return 1;\n        }\n        for (char *p = strtok_r(list, \";,\", &b);\n             p != NULL;\n             p = strtok_r(NULL, \";,\", &b)) {\n            int the_port = port;\n\n            char *h = NULL;\n            if (*p == '[') {\n                // expecting it to be an IPv6 address enclosed in []\n                // i.e. RFC3986 style recommended by RFC5952\n                char *e = strchr(p, ']');\n                if (e == NULL) {\n                    fprintf(stderr, \"Invalid IPV6 address: \\\"%s\\\"\", p);\n                    return 1;\n                }\n                h = ++p; // skip the opening '['\n                *e = '\\0';\n                p = ++e; // skip the closing ']'\n            }\n\n            char *s = strchr(p, ':');\n            if (s != NULL) {\n                // If no more semicolons - attempt to treat as port number.\n                // Otherwise the only valid option is an unenclosed IPv6 without port, until\n                // of course there was an RFC3986 IPv6 address previously specified -\n                // in such a case there is no good option, will just send it to fail as port number.\n                if (strchr(s + 1, ':') == NULL || h != NULL) {\n                    *s = '\\0';\n                    ++s;\n                    if (!safe_strtol(s, &the_port)) {\n                        fprintf(stderr, \"Invalid port number: \\\"%s\\\"\", s);\n                        return 1;\n                    }\n                }\n            }\n\n            if (h != NULL)\n                p = h;\n\n            if (strcmp(p, \"*\") == 0) {\n                p = NULL;\n            }\n            ret |= server_socket(p, the_port, transport, portnumber_file);\n        }\n        free(list);\n        return ret;\n    }\n}\n\nstatic int new_socket_unix(void) {\n    int sfd;\n    int flags;\n\n    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {\n        perror(\"socket()\");\n        return -1;\n    }\n\n    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||\n        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {\n        perror(\"setting O_NONBLOCK\");\n        close(sfd);\n        return -1;\n    }\n    return sfd;\n}\n\nstatic int server_socket_unix(const char *path, int access_mask) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct sockaddr_un addr;\n    struct stat tstat;\n    int flags =1;\n    int old_umask;\n\n    if (!path) {\n        return 1;\n    }\n\n    if ((sfd = new_socket_unix()) == -1) {\n        return 1;\n    }\n\n    /*\n     * Clean up a previous socket file if we left it around\n     */\n    if (lstat(path, &tstat) == 0) {\n        if (S_ISSOCK(tstat.st_mode))\n            unlink(path);\n    }\n\n    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n\n    /*\n     * the memset call clears nonstandard fields in some impementations\n     * that otherwise mess things up.\n     */\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sun_family = AF_UNIX;\n    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);\n    assert(strcmp(addr.sun_path, path) == 0);\n    old_umask = umask( ~(access_mask&0777));\n    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {\n        perror(\"bind()\");\n        close(sfd);\n        umask(old_umask);\n        return 1;\n    }\n    umask(old_umask);\n    if (listen(sfd, settings.backlog) == -1) {\n        perror(\"listen()\");\n        close(sfd);\n        return 1;\n    }\n    if (!(listen_conn = conn_new(sfd, conn_listening,\n                                 EV_READ | EV_PERSIST, 1,\n                                 local_transport, main_base))) {\n        fprintf(stderr, \"failed to create listening connection\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    return 0;\n}\n\n/*\n * We keep the current time of day in a global variable that's updated by a\n * timer event. This saves us a bunch of time() system calls (we really only\n * need to get the time once a second, whereas there can be tens of thousands\n * of requests a second) and allows us to use server-start-relative timestamps\n * rather than absolute UNIX timestamps, a space savings on systems where\n * sizeof(time_t) > sizeof(unsigned int).\n */\nvolatile rel_time_t current_time;\nstatic struct event clockevent;\n\n/* libevent uses a monotonic clock when available for event scheduling. Aside\n * from jitter, simply ticking our internal timer here is accurate enough.\n * Note that users who are setting explicit dates for expiration times *must*\n * ensure their clocks are correct before starting memcached. */\nstatic void clock_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 1, .tv_usec = 0};\n    static bool initialized = false;\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n    static bool monotonic = false;\n    static time_t monotonic_start;\n#endif\n\n    if (initialized) {\n        /* only delete the event if it's actually there. */\n        evtimer_del(&clockevent);\n    } else {\n        initialized = true;\n        /* process_started is initialized to time() - 2. We initialize to 1 so\n         * flush_all won't underflow during tests. */\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n        struct timespec ts;\n        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {\n            monotonic = true;\n            monotonic_start = ts.tv_sec - ITEM_UPDATE_INTERVAL - 2;\n        }\n#endif\n    }\n\n    evtimer_set(&clockevent, clock_handler, 0);\n    event_base_set(main_base, &clockevent);\n    evtimer_add(&clockevent, &t);\n\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n    if (monotonic) {\n        struct timespec ts;\n        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)\n            return;\n        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);\n        return;\n    }\n#endif\n    {\n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        current_time = (rel_time_t) (tv.tv_sec - process_started);\n    }\n}\n\nstatic void usage(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\");\n    printf(\"-p <num>      TCP port number to listen on (default: 11211)\\n\"\n           \"-U <num>      UDP port number to listen on (default: 11211, 0 is off)\\n\"\n           \"-s <file>     UNIX socket path to listen on (disables network support)\\n\"\n           \"-A            enable ascii \\\"shutdown\\\" command\\n\"\n           \"-a <mask>     access mask for UNIX socket, in octal (default: 0700)\\n\"\n           \"-l <addr>     interface to listen on (default: INADDR_ANY, all addresses)\\n\"\n           \"              <addr> may be specified as host:port. If you don't specify\\n\"\n           \"              a port number, the value you specified with -p or -U is\\n\"\n           \"              used. You may specify multiple addresses separated by comma\\n\"\n           \"              or by using -l multiple times\\n\"\n\n           \"-d            run as a daemon\\n\"\n           \"-r            maximize core file limit\\n\"\n           \"-u <username> assume identity of <username> (only when run as root)\\n\"\n           \"-m <num>      max memory to use for items in megabytes (default: 64 MB)\\n\"\n           \"-M            return error on memory exhausted (rather than removing items)\\n\"\n           \"-c <num>      max simultaneous connections (default: 1024)\\n\"\n           \"-k            lock down all paged memory.  Note that there is a\\n\"\n           \"              limit on how much memory you may lock.  Trying to\\n\"\n           \"              allocate more than that would fail, so be sure you\\n\"\n           \"              set the limit correctly for the user you started\\n\"\n           \"              the daemon with (not for -u <username> user;\\n\"\n           \"              under sh this is done with 'ulimit -S -l NUM_KB').\\n\"\n           \"-v            verbose (print errors/warnings while in event loop)\\n\"\n           \"-vv           very verbose (also print client commands/reponses)\\n\"\n           \"-vvv          extremely verbose (also print internal state transitions)\\n\"\n           \"-h            print this help and exit\\n\"\n           \"-i            print memcached and libevent license\\n\"\n           \"-V            print version and exit\\n\"\n           \"-P <file>     save PID in <file>, only used with -d option\\n\"\n           \"-f <factor>   chunk size growth factor (default: 1.25)\\n\"\n           \"-n <bytes>    minimum space allocated for key+value+flags (default: 48)\\n\");\n    printf(\"-L            Try to use large memory pages (if available). Increasing\\n\"\n           \"              the memory page size could reduce the number of TLB misses\\n\"\n           \"              and improve the performance. In order to get large pages\\n\"\n           \"              from the OS, memcached will allocate the total item-cache\\n\"\n           \"              in one large chunk.\\n\");\n    printf(\"-D <char>     Use <char> as the delimiter between key prefixes and IDs.\\n\"\n           \"              This is used for per-prefix stats reporting. The default is\\n\"\n           \"              \\\":\\\" (colon). If this option is specified, stats collection\\n\"\n           \"              is turned on automatically; if not, then it may be turned on\\n\"\n           \"              by sending the \\\"stats detail on\\\" command to the server.\\n\");\n    printf(\"-t <num>      number of threads to use (default: 4)\\n\");\n    printf(\"-R            Maximum number of requests per event, limits the number of\\n\"\n           \"              requests process for a given connection to prevent \\n\"\n           \"              starvation (default: 20)\\n\");\n    printf(\"-C            Disable use of CAS\\n\");\n    printf(\"-b <num>      Set the backlog queue limit (default: 1024)\\n\");\n    printf(\"-B            Binding protocol - one of ascii, binary, or auto (default)\\n\");\n    printf(\"-I            Override the size of each slab page. Adjusts max item size\\n\"\n           \"              (default: 1mb, min: 1k, max: 128m)\\n\");\n#ifdef ENABLE_SASL\n    printf(\"-S            Turn on Sasl authentication\\n\");\n#endif\n    printf(\"-F            Disable flush_all command\\n\");\n    printf(\"-X            Disable stats cachedump and lru_crawler metadump commands\\n\");\n    printf(\"-o            Comma separated list of extended or experimental options\\n\"\n           \"              - maxconns_fast: immediately close new\\n\"\n           \"                connections if over maxconns limit\\n\"\n           \"              - hashpower: An integer multiplier for how large the hash\\n\"\n           \"                table should be. Can be grown at runtime if not big enough.\\n\"\n           \"                Set this based on \\\"STAT hash_power_level\\\" before a \\n\"\n           \"                restart.\\n\"\n           \"              - tail_repair_time: Time in seconds that indicates how long to wait before\\n\"\n           \"                forcefully taking over the LRU tail item whose refcount has leaked.\\n\"\n           \"                Disabled by default; dangerous option.\\n\"\n           \"              - hash_algorithm: The hash table algorithm\\n\"\n           \"                default is jenkins hash. options: jenkins, murmur3\\n\"\n           \"              - lru_crawler: Enable LRU Crawler background thread\\n\"\n           \"              - lru_crawler_sleep: Microseconds to sleep between items\\n\"\n           \"                default is 100.\\n\"\n           \"              - lru_crawler_tocrawl: Max items to crawl per slab per run\\n\"\n           \"                default is 0 (unlimited)\\n\"\n           \"              - lru_maintainer: Enable new LRU system + background thread\\n\"\n           \"              - hot_lru_pct: Pct of slab memory to reserve for hot lru.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - warm_lru_pct: Pct of slab memory to reserve for warm lru.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - hot_max_age: Items idle longer than this drop from hot lru.\\n\"\n           \"              - cold_max_factor: Items idle longer than cold lru age * this drop from warm.\\n\"\n           \"              - temporary_ttl: TTL's below this use separate LRU, cannot be evicted.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - idle_timeout: Timeout for idle connections\\n\"\n           \"              - (EXPERIMENTAL) slab_chunk_max: Maximum slab size. Do not change without extreme care.\\n\"\n           \"              - watcher_logbuf_size: Size in kilobytes of per-watcher write buffer.\\n\"\n           \"              - worker_logbuf_Size: Size in kilobytes of per-worker-thread buffer\\n\"\n           \"                read by background thread. Which is then written to watchers.\\n\"\n           \"              - track_sizes: Enable dynamic reports for 'stats sizes' command.\\n\"\n           \"              - no_inline_ascii_resp: Save up to 24 bytes per item. Small perf hit in ASCII,\\n\"\n           \"                no perf difference in binary protocol. Speeds up sets.\\n\"\n           \"              - modern: Enables 'modern' defaults. Options that will be default in future.\\n\"\n           \"                enables: slab_chunk_max:512k,slab_reassign,slab_automove=1,maxconns_fast,\\n\"\n           \"                         hash_algorithm=murmur3,lru_crawler,lru_maintainer,no_inline_ascii_resp\\n\"\n           );\n    return;\n}\n\nstatic void usage_license(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\\n\");\n    printf(\n    \"Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions are\\n\"\n    \"met:\\n\"\n    \"\\n\"\n    \"    * Redistributions of source code must retain the above copyright\\n\"\n    \"notice, this list of conditions and the following disclaimer.\\n\"\n    \"\\n\"\n    \"    * Redistributions in binary form must reproduce the above\\n\"\n    \"copyright notice, this list of conditions and the following disclaimer\\n\"\n    \"in the documentation and/or other materials provided with the\\n\"\n    \"distribution.\\n\"\n    \"\\n\"\n    \"    * Neither the name of the Danga Interactive nor the names of its\\n\"\n    \"contributors may be used to endorse or promote products derived from\\n\"\n    \"this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"\n    \"\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n\"\n    \"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n\"\n    \"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n\"\n    \"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\"\n    \"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"This product includes software developed by Niels Provos.\\n\"\n    \"\\n\"\n    \"[ libevent ]\\n\"\n    \"\\n\"\n    \"Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions\\n\"\n    \"are met:\\n\"\n    \"1. Redistributions of source code must retain the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer.\\n\"\n    \"2. Redistributions in binary form must reproduce the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer in the\\n\"\n    \"   documentation and/or other materials provided with the distribution.\\n\"\n    \"3. All advertising materials mentioning features or use of this software\\n\"\n    \"   must display the following acknowledgement:\\n\"\n    \"      This product includes software developed by Niels Provos.\\n\"\n    \"4. The name of the author may not be used to endorse or promote products\\n\"\n    \"   derived from this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\\n\"\n    \"IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n\"\n    \"OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n\"\n    \"IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n\"\n    \"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n\"\n    \"NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n\"\n    \"THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    );\n\n    return;\n}\n\nstatic void save_pid(const char *pid_file) {\n    FILE *fp;\n    if (access(pid_file, F_OK) == 0) {\n        if ((fp = fopen(pid_file, \"r\")) != NULL) {\n            char buffer[1024];\n            if (fgets(buffer, sizeof(buffer), fp) != NULL) {\n                unsigned int pid;\n                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {\n                    fprintf(stderr, \"WARNING: The pid file contained the following (running) pid: %u\\n\", pid);\n                }\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Create the pid file first with a temporary name, then\n     * atomically move the file to the real name to avoid a race with\n     * another process opening the file to read the pid, but finding\n     * it empty.\n     */\n    char tmp_pid_file[1024];\n    snprintf(tmp_pid_file, sizeof(tmp_pid_file), \"%s.tmp\", pid_file);\n\n    if ((fp = fopen(tmp_pid_file, \"w\")) == NULL) {\n        vperror(\"Could not open the pid file %s for writing\", tmp_pid_file);\n        return;\n    }\n\n    fprintf(fp,\"%ld\\n\", (long)getpid());\n    if (fclose(fp) == -1) {\n        vperror(\"Could not close the pid file %s\", tmp_pid_file);\n    }\n\n    if (rename(tmp_pid_file, pid_file) != 0) {\n        vperror(\"Could not rename the pid file from %s to %s\",\n                tmp_pid_file, pid_file);\n    }\n}\n\nstatic void remove_pidfile(const char *pid_file) {\n  if (pid_file == NULL)\n      return;\n\n  if (unlink(pid_file) != 0) {\n      vperror(\"Could not remove the pid file %s\", pid_file);\n  }\n\n}\n\nstatic void sig_handler(const int sig) {\n    printf(\"Signal handled: %s.\\n\", strsignal(sig));\n    exit(EXIT_SUCCESS);\n}\n\n#ifndef HAVE_SIGIGNORE\nstatic int sigignore(int sig) {\n    struct sigaction sa = { .sa_handler = SIG_IGN, .sa_flags = 0 };\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1) {\n        return -1;\n    }\n    return 0;\n}\n#endif\n\n\n/*\n * On systems that supports multiple page sizes we may reduce the\n * number of TLB-misses by using the biggest available page size\n */\nstatic int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            fprintf(stderr, \"Failed to set large pages: %s\\n\",\n                    strerror(errno));\n            fprintf(stderr, \"Will use default page size\\n\");\n        } else {\n            ret = 0;\n        }\n    } else {\n        fprintf(stderr, \"Failed to get supported pagesizes: %s\\n\",\n                strerror(errno));\n        fprintf(stderr, \"Will use default page size\\n\");\n    }\n\n    return ret;\n#else\n    return -1;\n#endif\n}\n\n/**\n * Do basic sanity check of the runtime environment\n * @return true if no errors found, false if we can't use this env\n */\nstatic bool sanitycheck(void) {\n    /* One of our biggest problems is old and bogus libevents */\n    const char *ever = event_get_version();\n    if (ever != NULL) {\n        if (strncmp(ever, \"1.\", 2) == 0) {\n            /* Require at least 1.3 (that's still a couple of years old) */\n            if (('0' <= ever[2] && ever[2] < '3') && !isdigit(ever[3])) {\n                fprintf(stderr, \"You are using libevent %s.\\nPlease upgrade to\"\n                        \" a more recent version (1.3 or newer)\\n\",\n                        event_get_version());\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nstatic bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {\n    char *b = NULL;\n    uint32_t size = 0;\n    int i = 0;\n    uint32_t last_size = 0;\n\n    if (strlen(s) < 1)\n        return false;\n\n    for (char *p = strtok_r(s, \"-\", &b);\n         p != NULL;\n         p = strtok_r(NULL, \"-\", &b)) {\n        if (!safe_strtoul(p, &size) || size < settings.chunk_size\n             || size > settings.slab_chunk_size_max) {\n            fprintf(stderr, \"slab size %u is out of valid range\\n\", size);\n            return false;\n        }\n        if (last_size >= size) {\n            fprintf(stderr, \"slab size %u cannot be lower than or equal to a previous class size\\n\", size);\n            return false;\n        }\n        if (size <= last_size + CHUNK_ALIGN_BYTES) {\n            fprintf(stderr, \"slab size %u must be at least %d bytes larger than previous class\\n\",\n                    size, CHUNK_ALIGN_BYTES);\n            return false;\n        }\n        slab_sizes[i++] = size;\n        last_size = size;\n        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {\n            fprintf(stderr, \"too many slab classes specified\\n\");\n            return false;\n        }\n    }\n\n    slab_sizes[i] = 0;\n    return true;\n}\n\nint main (int argc, char **argv) {\n    int c;\n    bool lock_memory = false;\n    bool do_daemonize = false;\n    bool preallocate = false;\n    int maxcore = 0;\n    char *username = NULL;\n    char *pid_file = NULL;\n    struct passwd *pw;\n    struct rlimit rlim;\n    char *buf;\n    char unit = '\\0';\n    int size_max = 0;\n    int retval = EXIT_SUCCESS;\n    /* listening sockets */\n    static int *l_socket = NULL;\n\n    /* udp socket */\n    static int *u_socket = NULL;\n    bool protocol_specified = false;\n    bool tcp_specified = false;\n    bool udp_specified = false;\n    bool start_lru_maintainer = false;\n    bool start_lru_crawler = false;\n    enum hashfunc_type hash_type = JENKINS_HASH;\n    uint32_t tocrawl;\n    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];\n    bool use_slab_sizes = false;\n    char *slab_sizes_unparsed = NULL;\n    bool slab_chunk_size_changed = false;\n\n    char *subopts, *subopts_orig;\n    char *subopts_value;\n    enum {\n        MAXCONNS_FAST = 0,\n        HASHPOWER_INIT,\n        SLAB_REASSIGN,\n        SLAB_AUTOMOVE,\n        TAIL_REPAIR_TIME,\n        HASH_ALGORITHM,\n        LRU_CRAWLER,\n        LRU_CRAWLER_SLEEP,\n        LRU_CRAWLER_TOCRAWL,\n        LRU_MAINTAINER,\n        HOT_LRU_PCT,\n        WARM_LRU_PCT,\n        HOT_MAX_AGE,\n        WARM_MAX_FACTOR,\n        TEMPORARY_TTL,\n        IDLE_TIMEOUT,\n        WATCHER_LOGBUF_SIZE,\n        WORKER_LOGBUF_SIZE,\n        SLAB_SIZES,\n        SLAB_CHUNK_MAX,\n        TRACK_SIZES,\n        NO_INLINE_ASCII_RESP,\n        MODERN\n    };\n    char *const subopts_tokens[] = {\n        [MAXCONNS_FAST] = \"maxconns_fast\",\n        [HASHPOWER_INIT] = \"hashpower\",\n        [SLAB_REASSIGN] = \"slab_reassign\",\n        [SLAB_AUTOMOVE] = \"slab_automove\",\n        [TAIL_REPAIR_TIME] = \"tail_repair_time\",\n        [HASH_ALGORITHM] = \"hash_algorithm\",\n        [LRU_CRAWLER] = \"lru_crawler\",\n        [LRU_CRAWLER_SLEEP] = \"lru_crawler_sleep\",\n        [LRU_CRAWLER_TOCRAWL] = \"lru_crawler_tocrawl\",\n        [LRU_MAINTAINER] = \"lru_maintainer\",\n        [HOT_LRU_PCT] = \"hot_lru_pct\",\n        [WARM_LRU_PCT] = \"warm_lru_pct\",\n        [HOT_MAX_AGE] = \"hot_max_age\",\n        [WARM_MAX_FACTOR] = \"warm_max_factor\",\n        [TEMPORARY_TTL] = \"temporary_ttl\",\n        [IDLE_TIMEOUT] = \"idle_timeout\",\n        [WATCHER_LOGBUF_SIZE] = \"watcher_logbuf_size\",\n        [WORKER_LOGBUF_SIZE] = \"worker_logbuf_size\",\n        [SLAB_SIZES] = \"slab_sizes\",\n        [SLAB_CHUNK_MAX] = \"slab_chunk_max\",\n        [TRACK_SIZES] = \"track_sizes\",\n        [NO_INLINE_ASCII_RESP] = \"no_inline_ascii_resp\",\n        [MODERN] = \"modern\",\n        NULL\n    };\n\n    if (!sanitycheck()) {\n        return EX_OSERR;\n    }\n\n    /* handle SIGINT and SIGTERM */\n    signal(SIGINT, sig_handler);\n    signal(SIGTERM, sig_handler);\n\n    /* init settings */\n    settings_init();\n\n    /* Run regardless of initializing it later */\n    init_lru_crawler();\n    init_lru_maintainer();\n\n    /* set stderr non-buffering (for running under, say, daemontools) */\n    setbuf(stderr, NULL);\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"a:\"  /* access mask for unix socket */\n          \"A\"  /* enable admin shutdown commannd */\n          \"p:\"  /* TCP port number to listen on */\n          \"s:\"  /* unix socket path to listen on */\n          \"U:\"  /* UDP port number to listen on */\n          \"m:\"  /* max memory to use for items in megabytes */\n          \"M\"   /* return error on memory exhausted */\n          \"c:\"  /* max simultaneous connections */\n          \"k\"   /* lock down all paged memory */\n          \"hiV\" /* help, licence info, version */\n          \"r\"   /* maximize core file limit */\n          \"v\"   /* verbose */\n          \"d\"   /* daemon mode */\n          \"l:\"  /* interface to listen on */\n          \"u:\"  /* user identity to run as */\n          \"P:\"  /* save PID in file */\n          \"f:\"  /* factor? */\n          \"n:\"  /* minimum space allocated for key+value+flags */\n          \"t:\"  /* threads */\n          \"D:\"  /* prefix delimiter? */\n          \"L\"   /* Large memory pages */\n          \"R:\"  /* max requests per event */\n          \"C\"   /* Disable use of CAS */\n          \"b:\"  /* backlog queue limit */\n          \"B:\"  /* Binding protocol */\n          \"I:\"  /* Max item size */\n          \"S\"   /* Sasl ON */\n          \"F\"   /* Disable flush_all */\n          \"X\"   /* Disable dump commands */\n          \"o:\"  /* Extended generic options */\n        ))) {\n        switch (c) {\n        case 'A':\n            /* enables \"shutdown\" command */\n            settings.shutdown_command = true;\n            break;\n\n        case 'a':\n            /* access for unix domain socket, as octal mask (like chmod)*/\n            settings.access= strtol(optarg,NULL,8);\n            break;\n\n        case 'U':\n            settings.udpport = atoi(optarg);\n            udp_specified = true;\n            break;\n        case 'p':\n            settings.port = atoi(optarg);\n            tcp_specified = true;\n            break;\n        case 's':\n            settings.socketpath = optarg;\n            break;\n        case 'm':\n            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n            break;\n        case 'M':\n            settings.evict_to_free = 0;\n            break;\n        case 'c':\n            settings.maxconns = atoi(optarg);\n            if (settings.maxconns <= 0) {\n                fprintf(stderr, \"Maximum connections must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'h':\n            usage();\n            exit(EXIT_SUCCESS);\n        case 'i':\n            usage_license();\n            exit(EXIT_SUCCESS);\n        case 'V':\n            printf(PACKAGE \" \" VERSION \"\\n\");\n            exit(EXIT_SUCCESS);\n        case 'k':\n            lock_memory = true;\n            break;\n        case 'v':\n            settings.verbose++;\n            break;\n        case 'l':\n            if (settings.inter != NULL) {\n                if (strstr(settings.inter, optarg) != NULL) {\n                    break;\n                }\n                size_t len = strlen(settings.inter) + strlen(optarg) + 2;\n                char *p = malloc(len);\n                if (p == NULL) {\n                    fprintf(stderr, \"Failed to allocate memory\\n\");\n                    return 1;\n                }\n                snprintf(p, len, \"%s,%s\", settings.inter, optarg);\n                free(settings.inter);\n                settings.inter = p;\n            } else {\n                settings.inter= strdup(optarg);\n            }\n            break;\n        case 'd':\n            do_daemonize = true;\n            break;\n        case 'r':\n            maxcore = 1;\n            break;\n        case 'R':\n            settings.reqs_per_event = atoi(optarg);\n            if (settings.reqs_per_event == 0) {\n                fprintf(stderr, \"Number of requests per event must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'u':\n            username = optarg;\n            break;\n        case 'P':\n            pid_file = optarg;\n            break;\n        case 'f':\n            settings.factor = atof(optarg);\n            if (settings.factor <= 1.0) {\n                fprintf(stderr, \"Factor must be greater than 1\\n\");\n                return 1;\n            }\n            break;\n        case 'n':\n            settings.chunk_size = atoi(optarg);\n            if (settings.chunk_size == 0) {\n                fprintf(stderr, \"Chunk size must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 't':\n            settings.num_threads = atoi(optarg);\n            if (settings.num_threads <= 0) {\n                fprintf(stderr, \"Number of threads must be greater than 0\\n\");\n                return 1;\n            }\n            /* There're other problems when you get above 64 threads.\n             * In the future we should portably detect # of cores for the\n             * default.\n             */\n            if (settings.num_threads > 64) {\n                fprintf(stderr, \"WARNING: Setting a high number of worker\"\n                                \"threads is not recommended.\\n\"\n                                \" Set this value to the number of cores in\"\n                                \" your machine or less.\\n\");\n            }\n            break;\n        case 'D':\n            if (! optarg || ! optarg[0]) {\n                fprintf(stderr, \"No delimiter specified\\n\");\n                return 1;\n            }\n            settings.prefix_delimiter = optarg[0];\n            settings.detail_enabled = 1;\n            break;\n        case 'L' :\n            if (enable_large_pages() == 0) {\n                preallocate = true;\n            } else {\n                fprintf(stderr, \"Cannot enable large pages on this system\\n\"\n                    \"(There is no Linux support as of this version)\\n\");\n                return 1;\n            }\n            break;\n        case 'C' :\n            settings.use_cas = false;\n            break;\n        case 'b' :\n            settings.backlog = atoi(optarg);\n            break;\n        case 'B':\n            protocol_specified = true;\n            if (strcmp(optarg, \"auto\") == 0) {\n                settings.binding_protocol = negotiating_prot;\n            } else if (strcmp(optarg, \"binary\") == 0) {\n                settings.binding_protocol = binary_prot;\n            } else if (strcmp(optarg, \"ascii\") == 0) {\n                settings.binding_protocol = ascii_prot;\n            } else {\n                fprintf(stderr, \"Invalid value for binding protocol: %s\\n\"\n                        \" -- should be one of auto, binary, or ascii\\n\", optarg);\n                exit(EX_USAGE);\n            }\n            break;\n        case 'I':\n            buf = strdup(optarg);\n            unit = buf[strlen(buf)-1];\n            if (unit == 'k' || unit == 'm' ||\n                unit == 'K' || unit == 'M') {\n                buf[strlen(buf)-1] = '\\0';\n                size_max = atoi(buf);\n                if (unit == 'k' || unit == 'K')\n                    size_max *= 1024;\n                if (unit == 'm' || unit == 'M')\n                    size_max *= 1024 * 1024;\n                settings.item_size_max = size_max;\n            } else {\n                settings.item_size_max = atoi(buf);\n            }\n            free(buf);\n            if (settings.item_size_max < 1024) {\n                fprintf(stderr, \"Item max size cannot be less than 1024 bytes.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > (settings.maxbytes / 4)) {\n                fprintf(stderr, \"Cannot set item size limit higher than 1/4 of memory max.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > (1024 * 1024 * 1024)) {\n                fprintf(stderr, \"Cannot set item size limit higher than a gigabyte.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024) {\n                if (!slab_chunk_size_changed) {\n                    // Ideal new default is 16k, but needs stitching.\n                    settings.slab_chunk_size_max = 524288;\n                }\n            }\n            break;\n        case 'S': /* set Sasl authentication to true. Default is false */\n#ifndef ENABLE_SASL\n            fprintf(stderr, \"This server is not built with SASL support.\\n\");\n            exit(EX_USAGE);\n#endif\n            settings.sasl = true;\n            break;\n       case 'F' :\n            settings.flush_enabled = false;\n            break;\n       case 'X' :\n            settings.dump_enabled = false;\n            break;\n        case 'o': /* It's sub-opts time! */\n            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */\n\n            while (*subopts != '\\0') {\n\n            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {\n            case MAXCONNS_FAST:\n                settings.maxconns_fast = true;\n                break;\n            case HASHPOWER_INIT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing numeric argument for hashpower\\n\");\n                    return 1;\n                }\n                settings.hashpower_init = atoi(subopts_value);\n                if (settings.hashpower_init < 12) {\n                    fprintf(stderr, \"Initial hashtable multiplier of %d is too low\\n\",\n                        settings.hashpower_init);\n                    return 1;\n                } else if (settings.hashpower_init > 64) {\n                    fprintf(stderr, \"Initial hashtable multiplier of %d is too high\\n\"\n                        \"Choose a value based on \\\"STAT hash_power_level\\\" from a running instance\\n\",\n                        settings.hashpower_init);\n                    return 1;\n                }\n                break;\n            case SLAB_REASSIGN:\n                settings.slab_reassign = true;\n                break;\n            case SLAB_AUTOMOVE:\n                if (subopts_value == NULL) {\n                    settings.slab_automove = 1;\n                    break;\n                }\n                settings.slab_automove = atoi(subopts_value);\n                if (settings.slab_automove < 0 || settings.slab_automove > 2) {\n                    fprintf(stderr, \"slab_automove must be between 0 and 2\\n\");\n                    return 1;\n                }\n                break;\n            case TAIL_REPAIR_TIME:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing numeric argument for tail_repair_time\\n\");\n                    return 1;\n                }\n                settings.tail_repair_time = atoi(subopts_value);\n                if (settings.tail_repair_time < 10) {\n                    fprintf(stderr, \"Cannot set tail_repair_time to less than 10 seconds\\n\");\n                    return 1;\n                }\n                break;\n            case HASH_ALGORITHM:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hash_algorithm argument\\n\");\n                    return 1;\n                };\n                if (strcmp(subopts_value, \"jenkins\") == 0) {\n                    hash_type = JENKINS_HASH;\n                } else if (strcmp(subopts_value, \"murmur3\") == 0) {\n                    hash_type = MURMUR3_HASH;\n                } else {\n                    fprintf(stderr, \"Unknown hash_algorithm option (jenkins, murmur3)\\n\");\n                    return 1;\n                }\n                break;\n            case LRU_CRAWLER:\n                start_lru_crawler = true;\n                break;\n            case LRU_CRAWLER_SLEEP:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing lru_crawler_sleep value\\n\");\n                    return 1;\n                }\n                settings.lru_crawler_sleep = atoi(subopts_value);\n                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {\n                    fprintf(stderr, \"LRU crawler sleep must be between 0 and 1 second\\n\");\n                    return 1;\n                }\n                break;\n            case LRU_CRAWLER_TOCRAWL:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing lru_crawler_tocrawl value\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &tocrawl)) {\n                    fprintf(stderr, \"lru_crawler_tocrawl takes a numeric 32bit value\\n\");\n                    return 1;\n                }\n                settings.lru_crawler_tocrawl = tocrawl;\n                break;\n            case LRU_MAINTAINER:\n                start_lru_maintainer = true;\n                settings.lru_segmented = true;\n                break;\n            case HOT_LRU_PCT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hot_lru_pct argument\\n\");\n                    return 1;\n                }\n                settings.hot_lru_pct = atoi(subopts_value);\n                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {\n                    fprintf(stderr, \"hot_lru_pct must be > 1 and < 80\\n\");\n                    return 1;\n                }\n                break;\n            case WARM_LRU_PCT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing warm_lru_pct argument\\n\");\n                    return 1;\n                }\n                settings.warm_lru_pct = atoi(subopts_value);\n                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {\n                    fprintf(stderr, \"warm_lru_pct must be > 1 and < 80\\n\");\n                    return 1;\n                }\n                break;\n            case HOT_MAX_AGE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hot_max_age argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.hot_max_age)) {\n                    fprintf(stderr, \"invalid argument to hot_max_age\\n\");\n                    return 1;\n                }\n                break;\n            case WARM_MAX_FACTOR:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing warm_max_factor argument\\n\");\n                    return 1;\n                }\n                settings.warm_max_factor = atof(subopts_value);\n                if (settings.warm_max_factor <= 0) {\n                    fprintf(stderr, \"warm_max_factor must be > 0\\n\");\n                    return 1;\n                }\n                break;\n            case TEMPORARY_TTL:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing temporary_ttl argument\\n\");\n                    return 1;\n                }\n                settings.temp_lru = true;\n                settings.temporary_ttl = atoi(subopts_value);\n                break;\n            case IDLE_TIMEOUT:\n                settings.idle_timeout = atoi(subopts_value);\n                break;\n            case WATCHER_LOGBUF_SIZE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing watcher_logbuf_size argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {\n                    fprintf(stderr, \"could not parse argument to watcher_logbuf_size\\n\");\n                    return 1;\n                }\n                settings.logger_watcher_buf_size *= 1024; /* kilobytes */\n                break;\n            case WORKER_LOGBUF_SIZE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing worker_logbuf_size argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {\n                    fprintf(stderr, \"could not parse argument to worker_logbuf_size\\n\");\n                    return 1;\n                }\n                settings.logger_buf_size *= 1024; /* kilobytes */\n            case SLAB_SIZES:\n                slab_sizes_unparsed = subopts_value;\n                break;\n            case SLAB_CHUNK_MAX:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing slab_chunk_max argument\\n\");\n                }\n                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {\n                    fprintf(stderr, \"could not parse argument to slab_chunk_max\\n\");\n                }\n                slab_chunk_size_changed = true;\n                break;\n            case TRACK_SIZES:\n                item_stats_sizes_init();\n                break;\n            case NO_INLINE_ASCII_RESP:\n                settings.inline_ascii_response = false;\n                break;\n            case MODERN:\n                /* Modernized defaults. Need to add equivalent no_* flags\n                 * before making truly default. */\n                // chunk default should come after stitching is fixed.\n                //settings.slab_chunk_size_max = 16384;\n\n                // With slab_ressign, pages are always 1MB, so anything larger\n                // than .5m ends up using 1m anyway. With this we at least\n                // avoid having several slab classes that use 1m.\n                if (!slab_chunk_size_changed) {\n                    settings.slab_chunk_size_max = 524288;\n                }\n                settings.slab_reassign = true;\n                settings.slab_automove = 1;\n                settings.maxconns_fast = true;\n                settings.inline_ascii_response = false;\n                settings.lru_segmented = true;\n                hash_type = MURMUR3_HASH;\n                start_lru_crawler = true;\n                start_lru_maintainer = true;\n                break;\n            default:\n                printf(\"Illegal suboption \\\"%s\\\"\\n\", subopts_value);\n                return 1;\n            }\n\n            }\n            free(subopts_orig);\n            break;\n        default:\n            fprintf(stderr, \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    if (settings.slab_chunk_size_max > settings.item_size_max) {\n        fprintf(stderr, \"slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\\n\",\n                settings.slab_chunk_size_max, settings.item_size_max);\n        exit(EX_USAGE);\n    }\n\n    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {\n        fprintf(stderr, \"-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\\n\",\n                settings.item_size_max, settings.slab_chunk_size_max);\n        exit(EX_USAGE);\n    }\n\n    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {\n        fprintf(stderr, \"slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\\n\",\n                settings.slab_chunk_size_max, settings.slab_page_size);\n        exit(EX_USAGE);\n    }\n\n    // Reserve this for the new default. If factor size hasn't changed, use\n    // new default.\n    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {\n        settings.factor = 1.08;\n    }*/\n\n    if (slab_sizes_unparsed != NULL) {\n        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {\n            use_slab_sizes = true;\n        } else {\n            exit(EX_USAGE);\n        }\n    }\n\n    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {\n        fprintf(stderr, \"hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\\n\");\n        exit(EX_USAGE);\n    }\n\n    if (settings.temp_lru && !start_lru_maintainer) {\n        fprintf(stderr, \"temporary_ttl requires lru_maintainer to be enabled\\n\");\n        exit(EX_USAGE);\n    }\n\n    if (hash_init(hash_type) != 0) {\n        fprintf(stderr, \"Failed to initialize hash_algorithm!\\n\");\n        exit(EX_USAGE);\n    }\n\n    /*\n     * Use one workerthread to serve each UDP port if the user specified\n     * multiple ports\n     */\n    if (settings.inter != NULL && strchr(settings.inter, ',')) {\n        settings.num_threads_per_udp = 1;\n    } else {\n        settings.num_threads_per_udp = settings.num_threads;\n    }\n\n    if (settings.sasl) {\n        if (!protocol_specified) {\n            settings.binding_protocol = binary_prot;\n        } else {\n            if (settings.binding_protocol != binary_prot) {\n                fprintf(stderr, \"ERROR: You cannot allow the ASCII protocol while using SASL.\\n\");\n                exit(EX_USAGE);\n            }\n        }\n    }\n\n    if (tcp_specified && !udp_specified) {\n        settings.udpport = settings.port;\n    } else if (udp_specified && !tcp_specified) {\n        settings.port = settings.udpport;\n    }\n\n    if (maxcore != 0) {\n        struct rlimit rlim_new;\n        /*\n         * First try raising to infinity; if that fails, try bringing\n         * the soft limit to the hard.\n         */\n        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {\n            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {\n                /* failed. try raising just to the old max */\n                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;\n                (void)setrlimit(RLIMIT_CORE, &rlim_new);\n            }\n        }\n        /*\n         * getrlimit again to see what we ended up with. Only fail if\n         * the soft limit ends up 0, because then no core files will be\n         * created at all.\n         */\n\n        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {\n            fprintf(stderr, \"failed to ensure corefile creation\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /*\n     * If needed, increase rlimits to allow as many connections\n     * as needed.\n     */\n\n    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n        fprintf(stderr, \"failed to getrlimit number of files\\n\");\n        exit(EX_OSERR);\n    } else {\n        rlim.rlim_cur = settings.maxconns;\n        rlim.rlim_max = settings.maxconns;\n        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n            fprintf(stderr, \"failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /* lose root privileges if we have them */\n    if (getuid() == 0 || geteuid() == 0) {\n        if (username == 0 || *username == '\\0') {\n            fprintf(stderr, \"can't run as root without the -u switch\\n\");\n            exit(EX_USAGE);\n        }\n        if ((pw = getpwnam(username)) == 0) {\n            fprintf(stderr, \"can't find the user %s to switch to\\n\", username);\n            exit(EX_NOUSER);\n        }\n        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {\n            fprintf(stderr, \"failed to assume identity of user %s\\n\", username);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* Initialize Sasl if -S was specified */\n    if (settings.sasl) {\n        init_sasl();\n    }\n\n    /* daemonize if requested */\n    /* if we want to ensure our ability to dump core, don't chdir to / */\n    if (do_daemonize) {\n        if (sigignore(SIGHUP) == -1) {\n            perror(\"Failed to ignore SIGHUP\");\n        }\n        if (daemonize(maxcore, settings.verbose) == -1) {\n            fprintf(stderr, \"failed to daemon() in order to daemonize\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    /* lock paged memory if needed */\n    if (lock_memory) {\n#ifdef HAVE_MLOCKALL\n        int res = mlockall(MCL_CURRENT | MCL_FUTURE);\n        if (res != 0) {\n            fprintf(stderr, \"warning: -k invalid, mlockall() failed: %s\\n\",\n                    strerror(errno));\n        }\n#else\n        fprintf(stderr, \"warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\\n\");\n#endif\n    }\n\n    /* initialize main thread libevent instance */\n    main_base = event_init();\n\n    /* initialize other stuff */\n    logger_init();\n    stats_init();\n    assoc_init(settings.hashpower_init);\n    conn_init();\n    slabs_init(settings.maxbytes, settings.factor, preallocate,\n            use_slab_sizes ? slab_sizes : NULL);\n\n    /*\n     * ignore SIGPIPE signals; we can use errno == EPIPE if we\n     * need that information\n     */\n    if (sigignore(SIGPIPE) == -1) {\n        perror(\"failed to ignore SIGPIPE; sigaction\");\n        exit(EX_OSERR);\n    }\n    /* start up worker threads if MT mode */\n    memcached_thread_init(settings.num_threads);\n\n    if (start_assoc_maintenance_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    if (start_lru_crawler && start_item_crawler_thread() != 0) {\n        fprintf(stderr, \"Failed to enable LRU crawler thread\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (start_lru_maintainer && start_lru_maintainer_thread() != 0) {\n        fprintf(stderr, \"Failed to enable LRU maintainer thread\\n\");\n        return 1;\n    }\n\n    if (settings.slab_reassign &&\n        start_slab_maintenance_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    /* initialise clock event */\n    clock_handler(0, 0, 0);\n\n    /* create unix mode sockets after dropping privileges */\n    if (settings.socketpath != NULL) {\n        errno = 0;\n        if (server_socket_unix(settings.socketpath,settings.access)) {\n            vperror(\"failed to listen on UNIX socket: %s\", settings.socketpath);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* create the listening socket, bind it, and init */\n    if (settings.socketpath == NULL) {\n        const char *portnumber_filename = getenv(\"MEMCACHED_PORT_FILENAME\");\n        char *temp_portnumber_filename = NULL;\n        size_t len;\n        FILE *portnumber_file = NULL;\n\n        if (portnumber_filename != NULL) {\n            len = strlen(portnumber_filename)+4+1;\n            temp_portnumber_filename = malloc(len);\n            snprintf(temp_portnumber_filename,\n                     len,\n                     \"%s.lck\", portnumber_filename);\n\n            portnumber_file = fopen(temp_portnumber_filename, \"a\");\n            if (portnumber_file == NULL) {\n                fprintf(stderr, \"Failed to open \\\"%s\\\": %s\\n\",\n                        temp_portnumber_filename, strerror(errno));\n            }\n        }\n\n        errno = 0;\n        if (settings.port && server_sockets(settings.port, tcp_transport,\n                                           portnumber_file)) {\n            vperror(\"failed to listen on TCP port %d\", settings.port);\n            exit(EX_OSERR);\n        }\n\n        /*\n         * initialization order: first create the listening sockets\n         * (may need root on low ports), then drop root if needed,\n         * then daemonise if needed, then init libevent (in some cases\n         * descriptors created by libevent wouldn't survive forking).\n         */\n\n        /* create the UDP listening socket and bind it */\n        errno = 0;\n        if (settings.udpport && server_sockets(settings.udpport, udp_transport,\n                                              portnumber_file)) {\n            vperror(\"failed to listen on UDP port %d\", settings.udpport);\n            exit(EX_OSERR);\n        }\n\n        if (portnumber_file) {\n            fclose(portnumber_file);\n            rename(temp_portnumber_filename, portnumber_filename);\n            free(temp_portnumber_filename);\n        }\n    }\n\n    /* Give the sockets a moment to open. I know this is dumb, but the error\n     * is only an advisory.\n     */\n    usleep(1000);\n    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {\n        fprintf(stderr, \"Maxconns setting is too low, use -c to increase.\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (pid_file != NULL) {\n        save_pid(pid_file);\n    }\n\n    /* Drop privileges no longer needed */\n    drop_privileges();\n\n    /* Initialize the uriencode lookup table. */\n    uriencode_init();\n\n    /* enter the event loop */\n    if (event_base_loop(main_base, 0) != 0) {\n        retval = EXIT_FAILURE;\n    }\n\n    stop_assoc_maintenance_thread();\n\n    /* remove the PID file if we're a daemon */\n    if (do_daemonize)\n        remove_pidfile(pid_file);\n    /* Clean up strdup() call for bind() address */\n    if (settings.inter)\n      free(settings.inter);\n    if (l_socket)\n      free(l_socket);\n    if (u_socket)\n      free(u_socket);\n\n    return retval;\n}\n"], "fixing_code": ["/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/*\n *  memcached - memory caching daemon\n *\n *       http://www.memcached.org/\n *\n *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.\n *\n *  Use and distribution licensed under the BSD license.  See\n *  the LICENSE file for full text.\n *\n *  Authors:\n *      Anatoly Vorobey <mellon@pobox.com>\n *      Brad Fitzpatrick <brad@danga.com>\n */\n#include \"memcached.h\"\n#include <sys/stat.h>\n#include <sys/socket.h>\n#include <sys/un.h>\n#include <signal.h>\n#include <sys/param.h>\n#include <sys/resource.h>\n#include <sys/uio.h>\n#include <ctype.h>\n#include <stdarg.h>\n\n/* some POSIX systems need the following definition\n * to get mlockall flags out of sys/mman.h.  */\n#ifndef _P1003_1B_VISIBLE\n#define _P1003_1B_VISIBLE\n#endif\n/* need this to get IOV_MAX on some platforms. */\n#ifndef __need_IOV_MAX\n#define __need_IOV_MAX\n#endif\n#include <pwd.h>\n#include <sys/mman.h>\n#include <fcntl.h>\n#include <netinet/tcp.h>\n#include <arpa/inet.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <assert.h>\n#include <limits.h>\n#include <sysexits.h>\n#include <stddef.h>\n\n/* FreeBSD 4.x doesn't have IOV_MAX exposed. */\n#ifndef IOV_MAX\n#if defined(__FreeBSD__) || defined(__APPLE__) || defined(__GNU__)\n# define IOV_MAX 1024\n/* GNU/Hurd don't set MAXPATHLEN\n * http://www.gnu.org/software/hurd/hurd/porting/guidelines.html#PATH_MAX_tt_MAX_PATH_tt_MAXPATHL */\n#ifndef MAXPATHLEN\n#define MAXPATHLEN 4096\n#endif\n#endif\n#endif\n\n/*\n * forward declarations\n */\nstatic void drive_machine(conn *c);\nstatic int new_socket(struct addrinfo *ai);\nstatic int try_read_command(conn *c);\n\nenum try_read_result {\n    READ_DATA_RECEIVED,\n    READ_NO_DATA_RECEIVED,\n    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */\n    READ_MEMORY_ERROR      /** failed to allocate more memory */\n};\n\nstatic enum try_read_result try_read_network(conn *c);\nstatic enum try_read_result try_read_udp(conn *c);\n\nstatic void conn_set_state(conn *c, enum conn_states state);\nstatic int start_conn_timeout_thread();\n\n/* stats */\nstatic void stats_init(void);\nstatic void server_stats(ADD_STAT add_stats, conn *c);\nstatic void process_stat_settings(ADD_STAT add_stats, void *c);\nstatic void conn_to_str(const conn *c, char *buf);\n\n\n/* defaults */\nstatic void settings_init(void);\n\n/* event handling, network IO */\nstatic void event_handler(const int fd, const short which, void *arg);\nstatic void conn_close(conn *c);\nstatic void conn_init(void);\nstatic bool update_event(conn *c, const int new_flags);\nstatic void complete_nread(conn *c);\nstatic void process_command(conn *c, char *command);\nstatic void write_and_free(conn *c, char *buf, int bytes);\nstatic int ensure_iov_space(conn *c);\nstatic int add_iov(conn *c, const void *buf, int len);\nstatic int add_chunked_item_iovs(conn *c, item *it, int len);\nstatic int add_msghdr(conn *c);\nstatic void write_bin_error(conn *c, protocol_binary_response_status err,\n                            const char *errstr, int swallow);\n\nstatic void conn_free(conn *c);\n\n/** exported globals **/\nstruct stats stats;\nstruct stats_state stats_state;\nstruct settings settings;\ntime_t process_started;     /* when the process was started */\nconn **conns;\n\nstruct slab_rebalance slab_rebal;\nvolatile int slab_rebalance_signal;\n\n/** file scope variables **/\nstatic conn *listen_conn = NULL;\nstatic int max_fds;\nstatic struct event_base *main_base;\n\nenum transmit_result {\n    TRANSMIT_COMPLETE,   /** All done writing. */\n    TRANSMIT_INCOMPLETE, /** More data remaining to write. */\n    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */\n    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */\n};\n\nstatic enum transmit_result transmit(conn *c);\n\n/* This reduces the latency without adding lots of extra wiring to be able to\n * notify the listener thread of when to listen again.\n * Also, the clock timer could be broken out into its own thread and we\n * can block the listener via a condition.\n */\nstatic volatile bool allow_new_conns = true;\nstatic struct event maxconnsevent;\nstatic void maxconns_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 0, .tv_usec = 10000};\n\n    if (fd == -42 || allow_new_conns == false) {\n        /* reschedule in 10ms if we need to keep polling */\n        evtimer_set(&maxconnsevent, maxconns_handler, 0);\n        event_base_set(main_base, &maxconnsevent);\n        evtimer_add(&maxconnsevent, &t);\n    } else {\n        evtimer_del(&maxconnsevent);\n        accept_new_conns(true);\n    }\n}\n\n#define REALTIME_MAXDELTA 60*60*24*30\n\n/*\n * given time value that's either unix time or delta from current unix time, return\n * unix time. Use the fact that delta can't exceed one month (and real time value can't\n * be that low).\n */\nstatic rel_time_t realtime(const time_t exptime) {\n    /* no. of seconds in 30 days - largest possible delta exptime */\n\n    if (exptime == 0) return 0; /* 0 means never expire */\n\n    if (exptime > REALTIME_MAXDELTA) {\n        /* if item expiration is at/before the server started, give it an\n           expiration time of 1 second after the server started.\n           (because 0 means don't expire).  without this, we'd\n           underflow and wrap around to some large value way in the\n           future, effectively making items expiring in the past\n           really expiring never */\n        if (exptime <= process_started)\n            return (rel_time_t)1;\n        return (rel_time_t)(exptime - process_started);\n    } else {\n        return (rel_time_t)(exptime + current_time);\n    }\n}\n\nstatic void stats_init(void) {\n    memset(&stats, 0, sizeof(struct stats));\n    memset(&stats_state, 0, sizeof(struct stats_state));\n    stats_state.accepting_conns = true; /* assuming we start in this state. */\n\n    /* make the time we started always be 2 seconds before we really\n       did, so time(0) - time.started is never zero.  if so, things\n       like 'settings.oldest_live' which act as booleans as well as\n       values are now false in boolean context... */\n    process_started = time(0) - ITEM_UPDATE_INTERVAL - 2;\n    stats_prefix_init();\n}\n\nstatic void stats_reset(void) {\n    STATS_LOCK();\n    memset(&stats, 0, sizeof(struct stats));\n    stats_prefix_clear();\n    STATS_UNLOCK();\n    threadlocal_stats_reset();\n    item_stats_reset();\n}\n\nstatic void settings_init(void) {\n    settings.use_cas = true;\n    settings.access = 0700;\n    settings.port = 11211;\n    settings.udpport = 11211;\n    /* By default this string should be NULL for getaddrinfo() */\n    settings.inter = NULL;\n    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */\n    settings.maxconns = 1024;         /* to limit connections-related memory to about 5MB */\n    settings.verbose = 0;\n    settings.oldest_live = 0;\n    settings.oldest_cas = 0;          /* supplements accuracy of oldest_live */\n    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */\n    settings.socketpath = NULL;       /* by default, not using a unix socket */\n    settings.factor = 1.25;\n    settings.chunk_size = 48;         /* space for a modest key and value */\n    settings.num_threads = 4;         /* N workers */\n    settings.num_threads_per_udp = 0;\n    settings.prefix_delimiter = ':';\n    settings.detail_enabled = 0;\n    settings.reqs_per_event = 20;\n    settings.backlog = 1024;\n    settings.binding_protocol = negotiating_prot;\n    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */\n    settings.slab_page_size = 1024 * 1024; /* chunks are split from 1MB pages. */\n    settings.slab_chunk_size_max = settings.slab_page_size;\n    settings.sasl = false;\n    settings.maxconns_fast = false;\n    settings.lru_crawler = false;\n    settings.lru_crawler_sleep = 100;\n    settings.lru_crawler_tocrawl = 0;\n    settings.lru_maintainer_thread = false;\n    settings.lru_segmented = false;\n    settings.hot_lru_pct = 32;\n    settings.warm_lru_pct = 32;\n    settings.hot_max_age = 3600;\n    settings.warm_max_factor = 2.0;\n    settings.inline_ascii_response = true;\n    settings.temp_lru = false;\n    settings.temporary_ttl = 61;\n    settings.idle_timeout = 0; /* disabled */\n    settings.hashpower_init = 0;\n    settings.slab_reassign = false;\n    settings.slab_automove = 0;\n    settings.shutdown_command = false;\n    settings.tail_repair_time = TAIL_REPAIR_TIME_DEFAULT;\n    settings.flush_enabled = true;\n    settings.dump_enabled = true;\n    settings.crawls_persleep = 1000;\n    settings.logger_watcher_buf_size = LOGGER_WATCHER_BUF_SIZE;\n    settings.logger_buf_size = LOGGER_BUF_SIZE;\n}\n\n/*\n * Adds a message header to a connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int add_msghdr(conn *c)\n{\n    struct msghdr *msg;\n\n    assert(c != NULL);\n\n    if (c->msgsize == c->msgused) {\n        msg = realloc(c->msglist, c->msgsize * 2 * sizeof(struct msghdr));\n        if (! msg) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->msglist = msg;\n        c->msgsize *= 2;\n    }\n\n    msg = c->msglist + c->msgused;\n\n    /* this wipes msg_iovlen, msg_control, msg_controllen, and\n       msg_flags, the last 3 of which aren't defined on solaris: */\n    memset(msg, 0, sizeof(struct msghdr));\n\n    msg->msg_iov = &c->iov[c->iovused];\n\n    if (IS_UDP(c->transport) && c->request_addr_size > 0) {\n        msg->msg_name = &c->request_addr;\n        msg->msg_namelen = c->request_addr_size;\n    }\n\n    c->msgbytes = 0;\n    c->msgused++;\n\n    if (IS_UDP(c->transport)) {\n        /* Leave room for the UDP header, which we'll fill in later. */\n        return add_iov(c, NULL, UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\nextern pthread_mutex_t conn_lock;\n\n/* Connection timeout thread bits */\nstatic pthread_t conn_timeout_tid;\n\n#define CONNS_PER_SLICE 100\n#define TIMEOUT_MSG_SIZE (1 + sizeof(int))\nstatic void *conn_timeout_thread(void *arg) {\n    int i;\n    conn *c;\n    char buf[TIMEOUT_MSG_SIZE];\n    rel_time_t oldest_last_cmd;\n    int sleep_time;\n    useconds_t timeslice = 1000000 / (max_fds / CONNS_PER_SLICE);\n\n    while(1) {\n        if (settings.verbose > 2)\n            fprintf(stderr, \"idle timeout thread at top of connection list\\n\");\n\n        oldest_last_cmd = current_time;\n\n        for (i = 0; i < max_fds; i++) {\n            if ((i % CONNS_PER_SLICE) == 0) {\n                if (settings.verbose > 2)\n                    fprintf(stderr, \"idle timeout thread sleeping for %ulus\\n\",\n                        (unsigned int)timeslice);\n                usleep(timeslice);\n            }\n\n            if (!conns[i])\n                continue;\n\n            c = conns[i];\n\n            if (!IS_TCP(c->transport))\n                continue;\n\n            if (c->state != conn_new_cmd && c->state != conn_read)\n                continue;\n\n            if ((current_time - c->last_cmd_time) > settings.idle_timeout) {\n                buf[0] = 't';\n                memcpy(&buf[1], &i, sizeof(int));\n                if (write(c->thread->notify_send_fd, buf, TIMEOUT_MSG_SIZE)\n                    != TIMEOUT_MSG_SIZE)\n                    perror(\"Failed to write timeout to notify pipe\");\n            } else {\n                if (c->last_cmd_time < oldest_last_cmd)\n                    oldest_last_cmd = c->last_cmd_time;\n            }\n        }\n\n        /* This is the soonest we could have another connection time out */\n        sleep_time = settings.idle_timeout - (current_time - oldest_last_cmd) + 1;\n        if (sleep_time <= 0)\n            sleep_time = 1;\n\n        if (settings.verbose > 2)\n            fprintf(stderr,\n                    \"idle timeout thread finished pass, sleeping for %ds\\n\",\n                    sleep_time);\n        usleep((useconds_t) sleep_time * 1000000);\n    }\n\n    return NULL;\n}\n\nstatic int start_conn_timeout_thread() {\n    int ret;\n\n    if (settings.idle_timeout == 0)\n        return -1;\n\n    if ((ret = pthread_create(&conn_timeout_tid, NULL,\n        conn_timeout_thread, NULL)) != 0) {\n        fprintf(stderr, \"Can't create idle connection timeout thread: %s\\n\",\n            strerror(ret));\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * Initializes the connections array. We don't actually allocate connection\n * structures until they're needed, so as to avoid wasting memory when the\n * maximum connection count is much higher than the actual number of\n * connections.\n *\n * This does end up wasting a few pointers' worth of memory for FDs that are\n * used for things other than connections, but that's worth it in exchange for\n * being able to directly index the conns array by FD.\n */\nstatic void conn_init(void) {\n    /* We're unlikely to see an FD much higher than maxconns. */\n    int next_fd = dup(1);\n    int headroom = 10;      /* account for extra unexpected open FDs */\n    struct rlimit rl;\n\n    max_fds = settings.maxconns + headroom + next_fd;\n\n    /* But if possible, get the actual highest FD we can possibly ever see. */\n    if (getrlimit(RLIMIT_NOFILE, &rl) == 0) {\n        max_fds = rl.rlim_max;\n    } else {\n        fprintf(stderr, \"Failed to query maximum file descriptor; \"\n                        \"falling back to maxconns\\n\");\n    }\n\n    close(next_fd);\n\n    if ((conns = calloc(max_fds, sizeof(conn *))) == NULL) {\n        fprintf(stderr, \"Failed to allocate connection structures\\n\");\n        /* This is unrecoverable so bail out early. */\n        exit(1);\n    }\n}\n\nstatic const char *prot_text(enum protocol prot) {\n    char *rv = \"unknown\";\n    switch(prot) {\n        case ascii_prot:\n            rv = \"ascii\";\n            break;\n        case binary_prot:\n            rv = \"binary\";\n            break;\n        case negotiating_prot:\n            rv = \"auto-negotiate\";\n            break;\n    }\n    return rv;\n}\n\nvoid conn_close_idle(conn *c) {\n    if (settings.idle_timeout > 0 &&\n        (current_time - c->last_cmd_time) > settings.idle_timeout) {\n        if (c->state != conn_new_cmd && c->state != conn_read) {\n            if (settings.verbose > 1)\n                fprintf(stderr,\n                    \"fd %d wants to timeout, but isn't in read state\", c->sfd);\n            return;\n        }\n\n        if (settings.verbose > 1)\n            fprintf(stderr, \"Closing idle fd %d\\n\", c->sfd);\n\n        c->thread->stats.idle_kicks++;\n\n        conn_set_state(c, conn_closing);\n        drive_machine(c);\n    }\n}\n\n/* bring conn back from a sidethread. could have had its event base moved. */\nvoid conn_worker_readd(conn *c) {\n    c->ev_flags = EV_READ | EV_PERSIST;\n    event_set(&c->event, c->sfd, c->ev_flags, event_handler, (void *)c);\n    event_base_set(c->thread->base, &c->event);\n    c->state = conn_new_cmd;\n\n    if (event_add(&c->event, 0) == -1) {\n        perror(\"event_add\");\n    }\n}\n\nconn *conn_new(const int sfd, enum conn_states init_state,\n                const int event_flags,\n                const int read_buffer_size, enum network_transport transport,\n                struct event_base *base) {\n    conn *c;\n\n    assert(sfd >= 0 && sfd < max_fds);\n    c = conns[sfd];\n\n    if (NULL == c) {\n        if (!(c = (conn *)calloc(1, sizeof(conn)))) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            fprintf(stderr, \"Failed to allocate connection object\\n\");\n            return NULL;\n        }\n        MEMCACHED_CONN_CREATE(c);\n\n        c->rbuf = c->wbuf = 0;\n        c->ilist = 0;\n        c->suffixlist = 0;\n        c->iov = 0;\n        c->msglist = 0;\n        c->hdrbuf = 0;\n\n        c->rsize = read_buffer_size;\n        c->wsize = DATA_BUFFER_SIZE;\n        c->isize = ITEM_LIST_INITIAL;\n        c->suffixsize = SUFFIX_LIST_INITIAL;\n        c->iovsize = IOV_LIST_INITIAL;\n        c->msgsize = MSG_LIST_INITIAL;\n        c->hdrsize = 0;\n\n        c->rbuf = (char *)malloc((size_t)c->rsize);\n        c->wbuf = (char *)malloc((size_t)c->wsize);\n        c->ilist = (item **)malloc(sizeof(item *) * c->isize);\n        c->suffixlist = (char **)malloc(sizeof(char *) * c->suffixsize);\n        c->iov = (struct iovec *)malloc(sizeof(struct iovec) * c->iovsize);\n        c->msglist = (struct msghdr *)malloc(sizeof(struct msghdr) * c->msgsize);\n\n        if (c->rbuf == 0 || c->wbuf == 0 || c->ilist == 0 || c->iov == 0 ||\n                c->msglist == 0 || c->suffixlist == 0) {\n            conn_free(c);\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            fprintf(stderr, \"Failed to allocate buffers for connection\\n\");\n            return NULL;\n        }\n\n        STATS_LOCK();\n        stats_state.conn_structs++;\n        STATS_UNLOCK();\n\n        c->sfd = sfd;\n        conns[sfd] = c;\n    }\n\n    c->transport = transport;\n    c->protocol = settings.binding_protocol;\n\n    /* unix socket mode doesn't need this, so zeroed out.  but why\n     * is this done for every command?  presumably for UDP\n     * mode.  */\n    if (!settings.socketpath) {\n        c->request_addr_size = sizeof(c->request_addr);\n    } else {\n        c->request_addr_size = 0;\n    }\n\n    if (transport == tcp_transport && init_state == conn_new_cmd) {\n        if (getpeername(sfd, (struct sockaddr *) &c->request_addr,\n                        &c->request_addr_size)) {\n            perror(\"getpeername\");\n            memset(&c->request_addr, 0, sizeof(c->request_addr));\n        }\n    }\n\n    if (settings.verbose > 1) {\n        if (init_state == conn_listening) {\n            fprintf(stderr, \"<%d server listening (%s)\\n\", sfd,\n                prot_text(c->protocol));\n        } else if (IS_UDP(transport)) {\n            fprintf(stderr, \"<%d server listening (udp)\\n\", sfd);\n        } else if (c->protocol == negotiating_prot) {\n            fprintf(stderr, \"<%d new auto-negotiating client connection\\n\",\n                    sfd);\n        } else if (c->protocol == ascii_prot) {\n            fprintf(stderr, \"<%d new ascii client connection.\\n\", sfd);\n        } else if (c->protocol == binary_prot) {\n            fprintf(stderr, \"<%d new binary client connection.\\n\", sfd);\n        } else {\n            fprintf(stderr, \"<%d new unknown (%d) client connection\\n\",\n                sfd, c->protocol);\n            assert(false);\n        }\n    }\n\n    c->state = init_state;\n    c->rlbytes = 0;\n    c->cmd = -1;\n    c->rbytes = c->wbytes = 0;\n    c->wcurr = c->wbuf;\n    c->rcurr = c->rbuf;\n    c->ritem = 0;\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n    c->ileft = 0;\n    c->suffixleft = 0;\n    c->iovused = 0;\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->authenticated = false;\n    c->last_cmd_time = current_time; /* initialize for idle kicker */\n\n    c->write_and_go = init_state;\n    c->write_and_free = 0;\n    c->item = 0;\n\n    c->noreply = false;\n\n    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = event_flags;\n\n    if (event_add(&c->event, 0) == -1) {\n        perror(\"event_add\");\n        return NULL;\n    }\n\n    STATS_LOCK();\n    stats_state.curr_conns++;\n    stats.total_conns++;\n    STATS_UNLOCK();\n\n    MEMCACHED_CONN_ALLOCATE(c->sfd);\n\n    return c;\n}\n\nstatic void conn_release_items(conn *c) {\n    assert(c != NULL);\n\n    if (c->item) {\n        item_remove(c->item);\n        c->item = 0;\n    }\n\n    while (c->ileft > 0) {\n        item *it = *(c->icurr);\n        assert((it->it_flags & ITEM_SLABBED) == 0);\n        item_remove(it);\n        c->icurr++;\n        c->ileft--;\n    }\n\n    if (c->suffixleft != 0) {\n        for (; c->suffixleft > 0; c->suffixleft--, c->suffixcurr++) {\n            do_cache_free(c->thread->suffix_cache, *(c->suffixcurr));\n        }\n    }\n\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n}\n\nstatic void conn_cleanup(conn *c) {\n    assert(c != NULL);\n\n    conn_release_items(c);\n\n    if (c->write_and_free) {\n        free(c->write_and_free);\n        c->write_and_free = 0;\n    }\n\n    if (c->sasl_conn) {\n        assert(settings.sasl);\n        sasl_dispose(&c->sasl_conn);\n        c->sasl_conn = NULL;\n    }\n\n    if (IS_UDP(c->transport)) {\n        conn_set_state(c, conn_read);\n    }\n}\n\n/*\n * Frees a connection.\n */\nvoid conn_free(conn *c) {\n    if (c) {\n        assert(c != NULL);\n        assert(c->sfd >= 0 && c->sfd < max_fds);\n\n        MEMCACHED_CONN_DESTROY(c);\n        conns[c->sfd] = NULL;\n        if (c->hdrbuf)\n            free(c->hdrbuf);\n        if (c->msglist)\n            free(c->msglist);\n        if (c->rbuf)\n            free(c->rbuf);\n        if (c->wbuf)\n            free(c->wbuf);\n        if (c->ilist)\n            free(c->ilist);\n        if (c->suffixlist)\n            free(c->suffixlist);\n        if (c->iov)\n            free(c->iov);\n        free(c);\n    }\n}\n\nstatic void conn_close(conn *c) {\n    assert(c != NULL);\n\n    /* delete the event, the socket and the conn */\n    event_del(&c->event);\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d connection closed.\\n\", c->sfd);\n\n    conn_cleanup(c);\n\n    MEMCACHED_CONN_RELEASE(c->sfd);\n    conn_set_state(c, conn_closed);\n    close(c->sfd);\n\n    pthread_mutex_lock(&conn_lock);\n    allow_new_conns = true;\n    pthread_mutex_unlock(&conn_lock);\n\n    STATS_LOCK();\n    stats_state.curr_conns--;\n    STATS_UNLOCK();\n\n    return;\n}\n\n/*\n * Shrinks a connection's buffers if they're too big.  This prevents\n * periodic large \"get\" requests from permanently chewing lots of server\n * memory.\n *\n * This should only be called in between requests since it can wipe output\n * buffers!\n */\nstatic void conn_shrink(conn *c) {\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport))\n        return;\n\n    if (c->rsize > READ_BUFFER_HIGHWAT && c->rbytes < DATA_BUFFER_SIZE) {\n        char *newbuf;\n\n        if (c->rcurr != c->rbuf)\n            memmove(c->rbuf, c->rcurr, (size_t)c->rbytes);\n\n        newbuf = (char *)realloc((void *)c->rbuf, DATA_BUFFER_SIZE);\n\n        if (newbuf) {\n            c->rbuf = newbuf;\n            c->rsize = DATA_BUFFER_SIZE;\n        }\n        /* TODO check other branch... */\n        c->rcurr = c->rbuf;\n    }\n\n    if (c->isize > ITEM_LIST_HIGHWAT) {\n        item **newbuf = (item**) realloc((void *)c->ilist, ITEM_LIST_INITIAL * sizeof(c->ilist[0]));\n        if (newbuf) {\n            c->ilist = newbuf;\n            c->isize = ITEM_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->msgsize > MSG_LIST_HIGHWAT) {\n        struct msghdr *newbuf = (struct msghdr *) realloc((void *)c->msglist, MSG_LIST_INITIAL * sizeof(c->msglist[0]));\n        if (newbuf) {\n            c->msglist = newbuf;\n            c->msgsize = MSG_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->iovsize > IOV_LIST_HIGHWAT) {\n        struct iovec *newbuf = (struct iovec *) realloc((void *)c->iov, IOV_LIST_INITIAL * sizeof(c->iov[0]));\n        if (newbuf) {\n            c->iov = newbuf;\n            c->iovsize = IOV_LIST_INITIAL;\n        }\n    /* TODO check return value */\n    }\n}\n\n/**\n * Convert a state name to a human readable form.\n */\nstatic const char *state_text(enum conn_states state) {\n    const char* const statenames[] = { \"conn_listening\",\n                                       \"conn_new_cmd\",\n                                       \"conn_waiting\",\n                                       \"conn_read\",\n                                       \"conn_parse_cmd\",\n                                       \"conn_write\",\n                                       \"conn_nread\",\n                                       \"conn_swallow\",\n                                       \"conn_closing\",\n                                       \"conn_mwrite\",\n                                       \"conn_closed\",\n                                       \"conn_watch\" };\n    return statenames[state];\n}\n\n/*\n * Sets a connection's current state in the state machine. Any special\n * processing that needs to happen on certain state transitions can\n * happen here.\n */\nstatic void conn_set_state(conn *c, enum conn_states state) {\n    assert(c != NULL);\n    assert(state >= conn_listening && state < conn_max_state);\n\n    if (state != c->state) {\n        if (settings.verbose > 2) {\n            fprintf(stderr, \"%d: going from %s to %s\\n\",\n                    c->sfd, state_text(c->state),\n                    state_text(state));\n        }\n\n        if (state == conn_write || state == conn_mwrite) {\n            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->wbuf, c->wbytes);\n        }\n        c->state = state;\n    }\n}\n\n/*\n * Ensures that there is room for another struct iovec in a connection's\n * iov list.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int ensure_iov_space(conn *c) {\n    assert(c != NULL);\n\n    if (c->iovused >= c->iovsize) {\n        int i, iovnum;\n        struct iovec *new_iov = (struct iovec *)realloc(c->iov,\n                                (c->iovsize * 2) * sizeof(struct iovec));\n        if (! new_iov) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->iov = new_iov;\n        c->iovsize *= 2;\n\n        /* Point all the msghdr structures at the new list. */\n        for (i = 0, iovnum = 0; i < c->msgused; i++) {\n            c->msglist[i].msg_iov = &c->iov[iovnum];\n            iovnum += c->msglist[i].msg_iovlen;\n        }\n    }\n\n    return 0;\n}\n\n\n/*\n * Adds data to the list of pending data that will be written out to a\n * connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n * Note: This is a hot path for at least ASCII protocol. While there is\n * redundant code in splitting TCP/UDP handling, any reduction in steps has a\n * large impact for TCP connections.\n */\n\nstatic int add_iov(conn *c, const void *buf, int len) {\n    struct msghdr *m;\n    int leftover;\n\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport)) {\n        do {\n            m = &c->msglist[c->msgused - 1];\n\n            /*\n             * Limit UDP packets to UDP_MAX_PAYLOAD_SIZE bytes.\n             */\n\n            /* We may need to start a new msghdr if this one is full. */\n            if (m->msg_iovlen == IOV_MAX ||\n                (c->msgbytes >= UDP_MAX_PAYLOAD_SIZE)) {\n                add_msghdr(c);\n                m = &c->msglist[c->msgused - 1];\n            }\n\n            if (ensure_iov_space(c) != 0)\n                return -1;\n\n            /* If the fragment is too big to fit in the datagram, split it up */\n            if (len + c->msgbytes > UDP_MAX_PAYLOAD_SIZE) {\n                leftover = len + c->msgbytes - UDP_MAX_PAYLOAD_SIZE;\n                len -= leftover;\n            } else {\n                leftover = 0;\n            }\n\n            m = &c->msglist[c->msgused - 1];\n            m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n            m->msg_iov[m->msg_iovlen].iov_len = len;\n\n            c->msgbytes += len;\n            c->iovused++;\n            m->msg_iovlen++;\n\n            buf = ((char *)buf) + len;\n            len = leftover;\n        } while (leftover > 0);\n    } else {\n        /* Optimized path for TCP connections */\n        m = &c->msglist[c->msgused - 1];\n        if (m->msg_iovlen == IOV_MAX) {\n            add_msghdr(c);\n            m = &c->msglist[c->msgused - 1];\n        }\n\n        if (ensure_iov_space(c) != 0)\n            return -1;\n\n        m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n        m->msg_iov[m->msg_iovlen].iov_len = len;\n        c->msgbytes += len;\n        c->iovused++;\n        m->msg_iovlen++;\n    }\n\n    return 0;\n}\n\nstatic int add_chunked_item_iovs(conn *c, item *it, int len) {\n    assert(it->it_flags & ITEM_CHUNKED);\n    item_chunk *ch = (item_chunk *) ITEM_data(it);\n    while (ch) {\n        int todo = (len > ch->used) ? ch->used : len;\n        if (add_iov(c, ch->data, todo) != 0) {\n            return -1;\n        }\n        ch = ch->next;\n        len -= todo;\n    }\n    return 0;\n}\n\n/*\n * Constructs a set of UDP headers and attaches them to the outgoing messages.\n */\nstatic int build_udp_headers(conn *c) {\n    int i;\n    unsigned char *hdr;\n\n    assert(c != NULL);\n\n    if (c->msgused > c->hdrsize) {\n        void *new_hdrbuf;\n        if (c->hdrbuf) {\n            new_hdrbuf = realloc(c->hdrbuf, c->msgused * 2 * UDP_HEADER_SIZE);\n        } else {\n            new_hdrbuf = malloc(c->msgused * 2 * UDP_HEADER_SIZE);\n        }\n\n        if (! new_hdrbuf) {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            return -1;\n        }\n        c->hdrbuf = (unsigned char *)new_hdrbuf;\n        c->hdrsize = c->msgused * 2;\n    }\n\n    hdr = c->hdrbuf;\n    for (i = 0; i < c->msgused; i++) {\n        c->msglist[i].msg_iov[0].iov_base = (void*)hdr;\n        c->msglist[i].msg_iov[0].iov_len = UDP_HEADER_SIZE;\n        *hdr++ = c->request_id / 256;\n        *hdr++ = c->request_id % 256;\n        *hdr++ = i / 256;\n        *hdr++ = i % 256;\n        *hdr++ = c->msgused / 256;\n        *hdr++ = c->msgused % 256;\n        *hdr++ = 0;\n        *hdr++ = 0;\n        assert((void *) hdr == (caddr_t)c->msglist[i].msg_iov[0].iov_base + UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\n\nstatic void out_string(conn *c, const char *str) {\n    size_t len;\n\n    assert(c != NULL);\n\n    if (c->noreply) {\n        if (settings.verbose > 1)\n            fprintf(stderr, \">%d NOREPLY %s\\n\", c->sfd, str);\n        c->noreply = false;\n        conn_set_state(c, conn_new_cmd);\n        return;\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \">%d %s\\n\", c->sfd, str);\n\n    /* Nuke a partial output... */\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    add_msghdr(c);\n\n    len = strlen(str);\n    if ((len + 2) > c->wsize) {\n        /* ought to be always enough. just fail for simplicity */\n        str = \"SERVER_ERROR output line too long\";\n        len = strlen(str);\n    }\n\n    memcpy(c->wbuf, str, len);\n    memcpy(c->wbuf + len, \"\\r\\n\", 2);\n    c->wbytes = len + 2;\n    c->wcurr = c->wbuf;\n\n    conn_set_state(c, conn_write);\n    c->write_and_go = conn_new_cmd;\n    return;\n}\n\n/*\n * Outputs a protocol-specific \"out of memory\" error. For ASCII clients,\n * this is equivalent to out_string().\n */\nstatic void out_of_memory(conn *c, char *ascii_error) {\n    const static char error_prefix[] = \"SERVER_ERROR \";\n    const static int error_prefix_len = sizeof(error_prefix) - 1;\n\n    if (c->protocol == binary_prot) {\n        /* Strip off the generic error prefix; it's irrelevant in binary */\n        if (!strncmp(ascii_error, error_prefix, error_prefix_len)) {\n            ascii_error += error_prefix_len;\n        }\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, ascii_error, 0);\n    } else {\n        out_string(c, ascii_error);\n    }\n}\n\n/*\n * we get here after reading the value in set/add/replace commands. The command\n * has been stored in c->cmd, and the item is ready in c->item.\n */\nstatic void complete_nread_ascii(conn *c) {\n    assert(c != NULL);\n\n    item *it = c->item;\n    int comm = c->cmd;\n    enum store_item_type ret;\n    bool is_valid = false;\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    if ((it->it_flags & ITEM_CHUNKED) == 0) {\n        if (strncmp(ITEM_data(it) + it->nbytes - 2, \"\\r\\n\", 2) == 0) {\n            is_valid = true;\n        }\n    } else {\n        char buf[2];\n        /* should point to the final item chunk */\n        item_chunk *ch = (item_chunk *) c->ritem;\n        assert(ch->used != 0);\n        /* :( We need to look at the last two bytes. This could span two\n         * chunks.\n         */\n        if (ch->used > 1) {\n            buf[0] = ch->data[ch->used - 2];\n            buf[1] = ch->data[ch->used - 1];\n        } else {\n            assert(ch->prev);\n            assert(ch->used == 1);\n            buf[0] = ch->prev->data[ch->prev->used - 1];\n            buf[1] = ch->data[ch->used - 1];\n        }\n        if (strncmp(buf, \"\\r\\n\", 2) == 0) {\n            is_valid = true;\n        } else {\n            assert(1 == 0);\n        }\n    }\n\n    if (!is_valid) {\n        out_string(c, \"CLIENT_ERROR bad data chunk\");\n    } else {\n      ret = store_item(it, comm, c);\n\n#ifdef ENABLE_DTRACE\n      uint64_t cas = ITEM_get_cas(it);\n      switch (c->cmd) {\n      case NREAD_ADD:\n          MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,\n                                (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_REPLACE:\n          MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,\n                                    (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_APPEND:\n          MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,\n                                   (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_PREPEND:\n          MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,\n                                    (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_SET:\n          MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,\n                                (ret == 1) ? it->nbytes : -1, cas);\n          break;\n      case NREAD_CAS:\n          MEMCACHED_COMMAND_CAS(c->sfd, ITEM_key(it), it->nkey, it->nbytes,\n                                cas);\n          break;\n      }\n#endif\n\n      switch (ret) {\n      case STORED:\n          out_string(c, \"STORED\");\n          break;\n      case EXISTS:\n          out_string(c, \"EXISTS\");\n          break;\n      case NOT_FOUND:\n          out_string(c, \"NOT_FOUND\");\n          break;\n      case NOT_STORED:\n          out_string(c, \"NOT_STORED\");\n          break;\n      default:\n          out_string(c, \"SERVER_ERROR Unhandled storage type.\");\n      }\n\n    }\n\n    item_remove(c->item);       /* release the c->item reference */\n    c->item = 0;\n}\n\n/**\n * get a pointer to the start of the request struct for the current command\n */\nstatic void* binary_get_request(conn *c) {\n    char *ret = c->rcurr;\n    ret -= (sizeof(c->binary_header) + c->binary_header.request.keylen +\n            c->binary_header.request.extlen);\n\n    assert(ret >= c->rbuf);\n    return ret;\n}\n\n/**\n * get a pointer to the key in this request\n */\nstatic char* binary_get_key(conn *c) {\n    return c->rcurr - (c->binary_header.request.keylen);\n}\n\nstatic void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {\n    protocol_binary_response_header* header;\n\n    assert(c);\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        /* This should never run out of memory because iov and msg lists\n         * have minimum sizes big enough to hold an error response.\n         */\n        out_of_memory(c, \"SERVER_ERROR out of memory adding binary header\");\n        return;\n    }\n\n    header = (protocol_binary_response_header *)c->wbuf;\n\n    header->response.magic = (uint8_t)PROTOCOL_BINARY_RES;\n    header->response.opcode = c->binary_header.request.opcode;\n    header->response.keylen = (uint16_t)htons(key_len);\n\n    header->response.extlen = (uint8_t)hdr_len;\n    header->response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES;\n    header->response.status = (uint16_t)htons(err);\n\n    header->response.bodylen = htonl(body_len);\n    header->response.opaque = c->opaque;\n    header->response.cas = htonll(c->cas);\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \">%d Writing bin response:\", c->sfd);\n        for (ii = 0; ii < sizeof(header->bytes); ++ii) {\n            if (ii % 4 == 0) {\n                fprintf(stderr, \"\\n>%d  \", c->sfd);\n            }\n            fprintf(stderr, \" 0x%02x\", header->bytes[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    add_iov(c, c->wbuf, sizeof(header->response));\n}\n\n/**\n * Writes a binary error response. If errstr is supplied, it is used as the\n * error text; otherwise a generic description of the error status code is\n * included.\n */\nstatic void write_bin_error(conn *c, protocol_binary_response_status err,\n                            const char *errstr, int swallow) {\n    size_t len;\n\n    if (!errstr) {\n        switch (err) {\n        case PROTOCOL_BINARY_RESPONSE_ENOMEM:\n            errstr = \"Out of memory\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:\n            errstr = \"Unknown command\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:\n            errstr = \"Not found\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_EINVAL:\n            errstr = \"Invalid arguments\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:\n            errstr = \"Data exists for key.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_E2BIG:\n            errstr = \"Too large.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL:\n            errstr = \"Non-numeric server-side value for incr or decr\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_NOT_STORED:\n            errstr = \"Not stored.\";\n            break;\n        case PROTOCOL_BINARY_RESPONSE_AUTH_ERROR:\n            errstr = \"Auth failure.\";\n            break;\n        default:\n            assert(false);\n            errstr = \"UNHANDLED ERROR\";\n            fprintf(stderr, \">%d UNHANDLED ERROR: %d\\n\", c->sfd, err);\n        }\n    }\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \">%d Writing an error: %s\\n\", c->sfd, errstr);\n    }\n\n    len = strlen(errstr);\n    add_bin_header(c, err, 0, 0, len);\n    if (len > 0) {\n        add_iov(c, errstr, len);\n    }\n    conn_set_state(c, conn_mwrite);\n    if(swallow > 0) {\n        c->sbytes = swallow;\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n}\n\n/* Form and send a response to a command over the binary protocol */\nstatic void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {\n    if (!c->noreply || c->cmd == PROTOCOL_BINARY_CMD_GET ||\n        c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n        add_bin_header(c, 0, hlen, keylen, dlen);\n        if(dlen > 0) {\n            add_iov(c, d, dlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        conn_set_state(c, conn_new_cmd);\n    }\n}\n\nstatic void complete_incr_bin(conn *c) {\n    item *it;\n    char *key;\n    size_t nkey;\n    /* Weird magic in add_delta forces me to pad here */\n    char tmpbuf[INCR_MAX_STORAGE_LEN];\n    uint64_t cas = 0;\n\n    protocol_binary_response_incr* rsp = (protocol_binary_response_incr*)c->wbuf;\n    protocol_binary_request_incr* req = binary_get_request(c);\n\n    assert(c != NULL);\n    assert(c->wsize >= sizeof(*rsp));\n\n    /* fix byteorder in the request */\n    req->message.body.delta = ntohll(req->message.body.delta);\n    req->message.body.initial = ntohll(req->message.body.initial);\n    req->message.body.expiration = ntohl(req->message.body.expiration);\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        int i;\n        fprintf(stderr, \"incr \");\n\n        for (i = 0; i < nkey; i++) {\n            fprintf(stderr, \"%c\", key[i]);\n        }\n        fprintf(stderr, \" %lld, %llu, %d\\n\",\n                (long long)req->message.body.delta,\n                (long long)req->message.body.initial,\n                req->message.body.expiration);\n    }\n\n    if (c->binary_header.request.cas != 0) {\n        cas = c->binary_header.request.cas;\n    }\n    switch(add_delta(c, key, nkey, c->cmd == PROTOCOL_BINARY_CMD_INCREMENT,\n                     req->message.body.delta, tmpbuf,\n                     &cas)) {\n    case OK:\n        rsp->message.body.value = htonll(strtoull(tmpbuf, NULL, 10));\n        if (cas) {\n            c->cas = cas;\n        }\n        write_bin_response(c, &rsp->message.body, 0, 0,\n                           sizeof(rsp->message.body.value));\n        break;\n    case NON_NUMERIC:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL, NULL, 0);\n        break;\n    case EOM:\n        out_of_memory(c, \"SERVER_ERROR Out of memory incrementing value\");\n        break;\n    case DELTA_ITEM_NOT_FOUND:\n        if (req->message.body.expiration != 0xffffffff) {\n            /* Save some room for the response */\n            rsp->message.body.value = htonll(req->message.body.initial);\n\n            snprintf(tmpbuf, INCR_MAX_STORAGE_LEN, \"%llu\",\n                (unsigned long long)req->message.body.initial);\n            int res = strlen(tmpbuf);\n            it = item_alloc(key, nkey, 0, realtime(req->message.body.expiration),\n                            res + 2);\n\n            if (it != NULL) {\n                memcpy(ITEM_data(it), tmpbuf, res);\n                memcpy(ITEM_data(it) + res, \"\\r\\n\", 2);\n\n                if (store_item(it, NREAD_ADD, c)) {\n                    c->cas = ITEM_get_cas(it);\n                    write_bin_response(c, &rsp->message.body, 0, 0, sizeof(rsp->message.body.value));\n                } else {\n                    write_bin_error(c, PROTOCOL_BINARY_RESPONSE_NOT_STORED,\n                                    NULL, 0);\n                }\n                item_remove(it);         /* release our reference */\n            } else {\n                out_of_memory(c,\n                        \"SERVER_ERROR Out of memory allocating new item\");\n            }\n        } else {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            if (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT) {\n                c->thread->stats.incr_misses++;\n            } else {\n                c->thread->stats.decr_misses++;\n            }\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        }\n        break;\n    case DELTA_ITEM_CAS_MISMATCH:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        break;\n    }\n}\n\nstatic void complete_update_bin(conn *c) {\n    protocol_binary_response_status eno = PROTOCOL_BINARY_RESPONSE_EINVAL;\n    enum store_item_type ret = NOT_STORED;\n    assert(c != NULL);\n\n    item *it = c->item;\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.slab_stats[ITEM_clsid(it)].set_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    /* We don't actually receive the trailing two characters in the bin\n     * protocol, so we're going to just set them here */\n    if ((it->it_flags & ITEM_CHUNKED) == 0) {\n        *(ITEM_data(it) + it->nbytes - 2) = '\\r';\n        *(ITEM_data(it) + it->nbytes - 1) = '\\n';\n    } else {\n        assert(c->ritem);\n        item_chunk *ch = (item_chunk *) c->ritem;\n        if (ch->size == ch->used)\n            ch = ch->next;\n        assert(ch->size - ch->used >= 2);\n        ch->data[ch->used + 1] = '\\r';\n        ch->data[ch->used + 2] = '\\n';\n        ch->used += 2;\n    }\n\n    ret = store_item(it, c->cmd, c);\n\n#ifdef ENABLE_DTRACE\n    uint64_t cas = ITEM_get_cas(it);\n    switch (c->cmd) {\n    case NREAD_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, ITEM_key(it), it->nkey,\n                              (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, ITEM_key(it), it->nkey,\n                                  (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, ITEM_key(it), it->nkey,\n                                 (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, ITEM_key(it), it->nkey,\n                                 (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    case NREAD_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, ITEM_key(it), it->nkey,\n                              (ret == STORED) ? it->nbytes : -1, cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case STORED:\n        /* Stored */\n        write_bin_response(c, NULL, 0, 0, 0);\n        break;\n    case EXISTS:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        break;\n    case NOT_FOUND:\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        break;\n    case NOT_STORED:\n    case TOO_LARGE:\n    case NO_MEMORY:\n        if (c->cmd == NREAD_ADD) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n        } else if(c->cmd == NREAD_REPLACE) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n        } else {\n            eno = PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n        }\n        write_bin_error(c, eno, NULL, 0);\n    }\n\n    item_remove(c->item);       /* release the c->item reference */\n    c->item = 0;\n}\n\nstatic void process_bin_get_or_touch(conn *c) {\n    item *it;\n\n    protocol_binary_response_get* rsp = (protocol_binary_response_get*)c->wbuf;\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n    int should_touch = (c->cmd == PROTOCOL_BINARY_CMD_TOUCH ||\n                        c->cmd == PROTOCOL_BINARY_CMD_GAT ||\n                        c->cmd == PROTOCOL_BINARY_CMD_GATK);\n    int should_return_key = (c->cmd == PROTOCOL_BINARY_CMD_GETK ||\n                             c->cmd == PROTOCOL_BINARY_CMD_GATK);\n    int should_return_value = (c->cmd != PROTOCOL_BINARY_CMD_TOUCH);\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"<%d %s \", c->sfd, should_touch ? \"TOUCH\" : \"GET\");\n        if (fwrite(key, 1, nkey, stderr)) {}\n        fputc('\\n', stderr);\n    }\n\n    if (should_touch) {\n        protocol_binary_request_touch *t = binary_get_request(c);\n        time_t exptime = ntohl(t->message.body.expiration);\n\n        it = item_touch(key, nkey, realtime(exptime), c);\n    } else {\n        it = item_get(key, nkey, c, DO_UPDATE);\n    }\n\n    if (it) {\n        /* the length has two unnecessary bytes (\"\\r\\n\") */\n        uint16_t keylen = 0;\n        uint32_t bodylen = sizeof(rsp->message.body) + (it->nbytes - 2);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (should_touch) {\n            c->thread->stats.touch_cmds++;\n            c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;\n        } else {\n            c->thread->stats.get_cmds++;\n            c->thread->stats.slab_stats[ITEM_clsid(it)].get_hits++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (should_touch) {\n            MEMCACHED_COMMAND_TOUCH(c->sfd, ITEM_key(it), it->nkey,\n                                    it->nbytes, ITEM_get_cas(it));\n        } else {\n            MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                  it->nbytes, ITEM_get_cas(it));\n        }\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_TOUCH) {\n            bodylen -= it->nbytes - 2;\n        } else if (should_return_key) {\n            bodylen += nkey;\n            keylen = nkey;\n        }\n\n        add_bin_header(c, 0, sizeof(rsp->message.body), keylen, bodylen);\n        rsp->message.header.response.cas = htonll(ITEM_get_cas(it));\n\n        // add the flags\n        if (settings.inline_ascii_response) {\n            rsp->message.body.flags = htonl(strtoul(ITEM_suffix(it), NULL, 10));\n        } else {\n            rsp->message.body.flags = htonl(*((uint32_t *)ITEM_suffix(it)));\n        }\n        add_iov(c, &rsp->message.body, sizeof(rsp->message.body));\n\n        if (should_return_key) {\n            add_iov(c, ITEM_key(it), nkey);\n        }\n\n        if (should_return_value) {\n            /* Add the data minus the CRLF */\n            if ((it->it_flags & ITEM_CHUNKED) == 0) {\n                add_iov(c, ITEM_data(it), it->nbytes - 2);\n            } else {\n                add_chunked_item_iovs(c, it, it->nbytes - 2);\n            }\n        }\n\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        /* Remember this command so we can garbage collect it later */\n        c->item = it;\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (should_touch) {\n            c->thread->stats.touch_cmds++;\n            c->thread->stats.touch_misses++;\n        } else {\n            c->thread->stats.get_cmds++;\n            c->thread->stats.get_misses++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (should_touch) {\n            MEMCACHED_COMMAND_TOUCH(c->sfd, key, nkey, -1, 0);\n        } else {\n            MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n        }\n\n        if (c->noreply) {\n            conn_set_state(c, conn_new_cmd);\n        } else {\n            if (should_return_key) {\n                char *ofs = c->wbuf + sizeof(protocol_binary_response_header);\n                add_bin_header(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                        0, nkey, nkey);\n                memcpy(ofs, key, nkey);\n                add_iov(c, ofs, nkey);\n                conn_set_state(c, conn_mwrite);\n                c->write_and_go = conn_new_cmd;\n            } else {\n                write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                                NULL, 0);\n            }\n        }\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_get(key, nkey, NULL != it);\n    }\n}\n\nstatic void append_bin_stats(const char *key, const uint16_t klen,\n                             const char *val, const uint32_t vlen,\n                             conn *c) {\n    char *buf = c->stats.buffer + c->stats.offset;\n    uint32_t bodylen = klen + vlen;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = PROTOCOL_BINARY_CMD_STAT,\n        .response.keylen = (uint16_t)htons(klen),\n        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,\n        .response.bodylen = htonl(bodylen),\n        .response.opaque = c->opaque\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (klen > 0) {\n        memcpy(buf, key, klen);\n        buf += klen;\n\n        if (vlen > 0) {\n            memcpy(buf, val, vlen);\n        }\n    }\n\n    c->stats.offset += sizeof(header.response) + bodylen;\n}\n\nstatic void append_ascii_stats(const char *key, const uint16_t klen,\n                               const char *val, const uint32_t vlen,\n                               conn *c) {\n    char *pos = c->stats.buffer + c->stats.offset;\n    uint32_t nbytes = 0;\n    int remaining = c->stats.size - c->stats.offset;\n    int room = remaining - 1;\n\n    if (klen == 0 && vlen == 0) {\n        nbytes = snprintf(pos, room, \"END\\r\\n\");\n    } else if (vlen == 0) {\n        nbytes = snprintf(pos, room, \"STAT %s\\r\\n\", key);\n    } else {\n        nbytes = snprintf(pos, room, \"STAT %s %s\\r\\n\", key, val);\n    }\n\n    c->stats.offset += nbytes;\n}\n\nstatic bool grow_stats_buf(conn *c, size_t needed) {\n    size_t nsize = c->stats.size;\n    size_t available = nsize - c->stats.offset;\n    bool rv = true;\n\n    /* Special case: No buffer -- need to allocate fresh */\n    if (c->stats.buffer == NULL) {\n        nsize = 1024;\n        available = c->stats.size = c->stats.offset = 0;\n    }\n\n    while (needed > available) {\n        assert(nsize > 0);\n        nsize = nsize << 1;\n        available = nsize - c->stats.offset;\n    }\n\n    if (nsize != c->stats.size) {\n        char *ptr = realloc(c->stats.buffer, nsize);\n        if (ptr) {\n            c->stats.buffer = ptr;\n            c->stats.size = nsize;\n        } else {\n            STATS_LOCK();\n            stats.malloc_fails++;\n            STATS_UNLOCK();\n            rv = false;\n        }\n    }\n\n    return rv;\n}\n\nstatic void append_stats(const char *key, const uint16_t klen,\n                  const char *val, const uint32_t vlen,\n                  const void *cookie)\n{\n    /* value without a key is invalid */\n    if (klen == 0 && vlen > 0) {\n        return ;\n    }\n\n    conn *c = (conn*)cookie;\n\n    if (c->protocol == binary_prot) {\n        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);\n        if (!grow_stats_buf(c, needed)) {\n            return ;\n        }\n        append_bin_stats(key, klen, val, vlen, c);\n    } else {\n        size_t needed = vlen + klen + 10; // 10 == \"STAT = \\r\\n\"\n        if (!grow_stats_buf(c, needed)) {\n            return ;\n        }\n        append_ascii_stats(key, klen, val, vlen, c);\n    }\n\n    assert(c->stats.offset <= c->stats.size);\n}\n\nstatic void process_bin_stat(conn *c) {\n    char *subcommand = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \"<%d STATS \", c->sfd);\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", subcommand[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (nkey == 0) {\n        /* request all statistics */\n        server_stats(&append_stats, c);\n        (void)get_stats(NULL, 0, &append_stats, c);\n    } else if (strncmp(subcommand, \"reset\", 5) == 0) {\n        stats_reset();\n    } else if (strncmp(subcommand, \"settings\", 8) == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strncmp(subcommand, \"detail\", 6) == 0) {\n        char *subcmd_pos = subcommand + 6;\n        if (strncmp(subcmd_pos, \" dump\", 5) == 0) {\n            int len;\n            char *dump_buf = stats_prefix_dump(&len);\n            if (dump_buf == NULL || len <= 0) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory generating stats\");\n                return ;\n            } else {\n                append_stats(\"detailed\", strlen(\"detailed\"), dump_buf, len, c);\n                free(dump_buf);\n            }\n        } else if (strncmp(subcmd_pos, \" on\", 3) == 0) {\n            settings.detail_enabled = 1;\n        } else if (strncmp(subcmd_pos, \" off\", 4) == 0) {\n            settings.detail_enabled = 0;\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n            return;\n        }\n    } else {\n        if (get_stats(subcommand, nkey, &append_stats, c)) {\n            if (c->stats.buffer == NULL) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory generating stats\");\n            } else {\n                write_and_free(c, c->stats.buffer, c->stats.offset);\n                c->stats.buffer = NULL;\n            }\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        }\n\n        return;\n    }\n\n    /* Append termination package and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n    if (c->stats.buffer == NULL) {\n        out_of_memory(c, \"SERVER_ERROR Out of memory preparing to send stats\");\n    } else {\n        write_and_free(c, c->stats.buffer, c->stats.offset);\n        c->stats.buffer = NULL;\n    }\n}\n\nstatic void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {\n    assert(c);\n    c->substate = next_substate;\n    c->rlbytes = c->keylen + extra;\n\n    /* Ok... do we have room for the extras and the key in the input buffer? */\n    ptrdiff_t offset = c->rcurr + sizeof(protocol_binary_request_header) - c->rbuf;\n    if (c->rlbytes > c->rsize - offset) {\n        size_t nsize = c->rsize;\n        size_t size = c->rlbytes + sizeof(protocol_binary_request_header);\n\n        while (size > nsize) {\n            nsize *= 2;\n        }\n\n        if (nsize != c->rsize) {\n            if (settings.verbose > 1) {\n                fprintf(stderr, \"%d: Need to grow buffer from %lu to %lu\\n\",\n                        c->sfd, (unsigned long)c->rsize, (unsigned long)nsize);\n            }\n            char *newm = realloc(c->rbuf, nsize);\n            if (newm == NULL) {\n                STATS_LOCK();\n                stats.malloc_fails++;\n                STATS_UNLOCK();\n                if (settings.verbose) {\n                    fprintf(stderr, \"%d: Failed to grow buffer.. closing connection\\n\",\n                            c->sfd);\n                }\n                conn_set_state(c, conn_closing);\n                return;\n            }\n\n            c->rbuf= newm;\n            /* rcurr should point to the same offset in the packet */\n            c->rcurr = c->rbuf + offset - sizeof(protocol_binary_request_header);\n            c->rsize = nsize;\n        }\n        if (c->rbuf != c->rcurr) {\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n            c->rcurr = c->rbuf;\n            if (settings.verbose > 1) {\n                fprintf(stderr, \"%d: Repack input buffer\\n\", c->sfd);\n            }\n        }\n    }\n\n    /* preserve the header in the buffer.. */\n    c->ritem = c->rcurr + sizeof(protocol_binary_request_header);\n    conn_set_state(c, conn_nread);\n}\n\n/* Just write an error message and disconnect the client */\nstatic void handle_binary_protocol_error(conn *c) {\n    write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, 0);\n    if (settings.verbose) {\n        fprintf(stderr, \"Protocol error (opcode %02x), close connection %d\\n\",\n                c->binary_header.request.opcode, c->sfd);\n    }\n    c->write_and_go = conn_closing;\n}\n\nstatic void init_sasl_conn(conn *c) {\n    assert(c);\n    /* should something else be returned? */\n    if (!settings.sasl)\n        return;\n\n    c->authenticated = false;\n\n    if (!c->sasl_conn) {\n        int result=sasl_server_new(\"memcached\",\n                                   NULL,\n                                   my_sasl_hostname[0] ? my_sasl_hostname : NULL,\n                                   NULL, NULL,\n                                   NULL, 0, &c->sasl_conn);\n        if (result != SASL_OK) {\n            if (settings.verbose) {\n                fprintf(stderr, \"Failed to initialize SASL conn.\\n\");\n            }\n            c->sasl_conn = NULL;\n        }\n    }\n}\n\nstatic void bin_list_sasl_mechs(conn *c) {\n    // Guard against a disabled SASL.\n    if (!settings.sasl) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                        c->binary_header.request.bodylen\n                        - c->binary_header.request.keylen);\n        return;\n    }\n\n    init_sasl_conn(c);\n    const char *result_string = NULL;\n    unsigned int string_length = 0;\n    int result=sasl_listmech(c->sasl_conn, NULL,\n                             \"\",   /* What to prepend the string with */\n                             \" \",  /* What to separate mechanisms with */\n                             \"\",   /* What to append to the string */\n                             &result_string, &string_length,\n                             NULL);\n    if (result != SASL_OK) {\n        /* Perhaps there's a better error for this... */\n        if (settings.verbose) {\n            fprintf(stderr, \"Failed to list SASL mechanisms.\\n\");\n        }\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        return;\n    }\n    write_bin_response(c, (char*)result_string, 0, 0, string_length);\n}\n\nstatic void process_bin_sasl_auth(conn *c) {\n    // Guard for handling disabled SASL on the server.\n    if (!settings.sasl) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                        c->binary_header.request.bodylen\n                        - c->binary_header.request.keylen);\n        return;\n    }\n\n    assert(c->binary_header.request.extlen == 0);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > MAX_SASL_MECH_LEN) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    char *key = binary_get_key(c);\n    assert(key);\n\n    item *it = item_alloc(key, nkey, 0, 0, vlen+2);\n\n    /* Can't use a chunked item for SASL authentication. */\n    if (it == 0 || (it->it_flags & ITEM_CHUNKED)) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_reading_sasl_auth_data;\n}\n\nstatic void process_bin_complete_sasl_auth(conn *c) {\n    assert(settings.sasl);\n    const char *out = NULL;\n    unsigned int outlen = 0;\n\n    assert(c->item);\n    init_sasl_conn(c);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > ((item*) c->item)->nkey) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        item_unlink(c->item);\n        return;\n    }\n\n    char mech[nkey+1];\n    memcpy(mech, ITEM_key((item*)c->item), nkey);\n    mech[nkey] = 0x00;\n\n    if (settings.verbose)\n        fprintf(stderr, \"mech:  ``%s'' with %d bytes of data\\n\", mech, vlen);\n\n    const char *challenge = vlen == 0 ? NULL : ITEM_data((item*) c->item);\n\n    if (vlen > ((item*) c->item)->nbytes) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_EINVAL, NULL, vlen);\n        c->write_and_go = conn_swallow;\n        item_unlink(c->item);\n        return;\n    }\n\n    int result=-1;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        result = sasl_server_start(c->sasl_conn, mech,\n                                   challenge, vlen,\n                                   &out, &outlen);\n        break;\n    case PROTOCOL_BINARY_CMD_SASL_STEP:\n        result = sasl_server_step(c->sasl_conn,\n                                  challenge, vlen,\n                                  &out, &outlen);\n        break;\n    default:\n        assert(false); /* CMD should be one of the above */\n        /* This code is pretty much impossible, but makes the compiler\n           happier */\n        if (settings.verbose) {\n            fprintf(stderr, \"Unhandled command %d with challenge %s\\n\",\n                    c->cmd, challenge);\n        }\n        break;\n    }\n\n    item_unlink(c->item);\n\n    if (settings.verbose) {\n        fprintf(stderr, \"sasl result code:  %d\\n\", result);\n    }\n\n    switch(result) {\n    case SASL_OK:\n        c->authenticated = true;\n        write_bin_response(c, \"Authenticated\", 0, 0, strlen(\"Authenticated\"));\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.auth_cmds++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n        break;\n    case SASL_CONTINUE:\n        add_bin_header(c, PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE, 0, 0, outlen);\n        if(outlen > 0) {\n            add_iov(c, out, outlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        break;\n    default:\n        if (settings.verbose)\n            fprintf(stderr, \"Unknown sasl response:  %d\\n\", result);\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.auth_cmds++;\n        c->thread->stats.auth_errors++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n    }\n}\n\nstatic bool authenticated(conn *c) {\n    assert(settings.sasl);\n    bool rv = false;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_STEP:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_VERSION:         /* FALLTHROUGH */\n        rv = true;\n        break;\n    default:\n        rv = c->authenticated;\n    }\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"authenticated() in cmd 0x%02x is %s\\n\",\n                c->cmd, rv ? \"true\" : \"false\");\n    }\n\n    return rv;\n}\n\nstatic void dispatch_bin_command(conn *c) {\n    int protocol_error = 0;\n\n    uint8_t extlen = c->binary_header.request.extlen;\n    uint16_t keylen = c->binary_header.request.keylen;\n    uint32_t bodylen = c->binary_header.request.bodylen;\n\n    if (keylen > bodylen || keylen + extlen > bodylen) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    if (settings.sasl && !authenticated(c)) {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n    c->noreply = true;\n\n    /* binprot supports 16bit keys, but internals are still 8bit */\n    if (keylen > KEY_MAX_LENGTH) {\n        handle_binary_protocol_error(c);\n        return;\n    }\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_SET;\n        break;\n    case PROTOCOL_BINARY_CMD_ADDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_ADD;\n        break;\n    case PROTOCOL_BINARY_CMD_REPLACEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_REPLACE;\n        break;\n    case PROTOCOL_BINARY_CMD_DELETEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DELETE;\n        break;\n    case PROTOCOL_BINARY_CMD_INCREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_INCREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_DECREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DECREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_QUITQ:\n        c->cmd = PROTOCOL_BINARY_CMD_QUIT;\n        break;\n    case PROTOCOL_BINARY_CMD_FLUSHQ:\n        c->cmd = PROTOCOL_BINARY_CMD_FLUSH;\n        break;\n    case PROTOCOL_BINARY_CMD_APPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_APPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_PREPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_PREPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_GETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GET;\n        break;\n    case PROTOCOL_BINARY_CMD_GETKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GETK;\n        break;\n    case PROTOCOL_BINARY_CMD_GATQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GAT;\n        break;\n    case PROTOCOL_BINARY_CMD_GATKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GATK;\n        break;\n    default:\n        c->noreply = false;\n    }\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_VERSION:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, VERSION, 0, 0, strlen(VERSION));\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_FLUSH:\n            if (keylen == 0 && bodylen == extlen && (extlen == 0 || extlen == 4)) {\n                bin_read_key(c, bin_read_flush_exptime, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_NOOP:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SET: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_ADD: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            if (extlen == 8 && keylen != 0 && bodylen >= (keylen + 8)) {\n                bin_read_key(c, bin_reading_set_header, 8);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_GETQ:  /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GET:   /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETKQ: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETK:\n            if (extlen == 0 && bodylen == keylen && keylen > 0) {\n                bin_read_key(c, bin_reading_get_key, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_DELETE:\n            if (keylen > 0 && extlen == 0 && bodylen == keylen) {\n                bin_read_key(c, bin_reading_del_header, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_INCREMENT:\n        case PROTOCOL_BINARY_CMD_DECREMENT:\n            if (keylen > 0 && extlen == 20 && bodylen == (keylen + extlen)) {\n                bin_read_key(c, bin_reading_incr_header, 20);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_APPEND:\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            if (keylen > 0 && extlen == 0) {\n                bin_read_key(c, bin_reading_set_header, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_STAT:\n            if (extlen == 0) {\n                bin_read_key(c, bin_reading_stat, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_QUIT:\n            if (keylen == 0 && extlen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n                c->write_and_go = conn_closing;\n                if (c->noreply) {\n                    conn_set_state(c, conn_closing);\n                }\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                bin_list_sasl_mechs(c);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        case PROTOCOL_BINARY_CMD_SASL_STEP:\n            if (extlen == 0 && keylen != 0) {\n                bin_read_key(c, bin_reading_sasl_auth, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_TOUCH:\n        case PROTOCOL_BINARY_CMD_GAT:\n        case PROTOCOL_BINARY_CMD_GATQ:\n        case PROTOCOL_BINARY_CMD_GATK:\n        case PROTOCOL_BINARY_CMD_GATKQ:\n            if (extlen == 4 && keylen != 0) {\n                bin_read_key(c, bin_reading_touch_key, 4);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        default:\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, NULL,\n                            bodylen);\n    }\n\n    if (protocol_error)\n        handle_binary_protocol_error(c);\n}\n\nstatic void process_bin_update(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n    protocol_binary_request_set* req = binary_get_request(c);\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    /* fix byteorder in the request */\n    req->message.body.flags = ntohl(req->message.body.flags);\n    req->message.body.expiration = ntohl(req->message.body.expiration);\n\n    vlen = c->binary_header.request.bodylen - (nkey + c->binary_header.request.extlen);\n\n    if (settings.verbose > 1) {\n        int ii;\n        if (c->cmd == PROTOCOL_BINARY_CMD_ADD) {\n            fprintf(stderr, \"<%d ADD \", c->sfd);\n        } else if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            fprintf(stderr, \"<%d SET \", c->sfd);\n        } else {\n            fprintf(stderr, \"<%d REPLACE \", c->sfd);\n        }\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", key[ii]);\n        }\n\n        fprintf(stderr, \" Value len is %d\", vlen);\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, req->message.body.flags,\n            realtime(req->message.body.expiration), vlen+2);\n\n    if (it == 0) {\n        enum store_item_type status;\n        if (! item_size_ok(nkey, req->message.body.flags, vlen + 2)) {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_E2BIG, NULL, vlen);\n            status = TOO_LARGE;\n        } else {\n            out_of_memory(c, \"SERVER_ERROR Out of memory allocating item\");\n            /* This error generating method eats the swallow value. Add here. */\n            c->sbytes = vlen;\n            status = NO_MEMORY;\n        }\n        /* FIXME: losing c->cmd since it's translated below. refactor? */\n        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,\n                NULL, status, 0, key, nkey, it->exptime, ITEM_clsid(it));\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            it = item_get(key, nkey, c, DONT_UPDATE);\n            if (it) {\n                item_unlink(it);\n                item_remove(it);\n            }\n        }\n\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    ITEM_set_cas(it, c->binary_header.request.cas);\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_ADD:\n            c->cmd = NREAD_ADD;\n            break;\n        case PROTOCOL_BINARY_CMD_SET:\n            c->cmd = NREAD_SET;\n            break;\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            c->cmd = NREAD_REPLACE;\n            break;\n        default:\n            assert(0);\n    }\n\n    if (ITEM_get_cas(it) != 0) {\n        c->cmd = NREAD_CAS;\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_read_set_value;\n}\n\nstatic void process_bin_append_prepend(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n    vlen = c->binary_header.request.bodylen - nkey;\n\n    if (settings.verbose > 1) {\n        fprintf(stderr, \"Value len is %d\\n\", vlen);\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, 0, 0, vlen+2);\n\n    if (it == 0) {\n        if (! item_size_ok(nkey, 0, vlen + 2)) {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_E2BIG, NULL, vlen);\n        } else {\n            out_of_memory(c, \"SERVER_ERROR Out of memory allocating item\");\n            /* OOM calls eat the swallow value. Add here. */\n            c->sbytes = vlen;\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    ITEM_set_cas(it, c->binary_header.request.cas);\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_APPEND:\n            c->cmd = NREAD_APPEND;\n            break;\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            c->cmd = NREAD_PREPEND;\n            break;\n        default:\n            assert(0);\n    }\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_read_set_value;\n}\n\nstatic void process_bin_flush(conn *c) {\n    time_t exptime = 0;\n    protocol_binary_request_flush* req = binary_get_request(c);\n    rel_time_t new_oldest = 0;\n\n    if (!settings.flush_enabled) {\n      // flush_all is not allowed but we log it on stats\n      write_bin_error(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, NULL, 0);\n      return;\n    }\n\n    if (c->binary_header.request.extlen == sizeof(req->message.body)) {\n        exptime = ntohl(req->message.body.expiration);\n    }\n\n    if (exptime > 0) {\n        new_oldest = realtime(exptime);\n    } else {\n        new_oldest = current_time;\n    }\n    if (settings.use_cas) {\n        settings.oldest_live = new_oldest - 1;\n        if (settings.oldest_live <= current_time)\n            settings.oldest_cas = get_cas_id();\n    } else {\n        settings.oldest_live = new_oldest;\n    }\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    c->thread->stats.flush_cmds++;\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    write_bin_response(c, NULL, 0, 0, 0);\n}\n\nstatic void process_bin_delete(conn *c) {\n    item *it;\n\n    protocol_binary_request_delete* req = binary_get_request(c);\n\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    assert(c != NULL);\n\n    if (settings.verbose > 1) {\n        int ii;\n        fprintf(stderr, \"Deleting \");\n        for (ii = 0; ii < nkey; ++ii) {\n            fprintf(stderr, \"%c\", key[ii]);\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n\n    it = item_get(key, nkey, c, DONT_UPDATE);\n    if (it) {\n        uint64_t cas = ntohll(req->message.header.request.cas);\n        if (cas == 0 || cas == ITEM_get_cas(it)) {\n            MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n            item_unlink(it);\n            write_bin_response(c, NULL, 0, 0, 0);\n        } else {\n            write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, NULL, 0);\n        }\n        item_remove(it);      /* release our reference */\n    } else {\n        write_bin_error(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, NULL, 0);\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.delete_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n    }\n}\n\nstatic void complete_nread_binary(conn *c) {\n    assert(c != NULL);\n    assert(c->cmd >= 0);\n\n    switch(c->substate) {\n    case bin_reading_set_header:\n        if (c->cmd == PROTOCOL_BINARY_CMD_APPEND ||\n                c->cmd == PROTOCOL_BINARY_CMD_PREPEND) {\n            process_bin_append_prepend(c);\n        } else {\n            process_bin_update(c);\n        }\n        break;\n    case bin_read_set_value:\n        complete_update_bin(c);\n        break;\n    case bin_reading_get_key:\n    case bin_reading_touch_key:\n        process_bin_get_or_touch(c);\n        break;\n    case bin_reading_stat:\n        process_bin_stat(c);\n        break;\n    case bin_reading_del_header:\n        process_bin_delete(c);\n        break;\n    case bin_reading_incr_header:\n        complete_incr_bin(c);\n        break;\n    case bin_read_flush_exptime:\n        process_bin_flush(c);\n        break;\n    case bin_reading_sasl_auth:\n        process_bin_sasl_auth(c);\n        break;\n    case bin_reading_sasl_auth_data:\n        process_bin_complete_sasl_auth(c);\n        break;\n    default:\n        fprintf(stderr, \"Not handling substate %d\\n\", c->substate);\n        assert(0);\n    }\n}\n\nstatic void reset_cmd_handler(conn *c) {\n    c->cmd = -1;\n    c->substate = bin_no_state;\n    if(c->item != NULL) {\n        item_remove(c->item);\n        c->item = NULL;\n    }\n    conn_shrink(c);\n    if (c->rbytes > 0) {\n        conn_set_state(c, conn_parse_cmd);\n    } else {\n        conn_set_state(c, conn_waiting);\n    }\n}\n\nstatic void complete_nread(conn *c) {\n    assert(c != NULL);\n    assert(c->protocol == ascii_prot\n           || c->protocol == binary_prot);\n\n    if (c->protocol == ascii_prot) {\n        complete_nread_ascii(c);\n    } else if (c->protocol == binary_prot) {\n        complete_nread_binary(c);\n    }\n}\n\n/* Destination must always be chunked */\n/* This should be part of item.c */\nstatic int _store_item_copy_chunks(item *d_it, item *s_it, const int len) {\n    item_chunk *dch = (item_chunk *) ITEM_data(d_it);\n    /* Advance dch until we find free space */\n    while (dch->size == dch->used) {\n        if (dch->next) {\n            dch = dch->next;\n        } else {\n            break;\n        }\n    }\n\n    if (s_it->it_flags & ITEM_CHUNKED) {\n        int remain = len;\n        item_chunk *sch = (item_chunk *) ITEM_data(s_it);\n        int copied = 0;\n        /* Fills dch's to capacity, not straight copy sch in case data is\n         * being added or removed (ie append/prepend)\n         */\n        while (sch && dch && remain) {\n            assert(dch->used <= dch->size);\n            int todo = (dch->size - dch->used < sch->used - copied)\n                ? dch->size - dch->used : sch->used - copied;\n            if (remain < todo)\n                todo = remain;\n            memcpy(dch->data + dch->used, sch->data + copied, todo);\n            dch->used += todo;\n            copied += todo;\n            remain -= todo;\n            assert(dch->used <= dch->size);\n            if (dch->size == dch->used) {\n                item_chunk *tch = do_item_alloc_chunk(dch, remain);\n                if (tch) {\n                    dch = tch;\n                } else {\n                    return -1;\n                }\n            }\n            assert(copied <= sch->used);\n            if (copied == sch->used) {\n                copied = 0;\n                sch = sch->next;\n            }\n        }\n        /* assert that the destination had enough space for the source */\n        assert(remain == 0);\n    } else {\n        int done = 0;\n        /* Fill dch's via a non-chunked item. */\n        while (len > done && dch) {\n            int todo = (dch->size - dch->used < len - done)\n                ? dch->size - dch->used : len - done;\n            //assert(dch->size - dch->used != 0);\n            memcpy(dch->data + dch->used, ITEM_data(s_it) + done, todo);\n            done += todo;\n            dch->used += todo;\n            assert(dch->used <= dch->size);\n            if (dch->size == dch->used) {\n                item_chunk *tch = do_item_alloc_chunk(dch, len - done);\n                if (tch) {\n                    dch = tch;\n                } else {\n                    return -1;\n                }\n            }\n        }\n        assert(len == done);\n    }\n    return 0;\n}\n\nstatic int _store_item_copy_data(int comm, item *old_it, item *new_it, item *add_it) {\n    if (comm == NREAD_APPEND) {\n        if (new_it->it_flags & ITEM_CHUNKED) {\n            if (_store_item_copy_chunks(new_it, old_it, old_it->nbytes - 2) == -1 ||\n                _store_item_copy_chunks(new_it, add_it, add_it->nbytes) == -1) {\n                return -1;\n            }\n        } else {\n            memcpy(ITEM_data(new_it), ITEM_data(old_it), old_it->nbytes);\n            memcpy(ITEM_data(new_it) + old_it->nbytes - 2 /* CRLF */, ITEM_data(add_it), add_it->nbytes);\n        }\n    } else {\n        /* NREAD_PREPEND */\n        if (new_it->it_flags & ITEM_CHUNKED) {\n            if (_store_item_copy_chunks(new_it, add_it, add_it->nbytes - 2) == -1 ||\n                _store_item_copy_chunks(new_it, old_it, old_it->nbytes) == -1) {\n                return -1;\n            }\n        } else {\n            memcpy(ITEM_data(new_it), ITEM_data(add_it), add_it->nbytes);\n            memcpy(ITEM_data(new_it) + add_it->nbytes - 2 /* CRLF */, ITEM_data(old_it), old_it->nbytes);\n        }\n    }\n    return 0;\n}\n\n/*\n * Stores an item in the cache according to the semantics of one of the set\n * commands. In threaded mode, this is protected by the cache lock.\n *\n * Returns the state of storage.\n */\nenum store_item_type do_store_item(item *it, int comm, conn *c, const uint32_t hv) {\n    char *key = ITEM_key(it);\n    item *old_it = do_item_get(key, it->nkey, hv, c, DONT_UPDATE);\n    enum store_item_type stored = NOT_STORED;\n\n    item *new_it = NULL;\n    uint32_t flags;\n\n    if (old_it != NULL && comm == NREAD_ADD) {\n        /* add only adds a nonexistent item, but promote to head of LRU */\n        do_item_update(old_it);\n    } else if (!old_it && (comm == NREAD_REPLACE\n        || comm == NREAD_APPEND || comm == NREAD_PREPEND))\n    {\n        /* replace only replaces an existing value; don't store */\n    } else if (comm == NREAD_CAS) {\n        /* validate cas operation */\n        if(old_it == NULL) {\n            // LRU expired\n            stored = NOT_FOUND;\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.cas_misses++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n        }\n        else if (ITEM_get_cas(it) == ITEM_get_cas(old_it)) {\n            // cas validates\n            // it and old_it may belong to different classes.\n            // I'm updating the stats for the one that's getting pushed out\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_hits++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            item_replace(old_it, it, hv);\n            stored = STORED;\n        } else {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.slab_stats[ITEM_clsid(old_it)].cas_badval++;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            if(settings.verbose > 1) {\n                fprintf(stderr, \"CAS:  failure: expected %llu, got %llu\\n\",\n                        (unsigned long long)ITEM_get_cas(old_it),\n                        (unsigned long long)ITEM_get_cas(it));\n            }\n            stored = EXISTS;\n        }\n    } else {\n        int failed_alloc = 0;\n        /*\n         * Append - combine new and old record into single one. Here it's\n         * atomic and thread-safe.\n         */\n        if (comm == NREAD_APPEND || comm == NREAD_PREPEND) {\n            /*\n             * Validate CAS\n             */\n            if (ITEM_get_cas(it) != 0) {\n                // CAS much be equal\n                if (ITEM_get_cas(it) != ITEM_get_cas(old_it)) {\n                    stored = EXISTS;\n                }\n            }\n\n            if (stored == NOT_STORED) {\n                /* we have it and old_it here - alloc memory to hold both */\n                /* flags was already lost - so recover them from ITEM_suffix(it) */\n\n                if (settings.inline_ascii_response) {\n                    flags = (uint32_t) strtoul(ITEM_suffix(old_it), (char **) NULL, 10);\n                } else {\n                    flags = *((uint32_t *)ITEM_suffix(old_it));\n                }\n\n                new_it = do_item_alloc(key, it->nkey, flags, old_it->exptime, it->nbytes + old_it->nbytes - 2 /* CRLF */);\n\n                /* copy data from it and old_it to new_it */\n                if (new_it == NULL || _store_item_copy_data(comm, old_it, new_it, it) == -1) {\n                    failed_alloc = 1;\n                    stored = NOT_STORED;\n                    // failed data copy, free up.\n                    if (new_it != NULL)\n                        item_remove(new_it);\n                } else {\n                    it = new_it;\n                }\n            }\n        }\n\n        if (stored == NOT_STORED && failed_alloc == 0) {\n            if (old_it != NULL)\n                item_replace(old_it, it, hv);\n            else\n                do_item_link(it, hv);\n\n            c->cas = ITEM_get_cas(it);\n\n            stored = STORED;\n        }\n    }\n\n    if (old_it != NULL)\n        do_item_remove(old_it);         /* release our reference */\n    if (new_it != NULL)\n        do_item_remove(new_it);\n\n    if (stored == STORED) {\n        c->cas = ITEM_get_cas(it);\n    }\n    LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE, NULL,\n            stored, comm, ITEM_key(it), it->nkey, it->exptime, ITEM_clsid(it));\n\n    return stored;\n}\n\ntypedef struct token_s {\n    char *value;\n    size_t length;\n} token_t;\n\n#define COMMAND_TOKEN 0\n#define SUBCOMMAND_TOKEN 1\n#define KEY_TOKEN 1\n\n#define MAX_TOKENS 8\n\n/*\n * Tokenize the command string by replacing whitespace with '\\0' and update\n * the token array tokens with pointer to start of each token and length.\n * Returns total number of tokens.  The last valid token is the terminal\n * token (value points to the first unprocessed character of the string and\n * length zero).\n *\n * Usage example:\n *\n *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {\n *      for(int ix = 0; tokens[ix].length != 0; ix++) {\n *          ...\n *      }\n *      ncommand = tokens[ix].value - command;\n *      command  = tokens[ix].value;\n *   }\n */\nstatic size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {\n    char *s, *e;\n    size_t ntokens = 0;\n    size_t len = strlen(command);\n    unsigned int i = 0;\n\n    assert(command != NULL && tokens != NULL && max_tokens > 1);\n\n    s = e = command;\n    for (i = 0; i < len; i++) {\n        if (*e == ' ') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n                *e = '\\0';\n                if (ntokens == max_tokens - 1) {\n                    e++;\n                    s = e; /* so we don't add an extra token */\n                    break;\n                }\n            }\n            s = e + 1;\n        }\n        e++;\n    }\n\n    if (s != e) {\n        tokens[ntokens].value = s;\n        tokens[ntokens].length = e - s;\n        ntokens++;\n    }\n\n    /*\n     * If we scanned the whole string, the terminal value pointer is null,\n     * otherwise it is the first unprocessed character.\n     */\n    tokens[ntokens].value =  *e == '\\0' ? NULL : e;\n    tokens[ntokens].length = 0;\n    ntokens++;\n\n    return ntokens;\n}\n\n/* set up a connection to write a buffer then free it, used for stats */\nstatic void write_and_free(conn *c, char *buf, int bytes) {\n    if (buf) {\n        c->write_and_free = buf;\n        c->wcurr = buf;\n        c->wbytes = bytes;\n        conn_set_state(c, conn_write);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n    }\n}\n\nstatic inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)\n{\n    int noreply_index = ntokens - 2;\n\n    /*\n      NOTE: this function is not the first place where we are going to\n      send the reply.  We could send it instead from process_command()\n      if the request line has wrong number of tokens.  However parsing\n      malformed line for \"noreply\" option is not reliable anyway, so\n      it can't be helped.\n    */\n    if (tokens[noreply_index].value\n        && strcmp(tokens[noreply_index].value, \"noreply\") == 0) {\n        c->noreply = true;\n    }\n    return c->noreply;\n}\n\nvoid append_stat(const char *name, ADD_STAT add_stats, conn *c,\n                 const char *fmt, ...) {\n    char val_str[STAT_VAL_LEN];\n    int vlen;\n    va_list ap;\n\n    assert(name);\n    assert(add_stats);\n    assert(c);\n    assert(fmt);\n\n    va_start(ap, fmt);\n    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);\n    va_end(ap);\n\n    add_stats(name, strlen(name), val_str, vlen, c);\n}\n\ninline static void process_stats_detail(conn *c, const char *command) {\n    assert(c != NULL);\n\n    if (strcmp(command, \"on\") == 0) {\n        settings.detail_enabled = 1;\n        out_string(c, \"OK\");\n    }\n    else if (strcmp(command, \"off\") == 0) {\n        settings.detail_enabled = 0;\n        out_string(c, \"OK\");\n    }\n    else if (strcmp(command, \"dump\") == 0) {\n        int len;\n        char *stats = stats_prefix_dump(&len);\n        write_and_free(c, stats, len);\n    }\n    else {\n        out_string(c, \"CLIENT_ERROR usage: stats detail on|off|dump\");\n    }\n}\n\n/* return server specific stats only */\nstatic void server_stats(ADD_STAT add_stats, conn *c) {\n    pid_t pid = getpid();\n    rel_time_t now = current_time;\n\n    struct thread_stats thread_stats;\n    threadlocal_stats_aggregate(&thread_stats);\n    struct slab_stats slab_stats;\n    slab_stats_aggregate(&thread_stats, &slab_stats);\n\n#ifndef WIN32\n    struct rusage usage;\n    getrusage(RUSAGE_SELF, &usage);\n#endif /* !WIN32 */\n\n    STATS_LOCK();\n\n    APPEND_STAT(\"pid\", \"%lu\", (long)pid);\n    APPEND_STAT(\"uptime\", \"%u\", now - ITEM_UPDATE_INTERVAL);\n    APPEND_STAT(\"time\", \"%ld\", now + (long)process_started);\n    APPEND_STAT(\"version\", \"%s\", VERSION);\n    APPEND_STAT(\"libevent\", \"%s\", event_get_version());\n    APPEND_STAT(\"pointer_size\", \"%d\", (int)(8 * sizeof(void *)));\n\n#ifndef WIN32\n    append_stat(\"rusage_user\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_utime.tv_sec,\n                (long)usage.ru_utime.tv_usec);\n    append_stat(\"rusage_system\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_stime.tv_sec,\n                (long)usage.ru_stime.tv_usec);\n#endif /* !WIN32 */\n\n    APPEND_STAT(\"curr_connections\", \"%llu\", (unsigned long long)stats_state.curr_conns - 1);\n    APPEND_STAT(\"total_connections\", \"%llu\", (unsigned long long)stats.total_conns);\n    if (settings.maxconns_fast) {\n        APPEND_STAT(\"rejected_connections\", \"%llu\", (unsigned long long)stats.rejected_conns);\n    }\n    APPEND_STAT(\"connection_structures\", \"%u\", stats_state.conn_structs);\n    APPEND_STAT(\"reserved_fds\", \"%u\", stats_state.reserved_fds);\n    APPEND_STAT(\"cmd_get\", \"%llu\", (unsigned long long)thread_stats.get_cmds);\n    APPEND_STAT(\"cmd_set\", \"%llu\", (unsigned long long)slab_stats.set_cmds);\n    APPEND_STAT(\"cmd_flush\", \"%llu\", (unsigned long long)thread_stats.flush_cmds);\n    APPEND_STAT(\"cmd_touch\", \"%llu\", (unsigned long long)thread_stats.touch_cmds);\n    APPEND_STAT(\"get_hits\", \"%llu\", (unsigned long long)slab_stats.get_hits);\n    APPEND_STAT(\"get_misses\", \"%llu\", (unsigned long long)thread_stats.get_misses);\n    APPEND_STAT(\"get_expired\", \"%llu\", (unsigned long long)thread_stats.get_expired);\n    APPEND_STAT(\"get_flushed\", \"%llu\", (unsigned long long)thread_stats.get_flushed);\n    APPEND_STAT(\"delete_misses\", \"%llu\", (unsigned long long)thread_stats.delete_misses);\n    APPEND_STAT(\"delete_hits\", \"%llu\", (unsigned long long)slab_stats.delete_hits);\n    APPEND_STAT(\"incr_misses\", \"%llu\", (unsigned long long)thread_stats.incr_misses);\n    APPEND_STAT(\"incr_hits\", \"%llu\", (unsigned long long)slab_stats.incr_hits);\n    APPEND_STAT(\"decr_misses\", \"%llu\", (unsigned long long)thread_stats.decr_misses);\n    APPEND_STAT(\"decr_hits\", \"%llu\", (unsigned long long)slab_stats.decr_hits);\n    APPEND_STAT(\"cas_misses\", \"%llu\", (unsigned long long)thread_stats.cas_misses);\n    APPEND_STAT(\"cas_hits\", \"%llu\", (unsigned long long)slab_stats.cas_hits);\n    APPEND_STAT(\"cas_badval\", \"%llu\", (unsigned long long)slab_stats.cas_badval);\n    APPEND_STAT(\"touch_hits\", \"%llu\", (unsigned long long)slab_stats.touch_hits);\n    APPEND_STAT(\"touch_misses\", \"%llu\", (unsigned long long)thread_stats.touch_misses);\n    APPEND_STAT(\"auth_cmds\", \"%llu\", (unsigned long long)thread_stats.auth_cmds);\n    APPEND_STAT(\"auth_errors\", \"%llu\", (unsigned long long)thread_stats.auth_errors);\n    if (settings.idle_timeout) {\n        APPEND_STAT(\"idle_kicks\", \"%llu\", (unsigned long long)thread_stats.idle_kicks);\n    }\n    APPEND_STAT(\"bytes_read\", \"%llu\", (unsigned long long)thread_stats.bytes_read);\n    APPEND_STAT(\"bytes_written\", \"%llu\", (unsigned long long)thread_stats.bytes_written);\n    APPEND_STAT(\"limit_maxbytes\", \"%llu\", (unsigned long long)settings.maxbytes);\n    APPEND_STAT(\"accepting_conns\", \"%u\", stats_state.accepting_conns);\n    APPEND_STAT(\"listen_disabled_num\", \"%llu\", (unsigned long long)stats.listen_disabled_num);\n    APPEND_STAT(\"time_in_listen_disabled_us\", \"%llu\", stats.time_in_listen_disabled_us);\n    APPEND_STAT(\"threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"conn_yields\", \"%llu\", (unsigned long long)thread_stats.conn_yields);\n    APPEND_STAT(\"hash_power_level\", \"%u\", stats_state.hash_power_level);\n    APPEND_STAT(\"hash_bytes\", \"%llu\", (unsigned long long)stats_state.hash_bytes);\n    APPEND_STAT(\"hash_is_expanding\", \"%u\", stats_state.hash_is_expanding);\n    if (settings.slab_reassign) {\n        APPEND_STAT(\"slab_reassign_rescues\", \"%llu\", stats.slab_reassign_rescues);\n        APPEND_STAT(\"slab_reassign_chunk_rescues\", \"%llu\", stats.slab_reassign_chunk_rescues);\n        APPEND_STAT(\"slab_reassign_evictions_nomem\", \"%llu\", stats.slab_reassign_evictions_nomem);\n        APPEND_STAT(\"slab_reassign_inline_reclaim\", \"%llu\", stats.slab_reassign_inline_reclaim);\n        APPEND_STAT(\"slab_reassign_busy_items\", \"%llu\", stats.slab_reassign_busy_items);\n        APPEND_STAT(\"slab_reassign_running\", \"%u\", stats_state.slab_reassign_running);\n        APPEND_STAT(\"slabs_moved\", \"%llu\", stats.slabs_moved);\n    }\n    if (settings.lru_crawler) {\n        APPEND_STAT(\"lru_crawler_running\", \"%u\", stats_state.lru_crawler_running);\n        APPEND_STAT(\"lru_crawler_starts\", \"%u\", stats.lru_crawler_starts);\n    }\n    if (settings.lru_maintainer_thread) {\n        APPEND_STAT(\"lru_maintainer_juggles\", \"%llu\", (unsigned long long)stats.lru_maintainer_juggles);\n    }\n    APPEND_STAT(\"malloc_fails\", \"%llu\",\n                (unsigned long long)stats.malloc_fails);\n    APPEND_STAT(\"log_worker_dropped\", \"%llu\", (unsigned long long)stats.log_worker_dropped);\n    APPEND_STAT(\"log_worker_written\", \"%llu\", (unsigned long long)stats.log_worker_written);\n    APPEND_STAT(\"log_watcher_skipped\", \"%llu\", (unsigned long long)stats.log_watcher_skipped);\n    APPEND_STAT(\"log_watcher_sent\", \"%llu\", (unsigned long long)stats.log_watcher_sent);\n    STATS_UNLOCK();\n}\n\nstatic void process_stat_settings(ADD_STAT add_stats, void *c) {\n    assert(add_stats);\n    APPEND_STAT(\"maxbytes\", \"%llu\", (unsigned long long)settings.maxbytes);\n    APPEND_STAT(\"maxconns\", \"%d\", settings.maxconns);\n    APPEND_STAT(\"tcpport\", \"%d\", settings.port);\n    APPEND_STAT(\"udpport\", \"%d\", settings.udpport);\n    APPEND_STAT(\"inter\", \"%s\", settings.inter ? settings.inter : \"NULL\");\n    APPEND_STAT(\"verbosity\", \"%d\", settings.verbose);\n    APPEND_STAT(\"oldest\", \"%lu\", (unsigned long)settings.oldest_live);\n    APPEND_STAT(\"evictions\", \"%s\", settings.evict_to_free ? \"on\" : \"off\");\n    APPEND_STAT(\"domain_socket\", \"%s\",\n                settings.socketpath ? settings.socketpath : \"NULL\");\n    APPEND_STAT(\"umask\", \"%o\", settings.access);\n    APPEND_STAT(\"growth_factor\", \"%.2f\", settings.factor);\n    APPEND_STAT(\"chunk_size\", \"%d\", settings.chunk_size);\n    APPEND_STAT(\"num_threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"num_threads_per_udp\", \"%d\", settings.num_threads_per_udp);\n    APPEND_STAT(\"stat_key_prefix\", \"%c\", settings.prefix_delimiter);\n    APPEND_STAT(\"detail_enabled\", \"%s\",\n                settings.detail_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"reqs_per_event\", \"%d\", settings.reqs_per_event);\n    APPEND_STAT(\"cas_enabled\", \"%s\", settings.use_cas ? \"yes\" : \"no\");\n    APPEND_STAT(\"tcp_backlog\", \"%d\", settings.backlog);\n    APPEND_STAT(\"binding_protocol\", \"%s\",\n                prot_text(settings.binding_protocol));\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", settings.sasl ? \"yes\" : \"no\");\n    APPEND_STAT(\"item_size_max\", \"%d\", settings.item_size_max);\n    APPEND_STAT(\"maxconns_fast\", \"%s\", settings.maxconns_fast ? \"yes\" : \"no\");\n    APPEND_STAT(\"hashpower_init\", \"%d\", settings.hashpower_init);\n    APPEND_STAT(\"slab_reassign\", \"%s\", settings.slab_reassign ? \"yes\" : \"no\");\n    APPEND_STAT(\"slab_automove\", \"%d\", settings.slab_automove);\n    APPEND_STAT(\"slab_chunk_max\", \"%d\", settings.slab_chunk_size_max);\n    APPEND_STAT(\"lru_crawler\", \"%s\", settings.lru_crawler ? \"yes\" : \"no\");\n    APPEND_STAT(\"lru_crawler_sleep\", \"%d\", settings.lru_crawler_sleep);\n    APPEND_STAT(\"lru_crawler_tocrawl\", \"%lu\", (unsigned long)settings.lru_crawler_tocrawl);\n    APPEND_STAT(\"tail_repair_time\", \"%d\", settings.tail_repair_time);\n    APPEND_STAT(\"flush_enabled\", \"%s\", settings.flush_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"dump_enabled\", \"%s\", settings.dump_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"hash_algorithm\", \"%s\", settings.hash_algorithm);\n    APPEND_STAT(\"lru_maintainer_thread\", \"%s\", settings.lru_maintainer_thread ? \"yes\" : \"no\");\n    APPEND_STAT(\"lru_segmented\", \"%s\", settings.lru_segmented ? \"yes\" : \"no\");\n    APPEND_STAT(\"hot_lru_pct\", \"%d\", settings.hot_lru_pct);\n    APPEND_STAT(\"warm_lru_pct\", \"%d\", settings.warm_lru_pct);\n    APPEND_STAT(\"hot_max_age\", \"%u\", settings.hot_max_age);\n    APPEND_STAT(\"warm_max_factor\", \"%.2f\", settings.warm_max_factor);\n    APPEND_STAT(\"temp_lru\", \"%s\", settings.temp_lru ? \"yes\" : \"no\");\n    APPEND_STAT(\"temporary_ttl\", \"%u\", settings.temporary_ttl);\n    APPEND_STAT(\"idle_timeout\", \"%d\", settings.idle_timeout);\n    APPEND_STAT(\"watcher_logbuf_size\", \"%u\", settings.logger_watcher_buf_size);\n    APPEND_STAT(\"worker_logbuf_size\", \"%u\", settings.logger_buf_size);\n    APPEND_STAT(\"track_sizes\", \"%s\", item_stats_sizes_status() ? \"yes\" : \"no\");\n    APPEND_STAT(\"inline_ascii_response\", \"%s\", settings.inline_ascii_response ? \"yes\" : \"no\");\n}\n\nstatic void conn_to_str(const conn *c, char *buf) {\n    char addr_text[MAXPATHLEN];\n\n    if (!c) {\n        strcpy(buf, \"<null>\");\n    } else if (c->state == conn_closed) {\n        strcpy(buf, \"<closed>\");\n    } else {\n        const char *protoname = \"?\";\n        struct sockaddr_in6 local_addr;\n        struct sockaddr *addr = (void *)&c->request_addr;\n        int af;\n        unsigned short port = 0;\n\n        /* For listen ports and idle UDP ports, show listen address */\n        if (c->state == conn_listening ||\n                (IS_UDP(c->transport) &&\n                 c->state == conn_read)) {\n            socklen_t local_addr_len = sizeof(local_addr);\n\n            if (getsockname(c->sfd,\n                        (struct sockaddr *)&local_addr,\n                        &local_addr_len) == 0) {\n                addr = (struct sockaddr *)&local_addr;\n            }\n        }\n\n        af = addr->sa_family;\n        addr_text[0] = '\\0';\n\n        switch (af) {\n            case AF_INET:\n                (void) inet_ntop(af,\n                        &((struct sockaddr_in *)addr)->sin_addr,\n                        addr_text,\n                        sizeof(addr_text) - 1);\n                port = ntohs(((struct sockaddr_in *)addr)->sin_port);\n                protoname = IS_UDP(c->transport) ? \"udp\" : \"tcp\";\n                break;\n\n            case AF_INET6:\n                addr_text[0] = '[';\n                addr_text[1] = '\\0';\n                if (inet_ntop(af,\n                        &((struct sockaddr_in6 *)addr)->sin6_addr,\n                        addr_text + 1,\n                        sizeof(addr_text) - 2)) {\n                    strcat(addr_text, \"]\");\n                }\n                port = ntohs(((struct sockaddr_in6 *)addr)->sin6_port);\n                protoname = IS_UDP(c->transport) ? \"udp6\" : \"tcp6\";\n                break;\n\n            case AF_UNIX:\n                strncpy(addr_text,\n                        ((struct sockaddr_un *)addr)->sun_path,\n                        sizeof(addr_text) - 1);\n                addr_text[sizeof(addr_text)-1] = '\\0';\n                protoname = \"unix\";\n                break;\n        }\n\n        if (strlen(addr_text) < 2) {\n            /* Most likely this is a connected UNIX-domain client which\n             * has no peer socket address, but there's no portable way\n             * to tell for sure.\n             */\n            sprintf(addr_text, \"<AF %d>\", af);\n        }\n\n        if (port) {\n            sprintf(buf, \"%s:%s:%u\", protoname, addr_text, port);\n        } else {\n            sprintf(buf, \"%s:%s\", protoname, addr_text);\n        }\n    }\n}\n\nstatic void process_stats_conns(ADD_STAT add_stats, void *c) {\n    int i;\n    char key_str[STAT_KEY_LEN];\n    char val_str[STAT_VAL_LEN];\n    char conn_name[MAXPATHLEN + sizeof(\"unix:\")];\n    int klen = 0, vlen = 0;\n\n    assert(add_stats);\n\n    for (i = 0; i < max_fds; i++) {\n        if (conns[i]) {\n            /* This is safe to do unlocked because conns are never freed; the\n             * worst that'll happen will be a minor inconsistency in the\n             * output -- not worth the complexity of the locking that'd be\n             * required to prevent it.\n             */\n            if (conns[i]->state != conn_closed) {\n                conn_to_str(conns[i], conn_name);\n\n                APPEND_NUM_STAT(i, \"addr\", \"%s\", conn_name);\n                APPEND_NUM_STAT(i, \"state\", \"%s\",\n                        state_text(conns[i]->state));\n                APPEND_NUM_STAT(i, \"secs_since_last_cmd\", \"%d\",\n                        current_time - conns[i]->last_cmd_time);\n            }\n        }\n    }\n}\n\nstatic void process_stat(conn *c, token_t *tokens, const size_t ntokens) {\n    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;\n    assert(c != NULL);\n\n    if (ntokens < 2) {\n        out_string(c, \"CLIENT_ERROR bad command line\");\n        return;\n    }\n\n    if (ntokens == 2) {\n        server_stats(&append_stats, c);\n        (void)get_stats(NULL, 0, &append_stats, c);\n    } else if (strcmp(subcommand, \"reset\") == 0) {\n        stats_reset();\n        out_string(c, \"RESET\");\n        return ;\n    } else if (strcmp(subcommand, \"detail\") == 0) {\n        /* NOTE: how to tackle detail with binary? */\n        if (ntokens < 4)\n            process_stats_detail(c, \"\");  /* outputs the error message */\n        else\n            process_stats_detail(c, tokens[2].value);\n        /* Output already generated */\n        return ;\n    } else if (strcmp(subcommand, \"settings\") == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strcmp(subcommand, \"cachedump\") == 0) {\n        char *buf;\n        unsigned int bytes, id, limit = 0;\n\n        if (!settings.dump_enabled) {\n            out_string(c, \"CLIENT_ERROR stats cachedump not allowed\");\n            return;\n        }\n\n        if (ntokens < 5) {\n            out_string(c, \"CLIENT_ERROR bad command line\");\n            return;\n        }\n\n        if (!safe_strtoul(tokens[2].value, &id) ||\n            !safe_strtoul(tokens[3].value, &limit)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n\n        if (id >= MAX_NUMBER_OF_SLAB_CLASSES) {\n            out_string(c, \"CLIENT_ERROR Illegal slab id\");\n            return;\n        }\n\n        buf = item_cachedump(id, limit, &bytes);\n        write_and_free(c, buf, bytes);\n        return ;\n    } else if (strcmp(subcommand, \"conns\") == 0) {\n        process_stats_conns(&append_stats, c);\n    } else {\n        /* getting here means that the subcommand is either engine specific or\n           is invalid. query the engine and see. */\n        if (get_stats(subcommand, strlen(subcommand), &append_stats, c)) {\n            if (c->stats.buffer == NULL) {\n                out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n            } else {\n                write_and_free(c, c->stats.buffer, c->stats.offset);\n                c->stats.buffer = NULL;\n            }\n        } else {\n            out_string(c, \"ERROR\");\n        }\n        return ;\n    }\n\n    /* append terminator and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n\n    if (c->stats.buffer == NULL) {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing stats\");\n    } else {\n        write_and_free(c, c->stats.buffer, c->stats.offset);\n        c->stats.buffer = NULL;\n    }\n}\n\nstatic inline int make_ascii_get_suffix(char *suffix, item *it, bool return_cas) {\n    char *p;\n    if (!settings.inline_ascii_response) {\n        *suffix = ' ';\n        p = itoa_u32(*((uint32_t *) ITEM_suffix(it)), suffix+1);\n        *p = ' ';\n        p = itoa_u32(it->nbytes-2, p+1);\n    } else {\n        p = suffix;\n    }\n    if (return_cas) {\n        *p = ' ';\n        p = itoa_u64(ITEM_get_cas(it), p+1);\n    }\n    *p = '\\r';\n    *(p+1) = '\\n';\n    *(p+2) = '\\0';\n    return (p - suffix) + 2;\n}\n\n#define IT_REFCOUNT_LIMIT 60000\nstatic inline item* limited_get(char *key, size_t nkey, conn *c) {\n    item *it = item_get(key, nkey, c, DO_UPDATE);\n    if (it && it->refcount > IT_REFCOUNT_LIMIT) {\n        item_remove(it);\n        it = NULL;\n    }\n    return it;\n}\n\n/* ntokens is overwritten here... shrug.. */\nstatic inline void process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {\n    char *key;\n    size_t nkey;\n    int i = 0;\n    item *it;\n    token_t *key_token = &tokens[KEY_TOKEN];\n    char *suffix;\n    assert(c != NULL);\n\n    do {\n        while(key_token->length != 0) {\n\n            key = key_token->value;\n            nkey = key_token->length;\n\n            if(nkey > KEY_MAX_LENGTH) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                while (i-- > 0) {\n                    item_remove(*(c->ilist + i));\n                }\n                return;\n            }\n\n            it = limited_get(key, nkey, c);\n            if (settings.detail_enabled) {\n                stats_prefix_record_get(key, nkey, NULL != it);\n            }\n            if (it) {\n                if (i >= c->isize) {\n                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);\n                    if (new_list) {\n                        c->isize *= 2;\n                        c->ilist = new_list;\n                    } else {\n                        STATS_LOCK();\n                        stats.malloc_fails++;\n                        STATS_UNLOCK();\n                        item_remove(it);\n                        break;\n                    }\n                }\n\n                /*\n                 * Construct the response. Each hit adds three elements to the\n                 * outgoing data list:\n                 *   \"VALUE \"\n                 *   key\n                 *   \" \" + flags + \" \" + data length + \"\\r\\n\" + data (with \\r\\n)\n                 */\n\n                if (return_cas || !settings.inline_ascii_response)\n                {\n                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                        it->nbytes, ITEM_get_cas(it));\n                  /* Goofy mid-flight realloc. */\n                  if (i >= c->suffixsize) {\n                    char **new_suffix_list = realloc(c->suffixlist,\n                                           sizeof(char *) * c->suffixsize * 2);\n                    if (new_suffix_list) {\n                        c->suffixsize *= 2;\n                        c->suffixlist  = new_suffix_list;\n                    } else {\n                        STATS_LOCK();\n                        stats.malloc_fails++;\n                        STATS_UNLOCK();\n                        item_remove(it);\n                        break;\n                    }\n                  }\n\n                  suffix = do_cache_alloc(c->thread->suffix_cache);\n                  if (suffix == NULL) {\n                      STATS_LOCK();\n                      stats.malloc_fails++;\n                      STATS_UNLOCK();\n                      out_of_memory(c, \"SERVER_ERROR out of memory making CAS suffix\");\n                      item_remove(it);\n                      while (i-- > 0) {\n                          item_remove(*(c->ilist + i));\n                      }\n                      return;\n                  }\n                  *(c->suffixlist + i) = suffix;\n                  int suffix_len = make_ascii_get_suffix(suffix, it, return_cas);\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, ITEM_key(it), it->nkey) != 0 ||\n                      (settings.inline_ascii_response && add_iov(c, ITEM_suffix(it), it->nsuffix - 2) != 0) ||\n                      add_iov(c, suffix, suffix_len) != 0)\n                      {\n                          item_remove(it);\n                          break;\n                      }\n                  if ((it->it_flags & ITEM_CHUNKED) == 0) {\n                      add_iov(c, ITEM_data(it), it->nbytes);\n                  } else if (add_chunked_item_iovs(c, it, it->nbytes) != 0) {\n                      item_remove(it);\n                      break;\n                  }\n                }\n                else\n                {\n                  MEMCACHED_COMMAND_GET(c->sfd, ITEM_key(it), it->nkey,\n                                        it->nbytes, ITEM_get_cas(it));\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, ITEM_key(it), it->nkey) != 0)\n                      {\n                          item_remove(it);\n                          break;\n                      }\n                  if ((it->it_flags & ITEM_CHUNKED) == 0)\n                      {\n                          if (add_iov(c, ITEM_suffix(it), it->nsuffix + it->nbytes) != 0)\n                          {\n                              item_remove(it);\n                              break;\n                          }\n                      } else if (add_iov(c, ITEM_suffix(it), it->nsuffix) != 0 ||\n                                 add_chunked_item_iovs(c, it, it->nbytes) != 0) {\n                          item_remove(it);\n                          break;\n                      }\n                }\n\n\n                if (settings.verbose > 1) {\n                    int ii;\n                    fprintf(stderr, \">%d sending key \", c->sfd);\n                    for (ii = 0; ii < it->nkey; ++ii) {\n                        fprintf(stderr, \"%c\", key[ii]);\n                    }\n                    fprintf(stderr, \"\\n\");\n                }\n\n                /* item_get() has incremented it->refcount for us */\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.slab_stats[ITEM_clsid(it)].get_hits++;\n                c->thread->stats.get_cmds++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                *(c->ilist + i) = it;\n                i++;\n\n            } else {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.get_misses++;\n                c->thread->stats.get_cmds++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n            }\n\n            key_token++;\n        }\n\n        /*\n         * If the command string hasn't been fully processed, get the next set\n         * of tokens.\n         */\n        if(key_token->value != NULL) {\n            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);\n            key_token = tokens;\n        }\n\n    } while(key_token->value != NULL);\n\n    c->icurr = c->ilist;\n    c->ileft = i;\n    if (return_cas || !settings.inline_ascii_response) {\n        c->suffixcurr = c->suffixlist;\n        c->suffixleft = i;\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \">%d END\\n\", c->sfd);\n\n    /*\n        If the loop was terminated because of out-of-memory, it is not\n        reliable to add END\\r\\n to the buffer, because it might not end\n        in \\r\\n. So we send SERVER_ERROR instead.\n    */\n    if (key_token->value != NULL || add_iov(c, \"END\\r\\n\", 5) != 0\n        || (IS_UDP(c->transport) && build_udp_headers(c) != 0)) {\n        out_of_memory(c, \"SERVER_ERROR out of memory writing get response\");\n    }\n    else {\n        conn_set_state(c, conn_mwrite);\n        c->msgcurr = 0;\n    }\n}\n\nstatic void process_update_command(conn *c, token_t *tokens, const size_t ntokens, int comm, bool handle_cas) {\n    char *key;\n    size_t nkey;\n    unsigned int flags;\n    int32_t exptime_int = 0;\n    time_t exptime;\n    int vlen;\n    uint64_t req_cas_id=0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)\n           && safe_strtol(tokens[3].value, &exptime_int)\n           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    /* Ubuntu 8.04 breaks when I pass exptime to safe_strtol */\n    exptime = exptime_int;\n\n    /* Negative exptimes can underflow and end up immortal. realtime() will\n       immediately expire values that are greater than REALTIME_MAXDELTA, but less\n       than process_started, so lets aim for that. */\n    if (exptime < 0)\n        exptime = REALTIME_MAXDELTA + 1;\n\n    // does cas value exist?\n    if (handle_cas) {\n        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n    }\n\n    if (vlen < 0 || vlen > (INT_MAX - 2)) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n    vlen += 2;\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    it = item_alloc(key, nkey, flags, realtime(exptime), vlen);\n\n    if (it == 0) {\n        enum store_item_type status;\n        if (! item_size_ok(nkey, flags, vlen)) {\n            out_string(c, \"SERVER_ERROR object too large for cache\");\n            status = TOO_LARGE;\n        } else {\n            out_of_memory(c, \"SERVER_ERROR out of memory storing object\");\n            status = NO_MEMORY;\n        }\n        LOGGER_LOG(c->thread->l, LOG_MUTATIONS, LOGGER_ITEM_STORE,\n                NULL, status, comm, key, nkey, 0, 0);\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        c->sbytes = vlen;\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (comm == NREAD_SET) {\n            it = item_get(key, nkey, c, DONT_UPDATE);\n            if (it) {\n                item_unlink(it);\n                item_remove(it);\n            }\n        }\n\n        return;\n    }\n    ITEM_set_cas(it, req_cas_id);\n\n    c->item = it;\n    c->ritem = ITEM_data(it);\n    c->rlbytes = it->nbytes;\n    c->cmd = comm;\n    conn_set_state(c, conn_nread);\n}\n\nstatic void process_touch_command(conn *c, token_t *tokens, const size_t ntokens) {\n    char *key;\n    size_t nkey;\n    int32_t exptime_int = 0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtol(tokens[2].value, &exptime_int)) {\n        out_string(c, \"CLIENT_ERROR invalid exptime argument\");\n        return;\n    }\n\n    it = item_touch(key, nkey, realtime(exptime_int), c);\n    if (it) {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.touch_cmds++;\n        c->thread->stats.slab_stats[ITEM_clsid(it)].touch_hits++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"TOUCHED\");\n        item_remove(it);\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.touch_cmds++;\n        c->thread->stats.touch_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n    }\n}\n\nstatic void process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {\n    char temp[INCR_MAX_STORAGE_LEN];\n    uint64_t delta;\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtoull(tokens[2].value, &delta)) {\n        out_string(c, \"CLIENT_ERROR invalid numeric delta argument\");\n        return;\n    }\n\n    switch(add_delta(c, key, nkey, incr, delta, temp, NULL)) {\n    case OK:\n        out_string(c, temp);\n        break;\n    case NON_NUMERIC:\n        out_string(c, \"CLIENT_ERROR cannot increment or decrement non-numeric value\");\n        break;\n    case EOM:\n        out_of_memory(c, \"SERVER_ERROR out of memory\");\n        break;\n    case DELTA_ITEM_NOT_FOUND:\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        if (incr) {\n            c->thread->stats.incr_misses++;\n        } else {\n            c->thread->stats.decr_misses++;\n        }\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case DELTA_ITEM_CAS_MISMATCH:\n        break; /* Should never get here */\n    }\n}\n\n/*\n * adds a delta value to a numeric item.\n *\n * c     connection requesting the operation\n * it    item to adjust\n * incr  true to increment value, false to decrement\n * delta amount to adjust value by\n * buf   buffer for response string\n *\n * returns a response string to send back to the client.\n */\nenum delta_result_type do_add_delta(conn *c, const char *key, const size_t nkey,\n                                    const bool incr, const int64_t delta,\n                                    char *buf, uint64_t *cas,\n                                    const uint32_t hv) {\n    char *ptr;\n    uint64_t value;\n    int res;\n    item *it;\n\n    it = do_item_get(key, nkey, hv, c, DONT_UPDATE);\n    if (!it) {\n        return DELTA_ITEM_NOT_FOUND;\n    }\n\n    /* Can't delta zero byte values. 2-byte are the \"\\r\\n\" */\n    /* Also can't delta for chunked items. Too large to be a number */\n    if (it->nbytes <= 2 || (it->it_flags & ITEM_CHUNKED) != 0) {\n        return NON_NUMERIC;\n    }\n\n    if (cas != NULL && *cas != 0 && ITEM_get_cas(it) != *cas) {\n        do_item_remove(it);\n        return DELTA_ITEM_CAS_MISMATCH;\n    }\n\n    ptr = ITEM_data(it);\n\n    if (!safe_strtoull(ptr, &value)) {\n        do_item_remove(it);\n        return NON_NUMERIC;\n    }\n\n    if (incr) {\n        value += delta;\n        MEMCACHED_COMMAND_INCR(c->sfd, ITEM_key(it), it->nkey, value);\n    } else {\n        if(delta > value) {\n            value = 0;\n        } else {\n            value -= delta;\n        }\n        MEMCACHED_COMMAND_DECR(c->sfd, ITEM_key(it), it->nkey, value);\n    }\n\n    pthread_mutex_lock(&c->thread->stats.mutex);\n    if (incr) {\n        c->thread->stats.slab_stats[ITEM_clsid(it)].incr_hits++;\n    } else {\n        c->thread->stats.slab_stats[ITEM_clsid(it)].decr_hits++;\n    }\n    pthread_mutex_unlock(&c->thread->stats.mutex);\n\n    snprintf(buf, INCR_MAX_STORAGE_LEN, \"%llu\", (unsigned long long)value);\n    res = strlen(buf);\n    /* refcount == 2 means we are the only ones holding the item, and it is\n     * linked. We hold the item's lock in this function, so refcount cannot\n     * increase. */\n    if (res + 2 <= it->nbytes && it->refcount == 2) { /* replace in-place */\n        /* When changing the value without replacing the item, we\n           need to update the CAS on the existing item. */\n        /* We also need to fiddle it in the sizes tracker in case the tracking\n         * was enabled at runtime, since it relies on the CAS value to know\n         * whether to remove an item or not. */\n        item_stats_sizes_remove(it);\n        ITEM_set_cas(it, (settings.use_cas) ? get_cas_id() : 0);\n        item_stats_sizes_add(it);\n        memcpy(ITEM_data(it), buf, res);\n        memset(ITEM_data(it) + res, ' ', it->nbytes - res - 2);\n        do_item_update(it);\n    } else if (it->refcount > 1) {\n        item *new_it;\n        uint32_t flags;\n        if (settings.inline_ascii_response) {\n            flags = (uint32_t) strtoul(ITEM_suffix(it)+1, (char **) NULL, 10);\n        } else {\n            flags = *((uint32_t *)ITEM_suffix(it));\n        }\n        new_it = do_item_alloc(ITEM_key(it), it->nkey, flags, it->exptime, res + 2);\n        if (new_it == 0) {\n            do_item_remove(it);\n            return EOM;\n        }\n        memcpy(ITEM_data(new_it), buf, res);\n        memcpy(ITEM_data(new_it) + res, \"\\r\\n\", 2);\n        item_replace(it, new_it, hv);\n        // Overwrite the older item's CAS with our new CAS since we're\n        // returning the CAS of the old item below.\n        ITEM_set_cas(it, (settings.use_cas) ? ITEM_get_cas(new_it) : 0);\n        do_item_remove(new_it);       /* release our reference */\n    } else {\n        /* Should never get here. This means we somehow fetched an unlinked\n         * item. TODO: Add a counter? */\n        if (settings.verbose) {\n            fprintf(stderr, \"Tried to do incr/decr on invalid item\\n\");\n        }\n        if (it->refcount == 1)\n            do_item_remove(it);\n        return DELTA_ITEM_NOT_FOUND;\n    }\n\n    if (cas) {\n        *cas = ITEM_get_cas(it);    /* swap the incoming CAS value */\n    }\n    do_item_remove(it);         /* release our reference */\n    return OK;\n}\n\nstatic void process_delete_command(conn *c, token_t *tokens, const size_t ntokens) {\n    char *key;\n    size_t nkey;\n    item *it;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, \"0\") == 0;\n        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);\n        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))\n            || (ntokens == 5 && hold_is_zero && sets_noreply);\n        if (!valid) {\n            out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                       \"Usage: delete <key> [noreply]\");\n            return;\n        }\n    }\n\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if(nkey > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n\n    it = item_get(key, nkey, c, DONT_UPDATE);\n    if (it) {\n        MEMCACHED_COMMAND_DELETE(c->sfd, ITEM_key(it), it->nkey);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.slab_stats[ITEM_clsid(it)].delete_hits++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        item_unlink(it);\n        item_remove(it);      /* release our reference */\n        out_string(c, \"DELETED\");\n    } else {\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.delete_misses++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        out_string(c, \"NOT_FOUND\");\n    }\n}\n\nstatic void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    level = strtoul(tokens[1].value, NULL, 10);\n    settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;\n    out_string(c, \"OK\");\n    return;\n}\n\nstatic void process_slabs_automove_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    level = strtoul(tokens[2].value, NULL, 10);\n    if (level == 0) {\n        settings.slab_automove = 0;\n    } else if (level == 1 || level == 2) {\n        settings.slab_automove = level;\n    } else {\n        out_string(c, \"ERROR\");\n        return;\n    }\n    out_string(c, \"OK\");\n    return;\n}\n\n/* TODO: decide on syntax for sampling? */\nstatic void process_watch_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint16_t f = 0;\n    int x;\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n    if (ntokens > 2) {\n        for (x = COMMAND_TOKEN + 1; x < ntokens - 1; x++) {\n            if ((strcmp(tokens[x].value, \"rawcmds\") == 0)) {\n                f |= LOG_RAWCMDS;\n            } else if ((strcmp(tokens[x].value, \"evictions\") == 0)) {\n                f |= LOG_EVICTIONS;\n            } else if ((strcmp(tokens[x].value, \"fetchers\") == 0)) {\n                f |= LOG_FETCHERS;\n            } else if ((strcmp(tokens[x].value, \"mutations\") == 0)) {\n                f |= LOG_MUTATIONS;\n            } else if ((strcmp(tokens[x].value, \"sysevents\") == 0)) {\n                f |= LOG_SYSEVENTS;\n            } else {\n                out_string(c, \"ERROR\");\n                return;\n            }\n        }\n    } else {\n        f |= LOG_FETCHERS;\n    }\n\n    switch(logger_add_watcher(c, c->sfd, f)) {\n        case LOGGER_ADD_WATCHER_TOO_MANY:\n            out_string(c, \"WATCHER_TOO_MANY log watcher limit reached\");\n            break;\n        case LOGGER_ADD_WATCHER_FAILED:\n            out_string(c, \"WATCHER_FAILED failed to add log watcher\");\n            break;\n        case LOGGER_ADD_WATCHER_OK:\n            conn_set_state(c, conn_watch);\n            event_del(&c->event);\n            break;\n    }\n}\n\nstatic void process_memlimit_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint32_t memlimit;\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (!safe_strtoul(tokens[1].value, &memlimit)) {\n        out_string(c, \"ERROR\");\n    } else {\n        if (memlimit < 8) {\n            out_string(c, \"MEMLIMIT_TOO_SMALL cannot set maxbytes to less than 8m\");\n        } else {\n            if (memlimit > 1000000000) {\n                out_string(c, \"MEMLIMIT_ADJUST_FAILED input value is megabytes not bytes\");\n            } else if (slabs_adjust_mem_limit((size_t) memlimit * 1024 * 1024)) {\n                if (settings.verbose > 0) {\n                    fprintf(stderr, \"maxbytes adjusted to %llum\\n\", (unsigned long long)memlimit);\n                }\n\n                out_string(c, \"OK\");\n            } else {\n                out_string(c, \"MEMLIMIT_ADJUST_FAILED out of bounds or unable to adjust\");\n            }\n        }\n    }\n}\n\nstatic void process_lru_command(conn *c, token_t *tokens, const size_t ntokens) {\n    uint32_t pct_hot;\n    uint32_t pct_warm;\n    uint32_t hot_age;\n    int32_t ttl;\n    double factor;\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (strcmp(tokens[1].value, \"tune\") == 0 && ntokens >= 7) {\n        if (!safe_strtoul(tokens[2].value, &pct_hot) ||\n            !safe_strtoul(tokens[3].value, &pct_warm) ||\n            !safe_strtoul(tokens[4].value, &hot_age) ||\n            !safe_strtod(tokens[5].value, &factor)) {\n            out_string(c, \"ERROR\");\n        } else {\n            if (pct_hot + pct_warm > 80) {\n                out_string(c, \"ERROR hot and warm pcts must not exceed 80\");\n            } else if (factor <= 0) {\n                out_string(c, \"ERROR cold age factor must be greater than 0\");\n            } else {\n                settings.hot_lru_pct = pct_hot;\n                settings.warm_lru_pct = pct_warm;\n                settings.hot_max_age = hot_age;\n                settings.warm_max_factor = factor;\n                out_string(c, \"OK\");\n            }\n        }\n    } else if (strcmp(tokens[1].value, \"mode\") == 0 && ntokens >= 3 &&\n               settings.lru_maintainer_thread) {\n        if (strcmp(tokens[2].value, \"flat\") == 0) {\n            settings.lru_segmented = false;\n            out_string(c, \"OK\");\n        } else if (strcmp(tokens[2].value, \"segmented\") == 0) {\n            settings.lru_segmented = true;\n            out_string(c, \"OK\");\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (strcmp(tokens[1].value, \"temp_ttl\") == 0 && ntokens >= 3 &&\n               settings.lru_maintainer_thread) {\n        if (!safe_strtol(tokens[2].value, &ttl)) {\n            out_string(c, \"ERROR\");\n        } else {\n            if (ttl < 0) {\n                settings.temp_lru = false;\n            } else {\n                settings.temp_lru = true;\n                settings.temporary_ttl = ttl;\n            }\n            out_string(c, \"OK\");\n        }\n    } else {\n        out_string(c, \"ERROR\");\n    }\n}\n\nstatic void process_command(conn *c, char *command) {\n\n    token_t tokens[MAX_TOKENS];\n    size_t ntokens;\n    int comm;\n\n    assert(c != NULL);\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d %s\\n\", c->sfd, command);\n\n    /*\n     * for commands set/add/replace, we build an item and read the data\n     * directly into it, then continue in nread_complete().\n     */\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        out_of_memory(c, \"SERVER_ERROR out of memory preparing response\");\n        return;\n    }\n\n    ntokens = tokenize_command(command, tokens, MAX_TOKENS);\n    if (ntokens >= 3 &&\n        ((strcmp(tokens[COMMAND_TOKEN].value, \"get\") == 0) ||\n         (strcmp(tokens[COMMAND_TOKEN].value, \"bget\") == 0))) {\n\n        process_get_command(c, tokens, ntokens, false);\n\n    } else if ((ntokens == 6 || ntokens == 7) &&\n               ((strcmp(tokens[COMMAND_TOKEN].value, \"add\") == 0 && (comm = NREAD_ADD)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"set\") == 0 && (comm = NREAD_SET)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"replace\") == 0 && (comm = NREAD_REPLACE)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"prepend\") == 0 && (comm = NREAD_PREPEND)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"append\") == 0 && (comm = NREAD_APPEND)) )) {\n\n        process_update_command(c, tokens, ntokens, comm, false);\n\n    } else if ((ntokens == 7 || ntokens == 8) && (strcmp(tokens[COMMAND_TOKEN].value, \"cas\") == 0 && (comm = NREAD_CAS))) {\n\n        process_update_command(c, tokens, ntokens, comm, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"incr\") == 0)) {\n\n        process_arithmetic_command(c, tokens, ntokens, 1);\n\n    } else if (ntokens >= 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"gets\") == 0)) {\n\n        process_get_command(c, tokens, ntokens, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"decr\") == 0)) {\n\n        process_arithmetic_command(c, tokens, ntokens, 0);\n\n    } else if (ntokens >= 3 && ntokens <= 5 && (strcmp(tokens[COMMAND_TOKEN].value, \"delete\") == 0)) {\n\n        process_delete_command(c, tokens, ntokens);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"touch\") == 0)) {\n\n        process_touch_command(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"stats\") == 0)) {\n\n        process_stat(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && ntokens <= 4 && (strcmp(tokens[COMMAND_TOKEN].value, \"flush_all\") == 0)) {\n        time_t exptime = 0;\n        rel_time_t new_oldest = 0;\n\n        set_noreply_maybe(c, tokens, ntokens);\n\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.flush_cmds++;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        if (!settings.flush_enabled) {\n            // flush_all is not allowed but we log it on stats\n            out_string(c, \"CLIENT_ERROR flush_all not allowed\");\n            return;\n        }\n\n        if (ntokens != (c->noreply ? 3 : 2)) {\n            exptime = strtol(tokens[1].value, NULL, 10);\n            if(errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n        }\n\n        /*\n          If exptime is zero realtime() would return zero too, and\n          realtime(exptime) - 1 would overflow to the max unsigned\n          value.  So we process exptime == 0 the same way we do when\n          no delay is given at all.\n        */\n        if (exptime > 0) {\n            new_oldest = realtime(exptime);\n        } else { /* exptime == 0 */\n            new_oldest = current_time;\n        }\n\n        if (settings.use_cas) {\n            settings.oldest_live = new_oldest - 1;\n            if (settings.oldest_live <= current_time)\n                settings.oldest_cas = get_cas_id();\n        } else {\n            settings.oldest_live = new_oldest;\n        }\n        out_string(c, \"OK\");\n        return;\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"version\") == 0)) {\n\n        out_string(c, \"VERSION \" VERSION);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"quit\") == 0)) {\n\n        conn_set_state(c, conn_closing);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"shutdown\") == 0)) {\n\n        if (settings.shutdown_command) {\n            conn_set_state(c, conn_closing);\n            raise(SIGINT);\n        } else {\n            out_string(c, \"ERROR: shutdown not enabled\");\n        }\n\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"slabs\") == 0) {\n        if (ntokens == 5 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"reassign\") == 0) {\n            int src, dst, rv;\n\n            if (settings.slab_reassign == false) {\n                out_string(c, \"CLIENT_ERROR slab reassignment disabled\");\n                return;\n            }\n\n            src = strtol(tokens[2].value, NULL, 10);\n            dst = strtol(tokens[3].value, NULL, 10);\n\n            if (errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n\n            rv = slabs_reassign(src, dst);\n            switch (rv) {\n            case REASSIGN_OK:\n                out_string(c, \"OK\");\n                break;\n            case REASSIGN_RUNNING:\n                out_string(c, \"BUSY currently processing reassign request\");\n                break;\n            case REASSIGN_BADCLASS:\n                out_string(c, \"BADCLASS invalid src or dst class id\");\n                break;\n            case REASSIGN_NOSPARE:\n                out_string(c, \"NOSPARE source class has no spare pages\");\n                break;\n            case REASSIGN_SRC_DST_SAME:\n                out_string(c, \"SAME src and dst class are identical\");\n                break;\n            }\n            return;\n        } else if (ntokens == 4 &&\n            (strcmp(tokens[COMMAND_TOKEN + 1].value, \"automove\") == 0)) {\n            process_slabs_automove_command(c, tokens, ntokens);\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"lru_crawler\") == 0) {\n        if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"crawl\") == 0) {\n            int rv;\n            if (settings.lru_crawler == false) {\n                out_string(c, \"CLIENT_ERROR lru crawler disabled\");\n                return;\n            }\n\n            rv = lru_crawler_crawl(tokens[2].value, CRAWLER_EXPIRED, NULL, 0);\n            switch(rv) {\n            case CRAWLER_OK:\n                out_string(c, \"OK\");\n                break;\n            case CRAWLER_RUNNING:\n                out_string(c, \"BUSY currently processing crawler request\");\n                break;\n            case CRAWLER_BADCLASS:\n                out_string(c, \"BADCLASS invalid class id\");\n                break;\n            case CRAWLER_NOTSTARTED:\n                out_string(c, \"NOTSTARTED no items to crawl\");\n                break;\n            case CRAWLER_ERROR:\n                out_string(c, \"ERROR an unknown error happened\");\n                break;\n            }\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"metadump\") == 0) {\n            if (settings.lru_crawler == false) {\n                out_string(c, \"CLIENT_ERROR lru crawler disabled\");\n                return;\n            }\n            if (!settings.dump_enabled) {\n                out_string(c, \"ERROR metadump not allowed\");\n                return;\n            }\n\n            int rv = lru_crawler_crawl(tokens[2].value, CRAWLER_METADUMP,\n                    c, c->sfd);\n            switch(rv) {\n                case CRAWLER_OK:\n                    out_string(c, \"OK\");\n                    // TODO: Don't reuse conn_watch here.\n                    conn_set_state(c, conn_watch);\n                    event_del(&c->event);\n                    break;\n                case CRAWLER_RUNNING:\n                    out_string(c, \"BUSY currently processing crawler request\");\n                    break;\n                case CRAWLER_BADCLASS:\n                    out_string(c, \"BADCLASS invalid class id\");\n                    break;\n                case CRAWLER_NOTSTARTED:\n                    out_string(c, \"NOTSTARTED no items to crawl\");\n                    break;\n                case CRAWLER_ERROR:\n                    out_string(c, \"ERROR an unknown error happened\");\n                    break;\n            }\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"tocrawl\") == 0) {\n            uint32_t tocrawl;\n             if (!safe_strtoul(tokens[2].value, &tocrawl)) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n            settings.lru_crawler_tocrawl = tocrawl;\n            out_string(c, \"OK\");\n            return;\n        } else if (ntokens == 4 && strcmp(tokens[COMMAND_TOKEN + 1].value, \"sleep\") == 0) {\n            uint32_t tosleep;\n            if (!safe_strtoul(tokens[2].value, &tosleep)) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return;\n            }\n            if (tosleep > 1000000) {\n                out_string(c, \"CLIENT_ERROR sleep must be one second or less\");\n                return;\n            }\n            settings.lru_crawler_sleep = tosleep;\n            out_string(c, \"OK\");\n            return;\n        } else if (ntokens == 3) {\n            if ((strcmp(tokens[COMMAND_TOKEN + 1].value, \"enable\") == 0)) {\n                if (start_item_crawler_thread() == 0) {\n                    out_string(c, \"OK\");\n                } else {\n                    out_string(c, \"ERROR failed to start lru crawler thread\");\n                }\n            } else if ((strcmp(tokens[COMMAND_TOKEN + 1].value, \"disable\") == 0)) {\n                if (stop_item_crawler_thread() == 0) {\n                    out_string(c, \"OK\");\n                } else {\n                    out_string(c, \"ERROR failed to stop lru crawler thread\");\n                }\n            } else {\n                out_string(c, \"ERROR\");\n            }\n            return;\n        } else {\n            out_string(c, \"ERROR\");\n        }\n    } else if (ntokens > 1 && strcmp(tokens[COMMAND_TOKEN].value, \"watch\") == 0) {\n        process_watch_command(c, tokens, ntokens);\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"cache_memlimit\") == 0)) {\n        process_memlimit_command(c, tokens, ntokens);\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"verbosity\") == 0)) {\n        process_verbosity_command(c, tokens, ntokens);\n    } else if (ntokens >= 3 && strcmp(tokens[COMMAND_TOKEN].value, \"lru\") == 0) {\n        process_lru_command(c, tokens, ntokens);\n    } else {\n        out_string(c, \"ERROR\");\n    }\n    return;\n}\n\n/*\n * if we have a complete line in the buffer, process it.\n */\nstatic int try_read_command(conn *c) {\n    assert(c != NULL);\n    assert(c->rcurr <= (c->rbuf + c->rsize));\n    assert(c->rbytes > 0);\n\n    if (c->protocol == negotiating_prot || c->transport == udp_transport)  {\n        if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {\n            c->protocol = binary_prot;\n        } else {\n            c->protocol = ascii_prot;\n        }\n\n        if (settings.verbose > 1) {\n            fprintf(stderr, \"%d: Client using the %s protocol\\n\", c->sfd,\n                    prot_text(c->protocol));\n        }\n    }\n\n    if (c->protocol == binary_prot) {\n        /* Do we have the complete packet header? */\n        if (c->rbytes < sizeof(c->binary_header)) {\n            /* need more data! */\n            return 0;\n        } else {\n#ifdef NEED_ALIGN\n            if (((long)(c->rcurr)) % 8 != 0) {\n                /* must realign input buffer */\n                memmove(c->rbuf, c->rcurr, c->rbytes);\n                c->rcurr = c->rbuf;\n                if (settings.verbose > 1) {\n                    fprintf(stderr, \"%d: Realign input buffer\\n\", c->sfd);\n                }\n            }\n#endif\n            protocol_binary_request_header* req;\n            req = (protocol_binary_request_header*)c->rcurr;\n\n            if (settings.verbose > 1) {\n                /* Dump the packet before we convert it to host order */\n                int ii;\n                fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd);\n                for (ii = 0; ii < sizeof(req->bytes); ++ii) {\n                    if (ii % 4 == 0) {\n                        fprintf(stderr, \"\\n<%d   \", c->sfd);\n                    }\n                    fprintf(stderr, \" 0x%02x\", req->bytes[ii]);\n                }\n                fprintf(stderr, \"\\n\");\n            }\n\n            c->binary_header = *req;\n            c->binary_header.request.keylen = ntohs(req->request.keylen);\n            c->binary_header.request.bodylen = ntohl(req->request.bodylen);\n            c->binary_header.request.cas = ntohll(req->request.cas);\n\n            if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ) {\n                if (settings.verbose) {\n                    fprintf(stderr, \"Invalid magic:  %x\\n\",\n                            c->binary_header.request.magic);\n                }\n                conn_set_state(c, conn_closing);\n                return -1;\n            }\n\n            c->msgcurr = 0;\n            c->msgused = 0;\n            c->iovused = 0;\n            if (add_msghdr(c) != 0) {\n                out_of_memory(c,\n                        \"SERVER_ERROR Out of memory allocating headers\");\n                return 0;\n            }\n\n            c->cmd = c->binary_header.request.opcode;\n            c->keylen = c->binary_header.request.keylen;\n            c->opaque = c->binary_header.request.opaque;\n            /* clear the returned cas value */\n            c->cas = 0;\n\n            dispatch_bin_command(c);\n\n            c->rbytes -= sizeof(c->binary_header);\n            c->rcurr += sizeof(c->binary_header);\n        }\n    } else {\n        char *el, *cont;\n\n        if (c->rbytes == 0)\n            return 0;\n\n        el = memchr(c->rcurr, '\\n', c->rbytes);\n        if (!el) {\n            if (c->rbytes > 1024) {\n                /*\n                 * We didn't have a '\\n' in the first k. This _has_ to be a\n                 * large multiget, if not we should just nuke the connection.\n                 */\n                char *ptr = c->rcurr;\n                while (*ptr == ' ') { /* ignore leading whitespaces */\n                    ++ptr;\n                }\n\n                if (ptr - c->rcurr > 100 ||\n                    (strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {\n\n                    conn_set_state(c, conn_closing);\n                    return 1;\n                }\n            }\n\n            return 0;\n        }\n        cont = el + 1;\n        if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {\n            el--;\n        }\n        *el = '\\0';\n\n        assert(cont <= (c->rcurr + c->rbytes));\n\n        c->last_cmd_time = current_time;\n        process_command(c, c->rcurr);\n\n        c->rbytes -= (cont - c->rcurr);\n        c->rcurr = cont;\n\n        assert(c->rcurr <= (c->rbuf + c->rsize));\n    }\n\n    return 1;\n}\n\n/*\n * read a UDP request.\n */\nstatic enum try_read_result try_read_udp(conn *c) {\n    int res;\n\n    assert(c != NULL);\n\n    c->request_addr_size = sizeof(c->request_addr);\n    res = recvfrom(c->sfd, c->rbuf, c->rsize,\n                   0, (struct sockaddr *)&c->request_addr,\n                   &c->request_addr_size);\n    if (res > 8) {\n        unsigned char *buf = (unsigned char *)c->rbuf;\n        pthread_mutex_lock(&c->thread->stats.mutex);\n        c->thread->stats.bytes_read += res;\n        pthread_mutex_unlock(&c->thread->stats.mutex);\n\n        /* Beginning of UDP packet is the request ID; save it. */\n        c->request_id = buf[0] * 256 + buf[1];\n\n        /* If this is a multi-packet request, drop it. */\n        if (buf[4] != 0 || buf[5] != 1) {\n            out_string(c, \"SERVER_ERROR multi-packet request not supported\");\n            return READ_NO_DATA_RECEIVED;\n        }\n\n        /* Don't care about any of the rest of the header. */\n        res -= 8;\n        memmove(c->rbuf, c->rbuf + 8, res);\n\n        c->rbytes = res;\n        c->rcurr = c->rbuf;\n        return READ_DATA_RECEIVED;\n    }\n    return READ_NO_DATA_RECEIVED;\n}\n\n/*\n * read from network as much as we can, handle buffer overflow and connection\n * close.\n * before reading, move the remaining incomplete fragment of a command\n * (if any) to the beginning of the buffer.\n *\n * To protect us from someone flooding a connection with bogus data causing\n * the connection to eat up all available memory, break out and start looking\n * at the data I've got after a number of reallocs...\n *\n * @return enum try_read_result\n */\nstatic enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                STATS_LOCK();\n                stats.malloc_fails++;\n                STATS_UNLOCK();\n                if (settings.verbose > 0) {\n                    fprintf(stderr, \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_of_memory(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = read(c->sfd, c->rbuf + c->rbytes, avail);\n        if (res > 0) {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.bytes_read += res;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n\nstatic bool update_event(conn *c, const int new_flags) {\n    assert(c != NULL);\n\n    struct event_base *base = c->event.ev_base;\n    if (c->ev_flags == new_flags)\n        return true;\n    if (event_del(&c->event) == -1) return false;\n    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = new_flags;\n    if (event_add(&c->event, 0) == -1) return false;\n    return true;\n}\n\n/*\n * Sets whether we are listening for new connections or not.\n */\nvoid do_accept_new_conns(const bool do_accept) {\n    conn *next;\n\n    for (next = listen_conn; next; next = next->next) {\n        if (do_accept) {\n            update_event(next, EV_READ | EV_PERSIST);\n            if (listen(next->sfd, settings.backlog) != 0) {\n                perror(\"listen\");\n            }\n        }\n        else {\n            update_event(next, 0);\n            if (listen(next->sfd, 0) != 0) {\n                perror(\"listen\");\n            }\n        }\n    }\n\n    if (do_accept) {\n        struct timeval maxconns_exited;\n        uint64_t elapsed_us;\n        gettimeofday(&maxconns_exited,NULL);\n        STATS_LOCK();\n        elapsed_us =\n            (maxconns_exited.tv_sec - stats.maxconns_entered.tv_sec) * 1000000\n            + (maxconns_exited.tv_usec - stats.maxconns_entered.tv_usec);\n        stats.time_in_listen_disabled_us += elapsed_us;\n        stats_state.accepting_conns = true;\n        STATS_UNLOCK();\n    } else {\n        STATS_LOCK();\n        stats_state.accepting_conns = false;\n        gettimeofday(&stats.maxconns_entered,NULL);\n        stats.listen_disabled_num++;\n        STATS_UNLOCK();\n        allow_new_conns = false;\n        maxconns_handler(-42, 0, 0);\n    }\n}\n\n/*\n * Transmit the next chunk of data from our list of msgbuf structures.\n *\n * Returns:\n *   TRANSMIT_COMPLETE   All done writing.\n *   TRANSMIT_INCOMPLETE More data remaining to write.\n *   TRANSMIT_SOFT_ERROR Can't write any more right now.\n *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)\n */\nstatic enum transmit_result transmit(conn *c) {\n    assert(c != NULL);\n\n    if (c->msgcurr < c->msgused &&\n            c->msglist[c->msgcurr].msg_iovlen == 0) {\n        /* Finished writing the current msg; advance to the next. */\n        c->msgcurr++;\n    }\n    if (c->msgcurr < c->msgused) {\n        ssize_t res;\n        struct msghdr *m = &c->msglist[c->msgcurr];\n\n        res = sendmsg(c->sfd, m, 0);\n        if (res > 0) {\n            pthread_mutex_lock(&c->thread->stats.mutex);\n            c->thread->stats.bytes_written += res;\n            pthread_mutex_unlock(&c->thread->stats.mutex);\n\n            /* We've written some of the data. Remove the completed\n               iovec entries from the list of pending writes. */\n            while (m->msg_iovlen > 0 && res >= m->msg_iov->iov_len) {\n                res -= m->msg_iov->iov_len;\n                m->msg_iovlen--;\n                m->msg_iov++;\n            }\n\n            /* Might have written just part of the last iovec entry;\n               adjust it so the next write will do the rest. */\n            if (res > 0) {\n                m->msg_iov->iov_base = (caddr_t)m->msg_iov->iov_base + res;\n                m->msg_iov->iov_len -= res;\n            }\n            return TRANSMIT_INCOMPLETE;\n        }\n        if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0)\n                    fprintf(stderr, \"Couldn't update event\\n\");\n                conn_set_state(c, conn_closing);\n                return TRANSMIT_HARD_ERROR;\n            }\n            return TRANSMIT_SOFT_ERROR;\n        }\n        /* if res == 0 or res == -1 and error is not EAGAIN or EWOULDBLOCK,\n           we have a real error, on which we close the connection */\n        if (settings.verbose > 0)\n            perror(\"Failed to write, and not due to blocking\");\n\n        if (IS_UDP(c->transport))\n            conn_set_state(c, conn_read);\n        else\n            conn_set_state(c, conn_closing);\n        return TRANSMIT_HARD_ERROR;\n    } else {\n        return TRANSMIT_COMPLETE;\n    }\n}\n\n/* Does a looped read to fill data chunks */\n/* TODO: restrict number of times this can loop.\n * Also, benchmark using readv's.\n */\nstatic int read_into_chunked_item(conn *c) {\n    int total = 0;\n    int res;\n    assert(c->rcurr != c->ritem);\n\n    while (c->rlbytes > 0) {\n        item_chunk *ch = (item_chunk *)c->ritem;\n        assert(ch->used <= ch->size);\n        if (ch->size == ch->used) {\n            // FIXME: ch->next is currently always 0. remove this?\n            if (ch->next) {\n                c->ritem = (char *) ch->next;\n            } else {\n                /* Allocate next chunk. Binary protocol needs 2b for \\r\\n */\n                c->ritem = (char *) do_item_alloc_chunk(ch, c->rlbytes +\n                       ((c->protocol == binary_prot) ? 2 : 0));\n                if (!c->ritem) {\n                    // We failed an allocation. Let caller handle cleanup.\n                    total = -2;\n                    break;\n                }\n                // ritem has new chunk, restart the loop.\n                continue;\n                //assert(c->rlbytes == 0);\n            }\n        }\n\n        int unused = ch->size - ch->used;\n        /* first check if we have leftovers in the conn_read buffer */\n        if (c->rbytes > 0) {\n            total = 0;\n            int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n            tocopy = tocopy > unused ? unused : tocopy;\n            if (c->ritem != c->rcurr) {\n                memmove(ch->data + ch->used, c->rcurr, tocopy);\n            }\n            total += tocopy;\n            c->rlbytes -= tocopy;\n            c->rcurr += tocopy;\n            c->rbytes -= tocopy;\n            ch->used += tocopy;\n            if (c->rlbytes == 0) {\n                break;\n            }\n        } else {\n            /*  now try reading from the socket */\n            res = read(c->sfd, ch->data + ch->used,\n                    (unused > c->rlbytes ? c->rlbytes : unused));\n            if (res > 0) {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.bytes_read += res;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                ch->used += res;\n                total += res;\n                c->rlbytes -= res;\n            } else {\n                /* Reset total to the latest result so caller can handle it */\n                total = res;\n                break;\n            }\n        }\n    }\n\n    /* At some point I will be able to ditch the \\r\\n from item storage and\n       remove all of these kludges.\n       The above binprot check ensures inline space for \\r\\n, but if we do\n       exactly enough allocs there will be no additional chunk for \\r\\n.\n     */\n    if (c->rlbytes == 0 && c->protocol == binary_prot && total >= 0) {\n        item_chunk *ch = (item_chunk *)c->ritem;\n        if (ch->size - ch->used < 2) {\n            c->ritem = (char *) do_item_alloc_chunk(ch, 2);\n            if (!c->ritem) {\n                total = -2;\n            }\n        }\n    }\n    return total;\n}\n\nstatic void drive_machine(conn *c) {\n    bool stop = false;\n    int sfd;\n    socklen_t addrlen;\n    struct sockaddr_storage addr;\n    int nreqs = settings.reqs_per_event;\n    int res;\n    const char *str;\n#ifdef HAVE_ACCEPT4\n    static int  use_accept4 = 1;\n#else\n    static int  use_accept4 = 0;\n#endif\n\n    assert(c != NULL);\n\n    while (!stop) {\n\n        switch(c->state) {\n        case conn_listening:\n            addrlen = sizeof(addr);\n#ifdef HAVE_ACCEPT4\n            if (use_accept4) {\n                sfd = accept4(c->sfd, (struct sockaddr *)&addr, &addrlen, SOCK_NONBLOCK);\n            } else {\n                sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);\n            }\n#else\n            sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen);\n#endif\n            if (sfd == -1) {\n                if (use_accept4 && errno == ENOSYS) {\n                    use_accept4 = 0;\n                    continue;\n                }\n                perror(use_accept4 ? \"accept4()\" : \"accept()\");\n                if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                    /* these are transient, so don't log anything */\n                    stop = true;\n                } else if (errno == EMFILE) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Too many open connections\\n\");\n                    accept_new_conns(false);\n                    stop = true;\n                } else {\n                    perror(\"accept()\");\n                    stop = true;\n                }\n                break;\n            }\n            if (!use_accept4) {\n                if (fcntl(sfd, F_SETFL, fcntl(sfd, F_GETFL) | O_NONBLOCK) < 0) {\n                    perror(\"setting O_NONBLOCK\");\n                    close(sfd);\n                    break;\n                }\n            }\n\n            if (settings.maxconns_fast &&\n                stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {\n                str = \"ERROR Too many open connections\\r\\n\";\n                res = write(sfd, str, strlen(str));\n                close(sfd);\n                STATS_LOCK();\n                stats.rejected_conns++;\n                STATS_UNLOCK();\n            } else {\n                dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,\n                                     DATA_BUFFER_SIZE, c->transport);\n            }\n\n            stop = true;\n            break;\n\n        case conn_waiting:\n            if (!update_event(c, EV_READ | EV_PERSIST)) {\n                if (settings.verbose > 0)\n                    fprintf(stderr, \"Couldn't update event\\n\");\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            conn_set_state(c, conn_read);\n            stop = true;\n            break;\n\n        case conn_read:\n            res = IS_UDP(c->transport) ? try_read_udp(c) : try_read_network(c);\n\n            switch (res) {\n            case READ_NO_DATA_RECEIVED:\n                conn_set_state(c, conn_waiting);\n                break;\n            case READ_DATA_RECEIVED:\n                conn_set_state(c, conn_parse_cmd);\n                break;\n            case READ_ERROR:\n                conn_set_state(c, conn_closing);\n                break;\n            case READ_MEMORY_ERROR: /* Failed to allocate more memory */\n                /* State already set by try_read_network */\n                break;\n            }\n            break;\n\n        case conn_parse_cmd :\n            if (try_read_command(c) == 0) {\n                /* wee need more data! */\n                conn_set_state(c, conn_waiting);\n            }\n\n            break;\n\n        case conn_new_cmd:\n            /* Only process nreqs at a time to avoid starving other\n               connections */\n\n            --nreqs;\n            if (nreqs >= 0) {\n                reset_cmd_handler(c);\n            } else {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.conn_yields++;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                if (c->rbytes > 0) {\n                    /* We have already read in data into the input buffer,\n                       so libevent will most likely not signal read events\n                       on the socket (unless more data is available. As a\n                       hack we should just put in a request to write data,\n                       because that should be possible ;-)\n                    */\n                    if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                        if (settings.verbose > 0)\n                            fprintf(stderr, \"Couldn't update event\\n\");\n                        conn_set_state(c, conn_closing);\n                        break;\n                    }\n                }\n                stop = true;\n            }\n            break;\n\n        case conn_nread:\n            if (c->rlbytes == 0) {\n                complete_nread(c);\n                break;\n            }\n\n            /* Check if rbytes < 0, to prevent crash */\n            if (c->rlbytes < 0) {\n                if (settings.verbose) {\n                    fprintf(stderr, \"Invalid rlbytes to read: len %d\\n\", c->rlbytes);\n                }\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            if (!c->item || (((item *)c->item)->it_flags & ITEM_CHUNKED) == 0) {\n                /* first check if we have leftovers in the conn_read buffer */\n                if (c->rbytes > 0) {\n                    int tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n                    if (c->ritem != c->rcurr) {\n                        memmove(c->ritem, c->rcurr, tocopy);\n                    }\n                    c->ritem += tocopy;\n                    c->rlbytes -= tocopy;\n                    c->rcurr += tocopy;\n                    c->rbytes -= tocopy;\n                    if (c->rlbytes == 0) {\n                        break;\n                    }\n                }\n\n                /*  now try reading from the socket */\n                res = read(c->sfd, c->ritem, c->rlbytes);\n                if (res > 0) {\n                    pthread_mutex_lock(&c->thread->stats.mutex);\n                    c->thread->stats.bytes_read += res;\n                    pthread_mutex_unlock(&c->thread->stats.mutex);\n                    if (c->rcurr == c->ritem) {\n                        c->rcurr += res;\n                    }\n                    c->ritem += res;\n                    c->rlbytes -= res;\n                    break;\n                }\n            } else {\n                res = read_into_chunked_item(c);\n                if (res > 0)\n                    break;\n            }\n\n            if (res == 0) { /* end of stream */\n                conn_set_state(c, conn_closing);\n                break;\n            }\n\n            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n                if (!update_event(c, EV_READ | EV_PERSIST)) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't update event\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n                stop = true;\n                break;\n            }\n\n            /* Memory allocation failure */\n            if (res == -2) {\n                out_of_memory(c, \"SERVER_ERROR Out of memory during read\");\n                c->sbytes = c->rlbytes;\n                c->write_and_go = conn_swallow;\n                break;\n            }\n            /* otherwise we have a real error, on which we close the connection */\n            if (settings.verbose > 0) {\n                fprintf(stderr, \"Failed to read, and not due to blocking:\\n\"\n                        \"errno: %d %s \\n\"\n                        \"rcurr=%lx ritem=%lx rbuf=%lx rlbytes=%d rsize=%d\\n\",\n                        errno, strerror(errno),\n                        (long)c->rcurr, (long)c->ritem, (long)c->rbuf,\n                        (int)c->rlbytes, (int)c->rsize);\n            }\n            conn_set_state(c, conn_closing);\n            break;\n\n        case conn_swallow:\n            /* we are reading sbytes and throwing them away */\n            if (c->sbytes == 0) {\n                conn_set_state(c, conn_new_cmd);\n                break;\n            }\n\n            /* first check if we have leftovers in the conn_read buffer */\n            if (c->rbytes > 0) {\n                int tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;\n                c->sbytes -= tocopy;\n                c->rcurr += tocopy;\n                c->rbytes -= tocopy;\n                break;\n            }\n\n            /*  now try reading from the socket */\n            res = read(c->sfd, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize);\n            if (res > 0) {\n                pthread_mutex_lock(&c->thread->stats.mutex);\n                c->thread->stats.bytes_read += res;\n                pthread_mutex_unlock(&c->thread->stats.mutex);\n                c->sbytes -= res;\n                break;\n            }\n            if (res == 0) { /* end of stream */\n                conn_set_state(c, conn_closing);\n                break;\n            }\n            if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n                if (!update_event(c, EV_READ | EV_PERSIST)) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't update event\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n                stop = true;\n                break;\n            }\n            /* otherwise we have a real error, on which we close the connection */\n            if (settings.verbose > 0)\n                fprintf(stderr, \"Failed to read, and not due to blocking\\n\");\n            conn_set_state(c, conn_closing);\n            break;\n\n        case conn_write:\n            /*\n             * We want to write out a simple response. If we haven't already,\n             * assemble it into a msgbuf list (this will be a single-entry\n             * list for TCP or a two-entry list for UDP).\n             */\n            if (c->iovused == 0 || (IS_UDP(c->transport) && c->iovused == 1)) {\n                if (add_iov(c, c->wcurr, c->wbytes) != 0) {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Couldn't build response\\n\");\n                    conn_set_state(c, conn_closing);\n                    break;\n                }\n            }\n\n            /* fall through... */\n\n        case conn_mwrite:\n          if (IS_UDP(c->transport) && c->msgcurr == 0 && build_udp_headers(c) != 0) {\n            if (settings.verbose > 0)\n              fprintf(stderr, \"Failed to build UDP headers\\n\");\n            conn_set_state(c, conn_closing);\n            break;\n          }\n            switch (transmit(c)) {\n            case TRANSMIT_COMPLETE:\n                if (c->state == conn_mwrite) {\n                    conn_release_items(c);\n                    /* XXX:  I don't know why this wasn't the general case */\n                    if(c->protocol == binary_prot) {\n                        conn_set_state(c, c->write_and_go);\n                    } else {\n                        conn_set_state(c, conn_new_cmd);\n                    }\n                } else if (c->state == conn_write) {\n                    if (c->write_and_free) {\n                        free(c->write_and_free);\n                        c->write_and_free = 0;\n                    }\n                    conn_set_state(c, c->write_and_go);\n                } else {\n                    if (settings.verbose > 0)\n                        fprintf(stderr, \"Unexpected state %d\\n\", c->state);\n                    conn_set_state(c, conn_closing);\n                }\n                break;\n\n            case TRANSMIT_INCOMPLETE:\n            case TRANSMIT_HARD_ERROR:\n                break;                   /* Continue in state machine. */\n\n            case TRANSMIT_SOFT_ERROR:\n                stop = true;\n                break;\n            }\n            break;\n\n        case conn_closing:\n            if (IS_UDP(c->transport))\n                conn_cleanup(c);\n            else\n                conn_close(c);\n            stop = true;\n            break;\n\n        case conn_closed:\n            /* This only happens if dormando is an idiot. */\n            abort();\n            break;\n\n        case conn_watch:\n            /* We handed off our connection to the logger thread. */\n            stop = true;\n            break;\n        case conn_max_state:\n            assert(false);\n            break;\n        }\n    }\n\n    return;\n}\n\nvoid event_handler(const int fd, const short which, void *arg) {\n    conn *c;\n\n    c = (conn *)arg;\n    assert(c != NULL);\n\n    c->which = which;\n\n    /* sanity */\n    if (fd != c->sfd) {\n        if (settings.verbose > 0)\n            fprintf(stderr, \"Catastrophic: event fd doesn't match conn fd!\\n\");\n        conn_close(c);\n        return;\n    }\n\n    drive_machine(c);\n\n    /* wait for next event */\n    return;\n}\n\nstatic int new_socket(struct addrinfo *ai) {\n    int sfd;\n    int flags;\n\n    if ((sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol)) == -1) {\n        return -1;\n    }\n\n    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||\n        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {\n        perror(\"setting O_NONBLOCK\");\n        close(sfd);\n        return -1;\n    }\n    return sfd;\n}\n\n\n/*\n * Sets a socket's send buffer size to the maximum allowed by the system.\n */\nstatic void maximize_sndbuf(const int sfd) {\n    socklen_t intsize = sizeof(int);\n    int last_good = 0;\n    int min, max, avg;\n    int old_size;\n\n    /* Start with the default size. */\n    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, &old_size, &intsize) != 0) {\n        if (settings.verbose > 0)\n            perror(\"getsockopt(SO_SNDBUF)\");\n        return;\n    }\n\n    /* Binary-search for the real maximum. */\n    min = old_size;\n    max = MAX_SENDBUF_SIZE;\n\n    while (min <= max) {\n        avg = ((unsigned int)(min + max)) / 2;\n        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {\n            last_good = avg;\n            min = avg + 1;\n        } else {\n            max = avg - 1;\n        }\n    }\n\n    if (settings.verbose > 1)\n        fprintf(stderr, \"<%d send buffer was %d, now %d\\n\", sfd, old_size, last_good);\n}\n\n/**\n * Create a socket and bind it to a specific port number\n * @param interface the interface to bind to\n * @param port the port number to bind to\n * @param transport the transport protocol (TCP / UDP)\n * @param portnumber_file A filepointer to write the port numbers to\n *        when they are successfully added to the list of ports we\n *        listen on.\n */\nstatic int server_socket(const char *interface,\n                         int port,\n                         enum network_transport transport,\n                         FILE *portnumber_file) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct addrinfo *ai;\n    struct addrinfo *next;\n    struct addrinfo hints = { .ai_flags = AI_PASSIVE,\n                              .ai_family = AF_UNSPEC };\n    char port_buf[NI_MAXSERV];\n    int error;\n    int success = 0;\n    int flags =1;\n\n    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;\n\n    if (port == -1) {\n        port = 0;\n    }\n    snprintf(port_buf, sizeof(port_buf), \"%d\", port);\n    error= getaddrinfo(interface, port_buf, &hints, &ai);\n    if (error != 0) {\n        if (error != EAI_SYSTEM)\n          fprintf(stderr, \"getaddrinfo(): %s\\n\", gai_strerror(error));\n        else\n          perror(\"getaddrinfo()\");\n        return 1;\n    }\n\n    for (next= ai; next; next= next->ai_next) {\n        conn *listen_conn_add;\n        if ((sfd = new_socket(next)) == -1) {\n            /* getaddrinfo can return \"junk\" addresses,\n             * we make sure at least one works before erroring.\n             */\n            if (errno == EMFILE) {\n                /* ...unless we're out of fds */\n                perror(\"server_socket\");\n                exit(EX_OSERR);\n            }\n            continue;\n        }\n\n#ifdef IPV6_V6ONLY\n        if (next->ai_family == AF_INET6) {\n            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));\n            if (error != 0) {\n                perror(\"setsockopt\");\n                close(sfd);\n                continue;\n            }\n        }\n#endif\n\n        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n        if (IS_UDP(transport)) {\n            maximize_sndbuf(sfd);\n        } else {\n            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n            if (error != 0)\n                perror(\"setsockopt\");\n\n            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n            if (error != 0)\n                perror(\"setsockopt\");\n\n            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));\n            if (error != 0)\n                perror(\"setsockopt\");\n        }\n\n        if (bind(sfd, next->ai_addr, next->ai_addrlen) == -1) {\n            if (errno != EADDRINUSE) {\n                perror(\"bind()\");\n                close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            close(sfd);\n            continue;\n        } else {\n            success++;\n            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == -1) {\n                perror(\"listen()\");\n                close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            if (portnumber_file != NULL &&\n                (next->ai_addr->sa_family == AF_INET ||\n                 next->ai_addr->sa_family == AF_INET6)) {\n                union {\n                    struct sockaddr_in in;\n                    struct sockaddr_in6 in6;\n                } my_sockaddr;\n                socklen_t len = sizeof(my_sockaddr);\n                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {\n                    if (next->ai_addr->sa_family == AF_INET) {\n                        fprintf(portnumber_file, \"%s INET: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in.sin_port));\n                    } else {\n                        fprintf(portnumber_file, \"%s INET6: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in6.sin6_port));\n                    }\n                }\n            }\n        }\n\n        if (IS_UDP(transport)) {\n            int c;\n\n            for (c = 0; c < settings.num_threads_per_udp; c++) {\n                /* Allocate one UDP file descriptor per worker thread;\n                 * this allows \"stats conns\" to separately list multiple\n                 * parallel UDP requests in progress.\n                 *\n                 * The dispatch code round-robins new connection requests\n                 * among threads, so this is guaranteed to assign one\n                 * FD to each thread.\n                 */\n                int per_thread_fd = c ? dup(sfd) : sfd;\n                dispatch_conn_new(per_thread_fd, conn_read,\n                                  EV_READ | EV_PERSIST,\n                                  UDP_READ_BUFFER_SIZE, transport);\n            }\n        } else {\n            if (!(listen_conn_add = conn_new(sfd, conn_listening,\n                                             EV_READ | EV_PERSIST, 1,\n                                             transport, main_base))) {\n                fprintf(stderr, \"failed to create listening connection\\n\");\n                exit(EXIT_FAILURE);\n            }\n            listen_conn_add->next = listen_conn;\n            listen_conn = listen_conn_add;\n        }\n    }\n\n    freeaddrinfo(ai);\n\n    /* Return zero iff we detected no errors in starting up connections */\n    return success == 0;\n}\n\nstatic int server_sockets(int port, enum network_transport transport,\n                          FILE *portnumber_file) {\n    if (settings.inter == NULL) {\n        return server_socket(settings.inter, port, transport, portnumber_file);\n    } else {\n        // tokenize them and bind to each one of them..\n        char *b;\n        int ret = 0;\n        char *list = strdup(settings.inter);\n\n        if (list == NULL) {\n            fprintf(stderr, \"Failed to allocate memory for parsing server interface string\\n\");\n            return 1;\n        }\n        for (char *p = strtok_r(list, \";,\", &b);\n             p != NULL;\n             p = strtok_r(NULL, \";,\", &b)) {\n            int the_port = port;\n\n            char *h = NULL;\n            if (*p == '[') {\n                // expecting it to be an IPv6 address enclosed in []\n                // i.e. RFC3986 style recommended by RFC5952\n                char *e = strchr(p, ']');\n                if (e == NULL) {\n                    fprintf(stderr, \"Invalid IPV6 address: \\\"%s\\\"\", p);\n                    return 1;\n                }\n                h = ++p; // skip the opening '['\n                *e = '\\0';\n                p = ++e; // skip the closing ']'\n            }\n\n            char *s = strchr(p, ':');\n            if (s != NULL) {\n                // If no more semicolons - attempt to treat as port number.\n                // Otherwise the only valid option is an unenclosed IPv6 without port, until\n                // of course there was an RFC3986 IPv6 address previously specified -\n                // in such a case there is no good option, will just send it to fail as port number.\n                if (strchr(s + 1, ':') == NULL || h != NULL) {\n                    *s = '\\0';\n                    ++s;\n                    if (!safe_strtol(s, &the_port)) {\n                        fprintf(stderr, \"Invalid port number: \\\"%s\\\"\", s);\n                        return 1;\n                    }\n                }\n            }\n\n            if (h != NULL)\n                p = h;\n\n            if (strcmp(p, \"*\") == 0) {\n                p = NULL;\n            }\n            ret |= server_socket(p, the_port, transport, portnumber_file);\n        }\n        free(list);\n        return ret;\n    }\n}\n\nstatic int new_socket_unix(void) {\n    int sfd;\n    int flags;\n\n    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == -1) {\n        perror(\"socket()\");\n        return -1;\n    }\n\n    if ((flags = fcntl(sfd, F_GETFL, 0)) < 0 ||\n        fcntl(sfd, F_SETFL, flags | O_NONBLOCK) < 0) {\n        perror(\"setting O_NONBLOCK\");\n        close(sfd);\n        return -1;\n    }\n    return sfd;\n}\n\nstatic int server_socket_unix(const char *path, int access_mask) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct sockaddr_un addr;\n    struct stat tstat;\n    int flags =1;\n    int old_umask;\n\n    if (!path) {\n        return 1;\n    }\n\n    if ((sfd = new_socket_unix()) == -1) {\n        return 1;\n    }\n\n    /*\n     * Clean up a previous socket file if we left it around\n     */\n    if (lstat(path, &tstat) == 0) {\n        if (S_ISSOCK(tstat.st_mode))\n            unlink(path);\n    }\n\n    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n\n    /*\n     * the memset call clears nonstandard fields in some impementations\n     * that otherwise mess things up.\n     */\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sun_family = AF_UNIX;\n    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);\n    assert(strcmp(addr.sun_path, path) == 0);\n    old_umask = umask( ~(access_mask&0777));\n    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {\n        perror(\"bind()\");\n        close(sfd);\n        umask(old_umask);\n        return 1;\n    }\n    umask(old_umask);\n    if (listen(sfd, settings.backlog) == -1) {\n        perror(\"listen()\");\n        close(sfd);\n        return 1;\n    }\n    if (!(listen_conn = conn_new(sfd, conn_listening,\n                                 EV_READ | EV_PERSIST, 1,\n                                 local_transport, main_base))) {\n        fprintf(stderr, \"failed to create listening connection\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    return 0;\n}\n\n/*\n * We keep the current time of day in a global variable that's updated by a\n * timer event. This saves us a bunch of time() system calls (we really only\n * need to get the time once a second, whereas there can be tens of thousands\n * of requests a second) and allows us to use server-start-relative timestamps\n * rather than absolute UNIX timestamps, a space savings on systems where\n * sizeof(time_t) > sizeof(unsigned int).\n */\nvolatile rel_time_t current_time;\nstatic struct event clockevent;\n\n/* libevent uses a monotonic clock when available for event scheduling. Aside\n * from jitter, simply ticking our internal timer here is accurate enough.\n * Note that users who are setting explicit dates for expiration times *must*\n * ensure their clocks are correct before starting memcached. */\nstatic void clock_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 1, .tv_usec = 0};\n    static bool initialized = false;\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n    static bool monotonic = false;\n    static time_t monotonic_start;\n#endif\n\n    if (initialized) {\n        /* only delete the event if it's actually there. */\n        evtimer_del(&clockevent);\n    } else {\n        initialized = true;\n        /* process_started is initialized to time() - 2. We initialize to 1 so\n         * flush_all won't underflow during tests. */\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n        struct timespec ts;\n        if (clock_gettime(CLOCK_MONOTONIC, &ts) == 0) {\n            monotonic = true;\n            monotonic_start = ts.tv_sec - ITEM_UPDATE_INTERVAL - 2;\n        }\n#endif\n    }\n\n    evtimer_set(&clockevent, clock_handler, 0);\n    event_base_set(main_base, &clockevent);\n    evtimer_add(&clockevent, &t);\n\n#if defined(HAVE_CLOCK_GETTIME) && defined(CLOCK_MONOTONIC)\n    if (monotonic) {\n        struct timespec ts;\n        if (clock_gettime(CLOCK_MONOTONIC, &ts) == -1)\n            return;\n        current_time = (rel_time_t) (ts.tv_sec - monotonic_start);\n        return;\n    }\n#endif\n    {\n        struct timeval tv;\n        gettimeofday(&tv, NULL);\n        current_time = (rel_time_t) (tv.tv_sec - process_started);\n    }\n}\n\nstatic void usage(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\");\n    printf(\"-p <num>      TCP port number to listen on (default: 11211)\\n\"\n           \"-U <num>      UDP port number to listen on (default: 11211, 0 is off)\\n\"\n           \"-s <file>     UNIX socket path to listen on (disables network support)\\n\"\n           \"-A            enable ascii \\\"shutdown\\\" command\\n\"\n           \"-a <mask>     access mask for UNIX socket, in octal (default: 0700)\\n\"\n           \"-l <addr>     interface to listen on (default: INADDR_ANY, all addresses)\\n\"\n           \"              <addr> may be specified as host:port. If you don't specify\\n\"\n           \"              a port number, the value you specified with -p or -U is\\n\"\n           \"              used. You may specify multiple addresses separated by comma\\n\"\n           \"              or by using -l multiple times\\n\"\n\n           \"-d            run as a daemon\\n\"\n           \"-r            maximize core file limit\\n\"\n           \"-u <username> assume identity of <username> (only when run as root)\\n\"\n           \"-m <num>      max memory to use for items in megabytes (default: 64 MB)\\n\"\n           \"-M            return error on memory exhausted (rather than removing items)\\n\"\n           \"-c <num>      max simultaneous connections (default: 1024)\\n\"\n           \"-k            lock down all paged memory.  Note that there is a\\n\"\n           \"              limit on how much memory you may lock.  Trying to\\n\"\n           \"              allocate more than that would fail, so be sure you\\n\"\n           \"              set the limit correctly for the user you started\\n\"\n           \"              the daemon with (not for -u <username> user;\\n\"\n           \"              under sh this is done with 'ulimit -S -l NUM_KB').\\n\"\n           \"-v            verbose (print errors/warnings while in event loop)\\n\"\n           \"-vv           very verbose (also print client commands/reponses)\\n\"\n           \"-vvv          extremely verbose (also print internal state transitions)\\n\"\n           \"-h            print this help and exit\\n\"\n           \"-i            print memcached and libevent license\\n\"\n           \"-V            print version and exit\\n\"\n           \"-P <file>     save PID in <file>, only used with -d option\\n\"\n           \"-f <factor>   chunk size growth factor (default: 1.25)\\n\"\n           \"-n <bytes>    minimum space allocated for key+value+flags (default: 48)\\n\");\n    printf(\"-L            Try to use large memory pages (if available). Increasing\\n\"\n           \"              the memory page size could reduce the number of TLB misses\\n\"\n           \"              and improve the performance. In order to get large pages\\n\"\n           \"              from the OS, memcached will allocate the total item-cache\\n\"\n           \"              in one large chunk.\\n\");\n    printf(\"-D <char>     Use <char> as the delimiter between key prefixes and IDs.\\n\"\n           \"              This is used for per-prefix stats reporting. The default is\\n\"\n           \"              \\\":\\\" (colon). If this option is specified, stats collection\\n\"\n           \"              is turned on automatically; if not, then it may be turned on\\n\"\n           \"              by sending the \\\"stats detail on\\\" command to the server.\\n\");\n    printf(\"-t <num>      number of threads to use (default: 4)\\n\");\n    printf(\"-R            Maximum number of requests per event, limits the number of\\n\"\n           \"              requests process for a given connection to prevent \\n\"\n           \"              starvation (default: 20)\\n\");\n    printf(\"-C            Disable use of CAS\\n\");\n    printf(\"-b <num>      Set the backlog queue limit (default: 1024)\\n\");\n    printf(\"-B            Binding protocol - one of ascii, binary, or auto (default)\\n\");\n    printf(\"-I            Override the size of each slab page. Adjusts max item size\\n\"\n           \"              (default: 1mb, min: 1k, max: 128m)\\n\");\n#ifdef ENABLE_SASL\n    printf(\"-S            Turn on Sasl authentication\\n\");\n#endif\n    printf(\"-F            Disable flush_all command\\n\");\n    printf(\"-X            Disable stats cachedump and lru_crawler metadump commands\\n\");\n    printf(\"-o            Comma separated list of extended or experimental options\\n\"\n           \"              - maxconns_fast: immediately close new\\n\"\n           \"                connections if over maxconns limit\\n\"\n           \"              - hashpower: An integer multiplier for how large the hash\\n\"\n           \"                table should be. Can be grown at runtime if not big enough.\\n\"\n           \"                Set this based on \\\"STAT hash_power_level\\\" before a \\n\"\n           \"                restart.\\n\"\n           \"              - tail_repair_time: Time in seconds that indicates how long to wait before\\n\"\n           \"                forcefully taking over the LRU tail item whose refcount has leaked.\\n\"\n           \"                Disabled by default; dangerous option.\\n\"\n           \"              - hash_algorithm: The hash table algorithm\\n\"\n           \"                default is jenkins hash. options: jenkins, murmur3\\n\"\n           \"              - lru_crawler: Enable LRU Crawler background thread\\n\"\n           \"              - lru_crawler_sleep: Microseconds to sleep between items\\n\"\n           \"                default is 100.\\n\"\n           \"              - lru_crawler_tocrawl: Max items to crawl per slab per run\\n\"\n           \"                default is 0 (unlimited)\\n\"\n           \"              - lru_maintainer: Enable new LRU system + background thread\\n\"\n           \"              - hot_lru_pct: Pct of slab memory to reserve for hot lru.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - warm_lru_pct: Pct of slab memory to reserve for warm lru.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - hot_max_age: Items idle longer than this drop from hot lru.\\n\"\n           \"              - cold_max_factor: Items idle longer than cold lru age * this drop from warm.\\n\"\n           \"              - temporary_ttl: TTL's below this use separate LRU, cannot be evicted.\\n\"\n           \"                (requires lru_maintainer)\\n\"\n           \"              - idle_timeout: Timeout for idle connections\\n\"\n           \"              - (EXPERIMENTAL) slab_chunk_max: Maximum slab size. Do not change without extreme care.\\n\"\n           \"              - watcher_logbuf_size: Size in kilobytes of per-watcher write buffer.\\n\"\n           \"              - worker_logbuf_Size: Size in kilobytes of per-worker-thread buffer\\n\"\n           \"                read by background thread. Which is then written to watchers.\\n\"\n           \"              - track_sizes: Enable dynamic reports for 'stats sizes' command.\\n\"\n           \"              - no_inline_ascii_resp: Save up to 24 bytes per item. Small perf hit in ASCII,\\n\"\n           \"                no perf difference in binary protocol. Speeds up sets.\\n\"\n           \"              - modern: Enables 'modern' defaults. Options that will be default in future.\\n\"\n           \"                enables: slab_chunk_max:512k,slab_reassign,slab_automove=1,maxconns_fast,\\n\"\n           \"                         hash_algorithm=murmur3,lru_crawler,lru_maintainer,no_inline_ascii_resp\\n\"\n           );\n    return;\n}\n\nstatic void usage_license(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\\n\");\n    printf(\n    \"Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions are\\n\"\n    \"met:\\n\"\n    \"\\n\"\n    \"    * Redistributions of source code must retain the above copyright\\n\"\n    \"notice, this list of conditions and the following disclaimer.\\n\"\n    \"\\n\"\n    \"    * Redistributions in binary form must reproduce the above\\n\"\n    \"copyright notice, this list of conditions and the following disclaimer\\n\"\n    \"in the documentation and/or other materials provided with the\\n\"\n    \"distribution.\\n\"\n    \"\\n\"\n    \"    * Neither the name of the Danga Interactive nor the names of its\\n\"\n    \"contributors may be used to endorse or promote products derived from\\n\"\n    \"this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"\n    \"\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n\"\n    \"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n\"\n    \"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n\"\n    \"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\"\n    \"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"This product includes software developed by Niels Provos.\\n\"\n    \"\\n\"\n    \"[ libevent ]\\n\"\n    \"\\n\"\n    \"Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions\\n\"\n    \"are met:\\n\"\n    \"1. Redistributions of source code must retain the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer.\\n\"\n    \"2. Redistributions in binary form must reproduce the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer in the\\n\"\n    \"   documentation and/or other materials provided with the distribution.\\n\"\n    \"3. All advertising materials mentioning features or use of this software\\n\"\n    \"   must display the following acknowledgement:\\n\"\n    \"      This product includes software developed by Niels Provos.\\n\"\n    \"4. The name of the author may not be used to endorse or promote products\\n\"\n    \"   derived from this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\\n\"\n    \"IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n\"\n    \"OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n\"\n    \"IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n\"\n    \"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n\"\n    \"NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n\"\n    \"THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    );\n\n    return;\n}\n\nstatic void save_pid(const char *pid_file) {\n    FILE *fp;\n    if (access(pid_file, F_OK) == 0) {\n        if ((fp = fopen(pid_file, \"r\")) != NULL) {\n            char buffer[1024];\n            if (fgets(buffer, sizeof(buffer), fp) != NULL) {\n                unsigned int pid;\n                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {\n                    fprintf(stderr, \"WARNING: The pid file contained the following (running) pid: %u\\n\", pid);\n                }\n            }\n            fclose(fp);\n        }\n    }\n\n    /* Create the pid file first with a temporary name, then\n     * atomically move the file to the real name to avoid a race with\n     * another process opening the file to read the pid, but finding\n     * it empty.\n     */\n    char tmp_pid_file[1024];\n    snprintf(tmp_pid_file, sizeof(tmp_pid_file), \"%s.tmp\", pid_file);\n\n    if ((fp = fopen(tmp_pid_file, \"w\")) == NULL) {\n        vperror(\"Could not open the pid file %s for writing\", tmp_pid_file);\n        return;\n    }\n\n    fprintf(fp,\"%ld\\n\", (long)getpid());\n    if (fclose(fp) == -1) {\n        vperror(\"Could not close the pid file %s\", tmp_pid_file);\n    }\n\n    if (rename(tmp_pid_file, pid_file) != 0) {\n        vperror(\"Could not rename the pid file from %s to %s\",\n                tmp_pid_file, pid_file);\n    }\n}\n\nstatic void remove_pidfile(const char *pid_file) {\n  if (pid_file == NULL)\n      return;\n\n  if (unlink(pid_file) != 0) {\n      vperror(\"Could not remove the pid file %s\", pid_file);\n  }\n\n}\n\nstatic void sig_handler(const int sig) {\n    printf(\"Signal handled: %s.\\n\", strsignal(sig));\n    exit(EXIT_SUCCESS);\n}\n\n#ifndef HAVE_SIGIGNORE\nstatic int sigignore(int sig) {\n    struct sigaction sa = { .sa_handler = SIG_IGN, .sa_flags = 0 };\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1) {\n        return -1;\n    }\n    return 0;\n}\n#endif\n\n\n/*\n * On systems that supports multiple page sizes we may reduce the\n * number of TLB-misses by using the biggest available page size\n */\nstatic int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            fprintf(stderr, \"Failed to set large pages: %s\\n\",\n                    strerror(errno));\n            fprintf(stderr, \"Will use default page size\\n\");\n        } else {\n            ret = 0;\n        }\n    } else {\n        fprintf(stderr, \"Failed to get supported pagesizes: %s\\n\",\n                strerror(errno));\n        fprintf(stderr, \"Will use default page size\\n\");\n    }\n\n    return ret;\n#else\n    return -1;\n#endif\n}\n\n/**\n * Do basic sanity check of the runtime environment\n * @return true if no errors found, false if we can't use this env\n */\nstatic bool sanitycheck(void) {\n    /* One of our biggest problems is old and bogus libevents */\n    const char *ever = event_get_version();\n    if (ever != NULL) {\n        if (strncmp(ever, \"1.\", 2) == 0) {\n            /* Require at least 1.3 (that's still a couple of years old) */\n            if (('0' <= ever[2] && ever[2] < '3') && !isdigit(ever[3])) {\n                fprintf(stderr, \"You are using libevent %s.\\nPlease upgrade to\"\n                        \" a more recent version (1.3 or newer)\\n\",\n                        event_get_version());\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nstatic bool _parse_slab_sizes(char *s, uint32_t *slab_sizes) {\n    char *b = NULL;\n    uint32_t size = 0;\n    int i = 0;\n    uint32_t last_size = 0;\n\n    if (strlen(s) < 1)\n        return false;\n\n    for (char *p = strtok_r(s, \"-\", &b);\n         p != NULL;\n         p = strtok_r(NULL, \"-\", &b)) {\n        if (!safe_strtoul(p, &size) || size < settings.chunk_size\n             || size > settings.slab_chunk_size_max) {\n            fprintf(stderr, \"slab size %u is out of valid range\\n\", size);\n            return false;\n        }\n        if (last_size >= size) {\n            fprintf(stderr, \"slab size %u cannot be lower than or equal to a previous class size\\n\", size);\n            return false;\n        }\n        if (size <= last_size + CHUNK_ALIGN_BYTES) {\n            fprintf(stderr, \"slab size %u must be at least %d bytes larger than previous class\\n\",\n                    size, CHUNK_ALIGN_BYTES);\n            return false;\n        }\n        slab_sizes[i++] = size;\n        last_size = size;\n        if (i >= MAX_NUMBER_OF_SLAB_CLASSES-1) {\n            fprintf(stderr, \"too many slab classes specified\\n\");\n            return false;\n        }\n    }\n\n    slab_sizes[i] = 0;\n    return true;\n}\n\nint main (int argc, char **argv) {\n    int c;\n    bool lock_memory = false;\n    bool do_daemonize = false;\n    bool preallocate = false;\n    int maxcore = 0;\n    char *username = NULL;\n    char *pid_file = NULL;\n    struct passwd *pw;\n    struct rlimit rlim;\n    char *buf;\n    char unit = '\\0';\n    int size_max = 0;\n    int retval = EXIT_SUCCESS;\n    /* listening sockets */\n    static int *l_socket = NULL;\n\n    /* udp socket */\n    static int *u_socket = NULL;\n    bool protocol_specified = false;\n    bool tcp_specified = false;\n    bool udp_specified = false;\n    bool start_lru_maintainer = false;\n    bool start_lru_crawler = false;\n    enum hashfunc_type hash_type = JENKINS_HASH;\n    uint32_t tocrawl;\n    uint32_t slab_sizes[MAX_NUMBER_OF_SLAB_CLASSES];\n    bool use_slab_sizes = false;\n    char *slab_sizes_unparsed = NULL;\n    bool slab_chunk_size_changed = false;\n\n    char *subopts, *subopts_orig;\n    char *subopts_value;\n    enum {\n        MAXCONNS_FAST = 0,\n        HASHPOWER_INIT,\n        SLAB_REASSIGN,\n        SLAB_AUTOMOVE,\n        TAIL_REPAIR_TIME,\n        HASH_ALGORITHM,\n        LRU_CRAWLER,\n        LRU_CRAWLER_SLEEP,\n        LRU_CRAWLER_TOCRAWL,\n        LRU_MAINTAINER,\n        HOT_LRU_PCT,\n        WARM_LRU_PCT,\n        HOT_MAX_AGE,\n        WARM_MAX_FACTOR,\n        TEMPORARY_TTL,\n        IDLE_TIMEOUT,\n        WATCHER_LOGBUF_SIZE,\n        WORKER_LOGBUF_SIZE,\n        SLAB_SIZES,\n        SLAB_CHUNK_MAX,\n        TRACK_SIZES,\n        NO_INLINE_ASCII_RESP,\n        MODERN\n    };\n    char *const subopts_tokens[] = {\n        [MAXCONNS_FAST] = \"maxconns_fast\",\n        [HASHPOWER_INIT] = \"hashpower\",\n        [SLAB_REASSIGN] = \"slab_reassign\",\n        [SLAB_AUTOMOVE] = \"slab_automove\",\n        [TAIL_REPAIR_TIME] = \"tail_repair_time\",\n        [HASH_ALGORITHM] = \"hash_algorithm\",\n        [LRU_CRAWLER] = \"lru_crawler\",\n        [LRU_CRAWLER_SLEEP] = \"lru_crawler_sleep\",\n        [LRU_CRAWLER_TOCRAWL] = \"lru_crawler_tocrawl\",\n        [LRU_MAINTAINER] = \"lru_maintainer\",\n        [HOT_LRU_PCT] = \"hot_lru_pct\",\n        [WARM_LRU_PCT] = \"warm_lru_pct\",\n        [HOT_MAX_AGE] = \"hot_max_age\",\n        [WARM_MAX_FACTOR] = \"warm_max_factor\",\n        [TEMPORARY_TTL] = \"temporary_ttl\",\n        [IDLE_TIMEOUT] = \"idle_timeout\",\n        [WATCHER_LOGBUF_SIZE] = \"watcher_logbuf_size\",\n        [WORKER_LOGBUF_SIZE] = \"worker_logbuf_size\",\n        [SLAB_SIZES] = \"slab_sizes\",\n        [SLAB_CHUNK_MAX] = \"slab_chunk_max\",\n        [TRACK_SIZES] = \"track_sizes\",\n        [NO_INLINE_ASCII_RESP] = \"no_inline_ascii_resp\",\n        [MODERN] = \"modern\",\n        NULL\n    };\n\n    if (!sanitycheck()) {\n        return EX_OSERR;\n    }\n\n    /* handle SIGINT and SIGTERM */\n    signal(SIGINT, sig_handler);\n    signal(SIGTERM, sig_handler);\n\n    /* init settings */\n    settings_init();\n\n    /* Run regardless of initializing it later */\n    init_lru_crawler();\n    init_lru_maintainer();\n\n    /* set stderr non-buffering (for running under, say, daemontools) */\n    setbuf(stderr, NULL);\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"a:\"  /* access mask for unix socket */\n          \"A\"  /* enable admin shutdown commannd */\n          \"p:\"  /* TCP port number to listen on */\n          \"s:\"  /* unix socket path to listen on */\n          \"U:\"  /* UDP port number to listen on */\n          \"m:\"  /* max memory to use for items in megabytes */\n          \"M\"   /* return error on memory exhausted */\n          \"c:\"  /* max simultaneous connections */\n          \"k\"   /* lock down all paged memory */\n          \"hiV\" /* help, licence info, version */\n          \"r\"   /* maximize core file limit */\n          \"v\"   /* verbose */\n          \"d\"   /* daemon mode */\n          \"l:\"  /* interface to listen on */\n          \"u:\"  /* user identity to run as */\n          \"P:\"  /* save PID in file */\n          \"f:\"  /* factor? */\n          \"n:\"  /* minimum space allocated for key+value+flags */\n          \"t:\"  /* threads */\n          \"D:\"  /* prefix delimiter? */\n          \"L\"   /* Large memory pages */\n          \"R:\"  /* max requests per event */\n          \"C\"   /* Disable use of CAS */\n          \"b:\"  /* backlog queue limit */\n          \"B:\"  /* Binding protocol */\n          \"I:\"  /* Max item size */\n          \"S\"   /* Sasl ON */\n          \"F\"   /* Disable flush_all */\n          \"X\"   /* Disable dump commands */\n          \"o:\"  /* Extended generic options */\n        ))) {\n        switch (c) {\n        case 'A':\n            /* enables \"shutdown\" command */\n            settings.shutdown_command = true;\n            break;\n\n        case 'a':\n            /* access for unix domain socket, as octal mask (like chmod)*/\n            settings.access= strtol(optarg,NULL,8);\n            break;\n\n        case 'U':\n            settings.udpport = atoi(optarg);\n            udp_specified = true;\n            break;\n        case 'p':\n            settings.port = atoi(optarg);\n            tcp_specified = true;\n            break;\n        case 's':\n            settings.socketpath = optarg;\n            break;\n        case 'm':\n            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n            break;\n        case 'M':\n            settings.evict_to_free = 0;\n            break;\n        case 'c':\n            settings.maxconns = atoi(optarg);\n            if (settings.maxconns <= 0) {\n                fprintf(stderr, \"Maximum connections must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'h':\n            usage();\n            exit(EXIT_SUCCESS);\n        case 'i':\n            usage_license();\n            exit(EXIT_SUCCESS);\n        case 'V':\n            printf(PACKAGE \" \" VERSION \"\\n\");\n            exit(EXIT_SUCCESS);\n        case 'k':\n            lock_memory = true;\n            break;\n        case 'v':\n            settings.verbose++;\n            break;\n        case 'l':\n            if (settings.inter != NULL) {\n                if (strstr(settings.inter, optarg) != NULL) {\n                    break;\n                }\n                size_t len = strlen(settings.inter) + strlen(optarg) + 2;\n                char *p = malloc(len);\n                if (p == NULL) {\n                    fprintf(stderr, \"Failed to allocate memory\\n\");\n                    return 1;\n                }\n                snprintf(p, len, \"%s,%s\", settings.inter, optarg);\n                free(settings.inter);\n                settings.inter = p;\n            } else {\n                settings.inter= strdup(optarg);\n            }\n            break;\n        case 'd':\n            do_daemonize = true;\n            break;\n        case 'r':\n            maxcore = 1;\n            break;\n        case 'R':\n            settings.reqs_per_event = atoi(optarg);\n            if (settings.reqs_per_event == 0) {\n                fprintf(stderr, \"Number of requests per event must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'u':\n            username = optarg;\n            break;\n        case 'P':\n            pid_file = optarg;\n            break;\n        case 'f':\n            settings.factor = atof(optarg);\n            if (settings.factor <= 1.0) {\n                fprintf(stderr, \"Factor must be greater than 1\\n\");\n                return 1;\n            }\n            break;\n        case 'n':\n            settings.chunk_size = atoi(optarg);\n            if (settings.chunk_size == 0) {\n                fprintf(stderr, \"Chunk size must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 't':\n            settings.num_threads = atoi(optarg);\n            if (settings.num_threads <= 0) {\n                fprintf(stderr, \"Number of threads must be greater than 0\\n\");\n                return 1;\n            }\n            /* There're other problems when you get above 64 threads.\n             * In the future we should portably detect # of cores for the\n             * default.\n             */\n            if (settings.num_threads > 64) {\n                fprintf(stderr, \"WARNING: Setting a high number of worker\"\n                                \"threads is not recommended.\\n\"\n                                \" Set this value to the number of cores in\"\n                                \" your machine or less.\\n\");\n            }\n            break;\n        case 'D':\n            if (! optarg || ! optarg[0]) {\n                fprintf(stderr, \"No delimiter specified\\n\");\n                return 1;\n            }\n            settings.prefix_delimiter = optarg[0];\n            settings.detail_enabled = 1;\n            break;\n        case 'L' :\n            if (enable_large_pages() == 0) {\n                preallocate = true;\n            } else {\n                fprintf(stderr, \"Cannot enable large pages on this system\\n\"\n                    \"(There is no Linux support as of this version)\\n\");\n                return 1;\n            }\n            break;\n        case 'C' :\n            settings.use_cas = false;\n            break;\n        case 'b' :\n            settings.backlog = atoi(optarg);\n            break;\n        case 'B':\n            protocol_specified = true;\n            if (strcmp(optarg, \"auto\") == 0) {\n                settings.binding_protocol = negotiating_prot;\n            } else if (strcmp(optarg, \"binary\") == 0) {\n                settings.binding_protocol = binary_prot;\n            } else if (strcmp(optarg, \"ascii\") == 0) {\n                settings.binding_protocol = ascii_prot;\n            } else {\n                fprintf(stderr, \"Invalid value for binding protocol: %s\\n\"\n                        \" -- should be one of auto, binary, or ascii\\n\", optarg);\n                exit(EX_USAGE);\n            }\n            break;\n        case 'I':\n            buf = strdup(optarg);\n            unit = buf[strlen(buf)-1];\n            if (unit == 'k' || unit == 'm' ||\n                unit == 'K' || unit == 'M') {\n                buf[strlen(buf)-1] = '\\0';\n                size_max = atoi(buf);\n                if (unit == 'k' || unit == 'K')\n                    size_max *= 1024;\n                if (unit == 'm' || unit == 'M')\n                    size_max *= 1024 * 1024;\n                settings.item_size_max = size_max;\n            } else {\n                settings.item_size_max = atoi(buf);\n            }\n            free(buf);\n            if (settings.item_size_max < 1024) {\n                fprintf(stderr, \"Item max size cannot be less than 1024 bytes.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > (settings.maxbytes / 4)) {\n                fprintf(stderr, \"Cannot set item size limit higher than 1/4 of memory max.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > (1024 * 1024 * 1024)) {\n                fprintf(stderr, \"Cannot set item size limit higher than a gigabyte.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024) {\n                if (!slab_chunk_size_changed) {\n                    // Ideal new default is 16k, but needs stitching.\n                    settings.slab_chunk_size_max = 524288;\n                }\n            }\n            break;\n        case 'S': /* set Sasl authentication to true. Default is false */\n#ifndef ENABLE_SASL\n            fprintf(stderr, \"This server is not built with SASL support.\\n\");\n            exit(EX_USAGE);\n#endif\n            settings.sasl = true;\n            break;\n       case 'F' :\n            settings.flush_enabled = false;\n            break;\n       case 'X' :\n            settings.dump_enabled = false;\n            break;\n        case 'o': /* It's sub-opts time! */\n            subopts_orig = subopts = strdup(optarg); /* getsubopt() changes the original args */\n\n            while (*subopts != '\\0') {\n\n            switch (getsubopt(&subopts, subopts_tokens, &subopts_value)) {\n            case MAXCONNS_FAST:\n                settings.maxconns_fast = true;\n                break;\n            case HASHPOWER_INIT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing numeric argument for hashpower\\n\");\n                    return 1;\n                }\n                settings.hashpower_init = atoi(subopts_value);\n                if (settings.hashpower_init < 12) {\n                    fprintf(stderr, \"Initial hashtable multiplier of %d is too low\\n\",\n                        settings.hashpower_init);\n                    return 1;\n                } else if (settings.hashpower_init > 64) {\n                    fprintf(stderr, \"Initial hashtable multiplier of %d is too high\\n\"\n                        \"Choose a value based on \\\"STAT hash_power_level\\\" from a running instance\\n\",\n                        settings.hashpower_init);\n                    return 1;\n                }\n                break;\n            case SLAB_REASSIGN:\n                settings.slab_reassign = true;\n                break;\n            case SLAB_AUTOMOVE:\n                if (subopts_value == NULL) {\n                    settings.slab_automove = 1;\n                    break;\n                }\n                settings.slab_automove = atoi(subopts_value);\n                if (settings.slab_automove < 0 || settings.slab_automove > 2) {\n                    fprintf(stderr, \"slab_automove must be between 0 and 2\\n\");\n                    return 1;\n                }\n                break;\n            case TAIL_REPAIR_TIME:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing numeric argument for tail_repair_time\\n\");\n                    return 1;\n                }\n                settings.tail_repair_time = atoi(subopts_value);\n                if (settings.tail_repair_time < 10) {\n                    fprintf(stderr, \"Cannot set tail_repair_time to less than 10 seconds\\n\");\n                    return 1;\n                }\n                break;\n            case HASH_ALGORITHM:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hash_algorithm argument\\n\");\n                    return 1;\n                };\n                if (strcmp(subopts_value, \"jenkins\") == 0) {\n                    hash_type = JENKINS_HASH;\n                } else if (strcmp(subopts_value, \"murmur3\") == 0) {\n                    hash_type = MURMUR3_HASH;\n                } else {\n                    fprintf(stderr, \"Unknown hash_algorithm option (jenkins, murmur3)\\n\");\n                    return 1;\n                }\n                break;\n            case LRU_CRAWLER:\n                start_lru_crawler = true;\n                break;\n            case LRU_CRAWLER_SLEEP:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing lru_crawler_sleep value\\n\");\n                    return 1;\n                }\n                settings.lru_crawler_sleep = atoi(subopts_value);\n                if (settings.lru_crawler_sleep > 1000000 || settings.lru_crawler_sleep < 0) {\n                    fprintf(stderr, \"LRU crawler sleep must be between 0 and 1 second\\n\");\n                    return 1;\n                }\n                break;\n            case LRU_CRAWLER_TOCRAWL:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing lru_crawler_tocrawl value\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &tocrawl)) {\n                    fprintf(stderr, \"lru_crawler_tocrawl takes a numeric 32bit value\\n\");\n                    return 1;\n                }\n                settings.lru_crawler_tocrawl = tocrawl;\n                break;\n            case LRU_MAINTAINER:\n                start_lru_maintainer = true;\n                settings.lru_segmented = true;\n                break;\n            case HOT_LRU_PCT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hot_lru_pct argument\\n\");\n                    return 1;\n                }\n                settings.hot_lru_pct = atoi(subopts_value);\n                if (settings.hot_lru_pct < 1 || settings.hot_lru_pct >= 80) {\n                    fprintf(stderr, \"hot_lru_pct must be > 1 and < 80\\n\");\n                    return 1;\n                }\n                break;\n            case WARM_LRU_PCT:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing warm_lru_pct argument\\n\");\n                    return 1;\n                }\n                settings.warm_lru_pct = atoi(subopts_value);\n                if (settings.warm_lru_pct < 1 || settings.warm_lru_pct >= 80) {\n                    fprintf(stderr, \"warm_lru_pct must be > 1 and < 80\\n\");\n                    return 1;\n                }\n                break;\n            case HOT_MAX_AGE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing hot_max_age argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.hot_max_age)) {\n                    fprintf(stderr, \"invalid argument to hot_max_age\\n\");\n                    return 1;\n                }\n                break;\n            case WARM_MAX_FACTOR:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing warm_max_factor argument\\n\");\n                    return 1;\n                }\n                settings.warm_max_factor = atof(subopts_value);\n                if (settings.warm_max_factor <= 0) {\n                    fprintf(stderr, \"warm_max_factor must be > 0\\n\");\n                    return 1;\n                }\n                break;\n            case TEMPORARY_TTL:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing temporary_ttl argument\\n\");\n                    return 1;\n                }\n                settings.temp_lru = true;\n                settings.temporary_ttl = atoi(subopts_value);\n                break;\n            case IDLE_TIMEOUT:\n                settings.idle_timeout = atoi(subopts_value);\n                break;\n            case WATCHER_LOGBUF_SIZE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing watcher_logbuf_size argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.logger_watcher_buf_size)) {\n                    fprintf(stderr, \"could not parse argument to watcher_logbuf_size\\n\");\n                    return 1;\n                }\n                settings.logger_watcher_buf_size *= 1024; /* kilobytes */\n                break;\n            case WORKER_LOGBUF_SIZE:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing worker_logbuf_size argument\\n\");\n                    return 1;\n                }\n                if (!safe_strtoul(subopts_value, &settings.logger_buf_size)) {\n                    fprintf(stderr, \"could not parse argument to worker_logbuf_size\\n\");\n                    return 1;\n                }\n                settings.logger_buf_size *= 1024; /* kilobytes */\n            case SLAB_SIZES:\n                slab_sizes_unparsed = subopts_value;\n                break;\n            case SLAB_CHUNK_MAX:\n                if (subopts_value == NULL) {\n                    fprintf(stderr, \"Missing slab_chunk_max argument\\n\");\n                }\n                if (!safe_strtol(subopts_value, &settings.slab_chunk_size_max)) {\n                    fprintf(stderr, \"could not parse argument to slab_chunk_max\\n\");\n                }\n                slab_chunk_size_changed = true;\n                break;\n            case TRACK_SIZES:\n                item_stats_sizes_init();\n                break;\n            case NO_INLINE_ASCII_RESP:\n                settings.inline_ascii_response = false;\n                break;\n            case MODERN:\n                /* Modernized defaults. Need to add equivalent no_* flags\n                 * before making truly default. */\n                // chunk default should come after stitching is fixed.\n                //settings.slab_chunk_size_max = 16384;\n\n                // With slab_ressign, pages are always 1MB, so anything larger\n                // than .5m ends up using 1m anyway. With this we at least\n                // avoid having several slab classes that use 1m.\n                if (!slab_chunk_size_changed) {\n                    settings.slab_chunk_size_max = 524288;\n                }\n                settings.slab_reassign = true;\n                settings.slab_automove = 1;\n                settings.maxconns_fast = true;\n                settings.inline_ascii_response = false;\n                settings.lru_segmented = true;\n                hash_type = MURMUR3_HASH;\n                start_lru_crawler = true;\n                start_lru_maintainer = true;\n                break;\n            default:\n                printf(\"Illegal suboption \\\"%s\\\"\\n\", subopts_value);\n                return 1;\n            }\n\n            }\n            free(subopts_orig);\n            break;\n        default:\n            fprintf(stderr, \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    if (settings.slab_chunk_size_max > settings.item_size_max) {\n        fprintf(stderr, \"slab_chunk_max (bytes: %d) cannot be larger than -I (item_size_max %d)\\n\",\n                settings.slab_chunk_size_max, settings.item_size_max);\n        exit(EX_USAGE);\n    }\n\n    if (settings.item_size_max % settings.slab_chunk_size_max != 0) {\n        fprintf(stderr, \"-I (item_size_max: %d) must be evenly divisible by slab_chunk_max (bytes: %d)\\n\",\n                settings.item_size_max, settings.slab_chunk_size_max);\n        exit(EX_USAGE);\n    }\n\n    if (settings.slab_page_size % settings.slab_chunk_size_max != 0) {\n        fprintf(stderr, \"slab_chunk_max (bytes: %d) must divide evenly into %d (slab_page_size)\\n\",\n                settings.slab_chunk_size_max, settings.slab_page_size);\n        exit(EX_USAGE);\n    }\n\n    // Reserve this for the new default. If factor size hasn't changed, use\n    // new default.\n    /*if (settings.slab_chunk_size_max == 16384 && settings.factor == 1.25) {\n        settings.factor = 1.08;\n    }*/\n\n    if (slab_sizes_unparsed != NULL) {\n        if (_parse_slab_sizes(slab_sizes_unparsed, slab_sizes)) {\n            use_slab_sizes = true;\n        } else {\n            exit(EX_USAGE);\n        }\n    }\n\n    if (settings.hot_lru_pct + settings.warm_lru_pct > 80) {\n        fprintf(stderr, \"hot_lru_pct + warm_lru_pct cannot be more than 80%% combined\\n\");\n        exit(EX_USAGE);\n    }\n\n    if (settings.temp_lru && !start_lru_maintainer) {\n        fprintf(stderr, \"temporary_ttl requires lru_maintainer to be enabled\\n\");\n        exit(EX_USAGE);\n    }\n\n    if (hash_init(hash_type) != 0) {\n        fprintf(stderr, \"Failed to initialize hash_algorithm!\\n\");\n        exit(EX_USAGE);\n    }\n\n    /*\n     * Use one workerthread to serve each UDP port if the user specified\n     * multiple ports\n     */\n    if (settings.inter != NULL && strchr(settings.inter, ',')) {\n        settings.num_threads_per_udp = 1;\n    } else {\n        settings.num_threads_per_udp = settings.num_threads;\n    }\n\n    if (settings.sasl) {\n        if (!protocol_specified) {\n            settings.binding_protocol = binary_prot;\n        } else {\n            if (settings.binding_protocol != binary_prot) {\n                fprintf(stderr, \"ERROR: You cannot allow the ASCII protocol while using SASL.\\n\");\n                exit(EX_USAGE);\n            }\n        }\n    }\n\n    if (tcp_specified && !udp_specified) {\n        settings.udpport = settings.port;\n    } else if (udp_specified && !tcp_specified) {\n        settings.port = settings.udpport;\n    }\n\n    if (maxcore != 0) {\n        struct rlimit rlim_new;\n        /*\n         * First try raising to infinity; if that fails, try bringing\n         * the soft limit to the hard.\n         */\n        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {\n            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {\n                /* failed. try raising just to the old max */\n                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;\n                (void)setrlimit(RLIMIT_CORE, &rlim_new);\n            }\n        }\n        /*\n         * getrlimit again to see what we ended up with. Only fail if\n         * the soft limit ends up 0, because then no core files will be\n         * created at all.\n         */\n\n        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {\n            fprintf(stderr, \"failed to ensure corefile creation\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /*\n     * If needed, increase rlimits to allow as many connections\n     * as needed.\n     */\n\n    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n        fprintf(stderr, \"failed to getrlimit number of files\\n\");\n        exit(EX_OSERR);\n    } else {\n        rlim.rlim_cur = settings.maxconns;\n        rlim.rlim_max = settings.maxconns;\n        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n            fprintf(stderr, \"failed to set rlimit for open files. Try starting as root or requesting smaller maxconns value.\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /* lose root privileges if we have them */\n    if (getuid() == 0 || geteuid() == 0) {\n        if (username == 0 || *username == '\\0') {\n            fprintf(stderr, \"can't run as root without the -u switch\\n\");\n            exit(EX_USAGE);\n        }\n        if ((pw = getpwnam(username)) == 0) {\n            fprintf(stderr, \"can't find the user %s to switch to\\n\", username);\n            exit(EX_NOUSER);\n        }\n        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {\n            fprintf(stderr, \"failed to assume identity of user %s\\n\", username);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* Initialize Sasl if -S was specified */\n    if (settings.sasl) {\n        init_sasl();\n    }\n\n    /* daemonize if requested */\n    /* if we want to ensure our ability to dump core, don't chdir to / */\n    if (do_daemonize) {\n        if (sigignore(SIGHUP) == -1) {\n            perror(\"Failed to ignore SIGHUP\");\n        }\n        if (daemonize(maxcore, settings.verbose) == -1) {\n            fprintf(stderr, \"failed to daemon() in order to daemonize\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    /* lock paged memory if needed */\n    if (lock_memory) {\n#ifdef HAVE_MLOCKALL\n        int res = mlockall(MCL_CURRENT | MCL_FUTURE);\n        if (res != 0) {\n            fprintf(stderr, \"warning: -k invalid, mlockall() failed: %s\\n\",\n                    strerror(errno));\n        }\n#else\n        fprintf(stderr, \"warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\\n\");\n#endif\n    }\n\n    /* initialize main thread libevent instance */\n    main_base = event_init();\n\n    /* initialize other stuff */\n    logger_init();\n    stats_init();\n    assoc_init(settings.hashpower_init);\n    conn_init();\n    slabs_init(settings.maxbytes, settings.factor, preallocate,\n            use_slab_sizes ? slab_sizes : NULL);\n\n    /*\n     * ignore SIGPIPE signals; we can use errno == EPIPE if we\n     * need that information\n     */\n    if (sigignore(SIGPIPE) == -1) {\n        perror(\"failed to ignore SIGPIPE; sigaction\");\n        exit(EX_OSERR);\n    }\n    /* start up worker threads if MT mode */\n    memcached_thread_init(settings.num_threads);\n\n    if (start_assoc_maintenance_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    if (start_lru_crawler && start_item_crawler_thread() != 0) {\n        fprintf(stderr, \"Failed to enable LRU crawler thread\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (start_lru_maintainer && start_lru_maintainer_thread() != 0) {\n        fprintf(stderr, \"Failed to enable LRU maintainer thread\\n\");\n        return 1;\n    }\n\n    if (settings.slab_reassign &&\n        start_slab_maintenance_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    if (settings.idle_timeout && start_conn_timeout_thread() == -1) {\n        exit(EXIT_FAILURE);\n    }\n\n    /* initialise clock event */\n    clock_handler(0, 0, 0);\n\n    /* create unix mode sockets after dropping privileges */\n    if (settings.socketpath != NULL) {\n        errno = 0;\n        if (server_socket_unix(settings.socketpath,settings.access)) {\n            vperror(\"failed to listen on UNIX socket: %s\", settings.socketpath);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* create the listening socket, bind it, and init */\n    if (settings.socketpath == NULL) {\n        const char *portnumber_filename = getenv(\"MEMCACHED_PORT_FILENAME\");\n        char *temp_portnumber_filename = NULL;\n        size_t len;\n        FILE *portnumber_file = NULL;\n\n        if (portnumber_filename != NULL) {\n            len = strlen(portnumber_filename)+4+1;\n            temp_portnumber_filename = malloc(len);\n            snprintf(temp_portnumber_filename,\n                     len,\n                     \"%s.lck\", portnumber_filename);\n\n            portnumber_file = fopen(temp_portnumber_filename, \"a\");\n            if (portnumber_file == NULL) {\n                fprintf(stderr, \"Failed to open \\\"%s\\\": %s\\n\",\n                        temp_portnumber_filename, strerror(errno));\n            }\n        }\n\n        errno = 0;\n        if (settings.port && server_sockets(settings.port, tcp_transport,\n                                           portnumber_file)) {\n            vperror(\"failed to listen on TCP port %d\", settings.port);\n            exit(EX_OSERR);\n        }\n\n        /*\n         * initialization order: first create the listening sockets\n         * (may need root on low ports), then drop root if needed,\n         * then daemonise if needed, then init libevent (in some cases\n         * descriptors created by libevent wouldn't survive forking).\n         */\n\n        /* create the UDP listening socket and bind it */\n        errno = 0;\n        if (settings.udpport && server_sockets(settings.udpport, udp_transport,\n                                              portnumber_file)) {\n            vperror(\"failed to listen on UDP port %d\", settings.udpport);\n            exit(EX_OSERR);\n        }\n\n        if (portnumber_file) {\n            fclose(portnumber_file);\n            rename(temp_portnumber_filename, portnumber_filename);\n            free(temp_portnumber_filename);\n        }\n    }\n\n    /* Give the sockets a moment to open. I know this is dumb, but the error\n     * is only an advisory.\n     */\n    usleep(1000);\n    if (stats_state.curr_conns + stats_state.reserved_fds >= settings.maxconns - 1) {\n        fprintf(stderr, \"Maxconns setting is too low, use -c to increase.\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if (pid_file != NULL) {\n        save_pid(pid_file);\n    }\n\n    /* Drop privileges no longer needed */\n    drop_privileges();\n\n    /* Initialize the uriencode lookup table. */\n    uriencode_init();\n\n    /* enter the event loop */\n    if (event_base_loop(main_base, 0) != 0) {\n        retval = EXIT_FAILURE;\n    }\n\n    stop_assoc_maintenance_thread();\n\n    /* remove the PID file if we're a daemon */\n    if (do_daemonize)\n        remove_pidfile(pid_file);\n    /* Clean up strdup() call for bind() address */\n    if (settings.inter)\n      free(settings.inter);\n    if (l_socket)\n      free(l_socket);\n    if (u_socket)\n      free(u_socket);\n\n    return retval;\n}\n"], "filenames": ["memcached.c"], "buggy_code_start_loc": [3251], "buggy_code_end_loc": [3277], "fixing_code_start_loc": [3252], "fixing_code_end_loc": [3287], "type": "CWE-190", "message": "memcached version prior to 1.4.37 contains an Integer Overflow vulnerability in items.c:item_free() that can result in data corruption and deadlocks due to items existing in hash table being reused from free list. This attack appear to be exploitable via network connectivity to the memcached service. This vulnerability appears to have been fixed in 1.4.37 and later.", "other": {"cve": {"id": "CVE-2018-1000127", "sourceIdentifier": "cve@mitre.org", "published": "2018-03-13T21:29:00.477", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "memcached version prior to 1.4.37 contains an Integer Overflow vulnerability in items.c:item_free() that can result in data corruption and deadlocks due to items existing in hash table being reused from free list. This attack appear to be exploitable via network connectivity to the memcached service. This vulnerability appears to have been fixed in 1.4.37 and later."}, {"lang": "es", "value": "memcached, en versiones anteriores a la 1.4.37, contiene una vulnerabilidad de desbordamiento de enteros en items.c:item_free() que puede resultar en la corrupci\u00f3n de datos y en deadlocks debido a que los \u00edtems en la tabla de hash se reusan de la lista libre. Este ataque parece ser explotable mediante conectividad de red en el servicio memcached. La vulnerabilidad parece haber sido solucionada en las versiones 1.4.37 y siguientes."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-190"}, {"lang": "en", "value": "CWE-667"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:memcached:memcached:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.4.37", "matchCriteriaId": "E4A5BA96-D9BA-4630-86D7-2B4B44207510"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "16F59A04-14CF-49E2-9973-645477EA09DA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:14.04:*:*:*:lts:*:*:*", "matchCriteriaId": "B5A6F2F3-4894-4392-8296-3B8DD2679084"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:lts:*:*:*", "matchCriteriaId": "F7016A2A-8365-4F1A-89A2-7A19F2BCAE5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:17.10:*:*:*:*:*:*:*", "matchCriteriaId": "9070C9D8-A14A-467F-8253-33B966C16886"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openstack:10:*:*:*:*:*:*:*", "matchCriteriaId": "E722FEF7-58A6-47AD-B1D0-DB0B71B0C7AA"}]}]}], "references": [{"url": "https://access.redhat.com/errata/RHSA-2018:2290", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/memcached/memcached/commit/a8c4a82787b8b6c256d61bd5c42fb7f92d1bae00", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/memcached/memcached/issues/271", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/memcached/memcached/wiki/ReleaseNotes1437", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2018/03/msg00031.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/3601-1/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4218", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/memcached/memcached/commit/a8c4a82787b8b6c256d61bd5c42fb7f92d1bae00"}}