{"buggy_code": ["<?php\n\n\nclass D2filesController extends Controller\n{\n    #public $layout='//layouts/column2';\n\n    public $defaultAction = \"admin\";\n    public $scenario = \"crud\";\n    public $scope = \"crud\";\n\n\n    public function filters()\n    {\n        return array(\n            'accessControl',\n        );\n    }\n\n    public function accessRules() {\n        return array(\n            array('deny', // deny guests\n                'users'=>array('?'),\n            ),\n            array(\n                'allow', // allow main screen only to Administrator\n                'actions' => array('create', 'admin', 'view', 'update', 'editableSaver', 'delete'),\n                'roles' => array('Administrator'),\n            ),\n            array(\n                'allow', // allow actions controled by related model to registred users\n                'actions' => array('upload', 'deleteFile', 'downloadFile', 'editableSaver'),\n                'users'=>array('*'),\n            ),\n            array('deny',\n                'users'=>array('*'),\n            ),\n        );\n    }\n    \n    public function beforeAction($action)\n    {\n        parent::beforeAction($action);\n        if ($this->module !== null) {\n            $this->breadcrumbs[$this->module->Id] = array('/' . $this->module->Id);\n        }\n        return true;\n    }\n\n    public function actionView($id, $ajax = false)\n    {\n        $model = $this->loadModel($id);\n        $this->render('view', array('model' => $model,));\n    }\n\n    public function actionCreate()\n    {\n        $model = new D2files;\n        $model->scenario = $this->scenario;\n\n        $this->performAjaxValidation($model, 'd2files-form');\n\n        if (isset($_POST['D2files'])) {\n            $model->attributes = $_POST['D2files'];\n\n            try {\n                if ($model->save()) {\n                    if (isset($_GET['returnUrl'])) {\n                        $this->redirect($_GET['returnUrl']);\n                    } else {\n                        $this->redirect(array('view', 'id' => $model->id));\n                    }\n                }\n            } catch (Exception $e) {\n                $model->addError('id', $e->getMessage());\n            }\n        } elseif (isset($_GET['D2files'])) {\n            $model->attributes = $_GET['D2files'];\n        }\n\n        $this->render('create', array('model' => $model));\n    }\n\n    public function actionUpdate($id)\n    {\n        $model = $this->loadModel($id);\n        $model->scenario = $this->scenario;\n\n        $this->performAjaxValidation($model, 'd2files-form');\n\n        if (isset($_POST['D2files'])) {\n            $model->attributes = $_POST['D2files'];\n\n\n            try {\n                if ($model->save()) {\n                    if (isset($_GET['returnUrl'])) {\n                        $this->redirect($_GET['returnUrl']);\n                    } else {\n                        $this->redirect(array('view', 'id' => $model->id));\n                    }\n                }\n            } catch (Exception $e) {\n                $model->addError('id', $e->getMessage());\n            }\n        }\n        \n        $this->render('update', array('model' => $model));\n    }\n    \n    public function actionUpload($model_name, $model_id) {\n        \n        // validate download action access\n        //if (!Yii::app()->user->checkAccess($model_name . '.uploadD2File')) {\n        D2files::extendedCheckAccess($model_name . '.uploadD2File');\n        \n        if (!$this->performReadValidation($model_name, $model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n\n        Yii::import(\"vendor.dbrisinajumi.d2files.compnents.*\");\n        $oUploadHandler = new UploadHandlerD2files(\n                        array(\n                            'model_name' => $model_name,\n                            'model_id' => $model_id,\n                        )\n        );\n        \n        return true;\n\n    }\n    \n    public function actionDeleteFile($id) {\n        \n        $m = D2files::model();\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n        \n        // validate delete action access\n        //if (!Yii::app()->user->checkAccess($model->model . '.deleteD2File')) {\n        D2files::extendedCheckAccess($model->model . '.deleteD2File');\n        \n        $model->deleted = 1;\n        $model->save();\n        \n    }\n\n    public function actionDownloadFile($id) {\n        \n        $criteria = new CDbCriteria;\n        $criteria->compare('t.deleted', 0);\n        $m = D2files::model();\n        $model = $m->findByPk($id, $criteria);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n\n        // validate download action access\n        //if (!Yii::app()->user->checkAccess($model->model . '.downloadD2File')) {\n        D2files::extendedCheckAccess($model->model . '.downloadD2File');\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n\n        Yii::import( \"vendor.dbrisinajumi.d2files.compnents.*\");\n        $oUploadHandler = new UploadHandlerD2files(\n                        array(\n                            'model_name' => $model->model,\n                            'model_id' => $id,\n                            'download_via_php' => TRUE,\n                            'file_name' => $model->file_name,\n                        )\n        );  \n    }\n    \n    public function actionEditableSaver()\n    {\n        $id = Yii::app()->request->getPost('pk');\n        if(empty($id)){\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        $m = D2files::model();\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n        \n        // validate upload (editable) action access\n        D2files::extendedCheckAccess($model->model . '.uploadD2File');        \n        \n        $es = new EditableSaver('D2files'); // classname of model to be updated\n        $es->update();\n    }\n\n    public function actionAjaxCreate($field, $value) \n    {\n        $model = new D2files;\n        $model->$field = $value;\n        try {\n            if ($model->save()) {\n                return TRUE;\n            }else{\n                return var_export($model->getErrors());\n            }            \n        } catch (Exception $e) {\n            throw new CHttpException(500, $e->getMessage());\n        }\n    }\n    \n    public function actionDelete($id)\n    {\n        if (Yii::app()->request->isPostRequest) {\n            try {\n                $this->loadModel($id)->delete();\n            } catch (Exception $e) {\n                throw new CHttpException(500, $e->getMessage());\n            }\n\n            if (!isset($_GET['ajax'])) {\n                if (isset($_GET['returnUrl'])) {\n                    $this->redirect($_GET['returnUrl']);\n                } else {\n                    $this->redirect(array('admin'));\n                }\n            }\n        } else {\n            throw new CHttpException(400, Yii::t('D2filesModule.crud_static', 'Invalid request. Please do not repeat this request again.'));\n        }\n    }\n\n    public function actionAdmin()\n    {\n        $model = new D2files('search');\n        $scopes = $model->scopes();\n        if (isset($scopes[$this->scope])) {\n            $model->{$this->scope}();\n        }\n        $model->unsetAttributes();\n\n        if (isset($_GET['D2files'])) {\n            $model->attributes = $_GET['D2files'];\n        }\n\n        $this->render('admin', array('model' => $model));\n    }\n\n    public function loadModel($id)\n    {\n        $m = D2files::model();\n        // apply scope, if available\n        $scopes = $m->scopes();\n        if (isset($scopes[$this->scope])) {\n            $m->{$this->scope}();\n        }\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t('D2filesModule.crud_static', 'The requested page does not exist.'));\n        }\n        return $model;\n    }\n\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'd2files-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n    \n    protected function performReadValidation($model_name, $model_id)\n    {\n        list($module_name, $model_name) = explode('.', $model_name);\n        $m = $model_name::model();\n        $modelMain = $m->findByPk($model_id);\n        if ($modelMain === null) {\n            return false;\n        }\n        return true;\n    }\n\n}\n"], "fixing_code": ["<?php\n\n\nclass D2filesController extends Controller\n{\n    #public $layout='//layouts/column2';\n\n    public $defaultAction = \"admin\";\n    public $scenario = \"crud\";\n    public $scope = \"crud\";\n\n\n    public function filters()\n    {\n        return array(\n            'accessControl',\n        );\n    }\n\n    public function accessRules() {\n        return array(\n            array('deny', // deny guests\n                'users'=>array('?'),\n            ),\n            array(\n                'allow', // allow main screen only to Administrator\n                'actions' => array('create', 'admin', 'view', 'update', 'editableSaver', 'delete'),\n                'roles' => array('Administrator'),\n            ),\n            array(\n                'allow', // allow actions controled by related model to registred users\n                'actions' => array('upload', 'deleteFile', 'downloadFile', 'editableSaver'),\n                'users'=>array('*'),\n            ),\n            array('deny',\n                'users'=>array('*'),\n            ),\n        );\n    }\n    \n    public function beforeAction($action)\n    {\n        parent::beforeAction($action);\n        if ($this->module !== null) {\n            $this->breadcrumbs[$this->module->Id] = array('/' . $this->module->Id);\n        }\n        return true;\n    }\n\n    public function actionView($id, $ajax = false)\n    {\n        $model = $this->loadModel($id);\n        $this->render('view', array('model' => $model,));\n    }\n\n    public function actionCreate()\n    {\n        $model = new D2files;\n        $model->scenario = $this->scenario;\n\n        $this->performAjaxValidation($model, 'd2files-form');\n\n        if (isset($_POST['D2files'])) {\n            $model->attributes = $_POST['D2files'];\n\n            try {\n                if ($model->save()) {\n                    if (isset($_GET['returnUrl'])) {\n                        $this->redirect($_GET['returnUrl']);\n                    } else {\n                        $this->redirect(array('view', 'id' => $model->id));\n                    }\n                }\n            } catch (Exception $e) {\n                $model->addError('id', $e->getMessage());\n            }\n        } elseif (isset($_GET['D2files'])) {\n            $model->attributes = $_GET['D2files'];\n        }\n\n        $this->render('create', array('model' => $model));\n    }\n\n    public function actionUpdate($id)\n    {\n        $model = $this->loadModel($id);\n        $model->scenario = $this->scenario;\n\n        $this->performAjaxValidation($model, 'd2files-form');\n\n        if (isset($_POST['D2files'])) {\n            $model->attributes = $_POST['D2files'];\n\n\n            try {\n                if ($model->save()) {\n                    if (isset($_GET['returnUrl'])) {\n                        $this->redirect($_GET['returnUrl']);\n                    } else {\n                        $this->redirect(array('view', 'id' => $model->id));\n                    }\n                }\n            } catch (Exception $e) {\n                $model->addError('id', $e->getMessage());\n            }\n        }\n        \n        $this->render('update', array('model' => $model));\n    }\n    \n    public function actionUpload($model_name, $model_id) {\n        \n        // validate download action access\n        //if (!Yii::app()->user->checkAccess($model_name . '.uploadD2File')) {\n        D2files::extendedCheckAccess($model_name . '.uploadD2File');\n        \n        if (!$this->performReadValidation($model_name, (int)$model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n\n        Yii::import(\"vendor.dbrisinajumi.d2files.compnents.*\");\n        $oUploadHandler = new UploadHandlerD2files(\n                        array(\n                            'model_name' => $model_name,\n                            'model_id' => (int)$model_id,\n                        )\n        );\n        \n        return true;\n\n    }\n    \n    public function actionDeleteFile($id) {\n        \n        $m = D2files::model();\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n        \n        // validate delete action access\n        //if (!Yii::app()->user->checkAccess($model->model . '.deleteD2File')) {\n        D2files::extendedCheckAccess($model->model . '.deleteD2File');\n        \n        $model->deleted = 1;\n        $model->save();\n        \n    }\n\n    public function actionDownloadFile($id) {\n        \n        $criteria = new CDbCriteria;\n        $criteria->compare('t.deleted', 0);\n        $m = D2files::model();\n        $model = $m->findByPk($id, $criteria);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n\n        // validate download action access\n        //if (!Yii::app()->user->checkAccess($model->model . '.downloadD2File')) {\n        D2files::extendedCheckAccess($model->model . '.downloadD2File');\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n\n        Yii::import( \"vendor.dbrisinajumi.d2files.compnents.*\");\n        $oUploadHandler = new UploadHandlerD2files(\n                        array(\n                            'model_name' => $model->model,\n                            'model_id' => (int)$id,\n                            'download_via_php' => TRUE,\n                            'file_name' => $model->file_name,\n                        )\n        );  \n    }\n    \n    public function actionEditableSaver()\n    {\n        $id = Yii::app()->request->getPost('pk');\n        if(empty($id)){\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        $m = D2files::model();\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t(\"D2filesModule.model\",\"The requested record does not exist.\"));\n        }\n        \n        // validate read access\n        if (!$this->performReadValidation($model->model, $model->model_id)) {\n            throw new CHttpException(403, Yii::t(\"D2filesModule.model\",\"You are not authorized to perform this action.\"));\n        }\n        \n        // validate upload (editable) action access\n        D2files::extendedCheckAccess($model->model . '.uploadD2File');        \n        \n        $es = new EditableSaver('D2files'); // classname of model to be updated\n        $es->update();\n    }\n\n    public function actionAjaxCreate($field, $value) \n    {\n        $model = new D2files;\n        $model->$field = $value;\n        try {\n            if ($model->save()) {\n                return TRUE;\n            }else{\n                return var_export($model->getErrors());\n            }            \n        } catch (Exception $e) {\n            throw new CHttpException(500, $e->getMessage());\n        }\n    }\n    \n    public function actionDelete($id)\n    {\n        if (Yii::app()->request->isPostRequest) {\n            try {\n                $this->loadModel($id)->delete();\n            } catch (Exception $e) {\n                throw new CHttpException(500, $e->getMessage());\n            }\n\n            if (!isset($_GET['ajax'])) {\n                if (isset($_GET['returnUrl'])) {\n                    $this->redirect($_GET['returnUrl']);\n                } else {\n                    $this->redirect(array('admin'));\n                }\n            }\n        } else {\n            throw new CHttpException(400, Yii::t('D2filesModule.crud_static', 'Invalid request. Please do not repeat this request again.'));\n        }\n    }\n\n    public function actionAdmin()\n    {\n        $model = new D2files('search');\n        $scopes = $model->scopes();\n        if (isset($scopes[$this->scope])) {\n            $model->{$this->scope}();\n        }\n        $model->unsetAttributes();\n\n        if (isset($_GET['D2files'])) {\n            $model->attributes = $_GET['D2files'];\n        }\n\n        $this->render('admin', array('model' => $model));\n    }\n\n    public function loadModel($id)\n    {\n        $m = D2files::model();\n        // apply scope, if available\n        $scopes = $m->scopes();\n        if (isset($scopes[$this->scope])) {\n            $m->{$this->scope}();\n        }\n        $model = $m->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, Yii::t('D2filesModule.crud_static', 'The requested page does not exist.'));\n        }\n        return $model;\n    }\n\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'd2files-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n    \n    protected function performReadValidation($model_name, $model_id)\n    {\n        list($module_name, $model_name) = explode('.', $model_name);\n        $m = $model_name::model();\n        $modelMain = $m->findByPk($model_id);\n        if ($modelMain === null) {\n            return false;\n        }\n        return true;\n    }\n\n}\n"], "filenames": ["controllers/D2filesController.php"], "buggy_code_start_loc": [117], "buggy_code_end_loc": [179], "fixing_code_start_loc": [117], "fixing_code_end_loc": [179], "type": "CWE-89", "message": "A vulnerability has been found in DBRisinajumi d2files and classified as critical. Affected by this vulnerability is the function actionUpload/actionDownloadFile of the file controllers/D2filesController.php. The manipulation leads to sql injection. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is b5767f2ec9d0f3cbfda7f13c84740e2179c90574. It is recommended to upgrade the affected component. The identifier VDB-217561 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2015-10018", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-06T13:15:09.823", "lastModified": "2023-01-12T20:04:09.870", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in DBRisinajumi d2files and classified as critical. Affected by this vulnerability is the function actionUpload/actionDownloadFile of the file controllers/D2filesController.php. The manipulation leads to sql injection. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is b5767f2ec9d0f3cbfda7f13c84740e2179c90574. It is recommended to upgrade the affected component. The identifier VDB-217561 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:weberp:d2files:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "02950149-84CE-4DC1-8C5D-9631D9A1D085"}]}]}], "references": [{"url": "https://github.com/DBRisinajumi/d2files/commit/b5767f2ec9d0f3cbfda7f13c84740e2179c90574", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/DBRisinajumi/d2files/releases/tag/1.0.0", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217561", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217561", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/DBRisinajumi/d2files/commit/b5767f2ec9d0f3cbfda7f13c84740e2179c90574"}}