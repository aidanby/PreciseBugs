{"buggy_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\EventListener;\n\nuse PrestaShop\\PrestaShop\\Core\\Util\\Url\\BackUrlProvider;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\n/**\n * This class allows to redirect to back url.\n */\nfinal class BackUrlRedirectResponseListener\n{\n    /**\n     * @var BackUrlProvider\n     */\n    private $backUrlProvider;\n\n    /**\n     * @param BackUrlProvider $backUrlProvider\n     */\n    public function __construct(\n        BackUrlProvider $backUrlProvider\n    ) {\n        $this->backUrlProvider = $backUrlProvider;\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        $currentRequest = $event->getRequest();\n        $originalResponse = $event->getResponse();\n\n        if (!$originalResponse instanceof RedirectResponse) {\n            return;\n        }\n\n        $backUrl = $this->backUrlProvider->getBackUrl($currentRequest);\n\n        if ($backUrl && !$this->isRequestUrlEqualToResponseUrl($currentRequest, $originalResponse)) {\n            $backUrlResponse = $originalResponse->setTargetUrl(urldecode($backUrl));\n            $event->setResponse($backUrlResponse);\n        }\n    }\n\n    /**\n     * Compares if request url is equal to response url - in such case the back url should not work since the action\n     * is suppose to be kept on the same url . E.g \"save and stay\" button click.\n     *\n     * @param Request $currentRequest\n     * @param RedirectResponse $originalResponse\n     *\n     * @return bool\n     */\n    private function isRequestUrlEqualToResponseUrl(\n        Request $currentRequest,\n        RedirectResponse $originalResponse\n    ) {\n        return $currentRequest->getRequestUri() === $originalResponse->getTargetUrl();\n    }\n}\n", "services:\n    _defaults:\n        public: true\n\n    prestashop.user_locale.listener:\n        class: PrestaShopBundle\\EventListener\\UserLocaleListener\n        arguments:\n            - \"@prestashop.adapter.legacy.context\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 15 }\n\n    prestashop.dispatcher.legacy_hooks.subscriber:\n        class: 'PrestaShopBundle\\EventListener\\ActionDispatcherLegacyHooksSubscriber'\n        arguments: ['@prestashop.core.hook.dispatcher']\n        tags:\n            - { name: kernel.event_subscriber }\n\n    prestashop.tokenized_url_listener:\n        class: PrestaShopBundle\\EventListener\\TokenizedUrlsListener\n        arguments:\n            - \"@security.csrf.token_manager\"\n            - \"@router\"\n            - \"@=service('prestashop.user_provider').getUsername()\"\n            - \"@prestashop.adapter.legacy.context\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }\n\n    prestashop.legacy_url_listener:\n        class: PrestaShopBundle\\EventListener\\LegacyUrlListener\n        arguments:\n        - \"@prestashop.bundle.routing.converter.legacy_url_converter\"\n        tags:\n        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 40 }\n\n    prestashop.multishop_command_listener:\n        class: PrestaShopBundle\\EventListener\\MultishopCommandListener\n        arguments:\n            - \"@prestashop.adapter.shop.context\"\n            - \"@=service('kernel').getRootDir()\"\n        tags:\n            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand }\n\n    prestashop.access_denied.listener:\n        class: PrestaShopBundle\\EventListener\\AccessDeniedListener\n        arguments:\n            - \"@router\"\n            - \"@translator\"\n            - \"@session\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }\n\n    prestashop.demo_mode_enabled.listener:\n        class: PrestaShopBundle\\EventListener\\DemoModeEnabledListener\n        arguments:\n            - \"@router\"\n            - \"@translator\"\n            - \"@session\"\n            - \"@annotation_reader\"\n            - \"@=service('prestashop.adapter.legacy.configuration').getBoolean('_PS_MODE_DEMO_')\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }\n\n    prestashop.module_activated.listener:\n        class: PrestaShopBundle\\EventListener\\ModuleActivatedListener\n        arguments:\n        - \"@router\"\n        - \"@translator\"\n        - \"@session\"\n        - \"@annotation_reader\"\n        - \"@prestashop.core.admin.module.repository\"\n        tags:\n        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }\n\n    prestashop.bundle.event_listener.filter_category_search_criteria:\n        class: PrestaShopBundle\\EventListener\\FilterCategorySearchCriteriaListener\n        arguments:\n            - '@prestashop.adapter.grid.search.factory.search_criteria_with_category_parent_id'\n        tags:\n            - { name: kernel.event_listener, event: prestashop.search_criteria.filter, method: onFilterSearchCriteria }\n\n    prestashop.bundle.event_listener.filter_cms_page_category_search_criteria:\n        class: PrestaShopBundle\\EventListener\\FilterCmsPageCategorySearchCriteriaListener\n        arguments:\n            - '@request_stack'\n        tags:\n            - { name: kernel.event_listener, event: prestashop.search_criteria.filter, method: onFilterSearchCriteria }\n\n    prestashop.bundle.event_listener.back_url_redirect_response_listener:\n        class: PrestaShopBundle\\EventListener\\BackUrlRedirectResponseListener\n        arguments:\n          - '@prestashop.core.uti.back_url_provider'\n        tags:\n          - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n\n    prestashop.bundle.event_listener.module_guard_listener:\n        class: PrestaShopBundle\\EventListener\\ModuleGuardListener\n        arguments:\n          - '@prestashop.core.security.folder_guard.vendor'\n          - '%modules_dir%'\n          - '@logger'\n        tags:\n          - { name: kernel.event_subscriber }\n", "<?php\n/**\n * 2007-2019 PrestaShop SA and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace Tests\\Unit\\PrestaShopBundle\\EventListener;\n\nuse PHPUnit\\Framework\\TestCase;\nuse PrestaShop\\PrestaShop\\Core\\Util\\Url\\BackUrlProvider;\nuse PrestaShopBundle\\EventListener\\BackUrlRedirectResponseListener;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nclass BackUrlRedirectResponseListenerTest extends TestCase\n{\n    /**\n     * @var \\PHPUnit_Framework_MockObject_MockObject|FilterResponseEvent\n     */\n    private $filterResponseEventMock;\n\n    protected function setUp()\n    {\n        parent::setUp();\n\n        $this->filterResponseEventMock = $this\n            ->getMockBuilder(FilterResponseEvent::class)\n            ->disableOriginalConstructor()\n            ->getMock()\n        ;\n    }\n\n    public function testItSetsResponseWithBackUrl()\n    {\n        $expectedUrl = 'http://localhost';\n\n        $backUrlProvider = $this\n            ->getMockBuilder(BackUrlProvider::class)\n            ->getMock()\n        ;\n\n        $backUrlProvider\n            ->method('getBackUrl')\n            ->willReturn($expectedUrl)\n        ;\n\n        $this->filterResponseEventMock\n            ->method('getResponse')\n            ->willReturn(new RedirectResponse('http://localhost.dev'))\n        ;\n\n        $this->filterResponseEventMock\n            ->method('getRequest')\n            ->willReturn(new Request())\n        ;\n\n        $responseListener = new BackUrlRedirectResponseListener($backUrlProvider);\n\n        $responseListener->onKernelResponse($this->filterResponseEventMock);\n\n        $actual = $this->filterResponseEventMock->getResponse();\n        $expected = new RedirectResponse($expectedUrl);\n\n        $this->assertEquals($expected, $actual);\n    }\n\n    public function testWhenRequestAndResponseUrlsAreEqualItDoesNotModifyOriginalResponse()\n    {\n        $requestAndResponseUrl = 'http://localhost';\n\n        $backUrlProvider = $this\n            ->getMockBuilder(BackUrlProvider::class)\n            ->getMock()\n        ;\n\n        $backUrlProvider\n            ->method('getBackUrl')\n            ->willReturn('http://localhost-not-called.dev')\n        ;\n\n        $originalRedirectResponse = new RedirectResponse($requestAndResponseUrl);\n\n        $this->filterResponseEventMock\n            ->method('getResponse')\n            ->willReturn($originalRedirectResponse)\n        ;\n\n        $currentRequest = $this\n            ->getMockBuilder(Request::class)\n            ->getMock();\n\n        $currentRequest\n            ->method('getRequestUri')\n            ->willReturn($requestAndResponseUrl)\n        ;\n\n        $this->filterResponseEventMock\n            ->method('getRequest')\n            ->willReturn($currentRequest)\n        ;\n\n        $responseListener = new BackUrlRedirectResponseListener($backUrlProvider);\n\n        $responseListener->onKernelResponse($this->filterResponseEventMock);\n\n        $actual = $this->filterResponseEventMock->getResponse();\n\n        $this->assertEquals($originalRedirectResponse, $actual);\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * 2007-2019 PrestaShop and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace PrestaShopBundle\\EventListener;\n\nuse Employee;\nuse PrestaShop\\PrestaShop\\Adapter\\LegacyContext;\nuse PrestaShop\\PrestaShop\\Core\\Util\\Url\\BackUrlProvider;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\n/**\n * This class allows to redirect to back url.\n */\nfinal class BackUrlRedirectResponseListener\n{\n    /**\n     * @var BackUrlProvider\n     */\n    private $backUrlProvider;\n\n    /**\n     * @var int\n     */\n    private $employeeId;\n\n    /**\n     * @param BackUrlProvider $backUrlProvider\n     */\n    public function __construct(\n        BackUrlProvider $backUrlProvider,\n        LegacyContext $legacyContext\n   ) {\n        $this->backUrlProvider = $backUrlProvider;\n        $context = $legacyContext->getContext();\n        if (null !== $context && $context->employee instanceof Employee) {\n            $this->employeeId = $context->employee->id;\n        }\n    }\n\n    public function onKernelResponse(FilterResponseEvent $event)\n    {\n        // No need to continue because the employee is not connected\n        if (empty($this->employeeId)) {\n            return;\n        }\n\n        $currentRequest = $event->getRequest();\n        $originalResponse = $event->getResponse();\n\n        if (!$originalResponse instanceof RedirectResponse) {\n            return;\n        }\n\n        $backUrl = $this->backUrlProvider->getBackUrl($currentRequest);\n\n        if ($backUrl && !$this->isRequestUrlEqualToResponseUrl($currentRequest, $originalResponse)) {\n            $backUrlResponse = $originalResponse->setTargetUrl(urldecode($backUrl));\n            $event->setResponse($backUrlResponse);\n        }\n    }\n\n    /**\n     * Compares if request url is equal to response url - in such case the back url should not work since the action\n     * is suppose to be kept on the same url . E.g \"save and stay\" button click.\n     *\n     * @param Request $currentRequest\n     * @param RedirectResponse $originalResponse\n     *\n     * @return bool\n     */\n    private function isRequestUrlEqualToResponseUrl(\n        Request $currentRequest,\n        RedirectResponse $originalResponse\n    ) {\n        return $currentRequest->getRequestUri() === $originalResponse->getTargetUrl();\n    }\n}\n", "services:\n    _defaults:\n        public: true\n\n    prestashop.user_locale.listener:\n        class: PrestaShopBundle\\EventListener\\UserLocaleListener\n        arguments:\n            - \"@prestashop.adapter.legacy.context\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 15 }\n\n    prestashop.dispatcher.legacy_hooks.subscriber:\n        class: 'PrestaShopBundle\\EventListener\\ActionDispatcherLegacyHooksSubscriber'\n        arguments: ['@prestashop.core.hook.dispatcher']\n        tags:\n            - { name: kernel.event_subscriber }\n\n    prestashop.tokenized_url_listener:\n        class: PrestaShopBundle\\EventListener\\TokenizedUrlsListener\n        arguments:\n            - \"@security.csrf.token_manager\"\n            - \"@router\"\n            - \"@=service('prestashop.user_provider').getUsername()\"\n            - \"@prestashop.adapter.legacy.context\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest }\n\n    prestashop.legacy_url_listener:\n        class: PrestaShopBundle\\EventListener\\LegacyUrlListener\n        arguments:\n        - \"@prestashop.bundle.routing.converter.legacy_url_converter\"\n        tags:\n        - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 40 }\n\n    prestashop.multishop_command_listener:\n        class: PrestaShopBundle\\EventListener\\MultishopCommandListener\n        arguments:\n            - \"@prestashop.adapter.shop.context\"\n            - \"@=service('kernel').getRootDir()\"\n        tags:\n            - { name: kernel.event_listener, event: console.command, method: onConsoleCommand }\n\n    prestashop.access_denied.listener:\n        class: PrestaShopBundle\\EventListener\\AccessDeniedListener\n        arguments:\n            - \"@router\"\n            - \"@translator\"\n            - \"@session\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }\n\n    prestashop.demo_mode_enabled.listener:\n        class: PrestaShopBundle\\EventListener\\DemoModeEnabledListener\n        arguments:\n            - \"@router\"\n            - \"@translator\"\n            - \"@session\"\n            - \"@annotation_reader\"\n            - \"@=service('prestashop.adapter.legacy.configuration').getBoolean('_PS_MODE_DEMO_')\"\n        tags:\n            - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }\n\n    prestashop.module_activated.listener:\n        class: PrestaShopBundle\\EventListener\\ModuleActivatedListener\n        arguments:\n        - \"@router\"\n        - \"@translator\"\n        - \"@session\"\n        - \"@annotation_reader\"\n        - \"@prestashop.core.admin.module.repository\"\n        tags:\n        - { name: kernel.event_listener, event: kernel.controller, method: onKernelController }\n\n    prestashop.bundle.event_listener.filter_category_search_criteria:\n        class: PrestaShopBundle\\EventListener\\FilterCategorySearchCriteriaListener\n        arguments:\n            - '@prestashop.adapter.grid.search.factory.search_criteria_with_category_parent_id'\n        tags:\n            - { name: kernel.event_listener, event: prestashop.search_criteria.filter, method: onFilterSearchCriteria }\n\n    prestashop.bundle.event_listener.filter_cms_page_category_search_criteria:\n        class: PrestaShopBundle\\EventListener\\FilterCmsPageCategorySearchCriteriaListener\n        arguments:\n            - '@request_stack'\n        tags:\n            - { name: kernel.event_listener, event: prestashop.search_criteria.filter, method: onFilterSearchCriteria }\n\n    prestashop.bundle.event_listener.back_url_redirect_response_listener:\n        class: PrestaShopBundle\\EventListener\\BackUrlRedirectResponseListener\n        arguments:\n          - '@prestashop.core.uti.back_url_provider'\n          - \"@prestashop.adapter.legacy.context\"\n        tags:\n          - { name: kernel.event_listener, event: kernel.response, method: onKernelResponse }\n\n    prestashop.bundle.event_listener.module_guard_listener:\n        class: PrestaShopBundle\\EventListener\\ModuleGuardListener\n        arguments:\n          - '@prestashop.core.security.folder_guard.vendor'\n          - '%modules_dir%'\n          - '@logger'\n        tags:\n          - { name: kernel.event_subscriber }\n", "<?php\n/**\n * 2007-2019 PrestaShop SA and Contributors\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to http://www.prestashop.com for more information.\n *\n * @author    PrestaShop SA <contact@prestashop.com>\n * @copyright 2007-2019 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n * International Registered Trademark & Property of PrestaShop SA\n */\n\nnamespace Tests\\Unit\\PrestaShopBundle\\EventListener;\n\nuse Employee;\nuse Context;\nuse PHPUnit\\Framework\\TestCase;\nuse PrestaShop\\PrestaShop\\Adapter\\LegacyContext;\nuse PrestaShop\\PrestaShop\\Core\\Util\\Url\\BackUrlProvider;\nuse PrestaShopBundle\\EventListener\\BackUrlRedirectResponseListener;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\Event\\FilterResponseEvent;\n\nclass BackUrlRedirectResponseListenerTest extends TestCase\n{\n    /**\n     * @var \\PHPUnit_Framework_MockObject_MockObject|FilterResponseEvent\n     */\n    private $filterResponseEventMock;\n\n    protected function setUp()\n    {\n        parent::setUp();\n\n        $this->filterResponseEventMock = $this\n            ->getMockBuilder(FilterResponseEvent::class)\n            ->disableOriginalConstructor()\n            ->getMock()\n        ;\n    }\n\n    protected function getLegacyContextMock($isConnected = true)\n    {\n        $legacyContextMock = $this->getMockBuilder(LegacyContext::class)\n            ->setMethods(array(\n                'getContext',\n            ))\n            ->getMock();\n\n        $employeeMock = $this->getMockBuilder(Employee::class)->getMock();\n        $employeeMock->id = $isConnected ? 1 : null;\n\n        $contextMock = $this->getMockBuilder(Context::class)->getMock();\n        $contextMock->employee = $employeeMock;\n\n        $legacyContextMock->expects($this->any())->method('getContext')->willReturn($contextMock);\n\n        return $legacyContextMock;\n    }\n\n    protected function getBackUrlProviderMock($backUrl)\n    {\n        $backUrlProviderMock = $this\n            ->getMockBuilder(BackUrlProvider::class)\n            ->getMock()\n        ;\n\n        $backUrlProviderMock\n            ->method('getBackUrl')\n            ->willReturn($backUrl)\n        ;\n        return $backUrlProviderMock;\n    }\n\n    public function testItSetsResponseWithBackUrl()\n    {\n        $expectedUrl = 'http://localhost';\n\n        $legacyContextMock = $this->getLegacyContextMock();\n        $backUrlProviderMock = $this->getBackUrlProviderMock(\n            $expectedUrl\n        );\n\n        $this->filterResponseEventMock\n            ->method('getResponse')\n            ->willReturn(new RedirectResponse('http://localhost.dev'))\n        ;\n\n        $this->filterResponseEventMock\n            ->method('getRequest')\n            ->willReturn(new Request())\n        ;\n\n        $responseListener = new BackUrlRedirectResponseListener(\n            $backUrlProviderMock,\n            $legacyContextMock\n        );\n\n        $responseListener->onKernelResponse($this->filterResponseEventMock);\n\n        $actual = $this->filterResponseEventMock->getResponse();\n        $expected = new RedirectResponse($expectedUrl);\n\n        $this->assertEquals($expected, $actual);\n    }\n\n    public function testWhenRequestAndResponseUrlsAreEqualItDoesNotModifyOriginalResponse()\n    {\n        $expectedUrl = 'http://localhost';\n\n        $legacyContextMock = $this->getLegacyContextMock();\n        $backUrlProviderMock = $this->getBackUrlProviderMock(\n            'http://localhost-not-called.dev'\n        );\n\n        $originalRedirectResponse = new RedirectResponse($expectedUrl);\n\n        $this->filterResponseEventMock\n            ->method('getResponse')\n            ->willReturn($originalRedirectResponse)\n        ;\n\n        $currentRequest = $this\n            ->getMockBuilder(Request::class)\n            ->getMock();\n\n        $currentRequest\n            ->method('getRequestUri')\n            ->willReturn($expectedUrl)\n        ;\n\n        $this->filterResponseEventMock\n            ->method('getRequest')\n            ->willReturn($currentRequest)\n        ;\n\n        $responseListener = new BackUrlRedirectResponseListener(\n            $backUrlProviderMock,\n            $legacyContextMock\n        );\n\n        $responseListener->onKernelResponse($this->filterResponseEventMock);\n\n        $actual = $this->filterResponseEventMock->getResponse();\n\n        $this->assertEquals($originalRedirectResponse, $actual);\n    }\n\n    public function testWhenEmployeeIsNotConnected()\n    {\n        $expectedUrl = 'http://localhost';\n\n        $legacyContextMock = $this->getLegacyContextMock(false);\n        $backUrlProviderMock = $this->getBackUrlProviderMock(\n            'http://localhost-not-called.dev'\n        );\n\n        $responseListener = new BackUrlRedirectResponseListener(\n            $backUrlProviderMock,\n            $legacyContextMock\n        );\n\n        $this->assertNull($responseListener->onKernelResponse($this->filterResponseEventMock));\n    }\n}\n"], "filenames": ["src/PrestaShopBundle/EventListener/BackUrlRedirectResponseListener.php", "src/PrestaShopBundle/Resources/config/services/bundle/event_listener.yml", "tests/Unit/PrestaShopBundle/EventListener/BackUrlRedirectResponseListenerTest.php"], "buggy_code_start_loc": [28, 91, 28], "buggy_code_end_loc": [54, 91, 130], "fixing_code_start_loc": [29, 92, 29], "fixing_code_end_loc": [72, 93, 180], "type": "CWE-601", "message": "In PrestaShop between versions 1.7.6.0 and 1.7.6.5, there is an open redirection when using back parameter. The impacts can be many, and vary from the theft of information and credentials to the redirection to malicious websites containing attacker-controlled content, which in some cases even cause XSS attacks. So even though an open redirection might sound harmless at first, the impacts of it can be severe should it be exploitable. The problem is fixed in 1.7.6.5", "other": {"cve": {"id": "CVE-2020-5270", "sourceIdentifier": "security-advisories@github.com", "published": "2020-04-20T17:15:15.507", "lastModified": "2020-04-23T19:08:05.167", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In PrestaShop between versions 1.7.6.0 and 1.7.6.5, there is an open redirection when using back parameter. The impacts can be many, and vary from the theft of information and credentials to the redirection to malicious websites containing attacker-controlled content, which in some cases even cause XSS attacks. So even though an open redirection might sound harmless at first, the impacts of it can be severe should it be exploitable. The problem is fixed in 1.7.6.5"}, {"lang": "es", "value": "En PrestaShop entre las versiones 1.7.6.0 y 1.7.6.5, hay un redireccionamiento abierto cuando se usa el par\u00e1metro back. Los impactos pueden ser muchos y var\u00edan desde el robo de informaci\u00f3n y credenciales hasta el redireccionamiento a sitios web maliciosos que contienen contenido controlado por los atacantes, que en algunos casos incluso causan ataques de tipo XSS. Entonces, aunque un redireccionamiento abierto puede parecer inofensivo al principio, los impactos de esto pueden ser graves en caso de ser explotables. El problema se corrigi\u00f3 en la versi\u00f3n 1.7.6.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-601"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionStartExcluding": "1.7.6.0", "versionEndExcluding": "1.7.6.5", "matchCriteriaId": "7CDA8AA9-C187-4960-B900-46D5A804870D"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/cd2219dca49965ae8421bb5a53fc301f3f23c458", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-375w-q56h-h7qc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/cd2219dca49965ae8421bb5a53fc301f3f23c458"}}