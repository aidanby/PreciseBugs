{"buggy_code": ["\n2.3-392 | 2015-01-15 09:44:15 -0800\n\n  * Small changes to EC curve names in a newer draft. (Johanna Amann)\n\n2.3-390 | 2015-01-14 13:27:34 -0800\n\n  * Updating MySQL analyses. (Vlad Grigorescu)\n     - Use a boolean success instead of a result string.\n     - Change the affected_rows response detail string to a \"rows\" count.\n     - Fix the state tracking to log incomplete command.\n\n  * Extend DNP3 to support communication over UDP. (Hui Lin)\n\n  * Fix a bug in DNP3 determining the length of an object in some\n    cases. (Hui Lin)\n\n2.3-376 | 2015-01-12 09:38:10 -0600\n\n  * Improve documentation for connection_established event. (Jon Siwek)\n\n2.3-375 | 2015-01-08 13:10:09 -0600\n\n  * Increase minimum required CMake version to 2.8. (Jon Siwek)\n\n2.3-374 | 2015-01-07 10:03:17 -0600\n\n  * Improve documentation of the Intelligence Framework. (Daniel Thayer)\n\n2.3-371 | 2015-01-06 09:58:09 -0600\n\n  * Update/improve file mime type identification. (Seth Hall)\n\n     - Change to the default BOF buffer size to 3000 (was 1024).\n\n     - Reorganized MS signatures into a separate file.\n\n     - Remove all of the x-c detections.  Nearly all false positives.\n\n     - Improve TAR detections, removing old, back up TAR detections.\n\n     - Remove one of the x-elc detections that was too loose\n       and caused many false positives.\n\n     - Improved lots of the signatures and added new ones. (Seth Hall)\n\n  * Add support for file reassembly in the file analysis framework\n    (Seth Hall, Jon Siwek).\n\n     - The reassembly behavior can be modified per-file by enabling or\n       disabling the reassembler and/or modifying the size of the\n       reassembly buffer.\n\n     - Changed the file extraction analyzer to use stream-wise input to\n       avoid issues with the chunk-wise approach not immediately\n       triggering the file_new event due to mime-type detection delay.\n       Before, early chunks frequently ended up lost.  Extraction also\n       will now explicitly NUL-fill gaps in the file instead of\n       implicitly relying on pwrite to do it.\n\n2.3-349 | 2015-01-05 15:21:13 -0600\n\n  * Fix race condition in unified2 file analyzer startup. (Jon siwek)\n\n2.3-348 | 2014-12-31 09:19:34 -0800\n\n  * Changing Makefile's test-all to run test-all for broctl, which now\n    executes trace-summary tests as well. (Robin Sommer)\n\n2.3-345 | 2014-12-31 09:06:15 -0800\n\n  * Correct a typo in the Notice framework doc. (Daniel Thayer)\n\n2.3-343 | 2014-12-12 12:43:46 -0800\n\n  * Fix PIA packet replay to deliver copy of IP header. This prevented\n    one from writing a packet-wise analyzer that needs access to IP\n    headers and can be attached to a connection via signature match.\n    Addresses BIT-1298 (Jon Siwek)\n\n2.3-338 | 2014-12-08 13:56:19 -0800\n\n  * Add man page for Bro. (Ra\u00fal Benencia)\n\n  * Updating doc baselines. (Robin Sommer)\n\n2.3-334 | 2014-12-03 14:22:07 -0800\n\n  * Fix compound assignment to require proper L-value. Addresses\n    BIT-1295. (Jon Siwek)\n\n2.3-332 | 2014-12-03 14:14:11 -0800\n\n  * Make using local IDs in @if directives an error. Addresses\n    BIT-1296. (Jon Siwek)\n\n2.3-330 | 2014-12-03 14:10:39 -0800\n\n  * Fix some \"make doc\" warnings and update some doc tests. (Daniel\n    Thayer)\n\n2.3-328 | 2014-12-02 08:13:10 -0500\n\n  * Update windows-version-detection.bro to add support for \n    Windows 10. (Michal Purzynski)\n\n2.3-326 | 2014-12-01 12:10:27 -0600\n\n  * BIFScanner: fix invalid characters in generated preprocessor macros.\n    (Hilko Bengen)\n\n  * BIT-1294: fix exec.bro from mutating Input::end_of_data event\n    parameters. (Johanna Amann)\n\n  * Add/invoke \"distclean\" for testing directories. (Ra\u00fal Benencia)\n\n  * Delete prebuilt python bytecode files from git. (Jon Siwek)\n\n  * Add Windows detection based on CryptoAPI HTTP traffic as a software\n    framework policy script. (Vlad Grigorescu)\n\n2.3-316 | 2014-11-25 17:35:06 -0800\n\n  * Make the SSL analyzer skip further processing once encountering\n    situations which are very probably non-recoverable. (Johanna\n    Amann)\n\n2.3-313 | 2014-11-25 14:27:07 -0800\n\n  * Make SSL v2 protocol tests more strict. In its former state they\n    triggered on http traffic over port 443 sometimes. Found by Micha\u0142\n    Purzy\u0144ski. (Johanna Amann)\n\n  * Fix X509 analyzer to correctly return ECDSA as the key_type for\n    ECDSA certs. Bug found by Micha\u0142 Purzy\u0144ski. (Johanna Amann)\n\n2.3-310 | 2014-11-19 10:56:59 -0600\n\n  * Disable verbose bison output. (Jon Siwek)\n\n2.3-309 | 2014-11-18 12:17:53 -0800\n\n  * New decompose_uri() function in base/utils/urls that splits a URI\n    into its pieces. (Anthony Kasza).\n\n2.3-305 | 2014-11-18 11:09:04 -0800\n\n  * Improve coercion of &default expressions. Addresses BIT-1288. (Jon\n    Siwek)\n\n2.3-303 | 2014-11-18 10:53:04 -0800\n\n  * For DH key exchanges, use p as the parameter for weak key\n    exchanges. (Johanna Amann)\n\n2.3-301 | 2014-11-11 13:47:27 -0800\n\n  * Add builtin function enum_to_int() that converts an enum into a\n    integer. (Christian Struck)\n\n2.3-297 | 2014-11-11 11:50:47 -0800\n\n  * Removing method from SSL analyzer that's no longer used. (Robin\n    Sommer)\n\n2.3-296 | 2014-11-11 11:42:38 -0800\n\n  * A new analyzer parsing the MySQL wire protocol. Activity gets\n    logged into mysql.log. Supports protocol versions 9 and 10. (Vlad\n    Grigorescu)\n\n2.3-280 | 2014-11-05 09:46:33 -0500\n\n  * Add Windows detection based on CryptoAPI HTTP traffic as a \n    software framework policy script. (Vlad Grigorescu)\n\n2.3-278 | 2014-11-03 18:55:18 -0800\n\n  * Add new curves from draft-ietf-tls-negotiated-ff-dhe to SSL\n    analysis. (Johanna Amann)\n\n2.3-274 | 2014-10-31 17:45:25 -0700\n\n  * Adding call to new binpac::init() function. (Robin Sommer)\n\n2.3-272 | 2014-10-31 16:29:42 -0700\n\n  * Fix segfault if when statement's RHS is unitialized. Addresses\n    BIT-1176. (Jon Siwek)\n\n  * Fix checking vector indices via \"in\". Addresses BIT-1280.  (Jon\n    Siwek)\n\n2.3-268 | 2014-10-31 12:12:22 -0500\n\n  * BIT-1283: Fix crash when using &encrypt. (Jon Siwek)\n\n2.3-267 | 2014-10-31 10:35:02 -0500\n\n  * BIT-1284: Allow arbitrary when statement timeout expressions\n    (Jon Siwek)\n\n2.3-266 | 2014-10-31 09:21:28 -0500\n\n  * BIT-1166: Add configure options to fine tune local state dirs used\n    by BroControl. (Jon Siwek)\n\n2.3-264 | 2014-10-30 13:25:57 -0500\n\n  * Fix some minor Coverity Scan complaints. (Jon Siwek)\n\n2.3-263 | 2014-10-28 15:09:10 -0500\n\n  * Fix checking of fwrite return values (Johanna Amann)\n\n2.3-260 | 2014-10-27 12:54:17 -0500\n\n  * Fix errors/warnings when compiling with -std=c++11 (Jon Siwek)\n\n2.3-259 | 2014-10-27 10:04:04 -0500\n\n  * Documentation fixes. (Vicente Jimenez Aguilar and Stefano Azzalini)\n\n2.3-256 | 2014-10-24 15:33:45 -0700\n\n  * Adding missing test baseline. (Robin Sommer)\n\n2.3-255 | 2014-10-24 13:39:44 -0700\n\n  * Fixing unstable active-http test. (Robin Sommer)\n\n2.3-254 | 2014-10-24 11:40:51 -0700\n\n  * Fix active-http.bro to deal reliably with empty server responses,\n    which will now be passed back as empty files. (Christian Struck)\n\n2.3-248 | 2014-10-23 14:20:59 -0700\n\n  * Change order in which a plugin's scripts are loaded at startup.\n    (Robin Sommer)\n\n2.3-247 | 2014-10-21 13:42:38 -0700\n\n  * Updates to the SSL analyzer. (Johanna Amann)\n\n        * Mark everything below 2048 bit as a weak key.\n\n        * Fix notice suppression.\n\n        * Add information about server-chosen protocol to ssl.log, if\n          provided by application_layer_next_protocol.\n\n        * Add boolean flag to ssl.log signaling if a session was\n          resumed. Remove the (usually not really that useful) session\n          ID that the client sent.\n\n2.3-240 | 2014-10-21 13:36:33 -0700\n\n  * Fix Coverity-reported issues in DNP3 analyzer. (Seth Hall)\n\n2.3-238 | 2014-10-16 06:51:49 -0700\n\n  * Fix multipart HTTP/MIME entity file analysis so that (1) singular\n    CR or LF characters in multipart body content are no longer\n    converted to a full CRLF (thus corrupting the file) and (2) it\n    also no longer considers the CRLF before the multipart boundary as\n    part of the content. Addresses BIT-1235. (Jon Siwek)\n\n2.3-235 | 2014-10-15 10:20:47 -0500\n\n  * BIT-1273: Add error message for bad enum declaration syntax.\n    (Jon Siwek)\n\n2.3-234 | 2014-10-14 14:42:09 -0500\n\n  * Documentation fixes. (Steve Smoot)\n\n2.3-233 | 2014-10-09 16:00:27 -0500\n\n  * Change find-bro-logs unit test to follow symlinks. (Jon Siwek)\n\n  * Add error checks and messages to a test script (Daniel Thayer)\n\n2.3-230 | 2014-10-08 08:15:17 -0700\n\n  * Further baseline normalization for plugin test portability. (Robin\n    Sommer)\n\n2.3-229 | 2014-10-07 20:18:11 -0700\n\n  * Fix for test portability. (Robin Sommer)\n\n2.3-228 | 2014-10-07 15:32:37 -0700\n\n  * Include plugin unit tests into the top-level btest configuration. (Robin Sommer)\n\n  * Switching the prefix separator for packet source/dumper plugins\n    once more, now to \"::\". Addresses BIT-1267. (Robin Sommer)\n\n  * Fix for allowing a packet source/dumper plugin to support multiple\n    prefixes with a colon. (Robin Sommer)\n\n2.3-225 | 2014-10-07 15:13:35 -0700\n\n  * Updating plugin documentation. (Robin Sommer)\n\n2.3-224 | 2014-10-07 14:32:17 -0700\n\n  * Improved the log file reference documentation. (Jeannette Dopheide\n    and Daniel Thayer)\n\n  * Improves shockwave flash file signatures. (Seth Hall)\n\n     - This moves the signatures out of the libmagic imported signatures\n       and into our own general.sig.\n\n     - Expand the detection to LZMA compressed flash files.\n\n  * Add new script language reference documentation on operators,\n    statements, and directives.  Also improved the documentation on\n    types and attributes by splitting them into two docs, and\n    providing more examples and adding a chart on the top of each page\n    with links to each type and attribute for easier access to the\n    information. (Daniel Thayer)\n\n  * Split the types and attributes reference doc into two docs.\n    (Daniel Thayer)\n\n2.3-208 | 2014-10-03 09:38:52 -0500\n\n  * BIT-1268: Fix uninitialized router_list argument in\n    dhcp_offer/dhcp_ack. (Jon Siwek)\n\n2.3-207 | 2014-10-02 16:39:17 -0700\n\n  * Updating plugin docs. (Robin Sommer)\n\n  * Fix packet sources being treated as idle when a packet is\n    available. Addresses BIT-1266. (Jon Siwek)\n\n  * Fix regression causing the main loop to spin more frequently.\n    Addresses BIT-1266. (Jon Siwek)\n\n2.3-203 | 2014-09-29 20:06:54 -0700\n\n  * Fix to use length parameter in DNP3 time conversion correctly now.\n    (Robin Sommer)\n\n2.3-202 | 2014-09-29 17:05:18 -0700\n\n  * New SSL extension type from IANA and a few other SSL const\n    changes. (Johanna Amann)\n\n  * Make unexpected pipe errors fatal as precaution. Addresses\n    BIT-1260. (Jon Siwek)\n\n  * Adding a function for DNP3 to translate the timestamp format. (Hui\n    Lin)\n\n2.3-197 | 2014-09-29 10:42:01 -0500\n\n  * Fix possible seg fault in TCP reassembler. (Jon Siwek)\n\n2.3-196 | 2014-09-25 17:53:27 -0700\n\n  * Changing prefix for packet sources/dumper from ':' to '%'.\n    Addresses BIT-1249. (Robin Sommer)\n\n  * Remove timeouts from remote communication loop. The select() now\n    blocks until there's work to do instead of relying on a small\n    timeout value which can cause unproductive use of cpu cycles. (Jon\n    Siwek)\n\n  * Improve error message when failing to activate a plugin. Also fix\n    a unit test helper script that checks plugin availability. (Jon\n    Siwek)\n\n2.3-183 | 2014-09-24 10:08:04 -0500\n\n  * Add a \"node\" field to Intel::Seen struture and intel.log to\n    indicate which node discovered a hit on an intel item. (Seth Hall)\n\n  * BIT-1261: Fixes to plugin quick start doc. (Jon Siwek)\n\n2.3-180 | 2014-09-22 12:52:41 -0500\n\n  * BIT-1259: Fix issue w/ duplicate TCP reassembly deliveries.\n    (Jon Siwek)\n\n2.3-178 | 2014-09-18 14:29:46 -0500\n\n  * BIT-1256: Fix file analysis events from coming after bro_done().\n    (Jon Siwek)\n\n2.3-177 | 2014-09-17 09:41:27 -0500\n\n  * Documentation fixes. (Chris Mavrakis)\n\n2.3-174 | 2014-09-17 09:37:09 -0500\n\n  * Fixed some \"make doc\" warnings caused by reST formatting\n    (Daniel Thayer).\n\n2.3-172 | 2014-09-15 13:38:52 -0500\n\n  * Remove unneeded allocations for HTTP messages. (Jon Siwek)\n\n2.3-171 | 2014-09-15 11:14:57 -0500\n\n  * Fix a compile error on systems without pcap-int.h. (Jon Siwek)\n\n2.3-170 | 2014-09-12 19:28:01 -0700\n\n  * Fix incorrect data delivery skips after gap in HTTP Content-Range.\n    Addresses BIT-1247. (Jon Siwek)\n\n  * Fix file analysis placement of data after gap in HTTP\n    Content-Range. Addresses BIT-1248. (Jon Siwek)\n\n  * Fix issue w/ TCP reassembler not delivering some segments.\n    Addresses BIT-1246. (Jon Siwek)\n\n  * Fix MIME entity file data/gap ordering and raise http_entity_data\n    in line with data arrival. Addresses BIT-1240. (Jon Siwek)\n\n  * Implement file ID caching for MIME_Mail. (Jon Siwek)\n\n  * Fix a compile error. (Jon Siwek)\n\n2.3-161 | 2014-09-09 12:35:38 -0500\n\n  * Bugfixes and test updates/additions. (Robin Sommer)\n\n  * Interface tweaks and docs for PktSrc/PktDumper. (Robin Sommer)\n\n  * Moving PCAP-related bifs to iosource/pcap.bif. (Robin Sommer)\n\n  * Moving some of the BPF filtering code into base class.\n    This will allow packet sources that don't support BPF natively to\n    emulate the filtering via libpcap. (Robin Sommer)\n\n  * Removing FlowSrc. (Robin Sommer)\n\n  * Removing remaining pieces of the 2ndary path, and left-over\n    files of packet sorter. (Robin Sommer)\n\n  * A bunch of infrastructure work to move IOSource, IOSourceRegistry\n    (now iosource::Manager) and PktSrc/PktDumper code into iosource/,\n    and over to a plugin structure. (Robin Sommer)\n\n2.3-137 | 2014-09-08 19:01:13 -0500\n\n  * Fix Broxygen's rendering of opaque types. (Jon Siwek)\n\n2.3-136 | 2014-09-07 20:50:46 -0700\n\n  * Change more http links to https. (Johanna Amann)\n\n2.3-134 | 2014-09-04 16:16:36 -0700\n\n  * Fixed a number of issues with OCSP reply validation. Addresses\n    BIT-1212. (Johanna Amann)\n\n  * Fix null pointer dereference in OCSP verification code in case no\n    certificate is sent as part as the ocsp reply. Addresses BIT-1212.\n    (Johanna Amann)\n\n2.3-131 | 2014-09-04 16:10:32 -0700\n\n  * Make links in documentation templates protocol relative. (Johanna\n    Amann)\n\n2.3-129 | 2014-09-02 17:21:21 -0700\n\n  * Simplify a conditional with equivalent branches. (Jon Siwek)\n\n  * Change EDNS parsing code to use rdlength more cautiously. (Jon\n    Siwek)\n\n  * Fix a memory leak when bind() fails due to EADDRINUSE. (Jon Siwek)\n\n  * Fix possible buffer over-read in DNS TSIG parsing. (Jon Siwek)\n\n2.3-124 | 2014-08-26 09:24:19 -0500\n\n  * Better documentation for sub_bytes (Jimmy Jones)\n\n  * BIT-1234: Fix build on systems that already have ntohll/htonll\n    (Jon Siwek)\n\n2.3-121 | 2014-08-22 15:22:15 -0700\n\n  * Detect functions that try to bind variables from an outer scope\n    and raise an error saying that's not supported. Addresses\n    BIT-1233. (Jon Siwek)\n\n2.3-116 | 2014-08-21 16:04:13 -0500\n\n  * Adding plugin testing to Makefile's test-all. (Robin Sommer)\n\n  * Converting log writers and input readers to plugins.\n    DataSeries and ElasticSearch plugins have moved to the new\n    bro-plugins repository, which is now a git submodule in the\n    aux/plugins directory. (Robin Sommer)\n\n2.3-98 | 2014-08-19 11:03:46 -0500\n\n  * Silence some doc-related warnings when using `bro -e`.\n    Closes BIT-1232. (Jon Siwek)\n\n  * Fix possible null ptr derefs reported by Coverity. (Jon Siwek)\n\n2.3-96 | 2014-08-01 14:35:01 -0700\n\n  * Small change to DHCP documentation. In server->client messages the\n    host name may differ from the one requested by the client.\n    (Johanna Amann)\n\n  * Split DHCP log writing from record creation. This allows users to\n    customize dhcp.log by changing the record in their own dhcp_ack\n    event. (Johanna Amann)\n\n  * Update PATH so that documentation btests can find bro-cut. (Daniel\n    Thayer)\n\n  * Remove gawk from list of optional packages in documentation.\n    (Daniel Thayer)\n\n  * Fix for redefining built-in constants. (Robin Sommer)\n\n2.3-86 | 2014-07-31 14:19:58 -0700\n\n  * Fix for redefining built-in constants. (Robin Sommer)\n\n  * Adding missing check that a plugin's API version matches what Bro\n    defines. (Robin Sommer)\n\n  * Adding NEWS entry for plugins. (Robin Sommer)\n\n2.3-83 | 2014-07-30 16:26:11 -0500\n\n  * Minor adjustments to plugin code/docs. (Jon Siwek)\n\n  * Dynamic plugin support. (Rpbin Sommer)\n\n    Bro now supports extending core functionality, like protocol and\n    file analysis, dynamically with external plugins in the form of\n    shared libraries. See doc/devel/plugins.rst for an overview of the\n    main functionality. Changes coming with this:\n\n        - Replacing the old Plugin macro magic with a new API.\n\n        - The plugin API changed to generally use std::strings instead\n          of const char*.\n\n        - There are a number of invocations of PLUGIN_HOOK_\n          {VOID,WITH_RESULT} across the code base, which allow plugins\n          to hook into the processing at those locations.\n\n        - A few new accessor methods to various classes to allow\n          plugins to get to that information.\n\n        - network_time cannot be just assigned to anymore, there's now\n          function net_update_time() for that.\n\n        - Redoing how builtin variables are initialized, so that it\n          works for plugins as well. No more init_net_var(), but\n          instead bifcl-generated code that registers them.\n\n        - Various changes for adjusting to the now dynamic generation\n          of analyzer instances.\n\n    - same_type() gets an optional extra argument allowing record type\n      comparision to ignore if field names don't match. (Robin Sommer)\n\n    - Further unify file analysis API with the protocol analyzer API\n      (assigning IDs to analyzers; adding Init()/Done() methods;\n      adding subtypes). (Robin Sommer)\n\n    - A new command line option -Q that prints some basic execution\n      time stats. (Robin Sommer)\n\n    - Add support to the file analysis for activating analyzers by\n      MIME type. (Robin Sommer)\n\n          - File::register_for_mime_type(tag: Analyzer::Tag, mt:\n            string): Associates a file analyzer with a MIME type.\n\n          - File::add_analyzers_for_mime_type(f: fa_file, mtype:\n            string): Activates all analyzers registered for a MIME\n            type for the file.\n\n          - The default file_new() handler calls\n            File::add_analyzers_for_mime_type() with the file's MIME\n            type.\n\n2.3-20 | 2014-07-22 17:41:02 -0700\n\n  * Updating submodule(s).\n\n2.3-19 | 2014-07-22 17:29:19 -0700\n\n  * Implement bytestring_to_coils() in Modbus analyzer so that coils\n    gets passed to the corresponding events. (Hui Lin)\n\n  * Add length field to ModbusHeaders. (Hui Lin)\n\n2.3-12 | 2014-07-10 19:17:37 -0500\n\n  * Include yield of vectors in Broxygen's type descriptions.\n    Addresses BIT-1217. (Jon Siwek)\n\n2.3-11 | 2014-07-10 14:49:27 -0700\n\n  * Fixing DataSeries output. It was using a now illegal value as its\n    default compression level. (Robin Sommer)\n\n2.3-7 | 2014-06-26 17:35:18 -0700\n\n  * Extending \"make test-all\" to include aux/bro-aux. (Robin Sommer)\n\n2.3-6 | 2014-06-26 17:24:10 -0700\n\n  * DataSeries compilation issue fixed. (mlaterman)\n\n  * Fix a reference counting bug in ListVal ctor. (Jon Siwek)\n\n2.3-3 | 2014-06-26 15:41:04 -0500\n\n  * Support tilde expansion when Bro tries to find its own path. (Jon\n    Siwek)\n\n2.3-2 | 2014-06-23 16:54:15 -0500\n\n  * Remove references to line numbers in tutorial text. (Daniel Thayer)\n\n2.3 | 2014-06-16 09:48:25 -0500\n\n  * Release 2.3.\n\n2.3-beta-33 | 2014-06-12 11:59:28 -0500\n\n  * Documentation improvements/fixes. (Daniel Thayer)\n\n2.3-beta-24 | 2014-06-11 15:35:31 -0500\n\n  * Fix SMTP state tracking when server response is missing.\n    (Robin Sommer)\n\n2.3-beta-22 | 2014-06-11 12:31:38 -0500\n\n  * Fix doc/test that broke due to a Bro script change. (Jon Siwek)\n\n  * Remove unused --with-libmagic configure option. (Jon Siwek)\n\n2.3-beta-20 | 2014-06-10 18:16:51 -0700\n\n  * Fix use-after-free in some cases of reassigning a table index.\n    Addresses BIT-1202. (Jon Siwek)\n\n2.3-beta-18 | 2014-06-06 13:11:50 -0700\n\n  * Add two more SSL events, one triggered for each handshake message\n    and one triggered for the tls change cipherspec message. (Bernhard\n    Amann)\n\n  * Small SSL bug fix. In case SSL::disable_analyzer_after_detection\n    was set to false, the ssl_established event would fire after each\n    data packet once the session is established. (Bernhard Amann)\n\n2.3-beta-16 | 2014-06-06 13:05:44 -0700\n\n  * Re-activate notice suppression for expiring certificates.\n    (Bernhard Amann)\n\n2.3-beta-14 | 2014-06-05 14:43:33 -0700\n\n  * Add new TLS extension type numbers from IANA (Bernhard Amann)\n\n  * Switch to double hashing for Bloomfilters for better performance.\n    (Matthias Vallentin)\n\n  * Bugfix to use full digest length instead of just one byte for\n    Bloomfilter's universal hash function. Addresses BIT-1140.\n    (Matthias Vallentin)\n\n  * Make buffer for X509 certificate subjects larger. Addresses\n    BIT-1195 (Bernhard Amann)\n\n2.3-beta-5 | 2014-05-29 15:34:42 -0500\n\n  * Fix misc/load-balancing.bro's reference to\n    PacketFilter::sampling_filter (Jon Siwek)\n\n2.3-beta-4 | 2014-05-28 14:55:24 -0500\n\n  * Fix potential mem leak in remote function/event unserialization.\n    (Jon Siwek)\n\n  * Fix reference counting bug in table coercion expressions (Jon Siwek)\n\n  * Fix an \"unused value\" warning. (Jon Siwek)\n\n  * Remove a duplicate unit test baseline dir. (Jon Siwek)\n\n2.3-beta | 2014-05-19 16:36:50 -0500\n\n  * Release 2.3-beta\n\n  * Clean up OpenSSL data structures on exit. (Bernhard Amann)\n\n  * Fixes for OCSP & x509 analysis memory leak issues. (Bernhard Amann)\n\n  * Remove remaining references to BROMAGIC (Daniel Thayer)\n\n  * Fix typos and formatting in event and BiF documentation (Daniel Thayer)\n\n  * Update intel framework plugin for ssl server_name extension API\n    changes. (Bernhard Amann, Justin Azoff)\n\n  * Fix expression errors in SSL/x509 scripts when unparseable data\n    is in certificate chain. (Bernhard Amann)\n\n2.2-478 | 2014-05-19 15:31:33 -0500\n\n  * Change record ctors to only allow record-field-assignment\n    expressions. (Jon Siwek)\n\n2.2-477 | 2014-05-19 14:13:00 -0500\n\n  * Fix X509::Result record's \"result\" field to be set internally as type int instead of type count. (Bernhard Amann)\n\n  * Fix a couple of doc build warnings (Daniel Thayer)\n\n2.2-470 | 2014-05-16 15:16:32 -0700\n\n  * Add a new section \"Cluster Configuration\" to the docs that is\n    intended as a how-to for configuring a Bro cluster.  Most of this\n    content was moved here from the BroControl doc (which is now\n    intended as more of a reference guide for more experienced users)\n    and the load balancing FAQ on the website. (Daniel Thayer)\n\n  * Update some doc tests and line numbers (Daniel Thayer)\n\n2.2-457 | 2014-05-16 14:38:31 -0700\n\n  * New script policy/protocols/ssl/validate-ocsp.bro that adds OSCP\n    validation to ssl.log. The work is done by a new bif\n    x509_ocsp_verify(). (Bernhard Amann)\n\n  * STARTTLS support for POP3 and SMTP. The SSL analyzer takes over\n    when seen. smtp.log now logs when a connection switches to SSL.\n    (Bernhard Amann)\n\n  * Replace errors when parsing x509 certs with weirds. (Bernhard\n    Amann)\n\n  * Improved Heartbleed attack/scan detection. (Bernhard Amann)\n\n  * Let TLS analyzer fail better when no longer in sync with the data\n    stream. (Bernhard Amann)\n\n2.2-444 | 2014-05-16 14:10:32 -0500\n\n  * Disable all default AppStat plugins except facebook. (Jon Siwek)\n\n  * Update for the active http test to force it to use ipv4. (Seth Hall)\n\n2.2-441 | 2014-05-15 11:29:56 -0700\n\n  * A new RADIUS analyzer. (Vlad Grigorescu)\n\n    It produces a radius.log and generates two events:\n\n        event radius_message(c: connection, result: RADIUS::Message);\n        event radius_attribute(c: connection, attr_type: count, value: string);\n\n2.2-427 | 2014-05-15 13:37:23 -0400\n\n  * Fix dynamic SumStats update on clusters (Bernhard Amann)\n\n2.2-425 | 2014-05-08 16:34:44 -0700\n\n  * Fix reassembly of data w/ sizes beyond 32-bit capacities. (Jon Siwek)\n\n    Reassembly code (e.g. for TCP) now uses int64/uint64 (signedness\n    is situational) data types in place of int types in order to\n    support delivering data to analyzers that pass 2GB thresholds.\n    There's also changes in logic that accompany the change in data\n    types, e.g. to fix TCP sequence space arithmetic inconsistencies.\n\n    Another significant change is in the Analyzer API: the *Packet and\n    *Undelivered methods now use a uint64 in place of an int for the\n    relative sequence space offset parameter.\n\n    Addresses BIT-348.\n\n  * Fixing compiler warnings. (Robin Sommer)\n\n  * Update SNMP analyzer's DeliverPacket method signature. (Jon Siwek)\n\n2.2-417 | 2014-05-07 10:59:22 -0500\n\n  * Change handling of atypical OpenSSL error case in x509 verification. (Jon Siwek)\n\n  * Fix memory leaks in X509 certificate parsing/verification. (Jon Siwek)\n\n  * Fix new []/delete mismatch in input::reader::Raw::DoClose(). (Jon Siwek)\n\n  * Fix buffer over-reads in file_analysis::Manager::Terminate() (Jon Siwek)\n\n  * Fix buffer overlows in IP address masking logic. (Jon Siwek)\n\n    That could occur either in taking a zero-length mask on an IPv6 address\n    (e.g. [fe80::]/0) or a reverse mask of length 128 on any address (e.g.\n    via the remask_addr BuiltIn Function).\n\n  * Fix new []/delete mismatch in ~Base64Converter. (Jon Siwek)\n\n2.2-410 | 2014-05-02 12:49:53 -0500\n\n  * Replace an unneeded OPENSSL_malloc call. (Jon Siwek)\n\n2.2-409 | 2014-05-02 12:09:06 -0500\n\n  * Clean up and documentation for base SNMP script. (Jon Siwek)\n\n  * Update base SNMP script to now produce a snmp.log. (Seth Hall)\n\n  * Add DH support to SSL analyzer.  When using DHE or DH-Anon, sever\n    key parameters are now available in scriptland.  Also add script to\n    alert on weak certificate keys or weak dh-params. (Bernhard Amann)\n\n  * Add a few more ciphers Bro did not know at all so far. (Bernhard Amann)\n\n  * Log chosen curve when using ec cipher suite in TLS. (Bernhard Amann)\n\n2.2-397 | 2014-05-01 20:29:20 -0700\n\n  * Fix reference counting for lookup_ID() usages. (Jon Siwek)\n\n2.2-395 | 2014-05-01 20:25:48 -0700\n\n  * Fix missing \"irc-dcc-data\" service field from IRC DCC connections.\n    (Jon Siwek)\n\n  * Correct a notice for heartbleed. The notice is thrown correctly,\n    just the message conteined wrong values. (Bernhard Amann)\n\n  * Improve/standardize some malloc/realloc return value checks. (Jon\n    Siwek)\n\n  * Improve file analysis manager shutdown/cleanup. (Jon Siwek)\n\n2.2-388 | 2014-04-24 18:38:07 -0700\n\n  * Fix decoding of MIME quoted-printable. (Mareq)\n\n2.2-386 | 2014-04-24 18:22:29 -0700\n\n  * Do a Intel::ADDR lookup for host field if we find an IP address\n    there. (jshlbrd)\n\n2.2-381 | 2014-04-24 17:08:45 -0700\n\n  * Add Java version to software framework. (Brian Little)\n\n2.2-379 | 2014-04-24 17:06:21 -0700\n\n  * Remove unused Val::attribs member. (Jon Siwek)\n\n2.2-377 | 2014-04-24 16:57:54 -0700\n\n  * A larger set of SSL improvements and extensions. Addresses\n    BIT-1178. (Bernhard Amann)\n\n        - Fixes TLS protocol version detection. It also should\n          bail-out correctly on non-tls-connections now\n\n        - Adds support for a few TLS extensions, including\n          server_name, alpn, and ec-curves.\n\n        - Adds support for the heartbeat events.\n\n        - Add Heartbleed detector script.\n\n        - Adds basic support for OCSP stapling.\n\n  * Fix parsing of DNS TXT RRs w/ multiple character-strings.\n    Addresses BIT-1156. (Jon Siwek)\n\n2.2-353 | 2014-04-24 16:12:30 -0700\n\n  * Adapt HTTP partial content to cache file analysis IDs. (Jon Siwek)\n\n  * Adapt SSL analyzer to generate file analysis handles itself. (Jon\n    Siwek)\n\n  * Adapt more of HTTP analyzer to use cached file analysis IDs. (Jon\n    Siwek)\n\n  * Adapt IRC/FTP analyzers to cache file analysis IDs. (Jon Siwek)\n\n  * Refactor regex/signature AcceptingSet data structure and usages.\n    (Jon Siwek)\n\n  * Enforce data size limit when checking files for MIME matches. (Jon\n    Siwek)\n\n  * Refactor file analysis file ID lookup. (Jon Siwek)\n\n2.2-344 | 2014-04-22 20:13:30 -0700\n\n  * Refactor various hex escaping code. (Jon Siwek)\n\n2.2-341 | 2014-04-17 18:01:41 -0500\n\n  * Fix duplicate DNS log entries. (Robin Sommer)\n\n2.2-341 | 2014-04-17 18:01:01 -0500\n\n  * Refactor initialization of ASCII log writer options. (Jon Siwek)\n\n  * Fix a memory leak in ASCII log writer. (Jon Siwek)\n\n2.2-338 | 2014-04-17 17:48:17 -0500\n\n  * Disable input/logging threads setting their names on every\n    heartbeat. (Jon Siwek)\n\n  * Fix bug when clearing Bloom filter contents. Reported by\n    @colonelxc. (Matthias Vallentin)\n\n2.2-335 | 2014-04-10 15:04:57 -0700\n\n  * Small logic fix for main SSL script. (Bernhard Amann)\n\n  * Update DPD signatures for detecting TLS 1.2. (Bernhard Amann)\n\n  * Remove unused data member of SMTP_Analyzer to silence a Coverity\n    warning. (Jon Siwek)\n\n  * Fix missing @load dependencies in some scripts. Also update the\n    unit test which is supposed to catch such errors. (Jon Siwek)\n\n2.2-326 | 2014-04-08 15:21:51 -0700\n\n  * Add SNMP datagram parsing support.This supports parsing of SNMPv1\n    (RFC 1157), SNMPv2 (RFC 1901/3416), and SNMPv2 (RFC 3412).  An\n    event is raised for each SNMP PDU type, though there's not\n    currently any event handlers for them and not a default snmp.log\n    either.  However, simple presence of SNMP is currently visible now\n    in conn.log service field and known_services.log. (Jon Siwek)\n\n2.2-319 | 2014-04-03 15:53:25 -0700\n\n  * Improve __load__.bro creation for .bif.bro stubs. (Jon Siwek)\n\n2.2-317 | 2014-04-03 10:51:31 -0400\n\n  * Add a uid field to the signatures.log.  Addresses BIT-1171\n    (Anthony Verez)\n\n2.2-315 | 2014-04-01 16:50:01 -0700\n\n  * Change logging's \"#types\" description of sets to \"set\". Addresses\n    BIT-1163 (Bernhard Amann)\n\n2.2-313 | 2014-04-01 16:40:19 -0700\n\n  * Fix a couple nits reported by Coverity.(Jon Siwek)\n\n  * Fix potential memory leak in IP frag reassembly reported by\n    Coverity. (Jon Siwek)\n\n2.2-310 | 2014-03-31 18:52:22 -0700\n\n  * Fix memory leak and unchecked dynamic cast reported by Coverity.\n    (Jon Siwek)\n\n  * Fix potential memory leak in x509 parser reported by Coverity.\n    (Bernhard Amann)\n\n2.2-304 | 2014-03-30 23:05:54 +0200\n\n  * Replace libmagic w/ Bro signatures for file MIME type\n    identification. Addresses BIT-1143. (Jon Siwek)\n\n    Includes:\n\n    - libmagic is no longer used at all.  All MIME type detection is\n      done through new Bro signatures, and there's no longer a means\n      to get verbose file type descriptions. The majority of the\n      default file magic signatures are derived from the default magic\n      database of libmagic ~5.17.\n\n    - File magic signatures consist of two new constructs in the\n      signature rule parsing grammar: \"file-magic\" gives a regular\n      expression to match against, and \"file-mime\" gives the MIME type\n      string of content that matches the magic and an optional strength\n      value for the match.\n\n    - Modified signature/rule syntax for identifiers: they can no\n      longer start with a '-', which made for ambiguous syntax when\n      doing negative strength values in \"file-mime\".  Also brought\n      syntax for Bro script identifiers in line with reality (they\n      can't start with numbers or include '-' at all).\n\n    - A new built-in function, \"file_magic\", can be used to get all\n      file magic matches and their corresponding strength against a\n      given chunk of data.\n\n    - The second parameter of the \"identify_data\" built-in function\n      can no longer be used to get verbose file type descriptions,\n      though it can still be used to get the strongest matching file\n      magic signature.\n\n    - The \"file_transferred\" event's \"descr\" parameter no longer\n      contains verbose file type descriptions.\n\n    - The BROMAGIC environment variable no longer changes any behavior\n      in Bro as magic databases are no longer used/installed.\n\n    - Removed \"binary\" and \"octet-stream\" mime type detections. They\n      don' provide any more information than an uninitialized\n      mime_type field which implicitly means no magic signature\n      matches and so the media type is unknown to Bro.\n\n    - The \"fa_file\" record now contains a \"mime_types\" field that\n      contains all magic signatures that matched the file content\n      (where the \"mime_type\" field is just a shortcut for the\n      strongest match).\n\n    - Reverted back to minimum requirement of CMake 2.6.3 from 2.8.0.\n\n  * The logic for adding file ids to {orig,resp}_fuids fields of the\n    http.log incorrectly depended on the state of\n    {orig,resp}_mime_types fields, so sometimes not all file ids\n    associated w/ the session were logged. (Jon Siwek)\n\n  * Fix MHR script's use of fa_file$mime_type before checking if it's\n    initialized. (Jon Siwek)\n\n2.2-294 | 2014-03-30 22:08:25 +0200\n\n  * Rework and move X509 certificate processing from the SSL protocol\n    analyzer to a dedicated file analyzer. This will allow us to\n    examine X509 certificates from sources other than SSL in the\n    future. Furthermore, Bro now parses more fields and extensions\n    from the certificates (e.g. elliptic curve information, subject\n    alternative names, basic constraints). Certificate validation also\n    was improved, should be easier to use and exposes information like\n    the full verified certificate chain. (Bernhard Amann)\n\n    This update changes the format of ssl.log and adds a new x509.log\n    with certificate information. Furthermore all x509 events and\n    handling functions have changed.\n\n2.2-271 | 2014-03-30 20:25:17 +0200\n\n  * Add unit tests covering vector/set/table ctors/inits. (Jon Siwek)\n\n  * Fix parsing of \"local\" named table constructors. (Jon Siwek)\n\n  * Improve type checking of records. Addresses BIT-1159. (Jon Siwek)\n\n2.2-267 | 2014-03-30 20:21:43 +0200\n\n  * Improve documentation of Bro clusters. Addresses BIT-1160.\n    (Daniel Thayer)\n\n2.2-263 | 2014-03-30 20:19:05 +0200\n\n  * Don't include locations into serialization when cloning values.\n    (Robin Sommer)\n\n2.2-262 | 2014-03-30 20:12:47 +0200\n\n  * Refactor SerializationFormat::EndWrite and ChunkedIO::Chunk memory\n    management. (Jon Siwek)\n\n  * Improve SerializationFormat's write buffer growth strategy. (Jon\n    Siwek)\n\n  * Add --parse-only option to exit after parsing scripts. May be\n    useful for syntax-checking tools. (Jon Siwek)\n\n2.2-256 | 2014-03-30 19:57:28 +0200\n\n  * For the summary statistics framewirk, change all &create_expire\n    attributes to &read_expire in the cluster part. (Bernhard Amann)\n\n2.2-254 | 2014-03-30 19:55:22 +0200\n\n  * Update instructions on how to build Bro docs. (Daniel Thayer)\n\n2.2-251 | 2014-03-28 08:37:37 -0400\n\n  * Quick fix to the ElasticSearch writer. (Seth Hall)\n\n2.2-250 | 2014-03-19 17:20:55 -0400\n\n  * Improve performance of MHR script by reducing cloned Vals in\n    a \"when\" scope. (Jon Siwek)\n\n2.2-248 | 2014-03-19 14:47:40 -0400\n\n  * Make SumStats work incrementally and non-blocking in non-cluster\n    mode, but force it to operate by blocking if Bro is shutting\n    down. (Seth Hall)\n\n2.2-244 | 2014-03-17 08:24:17 -0700\n\n  * Fix compile errror on FreeBSD caused by wrong include file order.\n    (Bernhard Amann)\n\n2.2-240 | 2014-03-14 10:23:54 -0700\n\n  * Derive results of DNS lookups from from input when in BRO_DNS_FAKE\n    mode. Addresses BIT-1134. (Jon Siwek)\n\n  * Fixing a few cases of undefined behaviour introduced by recent\n    formatter work.\n\n  * Fixing compiler error. (Robin Sommer)\n\n  * Fixing (very unlikely) double delete in HTTP analyzer when\n    decapsulating CONNECTs. (Robin Sommer)\n\n2.2-235 | 2014-03-13 16:21:19 -0700\n\n  * The Ascii writer has a new option LogAscii::use_json for writing\n\tout logs as JSON. (Seth Hall)\n\n  * Ascii input reader now supports all config options as per-input\n    stream \"config\" values. (Seth Hall)\n\n  * Refactored formatters and updated the the writers a bit. (Seth\n\tHall)\n\n2.2-229 | 2014-03-13 14:58:30 -0700\n\n  * Refactoring analyzer manager code to reuse\n    ApplyScheduledAnalyzers(). (Robin Sommer)\n\n2.2-228 | 2014-03-13 14:25:53 -0700\n\n  * Teach async DNS lookup builtin-functions about BRO_DNS_FAKE.\n    Addresses BIT-1134. (Jon Siwek)\n\n  * Enable fake DNS mode for test suites.\n\n  * Improve analysis of TCP SYN/SYN-ACK reversal situations. (Jon\n    Siwek)\n\n    - Since it's just the handshake packets out of order, they're no\n      longer treated as partial connections, which some protocol analyzers\n      immediately refuse to look at.\n\n    - The TCP_Reassembler \"is_orig\" state failed to change, which led to\n      protocol analyzers sometimes using the wrong value for that.\n\n    - Add a unit test which exercises the Connection::FlipRoles() code\n      path (i.e. the SYN/SYN-ACK reversal situation).\n\n    Addresses BIT-1148.\n\n  * Fix bug in Connection::FlipRoles. It didn't swap address values\n    right and also didn't consider that analyzers might be scheduled\n    for the new connection tuple. Reported by Kevin McMahon. Addresses\n    BIT-1148. (Jon Siwek)\n\n2.2-221 | 2014-03-12 17:23:18 -0700\n\n  * Teach configure script --enable-jemalloc, --with-jemalloc.\n    Addresses BIT-1128. (Jon Siwek)\n\n2.2-218 | 2014-03-12 17:19:45 -0700\n\n  * Improve DBG_LOG macro (perf. improvement for --enable-debug mode).\n    (Jon Siwek)\n\n  * Silences some documentation warnings from Sphinx. (Jon Siwek)\n\n2.2-215 | 2014-03-10 11:10:15 -0700\n\n  * Fix non-deterministic logging of unmatched DNS msgs. Addresses\n    BIT-1153 (Jon Siwek)\n\n2.2-213 | 2014-03-09 08:57:37 -0700\n\n  * No longer accidentally attempting to parse NBSTAT RRs as SRV RRs\n    in DNS analyzer. (Seth Hall)\n\n  * Fix DNS SRV responses and a small issue with NBNS queries and\n    label length. (Seth Hall)\n\n     - DNS SRV responses never had the code written to actually\n       generate the dns_SRV_reply event.  Adding this required\n       extending the event a bit to add extra information.  SRV responses\n       now appear in the dns.log file correctly.\n\n     - Fixed an issue where some Microsoft NetBIOS Name Service lookups\n       would exceed the max label length for DNS and cause an incorrect\n       \"DNS_label_too_long\" weird.\n\n2.2-210 | 2014-03-06 22:52:36 -0500\n\n  * Improve SSL logging so that connections are logged even when the\n    ssl_established event is not generated as well as other small SSL\n    fixes. (Bernhard Amann)\n\n2.2-206 | 2014-03-03 16:52:28 -0800\n\n  * HTTP CONNECT proxy support. The HTTP analyzer now supports\n    handling HTTP CONNECT proxies. (Seth Hall)\n\n  * Expanding the HTTP methods used in the DPD signature to detect\n    HTTP traffic. (Seth Hall)\n\n  * Fixing removal of support analyzers. (Robin Sommer)\n\n2.2-199 | 2014-03-03 16:34:20 -0800\n\n  * Allow iterating over bif functions with result type vector of any.\n    This changes the internal type that is used to signal that a\n    vector is unspecified from any to void. Addresses BIT-1144\n    (Bernhard Amann)\n\n2.2-197 | 2014-02-28 15:36:58 -0800\n\n  * Remove test code. (Robin Sommer)\n\n2.2-194 | 2014-02-28 14:50:53 -0800\n\n  * Remove packet sorter. Addresses BIT-700. (Bernhard Amann)\n\n2.2-192 | 2014-02-28 09:46:43 -0800\n\n  * Update Mozilla root bundle. (Bernhard Amann)\n\n2.2-190 | 2014-02-27 07:34:44 -0800\n\n  * Adjust timings of a few leak tests. (Bernhard Amann)\n\n2.2-187 | 2014-02-25 07:24:42 -0800\n\n  * More Google TLS extensions that are being actively used. (Bernhard\n    Amann)\n\n  * Remove unused, and potentially unsafe, function\n    ListVal::IncludedInString. (Bernhard Amann)\n\n2.2-184 | 2014-02-24 07:28:18 -0800\n\n  * New TLS constants from\n    https://tools.ietf.org/html/draft-bmoeller-tls-downgrade-scsv-01.\n    (Bernhard Amann)\n\n2.2-180 | 2014-02-20 17:29:14 -0800\n\n  * New SSL alert descriptions from\n    https://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-04.\n    (Bernhard Amann)\n\n  * Update SQLite. (Bernhard Amann)\n\n2.2-177 | 2014-02-20 17:27:46 -0800\n\n  * Update to libmagic version 5.17. Addresses BIT-1136. (Jon Siwek)\n\n2.2-174 | 2014-02-14 12:07:04 -0800\n\n  * Support for MPLS over VLAN. (Chris Kanich)\n\n2.2-173 | 2014-02-14 10:50:15 -0800\n\n  * Fix misidentification of SOCKS traffic that in particiular seemed\n    to happen a lot with DCE/RPC traffic. (Vlad Grigorescu)\n\n2.2-170 | 2014-02-13 16:42:07 -0800\n\n  * Refactor DNS script's state management to improve performance.\n    (Jon Siwek)\n\n  * Revert \"Expanding the HTTP methods used in the signature to detect\n    HTTP traffic.\" (Robin Sommer)\n\n2.2-167 | 2014-02-12 20:17:39 -0800\n\n  * Increase timeouts of some unit tests. (Jon Siwek)\n\n  * Fix memory leak in modbus analyzer. Would happen if there's a\n    'modbus_read_fifo_queue_response' event handler. (Jon Siwek)\n\n  * Add channel_id TLS extension number. This number is not IANA\n    defined, but we see it being actively used. (Bernhard Amann)\n\n  * Test baseline updates for DNS change. (Robin Sommer)\n\n2.2-158 | 2014-02-09 23:45:39 -0500\n\n  * Change dns.log to include only standard DNS queries. (Jon Siwek)\n\n  * Improve DNS analysis. (Jon Siwek)\n\n    - Fix parsing of empty question sections (when QDCOUNT == 0).  In this\n      case, the DNS parser would extract two 2-byte fields for use in either\n      \"dns_query_reply\" or \"dns_rejected\" events (dependent on value of\n      RCODE) as qclass and qtype parameters.  This is not correct, because\n      such fields don't actually exist in the DNS message format when\n      QDCOUNT is 0.  As a result, these events are no longer raised when\n      there's an empty question section.  Scripts that depends on checking\n      for an empty question section can do that in the \"dns_message\" event.\n\n    - Add a new \"dns_unknown_reply\" event, for when Bro does not know how\n      to fully parse a particular resource record type.  This helps fix a\n      problem in the default DNS scripts where the logic to complete\n      request-reply pair matching doesn't work because it's waiting on more\n      RR events to complete the reply.  i.e. it expects ANCOUNT number of\n      dns_*_reply events and will wait until it gets that many before\n      completing a request-reply pair and logging it to dns.log.  This could\n      cause bogus replies to match a previous request if they happen to\n      share a DNS transaction ID. (Jon Siwek)\n\n    - The previous method of matching queries with replies was still\n      unreliable in cases where the reply contains no answers.  The new code\n      also takes extra measures to avoid pending state growing too large in\n      cases where the condition to match a query with a corresponding reply is\n      never met, but yet DNS messages continue to be exchanged over the same\n      connection 5-tuple (preventing cleanup of the pending state). (Jon Siwek)\n\n  * Updates to httpmonitor and mimestats documentation. (Jeannette Dopheide)\n\n  * Updates to Logs and Cluster documentation (Jeannette Dopheide)\n\n2.2-147 | 2014-02-07 08:06:53 -0800\n\n  * Fix x509-extension test sometimes failing. (Bernhard Amann)\n\n2.2-144 | 2014-02-06 20:31:18 -0800\n\n  * Fixing bug in POP3 analyzer. With certain input the analyzer could\n    end up trying to write to non-writable memory. (Robin Sommer)\n\n2.2-140 | 2014-02-06 17:58:04 -0800\n\n  * Fixing memory leaks in input framework. (Robin Sommer)\n\n  * Add script to detect filtered TCP traces. Addresses BIT-1119. (Jon\n    Siwek)\n\n2.2-137 | 2014-02-04 09:09:55 -0800\n\n  * Minor unified2 script documentation fix. (Jon Siwek)\n\n2.2-135 | 2014-01-31 11:09:36 -0800\n\n  * Added some grammar and spelling corrections to Installation and\n    Quick Start Guide. (Jeannette Dopheide)\n\n2.2-131 | 2014-01-30 16:11:11 -0800\n\n  * Extend file analysis API to allow file ID caching. This allows an\n    analyzer to either provide file IDs associated with some file\n    content or to cache a file ID that was already determined by\n    script-layer logic so that subsequent calls to the file analysis\n    interface can bypass costly detours through script-layer.  This\n    can yield a decent performance improvement for analyzers that are\n    able to take advantage of it and deal with streaming content (like\n    HTTP, which has been adapted accordingly). (Jon Siwek)\n\n2.2-128 | 2014-01-30 15:58:47 -0800\n\n  * Add leak test for Exec module. (Bernhard Amann)\n\n  * Fix file_over_new_connection event to trigger when entire file is\n    missed. (Jon Siwek)\n\n  * Improve TCP connection size reporting for half-open connections.\n    (Jon Siwek)\n\n  * Improve gap reporting in TCP connections that never see data. We\n    no longer accomodate SYN/FIN/RST-filtered traces by not reporting\n    missing data. The behavior can be reverted by redef'ing\n    \"detect_filtered_trace\". (Jon Siwek)\n\n  * Improve TCP FIN retransmission handling. (Jon Siwek)\n\n2.2-120 | 2014-01-28 10:25:23 -0800\n\n  * Fix and extend x509_extension() event, which now actually returns\n    the extension. (Bernhard Amann)\n\n    New event signauture:\n\n        event x509_extension(c: connection, is_orig: bool, cert:X509, extension: X509_extension_info)\n\n2.2-117 | 2014-01-23 14:18:19 -0800\n\n  * Fixing initialization context in anonymous functions. (Robin\n    Sommer)\n\n2.2-115 | 2014-01-22 12:11:18 -0800\n\n  * Add unit tests for new Bro Manual docs. (Jon Siwek)\n\n  * New content for the \"Using Bro\" section of the manual. (Rafael\n    Bonilla/Jon Siwek)\n\n2.2-105 | 2014-01-20 12:16:48 -0800\n\n  * Support GRE tunnel decapsulation, including enhanced GRE headers.\n    GRE tunnels are treated just like IP-in-IP tunnels by parsing past\n    the GRE header in between the delivery and payload IP packets.\n    Addresses BIT-867. (Jon Siwek)\n\n  * Simplify FragReassembler memory management. (Jon Siwek)\n\n2.2-102 | 2014-01-20 12:00:29 -0800\n\n  * Include file information (MIME type and description) into notice\n    emails if available. (Justin Azoff)\n\n2.2-100 | 2014-01-20 11:54:58 -0800\n\n  * Fix caching of recently validated SSL certifcates. (Justin Azoff)\n\n2.2-98 | 2014-01-20 11:50:32 -0800\n\n  * For notice suppresion, instead of storing the entire notice in\n    Notice::suppressing, just store the time the notice should be\n    suppressed until. This saves significant memory but can no longer\n    raise end_suppression, which has been removed. (Justin Azoff)\n\n2.2-96 | 2014-01-20 11:41:07 -0800\n\n  * Integrate libmagic 5.16. Bro now now always relies on\n    builtin/shipped magic library/database. (Jon Siwek)\n\n  * Bro now requires a CMake 2.8.x, but no longer a pre-installed\n    libmagic. (Jon Siwek)\n\n2.2-93 | 2014-01-13 09:16:51 -0800\n\n  * Fixing compile problems with some versions of libc++. Reported by\n    Craig Leres. (Robin Sommer)\n\n2.2-91 | 2014-01-13 01:33:28 -0800\n\n  * Improve GeoIP City database support. When trying to open a city\n    database, it now considers both the \"REV0\" and \"REV1\" versions of\n    the city database instead of just the former. (Jon Siwek)\n\n  * Broxygen init fixes. Addresses BIT-1110. (Jon Siwek)\n\n    - Don't check mtime of bro binary if BRO_DISABLE_BROXYGEN env var set.\n\n    - Fix failure to locate bro binary if invoking from a relative\n      path and '.' isn't in PATH.\n\n  * Fix for packet writing to make it use the global snap length.\n    (Seth Hall)\n\n  * Fix for traffic with TCP segmentation offloading with IP header\n    len field being set to zero. (Seth Hall)\n\n  * Canonify output of a unit test. (Jon Siwek)\n\n  * A set of documentation updates. (Daniel Thayer)\n\n      - Fix typo in Bro 2.2 NEWS on string indexing.\n      - Fix typo in the Quick Start Guide, and clarified the\n        instructions about modifying crontab.\n      - Add/fix documentation for missing/misnamed event parameters.\n      - Fix typos in BIF documentation of hexstr_to_bytestring.\n      - Update the documentation of types and attributes.\n      - Documented the new substring extraction functionality.\n      - Clarified the description of \"&priority\" and \"void\".\n\n2.2-75 | 2013-12-18 08:36:50 -0800\n\n  * Fixing segfault with mismatching set &default in record fields.\n    (Robin Sommer)\n\n2.2-74 | 2013-12-16 08:49:55 -0800\n\n  * Improve warnings emitted from raw/execute input reader. (Jon\n    Siwek)\n\n  * Further improve core.when-interpreter-exceptions unit test. (Jon\n    Siwek)\n\n2.2-72 | 2013-12-12 07:12:47 -0800\n\n  * Improve the core.when-interpreter-exceptions unit test to prevent\n    it from occasionally timing out. (Jon Siwek)\n\n2.2-70 | 2013-12-10 15:02:50 -0800\n\n  * Fix (harmless) uninitialized field in basename/dirname util\n    wrapper. (Jon Siwek)\n\n2.2-68 | 2013-12-09 15:19:37 -0800\n\n  * Several improvements to input framework error handling for more\n    robustness and more helpful error messages. Includes tests for\n    many cases. (Bernhard Amann)\n\n2.2-66 | 2013-12-09 13:54:16 -0800\n\n  * Fix table &default reference counting for record ctor expressions.\n    (Jon Siwek)\n\n  * Close signature files after done parsing. (Jon Siwek)\n\n  * Fix unlikely null ptr deref in broxygen::Manager. (Jon Siwek)\n\n  * FreeBSD build fix addendum: unintended variable shadowing. (Jon\n    Siwek)\n\n  * Fix build on FreeBSD. basename(3)/dirname(3) const-ness may vary\n    w/ platform. (Jon Siwek)\n\n  * Updated software framework to support parsing IE11 user-agent\n    strings. (Seth Hall)\n\n  * Fix the irc_reply event for several server message types. (Seth\n    Hall)\n\n  * Fix memory leak in input framework. If the input framework was\n    used to read event streams and those streams contained records\n    with more than one field, not all elements of the threading Values\n    were cleaned up. Addresses BIT-1103. (Bernhard Amann)\n\n  * Minor Broxygen improvements. Addresses BIT-1098. (Jon Siwek)\n\n2.2-51 | 2013-12-05 07:53:37 -0800\n\n  * Improve a unit test involving 'when' conditionals. (Jon Siwek)\n\n2.2-48 | 2013-12-04 13:45:47 -0800\n\n  * Support omission of string slice low/high indices, BIT-1097.\n\n    Omission of the low index defaults to 0:\n\n        s = \"12345\"; s[:3] == \"123\"\n\n    Omission of the high index defaults to length of the string:\n\n        s = \"12345\"; s[3:] == \"45\" (Jon Siwek)\n\n  * Tweak to SMTP script to adjust for new string slicing behaviour.\n    (Robin Sommer)\n\n  * Test updates. (Robin Sommer)\n\n2.2-44 | 2013-12-04 12:41:51 -0800\n\n  * Fix string slice notation. Addresses BIT-1097. (Jon Siwek)\n\n    Slice ranges were not correctly determined for negative indices\n    and also off by one in general (included one more element at the\n    end of the substring than what actually matched the index range).\n    It's now equivalent to Python slice notation.  Accessing a string\n    at a single index is also the same as Python except that an\n    out-of-range index returns an empty string instead of throwing an\n    expection.\n\n2.2-41 | 2013-12-04 12:40:51 -0800\n\n  * Updating tests. (Robin Sommer)\n\n2.2-40 | 2013-12-04 12:16:38 -0800\n\n  * ssl_client_hello() now receives a vector of ciphers, instead of a\n    set, to preserve their order. (Bernhard Amann)\n\n2.2-38 | 2013-12-04 12:10:54 -0800\n\n  * New script misc/dump-events.bro, along with core support, that\n    dumps events Bro is raising in an easily readable form for\n    debugging. (Robin Sommer)\n\n  * Prettyfing Describe() for record types. If a record type has a\n    name and ODesc is set to short, we now print the name instead of\n    the full field list. (Robin Sommer)\n\n2.2-35 | 2013-12-04 10:10:32 -0800\n\n  * Rework the automated script-reference documentation generation\n    process, broxygen. Addresses BIT-701 and BIT-751. (Jon Siwek)\n\n    Highlights:\n\n        - Remove --doc-scripts and -Z options to toggle documentation\n          mode. The parser is now always instrumented to gather\n          documentation from comments of the form \"##\", \"##!\", or\n          \"##<\".\n\n        - Raw comments are available at runtime through several BIF\n          functions: get_*_comments;\n\n        - Add --broxygen and -X options to toggle generating\n          reST-format documentation output, driven by a config file\n          argument.\n\n        - Add a \"broxygen\" Sphinx extension domain, allowing certain\n          pieces of documentation to be generated on-the-fly via\n          invoking a Bro process. Re-organized/cleaned up the Sphinx\n          source tree in doc/ to use this in some places.\n\n2.2-11 | 2013-12-03 10:56:28 -0800\n\n  * Unit test for broccoli vector support. (Jon Siwek)\n\n  * Changed ordering of Bro type tag enum, which was out of sync. (Jon\n    Siwek)\n\n2.2-9 | 2013-11-18 14:03:21 -0800\n\n  * Update local.bro for Bro >= 2.2. The commented out Notice::policy\n    example didn't work anymore. (Daniel Thayer)\n\n2.2-6 | 2013-11-15 07:05:15 -0800\n\n  * Make \"install-example-configs\" target use DESTDIR. (Jon Siwek)\n\n2.2-5 | 2013-11-11 13:47:54 -0800\n\n  * Fix the irc_reply event for certain server message types. (Seth\n    Hall)\n\n  * Fixed Segmentation fault in SQLite Writer. (Jon Crussell)\n\n2.2 | 2013-11-07 10:25:50 -0800\n\n  * Release 2.2.\n\n  * Removing location information from ssh.log in external tests.\n    (Robin Sommer)\n\n2.2-beta-199 | 2013-11-07 00:36:46 -0800\n\n  * Fixing warnings during doc build. (Robin Sommer)\n\n2.2-beta-198 | 2013-11-06 22:54:30 -0800\n\n  * Update docs and tests for a recent change to detect-MHR.bro\n    (Daniel Thayer)\n\n  * Update tests and baselines for sumstats docs. (Daniel Thayer)\n\n2.2-beta-194 | 2013-11-06 14:39:50 -0500\n\n  * Remove resp_size from the ssh log. Refactor when we write out to\n    the log a bit. Geodata now works reliably. (Vlad Grigorescu)\n\n  * Update VirusTotal URL to work with changes to their website and\n    changed it to a redef. (Vlad Grigorescu)\n\n  * Added a document for the SumStats framework. (Seth Hall)\n\n2.2-beta-184 | 2013-11-03 22:53:42 -0800\n\n  * Remove swig-ruby from required packages section of install doc.\n    (Daniel Thayer)\n\n2.2-beta-182 | 2013-11-01 05:26:05 -0700\n\n  * Adding source and original copyright statement to Mozilla cert\n    list. (Robin Sommer)\n\n  * Canonfying an intel test to not depend on output order. (Robin\n    Sommer)\n\n2.2-beta-177 | 2013-10-30 04:54:54 -0700\n\n  * Fix thread processing/termination conditions. (Jon Siwek)\n\n2.2-beta-175 | 2013-10-29 09:30:09 -0700\n\n  * Return the Dir module to file name tracking instead of inode\n    tracking to avoid missing files that reuse a formerly seen inode.\n    (Seth Hall)\n\n  * Deprecate Broccoli Ruby bindings and no longer build them by\n    default; use --enable-ruby to do so. (Jon Siwek)\n\n2.2-beta-167 | 2013-10-29 06:02:38 -0700\n\n  * Change percent_lost in capture-loss from a string to a double.\n    (Vlad Grigorescu)\n\n  * New version of the threading queue deadlock fix. (Robin Sommer)\n\n  * Updating README with download/git information. (Robin Sommer)\n\n2.2-beta-161 | 2013-10-25 15:48:15 -0700\n\n  * Add curl to list of optional dependencies. It's used by the\n    active-http.bro script. (Daniel Thayer)\n\n  * Update test and baseline for a recent doc test fix. (Daniel\n    Thayer)\n\n2.2-beta-158 | 2013-10-25 15:05:08 -0700\n\n  * Updating README with download/git information. (Robin Sommer)\n\n2.2-beta-157 | 2013-10-25 11:11:17 -0700\n\n  * Extend the documentation of the SQLite reader/writer framework.\n    (Bernhard Amann)\n\n  * Fix inclusion of wrong example file in scripting tutorial.\n    Reported by Michael Auger @LM4K. (Bernhard Amann)\n\n  * Alternative fix for the thrading deadlock issue to avoid potential\n    performance impact. (Bernhard Amann)\n\n2.2-beta-152 | 2013-10-24 18:16:49 -0700\n\n  * Fix for input readers occasionally dead-locking. (Robin Sommer)\n\n2.2-beta-151 | 2013-10-24 16:52:26 -0700\n\n  * Updating submodule(s).\n\n2.2-beta-150 | 2013-10-24 16:32:14 -0700\n\n  * Change temporary ASCII reader workaround for getline() on\n    Mavericks to permanent fix. (Bernhard Amann)\n\n2.2-beta-148 | 2013-10-24 14:34:35 -0700\n\n  * Add gawk to list of optional packages. (Daniel Thayer)\n\n  * Add more script package README files. (Daniel Thayer)\n\n  * Add NEWS about new features of BroControl and upgrade info.\n    (Daniel Thayer)\n\n  * Intel framework notes added to NEWS. (Seth Hall)\n\n  * Temporary OSX Mavericks libc++ issue workaround for getline()\n    problem in ASCII reader. (Bernhard Amann)\n\n  * Change test of identify_data BIF to ignore charset as it may vary\n    with libmagic version. (Jon Siwek)\n\n  * Ensure that the starting BPF filter is logged on clusters. (Seth\n    Hall)\n\n  * Add UDP support to the checksum offload detection script. (Seth\n    Hall)\n\n2.2-beta-133 | 2013-10-23 09:50:16 -0700\n\n  * Fix record coercion tolerance of optional fields. (Jon Siwek)\n\n  * Add NEWS about incompatible local.bro changes, addresses BIT-1047.\n    (Jon Siwek)\n\n  * Fix minor formatting problem in NEWS. (Jon Siwek)\n\n2.2-beta-129 | 2013-10-23 09:47:29 -0700\n\n  * Another batch of documentation fixes and updates. (Daniel Thayer)\n\n2.2-beta-114 | 2013-10-18 14:17:57 -0700\n\n  * Moving the SQLite examples into separate Bro files to turn them\n    into sphinx-btest tests. (Robin Sommer)\n\n2.2-beta-112 | 2013-10-18 13:47:13 -0700\n\n  * A larger chunk of documentation fixes and cleanup. (Daniel Thayer)\n\n    Apart from many smaller improves this includes in particular:\n\n        * Add README files for most Bro frameworks and base/protocols.\n        * Add README files for base/protocols.\n        * Update installation instructions.\n        * Improvements to file analysis docs and conversion to using\n          btest sphinx.\n\n2.2-beta-80 | 2013-10-18 13:18:05 -0700\n\n  * SQLite reader/writer documentation. (Bernhard Amann)\n\n  * Check that the SQLite reader is only used in MANUAL reading mode.\n    (Bernhard Amann)\n\n  * Rename the SQLite writer \"dbname\" configuration option to\n    \"tablename\". (Bernhard Amann)\n\n  * Remove the \"dbname\" configuration option from the SQLite reader as\n    it wasn't used there. (Bernhard Amann)\n\n2.2-beta-73 | 2013-10-14 14:28:25 -0700\n\n  * Fix misc. Coverity-reported issues (leaks, potential null pointer\n    deref, dead code, uninitialized values,\n    time-of-check-time-of-use). (Jon Siwek)\n\n  * Add check for sqlite3 command to tests that require it. (Daniel\n    Thayer)\n\n2.2-beta-68 | 2013-10-14 09:26:09 -0700\n\n  * Add check for curl command to active-http.test. (Daniel Thayer)\n\n2.2-beta-64 | 2013-10-14 09:20:04 -0700\n\n  * Review usage of Reporter::InternalError, addresses BIT-1045.\n\n    Replaced some with InternalWarning or AnalyzerError, the later\n    being a new method which signals the analyzer to not process\n    further input. (Jon Siwek)\n\n  * Add new event for TCP content file write failures:\n    \"contents_file_write_failure\". (Jon Siwek)\n\n2.2-beta-57 | 2013-10-11 17:23:25 -0700\n\n  * Improve Broxygen end-of-sentence detection. (Jon Siwek)\n\n2.2-beta-55 | 2013-10-10 13:36:38 -0700\n\n  * A couple of new TLS extension numbers. (Bernhard Amann)\n\n  * Suport for three more new TLS ciphers. (Bernhard Amann)\n\n  * Removing ICSI notary from default site config. (Robin Sommer)\n\n2.2-beta-51 | 2013-10-07 17:33:56 -0700\n\n  * Polishing the reference and scripting sections of the manual.\n    (Robin Sommer)\n\n  * Fixing the historical CHANGES record. (Robin Sommer)\n\n  * Updating copyright notice. (Robin Sommer)\n\n2.2-beta-38 | 2013-10-02 11:03:29 -0700\n\n  * Fix uninitialized (or unused) fields. (Jon Siwek)\n\n  * Remove logically dead code. (Jon Siwek)\n\n  * Remove dead/unfinished code in unary not expression.  (Jon Siwek)\n\n  * Fix logic for failed DNS TXT lookups. (Jon Siwek)\n\n  * A couple null ptr checks. (Jon Siwek)\n\n  * Improve return value checking and error handling. (Jon Siwek)\n\n  * Remove unused variable assignments. (Jon Siwek)\n\n  * Prevent division/modulo by zero in scripts. (Jon Siwek)\n\n  * Fix unintentional always-false condition. (Jon Siwek)\n\n  * Fix invalidated iterator usage. (Jon Siwek)\n\n  * Fix DNS_Mgr iterator mismatch. (Jon Siwek)\n\n  * Set safe umask when creating script profiler tmp files. (Jon Siwek)\n\n  * Fix nesting/indent level whitespace mismatch. (Jon Siwek)\n\n  * Add checks to avoid improper negative values use. (Jon Siwek)\n\n2.2-beta-18 | 2013-10-02 10:28:17 -0700\n\n  * Add support for further TLS cipher suites. (Bernhard Amann)\n\n2.2-beta-13 | 2013-10-01 11:31:55 -0700\n\n  * Updating bifcl usage message. (Robin Sommer)\n\n  * Fix bifcl getopt() usage. (Jon Siwek)\n\n2.2-beta-8 | 2013-09-28 11:16:29 -0700\n\n  * Fix a \"make doc\" warning. (Daniel Thayer)\n\n2.2-beta-4 | 2013-09-24 13:23:30 -0700\n\n  * Fix for setting REPO in Makefile. (Robin Sommer)\n\n  * Whitespace fix. (Robin Sommer)\n\n  * Removing :doc: roles so that we can render this with docutils\n    directly. (Robin Sommer)\n\n2.2-beta | 2013-09-23 20:57:48 -0700\n\n  * Update 'make dist' target. (Jon Siwek)\n\n2.1-1387 | 2013-09-23 11:54:48 -0700\n\n  * Change submodules to fixed URL. (Jon Siwek)\n\n  * Updating NEWS. (Robin Sommer)\n\n  * Fixing an always false condition. (Robin Sommer)\n\n  * Fix required for compiling with clang 3.3. (Robin Sommer)\n\n2.1-1377 | 2013-09-20 14:38:15 -0700\n\n  * Updates to the scripting introduction. (Scott Runnels)\n\n  * Kill raw input reader's child by process group to reliably clean\n    it up. (Jon Siwek)\n\n2.1-1368 | 2013-09-19 20:07:57 -0700\n\n  * Add more links in the GeoLocation document (Daniel Thayer)\n\n2.1-1364 | 2013-09-19 15:12:08 -0700\n\n  * Add links to Intelligence Framework documentation. (Daniel Thayer)\n\n  * Update Mozilla root CA list. (Bernhard Amann, Jon Siwek)\n\n  * Update documentation of required packages. (Daniel Thayer)\n\n2.1-1359 | 2013-09-18 15:01:50 -0700\n\n  * Make client and server random available on script-level. Addresses\n    BIT-950. (Eric Wustrow)\n\n2.1-1357 | 2013-09-18 14:58:52 -0700\n\n  * Update HLL API and its documentation. (Bernhard Amann)\n\n  * Fix case in HLL where hll_error_margin could be undefined.\n    (Bernhard Amann)\n\n2.1-1352 | 2013-09-18 14:42:28 -0700\n\n  * Fix a number of compiler warnings. (Daniel Thayer)\n\n  * Fix cmake warning about ENABLE_PERFTOOLS not being used. (Daniel\n    Thayer)\n\n2.1-1344 | 2013-09-16 16:20:55 -0500\n\n  * Refactor Analyzer::AddChildAnalyzer and usages. (Jon Siwek)\n\n  * Minor refactor to SSL BinPAC grammer. (Jon Siwek)\n\n  * Minor refactor to Broxygen enum comments. (Jon Siwek)\n\n  * Fix possible (unlikely) use of uninitialized value. (Jon Siwek)\n\n  * Fix/improve dereference-before-null-checks. (Jon Siwek)\n\n  * Fix out-of-bounds memory accesses, and remove a\n    variable-length-array usage. (Jon Siwek)\n\n  * Fix potential mem leak. (Jon Siwek)\n\n  * Fix double-free and deallocator mismatch. (Jon Siwek)\n\n  * Fix another function val reference counting bug. (Jon Siwek)\n\n2.1-1335 | 2013-09-12 16:13:53 -0500\n\n  * Documentation fixes (Daniel Thayer, Jon Siwek)\n\n  * Fix various potential memory leaks. (Jon Siwek)\n\n  * Fix significant memory leak in function unserialization. (Jon Siwek)\n\n  * Fix use-after-free and invalid/mismatch deallocator bugs. (Jon Siwek)\n\n  * Fixed an issue with the HLL_UNIQUE SumStats plugin that caused a reporter error. (Seth Hall)\n\n  * Make the notice $actions field have a default empty set to avoid having to check for it's presence. (Seth Hall)\n\n  * Fix signatures that use identifiers of type table. (Jon Siwek)\n\n  * Fix memory leak if a DNS request fails to be made. (Jon Siwek)\n\n  * Fix memory leak in DNS TXT lookups. (Jon Siwek)\n\n  * Fix raw execution input reader's signal blocking which resulted in lingering processes. (Jon Siwek)\n\n2.1-1306 | 2013-08-31 16:06:05 -0700\n\n  * Reorganized and signifcantly extended documentation. This includes\n    two new chapters contributed by Scott Runnels.\n\n2.1-1216 | 2013-08-31 10:39:40 -0700\n\n\n  * Support for probabilistic set cardinality, using the HyperLogLog\n    algorithm. (Bernhard Amann, Soumya Basu)\n\n    Bro now provides the following BiFs:\n\n        hll_cardinality_init(err: double, confidence: double): opaque of cardinality\n        hll_cardinality_add(handle: opaque of cardinality, elem: any): bool\n        hll_cardinality_merge_into(handle1: opaque of cardinality, handle2: opaque of cardinality): bool\n        hll_cardinality_estimate(handle: opaque of cardinality): double\n        hll_cardinality_copy(handle: opaque of cardinality): opaque of cardinality\n\n2.1-1154 | 2013-08-30 08:27:45 -0700\n\n  * Fix global opaque val segfault. Addresses BIT-1071. (Jon Siwek)\n\n  * Fix malloc/delete mismatch. (Jon Siwek)\n\n  * Fix invalid pointer dereference in AsciiFormatter. (Jon Siwek)\n\n2.1-1150 | 2013-08-29 13:43:01 -0700\n\n  * Fix input framework memory leaks. (Jon Siwek)\n\n  * Fix memory leak in SOCKS analyzer for bad addr types. (Jon Siwek)\n\n  * Fix Bloom filter memory leaks. (Jon Siwek)\n\n2.1-1144 | 2013-08-28 18:51:06 -0700\n\n  * Add bits_per_uid unit test. Addresses BIT-1016. (Jon Siwek)\n\n  * UID optimizations. Addresses BIT-1016. (Jon Siwek)\n\n  * Added a $unique_max field to Reducers for the SumStats::UNIQUE\n    calculation, and using the new option in scan.bro and the FTP\n    bruteforce detection. (Seth Hall)\n\n2.1-1137 | 2013-08-27 13:26:44 -0700\n\n  * Add BiF hexstr_to_bytestring() that does exactly the opposite of\n    bytestring_to_hexstr(). (Bernhard Amann)\n\n2.1-1135 | 2013-08-27 12:16:26 -0700\n\n  * More SumStats fixes. (Seth Hall)\n\n  * Increase UIDs to 96 bits.  (Jon Siwek)\n\n    - The bit-length is adjustable via redef'ing bits_per_uid.\n\n    - Prefix 'C' is added to connection UIDS (including IP tunnels)\n      and 'F' to files.\n\n    Addresses BIT-1016.\n\n2.1-1128 | 2013-08-24 10:27:29 -0700\n\n  * Remove code relict in input framework. (Jon Siwek)\n\n  * Fix documentation for mkdir BIF. (Jon Siwek)\n\n  * File extraction tweaks. (Jon Siwek)\n\n    - Default extraction limit of 100MB now provided via a tuning\n      script loaded in local.bro so that command-line Bro is unlimited\n      by default.\n\n    - Extraction directory is now created on request of file\n      extraction rather than unconditionally in bro_init(). (Jon\n      Siwek)\n\n2.1-1124 | 2013-08-23 16:33:52 -0700\n\n  * Fixed a number of object bugs DNP3 analyzer. (Hui Lin)\n\n2.1-1122 | 2013-08-22 16:52:27 -0700\n\n  * Use macros to create file analyzer plugin classes. (Jon Siwek)\n\n  * Add options to limit extracted file sizes w/ 100MB default. (Jon\n    Siwek)\n\n2.1-1117 | 2013-08-22 08:44:12 -0700\n\n  * A number of input framework fixes and corresponding test stability\n    improvements. (Jon Siwek)\n\n  * Make memory leak tests able to time out.  (Jon Siwek)\n\n  * Fix a compiler warning regarding strncat misuse. (Jon Siwek)\n\n2.1-1103 | 2013-08-21 19:11:34 -0400\n\n  * A number of sumstats fixes. (Seth Hall, Vlad Grigorescu)\n\n  * Fix memory leak w/ when statements. Addresses BIT-1058. (Jon\n    Siwek)\n\n  * Switching to relative submodule paths (Robin Sommer)\n\n2.1-1089 | 2013-08-19 11:25:11 -0700\n\n  * Fix bloom filters' dependence on size_t. (Jon Siwek, Matthias\n    Vallentin).\n\n2.1-1081 | 2013-08-19 11:19:33 -0700\n\n  * New BiF levenshtein_distance() to compute the Levenshtein distance\n    between two strings. (Anthony Kasza)\n\n2.1-1078 | 2013-08-19 09:29:30 -0700\n\n  * Moving sqlite code into new external 3rdparty submodule. (Bernhard\n    Amann)\n\n2.1-1074 | 2013-08-14 10:29:54 -0700\n\n  * Fix timer type enum and timer name array mismatch. (Jon Siwek)\n\n2.1-1072 | 2013-08-14 10:28:51 -0700\n\n  * Adding the unified2 analyzer that reads unified2 files from disk,\n    turning them into events. (Seth Hall)\n\n  * Fixing intel framework tests. (Seth Hall)\n\n2.1-1059 | 2013-08-13 23:52:41 -0400\n\n  * Add file name support to intel framework. (Seth Hall)\n\n  * Add file support to intel framework and slightly restructure\n    intel http handling. (Seth Hall)\n\n2.1-1052 | 2013-08-12 14:38:14 -0700\n\n  * Fixing bug in DNP3 analyzer flagged by compiler warning. (Robin\n    Sommer)\n\n2.1-1050 | 2013-08-12 11:37:44 -0700\n\n  * Experimental DNP3 analyzer. This includes only very basic\n    script-level support at the moment, but quite a number of events\n    are provided. (Hui Lin, Robin Sommer)\n\n2.1-1041 | 2013-08-09 15:32:22 -0700\n\n  * Update coverage baselines for canonical load order of scripts.\n    (Jon Siwek)\n\n2.1-1039 | 2013-08-09 15:30:15 -0700\n\n  * Fix mem leak in DHCP analyzer. (Jon Siwek)\n\n  * Fix a unit test outdated by recent sumstats changes. (Jon Siwek)\n\n2.1-1036 | 2013-08-05 17:29:11 -0400\n\n  * Fix the SSL infinite loop I just created. (Seth Hall)\n\n2.1-1035 | 2013-08-05 16:44:50 -0400\n\n  * Change to SSL log delay to cause the log to write even if delay times out. (Seth Hall)\n\n2.1-1034 | 2013-08-03 20:27:43 -0700\n\n  * A set of DHCP extensions. (Vlad Grigorescu)\n\n     - Leases are logged to dhcp.log as they are seen.\n     - scripts/policy/protocols/dhcp/known-devices-and-hostnames.bro\n     - Added DPD sig.\n\n2.1-1027 | 2013-08-03 01:57:37 -0400\n\n  * Fix a major memory issue in the SumStats framework.\n\n2.1-1026 | 2013-08-02 22:35:09 -0400\n\n  * Fix the SumStats top-k plugin and test. (Seth Hall)\n\n  * Rework of SumStats API to reduce high instantaneous memory\n    use on clusters. (Seth Hall)\n\n  * Large update for the SumStats framework.\n\n     - On-demand access to sumstats results through \"return from\"\n       functions named SumStats::request and Sumstats::request_key.\n       Both functions are tested in standalone and clustered modes.\n\n     - $name field has returned to SumStats which simplifies cluster\n       code and makes the on-demand access stuff possible.\n\n     - Clustered results can only be collected for 1 minute from their\n       time of creation now instead of time of last read.\n\n     - Thresholds use doubles instead of counts everywhere now.\n\n     - Calculation dependency resolution occurs at start up time now\n       instead of doing it at observation time which provide a minor\n       cpu performance improvement.  A new plugin registration mechanism\n       was created to support this change.\n\n     - AppStats now has a minimal doc string and is broken into hook-based\n       plugins.\n\n     - AppStats and traceroute detection added to local.bro (Seth Hall)\n\n2.1-1009 | 2013-08-02 17:19:08 -0700\n\n  * A number of exec module and raw input reader fixes. (Jon Siwek)\n\n2.1-1007 | 2013-08-01 15:41:54 -0700\n\n  * More function documentation. (Bernhard Amann)\n\n2.1-1004 | 2013-08-01 14:37:43 -0700\n\n  * Adding a probabilistic data structure for computing \"top k\"\n    elements. (Bernhard Amann)\n\n    The corresponding functions are:\n\n        topk_init(size: count): opaque of topk\n        topk_add(handle: opaque of topk, value: any)\n        topk_get_top(handle: opaque of topk, k: count)\n        topk_count(handle: opaque of topk, value: any): count\n        topk_epsilon(handle: opaque of topk, value: any): count\n        topk_size(handle: opaque of topk): count\n        topk_sum(handle: opaque of topk): count\n        topk_merge(handle1: opaque of topk, handle2: opaque of topk)\n        topk_merge_prune(handle1: opaque of topk, handle2: opaque of topk)\n\n2.1-971 | 2013-08-01 13:28:32 -0700\n\n  * Fix some build errors. (Jon Siwek)\n\n  * Internal refactoring of how plugin components are tagged/managed.\n    (Jon Siwek)\n\n  * Fix various documentation, mostly related to file analysis. (Jon\n    Siwek)\n\n  * Changing the Bloom filter hashing so that it's independent of\n    CompositeHash. (Robin Sommer)\n\n2.1-951 | 2013-08-01 11:19:23 -0400\n\n  * Small fix to deal with a bug in the SSL log delay mechanism.\n\n2.1-948 | 2013-07-31 20:08:28 -0700\n\n  * Fix segfault caused by merging an empty bloom-filter with a\n    bloom-filter already containing values. (Bernhard Amann)\n\n2.1-945 | 2013-07-30 10:05:10 -0700\n\n  * Make hashers serializable. (Matthias Vallentin)\n\n  * Add docs and use default value for hasher names. (Matthias\n    Vallentin)\n\n2.1-939 | 2013-07-29 15:42:38 -0700\n\n  * Added Exec, Dir, and ActiveHTTP modules. (Seth Hall)\n\n    base/utils/exec.bro provides a module to start external processes\n    asynchronously and retrieve their output on termination.\n    base/utils/dir.bro uses it to monitor a directory for changes, and\n    base/utils/active-http.bro for providing an interface for querying\n    remote web servers.\n\n2.1-930 | 2013-07-29 15:06:07 -0700\n\n  * Major file analysis overhaul in naming and appearance, along with\n    fixes and test updates. (Seth Hall and Jon Siwek)\n\n    Includes:\n\n    * Added protocol description functions that provide a super\n      compressed log representation. (Seth Hall)\n\n    * Added mime types to http.log (Seth Hall)\n\n    * Add jar files to the default MHR lookups. (Seth Hall)\n\n    * Adding CAB files for MHR checking. (Seth Hall)\n\n    * Improve malware hash registry script.\n\n        - Include a link to a virustotal search in the notice sub message field.\n        - Give all information returned from Team Cymru in the notice message.\n        - Add more file types to match on to the default set.\n\n    * Make the custom libmagic database a git submodule.\n\n    * Add an is_orig parameter to file_over_new_connection event.\n\n    * Recorrected the module name to Files.\n\n    * Added Files::analyzer_name to get a more readable name for a\n      file analyzer.\n\n    * Improved and just overall better handled multipart mime\n      transfers in HTTP and SMTP.  HTTP now has orig_fuids and\n      resp_fuids log fields since multiple \"files\" can be transferred\n      with multipart mime in a single request/response pair.  SMTP has\n      an fuids field which has file unique IDs for all parts\n      transferred. FTP and IRC have a log field named fuid added\n      because only a single file can be transferred per irc and ftp\n      log line.\n\n2.1-895 | 2013-07-29 14:07:35 -0700\n\n  * Adding a test for a DNSKEY RR. (Robin Sommer)\n\n2.1-894 | 2013-07-29 16:44:41 -0400\n\n  * Updates for the Intel Framework. (Seth Hall)\n\n      - policy/frameworks/intel/seen is the new location for the\n        scripts that push data into the intel framework for checking.\n\n      - The new policy/frameworks/intel/do_notice script adds an\n        example mechanism for data driven notices.\n\n      - Remove the Intel insertion after heuristically detecting SSH\n        bruteforcing.\n\n      - Intel importing format has changed (refer to docs).\n\n      - All string matching is now case insensitive.\n\n      - SMTP intel script has been updated to extract email\n        addresses correctly.\n\n      - Small fix sneaking into the smtp base script to actually\n        extract individual email addresses in the To: field\n        correctly.\n\n\n2.1-888 | 2013-07-25 12:02:41 -0700\n\n  * Protection about broken traces with empty pcap headers. (Matt\n    Thompson)\n\n2.1-887 | 2013-07-25 11:33:27 -0700\n\n  * Support for Bloom filter. (Matthias Vallentin)\n\n    Bro now provides the following BiFs:\n\n        bloomfilter_basic_init(fp: double, capacity: count, name: string &default=\"\"): opaque of bloomfilter\n        bloomfilter_counting_init(k: count, cells: count, max: count, name: string &default=\"\"): opaque of bloomfilter\n        bloomfilter_add(bf: opaque of bloomfilter, x: any)\n        bloomfilter_lookup(bf: opaque of bloomfilter, x: any): count\n        bloomfilter_merge(bf1: opaque of bloomfilter, bf2: opaque of bloomfilter): opaque of bloomfilter\n        bloomfilter_clear(bf: opaque of bloomfilter)\n\n    Note that currently Bloom filters from separate Bro instances\n    (e.g., from different cluster nodes) cannot be merged.\n\n2.1-826 | 2013-07-25 10:12:26 -0700\n\n  * bif files declared with bif_target() are now automatically\n    compiled in. No more manual includes to pull them in. (Robin\n    Sommer)\n\n  * Covenience make target in testing/btest to update the three\n    coverage tests that usually need tweaking when scripts get\n    added/removed. (Robin Sommer)\n\n2.1-824 | 2013-07-22 14:25:14 -0400\n\n  * Fixed a scriptland state issue that manifested especially badly on proxies. (Seth Hall)\n\n  * Another test fix. (Robin Sommer)\n\n  * Canonyfying the output of core.print-bpf-filters. (Robin Sommer)\n\n2.1-820 | 2013-07-18 12:30:04 -0700\n\n  * Extending external canonifier to remove fractional values from\n    capture_loss.log. (Robin Sommer)\n\n  * Canonifying internal order for plugins and their components to\n    make it deterministic. (Robin Sommer)\n\n  * Small raw reader tweaks that got left our earlier. (Robin Sommer)\n\n2.1-814 | 2013-07-15 18:18:20 -0700\n\n  * Fixing raw reader crash when accessing nonexistant file, and\n    memory leak when reading from file. Addresses #1038. (Bernhard\n    Amann)\n\n2.1-811 | 2013-07-14 08:01:54 -0700\n\n  * Bump sqlite to 3.7.17. (Bernhard Amann)\n\n  * Small test fixes. (Seth Hall)\n\n  * Fix a bug where the same analyzer tag was reused for two different\n    analyzers. (Seth Hall)\n\n  * Moved DPD signatures into script specific directories. Left out\n    the BitTorrent signatures pending further updates to that\n    analyzer. (Seth Hall)\n\n2.1-802 | 2013-07-10 10:55:14 -0700\n\n  * Const adjustment for methods. (Jon Siwek)\n\n2.1-798 | 2013-07-08 13:05:37 -0700\n\n  * Rewrite of the packet filter framework. (Seth Hall)\n\n    This includes:\n\n    - Plugin interface for adding filtering mechanisms.\n\n    - Integrated the packet filter framework with the analyzer\n      framework to retrieve well-known ports from there.\n\n    - Support for BPF-based load balancing (IPv4 and IPv6).  This will\n      tie in with upcoming BroControl support for configuring this.\n\n    - Support for BPF-based connection sampling.\n\n    - Support for \"shunting\" traffic with BPF filters.\n\n    - Replaced PacketFilter::all_packets with\n      PacketFilter::enable_auto_protocol_capture_filters.\n\n2.1-784 | 2013-07-04 22:28:48 -0400\n\n  * Add a call to lookup_connection in SSH scripts to update connval. (Seth Hall)\n\n  * Updating submodule(s). (Robin Sommer)\n\n2.1-782 | 2013-07-03 17:00:39 -0700\n\n  * Remove the SSL log queueing mechanism that was included with the\n    log delay mechanism. (Seth Hall)\n\n2.1-780 | 2013-07-03 16:46:26 -0700\n\n  * Rewrite of the RAW input reader for improved robustness and new\n    features. (Bernhard Amann) This includes:\n\n        - Send \"end_of_data\" event for all kind of streams.\n        - Send \"process_finished\" event with exit code of child\n          process at process termination.\n        - Expose name of input stream to readers.\n        - Better error handling.\n        - New \"force_kill\" option which SIGKILLs processes on reader termination.\n        - Supports reading from stdout and stderr simultaneously.\n        - Support sending data to stdin of child process.\n        - Streaming reads from external commands work without blocking.\n\n2.1-762 | 2013-07-03 16:33:22 -0700\n\n  * Fix to correct support for TLS 1.2. Addresses #1020. (Seth Hall,\n    with help from Rafal Lesniak).\n\n2.1-760 | 2013-07-03 16:31:36 -0700\n\n  * Teach broxygen to generate protocol analyzer plugin reference.\n    (Jon Siwek)\n\n  * Adding 'const' to a number of C++ methods. (Jon Siwek)\n\n2.1-757 | 2013-07-03 16:28:10 -0700\n\n  * Fix redef of table index from clearing table.\n\n    `redef foo[\"x\"] = 1` now acts like `redef foo += { [\"x\"] = 1 }`\n    instead of `redef foo = { [\"x\"] = 1 }`.\n\n    Addresses #1013. (Jon Siwek)\n\n\n2.1-755 | 2013-07-03 16:22:43 -0700\n\n  * Add a general file analysis overview/how-to document. (Jon Siwek)\n\n  * Improve file analysis doxygen comments. (Jon Siwek)\n\n  * Improve tracking of HTTP file extraction. http.log now has files\n    taken from request and response bodies in different fields for\n    each, and can now track multiple files per body. That is, the\n    \"extraction_file\" field is now \"extracted_request_files\" and\n    \"extracted_response_files\". Addresses #988. (Jon Siwek)\n\n  * Fix HTTP multipart body file analysis. Each part now gets assigned\n    a different file handle/id. (Jon Siwek)\n\n  * Remove logging of analyzers field of FileAnalysis::Info. (Jon\n    Siwek)\n\n  * Remove extraction counter in default file extraction scripts. (Jon\n    Siwek)\n\n  * Remove FileAnalysis::postpone_timeout.\n    FileAnalysis::set_timeout_interval can now perform same function.\n    (Jon Siwek)\n\n  * Make default get_file_handle handlers &priority=5 so they're\n    easier to override. (Jon Siwek)\n\n  * Add input interface to forward data for file analysis. The new\n    Input::add_analysis function is used to automatically forward\n    input data on to the file analysis framework. (Jon Siwek)\n\n  * File analysis framework interface simplifications. (Jon Siwek)\n\n    - Remove script-layer data input interface (will be managed directly\n      by input framework later).\n\n    - Only track files internally by file id hash.  Chance of collision\n      too small to justify also tracking unique file string.\n\n\n2.1-741 | 2013-06-07 17:28:50 -0700\n\n  * Fixing typo that could cause an assertion to falsely trigger.\n    (Robin Sommer)\n\n2.1-740 | 2013-06-07 16:37:32 -0700\n\n  * Fix for CMake 2.6.x. (Robin Sommer)\n\n2.1-738 | 2013-06-07 08:38:13 -0700\n\n  * Remove invalid free on non-allocated pointer in hash function\n    object. Addresses #1018. (Matthias Vallentin)\n\n2.1-736 | 2013-06-06 10:05:20 -0700\n\n  * New \"magic constants\" @DIR and @FILENAME that expand to the\n    directory path of the current script and just the script file name\n    without path, respectively. (Jon Siwek)\n\n2.1-731 | 2013-06-04 21:19:08 -0700\n\n  * Reorginization of internal protocol analyzer code. We're moving\n    them to a modularized structure, based on a plugin model. Along\n    with this change comes generic plugin infrastructure that we'll\n    later extend to other Bro component as well. For now all plugins\n    are compiled in statically, but in the future we plan to also\n    enable dynamic loading at run time. (Robin Sommer)\n\n  * Ignoring file ids in external tests. (Robin Sommer)\n\n2.1-675 | 2013-06-02 20:03:19 -0700\n\n  * Fix a compiler warning. (Robin Sommer)\n\n  * Allow named vector/set/table/record constructors. Addresses #983.\n    (Jon Siwek)\n\n  * Adding Makefile target test-all that also runs the BroControl test\n    suite.  (Robin Sommer)\n\n2.1-664 | 2013-05-28 21:37:46 -0700\n\n  * Dangling pointer fix. Addresses #1004. (Jon Siwek)\n\n2.1-659 | 2013-05-24 17:24:18 -0700\n\n  * Fix broken/missing documentation. (Jon Siwek)\n\n  * Fixing test that would fail without ES/curl support. (Robin\n    Sommer)\n\n2.1-656 | 2013-05-17 15:58:07 -0700\n\n  * Fix mutex lock problem for writers. (Bernhard Amann)\n\n2.1-654 | 2013-05-17 13:49:52 -0700\n\n  * Tweaks to sqlite3 configuration to address threading issues.\n    (Bernhard Amann)\n\n2.1-651 | 2013-05-17 13:37:16 -0700\n\n  * Fix uninitialized DPM member. (Jon Siwek)\n\n  * Fix issue with transaction ID reuse in a single DNS connection. (Seth Hall)\n\n  * New function added to the queue.bro script to support peeking at\n    the new gettable item in the queue without removing it. (Seth Hall)\n\n2.1-647 | 2013-05-17 07:47:14 -0700\n\n  * Fixing Broxygen generation to have BROMAGIC set. (Robin Sommer)\n\n  * Fix for 'fchmod undeclared here' on FreeBSD. (Robin Sommer)\n\n  * CMake policy fix to avoid errors with older versions. (Robin\n    Sommer)\n\n2.1-641 | 2013-05-15 18:15:09 -0700\n\n  * Test update. (Robin Sommer)\n\n2.1-640 | 2013-05-15 17:24:09 -0700\n\n  * Support for cleaning up threads that have terminated. (Bernhard\n    Amann and Robin Sommer). Includes:\n\n      - Both logging and input frameworks now clean up threads once\n        they aren't further needed anymnore.\n\n      - New function Log::remove_stream() that removes a logging\n        stream, stopping all writer threads that are associated with\n        it. Note, however, that removing a *filter* from a stream\n        still doesn't clean up any threads. The problem is that\n        because of the output paths potentially being created\n        dynamically it's unclear if the writer thread will still be\n        needed in the future.\n\n2.1-626 | 2013-05-15 16:09:31 -0700\n\n  * Add \"reservoir\" sampler for SumStats framework. This maintains\n    a set of N uniquely distributed random samples. (Bernhard Amann)\n\n2.1-619 | 2013-05-15 16:01:42 -0700\n\n  * SQLite reader and writer combo. This allows to read/write\n    persistent data from on disk SQLite databases. The current\n    interface is quite low-level, we'll add higher-level abstractions\n    in the future. (Bernhard Amann)\n\n2.1-576 | 2013-05-15 14:29:09 -0700\n\n  * Initial version of new file analysis framework. This moves most of\n    the processing of file content from script-land into the core,\n    where it belongs. Much of this is an internal change, and at this\n    point the new code has essentially feature-equality with the old\n    one. More script-level changes to come. (Jon Siwek)\n\n2.1-502 | 2013-05-10 19:29:37 -0700\n\n  * Allow default function/hook/event parameters. Addresses #972. (Jon\n    Siwek)\n\n  * Change the endianness parameter of bytestring_to_count() BIF to\n    default to false (big endian). (Jon Siwek)\n\n2.1-500 | 2013-05-10 19:22:24 -0700\n\n  * Fix to prevent merge-hook of SumStat's unique plugin from damaging\n    source data. (Bernhard Amann)\n\n2.1-498 | 2013-05-03 17:44:08 -0700\n\n  * Table lookups return copy of non-const &default vals. This\n    prevents unintentional modifications to the &default value itself.\n    Addresses #981.  (Jon Siwek)\n\n2.1-496 | 2013-05-03 15:54:47 -0700\n\n  * Fix memory leak and unnecessary allocations in OpaqueVal.\n    Addresses #986. (Matthias Vallentin)\n\n2.1-492 | 2013-05-02 12:46:26 -0700\n\n  * Work-around for sumstats framework not propagating updates after\n    intermediate check in cluster environments. (Bernhard Amann)\n\n  * Always apply tcp_connection_attempt. Before this change it was\n    only applied when a connection_attempt() event handler was\n    defined. (Robin Sommer)\n\n  * Fixing coverage.bare-mode-errors test. (Robin Sommer)\n\n2.1-487 | 2013-05-01 18:03:22 -0700\n\n  * Always apply tcp_connection_attempt timer, even if no\n    connection_attempt() event handler is defined. (Robin Sommer)\n\n2.1-486 | 2013-05-01 15:28:45 -0700\n\n  * New framework for computing summary statistics in\n    base/framework/sumstats. This replaces the metrics frameworks, and\n    comes with a number of applications build on top, see NEWS. More\n    documentation to follow. (Seth Hall)\n\n2.1-397 | 2013-04-29 21:19:00 -0700\n\n  * Fixing memory leaks in CompHash implementation. Addresses #987.\n    (Robin Sommer)\n\n2.1-394 | 2013-04-27 15:02:31 -0700\n\n  * Fixed a bug in the vulnerable software script and added a test.\n    (Seth Hall)\n\n  * Fix schedule statements used outside event handlers. Addresses\n    #974. (Jon Siwek)\n\n  * Fix record coercion for default inner record fields. Addresses\n    #973. (Jon Siwek)\n\n  * Add bytestring_to_count function to bro.bif. Addresses #968. (Yun\n    Zheng Hu)\n\n2.1-386 | 2013-03-22 12:41:50 -0700\n\n  * Added reverse() function to strings.bif. (Yun Zheng Hu)\n\n2.1-384 | 2013-03-22 12:10:14 -0700\n\n  * Fix record constructors in table initializer indices.  Addresses\n    #660. (Jon Siwek)\n\n2.1-382 | 2013-03-22 12:01:34 -0700\n\n  * Add support for 802.1ah (Q-in-Q). Addresses #641. (Seth Hall)\n\n2.1-380 | 2013-03-18 12:18:10 -0700\n\n  * Fix gcc compile warnings in base64 encoder and benchmark reader.\n    (Bernhard Amann)\n\n2.1-377 | 2013-03-17 17:36:09 -0700\n\n  * Fixing potential leak in DNS error case. (Vlad Grigorescu)\n\n2.1-375 | 2013-03-17 13:14:26 -0700\n\n  * Add base64 encoding functionality, including new BiFs\n\tencode_base64() and encode_base64_custom(). (Bernhard Amann)\n\n  * Replace call to external \"openssl\" in extract-certs-pem.bro with\n\tthat encode_base64(). (Bernhard Amann)\n\n  * Adding a test for extract-certs-pem.pem. (Robin Sommer)\n\n  * Renaming Base64Decoder to Base64Converter. (Robin Sommer)\n\n2.1-366 | 2013-03-17 12:35:59 -0700\n\n  * Correctly handle DNS lookups for software version ranges. (Seth\n    Hall)\n\n  * Improvements to vulnerable software detection. (Seth Hall)\n\n     - Add a DNS based updating method.  This needs to be tested\n       still.\n\n     - Vulnerable version ranges are used now instead of only single\n       versions.  This can deal with software with multiple stable\n       major versions.\n\n  * Update software version parsing and comparison to account for a\n    third numeric subversion. Also, $addl is now compared numerically\n    if the value is actually numeric. (Seth Hall)\n\n2.1-361 | 2013-03-13 07:18:22 -0700\n\n  * Add check for truncated link frames. Addresses #962. (Jacob\n    Baines)\n\n  * Fix large memory allocation in IP fragment reassembly. Addresses\n    #961. (Jacob Baines)\n\n2.1-357 | 2013-03-08 09:18:35 -0800\n\n  * Fix race-condition in table-event test. (Bernhard Amann)\n\n  * s/bro-ids.org/bro.org/g. (Robin Sommer)\n\n2.1-353 | 2013-03-07 13:31:37 -0800\n\n  * Fix function type-equivalence requiring same parameter names.\n    Addresses #957. (Jon Siwek)\n\n2.1-351 | 2013-03-07 13:27:29 -0800\n\n  * Fix new/delete mismatch. Addresses #958. (Jacob Baines)\n\n  * Fix compiler warnings. (Jon Siwek)\n\n2.1-347 | 2013-03-06 16:48:44 -0800\n\n  * Remove unused parameter from vector assignment method. (Bernhard Amann)\n\n  * Remove the byte_len() and length() bifs. (Bernhard Amann)\n\n2.1-342 | 2013-03-06 15:42:52 -0800\n\n  * Moved the Notice::notice event and Notice::policy table to both be\n    hooks. See documentation and NEWS for information. (Seth Hall).\n\n2.1-338 | 2013-03-06 15:10:43 -0800\n\n  * Fix init of local sets/vectors via curly brace initializer lists.\n    (Jon Siwek)\n\n2.1-336 | 2013-03-06 15:08:06 -0800\n\n  * Fix memory leaks resulting from 'when' and 'return when'\n    statements. Addresses #946. (Jon Siwek)\n\n  * Fix three bugs with 'when' and 'return when' statements. Addresses\n    #946. (Jon Siwek)\n\n2.1-333 | 2013-03-06 14:59:47 -0800\n\n  * Add parsing for GTPv1 extension headers and control messages.  (Jon Siwek)\n\n    This includes:\n\n      - A new generic gtpv1_message() event generated for any GTP\n        message type.\n\n      - Specific events for the create/update/delete PDP context\n        request/response messages.\n\n    Addresses #934.\n\n2.1-331 | 2013-03-06 14:54:33 -0800\n\n  * Fix possible null pointer dereference in identify_data BIF. Also\n    centralized libmagic calls for consistent error handling/output.\n    (Jon Siwek)\n\n  * Fix build on OpenBSD 5.2. (Jon Siwek)\n\n2.1-328 | 2013-02-05 01:34:29 -0500\n\n  * New script to query the ICSI Certificate Notary\n    (http://notary.icsi.berkeley.edu/) over DNS and add information\n    to the SSL log at runtime. (Matthias Vallentin)\n\n  * Add delayed logging to SSL base scripts. (Matthias Vallentin)\n\n2.1-319 | 2013-02-04 09:45:34 -0800\n\n  * Update input tests to use exit_only_after_terminate. (Bernhard\n    Amann)\n\n  * New option exit_only_after_terminate to prevent Bro from exiting.\n    If set, the main loop won't terminate before somebody calls\n    terminate(). (Robin Sommer)\n\n2.1-311 | 2013-02-01 08:03:01 -0800\n\n  * Updating submodule(s).\n\n2.1-310 | 2013-01-30 20:09:27 -0800\n\n  * Add an error for record coercions that would orphan a field. (Jon\n    Siwek)\n\n  * Fixing several scripts where a field in an inlined record was\n    never removed after a code refactor. (Jon Siwek)\n\n2.1-307 | 2013-01-25 13:50:57 -0800\n\n  * Fix runaway reference counting bug in record coercion. (Jon Siwek)\n\n  * Fix memory leak in some reporter messaging cases. (Jon Siwek)\n\n2.1-304 | 2013-01-23 19:43:27 -0800\n\n  * Making a test portable. (Robin Sommer)\n\n2.1-302 | 2013-01-23 16:17:29 -0800\n\n  * Refactoring ASCII formatting/parsing from loggers/readers into a\n    separate AsciiFormatter class. (Bernhard Amann)\n\n  * Fix uninitialized locals in event/hook handlers from having a\n    value. Addresses #932. (Jon Siwek)\n\n  * Add a null value check in CompositeHash::ComputeHash. Addresses\n    #930. (Jon Siwek)\n\n  * Change reporter messages to more reliably print to stderr.\n    Addressed #930 (and revisits #836). (Jon Siwek)\n\n  * Changing test=suite's btest call to use \"-j\" instead of \"-j 5\".\n    (Robin Sommer)\n\n  * Require \"case\" blocks to end with either \"break\", \"return\", or a\n    new \"fallthrough\" statement that passes control on to the\n    subsequent case. This gives us the best mix of safety,\n    readability, and flexibility. Addresses #754. (Jon Siwek)\n\n2.1-279 | 2013-01-18 17:18:22 -0800\n\n  * Revert \"Trick for parallelizing input framework unit tests.\" The\n    old way of doing the tests seems more reliable for now. (Jon\n    Siwek)\n\n  * Fixing variable size issues with http response code in\n    ElasticSearch writer. (Gilbert Clark)\n\n  * Removing unused class member. (Robin Sommer)\n\n  * Add opaque type-ignoring for the accept_unsupported_types input\n    framework option. (Bernhard Amann)\n\n2.1-271 | 2013-01-08 10:18:57 -0800\n\n  * Change substring index notation to use a colon.  String slice\n    notation is now written as `s[1:2]`. Addresses #422. (Jon Siwek)\n\n2.1-268 | 2013-01-07 09:43:44 -0800\n\n  * Fix memory leak in OpaqueType::DoUnserialize. (Jon Siwek)\n\n2.1-265 | 2012-12-20 17:38:42 -0800\n\n  * Add array-style index accessor for strings.  Addresses #422. (Jon\n    Siwek)\n\n    The index expression can take up to two indices for the start and\n    end index of the substring to return (e.g. \"mystring[1,3]\").\n    Negative indices are allowed, with -1 representing the last\n    character in the string.  The indexing is not cyclic -- if the\n    starting index is >= the length of the string an empty string is\n    returned, and if the ending index is >= the length of the string\n    then it's interpreted as the last index of the string.  Assigning\n    to substrings accessed like this isn't allowed.\n\n2.1-263 | 2012-12-20 16:22:09 -0800\n\n  * Bro's language now has a new set of types \"opaque of X\". (Matthias\n    Vallentin)\n\n    Opaque values can be passed around like other values but they can\n    only be manipulated with BiF functions, not with other operators.\n    Currently, the following opaque types are supported:\n\n        - opaque of md5\n        - opaque of sha1\n        - opaque of sha256\n        - opaquey of entropy.\n\n    They go along with the corrsponding BiF functions md5_*, sha1_*,\n    sha256_*, and entropy_*, respectively. Note that these functions\n    have changed their signatures to work with opaques types rather\n    than global state as it was before.\n\n2.1-240 | 2012-12-20 15:21:07 -0800\n\n  * Improve error for invalid use of types as values. Addresses #923.\n    (Jon Siwek)\n\n2.1-238 | 2012-12-20 15:11:25 -0800\n\n  * Finish implementation of script-layer switch statement. Addresses\n    #754. (Jon Siwek)\n\n    They behave like C-style switches except case labels can be\n    comprised of multiple literal constants delimited by commas.  Only\n    atomic types are allowed for now.  Case label bodies that don't\n    execute a \"return\" or \"break\" statement will fall through to\n    subsequent cases.  A default case label is allowed.\n\n  * Fix a case where c$resp$size is misrepresented.  Addresses #730.\n    (Jon Siwek)\n\n2.1-234 | 2012-12-20 12:12:19 -0800\n\n  * Fix return value of hook calls that have no handlers. For this\n    case, the return value is always true. (Jon Siwek)\n\n  * Fix to_port() BIF for port strings with a port number of zero.\n    (Jon Siwek)\n\n2.1-231 | 2012-12-14 14:51:35 -0800\n\n  * Make const variables actually constant. Both local and global\n    variables declared with \"const\" could be modified, but now\n    expressions that would modify them generate an error message at\n    parse-time. Addresses #922. (Jon Siwek)\n\n2.1-229 | 2012-12-14 14:46:12 -0800\n\n  * Fix memory leak in ASCII reader when encoutering errors in input.\n    (Bernhard Amann)\n\n  * Improvements for the \"bad checksums\" detector to make it detect\n    bad TCP checksums. (Seth Hall)\n\n2.1-223 | 2012-12-12 14:25:15 -0800\n\n  * Trick for parallelizing input framework unit tests. Instead of\n    loading listen.bro to block until files are read, just read a pcap\n    file in pseudo-realtime. (Jon Siwek)\n\n  * Fix reliability of a unit test that relies on when statements.\n    (Jon Siwek)\n\n  * Remove unused attributes. (Daniel Thayer)\n        - Removed attributes &postprocessor and &match from documentation and source code.\n        - Removed undocumented attribute &attr from source code.\n        - Removed internal attribute \"(&tracked)\" from documentation.\n\n2.1-218 | 2012-12-10 14:45:04 -0800\n\n  * Add GPRS Tunnelling Protocol (GTPv1) decapsulation. This currently\n    supports automatic decapsulation of GTP-U packets on UDP port 2152.\n    The GTPv1 headers for such tunnels can be inspected by handling\n    the \"gtpv1_g_pdu_packet\" event, which has a parameter of type\n    \"gtpv1_hdr\". Addresses #690. (Jon Siwek; derived from patch by\n    Carsten Langer)\n\n  * Change BinPAC exceptions in AYIYA/GTP analyzers to do\n    \"protocol_violation\". (Jon Siwek)\n\n2.1-212 | 2012-12-07 19:42:03 -0800\n\n  * Changing the HTTP parser to accept request methods in alignment\n    with the RFC. (Robin Sommer)\n\n2.1-209 | 2012-12-05 16:44:04 -0800\n\n  * Adapting the HTTP request line parsing to only accept methods\n    consisting of letters [A-Za-z]. (Robin Sommer)\n\n2.1-207 | 2012-12-05 15:47:32 -0800\n\n  * Reporting warnings if kill/waitpid fail in communication system.\n    (Bill Parker)\n\n  * Replace() bzero with memset(). (Bill Parker)\n\n  * Merge remote-tracking branch 'vlad/topic/vladg/http-verbs'\n\n    * vlad/topic/vladg/http-verbs:\n      A test for HTTP methods, including some horribly illegal requests.\n      Remove hardcoded HTTP verbs from the analyzer (#741)\n\n    I added a \"bad_HTTP_request\" weird for HTTP request lines that don't\n    have more than a single word.\n\n    Closes #741. (Robin Sommer)\n\n  * A test for HTTP methods, including some horribly illegal requests. (Vlad Grigorescu)\n\n  * Remove hardcoded HTTP verbs from the analyzer (#741) (Vlad Grigorescu)\n\n\n2.1-203 | 2012-12-05 14:36:56 -0800\n\n  * Fix segfault: Synchronization of state between connecting peers\n    now skips over identifiers that aren't initialized with a value\n    yet. Addresses #66. (Jon Siwek)\n\n  * Fix segfault: Delete correct entry in error case in input\n    framework. (Bernhard Amann)\n\n  * Bad record constructor initializers now give an error. Addresses\n    #34. (Jon Siwek)\n\n  * Invalid vector indices now generate error message. Addresses #24.\n    (Jon Siwek)\n\n  * Bump CPack RPM package requirement to Python >= 2.6.0. (Jon Siwek)\n\n  * Interpreter exceptions occurring in \"when\" blocks are now handled.\n    Addresses #779 (Jon Siwek)\n\n2.1-195 | 2012-12-03 14:50:33 -0800\n\n  * Catching out-of-memory in patricia tree code. (Bill Parker)\n\n2.1-194 | 2012-12-03 14:36:26 -0800\n\n  * Renaming ASCII writer filter option 'only_single_header_row' to\n    'tsv'. Also clarifying usage. Closes #912. (Robin Sommer)\n\n2.1-193 | 2012-12-03 14:11:14 -0800\n\n  * Fix a set of bugs with table/set attributes. (Jon Siwek)\n\n    - Identifiers that are initialized with set()/table() constructor\n      expressions now inherit attributes from the expression.  Before,\n      statements like\n\n         const i: set[string] = set() &redef;\n\n      associated the attribute with the set() constructor, but not the\n      \"i\" identifier, preventing redefinition.  Addresses #866.\n\n    - Allow &default attribute to apply to tables initialized as empty\n      (via either \"{ }\" or \"table()\") or if the expression supplied to it\n      can evaluate to a type that's promotable to the same yield type as\n      the table.\n\n2.1-191 | 2012-12-03 14:08:56 -0800\n\n  * Add test of record() constructor to table initializer unit test.\n    (Jon Siwek)\n\n  * Fix table(), set(), vector() constructors in table initializer\n    lists. Also adds type checking of yield values to table()\n    constructor and fixes the type checking of yield values in\n    vector() constructor. Addresses #5. (Jon Siwek)\n\n2.1-188 | 2012-12-03 14:04:29 -0800\n\n  * Hook functions now callable with \"hook\" expression (i.e., hook is\n    no longer a statement). The return value of the call is an\n    implicit boolean value of T if all hook handlers ran, or F if one\n    hook handler exited as a result of a break statement and\n    potentially prevented other handlers from running.\n\n    Scripts don't need to declare hooks with an explicit return type of bool\n    (internally, that's assumed), and any values given to (optional) return\n    statements in handler definitions are just ignored.\n\n    Addresses #918. (Jon Siwek)\n\n  * Clarification in hook documentation. (Jon Siwek)\n\n2.1-184 | 2012-12-03 13:59:50 -0800\n\n  * Slightly fix up file name extraction from Content-Disposition\n    headers. (Seth Hall)\n\n  * Adding -b flag to bro in unit tests so they run faster.\n\n  * Fixed a DNS attribute issue. Reported by Matt Thompson. (Seth\n    Hall)\n\n  * Adding NEWS placeholder for hooks and CSV mode. (Robin Sommer)\n\n2.1-178 | 2012-11-23 19:35:32 -0800\n\n  * The ASCII writer now supports a new filter config option\n    \"only_single_header_row\" that turns the output into CSV format\n    when set to \"T\". (Carsten Langer)\n\n  * Add new function flavor called a \"hook\". This new flavor of\n    function behaves like a \"synchronous event\". See\n    doc/scripts/builtins.rst more details on usage. (Jon Siwek)\n\n  * Improve auto-generated enum documentation. The names of enum types\n    are tracked so that variables holding a value of a given enum type\n    can generate a reference to it instead of just listing the type as\n    a generic \"enum\". (Jon Siwek)\n\n2.1-171 | 2012-11-23 18:24:15 -0800\n\n  * Fix ambiguity between composite table index and record ctor\n    expressions. If a table type is \"global t = table[conn_id, bool]\n    of count\", then checking membership like \"[c$id, is_orig] in t\"\n    now works. Addresses #80. (Jon Siwek)\n\n2.1-169 | 2012-11-23 18:21:32 -0800\n\n  * Fix some warnings from sphinx when building docs. (Jon Siwek)\n\n2.1-167 | 2012-11-14 13:19:17 -0800\n\n  * Add a new BIF \"bytestring_to_double\" for converting from a binary\n    representation of a double. Addresses #908. (Carsten Langer/Daniel\n    Thayer)\n\n2.1-162 | 2012-11-13 17:29:00 -0800\n\n  * Fix modbus register array parsing. (Jon Siwek)\n\n  * Adjustments to modbus test cases. (Jon Siwek)\n\n2.1-157 | 2012-11-08 16:22:00 -0800\n\n  * Fix for lookup_hostname BIF. (Jon Siwek)\n\n  * Fix for modbus test portability. (Robin Sommer)\n\n2.1-152 | 2012-11-05 16:52:34 -0800\n\n  * Initial version of a completely reworked intelligence framework.\n    See doc/intel.rst for more information. (Seth Hall)\n\n  * Experimental Modbus analyzer. See policy/protocols/modbus/* for\n    example policies. (Dina Hadziosmanovic, Seth Hall)\n\n2.1-112 | 2012-11-05 13:58:20 -0800\n\n  * New base script for detecting cases of checksum offloading.\n    Reporter messages will now tell if one has bad checksums. (Seth\n    Hall)\n\n  * Clarifying ownership rules for BroString constructors. (Robin\n    Sommer)\n\n2.1-109 | 2012-11-05 13:39:34 -0800\n\n  * Add detection rate threshold for MHR. (Vlad Grigorescu)\n\n  * lookup_hostname_txt fixes. (Vlad Grigorescu)\n\n2.1-104 | 2012-11-01 10:37:50 -0700\n\n  * A new built-in function lookup_hostname_txt() provides support for\n    DNS TXT queries. (Vlad Grigorescu)\n\n2.1-101 | 2012-10-31 14:30:26 -0700\n\n  * Documentation reorg: The install info has been consolidated into a\n    single document (INSTALL), the upgrade info has been moved from\n    the FAQ to a section in the install doc, and the \"upgrading from\n    1.5 to 2.0\" document has been updated (and renamed) to also\n    include 2.0 to 2.1 upgrade info. (Daniel Thayer)\n\n2.1-96 | 2012-10-31 14:23:50 -0700\n\n  * Renaming option defining the frequency of alarm summary mails to\n    'Logging::default_alarm_mail_interval'. (Daniel Thayer)\n\n2.1-91 | 2012-10-24 16:04:47 -0700\n\n  * Adding PPPoE support to Bro. (Seth Hall)\n\n2.1-87 | 2012-10-24 15:40:06 -0700\n\n  * Adding missing &redef for some TCP options. Addresses #905, #906,\n    #907. (Carsten Langer)\n\n2.1-86 | 2012-10-24 15:37:11 -0700\n\n  * Add parsing rules for IPv4/IPv6 subnet literal constants.\n    Addresses #888. (Jon Siwek)\n\n2.1-84 | 2012-10-19 15:12:56 -0700\n\n  * Added a BiF strptime() to wrap the corresponding C function. (Seth\n    Hall)\n\n2.1-82 | 2012-10-19 15:05:40 -0700\n\n  * Add IPv6 support to signature header conditions. (Jon Siwek)\n\n    - \"src-ip\" and \"dst-ip\" conditions can now use IPv6 addresses/subnets.\n      They must be written in colon-hexadecimal representation and enclosed\n      in square brackets (e.g. [fe80::1]).  Addresses #774.\n\n    - \"icmp6\" is now a valid protocol for use with \"ip-proto\" and \"header\"\n      conditions.  This allows signatures to be written that can match\n      against ICMPv6 payloads.  Addresses #880.\n\n    - \"ip6\" is now a valid protocol for use with the \"header\" condition.\n      (also the \"ip-proto\" condition, but it results in a no-op in that\n      case since signatures apply only to the inner-most IP packet when\n      packets are tunneled).  This allows signatures to match specifically\n      against IPv6 packets (whereas \"ip\" only matches against IPv4 packets).\n\n    - \"ip-proto\" conditions can now match against IPv6 packets.  Before,\n      IPv6 packets were just silently ignored which meant DPD based on\n      signatures did not function for IPv6 -- protocol analyzers would only\n      get attached to a connection over IPv6 based on the well-known ports\n      set in the \"dpd_config\" table.\n\n2.1-80 | 2012-10-19 14:48:42 -0700\n\n  * Change how \"gridftp\" gets added to service field of connection\n    records. In addition to checking for a finished SSL handshake over\n    an FTP connection, it now also requires that the SSL handshake\n    occurs after the FTP client requested AUTH GSSAPI, more\n    specifically identifying the characteristics of GridFTP control\n    channels. Addresses #891. (Jon Siwek)\n\n  * Allow faster rebuilds in certain cases. Previously, when\n    rebuilding with a different \"--prefix\" or \"--scriptdir\", all Bro\n    source files were recompiled.  With this change, only util.cc is\n    recompiled. (Daniel Thayer)\n\n2.1-76 | 2012-10-12 10:32:39 -0700\n\n  * Add support for recognizing GridFTP connections as an extension to\n    the standard FTP analyzer. (Jon Siwek)\n\n    This is enabled by default and includes:\n\n      - An analyzer for GSI mechanism of GSSAPI FTP AUTH method. GSI\n        authentication involves an encoded TLS/SSL handshake over the\n        FTP control session. For FTP sessions that attempt GSI\n        authentication, the *service* field of the connection log will\n        include \"gridftp\" (as well as also \"ftp\" and \"ssl\").\n\n      - Add an example of a GridFTP data channel detection script. It\n        relies on the heuristics of GridFTP data channels commonly\n        default to SSL mutual authentication with a NULL bulk cipher\n        and that they usually transfer large datasets (default\n        threshold of script is 1 GB).  The script also defaults to\n        skip_further_processing() after detection to try to save\n        cycles analyzing the large, benign connection.\n\n        For identified GridFTP data channels, the *services* fields of\n        the connection log will include \"gridftp-data\".\n\n  * Add *client_subject* and *client_issuer_subject* as &log'd fields\n    to SSL::Info record.  Also add *client_cert* and\n    *client_cert_chain* fields to track client cert chain. (Jon Siwek)\n\n  * Add a script in base/protocols/conn/polling that generalizes the\n    process of polling a connection for interesting features. The\n    GridFTP data channel detection script depends on it to monitor\n    bytes transferred. (Jon Siwek)\n\n2.1-68 | 2012-10-12 09:46:41 -0700\n\n  * Rename the Input Framework's update_finished event to end_of_data.\n    It will now not only fire after table-reads have been completed,\n    but also after the last event of a whole-file-read (or\n    whole-db-read, etc.). (Bernhard Amann)\n\n  * Fix for DNS log problem when a DNS response is seen with 0 RRs.\n    (Seth Hall)\n\n2.1-64 | 2012-10-12 09:36:41 -0700\n\n  * Teach --disable-dataseries/--disable-elasticsearch to ./configure.\n    Addresses #877. (Jon Siwek)\n\n  * Add --with-curl option to ./configure. Addresses #877. (Jon Siwek)\n\n2.1-61 | 2012-10-12 09:32:48 -0700\n\n  * Fix bug in the input framework: the config table did not work.\n    (Bernhard Amann)\n\n2.1-58 | 2012-10-08 10:10:09 -0700\n\n  * Fix a problem with non-manager cluster nodes applying\n    Notice::policy. This could, for example, result in duplicate\n    emails being sent if Notice::emailed_types is redef'd in local.bro\n    (or any script that gets loaded on all cluster nodes). (Jon Siwek)\n\n2.1-56 | 2012-10-03 16:04:52 -0700\n\n  * Add general FAQ entry about upgrading Bro. (Jon Siwek)\n\n2.1-53 | 2012-10-03 16:00:40 -0700\n\n  * Add new Tunnel::delay_teredo_confirmation option that indicates\n    that the Teredo analyzer should wait until it sees both sides of a\n    connection using a valid Teredo encapsulation before issuing a\n    protocol_confirmation. Default is on. Addresses #890. (Jon Siwek)\n\n2.1-50 | 2012-10-02 12:06:08 -0700\n\n  * Fix a typing issue that prevented the ElasticSearch timeout to\n    work. (Matthias Vallentin)\n\n  * Use second granularity for ElasticSearch timeouts. (Matthias\n    Vallentin)\n\n  * Fix compile issues with older versions of libcurl, which don't\n    offer *_MS timeout constants. (Matthias Vallentin)\n\n2.1-47 | 2012-10-02 11:59:29 -0700\n\n  * Fix for the input framework: BroStrings were constructed without a\n    final \\0, which makes them unusable by basically all internal\n    functions (like to_count). (Bernhard Amann)\n\n  * Remove deprecated script functionality (see NEWS for details).\n    (Daniel Thayer)\n\n2.1-39 | 2012-09-29 14:09:16 -0700\n\n  * Reliability adjustments to istate tests with network\n    communication. (Jon Siwek)\n\n2.1-37 | 2012-09-25 14:21:37 -0700\n\n  * Reenable some tests that previously would cause Bro to exit with\n    an error. (Daniel Thayer)\n\n  * Fix parsing of large integers on 32-bit systems. (Daniel Thayer)\n\n  * Serialize language.when unit test with the \"comm\" group. (Jon\n    Siwek)\n\n2.1-32 | 2012-09-24 16:24:34 -0700\n\n  * Fix race condition in language/when.bro test. (Daniel Thayer)\n\n2.1-26 | 2012-09-23 08:46:03 -0700\n\n  * Add an item to FAQ page about broctl options. (Daniel Thayer)\n\n  * Add more language tests. We now have tests of all built-in Bro\n    data types (including different representations of constant\n    values, and max./min. values), keywords, and operators (including\n    special properties of certain operators, such as short-circuit\n    evaluation and associativity). (Daniel Thayer)\n\n  * Fix construction of ip6_ah (Authentication Header) record values.\n\n    Authentication Headers with a Payload Len field set to zero would\n    cause a crash due to invalid memory allocation because the\n    previous code assumed Payload Len would always be great enough to\n    contain all mandatory fields of the header. (Jon Siwek)\n\n  * Update compile/dependency docs for OS X. (Jon Siwek)\n\n  * Adjusting Mac binary packaging script. Setting CMAKE_PREFIX_PATH\n    helps link against standard system libs instead of ones that come\n    from other package manager (e.g. MacPorts). (Jon Siwek)\n\n  * Adjusting some unit tests that do cluster communication. (Jon Siwek)\n\n  * Small change to non-blocking DNS initialization. (Jon Siwek)\n\n  * Reorder a few statements in scan.l to make 1.5msecs etc work.\n    Adresses #872. (Bernhard Amann)\n\n2.1-6 | 2012-09-06 23:23:14 -0700\n\n  * Fixed a bug where \"a -= b\" (both operands are intervals) was not\n    allowed in Bro scripts (although \"a = a - b\" is allowed). (Daniel\n    Thayer)\n\n  * Fixed a bug where the \"!=\" operator with subnet operands was\n    treated the same as the \"==\" operator. (Daniel Thayer)\n\n  * Add sleeps to configuration_update test for better reliability.\n    (Jon Siwek)\n\n  * Fix a segfault when iterating over a set when using malformed\n    index. (Daniel Thayer)\n\n2.1 | 2012-08-28 16:46:42 -0700\n\n  * Make bif.identify_magic robust against FreeBSD's libmagic config.\n    (Robin Sommer)\n\n  * Remove automatic use of gperftools on non-Linux systems.\n    --enable-perftools must now explicity be supplied to ./configure\n    on non-Linux systems to link against the tcmalloc library.\n\n  * Fix uninitialized value for 'is_partial' in TCP analyzer. (Jon\n    Siwek)\n\n  * Parse 64-bit consts in Bro scripts correctly. (Bernhard Amann)\n\n  * Output 64-bit counts correctly on 32-bit machines (Bernhard Amann)\n\n  * Input framework fixes, including:  (Bernhard Amann)\n\n    - One of the change events got the wrong parameters.\n\n    - Escape commas in sets and vectors that were unescaped before\n      tokenization.\n\n    - Handling of zero-length-strings as last element in a set was\n      broken (sets ending with a ,).\n\n    - Hashing of lines just containing zero-length-strings was broken.\n\n    - Make set_separators different from , work for input framework.\n\n    - Input framework was not handling counts and ints out of\n      32-bit-range correctly.\n\n    - Errors in single lines do not kill processing, but simply ignore\n      the line, log it, and continue.\n\n  * Update documentation for builtin types. (Daniel Thayer)\n\n    - Add missing description of interval \"msec\" unit.\n\n    - Improved description of pattern by clarifying the issue of\n      operand order and difference between exact and embedded\n      matching.\n\n  * Documentation fixes for signature 'eval' conditions. (Jon Siwek)\n\n  * Remove orphaned 1.5 unit tests. (Jon Siwek)\n\n  * Add type checking for signature 'eval' condition functions. (Jon\n    Siwek)\n\n  * Adding an identifier to the SMTP blocklist notices for duplicate\n    suppression. (Seth Hall)\n\n2.1-beta-45 | 2012-08-22 16:11:10 -0700\n\n  * Add an option to the input framework that allows the user to chose\n    to not die upon encountering files/functions. (Bernhard Amann)\n\n2.1-beta-41 | 2012-08-22 16:05:21 -0700\n\n  * Add test serialization to \"leak\" unit tests that use\n    communication. (Jon Siwek)\n\n  * Change to metrics/basic-cluster unit test for reliability. (Jon\n    Siwek)\n\n  * Fixed ack tracking which could overflow quickly in some\n    situations. (Seth Hall)\n\n  * Minor tweak to coverage.bare-mode-errors unit test to work with a\n    symlinked 'scripts' dir. (Jon Siwek)\n\n2.1-beta-35 | 2012-08-22 08:44:52 -0700\n\n  * Add testcase for input framework reading sets (rather than\n    tables). (Bernhard Amann)\n\n2.1-beta-31 | 2012-08-21 15:46:05 -0700\n\n  * Tweak to rotate-custom.bro unit test. (Jon Siwek)\n\n  * Ignore small mem leak every rotation interval for dataseries logs.\n    (Jon Siwek)\n\n2.1-beta-28 | 2012-08-21 08:32:42 -0700\n\n  * Linking ES docs into logging document. (Robin Sommer)\n\n2.1-beta-27 | 2012-08-20 20:06:20 -0700\n\n  * Add the Stream record to Log:active_streams to make more dynamic\n    logging possible. (Seth Hall)\n\n  * Fix portability of printing to files returned by\n    open(\"/dev/stderr\"). (Jon Siwek)\n\n  * Fix mime type diff canonifier to also skip mime_desc columns. (Jon\n    Siwek)\n\n  * Unit test tweaks/fixes. (Jon Siwek)\n\n    - Some baselines for tests in \"leaks\" group were outdated.\n\n    - Changed a few of the cluster/communication tests to terminate\n      more explicitly instead of relying on btest-bg-wait to kill\n      processes.  This makes the tests finish faster in the success case\n      and makes the reason for failing clearer in the that case.\n\n  * Fix memory leak of serialized IDs when compiled with\n    --enable-debug. (Jon Siwek)\n\n2.1-beta-21 | 2012-08-16 11:48:56 -0700\n\n  * Installing a handler for running out of memory in \"new\". Bro will\n    now print an error message in that case rather than abort with an\n    uncaught exception. (Robin Sommer)\n\n2.1-beta-20 | 2012-08-16 11:43:31 -0700\n\n  * Fixed potential problems with ElasticSearch output plugin. (Seth\n    Hall)\n\n2.1-beta-13 | 2012-08-10 12:28:04 -0700\n\n  * Reporter warnings and error now print to stderr by default. New\n\toptions Reporter::warnings_to_stderr and\n\tReporter::errors_to_stderr to disable. (Seth Hall)\n\n2.1-beta-9 | 2012-08-10 12:24:29 -0700\n\n  * Add more BIF tests. (Daniel Thayer)\n\n2.1-beta-6 | 2012-08-10 12:22:52 -0700\n\n  * Fix bug in input framework with an edge case. (Bernhard Amann)\n\n  * Fix small bug in input framework test script. (Bernhard Amann)\n\n2.1-beta-3 | 2012-08-03 10:46:49 -0700\n\n  * Merge branch 'master' of ssh://git.bro-ids.org/bro (Robin Sommer)\n\n  * Fix configure script to exit with non-zero status on error (Jon\n    Siwek)\n\n  * Improve ASCII output performance. (Robin Sommer)\n\n2.1-beta | 2012-07-30 11:59:53 -0700\n\n  * Improve log filter compatibility with remote logging. Addresses\n    #842. (Jon Siwek)\n\n2.0-907 | 2012-07-30 09:13:36 -0700\n\n  * Add missing breaks to switch cases in\n    ElasticSearch::HTTPReceive(). (Jon Siwek)\n\n2.0-905 | 2012-07-28 16:24:34 -0700\n\n  * Fix log manager hanging on waiting for pending file rotations,\n    plus writer API tweak for failed rotations. Addresses #860. (Jon\n    Siwek and Robin Sommer)\n\n  * Tweaking logs-to-elasticsearch.bro so that it doesn't do anything\n    if ES server is unset. (Robin Sommer)\n\n2.0-902 | 2012-07-27 12:42:13 -0700\n\n  * New variable in logging framework Log::active_streams to indicate\n    Log:ID enums which are currently active. (Seth Hall)\n\n  * Reworked how the logs-to-elasticsearch scripts works to stop\n    abusing the logging framework. (Seth Hall)\n\n  * Fix input test for recent default change on fastpath. (Robin\n    Sommer)\n\n2.0-898 | 2012-07-27 12:22:03 -0700\n\n  * Small (potential performance) improvement for logging framework. (Seth Hall)\n\n  * Script-level rotation postprocessor fix. This fixes a problem with\n    writers that don't have a postprocessor. (Seth Hall)\n\n  * Update input framework documentation to reflect want_record\n    change. (Bernhard Amann)\n\n  * Fix crash when encountering an InterpreterException in a predicate\n    in logging or input Framework. (Bernhard Amann)\n\n  * Input framework: Make want_record=T the default for events\n    (Bernhard Amann)\n\n  * Changing the start/end markers in logs to open/close now\n    reflecting wall clock. (Robin Sommer)\n\n2.0-891 | 2012-07-26 17:15:10 -0700\n\n  * Reader/writer API: preventing plugins from receiving further\n    messages after a failure. (Robin Sommer)\n\n  * New test for input framework that fails to find a file. (Robin\n    Sommer)\n\n  * Improving error handling for threads. (Robin Sommer)\n\n  * Tweaking the custom-rotate test to produce stable output. (Robin\n    Sommer)\n\n2.0-884 | 2012-07-26 14:33:21 -0700\n\n  * Add comprehensive error handling for close() calls. (Jon Siwek)\n\n  * Add more test cases for input framework. (Bernhard Amann)\n\n  * Input framework: make error output for non-matching event types\n    much more verbose. (Bernhard Amann)\n\n2.0-877 | 2012-07-25 17:20:34 -0700\n\n  * Fix double close() in FilerSerializer class. (Jon Siwek)\n\n  * Fix build warnings. (Daniel Thayer)\n\n  * Fixes to ElasticSearch plugin to make libcurl handle http\n    responses correctly. (Seth Hall)\n\n  * Fixing FreeBSD compiler error. (Robin Sommer)\n\n  * Silencing compiler warnings. (Robin Sommer)\n\n2.0-871 | 2012-07-25 13:08:00 -0700\n\n  * Fix complaint from valgrind about uninitialized memory usage. (Jon\n    Siwek)\n\n  * Fix differing log filters of streams from writing to same\n    writer/path (which now produces a warning, but is otherwise\n    skipped for the second). Addresses #842. (Jon Siwek)\n\n  * Fix tests and error message for to_double BIF. (Daniel Thayer)\n\n  * Compile fix. (Robin Sommer)\n\n2.0-866 | 2012-07-24 16:02:07 -0700\n\n  * Correct a typo in usage message. (Daniel Thayer)\n\n  * Fix file permissions of log files (which were created with execute\n    permissions after a recent change). (Daniel Thayer)\n\n2.0-862 | 2012-07-24 15:22:52 -0700\n\n  * Fix initialization problem in logging class. (Jon Siwek)\n\n  * Input framework now accepts escaped ASCII values as input (\\x##),\n    and unescapes appropiately. (Bernhard Amann)\n\n  * Make reading ASCII logfiles work when the input separator is\n    different from \\t. (Bernhard Amann)\n\n  * A number of smaller fixes for input framework. (Bernhard Amann)\n\n2.0-851 | 2012-07-24 15:04:14 -0700\n\n  * New built-in function to_double(s: string). (Scott Campbell)\n\n2.0-849 | 2012-07-24 11:06:16 -0700\n\n  * Adding missing include needed on some systems. (Robin Sommer)\n\n2.0-846 | 2012-07-23 16:36:37 -0700\n\n  * Fix WriterBackend::WriterInfo serialization, reenable ascii\n    start/end tags. (Jon Siwek)\n\n2.0-844 | 2012-07-23 16:20:59 -0700\n\n  * Reworking parts of the internal threading/logging/input APIs for\n    thread-safety. (Robin Sommer)\n\n  * Bugfix for SSL version check. (Bernhard Amann)\n\n  * Changing a HTTP DPD from port 3138 to 3128. Addresses #857. (Robin\n    Sommer)\n\n  * ElasticSearch logging writer. See logging-elasticsearch.rst for\n    more information. (Vlad Grigorescu and Seth Hall).\n\n  * Give configure a --disable-perftools option to disable Perftools\n    support even if found. (Robin Sommer)\n\n  * The ASCII log writer now includes \"#start <timestamp>\" and \"#end\n    <timestamp> lines in the each file. (Robin Sommer)\n\n  * Renamed ASCII logger \"header\" options to \"meta\". (Robin Sommer)\n\n  * ASCII logs now escape '#' at the beginning of log lines. Addresses\n    #763. (Robin Sommer)\n\n  * Fix bug, where in dns.log rcode always was set to 0/NOERROR when\n    no reply package was seen. (Bernhard Amann)\n\n  * Updating to Mozilla's current certificate bundle. (Seth Hall)\n\n2.0-769 | 2012-07-13 16:17:33 -0700\n\n  * Fix some Info:Record field documentation. (Vlad Grigorescu)\n\n  * Fix overrides of TCP_ApplicationAnalyzer::EndpointEOF. (Jon Siwek)\n\n  * Fix segfault when incrementing whole vector values. Also removed\n    RefExpr::Eval(Val*) method since it was never called. (Jon Siwek)\n\n  * Remove baselines for some leak-detecting unit tests. (Jon Siwek)\n\n  * Unblock SIGFPE, SIGILL, SIGSEGV and SIGBUS for threads, so that\n    they now propagate to the main thread. Adresses #848. (Bernhard\n    Amann)\n\n2.0-761 | 2012-07-12 08:14:38 -0700\n\n  * Some small fixes to further reduce SOCKS false positive logs. (Seth Hall)\n\n  * Calls to pthread_mutex_unlock now log the reason for failures.\n    (Bernhard Amann)\n\n2.0-757 | 2012-07-11 08:30:19 -0700\n\n  * Fixing memory leak. (Seth Hall)\n\n2.0-755 | 2012-07-10 16:25:16 -0700\n\n  * Add sorting canonifier to rotate-custom unit test. Addresses #846.\n    (Jon Siwek)\n\n  * Fix many compiler warnings. (Daniel Thayer)\n\n  * Fix segfault when there's an error/timeout resolving DNS requests.\n    Addresses #846. (Jon Siwek)\n\n  * Remove a non-portable test case. (Daniel Thayer)\n\n  * Fix typos in input framework doc. (Daniel Thayer)\n\n  * Fix typos in DataSeries documentation. (Daniel Thayer)\n\n  * Bugfix making custom rotate functions work again. (Robin Sommer)\n\n  * Tiny bugfix for returning writer name. (Robin Sommer)\n\n  * Moving make target update-doc-sources from top-level Makefile to\n    btest Makefile. (Robin Sommer)\n\n2.0-733 | 2012-07-02 15:31:24 -0700\n\n  * Extending the input reader DoInit() API. (Bernhard Amann). It now\n    provides a Info struct similar to what we introduced for log\n    writers, including a corresponding \"config\" key/value table.\n\n  * Fix to make writer-info work when debugging is enabled. (Bernhard\n    Amann)\n\n2.0-726 | 2012-07-02 15:19:15 -0700\n\n  * Extending the log writer DoInit() API. (Robin Sommer)\n\n    We now pass in a Info struct that contains:\n\n        - the path name (as before)\n        - the rotation interval\n        - the log_rotate_base_time in seconds\n        - a table of key/value pairs with further configuration options.\n\n    To fill the table, log filters have a new field \"config: table[string]\n    of strings\". This gives a way to pass arbitrary values from\n    script-land to writers. Interpretation is left up to the writer.\n\n  * Split calc_next_rotate() into two functions, one of which is\n    thread-safe and can be used with the log_rotate_base_time value\n    from DoInit().\n\n  * Updates to the None writer. (Robin Sommer)\n\n        - It gets its own script writers/none.bro.\n\n        - New bool option LogNone::debug to enable debug output. It then\n          prints out all the values passed to DoInit().\n\n        - Fixed a bug that prevented Bro from terminating.\n\n2.0-723 | 2012-07-02 15:02:56 -0700\n\n  * Extract ICMPv6 NDP options and include in ICMP events.  This adds\n    a new parameter of type \"icmp6_nd_options\" to the ICMPv6 neighbor\n    discovery events. Addresses #833. (Jon Siwek)\n\n  * Set input frontend type before starting the thread. This means\n    that the thread type will be output correctly in the error\n    message. (Bernhard Amann)\n\n2.0-719 | 2012-07-02 14:49:03 -0700\n\n  * Fix inconsistencies in random number generation. The\n    srand()/rand() interface was being intermixed with the\n    srandom()/random() one.  The later is now used throughout. (Jon\n    Siwek)\n\n  * Changed the srand() and rand() BIFs to work deterministically if\n    Bro was given a seed file. Addresses #825. (Jon Siwek)\n\n  * Updating input framework unit tests to make them more reliable and\n    execute quicker. (Jon Siwek)\n\n  * Fixed race condition in writer and reader initializations. (Jon\n    Siwek)\n\n  * Small tweak to make test complete quicker. (Jon Siwek)\n\n  * Drain events before terminating log/thread managers. (Jon Siwek)\n\n  * Fix strict-aliasing warning in RemoteSerializer.cc. Addresses\n    #834. (Jon Siwek)\n\n  * Fix typos in event documentation. (Daniel Thayer)\n\n  * Fix typos in NEWS for Bro 2.1 beta. (Daniel Thayer)\n\n2.0-709 | 2012-06-21 10:14:24 -0700\n\n  * Fix exceptions thrown in event handlers preventing others from running. (Jon Siwek)\n\n  * Add another SOCKS command. (Seth Hall)\n\n  * Fixed some problems with the SOCKS analyzer and tests. (Seth Hall)\n\n  * Updating NEWS in preparation for beta. (Robin Sommer)\n\n  * Accepting different AF_INET6 values for loopback link headers.\n    (Robin Sommer)\n\n2.0-698 | 2012-06-20 14:30:40 -0700\n\n  * Updates for the SOCKS analyzer (Seth Hall).\n\n    - A SOCKS log!\n\n    - Now supports SOCKSv5 in the analyzer and the DPD sigs.\n\n    - Added protocol violations.\n\n  * Updates to the tunnels framework. (Seth Hall)\n\n    - Make the uid field optional since it's conceptually incorrect\n      for proxies being treated as tunnels to have it.\n\n    - Reordered two fields in the log.\n\n    - Reduced the default tunnel expiration interface to something\n      more reasonable (1 hour).\n\n  * Make Teredo bubble packet parsing more lenient. (Jon Siwek)\n\n  * Fix a crash in NetSessions::ParseIPPacket(). (Jon Siwek)\n\n2.0-690 | 2012-06-18 16:01:33 -0700\n\n  * Support for decapsulating tunnels via the new tunnel framework in\n    base/frameworks/tunnels.\n\n    Bro currently supports Teredo, AYIYA, IP-in-IP (both IPv4 and\n    IPv6), and SOCKS. For all these, it logs the outher tunnel\n    connections in both conn.log and tunnel.log, and proceeds to\n    analyze the inner payload as if it were not tunneled, including\n    also logging it in conn.log (with a new tunnel_parents column\n    pointing back to the outer connection(s)). (Jon Siwek, Seth Hall,\n    Gregor Maier)\n\n  * The options \"tunnel_port\" and \"parse_udp_tunnels\" have been\n    removed. (Jon Siwek)\n\n2.0-623 | 2012-06-15 16:24:52 -0700\n\n  * Changing an error in the input framework to a warning. (Robin\n    Sommer)\n\n2.0-622 | 2012-06-15 15:38:43 -0700\n\n  * Input framework updates. (Bernhard Amann)\n\n    - Disable streaming reads from executed commands. This lead to\n      hanging Bros because pclose apparently can wait for eternity if\n      things go wrong.\n\n     - Automatically delete disabled input streams.\n\n     - Documentation.\n\n2.0-614 | 2012-06-15 15:19:49 -0700\n\n  * Remove an old, unused diff canonifier. (Jon Siwek)\n\n  * Improve an error message in ICMP analyzer. (Jon Siwek)\n\n  * Fix a warning message when building docs. (Daniel Thayer)\n\n  * Fix many errors in the event documentation. (Daniel Thayer)\n\n2.0-608 | 2012-06-11 15:59:00 -0700\n\n  * Add more error handling code to logging of enum vals. Addresses\n    #829. (Jon Siwek)\n\n2.0-606 | 2012-06-11 15:55:56 -0700\n\n  * Fix summary lines for BIF documentation and corrected the\n    description of \"fmt\" and \"floor\" BIFs. (Daniel Thayer)\n\n  * Fix val_size BIF tests and improve docs. (Daniel Thayer)\n\n2.0-602 | 2012-06-07 15:06:19 -0700\n\n  * Include header for usleep(), caused compile failure on Archlinux. (Jon Siwek)\n\n  * Revert \"Fixed a bug with the MIME analyzer not removing whitespace\n    on wrapped headers.\" Needs discussion. (Robin Sommer)\n\n2.0-598 | 2012-06-06 11:47:00 -0700\n\n  * Add @load-sigs directive for loading signature files (addresses\n    #551). This can be used to load signatures relative to the current\n    scripts (e.g., \"@load-sigs ./foo.sig\"). (Jon Siwek)\n\n\n2.0-596 | 2012-06-06 11:41:00 -0700\n\n    * Fixes for some BiFs and their documentation. (Daniel Thayer)\n\n    * Many new unit tests for BiFs. (Daniel Thayer)\n\n2.0-579 | 2012-06-06 11:04:46 -0700\n\n  * Memory leak fixes for bad usages of VectorVal ctor. (Jon Siwek)\n\n  * Fixed a bug with the MIME analyzer not removing whitespace on\n    wrapped headers. (Seth Hall)\n\n  * Change Input::update_finished lookup to happen at init time. (Jon Siwek)\n\n  * Fix going through the internal_handler() function which will now\n    set the event as \"used\" (i.e. it's marked as being raised\n    somewhere). Addresses #823. (Jon Siwek)\n\n  * Fix format specifier on RemoteSerializer::Connect. This caused\n    32-bit systems to show a warning at compile-time, and fail when\n    connecting to peers. (Jon Siwek)\n\n  * Fixes for running tests in parallel. (Robin Sommer)\n\n2.0-571 | 2012-05-30 19:12:43 -0700\n\n  * Updating submodule(s).\n\n2.0-570 | 2012-05-30 19:08:18 -0700\n\n  * A new input framework enables scripts to read in external data\n    dynamically on the fly as Bro is processing network traffic.\n    (Bernhard Amann)\n\n    Currently, the framework supports reading ASCII input that's\n    structured similar as Bro's log files as well as raw blobs of\n    data. Other formats will come in the future.\n\n    See doc/input.rst for more information (this will be extended\n    further soon).\n\n2.0-395 | 2012-05-30 17:03:31 -0700\n\n  * Remove unnecessary assert in ICMP analyzer which could lead to\n    aborts. Addresses #822.\n\n  * Improve script debugger backtrace and print commands. (Jon Siwek)\n\n  * Switching default DS compression to gzip. (Robin Sommer)\n\n  * Improve availability of IPv6 flow label in connection records.\n    This adds a \"flow_label\" field to the \"endpoint\" record type,\n    which is used for both the \"orig\" and \"resp\" fields of\n    \"connection\" records.  The new \"connection_flow_label_changed\"\n    event also allows tracking of changes in flow labels: it's raised\n    each time one direction of the connection starts using a different\n    label. (Jon Siwek)\n\n  * Add unit tests for Broccoli SSL and Broccoli IPv6 connectivity.\n    (Jon Siwek)\n\n  * Remove AI_ADDRCONFIG getaddrinfo hints flag for listening sockets.\n    (Jon Siwek)\n\n  * Undo unnecessary communication protocol version bump. (Jon Siwek)\n\n  * Add support to Bro for connecting with peers over IPv6. (Jon Siwek)\n\n    - Communication::listen_ipv6 needs to be redef'd to true in order\n      for IPv6 listening sockets to be opened.\n\n    - Added Communication::listen_retry option as an interval at which\n      to retry binding to socket addresses that were already in use.\n\n    - Added some explicit baselines to check in the istate.events and\n      istate.events-ssl tests -- the SSL test was incorrectly passing\n      because it compared two empty files.  (The files being empty\n      because \"http/base\" was given as an argument to Bro which it\n      couldn't handle because that script doesn't exist anymore).\n\n    - Support for communication over non-global IPv6 addresses. This\n      usually requires specifying an additional zone identifier (see\n      RFC 4007). The connect() and listen() BIFs have been changed to\n      accept this zone identifier as an argument.\n\n\n2.0-377 | 2012-05-24 16:46:06 -0700\n\n  * Documentation fixes. (Jon Siwek and Daniel Thayer)\n\n2.0-372 | 2012-05-17 13:59:45 -0700\n\n  * Fix compile errors. (Jon Siwek)\n\n  * Linking in the DS docs. (Robin Sommer)\n\n  * Fix mobility checksums unit test. (Jon Siwek)\n\n2.0-367 | 2012-05-17 12:42:30 -0700\n\n  * Adding support for binary output via DataSeries. See\n    logging-dataseries.rst for more information. (Gilbert Clark and\n    Robin Sommer)\n\n  * Adding target update-doc-sources to top-level Makefile that runs\n    genDocSourcesList.sh. (Robin Sommer)\n\n  * Moving trace for rotation test into traces directory. (Robin Sommer)\n\n  * Fixing a rotation race condition at termination. (Robin Sommer)\n\n  * Extending log post-processor call to include the name of the\n    writer. (Robin Sommer)\n\n  * In threads, an internal error now immediately aborts. Otherwise,\n    the error won't make it back to the main thread for a while and\n    subsequent code in the thread would still execute. (Robin Sommer)\n\n  * DataSeries cleanup. (Robin Sommer)\n\n  * Fixing threads' DoFinish() method. It wasn't called reliably. Now,\n    it's always called before the thread is destroyed (assuming\n    processing has went normally so far). (Robin Sommer)\n\n2.0-341 | 2012-05-17 09:54:30 -0700\n\n  * Add a comment to explain the ICMPv6 error message types. (Daniel Thayer)\n\n  * Quieting external test output somehwat. (Robin Sommer)\n\n2.0-336 | 2012-05-14 17:15:44 -0700\n\n  * Don't print the various \"weird\" events to stderr. Address #805.\n    (Daniel Thayer)\n\n  * Generate icmp_error_message event for ICMPv6 error msgs.\n    Previously, icmp_sent was being generated, but icmp_error_message\n    contains more info.\n\n  * Improved documentation comments for icmp-related events. (Daniel\n    Thayer)\n\n2.0-330 | 2012-05-14 17:05:56 -0700\n\n  * Add `addr_to_uri` script-level function that adds brackets to an\n    address if it's IPv6 and will be included in a URI or when a\n    \":<port>\" needs to be appended to it. (Jon Siwek)\n\n  * Also add a test case for content extraction. (Jon Siwek)\n\n  * Fix typos and improve INSTALL document. (Daniel Thayer)\n\n  * Switching to new btest command TEST-SERIALIZE for communication\n    tests. (Robin Sommer)\n\n2.0-323 | 2012-05-04 21:04:34 -0700\n\n  * Add SHA1 and SHA256 hashing BIFs. Addresses #542.\n\n  * Refactor all internal MD5 stuff to use OpenSSL's. (Jon Siwek)\n\n  * Changes to open-file caching limits and uncached file unserialization. (Jon Siwek)\n\n    - Unserializing files that were previously kicked out of the open-file\n      cache would cause them to be fopen'd with the original access\n      permissions which is usually 'w' and causes truncation.  They\n      are now opened in 'a' mode.  (addresses #780)\n\n    - Add 'max_files_in_cache' script option to manually set the maximum\n      amount of opened files to keep cached.  Mainly this just helped\n      to create a simple test case for the above change.\n\n    - Remove unused NO_HAVE_SETRLIMIT preprocessor switch.\n\n    - On systems that don't enforce a limit on number of files opened for\n      the process, raise default max size of open-file cache from\n      32 to 512.\n\n2.0-319 | 2012-05-03 13:24:44 -0700\n\n  * SSL bugfixes and cleanup. (Seth Hall)\n\n    - SSL related files and classes renamed to remove the \"binpac\" term.\n\n    - A small fix for DPD scripts to make the DPD log more helpful if\n      there are multiple continued failures.\n\n    - Fixed the SSL analyzer to make it stop doing repeated violation\n      messages for some handshake failures.\n\n    - Added a $issuer_subject to the SSL log.\n\n    - Created a basic test for SSL.\n\n    - Fixed parsing of TLS server extensions. (Seth Hall)\n\n2.0-315 | 2012-05-03 11:44:17 -0700\n\n  * Add two more TLS extension values that we see in live traffic.\n    (Bernhard Amann)\n\n  * Fixed IPv6 link local unicast CIDR and added IPv6 loopback to\n    private address space. (Seth Hall)\n\n  * Fixed a problem where cluster workers were still processing\n    notices in some cases. (Seth Hall)\n\n  * Added a configure option to specify the 'etc' directory. Addresses\n    #801. (Daniel Thayer)\n\n\n2.0-306 | 2012-04-24 14:37:00 -0700\n\n  * Add further TLS extension values \"extended_random\" and\n    \"heartbeat\". (Seth Hall)\n\n  * Fix problem with extracting FTP passwords and add \"ftpuser\" as\n    another anonymous username.  (Seth Hall, discovered by Patrik\n    Lundin).\n\n2.0-303 | 2012-04-19 10:01:06 -0700\n\n  * Changes related to ICMPv6 Neighbor Discovery messages. (Jon Siwek)\n\n    - The 'icmp_conn' record now contains an 'hlim' field since hop limit\n      in the IP header is an interesting field for at least these ND\n      messages.\n\n    - Fixed and extended 'icmp_router_advertisement' event parameters.\n\n    - Changed 'icmp_neighbor_advertisement' event parameters to add\n      more of the known boolean flags.\n\n2.0-301 | 2012-04-17 17:58:55 -0700\n\n  * Bro now support ICMPv6. (Matti Mantere, Jon Siwek, Robin Sommer,\n\tDaniel Thayer).\n\n\tOverall, Bro now raises the following ICMP events for v4 and v6 as\n\tappropiate:\n\n        event icmp_sent(c: connection, icmp: icmp_conn);\n        event icmp_echo_request(c: connection, icmp: icmp_conn, id: count, seq: count, payload: string);\n        event icmp_echo_reply(c: connection, icmp: icmp_conn, id: count, seq: count, payload: string);\n        event icmp_error_message(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_unreachable(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_packet_too_big(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_time_exceeded(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_parameter_problem(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_router_solicitation(c: connection, icmp: icmp_conn);\n        event icmp_router_advertisement(c: connection, icmp: icmp_conn, hop_limit: count, managed: bool, router_lifetime: count, reachable_time: interval, retrans_timer: interval);\n        event icmp_neighbor_solicitation(c: connection, icmp: icmp_conn, tgt:addr);\n        event icmp_neighbor_advertisement(c: connection, icmp: icmp_conn, tgt:addr);\n        event icmp_redirect(c: connection, icmp: icmp_conn, tgt: addr, dest: addr);\n\n    The `icmp_conn` record got a new boolean field 'v6' that indicates\n    whether the ICMP message is v4 or v6.\n\n    This change also includes further low-level work on existing IP\n\tand ICMP code, including a reorganization of how ICMPv4 is\n\thandled.\n\n2.0-281 | 2012-04-17 17:40:39 -0700\n\n  * Small updates for the bittorrent analyzer to support 64bit types\n    in binpac. (Seth Hall)\n\n  * Removed the attempt at bittorrent resynchronization. (Seth Hall)\n\n2.0-276 | 2012-04-17 17:35:56 -0700\n\n  * Add more support for <netinet/ip6.h>'s that lack some structure\n    definitions. (Jon Siwek)\n\n2.0-273 | 2012-04-16 18:08:56 -0700\n\n  * Removing QR flag from DNS log in response, which should not have\n    been there in the first place. (Seth Hall)\n\n  * Sync up patricia.c/h with pysubnettree repo. (Daniel Thayer)\n\n  * Adding missing leak groups to a couple tests. Also activating leak\n    checking for proxy in basic-cluster test. (Robin Sommer)\n\n2.0-267 | 2012-04-09 17:47:28 -0700\n\n  * Add support for mobile IPv6 Mobility Header (RFC 6275).  (Jon\n    Siwek)\n\n    - Enabled through a new --enable-mobile-ipv6 configure-time\n      option. If not enabled, the mobility header (routing type 2) and\n      Home Address Destination option are ignored.\n\n    - Accessible at script-layer through 'mobile_ipv6_message' event.\n\n  * Refactor IP_Hdr routing header handling, add MobileIPv6 Home\n    Address handling. Packets that use the Home Address Destination\n    option use that option's address as the connection's originator.\n    (Jon Siwek)\n\n  * Revert TCP checksumming to cache common data, like it did before.\n    (Jon Siwek)\n\n  * Improve handling of IPv6 routing type 0 extension headers. (Jon\n    Siwek)\n\n    - flow_weird event with name argument value of \"routing0_hdr\" is raised\n      for packets containing an IPv6 routing type 0 header because this\n      type of header is now deprecated according to RFC 5095.\n\n    - Packets with a routing type 0 header and non-zero segments left\n      now use the last address in that header in order to associate\n      with a connection/flow and for calculating TCP/UDP checksums.\n\n    - Added a set of IPv4/IPv6 TCP/UDP checksum unit tests (Jon Siwek)\n\n  * Fix table expiry for values assigned in bro_init() when reading\n    live. (Jon Siwek)\n\n2.0-257 | 2012-04-05 15:32:43 -0700\n\n  * Fix CMake from warning about unused ENABLE_PERFTOOLS_DEBUG\n    variable. (Jon Siwek)\n\n  * Fix handling of IPv6 atomic fragments. (Jon Siwek)\n\n  * Fix that prevents Bro processes that do neither local logging nor\n    request remote logs from spawning threads. (Robin Sommer)\n\n  * Fixing perftools-debug support. (Robin Sommer)\n\n  * Reverting SocketComm change tuning I/O behaviour. (Robin Sommer)\n\n  * Adding notice_policy.log canonification for external tests. (Robin Sommer)\n\n\n2.0-245 | 2012-04-04 17:25:20 -0700\n\n  * Internal restructuring of the logging framework: we now spawn\n    threads doing the I/O. From a user's perspective not much should\n    change, except that the OS may now show a bunch of Bro threads.\n    (Gilbert Clark and Robin Sommer).\n\n  * When building Bro, we now always link in tcmalloc if it's found at\n    configure time. If it's installed but not picked up,\n    --with-perftools may help. (Robin Sommer)\n\n  * Renaming the configure option --enable-perftools to\n    --enable-perftool-debug to indicate that the switch is only\n    relevant for debugging the heap. It's not needed to pick up\n    tcmalloc for better performance. (Robin Sommer)\n\n2.0-184 | 2012-03-28 15:11:11 -0700\n\n  * Improve handling of IPv6 Routing Type 0 headers.  (Jon Siwek)\n\n    - For RH0 headers with non-zero segments left, a\n      \"routing0_segleft\" flow_weird event is raised (with a\n      destination indicating the last address in the routing header),\n      and an \"rh0_segleft\" event can also be handled if the other\n      contents of the packet header are of interest. No further\n      analysis is done as the complexity required to correctly\n      identify destination endpoints of connections doesn't seem worth\n      it as RH0 has been deprecated by RFC 5095.\n\n    - For RH0 headers without any segments left, a \"routing0_header\"\n      flow_weird event is raised, but further analysis still occurs as\n      normal.\n\n2.0-182 | 2012-03-28 15:01:57 -0700\n\n  * Remove dead tcp_checksum function from net_util. (Jon Siwek)\n\n  * Change routing0_data_to_addrs BIF to return vector of addresses.\n    The order of addresses in type 0 routing headers is\n    interesting/important. (Jon Siwek)\n\n\n2.0-179 | 2012-03-23 17:43:31 -0700\n\n  * Remove the default \"tcp or udp or icmp\" filter. In default mode,\n    Bro would load the packet filter script framework which installs a\n    filter that allows all packets, but in bare mode (the -b option),\n    this old filter would not follow IPv6 protocol chains and thus\n    filter out packets with extension headers. (Jon Siwek)\n\n  * Update PacketFilter/Discarder code for IP version independence.\n    (Jon Siwek)\n\n  * Fix some IPv6 header related bugs. (Jon Siwek)\n\n  * Add IPv6 fragment reassembly. (Jon Siwek)\n\n  * Add handling for IPv6 extension header chains. Addresses #531.\n    (Jon Siwek)\n\n    - The script-layer 'pkt_hdr' type is extended with a new 'ip6' field\n      representing the full IPv6 header chain.\n\n    - The 'new_packet' event is now raised for IPv6 packets. Addresses\n      #523.\n\n    - A new event called 'ipv6_ext_header' is raised for any IPv6\n      packet containing extension headers.\n\n    - A new event called 'esp_packet' is raised for any packets using\n      ESP ('new_packet' and 'ipv6_ext_header' events provide\n      connection info, but that info can't be provided here since the\n      upper-layer payload is encrypted).\n\n    - The 'unknown_protocol' weird is now raised more reliably when\n      Bro sees a transport protocol or IPv6 extension header it can't\n      handle. Addresses #522.\n\n  * Add unit tests for IPv6 fragment reassembly, ipv6_ext_headers and\n    esp_packet events. (Jon Siwek)\n\n  * Adapt FreeBSD's inet_ntop implementation for internal use. Now we\n    get consistent text representations of IPv6 addresses across\n    platforms. (Jon Siwek)\n\n  * Update documentation for new syntax of IPv6 literals. (Jon Siwek)\n\n\n2.0-150 | 2012-03-13 16:16:22 -0700\n\n  * Changing the regular expression to allow Site::local_nets in\n    signatures. (Julien Sentier)\n\n  * Removing a line of dead code. Found by . Closes #786. (Julien\n    Sentier)\n\n2.0-146 | 2012-03-13 15:39:38 -0700\n\n  * Change IPv6 literal constant syntax to require encasing square\n    brackets. (Jon Siwek)\n\n2.0-145 | 2012-03-09 15:10:35 -0800\n\n  * Remove the match expression. 'match' and 'using' are no longer\n    keywords. Addressed #753. (Jon Siwek)\n\n2.0-143 | 2012-03-09 15:07:42 -0800\n\n  * Fix a BRO_PROFILER_FILE/mkstemp portability issue. Addresses #794.\n    (Jon Siwek)\n\n2.0-139 | 2012-03-02 09:33:04 -0800\n\n  * Changes to how script coverage integrates with test suites. (Jon Siwek)\n\n    - BRO_PROFILER_FILE now passes .X* templated filenames to mkstemp\n      for generating unique coverage state files.\n\n    - Rearranging Makefile targets.  The general rule is that if the\n      all/brief target fails out due to a test failure, then the dependent\n      coverage target won't run, but can still be invoked directly later.\n      (e.g. make brief || make coverage)\n\n  * Standardized on the &default function for SSL constants. (Seth\n    Hall)\n\n  * Adding btest group \"leaks\" to leak tests. (Robin Sommer)\n\n  * Adding btest group \"comm\" to communication tests for parallelizing\n    execution with new btest version. (Robin Sommer)\n\n  * Sorting all output for diffing in the external tests. (Robin\n    Sommer)\n\n  * Cleaned up dead code from the old SSL analyzers. Reported by\n    Julien Sentier. (Seth Hall)\n\n  * Update/add tests for broccoli IPv6 addr/subnet support. Addresses\n    #448. (Jon Siwek)\n\n  * Remove connection compressor. Addresses #559. (Jon Siwek)\n\n  * Refactor IP_Hdr class ctors. Addresses #532. (Jon Siwek)\n\n\n2.0-121 | 2012-02-24 16:34:17 -0800\n\n  * A number of smaller memory fixes and code cleanups. (Julien\n    Sentier)\n\n  * Add to_subnet bif. Fixes #782). (Jon Siwek)\n\n  * Fix IPAddr::Mask/ReverseMask not allowing argument of 0. (Jon\n    Siwek)\n\n  * Refactor IPAddr v4 initialization from string. Fixes #775. (Jon Siwek)\n\n  * Parse the dotted address string directly instead of canonicalizing\n    and passing to inet_pton. (Jon Siwek)\n\n\n2.0-108 | 2012-02-24 15:21:07 -0800\n\n  * Refactoring a number of usages of new IPAddr class. (Jon Siwek)\n\n  * Fixed a bug in remask_addr bif. (Jon Siwek)\n\n2.0-106 | 2012-02-24 15:02:20 -0800\n\n  * Raise minimum required CMake version to 2.6.3. (Jon Siwek)\n\n2.0-104 | 2012-02-24 14:59:12 -0800\n\n  * Add test case for FTP over IPv4. (Daniel Thayer)\n\n  * Fix IPv6 URLs in ftp.log. (Daniel Thayer)\n\n  * Add a test for FTP over IPv6 (Daniel Thayer)\n\n  * Fix parsing of FTP EPRT command and EPSV response. (Daniel Thayer)\n\n2.0-95 | 2012-02-22 05:27:34 -0800\n\n  * GeoIP installation documentation update. (Seth Hall)\n\n  * Decrease strictness of parsing IPv4 strings into addrs. Fixes #775. (Jon Siwek)\n\n  * Fix memory leak in DNS manager. Fixes #777. (Jon Siwek)\n\n  * Fix IPAddr/IPPrefix serialization bugs. (Jon Siwek)\n\n  * Fix compile error. (Jon Siwek)\n\n2.0-86 | 2012-02-17 15:41:06 -0800\n\n  * Changing ARP detection to always kick in even if no analyzer is\n    activated. (Robin Sommer)\n\n  * DNS name lookups performed by Bro now also query AAAA records.\n    DNS_Mgr handles combining the results of the A and AAAA queries\n    for a given hostname such that at the scripting layer, the name\n    resolution can yield a set with both IPv4 and IPv6 addresses. (Jon\n    Siwek)\n\n  * Add counts_to_addr and addr_to_counts conversion BIFs. (Jon Siwek)\n\n  * Change HashKey threshold for using H3 to 36 bytes. (Jon Siwek)\n\n  * Remove mention of --enable-brov6 in docs. (Daniel Thayer)\n\n  * Remove --enable-brov6 from configure usage text (Daniel Thayer)\n\n  * Add a test and baseline for addr_to_ptr_name BiF. (Daniel Thayer)\n\n  * Adding a test and baseline for ptr_name_to_addr BiF. (Seth Hall)\n\n  * Fix the ptr_name_to_addr BiF to work with IPv6 (Daniel Thayer)\n\n  * Fix a memory leak that perftools now complains about. (Jon Siwek)\n\n  * Remove --enable-brov6 flag, IPv6 now supported by default. (Jon Siwek)\n\n    Some script-layer changes of note:\n\n    - dns_AAAA_reply event signature changed: the string representation\n      of an IPv6 addr is easily derived from the addr value, it doesn't\n      need to be another parameter.  This event also now generated directly\n      by the DNS analyzer instead of being \"faked\" into a dns_A_reply event.\n\n    - Removed addr_to_count BIF.  It used to return the host-order\n      count representation of IPv4 addresses only.  To make it more\n      generic, we might later add a BIF to return a vector of counts\n      in order to support IPv6.\n\n    - Changed the result of enclosing addr variables in vertical pipes\n      (e.g. |my_addr|) to return the bit-width of the address type which\n      is 128 for IPv6 and 32 for IPv4.  It used to function the same\n      way as addr_to_count mentioned above.\n\n    - Remove bro_has_ipv6 BIF\n\n2.0-57 | 2012-02-10 00:02:35 -0800\n\n  * Fix typos in the documentation. (Daniel Thayer)\n\n  * Fix compiler warning about Brofiler ctor init list order. (Jon Siwek)\n\n  * Fix missing optional field access in webapp signature_match handler. (Jon Siwek)\n\n2.0-41 | 2012-02-03 04:10:53 -0500\n\n  * Updates to the Software framework to simplify the API. (Bernhard\n    Amann)\n\n2.0-40 | 2012-02-03 01:55:27 -0800\n\n  * Fix typos in documentation. (Daniel Thayer)\n\n  * Fix sorting of lines in Brofiler coverage.log. (Daniel Thayer)\n\n2.0-38 | 2012-01-31 11:50:53 -0800\n\n  * Canonify sorting of lines in Brofiler coverage.log. (Daniel\n    Thayer)\n\n2.0-36 | 2012-01-27 10:38:14 -0800\n\n  * New \"Brofiler\" mode that tracks and records script statements\n    executed during runtime. (Jon Siwek)\n\n    Use the BROFILER_FILE environment variable to point to a file in\n    which statement usage statistics from Bro script-layer can be\n    output.\n\n    Script statements that should be ignored can be marked with a \"#\n    @no-test\" comment. For example:\n\n        print \"don't cover\"; # @no-test\n\n        if ( F )\n            { # @no-test\n            ...\n            }\n\n  * Integrated coverage measurement into test-suite. (Jon Siwek)\n\n2.0-20 | 2012-01-25 16:34:51 -0800\n\n  * BiF cleanup (Matthias Vallentin)\n\n      - Rename NFS3::mode2string to a more generic file_mode().\n\n      - Unify do_profiling()/make_connection_persistent()/expect_connection()\n        to return any (i.e., nothing) instead of bools.\n\n      - Perform type checking on count-to-port conversion. Related to #684.\n\n      - Remove redundant connection_record() BiF. The same\n        functionality is provided by lookup_connection().\n\n      - Remove redundant active_connection() BiF. The same\n        functionality is provided by connection_exists().\n\n      - exit() now takes the exit code as argument.\n\n      - to_port() now received a string instead of a count.\n\n2.0-9 | 2012-01-25 13:47:13 -0800\n\n  * Allow local table variables to be initialized with {} list\n    expressions. (Jon Siwek)\n\n2.0-7 | 2012-01-25 13:38:09 -0800\n\n  * Teach CompHash to allow indexing by records with vector/table/set\n    fields. Addresses #464. (Jon Siwek)\n\n2.0-5 | 2012-01-25 13:25:19 -0800\n\n  * Fixed a bug resulting in over-logging of detected webapps. (Seth Hall)\n\n  * Make communication log baseline test more reliable. (Jon Siwek)\n\n  * Fixed some broken links in documentation. (Daniel Thayer)\n\n2.0 | 2012-01-11 13:52:22 -0800\n\n  * Adding script reference documentation. (The Team).\n\n2.0-beta-194 | 2012-01-10 10:44:32 -0800\n\n  * Added an option for filtering out URLs before they are turned into\n    HTTP::Incorrect_File_Type notices. (Seth Hall)\n\n  * Fix ref counting bug in BIFs that call internal_type. Addresses\n    #740. (Jon Siwek)\n\n  * Adding back the stats.bro file. (Seth Hall)\n\n\n2.0-beta-188 | 2012-01-10 09:49:29 -0800\n\n  * Change SFTP/SCP log rotators to use 4-digit year in filenames\n    Fixes #745. (Jon Siwek)\n\n  * Adding back the stats.bro file. Addresses #656. (Seth Hall)\n\n2.0-beta-185 | 2012-01-09 18:00:50 -0800\n\n  * Tweaks for OpenBSD support. (Jon Siwek)\n\n2.0-beta-181 | 2012-01-08 20:49:04 -0800\n\n  * Add SFTP log postprocessor that transfers logs to remote hosts.\n    Addresses #737. (Jon Siwek)\n\n  * Add FAQ entry about disabling NIC offloading features. (Jon Siwek)\n\n  * Add a file NEWS with release notes. (Robin Sommer)\n\n2.0-beta-177 | 2012-01-05 15:01:07 -0800\n\n  * Replace the --snaplen/-l command line option with a\n    scripting-layer option called \"snaplen\" (which can also be\n    redefined on the command line, e.g. `bro -i eth0 snaplen=65535`).\n\n  * Reduce snaplen default from 65535 to old default of 8192. Fixes\n    #720. (Jon Siwek)\n\n2.0-beta-174 | 2012-01-04 12:47:10 -0800\n\n  * SSL improvements. (Seth Hall)\n\n    - Added the ssl_session_ticket_handshake event back.\n\n    - Fixed a few bugs.\n\n    - Removed the SSLv2.cc file since it's not used.\n\n2.0-beta-169 | 2012-01-04 12:44:39 -0800\n\n  * Tuning the pretty-printed alarm mails, which now include the\n    covered time range into the subject. (Robin Sommer)\n\n  * Adding top-level \"test\" target to Makefile. (Robin Sommer)\n\n  * Adding SWIG as dependency to INSTALL. (Robin Sommer)\n\n2.0-beta-155 | 2012-01-03 15:42:32 -0800\n\n  * Remove dead code related to record type inheritance. (Jon Siwek)\n\n2.0-beta-152 | 2012-01-03 14:51:34 -0800\n\n  * Notices now record the transport-layer protocol. (Bernhard Amann)\n\n2.0-beta-150 | 2012-01-03 14:42:45 -0800\n\n  * CMake 2.6 top-level 'install' target compat. Fixes #729. (Jon Siwek)\n\n  * Minor fixes to test process. Addresses #298.\n\n  * Increase timeout interval of communication-related btests. (Jon Siwek)\n\n2.0-beta-145 | 2011-12-19 11:37:15 -0800\n\n  * Empty fields are now logged as \"(empty)\" by default. (Robin\n    Sommer)\n\n  * In log headers, only escape information when necessary. (Robin\n    Sommer)\n\n2.0-beta-139 | 2011-12-19 07:06:29 -0800\n\n  * The hostname notice email extension works now, plus a general\n    mechanism for adding delayed information to notices. (Seth Hall)\n\n  * Fix &default fields in records not being initialized in coerced\n    assignments. Addresses #722. (Jon Siwek)\n\n  * Make log headers include the type of data stored inside a set or\n    vector (\"vector[string]\"). (Bernhard Amann)\n\n2.0-beta-126 | 2011-12-18 15:18:05 -0800\n\n  * DNS updates.  (Seth Hall)\n\n    - Fixed some bugs with capturing data in the base DNS script.\n\n    - Answers and TTLs are now vectors.\n\n    - A warning that was being generated (dns_reply_seen_after_done)\n      from transaction ID reuse is fixed.\n\n  * SSL updates. (Seth Hall)\n\n    - Added is_orig fields to the SSL events and adapted script.\n\n    - Added a field named last_alert to the SSL log.\n\n    - The x509_certificate function has an is_orig field now instead\n      of is_server and its position in the argument list has moved.\n\n    - A bit of reorganization and cleanup in the core analyzer. (Seth\n      Hall)\n\n2.0-beta-121 | 2011-12-18 15:10:15 -0800\n\n  * Enable warnings for malformed Broxygen xref roles. (Jon Siwek)\n\n  * Fix Broxygen confusing scoped IDs at start of line as function\n    parameter. (Jon Siwek)\n\n  * Allow Broxygen markup \"##<\" for more general use. (Jon Siwek)\n\n2.0-beta-116 | 2011-12-16 02:38:27 -0800\n\n  * Cleanup some misc Broxygen css/js stuff. (Jon Siwek)\n\n  * Add search box to Broxygen docs. Fixes #726. (Jon Siwek)\n\n  * Fixed major bug with cluster synchronization, which was not\n    working. (Seth Hall)\n\n  * Fix missing action in notice policy for looking up GeoIP data.\n    (Jon Siwek)\n\n  * Better persistent state configuration warning messages (fixes\n    #433). (Jon Siwek)\n\n  * Renaming HTTP::SQL_Injection_Attack_Against to\n    HTTP::SQL_Injection_Victim. (Seth Hall).\n\n  * Fixed DPD signatures for IRC. Fixes #311. (Seth Hall)\n\n  * Removing Off_Port_Protocol_Found notice. (Seth Hall)\n\n  * Teach Broxygen to more generally reference attribute values by name. (Jon Siwek)\n\n  * SSH::Interesting_Hostname_Login cleanup.  Fixes #664. (Seth Hall)\n\n  * Fixed bug that was causing the malware hash registry script to\n    break. (Seth Hall)\n\n  * Remove remnant of libmagic optionality. (Jon Siwek)\n\n2.0-beta-98 | 2011-12-07 08:12:08 -0800\n\n  * Adapting test-suite's diff-all so that it expands globs in both\n    current and baseline directory. Closes #677. (Robin Sommer)\n\n2.0-beta-97 | 2011-12-06 11:49:29 -0800\n\n  * Omit loading local-<node>.bro scripts from base cluster framework.\n    Addresses #663 (Jon Siwek)\n\n2.0-beta-94 | 2011-12-03 15:57:19 -0800\n\n  * Adapting attribute serialization when talking to Broccoli. (Robin\n    Sommer)\n\n2.0-beta-92 | 2011-12-03 15:56:03 -0800\n\n  * Changes to Broxygen master script package index.  (Jon Siwek)\n\n    - Now only lists packages as those directories in the script hierarchy\n      that contain an __load__.bro file.\n\n    - Script packages (dirs with a __load__.bro file), can now include\n      a README (in reST format) that will automatically be appended\n      under the link to a specific package in the master package\n      index.\n\n2.0-beta-88 | 2011-12-02 17:00:58 -0800\n\n  * Teach LogWriterAscii to use BRO_LOG_SUFFIX environemt variable.\n    Addresses #704. (Jon Siwek)\n\n  * Fix double-free of DNS_Mgr_Request object. Addresses #661.\n\n  * Add a remote_log_peer event which comes with an event_peer record\n    parameter. Addresses #493. (Jon Siwek)\n\n  * Remove example redef of SMTP::entity_excerpt_len from local.bro.\n    Fixes error emitted when loading local.bro in bare mode. (Jon\n    Siwek)\n\n  * Add missing doc targets to top Makefile; remove old doc/Makefile.\n    Fixes #705. (Jon Siwek)\n\n  * Turn some globals into constants. Addresses #633. (Seth Hall)\n\n  * Rearrange packet filter and DPD documentation. (Jon Siwek)\n\n2.0-beta-72 | 2011-11-30 20:16:09 -0800\n\n  * Fine-tuning the Sphinx layout to better match www. (Jon Siwek and\n    Robin Sommer)\n\n2.0-beta-69 | 2011-11-29 16:55:31 -0800\n\n  * Fixing ASCII logger to escape the unset-field place holder if\n    written out literally. (Robin Sommer)\n\n2.0-beta-68 | 2011-11-29 15:23:12 -0800\n\n  * Lots of documentation polishing. (Jon Siwek)\n\n  * Teach Broxygen the \".. bro:see::\" directive. (Jon Siwek)\n\n  * Teach Broxygen :bro:see: role for referencing any identifier in\n    the Bro domain. (Jon Siwek)\n\n  * Teach Broxygen to generate an index of Bro notices. (Jon Siwek)\n\n  * Fix order of include directories. (Jon Siwek)\n\n  * Catch if logged vectors do not contain only atomic types.\n    (Bernhard Amann)\n\n2.0-beta-47 | 2011-11-16 08:24:33 -0800\n\n  * Catch if logged sets do not contain only atomic types. (Bernhard\n    Amann)\n\n  * Promote libz and libmagic to required dependencies. (Jon Siwek)\n\n  * Fix parallel make from top-level to work on more platforms. (Jon\n    Siwek)\n\n  * Add decode_base64_custom(). Addresses #670 (Jon Siwek)\n\n  * A bunch of Sphinx-doc reorgs and polishing. (Jon Siwek)\n\n2.0-beta-28 | 2011-11-14 20:09:28 -0800\n\n  * Binary packaging script tweaks. We now require CMake 2.8.6. (Jon Siwek)\n\n  * More default \"weird\" tuning for the \"SYN_with_data\" notice. (Seth\n    Hall)\n\n  * Tiny bugfix for http file extraction along with test. (Seth Hall)\n\n2.0-beta-21 | 2011-11-06 19:27:22 -0800\n\n  * Quickstart doc fixes. (Jon Siwek)\n\n2.0-beta-19 | 2011-11-03 17:41:00 -0700\n\n  * Fixing packet filter test. (Robin Sommer)\n\n2.0-beta-12 | 2011-11-03 15:21:08 -0700\n\n  * No longer write to the PacketFilter::LOG stream if not reading\n    traffic. (Seth Hall)\n\n2.0-beta-10 | 2011-11-03 15:17:08 -0700\n\n  * Notice framework documentation update. (Seth Hall)\n\n  * Fixing compiler warnings (addresses #388) (Jon Siwek)\n\n2.0-beta | 2011-10-27 17:46:28 -0700\n\n  * Preliminary fix for SSH login detection: we need a counted measure\n    of payload bytes (not ack tracking and not with the IP header\n    which is what we have now). (Seth Hall)\n\n  * Fixing send_id() problem. We no longer update &redef functions.\n    Updating code on the fly isn't fully supported. (Robin Sommer)\n\n  * Tuning the format of the pretty-printed alarm summaries. (Robin\n    Sommer)\n\n1.6-dev-1508 | 2011-10-26 17:24:50 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1507 | 2011-10-26 15:10:18 -0700\n\n  * Baseline updates. (Robin Sommer)\n\n1.6-dev-1506 | 2011-10-26 14:48:43 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1505 | 2011-10-26 14:43:58 -0700\n\n  * A new base script that pretty-prints alarms in the regular\n    summary. (Robin Sommer)\n\n  * Adding a dummy log writer WRITER_NONE that just discards\n    everything. (Robin Sommer)\n\n1.6-dev-1498 | 2011-10-26 14:30:15 -0700\n\n  * Adding instructions to local.bro how to do ACTION_ALARM by\n  default. (Seth Hall)\n\n1.6-dev-1495 | 2011-10-26 10:15:58 -0500\n\n  * Updated unit test baselines. (Seth Hall)\n\n1.6-dev-1491 | 2011-10-25 20:22:56 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1482 | 2011-10-25 19:08:32 -0700\n\n  * Fixing bug in log managers predicate evaluation. (Robin Sommer)\n\n1.6-dev-1481 | 2011-10-25 18:17:03 -0700\n\n  * Fix a problem with DNS servers being logged that aren't actually\n    servers. (Seth Hall)\n\n  * Changed generated root cert DN format for RFC2253 compliance. (Jon\n    Siwek)\n\n  * Removed :bro doc directives from notice documentation. (Seth Hall)\n\n  * New notice framework docs. (Seth Hall)\n\n  * Adding sub messages to emails. (Seth Hall)\n\n  * Adding extra fields to smtp and http to track transaction depth.\n    (Seth Hall)\n\n  * Fix for SSH login detection heuristic. (Seth Hall)\n\n  * Removed some fields from http analysis that weren't commonly\n    needed or were wrong. (Seth Hall)\n\n  * Updated/fixed MSIE version parsing in the software framework.\n    (Seth Hall)\n\n  * Update Mozilla trust roots to index certs by subject distinguished\n    name. (Jon Siwek)\n\n  * weird.bro rewrite. (Seth Hall)\n\n  * More notice email tuning. (Seth Hall)\n\n  * Slightly restructured http file hashing to fix a bug. (Seth Hall)\n\n  * Changed the notice name for interesting ssh logins to correctly\n    reflect semantics of the notice.  (Seth Hall)\n\n  * Field name change to notice framwork.  $result -> $action\n\n    - $result is renamed to $action to reflect changes to the notice\n      framework since there is already another result-like field\n      ($suppress_for) and there may be more in the future.\n\n    - Slipped in a change to add connection information to notice\n      emails too. (Seth Hall)\n\n  * Small script refinements and documentation updates. (Seth Hall)\n\n  * Pass over upgrade guide. (Robin Sommer)\n\n\n1.6-dev-1430 | 2011-10-21 10:39:09 -0700\n\n  * Fixing crash with unknown debug streams. Closes #643. (Robin\n    Sommer)\n\n  * Code to better handle interpreter errors, which can now be turned\n    into non-fatal runtime errors rather than immediate aborts. (Robin\n    Sommer).\n\n  * Remove old make-src-packages script. (Jon Siwek)\n\n  * Fixing a bunch of format strings. Closes #567. (Robin Sommer)\n\n  * Cleaning up some distribution files. (Robin Sommer)\n\n  * Various test, doc, and installation fixes/tweaks. (Seth Hall, Jon\n    Siwek and Robin Sommer).\n\n  * Varios smaller policy fixes and tweaks (Seth Hall).\n\n  * Moving docs from web server into distribution. (Robin Sommer)\n\n  * Fixing more (small) memory leaks. (Robin Sommer)\n\n  * Profiling support for DNS_Mgr and triggers. With\n    misc/profiling.bro, both now report a line in prof.log with some\n    counters on usage. (Robin Sommer)\n\n  * Fixing DNS memory leaks. Closes #534. (Robin Sommer)\n\n  * Fix code for disabling analyzers. Closes #577. (Robin Sommer)\n\n  * Changed communication option from listen_encrypted to listen_ssl.\n    (Seth Hall)\n\n  * Modification to the Communication framework API. (Seth Hall)\n\n    - Simplified the communication API and made it easier to change\n      to encrypted connections by not having separate variables to\n      define encrypted and unencrypted ports.\n\n    - Now, to enable listening without configuring nodes just\n      load the frameworks/communication/listen script.\n\n    - If encrypted listening is desired set the following:\n    \tredef Communication::listen_encrypted=T;\n\n  * Connection compressor now disabled by default. Addresses #559.\n    (Robin Sommer)\n\n\n1.6-dev-1372 | 2011-10-06 18:09:17 -0700\n\n  * Filtering some potentially high-volume DNS weirds. (Robin Sommer)\n\n  * DNS now raises DPD events. Closes #577. (Robin Sommer)\n\n  * Fixing a bunch of compiler warnings. (Robin Sommer)\n\n  * Remote logs are auto-flushed if the last write was longer than a\n    second ago. Addresses #498. (Robin Sommer)\n\n  * Fix missing from previous MIME commit. (Robin Sommer)\n\n1.6-dev-1366 | 2011-10-06 17:05:21 -0700\n\n  * Make CompHash computation/recovery for functions deterministic.\n    Closes #636. (Jon Siwek)\n\n  * Removing unnecessary @load in local.bro. (Robin Sommer)\n\n  * Optimizing some MIME code. (Robin Sommer)\n\n  * Speed improvements in logging code. (Robin Sommer)\n\n  * Consolidating some node-specific functionality from scripts in\n    broctl repo. (Jon Siwek)\n\n  * Another fix the for 1xx script code. (Robin Sommer)\n\n1.6-dev-1352 | 2011-10-05 16:20:51 -0700\n\n  * Fix for optional HTTP::Info status_code. (Jon Siwek)\n\n  * Teaking some external testing scripts. (Jon Siwek)\n\n  * HTTP bug fix reported by Martin Holste. (Seth Hall)\n\n  * More script tuning. (Seth Hall)\n\n    - Moved some of the weird events back to the base/ directory.\n\n    - SSL fixes, updates, and performance optimization.\n\n  * More adjustment to reduce Weird volumes. (Seth Hall)\n\n  * Fixed an error when calculating x509 certificate hashes (reported\n    by Martin Holste). (Seth Hall)\n\n  * Clean up to cluster framework to make event handling clearer.\n    (Seth Hall)\n\n  * Fixed a bug in the notice framework. (Seth Hall)\n\n  * Bug fix for FTP analysis script. (Seth Hall)\n\n1.6-dev-1333 | 2011-09-29 22:29:51 -0700\n\n  * Fixing a number of memory leaks. (Robin Sommer)\n\n  * Loaded_scripts.log is indented with spaces now and makes more\n     sense to look at. (Seth Hall)\n\n  * Teach HTTP parser to derive content length of multipart/byteranges\n     bodies. Addresses #488. (Jon Siwek)\n\n  * Change logging of HTTP 1xx responses to occur in their own\n    columns. Addresses #411. (Jon Siwek)\n\n  * Fix handling of HTTP 1xx response codes. Addresses #411).\n\n  * Taking advantage of yet another trick to get installed browser\n  plugins. (Seth Hall)\n\n    - With the software-browser-plugins script you can watch for Omniture\n      advertising servers to grab the list of installed plugins.\n\n    - I reorganized the plugin detection a bit too to abstract it better.\n\n    - Removed the WEB_ prefix from all of the Software::Type HTTP enums.\n      They were essentially redundant due to the full name already being\n      HTTP::SERVER (for example).\n\n1.6-dev-1316 | 2011-09-28 16:50:05 -0700\n\n  * Unit test cleanup. Updated README and collected coverage-related\n    tests in a common dir. (Jon Siwek)\n\n  * Fixes for known-services. (Seth Hall)\n\n  * Ported and 2.0ized the capture-loss script. (Seth Hall)\n\n  * Communication fix and extension.(Robin Sommer)\n\n    - Removing unnecessary log flushing. Closes #498.\n\n    - Adding new BiF disconnect() that shuts a connection to a peer down.\n\n    - terminate_connection() now first flushes any still buffered log\n      messages.\n\n  * Fix for high SSL memory usage by adding &transient attribute to\n    top-level SSL pac array type. Closes #574. (Robin Sommer)\n\n  * Fix a small bug in the metrics framework. (Seth Hall)\n\n  * Temporarily removing scripts that aren't ready to be included.\n    Will return before next release.  (Seth Hall)\n\n  * New SSL policy scripts.  (Seth Hall)\n\n    - protocols/ssl/expiring-certs uses time based information from\n      certificates to determine if they will expire soon, have already\n      expired, or haven't yet become valid.\n\n    - protocols/ssl/extract-certs-pem is a script for taking certs off\n      the line and converting them to PEM certificates with the openssl\n      command line tool then dumping them to a file.\n\n  * Notice::type_suppression_intervals: table[Notice::Type] of\n    interval can be used to modify the suppression intervals for\n    entire types of notices. (Seth Hall)\n\n  * EOF SSL protocol violations are only generated a single time now.\n    (Seth Hall)\n\n  * Script level fixes.  (Seth Hall)\n\n    - Fixed a type name conflict in the Known namespace.\n\n    - Fixed a DPD framework bug that was causing Reporter messages.\n\n    - Fixed the notice_policy log.\n\n    - Predicate functions are now logged.\n\n    - Predicate functions are now optional.  If not given, it's assumed that\n      the result should always apply. (Seth Hall)\n\n    - Fix a problem with accidental and mistaken HTTP log lines.\n\n1.6-dev-1293 | 2011-09-22 19:44:37 -0700\n\n  * Smaller script tweaks. (Seth Hall)\n\n  * Duplicate notice suppression. (Seth Hall)\n\n    - Duplicate notices are discovered with the new Notice::Info\n      field $identifier.  It's a string that is left up to the\n      notice implementor to define which would indicate a\n      fundamentally duplicate notice.  The field is optional and\n      if it's not included it's not possible for notice\n      suppression to take place.\n\n    - Duplicate notices are suppressed by default for the interval\n      defined by the Notice::default_suppression_interval variable\n      (1 hour by default).\n\n    - A new notice action was defined ACTION_NO_SUPPRESS to prevent\n      suppression for a specific notice instance.  A convenience set\n      named not_suppressed_types was also created to not suppress\n      entire notice types.\n\n    - A new field was added to the PolicyItem type to modify the length\n      of time a notice should be suppressed if the predicate matches.\n      The field is named $suppress_for.  This name makes the code more\n      readable like this: $suppress_for = 1day\n\n    - New events were created to give visibility into the notice\n      framework's suppression activity.\n      - event Notice::begin_suppression(n: Notice::Info)\n      - event Notice::suppressed(n: Notice::Info)\n      - event Notice::end_suppression(n: Notice::Info)\n\n    - The suppression.bro script doesn't have a baseline because\n      it is causing a segfault in Bro.  This one test is the\n      reason that this is being integrated into a branch instead\n      of master. (Seth Hall)\n\n  * Fix crash on exit. Addresses #607. (Jon Siwek)\n\n  * Fix PktSrc setting next_timestamp even when no packet available.\n    (Jon Siwek)\n\n  * Fix lack of NUL-termination in to_upper/to_lower BIF's return val.\n    (Jon Siwek)\n\n  * Fixing unit tests and some minor bugs. (Jon Siwek)\n\n  * Fix broctl cluster log rotation. Addresses #619. (Jon Siwek)\n\n  * Added session ID to the SSL logging. (Seth Hall)\n\n  * Adding \"install-aux\" target + updating bro-aux submodule. (Jon\n    Siwek)\n\n  * Cleaning up INSTALL and README. (Jon Siwek)\n\n  * Remove $Id$ tags. (Jon Siwek)\n\n  * Remove policy.old directory. Addresses #511. (Jon Siwek)\n\n  * Small rework with ssl base script to reduce memory usage. (Seth\n    Hall)\n\n  * Updated the mozilla root certs. (Seth Hall)\n\n1.6-dev-1261 | 2011-09-15 17:13:55 -0700\n\n  * Memory leak fixes. Addresses #574 (Jon Siwek)\n\n  * Add configure options for ruby/bindings integration. (Jon Siwek)\n\n  * Fix filter path_func to allow record argument as a subset of\n    stream's columns. Addresses #600. (Jon Siwek)\n\n  * Log rotation is now controlled directly through Filter records. (Jon Siwek)\n\n  * Fix indexing for record types with optional fields. Addresses #378\n    (Jon Siwek)\n\n1.6-dev-1248 | 2011-09-15 16:01:32 -0700\n\n  * Removed custom malloc() implementation for FreeBSD. Closes #557.\n    (Jon Siwek)\n\n  * Testing/external scripts no longer compute MD5 checksums for SMTP\n    entities. (Robin Sommer)\n\n  * External tests no longer include the full content of mismatching\n    files in the diagnostics output. (Robin Sommer)\n\n1.6-dev-1241 | 2011-09-14 22:51:52 -0400\n\n  * Fixing a major memory utilization issues with SSL analysis. (Seth\n    Hall)\n\n  * Enhancements to HTTP analysis: (Seth Hall)\n\n      - More options for the header-names.bro script.\n\n      - New script for logging header names and values. Closes #519.\n        (Seth Hall)\n\n      - HTTP body size measurement added to http.log.\n\n      - The value of the content-length headers has now been removed\n        in the default output but it could be added back locally at an\n        installation by a user.\n\n      - Added fields to indicate if some parsing interruption happened\n        during the body transfer. Closes #581 (Seth Hall)\n\n  * Misc smaller usability and correctness updates: (Seth Hall)\n\n    - Removed an notice definition from the base SSL scripts.\n\n    - Moved a logging stream ID into the export section for known-services\n      and bumped priority for creating the stream.\n\n    - Adding configuration knobs for the SQL injection attack detection\n      script and renaming the HTTP::SQL_Injection_Attack notice to\n      HTTP::SQL_Injection_Attack_Against\n\n    - Bumped priority when creating Known::CERTS_LOG.\n\n    - Fixing a warning from the cluster framework. (Seth Hall)\n\n  * Bugfix for log writer, which didn't escape binary stuff in some\n    situations. Closes #585. (Robin Sommer)\n\n  * A larget set of changes to the testing/external infrastructure.\n    The traces for external test-suites are no longer kept inside the\n    repositories themselves but downloaded separately via curl. This\n    is because git is pretty bad at dealing with large files. See the\n    README for more information. (Robin Sommer)\n\n1.6-dev-1221 | 2011-09-08 08:41:17 -0700\n\n  * Updates for documentation framework and script docs. (Jon Siwek)\n\n  * The script level PF_RING support isn't working so removing it.\n    (Seth Hall)\n\n  * Delete SSL certificates from memory after ssl_established event.\n    (Seth Hall)\n\n  * Small fixes for SSL analysis. (Seth Hall)\n\n1.6-dev-1212 | 2011-09-07 16:15:28 -0700\n\n  * Internally, the UID generation can now return values from\n    different pool for better reproducability in testing mode.\n    (Gilbert Clark).\n\n  * Added new BiF unique_id_from(pool: string, prefix: string) that\n    allows the user to specify a randomness pool. (Gilbert Clark)\n\n1.6-dev-1198 | 2011-09-07 11:03:36 -0700\n\n  * Extended header for ASCII log that make it easier for scripts to\n    parse Bro log files. (Gilbert Clark)\n\n  * Potential fix for rotation crashes. Addresses #588. (Robin Sommer)\n\n  * Added PF_RING load balancing support to the scripting layer,\n    enabled by loading the misc/pf-ring-load-balancing script. (Seth\n    Hall)\n\n  * Added a BiF setenv() for setting environment variables. (Seth\n    Hall)\n\n1.6-dev-1184 | 2011-09-04 09:34:50 -0700\n\n  * FindPCAP now links against thread library when necessary (e.g.\n    PF_RING's libpcap). (Jon Siwek)\n\n  * Install binaries with an RPATH. (Jon Siwek)\n\n  * Fix for a case where nested records weren't coerced even though\n    possible. (Jon Siwek)\n\n  * Changed ASCII writer to delay creation of log after rotation until\n    next write.\n\n  * Changed default snaplen to 65535 and added a -l/--snaplen command\n    line option to set it explicitly. Addresses #447. (Jon Siwek)\n\n  * Various updates to logging framework. (Seth Hall)\n\n  * Changed presentation of enum labels to include namespace. (Jon\n    Siwek)\n\n  * HTTP analyzer is now enabled with any of the HTTP events. (Seth\n    Hall)\n\n  * Fixed missing format string that caused some segfaults. (Gregor\n    Maier)\n\n  * ASCII writer nows prints time interval with 6 decimal places.\n    (Gregor Maier)\n\n  * Added a Reporter::fatal BIF. (Jon Siwek)\n\n  * Fixes for GeoIP support. Addresses #538. (Jon Siwek)\n\n  * Fixed excessive memory usage of SSL analyzer on connections with\n    gaps. (Gregor Maier)\n\n  * Added a log postprocessing function that can SCP rotated logs to\n    remote hosts. (Jon Siwek)\n\n  * Added a BiF for getting the current Bro version string. (Jon\n    Siwek)\n\n  * Misc. doc/script/test cleanup. (Jon Siwek)\n\n  * Fixed bare-mode @load dependency problems. (Jon Siwek)\n\n  * Fixed check_for_unused_event_handlers option. (Jon Siwek)\n\n  * Fixing some more bare-mode @load dependency issues (Jon Siwek)\n\n  * Reorganizing btest/policy directory to match new scripts/\n    organization. Addresses #545 (Jon Siwek)\n\n  * bro scripts generated from bifs now install to\n    $prefix/share/bro/base. Addresses #545 (Jon Siwek)\n\n  * Changeed/fixed some cluster script error reporting. (Jon Siwek)\n\n  * Various script normalization. (Jon Siwek)\n\n  * Add a test that checks each individual script can be loaded in\n    bare-mode. Adressess #545. (Jon Siwek)\n\n  * Tune when c$conn is set. Addresses #554. (Gregor Maier)\n\n  * Add ConnSize_Analyzer's fields to conn.log. (Gregor Maier)\n\n  * Fixing bug in \"interesting hostnames\" detection. (Seth Hall)\n\n  * Adding metrics framework intermediate updates. (Seth Hall)\n\n1.6-dev-1120 | 2011-08-19 19:00:15 -0700\n\n  * Fix for the CompHash fix. (Robin Sommer)\n\n1.6-dev-1118 | 2011-08-18 14:11:55 -0700\n\n  * Fixing key size calculation in composite hash code. (Robin Sommer)\n\n1.6-dev-1116 | 2011-08-18 10:05:07 -0700\n\n  * Remove the 'net' type from Bro (addresses #535).\n\n  * Fix H3 assumption of an 8-bit byte/char. (Jon Siwek)\n\n  * Allow reading from interface without additional script arguments.\n    Explicitly passing in '-' as an additional command line argument\n    still allows reading a script from stdin. (Jon Siwek)\n\n  * SSH bruteforcing detection now done with metrics framework. (Seth\n    Hall)\n\n  * Updates for SQL injection attack detection to match the metrics\n    framework updates. (Seth Hall)\n\n  * Metrics framework now works on cluster setups. (Seth Hall)\n\n  * Reclassifying more DNS manager errors as non-fatal errors. (Robin\n    Sommer)\n\n  * Fix ConnSize_Analyzer when used in conjunction with connection\n    compressor. (Gregor Maier)\n\n  * Fix reporter using part of the actual message as a format string.\n    (Jon Siwek)\n\n1.6-dev-1095 | 2011-08-13 11:59:07 -0700\n\n  * A larger number of script documentation updates. Closes #543. (Jon\n    Siwek)\n\n  * Workaround for FreeBSD CMake port missing debug flags. (Jon Siwek)\n\n  * piped_exec() can now deal with null bytes. (Seth Hall)\n\n  * Fix vector initialization for lists of records with optional\n    types. Closes #485. (Jon Siwek)\n\n  * Fix redef'ing records with &default empty set fields. Closes #460.\n    (Jon Siwek)\n\n  * Fix ConnSize_Analyzer when used in conjunction with the connection\n    compressor. (Gregor Maier)\n\n  * Fix reporter using part of the actual message as a format string.\n    (Jon Siwek)\n\n  * Fixing reporter's location tracking. Closes #492. (Robin Sommer)\n\n  * Turning DNS errors into warnings. Closes #255. (Robin Sommer)\n\n  * Logging's path_func now receives the log record as argument.\n    Closes #555. (Robin Sommer)\n\n  * Functions can now be logged; their full body gets recorded.\n    Closes #506. (Robin Sommer)\n\n  * Bugfix for hostname notice email extension. (Seth Hall)\n\n  * Updates for notice framework. (Seth Hall)\n\n    - New ACTION_ADD_GEODATA to add geodata to notices in an extension\n      field named remote_location.\n\n    - Loading extend-email/hostnames by default now that it only does\n      anything when the ACTION_EMAIL action is applied (finally).\n\n  * Updates to local.bro (Seth Hall)\n\n  * Added the profiling script. (Seth Hall)\n\n  * Updates for SSH scripts. (Seth Hall)\n\n  * ConnSize analyzer is turned on by default now. (Seth Hall)\n\n  * Updates for the build system and site local scripts for cluster.\n    (Seth Hall)\n\n  * HTTP now uses the extract_filename_from_content_disposition function. (Seth Hall)\n\n  * Major SMTP script refactor. Closes #509. (Jon Siwek and Seth Hall)\n\n  * New variable Site::local_nets_table in utils/site for mapping\n    address to defined local subnet.\n\n  * Metrics framework updates, more to come. (Seth Hall)\n\n\n1.6-dev-1061 | 2011-08-08 18:25:27 -0700\n\n  * A set of new/changed tests regarding the new policy script\n    organisation. (Robin Sommer)\n\n1.6-dev-1058 | 2011-08-08 16:15:18 -0700\n\n  * Reorganisation of the scripts that Bro loads by default. (Seth\n    Hall)\n\n    - policy/ renamed to scripts/\n\n    - By default BROPATH now contains:\n    \t- scripts/\n    \t- scripts/policy\n    \t- scripts/site\n\n    - The scripts in scripts/base/protocols/ only do logging and state\n      building.\n\n    - All of scripts/base/ is loaded by by default. This can however\n      be disabled by switching Bro into \"bare mode\" using the new\n      command-line option --bare-mode (or -b). The cripts in\n      scripts/base/ don't use relative path loading to ease use of\n      bare mode (to copy and paste that script).\n\n    - The scripts in scripts/base/frameworks/ add functionality\n      without causing any additional overhead.\n\n    - All \"detection\" activity happens through scripts in\n      scripts/policy/.\n\n    - bro.init was renamed to base/init-bare.bro, and base/all.bro was\n      renamed to init-default.bro.\n\n    - local.bro now loads more functionality from policy/ and adds\n      more documentation. (Seth Hall)\n\n  * Adding default_path_func() to the logging framework that makes the\n    default naming scheme script-level controlled. (Robin Sommer)\n\n  * Reworking logging's postprocessor logic so that postprocessor\n    commands are no longer run by the log writers themselves, but\n    instead by a script level function. (Robin Sommer)\n\n  * The communication subsystem is now by default off and must be\n    enabled explicitly with a new BiF, enable_communication(). Closes\n    #540. (Robin Sommer)\n\n  * The hostname notice email extension now only add hostnames for\n    emailed noticed. (Seth Hall)\n\n  * Cleaning up doc generation. (Seth Hall)\n\n1.6-dev-1044 | 2011-08-05 19:07:32 -0700\n\n  * Fixing memory (and CPU) leak in log writer.\n\n  * Fixing crash in memory profiling. (Robin Sommer)\n\n  * Fix compiler warning. (Robin Sommer)\n\n  * Fixing missing sync in cluster setup. (Robin Sommer)\n\n\n1.6-dev-1038 | 2011-08-05 18:25:44 -0700\n\n  * Smaller updates to script docs and their generation. (Jon Siwek)\n\n  * When using a `print` statement to write to a file that has raw output\n    enabled, NUL characters in string are no longer interpreted into \"\\0\",\n    no newline is appended afterwards, and each argument to `print` is\n    written to the file without any additional separation. (Jon Siwek)\n\n  * Test portatibility tweaks. (Jon Siwek)\n\n  * Fixing PktSrc::Statistics() which retured bogus information\n    offline mode. Closes #500. (Jon Siwek)\n\n  * --with-perftools configure option now assumes --enable-perftools.\n    Closes #527. (Jon Siwek)\n\n1.6-dev-1018 | 2011-07-31 21:30:31 -0700\n\n  * Updating CHANGES. (Robin Sommer)\n\n1.6-dev-1016 | 2011-07-30 18:34:28 -0700\n\n  * Install example config files dynamically. They'll only get\n    installed when the distribution version differs from existing\n    version on disk. (Jon Siwek)\n\n  * Fixed memory leak in SSL analyzer. (Seth Hall)\n\n  * Beginning rework of metrics interface. (Seth Hall)\n\n  * New/updated unit tests for scripts. (Jon Siwek)\n\n  * New/updated documentstion for scripts. (Jon Siwek)\n\n  * A number of fixes for scripts in utils/. (Jon Siwek)\n\n1.6-dev.244 Thu Jul 28 17:08:21 PDT 2011\n\n- mask_addr() now returns subnet (addresses #512). (Jon Siwek)\n\n- Normalize Notice::Type identifiers per convention (closes #484).\n  (Jon Siwek)\n\n- Fixing default-loaded-scripts test for BSD systems. (Jon Siwek)\n\n- New piped_exec() BiF for pipeing data into an external command. (Jon\n  Siwek)\n\n1.6-dev.242 Mon Jul 25 21:42:39 PDT 2011\n\n- Adding a documentation coverage test. (Jon Siwek)\n\n- The CMake targets for generating reST docs from policy scripts are\n  now automatically generated via the genDocSourcesList.sh script.\n  (Jon Siwek)\n\n- Fixed a number of script error. (Jon Siwek)\n\n- Fixes to relative @load'ing.  (Jon Siwek)\n\n- Fixes to tests. (Robin Sommer)\n\n1.6-dev.240 Sun Jul 24 15:14:26 PDT 2011\n\n- Updated tests and test baselines. (Jon Siwek)\n\n- ASCII log writer now prints time values w/ constant 6 digit\n  precision. (Jon Siwek)\n\n- Many policy script updates acrsso the board (Seth Hall).\n\n- Moving devel-tools to bro-aux. (Robin Sommer)\n\n- BugFix for disable_analyzer(), which could cause crashes with some\n  analyzers. (Robin Sommer)\n\n- Bugfix for potential segfault in DebugLogger. (Robin Sommer)\n\n1.6-dev.226 Thu Jul 21 15:23:39 PDT 2011\n\n- Extensions to the @load and @unload process. (Jon Siwek)\n\n    * Make @load statements recognize relative paths. For example a\n      script can do \"@load ./foo\" to load a script named foo.bro that\n      lives in the same directory or \"@load ../bar\" to load a script\n      named bar.bro in the parent directory, even if those directories\n      are not contained in BROPATH.\n\n    * Reimplementation of the @prefixes statement. (Closes #486)\n\n      Any added prefixes are now used *after* all input files have\n      been parsed to look for a prefixed, flattened version of the\n      input file somewhere in BROPATH and, if found, load it. For\n      example, if \"lcl\" is in @prefixes, and site.bro is loaded, then\n      a file named \"lcl.site.bro\" that's in BROPATH would end up being\n      automatically loaded as well. Packages work similarly, e.g.\n      loading \"protocols/http\" means a file named\n      \"lcl.protocols.http.bro\" in BROPATH gets loaded automatically.\n\n    * Fix @unload'd files from generating bro_script_loaded event.\n\n    * Updates to tests.\n\n1.6-dev.225 Wed Jul 20 17:10:41 PDT 2011\n\n- IRC improvements (Jon Siwek). Including:\n\n    * Shorten what's displayed in the IRC's log mime_type column for\n      DCC transfers.\n\n    * Add IRC unit tests.\n\n    * Fix IRC analyzer supplying wrong type to irc_dcc_message event.\n\n    * Removed irc_client and irc_server events.\n\n    * Added is_orig arguments to all other irc events.\n\n    * Fix analyzer not recognizing Turbo DCC extension message format.\n\n    * Fix analyzer not generating irc_dcc_message event when irc_privmsg_message\n      event doesn't have a handler registered.\n\n- Fixing tests that need a diff canonifier. (Jon Siwek)\n\n1.6-dev.223 Tue Jul 19 19:10:36 PDT 2011\n\n- Adding a script to update CHANGES and VERSION. (Robin Sommer)\n\n1.6-dev.218 Tue Jul 19 18:16:44 PDT 2011\n\n- Comprehensive policy script overhaul/rewrite. (Seth Hall)\n\n  Changes are too extensive to list individually.\n\n- Removing undocumented -H command line flag. (Robin Sommer)\n\n- Fixing many tests. (Everybody)\n\n- Fixing 0-chunk bug in remote logging. (Robin Sommer)\n\n- $PATH is now appropriately set by the bro-path-dev.(sh|csh) scripts.\n  (Seth Hall)\n\n- Making valgrind a bit more happy. (Robin Sommer)\n\n- New BiF record_field_vals() that returns the fields of a record in a\n  table with meta-information. (Robin Sommer)\n\n- Adding a script in aux/devel-tools that extracts a connection from a\n  trace based on uid. (Robin Sommer)\n\n- Fixing bug causing crash when running without arguments. (Robin Sommer)\n\n- A new event bro_script_loaded() raised for each policy script\n  loaded. Also removing the -l command-line option as that can now be\n  done at the script-level. (Robin Sommer)\n\n- Fixing memory leaks. (Gilbert Clark, Seth Hall, Robin Sommer)\n\n- Many SSL analysis improvements and fixes. (Seth Hall)\n\n- Fixing bug with event priorities potentially being ignored for the\n  handler. (Robin Sommer)\n\n- Overhauling the internal reporting of messages to the user. The new\n  Reporter class is now in charge of reporting all errors, warnings,\n  informational messages, weirds, and syslogs; and it passes\n  everything through the script layer. (Robin Sommer)\n\n* Removed the alarm statement and the alarm_hook event. (Robin Sommer)\n\n- Adding new policy file test-all.bro that loads all other policies.\n  This is for testing only. (Robin Sommer)\n\n- A new framework for doing regression testing with larger traces and\n  more complex Bro configurations in testing/external. (Robin Sommer)\n\n- Many updates to script doc generation.  (Jon Siwek)\n\n1.6-dev.146 Sat Jun 25 18:12:27 PDT 2011\n\n- DNS mapping are now becoming invalid when an entry's TTL expires.\n  (Thomas Other)\n\n- Reworking how Bro tracks which scripts are already loaded. Rather\n  than paths, Bro now tracks inode numbers. (Jon Siwek)\n\n- New BiF netstats() to query packet capture statistics. The netstats\n  script now uses the new BiF to periocally report packets drops. The\n  net_stats_update() event and the heartbeat_interval global went\n  away. (Seth Hall)\n\n- Fixing bug with logging &optional records. Closes #476. (Robin\n  Sommer)\n\n- Fixing istate.events-ssl test failing because of expired cert. (Jon\n  Siwek)\n\n- A large number of improvements and fixes for Bro's doc mode. (Jon\n  Siwek)\n\n- Significant updates for RPC and NFS analyzers (Gregor Maier)\n\n    * Unify semantics for UDP and TCP connections.\n\n    * RPC can now log to a log file if desired.\n\n    * Portmapper can now log general activity to a log file and also log\n      actual port mappings.\n\n    * NFS analyzer now supports significantly more procedure calls as\n      as file name tracking and file content extraction.\n\n- NetBIOS fixes. (Jon Siwek)\n\n- A number of unit tests are more robust and portable.  (Jon Siwek)\n\n- A new BiF unique_id() that returns a string that's unique across Bro\n  instaces with high probablity.  (Robin Sommer)\n\n- Complete rewrite of the BinPAC SSL analyzer. (Seth Hall)\n\n    * DER certificates are extracted as strings to be used with\n      corresponding BiFs.\n\n    * x509_verify function to verify single certs and/or full\n      certificate chains.\n\n    * Removed hand written SSL analyzer.\n\n    * The ssl.bro script is just a place-holder for now. New version\n      will come with the other new scripts.\n\n- New syslog analyzer. (Seth Hall)\n\n- @load now supports loading a directory. With a directory \"foo\"\n  somewhere in BROPATH, \"@load foo\" now checks if there's a file\n  \"foo/__load__.bro\". If so, it reads that file in. (Robin Sommer)\n\n- ASCII logger now escapes non-printable characters. Closes #450.\n  (Robin Sommer)\n\n- Packaging tweaks and rewrite of 'dist' target. (Jon Siwek)\n\n- Changes to allow DEB packaging via CPack, addresses #458. (Jon\n  Siwek)\n\n- An extension to the ICMP analyzer to handle redirects. Julien\n  Sentier\n\n- Removing old istate test-suite. (Robin Sommer)\n\n- A hack to report missing GeoIP support only once. This closes #357,\n  but #455 captures the need for a more general solution. (Robin\n  Sommer)\n\n- Bugfix: vectors in records were not initalized. Closes #421. (Robin\n  Sommer)\n\n- If IPv6 default is not compiled in, the default BPF filters now\n  excludes IPv6 packets. (Robin Sommer)\n\n- New bif bro_has_ipv6() to check whether IPv6 support is compiled in.\n  (Robin Sommer)\n\n- Updating btests and a Makefile. \"make\" now runs all the tests.\n  (Robin Sommer)\n\n- Moving the test-scripts from the old test-suite over to btest.\n  (Robin Sommer)\n\n- Fix for major bug in POP3 analyzer, which didn't recognize '.'\n  terminators in multi-line replies if the terminator was bare (no\n  newline). This caused it to ignore the rest of the session that it's\n  analyzing. (Vern Paxson)\n\n- Fix compiler warning with gcc-4.4.4 (Gregor Maier)\n\n- Adding example documentation for a script's use of logging features.\n  (Jon Siwek)\n\n- Adding &log attribute to static attr_names array. (Jon Siwek)\n\n- Bro can now track packet and byte counts per connection. (Gregor\n  Maier)\n\n    * If 'use_conn_size_analyzer' is true, the event engine tracks\n      number of packets and raw IP bytes per connection. If\n      report_conn_size_analyzer is true, these values are included as\n      four new columns into conn.log\n\n    * I changed conn.bro so that the value of\n      report_conn_size_analyzer follows that of\n      use_conn_size_analyzer. For the new conn.log, we probably want\n      to get rid of report_conn_size_analyzer anyway.\n\n- Fixing numerous compiler warnings and portability issues. (All)\n\n- Switching vectors from being 1-based to 0-based. Note that this is a\n  change that break backwards-compatibility. (Robin Sommer)\n\n- Increasing serialization format version for the recent 64-bit\n  changes. (Robin Sommer)\n\n- Support for (mixed) MPLS and VLAN traffic, and a new default BPF\n  filter. (Seth Hall and Robin Sommer)\n\n    * Merging in the patch from #264, which provides support for mixed\n      VLAN and MPLS traffic.\n\n    * Changing Bro's default filter from being built dynamically to\n      being a static \"ip or not ip\". To get the old behaviour back\n      (i.e., the dynamically built filter), redef \"all_packets\" to\n      false.\n\n    * print-filter.bro now always prints the filter that Bro is\n      actually using, even if overriden from the command line. (Robin\n      Sommer)\n\n- Changing the HTTP's analyzers internals to use 64-bit integers.\n  (Gregor Maier).\n\n- Fixing bug with deleting still unset record fields of table type.\n  (Robin Sommer)\n\n1.6-dev.99 Fri Apr 22 22:10:03 PDT 2011\n\n- Extending the connection record with a unique identifier. (Robin\n  Sommer)\n\n    type connection: record {\n        [...]\n        id: string;\n   };\n\n  These identifiers very likely unique even across independent Bro\n  runs.\n\n- Delete operator for record fields. (Robin Sommer)\n\n  \"delete x$y\" now resets record field \"x\" back to its original state\n  if it is either &optional or has a &default. \"delete\" may not be\n  used with non-optional/default fields.\n\n- Fixing bug with nested record coercions. (Robin Sommer)\n\n- Fixing a do_split() bug. (Seth Hall)\n\n\n1.6-dev.94 Thu Apr 21 19:51:38 PDT 2011\n\n- Fixing generation of config.h. (Jon Siwek)\n\n- Updates and tests for NetBIOS name BiF. (Seth Hall)\n\n- Fixing do_split bug(), and adding a test. (Seth Hall)\n\n- When Bro is given a PRNG seed, it now uses its own internal random\n  number generator that produces consistent results across sytems.\n  Note that this internal generator isn't very good, so it should only\n  be used for testing purpses. (Robin Sommer)\n\n- The BTest configuration now sets the environemnt variables TZ=UTC\n  and LANG=C to ensure consistent results. (Robin Sommer)\n\n- Logging fixes. (Robin Sommer)\n\n1.6-dev.88 Wed Apr 20 20:43:48 PDT 2011\n\n- Implementation of Bro's new logging framework. We will document this\n  separately. (Robin Sommer)\n\n- Already defined record types can now be further extended via the\n  '+=' operator. The added fields must be either &optional or have a\n  &default value. (Robin Sommer)\n\n  Example:\n\n        type Foo: record {\n            a: count;\n            b: count &optional;\n        };\n\n        redef record Foo += {\n            c: count &default=42;\n            d: count &optional;\n        };\n\n        global f: Foo = [$a=21];\n\n        print f;\n\n  Output:\n\n        [a=21, b=<uninitialized>, c=42, d=<uninitialized>]\n\n- Enabling assignment of empty vectors (\"vector()\"). (Robin Sommer)\n\n- Fixing attributes to allow &default attributes to be associated with\n  records fields of type tables/sets/vector. (Robin Sommer)\n\n- '[]' is now a valid record constructor. (Robin Sommer)\n\n- A instance of a record type A is now coercable into one of type B if\n  the fields of type A are a subset of those of type B. (Robin Sommer)\n\n- A number of bug fixes and enhancements for record/set/table/vector\n  coercion. (Robin Sommer)\n\n- Fixing a problem with records that have optional fields when used as\n  table/set indices. Addresses #367. (Robin Sommer)\n\n- Fixing an off-by-one error in join_string_vec(). (Seth Hall)\n\n- Updating to_count() to cope with 64bit ints. (Seth Hall)\n\n- A new BiF count_to_v4_addr() to turn a count into an IPv4 address.\n  (Seth Hall)\n\n1.6-dev.80 Mon Apr 18 14:50:54 PDT 2011\n\n- New framework for generating documentation from Bro scripts. (Jon\n  Siwek)\n\n  This includes:\n\n    * Changes to Bro's scanner/parser to facilitate automatic\n      generation of Bro policy script documentation in\n      reStructuredText format.\n\n    * New command line flags -Z/--doc-scripts to enable the new doc\n      generation mode.\n\n    * Changes to bifcl to pass comments starting with \"##\" through\n      into the generated .bro script.\n\n    * A \"doc\" build target for the top-level Makefile to first\n      generate reStructuredText for a defined set of Bro policy\n      scripts, and then run that through Sphinx to create HTML\n      documentation.\n\n1.6-dev.78 Mon Apr 18 12:52:55 PDT 2011\n\n- Adding files to CMake build targets so they show up in generated IDE\n  projects. This addresses #413. (Jon Siwek)\n\n- Fix unnecessary config.h preprocessor (re)definitions. This\n  addresses #414. (Jon Siwek)\n\n- Updating istate tests. (Robin Sommer)\n\n- Adding files to CMake build targets so they show up in generated IDE\n  projects.\n\n- Adding new environment variable BRO_SEED_FILE to set the seed file\n  for the random number generator. (Robin Sommer)\n\n1.6-dev.71 Fri Apr  1 16:06:33 PDT 2011\n\n- Removing code for the following no longer supported functionality.\n\n    * Trace rewriting.\n    * DFA state expiration in regexp engine.\n    * Active mapping.\n    * Unused hash functions.\n\n  (Robin Sommer)\n\n- Fixing crashes when SSL is not configured correctly. (Robin Sommer)\n\n1.6-dev.66 Tue Mar 29 21:52:01 PDT 2011\n\n- Initial btest setup (Don Appleman and Robin Sommer)\n\n- Porting the istate tests to btest (not finished) (Robin Sommer)\n\n1.6-dev.63 Mon Mar 21 16:31:15 PDT 2011\n\n- Changes to the way user-modifiable config files are installed  (Jon Siwek)\n\n    * Duplicates of the distribution's configuration files are now\n      always installed with a .example suffix\n\n    * Added --binary-package configure option to toggle configure\n      logic specific to the creation of binary packages.\n\n    * When not in binary packaging mode, `make install` never\n      overwrites existing configure files in case they've been\n      modified. The previous behavior (CMake's default) would only\n      avoid overwriting modified files if one consistently uses the\n      same build directory and doesn't reconfigure.\n\n- Fixed an issue with Mac package's pre-install script not preserving\n  ACLs. (Jon Siwek)\n\n- Minor cleanup/refactor of the make-mac/rpm-packages scripts. (Jon\n  Siwek)\n\n- Add explicit CMake check for compiler. (Jon Siwek)\n\n- Add alternative way to set BROPATH for running bro from build/ dir.\n  (Jon Siwek)\n\n- Fixing compiler warnings (Gregor Maier)\n\n- Remvoing leftover local variables that caused compile error on Mac\n  OS X. (Gregor Maier)\n\n1.6-dev.53 Fri Feb 25 17:03:05 PST 2011\n\n- Fixing file detector leak in remote communication module. (Scott\n  Campbell)\n\n- Updating independent-state tests to work with new setup. (Robin\n  Sommer)\n\n1.6-dev.49 Fri Feb 25 15:37:28 PST 2011\n\n- Enum IDs can have explicitly defined values. (Gregor Maier)\n\n- Extensions for the built-in function compiler, bifcl. (Gregor Maier)\n\n    * Support for policy-layer namespaces.\n    * Support for type declarations in bif files (with access them\n      from C++)\n    * Extended const declarations in bif files.\n\n  See http://bro.icir.org/devel/bif-doc for more information.\n\n1.6-dev.48 Fri Feb 25 10:53:04 PST 2011\n\n- Preliminary TCP Reassembler fix: deliver data after 2GB by disabling\n  the unused seq_to_skip feature. (Gregor Maier)\n\n1.6-dev.47 Fri Feb 25 10:40:22 PST 2011\n\n- Fixing endianess error in XDR when data is not 4-byte aligned.\n  (Gregor Maier)\n\n- Fix for Val constructor with new int64 typedefs. (Gregor Maier)\n\n- Updated fix for OS X 10.5 compile error wrt llabs(). (Gregor Maier)\n\n- Fix more compiler warning wrt printf format strings.  (Gregor Maier)\n\n1.6-dev.45 Tue Feb  8 21:28:01 PST 2011\n\n- Fixing a number of compiler warnings. (Seth Hall and Robin Sommer)\n\n1.6-dev.44 Tue Feb  8 20:11:44 PST 2011\n\n- A number of updates to the SSL analyzer, including support for new\n  ciphers; SSL extensions; and bug fixes. The analyzer does not longer\n  throw weird for exceeding a predefined cipherspec_size anymore.\n  (Seth Hall and Rmkml).\n\n- The various split*() BiFs now handle strings containing null bytes\n  correctly. (Seth Hall)\n\n- Adding new aux/btest submodule. This is a framework we will use in\n  the future for doing unit tests. (Robin Sommer)\n\n1.6-dev.41 Mon Feb  7 13:43:56 PST 2011\n\n- Smarter way to increase the parent/child pipe's socket buffer.\n  (Craig Leres).\n\n- Fixing bug with defining bro_int_t and bro_uint_t to be 64 bits wide\n  on some platforms. (Robin Sommer)\n\n1.6-dev.39 Mon Jan 31 16:42:23 PST 2011\n\n- Login's confused messages now go through weird.bro. (Robin Sommer)\n\n1.6-dev.36 Mon Jan 31 08:45:35 PST 2011\n\n- Adding more configure options for finding dependencies, (Jon Siwek)\n\n    --with-flex=PATH       path to flex executable\n    --with-bison=PATH      path to bison executable\n    --with-perl=PATH       path to perl executable\n    --with-python=PATH     path to Python interpreter\n    --with-python-lib=PATH path to libpython\n    --with-python-inc=PATH path to Python headers\n    --with-swig=PATH       path to SWIG executable\n\n- Fixing typo in PCAPTests.cmake  (Jon Siwek)\n\n\n1.6-dev.33 Mon Jan 24 15:29:04 PST 2011\n\n- Fixing bug in SMB analyzer. (Robin Sommer)\n\n- Configure wrapper now deletes previous CMake cache (Jon Siwek)\n\n- Fix for the --with-binpac configure option. (Jon Siwek)\n\n1.6-dev.30 Thu Jan 20 16:32:43 PST 2011\n\n- Changed configure wrapper to create config.status. (Jon Siwek)\n\n1.6-dev.29 Thu Jan 20 16:29:56 PST 2011\n\n- Fixing little problem with initialization of Bro-to-Bro event\n  communication. (Christian Kreibich)\n\n\n1.6-dev.27 Thu Jan 20 13:52:25 PST 2011\n\n- Fine-tuning of the HTTP analyzer in terms of raising protocol\n  violations and interrupted transfers. (Gregor Maier)\n\n\n1.6-dev.21 Wed Jan 19 17:36:02 PST 2011\n\n- Added 4 new BiFs and a new record type for testing the entropy of\n  strings. (Seth Hall)\n\n    find_entropy(data: string): entropy_test_result\n        This is a one shot function that accepts a string and\n        returns the result of the entropy calculations.\n\n    entropy_test_init(index: any): bool\n        This and the next two functions are for calculating entropy\n        piece-wise. It only needs an index which can be any type of\n        variable. It needs to be something that uniquely identifies\n        the data stream that is currently having it's entropy\n        calculated.\n\n    entropy_test_add(index: any, data: string): bool\n        This function is used to add data into the entropy\n        calculation. It takes the index used in the function above\n        and the data that you are adding and returns true if\n        everything seemed to work, false otherwise.\n\n     entropy_test_finish(index: any): entropy_test_result\n        Calling this function indicates that all of the desired data\n        has been inserted into the entropy_test_add function and the\n        entropy should be calculated. This function *must* be called\n        in order to clean up an internal state tracking variable.\n        If this is never called on an index, it will result in a\n        memory leak.\n\n  The entropy_test_result values have several measures of the\n  entropy, but a good one to work with is the \"entropy\" attribute.\n  It's a double and as the value approaches 8.0 it can be considered\n  more and more random.  For example, a value of 7.832 would be\n  quite random but a value of 4.671 is not very random.\n\n1.6-dev.20 Wed Jan 19 17:30:11 PST 2011\n\n- BRO_DNS_FAKE is now listed in the --help output. (Seth Hall)\n\n\n1.6-dev.18 Wed Jan 19 16:37:13 PST 2011\n\n- Removing unnecessary expire timer from http_sessions. (Gregor\n  Maier)\n\n\n1.6-dev.16 Sat Jan 15 14:14:21 PST 2011\n\n- Updates to the build system. (Jonathan Siwek)\n\n    * ``make dist`` is now available to be used with the top-level\n      Makefile for creating source packages according to #344.\n\n    * ``make-rpm-packages`` and ``make-mac-packages`` scripts can\n      now generate binary packages according to #295.\n\n    * Additional configure options to change packaging behavior.\n\n    * OS X builds will now prefer to link static libraries of\n      optional dependencies that don't come with the vanilla\n      operating system.\n\n    * Fix for OS X 10.5 compile error dealing with the llabs()\n      function from stdlib.\n\n    * Installing as a different user than the one that\n      configured/built now works (although, a harmless error message\n      about not being able to write the install manifest may occur).\n\n\n1.6-dev.3 Wed Dec  8 04:09:38 PST 2010\n\n- Merge with Subversion repository as of r7137. Incorporated change:\n\n    * Fix for packet processing resumption when a remote Bro dies\n      during state synchronization (Robin Sommer).\n\n1.6-dev.2 Wed Dec  8 03:57:03 PST 2010\n\n- Compatibility fix for OpenSSL 1.0.0 (Christian Kreibich, Gregor\n  Maier).\n\n1.6-dev.1 Sat Nov 27 12:19:47 PST 2010\n\n- Merge with Subversion repository as of r7098. Incorporated changes:\n\n    * Rotation post-processors are now passed an additional argument\n      indicating whether Bro is terminating (Robin Sommer).\n\n    * Bro now consistently generates a file_opened event for all\n      fopen() calls. (Robin Sommer).\n\n    * You can now redefine the email_notice_to function (Robin\n      Sommer).\n\n1.6-dev.0 Fri Nov 26 13:48:11 PST 2010\n\n- The Bro source code is now developed in the new git repositories.\n  See the developer pages at http://www.bro-ids.org for more\n  information on the new development process.\n\n- Bro's build and installation setup has been moved from GNU\n  autotools to CMake. As a result of that, layout and specifics of\n  the distribution has changed significantly.\n\n- Lots of pieces have been removed from the distribution that are\n  either now unnecessary or are no longer maintained.\n\n- As part of the cleanup, a numbef of Bro configure options and\n  their corresponding functionality have been removed, including:\n\n    * --disable-select-loop\n    * --with-dag\n    * --disable-nbdns\n    * --enable-activemapping\n    * --enable-activemapping\n    * --enable-shippedpcap\n\n- The previous configure option --enable-int64 is now enabled by default,\n  and can no longer be disabled.\n\n- ClamAV support has been removed, which has been non-functional for\n  a while already.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n1.5.3 Thu Mar  3 08:55:11 PST 2011\n\n- Removing aux/broctl/policy/cluster-addrs.hot.bro from the\n  distribution. The script is no longer needed and could in fact break\n  an installation because it redefines an old variable that has went\n  away. (Robin Sommer)\n\n- Smarter way to increase the communication module's pipe's socket\n  buffer size, resulting in a value closer to the allowed maximum.\n  (Craig Leres)\n\n- BroControl now also maintains links from the log archive to the\n  current set of logs when running in standalone mode. (Robin Sommer)\n\n- Bug fix for a file descriptor leak in the remote communication\n  module. (Scott Campbell)\n\n- Bug fix for BroControl to now activate trace-summary's sampling in\n  cluster mode, but not anymore in standalone mode. (Robin Sommer)\n\n- Broccoli updates:\n\n    * Accept empty strings (\"\") as values in the configuration file.\n      (Craig Leres)\n\n    * Support for specifying a separate host key for SSL-enabled\n      operation, with documentation update. (Craig Leres)\n\n1.5.2 Wed Jan 12 17:34:55 PST 2011\n\n- Portability fixes for --enable-int64 (Vern Paxson).\n\n- Bug fix for Active Mapping support (Kevin Lo).\n\n- Broccoli compiler warning fixes (Kevin Lo).\n\n- Bug fixes for --enable-int64 and for avoiding bogus statistics /\n  bad memory references when generating profiling information upon\n  exit (Vern Paxson).\n\n- Bug fixes for terminating connections (Tyler Schoenke and Vern Paxson).\n\n- Removed now-quite-stale SSHv1 overflow detection, as it's more prone\n  to false positives than useful detection (Vern Paxson).\n\n- The SWIG file now explicitly lists those pieces from broccoli.h which it\n  wants to wrap, rather than just including all of broccoli.h (Robin Sommer).\n\n- http-header.bro now includes a global \"include_header: set[string]\" If it\n  contains any strings, then only those headers will be processed.  If left\n  empty, then you continue to get the current behavior of processing all\n  headers. (Robin Sommer).\n\n- Several changes to drop.bro (Robin Sommer):\n\n\t* If True, the new flag Drop::dont_drop_locals indicates that\n\t  local hosts should never be dropped.  On by default.\n\n\t* If True, the new flag Drop::debugging activates extensive debugging\n\t  output for the catch-and-release logic.  Off by default.\n\n\t* The timeout for tracking dropping information is now 1 day\n\t  rather than 7 days, to better echo the one-restart-a-day semantics\n\t  used in the past.\n\n\t* Bug fix for hosts once dropped by later cleared; some state\n\t  for them persisted.\n\n- Portability fix for Broccoli Python bindings on 64-bit platforms (Robin\n  Sommer).\n\n- The HTTP analyzer no longer attempts to track Server/User-Agent\n  versions, as these are hugely voluminous (Seth Hall).\n\n- HTTP and SMTP no longer have extra-short inactivity timeouts, as\n  these were too often leading to premature expiration of a connection\n  (Robin Sommer).\n\n- Tracking of HTTP refer[r]er's by setting log_referrer. (Vern Paxson).\n\n- The \"rst\" tool (aux/rst/) now takes an optional \"-I <text>\" argument\n  that instructs it to inject <text> as payload rather than sending a RST\n  packet (Vern Paxson).  <text> must be NUL-terminated, and the NUL is not\n  included.\n\n- Bug fix for crashes in the DNS analyzer when processing replies for\n  which no request was seen (Robin Sommer).\n\n- Addressed a number of lint nits (Vern Paxson).\n\n- Rotation post-processors are now passed an additional argument\n  indicating whether Bro is terminating (Robin Sommer).\n\n- Bro now consistently generates a file_opened event for all fopen() calls.\n  (Robin Sommer).\n\n- The \"cf\" utility now ignores a leading \"t=\" prefix, for compatibility\n  with Bro's \"tagged\" logging format (Robin Sommer).\n\n- You can now redefine the email_notice_to function (Robin Sommer).\n\n- Fix for packet processing resumption when a remote Bro dies during\n  state synchronization (Robin Sommer).\n\n- OpenSSL/X509 portability fix, at long last (Gregor Maier & Christian\n  Kreibich).\n\n- Fix for compatibility with newer versions of autoconf (Gregor Maier).\n\n- A larger BroControl update (Robin Sommer, if not marked otherwise):\n\n  o Increasing default timeouts for scan detector significantly.\n\n  o Increasing the manager's max_remote_events_processed to\n    something large, as it would slow down the process too much\n    otherwise and there's no other work to be interleaved with it\n    anyway.\n\n  o Adding debug output to cluster's part of catch-and-release\n    (extends the debugging already present in policy/debug.bro)\n\n  o Fixing typo in util.py. Closes #223.\n\n  o Added note to README pointing to HTML version.\n\n  o Disabling print_hook for proxies' remote.log.\n\n  o broctl's capstats now reports a total as well, and stats.log\n    tracks these totals. Closes #160.\n\n  o Avoiding spurious \"waiting for lock\" messages in cron mode.\n    Closes #206.\n\n  o Bug fixes for installation on NFS.\n\n  o Bug fix for top command on FreeBSD 8.\n\n  o crash-diag now checks whether gdb is available.\n\n  o trace-summary reports the sample factor in use in its output,\n    and now also applies it to the top-local-networks output (not\n    doing the latter was a bug).\n\n  o Removed the default twice-a-day rotation for conn.log. The\n    default rotation for conn.log now is now once every 24h, just\n    like for all other logs with the exception of mail.log (which is\n    still rotated twice a day, and thus the alarms are still mailed\n    out twice a day).\n\n  o Fixed the problem of logs sometimes being filed into the wrong\n    directory (see the (now gone) FAQ entry in the README).\n\n  o One can now customize the archive naming scheme. See the\n    corresponding FAQ entry in the README.\n\n  o Cleaned up, and extended, collection of cluster statistics.\n\n    ${logdir}/stats now looks like this:\n\n      drwxr-xr-x   4 bro  wheel      59392 Apr  5 17:55 .\n      drwxr-xr-x  96 bro  wheel       2560 Apr  6 12:00 ..\n      -rw-r--r--   1 bro  wheel        576 Apr  6 16:40 meta.dat\n      drwxr-xr-x   2 bro  wheel       2048 Apr  6 16:40 profiling\n      -rw-r--r--   1 bro  wheel  771834825 Apr  6 16:40 stats.log\n      drwxr-xr-x   2 bro  wheel       2048 Apr  6 16:25 www\n\n    stats.log accumulates cluster statistics collected every time\n    \"cron\" is called.\n\n    - profiling/ keeps the nodes' prof.logs.\n\n    - www/ keeps a subset of stats.log in CSV format for easy plotting.\n\n    - meta.dat contains meta information about the current cluster\n    state (in particular which nodes we have, and when the last\n    stats update was done).\n\n    Note that there is no Web setup yet to actually visualize the data in\n\twww/.\n\n  o BroControl now automatically maintains links inside today's log\n    archive directory pointing to the current live version of the\n    corresponding log file (if Bro is running). For example:\n\n        smtp.log.11:52:18-current -> /usr/local/cluster/spool/manager/smtp.log\n\n  o Alarms mailed out by BroControl now (1) have the notice msg in the\n    subject; and (2) come with the full mail.log entry in the body.\n\n  o Fixing broctl's top output. (Seth Hall).\n\n  o Fixing broctl's df output in certain situations.\n\n  o BroControl fix for dealing with large vsize values reported by\n    \"top\" (Craig Leres).\n\n1.5.1 Fri Dec 18 15:17:12 PST 2009\n\n- Due to a Python configuration problem, the original 1.5 distribution\n  did not include the BroControl component, which also introduced a\n  portability problem for CentOS.  These issues have now been fixed (Robin\n  Sommer and Vern Paxson).\n\n\n1.5 Wed Dec 16 21:28:47 PST 2009\n\n- Bro now comes with a new framework, BroControl, for managing an\n  operational Bro setup, including support for installation, configuration,\n  and maintainance tasks such a log archival and mail notification.  The\n  framework transparently supports both traditional standalone setups as\n  well as cluster installations in which multiple Bro boxes coordinate to\n  analyze a high-volume network link.\n\n  See aux/broctl/README for more information about BroControl.\n\n  Note, BroControl supersedes the older BroLite system, which is no longer\n  supported and has been deprecated for a while now.\n\n- Numerous adjustments to DPD = dynamic protocol detection (Robin Sommer):\n\n    o The Analyzer::ProtocolViolation?() method can now be passed the\n      offending data (which POP3, SMTP, and FTP now do).  This information\n      is added to the \"reason\" string passed to the script level.\n\n    o SMTP now more accurately reports violations.\n\n    o FTP stops processing when client & server successfully negotiate\n      an AUTH scheme (leading to subsequent encryption).\n\n    o Analyzer::ProtocolViolation() is virtual, and\n      TCP_ApplicationAnalyzer() overrides it to not report violations\n      for any partial connections, because very likely these arise just\n      due to the analyzer getting confused.\n\n    o TCP::IsPartial() returns true if any side did not start with\n      a SYN packet (used to be just be for the originator).\n\n    o The connection_state_remove handler in conn.bro now has a higher\n      &priority so that other handlers for the same event can use\n      determine_service() and see any changes it performs.\n\n    o DynDisable:max_volume specifies a volume limit (default 10K).\n      Once a connection exceeds this limit, further protocol\n      limitations will neither raise ProtocolViolation notices nor\n      cause the analyzer to be disabled.\n\n    o The event engine no longer raises protocol_violation events for\n      TCP connections which had gaps, as these have proven too unreliable.\n      (Note that, ideally, the *analyzers* should avoid reporting\n      protocol_violations when they can't reliably parse a connection\n      anymore after a gap; but many don't.)\n\n- A set of new script functions provide support for incrementally computing\n  MD5 checksums (Seth Hall).\n\n\tmd5_hash_init(index: any): bool\n\t\tInitializes an incremental hashing instance.  \"index\" is\n\t\ta value of arbitrary type, used to identify this particular\n\t\tinstance (you can have multiple concurrent instances by\n\t\tusing different index values).  Returns T on success,\n\t\tF on failure (such as the index is already in use).\n\n\tmd5_hash_update(index: any, data: string): bool\n\t\tFor the given hashing instance, updates the hash\n\t\tbased on the given data.  Returns T on success, F on\n\t\tfailure (such as the index has not been initialized).\n\n\tmd5_hash_finish(index: any): string\n\t\tReturns the MD5-printable hash for the given index\n\t\tand terminates the instance, or the string \"\" if the\n\t\tindex was not active.\n\n- Bro now supports a believed-to-be-robust mechanism for estimating the\n  proportion of traffic that it failed to capture (\"measurement drops\"),\n  which can arise due to overload in either Bro itself, the kernel's\n  packet filter, or problems with the link tapping mechanism (Vern Paxson).\n  The event engine can generate estimates for either live traffic or what\n  was previously recorded in a trace file, though traces subject to some\n  forms of selective omission (such as skipping over parts of a connection\n  to reduce storage) can lead to erroneous values.\n\n  The estimates are based on observing gaps in TCP data streams, and\n  come in two forms: the rate at which such gaps appear, and the relative\n  volume of data missing due to the gaps.  (We've found however that the\n  volume-based estimator is not robust due to occasional packets with\n  incorrect sequence numbers, so this estimator is off by default.)\n\n  The easy way to get the estimates is to load capture-loss.bro.\n  By default, it generates a CaptureLossSummary notice upon Bro's exit,\n  which can look like:\n\n\t1130222759.344066 CaptureLossSummary estimated rate = 0.00089124 / 0.000970997 (events/bytes)\n\n  If the estimated loss is none, however, it suppresses this notice,\n  unless you redef CaptureLoss::summary_if_none to T.\n\n  You can also get finer-grained access by defining a \"gap_report\"\n  event handler and redef'ing gap_report_freq to a non-zero interval\n  (such as \"10 sec\").  This event allows you to pinpoint regions in\n  time that exhibit significant capture loss.  See capture-loss.bro\n  for an example of a handler for this event.\n\n  Finally, these changes include a number of fixes to Bro's\n  ack_above_hole/content_gap analysis, which is now significantly\n  more robust.\n\n- GeoIP support now supports ASN lookups via the built-in\n  function lookup_asn(a: addr): count (Scott Campbell and Seth Hall).\n\n- The GeoIP built-in's lookup_location() and lookup_asn() now\n  support IPv6 (Seth Hall).  Note, the current GeoIP distribution\n  doesn't include any IPv6 databases, so for now these won't succeed,\n  but the hooks are in place for when databases become available.\n\n- lookup_location() now falls back back to the country database if\n  the city database isn't available (Seth Hall).\n\n- The new SuccessfulPasswordGuessing Notice is generated when a host\n  has been seen attempting password guessing (currently only for FTP\n  sessions) and then successfully logs in (Royal Chan).  You can control the\n  threshold for such reports in terms of how many attempts the host must\n  have made by redef'ing the variable password_guessing_success_threshhold,\n  which defaults to 20.\n\n- The new script http-detect-passwd.bro analyzes the Web items returned\n  for fetches that appear to be accessing the passwd file (Akhil Dhar).\n  It generates a PasswordFullFetch Notice if it appears that the item\n  includes a full password file, and PasswordShadowFetch if it looks like\n  a shadowed password file.\n\n- The new built-in\n\n\tsystem_env(cmd: string, env: table[string] of string)\n\n  works like system(), but puts the table entries into the environment\n  before invoking the command (Robin Sommer).  Each <index> in the table\n  creates an environment variable of the form \"BRO_ARG_<index>\", whose\n  value is the corresponding table entry.\n\n- The new script function\n\n\texecute_with_notice(cmd: string, notice_info)\n\n  executes \"cmd\" with an environment containing the fields of the\n  notice_info, i.e., the information associated with a Notice (Robin Sommer).\n  Per the new system_env() function above, the environment variables appear\n  as \"BRO_ARG_<tag>\", where <tag> is the field tag as it appears in\n  notice.log when you enable use_tagging.\n\n- The new built-in enable_raw_output(file) acts the same as\n  the attribute &raw_output (Seth Hall).\n\n- The new built-in file_opened(f: file) event is generated any time Bro\n  opens a script-level file (Justin Azoff).  You can use this, for example,\n  if you want to ensure that a given file has a prelude in it such as\n  human-readable headers, even when the file is rotated.\n\n- The notice_info record has a new field\n\n\taux: table[string] of string &optional\n\n  which you can use for information specific to a given type of notice\n  (Robin Sommer).  Entries in $aux appear as \"aux_<index>\" tags in notice.log.\n\n- Another new notice_info record field is the boolean do_alarm (default=T),\n  which, if set to F, overides a notice action otherwise specifying to\n  generate an alarm (Robin Sommer).  In other words, if do_alarm is F, no\n  alarm will be generated independent of the notice action.\n\n  This is a work-around for the fact that we can't specify more than one\n  action.  In particular, we couldn't NOTICE_DROP but then *not* alarm,\n  which we now can by returning NOTICE_DROP yet setting do_alarm to F.\n\n- The notice_info record field $dropped now appears in the tagged output\n  format if true (Robin Sommer).\n\n- NOTICEs relating to scan detection now no longer include the connection\n  that triggered the notice, as it really doesn't contain any useful\n  information, given that the particular trigger simply depends on the\n  detection algorithm and its parameters (Robin Sommer).  However, we do\n  explicitly set $p (port number) in the notice, and also $n with the\n  number of attempts.\n\n- drop.bro now hardwires a Catch-and-Release redrop after seeing one\n  connection from a previously-dropped-but-already-released host\n  (Robin Sommer).\n\n- drop.bro now provides some new hooks (Robin Sommer):\n\n\tevent address_dropped(a: addr)\n\t\tGenerated when an address has been dropped.\n\n\tevent address_restored(a: addr)\n\t\tGenerated when connectivity to an address has been restored,\n\t\tsuch as using the Catch-and-Release mechanism.\n\n\tevent address_cleared(a: addr)\n\t\tGenerated when an address that was dropped in the past is\n\t\tno longer being monitored looking for new connections\n\t\t(as part of the Catch-and-Release mechanism).\n\n- The new built-in function\n\n\thexdump(data_str: string) : string\n\n  returns a hex dump representation of the given input data (Christian\n  Kreibich).  The dump renders 16 bytes per line, with hex on the left and\n  ASCII (where printable) on the right.\n\n- Bro's notion of when a TCP connection begins now dastes to the first\n  instance of an initial SYN packet seen, rather than the last (Gregor Maier).\n\n- The Time Machine script tm-contents.bro now generates\n\n\tevent contents_saved: event(c: connection, orig_file: string,\n\t\t\t\t\tresp_file: string)\n\n  when the content of a connection has been completely saved to disk\n  (Robin Sommer).\n\n- The mime.bro script now exports the MIME header callback table, and also\n  marks it as &redef'able so you can modify its entries (Matthias Vallentin).\n  The mime_log file is also now exported.\n\n- A new signature file, policy/sigs/http-bots.sig, contains signatures\n  to detect some of the current HTTP based controlled bot families (Seth Hall).\n\n- The signature engine's HTTP pattern matching has been fixed (Seth Hall)\n  to align with the documentation at:\n\n  http://www.bro-ids.org/wiki/index.php/Reference_Manual:_Signatures#Content_conditions\n\n  In particular, the content condition \"http\" is now referred to as\n  \"http-request\" (though \"http\" still works for backward compatibility),\n  \"http-request-header\" and \"http-reply-header\" now provide access to\n  headers seen in only one direction, and similarly for \"http-request-body\"\n  and \"http-reply-body\".  (This latter is still accessible as \"http-body\"\n  for backwards compatibility.)\n\n- The new script variable max_remote_events_processed: count (default 10)\n  sets a limit on the number of remote events processed in each round,\n  before tending to other inputs (Robin Sommer).\n\n- If you set the new script variable dump_used_event_handlers to T,\n  then on startup Bro dumps out all of the event handlers that the\n  loaded set of scripts can invoke (Matthias Vallenti).\n\n- Summaries for DNS PTR scanning now use a separate Notice,\n  DNS_PTR_Scan_Summary, rather than overloading DNS_PTR_Scan (Robin Sommer).\n\n- scan.bro now provides a table skip_dest_server_ports: set[addr, port]\n  which lists servers (defined as an address and a port) excluded from\n  scan detection computations (Craig Leres and Jay Krous).\n\n- When redefining values on the command line directly (using var=value),\n  quotation marks are now implicit only if \"var\" is a variable of type\n  string (Christian Kreibich).  This allows other string-like values\n  (such as enum's) to be passed as well.\n\n- scan.bro now explicitly loads conn.bro so that it can itself\n  be loaded independently (Robin Sommer).\n\n- login.bro depends on scan.bro (because of tracking authentication\n  \"scans\"), so now it explicitly loads it (Vern Paxson).\n\n- UDP_datagram_length_mismatch is now by default flagged just once per\n  originating host rather than once per connection, as it can generate\n  tons of messages (Vern Paxson).\n\n- Removed now-long-boring flagging of access to Solaris \"listen\"\n  service as \"hot\" (Vern Paxson).\n\n- Removal of libedit, since libreadline provides similar functionality\n  (Christian Kreibich).\n\n- Added scripts missing from distribution: dce.bro, ncp.bro, and smb.bro\n  (Vern Paxson).\n\n- ssh.bro now exports ssh_ports (Seth Hall)\n\n- A number of improvements to inter-Bro communication (Robin Sommer).\n\n (1) Remote communication now no longer includes location information for\n serialized objects; that removes quite a bit of redundacy from the network\n traffic.\n\n (2) The new option 'remote_check_sync_consistency\" disables the cross-check\n on the receiving side of &synchronized state of whether the current value\n of a variable has the value expected by the sender. Transmitting the\n original values in addition to the updates generates quite a bit CPU &\n network load in some cases (in particular, a table of tables). The default\n for remote_check_sync_consistency is off, and so far that in particular\n seems to reduce the proxy's load quite a bit.\n\n (3) Complete overhaul of the internal caching of serialized objects.  The\n objective of the caching is avoid retransmitting already sent values over\n and over again. It turns out, however, that some objects are very stable\n and hardly change or get replaced (e.g., Bro types); while other change\n all the time and are hardly reused some time later (e.g., Vals).  Now\n we maintain *two* caches independently for these types of objects; one\n with a low turn-over one and another with a high one.  This should reduce\n CPU load on both sender and receiver sides.\n\n The new scheme is only used if both communicating Bros support it; with\n older Bros, as well as with Broccoli, we continue using the old scheme.\n\n- Some reworking of remote printing (Robin Sommer), as follows.  Bro now\n  uses a new interprocess message rather than print_hook events, to better\n  manage buffering and associated load (these can produce failures depending\n  on system configuration; see remote.log).  A number of timeouts and\n  buffer sizes have been tuned.  Internally, EINTR errors are now treated\n  separately from EAGAIN.  Finally, even with remote_check_sync_consistency=F,\n  one type of consistency check was still being done; this is no longer\n  the case.\n\n- The DNS analyzer now generates events (dns_query_reply/dns_rejected)\n  for replies with zero questions (Robin Sommer).\n\n- Perftools support for incompatible changes in the 1.0 API (Robin Sommer).\n\n- Rearranged (generally reducing, though not always) some state timeouts\n  associated with scan detection (Robin Sommer).  In addition, when a\n  scanning address crosses ignore_scanners_threshold (meaning that it will\n  be ignored from now on anyway), it gets discarded from all state-tracking\n  tables.  Finally, the ignore_scanners_threshold now applies all kinds\n  of scans, not just address scans.\n\n- Substantial Broccoli updates, including a new initialization requirement\n  that breaks backward compatibility, support for enqueueing serialized\n  event data for transmission, and OpenSSL threadsafe initialization.\n  See aux/broccoli/ChangeLog for details (Christian Kreibich, Robin\n  Sommer, and Matthias Vallentin).\n\n- Broccoli hashtable optimisation. See aux/broccoli/ChangeLog for\n  details (Christian Kreibich & Matthias Vallentin).\n\n- Broccoli memory leak fixed, see aux/broccoli/ChangeLog for details\n  (Christian Kreibich).\n\n- Broccoli: updates to bropipe tool (Steve Chan and Robin Sommer).\n\n- Bug fixes for Broccoli Python bindings (Robin Sommer and Matthias Vallentin).\n\n- Fixed nasty bug due to module scoping that completely kept stepping-stone\n  detection from working (Vern Paxson).\n\n- A serious bug in the packet sorter has been fixed (Robin Sommer).\n\n- Bug fix for extra NULs getting embedded in escaped strings (Seth Hall).\n\n- Bug fix for HTTP messages that use \"Connection: close\" rather than length\n  headers, which yielded erroneous reassembled messages with \\r\\n's when\n  only \\n's were present (Bernhard Ager).\n\n- Fix for reporting on ICMP flows that are expired from the flow table\n  (Vern Paxson).  Previously there was a race condition if the flow\n  was flushed prior to its summary timer expiring.\n\n- The -l option (list the scripts that Bro loads) now correctly prints\n  scripts loaded by the prefix mechanism, and uses indentation to indicate\n  the load hierarchy (Robin Sommer).\n\n- A bug has been fixed (really, worked around) in drop.bro that prevented\n  dropped addresses from being properly restored (Robin Sommer).\n\n- Fixes for deadlocking problems in the Broccoli protocol. See\n  aux/broccoli/ChangeLog for details (Christian Kreibich & Robin Sommer).\n\n- Bug fix for DNS analyzer on 64-bit machines (Gregor Maier).\n\n- Bug fix for asynchronous DNS lookups to prevent some successful lookups\n  being reported as timed out (Robin Sommer).\n\n- Bug fix for tracking line numbers associated with compound statements\n  (Po-Ching Lin).\n\n- Fix for a rare condition in which the main Bro process couldn't kill\n  its child process (Robin Sommer).\n\n- Fix for file rotation when the underlying file is deleted before the\n  timer expires (Robin Sommer).\n\n- Fix for potential crash when communication connections break down,\n  and also for releasing cached objects (Robin Sommer).\n\n- Fix for default table entries computed by function invocation to not\n  cache previous results (Robin Sommer).\n\n- Fix for Bro's internal DNS resolution (Scott Campbell and Robin Sommer).\n\n- Portability fix for DAG packet capture (Gregor Maier).\n\n- Portability fix for --enable-brov6 (Robin Sommer).\n\n- Portability fixes for FreeBSD (Vern Paxson).\n\n- A work around for new_packet() crashing on IPv6 packets (Vern Paxson).\n  For now, IPv6 packets are skipped.  Also, for fragments the event handler\n  is now only called for the fully reassembled packet.\n\n- The new configuration option --disable-nbdns supports disabling non-blocking\n  DNS at configure time (Sean McCreary).  Note, there are some known problems\n  with it in some environments.\n\n- A number of configuration fixes and enhancements (Christian Kreibich\n  and Robin Sommer).\n\n- Consistency nit for the configuration process (Seth Hall).\n\n- A number of reference-counting and other memory management fixes\n  (Robin Sommer).\n\n- Bug fix for inter-Bro communication lockup (Seth Hall and Robin Sommer).\n\n- Bug fix for computing TCP payload length in new_packet event (Lothar Braun).\n\n- Bug fix for sending boolean True values via Broccoli (Seth Hall).\n\n- make distcheck fix to clean up .bif.bro files (Christian Kreibich).\n\n- Bug fix for DPD's recognition of SSLv2 connections (Seth Hall).\n\n- Bug fix for &default for tables indexed by subnets (Seth Hall).\n\n- A bug has been fixed that could crash Bro when you called get_event_peer()\n  after a remote connection had already disppeared (Robin Sommer).\n\n- Introduced a work-around for crashes that occur when Bro exits\n  due to handling a signal (Robin Sommer).\n\n- Bug fix for checkpoint.bro - don't schedule timers for times that\n  aren't actually in the future (Robin Sommer).\n\n- Hostname formatting fix for anon.bro (Fabian Schneider).\n\n- Bug fix for redundant .log extension in Time Machine log file\n  (reported by CS Lee).\n\n- Removed now-outdated special-casing of Linux reporting of packet filter\n  statistics (Peter Wurzinger and Robin Sommer).\n\n- A number of memory leaks fixed (Robin Sommer).\n\n- Addressed warnings from newer versions of g++ (Robin Sommer and Vern Paxson).\n\n- Fixed an invocation issue in the ca-create script that prevented it from\n  working with recent OpenSSL versions (Craig Leres & Christian Kreibich).\n\n- Comment fixed in drop-adapt (Justin Azoff).\n\n- Duplicate code removed from Val (Seth Hall).\n\n\n1.4 Fri Oct 17 11:08:52 PDT 2008\n\n- We are no longer supporting a previous Bro release as the \"stable\"\n  version.  Rather, the model now is that the current public release will\n  aim for increasing stability (occasionally updated with fixes), and those\n  who wish to use a \"bleeding-edge\" snapshot can do so via access to the\n  public SVN source code repository, as explained at\n\n\t  http://bro-ids.org/wiki/index.php/Subversion#Public_Access\n\n  Note that all previous releases remain available from the download page;\n  what is changing is that we no longer commit to support for the most\n  recent of these.\n\n- We have clarified the copyright statement that covers most of the\n  code to remove the \"advertising clause\" that derived from older\n  BSD licenses, and we have removed copyright wording from most source\n  code files.  See COPYING for the current wording and a list of\n  files that retain their own copyright notices.\n\n- Bro now supports analyzing NetFlow v5 data, i.e., from Cisco routers\n  (Bernhard Ager).  NetFlow can be useful for intrusion detection as it\n  allows analysis of traffic from many different points in the network.\n  Bro can now read NetFlow data from a UDP socket, as well as (mostly\n  for debugging purposes) from a file in a specialized format.  You can\n  create these files with the programs given in aux/nftools.\n\n  Command line switches:\n\n\t  -Y|--netflow <ip>:<prt>[=<id>] | read flow from socket\n\n\t    This is the usual way of getting NetFlow data into Bro by\n\t    opening a UDP socket on <ip>:<prt> and reading all incoming\n\t    packets.  Setting the <ip> to 0.0.0.0 should work on most\n\t    platforms.  Optionally you may set an identifier <id> for the\n\t    source - useful if there are many different sources you want\n\t    to analyze in parallel. This might also be necessary if you\n\t    want to use this feature with a clustered Bro.\n\n\t    Examples:\n\t\t      bro -Y 0.0.0.0:5555 netflow\n\t\t      bro -i eth0 -Y 10.0.0.1:1234=src1 brolite netflow\n\n\t  -y|--flowfile <file>[=<ident>]\n\n\t    Used to read from a file. You can optionally include an\n\t    identifier for the source.\n\n\t    Examples:\n\t\t      bro -y myflowfile netflow\n\t\t      bro -y myflowfile=src1 otherflowfile=src2 netflow\n\n  Netflow Events:\n\n\t  event netflow_v5_header(h: nf_v5_header)\n\n\t    Generated upon reading a new NetFlow PDU, as summarized in the\n\t    argument.  The field h_id gives the flow source identifier and\n\t    a serial number. You can use this field to associate subsequent\n\t    netflow_v5_record events with their header.\n\n\t  event netflow_v5_record (r: nf_v5_record)\n\n\t    Every record within a NFv5 PDU generates a corresponding\n\t    netflow_v5_record() event.  The relatively complex timestamp\n\t    format of NFv5 is already converted to Bro's time type, and\n\t    the TCP header flags are separated into bools.\n\n  The distribution includes an example analysis script, netflow.bro.\n  It simply dumps received NetFlow records.  If netflow_restitch is T\n  (the default), then Bro performs flow restitching as well, and two\n  script variables become relevant:\n\n\t  global netflow_finished_conn_expire = 310 sec &redef;\n\n\t    specifies how long to wait for additional flow records after\n\t    a RST or FIN for\n\n\t  const netflow_table_expire = 31 min;\n\n\t    Its setting only affects table declarations, and therefore\n\t    cannot be usefully redef'd.\n\n  Auxiliary programs:\n\n\t    Bro uses a custom format for flow data stored in files,\n\t    to enable preserving timestamps of the PDU arrivals and the\n\t    exporter's IP address.  The tools nfcollector and ftwire2bro\n\t    in aux/nftools/ provide ways to manipulate the Bro NF file\n\t    format.  The first dumps NetFlow data from a UDP socket to\n\t    stdout or to a file in Bro format.  The second converts NetFlow\n\t    data in \"wire\" format to Bro format, and, while doing so,\n\t    fakes up the exporter's IP address and timestamp.  You can get\n\t    \"wire\" format from normal flow-tools files, e.g., by using\n\t    'flow-export -f 4'.  Please note that the Bro format is just\n\t    a hack to allow for easier debugging.  Therefore the format\n\t    is not in fact platform independent, and not suitable for data\n\t    storage.\n\n- A new DHCP analyzer generates the following events (Po-Ching Lin):\n\n\tevent dhcp_discover(c: connection, msg: dhcp_msg, req_addr: addr)\n\tevent dhcp_offer(c: connection, msg: dhcp_msg, mask: addr,\n\tevent dhcp_request(c: connection, msg: dhcp_msg,\n\tevent dhcp_decline(c: connection, msg: dhcp_msg)\n\tevent dhcp_ack(c: connection, msg: dhcp_msg, mask: addr,\n\tevent dhcp_nak(c: connection, msg: dhcp_msg)\n\tevent dhcp_release(c: connection, msg: dhcp_msg)\n\tevent dhcp_inform(c: connection, msg: dhcp_msg)\n\n  where dhcp_msg values look like:\n\n\ttype dhcp_msg: record {\n\t\top: count;\t# 1 = BOOTREQUEST, 2 = BOOTREPLY\n\t\tm_type: count;\t# the type of DHCP message\n\t\txid: count;\t# transaction ID of a DHCP session\n\t\th_addr: string;\t# hardware address of the client\n\t\tciaddr: addr;\t# original IP address of the client\n\t\tyiaddr: addr;\t# IP address assigned to the client\n\t};\n\n  See dhcp.bro for the corresponding analysis script (which could\n  probably use some refinements).\n\n  Note, this analyzer is implemented using BinPAC, so you will need\n  to specify --use-binpac to activate it.\n\n- A BitTorrent analyzer is now available (Nadi Sarrar).  See the policy\n  scripts bittorrent.bro and bt-tracker.bro for the events generated for\n  analyzing transfers and tracker dialogs, respectively.\n\n- The \"Bro Lite\" configuration is now deprecated and will not in\n  general be supported (Robin Sommer & Vern Paxson).\n\n- \"make install\" now only installs a core set of files (Robin Sommer).\n  Policy files are now installed in <prefix>/share/bro/* (or whatever\n  configure determines $datadir to be), which is now in Bro's default\n  search path.  It creates a directory <prefix>/share/bro/site for local\n  policy files, and the default BROPATH is extended to include this.  The\n  default path no longer includes policy/local.  You can install the\n  additional files used by the (now deprecated) \"Bro Lite\" configuration\n  using \"make install-brolite\".\n\n- Substantial updates to Broccoli, including support for container\n  types (tables and sets) as well as a new metadata structure for event\n  callbacks, facilitating truly generic event handler implementations\n  (Christian Kreibich, Seth Hall and Robin Sommer). See aux/broccoli/ChangeLog\n  for details.\n\n- Extensive changes to allow Bro to process packets captured in the\n  past intermingled with those captured in real-time (Matthias Vallentin\n  and Robin Sommer).  This operation reflects combining Bro with use of\n  \"Time Machine\" functionality for packet capture.\n\n- We have unfortunately had to disable support for configuring Bro\n  to use ClamAV, since it turns out that the key interface we need\n  for processing blocks of memory directly rather than whole files\n  is no longer supported by the package, and in fact was buggy even\n  when it was (Robin Sommer).\n\n- The new signature option \"http-body /<regexp>/\" matches <regexp>\n  on the body data of HTTP entities (Robin Sommer).  The matching is\n  done after decompressing the body, if necessary.\n\n- The new built-in function identify_data(data: string, return_mime: bool)\n  analyzes the string \"data\" and returns its type according to libmagic,\n  if installed (Seth Hall).  The second argument controls whether it should\n  be returned as a MIME-type or just an identifying string.  For example,\n  identify_data(\"MZpofigu\", F) returns the string \"MS-DOS executable\", and\n  print identify_data(\"MZpofigu\", T) returns \"application/x-dosexec\".\n\n- The new analysis script http-identified-files.bro identifies the\n  type of items returned by Web servers using libMagic (if available)\n  and generates notices for interesting types and mismatches between\n  URLs and types (Seth Hall).\n\n  You configure it using two variables.  watched_mime_types is a pattern\n  (default /application\\/x-dosexec/ | /application\\/x-executable/ ) for\n  which any MIME type matching the pattern generates a HTTP_WatchedMIMEType\n  notice.\n\n  mime_types_extensions is a table mapping strings to patterns specifying\n  how URLs for the given MIME type should appear.  (Ideally, this would\n  be a table mapping patterns to patterns, but Bro doesn't currently support\n  that.)  It defaults to:\n\n\t\t[\"application/x-dosexec\"] = /\\.([eE][xX][eE]|[dD][lL][lL])/\n\n  i.e., do Windows executables end in .exe or .dll.\n\n  You can also redef the pattern ignored_urls to specify URLs that should\n  not generate complaints.  It defaults to matching Windows Update.\n\n- The new script http-extract-items.bro extracts the items from HTTP\n  traffic into individual files (Vern Paxson).  Files are named:\n\n\t<prefix>.<n>.<orig-addr>_<orig-port>.<resp-addr>_<resp-port>.<is-orig>\n\n  where <prefix> is a redef'able prefix (default: \"http-item\"), <n> is a\n  number uniquely identifying the item, the next four are describe the\n  connection tuple, and <is-orig> is \"orig\" if the item was transferred\n  from the originator to the responder, \"resp\" otherwise.\n\n- The workings of how Bro interfaces to external programs for dropping/\n  restoring connectivity of misbehaving hosts has been significantly\n  reworked (Brian Tierney and Robin Sommer).\n\n  First, dropping decisions used to be made directly by analyzer scripts,\n  such as scan.bro directly calling drop_address().  Now instead the\n  scripts generate Notices and then the notice policy can have an\n  action of NOTICE_DROP to codify that the response to the given Notice\n  is to drop the source.  The new notice_action_filter of drop_source\n  drops the source of notices, and drop_source_and_terminate both\n  drops the source and terminates the corresponding connection.\n\n  So, to drop all sources triggering a specific notice, one can now, e.g.,\n  write:\n\n\tredef notice_action_filters += { [Hot::SSH_Overflow] = drop_source };\n\n  Related to this change, notice_info has a new field $dropped, set to\n  true if the Notice triggered a (successful) drop.\n\n  Second, by redef'ing Drop::use_catch_release to T (default F) you can\n  activate \"catch-and-release\" logic.  You use this mode when you need to\n  manage a limited number of possible blocks, or to build in automatic\n  \"forgiveness\" in situations where blocked sources might become benign\n  (such as due to dynamic IP addresses).  If a source has been idle for\n  Drop::drop_time, then it is unblocked.  However, if it is again seen as\n  block-worthy, then it is blocked for an interval of Drop::long_drop_time.\n\n  Third, ICMP scanning is now reported by its own notice, ICMPAddressScan,\n  rather than Scan::AddressScan.\n\n- Google's perftools have replaced mpatrol for leak-checking and\n  heap-profiling (Robin Sommer).  If Bro is compiled with --enable-perftools\n  and configure finds the perftools, there are two command-line options\n  available:\n\n\t-m turns on leak checking of the main packet loop, with some\n\t   uninteresting leaks are suppressed.  Currently, with one\n\t   exception (the RPC analyzer; problem not yet found), it reports\n\t   no leaks when running the test suite.\n\n\t-M turns on heap profiling: Bro will take a snapshot of the heap\n\t   before starting the main packet loop and another one when\n\t   finished. These snapshots can then be analyzed with pprof.\n\n  For more information about the perftools see\n\n\thttp://code.google.com/p/google-perftools\n\n- Notice tags are now generated in a pseudo-unique fashion that, with high\n  probability, ensures that tags generated by separate Bro processes don't\n  clash when logged to a common location, such as for a Bro cluster (Robin\n  Sommer).  Tags are now string's rather than count's, and are associated\n  with all notices, not just that are connection-related.  You can however\n  redef the string notice_tag_prefix or the function new_notice_tag to\n  further control how such tags are generated.\n\n- Four new built-ins for type conversion (Robin Sommer):\n\n\tfunction double_to_interval(d: double): interval\n\tfunction addr_to_count(a: addr): count\n\tfunction port_to_count(p: port): count\n\tfunction count_to_port(c: count, t: transport_proto): port\n\n- Many policy scripts have been modified to use modules & scoping\n  (Robin Sommer and Matthias Vallentin), which may require updates to\n  existing scripts/refinements.\n\n- The new script variable dpd_conn_logs (default F), if true, changes the\n  semantics of the service field in connection logs written to conn.log,\n  as follows (Robin Sommer).  It becomes a comma-separated list of analyzers\n  confirmed by DPD to parse the connection's payload.  If no analyzer could\n  confirm its protocol, but the connection uses a well-known port, the\n  service is the name of the port with \"?\" appended (e.g., \"http?\"), as\n  long as the corresponding analyzer has not declined the connection.\n  In addition, ftp-data sessions are labeled \"ftp-data\" and portmapper\n  connections are labeled with the specific method-call (just as before).\n\n  dpd_conn_logs defaults to F because the change in semantics may break\n  scripts that parse conn.logs; but it will likely change to the default\n  in the future. With dpd_conn_logs turned off, conn logs are generated\n  as they used to be, with a few rare exceptions (with previous versions,\n  the service field was sometimes determined while the connection was still\n  alive; now it's always determined at the time when the conn.log entry\n  is written out).\n\n- The SSL analyzer has been rewritten using BinPAC, with a number of\n  robustness improvements (Tobias Kiesling).  It currently is only used\n  if you execute with --use-binpac.\n\n- Python bindings for Broccoli are now available in\n  aux/broccoli/bindings/python/ (Robin Sommer).  See README/README.html\n  in that director for details.\n\n- The new \"auth\" option in remote.bro indicates whether a given side is\n  considered \"authoritative\" for shared state, in which case it sends its\n  initial state to &sync'ed peers (Robin Sommer).  When two peers synchronize\n  their state, one side sends its current set of state to the other as\n  soon as the remote connection is established.  The one sending the state\n  used to be the one who has been running longer; now it can also be\n  explicitly set via the \"auth\" flag in the Remote::Destination.\n\n- Two new tuning parameters for scan.bro (Robin Sommer):\n\n  ignore_scanners_threshold (default 0):\n\n\tIf a host has scanned more than this many hosts, it is completely\n\texcluded from further scan detection.  0 disables.\n\n  addr_scan_trigger (default 0):\n\n\tA host is only tracked for address scanning once it has contacted\n\tthis many different hosts.  Primarily intended for using a two-stage\n\tscan detection with a Bro cluster: first, each node searches locally\n\tfor scanners by looking for hosts contacting more than\n\taddr_scan_trigger destinations.  Those hosts which do are then\n\tglobally tracked throughout the cluster by &synchronizing the scan\n\tdetector tables.\n\n- When Bro serializes functions, it now does so by default using only\n  their name, rather than their full value (Robin Sommer).  This prevents\n  propagation of expiration functions associated with tables and sets.\n  Note, currently there is no mechanism provided to switch from the\n  default behavior, but the internal hooks are in place to do so.\n\n- The new built-in variable trace_output_file gives the name of the -w\n  output trace file (Robin Sommer).\n\n- Bro no longer installs new file rotation timers when shutting down\n  (Robin Sommer).\n\n- The new policy scripts remote-print-id{,-reply}.bro support convenient\n  access to printing the identifiers of a remote Bro (Robin Sommer).\n  You use the script remote-print-id.bro to request and receive the\n  printing; the remote Bro must have loaded remote-print-id-reply.bro\n  in order to process the request.\n\n  Example use:\n\n\t  bro -e 'redef PrintID::dst=\"<dst>\" PrintID::id=\"<name-of-id>\"'\n\t\t\t<other scripts> remote-print-id\n\n- scan.bro has been heavily modified to better support distributed scan\n  analysis (Matthias Vallentin and Robin Sommer).\n\n- The check for unused event handlers is now turned off by default\n  (Robin Sommer).  To enable, use \"redef check_for_unused_event_handlers = T\".\n\n- The new script drop.bro has been split off from scan.bro to isolate\n  the logic concerning dropping addresses to block scans (Robin Sommer).\n\n- The new -l flag lists each script as it is loaded (Robin Sommer).\n\n- Textual descriptions of identifiers now include their attributes\n  (Robin Sommer).\n\n- The new predefined function prefixed_id() returns a session identifier with\n  its peer-ID prepended if it's associated with a remote Bro (Robin Sommer).\n  This is now used when generating writing log files.\n\n- remote.bro now assigns a priority of -10 to its bro_init() event handler\n  to allow others a chance to modify destinations (Robin Sommer).\n\n- A large number of BinPAC updates (Ruoming Pang and Robin Sommer).\n\n- The new built-in type_name(v): string returns the name of the type\n  of the value v (Vern Paxson).  For example, \"typename(5.2)\" returns\n  \"double\".  This function is mainly for internal debugging (i.e.,\n  finding mismatches between values generated by the event engine\n  versus how their type is expected by the script layer).\n\n- The new built-in str_shell_escape() does some basic escaping on strings\n  that will be passed to system() (Christian Kreibich).  Note, this function\n  isn't ready (robust enough) for routine use, however.\n\n- The new built-in disable_print_hook(file) acts the same as\n  the attribute &disable_print_hook (Robin Sommer).\n\n- The new script terminate-connection.bro factors out the terminate_connection()\n  functionality that used to be in conn.bro (Robin Sommer).\n\n- The new attribute &group=<tag> can be associated with event handlers\n  to group them together into a set that can be manipulated as a whole\n  (Robin Sommer).  <tag> is a string reflecting the name given to the group.\n\n  The built-in enable_event_group(group: string) turns on all the analyzers\n  in a given group, and disable_event_group(group: string) deactivates them.\n\n- The new attribute &raw_output applies to variables of type file, disabling\n  escaping of non-printable characters (Seth Hall).\n\n- You can now iterate over the characters in a string value using\n  a \"for\" loop, e.g., \"for ( c in str ) ...\" (Robin Sommer).\n\n- The new built-in\n\n      function cat_sep%(sep: string, def: string, ...%): string\n\n  works similarly to cat(), except that it (a) separates the values\n  by \"sep\" and (b) substitutes \"def\" for empty strings (Seth Hall).\n\n- The function string_escape() now takes a string of characters to escape\n  rather than a single character (Robin Sommer).  Each character in the\n  string is preceded by '\\' in the return value (also any embedded '\\'s,\n  as before).\n\n- The new built-in function global_ids() returns a table of all global\n  identifiers along with associated information (Robin Sommer).  The\n  return value has type table[string] of script_id, indexed by the name\n  of the identifier and yielding records with the following fields:\n\n\ttype script_id: record {\n\t\ttype_name: string;\n\t\texported: bool;\n\t\tconstant: bool;\n\t\tenum_constant: bool;\n\t\tredefinable: bool;\n\t\tvalue: any &optional;\n\t};\n\n- The new script function find_last(str: string, re: pattern) returns\n  the last occurrence of the given pattern in the given string, or\n  an empty string if no match (Robin Sommer).  Note that this function\n  returns the match that starts at the largest index in the string, which\n  is not necessarily the longest match.  For example, a pattern of /.*/\n  will return just the final character in the string.\n\n- The new script variable record_all_packets, if redef'd to T (default F),\n  instructs Bro to record every packet it processes (Robin Sommer).\n  Prior to introducing this variable, Bro applied a few heuristics to\n  reduce recording volume.  Setting this variable also causes packets\n  to be recorded very early in processing, which can be helpful for\n  debugging crashes.\n\n- If the new script flag ssl_log_ciphers is set to T (default), ssl.bro\n  logs the ciphers seen (Robin Sommer).\n\n- Much more expanded Time Machine support, now located in\n  policy/time-machine/ (Robin Sommer),\n\n- The new command line option --status-file <file> (alias -U) specifies\n  the name of a file into which Bro will write an indicator of its current\n  processing status (Robin Sommer).  Possible values include \"INITIALIZING\",\n  \"RUNNING\", \"TERMINATING\", \"TERMINATED\".\n\n- The new policy script targeted-scan.bro looks for repeated access from\n  the same source to the same server, to detect things like SSH\n  password-guessing attacks (Jim Mellander).\n\n- The \"alternative\" style for printing strings (i.e., a fmt() argument\n  of \"%As\") now renders the raw string, other than escape-expanding\n  embedded NULs (Vern Paxson).  This change may be temporary, pending\n  development of more fine-grained control over string rendering.\n\n- For now we have removed the %S functionality for fmt() (Robin Sommer).\n  %S was meant to print \"raw\" strings, but later processing of such\n  printing still introduces artifacts.\n\n- GeoIP information now includes latitude and longitude (Seth Hall).\n\n- ssh.bro now supports the variable skip_processing_after_handshake\n  which directs the event engine to omit any further processing of an\n  SSH connection after its initial handshake (Seth Hall and Robin Sommer).\n  This can help with performance for large file transfers but precludes\n  some kinds of analyses (e.g., tracking connection size).  This change\n  also adds a scope of \"SSH\".\n\n- Email notification of notices now allows for separate destinations\n  depending on notice type (in particular, a regular mail destination\n  versus a pager destination), and also escapes the notice to prevent\n  injection attacks (Seth Hall and Robin Sommer).\n\n- The new policy script conn-flood.bro is a simple connection-flooding\n  detector, mainly meant as a demonstration (Robin Sommer).\n\n- A large number of additions to the TLS/SSL known-ciphers suite (Seth Hall).\n\n- Serialization now uses 64-bit IDs to cache items rather than 32-bit,\n  for robustness during long-running execution (Robin Sommer).\n\n- The new script variable tcp_max_initial_window specifies, for flows\n  for which ACKs have never been seen, the maximum volume of initial\n  data after which Bro will assume that it is seeing only one side\n  of the connection and will not buffer data for consistency checking\n  awaiting the later arrival of ACKs (Robin Sommer).  It defaults to 4 KB.\n  (Note, this used to be an internal value, so the behavior is not new.)\n  Set to 0 to turn off this functionality and have Bro attempt to\n  track all such flows.\n\n- The new script variable tcp_max_above_hole_without_any_acks specifies,\n  for flows for which ACKs have never been seen, the maximum volume of\n  data above a sequence hole that Bro will tolerate for a connection\n  before giving up on tracking the flow (Robin Sommer).  It defaults to 4 KB.\n  (Note, this differs from tcp_max_initial_window in that this threshold\n  applies to sequence holes rather than the beginning of flows.  Like\n  tcp_max_initial_window this used to be an internal value.)  Set to 0 to\n  turn off this functionality.\n\n- The new script variable tcp_excessive_data_without_further_acks specifies\n  a threshold similar to tcp_max_above_hole_without_any_acks, but for\n  flows for which Bro has seen ACKs (Robin Sommer).  It defaults to 10 MB.\n  Set to 0 to turn off the functionality.\n\n- Equal signs (\"=\") in text for notices are now escaped when using the\n  tagged format to keep them unambiguous from the \"=\" delimiters\n  (Robin Sommer).\n\n- The final tallies for notices are now processed as NoticeTally\n  NOTICE's rather than directly alarm'd (Robin Sommer).\n\n- WeirdActivity notices now include an associated connection when appropriate\n  (Robin Sommer).\n\n- Support for large (> 2^32 bytes) pcap trace files (Po-Ching Lin).\n\n- Scoped names (\"...::...\") are now allowed in signature \"eval\"\n  constructs (Christian Kreibich).\n\n- scan.bro is now decoupled from conn.bro, i.e., you can @load the\n  latter without getting the former (Vern Paxson).  As part of this\n  change, the logic to invoke TRW is now in scan.bro.\n\n- weird.bro has been updated with a number of missing Weird's (Vern Paxson).\n\n- If when using inter-Bro communication the child Bro process terminates,\n  it now also terminates the parent process (Robin Sommer).\n\n- BinPAC analyzers now interoperate with DPD (Robin Sommer).\n\n- Some http.bro processing options are now exported so they can be\n  accessed in other scripts (Robin Sommer).\n\n- SMTP analysis now applies to port 587/tcp as well as 25/tcp (Robin Sommer).\n\n- $conn is now set in ServerFound notices (Robin Sommer).\n\n- You can now create empty sets and tables using set() and table(),\n  i.e., the usual set/table constructors with no arguments (Vern Paxson).\n  By themselves, these have an unspecified type - you can't use them\n  directly other than to assign them.  For example,\n\n\tlocal bad_guys: set[addr];\n\t...\n\tbad_guys = set();\t# start over assuming no bad guys\n\n- A number of scripts have been (slightly) simplified to use the\n  new empty set()/table() constructors (Vern Paxson).  Note that\n  these still aren't usable for field assignments in record constructors,\n  nor for attributes like &default = ...\n\n- Removed unused syntax for declaring sets based on a list of initial\n  values (Vern Paxson).\n\n- set() and table() can now be used as arguments to function calls\n  (Vern Paxson).\n\n- The vestigial &match attribute has been removed.\n\n- POP3 is now recognized using Dynamic Protocol Detection (Seth Hall).\n\n- The new event expected_connection_seen(c: connection, a: AnalyzerTag)\n  is generated whenever a connection is seen for which we have previously\n  scheduled an analyzer via expect_connection() (Robin Sommer).\n\n- The new built-in capture_state_updates logs all changes applied to\n  &synchronized variables, in a fashion similar to the capture_events()\n  built-in (Robin Sommer).  An accompanying policy script,\n  capture-state-updates.bro, turns this on to the file state-updates.bst.\n\n- If the new script variable suppress_local_output is set (default: F),\n  Bro suppresses printing to local files if there's a receiver for\n  print_hook events (Robin Sommer).  This option is however ignored\n  for files with a &disable_print_hook attribute.\n\n- The new notice action filter function file_if_remote specifies\n  that notices from sent from remote source addresses should\n  have an action NOTICE_FILE (Robin Sommer).\n\n- The new notice action filter function file_local_bro_notices specifies\n  that notices generated by the local Bro instance (as opposed to a\n  remote peer) should have an action NOTICE_FILE (Robin Sommer).\n\n- An arbitrary tag can now be past to post-processors for log rotation\n  (Robin Sommer).\n\n- Default inactivity timeouts for interactive services shortened to\n  1 hour (Robin Sommer).\n\n- The scanning variables distinct_{peers,ports,low_ports} are now\n  redef'able (Robin Sommer).\n\n- The new -S (--summary-only) option for site-report.pl directs to\n  only generate connection summaries (Brian Tierney)\n\n- More useful default config file for edit-brorule.pl (Brian Tierney).\n\n- Bro now includes a test suite in testing/istate/ for its \"independent\n  state\" functionality (Robin Sommer).\n\n- Support for parallel builds via make -j (Christian Kreibich).\n\n- Bro's default search path now includes includes policy/sigs/ and\n  policy/time-machine/ (Robin Sommer).\n\n- Bro's internal processing of interprocess communication has been\n  significantly overhauled to prevent potentially fatal race conditions\n  (Robin Sommer).\n\n- Bro now checks calls to fmt() at compile-time to ensure that the\n  correct number of arguments are present (Vern Paxson).  This is useful\n  in addition to Bro's run-time checking for arguments matching their\n  corresponding format-specifiers in the case of rarely-executed statements\n  that might not generate such run-time checks in routine testing.\n\n- The ports associated with Telnet and Rlogin are now redef'able (Robin Sommer).\n\n- MIME processing now removes leading whitespace from MIME headers\n  (Sanmeet Bhatia and Robin Sommer).\n\n- TCP \"weird\" events reported by the connection compressor now match\n  (other than a few rare corner-cases) those produced for normal TCP\n  processing (rmkml and Robin Sommer).\n\n- Added Scan::suppress_UDP_scan_checks to control false positives\n  on scan detection in environments with P2P protocols that use UDP\n  (Vern Paxson).\n\n- The internal analyzer interface now includes an EndOfData() method that\n  analyzers can use to report that all of a message has been delivered\n  (Robin Sommer).\n\n- Fix for a significant memory leak in processing UDP when using -w\n  (Robin Sommer).  Note: this change turns off by default trace rewriting\n  for generic UDP traffic.\n\n- Two serious regular expression bugs fixed (Vern Paxson).  In the\n  first, searching for a regular expression inside a string would\n  fail if the pattern occurred only after an embedded newline.  In\n  the second, insufficient buffer was allocated when compiling regular\n  expressions, leading to memory corruption.\n\n- Base64 decoding bug fixes (Christian Kreibich and Ruoming Pang).\n\n- Automatic rotation of files is now disabled for contents files written\n  by the TCP reassembler, which otherwise leads to mangled files\n  (Robin Sommer).\n\n- Bro now ships with an updated version of libpcap (0.9.8), which hopefully\n  fixes problems managing trace files > 4 GB in size.\n\n- Significant bug fixes for gzip- and deflate-encoded Web items (Robin Sommer).\n\n- Bug fix for secondary-filter.bro (Vern Paxson).\n\n- Removed a naming ambiguity regarding TCP states (Vern Paxson).\n\n- Bug fix for signature scanner not matching all of its input (Vern Paxson).\n\n- Bug fix for using port values in signatures (Robin Sommer).\n\n- Minor policy script tweaks: state management for weird's, processing\n  of Notice tags associated with connections, and dependencies for\n  irc-bot.bro (Robin Sommer).\n\n- aux/ portability fixes (Vern Paxson).\n\n- Workarounds added for a BinPAC deficiency, which is that code in %cleanup\n  clauses can also be executed during recovery from exceptions when parsing\n  new data.  This means that any delete's or Unref()'s need to also set the\n  corresponding pointer to nil (Vern Paxson).\n\n- Bug fix for crashes with the non-BinPAC SSL analyzer (Robin Sommer).\n\n- Tweak to peer-status.bro since Bro now requires events to be\n  declared prior to reference in a \"schedule\" statement (Robin Sommer).\n\n- The signature keyword \"enable\" now optionally accepts the syntax\n  \"foo:bar\" to specify \"activate analyzer bar as a child of analyzer foo\"\n  (Robin Sommer).  This is used for example for an XML-over-HTTP analyzer\n  that's in the works.\n\n- irc-bot-syslog.bro now uses open_log_file() for its log file (including\n  the logging suffix) rather than a direct open (Vern Paxson).\n\n- Bug fix for tracking Blaster across a Bro Cluster (Robin Sommer).\n\n- Bug fix for the HTTP BinPAC analyzer chopping the trailing character\n  off of HTTP headers when generating the http_all_headers event (Gregor Maier).\n\n- Bug fix for HTTP chunked items for which the chunk size line was terminated\n  by CRLF but the CR and LF came in separate packets (Gregor Maier).\n\n- A bug has been fixed that would cause partial lines (for line-oriented\n  protocols) to fail to be processed when a connection terminated\n  (Robin Sommer).\n\n- Bro no longer treats a signal arriving before a previous signal has\n  been processed as fatal, nor does it attempt processing of a termination\n  signal if seemingly there are no race conditions to worry about\n  (Robin Sommer).  Both of these changes are an attempt to improve\n  Bro's robustness.\n\n- Fix for attributes such as &encrypt not working in initial declarations\n  but only in later redef's (Seth Hall and Robin Sommer).\n\n- Fixes for memory leaks in SSL processing (Seth Hall and Robin Sommer).\n\n- Fix for POP3 analyzer to not treat lines like \"<space>.\" as message\n  terminators (Robin Sommer).\n\n- Bug fix for crashes arising from nil pointers in list expressions\n  (Seth Hall and Robin Sommer).\n\n- Bug fix: a signature's \"enable\" would activate the corresponding analyzer\n  even if no event handlers were defined for it (Robin Sommer).\n\n- Bug fixes to prevent crashes when mixing set_contents_file() with\n  subsequent explicit close(), and to ensure all data written to\n  file upon connection tear-down (Gert Doering and Robin Sommer).\n\n- Configuration support for MacPorts and Fink package management systems\n  (Christian Kreibich & Vern Paxson).\n\n- Communication-only Bro's now send out email alarms (Robin Sommer).\n\n- Writes to a file that fail due are now run-time errors rather than\n  fatal internal errors, since often these occur due to the disk\n  being full (Robin Sommer).\n\n- Byte-order bug fix for lookup_location() (Robin Sommer).\n\n- BinPAC portability fix for 64-bit machines (Bernhard Ager and Robin Sommer).\n\n- Portability fixes for newer versions of gcc (Jan Gerrit Goebel and\n  Robin Sommer).\n\n- Some support for porting to Solaris (Stephan Toggweiler).\n\n- Connection compressor bug fix for source and destination having the\n  same IP address, such as when monitoring loopback (Robin Sommer).\n\n- Connection compressor bug fix for connections with multiple SYNs\n  (Robin Sommer).\n\n- Bug fix for using already-declared local variables for looping\n  over vectors in a \"for\" loop (Robin Sommer & Vern Paxson).\n\n- Bug fix for not processing truncated UDP packets (Tom Kho and Robin Sommer).\n\n- Bounds-check added to BinPAC-generated code (Tom Kho and Robin Sommer).\n\n- Bug fix for checking whether an IPv6 address is part of a subnet\n  (Seth Hall).\n\n- Bug fixes for crashes relating to asynchronous DNS lookups performed\n  at start-up (Robin Sommer).  These changes also lowered the timeout\n  before assuming failure from 20 seconds down to 5 seconds.\n\n- Portability and const-ness fixes (Kevin Lo and Robin Sommer).\n\n- Suppression of some content-gap complaints when running on traces\n  that have been filtered down to only TCP control packets (Robin Sommer).\n\n- Removed unnecessary dependency in notice-action-filters.bro\n  that led to errors when loading icmp.bro by itself (Vern Paxson).\n\n- Bug fix for potential infinite loop in client communiation (Robin Sommer).\n\n- Bug fix in reference counting that could eventually lead to roll-over\n  (Robin Sommer).\n\n- Bug fix in communication initialization (Robin Sommer).\n\n- Internal documentation fix: timers are specified using absolute time,\n  not relative (Robin Sommer).\n\n- Performance improvement for built-in find_all() function when running\n  on large strings (Robin Sommer).\n\n- Memory leak fixes (Robin Sommer, Bernhard Ager, Christian Kreibich).\n\n- Bug fix for error recovery when encountering an unknown link layer\n  (Bernhard Ager).\n\n- Bug fix for reversing client & server in a connection (Po-Ching Lin).\n\n- Bug fix for packet_contents when capture length exceeds the IP payload\n  length due to Ethernet frame padding (Christian Kreibich).\n\n- Bug fix for tcp_packet event erroneously including Ethernet padding\n  in its contents (Vern Paxson).\n\n- Bug fix for lookup_connection built-in (Seth Hall).\n\n- Portability nit for libedit tarball (Vern Paxson).\n\n- Broccoli portability fix for NetBSD (Christoph Leuzinger).\n\n- Type-checking for script-level event invocation was completedly broken -\n  now fixed (Vern Paxson).\n\n- Portability fixes for different versions of g++/STL (Nicholas Weaver\n  and Vern Paxson).\n\n- Fix for dynamic detection of SSL via DPD (Robin Sommer).\n\n- IPv6 portability fix for BinPAC-based DNS analyzer (Vern Paxson).\n  Note, more portability work is needed for it.\n\n- Bug fix for bifcl error messages (Vern Paxson).\n\n- Minor bug fix for remote communication, plus some improved communication\n  logging (Robin Sommer).\n\n- Bug fix for &printhook (Robin Sommer).\n\n- Bug fix for error message output (Robin Sommer).\n\n- Bug fix for termination cleanup (Robin Sommer).\n\n- Bug fix for some Rlogin corner cases (Robin Sommer & Vern Paxson).\n\n- Bug fix for bifcl generation of \"interval\" types (Vern Paxson).\n\n- Bug fix for getting connection memory statistics when Bro is\n  exiting (Robin Sommer).\n\n- Config fix: --enable-debug now turns off -O2 for gcc (Robin Sommer).\n\n- Bug fixes for \"heavy\" analysis (Vern Paxson).\n\n- Broccoli bug fixes for types net and port (Robin Sommer).\n\n- Bug fixes for Telnet environment options (Robin Sommer).\n\n- Bug fix for accessing remote peer description (Robin Sommer).\n\n- A fix for the connection compressor generating new_connection too\n  late (Robin Sommer).\n\n- Fixes for DAG support, including configuration and multiple\n  interfaces (Robin Sommer).\n\n- Bug fix for serializing time-stamps of table entries (Robin Sommer).\n\n- Bug fix for dealing with peer IDs for remote communication (Robin Sommer).\n\n- Bug fix to avoid installing timers when timers have already\n  been canceled (Robin Sommer).\n\n- Bug fix for interplay between serializing connections and\n  connection compressor (Robin Sommer).\n\n- Memory leak fix for enum's (Robin Sommer).\n\n- Bug fix for files being closed prior to bro_done() (Vern Paxson).\n\n- aux/broccoli/contrib was not included in distribution (Robin Sommer).\n\n- Auto-configuration bug fix for BinPAC (Craig Leres).\n\n- Bug fix for dynamic protocol detection (Robin Sommer).\n\n- A number of configuration fixes for installation and portability\n  (Christian Kreibich, Brian Tierney, Robin Sommer, Dan Kopecek).\n\n\n1.3 Mon Jul 16 22:11:00 PDT 2007\n\n- The Bro manual has been wikified at:\n\n\thttp://www.bro-ids.org/wiki/index.php/User_Manual\n\n  and this is the format in which it will evolve in the future\n  (Christian Kreibich).\n\n- Much more extensive support for SMB, NetBIOS and NCP (Chris Grier).\n\n- The new attribute &priority=n defines the order of execution for handlers\n  of the same event (Robin Sommer).  Handlers with higher priority are\n  executed first.  n is an integer expression that must evaluate to a\n  constant when the script is loaded.\n\n  Example:\n          > cat foo.bro\n          event bro_init() &priority = -5 { print -5; }\n          event bro_init() &priority =  5 { print 5; }\n          event bro_init()                { print 0; }\t# default priority=0\n          > ./bro foo.bro\n          5\n          0\n          -5\n\n  The connection_state_remove() handler in conn.bro now has priority\n  -10 and therefore executes after all other handlers for this event.\n  This fixes a long-standing problem of sometimes $addl fields not showing\n  up in connection summaries.\n\n- The new expressions record(...), table(...), set(...) and vector(...)\n  are constructors for the corresponding aggregate types (Vern Paxson).\n  For example,\n\n\trecord($foo = \"hi\", $bar = -6)\n\n  is the same as the existing constructor\n\n\t[$foo = \"hi\", $bar = -6]\n\n  For tables, sets, and vectors, the \"...\" values within the ()'s have\n  the same syntax as those that you can list in variable initializations.\n  For example,\n\n\ttable([1, T] = \"black\", [4, F] = \"red\")\n\n  returns a table of type \"table[count, bool] of string\".\n\n\tset(4, 3, -1)\n\n  is a value of type \"set[int]\".\n\n- You can associate attributes with table() and set() constructors\n  (Robin Sommer).  For example:\n\n         local s = set(1.2.3.4) &read_expire = 5 secs;\n\n  associates a 5-second read expiration with the set assigned to s.\n\n- Bro now explicitly supports port numbers reflecting a transport protocol\n  type of \"unknown\" (Christian Kreibich).  Currently, this means \"not TCP,\n  UDP or ICMP\".  The numerical value of such a port is the IP protocol,\n  so ranges from 0..255.  For example:\n\n    global p: port = 0/unknown;\n\n    print fmt(\"%s\", p);\n    print fmt(\"p is TCP? %s\", get_port_transport_proto(p) == tcp);\n    print fmt(\"p is unknown? %s\",\n\t\tget_port_transport_proto(p) == unknown_transport);\n\n  yields\n\n    0/unknown\n    p is TCP? F\n    p is unknown? T\n\n  In comparisons of different protocol types, the following holds:\n  unknown < TCP < UDP < ICMP.\n\n- If your system supports \"GeoIP\" (see http://www.maxmind.com/app/geolitecity\n  for a corresponding city database), then the new script function\n\n\t  lookup_location(a: addr): geo_location\n\n  returns a record of geographic information associated with an address\n  (Seth Hall).  The geo_location record has $country_code, $region and\n  $city fields.  If no information is available, each of these will be\n  set to empty strings.\n\n  If Bro hasn't been configured with GeoIP support, or if the address is\n  IPv6 that cannot be directly converted to IPv4, then Bro produces a\n  run-time error and likewise returns empty strings.\n\n- Signature-matching on HTTP components now processes the URI with\n  escape sequences expanded (Robin Sommer).  Ideally, there would be\n  two signature keywords, one for decoded URIs (corresponding to this\n  case) and one that allows matching against the URI as originally\n  transmitted.\n\n- The connection compressor is no longer considered experimental, and\n  is used by default (Robin Sommer).\n\n- The new function lookup_hostname(host: string): addr_set asychronously\n  looks up the IPv4 address(es) of the given host via DNS (Robin Sommer).\n  Like lookup_addr(), this function can only be used within a \"when\"\n  statement.\n\n- The new built-in\n\n\traw_bytes_to_v4_addr(s: string): addr\n\n  takes a string that points to at least 4 bytes, and returns an address\n  corresponding to interpreting these as being an IPv4 address in network\n  order (Vern Paxson; suggested by Mike Dopheide).\n\n- Trace-rewriting support for DNS, SMB (Chris Grier).\n\n- The new script function find_all(str: string, re: pattern): string_set\n  returns a string_set giving all occurrences of the pattern \"re\" in\n  the string \"str\" (Robin Sommer).  (Note that string_set's are unordered.)\n\n- The new policy script save-peer-status.bro generates a log\n  to peer_status.$BRO_LOG_SUFFIX of updates received from\n  communication peers (Robin Sommer).\n\n- The policy script print-filter.bro now includes two (scoped) variables,\n  terminate_bro and to_file, which control whether to exit after printing\n  the filter (default T) and whether to write to the log file\n  pcap_filter.$BRO_LOG_SUFFIX or (default) to stdout (Robin Sommer).\n\n- The new script variable check_for_unused_event_handlers controls whether\n  Bro checks for unused event handlers (Robin Sommer).  It defaults to T,\n  which was the past behavior (always report).\n\n- Bro now terminates if the only pending activity is future timers\n  (Robin Sommer).  It used to wait for those timers to expire, but this\n  can cause fundamental problems if the timers are associated with table\n  management (since these might never completely drain).\n\n- Tables and sets inside of records are now initialized to empty\n  values rather than uninitialized (Vern Paxson).\n\n- A new variable allow_services_from (in hot.bro) complements the\n  existing allow_service_to variable (Brian Tierney).  It specifies\n  that access to the given service from the given originator is\n  allowed.\n\n- global_sizes() no longer reports internal variables (Robin Sommer).\n\n- The IRC analyzer is now activated if any of the (many) IRC event\n  handlers are defined (Robin Sommer).\n\n- The default value for tcp_close_delay is now 5 sec rather than 0 sec\n  (Robin Sommer).  This prevents some spurious connection events.\n\n- Improved logic for dealing with \"reversed\" connections such\n  as backscatter (Vern Paxson).\n\n- You can now left-justify fields when using fmt() with \"%-\" like\n  in sprintf (Christian Kreibich).\n\n- Updates to DNS query types (Larry Leviton).\n\n- Added mechanism to http-header.bro to skip printing some HTTP headers\n  (Larry Leviton).\n\n- The IrcHotWord notice now sets the associated connection (Robin Sommer).\n\n- If a notice has a tag, it's no longer overridden (Robin Sommer).\n\n- ServerFound notices now set the port field (Robin Sommer).\n\n- The built-in lookup_ID() now returns the string \"<unknown id>\" if the\n  ID does not exist, rather than a run-time error (Robin Sommer).\n\n- The new tuning option ProtocolDetector::suppress_servers specifies a\n  set of analyzers for which Bro generates ServerFound notices, but not\n  ProtocolFound (Robin Sommer).  This both reduces log file size and\n  conserves memory.\n\n- A new notice_action_filter, tally_notice_type_and_ignore, works the same\n  as tally_notice_type but returns IGNORE (Robin Sommer)\n\n- Setting summary_interval == 0 disables the creation of irc-bots.summary.log\n  (Robin Sommer).\n\n- If you @load foo and a directory \"foo\" is in your path, Bro no longer\n  tries to load it (Robin Sommer).\n\n- A number of BinPAC fixes and enhancements (Ruoming Pang, Chris Grier\n  and Vern Paxson).\n\n- BinPAC now resides in aux/binpac rather than src/binpac (Ruoming Pang\n  and Christian Kreibich).  This reflects a decoupling of it from Bro so\n  that it can be used to generate protocol analyzers for other projects too.\n\n- Removed example Inktomi entries from skip_scan_sources initialization,\n  since they no longer exist (Vern Paxson).\n\n- The variable make notice_once_per_orig_tally_interval is now\n  redef'able (Brian Tierney).\n\n- SIGPROF to the communication child process now logs resource stats to\n  remote.log (Matthias Vallentin).\n\n- The new built-in getpid(): count returns Bro's process ID (Robin Sommer).\n\n- Patterns for detecting IRC-based bots updated (Robin Sommer).\n\n- irc-bot-syslog now logs just bots, not all IRC client/servers (Robin Sommer).\n\n- The new variable suppress_notice_actions in notice.bro suppresses\n  notice_actions events for selected notice types (Robin Sommer).\n\n- Files opened during operation now rotate just like those opened at\n  startup (Robin Sommer).\n\n- ResourceStats now also logs elapsed time and the reported number of\n  packets-on-the-link (Mark Dedlow).\n\n- Printing a \"file\" value now produces its name (Robin Sommer).\n\n- Removed deliberate truncation of payload in port 80 FIN packets\n  (Vern Paxson).\n\n- remote.log now includes received peer_descriptions (Robin Sommer).\n\n- Significant POP3 analyzer speed-ups (Vern Paxson).\n\n- Updated README (Vern Paxson).\n\n- Fix for \"@load a\" followed by \"@load a.bro\" not loading the same file\n  twice (Robin Sommer).\n\n- Bug fixes for propagating state operations to uninitialized variables\n  and for spurious state inconsistency messags (Robin Sommer).\n\n- Bug fix for sending final sync-points during pseudo-realtime mode\n  (Robin Sommer).\n\n- Fix for possible buffer overflow (Christian Kreibich).\n\n- Bug fix for spurious end-of-file's during inter-Bro communication\n  (Robin Sommer).\n\n- Bug fix for dpd_match_only_beginning=F (Robin Sommer).\n\n- Bug fix for updating timestamps (Christian Kreibich).\n\n- Bug fix for skipping ADU processing in adu.bro (Christian Kreibich\n  and Zhichun Li).\n\n- Fix for ICMPs that carry ICMP headers (or non-TCP/UDP/ICMP headers)\n  within them (Vern Paxson).\n\n- Fix for files being rotated after the timer queue has been deleted\n  (Vern Paxson).\n\n- Bug fix for signature-matching with IPv6 subnets (Vern Paxson).\n\n- Bug fix for connection compressor setting connection origin (Robin Sommer).\n\n- Bug fix for interconn.bro when processing peculiar connections (Vern Paxson).\n\n- Fix for off-by-one buffer in sscanf call (Christian Kreibich).\n\n- Fixed inefficiency/warning flagged by g++ (Vern Paxson).\n\n- Bug fix for NUL string termination in SMB processing (Zhichun Li).\n\n- Fix for over-ref'ing of file Val's (Vern Paxson).\n\n- Fixes for some g++ warnings (Christian Kreibich, Vern Paxson).\n\n- gcc 3.4.2 portability fixes (Robin Sommer).\n\n- Minor build fixes for Broccoli, including a version bump to match that\n  of Bro.  See aux/broccoli/ChangeLog for details.\n\n- distcheck fixes (Christian Kreibich).\n\n- Configuration portability fixes (Matthias Vallentin, Jean-philippe Luiggi).\n\n- OpenBSD portability fixes (Jean-philippe Luiggi, Christian Kreibich).\n\n\n1.2.1 Mon Dec 11 16:22:58 PST 2006\n\n- Fixed delayed triggering of new_connection events when using the\n  connection compressor.\n\n- Fixed tracking of first packet in TCP analyzer. (Reported by Guohan Lu)\n\n- The syslog built-in got lost during some previous merge.\n\n- Fixed crash if local variable is given as timeout value for table.\n  (Reported by Mike Wood.)\n\n- Fixed using \"time\" values as table indices.\n\n- Added ssh to default brolite DPD configuration.\n\n- Fixed catching up to real-time in case of lull.\n\n- Fixed Broccoli \"BRO_DATA_FORMAT_VERSION\" to match version in Bro.\n\n- Fixed Makefile problem in doc directory.\n\n- Fixed Makefile dependency problem in binpac directory.\n\n- Added Linux tuning to brolite install script.\n\n- Modified Makefile to include broccoli/contrib.\n\n- Adding missing initialization to remote serializer.\n\n- Minor documentation updates for reference manual and Broccoli.\n\n\n1.2 Tue Oct 17 12:09:49 PDT 2006\n\n- Bro now supports DPD, dynamic protocol detection (Robin Sommer, Holger\n  Dreger, and Michael Mai).  With DPD, Bro can analyze protocols regardless\n  of what port numbers they use: it infers the protocol based on which\n  application analyzers can parse it without error.  Adding this functionality\n  involved extensive changes to Bro's internals, but also now enables\n  multiple Bro analyzers to work on the same connection, either concurrently\n  or one nested inside the other (we have not taken much advantage of this\n  latter capability yet, but see the FTP events discussed below).\n\n  There are a number of new policy scripts, events, and variables associated\n  with DPD processing, as follows.\n\n  Scripts:\n\n\tYou activate DPD by @load'ing dpd.bro.  It in turn instructs Bro\n\tto load the signature file policy/sigs/dpd.sig.  Note that Bro\n\tuses signatures to expedite deciding which analyzers to try on\n\ta given connection; it does *not* simply use the signatures to\n\tmake the determination of which protocol is in use, as this is\n\tinsufficiently robust.  (At this point, Bro provides signatures\n\tfor FTP, IRC, HTTP, SMTP, and SSH.  In the future we plan to add\n\tother protocols.)\n\n\tAlong with dpd.bro, you need to @load detect-protocols.bro or\n\tdetect-protocols-http.bro. The former enables general detection\n\tof application-layer protocols, while the latter does further\n\tinspection of HTTP sessions to characterize applications running\n\ton top of HTTP such as Gnutella or SOAP.   (Loading dpd.bro\n\tis separate from loading one of these scripts because in principle\n\tBro could use a different means than signatures to activate\n\tthe analyzers, although currently it does not.)\n\n\tIf you @load dyn-disable.bro, then once an analyzer determines\n\tthat it does not match a given connection, it is deactivated\n\t(and a Notice is generated).  Otherwise, it still proceeds to try\n\tits best to analyze the connection (to possibly be more robust\n\tagainst evasion).\n\n\tThe scripts dce.bro and smb.bro enable DPD for the Windows DCE and\n\tSMB protocols, respectively.  (Note that analysis of these protocols\n\tis undergoing a major expansion, not yet complete.)\n\n  Events:\n\n\tevent protocol_confirmation(c: connection, atype: count, aid: count)\n\t\tGenerated when the given connection has been confirmed as\n\t\tconforming with the application type (protocol) specified\n\t\tby atype. aid is a globally unique analyzer ID that identifies\n\t\ta particular analyzer instance.\n\n\t\tThe values for atype are symbolic names associated with\n\t\teach of Bro's analyzers, such as ANALYZER_IRC.  See the\n\t\tinitialization at the beginning of Analyzer.cc for the\n\t\tfull set of names.\n\n\t\tThe function analyzer_name(atype: count): string translates\n\t\tthese symbolic names into text.  For example,\n\n\t\t\tanalyzer_name(ANALYZER_IRC)\n\n\t\tyields \"IRC\".\n\n\tevent protocol_violation(c: connection, atype: count, aid: count,\n\t\t\t\treason: string)\n\t\tGenerated when the given connection has been found to\n\t\tviolate the protocol of the given application type, with\n\t\t\"reason\" giving details.\n\n  Variables:\n\n\tdpd_buffer_size: count (default 1024)\n\t\tSpecifies how much pending data Bro keeps for connections\n\t\tthat have not been classified yet.  Once this fills, the\n\t\tdata is deleted, though classification can still continue\n\t\t(see below).\n\n\tdpd_match_only_beginning: bool (default T)\n\t\tIf set, specifies that Bro should stop signature matching\n\t\tif it has processed dpd_buffer_size bytes.\n\n\tdpd_ignore_ports: bool (default F)\n\t\tIf set, then Bro does not take into consideration the port\n\t\tnumbers associated with connections when attempting to\n\t\tclassify them (which can otherwise help the process in\n\t\tsome cases).\n\n\tdpd_reassemble_first_packets: bool (default T)\n\t\tIf set, then Bro does TCP stream reassembly before applying\n\t\tsignature-matching to detect protocols.\n\n\tlikely_server_ports: set[port]\n\t\tSpecifies a list of ports that Bro will consider as likely\n\t\tused by servers.  For example, if Bro sees a connection\n\t\tthat has already been established (so it does not know\n\t\twhich side sent the initial SYN), and one side uses a port\n\t\tin this set, then it will assume that that side is the\n\t\tserver (connection responder).  The set is empty unless\n\t\tyou populate it or @load server-ports.bro, which specifies\n\t\ta large number of values.\n\n\tdpd_config: table[AnalyzerTag] of dpd_protocol_config\n\t\tSpecifies the DPD configuration associated with each tag.\n\t\tThe type dpd_protocol_config is simply:\n\n\t\t\ttype dpd_protocol_config: record {\n\t\t\t\t ports: set[port] &optional;\n\t\t\t};\n\n\t\ti.e., an optional $ports field specifying a set of ports\n\t\tassociatd with the tag.  For example, ftp.bro now includes\n\t\tthe equivalent of:\n\n\t\t\tredef dpd_config += {\n\t\t\t\t[ANALYZER_FTP] = [$ports = 21/tcp]\n\t\t\t};\n\n  Functions:\n\n\tThe function\n\n\t\texpect_connection(orig: addr, resp: addr, resp_p: port,\n\t\t\t\t\tanalyzer: count, tout: interval)\n\n\tis called to alert Bro that a new connection is expected, initiated\n\tby orig to a server running on resp's port resp_p (note: orig's port\n\tis not specified) which will correspond to the specified analyzer\n\t(e.g., \"FILE\", which is used to analyze files transferred by FTP -\n\tsee next item).  \"tout\" is a timeout to associate with the waiting.\n\n\tThe function\n\n\t\tfunction disable_analyzer(cid: conn_id, aid: count)\n\n\tinstructs Bro to disable the analyzer that generated the current\n\tevent, assuming the analyzer is associated with the given connection\n\tID.  This is used by the dyn-disable.bro script discussed above.\n\n- A much more complete BinPAC compiler, along with new HTTP, DNS, and\n  RPC/Portmap analyzers in binpac (Ruoming Pang). The flag \"--use-binpac\"\n  activates the BinPAC-based analyzers (currently for HTTP and DNS).\n  See www.cs.princeton.edu/~rpang/binpac-paper.pdf for a description of\n  BinPAC, and let Ruoming know if you are interested in using BinPAC to build\n  new analyzers.\n\n- A new type of analyzer, FILE, analyzes the contents of a connection as\n  though it were a data file (Robin Sommer).  Currently, it can generate\n  two events:\n\n\tevent file_transferred(c: connection, prefix: string, descr: string,\n\t\t\t\tmime_type: string)\n\t\tIndicates that the connection transferred a file. \"prefix\"\n\t\tis the beginning of the file's data; \"descr\" and \"mime_type\"\n\t\tare indicators of the file's type, as reported by the\n\t\t\"libmagic\" library.\n\n\t\tdescr/mime_type are only set if Bro is configured on a\n\t\tsystem that includes the \"libmagic\" library.\n\n\tevent file_virus(c: connection, virname: string)\n\t\tIndicates the connection transferred an executable\n\t\tcorresponding to a known virus of the given name.\n\n\t\tThis functionality is only available if Bro is configured\n\t\ton a system that includes the \"libclamav\" library.\n\n  Note, this analyzer is enabled via a call to expect_connection by\n  the FTP analyzer.\n\n- New events relating to IRC analysis (Robin Sommer):\n\n\tevent irc_client(c: connection, prefix: string, data: string)\n\t\tGenerated upon seing a client message sent over the given\n\t\tIRC connection.  \"prefix\" is the command's prefix as defined\n\t\tby the IRC protocol.  It is used by servers to indicate the\n\t\ttrue origin of the message; it may be empty.  \"data\" contains\n\t\tthe message.\n\n\tevent irc_server(c: connection, prefix: string, data: string)\n\t\tSame for server messages.\n\n\tevent irc_user_message(c: connection, user: string, host: string,\n\t\t\t\tserver: string, real_name: string)\n\t\tGenerated upon seeing an IRC \"USER\" command.\n\n\tevent irc_password_message(c: connection, password: string)\n\t\tGenerated upon seeing an IRC \"PASS\" command.\n\n\tevent irc_channel_topic(c: connection, channel: string, topic: string)\n\t\tGenerated upon seeing an IRC server reply that includes\n\t\tthe channel topic.\n\n\tevent irc_global_users(c: connection, prefix: string, msg: string)\n\t\tGenerated upon seeing an IRC server reply that includes\n\t\ta count of the number of IRC users.\n\n- The new experimental script irc-bot.bro tracks IRC-based bots (Robin Sommer).\n  The accompanying script irc-bot-syslog.bro syslog's the state of the\n  bot analysis every IrcBot::summary_interval seconds (default 1 minute).\n\n- The new script proxy.bro looks for open Web proxies by matching incoming\n  requests to a server with outgoing requests it makes (Robin Sommer).  It\n  generates HTTPProxyFound Notices when it finds one.\n\n- Changes to notices.bro (Robin Sommer):\n\n\t- notice_policy_item's now have a default $result of\n\t  NOTICE_FILE and a default $priority of 1.\n\n\t- The new notice_action_filter, notice_alarm_per_orig, alarms\n\t  on the first NoticeType from a specific source.  Subsequent\n\t  instances are tallied.\n\n\t- notice_action_filters now reside in the new script\n\t  notice-action-filter.bro (automatically loaded by notice.bro).\n\n\t- The notice actions NOTICE_ALARM_PER_CONN, NOTICE_ALARM_PER_ORIG,\n\t  and NOTICE_ALARM_ONCE have been removed, as they were never\n\t  actually implemented.\n\n\t- If the notice_policy returns IGNORE or FILE, the action_filters\n\t  filters are no longer consulted.\n\n- A new attribute for tables and sets, &mergeable, changes the semantics\n  of assignments, as follows (Robin Sommer).  Given two &mergeable tables/sets\n  A and B, an assignment \"A = B\" becomes actually a join \"A = A \\cup B\"\n  (i.e., union).  The envisoned use is to help avoid race conditions\n  when doing remote state synchronization.\n\n- The semantics of &synchronized expire_funcs has changed (Robin Sommer).\n  Now, when a table entry is expired and the operation is propagated to a\n  a peer, the peer will call its expire_function.\n\n- TRW analysis now skips UDP traffic because it currently treats\n  all UDP connections as failures (Robin Sommer).\n\n- trw.bro has been split into trw-impl.bro (the algorithm) and\n  trw.bro (which simply activates the analysis), to facilitate writing\n  scripts that have hooks into TRW analysis but don't presume it's\n  active (Robin Sommer).\n\n- The option report_remote_notices in remote.bro has been replaced\n  by a new script you include, remote-report-notices.bro (Robin Sommer).\n\n- The new function connect_peer() explicitly connects to a remote host\n  (Robin Sommer).\n\n- The new script remote-send-id.bro sends the current value of an ID\n  to a remote Bro and then terminates processing (Robin Sommer).  It's\n  intended for use from the command-line, as in\n\n\tbro -e \"redef dst=\"<dst>\" id=\"<name-of-id>\" <scripts> remote-send-id\n\n  The other scripts must set up the connection. <dst> is an index into\n  Remote::destinations corresponding to the destination.\n\n- New built-ins {suspend,resume}_state_updates() can be called to\n  temporarily avoid propagating updates to &sync'ed values (Robin Sommer).\n  This can avoid duplicated activity.\n\n- The new function terminate_communication() instructs Bro to end its\n  communication with remote peers (Robin Sommer).\n\n- The new event remote_state_access_performed is raised when remote state\n  access has been performed (Robin Sommer).  This is primarily for debugging.\n\n- The log() built-in has been renamed to ln() to avoid conflict (Vern Paxson).\n\n- bifcl now generates event generation wrapper functions from event.bif\n  (Ruoming Pang).  For example, to generate event http_reply, currently\n  one writes:\n\n\t\tval_list* vl = new val_list;\n\t\tvl->append(BuildConnVal());\n\t\tvl->append(new StringVal(fmt(\"%.1f\", reply_version)));\n\t\tvl->append(new Val(reply_code, TYPE_COUNT));\n\t\tif ( reply_reason_phrase )\n\t\t\tvl->append(reply_reason_phrase);\n\t\telse\n\t\t\tvl->append(new StringVal(\"<empty>\"));\n\t\tConnectionEvent(http_reply, vl);\n\n  In the future, one will be able to just call bro_event_http_reply(), and\n  the code generated by bifcl looks like:\n\n\tvoid bro_event_http_reply(Connection* c, StringVal* version,\n\t\t\t\t\tbro_uint_t code, StringVal* reason)\n\t\t{\n\t\tval_list* vl = new val_list;\n\n\t\tvl->append(c->BuildConnVal());\n\t\tvl->append(version);\n\t\tvl->append(new Val(code, TYPE_COUNT));\n\t\tvl->append(reason);\n\n\t\tmgr.QueueEvent(http_reply, vl, SOURCE_LOCAL, c);\n\t\t}\n\n  Accompanying this change is a semantic shift to types \"string\" and \"port\"\n  in .bif files.  They used to be translated to C++ types BroString* and\n  uint32, respectively.  Now they are translated to StringVal* and PortVal*.\n  The functions in bro.bif are changed accordingly, and please be aware\n  of this change when you write built-in functions in future.\n\n  Also for this change, the parameter 'new' for rsh_request has been renamed\n  'new_session', as 'new' is a reserved word for C++.\n\n- Some ICMP \"connections\" now have services identified (\"icmp-echo\",\n  \"icmp-unreach\") rather than just listing the service as \"other\"\n  (Ruoming Pang).\n\n- The new option remote_trace_sync_interval specifies an interval after\n  which each Bro will stop processing its trace and wait for all others\n  to signal that they have reached the same time (Robin Sommer).  The\n  intent is support for operating Bro in a distributed cluster fashion\n  (and in particular for debugging such clusters when running off-line\n  on traces).\n\n  This option only works in pseudo-realtime mode, and requires the new\n  global remote_trace_sync_peers to give the total number of remote peers\n  (not including self).  Signaling is done via a new communication message\n  type.\n\n- Extensions for DNS transformation/anonymization, including introduction\n  of trace transformation for protocols other than TCP (Jason Lee).\n  Not yet fully developed/debugged.\n\n- Extensions for HTTP transformation/anonymization (Martin Casado).\n  Not yet fully developed/debugged.\n\n- The $conn field is now included in HTTPProxyFound notices (Robin Sommer).\n\n- Changed service inference algorithm to favor lower-numbered\n  likely-servers over higher-numbered ones (Vern Paxson).\n\n- In pseudo-realtime mode, Bro now uses real-time for deciding which\n  peer should send state (Robin Sommer).\n\n- Time synchronization for Bro's running on traces in pseudo-realtime mode\n  added (Robin Sommer).\n\n- Avoidance of false content gaps improved when sorting packets with\n  out-of-order timestamps (Ruoming Pang).\n\n- Packets from the packet sorter are now more robustly drained upon\n  termination of input (Ruoming Pang).\n\n- Documentation for deep-copy updated (Christian Kreibich).\n\n- Nasty fragment reassembly bug fixed (Vern Paxson).\n\n- Serious bugs in EDNS0 processing fixed (Vern Paxson).\n\n- Fixed significant misfeature of interconn.bro that stopped all processing\n  of a connection once it makes a detection (Vern Paxson).\n\n- Fixes for &read_expire operation across synchronizes tables (Robin Sommer).\n\n- Fixes for multiple peers exchanging initial &sync state simultaneously\n  (Robin Sommer).\n\n- Improvements to graceful termination of Bro when communicating with\n  remote peers (Robin Sommer).\n\n- Fix for ICMP analyzer not always generating icmp_sent events\n  (Robin Sommer).  This appears to still need some work, as now\n  it generates redundant events.\n\n- Fix for initial exchange of &sync state which could lead to\n  referencing unknown IDs (Robin Sommer).\n\n- Fix to scan detection for differing semantics of connection compressor\n  vs. non-compressor (Robin Sommer).\n\n- Bug fix for distinguishing regular expression matches of length 0 from\n  those of length 1 (Ruoming Pang).\n\n- Fix for SSH version parsing in the presence of content gaps (Robin Sommer).\n\n- Bug fix for IRC that could lead to crashes (Robin Sommer).\n\n- Bug fix to refrain from adding new timers when a connection has\n  already been removed from the connection table (Robin Sommer).\n\n- Bug fix for packet_contents not including the transport-layer header\n  (Robin Sommer).\n\n- Some memory leaks fixed (Robin Sommer).\n\n- A bunch of portability and distribution problems fixed (Christian\n  Kreibich, Robin Sommer, Vern Paxson).\n\n\n1.1 Mon May 15 10:50:33 PDT 2006\n\n- Bro now supports a \"when\" statement for taking action upon something\n  becoming true asynchronously (Robin Sommer).  This provides a powerful\n  new mechanism with numerous applications.\n\n  Syntax:\n\n\twhen '(' <expr> ')' <stmt> [timeout <interval> '{ <stmts> '}']\n\n  where the first <stmt> can be a single statement or a block enclosed\n  in {}'s, but the set associated with \"timeout\" must be enclosed in\n  {}'s (to reduce ambiguities in Bro's grammar).\n\n  Bro executes the first statement when <expr> becomes true. If you give\n  a timeout and the condition has not been satisfied before it expires, Bro\n  executes the second statement instead.\n\n  A simple example:\n\n\tglobal t: table[addr] of count;\n\tevent connection_established(c: connection)\n\t    {\n\t    local orig = c$id$orig_h;\n\t    if ( orig !in t )\n\t\t{\n\t\tt[orig] = 1;\n\n\t\twhen ( t[orig] == 5 )\n\t\t    print fmt(\"%s has established 5 connections\", orig);\n\t\ttimeout 1 hr\n\t\t    {\n\t\t    print fmt(\"%s has NOT established 5 connections\", orig);\n\t\t    delete t[orig];\n\t\t    }\n\t\t}\n\t    else\n\t\t++t[orig];\n\t    }\n\n  Notes:\n\t- The condition may be evaluated more than once, and at arbitrary\n\t  times.\n\n\t- When the when-body is executed, the condition is guaranteed to be\n\t  still satisfied.\n\n\t- Expression reevaluation is primarily triggered by modifications\n\t  to globals.  However, reevaluations do not take place immediately\n\t  but potentially at a later point.  This means that if we change a\n\t  global to a value which would execute the trigger but then change\n\t  it back, the change may go unnoticed.\n\n\t- Inside the condition you may introduce new locals.  For example,\n\n\t    when ( (local x = foo()) && x == 42 ) ...\n\n\t  Such an assignment always yields true as its expression value\n\t  (but the assignment might be delayed, for example if foo() is\n\t  a delayed function call - see below).\n\n  Delaying function calls\n  =======================\n\n  Functions called inside the condition of a when-clause may delay their\n  results until they're ready. This works for both script-level and built-in\n  functions.\n\n  For script-level functions, there is a new construct, \"return <when-stmt>\",\n  to delay a function's result. When used, the function returns at the\n  time the when-stmt's condition becomes true, and it yields the value\n  that the when-stmt's body then returns. Toy example:\n\n      global X: table[string] of count;\n\n      function a() : count\n\t    {\n\t    # This delays until condition becomes true.\n\t    return when ( \"a\" in X )\n\t\t  {\n\t\t  return X[\"a\"];\n\t\t  }\n\t    timeout 5 min\n\t\t  {\n\t\t  return 0;\n\t\t  }\n\t    }\n\n      event bro_init()\n\t    {\n\t    # Installs a trigger which fires if a() returns 42.\n\t    when ( a() == 42 ) { print \"Yippie!\"; }\n\n\t    X[\"a\"] = 42;\n\t    }\n\n  There's also a new built-in function which can delay\n\n\tlookup_addr(host: addr)\n\n  performs asynchronous DNS address->hostname lookups. Example:\n\n\t    local h; addr;\n\t    [...]\n\t    when (local name = lookup_addr(h)) { print h, name; }\n\n  See the function gen_hot_notice_with_hostnames() in conn.bro for\n  a more worked-out example of using the \"when\" clause to translate the\n  local address in SensitiveConnection notices to a hostname (contributed\n  by Brian Tierney).  This functionality is activated by redef'ing\n  xlate_hot_local_addr to T.\n\n  Here is the full evaluation model of a when's condition:\n\n       - The condition may be evaluated more than once, at arbitrary times.\n\n       - It is always fully evaluated, no matter whether some former\n\t evaluation has been suspended by a delaying function call.\n\n       - All function calls which do not delay are always *fully* executed\n\t each time the condition is evaluated.\n\n       - Function calls which delay are only executed *once*; their result is\n\t cached and re-used in the case the condition is evaluated again.\n\n       - The condition is guaranteed to be true when the body is executed\n\t (potentially using cached function results)\n\n- By default Bro now uses a configuration similar to what used to be\n  activated using reduce-memory.bro, along with some additional state\n  timeouts that are new (Robin Sommer and Vern Paxson).  This allows for\n  better state management out-of-the-box, at the cost of some precision\n  of analysis and resilience to evasion.  In particular, the intent is to\n  move towards being able to run Bro continuously without inexorably growing\n  the amount of memory used until exhaustion.\n\n  You can access a configuration similar to the previous default state\n  management settings by loading heavy-analysis.bro.  It turns on a\n  load-prefix of \"heavy\", so when you load XXX.bro, a file heavy.XXX.bro\n  will also be automatically loaded if present.  Note that, as was the\n  case for reduce-memory, you need to load heavy-analysis prior to other\n  files for it to have effect.\n\n- The new module clear-passwords.bro monitors login/FTP/IRC/POP traffic\n  for cleartext passwords (Jason Lee).\n\n- The new script service-probe.bro looks for remote hosts that repeatedly\n  connect to the same service on local hosts (for a configurable set of\n  services and connection sizes) in order to detect brute-forcing attacks\n  such as password-guessing (Jim Mellander).\n\n- A new ARP analyzer generates three events:\n\n\tevent arp_request(mac_src: string, mac_dst: string,\n\t\t\tSPA: addr, SHA: string, TPA: addr, THA: string);\n\n\tevent arp_reply(mac_src: string, mac_dst: string,\n\t\t\tSPA: addr, SHA: string, TPA: addr, THA: string);\n\n\tevent bad_arp(SPA: addr, SHA: string, TPA: addr, THA: string,\n\t\t\texplanation: string);\n\n  with a corresponding policy script arp.bro (Chema Gonzalez and Vern Paxson).\n  It writes logs to arp.$BRO_LOG_SUFFIX.  It has not been tested much yet.\n\n- Bro Lite changes (Jason Lee):\n\t- default user for is now user 'bro'\n\t- now uses the correct sysctl on FreeBSD 6\n\t- now uses the correct Perl path if site-report.pl not installed\n\t  into '/usr/local/bro'\n\t- no longer prompts to encrypt email unless you pick to email reports\n\n- The default Bro Lite install now only checkpoints Bro once a week\n  (Brian Tierney).\n\n- Implicit Bro file extensions (such as .bro for policy scripts and .sig\n  for signatures) are now searched for first rather than only if the\n  non-extension-version of the file doesn't exist (Vern Paxson).  For\n  example, running \"bro -r trace mt\" now first searches $BROPATH for\n  \"mt.bro\" before searching for \"mt\", whereas it used to do these in\n  the other order.\n\n- There's now a simpler mechanism for redef'ing variables on the command-line\n  (Christian Kreibich).  Any command line arguments of the form <var>=<val>\n  are now expanded into policy code of the form \"redef var=val;\", where\n  <val> is wrapped in quotation marks if the value appears to be a string\n  and doesn't have quotation marks already.  This works with strings with\n  whitespace such as foo=\"Hello World\"; however, note that it means you\n  can't use the mechanism to redef an enum value.\n\n- The Bro distribution now includes (and builds by default) Christian\n  Kreibich's Broccoli library (Bro C Client Library), which enables programs\n  to communicate with running Bro's (Christian Kreibich and Jason Lee).\n  Configure with --disable-broccoli to turn this off.\n\n- Built-in functions log(x: double): double and exp(x: double): double\n  which do natural logarithms and their inverses (Jaeyeon Jung).\n\n- The new built-in function gethostname() returns the local host's name\n  (Jason Lee & Robin Sommer).\n\n- The new built-in function reading_traces() returns true if Bro\n  is reading trace files (Robin Sommer).\n\n- The new built-ins suspend_processing() and continue_processing() provide\n  script-level control for instructing the event engine to stop or resume\n  processing packets (Robin Sommer).  This is useful for coordinating\n  simultaneous processing by multiple Bro's.\n\n- Email notices are now by default sent via /bin/mail, with \"[Bro Alarm]\"\n  in the subject.\n\n- redef'ing a function now replaces the existing body rather than\n  supplementing it (Robin Sommer), which was a bug.\n\n- You can now configure Bro to process encapsulated IP packets either\n  by setting, as before, a fixed encap_hdr_size (for VLANs), or setting\n  parse_udp_tunnels to T (Ruoming Pang).  For the latter, you specify a\n  UDP tunnel port using udp_tunnel_port (the previous variable \"tunnel_port\"\n  has gone away); or you can leave it set to its default of 0/udp, in which\n  case Bro will look for IP encapsulated in UDP packets on any port.\n\n- Added a simple form of profiling based on sampling the work done\n  per-packet (Vern Paxson).  The event engine generates a\n\n\tevent load_sample(samples: load_sample_info, CPU: interval, dmem: int)\n\n  event every load_sample_freq packets (roughly; it's randomized), where\n  load_sample_freq defaults to 20.  \"samples\" is simply a set[string]; it\n  contains the names of the functions, event handlers, and their source\n  files that were accessed during the processing of the sampled packet,\n  along with an estimate of the CPU cost of processing the packet and\n  (currently broken) memory allocated/freed.\n\n- Bro now includes experimental support for Endace DAG cards (Gregor Maier\n  and Robin Sommer).  To activate, configure with\n\n\t--with-DAG=/path/to/dagtool/installation\n\n  and use \"dag0\" as the network interface. You may need to configure the\n  card with the dagtools first. In general, if dagsnap works, Bro should\n  work as well.\n\n- Log rotation has changed in a number of ways (Mark Dedlow & Robin Sommer):\n\n\t  * The new variable log_rotate_base_time: string, if defined,\n\t    specifies that logs should be rotated at log_rotate_base_time +\n\t    i * rotate_interval intervals. Format is as a string in\n\t    24-hour time, \"%H:%M\", e.g, \"12:00\".  This format may change\n\t    in the future to instead be a Bro time type.\n\n\t  * RotateLogs::date_format can be redefined to change format of\n\t    timestamps in rotated files.\n\n\t  * RotateLogs::build_name() can be redefined to implement an\n\t    arbitrary naming scheme for rotated files.\n\n  Note, this code has not been extensively tested.\n\n- Bro now by default builds a version of malloc bundled with its\n  distribution (Vern Paxson & Brian Tierney).\n\n- The syntax for the clone operator now looks like a function call,\n  \"copy(x)\" (Vern Paxson).\n\n- The new flag DNS::logging (default F), if T, disables generation of\n  dns.log (which is often uninteresting and very large), though it\n  still performs analysis leading to NOTICEs (Robin Sommer).\n\n- A new global, hostile_domain_list, has been added to dns.bro which\n  lists domains to be flagged if A or MX records are queried (Scott Campbell).\n\n- Added globals dns_skip_all_{auth,addl} to skip all DNS AUTH/ADDL processing\n  (Vern Paxson).  Skipping these is on (true) by default, because such\n  processing is quite expensive.\n\n- backdoor.bro now turns off by default some detectors that from experience\n  have too many false positives, or (such as for HTTP) too many uninteresting\n  true positives (Brian Tierney).  In addition:\n\n\t- the module now generates a BackdoorFound notice for each backdoor\n\n\t- the new variable dump_backdoor_packets (default F) if set causes\n\t  the packet that triggered the backdoor detection to be written to\n\t  backdoor-packets/<tag>:<time>\n\n\t- the new variable backdoor_ignore_host_port_pairs is a set[addr, port]\n\t  specify host/port combinations to ignore\n\n\t- 587/tcp is now recognized as another SMTP port, and 7000/tcp as\n\t  a popular IRC port ignored by default\n\n\t- brolite-backdoor.bro is a sample of using backdoor.bro\n\n- A bunch of enhancements and fixes for the IRC backdoor detector\n  (Vern Paxson).\n\n- The cf utility in aux/cf/ now gets the format to use (unless you specify\n  -f fmt) from $CFTIMEFMT in the environment.  You can now specify -f\n  without a format to revert to the default format.  This change also\n  includes a significant performance improvement when processing large\n  files (Mark Dedlow and Craig Leres).\n\n- Cleanups for brolite.bro and brolite-backdoor.bro (Brian Tierney).\n  brolite.bro now uses rotate-logs by default.\n\n- backdoor.bro now enables analysis of partial connections (Vern Paxson).\n\n- brolite config cleanup: removed smtp.bro from default, increased\n  max_timer_expires, changed default BROPATH to look at site dir\n  first (Brian Tierney).\n\n- The reference manual has been updated for the terminology changes\n  of log -> alarm, alert -> notice, and rule -> signature (Vern Paxson).\n  Some vestiges of the older terminology remain, in part because they're\n  still present in some facets of Bro.\n\n- The new script function get_current_packet(): pcap_packet returns\n  the current packet as a \"pcap_packet\" record with fields $ts_sec,\n  $ts_usec, $caplen, $len (all of type count) and $data (a string)\n  reflecting the corresponding libpcap values (Christian Kreibich).\n  You can write this packet to a dump file using the new function\n  dump_packet(pkt: pcap_packet, file_name: string): bool, which writes\n  (or appends) the packet to a file of the given name, returning T\n  on success and F on error.\n\n- The new fmt() specifier 'T'  converts values of type \"time\" to ISO\n  format timestamps, analogous to how 'D' does this for ISO dates\n  (Mark Dedlow).  fmt(\"%T\", <time>) is equivalent to\n  fmt(\"%s\", strftime(\"%F-%T.%N\", <time>)), except that strftime\n  does not (yet) offer \"%N\" for nanoseconds (but see 'date +%F-%T.%N').\n\n- The new %S format for fmt() inserts a \"raw\" version of the given string -\n  that is, embedded NULs, control characters, etc., are present without\n  any escaping (Christian Kreibich).\n\n- Zero-padding and field widths now work for all fmt() formats rather than\n  just %e/%f/%g (Christian Kreibich).   For example, you can now say:\n\n\tlocal filename = fmt(\"log-%04.txt\", ++counter);\n\n  and get logfiles log-0001.txt, log-0002.txt, ..., log-0999.txt, etc.\n\n- The 'x' format specifier now supports values of type \"addr\", converting\n  them t hex (Mark Dedlow).  For example,\n\n\t  fmt(\"str=%s hex=%x\", 1.2.3.4, 1.2.3.4)\n\n  produces\n\n\tstr=1.2.3.4 hex=01020304\n\n  The field designation is either %08x (if compiled for IPv4 only) or\n  %08x%08x%08x%08x (if compiled with IPv6 support).\n\n- firewall.bro has been extended to support multiple independent\n  rule-sets (by calling begin() for the start of the next one),\n  specifying sets of addresses, being FTP-aware, and with a more\n  streamlined Notice message (Robin Sommer).\n\n- The HTTP script variables maintain_http_sessions and http_sessions\n  are now exported so they can be redefined or, for the latter, have\n  timeouts added/adjusted (Robin Sommer).\n\n- You can load the new policy script log-append.bro to change Bro's\n  behavior so that when it runs appends to existing log files rather\n  than overwriting them (Mark Dedlow).\n\n- New &disable_print_hook attribute for files (Robin Sommer).  If set,\n  print statements to the file don't trigger the print_hook event.  This\n  is useful to keep the output of certain files from being propagated to\n  peers.\n\n- You can now associate \"classes\" with remote peers (Robin Sommer).  When\n  connecting, a node may send a specific class to which it considers itself\n  belonging. The accepting side can then tune its configuration based on\n  the received class.\n\n  This is primarily for the having multiple unrelated Broccolis running on the\n  same host, all connecting to the same remote Bro (e.g., sshd and syslog\n  sensors).\n\n  To use this, on the Bro side the record Remote::Destination now has a\n  field \"class: string\" (default: unset).  If set, the given config entry\n  only applies for connecting remote peers that send the given class.\n  If it is set and we're connecting to another peer, we propagate the class.\n\n  Example:\n\n      On the listening Bro:\n\n\t    redef Remote::destinations += {\n\t\t[\"peer-1\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"ftp\", $events = /ftp.*/],\n\t        [\"peer-2\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"http\", $events = /http.*/]\n\t    };\n\n      On peer 1:\n\n\t    redef Remote::destinations += {\n\t\t  [\"master\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"ftp\",\n\t\t\t $events = /.*/, $connect=T]\n\t    };\n\n      On peer 2:\n\n\t    redef Remote::destinations += {\n\t\t  [\"master\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"http\",\n\t\t\t $events = /.*/, $connect=T]\n\t    };\n\n  All of these may run on the same host.\n\n- A bunch of changes to adu.bro (Christian Kreibich):\n\n\t- New ADU_MAX_DEPTH limits depth (at ADU granularity) into a\n\t  flow up to which ADUs are reported.\n\n\t- Handles UDP.\n\n\t- New event adu_done(c: connection) signals that no further ADUs\n\t  will be delivered for a connection.  This is useful since adu.bro\n\t  relies on event connection_state_remove() to remove state, and\n\t  if a policy using adu.bro likewise uses this event type then\n\t  event sequencing can cause adu_tx/rx events to occur after\n\t  connection_state_remove() has been processed.\n\n\t- Now correctly clips ADU to maximum allowed size.  (Note, this\n\t  has been temporarily commented out because it relies on a new\n\t  string function that has not yet been integrated into the\n\t  main distribution.)\n\n\t- Now can ignore specific connections dynamically.\n\n\t- TCP content gaps are now recognized and ADU delivery is for now\n\t  stopped for such flows, unless explicitly requested.\n\n\t- No longer logs to file in test mode.\n\n- The new function add_notice_tag() explicitly adds a unique notice tag\n  to a connection's $addl field (Robin Sommer).  This is sometimes necessary\n  to ensure that the tag appears in the connection summary.\n\n- Bro now performs serialization (such as when checkpointing &persistent\n  tables or communicating them between Bro's) in an incremental fashion,\n  intermingling transfers of large tables with ongoing packet processing\n  (Robin Sommer).  Doing so helps avoid packet drops for large items.\n  This has not yet been implemented for the initial handshake done\n  for &synchronized items.\n\n- ssl.bro now stores certificates by default in the subdirectory \"certs/\"\n  (Robin Sommer).\n\n- Analysis of weak/unknown ciphersuites in ssl.bro reworked (Holger Dreger).\n\n- New cipher for SSL analysis, SSL_CK_RC4_64_WITH_MD5 (Holger Dreger).\n\n- load-levels and cpu-adapt now log their adaptations to the log file\n  rather than generating alarms (Robin Sommer).\n\n- The default adaptation levels in cpu-adapt have been tweaked for better\n  behavior (Robin Sommer).\n\n- A new structure of the event loop (implemented by Robin Sommer) is now\n  enabled during configuration by default (Christian Kreibich).  You can\n  revert to the previous structure using --disable-select-loop.\n\n- When configuring Bro, the version of pcap that comes with the Bro\n  distribution is no longer used by default (Jason Lee).  Instead,\n  the system one is used, or one at the same directory level as Bro.\n  To use the Bro distribution version, configure with --enable-shippedpcap.\n\n- backdoor.bro now has comments clarifying that it does not itself\n  alter capture_filters (Vern Paxson).\n\n- If you set backdoor_stat_period to 0 sec, then this now turns off\n  the periodic component of backdoor analysis (Holger Dreger).\n\n- The filters specified in notice_action_filters now take an additional\n  argument specifying the action that has been determined so far (Robin\n  Sommer).  This allows the filter to decide to not change the current\n  action, if it so wishes.\n\n- The new event notice_alarm(n: notice_info, action: NoticeAction) is\n  generated for every notice that results in an alarm (Robin Sommer).\n\n- Tallying of notices is now done using a notice, which has type NoticeTally\n  (Robin Sommer).\n\n- The new notice action filter alarm_always_notice specifies an action\n  of NOTICE_ALARM_ALWAYS (Vern Paxson).\n\n- If the watchdog expires and Bro isn't generating a packet trace file,\n  the current packet is saved to \"watchdog-pkt.pcap\" (Robin Sommer).\n\n- New boolean globals tcp_contents_deliver_all_{orig,resp} allow easy\n  requesting of content delivery for all TCP traffic in orig/resp directions\n  (Christian Kreibich).\n\n- The new event udp_contents(u: connection, is_orig: bool, contents: string)\n  delivers the contents of UDP packets analogous to tcp_contents (Christian\n  Kreibich).  The boolean globals udp_content_deliver_all_{orig,resp} and\n  tables udp_content_delivery_ports_{orig,resp} control for which ports\n  content is delivered, analogous to the globals that control tcp_contents.\n\n- New option --set-seed=n sets the random number seed to n (Vern Paxson).\n\n- Notices now report current time for remotely-received notices rather\n  than network time (Brian Tierney).\n\n- Notices now include a tag es=<peer_description> any time a peer\n  description is defined, not just for remote notices (Robin Sommer).\n\n- The global log_as_connection has been removed from icmp.bro, which now\n  only logs ICMP flows via the usual connection logging (Vern Paxson).\n\n- The Destination variable $accept_state has been renamed $accept_input\n  to better reflect its meaning (Vern Paxson).\n\n- A remote destination's $sync field now indicates whether to accept\n  ongoing state changes from peers, rather than just upon start-up\n  (Robin Sommer).  The variable $accept_state controls whether we\n  accept events.\n\n- Logging of forms of Bro communication has been unified (Robin Sommer).\n\n- Updates for packet filtering documentation (Christian Kreibich).\n\n- A new global, stp_skip_src, lists sources that should be skipped for\n  stepping-stone analysis (Vern Paxson).  ssh-stepping.bro adds sources to\n  this list if they've instantiated more than src_fanout_no_stp_analysis_thresh\n  connections, keeping them blocked until they've been idle for 15 seconds.\n\n- Added a default notice-policy.bro as an example (Brian Tierney).\n\n- Expanded on descriptive text in notice-policy.bro (Vern Paxson).\n\n- ef removed from aux/hf/, as it's of little use and a headache to\n  maintain for portability (Vern Paxson).\n\n- The version of libpcap bundled with the distribution has been\n  elevated to 0.8.3 (Jason Lee).\n\n- Bro now compiles again if non-blocking DNS is not available (Robin Sommer).\n\n- Resource statistics logging now differentiates between offline\n  processing vs. remote-communication-only (Mark Dedlow and Robin Sommer).\n\n- The script variable ICMP::distinct_pairs now times out its state,\n  with a default of 15 minutes after creation (Robin Sommer).\n\n- The Bro version reported now includes \"-debug\" if Bro was configured\n  with --enable-debug (Robin Sommer).\n\n- scan.bro now defaults \"shut_down_all_scans\" to T, meaning it by\n  default detects scans on all ports, not just those in the set\n  shut_down_scans (Vern Paxson).  Please note, this variable is\n  misnamed - it should be \"detect_all_scans\" - but that change is\n  waiting on reworking the basic structure of scan detection.\n\n- Major bug fix for signature matcher missing matches on analyzer data\n  (Robin Sommer).  For example, a condition \"http /foo/\" would only have\n  match with the first URL in a connection, not subsequent ones.  Fixing\n  this changes the calling sequence of the match_signatures() built-in to\n  take an additional final parameter, \"clear\", which, if set, resets the\n  matcher to its starting state prior to matching.\n\n- Serious bug in regular expression matching - and hence signature engine -\n  fixed (Robin Sommer).\n\n- Bug fix for formatting (via fmt()) of very long strings (Vern Paxson).\n\n- Fixed mail_reports.sh to correctly find sendmail binary on various systems\n  (Brian Tierney).\n\n- Numerous changes to Bro's internal string representation, and more\n  flexibility in how strings are rendered for display (Christian Kreibich).\n\n- Pseudo-real-time now can be initialized using an optional argument\n  that corresponds to the degree of time compression (Robin Sommer).\n  For example, --pseudo-realtime=0.5 causes time to advance half as fast\n  as it would in real-time.  The default value is 1.0; any value > 0 is\n  allowed.\n\n- The SSH analyzer now looks for just linefeeds as line terminators when\n  extracting version strings, rather than carriage-return-line-feeds, to\n  match actual implementations rather than the RFC (suggested by Chema\n  Gonzalez).\n\n- Playing back events from files now working again (Robin Sommer).\n\n- Bro now uses current_time() rather than network_time to track the\n  modification time of variables, since network_time doesn't advance\n  when only receiving events (Robin Sommer).\n\n- Bug fixes for IPv6 support, including processing UDP traffic\n  (which had been completely broken) and subtle interactions (actually,\n  lack thereof) between the connection compressor and IPv6 that\n  could lead to crashes (Vern Paxson).\n\n- Portability tweaks for NetBSD, 64-bit Linux SuSe and FreeBSD 5.4\n  (Christian Kreibich, Jason Lee and Vern Paxson).\n\n- Bug fix for IPv6 \"::\" constants that start with hex digits specified\n  using 0x (Vern Paxson).\n\n- Calling the built-in terminate() function twice now has no additional\n  effect (Christian Kreibich).  It used to terminate Bro abruptly, without\n  cleanly shutting down.\n\n- Removed active.bro; use active_connection() + connection_record() instead\n  (Vern Paxson).\n\n- Bro lite reports now work with rotated logs files (Brian Tierney)\n\n- Bug fix for conditions such as \"payload /^user/\", which now work equivalent\n  to \"payload /user/\" (Robin Sommer).\n\n- Tweaks to sensitive patterns in HTTP request URIs to reduce false\n  positives (Brian Tierney).\n\n- Bug fixes for strip() built-in function (Holger Dreger).\n\n- Memory leak in built-in function to_addr() fixed (Ruoming Pang).\n\n- Bug fix for \"hot\" connections sometimes not having their notice tag\n  appearing in connection summaries (Robin Sommer).\n\n- Bug fixes for IRC analysis (Vern Paxson and Robin Sommer).\n\n- Syslogging now works if Bro is running in communication-only mode\n  i.e., live, but not reading a network interface (Robin Sommer).\n\n- Bug fix to allow tuning of TRW parameters (Vern Paxson).\n\n- Bug fixes for SSL analysis (Holger Dreger).\n\n- Removed logic that inverted orig/resp in some scans (Vern Paxson).\n\n- Lint & memory allocation tweaks (Vern Paxson).\n\n- Bug fixes for inactivity timeouts (Robin Sommer).\n\n- Bug fix for Bro Lite cron job (Jason Lee).\n\n- When binding to a listening port for remote communication fails,\n  the port number is now reported (Robin Sommer).\n\n- Some spurious reporting removed from configure output (Jason Lee).\n\n- Fix for \"weird\"'s generated by connection compressor but not\n  recognized at the policy script level (Vern Paxson).\n\n- Fixes for detecting content gaps and not matching previously delivered\n  data (Ruoming Pang).\n\n- Bug fixes for TCP rewriter (Ruoming Pang).\n\n- Bug fixes for crashes in SSL analyzer (Vern Paxson).\n\n- Bug fix for avoiding busy-waiting when a communication child dies\n  (Robin Sommer).\n\n- Bug fix for BiF's that use 'T' and 'F' in character constants\n  (Vern Paxson).\n\n- Memory leak fixes (Robin Sommer, Christian Kreibich, Vern Paxson and\n  Ruoming Pang).\n\n- The peer table for inter-Bro communication is now correctly indexed by a\n  peer_id (Robin Sommer).\n\n- Bug fix for exchange of initial &synchronized state which could\n  prevent communication from entering main phase (Robin Sommer).\n\n- Bug fix for propagating incremented table values derived from\n  a table's &default (Robin Sommer).\n\n- Bug fixes for the POP3 analyzer when analyzing non-NUL-terminated strings\n  or bad base64 encodings (Vern Paxson).\n\n- Updates for Bro's internal hash functions (Ruoming Pang).\n\n- The debug and communication log files now comply with $BRO_LOG_SUFFIX\n  (Robin Sommer).\n\n- Some internal debugging additions (Ruoming Pang).\n\n- Internal cleanup regarding \"const\" strings (Ruoming Pang).\n\n- A number of casts changed to use modern C++-style pointer casting\n  such as reinterpret_cast and static_cast (Ruoming Pang).\n\n- Bug fixes for inter-Bro communication on 64-bit systems (Robin Sommer).\n\n- Bug fixes for detecting errors for SSL connections (Robin Sommer).\n\n- Potential null pointer dereference fixed (Robin Sommer).\n\n- Inter-Bro communication is now more reliable in the presence of errors\n  (Robin Sommer).\n\n- Performance enhancement for tracking values whose elements might\n  change (Robin Sommer).\n\n- Fixes for peers having differing enum lists (Robin Sommer).  This can\n  occur because they're running different scripts and which do different\n  redef +='s to add enum values.\n\n- += now works for interval types (Vern Paxson).\n\n- Bug fix for exchanging peer descriptions (Robin Sommer).\n\n- Bug fix for processing multipart-MIME HTTP messages with content-length\n  headers (Ruoming Pang).\n\n- Bug fix for failing to escape \"'s in HTTP server replies (Robin Sommer).\n\n- Bug fix for propagating increment operations on tables (Robin Sommer).\n\n- Bug fixes for files (Robin Sommer): set open time to current time if\n  network time is not initialized; when deserializing files, prevent them\n  from being closed immediately due to reference-counting interaction.\n\n- Bug fix to prevent reporting some scans twice (Robin Sommer).\n\n- Bug fix for printing enum's (Christian Kreibich).\n\n- When not configured with --enable debug, Bro now still accepts (yet ignores)\n  option -B (Robin Sommer).\n\n- Serialization enhancements and fixes, including a change of the\n  protocol version number (Robin Sommer).\n\n- Bug fix for logging inter-Bro communication (Robin Sommer).\n\n- Bug fixes for enumerating attributes and timers (Robin Sommer).\n\n- Bug fix for signatures matching first on one side of the connection,\n  and then on the other, being reported twice (Robin Sommer).\n\n- Inter-Bro communication now continues to work even when packet processing\n  has been suspended (Robin Sommer).\n\n- Fix for running multiple Bro's together in pseudo-realtime (Robin Sommer).\n\n- Tweak to print-resources.bro so it can be loaded standalone (Vern Paxson).\n\n- Bug fix for &persistent state not being save if Bro wasn't running\n  with an input source (Robin Sommer).\n\n- Bug fix for which process ID to check to see if children are still alive\n  (Robin Sommer).\n\n- Bug fix for no longer crashing if the expiration function associated\n  with a table deletes the element from the table rather than returning\n  an interval of 0 secs to indicate it should be deleted (Chema Gonzalez).\n\n- Bug fix for OutboundTFTP notice: now checks to ensure that not only is\n  the source local, but the destination is not local (Vern Paxson).\n\n- Bug fix for a subtle interaction mediated by errno, which could cause a\n  failed read() to later confuse pcap_dispatch() (Chema Gonzalez).\n\n- Bug fix for TCP contents assertion checking (Ruoming Pang).\n\n- Bug fix for error output on small RPC fragments (Ruoming Pang).\n\n- Fix for connection compressor bug in tracking connection history\n  (Robin Sommer).\n\n- Bug fix for potential floating point exception in signature engine's\n  resource-profiling code (Robin Sommer).\n\n- Bug fix for low-level List data structure when replacing a list element\n  beyond the end of a list (Robin Sommer).\n\n- Bug fix in initializing capabilities when setting up communication between\n  Bro peers (Robin Sommer).\n\n- A number of connection compressor bug fixes: weird's for spontaneous\n  FINs and RSTs, consistent processing of \"connections\" that begin with\n  RSTs, correct checksum computations, and weird's printed to stderr if\n  no event handler defined (Robin Sommer).\n\n- load_sample_freq is now &redef (Vern Paxson).\n\n- Bug fix for backdoor detector incorrectly matching substrings (Vern Paxson).\n\n- Bug fix for canceling timers sometimes failing to cancel all of\n  them (Robin Sommer).\n\n- Error handling during un-serialization now handled more robustly\n  (Robin Sommer).\n\n- Bug fix for division by zero if expensive_profiling_multiple\n  set to zero (Robin Sommer).\n\n- Bug fix for connection logs failing to track all of the annotation\n  ($addl) associated with a connection (Vern Paxson).\n\n- Portability fix for BinPAC (Ruoming Pang).\n\n- Fix to NFS analyzer for missing values in events reporting failed requests\n  (Vern Paxson).\n\n- autogen.sh now aborts as soon as one of the tools it invokes fails\n  (Christian Kreibich).\n\n- Fixed bug where not having SSL would cause bro to not compile (Jason Lee).\n\n- State-holding fix for adu.bro (Christian Kreibich).\n\n- A number of configuration tweaks (Craig Leres & Christian Kreibich).\n\n- Fix for sig-functions.bro: checks isApache* functions, which ensure\n  that Apache is indeed in the software set before accessing the index\n  (Brian Tierney and Robin Sommer).\n\n- Smith-Waterman fixes and test suite script (Christian Kreibich).\n\n\n1.0 Sun Oct 23 17:27:45 PDT 2005\n\n- Bro now includes BinPAC (Binary Protocol Analyzer Compiler), a language\n  and compiler for automating the construction of analyzers for binary\n  protocols (Ruoming Pang).\n\n- Ruoming has used BinPAC to rewrite the analyzers for DCE/RPC (with\n  significant enhancements, including adding the endpoing mapper) and SMB\n  (likewise enhanced and bug-fixed), and creating a new analyzer for NCP\n  (Netware Core Protocol).  The NCP analyzer generates two events:\n\n\tncp_request(c: connection, frame_type: count, length: count,\n\t\t\tfunc: count)\n\n\tncp_reply(c: connection, frame_type: count, length: count,\n\t\t\treq_frame: count, req_func: count,\n\t\t\tcompletion_code: count)\n\n- The beginnings of an analyzer for NetBIOS name service (Ruoming Pang).\n  It generates the following events:\n\n\tevent nbns_standard_name_query(c: connection)\n\tevent nbns_nbstat_query(c: connection)\n\tevent nbns_name_reg_request(c: connection)\n\tevent nbns_nb_name_query(c: connection)\n\n- New IRC analyzer (Roland Gruber).  It generates a lot of events; see\n  policy/irc.bro.  Note, the formatting of the log file will at some point\n  be changed to be more uniform and streamlined.\n\n- ICMP events now include an initial parameter of type \"connection\",\n  the same as for TCP & UDP flows (Ruoming Pang).  This facilitates\n  traffic analysis by associating generic connection events such as\n  connection_state_remove with ICMP events.  This affects:\n\n\tevent icmp_sent(c: connection, icmp: icmp_conn)\n\tevent icmp_echo_request(c: connection, icmp: icmp_conn,\n\t\t\tid: count, seq: count, payload: string)\n\tevent icmp_echo_reply(c: connection, icmp: icmp_conn, id: count,\n\t\t\tseq: count, payload: string)\n\tevent icmp_unreachable(c: connection, icmp: icmp_conn,\n\t\t\tcode: count, context: icmp_context)\n\tevent icmp_time_exceeded(c: connection, icmp: icmp_conn,\n\t\t\tcode: count, context: icmp_context)\n\n- New POP3 analyzer (Florian Schimandl, Hugh Dollman and Robin Sommer).\n  Loading pop3.bro analyzes the protocol messages, and loading mime-pop.bro\n  also extracts the email headers and content.\n\n- New events (Ruoming Pang):\n\n\tconnection_first_ACK(c: connection)\n\t\tgenerated upon the ACK completing a TCP handshake. Useful\n\t\tin detecting \"blink scans\" (a FIN coming from the client\n\t\tright after the ACK)\n\n\ttcp_rexmit(c: connection, is_orig: bool, seq: count, len: count,\n\t\t\tdata_in_flight: count, window: count)\n\t\tgenerated when a TCP sender retransmits data\n\n\trpc_call(c: connection, prog: count, ver: count, proc: count,\n\t\t\tstatus: count, start_time: time,\n\t\t\tcall_len: count, reply_len: count)\n\t\tcan be used to process RPC calls in a generic fashion\n\n\tnfs_reply_status(n: connection, status: count)\n\t\tsupplies the status of NFS server replies\n\n\tnetbios_session_raw_message(c: connection, is_orig: bool, msg: string)\n\t\taccess to a NetBIOS SSN message in raw terms\n\n\tsmb_get_dfs_referral(c: connection, max_referral_level: count,\n\t\t\t\tfile_name: string)\n\t\tgenerated for SMB DFS referal requests\n\n\tdns_message(c: connection, is_orig: bool, msg: dns_msg, len: count)\n\t\tlow-level event generated for each DNS request/reponse\n\n\tdce_rpc_bind(c: connection, uuid: string)\n\t\tgenerated for DCE RPC binds\n\n\tdce_rpc_message(c: connection, is_orig: bool, ptype: dce_rpc_ptype,\n\t\t\tmsg: string)\n\t\tlow-level access to DCE RPC messages; see const.bif for\n\t\tdce_rpc_ptype values\n\n\tepm_map_response(c: connection, uuid: string, p: port, h: addr)\n\t\treply from DCE portmapper\n\n- New operator |x|, a sizeof operator (Christian Kreibich).  It yields\n  absolute values for numerical values, file size for files, the number\n  of enums for an enum type, the number of addresses in subnets, number\n  of fields in records, numeric equivalent for addresses, the number of\n  elements in vectors/sets/tables, and the length of strings.\n\n- A new clone operator, \"* <expr>\", produces deep copies of aggregate\n  values and the usual duplicates for atomic ones (Christian Kreibich).\n  For example, while:\n\n\t   1\ttype foo: record {\n\t   2\t\tc: count;\n\t   3\t\ts: string;\n\t   4\t};\n\t   5\n\t   6\tf1$c = 10;\n\t   7\tf1$s = \"Hello\";\n\t   8\n\t   9\tf2 = f1;\n\t   10\tf1$c = 20;\n\t   11\tf1$s = \"World\";\n\t   12\n\t   13\tprint fmt(\"%d/%s %d/%s\", f1$c, f1$s, f2$c, f2$s);\n\n  yields \"20/World 20/World\", changing line 9 to:\n\n\tf2 = *f1;\n\n  yields \"20/World 10/Hello\".\n\n- New operators \"+=\" and \"-=\", which work on both numerical values and\n  strings (Christian Kreibich).\n\n- \"+\" now works on strings: s1 + s2 yields the concatenation of both\n  (Christian Kreibich).\n\n- You can now express the equivalent of ICMP \"port numbers\" using\n  <number>/icmp, where <number> is the ICMP type (Ruoming Pang).\n\n- Bro now accepts long versions of options, such as --readfile for -r\n  (Christian Kreibich).\n\n- Bro now has a \"pseudo-realtime\" mode, activated by --pseudo-realtime,\n  that causes it to mimic real-time operation when executing against\n  a trace (Robin Sommer).  This is useful for evaluating performance in\n  a controlled fashion.\n\n- SMTP analyzer changes (Roger Winslow): support for 554 code in RCPT\n  responses; logging when the server refuses the argument to RCPT;\n  support for 502 code in response to a HELP command.\n\n- Addition of two universal hash functions: H3 (from David Moore, based\n  on code by Ken Keys) and TwoWise (Dietzfelbinger, from Yin Zhang)\n  (Ruoming Pang).  Use --enable-h3 and --enable-dietzfelbinger to enable\n  them (used as the hash function for short data).  H3 is used by default.\n\n- The \"bif\" compiler for compiling Bro built-in functions now supports\n  an \"enum\" type (Ruoming Pang).  The syntax is:\n\n\tenum dce_rpc_ptype\n\t%{\n\t\tDCE_RPC_REQUEST,\n\t\tDCE_RPC_PING,\n\t\tDCE_RPC_RESPONSE,\n\t%}\n\n  which is translated to an enum declaration of \"dce_rpc_ptype\" in\n  Bro, an EnumType* enum_dce_rpc_ptype in NetVar.{h,cc} and a C++ enum\n  BroEnum::dce_rpc_ptype {...}.\n\n  One limitation is that redef's on enum types cannot be taken into\n  account because the bif is parsed at compile time.\n\n- 64-bit integer support via --enable-int64 (Ruoming Pang).\n\n- The new, experimental policy script adu.bro provides a generic way to\n  extract application-layer ADUs (Christian Kreibich).  It heuristicly\n  groups blocks of content sent from one side to another, uninterrupted\n  by any data in the opposite direction, into an approximate ADU (request\n  or reply).  These then generate adu_tx (originator -> responder) and\n  adu_rx (responder -> originator) events.  You can control on which ports\n  it does this analysis, as well as the amount of data inspected nad\n  grouped, using variables documented in the script.\n\n- The new built-in function\n\n\tfunction str_smith_waterman(s1: string, s2: string, params: sw_params)\n\t: sw_substring_vec\n\n  computes the Smith-Waterman overlap between two strings (Christian Kreibich).\n  The third parameter is a record with two fields, $min_toklen (minimum\n  length for common tokens) and $sw_variant, which takes a value of 0\n  for single-matching and 1 for multiple-matching.\n\n  The return value is a vector of sw_substring records, which hold the\n  following fields:\n\n\tstr: string;\t# the common subsequence\n\tindex1: count;\t# where it occurs in input string 1\n\tindex2: count;\t# where it occurs in input string 2\n\tnew: bool;\t# true if start of new alignment\n\n- If you set the new control variable record_state_history to T, then\n  connections recorded to the conn.$BRO_LOG_SUFFIX log file will include\n  a field that shows the different states encountered during the connection\n  (Mark Allman):\n\n\tSymbol\tState\n\t------\t-----\n\tS\tInitial SYN seen for TCP connection.\n\tH\tSYN-ACK seen for TCP connection.\n\tD\tData packet seen (TCP or UDP).\n\tA\tPure ACK seen for TCP connection.\n\tF\tFIN seen for TCP connection.\n\tR\tRST seen for TCP connection.\n\tI\tTCP connection included a FIN+RST packet.\n\tQ\tTCP connection included a packet with multiple connection\n\t\tcontrol flags other than FIN+RST (e.g., SYN+RST).\n\tC\tConnection included one or more packets with failed checksums\n\t\t(TCP or UDP).\n\n  The symbols are printed in upper-case for connection originators and\n  lower-case for responders.  The S/H/F/R symbols are also repeated if\n  Bro sees the corresponding control packet subsequently with a different\n  sequence number.\n\n  For example, a TCP connection which Bro saw from the beginning, i.e.,\n  a normal establishment, followed by the client (originator) first sending\n  data, then the server responding, followed by the server initiating a\n  normal close which the client then completes, will be annotated as\n  \"ShADadfF\".\n\n- The \"for\" looping construct now can be used to iterate over the non-empty\n  indices of a vector (Christian Kreibich).\n\n- If you set the new variable skip_http_data to T (default: F), then the\n  HTTP analyzer will attempt to not reassemble the data portions of HTTP\n  request/responses (Ruoming Pang).  This can be a performance benefit\n  in environments with high volumes of HTTP traffic, though it may not be\n  a large win if the processing is dominated by executing the policy script.\n\n- The new built-in\n\n\tremask_addr(a1: addr, a2: addr, top_bits_from_a1: count): addr\n\n  take some top bits (e.g. subnet address) from a1 and remaining bits\n  (intra-subnet part) from a2 and merge them to get a new address (Ruoming\n  Pang).  Useful for anonymizing at the subnet level while preserving\n  serial scans.\n\n- The new built-in\n\n\tdecode_netbios_name(name: string): string\n\n  takes a string in NetBIOS encoding and returns its original form\n  (Ruoming Pang).\n\n- The new variable ignore_keep_alive_rexmit controls whether to\n  include keep-alives when counting retransmitted packets (Ruoming Pang).\n  It defaults to F (i.e., do count them).\n\n- The calling sequence of dce_rpc_request and dce_rpc_reply have changed to:\n\n\tevent dce_rpc_request(c: connection, opnum: count, stub: string)\n\tevent dce_rpc_response(c: connection, opnum: count, stub: string)\n\n  (Ruoming Pang).  Use dce_rpc_message to get access to the RPC type and\n  the raw message.\n\n- The calling sequence of the netbios_session_message event has changed to:\n\n\tnetbios_ssn_message(c: connection, is_orig: bool,\n\t\t\t\tmsg_type: count, data_len: count)\n\n  (Ruoming Pang).  Previously it was parameterized with the connection\n  and the raw message (now available via netbios_session_raw_message).\n\n- The calling sequences of smb_com_{read,write}_andx have changed to\n  no longer include the is_orig parameter because it is in fact fixed for\n  these events (Ruoming Pang).\n\n- The calling sequence of smb_message has changed (Ruoming Pang) to:\n\n\tsmb_message(c: connection, is_orig: bool, cmd: string,\n\t\t\tbody_length: count)\n\n- Bug fix specifying the &default value for tables that yield function\n  values (Ruoming Pang).  For example:\n\n\ttype tcp_content_handler_func:\n\t\tfunction (c: connection, is_orig: bool, seq: count,\n\t\t\t\tcontents: string);\n\n\tfunction default_tcp_content_handler(c: connection, is_orig: bool,\n\t\t\t\t\t\tseq: count, contents: string)\n\t\t{\n\t\t# do something ...\n\t\t}\n\n\tconst tcp_content_orig_handlers: table[port] of\n\t\ttcp_content_handler_func = {} &redef &default =\n\t\t\tdefault_tcp_content_handler;\n\n  Previously, Bro would take the function given with &default as the default\n  function to call when accessing a missing element, rather than a default\n  *value* to directly return. Bro now checks the value type against the\n  function type to see if they match in type.\n\n- The new variables forward_remote_events and forward_remote_state_changes\n  specify whether to broadcast events/state received from one peer to other\n  peers (Robin Sommer).  Both default to F.  Note, these options are temporary;\n  they will disappear when we add a more sophisticated script-level\n  communication framework.\n\n- Vectors can now be initialized using the syntax such as\n\n\tglobal foo: vector of string = [\"foo\",\"bar\"];\n\n  (Robin Sommer).\n\n- Bug fixes for &synchronize'ing vectors (Robin Sommer).\n\n- The internal implementation of strings in the policy language has\n  been heavily revamped (Christian Kreibich).\n\n- String built-in functions are now in strings.bif rather than bro.bif\n  (Christian Kreibich).  This includes two new built-ins:\n\n\tstr_split(s: string, idx: index_vec): string_vec\n\tstrstr(big: string, little: string): count\n\n  string_vec is a new policy script type that is an alias for\n  \"vector of string\".\n\n- The new options --load-seeds <file> and --save-seeds <file> let you\n  record Bro's seeds to a file and then re-use these seeds in a later\n  invocation (Christian Kreibich). The primary intended usage is to\n  provide determinism in hash table iterations etc. for debugging purposes.\n\n- Communication protocol changes (Robin Sommer):\n\n  * Internal PING/PONG messages to measure round-trip times.  The new script\n    remote-ping.bro issues PINGs every second and logs to remote.log.\n\n  * Optional data compression if libz is available.  Remote::Peer$compression\n    specifies compression level, with no compression being the default.\n\n  * Inter-Bro communication is now performed in four explicit phases:\n\n    //  Setup:\n    //      Initial phase.\n    //      VERSION messages must be exchanged.\n    //      Ends when both peers have sent VERSION.\n    //  Handshake:\n    //      REQUEST_EVENTS/REQUEST_SYNC/CAPTURE_FILTER/CAPS/selected SERIALs\n    //        may be exchanged.\n    //      Phase ends when both peers have sent PHASE_DONE.\n    //  State synchronization:\n    //      Entered iff at least one of the peers has sent REQUEST_SYNC.\n    //      The peer with the smallest runtime (incl. in VERSION msg) sends\n    //        SERIAL messages comprising all of its state.\n    //      Phase ends when peer sends another PHASE_DONE.\n    //  Running:\n    //      Peers exchange SERIAL (and PING/PONG) messages.\n    //      Phase ends with connection tear-down by one of the peers.\n\n  * Serializing network packets includes textual tags for identification.\n\n  * Serializing files includes the state of buffering.\n\n- Pending events for remote peers are now flushed when Bro terminates,\n  and the net_done event is *not* propagated to peers (Robin Sommer).\n\n- Makefile.am cleanups (Christian Kreibich).\n\n- libpcap portability fix for OpenBSD (Gordon Willem Klok).\n\n- Performance bug fix for SMTP relay detection (Vern Paxson).\n\n- sprintf -> snprintf tweak (Vern Paxson).\n\n- Bug fix for serializer regular-expression matchers (Robin Sommer).\n\n- Some fixes for access to uninitialized variables/state (Christian Kreibich\n  and Vern Paxson).\n\n- More informative messages for some internal errors (Christian Kreibich).\n\n- Bug fixes for implementation of vectors (Christian Kreibich).\n\n- Fixes for FreeBSD 5 installs (Jason Lee).\n\n- gcc 4.0 compatibility (Christian Kreibich).\n\n- Bug fix for correctly propagating libpcap failures (Chema Gonzalez).\n\n- Bug fixes for prefix-preserving IP address anonymization (Chema Gonzalez).\n\n- The MIME analyzer in mime.bro is now in \"module MIME\" (Vern Paxson).\n\n- Bug fix for the IRC backdoor detector (Scott Campbell).\n\n- The capture filter used for NFS traffic now includes UDP fragments,\n  since NFS UDP traffic is often fragmented (Ruoming Pang).\n\n- New internal mechanisms to suspend/resume processing to enable a Bro\n  receiving synchronized state to put its own packet processing on hold\n  (Robin Sommer).\n\n- A bug with the serialization cache not being used for modified objects\n  has been fixed (Robin Sommer).\n\n- A number of enhancements to inter-Bro communication performance and error\n  handling improved (Robin Sommer).\n\n- Internal restructuring to fix problems with dispatching packets when\n  using the packet sorter (Ruoming Pang).\n\n- Christian Kreibich has contributed a number of fixes for code flaws\n  such as potentially unsafe library calls.\n\n\n0.9a10 Tue Sep  6 10:41:53 PDT 2005\n\n- Fixes for portability to 64-bit architectures (Christian Kreibich).\n\n- Bug fix for broken syslog'ing of alarms (Scott Campbell).\n\n- The manual has been updated to clarify that aggregate values in events\n  are passed as shallow copies, so that modifications to elements of the\n  values after posting the event but before it's handled will be visible\n  to the handlers for the events (Christian Kreibich).\n\n- HTTP logging now includes the host from the Host header in the request\n  (Craig Leres).  Note, currenty this only is done when using http-reply.bro,\n  not if you only analyze requests.\n\n- You can now specify a passphrase for the SSL cert used for inter-Bro\n  communication by redef'ing the variaable \"ssl_passphrase\" (Christian\n  Kreibich).  Leaving it unchanged causes the passphrase to be read\n  interactively.\n\n- Certificates created using ca-issue now have 2-year lifetimes rather\n  than the default of 30 days (Christian Kreibich).\n\n- A problem with handshaking between Bro peers has been fixed (Christian\n  Kreibich).\n\n- A bug has been fixed in scanning false positives due to backscatter\n  in the form of SYN ACKs (Vern Paxson).\n\n- Alerts sent via email now use a From address configured from bro.cfg\n  (Randy Mcclelland-Bane).  Also, if sending an alert via gpg fails,\n  it's sent instead as plaintext.\n\n- Scan notices now include information about the connection that\n  triggered the scan detection decision (Vern Paxson).\n\n- Exported some TRW variables so the user can adjust their associated\n  timers (Vern Paxson).\n\n- The new script variable dns_max_queries sets a maximum on the number of\n  queries that can appear in a DNS request (Scott Campbell & Vern Paxson).\n  If more queries appear, the request is treated as non-DNS traffic and\n  ignored.  The variable defaults to a value of 5.  Setting it to 0 turns\n  off this functionality, so Bro processes all apparent requests.\n\n- The \"weird\" messages generated by the DNS analyzer now have a more\n  regular naming structure and processing (Scott Campbell and Vern Paxson).\n\n- Tweaked bif_arg.cc to pass gcc4.0 and bro.bif to not collide with\n  uuid in OSX 10.4 (Jason Lee).  Now works on OSX 10.4, though use\n  --disable-localpcap when compiling.\n\n- Bro now compiles cleanly under OpenBSD (Jason Lee).\n\n- NOTE: the connection compressor has a known serious bug and should\n  not be used at present.  Since it is an experimental feature, fixing it\n  is deferred to the next release.\n\n- Some bugs fixed in the management of hash keys when using the\n  connection compressor (Robin Sommer).\n\n- Tweak for the connection compressor to generate truncated_header weird's\n  (Robin Sommer).\n\n- Temporary bug fix for type clash in SSL version numbers (Vern Paxson)\n  by making them consistently of type int.  The correct fix is probably\n  for them to be consistently of type count, depending on how Bro's notion\n  of general version processing, and its SSL analyzer, both evolve.\n\n- Bug fix for trace rewriting failing if Bro was not compiled to check\n  assertions (Martin Casado).\n\n- Fixed logic bug in signal handling regarding whether we're currently\n  idle waiting for input vs. processing a packet or the event queue\n  (Vern Paxson).  Note, this change has not been heavily tested.\n\n- Some bug fixes for correct operation when DNS names fail to resolve\n  (Vern Paxson).  It's not clear that these fixes are complete, however.\n\n- Fixed to not compile libpcap when --disable-localpcap is given to configure\n  (Jason Lee).\n\n- Fixed configuration of local pcap for IPv6 if --enable-brov6 is specified\n  (Jason Lee).\n\n- A problem with \"make install\" when building from the libpcap included\n  in the sources has been fixed (Christian Kreibich).\n\n\n0.9a9 Thu May 19 23:31:33 PDT 2005\n\n- First cut at analyzer for NFS (Vern Paxson).  It generates the following\n  events:\n\tevent nfs_request_null(n: connection)\n\tevent nfs_request_getattr(n: connection, fh: string, attrs: nfs3_attrs)\n\tevent nfs_request_lookup(n: connection, req: nfs3_lookup_args,\n\t\t\t\trep: nfs3_lookup_reply)\n\tevent nfs_request_fsstat(n: connection, root_fh: string,\n\t\t\t\tstat: nfs3_fsstat)\n\tevent nfs_attempt_null(n: connection, status: count)\n\tevent nfs_attempt_getattr(n: connection, status: count, fh: string)\n\tevent nfs_attempt_lookup(n: connection, status: count,\n\t\t\t\treq: nfs3_lookup_args,\n\t\t\t\tdir_attrs: nfs3_opt_attrs)\n\tevent nfs_attempt_fsstat(n: connection, status: count,\n\t\t\t\troot_fh: string, obj_attrs: nfs3_opt_attrs)\n\n- The new script OS-fingerprint.bro integrates Bro's new passive OS\n  fingerprinting mechanism with the software.bro framework (Vern Paxson).\n\n- You can now operate on patterns using && and || (Vern Paxson).\n  If p1 and p2 are patterns, then p1 && p2 yields a pattern that matches\n  their concatenation and p1 || p2 yields a pattern that matches either.\n  Note that the syntax for this may change in the future to a single '&'\n  or '|', which would be more consistent with the use of '|' in\n  constructing pattern constants.\n\n- An experimental \"connection compressor\" tracks not-yet-established\n  connections using much less memory than Bro normally does (Robin Sommer).\n  This is potentially a major win during flooding attacks and high-speed\n  scans.  You activate it by setting use_connection_compressor to T.  You\n  can then control the granularity of its processing using the variables\n  cc_handle_resets, cc_handle_only_syns, and cc_instantiate_on_data.  See\n  bro.init for brief discussion of these.\n\n- The experimental new script firewall.bro supports firewall-rule-like\n  processing of connections in terms of allow/deny (Robin Sommer).  It is\n  not particularly efficient.\n\n- sensor-sshd.bro provides an experimental interface for receiving\n  events from instrumented SSH servers that communicate with Bro via\n  the Broccoli client library (Christian Kreibich and Robin Sommer).\n  Supporting this also entailed extensions to login.bro so it can\n  process the events even though they don't correspond to a connection\n  known to Bro's event engine.\n\n- The new built-in function match_signatures() can be used in a policy\n  script to send text directly into the signature engine (Robin Sommer).\n\n- Correction: the 0.9a8 CHANGES states that the mail_script variable used\n  for NOTICE_EMAIL defaults to mail_script.sh.  The correct value is instead\n  \"mail_notice.sh\".\n\n- The scripts rsh.bro and passwords.bro, and the passive-fingerprinting\n  signatures policy/sigs/p0fsyn.osf were inadvertantly left out of the\n  0.9a8 distribution.\n\n- Added s2b (snort to bro) files into the distribution. (Jason Lee)\n\n- Non-blocking packet capture under Linux has been fixed (Robin Sommer).\n\n- Fixed printing of DNS replies, which used to work but was broken\n  a number of months ago (Vern Paxson).\n\n- The new script brolite-sigs separates out how signatures are configured\n  in Bro Lite so the functionality can be enabled/disabled with a simple\n  load statement (Roger Winslow).  That is, to use signatures with Bro\n  lite, simply add \"@load brolite-sigs\".\n\n- The new script variable enable_syslog (default T) controls whether\n  alarm's are syslog'd (Robin Sommer).  As before, syslogs can only happen\n  when Bro is reading from live network traffic (this should be changed\n  at some point, to accommodate real-time Bro's that don't read the network\n  but collect events from other sensors).  Previously, in that case syslog's\n  always happened; now, you can turn them off using this variable.\n\n- The new script variable expensive_profiling_multiple controls how\n  often, when doing profiling, to perform more expensive forms of\n  profiling, in particular, memory consumption profiling (Robin Sommer).\n  If profiling_interval is set to 15 sec and expensive_profiling_multiple\n  is set to 20, then expensive profiling will be done every 5 minutes\n  (these are the defaults now in profiling.bro).  Also, the profiling_update\n  event now includes a second argument, expensive: bool, which indicates\n  whether the update corresponds to one of these expensive profiling\n  intervals.\n\n- First cut at parsing DNS AAAA replies (Scott Campbell).  This is quite\n  incomplete - currently, the replies are turned into fake A record replies,\n  due to the difficulty of dealing with IPv6 addresses if Bro wasn't built\n  to analyze IPv6 traffic.\n\n- software.bro has been tweaked to have a new control variable,\n  \"only_report_local\" (default F).  If true, then only software versions\n  for local addresses (as determined by is_local_addr()) will be\n  reported.\n\n- synflood.bro now has a script variable max_sources (default 100) that\n  specifies the maximum number of sources to track for a given victim\n  (Robin Sommer).\n\n- Remote peers now negotiate their versions of the serialization format\n  (Robin Sommer). If they don't agree then the connection is terminated.\n\n- Generic UDP request/response processing has been moved into the new\n  policy script udp-common.bro, which, unlike udp.bro, does *not* set the\n  packet filter to capture all UDP traffic (Robin Sommer).  A number\n  of UDP-based policy scripts have been modified to use udp-common.bro\n  rather than udp.bro.\n\n- When printing serialized/independent state, access times are now\n  again included (Robin Sommer).\n\n- Bro's implementation of timers has been switched (reverted) to using\n  priority queues (Vern Paxson).\n\n- The http-request.bro script variables skip_remote_sensitive_URIs and\n  const sensitive_post_URIs are now exported so they can be accessed\n  externally (Robin Sommer).\n\n- Some new rootkit filenames have been added to ftp.bro and\n  http-request.bro (Brian Tierney).  The plan is to eventually\n  merge these lists so there's only one main list.\n\n- trw.bro is now scoped as a module \"TRW\" (Brian Tierney).\n\n- Better support of the '--disable-localpcap' flag to configure, and\n  consolidated all the pcap checks in configure.in (Jason Lee).\n\n- A bug in processing bare carriage-returns in Telnet input/output\n  has been fixed (Vern Paxson).\n\n- The Bro Lite bro.rc script has been tweaked to use the 'ax' flags\n  instead of '-ax' (Jason Lee).\n\n- A bug with reporting ICMP \"ports\" (i.e., type + code) has been fixed\n  (Vern Paxson).\n\n- Bug fix for excessively large RPC messages (Ruoming Pang).\n\n- A bug with /0 subnet prefixes has been fixed (Robin Sommer).\n\n- The function record_connection() now takes the file to write to\n  as its first argument (Robin Sommer).\n\n- remote.bro now tracks whether a given Destination is connected\n  (Robin Sommer).\n\n- mail_notice.sh is now installed as part of installing a distribution\n  (Jason Lee).\n\n- Fixed bug where the sort order for the test suite changed depending\n  on locale. (Jason Lee)\n\n- Bug fix for email_notice() when notice_action_filters not defined for\n  given notice (Vern Paxson).\n\n- The test suite test for rare-events fixed to not give false positives\n  (Jason Lee).\n\n- Date added for 0.9a8 release.\n\n\n0.9a8 Wed Feb 16 17:09:34 PST 2005\n\n- aux/rst/ contains the source for the \"rst\" tool used by Bro (via the\n  policy script function terminate_connection() in conn.bro) to tear\n  down established connections by forging RST packets.\n\n- Bro's main event loop has been reworked (Robin Sommer).  This should\n  (1) not cause any visible differences in most cases, (2) improve\n  performance in some cases, (3) fixed problems running Bro without\n  a network input (but still receiving asynchronous input from remote\n  event sources).  There are some more changes coming to this soon.\n\n- Passive OS fingerprinting has been added, based on Michal Zalewski's\n  \"p0f\" tool (Holger Dreger).  Currently, it's limited to fingerprinting\n  clients based on the initial SYNs they send.  To use it, define\n  an event handler:\n\n\tOS_version_found(c: connection, host: addr, OS: OS_version)\n\n  OS_version is a record containing a string $genre (e.g., \"Solaris\"),\n  a string $detail (e.g., \"2.0.27\"), a count $dist (hop-count distance\n  from monitor to host), and $match_type, which specifies via an\n  enumerated type whether the match was direct from a signature,\n  generic to the genre, or \"fuzzy\".\n\n  The match is done against a passive fingerprinting signature file,\n  which is specified by the variable passive_fingerprint_file.\n  It defaults to \"sigs/p0fsyn\", which is found using $BROPATH\n  and has an \"osf\" suffix added.\n\n  You can restrict the matching to only be performed for hosts from\n  particular subnets by adding those subnets to the variable\n  generate_OS_version_event.  If it's empty (default), then all subnets\n  are analyzed.\n\n  Note, the passive fingerprinting should be integrated with the\n  version-tracking in software.bro, but this hasn't been done yet.\n\n- Support for IPv6 has been repaired and brought up to date.  Note, however,\n  that inter-Bro communication currently only works over IPv4.\n\n- Signature-matching is now off by default in brolite.bro.  If you want\n  to use it, define use_signatures = T prior to @load'ing it.\n\n- Notices are now tied to their corresponding connections (Scott Campbell).\n\n- New backdoor detectors for IRC, SMTP, Gaobot (Scott Campbell).\n\n- Signature matches now have a connection associated with them (Scott Campbell).\n\n- Bro scripts that set initial timers (via \"schedule\" statements in a\n  bro_init handler) but don't have any source of network input (trace\n  files or live interfaces) now execute in real-time, with network_time\n  set to the current time, rather than having their timers expire immediately.\n\n- Default timeouts have been added to tables in trw.bro and http.bro, which\n  have been found operationally to potentially grow very large (Scott Campbell).\n\n- The new policy script large-conns.bro can be included in order to\n  track the size of TCP connections (each direction is referred to\n  as a \"flow\") using a secondary packet filter (Chema Gonzalez).\n  This method is completely separate from Bro's usual size accounting,\n  and offers the advantages that it tracks sizes even for connections\n  that don't terminate (or for which Bro misses their establishment)\n  and for connections with sizes > 4 GB.\n\n  The interface is via the function:\n\n\tfunction estimate_flow_size_and_remove(cid: conn_id, orig: bool)\n\n  If $orig=T, then an estimate of the size of the forward (originator)\n  direction is returned.  If $orig=F, then the reverse (responder) direction\n  is returned.  In both cases, what's returned is a \"flow_size_est\" record,\n  which includes a flag, $have_est, indicating whether there was any\n  estimate formed. If $have_est is T, then the record also includes\n  an estimate in bounded by $lower (lower bound) and $upper (upper bound).\n  The estimate also includes $num_inconsistent, which, if > 0, means that\n  the estimates came from sequence numbers that were inconsistent, and\n  thus something is wrong - perhaps packet drops by the secondary filter).\n  Finally, calling the function causes the flow's record to be deleted.\n\n- An RSH analyzer has been contributed by Manu (ManuX@rstack.org).\n  It generates rsh_request and rsh_reply events, and the following notices:\n\n\t  DifferentRSH_Usernames\n\t\tClient and server username differ.\n\n\t  FailedRSH_Authentication\n\t\tAttempt to authenticate via RSH failed.\n\n\t  InteractiveRSH\n\t\tThe RSH session appears to be interactive (multiple\n\t\tlines of user commands).\n\n\t  SensitiveRSH_Input\n\t  SensitiveRSH_Output\n\t\tRSH client input or server output match input_trouble/\n\t\tfull_input_trouble or output_trouble/full_output_trouble.\n\n- The new notice action NOTICE_EMAIL indicates that in addition to\n  logging an alarm, it should also be sent out as email (Scott Campbell).\n  By default, email is only sent if Bro is running on live traffic;\n  you can override this via redef'ing the script variable mail_notification.\n  Mail is sent using the script specified by the mail_script variable\n  (default: \"mail_script.sh\", which is now included in the distribution,\n  but at present is not installed), which must be in $PATH.  The mail\n  is sent to the username specified in mail_dest (default: the local\n  \"bro\" user, though you can change this to name@domain).\n\n  Note that specifying email as a separate notice action may change\n  in the future, to instead be an attribute that's associated with\n  other notice actions.  For example, it may make sense to want\n  to specify both NOTICE_ALARM_PER_CONN and NOTICE_EMAIL; currently,\n  however, you can't do this.\n\n- A similar notice action NOTICE_PAGE does the same thing as NOTICE_EMAIL\n  except it send the mail to mail_page_dest (Scott Campbell).\n\n- You can now use the attribute &rotate_size for file objects to\n  specify the maximum file size in bytes (Robin Sommer). If the limit\n  is reached, the file is rotated similiarly as is already done with\n  &rotate (which, for consistency, has been renamed to &rotate_interval).\n\n  For both &rotate_size and &rotate_interval, when they trigger they\n  now generate events (rotate_size and rotate_interval, respectively;\n  each takes the file as the sole argument) rather than invoking\n  &postprocessor, which has been removed.\n\n  There's also a new variable log_rotate_size to set a global size maximum.\n\n  Related to log rotation are the following new built-in functions:\n\n\trotate_file(f: file) closes the file, moves it to a temporary\n\tname, and opens a new one. It returns the new \"rotate_info\"\n\trecord, which gives the temporary name and the open/close times.\n\n\trotate_file_by_name(s: string): similar, but call by the name\n\tof the file rather than a Bro script value.  This is needed\n\tbecause some files are not represented by file objects but need\n\tto be rotated nevertheless (most importantly, the tcpdump save\n\tfile and the dump files for dump_current_packet()). This function\n\trotates the file with the given name.\n\n  Finally, you can load the new policy script rotate-logs.bro to\n  get default behavior of rotating all log files every hour.\n\n- The new \"@unload <script>\" directive specifies that future @load's of\n  <script> should be skipped.  This is useful for overriding analyzers\n  loaded by scripts that pull in a bunch of analysis.  For example,\n\n\t@unload ntp\n\t@load mt\n\n  would load all of the \"mt\" analyzers *except* ntp.bro.\n\n- The new built-in function get_file_name(f: file): string returns\n  the filename associated with a file (John McNicholas).\n\n- The new built-in function get_contents_file(id: conn_id, direction: count)\n  returns the contents file (set using set_contents_file()) for the given\n  direction (John McNicholas).\n\n- The new built-ins time_to_double() and double_to_time() convert between\n  double values and time values (Robin Sommer).  The new built-in floor()\n  returns the floor of a double value; this returned value is also a double.\n  Thus, floor(-3.4) returns -4.0.\n\n- Support for sending packets between Bro's (Robin Sommer).\n\n- Bro now has a geneal mechanism internal for traversing policy scripts\n  (Umesh Shankar).  Various script analyses can be specified using the\n  new -z flag.\n\n  Currently, the one supported form of analysis is \"-z notice\", which\n  prints all of the different types of notices that the script you've\n  loaded can generate.  For example, \"bro -z notice ftp\" will generate:\n\n\t  Found NOTICE: BackscatterSeen\n\t  Found NOTICE: FTP_PrivPort\n\t  Found NOTICE: FTP_BadPort\n\t  Found NOTICE: PortScan\n\t  Found NOTICE: FTP_ExcessiveFilename\n\t  Found NOTICE: ScanSummary\n\t  Found NOTICE: AddressDropped\n\t  Found NOTICE: DroppedPackets\n\t  Found NOTICE: SensitiveConnection\n\t  Found NOTICE: FTP_UnexpectedConn\n\t  Found NOTICE: SSH_Overflow\n\t  Found NOTICE: FTP_Sensitive\n\t  Found NOTICE: TerminatingConnection\n\t  Found NOTICE: PasswordGuessing\n\t  Found NOTICE: AddressDropIgnored\n\t  Found NOTICE: AddressScan\n\n- The signature rule language now supports an \"active\" keyword,\n  which can be set to \"true\" or \"false\", with the latter turning\n  off the rule (Roger Winslow).  If set to false the signature will\n  not be loaded into the rule matcher, otherwise it is.\n\n- The signature rule language now supports meta data of the form\n  \".MMM<whitespace>XXX\", where MMM is arbitrary text which makes up the name\n  of the meta data option and where XXX is arbitrary text up to the end\n  of the current line (Roger Winslow).  The intent is that some forms of\n  meta-data will be regularized/standardized in the future - information\n  such as date modifed, category/class, weighting, etc.  For now, it\n  provides a way to annotate rules with nominally more structure than just\n  using comments (though it is currently treated the same, i.e., everything\n  is ignored).\n\n- The following meta data option names are now reserved: .version, .revision,\n  .version-date, .revision-date, .date-created, .location\n\n- The new enumerated type \"transport_proto\" is used to specify different\n  types of transport protocols: \"tcp\", \"udp\", \"icmp\", and \"unknown_transport\".\n  Associated with it are new built-in functions: is_udp_prot(), is_icmp_port(),\n  get_conn_transport_proto, and get_port_transport_proto.  The latter two\n  map a given connection and a given \"port\" value to their corresponding\n  transport_proto value.\n\n- A bunch of tuning (regular expressions for sensitive login sessions,\n  scan detection thresholds, forbidden/hot usernames and filenames,\n  sensitive URIs, \"weird\" actions) have been incorporated from\n  operational configurations.\n\n- Serious bugs in managing large numbers of files fixed.\n\n- A serious bug with negative DNS TTL settings (and, more generally,\n  with negative timer values) fixed.\n\n- The traditional connection logging format is no longer supported.\n\n- The SMTP analyzer's state machine processing has been modified to\n  correctly deal with clients that (incorrectly) pipeline their commands\n  (Ruoming Pang).\n\n- A bug fixed in detecting SMTP relays for connections w/o message bodies\n  (Ruoming Pang).\n\n- A bunch of bugs in recording connection summaries for UDP flows\n  have been fixed.\n\n- A new script module, passwords.bro, generates PasswordExposed notices\n  for activity (currently just rlogin/telnet logins) that expose passwords.\n\n- A new script module, file-flush.bro, can be loaded to cause all log\n  files to be flushed every file_flush_interval (default: 10) seconds.\n  This is handy if you like to watch the files in real time.\n\n- Zone transfers now generate a ZoneTransfer notice, unless the host\n  making the request is in DNS::zone_transfers_okay.\n\n- Bro's DNS cache (generated using -P and accessed using -F) is\n  now kept in the .state/ subdirectory rather than in the user's\n  home directory (Roger Winslow).\n\n- Some changes to remote propagation of events/values and detection of\n  state inconsistencies (Robin Sommer).\n\n- A fix for avoiding delays on low-volume links for some systems for\n  which it can take a long time to fill up the pcap buffer, and pcap doesn't\n  return partial buffers (Robin Sommer).\n\n- A bug in table expiration timers has been fixed (Robin Sommer).\n\n- A bug in comparing subnets has been fixed.\n\n- A bug in using a non-constant value for a &write_expire attribute\n  has been fixed.\n\n- A bug in using CONTENTS_BOTH for writing reassembled streams to\n  files has been fixed (John McNicholas).\n\n- A subtle but potentially damaging bug in fragment reassembly has\n  been fixed.\n\n- A bug with using local variables of vector types has been fixed.\n\n- A bug with comparing strings has been fixed.\n\n- Bro no longer generates the RST_with_data \"weird\", as with modern\n  stacks it's no longer any sort of strange occurrence.\n\n- Related to this, the signature rule matcher no longer matches\n  against the payload of RST packets.  (Note, this is an imcompatibility\n  with Snort.)\n\n- Portmapper mappings are now written in the connection log in\n  alphabetical order.\n\n- The event engine variable frag_timeout now defaults to 5 minutes if you\n  load frag.bro, and is accessed via redef rather than by defining the\n  global directly.\n\n- The interval that signatures.bro waits for until generating a signature\n  summary can now be set using the new script variable sig_summary_interval,\n  and a bug in generating the summaries has been fixed (Robin Sommer).\n\n- The new script peer-status.bro generates periodic \"update\" events regarding\n  a remote peer's status (Robin Sommer).  These take the form:\n\n\ttype peer_status: record {\n\t\tres: bro_resources;\n\t\tstats: net_stats;\n\t\tcurrent_time: time;\n\t\tcpu: double;\t\t# average CPU load since last update\n\t\tdefault_filter: string;\t# default capture filter\n\t};\n\n- The bro_resources record returned by resource_usage() now includes\n  three additional fields, $version (the version of Bro), $debug\n  (T if Bro was compiled with debugging information), and $start_time\n  (the time Bro began executing - clock time, not network time).\n\n- The new built-in function same_object(o1: any, o2: any): bool\n  returns true if its arguments refer to the same object, false\n  otherwise.  This can be useful for comparing tables, for example\n  in calls to table element expiration functions.\n\n- The new built-in function bro_is_terminating(): bool returns true if\n  Bro is done reading from its network input source(s) and is now\n  in its final termination cleanup (Robin Sommer).\n\n- A new built-in strftime() formats a timestamp, returning a string\n  (Robin Sommer).\n\n- A new built-in file_size() returns the size of the file with a\n  given name (Robin Sommer - note: *not* a Bro file value).\n\n- A potential deadlock with inter-Bro communication has been fixed\n  (Robin Sommer).\n\n- Bro now always forks a copy of itself when executing, as this\n  can save considerable memory when using inter-Bro communication\n  (Robin Sommer).\n\n- The Bro interconnection protocol now includes explicit handshaking\n  during session establishment to mark that a peer is ready (Robin Sommer).\n  Implementing this includes a change in the wire protocol that is\n  incompatible with the protocol used in the past.\n\n- The TCP inactivity timer is now started whenever a connection\n  transitions from a pre-establishment state (including \"inactive\")\n  to some sort of established state (Robin Sommer).  Prior to this\n  fix, connections for which a proper SYN handshake was not seen would\n  not be timed out as inactive.\n\n- The --disable-openssl configure option has been removed; now\n  the only option is --with-openssl, and --with-openssl=no disables\n  use of OpenSSL (Gregor Maier).\n\n- A bug in invoking &expire_func functions has been fixed (Robin Sommer).\n\n- A bug in logfile rotation has been fixed (Robin Sommer).\n\n- A bug in recognizing negative floating point values has been fixed.\n\n- worm.bro now suppresses the default signature action for worms\n  it knows about, since it generates events for them (Robin Sommer).\n  The list of worms detected via signatures now includes Bagle-BC.\n\n- Signatures for known worms are now skipped when doing signature\n  summaries and scan detection, if worm.bro is loaded (Robin Sommer).\n\n- request_remote_events and request_remote_sync now implicitly\n  do set_accept_state, too.\n\n- Better error handling for SSL connections (Robin Sommer).\n\n- Bug fixed which caused diagnostic messages to be lost when using\n  inter-Bro communication (Robin Sommer).\n\n- gcc 3.4 portability fixes (Brian Lindauer).\n\n- Solaris portability fixes (Robin Sommer).\n\n- The Bro distribution now includes and uses its own version of libpcap\n  for portability reasons (Jason Lee).\n\n- Some minor bug fixes to handling of tcpdump save files (Robin Sommer).\n\n- Detection added for a (now quite old) SSHv1 overflow attack.\n\n- A bug in skipping processing of connections for large chunks of\n  data has been fixed (Chema Gonzalez).\n\n- Some memory leaks fixed (Robin Sommer).\n\n- fmt()'s \"%d\" format now accepts values of enum types.\n\n\n0.9a7 Mon Nov  1 13:21:05 PST 2004\n\n- New terminology:\n\n\to We've found that the term \"log\" has been too overloaded,\n\t  sometimes meaning \"something to record for audit purposes\" and\n\t  other times meaning \"something worthy of getting the operator's\n\t  attention right now, for example via syslog\".\n\n\t  We are now using \"log\" to only refer to the first of these,\n\t  and refer to the second as \"alarm\".\n\n\to We've found that \"alert\" (and the ALERT() function, etc) is\n\t  likewise confusing.  Some expect it to mean something alarm-worthy\n\t  (to use the new name from the previous item), while others\n\t  expect it to mean the output from a sensor, which might not\n\t  be worth getting the operator's attention.\n\n\t  We are now using \"notice\" to refer to what had previously\n\t  been called \"alert\".  So, for example, rather than call ALERT()\n\t  you call NOTICE() to enter something into the I've-seen-something-\n\t  maybe-it's-worth-an-alarm framework.  The first field associated\n\t  with such a call was $alert, which is now $note.  These notifications\n\t  are logged to notice.$BRO_LOG_SUFFIX rather than \"alert.\"...\n\n  These changes show up in many places in the policy scripts.  Some\n  globals log_XXX are now alarm_XXX or notice_XXX.  However, uses of\n  \"log\" that refer to \"something to record for audit purposes\" remain\n  using that name.\n\n- Bro now uses the \"automake\" suite of tools for its configuration\n  (Jason Lee).  This includes major reworking of its Makefile's\n  and configuration/installation scripts.\n\n- Bro now flags event handlers that are never invoked (Umesh Shankar).\n  This catches typos like:\n\n\tevent bro_initt() { ... }\n\n- The scripts directory now includes scripts for generating nightly\n  reports (Roger Winslow).  Note that these are not presently a supported\n  part of the public Bro distribution, but will become so in the\n  not-too-distant future.\n\n- policy/brolite.bro contains a first version of the \"Bro Lite\" configuration\n  (Scott Campbell, Roger Winslow, et al).  This also is not presently\n  supported for the public Bro distribution, but will become so.\n\n- Major overhaul of the internal serialization framework (Robin Sommer).\n  Some more changes are forthcoming, though not on this scale.\n\n- Changed packet capture/drop statistics to (1) explicitly track received\n  packets, (2) work better under Linux, (3) report link counts when available\n  (Robin Sommer).  The net_stats record field \"interface_drops\" has been\n  renamed \"pkts_link\".  It reports the number of packets captured by the\n  NIC (if available), rather than the number dropped by the NIC (which never\n  actually worked, anyway).\n\n- The DNS analysis has been extended to deal with TSIG and to better deal\n  with EDNS0 records, and its overall structure reworked somewhat\n  (Scott Campbell & Roger Winslow).  The scripts in dns.bro are now\n  inside \"module DNS\" scope.\n\n- Improved logging of ICMP flows (Scott Campbell).  This includes the\n  addition of a \"len\" field in icmp_conn.  Some significant additional\n  changes/improvements to ICMP processing will be coming very soon.\n\n- The Bro README and \"quick start\" documentation has been updated\n  (Brian Tierney and Jim Rothfuss).\n\n- Some significant state-holding problems in the presence of packet filtering\n  or packet drops have been fixed.\n\n- You can now instruct the signature engine to constrain the number of\n  regular expressions it groups together into a single matcher using the\n  new script variable \"sig_max_group_size\" (Robin Sommer).  This can result\n  in significant memory savings for large sets of signatures.  It can\n  increase the CPU processing required; however, in our testing so far\n  this does not appear to be the case.\n\n- The signature engine now provides better location information in its\n  error messages (Robin Sommer).\n\n- statistics.bro has been renamed profiling.bro.  Along with this change,\n  the following script variables have been renamed:\n\n\tdo_statistics => do_profiling\n\tstatistics_file => profiling_file\n\tstatistics_interval => profiling_interval\n\n- A new script, stats.bro, can be included to generate light-weight\n  running statistics on memory and CPU use.\n\n- A new script, print-sig-states.bro, can be included to generate\n  periodic dumps of signature-matching statistics (Robin Sommer).\n\n- The connect_clear()/connect_ssl() built-ins have been replaced\n  by a single connect() function (Robin Sommer).\n\n- Remote Bro's (more generally, remote event sources) are now represented\n  in policy scripts using the new \"event_peer\" type rather than as an\n  addr/port pair, and get_event_source() has been renamed get_event_peer()\n  (Robin Sommer).  The new function get_local_event_peer() returns an\n  event_peer corresponding to the local Bro.\n\n- The new script remote-print.bro can be used to print all events\n  received from remote sources (Robin Sommer).\n\n- When you call send_state(), an event finished_send_state() is now\n  generated when all of the state has been sent (Robin Sommer).\n\n- If you define a handler for the new print_hook() event, then it\n  will be invoked every time a \"print\" statement executes (Robin Sommer).\n\n- The -g flag no longer takes a directory as an argument, but always\n  uses the .state directory (Robin Sommer).\n\n- The new -I flag prints the value of a given identifier and exits\n  (Robin Sommer).  This flag may go away in the future.  For now,\n  its role is that it prints timestamps of things like table elements,\n  which are no longer printed by a regular \"print\" statement.\n\n- If a connection proceeds as SYN ->, <- RST, RST ->, this is now\n  reported as a regular rejected (\"REJ\") connection, rather than\n  one reset by the originator (\"RSTO\").\n\n- The TCP analyzer now attempts to detect connections for which\n  one side's packets are being filtered out.  It does this using\n  two C++ variables (not presently accessible at the script level),\n\n\tconst int max_initial_window = 4096;\n\tconst int max_above_hole_without_any_acks = 4096;\n\n  If more than max_initial_window data has been sent by one side and no\n  ACKs have been seen by the other side, then it's assumed that no ACKs\n  will ever show up, and the buffer for the data should be reclaimed\n  immediately after it's reassembled.  max_above_hole_without_any_acks\n  plays a similar role, but for the case when measurement drops have\n  lead to Bro holding data for a sender for which it will never see\n  an ACK (which would be an \"ACK above hole\"), so it should give up\n  on buffering it.\n\n- A portability bug in Bro's parser code has been fixed (Jason Lee).\n\n- STARTTLS for SMTP now causes the SMTP session to be ignored, rather\n  than generating a slew of error messages because the session becomes\n  unparseable.\n\n- Bro's \"watchdog\" handler is now less prone to crashing due to\n  using non-reentrant library calls (Jason Lee).\n\n- Better error message when reading an input file encounters an error.\n\n- adtrace now prints its usage when invoked without the required\n  arguments (Jason Lee).\n\n- A bug in using recursive script functions has been fixed.\n\n- A bunch of whitespace/code layout tweaks.\n\n\n0.9a4 Wed Sep  8 17:33:54 PDT 2004\n\n- The directory structure of the Bro distribution has changed (Jason Lee).\n  The source code is now in a subdirectory, src/, and the scripts\n  snort2bro (and snort2bro.cfg) and make-ftp-safe-vocabulary.awk have\n  been moved into scripts/.\n\n- \"make install\" has been revamped (Jason Lee).\n\n- The format of the alert log file has changed.  Fields in it are\n  colon-separated.  THIS WILL LIKELY CHANGE SOON.\n\n- The policy for formatting signature matches has been revamped,\n  including colon-separated fields in the signature log file\n  (Roger Winslow).  THIS WILL LIKELY CHANGE SOON.\n\n- The BRO_ID environment variable has been renamed BRO_LOG_SUFFIX.\n\n- A new flag, -e, lets you specify Bro code to execute via the command\n  line (Christian Kreibich).  So, for example,\n\n\tbro -r mytrace.tcpdump -e 'redef traditional_conn_format = T' tcp\n\n  will run tcp.bro on the trace \"mytrace.tcpdump\", but with\n  traditional_conn_format redefined to be true.  Note that statements\n  have an implicit ';' added to them for convenience.\n\n- A new signature alert, \"MultipleSigResponders\", is generated if a\n  host triggers the same signature on multiple responders.\n\n- Bro now supports \"packet profiling\", which provides fairly fine-grained\n  statistics on number of packets processed, volume, elapsed real/user/system\n  time, and change in memory consumption (Holger Dreger).  Three variables\n  control the output.  The double pkt_profile_freq controls the frequency\n  of output.  The units in which it's interpreted depends on the setting\n  of the pkt_profile_mode variable (which is of type pkt_profile_modes,\n  an enum).  A value of PKT_PROFILE_MODE_SECS means that statistics\n  are generated every pkt_profile_freq seconds; PKT_PROFILE_MODE_PKTS\n  means every pkt_profile_freq packets; and PKT_PROFILE_MODE_BYTES, every\n  pkt_profile_freq bytes.  The default (PKT_PROFILE_MODE_NONE) means\n  to not generate packet profiling.\n\n  Packet profiling is written to the new log file, pkt_profile_file.\n  If you \"@load pkt-profile\", you can turn on packet profiling using\n  some handy defaults.\n\n- statistics.bro now reports on how many TCP connections are in\n  <originator-state, responder-state> for the different TCP endpoint\n  states (SYN sent, SYN ack'd, connection established, etc.).\n  Contributed by Holger Dreger.\n\n- tcp_content_delivery_ports_{orig,resp} are now table's of bool rather\n  than set's (Ruoming Pang).  The semantics are that if you have a\n  tcp_contents event handler, then if the orig/resp port is in the given\n  table *and the yield value is T*, then the event will be invoked.  This\n  allows you to now explicitly skip over some ports.\n\n- The processing of default values in tables has been changed internally\n  (Ruoming Pang).  It's possible this has introduced some subtle bugs\n  (as some of these came up during testing).\n\n- A serious bug in Base64 processing has been fixed (Ruoming Pang).\n\n- The NetBIOS and SMB analyzers have been updated in minor ways\n  (Ruoming Pang).\n\n- statistics.bro now reports a \"lag\" figure indicating the elasped\n  time between the last expired timer's target expiration time and\n  the current packet timestamp (Robin Sommer).  Lag can grow if Bro\n  is getting behind in timer expiration due to the setting of\n  max_timer_expires.\n\n- Bro's default filter is now \"tcp or udp or icmp\" rather than\n  \"tcp or udp\".\n\n- alert_info records now have an optional port associated with them\n  (for example, to be used to describe scan activity).\n\n- A bug has been fixed in which deleting a table element with an\n  associated timer could crash Bro (Robin Sommer).\n\n- A bug that would cause a crash for malformed EPASV directives\n  has been fixed (Robin Sommer).\n\n- A bug with inactivity timeouts not being generated for partial\n  connections has been fixed (Robin Sommer).\n\n- A bug in synflood.bro has been fixed (Robin Sommer).\n\n- Some tuning adjustments to incremental expiration of table entries\n  (Robin Sommer).\n\n- Improved portability to Darwin (Christian Kreibich).\n\n- alert_info records now have additional optional fields, \"iconn\"\n  (associated ICMP connection), \"dst\" (destination address), and\n  \"p\" (associated port).  The source_is_responder fields has been\n  removed.\n\n- The default packet filter now includes \"icmp\".\n\n- Some memory allocation/free mismatches & minor leaks (Robin Sommer).\n\n- Minor tweaks to ssl.bro (Robin Sommer).\n\n- Bro now supports \"null\" link layers (Christian Kreibich).\n\n- aux/adtrace contains a program that spits out MAC/IP information\n  from traces (Holger Dreger).\n\n- A bug in handling malformed RPCs has been fixed (Scott Campbell).\n\n- The formatting of \"weird\" messages that have additional parameters\n  has been changed to be more regularized with other \"weird\" messages.\n\n- The new \"weird\" type \"base64_illegal_encoding\" takes the place of\n  some previously unstructured Base64 \"weird\" errors.\n\n- A tweak to ftp.bro will give it slightly more consistent results\n  for some forms of unusual traffic.\n\n\n0.9a3 Wed Jul  7 22:06:26 PDT 2004\n\n- Improved ICMP processing, including scan detection (Scott Campbell).\n\n- ICMP \"connections\" are now considered unidirectional.\n\n- Fixed broken VLAN support (integration of original patch was incomplete).\n\n- Fixed a bug in erroneously generating additional \"ContentGap\"\n  alerts after an initial one.\n\n- Connection durations are now always reported as floating-point decimal,\n  never in exponential notation.\n\n- Removed unused time parameter from a bunch of internal calls.\n\n- Fixed some compilation warnings.\n\n- \"make clean\" now removes generated policy/*.bif.bro files (Christian\n  Kreibich).\n\n\n0.9a2 Fri Jun 11 00:07:04 PDT 2004\n\n- NetBIOS analysis has been extended with a CIFS/SMB analyzer (Ruoming Pang).\n  While this is incomplete, it has many important elements.  The corresponding\n  events:\n\n\tsmb_message(c: connection, is_orig: bool, cmd: string, msg: string)\n\tsmb_com_tree_connect_andx(c: connection, path: string, service: string)\n\tsmb_com_nt_create_andx(c: connection, name: string)\n\tsmb_com_transaction(c: connection, is_orig: bool, subcmd: count,\n\t\t\t\tname: string, data: string)\n\tsmb_com_transaction2(c: connection, is_orig: bool, subcmd: count,\n\t\t\t\tname: string, data: string)\n\tsmb_com_read_andx(c: connection, is_orig: bool, data: string)\n\tsmb_com_write_andx(c: connection, is_orig: bool, data: string)\n\n  This analyzer is still experimental.\n\n- Greater support for vectors (Umesh Shankar), much of it taken from\n  the 'S' language.\n\n  You can use a boolean vector as an index into another vector (providing\n  both are the same length) and each 'T' value in the index extracts the\n  corresponding element from the indexed vector.  For example, \"x[x > 3]\"\n  returns a vector whose elements are those elements of x that are greater\n  than, while if y is a vector of the same length as x then \"y[x > 3]\"\n  extracts those elements of y that have the same position as the elements\n  in x that are greater than 3.\n\n  You can also use an arithmetic vector to index another vector.  Each\n  element present in the index is extracted.  So, for example:\n\n\tglobal a: vector of count;\n\tglobal b: vector of string;\n\n\ta[1] = 3;\n\ta[2] = 3;\n\ta[3] = 1;\n\n\tb[1] = \"foo\";\n\tb[2] = \"bar\";\n\tb[3] = \"bletch\";\n\n\tprint b[a];\n\n  prints:\n\n\t[bletch, bletch, foo]\n\n- The new built-ins any_set() and all_set() return true if for a given\n  boolean vector any element is true or all of the elements is true\n  (Umesh Shankar).  So, for example, \"any_set(x < 0)\" returns T if\n  an element of x is less than zero.\n\n- The new built-in sort() takes a vector as an argument and sorts it\n  *in place* (Umesh Shankar).  (The in-place semantics may change in the\n  future.)  An optional second argument can be used to specify a\n  function to call for comparing elements, and is required for non-arithmetic\n  vectors.  For example, the following could be used to sort a vector\n  of strings based solely on the length of the strings:\n\n\tfunction string_compare(a : string, b: string): int\n\t\t{\n\t\tlocal la = byte_len(a);\n\t\tlocal lb = byte_len(b);\n\n\t\treturn (la < lb) ? -1 : ((lb > la) ? 1 : 0);\n\t\t}\n\n- The new function order() has the same calling sequence as sort(),\n  but instead of returning (and altering in place) the sorted vector,\n  it returns a \"vector of count\" giving the *indices* that if used\n  to index the vector will return it sorted.  So, for example,\n  given two vectors x and y of the same length (but not necessarily\n  of the same type),\n\n\tlocal x_sort_indices = order(x);\n\tx = x[x_sort_indices];\n\ty = y[x_sort_indices];\n\n  will assign x to a sorted version of itself and also rearrange y such\n  that elements of y that were paired with elements of x originally\n  remain paired after the sorting.\n\n- The ICMP analyzer now has a general notion of \"context\", i.e., the packet\n  associated with ICMP status messages such as Unreachable or Time Exceeded\n  (Ruoming Pang).  This changes the parameters to the icmp_unreachable\n  event.  A new event, icmp_time_exceed, is now also available.\n\n- The tcp_segment even has been replaced by a pair of new events (Ruoming Pang):\n\n\ttcp_packet(c: connection, is_orig: bool, flags: string, seq: count,\n\t\t\tack: count, len: count, payload: string)\n\n  is invoked for each TCP packet.  \"flags\" is a string containing \"SFAPU\"\n  for the SYN/FIN/etc TCP flags.\n\n\t  tcp_contents(c: connection, is_orig: bool, seq: count,\n\t\t\tcontents: string)\n\n  is invoked for each chunk of the byte-stream that has been reassembled\n  in sequence, providing it satisfies tcp_content_delivery_ports_{orig,resp},\n  per the next item.\n\n- You can specify the set of ports for which contents should be reassembled\n  for the originator (responder, respectively) stream using the new sets\n  tcp_content_delivery_ports_{orig,resp} (Ruoming Pang).  This can be\n  useful for user-level stream analysis for protocols not known to Bro's\n  event engine.  These controls may change to a \"table of bool\" in the future,\n  in order to support an &default attribute.\n\n- New built-in functions (Ruoming Pang):\n\n\tfunction interval_to_double(i: interval): double\n\t\tConverts a value of type \"interval\" to \"double\".\n\n\tfunction write_file(f: file, data: string): bool\n\t\tWrites the given string to the given file, returning\n\t\tF on error.\n\n\tfunction is_ascii(str: string): bool\n\t\tReturns T if the given string consists entirely of\n\t\tASCII characters (i.e., in the range 0..127).\n\n\tfunction sqrt(x: double): double\n\t\tReturns the square-root of x, or -1 and a run-time error\n\t\tif x is < 0.\n\n\tfunction uuid_to_string(uuid: string): string\n\t\tTakes a UUID and returns its string representation, where\n\t\tUUID = Universal Unique Identifier as defined per\n\t\thttp://www.opengroup.org/onlinepubs/9629399/apdxa.htm#tagcjh_20\n\n\tfunction string_to_ascii_hex(s: string): string\n\t\tReturns the ASCII hex representation of the given string.\n\t\tFor example, string_to_ascii_hex(\"foo\") returns \"666f6f\".\n\n\tfunction match_pattern(s: string, p:pattern): pattern_match_result\n\t\tMatches the given pattern against the given string, returning\n\t\ta record with three fields:\n\n\t\t\tmatched: bool;\t# T if a match was found, F otherwise\n\t\t\tstr: string;\t# portion of string that first matched\n\t\t\toff: count;\t# 1-based offset where match starts\n\n\t\tFor example,\n\t\t\tmatch_pattern(\"foobar\", /o*[a-k]/)\n\t\treturns\n\t\t\t[matched=T, str=f, off=1]\n\t\tbecause the *first* match is for zero o's followed by an [a-k],\n\t\twhile\n\t\t\tmatch_pattern(\"foobar\", /o+[a-k]/)\n\t\treturns\n\t\t\t[matched=T, str=oob, off=2]\n\n- Functions that terminate without returning a value when they were declared\n  to do so now generate a run-time warning (Christian Kreibich).  Functions\n  in the standard set of policy scripts that did this have been fixed.\n\n- The new event non_dns_request(c: connection, msg: string) is generate\n  to make the contents of malformed DNS requests available for analysis,\n  with the assumption that these are actually some other protocol entirely\n  (Ruoming Pang).\n\n- If you redef truncate_http_URI to have a value >= 0, then any HTTP\n  URIs generated by the event engine will be truncated to this length\n  (Ruoming Pang).  This can be convenient when analyzing traffic that\n  generates huge URIs (as do some automated attacks).\n\n- \"SEARCH\" is now recognized as a standard HTTP method (Ruoming Pang).\n\n- The new event connection_EOF(c: connection, is_orig: bool) is generated\n  when one side of a connection closes (Ruoming Pang).\n\n- synflood.bro and the corresponding event engine internals now works\n  in terms of probabilities (0.0-1.0) instead of percentages (0-100)\n  (Robin Sommer).  The script has had several tweaks, including using\n  new_connection() rather than connection_attempt(), which gives it\n  quicker response and broader coverage (it'll detect non-TCP flooding,\n  too, so \"synflood\" is now a bit of a misnomer), at the cost of perhaps\n  more CPU load.\n\n- A signature for Witty has been added to policy/sigs/worm.sig (Ruoming Pang).\n\n- Makefile now has a \"test\" target.  Currently this only works for internal\n  development (we haven't put together a public test suite yet; that will\n  take some time due to the need to make sure no sensitive information leaks).\n\n- The built-in function generator now knows about \"double\" as a built-in type\n  (Ruoming Pang).\n\n- Some generated files have been removed from the Bro distribution since\n  they're redundant (Ruoming Pang).\n\n- A bug has been fixed in which contents files might not be correctly\n  written upon termination of Bro (Ruoming Pang).\n\n- A bug has been fixed in which UDP connections didn't generate\n  new_connection events (Ruoming Pang).\n\n- Support for the Linux \"cooked capture\" link layer (Ruoming Pang).\n\n- BPF support has been factored into a separate class, BPF_Program, which\n  makes for easier portability (Christian Kreibich).\n\n- A serious low-level Dictionary bug has been fixed (Christian Kreibich).\n\n- A bug that could cause Bro to crash if it receives an event from another\n  Bro that it isn't able to process has been fixed (Christian Kreibich).\n\n- A bug in set file descriptors non-blocking has been fixed\n  (Christian Kreibich).\n\n- A bug that could cause some error messages to generate crashes has\n  been fixed.\n\n- The global skip_event_tcp_option has been removed.\n\n\n0.9a1 Mon Jun  7 01:33:00 PDT 2004\n\n- 0.8a85 is the new STABLE release, to be updated only for bug (and\n  portability) fixes.  0.9a1 is the new CURRENT release, which will have\n  both bug fixes and new functionality.\n\n- Support for FTP EPRT, EPSV (Holger Dreger).\n\n- Change to timer management to recover memory more quickly (Robin Sommer).\n\n- Tweaks to eliminate a number of compiler warnings (Robin Sommer).\n\n- Statistics now report number of connections terminated due\n  to inactivity (Robin Sommer).\n\n- New Makefile target, pub-tar-no-doc builds a public tarball but\n  without the (large) doc/ subdirectory.\n\n- Bug fix for identd requests with illegal port numbers.\n\n- The example of a scanning source to skip in scan.bro has been changed\n  from an AltaVista robot (now obsolete) to a Google robot.\n\n- Some previously fatal internal errors have now been turned into\n  \"internal warnings\", which Bro is able to continue operating\n  in their presence.\n\n\n0.8a84 Wed May 26 23:33:39 PDT 2004\n\n- autoconf tweaks for portability to Darwin (Christian Kreibich).\n\n- Fixed subtle bug in chunked-IO reads (Christian Kreibich).\n\n- Fixed bug for the \"discarder\" framework in which specifying an\n  IP discarder would cause other TCP/UDP/ICMP discarders not being\n  invoked (Christian Kreibich).\n\n- Fatal bug in signature matching fixed (Robin Sommer).\n\n- Missing member variable initialization fixed (Robin Sommer).  (Needed for\n  compilation with new versions of gcc.)\n\n- Makefile bug for \"make install\" fixed.\n\n- Fixed bug that could lead to Bro crashing if an SMTP session\n  had data sent after a RST.\n\n- Removed some out-of-date SMTP analysis warning messages.\n\n\n0.8a82 Tue Apr 27 11:53:24 PDT 2004\n\n- Fixed inactivity timer loop when a packet arrives exactly when\n  the timer is set to expire.\n\n\n0.8a81 Mon Apr 26 22:46:37 PDT 2004\n\n- A bunch of memory leaks fixed (Chema Gonzalez).\n\n- A new HTTP analyzer variable, content_truncation_limit, controls\n  how much of an HTTP request/reply contents element (i.e., what's\n  passed to http_entity_data - this is *not* the entire content, but\n  the next chunk's worth) is logged in the log file.  It defaults\n  to 40 bytes.  Setting it to 0 means \"log all of it\".\n\n- Fix to avoid crashing for malformed RPC requests.\n\n- Improved OpenSSL auto-configuration (Robin Sommer).\n\n- Fix for compiling without OpenSSL.\n\n- A new built-in, double_to_count(), converts a value of type \"double\"\n  to the corresponding \"count\" (Chema Gonzalez).  We should probably\n  add floor(), ceil(), etc.\n\n- Parameterization of trw.bro tweaked (Jaeyeon Jung).\n\n\n0.8a79 Wed Mar 24 22:02:53 PST 2004\n\n- Bro now has an SSL analyzer, written by Michael Kuhn and Benedikt Ostermaier,\n  with further development by Scott Campbell.  It generates the following\n  events:\n\n\tevent process_X509_extensions(c: connection, ex: X509_extension)\n\tevent ssl_X509_error(c: connection, err: int, err_string: string)\n\tevent ssl_certificate(c: connection, cert: X509, is_server: bool)\n\tevent ssl_certificate_seen(c: connection, is_server: bool)\n\tevent ssl_conn_alert(c: connection, version: count, level: count,\n\t\t\t\tdescription: count)\n\tevent ssl_conn_attempt(c: connection, version: int)\n\tevent ssl_conn_established(c: connection, version: int,\n\t\t\t\tcipher_suite: count)\n\tevent ssl_conn_reused(c: connection, session_id: sessionID)\n\tevent ssl_conn_server_reply(c: connection, version: int)\n\tevent ssl_conn_weak(name: string, c: connection)\n\tevent ssl_session_insertion(c: connection, id: sessionID)\n\n  Note, it still has a lot of rough edges; particularly, handling\n  non-conformant input.  It also generates unnecessary ContentGap alerts\n  due to the way it runs multiple analyzers (SSLv2 and SSLv3) on a single\n  connection.  This will be fixed in the fairly near-term future.\n\n- The manual has been updated with chapters on signatures (Robin Sommer)\n  and using the interactive debugger (Umesh Shankar), along with a partial\n  description of the new SSL analyzer (Michael Kuhn and Benedikt Ostermaier)\n  and a number of updates to the documentation of built-in functions (Umesh\n  Shankar), though this latter is still not complete since Umesh actually\n  contributed this quite a while ago.\n\n- Ruoming Pang has contributed a crude analyzer for DCE/RPC (used for Windows).\n  It generates simple dce_rpc_request and dce_rpc_reply events.  It should\n  not be considered stable.\n\n- The traditional connection logging format (traditional_conn_format)\n  is no longer the default.  The 0.8a70 release notes stated that this\n  was the case but this time it really is :-).\n\n- An experimental \"vector\" type has been added (Umesh Shankar).  A vector\n  is an aggregate type.  For example:\n\n\tlocal suspect_hosts: vector of addr;\n\n  You can randomly access elements starting with the first as 1, e.g.,\n\n\tsuspect_hosts[1] = 10.0.0.8;\n\n  and can also add elements at later postions even if there are gaps:\n\n\tsuspect_hosts[31337] = 10.0.0.9;\n\n  *The semantics and capabilities of vectors will be changing considerably.*\n\n- Umesh Shankar has developed a framework for generating IDMEF messages.\n  Currently it needs a modified version of libidmef, which is not included\n  in this distribution.  Contact me or Umesh if you want a copy.\n\n- A new attribute &synchronized causes the given global variable to\n  be *synchronized* across concurrent instances of Bro (which are\n  intercommunicating via remote.bro).  Any change made by one of them\n  to the variable will be reflected (soon after) in the copy at\n  the others.  A new event remote_state_inconsistency is generated\n  if two instances both change the value before they're synchronized.\n  (Contributed by Robin Sommer.)\n\n- trw.bro implements a new scan detection algorithm, Threshold Random Walk\n  (Jaeyeon Jung).  It's described in an upcoming IEEE S&P symposium paper.\n  The analyzer generates two events:\n\n\tTRWAddressScan, # source flagged as scanner by TRW algorithm\n\tTRWScanSummary, # summary of scanning activities reported by TRW\n\n  TRW is generally much more sensitive than Bro's regular detection algorithm.\n\n- vlan.bro provides support for VLAN encapsulation.  More generally, Bro\n  now has support for any sort of constant-offset encapsulation (Vinod\n  Yegneswaran).  You specify the header size by redef'ing encap_hdr_size.\n  You can also redef tunnel_port to be a UDP port which Bro treats as being\n  the encapsulation (in the packet stream - not addressed to it) rather\n  than all traffic.\n\n- If you turn on statistics (i.e., via @load statistics) and also redef\n  segment_profiling to T, then Bro will generate to the statistics file\n  a trace of its \"segment\" processing.  A segment is a unit of internal\n  execution.  Profiles look like:\n\n\t1058517499.615430 segment-processing-packet dt=0.000013 dmem=0\n\t1058517499.615430 segment-draining-events dt=0.000012 dmem=0\n\t1058517499.615671 segment-expiring-timers dt=0.000010 dmem=0\n\t1058517499.615671 segment-processing-packet dt=0.000010 dmem=0\n\t1058517499.615671 segment-draining-events dt=0.000012 dmem=0\n\t1058517499.615671 segment-policy/conn.bro:282 dt=0.000011 dmem=0\n\t1058517499.615671 segment-policy/conn.bro:253 dt=0.000012 dmem=0\n\n  The first line states that at the given (packet) timestamp, the event\n  engine processed a packet, taking 13 usec of CPU time to do so, and\n  not consuming any memory (from the kernel's perspective; this is *not*\n  fine-grained memory consumption).  The next lines indicate 12 usec were\n  spent draining events and 10 usec expiring timers.  The last two lines\n  indicate that the functions at lines 282 and 253 in conn.bro were\n  executed, requiring 11 usec and 12 usec, respectively.\n\n  Note #1: timings are just what rusage() reports, so not necessarily\n  very accurate for small times.\n\n  Note #2: there's a bug in tracking function line numbers that hasn't\n  been ferreted out yet, so they're only roughly correct.\n\n- The inactivity_timeout global has been split into tcp_inactivity_timeout/\n  udp_inactivity_timeout/icmp_inactivity_timeout (Robin Sommer).  Using\n  this, the default inactivity timeouts for UDP and ICMP have been changed\n  from \"no timeout\" to 10 seconds.  This is needed because otherwise\n  analyzing a stream of UDP or ICMP traffic generally gobbles up memory\n  quickly and never recovers it; and there's seems little point in trying\n  to consolidate long-lived-but-often-inactive UDP/ICMP streams.\n\n- The new policy script cpu-adapt.bro is an extension to load-levels.bro\n  (see CHANGES for 0.8a37 below) to adapt the packet filter based on the\n  current CPU load. If the load is below cpu_lower_limit (default 40%),\n  the load-level is decreased.  If it's above cpu_upper_limit (default\n  90%), it's increased.  (Robin Sommer)\n\n- The new policy script hand-over.bro can be used for a new running\n  instance of Bro to smoothly take over operation from an old instance,\n  i.e., it implements hand-over of state between two Bro instances when\n  checkpointing (Robin Sommer). First, all persistent data (i.e. variables\n  declared &persistent and connections for which make_connection_persistent()\n  has been called) is transferred from the old instance to the new instance.\n  Then the old instance terminates itself and the new one starts processing.\n\n  The host from which we want to take over the state has to be added to\n  remote_peers_clear (or remote_peers_ssl), setting hand_over to T. The\n  host which is allowed to perform a hand-over with us has to be added\n  with a port of 0/tcp and hand_over=T. An example for a handover between\n  two instances on the same machine:\n\n  @load hand-over\n  redef remote_peers_clear += {\n        [127.0.0.1, 47756/tcp] = [$hand_over = T],\n        [127.0.0.1, 0/tcp] = [$hand_over = T]\n        };\n\n  (This interface may be subject to change in the future.)\n\n- New script functions (Robin Sommer):\n\n      function terminate()\n          Terminates Bro via SIGTERM.\n\n      function dump_config()\n          Dumps Bro's full configuration into state_dir (one file per\n          variable/type/function, etc.)\n\n      function send_state(ip: addr, p: port)\n          Send all of persistent state to the remote host.\n\n      function set_accept_state(ip: addr, p: port, accept: bool)\n          If accept is true, state sent by the given host will be\n          accepted (default: false)\n\n      function make_connection_persistent(c: connection)\n          Declare the given connection state to be persistent (i.e.\n          to be saved upon termination and exchanged by send_state).\n          checkpoint.bro uses this to declare some services to be\n          persistent by default.\n\n      function is_local_interface(ip: addr): bool\n          Returns true if the given address is assigned to a local interface.\n\n- Printing of sets and tables now includes timestamps indicating when the\n  element was added (Robin Sommer):\n\n         ID did_ssh_version = {\n            [129.187.20.9, F] = 1 @11/01-15:55,\n            [212.144.77.26, T] = 2 @11/01-15:55,\n            [141.84.116.26, T] = 10 @11/01-15:55,\n            [217.232.245.249, T] = 1 @11/01-15:55,\n            [217.235.217.149, T] = 1 @11/01-15:55,\n            [129.187.39.13, F] = 2 @11/01-15:55,\n            [129.187.208.139, F] = 1 @11/01-15:55,\n            }\n\n  The format may change in the future, and will probably be made an option.\n\n- Similarly, you can print functions to get both a timestamp of the last\n  time the given block was executed and a count of how often (Robin Sommer):\n\n\t  ID record_connection = record_connection\n\t  (@11/01-16:03 #6549)\n\t  {\n\t  id = c$id;\n\t  local_init = is_local_addr(id$orig_h);\n\t  local_addr = local_init ? id$orig_h : id$resp_h;\n\t\t    remote_addr = local_init ? id$resp_h : id$orig_h;\n\t  flags = local_init ? \"L\" : \"\";\n\t  if (remote_addr in neighbor_nets)\n\t\t  (@<never> #0)\n\t\t  flags = cat(flags, \"U\");\n\n\t  if (\"\" == flags)\n\t\t  (@11/01-16:03 #2110)\n\t\t  flags = \"X\";\n\n\t  is_tcp = is_tcp_port(id$orig_p);\n\t  ;\n\t  if (is_tcp)\n\t\t  (@11/01-16:03 #6549)\n\t\t  {\n\t\t  if (c$orig$state in conn_closed || c$resp$state in conn_closed\n)\n\t\t\t  (@11/01-16:03 #4739)\n\t\t\t  duration = fmt(\"%.6g\", c$duration);\n\t\t  else\n\t\t\t  (@11/01-16:03 #1810)\n\t\t\t  duration = \"?\";\n\t  [...]\n\n- You can now specify numbers using hex constants, e.g., 0xabcd = 43981\n  (Michael Kuhn and Benedikt Ostermaier).\n\n- A new function, join_string_array(sep: string, a: string_array) concatenates\n  strings in 'a' and inserts 'sep' between every two adjacent elements\n  (Ruoming Pang).  E.g., join_string_array(\"\", {\"a\", \"b\", \"c\"}) returns\n  \"a b c\", and join_string_array(\"\", a) is the same as cat_string_array(a).\n\n- checkpoint.bro now makes some services persistent by default\n  (Robin Sommer).\n\n- The new_packet event now includes both the associated connection\n  and a pkt_hdr describing the packet (Robin Sommer).\n\n- The functions functions connect_ssl() and connect_clear() have been replaced\n  by a single connect() function taking an additional parameter to\n  differentiate the types (Robin Sommer).\n\n- The new function stop_listening() unbinds the listen port (Robin Sommer).\n\n- A new flag packet_filter_default says whether the Bro-level packet-filter\n  will by default accept all or reject everything (Robin Sommer).\n\n- Function calls can now be sent to remote Bro's, though there isn't yet\n  an interface for accessing this from the script level (Robin Sommer).\n\n- Bro now has an generalized internal framework for serializing objects\n  and monitoring access to state (Robin Sommer).\n\n- Better memory allocation accounting (Robin Sommer).\n\n- A minor tweak to the output generated by statistics.bro.\n\n- Improved localization of source code for functions in messages (but\n  there are still some bug).\n\n- Autoconf looks for -ltermcap (Robin Sommer).\n\n- Fixes for bugs in the management of table expiration values (Chema Gonzalez).\n\n- A bug in printing \"void\" values has been fixed (Chema Gonzalez).\n\n- -t bug fixed (Chema Gonzalez).\n\n- A bug has been fixed in which sometimes \"expression value ignored\"\n  was erroneously generated.\n\n- A bug with packet_contents and UDP packets with checksum errors\n  has been fixed (Ruoming Pang).\n\n- A memory leak in packet timestamp sorting via packet_sort_window\n  has been fixed (Ruoming Pang).\n\n- A bug has been fixed in expanding NULs when printing strings (Ruoming Pang).\n\n- Bug fixes for extracting connection contents via contents.bro (Ruoming Pang).\n\n- Bogus error message \"Can't install default pcap filter\" when using -F\n  removed.\n\n\n0.8a70 Sun Feb  8 14:19:45 PST 2004\n\n- Bro has a new home page at\n\n\thttp://www-nrg.ee.lbl.gov/bro.html\n\n  It includes a \"wish list\" of Bro development projects:\n\n\thttp://www-nrg.ee.lbl.gov/bro-wishlist.html\n\n- The \"match\" expression has been completely overhauled (Umesh Shankar).\n  It now has the syntax:\n\n\tmatch EXPR1 using EXPR2\n\n  Its semantics are complicated, but it's very powerful (see its use for\n  alert filtering below).  EXPR1 can have any type T.  EXPR2 must be of\n  type \"set[R]\", where R is a record type.  R must have the following fields:\n\n\t$pred\t- type is \"function(T): bool\".  This is the predicate\n\t\t  associated with the record.  It is passed in EXPR1's\n\t\t  value and returns true or false.\n\n\t$result\t- can have any type T'.  This is the value to use when\n\t\t  if $pred returns true for EXPR1.\n\n\t$priority - type must be arithmetic (count, int, double).  This\n\t\t  is the priority associated with the match of EXPR1\n\t\t  if $pred returns true.\n\n  The way the expression works is that EXPR1 is evaluated yielding a\n  value V.  EXPR2 is then evaluated yielding a set of records whose\n  type includes the above fields.  Bro then spins through each of the\n  records in the set and tests whether its $pred predicate holds for V.\n  If so, it records the given $result and the associated $priority.\n  It then returns for the value of the entire expression the $result\n  with the highest $priority.\n\n  Here's an example.  The following script:\n\n\tglobal match_stuff = {\n\t\t[$pred = function(a: count): bool { return a > 5; },\n\t\t $result = \"it's big\",\n\t\t $priority = 2],\n\n\t\t[$pred = function(a: count): bool { return a > 15; },\n\t\t $result = \"it's really big\",\n\t\t $priority = 3],\n\n\t\t[$pred = function(a: count): bool { return T; },\n\t\t $result = \"default\",\n\t\t $priority = 0],\n\t};\n\n\tprint match 0 using match_stuff;\n\tprint match 10 using match_stuff;\n\tprint match 20 using match_stuff;\n\n  when executed will print:\n\n\tdefault\n\tit's big\n\tit's really big\n\n  (Note that Bro actually will first evalute $priority before evaluating\n  $pred, and if it already has a better (higher) priority result, it\n  will not bother calling $pred.)\n\n- There's a new syntax for designating function values (Umesh Shankar).\n  It currently only works when associating a function value with a\n  record field in a record constructor:\n\n\t[$foo(bad_guy: addr) = { launch_counter_DDOS(bad_guy); return 3.14; }]\n\n  is equivalent to:\n\n\t[$foo = function(bad_guy: addr): double = {\n\t\t\tlaunch_counter_DDOS(bad_guy);\n\t\t\treturn 3.14;\n\t}]\n\n  The goal is to make such functions easier on the eye to express.\n  The changes are (1) no \"function\" keywork necessary, (2) no function\n  return type necessary (note, it is inferred from the \"return\" statement\n  in the function body; eventually this will work for all functions, not\n  just those in record constructors), (3) the '=' sign comes after the ')'\n  rather than before the keyword \"function\".\n\n  Given this syntax, we can rewrite the initialization of match_stuff\n  in the example above as:\n\n\tglobal match_stuff = {\n\t\t[$pred(a: count) = { return a > 5; },\n\t\t $result = \"it's big\",\n\t\t $priority = 2],\n\n\t\t[$pred(a: count) = { return a > 15; },\n\t\t $result = \"it's really big\",\n\t\t $priority = 3],\n\n\t\t[$pred(a: count) = { return T; },\n\t\t $result = \"default\",\n\t\t $priority = 0],\n\t};\n\n- The motivation behind these elaborate new mechanisms is to provide a\n  powerful and streamlined way to filter alerts.  According, alert.bro\n  now processes any alerts generated via ALERT() through a new global,\n  alert_policy.  alert_policy's type is set[alert_policy_item], where\n  alert_policy_item is:\n\n\ttype alert_policy_item: record {\n\t\tresult: AlertAction;\n\t\tpred: function(a: alert_info): bool;\n\t\tpriority: count;\n\t};\n\n  The idea is that you specify your alert post-filtering by redef'ing\n  new elements into alert_policy.  For example, here are two post-filtering\n  rules used at LBL to weed out uninteresting alerts:\n\n\t# Ignore connections marked as sensitive because they're\n\t# NTP to otherwise-sensitive hosts (first clause) or they happen\n\t# to involve 2766/tcp (Solaris Listen), which happens frequently\n\t# to ftp.ee.lbl.gov if Bro misses the PORT negotiation.\n\t[$pred(a: alert_info) =\n\t\t{\n\t\treturn a$alert == SensitiveConnection &&\n\t\t\t(a$conn$id$resp_p == 123/udp || # NTP\n\t\t\t a$msg == /Solaris listen service/);\n\t\t},\n\t $result = ALERT_FILE,\n\t $priority = 1],\n\n\n\t# Ignore sensitive URIs if the request was unsuccessful (code 404,\n\t# or not answered.)\n\t[$pred(a: alert_info) =\n\t\t{\n\t\treturn a$alert == HTTP::HTTP_SensitiveURI &&\n\t\t\ta$msg == /.*((\\(404)|(no reply)).*/;\n\t\t},\n\t $result = ALERT_FILE,\n\t $priority = 1],\n\n  These rules are part of:\n\n\tredef alert_policy += {\n\t\t... these records and others ...\n\t};\n\n  The idea behind them is to demote certain alerts that would ordinarily\n  be syslog'd (i.e., the associated action is ALERT_LOG_ALWAYS) to instead\n  just be recorded in the alert.$BRO_ID file.  Naturally, there are\n  many other possibilities.  For example:\n\n\t[$pred(a: alert_info) = {\n\t\tif ( a$alert == FTP::FTP_Sensitive &&\n\t\t     a$msg == /.*crown_jewels.*/ )\n\t\t\t{\n\t\t\tsystem(\"page_the_duty_officer \\\"crown jewels theft!\\\"\");\n\t\t\treturn T;\n\t\t\t}\n\t\telse\n\t\t\treturn F;\n\t\t},\n\t$result = ALERT_LOG_ALWAYS,\n\t$priority = 1000],\n\n  would run the program page_the_duty_officer with the argument \"crown\n  jewels theft!\" if an FTP_Sensitive alert was generated and the log message\n  included the text \"crown_jewels\".  More generally, post-filtering needn't\n  just be about deciding on how the alert is logged; the processing can\n  run programs, update tables, etc., just like any other function call might.\n\n- You can use the new function tally_alert_type in an alert_action_filters\n  initialization in order to suppress immediate logging of an alert and\n  instead have Bro generate a summary of how many times the given alert\n  was seen when it exits.  You can use another new function, file_alert,\n  to specify an alert_action_filters initialization that causes the alerts\n  to just be written to the alert.$BRO_ID file but not otherwise logged.\n\n  For example:\n\n\tredef alert_action_filters += {\n\t\t# Just summarize various packet capture glitches.\n\t\t[[RetransmissionInconsistency, ContentGap, DroppedPackets,\n\t\t  AckAboveHole]] =\n\t\t\ttally_alert_type,\n\n\t\t[RemoteWorm] = file_alert,\n\t};\n\n  would specify that RetransmissionInconsistency (etc.) alerts should just\n  be reported in the log file (log.$BRO_ID) as a total count, and\n  RemoteWorm should only be put in the alert.$BRO_ID file, but not\n  otherwise logged or counted.\n\n  You could get the same functionality by writing alert_policy records,\n  but they're quite a bit bulkier than the above.  Note that\n  alert_action_filters entries take precedence over alert_policy\n  records, but are evaluated *after* the \"match\" on alert_policy,\n  so if you have predicates in alert_policy with side-effects (like the\n  invocation of page_the_duty_officer in the example above), those\n  will still happen.\n\n- The alert_info record (which is used in calls to ALERT) now has\n  slots for some more additional information:\n\n\tuser: string;\t# can hold an assocaited username\n\tfilename: string;\t# an associated filename\n\tmethod: string;\t# associated HTTP method\n\tURL: string;\t# associated URL\n\tn: count;\t# any associated count/number/status code\n\n  (These are all &optional, so you don't need to specify them if they're\n  not appropriate.)  A number of ALERT's in the default policy scripts\n  have been changed to include these.  The intent is to add more such\n  information in the future.  Ideally, alert_policy records shouldn't\n  be doing checks like \"a$msg == /.*((\\(404)|(no reply)).*/\" but instead\n  extracting the status code directly from a field of 'a' (which is an\n  alert_info record).\n\n- ALERT now fills in the '$id' field in the alert_info record with\n  the $id of the associated connection, if the caller didn't suppy\n  a $id but did supply a $conn.  Likewise, it will fill in $src with\n  the $orig_h from $id (after first filling in $id).  The net result\n  is that you can rely on $id and $src being set for any alert that\n  has an associated connection.\n\n- The HTTP analysis scripts (policy/http*.bro) have been converted to\n  use the \"module\" facility, similar to how ftp.bro was converted for\n  0.8a48.  This may require changing some of your own scripts, generally\n  just to add \"HTTP::\" qualifiers.\n\n- Now that the variables associated with FTP analysis are part of an\n  \"FTP\" module, the \"ftp_\" prefix associated with:\n\n\tftp_excessive_filename_len\n\tftp_excessive_filename_trunc_len\n\tftp_guest_ids\n\tftp_hot_cmds\n\tftp_hot_files\n\tftp_hot_guest_files\n\tftp_ignore_invalid_PORT\n\tftp_ignore_privileged_PASVs\n\tftp_log\n\tftp_skip_hot\n\n  has been removed, and these are now called:\n\n\texcessive_filename_len\n\texcessive_filename_trunc_len\n\tguest_ids\n\thot_cmds\n\thot_files\n\thot_guest_files\n\tignore_invalid_PORT\n\tignore_privileged_PASVs\n\tlog_file\n\tskip_hot\n\n  To get to them from other scripts, you specify, for example,\n\n\tredef FTP::guest_ids = { .... };\n\n  whereas before you had to use:\n\n\tredef FTP::ftp_guest_ids = { .... };\n\n- The new connection logging format introduced in 0.8a57 is now the\n  default, unless you redef the new variable \"traditional_conn_format\"\n  to be T (Robin Sommer).  Connections using unidentified ephemeral\n  ports now have a service of simply \"other\" rather than other-XXXX.\n  The 'U' connection status flag has been removed (unless you're using\n  traditional_conn_format).\n\n- Tables can now be directly indexed by records, and indexing using records\n  is no longer interchangeable with using a corresponding list of indices\n  (Umesh Shankar).  This may require adjustments to existing policy\n  scripts.\n\n- Hostnames such as www.google.com now have type set[addr] rather than\n  a funky internal list type.\n\n- The new function dump_current_packet(file_name: string) dumps a copy of\n  the current packet to the file with the given name, appending it if the\n  file already exists (Robin Sommer).  The file is in tcpdump format.\n  A handy use for this is in an event handler for signature_match(),\n  to record packets that match given signatures.\n\n- The event new_packet() is invoked for each new packet (Robin Sommer).\n  It currently doesn't provide the packet contents but soon will in\n  a fashion similar to secondary-filter.bro.\n\n- \"cf -f fmt\" specifies a strtime() format.  -u specifics UTC time rather\n  than local time (Mark Delow and Craig Leres).  cf now has a man page\n  (Craig Leres).\n\n- Two new variables, backdoor_ignore_local and backdoor_ignore_remote,\n  can be used to specify backdoor signatures that should be ignored\n  if the server is local/remote.\n\n- A bug has been fixed in which a \"next\" executed in the final iteration\n  of a for loop would mangle the subsequent processing of the outer\n  statements (Chema Gonzalez).\n\n- Bug fixes for MIME and Base64 processing (Ruoming Pang).\n\n- pcap.bro now builds its filter in the opposite order (restrict_filters\n  first), which can improve packet filtering performance (Robin Sommer).\n\n- A bug in &default has been fixed.\n\n- More SSL autoconf tweaks (Robin Sommer).\n\n- Portability for different pcap_compile_nopcap() calling sequences\n  (Chema Gonzalez).\n\n- Some tweaks for a minor reduction in memory consumption.\n\n- A memory leak for secondary packet filters has been fixed.\n\n- The localization of error messages (what script line they correspond to)\n  has been improved.\n\n\n0.8a58 Tue Dec 16 08:55:47 PST 2003\n\n- Compatibility with older versions of libpcap (Chema Gonzalez).\n\n\n0.8a57 Tue Dec  9 10:14:30 PST 2003\n\n- The format of Bro's connection summaries is changing.  The new format\n  looks like\n\n\t  1069437569.904605 0.230644 1.2.3.4 5.6.7.8 http 59377 80 tcp 610 275 S3 L\n\n  That is, <timestamp>, <duration>, <originator address>, <responder address>,\n  <service>, <originator port>, <responder port>, <originator bytes>,\n  <responder bytes>, <connection state>, <flags>.  (Robin Sommer)\n\n  The script variable traditional_conn_format=T specifies to use the old\n  format rather than this new one.  This is *currently* the default, but\n  will change soon to default to F instead.  If you have comments on this\n  new format, we'd like to hear them.\n\n- The SigAction's available in signatures.bro have been extended (Robin Sommer).\n  SIG_FILE_BUT_NO_SCAN is like SIG_FILE but without any horizontal/vertical\n  processing; SIG_LOG_ONCE logs only an alert only the first time it occurs;\n  SIG_LOG_PER_ORIG logs only the first instance of an alert generated by a\n  particular originator; SIG_COUNT has been renamed SIG_COUNT_PER_RESP; and\n  SIG_SUMMARY suppresses logging of individual alerts but generates a\n  per-originator summary.\n\n- A new -p option for snort2bro tells it to only process signatures that\n  include matching on payload (Robin Sommer).\n\n- You can now explicitly include or exclude particular SIDs when\n  running snort2bro by specifying a configuration file via -c (Robin\n  Sommer).  The format is simple, just \"include\" or \"ignore\" followed\n  by the SID number:\n\n\t# sid-526 BAD TRAFFIC data in TCP SYN packet\n\tignore\t526\n\n\t# sid-623 matches a null-flags stealth scan.  Include it even\n\t# if we build with -p, since it doesn't tend to generate any\n\t# false positives.\n\tinclude\t623\n\n  The new \"snort2bro.cfg\" file gives examples (i.e., the above).\n\n- Bro can now serialize functions and event handlers, meaning that these\n  can be passed as values between Bro's and dumped using -g (Robin Sommer).\n  One of the main goals in supporting this is to allow in situ alteration\n  of the Bro's configuration (e.g., you can edit a function and change its\n  functioning and have a running Bro pick up the change without having to\n  stop and be restarted).  Such dynamic reconfiguration is experimentally\n  supported via -g <dir> (see below).\n\n- &persistent state is now stored in the *directory* given by state_dir\n  (default: \"./.state\"), one file per variable, rather than a single file\n  (Robin Sommer).\n\n- Storing &persistent state to disk is now done incrementally: after writing\n  each file, there's a delay of state_write_delay (default: 0.1 secs) before\n  working on the next file (Robin Sommer). This may introduce small\n  inconsistencies, but prevents load spikes that can lead to packet drops.\n  Currently, there is no mechanism to incrementally store a single variable\n  (like a large table), although there is already some framework in place\n  to eventually support this.\n\n- The *experimental* new -g <dir> option dumps the script-level configuration\n  (excluding things defined in internal default scripts like bro.init)\n  into the directory <dir>. These files may be printed with \"bro -x <file>\",\n  or copied into the state_dir of a running Bro, which will then pick up\n  the change if it has loaded checkpoint.bro.  (When picking up changes,\n  event handlers are always added, while functions, types, and variables\n  replace the current ones).\n\n- Table values are now incrementally expired rather than all at once\n  (Robin Sommer).  That is, if the expiration timer goes off and hundreds\n  of values should now be expired, the work of doing so is spread over\n  chunks of table_expire_size (default: 50) at a time, separated by a\n  delay of table_expire_delay (default: 0.1 secs).  This change aims to\n  prevent large processing spikes that can lead to packet drops.\n\n- New built-ins sub() and gsub() act like awk's functions of the same\n  name, changing substrings (either first, or all) that match a given\n  regular expression to a given target string.  (Note, the calling sequence\n  differs from the order used by awk.)\n\n- The new auxiliary script aux/scripts/mvlog is a handy way to manage\n  checkpointed logs.  See the script for documentation.\n\n- The &expire_func function now takes two arguments.  The second is\n  of type \"any\" and corresponds to the index(es) of the element being\n  expired.  To access the individual indices, you use a new assignment form:\n\n\t[a, b, c] = index_val;\n\n  (where index_val is the second argument of type \"any\").  This assigns\n  a to the first index, b to the second, and c to the third.  NOTE: the\n  use of \"any\" types here is *temporary* and will be changing in the\n  future to a general \"tuple\" notion.  (Robin Sommer)\n\n- scan.bro and conn.bro have been reworked to consume less memory and to\n  support more flexible state expiration (Robin Sommer).\n\n- The new builtin rescan_state() causes Bro to re-read any persistent\n  data values (Robin Sommer).\n\n- snort2bro now supports continued lines (\"\\<newline>\") (Robin Sommer).\n\n- The calling sequences of the software_version_found() and\n  software_parse_error() events has changed, and a new event,\n  software_unparsed_version_found(), is invoked for raw version\n  strings (i.e., the version string prior to the event engine\n  attempting to parse it into version/major/minor) (Robin Sommer).\n\n- Software version tracking for clients now tracks all versions, not just\n  the latest version (Robin Sommer).\n\n- alert_info records now include an optional field event_src, which is the\n  source of the event if it was received from an external Bro (Robin Sommer).\n\n- Regular expressions now support {} iteration values of 0, and generate\n  better error messages.\n\n- Output generated by icmp.bro is now redirected into an \"icmp\" log file\n  (Robin Sommer).\n\n- autoconf tweaks for configuring OpenSSL on Linux (Ruoming Pang, Robin Sommer).\n  Tested on RedHat (thanks to Anton Chuvakin), Debian, FreeBSD, Solaris.\n\n- You can now turn off using OpenSSL even if the OS supports it, via\n  configuring with --disable-openssl (Robin Sommer).\n\n- Variable size computations (per global_sizes()) are now more accurate\n  (Robin Sommer).\n\n- A bug with combining file encryption and log rotation has been\n  fixed (Robin Sommer).\n\n- A problem tracking directionality in signatures fixed (Robin Sommer).\n\n- Bro now continues running if DNS is not functioning (Robin Sommer).\n\n- Rewriter memory use has been significantly reduced (Ruoming Pang).\n\n- Some bugs with -A/-w interaction have been fixed (Ruoming Pang).\n\n\n0.8a48 Tue Oct 21 15:56:13 PDT 2003\n\n- There is now a mechanism in place for multiple Bro's to communicate with\n  one another via sockets (Robin Sommer).  *This is quite experimental at\n  this point* and may have significant bugs and/or need significant\n  enhancements.\n\n  By loading listen-clear.bro or listen-ssl.bro, an instance of Bro starts\n  to listen on a TCP port.  The first of these listens for unencrypted\n  connections and the second for connections encrypted via OpenSSL.  To\n  connect to a listening Bro, you load remote-clear.bro or remote-ssl.bro.\n  For this connection, you specify which events you want to receive by\n  giving a regular expression (e.g.  \"/http_*/\" for all HTTP events),\n  although only those events for which you have defined a local handler\n  are actually requested.  Communication is uni-directional in the sense\n  that for a certain connection the events go only from Bro-A to Bro-B but\n  not from B to A (you could set up a second connection for the other\n  direction, though).\n\n  The OpenSSL certificate used to authorize remote  Bro's is specified in\n  the script variable \"ssl_ca_certificate\" and the private key and certificate\n  for the local Bro via \"ssl_private_key\".\n\n  If Bro A connects to Bro B, by default it sends over its capture_filter.\n  But Bro B uses it only if it has loaded remote-pcap.bro.  This is the\n  beginning of structuring inter-Bro trust mechanisms.  It is done via two\n  new events, remote_capture_filter(ip: addr, p: port, filter: string) and\n  send_capture_filter(ip: addr, p: port, s: string) : bool.\n\n  The implementation forks a second process which does the socket\n  communication, so that the main process should not be affected too much.\n  The two processes communicate via a pipe.\n\n  You can call is_remote_event() to determine whether the event currently\n  being handled was originated by a remote Bro (if T) or the local Bro\n  (if F).\n\n  If a connection with a remote Bro terminates (for whatever reason), Bro\n  may try to reconnect automatically.\n\n  A new function, get_event_source(), returns a record event_source\n  describing the source that raised the last event.\n\n  See doc/ssl.txt for an explanation of how to create the keys/certificates.\n\n- A fledgling Gnutella analyzer has been contributed (Mark Allman).\n  It generates the following events:\n\n\tevent gnutella_text_msg(c: connection, orig: bool, headers: string)\n\tevent gnutella_binary_msg(c: connection, orig: bool, msg_type: count,\n\t\t\t\t\tttl: count, hops: count, msg_len: count,\n\t\t\t\t\tpayload: string, payload_len: count,\n\t\t\t\t\ttrunc: bool, complete: bool)\n\tevent gnutella_partial_binary_msg(c: connection, orig: bool,\n\t\t\t\t\t\tmsg: string, len: count)\n\tevent gnutella_establish(c: connection)\n\tevent gnutella_not_establish(c: connection)\n\tevent gnutella_http_notify(c: connection)\n\n- Bro now supports a secondary channel for acquiring packets (Chema Gonzalez).\n  You access it by redef'ing the new global \"secondary_filters\", adding\n  table[string] of event(filter: string, pkt: pkt_hdr).  The string\n  specifies a tcpdump filter; anytime a packet matches the filter\n  (including packets that would *not* otherwise be matched by\n  capture_filter), then the given event handler is invoked.\n\n  For example,\n\n\t  redef secondary_filters += {\n\t\t  [\"tcp[13] & 7 != 0\"] = rst_syn_fin_flag,\n\t  }\n\n  will invoke rst_syn_fin_flag() anytime a TCP packet is seen for\n  which the SYN/FIN/RST bits are non-zero.  The event handler will\n  be passed the string \"tcp[13] & 7 != 0\" (so it can tell which\n  of possibly multiple filters matched) and a pkt_hdr value, which\n  includes the IP header and, if present, the TCP, UDP or ICMP header.\n\n  Another example, and what motivated the addition, is:\n\n\t  redef secondary_filters += {\n\t\t[\"ip[10:2] & 0xffc == 0x398\"] = sampled_1_in_1024_packet,\n\t  }\n\n  which will invoke sampled_1_in_1024_packet() any time the given\n  10 bits in the IP checksum match the pattern 0x398.  If the checksum\n  field is uniformly distributed then this roughly corresponds to\n  1-in-1024 random sampling.  (Chema has also developed BPF additions\n  to support true random sampling.)\n\n  See policy/secondary-filter.bro for examples.\n\n- Bro now does a much better job of keeping track of how much memory\n  has been allocated for different structures (Robin Sommer).\n\n  This includes more accurate computations for global_size().\n\n  In addition, if you redef \"statistics_interval\" to be a non-zero time\n  interval, then with that periodicity a summary of memory usage (including\n  memory used by event engine components) is dumped to the file\n  \"statistics_file\".  In addition, at this point a \"do_statistics\" event\n  is generated.  You can also call the new built-in statistics_update()\n  to generate memory statistics on demand.\n\n  The above structure is likely to change in the future.  statistics_interval\n  will probably go away, to be replaced by either explicit calls to\n  statistics_update() (which you can do on a timer if you like by using\n  \"schedule\"), or by a built-in function that returns a record of all\n  the statistics, that you can then format however you want.\n\n- A major memory leak in HTTP analysis has been fixed (Ruoming Pang).\n\n- New attributes &rotate = <interval expression> and\n  &postprocessor = <string expression> can be associated with a file\n  variable in order to specify how often the file should be rotated to a\n  new filename on disk, and, when rotation occurs, the name of a shell\n  program to run on the now-older version as a postprocessor (Robin Sommer).\n\n- Similarly, log_postprocessor and log_rotate_interval specify the default\n  values for files.  Unless redef'd, these themselves default to the empty\n  string (= no postprocessing) and 0.0 seconds (no rotation).  (Robin Sommer)\n\n- A new attribute, &encrypt, applies to variables of \"file\" type.  It specifies\n  that the version on disk should be encrypted, using either the key specified\n  as the value of the attribute, or, if no value is specified, using the\n  value of the new script variable log_encryption_key.  The key is an OpenSSL\n  public key; it's used to then embed a Blowfish session key.  (Robin Sommer)\n\n  A new utility, aux/bdcat/bdcat (\"Bro decrypt cat\") can be used to decrypt\n  the files.\n\n- The internal structure of TCP analysis has been significantly altered.\n  Previously, TCP_Endpoint tracked endpoint state and TCP_EndpointContents\n  (derived from it) did stream reassembly.  These have now been separated;\n  TCP_Endpoint still tracks endpoint state, but TCP_EndointContents has\n  become TCP_Contents, and is only loosely coupled with TCP_Endpoint.\n  The reason for this change is to lay the groundwork for (1) applying\n  an application analyzer to a connection after several packets for\n  the connection have already been read, and (2) applying *multiple*\n  application analyzers to a single connection.\n\n- Bro now supports the universal hashing if USE_UHASH is defined\n  (Ruoming Pang).  Universal hashing is a lighter-weight alternative\n  to MD5 hashing that retains the property of being very difficult\n  for an attacker to guess.  It comes in two flavors, a 32-bit\n  version (which you get with USE_UHASH) and a faster 16-bit version\n  (which you get if you also define USE_NH).  Bro will likely switch\n  to using these by default in the near future, as their performance\n  gain over MD5 is significant.\n\n- New built-in functions srand() and rand() provide access to the\n  usual C-style random number seeding & generation (Chema Gonzalez).\n\n- You can now specify server/client addresses to leave in the clear in\n  IP address anonymization (via the built-in variables preserve_orig_addr\n  and preserve_resp_addr). Correspondingly, the built-in function for\n  IP anonymization now takes a parameter to specify the type of the address\n  (orig, resp, or other), instead of the method of anonymization\n  (seq, random, prefix-preserving).  (Ruoming Pang)\n\n- Trace anonymization now has prelminary support for handling TCP options\n  via the new event \"tcp_option\" (Ruoming Pang).  It is only invoked\n  if skip_event_tcp_option is F (it defaults to T).\n\n- A new event, tcp_segment, is similar to the event \"packet_content\"\n  but provides more information: is_orig (directionality), sequence\n  number, and acknowledgement number (Ruoming Pang).\n\n- ./configure finds OpenSSL if it's in some standard location.  Otherwise,\n  you may specify it --with-openssl=<path>.  If OpenSSL is not available,\n  Bro compiles cleanly without and gives warnings if a script tries use SSL.\n  (Robin Sommer)\n\n- The internal links in manual/entire.html have been fixed so they\n  now work (Chema Gonzalez).\n\n- A new policy script, blaster.bro, detects instances of the W32.Blaster\n  worm (Robin Sommer).\n\n- Signature files (for input to the signature engine) now reside in\n  policy/sigs/*.sig.  This directory is now on the default $BROPATH.\n\n- sig.ex.ssl-worm.bro and sig.ex.web-rules.bro have been updated\n  to reflect changes in keywords (Robin Sommer).  They've been\n  renamed to ex.ssl-worm.sig and ex.web-rules.sig and reside\n  in policy/sigs/, per the above.\n\n- The module facility has been changed to have its scope limited to\n  the current file plus any additional files that are automatically\n  processed based on its name plus $BRO_PREFIXES.\n\n- As an experiment, ftp.bro has been modified to a style that includes\n  using \"module FTP\".  Likely other policy scripts will be converted\n  in the near future, and their variable names changed accordingly\n  (e.g., \"ftp_hot_files\" will become \"FTP::hot_files\").\n\n- The new \"match\" expression has been modified to allow any yield type\n  rather than just strings.  It is likely to change significantly again\n  soon.\n\n- Iterating over multi-dimensional tables/sets now works (Robin Sommer).\n  For example:\n\n    const remote_peers_ssl : table[addr, port] of Peer &redef;\n    [...]\n    for ( [ip, p] in remote_peers_ssl )\n        connect_ssl(ip, p, remote_peers_ssl[ip, p]$retry);\n\n- Checkpointing of persistent state on SIGHUP now happens via bro.init\n  (Robin Sommer).  Not tested.\n\n- fmt() now supports %x for hexadecimal formatting (Chema Gonzalez).\n\n- alert.bro logs the source for remote alerts; by redefining the new\n  \"event_source_description: string\" locally, you can specify how a\n  Bro is to refered to on the remote side.  (Robin Sommer)\n\n- software.bro now tracks HTTP clients, too (Robin Sommer).  This\n  will be extended in the near future.\n\n- Some FreeBSD 5.X porting tweaks (Sergey Osokin).\n\n\n0.8a37 Wed Sep  3 23:20:21 PDT 2003\n\n- A new attribute, \"&persistent\", indicates that a global variable's\n  state should persist on disk (Robin Sommer).  Currently, they\n  reside in the file \"state.bst\".\n\n  For example, given the following script:\n\n\tglobal a = 0 &persistent;\n\n\tevent bro_init()\n\t\t{\n\t\tprint ++a;\n\t\t}\n\n  then every time you run it, a increases by one.\n\n  You can dump the state file using \"bro -x state.bst <scriptname>\".\n  (There's also a partially-implemented XML dumper which you invoke via\n  \"bro -X state.bst <scriptname>\".)\n\n  If you send Bro a HUP signal, then it will synchronize all persistent\n  state to disk (checkpoint) at that point.  More generally, the policy\n  script can do so at any time by calling the new built-in checkpoint_state().\n\n  By including the new policy script \"checkpoint\", you can have Bro\n  automatically checkpoint every time checkpoint_interval elapses\n  (default 15 minutes).\n\n- You can also record events to disk by loading the \"capture-events\"\n  policy script, or calling the new capture_events() built-in (Robin Sommer).\n  The events are written to the file events.bst.  You can dump these\n  using bro -x (or -X), as above.  You can also replay them using\n  \"bro -R <file>\".  By replaying them using the same policy script as\n  generated them, you should get the same output.  For example:\n\n\tbro -r tracefile myscript capture-events\n\n\t...\n\n\tbro -R events.log myscript\n\n- An experimental module facility has been added (Umesh Shankar).\n\n  The module facility implements namespaces. Everything is in some namespace\n  or other. The default namespace is called \"GLOBAL\" and is searched by\n  default when doing name resolution. The scoping operator is \"::\" as in\n  C++. You can only access things in the current namespace, things in the\n  GLOBAL namespace, or things that have been explicitly exported from a\n  different namespace. Exported variables and functions still require\n  fully-qualified names. The syntax is as follows:\n\n  module foo;  # Sets the current namespace to \"foo\"\n  export {\n\tint i;\n\tint j;\n  }\n  int k;\n\n  module bar;\n  int i;\n\n  foo::i = 1;\n  bar::i = 2;\n  print i;    # bar::i (since we're currently in module bar)\n  j = 3;      # ERROR: j is exported, but the fully qualified name\n              #        foo::j is required\n  foo::k = 4; # ERROR: k is not exported\n\n  The same goes for calling functions.\n\n  One restriction currently in place is that variables not in the \"GLOBAL\"\n  namespace can't shadow those in GLOBAL, so you can't have\n\n    module GLOBAL;\n    global i: int;\n\n    module other_module;\n    global i: int;\n\n  It is a little confusing that the \"global\" declaration really only means\n  that the variable i is global to the current module, not that it is truly\n  global and thus visible everywhere (that would require that it be in\n  GLOBAL, or if using the full name is ok, that it be exported).  Perhaps\n  there will be a change to the syntax in the future to address this.\n\n  The \"module\" statement cuts across @load commands, so that if you say:\n\n\tmodule foo;\n\t@load other_script;\n\n  then other_script will be in module foo. Likewise if other_script changes\n  to module bar, then the current module will be module bar even after\n  other_script is done.  However, this functionality may change in the future\n  if it proves problematic.\n\n  The policy scripts in the Bro distribution have not yet been updated to\n  use it, but there is a backward-compatibility feature so that existing\n  scripts should work without modification. In particular, everything is\n  put in GLOBAL by default.\n\n- The hooks are now in place for communicating events between running\n  Bro's.  An experimental implementation of doing so (written by Robin\n  Sommer) will be integrated shortly.\n\n- A side-effect of getting those hooks in place is that event handlers must\n  now be directly specified (by naming them) rather than indirectly\n  (for example, by indexing a table whose value yields an event handler).\n  This may be fixed soon.\n\n- An experimental \"match\" expression scans a list of predicates to find\n  the first one that's both true and has the highest priority (Umesh Shankar).\n\n  The general form is:\n\n\tmatch some_record on {\n\t\t[ priority, class_name, predicate ],\n\t\t...\n\t}\n\n  where \"predicate\" is evaluated in the context of the value (and type) of\n  some_record.  For example, if some_record has a field \"num_alerts\"\n  then predicate could be \"$num_alerts > 5\".\n\n  \"priority\" is a non-negative integer (i.e., of type \"count\"), and,\n  for now, \"class_name\" is a string.\n\n  For example,\n\n\tglobal c: conn_id;\n\n\tc = [ $orig_h = 0.0.0.0, $orig_p = 0/tcp,\n\t      $resp_h = 1.1.1.1, $resp_p = 1/tcp ];\n\n\tprint match c on {\n\t\t[ 2, \"emptyweb\", $orig_h == 0.0.0.0 && $resp_p == 80/tcp ],\n\t\t[ 1, \"emptyhost\", $orig_h == 0.0.0.0 ],\n\t\t[ 0, \"should not match\", 1 == 0 ]\n\t};\n\n  will print \"emptyhost\".\n\n  The initial intent behind this is to eventually provide more flexible\n  customization of alert processing, though it clearly has broader\n  applicable.  *It is very likely that the semantics and perhaps the syntax\n  of \"match\" will change in the near future.*\n\n- Bro's packet filter is now computed via pcap.bro (which is automatically\n  included via bro.init).  It uses two new built-ins:\n\n\tprecompile_pcap_filter(id: PcapFilterID, s: string):  bool\n\tinstall_pcap_filter(id: PcapFilterID): bool\n\n  The first is for precompiling a pcap filter so it can be installed\n  or turned off dynamically. Associating an ID with the filter, you can\n  then activate the filter by calling the second function (installing a\n  new filter replaces the current one).  (Robin Sommer)\n\n  Be default, pcap.bro is responsible for building a pcap string based on\n  the capture/restrict_filters defined by the various analyzers. It compiles\n  and installs this filter, so there is no observable difference in usage\n  to the old implementation, except capture/restrict_filter are now *tables*\n  rather than strings, and are written as plural rather than singular.\n  So the analyzers need to define something like this:\n\n\t[finger.bro]\n\tredef capture_filters += { [\"finger\"] = \"port finger\" };\n\n  This then allows \"finger\" to be used as the name for the corresponding\n  filter element (see the next item).\n\n- load-level.bro is an experimental policy script for allowing Bro to\n  shed or add on load (in terms of which protocols it analyzes).  It\n  provides three interface functions for setting the current loadlevel:\n\n\t# level is LoadLevel1, ..., LoadLevel10\n\tfunction set_load_level(level: PcapFilterID): bool\n\n\tfunction increase_load_level()\n\tfunction decrease_load_level()\n\n  load-levels.bro defines ten different load levels (from 1 to 10, with 10\n  being the one with the most load imposed on the system), which are\n  configured by defining capture_load_level/restrict_load_levels: Example:\n\n\tredef capture_load_levels += {\n\t\t[\"dns\"]          = LoadLevel1,\n\t\t[\"smtp\"]         = LoadLevel2,\n\t\t[\"http-reply\"]   = LoadLevel3,\n\t\t[\"http-request\"] = LoadLevel8,\n\t};\n\n  This means for example: \"include the capture_filter associated with\n  'http-reply' if the current load level is 3 or below\".  There's a similar\n  mechanism for restrict_filters:\n\n\tredef restrict_filters += {\n\t\t[\"cs-only\"] = \"net 131.159.0.0/16\",\n\t};\n\n\tredef restrict_load_levels += {\n\t\t[\"cs-only\"] = LoadLevel7,\n\t};\n\n  This applies the given restrict_filter if the current load level is 7\n  or *above*.\n\n  The pcap filters belonging to the ten load levels are built and pre-compiled\n  on startup. The three functions shown above just call install_pcap_filter()\n  then.  (Robin Sommer)\n\n- drop-adapt.bro tries to adjust the load level based on the current\n  packet drop rate (Robin Sommer).\n\n- synflood.bro is an experimental policy script for detecting SYN floods.\n  It is not yet documented, other than brief comments in the script.\n  (Robin Sommer)\n\n- Subnet lookups now use Patricia trees instead of brute-force, which should\n  make them significantly more efficient for large lists, e.g., local nets.\n  (Robin Sommer)\n\n- Due to the addition of modules, which use a C++-style \"::\" scope\n  designator, you now need to use \"0x\" to introduce IPv6 address constants\n  that use \"::\" to specify a series of empty octets.  For example, you\n  used to be able to specify \"deadbeef::cafe\", but now this needs to be\n  \"0xdeadbeef::cafe\".  Note that \"1::2\" can still be written without needing\n  a \"0x\" prefix; it's just hex constants that start with letters that need\n  the prefix.\n\n- A new built-in, escape_string(), takes a string and returns a copy of\n  it that uses escape sequences for any problematic characters (Robin Sommer).\n\n- A number of low-level bug fixes and portability tweaks (Robin Sommer,\n  Ruoming Pang, Christian Kreibich, Chema Gonzalez).\n\n- A new timer, status_update_timer, fires for each ongoing connection\n  every connection_status_update_interval seconds (default = 0 seconds,\n  which means \"don't fire).  (Robin Sommer)\n\n- An additional Bro-level packet filter can filter/sample packets\n  based on their src/dest ip/subnet (using a Patricia tree for\n  efficiency; Robin Sommer). install_src_addr_filter(ip, flags, p) drops\n  packets originating from ip with probability p (0..100) if none of the\n  given TCP flags is set. install_src_net_filter, install_dst_addr_filter\n  and install_dst_net_filter\" work similarly.  The corresponding \"uninstall_*\"\n  functions remove the filters again.\n\n- The @if/@else/@endif mechanisms have been made more powerful (Robin Sommer).\n\n- New configure option --enable-debug to compile without optimization\n  (Robin Sommer).\n\n- Small tweaks to the mpatrol support (Robin Sommer).\n\n- SMTP is now one of the services which can use a small inactivity timeout\n  in inactivity.bro (Robin Sommer).\n\n- Alerts for signatures which are triggered by worms may be suppressed if\n  we already know that the triggering host is indeed infected by a worm\n  (Robin Sommer).\n\n- Matches of a signature can now be counted per destination host\n  (Robin Sommer).\n\n- snort2bro now ignores sid-526 (\"BAD TRAFFIC data in TCP SYN packet\";\n  Robin Sommer). Due to different semantics of Bro (matching stream-wise)\n  and Snort (matching packet-wise) this signature generates a lot of\n  false positives.\n\n\n0.8a34 Sun Jul 13 09:11:32 PDT 2003\n\n- The new \"subnet\" type corresponds to a CIDR prefix (Robin Sommer).\n  You can use the '/' operator to convert an address to a subnet.  The\n  \"in\" operator tests whether an address matches a subnet (e.g., \"1.2.3.4\n  in 1.2.255.255/16\" yields T).\n\n  You can index tables with index type \"subnet\" using addresses to retrieve\n  the table entry with the longest-matching prefix for that address, and\n  a number of tables/sets in the default scripts have been converted to\n  this form.  So for example the local_16_nets and local_24_nets variables\n  have been replaced by local_nets, which has type \"set[subnet]\",\n  is_local_addr() now refers to it, and skip_scan_nets_{16,24} have\n  likewise been consolidated into skip_scan_nets.\n\n  One present deficiency is that subnets can't be used in tables/sets\n  with multiple indices.  Fixing this is going to take some time ...\n  Another deficiency is that the longest-match lookup is not very\n  efficient.\n\n  Caution: this feature has been only briefly tested with IPv6.\n\n- ALERT now generates an event \"alert_action\" which includes the alert_info\n  and AlertAction associated with an alert.  You can define your own handler\n  to further customize alert processing.\n\n- The \"snort2bro\" conversion utility has been extended to recognize some\n  of the new Snort options (depth, distance, within; Robin Sommer).  For\n  example:\n\n      alert .... ( ... content:\"|00 01 86 B8|\";\n\t\t       content:\"|00 00 00 02|\"; distance:4; within:4;\n\t\t       content:\"%x %x\"; distance:16; within:256;\n\t\t       ... )\n\n  is converted to:\n\n      signature sid-1891 {\n\t  ...\n\t  payload /.*\\x00\\x01\\x86\\xB8.{4}\\x00\\x00\\x00\\x02.{16}.{0,251}%x %x/\n\t  }\n\n  Note that not all of the new Snort options are supported yet.\n\n- You can refer to script variables within signatures (Robin Sommer).\n  For example, the following is now possible:\n\n\tsignature sid-547 {\n\t  ip-proto == tcp\n\t  src-ip != local_nets\n\t  dst-ip == local_nets\n\t  dst-port == 21\n\t  event \"FTP \\\"MKD  \\\" possible warez site\"\n\t  tcp-state established\n\t  payload /[mM][kK][dD]  /\n\t  }\n\n  This makes the signatures independent of the environment (\"local_nets\"\n  in the above examle).  snort2bro now converts some well-known Snort\n  variables into corresponding Bro variables, a number of which are listed\n  in policy/site.bro.\n\n- The default action for signature matches is now logging insted of only\n  writing it to a file (Robin Sommer).\n\n- You can now use the '^' and '$' regular expression operators inside\n  subpatterns.  For example, /foo$/ | /^bar/ works now.\n\n- You can now use \"msec\" for milliseconds (in addition to \"usec\" for\n  microseconds, \"sec\" for seconds, etc).\n\n- The log_file_name and open_log_file functions are now redef'able\n  if you want to change their behavior.\n\n- Bro now exits more cleanly upon exhaustion of memory (Robin Sommer).\n\n- A bug was fixed for the case of getrlimit() returning RLIM_INFINITY for\n  the maximum number of open files.\n\n- Numerous additions of std:: scoping to address porting issues (Robin Sommer).\n\n- gcc 3.X and Solaris portability fixes.\n\n- A new event RemoteWorm is the complement of LocalWorm (Robin Sommer).\n\n- A bug in which the FTP analyzer would complain about failing to be able\n  to look up a connection has been fixed (Robin Sommer).\n\n- You can now configure Bro using \"--with-mpatrol\" to activate MPatrol\n  debugging hooks.  When built in this mode, -m dumps the leak table\n  and -M shows unfreed parts of the heap.  These dumps can also be\n  triggered using SIGUSR1 / SIGUSR2, respectively.  (Robin Sommmer)\n\n- A script function get_contents_type() which returns the type of reassembling\n  being done for a connection (none/orig-side/resp-side/both; Robin Sommer).\n\n- A minor bug fix for the regular expression matcher (Robin Sommer).\n\n\n0.8a32 Thu Jun 12 23:33:21 PDT 2003\n\n- The low-level hash functions have been reimplemented to use HMAC-MD5 to\n  counter the \"algorithmic complexity attacks\" discussed in the USENIX\n  Security 2003 paper by Scott Crosby & Dan Wallach\n  (http://www.cs.rice.edu/~scrosby/hash/) (Ruoming Pang and Vern Paxson)\n\n- Ruoming Pang has made extensive changes to the anonymization/transformation\n  framework.  A paper describing it will appear in SIGCOMM 2003, and will\n  be included with the Bro distribution once the final copy is ready.\n\n- Internal hash tables now resize incrementally, and more quickly.\n  This makes a big difference in avoiding lengthy processing pauses when\n  processing large volumes of traffic. (Craig Leres)\n\n- gcc 3.1 and Linux portability tweaks.\n\n- The calling sequence of http_request() has changed.  It now includes both\n  the original URI and the escaped URI.  This was made explicit because\n  we found that if only the original was passed in, it was too easy to forget\n  to expand the escapes in it; and if only the escaped was passed in,\n  some attacks could be missed. (Ruoming Pang)\n\n- Signature rules can now refer to \"finger\" payload as well as HTTP and FTP\n  (Robin Sommer).\n\n- The signature engine now includes keywords \"dst-ip\", \"dst-port\",\n  \"ip-proto\", \"src-ip\", \"src-port\".  (Robin Sommer)\n\n- Packet sorting now defaults to off.\n\n- The FTP analysis now attempts to track the current directory (Ruoming Pang).\n\n- A number of scan detection additions have been added (Scott Campbell):\n\n\tactivate_landmine_check = F\n\t\tif T, then access to more than landmine_thresh_trigger\n\t\taddresses in landmine_address (a set of addresses)\n\t\tconstitutes a scan\n\n\tactivate_priv_port_check = T\n\t\tif T, then inbound access to more than priv_scan_trigger\n\t\tprivileged ports (i.e., ports < 1024) is considered a port\n\t\tscan.  You can exclude particular services from the count\n\t\tvia troll_skip_service, which defaults to { smtp, ftp,\n\t\tssh, 20/tcp, http }.\n\n- The SMTP analysis now includes a new alert, HotEmailRecipient, which\n  is triggered by mail sent to any of the addresses specified in\n  the pattern hot_recipients (which defaults to a bare /@/).\n\n- The new built-in cat_string_array_n() is like cat_string_array() except\n  it takes starting and ending indices as additional arguments (Ruoming Pang).\n\n- The new built-in sort_string_array() takes a string array and returns\n  a sorted version (Ruoming Pang).  It currently uses an N^2 algorithm\n  so shouldn't be used on large arrays.\n\n- The new built-in subst() substitutes all instances of a given pattern\n  in a given string with another string (Ruoming Pang).  For example,\n  subst(\"fooboo\", /oo/, \"xxx\") returns \"fxxxbxxx\".\n\n- The new built-in cut_tail() trims characters from the end of a string\n  (Ruoming Pang).  For example, cut_tail(\"fooboo\", 2) returns \"foob\".\n\n- sub_bytes() can now take a negative argument, which is with respect to\n  the end of the string rather than the beginning (Ruoming Pang).\n\n- The new built-in md5_hmac() returns an HMAC-MD5 hash of the given string\n  (Ruoming Pang).  The HMAC secret key is generated from available entropy\n  when Bro starts up, or it can be specified for repeatability using\n  the new -K flag.\n\n- The new built-in split_all() is like split() except that the returned\n  array also includes the parts of the string that match the pattern\n  used for the splitting (Ruoming Pang).\n\n- The new built-in split_n() splits up to a given number of instances,\n  optionally returning the parts matching the split pattern (Ruoming Pang).\n\n- The new built-in split_complete() is the most general of the split functions\n  (the others are written in terms of it).  It splits a given string\n  with separators that appear in either a given pattern or a given set\n  of strings, optionally including the text matching the separators in\n  its return value, and optionally limiting the number of matches to\n  a specified maximum.  (Ruoming Pang)\n\n- The new built-in to_string_literal() returns an escaped version of a string\n  suitable to feeding into Bro's parser.  For example, calling it on\n  \"foo\\nbar\" (where '\\n' is an embedded newline) returns \"foo\\x0abar\".\n  (Ruoming Pang)\n\n- subst_substring() has been renamed subst_string (Ruoming Pang).\n\n- unescape_URI() no longer takes the connection as an argument (Ruoming Pang).\n\n- config.guess and config.sub updated\n\n- String escape expansion has been refined (Ruoming Pang) and some bugs\n  fixed.  It now supports a format that's consistent with Bro string literals.\n\n- Scanning of octal and hex escape sequences now stops after 3 or 2\n  characters, respectively.  For example, \"\\0007\" now expands to a\n  NUL followed by the character '7'.  (Ruoming Pang)\n\n- Bug fixes for handling of bare <CR> and <LF>'s when <CRLF> expected\n  (Ruoming Pang), and associated \"weird\" events.\n\n- A bug in signature matching reassembly has been fixed (Robin Sommer).\n\n- A bug in reporting \"bad connection size\" for connection sizes > 2GB\n  has been fixed.\n\n- A bug in computing sizes for large partial connections has been fixed.\n\n- A bug in delayed generation of connection closed events has been fixed.\n\n- A framework has been added for compression of some \"weird\" events\n  to only be generated once-per-connection (Ruoming Pang).\n\n- Some of the \"weird\"'s generated by the HTTP analyzer have been regularized.\n\n- Some memory management fixes.\n\n- A performance problem in allocating List objects was fixed.\n\n- The copyright dates have been updated (Craig Leres).\n\n\n0.8a22 Wed Jan 15 16:47:18 PST 2003\n\n- There is now a \"conditional compilation\" feature similar to C's preprocessor\n  (contributed by Robin Sommer).  \"@if (expr)\" will include the remaining\n  input lines up to \"@endif\" only if the given expression evaluates to true.\n  \"@ifdef (id)\" will do so only if the given identifier has been defined,\n  and \"@ifndef (id)\" only if it has not been defined.  There's currently\n  no \"@else\" directive, and conditionals cannot be nested.  Both of these\n  will be added in the future.\n\n- New built-in functions (contributed by Ruoming Pang): parse_dotted_addr\n  takes a string in A1.A2.A3.A4 form an returns a corresponding \"addr\" value.\n  unescape_URI takes a URI that possibly has embedded escape sequences\n  (\"%61\" for 'a') and expands the sequences.\n\n- The URIs in HTTP requests are no longer automaticaly escaped.  Instead,\n  they need to be manually escaped using unescape_URI.  As this is likely\n  error-prone (users forgetting to do so), the plan is to change the\n  calling sequence of http_request in the near future so that *both* the\n  escaped and the unescaped URI are passed in.\n\n- A number of g++ 3.0 porting tweaks have been added (thanks to Sean Irvine).\n\n- The term \"rule\" has been systematically changed to \"signature\" (Robin Sommer).\n\n- The functionality of monitoring packet drops has been moved into its\n  own policy script, netstats.bro (Robin Sommer).\n\n- A number of rewriter and location bugs have been fixed.\n\n- Some missing HTTP \"weird\"'s have now been included in weird.bro.\n\n\n0.8a21 Thu Nov 28 23:31:38 PST 2002\n\n- A new mechanism will reorder packets within a window of packet_sort_window\n  if due to their sequence numbers they appear to be out of order.  This\n  can help a great deal when reading from multiple NICs.  (Contributed by\n  Ruoming Pang.)\n\n- A bug in regular-expression matching in which for example\n  \"2a1\" == /[0-9]+/ would evaluate as true was fixed (Ruoming Pang).\n\n- There's now a rewriter/anonymizer for FTP (Ruoming Pang).\n\n- The rewriter/transformation framework now supports a notion of\n  delaying transformation decisions until later (Ruoming Pang).\n\n- An incompatibility with bison 1.75 has been identified.  The problem\n  is that bison 1.75 generates incomplete location information for empty\n  grammar productions (those for which the RHS is empty).  This will\n  be fixed soon.\n\n- Some bugs in the signature engine have been fixed (Robin Sommer).\n\n- The sources no longer use the not-fully-portable hash_map template\n  (Umesh Shankar).\n\n- Some bugs with the debugger getting confused about source line number\n  locations, and also with the -t option, have been fixed (Umesh Shankar).\n\n- If a content gap occurs wholly inside an HTTP entity, then the analyzer\n  will skip over the entity and continue processing any subseqeuent HTTP\n  items, rather than giving up on processing the connection (Ruoming Pang).\n\n- The following new built-in functions have been contributed by\n  Ruoming Pang:\n\n\tfunction cat_string_array(a: string_array): string\n\tfunction split_all(str: string, re: pattern): string_array\n\tfunction strstr(big: string, little: string): count\n\tfunction subst_substring(s: string, from: string, to: string): string\n\tfunction int_to_count(n: int): count\n\tfunction fmt_ftp_port(a: addr, p: port): string\n\n\n0.8a20 Sun Nov 17 20:09:31 PST 2002\n\n- This is the first \"public\" Bro release (one accessible directly via\n  the Web).  The README has been correspondingly updated.\n\n- The user manual has been significantly expanded, and source for it is\n  now included in the release.\n\n- Some \"active mapping\" bug fixes (contributed by Umesh Shankar).\n\n- The configuration script now checks for the presence of the necessary\n  BIND libraries/headers, and also for bogus --enable options (contributed\n  by Craig Leres).\n\n- backdoor.bro now includes a tcpdump filter for detecting (some) KaZaA\n  traffic.\n\n- http-reply.bro now tracks the sizes of request/response entities.\n\n- http-request.bro now treats an URL accessing variants of /etc/netconfig\n  as sensitive.\n\n\n0.8a18 Sun Oct 27 15:28:23 PST 2002\n\n- Improvements to the performance of the SMTP analyzer (Ruoming Pang).\n  A new function, skip_smtp_data, skips over the content of an SMTP\n  message.\n\n- If you're doing trace rewriting and specify -w but don't specify -A,\n  then the rewritten traffic goes to the -w save file, along with the\n  usual non-transformed traffic (Ruoming Pang).  If a connection is\n  being transformed (which is specified by the new rewriting_smtp_trace\n  and rewriting_http_trace globals), then only its transformed packets\n  are written to the -w file; not the original packets.  This allows\n  a potentially large degree of trace compression.  There's also a\n  new variable omit_rewrite_place_holder, which directs that when rewriting\n  a trace, packets that are placeholders for now-missing packets (because\n  you've excised content) are *not* generated.  This diminishes the\n  timing fidelity of the transformed trace, but also can save a large\n  amount of space.\n\n- SMTP relay analysis is now standalone from regular SMTP analysis\n  (Ruoming Pang).\n\n- Some memory management and error propagation fixes (Ruoming Pang and\n  Vern Paxson).\n\n\n0.8a16 Wed Oct 23 23:48:40 PDT 2002\n\n- \"--enable-brov6\" was broken by some recent changes.  It now works again.\n\n- Some \"make distclean\" tweaks.\n\n- Error checking for \"redef enum\".\n\n\n0.8a15 Tue Oct 22 00:02:51 PDT 2002\n\n- Fixed Makefile bug which left out wide-spread dependencies on\n  event.bif.netvar_h.\n\n\n0.8a14 Mon Oct 21 01:16:46 PDT 2002\n\n- The \"add\" statement has been implemented.  This allows you to add\n  elements to sets.  A bunch of policy scripts that used to use\n  \"table [] of bool\"'s for this purpose have been modified to instead\n  use sets.\n\n- You can now extend the elements of an enum using \"redef enum foo += { ... }\"\n  where the additional names are listed in the braces (contributed by\n  Umesh Shankar).  A number of policy scripts have been tweaked to use\n  this for the (fairly) new Alert enum.  This allows you to create new\n  Alert's without alert.bro having to know about them.\n\n- Some bugs in identifying error locations have been fixed.\n\n- -A now supports anonymizing IP addresses (contributed by Ruoming Pang).\n  This includes four new functions: preserve_prefix, preserve_subnet, and\n  preserve_net (which direct that the corresponding prefix/net/subnet\n  not be anonymized) and anonymize_addr (which returns the anonymized\n  version of the given address.\n\n- Some bugs in HTTP -A have been fixed (thanks to Ruoming Pang).\n\n- The beginnings of support for CIDR prefixes has been added by\n  Ruoming Pang.\n\n- Porting tweaks (use of map's rather than hash_map's, courtesy of\n  Umesh Shankar; libedit comments fixed).\n\n- http-detail.bro has gone away.\n\n- Some more copyright and $Header -> $Id fixes.\n\n- There is now a function string_cat() which concatenates two strings\n  and returns the result (contributed by Ruoming Pang).  This function\n  is useful in place of the regular cat() because the latter will\n  expand escape sequences etc.  It probably shouldn't, and that may\n  change in the future.\n\n\n0.8a11 Sun Oct 13 10:53:07 PDT 2002\n\n- The framework for defining built-in functions has been extended\n  so it's also now the way to specify the interface to event handlers.\n  See event.bif.  (Contributed by Ruoming Pang)\n\n- A new policy script, http-abstract.bro, can be loaded when doing HTTP\n  transformation (via http-rewriter.bro), contributed by Ruoming Pang.\n  It trims HTTP text responses to the first \"http_abstract_max_length\" bytes.\n\n- A new built-in, skip_http_entity_data, specifies that the entity\n  associated with the current HTTP request/response should be skipped\n  (Ruoming Pang).\n\n- More changes have been made to the mechanisms for tracking source\n  file locations in order to pinpoint error messages.  If you encounter\n  problems, please let me know.\n\n- If you try to configure but your resolve library lacks res_mkquery(),\n  this is now a fatal error (Craig Leres).  Ideally, someone will modify\n  DNS_Mgr.cc to work even if only blocking DNS is available ...\n\n- In most (not all, yet) of the sources, the copyright notices have\n  been updated, $Header has been changed to $Id, and config.h is included\n  (Craig Leres).\n\n\n0.8a10 Tue Oct  8 16:05:42 PDT 2002\n\n- The way that Bro tracks the source-file location associated with\n  different objects has been tweaked, with a resulting savings of\n  about 10% in Bro's memory use and a smidgen of CPU time, too.\n\n- Built-in functions now are better about identifying source-file locations\n  associated with errors.\n\n- The http.$BRO_ID log file format has changed to no longer track\n  individual request streams.  (So it is now closer to how it used\n  to operate in 0.7.)\n\n- The autoconf setup has been tweaked so that you use:\n\n\t--enable-brov6              enable IPV6 processing\n\t--enable-activemapping      enable active mapping processing\n\t--enable-expire-dfa-states  enable DFA state expiration\n\n  rather than --with-XXX as was the case in 0.8a9.\n\n\n0.8a9 Mon Oct  7 10:15:12 PDT 2002\n\n- A bunch of configuration/autoconf/portability tweaks (Craig Leres).\n  These include compiling under Solaris.\n\n  When running ../configure, you can now specify:\n\n\t--with-brov6              enable IPV6 processing\n\t--with-activemapping      enable active mapping processing\n\t--with-expire-dfa-states  enable DFA state expiration\n\n  You no longer set these via editing the Makefile.\n\n- Some bugs with HTTP 1.0 keep-alive connections fixed (Ruoming Pang).\n\n- The \"hf\" suite of utilities is no longer distributed in aux/.  Instead,\n  get it directly from ftp://ftp.ee.lbl.gov/hf.tar.gz.\n\n- bro_logchk has been renamed bro-logchk.pl and is now distributed in aux/\n  (it was supposed to be before, but was inadvertantly left out of the list\n  of distribution files).\n\n\n0.8a7 Fri Oct  4 22:24:30 PDT 2002\n\n- HTTP reply analysis has been split into a number of policy script files:\n\n\thttp-body.bro\n\thttp-detail.bro\n\thttp-entity.bro\n\thttp-event.bro\n\thttp-header.bro\n\thttp-reply.bro\n\thttp-rewriter.bro\n\n  so you can readily trade off how detailed the HTTP processing is vs.\n  the CPU/memory it consumes (contributed by Ruoming Pang).\n\n- Bro now generates login_prompt events when the $TTYPROMPT environment\n  variable is passed during a login session, in order to detect the\n  recently publicized Solaris remote /bin/login exploit.\n\n- Ruoming Pang has extended the framework for defining \"rewriter\" functions\n  to now also serve as the way to define general built-in functions.\n\n- bro.init has been rearranged to have a more logical structure (courtesy\n  of Ruoming Pang).\n\n- Craig Leres contributed a number of portability & autoconf tweaks.\n\n- Craig Leres has extended nb_dns.{h,c} to support IPv6 DNS lookups.\n  Bro does not yet take advantage of these extensions.\n\n- The beginnings of portability to gcc 3.2 were added.  There unfortunately\n  is more work to do here!\n\n- The README has finally been updated to have more correspondence with\n  the 0.8 release.\n\n\n0.8a6 Wed Oct  2 18:58:12 PDT 2002\n\n- Upgrade to autoconf 2.53 (Craig Leres).\n\n\n0.8a5 Tue Oct  1 19:04:53 PDT 2002\n\n- The regular expression matcher how has a mechanism to stop scanning when\n  no further match is possible (Robin Sommer).  If you find problems with\n  regular expression matching, especially if you're using EXPIRE_DFA_STATES,\n  please let us know!\n\n- Rule/signature files are now searched for using $BROPATH (Robin Sommer).\n  In addition, you can define a list of signature files to incorporate\n  using the new global \"signature_files\".  For example,\n\n\tredef signature_files += \"web-stuff\"\n\n  will look for web-stuff and web-stuff.sig along $BROPATH.\n\n- The tcp_deliver_undelivered variable is now tcp_match_undelivered and\n  only applies to delivering otherwise-undelivered data to the signature\n  matcher; such data is *not* delivered to any associated analyzer.\n  (Robin Sommer)\n\n- The framework for tracking version numbers now allows negative as\n  well as positive versions (Robin Sommer).\n\n\n0.8a4 Tue Oct  1 15:54:58 PDT 2002\n\n- Support for extracting the contents of HTTP replies (and POST's),\n  and for transforming/anonymizing HTTP traffic, contributed by Ruoming Pang.\n\n- Some minor internal tweaks to the timer management to help track patterns\n  of timer expiration.\n\n\n0.8a3 Mon Sep 23 22:48:07 PDT 2002\n\n- HTTP reply handling refined in policy scripts.\n\n- New built-in functions to_int(), to_count() convert strings to\n  integers/counts.\n\n- Bug fixes for DNS_Mgr and IPv6.\n\n- AckAboveHole alerts now ignored (just written to alert.$BRO_ID) by default.\n\n- Packets belong to ignored connections (for example, partial connections if\n  partial_connection_ok is false) are no longer recorded to the save file.\n\n- Some minor formatting/naming tweaks.\n\n\n0.8a1 Sat Sep 21 22:09:23 PDT 2002\n\n- IPv6 support enabled if you build using -DBROv6.  Deficiencies: Bro\n  doesn't yet look up hostnames for AAAA records; no handling of extension\n  headers (if you have traces of these, please send them to me!); no\n  handling of FTP PORT/PASV w/ IPv6 addresses (again, if you have traces,\n  please send them!); DNS analyzer doesn't understand AAAA yet (again,\n  please send me traces!); you have to change the capture_filter line\n  in tcp.bro (as indicated in the script) in order to process TCP traffic,\n  due to deficiencies in libpcap's support for IPv6.\n\n- Bro is migrating towards a more structured way of handling log messages /\n  alerts.  Analyzers now @load alert.bro, which has a function ALERT()\n  for processing alerts.  Soon this function will provide a variety of\n  filtering/processing hooks; expect changes.\n\n- Bro now has an HTTP response analyzer (contributed by Ruoming Pang).\n  The HTTP policy scripts have been split up into http.bro (just general\n  definitions), http-request.bro (handles requests; loaded by http.bro),\n  http-reply.bro (handles replies; you need to explicitly load this), and\n  http-detail.bro (handles individual headers).  http-reply.bro will be\n  undergoing some significant reworking in the near future; probably the\n  scripts will be merged back into a single http.bro plus http-detail.bro.\n\n- ssl-worm.bro contains a prototype policy script for detecting the\n  Scalper SSL worm (contributed by Robin Sommer).  It uses the signature\n  file sig.ex.ssl-worm.bro.  If someone has traces of Scalper in action\n  to send us, that would be great.\n\n- A new policy script, contents.bro, extracts the contents of each\n  Bro connection into its own pair of files (one file for each\n  direction).  Use in conjunction with -f or discarder_XXX() to\n  extract specific connections.\n\n- A new built-in function, strcmp(), returns the usual comparison between\n  two strings (contributed by Robin Sommer).\n\n- A new event, content_gap(), is generated when Bro detects that it is\n  forced to skip over data in a reconstructed TCP stream because it is\n  missing from the packet input.\n\n- BIND8 is no longer included with the distribution.  If this causes you\n  problems, let me know.\n\n- aux/scripts/bro_logchk is a Perl script for parsing Bro HTTP & FTP logs\n  (contributed by Jim Barlow).\n\n- You can now compare addresses to see which is larger.  a < b means\n  that in network order, the octets making up 'a' are ordered before\n  those for 'b'.  E.g., 128.2.3.4 < 128.2.3.5 < 129.0.0.1.  Note that\n  IPv4 addresses are all < IPv6 addresses (other than IPv4 addresses\n  that are embedded in IPv6 addresses, e.g., ::128.2.3.4 < 128.2.3.5).\n\n- Serious bug in TCP option handling fixed.\n\n- Some bugs in CRLF handling fixed (courtesy Ruoming Pang).\n\n- Bug in the implementation of &optional fixed.\n\n- Bug in computing memory statistics when not reading packets (from\n  an interface or the trace file) fixed.\n\n- You can now include a trailing comma after the last item in an\n  \"enum\" enumeration list.\n\n- port-name.bro now maps 389/tcp to \"ldap\".\n\n- A bug has been fixed in loading files multiple times\n\n\nv0.7a175 Thu Aug 29 21:14:34 PDT 2002\n\n- bro -s <file> reads in a *signature* file to search for regular expressions\n  in packet payloads or TCP byte streams (written by Robin Sommer).\n  See policy/rules.bro for an example of a policy script for processing\n  the matches.\n\n  Note that this feature is experimental, and will be evolving in the\n  near future.\n\n- The python script \"snort2bro\" reads in Snort signatures and translates\n  them into Bro signature rules, suitable for processing using -s.\n\n  An example of its operation is seen by running\n\n\tpython snort2bro < sig.ex.web-rules.snort\n\n  which, after reading in sig.ex.classification.config and\n  sig.ex.reference.config, generates the output given in\n  sig.ex.web-rules.bro, which is suitable to use as input to\n  bro -s.\n\n- bro -d invokes a gdb-like debugger (written by Umesh Shankar).  You can\n  set breakpoints and watchpoints, examine tracebacks, print Bro expressions,\n  and the like.  Type \"help\" for on-line help.\n\n- bro -t <tracefile> turns on tracing of the policy script execution,\n  written to the given file.\n\n- Bro now includes an SMTP analyzer, which includes processing MIME\n  message bodies (written by Ruoming Pang).  See smtp.bro and mime.bro\n  for related policy scripts.  smtp.bro includes several experimental\n  techniques for detecting mail relaying.\n\n- You can now define enumerated types, such as\n\n\ttype scanner_type: enum {\n\t\tSCANNER_STEALTH, SCANNER_HIGH_SPEED, SCANNER_AMBIGUOUS,\n\t};\n\n  Enumerated types can be compared for equality with one another, and used\n  as table indices, but cannot be converted to/from integers.\n\n- bro -A <file> invokes an experimental, general trace transformation/\n  anonymization framework (written by Ruoming Pang) which writes a modified\n  tcpdump trace file from the input (which can be the network or another\n  trace file) with potentially extensive modifications to the recorded\n  packets.\n\n  Transformers are built from .rw files (currently, {finger,ftp,ident,smtp}.rw),\n  which are processed by the utility \"rwcl\" to generate both event engine\n  analyzer components and rewriter policy scripts (for example, after\n  configuring and building Bro, you'll find the scripts\n  policy/{finger,ftp,ident,smtp}.rw.bro).\n\n  See policy/smtp-rewriter.bro for an example of a policy script that\n  performs transformation/anonymization.\n\n- New built-ins:\n\n\tsplit(s: string, p: pattern): string_array;\n\n\t  takes a string and splits it into pieces at each occurrence of\n\t  the regular expression pattern p.  (The functionality is like\n\t  that in awk.)  It returns a string_array, which is a table[count]\n\t  of string that is indexed starting at 1, giving the different\n\t  pieces.\n\n\t  For example,\n\n\t\tsplit(\"foobar\", /o/)\n\n\t  returns a 3-element table, for which [1] is the string \"f\",\n\t  [2] is the string \"\" (empty), and [3] is the string \"bar\".\n\n\tsplit1(s: string, p: pattern): string_array;\n\n\t  split1() does the same thing as split(), but only performs splitting\n\t  at the first occurrence, so it returns either a one-element table\n\t  (if the pattern doesn't appear in the string) or a two-element\n\t  table.  split1(\"foobar\", /o/) returns a 2-element table for which\n\t  [1] is \"f\" and [2] is \"obar\".\n\n\tmd5_hash(s: string): string\n\n\t  returns (in human-readable form) the MD5 hash of a given string.\n\n\t  So, for example,\n\n\t\tmd5_hash(\"foobar\")\n\n\t  yields \"3858f62230ac3c915f300c664312c63f\".\n\n\tto_addr(s: string): addr\n\n\t  takes a string representing an address in \"dotted quad\" format\n\t  and returns the correponding \"addr\" value.\n\n\tset_buf(f: file, buffered: bool)\n\n\t  sets the given file to have its writes buffered or unbuffered\n\t  depending on the value of \"buffered\".  It does not return a value.\n\n\tconnection_exists: function(c: conn_id): bool\n\n\t  returns T if the given connection identifier corresponds to a\n\t  currently instantiated connection (one for which the event engine\n\t  has state), F otherwise.\n\n\tlookup_connection(c: conn_id): connection\n\n\t  returns the \"connection\" record associated with the given\n\t  connection identifier, or a fatal run-time error if there\n\t  isn't one.\n\n\tset_inactivity_timeout(c: conn_id, timeout: interval): interval\n\n\t  sets the inactivity timeout for the given connection to the\n\t  given interval, returning the old interval.\n\n\t  If the interval is non-zero, then when no packets have been\n\t  processed for a connection after that much time has elapsed,\n\t  the connection is deleted, and an \"inactivity_timeout\" event\n\t  generated.\n\n\tget_matcher_stats(): matcher_stats\n\n\t  used for gathering statistics about the signature matcher\n\n\trewriting_trace(): bool\n\n\t  returns T if -A was specified (anonymize/rewrite a trace),\n\t  F otherwise.\n\n- New events:\n\n\tconnection_state_remove(c: connection);\n\n\t  Invoked when the event engine has removed the connection from\n\t  its state.\n\n\tconnection_SYN_packet(c: connection, pkt: SYN_packet);\n\n\t  Invoked for each SYN/SYN-ACK packet.\n\n\tconnection_timeout(c: connection);\n\n\t  Invoked when the event engine times out a connection - for\n\t  example, because the originator sent a SYN that was never\n\t  answered, so the connection was never established.\n\n\tconnection_reused: event(c: connection);\n\n\t  Invoked when the event engine decides that a new SYN for\n\t  an existing connection reflects a reuse of the connection\n\t  four-tuple, rather than belonging to the existing connection.\n\n- New globals:\n\n\tconst ignore_checksums = F &redef;\n\n\t  If true, then the event engine does not verify checksums (and\n\t  hence will not discard packets with bad checksums).\n\n\tconst tcp_deliver_undelivered = F &redef;\n\n\t  If true, then when the event engine closes a connection, if\n\t  that connection has a chunk of data not yet delivered to its\n\t  analyzer (which only happens if the data is above a sequence\n\t  hole, indicating either a packet filter glitch or a protocol\n\t  botch), then the undelivered data will at that point be delivered\n\t  to the connection's analyzer.\n\n\tconst tcp_reassembler_ports_orig: set[port] = {} &redef;\n\tconst tcp_reassembler_ports_resp: set[port] = {} &redef;\n\n\t  Sets of ports for which, if a connection has the corresponding\n\t  originator/responder port, then the event engine will reassemble\n\t  the byte stream of the connection.\n\n\t  Normally, the event engine reassembles byte streams for any\n\t  connection for which there's an analyzer, and otherwise doesn't.\n\t  These variables can be used to force reassembly for the originator\n\t  or responder side (respectively) of connections for which there\n\t  isn't otherwise an analyzer.  This is useful when doing signature\n\t  matching on reassembled byte streams, for protocols that are\n\t  not otherwise analyzed by the event engine.\n\n\tconst table_expire_interval = 1 min &redef;\n\n\t  How often to check table entries to see whether they've expired\n\t  (see &read_expire, etc., below).\n\n\tconst requires_trace_commitment = F;\n\n\t  If true, then when rewriting/anonymizing traces, nothing will\n\t  actually be written to the edited trace file unless you call:\n\n\t\trewrite_commit_trace(c: connection, commit: bool, future: bool)\n\n\t  If \"future\" is true, then future rewritten packets will be\n\t  automatically commited; otherwise, writing them to the trace\n\t  file requires another explicit rewrite_commit_trace() call.\n\n\tconst inactivity_timeout = 0 secs &redef;\n\n\t  As noted above, when a connection becomes inactive, time it out\n\t  after this interval.  If 0 secs, then don't time it out.\n\n- An SSH analyzer extracts SSH client/server version information.  See\n  ssh.bro for the related policy script.\n\n- There's now a (very) simple TFTP analyzer available in tftp.bro.\n\n- You can now set the global \"frag_timeout\" to an interval which controls\n  how long fragments are kept before discarding them (contributed by Ashley\n  Thomas).  If you don't set the global, or set it to 0.0 sec, then fragments\n  are kept around indefinitely.\n\n- An implementation of an experimental anti-evasion technique, \"active\n  mapping\", has been written by Umesh Shankar.  It is not yet ready for\n  general use, and isn't compiled in unless -DACTIVE_MAPPING.\n\n- Four new attributes can now be associated with tables (implemented\n  by Robin Sommer): &read_expire, &write_expire, and &create_expire\n  will delete table entries after a given interval has elapsed since\n  the table entry was last read, written, or created.  For example:\n\n\tglobal a: table[addr] of count &default=0 &create_expire = 5 sec;\n\n  will delete each entry added to it 5 seconds after the entry was added,\n  regardless of subsequent read/write activity to the element.\n\n  &expire_func allows you to associate a function with the table such that\n  whenever an entry expires, the function is invoked.  It's passed the\n  value of the table entry (not the index - perhaps this should be changed),\n  and returns an \"interval\" value.  If the interval is <= 0.0 seconds, then\n  the table entry is immediately deleted.  Otherwise, it is deleted after\n  the given interval has elapsed.\n\n- When listing multiple attributes, you no longer separate them with\n  commas.  For example, if you used to have:\n\n\tglobal a: table[string] of count &default=0, &redef;\n\n  you now need to use:\n\n\tglobal a: table[string] of count &default=0 &redef;\n\n- You can now construct records using\n\n\t[$field1 = <expression>, $field2 = <expression>, ...]\n\n  Such record values can be assigned to other records providing that the\n  target value's type includes all of the fields (same name and type)\n  present in the record value, and that any missing fields have the\n  &optional or &default attribute (see next item).\n\n  You can also include a record value inside the record constructor, and\n  all of its fields will be included in the constructed record value.\n\n- Record fields can now be annotated with &optional, to indicate\n  that the field needn't be present, or &default, which indicates\n  a default value to provide if the field is missing.\n\n- You can query as to whether a record has a value for a given field\n  using the new \"?$\" operator.  So for example:\n\n\ttype my_rec: record {\n\t\tnum: count &default = 0;\n\t\tmsg: string;\t# mandatory, since no &optional/&default\n\t};\n\n\tglobal r: my_rec;\n\n\tr = [$msg = \"hello\"];\n\n\tprint r?$num, r?$msg, r$num;\n\n  will print \"F, T, 0,\" because even though 'r' has a default value\n  for $num (which shows up when printing r$num), that field is missing,\n  hence r?$num is F.\n\n- An experimental scheme has been added (by Umesh Shankar) for managing\n  general attributes associated either with all values (\"global attributes\")\n  or particular particular values.  This scheme is likely to change in\n  the near future, and hence isn't explained here further.\n\n- The DNS analysis now includes ADDL and AUTH records, and much richer\n  policy script analysis (per policy/dns.bro).\n\n- You can now \"redef\" a function or event handler to override its\n  previous definition.  For a function, this looks like:\n\n\tredef log_hook = function(msg: string): bool\n\t\t{\n\t\t...\n\t\t}\n\n  For an event handler, it's just the usual definition preceded by \"redef.\n  For example,\n\n\tredef event ack_above_hole(c: connection) { }\n\n  would replace the default ack_above_hole handler with one that does nothing.\n\n- HTTP server and HTTP proxy backdoor detectors have been added,\n  generating http_signature_found and http_proxy_signature_found,\n  respectively (contributed by Ruoming Pang).\n\n- A KaZaA backdoor detector has been added, which generates\n  kazaa_signature_found for likely KaZaA connections.\n\n- The new policy scripts flag-irc.bro and flag-warez.bro provide\n  hooks for defining site policies for detecting IRC and access\n  to warez.\n\n- portmapper.bro now tracks the services it sees, and the names are\n  used in connection summaries rather than generic services like port-656.\n\n- bro -C (or redef'ing the \"ignore_checksums\" global to T) instructs\n  Bro to ignore any checksum errors and go ahead and analyze such packets.\n\n- The (trivial) policy script print-globals.bro dumps out all of the policy\n  script global variables and the amount of memory they consume.\n\n- The policy script code-red.bro has been renamed worm.bro and generalized\n  to detect Nimda as well as Code Red 1 & 2.\n\n- A bunch of additional default sensitive URIs have been added to http.bro.\n  http.bro also now doesn't report worm-related URIs.\n\n- A bunch of less common portnames were removed from port-names.bro.\n\n- Empty regular expressions are now allowed.\n\n- The finger_request event now has a third parameter, the additional\n  text after the username.\n\n- More systematic handling of NULs and CRLF by the event engine.\n\n- Hex escape sequences now must have exactly two hexadecimal characters.\n\n- FYI - work has begun on significantly altering the way that policy\n  scripts generate alerts.\n\n- Work has begun (by Robin Sommer) on a general framework for tracking\n  client/server versions.  See software.bro.\n\n- Work has begun on a NETBIOS analyzer (see NetbiosSSN.cc).  Contributions\n  (e.g., finishing it :-) welcome.\n\n- Work has begun on migrating the internals to process IPv6 in addition\n  to IPv4.\n\n- A number of bug fixes, leaks, and memory allocation lint tweaks.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a90 Thu Sep 06 00:50:43 PDT 2001\n\n- Better state management, especially for use in high-volume sites.  There\n  are now a number of ways to track the resources consumed by Bro while it\n  runs, and to reduce the amount of memory Bro consumes.  Adding\n\n\t@load print-resources\n\n  will log a summary of the resources consumed by Bro when it exits, and\n\n\t@load reduce-memory\n\n  will change a number of default values in order to significantly diminish\n  the amount of memory Bro requires.\n\n  Other ways to lower the required memory discussed in the next three items.\n\n- The global \"maintain_http_sessions\" now controls whether http.bro tracks\n  multiple HTTP connections between the same hosts as a single HTTP session.\n  Doing so costs a considerable amount of state (so set to F for reducing\n  the memory impact of HTTP analysis).\n\n- The global \"suppress_scan_checks\", if true, turns off address and port\n  scan detection.  (You can't achieve this by simply not @load'ing scan.bro,\n  because it's loaded by some of the default policy scripts.)  Turning it\n  off can save a lot of memory.\n\n- Note, the ident.bro is also expensive in terms of state-holding.\n\n- New library functions:\n\n\t- resource_usage() returns a record detailing real time,\n\t  CPU time, memory, other getrusage info, and the current\n\t  and maximum number of TCP/UDP/ICMP connections, and\n\t  timers and fragments.\n\n\t- val_size() returns the size in bytes needed to represent\n\t  a given value (which can be a record, a table, or a\n\t  simple constant, for example).  It's not fully accurate\n\t  but is in the right ballpark.\n\n\t- global_sizes() return a table mapping every global\n\t  variable to its size (per val_size()).  Useful for\n\t  tracking which ones are growing large over time.\n\n- You can now control a number of timers related to Bro's connection\n  management.  Setting them to lower values generally decreases the\n  amount of state Bro has to keep (see reduce-memory.bro), though\n  this can also make it easier for an attacker to evade detection:\n\n\ttcp_SYN_timeout: interval\n\t\tControls how long Bro waits after seeing the\n\t\tbeginning of a connection (whether due to a SYN\n\t\tor not; the timer is misnamed) before checking\n\t\twhether it elicited any reply.\n\n\ttcp_session_timer: interval\n\t\tAfter a connection has closed, wait this long for\n\t\tfurther activity before checking whether to time\n\t\tout its state.\n\n\ttcp_connection_linger: interval\n\t\tWhen checking a closed connection for further\n\t\tactivity, Bro should consider it inactive if there\n\t\thasn't been any for this long.  It also complains\n\t\tif the connection is reused before this much time\n\t\thas elapsed.\n\n\ttcp_attempt_delay: interval\n\t\tBro waits this long upon seeing an initial SYN\n\t\tbefore timing out the connection attempt.\n\n\ttcp_close_delay: interval\n\t\tUpon seeing a normal connection close, Bro flushes\n\t\tstate after this much time.\n\n\ttcp_reset_delay: interval\n\t\tUpon seeing a RST, Bro flushes state after this\n\t\tmuch time.\n\n\ttcp_partial_close_delay: interval\n\t\tBro generates a connection_partial_close event this\n\t\tmuch time after one half of a partial connection\n\t\tcloses, assuming there has been no subsequent\n\t\tactivity.\n\n\tnon_analyzed_lifetime: interval\n\t\tIf a connection belongs to an application that you\n\t\taren't analyzing, Bro times it out after this\n\t\tinterval.  If 0 secs (default), then it doesn't\n\t\ttime it out.\n\n\tdns_session_timeout: interval\n\tntp_session_timeout: interval\n\trpc_timeout: interval\n\t\tBro waits this long before timing out a DNS/NTP/RPC\n\t\trequest.\n\n\tmax_timer_expires: count\n\t\tThe maximum number of timers to expire after\n\t\tprocessing each new packet.  The value trades off\n\t\tspreading out the timer expiration load with\n\t\tpossibly having to hold state longer.  A value of 0\n\t\tmeans \"process all expired timers with each new\n\t\tpacket\".\n\n- Two new flags control other facets of Bro's connection management,\n  and thus state-holding:\n\n\tpartial_connection_ok: bool\n\t\tWhether Bro should analyze connections for which\n\t\tit doesn't see the beginning, only the middle.\n\t\tThis can be very expensive to do in the face of\n\t\tstealth-scanning, which looks like a bunch of\n\t\tpartial connections.\n\n\t\tNote, the HTTP analyzer has been modified to\n\t\tnow always skip partial connections.  This should\n\t\tinstead be user controllable.\n\n\ttcp_SYN_ack_ok: bool\n\t\tIf true, Bro instantiates connection state when\n\t\tit sees a SYN ack but not the initial SYN (even\n\t\tif partial_connection_ok is false).  The intent\n\t\tbehind this knob (which is not well tested) is\n\t\tto allow you to filter out initial SYNs and only\n\t\treact to SYN acks.  This keeps Bro from holding\n\t\tstate during SYN scans and SYN flooding, except\n\t\tfor when the destination responds.\n\n- Some other miscellaneous thresholds that you can now modify from your\n  policy script:\n\n\theartbeat_interval: count\n\t\tHow often to generate net_stats_update() events.\n\t\tThis timer really isn't needed any more, since\n\t\tyou can use \"schedule\" to achieve the same effect.\n\n\ttcp_storm_thresh: count\n\t\tIf Bro sees this many FINs/RSTs in a row, it\n\t\tflags them as a \"storm\".\n\n\ttcp_storm_interarrival_thresh: interval\n\t\tThe FINs/RSTs must come with this much time or less\n\t\tbetween them.\n\n- The state management for line-oriented applications like HTTP requests\n  has been improved.\n\n- The HTTP analyzer now expands %hex sequences.  If anyone has a Unicode\n  expander to contribute, that'd be terrific.\n\n- The Code Red detection is more robust (fewer false positives).\n\n- A new redefinable variable, skip_services, lists applications that should\n  not be analyzed for purposes of detecting scans.  (Default:  ident)\n  The point of having this (poorly named) hook is so that code-red.bro\n  can add \"http\" to it, to avoid reporting the zillions of Code Red scans\n  that a site can see.\n\n- Bro now matches regular expressions using lazy DFA evaluation.  The upshot\n  of this is (1) it no longer maintains .bro-RE-cache.v1, (2) it starts\n  up fast regardless of whether you've added new regular expressions, (3)\n  you can afford to add lots of regular expressions, and (4) it's actually\n  a bit faster.\n\n- The list of \"hot_ids\" has been expanded with a number of other common\n  root-privileged accounts.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a61 Fri Apr 06 14:51:47 PDT 2001\n\n- An NTP analyzer has been added.  See policy/ntp.bro for a corresponding\n  policy file that detects the newly discovered NTP remote buffer overflow\n  attack.\n\n- example-attacks/ is a new directory that contains trace files of attacks.\n  Currently, there are just two to play with:\n\n\tbro -r example-attacks/ftp-site-exec.trace mt\n\n  will run on a trace of a \"site exec\" overflow attack, and\n\n\tbro -r example-attacks/ntp-attack.trace mt ntp\n\n  will run on an example of the NTP overflow.\n\n- The doc/ directory includes the postscript and HTML versions of the\n  first draft of the Bro manual.\n\n- A new policy file, icmp.bro, has preliminary (and only partially developed)\n  policy for analyzing ICMP.\n\n- The file libpcap.bufsize.patch includes the patch necessary on some systems\n  to increase the maximum libpcap buffer size.\n\n- You can now use anonymous functions in &default expressions, so for\n  example you can do:\n\n\tglobal foo: table[count] of string = {\n\t\t[1] = \"1st\", [2] = \"2nd\", [3] = \"3rd\",\n\t} &default = function(n: count): string { return fmt(\"%dth\", n); };\n\n  and then referring to foo[5] will yield \"5th\".\n\n- There's now a \"for\" statement to iterate over the indices of a table\n  or the members of a set:\n\n\tfor ( i in foo )\n\n  for the above \"foo\" will iterate with i assigned to 1, 2, and 3; *but\n  not in general in that order*.\n\n- The function contains_string() has been removed, and now you can instead\n  use an expression like\n\n\t\"bar\" in \"foobar\"\n\n  which will yield T.\n\n- The scan detection now has a mechanism for attempting to detect SYN flooding\n  backscatter and flagging it as different from a stealth scan.\n\n- New event handlers:\n\n\tnew_connection_contents()\n\t\tlike new_connection(), but reassembles the\n\t\tstream so you can use set_content_files() to\n\t\twrite it to a file\n\n\tudp_session_done()\n\t\tinvoked when a UDP session (which is defined on\n\t\ta per-protocol basis; currently only for NTP)\n\t\tfinishes.\n\n\tntp_message()\n\t\tinvoked for each NTP message\n\n- UDP processing now does accounting for detecting scans.\n\n- UDP processing now tracks numbers of requests/replies for sessions that\n  support that notion.  The connections are annotated by udp_session_done()\n  with \"[m,n]\" for \"m\" requests and \"n\" replies, providing either m or n > 1.\n\n- New variable accessible from policy:\n\n\twatchdog_interval\n\t\thow often the watchdog should check for whether\n\t\tBro is making internal progress\n\n- A bunch of functions no longer have a first argument of the current time;\n  get it instead from network_time() if you need it:\n\n\tauthentication_accepted\n\tauthentication_rejected\n\tconn_weird\n\tconn_weird_addl\n\tflow_weird\n\tnet_weird\n\n- A bunch of functions now return bool rather than int values:\n\n\tset_contents_file\n\tset_login_state\n\tset_record_packets\n\tskip_further_processing\n\n- The variable \"hot_dests\" has been renamed to \"hot_dsts\".\n\n- 111/tcp is now identified as \"portmap\" rather than \"rpc\".\n\n- Connections flagged as hot for some types of characteristics are now\n  annotated with the reason associated with the decision.  (I think a lot\n  more of this is needed.)\n\n- Portmapper dumps are annotated with the results of the mapping.  This\n  will be streamlined in the future.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a48 Wed Sep 13 14:37:30 PDT 2000\n\n- Changes between this release and v0.6 missing :-(\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.6 Wed Jul 21 17:02:50 PDT 1999\n\n- Support for regular expressions added.  You specify lex-style regular\n  expressions between '/'s, for example \"/\\/etc\\/(passwd|shadow)/\" has\n  the type \"pattern\" and matches /etc/passwd or /etc/shadow (the slashes\n  in the pattern need to be escaped or else they'd delimit the end of the\n  pattern).  Pattern-matching is via the \"in\" operator, so for example:\n\n\tif ( filename in /\\/etc\\/(passwd|shadow)/ )\n\t\tsensitive_file_access(filename);\n\n  or\n\n\tconst sensitive_files = /\\/etc\\/(passwd|shadow)/;\n\n\t...\n\n\tif ( filename in sensitive_files )\n\t\tsensitive_file_access(filename);\n\n  Presently the \"in\" operator requires that the entire left-hand side\n  be matched by the pattern.  So, for example, if you want to find the\n  string \"eggdrop\" anywhere inside the string \"line\", you would use\n\n\tif ( line in /.*eggdrop.*/ )\n\n  If you leave off either of the .*'s, then eggdrop will only be matched\n  at the beginning or end of the line.\n\n  In the future, there will be mechanisms for specifying whether you\n  want to match anywhere in a line, or anchored; accordingly, *the above\n  syntax is subject to change*.\n\n  Bro compiles regular expressions into DFAs for fast matching.  This can take\n  quite a bit of time for complicated patterns.  Consequently, it maintains a\n  cache of compiled regular expressions in $HOME/.bro-RE-cache-v1.  You can\n  always safely remove this file; Bro will recreate/repopulate it as needed.\n  It does not clean up unused entries from it, so if you change your patterns\n  frequently, you will accumulated lots of old ones and should delete the\n  file to garbage collect them.\n\n- An rlogin analysis module has been added and the telnet analysis\n  generalized to generic \"login\" analysis, with the following events:\n\n\tlogin_failure(c: connection, user: string, client_user: string,\n\t\t\tpassword: string, line: string)\n\t\tGenerated on a failed attempt to log in.  client_user is\n\t\tthe remote user name, if the login is via the rlogin\n\t\tprotocol.\n\tlogin_success(c: connection, user: string, client_user: string,\n\t\t\t\t\tpassword: string, line: string)\n\t\tGenerated on a successful attempt to log in.\n\n\tlogin_input_line(c: connection, line: string)\n\t\tGenerated per line of input typed by the user.\n\tlogin_output_line(c: connection, line: string)\n\t\tGenerated per line of output generated by the server.\n\n\tlogin_confused(c: connection, msg: string, line: string)\n\t\tGenerated when a login dialog confuses the heuristic\n\t\tanalyzer.  msg is a tag for the state mismatch that\n\t\twas unexpected, line is the corresponding dialog text.\n\n\tlogin_confused_text(c: connection, line: string)\n\t\tOnce a connection is in the confused state, then this\n\t\tis generated for each subsequent line.\n\n\tlogin_terminal(c: connection, terminal: string)\n\t\tGenerated if the terminal type associated with the\n\t\tconnection is seen.\n\n\tlogin_display(c: connection, display: string)\n\t\tGenerated if the display associated with the connection\n\t\tis seen.\n\n\texcessive_line(c: connection)\n\t\tGenerated when the connection has produced an excessively\n\t\tlong line.\n\n  login_input_line() and login_output_line() are very powerful for\n  detecting intrusions, when coupled with regular-expression matching.\n\n  login_terminal() is used to detect backdoors that are triggered\n  by the terminal environment variable.\n\n- An ident analysis module has been added (port 113).  It generates\n  ident_request, ident_reply, and ident_error events.  Port 113 used\n  to be referred to as \"auth\"; now it's referred to as \"ident\".\n\n- A new type of scan detection has been added, which is triggered\n  by a remote host trying a large number of username/password\n  combinations.  See the account_tried() function in scan.bro.\n\n- The default search path for .bro files is now\n\n\t  .:priv-policy:policy:pub-policy:/usr/local/lib/bro\n\n  where priv-policy/ is intended for private policy and pub-policy/\n  for public policy.  The Bro alpha distribution ships with a\n  sample set of pub-policy scripts.\n\n- New built-ins:\n\n\tsystem(s: string): int\n\t\texecutes the given shell command using system()\n\t\tand returns its status.\n\n\tset_contents_file(c: conn_id, direction: count, f: file)\n\t\tcopies connection c's reassembled byte stream in\n\t\teither the originator-to-responder direction (if\n\t\tdirection is CONTENTS_ORIG) or the responder-to-\n\t\toriginator direction (CONTENTS_RESP) to the file f.\n\n\treading_live_traffic(): bool\n\t\treturns true if Bro is running on live traffic (read\n\t\tfrom a network interface), false if it's reading from\n\t\ta save file.\n\n\tmkdir(f: string): bool\n\t\tcreates the given directory, returning true if it\n\t\twas able to, false if not.\n\n\tget_orig_seq(c: conn_id): count;\n\t\treturns the highest sequence number sent by the\n\t\toriginator of connection c.\n\tget_resp_seq(c: conn_id): count;\n\t\tsame for c's responder.\n\n- Additional new events (other than those related to the new analyzers):\n\n\tnew_connection(c: connection)\n\t\tis generated whenever a new connection is seen.\n\n\tpartial_connection(c: connection)\n\t\tis generated whenever a new partial connection (one\n\t\tthat doesn't begin with a SYN handshake) is seen.\n\n\tpm_bad_port(r: connection, bad_p: count)\n\t\tis generated when a portmapper response contains\n\t\ta bad port number.\n\n- Functions, tables and sets can now be assigned.  Assignment is\n  made by reference to the underlying object.\n\n- Bro no longer looks up identifiers using getservbyname() to see if they\n  should be interpreted as port numbers, since this led to portability\n  problems.  Instead, a number of constants are defined in bro.init:\n  bgp, domain, finger, ftp, gopher, http, ident, rlogin, smtp, ssh and telnet,\n\n- Bro now supports an arbitrary number of open files (not bound by\n  the system's limit on file descriptors).\n\n- There's now a finger_reply event to go with finger_request.\n\n- A bunch more RPC service names have been added, thanks to Job de Haas\n  and others.\n\n- A bug has been fixed in the watchdog handling that caused it to\n  sometimes expire after a period of network inactivity.\n\n- The Bro paper in doc/ has been revised (it isn't quite up-to-date,\n  but considerably closer than the USENIX version).\n\n- There has been a large amount of reworking of the internals, both\n  to Bro itself and in the policy scripts.  If you find something you're\n  wondering about, feel free to send me mail asking about it.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.5 Sun Oct  4 00:19:35 PDT 1998\n\n- Added Linux support.\n\n- Major autoconf changes.\n\n- Some tweaks to suppress g++ warnings.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.4 Fri Sep 11 00:08:04 PDT 1998\n\n- The new aux/ directory has some utility programs and scripts.\n  See aux/README for details.\n\n- Documentation (though exceedingly limited) describing the connection\n  log summaries generated by policy/tcp.bro now available in doc/conn-logs.\n\n- The Telnet username recognition code has been heavily reworked and is\n  now significantly more robust.\n\n- A new policy file, policy/scan.bro, detects port and address scanning.\n\n- Bro now detects the \"Land\" attack (a trivial addition to its spoof\n  detection).\n\n- The distribution now comes with BIND 8.1.2.\n\n- A new flavor of \"weird\" event has been added, flow_weird, for unusual\n  events associated with <src IP addr, dst IP addr> flows (i.e., a coarser\n  granularity than TCP or UDP connections).\n\n- Bro now reassembles fragments, checking for overlaps and consistency.\n  Associated with fragments are the following flow_weird's:\n\n\texcessively_large_fragment\n\texcessively_small_fragment\n\tfragment_inconsistency\n\tfragment_overlap\n\tfragment_protocol_inconsistency\n\tfragment_size_inconsistency\n\tfragment_with_DF\n\tincompletely_captured_fragment\n\n- The TCP stream reassembly code was rewritten to share functionality\n  with the new fragment reassembly code.\n\n- If a handler for it is present, then Bro will generate \"packet_contents\"\n  events containing the contents of each packet it receives.  This is just\n  for experimenting with, and, in particular, this event does *not* reflect\n  TCP stream reassembly.\n\n- The handling of \"conn_weird\" events in tcp.bro now has more options.\n  In the weird_action table, WEIRD_LOG_ALWAYS means that the weird event\n  should always be logged; WEIRD_LOG_PER_CONN means that it should be\n  logged once per connection; and WEIRD_LOG_PER_ORIG that it should be\n  launched once per originator IP address.\n\n- The example hot.bro now includes provisions for flagging sensitive\n  inbound and outbound services.\n\n- Bro now limits the number of events processed when draining the event\n  queue after processing a packet.  This makes Bro less prone to packet\n  loss during high-speed scans.\n\n- The line-oriented TCP endpoint class was split into TCP_EndpointLine,\n  which supports the line-oriented functionality, and TCP_NVT (derived\n  from TCP_EndpointLine), which implements the Network Virtual Terminal\n  used by Telnet and FTP.\n\n- The TCP_NVT class now understands the Telnet Environment option.\n\n- Escape sequences are now '\\' followed by 1 or more octal digits,\n  instead of excatly three octal digits (which is error prone).\n\n- If the watchdog timer expires, it now reports the number of events\n  processed in the current batch of packets, as well as other timing\n  information.\n\n- Bro now should not report packet drops that occur after it has begun\n  to exit (these can occur when draining the pending event queue takes\n  a while).\n\n- Bro now detects TCP acknowledgements that occur above a sequence\n  hole, generating an ack_above_hole event.  Nominally, this indicates\n  packet filter drops, but in fact some buggy TCPs manage to do this :-(.\n\n- Fledgling HTTP support added.  An http_request event is generated when\n  a new HTTP request is seen, and http_stats is generated when an HTTP\n  connection terminates, giving (uninteresting to most people) statistics\n  concerning the request(s).  A lot more is needed: parsing persistent\n  connections and HTTP replies, for one.  This is just a start.  A stub\n  for http_reply exists but these events are not presently generated.\n\n- Ported to Linux (thanks to Pascal Bouchareine).\n\n- A bug in to_lower() and to_upper() was fixed.\n\n- The reporting for unexpected FTP connections now more directly\n  identifies the corresponding FTP session.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.3 Fri Feb 13 19:59:39 PST 1998\n\n- Timers are now implemented using calendar queues rather than priority\n  queues (with thanks to Craig Leres).\n\n- The new byte_len() built-in returns the length of a string interpreted\n  as a set of bytes (including any NUL bytes, especially the final one\n  for a typical string).\n\n- The new sub_bytes() built-in extracts a subset of a string interpreted\n  as a set of bytes (i.e., immune to any embedded NULs).\n\n- Fixed bad interaction with the latest version of libpcap that on some\n  BPF systems would cause Bro to exit any time a little bit of time went by\n  without any traffic matching its filter.\n\n- A bug with constant-folding of the ?: operator has been fixed.\n\n- A new \"conn_stats\" event delivers statistical analysis (number of packets\n  transmitted, retransmitted, out-of-order, replicated) of each connection.\n  If you define a handler for it, then *no* other TCP processing is done.\n  This was added for off-line analysis of traces with large numbers of\n  connections in them.\n\n- Some minor portability tweaks.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.2 Sat Oct 25 11:22:37 PDT 1997\n\n- Added autoconf support, thanks to Scott Denton.\n\n- Ported to FreeBSD, Solaris.\n\n- Fixed a bug in which partial connections were ignored even for\n  protocols (e.g., FTP) that can make use of partial dialogs.\n\n- Included BIND version 8 sources directly in the distribution.\n\n- Better usage() information (again thanks to Scott), -h and -v flags.\n\n- README, CHANGES files created.\n\n\n", "2.3-392\n", "//\n// DNP3 was initially used over serial links; it defined its own application\n// layer, transport layer, and data link layer. This hierarchy cannot be\n// mapped to the TCP/IP stack directly. As a result, all three DNP3 layers\n// are packed together as a single application layer payload over the TCP\n// layer. Each DNP3 packet in the application layer may look like this DNP3\n// Packet:\n//\n//    DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer\n//\n//    (This hierarchy can be viewed in the Wireshark visually.)\n//\n// === Background on DNP3\n//\n// 1. Basic structure of DNP3 Protocol over serial links. This information\n//    can be found in detail in\n//\n//        DNP3 Specification Volume 2, Part 1 Basic, Application Layer\n//        DNP3 Specification Volume 4, Data Link Layer\n//\n//    Traditionally, the DNP3 Application Layer in serial links contains a\n//    \"DNP3 Application Layer Fragment\". The data that is parsed by the end\n//    device and then executed. As the \"DNP3 Application Layer Fragment\" can\n//    be long (>255 bytes), it may be trunkcated and carried in different\n//    DNP3 Application Layer of more than one DNP3 packets.\n//\n//    So we may find a long DNP3 Application Layer Fragment to be transmitted in the following format\n//\n//        DNP3 Packet #1 : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #1\n//        DNP3 Packet #2 : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #2\n//        ....\n//        DNP3 Packet #n : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #n\n//\n//    So to get the whole DNP3 application layer fragment, we concatenate\n//    each DNP3 Application Layer Data into a logic DNP3 Application Layer\n//    Fragment:\n//\n//       DNP3 Application Layer #1 + DNP3 Application Layer #2 + ... + DNP3 Application Layer #n\n//\n// 2. Packing DNP3 Network Packet into TCP/IP stack\n//\n// We will call the original DNP3 Link Layer, Transport Layer and Application\n// Layer used in serial link as Pseudo Link Layer, Pseudo Transport Layer and\n// Pseudo Application Layer.\n//\n// For a long DNP3 application layer fragment, we may find it tramistted\n// over IP network in the following format:\n//\n//     Network Packet #1 : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #1\n//     Network Packet #2 : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #2\n//     ....\n//     Network Packet #n : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #n\n//\n// === Challenges of Writing DNP3 Analyzer on Binpac ===\n//\n// The detailed structure of the DNP3 Link Layer is:\n//\n//     0x05 0x64 Len Ctrl Dest_LSB Dest_MSB Src_LSB Src_MSB CRC_LSB CRC_MSB\n//\n//     Each field is a byte; LSB: least significant byte; MSB: most significatn byte.\n//\n//     \"Len\" indicates the length of the byte stream right after this field\n//     (excluding CRC fields) in the current DNP3 packet.\n//\n// Since \"Len\" is of size one byte, the largest length it can represent is\n// 255 bytes. The larget DNP3 Application Layer size is \"255 - 5 + size of\n// all CRC fields\". \"minus 5\" is coming from the 5 bytes after \"Len\" field in\n// the DNP3 Link Layer, i.e. Ctrl Dest_LSB Dest_MSB Src_LSB Src_MSB Hence,\n// the largest size of a DNP3 Packet (DNP3 Data Link Layer : DNP3 Transport\n// Layer : DNP3 Application Layer) can only be 292 bytes.\n//\n// The \"Len\" field indicates the length of of a single chunk of DNP3 Psuedo\n// Application Layer data instead of the whole DNP3 Application Layer\n// Fragment. However, we can not know the whole length of the DNP3\n// Application Layer Fragment (which Binpac would normally need) until all\n// chunks of Pseudo Application Layer Data are received.\n//\n// We hence exploit the internal flow_buffer class used in Binpac to buffer\n// the application layer data until all chunk are received, which does\n// require a bit of internal knowledge of the generated code.\n//\n// The binpac analyzer parses the DNP3 Application Layer Fragment. However,\n// we manually add the original Pseudo Link Layer data as an additional\n// header before the DNP3 Application Fragment. This helps to know how many\n// bytes are in the current chunk of DNP3 application layer data (not the\n// whole Application Layer Fragment).\n//\n// Graphically, the procedure is:\n//\n// DNP3 Packet :  DNP3 Pseudo Data Link Layer : DNP3 Pseudo Transport Layer : DNP3 Pseudo Application Layer\n//                                   ||                                    ||\n//                                   || (length field)                     || (original paylad byte stream)\n//                                   \\/                                    \\/\n//                DNP3 Additional Header              :                  Reassembled DNP3 Pseudo Application Layer Data\n//                                                   ||\n//                                                   \\/\n//                                            Binpac DNP3 Analyzer\n\n#include \"DNP3.h\"\n#include \"events.bif.h\"\n\nusing namespace analyzer::dnp3;\n\nconst unsigned int PSEUDO_LENGTH_INDEX = 2;\t\t// index of len field of DNP3 Pseudo Link Layer\nconst unsigned int PSEUDO_CONTROL_FIELD_INDEX = 3;\t// index of ctrl field of DNP3 Pseudo Link Layer\nconst unsigned int PSEUDO_TRANSPORT_INDEX = 10;\t\t// index of DNP3 Pseudo Transport Layer\nconst unsigned int PSEUDO_APP_LAYER_INDEX = 11;\t\t// index of first DNP3 app-layer byte.\nconst unsigned int PSEUDO_TRANSPORT_LEN = 1;\t\t// length of DNP3 Transport Layer\nconst unsigned int PSEUDO_LINK_LAYER_LEN = 8;\t\t// length of DNP3 Pseudo Link Layer\n\nbool DNP3_Base::crc_table_initialized = false;\nunsigned int DNP3_Base::crc_table[256];\n\n\nDNP3_Base::DNP3_Base(analyzer::Analyzer* arg_analyzer)\n\t{\n\tanalyzer = arg_analyzer;\n\tinterp = new binpac::DNP3::DNP3_Conn(analyzer);\n\n\tClearEndpointState(true);\n\tClearEndpointState(false);\n\n\tif ( ! crc_table_initialized )\n\t\tPrecomputeCRCTable();\n\t}\n\nDNP3_Base::~DNP3_Base()\n\t{\n\tdelete interp;\n\t}\n\nbool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n\t{\n\tEndpoint* endp = orig ? &orig_state : &resp_state;\n\n\twhile ( len )\n\t\t{\n\t\tif ( endp->in_hdr )\n\t\t\t{\n\t\t\t// We're parsing the DNP3 header and link layer, get that in full.\n\t\t\tif ( ! AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len) )\n\t\t\t\treturn true;\n\n\t\t\t// The first two bytes must always be 0x0564.\n\t\t\tif( endp->buffer[0] != 0x05 || endp->buffer[1] != 0x64 )\n\t\t\t\t{\n\t\t\t\tanalyzer->Weird(\"dnp3_header_lacks_magic\");\n\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t// Make sure header checksum is correct.\n\t\t\tif ( ! CheckCRC(PSEUDO_LINK_LAYER_LEN, endp->buffer, endp->buffer + PSEUDO_LINK_LAYER_LEN, \"header\") )\n\t\t\t\t{\n\t\t\t\tanalyzer->ProtocolViolation(\"broken_checksum\");\n\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t// If the checksum works out, we're pretty certainly DNP3.\n\t\t\tanalyzer->ProtocolConfirmation();\n\n\t\t\t// DNP3 packets without transport and application\n\t\t\t// layers can happen, we ignore them.\n\t\t\tif ( (endp->buffer[PSEUDO_LENGTH_INDEX] + 3) == (char)PSEUDO_LINK_LAYER_LEN  )\n\t\t\t\t{\n\t\t\t\tClearEndpointState(orig);\n\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t// Double check the direction in case the first\n\t\t\t// received packet is a response.\n\t\t\tu_char ctrl = endp->buffer[PSEUDO_CONTROL_FIELD_INDEX];\n\n\t\t\tif ( orig != (bool)(ctrl & 0x80) )\n\t\t\t\tanalyzer->Weird(\"dnp3_unexpected_flow_direction\");\n\n\t\t\t// Update state.\n\t\t\tendp->pkt_length = endp->buffer[PSEUDO_LENGTH_INDEX];\n\t\t\tendp->tpflags = endp->buffer[PSEUDO_TRANSPORT_INDEX];\n\t\t\tendp->in_hdr = false; // Now parsing application layer.\n\n\t\t\t// For the first packet, we submit the header to\n\t\t\t// BinPAC.\n\t\t\tif ( ++endp->pkt_cnt == 1 )\n\t\t\t\tinterp->NewData(orig, endp->buffer, endp->buffer + PSEUDO_LINK_LAYER_LEN);\n\t\t\t}\n\n\t\tif ( ! endp->in_hdr )\n\t\t\t{\n\t\t\tassert(endp->pkt_length);\n\n\t\t\t// We're parsing the DNP3 application layer, get that\n\t\t\t// in full now as well. We calculate the number of\n\t\t\t// raw bytes the application layer consists of from\n\t\t\t// the packet length by determining how much 16-byte\n\t\t\t// chunks fit in there, and then add 2 bytes CRC for\n\t\t\t// each.\n\t\t\tint n = PSEUDO_APP_LAYER_INDEX + (endp->pkt_length - 5) + ((endp->pkt_length - 5) / 16) * 2\n\t\t\t\t\t+ 2 * ( ((endp->pkt_length - 5) % 16 == 0) ? 0 : 1) - 1 ;\n\n\t\t\tif ( ! AddToBuffer(endp, n, &data, &len) )\n\t\t\t\treturn true;\n\n\t\t\t// Parse the the application layer data.\n\t\t\tif ( ! ParseAppLayer(endp) )\n\t\t\t\treturn false;\n\n\t\t\t// Done with this packet, prepare for next.\n\t\t\tendp->buffer_len = 0;\n\t\t\tendp->in_hdr = true;\n\t\t\t}\n\t\t}\n\n\treturn true;\n\t}\n\nbool DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)\n\t{\n\tif ( ! target_len )\n\t\treturn true;\n\n\tint to_copy = min(*len, target_len - endp->buffer_len);\n\n\tmemcpy(endp->buffer + endp->buffer_len, *data, to_copy);\n\t*data += to_copy;\n\t*len -= to_copy;\n\tendp->buffer_len += to_copy;\n\n\treturn endp->buffer_len == target_len;\n\t}\n\nbool DNP3_Base::ParseAppLayer(Endpoint* endp)\n\t{\n\tbool orig = (endp == &orig_state);\n\tbinpac::DNP3::DNP3_Flow* flow = orig ? interp->upflow() : interp->downflow();\n\n\tu_char* data = endp->buffer + PSEUDO_TRANSPORT_INDEX; // The transport layer byte counts as app-layer it seems.\n\tint len = endp->pkt_length - 5;\n\n\t// DNP3 Packet :  DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer\n\t// DNP3 Serial Transport Layer data is always 1 byte.\n\t// Get FIN FIR seq field in transport header.\n\t// FIR indicate whether the following DNP3 Serial Application Layer is first chunk of bytes or not.\n\t// FIN indicate whether the following DNP3 Serial Application Layer is last chunk of bytes or not.\n\n\tint is_first = (endp->tpflags & 0x40) >> 6; // Initial chunk of data in this packet.\n\tint is_last = (endp->tpflags & 0x80) >> 7; // Last chunk of data in this packet.\n\n\tint transport = PSEUDO_TRANSPORT_LEN;\n\n\tint i = 0;\n\twhile ( len > 0 )\n\t\t{\n\t\tint n = min(len, 16);\n\n\t\t// Make sure chunk has a correct checksum.\n\t\tif ( ! CheckCRC(n, data, data + n, \"app_chunk\") )\n\t\t\treturn false;\n\n\t\t// Pass on to BinPAC.\n\t\tassert(data + n < endp->buffer + endp->buffer_len);\n\t\tflow->flow_buffer()->BufferData(data + transport, data + n);\n\t\ttransport = 0;\n\n\t\tdata += n + 2;\n\t\tlen -= n;\n\t\t}\n\n\tif ( is_first )\n\t\tendp->encountered_first_chunk = true;\n\n\tif ( ! is_first && ! endp->encountered_first_chunk )\n\t\t{\n\t\t// We lost the first chunk.\n\t\tanalyzer->Weird(\"dnp3_first_application_layer_chunk_missing\");\n\t\treturn false;\n\t\t}\n\n\tif ( is_last )\n\t\t{\n\t\tflow->flow_buffer()->FinishBuffer();\n\t\tflow->FlowEOF();\n\t\tClearEndpointState(orig);\n\t\t}\n\n\treturn true;\n\t}\n\nvoid DNP3_Base::ClearEndpointState(bool orig)\n\t{\n\tEndpoint* endp = orig ? &orig_state : &resp_state;\n\tbinpac::DNP3::DNP3_Flow* flow = orig ? interp->upflow() : interp->downflow();\n\n\tendp->in_hdr = true;\n\tendp->encountered_first_chunk = false;\n\tendp->buffer_len = 0;\n\tendp->pkt_length = 0;\n\tendp->tpflags = 0;\n\tendp->pkt_cnt = 0;\n\t}\n\nbool DNP3_Base::CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where)\n\t{\n\tunsigned int crc = CalcCRC(len, data);\n\n\tif ( crc16[0] == (crc & 0xff) && crc16[1] == (crc & 0xff00) >> 8 )\n\t\treturn true;\n\n\tanalyzer->Weird(fmt(\"dnp3_corrupt_%s_checksum\", where));\n\treturn false;\n\t}\n\nvoid DNP3_Base::PrecomputeCRCTable()\n\t{\n\tfor( unsigned int i = 0; i < 256; i++)\n\t\t{\n\t\tunsigned int crc = i;\n\n\t\tfor ( unsigned int j = 0; j < 8; ++j )\n\t\t\t{\n\t\t\tif ( crc & 0x0001 )\n\t\t\t\tcrc = (crc >> 1) ^ 0xA6BC; // Generating polynomial.\n\t\t\telse\n\t\t\t\tcrc >>= 1;\n\t\t\t}\n\n\t\tcrc_table[i] = crc;\n\t\t}\n\t}\n\nunsigned int DNP3_Base::CalcCRC(int len, const u_char* data)\n\t{\n\tunsigned int crc = 0x0000;\n\n\tfor ( int i = 0; i < len; i++ )\n\t\t{\n\t\tunsigned int index = (crc ^ data[i]) & 0xFF;\n\t\tcrc = crc_table[index] ^ (crc >> 8);\n\t\t}\n\n\treturn ~crc & 0xFFFF;\n\t}\n\nDNP3_TCP_Analyzer::DNP3_TCP_Analyzer(Connection* c)\n\t: DNP3_Base(this), TCP_ApplicationAnalyzer(\"DNP3_TCP\", c)\n\t{\n\t}\n\nDNP3_TCP_Analyzer::~DNP3_TCP_Analyzer()\n\t{\n\t}\n\nvoid DNP3_TCP_Analyzer::Done()\n\t{\n\tTCP_ApplicationAnalyzer::Done();\n\n\tInterpreter()->FlowEOF(true);\n\tInterpreter()->FlowEOF(false);\n\t}\n\nvoid DNP3_TCP_Analyzer::DeliverStream(int len, const u_char* data, bool orig)\n\t{\n\tTCP_ApplicationAnalyzer::DeliverStream(len, data, orig);\n\n\ttry\n\t\t{\n\t\tif ( ! ProcessData(len, data, orig) )\n\t\t\tSetSkip(1);\n\t\t}\n\n\tcatch ( const binpac::Exception& e )\n\t\t{\n\t\tSetSkip(1);\n\t\tthrow;\n\t\t}\n\t}\n\nvoid DNP3_TCP_Analyzer::Undelivered(uint64 seq, int len, bool orig)\n\t{\n\tTCP_ApplicationAnalyzer::Undelivered(seq, len, orig);\n\tInterpreter()->NewGap(orig, len);\n\t}\n\nvoid DNP3_TCP_Analyzer::EndpointEOF(bool is_orig)\n\t{\n\tTCP_ApplicationAnalyzer::EndpointEOF(is_orig);\n\tInterpreter()->FlowEOF(is_orig);\n\t}\n\nDNP3_UDP_Analyzer::DNP3_UDP_Analyzer(Connection* c)\n\t: DNP3_Base(this), Analyzer(\"DNP3_UDP\", c)\n\t{\n\t}\n\nDNP3_UDP_Analyzer::~DNP3_UDP_Analyzer()\n\t{\n\t}\n\nvoid DNP3_UDP_Analyzer::DeliverPacket(int len, const u_char* data, bool orig, uint64 seq, const IP_Hdr* ip, int caplen)\n\t{\n\tAnalyzer::DeliverPacket(len, data, orig, seq, ip, caplen);\n\n\ttry\n\t\t{\n\t\tif ( ! ProcessData(len, data, orig) )\n\t\t\tSetSkip(1);\n\t\t}\n\n\tcatch ( const binpac::Exception& e )\n\t\t{\n\t\tSetSkip(1);\n\t\tthrow;\n\t\t}\n\t}\n\n", "\n#ifndef ANALYZER_PROTOCOL_DNP3_DNP3_H\n#define ANALYZER_PROTOCOL_DNP3_DNP3_H\n\n#include \"analyzer/protocol/tcp/TCP.h\"\n#include \"analyzer/protocol/udp/UDP.h\"\n\n#include \"dnp3_pac.h\"\n\nnamespace analyzer { namespace dnp3 {\n\nclass DNP3_Base {\npublic:\n\tDNP3_Base(analyzer::Analyzer* analyzer);\n\tvirtual ~DNP3_Base();\n\n\tbinpac::DNP3::DNP3_Conn* Interpreter()\t{ return interp; }\n\nprotected:\n\tstatic const int MAX_BUFFER_SIZE = 300;\n\n\tstruct Endpoint\t{\n\t\tu_char buffer[MAX_BUFFER_SIZE];\n\t\tint buffer_len;\n\t\tbool in_hdr;\n\t\tint tpflags;\n\t\tint pkt_length;\n\t\tint pkt_cnt;\n\t\tbool encountered_first_chunk;\n\t\t};\n\n\tbool ProcessData(int len, const u_char* data, bool orig);\n\tvoid ClearEndpointState(bool orig);\n\tbool AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);\n\tbool ParseAppLayer(Endpoint* endp);\n\tbool CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where);\n\tunsigned int CalcCRC(int len, const u_char* data);\n\n\tstatic void PrecomputeCRCTable();\n\n\tstatic bool crc_table_initialized;\n\tstatic unsigned int crc_table[256];\n\n\tanalyzer::Analyzer* analyzer;\n\tbinpac::DNP3::DNP3_Conn* interp;\n\n\tEndpoint orig_state;\n\tEndpoint resp_state;\n};\n\nclass DNP3_TCP_Analyzer : public DNP3_Base, public tcp::TCP_ApplicationAnalyzer {\npublic:\n\tDNP3_TCP_Analyzer(Connection* conn);\n\tvirtual ~DNP3_TCP_Analyzer();\n\n\tvirtual void Done();\n\tvirtual void DeliverStream(int len, const u_char* data, bool orig);\n\tvirtual void Undelivered(uint64 seq, int len, bool orig);\n\tvirtual void EndpointEOF(bool is_orig);\n\n\tstatic Analyzer* Instantiate(Connection* conn)\n\t\t{ return new DNP3_TCP_Analyzer(conn); }\n};\n\nclass DNP3_UDP_Analyzer : public DNP3_Base, public analyzer::Analyzer {\npublic:\n\tDNP3_UDP_Analyzer(Connection* conn);\n\tvirtual ~DNP3_UDP_Analyzer();\n\n\tvirtual void DeliverPacket(int len, const u_char* data, bool orig,\n                    uint64 seq, const IP_Hdr* ip, int caplen);\n\n\tstatic analyzer::Analyzer* Instantiate(Connection* conn)\n\t\t{ return new DNP3_UDP_Analyzer(conn); }\n};\n\n\n} } // namespace analyzer::*\n\n#endif\n"], "fixing_code": ["\n2.3-396 | 2015-01-23 10:49:15 -0600\n\n  * DNP3: fix reachable assertion and buffer over-read/overflow.\n    CVE number pending. (Travis Emmert, Jon Siwek)\n\n  * Update binpac: Fix potential out-of-bounds memory reads in generated\n    code. CVE-2014-9586. (John Villamil and Chris Rohlf - Yahoo\n    Paranoids, Jon Siwek)\n\n  * Fixing (harmless) Coverity warning. (Robin Sommer)\n\n2.3-392 | 2015-01-15 09:44:15 -0800\n\n  * Small changes to EC curve names in a newer draft. (Johanna Amann)\n\n2.3-390 | 2015-01-14 13:27:34 -0800\n\n  * Updating MySQL analyses. (Vlad Grigorescu)\n     - Use a boolean success instead of a result string.\n     - Change the affected_rows response detail string to a \"rows\" count.\n     - Fix the state tracking to log incomplete command.\n\n  * Extend DNP3 to support communication over UDP. (Hui Lin)\n\n  * Fix a bug in DNP3 determining the length of an object in some\n    cases. (Hui Lin)\n\n2.3-376 | 2015-01-12 09:38:10 -0600\n\n  * Improve documentation for connection_established event. (Jon Siwek)\n\n2.3-375 | 2015-01-08 13:10:09 -0600\n\n  * Increase minimum required CMake version to 2.8. (Jon Siwek)\n\n2.3-374 | 2015-01-07 10:03:17 -0600\n\n  * Improve documentation of the Intelligence Framework. (Daniel Thayer)\n\n2.3-371 | 2015-01-06 09:58:09 -0600\n\n  * Update/improve file mime type identification. (Seth Hall)\n\n     - Change to the default BOF buffer size to 3000 (was 1024).\n\n     - Reorganized MS signatures into a separate file.\n\n     - Remove all of the x-c detections.  Nearly all false positives.\n\n     - Improve TAR detections, removing old, back up TAR detections.\n\n     - Remove one of the x-elc detections that was too loose\n       and caused many false positives.\n\n     - Improved lots of the signatures and added new ones. (Seth Hall)\n\n  * Add support for file reassembly in the file analysis framework\n    (Seth Hall, Jon Siwek).\n\n     - The reassembly behavior can be modified per-file by enabling or\n       disabling the reassembler and/or modifying the size of the\n       reassembly buffer.\n\n     - Changed the file extraction analyzer to use stream-wise input to\n       avoid issues with the chunk-wise approach not immediately\n       triggering the file_new event due to mime-type detection delay.\n       Before, early chunks frequently ended up lost.  Extraction also\n       will now explicitly NUL-fill gaps in the file instead of\n       implicitly relying on pwrite to do it.\n\n2.3-349 | 2015-01-05 15:21:13 -0600\n\n  * Fix race condition in unified2 file analyzer startup. (Jon siwek)\n\n2.3-348 | 2014-12-31 09:19:34 -0800\n\n  * Changing Makefile's test-all to run test-all for broctl, which now\n    executes trace-summary tests as well. (Robin Sommer)\n\n2.3-345 | 2014-12-31 09:06:15 -0800\n\n  * Correct a typo in the Notice framework doc. (Daniel Thayer)\n\n2.3-343 | 2014-12-12 12:43:46 -0800\n\n  * Fix PIA packet replay to deliver copy of IP header. This prevented\n    one from writing a packet-wise analyzer that needs access to IP\n    headers and can be attached to a connection via signature match.\n    Addresses BIT-1298 (Jon Siwek)\n\n2.3-338 | 2014-12-08 13:56:19 -0800\n\n  * Add man page for Bro. (Ra\u00fal Benencia)\n\n  * Updating doc baselines. (Robin Sommer)\n\n2.3-334 | 2014-12-03 14:22:07 -0800\n\n  * Fix compound assignment to require proper L-value. Addresses\n    BIT-1295. (Jon Siwek)\n\n2.3-332 | 2014-12-03 14:14:11 -0800\n\n  * Make using local IDs in @if directives an error. Addresses\n    BIT-1296. (Jon Siwek)\n\n2.3-330 | 2014-12-03 14:10:39 -0800\n\n  * Fix some \"make doc\" warnings and update some doc tests. (Daniel\n    Thayer)\n\n2.3-328 | 2014-12-02 08:13:10 -0500\n\n  * Update windows-version-detection.bro to add support for \n    Windows 10. (Michal Purzynski)\n\n2.3-326 | 2014-12-01 12:10:27 -0600\n\n  * BIFScanner: fix invalid characters in generated preprocessor macros.\n    (Hilko Bengen)\n\n  * BIT-1294: fix exec.bro from mutating Input::end_of_data event\n    parameters. (Johanna Amann)\n\n  * Add/invoke \"distclean\" for testing directories. (Ra\u00fal Benencia)\n\n  * Delete prebuilt python bytecode files from git. (Jon Siwek)\n\n  * Add Windows detection based on CryptoAPI HTTP traffic as a software\n    framework policy script. (Vlad Grigorescu)\n\n2.3-316 | 2014-11-25 17:35:06 -0800\n\n  * Make the SSL analyzer skip further processing once encountering\n    situations which are very probably non-recoverable. (Johanna\n    Amann)\n\n2.3-313 | 2014-11-25 14:27:07 -0800\n\n  * Make SSL v2 protocol tests more strict. In its former state they\n    triggered on http traffic over port 443 sometimes. Found by Micha\u0142\n    Purzy\u0144ski. (Johanna Amann)\n\n  * Fix X509 analyzer to correctly return ECDSA as the key_type for\n    ECDSA certs. Bug found by Micha\u0142 Purzy\u0144ski. (Johanna Amann)\n\n2.3-310 | 2014-11-19 10:56:59 -0600\n\n  * Disable verbose bison output. (Jon Siwek)\n\n2.3-309 | 2014-11-18 12:17:53 -0800\n\n  * New decompose_uri() function in base/utils/urls that splits a URI\n    into its pieces. (Anthony Kasza).\n\n2.3-305 | 2014-11-18 11:09:04 -0800\n\n  * Improve coercion of &default expressions. Addresses BIT-1288. (Jon\n    Siwek)\n\n2.3-303 | 2014-11-18 10:53:04 -0800\n\n  * For DH key exchanges, use p as the parameter for weak key\n    exchanges. (Johanna Amann)\n\n2.3-301 | 2014-11-11 13:47:27 -0800\n\n  * Add builtin function enum_to_int() that converts an enum into a\n    integer. (Christian Struck)\n\n2.3-297 | 2014-11-11 11:50:47 -0800\n\n  * Removing method from SSL analyzer that's no longer used. (Robin\n    Sommer)\n\n2.3-296 | 2014-11-11 11:42:38 -0800\n\n  * A new analyzer parsing the MySQL wire protocol. Activity gets\n    logged into mysql.log. Supports protocol versions 9 and 10. (Vlad\n    Grigorescu)\n\n2.3-280 | 2014-11-05 09:46:33 -0500\n\n  * Add Windows detection based on CryptoAPI HTTP traffic as a \n    software framework policy script. (Vlad Grigorescu)\n\n2.3-278 | 2014-11-03 18:55:18 -0800\n\n  * Add new curves from draft-ietf-tls-negotiated-ff-dhe to SSL\n    analysis. (Johanna Amann)\n\n2.3-274 | 2014-10-31 17:45:25 -0700\n\n  * Adding call to new binpac::init() function. (Robin Sommer)\n\n2.3-272 | 2014-10-31 16:29:42 -0700\n\n  * Fix segfault if when statement's RHS is unitialized. Addresses\n    BIT-1176. (Jon Siwek)\n\n  * Fix checking vector indices via \"in\". Addresses BIT-1280.  (Jon\n    Siwek)\n\n2.3-268 | 2014-10-31 12:12:22 -0500\n\n  * BIT-1283: Fix crash when using &encrypt. (Jon Siwek)\n\n2.3-267 | 2014-10-31 10:35:02 -0500\n\n  * BIT-1284: Allow arbitrary when statement timeout expressions\n    (Jon Siwek)\n\n2.3-266 | 2014-10-31 09:21:28 -0500\n\n  * BIT-1166: Add configure options to fine tune local state dirs used\n    by BroControl. (Jon Siwek)\n\n2.3-264 | 2014-10-30 13:25:57 -0500\n\n  * Fix some minor Coverity Scan complaints. (Jon Siwek)\n\n2.3-263 | 2014-10-28 15:09:10 -0500\n\n  * Fix checking of fwrite return values (Johanna Amann)\n\n2.3-260 | 2014-10-27 12:54:17 -0500\n\n  * Fix errors/warnings when compiling with -std=c++11 (Jon Siwek)\n\n2.3-259 | 2014-10-27 10:04:04 -0500\n\n  * Documentation fixes. (Vicente Jimenez Aguilar and Stefano Azzalini)\n\n2.3-256 | 2014-10-24 15:33:45 -0700\n\n  * Adding missing test baseline. (Robin Sommer)\n\n2.3-255 | 2014-10-24 13:39:44 -0700\n\n  * Fixing unstable active-http test. (Robin Sommer)\n\n2.3-254 | 2014-10-24 11:40:51 -0700\n\n  * Fix active-http.bro to deal reliably with empty server responses,\n    which will now be passed back as empty files. (Christian Struck)\n\n2.3-248 | 2014-10-23 14:20:59 -0700\n\n  * Change order in which a plugin's scripts are loaded at startup.\n    (Robin Sommer)\n\n2.3-247 | 2014-10-21 13:42:38 -0700\n\n  * Updates to the SSL analyzer. (Johanna Amann)\n\n        * Mark everything below 2048 bit as a weak key.\n\n        * Fix notice suppression.\n\n        * Add information about server-chosen protocol to ssl.log, if\n          provided by application_layer_next_protocol.\n\n        * Add boolean flag to ssl.log signaling if a session was\n          resumed. Remove the (usually not really that useful) session\n          ID that the client sent.\n\n2.3-240 | 2014-10-21 13:36:33 -0700\n\n  * Fix Coverity-reported issues in DNP3 analyzer. (Seth Hall)\n\n2.3-238 | 2014-10-16 06:51:49 -0700\n\n  * Fix multipart HTTP/MIME entity file analysis so that (1) singular\n    CR or LF characters in multipart body content are no longer\n    converted to a full CRLF (thus corrupting the file) and (2) it\n    also no longer considers the CRLF before the multipart boundary as\n    part of the content. Addresses BIT-1235. (Jon Siwek)\n\n2.3-235 | 2014-10-15 10:20:47 -0500\n\n  * BIT-1273: Add error message for bad enum declaration syntax.\n    (Jon Siwek)\n\n2.3-234 | 2014-10-14 14:42:09 -0500\n\n  * Documentation fixes. (Steve Smoot)\n\n2.3-233 | 2014-10-09 16:00:27 -0500\n\n  * Change find-bro-logs unit test to follow symlinks. (Jon Siwek)\n\n  * Add error checks and messages to a test script (Daniel Thayer)\n\n2.3-230 | 2014-10-08 08:15:17 -0700\n\n  * Further baseline normalization for plugin test portability. (Robin\n    Sommer)\n\n2.3-229 | 2014-10-07 20:18:11 -0700\n\n  * Fix for test portability. (Robin Sommer)\n\n2.3-228 | 2014-10-07 15:32:37 -0700\n\n  * Include plugin unit tests into the top-level btest configuration. (Robin Sommer)\n\n  * Switching the prefix separator for packet source/dumper plugins\n    once more, now to \"::\". Addresses BIT-1267. (Robin Sommer)\n\n  * Fix for allowing a packet source/dumper plugin to support multiple\n    prefixes with a colon. (Robin Sommer)\n\n2.3-225 | 2014-10-07 15:13:35 -0700\n\n  * Updating plugin documentation. (Robin Sommer)\n\n2.3-224 | 2014-10-07 14:32:17 -0700\n\n  * Improved the log file reference documentation. (Jeannette Dopheide\n    and Daniel Thayer)\n\n  * Improves shockwave flash file signatures. (Seth Hall)\n\n     - This moves the signatures out of the libmagic imported signatures\n       and into our own general.sig.\n\n     - Expand the detection to LZMA compressed flash files.\n\n  * Add new script language reference documentation on operators,\n    statements, and directives.  Also improved the documentation on\n    types and attributes by splitting them into two docs, and\n    providing more examples and adding a chart on the top of each page\n    with links to each type and attribute for easier access to the\n    information. (Daniel Thayer)\n\n  * Split the types and attributes reference doc into two docs.\n    (Daniel Thayer)\n\n2.3-208 | 2014-10-03 09:38:52 -0500\n\n  * BIT-1268: Fix uninitialized router_list argument in\n    dhcp_offer/dhcp_ack. (Jon Siwek)\n\n2.3-207 | 2014-10-02 16:39:17 -0700\n\n  * Updating plugin docs. (Robin Sommer)\n\n  * Fix packet sources being treated as idle when a packet is\n    available. Addresses BIT-1266. (Jon Siwek)\n\n  * Fix regression causing the main loop to spin more frequently.\n    Addresses BIT-1266. (Jon Siwek)\n\n2.3-203 | 2014-09-29 20:06:54 -0700\n\n  * Fix to use length parameter in DNP3 time conversion correctly now.\n    (Robin Sommer)\n\n2.3-202 | 2014-09-29 17:05:18 -0700\n\n  * New SSL extension type from IANA and a few other SSL const\n    changes. (Johanna Amann)\n\n  * Make unexpected pipe errors fatal as precaution. Addresses\n    BIT-1260. (Jon Siwek)\n\n  * Adding a function for DNP3 to translate the timestamp format. (Hui\n    Lin)\n\n2.3-197 | 2014-09-29 10:42:01 -0500\n\n  * Fix possible seg fault in TCP reassembler. (Jon Siwek)\n\n2.3-196 | 2014-09-25 17:53:27 -0700\n\n  * Changing prefix for packet sources/dumper from ':' to '%'.\n    Addresses BIT-1249. (Robin Sommer)\n\n  * Remove timeouts from remote communication loop. The select() now\n    blocks until there's work to do instead of relying on a small\n    timeout value which can cause unproductive use of cpu cycles. (Jon\n    Siwek)\n\n  * Improve error message when failing to activate a plugin. Also fix\n    a unit test helper script that checks plugin availability. (Jon\n    Siwek)\n\n2.3-183 | 2014-09-24 10:08:04 -0500\n\n  * Add a \"node\" field to Intel::Seen struture and intel.log to\n    indicate which node discovered a hit on an intel item. (Seth Hall)\n\n  * BIT-1261: Fixes to plugin quick start doc. (Jon Siwek)\n\n2.3-180 | 2014-09-22 12:52:41 -0500\n\n  * BIT-1259: Fix issue w/ duplicate TCP reassembly deliveries.\n    (Jon Siwek)\n\n2.3-178 | 2014-09-18 14:29:46 -0500\n\n  * BIT-1256: Fix file analysis events from coming after bro_done().\n    (Jon Siwek)\n\n2.3-177 | 2014-09-17 09:41:27 -0500\n\n  * Documentation fixes. (Chris Mavrakis)\n\n2.3-174 | 2014-09-17 09:37:09 -0500\n\n  * Fixed some \"make doc\" warnings caused by reST formatting\n    (Daniel Thayer).\n\n2.3-172 | 2014-09-15 13:38:52 -0500\n\n  * Remove unneeded allocations for HTTP messages. (Jon Siwek)\n\n2.3-171 | 2014-09-15 11:14:57 -0500\n\n  * Fix a compile error on systems without pcap-int.h. (Jon Siwek)\n\n2.3-170 | 2014-09-12 19:28:01 -0700\n\n  * Fix incorrect data delivery skips after gap in HTTP Content-Range.\n    Addresses BIT-1247. (Jon Siwek)\n\n  * Fix file analysis placement of data after gap in HTTP\n    Content-Range. Addresses BIT-1248. (Jon Siwek)\n\n  * Fix issue w/ TCP reassembler not delivering some segments.\n    Addresses BIT-1246. (Jon Siwek)\n\n  * Fix MIME entity file data/gap ordering and raise http_entity_data\n    in line with data arrival. Addresses BIT-1240. (Jon Siwek)\n\n  * Implement file ID caching for MIME_Mail. (Jon Siwek)\n\n  * Fix a compile error. (Jon Siwek)\n\n2.3-161 | 2014-09-09 12:35:38 -0500\n\n  * Bugfixes and test updates/additions. (Robin Sommer)\n\n  * Interface tweaks and docs for PktSrc/PktDumper. (Robin Sommer)\n\n  * Moving PCAP-related bifs to iosource/pcap.bif. (Robin Sommer)\n\n  * Moving some of the BPF filtering code into base class.\n    This will allow packet sources that don't support BPF natively to\n    emulate the filtering via libpcap. (Robin Sommer)\n\n  * Removing FlowSrc. (Robin Sommer)\n\n  * Removing remaining pieces of the 2ndary path, and left-over\n    files of packet sorter. (Robin Sommer)\n\n  * A bunch of infrastructure work to move IOSource, IOSourceRegistry\n    (now iosource::Manager) and PktSrc/PktDumper code into iosource/,\n    and over to a plugin structure. (Robin Sommer)\n\n2.3-137 | 2014-09-08 19:01:13 -0500\n\n  * Fix Broxygen's rendering of opaque types. (Jon Siwek)\n\n2.3-136 | 2014-09-07 20:50:46 -0700\n\n  * Change more http links to https. (Johanna Amann)\n\n2.3-134 | 2014-09-04 16:16:36 -0700\n\n  * Fixed a number of issues with OCSP reply validation. Addresses\n    BIT-1212. (Johanna Amann)\n\n  * Fix null pointer dereference in OCSP verification code in case no\n    certificate is sent as part as the ocsp reply. Addresses BIT-1212.\n    (Johanna Amann)\n\n2.3-131 | 2014-09-04 16:10:32 -0700\n\n  * Make links in documentation templates protocol relative. (Johanna\n    Amann)\n\n2.3-129 | 2014-09-02 17:21:21 -0700\n\n  * Simplify a conditional with equivalent branches. (Jon Siwek)\n\n  * Change EDNS parsing code to use rdlength more cautiously. (Jon\n    Siwek)\n\n  * Fix a memory leak when bind() fails due to EADDRINUSE. (Jon Siwek)\n\n  * Fix possible buffer over-read in DNS TSIG parsing. (Jon Siwek)\n\n2.3-124 | 2014-08-26 09:24:19 -0500\n\n  * Better documentation for sub_bytes (Jimmy Jones)\n\n  * BIT-1234: Fix build on systems that already have ntohll/htonll\n    (Jon Siwek)\n\n2.3-121 | 2014-08-22 15:22:15 -0700\n\n  * Detect functions that try to bind variables from an outer scope\n    and raise an error saying that's not supported. Addresses\n    BIT-1233. (Jon Siwek)\n\n2.3-116 | 2014-08-21 16:04:13 -0500\n\n  * Adding plugin testing to Makefile's test-all. (Robin Sommer)\n\n  * Converting log writers and input readers to plugins.\n    DataSeries and ElasticSearch plugins have moved to the new\n    bro-plugins repository, which is now a git submodule in the\n    aux/plugins directory. (Robin Sommer)\n\n2.3-98 | 2014-08-19 11:03:46 -0500\n\n  * Silence some doc-related warnings when using `bro -e`.\n    Closes BIT-1232. (Jon Siwek)\n\n  * Fix possible null ptr derefs reported by Coverity. (Jon Siwek)\n\n2.3-96 | 2014-08-01 14:35:01 -0700\n\n  * Small change to DHCP documentation. In server->client messages the\n    host name may differ from the one requested by the client.\n    (Johanna Amann)\n\n  * Split DHCP log writing from record creation. This allows users to\n    customize dhcp.log by changing the record in their own dhcp_ack\n    event. (Johanna Amann)\n\n  * Update PATH so that documentation btests can find bro-cut. (Daniel\n    Thayer)\n\n  * Remove gawk from list of optional packages in documentation.\n    (Daniel Thayer)\n\n  * Fix for redefining built-in constants. (Robin Sommer)\n\n2.3-86 | 2014-07-31 14:19:58 -0700\n\n  * Fix for redefining built-in constants. (Robin Sommer)\n\n  * Adding missing check that a plugin's API version matches what Bro\n    defines. (Robin Sommer)\n\n  * Adding NEWS entry for plugins. (Robin Sommer)\n\n2.3-83 | 2014-07-30 16:26:11 -0500\n\n  * Minor adjustments to plugin code/docs. (Jon Siwek)\n\n  * Dynamic plugin support. (Rpbin Sommer)\n\n    Bro now supports extending core functionality, like protocol and\n    file analysis, dynamically with external plugins in the form of\n    shared libraries. See doc/devel/plugins.rst for an overview of the\n    main functionality. Changes coming with this:\n\n        - Replacing the old Plugin macro magic with a new API.\n\n        - The plugin API changed to generally use std::strings instead\n          of const char*.\n\n        - There are a number of invocations of PLUGIN_HOOK_\n          {VOID,WITH_RESULT} across the code base, which allow plugins\n          to hook into the processing at those locations.\n\n        - A few new accessor methods to various classes to allow\n          plugins to get to that information.\n\n        - network_time cannot be just assigned to anymore, there's now\n          function net_update_time() for that.\n\n        - Redoing how builtin variables are initialized, so that it\n          works for plugins as well. No more init_net_var(), but\n          instead bifcl-generated code that registers them.\n\n        - Various changes for adjusting to the now dynamic generation\n          of analyzer instances.\n\n    - same_type() gets an optional extra argument allowing record type\n      comparision to ignore if field names don't match. (Robin Sommer)\n\n    - Further unify file analysis API with the protocol analyzer API\n      (assigning IDs to analyzers; adding Init()/Done() methods;\n      adding subtypes). (Robin Sommer)\n\n    - A new command line option -Q that prints some basic execution\n      time stats. (Robin Sommer)\n\n    - Add support to the file analysis for activating analyzers by\n      MIME type. (Robin Sommer)\n\n          - File::register_for_mime_type(tag: Analyzer::Tag, mt:\n            string): Associates a file analyzer with a MIME type.\n\n          - File::add_analyzers_for_mime_type(f: fa_file, mtype:\n            string): Activates all analyzers registered for a MIME\n            type for the file.\n\n          - The default file_new() handler calls\n            File::add_analyzers_for_mime_type() with the file's MIME\n            type.\n\n2.3-20 | 2014-07-22 17:41:02 -0700\n\n  * Updating submodule(s).\n\n2.3-19 | 2014-07-22 17:29:19 -0700\n\n  * Implement bytestring_to_coils() in Modbus analyzer so that coils\n    gets passed to the corresponding events. (Hui Lin)\n\n  * Add length field to ModbusHeaders. (Hui Lin)\n\n2.3-12 | 2014-07-10 19:17:37 -0500\n\n  * Include yield of vectors in Broxygen's type descriptions.\n    Addresses BIT-1217. (Jon Siwek)\n\n2.3-11 | 2014-07-10 14:49:27 -0700\n\n  * Fixing DataSeries output. It was using a now illegal value as its\n    default compression level. (Robin Sommer)\n\n2.3-7 | 2014-06-26 17:35:18 -0700\n\n  * Extending \"make test-all\" to include aux/bro-aux. (Robin Sommer)\n\n2.3-6 | 2014-06-26 17:24:10 -0700\n\n  * DataSeries compilation issue fixed. (mlaterman)\n\n  * Fix a reference counting bug in ListVal ctor. (Jon Siwek)\n\n2.3-3 | 2014-06-26 15:41:04 -0500\n\n  * Support tilde expansion when Bro tries to find its own path. (Jon\n    Siwek)\n\n2.3-2 | 2014-06-23 16:54:15 -0500\n\n  * Remove references to line numbers in tutorial text. (Daniel Thayer)\n\n2.3 | 2014-06-16 09:48:25 -0500\n\n  * Release 2.3.\n\n2.3-beta-33 | 2014-06-12 11:59:28 -0500\n\n  * Documentation improvements/fixes. (Daniel Thayer)\n\n2.3-beta-24 | 2014-06-11 15:35:31 -0500\n\n  * Fix SMTP state tracking when server response is missing.\n    (Robin Sommer)\n\n2.3-beta-22 | 2014-06-11 12:31:38 -0500\n\n  * Fix doc/test that broke due to a Bro script change. (Jon Siwek)\n\n  * Remove unused --with-libmagic configure option. (Jon Siwek)\n\n2.3-beta-20 | 2014-06-10 18:16:51 -0700\n\n  * Fix use-after-free in some cases of reassigning a table index.\n    Addresses BIT-1202. (Jon Siwek)\n\n2.3-beta-18 | 2014-06-06 13:11:50 -0700\n\n  * Add two more SSL events, one triggered for each handshake message\n    and one triggered for the tls change cipherspec message. (Bernhard\n    Amann)\n\n  * Small SSL bug fix. In case SSL::disable_analyzer_after_detection\n    was set to false, the ssl_established event would fire after each\n    data packet once the session is established. (Bernhard Amann)\n\n2.3-beta-16 | 2014-06-06 13:05:44 -0700\n\n  * Re-activate notice suppression for expiring certificates.\n    (Bernhard Amann)\n\n2.3-beta-14 | 2014-06-05 14:43:33 -0700\n\n  * Add new TLS extension type numbers from IANA (Bernhard Amann)\n\n  * Switch to double hashing for Bloomfilters for better performance.\n    (Matthias Vallentin)\n\n  * Bugfix to use full digest length instead of just one byte for\n    Bloomfilter's universal hash function. Addresses BIT-1140.\n    (Matthias Vallentin)\n\n  * Make buffer for X509 certificate subjects larger. Addresses\n    BIT-1195 (Bernhard Amann)\n\n2.3-beta-5 | 2014-05-29 15:34:42 -0500\n\n  * Fix misc/load-balancing.bro's reference to\n    PacketFilter::sampling_filter (Jon Siwek)\n\n2.3-beta-4 | 2014-05-28 14:55:24 -0500\n\n  * Fix potential mem leak in remote function/event unserialization.\n    (Jon Siwek)\n\n  * Fix reference counting bug in table coercion expressions (Jon Siwek)\n\n  * Fix an \"unused value\" warning. (Jon Siwek)\n\n  * Remove a duplicate unit test baseline dir. (Jon Siwek)\n\n2.3-beta | 2014-05-19 16:36:50 -0500\n\n  * Release 2.3-beta\n\n  * Clean up OpenSSL data structures on exit. (Bernhard Amann)\n\n  * Fixes for OCSP & x509 analysis memory leak issues. (Bernhard Amann)\n\n  * Remove remaining references to BROMAGIC (Daniel Thayer)\n\n  * Fix typos and formatting in event and BiF documentation (Daniel Thayer)\n\n  * Update intel framework plugin for ssl server_name extension API\n    changes. (Bernhard Amann, Justin Azoff)\n\n  * Fix expression errors in SSL/x509 scripts when unparseable data\n    is in certificate chain. (Bernhard Amann)\n\n2.2-478 | 2014-05-19 15:31:33 -0500\n\n  * Change record ctors to only allow record-field-assignment\n    expressions. (Jon Siwek)\n\n2.2-477 | 2014-05-19 14:13:00 -0500\n\n  * Fix X509::Result record's \"result\" field to be set internally as type int instead of type count. (Bernhard Amann)\n\n  * Fix a couple of doc build warnings (Daniel Thayer)\n\n2.2-470 | 2014-05-16 15:16:32 -0700\n\n  * Add a new section \"Cluster Configuration\" to the docs that is\n    intended as a how-to for configuring a Bro cluster.  Most of this\n    content was moved here from the BroControl doc (which is now\n    intended as more of a reference guide for more experienced users)\n    and the load balancing FAQ on the website. (Daniel Thayer)\n\n  * Update some doc tests and line numbers (Daniel Thayer)\n\n2.2-457 | 2014-05-16 14:38:31 -0700\n\n  * New script policy/protocols/ssl/validate-ocsp.bro that adds OSCP\n    validation to ssl.log. The work is done by a new bif\n    x509_ocsp_verify(). (Bernhard Amann)\n\n  * STARTTLS support for POP3 and SMTP. The SSL analyzer takes over\n    when seen. smtp.log now logs when a connection switches to SSL.\n    (Bernhard Amann)\n\n  * Replace errors when parsing x509 certs with weirds. (Bernhard\n    Amann)\n\n  * Improved Heartbleed attack/scan detection. (Bernhard Amann)\n\n  * Let TLS analyzer fail better when no longer in sync with the data\n    stream. (Bernhard Amann)\n\n2.2-444 | 2014-05-16 14:10:32 -0500\n\n  * Disable all default AppStat plugins except facebook. (Jon Siwek)\n\n  * Update for the active http test to force it to use ipv4. (Seth Hall)\n\n2.2-441 | 2014-05-15 11:29:56 -0700\n\n  * A new RADIUS analyzer. (Vlad Grigorescu)\n\n    It produces a radius.log and generates two events:\n\n        event radius_message(c: connection, result: RADIUS::Message);\n        event radius_attribute(c: connection, attr_type: count, value: string);\n\n2.2-427 | 2014-05-15 13:37:23 -0400\n\n  * Fix dynamic SumStats update on clusters (Bernhard Amann)\n\n2.2-425 | 2014-05-08 16:34:44 -0700\n\n  * Fix reassembly of data w/ sizes beyond 32-bit capacities. (Jon Siwek)\n\n    Reassembly code (e.g. for TCP) now uses int64/uint64 (signedness\n    is situational) data types in place of int types in order to\n    support delivering data to analyzers that pass 2GB thresholds.\n    There's also changes in logic that accompany the change in data\n    types, e.g. to fix TCP sequence space arithmetic inconsistencies.\n\n    Another significant change is in the Analyzer API: the *Packet and\n    *Undelivered methods now use a uint64 in place of an int for the\n    relative sequence space offset parameter.\n\n    Addresses BIT-348.\n\n  * Fixing compiler warnings. (Robin Sommer)\n\n  * Update SNMP analyzer's DeliverPacket method signature. (Jon Siwek)\n\n2.2-417 | 2014-05-07 10:59:22 -0500\n\n  * Change handling of atypical OpenSSL error case in x509 verification. (Jon Siwek)\n\n  * Fix memory leaks in X509 certificate parsing/verification. (Jon Siwek)\n\n  * Fix new []/delete mismatch in input::reader::Raw::DoClose(). (Jon Siwek)\n\n  * Fix buffer over-reads in file_analysis::Manager::Terminate() (Jon Siwek)\n\n  * Fix buffer overlows in IP address masking logic. (Jon Siwek)\n\n    That could occur either in taking a zero-length mask on an IPv6 address\n    (e.g. [fe80::]/0) or a reverse mask of length 128 on any address (e.g.\n    via the remask_addr BuiltIn Function).\n\n  * Fix new []/delete mismatch in ~Base64Converter. (Jon Siwek)\n\n2.2-410 | 2014-05-02 12:49:53 -0500\n\n  * Replace an unneeded OPENSSL_malloc call. (Jon Siwek)\n\n2.2-409 | 2014-05-02 12:09:06 -0500\n\n  * Clean up and documentation for base SNMP script. (Jon Siwek)\n\n  * Update base SNMP script to now produce a snmp.log. (Seth Hall)\n\n  * Add DH support to SSL analyzer.  When using DHE or DH-Anon, sever\n    key parameters are now available in scriptland.  Also add script to\n    alert on weak certificate keys or weak dh-params. (Bernhard Amann)\n\n  * Add a few more ciphers Bro did not know at all so far. (Bernhard Amann)\n\n  * Log chosen curve when using ec cipher suite in TLS. (Bernhard Amann)\n\n2.2-397 | 2014-05-01 20:29:20 -0700\n\n  * Fix reference counting for lookup_ID() usages. (Jon Siwek)\n\n2.2-395 | 2014-05-01 20:25:48 -0700\n\n  * Fix missing \"irc-dcc-data\" service field from IRC DCC connections.\n    (Jon Siwek)\n\n  * Correct a notice for heartbleed. The notice is thrown correctly,\n    just the message conteined wrong values. (Bernhard Amann)\n\n  * Improve/standardize some malloc/realloc return value checks. (Jon\n    Siwek)\n\n  * Improve file analysis manager shutdown/cleanup. (Jon Siwek)\n\n2.2-388 | 2014-04-24 18:38:07 -0700\n\n  * Fix decoding of MIME quoted-printable. (Mareq)\n\n2.2-386 | 2014-04-24 18:22:29 -0700\n\n  * Do a Intel::ADDR lookup for host field if we find an IP address\n    there. (jshlbrd)\n\n2.2-381 | 2014-04-24 17:08:45 -0700\n\n  * Add Java version to software framework. (Brian Little)\n\n2.2-379 | 2014-04-24 17:06:21 -0700\n\n  * Remove unused Val::attribs member. (Jon Siwek)\n\n2.2-377 | 2014-04-24 16:57:54 -0700\n\n  * A larger set of SSL improvements and extensions. Addresses\n    BIT-1178. (Bernhard Amann)\n\n        - Fixes TLS protocol version detection. It also should\n          bail-out correctly on non-tls-connections now\n\n        - Adds support for a few TLS extensions, including\n          server_name, alpn, and ec-curves.\n\n        - Adds support for the heartbeat events.\n\n        - Add Heartbleed detector script.\n\n        - Adds basic support for OCSP stapling.\n\n  * Fix parsing of DNS TXT RRs w/ multiple character-strings.\n    Addresses BIT-1156. (Jon Siwek)\n\n2.2-353 | 2014-04-24 16:12:30 -0700\n\n  * Adapt HTTP partial content to cache file analysis IDs. (Jon Siwek)\n\n  * Adapt SSL analyzer to generate file analysis handles itself. (Jon\n    Siwek)\n\n  * Adapt more of HTTP analyzer to use cached file analysis IDs. (Jon\n    Siwek)\n\n  * Adapt IRC/FTP analyzers to cache file analysis IDs. (Jon Siwek)\n\n  * Refactor regex/signature AcceptingSet data structure and usages.\n    (Jon Siwek)\n\n  * Enforce data size limit when checking files for MIME matches. (Jon\n    Siwek)\n\n  * Refactor file analysis file ID lookup. (Jon Siwek)\n\n2.2-344 | 2014-04-22 20:13:30 -0700\n\n  * Refactor various hex escaping code. (Jon Siwek)\n\n2.2-341 | 2014-04-17 18:01:41 -0500\n\n  * Fix duplicate DNS log entries. (Robin Sommer)\n\n2.2-341 | 2014-04-17 18:01:01 -0500\n\n  * Refactor initialization of ASCII log writer options. (Jon Siwek)\n\n  * Fix a memory leak in ASCII log writer. (Jon Siwek)\n\n2.2-338 | 2014-04-17 17:48:17 -0500\n\n  * Disable input/logging threads setting their names on every\n    heartbeat. (Jon Siwek)\n\n  * Fix bug when clearing Bloom filter contents. Reported by\n    @colonelxc. (Matthias Vallentin)\n\n2.2-335 | 2014-04-10 15:04:57 -0700\n\n  * Small logic fix for main SSL script. (Bernhard Amann)\n\n  * Update DPD signatures for detecting TLS 1.2. (Bernhard Amann)\n\n  * Remove unused data member of SMTP_Analyzer to silence a Coverity\n    warning. (Jon Siwek)\n\n  * Fix missing @load dependencies in some scripts. Also update the\n    unit test which is supposed to catch such errors. (Jon Siwek)\n\n2.2-326 | 2014-04-08 15:21:51 -0700\n\n  * Add SNMP datagram parsing support.This supports parsing of SNMPv1\n    (RFC 1157), SNMPv2 (RFC 1901/3416), and SNMPv2 (RFC 3412).  An\n    event is raised for each SNMP PDU type, though there's not\n    currently any event handlers for them and not a default snmp.log\n    either.  However, simple presence of SNMP is currently visible now\n    in conn.log service field and known_services.log. (Jon Siwek)\n\n2.2-319 | 2014-04-03 15:53:25 -0700\n\n  * Improve __load__.bro creation for .bif.bro stubs. (Jon Siwek)\n\n2.2-317 | 2014-04-03 10:51:31 -0400\n\n  * Add a uid field to the signatures.log.  Addresses BIT-1171\n    (Anthony Verez)\n\n2.2-315 | 2014-04-01 16:50:01 -0700\n\n  * Change logging's \"#types\" description of sets to \"set\". Addresses\n    BIT-1163 (Bernhard Amann)\n\n2.2-313 | 2014-04-01 16:40:19 -0700\n\n  * Fix a couple nits reported by Coverity.(Jon Siwek)\n\n  * Fix potential memory leak in IP frag reassembly reported by\n    Coverity. (Jon Siwek)\n\n2.2-310 | 2014-03-31 18:52:22 -0700\n\n  * Fix memory leak and unchecked dynamic cast reported by Coverity.\n    (Jon Siwek)\n\n  * Fix potential memory leak in x509 parser reported by Coverity.\n    (Bernhard Amann)\n\n2.2-304 | 2014-03-30 23:05:54 +0200\n\n  * Replace libmagic w/ Bro signatures for file MIME type\n    identification. Addresses BIT-1143. (Jon Siwek)\n\n    Includes:\n\n    - libmagic is no longer used at all.  All MIME type detection is\n      done through new Bro signatures, and there's no longer a means\n      to get verbose file type descriptions. The majority of the\n      default file magic signatures are derived from the default magic\n      database of libmagic ~5.17.\n\n    - File magic signatures consist of two new constructs in the\n      signature rule parsing grammar: \"file-magic\" gives a regular\n      expression to match against, and \"file-mime\" gives the MIME type\n      string of content that matches the magic and an optional strength\n      value for the match.\n\n    - Modified signature/rule syntax for identifiers: they can no\n      longer start with a '-', which made for ambiguous syntax when\n      doing negative strength values in \"file-mime\".  Also brought\n      syntax for Bro script identifiers in line with reality (they\n      can't start with numbers or include '-' at all).\n\n    - A new built-in function, \"file_magic\", can be used to get all\n      file magic matches and their corresponding strength against a\n      given chunk of data.\n\n    - The second parameter of the \"identify_data\" built-in function\n      can no longer be used to get verbose file type descriptions,\n      though it can still be used to get the strongest matching file\n      magic signature.\n\n    - The \"file_transferred\" event's \"descr\" parameter no longer\n      contains verbose file type descriptions.\n\n    - The BROMAGIC environment variable no longer changes any behavior\n      in Bro as magic databases are no longer used/installed.\n\n    - Removed \"binary\" and \"octet-stream\" mime type detections. They\n      don' provide any more information than an uninitialized\n      mime_type field which implicitly means no magic signature\n      matches and so the media type is unknown to Bro.\n\n    - The \"fa_file\" record now contains a \"mime_types\" field that\n      contains all magic signatures that matched the file content\n      (where the \"mime_type\" field is just a shortcut for the\n      strongest match).\n\n    - Reverted back to minimum requirement of CMake 2.6.3 from 2.8.0.\n\n  * The logic for adding file ids to {orig,resp}_fuids fields of the\n    http.log incorrectly depended on the state of\n    {orig,resp}_mime_types fields, so sometimes not all file ids\n    associated w/ the session were logged. (Jon Siwek)\n\n  * Fix MHR script's use of fa_file$mime_type before checking if it's\n    initialized. (Jon Siwek)\n\n2.2-294 | 2014-03-30 22:08:25 +0200\n\n  * Rework and move X509 certificate processing from the SSL protocol\n    analyzer to a dedicated file analyzer. This will allow us to\n    examine X509 certificates from sources other than SSL in the\n    future. Furthermore, Bro now parses more fields and extensions\n    from the certificates (e.g. elliptic curve information, subject\n    alternative names, basic constraints). Certificate validation also\n    was improved, should be easier to use and exposes information like\n    the full verified certificate chain. (Bernhard Amann)\n\n    This update changes the format of ssl.log and adds a new x509.log\n    with certificate information. Furthermore all x509 events and\n    handling functions have changed.\n\n2.2-271 | 2014-03-30 20:25:17 +0200\n\n  * Add unit tests covering vector/set/table ctors/inits. (Jon Siwek)\n\n  * Fix parsing of \"local\" named table constructors. (Jon Siwek)\n\n  * Improve type checking of records. Addresses BIT-1159. (Jon Siwek)\n\n2.2-267 | 2014-03-30 20:21:43 +0200\n\n  * Improve documentation of Bro clusters. Addresses BIT-1160.\n    (Daniel Thayer)\n\n2.2-263 | 2014-03-30 20:19:05 +0200\n\n  * Don't include locations into serialization when cloning values.\n    (Robin Sommer)\n\n2.2-262 | 2014-03-30 20:12:47 +0200\n\n  * Refactor SerializationFormat::EndWrite and ChunkedIO::Chunk memory\n    management. (Jon Siwek)\n\n  * Improve SerializationFormat's write buffer growth strategy. (Jon\n    Siwek)\n\n  * Add --parse-only option to exit after parsing scripts. May be\n    useful for syntax-checking tools. (Jon Siwek)\n\n2.2-256 | 2014-03-30 19:57:28 +0200\n\n  * For the summary statistics framewirk, change all &create_expire\n    attributes to &read_expire in the cluster part. (Bernhard Amann)\n\n2.2-254 | 2014-03-30 19:55:22 +0200\n\n  * Update instructions on how to build Bro docs. (Daniel Thayer)\n\n2.2-251 | 2014-03-28 08:37:37 -0400\n\n  * Quick fix to the ElasticSearch writer. (Seth Hall)\n\n2.2-250 | 2014-03-19 17:20:55 -0400\n\n  * Improve performance of MHR script by reducing cloned Vals in\n    a \"when\" scope. (Jon Siwek)\n\n2.2-248 | 2014-03-19 14:47:40 -0400\n\n  * Make SumStats work incrementally and non-blocking in non-cluster\n    mode, but force it to operate by blocking if Bro is shutting\n    down. (Seth Hall)\n\n2.2-244 | 2014-03-17 08:24:17 -0700\n\n  * Fix compile errror on FreeBSD caused by wrong include file order.\n    (Bernhard Amann)\n\n2.2-240 | 2014-03-14 10:23:54 -0700\n\n  * Derive results of DNS lookups from from input when in BRO_DNS_FAKE\n    mode. Addresses BIT-1134. (Jon Siwek)\n\n  * Fixing a few cases of undefined behaviour introduced by recent\n    formatter work.\n\n  * Fixing compiler error. (Robin Sommer)\n\n  * Fixing (very unlikely) double delete in HTTP analyzer when\n    decapsulating CONNECTs. (Robin Sommer)\n\n2.2-235 | 2014-03-13 16:21:19 -0700\n\n  * The Ascii writer has a new option LogAscii::use_json for writing\n\tout logs as JSON. (Seth Hall)\n\n  * Ascii input reader now supports all config options as per-input\n    stream \"config\" values. (Seth Hall)\n\n  * Refactored formatters and updated the the writers a bit. (Seth\n\tHall)\n\n2.2-229 | 2014-03-13 14:58:30 -0700\n\n  * Refactoring analyzer manager code to reuse\n    ApplyScheduledAnalyzers(). (Robin Sommer)\n\n2.2-228 | 2014-03-13 14:25:53 -0700\n\n  * Teach async DNS lookup builtin-functions about BRO_DNS_FAKE.\n    Addresses BIT-1134. (Jon Siwek)\n\n  * Enable fake DNS mode for test suites.\n\n  * Improve analysis of TCP SYN/SYN-ACK reversal situations. (Jon\n    Siwek)\n\n    - Since it's just the handshake packets out of order, they're no\n      longer treated as partial connections, which some protocol analyzers\n      immediately refuse to look at.\n\n    - The TCP_Reassembler \"is_orig\" state failed to change, which led to\n      protocol analyzers sometimes using the wrong value for that.\n\n    - Add a unit test which exercises the Connection::FlipRoles() code\n      path (i.e. the SYN/SYN-ACK reversal situation).\n\n    Addresses BIT-1148.\n\n  * Fix bug in Connection::FlipRoles. It didn't swap address values\n    right and also didn't consider that analyzers might be scheduled\n    for the new connection tuple. Reported by Kevin McMahon. Addresses\n    BIT-1148. (Jon Siwek)\n\n2.2-221 | 2014-03-12 17:23:18 -0700\n\n  * Teach configure script --enable-jemalloc, --with-jemalloc.\n    Addresses BIT-1128. (Jon Siwek)\n\n2.2-218 | 2014-03-12 17:19:45 -0700\n\n  * Improve DBG_LOG macro (perf. improvement for --enable-debug mode).\n    (Jon Siwek)\n\n  * Silences some documentation warnings from Sphinx. (Jon Siwek)\n\n2.2-215 | 2014-03-10 11:10:15 -0700\n\n  * Fix non-deterministic logging of unmatched DNS msgs. Addresses\n    BIT-1153 (Jon Siwek)\n\n2.2-213 | 2014-03-09 08:57:37 -0700\n\n  * No longer accidentally attempting to parse NBSTAT RRs as SRV RRs\n    in DNS analyzer. (Seth Hall)\n\n  * Fix DNS SRV responses and a small issue with NBNS queries and\n    label length. (Seth Hall)\n\n     - DNS SRV responses never had the code written to actually\n       generate the dns_SRV_reply event.  Adding this required\n       extending the event a bit to add extra information.  SRV responses\n       now appear in the dns.log file correctly.\n\n     - Fixed an issue where some Microsoft NetBIOS Name Service lookups\n       would exceed the max label length for DNS and cause an incorrect\n       \"DNS_label_too_long\" weird.\n\n2.2-210 | 2014-03-06 22:52:36 -0500\n\n  * Improve SSL logging so that connections are logged even when the\n    ssl_established event is not generated as well as other small SSL\n    fixes. (Bernhard Amann)\n\n2.2-206 | 2014-03-03 16:52:28 -0800\n\n  * HTTP CONNECT proxy support. The HTTP analyzer now supports\n    handling HTTP CONNECT proxies. (Seth Hall)\n\n  * Expanding the HTTP methods used in the DPD signature to detect\n    HTTP traffic. (Seth Hall)\n\n  * Fixing removal of support analyzers. (Robin Sommer)\n\n2.2-199 | 2014-03-03 16:34:20 -0800\n\n  * Allow iterating over bif functions with result type vector of any.\n    This changes the internal type that is used to signal that a\n    vector is unspecified from any to void. Addresses BIT-1144\n    (Bernhard Amann)\n\n2.2-197 | 2014-02-28 15:36:58 -0800\n\n  * Remove test code. (Robin Sommer)\n\n2.2-194 | 2014-02-28 14:50:53 -0800\n\n  * Remove packet sorter. Addresses BIT-700. (Bernhard Amann)\n\n2.2-192 | 2014-02-28 09:46:43 -0800\n\n  * Update Mozilla root bundle. (Bernhard Amann)\n\n2.2-190 | 2014-02-27 07:34:44 -0800\n\n  * Adjust timings of a few leak tests. (Bernhard Amann)\n\n2.2-187 | 2014-02-25 07:24:42 -0800\n\n  * More Google TLS extensions that are being actively used. (Bernhard\n    Amann)\n\n  * Remove unused, and potentially unsafe, function\n    ListVal::IncludedInString. (Bernhard Amann)\n\n2.2-184 | 2014-02-24 07:28:18 -0800\n\n  * New TLS constants from\n    https://tools.ietf.org/html/draft-bmoeller-tls-downgrade-scsv-01.\n    (Bernhard Amann)\n\n2.2-180 | 2014-02-20 17:29:14 -0800\n\n  * New SSL alert descriptions from\n    https://tools.ietf.org/html/draft-ietf-tls-applayerprotoneg-04.\n    (Bernhard Amann)\n\n  * Update SQLite. (Bernhard Amann)\n\n2.2-177 | 2014-02-20 17:27:46 -0800\n\n  * Update to libmagic version 5.17. Addresses BIT-1136. (Jon Siwek)\n\n2.2-174 | 2014-02-14 12:07:04 -0800\n\n  * Support for MPLS over VLAN. (Chris Kanich)\n\n2.2-173 | 2014-02-14 10:50:15 -0800\n\n  * Fix misidentification of SOCKS traffic that in particiular seemed\n    to happen a lot with DCE/RPC traffic. (Vlad Grigorescu)\n\n2.2-170 | 2014-02-13 16:42:07 -0800\n\n  * Refactor DNS script's state management to improve performance.\n    (Jon Siwek)\n\n  * Revert \"Expanding the HTTP methods used in the signature to detect\n    HTTP traffic.\" (Robin Sommer)\n\n2.2-167 | 2014-02-12 20:17:39 -0800\n\n  * Increase timeouts of some unit tests. (Jon Siwek)\n\n  * Fix memory leak in modbus analyzer. Would happen if there's a\n    'modbus_read_fifo_queue_response' event handler. (Jon Siwek)\n\n  * Add channel_id TLS extension number. This number is not IANA\n    defined, but we see it being actively used. (Bernhard Amann)\n\n  * Test baseline updates for DNS change. (Robin Sommer)\n\n2.2-158 | 2014-02-09 23:45:39 -0500\n\n  * Change dns.log to include only standard DNS queries. (Jon Siwek)\n\n  * Improve DNS analysis. (Jon Siwek)\n\n    - Fix parsing of empty question sections (when QDCOUNT == 0).  In this\n      case, the DNS parser would extract two 2-byte fields for use in either\n      \"dns_query_reply\" or \"dns_rejected\" events (dependent on value of\n      RCODE) as qclass and qtype parameters.  This is not correct, because\n      such fields don't actually exist in the DNS message format when\n      QDCOUNT is 0.  As a result, these events are no longer raised when\n      there's an empty question section.  Scripts that depends on checking\n      for an empty question section can do that in the \"dns_message\" event.\n\n    - Add a new \"dns_unknown_reply\" event, for when Bro does not know how\n      to fully parse a particular resource record type.  This helps fix a\n      problem in the default DNS scripts where the logic to complete\n      request-reply pair matching doesn't work because it's waiting on more\n      RR events to complete the reply.  i.e. it expects ANCOUNT number of\n      dns_*_reply events and will wait until it gets that many before\n      completing a request-reply pair and logging it to dns.log.  This could\n      cause bogus replies to match a previous request if they happen to\n      share a DNS transaction ID. (Jon Siwek)\n\n    - The previous method of matching queries with replies was still\n      unreliable in cases where the reply contains no answers.  The new code\n      also takes extra measures to avoid pending state growing too large in\n      cases where the condition to match a query with a corresponding reply is\n      never met, but yet DNS messages continue to be exchanged over the same\n      connection 5-tuple (preventing cleanup of the pending state). (Jon Siwek)\n\n  * Updates to httpmonitor and mimestats documentation. (Jeannette Dopheide)\n\n  * Updates to Logs and Cluster documentation (Jeannette Dopheide)\n\n2.2-147 | 2014-02-07 08:06:53 -0800\n\n  * Fix x509-extension test sometimes failing. (Bernhard Amann)\n\n2.2-144 | 2014-02-06 20:31:18 -0800\n\n  * Fixing bug in POP3 analyzer. With certain input the analyzer could\n    end up trying to write to non-writable memory. (Robin Sommer)\n\n2.2-140 | 2014-02-06 17:58:04 -0800\n\n  * Fixing memory leaks in input framework. (Robin Sommer)\n\n  * Add script to detect filtered TCP traces. Addresses BIT-1119. (Jon\n    Siwek)\n\n2.2-137 | 2014-02-04 09:09:55 -0800\n\n  * Minor unified2 script documentation fix. (Jon Siwek)\n\n2.2-135 | 2014-01-31 11:09:36 -0800\n\n  * Added some grammar and spelling corrections to Installation and\n    Quick Start Guide. (Jeannette Dopheide)\n\n2.2-131 | 2014-01-30 16:11:11 -0800\n\n  * Extend file analysis API to allow file ID caching. This allows an\n    analyzer to either provide file IDs associated with some file\n    content or to cache a file ID that was already determined by\n    script-layer logic so that subsequent calls to the file analysis\n    interface can bypass costly detours through script-layer.  This\n    can yield a decent performance improvement for analyzers that are\n    able to take advantage of it and deal with streaming content (like\n    HTTP, which has been adapted accordingly). (Jon Siwek)\n\n2.2-128 | 2014-01-30 15:58:47 -0800\n\n  * Add leak test for Exec module. (Bernhard Amann)\n\n  * Fix file_over_new_connection event to trigger when entire file is\n    missed. (Jon Siwek)\n\n  * Improve TCP connection size reporting for half-open connections.\n    (Jon Siwek)\n\n  * Improve gap reporting in TCP connections that never see data. We\n    no longer accomodate SYN/FIN/RST-filtered traces by not reporting\n    missing data. The behavior can be reverted by redef'ing\n    \"detect_filtered_trace\". (Jon Siwek)\n\n  * Improve TCP FIN retransmission handling. (Jon Siwek)\n\n2.2-120 | 2014-01-28 10:25:23 -0800\n\n  * Fix and extend x509_extension() event, which now actually returns\n    the extension. (Bernhard Amann)\n\n    New event signauture:\n\n        event x509_extension(c: connection, is_orig: bool, cert:X509, extension: X509_extension_info)\n\n2.2-117 | 2014-01-23 14:18:19 -0800\n\n  * Fixing initialization context in anonymous functions. (Robin\n    Sommer)\n\n2.2-115 | 2014-01-22 12:11:18 -0800\n\n  * Add unit tests for new Bro Manual docs. (Jon Siwek)\n\n  * New content for the \"Using Bro\" section of the manual. (Rafael\n    Bonilla/Jon Siwek)\n\n2.2-105 | 2014-01-20 12:16:48 -0800\n\n  * Support GRE tunnel decapsulation, including enhanced GRE headers.\n    GRE tunnels are treated just like IP-in-IP tunnels by parsing past\n    the GRE header in between the delivery and payload IP packets.\n    Addresses BIT-867. (Jon Siwek)\n\n  * Simplify FragReassembler memory management. (Jon Siwek)\n\n2.2-102 | 2014-01-20 12:00:29 -0800\n\n  * Include file information (MIME type and description) into notice\n    emails if available. (Justin Azoff)\n\n2.2-100 | 2014-01-20 11:54:58 -0800\n\n  * Fix caching of recently validated SSL certifcates. (Justin Azoff)\n\n2.2-98 | 2014-01-20 11:50:32 -0800\n\n  * For notice suppresion, instead of storing the entire notice in\n    Notice::suppressing, just store the time the notice should be\n    suppressed until. This saves significant memory but can no longer\n    raise end_suppression, which has been removed. (Justin Azoff)\n\n2.2-96 | 2014-01-20 11:41:07 -0800\n\n  * Integrate libmagic 5.16. Bro now now always relies on\n    builtin/shipped magic library/database. (Jon Siwek)\n\n  * Bro now requires a CMake 2.8.x, but no longer a pre-installed\n    libmagic. (Jon Siwek)\n\n2.2-93 | 2014-01-13 09:16:51 -0800\n\n  * Fixing compile problems with some versions of libc++. Reported by\n    Craig Leres. (Robin Sommer)\n\n2.2-91 | 2014-01-13 01:33:28 -0800\n\n  * Improve GeoIP City database support. When trying to open a city\n    database, it now considers both the \"REV0\" and \"REV1\" versions of\n    the city database instead of just the former. (Jon Siwek)\n\n  * Broxygen init fixes. Addresses BIT-1110. (Jon Siwek)\n\n    - Don't check mtime of bro binary if BRO_DISABLE_BROXYGEN env var set.\n\n    - Fix failure to locate bro binary if invoking from a relative\n      path and '.' isn't in PATH.\n\n  * Fix for packet writing to make it use the global snap length.\n    (Seth Hall)\n\n  * Fix for traffic with TCP segmentation offloading with IP header\n    len field being set to zero. (Seth Hall)\n\n  * Canonify output of a unit test. (Jon Siwek)\n\n  * A set of documentation updates. (Daniel Thayer)\n\n      - Fix typo in Bro 2.2 NEWS on string indexing.\n      - Fix typo in the Quick Start Guide, and clarified the\n        instructions about modifying crontab.\n      - Add/fix documentation for missing/misnamed event parameters.\n      - Fix typos in BIF documentation of hexstr_to_bytestring.\n      - Update the documentation of types and attributes.\n      - Documented the new substring extraction functionality.\n      - Clarified the description of \"&priority\" and \"void\".\n\n2.2-75 | 2013-12-18 08:36:50 -0800\n\n  * Fixing segfault with mismatching set &default in record fields.\n    (Robin Sommer)\n\n2.2-74 | 2013-12-16 08:49:55 -0800\n\n  * Improve warnings emitted from raw/execute input reader. (Jon\n    Siwek)\n\n  * Further improve core.when-interpreter-exceptions unit test. (Jon\n    Siwek)\n\n2.2-72 | 2013-12-12 07:12:47 -0800\n\n  * Improve the core.when-interpreter-exceptions unit test to prevent\n    it from occasionally timing out. (Jon Siwek)\n\n2.2-70 | 2013-12-10 15:02:50 -0800\n\n  * Fix (harmless) uninitialized field in basename/dirname util\n    wrapper. (Jon Siwek)\n\n2.2-68 | 2013-12-09 15:19:37 -0800\n\n  * Several improvements to input framework error handling for more\n    robustness and more helpful error messages. Includes tests for\n    many cases. (Bernhard Amann)\n\n2.2-66 | 2013-12-09 13:54:16 -0800\n\n  * Fix table &default reference counting for record ctor expressions.\n    (Jon Siwek)\n\n  * Close signature files after done parsing. (Jon Siwek)\n\n  * Fix unlikely null ptr deref in broxygen::Manager. (Jon Siwek)\n\n  * FreeBSD build fix addendum: unintended variable shadowing. (Jon\n    Siwek)\n\n  * Fix build on FreeBSD. basename(3)/dirname(3) const-ness may vary\n    w/ platform. (Jon Siwek)\n\n  * Updated software framework to support parsing IE11 user-agent\n    strings. (Seth Hall)\n\n  * Fix the irc_reply event for several server message types. (Seth\n    Hall)\n\n  * Fix memory leak in input framework. If the input framework was\n    used to read event streams and those streams contained records\n    with more than one field, not all elements of the threading Values\n    were cleaned up. Addresses BIT-1103. (Bernhard Amann)\n\n  * Minor Broxygen improvements. Addresses BIT-1098. (Jon Siwek)\n\n2.2-51 | 2013-12-05 07:53:37 -0800\n\n  * Improve a unit test involving 'when' conditionals. (Jon Siwek)\n\n2.2-48 | 2013-12-04 13:45:47 -0800\n\n  * Support omission of string slice low/high indices, BIT-1097.\n\n    Omission of the low index defaults to 0:\n\n        s = \"12345\"; s[:3] == \"123\"\n\n    Omission of the high index defaults to length of the string:\n\n        s = \"12345\"; s[3:] == \"45\" (Jon Siwek)\n\n  * Tweak to SMTP script to adjust for new string slicing behaviour.\n    (Robin Sommer)\n\n  * Test updates. (Robin Sommer)\n\n2.2-44 | 2013-12-04 12:41:51 -0800\n\n  * Fix string slice notation. Addresses BIT-1097. (Jon Siwek)\n\n    Slice ranges were not correctly determined for negative indices\n    and also off by one in general (included one more element at the\n    end of the substring than what actually matched the index range).\n    It's now equivalent to Python slice notation.  Accessing a string\n    at a single index is also the same as Python except that an\n    out-of-range index returns an empty string instead of throwing an\n    expection.\n\n2.2-41 | 2013-12-04 12:40:51 -0800\n\n  * Updating tests. (Robin Sommer)\n\n2.2-40 | 2013-12-04 12:16:38 -0800\n\n  * ssl_client_hello() now receives a vector of ciphers, instead of a\n    set, to preserve their order. (Bernhard Amann)\n\n2.2-38 | 2013-12-04 12:10:54 -0800\n\n  * New script misc/dump-events.bro, along with core support, that\n    dumps events Bro is raising in an easily readable form for\n    debugging. (Robin Sommer)\n\n  * Prettyfing Describe() for record types. If a record type has a\n    name and ODesc is set to short, we now print the name instead of\n    the full field list. (Robin Sommer)\n\n2.2-35 | 2013-12-04 10:10:32 -0800\n\n  * Rework the automated script-reference documentation generation\n    process, broxygen. Addresses BIT-701 and BIT-751. (Jon Siwek)\n\n    Highlights:\n\n        - Remove --doc-scripts and -Z options to toggle documentation\n          mode. The parser is now always instrumented to gather\n          documentation from comments of the form \"##\", \"##!\", or\n          \"##<\".\n\n        - Raw comments are available at runtime through several BIF\n          functions: get_*_comments;\n\n        - Add --broxygen and -X options to toggle generating\n          reST-format documentation output, driven by a config file\n          argument.\n\n        - Add a \"broxygen\" Sphinx extension domain, allowing certain\n          pieces of documentation to be generated on-the-fly via\n          invoking a Bro process. Re-organized/cleaned up the Sphinx\n          source tree in doc/ to use this in some places.\n\n2.2-11 | 2013-12-03 10:56:28 -0800\n\n  * Unit test for broccoli vector support. (Jon Siwek)\n\n  * Changed ordering of Bro type tag enum, which was out of sync. (Jon\n    Siwek)\n\n2.2-9 | 2013-11-18 14:03:21 -0800\n\n  * Update local.bro for Bro >= 2.2. The commented out Notice::policy\n    example didn't work anymore. (Daniel Thayer)\n\n2.2-6 | 2013-11-15 07:05:15 -0800\n\n  * Make \"install-example-configs\" target use DESTDIR. (Jon Siwek)\n\n2.2-5 | 2013-11-11 13:47:54 -0800\n\n  * Fix the irc_reply event for certain server message types. (Seth\n    Hall)\n\n  * Fixed Segmentation fault in SQLite Writer. (Jon Crussell)\n\n2.2 | 2013-11-07 10:25:50 -0800\n\n  * Release 2.2.\n\n  * Removing location information from ssh.log in external tests.\n    (Robin Sommer)\n\n2.2-beta-199 | 2013-11-07 00:36:46 -0800\n\n  * Fixing warnings during doc build. (Robin Sommer)\n\n2.2-beta-198 | 2013-11-06 22:54:30 -0800\n\n  * Update docs and tests for a recent change to detect-MHR.bro\n    (Daniel Thayer)\n\n  * Update tests and baselines for sumstats docs. (Daniel Thayer)\n\n2.2-beta-194 | 2013-11-06 14:39:50 -0500\n\n  * Remove resp_size from the ssh log. Refactor when we write out to\n    the log a bit. Geodata now works reliably. (Vlad Grigorescu)\n\n  * Update VirusTotal URL to work with changes to their website and\n    changed it to a redef. (Vlad Grigorescu)\n\n  * Added a document for the SumStats framework. (Seth Hall)\n\n2.2-beta-184 | 2013-11-03 22:53:42 -0800\n\n  * Remove swig-ruby from required packages section of install doc.\n    (Daniel Thayer)\n\n2.2-beta-182 | 2013-11-01 05:26:05 -0700\n\n  * Adding source and original copyright statement to Mozilla cert\n    list. (Robin Sommer)\n\n  * Canonfying an intel test to not depend on output order. (Robin\n    Sommer)\n\n2.2-beta-177 | 2013-10-30 04:54:54 -0700\n\n  * Fix thread processing/termination conditions. (Jon Siwek)\n\n2.2-beta-175 | 2013-10-29 09:30:09 -0700\n\n  * Return the Dir module to file name tracking instead of inode\n    tracking to avoid missing files that reuse a formerly seen inode.\n    (Seth Hall)\n\n  * Deprecate Broccoli Ruby bindings and no longer build them by\n    default; use --enable-ruby to do so. (Jon Siwek)\n\n2.2-beta-167 | 2013-10-29 06:02:38 -0700\n\n  * Change percent_lost in capture-loss from a string to a double.\n    (Vlad Grigorescu)\n\n  * New version of the threading queue deadlock fix. (Robin Sommer)\n\n  * Updating README with download/git information. (Robin Sommer)\n\n2.2-beta-161 | 2013-10-25 15:48:15 -0700\n\n  * Add curl to list of optional dependencies. It's used by the\n    active-http.bro script. (Daniel Thayer)\n\n  * Update test and baseline for a recent doc test fix. (Daniel\n    Thayer)\n\n2.2-beta-158 | 2013-10-25 15:05:08 -0700\n\n  * Updating README with download/git information. (Robin Sommer)\n\n2.2-beta-157 | 2013-10-25 11:11:17 -0700\n\n  * Extend the documentation of the SQLite reader/writer framework.\n    (Bernhard Amann)\n\n  * Fix inclusion of wrong example file in scripting tutorial.\n    Reported by Michael Auger @LM4K. (Bernhard Amann)\n\n  * Alternative fix for the thrading deadlock issue to avoid potential\n    performance impact. (Bernhard Amann)\n\n2.2-beta-152 | 2013-10-24 18:16:49 -0700\n\n  * Fix for input readers occasionally dead-locking. (Robin Sommer)\n\n2.2-beta-151 | 2013-10-24 16:52:26 -0700\n\n  * Updating submodule(s).\n\n2.2-beta-150 | 2013-10-24 16:32:14 -0700\n\n  * Change temporary ASCII reader workaround for getline() on\n    Mavericks to permanent fix. (Bernhard Amann)\n\n2.2-beta-148 | 2013-10-24 14:34:35 -0700\n\n  * Add gawk to list of optional packages. (Daniel Thayer)\n\n  * Add more script package README files. (Daniel Thayer)\n\n  * Add NEWS about new features of BroControl and upgrade info.\n    (Daniel Thayer)\n\n  * Intel framework notes added to NEWS. (Seth Hall)\n\n  * Temporary OSX Mavericks libc++ issue workaround for getline()\n    problem in ASCII reader. (Bernhard Amann)\n\n  * Change test of identify_data BIF to ignore charset as it may vary\n    with libmagic version. (Jon Siwek)\n\n  * Ensure that the starting BPF filter is logged on clusters. (Seth\n    Hall)\n\n  * Add UDP support to the checksum offload detection script. (Seth\n    Hall)\n\n2.2-beta-133 | 2013-10-23 09:50:16 -0700\n\n  * Fix record coercion tolerance of optional fields. (Jon Siwek)\n\n  * Add NEWS about incompatible local.bro changes, addresses BIT-1047.\n    (Jon Siwek)\n\n  * Fix minor formatting problem in NEWS. (Jon Siwek)\n\n2.2-beta-129 | 2013-10-23 09:47:29 -0700\n\n  * Another batch of documentation fixes and updates. (Daniel Thayer)\n\n2.2-beta-114 | 2013-10-18 14:17:57 -0700\n\n  * Moving the SQLite examples into separate Bro files to turn them\n    into sphinx-btest tests. (Robin Sommer)\n\n2.2-beta-112 | 2013-10-18 13:47:13 -0700\n\n  * A larger chunk of documentation fixes and cleanup. (Daniel Thayer)\n\n    Apart from many smaller improves this includes in particular:\n\n        * Add README files for most Bro frameworks and base/protocols.\n        * Add README files for base/protocols.\n        * Update installation instructions.\n        * Improvements to file analysis docs and conversion to using\n          btest sphinx.\n\n2.2-beta-80 | 2013-10-18 13:18:05 -0700\n\n  * SQLite reader/writer documentation. (Bernhard Amann)\n\n  * Check that the SQLite reader is only used in MANUAL reading mode.\n    (Bernhard Amann)\n\n  * Rename the SQLite writer \"dbname\" configuration option to\n    \"tablename\". (Bernhard Amann)\n\n  * Remove the \"dbname\" configuration option from the SQLite reader as\n    it wasn't used there. (Bernhard Amann)\n\n2.2-beta-73 | 2013-10-14 14:28:25 -0700\n\n  * Fix misc. Coverity-reported issues (leaks, potential null pointer\n    deref, dead code, uninitialized values,\n    time-of-check-time-of-use). (Jon Siwek)\n\n  * Add check for sqlite3 command to tests that require it. (Daniel\n    Thayer)\n\n2.2-beta-68 | 2013-10-14 09:26:09 -0700\n\n  * Add check for curl command to active-http.test. (Daniel Thayer)\n\n2.2-beta-64 | 2013-10-14 09:20:04 -0700\n\n  * Review usage of Reporter::InternalError, addresses BIT-1045.\n\n    Replaced some with InternalWarning or AnalyzerError, the later\n    being a new method which signals the analyzer to not process\n    further input. (Jon Siwek)\n\n  * Add new event for TCP content file write failures:\n    \"contents_file_write_failure\". (Jon Siwek)\n\n2.2-beta-57 | 2013-10-11 17:23:25 -0700\n\n  * Improve Broxygen end-of-sentence detection. (Jon Siwek)\n\n2.2-beta-55 | 2013-10-10 13:36:38 -0700\n\n  * A couple of new TLS extension numbers. (Bernhard Amann)\n\n  * Suport for three more new TLS ciphers. (Bernhard Amann)\n\n  * Removing ICSI notary from default site config. (Robin Sommer)\n\n2.2-beta-51 | 2013-10-07 17:33:56 -0700\n\n  * Polishing the reference and scripting sections of the manual.\n    (Robin Sommer)\n\n  * Fixing the historical CHANGES record. (Robin Sommer)\n\n  * Updating copyright notice. (Robin Sommer)\n\n2.2-beta-38 | 2013-10-02 11:03:29 -0700\n\n  * Fix uninitialized (or unused) fields. (Jon Siwek)\n\n  * Remove logically dead code. (Jon Siwek)\n\n  * Remove dead/unfinished code in unary not expression.  (Jon Siwek)\n\n  * Fix logic for failed DNS TXT lookups. (Jon Siwek)\n\n  * A couple null ptr checks. (Jon Siwek)\n\n  * Improve return value checking and error handling. (Jon Siwek)\n\n  * Remove unused variable assignments. (Jon Siwek)\n\n  * Prevent division/modulo by zero in scripts. (Jon Siwek)\n\n  * Fix unintentional always-false condition. (Jon Siwek)\n\n  * Fix invalidated iterator usage. (Jon Siwek)\n\n  * Fix DNS_Mgr iterator mismatch. (Jon Siwek)\n\n  * Set safe umask when creating script profiler tmp files. (Jon Siwek)\n\n  * Fix nesting/indent level whitespace mismatch. (Jon Siwek)\n\n  * Add checks to avoid improper negative values use. (Jon Siwek)\n\n2.2-beta-18 | 2013-10-02 10:28:17 -0700\n\n  * Add support for further TLS cipher suites. (Bernhard Amann)\n\n2.2-beta-13 | 2013-10-01 11:31:55 -0700\n\n  * Updating bifcl usage message. (Robin Sommer)\n\n  * Fix bifcl getopt() usage. (Jon Siwek)\n\n2.2-beta-8 | 2013-09-28 11:16:29 -0700\n\n  * Fix a \"make doc\" warning. (Daniel Thayer)\n\n2.2-beta-4 | 2013-09-24 13:23:30 -0700\n\n  * Fix for setting REPO in Makefile. (Robin Sommer)\n\n  * Whitespace fix. (Robin Sommer)\n\n  * Removing :doc: roles so that we can render this with docutils\n    directly. (Robin Sommer)\n\n2.2-beta | 2013-09-23 20:57:48 -0700\n\n  * Update 'make dist' target. (Jon Siwek)\n\n2.1-1387 | 2013-09-23 11:54:48 -0700\n\n  * Change submodules to fixed URL. (Jon Siwek)\n\n  * Updating NEWS. (Robin Sommer)\n\n  * Fixing an always false condition. (Robin Sommer)\n\n  * Fix required for compiling with clang 3.3. (Robin Sommer)\n\n2.1-1377 | 2013-09-20 14:38:15 -0700\n\n  * Updates to the scripting introduction. (Scott Runnels)\n\n  * Kill raw input reader's child by process group to reliably clean\n    it up. (Jon Siwek)\n\n2.1-1368 | 2013-09-19 20:07:57 -0700\n\n  * Add more links in the GeoLocation document (Daniel Thayer)\n\n2.1-1364 | 2013-09-19 15:12:08 -0700\n\n  * Add links to Intelligence Framework documentation. (Daniel Thayer)\n\n  * Update Mozilla root CA list. (Bernhard Amann, Jon Siwek)\n\n  * Update documentation of required packages. (Daniel Thayer)\n\n2.1-1359 | 2013-09-18 15:01:50 -0700\n\n  * Make client and server random available on script-level. Addresses\n    BIT-950. (Eric Wustrow)\n\n2.1-1357 | 2013-09-18 14:58:52 -0700\n\n  * Update HLL API and its documentation. (Bernhard Amann)\n\n  * Fix case in HLL where hll_error_margin could be undefined.\n    (Bernhard Amann)\n\n2.1-1352 | 2013-09-18 14:42:28 -0700\n\n  * Fix a number of compiler warnings. (Daniel Thayer)\n\n  * Fix cmake warning about ENABLE_PERFTOOLS not being used. (Daniel\n    Thayer)\n\n2.1-1344 | 2013-09-16 16:20:55 -0500\n\n  * Refactor Analyzer::AddChildAnalyzer and usages. (Jon Siwek)\n\n  * Minor refactor to SSL BinPAC grammer. (Jon Siwek)\n\n  * Minor refactor to Broxygen enum comments. (Jon Siwek)\n\n  * Fix possible (unlikely) use of uninitialized value. (Jon Siwek)\n\n  * Fix/improve dereference-before-null-checks. (Jon Siwek)\n\n  * Fix out-of-bounds memory accesses, and remove a\n    variable-length-array usage. (Jon Siwek)\n\n  * Fix potential mem leak. (Jon Siwek)\n\n  * Fix double-free and deallocator mismatch. (Jon Siwek)\n\n  * Fix another function val reference counting bug. (Jon Siwek)\n\n2.1-1335 | 2013-09-12 16:13:53 -0500\n\n  * Documentation fixes (Daniel Thayer, Jon Siwek)\n\n  * Fix various potential memory leaks. (Jon Siwek)\n\n  * Fix significant memory leak in function unserialization. (Jon Siwek)\n\n  * Fix use-after-free and invalid/mismatch deallocator bugs. (Jon Siwek)\n\n  * Fixed an issue with the HLL_UNIQUE SumStats plugin that caused a reporter error. (Seth Hall)\n\n  * Make the notice $actions field have a default empty set to avoid having to check for it's presence. (Seth Hall)\n\n  * Fix signatures that use identifiers of type table. (Jon Siwek)\n\n  * Fix memory leak if a DNS request fails to be made. (Jon Siwek)\n\n  * Fix memory leak in DNS TXT lookups. (Jon Siwek)\n\n  * Fix raw execution input reader's signal blocking which resulted in lingering processes. (Jon Siwek)\n\n2.1-1306 | 2013-08-31 16:06:05 -0700\n\n  * Reorganized and signifcantly extended documentation. This includes\n    two new chapters contributed by Scott Runnels.\n\n2.1-1216 | 2013-08-31 10:39:40 -0700\n\n\n  * Support for probabilistic set cardinality, using the HyperLogLog\n    algorithm. (Bernhard Amann, Soumya Basu)\n\n    Bro now provides the following BiFs:\n\n        hll_cardinality_init(err: double, confidence: double): opaque of cardinality\n        hll_cardinality_add(handle: opaque of cardinality, elem: any): bool\n        hll_cardinality_merge_into(handle1: opaque of cardinality, handle2: opaque of cardinality): bool\n        hll_cardinality_estimate(handle: opaque of cardinality): double\n        hll_cardinality_copy(handle: opaque of cardinality): opaque of cardinality\n\n2.1-1154 | 2013-08-30 08:27:45 -0700\n\n  * Fix global opaque val segfault. Addresses BIT-1071. (Jon Siwek)\n\n  * Fix malloc/delete mismatch. (Jon Siwek)\n\n  * Fix invalid pointer dereference in AsciiFormatter. (Jon Siwek)\n\n2.1-1150 | 2013-08-29 13:43:01 -0700\n\n  * Fix input framework memory leaks. (Jon Siwek)\n\n  * Fix memory leak in SOCKS analyzer for bad addr types. (Jon Siwek)\n\n  * Fix Bloom filter memory leaks. (Jon Siwek)\n\n2.1-1144 | 2013-08-28 18:51:06 -0700\n\n  * Add bits_per_uid unit test. Addresses BIT-1016. (Jon Siwek)\n\n  * UID optimizations. Addresses BIT-1016. (Jon Siwek)\n\n  * Added a $unique_max field to Reducers for the SumStats::UNIQUE\n    calculation, and using the new option in scan.bro and the FTP\n    bruteforce detection. (Seth Hall)\n\n2.1-1137 | 2013-08-27 13:26:44 -0700\n\n  * Add BiF hexstr_to_bytestring() that does exactly the opposite of\n    bytestring_to_hexstr(). (Bernhard Amann)\n\n2.1-1135 | 2013-08-27 12:16:26 -0700\n\n  * More SumStats fixes. (Seth Hall)\n\n  * Increase UIDs to 96 bits.  (Jon Siwek)\n\n    - The bit-length is adjustable via redef'ing bits_per_uid.\n\n    - Prefix 'C' is added to connection UIDS (including IP tunnels)\n      and 'F' to files.\n\n    Addresses BIT-1016.\n\n2.1-1128 | 2013-08-24 10:27:29 -0700\n\n  * Remove code relict in input framework. (Jon Siwek)\n\n  * Fix documentation for mkdir BIF. (Jon Siwek)\n\n  * File extraction tweaks. (Jon Siwek)\n\n    - Default extraction limit of 100MB now provided via a tuning\n      script loaded in local.bro so that command-line Bro is unlimited\n      by default.\n\n    - Extraction directory is now created on request of file\n      extraction rather than unconditionally in bro_init(). (Jon\n      Siwek)\n\n2.1-1124 | 2013-08-23 16:33:52 -0700\n\n  * Fixed a number of object bugs DNP3 analyzer. (Hui Lin)\n\n2.1-1122 | 2013-08-22 16:52:27 -0700\n\n  * Use macros to create file analyzer plugin classes. (Jon Siwek)\n\n  * Add options to limit extracted file sizes w/ 100MB default. (Jon\n    Siwek)\n\n2.1-1117 | 2013-08-22 08:44:12 -0700\n\n  * A number of input framework fixes and corresponding test stability\n    improvements. (Jon Siwek)\n\n  * Make memory leak tests able to time out.  (Jon Siwek)\n\n  * Fix a compiler warning regarding strncat misuse. (Jon Siwek)\n\n2.1-1103 | 2013-08-21 19:11:34 -0400\n\n  * A number of sumstats fixes. (Seth Hall, Vlad Grigorescu)\n\n  * Fix memory leak w/ when statements. Addresses BIT-1058. (Jon\n    Siwek)\n\n  * Switching to relative submodule paths (Robin Sommer)\n\n2.1-1089 | 2013-08-19 11:25:11 -0700\n\n  * Fix bloom filters' dependence on size_t. (Jon Siwek, Matthias\n    Vallentin).\n\n2.1-1081 | 2013-08-19 11:19:33 -0700\n\n  * New BiF levenshtein_distance() to compute the Levenshtein distance\n    between two strings. (Anthony Kasza)\n\n2.1-1078 | 2013-08-19 09:29:30 -0700\n\n  * Moving sqlite code into new external 3rdparty submodule. (Bernhard\n    Amann)\n\n2.1-1074 | 2013-08-14 10:29:54 -0700\n\n  * Fix timer type enum and timer name array mismatch. (Jon Siwek)\n\n2.1-1072 | 2013-08-14 10:28:51 -0700\n\n  * Adding the unified2 analyzer that reads unified2 files from disk,\n    turning them into events. (Seth Hall)\n\n  * Fixing intel framework tests. (Seth Hall)\n\n2.1-1059 | 2013-08-13 23:52:41 -0400\n\n  * Add file name support to intel framework. (Seth Hall)\n\n  * Add file support to intel framework and slightly restructure\n    intel http handling. (Seth Hall)\n\n2.1-1052 | 2013-08-12 14:38:14 -0700\n\n  * Fixing bug in DNP3 analyzer flagged by compiler warning. (Robin\n    Sommer)\n\n2.1-1050 | 2013-08-12 11:37:44 -0700\n\n  * Experimental DNP3 analyzer. This includes only very basic\n    script-level support at the moment, but quite a number of events\n    are provided. (Hui Lin, Robin Sommer)\n\n2.1-1041 | 2013-08-09 15:32:22 -0700\n\n  * Update coverage baselines for canonical load order of scripts.\n    (Jon Siwek)\n\n2.1-1039 | 2013-08-09 15:30:15 -0700\n\n  * Fix mem leak in DHCP analyzer. (Jon Siwek)\n\n  * Fix a unit test outdated by recent sumstats changes. (Jon Siwek)\n\n2.1-1036 | 2013-08-05 17:29:11 -0400\n\n  * Fix the SSL infinite loop I just created. (Seth Hall)\n\n2.1-1035 | 2013-08-05 16:44:50 -0400\n\n  * Change to SSL log delay to cause the log to write even if delay times out. (Seth Hall)\n\n2.1-1034 | 2013-08-03 20:27:43 -0700\n\n  * A set of DHCP extensions. (Vlad Grigorescu)\n\n     - Leases are logged to dhcp.log as they are seen.\n     - scripts/policy/protocols/dhcp/known-devices-and-hostnames.bro\n     - Added DPD sig.\n\n2.1-1027 | 2013-08-03 01:57:37 -0400\n\n  * Fix a major memory issue in the SumStats framework.\n\n2.1-1026 | 2013-08-02 22:35:09 -0400\n\n  * Fix the SumStats top-k plugin and test. (Seth Hall)\n\n  * Rework of SumStats API to reduce high instantaneous memory\n    use on clusters. (Seth Hall)\n\n  * Large update for the SumStats framework.\n\n     - On-demand access to sumstats results through \"return from\"\n       functions named SumStats::request and Sumstats::request_key.\n       Both functions are tested in standalone and clustered modes.\n\n     - $name field has returned to SumStats which simplifies cluster\n       code and makes the on-demand access stuff possible.\n\n     - Clustered results can only be collected for 1 minute from their\n       time of creation now instead of time of last read.\n\n     - Thresholds use doubles instead of counts everywhere now.\n\n     - Calculation dependency resolution occurs at start up time now\n       instead of doing it at observation time which provide a minor\n       cpu performance improvement.  A new plugin registration mechanism\n       was created to support this change.\n\n     - AppStats now has a minimal doc string and is broken into hook-based\n       plugins.\n\n     - AppStats and traceroute detection added to local.bro (Seth Hall)\n\n2.1-1009 | 2013-08-02 17:19:08 -0700\n\n  * A number of exec module and raw input reader fixes. (Jon Siwek)\n\n2.1-1007 | 2013-08-01 15:41:54 -0700\n\n  * More function documentation. (Bernhard Amann)\n\n2.1-1004 | 2013-08-01 14:37:43 -0700\n\n  * Adding a probabilistic data structure for computing \"top k\"\n    elements. (Bernhard Amann)\n\n    The corresponding functions are:\n\n        topk_init(size: count): opaque of topk\n        topk_add(handle: opaque of topk, value: any)\n        topk_get_top(handle: opaque of topk, k: count)\n        topk_count(handle: opaque of topk, value: any): count\n        topk_epsilon(handle: opaque of topk, value: any): count\n        topk_size(handle: opaque of topk): count\n        topk_sum(handle: opaque of topk): count\n        topk_merge(handle1: opaque of topk, handle2: opaque of topk)\n        topk_merge_prune(handle1: opaque of topk, handle2: opaque of topk)\n\n2.1-971 | 2013-08-01 13:28:32 -0700\n\n  * Fix some build errors. (Jon Siwek)\n\n  * Internal refactoring of how plugin components are tagged/managed.\n    (Jon Siwek)\n\n  * Fix various documentation, mostly related to file analysis. (Jon\n    Siwek)\n\n  * Changing the Bloom filter hashing so that it's independent of\n    CompositeHash. (Robin Sommer)\n\n2.1-951 | 2013-08-01 11:19:23 -0400\n\n  * Small fix to deal with a bug in the SSL log delay mechanism.\n\n2.1-948 | 2013-07-31 20:08:28 -0700\n\n  * Fix segfault caused by merging an empty bloom-filter with a\n    bloom-filter already containing values. (Bernhard Amann)\n\n2.1-945 | 2013-07-30 10:05:10 -0700\n\n  * Make hashers serializable. (Matthias Vallentin)\n\n  * Add docs and use default value for hasher names. (Matthias\n    Vallentin)\n\n2.1-939 | 2013-07-29 15:42:38 -0700\n\n  * Added Exec, Dir, and ActiveHTTP modules. (Seth Hall)\n\n    base/utils/exec.bro provides a module to start external processes\n    asynchronously and retrieve their output on termination.\n    base/utils/dir.bro uses it to monitor a directory for changes, and\n    base/utils/active-http.bro for providing an interface for querying\n    remote web servers.\n\n2.1-930 | 2013-07-29 15:06:07 -0700\n\n  * Major file analysis overhaul in naming and appearance, along with\n    fixes and test updates. (Seth Hall and Jon Siwek)\n\n    Includes:\n\n    * Added protocol description functions that provide a super\n      compressed log representation. (Seth Hall)\n\n    * Added mime types to http.log (Seth Hall)\n\n    * Add jar files to the default MHR lookups. (Seth Hall)\n\n    * Adding CAB files for MHR checking. (Seth Hall)\n\n    * Improve malware hash registry script.\n\n        - Include a link to a virustotal search in the notice sub message field.\n        - Give all information returned from Team Cymru in the notice message.\n        - Add more file types to match on to the default set.\n\n    * Make the custom libmagic database a git submodule.\n\n    * Add an is_orig parameter to file_over_new_connection event.\n\n    * Recorrected the module name to Files.\n\n    * Added Files::analyzer_name to get a more readable name for a\n      file analyzer.\n\n    * Improved and just overall better handled multipart mime\n      transfers in HTTP and SMTP.  HTTP now has orig_fuids and\n      resp_fuids log fields since multiple \"files\" can be transferred\n      with multipart mime in a single request/response pair.  SMTP has\n      an fuids field which has file unique IDs for all parts\n      transferred. FTP and IRC have a log field named fuid added\n      because only a single file can be transferred per irc and ftp\n      log line.\n\n2.1-895 | 2013-07-29 14:07:35 -0700\n\n  * Adding a test for a DNSKEY RR. (Robin Sommer)\n\n2.1-894 | 2013-07-29 16:44:41 -0400\n\n  * Updates for the Intel Framework. (Seth Hall)\n\n      - policy/frameworks/intel/seen is the new location for the\n        scripts that push data into the intel framework for checking.\n\n      - The new policy/frameworks/intel/do_notice script adds an\n        example mechanism for data driven notices.\n\n      - Remove the Intel insertion after heuristically detecting SSH\n        bruteforcing.\n\n      - Intel importing format has changed (refer to docs).\n\n      - All string matching is now case insensitive.\n\n      - SMTP intel script has been updated to extract email\n        addresses correctly.\n\n      - Small fix sneaking into the smtp base script to actually\n        extract individual email addresses in the To: field\n        correctly.\n\n\n2.1-888 | 2013-07-25 12:02:41 -0700\n\n  * Protection about broken traces with empty pcap headers. (Matt\n    Thompson)\n\n2.1-887 | 2013-07-25 11:33:27 -0700\n\n  * Support for Bloom filter. (Matthias Vallentin)\n\n    Bro now provides the following BiFs:\n\n        bloomfilter_basic_init(fp: double, capacity: count, name: string &default=\"\"): opaque of bloomfilter\n        bloomfilter_counting_init(k: count, cells: count, max: count, name: string &default=\"\"): opaque of bloomfilter\n        bloomfilter_add(bf: opaque of bloomfilter, x: any)\n        bloomfilter_lookup(bf: opaque of bloomfilter, x: any): count\n        bloomfilter_merge(bf1: opaque of bloomfilter, bf2: opaque of bloomfilter): opaque of bloomfilter\n        bloomfilter_clear(bf: opaque of bloomfilter)\n\n    Note that currently Bloom filters from separate Bro instances\n    (e.g., from different cluster nodes) cannot be merged.\n\n2.1-826 | 2013-07-25 10:12:26 -0700\n\n  * bif files declared with bif_target() are now automatically\n    compiled in. No more manual includes to pull them in. (Robin\n    Sommer)\n\n  * Covenience make target in testing/btest to update the three\n    coverage tests that usually need tweaking when scripts get\n    added/removed. (Robin Sommer)\n\n2.1-824 | 2013-07-22 14:25:14 -0400\n\n  * Fixed a scriptland state issue that manifested especially badly on proxies. (Seth Hall)\n\n  * Another test fix. (Robin Sommer)\n\n  * Canonyfying the output of core.print-bpf-filters. (Robin Sommer)\n\n2.1-820 | 2013-07-18 12:30:04 -0700\n\n  * Extending external canonifier to remove fractional values from\n    capture_loss.log. (Robin Sommer)\n\n  * Canonifying internal order for plugins and their components to\n    make it deterministic. (Robin Sommer)\n\n  * Small raw reader tweaks that got left our earlier. (Robin Sommer)\n\n2.1-814 | 2013-07-15 18:18:20 -0700\n\n  * Fixing raw reader crash when accessing nonexistant file, and\n    memory leak when reading from file. Addresses #1038. (Bernhard\n    Amann)\n\n2.1-811 | 2013-07-14 08:01:54 -0700\n\n  * Bump sqlite to 3.7.17. (Bernhard Amann)\n\n  * Small test fixes. (Seth Hall)\n\n  * Fix a bug where the same analyzer tag was reused for two different\n    analyzers. (Seth Hall)\n\n  * Moved DPD signatures into script specific directories. Left out\n    the BitTorrent signatures pending further updates to that\n    analyzer. (Seth Hall)\n\n2.1-802 | 2013-07-10 10:55:14 -0700\n\n  * Const adjustment for methods. (Jon Siwek)\n\n2.1-798 | 2013-07-08 13:05:37 -0700\n\n  * Rewrite of the packet filter framework. (Seth Hall)\n\n    This includes:\n\n    - Plugin interface for adding filtering mechanisms.\n\n    - Integrated the packet filter framework with the analyzer\n      framework to retrieve well-known ports from there.\n\n    - Support for BPF-based load balancing (IPv4 and IPv6).  This will\n      tie in with upcoming BroControl support for configuring this.\n\n    - Support for BPF-based connection sampling.\n\n    - Support for \"shunting\" traffic with BPF filters.\n\n    - Replaced PacketFilter::all_packets with\n      PacketFilter::enable_auto_protocol_capture_filters.\n\n2.1-784 | 2013-07-04 22:28:48 -0400\n\n  * Add a call to lookup_connection in SSH scripts to update connval. (Seth Hall)\n\n  * Updating submodule(s). (Robin Sommer)\n\n2.1-782 | 2013-07-03 17:00:39 -0700\n\n  * Remove the SSL log queueing mechanism that was included with the\n    log delay mechanism. (Seth Hall)\n\n2.1-780 | 2013-07-03 16:46:26 -0700\n\n  * Rewrite of the RAW input reader for improved robustness and new\n    features. (Bernhard Amann) This includes:\n\n        - Send \"end_of_data\" event for all kind of streams.\n        - Send \"process_finished\" event with exit code of child\n          process at process termination.\n        - Expose name of input stream to readers.\n        - Better error handling.\n        - New \"force_kill\" option which SIGKILLs processes on reader termination.\n        - Supports reading from stdout and stderr simultaneously.\n        - Support sending data to stdin of child process.\n        - Streaming reads from external commands work without blocking.\n\n2.1-762 | 2013-07-03 16:33:22 -0700\n\n  * Fix to correct support for TLS 1.2. Addresses #1020. (Seth Hall,\n    with help from Rafal Lesniak).\n\n2.1-760 | 2013-07-03 16:31:36 -0700\n\n  * Teach broxygen to generate protocol analyzer plugin reference.\n    (Jon Siwek)\n\n  * Adding 'const' to a number of C++ methods. (Jon Siwek)\n\n2.1-757 | 2013-07-03 16:28:10 -0700\n\n  * Fix redef of table index from clearing table.\n\n    `redef foo[\"x\"] = 1` now acts like `redef foo += { [\"x\"] = 1 }`\n    instead of `redef foo = { [\"x\"] = 1 }`.\n\n    Addresses #1013. (Jon Siwek)\n\n\n2.1-755 | 2013-07-03 16:22:43 -0700\n\n  * Add a general file analysis overview/how-to document. (Jon Siwek)\n\n  * Improve file analysis doxygen comments. (Jon Siwek)\n\n  * Improve tracking of HTTP file extraction. http.log now has files\n    taken from request and response bodies in different fields for\n    each, and can now track multiple files per body. That is, the\n    \"extraction_file\" field is now \"extracted_request_files\" and\n    \"extracted_response_files\". Addresses #988. (Jon Siwek)\n\n  * Fix HTTP multipart body file analysis. Each part now gets assigned\n    a different file handle/id. (Jon Siwek)\n\n  * Remove logging of analyzers field of FileAnalysis::Info. (Jon\n    Siwek)\n\n  * Remove extraction counter in default file extraction scripts. (Jon\n    Siwek)\n\n  * Remove FileAnalysis::postpone_timeout.\n    FileAnalysis::set_timeout_interval can now perform same function.\n    (Jon Siwek)\n\n  * Make default get_file_handle handlers &priority=5 so they're\n    easier to override. (Jon Siwek)\n\n  * Add input interface to forward data for file analysis. The new\n    Input::add_analysis function is used to automatically forward\n    input data on to the file analysis framework. (Jon Siwek)\n\n  * File analysis framework interface simplifications. (Jon Siwek)\n\n    - Remove script-layer data input interface (will be managed directly\n      by input framework later).\n\n    - Only track files internally by file id hash.  Chance of collision\n      too small to justify also tracking unique file string.\n\n\n2.1-741 | 2013-06-07 17:28:50 -0700\n\n  * Fixing typo that could cause an assertion to falsely trigger.\n    (Robin Sommer)\n\n2.1-740 | 2013-06-07 16:37:32 -0700\n\n  * Fix for CMake 2.6.x. (Robin Sommer)\n\n2.1-738 | 2013-06-07 08:38:13 -0700\n\n  * Remove invalid free on non-allocated pointer in hash function\n    object. Addresses #1018. (Matthias Vallentin)\n\n2.1-736 | 2013-06-06 10:05:20 -0700\n\n  * New \"magic constants\" @DIR and @FILENAME that expand to the\n    directory path of the current script and just the script file name\n    without path, respectively. (Jon Siwek)\n\n2.1-731 | 2013-06-04 21:19:08 -0700\n\n  * Reorginization of internal protocol analyzer code. We're moving\n    them to a modularized structure, based on a plugin model. Along\n    with this change comes generic plugin infrastructure that we'll\n    later extend to other Bro component as well. For now all plugins\n    are compiled in statically, but in the future we plan to also\n    enable dynamic loading at run time. (Robin Sommer)\n\n  * Ignoring file ids in external tests. (Robin Sommer)\n\n2.1-675 | 2013-06-02 20:03:19 -0700\n\n  * Fix a compiler warning. (Robin Sommer)\n\n  * Allow named vector/set/table/record constructors. Addresses #983.\n    (Jon Siwek)\n\n  * Adding Makefile target test-all that also runs the BroControl test\n    suite.  (Robin Sommer)\n\n2.1-664 | 2013-05-28 21:37:46 -0700\n\n  * Dangling pointer fix. Addresses #1004. (Jon Siwek)\n\n2.1-659 | 2013-05-24 17:24:18 -0700\n\n  * Fix broken/missing documentation. (Jon Siwek)\n\n  * Fixing test that would fail without ES/curl support. (Robin\n    Sommer)\n\n2.1-656 | 2013-05-17 15:58:07 -0700\n\n  * Fix mutex lock problem for writers. (Bernhard Amann)\n\n2.1-654 | 2013-05-17 13:49:52 -0700\n\n  * Tweaks to sqlite3 configuration to address threading issues.\n    (Bernhard Amann)\n\n2.1-651 | 2013-05-17 13:37:16 -0700\n\n  * Fix uninitialized DPM member. (Jon Siwek)\n\n  * Fix issue with transaction ID reuse in a single DNS connection. (Seth Hall)\n\n  * New function added to the queue.bro script to support peeking at\n    the new gettable item in the queue without removing it. (Seth Hall)\n\n2.1-647 | 2013-05-17 07:47:14 -0700\n\n  * Fixing Broxygen generation to have BROMAGIC set. (Robin Sommer)\n\n  * Fix for 'fchmod undeclared here' on FreeBSD. (Robin Sommer)\n\n  * CMake policy fix to avoid errors with older versions. (Robin\n    Sommer)\n\n2.1-641 | 2013-05-15 18:15:09 -0700\n\n  * Test update. (Robin Sommer)\n\n2.1-640 | 2013-05-15 17:24:09 -0700\n\n  * Support for cleaning up threads that have terminated. (Bernhard\n    Amann and Robin Sommer). Includes:\n\n      - Both logging and input frameworks now clean up threads once\n        they aren't further needed anymnore.\n\n      - New function Log::remove_stream() that removes a logging\n        stream, stopping all writer threads that are associated with\n        it. Note, however, that removing a *filter* from a stream\n        still doesn't clean up any threads. The problem is that\n        because of the output paths potentially being created\n        dynamically it's unclear if the writer thread will still be\n        needed in the future.\n\n2.1-626 | 2013-05-15 16:09:31 -0700\n\n  * Add \"reservoir\" sampler for SumStats framework. This maintains\n    a set of N uniquely distributed random samples. (Bernhard Amann)\n\n2.1-619 | 2013-05-15 16:01:42 -0700\n\n  * SQLite reader and writer combo. This allows to read/write\n    persistent data from on disk SQLite databases. The current\n    interface is quite low-level, we'll add higher-level abstractions\n    in the future. (Bernhard Amann)\n\n2.1-576 | 2013-05-15 14:29:09 -0700\n\n  * Initial version of new file analysis framework. This moves most of\n    the processing of file content from script-land into the core,\n    where it belongs. Much of this is an internal change, and at this\n    point the new code has essentially feature-equality with the old\n    one. More script-level changes to come. (Jon Siwek)\n\n2.1-502 | 2013-05-10 19:29:37 -0700\n\n  * Allow default function/hook/event parameters. Addresses #972. (Jon\n    Siwek)\n\n  * Change the endianness parameter of bytestring_to_count() BIF to\n    default to false (big endian). (Jon Siwek)\n\n2.1-500 | 2013-05-10 19:22:24 -0700\n\n  * Fix to prevent merge-hook of SumStat's unique plugin from damaging\n    source data. (Bernhard Amann)\n\n2.1-498 | 2013-05-03 17:44:08 -0700\n\n  * Table lookups return copy of non-const &default vals. This\n    prevents unintentional modifications to the &default value itself.\n    Addresses #981.  (Jon Siwek)\n\n2.1-496 | 2013-05-03 15:54:47 -0700\n\n  * Fix memory leak and unnecessary allocations in OpaqueVal.\n    Addresses #986. (Matthias Vallentin)\n\n2.1-492 | 2013-05-02 12:46:26 -0700\n\n  * Work-around for sumstats framework not propagating updates after\n    intermediate check in cluster environments. (Bernhard Amann)\n\n  * Always apply tcp_connection_attempt. Before this change it was\n    only applied when a connection_attempt() event handler was\n    defined. (Robin Sommer)\n\n  * Fixing coverage.bare-mode-errors test. (Robin Sommer)\n\n2.1-487 | 2013-05-01 18:03:22 -0700\n\n  * Always apply tcp_connection_attempt timer, even if no\n    connection_attempt() event handler is defined. (Robin Sommer)\n\n2.1-486 | 2013-05-01 15:28:45 -0700\n\n  * New framework for computing summary statistics in\n    base/framework/sumstats. This replaces the metrics frameworks, and\n    comes with a number of applications build on top, see NEWS. More\n    documentation to follow. (Seth Hall)\n\n2.1-397 | 2013-04-29 21:19:00 -0700\n\n  * Fixing memory leaks in CompHash implementation. Addresses #987.\n    (Robin Sommer)\n\n2.1-394 | 2013-04-27 15:02:31 -0700\n\n  * Fixed a bug in the vulnerable software script and added a test.\n    (Seth Hall)\n\n  * Fix schedule statements used outside event handlers. Addresses\n    #974. (Jon Siwek)\n\n  * Fix record coercion for default inner record fields. Addresses\n    #973. (Jon Siwek)\n\n  * Add bytestring_to_count function to bro.bif. Addresses #968. (Yun\n    Zheng Hu)\n\n2.1-386 | 2013-03-22 12:41:50 -0700\n\n  * Added reverse() function to strings.bif. (Yun Zheng Hu)\n\n2.1-384 | 2013-03-22 12:10:14 -0700\n\n  * Fix record constructors in table initializer indices.  Addresses\n    #660. (Jon Siwek)\n\n2.1-382 | 2013-03-22 12:01:34 -0700\n\n  * Add support for 802.1ah (Q-in-Q). Addresses #641. (Seth Hall)\n\n2.1-380 | 2013-03-18 12:18:10 -0700\n\n  * Fix gcc compile warnings in base64 encoder and benchmark reader.\n    (Bernhard Amann)\n\n2.1-377 | 2013-03-17 17:36:09 -0700\n\n  * Fixing potential leak in DNS error case. (Vlad Grigorescu)\n\n2.1-375 | 2013-03-17 13:14:26 -0700\n\n  * Add base64 encoding functionality, including new BiFs\n\tencode_base64() and encode_base64_custom(). (Bernhard Amann)\n\n  * Replace call to external \"openssl\" in extract-certs-pem.bro with\n\tthat encode_base64(). (Bernhard Amann)\n\n  * Adding a test for extract-certs-pem.pem. (Robin Sommer)\n\n  * Renaming Base64Decoder to Base64Converter. (Robin Sommer)\n\n2.1-366 | 2013-03-17 12:35:59 -0700\n\n  * Correctly handle DNS lookups for software version ranges. (Seth\n    Hall)\n\n  * Improvements to vulnerable software detection. (Seth Hall)\n\n     - Add a DNS based updating method.  This needs to be tested\n       still.\n\n     - Vulnerable version ranges are used now instead of only single\n       versions.  This can deal with software with multiple stable\n       major versions.\n\n  * Update software version parsing and comparison to account for a\n    third numeric subversion. Also, $addl is now compared numerically\n    if the value is actually numeric. (Seth Hall)\n\n2.1-361 | 2013-03-13 07:18:22 -0700\n\n  * Add check for truncated link frames. Addresses #962. (Jacob\n    Baines)\n\n  * Fix large memory allocation in IP fragment reassembly. Addresses\n    #961. (Jacob Baines)\n\n2.1-357 | 2013-03-08 09:18:35 -0800\n\n  * Fix race-condition in table-event test. (Bernhard Amann)\n\n  * s/bro-ids.org/bro.org/g. (Robin Sommer)\n\n2.1-353 | 2013-03-07 13:31:37 -0800\n\n  * Fix function type-equivalence requiring same parameter names.\n    Addresses #957. (Jon Siwek)\n\n2.1-351 | 2013-03-07 13:27:29 -0800\n\n  * Fix new/delete mismatch. Addresses #958. (Jacob Baines)\n\n  * Fix compiler warnings. (Jon Siwek)\n\n2.1-347 | 2013-03-06 16:48:44 -0800\n\n  * Remove unused parameter from vector assignment method. (Bernhard Amann)\n\n  * Remove the byte_len() and length() bifs. (Bernhard Amann)\n\n2.1-342 | 2013-03-06 15:42:52 -0800\n\n  * Moved the Notice::notice event and Notice::policy table to both be\n    hooks. See documentation and NEWS for information. (Seth Hall).\n\n2.1-338 | 2013-03-06 15:10:43 -0800\n\n  * Fix init of local sets/vectors via curly brace initializer lists.\n    (Jon Siwek)\n\n2.1-336 | 2013-03-06 15:08:06 -0800\n\n  * Fix memory leaks resulting from 'when' and 'return when'\n    statements. Addresses #946. (Jon Siwek)\n\n  * Fix three bugs with 'when' and 'return when' statements. Addresses\n    #946. (Jon Siwek)\n\n2.1-333 | 2013-03-06 14:59:47 -0800\n\n  * Add parsing for GTPv1 extension headers and control messages.  (Jon Siwek)\n\n    This includes:\n\n      - A new generic gtpv1_message() event generated for any GTP\n        message type.\n\n      - Specific events for the create/update/delete PDP context\n        request/response messages.\n\n    Addresses #934.\n\n2.1-331 | 2013-03-06 14:54:33 -0800\n\n  * Fix possible null pointer dereference in identify_data BIF. Also\n    centralized libmagic calls for consistent error handling/output.\n    (Jon Siwek)\n\n  * Fix build on OpenBSD 5.2. (Jon Siwek)\n\n2.1-328 | 2013-02-05 01:34:29 -0500\n\n  * New script to query the ICSI Certificate Notary\n    (http://notary.icsi.berkeley.edu/) over DNS and add information\n    to the SSL log at runtime. (Matthias Vallentin)\n\n  * Add delayed logging to SSL base scripts. (Matthias Vallentin)\n\n2.1-319 | 2013-02-04 09:45:34 -0800\n\n  * Update input tests to use exit_only_after_terminate. (Bernhard\n    Amann)\n\n  * New option exit_only_after_terminate to prevent Bro from exiting.\n    If set, the main loop won't terminate before somebody calls\n    terminate(). (Robin Sommer)\n\n2.1-311 | 2013-02-01 08:03:01 -0800\n\n  * Updating submodule(s).\n\n2.1-310 | 2013-01-30 20:09:27 -0800\n\n  * Add an error for record coercions that would orphan a field. (Jon\n    Siwek)\n\n  * Fixing several scripts where a field in an inlined record was\n    never removed after a code refactor. (Jon Siwek)\n\n2.1-307 | 2013-01-25 13:50:57 -0800\n\n  * Fix runaway reference counting bug in record coercion. (Jon Siwek)\n\n  * Fix memory leak in some reporter messaging cases. (Jon Siwek)\n\n2.1-304 | 2013-01-23 19:43:27 -0800\n\n  * Making a test portable. (Robin Sommer)\n\n2.1-302 | 2013-01-23 16:17:29 -0800\n\n  * Refactoring ASCII formatting/parsing from loggers/readers into a\n    separate AsciiFormatter class. (Bernhard Amann)\n\n  * Fix uninitialized locals in event/hook handlers from having a\n    value. Addresses #932. (Jon Siwek)\n\n  * Add a null value check in CompositeHash::ComputeHash. Addresses\n    #930. (Jon Siwek)\n\n  * Change reporter messages to more reliably print to stderr.\n    Addressed #930 (and revisits #836). (Jon Siwek)\n\n  * Changing test=suite's btest call to use \"-j\" instead of \"-j 5\".\n    (Robin Sommer)\n\n  * Require \"case\" blocks to end with either \"break\", \"return\", or a\n    new \"fallthrough\" statement that passes control on to the\n    subsequent case. This gives us the best mix of safety,\n    readability, and flexibility. Addresses #754. (Jon Siwek)\n\n2.1-279 | 2013-01-18 17:18:22 -0800\n\n  * Revert \"Trick for parallelizing input framework unit tests.\" The\n    old way of doing the tests seems more reliable for now. (Jon\n    Siwek)\n\n  * Fixing variable size issues with http response code in\n    ElasticSearch writer. (Gilbert Clark)\n\n  * Removing unused class member. (Robin Sommer)\n\n  * Add opaque type-ignoring for the accept_unsupported_types input\n    framework option. (Bernhard Amann)\n\n2.1-271 | 2013-01-08 10:18:57 -0800\n\n  * Change substring index notation to use a colon.  String slice\n    notation is now written as `s[1:2]`. Addresses #422. (Jon Siwek)\n\n2.1-268 | 2013-01-07 09:43:44 -0800\n\n  * Fix memory leak in OpaqueType::DoUnserialize. (Jon Siwek)\n\n2.1-265 | 2012-12-20 17:38:42 -0800\n\n  * Add array-style index accessor for strings.  Addresses #422. (Jon\n    Siwek)\n\n    The index expression can take up to two indices for the start and\n    end index of the substring to return (e.g. \"mystring[1,3]\").\n    Negative indices are allowed, with -1 representing the last\n    character in the string.  The indexing is not cyclic -- if the\n    starting index is >= the length of the string an empty string is\n    returned, and if the ending index is >= the length of the string\n    then it's interpreted as the last index of the string.  Assigning\n    to substrings accessed like this isn't allowed.\n\n2.1-263 | 2012-12-20 16:22:09 -0800\n\n  * Bro's language now has a new set of types \"opaque of X\". (Matthias\n    Vallentin)\n\n    Opaque values can be passed around like other values but they can\n    only be manipulated with BiF functions, not with other operators.\n    Currently, the following opaque types are supported:\n\n        - opaque of md5\n        - opaque of sha1\n        - opaque of sha256\n        - opaquey of entropy.\n\n    They go along with the corrsponding BiF functions md5_*, sha1_*,\n    sha256_*, and entropy_*, respectively. Note that these functions\n    have changed their signatures to work with opaques types rather\n    than global state as it was before.\n\n2.1-240 | 2012-12-20 15:21:07 -0800\n\n  * Improve error for invalid use of types as values. Addresses #923.\n    (Jon Siwek)\n\n2.1-238 | 2012-12-20 15:11:25 -0800\n\n  * Finish implementation of script-layer switch statement. Addresses\n    #754. (Jon Siwek)\n\n    They behave like C-style switches except case labels can be\n    comprised of multiple literal constants delimited by commas.  Only\n    atomic types are allowed for now.  Case label bodies that don't\n    execute a \"return\" or \"break\" statement will fall through to\n    subsequent cases.  A default case label is allowed.\n\n  * Fix a case where c$resp$size is misrepresented.  Addresses #730.\n    (Jon Siwek)\n\n2.1-234 | 2012-12-20 12:12:19 -0800\n\n  * Fix return value of hook calls that have no handlers. For this\n    case, the return value is always true. (Jon Siwek)\n\n  * Fix to_port() BIF for port strings with a port number of zero.\n    (Jon Siwek)\n\n2.1-231 | 2012-12-14 14:51:35 -0800\n\n  * Make const variables actually constant. Both local and global\n    variables declared with \"const\" could be modified, but now\n    expressions that would modify them generate an error message at\n    parse-time. Addresses #922. (Jon Siwek)\n\n2.1-229 | 2012-12-14 14:46:12 -0800\n\n  * Fix memory leak in ASCII reader when encoutering errors in input.\n    (Bernhard Amann)\n\n  * Improvements for the \"bad checksums\" detector to make it detect\n    bad TCP checksums. (Seth Hall)\n\n2.1-223 | 2012-12-12 14:25:15 -0800\n\n  * Trick for parallelizing input framework unit tests. Instead of\n    loading listen.bro to block until files are read, just read a pcap\n    file in pseudo-realtime. (Jon Siwek)\n\n  * Fix reliability of a unit test that relies on when statements.\n    (Jon Siwek)\n\n  * Remove unused attributes. (Daniel Thayer)\n        - Removed attributes &postprocessor and &match from documentation and source code.\n        - Removed undocumented attribute &attr from source code.\n        - Removed internal attribute \"(&tracked)\" from documentation.\n\n2.1-218 | 2012-12-10 14:45:04 -0800\n\n  * Add GPRS Tunnelling Protocol (GTPv1) decapsulation. This currently\n    supports automatic decapsulation of GTP-U packets on UDP port 2152.\n    The GTPv1 headers for such tunnels can be inspected by handling\n    the \"gtpv1_g_pdu_packet\" event, which has a parameter of type\n    \"gtpv1_hdr\". Addresses #690. (Jon Siwek; derived from patch by\n    Carsten Langer)\n\n  * Change BinPAC exceptions in AYIYA/GTP analyzers to do\n    \"protocol_violation\". (Jon Siwek)\n\n2.1-212 | 2012-12-07 19:42:03 -0800\n\n  * Changing the HTTP parser to accept request methods in alignment\n    with the RFC. (Robin Sommer)\n\n2.1-209 | 2012-12-05 16:44:04 -0800\n\n  * Adapting the HTTP request line parsing to only accept methods\n    consisting of letters [A-Za-z]. (Robin Sommer)\n\n2.1-207 | 2012-12-05 15:47:32 -0800\n\n  * Reporting warnings if kill/waitpid fail in communication system.\n    (Bill Parker)\n\n  * Replace() bzero with memset(). (Bill Parker)\n\n  * Merge remote-tracking branch 'vlad/topic/vladg/http-verbs'\n\n    * vlad/topic/vladg/http-verbs:\n      A test for HTTP methods, including some horribly illegal requests.\n      Remove hardcoded HTTP verbs from the analyzer (#741)\n\n    I added a \"bad_HTTP_request\" weird for HTTP request lines that don't\n    have more than a single word.\n\n    Closes #741. (Robin Sommer)\n\n  * A test for HTTP methods, including some horribly illegal requests. (Vlad Grigorescu)\n\n  * Remove hardcoded HTTP verbs from the analyzer (#741) (Vlad Grigorescu)\n\n\n2.1-203 | 2012-12-05 14:36:56 -0800\n\n  * Fix segfault: Synchronization of state between connecting peers\n    now skips over identifiers that aren't initialized with a value\n    yet. Addresses #66. (Jon Siwek)\n\n  * Fix segfault: Delete correct entry in error case in input\n    framework. (Bernhard Amann)\n\n  * Bad record constructor initializers now give an error. Addresses\n    #34. (Jon Siwek)\n\n  * Invalid vector indices now generate error message. Addresses #24.\n    (Jon Siwek)\n\n  * Bump CPack RPM package requirement to Python >= 2.6.0. (Jon Siwek)\n\n  * Interpreter exceptions occurring in \"when\" blocks are now handled.\n    Addresses #779 (Jon Siwek)\n\n2.1-195 | 2012-12-03 14:50:33 -0800\n\n  * Catching out-of-memory in patricia tree code. (Bill Parker)\n\n2.1-194 | 2012-12-03 14:36:26 -0800\n\n  * Renaming ASCII writer filter option 'only_single_header_row' to\n    'tsv'. Also clarifying usage. Closes #912. (Robin Sommer)\n\n2.1-193 | 2012-12-03 14:11:14 -0800\n\n  * Fix a set of bugs with table/set attributes. (Jon Siwek)\n\n    - Identifiers that are initialized with set()/table() constructor\n      expressions now inherit attributes from the expression.  Before,\n      statements like\n\n         const i: set[string] = set() &redef;\n\n      associated the attribute with the set() constructor, but not the\n      \"i\" identifier, preventing redefinition.  Addresses #866.\n\n    - Allow &default attribute to apply to tables initialized as empty\n      (via either \"{ }\" or \"table()\") or if the expression supplied to it\n      can evaluate to a type that's promotable to the same yield type as\n      the table.\n\n2.1-191 | 2012-12-03 14:08:56 -0800\n\n  * Add test of record() constructor to table initializer unit test.\n    (Jon Siwek)\n\n  * Fix table(), set(), vector() constructors in table initializer\n    lists. Also adds type checking of yield values to table()\n    constructor and fixes the type checking of yield values in\n    vector() constructor. Addresses #5. (Jon Siwek)\n\n2.1-188 | 2012-12-03 14:04:29 -0800\n\n  * Hook functions now callable with \"hook\" expression (i.e., hook is\n    no longer a statement). The return value of the call is an\n    implicit boolean value of T if all hook handlers ran, or F if one\n    hook handler exited as a result of a break statement and\n    potentially prevented other handlers from running.\n\n    Scripts don't need to declare hooks with an explicit return type of bool\n    (internally, that's assumed), and any values given to (optional) return\n    statements in handler definitions are just ignored.\n\n    Addresses #918. (Jon Siwek)\n\n  * Clarification in hook documentation. (Jon Siwek)\n\n2.1-184 | 2012-12-03 13:59:50 -0800\n\n  * Slightly fix up file name extraction from Content-Disposition\n    headers. (Seth Hall)\n\n  * Adding -b flag to bro in unit tests so they run faster.\n\n  * Fixed a DNS attribute issue. Reported by Matt Thompson. (Seth\n    Hall)\n\n  * Adding NEWS placeholder for hooks and CSV mode. (Robin Sommer)\n\n2.1-178 | 2012-11-23 19:35:32 -0800\n\n  * The ASCII writer now supports a new filter config option\n    \"only_single_header_row\" that turns the output into CSV format\n    when set to \"T\". (Carsten Langer)\n\n  * Add new function flavor called a \"hook\". This new flavor of\n    function behaves like a \"synchronous event\". See\n    doc/scripts/builtins.rst more details on usage. (Jon Siwek)\n\n  * Improve auto-generated enum documentation. The names of enum types\n    are tracked so that variables holding a value of a given enum type\n    can generate a reference to it instead of just listing the type as\n    a generic \"enum\". (Jon Siwek)\n\n2.1-171 | 2012-11-23 18:24:15 -0800\n\n  * Fix ambiguity between composite table index and record ctor\n    expressions. If a table type is \"global t = table[conn_id, bool]\n    of count\", then checking membership like \"[c$id, is_orig] in t\"\n    now works. Addresses #80. (Jon Siwek)\n\n2.1-169 | 2012-11-23 18:21:32 -0800\n\n  * Fix some warnings from sphinx when building docs. (Jon Siwek)\n\n2.1-167 | 2012-11-14 13:19:17 -0800\n\n  * Add a new BIF \"bytestring_to_double\" for converting from a binary\n    representation of a double. Addresses #908. (Carsten Langer/Daniel\n    Thayer)\n\n2.1-162 | 2012-11-13 17:29:00 -0800\n\n  * Fix modbus register array parsing. (Jon Siwek)\n\n  * Adjustments to modbus test cases. (Jon Siwek)\n\n2.1-157 | 2012-11-08 16:22:00 -0800\n\n  * Fix for lookup_hostname BIF. (Jon Siwek)\n\n  * Fix for modbus test portability. (Robin Sommer)\n\n2.1-152 | 2012-11-05 16:52:34 -0800\n\n  * Initial version of a completely reworked intelligence framework.\n    See doc/intel.rst for more information. (Seth Hall)\n\n  * Experimental Modbus analyzer. See policy/protocols/modbus/* for\n    example policies. (Dina Hadziosmanovic, Seth Hall)\n\n2.1-112 | 2012-11-05 13:58:20 -0800\n\n  * New base script for detecting cases of checksum offloading.\n    Reporter messages will now tell if one has bad checksums. (Seth\n    Hall)\n\n  * Clarifying ownership rules for BroString constructors. (Robin\n    Sommer)\n\n2.1-109 | 2012-11-05 13:39:34 -0800\n\n  * Add detection rate threshold for MHR. (Vlad Grigorescu)\n\n  * lookup_hostname_txt fixes. (Vlad Grigorescu)\n\n2.1-104 | 2012-11-01 10:37:50 -0700\n\n  * A new built-in function lookup_hostname_txt() provides support for\n    DNS TXT queries. (Vlad Grigorescu)\n\n2.1-101 | 2012-10-31 14:30:26 -0700\n\n  * Documentation reorg: The install info has been consolidated into a\n    single document (INSTALL), the upgrade info has been moved from\n    the FAQ to a section in the install doc, and the \"upgrading from\n    1.5 to 2.0\" document has been updated (and renamed) to also\n    include 2.0 to 2.1 upgrade info. (Daniel Thayer)\n\n2.1-96 | 2012-10-31 14:23:50 -0700\n\n  * Renaming option defining the frequency of alarm summary mails to\n    'Logging::default_alarm_mail_interval'. (Daniel Thayer)\n\n2.1-91 | 2012-10-24 16:04:47 -0700\n\n  * Adding PPPoE support to Bro. (Seth Hall)\n\n2.1-87 | 2012-10-24 15:40:06 -0700\n\n  * Adding missing &redef for some TCP options. Addresses #905, #906,\n    #907. (Carsten Langer)\n\n2.1-86 | 2012-10-24 15:37:11 -0700\n\n  * Add parsing rules for IPv4/IPv6 subnet literal constants.\n    Addresses #888. (Jon Siwek)\n\n2.1-84 | 2012-10-19 15:12:56 -0700\n\n  * Added a BiF strptime() to wrap the corresponding C function. (Seth\n    Hall)\n\n2.1-82 | 2012-10-19 15:05:40 -0700\n\n  * Add IPv6 support to signature header conditions. (Jon Siwek)\n\n    - \"src-ip\" and \"dst-ip\" conditions can now use IPv6 addresses/subnets.\n      They must be written in colon-hexadecimal representation and enclosed\n      in square brackets (e.g. [fe80::1]).  Addresses #774.\n\n    - \"icmp6\" is now a valid protocol for use with \"ip-proto\" and \"header\"\n      conditions.  This allows signatures to be written that can match\n      against ICMPv6 payloads.  Addresses #880.\n\n    - \"ip6\" is now a valid protocol for use with the \"header\" condition.\n      (also the \"ip-proto\" condition, but it results in a no-op in that\n      case since signatures apply only to the inner-most IP packet when\n      packets are tunneled).  This allows signatures to match specifically\n      against IPv6 packets (whereas \"ip\" only matches against IPv4 packets).\n\n    - \"ip-proto\" conditions can now match against IPv6 packets.  Before,\n      IPv6 packets were just silently ignored which meant DPD based on\n      signatures did not function for IPv6 -- protocol analyzers would only\n      get attached to a connection over IPv6 based on the well-known ports\n      set in the \"dpd_config\" table.\n\n2.1-80 | 2012-10-19 14:48:42 -0700\n\n  * Change how \"gridftp\" gets added to service field of connection\n    records. In addition to checking for a finished SSL handshake over\n    an FTP connection, it now also requires that the SSL handshake\n    occurs after the FTP client requested AUTH GSSAPI, more\n    specifically identifying the characteristics of GridFTP control\n    channels. Addresses #891. (Jon Siwek)\n\n  * Allow faster rebuilds in certain cases. Previously, when\n    rebuilding with a different \"--prefix\" or \"--scriptdir\", all Bro\n    source files were recompiled.  With this change, only util.cc is\n    recompiled. (Daniel Thayer)\n\n2.1-76 | 2012-10-12 10:32:39 -0700\n\n  * Add support for recognizing GridFTP connections as an extension to\n    the standard FTP analyzer. (Jon Siwek)\n\n    This is enabled by default and includes:\n\n      - An analyzer for GSI mechanism of GSSAPI FTP AUTH method. GSI\n        authentication involves an encoded TLS/SSL handshake over the\n        FTP control session. For FTP sessions that attempt GSI\n        authentication, the *service* field of the connection log will\n        include \"gridftp\" (as well as also \"ftp\" and \"ssl\").\n\n      - Add an example of a GridFTP data channel detection script. It\n        relies on the heuristics of GridFTP data channels commonly\n        default to SSL mutual authentication with a NULL bulk cipher\n        and that they usually transfer large datasets (default\n        threshold of script is 1 GB).  The script also defaults to\n        skip_further_processing() after detection to try to save\n        cycles analyzing the large, benign connection.\n\n        For identified GridFTP data channels, the *services* fields of\n        the connection log will include \"gridftp-data\".\n\n  * Add *client_subject* and *client_issuer_subject* as &log'd fields\n    to SSL::Info record.  Also add *client_cert* and\n    *client_cert_chain* fields to track client cert chain. (Jon Siwek)\n\n  * Add a script in base/protocols/conn/polling that generalizes the\n    process of polling a connection for interesting features. The\n    GridFTP data channel detection script depends on it to monitor\n    bytes transferred. (Jon Siwek)\n\n2.1-68 | 2012-10-12 09:46:41 -0700\n\n  * Rename the Input Framework's update_finished event to end_of_data.\n    It will now not only fire after table-reads have been completed,\n    but also after the last event of a whole-file-read (or\n    whole-db-read, etc.). (Bernhard Amann)\n\n  * Fix for DNS log problem when a DNS response is seen with 0 RRs.\n    (Seth Hall)\n\n2.1-64 | 2012-10-12 09:36:41 -0700\n\n  * Teach --disable-dataseries/--disable-elasticsearch to ./configure.\n    Addresses #877. (Jon Siwek)\n\n  * Add --with-curl option to ./configure. Addresses #877. (Jon Siwek)\n\n2.1-61 | 2012-10-12 09:32:48 -0700\n\n  * Fix bug in the input framework: the config table did not work.\n    (Bernhard Amann)\n\n2.1-58 | 2012-10-08 10:10:09 -0700\n\n  * Fix a problem with non-manager cluster nodes applying\n    Notice::policy. This could, for example, result in duplicate\n    emails being sent if Notice::emailed_types is redef'd in local.bro\n    (or any script that gets loaded on all cluster nodes). (Jon Siwek)\n\n2.1-56 | 2012-10-03 16:04:52 -0700\n\n  * Add general FAQ entry about upgrading Bro. (Jon Siwek)\n\n2.1-53 | 2012-10-03 16:00:40 -0700\n\n  * Add new Tunnel::delay_teredo_confirmation option that indicates\n    that the Teredo analyzer should wait until it sees both sides of a\n    connection using a valid Teredo encapsulation before issuing a\n    protocol_confirmation. Default is on. Addresses #890. (Jon Siwek)\n\n2.1-50 | 2012-10-02 12:06:08 -0700\n\n  * Fix a typing issue that prevented the ElasticSearch timeout to\n    work. (Matthias Vallentin)\n\n  * Use second granularity for ElasticSearch timeouts. (Matthias\n    Vallentin)\n\n  * Fix compile issues with older versions of libcurl, which don't\n    offer *_MS timeout constants. (Matthias Vallentin)\n\n2.1-47 | 2012-10-02 11:59:29 -0700\n\n  * Fix for the input framework: BroStrings were constructed without a\n    final \\0, which makes them unusable by basically all internal\n    functions (like to_count). (Bernhard Amann)\n\n  * Remove deprecated script functionality (see NEWS for details).\n    (Daniel Thayer)\n\n2.1-39 | 2012-09-29 14:09:16 -0700\n\n  * Reliability adjustments to istate tests with network\n    communication. (Jon Siwek)\n\n2.1-37 | 2012-09-25 14:21:37 -0700\n\n  * Reenable some tests that previously would cause Bro to exit with\n    an error. (Daniel Thayer)\n\n  * Fix parsing of large integers on 32-bit systems. (Daniel Thayer)\n\n  * Serialize language.when unit test with the \"comm\" group. (Jon\n    Siwek)\n\n2.1-32 | 2012-09-24 16:24:34 -0700\n\n  * Fix race condition in language/when.bro test. (Daniel Thayer)\n\n2.1-26 | 2012-09-23 08:46:03 -0700\n\n  * Add an item to FAQ page about broctl options. (Daniel Thayer)\n\n  * Add more language tests. We now have tests of all built-in Bro\n    data types (including different representations of constant\n    values, and max./min. values), keywords, and operators (including\n    special properties of certain operators, such as short-circuit\n    evaluation and associativity). (Daniel Thayer)\n\n  * Fix construction of ip6_ah (Authentication Header) record values.\n\n    Authentication Headers with a Payload Len field set to zero would\n    cause a crash due to invalid memory allocation because the\n    previous code assumed Payload Len would always be great enough to\n    contain all mandatory fields of the header. (Jon Siwek)\n\n  * Update compile/dependency docs for OS X. (Jon Siwek)\n\n  * Adjusting Mac binary packaging script. Setting CMAKE_PREFIX_PATH\n    helps link against standard system libs instead of ones that come\n    from other package manager (e.g. MacPorts). (Jon Siwek)\n\n  * Adjusting some unit tests that do cluster communication. (Jon Siwek)\n\n  * Small change to non-blocking DNS initialization. (Jon Siwek)\n\n  * Reorder a few statements in scan.l to make 1.5msecs etc work.\n    Adresses #872. (Bernhard Amann)\n\n2.1-6 | 2012-09-06 23:23:14 -0700\n\n  * Fixed a bug where \"a -= b\" (both operands are intervals) was not\n    allowed in Bro scripts (although \"a = a - b\" is allowed). (Daniel\n    Thayer)\n\n  * Fixed a bug where the \"!=\" operator with subnet operands was\n    treated the same as the \"==\" operator. (Daniel Thayer)\n\n  * Add sleeps to configuration_update test for better reliability.\n    (Jon Siwek)\n\n  * Fix a segfault when iterating over a set when using malformed\n    index. (Daniel Thayer)\n\n2.1 | 2012-08-28 16:46:42 -0700\n\n  * Make bif.identify_magic robust against FreeBSD's libmagic config.\n    (Robin Sommer)\n\n  * Remove automatic use of gperftools on non-Linux systems.\n    --enable-perftools must now explicity be supplied to ./configure\n    on non-Linux systems to link against the tcmalloc library.\n\n  * Fix uninitialized value for 'is_partial' in TCP analyzer. (Jon\n    Siwek)\n\n  * Parse 64-bit consts in Bro scripts correctly. (Bernhard Amann)\n\n  * Output 64-bit counts correctly on 32-bit machines (Bernhard Amann)\n\n  * Input framework fixes, including:  (Bernhard Amann)\n\n    - One of the change events got the wrong parameters.\n\n    - Escape commas in sets and vectors that were unescaped before\n      tokenization.\n\n    - Handling of zero-length-strings as last element in a set was\n      broken (sets ending with a ,).\n\n    - Hashing of lines just containing zero-length-strings was broken.\n\n    - Make set_separators different from , work for input framework.\n\n    - Input framework was not handling counts and ints out of\n      32-bit-range correctly.\n\n    - Errors in single lines do not kill processing, but simply ignore\n      the line, log it, and continue.\n\n  * Update documentation for builtin types. (Daniel Thayer)\n\n    - Add missing description of interval \"msec\" unit.\n\n    - Improved description of pattern by clarifying the issue of\n      operand order and difference between exact and embedded\n      matching.\n\n  * Documentation fixes for signature 'eval' conditions. (Jon Siwek)\n\n  * Remove orphaned 1.5 unit tests. (Jon Siwek)\n\n  * Add type checking for signature 'eval' condition functions. (Jon\n    Siwek)\n\n  * Adding an identifier to the SMTP blocklist notices for duplicate\n    suppression. (Seth Hall)\n\n2.1-beta-45 | 2012-08-22 16:11:10 -0700\n\n  * Add an option to the input framework that allows the user to chose\n    to not die upon encountering files/functions. (Bernhard Amann)\n\n2.1-beta-41 | 2012-08-22 16:05:21 -0700\n\n  * Add test serialization to \"leak\" unit tests that use\n    communication. (Jon Siwek)\n\n  * Change to metrics/basic-cluster unit test for reliability. (Jon\n    Siwek)\n\n  * Fixed ack tracking which could overflow quickly in some\n    situations. (Seth Hall)\n\n  * Minor tweak to coverage.bare-mode-errors unit test to work with a\n    symlinked 'scripts' dir. (Jon Siwek)\n\n2.1-beta-35 | 2012-08-22 08:44:52 -0700\n\n  * Add testcase for input framework reading sets (rather than\n    tables). (Bernhard Amann)\n\n2.1-beta-31 | 2012-08-21 15:46:05 -0700\n\n  * Tweak to rotate-custom.bro unit test. (Jon Siwek)\n\n  * Ignore small mem leak every rotation interval for dataseries logs.\n    (Jon Siwek)\n\n2.1-beta-28 | 2012-08-21 08:32:42 -0700\n\n  * Linking ES docs into logging document. (Robin Sommer)\n\n2.1-beta-27 | 2012-08-20 20:06:20 -0700\n\n  * Add the Stream record to Log:active_streams to make more dynamic\n    logging possible. (Seth Hall)\n\n  * Fix portability of printing to files returned by\n    open(\"/dev/stderr\"). (Jon Siwek)\n\n  * Fix mime type diff canonifier to also skip mime_desc columns. (Jon\n    Siwek)\n\n  * Unit test tweaks/fixes. (Jon Siwek)\n\n    - Some baselines for tests in \"leaks\" group were outdated.\n\n    - Changed a few of the cluster/communication tests to terminate\n      more explicitly instead of relying on btest-bg-wait to kill\n      processes.  This makes the tests finish faster in the success case\n      and makes the reason for failing clearer in the that case.\n\n  * Fix memory leak of serialized IDs when compiled with\n    --enable-debug. (Jon Siwek)\n\n2.1-beta-21 | 2012-08-16 11:48:56 -0700\n\n  * Installing a handler for running out of memory in \"new\". Bro will\n    now print an error message in that case rather than abort with an\n    uncaught exception. (Robin Sommer)\n\n2.1-beta-20 | 2012-08-16 11:43:31 -0700\n\n  * Fixed potential problems with ElasticSearch output plugin. (Seth\n    Hall)\n\n2.1-beta-13 | 2012-08-10 12:28:04 -0700\n\n  * Reporter warnings and error now print to stderr by default. New\n\toptions Reporter::warnings_to_stderr and\n\tReporter::errors_to_stderr to disable. (Seth Hall)\n\n2.1-beta-9 | 2012-08-10 12:24:29 -0700\n\n  * Add more BIF tests. (Daniel Thayer)\n\n2.1-beta-6 | 2012-08-10 12:22:52 -0700\n\n  * Fix bug in input framework with an edge case. (Bernhard Amann)\n\n  * Fix small bug in input framework test script. (Bernhard Amann)\n\n2.1-beta-3 | 2012-08-03 10:46:49 -0700\n\n  * Merge branch 'master' of ssh://git.bro-ids.org/bro (Robin Sommer)\n\n  * Fix configure script to exit with non-zero status on error (Jon\n    Siwek)\n\n  * Improve ASCII output performance. (Robin Sommer)\n\n2.1-beta | 2012-07-30 11:59:53 -0700\n\n  * Improve log filter compatibility with remote logging. Addresses\n    #842. (Jon Siwek)\n\n2.0-907 | 2012-07-30 09:13:36 -0700\n\n  * Add missing breaks to switch cases in\n    ElasticSearch::HTTPReceive(). (Jon Siwek)\n\n2.0-905 | 2012-07-28 16:24:34 -0700\n\n  * Fix log manager hanging on waiting for pending file rotations,\n    plus writer API tweak for failed rotations. Addresses #860. (Jon\n    Siwek and Robin Sommer)\n\n  * Tweaking logs-to-elasticsearch.bro so that it doesn't do anything\n    if ES server is unset. (Robin Sommer)\n\n2.0-902 | 2012-07-27 12:42:13 -0700\n\n  * New variable in logging framework Log::active_streams to indicate\n    Log:ID enums which are currently active. (Seth Hall)\n\n  * Reworked how the logs-to-elasticsearch scripts works to stop\n    abusing the logging framework. (Seth Hall)\n\n  * Fix input test for recent default change on fastpath. (Robin\n    Sommer)\n\n2.0-898 | 2012-07-27 12:22:03 -0700\n\n  * Small (potential performance) improvement for logging framework. (Seth Hall)\n\n  * Script-level rotation postprocessor fix. This fixes a problem with\n    writers that don't have a postprocessor. (Seth Hall)\n\n  * Update input framework documentation to reflect want_record\n    change. (Bernhard Amann)\n\n  * Fix crash when encountering an InterpreterException in a predicate\n    in logging or input Framework. (Bernhard Amann)\n\n  * Input framework: Make want_record=T the default for events\n    (Bernhard Amann)\n\n  * Changing the start/end markers in logs to open/close now\n    reflecting wall clock. (Robin Sommer)\n\n2.0-891 | 2012-07-26 17:15:10 -0700\n\n  * Reader/writer API: preventing plugins from receiving further\n    messages after a failure. (Robin Sommer)\n\n  * New test for input framework that fails to find a file. (Robin\n    Sommer)\n\n  * Improving error handling for threads. (Robin Sommer)\n\n  * Tweaking the custom-rotate test to produce stable output. (Robin\n    Sommer)\n\n2.0-884 | 2012-07-26 14:33:21 -0700\n\n  * Add comprehensive error handling for close() calls. (Jon Siwek)\n\n  * Add more test cases for input framework. (Bernhard Amann)\n\n  * Input framework: make error output for non-matching event types\n    much more verbose. (Bernhard Amann)\n\n2.0-877 | 2012-07-25 17:20:34 -0700\n\n  * Fix double close() in FilerSerializer class. (Jon Siwek)\n\n  * Fix build warnings. (Daniel Thayer)\n\n  * Fixes to ElasticSearch plugin to make libcurl handle http\n    responses correctly. (Seth Hall)\n\n  * Fixing FreeBSD compiler error. (Robin Sommer)\n\n  * Silencing compiler warnings. (Robin Sommer)\n\n2.0-871 | 2012-07-25 13:08:00 -0700\n\n  * Fix complaint from valgrind about uninitialized memory usage. (Jon\n    Siwek)\n\n  * Fix differing log filters of streams from writing to same\n    writer/path (which now produces a warning, but is otherwise\n    skipped for the second). Addresses #842. (Jon Siwek)\n\n  * Fix tests and error message for to_double BIF. (Daniel Thayer)\n\n  * Compile fix. (Robin Sommer)\n\n2.0-866 | 2012-07-24 16:02:07 -0700\n\n  * Correct a typo in usage message. (Daniel Thayer)\n\n  * Fix file permissions of log files (which were created with execute\n    permissions after a recent change). (Daniel Thayer)\n\n2.0-862 | 2012-07-24 15:22:52 -0700\n\n  * Fix initialization problem in logging class. (Jon Siwek)\n\n  * Input framework now accepts escaped ASCII values as input (\\x##),\n    and unescapes appropiately. (Bernhard Amann)\n\n  * Make reading ASCII logfiles work when the input separator is\n    different from \\t. (Bernhard Amann)\n\n  * A number of smaller fixes for input framework. (Bernhard Amann)\n\n2.0-851 | 2012-07-24 15:04:14 -0700\n\n  * New built-in function to_double(s: string). (Scott Campbell)\n\n2.0-849 | 2012-07-24 11:06:16 -0700\n\n  * Adding missing include needed on some systems. (Robin Sommer)\n\n2.0-846 | 2012-07-23 16:36:37 -0700\n\n  * Fix WriterBackend::WriterInfo serialization, reenable ascii\n    start/end tags. (Jon Siwek)\n\n2.0-844 | 2012-07-23 16:20:59 -0700\n\n  * Reworking parts of the internal threading/logging/input APIs for\n    thread-safety. (Robin Sommer)\n\n  * Bugfix for SSL version check. (Bernhard Amann)\n\n  * Changing a HTTP DPD from port 3138 to 3128. Addresses #857. (Robin\n    Sommer)\n\n  * ElasticSearch logging writer. See logging-elasticsearch.rst for\n    more information. (Vlad Grigorescu and Seth Hall).\n\n  * Give configure a --disable-perftools option to disable Perftools\n    support even if found. (Robin Sommer)\n\n  * The ASCII log writer now includes \"#start <timestamp>\" and \"#end\n    <timestamp> lines in the each file. (Robin Sommer)\n\n  * Renamed ASCII logger \"header\" options to \"meta\". (Robin Sommer)\n\n  * ASCII logs now escape '#' at the beginning of log lines. Addresses\n    #763. (Robin Sommer)\n\n  * Fix bug, where in dns.log rcode always was set to 0/NOERROR when\n    no reply package was seen. (Bernhard Amann)\n\n  * Updating to Mozilla's current certificate bundle. (Seth Hall)\n\n2.0-769 | 2012-07-13 16:17:33 -0700\n\n  * Fix some Info:Record field documentation. (Vlad Grigorescu)\n\n  * Fix overrides of TCP_ApplicationAnalyzer::EndpointEOF. (Jon Siwek)\n\n  * Fix segfault when incrementing whole vector values. Also removed\n    RefExpr::Eval(Val*) method since it was never called. (Jon Siwek)\n\n  * Remove baselines for some leak-detecting unit tests. (Jon Siwek)\n\n  * Unblock SIGFPE, SIGILL, SIGSEGV and SIGBUS for threads, so that\n    they now propagate to the main thread. Adresses #848. (Bernhard\n    Amann)\n\n2.0-761 | 2012-07-12 08:14:38 -0700\n\n  * Some small fixes to further reduce SOCKS false positive logs. (Seth Hall)\n\n  * Calls to pthread_mutex_unlock now log the reason for failures.\n    (Bernhard Amann)\n\n2.0-757 | 2012-07-11 08:30:19 -0700\n\n  * Fixing memory leak. (Seth Hall)\n\n2.0-755 | 2012-07-10 16:25:16 -0700\n\n  * Add sorting canonifier to rotate-custom unit test. Addresses #846.\n    (Jon Siwek)\n\n  * Fix many compiler warnings. (Daniel Thayer)\n\n  * Fix segfault when there's an error/timeout resolving DNS requests.\n    Addresses #846. (Jon Siwek)\n\n  * Remove a non-portable test case. (Daniel Thayer)\n\n  * Fix typos in input framework doc. (Daniel Thayer)\n\n  * Fix typos in DataSeries documentation. (Daniel Thayer)\n\n  * Bugfix making custom rotate functions work again. (Robin Sommer)\n\n  * Tiny bugfix for returning writer name. (Robin Sommer)\n\n  * Moving make target update-doc-sources from top-level Makefile to\n    btest Makefile. (Robin Sommer)\n\n2.0-733 | 2012-07-02 15:31:24 -0700\n\n  * Extending the input reader DoInit() API. (Bernhard Amann). It now\n    provides a Info struct similar to what we introduced for log\n    writers, including a corresponding \"config\" key/value table.\n\n  * Fix to make writer-info work when debugging is enabled. (Bernhard\n    Amann)\n\n2.0-726 | 2012-07-02 15:19:15 -0700\n\n  * Extending the log writer DoInit() API. (Robin Sommer)\n\n    We now pass in a Info struct that contains:\n\n        - the path name (as before)\n        - the rotation interval\n        - the log_rotate_base_time in seconds\n        - a table of key/value pairs with further configuration options.\n\n    To fill the table, log filters have a new field \"config: table[string]\n    of strings\". This gives a way to pass arbitrary values from\n    script-land to writers. Interpretation is left up to the writer.\n\n  * Split calc_next_rotate() into two functions, one of which is\n    thread-safe and can be used with the log_rotate_base_time value\n    from DoInit().\n\n  * Updates to the None writer. (Robin Sommer)\n\n        - It gets its own script writers/none.bro.\n\n        - New bool option LogNone::debug to enable debug output. It then\n          prints out all the values passed to DoInit().\n\n        - Fixed a bug that prevented Bro from terminating.\n\n2.0-723 | 2012-07-02 15:02:56 -0700\n\n  * Extract ICMPv6 NDP options and include in ICMP events.  This adds\n    a new parameter of type \"icmp6_nd_options\" to the ICMPv6 neighbor\n    discovery events. Addresses #833. (Jon Siwek)\n\n  * Set input frontend type before starting the thread. This means\n    that the thread type will be output correctly in the error\n    message. (Bernhard Amann)\n\n2.0-719 | 2012-07-02 14:49:03 -0700\n\n  * Fix inconsistencies in random number generation. The\n    srand()/rand() interface was being intermixed with the\n    srandom()/random() one.  The later is now used throughout. (Jon\n    Siwek)\n\n  * Changed the srand() and rand() BIFs to work deterministically if\n    Bro was given a seed file. Addresses #825. (Jon Siwek)\n\n  * Updating input framework unit tests to make them more reliable and\n    execute quicker. (Jon Siwek)\n\n  * Fixed race condition in writer and reader initializations. (Jon\n    Siwek)\n\n  * Small tweak to make test complete quicker. (Jon Siwek)\n\n  * Drain events before terminating log/thread managers. (Jon Siwek)\n\n  * Fix strict-aliasing warning in RemoteSerializer.cc. Addresses\n    #834. (Jon Siwek)\n\n  * Fix typos in event documentation. (Daniel Thayer)\n\n  * Fix typos in NEWS for Bro 2.1 beta. (Daniel Thayer)\n\n2.0-709 | 2012-06-21 10:14:24 -0700\n\n  * Fix exceptions thrown in event handlers preventing others from running. (Jon Siwek)\n\n  * Add another SOCKS command. (Seth Hall)\n\n  * Fixed some problems with the SOCKS analyzer and tests. (Seth Hall)\n\n  * Updating NEWS in preparation for beta. (Robin Sommer)\n\n  * Accepting different AF_INET6 values for loopback link headers.\n    (Robin Sommer)\n\n2.0-698 | 2012-06-20 14:30:40 -0700\n\n  * Updates for the SOCKS analyzer (Seth Hall).\n\n    - A SOCKS log!\n\n    - Now supports SOCKSv5 in the analyzer and the DPD sigs.\n\n    - Added protocol violations.\n\n  * Updates to the tunnels framework. (Seth Hall)\n\n    - Make the uid field optional since it's conceptually incorrect\n      for proxies being treated as tunnels to have it.\n\n    - Reordered two fields in the log.\n\n    - Reduced the default tunnel expiration interface to something\n      more reasonable (1 hour).\n\n  * Make Teredo bubble packet parsing more lenient. (Jon Siwek)\n\n  * Fix a crash in NetSessions::ParseIPPacket(). (Jon Siwek)\n\n2.0-690 | 2012-06-18 16:01:33 -0700\n\n  * Support for decapsulating tunnels via the new tunnel framework in\n    base/frameworks/tunnels.\n\n    Bro currently supports Teredo, AYIYA, IP-in-IP (both IPv4 and\n    IPv6), and SOCKS. For all these, it logs the outher tunnel\n    connections in both conn.log and tunnel.log, and proceeds to\n    analyze the inner payload as if it were not tunneled, including\n    also logging it in conn.log (with a new tunnel_parents column\n    pointing back to the outer connection(s)). (Jon Siwek, Seth Hall,\n    Gregor Maier)\n\n  * The options \"tunnel_port\" and \"parse_udp_tunnels\" have been\n    removed. (Jon Siwek)\n\n2.0-623 | 2012-06-15 16:24:52 -0700\n\n  * Changing an error in the input framework to a warning. (Robin\n    Sommer)\n\n2.0-622 | 2012-06-15 15:38:43 -0700\n\n  * Input framework updates. (Bernhard Amann)\n\n    - Disable streaming reads from executed commands. This lead to\n      hanging Bros because pclose apparently can wait for eternity if\n      things go wrong.\n\n     - Automatically delete disabled input streams.\n\n     - Documentation.\n\n2.0-614 | 2012-06-15 15:19:49 -0700\n\n  * Remove an old, unused diff canonifier. (Jon Siwek)\n\n  * Improve an error message in ICMP analyzer. (Jon Siwek)\n\n  * Fix a warning message when building docs. (Daniel Thayer)\n\n  * Fix many errors in the event documentation. (Daniel Thayer)\n\n2.0-608 | 2012-06-11 15:59:00 -0700\n\n  * Add more error handling code to logging of enum vals. Addresses\n    #829. (Jon Siwek)\n\n2.0-606 | 2012-06-11 15:55:56 -0700\n\n  * Fix summary lines for BIF documentation and corrected the\n    description of \"fmt\" and \"floor\" BIFs. (Daniel Thayer)\n\n  * Fix val_size BIF tests and improve docs. (Daniel Thayer)\n\n2.0-602 | 2012-06-07 15:06:19 -0700\n\n  * Include header for usleep(), caused compile failure on Archlinux. (Jon Siwek)\n\n  * Revert \"Fixed a bug with the MIME analyzer not removing whitespace\n    on wrapped headers.\" Needs discussion. (Robin Sommer)\n\n2.0-598 | 2012-06-06 11:47:00 -0700\n\n  * Add @load-sigs directive for loading signature files (addresses\n    #551). This can be used to load signatures relative to the current\n    scripts (e.g., \"@load-sigs ./foo.sig\"). (Jon Siwek)\n\n\n2.0-596 | 2012-06-06 11:41:00 -0700\n\n    * Fixes for some BiFs and their documentation. (Daniel Thayer)\n\n    * Many new unit tests for BiFs. (Daniel Thayer)\n\n2.0-579 | 2012-06-06 11:04:46 -0700\n\n  * Memory leak fixes for bad usages of VectorVal ctor. (Jon Siwek)\n\n  * Fixed a bug with the MIME analyzer not removing whitespace on\n    wrapped headers. (Seth Hall)\n\n  * Change Input::update_finished lookup to happen at init time. (Jon Siwek)\n\n  * Fix going through the internal_handler() function which will now\n    set the event as \"used\" (i.e. it's marked as being raised\n    somewhere). Addresses #823. (Jon Siwek)\n\n  * Fix format specifier on RemoteSerializer::Connect. This caused\n    32-bit systems to show a warning at compile-time, and fail when\n    connecting to peers. (Jon Siwek)\n\n  * Fixes for running tests in parallel. (Robin Sommer)\n\n2.0-571 | 2012-05-30 19:12:43 -0700\n\n  * Updating submodule(s).\n\n2.0-570 | 2012-05-30 19:08:18 -0700\n\n  * A new input framework enables scripts to read in external data\n    dynamically on the fly as Bro is processing network traffic.\n    (Bernhard Amann)\n\n    Currently, the framework supports reading ASCII input that's\n    structured similar as Bro's log files as well as raw blobs of\n    data. Other formats will come in the future.\n\n    See doc/input.rst for more information (this will be extended\n    further soon).\n\n2.0-395 | 2012-05-30 17:03:31 -0700\n\n  * Remove unnecessary assert in ICMP analyzer which could lead to\n    aborts. Addresses #822.\n\n  * Improve script debugger backtrace and print commands. (Jon Siwek)\n\n  * Switching default DS compression to gzip. (Robin Sommer)\n\n  * Improve availability of IPv6 flow label in connection records.\n    This adds a \"flow_label\" field to the \"endpoint\" record type,\n    which is used for both the \"orig\" and \"resp\" fields of\n    \"connection\" records.  The new \"connection_flow_label_changed\"\n    event also allows tracking of changes in flow labels: it's raised\n    each time one direction of the connection starts using a different\n    label. (Jon Siwek)\n\n  * Add unit tests for Broccoli SSL and Broccoli IPv6 connectivity.\n    (Jon Siwek)\n\n  * Remove AI_ADDRCONFIG getaddrinfo hints flag for listening sockets.\n    (Jon Siwek)\n\n  * Undo unnecessary communication protocol version bump. (Jon Siwek)\n\n  * Add support to Bro for connecting with peers over IPv6. (Jon Siwek)\n\n    - Communication::listen_ipv6 needs to be redef'd to true in order\n      for IPv6 listening sockets to be opened.\n\n    - Added Communication::listen_retry option as an interval at which\n      to retry binding to socket addresses that were already in use.\n\n    - Added some explicit baselines to check in the istate.events and\n      istate.events-ssl tests -- the SSL test was incorrectly passing\n      because it compared two empty files.  (The files being empty\n      because \"http/base\" was given as an argument to Bro which it\n      couldn't handle because that script doesn't exist anymore).\n\n    - Support for communication over non-global IPv6 addresses. This\n      usually requires specifying an additional zone identifier (see\n      RFC 4007). The connect() and listen() BIFs have been changed to\n      accept this zone identifier as an argument.\n\n\n2.0-377 | 2012-05-24 16:46:06 -0700\n\n  * Documentation fixes. (Jon Siwek and Daniel Thayer)\n\n2.0-372 | 2012-05-17 13:59:45 -0700\n\n  * Fix compile errors. (Jon Siwek)\n\n  * Linking in the DS docs. (Robin Sommer)\n\n  * Fix mobility checksums unit test. (Jon Siwek)\n\n2.0-367 | 2012-05-17 12:42:30 -0700\n\n  * Adding support for binary output via DataSeries. See\n    logging-dataseries.rst for more information. (Gilbert Clark and\n    Robin Sommer)\n\n  * Adding target update-doc-sources to top-level Makefile that runs\n    genDocSourcesList.sh. (Robin Sommer)\n\n  * Moving trace for rotation test into traces directory. (Robin Sommer)\n\n  * Fixing a rotation race condition at termination. (Robin Sommer)\n\n  * Extending log post-processor call to include the name of the\n    writer. (Robin Sommer)\n\n  * In threads, an internal error now immediately aborts. Otherwise,\n    the error won't make it back to the main thread for a while and\n    subsequent code in the thread would still execute. (Robin Sommer)\n\n  * DataSeries cleanup. (Robin Sommer)\n\n  * Fixing threads' DoFinish() method. It wasn't called reliably. Now,\n    it's always called before the thread is destroyed (assuming\n    processing has went normally so far). (Robin Sommer)\n\n2.0-341 | 2012-05-17 09:54:30 -0700\n\n  * Add a comment to explain the ICMPv6 error message types. (Daniel Thayer)\n\n  * Quieting external test output somehwat. (Robin Sommer)\n\n2.0-336 | 2012-05-14 17:15:44 -0700\n\n  * Don't print the various \"weird\" events to stderr. Address #805.\n    (Daniel Thayer)\n\n  * Generate icmp_error_message event for ICMPv6 error msgs.\n    Previously, icmp_sent was being generated, but icmp_error_message\n    contains more info.\n\n  * Improved documentation comments for icmp-related events. (Daniel\n    Thayer)\n\n2.0-330 | 2012-05-14 17:05:56 -0700\n\n  * Add `addr_to_uri` script-level function that adds brackets to an\n    address if it's IPv6 and will be included in a URI or when a\n    \":<port>\" needs to be appended to it. (Jon Siwek)\n\n  * Also add a test case for content extraction. (Jon Siwek)\n\n  * Fix typos and improve INSTALL document. (Daniel Thayer)\n\n  * Switching to new btest command TEST-SERIALIZE for communication\n    tests. (Robin Sommer)\n\n2.0-323 | 2012-05-04 21:04:34 -0700\n\n  * Add SHA1 and SHA256 hashing BIFs. Addresses #542.\n\n  * Refactor all internal MD5 stuff to use OpenSSL's. (Jon Siwek)\n\n  * Changes to open-file caching limits and uncached file unserialization. (Jon Siwek)\n\n    - Unserializing files that were previously kicked out of the open-file\n      cache would cause them to be fopen'd with the original access\n      permissions which is usually 'w' and causes truncation.  They\n      are now opened in 'a' mode.  (addresses #780)\n\n    - Add 'max_files_in_cache' script option to manually set the maximum\n      amount of opened files to keep cached.  Mainly this just helped\n      to create a simple test case for the above change.\n\n    - Remove unused NO_HAVE_SETRLIMIT preprocessor switch.\n\n    - On systems that don't enforce a limit on number of files opened for\n      the process, raise default max size of open-file cache from\n      32 to 512.\n\n2.0-319 | 2012-05-03 13:24:44 -0700\n\n  * SSL bugfixes and cleanup. (Seth Hall)\n\n    - SSL related files and classes renamed to remove the \"binpac\" term.\n\n    - A small fix for DPD scripts to make the DPD log more helpful if\n      there are multiple continued failures.\n\n    - Fixed the SSL analyzer to make it stop doing repeated violation\n      messages for some handshake failures.\n\n    - Added a $issuer_subject to the SSL log.\n\n    - Created a basic test for SSL.\n\n    - Fixed parsing of TLS server extensions. (Seth Hall)\n\n2.0-315 | 2012-05-03 11:44:17 -0700\n\n  * Add two more TLS extension values that we see in live traffic.\n    (Bernhard Amann)\n\n  * Fixed IPv6 link local unicast CIDR and added IPv6 loopback to\n    private address space. (Seth Hall)\n\n  * Fixed a problem where cluster workers were still processing\n    notices in some cases. (Seth Hall)\n\n  * Added a configure option to specify the 'etc' directory. Addresses\n    #801. (Daniel Thayer)\n\n\n2.0-306 | 2012-04-24 14:37:00 -0700\n\n  * Add further TLS extension values \"extended_random\" and\n    \"heartbeat\". (Seth Hall)\n\n  * Fix problem with extracting FTP passwords and add \"ftpuser\" as\n    another anonymous username.  (Seth Hall, discovered by Patrik\n    Lundin).\n\n2.0-303 | 2012-04-19 10:01:06 -0700\n\n  * Changes related to ICMPv6 Neighbor Discovery messages. (Jon Siwek)\n\n    - The 'icmp_conn' record now contains an 'hlim' field since hop limit\n      in the IP header is an interesting field for at least these ND\n      messages.\n\n    - Fixed and extended 'icmp_router_advertisement' event parameters.\n\n    - Changed 'icmp_neighbor_advertisement' event parameters to add\n      more of the known boolean flags.\n\n2.0-301 | 2012-04-17 17:58:55 -0700\n\n  * Bro now support ICMPv6. (Matti Mantere, Jon Siwek, Robin Sommer,\n\tDaniel Thayer).\n\n\tOverall, Bro now raises the following ICMP events for v4 and v6 as\n\tappropiate:\n\n        event icmp_sent(c: connection, icmp: icmp_conn);\n        event icmp_echo_request(c: connection, icmp: icmp_conn, id: count, seq: count, payload: string);\n        event icmp_echo_reply(c: connection, icmp: icmp_conn, id: count, seq: count, payload: string);\n        event icmp_error_message(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_unreachable(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_packet_too_big(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_time_exceeded(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_parameter_problem(c: connection, icmp: icmp_conn, code: count, context: icmp_context);\n        event icmp_router_solicitation(c: connection, icmp: icmp_conn);\n        event icmp_router_advertisement(c: connection, icmp: icmp_conn, hop_limit: count, managed: bool, router_lifetime: count, reachable_time: interval, retrans_timer: interval);\n        event icmp_neighbor_solicitation(c: connection, icmp: icmp_conn, tgt:addr);\n        event icmp_neighbor_advertisement(c: connection, icmp: icmp_conn, tgt:addr);\n        event icmp_redirect(c: connection, icmp: icmp_conn, tgt: addr, dest: addr);\n\n    The `icmp_conn` record got a new boolean field 'v6' that indicates\n    whether the ICMP message is v4 or v6.\n\n    This change also includes further low-level work on existing IP\n\tand ICMP code, including a reorganization of how ICMPv4 is\n\thandled.\n\n2.0-281 | 2012-04-17 17:40:39 -0700\n\n  * Small updates for the bittorrent analyzer to support 64bit types\n    in binpac. (Seth Hall)\n\n  * Removed the attempt at bittorrent resynchronization. (Seth Hall)\n\n2.0-276 | 2012-04-17 17:35:56 -0700\n\n  * Add more support for <netinet/ip6.h>'s that lack some structure\n    definitions. (Jon Siwek)\n\n2.0-273 | 2012-04-16 18:08:56 -0700\n\n  * Removing QR flag from DNS log in response, which should not have\n    been there in the first place. (Seth Hall)\n\n  * Sync up patricia.c/h with pysubnettree repo. (Daniel Thayer)\n\n  * Adding missing leak groups to a couple tests. Also activating leak\n    checking for proxy in basic-cluster test. (Robin Sommer)\n\n2.0-267 | 2012-04-09 17:47:28 -0700\n\n  * Add support for mobile IPv6 Mobility Header (RFC 6275).  (Jon\n    Siwek)\n\n    - Enabled through a new --enable-mobile-ipv6 configure-time\n      option. If not enabled, the mobility header (routing type 2) and\n      Home Address Destination option are ignored.\n\n    - Accessible at script-layer through 'mobile_ipv6_message' event.\n\n  * Refactor IP_Hdr routing header handling, add MobileIPv6 Home\n    Address handling. Packets that use the Home Address Destination\n    option use that option's address as the connection's originator.\n    (Jon Siwek)\n\n  * Revert TCP checksumming to cache common data, like it did before.\n    (Jon Siwek)\n\n  * Improve handling of IPv6 routing type 0 extension headers. (Jon\n    Siwek)\n\n    - flow_weird event with name argument value of \"routing0_hdr\" is raised\n      for packets containing an IPv6 routing type 0 header because this\n      type of header is now deprecated according to RFC 5095.\n\n    - Packets with a routing type 0 header and non-zero segments left\n      now use the last address in that header in order to associate\n      with a connection/flow and for calculating TCP/UDP checksums.\n\n    - Added a set of IPv4/IPv6 TCP/UDP checksum unit tests (Jon Siwek)\n\n  * Fix table expiry for values assigned in bro_init() when reading\n    live. (Jon Siwek)\n\n2.0-257 | 2012-04-05 15:32:43 -0700\n\n  * Fix CMake from warning about unused ENABLE_PERFTOOLS_DEBUG\n    variable. (Jon Siwek)\n\n  * Fix handling of IPv6 atomic fragments. (Jon Siwek)\n\n  * Fix that prevents Bro processes that do neither local logging nor\n    request remote logs from spawning threads. (Robin Sommer)\n\n  * Fixing perftools-debug support. (Robin Sommer)\n\n  * Reverting SocketComm change tuning I/O behaviour. (Robin Sommer)\n\n  * Adding notice_policy.log canonification for external tests. (Robin Sommer)\n\n\n2.0-245 | 2012-04-04 17:25:20 -0700\n\n  * Internal restructuring of the logging framework: we now spawn\n    threads doing the I/O. From a user's perspective not much should\n    change, except that the OS may now show a bunch of Bro threads.\n    (Gilbert Clark and Robin Sommer).\n\n  * When building Bro, we now always link in tcmalloc if it's found at\n    configure time. If it's installed but not picked up,\n    --with-perftools may help. (Robin Sommer)\n\n  * Renaming the configure option --enable-perftools to\n    --enable-perftool-debug to indicate that the switch is only\n    relevant for debugging the heap. It's not needed to pick up\n    tcmalloc for better performance. (Robin Sommer)\n\n2.0-184 | 2012-03-28 15:11:11 -0700\n\n  * Improve handling of IPv6 Routing Type 0 headers.  (Jon Siwek)\n\n    - For RH0 headers with non-zero segments left, a\n      \"routing0_segleft\" flow_weird event is raised (with a\n      destination indicating the last address in the routing header),\n      and an \"rh0_segleft\" event can also be handled if the other\n      contents of the packet header are of interest. No further\n      analysis is done as the complexity required to correctly\n      identify destination endpoints of connections doesn't seem worth\n      it as RH0 has been deprecated by RFC 5095.\n\n    - For RH0 headers without any segments left, a \"routing0_header\"\n      flow_weird event is raised, but further analysis still occurs as\n      normal.\n\n2.0-182 | 2012-03-28 15:01:57 -0700\n\n  * Remove dead tcp_checksum function from net_util. (Jon Siwek)\n\n  * Change routing0_data_to_addrs BIF to return vector of addresses.\n    The order of addresses in type 0 routing headers is\n    interesting/important. (Jon Siwek)\n\n\n2.0-179 | 2012-03-23 17:43:31 -0700\n\n  * Remove the default \"tcp or udp or icmp\" filter. In default mode,\n    Bro would load the packet filter script framework which installs a\n    filter that allows all packets, but in bare mode (the -b option),\n    this old filter would not follow IPv6 protocol chains and thus\n    filter out packets with extension headers. (Jon Siwek)\n\n  * Update PacketFilter/Discarder code for IP version independence.\n    (Jon Siwek)\n\n  * Fix some IPv6 header related bugs. (Jon Siwek)\n\n  * Add IPv6 fragment reassembly. (Jon Siwek)\n\n  * Add handling for IPv6 extension header chains. Addresses #531.\n    (Jon Siwek)\n\n    - The script-layer 'pkt_hdr' type is extended with a new 'ip6' field\n      representing the full IPv6 header chain.\n\n    - The 'new_packet' event is now raised for IPv6 packets. Addresses\n      #523.\n\n    - A new event called 'ipv6_ext_header' is raised for any IPv6\n      packet containing extension headers.\n\n    - A new event called 'esp_packet' is raised for any packets using\n      ESP ('new_packet' and 'ipv6_ext_header' events provide\n      connection info, but that info can't be provided here since the\n      upper-layer payload is encrypted).\n\n    - The 'unknown_protocol' weird is now raised more reliably when\n      Bro sees a transport protocol or IPv6 extension header it can't\n      handle. Addresses #522.\n\n  * Add unit tests for IPv6 fragment reassembly, ipv6_ext_headers and\n    esp_packet events. (Jon Siwek)\n\n  * Adapt FreeBSD's inet_ntop implementation for internal use. Now we\n    get consistent text representations of IPv6 addresses across\n    platforms. (Jon Siwek)\n\n  * Update documentation for new syntax of IPv6 literals. (Jon Siwek)\n\n\n2.0-150 | 2012-03-13 16:16:22 -0700\n\n  * Changing the regular expression to allow Site::local_nets in\n    signatures. (Julien Sentier)\n\n  * Removing a line of dead code. Found by . Closes #786. (Julien\n    Sentier)\n\n2.0-146 | 2012-03-13 15:39:38 -0700\n\n  * Change IPv6 literal constant syntax to require encasing square\n    brackets. (Jon Siwek)\n\n2.0-145 | 2012-03-09 15:10:35 -0800\n\n  * Remove the match expression. 'match' and 'using' are no longer\n    keywords. Addressed #753. (Jon Siwek)\n\n2.0-143 | 2012-03-09 15:07:42 -0800\n\n  * Fix a BRO_PROFILER_FILE/mkstemp portability issue. Addresses #794.\n    (Jon Siwek)\n\n2.0-139 | 2012-03-02 09:33:04 -0800\n\n  * Changes to how script coverage integrates with test suites. (Jon Siwek)\n\n    - BRO_PROFILER_FILE now passes .X* templated filenames to mkstemp\n      for generating unique coverage state files.\n\n    - Rearranging Makefile targets.  The general rule is that if the\n      all/brief target fails out due to a test failure, then the dependent\n      coverage target won't run, but can still be invoked directly later.\n      (e.g. make brief || make coverage)\n\n  * Standardized on the &default function for SSL constants. (Seth\n    Hall)\n\n  * Adding btest group \"leaks\" to leak tests. (Robin Sommer)\n\n  * Adding btest group \"comm\" to communication tests for parallelizing\n    execution with new btest version. (Robin Sommer)\n\n  * Sorting all output for diffing in the external tests. (Robin\n    Sommer)\n\n  * Cleaned up dead code from the old SSL analyzers. Reported by\n    Julien Sentier. (Seth Hall)\n\n  * Update/add tests for broccoli IPv6 addr/subnet support. Addresses\n    #448. (Jon Siwek)\n\n  * Remove connection compressor. Addresses #559. (Jon Siwek)\n\n  * Refactor IP_Hdr class ctors. Addresses #532. (Jon Siwek)\n\n\n2.0-121 | 2012-02-24 16:34:17 -0800\n\n  * A number of smaller memory fixes and code cleanups. (Julien\n    Sentier)\n\n  * Add to_subnet bif. Fixes #782). (Jon Siwek)\n\n  * Fix IPAddr::Mask/ReverseMask not allowing argument of 0. (Jon\n    Siwek)\n\n  * Refactor IPAddr v4 initialization from string. Fixes #775. (Jon Siwek)\n\n  * Parse the dotted address string directly instead of canonicalizing\n    and passing to inet_pton. (Jon Siwek)\n\n\n2.0-108 | 2012-02-24 15:21:07 -0800\n\n  * Refactoring a number of usages of new IPAddr class. (Jon Siwek)\n\n  * Fixed a bug in remask_addr bif. (Jon Siwek)\n\n2.0-106 | 2012-02-24 15:02:20 -0800\n\n  * Raise minimum required CMake version to 2.6.3. (Jon Siwek)\n\n2.0-104 | 2012-02-24 14:59:12 -0800\n\n  * Add test case for FTP over IPv4. (Daniel Thayer)\n\n  * Fix IPv6 URLs in ftp.log. (Daniel Thayer)\n\n  * Add a test for FTP over IPv6 (Daniel Thayer)\n\n  * Fix parsing of FTP EPRT command and EPSV response. (Daniel Thayer)\n\n2.0-95 | 2012-02-22 05:27:34 -0800\n\n  * GeoIP installation documentation update. (Seth Hall)\n\n  * Decrease strictness of parsing IPv4 strings into addrs. Fixes #775. (Jon Siwek)\n\n  * Fix memory leak in DNS manager. Fixes #777. (Jon Siwek)\n\n  * Fix IPAddr/IPPrefix serialization bugs. (Jon Siwek)\n\n  * Fix compile error. (Jon Siwek)\n\n2.0-86 | 2012-02-17 15:41:06 -0800\n\n  * Changing ARP detection to always kick in even if no analyzer is\n    activated. (Robin Sommer)\n\n  * DNS name lookups performed by Bro now also query AAAA records.\n    DNS_Mgr handles combining the results of the A and AAAA queries\n    for a given hostname such that at the scripting layer, the name\n    resolution can yield a set with both IPv4 and IPv6 addresses. (Jon\n    Siwek)\n\n  * Add counts_to_addr and addr_to_counts conversion BIFs. (Jon Siwek)\n\n  * Change HashKey threshold for using H3 to 36 bytes. (Jon Siwek)\n\n  * Remove mention of --enable-brov6 in docs. (Daniel Thayer)\n\n  * Remove --enable-brov6 from configure usage text (Daniel Thayer)\n\n  * Add a test and baseline for addr_to_ptr_name BiF. (Daniel Thayer)\n\n  * Adding a test and baseline for ptr_name_to_addr BiF. (Seth Hall)\n\n  * Fix the ptr_name_to_addr BiF to work with IPv6 (Daniel Thayer)\n\n  * Fix a memory leak that perftools now complains about. (Jon Siwek)\n\n  * Remove --enable-brov6 flag, IPv6 now supported by default. (Jon Siwek)\n\n    Some script-layer changes of note:\n\n    - dns_AAAA_reply event signature changed: the string representation\n      of an IPv6 addr is easily derived from the addr value, it doesn't\n      need to be another parameter.  This event also now generated directly\n      by the DNS analyzer instead of being \"faked\" into a dns_A_reply event.\n\n    - Removed addr_to_count BIF.  It used to return the host-order\n      count representation of IPv4 addresses only.  To make it more\n      generic, we might later add a BIF to return a vector of counts\n      in order to support IPv6.\n\n    - Changed the result of enclosing addr variables in vertical pipes\n      (e.g. |my_addr|) to return the bit-width of the address type which\n      is 128 for IPv6 and 32 for IPv4.  It used to function the same\n      way as addr_to_count mentioned above.\n\n    - Remove bro_has_ipv6 BIF\n\n2.0-57 | 2012-02-10 00:02:35 -0800\n\n  * Fix typos in the documentation. (Daniel Thayer)\n\n  * Fix compiler warning about Brofiler ctor init list order. (Jon Siwek)\n\n  * Fix missing optional field access in webapp signature_match handler. (Jon Siwek)\n\n2.0-41 | 2012-02-03 04:10:53 -0500\n\n  * Updates to the Software framework to simplify the API. (Bernhard\n    Amann)\n\n2.0-40 | 2012-02-03 01:55:27 -0800\n\n  * Fix typos in documentation. (Daniel Thayer)\n\n  * Fix sorting of lines in Brofiler coverage.log. (Daniel Thayer)\n\n2.0-38 | 2012-01-31 11:50:53 -0800\n\n  * Canonify sorting of lines in Brofiler coverage.log. (Daniel\n    Thayer)\n\n2.0-36 | 2012-01-27 10:38:14 -0800\n\n  * New \"Brofiler\" mode that tracks and records script statements\n    executed during runtime. (Jon Siwek)\n\n    Use the BROFILER_FILE environment variable to point to a file in\n    which statement usage statistics from Bro script-layer can be\n    output.\n\n    Script statements that should be ignored can be marked with a \"#\n    @no-test\" comment. For example:\n\n        print \"don't cover\"; # @no-test\n\n        if ( F )\n            { # @no-test\n            ...\n            }\n\n  * Integrated coverage measurement into test-suite. (Jon Siwek)\n\n2.0-20 | 2012-01-25 16:34:51 -0800\n\n  * BiF cleanup (Matthias Vallentin)\n\n      - Rename NFS3::mode2string to a more generic file_mode().\n\n      - Unify do_profiling()/make_connection_persistent()/expect_connection()\n        to return any (i.e., nothing) instead of bools.\n\n      - Perform type checking on count-to-port conversion. Related to #684.\n\n      - Remove redundant connection_record() BiF. The same\n        functionality is provided by lookup_connection().\n\n      - Remove redundant active_connection() BiF. The same\n        functionality is provided by connection_exists().\n\n      - exit() now takes the exit code as argument.\n\n      - to_port() now received a string instead of a count.\n\n2.0-9 | 2012-01-25 13:47:13 -0800\n\n  * Allow local table variables to be initialized with {} list\n    expressions. (Jon Siwek)\n\n2.0-7 | 2012-01-25 13:38:09 -0800\n\n  * Teach CompHash to allow indexing by records with vector/table/set\n    fields. Addresses #464. (Jon Siwek)\n\n2.0-5 | 2012-01-25 13:25:19 -0800\n\n  * Fixed a bug resulting in over-logging of detected webapps. (Seth Hall)\n\n  * Make communication log baseline test more reliable. (Jon Siwek)\n\n  * Fixed some broken links in documentation. (Daniel Thayer)\n\n2.0 | 2012-01-11 13:52:22 -0800\n\n  * Adding script reference documentation. (The Team).\n\n2.0-beta-194 | 2012-01-10 10:44:32 -0800\n\n  * Added an option for filtering out URLs before they are turned into\n    HTTP::Incorrect_File_Type notices. (Seth Hall)\n\n  * Fix ref counting bug in BIFs that call internal_type. Addresses\n    #740. (Jon Siwek)\n\n  * Adding back the stats.bro file. (Seth Hall)\n\n\n2.0-beta-188 | 2012-01-10 09:49:29 -0800\n\n  * Change SFTP/SCP log rotators to use 4-digit year in filenames\n    Fixes #745. (Jon Siwek)\n\n  * Adding back the stats.bro file. Addresses #656. (Seth Hall)\n\n2.0-beta-185 | 2012-01-09 18:00:50 -0800\n\n  * Tweaks for OpenBSD support. (Jon Siwek)\n\n2.0-beta-181 | 2012-01-08 20:49:04 -0800\n\n  * Add SFTP log postprocessor that transfers logs to remote hosts.\n    Addresses #737. (Jon Siwek)\n\n  * Add FAQ entry about disabling NIC offloading features. (Jon Siwek)\n\n  * Add a file NEWS with release notes. (Robin Sommer)\n\n2.0-beta-177 | 2012-01-05 15:01:07 -0800\n\n  * Replace the --snaplen/-l command line option with a\n    scripting-layer option called \"snaplen\" (which can also be\n    redefined on the command line, e.g. `bro -i eth0 snaplen=65535`).\n\n  * Reduce snaplen default from 65535 to old default of 8192. Fixes\n    #720. (Jon Siwek)\n\n2.0-beta-174 | 2012-01-04 12:47:10 -0800\n\n  * SSL improvements. (Seth Hall)\n\n    - Added the ssl_session_ticket_handshake event back.\n\n    - Fixed a few bugs.\n\n    - Removed the SSLv2.cc file since it's not used.\n\n2.0-beta-169 | 2012-01-04 12:44:39 -0800\n\n  * Tuning the pretty-printed alarm mails, which now include the\n    covered time range into the subject. (Robin Sommer)\n\n  * Adding top-level \"test\" target to Makefile. (Robin Sommer)\n\n  * Adding SWIG as dependency to INSTALL. (Robin Sommer)\n\n2.0-beta-155 | 2012-01-03 15:42:32 -0800\n\n  * Remove dead code related to record type inheritance. (Jon Siwek)\n\n2.0-beta-152 | 2012-01-03 14:51:34 -0800\n\n  * Notices now record the transport-layer protocol. (Bernhard Amann)\n\n2.0-beta-150 | 2012-01-03 14:42:45 -0800\n\n  * CMake 2.6 top-level 'install' target compat. Fixes #729. (Jon Siwek)\n\n  * Minor fixes to test process. Addresses #298.\n\n  * Increase timeout interval of communication-related btests. (Jon Siwek)\n\n2.0-beta-145 | 2011-12-19 11:37:15 -0800\n\n  * Empty fields are now logged as \"(empty)\" by default. (Robin\n    Sommer)\n\n  * In log headers, only escape information when necessary. (Robin\n    Sommer)\n\n2.0-beta-139 | 2011-12-19 07:06:29 -0800\n\n  * The hostname notice email extension works now, plus a general\n    mechanism for adding delayed information to notices. (Seth Hall)\n\n  * Fix &default fields in records not being initialized in coerced\n    assignments. Addresses #722. (Jon Siwek)\n\n  * Make log headers include the type of data stored inside a set or\n    vector (\"vector[string]\"). (Bernhard Amann)\n\n2.0-beta-126 | 2011-12-18 15:18:05 -0800\n\n  * DNS updates.  (Seth Hall)\n\n    - Fixed some bugs with capturing data in the base DNS script.\n\n    - Answers and TTLs are now vectors.\n\n    - A warning that was being generated (dns_reply_seen_after_done)\n      from transaction ID reuse is fixed.\n\n  * SSL updates. (Seth Hall)\n\n    - Added is_orig fields to the SSL events and adapted script.\n\n    - Added a field named last_alert to the SSL log.\n\n    - The x509_certificate function has an is_orig field now instead\n      of is_server and its position in the argument list has moved.\n\n    - A bit of reorganization and cleanup in the core analyzer. (Seth\n      Hall)\n\n2.0-beta-121 | 2011-12-18 15:10:15 -0800\n\n  * Enable warnings for malformed Broxygen xref roles. (Jon Siwek)\n\n  * Fix Broxygen confusing scoped IDs at start of line as function\n    parameter. (Jon Siwek)\n\n  * Allow Broxygen markup \"##<\" for more general use. (Jon Siwek)\n\n2.0-beta-116 | 2011-12-16 02:38:27 -0800\n\n  * Cleanup some misc Broxygen css/js stuff. (Jon Siwek)\n\n  * Add search box to Broxygen docs. Fixes #726. (Jon Siwek)\n\n  * Fixed major bug with cluster synchronization, which was not\n    working. (Seth Hall)\n\n  * Fix missing action in notice policy for looking up GeoIP data.\n    (Jon Siwek)\n\n  * Better persistent state configuration warning messages (fixes\n    #433). (Jon Siwek)\n\n  * Renaming HTTP::SQL_Injection_Attack_Against to\n    HTTP::SQL_Injection_Victim. (Seth Hall).\n\n  * Fixed DPD signatures for IRC. Fixes #311. (Seth Hall)\n\n  * Removing Off_Port_Protocol_Found notice. (Seth Hall)\n\n  * Teach Broxygen to more generally reference attribute values by name. (Jon Siwek)\n\n  * SSH::Interesting_Hostname_Login cleanup.  Fixes #664. (Seth Hall)\n\n  * Fixed bug that was causing the malware hash registry script to\n    break. (Seth Hall)\n\n  * Remove remnant of libmagic optionality. (Jon Siwek)\n\n2.0-beta-98 | 2011-12-07 08:12:08 -0800\n\n  * Adapting test-suite's diff-all so that it expands globs in both\n    current and baseline directory. Closes #677. (Robin Sommer)\n\n2.0-beta-97 | 2011-12-06 11:49:29 -0800\n\n  * Omit loading local-<node>.bro scripts from base cluster framework.\n    Addresses #663 (Jon Siwek)\n\n2.0-beta-94 | 2011-12-03 15:57:19 -0800\n\n  * Adapting attribute serialization when talking to Broccoli. (Robin\n    Sommer)\n\n2.0-beta-92 | 2011-12-03 15:56:03 -0800\n\n  * Changes to Broxygen master script package index.  (Jon Siwek)\n\n    - Now only lists packages as those directories in the script hierarchy\n      that contain an __load__.bro file.\n\n    - Script packages (dirs with a __load__.bro file), can now include\n      a README (in reST format) that will automatically be appended\n      under the link to a specific package in the master package\n      index.\n\n2.0-beta-88 | 2011-12-02 17:00:58 -0800\n\n  * Teach LogWriterAscii to use BRO_LOG_SUFFIX environemt variable.\n    Addresses #704. (Jon Siwek)\n\n  * Fix double-free of DNS_Mgr_Request object. Addresses #661.\n\n  * Add a remote_log_peer event which comes with an event_peer record\n    parameter. Addresses #493. (Jon Siwek)\n\n  * Remove example redef of SMTP::entity_excerpt_len from local.bro.\n    Fixes error emitted when loading local.bro in bare mode. (Jon\n    Siwek)\n\n  * Add missing doc targets to top Makefile; remove old doc/Makefile.\n    Fixes #705. (Jon Siwek)\n\n  * Turn some globals into constants. Addresses #633. (Seth Hall)\n\n  * Rearrange packet filter and DPD documentation. (Jon Siwek)\n\n2.0-beta-72 | 2011-11-30 20:16:09 -0800\n\n  * Fine-tuning the Sphinx layout to better match www. (Jon Siwek and\n    Robin Sommer)\n\n2.0-beta-69 | 2011-11-29 16:55:31 -0800\n\n  * Fixing ASCII logger to escape the unset-field place holder if\n    written out literally. (Robin Sommer)\n\n2.0-beta-68 | 2011-11-29 15:23:12 -0800\n\n  * Lots of documentation polishing. (Jon Siwek)\n\n  * Teach Broxygen the \".. bro:see::\" directive. (Jon Siwek)\n\n  * Teach Broxygen :bro:see: role for referencing any identifier in\n    the Bro domain. (Jon Siwek)\n\n  * Teach Broxygen to generate an index of Bro notices. (Jon Siwek)\n\n  * Fix order of include directories. (Jon Siwek)\n\n  * Catch if logged vectors do not contain only atomic types.\n    (Bernhard Amann)\n\n2.0-beta-47 | 2011-11-16 08:24:33 -0800\n\n  * Catch if logged sets do not contain only atomic types. (Bernhard\n    Amann)\n\n  * Promote libz and libmagic to required dependencies. (Jon Siwek)\n\n  * Fix parallel make from top-level to work on more platforms. (Jon\n    Siwek)\n\n  * Add decode_base64_custom(). Addresses #670 (Jon Siwek)\n\n  * A bunch of Sphinx-doc reorgs and polishing. (Jon Siwek)\n\n2.0-beta-28 | 2011-11-14 20:09:28 -0800\n\n  * Binary packaging script tweaks. We now require CMake 2.8.6. (Jon Siwek)\n\n  * More default \"weird\" tuning for the \"SYN_with_data\" notice. (Seth\n    Hall)\n\n  * Tiny bugfix for http file extraction along with test. (Seth Hall)\n\n2.0-beta-21 | 2011-11-06 19:27:22 -0800\n\n  * Quickstart doc fixes. (Jon Siwek)\n\n2.0-beta-19 | 2011-11-03 17:41:00 -0700\n\n  * Fixing packet filter test. (Robin Sommer)\n\n2.0-beta-12 | 2011-11-03 15:21:08 -0700\n\n  * No longer write to the PacketFilter::LOG stream if not reading\n    traffic. (Seth Hall)\n\n2.0-beta-10 | 2011-11-03 15:17:08 -0700\n\n  * Notice framework documentation update. (Seth Hall)\n\n  * Fixing compiler warnings (addresses #388) (Jon Siwek)\n\n2.0-beta | 2011-10-27 17:46:28 -0700\n\n  * Preliminary fix for SSH login detection: we need a counted measure\n    of payload bytes (not ack tracking and not with the IP header\n    which is what we have now). (Seth Hall)\n\n  * Fixing send_id() problem. We no longer update &redef functions.\n    Updating code on the fly isn't fully supported. (Robin Sommer)\n\n  * Tuning the format of the pretty-printed alarm summaries. (Robin\n    Sommer)\n\n1.6-dev-1508 | 2011-10-26 17:24:50 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1507 | 2011-10-26 15:10:18 -0700\n\n  * Baseline updates. (Robin Sommer)\n\n1.6-dev-1506 | 2011-10-26 14:48:43 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1505 | 2011-10-26 14:43:58 -0700\n\n  * A new base script that pretty-prints alarms in the regular\n    summary. (Robin Sommer)\n\n  * Adding a dummy log writer WRITER_NONE that just discards\n    everything. (Robin Sommer)\n\n1.6-dev-1498 | 2011-10-26 14:30:15 -0700\n\n  * Adding instructions to local.bro how to do ACTION_ALARM by\n  default. (Seth Hall)\n\n1.6-dev-1495 | 2011-10-26 10:15:58 -0500\n\n  * Updated unit test baselines. (Seth Hall)\n\n1.6-dev-1491 | 2011-10-25 20:22:56 -0700\n\n  * Updating submodule(s). (Robin Sommer)\n\n1.6-dev-1482 | 2011-10-25 19:08:32 -0700\n\n  * Fixing bug in log managers predicate evaluation. (Robin Sommer)\n\n1.6-dev-1481 | 2011-10-25 18:17:03 -0700\n\n  * Fix a problem with DNS servers being logged that aren't actually\n    servers. (Seth Hall)\n\n  * Changed generated root cert DN format for RFC2253 compliance. (Jon\n    Siwek)\n\n  * Removed :bro doc directives from notice documentation. (Seth Hall)\n\n  * New notice framework docs. (Seth Hall)\n\n  * Adding sub messages to emails. (Seth Hall)\n\n  * Adding extra fields to smtp and http to track transaction depth.\n    (Seth Hall)\n\n  * Fix for SSH login detection heuristic. (Seth Hall)\n\n  * Removed some fields from http analysis that weren't commonly\n    needed or were wrong. (Seth Hall)\n\n  * Updated/fixed MSIE version parsing in the software framework.\n    (Seth Hall)\n\n  * Update Mozilla trust roots to index certs by subject distinguished\n    name. (Jon Siwek)\n\n  * weird.bro rewrite. (Seth Hall)\n\n  * More notice email tuning. (Seth Hall)\n\n  * Slightly restructured http file hashing to fix a bug. (Seth Hall)\n\n  * Changed the notice name for interesting ssh logins to correctly\n    reflect semantics of the notice.  (Seth Hall)\n\n  * Field name change to notice framwork.  $result -> $action\n\n    - $result is renamed to $action to reflect changes to the notice\n      framework since there is already another result-like field\n      ($suppress_for) and there may be more in the future.\n\n    - Slipped in a change to add connection information to notice\n      emails too. (Seth Hall)\n\n  * Small script refinements and documentation updates. (Seth Hall)\n\n  * Pass over upgrade guide. (Robin Sommer)\n\n\n1.6-dev-1430 | 2011-10-21 10:39:09 -0700\n\n  * Fixing crash with unknown debug streams. Closes #643. (Robin\n    Sommer)\n\n  * Code to better handle interpreter errors, which can now be turned\n    into non-fatal runtime errors rather than immediate aborts. (Robin\n    Sommer).\n\n  * Remove old make-src-packages script. (Jon Siwek)\n\n  * Fixing a bunch of format strings. Closes #567. (Robin Sommer)\n\n  * Cleaning up some distribution files. (Robin Sommer)\n\n  * Various test, doc, and installation fixes/tweaks. (Seth Hall, Jon\n    Siwek and Robin Sommer).\n\n  * Varios smaller policy fixes and tweaks (Seth Hall).\n\n  * Moving docs from web server into distribution. (Robin Sommer)\n\n  * Fixing more (small) memory leaks. (Robin Sommer)\n\n  * Profiling support for DNS_Mgr and triggers. With\n    misc/profiling.bro, both now report a line in prof.log with some\n    counters on usage. (Robin Sommer)\n\n  * Fixing DNS memory leaks. Closes #534. (Robin Sommer)\n\n  * Fix code for disabling analyzers. Closes #577. (Robin Sommer)\n\n  * Changed communication option from listen_encrypted to listen_ssl.\n    (Seth Hall)\n\n  * Modification to the Communication framework API. (Seth Hall)\n\n    - Simplified the communication API and made it easier to change\n      to encrypted connections by not having separate variables to\n      define encrypted and unencrypted ports.\n\n    - Now, to enable listening without configuring nodes just\n      load the frameworks/communication/listen script.\n\n    - If encrypted listening is desired set the following:\n    \tredef Communication::listen_encrypted=T;\n\n  * Connection compressor now disabled by default. Addresses #559.\n    (Robin Sommer)\n\n\n1.6-dev-1372 | 2011-10-06 18:09:17 -0700\n\n  * Filtering some potentially high-volume DNS weirds. (Robin Sommer)\n\n  * DNS now raises DPD events. Closes #577. (Robin Sommer)\n\n  * Fixing a bunch of compiler warnings. (Robin Sommer)\n\n  * Remote logs are auto-flushed if the last write was longer than a\n    second ago. Addresses #498. (Robin Sommer)\n\n  * Fix missing from previous MIME commit. (Robin Sommer)\n\n1.6-dev-1366 | 2011-10-06 17:05:21 -0700\n\n  * Make CompHash computation/recovery for functions deterministic.\n    Closes #636. (Jon Siwek)\n\n  * Removing unnecessary @load in local.bro. (Robin Sommer)\n\n  * Optimizing some MIME code. (Robin Sommer)\n\n  * Speed improvements in logging code. (Robin Sommer)\n\n  * Consolidating some node-specific functionality from scripts in\n    broctl repo. (Jon Siwek)\n\n  * Another fix the for 1xx script code. (Robin Sommer)\n\n1.6-dev-1352 | 2011-10-05 16:20:51 -0700\n\n  * Fix for optional HTTP::Info status_code. (Jon Siwek)\n\n  * Teaking some external testing scripts. (Jon Siwek)\n\n  * HTTP bug fix reported by Martin Holste. (Seth Hall)\n\n  * More script tuning. (Seth Hall)\n\n    - Moved some of the weird events back to the base/ directory.\n\n    - SSL fixes, updates, and performance optimization.\n\n  * More adjustment to reduce Weird volumes. (Seth Hall)\n\n  * Fixed an error when calculating x509 certificate hashes (reported\n    by Martin Holste). (Seth Hall)\n\n  * Clean up to cluster framework to make event handling clearer.\n    (Seth Hall)\n\n  * Fixed a bug in the notice framework. (Seth Hall)\n\n  * Bug fix for FTP analysis script. (Seth Hall)\n\n1.6-dev-1333 | 2011-09-29 22:29:51 -0700\n\n  * Fixing a number of memory leaks. (Robin Sommer)\n\n  * Loaded_scripts.log is indented with spaces now and makes more\n     sense to look at. (Seth Hall)\n\n  * Teach HTTP parser to derive content length of multipart/byteranges\n     bodies. Addresses #488. (Jon Siwek)\n\n  * Change logging of HTTP 1xx responses to occur in their own\n    columns. Addresses #411. (Jon Siwek)\n\n  * Fix handling of HTTP 1xx response codes. Addresses #411).\n\n  * Taking advantage of yet another trick to get installed browser\n  plugins. (Seth Hall)\n\n    - With the software-browser-plugins script you can watch for Omniture\n      advertising servers to grab the list of installed plugins.\n\n    - I reorganized the plugin detection a bit too to abstract it better.\n\n    - Removed the WEB_ prefix from all of the Software::Type HTTP enums.\n      They were essentially redundant due to the full name already being\n      HTTP::SERVER (for example).\n\n1.6-dev-1316 | 2011-09-28 16:50:05 -0700\n\n  * Unit test cleanup. Updated README and collected coverage-related\n    tests in a common dir. (Jon Siwek)\n\n  * Fixes for known-services. (Seth Hall)\n\n  * Ported and 2.0ized the capture-loss script. (Seth Hall)\n\n  * Communication fix and extension.(Robin Sommer)\n\n    - Removing unnecessary log flushing. Closes #498.\n\n    - Adding new BiF disconnect() that shuts a connection to a peer down.\n\n    - terminate_connection() now first flushes any still buffered log\n      messages.\n\n  * Fix for high SSL memory usage by adding &transient attribute to\n    top-level SSL pac array type. Closes #574. (Robin Sommer)\n\n  * Fix a small bug in the metrics framework. (Seth Hall)\n\n  * Temporarily removing scripts that aren't ready to be included.\n    Will return before next release.  (Seth Hall)\n\n  * New SSL policy scripts.  (Seth Hall)\n\n    - protocols/ssl/expiring-certs uses time based information from\n      certificates to determine if they will expire soon, have already\n      expired, or haven't yet become valid.\n\n    - protocols/ssl/extract-certs-pem is a script for taking certs off\n      the line and converting them to PEM certificates with the openssl\n      command line tool then dumping them to a file.\n\n  * Notice::type_suppression_intervals: table[Notice::Type] of\n    interval can be used to modify the suppression intervals for\n    entire types of notices. (Seth Hall)\n\n  * EOF SSL protocol violations are only generated a single time now.\n    (Seth Hall)\n\n  * Script level fixes.  (Seth Hall)\n\n    - Fixed a type name conflict in the Known namespace.\n\n    - Fixed a DPD framework bug that was causing Reporter messages.\n\n    - Fixed the notice_policy log.\n\n    - Predicate functions are now logged.\n\n    - Predicate functions are now optional.  If not given, it's assumed that\n      the result should always apply. (Seth Hall)\n\n    - Fix a problem with accidental and mistaken HTTP log lines.\n\n1.6-dev-1293 | 2011-09-22 19:44:37 -0700\n\n  * Smaller script tweaks. (Seth Hall)\n\n  * Duplicate notice suppression. (Seth Hall)\n\n    - Duplicate notices are discovered with the new Notice::Info\n      field $identifier.  It's a string that is left up to the\n      notice implementor to define which would indicate a\n      fundamentally duplicate notice.  The field is optional and\n      if it's not included it's not possible for notice\n      suppression to take place.\n\n    - Duplicate notices are suppressed by default for the interval\n      defined by the Notice::default_suppression_interval variable\n      (1 hour by default).\n\n    - A new notice action was defined ACTION_NO_SUPPRESS to prevent\n      suppression for a specific notice instance.  A convenience set\n      named not_suppressed_types was also created to not suppress\n      entire notice types.\n\n    - A new field was added to the PolicyItem type to modify the length\n      of time a notice should be suppressed if the predicate matches.\n      The field is named $suppress_for.  This name makes the code more\n      readable like this: $suppress_for = 1day\n\n    - New events were created to give visibility into the notice\n      framework's suppression activity.\n      - event Notice::begin_suppression(n: Notice::Info)\n      - event Notice::suppressed(n: Notice::Info)\n      - event Notice::end_suppression(n: Notice::Info)\n\n    - The suppression.bro script doesn't have a baseline because\n      it is causing a segfault in Bro.  This one test is the\n      reason that this is being integrated into a branch instead\n      of master. (Seth Hall)\n\n  * Fix crash on exit. Addresses #607. (Jon Siwek)\n\n  * Fix PktSrc setting next_timestamp even when no packet available.\n    (Jon Siwek)\n\n  * Fix lack of NUL-termination in to_upper/to_lower BIF's return val.\n    (Jon Siwek)\n\n  * Fixing unit tests and some minor bugs. (Jon Siwek)\n\n  * Fix broctl cluster log rotation. Addresses #619. (Jon Siwek)\n\n  * Added session ID to the SSL logging. (Seth Hall)\n\n  * Adding \"install-aux\" target + updating bro-aux submodule. (Jon\n    Siwek)\n\n  * Cleaning up INSTALL and README. (Jon Siwek)\n\n  * Remove $Id$ tags. (Jon Siwek)\n\n  * Remove policy.old directory. Addresses #511. (Jon Siwek)\n\n  * Small rework with ssl base script to reduce memory usage. (Seth\n    Hall)\n\n  * Updated the mozilla root certs. (Seth Hall)\n\n1.6-dev-1261 | 2011-09-15 17:13:55 -0700\n\n  * Memory leak fixes. Addresses #574 (Jon Siwek)\n\n  * Add configure options for ruby/bindings integration. (Jon Siwek)\n\n  * Fix filter path_func to allow record argument as a subset of\n    stream's columns. Addresses #600. (Jon Siwek)\n\n  * Log rotation is now controlled directly through Filter records. (Jon Siwek)\n\n  * Fix indexing for record types with optional fields. Addresses #378\n    (Jon Siwek)\n\n1.6-dev-1248 | 2011-09-15 16:01:32 -0700\n\n  * Removed custom malloc() implementation for FreeBSD. Closes #557.\n    (Jon Siwek)\n\n  * Testing/external scripts no longer compute MD5 checksums for SMTP\n    entities. (Robin Sommer)\n\n  * External tests no longer include the full content of mismatching\n    files in the diagnostics output. (Robin Sommer)\n\n1.6-dev-1241 | 2011-09-14 22:51:52 -0400\n\n  * Fixing a major memory utilization issues with SSL analysis. (Seth\n    Hall)\n\n  * Enhancements to HTTP analysis: (Seth Hall)\n\n      - More options for the header-names.bro script.\n\n      - New script for logging header names and values. Closes #519.\n        (Seth Hall)\n\n      - HTTP body size measurement added to http.log.\n\n      - The value of the content-length headers has now been removed\n        in the default output but it could be added back locally at an\n        installation by a user.\n\n      - Added fields to indicate if some parsing interruption happened\n        during the body transfer. Closes #581 (Seth Hall)\n\n  * Misc smaller usability and correctness updates: (Seth Hall)\n\n    - Removed an notice definition from the base SSL scripts.\n\n    - Moved a logging stream ID into the export section for known-services\n      and bumped priority for creating the stream.\n\n    - Adding configuration knobs for the SQL injection attack detection\n      script and renaming the HTTP::SQL_Injection_Attack notice to\n      HTTP::SQL_Injection_Attack_Against\n\n    - Bumped priority when creating Known::CERTS_LOG.\n\n    - Fixing a warning from the cluster framework. (Seth Hall)\n\n  * Bugfix for log writer, which didn't escape binary stuff in some\n    situations. Closes #585. (Robin Sommer)\n\n  * A larget set of changes to the testing/external infrastructure.\n    The traces for external test-suites are no longer kept inside the\n    repositories themselves but downloaded separately via curl. This\n    is because git is pretty bad at dealing with large files. See the\n    README for more information. (Robin Sommer)\n\n1.6-dev-1221 | 2011-09-08 08:41:17 -0700\n\n  * Updates for documentation framework and script docs. (Jon Siwek)\n\n  * The script level PF_RING support isn't working so removing it.\n    (Seth Hall)\n\n  * Delete SSL certificates from memory after ssl_established event.\n    (Seth Hall)\n\n  * Small fixes for SSL analysis. (Seth Hall)\n\n1.6-dev-1212 | 2011-09-07 16:15:28 -0700\n\n  * Internally, the UID generation can now return values from\n    different pool for better reproducability in testing mode.\n    (Gilbert Clark).\n\n  * Added new BiF unique_id_from(pool: string, prefix: string) that\n    allows the user to specify a randomness pool. (Gilbert Clark)\n\n1.6-dev-1198 | 2011-09-07 11:03:36 -0700\n\n  * Extended header for ASCII log that make it easier for scripts to\n    parse Bro log files. (Gilbert Clark)\n\n  * Potential fix for rotation crashes. Addresses #588. (Robin Sommer)\n\n  * Added PF_RING load balancing support to the scripting layer,\n    enabled by loading the misc/pf-ring-load-balancing script. (Seth\n    Hall)\n\n  * Added a BiF setenv() for setting environment variables. (Seth\n    Hall)\n\n1.6-dev-1184 | 2011-09-04 09:34:50 -0700\n\n  * FindPCAP now links against thread library when necessary (e.g.\n    PF_RING's libpcap). (Jon Siwek)\n\n  * Install binaries with an RPATH. (Jon Siwek)\n\n  * Fix for a case where nested records weren't coerced even though\n    possible. (Jon Siwek)\n\n  * Changed ASCII writer to delay creation of log after rotation until\n    next write.\n\n  * Changed default snaplen to 65535 and added a -l/--snaplen command\n    line option to set it explicitly. Addresses #447. (Jon Siwek)\n\n  * Various updates to logging framework. (Seth Hall)\n\n  * Changed presentation of enum labels to include namespace. (Jon\n    Siwek)\n\n  * HTTP analyzer is now enabled with any of the HTTP events. (Seth\n    Hall)\n\n  * Fixed missing format string that caused some segfaults. (Gregor\n    Maier)\n\n  * ASCII writer nows prints time interval with 6 decimal places.\n    (Gregor Maier)\n\n  * Added a Reporter::fatal BIF. (Jon Siwek)\n\n  * Fixes for GeoIP support. Addresses #538. (Jon Siwek)\n\n  * Fixed excessive memory usage of SSL analyzer on connections with\n    gaps. (Gregor Maier)\n\n  * Added a log postprocessing function that can SCP rotated logs to\n    remote hosts. (Jon Siwek)\n\n  * Added a BiF for getting the current Bro version string. (Jon\n    Siwek)\n\n  * Misc. doc/script/test cleanup. (Jon Siwek)\n\n  * Fixed bare-mode @load dependency problems. (Jon Siwek)\n\n  * Fixed check_for_unused_event_handlers option. (Jon Siwek)\n\n  * Fixing some more bare-mode @load dependency issues (Jon Siwek)\n\n  * Reorganizing btest/policy directory to match new scripts/\n    organization. Addresses #545 (Jon Siwek)\n\n  * bro scripts generated from bifs now install to\n    $prefix/share/bro/base. Addresses #545 (Jon Siwek)\n\n  * Changeed/fixed some cluster script error reporting. (Jon Siwek)\n\n  * Various script normalization. (Jon Siwek)\n\n  * Add a test that checks each individual script can be loaded in\n    bare-mode. Adressess #545. (Jon Siwek)\n\n  * Tune when c$conn is set. Addresses #554. (Gregor Maier)\n\n  * Add ConnSize_Analyzer's fields to conn.log. (Gregor Maier)\n\n  * Fixing bug in \"interesting hostnames\" detection. (Seth Hall)\n\n  * Adding metrics framework intermediate updates. (Seth Hall)\n\n1.6-dev-1120 | 2011-08-19 19:00:15 -0700\n\n  * Fix for the CompHash fix. (Robin Sommer)\n\n1.6-dev-1118 | 2011-08-18 14:11:55 -0700\n\n  * Fixing key size calculation in composite hash code. (Robin Sommer)\n\n1.6-dev-1116 | 2011-08-18 10:05:07 -0700\n\n  * Remove the 'net' type from Bro (addresses #535).\n\n  * Fix H3 assumption of an 8-bit byte/char. (Jon Siwek)\n\n  * Allow reading from interface without additional script arguments.\n    Explicitly passing in '-' as an additional command line argument\n    still allows reading a script from stdin. (Jon Siwek)\n\n  * SSH bruteforcing detection now done with metrics framework. (Seth\n    Hall)\n\n  * Updates for SQL injection attack detection to match the metrics\n    framework updates. (Seth Hall)\n\n  * Metrics framework now works on cluster setups. (Seth Hall)\n\n  * Reclassifying more DNS manager errors as non-fatal errors. (Robin\n    Sommer)\n\n  * Fix ConnSize_Analyzer when used in conjunction with connection\n    compressor. (Gregor Maier)\n\n  * Fix reporter using part of the actual message as a format string.\n    (Jon Siwek)\n\n1.6-dev-1095 | 2011-08-13 11:59:07 -0700\n\n  * A larger number of script documentation updates. Closes #543. (Jon\n    Siwek)\n\n  * Workaround for FreeBSD CMake port missing debug flags. (Jon Siwek)\n\n  * piped_exec() can now deal with null bytes. (Seth Hall)\n\n  * Fix vector initialization for lists of records with optional\n    types. Closes #485. (Jon Siwek)\n\n  * Fix redef'ing records with &default empty set fields. Closes #460.\n    (Jon Siwek)\n\n  * Fix ConnSize_Analyzer when used in conjunction with the connection\n    compressor. (Gregor Maier)\n\n  * Fix reporter using part of the actual message as a format string.\n    (Jon Siwek)\n\n  * Fixing reporter's location tracking. Closes #492. (Robin Sommer)\n\n  * Turning DNS errors into warnings. Closes #255. (Robin Sommer)\n\n  * Logging's path_func now receives the log record as argument.\n    Closes #555. (Robin Sommer)\n\n  * Functions can now be logged; their full body gets recorded.\n    Closes #506. (Robin Sommer)\n\n  * Bugfix for hostname notice email extension. (Seth Hall)\n\n  * Updates for notice framework. (Seth Hall)\n\n    - New ACTION_ADD_GEODATA to add geodata to notices in an extension\n      field named remote_location.\n\n    - Loading extend-email/hostnames by default now that it only does\n      anything when the ACTION_EMAIL action is applied (finally).\n\n  * Updates to local.bro (Seth Hall)\n\n  * Added the profiling script. (Seth Hall)\n\n  * Updates for SSH scripts. (Seth Hall)\n\n  * ConnSize analyzer is turned on by default now. (Seth Hall)\n\n  * Updates for the build system and site local scripts for cluster.\n    (Seth Hall)\n\n  * HTTP now uses the extract_filename_from_content_disposition function. (Seth Hall)\n\n  * Major SMTP script refactor. Closes #509. (Jon Siwek and Seth Hall)\n\n  * New variable Site::local_nets_table in utils/site for mapping\n    address to defined local subnet.\n\n  * Metrics framework updates, more to come. (Seth Hall)\n\n\n1.6-dev-1061 | 2011-08-08 18:25:27 -0700\n\n  * A set of new/changed tests regarding the new policy script\n    organisation. (Robin Sommer)\n\n1.6-dev-1058 | 2011-08-08 16:15:18 -0700\n\n  * Reorganisation of the scripts that Bro loads by default. (Seth\n    Hall)\n\n    - policy/ renamed to scripts/\n\n    - By default BROPATH now contains:\n    \t- scripts/\n    \t- scripts/policy\n    \t- scripts/site\n\n    - The scripts in scripts/base/protocols/ only do logging and state\n      building.\n\n    - All of scripts/base/ is loaded by by default. This can however\n      be disabled by switching Bro into \"bare mode\" using the new\n      command-line option --bare-mode (or -b). The cripts in\n      scripts/base/ don't use relative path loading to ease use of\n      bare mode (to copy and paste that script).\n\n    - The scripts in scripts/base/frameworks/ add functionality\n      without causing any additional overhead.\n\n    - All \"detection\" activity happens through scripts in\n      scripts/policy/.\n\n    - bro.init was renamed to base/init-bare.bro, and base/all.bro was\n      renamed to init-default.bro.\n\n    - local.bro now loads more functionality from policy/ and adds\n      more documentation. (Seth Hall)\n\n  * Adding default_path_func() to the logging framework that makes the\n    default naming scheme script-level controlled. (Robin Sommer)\n\n  * Reworking logging's postprocessor logic so that postprocessor\n    commands are no longer run by the log writers themselves, but\n    instead by a script level function. (Robin Sommer)\n\n  * The communication subsystem is now by default off and must be\n    enabled explicitly with a new BiF, enable_communication(). Closes\n    #540. (Robin Sommer)\n\n  * The hostname notice email extension now only add hostnames for\n    emailed noticed. (Seth Hall)\n\n  * Cleaning up doc generation. (Seth Hall)\n\n1.6-dev-1044 | 2011-08-05 19:07:32 -0700\n\n  * Fixing memory (and CPU) leak in log writer.\n\n  * Fixing crash in memory profiling. (Robin Sommer)\n\n  * Fix compiler warning. (Robin Sommer)\n\n  * Fixing missing sync in cluster setup. (Robin Sommer)\n\n\n1.6-dev-1038 | 2011-08-05 18:25:44 -0700\n\n  * Smaller updates to script docs and their generation. (Jon Siwek)\n\n  * When using a `print` statement to write to a file that has raw output\n    enabled, NUL characters in string are no longer interpreted into \"\\0\",\n    no newline is appended afterwards, and each argument to `print` is\n    written to the file without any additional separation. (Jon Siwek)\n\n  * Test portatibility tweaks. (Jon Siwek)\n\n  * Fixing PktSrc::Statistics() which retured bogus information\n    offline mode. Closes #500. (Jon Siwek)\n\n  * --with-perftools configure option now assumes --enable-perftools.\n    Closes #527. (Jon Siwek)\n\n1.6-dev-1018 | 2011-07-31 21:30:31 -0700\n\n  * Updating CHANGES. (Robin Sommer)\n\n1.6-dev-1016 | 2011-07-30 18:34:28 -0700\n\n  * Install example config files dynamically. They'll only get\n    installed when the distribution version differs from existing\n    version on disk. (Jon Siwek)\n\n  * Fixed memory leak in SSL analyzer. (Seth Hall)\n\n  * Beginning rework of metrics interface. (Seth Hall)\n\n  * New/updated unit tests for scripts. (Jon Siwek)\n\n  * New/updated documentstion for scripts. (Jon Siwek)\n\n  * A number of fixes for scripts in utils/. (Jon Siwek)\n\n1.6-dev.244 Thu Jul 28 17:08:21 PDT 2011\n\n- mask_addr() now returns subnet (addresses #512). (Jon Siwek)\n\n- Normalize Notice::Type identifiers per convention (closes #484).\n  (Jon Siwek)\n\n- Fixing default-loaded-scripts test for BSD systems. (Jon Siwek)\n\n- New piped_exec() BiF for pipeing data into an external command. (Jon\n  Siwek)\n\n1.6-dev.242 Mon Jul 25 21:42:39 PDT 2011\n\n- Adding a documentation coverage test. (Jon Siwek)\n\n- The CMake targets for generating reST docs from policy scripts are\n  now automatically generated via the genDocSourcesList.sh script.\n  (Jon Siwek)\n\n- Fixed a number of script error. (Jon Siwek)\n\n- Fixes to relative @load'ing.  (Jon Siwek)\n\n- Fixes to tests. (Robin Sommer)\n\n1.6-dev.240 Sun Jul 24 15:14:26 PDT 2011\n\n- Updated tests and test baselines. (Jon Siwek)\n\n- ASCII log writer now prints time values w/ constant 6 digit\n  precision. (Jon Siwek)\n\n- Many policy script updates acrsso the board (Seth Hall).\n\n- Moving devel-tools to bro-aux. (Robin Sommer)\n\n- BugFix for disable_analyzer(), which could cause crashes with some\n  analyzers. (Robin Sommer)\n\n- Bugfix for potential segfault in DebugLogger. (Robin Sommer)\n\n1.6-dev.226 Thu Jul 21 15:23:39 PDT 2011\n\n- Extensions to the @load and @unload process. (Jon Siwek)\n\n    * Make @load statements recognize relative paths. For example a\n      script can do \"@load ./foo\" to load a script named foo.bro that\n      lives in the same directory or \"@load ../bar\" to load a script\n      named bar.bro in the parent directory, even if those directories\n      are not contained in BROPATH.\n\n    * Reimplementation of the @prefixes statement. (Closes #486)\n\n      Any added prefixes are now used *after* all input files have\n      been parsed to look for a prefixed, flattened version of the\n      input file somewhere in BROPATH and, if found, load it. For\n      example, if \"lcl\" is in @prefixes, and site.bro is loaded, then\n      a file named \"lcl.site.bro\" that's in BROPATH would end up being\n      automatically loaded as well. Packages work similarly, e.g.\n      loading \"protocols/http\" means a file named\n      \"lcl.protocols.http.bro\" in BROPATH gets loaded automatically.\n\n    * Fix @unload'd files from generating bro_script_loaded event.\n\n    * Updates to tests.\n\n1.6-dev.225 Wed Jul 20 17:10:41 PDT 2011\n\n- IRC improvements (Jon Siwek). Including:\n\n    * Shorten what's displayed in the IRC's log mime_type column for\n      DCC transfers.\n\n    * Add IRC unit tests.\n\n    * Fix IRC analyzer supplying wrong type to irc_dcc_message event.\n\n    * Removed irc_client and irc_server events.\n\n    * Added is_orig arguments to all other irc events.\n\n    * Fix analyzer not recognizing Turbo DCC extension message format.\n\n    * Fix analyzer not generating irc_dcc_message event when irc_privmsg_message\n      event doesn't have a handler registered.\n\n- Fixing tests that need a diff canonifier. (Jon Siwek)\n\n1.6-dev.223 Tue Jul 19 19:10:36 PDT 2011\n\n- Adding a script to update CHANGES and VERSION. (Robin Sommer)\n\n1.6-dev.218 Tue Jul 19 18:16:44 PDT 2011\n\n- Comprehensive policy script overhaul/rewrite. (Seth Hall)\n\n  Changes are too extensive to list individually.\n\n- Removing undocumented -H command line flag. (Robin Sommer)\n\n- Fixing many tests. (Everybody)\n\n- Fixing 0-chunk bug in remote logging. (Robin Sommer)\n\n- $PATH is now appropriately set by the bro-path-dev.(sh|csh) scripts.\n  (Seth Hall)\n\n- Making valgrind a bit more happy. (Robin Sommer)\n\n- New BiF record_field_vals() that returns the fields of a record in a\n  table with meta-information. (Robin Sommer)\n\n- Adding a script in aux/devel-tools that extracts a connection from a\n  trace based on uid. (Robin Sommer)\n\n- Fixing bug causing crash when running without arguments. (Robin Sommer)\n\n- A new event bro_script_loaded() raised for each policy script\n  loaded. Also removing the -l command-line option as that can now be\n  done at the script-level. (Robin Sommer)\n\n- Fixing memory leaks. (Gilbert Clark, Seth Hall, Robin Sommer)\n\n- Many SSL analysis improvements and fixes. (Seth Hall)\n\n- Fixing bug with event priorities potentially being ignored for the\n  handler. (Robin Sommer)\n\n- Overhauling the internal reporting of messages to the user. The new\n  Reporter class is now in charge of reporting all errors, warnings,\n  informational messages, weirds, and syslogs; and it passes\n  everything through the script layer. (Robin Sommer)\n\n* Removed the alarm statement and the alarm_hook event. (Robin Sommer)\n\n- Adding new policy file test-all.bro that loads all other policies.\n  This is for testing only. (Robin Sommer)\n\n- A new framework for doing regression testing with larger traces and\n  more complex Bro configurations in testing/external. (Robin Sommer)\n\n- Many updates to script doc generation.  (Jon Siwek)\n\n1.6-dev.146 Sat Jun 25 18:12:27 PDT 2011\n\n- DNS mapping are now becoming invalid when an entry's TTL expires.\n  (Thomas Other)\n\n- Reworking how Bro tracks which scripts are already loaded. Rather\n  than paths, Bro now tracks inode numbers. (Jon Siwek)\n\n- New BiF netstats() to query packet capture statistics. The netstats\n  script now uses the new BiF to periocally report packets drops. The\n  net_stats_update() event and the heartbeat_interval global went\n  away. (Seth Hall)\n\n- Fixing bug with logging &optional records. Closes #476. (Robin\n  Sommer)\n\n- Fixing istate.events-ssl test failing because of expired cert. (Jon\n  Siwek)\n\n- A large number of improvements and fixes for Bro's doc mode. (Jon\n  Siwek)\n\n- Significant updates for RPC and NFS analyzers (Gregor Maier)\n\n    * Unify semantics for UDP and TCP connections.\n\n    * RPC can now log to a log file if desired.\n\n    * Portmapper can now log general activity to a log file and also log\n      actual port mappings.\n\n    * NFS analyzer now supports significantly more procedure calls as\n      as file name tracking and file content extraction.\n\n- NetBIOS fixes. (Jon Siwek)\n\n- A number of unit tests are more robust and portable.  (Jon Siwek)\n\n- A new BiF unique_id() that returns a string that's unique across Bro\n  instaces with high probablity.  (Robin Sommer)\n\n- Complete rewrite of the BinPAC SSL analyzer. (Seth Hall)\n\n    * DER certificates are extracted as strings to be used with\n      corresponding BiFs.\n\n    * x509_verify function to verify single certs and/or full\n      certificate chains.\n\n    * Removed hand written SSL analyzer.\n\n    * The ssl.bro script is just a place-holder for now. New version\n      will come with the other new scripts.\n\n- New syslog analyzer. (Seth Hall)\n\n- @load now supports loading a directory. With a directory \"foo\"\n  somewhere in BROPATH, \"@load foo\" now checks if there's a file\n  \"foo/__load__.bro\". If so, it reads that file in. (Robin Sommer)\n\n- ASCII logger now escapes non-printable characters. Closes #450.\n  (Robin Sommer)\n\n- Packaging tweaks and rewrite of 'dist' target. (Jon Siwek)\n\n- Changes to allow DEB packaging via CPack, addresses #458. (Jon\n  Siwek)\n\n- An extension to the ICMP analyzer to handle redirects. Julien\n  Sentier\n\n- Removing old istate test-suite. (Robin Sommer)\n\n- A hack to report missing GeoIP support only once. This closes #357,\n  but #455 captures the need for a more general solution. (Robin\n  Sommer)\n\n- Bugfix: vectors in records were not initalized. Closes #421. (Robin\n  Sommer)\n\n- If IPv6 default is not compiled in, the default BPF filters now\n  excludes IPv6 packets. (Robin Sommer)\n\n- New bif bro_has_ipv6() to check whether IPv6 support is compiled in.\n  (Robin Sommer)\n\n- Updating btests and a Makefile. \"make\" now runs all the tests.\n  (Robin Sommer)\n\n- Moving the test-scripts from the old test-suite over to btest.\n  (Robin Sommer)\n\n- Fix for major bug in POP3 analyzer, which didn't recognize '.'\n  terminators in multi-line replies if the terminator was bare (no\n  newline). This caused it to ignore the rest of the session that it's\n  analyzing. (Vern Paxson)\n\n- Fix compiler warning with gcc-4.4.4 (Gregor Maier)\n\n- Adding example documentation for a script's use of logging features.\n  (Jon Siwek)\n\n- Adding &log attribute to static attr_names array. (Jon Siwek)\n\n- Bro can now track packet and byte counts per connection. (Gregor\n  Maier)\n\n    * If 'use_conn_size_analyzer' is true, the event engine tracks\n      number of packets and raw IP bytes per connection. If\n      report_conn_size_analyzer is true, these values are included as\n      four new columns into conn.log\n\n    * I changed conn.bro so that the value of\n      report_conn_size_analyzer follows that of\n      use_conn_size_analyzer. For the new conn.log, we probably want\n      to get rid of report_conn_size_analyzer anyway.\n\n- Fixing numerous compiler warnings and portability issues. (All)\n\n- Switching vectors from being 1-based to 0-based. Note that this is a\n  change that break backwards-compatibility. (Robin Sommer)\n\n- Increasing serialization format version for the recent 64-bit\n  changes. (Robin Sommer)\n\n- Support for (mixed) MPLS and VLAN traffic, and a new default BPF\n  filter. (Seth Hall and Robin Sommer)\n\n    * Merging in the patch from #264, which provides support for mixed\n      VLAN and MPLS traffic.\n\n    * Changing Bro's default filter from being built dynamically to\n      being a static \"ip or not ip\". To get the old behaviour back\n      (i.e., the dynamically built filter), redef \"all_packets\" to\n      false.\n\n    * print-filter.bro now always prints the filter that Bro is\n      actually using, even if overriden from the command line. (Robin\n      Sommer)\n\n- Changing the HTTP's analyzers internals to use 64-bit integers.\n  (Gregor Maier).\n\n- Fixing bug with deleting still unset record fields of table type.\n  (Robin Sommer)\n\n1.6-dev.99 Fri Apr 22 22:10:03 PDT 2011\n\n- Extending the connection record with a unique identifier. (Robin\n  Sommer)\n\n    type connection: record {\n        [...]\n        id: string;\n   };\n\n  These identifiers very likely unique even across independent Bro\n  runs.\n\n- Delete operator for record fields. (Robin Sommer)\n\n  \"delete x$y\" now resets record field \"x\" back to its original state\n  if it is either &optional or has a &default. \"delete\" may not be\n  used with non-optional/default fields.\n\n- Fixing bug with nested record coercions. (Robin Sommer)\n\n- Fixing a do_split() bug. (Seth Hall)\n\n\n1.6-dev.94 Thu Apr 21 19:51:38 PDT 2011\n\n- Fixing generation of config.h. (Jon Siwek)\n\n- Updates and tests for NetBIOS name BiF. (Seth Hall)\n\n- Fixing do_split bug(), and adding a test. (Seth Hall)\n\n- When Bro is given a PRNG seed, it now uses its own internal random\n  number generator that produces consistent results across sytems.\n  Note that this internal generator isn't very good, so it should only\n  be used for testing purpses. (Robin Sommer)\n\n- The BTest configuration now sets the environemnt variables TZ=UTC\n  and LANG=C to ensure consistent results. (Robin Sommer)\n\n- Logging fixes. (Robin Sommer)\n\n1.6-dev.88 Wed Apr 20 20:43:48 PDT 2011\n\n- Implementation of Bro's new logging framework. We will document this\n  separately. (Robin Sommer)\n\n- Already defined record types can now be further extended via the\n  '+=' operator. The added fields must be either &optional or have a\n  &default value. (Robin Sommer)\n\n  Example:\n\n        type Foo: record {\n            a: count;\n            b: count &optional;\n        };\n\n        redef record Foo += {\n            c: count &default=42;\n            d: count &optional;\n        };\n\n        global f: Foo = [$a=21];\n\n        print f;\n\n  Output:\n\n        [a=21, b=<uninitialized>, c=42, d=<uninitialized>]\n\n- Enabling assignment of empty vectors (\"vector()\"). (Robin Sommer)\n\n- Fixing attributes to allow &default attributes to be associated with\n  records fields of type tables/sets/vector. (Robin Sommer)\n\n- '[]' is now a valid record constructor. (Robin Sommer)\n\n- A instance of a record type A is now coercable into one of type B if\n  the fields of type A are a subset of those of type B. (Robin Sommer)\n\n- A number of bug fixes and enhancements for record/set/table/vector\n  coercion. (Robin Sommer)\n\n- Fixing a problem with records that have optional fields when used as\n  table/set indices. Addresses #367. (Robin Sommer)\n\n- Fixing an off-by-one error in join_string_vec(). (Seth Hall)\n\n- Updating to_count() to cope with 64bit ints. (Seth Hall)\n\n- A new BiF count_to_v4_addr() to turn a count into an IPv4 address.\n  (Seth Hall)\n\n1.6-dev.80 Mon Apr 18 14:50:54 PDT 2011\n\n- New framework for generating documentation from Bro scripts. (Jon\n  Siwek)\n\n  This includes:\n\n    * Changes to Bro's scanner/parser to facilitate automatic\n      generation of Bro policy script documentation in\n      reStructuredText format.\n\n    * New command line flags -Z/--doc-scripts to enable the new doc\n      generation mode.\n\n    * Changes to bifcl to pass comments starting with \"##\" through\n      into the generated .bro script.\n\n    * A \"doc\" build target for the top-level Makefile to first\n      generate reStructuredText for a defined set of Bro policy\n      scripts, and then run that through Sphinx to create HTML\n      documentation.\n\n1.6-dev.78 Mon Apr 18 12:52:55 PDT 2011\n\n- Adding files to CMake build targets so they show up in generated IDE\n  projects. This addresses #413. (Jon Siwek)\n\n- Fix unnecessary config.h preprocessor (re)definitions. This\n  addresses #414. (Jon Siwek)\n\n- Updating istate tests. (Robin Sommer)\n\n- Adding files to CMake build targets so they show up in generated IDE\n  projects.\n\n- Adding new environment variable BRO_SEED_FILE to set the seed file\n  for the random number generator. (Robin Sommer)\n\n1.6-dev.71 Fri Apr  1 16:06:33 PDT 2011\n\n- Removing code for the following no longer supported functionality.\n\n    * Trace rewriting.\n    * DFA state expiration in regexp engine.\n    * Active mapping.\n    * Unused hash functions.\n\n  (Robin Sommer)\n\n- Fixing crashes when SSL is not configured correctly. (Robin Sommer)\n\n1.6-dev.66 Tue Mar 29 21:52:01 PDT 2011\n\n- Initial btest setup (Don Appleman and Robin Sommer)\n\n- Porting the istate tests to btest (not finished) (Robin Sommer)\n\n1.6-dev.63 Mon Mar 21 16:31:15 PDT 2011\n\n- Changes to the way user-modifiable config files are installed  (Jon Siwek)\n\n    * Duplicates of the distribution's configuration files are now\n      always installed with a .example suffix\n\n    * Added --binary-package configure option to toggle configure\n      logic specific to the creation of binary packages.\n\n    * When not in binary packaging mode, `make install` never\n      overwrites existing configure files in case they've been\n      modified. The previous behavior (CMake's default) would only\n      avoid overwriting modified files if one consistently uses the\n      same build directory and doesn't reconfigure.\n\n- Fixed an issue with Mac package's pre-install script not preserving\n  ACLs. (Jon Siwek)\n\n- Minor cleanup/refactor of the make-mac/rpm-packages scripts. (Jon\n  Siwek)\n\n- Add explicit CMake check for compiler. (Jon Siwek)\n\n- Add alternative way to set BROPATH for running bro from build/ dir.\n  (Jon Siwek)\n\n- Fixing compiler warnings (Gregor Maier)\n\n- Remvoing leftover local variables that caused compile error on Mac\n  OS X. (Gregor Maier)\n\n1.6-dev.53 Fri Feb 25 17:03:05 PST 2011\n\n- Fixing file detector leak in remote communication module. (Scott\n  Campbell)\n\n- Updating independent-state tests to work with new setup. (Robin\n  Sommer)\n\n1.6-dev.49 Fri Feb 25 15:37:28 PST 2011\n\n- Enum IDs can have explicitly defined values. (Gregor Maier)\n\n- Extensions for the built-in function compiler, bifcl. (Gregor Maier)\n\n    * Support for policy-layer namespaces.\n    * Support for type declarations in bif files (with access them\n      from C++)\n    * Extended const declarations in bif files.\n\n  See http://bro.icir.org/devel/bif-doc for more information.\n\n1.6-dev.48 Fri Feb 25 10:53:04 PST 2011\n\n- Preliminary TCP Reassembler fix: deliver data after 2GB by disabling\n  the unused seq_to_skip feature. (Gregor Maier)\n\n1.6-dev.47 Fri Feb 25 10:40:22 PST 2011\n\n- Fixing endianess error in XDR when data is not 4-byte aligned.\n  (Gregor Maier)\n\n- Fix for Val constructor with new int64 typedefs. (Gregor Maier)\n\n- Updated fix for OS X 10.5 compile error wrt llabs(). (Gregor Maier)\n\n- Fix more compiler warning wrt printf format strings.  (Gregor Maier)\n\n1.6-dev.45 Tue Feb  8 21:28:01 PST 2011\n\n- Fixing a number of compiler warnings. (Seth Hall and Robin Sommer)\n\n1.6-dev.44 Tue Feb  8 20:11:44 PST 2011\n\n- A number of updates to the SSL analyzer, including support for new\n  ciphers; SSL extensions; and bug fixes. The analyzer does not longer\n  throw weird for exceeding a predefined cipherspec_size anymore.\n  (Seth Hall and Rmkml).\n\n- The various split*() BiFs now handle strings containing null bytes\n  correctly. (Seth Hall)\n\n- Adding new aux/btest submodule. This is a framework we will use in\n  the future for doing unit tests. (Robin Sommer)\n\n1.6-dev.41 Mon Feb  7 13:43:56 PST 2011\n\n- Smarter way to increase the parent/child pipe's socket buffer.\n  (Craig Leres).\n\n- Fixing bug with defining bro_int_t and bro_uint_t to be 64 bits wide\n  on some platforms. (Robin Sommer)\n\n1.6-dev.39 Mon Jan 31 16:42:23 PST 2011\n\n- Login's confused messages now go through weird.bro. (Robin Sommer)\n\n1.6-dev.36 Mon Jan 31 08:45:35 PST 2011\n\n- Adding more configure options for finding dependencies, (Jon Siwek)\n\n    --with-flex=PATH       path to flex executable\n    --with-bison=PATH      path to bison executable\n    --with-perl=PATH       path to perl executable\n    --with-python=PATH     path to Python interpreter\n    --with-python-lib=PATH path to libpython\n    --with-python-inc=PATH path to Python headers\n    --with-swig=PATH       path to SWIG executable\n\n- Fixing typo in PCAPTests.cmake  (Jon Siwek)\n\n\n1.6-dev.33 Mon Jan 24 15:29:04 PST 2011\n\n- Fixing bug in SMB analyzer. (Robin Sommer)\n\n- Configure wrapper now deletes previous CMake cache (Jon Siwek)\n\n- Fix for the --with-binpac configure option. (Jon Siwek)\n\n1.6-dev.30 Thu Jan 20 16:32:43 PST 2011\n\n- Changed configure wrapper to create config.status. (Jon Siwek)\n\n1.6-dev.29 Thu Jan 20 16:29:56 PST 2011\n\n- Fixing little problem with initialization of Bro-to-Bro event\n  communication. (Christian Kreibich)\n\n\n1.6-dev.27 Thu Jan 20 13:52:25 PST 2011\n\n- Fine-tuning of the HTTP analyzer in terms of raising protocol\n  violations and interrupted transfers. (Gregor Maier)\n\n\n1.6-dev.21 Wed Jan 19 17:36:02 PST 2011\n\n- Added 4 new BiFs and a new record type for testing the entropy of\n  strings. (Seth Hall)\n\n    find_entropy(data: string): entropy_test_result\n        This is a one shot function that accepts a string and\n        returns the result of the entropy calculations.\n\n    entropy_test_init(index: any): bool\n        This and the next two functions are for calculating entropy\n        piece-wise. It only needs an index which can be any type of\n        variable. It needs to be something that uniquely identifies\n        the data stream that is currently having it's entropy\n        calculated.\n\n    entropy_test_add(index: any, data: string): bool\n        This function is used to add data into the entropy\n        calculation. It takes the index used in the function above\n        and the data that you are adding and returns true if\n        everything seemed to work, false otherwise.\n\n     entropy_test_finish(index: any): entropy_test_result\n        Calling this function indicates that all of the desired data\n        has been inserted into the entropy_test_add function and the\n        entropy should be calculated. This function *must* be called\n        in order to clean up an internal state tracking variable.\n        If this is never called on an index, it will result in a\n        memory leak.\n\n  The entropy_test_result values have several measures of the\n  entropy, but a good one to work with is the \"entropy\" attribute.\n  It's a double and as the value approaches 8.0 it can be considered\n  more and more random.  For example, a value of 7.832 would be\n  quite random but a value of 4.671 is not very random.\n\n1.6-dev.20 Wed Jan 19 17:30:11 PST 2011\n\n- BRO_DNS_FAKE is now listed in the --help output. (Seth Hall)\n\n\n1.6-dev.18 Wed Jan 19 16:37:13 PST 2011\n\n- Removing unnecessary expire timer from http_sessions. (Gregor\n  Maier)\n\n\n1.6-dev.16 Sat Jan 15 14:14:21 PST 2011\n\n- Updates to the build system. (Jonathan Siwek)\n\n    * ``make dist`` is now available to be used with the top-level\n      Makefile for creating source packages according to #344.\n\n    * ``make-rpm-packages`` and ``make-mac-packages`` scripts can\n      now generate binary packages according to #295.\n\n    * Additional configure options to change packaging behavior.\n\n    * OS X builds will now prefer to link static libraries of\n      optional dependencies that don't come with the vanilla\n      operating system.\n\n    * Fix for OS X 10.5 compile error dealing with the llabs()\n      function from stdlib.\n\n    * Installing as a different user than the one that\n      configured/built now works (although, a harmless error message\n      about not being able to write the install manifest may occur).\n\n\n1.6-dev.3 Wed Dec  8 04:09:38 PST 2010\n\n- Merge with Subversion repository as of r7137. Incorporated change:\n\n    * Fix for packet processing resumption when a remote Bro dies\n      during state synchronization (Robin Sommer).\n\n1.6-dev.2 Wed Dec  8 03:57:03 PST 2010\n\n- Compatibility fix for OpenSSL 1.0.0 (Christian Kreibich, Gregor\n  Maier).\n\n1.6-dev.1 Sat Nov 27 12:19:47 PST 2010\n\n- Merge with Subversion repository as of r7098. Incorporated changes:\n\n    * Rotation post-processors are now passed an additional argument\n      indicating whether Bro is terminating (Robin Sommer).\n\n    * Bro now consistently generates a file_opened event for all\n      fopen() calls. (Robin Sommer).\n\n    * You can now redefine the email_notice_to function (Robin\n      Sommer).\n\n1.6-dev.0 Fri Nov 26 13:48:11 PST 2010\n\n- The Bro source code is now developed in the new git repositories.\n  See the developer pages at http://www.bro-ids.org for more\n  information on the new development process.\n\n- Bro's build and installation setup has been moved from GNU\n  autotools to CMake. As a result of that, layout and specifics of\n  the distribution has changed significantly.\n\n- Lots of pieces have been removed from the distribution that are\n  either now unnecessary or are no longer maintained.\n\n- As part of the cleanup, a numbef of Bro configure options and\n  their corresponding functionality have been removed, including:\n\n    * --disable-select-loop\n    * --with-dag\n    * --disable-nbdns\n    * --enable-activemapping\n    * --enable-activemapping\n    * --enable-shippedpcap\n\n- The previous configure option --enable-int64 is now enabled by default,\n  and can no longer be disabled.\n\n- ClamAV support has been removed, which has been non-functional for\n  a while already.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\n1.5.3 Thu Mar  3 08:55:11 PST 2011\n\n- Removing aux/broctl/policy/cluster-addrs.hot.bro from the\n  distribution. The script is no longer needed and could in fact break\n  an installation because it redefines an old variable that has went\n  away. (Robin Sommer)\n\n- Smarter way to increase the communication module's pipe's socket\n  buffer size, resulting in a value closer to the allowed maximum.\n  (Craig Leres)\n\n- BroControl now also maintains links from the log archive to the\n  current set of logs when running in standalone mode. (Robin Sommer)\n\n- Bug fix for a file descriptor leak in the remote communication\n  module. (Scott Campbell)\n\n- Bug fix for BroControl to now activate trace-summary's sampling in\n  cluster mode, but not anymore in standalone mode. (Robin Sommer)\n\n- Broccoli updates:\n\n    * Accept empty strings (\"\") as values in the configuration file.\n      (Craig Leres)\n\n    * Support for specifying a separate host key for SSL-enabled\n      operation, with documentation update. (Craig Leres)\n\n1.5.2 Wed Jan 12 17:34:55 PST 2011\n\n- Portability fixes for --enable-int64 (Vern Paxson).\n\n- Bug fix for Active Mapping support (Kevin Lo).\n\n- Broccoli compiler warning fixes (Kevin Lo).\n\n- Bug fixes for --enable-int64 and for avoiding bogus statistics /\n  bad memory references when generating profiling information upon\n  exit (Vern Paxson).\n\n- Bug fixes for terminating connections (Tyler Schoenke and Vern Paxson).\n\n- Removed now-quite-stale SSHv1 overflow detection, as it's more prone\n  to false positives than useful detection (Vern Paxson).\n\n- The SWIG file now explicitly lists those pieces from broccoli.h which it\n  wants to wrap, rather than just including all of broccoli.h (Robin Sommer).\n\n- http-header.bro now includes a global \"include_header: set[string]\" If it\n  contains any strings, then only those headers will be processed.  If left\n  empty, then you continue to get the current behavior of processing all\n  headers. (Robin Sommer).\n\n- Several changes to drop.bro (Robin Sommer):\n\n\t* If True, the new flag Drop::dont_drop_locals indicates that\n\t  local hosts should never be dropped.  On by default.\n\n\t* If True, the new flag Drop::debugging activates extensive debugging\n\t  output for the catch-and-release logic.  Off by default.\n\n\t* The timeout for tracking dropping information is now 1 day\n\t  rather than 7 days, to better echo the one-restart-a-day semantics\n\t  used in the past.\n\n\t* Bug fix for hosts once dropped by later cleared; some state\n\t  for them persisted.\n\n- Portability fix for Broccoli Python bindings on 64-bit platforms (Robin\n  Sommer).\n\n- The HTTP analyzer no longer attempts to track Server/User-Agent\n  versions, as these are hugely voluminous (Seth Hall).\n\n- HTTP and SMTP no longer have extra-short inactivity timeouts, as\n  these were too often leading to premature expiration of a connection\n  (Robin Sommer).\n\n- Tracking of HTTP refer[r]er's by setting log_referrer. (Vern Paxson).\n\n- The \"rst\" tool (aux/rst/) now takes an optional \"-I <text>\" argument\n  that instructs it to inject <text> as payload rather than sending a RST\n  packet (Vern Paxson).  <text> must be NUL-terminated, and the NUL is not\n  included.\n\n- Bug fix for crashes in the DNS analyzer when processing replies for\n  which no request was seen (Robin Sommer).\n\n- Addressed a number of lint nits (Vern Paxson).\n\n- Rotation post-processors are now passed an additional argument\n  indicating whether Bro is terminating (Robin Sommer).\n\n- Bro now consistently generates a file_opened event for all fopen() calls.\n  (Robin Sommer).\n\n- The \"cf\" utility now ignores a leading \"t=\" prefix, for compatibility\n  with Bro's \"tagged\" logging format (Robin Sommer).\n\n- You can now redefine the email_notice_to function (Robin Sommer).\n\n- Fix for packet processing resumption when a remote Bro dies during\n  state synchronization (Robin Sommer).\n\n- OpenSSL/X509 portability fix, at long last (Gregor Maier & Christian\n  Kreibich).\n\n- Fix for compatibility with newer versions of autoconf (Gregor Maier).\n\n- A larger BroControl update (Robin Sommer, if not marked otherwise):\n\n  o Increasing default timeouts for scan detector significantly.\n\n  o Increasing the manager's max_remote_events_processed to\n    something large, as it would slow down the process too much\n    otherwise and there's no other work to be interleaved with it\n    anyway.\n\n  o Adding debug output to cluster's part of catch-and-release\n    (extends the debugging already present in policy/debug.bro)\n\n  o Fixing typo in util.py. Closes #223.\n\n  o Added note to README pointing to HTML version.\n\n  o Disabling print_hook for proxies' remote.log.\n\n  o broctl's capstats now reports a total as well, and stats.log\n    tracks these totals. Closes #160.\n\n  o Avoiding spurious \"waiting for lock\" messages in cron mode.\n    Closes #206.\n\n  o Bug fixes for installation on NFS.\n\n  o Bug fix for top command on FreeBSD 8.\n\n  o crash-diag now checks whether gdb is available.\n\n  o trace-summary reports the sample factor in use in its output,\n    and now also applies it to the top-local-networks output (not\n    doing the latter was a bug).\n\n  o Removed the default twice-a-day rotation for conn.log. The\n    default rotation for conn.log now is now once every 24h, just\n    like for all other logs with the exception of mail.log (which is\n    still rotated twice a day, and thus the alarms are still mailed\n    out twice a day).\n\n  o Fixed the problem of logs sometimes being filed into the wrong\n    directory (see the (now gone) FAQ entry in the README).\n\n  o One can now customize the archive naming scheme. See the\n    corresponding FAQ entry in the README.\n\n  o Cleaned up, and extended, collection of cluster statistics.\n\n    ${logdir}/stats now looks like this:\n\n      drwxr-xr-x   4 bro  wheel      59392 Apr  5 17:55 .\n      drwxr-xr-x  96 bro  wheel       2560 Apr  6 12:00 ..\n      -rw-r--r--   1 bro  wheel        576 Apr  6 16:40 meta.dat\n      drwxr-xr-x   2 bro  wheel       2048 Apr  6 16:40 profiling\n      -rw-r--r--   1 bro  wheel  771834825 Apr  6 16:40 stats.log\n      drwxr-xr-x   2 bro  wheel       2048 Apr  6 16:25 www\n\n    stats.log accumulates cluster statistics collected every time\n    \"cron\" is called.\n\n    - profiling/ keeps the nodes' prof.logs.\n\n    - www/ keeps a subset of stats.log in CSV format for easy plotting.\n\n    - meta.dat contains meta information about the current cluster\n    state (in particular which nodes we have, and when the last\n    stats update was done).\n\n    Note that there is no Web setup yet to actually visualize the data in\n\twww/.\n\n  o BroControl now automatically maintains links inside today's log\n    archive directory pointing to the current live version of the\n    corresponding log file (if Bro is running). For example:\n\n        smtp.log.11:52:18-current -> /usr/local/cluster/spool/manager/smtp.log\n\n  o Alarms mailed out by BroControl now (1) have the notice msg in the\n    subject; and (2) come with the full mail.log entry in the body.\n\n  o Fixing broctl's top output. (Seth Hall).\n\n  o Fixing broctl's df output in certain situations.\n\n  o BroControl fix for dealing with large vsize values reported by\n    \"top\" (Craig Leres).\n\n1.5.1 Fri Dec 18 15:17:12 PST 2009\n\n- Due to a Python configuration problem, the original 1.5 distribution\n  did not include the BroControl component, which also introduced a\n  portability problem for CentOS.  These issues have now been fixed (Robin\n  Sommer and Vern Paxson).\n\n\n1.5 Wed Dec 16 21:28:47 PST 2009\n\n- Bro now comes with a new framework, BroControl, for managing an\n  operational Bro setup, including support for installation, configuration,\n  and maintainance tasks such a log archival and mail notification.  The\n  framework transparently supports both traditional standalone setups as\n  well as cluster installations in which multiple Bro boxes coordinate to\n  analyze a high-volume network link.\n\n  See aux/broctl/README for more information about BroControl.\n\n  Note, BroControl supersedes the older BroLite system, which is no longer\n  supported and has been deprecated for a while now.\n\n- Numerous adjustments to DPD = dynamic protocol detection (Robin Sommer):\n\n    o The Analyzer::ProtocolViolation?() method can now be passed the\n      offending data (which POP3, SMTP, and FTP now do).  This information\n      is added to the \"reason\" string passed to the script level.\n\n    o SMTP now more accurately reports violations.\n\n    o FTP stops processing when client & server successfully negotiate\n      an AUTH scheme (leading to subsequent encryption).\n\n    o Analyzer::ProtocolViolation() is virtual, and\n      TCP_ApplicationAnalyzer() overrides it to not report violations\n      for any partial connections, because very likely these arise just\n      due to the analyzer getting confused.\n\n    o TCP::IsPartial() returns true if any side did not start with\n      a SYN packet (used to be just be for the originator).\n\n    o The connection_state_remove handler in conn.bro now has a higher\n      &priority so that other handlers for the same event can use\n      determine_service() and see any changes it performs.\n\n    o DynDisable:max_volume specifies a volume limit (default 10K).\n      Once a connection exceeds this limit, further protocol\n      limitations will neither raise ProtocolViolation notices nor\n      cause the analyzer to be disabled.\n\n    o The event engine no longer raises protocol_violation events for\n      TCP connections which had gaps, as these have proven too unreliable.\n      (Note that, ideally, the *analyzers* should avoid reporting\n      protocol_violations when they can't reliably parse a connection\n      anymore after a gap; but many don't.)\n\n- A set of new script functions provide support for incrementally computing\n  MD5 checksums (Seth Hall).\n\n\tmd5_hash_init(index: any): bool\n\t\tInitializes an incremental hashing instance.  \"index\" is\n\t\ta value of arbitrary type, used to identify this particular\n\t\tinstance (you can have multiple concurrent instances by\n\t\tusing different index values).  Returns T on success,\n\t\tF on failure (such as the index is already in use).\n\n\tmd5_hash_update(index: any, data: string): bool\n\t\tFor the given hashing instance, updates the hash\n\t\tbased on the given data.  Returns T on success, F on\n\t\tfailure (such as the index has not been initialized).\n\n\tmd5_hash_finish(index: any): string\n\t\tReturns the MD5-printable hash for the given index\n\t\tand terminates the instance, or the string \"\" if the\n\t\tindex was not active.\n\n- Bro now supports a believed-to-be-robust mechanism for estimating the\n  proportion of traffic that it failed to capture (\"measurement drops\"),\n  which can arise due to overload in either Bro itself, the kernel's\n  packet filter, or problems with the link tapping mechanism (Vern Paxson).\n  The event engine can generate estimates for either live traffic or what\n  was previously recorded in a trace file, though traces subject to some\n  forms of selective omission (such as skipping over parts of a connection\n  to reduce storage) can lead to erroneous values.\n\n  The estimates are based on observing gaps in TCP data streams, and\n  come in two forms: the rate at which such gaps appear, and the relative\n  volume of data missing due to the gaps.  (We've found however that the\n  volume-based estimator is not robust due to occasional packets with\n  incorrect sequence numbers, so this estimator is off by default.)\n\n  The easy way to get the estimates is to load capture-loss.bro.\n  By default, it generates a CaptureLossSummary notice upon Bro's exit,\n  which can look like:\n\n\t1130222759.344066 CaptureLossSummary estimated rate = 0.00089124 / 0.000970997 (events/bytes)\n\n  If the estimated loss is none, however, it suppresses this notice,\n  unless you redef CaptureLoss::summary_if_none to T.\n\n  You can also get finer-grained access by defining a \"gap_report\"\n  event handler and redef'ing gap_report_freq to a non-zero interval\n  (such as \"10 sec\").  This event allows you to pinpoint regions in\n  time that exhibit significant capture loss.  See capture-loss.bro\n  for an example of a handler for this event.\n\n  Finally, these changes include a number of fixes to Bro's\n  ack_above_hole/content_gap analysis, which is now significantly\n  more robust.\n\n- GeoIP support now supports ASN lookups via the built-in\n  function lookup_asn(a: addr): count (Scott Campbell and Seth Hall).\n\n- The GeoIP built-in's lookup_location() and lookup_asn() now\n  support IPv6 (Seth Hall).  Note, the current GeoIP distribution\n  doesn't include any IPv6 databases, so for now these won't succeed,\n  but the hooks are in place for when databases become available.\n\n- lookup_location() now falls back back to the country database if\n  the city database isn't available (Seth Hall).\n\n- The new SuccessfulPasswordGuessing Notice is generated when a host\n  has been seen attempting password guessing (currently only for FTP\n  sessions) and then successfully logs in (Royal Chan).  You can control the\n  threshold for such reports in terms of how many attempts the host must\n  have made by redef'ing the variable password_guessing_success_threshhold,\n  which defaults to 20.\n\n- The new script http-detect-passwd.bro analyzes the Web items returned\n  for fetches that appear to be accessing the passwd file (Akhil Dhar).\n  It generates a PasswordFullFetch Notice if it appears that the item\n  includes a full password file, and PasswordShadowFetch if it looks like\n  a shadowed password file.\n\n- The new built-in\n\n\tsystem_env(cmd: string, env: table[string] of string)\n\n  works like system(), but puts the table entries into the environment\n  before invoking the command (Robin Sommer).  Each <index> in the table\n  creates an environment variable of the form \"BRO_ARG_<index>\", whose\n  value is the corresponding table entry.\n\n- The new script function\n\n\texecute_with_notice(cmd: string, notice_info)\n\n  executes \"cmd\" with an environment containing the fields of the\n  notice_info, i.e., the information associated with a Notice (Robin Sommer).\n  Per the new system_env() function above, the environment variables appear\n  as \"BRO_ARG_<tag>\", where <tag> is the field tag as it appears in\n  notice.log when you enable use_tagging.\n\n- The new built-in enable_raw_output(file) acts the same as\n  the attribute &raw_output (Seth Hall).\n\n- The new built-in file_opened(f: file) event is generated any time Bro\n  opens a script-level file (Justin Azoff).  You can use this, for example,\n  if you want to ensure that a given file has a prelude in it such as\n  human-readable headers, even when the file is rotated.\n\n- The notice_info record has a new field\n\n\taux: table[string] of string &optional\n\n  which you can use for information specific to a given type of notice\n  (Robin Sommer).  Entries in $aux appear as \"aux_<index>\" tags in notice.log.\n\n- Another new notice_info record field is the boolean do_alarm (default=T),\n  which, if set to F, overides a notice action otherwise specifying to\n  generate an alarm (Robin Sommer).  In other words, if do_alarm is F, no\n  alarm will be generated independent of the notice action.\n\n  This is a work-around for the fact that we can't specify more than one\n  action.  In particular, we couldn't NOTICE_DROP but then *not* alarm,\n  which we now can by returning NOTICE_DROP yet setting do_alarm to F.\n\n- The notice_info record field $dropped now appears in the tagged output\n  format if true (Robin Sommer).\n\n- NOTICEs relating to scan detection now no longer include the connection\n  that triggered the notice, as it really doesn't contain any useful\n  information, given that the particular trigger simply depends on the\n  detection algorithm and its parameters (Robin Sommer).  However, we do\n  explicitly set $p (port number) in the notice, and also $n with the\n  number of attempts.\n\n- drop.bro now hardwires a Catch-and-Release redrop after seeing one\n  connection from a previously-dropped-but-already-released host\n  (Robin Sommer).\n\n- drop.bro now provides some new hooks (Robin Sommer):\n\n\tevent address_dropped(a: addr)\n\t\tGenerated when an address has been dropped.\n\n\tevent address_restored(a: addr)\n\t\tGenerated when connectivity to an address has been restored,\n\t\tsuch as using the Catch-and-Release mechanism.\n\n\tevent address_cleared(a: addr)\n\t\tGenerated when an address that was dropped in the past is\n\t\tno longer being monitored looking for new connections\n\t\t(as part of the Catch-and-Release mechanism).\n\n- The new built-in function\n\n\thexdump(data_str: string) : string\n\n  returns a hex dump representation of the given input data (Christian\n  Kreibich).  The dump renders 16 bytes per line, with hex on the left and\n  ASCII (where printable) on the right.\n\n- Bro's notion of when a TCP connection begins now dastes to the first\n  instance of an initial SYN packet seen, rather than the last (Gregor Maier).\n\n- The Time Machine script tm-contents.bro now generates\n\n\tevent contents_saved: event(c: connection, orig_file: string,\n\t\t\t\t\tresp_file: string)\n\n  when the content of a connection has been completely saved to disk\n  (Robin Sommer).\n\n- The mime.bro script now exports the MIME header callback table, and also\n  marks it as &redef'able so you can modify its entries (Matthias Vallentin).\n  The mime_log file is also now exported.\n\n- A new signature file, policy/sigs/http-bots.sig, contains signatures\n  to detect some of the current HTTP based controlled bot families (Seth Hall).\n\n- The signature engine's HTTP pattern matching has been fixed (Seth Hall)\n  to align with the documentation at:\n\n  http://www.bro-ids.org/wiki/index.php/Reference_Manual:_Signatures#Content_conditions\n\n  In particular, the content condition \"http\" is now referred to as\n  \"http-request\" (though \"http\" still works for backward compatibility),\n  \"http-request-header\" and \"http-reply-header\" now provide access to\n  headers seen in only one direction, and similarly for \"http-request-body\"\n  and \"http-reply-body\".  (This latter is still accessible as \"http-body\"\n  for backwards compatibility.)\n\n- The new script variable max_remote_events_processed: count (default 10)\n  sets a limit on the number of remote events processed in each round,\n  before tending to other inputs (Robin Sommer).\n\n- If you set the new script variable dump_used_event_handlers to T,\n  then on startup Bro dumps out all of the event handlers that the\n  loaded set of scripts can invoke (Matthias Vallenti).\n\n- Summaries for DNS PTR scanning now use a separate Notice,\n  DNS_PTR_Scan_Summary, rather than overloading DNS_PTR_Scan (Robin Sommer).\n\n- scan.bro now provides a table skip_dest_server_ports: set[addr, port]\n  which lists servers (defined as an address and a port) excluded from\n  scan detection computations (Craig Leres and Jay Krous).\n\n- When redefining values on the command line directly (using var=value),\n  quotation marks are now implicit only if \"var\" is a variable of type\n  string (Christian Kreibich).  This allows other string-like values\n  (such as enum's) to be passed as well.\n\n- scan.bro now explicitly loads conn.bro so that it can itself\n  be loaded independently (Robin Sommer).\n\n- login.bro depends on scan.bro (because of tracking authentication\n  \"scans\"), so now it explicitly loads it (Vern Paxson).\n\n- UDP_datagram_length_mismatch is now by default flagged just once per\n  originating host rather than once per connection, as it can generate\n  tons of messages (Vern Paxson).\n\n- Removed now-long-boring flagging of access to Solaris \"listen\"\n  service as \"hot\" (Vern Paxson).\n\n- Removal of libedit, since libreadline provides similar functionality\n  (Christian Kreibich).\n\n- Added scripts missing from distribution: dce.bro, ncp.bro, and smb.bro\n  (Vern Paxson).\n\n- ssh.bro now exports ssh_ports (Seth Hall)\n\n- A number of improvements to inter-Bro communication (Robin Sommer).\n\n (1) Remote communication now no longer includes location information for\n serialized objects; that removes quite a bit of redundacy from the network\n traffic.\n\n (2) The new option 'remote_check_sync_consistency\" disables the cross-check\n on the receiving side of &synchronized state of whether the current value\n of a variable has the value expected by the sender. Transmitting the\n original values in addition to the updates generates quite a bit CPU &\n network load in some cases (in particular, a table of tables). The default\n for remote_check_sync_consistency is off, and so far that in particular\n seems to reduce the proxy's load quite a bit.\n\n (3) Complete overhaul of the internal caching of serialized objects.  The\n objective of the caching is avoid retransmitting already sent values over\n and over again. It turns out, however, that some objects are very stable\n and hardly change or get replaced (e.g., Bro types); while other change\n all the time and are hardly reused some time later (e.g., Vals).  Now\n we maintain *two* caches independently for these types of objects; one\n with a low turn-over one and another with a high one.  This should reduce\n CPU load on both sender and receiver sides.\n\n The new scheme is only used if both communicating Bros support it; with\n older Bros, as well as with Broccoli, we continue using the old scheme.\n\n- Some reworking of remote printing (Robin Sommer), as follows.  Bro now\n  uses a new interprocess message rather than print_hook events, to better\n  manage buffering and associated load (these can produce failures depending\n  on system configuration; see remote.log).  A number of timeouts and\n  buffer sizes have been tuned.  Internally, EINTR errors are now treated\n  separately from EAGAIN.  Finally, even with remote_check_sync_consistency=F,\n  one type of consistency check was still being done; this is no longer\n  the case.\n\n- The DNS analyzer now generates events (dns_query_reply/dns_rejected)\n  for replies with zero questions (Robin Sommer).\n\n- Perftools support for incompatible changes in the 1.0 API (Robin Sommer).\n\n- Rearranged (generally reducing, though not always) some state timeouts\n  associated with scan detection (Robin Sommer).  In addition, when a\n  scanning address crosses ignore_scanners_threshold (meaning that it will\n  be ignored from now on anyway), it gets discarded from all state-tracking\n  tables.  Finally, the ignore_scanners_threshold now applies all kinds\n  of scans, not just address scans.\n\n- Substantial Broccoli updates, including a new initialization requirement\n  that breaks backward compatibility, support for enqueueing serialized\n  event data for transmission, and OpenSSL threadsafe initialization.\n  See aux/broccoli/ChangeLog for details (Christian Kreibich, Robin\n  Sommer, and Matthias Vallentin).\n\n- Broccoli hashtable optimisation. See aux/broccoli/ChangeLog for\n  details (Christian Kreibich & Matthias Vallentin).\n\n- Broccoli memory leak fixed, see aux/broccoli/ChangeLog for details\n  (Christian Kreibich).\n\n- Broccoli: updates to bropipe tool (Steve Chan and Robin Sommer).\n\n- Bug fixes for Broccoli Python bindings (Robin Sommer and Matthias Vallentin).\n\n- Fixed nasty bug due to module scoping that completely kept stepping-stone\n  detection from working (Vern Paxson).\n\n- A serious bug in the packet sorter has been fixed (Robin Sommer).\n\n- Bug fix for extra NULs getting embedded in escaped strings (Seth Hall).\n\n- Bug fix for HTTP messages that use \"Connection: close\" rather than length\n  headers, which yielded erroneous reassembled messages with \\r\\n's when\n  only \\n's were present (Bernhard Ager).\n\n- Fix for reporting on ICMP flows that are expired from the flow table\n  (Vern Paxson).  Previously there was a race condition if the flow\n  was flushed prior to its summary timer expiring.\n\n- The -l option (list the scripts that Bro loads) now correctly prints\n  scripts loaded by the prefix mechanism, and uses indentation to indicate\n  the load hierarchy (Robin Sommer).\n\n- A bug has been fixed (really, worked around) in drop.bro that prevented\n  dropped addresses from being properly restored (Robin Sommer).\n\n- Fixes for deadlocking problems in the Broccoli protocol. See\n  aux/broccoli/ChangeLog for details (Christian Kreibich & Robin Sommer).\n\n- Bug fix for DNS analyzer on 64-bit machines (Gregor Maier).\n\n- Bug fix for asynchronous DNS lookups to prevent some successful lookups\n  being reported as timed out (Robin Sommer).\n\n- Bug fix for tracking line numbers associated with compound statements\n  (Po-Ching Lin).\n\n- Fix for a rare condition in which the main Bro process couldn't kill\n  its child process (Robin Sommer).\n\n- Fix for file rotation when the underlying file is deleted before the\n  timer expires (Robin Sommer).\n\n- Fix for potential crash when communication connections break down,\n  and also for releasing cached objects (Robin Sommer).\n\n- Fix for default table entries computed by function invocation to not\n  cache previous results (Robin Sommer).\n\n- Fix for Bro's internal DNS resolution (Scott Campbell and Robin Sommer).\n\n- Portability fix for DAG packet capture (Gregor Maier).\n\n- Portability fix for --enable-brov6 (Robin Sommer).\n\n- Portability fixes for FreeBSD (Vern Paxson).\n\n- A work around for new_packet() crashing on IPv6 packets (Vern Paxson).\n  For now, IPv6 packets are skipped.  Also, for fragments the event handler\n  is now only called for the fully reassembled packet.\n\n- The new configuration option --disable-nbdns supports disabling non-blocking\n  DNS at configure time (Sean McCreary).  Note, there are some known problems\n  with it in some environments.\n\n- A number of configuration fixes and enhancements (Christian Kreibich\n  and Robin Sommer).\n\n- Consistency nit for the configuration process (Seth Hall).\n\n- A number of reference-counting and other memory management fixes\n  (Robin Sommer).\n\n- Bug fix for inter-Bro communication lockup (Seth Hall and Robin Sommer).\n\n- Bug fix for computing TCP payload length in new_packet event (Lothar Braun).\n\n- Bug fix for sending boolean True values via Broccoli (Seth Hall).\n\n- make distcheck fix to clean up .bif.bro files (Christian Kreibich).\n\n- Bug fix for DPD's recognition of SSLv2 connections (Seth Hall).\n\n- Bug fix for &default for tables indexed by subnets (Seth Hall).\n\n- A bug has been fixed that could crash Bro when you called get_event_peer()\n  after a remote connection had already disppeared (Robin Sommer).\n\n- Introduced a work-around for crashes that occur when Bro exits\n  due to handling a signal (Robin Sommer).\n\n- Bug fix for checkpoint.bro - don't schedule timers for times that\n  aren't actually in the future (Robin Sommer).\n\n- Hostname formatting fix for anon.bro (Fabian Schneider).\n\n- Bug fix for redundant .log extension in Time Machine log file\n  (reported by CS Lee).\n\n- Removed now-outdated special-casing of Linux reporting of packet filter\n  statistics (Peter Wurzinger and Robin Sommer).\n\n- A number of memory leaks fixed (Robin Sommer).\n\n- Addressed warnings from newer versions of g++ (Robin Sommer and Vern Paxson).\n\n- Fixed an invocation issue in the ca-create script that prevented it from\n  working with recent OpenSSL versions (Craig Leres & Christian Kreibich).\n\n- Comment fixed in drop-adapt (Justin Azoff).\n\n- Duplicate code removed from Val (Seth Hall).\n\n\n1.4 Fri Oct 17 11:08:52 PDT 2008\n\n- We are no longer supporting a previous Bro release as the \"stable\"\n  version.  Rather, the model now is that the current public release will\n  aim for increasing stability (occasionally updated with fixes), and those\n  who wish to use a \"bleeding-edge\" snapshot can do so via access to the\n  public SVN source code repository, as explained at\n\n\t  http://bro-ids.org/wiki/index.php/Subversion#Public_Access\n\n  Note that all previous releases remain available from the download page;\n  what is changing is that we no longer commit to support for the most\n  recent of these.\n\n- We have clarified the copyright statement that covers most of the\n  code to remove the \"advertising clause\" that derived from older\n  BSD licenses, and we have removed copyright wording from most source\n  code files.  See COPYING for the current wording and a list of\n  files that retain their own copyright notices.\n\n- Bro now supports analyzing NetFlow v5 data, i.e., from Cisco routers\n  (Bernhard Ager).  NetFlow can be useful for intrusion detection as it\n  allows analysis of traffic from many different points in the network.\n  Bro can now read NetFlow data from a UDP socket, as well as (mostly\n  for debugging purposes) from a file in a specialized format.  You can\n  create these files with the programs given in aux/nftools.\n\n  Command line switches:\n\n\t  -Y|--netflow <ip>:<prt>[=<id>] | read flow from socket\n\n\t    This is the usual way of getting NetFlow data into Bro by\n\t    opening a UDP socket on <ip>:<prt> and reading all incoming\n\t    packets.  Setting the <ip> to 0.0.0.0 should work on most\n\t    platforms.  Optionally you may set an identifier <id> for the\n\t    source - useful if there are many different sources you want\n\t    to analyze in parallel. This might also be necessary if you\n\t    want to use this feature with a clustered Bro.\n\n\t    Examples:\n\t\t      bro -Y 0.0.0.0:5555 netflow\n\t\t      bro -i eth0 -Y 10.0.0.1:1234=src1 brolite netflow\n\n\t  -y|--flowfile <file>[=<ident>]\n\n\t    Used to read from a file. You can optionally include an\n\t    identifier for the source.\n\n\t    Examples:\n\t\t      bro -y myflowfile netflow\n\t\t      bro -y myflowfile=src1 otherflowfile=src2 netflow\n\n  Netflow Events:\n\n\t  event netflow_v5_header(h: nf_v5_header)\n\n\t    Generated upon reading a new NetFlow PDU, as summarized in the\n\t    argument.  The field h_id gives the flow source identifier and\n\t    a serial number. You can use this field to associate subsequent\n\t    netflow_v5_record events with their header.\n\n\t  event netflow_v5_record (r: nf_v5_record)\n\n\t    Every record within a NFv5 PDU generates a corresponding\n\t    netflow_v5_record() event.  The relatively complex timestamp\n\t    format of NFv5 is already converted to Bro's time type, and\n\t    the TCP header flags are separated into bools.\n\n  The distribution includes an example analysis script, netflow.bro.\n  It simply dumps received NetFlow records.  If netflow_restitch is T\n  (the default), then Bro performs flow restitching as well, and two\n  script variables become relevant:\n\n\t  global netflow_finished_conn_expire = 310 sec &redef;\n\n\t    specifies how long to wait for additional flow records after\n\t    a RST or FIN for\n\n\t  const netflow_table_expire = 31 min;\n\n\t    Its setting only affects table declarations, and therefore\n\t    cannot be usefully redef'd.\n\n  Auxiliary programs:\n\n\t    Bro uses a custom format for flow data stored in files,\n\t    to enable preserving timestamps of the PDU arrivals and the\n\t    exporter's IP address.  The tools nfcollector and ftwire2bro\n\t    in aux/nftools/ provide ways to manipulate the Bro NF file\n\t    format.  The first dumps NetFlow data from a UDP socket to\n\t    stdout or to a file in Bro format.  The second converts NetFlow\n\t    data in \"wire\" format to Bro format, and, while doing so,\n\t    fakes up the exporter's IP address and timestamp.  You can get\n\t    \"wire\" format from normal flow-tools files, e.g., by using\n\t    'flow-export -f 4'.  Please note that the Bro format is just\n\t    a hack to allow for easier debugging.  Therefore the format\n\t    is not in fact platform independent, and not suitable for data\n\t    storage.\n\n- A new DHCP analyzer generates the following events (Po-Ching Lin):\n\n\tevent dhcp_discover(c: connection, msg: dhcp_msg, req_addr: addr)\n\tevent dhcp_offer(c: connection, msg: dhcp_msg, mask: addr,\n\tevent dhcp_request(c: connection, msg: dhcp_msg,\n\tevent dhcp_decline(c: connection, msg: dhcp_msg)\n\tevent dhcp_ack(c: connection, msg: dhcp_msg, mask: addr,\n\tevent dhcp_nak(c: connection, msg: dhcp_msg)\n\tevent dhcp_release(c: connection, msg: dhcp_msg)\n\tevent dhcp_inform(c: connection, msg: dhcp_msg)\n\n  where dhcp_msg values look like:\n\n\ttype dhcp_msg: record {\n\t\top: count;\t# 1 = BOOTREQUEST, 2 = BOOTREPLY\n\t\tm_type: count;\t# the type of DHCP message\n\t\txid: count;\t# transaction ID of a DHCP session\n\t\th_addr: string;\t# hardware address of the client\n\t\tciaddr: addr;\t# original IP address of the client\n\t\tyiaddr: addr;\t# IP address assigned to the client\n\t};\n\n  See dhcp.bro for the corresponding analysis script (which could\n  probably use some refinements).\n\n  Note, this analyzer is implemented using BinPAC, so you will need\n  to specify --use-binpac to activate it.\n\n- A BitTorrent analyzer is now available (Nadi Sarrar).  See the policy\n  scripts bittorrent.bro and bt-tracker.bro for the events generated for\n  analyzing transfers and tracker dialogs, respectively.\n\n- The \"Bro Lite\" configuration is now deprecated and will not in\n  general be supported (Robin Sommer & Vern Paxson).\n\n- \"make install\" now only installs a core set of files (Robin Sommer).\n  Policy files are now installed in <prefix>/share/bro/* (or whatever\n  configure determines $datadir to be), which is now in Bro's default\n  search path.  It creates a directory <prefix>/share/bro/site for local\n  policy files, and the default BROPATH is extended to include this.  The\n  default path no longer includes policy/local.  You can install the\n  additional files used by the (now deprecated) \"Bro Lite\" configuration\n  using \"make install-brolite\".\n\n- Substantial updates to Broccoli, including support for container\n  types (tables and sets) as well as a new metadata structure for event\n  callbacks, facilitating truly generic event handler implementations\n  (Christian Kreibich, Seth Hall and Robin Sommer). See aux/broccoli/ChangeLog\n  for details.\n\n- Extensive changes to allow Bro to process packets captured in the\n  past intermingled with those captured in real-time (Matthias Vallentin\n  and Robin Sommer).  This operation reflects combining Bro with use of\n  \"Time Machine\" functionality for packet capture.\n\n- We have unfortunately had to disable support for configuring Bro\n  to use ClamAV, since it turns out that the key interface we need\n  for processing blocks of memory directly rather than whole files\n  is no longer supported by the package, and in fact was buggy even\n  when it was (Robin Sommer).\n\n- The new signature option \"http-body /<regexp>/\" matches <regexp>\n  on the body data of HTTP entities (Robin Sommer).  The matching is\n  done after decompressing the body, if necessary.\n\n- The new built-in function identify_data(data: string, return_mime: bool)\n  analyzes the string \"data\" and returns its type according to libmagic,\n  if installed (Seth Hall).  The second argument controls whether it should\n  be returned as a MIME-type or just an identifying string.  For example,\n  identify_data(\"MZpofigu\", F) returns the string \"MS-DOS executable\", and\n  print identify_data(\"MZpofigu\", T) returns \"application/x-dosexec\".\n\n- The new analysis script http-identified-files.bro identifies the\n  type of items returned by Web servers using libMagic (if available)\n  and generates notices for interesting types and mismatches between\n  URLs and types (Seth Hall).\n\n  You configure it using two variables.  watched_mime_types is a pattern\n  (default /application\\/x-dosexec/ | /application\\/x-executable/ ) for\n  which any MIME type matching the pattern generates a HTTP_WatchedMIMEType\n  notice.\n\n  mime_types_extensions is a table mapping strings to patterns specifying\n  how URLs for the given MIME type should appear.  (Ideally, this would\n  be a table mapping patterns to patterns, but Bro doesn't currently support\n  that.)  It defaults to:\n\n\t\t[\"application/x-dosexec\"] = /\\.([eE][xX][eE]|[dD][lL][lL])/\n\n  i.e., do Windows executables end in .exe or .dll.\n\n  You can also redef the pattern ignored_urls to specify URLs that should\n  not generate complaints.  It defaults to matching Windows Update.\n\n- The new script http-extract-items.bro extracts the items from HTTP\n  traffic into individual files (Vern Paxson).  Files are named:\n\n\t<prefix>.<n>.<orig-addr>_<orig-port>.<resp-addr>_<resp-port>.<is-orig>\n\n  where <prefix> is a redef'able prefix (default: \"http-item\"), <n> is a\n  number uniquely identifying the item, the next four are describe the\n  connection tuple, and <is-orig> is \"orig\" if the item was transferred\n  from the originator to the responder, \"resp\" otherwise.\n\n- The workings of how Bro interfaces to external programs for dropping/\n  restoring connectivity of misbehaving hosts has been significantly\n  reworked (Brian Tierney and Robin Sommer).\n\n  First, dropping decisions used to be made directly by analyzer scripts,\n  such as scan.bro directly calling drop_address().  Now instead the\n  scripts generate Notices and then the notice policy can have an\n  action of NOTICE_DROP to codify that the response to the given Notice\n  is to drop the source.  The new notice_action_filter of drop_source\n  drops the source of notices, and drop_source_and_terminate both\n  drops the source and terminates the corresponding connection.\n\n  So, to drop all sources triggering a specific notice, one can now, e.g.,\n  write:\n\n\tredef notice_action_filters += { [Hot::SSH_Overflow] = drop_source };\n\n  Related to this change, notice_info has a new field $dropped, set to\n  true if the Notice triggered a (successful) drop.\n\n  Second, by redef'ing Drop::use_catch_release to T (default F) you can\n  activate \"catch-and-release\" logic.  You use this mode when you need to\n  manage a limited number of possible blocks, or to build in automatic\n  \"forgiveness\" in situations where blocked sources might become benign\n  (such as due to dynamic IP addresses).  If a source has been idle for\n  Drop::drop_time, then it is unblocked.  However, if it is again seen as\n  block-worthy, then it is blocked for an interval of Drop::long_drop_time.\n\n  Third, ICMP scanning is now reported by its own notice, ICMPAddressScan,\n  rather than Scan::AddressScan.\n\n- Google's perftools have replaced mpatrol for leak-checking and\n  heap-profiling (Robin Sommer).  If Bro is compiled with --enable-perftools\n  and configure finds the perftools, there are two command-line options\n  available:\n\n\t-m turns on leak checking of the main packet loop, with some\n\t   uninteresting leaks are suppressed.  Currently, with one\n\t   exception (the RPC analyzer; problem not yet found), it reports\n\t   no leaks when running the test suite.\n\n\t-M turns on heap profiling: Bro will take a snapshot of the heap\n\t   before starting the main packet loop and another one when\n\t   finished. These snapshots can then be analyzed with pprof.\n\n  For more information about the perftools see\n\n\thttp://code.google.com/p/google-perftools\n\n- Notice tags are now generated in a pseudo-unique fashion that, with high\n  probability, ensures that tags generated by separate Bro processes don't\n  clash when logged to a common location, such as for a Bro cluster (Robin\n  Sommer).  Tags are now string's rather than count's, and are associated\n  with all notices, not just that are connection-related.  You can however\n  redef the string notice_tag_prefix or the function new_notice_tag to\n  further control how such tags are generated.\n\n- Four new built-ins for type conversion (Robin Sommer):\n\n\tfunction double_to_interval(d: double): interval\n\tfunction addr_to_count(a: addr): count\n\tfunction port_to_count(p: port): count\n\tfunction count_to_port(c: count, t: transport_proto): port\n\n- Many policy scripts have been modified to use modules & scoping\n  (Robin Sommer and Matthias Vallentin), which may require updates to\n  existing scripts/refinements.\n\n- The new script variable dpd_conn_logs (default F), if true, changes the\n  semantics of the service field in connection logs written to conn.log,\n  as follows (Robin Sommer).  It becomes a comma-separated list of analyzers\n  confirmed by DPD to parse the connection's payload.  If no analyzer could\n  confirm its protocol, but the connection uses a well-known port, the\n  service is the name of the port with \"?\" appended (e.g., \"http?\"), as\n  long as the corresponding analyzer has not declined the connection.\n  In addition, ftp-data sessions are labeled \"ftp-data\" and portmapper\n  connections are labeled with the specific method-call (just as before).\n\n  dpd_conn_logs defaults to F because the change in semantics may break\n  scripts that parse conn.logs; but it will likely change to the default\n  in the future. With dpd_conn_logs turned off, conn logs are generated\n  as they used to be, with a few rare exceptions (with previous versions,\n  the service field was sometimes determined while the connection was still\n  alive; now it's always determined at the time when the conn.log entry\n  is written out).\n\n- The SSL analyzer has been rewritten using BinPAC, with a number of\n  robustness improvements (Tobias Kiesling).  It currently is only used\n  if you execute with --use-binpac.\n\n- Python bindings for Broccoli are now available in\n  aux/broccoli/bindings/python/ (Robin Sommer).  See README/README.html\n  in that director for details.\n\n- The new \"auth\" option in remote.bro indicates whether a given side is\n  considered \"authoritative\" for shared state, in which case it sends its\n  initial state to &sync'ed peers (Robin Sommer).  When two peers synchronize\n  their state, one side sends its current set of state to the other as\n  soon as the remote connection is established.  The one sending the state\n  used to be the one who has been running longer; now it can also be\n  explicitly set via the \"auth\" flag in the Remote::Destination.\n\n- Two new tuning parameters for scan.bro (Robin Sommer):\n\n  ignore_scanners_threshold (default 0):\n\n\tIf a host has scanned more than this many hosts, it is completely\n\texcluded from further scan detection.  0 disables.\n\n  addr_scan_trigger (default 0):\n\n\tA host is only tracked for address scanning once it has contacted\n\tthis many different hosts.  Primarily intended for using a two-stage\n\tscan detection with a Bro cluster: first, each node searches locally\n\tfor scanners by looking for hosts contacting more than\n\taddr_scan_trigger destinations.  Those hosts which do are then\n\tglobally tracked throughout the cluster by &synchronizing the scan\n\tdetector tables.\n\n- When Bro serializes functions, it now does so by default using only\n  their name, rather than their full value (Robin Sommer).  This prevents\n  propagation of expiration functions associated with tables and sets.\n  Note, currently there is no mechanism provided to switch from the\n  default behavior, but the internal hooks are in place to do so.\n\n- The new built-in variable trace_output_file gives the name of the -w\n  output trace file (Robin Sommer).\n\n- Bro no longer installs new file rotation timers when shutting down\n  (Robin Sommer).\n\n- The new policy scripts remote-print-id{,-reply}.bro support convenient\n  access to printing the identifiers of a remote Bro (Robin Sommer).\n  You use the script remote-print-id.bro to request and receive the\n  printing; the remote Bro must have loaded remote-print-id-reply.bro\n  in order to process the request.\n\n  Example use:\n\n\t  bro -e 'redef PrintID::dst=\"<dst>\" PrintID::id=\"<name-of-id>\"'\n\t\t\t<other scripts> remote-print-id\n\n- scan.bro has been heavily modified to better support distributed scan\n  analysis (Matthias Vallentin and Robin Sommer).\n\n- The check for unused event handlers is now turned off by default\n  (Robin Sommer).  To enable, use \"redef check_for_unused_event_handlers = T\".\n\n- The new script drop.bro has been split off from scan.bro to isolate\n  the logic concerning dropping addresses to block scans (Robin Sommer).\n\n- The new -l flag lists each script as it is loaded (Robin Sommer).\n\n- Textual descriptions of identifiers now include their attributes\n  (Robin Sommer).\n\n- The new predefined function prefixed_id() returns a session identifier with\n  its peer-ID prepended if it's associated with a remote Bro (Robin Sommer).\n  This is now used when generating writing log files.\n\n- remote.bro now assigns a priority of -10 to its bro_init() event handler\n  to allow others a chance to modify destinations (Robin Sommer).\n\n- A large number of BinPAC updates (Ruoming Pang and Robin Sommer).\n\n- The new built-in type_name(v): string returns the name of the type\n  of the value v (Vern Paxson).  For example, \"typename(5.2)\" returns\n  \"double\".  This function is mainly for internal debugging (i.e.,\n  finding mismatches between values generated by the event engine\n  versus how their type is expected by the script layer).\n\n- The new built-in str_shell_escape() does some basic escaping on strings\n  that will be passed to system() (Christian Kreibich).  Note, this function\n  isn't ready (robust enough) for routine use, however.\n\n- The new built-in disable_print_hook(file) acts the same as\n  the attribute &disable_print_hook (Robin Sommer).\n\n- The new script terminate-connection.bro factors out the terminate_connection()\n  functionality that used to be in conn.bro (Robin Sommer).\n\n- The new attribute &group=<tag> can be associated with event handlers\n  to group them together into a set that can be manipulated as a whole\n  (Robin Sommer).  <tag> is a string reflecting the name given to the group.\n\n  The built-in enable_event_group(group: string) turns on all the analyzers\n  in a given group, and disable_event_group(group: string) deactivates them.\n\n- The new attribute &raw_output applies to variables of type file, disabling\n  escaping of non-printable characters (Seth Hall).\n\n- You can now iterate over the characters in a string value using\n  a \"for\" loop, e.g., \"for ( c in str ) ...\" (Robin Sommer).\n\n- The new built-in\n\n      function cat_sep%(sep: string, def: string, ...%): string\n\n  works similarly to cat(), except that it (a) separates the values\n  by \"sep\" and (b) substitutes \"def\" for empty strings (Seth Hall).\n\n- The function string_escape() now takes a string of characters to escape\n  rather than a single character (Robin Sommer).  Each character in the\n  string is preceded by '\\' in the return value (also any embedded '\\'s,\n  as before).\n\n- The new built-in function global_ids() returns a table of all global\n  identifiers along with associated information (Robin Sommer).  The\n  return value has type table[string] of script_id, indexed by the name\n  of the identifier and yielding records with the following fields:\n\n\ttype script_id: record {\n\t\ttype_name: string;\n\t\texported: bool;\n\t\tconstant: bool;\n\t\tenum_constant: bool;\n\t\tredefinable: bool;\n\t\tvalue: any &optional;\n\t};\n\n- The new script function find_last(str: string, re: pattern) returns\n  the last occurrence of the given pattern in the given string, or\n  an empty string if no match (Robin Sommer).  Note that this function\n  returns the match that starts at the largest index in the string, which\n  is not necessarily the longest match.  For example, a pattern of /.*/\n  will return just the final character in the string.\n\n- The new script variable record_all_packets, if redef'd to T (default F),\n  instructs Bro to record every packet it processes (Robin Sommer).\n  Prior to introducing this variable, Bro applied a few heuristics to\n  reduce recording volume.  Setting this variable also causes packets\n  to be recorded very early in processing, which can be helpful for\n  debugging crashes.\n\n- If the new script flag ssl_log_ciphers is set to T (default), ssl.bro\n  logs the ciphers seen (Robin Sommer).\n\n- Much more expanded Time Machine support, now located in\n  policy/time-machine/ (Robin Sommer),\n\n- The new command line option --status-file <file> (alias -U) specifies\n  the name of a file into which Bro will write an indicator of its current\n  processing status (Robin Sommer).  Possible values include \"INITIALIZING\",\n  \"RUNNING\", \"TERMINATING\", \"TERMINATED\".\n\n- The new policy script targeted-scan.bro looks for repeated access from\n  the same source to the same server, to detect things like SSH\n  password-guessing attacks (Jim Mellander).\n\n- The \"alternative\" style for printing strings (i.e., a fmt() argument\n  of \"%As\") now renders the raw string, other than escape-expanding\n  embedded NULs (Vern Paxson).  This change may be temporary, pending\n  development of more fine-grained control over string rendering.\n\n- For now we have removed the %S functionality for fmt() (Robin Sommer).\n  %S was meant to print \"raw\" strings, but later processing of such\n  printing still introduces artifacts.\n\n- GeoIP information now includes latitude and longitude (Seth Hall).\n\n- ssh.bro now supports the variable skip_processing_after_handshake\n  which directs the event engine to omit any further processing of an\n  SSH connection after its initial handshake (Seth Hall and Robin Sommer).\n  This can help with performance for large file transfers but precludes\n  some kinds of analyses (e.g., tracking connection size).  This change\n  also adds a scope of \"SSH\".\n\n- Email notification of notices now allows for separate destinations\n  depending on notice type (in particular, a regular mail destination\n  versus a pager destination), and also escapes the notice to prevent\n  injection attacks (Seth Hall and Robin Sommer).\n\n- The new policy script conn-flood.bro is a simple connection-flooding\n  detector, mainly meant as a demonstration (Robin Sommer).\n\n- A large number of additions to the TLS/SSL known-ciphers suite (Seth Hall).\n\n- Serialization now uses 64-bit IDs to cache items rather than 32-bit,\n  for robustness during long-running execution (Robin Sommer).\n\n- The new script variable tcp_max_initial_window specifies, for flows\n  for which ACKs have never been seen, the maximum volume of initial\n  data after which Bro will assume that it is seeing only one side\n  of the connection and will not buffer data for consistency checking\n  awaiting the later arrival of ACKs (Robin Sommer).  It defaults to 4 KB.\n  (Note, this used to be an internal value, so the behavior is not new.)\n  Set to 0 to turn off this functionality and have Bro attempt to\n  track all such flows.\n\n- The new script variable tcp_max_above_hole_without_any_acks specifies,\n  for flows for which ACKs have never been seen, the maximum volume of\n  data above a sequence hole that Bro will tolerate for a connection\n  before giving up on tracking the flow (Robin Sommer).  It defaults to 4 KB.\n  (Note, this differs from tcp_max_initial_window in that this threshold\n  applies to sequence holes rather than the beginning of flows.  Like\n  tcp_max_initial_window this used to be an internal value.)  Set to 0 to\n  turn off this functionality.\n\n- The new script variable tcp_excessive_data_without_further_acks specifies\n  a threshold similar to tcp_max_above_hole_without_any_acks, but for\n  flows for which Bro has seen ACKs (Robin Sommer).  It defaults to 10 MB.\n  Set to 0 to turn off the functionality.\n\n- Equal signs (\"=\") in text for notices are now escaped when using the\n  tagged format to keep them unambiguous from the \"=\" delimiters\n  (Robin Sommer).\n\n- The final tallies for notices are now processed as NoticeTally\n  NOTICE's rather than directly alarm'd (Robin Sommer).\n\n- WeirdActivity notices now include an associated connection when appropriate\n  (Robin Sommer).\n\n- Support for large (> 2^32 bytes) pcap trace files (Po-Ching Lin).\n\n- Scoped names (\"...::...\") are now allowed in signature \"eval\"\n  constructs (Christian Kreibich).\n\n- scan.bro is now decoupled from conn.bro, i.e., you can @load the\n  latter without getting the former (Vern Paxson).  As part of this\n  change, the logic to invoke TRW is now in scan.bro.\n\n- weird.bro has been updated with a number of missing Weird's (Vern Paxson).\n\n- If when using inter-Bro communication the child Bro process terminates,\n  it now also terminates the parent process (Robin Sommer).\n\n- BinPAC analyzers now interoperate with DPD (Robin Sommer).\n\n- Some http.bro processing options are now exported so they can be\n  accessed in other scripts (Robin Sommer).\n\n- SMTP analysis now applies to port 587/tcp as well as 25/tcp (Robin Sommer).\n\n- $conn is now set in ServerFound notices (Robin Sommer).\n\n- You can now create empty sets and tables using set() and table(),\n  i.e., the usual set/table constructors with no arguments (Vern Paxson).\n  By themselves, these have an unspecified type - you can't use them\n  directly other than to assign them.  For example,\n\n\tlocal bad_guys: set[addr];\n\t...\n\tbad_guys = set();\t# start over assuming no bad guys\n\n- A number of scripts have been (slightly) simplified to use the\n  new empty set()/table() constructors (Vern Paxson).  Note that\n  these still aren't usable for field assignments in record constructors,\n  nor for attributes like &default = ...\n\n- Removed unused syntax for declaring sets based on a list of initial\n  values (Vern Paxson).\n\n- set() and table() can now be used as arguments to function calls\n  (Vern Paxson).\n\n- The vestigial &match attribute has been removed.\n\n- POP3 is now recognized using Dynamic Protocol Detection (Seth Hall).\n\n- The new event expected_connection_seen(c: connection, a: AnalyzerTag)\n  is generated whenever a connection is seen for which we have previously\n  scheduled an analyzer via expect_connection() (Robin Sommer).\n\n- The new built-in capture_state_updates logs all changes applied to\n  &synchronized variables, in a fashion similar to the capture_events()\n  built-in (Robin Sommer).  An accompanying policy script,\n  capture-state-updates.bro, turns this on to the file state-updates.bst.\n\n- If the new script variable suppress_local_output is set (default: F),\n  Bro suppresses printing to local files if there's a receiver for\n  print_hook events (Robin Sommer).  This option is however ignored\n  for files with a &disable_print_hook attribute.\n\n- The new notice action filter function file_if_remote specifies\n  that notices from sent from remote source addresses should\n  have an action NOTICE_FILE (Robin Sommer).\n\n- The new notice action filter function file_local_bro_notices specifies\n  that notices generated by the local Bro instance (as opposed to a\n  remote peer) should have an action NOTICE_FILE (Robin Sommer).\n\n- An arbitrary tag can now be past to post-processors for log rotation\n  (Robin Sommer).\n\n- Default inactivity timeouts for interactive services shortened to\n  1 hour (Robin Sommer).\n\n- The scanning variables distinct_{peers,ports,low_ports} are now\n  redef'able (Robin Sommer).\n\n- The new -S (--summary-only) option for site-report.pl directs to\n  only generate connection summaries (Brian Tierney)\n\n- More useful default config file for edit-brorule.pl (Brian Tierney).\n\n- Bro now includes a test suite in testing/istate/ for its \"independent\n  state\" functionality (Robin Sommer).\n\n- Support for parallel builds via make -j (Christian Kreibich).\n\n- Bro's default search path now includes includes policy/sigs/ and\n  policy/time-machine/ (Robin Sommer).\n\n- Bro's internal processing of interprocess communication has been\n  significantly overhauled to prevent potentially fatal race conditions\n  (Robin Sommer).\n\n- Bro now checks calls to fmt() at compile-time to ensure that the\n  correct number of arguments are present (Vern Paxson).  This is useful\n  in addition to Bro's run-time checking for arguments matching their\n  corresponding format-specifiers in the case of rarely-executed statements\n  that might not generate such run-time checks in routine testing.\n\n- The ports associated with Telnet and Rlogin are now redef'able (Robin Sommer).\n\n- MIME processing now removes leading whitespace from MIME headers\n  (Sanmeet Bhatia and Robin Sommer).\n\n- TCP \"weird\" events reported by the connection compressor now match\n  (other than a few rare corner-cases) those produced for normal TCP\n  processing (rmkml and Robin Sommer).\n\n- Added Scan::suppress_UDP_scan_checks to control false positives\n  on scan detection in environments with P2P protocols that use UDP\n  (Vern Paxson).\n\n- The internal analyzer interface now includes an EndOfData() method that\n  analyzers can use to report that all of a message has been delivered\n  (Robin Sommer).\n\n- Fix for a significant memory leak in processing UDP when using -w\n  (Robin Sommer).  Note: this change turns off by default trace rewriting\n  for generic UDP traffic.\n\n- Two serious regular expression bugs fixed (Vern Paxson).  In the\n  first, searching for a regular expression inside a string would\n  fail if the pattern occurred only after an embedded newline.  In\n  the second, insufficient buffer was allocated when compiling regular\n  expressions, leading to memory corruption.\n\n- Base64 decoding bug fixes (Christian Kreibich and Ruoming Pang).\n\n- Automatic rotation of files is now disabled for contents files written\n  by the TCP reassembler, which otherwise leads to mangled files\n  (Robin Sommer).\n\n- Bro now ships with an updated version of libpcap (0.9.8), which hopefully\n  fixes problems managing trace files > 4 GB in size.\n\n- Significant bug fixes for gzip- and deflate-encoded Web items (Robin Sommer).\n\n- Bug fix for secondary-filter.bro (Vern Paxson).\n\n- Removed a naming ambiguity regarding TCP states (Vern Paxson).\n\n- Bug fix for signature scanner not matching all of its input (Vern Paxson).\n\n- Bug fix for using port values in signatures (Robin Sommer).\n\n- Minor policy script tweaks: state management for weird's, processing\n  of Notice tags associated with connections, and dependencies for\n  irc-bot.bro (Robin Sommer).\n\n- aux/ portability fixes (Vern Paxson).\n\n- Workarounds added for a BinPAC deficiency, which is that code in %cleanup\n  clauses can also be executed during recovery from exceptions when parsing\n  new data.  This means that any delete's or Unref()'s need to also set the\n  corresponding pointer to nil (Vern Paxson).\n\n- Bug fix for crashes with the non-BinPAC SSL analyzer (Robin Sommer).\n\n- Tweak to peer-status.bro since Bro now requires events to be\n  declared prior to reference in a \"schedule\" statement (Robin Sommer).\n\n- The signature keyword \"enable\" now optionally accepts the syntax\n  \"foo:bar\" to specify \"activate analyzer bar as a child of analyzer foo\"\n  (Robin Sommer).  This is used for example for an XML-over-HTTP analyzer\n  that's in the works.\n\n- irc-bot-syslog.bro now uses open_log_file() for its log file (including\n  the logging suffix) rather than a direct open (Vern Paxson).\n\n- Bug fix for tracking Blaster across a Bro Cluster (Robin Sommer).\n\n- Bug fix for the HTTP BinPAC analyzer chopping the trailing character\n  off of HTTP headers when generating the http_all_headers event (Gregor Maier).\n\n- Bug fix for HTTP chunked items for which the chunk size line was terminated\n  by CRLF but the CR and LF came in separate packets (Gregor Maier).\n\n- A bug has been fixed that would cause partial lines (for line-oriented\n  protocols) to fail to be processed when a connection terminated\n  (Robin Sommer).\n\n- Bro no longer treats a signal arriving before a previous signal has\n  been processed as fatal, nor does it attempt processing of a termination\n  signal if seemingly there are no race conditions to worry about\n  (Robin Sommer).  Both of these changes are an attempt to improve\n  Bro's robustness.\n\n- Fix for attributes such as &encrypt not working in initial declarations\n  but only in later redef's (Seth Hall and Robin Sommer).\n\n- Fixes for memory leaks in SSL processing (Seth Hall and Robin Sommer).\n\n- Fix for POP3 analyzer to not treat lines like \"<space>.\" as message\n  terminators (Robin Sommer).\n\n- Bug fix for crashes arising from nil pointers in list expressions\n  (Seth Hall and Robin Sommer).\n\n- Bug fix: a signature's \"enable\" would activate the corresponding analyzer\n  even if no event handlers were defined for it (Robin Sommer).\n\n- Bug fixes to prevent crashes when mixing set_contents_file() with\n  subsequent explicit close(), and to ensure all data written to\n  file upon connection tear-down (Gert Doering and Robin Sommer).\n\n- Configuration support for MacPorts and Fink package management systems\n  (Christian Kreibich & Vern Paxson).\n\n- Communication-only Bro's now send out email alarms (Robin Sommer).\n\n- Writes to a file that fail due are now run-time errors rather than\n  fatal internal errors, since often these occur due to the disk\n  being full (Robin Sommer).\n\n- Byte-order bug fix for lookup_location() (Robin Sommer).\n\n- BinPAC portability fix for 64-bit machines (Bernhard Ager and Robin Sommer).\n\n- Portability fixes for newer versions of gcc (Jan Gerrit Goebel and\n  Robin Sommer).\n\n- Some support for porting to Solaris (Stephan Toggweiler).\n\n- Connection compressor bug fix for source and destination having the\n  same IP address, such as when monitoring loopback (Robin Sommer).\n\n- Connection compressor bug fix for connections with multiple SYNs\n  (Robin Sommer).\n\n- Bug fix for using already-declared local variables for looping\n  over vectors in a \"for\" loop (Robin Sommer & Vern Paxson).\n\n- Bug fix for not processing truncated UDP packets (Tom Kho and Robin Sommer).\n\n- Bounds-check added to BinPAC-generated code (Tom Kho and Robin Sommer).\n\n- Bug fix for checking whether an IPv6 address is part of a subnet\n  (Seth Hall).\n\n- Bug fixes for crashes relating to asynchronous DNS lookups performed\n  at start-up (Robin Sommer).  These changes also lowered the timeout\n  before assuming failure from 20 seconds down to 5 seconds.\n\n- Portability and const-ness fixes (Kevin Lo and Robin Sommer).\n\n- Suppression of some content-gap complaints when running on traces\n  that have been filtered down to only TCP control packets (Robin Sommer).\n\n- Removed unnecessary dependency in notice-action-filters.bro\n  that led to errors when loading icmp.bro by itself (Vern Paxson).\n\n- Bug fix for potential infinite loop in client communiation (Robin Sommer).\n\n- Bug fix in reference counting that could eventually lead to roll-over\n  (Robin Sommer).\n\n- Bug fix in communication initialization (Robin Sommer).\n\n- Internal documentation fix: timers are specified using absolute time,\n  not relative (Robin Sommer).\n\n- Performance improvement for built-in find_all() function when running\n  on large strings (Robin Sommer).\n\n- Memory leak fixes (Robin Sommer, Bernhard Ager, Christian Kreibich).\n\n- Bug fix for error recovery when encountering an unknown link layer\n  (Bernhard Ager).\n\n- Bug fix for reversing client & server in a connection (Po-Ching Lin).\n\n- Bug fix for packet_contents when capture length exceeds the IP payload\n  length due to Ethernet frame padding (Christian Kreibich).\n\n- Bug fix for tcp_packet event erroneously including Ethernet padding\n  in its contents (Vern Paxson).\n\n- Bug fix for lookup_connection built-in (Seth Hall).\n\n- Portability nit for libedit tarball (Vern Paxson).\n\n- Broccoli portability fix for NetBSD (Christoph Leuzinger).\n\n- Type-checking for script-level event invocation was completedly broken -\n  now fixed (Vern Paxson).\n\n- Portability fixes for different versions of g++/STL (Nicholas Weaver\n  and Vern Paxson).\n\n- Fix for dynamic detection of SSL via DPD (Robin Sommer).\n\n- IPv6 portability fix for BinPAC-based DNS analyzer (Vern Paxson).\n  Note, more portability work is needed for it.\n\n- Bug fix for bifcl error messages (Vern Paxson).\n\n- Minor bug fix for remote communication, plus some improved communication\n  logging (Robin Sommer).\n\n- Bug fix for &printhook (Robin Sommer).\n\n- Bug fix for error message output (Robin Sommer).\n\n- Bug fix for termination cleanup (Robin Sommer).\n\n- Bug fix for some Rlogin corner cases (Robin Sommer & Vern Paxson).\n\n- Bug fix for bifcl generation of \"interval\" types (Vern Paxson).\n\n- Bug fix for getting connection memory statistics when Bro is\n  exiting (Robin Sommer).\n\n- Config fix: --enable-debug now turns off -O2 for gcc (Robin Sommer).\n\n- Bug fixes for \"heavy\" analysis (Vern Paxson).\n\n- Broccoli bug fixes for types net and port (Robin Sommer).\n\n- Bug fixes for Telnet environment options (Robin Sommer).\n\n- Bug fix for accessing remote peer description (Robin Sommer).\n\n- A fix for the connection compressor generating new_connection too\n  late (Robin Sommer).\n\n- Fixes for DAG support, including configuration and multiple\n  interfaces (Robin Sommer).\n\n- Bug fix for serializing time-stamps of table entries (Robin Sommer).\n\n- Bug fix for dealing with peer IDs for remote communication (Robin Sommer).\n\n- Bug fix to avoid installing timers when timers have already\n  been canceled (Robin Sommer).\n\n- Bug fix for interplay between serializing connections and\n  connection compressor (Robin Sommer).\n\n- Memory leak fix for enum's (Robin Sommer).\n\n- Bug fix for files being closed prior to bro_done() (Vern Paxson).\n\n- aux/broccoli/contrib was not included in distribution (Robin Sommer).\n\n- Auto-configuration bug fix for BinPAC (Craig Leres).\n\n- Bug fix for dynamic protocol detection (Robin Sommer).\n\n- A number of configuration fixes for installation and portability\n  (Christian Kreibich, Brian Tierney, Robin Sommer, Dan Kopecek).\n\n\n1.3 Mon Jul 16 22:11:00 PDT 2007\n\n- The Bro manual has been wikified at:\n\n\thttp://www.bro-ids.org/wiki/index.php/User_Manual\n\n  and this is the format in which it will evolve in the future\n  (Christian Kreibich).\n\n- Much more extensive support for SMB, NetBIOS and NCP (Chris Grier).\n\n- The new attribute &priority=n defines the order of execution for handlers\n  of the same event (Robin Sommer).  Handlers with higher priority are\n  executed first.  n is an integer expression that must evaluate to a\n  constant when the script is loaded.\n\n  Example:\n          > cat foo.bro\n          event bro_init() &priority = -5 { print -5; }\n          event bro_init() &priority =  5 { print 5; }\n          event bro_init()                { print 0; }\t# default priority=0\n          > ./bro foo.bro\n          5\n          0\n          -5\n\n  The connection_state_remove() handler in conn.bro now has priority\n  -10 and therefore executes after all other handlers for this event.\n  This fixes a long-standing problem of sometimes $addl fields not showing\n  up in connection summaries.\n\n- The new expressions record(...), table(...), set(...) and vector(...)\n  are constructors for the corresponding aggregate types (Vern Paxson).\n  For example,\n\n\trecord($foo = \"hi\", $bar = -6)\n\n  is the same as the existing constructor\n\n\t[$foo = \"hi\", $bar = -6]\n\n  For tables, sets, and vectors, the \"...\" values within the ()'s have\n  the same syntax as those that you can list in variable initializations.\n  For example,\n\n\ttable([1, T] = \"black\", [4, F] = \"red\")\n\n  returns a table of type \"table[count, bool] of string\".\n\n\tset(4, 3, -1)\n\n  is a value of type \"set[int]\".\n\n- You can associate attributes with table() and set() constructors\n  (Robin Sommer).  For example:\n\n         local s = set(1.2.3.4) &read_expire = 5 secs;\n\n  associates a 5-second read expiration with the set assigned to s.\n\n- Bro now explicitly supports port numbers reflecting a transport protocol\n  type of \"unknown\" (Christian Kreibich).  Currently, this means \"not TCP,\n  UDP or ICMP\".  The numerical value of such a port is the IP protocol,\n  so ranges from 0..255.  For example:\n\n    global p: port = 0/unknown;\n\n    print fmt(\"%s\", p);\n    print fmt(\"p is TCP? %s\", get_port_transport_proto(p) == tcp);\n    print fmt(\"p is unknown? %s\",\n\t\tget_port_transport_proto(p) == unknown_transport);\n\n  yields\n\n    0/unknown\n    p is TCP? F\n    p is unknown? T\n\n  In comparisons of different protocol types, the following holds:\n  unknown < TCP < UDP < ICMP.\n\n- If your system supports \"GeoIP\" (see http://www.maxmind.com/app/geolitecity\n  for a corresponding city database), then the new script function\n\n\t  lookup_location(a: addr): geo_location\n\n  returns a record of geographic information associated with an address\n  (Seth Hall).  The geo_location record has $country_code, $region and\n  $city fields.  If no information is available, each of these will be\n  set to empty strings.\n\n  If Bro hasn't been configured with GeoIP support, or if the address is\n  IPv6 that cannot be directly converted to IPv4, then Bro produces a\n  run-time error and likewise returns empty strings.\n\n- Signature-matching on HTTP components now processes the URI with\n  escape sequences expanded (Robin Sommer).  Ideally, there would be\n  two signature keywords, one for decoded URIs (corresponding to this\n  case) and one that allows matching against the URI as originally\n  transmitted.\n\n- The connection compressor is no longer considered experimental, and\n  is used by default (Robin Sommer).\n\n- The new function lookup_hostname(host: string): addr_set asychronously\n  looks up the IPv4 address(es) of the given host via DNS (Robin Sommer).\n  Like lookup_addr(), this function can only be used within a \"when\"\n  statement.\n\n- The new built-in\n\n\traw_bytes_to_v4_addr(s: string): addr\n\n  takes a string that points to at least 4 bytes, and returns an address\n  corresponding to interpreting these as being an IPv4 address in network\n  order (Vern Paxson; suggested by Mike Dopheide).\n\n- Trace-rewriting support for DNS, SMB (Chris Grier).\n\n- The new script function find_all(str: string, re: pattern): string_set\n  returns a string_set giving all occurrences of the pattern \"re\" in\n  the string \"str\" (Robin Sommer).  (Note that string_set's are unordered.)\n\n- The new policy script save-peer-status.bro generates a log\n  to peer_status.$BRO_LOG_SUFFIX of updates received from\n  communication peers (Robin Sommer).\n\n- The policy script print-filter.bro now includes two (scoped) variables,\n  terminate_bro and to_file, which control whether to exit after printing\n  the filter (default T) and whether to write to the log file\n  pcap_filter.$BRO_LOG_SUFFIX or (default) to stdout (Robin Sommer).\n\n- The new script variable check_for_unused_event_handlers controls whether\n  Bro checks for unused event handlers (Robin Sommer).  It defaults to T,\n  which was the past behavior (always report).\n\n- Bro now terminates if the only pending activity is future timers\n  (Robin Sommer).  It used to wait for those timers to expire, but this\n  can cause fundamental problems if the timers are associated with table\n  management (since these might never completely drain).\n\n- Tables and sets inside of records are now initialized to empty\n  values rather than uninitialized (Vern Paxson).\n\n- A new variable allow_services_from (in hot.bro) complements the\n  existing allow_service_to variable (Brian Tierney).  It specifies\n  that access to the given service from the given originator is\n  allowed.\n\n- global_sizes() no longer reports internal variables (Robin Sommer).\n\n- The IRC analyzer is now activated if any of the (many) IRC event\n  handlers are defined (Robin Sommer).\n\n- The default value for tcp_close_delay is now 5 sec rather than 0 sec\n  (Robin Sommer).  This prevents some spurious connection events.\n\n- Improved logic for dealing with \"reversed\" connections such\n  as backscatter (Vern Paxson).\n\n- You can now left-justify fields when using fmt() with \"%-\" like\n  in sprintf (Christian Kreibich).\n\n- Updates to DNS query types (Larry Leviton).\n\n- Added mechanism to http-header.bro to skip printing some HTTP headers\n  (Larry Leviton).\n\n- The IrcHotWord notice now sets the associated connection (Robin Sommer).\n\n- If a notice has a tag, it's no longer overridden (Robin Sommer).\n\n- ServerFound notices now set the port field (Robin Sommer).\n\n- The built-in lookup_ID() now returns the string \"<unknown id>\" if the\n  ID does not exist, rather than a run-time error (Robin Sommer).\n\n- The new tuning option ProtocolDetector::suppress_servers specifies a\n  set of analyzers for which Bro generates ServerFound notices, but not\n  ProtocolFound (Robin Sommer).  This both reduces log file size and\n  conserves memory.\n\n- A new notice_action_filter, tally_notice_type_and_ignore, works the same\n  as tally_notice_type but returns IGNORE (Robin Sommer)\n\n- Setting summary_interval == 0 disables the creation of irc-bots.summary.log\n  (Robin Sommer).\n\n- If you @load foo and a directory \"foo\" is in your path, Bro no longer\n  tries to load it (Robin Sommer).\n\n- A number of BinPAC fixes and enhancements (Ruoming Pang, Chris Grier\n  and Vern Paxson).\n\n- BinPAC now resides in aux/binpac rather than src/binpac (Ruoming Pang\n  and Christian Kreibich).  This reflects a decoupling of it from Bro so\n  that it can be used to generate protocol analyzers for other projects too.\n\n- Removed example Inktomi entries from skip_scan_sources initialization,\n  since they no longer exist (Vern Paxson).\n\n- The variable make notice_once_per_orig_tally_interval is now\n  redef'able (Brian Tierney).\n\n- SIGPROF to the communication child process now logs resource stats to\n  remote.log (Matthias Vallentin).\n\n- The new built-in getpid(): count returns Bro's process ID (Robin Sommer).\n\n- Patterns for detecting IRC-based bots updated (Robin Sommer).\n\n- irc-bot-syslog now logs just bots, not all IRC client/servers (Robin Sommer).\n\n- The new variable suppress_notice_actions in notice.bro suppresses\n  notice_actions events for selected notice types (Robin Sommer).\n\n- Files opened during operation now rotate just like those opened at\n  startup (Robin Sommer).\n\n- ResourceStats now also logs elapsed time and the reported number of\n  packets-on-the-link (Mark Dedlow).\n\n- Printing a \"file\" value now produces its name (Robin Sommer).\n\n- Removed deliberate truncation of payload in port 80 FIN packets\n  (Vern Paxson).\n\n- remote.log now includes received peer_descriptions (Robin Sommer).\n\n- Significant POP3 analyzer speed-ups (Vern Paxson).\n\n- Updated README (Vern Paxson).\n\n- Fix for \"@load a\" followed by \"@load a.bro\" not loading the same file\n  twice (Robin Sommer).\n\n- Bug fixes for propagating state operations to uninitialized variables\n  and for spurious state inconsistency messags (Robin Sommer).\n\n- Bug fix for sending final sync-points during pseudo-realtime mode\n  (Robin Sommer).\n\n- Fix for possible buffer overflow (Christian Kreibich).\n\n- Bug fix for spurious end-of-file's during inter-Bro communication\n  (Robin Sommer).\n\n- Bug fix for dpd_match_only_beginning=F (Robin Sommer).\n\n- Bug fix for updating timestamps (Christian Kreibich).\n\n- Bug fix for skipping ADU processing in adu.bro (Christian Kreibich\n  and Zhichun Li).\n\n- Fix for ICMPs that carry ICMP headers (or non-TCP/UDP/ICMP headers)\n  within them (Vern Paxson).\n\n- Fix for files being rotated after the timer queue has been deleted\n  (Vern Paxson).\n\n- Bug fix for signature-matching with IPv6 subnets (Vern Paxson).\n\n- Bug fix for connection compressor setting connection origin (Robin Sommer).\n\n- Bug fix for interconn.bro when processing peculiar connections (Vern Paxson).\n\n- Fix for off-by-one buffer in sscanf call (Christian Kreibich).\n\n- Fixed inefficiency/warning flagged by g++ (Vern Paxson).\n\n- Bug fix for NUL string termination in SMB processing (Zhichun Li).\n\n- Fix for over-ref'ing of file Val's (Vern Paxson).\n\n- Fixes for some g++ warnings (Christian Kreibich, Vern Paxson).\n\n- gcc 3.4.2 portability fixes (Robin Sommer).\n\n- Minor build fixes for Broccoli, including a version bump to match that\n  of Bro.  See aux/broccoli/ChangeLog for details.\n\n- distcheck fixes (Christian Kreibich).\n\n- Configuration portability fixes (Matthias Vallentin, Jean-philippe Luiggi).\n\n- OpenBSD portability fixes (Jean-philippe Luiggi, Christian Kreibich).\n\n\n1.2.1 Mon Dec 11 16:22:58 PST 2006\n\n- Fixed delayed triggering of new_connection events when using the\n  connection compressor.\n\n- Fixed tracking of first packet in TCP analyzer. (Reported by Guohan Lu)\n\n- The syslog built-in got lost during some previous merge.\n\n- Fixed crash if local variable is given as timeout value for table.\n  (Reported by Mike Wood.)\n\n- Fixed using \"time\" values as table indices.\n\n- Added ssh to default brolite DPD configuration.\n\n- Fixed catching up to real-time in case of lull.\n\n- Fixed Broccoli \"BRO_DATA_FORMAT_VERSION\" to match version in Bro.\n\n- Fixed Makefile problem in doc directory.\n\n- Fixed Makefile dependency problem in binpac directory.\n\n- Added Linux tuning to brolite install script.\n\n- Modified Makefile to include broccoli/contrib.\n\n- Adding missing initialization to remote serializer.\n\n- Minor documentation updates for reference manual and Broccoli.\n\n\n1.2 Tue Oct 17 12:09:49 PDT 2006\n\n- Bro now supports DPD, dynamic protocol detection (Robin Sommer, Holger\n  Dreger, and Michael Mai).  With DPD, Bro can analyze protocols regardless\n  of what port numbers they use: it infers the protocol based on which\n  application analyzers can parse it without error.  Adding this functionality\n  involved extensive changes to Bro's internals, but also now enables\n  multiple Bro analyzers to work on the same connection, either concurrently\n  or one nested inside the other (we have not taken much advantage of this\n  latter capability yet, but see the FTP events discussed below).\n\n  There are a number of new policy scripts, events, and variables associated\n  with DPD processing, as follows.\n\n  Scripts:\n\n\tYou activate DPD by @load'ing dpd.bro.  It in turn instructs Bro\n\tto load the signature file policy/sigs/dpd.sig.  Note that Bro\n\tuses signatures to expedite deciding which analyzers to try on\n\ta given connection; it does *not* simply use the signatures to\n\tmake the determination of which protocol is in use, as this is\n\tinsufficiently robust.  (At this point, Bro provides signatures\n\tfor FTP, IRC, HTTP, SMTP, and SSH.  In the future we plan to add\n\tother protocols.)\n\n\tAlong with dpd.bro, you need to @load detect-protocols.bro or\n\tdetect-protocols-http.bro. The former enables general detection\n\tof application-layer protocols, while the latter does further\n\tinspection of HTTP sessions to characterize applications running\n\ton top of HTTP such as Gnutella or SOAP.   (Loading dpd.bro\n\tis separate from loading one of these scripts because in principle\n\tBro could use a different means than signatures to activate\n\tthe analyzers, although currently it does not.)\n\n\tIf you @load dyn-disable.bro, then once an analyzer determines\n\tthat it does not match a given connection, it is deactivated\n\t(and a Notice is generated).  Otherwise, it still proceeds to try\n\tits best to analyze the connection (to possibly be more robust\n\tagainst evasion).\n\n\tThe scripts dce.bro and smb.bro enable DPD for the Windows DCE and\n\tSMB protocols, respectively.  (Note that analysis of these protocols\n\tis undergoing a major expansion, not yet complete.)\n\n  Events:\n\n\tevent protocol_confirmation(c: connection, atype: count, aid: count)\n\t\tGenerated when the given connection has been confirmed as\n\t\tconforming with the application type (protocol) specified\n\t\tby atype. aid is a globally unique analyzer ID that identifies\n\t\ta particular analyzer instance.\n\n\t\tThe values for atype are symbolic names associated with\n\t\teach of Bro's analyzers, such as ANALYZER_IRC.  See the\n\t\tinitialization at the beginning of Analyzer.cc for the\n\t\tfull set of names.\n\n\t\tThe function analyzer_name(atype: count): string translates\n\t\tthese symbolic names into text.  For example,\n\n\t\t\tanalyzer_name(ANALYZER_IRC)\n\n\t\tyields \"IRC\".\n\n\tevent protocol_violation(c: connection, atype: count, aid: count,\n\t\t\t\treason: string)\n\t\tGenerated when the given connection has been found to\n\t\tviolate the protocol of the given application type, with\n\t\t\"reason\" giving details.\n\n  Variables:\n\n\tdpd_buffer_size: count (default 1024)\n\t\tSpecifies how much pending data Bro keeps for connections\n\t\tthat have not been classified yet.  Once this fills, the\n\t\tdata is deleted, though classification can still continue\n\t\t(see below).\n\n\tdpd_match_only_beginning: bool (default T)\n\t\tIf set, specifies that Bro should stop signature matching\n\t\tif it has processed dpd_buffer_size bytes.\n\n\tdpd_ignore_ports: bool (default F)\n\t\tIf set, then Bro does not take into consideration the port\n\t\tnumbers associated with connections when attempting to\n\t\tclassify them (which can otherwise help the process in\n\t\tsome cases).\n\n\tdpd_reassemble_first_packets: bool (default T)\n\t\tIf set, then Bro does TCP stream reassembly before applying\n\t\tsignature-matching to detect protocols.\n\n\tlikely_server_ports: set[port]\n\t\tSpecifies a list of ports that Bro will consider as likely\n\t\tused by servers.  For example, if Bro sees a connection\n\t\tthat has already been established (so it does not know\n\t\twhich side sent the initial SYN), and one side uses a port\n\t\tin this set, then it will assume that that side is the\n\t\tserver (connection responder).  The set is empty unless\n\t\tyou populate it or @load server-ports.bro, which specifies\n\t\ta large number of values.\n\n\tdpd_config: table[AnalyzerTag] of dpd_protocol_config\n\t\tSpecifies the DPD configuration associated with each tag.\n\t\tThe type dpd_protocol_config is simply:\n\n\t\t\ttype dpd_protocol_config: record {\n\t\t\t\t ports: set[port] &optional;\n\t\t\t};\n\n\t\ti.e., an optional $ports field specifying a set of ports\n\t\tassociatd with the tag.  For example, ftp.bro now includes\n\t\tthe equivalent of:\n\n\t\t\tredef dpd_config += {\n\t\t\t\t[ANALYZER_FTP] = [$ports = 21/tcp]\n\t\t\t};\n\n  Functions:\n\n\tThe function\n\n\t\texpect_connection(orig: addr, resp: addr, resp_p: port,\n\t\t\t\t\tanalyzer: count, tout: interval)\n\n\tis called to alert Bro that a new connection is expected, initiated\n\tby orig to a server running on resp's port resp_p (note: orig's port\n\tis not specified) which will correspond to the specified analyzer\n\t(e.g., \"FILE\", which is used to analyze files transferred by FTP -\n\tsee next item).  \"tout\" is a timeout to associate with the waiting.\n\n\tThe function\n\n\t\tfunction disable_analyzer(cid: conn_id, aid: count)\n\n\tinstructs Bro to disable the analyzer that generated the current\n\tevent, assuming the analyzer is associated with the given connection\n\tID.  This is used by the dyn-disable.bro script discussed above.\n\n- A much more complete BinPAC compiler, along with new HTTP, DNS, and\n  RPC/Portmap analyzers in binpac (Ruoming Pang). The flag \"--use-binpac\"\n  activates the BinPAC-based analyzers (currently for HTTP and DNS).\n  See www.cs.princeton.edu/~rpang/binpac-paper.pdf for a description of\n  BinPAC, and let Ruoming know if you are interested in using BinPAC to build\n  new analyzers.\n\n- A new type of analyzer, FILE, analyzes the contents of a connection as\n  though it were a data file (Robin Sommer).  Currently, it can generate\n  two events:\n\n\tevent file_transferred(c: connection, prefix: string, descr: string,\n\t\t\t\tmime_type: string)\n\t\tIndicates that the connection transferred a file. \"prefix\"\n\t\tis the beginning of the file's data; \"descr\" and \"mime_type\"\n\t\tare indicators of the file's type, as reported by the\n\t\t\"libmagic\" library.\n\n\t\tdescr/mime_type are only set if Bro is configured on a\n\t\tsystem that includes the \"libmagic\" library.\n\n\tevent file_virus(c: connection, virname: string)\n\t\tIndicates the connection transferred an executable\n\t\tcorresponding to a known virus of the given name.\n\n\t\tThis functionality is only available if Bro is configured\n\t\ton a system that includes the \"libclamav\" library.\n\n  Note, this analyzer is enabled via a call to expect_connection by\n  the FTP analyzer.\n\n- New events relating to IRC analysis (Robin Sommer):\n\n\tevent irc_client(c: connection, prefix: string, data: string)\n\t\tGenerated upon seing a client message sent over the given\n\t\tIRC connection.  \"prefix\" is the command's prefix as defined\n\t\tby the IRC protocol.  It is used by servers to indicate the\n\t\ttrue origin of the message; it may be empty.  \"data\" contains\n\t\tthe message.\n\n\tevent irc_server(c: connection, prefix: string, data: string)\n\t\tSame for server messages.\n\n\tevent irc_user_message(c: connection, user: string, host: string,\n\t\t\t\tserver: string, real_name: string)\n\t\tGenerated upon seeing an IRC \"USER\" command.\n\n\tevent irc_password_message(c: connection, password: string)\n\t\tGenerated upon seeing an IRC \"PASS\" command.\n\n\tevent irc_channel_topic(c: connection, channel: string, topic: string)\n\t\tGenerated upon seeing an IRC server reply that includes\n\t\tthe channel topic.\n\n\tevent irc_global_users(c: connection, prefix: string, msg: string)\n\t\tGenerated upon seeing an IRC server reply that includes\n\t\ta count of the number of IRC users.\n\n- The new experimental script irc-bot.bro tracks IRC-based bots (Robin Sommer).\n  The accompanying script irc-bot-syslog.bro syslog's the state of the\n  bot analysis every IrcBot::summary_interval seconds (default 1 minute).\n\n- The new script proxy.bro looks for open Web proxies by matching incoming\n  requests to a server with outgoing requests it makes (Robin Sommer).  It\n  generates HTTPProxyFound Notices when it finds one.\n\n- Changes to notices.bro (Robin Sommer):\n\n\t- notice_policy_item's now have a default $result of\n\t  NOTICE_FILE and a default $priority of 1.\n\n\t- The new notice_action_filter, notice_alarm_per_orig, alarms\n\t  on the first NoticeType from a specific source.  Subsequent\n\t  instances are tallied.\n\n\t- notice_action_filters now reside in the new script\n\t  notice-action-filter.bro (automatically loaded by notice.bro).\n\n\t- The notice actions NOTICE_ALARM_PER_CONN, NOTICE_ALARM_PER_ORIG,\n\t  and NOTICE_ALARM_ONCE have been removed, as they were never\n\t  actually implemented.\n\n\t- If the notice_policy returns IGNORE or FILE, the action_filters\n\t  filters are no longer consulted.\n\n- A new attribute for tables and sets, &mergeable, changes the semantics\n  of assignments, as follows (Robin Sommer).  Given two &mergeable tables/sets\n  A and B, an assignment \"A = B\" becomes actually a join \"A = A \\cup B\"\n  (i.e., union).  The envisoned use is to help avoid race conditions\n  when doing remote state synchronization.\n\n- The semantics of &synchronized expire_funcs has changed (Robin Sommer).\n  Now, when a table entry is expired and the operation is propagated to a\n  a peer, the peer will call its expire_function.\n\n- TRW analysis now skips UDP traffic because it currently treats\n  all UDP connections as failures (Robin Sommer).\n\n- trw.bro has been split into trw-impl.bro (the algorithm) and\n  trw.bro (which simply activates the analysis), to facilitate writing\n  scripts that have hooks into TRW analysis but don't presume it's\n  active (Robin Sommer).\n\n- The option report_remote_notices in remote.bro has been replaced\n  by a new script you include, remote-report-notices.bro (Robin Sommer).\n\n- The new function connect_peer() explicitly connects to a remote host\n  (Robin Sommer).\n\n- The new script remote-send-id.bro sends the current value of an ID\n  to a remote Bro and then terminates processing (Robin Sommer).  It's\n  intended for use from the command-line, as in\n\n\tbro -e \"redef dst=\"<dst>\" id=\"<name-of-id>\" <scripts> remote-send-id\n\n  The other scripts must set up the connection. <dst> is an index into\n  Remote::destinations corresponding to the destination.\n\n- New built-ins {suspend,resume}_state_updates() can be called to\n  temporarily avoid propagating updates to &sync'ed values (Robin Sommer).\n  This can avoid duplicated activity.\n\n- The new function terminate_communication() instructs Bro to end its\n  communication with remote peers (Robin Sommer).\n\n- The new event remote_state_access_performed is raised when remote state\n  access has been performed (Robin Sommer).  This is primarily for debugging.\n\n- The log() built-in has been renamed to ln() to avoid conflict (Vern Paxson).\n\n- bifcl now generates event generation wrapper functions from event.bif\n  (Ruoming Pang).  For example, to generate event http_reply, currently\n  one writes:\n\n\t\tval_list* vl = new val_list;\n\t\tvl->append(BuildConnVal());\n\t\tvl->append(new StringVal(fmt(\"%.1f\", reply_version)));\n\t\tvl->append(new Val(reply_code, TYPE_COUNT));\n\t\tif ( reply_reason_phrase )\n\t\t\tvl->append(reply_reason_phrase);\n\t\telse\n\t\t\tvl->append(new StringVal(\"<empty>\"));\n\t\tConnectionEvent(http_reply, vl);\n\n  In the future, one will be able to just call bro_event_http_reply(), and\n  the code generated by bifcl looks like:\n\n\tvoid bro_event_http_reply(Connection* c, StringVal* version,\n\t\t\t\t\tbro_uint_t code, StringVal* reason)\n\t\t{\n\t\tval_list* vl = new val_list;\n\n\t\tvl->append(c->BuildConnVal());\n\t\tvl->append(version);\n\t\tvl->append(new Val(code, TYPE_COUNT));\n\t\tvl->append(reason);\n\n\t\tmgr.QueueEvent(http_reply, vl, SOURCE_LOCAL, c);\n\t\t}\n\n  Accompanying this change is a semantic shift to types \"string\" and \"port\"\n  in .bif files.  They used to be translated to C++ types BroString* and\n  uint32, respectively.  Now they are translated to StringVal* and PortVal*.\n  The functions in bro.bif are changed accordingly, and please be aware\n  of this change when you write built-in functions in future.\n\n  Also for this change, the parameter 'new' for rsh_request has been renamed\n  'new_session', as 'new' is a reserved word for C++.\n\n- Some ICMP \"connections\" now have services identified (\"icmp-echo\",\n  \"icmp-unreach\") rather than just listing the service as \"other\"\n  (Ruoming Pang).\n\n- The new option remote_trace_sync_interval specifies an interval after\n  which each Bro will stop processing its trace and wait for all others\n  to signal that they have reached the same time (Robin Sommer).  The\n  intent is support for operating Bro in a distributed cluster fashion\n  (and in particular for debugging such clusters when running off-line\n  on traces).\n\n  This option only works in pseudo-realtime mode, and requires the new\n  global remote_trace_sync_peers to give the total number of remote peers\n  (not including self).  Signaling is done via a new communication message\n  type.\n\n- Extensions for DNS transformation/anonymization, including introduction\n  of trace transformation for protocols other than TCP (Jason Lee).\n  Not yet fully developed/debugged.\n\n- Extensions for HTTP transformation/anonymization (Martin Casado).\n  Not yet fully developed/debugged.\n\n- The $conn field is now included in HTTPProxyFound notices (Robin Sommer).\n\n- Changed service inference algorithm to favor lower-numbered\n  likely-servers over higher-numbered ones (Vern Paxson).\n\n- In pseudo-realtime mode, Bro now uses real-time for deciding which\n  peer should send state (Robin Sommer).\n\n- Time synchronization for Bro's running on traces in pseudo-realtime mode\n  added (Robin Sommer).\n\n- Avoidance of false content gaps improved when sorting packets with\n  out-of-order timestamps (Ruoming Pang).\n\n- Packets from the packet sorter are now more robustly drained upon\n  termination of input (Ruoming Pang).\n\n- Documentation for deep-copy updated (Christian Kreibich).\n\n- Nasty fragment reassembly bug fixed (Vern Paxson).\n\n- Serious bugs in EDNS0 processing fixed (Vern Paxson).\n\n- Fixed significant misfeature of interconn.bro that stopped all processing\n  of a connection once it makes a detection (Vern Paxson).\n\n- Fixes for &read_expire operation across synchronizes tables (Robin Sommer).\n\n- Fixes for multiple peers exchanging initial &sync state simultaneously\n  (Robin Sommer).\n\n- Improvements to graceful termination of Bro when communicating with\n  remote peers (Robin Sommer).\n\n- Fix for ICMP analyzer not always generating icmp_sent events\n  (Robin Sommer).  This appears to still need some work, as now\n  it generates redundant events.\n\n- Fix for initial exchange of &sync state which could lead to\n  referencing unknown IDs (Robin Sommer).\n\n- Fix to scan detection for differing semantics of connection compressor\n  vs. non-compressor (Robin Sommer).\n\n- Bug fix for distinguishing regular expression matches of length 0 from\n  those of length 1 (Ruoming Pang).\n\n- Fix for SSH version parsing in the presence of content gaps (Robin Sommer).\n\n- Bug fix for IRC that could lead to crashes (Robin Sommer).\n\n- Bug fix to refrain from adding new timers when a connection has\n  already been removed from the connection table (Robin Sommer).\n\n- Bug fix for packet_contents not including the transport-layer header\n  (Robin Sommer).\n\n- Some memory leaks fixed (Robin Sommer).\n\n- A bunch of portability and distribution problems fixed (Christian\n  Kreibich, Robin Sommer, Vern Paxson).\n\n\n1.1 Mon May 15 10:50:33 PDT 2006\n\n- Bro now supports a \"when\" statement for taking action upon something\n  becoming true asynchronously (Robin Sommer).  This provides a powerful\n  new mechanism with numerous applications.\n\n  Syntax:\n\n\twhen '(' <expr> ')' <stmt> [timeout <interval> '{ <stmts> '}']\n\n  where the first <stmt> can be a single statement or a block enclosed\n  in {}'s, but the set associated with \"timeout\" must be enclosed in\n  {}'s (to reduce ambiguities in Bro's grammar).\n\n  Bro executes the first statement when <expr> becomes true. If you give\n  a timeout and the condition has not been satisfied before it expires, Bro\n  executes the second statement instead.\n\n  A simple example:\n\n\tglobal t: table[addr] of count;\n\tevent connection_established(c: connection)\n\t    {\n\t    local orig = c$id$orig_h;\n\t    if ( orig !in t )\n\t\t{\n\t\tt[orig] = 1;\n\n\t\twhen ( t[orig] == 5 )\n\t\t    print fmt(\"%s has established 5 connections\", orig);\n\t\ttimeout 1 hr\n\t\t    {\n\t\t    print fmt(\"%s has NOT established 5 connections\", orig);\n\t\t    delete t[orig];\n\t\t    }\n\t\t}\n\t    else\n\t\t++t[orig];\n\t    }\n\n  Notes:\n\t- The condition may be evaluated more than once, and at arbitrary\n\t  times.\n\n\t- When the when-body is executed, the condition is guaranteed to be\n\t  still satisfied.\n\n\t- Expression reevaluation is primarily triggered by modifications\n\t  to globals.  However, reevaluations do not take place immediately\n\t  but potentially at a later point.  This means that if we change a\n\t  global to a value which would execute the trigger but then change\n\t  it back, the change may go unnoticed.\n\n\t- Inside the condition you may introduce new locals.  For example,\n\n\t    when ( (local x = foo()) && x == 42 ) ...\n\n\t  Such an assignment always yields true as its expression value\n\t  (but the assignment might be delayed, for example if foo() is\n\t  a delayed function call - see below).\n\n  Delaying function calls\n  =======================\n\n  Functions called inside the condition of a when-clause may delay their\n  results until they're ready. This works for both script-level and built-in\n  functions.\n\n  For script-level functions, there is a new construct, \"return <when-stmt>\",\n  to delay a function's result. When used, the function returns at the\n  time the when-stmt's condition becomes true, and it yields the value\n  that the when-stmt's body then returns. Toy example:\n\n      global X: table[string] of count;\n\n      function a() : count\n\t    {\n\t    # This delays until condition becomes true.\n\t    return when ( \"a\" in X )\n\t\t  {\n\t\t  return X[\"a\"];\n\t\t  }\n\t    timeout 5 min\n\t\t  {\n\t\t  return 0;\n\t\t  }\n\t    }\n\n      event bro_init()\n\t    {\n\t    # Installs a trigger which fires if a() returns 42.\n\t    when ( a() == 42 ) { print \"Yippie!\"; }\n\n\t    X[\"a\"] = 42;\n\t    }\n\n  There's also a new built-in function which can delay\n\n\tlookup_addr(host: addr)\n\n  performs asynchronous DNS address->hostname lookups. Example:\n\n\t    local h; addr;\n\t    [...]\n\t    when (local name = lookup_addr(h)) { print h, name; }\n\n  See the function gen_hot_notice_with_hostnames() in conn.bro for\n  a more worked-out example of using the \"when\" clause to translate the\n  local address in SensitiveConnection notices to a hostname (contributed\n  by Brian Tierney).  This functionality is activated by redef'ing\n  xlate_hot_local_addr to T.\n\n  Here is the full evaluation model of a when's condition:\n\n       - The condition may be evaluated more than once, at arbitrary times.\n\n       - It is always fully evaluated, no matter whether some former\n\t evaluation has been suspended by a delaying function call.\n\n       - All function calls which do not delay are always *fully* executed\n\t each time the condition is evaluated.\n\n       - Function calls which delay are only executed *once*; their result is\n\t cached and re-used in the case the condition is evaluated again.\n\n       - The condition is guaranteed to be true when the body is executed\n\t (potentially using cached function results)\n\n- By default Bro now uses a configuration similar to what used to be\n  activated using reduce-memory.bro, along with some additional state\n  timeouts that are new (Robin Sommer and Vern Paxson).  This allows for\n  better state management out-of-the-box, at the cost of some precision\n  of analysis and resilience to evasion.  In particular, the intent is to\n  move towards being able to run Bro continuously without inexorably growing\n  the amount of memory used until exhaustion.\n\n  You can access a configuration similar to the previous default state\n  management settings by loading heavy-analysis.bro.  It turns on a\n  load-prefix of \"heavy\", so when you load XXX.bro, a file heavy.XXX.bro\n  will also be automatically loaded if present.  Note that, as was the\n  case for reduce-memory, you need to load heavy-analysis prior to other\n  files for it to have effect.\n\n- The new module clear-passwords.bro monitors login/FTP/IRC/POP traffic\n  for cleartext passwords (Jason Lee).\n\n- The new script service-probe.bro looks for remote hosts that repeatedly\n  connect to the same service on local hosts (for a configurable set of\n  services and connection sizes) in order to detect brute-forcing attacks\n  such as password-guessing (Jim Mellander).\n\n- A new ARP analyzer generates three events:\n\n\tevent arp_request(mac_src: string, mac_dst: string,\n\t\t\tSPA: addr, SHA: string, TPA: addr, THA: string);\n\n\tevent arp_reply(mac_src: string, mac_dst: string,\n\t\t\tSPA: addr, SHA: string, TPA: addr, THA: string);\n\n\tevent bad_arp(SPA: addr, SHA: string, TPA: addr, THA: string,\n\t\t\texplanation: string);\n\n  with a corresponding policy script arp.bro (Chema Gonzalez and Vern Paxson).\n  It writes logs to arp.$BRO_LOG_SUFFIX.  It has not been tested much yet.\n\n- Bro Lite changes (Jason Lee):\n\t- default user for is now user 'bro'\n\t- now uses the correct sysctl on FreeBSD 6\n\t- now uses the correct Perl path if site-report.pl not installed\n\t  into '/usr/local/bro'\n\t- no longer prompts to encrypt email unless you pick to email reports\n\n- The default Bro Lite install now only checkpoints Bro once a week\n  (Brian Tierney).\n\n- Implicit Bro file extensions (such as .bro for policy scripts and .sig\n  for signatures) are now searched for first rather than only if the\n  non-extension-version of the file doesn't exist (Vern Paxson).  For\n  example, running \"bro -r trace mt\" now first searches $BROPATH for\n  \"mt.bro\" before searching for \"mt\", whereas it used to do these in\n  the other order.\n\n- There's now a simpler mechanism for redef'ing variables on the command-line\n  (Christian Kreibich).  Any command line arguments of the form <var>=<val>\n  are now expanded into policy code of the form \"redef var=val;\", where\n  <val> is wrapped in quotation marks if the value appears to be a string\n  and doesn't have quotation marks already.  This works with strings with\n  whitespace such as foo=\"Hello World\"; however, note that it means you\n  can't use the mechanism to redef an enum value.\n\n- The Bro distribution now includes (and builds by default) Christian\n  Kreibich's Broccoli library (Bro C Client Library), which enables programs\n  to communicate with running Bro's (Christian Kreibich and Jason Lee).\n  Configure with --disable-broccoli to turn this off.\n\n- Built-in functions log(x: double): double and exp(x: double): double\n  which do natural logarithms and their inverses (Jaeyeon Jung).\n\n- The new built-in function gethostname() returns the local host's name\n  (Jason Lee & Robin Sommer).\n\n- The new built-in function reading_traces() returns true if Bro\n  is reading trace files (Robin Sommer).\n\n- The new built-ins suspend_processing() and continue_processing() provide\n  script-level control for instructing the event engine to stop or resume\n  processing packets (Robin Sommer).  This is useful for coordinating\n  simultaneous processing by multiple Bro's.\n\n- Email notices are now by default sent via /bin/mail, with \"[Bro Alarm]\"\n  in the subject.\n\n- redef'ing a function now replaces the existing body rather than\n  supplementing it (Robin Sommer), which was a bug.\n\n- You can now configure Bro to process encapsulated IP packets either\n  by setting, as before, a fixed encap_hdr_size (for VLANs), or setting\n  parse_udp_tunnels to T (Ruoming Pang).  For the latter, you specify a\n  UDP tunnel port using udp_tunnel_port (the previous variable \"tunnel_port\"\n  has gone away); or you can leave it set to its default of 0/udp, in which\n  case Bro will look for IP encapsulated in UDP packets on any port.\n\n- Added a simple form of profiling based on sampling the work done\n  per-packet (Vern Paxson).  The event engine generates a\n\n\tevent load_sample(samples: load_sample_info, CPU: interval, dmem: int)\n\n  event every load_sample_freq packets (roughly; it's randomized), where\n  load_sample_freq defaults to 20.  \"samples\" is simply a set[string]; it\n  contains the names of the functions, event handlers, and their source\n  files that were accessed during the processing of the sampled packet,\n  along with an estimate of the CPU cost of processing the packet and\n  (currently broken) memory allocated/freed.\n\n- Bro now includes experimental support for Endace DAG cards (Gregor Maier\n  and Robin Sommer).  To activate, configure with\n\n\t--with-DAG=/path/to/dagtool/installation\n\n  and use \"dag0\" as the network interface. You may need to configure the\n  card with the dagtools first. In general, if dagsnap works, Bro should\n  work as well.\n\n- Log rotation has changed in a number of ways (Mark Dedlow & Robin Sommer):\n\n\t  * The new variable log_rotate_base_time: string, if defined,\n\t    specifies that logs should be rotated at log_rotate_base_time +\n\t    i * rotate_interval intervals. Format is as a string in\n\t    24-hour time, \"%H:%M\", e.g, \"12:00\".  This format may change\n\t    in the future to instead be a Bro time type.\n\n\t  * RotateLogs::date_format can be redefined to change format of\n\t    timestamps in rotated files.\n\n\t  * RotateLogs::build_name() can be redefined to implement an\n\t    arbitrary naming scheme for rotated files.\n\n  Note, this code has not been extensively tested.\n\n- Bro now by default builds a version of malloc bundled with its\n  distribution (Vern Paxson & Brian Tierney).\n\n- The syntax for the clone operator now looks like a function call,\n  \"copy(x)\" (Vern Paxson).\n\n- The new flag DNS::logging (default F), if T, disables generation of\n  dns.log (which is often uninteresting and very large), though it\n  still performs analysis leading to NOTICEs (Robin Sommer).\n\n- A new global, hostile_domain_list, has been added to dns.bro which\n  lists domains to be flagged if A or MX records are queried (Scott Campbell).\n\n- Added globals dns_skip_all_{auth,addl} to skip all DNS AUTH/ADDL processing\n  (Vern Paxson).  Skipping these is on (true) by default, because such\n  processing is quite expensive.\n\n- backdoor.bro now turns off by default some detectors that from experience\n  have too many false positives, or (such as for HTTP) too many uninteresting\n  true positives (Brian Tierney).  In addition:\n\n\t- the module now generates a BackdoorFound notice for each backdoor\n\n\t- the new variable dump_backdoor_packets (default F) if set causes\n\t  the packet that triggered the backdoor detection to be written to\n\t  backdoor-packets/<tag>:<time>\n\n\t- the new variable backdoor_ignore_host_port_pairs is a set[addr, port]\n\t  specify host/port combinations to ignore\n\n\t- 587/tcp is now recognized as another SMTP port, and 7000/tcp as\n\t  a popular IRC port ignored by default\n\n\t- brolite-backdoor.bro is a sample of using backdoor.bro\n\n- A bunch of enhancements and fixes for the IRC backdoor detector\n  (Vern Paxson).\n\n- The cf utility in aux/cf/ now gets the format to use (unless you specify\n  -f fmt) from $CFTIMEFMT in the environment.  You can now specify -f\n  without a format to revert to the default format.  This change also\n  includes a significant performance improvement when processing large\n  files (Mark Dedlow and Craig Leres).\n\n- Cleanups for brolite.bro and brolite-backdoor.bro (Brian Tierney).\n  brolite.bro now uses rotate-logs by default.\n\n- backdoor.bro now enables analysis of partial connections (Vern Paxson).\n\n- brolite config cleanup: removed smtp.bro from default, increased\n  max_timer_expires, changed default BROPATH to look at site dir\n  first (Brian Tierney).\n\n- The reference manual has been updated for the terminology changes\n  of log -> alarm, alert -> notice, and rule -> signature (Vern Paxson).\n  Some vestiges of the older terminology remain, in part because they're\n  still present in some facets of Bro.\n\n- The new script function get_current_packet(): pcap_packet returns\n  the current packet as a \"pcap_packet\" record with fields $ts_sec,\n  $ts_usec, $caplen, $len (all of type count) and $data (a string)\n  reflecting the corresponding libpcap values (Christian Kreibich).\n  You can write this packet to a dump file using the new function\n  dump_packet(pkt: pcap_packet, file_name: string): bool, which writes\n  (or appends) the packet to a file of the given name, returning T\n  on success and F on error.\n\n- The new fmt() specifier 'T'  converts values of type \"time\" to ISO\n  format timestamps, analogous to how 'D' does this for ISO dates\n  (Mark Dedlow).  fmt(\"%T\", <time>) is equivalent to\n  fmt(\"%s\", strftime(\"%F-%T.%N\", <time>)), except that strftime\n  does not (yet) offer \"%N\" for nanoseconds (but see 'date +%F-%T.%N').\n\n- The new %S format for fmt() inserts a \"raw\" version of the given string -\n  that is, embedded NULs, control characters, etc., are present without\n  any escaping (Christian Kreibich).\n\n- Zero-padding and field widths now work for all fmt() formats rather than\n  just %e/%f/%g (Christian Kreibich).   For example, you can now say:\n\n\tlocal filename = fmt(\"log-%04.txt\", ++counter);\n\n  and get logfiles log-0001.txt, log-0002.txt, ..., log-0999.txt, etc.\n\n- The 'x' format specifier now supports values of type \"addr\", converting\n  them t hex (Mark Dedlow).  For example,\n\n\t  fmt(\"str=%s hex=%x\", 1.2.3.4, 1.2.3.4)\n\n  produces\n\n\tstr=1.2.3.4 hex=01020304\n\n  The field designation is either %08x (if compiled for IPv4 only) or\n  %08x%08x%08x%08x (if compiled with IPv6 support).\n\n- firewall.bro has been extended to support multiple independent\n  rule-sets (by calling begin() for the start of the next one),\n  specifying sets of addresses, being FTP-aware, and with a more\n  streamlined Notice message (Robin Sommer).\n\n- The HTTP script variables maintain_http_sessions and http_sessions\n  are now exported so they can be redefined or, for the latter, have\n  timeouts added/adjusted (Robin Sommer).\n\n- You can load the new policy script log-append.bro to change Bro's\n  behavior so that when it runs appends to existing log files rather\n  than overwriting them (Mark Dedlow).\n\n- New &disable_print_hook attribute for files (Robin Sommer).  If set,\n  print statements to the file don't trigger the print_hook event.  This\n  is useful to keep the output of certain files from being propagated to\n  peers.\n\n- You can now associate \"classes\" with remote peers (Robin Sommer).  When\n  connecting, a node may send a specific class to which it considers itself\n  belonging. The accepting side can then tune its configuration based on\n  the received class.\n\n  This is primarily for the having multiple unrelated Broccolis running on the\n  same host, all connecting to the same remote Bro (e.g., sshd and syslog\n  sensors).\n\n  To use this, on the Bro side the record Remote::Destination now has a\n  field \"class: string\" (default: unset).  If set, the given config entry\n  only applies for connecting remote peers that send the given class.\n  If it is set and we're connecting to another peer, we propagate the class.\n\n  Example:\n\n      On the listening Bro:\n\n\t    redef Remote::destinations += {\n\t\t[\"peer-1\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"ftp\", $events = /ftp.*/],\n\t        [\"peer-2\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"http\", $events = /http.*/]\n\t    };\n\n      On peer 1:\n\n\t    redef Remote::destinations += {\n\t\t  [\"master\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"ftp\",\n\t\t\t $events = /.*/, $connect=T]\n\t    };\n\n      On peer 2:\n\n\t    redef Remote::destinations += {\n\t\t  [\"master\"] =\n\t\t\t[$host = 127.0.0.1, $class=\"http\",\n\t\t\t $events = /.*/, $connect=T]\n\t    };\n\n  All of these may run on the same host.\n\n- A bunch of changes to adu.bro (Christian Kreibich):\n\n\t- New ADU_MAX_DEPTH limits depth (at ADU granularity) into a\n\t  flow up to which ADUs are reported.\n\n\t- Handles UDP.\n\n\t- New event adu_done(c: connection) signals that no further ADUs\n\t  will be delivered for a connection.  This is useful since adu.bro\n\t  relies on event connection_state_remove() to remove state, and\n\t  if a policy using adu.bro likewise uses this event type then\n\t  event sequencing can cause adu_tx/rx events to occur after\n\t  connection_state_remove() has been processed.\n\n\t- Now correctly clips ADU to maximum allowed size.  (Note, this\n\t  has been temporarily commented out because it relies on a new\n\t  string function that has not yet been integrated into the\n\t  main distribution.)\n\n\t- Now can ignore specific connections dynamically.\n\n\t- TCP content gaps are now recognized and ADU delivery is for now\n\t  stopped for such flows, unless explicitly requested.\n\n\t- No longer logs to file in test mode.\n\n- The new function add_notice_tag() explicitly adds a unique notice tag\n  to a connection's $addl field (Robin Sommer).  This is sometimes necessary\n  to ensure that the tag appears in the connection summary.\n\n- Bro now performs serialization (such as when checkpointing &persistent\n  tables or communicating them between Bro's) in an incremental fashion,\n  intermingling transfers of large tables with ongoing packet processing\n  (Robin Sommer).  Doing so helps avoid packet drops for large items.\n  This has not yet been implemented for the initial handshake done\n  for &synchronized items.\n\n- ssl.bro now stores certificates by default in the subdirectory \"certs/\"\n  (Robin Sommer).\n\n- Analysis of weak/unknown ciphersuites in ssl.bro reworked (Holger Dreger).\n\n- New cipher for SSL analysis, SSL_CK_RC4_64_WITH_MD5 (Holger Dreger).\n\n- load-levels and cpu-adapt now log their adaptations to the log file\n  rather than generating alarms (Robin Sommer).\n\n- The default adaptation levels in cpu-adapt have been tweaked for better\n  behavior (Robin Sommer).\n\n- A new structure of the event loop (implemented by Robin Sommer) is now\n  enabled during configuration by default (Christian Kreibich).  You can\n  revert to the previous structure using --disable-select-loop.\n\n- When configuring Bro, the version of pcap that comes with the Bro\n  distribution is no longer used by default (Jason Lee).  Instead,\n  the system one is used, or one at the same directory level as Bro.\n  To use the Bro distribution version, configure with --enable-shippedpcap.\n\n- backdoor.bro now has comments clarifying that it does not itself\n  alter capture_filters (Vern Paxson).\n\n- If you set backdoor_stat_period to 0 sec, then this now turns off\n  the periodic component of backdoor analysis (Holger Dreger).\n\n- The filters specified in notice_action_filters now take an additional\n  argument specifying the action that has been determined so far (Robin\n  Sommer).  This allows the filter to decide to not change the current\n  action, if it so wishes.\n\n- The new event notice_alarm(n: notice_info, action: NoticeAction) is\n  generated for every notice that results in an alarm (Robin Sommer).\n\n- Tallying of notices is now done using a notice, which has type NoticeTally\n  (Robin Sommer).\n\n- The new notice action filter alarm_always_notice specifies an action\n  of NOTICE_ALARM_ALWAYS (Vern Paxson).\n\n- If the watchdog expires and Bro isn't generating a packet trace file,\n  the current packet is saved to \"watchdog-pkt.pcap\" (Robin Sommer).\n\n- New boolean globals tcp_contents_deliver_all_{orig,resp} allow easy\n  requesting of content delivery for all TCP traffic in orig/resp directions\n  (Christian Kreibich).\n\n- The new event udp_contents(u: connection, is_orig: bool, contents: string)\n  delivers the contents of UDP packets analogous to tcp_contents (Christian\n  Kreibich).  The boolean globals udp_content_deliver_all_{orig,resp} and\n  tables udp_content_delivery_ports_{orig,resp} control for which ports\n  content is delivered, analogous to the globals that control tcp_contents.\n\n- New option --set-seed=n sets the random number seed to n (Vern Paxson).\n\n- Notices now report current time for remotely-received notices rather\n  than network time (Brian Tierney).\n\n- Notices now include a tag es=<peer_description> any time a peer\n  description is defined, not just for remote notices (Robin Sommer).\n\n- The global log_as_connection has been removed from icmp.bro, which now\n  only logs ICMP flows via the usual connection logging (Vern Paxson).\n\n- The Destination variable $accept_state has been renamed $accept_input\n  to better reflect its meaning (Vern Paxson).\n\n- A remote destination's $sync field now indicates whether to accept\n  ongoing state changes from peers, rather than just upon start-up\n  (Robin Sommer).  The variable $accept_state controls whether we\n  accept events.\n\n- Logging of forms of Bro communication has been unified (Robin Sommer).\n\n- Updates for packet filtering documentation (Christian Kreibich).\n\n- A new global, stp_skip_src, lists sources that should be skipped for\n  stepping-stone analysis (Vern Paxson).  ssh-stepping.bro adds sources to\n  this list if they've instantiated more than src_fanout_no_stp_analysis_thresh\n  connections, keeping them blocked until they've been idle for 15 seconds.\n\n- Added a default notice-policy.bro as an example (Brian Tierney).\n\n- Expanded on descriptive text in notice-policy.bro (Vern Paxson).\n\n- ef removed from aux/hf/, as it's of little use and a headache to\n  maintain for portability (Vern Paxson).\n\n- The version of libpcap bundled with the distribution has been\n  elevated to 0.8.3 (Jason Lee).\n\n- Bro now compiles again if non-blocking DNS is not available (Robin Sommer).\n\n- Resource statistics logging now differentiates between offline\n  processing vs. remote-communication-only (Mark Dedlow and Robin Sommer).\n\n- The script variable ICMP::distinct_pairs now times out its state,\n  with a default of 15 minutes after creation (Robin Sommer).\n\n- The Bro version reported now includes \"-debug\" if Bro was configured\n  with --enable-debug (Robin Sommer).\n\n- scan.bro now defaults \"shut_down_all_scans\" to T, meaning it by\n  default detects scans on all ports, not just those in the set\n  shut_down_scans (Vern Paxson).  Please note, this variable is\n  misnamed - it should be \"detect_all_scans\" - but that change is\n  waiting on reworking the basic structure of scan detection.\n\n- Major bug fix for signature matcher missing matches on analyzer data\n  (Robin Sommer).  For example, a condition \"http /foo/\" would only have\n  match with the first URL in a connection, not subsequent ones.  Fixing\n  this changes the calling sequence of the match_signatures() built-in to\n  take an additional final parameter, \"clear\", which, if set, resets the\n  matcher to its starting state prior to matching.\n\n- Serious bug in regular expression matching - and hence signature engine -\n  fixed (Robin Sommer).\n\n- Bug fix for formatting (via fmt()) of very long strings (Vern Paxson).\n\n- Fixed mail_reports.sh to correctly find sendmail binary on various systems\n  (Brian Tierney).\n\n- Numerous changes to Bro's internal string representation, and more\n  flexibility in how strings are rendered for display (Christian Kreibich).\n\n- Pseudo-real-time now can be initialized using an optional argument\n  that corresponds to the degree of time compression (Robin Sommer).\n  For example, --pseudo-realtime=0.5 causes time to advance half as fast\n  as it would in real-time.  The default value is 1.0; any value > 0 is\n  allowed.\n\n- The SSH analyzer now looks for just linefeeds as line terminators when\n  extracting version strings, rather than carriage-return-line-feeds, to\n  match actual implementations rather than the RFC (suggested by Chema\n  Gonzalez).\n\n- Playing back events from files now working again (Robin Sommer).\n\n- Bro now uses current_time() rather than network_time to track the\n  modification time of variables, since network_time doesn't advance\n  when only receiving events (Robin Sommer).\n\n- Bug fixes for IPv6 support, including processing UDP traffic\n  (which had been completely broken) and subtle interactions (actually,\n  lack thereof) between the connection compressor and IPv6 that\n  could lead to crashes (Vern Paxson).\n\n- Portability tweaks for NetBSD, 64-bit Linux SuSe and FreeBSD 5.4\n  (Christian Kreibich, Jason Lee and Vern Paxson).\n\n- Bug fix for IPv6 \"::\" constants that start with hex digits specified\n  using 0x (Vern Paxson).\n\n- Calling the built-in terminate() function twice now has no additional\n  effect (Christian Kreibich).  It used to terminate Bro abruptly, without\n  cleanly shutting down.\n\n- Removed active.bro; use active_connection() + connection_record() instead\n  (Vern Paxson).\n\n- Bro lite reports now work with rotated logs files (Brian Tierney)\n\n- Bug fix for conditions such as \"payload /^user/\", which now work equivalent\n  to \"payload /user/\" (Robin Sommer).\n\n- Tweaks to sensitive patterns in HTTP request URIs to reduce false\n  positives (Brian Tierney).\n\n- Bug fixes for strip() built-in function (Holger Dreger).\n\n- Memory leak in built-in function to_addr() fixed (Ruoming Pang).\n\n- Bug fix for \"hot\" connections sometimes not having their notice tag\n  appearing in connection summaries (Robin Sommer).\n\n- Bug fixes for IRC analysis (Vern Paxson and Robin Sommer).\n\n- Syslogging now works if Bro is running in communication-only mode\n  i.e., live, but not reading a network interface (Robin Sommer).\n\n- Bug fix to allow tuning of TRW parameters (Vern Paxson).\n\n- Bug fixes for SSL analysis (Holger Dreger).\n\n- Removed logic that inverted orig/resp in some scans (Vern Paxson).\n\n- Lint & memory allocation tweaks (Vern Paxson).\n\n- Bug fixes for inactivity timeouts (Robin Sommer).\n\n- Bug fix for Bro Lite cron job (Jason Lee).\n\n- When binding to a listening port for remote communication fails,\n  the port number is now reported (Robin Sommer).\n\n- Some spurious reporting removed from configure output (Jason Lee).\n\n- Fix for \"weird\"'s generated by connection compressor but not\n  recognized at the policy script level (Vern Paxson).\n\n- Fixes for detecting content gaps and not matching previously delivered\n  data (Ruoming Pang).\n\n- Bug fixes for TCP rewriter (Ruoming Pang).\n\n- Bug fixes for crashes in SSL analyzer (Vern Paxson).\n\n- Bug fix for avoiding busy-waiting when a communication child dies\n  (Robin Sommer).\n\n- Bug fix for BiF's that use 'T' and 'F' in character constants\n  (Vern Paxson).\n\n- Memory leak fixes (Robin Sommer, Christian Kreibich, Vern Paxson and\n  Ruoming Pang).\n\n- The peer table for inter-Bro communication is now correctly indexed by a\n  peer_id (Robin Sommer).\n\n- Bug fix for exchange of initial &synchronized state which could\n  prevent communication from entering main phase (Robin Sommer).\n\n- Bug fix for propagating incremented table values derived from\n  a table's &default (Robin Sommer).\n\n- Bug fixes for the POP3 analyzer when analyzing non-NUL-terminated strings\n  or bad base64 encodings (Vern Paxson).\n\n- Updates for Bro's internal hash functions (Ruoming Pang).\n\n- The debug and communication log files now comply with $BRO_LOG_SUFFIX\n  (Robin Sommer).\n\n- Some internal debugging additions (Ruoming Pang).\n\n- Internal cleanup regarding \"const\" strings (Ruoming Pang).\n\n- A number of casts changed to use modern C++-style pointer casting\n  such as reinterpret_cast and static_cast (Ruoming Pang).\n\n- Bug fixes for inter-Bro communication on 64-bit systems (Robin Sommer).\n\n- Bug fixes for detecting errors for SSL connections (Robin Sommer).\n\n- Potential null pointer dereference fixed (Robin Sommer).\n\n- Inter-Bro communication is now more reliable in the presence of errors\n  (Robin Sommer).\n\n- Performance enhancement for tracking values whose elements might\n  change (Robin Sommer).\n\n- Fixes for peers having differing enum lists (Robin Sommer).  This can\n  occur because they're running different scripts and which do different\n  redef +='s to add enum values.\n\n- += now works for interval types (Vern Paxson).\n\n- Bug fix for exchanging peer descriptions (Robin Sommer).\n\n- Bug fix for processing multipart-MIME HTTP messages with content-length\n  headers (Ruoming Pang).\n\n- Bug fix for failing to escape \"'s in HTTP server replies (Robin Sommer).\n\n- Bug fix for propagating increment operations on tables (Robin Sommer).\n\n- Bug fixes for files (Robin Sommer): set open time to current time if\n  network time is not initialized; when deserializing files, prevent them\n  from being closed immediately due to reference-counting interaction.\n\n- Bug fix to prevent reporting some scans twice (Robin Sommer).\n\n- Bug fix for printing enum's (Christian Kreibich).\n\n- When not configured with --enable debug, Bro now still accepts (yet ignores)\n  option -B (Robin Sommer).\n\n- Serialization enhancements and fixes, including a change of the\n  protocol version number (Robin Sommer).\n\n- Bug fix for logging inter-Bro communication (Robin Sommer).\n\n- Bug fixes for enumerating attributes and timers (Robin Sommer).\n\n- Bug fix for signatures matching first on one side of the connection,\n  and then on the other, being reported twice (Robin Sommer).\n\n- Inter-Bro communication now continues to work even when packet processing\n  has been suspended (Robin Sommer).\n\n- Fix for running multiple Bro's together in pseudo-realtime (Robin Sommer).\n\n- Tweak to print-resources.bro so it can be loaded standalone (Vern Paxson).\n\n- Bug fix for &persistent state not being save if Bro wasn't running\n  with an input source (Robin Sommer).\n\n- Bug fix for which process ID to check to see if children are still alive\n  (Robin Sommer).\n\n- Bug fix for no longer crashing if the expiration function associated\n  with a table deletes the element from the table rather than returning\n  an interval of 0 secs to indicate it should be deleted (Chema Gonzalez).\n\n- Bug fix for OutboundTFTP notice: now checks to ensure that not only is\n  the source local, but the destination is not local (Vern Paxson).\n\n- Bug fix for a subtle interaction mediated by errno, which could cause a\n  failed read() to later confuse pcap_dispatch() (Chema Gonzalez).\n\n- Bug fix for TCP contents assertion checking (Ruoming Pang).\n\n- Bug fix for error output on small RPC fragments (Ruoming Pang).\n\n- Fix for connection compressor bug in tracking connection history\n  (Robin Sommer).\n\n- Bug fix for potential floating point exception in signature engine's\n  resource-profiling code (Robin Sommer).\n\n- Bug fix for low-level List data structure when replacing a list element\n  beyond the end of a list (Robin Sommer).\n\n- Bug fix in initializing capabilities when setting up communication between\n  Bro peers (Robin Sommer).\n\n- A number of connection compressor bug fixes: weird's for spontaneous\n  FINs and RSTs, consistent processing of \"connections\" that begin with\n  RSTs, correct checksum computations, and weird's printed to stderr if\n  no event handler defined (Robin Sommer).\n\n- load_sample_freq is now &redef (Vern Paxson).\n\n- Bug fix for backdoor detector incorrectly matching substrings (Vern Paxson).\n\n- Bug fix for canceling timers sometimes failing to cancel all of\n  them (Robin Sommer).\n\n- Error handling during un-serialization now handled more robustly\n  (Robin Sommer).\n\n- Bug fix for division by zero if expensive_profiling_multiple\n  set to zero (Robin Sommer).\n\n- Bug fix for connection logs failing to track all of the annotation\n  ($addl) associated with a connection (Vern Paxson).\n\n- Portability fix for BinPAC (Ruoming Pang).\n\n- Fix to NFS analyzer for missing values in events reporting failed requests\n  (Vern Paxson).\n\n- autogen.sh now aborts as soon as one of the tools it invokes fails\n  (Christian Kreibich).\n\n- Fixed bug where not having SSL would cause bro to not compile (Jason Lee).\n\n- State-holding fix for adu.bro (Christian Kreibich).\n\n- A number of configuration tweaks (Craig Leres & Christian Kreibich).\n\n- Fix for sig-functions.bro: checks isApache* functions, which ensure\n  that Apache is indeed in the software set before accessing the index\n  (Brian Tierney and Robin Sommer).\n\n- Smith-Waterman fixes and test suite script (Christian Kreibich).\n\n\n1.0 Sun Oct 23 17:27:45 PDT 2005\n\n- Bro now includes BinPAC (Binary Protocol Analyzer Compiler), a language\n  and compiler for automating the construction of analyzers for binary\n  protocols (Ruoming Pang).\n\n- Ruoming has used BinPAC to rewrite the analyzers for DCE/RPC (with\n  significant enhancements, including adding the endpoing mapper) and SMB\n  (likewise enhanced and bug-fixed), and creating a new analyzer for NCP\n  (Netware Core Protocol).  The NCP analyzer generates two events:\n\n\tncp_request(c: connection, frame_type: count, length: count,\n\t\t\tfunc: count)\n\n\tncp_reply(c: connection, frame_type: count, length: count,\n\t\t\treq_frame: count, req_func: count,\n\t\t\tcompletion_code: count)\n\n- The beginnings of an analyzer for NetBIOS name service (Ruoming Pang).\n  It generates the following events:\n\n\tevent nbns_standard_name_query(c: connection)\n\tevent nbns_nbstat_query(c: connection)\n\tevent nbns_name_reg_request(c: connection)\n\tevent nbns_nb_name_query(c: connection)\n\n- New IRC analyzer (Roland Gruber).  It generates a lot of events; see\n  policy/irc.bro.  Note, the formatting of the log file will at some point\n  be changed to be more uniform and streamlined.\n\n- ICMP events now include an initial parameter of type \"connection\",\n  the same as for TCP & UDP flows (Ruoming Pang).  This facilitates\n  traffic analysis by associating generic connection events such as\n  connection_state_remove with ICMP events.  This affects:\n\n\tevent icmp_sent(c: connection, icmp: icmp_conn)\n\tevent icmp_echo_request(c: connection, icmp: icmp_conn,\n\t\t\tid: count, seq: count, payload: string)\n\tevent icmp_echo_reply(c: connection, icmp: icmp_conn, id: count,\n\t\t\tseq: count, payload: string)\n\tevent icmp_unreachable(c: connection, icmp: icmp_conn,\n\t\t\tcode: count, context: icmp_context)\n\tevent icmp_time_exceeded(c: connection, icmp: icmp_conn,\n\t\t\tcode: count, context: icmp_context)\n\n- New POP3 analyzer (Florian Schimandl, Hugh Dollman and Robin Sommer).\n  Loading pop3.bro analyzes the protocol messages, and loading mime-pop.bro\n  also extracts the email headers and content.\n\n- New events (Ruoming Pang):\n\n\tconnection_first_ACK(c: connection)\n\t\tgenerated upon the ACK completing a TCP handshake. Useful\n\t\tin detecting \"blink scans\" (a FIN coming from the client\n\t\tright after the ACK)\n\n\ttcp_rexmit(c: connection, is_orig: bool, seq: count, len: count,\n\t\t\tdata_in_flight: count, window: count)\n\t\tgenerated when a TCP sender retransmits data\n\n\trpc_call(c: connection, prog: count, ver: count, proc: count,\n\t\t\tstatus: count, start_time: time,\n\t\t\tcall_len: count, reply_len: count)\n\t\tcan be used to process RPC calls in a generic fashion\n\n\tnfs_reply_status(n: connection, status: count)\n\t\tsupplies the status of NFS server replies\n\n\tnetbios_session_raw_message(c: connection, is_orig: bool, msg: string)\n\t\taccess to a NetBIOS SSN message in raw terms\n\n\tsmb_get_dfs_referral(c: connection, max_referral_level: count,\n\t\t\t\tfile_name: string)\n\t\tgenerated for SMB DFS referal requests\n\n\tdns_message(c: connection, is_orig: bool, msg: dns_msg, len: count)\n\t\tlow-level event generated for each DNS request/reponse\n\n\tdce_rpc_bind(c: connection, uuid: string)\n\t\tgenerated for DCE RPC binds\n\n\tdce_rpc_message(c: connection, is_orig: bool, ptype: dce_rpc_ptype,\n\t\t\tmsg: string)\n\t\tlow-level access to DCE RPC messages; see const.bif for\n\t\tdce_rpc_ptype values\n\n\tepm_map_response(c: connection, uuid: string, p: port, h: addr)\n\t\treply from DCE portmapper\n\n- New operator |x|, a sizeof operator (Christian Kreibich).  It yields\n  absolute values for numerical values, file size for files, the number\n  of enums for an enum type, the number of addresses in subnets, number\n  of fields in records, numeric equivalent for addresses, the number of\n  elements in vectors/sets/tables, and the length of strings.\n\n- A new clone operator, \"* <expr>\", produces deep copies of aggregate\n  values and the usual duplicates for atomic ones (Christian Kreibich).\n  For example, while:\n\n\t   1\ttype foo: record {\n\t   2\t\tc: count;\n\t   3\t\ts: string;\n\t   4\t};\n\t   5\n\t   6\tf1$c = 10;\n\t   7\tf1$s = \"Hello\";\n\t   8\n\t   9\tf2 = f1;\n\t   10\tf1$c = 20;\n\t   11\tf1$s = \"World\";\n\t   12\n\t   13\tprint fmt(\"%d/%s %d/%s\", f1$c, f1$s, f2$c, f2$s);\n\n  yields \"20/World 20/World\", changing line 9 to:\n\n\tf2 = *f1;\n\n  yields \"20/World 10/Hello\".\n\n- New operators \"+=\" and \"-=\", which work on both numerical values and\n  strings (Christian Kreibich).\n\n- \"+\" now works on strings: s1 + s2 yields the concatenation of both\n  (Christian Kreibich).\n\n- You can now express the equivalent of ICMP \"port numbers\" using\n  <number>/icmp, where <number> is the ICMP type (Ruoming Pang).\n\n- Bro now accepts long versions of options, such as --readfile for -r\n  (Christian Kreibich).\n\n- Bro now has a \"pseudo-realtime\" mode, activated by --pseudo-realtime,\n  that causes it to mimic real-time operation when executing against\n  a trace (Robin Sommer).  This is useful for evaluating performance in\n  a controlled fashion.\n\n- SMTP analyzer changes (Roger Winslow): support for 554 code in RCPT\n  responses; logging when the server refuses the argument to RCPT;\n  support for 502 code in response to a HELP command.\n\n- Addition of two universal hash functions: H3 (from David Moore, based\n  on code by Ken Keys) and TwoWise (Dietzfelbinger, from Yin Zhang)\n  (Ruoming Pang).  Use --enable-h3 and --enable-dietzfelbinger to enable\n  them (used as the hash function for short data).  H3 is used by default.\n\n- The \"bif\" compiler for compiling Bro built-in functions now supports\n  an \"enum\" type (Ruoming Pang).  The syntax is:\n\n\tenum dce_rpc_ptype\n\t%{\n\t\tDCE_RPC_REQUEST,\n\t\tDCE_RPC_PING,\n\t\tDCE_RPC_RESPONSE,\n\t%}\n\n  which is translated to an enum declaration of \"dce_rpc_ptype\" in\n  Bro, an EnumType* enum_dce_rpc_ptype in NetVar.{h,cc} and a C++ enum\n  BroEnum::dce_rpc_ptype {...}.\n\n  One limitation is that redef's on enum types cannot be taken into\n  account because the bif is parsed at compile time.\n\n- 64-bit integer support via --enable-int64 (Ruoming Pang).\n\n- The new, experimental policy script adu.bro provides a generic way to\n  extract application-layer ADUs (Christian Kreibich).  It heuristicly\n  groups blocks of content sent from one side to another, uninterrupted\n  by any data in the opposite direction, into an approximate ADU (request\n  or reply).  These then generate adu_tx (originator -> responder) and\n  adu_rx (responder -> originator) events.  You can control on which ports\n  it does this analysis, as well as the amount of data inspected nad\n  grouped, using variables documented in the script.\n\n- The new built-in function\n\n\tfunction str_smith_waterman(s1: string, s2: string, params: sw_params)\n\t: sw_substring_vec\n\n  computes the Smith-Waterman overlap between two strings (Christian Kreibich).\n  The third parameter is a record with two fields, $min_toklen (minimum\n  length for common tokens) and $sw_variant, which takes a value of 0\n  for single-matching and 1 for multiple-matching.\n\n  The return value is a vector of sw_substring records, which hold the\n  following fields:\n\n\tstr: string;\t# the common subsequence\n\tindex1: count;\t# where it occurs in input string 1\n\tindex2: count;\t# where it occurs in input string 2\n\tnew: bool;\t# true if start of new alignment\n\n- If you set the new control variable record_state_history to T, then\n  connections recorded to the conn.$BRO_LOG_SUFFIX log file will include\n  a field that shows the different states encountered during the connection\n  (Mark Allman):\n\n\tSymbol\tState\n\t------\t-----\n\tS\tInitial SYN seen for TCP connection.\n\tH\tSYN-ACK seen for TCP connection.\n\tD\tData packet seen (TCP or UDP).\n\tA\tPure ACK seen for TCP connection.\n\tF\tFIN seen for TCP connection.\n\tR\tRST seen for TCP connection.\n\tI\tTCP connection included a FIN+RST packet.\n\tQ\tTCP connection included a packet with multiple connection\n\t\tcontrol flags other than FIN+RST (e.g., SYN+RST).\n\tC\tConnection included one or more packets with failed checksums\n\t\t(TCP or UDP).\n\n  The symbols are printed in upper-case for connection originators and\n  lower-case for responders.  The S/H/F/R symbols are also repeated if\n  Bro sees the corresponding control packet subsequently with a different\n  sequence number.\n\n  For example, a TCP connection which Bro saw from the beginning, i.e.,\n  a normal establishment, followed by the client (originator) first sending\n  data, then the server responding, followed by the server initiating a\n  normal close which the client then completes, will be annotated as\n  \"ShADadfF\".\n\n- The \"for\" looping construct now can be used to iterate over the non-empty\n  indices of a vector (Christian Kreibich).\n\n- If you set the new variable skip_http_data to T (default: F), then the\n  HTTP analyzer will attempt to not reassemble the data portions of HTTP\n  request/responses (Ruoming Pang).  This can be a performance benefit\n  in environments with high volumes of HTTP traffic, though it may not be\n  a large win if the processing is dominated by executing the policy script.\n\n- The new built-in\n\n\tremask_addr(a1: addr, a2: addr, top_bits_from_a1: count): addr\n\n  take some top bits (e.g. subnet address) from a1 and remaining bits\n  (intra-subnet part) from a2 and merge them to get a new address (Ruoming\n  Pang).  Useful for anonymizing at the subnet level while preserving\n  serial scans.\n\n- The new built-in\n\n\tdecode_netbios_name(name: string): string\n\n  takes a string in NetBIOS encoding and returns its original form\n  (Ruoming Pang).\n\n- The new variable ignore_keep_alive_rexmit controls whether to\n  include keep-alives when counting retransmitted packets (Ruoming Pang).\n  It defaults to F (i.e., do count them).\n\n- The calling sequence of dce_rpc_request and dce_rpc_reply have changed to:\n\n\tevent dce_rpc_request(c: connection, opnum: count, stub: string)\n\tevent dce_rpc_response(c: connection, opnum: count, stub: string)\n\n  (Ruoming Pang).  Use dce_rpc_message to get access to the RPC type and\n  the raw message.\n\n- The calling sequence of the netbios_session_message event has changed to:\n\n\tnetbios_ssn_message(c: connection, is_orig: bool,\n\t\t\t\tmsg_type: count, data_len: count)\n\n  (Ruoming Pang).  Previously it was parameterized with the connection\n  and the raw message (now available via netbios_session_raw_message).\n\n- The calling sequences of smb_com_{read,write}_andx have changed to\n  no longer include the is_orig parameter because it is in fact fixed for\n  these events (Ruoming Pang).\n\n- The calling sequence of smb_message has changed (Ruoming Pang) to:\n\n\tsmb_message(c: connection, is_orig: bool, cmd: string,\n\t\t\tbody_length: count)\n\n- Bug fix specifying the &default value for tables that yield function\n  values (Ruoming Pang).  For example:\n\n\ttype tcp_content_handler_func:\n\t\tfunction (c: connection, is_orig: bool, seq: count,\n\t\t\t\tcontents: string);\n\n\tfunction default_tcp_content_handler(c: connection, is_orig: bool,\n\t\t\t\t\t\tseq: count, contents: string)\n\t\t{\n\t\t# do something ...\n\t\t}\n\n\tconst tcp_content_orig_handlers: table[port] of\n\t\ttcp_content_handler_func = {} &redef &default =\n\t\t\tdefault_tcp_content_handler;\n\n  Previously, Bro would take the function given with &default as the default\n  function to call when accessing a missing element, rather than a default\n  *value* to directly return. Bro now checks the value type against the\n  function type to see if they match in type.\n\n- The new variables forward_remote_events and forward_remote_state_changes\n  specify whether to broadcast events/state received from one peer to other\n  peers (Robin Sommer).  Both default to F.  Note, these options are temporary;\n  they will disappear when we add a more sophisticated script-level\n  communication framework.\n\n- Vectors can now be initialized using the syntax such as\n\n\tglobal foo: vector of string = [\"foo\",\"bar\"];\n\n  (Robin Sommer).\n\n- Bug fixes for &synchronize'ing vectors (Robin Sommer).\n\n- The internal implementation of strings in the policy language has\n  been heavily revamped (Christian Kreibich).\n\n- String built-in functions are now in strings.bif rather than bro.bif\n  (Christian Kreibich).  This includes two new built-ins:\n\n\tstr_split(s: string, idx: index_vec): string_vec\n\tstrstr(big: string, little: string): count\n\n  string_vec is a new policy script type that is an alias for\n  \"vector of string\".\n\n- The new options --load-seeds <file> and --save-seeds <file> let you\n  record Bro's seeds to a file and then re-use these seeds in a later\n  invocation (Christian Kreibich). The primary intended usage is to\n  provide determinism in hash table iterations etc. for debugging purposes.\n\n- Communication protocol changes (Robin Sommer):\n\n  * Internal PING/PONG messages to measure round-trip times.  The new script\n    remote-ping.bro issues PINGs every second and logs to remote.log.\n\n  * Optional data compression if libz is available.  Remote::Peer$compression\n    specifies compression level, with no compression being the default.\n\n  * Inter-Bro communication is now performed in four explicit phases:\n\n    //  Setup:\n    //      Initial phase.\n    //      VERSION messages must be exchanged.\n    //      Ends when both peers have sent VERSION.\n    //  Handshake:\n    //      REQUEST_EVENTS/REQUEST_SYNC/CAPTURE_FILTER/CAPS/selected SERIALs\n    //        may be exchanged.\n    //      Phase ends when both peers have sent PHASE_DONE.\n    //  State synchronization:\n    //      Entered iff at least one of the peers has sent REQUEST_SYNC.\n    //      The peer with the smallest runtime (incl. in VERSION msg) sends\n    //        SERIAL messages comprising all of its state.\n    //      Phase ends when peer sends another PHASE_DONE.\n    //  Running:\n    //      Peers exchange SERIAL (and PING/PONG) messages.\n    //      Phase ends with connection tear-down by one of the peers.\n\n  * Serializing network packets includes textual tags for identification.\n\n  * Serializing files includes the state of buffering.\n\n- Pending events for remote peers are now flushed when Bro terminates,\n  and the net_done event is *not* propagated to peers (Robin Sommer).\n\n- Makefile.am cleanups (Christian Kreibich).\n\n- libpcap portability fix for OpenBSD (Gordon Willem Klok).\n\n- Performance bug fix for SMTP relay detection (Vern Paxson).\n\n- sprintf -> snprintf tweak (Vern Paxson).\n\n- Bug fix for serializer regular-expression matchers (Robin Sommer).\n\n- Some fixes for access to uninitialized variables/state (Christian Kreibich\n  and Vern Paxson).\n\n- More informative messages for some internal errors (Christian Kreibich).\n\n- Bug fixes for implementation of vectors (Christian Kreibich).\n\n- Fixes for FreeBSD 5 installs (Jason Lee).\n\n- gcc 4.0 compatibility (Christian Kreibich).\n\n- Bug fix for correctly propagating libpcap failures (Chema Gonzalez).\n\n- Bug fixes for prefix-preserving IP address anonymization (Chema Gonzalez).\n\n- The MIME analyzer in mime.bro is now in \"module MIME\" (Vern Paxson).\n\n- Bug fix for the IRC backdoor detector (Scott Campbell).\n\n- The capture filter used for NFS traffic now includes UDP fragments,\n  since NFS UDP traffic is often fragmented (Ruoming Pang).\n\n- New internal mechanisms to suspend/resume processing to enable a Bro\n  receiving synchronized state to put its own packet processing on hold\n  (Robin Sommer).\n\n- A bug with the serialization cache not being used for modified objects\n  has been fixed (Robin Sommer).\n\n- A number of enhancements to inter-Bro communication performance and error\n  handling improved (Robin Sommer).\n\n- Internal restructuring to fix problems with dispatching packets when\n  using the packet sorter (Ruoming Pang).\n\n- Christian Kreibich has contributed a number of fixes for code flaws\n  such as potentially unsafe library calls.\n\n\n0.9a10 Tue Sep  6 10:41:53 PDT 2005\n\n- Fixes for portability to 64-bit architectures (Christian Kreibich).\n\n- Bug fix for broken syslog'ing of alarms (Scott Campbell).\n\n- The manual has been updated to clarify that aggregate values in events\n  are passed as shallow copies, so that modifications to elements of the\n  values after posting the event but before it's handled will be visible\n  to the handlers for the events (Christian Kreibich).\n\n- HTTP logging now includes the host from the Host header in the request\n  (Craig Leres).  Note, currenty this only is done when using http-reply.bro,\n  not if you only analyze requests.\n\n- You can now specify a passphrase for the SSL cert used for inter-Bro\n  communication by redef'ing the variaable \"ssl_passphrase\" (Christian\n  Kreibich).  Leaving it unchanged causes the passphrase to be read\n  interactively.\n\n- Certificates created using ca-issue now have 2-year lifetimes rather\n  than the default of 30 days (Christian Kreibich).\n\n- A problem with handshaking between Bro peers has been fixed (Christian\n  Kreibich).\n\n- A bug has been fixed in scanning false positives due to backscatter\n  in the form of SYN ACKs (Vern Paxson).\n\n- Alerts sent via email now use a From address configured from bro.cfg\n  (Randy Mcclelland-Bane).  Also, if sending an alert via gpg fails,\n  it's sent instead as plaintext.\n\n- Scan notices now include information about the connection that\n  triggered the scan detection decision (Vern Paxson).\n\n- Exported some TRW variables so the user can adjust their associated\n  timers (Vern Paxson).\n\n- The new script variable dns_max_queries sets a maximum on the number of\n  queries that can appear in a DNS request (Scott Campbell & Vern Paxson).\n  If more queries appear, the request is treated as non-DNS traffic and\n  ignored.  The variable defaults to a value of 5.  Setting it to 0 turns\n  off this functionality, so Bro processes all apparent requests.\n\n- The \"weird\" messages generated by the DNS analyzer now have a more\n  regular naming structure and processing (Scott Campbell and Vern Paxson).\n\n- Tweaked bif_arg.cc to pass gcc4.0 and bro.bif to not collide with\n  uuid in OSX 10.4 (Jason Lee).  Now works on OSX 10.4, though use\n  --disable-localpcap when compiling.\n\n- Bro now compiles cleanly under OpenBSD (Jason Lee).\n\n- NOTE: the connection compressor has a known serious bug and should\n  not be used at present.  Since it is an experimental feature, fixing it\n  is deferred to the next release.\n\n- Some bugs fixed in the management of hash keys when using the\n  connection compressor (Robin Sommer).\n\n- Tweak for the connection compressor to generate truncated_header weird's\n  (Robin Sommer).\n\n- Temporary bug fix for type clash in SSL version numbers (Vern Paxson)\n  by making them consistently of type int.  The correct fix is probably\n  for them to be consistently of type count, depending on how Bro's notion\n  of general version processing, and its SSL analyzer, both evolve.\n\n- Bug fix for trace rewriting failing if Bro was not compiled to check\n  assertions (Martin Casado).\n\n- Fixed logic bug in signal handling regarding whether we're currently\n  idle waiting for input vs. processing a packet or the event queue\n  (Vern Paxson).  Note, this change has not been heavily tested.\n\n- Some bug fixes for correct operation when DNS names fail to resolve\n  (Vern Paxson).  It's not clear that these fixes are complete, however.\n\n- Fixed to not compile libpcap when --disable-localpcap is given to configure\n  (Jason Lee).\n\n- Fixed configuration of local pcap for IPv6 if --enable-brov6 is specified\n  (Jason Lee).\n\n- A problem with \"make install\" when building from the libpcap included\n  in the sources has been fixed (Christian Kreibich).\n\n\n0.9a9 Thu May 19 23:31:33 PDT 2005\n\n- First cut at analyzer for NFS (Vern Paxson).  It generates the following\n  events:\n\tevent nfs_request_null(n: connection)\n\tevent nfs_request_getattr(n: connection, fh: string, attrs: nfs3_attrs)\n\tevent nfs_request_lookup(n: connection, req: nfs3_lookup_args,\n\t\t\t\trep: nfs3_lookup_reply)\n\tevent nfs_request_fsstat(n: connection, root_fh: string,\n\t\t\t\tstat: nfs3_fsstat)\n\tevent nfs_attempt_null(n: connection, status: count)\n\tevent nfs_attempt_getattr(n: connection, status: count, fh: string)\n\tevent nfs_attempt_lookup(n: connection, status: count,\n\t\t\t\treq: nfs3_lookup_args,\n\t\t\t\tdir_attrs: nfs3_opt_attrs)\n\tevent nfs_attempt_fsstat(n: connection, status: count,\n\t\t\t\troot_fh: string, obj_attrs: nfs3_opt_attrs)\n\n- The new script OS-fingerprint.bro integrates Bro's new passive OS\n  fingerprinting mechanism with the software.bro framework (Vern Paxson).\n\n- You can now operate on patterns using && and || (Vern Paxson).\n  If p1 and p2 are patterns, then p1 && p2 yields a pattern that matches\n  their concatenation and p1 || p2 yields a pattern that matches either.\n  Note that the syntax for this may change in the future to a single '&'\n  or '|', which would be more consistent with the use of '|' in\n  constructing pattern constants.\n\n- An experimental \"connection compressor\" tracks not-yet-established\n  connections using much less memory than Bro normally does (Robin Sommer).\n  This is potentially a major win during flooding attacks and high-speed\n  scans.  You activate it by setting use_connection_compressor to T.  You\n  can then control the granularity of its processing using the variables\n  cc_handle_resets, cc_handle_only_syns, and cc_instantiate_on_data.  See\n  bro.init for brief discussion of these.\n\n- The experimental new script firewall.bro supports firewall-rule-like\n  processing of connections in terms of allow/deny (Robin Sommer).  It is\n  not particularly efficient.\n\n- sensor-sshd.bro provides an experimental interface for receiving\n  events from instrumented SSH servers that communicate with Bro via\n  the Broccoli client library (Christian Kreibich and Robin Sommer).\n  Supporting this also entailed extensions to login.bro so it can\n  process the events even though they don't correspond to a connection\n  known to Bro's event engine.\n\n- The new built-in function match_signatures() can be used in a policy\n  script to send text directly into the signature engine (Robin Sommer).\n\n- Correction: the 0.9a8 CHANGES states that the mail_script variable used\n  for NOTICE_EMAIL defaults to mail_script.sh.  The correct value is instead\n  \"mail_notice.sh\".\n\n- The scripts rsh.bro and passwords.bro, and the passive-fingerprinting\n  signatures policy/sigs/p0fsyn.osf were inadvertantly left out of the\n  0.9a8 distribution.\n\n- Added s2b (snort to bro) files into the distribution. (Jason Lee)\n\n- Non-blocking packet capture under Linux has been fixed (Robin Sommer).\n\n- Fixed printing of DNS replies, which used to work but was broken\n  a number of months ago (Vern Paxson).\n\n- The new script brolite-sigs separates out how signatures are configured\n  in Bro Lite so the functionality can be enabled/disabled with a simple\n  load statement (Roger Winslow).  That is, to use signatures with Bro\n  lite, simply add \"@load brolite-sigs\".\n\n- The new script variable enable_syslog (default T) controls whether\n  alarm's are syslog'd (Robin Sommer).  As before, syslogs can only happen\n  when Bro is reading from live network traffic (this should be changed\n  at some point, to accommodate real-time Bro's that don't read the network\n  but collect events from other sensors).  Previously, in that case syslog's\n  always happened; now, you can turn them off using this variable.\n\n- The new script variable expensive_profiling_multiple controls how\n  often, when doing profiling, to perform more expensive forms of\n  profiling, in particular, memory consumption profiling (Robin Sommer).\n  If profiling_interval is set to 15 sec and expensive_profiling_multiple\n  is set to 20, then expensive profiling will be done every 5 minutes\n  (these are the defaults now in profiling.bro).  Also, the profiling_update\n  event now includes a second argument, expensive: bool, which indicates\n  whether the update corresponds to one of these expensive profiling\n  intervals.\n\n- First cut at parsing DNS AAAA replies (Scott Campbell).  This is quite\n  incomplete - currently, the replies are turned into fake A record replies,\n  due to the difficulty of dealing with IPv6 addresses if Bro wasn't built\n  to analyze IPv6 traffic.\n\n- software.bro has been tweaked to have a new control variable,\n  \"only_report_local\" (default F).  If true, then only software versions\n  for local addresses (as determined by is_local_addr()) will be\n  reported.\n\n- synflood.bro now has a script variable max_sources (default 100) that\n  specifies the maximum number of sources to track for a given victim\n  (Robin Sommer).\n\n- Remote peers now negotiate their versions of the serialization format\n  (Robin Sommer). If they don't agree then the connection is terminated.\n\n- Generic UDP request/response processing has been moved into the new\n  policy script udp-common.bro, which, unlike udp.bro, does *not* set the\n  packet filter to capture all UDP traffic (Robin Sommer).  A number\n  of UDP-based policy scripts have been modified to use udp-common.bro\n  rather than udp.bro.\n\n- When printing serialized/independent state, access times are now\n  again included (Robin Sommer).\n\n- Bro's implementation of timers has been switched (reverted) to using\n  priority queues (Vern Paxson).\n\n- The http-request.bro script variables skip_remote_sensitive_URIs and\n  const sensitive_post_URIs are now exported so they can be accessed\n  externally (Robin Sommer).\n\n- Some new rootkit filenames have been added to ftp.bro and\n  http-request.bro (Brian Tierney).  The plan is to eventually\n  merge these lists so there's only one main list.\n\n- trw.bro is now scoped as a module \"TRW\" (Brian Tierney).\n\n- Better support of the '--disable-localpcap' flag to configure, and\n  consolidated all the pcap checks in configure.in (Jason Lee).\n\n- A bug in processing bare carriage-returns in Telnet input/output\n  has been fixed (Vern Paxson).\n\n- The Bro Lite bro.rc script has been tweaked to use the 'ax' flags\n  instead of '-ax' (Jason Lee).\n\n- A bug with reporting ICMP \"ports\" (i.e., type + code) has been fixed\n  (Vern Paxson).\n\n- Bug fix for excessively large RPC messages (Ruoming Pang).\n\n- A bug with /0 subnet prefixes has been fixed (Robin Sommer).\n\n- The function record_connection() now takes the file to write to\n  as its first argument (Robin Sommer).\n\n- remote.bro now tracks whether a given Destination is connected\n  (Robin Sommer).\n\n- mail_notice.sh is now installed as part of installing a distribution\n  (Jason Lee).\n\n- Fixed bug where the sort order for the test suite changed depending\n  on locale. (Jason Lee)\n\n- Bug fix for email_notice() when notice_action_filters not defined for\n  given notice (Vern Paxson).\n\n- The test suite test for rare-events fixed to not give false positives\n  (Jason Lee).\n\n- Date added for 0.9a8 release.\n\n\n0.9a8 Wed Feb 16 17:09:34 PST 2005\n\n- aux/rst/ contains the source for the \"rst\" tool used by Bro (via the\n  policy script function terminate_connection() in conn.bro) to tear\n  down established connections by forging RST packets.\n\n- Bro's main event loop has been reworked (Robin Sommer).  This should\n  (1) not cause any visible differences in most cases, (2) improve\n  performance in some cases, (3) fixed problems running Bro without\n  a network input (but still receiving asynchronous input from remote\n  event sources).  There are some more changes coming to this soon.\n\n- Passive OS fingerprinting has been added, based on Michal Zalewski's\n  \"p0f\" tool (Holger Dreger).  Currently, it's limited to fingerprinting\n  clients based on the initial SYNs they send.  To use it, define\n  an event handler:\n\n\tOS_version_found(c: connection, host: addr, OS: OS_version)\n\n  OS_version is a record containing a string $genre (e.g., \"Solaris\"),\n  a string $detail (e.g., \"2.0.27\"), a count $dist (hop-count distance\n  from monitor to host), and $match_type, which specifies via an\n  enumerated type whether the match was direct from a signature,\n  generic to the genre, or \"fuzzy\".\n\n  The match is done against a passive fingerprinting signature file,\n  which is specified by the variable passive_fingerprint_file.\n  It defaults to \"sigs/p0fsyn\", which is found using $BROPATH\n  and has an \"osf\" suffix added.\n\n  You can restrict the matching to only be performed for hosts from\n  particular subnets by adding those subnets to the variable\n  generate_OS_version_event.  If it's empty (default), then all subnets\n  are analyzed.\n\n  Note, the passive fingerprinting should be integrated with the\n  version-tracking in software.bro, but this hasn't been done yet.\n\n- Support for IPv6 has been repaired and brought up to date.  Note, however,\n  that inter-Bro communication currently only works over IPv4.\n\n- Signature-matching is now off by default in brolite.bro.  If you want\n  to use it, define use_signatures = T prior to @load'ing it.\n\n- Notices are now tied to their corresponding connections (Scott Campbell).\n\n- New backdoor detectors for IRC, SMTP, Gaobot (Scott Campbell).\n\n- Signature matches now have a connection associated with them (Scott Campbell).\n\n- Bro scripts that set initial timers (via \"schedule\" statements in a\n  bro_init handler) but don't have any source of network input (trace\n  files or live interfaces) now execute in real-time, with network_time\n  set to the current time, rather than having their timers expire immediately.\n\n- Default timeouts have been added to tables in trw.bro and http.bro, which\n  have been found operationally to potentially grow very large (Scott Campbell).\n\n- The new policy script large-conns.bro can be included in order to\n  track the size of TCP connections (each direction is referred to\n  as a \"flow\") using a secondary packet filter (Chema Gonzalez).\n  This method is completely separate from Bro's usual size accounting,\n  and offers the advantages that it tracks sizes even for connections\n  that don't terminate (or for which Bro misses their establishment)\n  and for connections with sizes > 4 GB.\n\n  The interface is via the function:\n\n\tfunction estimate_flow_size_and_remove(cid: conn_id, orig: bool)\n\n  If $orig=T, then an estimate of the size of the forward (originator)\n  direction is returned.  If $orig=F, then the reverse (responder) direction\n  is returned.  In both cases, what's returned is a \"flow_size_est\" record,\n  which includes a flag, $have_est, indicating whether there was any\n  estimate formed. If $have_est is T, then the record also includes\n  an estimate in bounded by $lower (lower bound) and $upper (upper bound).\n  The estimate also includes $num_inconsistent, which, if > 0, means that\n  the estimates came from sequence numbers that were inconsistent, and\n  thus something is wrong - perhaps packet drops by the secondary filter).\n  Finally, calling the function causes the flow's record to be deleted.\n\n- An RSH analyzer has been contributed by Manu (ManuX@rstack.org).\n  It generates rsh_request and rsh_reply events, and the following notices:\n\n\t  DifferentRSH_Usernames\n\t\tClient and server username differ.\n\n\t  FailedRSH_Authentication\n\t\tAttempt to authenticate via RSH failed.\n\n\t  InteractiveRSH\n\t\tThe RSH session appears to be interactive (multiple\n\t\tlines of user commands).\n\n\t  SensitiveRSH_Input\n\t  SensitiveRSH_Output\n\t\tRSH client input or server output match input_trouble/\n\t\tfull_input_trouble or output_trouble/full_output_trouble.\n\n- The new notice action NOTICE_EMAIL indicates that in addition to\n  logging an alarm, it should also be sent out as email (Scott Campbell).\n  By default, email is only sent if Bro is running on live traffic;\n  you can override this via redef'ing the script variable mail_notification.\n  Mail is sent using the script specified by the mail_script variable\n  (default: \"mail_script.sh\", which is now included in the distribution,\n  but at present is not installed), which must be in $PATH.  The mail\n  is sent to the username specified in mail_dest (default: the local\n  \"bro\" user, though you can change this to name@domain).\n\n  Note that specifying email as a separate notice action may change\n  in the future, to instead be an attribute that's associated with\n  other notice actions.  For example, it may make sense to want\n  to specify both NOTICE_ALARM_PER_CONN and NOTICE_EMAIL; currently,\n  however, you can't do this.\n\n- A similar notice action NOTICE_PAGE does the same thing as NOTICE_EMAIL\n  except it send the mail to mail_page_dest (Scott Campbell).\n\n- You can now use the attribute &rotate_size for file objects to\n  specify the maximum file size in bytes (Robin Sommer). If the limit\n  is reached, the file is rotated similiarly as is already done with\n  &rotate (which, for consistency, has been renamed to &rotate_interval).\n\n  For both &rotate_size and &rotate_interval, when they trigger they\n  now generate events (rotate_size and rotate_interval, respectively;\n  each takes the file as the sole argument) rather than invoking\n  &postprocessor, which has been removed.\n\n  There's also a new variable log_rotate_size to set a global size maximum.\n\n  Related to log rotation are the following new built-in functions:\n\n\trotate_file(f: file) closes the file, moves it to a temporary\n\tname, and opens a new one. It returns the new \"rotate_info\"\n\trecord, which gives the temporary name and the open/close times.\n\n\trotate_file_by_name(s: string): similar, but call by the name\n\tof the file rather than a Bro script value.  This is needed\n\tbecause some files are not represented by file objects but need\n\tto be rotated nevertheless (most importantly, the tcpdump save\n\tfile and the dump files for dump_current_packet()). This function\n\trotates the file with the given name.\n\n  Finally, you can load the new policy script rotate-logs.bro to\n  get default behavior of rotating all log files every hour.\n\n- The new \"@unload <script>\" directive specifies that future @load's of\n  <script> should be skipped.  This is useful for overriding analyzers\n  loaded by scripts that pull in a bunch of analysis.  For example,\n\n\t@unload ntp\n\t@load mt\n\n  would load all of the \"mt\" analyzers *except* ntp.bro.\n\n- The new built-in function get_file_name(f: file): string returns\n  the filename associated with a file (John McNicholas).\n\n- The new built-in function get_contents_file(id: conn_id, direction: count)\n  returns the contents file (set using set_contents_file()) for the given\n  direction (John McNicholas).\n\n- The new built-ins time_to_double() and double_to_time() convert between\n  double values and time values (Robin Sommer).  The new built-in floor()\n  returns the floor of a double value; this returned value is also a double.\n  Thus, floor(-3.4) returns -4.0.\n\n- Support for sending packets between Bro's (Robin Sommer).\n\n- Bro now has a geneal mechanism internal for traversing policy scripts\n  (Umesh Shankar).  Various script analyses can be specified using the\n  new -z flag.\n\n  Currently, the one supported form of analysis is \"-z notice\", which\n  prints all of the different types of notices that the script you've\n  loaded can generate.  For example, \"bro -z notice ftp\" will generate:\n\n\t  Found NOTICE: BackscatterSeen\n\t  Found NOTICE: FTP_PrivPort\n\t  Found NOTICE: FTP_BadPort\n\t  Found NOTICE: PortScan\n\t  Found NOTICE: FTP_ExcessiveFilename\n\t  Found NOTICE: ScanSummary\n\t  Found NOTICE: AddressDropped\n\t  Found NOTICE: DroppedPackets\n\t  Found NOTICE: SensitiveConnection\n\t  Found NOTICE: FTP_UnexpectedConn\n\t  Found NOTICE: SSH_Overflow\n\t  Found NOTICE: FTP_Sensitive\n\t  Found NOTICE: TerminatingConnection\n\t  Found NOTICE: PasswordGuessing\n\t  Found NOTICE: AddressDropIgnored\n\t  Found NOTICE: AddressScan\n\n- The signature rule language now supports an \"active\" keyword,\n  which can be set to \"true\" or \"false\", with the latter turning\n  off the rule (Roger Winslow).  If set to false the signature will\n  not be loaded into the rule matcher, otherwise it is.\n\n- The signature rule language now supports meta data of the form\n  \".MMM<whitespace>XXX\", where MMM is arbitrary text which makes up the name\n  of the meta data option and where XXX is arbitrary text up to the end\n  of the current line (Roger Winslow).  The intent is that some forms of\n  meta-data will be regularized/standardized in the future - information\n  such as date modifed, category/class, weighting, etc.  For now, it\n  provides a way to annotate rules with nominally more structure than just\n  using comments (though it is currently treated the same, i.e., everything\n  is ignored).\n\n- The following meta data option names are now reserved: .version, .revision,\n  .version-date, .revision-date, .date-created, .location\n\n- The new enumerated type \"transport_proto\" is used to specify different\n  types of transport protocols: \"tcp\", \"udp\", \"icmp\", and \"unknown_transport\".\n  Associated with it are new built-in functions: is_udp_prot(), is_icmp_port(),\n  get_conn_transport_proto, and get_port_transport_proto.  The latter two\n  map a given connection and a given \"port\" value to their corresponding\n  transport_proto value.\n\n- A bunch of tuning (regular expressions for sensitive login sessions,\n  scan detection thresholds, forbidden/hot usernames and filenames,\n  sensitive URIs, \"weird\" actions) have been incorporated from\n  operational configurations.\n\n- Serious bugs in managing large numbers of files fixed.\n\n- A serious bug with negative DNS TTL settings (and, more generally,\n  with negative timer values) fixed.\n\n- The traditional connection logging format is no longer supported.\n\n- The SMTP analyzer's state machine processing has been modified to\n  correctly deal with clients that (incorrectly) pipeline their commands\n  (Ruoming Pang).\n\n- A bug fixed in detecting SMTP relays for connections w/o message bodies\n  (Ruoming Pang).\n\n- A bunch of bugs in recording connection summaries for UDP flows\n  have been fixed.\n\n- A new script module, passwords.bro, generates PasswordExposed notices\n  for activity (currently just rlogin/telnet logins) that expose passwords.\n\n- A new script module, file-flush.bro, can be loaded to cause all log\n  files to be flushed every file_flush_interval (default: 10) seconds.\n  This is handy if you like to watch the files in real time.\n\n- Zone transfers now generate a ZoneTransfer notice, unless the host\n  making the request is in DNS::zone_transfers_okay.\n\n- Bro's DNS cache (generated using -P and accessed using -F) is\n  now kept in the .state/ subdirectory rather than in the user's\n  home directory (Roger Winslow).\n\n- Some changes to remote propagation of events/values and detection of\n  state inconsistencies (Robin Sommer).\n\n- A fix for avoiding delays on low-volume links for some systems for\n  which it can take a long time to fill up the pcap buffer, and pcap doesn't\n  return partial buffers (Robin Sommer).\n\n- A bug in table expiration timers has been fixed (Robin Sommer).\n\n- A bug in comparing subnets has been fixed.\n\n- A bug in using a non-constant value for a &write_expire attribute\n  has been fixed.\n\n- A bug in using CONTENTS_BOTH for writing reassembled streams to\n  files has been fixed (John McNicholas).\n\n- A subtle but potentially damaging bug in fragment reassembly has\n  been fixed.\n\n- A bug with using local variables of vector types has been fixed.\n\n- A bug with comparing strings has been fixed.\n\n- Bro no longer generates the RST_with_data \"weird\", as with modern\n  stacks it's no longer any sort of strange occurrence.\n\n- Related to this, the signature rule matcher no longer matches\n  against the payload of RST packets.  (Note, this is an imcompatibility\n  with Snort.)\n\n- Portmapper mappings are now written in the connection log in\n  alphabetical order.\n\n- The event engine variable frag_timeout now defaults to 5 minutes if you\n  load frag.bro, and is accessed via redef rather than by defining the\n  global directly.\n\n- The interval that signatures.bro waits for until generating a signature\n  summary can now be set using the new script variable sig_summary_interval,\n  and a bug in generating the summaries has been fixed (Robin Sommer).\n\n- The new script peer-status.bro generates periodic \"update\" events regarding\n  a remote peer's status (Robin Sommer).  These take the form:\n\n\ttype peer_status: record {\n\t\tres: bro_resources;\n\t\tstats: net_stats;\n\t\tcurrent_time: time;\n\t\tcpu: double;\t\t# average CPU load since last update\n\t\tdefault_filter: string;\t# default capture filter\n\t};\n\n- The bro_resources record returned by resource_usage() now includes\n  three additional fields, $version (the version of Bro), $debug\n  (T if Bro was compiled with debugging information), and $start_time\n  (the time Bro began executing - clock time, not network time).\n\n- The new built-in function same_object(o1: any, o2: any): bool\n  returns true if its arguments refer to the same object, false\n  otherwise.  This can be useful for comparing tables, for example\n  in calls to table element expiration functions.\n\n- The new built-in function bro_is_terminating(): bool returns true if\n  Bro is done reading from its network input source(s) and is now\n  in its final termination cleanup (Robin Sommer).\n\n- A new built-in strftime() formats a timestamp, returning a string\n  (Robin Sommer).\n\n- A new built-in file_size() returns the size of the file with a\n  given name (Robin Sommer - note: *not* a Bro file value).\n\n- A potential deadlock with inter-Bro communication has been fixed\n  (Robin Sommer).\n\n- Bro now always forks a copy of itself when executing, as this\n  can save considerable memory when using inter-Bro communication\n  (Robin Sommer).\n\n- The Bro interconnection protocol now includes explicit handshaking\n  during session establishment to mark that a peer is ready (Robin Sommer).\n  Implementing this includes a change in the wire protocol that is\n  incompatible with the protocol used in the past.\n\n- The TCP inactivity timer is now started whenever a connection\n  transitions from a pre-establishment state (including \"inactive\")\n  to some sort of established state (Robin Sommer).  Prior to this\n  fix, connections for which a proper SYN handshake was not seen would\n  not be timed out as inactive.\n\n- The --disable-openssl configure option has been removed; now\n  the only option is --with-openssl, and --with-openssl=no disables\n  use of OpenSSL (Gregor Maier).\n\n- A bug in invoking &expire_func functions has been fixed (Robin Sommer).\n\n- A bug in logfile rotation has been fixed (Robin Sommer).\n\n- A bug in recognizing negative floating point values has been fixed.\n\n- worm.bro now suppresses the default signature action for worms\n  it knows about, since it generates events for them (Robin Sommer).\n  The list of worms detected via signatures now includes Bagle-BC.\n\n- Signatures for known worms are now skipped when doing signature\n  summaries and scan detection, if worm.bro is loaded (Robin Sommer).\n\n- request_remote_events and request_remote_sync now implicitly\n  do set_accept_state, too.\n\n- Better error handling for SSL connections (Robin Sommer).\n\n- Bug fixed which caused diagnostic messages to be lost when using\n  inter-Bro communication (Robin Sommer).\n\n- gcc 3.4 portability fixes (Brian Lindauer).\n\n- Solaris portability fixes (Robin Sommer).\n\n- The Bro distribution now includes and uses its own version of libpcap\n  for portability reasons (Jason Lee).\n\n- Some minor bug fixes to handling of tcpdump save files (Robin Sommer).\n\n- Detection added for a (now quite old) SSHv1 overflow attack.\n\n- A bug in skipping processing of connections for large chunks of\n  data has been fixed (Chema Gonzalez).\n\n- Some memory leaks fixed (Robin Sommer).\n\n- fmt()'s \"%d\" format now accepts values of enum types.\n\n\n0.9a7 Mon Nov  1 13:21:05 PST 2004\n\n- New terminology:\n\n\to We've found that the term \"log\" has been too overloaded,\n\t  sometimes meaning \"something to record for audit purposes\" and\n\t  other times meaning \"something worthy of getting the operator's\n\t  attention right now, for example via syslog\".\n\n\t  We are now using \"log\" to only refer to the first of these,\n\t  and refer to the second as \"alarm\".\n\n\to We've found that \"alert\" (and the ALERT() function, etc) is\n\t  likewise confusing.  Some expect it to mean something alarm-worthy\n\t  (to use the new name from the previous item), while others\n\t  expect it to mean the output from a sensor, which might not\n\t  be worth getting the operator's attention.\n\n\t  We are now using \"notice\" to refer to what had previously\n\t  been called \"alert\".  So, for example, rather than call ALERT()\n\t  you call NOTICE() to enter something into the I've-seen-something-\n\t  maybe-it's-worth-an-alarm framework.  The first field associated\n\t  with such a call was $alert, which is now $note.  These notifications\n\t  are logged to notice.$BRO_LOG_SUFFIX rather than \"alert.\"...\n\n  These changes show up in many places in the policy scripts.  Some\n  globals log_XXX are now alarm_XXX or notice_XXX.  However, uses of\n  \"log\" that refer to \"something to record for audit purposes\" remain\n  using that name.\n\n- Bro now uses the \"automake\" suite of tools for its configuration\n  (Jason Lee).  This includes major reworking of its Makefile's\n  and configuration/installation scripts.\n\n- Bro now flags event handlers that are never invoked (Umesh Shankar).\n  This catches typos like:\n\n\tevent bro_initt() { ... }\n\n- The scripts directory now includes scripts for generating nightly\n  reports (Roger Winslow).  Note that these are not presently a supported\n  part of the public Bro distribution, but will become so in the\n  not-too-distant future.\n\n- policy/brolite.bro contains a first version of the \"Bro Lite\" configuration\n  (Scott Campbell, Roger Winslow, et al).  This also is not presently\n  supported for the public Bro distribution, but will become so.\n\n- Major overhaul of the internal serialization framework (Robin Sommer).\n  Some more changes are forthcoming, though not on this scale.\n\n- Changed packet capture/drop statistics to (1) explicitly track received\n  packets, (2) work better under Linux, (3) report link counts when available\n  (Robin Sommer).  The net_stats record field \"interface_drops\" has been\n  renamed \"pkts_link\".  It reports the number of packets captured by the\n  NIC (if available), rather than the number dropped by the NIC (which never\n  actually worked, anyway).\n\n- The DNS analysis has been extended to deal with TSIG and to better deal\n  with EDNS0 records, and its overall structure reworked somewhat\n  (Scott Campbell & Roger Winslow).  The scripts in dns.bro are now\n  inside \"module DNS\" scope.\n\n- Improved logging of ICMP flows (Scott Campbell).  This includes the\n  addition of a \"len\" field in icmp_conn.  Some significant additional\n  changes/improvements to ICMP processing will be coming very soon.\n\n- The Bro README and \"quick start\" documentation has been updated\n  (Brian Tierney and Jim Rothfuss).\n\n- Some significant state-holding problems in the presence of packet filtering\n  or packet drops have been fixed.\n\n- You can now instruct the signature engine to constrain the number of\n  regular expressions it groups together into a single matcher using the\n  new script variable \"sig_max_group_size\" (Robin Sommer).  This can result\n  in significant memory savings for large sets of signatures.  It can\n  increase the CPU processing required; however, in our testing so far\n  this does not appear to be the case.\n\n- The signature engine now provides better location information in its\n  error messages (Robin Sommer).\n\n- statistics.bro has been renamed profiling.bro.  Along with this change,\n  the following script variables have been renamed:\n\n\tdo_statistics => do_profiling\n\tstatistics_file => profiling_file\n\tstatistics_interval => profiling_interval\n\n- A new script, stats.bro, can be included to generate light-weight\n  running statistics on memory and CPU use.\n\n- A new script, print-sig-states.bro, can be included to generate\n  periodic dumps of signature-matching statistics (Robin Sommer).\n\n- The connect_clear()/connect_ssl() built-ins have been replaced\n  by a single connect() function (Robin Sommer).\n\n- Remote Bro's (more generally, remote event sources) are now represented\n  in policy scripts using the new \"event_peer\" type rather than as an\n  addr/port pair, and get_event_source() has been renamed get_event_peer()\n  (Robin Sommer).  The new function get_local_event_peer() returns an\n  event_peer corresponding to the local Bro.\n\n- The new script remote-print.bro can be used to print all events\n  received from remote sources (Robin Sommer).\n\n- When you call send_state(), an event finished_send_state() is now\n  generated when all of the state has been sent (Robin Sommer).\n\n- If you define a handler for the new print_hook() event, then it\n  will be invoked every time a \"print\" statement executes (Robin Sommer).\n\n- The -g flag no longer takes a directory as an argument, but always\n  uses the .state directory (Robin Sommer).\n\n- The new -I flag prints the value of a given identifier and exits\n  (Robin Sommer).  This flag may go away in the future.  For now,\n  its role is that it prints timestamps of things like table elements,\n  which are no longer printed by a regular \"print\" statement.\n\n- If a connection proceeds as SYN ->, <- RST, RST ->, this is now\n  reported as a regular rejected (\"REJ\") connection, rather than\n  one reset by the originator (\"RSTO\").\n\n- The TCP analyzer now attempts to detect connections for which\n  one side's packets are being filtered out.  It does this using\n  two C++ variables (not presently accessible at the script level),\n\n\tconst int max_initial_window = 4096;\n\tconst int max_above_hole_without_any_acks = 4096;\n\n  If more than max_initial_window data has been sent by one side and no\n  ACKs have been seen by the other side, then it's assumed that no ACKs\n  will ever show up, and the buffer for the data should be reclaimed\n  immediately after it's reassembled.  max_above_hole_without_any_acks\n  plays a similar role, but for the case when measurement drops have\n  lead to Bro holding data for a sender for which it will never see\n  an ACK (which would be an \"ACK above hole\"), so it should give up\n  on buffering it.\n\n- A portability bug in Bro's parser code has been fixed (Jason Lee).\n\n- STARTTLS for SMTP now causes the SMTP session to be ignored, rather\n  than generating a slew of error messages because the session becomes\n  unparseable.\n\n- Bro's \"watchdog\" handler is now less prone to crashing due to\n  using non-reentrant library calls (Jason Lee).\n\n- Better error message when reading an input file encounters an error.\n\n- adtrace now prints its usage when invoked without the required\n  arguments (Jason Lee).\n\n- A bug in using recursive script functions has been fixed.\n\n- A bunch of whitespace/code layout tweaks.\n\n\n0.9a4 Wed Sep  8 17:33:54 PDT 2004\n\n- The directory structure of the Bro distribution has changed (Jason Lee).\n  The source code is now in a subdirectory, src/, and the scripts\n  snort2bro (and snort2bro.cfg) and make-ftp-safe-vocabulary.awk have\n  been moved into scripts/.\n\n- \"make install\" has been revamped (Jason Lee).\n\n- The format of the alert log file has changed.  Fields in it are\n  colon-separated.  THIS WILL LIKELY CHANGE SOON.\n\n- The policy for formatting signature matches has been revamped,\n  including colon-separated fields in the signature log file\n  (Roger Winslow).  THIS WILL LIKELY CHANGE SOON.\n\n- The BRO_ID environment variable has been renamed BRO_LOG_SUFFIX.\n\n- A new flag, -e, lets you specify Bro code to execute via the command\n  line (Christian Kreibich).  So, for example,\n\n\tbro -r mytrace.tcpdump -e 'redef traditional_conn_format = T' tcp\n\n  will run tcp.bro on the trace \"mytrace.tcpdump\", but with\n  traditional_conn_format redefined to be true.  Note that statements\n  have an implicit ';' added to them for convenience.\n\n- A new signature alert, \"MultipleSigResponders\", is generated if a\n  host triggers the same signature on multiple responders.\n\n- Bro now supports \"packet profiling\", which provides fairly fine-grained\n  statistics on number of packets processed, volume, elapsed real/user/system\n  time, and change in memory consumption (Holger Dreger).  Three variables\n  control the output.  The double pkt_profile_freq controls the frequency\n  of output.  The units in which it's interpreted depends on the setting\n  of the pkt_profile_mode variable (which is of type pkt_profile_modes,\n  an enum).  A value of PKT_PROFILE_MODE_SECS means that statistics\n  are generated every pkt_profile_freq seconds; PKT_PROFILE_MODE_PKTS\n  means every pkt_profile_freq packets; and PKT_PROFILE_MODE_BYTES, every\n  pkt_profile_freq bytes.  The default (PKT_PROFILE_MODE_NONE) means\n  to not generate packet profiling.\n\n  Packet profiling is written to the new log file, pkt_profile_file.\n  If you \"@load pkt-profile\", you can turn on packet profiling using\n  some handy defaults.\n\n- statistics.bro now reports on how many TCP connections are in\n  <originator-state, responder-state> for the different TCP endpoint\n  states (SYN sent, SYN ack'd, connection established, etc.).\n  Contributed by Holger Dreger.\n\n- tcp_content_delivery_ports_{orig,resp} are now table's of bool rather\n  than set's (Ruoming Pang).  The semantics are that if you have a\n  tcp_contents event handler, then if the orig/resp port is in the given\n  table *and the yield value is T*, then the event will be invoked.  This\n  allows you to now explicitly skip over some ports.\n\n- The processing of default values in tables has been changed internally\n  (Ruoming Pang).  It's possible this has introduced some subtle bugs\n  (as some of these came up during testing).\n\n- A serious bug in Base64 processing has been fixed (Ruoming Pang).\n\n- The NetBIOS and SMB analyzers have been updated in minor ways\n  (Ruoming Pang).\n\n- statistics.bro now reports a \"lag\" figure indicating the elasped\n  time between the last expired timer's target expiration time and\n  the current packet timestamp (Robin Sommer).  Lag can grow if Bro\n  is getting behind in timer expiration due to the setting of\n  max_timer_expires.\n\n- Bro's default filter is now \"tcp or udp or icmp\" rather than\n  \"tcp or udp\".\n\n- alert_info records now have an optional port associated with them\n  (for example, to be used to describe scan activity).\n\n- A bug has been fixed in which deleting a table element with an\n  associated timer could crash Bro (Robin Sommer).\n\n- A bug that would cause a crash for malformed EPASV directives\n  has been fixed (Robin Sommer).\n\n- A bug with inactivity timeouts not being generated for partial\n  connections has been fixed (Robin Sommer).\n\n- A bug in synflood.bro has been fixed (Robin Sommer).\n\n- Some tuning adjustments to incremental expiration of table entries\n  (Robin Sommer).\n\n- Improved portability to Darwin (Christian Kreibich).\n\n- alert_info records now have additional optional fields, \"iconn\"\n  (associated ICMP connection), \"dst\" (destination address), and\n  \"p\" (associated port).  The source_is_responder fields has been\n  removed.\n\n- The default packet filter now includes \"icmp\".\n\n- Some memory allocation/free mismatches & minor leaks (Robin Sommer).\n\n- Minor tweaks to ssl.bro (Robin Sommer).\n\n- Bro now supports \"null\" link layers (Christian Kreibich).\n\n- aux/adtrace contains a program that spits out MAC/IP information\n  from traces (Holger Dreger).\n\n- A bug in handling malformed RPCs has been fixed (Scott Campbell).\n\n- The formatting of \"weird\" messages that have additional parameters\n  has been changed to be more regularized with other \"weird\" messages.\n\n- The new \"weird\" type \"base64_illegal_encoding\" takes the place of\n  some previously unstructured Base64 \"weird\" errors.\n\n- A tweak to ftp.bro will give it slightly more consistent results\n  for some forms of unusual traffic.\n\n\n0.9a3 Wed Jul  7 22:06:26 PDT 2004\n\n- Improved ICMP processing, including scan detection (Scott Campbell).\n\n- ICMP \"connections\" are now considered unidirectional.\n\n- Fixed broken VLAN support (integration of original patch was incomplete).\n\n- Fixed a bug in erroneously generating additional \"ContentGap\"\n  alerts after an initial one.\n\n- Connection durations are now always reported as floating-point decimal,\n  never in exponential notation.\n\n- Removed unused time parameter from a bunch of internal calls.\n\n- Fixed some compilation warnings.\n\n- \"make clean\" now removes generated policy/*.bif.bro files (Christian\n  Kreibich).\n\n\n0.9a2 Fri Jun 11 00:07:04 PDT 2004\n\n- NetBIOS analysis has been extended with a CIFS/SMB analyzer (Ruoming Pang).\n  While this is incomplete, it has many important elements.  The corresponding\n  events:\n\n\tsmb_message(c: connection, is_orig: bool, cmd: string, msg: string)\n\tsmb_com_tree_connect_andx(c: connection, path: string, service: string)\n\tsmb_com_nt_create_andx(c: connection, name: string)\n\tsmb_com_transaction(c: connection, is_orig: bool, subcmd: count,\n\t\t\t\tname: string, data: string)\n\tsmb_com_transaction2(c: connection, is_orig: bool, subcmd: count,\n\t\t\t\tname: string, data: string)\n\tsmb_com_read_andx(c: connection, is_orig: bool, data: string)\n\tsmb_com_write_andx(c: connection, is_orig: bool, data: string)\n\n  This analyzer is still experimental.\n\n- Greater support for vectors (Umesh Shankar), much of it taken from\n  the 'S' language.\n\n  You can use a boolean vector as an index into another vector (providing\n  both are the same length) and each 'T' value in the index extracts the\n  corresponding element from the indexed vector.  For example, \"x[x > 3]\"\n  returns a vector whose elements are those elements of x that are greater\n  than, while if y is a vector of the same length as x then \"y[x > 3]\"\n  extracts those elements of y that have the same position as the elements\n  in x that are greater than 3.\n\n  You can also use an arithmetic vector to index another vector.  Each\n  element present in the index is extracted.  So, for example:\n\n\tglobal a: vector of count;\n\tglobal b: vector of string;\n\n\ta[1] = 3;\n\ta[2] = 3;\n\ta[3] = 1;\n\n\tb[1] = \"foo\";\n\tb[2] = \"bar\";\n\tb[3] = \"bletch\";\n\n\tprint b[a];\n\n  prints:\n\n\t[bletch, bletch, foo]\n\n- The new built-ins any_set() and all_set() return true if for a given\n  boolean vector any element is true or all of the elements is true\n  (Umesh Shankar).  So, for example, \"any_set(x < 0)\" returns T if\n  an element of x is less than zero.\n\n- The new built-in sort() takes a vector as an argument and sorts it\n  *in place* (Umesh Shankar).  (The in-place semantics may change in the\n  future.)  An optional second argument can be used to specify a\n  function to call for comparing elements, and is required for non-arithmetic\n  vectors.  For example, the following could be used to sort a vector\n  of strings based solely on the length of the strings:\n\n\tfunction string_compare(a : string, b: string): int\n\t\t{\n\t\tlocal la = byte_len(a);\n\t\tlocal lb = byte_len(b);\n\n\t\treturn (la < lb) ? -1 : ((lb > la) ? 1 : 0);\n\t\t}\n\n- The new function order() has the same calling sequence as sort(),\n  but instead of returning (and altering in place) the sorted vector,\n  it returns a \"vector of count\" giving the *indices* that if used\n  to index the vector will return it sorted.  So, for example,\n  given two vectors x and y of the same length (but not necessarily\n  of the same type),\n\n\tlocal x_sort_indices = order(x);\n\tx = x[x_sort_indices];\n\ty = y[x_sort_indices];\n\n  will assign x to a sorted version of itself and also rearrange y such\n  that elements of y that were paired with elements of x originally\n  remain paired after the sorting.\n\n- The ICMP analyzer now has a general notion of \"context\", i.e., the packet\n  associated with ICMP status messages such as Unreachable or Time Exceeded\n  (Ruoming Pang).  This changes the parameters to the icmp_unreachable\n  event.  A new event, icmp_time_exceed, is now also available.\n\n- The tcp_segment even has been replaced by a pair of new events (Ruoming Pang):\n\n\ttcp_packet(c: connection, is_orig: bool, flags: string, seq: count,\n\t\t\tack: count, len: count, payload: string)\n\n  is invoked for each TCP packet.  \"flags\" is a string containing \"SFAPU\"\n  for the SYN/FIN/etc TCP flags.\n\n\t  tcp_contents(c: connection, is_orig: bool, seq: count,\n\t\t\tcontents: string)\n\n  is invoked for each chunk of the byte-stream that has been reassembled\n  in sequence, providing it satisfies tcp_content_delivery_ports_{orig,resp},\n  per the next item.\n\n- You can specify the set of ports for which contents should be reassembled\n  for the originator (responder, respectively) stream using the new sets\n  tcp_content_delivery_ports_{orig,resp} (Ruoming Pang).  This can be\n  useful for user-level stream analysis for protocols not known to Bro's\n  event engine.  These controls may change to a \"table of bool\" in the future,\n  in order to support an &default attribute.\n\n- New built-in functions (Ruoming Pang):\n\n\tfunction interval_to_double(i: interval): double\n\t\tConverts a value of type \"interval\" to \"double\".\n\n\tfunction write_file(f: file, data: string): bool\n\t\tWrites the given string to the given file, returning\n\t\tF on error.\n\n\tfunction is_ascii(str: string): bool\n\t\tReturns T if the given string consists entirely of\n\t\tASCII characters (i.e., in the range 0..127).\n\n\tfunction sqrt(x: double): double\n\t\tReturns the square-root of x, or -1 and a run-time error\n\t\tif x is < 0.\n\n\tfunction uuid_to_string(uuid: string): string\n\t\tTakes a UUID and returns its string representation, where\n\t\tUUID = Universal Unique Identifier as defined per\n\t\thttp://www.opengroup.org/onlinepubs/9629399/apdxa.htm#tagcjh_20\n\n\tfunction string_to_ascii_hex(s: string): string\n\t\tReturns the ASCII hex representation of the given string.\n\t\tFor example, string_to_ascii_hex(\"foo\") returns \"666f6f\".\n\n\tfunction match_pattern(s: string, p:pattern): pattern_match_result\n\t\tMatches the given pattern against the given string, returning\n\t\ta record with three fields:\n\n\t\t\tmatched: bool;\t# T if a match was found, F otherwise\n\t\t\tstr: string;\t# portion of string that first matched\n\t\t\toff: count;\t# 1-based offset where match starts\n\n\t\tFor example,\n\t\t\tmatch_pattern(\"foobar\", /o*[a-k]/)\n\t\treturns\n\t\t\t[matched=T, str=f, off=1]\n\t\tbecause the *first* match is for zero o's followed by an [a-k],\n\t\twhile\n\t\t\tmatch_pattern(\"foobar\", /o+[a-k]/)\n\t\treturns\n\t\t\t[matched=T, str=oob, off=2]\n\n- Functions that terminate without returning a value when they were declared\n  to do so now generate a run-time warning (Christian Kreibich).  Functions\n  in the standard set of policy scripts that did this have been fixed.\n\n- The new event non_dns_request(c: connection, msg: string) is generate\n  to make the contents of malformed DNS requests available for analysis,\n  with the assumption that these are actually some other protocol entirely\n  (Ruoming Pang).\n\n- If you redef truncate_http_URI to have a value >= 0, then any HTTP\n  URIs generated by the event engine will be truncated to this length\n  (Ruoming Pang).  This can be convenient when analyzing traffic that\n  generates huge URIs (as do some automated attacks).\n\n- \"SEARCH\" is now recognized as a standard HTTP method (Ruoming Pang).\n\n- The new event connection_EOF(c: connection, is_orig: bool) is generated\n  when one side of a connection closes (Ruoming Pang).\n\n- synflood.bro and the corresponding event engine internals now works\n  in terms of probabilities (0.0-1.0) instead of percentages (0-100)\n  (Robin Sommer).  The script has had several tweaks, including using\n  new_connection() rather than connection_attempt(), which gives it\n  quicker response and broader coverage (it'll detect non-TCP flooding,\n  too, so \"synflood\" is now a bit of a misnomer), at the cost of perhaps\n  more CPU load.\n\n- A signature for Witty has been added to policy/sigs/worm.sig (Ruoming Pang).\n\n- Makefile now has a \"test\" target.  Currently this only works for internal\n  development (we haven't put together a public test suite yet; that will\n  take some time due to the need to make sure no sensitive information leaks).\n\n- The built-in function generator now knows about \"double\" as a built-in type\n  (Ruoming Pang).\n\n- Some generated files have been removed from the Bro distribution since\n  they're redundant (Ruoming Pang).\n\n- A bug has been fixed in which contents files might not be correctly\n  written upon termination of Bro (Ruoming Pang).\n\n- A bug has been fixed in which UDP connections didn't generate\n  new_connection events (Ruoming Pang).\n\n- Support for the Linux \"cooked capture\" link layer (Ruoming Pang).\n\n- BPF support has been factored into a separate class, BPF_Program, which\n  makes for easier portability (Christian Kreibich).\n\n- A serious low-level Dictionary bug has been fixed (Christian Kreibich).\n\n- A bug that could cause Bro to crash if it receives an event from another\n  Bro that it isn't able to process has been fixed (Christian Kreibich).\n\n- A bug in set file descriptors non-blocking has been fixed\n  (Christian Kreibich).\n\n- A bug that could cause some error messages to generate crashes has\n  been fixed.\n\n- The global skip_event_tcp_option has been removed.\n\n\n0.9a1 Mon Jun  7 01:33:00 PDT 2004\n\n- 0.8a85 is the new STABLE release, to be updated only for bug (and\n  portability) fixes.  0.9a1 is the new CURRENT release, which will have\n  both bug fixes and new functionality.\n\n- Support for FTP EPRT, EPSV (Holger Dreger).\n\n- Change to timer management to recover memory more quickly (Robin Sommer).\n\n- Tweaks to eliminate a number of compiler warnings (Robin Sommer).\n\n- Statistics now report number of connections terminated due\n  to inactivity (Robin Sommer).\n\n- New Makefile target, pub-tar-no-doc builds a public tarball but\n  without the (large) doc/ subdirectory.\n\n- Bug fix for identd requests with illegal port numbers.\n\n- The example of a scanning source to skip in scan.bro has been changed\n  from an AltaVista robot (now obsolete) to a Google robot.\n\n- Some previously fatal internal errors have now been turned into\n  \"internal warnings\", which Bro is able to continue operating\n  in their presence.\n\n\n0.8a84 Wed May 26 23:33:39 PDT 2004\n\n- autoconf tweaks for portability to Darwin (Christian Kreibich).\n\n- Fixed subtle bug in chunked-IO reads (Christian Kreibich).\n\n- Fixed bug for the \"discarder\" framework in which specifying an\n  IP discarder would cause other TCP/UDP/ICMP discarders not being\n  invoked (Christian Kreibich).\n\n- Fatal bug in signature matching fixed (Robin Sommer).\n\n- Missing member variable initialization fixed (Robin Sommer).  (Needed for\n  compilation with new versions of gcc.)\n\n- Makefile bug for \"make install\" fixed.\n\n- Fixed bug that could lead to Bro crashing if an SMTP session\n  had data sent after a RST.\n\n- Removed some out-of-date SMTP analysis warning messages.\n\n\n0.8a82 Tue Apr 27 11:53:24 PDT 2004\n\n- Fixed inactivity timer loop when a packet arrives exactly when\n  the timer is set to expire.\n\n\n0.8a81 Mon Apr 26 22:46:37 PDT 2004\n\n- A bunch of memory leaks fixed (Chema Gonzalez).\n\n- A new HTTP analyzer variable, content_truncation_limit, controls\n  how much of an HTTP request/reply contents element (i.e., what's\n  passed to http_entity_data - this is *not* the entire content, but\n  the next chunk's worth) is logged in the log file.  It defaults\n  to 40 bytes.  Setting it to 0 means \"log all of it\".\n\n- Fix to avoid crashing for malformed RPC requests.\n\n- Improved OpenSSL auto-configuration (Robin Sommer).\n\n- Fix for compiling without OpenSSL.\n\n- A new built-in, double_to_count(), converts a value of type \"double\"\n  to the corresponding \"count\" (Chema Gonzalez).  We should probably\n  add floor(), ceil(), etc.\n\n- Parameterization of trw.bro tweaked (Jaeyeon Jung).\n\n\n0.8a79 Wed Mar 24 22:02:53 PST 2004\n\n- Bro now has an SSL analyzer, written by Michael Kuhn and Benedikt Ostermaier,\n  with further development by Scott Campbell.  It generates the following\n  events:\n\n\tevent process_X509_extensions(c: connection, ex: X509_extension)\n\tevent ssl_X509_error(c: connection, err: int, err_string: string)\n\tevent ssl_certificate(c: connection, cert: X509, is_server: bool)\n\tevent ssl_certificate_seen(c: connection, is_server: bool)\n\tevent ssl_conn_alert(c: connection, version: count, level: count,\n\t\t\t\tdescription: count)\n\tevent ssl_conn_attempt(c: connection, version: int)\n\tevent ssl_conn_established(c: connection, version: int,\n\t\t\t\tcipher_suite: count)\n\tevent ssl_conn_reused(c: connection, session_id: sessionID)\n\tevent ssl_conn_server_reply(c: connection, version: int)\n\tevent ssl_conn_weak(name: string, c: connection)\n\tevent ssl_session_insertion(c: connection, id: sessionID)\n\n  Note, it still has a lot of rough edges; particularly, handling\n  non-conformant input.  It also generates unnecessary ContentGap alerts\n  due to the way it runs multiple analyzers (SSLv2 and SSLv3) on a single\n  connection.  This will be fixed in the fairly near-term future.\n\n- The manual has been updated with chapters on signatures (Robin Sommer)\n  and using the interactive debugger (Umesh Shankar), along with a partial\n  description of the new SSL analyzer (Michael Kuhn and Benedikt Ostermaier)\n  and a number of updates to the documentation of built-in functions (Umesh\n  Shankar), though this latter is still not complete since Umesh actually\n  contributed this quite a while ago.\n\n- Ruoming Pang has contributed a crude analyzer for DCE/RPC (used for Windows).\n  It generates simple dce_rpc_request and dce_rpc_reply events.  It should\n  not be considered stable.\n\n- The traditional connection logging format (traditional_conn_format)\n  is no longer the default.  The 0.8a70 release notes stated that this\n  was the case but this time it really is :-).\n\n- An experimental \"vector\" type has been added (Umesh Shankar).  A vector\n  is an aggregate type.  For example:\n\n\tlocal suspect_hosts: vector of addr;\n\n  You can randomly access elements starting with the first as 1, e.g.,\n\n\tsuspect_hosts[1] = 10.0.0.8;\n\n  and can also add elements at later postions even if there are gaps:\n\n\tsuspect_hosts[31337] = 10.0.0.9;\n\n  *The semantics and capabilities of vectors will be changing considerably.*\n\n- Umesh Shankar has developed a framework for generating IDMEF messages.\n  Currently it needs a modified version of libidmef, which is not included\n  in this distribution.  Contact me or Umesh if you want a copy.\n\n- A new attribute &synchronized causes the given global variable to\n  be *synchronized* across concurrent instances of Bro (which are\n  intercommunicating via remote.bro).  Any change made by one of them\n  to the variable will be reflected (soon after) in the copy at\n  the others.  A new event remote_state_inconsistency is generated\n  if two instances both change the value before they're synchronized.\n  (Contributed by Robin Sommer.)\n\n- trw.bro implements a new scan detection algorithm, Threshold Random Walk\n  (Jaeyeon Jung).  It's described in an upcoming IEEE S&P symposium paper.\n  The analyzer generates two events:\n\n\tTRWAddressScan, # source flagged as scanner by TRW algorithm\n\tTRWScanSummary, # summary of scanning activities reported by TRW\n\n  TRW is generally much more sensitive than Bro's regular detection algorithm.\n\n- vlan.bro provides support for VLAN encapsulation.  More generally, Bro\n  now has support for any sort of constant-offset encapsulation (Vinod\n  Yegneswaran).  You specify the header size by redef'ing encap_hdr_size.\n  You can also redef tunnel_port to be a UDP port which Bro treats as being\n  the encapsulation (in the packet stream - not addressed to it) rather\n  than all traffic.\n\n- If you turn on statistics (i.e., via @load statistics) and also redef\n  segment_profiling to T, then Bro will generate to the statistics file\n  a trace of its \"segment\" processing.  A segment is a unit of internal\n  execution.  Profiles look like:\n\n\t1058517499.615430 segment-processing-packet dt=0.000013 dmem=0\n\t1058517499.615430 segment-draining-events dt=0.000012 dmem=0\n\t1058517499.615671 segment-expiring-timers dt=0.000010 dmem=0\n\t1058517499.615671 segment-processing-packet dt=0.000010 dmem=0\n\t1058517499.615671 segment-draining-events dt=0.000012 dmem=0\n\t1058517499.615671 segment-policy/conn.bro:282 dt=0.000011 dmem=0\n\t1058517499.615671 segment-policy/conn.bro:253 dt=0.000012 dmem=0\n\n  The first line states that at the given (packet) timestamp, the event\n  engine processed a packet, taking 13 usec of CPU time to do so, and\n  not consuming any memory (from the kernel's perspective; this is *not*\n  fine-grained memory consumption).  The next lines indicate 12 usec were\n  spent draining events and 10 usec expiring timers.  The last two lines\n  indicate that the functions at lines 282 and 253 in conn.bro were\n  executed, requiring 11 usec and 12 usec, respectively.\n\n  Note #1: timings are just what rusage() reports, so not necessarily\n  very accurate for small times.\n\n  Note #2: there's a bug in tracking function line numbers that hasn't\n  been ferreted out yet, so they're only roughly correct.\n\n- The inactivity_timeout global has been split into tcp_inactivity_timeout/\n  udp_inactivity_timeout/icmp_inactivity_timeout (Robin Sommer).  Using\n  this, the default inactivity timeouts for UDP and ICMP have been changed\n  from \"no timeout\" to 10 seconds.  This is needed because otherwise\n  analyzing a stream of UDP or ICMP traffic generally gobbles up memory\n  quickly and never recovers it; and there's seems little point in trying\n  to consolidate long-lived-but-often-inactive UDP/ICMP streams.\n\n- The new policy script cpu-adapt.bro is an extension to load-levels.bro\n  (see CHANGES for 0.8a37 below) to adapt the packet filter based on the\n  current CPU load. If the load is below cpu_lower_limit (default 40%),\n  the load-level is decreased.  If it's above cpu_upper_limit (default\n  90%), it's increased.  (Robin Sommer)\n\n- The new policy script hand-over.bro can be used for a new running\n  instance of Bro to smoothly take over operation from an old instance,\n  i.e., it implements hand-over of state between two Bro instances when\n  checkpointing (Robin Sommer). First, all persistent data (i.e. variables\n  declared &persistent and connections for which make_connection_persistent()\n  has been called) is transferred from the old instance to the new instance.\n  Then the old instance terminates itself and the new one starts processing.\n\n  The host from which we want to take over the state has to be added to\n  remote_peers_clear (or remote_peers_ssl), setting hand_over to T. The\n  host which is allowed to perform a hand-over with us has to be added\n  with a port of 0/tcp and hand_over=T. An example for a handover between\n  two instances on the same machine:\n\n  @load hand-over\n  redef remote_peers_clear += {\n        [127.0.0.1, 47756/tcp] = [$hand_over = T],\n        [127.0.0.1, 0/tcp] = [$hand_over = T]\n        };\n\n  (This interface may be subject to change in the future.)\n\n- New script functions (Robin Sommer):\n\n      function terminate()\n          Terminates Bro via SIGTERM.\n\n      function dump_config()\n          Dumps Bro's full configuration into state_dir (one file per\n          variable/type/function, etc.)\n\n      function send_state(ip: addr, p: port)\n          Send all of persistent state to the remote host.\n\n      function set_accept_state(ip: addr, p: port, accept: bool)\n          If accept is true, state sent by the given host will be\n          accepted (default: false)\n\n      function make_connection_persistent(c: connection)\n          Declare the given connection state to be persistent (i.e.\n          to be saved upon termination and exchanged by send_state).\n          checkpoint.bro uses this to declare some services to be\n          persistent by default.\n\n      function is_local_interface(ip: addr): bool\n          Returns true if the given address is assigned to a local interface.\n\n- Printing of sets and tables now includes timestamps indicating when the\n  element was added (Robin Sommer):\n\n         ID did_ssh_version = {\n            [129.187.20.9, F] = 1 @11/01-15:55,\n            [212.144.77.26, T] = 2 @11/01-15:55,\n            [141.84.116.26, T] = 10 @11/01-15:55,\n            [217.232.245.249, T] = 1 @11/01-15:55,\n            [217.235.217.149, T] = 1 @11/01-15:55,\n            [129.187.39.13, F] = 2 @11/01-15:55,\n            [129.187.208.139, F] = 1 @11/01-15:55,\n            }\n\n  The format may change in the future, and will probably be made an option.\n\n- Similarly, you can print functions to get both a timestamp of the last\n  time the given block was executed and a count of how often (Robin Sommer):\n\n\t  ID record_connection = record_connection\n\t  (@11/01-16:03 #6549)\n\t  {\n\t  id = c$id;\n\t  local_init = is_local_addr(id$orig_h);\n\t  local_addr = local_init ? id$orig_h : id$resp_h;\n\t\t    remote_addr = local_init ? id$resp_h : id$orig_h;\n\t  flags = local_init ? \"L\" : \"\";\n\t  if (remote_addr in neighbor_nets)\n\t\t  (@<never> #0)\n\t\t  flags = cat(flags, \"U\");\n\n\t  if (\"\" == flags)\n\t\t  (@11/01-16:03 #2110)\n\t\t  flags = \"X\";\n\n\t  is_tcp = is_tcp_port(id$orig_p);\n\t  ;\n\t  if (is_tcp)\n\t\t  (@11/01-16:03 #6549)\n\t\t  {\n\t\t  if (c$orig$state in conn_closed || c$resp$state in conn_closed\n)\n\t\t\t  (@11/01-16:03 #4739)\n\t\t\t  duration = fmt(\"%.6g\", c$duration);\n\t\t  else\n\t\t\t  (@11/01-16:03 #1810)\n\t\t\t  duration = \"?\";\n\t  [...]\n\n- You can now specify numbers using hex constants, e.g., 0xabcd = 43981\n  (Michael Kuhn and Benedikt Ostermaier).\n\n- A new function, join_string_array(sep: string, a: string_array) concatenates\n  strings in 'a' and inserts 'sep' between every two adjacent elements\n  (Ruoming Pang).  E.g., join_string_array(\"\", {\"a\", \"b\", \"c\"}) returns\n  \"a b c\", and join_string_array(\"\", a) is the same as cat_string_array(a).\n\n- checkpoint.bro now makes some services persistent by default\n  (Robin Sommer).\n\n- The new_packet event now includes both the associated connection\n  and a pkt_hdr describing the packet (Robin Sommer).\n\n- The functions functions connect_ssl() and connect_clear() have been replaced\n  by a single connect() function taking an additional parameter to\n  differentiate the types (Robin Sommer).\n\n- The new function stop_listening() unbinds the listen port (Robin Sommer).\n\n- A new flag packet_filter_default says whether the Bro-level packet-filter\n  will by default accept all or reject everything (Robin Sommer).\n\n- Function calls can now be sent to remote Bro's, though there isn't yet\n  an interface for accessing this from the script level (Robin Sommer).\n\n- Bro now has an generalized internal framework for serializing objects\n  and monitoring access to state (Robin Sommer).\n\n- Better memory allocation accounting (Robin Sommer).\n\n- A minor tweak to the output generated by statistics.bro.\n\n- Improved localization of source code for functions in messages (but\n  there are still some bug).\n\n- Autoconf looks for -ltermcap (Robin Sommer).\n\n- Fixes for bugs in the management of table expiration values (Chema Gonzalez).\n\n- A bug in printing \"void\" values has been fixed (Chema Gonzalez).\n\n- -t bug fixed (Chema Gonzalez).\n\n- A bug has been fixed in which sometimes \"expression value ignored\"\n  was erroneously generated.\n\n- A bug with packet_contents and UDP packets with checksum errors\n  has been fixed (Ruoming Pang).\n\n- A memory leak in packet timestamp sorting via packet_sort_window\n  has been fixed (Ruoming Pang).\n\n- A bug has been fixed in expanding NULs when printing strings (Ruoming Pang).\n\n- Bug fixes for extracting connection contents via contents.bro (Ruoming Pang).\n\n- Bogus error message \"Can't install default pcap filter\" when using -F\n  removed.\n\n\n0.8a70 Sun Feb  8 14:19:45 PST 2004\n\n- Bro has a new home page at\n\n\thttp://www-nrg.ee.lbl.gov/bro.html\n\n  It includes a \"wish list\" of Bro development projects:\n\n\thttp://www-nrg.ee.lbl.gov/bro-wishlist.html\n\n- The \"match\" expression has been completely overhauled (Umesh Shankar).\n  It now has the syntax:\n\n\tmatch EXPR1 using EXPR2\n\n  Its semantics are complicated, but it's very powerful (see its use for\n  alert filtering below).  EXPR1 can have any type T.  EXPR2 must be of\n  type \"set[R]\", where R is a record type.  R must have the following fields:\n\n\t$pred\t- type is \"function(T): bool\".  This is the predicate\n\t\t  associated with the record.  It is passed in EXPR1's\n\t\t  value and returns true or false.\n\n\t$result\t- can have any type T'.  This is the value to use when\n\t\t  if $pred returns true for EXPR1.\n\n\t$priority - type must be arithmetic (count, int, double).  This\n\t\t  is the priority associated with the match of EXPR1\n\t\t  if $pred returns true.\n\n  The way the expression works is that EXPR1 is evaluated yielding a\n  value V.  EXPR2 is then evaluated yielding a set of records whose\n  type includes the above fields.  Bro then spins through each of the\n  records in the set and tests whether its $pred predicate holds for V.\n  If so, it records the given $result and the associated $priority.\n  It then returns for the value of the entire expression the $result\n  with the highest $priority.\n\n  Here's an example.  The following script:\n\n\tglobal match_stuff = {\n\t\t[$pred = function(a: count): bool { return a > 5; },\n\t\t $result = \"it's big\",\n\t\t $priority = 2],\n\n\t\t[$pred = function(a: count): bool { return a > 15; },\n\t\t $result = \"it's really big\",\n\t\t $priority = 3],\n\n\t\t[$pred = function(a: count): bool { return T; },\n\t\t $result = \"default\",\n\t\t $priority = 0],\n\t};\n\n\tprint match 0 using match_stuff;\n\tprint match 10 using match_stuff;\n\tprint match 20 using match_stuff;\n\n  when executed will print:\n\n\tdefault\n\tit's big\n\tit's really big\n\n  (Note that Bro actually will first evalute $priority before evaluating\n  $pred, and if it already has a better (higher) priority result, it\n  will not bother calling $pred.)\n\n- There's a new syntax for designating function values (Umesh Shankar).\n  It currently only works when associating a function value with a\n  record field in a record constructor:\n\n\t[$foo(bad_guy: addr) = { launch_counter_DDOS(bad_guy); return 3.14; }]\n\n  is equivalent to:\n\n\t[$foo = function(bad_guy: addr): double = {\n\t\t\tlaunch_counter_DDOS(bad_guy);\n\t\t\treturn 3.14;\n\t}]\n\n  The goal is to make such functions easier on the eye to express.\n  The changes are (1) no \"function\" keywork necessary, (2) no function\n  return type necessary (note, it is inferred from the \"return\" statement\n  in the function body; eventually this will work for all functions, not\n  just those in record constructors), (3) the '=' sign comes after the ')'\n  rather than before the keyword \"function\".\n\n  Given this syntax, we can rewrite the initialization of match_stuff\n  in the example above as:\n\n\tglobal match_stuff = {\n\t\t[$pred(a: count) = { return a > 5; },\n\t\t $result = \"it's big\",\n\t\t $priority = 2],\n\n\t\t[$pred(a: count) = { return a > 15; },\n\t\t $result = \"it's really big\",\n\t\t $priority = 3],\n\n\t\t[$pred(a: count) = { return T; },\n\t\t $result = \"default\",\n\t\t $priority = 0],\n\t};\n\n- The motivation behind these elaborate new mechanisms is to provide a\n  powerful and streamlined way to filter alerts.  According, alert.bro\n  now processes any alerts generated via ALERT() through a new global,\n  alert_policy.  alert_policy's type is set[alert_policy_item], where\n  alert_policy_item is:\n\n\ttype alert_policy_item: record {\n\t\tresult: AlertAction;\n\t\tpred: function(a: alert_info): bool;\n\t\tpriority: count;\n\t};\n\n  The idea is that you specify your alert post-filtering by redef'ing\n  new elements into alert_policy.  For example, here are two post-filtering\n  rules used at LBL to weed out uninteresting alerts:\n\n\t# Ignore connections marked as sensitive because they're\n\t# NTP to otherwise-sensitive hosts (first clause) or they happen\n\t# to involve 2766/tcp (Solaris Listen), which happens frequently\n\t# to ftp.ee.lbl.gov if Bro misses the PORT negotiation.\n\t[$pred(a: alert_info) =\n\t\t{\n\t\treturn a$alert == SensitiveConnection &&\n\t\t\t(a$conn$id$resp_p == 123/udp || # NTP\n\t\t\t a$msg == /Solaris listen service/);\n\t\t},\n\t $result = ALERT_FILE,\n\t $priority = 1],\n\n\n\t# Ignore sensitive URIs if the request was unsuccessful (code 404,\n\t# or not answered.)\n\t[$pred(a: alert_info) =\n\t\t{\n\t\treturn a$alert == HTTP::HTTP_SensitiveURI &&\n\t\t\ta$msg == /.*((\\(404)|(no reply)).*/;\n\t\t},\n\t $result = ALERT_FILE,\n\t $priority = 1],\n\n  These rules are part of:\n\n\tredef alert_policy += {\n\t\t... these records and others ...\n\t};\n\n  The idea behind them is to demote certain alerts that would ordinarily\n  be syslog'd (i.e., the associated action is ALERT_LOG_ALWAYS) to instead\n  just be recorded in the alert.$BRO_ID file.  Naturally, there are\n  many other possibilities.  For example:\n\n\t[$pred(a: alert_info) = {\n\t\tif ( a$alert == FTP::FTP_Sensitive &&\n\t\t     a$msg == /.*crown_jewels.*/ )\n\t\t\t{\n\t\t\tsystem(\"page_the_duty_officer \\\"crown jewels theft!\\\"\");\n\t\t\treturn T;\n\t\t\t}\n\t\telse\n\t\t\treturn F;\n\t\t},\n\t$result = ALERT_LOG_ALWAYS,\n\t$priority = 1000],\n\n  would run the program page_the_duty_officer with the argument \"crown\n  jewels theft!\" if an FTP_Sensitive alert was generated and the log message\n  included the text \"crown_jewels\".  More generally, post-filtering needn't\n  just be about deciding on how the alert is logged; the processing can\n  run programs, update tables, etc., just like any other function call might.\n\n- You can use the new function tally_alert_type in an alert_action_filters\n  initialization in order to suppress immediate logging of an alert and\n  instead have Bro generate a summary of how many times the given alert\n  was seen when it exits.  You can use another new function, file_alert,\n  to specify an alert_action_filters initialization that causes the alerts\n  to just be written to the alert.$BRO_ID file but not otherwise logged.\n\n  For example:\n\n\tredef alert_action_filters += {\n\t\t# Just summarize various packet capture glitches.\n\t\t[[RetransmissionInconsistency, ContentGap, DroppedPackets,\n\t\t  AckAboveHole]] =\n\t\t\ttally_alert_type,\n\n\t\t[RemoteWorm] = file_alert,\n\t};\n\n  would specify that RetransmissionInconsistency (etc.) alerts should just\n  be reported in the log file (log.$BRO_ID) as a total count, and\n  RemoteWorm should only be put in the alert.$BRO_ID file, but not\n  otherwise logged or counted.\n\n  You could get the same functionality by writing alert_policy records,\n  but they're quite a bit bulkier than the above.  Note that\n  alert_action_filters entries take precedence over alert_policy\n  records, but are evaluated *after* the \"match\" on alert_policy,\n  so if you have predicates in alert_policy with side-effects (like the\n  invocation of page_the_duty_officer in the example above), those\n  will still happen.\n\n- The alert_info record (which is used in calls to ALERT) now has\n  slots for some more additional information:\n\n\tuser: string;\t# can hold an assocaited username\n\tfilename: string;\t# an associated filename\n\tmethod: string;\t# associated HTTP method\n\tURL: string;\t# associated URL\n\tn: count;\t# any associated count/number/status code\n\n  (These are all &optional, so you don't need to specify them if they're\n  not appropriate.)  A number of ALERT's in the default policy scripts\n  have been changed to include these.  The intent is to add more such\n  information in the future.  Ideally, alert_policy records shouldn't\n  be doing checks like \"a$msg == /.*((\\(404)|(no reply)).*/\" but instead\n  extracting the status code directly from a field of 'a' (which is an\n  alert_info record).\n\n- ALERT now fills in the '$id' field in the alert_info record with\n  the $id of the associated connection, if the caller didn't suppy\n  a $id but did supply a $conn.  Likewise, it will fill in $src with\n  the $orig_h from $id (after first filling in $id).  The net result\n  is that you can rely on $id and $src being set for any alert that\n  has an associated connection.\n\n- The HTTP analysis scripts (policy/http*.bro) have been converted to\n  use the \"module\" facility, similar to how ftp.bro was converted for\n  0.8a48.  This may require changing some of your own scripts, generally\n  just to add \"HTTP::\" qualifiers.\n\n- Now that the variables associated with FTP analysis are part of an\n  \"FTP\" module, the \"ftp_\" prefix associated with:\n\n\tftp_excessive_filename_len\n\tftp_excessive_filename_trunc_len\n\tftp_guest_ids\n\tftp_hot_cmds\n\tftp_hot_files\n\tftp_hot_guest_files\n\tftp_ignore_invalid_PORT\n\tftp_ignore_privileged_PASVs\n\tftp_log\n\tftp_skip_hot\n\n  has been removed, and these are now called:\n\n\texcessive_filename_len\n\texcessive_filename_trunc_len\n\tguest_ids\n\thot_cmds\n\thot_files\n\thot_guest_files\n\tignore_invalid_PORT\n\tignore_privileged_PASVs\n\tlog_file\n\tskip_hot\n\n  To get to them from other scripts, you specify, for example,\n\n\tredef FTP::guest_ids = { .... };\n\n  whereas before you had to use:\n\n\tredef FTP::ftp_guest_ids = { .... };\n\n- The new connection logging format introduced in 0.8a57 is now the\n  default, unless you redef the new variable \"traditional_conn_format\"\n  to be T (Robin Sommer).  Connections using unidentified ephemeral\n  ports now have a service of simply \"other\" rather than other-XXXX.\n  The 'U' connection status flag has been removed (unless you're using\n  traditional_conn_format).\n\n- Tables can now be directly indexed by records, and indexing using records\n  is no longer interchangeable with using a corresponding list of indices\n  (Umesh Shankar).  This may require adjustments to existing policy\n  scripts.\n\n- Hostnames such as www.google.com now have type set[addr] rather than\n  a funky internal list type.\n\n- The new function dump_current_packet(file_name: string) dumps a copy of\n  the current packet to the file with the given name, appending it if the\n  file already exists (Robin Sommer).  The file is in tcpdump format.\n  A handy use for this is in an event handler for signature_match(),\n  to record packets that match given signatures.\n\n- The event new_packet() is invoked for each new packet (Robin Sommer).\n  It currently doesn't provide the packet contents but soon will in\n  a fashion similar to secondary-filter.bro.\n\n- \"cf -f fmt\" specifies a strtime() format.  -u specifics UTC time rather\n  than local time (Mark Delow and Craig Leres).  cf now has a man page\n  (Craig Leres).\n\n- Two new variables, backdoor_ignore_local and backdoor_ignore_remote,\n  can be used to specify backdoor signatures that should be ignored\n  if the server is local/remote.\n\n- A bug has been fixed in which a \"next\" executed in the final iteration\n  of a for loop would mangle the subsequent processing of the outer\n  statements (Chema Gonzalez).\n\n- Bug fixes for MIME and Base64 processing (Ruoming Pang).\n\n- pcap.bro now builds its filter in the opposite order (restrict_filters\n  first), which can improve packet filtering performance (Robin Sommer).\n\n- A bug in &default has been fixed.\n\n- More SSL autoconf tweaks (Robin Sommer).\n\n- Portability for different pcap_compile_nopcap() calling sequences\n  (Chema Gonzalez).\n\n- Some tweaks for a minor reduction in memory consumption.\n\n- A memory leak for secondary packet filters has been fixed.\n\n- The localization of error messages (what script line they correspond to)\n  has been improved.\n\n\n0.8a58 Tue Dec 16 08:55:47 PST 2003\n\n- Compatibility with older versions of libpcap (Chema Gonzalez).\n\n\n0.8a57 Tue Dec  9 10:14:30 PST 2003\n\n- The format of Bro's connection summaries is changing.  The new format\n  looks like\n\n\t  1069437569.904605 0.230644 1.2.3.4 5.6.7.8 http 59377 80 tcp 610 275 S3 L\n\n  That is, <timestamp>, <duration>, <originator address>, <responder address>,\n  <service>, <originator port>, <responder port>, <originator bytes>,\n  <responder bytes>, <connection state>, <flags>.  (Robin Sommer)\n\n  The script variable traditional_conn_format=T specifies to use the old\n  format rather than this new one.  This is *currently* the default, but\n  will change soon to default to F instead.  If you have comments on this\n  new format, we'd like to hear them.\n\n- The SigAction's available in signatures.bro have been extended (Robin Sommer).\n  SIG_FILE_BUT_NO_SCAN is like SIG_FILE but without any horizontal/vertical\n  processing; SIG_LOG_ONCE logs only an alert only the first time it occurs;\n  SIG_LOG_PER_ORIG logs only the first instance of an alert generated by a\n  particular originator; SIG_COUNT has been renamed SIG_COUNT_PER_RESP; and\n  SIG_SUMMARY suppresses logging of individual alerts but generates a\n  per-originator summary.\n\n- A new -p option for snort2bro tells it to only process signatures that\n  include matching on payload (Robin Sommer).\n\n- You can now explicitly include or exclude particular SIDs when\n  running snort2bro by specifying a configuration file via -c (Robin\n  Sommer).  The format is simple, just \"include\" or \"ignore\" followed\n  by the SID number:\n\n\t# sid-526 BAD TRAFFIC data in TCP SYN packet\n\tignore\t526\n\n\t# sid-623 matches a null-flags stealth scan.  Include it even\n\t# if we build with -p, since it doesn't tend to generate any\n\t# false positives.\n\tinclude\t623\n\n  The new \"snort2bro.cfg\" file gives examples (i.e., the above).\n\n- Bro can now serialize functions and event handlers, meaning that these\n  can be passed as values between Bro's and dumped using -g (Robin Sommer).\n  One of the main goals in supporting this is to allow in situ alteration\n  of the Bro's configuration (e.g., you can edit a function and change its\n  functioning and have a running Bro pick up the change without having to\n  stop and be restarted).  Such dynamic reconfiguration is experimentally\n  supported via -g <dir> (see below).\n\n- &persistent state is now stored in the *directory* given by state_dir\n  (default: \"./.state\"), one file per variable, rather than a single file\n  (Robin Sommer).\n\n- Storing &persistent state to disk is now done incrementally: after writing\n  each file, there's a delay of state_write_delay (default: 0.1 secs) before\n  working on the next file (Robin Sommer). This may introduce small\n  inconsistencies, but prevents load spikes that can lead to packet drops.\n  Currently, there is no mechanism to incrementally store a single variable\n  (like a large table), although there is already some framework in place\n  to eventually support this.\n\n- The *experimental* new -g <dir> option dumps the script-level configuration\n  (excluding things defined in internal default scripts like bro.init)\n  into the directory <dir>. These files may be printed with \"bro -x <file>\",\n  or copied into the state_dir of a running Bro, which will then pick up\n  the change if it has loaded checkpoint.bro.  (When picking up changes,\n  event handlers are always added, while functions, types, and variables\n  replace the current ones).\n\n- Table values are now incrementally expired rather than all at once\n  (Robin Sommer).  That is, if the expiration timer goes off and hundreds\n  of values should now be expired, the work of doing so is spread over\n  chunks of table_expire_size (default: 50) at a time, separated by a\n  delay of table_expire_delay (default: 0.1 secs).  This change aims to\n  prevent large processing spikes that can lead to packet drops.\n\n- New built-ins sub() and gsub() act like awk's functions of the same\n  name, changing substrings (either first, or all) that match a given\n  regular expression to a given target string.  (Note, the calling sequence\n  differs from the order used by awk.)\n\n- The new auxiliary script aux/scripts/mvlog is a handy way to manage\n  checkpointed logs.  See the script for documentation.\n\n- The &expire_func function now takes two arguments.  The second is\n  of type \"any\" and corresponds to the index(es) of the element being\n  expired.  To access the individual indices, you use a new assignment form:\n\n\t[a, b, c] = index_val;\n\n  (where index_val is the second argument of type \"any\").  This assigns\n  a to the first index, b to the second, and c to the third.  NOTE: the\n  use of \"any\" types here is *temporary* and will be changing in the\n  future to a general \"tuple\" notion.  (Robin Sommer)\n\n- scan.bro and conn.bro have been reworked to consume less memory and to\n  support more flexible state expiration (Robin Sommer).\n\n- The new builtin rescan_state() causes Bro to re-read any persistent\n  data values (Robin Sommer).\n\n- snort2bro now supports continued lines (\"\\<newline>\") (Robin Sommer).\n\n- The calling sequences of the software_version_found() and\n  software_parse_error() events has changed, and a new event,\n  software_unparsed_version_found(), is invoked for raw version\n  strings (i.e., the version string prior to the event engine\n  attempting to parse it into version/major/minor) (Robin Sommer).\n\n- Software version tracking for clients now tracks all versions, not just\n  the latest version (Robin Sommer).\n\n- alert_info records now include an optional field event_src, which is the\n  source of the event if it was received from an external Bro (Robin Sommer).\n\n- Regular expressions now support {} iteration values of 0, and generate\n  better error messages.\n\n- Output generated by icmp.bro is now redirected into an \"icmp\" log file\n  (Robin Sommer).\n\n- autoconf tweaks for configuring OpenSSL on Linux (Ruoming Pang, Robin Sommer).\n  Tested on RedHat (thanks to Anton Chuvakin), Debian, FreeBSD, Solaris.\n\n- You can now turn off using OpenSSL even if the OS supports it, via\n  configuring with --disable-openssl (Robin Sommer).\n\n- Variable size computations (per global_sizes()) are now more accurate\n  (Robin Sommer).\n\n- A bug with combining file encryption and log rotation has been\n  fixed (Robin Sommer).\n\n- A problem tracking directionality in signatures fixed (Robin Sommer).\n\n- Bro now continues running if DNS is not functioning (Robin Sommer).\n\n- Rewriter memory use has been significantly reduced (Ruoming Pang).\n\n- Some bugs with -A/-w interaction have been fixed (Ruoming Pang).\n\n\n0.8a48 Tue Oct 21 15:56:13 PDT 2003\n\n- There is now a mechanism in place for multiple Bro's to communicate with\n  one another via sockets (Robin Sommer).  *This is quite experimental at\n  this point* and may have significant bugs and/or need significant\n  enhancements.\n\n  By loading listen-clear.bro or listen-ssl.bro, an instance of Bro starts\n  to listen on a TCP port.  The first of these listens for unencrypted\n  connections and the second for connections encrypted via OpenSSL.  To\n  connect to a listening Bro, you load remote-clear.bro or remote-ssl.bro.\n  For this connection, you specify which events you want to receive by\n  giving a regular expression (e.g.  \"/http_*/\" for all HTTP events),\n  although only those events for which you have defined a local handler\n  are actually requested.  Communication is uni-directional in the sense\n  that for a certain connection the events go only from Bro-A to Bro-B but\n  not from B to A (you could set up a second connection for the other\n  direction, though).\n\n  The OpenSSL certificate used to authorize remote  Bro's is specified in\n  the script variable \"ssl_ca_certificate\" and the private key and certificate\n  for the local Bro via \"ssl_private_key\".\n\n  If Bro A connects to Bro B, by default it sends over its capture_filter.\n  But Bro B uses it only if it has loaded remote-pcap.bro.  This is the\n  beginning of structuring inter-Bro trust mechanisms.  It is done via two\n  new events, remote_capture_filter(ip: addr, p: port, filter: string) and\n  send_capture_filter(ip: addr, p: port, s: string) : bool.\n\n  The implementation forks a second process which does the socket\n  communication, so that the main process should not be affected too much.\n  The two processes communicate via a pipe.\n\n  You can call is_remote_event() to determine whether the event currently\n  being handled was originated by a remote Bro (if T) or the local Bro\n  (if F).\n\n  If a connection with a remote Bro terminates (for whatever reason), Bro\n  may try to reconnect automatically.\n\n  A new function, get_event_source(), returns a record event_source\n  describing the source that raised the last event.\n\n  See doc/ssl.txt for an explanation of how to create the keys/certificates.\n\n- A fledgling Gnutella analyzer has been contributed (Mark Allman).\n  It generates the following events:\n\n\tevent gnutella_text_msg(c: connection, orig: bool, headers: string)\n\tevent gnutella_binary_msg(c: connection, orig: bool, msg_type: count,\n\t\t\t\t\tttl: count, hops: count, msg_len: count,\n\t\t\t\t\tpayload: string, payload_len: count,\n\t\t\t\t\ttrunc: bool, complete: bool)\n\tevent gnutella_partial_binary_msg(c: connection, orig: bool,\n\t\t\t\t\t\tmsg: string, len: count)\n\tevent gnutella_establish(c: connection)\n\tevent gnutella_not_establish(c: connection)\n\tevent gnutella_http_notify(c: connection)\n\n- Bro now supports a secondary channel for acquiring packets (Chema Gonzalez).\n  You access it by redef'ing the new global \"secondary_filters\", adding\n  table[string] of event(filter: string, pkt: pkt_hdr).  The string\n  specifies a tcpdump filter; anytime a packet matches the filter\n  (including packets that would *not* otherwise be matched by\n  capture_filter), then the given event handler is invoked.\n\n  For example,\n\n\t  redef secondary_filters += {\n\t\t  [\"tcp[13] & 7 != 0\"] = rst_syn_fin_flag,\n\t  }\n\n  will invoke rst_syn_fin_flag() anytime a TCP packet is seen for\n  which the SYN/FIN/RST bits are non-zero.  The event handler will\n  be passed the string \"tcp[13] & 7 != 0\" (so it can tell which\n  of possibly multiple filters matched) and a pkt_hdr value, which\n  includes the IP header and, if present, the TCP, UDP or ICMP header.\n\n  Another example, and what motivated the addition, is:\n\n\t  redef secondary_filters += {\n\t\t[\"ip[10:2] & 0xffc == 0x398\"] = sampled_1_in_1024_packet,\n\t  }\n\n  which will invoke sampled_1_in_1024_packet() any time the given\n  10 bits in the IP checksum match the pattern 0x398.  If the checksum\n  field is uniformly distributed then this roughly corresponds to\n  1-in-1024 random sampling.  (Chema has also developed BPF additions\n  to support true random sampling.)\n\n  See policy/secondary-filter.bro for examples.\n\n- Bro now does a much better job of keeping track of how much memory\n  has been allocated for different structures (Robin Sommer).\n\n  This includes more accurate computations for global_size().\n\n  In addition, if you redef \"statistics_interval\" to be a non-zero time\n  interval, then with that periodicity a summary of memory usage (including\n  memory used by event engine components) is dumped to the file\n  \"statistics_file\".  In addition, at this point a \"do_statistics\" event\n  is generated.  You can also call the new built-in statistics_update()\n  to generate memory statistics on demand.\n\n  The above structure is likely to change in the future.  statistics_interval\n  will probably go away, to be replaced by either explicit calls to\n  statistics_update() (which you can do on a timer if you like by using\n  \"schedule\"), or by a built-in function that returns a record of all\n  the statistics, that you can then format however you want.\n\n- A major memory leak in HTTP analysis has been fixed (Ruoming Pang).\n\n- New attributes &rotate = <interval expression> and\n  &postprocessor = <string expression> can be associated with a file\n  variable in order to specify how often the file should be rotated to a\n  new filename on disk, and, when rotation occurs, the name of a shell\n  program to run on the now-older version as a postprocessor (Robin Sommer).\n\n- Similarly, log_postprocessor and log_rotate_interval specify the default\n  values for files.  Unless redef'd, these themselves default to the empty\n  string (= no postprocessing) and 0.0 seconds (no rotation).  (Robin Sommer)\n\n- A new attribute, &encrypt, applies to variables of \"file\" type.  It specifies\n  that the version on disk should be encrypted, using either the key specified\n  as the value of the attribute, or, if no value is specified, using the\n  value of the new script variable log_encryption_key.  The key is an OpenSSL\n  public key; it's used to then embed a Blowfish session key.  (Robin Sommer)\n\n  A new utility, aux/bdcat/bdcat (\"Bro decrypt cat\") can be used to decrypt\n  the files.\n\n- The internal structure of TCP analysis has been significantly altered.\n  Previously, TCP_Endpoint tracked endpoint state and TCP_EndpointContents\n  (derived from it) did stream reassembly.  These have now been separated;\n  TCP_Endpoint still tracks endpoint state, but TCP_EndointContents has\n  become TCP_Contents, and is only loosely coupled with TCP_Endpoint.\n  The reason for this change is to lay the groundwork for (1) applying\n  an application analyzer to a connection after several packets for\n  the connection have already been read, and (2) applying *multiple*\n  application analyzers to a single connection.\n\n- Bro now supports the universal hashing if USE_UHASH is defined\n  (Ruoming Pang).  Universal hashing is a lighter-weight alternative\n  to MD5 hashing that retains the property of being very difficult\n  for an attacker to guess.  It comes in two flavors, a 32-bit\n  version (which you get with USE_UHASH) and a faster 16-bit version\n  (which you get if you also define USE_NH).  Bro will likely switch\n  to using these by default in the near future, as their performance\n  gain over MD5 is significant.\n\n- New built-in functions srand() and rand() provide access to the\n  usual C-style random number seeding & generation (Chema Gonzalez).\n\n- You can now specify server/client addresses to leave in the clear in\n  IP address anonymization (via the built-in variables preserve_orig_addr\n  and preserve_resp_addr). Correspondingly, the built-in function for\n  IP anonymization now takes a parameter to specify the type of the address\n  (orig, resp, or other), instead of the method of anonymization\n  (seq, random, prefix-preserving).  (Ruoming Pang)\n\n- Trace anonymization now has prelminary support for handling TCP options\n  via the new event \"tcp_option\" (Ruoming Pang).  It is only invoked\n  if skip_event_tcp_option is F (it defaults to T).\n\n- A new event, tcp_segment, is similar to the event \"packet_content\"\n  but provides more information: is_orig (directionality), sequence\n  number, and acknowledgement number (Ruoming Pang).\n\n- ./configure finds OpenSSL if it's in some standard location.  Otherwise,\n  you may specify it --with-openssl=<path>.  If OpenSSL is not available,\n  Bro compiles cleanly without and gives warnings if a script tries use SSL.\n  (Robin Sommer)\n\n- The internal links in manual/entire.html have been fixed so they\n  now work (Chema Gonzalez).\n\n- A new policy script, blaster.bro, detects instances of the W32.Blaster\n  worm (Robin Sommer).\n\n- Signature files (for input to the signature engine) now reside in\n  policy/sigs/*.sig.  This directory is now on the default $BROPATH.\n\n- sig.ex.ssl-worm.bro and sig.ex.web-rules.bro have been updated\n  to reflect changes in keywords (Robin Sommer).  They've been\n  renamed to ex.ssl-worm.sig and ex.web-rules.sig and reside\n  in policy/sigs/, per the above.\n\n- The module facility has been changed to have its scope limited to\n  the current file plus any additional files that are automatically\n  processed based on its name plus $BRO_PREFIXES.\n\n- As an experiment, ftp.bro has been modified to a style that includes\n  using \"module FTP\".  Likely other policy scripts will be converted\n  in the near future, and their variable names changed accordingly\n  (e.g., \"ftp_hot_files\" will become \"FTP::hot_files\").\n\n- The new \"match\" expression has been modified to allow any yield type\n  rather than just strings.  It is likely to change significantly again\n  soon.\n\n- Iterating over multi-dimensional tables/sets now works (Robin Sommer).\n  For example:\n\n    const remote_peers_ssl : table[addr, port] of Peer &redef;\n    [...]\n    for ( [ip, p] in remote_peers_ssl )\n        connect_ssl(ip, p, remote_peers_ssl[ip, p]$retry);\n\n- Checkpointing of persistent state on SIGHUP now happens via bro.init\n  (Robin Sommer).  Not tested.\n\n- fmt() now supports %x for hexadecimal formatting (Chema Gonzalez).\n\n- alert.bro logs the source for remote alerts; by redefining the new\n  \"event_source_description: string\" locally, you can specify how a\n  Bro is to refered to on the remote side.  (Robin Sommer)\n\n- software.bro now tracks HTTP clients, too (Robin Sommer).  This\n  will be extended in the near future.\n\n- Some FreeBSD 5.X porting tweaks (Sergey Osokin).\n\n\n0.8a37 Wed Sep  3 23:20:21 PDT 2003\n\n- A new attribute, \"&persistent\", indicates that a global variable's\n  state should persist on disk (Robin Sommer).  Currently, they\n  reside in the file \"state.bst\".\n\n  For example, given the following script:\n\n\tglobal a = 0 &persistent;\n\n\tevent bro_init()\n\t\t{\n\t\tprint ++a;\n\t\t}\n\n  then every time you run it, a increases by one.\n\n  You can dump the state file using \"bro -x state.bst <scriptname>\".\n  (There's also a partially-implemented XML dumper which you invoke via\n  \"bro -X state.bst <scriptname>\".)\n\n  If you send Bro a HUP signal, then it will synchronize all persistent\n  state to disk (checkpoint) at that point.  More generally, the policy\n  script can do so at any time by calling the new built-in checkpoint_state().\n\n  By including the new policy script \"checkpoint\", you can have Bro\n  automatically checkpoint every time checkpoint_interval elapses\n  (default 15 minutes).\n\n- You can also record events to disk by loading the \"capture-events\"\n  policy script, or calling the new capture_events() built-in (Robin Sommer).\n  The events are written to the file events.bst.  You can dump these\n  using bro -x (or -X), as above.  You can also replay them using\n  \"bro -R <file>\".  By replaying them using the same policy script as\n  generated them, you should get the same output.  For example:\n\n\tbro -r tracefile myscript capture-events\n\n\t...\n\n\tbro -R events.log myscript\n\n- An experimental module facility has been added (Umesh Shankar).\n\n  The module facility implements namespaces. Everything is in some namespace\n  or other. The default namespace is called \"GLOBAL\" and is searched by\n  default when doing name resolution. The scoping operator is \"::\" as in\n  C++. You can only access things in the current namespace, things in the\n  GLOBAL namespace, or things that have been explicitly exported from a\n  different namespace. Exported variables and functions still require\n  fully-qualified names. The syntax is as follows:\n\n  module foo;  # Sets the current namespace to \"foo\"\n  export {\n\tint i;\n\tint j;\n  }\n  int k;\n\n  module bar;\n  int i;\n\n  foo::i = 1;\n  bar::i = 2;\n  print i;    # bar::i (since we're currently in module bar)\n  j = 3;      # ERROR: j is exported, but the fully qualified name\n              #        foo::j is required\n  foo::k = 4; # ERROR: k is not exported\n\n  The same goes for calling functions.\n\n  One restriction currently in place is that variables not in the \"GLOBAL\"\n  namespace can't shadow those in GLOBAL, so you can't have\n\n    module GLOBAL;\n    global i: int;\n\n    module other_module;\n    global i: int;\n\n  It is a little confusing that the \"global\" declaration really only means\n  that the variable i is global to the current module, not that it is truly\n  global and thus visible everywhere (that would require that it be in\n  GLOBAL, or if using the full name is ok, that it be exported).  Perhaps\n  there will be a change to the syntax in the future to address this.\n\n  The \"module\" statement cuts across @load commands, so that if you say:\n\n\tmodule foo;\n\t@load other_script;\n\n  then other_script will be in module foo. Likewise if other_script changes\n  to module bar, then the current module will be module bar even after\n  other_script is done.  However, this functionality may change in the future\n  if it proves problematic.\n\n  The policy scripts in the Bro distribution have not yet been updated to\n  use it, but there is a backward-compatibility feature so that existing\n  scripts should work without modification. In particular, everything is\n  put in GLOBAL by default.\n\n- The hooks are now in place for communicating events between running\n  Bro's.  An experimental implementation of doing so (written by Robin\n  Sommer) will be integrated shortly.\n\n- A side-effect of getting those hooks in place is that event handlers must\n  now be directly specified (by naming them) rather than indirectly\n  (for example, by indexing a table whose value yields an event handler).\n  This may be fixed soon.\n\n- An experimental \"match\" expression scans a list of predicates to find\n  the first one that's both true and has the highest priority (Umesh Shankar).\n\n  The general form is:\n\n\tmatch some_record on {\n\t\t[ priority, class_name, predicate ],\n\t\t...\n\t}\n\n  where \"predicate\" is evaluated in the context of the value (and type) of\n  some_record.  For example, if some_record has a field \"num_alerts\"\n  then predicate could be \"$num_alerts > 5\".\n\n  \"priority\" is a non-negative integer (i.e., of type \"count\"), and,\n  for now, \"class_name\" is a string.\n\n  For example,\n\n\tglobal c: conn_id;\n\n\tc = [ $orig_h = 0.0.0.0, $orig_p = 0/tcp,\n\t      $resp_h = 1.1.1.1, $resp_p = 1/tcp ];\n\n\tprint match c on {\n\t\t[ 2, \"emptyweb\", $orig_h == 0.0.0.0 && $resp_p == 80/tcp ],\n\t\t[ 1, \"emptyhost\", $orig_h == 0.0.0.0 ],\n\t\t[ 0, \"should not match\", 1 == 0 ]\n\t};\n\n  will print \"emptyhost\".\n\n  The initial intent behind this is to eventually provide more flexible\n  customization of alert processing, though it clearly has broader\n  applicable.  *It is very likely that the semantics and perhaps the syntax\n  of \"match\" will change in the near future.*\n\n- Bro's packet filter is now computed via pcap.bro (which is automatically\n  included via bro.init).  It uses two new built-ins:\n\n\tprecompile_pcap_filter(id: PcapFilterID, s: string):  bool\n\tinstall_pcap_filter(id: PcapFilterID): bool\n\n  The first is for precompiling a pcap filter so it can be installed\n  or turned off dynamically. Associating an ID with the filter, you can\n  then activate the filter by calling the second function (installing a\n  new filter replaces the current one).  (Robin Sommer)\n\n  Be default, pcap.bro is responsible for building a pcap string based on\n  the capture/restrict_filters defined by the various analyzers. It compiles\n  and installs this filter, so there is no observable difference in usage\n  to the old implementation, except capture/restrict_filter are now *tables*\n  rather than strings, and are written as plural rather than singular.\n  So the analyzers need to define something like this:\n\n\t[finger.bro]\n\tredef capture_filters += { [\"finger\"] = \"port finger\" };\n\n  This then allows \"finger\" to be used as the name for the corresponding\n  filter element (see the next item).\n\n- load-level.bro is an experimental policy script for allowing Bro to\n  shed or add on load (in terms of which protocols it analyzes).  It\n  provides three interface functions for setting the current loadlevel:\n\n\t# level is LoadLevel1, ..., LoadLevel10\n\tfunction set_load_level(level: PcapFilterID): bool\n\n\tfunction increase_load_level()\n\tfunction decrease_load_level()\n\n  load-levels.bro defines ten different load levels (from 1 to 10, with 10\n  being the one with the most load imposed on the system), which are\n  configured by defining capture_load_level/restrict_load_levels: Example:\n\n\tredef capture_load_levels += {\n\t\t[\"dns\"]          = LoadLevel1,\n\t\t[\"smtp\"]         = LoadLevel2,\n\t\t[\"http-reply\"]   = LoadLevel3,\n\t\t[\"http-request\"] = LoadLevel8,\n\t};\n\n  This means for example: \"include the capture_filter associated with\n  'http-reply' if the current load level is 3 or below\".  There's a similar\n  mechanism for restrict_filters:\n\n\tredef restrict_filters += {\n\t\t[\"cs-only\"] = \"net 131.159.0.0/16\",\n\t};\n\n\tredef restrict_load_levels += {\n\t\t[\"cs-only\"] = LoadLevel7,\n\t};\n\n  This applies the given restrict_filter if the current load level is 7\n  or *above*.\n\n  The pcap filters belonging to the ten load levels are built and pre-compiled\n  on startup. The three functions shown above just call install_pcap_filter()\n  then.  (Robin Sommer)\n\n- drop-adapt.bro tries to adjust the load level based on the current\n  packet drop rate (Robin Sommer).\n\n- synflood.bro is an experimental policy script for detecting SYN floods.\n  It is not yet documented, other than brief comments in the script.\n  (Robin Sommer)\n\n- Subnet lookups now use Patricia trees instead of brute-force, which should\n  make them significantly more efficient for large lists, e.g., local nets.\n  (Robin Sommer)\n\n- Due to the addition of modules, which use a C++-style \"::\" scope\n  designator, you now need to use \"0x\" to introduce IPv6 address constants\n  that use \"::\" to specify a series of empty octets.  For example, you\n  used to be able to specify \"deadbeef::cafe\", but now this needs to be\n  \"0xdeadbeef::cafe\".  Note that \"1::2\" can still be written without needing\n  a \"0x\" prefix; it's just hex constants that start with letters that need\n  the prefix.\n\n- A new built-in, escape_string(), takes a string and returns a copy of\n  it that uses escape sequences for any problematic characters (Robin Sommer).\n\n- A number of low-level bug fixes and portability tweaks (Robin Sommer,\n  Ruoming Pang, Christian Kreibich, Chema Gonzalez).\n\n- A new timer, status_update_timer, fires for each ongoing connection\n  every connection_status_update_interval seconds (default = 0 seconds,\n  which means \"don't fire).  (Robin Sommer)\n\n- An additional Bro-level packet filter can filter/sample packets\n  based on their src/dest ip/subnet (using a Patricia tree for\n  efficiency; Robin Sommer). install_src_addr_filter(ip, flags, p) drops\n  packets originating from ip with probability p (0..100) if none of the\n  given TCP flags is set. install_src_net_filter, install_dst_addr_filter\n  and install_dst_net_filter\" work similarly.  The corresponding \"uninstall_*\"\n  functions remove the filters again.\n\n- The @if/@else/@endif mechanisms have been made more powerful (Robin Sommer).\n\n- New configure option --enable-debug to compile without optimization\n  (Robin Sommer).\n\n- Small tweaks to the mpatrol support (Robin Sommer).\n\n- SMTP is now one of the services which can use a small inactivity timeout\n  in inactivity.bro (Robin Sommer).\n\n- Alerts for signatures which are triggered by worms may be suppressed if\n  we already know that the triggering host is indeed infected by a worm\n  (Robin Sommer).\n\n- Matches of a signature can now be counted per destination host\n  (Robin Sommer).\n\n- snort2bro now ignores sid-526 (\"BAD TRAFFIC data in TCP SYN packet\";\n  Robin Sommer). Due to different semantics of Bro (matching stream-wise)\n  and Snort (matching packet-wise) this signature generates a lot of\n  false positives.\n\n\n0.8a34 Sun Jul 13 09:11:32 PDT 2003\n\n- The new \"subnet\" type corresponds to a CIDR prefix (Robin Sommer).\n  You can use the '/' operator to convert an address to a subnet.  The\n  \"in\" operator tests whether an address matches a subnet (e.g., \"1.2.3.4\n  in 1.2.255.255/16\" yields T).\n\n  You can index tables with index type \"subnet\" using addresses to retrieve\n  the table entry with the longest-matching prefix for that address, and\n  a number of tables/sets in the default scripts have been converted to\n  this form.  So for example the local_16_nets and local_24_nets variables\n  have been replaced by local_nets, which has type \"set[subnet]\",\n  is_local_addr() now refers to it, and skip_scan_nets_{16,24} have\n  likewise been consolidated into skip_scan_nets.\n\n  One present deficiency is that subnets can't be used in tables/sets\n  with multiple indices.  Fixing this is going to take some time ...\n  Another deficiency is that the longest-match lookup is not very\n  efficient.\n\n  Caution: this feature has been only briefly tested with IPv6.\n\n- ALERT now generates an event \"alert_action\" which includes the alert_info\n  and AlertAction associated with an alert.  You can define your own handler\n  to further customize alert processing.\n\n- The \"snort2bro\" conversion utility has been extended to recognize some\n  of the new Snort options (depth, distance, within; Robin Sommer).  For\n  example:\n\n      alert .... ( ... content:\"|00 01 86 B8|\";\n\t\t       content:\"|00 00 00 02|\"; distance:4; within:4;\n\t\t       content:\"%x %x\"; distance:16; within:256;\n\t\t       ... )\n\n  is converted to:\n\n      signature sid-1891 {\n\t  ...\n\t  payload /.*\\x00\\x01\\x86\\xB8.{4}\\x00\\x00\\x00\\x02.{16}.{0,251}%x %x/\n\t  }\n\n  Note that not all of the new Snort options are supported yet.\n\n- You can refer to script variables within signatures (Robin Sommer).\n  For example, the following is now possible:\n\n\tsignature sid-547 {\n\t  ip-proto == tcp\n\t  src-ip != local_nets\n\t  dst-ip == local_nets\n\t  dst-port == 21\n\t  event \"FTP \\\"MKD  \\\" possible warez site\"\n\t  tcp-state established\n\t  payload /[mM][kK][dD]  /\n\t  }\n\n  This makes the signatures independent of the environment (\"local_nets\"\n  in the above examle).  snort2bro now converts some well-known Snort\n  variables into corresponding Bro variables, a number of which are listed\n  in policy/site.bro.\n\n- The default action for signature matches is now logging insted of only\n  writing it to a file (Robin Sommer).\n\n- You can now use the '^' and '$' regular expression operators inside\n  subpatterns.  For example, /foo$/ | /^bar/ works now.\n\n- You can now use \"msec\" for milliseconds (in addition to \"usec\" for\n  microseconds, \"sec\" for seconds, etc).\n\n- The log_file_name and open_log_file functions are now redef'able\n  if you want to change their behavior.\n\n- Bro now exits more cleanly upon exhaustion of memory (Robin Sommer).\n\n- A bug was fixed for the case of getrlimit() returning RLIM_INFINITY for\n  the maximum number of open files.\n\n- Numerous additions of std:: scoping to address porting issues (Robin Sommer).\n\n- gcc 3.X and Solaris portability fixes.\n\n- A new event RemoteWorm is the complement of LocalWorm (Robin Sommer).\n\n- A bug in which the FTP analyzer would complain about failing to be able\n  to look up a connection has been fixed (Robin Sommer).\n\n- You can now configure Bro using \"--with-mpatrol\" to activate MPatrol\n  debugging hooks.  When built in this mode, -m dumps the leak table\n  and -M shows unfreed parts of the heap.  These dumps can also be\n  triggered using SIGUSR1 / SIGUSR2, respectively.  (Robin Sommmer)\n\n- A script function get_contents_type() which returns the type of reassembling\n  being done for a connection (none/orig-side/resp-side/both; Robin Sommer).\n\n- A minor bug fix for the regular expression matcher (Robin Sommer).\n\n\n0.8a32 Thu Jun 12 23:33:21 PDT 2003\n\n- The low-level hash functions have been reimplemented to use HMAC-MD5 to\n  counter the \"algorithmic complexity attacks\" discussed in the USENIX\n  Security 2003 paper by Scott Crosby & Dan Wallach\n  (http://www.cs.rice.edu/~scrosby/hash/) (Ruoming Pang and Vern Paxson)\n\n- Ruoming Pang has made extensive changes to the anonymization/transformation\n  framework.  A paper describing it will appear in SIGCOMM 2003, and will\n  be included with the Bro distribution once the final copy is ready.\n\n- Internal hash tables now resize incrementally, and more quickly.\n  This makes a big difference in avoiding lengthy processing pauses when\n  processing large volumes of traffic. (Craig Leres)\n\n- gcc 3.1 and Linux portability tweaks.\n\n- The calling sequence of http_request() has changed.  It now includes both\n  the original URI and the escaped URI.  This was made explicit because\n  we found that if only the original was passed in, it was too easy to forget\n  to expand the escapes in it; and if only the escaped was passed in,\n  some attacks could be missed. (Ruoming Pang)\n\n- Signature rules can now refer to \"finger\" payload as well as HTTP and FTP\n  (Robin Sommer).\n\n- The signature engine now includes keywords \"dst-ip\", \"dst-port\",\n  \"ip-proto\", \"src-ip\", \"src-port\".  (Robin Sommer)\n\n- Packet sorting now defaults to off.\n\n- The FTP analysis now attempts to track the current directory (Ruoming Pang).\n\n- A number of scan detection additions have been added (Scott Campbell):\n\n\tactivate_landmine_check = F\n\t\tif T, then access to more than landmine_thresh_trigger\n\t\taddresses in landmine_address (a set of addresses)\n\t\tconstitutes a scan\n\n\tactivate_priv_port_check = T\n\t\tif T, then inbound access to more than priv_scan_trigger\n\t\tprivileged ports (i.e., ports < 1024) is considered a port\n\t\tscan.  You can exclude particular services from the count\n\t\tvia troll_skip_service, which defaults to { smtp, ftp,\n\t\tssh, 20/tcp, http }.\n\n- The SMTP analysis now includes a new alert, HotEmailRecipient, which\n  is triggered by mail sent to any of the addresses specified in\n  the pattern hot_recipients (which defaults to a bare /@/).\n\n- The new built-in cat_string_array_n() is like cat_string_array() except\n  it takes starting and ending indices as additional arguments (Ruoming Pang).\n\n- The new built-in sort_string_array() takes a string array and returns\n  a sorted version (Ruoming Pang).  It currently uses an N^2 algorithm\n  so shouldn't be used on large arrays.\n\n- The new built-in subst() substitutes all instances of a given pattern\n  in a given string with another string (Ruoming Pang).  For example,\n  subst(\"fooboo\", /oo/, \"xxx\") returns \"fxxxbxxx\".\n\n- The new built-in cut_tail() trims characters from the end of a string\n  (Ruoming Pang).  For example, cut_tail(\"fooboo\", 2) returns \"foob\".\n\n- sub_bytes() can now take a negative argument, which is with respect to\n  the end of the string rather than the beginning (Ruoming Pang).\n\n- The new built-in md5_hmac() returns an HMAC-MD5 hash of the given string\n  (Ruoming Pang).  The HMAC secret key is generated from available entropy\n  when Bro starts up, or it can be specified for repeatability using\n  the new -K flag.\n\n- The new built-in split_all() is like split() except that the returned\n  array also includes the parts of the string that match the pattern\n  used for the splitting (Ruoming Pang).\n\n- The new built-in split_n() splits up to a given number of instances,\n  optionally returning the parts matching the split pattern (Ruoming Pang).\n\n- The new built-in split_complete() is the most general of the split functions\n  (the others are written in terms of it).  It splits a given string\n  with separators that appear in either a given pattern or a given set\n  of strings, optionally including the text matching the separators in\n  its return value, and optionally limiting the number of matches to\n  a specified maximum.  (Ruoming Pang)\n\n- The new built-in to_string_literal() returns an escaped version of a string\n  suitable to feeding into Bro's parser.  For example, calling it on\n  \"foo\\nbar\" (where '\\n' is an embedded newline) returns \"foo\\x0abar\".\n  (Ruoming Pang)\n\n- subst_substring() has been renamed subst_string (Ruoming Pang).\n\n- unescape_URI() no longer takes the connection as an argument (Ruoming Pang).\n\n- config.guess and config.sub updated\n\n- String escape expansion has been refined (Ruoming Pang) and some bugs\n  fixed.  It now supports a format that's consistent with Bro string literals.\n\n- Scanning of octal and hex escape sequences now stops after 3 or 2\n  characters, respectively.  For example, \"\\0007\" now expands to a\n  NUL followed by the character '7'.  (Ruoming Pang)\n\n- Bug fixes for handling of bare <CR> and <LF>'s when <CRLF> expected\n  (Ruoming Pang), and associated \"weird\" events.\n\n- A bug in signature matching reassembly has been fixed (Robin Sommer).\n\n- A bug in reporting \"bad connection size\" for connection sizes > 2GB\n  has been fixed.\n\n- A bug in computing sizes for large partial connections has been fixed.\n\n- A bug in delayed generation of connection closed events has been fixed.\n\n- A framework has been added for compression of some \"weird\" events\n  to only be generated once-per-connection (Ruoming Pang).\n\n- Some of the \"weird\"'s generated by the HTTP analyzer have been regularized.\n\n- Some memory management fixes.\n\n- A performance problem in allocating List objects was fixed.\n\n- The copyright dates have been updated (Craig Leres).\n\n\n0.8a22 Wed Jan 15 16:47:18 PST 2003\n\n- There is now a \"conditional compilation\" feature similar to C's preprocessor\n  (contributed by Robin Sommer).  \"@if (expr)\" will include the remaining\n  input lines up to \"@endif\" only if the given expression evaluates to true.\n  \"@ifdef (id)\" will do so only if the given identifier has been defined,\n  and \"@ifndef (id)\" only if it has not been defined.  There's currently\n  no \"@else\" directive, and conditionals cannot be nested.  Both of these\n  will be added in the future.\n\n- New built-in functions (contributed by Ruoming Pang): parse_dotted_addr\n  takes a string in A1.A2.A3.A4 form an returns a corresponding \"addr\" value.\n  unescape_URI takes a URI that possibly has embedded escape sequences\n  (\"%61\" for 'a') and expands the sequences.\n\n- The URIs in HTTP requests are no longer automaticaly escaped.  Instead,\n  they need to be manually escaped using unescape_URI.  As this is likely\n  error-prone (users forgetting to do so), the plan is to change the\n  calling sequence of http_request in the near future so that *both* the\n  escaped and the unescaped URI are passed in.\n\n- A number of g++ 3.0 porting tweaks have been added (thanks to Sean Irvine).\n\n- The term \"rule\" has been systematically changed to \"signature\" (Robin Sommer).\n\n- The functionality of monitoring packet drops has been moved into its\n  own policy script, netstats.bro (Robin Sommer).\n\n- A number of rewriter and location bugs have been fixed.\n\n- Some missing HTTP \"weird\"'s have now been included in weird.bro.\n\n\n0.8a21 Thu Nov 28 23:31:38 PST 2002\n\n- A new mechanism will reorder packets within a window of packet_sort_window\n  if due to their sequence numbers they appear to be out of order.  This\n  can help a great deal when reading from multiple NICs.  (Contributed by\n  Ruoming Pang.)\n\n- A bug in regular-expression matching in which for example\n  \"2a1\" == /[0-9]+/ would evaluate as true was fixed (Ruoming Pang).\n\n- There's now a rewriter/anonymizer for FTP (Ruoming Pang).\n\n- The rewriter/transformation framework now supports a notion of\n  delaying transformation decisions until later (Ruoming Pang).\n\n- An incompatibility with bison 1.75 has been identified.  The problem\n  is that bison 1.75 generates incomplete location information for empty\n  grammar productions (those for which the RHS is empty).  This will\n  be fixed soon.\n\n- Some bugs in the signature engine have been fixed (Robin Sommer).\n\n- The sources no longer use the not-fully-portable hash_map template\n  (Umesh Shankar).\n\n- Some bugs with the debugger getting confused about source line number\n  locations, and also with the -t option, have been fixed (Umesh Shankar).\n\n- If a content gap occurs wholly inside an HTTP entity, then the analyzer\n  will skip over the entity and continue processing any subseqeuent HTTP\n  items, rather than giving up on processing the connection (Ruoming Pang).\n\n- The following new built-in functions have been contributed by\n  Ruoming Pang:\n\n\tfunction cat_string_array(a: string_array): string\n\tfunction split_all(str: string, re: pattern): string_array\n\tfunction strstr(big: string, little: string): count\n\tfunction subst_substring(s: string, from: string, to: string): string\n\tfunction int_to_count(n: int): count\n\tfunction fmt_ftp_port(a: addr, p: port): string\n\n\n0.8a20 Sun Nov 17 20:09:31 PST 2002\n\n- This is the first \"public\" Bro release (one accessible directly via\n  the Web).  The README has been correspondingly updated.\n\n- The user manual has been significantly expanded, and source for it is\n  now included in the release.\n\n- Some \"active mapping\" bug fixes (contributed by Umesh Shankar).\n\n- The configuration script now checks for the presence of the necessary\n  BIND libraries/headers, and also for bogus --enable options (contributed\n  by Craig Leres).\n\n- backdoor.bro now includes a tcpdump filter for detecting (some) KaZaA\n  traffic.\n\n- http-reply.bro now tracks the sizes of request/response entities.\n\n- http-request.bro now treats an URL accessing variants of /etc/netconfig\n  as sensitive.\n\n\n0.8a18 Sun Oct 27 15:28:23 PST 2002\n\n- Improvements to the performance of the SMTP analyzer (Ruoming Pang).\n  A new function, skip_smtp_data, skips over the content of an SMTP\n  message.\n\n- If you're doing trace rewriting and specify -w but don't specify -A,\n  then the rewritten traffic goes to the -w save file, along with the\n  usual non-transformed traffic (Ruoming Pang).  If a connection is\n  being transformed (which is specified by the new rewriting_smtp_trace\n  and rewriting_http_trace globals), then only its transformed packets\n  are written to the -w file; not the original packets.  This allows\n  a potentially large degree of trace compression.  There's also a\n  new variable omit_rewrite_place_holder, which directs that when rewriting\n  a trace, packets that are placeholders for now-missing packets (because\n  you've excised content) are *not* generated.  This diminishes the\n  timing fidelity of the transformed trace, but also can save a large\n  amount of space.\n\n- SMTP relay analysis is now standalone from regular SMTP analysis\n  (Ruoming Pang).\n\n- Some memory management and error propagation fixes (Ruoming Pang and\n  Vern Paxson).\n\n\n0.8a16 Wed Oct 23 23:48:40 PDT 2002\n\n- \"--enable-brov6\" was broken by some recent changes.  It now works again.\n\n- Some \"make distclean\" tweaks.\n\n- Error checking for \"redef enum\".\n\n\n0.8a15 Tue Oct 22 00:02:51 PDT 2002\n\n- Fixed Makefile bug which left out wide-spread dependencies on\n  event.bif.netvar_h.\n\n\n0.8a14 Mon Oct 21 01:16:46 PDT 2002\n\n- The \"add\" statement has been implemented.  This allows you to add\n  elements to sets.  A bunch of policy scripts that used to use\n  \"table [] of bool\"'s for this purpose have been modified to instead\n  use sets.\n\n- You can now extend the elements of an enum using \"redef enum foo += { ... }\"\n  where the additional names are listed in the braces (contributed by\n  Umesh Shankar).  A number of policy scripts have been tweaked to use\n  this for the (fairly) new Alert enum.  This allows you to create new\n  Alert's without alert.bro having to know about them.\n\n- Some bugs in identifying error locations have been fixed.\n\n- -A now supports anonymizing IP addresses (contributed by Ruoming Pang).\n  This includes four new functions: preserve_prefix, preserve_subnet, and\n  preserve_net (which direct that the corresponding prefix/net/subnet\n  not be anonymized) and anonymize_addr (which returns the anonymized\n  version of the given address.\n\n- Some bugs in HTTP -A have been fixed (thanks to Ruoming Pang).\n\n- The beginnings of support for CIDR prefixes has been added by\n  Ruoming Pang.\n\n- Porting tweaks (use of map's rather than hash_map's, courtesy of\n  Umesh Shankar; libedit comments fixed).\n\n- http-detail.bro has gone away.\n\n- Some more copyright and $Header -> $Id fixes.\n\n- There is now a function string_cat() which concatenates two strings\n  and returns the result (contributed by Ruoming Pang).  This function\n  is useful in place of the regular cat() because the latter will\n  expand escape sequences etc.  It probably shouldn't, and that may\n  change in the future.\n\n\n0.8a11 Sun Oct 13 10:53:07 PDT 2002\n\n- The framework for defining built-in functions has been extended\n  so it's also now the way to specify the interface to event handlers.\n  See event.bif.  (Contributed by Ruoming Pang)\n\n- A new policy script, http-abstract.bro, can be loaded when doing HTTP\n  transformation (via http-rewriter.bro), contributed by Ruoming Pang.\n  It trims HTTP text responses to the first \"http_abstract_max_length\" bytes.\n\n- A new built-in, skip_http_entity_data, specifies that the entity\n  associated with the current HTTP request/response should be skipped\n  (Ruoming Pang).\n\n- More changes have been made to the mechanisms for tracking source\n  file locations in order to pinpoint error messages.  If you encounter\n  problems, please let me know.\n\n- If you try to configure but your resolve library lacks res_mkquery(),\n  this is now a fatal error (Craig Leres).  Ideally, someone will modify\n  DNS_Mgr.cc to work even if only blocking DNS is available ...\n\n- In most (not all, yet) of the sources, the copyright notices have\n  been updated, $Header has been changed to $Id, and config.h is included\n  (Craig Leres).\n\n\n0.8a10 Tue Oct  8 16:05:42 PDT 2002\n\n- The way that Bro tracks the source-file location associated with\n  different objects has been tweaked, with a resulting savings of\n  about 10% in Bro's memory use and a smidgen of CPU time, too.\n\n- Built-in functions now are better about identifying source-file locations\n  associated with errors.\n\n- The http.$BRO_ID log file format has changed to no longer track\n  individual request streams.  (So it is now closer to how it used\n  to operate in 0.7.)\n\n- The autoconf setup has been tweaked so that you use:\n\n\t--enable-brov6              enable IPV6 processing\n\t--enable-activemapping      enable active mapping processing\n\t--enable-expire-dfa-states  enable DFA state expiration\n\n  rather than --with-XXX as was the case in 0.8a9.\n\n\n0.8a9 Mon Oct  7 10:15:12 PDT 2002\n\n- A bunch of configuration/autoconf/portability tweaks (Craig Leres).\n  These include compiling under Solaris.\n\n  When running ../configure, you can now specify:\n\n\t--with-brov6              enable IPV6 processing\n\t--with-activemapping      enable active mapping processing\n\t--with-expire-dfa-states  enable DFA state expiration\n\n  You no longer set these via editing the Makefile.\n\n- Some bugs with HTTP 1.0 keep-alive connections fixed (Ruoming Pang).\n\n- The \"hf\" suite of utilities is no longer distributed in aux/.  Instead,\n  get it directly from ftp://ftp.ee.lbl.gov/hf.tar.gz.\n\n- bro_logchk has been renamed bro-logchk.pl and is now distributed in aux/\n  (it was supposed to be before, but was inadvertantly left out of the list\n  of distribution files).\n\n\n0.8a7 Fri Oct  4 22:24:30 PDT 2002\n\n- HTTP reply analysis has been split into a number of policy script files:\n\n\thttp-body.bro\n\thttp-detail.bro\n\thttp-entity.bro\n\thttp-event.bro\n\thttp-header.bro\n\thttp-reply.bro\n\thttp-rewriter.bro\n\n  so you can readily trade off how detailed the HTTP processing is vs.\n  the CPU/memory it consumes (contributed by Ruoming Pang).\n\n- Bro now generates login_prompt events when the $TTYPROMPT environment\n  variable is passed during a login session, in order to detect the\n  recently publicized Solaris remote /bin/login exploit.\n\n- Ruoming Pang has extended the framework for defining \"rewriter\" functions\n  to now also serve as the way to define general built-in functions.\n\n- bro.init has been rearranged to have a more logical structure (courtesy\n  of Ruoming Pang).\n\n- Craig Leres contributed a number of portability & autoconf tweaks.\n\n- Craig Leres has extended nb_dns.{h,c} to support IPv6 DNS lookups.\n  Bro does not yet take advantage of these extensions.\n\n- The beginnings of portability to gcc 3.2 were added.  There unfortunately\n  is more work to do here!\n\n- The README has finally been updated to have more correspondence with\n  the 0.8 release.\n\n\n0.8a6 Wed Oct  2 18:58:12 PDT 2002\n\n- Upgrade to autoconf 2.53 (Craig Leres).\n\n\n0.8a5 Tue Oct  1 19:04:53 PDT 2002\n\n- The regular expression matcher how has a mechanism to stop scanning when\n  no further match is possible (Robin Sommer).  If you find problems with\n  regular expression matching, especially if you're using EXPIRE_DFA_STATES,\n  please let us know!\n\n- Rule/signature files are now searched for using $BROPATH (Robin Sommer).\n  In addition, you can define a list of signature files to incorporate\n  using the new global \"signature_files\".  For example,\n\n\tredef signature_files += \"web-stuff\"\n\n  will look for web-stuff and web-stuff.sig along $BROPATH.\n\n- The tcp_deliver_undelivered variable is now tcp_match_undelivered and\n  only applies to delivering otherwise-undelivered data to the signature\n  matcher; such data is *not* delivered to any associated analyzer.\n  (Robin Sommer)\n\n- The framework for tracking version numbers now allows negative as\n  well as positive versions (Robin Sommer).\n\n\n0.8a4 Tue Oct  1 15:54:58 PDT 2002\n\n- Support for extracting the contents of HTTP replies (and POST's),\n  and for transforming/anonymizing HTTP traffic, contributed by Ruoming Pang.\n\n- Some minor internal tweaks to the timer management to help track patterns\n  of timer expiration.\n\n\n0.8a3 Mon Sep 23 22:48:07 PDT 2002\n\n- HTTP reply handling refined in policy scripts.\n\n- New built-in functions to_int(), to_count() convert strings to\n  integers/counts.\n\n- Bug fixes for DNS_Mgr and IPv6.\n\n- AckAboveHole alerts now ignored (just written to alert.$BRO_ID) by default.\n\n- Packets belong to ignored connections (for example, partial connections if\n  partial_connection_ok is false) are no longer recorded to the save file.\n\n- Some minor formatting/naming tweaks.\n\n\n0.8a1 Sat Sep 21 22:09:23 PDT 2002\n\n- IPv6 support enabled if you build using -DBROv6.  Deficiencies: Bro\n  doesn't yet look up hostnames for AAAA records; no handling of extension\n  headers (if you have traces of these, please send them to me!); no\n  handling of FTP PORT/PASV w/ IPv6 addresses (again, if you have traces,\n  please send them!); DNS analyzer doesn't understand AAAA yet (again,\n  please send me traces!); you have to change the capture_filter line\n  in tcp.bro (as indicated in the script) in order to process TCP traffic,\n  due to deficiencies in libpcap's support for IPv6.\n\n- Bro is migrating towards a more structured way of handling log messages /\n  alerts.  Analyzers now @load alert.bro, which has a function ALERT()\n  for processing alerts.  Soon this function will provide a variety of\n  filtering/processing hooks; expect changes.\n\n- Bro now has an HTTP response analyzer (contributed by Ruoming Pang).\n  The HTTP policy scripts have been split up into http.bro (just general\n  definitions), http-request.bro (handles requests; loaded by http.bro),\n  http-reply.bro (handles replies; you need to explicitly load this), and\n  http-detail.bro (handles individual headers).  http-reply.bro will be\n  undergoing some significant reworking in the near future; probably the\n  scripts will be merged back into a single http.bro plus http-detail.bro.\n\n- ssl-worm.bro contains a prototype policy script for detecting the\n  Scalper SSL worm (contributed by Robin Sommer).  It uses the signature\n  file sig.ex.ssl-worm.bro.  If someone has traces of Scalper in action\n  to send us, that would be great.\n\n- A new policy script, contents.bro, extracts the contents of each\n  Bro connection into its own pair of files (one file for each\n  direction).  Use in conjunction with -f or discarder_XXX() to\n  extract specific connections.\n\n- A new built-in function, strcmp(), returns the usual comparison between\n  two strings (contributed by Robin Sommer).\n\n- A new event, content_gap(), is generated when Bro detects that it is\n  forced to skip over data in a reconstructed TCP stream because it is\n  missing from the packet input.\n\n- BIND8 is no longer included with the distribution.  If this causes you\n  problems, let me know.\n\n- aux/scripts/bro_logchk is a Perl script for parsing Bro HTTP & FTP logs\n  (contributed by Jim Barlow).\n\n- You can now compare addresses to see which is larger.  a < b means\n  that in network order, the octets making up 'a' are ordered before\n  those for 'b'.  E.g., 128.2.3.4 < 128.2.3.5 < 129.0.0.1.  Note that\n  IPv4 addresses are all < IPv6 addresses (other than IPv4 addresses\n  that are embedded in IPv6 addresses, e.g., ::128.2.3.4 < 128.2.3.5).\n\n- Serious bug in TCP option handling fixed.\n\n- Some bugs in CRLF handling fixed (courtesy Ruoming Pang).\n\n- Bug in the implementation of &optional fixed.\n\n- Bug in computing memory statistics when not reading packets (from\n  an interface or the trace file) fixed.\n\n- You can now include a trailing comma after the last item in an\n  \"enum\" enumeration list.\n\n- port-name.bro now maps 389/tcp to \"ldap\".\n\n- A bug has been fixed in loading files multiple times\n\n\nv0.7a175 Thu Aug 29 21:14:34 PDT 2002\n\n- bro -s <file> reads in a *signature* file to search for regular expressions\n  in packet payloads or TCP byte streams (written by Robin Sommer).\n  See policy/rules.bro for an example of a policy script for processing\n  the matches.\n\n  Note that this feature is experimental, and will be evolving in the\n  near future.\n\n- The python script \"snort2bro\" reads in Snort signatures and translates\n  them into Bro signature rules, suitable for processing using -s.\n\n  An example of its operation is seen by running\n\n\tpython snort2bro < sig.ex.web-rules.snort\n\n  which, after reading in sig.ex.classification.config and\n  sig.ex.reference.config, generates the output given in\n  sig.ex.web-rules.bro, which is suitable to use as input to\n  bro -s.\n\n- bro -d invokes a gdb-like debugger (written by Umesh Shankar).  You can\n  set breakpoints and watchpoints, examine tracebacks, print Bro expressions,\n  and the like.  Type \"help\" for on-line help.\n\n- bro -t <tracefile> turns on tracing of the policy script execution,\n  written to the given file.\n\n- Bro now includes an SMTP analyzer, which includes processing MIME\n  message bodies (written by Ruoming Pang).  See smtp.bro and mime.bro\n  for related policy scripts.  smtp.bro includes several experimental\n  techniques for detecting mail relaying.\n\n- You can now define enumerated types, such as\n\n\ttype scanner_type: enum {\n\t\tSCANNER_STEALTH, SCANNER_HIGH_SPEED, SCANNER_AMBIGUOUS,\n\t};\n\n  Enumerated types can be compared for equality with one another, and used\n  as table indices, but cannot be converted to/from integers.\n\n- bro -A <file> invokes an experimental, general trace transformation/\n  anonymization framework (written by Ruoming Pang) which writes a modified\n  tcpdump trace file from the input (which can be the network or another\n  trace file) with potentially extensive modifications to the recorded\n  packets.\n\n  Transformers are built from .rw files (currently, {finger,ftp,ident,smtp}.rw),\n  which are processed by the utility \"rwcl\" to generate both event engine\n  analyzer components and rewriter policy scripts (for example, after\n  configuring and building Bro, you'll find the scripts\n  policy/{finger,ftp,ident,smtp}.rw.bro).\n\n  See policy/smtp-rewriter.bro for an example of a policy script that\n  performs transformation/anonymization.\n\n- New built-ins:\n\n\tsplit(s: string, p: pattern): string_array;\n\n\t  takes a string and splits it into pieces at each occurrence of\n\t  the regular expression pattern p.  (The functionality is like\n\t  that in awk.)  It returns a string_array, which is a table[count]\n\t  of string that is indexed starting at 1, giving the different\n\t  pieces.\n\n\t  For example,\n\n\t\tsplit(\"foobar\", /o/)\n\n\t  returns a 3-element table, for which [1] is the string \"f\",\n\t  [2] is the string \"\" (empty), and [3] is the string \"bar\".\n\n\tsplit1(s: string, p: pattern): string_array;\n\n\t  split1() does the same thing as split(), but only performs splitting\n\t  at the first occurrence, so it returns either a one-element table\n\t  (if the pattern doesn't appear in the string) or a two-element\n\t  table.  split1(\"foobar\", /o/) returns a 2-element table for which\n\t  [1] is \"f\" and [2] is \"obar\".\n\n\tmd5_hash(s: string): string\n\n\t  returns (in human-readable form) the MD5 hash of a given string.\n\n\t  So, for example,\n\n\t\tmd5_hash(\"foobar\")\n\n\t  yields \"3858f62230ac3c915f300c664312c63f\".\n\n\tto_addr(s: string): addr\n\n\t  takes a string representing an address in \"dotted quad\" format\n\t  and returns the correponding \"addr\" value.\n\n\tset_buf(f: file, buffered: bool)\n\n\t  sets the given file to have its writes buffered or unbuffered\n\t  depending on the value of \"buffered\".  It does not return a value.\n\n\tconnection_exists: function(c: conn_id): bool\n\n\t  returns T if the given connection identifier corresponds to a\n\t  currently instantiated connection (one for which the event engine\n\t  has state), F otherwise.\n\n\tlookup_connection(c: conn_id): connection\n\n\t  returns the \"connection\" record associated with the given\n\t  connection identifier, or a fatal run-time error if there\n\t  isn't one.\n\n\tset_inactivity_timeout(c: conn_id, timeout: interval): interval\n\n\t  sets the inactivity timeout for the given connection to the\n\t  given interval, returning the old interval.\n\n\t  If the interval is non-zero, then when no packets have been\n\t  processed for a connection after that much time has elapsed,\n\t  the connection is deleted, and an \"inactivity_timeout\" event\n\t  generated.\n\n\tget_matcher_stats(): matcher_stats\n\n\t  used for gathering statistics about the signature matcher\n\n\trewriting_trace(): bool\n\n\t  returns T if -A was specified (anonymize/rewrite a trace),\n\t  F otherwise.\n\n- New events:\n\n\tconnection_state_remove(c: connection);\n\n\t  Invoked when the event engine has removed the connection from\n\t  its state.\n\n\tconnection_SYN_packet(c: connection, pkt: SYN_packet);\n\n\t  Invoked for each SYN/SYN-ACK packet.\n\n\tconnection_timeout(c: connection);\n\n\t  Invoked when the event engine times out a connection - for\n\t  example, because the originator sent a SYN that was never\n\t  answered, so the connection was never established.\n\n\tconnection_reused: event(c: connection);\n\n\t  Invoked when the event engine decides that a new SYN for\n\t  an existing connection reflects a reuse of the connection\n\t  four-tuple, rather than belonging to the existing connection.\n\n- New globals:\n\n\tconst ignore_checksums = F &redef;\n\n\t  If true, then the event engine does not verify checksums (and\n\t  hence will not discard packets with bad checksums).\n\n\tconst tcp_deliver_undelivered = F &redef;\n\n\t  If true, then when the event engine closes a connection, if\n\t  that connection has a chunk of data not yet delivered to its\n\t  analyzer (which only happens if the data is above a sequence\n\t  hole, indicating either a packet filter glitch or a protocol\n\t  botch), then the undelivered data will at that point be delivered\n\t  to the connection's analyzer.\n\n\tconst tcp_reassembler_ports_orig: set[port] = {} &redef;\n\tconst tcp_reassembler_ports_resp: set[port] = {} &redef;\n\n\t  Sets of ports for which, if a connection has the corresponding\n\t  originator/responder port, then the event engine will reassemble\n\t  the byte stream of the connection.\n\n\t  Normally, the event engine reassembles byte streams for any\n\t  connection for which there's an analyzer, and otherwise doesn't.\n\t  These variables can be used to force reassembly for the originator\n\t  or responder side (respectively) of connections for which there\n\t  isn't otherwise an analyzer.  This is useful when doing signature\n\t  matching on reassembled byte streams, for protocols that are\n\t  not otherwise analyzed by the event engine.\n\n\tconst table_expire_interval = 1 min &redef;\n\n\t  How often to check table entries to see whether they've expired\n\t  (see &read_expire, etc., below).\n\n\tconst requires_trace_commitment = F;\n\n\t  If true, then when rewriting/anonymizing traces, nothing will\n\t  actually be written to the edited trace file unless you call:\n\n\t\trewrite_commit_trace(c: connection, commit: bool, future: bool)\n\n\t  If \"future\" is true, then future rewritten packets will be\n\t  automatically commited; otherwise, writing them to the trace\n\t  file requires another explicit rewrite_commit_trace() call.\n\n\tconst inactivity_timeout = 0 secs &redef;\n\n\t  As noted above, when a connection becomes inactive, time it out\n\t  after this interval.  If 0 secs, then don't time it out.\n\n- An SSH analyzer extracts SSH client/server version information.  See\n  ssh.bro for the related policy script.\n\n- There's now a (very) simple TFTP analyzer available in tftp.bro.\n\n- You can now set the global \"frag_timeout\" to an interval which controls\n  how long fragments are kept before discarding them (contributed by Ashley\n  Thomas).  If you don't set the global, or set it to 0.0 sec, then fragments\n  are kept around indefinitely.\n\n- An implementation of an experimental anti-evasion technique, \"active\n  mapping\", has been written by Umesh Shankar.  It is not yet ready for\n  general use, and isn't compiled in unless -DACTIVE_MAPPING.\n\n- Four new attributes can now be associated with tables (implemented\n  by Robin Sommer): &read_expire, &write_expire, and &create_expire\n  will delete table entries after a given interval has elapsed since\n  the table entry was last read, written, or created.  For example:\n\n\tglobal a: table[addr] of count &default=0 &create_expire = 5 sec;\n\n  will delete each entry added to it 5 seconds after the entry was added,\n  regardless of subsequent read/write activity to the element.\n\n  &expire_func allows you to associate a function with the table such that\n  whenever an entry expires, the function is invoked.  It's passed the\n  value of the table entry (not the index - perhaps this should be changed),\n  and returns an \"interval\" value.  If the interval is <= 0.0 seconds, then\n  the table entry is immediately deleted.  Otherwise, it is deleted after\n  the given interval has elapsed.\n\n- When listing multiple attributes, you no longer separate them with\n  commas.  For example, if you used to have:\n\n\tglobal a: table[string] of count &default=0, &redef;\n\n  you now need to use:\n\n\tglobal a: table[string] of count &default=0 &redef;\n\n- You can now construct records using\n\n\t[$field1 = <expression>, $field2 = <expression>, ...]\n\n  Such record values can be assigned to other records providing that the\n  target value's type includes all of the fields (same name and type)\n  present in the record value, and that any missing fields have the\n  &optional or &default attribute (see next item).\n\n  You can also include a record value inside the record constructor, and\n  all of its fields will be included in the constructed record value.\n\n- Record fields can now be annotated with &optional, to indicate\n  that the field needn't be present, or &default, which indicates\n  a default value to provide if the field is missing.\n\n- You can query as to whether a record has a value for a given field\n  using the new \"?$\" operator.  So for example:\n\n\ttype my_rec: record {\n\t\tnum: count &default = 0;\n\t\tmsg: string;\t# mandatory, since no &optional/&default\n\t};\n\n\tglobal r: my_rec;\n\n\tr = [$msg = \"hello\"];\n\n\tprint r?$num, r?$msg, r$num;\n\n  will print \"F, T, 0,\" because even though 'r' has a default value\n  for $num (which shows up when printing r$num), that field is missing,\n  hence r?$num is F.\n\n- An experimental scheme has been added (by Umesh Shankar) for managing\n  general attributes associated either with all values (\"global attributes\")\n  or particular particular values.  This scheme is likely to change in\n  the near future, and hence isn't explained here further.\n\n- The DNS analysis now includes ADDL and AUTH records, and much richer\n  policy script analysis (per policy/dns.bro).\n\n- You can now \"redef\" a function or event handler to override its\n  previous definition.  For a function, this looks like:\n\n\tredef log_hook = function(msg: string): bool\n\t\t{\n\t\t...\n\t\t}\n\n  For an event handler, it's just the usual definition preceded by \"redef.\n  For example,\n\n\tredef event ack_above_hole(c: connection) { }\n\n  would replace the default ack_above_hole handler with one that does nothing.\n\n- HTTP server and HTTP proxy backdoor detectors have been added,\n  generating http_signature_found and http_proxy_signature_found,\n  respectively (contributed by Ruoming Pang).\n\n- A KaZaA backdoor detector has been added, which generates\n  kazaa_signature_found for likely KaZaA connections.\n\n- The new policy scripts flag-irc.bro and flag-warez.bro provide\n  hooks for defining site policies for detecting IRC and access\n  to warez.\n\n- portmapper.bro now tracks the services it sees, and the names are\n  used in connection summaries rather than generic services like port-656.\n\n- bro -C (or redef'ing the \"ignore_checksums\" global to T) instructs\n  Bro to ignore any checksum errors and go ahead and analyze such packets.\n\n- The (trivial) policy script print-globals.bro dumps out all of the policy\n  script global variables and the amount of memory they consume.\n\n- The policy script code-red.bro has been renamed worm.bro and generalized\n  to detect Nimda as well as Code Red 1 & 2.\n\n- A bunch of additional default sensitive URIs have been added to http.bro.\n  http.bro also now doesn't report worm-related URIs.\n\n- A bunch of less common portnames were removed from port-names.bro.\n\n- Empty regular expressions are now allowed.\n\n- The finger_request event now has a third parameter, the additional\n  text after the username.\n\n- More systematic handling of NULs and CRLF by the event engine.\n\n- Hex escape sequences now must have exactly two hexadecimal characters.\n\n- FYI - work has begun on significantly altering the way that policy\n  scripts generate alerts.\n\n- Work has begun (by Robin Sommer) on a general framework for tracking\n  client/server versions.  See software.bro.\n\n- Work has begun on a NETBIOS analyzer (see NetbiosSSN.cc).  Contributions\n  (e.g., finishing it :-) welcome.\n\n- Work has begun on migrating the internals to process IPv6 in addition\n  to IPv4.\n\n- A number of bug fixes, leaks, and memory allocation lint tweaks.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a90 Thu Sep 06 00:50:43 PDT 2001\n\n- Better state management, especially for use in high-volume sites.  There\n  are now a number of ways to track the resources consumed by Bro while it\n  runs, and to reduce the amount of memory Bro consumes.  Adding\n\n\t@load print-resources\n\n  will log a summary of the resources consumed by Bro when it exits, and\n\n\t@load reduce-memory\n\n  will change a number of default values in order to significantly diminish\n  the amount of memory Bro requires.\n\n  Other ways to lower the required memory discussed in the next three items.\n\n- The global \"maintain_http_sessions\" now controls whether http.bro tracks\n  multiple HTTP connections between the same hosts as a single HTTP session.\n  Doing so costs a considerable amount of state (so set to F for reducing\n  the memory impact of HTTP analysis).\n\n- The global \"suppress_scan_checks\", if true, turns off address and port\n  scan detection.  (You can't achieve this by simply not @load'ing scan.bro,\n  because it's loaded by some of the default policy scripts.)  Turning it\n  off can save a lot of memory.\n\n- Note, the ident.bro is also expensive in terms of state-holding.\n\n- New library functions:\n\n\t- resource_usage() returns a record detailing real time,\n\t  CPU time, memory, other getrusage info, and the current\n\t  and maximum number of TCP/UDP/ICMP connections, and\n\t  timers and fragments.\n\n\t- val_size() returns the size in bytes needed to represent\n\t  a given value (which can be a record, a table, or a\n\t  simple constant, for example).  It's not fully accurate\n\t  but is in the right ballpark.\n\n\t- global_sizes() return a table mapping every global\n\t  variable to its size (per val_size()).  Useful for\n\t  tracking which ones are growing large over time.\n\n- You can now control a number of timers related to Bro's connection\n  management.  Setting them to lower values generally decreases the\n  amount of state Bro has to keep (see reduce-memory.bro), though\n  this can also make it easier for an attacker to evade detection:\n\n\ttcp_SYN_timeout: interval\n\t\tControls how long Bro waits after seeing the\n\t\tbeginning of a connection (whether due to a SYN\n\t\tor not; the timer is misnamed) before checking\n\t\twhether it elicited any reply.\n\n\ttcp_session_timer: interval\n\t\tAfter a connection has closed, wait this long for\n\t\tfurther activity before checking whether to time\n\t\tout its state.\n\n\ttcp_connection_linger: interval\n\t\tWhen checking a closed connection for further\n\t\tactivity, Bro should consider it inactive if there\n\t\thasn't been any for this long.  It also complains\n\t\tif the connection is reused before this much time\n\t\thas elapsed.\n\n\ttcp_attempt_delay: interval\n\t\tBro waits this long upon seeing an initial SYN\n\t\tbefore timing out the connection attempt.\n\n\ttcp_close_delay: interval\n\t\tUpon seeing a normal connection close, Bro flushes\n\t\tstate after this much time.\n\n\ttcp_reset_delay: interval\n\t\tUpon seeing a RST, Bro flushes state after this\n\t\tmuch time.\n\n\ttcp_partial_close_delay: interval\n\t\tBro generates a connection_partial_close event this\n\t\tmuch time after one half of a partial connection\n\t\tcloses, assuming there has been no subsequent\n\t\tactivity.\n\n\tnon_analyzed_lifetime: interval\n\t\tIf a connection belongs to an application that you\n\t\taren't analyzing, Bro times it out after this\n\t\tinterval.  If 0 secs (default), then it doesn't\n\t\ttime it out.\n\n\tdns_session_timeout: interval\n\tntp_session_timeout: interval\n\trpc_timeout: interval\n\t\tBro waits this long before timing out a DNS/NTP/RPC\n\t\trequest.\n\n\tmax_timer_expires: count\n\t\tThe maximum number of timers to expire after\n\t\tprocessing each new packet.  The value trades off\n\t\tspreading out the timer expiration load with\n\t\tpossibly having to hold state longer.  A value of 0\n\t\tmeans \"process all expired timers with each new\n\t\tpacket\".\n\n- Two new flags control other facets of Bro's connection management,\n  and thus state-holding:\n\n\tpartial_connection_ok: bool\n\t\tWhether Bro should analyze connections for which\n\t\tit doesn't see the beginning, only the middle.\n\t\tThis can be very expensive to do in the face of\n\t\tstealth-scanning, which looks like a bunch of\n\t\tpartial connections.\n\n\t\tNote, the HTTP analyzer has been modified to\n\t\tnow always skip partial connections.  This should\n\t\tinstead be user controllable.\n\n\ttcp_SYN_ack_ok: bool\n\t\tIf true, Bro instantiates connection state when\n\t\tit sees a SYN ack but not the initial SYN (even\n\t\tif partial_connection_ok is false).  The intent\n\t\tbehind this knob (which is not well tested) is\n\t\tto allow you to filter out initial SYNs and only\n\t\treact to SYN acks.  This keeps Bro from holding\n\t\tstate during SYN scans and SYN flooding, except\n\t\tfor when the destination responds.\n\n- Some other miscellaneous thresholds that you can now modify from your\n  policy script:\n\n\theartbeat_interval: count\n\t\tHow often to generate net_stats_update() events.\n\t\tThis timer really isn't needed any more, since\n\t\tyou can use \"schedule\" to achieve the same effect.\n\n\ttcp_storm_thresh: count\n\t\tIf Bro sees this many FINs/RSTs in a row, it\n\t\tflags them as a \"storm\".\n\n\ttcp_storm_interarrival_thresh: interval\n\t\tThe FINs/RSTs must come with this much time or less\n\t\tbetween them.\n\n- The state management for line-oriented applications like HTTP requests\n  has been improved.\n\n- The HTTP analyzer now expands %hex sequences.  If anyone has a Unicode\n  expander to contribute, that'd be terrific.\n\n- The Code Red detection is more robust (fewer false positives).\n\n- A new redefinable variable, skip_services, lists applications that should\n  not be analyzed for purposes of detecting scans.  (Default:  ident)\n  The point of having this (poorly named) hook is so that code-red.bro\n  can add \"http\" to it, to avoid reporting the zillions of Code Red scans\n  that a site can see.\n\n- Bro now matches regular expressions using lazy DFA evaluation.  The upshot\n  of this is (1) it no longer maintains .bro-RE-cache.v1, (2) it starts\n  up fast regardless of whether you've added new regular expressions, (3)\n  you can afford to add lots of regular expressions, and (4) it's actually\n  a bit faster.\n\n- The list of \"hot_ids\" has been expanded with a number of other common\n  root-privileged accounts.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a61 Fri Apr 06 14:51:47 PDT 2001\n\n- An NTP analyzer has been added.  See policy/ntp.bro for a corresponding\n  policy file that detects the newly discovered NTP remote buffer overflow\n  attack.\n\n- example-attacks/ is a new directory that contains trace files of attacks.\n  Currently, there are just two to play with:\n\n\tbro -r example-attacks/ftp-site-exec.trace mt\n\n  will run on a trace of a \"site exec\" overflow attack, and\n\n\tbro -r example-attacks/ntp-attack.trace mt ntp\n\n  will run on an example of the NTP overflow.\n\n- The doc/ directory includes the postscript and HTML versions of the\n  first draft of the Bro manual.\n\n- A new policy file, icmp.bro, has preliminary (and only partially developed)\n  policy for analyzing ICMP.\n\n- The file libpcap.bufsize.patch includes the patch necessary on some systems\n  to increase the maximum libpcap buffer size.\n\n- You can now use anonymous functions in &default expressions, so for\n  example you can do:\n\n\tglobal foo: table[count] of string = {\n\t\t[1] = \"1st\", [2] = \"2nd\", [3] = \"3rd\",\n\t} &default = function(n: count): string { return fmt(\"%dth\", n); };\n\n  and then referring to foo[5] will yield \"5th\".\n\n- There's now a \"for\" statement to iterate over the indices of a table\n  or the members of a set:\n\n\tfor ( i in foo )\n\n  for the above \"foo\" will iterate with i assigned to 1, 2, and 3; *but\n  not in general in that order*.\n\n- The function contains_string() has been removed, and now you can instead\n  use an expression like\n\n\t\"bar\" in \"foobar\"\n\n  which will yield T.\n\n- The scan detection now has a mechanism for attempting to detect SYN flooding\n  backscatter and flagging it as different from a stealth scan.\n\n- New event handlers:\n\n\tnew_connection_contents()\n\t\tlike new_connection(), but reassembles the\n\t\tstream so you can use set_content_files() to\n\t\twrite it to a file\n\n\tudp_session_done()\n\t\tinvoked when a UDP session (which is defined on\n\t\ta per-protocol basis; currently only for NTP)\n\t\tfinishes.\n\n\tntp_message()\n\t\tinvoked for each NTP message\n\n- UDP processing now does accounting for detecting scans.\n\n- UDP processing now tracks numbers of requests/replies for sessions that\n  support that notion.  The connections are annotated by udp_session_done()\n  with \"[m,n]\" for \"m\" requests and \"n\" replies, providing either m or n > 1.\n\n- New variable accessible from policy:\n\n\twatchdog_interval\n\t\thow often the watchdog should check for whether\n\t\tBro is making internal progress\n\n- A bunch of functions no longer have a first argument of the current time;\n  get it instead from network_time() if you need it:\n\n\tauthentication_accepted\n\tauthentication_rejected\n\tconn_weird\n\tconn_weird_addl\n\tflow_weird\n\tnet_weird\n\n- A bunch of functions now return bool rather than int values:\n\n\tset_contents_file\n\tset_login_state\n\tset_record_packets\n\tskip_further_processing\n\n- The variable \"hot_dests\" has been renamed to \"hot_dsts\".\n\n- 111/tcp is now identified as \"portmap\" rather than \"rpc\".\n\n- Connections flagged as hot for some types of characteristics are now\n  annotated with the reason associated with the decision.  (I think a lot\n  more of this is needed.)\n\n- Portmapper dumps are annotated with the results of the mapping.  This\n  will be streamlined in the future.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.7a48 Wed Sep 13 14:37:30 PDT 2000\n\n- Changes between this release and v0.6 missing :-(\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.6 Wed Jul 21 17:02:50 PDT 1999\n\n- Support for regular expressions added.  You specify lex-style regular\n  expressions between '/'s, for example \"/\\/etc\\/(passwd|shadow)/\" has\n  the type \"pattern\" and matches /etc/passwd or /etc/shadow (the slashes\n  in the pattern need to be escaped or else they'd delimit the end of the\n  pattern).  Pattern-matching is via the \"in\" operator, so for example:\n\n\tif ( filename in /\\/etc\\/(passwd|shadow)/ )\n\t\tsensitive_file_access(filename);\n\n  or\n\n\tconst sensitive_files = /\\/etc\\/(passwd|shadow)/;\n\n\t...\n\n\tif ( filename in sensitive_files )\n\t\tsensitive_file_access(filename);\n\n  Presently the \"in\" operator requires that the entire left-hand side\n  be matched by the pattern.  So, for example, if you want to find the\n  string \"eggdrop\" anywhere inside the string \"line\", you would use\n\n\tif ( line in /.*eggdrop.*/ )\n\n  If you leave off either of the .*'s, then eggdrop will only be matched\n  at the beginning or end of the line.\n\n  In the future, there will be mechanisms for specifying whether you\n  want to match anywhere in a line, or anchored; accordingly, *the above\n  syntax is subject to change*.\n\n  Bro compiles regular expressions into DFAs for fast matching.  This can take\n  quite a bit of time for complicated patterns.  Consequently, it maintains a\n  cache of compiled regular expressions in $HOME/.bro-RE-cache-v1.  You can\n  always safely remove this file; Bro will recreate/repopulate it as needed.\n  It does not clean up unused entries from it, so if you change your patterns\n  frequently, you will accumulated lots of old ones and should delete the\n  file to garbage collect them.\n\n- An rlogin analysis module has been added and the telnet analysis\n  generalized to generic \"login\" analysis, with the following events:\n\n\tlogin_failure(c: connection, user: string, client_user: string,\n\t\t\tpassword: string, line: string)\n\t\tGenerated on a failed attempt to log in.  client_user is\n\t\tthe remote user name, if the login is via the rlogin\n\t\tprotocol.\n\tlogin_success(c: connection, user: string, client_user: string,\n\t\t\t\t\tpassword: string, line: string)\n\t\tGenerated on a successful attempt to log in.\n\n\tlogin_input_line(c: connection, line: string)\n\t\tGenerated per line of input typed by the user.\n\tlogin_output_line(c: connection, line: string)\n\t\tGenerated per line of output generated by the server.\n\n\tlogin_confused(c: connection, msg: string, line: string)\n\t\tGenerated when a login dialog confuses the heuristic\n\t\tanalyzer.  msg is a tag for the state mismatch that\n\t\twas unexpected, line is the corresponding dialog text.\n\n\tlogin_confused_text(c: connection, line: string)\n\t\tOnce a connection is in the confused state, then this\n\t\tis generated for each subsequent line.\n\n\tlogin_terminal(c: connection, terminal: string)\n\t\tGenerated if the terminal type associated with the\n\t\tconnection is seen.\n\n\tlogin_display(c: connection, display: string)\n\t\tGenerated if the display associated with the connection\n\t\tis seen.\n\n\texcessive_line(c: connection)\n\t\tGenerated when the connection has produced an excessively\n\t\tlong line.\n\n  login_input_line() and login_output_line() are very powerful for\n  detecting intrusions, when coupled with regular-expression matching.\n\n  login_terminal() is used to detect backdoors that are triggered\n  by the terminal environment variable.\n\n- An ident analysis module has been added (port 113).  It generates\n  ident_request, ident_reply, and ident_error events.  Port 113 used\n  to be referred to as \"auth\"; now it's referred to as \"ident\".\n\n- A new type of scan detection has been added, which is triggered\n  by a remote host trying a large number of username/password\n  combinations.  See the account_tried() function in scan.bro.\n\n- The default search path for .bro files is now\n\n\t  .:priv-policy:policy:pub-policy:/usr/local/lib/bro\n\n  where priv-policy/ is intended for private policy and pub-policy/\n  for public policy.  The Bro alpha distribution ships with a\n  sample set of pub-policy scripts.\n\n- New built-ins:\n\n\tsystem(s: string): int\n\t\texecutes the given shell command using system()\n\t\tand returns its status.\n\n\tset_contents_file(c: conn_id, direction: count, f: file)\n\t\tcopies connection c's reassembled byte stream in\n\t\teither the originator-to-responder direction (if\n\t\tdirection is CONTENTS_ORIG) or the responder-to-\n\t\toriginator direction (CONTENTS_RESP) to the file f.\n\n\treading_live_traffic(): bool\n\t\treturns true if Bro is running on live traffic (read\n\t\tfrom a network interface), false if it's reading from\n\t\ta save file.\n\n\tmkdir(f: string): bool\n\t\tcreates the given directory, returning true if it\n\t\twas able to, false if not.\n\n\tget_orig_seq(c: conn_id): count;\n\t\treturns the highest sequence number sent by the\n\t\toriginator of connection c.\n\tget_resp_seq(c: conn_id): count;\n\t\tsame for c's responder.\n\n- Additional new events (other than those related to the new analyzers):\n\n\tnew_connection(c: connection)\n\t\tis generated whenever a new connection is seen.\n\n\tpartial_connection(c: connection)\n\t\tis generated whenever a new partial connection (one\n\t\tthat doesn't begin with a SYN handshake) is seen.\n\n\tpm_bad_port(r: connection, bad_p: count)\n\t\tis generated when a portmapper response contains\n\t\ta bad port number.\n\n- Functions, tables and sets can now be assigned.  Assignment is\n  made by reference to the underlying object.\n\n- Bro no longer looks up identifiers using getservbyname() to see if they\n  should be interpreted as port numbers, since this led to portability\n  problems.  Instead, a number of constants are defined in bro.init:\n  bgp, domain, finger, ftp, gopher, http, ident, rlogin, smtp, ssh and telnet,\n\n- Bro now supports an arbitrary number of open files (not bound by\n  the system's limit on file descriptors).\n\n- There's now a finger_reply event to go with finger_request.\n\n- A bunch more RPC service names have been added, thanks to Job de Haas\n  and others.\n\n- A bug has been fixed in the watchdog handling that caused it to\n  sometimes expire after a period of network inactivity.\n\n- The Bro paper in doc/ has been revised (it isn't quite up-to-date,\n  but considerably closer than the USENIX version).\n\n- There has been a large amount of reworking of the internals, both\n  to Bro itself and in the policy scripts.  If you find something you're\n  wondering about, feel free to send me mail asking about it.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.5 Sun Oct  4 00:19:35 PDT 1998\n\n- Added Linux support.\n\n- Major autoconf changes.\n\n- Some tweaks to suppress g++ warnings.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.4 Fri Sep 11 00:08:04 PDT 1998\n\n- The new aux/ directory has some utility programs and scripts.\n  See aux/README for details.\n\n- Documentation (though exceedingly limited) describing the connection\n  log summaries generated by policy/tcp.bro now available in doc/conn-logs.\n\n- The Telnet username recognition code has been heavily reworked and is\n  now significantly more robust.\n\n- A new policy file, policy/scan.bro, detects port and address scanning.\n\n- Bro now detects the \"Land\" attack (a trivial addition to its spoof\n  detection).\n\n- The distribution now comes with BIND 8.1.2.\n\n- A new flavor of \"weird\" event has been added, flow_weird, for unusual\n  events associated with <src IP addr, dst IP addr> flows (i.e., a coarser\n  granularity than TCP or UDP connections).\n\n- Bro now reassembles fragments, checking for overlaps and consistency.\n  Associated with fragments are the following flow_weird's:\n\n\texcessively_large_fragment\n\texcessively_small_fragment\n\tfragment_inconsistency\n\tfragment_overlap\n\tfragment_protocol_inconsistency\n\tfragment_size_inconsistency\n\tfragment_with_DF\n\tincompletely_captured_fragment\n\n- The TCP stream reassembly code was rewritten to share functionality\n  with the new fragment reassembly code.\n\n- If a handler for it is present, then Bro will generate \"packet_contents\"\n  events containing the contents of each packet it receives.  This is just\n  for experimenting with, and, in particular, this event does *not* reflect\n  TCP stream reassembly.\n\n- The handling of \"conn_weird\" events in tcp.bro now has more options.\n  In the weird_action table, WEIRD_LOG_ALWAYS means that the weird event\n  should always be logged; WEIRD_LOG_PER_CONN means that it should be\n  logged once per connection; and WEIRD_LOG_PER_ORIG that it should be\n  launched once per originator IP address.\n\n- The example hot.bro now includes provisions for flagging sensitive\n  inbound and outbound services.\n\n- Bro now limits the number of events processed when draining the event\n  queue after processing a packet.  This makes Bro less prone to packet\n  loss during high-speed scans.\n\n- The line-oriented TCP endpoint class was split into TCP_EndpointLine,\n  which supports the line-oriented functionality, and TCP_NVT (derived\n  from TCP_EndpointLine), which implements the Network Virtual Terminal\n  used by Telnet and FTP.\n\n- The TCP_NVT class now understands the Telnet Environment option.\n\n- Escape sequences are now '\\' followed by 1 or more octal digits,\n  instead of excatly three octal digits (which is error prone).\n\n- If the watchdog timer expires, it now reports the number of events\n  processed in the current batch of packets, as well as other timing\n  information.\n\n- Bro now should not report packet drops that occur after it has begun\n  to exit (these can occur when draining the pending event queue takes\n  a while).\n\n- Bro now detects TCP acknowledgements that occur above a sequence\n  hole, generating an ack_above_hole event.  Nominally, this indicates\n  packet filter drops, but in fact some buggy TCPs manage to do this :-(.\n\n- Fledgling HTTP support added.  An http_request event is generated when\n  a new HTTP request is seen, and http_stats is generated when an HTTP\n  connection terminates, giving (uninteresting to most people) statistics\n  concerning the request(s).  A lot more is needed: parsing persistent\n  connections and HTTP replies, for one.  This is just a start.  A stub\n  for http_reply exists but these events are not presently generated.\n\n- Ported to Linux (thanks to Pascal Bouchareine).\n\n- A bug in to_lower() and to_upper() was fixed.\n\n- The reporting for unexpected FTP connections now more directly\n  identifies the corresponding FTP session.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.3 Fri Feb 13 19:59:39 PST 1998\n\n- Timers are now implemented using calendar queues rather than priority\n  queues (with thanks to Craig Leres).\n\n- The new byte_len() built-in returns the length of a string interpreted\n  as a set of bytes (including any NUL bytes, especially the final one\n  for a typical string).\n\n- The new sub_bytes() built-in extracts a subset of a string interpreted\n  as a set of bytes (i.e., immune to any embedded NULs).\n\n- Fixed bad interaction with the latest version of libpcap that on some\n  BPF systems would cause Bro to exit any time a little bit of time went by\n  without any traffic matching its filter.\n\n- A bug with constant-folding of the ?: operator has been fixed.\n\n- A new \"conn_stats\" event delivers statistical analysis (number of packets\n  transmitted, retransmitted, out-of-order, replicated) of each connection.\n  If you define a handler for it, then *no* other TCP processing is done.\n  This was added for off-line analysis of traces with large numbers of\n  connections in them.\n\n- Some minor portability tweaks.\n\n-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nv0.2 Sat Oct 25 11:22:37 PDT 1997\n\n- Added autoconf support, thanks to Scott Denton.\n\n- Ported to FreeBSD, Solaris.\n\n- Fixed a bug in which partial connections were ignored even for\n  protocols (e.g., FTP) that can make use of partial dialogs.\n\n- Included BIND version 8 sources directly in the distribution.\n\n- Better usage() information (again thanks to Scott), -h and -v flags.\n\n- README, CHANGES files created.\n\n\n", "2.3-396\n", "//\n// DNP3 was initially used over serial links; it defined its own application\n// layer, transport layer, and data link layer. This hierarchy cannot be\n// mapped to the TCP/IP stack directly. As a result, all three DNP3 layers\n// are packed together as a single application layer payload over the TCP\n// layer. Each DNP3 packet in the application layer may look like this DNP3\n// Packet:\n//\n//    DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer\n//\n//    (This hierarchy can be viewed in the Wireshark visually.)\n//\n// === Background on DNP3\n//\n// 1. Basic structure of DNP3 Protocol over serial links. This information\n//    can be found in detail in\n//\n//        DNP3 Specification Volume 2, Part 1 Basic, Application Layer\n//        DNP3 Specification Volume 4, Data Link Layer\n//\n//    Traditionally, the DNP3 Application Layer in serial links contains a\n//    \"DNP3 Application Layer Fragment\". The data that is parsed by the end\n//    device and then executed. As the \"DNP3 Application Layer Fragment\" can\n//    be long (>255 bytes), it may be trunkcated and carried in different\n//    DNP3 Application Layer of more than one DNP3 packets.\n//\n//    So we may find a long DNP3 Application Layer Fragment to be transmitted in the following format\n//\n//        DNP3 Packet #1 : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #1\n//        DNP3 Packet #2 : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #2\n//        ....\n//        DNP3 Packet #n : DNP3 Link Layer | DNP3 Transport Layer | DNP3 Application Layer #n\n//\n//    So to get the whole DNP3 application layer fragment, we concatenate\n//    each DNP3 Application Layer Data into a logic DNP3 Application Layer\n//    Fragment:\n//\n//       DNP3 Application Layer #1 + DNP3 Application Layer #2 + ... + DNP3 Application Layer #n\n//\n// 2. Packing DNP3 Network Packet into TCP/IP stack\n//\n// We will call the original DNP3 Link Layer, Transport Layer and Application\n// Layer used in serial link as Pseudo Link Layer, Pseudo Transport Layer and\n// Pseudo Application Layer.\n//\n// For a long DNP3 application layer fragment, we may find it tramistted\n// over IP network in the following format:\n//\n//     Network Packet #1 : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #1\n//     Network Packet #2 : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #2\n//     ....\n//     Network Packet #n : TCP Header | DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer #n\n//\n// === Challenges of Writing DNP3 Analyzer on Binpac ===\n//\n// The detailed structure of the DNP3 Link Layer is:\n//\n//     0x05 0x64 Len Ctrl Dest_LSB Dest_MSB Src_LSB Src_MSB CRC_LSB CRC_MSB\n//\n//     Each field is a byte; LSB: least significant byte; MSB: most significatn byte.\n//\n//     \"Len\" indicates the length of the byte stream right after this field\n//     (excluding CRC fields) in the current DNP3 packet.\n//\n// Since \"Len\" is of size one byte, the largest length it can represent is\n// 255 bytes. The larget DNP3 Application Layer size is \"255 - 5 + size of\n// all CRC fields\". \"minus 5\" is coming from the 5 bytes after \"Len\" field in\n// the DNP3 Link Layer, i.e. Ctrl Dest_LSB Dest_MSB Src_LSB Src_MSB Hence,\n// the largest size of a DNP3 Packet (DNP3 Data Link Layer : DNP3 Transport\n// Layer : DNP3 Application Layer) can only be 292 bytes.\n//\n// The \"Len\" field indicates the length of of a single chunk of DNP3 Psuedo\n// Application Layer data instead of the whole DNP3 Application Layer\n// Fragment. However, we can not know the whole length of the DNP3\n// Application Layer Fragment (which Binpac would normally need) until all\n// chunks of Pseudo Application Layer Data are received.\n//\n// We hence exploit the internal flow_buffer class used in Binpac to buffer\n// the application layer data until all chunk are received, which does\n// require a bit of internal knowledge of the generated code.\n//\n// The binpac analyzer parses the DNP3 Application Layer Fragment. However,\n// we manually add the original Pseudo Link Layer data as an additional\n// header before the DNP3 Application Fragment. This helps to know how many\n// bytes are in the current chunk of DNP3 application layer data (not the\n// whole Application Layer Fragment).\n//\n// Graphically, the procedure is:\n//\n// DNP3 Packet :  DNP3 Pseudo Data Link Layer : DNP3 Pseudo Transport Layer : DNP3 Pseudo Application Layer\n//                                   ||                                    ||\n//                                   || (length field)                     || (original paylad byte stream)\n//                                   \\/                                    \\/\n//                DNP3 Additional Header              :                  Reassembled DNP3 Pseudo Application Layer Data\n//                                                   ||\n//                                                   \\/\n//                                            Binpac DNP3 Analyzer\n\n#include \"DNP3.h\"\n#include \"events.bif.h\"\n\nusing namespace analyzer::dnp3;\n\nconst unsigned int PSEUDO_LENGTH_INDEX = 2;\t\t// index of len field of DNP3 Pseudo Link Layer\nconst unsigned int PSEUDO_CONTROL_FIELD_INDEX = 3;\t// index of ctrl field of DNP3 Pseudo Link Layer\nconst unsigned int PSEUDO_TRANSPORT_INDEX = 10;\t\t// index of DNP3 Pseudo Transport Layer\nconst unsigned int PSEUDO_APP_LAYER_INDEX = 11;\t\t// index of first DNP3 app-layer byte.\nconst unsigned int PSEUDO_TRANSPORT_LEN = 1;\t\t// length of DNP3 Transport Layer\nconst unsigned int PSEUDO_LINK_LAYER_LEN = 8;\t\t// length of DNP3 Pseudo Link Layer\n\nbool DNP3_Base::crc_table_initialized = false;\nunsigned int DNP3_Base::crc_table[256];\n\n\nDNP3_Base::DNP3_Base(analyzer::Analyzer* arg_analyzer)\n\t{\n\tanalyzer = arg_analyzer;\n\tinterp = new binpac::DNP3::DNP3_Conn(analyzer);\n\n\tClearEndpointState(true);\n\tClearEndpointState(false);\n\n\tif ( ! crc_table_initialized )\n\t\tPrecomputeCRCTable();\n\t}\n\nDNP3_Base::~DNP3_Base()\n\t{\n\tdelete interp;\n\t}\n\nbool DNP3_Base::ProcessData(int len, const u_char* data, bool orig)\n\t{\n\tEndpoint* endp = orig ? &orig_state : &resp_state;\n\n\twhile ( len )\n\t\t{\n\t\tif ( endp->in_hdr )\n\t\t\t{\n\t\t\t// We're parsing the DNP3 header and link layer, get that in full.\n\t\t\tint res = AddToBuffer(endp, PSEUDO_APP_LAYER_INDEX, &data, &len);\n\n\t\t\tif ( res == 0 )\n\t\t\t\treturn true;\n\n\t\t\tif ( res < 0 )\n\t\t\t\treturn false;\n\n\t\t\t// The first two bytes must always be 0x0564.\n\t\t\tif( endp->buffer[0] != 0x05 || endp->buffer[1] != 0x64 )\n\t\t\t\t{\n\t\t\t\tanalyzer->Weird(\"dnp3_header_lacks_magic\");\n\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t// Make sure header checksum is correct.\n\t\t\tif ( ! CheckCRC(PSEUDO_LINK_LAYER_LEN, endp->buffer, endp->buffer + PSEUDO_LINK_LAYER_LEN, \"header\") )\n\t\t\t\t{\n\t\t\t\tanalyzer->ProtocolViolation(\"broken_checksum\");\n\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t// If the checksum works out, we're pretty certainly DNP3.\n\t\t\tanalyzer->ProtocolConfirmation();\n\n\t\t\t// DNP3 packets without transport and application\n\t\t\t// layers can happen, we ignore them.\n\t\t\tif ( (endp->buffer[PSEUDO_LENGTH_INDEX] + 3) == (char)PSEUDO_LINK_LAYER_LEN  )\n\t\t\t\t{\n\t\t\t\tClearEndpointState(orig);\n\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t// Double check the direction in case the first\n\t\t\t// received packet is a response.\n\t\t\tu_char ctrl = endp->buffer[PSEUDO_CONTROL_FIELD_INDEX];\n\n\t\t\tif ( orig != (bool)(ctrl & 0x80) )\n\t\t\t\tanalyzer->Weird(\"dnp3_unexpected_flow_direction\");\n\n\t\t\t// Update state.\n\t\t\tendp->pkt_length = endp->buffer[PSEUDO_LENGTH_INDEX];\n\t\t\tendp->tpflags = endp->buffer[PSEUDO_TRANSPORT_INDEX];\n\t\t\tendp->in_hdr = false; // Now parsing application layer.\n\n\t\t\t// For the first packet, we submit the header to\n\t\t\t// BinPAC.\n\t\t\tif ( ++endp->pkt_cnt == 1 )\n\t\t\t\tinterp->NewData(orig, endp->buffer, endp->buffer + PSEUDO_LINK_LAYER_LEN);\n\t\t\t}\n\n\t\tif ( ! endp->in_hdr )\n\t\t\t{\n\t\t\tif ( endp->pkt_length <= 0 )\n\t\t\t\t{\n\t\t\t\tanalyzer->Weird(\"dnp3_negative_or_zero_length_link_layer\");\n\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t// We're parsing the DNP3 application layer, get that\n\t\t\t// in full now as well. We calculate the number of\n\t\t\t// raw bytes the application layer consists of from\n\t\t\t// the packet length by determining how much 16-byte\n\t\t\t// chunks fit in there, and then add 2 bytes CRC for\n\t\t\t// each.\n\t\t\tint n = PSEUDO_APP_LAYER_INDEX + (endp->pkt_length - 5) + ((endp->pkt_length - 5) / 16) * 2\n\t\t\t\t\t+ 2 * ( ((endp->pkt_length - 5) % 16 == 0) ? 0 : 1) - 1 ;\n\n\t\t\tint res = AddToBuffer(endp, n, &data, &len);\n\n\t\t\tif ( res == 0 )\n\t\t\t\treturn true;\n\n\t\t\tif ( res < 0 )\n\t\t\t\treturn false;\n\n\t\t\t// Parse the the application layer data.\n\t\t\tif ( ! ParseAppLayer(endp) )\n\t\t\t\treturn false;\n\n\t\t\t// Done with this packet, prepare for next.\n\t\t\tendp->buffer_len = 0;\n\t\t\tendp->in_hdr = true;\n\t\t\t}\n\t\t}\n\n\treturn true;\n\t}\n\nint DNP3_Base::AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len)\n\t{\n\tif ( ! target_len )\n\t\treturn 1;\n\n\tif ( *len < 0 )\n\t\t{\n\t\treporter->AnalyzerError(analyzer, \"dnp3 negative input length: %d\", *len);\n\t\treturn -1;\n\t\t}\n\n\tif ( target_len < endp->buffer_len )\n\t\t{\n\t\treporter->AnalyzerError(analyzer, \"dnp3 invalid target length: %d - %d\",\n\t\t                        target_len, endp->buffer_len);\n\t\treturn -1;\n\t\t}\n\n\tint to_copy = min(*len, target_len - endp->buffer_len);\n\n\tif ( endp->buffer_len + to_copy > MAX_BUFFER_SIZE )\n\t\t{\n\t\treporter->AnalyzerError(analyzer, \"dnp3 buffer length exceeded: %d + %d\",\n\t\t                        endp->buffer_len, to_copy);\n\t\treturn -1;\n\t\t}\n\n\tmemcpy(endp->buffer + endp->buffer_len, *data, to_copy);\n\t*data += to_copy;\n\t*len -= to_copy;\n\tendp->buffer_len += to_copy;\n\n\tif ( endp->buffer_len == target_len )\n\t\treturn 1;\n\n\treturn 0;\n\t}\n\nbool DNP3_Base::ParseAppLayer(Endpoint* endp)\n\t{\n\tbool orig = (endp == &orig_state);\n\tbinpac::DNP3::DNP3_Flow* flow = orig ? interp->upflow() : interp->downflow();\n\n\tu_char* data = endp->buffer + PSEUDO_TRANSPORT_INDEX; // The transport layer byte counts as app-layer it seems.\n\tint len = endp->pkt_length - 5;\n\n\t// DNP3 Packet :  DNP3 Pseudo Link Layer | DNP3 Pseudo Transport Layer | DNP3 Pseudo Application Layer\n\t// DNP3 Serial Transport Layer data is always 1 byte.\n\t// Get FIN FIR seq field in transport header.\n\t// FIR indicate whether the following DNP3 Serial Application Layer is first chunk of bytes or not.\n\t// FIN indicate whether the following DNP3 Serial Application Layer is last chunk of bytes or not.\n\n\tint is_first = (endp->tpflags & 0x40) >> 6; // Initial chunk of data in this packet.\n\tint is_last = (endp->tpflags & 0x80) >> 7; // Last chunk of data in this packet.\n\n\tint transport = PSEUDO_TRANSPORT_LEN;\n\n\tint i = 0;\n\twhile ( len > 0 )\n\t\t{\n\t\tint n = min(len, 16);\n\n\t\t// Make sure chunk has a correct checksum.\n\t\tif ( ! CheckCRC(n, data, data + n, \"app_chunk\") )\n\t\t\treturn false;\n\n\t\tif ( data + n >= endp->buffer + endp->buffer_len )\n\t\t\t{\n\t\t\treporter->AnalyzerError(analyzer,\n\t\t\t                        \"dnp3 app layer parsing overflow %d - %d\",\n\t\t\t                        endp->buffer_len, n);\n\t\t\treturn false;\n\t\t\t}\n\n\t\t// Pass on to BinPAC.\n\t\tflow->flow_buffer()->BufferData(data + transport, data + n);\n\t\ttransport = 0;\n\n\t\tdata += n + 2;\n\t\tlen -= n;\n\t\t}\n\n\tif ( is_first )\n\t\tendp->encountered_first_chunk = true;\n\n\tif ( ! is_first && ! endp->encountered_first_chunk )\n\t\t{\n\t\t// We lost the first chunk.\n\t\tanalyzer->Weird(\"dnp3_first_application_layer_chunk_missing\");\n\t\treturn false;\n\t\t}\n\n\tif ( is_last )\n\t\t{\n\t\tflow->flow_buffer()->FinishBuffer();\n\t\tflow->FlowEOF();\n\t\tClearEndpointState(orig);\n\t\t}\n\n\treturn true;\n\t}\n\nvoid DNP3_Base::ClearEndpointState(bool orig)\n\t{\n\tEndpoint* endp = orig ? &orig_state : &resp_state;\n\tbinpac::DNP3::DNP3_Flow* flow = orig ? interp->upflow() : interp->downflow();\n\n\tendp->in_hdr = true;\n\tendp->encountered_first_chunk = false;\n\tendp->buffer_len = 0;\n\tendp->pkt_length = 0;\n\tendp->tpflags = 0;\n\tendp->pkt_cnt = 0;\n\t}\n\nbool DNP3_Base::CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where)\n\t{\n\tunsigned int crc = CalcCRC(len, data);\n\n\tif ( crc16[0] == (crc & 0xff) && crc16[1] == (crc & 0xff00) >> 8 )\n\t\treturn true;\n\n\tanalyzer->Weird(fmt(\"dnp3_corrupt_%s_checksum\", where));\n\treturn false;\n\t}\n\nvoid DNP3_Base::PrecomputeCRCTable()\n\t{\n\tfor( unsigned int i = 0; i < 256; i++)\n\t\t{\n\t\tunsigned int crc = i;\n\n\t\tfor ( unsigned int j = 0; j < 8; ++j )\n\t\t\t{\n\t\t\tif ( crc & 0x0001 )\n\t\t\t\tcrc = (crc >> 1) ^ 0xA6BC; // Generating polynomial.\n\t\t\telse\n\t\t\t\tcrc >>= 1;\n\t\t\t}\n\n\t\tcrc_table[i] = crc;\n\t\t}\n\t}\n\nunsigned int DNP3_Base::CalcCRC(int len, const u_char* data)\n\t{\n\tunsigned int crc = 0x0000;\n\n\tfor ( int i = 0; i < len; i++ )\n\t\t{\n\t\tunsigned int index = (crc ^ data[i]) & 0xFF;\n\t\tcrc = crc_table[index] ^ (crc >> 8);\n\t\t}\n\n\treturn ~crc & 0xFFFF;\n\t}\n\nDNP3_TCP_Analyzer::DNP3_TCP_Analyzer(Connection* c)\n\t: DNP3_Base(this), TCP_ApplicationAnalyzer(\"DNP3_TCP\", c)\n\t{\n\t}\n\nDNP3_TCP_Analyzer::~DNP3_TCP_Analyzer()\n\t{\n\t}\n\nvoid DNP3_TCP_Analyzer::Done()\n\t{\n\tTCP_ApplicationAnalyzer::Done();\n\n\tInterpreter()->FlowEOF(true);\n\tInterpreter()->FlowEOF(false);\n\t}\n\nvoid DNP3_TCP_Analyzer::DeliverStream(int len, const u_char* data, bool orig)\n\t{\n\tTCP_ApplicationAnalyzer::DeliverStream(len, data, orig);\n\n\ttry\n\t\t{\n\t\tif ( ! ProcessData(len, data, orig) )\n\t\t\tSetSkip(1);\n\t\t}\n\n\tcatch ( const binpac::Exception& e )\n\t\t{\n\t\tSetSkip(1);\n\t\tthrow;\n\t\t}\n\t}\n\nvoid DNP3_TCP_Analyzer::Undelivered(uint64 seq, int len, bool orig)\n\t{\n\tTCP_ApplicationAnalyzer::Undelivered(seq, len, orig);\n\tInterpreter()->NewGap(orig, len);\n\t}\n\nvoid DNP3_TCP_Analyzer::EndpointEOF(bool is_orig)\n\t{\n\tTCP_ApplicationAnalyzer::EndpointEOF(is_orig);\n\tInterpreter()->FlowEOF(is_orig);\n\t}\n\nDNP3_UDP_Analyzer::DNP3_UDP_Analyzer(Connection* c)\n\t: DNP3_Base(this), Analyzer(\"DNP3_UDP\", c)\n\t{\n\t}\n\nDNP3_UDP_Analyzer::~DNP3_UDP_Analyzer()\n\t{\n\t}\n\nvoid DNP3_UDP_Analyzer::DeliverPacket(int len, const u_char* data, bool orig, uint64 seq, const IP_Hdr* ip, int caplen)\n\t{\n\tAnalyzer::DeliverPacket(len, data, orig, seq, ip, caplen);\n\n\ttry\n\t\t{\n\t\tif ( ! ProcessData(len, data, orig) )\n\t\t\tSetSkip(1);\n\t\t}\n\n\tcatch ( const binpac::Exception& e )\n\t\t{\n\t\tSetSkip(1);\n\t\tthrow;\n\t\t}\n\t}\n\n", "\n#ifndef ANALYZER_PROTOCOL_DNP3_DNP3_H\n#define ANALYZER_PROTOCOL_DNP3_DNP3_H\n\n#include \"analyzer/protocol/tcp/TCP.h\"\n#include \"analyzer/protocol/udp/UDP.h\"\n\n#include \"dnp3_pac.h\"\n\nnamespace analyzer { namespace dnp3 {\n\nclass DNP3_Base {\npublic:\n\tDNP3_Base(analyzer::Analyzer* analyzer);\n\tvirtual ~DNP3_Base();\n\n\tbinpac::DNP3::DNP3_Conn* Interpreter()\t{ return interp; }\n\nprotected:\n\tstatic const int MAX_BUFFER_SIZE = 300;\n\n\tstruct Endpoint\t{\n\t\tu_char buffer[MAX_BUFFER_SIZE];\n\t\tint buffer_len;\n\t\tbool in_hdr;\n\t\tint tpflags;\n\t\tint pkt_length;\n\t\tint pkt_cnt;\n\t\tbool encountered_first_chunk;\n\t\t};\n\n\tbool ProcessData(int len, const u_char* data, bool orig);\n\tvoid ClearEndpointState(bool orig);\n\n\t/**\n\t * Buffers packet data until it reaches a specified length.\n\t * @param endp an endpoint speaking DNP3 to which data will be buffered.\n\t * @param target_len the required length of the buffer\n\t * @param data source buffer to copy bytes from.  Will be incremented\n\t * by the number of bytes copied by this function.\n\t * @param len the number of bytes available in \\a data.  Will be decremented\n\t * by the number of bytes copied by this function.\n\t * @return -1 if invalid input parameters were supplied, 0 if the endpoint's\n\t * buffer is not yet \\a target_len bytes in size, or 1 the buffer is the\n\t * required size.\n\t */\n\tint AddToBuffer(Endpoint* endp, int target_len, const u_char** data, int* len);\n\n\tbool ParseAppLayer(Endpoint* endp);\n\tbool CheckCRC(int len, const u_char* data, const u_char* crc16, const char* where);\n\tunsigned int CalcCRC(int len, const u_char* data);\n\n\tstatic void PrecomputeCRCTable();\n\n\tstatic bool crc_table_initialized;\n\tstatic unsigned int crc_table[256];\n\n\tanalyzer::Analyzer* analyzer;\n\tbinpac::DNP3::DNP3_Conn* interp;\n\n\tEndpoint orig_state;\n\tEndpoint resp_state;\n};\n\nclass DNP3_TCP_Analyzer : public DNP3_Base, public tcp::TCP_ApplicationAnalyzer {\npublic:\n\tDNP3_TCP_Analyzer(Connection* conn);\n\tvirtual ~DNP3_TCP_Analyzer();\n\n\tvirtual void Done();\n\tvirtual void DeliverStream(int len, const u_char* data, bool orig);\n\tvirtual void Undelivered(uint64 seq, int len, bool orig);\n\tvirtual void EndpointEOF(bool is_orig);\n\n\tstatic Analyzer* Instantiate(Connection* conn)\n\t\t{ return new DNP3_TCP_Analyzer(conn); }\n};\n\nclass DNP3_UDP_Analyzer : public DNP3_Base, public analyzer::Analyzer {\npublic:\n\tDNP3_UDP_Analyzer(Connection* conn);\n\tvirtual ~DNP3_UDP_Analyzer();\n\n\tvirtual void DeliverPacket(int len, const u_char* data, bool orig,\n                    uint64 seq, const IP_Hdr* ip, int caplen);\n\n\tstatic analyzer::Analyzer* Instantiate(Connection* conn)\n\t\t{ return new DNP3_UDP_Analyzer(conn); }\n};\n\n\n} } // namespace analyzer::*\n\n#endif\n"], "filenames": ["CHANGES", "VERSION", "src/analyzer/protocol/dnp3/DNP3.cc", "src/analyzer/protocol/dnp3/DNP3.h"], "buggy_code_start_loc": [0, 1, 141, 34], "buggy_code_end_loc": [0, 2, 261, 35], "fixing_code_start_loc": [1, 1, 141, 34], "fixing_code_end_loc": [12, 2, 304, 49], "type": "CWE-119", "message": "analyzer/protocol/dnp3/DNP3.cc in Bro before 2.3.2 does not properly handle zero values of a packet length, which allows remote attackers to cause a denial of service (buffer overflow or buffer over-read if NDEBUG; otherwise assertion failure) via a crafted DNP3 packet.", "other": {"cve": {"id": "CVE-2015-1521", "sourceIdentifier": "cve@mitre.org", "published": "2017-04-24T06:59:00.447", "lastModified": "2017-04-27T17:46:50.707", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "analyzer/protocol/dnp3/DNP3.cc in Bro before 2.3.2 does not properly handle zero values of a packet length, which allows remote attackers to cause a denial of service (buffer overflow or buffer over-read if NDEBUG; otherwise assertion failure) via a crafted DNP3 packet."}, {"lang": "es", "value": "analyzer/protocol/dnp3/DNP3.cc en Bro en versiones anteriores a 2.3.2 no maneja correctamente valores cero de una longitud de paquete, lo que permite a atacantes remotos causar una denegaci\u00f3n de servicio (desbordamiento de b\u00fafer o sobre-lectura de b\u00fafer si NDEBUG; de lo contrario fracaso de aserci\u00f3n) a trav\u00e9s de un paquete DNP3 manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bro:bro:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.1", "matchCriteriaId": "EDAA32F2-571D-4D9F-B9C4-25668F5B5F2D"}]}]}], "references": [{"url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/bro/bro/commit/6cedd67c381ff22fde653adf02ee31caf66c81a0"}}