{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController {\n\n\tpublic $newkey;\n\n\tpublic $components = array(\n\t\t\t'Security',\n\t\t\t'Email',\n\t\t\t'RequestHandler'\n\t);\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 60,\n\t\t\t'recursive' => -1,\n\t\t\t'order' => array(\n\t\t\t\t\t'Organisation.name' => 'ASC'\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'Organisation' => array('id', 'name'),\n\t\t\t\t'Role' => array('id', 'name', 'perm_auth')\n\t\t\t)\n\t);\n\n\tpublic $helpers = array('Js' => array('Jquery'));\n\n\tpublic function beforeFilter() {\n\t\tparent::beforeFilter();\n\n\t\t// what pages are allowed for non-logged-in users\n\t\t$this->Auth->allow('login', 'logout');\n\t}\n\n\tpublic function view($id = null) {\n\t\tif (\"me\" == $id) $id = $this->Auth->user('id');\n\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n\t\t\tthrow new NotFoundException(__('Invalid user or not authorised.'));\n\t\t}\n\t\tif (!is_numeric($id) && !empty($id)) {\n\t\t\t$userId = $this->User->find('first', array(\n\t\t\t\t\t'conditions' => array('email' => $id),\n\t\t\t\t\t'fields' => array('id')\n\t\t\t));\n\t\t\t$id = $userid['User']['id'];\n\t\t}\n\t\t$this->User->id = $id;\n\t\t$this->User->recursive = 0;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$user = $this->User->read(null, $id);\n\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t$pgpDetails = $this->User->verifySingleGPG($user);\n\t\t\t$user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n\t\t\t$user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\tunset($user['User']['server_id']);\n\t\t\t$user['User']['password'] = '*****';\n\t\t\treturn $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n\t\t} else {\n\t\t\t$this->set('user', $user);\n\t\t}\n\t}\n\n\tpublic function request_API(){\n\t\tif (Configure::read('MISP.disable_emailing')) {\n\t\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n\t\t}\n\t\t$responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n\t\tif (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n\t\t\t$subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n\t\t\t$body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n\t\t\t$body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n\t\t\t$user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n\t\t\t$result = $this->User->sendEmail($user, $body, false, $subject);\n\t\t\tif ($result) {\n\t\t\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n\t\t\t}\n\t\t}\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n\t}\n\n\tpublic function edit() {\n\t\tif (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n\t\t$id = $this->Auth->user('id');\n\t\t$this->User->read(null, $id);\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException('Something went wrong. Your user account could not be accessed.');\n\t\t}\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$abortPost = false;\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\t\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t// What fields should be saved (allowed to be saved)\n\t\t\t\t$fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n\t\t\t\tif (\"\" != $this->request->data['User']['password'])\n\t\t\t\t\t$fieldList[] = 'password';\n\t\t\t\t// Save the data\n\t\t\t\tif ($this->User->save($this->request->data, true ,$fieldList)) {\n\t\t\t\t\t$this->Session->setFlash(__('The profile has been updated'));\n\t\t\t\t\t$this->_refreshAuth();\n\t\t\t\t\t$this->redirect(array('action' => 'view', $id));\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The profile could not be updated. Please, try again.'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->User->set('password', '');\n\t\t\t$this->request->data = $this->User->data;\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$roles = $this->User->Role->find('list');\n\t\t$this->set(compact('roles'));\n\t\t$this->set('id', $id);\n\t}\n\n\tpublic function change_pw() {\n\t\t$id = $this->Auth->user('id');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array('User.id' => $id),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$abortPost = false;\n\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t} else {\n\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t// What fields should be saved (allowed to be saved)\n\t\t\t\t$user['User']['change_pw'] = 0;\n\t\t\t\t$user['User']['password'] = $this->request->data['User']['password'];\n\t\t\t\t$user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n\t\t\t\t$temp = $user['User']['password'];\n\t\t\t\t// Save the data\n\t\t\t\tif ($this->User->save($user)) {\n\t\t\t\t\t$this->Session->setFlash(__('Password Changed.'));\n\t\t\t\t\t$this->_refreshAuth();\n\t\t\t\t\t$this->__extralog(\"change_pw\");\n\t\t\t\t\t$this->redirect(array('action' => 'view', $id));\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$this->User->recursive = 0;\n\t\t$this->User->read(null, $id);\n\t\t$this->User->set('password', '');\n\t\t$this->request->data = $this->User->data;\n\t\t$roles = $this->User->Role->find('list');\n\t\t$this->set(compact('roles'));\n\t}\n\n\tpublic function admin_index() {\n\t\tif (!$this->_isAdmin()) throw new NotFoundException(__('Invalid user or not authorised.'));\n\t\t$this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n\t\t$urlParams = \"\";\n\t\t$passedArgsArray = array();\n\t\t$booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n\t\t$textFields = array('role', 'email', 'all', 'authkey');\n\t\t// org admins can't see users of other orgs\n\t\tif ($this->_isSiteAdmin()) $textFields[] = 'org';\n\t\t$this->set('passedArgs', json_encode($this->passedArgs));\n\t\t// check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n\t\tforeach ($this->passedArgs as $k => $v) {\n\t\t\tif (substr($k, 0, 6) === 'search') {\n\t\t\t\tif ($v != \"\") {\n\t\t\t\t\tif ($urlParams != \"\") $urlParams .= \"/\";\n\t\t\t\t\t$urlParams .= $k . \":\" . $v;\n\t\t\t\t}\n\t\t\t\t$searchTerm = substr($k, 6);\n\t\t\t\tif (in_array($searchTerm, $booleanFields)) {\n\t\t\t\t\tif ($v != \"\") $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n\t\t\t\t} else if (in_array($searchTerm, $textFields)) {\n\t\t\t\t\tif ($v != \"\") {\n\t\t\t\t\t\tif ($searchTerm == \"role\") $searchTerm = \"role_id\";\n\t\t\t\t\t\t$pieces = explode('|', $v);\n\t\t\t\t\t\t$test = array();\n\t\t\t\t\t\tforeach ($pieces as $piece) {\n\t\t\t\t\t\t\tif ($piece[0] == '!') {\n\t\t\t\t\t\t\t\tif ($searchTerm == 'email') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ($searchTerm == 'org') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ($searchTerm == 'email') {\n\t\t\t\t\t\t\t\t\t$test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n\t\t\t\t\t\t\t\t} else if ($searchTerm == 'org') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n\t\t\t\t\t\t\t\t} else if ($searchTerm == 'all') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'OR' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$test['OR'][] = array('User.' . $searchTerm => $piece);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($test)) $this->paginate['conditions']['AND'][] = $test;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$passedArgsArray[$searchTerm] = $v;\n\t\t\t}\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\t$conditions = array();\n\t\t\tif (isset($this->paginate['conditions'])) {\n\t\t\t\t$conditions = $this->paginate['conditions'];\n\t\t\t}\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t\t}\n\t\t\t$users = $this->User->find('all', array(\n\t\t\t\t\t'conditions' => $conditions,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => array(\n\t\t\t\t\t\t\t'Organisation' => array('id', 'name'),\n\t\t\t\t\t\t\t'Role' => array('id', 'name', 'perm_auth')\n\t\t\t\t\t)\n\t\t\t));\n\t\t\tforeach ($users as $key => $value) {\n\t\t\t\tunset($users['User']['password']);\n\t\t\t}\n\t\t\treturn $this->RestResponse->viewData($users, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('urlparams', $urlParams);\n\t\t\t$this->set('passedArgsArray', $passedArgsArray);\n\t\t\t$conditions = array();\n\t\t\tif ($this->_isSiteAdmin()) {\n\t\t\t\t$this->set('users', $this->paginate());\n\t\t\t} else {\n\t\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t\t\t$this->paginate['conditions']['AND'][] = $conditions;\n\t\t\t\t$this->set('users', $this->paginate());\n\t\t\t}\n\t\t\t$this->set('ajax', $this->request->is('ajax'));\n\t\t\tif ($this->request->is('ajax')) {\n\t\t\t\t$this->autoRender = false;\n\t\t\t\t$this->layout = false;\n\t\t\t\t$this->render('ajax/admin_index');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function admin_filterUserIndex() {\n\t\tif (!$this->_isAdmin() && !$this->_isSiteAdmin()) throw new MethodNotAllowedException();\n\t\t$passedArgsArray = array();\n\t\t$booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n\t\t$textFields = array('role', 'email', 'authkey');\n\t\t$showOrg = 0;\n\t\t// org admins can't see users of other orgs\n\t\tif ($this->_isSiteAdmin()) {\n\t\t\t$textFields[] = 'org';\n\t\t\t$showOrg = 1;\n\t\t}\n\t\t$this->set('differentFilters', $booleanFields);\n\t\t$this->set('simpleFilters', $textFields);\n\t\t$rules = array_merge($booleanFields, $textFields);\n\t\t$this->set('showorg', $showOrg);\n\n\t\t$filtering = array();\n\t\tforeach ($booleanFields as $b) {\n\t\t\t$filtering[$b] = '';\n\t\t}\n\t\tforeach ($textFields as $t) {\n\t\t\t$filtering[$t] = array('OR' => array(), 'NOT' => array());\n\t\t}\n\n\t\tforeach ($this->passedArgs as $k => $v) {\n\t\t\tif (substr($k, 0, 6) === 'search') {\n\t\t\t\t$searchTerm = substr($k, 6);\n\t\t\t\tif (in_array($searchTerm, $booleanFields)) {\n\t\t\t\t\t$filtering[$searchTerm] = $v;\n\t\t\t\t} else if (in_array($searchTerm, $textFields)) {\n\t\t\t\t\t$pieces = explode('|', $v);\n\t\t\t\t\tforeach ($pieces as $piece) {\n\t\t\t\t\t\tif ($piece[0] == '!') $filtering[$searchTerm]['NOT'][] = substr($piece,1);\n\t\t\t\t\t\telse $filtering[$searchTerm]['OR'][] = $piece;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$passedArgsArray[$searchTerm] = $v;\n\t\t\t}\n\t\t}\n\t\t$this->set('filtering', json_encode($filtering));\n\n\t\t$roles = $this->User->Role->find('all', array('recursive' => -1));\n\t\t$roleNames = array();\n\t\t$roleJSON = array();\n\t\tforeach ($roles as $k => $v) {\n\t\t\t$roleNames[$v['Role']['id']] = $v['Role']['name'];\n\t\t\t$roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n\t\t}\n\t\t$temp = $this->User->Organisation->find('all', array(\n\t\t\t'conditions' => array('local' => 1),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'name'),\n\t\t\t'order' => array('LOWER(name) ASC')\n\t\t));\n\t\t$orgs = array();\n\t\tforeach ($temp as $org) {\n\t\t\t$orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n\t\t}\n\t\t$this->set('orgs', $orgs);\n\t\t$this->set('roles', $roleNames);\n\t\t$this->set('roleJSON', json_encode($roleJSON));\n\t\t$rules = $this->_arrayToValuesIndexArray($rules);\n\t\t$this->set('rules', $rules);\n\t\t$this->set('baseurl', Configure::read('MISP.baseurl'));\n\t\t$this->layout = 'ajax';\n\t}\n\n\tpublic function admin_view($id = null) {\n\t\t$this->User->id = $id;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$user = $this->User->read(null, $id);\n\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t$pgpDetails = $this->User->verifySingleGPG($user);\n\t\t\t$user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n\t\t\t$user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n\t\t}\n\t\t$user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n\t\t$this->set('user', $user);\n\t\tif (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\t$user['User']['password'] = '*****';\n\t\t\treturn $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n\t\t} else {\n\t\t\t$temp = $this->User->data['User']['invited_by'];\n\t\t\t$this->set('id', $id);\n\t\t\t$this->set('user2', $this->User->read(null, $temp));\n\t\t}\n\t}\n\n\tpublic function admin_add() {\n\t\tif (!$this->_isAdmin()) throw new Exception('Administrators only.');\n\t\t$params = null;\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n\t\t}\n\t\t$this->loadModel('AdminSetting');\n\t\t$default_role_id = $this->AdminSetting->getSetting('default_role');\n\t\t$roles = $this->User->Role->find('list', $params);\n\t\t$syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n\t\tif ($this->request->is('post')) {\n\t\t\t// In case we don't get the data encapsulated in a User object\n\t\t\tif ($this->_isRest()) {\n\t\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t\t$this->request->data = array('User' => $this->request->data);\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['id'])) {\n\t\t\t\t\tunset($this->request->data['User']['id']);\n\t\t\t\t}\n\t\t\t\t$required_fields = array('role_id', 'email', 'org_id');\n\t\t\t\tforeach ($required_fields as $field) {\n\t\t\t\t\tif (empty($this->request->data['User'][$field])) {\n\t\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['password'])) {\n\t\t\t\t\t$this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n\t\t\t\t}\n\t\t\t\t$defaults = array(\n\t\t\t\t\t\t'external_auth_required' => 0,\n\t\t\t\t\t\t'external_auth_key' => '',\n\t\t\t\t\t\t'server_id' => 0,\n\t\t\t\t\t\t'gpgkey' => '',\n\t\t\t\t\t\t'certif_public' => '',\n\t\t\t\t\t\t'autoalert' => 0,\n\t\t\t\t\t\t'contactalert' => 0,\n\t\t\t\t\t\t'disabled' => 0,\n\t\t\t\t\t\t'newsread' => 0,\n\t\t\t\t\t\t'change_pw' => 1,\n\t\t\t\t\t\t'authkey' => $this->User->generateAuthKey(),\n\t\t\t\t\t\t'termsaccepted' => 0\n\t\t\t\t);\n\t\t\t\tforeach ($defaults as $key => $value) {\n\t\t\t\t\tif (!isset($this->request->data['User'][$key])) $this->request->data['User'][$key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->request->data['User']['date_created'] = time();\n\t\t\t$this->request->data['User']['date_modified'] = time();\n\t\t\tif (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) $this->request->data['User']['server_id'] = 0;\n\t\t\t$this->User->create();\n\t\t\t// set invited by\n\t\t\t$this->loadModel('Role');\n\t\t\t$this->Role->recursive = -1;\n\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\tif (empty($chosenRole)) throw new MethodNotAllowedException('Invalid role');\n\t\t\t$this->request->data['User']['invited_by'] = $this->Auth->user('id');\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif ($chosenRole['Role']['perm_sync']) {\n\t\t\t\t\t$this->request->data['User']['change_pw'] = 0;\n\t\t\t\t\t$this->request->data['User']['termsaccepted'] = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->request->data['User']['change_pw'] = 1;\n\t\t\t\t\t$this->request->data['User']['termsaccepted'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isset($this->request->data['User']['disabled'])) $this->request->data['User']['disabled'] = false;\n\t\t\t$this->request->data['User']['newsread'] = 0;\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t$this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n\t\t\t\t$this->loadModel('Role');\n\t\t\t\t$this->Role->recursive = -1;\n\t\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\t\tif ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1) {\n\t\t\t\t\tthrow new Exception('You are not authorised to assign that role to a user.');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n\t\t\tif ($this->User->save($this->request->data, true, $fieldList)) {\n\t\t\t\t$notification_message = '';\n\t\t\t\tif (!empty($this->request->data['User']['notify'])) {\n\t\t\t\t\t$user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n\t\t\t\t\t$password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n\t\t\t\t\t$result = $this->User->initiatePasswordReset($user, true, true, $password);\n\t\t\t\t\tif ($result) {\n\t\t\t\t\t\t$notification_message .= ' User notified of new credentials.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t\t\t\t'conditions' => array('User.id' => $this->User->id),\n\t\t\t\t\t\t\t'recursive' => -1\n\t\t\t\t\t));\n\t\t\t\t\t$user['User']['password'] = '******';\n\t\t\t\t\treturn $this->RestResponse->viewData($user, $this->response->type());\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The user has been saved.' . $notification_message));\n\t\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n\t\t\t\t} else {\n\t\t\t\t\t// reset auth key for a new user\n\t\t\t\t\t$this->set('authkey', $this->newkey);\n\t\t\t\t\t$this->Session->setFlash(__('The user could not be saved. Please, try again.'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->newkey = $this->User->generateAuthKey();\n\t\t\t$this->set('authkey', $this->newkey);\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n\t\t} else {\n\t\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t\t\t'conditions' => array('local' => 1),\n\t\t\t\t\t'order' => array('lower(name) asc')\n\t\t\t));\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t// generate auth key for a new user\n\t\t\t$this->loadModel('Server');\n\t\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t\t$conditions = array();\n\t\t\tif (!$this->_isSiteAdmin()) $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n\t\t\t$temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n\t\t\t$servers = array(0 => 'Not bound to a server');\n\t\t\tif (!empty($temp)) foreach ($temp as $t) {\n\t\t\t\tif (!empty($t['Server']['name'])) $servers[$t['Server']['id']] = $t['Server']['name'];\n\t\t\t\telse $servers[$t['Server']['id']] = $t['Server']['url'];\n\t\t\t}\n\t\t\t$this->set('currentOrg', $this->Auth->user('org_id'));\n\t\t\t$this->set('isSiteAdmin', $this->_isSiteAdmin());\n\t\t\t$this->set('default_role_id', $default_role_id);\n\t\t\t$this->set('servers', $servers);\n\t\t\t$this->set(compact('roles'));\n\t\t\t$this->set(compact('syncRoles'));\n\t\t}\n\t}\n\n\tpublic function admin_edit($id = null) {\n\t\t$this->set('currentOrg', $this->Auth->user('org_id'));\n\t\t$this->User->id = $id;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$params = array();\n\t\t$allowedRole = '';\n\t\t$userToEdit = $this->User->find('first', array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('id', 'role_id', 'email', 'org_id'),\n\t\t));\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t// Org admins should be able to select the role that is already assigned to an org user when editing them.\n\t\t\t// What happened previously:\n\t\t\t// Org admin edits another org admin of the same org\n\t\t\t// Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n\t\t\t// MISP automatically chooses the first available option for the user as the selected setting (usually user)\n\t\t\t// Org admin is downgraded to a user\n\t\t\t// Now we make an exception for the already assigned role, both in the form and the actual edit.\n\t\t\tif ($userToEdit['User']['org_id'] != $this->Auth->user('org_id')) throw new Exception('Invalid user');\n\t\t\t$allowedRole = $userToEdit['User']['role_id'];\n\t\t\t$params = array('conditions' => array(\n\t\t\t\t\t'OR' => array(\n\t\t\t\t\t\t\t'AND' => array(\n\t\t\t\t\t\t\t\t'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'id' => $allowedRole,\n\t\t\t\t\t)\n\t\t\t));\n\t\t}\n\t\t$roles = $this->User->Role->find('list', $params);\n\t\t$syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n\t\t$this->set('currentId', $id);\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t$this->request->data['User'] = $this->request->data;\n\t\t\t}\n\t\t\t$abortPost = false;\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\n\t\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t$this->request->data['User']['id'] = $id;\n\t\t\t\tif (!isset($this->request->data['User']['email'])) {\n\t\t\t\t\t$this->request->data['User']['email'] = $userToEdit['User']['email'];\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) $this->request->data['User']['server_id'] = 0;\n\t\t\t\t$fields = array();\n\t\t\t\t$blockedFields = array('id', 'invited_by');\n\t\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t\t$blockedFields[] = 'org_id';\n\t\t\t\t}\n\t\t\t\tforeach (array_keys($this->request->data['User']) as $field) {\n\t\t\t\t\tif (in_array($field, $blockedFields)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ($field != 'password') array_push($fields, $field);\n\t\t\t\t}\n\t\t\t\t// TODO Audit, __extralog, fields get orig\n\t\t\t\t$fieldsOldValues = array();\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\tif ($field == 'enable_password') continue;\n\t\t\t\t\tif ($field != 'confirm_password') array_push($fieldsOldValues, $this->User->field($field));\n\t\t\t\t\telse array_push($fieldsOldValues, $this->User->field('password'));\n\t\t\t\t}\n\t\t\t\t// TODO Audit, __extralog, fields get orig END\n\t\t\t\tif (\n\t\t\t\t\tisset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n\t\t\t\t\tisset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n\t\t\t\t) {\n\t\t\t\t\t$fields[] = 'password';\n\t\t\t\t\tif ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n\t\t\t\t\t\t$this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n\t\t\t\t\t\t$fields[] = 'confirm_password';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!$this->_isRest()) {\n\t\t\t\t\t$fields[] = 'role_id';\n\t\t\t\t}\n\t\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t\t$this->loadModel('Role');\n\t\t\t\t\t$this->Role->recursive = -1;\n\t\t\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\t\t\tif (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n\t\t\t\t\t\tthrow new Exception('You are not authorised to assign that role to a user.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($this->User->save($this->request->data, true, $fields)) {\n\t\t\t\t\t// TODO Audit, __extralog, fields compare\n\t\t\t\t\t// newValues to array\n\t\t\t\t\t$fieldsNewValues = array();\n\t\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t\tif ($field != 'confirm_password') {\n\t\t\t\t\t\t\t$newValue = $this->data['User'][$field];\n\t\t\t\t\t\t\tif (gettype($newValue) == 'array') {\n\t\t\t\t\t\t\t\t$newValueStr = '';\n\t\t\t\t\t\t\t\t$cP = 0;\n\t\t\t\t\t\t\t\tforeach ($newValue as $newValuePart) {\n\t\t\t\t\t\t\t\t\tif ($cP < 2) $newValueStr .= '-' . $newValuePart;\n\t\t\t\t\t\t\t\t\telse $newValueStr = $newValuePart . $newValueStr;\n\t\t\t\t\t\t\t\t\t$cP++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tarray_push($fieldsNewValues, $newValueStr);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarray_push($fieldsNewValues, $newValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarray_push($fieldsNewValues, $this->data['User']['password']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// compare\n\t\t\t\t\t$fieldsResultStr = '';\n\t\t\t\t\t$c = 0;\n\t\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t\tif (isset($fieldsOldValues[$c]) && $fieldsOldValues[$c] != $fieldsNewValues[$c]) {\n\t\t\t\t\t\t\tif ($field != 'confirm_password') {\n\t\t\t\t\t\t\t\t$fieldsResultStr = $fieldsResultStr . ', ' . $field . ' (' . $fieldsOldValues[$c] . ') => (' . $fieldsNewValues[$c] . ')';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$c++;\n\t\t\t\t\t}\n\t\t\t\t\t$fieldsResultStr = substr($fieldsResultStr, 2);\n\t\t\t\t\t$this->__extralog(\"edit\", \"user\", $fieldsResultStr);\t// TODO Audit, check: modify User\n\t\t\t\t\t// TODO Audit, __extralog, fields compare END\n\t\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t\t\t\t\t'conditions' => array('User.id' => $this->User->id),\n\t\t\t\t\t\t\t\t'recursive' => -1\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$user['User']['password'] = '******';\n\t\t\t\t\t\treturn $this->RestResponse->viewData($user, $this->response->type());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->Session->setFlash(__('The user has been saved'));\n\t\t\t\t\t\t$this->_refreshAuth(); // in case we modify ourselves\n\t\t\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->Session->setFlash(__('The user could not be saved. Please, try again.'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n\t\t\t}\n\t\t\t$this->User->read(null, $id);\n\t\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n\t\t\t\t$this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n\t\t\t}\n\t\t\t$this->User->set('password', '');\n\t\t\t$this->request->data = $this->User->data; // TODO CHECK\n\t\t}\n\t\tif ($this->_isSiteAdmin()) {\n\t\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t\t\t'conditions' => array('local' => 1),\n\t\t\t\t\t'order' => array('lower(name) asc')\n\t\t\t));\n\t\t} else {\n\t\t\t$orgs = array();\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n\t\t$temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n\t\t$servers = array(0 => 'Not bound to a server');\n\t\tforeach ($temp as $t) {\n\t\t\tif (!empty($t['Server']['name'])) $servers[$t['Server']['id']] = $t['Server']['name'];\n\t\t\telse $servers[$t['Server']['id']] = $t['Server']['url'];\n\t\t}\n\t\t$this->set('servers', $servers);\n\t\t$this->set('orgs', $orgs);\n\t\t$this->set('id', $id);\n\t\t$this->set(compact('roles'));\n\t\t$this->set(compact('syncRoles'));\n\t}\n\n\tpublic function admin_delete($id = null) {\n\t\tif (!$this->request->is('post')) {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t\tif (!$this->_isAdmin()) throw new Exception('Administrators only.');\n\t\t$this->User->id = $id;\n\t\t$conditions = array('User.id' => $id);\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['org_id'] = $this->Auth->user('org_id');\n\t\t}\n\t\t$user = $this->User->find('first', array(\n\t\t\t\t'conditions' => $conditions,\n\t\t\t\t'recursive' => -1\n\t\t));\n\t\tif (empty($user)) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n\t\tif ($this->User->delete($id)) {\n\t\t\t$this->__extralog(\"delete\", $fieldsDescrStr, '');\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n\t\t\t} else {\n\t\t\t\t$this->Session->setFlash(__('User deleted'));\n\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t\t$this->Session->setFlash(__('User was not deleted'));\n\t\t$this->redirect(array('action' => 'index'));\n\t}\n\n\tpublic function updateLoginTime() {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'recursive' => -1,\n\t\t\t'conditions' => array('User.id' => $this->Auth->user('id'))\n\t\t));\n\t\t$this->User->id = $this->Auth->user('id');\n\t\t$this->User->saveField('last_login', time());\n\t\t$this->User->saveField('current_login', time());\n\t\t$user = $this->User->getAuthUser($user['User']['id']);\n\t\t$this->Auth->login($user);\n\t\t$this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n\t}\n\n\tpublic function login() {\n\t\t$this->Bruteforce = ClassRegistry::init('Bruteforce');\n\t\tif ($this->request->is('post') && isset($this->request->data['User']['email'])) {\n\t\t\tif ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n\t\t\t\tthrow new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n\t\t\t}\n\t\t}\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t// Check the length of the user's authkey\n\t\t\t$userPass = $this->User->find('first', array(\n\t\t\t\t'conditions' => array('User.email' => $this->request->data['User']['email']),\n\t\t\t\t'fields' => array('User.password'),\n\t\t\t\t'recursive' => -1\n\t\t\t));\n\t\t\tif (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n\t\t\t\t$this->AdminSetting = ClassRegistry::init('AdminSetting');\n\t\t\t\t$db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n\t\t\t\t$versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n\t\t\t\tif ($versionRequirementMet) {\n\t\t\t\t\t$passwordToSave = $this->request->data['User']['password'];\n\t\t\t\t}\n\t\t\t\tunset($this->Auth->authenticate['Form']['passwordHasher']);\n\t\t\t\t$this->Auth->constructAuthenticate();\n\t\t\t}\n\t\t}\n\t\tif ($this->Auth->login()) {\n\t\t\t$this->__extralog(\"login\");\t// TODO Audit, __extralog, check: customLog i.s.o. __extralog, no auth user?: $this->User->customLog('login', $this->Auth->user('id'), array('title' => '','user_id' => $this->Auth->user('id'),'email' => $this->Auth->user('email'),'org' => 'IN2'));\n\t\t\t$this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n\t\t\t$this->User->id = $this->Auth->user('id');\n\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t'conditions' => array(\n\t\t\t\t\t'User.id' => $this->Auth->user('id')\n\t\t\t\t),\n\t\t\t\t'recursive' => -1\n\t\t\t));\n\t\t\tunset($user['User']['password']);\n\t\t\t$user['User']['action'] = 'login';\n\t\t\t$user['User']['last_login'] = $this->Auth->user('current_login');\n\t\t\t$user['User']['current_login'] = time();\n\t\t\t$this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n\t\t\tif (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) $this->User->saveField('password', $passwordToSave);\n\t\t\t$this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n\t\t\t// no state changes are ever done via GET requests, so it is safe to return to the original page:\n\t\t\t$this->redirect($this->Auth->redirectUrl());\n\t\t\t// $this->redirect(array('controller' => 'events', 'action' => 'index'));\n\t\t} else {\n\t\t\t$dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n\t\t\t$dataSource = $dataSourceConfig['datasource'];\n\t\t\t// don't display authError before first login attempt\n\t\t\tif (str_replace(\"//\",\"/\",$this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n\t\t\t\t$this->Session->delete('Message.auth');\n\t\t\t}\n\t\t\t// don't display \"invalid user\" before first login attempt\n\t\t\tif ($this->request->is('post')) {\n\t\t\t\t$this->Session->setFlash(__('Invalid username or password, try again'));\n\t\t\t\tif (isset($this->request->data['User']['email'])) {\n\t\t\t\t\t$this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// populate the DB with the first role (site admin) if it's empty\n\t\t\t$this->loadModel('Role');\n\t\t\tif ($this->Role->find('count') == 0 ) {\n\t\t\t\t$siteAdmin = array('Role' => array(\n\t\t\t\t\t'id' => 1,\n\t\t\t\t\t'name' => 'Site Admin',\n\t\t\t\t\t'permission' => 3,\n\t\t\t\t\t'perm_add' => 1,\n\t\t\t\t\t'perm_modify' => 1,\n\t\t\t\t\t'perm_modify_org' => 1,\n\t\t\t\t\t'perm_publish' => 1,\n\t\t\t\t\t'perm_sync' => 1,\n\t\t\t\t\t'perm_admin' => 1,\n\t\t\t\t\t'perm_audit' => 1,\n\t\t\t\t\t'perm_auth' => 1,\n\t\t\t\t\t'perm_site_admin' => 1,\n\t\t\t\t\t'perm_regexp_access' => 1,\n\t\t\t\t\t'perm_sharing_group' => 1,\n\t\t\t\t\t'perm_template' => 1,\n\t\t\t\t\t'perm_tagger' => 1,\n\t\t\t\t));\n\t\t\t\t$this->Role->save($siteAdmin);\n\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t$sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n\t\t\t\t\t$this->Role->query($sql);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n\t\t\t\t$date = date('Y-m-d H:i:s');\n\t\t\t\t$org = array('Organisation' => array(\n\t\t\t\t\t\t'id' => 1,\n\t\t\t\t\t\t'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n\t\t\t\t\t\t'description' => 'Automatically generated admin organisation',\n\t\t\t\t\t\t'type' => 'ADMIN',\n\t\t\t\t\t\t'uuid' => CakeText::uuid(),\n\t\t\t\t\t\t'local' => 1,\n\t\t\t\t\t\t'date_created' => $date,\n\t\t\t\t\t\t'sector' => '',\n\t\t\t\t\t\t'nationality' => ''\n\t\t\t\t));\n\t\t\t\t$this->User->Organisation->save($org);\n\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t$sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n\t\t\t\t\t$this->User->Organisation->query($sql);\n\t\t\t\t}\n\t\t\t\t$org_id = $this->User->Organisation->id;\n\t\t\t} else {\n\t\t\t\t$hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n\t\t\t\tif (!empty($hostOrg)) $org_id = $hostOrg['Organisation']['id'];\n\t\t\t\telse {\n\t\t\t\t\t$firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n\t\t\t\t\t$org_id = $firstOrg['Organisation']['id'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Configure::read('Security.salt')) {\n\t\t\t\t// populate the DB with the first user if it's empty\n\t\t\t\tif ($this->User->find('count') == 0 ) {\n\t\t\t\t\t$admin = array('User' => array(\n\t\t\t\t\t\t'id' => 1,\n\t\t\t\t\t\t'email' => 'admin@admin.test',\n\t\t\t\t\t\t'org_id' => $org_id,\n\t\t\t\t\t\t'password' => 'admin',\n\t\t\t\t\t\t'confirm_password' => 'admin',\n\t\t\t\t\t\t'authkey' => $this->User->generateAuthKey(),\n\t\t\t\t\t\t'nids_sid' => 4000000,\n\t\t\t\t\t\t'newsread' => 0,\n\t\t\t\t\t\t'role_id' => 1,\n\t\t\t\t\t\t'change_pw' => 1\n\t\t\t\t\t));\n\t\t\t\t\t$this->User->validator()->remove('password'); // password is too simple, remove validation\n\t\t\t\t\t$this->User->save($admin);\n\t\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t\t$sql = \"SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));\";\n\t\t\t\t\t\t$this->User->query($sql);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function routeafterlogin() {\n\t\t// Terms and Conditions Page\n\t\tif (!$this->Auth->user('termsaccepted')) {\n\t\t\t$this->redirect(array('action' => 'terms'));\n\t\t}\n\t\t// Events list\n\t\t$this->redirect(array('controller' => 'events', 'action' => 'index'));\n\t}\n\n\tpublic function logout() {\n\t\tif ($this->Session->check('Auth.User')) { // TODO session, user is logged in, so ..\n\t\t\t$this->__extralog(\"logout\");\t// TODO Audit, __extralog, check: customLog i.s.o. __extralog, $this->User->customLog('logout', $this->Auth->user('id'), array());\n\t\t}\n\t\t$this->Session->setFlash(__('Good-Bye'));\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'User.id' => $this->Auth->user('id')\n\t\t\t),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tunset($user['User']['password']);\n\t\t$user['User']['action'] = 'logout';\n\t\t$this->User->save($user['User'], true, array('id'));\n\t\t$this->redirect($this->Auth->logout());\n\t}\n\n\tpublic function resetauthkey($id = null) {\n\t\tif (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n\t\t\tthrow new MethodNotAllowedException('User self-management has been disabled on this instance.');\n\t\t}\n\t\tif ($id == 'me') {\n\t\t\t$id = $this->Auth->user('id');\n\t\t}\n\t\tif (!$this->userRole['perm_auth']) {\n\t\t\tthrow new MethodNotAllowedException('Invalid action.');\n\t\t}\n\t\t$this->User->id = $id;\n\t\tif (!$id || !$this->User->exists($id)) {\n\t\t\tthrow new MethodNotAllowedException('Invalid user.');\n\t\t}\n\t\t$user = $this->User->read();\n\t\t$oldKey = $this->User->data['User']['authkey'];\n\t\tif (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $this->User->data['User']['org_id']) && ($this->Auth->user('id') != $id)) {\n\t\t\tthrow new MethodNotAllowedException('Invalid user.');\n\t\t}\n\t\t$newkey = $this->User->generateAuthKey();\n\t\t$this->User->saveField('authkey', $newkey);\n\t\t$this->__extralog(\n\t\t\t\t'reset_auth_key',\n\t\t\t\t'Authentication key for user ' . $user['User']['id'] . ' (' . $user['User']['email'] . ')',\n\t\t\t\t$fieldsResult = 'authkey(' . $oldKey . ') => (' . $newkey . ')'\n\t\t);\n\t\tif (!$this->_isRest()) {\n\t\t\t$this->Session->setFlash(__('New authkey generated.', true));\n\t\t\t$this->_refreshAuth();\n\t\t\t$this->redirect($this->referer());\n\t\t} else {\n\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'User\\'s authkey has been reset.');\n\t\t}\n\t}\n\n\tpublic function histogram($selected = null) {\n\t\t//if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n\t\tif ($selected == '[]') $selected = null;\n\t\t$selectedTypes = array();\n\t\tif ($selected) $selectedTypes = json_decode($selected);\n\t\t$org_ids = $this->User->Event->find('list', array(\n\t\t\t'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n\t\t\t'group' => array('Event.orgc_id')\n\t\t));\n\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t'fields' => array('Organisation.id', 'Organisation.name'),\n\t\t\t'conditions' => array('Organisation.id' => $org_ids)\n\t\t));\n\t\t$temp = $this->User->Event->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('distinct(orgc_id)'),\n\t\t\t'contain' => array('Orgc' => array('fields' => array('Orgc.name'))),\n\t\t));\n\t\t$orgs = array(0 => 'All organisations');\n\t\tforeach ($temp as $t) {\n\t\t\tif (!isset($t['Event'])) $t['Event'] = $t[0]; // Postgres workaround, array element has index 0 instead of Event\n\t\t\t$orgs[$t['Event']['orgc_id']] = $t['Orgc']['name'];\n\t\t}\n\t\t$data = array();\n\t\t$max = 1;\n\t\tforeach ($orgs as $org_id => $org_name) {\n\t\t\t$conditions = array('Attribute.deleted' => 0);\n\t\t\tif ($selected) $conditions['Attribute.type'] = $selectedTypes;\n\t\t\tif ($org_id != 0) $conditions['Event.orgc_id'] = $org_id;\n\t\t\t$params = array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n\t\t\t\t'group' => array('Attribute.type'),\n\t\t\t\t'joins' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'table' => 'events',\n\t\t\t\t\t\t'alias' => 'Event',\n\t\t\t\t\t\t'type' => 'LEFT',\n\t\t\t\t\t\t'conditions' => array(\n\t\t\t\t\t\t\t'Attribute.event_id = Event.id'\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t//'order' => array('num_types DESC'),\n\t\t\t\t'conditions' => $conditions\n\t\t\t);\n\t\t\t$temp = $this->User->Event->Attribute->find('all', $params);\n\t\t\t$temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n\t\t\t$total = 0;\n\t\t\tforeach ($temp as $k => $v) {\n\t\t\t\tif (intval($v) > $max) $max = intval($v);\n\t\t\t\t$total += intval($v);\n\t\t\t}\n\t\t\t$data[$org_id]['data'] = $temp;\n\t\t\t$data[$org_id]['org_name'] = $org_name;\n\t\t\t$data[$org_id]['total'] = $total;\n\t\t}\n\t\tuasort($data, function($a, $b) {\n\t\t\treturn $b['total'] - $a['total'];\n\t\t});\n\t\t$this->set('data', $data);\n\t\t$this->set('max', $max);\n\t\t$this->set('selectedTypes', $selectedTypes);\n\n\t\t// Nice graphical histogram\n\t\t$sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n\t\tApp::uses('ColourPaletteTool', 'Tools');\n\t\t$paletteTool = new ColourPaletteTool();\n\t\t$colours = $paletteTool->createColourPalette(count($sigTypes));\n\t\t$typeDb = array();\n\t\tforeach ($sigTypes as $k => $type) {\n\t\t\t$typeDb[$type] = $colours[$k];\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('typeDb', $typeDb);\n\t\t\t$this->set('sigTypes', $sigTypes);\n\t\t\t$this->layout = 'ajax';\n\t\t}\n\t}\n\n\tpublic function terms() {\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->User->id = $this->Auth->user('id');\n\t\t\t$this->User->saveField('termsaccepted', true);\n\t\t\t$this->_refreshAuth(); // refresh auth info\n\t\t\t$this->Session->setFlash(__('You accepted the Terms and Conditions.'));\n\t\t\t$this->redirect(array('action' => 'routeafterlogin'));\n\t\t}\n\t\t$this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n\t}\n\n\tpublic function downloadTerms() {\n\t\tif (!Configure::read('MISP.terms_file')) {\n\t\t\t$termsFile = APP .\"View/Users/terms\";\n\t\t} else {\n\t\t\t$termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n\t\t}\n\t\t$this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n\t\treturn $this->response;\n\t}\n\n\tprivate function __extralog($action = null, $description = null, $fieldsResult = null) {\t// TODO move audit to AuditsController?\n\t\t// new data\n\t\t$model = 'User';\n\t\t$modelId = $this->Auth->user('id');\n\t\tif ($action == 'login') {\n\t\t\t$description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->data['User']['email'];\n\t\t} else if ($action == 'logout') {\n\t\t\t$description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->Auth->user('email');\n\t\t} else if ($action == 'edit') {\n\t\t\t$description = \"User (\" . $this->User->id . \"): \" . $this->data['User']['email'];\n\t\t} else if ($action == 'change_pw') {\n\t\t\t$description = \"User (\" . $this->User->id . \"): \" . $this->data['User']['email'];\n\t\t\t$fieldsResult = \"Password changed.\";\n\t\t}\n\n\t\t// query\n\t\t$this->Log = ClassRegistry::init('Log');\n\t\t$this->Log->create();\n\t\t$this->Log->save(array(\n\t\t\t'org' => $this->Auth->user('Organisation')['name'],\n\t\t\t'model' => $model,\n\t\t\t'model_id' => $modelId,\n\t\t\t'email' => $this->Auth->user('email'),\n\t\t\t'action' => $action,\n\t\t\t'title' => $description,\n\t\t\t'change' => isset($fieldsResult) ? $fieldsResult : ''));\n\n\t\t// write to syslogd as well\n\t\tApp::import('Lib', 'SysLog.SysLog');\n\t\t$syslog = new SysLog();\n\t\tif (isset($fieldsResult) && $fieldsResult) {\n\t\t\t$syslog->write('notice', $description . ' -- ' . $action . ' -- ' . $fieldsResult);\n\t\t} else {\n\t\t\t$syslog->write('notice', $description . ' -- ' . $action);\n\t\t}\n\t}\n\n\t// Used for fields_before and fields for audit\n\tpublic function arrayCopy(array $array) {\n\t\t$result = array();\n\t\tforeach ($array as $key => $val) {\n\t\t\tif (is_array($val)) {\n\t\t\t\t$result[$key] = arrayCopy($val);\n\t\t\t} else if (is_object($val)) {\n\t\t\t\t$result[$key] = clone $val;\n\t\t\t} else {\n\t\t\t\t$result[$key] = $val;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function checkAndCorrectPgps() {\n\t\tif (!self::_isAdmin()) throw new NotFoundException();\n\t\t$this->set('fails', $this->User->checkAndCorrectPgps());\n\t}\n\n\tpublic function admin_quickEmail($user_id) {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException();\n\t\t$conditions = array('User.id' => $user_id);\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t}\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => $conditions,\n\t\t\t'recursive' => -1\n\t\t));\n\t\t$error = false;\n\t\tif (empty($user)) {\n\t\t\t$error = 'Invalid user.';\n\t\t}\n\t\tif (!$error && $user['User']['disabled']) {\n\t\t\t$error = 'Cannot send an e-mail to this user as the account is disabled.';\n\t\t}\n\t\t$encryption = false;\n\t\tif (!$error && !empty($user['User']['gpgkey'])) {\n\t\t\t$encryption = 'PGP';\n\t\t} else if (!$error && !empty($user['User']['certif_public'])){\n\t\t\t$encryption = 'SMIME';\n\t\t}\n\t\t$this->set('encryption', $encryption);\n\t\tif (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n\t\t\t$error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n\t\t}\n\t\tif ($error) {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n\t\t\t} else {\n\t\t\t\t$this->Session->setFlash('Cannot send an e-mail to this user as the account is disabled.');\n\t\t\t\t$this->redirect('/admin/users/view/' . $user_id);\n\t\t\t}\n\t\t}\n\t\tif ($this->request->is('post')) {\n\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t$this->request->data['User'] = $this->request->data;\n\t\t\t}\n\t\t\tif (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n\t\t\t\t$message = 'Both the subject and the body have to be set.';\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\tthrow new MethodNotAllowedException($message);\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash($message);\n\t\t\t\t\t$this->redirect('/admin/users/quickEmail/' . $user_id);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n\t\t\tif ($this->_isRest()) {\n\t\t\t\tif ($result) {\n\t\t\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n\t\t\t\t} else {\n\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($result) {\n\t\t\t\t\t$this->Session->setFlash('Email sent.');\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash('Could not send e-mail.');\n\t\t\t\t}\n\t\t\t\t$this->redirect('/admin/users/view/' . $user_id);\n\t\t\t}\n\t\t} else if ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n\t\t}\n\t\t$this->set('encryption', $encryption);\n\t\t$this->set('user', $user);\n\t}\n\n\tpublic function admin_email() {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException();\n\t\t// User has filled in his contact form, send out the email.\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$conditions = array();\n\t\t\tif (!$this->_isSiteAdmin()) $conditions = array('org_id' => $this->Auth->user('org_id'));\n\t\t\tif ($this->request->data['User']['recipient'] != 1) $conditions['id'] = $this->request->data['User']['recipientEmailList'];\n\t\t\t$conditions['AND'][] = array('User.disabled' => 0);\n\t\t\t$users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n\t\t\t$this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n\t\t\t$failures = '';\n\t\t\tforeach ($users as $user) {\n\t\t\t\t$password = $this->User->generateRandomPassword();\n\t\t\t\t$body = str_replace('$password', $password, $this->request->data['User']['message']);\n\t\t\t\t$body = str_replace('$username', $user['User']['email'], $body);\n\t\t\t\t$result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n\t\t\t\t// if sending successful and action was a password change, update the user's password.\n\t\t\t\tif ($result && $this->request->data['User']['action'] != '0') {\n\t\t\t\t\t$this->User->id = $user['User']['id'];\n\t\t\t\t\t$this->User->saveField('password', $password);\n\t\t\t\t\t$this->User->saveField('change_pw', '1');\n\t\t\t\t}\n\t\t\t\tif (!$result) {\n\t\t\t\t\tif ($failures != '') $failures .= ', ';\n\t\t\t\t\t$failures .= $user['User']['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($failures != '') $this->Session->setFlash(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n\t\t\telse $this->Session->setFlash(__('E-mails sent.'));\n\t\t}\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) $conditions = array('org_id' => $this->Auth->user('org_id'));\n\t\t$conditions['User.disabled'] = 0;\n\t\t$temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email'), 'order' => array('email ASC'), 'conditions' => $conditions));\n\t\t$emails = array();\n\t\t// save all the emails of the users and set it for the dropdown list in the form\n\t\tforeach ($temp as $user) {\n\t\t\t$emails[$user['User']['id']] = $user['User']['email'];\n\t\t}\n\t\t$this->set('users', $temp);\n\t\t$this->set('recipientEmail', $emails);\n\t\t$this->set('org', Configure::read('MISP.org'));\n\t\t$textsToFetch = array('newUserText', 'passwordResetText');\n\t\t$this->loadModel('Server');\n\t\tforeach ($textsToFetch as $text) {\n\t\t\t${$text} = Configure::read('MISP.' . $text);\n\t\t\tif (!${$text}) ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n\t\t\t$this->set($text, ${$text});\n\t\t}\n\t}\n\n\tpublic function initiatePasswordReset($id, $firstTime = false) {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException('You are not authorised to do that.');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array('id' => $id),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n\t\t\tthrow new MethodNotAllowedException('You are not authorised to do that.');\n\t\t}\n\t\tif ($this->request->is('post')) {\n\t\t\tif (isset($this->request->data['User']['firstTime'])) $firstTime = $this->request->data['User']['firstTime'];\n\t\t\treturn new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n\t\t} else {\n\t\t\t$error = false;\n\t\t\t$encryption = false;\n\t\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t\t$encryption = 'PGP';\n\t\t\t} else if (!$error && !empty($user['User']['certif_public'])){\n\t\t\t\t$encryption = 'SMIME';\n\t\t\t}\n\t\t\t$this->set('encryption', $encryption);\n\t\t\tif (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n\t\t\t\t$error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n\t\t\t}\n\t\t\t$this->set('error', $error);\n\t\t\t$this->layout = 'ajax';\n\t\t\t$this->set('user', $user);\n\t\t\t$this->set('firstTime', $firstTime);\n\t\t\t$this->render('ajax/passwordResetConfirmationForm');\n\t\t}\n\t}\n\n\t// shows some statistics about the instance\n\tpublic function statistics($page = 'data') {\n\t\t$this->set('page', $page);\n\t\t$this->set('pages', array('data' => 'Usage data', 'orgs' => 'Organisations', 'tags' => 'Tags', 'attributehistogram' => 'Attribute histogram', 'sightings' => 'Sightings toplists'));\n\t\t$result = array();\n\t\tif ($page == 'data') {\n\t\t\t$result = $this->__statisticsData($this->params['named']);\n\t\t} else if ($page == 'orgs') {\n\t\t\t$result = $this->__statisticsOrgs($this->params['named']);\n\t\t} else if ($page == 'tags') {\n\t\t\t$result = $this->__statisticsTags($this->params['named']);\n\t\t} else if ($page == 'attributehistogram') {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->histogram($selected = null);\n\t\t\t} else {\n\t\t\t\t$this->render('statistics_histogram');\n\t\t\t}\n\t\t} else if ($page == 'sightings') {\n\t\t\t$result = $this->__statisticsSightings($this->params['named']);\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\tprivate function __statisticsData($params = array()) {\n\t\t// set all of the data up for the heatmaps\n\t\t$orgs = $this->User->Organisation->find('all', array('fields' => array('DISTINCT (name) AS name'), 'recursive' => -1));\n\t\t$this->loadModel('Log');\n\t\t$year = date('Y');\n\t\t$month = date('n');\n\t\t$month = $month - 5;\n\t\tif ($month < 1) {\n\t\t\t$year--;\n\t\t\t$month = 12 + $month;\n\t\t}\n\t\t// Some additional statistics\n\t\t$this_month = strtotime('first day of this month');\n\t\t$stats['event_count'] = $this->User->Event->find('count', null);\n\t\t$stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month)));\n\n\t\t$stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0)));\n\t\t$stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0)));\n\t\t$stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n\t\t$this->loadModel('Correlation');\n\t\t$this->Correlation->recursive = -1;\n\t\t$stats['correlation_count'] = $this->Correlation->find('count', null);\n\t\t$stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n\t\t$stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', null);\n\n\t\t$stats['user_count'] = $this->User->find('count', null);\n\t\t$stats['org_count'] = count($orgs);\n\n\t\t$this->loadModel('Thread');\n\t\t$stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0)));\n\t\t$stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\",$this_month), 'Thread.post_count >' => 0)));\n\n\t\t$stats['post_count'] = $this->Thread->Post->find('count', null);\n\t\t$stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\",$this_month))));\n\n\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'stats' => $stats\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('stats', $stats);\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t$this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n\t\t\t$this->set('end', strtotime(date('Y-m-d H:i:s')));\n\t\t\t$this->set('startDateCal', $year . ', ' . $month . ', 01');\n\t\t\t$range = '[5, 10, 50, 100]';\n\t\t\t$this->set('range', $range);\n\t\t\t$this->render('statistics_data');\n\t\t}\n\t}\n\n\tprivate function __statisticsSightings($params = array()) {\n\t\t$this->loadModel('Sighting');\n\t\t$conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n\t\tif (isset($params['timestamp'])) {\n\t\t\t$conditions['Sighting.date_sighting >'] = $params['timestamp'];\n\t\t}\n\t\t$sightings = $this->Sighting->find('all', array(\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n\t\t));\n\t\t$data = array();\n\t\t$toplist = array();\n\t\t$eventids = array();\n\t\tforeach ($sightings as $k => $v) {\n\t\t\tif ($v['Sighting']['source'] == '') {\n\t\t\t\t$v['Sighting']['source'] = 'Undefined';\n\t\t\t}\n\t\t\t$v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n\t\t\tif (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n\t\t\t} else {\n\t\t\t\t$data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n\t\t\t}\n\t\t\tif (!isset($toplist[$v['Sighting']['source']])) {\n\t\t\t\t$toplist[$v['Sighting']['source']] = 1;\n\t\t\t} else {\n\t\t\t\t$toplist[$v['Sighting']['source']]++;\n\t\t\t}\n\t\t\tif (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n\t\t\t}\n\t\t\tif (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n\t\t\t}\n\t\t}\n\t\tarsort($toplist);\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'toplist' => $toplist,\n\t\t\t\t'eventids' => $eventids\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('eventids', $eventids);\n\t\t\t$this->set('toplist', $toplist);\n\t\t\t$this->set('data', $data);\n\t\t\t$this->render('statistics_sightings');\n\t\t}\n\t}\n\n\tprivate function __statisticsOrgs($params = array()) {\n\t\t$this->loadModel('Organisation');\n\t\t$conditions = array();\n\t\tif (!isset($params['scope']) || $params['scope'] == 'local') {\n\t\t\t$params['scope'] = 'local';\n\t\t\t$conditions['Organisation.local'] = 1;\n\t\t} elseif ($params['scope'] == 'external') {\n\t\t\t$conditions['Organisation.local'] = 0;\n\t\t}\n\t\t$orgs = array();\n\t\t$orgs = $this->Organisation->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions,\n\t\t\t\t'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n\t\t));\n\t\t$orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n\t\t$users = $this->User->find('all', array(\n\t\t\t'group' => 'User.org_id',\n\t\t\t'conditions' => array('User.org_id' => array_keys($orgs)),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('org_id', 'count(*)')\n\t\t));\n\t\tforeach ($users as $user) {\n\t\t\t$orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n\t\t}\n\t\tunset($users);\n\t\t$events = $this->User->Event->find('all', array(\n\t\t\t'group' => 'Event.orgc_id',\n\t\t\t'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('Event.orgc_id', 'count(*)')\n\t\t));\n\t\tforeach ($events as $event) {\n\t\t\t$orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n\t\t}\n\t\tunset($events);\n\t\t$orgs = Set::combine($orgs, '{n}.name', '{n}');\n\t\t// f*** php\n\t\tuksort($orgs, 'strcasecmp');\n\t\tforeach ($orgs as $k => $value) {\n\t\t\tif (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n\t\t\t\t$orgs[$k]['logo'] = true;\n\t\t\t}\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->viewData($orgs, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('scope', $params['scope']);\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t$this->render('statistics_orgs');\n\t\t}\n\t}\n\n\tpublic function tagStatisticsGraph() {\n\t\t$this->loadModel('EventTag');\n\t\t$tags = $this->EventTag->getSortedTagList();\n\t\t$this->loadModel('Taxonomy');\n\t\t$taxonomies = $this->Taxonomy->find('list', array(\n\t\t\t\t'conditions' => array('enabled' => true),\n\t\t\t\t'fields' => array('Taxonomy.namespace')\n\t\t));\n\t\t$flatData = array();\n\t\t$tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n\t\t$this->set('tagIds', $tagIds);\n\t\tforeach ($tags as $key => $value) {\n\t\t\t$name = explode(':', $value['name']);\n\t\t\t$tags[$key]['taxonomy'] = 'custom';\n\t\t\tif (count($name) > 1) {\n\t\t\t\tif (in_array($name[0], $taxonomies)) {\n\t\t\t\t\t$tags[$key]['taxonomy'] = $name[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n\t\t}\n\t\t$treemap = array(\n\t\t\t\t'name' => 'tags',\n\t\t\t\t'children' => array()\n\t\t);\n\n\t\tforeach ($flatData as $key => $value) {\n\t\t\t $newElement = array(\n\t\t\t\t'name' => $key,\n\t\t\t\t'children' => array()\n\t\t\t);\n\t\t\tforeach ($value as $tag) {\n\t\t\t\t$newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n\t\t\t}\n\t\t\t$treemap['children'][] = $newElement;\n\t\t}\n\t\t$taxonomyColourCodes = array();\n\t\t$taxonomies = array_merge(array('custom'), $taxonomies);\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'flatData' => $flatData,\n\t\t\t\t'treemap' => $treemap\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('taxonomyColourCodes', $taxonomyColourCodes);\n\t\t\t$this->set('taxonomies', $taxonomies);\n\t\t\t$this->set('flatData', $flatData);\n\t\t\t$this->set('treemap', $treemap);\n\t\t\t$this->set('tags', $tags);\n\t\t\t$this->layout = 'treemap';\n\t\t\t$this->render('ajax/tag_statistics_graph');\n\t\t}\n\t}\n\n\tprivate function __statisticsTags($params = array()) {\n\t\t$trending_tags = array();\n\t\t$all_tags = array();\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->tagStatisticsGraph();\n\t\t} else {\n\t\t\t$this->render('statistics_tags');\n\t\t}\n\t}\n\n\tpublic function verifyGPG() {\n\t\tif (!self::_isSiteAdmin()) throw new NotFoundException();\n\t\t$user_results = $this->User->verifyGPG();\n\t\t$this->set('users', $user_results);\n\t}\n\n\tpublic function verifyCertificate() {\n\t\t$user_results = $this->User->verifyCertificate();\n\t\t$this->set('users', $user_results);\n\t}\n\n\t// Refreshes the Auth session with new/updated data\n\tprotected function _refreshAuth() {\n\t\t$oldUser = $this->Auth->user();\n\t\t$newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n\t\t// Rearrange it a bit to match the Auth object created during the login\n\t\t$newUser['User']['Role'] = $newUser['Role'];\n\t\t$newUser['User']['Organisation'] = $newUser['Organisation'];\n\t\tunset($newUser['Organisation'], $newUser['Role']);\n\t\t$this->Auth->login($newUser['User']);\n\t}\n\n\tpublic function fetchPGPKey($email = false) {\n\t\tif ($email == false) {\n\t\t\tthrow new NotFoundException('No email provided.');\n\t\t}\n\t\t$keys = $this->User->fetchPGPKey($email);\n\t\tif (is_numeric($keys)) {\n\t\t\tthrow new NotFoundException('Could not retrieved any keys from the key server.');\n\t\t}\n\t\t$this->set('keys', $keys);\n\t\t$this->autorender = false;\n\t\t$this->layout = false;\n\t\t$this->render('ajax/fetchpgpkey');\n\t}\n\n\tpublic function dashboard() {\n\t\t$events = array();\n\t\t// the last login in the session is not updated after the login - only in the db, so let's fetch it.\n\t\t$lastLogin = $this->Auth->user('last_login');\n\t\t$this->loadModel('Event');\n\t\t$events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n\t\t$events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n\t\t$notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n\t\t$this->set('notifications', $notifications);\n\t\t$this->set('events', $events);\n\t}\n}\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\n\nclass UsersController extends AppController {\n\n\tpublic $newkey;\n\n\tpublic $components = array(\n\t\t\t'Security',\n\t\t\t'Email',\n\t\t\t'RequestHandler'\n\t);\n\n\tpublic $paginate = array(\n\t\t\t'limit' => 60,\n\t\t\t'recursive' => -1,\n\t\t\t'order' => array(\n\t\t\t\t\t'Organisation.name' => 'ASC'\n\t\t\t),\n\t\t\t'contain' => array(\n\t\t\t\t'Organisation' => array('id', 'name'),\n\t\t\t\t'Role' => array('id', 'name', 'perm_auth')\n\t\t\t)\n\t);\n\n\tpublic $helpers = array('Js' => array('Jquery'));\n\n\tpublic function beforeFilter() {\n\t\tparent::beforeFilter();\n\n\t\t// what pages are allowed for non-logged-in users\n\t\t$this->Auth->allow('login', 'logout');\n\t}\n\n\tpublic function view($id = null) {\n\t\tif (\"me\" == $id) $id = $this->Auth->user('id');\n\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('id') != $id) {\n\t\t\tthrow new NotFoundException(__('Invalid user or not authorised.'));\n\t\t}\n\t\tif (!is_numeric($id) && !empty($id)) {\n\t\t\t$userId = $this->User->find('first', array(\n\t\t\t\t\t'conditions' => array('email' => $id),\n\t\t\t\t\t'fields' => array('id')\n\t\t\t));\n\t\t\t$id = $userid['User']['id'];\n\t\t}\n\t\t$this->User->id = $id;\n\t\t$this->User->recursive = 0;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$user = $this->User->read(null, $id);\n\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t$pgpDetails = $this->User->verifySingleGPG($user);\n\t\t\t$user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n\t\t\t$user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\tunset($user['User']['server_id']);\n\t\t\t$user['User']['password'] = '*****';\n\t\t\treturn $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n\t\t} else {\n\t\t\t$this->set('user', $user);\n\t\t}\n\t}\n\n\tpublic function request_API(){\n\t\tif (Configure::read('MISP.disable_emailing')) {\n\t\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'API access request failed. E-mailing is currently disabled on this instance.')), 'status'=>200, 'type' => 'json'));\n\t\t}\n\t\t$responsibleAdmin = $this->User->findAdminsResponsibleForUser($this->Auth->user());\n\t\tif (isset($responsibleAdmin['email']) && !empty($responsibleAdmin['email'])) {\n\t\t\t$subject = \"[MISP \" . Configure::read('MISP.org') . \"] User requesting API access\";\n\t\t\t$body = \"A user (\" . $this->Auth->user('email') . \") has sent you a request to enable his/her API key access.\" . PHP_EOL;\n\t\t\t$body .= \"You can edit the user's profile at \" . Configure::read('MISP.baseurl') . '/admin/users/edit/' . $this->Auth->user('id');\n\t\t\t$user = $this->User->find('first', array('conditions' => array('User.id' => $responsibleAdmin['id'])));\n\t\t\t$result = $this->User->sendEmail($user, $body, false, $subject);\n\t\t\tif ($result) {\n\t\t\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => true, 'success' => 'API access requested.')), 'status'=>200, 'type' => 'json'));\n\t\t\t}\n\t\t}\n\t\treturn new CakeResponse(array('body'=> json_encode(array('saved' => false, 'errors' => 'Something went wrong, please try again later.')), 'status'=>200, 'type' => 'json'));\n\t}\n\n\tpublic function edit() {\n\t\tif (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) throw new MethodNotAllowedException('User self-management has been disabled on this instance.');\n\t\t$id = $this->Auth->user('id');\n\t\t$this->User->read(null, $id);\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException('Something went wrong. Your user account could not be accessed.');\n\t\t}\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$abortPost = false;\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\t\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t// What fields should be saved (allowed to be saved)\n\t\t\t\t$fieldList = array('email', 'autoalert', 'gpgkey', 'certif_public', 'nids_sid', 'contactalert', 'disabled');\n\t\t\t\tif (\"\" != $this->request->data['User']['password'])\n\t\t\t\t\t$fieldList[] = 'password';\n\t\t\t\t// Save the data\n\t\t\t\tif ($this->User->save($this->request->data, true ,$fieldList)) {\n\t\t\t\t\t$this->Session->setFlash(__('The profile has been updated'));\n\t\t\t\t\t$this->_refreshAuth();\n\t\t\t\t\t$this->redirect(array('action' => 'view', $id));\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The profile could not be updated. Please, try again.'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->User->set('password', '');\n\t\t\t$this->request->data = $this->User->data;\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$roles = $this->User->Role->find('list');\n\t\t$this->set(compact('roles'));\n\t\t$this->set('id', $id);\n\t}\n\n\tpublic function change_pw() {\n\t\t$id = $this->Auth->user('id');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array('User.id' => $id),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$abortPost = false;\n\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t} else {\n\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t// What fields should be saved (allowed to be saved)\n\t\t\t\t$user['User']['change_pw'] = 0;\n\t\t\t\t$user['User']['password'] = $this->request->data['User']['password'];\n\t\t\t\t$user['User']['confirm_password'] = $this->request->data['User']['confirm_password'];\n\t\t\t\t$temp = $user['User']['password'];\n\t\t\t\t// Save the data\n\t\t\t\tif ($this->User->save($user)) {\n\t\t\t\t\t$this->Session->setFlash(__('Password Changed.'));\n\t\t\t\t\t$this->_refreshAuth();\n\t\t\t\t\t$this->__extralog(\"change_pw\");\n\t\t\t\t\t$this->redirect(array('action' => 'view', $id));\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The password could not be updated. Make sure you meet the minimum password length / complexity requirements.'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$this->User->recursive = 0;\n\t\t$this->User->read(null, $id);\n\t\t$this->User->set('password', '');\n\t\t$this->request->data = $this->User->data;\n\t\t$roles = $this->User->Role->find('list');\n\t\t$this->set(compact('roles'));\n\t}\n\n\tpublic function admin_index() {\n\t\tif (!$this->_isAdmin()) throw new NotFoundException(__('Invalid user or not authorised.'));\n\t\t$this->User->virtualFields['org_ci'] = 'UPPER(Organisation.name)';\n\t\t$urlParams = \"\";\n\t\t$passedArgsArray = array();\n\t\t$booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n\t\t$textFields = array('role', 'email', 'all', 'authkey');\n\t\t// org admins can't see users of other orgs\n\t\tif ($this->_isSiteAdmin()) $textFields[] = 'org';\n\t\t$this->set('passedArgs', json_encode($this->passedArgs));\n\t\t// check each of the passed arguments whether they're a filter (could also be a sort for example) and if yes, add it to the pagination conditions\n\t\tforeach ($this->passedArgs as $k => $v) {\n\t\t\tif (substr($k, 0, 6) === 'search') {\n\t\t\t\tif ($v != \"\") {\n\t\t\t\t\tif ($urlParams != \"\") $urlParams .= \"/\";\n\t\t\t\t\t$urlParams .= $k . \":\" . $v;\n\t\t\t\t}\n\t\t\t\t$searchTerm = substr($k, 6);\n\t\t\t\tif (in_array($searchTerm, $booleanFields)) {\n\t\t\t\t\tif ($v != \"\") $this->paginate['conditions'][] = array('User.' . $searchTerm => $v);\n\t\t\t\t} else if (in_array($searchTerm, $textFields)) {\n\t\t\t\t\tif ($v != \"\") {\n\t\t\t\t\t\tif ($searchTerm == \"role\") $searchTerm = \"role_id\";\n\t\t\t\t\t\t$pieces = explode('|', $v);\n\t\t\t\t\t\t$test = array();\n\t\t\t\t\t\tforeach ($pieces as $piece) {\n\t\t\t\t\t\t\tif ($piece[0] == '!') {\n\t\t\t\t\t\t\t\tif ($searchTerm == 'email') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('LOWER(User.' . $searchTerm . ') NOT LIKE' => '%' . strtolower(substr($piece, 1)) . '%');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse if ($searchTerm == 'org') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('User.org_id !=' => substr($piece, 1));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array('User.' . $searchTerm => substr($piece, 1));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ($searchTerm == 'email') {\n\t\t\t\t\t\t\t\t\t$test['OR'][] = array('LOWER(User.' . $searchTerm . ') LIKE' => '%' . strtolower($piece) . '%');\n\t\t\t\t\t\t\t\t} else if ($searchTerm == 'org') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['OR'][] = array('User.org_id' => $piece);\n\t\t\t\t\t\t\t\t} else if ($searchTerm == 'all') {\n\t\t\t\t\t\t\t\t\t$this->paginate['conditions']['AND'][] = array(\n\t\t\t\t\t\t\t\t\t\t\t'OR' => array(\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(User.email) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(Organisation.name) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(Role.name) LIKE' => '%' . strtoupper($piece) . '%',\n\t\t\t\t\t\t\t\t\t\t\t\t\t'UPPER(User.authkey) LIKE' => '%' . strtoupper($piece) . '%'\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t$test['OR'][] = array('User.' . $searchTerm => $piece);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!empty($test)) $this->paginate['conditions']['AND'][] = $test;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$passedArgsArray[$searchTerm] = $v;\n\t\t\t}\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\t$conditions = array();\n\t\t\tif (isset($this->paginate['conditions'])) {\n\t\t\t\t$conditions = $this->paginate['conditions'];\n\t\t\t}\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t\t}\n\t\t\t$users = $this->User->find('all', array(\n\t\t\t\t\t'conditions' => $conditions,\n\t\t\t\t\t'recursive' => -1,\n\t\t\t\t\t'contain' => array(\n\t\t\t\t\t\t\t'Organisation' => array('id', 'name'),\n\t\t\t\t\t\t\t'Role' => array('id', 'name', 'perm_auth')\n\t\t\t\t\t)\n\t\t\t));\n\t\t\tforeach ($users as $key => $value) {\n\t\t\t\tunset($users['User']['password']);\n\t\t\t}\n\t\t\treturn $this->RestResponse->viewData($users, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('urlparams', $urlParams);\n\t\t\t$this->set('passedArgsArray', $passedArgsArray);\n\t\t\t$conditions = array();\n\t\t\tif ($this->_isSiteAdmin()) {\n\t\t\t\t$this->set('users', $this->paginate());\n\t\t\t} else {\n\t\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t\t\t$this->paginate['conditions']['AND'][] = $conditions;\n\t\t\t\t$this->set('users', $this->paginate());\n\t\t\t}\n\t\t\t$this->set('ajax', $this->request->is('ajax'));\n\t\t\tif ($this->request->is('ajax')) {\n\t\t\t\t$this->autoRender = false;\n\t\t\t\t$this->layout = false;\n\t\t\t\t$this->render('ajax/admin_index');\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function admin_filterUserIndex() {\n\t\tif (!$this->_isAdmin() && !$this->_isSiteAdmin()) throw new MethodNotAllowedException();\n\t\t$passedArgsArray = array();\n\t\t$booleanFields = array('autoalert', 'contactalert', 'termsaccepted');\n\t\t$textFields = array('role', 'email', 'authkey');\n\t\t$showOrg = 0;\n\t\t// org admins can't see users of other orgs\n\t\tif ($this->_isSiteAdmin()) {\n\t\t\t$textFields[] = 'org';\n\t\t\t$showOrg = 1;\n\t\t}\n\t\t$this->set('differentFilters', $booleanFields);\n\t\t$this->set('simpleFilters', $textFields);\n\t\t$rules = array_merge($booleanFields, $textFields);\n\t\t$this->set('showorg', $showOrg);\n\n\t\t$filtering = array();\n\t\tforeach ($booleanFields as $b) {\n\t\t\t$filtering[$b] = '';\n\t\t}\n\t\tforeach ($textFields as $t) {\n\t\t\t$filtering[$t] = array('OR' => array(), 'NOT' => array());\n\t\t}\n\n\t\tforeach ($this->passedArgs as $k => $v) {\n\t\t\tif (substr($k, 0, 6) === 'search') {\n\t\t\t\t$searchTerm = substr($k, 6);\n\t\t\t\tif (in_array($searchTerm, $booleanFields)) {\n\t\t\t\t\t$filtering[$searchTerm] = $v;\n\t\t\t\t} else if (in_array($searchTerm, $textFields)) {\n\t\t\t\t\t$pieces = explode('|', $v);\n\t\t\t\t\tforeach ($pieces as $piece) {\n\t\t\t\t\t\tif ($piece[0] == '!') $filtering[$searchTerm]['NOT'][] = substr($piece,1);\n\t\t\t\t\t\telse $filtering[$searchTerm]['OR'][] = $piece;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$passedArgsArray[$searchTerm] = $v;\n\t\t\t}\n\t\t}\n\t\t$this->set('filtering', json_encode($filtering));\n\n\t\t$roles = $this->User->Role->find('all', array('recursive' => -1));\n\t\t$roleNames = array();\n\t\t$roleJSON = array();\n\t\tforeach ($roles as $k => $v) {\n\t\t\t$roleNames[$v['Role']['id']] = $v['Role']['name'];\n\t\t\t$roleJSON[] = array('id' => $v['Role']['id'], 'value' => $v['Role']['name']);\n\t\t}\n\t\t$temp = $this->User->Organisation->find('all', array(\n\t\t\t'conditions' => array('local' => 1),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('id', 'name'),\n\t\t\t'order' => array('LOWER(name) ASC')\n\t\t));\n\t\t$orgs = array();\n\t\tforeach ($temp as $org) {\n\t\t\t$orgs[$org['Organisation']['id']] = $org['Organisation']['name'];\n\t\t}\n\t\t$this->set('orgs', $orgs);\n\t\t$this->set('roles', $roleNames);\n\t\t$this->set('roleJSON', json_encode($roleJSON));\n\t\t$rules = $this->_arrayToValuesIndexArray($rules);\n\t\t$this->set('rules', $rules);\n\t\t$this->set('baseurl', Configure::read('MISP.baseurl'));\n\t\t$this->layout = 'ajax';\n\t}\n\n\tpublic function admin_view($id = null) {\n\t\t$this->User->id = $id;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$user = $this->User->read(null, $id);\n\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t$pgpDetails = $this->User->verifySingleGPG($user);\n\t\t\t$user['User']['pgp_status'] = isset($pgpDetails[2]) ? $pgpDetails[2] : 'OK';\n\t\t\t$user['User']['fingerprint'] = !empty($pgpDetails[4]) ? $pgpDetails[4] : 'N/A';\n\t\t}\n\t\t$user['User']['orgAdmins'] = $this->User->getOrgAdminsForOrg($user['User']['org_id'], $user['User']['id']);\n\t\t$this->set('user', $user);\n\t\tif (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $user['User']['org_id'])) {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\t$user['User']['password'] = '*****';\n\t\t\treturn $this->RestResponse->viewData(array('User' => $user['User']), $this->response->type());\n\t\t} else {\n\t\t\t$temp = $this->User->data['User']['invited_by'];\n\t\t\t$this->set('id', $id);\n\t\t\t$this->set('user2', $this->User->read(null, $temp));\n\t\t}\n\t}\n\n\tpublic function admin_add() {\n\t\tif (!$this->_isAdmin()) throw new Exception('Administrators only.');\n\t\t$params = null;\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$params = array('conditions' => array('perm_site_admin !=' => 1, 'perm_sync !=' => 1, 'perm_regexp_access !=' => 1));\n\t\t}\n\t\t$this->loadModel('AdminSetting');\n\t\t$default_role_id = $this->AdminSetting->getSetting('default_role');\n\t\t$roles = $this->User->Role->find('list', $params);\n\t\t$syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n\t\tif ($this->request->is('post')) {\n\t\t\t// In case we don't get the data encapsulated in a User object\n\t\t\tif ($this->_isRest()) {\n\t\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t\t$this->request->data = array('User' => $this->request->data);\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['id'])) {\n\t\t\t\t\tunset($this->request->data['User']['id']);\n\t\t\t\t}\n\t\t\t\t$required_fields = array('role_id', 'email', 'org_id');\n\t\t\t\tforeach ($required_fields as $field) {\n\t\t\t\t\tif (empty($this->request->data['User'][$field])) {\n\t\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_add', false, array($field => 'Mandatory field not set.'), $this->response->type());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['password'])) {\n\t\t\t\t\t$this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n\t\t\t\t}\n\t\t\t\t$defaults = array(\n\t\t\t\t\t\t'external_auth_required' => 0,\n\t\t\t\t\t\t'external_auth_key' => '',\n\t\t\t\t\t\t'server_id' => 0,\n\t\t\t\t\t\t'gpgkey' => '',\n\t\t\t\t\t\t'certif_public' => '',\n\t\t\t\t\t\t'autoalert' => 0,\n\t\t\t\t\t\t'contactalert' => 0,\n\t\t\t\t\t\t'disabled' => 0,\n\t\t\t\t\t\t'newsread' => 0,\n\t\t\t\t\t\t'change_pw' => 1,\n\t\t\t\t\t\t'authkey' => $this->User->generateAuthKey(),\n\t\t\t\t\t\t'termsaccepted' => 0\n\t\t\t\t);\n\t\t\t\tforeach ($defaults as $key => $value) {\n\t\t\t\t\tif (!isset($this->request->data['User'][$key])) $this->request->data['User'][$key] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->request->data['User']['date_created'] = time();\n\t\t\t$this->request->data['User']['date_modified'] = time();\n\t\t\tif (!array_key_exists($this->request->data['User']['role_id'], $syncRoles)) $this->request->data['User']['server_id'] = 0;\n\t\t\t$this->User->create();\n\t\t\t// set invited by\n\t\t\t$this->loadModel('Role');\n\t\t\t$this->Role->recursive = -1;\n\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\tif (empty($chosenRole)) throw new MethodNotAllowedException('Invalid role');\n\t\t\t$this->request->data['User']['invited_by'] = $this->Auth->user('id');\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif ($chosenRole['Role']['perm_sync']) {\n\t\t\t\t\t$this->request->data['User']['change_pw'] = 0;\n\t\t\t\t\t$this->request->data['User']['termsaccepted'] = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$this->request->data['User']['change_pw'] = 1;\n\t\t\t\t\t$this->request->data['User']['termsaccepted'] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!isset($this->request->data['User']['disabled'])) $this->request->data['User']['disabled'] = false;\n\t\t\t$this->request->data['User']['newsread'] = 0;\n\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t$this->request->data['User']['org_id'] = $this->Auth->user('org_id');\n\t\t\t\t$this->loadModel('Role');\n\t\t\t\t$this->Role->recursive = -1;\n\t\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\t\tif ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1) {\n\t\t\t\t\tthrow new Exception('You are not authorised to assign that role to a user.');\n\t\t\t\t}\n\t\t\t}\n\t\t\t$fieldList = array('password', 'email', 'external_auth_required', 'external_auth_key', 'enable_password', 'confirm_password', 'org_id', 'role_id', 'authkey', 'nids_sid', 'server_id', 'gpgkey', 'certif_public', 'autoalert', 'contactalert', 'disabled', 'invited_by', 'change_pw', 'termsaccepted', 'newsread', 'date_created', 'date_modified');\n\t\t\tif ($this->User->save($this->request->data, true, $fieldList)) {\n\t\t\t\t$notification_message = '';\n\t\t\t\tif (!empty($this->request->data['User']['notify'])) {\n\t\t\t\t\t$user = $this->User->find('first', array('conditions' => array('User.id' => $this->User->id), 'recursive' => -1));\n\t\t\t\t\t$password = isset($this->request->data['User']['password']) ? $this->request->data['User']['password'] : false;\n\t\t\t\t\t$result = $this->User->initiatePasswordReset($user, true, true, $password);\n\t\t\t\t\tif ($result) {\n\t\t\t\t\t\t$notification_message .= ' User notified of new credentials.';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t\t\t\t'conditions' => array('User.id' => $this->User->id),\n\t\t\t\t\t\t\t'recursive' => -1\n\t\t\t\t\t));\n\t\t\t\t\t$user['User']['password'] = '******';\n\t\t\t\t\treturn $this->RestResponse->viewData($user, $this->response->type());\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash(__('The user has been saved.' . $notification_message));\n\t\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_add', false, $this->User->validationErrors, $this->response->type());\n\t\t\t\t} else {\n\t\t\t\t\t// reset auth key for a new user\n\t\t\t\t\t$this->set('authkey', $this->newkey);\n\t\t\t\t\t$this->Session->setFlash(__('The user could not be saved. Please, try again.'));\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t$this->newkey = $this->User->generateAuthKey();\n\t\t\t$this->set('authkey', $this->newkey);\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->describe('Users', 'admin_add', false, $this->response->type());\n\t\t} else {\n\t\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t\t\t'conditions' => array('local' => 1),\n\t\t\t\t\t'order' => array('lower(name) asc')\n\t\t\t));\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t// generate auth key for a new user\n\t\t\t$this->loadModel('Server');\n\t\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t\t$conditions = array();\n\t\t\tif (!$this->_isSiteAdmin()) $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n\t\t\t$temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n\t\t\t$servers = array(0 => 'Not bound to a server');\n\t\t\tif (!empty($temp)) foreach ($temp as $t) {\n\t\t\t\tif (!empty($t['Server']['name'])) $servers[$t['Server']['id']] = $t['Server']['name'];\n\t\t\t\telse $servers[$t['Server']['id']] = $t['Server']['url'];\n\t\t\t}\n\t\t\t$this->set('currentOrg', $this->Auth->user('org_id'));\n\t\t\t$this->set('isSiteAdmin', $this->_isSiteAdmin());\n\t\t\t$this->set('default_role_id', $default_role_id);\n\t\t\t$this->set('servers', $servers);\n\t\t\t$this->set(compact('roles'));\n\t\t\t$this->set(compact('syncRoles'));\n\t\t}\n\t}\n\n\tpublic function admin_edit($id = null) {\n\t\t$this->set('currentOrg', $this->Auth->user('org_id'));\n\t\t$this->User->id = $id;\n\t\tif (!$this->User->exists()) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$params = array();\n\t\t$allowedRole = '';\n\t\t$userToEdit = $this->User->find('first', array(\n\t\t\t\t'conditions' => array('id' => $id),\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('id', 'role_id', 'email', 'org_id'),\n\t\t));\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t// Org admins should be able to select the role that is already assigned to an org user when editing them.\n\t\t\t// What happened previously:\n\t\t\t// Org admin edits another org admin of the same org\n\t\t\t// Org admin is not allowed to set privileged access roles (site_admin/sync/regex)\n\t\t\t// MISP automatically chooses the first available option for the user as the selected setting (usually user)\n\t\t\t// Org admin is downgraded to a user\n\t\t\t// Now we make an exception for the already assigned role, both in the form and the actual edit.\n\t\t\tif ($userToEdit['User']['org_id'] != $this->Auth->user('org_id')) throw new Exception('Invalid user');\n\t\t\t$allowedRole = $userToEdit['User']['role_id'];\n\t\t\t$params = array('conditions' => array(\n\t\t\t\t\t'OR' => array(\n\t\t\t\t\t\t\t'AND' => array(\n\t\t\t\t\t\t\t\t'perm_site_admin' => 0, 'perm_sync' => 0, 'perm_regexp_access' => 0\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t'id' => $allowedRole,\n\t\t\t\t\t)\n\t\t\t));\n\t\t}\n\t\t$roles = $this->User->Role->find('list', $params);\n\t\t$syncRoles = $this->User->Role->find('list', array('conditions' => array('perm_sync' => 1), 'recursive' => -1));\n\t\t$this->set('currentId', $id);\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t$this->request->data['User'] = $this->request->data;\n\t\t\t}\n\t\t\t$abortPost = false;\n\t\t\tif (!$this->_isRest()) {\n\t\t\t\tif (Configure::read('Security.require_password_confirmation')) {\n\n\t\t\t\t\tif (!empty($this->request->data['User']['current_password'])) {\n\t\t\t\t\t\t$hashed = $this->User->verifyPassword($this->Auth->user('id'), $this->request->data['User']['current_password']);\n\t\t\t\t\t\tif (!$hashed) {\n\t\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t\t$this->Session->setFlash('Invalid password. Please enter your current password to continue.');\n\t\t\t\t\t\t}\n\t\t\t\t\t\tunset($this->request->data['User']['current_password']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$abortPost = true;\n\t\t\t\t\t\t$this->Session->setFlash('Please enter your current password to continue.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!$abortPost) {\n\t\t\t\t$this->request->data['User']['id'] = $id;\n\t\t\t\tif (!isset($this->request->data['User']['email'])) {\n\t\t\t\t\t$this->request->data['User']['email'] = $userToEdit['User']['email'];\n\t\t\t\t}\n\t\t\t\tif (isset($this->request->data['User']['role_id']) && !array_key_exists($this->request->data['User']['role_id'], $syncRoles)) $this->request->data['User']['server_id'] = 0;\n\t\t\t\t$fields = array();\n\t\t\t\t$blockedFields = array('id', 'invited_by');\n\t\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t\t$blockedFields[] = 'org_id';\n\t\t\t\t}\n\t\t\t\tforeach (array_keys($this->request->data['User']) as $field) {\n\t\t\t\t\tif (in_array($field, $blockedFields)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ($field != 'password') array_push($fields, $field);\n\t\t\t\t}\n\t\t\t\t// TODO Audit, __extralog, fields get orig\n\t\t\t\t$fieldsOldValues = array();\n\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\tif ($field == 'enable_password') continue;\n\t\t\t\t\tif ($field != 'confirm_password') array_push($fieldsOldValues, $this->User->field($field));\n\t\t\t\t\telse array_push($fieldsOldValues, $this->User->field('password'));\n\t\t\t\t}\n\t\t\t\t// TODO Audit, __extralog, fields get orig END\n\t\t\t\tif (\n\t\t\t\t\tisset($this->request->data['User']['enable_password']) && $this->request->data['User']['enable_password'] != '0' &&\n\t\t\t\t\tisset($this->request->data['User']['password']) && \"\" != $this->request->data['User']['password']\n\t\t\t\t) {\n\t\t\t\t\t$fields[] = 'password';\n\t\t\t\t\tif ($this->_isRest() && !isset($this->request->data['User']['confirm_password'])) {\n\t\t\t\t\t\t$this->request->data['User']['confirm_password'] = $this->request->data['User']['password'];\n\t\t\t\t\t\t$fields[] = 'confirm_password';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!$this->_isRest()) {\n\t\t\t\t\t$fields[] = 'role_id';\n\t\t\t\t}\n\t\t\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t\t\t$this->loadModel('Role');\n\t\t\t\t\t$this->Role->recursive = -1;\n\t\t\t\t\t$chosenRole = $this->Role->findById($this->request->data['User']['role_id']);\n\t\t\t\t\tif (empty($chosenRole) || (($chosenRole['Role']['id'] != $allowedRole) && ($chosenRole['Role']['perm_site_admin'] == 1 || $chosenRole['Role']['perm_regexp_access'] == 1 || $chosenRole['Role']['perm_sync'] == 1))) {\n\t\t\t\t\t\tthrow new Exception('You are not authorised to assign that role to a user.');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ($this->User->save($this->request->data, true, $fields)) {\n\t\t\t\t\t// TODO Audit, __extralog, fields compare\n\t\t\t\t\t// newValues to array\n\t\t\t\t\t$fieldsNewValues = array();\n\t\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t\tif ($field != 'confirm_password') {\n\t\t\t\t\t\t\t$newValue = $this->data['User'][$field];\n\t\t\t\t\t\t\tif (gettype($newValue) == 'array') {\n\t\t\t\t\t\t\t\t$newValueStr = '';\n\t\t\t\t\t\t\t\t$cP = 0;\n\t\t\t\t\t\t\t\tforeach ($newValue as $newValuePart) {\n\t\t\t\t\t\t\t\t\tif ($cP < 2) $newValueStr .= '-' . $newValuePart;\n\t\t\t\t\t\t\t\t\telse $newValueStr = $newValuePart . $newValueStr;\n\t\t\t\t\t\t\t\t\t$cP++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tarray_push($fieldsNewValues, $newValueStr);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tarray_push($fieldsNewValues, $newValue);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tarray_push($fieldsNewValues, $this->data['User']['password']);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// compare\n\t\t\t\t\t$fieldsResultStr = '';\n\t\t\t\t\t$c = 0;\n\t\t\t\t\tforeach ($fields as $field) {\n\t\t\t\t\t\tif (isset($fieldsOldValues[$c]) && $fieldsOldValues[$c] != $fieldsNewValues[$c]) {\n\t\t\t\t\t\t\tif ($field != 'confirm_password' && $field != 'enable_password') {\n\t\t\t\t\t\t\t\t$fieldsResultStr = $fieldsResultStr . ', ' . $field . ' (' . $fieldsOldValues[$c] . ') => (' . $fieldsNewValues[$c] . ')';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$c++;\n\t\t\t\t\t}\n\t\t\t\t\t$fieldsResultStr = substr($fieldsResultStr, 2);\n\t\t\t\t\t$this->__extralog(\"edit\", \"user\", $fieldsResultStr);\t// TODO Audit, check: modify User\n\t\t\t\t\t// TODO Audit, __extralog, fields compare END\n\t\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t\t\t\t\t'conditions' => array('User.id' => $this->User->id),\n\t\t\t\t\t\t\t\t'recursive' => -1\n\t\t\t\t\t\t));\n\t\t\t\t\t\t$user['User']['password'] = '******';\n\t\t\t\t\t\treturn $this->RestResponse->viewData($user, $this->response->type());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->Session->setFlash(__('The user has been saved'));\n\t\t\t\t\t\t$this->_refreshAuth(); // in case we modify ourselves\n\t\t\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_edit', $id, $this->User->validationErrors, $this->response->type());\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->Session->setFlash(__('The user could not be saved. Please, try again.'));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->describe('Users', 'admin_edit', $id, $this->response->type());\n\t\t\t}\n\t\t\t$this->User->read(null, $id);\n\t\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $this->User->data['User']['org_id']) {\n\t\t\t\t$this->redirect(array('controller' => 'users', 'action' => 'index', 'admin' => true));\n\t\t\t}\n\t\t\t$this->User->set('password', '');\n\t\t\t$this->request->data = $this->User->data; // TODO CHECK\n\t\t}\n\t\tif ($this->_isSiteAdmin()) {\n\t\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t\t\t'conditions' => array('local' => 1),\n\t\t\t\t\t'order' => array('lower(name) asc')\n\t\t\t));\n\t\t} else {\n\t\t\t$orgs = array();\n\t\t}\n\t\t$this->loadModel('Server');\n\t\t$this->set('complexity', !empty(Configure::read('Security.password_policy_complexity')) ? Configure::read('Security.password_policy_complexity') : $this->Server->serverSettings['Security']['password_policy_complexity']['value']);\n\t\t$this->set('length', !empty(Configure::read('Security.password_policy_length')) ? Configure::read('Security.password_policy_length') : $this->Server->serverSettings['Security']['password_policy_length']['value']);\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) $conditions['Server.org_id LIKE'] = $this->Auth->user('org_id');\n\t\t$temp = $this->Server->find('all', array('conditions' => $conditions, 'recursive' => -1, 'fields' => array('id', 'name', 'url')));\n\t\t$servers = array(0 => 'Not bound to a server');\n\t\tforeach ($temp as $t) {\n\t\t\tif (!empty($t['Server']['name'])) $servers[$t['Server']['id']] = $t['Server']['name'];\n\t\t\telse $servers[$t['Server']['id']] = $t['Server']['url'];\n\t\t}\n\t\t$this->set('servers', $servers);\n\t\t$this->set('orgs', $orgs);\n\t\t$this->set('id', $id);\n\t\t$this->set(compact('roles'));\n\t\t$this->set(compact('syncRoles'));\n\t}\n\n\tpublic function admin_delete($id = null) {\n\t\tif (!$this->request->is('post')) {\n\t\t\tthrow new MethodNotAllowedException();\n\t\t}\n\t\tif (!$this->_isAdmin()) throw new Exception('Administrators only.');\n\t\t$this->User->id = $id;\n\t\t$conditions = array('User.id' => $id);\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['org_id'] = $this->Auth->user('org_id');\n\t\t}\n\t\t$user = $this->User->find('first', array(\n\t\t\t\t'conditions' => $conditions,\n\t\t\t\t'recursive' => -1\n\t\t));\n\t\tif (empty($user)) {\n\t\t\tthrow new NotFoundException(__('Invalid user'));\n\t\t}\n\t\t$fieldsDescrStr = 'User (' . $id . '): ' . $user['User']['email'];\n\t\tif ($this->User->delete($id)) {\n\t\t\t$this->__extralog(\"delete\", $fieldsDescrStr, '');\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'admin_delete', $id, $this->response->type(), 'User deleted.');\n\t\t\t} else {\n\t\t\t\t$this->Session->setFlash(__('User deleted'));\n\t\t\t\t$this->redirect(array('action' => 'index'));\n\t\t\t}\n\t\t}\n\t\t$this->Session->setFlash(__('User was not deleted'));\n\t\t$this->redirect(array('action' => 'index'));\n\t}\n\n\tpublic function updateLoginTime() {\n\t\tif (!$this->request->is('post')) throw new MethodNotAllowedException('This feature is only accessible via POST requests');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'recursive' => -1,\n\t\t\t'conditions' => array('User.id' => $this->Auth->user('id'))\n\t\t));\n\t\t$this->User->id = $this->Auth->user('id');\n\t\t$this->User->saveField('last_login', time());\n\t\t$this->User->saveField('current_login', time());\n\t\t$user = $this->User->getAuthUser($user['User']['id']);\n\t\t$this->Auth->login($user);\n\t\t$this->redirect(array('Controller' => 'User', 'action' => 'dashboard'));\n\t}\n\n\tpublic function login() {\n\t\t$this->Bruteforce = ClassRegistry::init('Bruteforce');\n\t\tif ($this->request->is('post') && isset($this->request->data['User']['email'])) {\n\t\t\tif ($this->Bruteforce->isBlacklisted($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email'])) {\n\t\t\t\tthrow new ForbiddenException('You have reached the maximum number of login attempts. Please wait ' . Configure::read('SecureAuth.expire') . ' seconds and try again.');\n\t\t\t}\n\t\t}\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t// Check the length of the user's authkey\n\t\t\t$userPass = $this->User->find('first', array(\n\t\t\t\t'conditions' => array('User.email' => $this->request->data['User']['email']),\n\t\t\t\t'fields' => array('User.password'),\n\t\t\t\t'recursive' => -1\n\t\t\t));\n\t\t\tif (!empty($userPass) && strlen($userPass['User']['password']) == 40) {\n\t\t\t\t$this->AdminSetting = ClassRegistry::init('AdminSetting');\n\t\t\t\t$db_version = $this->AdminSetting->find('all', array('conditions' => array('setting' => 'db_version')));\n\t\t\t\t$versionRequirementMet = $this->User->checkVersionRequirements($db_version[0]['AdminSetting']['value'], '2.4.77');\n\t\t\t\tif ($versionRequirementMet) {\n\t\t\t\t\t$passwordToSave = $this->request->data['User']['password'];\n\t\t\t\t}\n\t\t\t\tunset($this->Auth->authenticate['Form']['passwordHasher']);\n\t\t\t\t$this->Auth->constructAuthenticate();\n\t\t\t}\n\t\t}\n\t\tif ($this->Auth->login()) {\n\t\t\t$this->__extralog(\"login\");\t// TODO Audit, __extralog, check: customLog i.s.o. __extralog, no auth user?: $this->User->customLog('login', $this->Auth->user('id'), array('title' => '','user_id' => $this->Auth->user('id'),'email' => $this->Auth->user('email'),'org' => 'IN2'));\n\t\t\t$this->User->Behaviors->disable('SysLogLogable.SysLogLogable');\n\t\t\t$this->User->id = $this->Auth->user('id');\n\t\t\t$user = $this->User->find('first', array(\n\t\t\t\t'conditions' => array(\n\t\t\t\t\t'User.id' => $this->Auth->user('id')\n\t\t\t\t),\n\t\t\t\t'recursive' => -1\n\t\t\t));\n\t\t\tunset($user['User']['password']);\n\t\t\t$user['User']['action'] = 'login';\n\t\t\t$user['User']['last_login'] = $this->Auth->user('current_login');\n\t\t\t$user['User']['current_login'] = time();\n\t\t\t$this->User->save($user['User'], true, array('id', 'last_login', 'current_login'));\n\t\t\tif (empty($this->Auth->authenticate['Form']['passwordHasher']) && !empty($passwordToSave)) $this->User->saveField('password', $passwordToSave);\n\t\t\t$this->User->Behaviors->enable('SysLogLogable.SysLogLogable');\n\t\t\t// no state changes are ever done via GET requests, so it is safe to return to the original page:\n\t\t\t$this->redirect($this->Auth->redirectUrl());\n\t\t\t// $this->redirect(array('controller' => 'events', 'action' => 'index'));\n\t\t} else {\n\t\t\t$dataSourceConfig = ConnectionManager::getDataSource('default')->config;\n\t\t\t$dataSource = $dataSourceConfig['datasource'];\n\t\t\t// don't display authError before first login attempt\n\t\t\tif (str_replace(\"//\",\"/\",$this->webroot . $this->Session->read('Auth.redirect')) == $this->webroot && $this->Session->read('Message.auth.message') == $this->Auth->authError) {\n\t\t\t\t$this->Session->delete('Message.auth');\n\t\t\t}\n\t\t\t// don't display \"invalid user\" before first login attempt\n\t\t\tif ($this->request->is('post')) {\n\t\t\t\t$this->Session->setFlash(__('Invalid username or password, try again'));\n\t\t\t\tif (isset($this->request->data['User']['email'])) {\n\t\t\t\t\t$this->Bruteforce->insert($_SERVER['REMOTE_ADDR'], $this->request->data['User']['email']);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// populate the DB with the first role (site admin) if it's empty\n\t\t\t$this->loadModel('Role');\n\t\t\tif ($this->Role->find('count') == 0 ) {\n\t\t\t\t$siteAdmin = array('Role' => array(\n\t\t\t\t\t'id' => 1,\n\t\t\t\t\t'name' => 'Site Admin',\n\t\t\t\t\t'permission' => 3,\n\t\t\t\t\t'perm_add' => 1,\n\t\t\t\t\t'perm_modify' => 1,\n\t\t\t\t\t'perm_modify_org' => 1,\n\t\t\t\t\t'perm_publish' => 1,\n\t\t\t\t\t'perm_sync' => 1,\n\t\t\t\t\t'perm_admin' => 1,\n\t\t\t\t\t'perm_audit' => 1,\n\t\t\t\t\t'perm_auth' => 1,\n\t\t\t\t\t'perm_site_admin' => 1,\n\t\t\t\t\t'perm_regexp_access' => 1,\n\t\t\t\t\t'perm_sharing_group' => 1,\n\t\t\t\t\t'perm_template' => 1,\n\t\t\t\t\t'perm_tagger' => 1,\n\t\t\t\t));\n\t\t\t\t$this->Role->save($siteAdmin);\n\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t$sql = \"SELECT setval('roles_id_seq', (SELECT MAX(id) FROM roles));\";\n\t\t\t\t\t$this->Role->query($sql);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($this->User->Organisation->find('count', array('conditions' => array('Organisation.local' => true))) == 0) {\n\t\t\t\t$date = date('Y-m-d H:i:s');\n\t\t\t\t$org = array('Organisation' => array(\n\t\t\t\t\t\t'id' => 1,\n\t\t\t\t\t\t'name' => !empty(Configure::read('MISP.org')) ? Configure::read('MISP.org') : 'ADMIN',\n\t\t\t\t\t\t'description' => 'Automatically generated admin organisation',\n\t\t\t\t\t\t'type' => 'ADMIN',\n\t\t\t\t\t\t'uuid' => CakeText::uuid(),\n\t\t\t\t\t\t'local' => 1,\n\t\t\t\t\t\t'date_created' => $date,\n\t\t\t\t\t\t'sector' => '',\n\t\t\t\t\t\t'nationality' => ''\n\t\t\t\t));\n\t\t\t\t$this->User->Organisation->save($org);\n\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t$sql = \"SELECT setval('organisations_id_seq', (SELECT MAX(id) FROM organisations));\";\n\t\t\t\t\t$this->User->Organisation->query($sql);\n\t\t\t\t}\n\t\t\t\t$org_id = $this->User->Organisation->id;\n\t\t\t} else {\n\t\t\t\t$hostOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.name' => Configure::read('MISP.org'), 'Organisation.local' => true), 'recursive' => -1));\n\t\t\t\tif (!empty($hostOrg)) $org_id = $hostOrg['Organisation']['id'];\n\t\t\t\telse {\n\t\t\t\t\t$firstOrg = $this->User->Organisation->find('first', array('conditions' => array('Organisation.local' => true), 'order' => 'Organisation.id ASC'));\n\t\t\t\t\t$org_id = $firstOrg['Organisation']['id'];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Configure::read('Security.salt')) {\n\t\t\t\t// populate the DB with the first user if it's empty\n\t\t\t\tif ($this->User->find('count') == 0 ) {\n\t\t\t\t\t$admin = array('User' => array(\n\t\t\t\t\t\t'id' => 1,\n\t\t\t\t\t\t'email' => 'admin@admin.test',\n\t\t\t\t\t\t'org_id' => $org_id,\n\t\t\t\t\t\t'password' => 'admin',\n\t\t\t\t\t\t'confirm_password' => 'admin',\n\t\t\t\t\t\t'authkey' => $this->User->generateAuthKey(),\n\t\t\t\t\t\t'nids_sid' => 4000000,\n\t\t\t\t\t\t'newsread' => 0,\n\t\t\t\t\t\t'role_id' => 1,\n\t\t\t\t\t\t'change_pw' => 1\n\t\t\t\t\t));\n\t\t\t\t\t$this->User->validator()->remove('password'); // password is too simple, remove validation\n\t\t\t\t\t$this->User->save($admin);\n\t\t\t\t\t// PostgreSQL: update value of auto incremented serial primary key after setting the column by force\n\t\t\t\t\tif ($dataSource == 'Database/Postgres') {\n\t\t\t\t\t\t$sql = \"SELECT setval('users_id_seq', (SELECT MAX(id) FROM users));\";\n\t\t\t\t\t\t$this->User->query($sql);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic function routeafterlogin() {\n\t\t// Terms and Conditions Page\n\t\tif (!$this->Auth->user('termsaccepted')) {\n\t\t\t$this->redirect(array('action' => 'terms'));\n\t\t}\n\t\t// Events list\n\t\t$this->redirect(array('controller' => 'events', 'action' => 'index'));\n\t}\n\n\tpublic function logout() {\n\t\tif ($this->Session->check('Auth.User')) { // TODO session, user is logged in, so ..\n\t\t\t$this->__extralog(\"logout\");\t// TODO Audit, __extralog, check: customLog i.s.o. __extralog, $this->User->customLog('logout', $this->Auth->user('id'), array());\n\t\t}\n\t\t$this->Session->setFlash(__('Good-Bye'));\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'User.id' => $this->Auth->user('id')\n\t\t\t),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tunset($user['User']['password']);\n\t\t$user['User']['action'] = 'logout';\n\t\t$this->User->save($user['User'], true, array('id'));\n\t\t$this->redirect($this->Auth->logout());\n\t}\n\n\tpublic function resetauthkey($id = null) {\n\t\tif (!$this->_isAdmin() && Configure::read('MISP.disableUserSelfManagement')) {\n\t\t\tthrow new MethodNotAllowedException('User self-management has been disabled on this instance.');\n\t\t}\n\t\tif ($id == 'me') {\n\t\t\t$id = $this->Auth->user('id');\n\t\t}\n\t\tif (!$this->userRole['perm_auth']) {\n\t\t\tthrow new MethodNotAllowedException('Invalid action.');\n\t\t}\n\t\t$this->User->id = $id;\n\t\tif (!$id || !$this->User->exists($id)) {\n\t\t\tthrow new MethodNotAllowedException('Invalid user.');\n\t\t}\n\t\t$user = $this->User->read();\n\t\t$oldKey = $this->User->data['User']['authkey'];\n\t\tif (!$this->_isSiteAdmin() && !($this->_isAdmin() && $this->Auth->user('org_id') == $this->User->data['User']['org_id']) && ($this->Auth->user('id') != $id)) {\n\t\t\tthrow new MethodNotAllowedException('Invalid user.');\n\t\t}\n\t\t$newkey = $this->User->generateAuthKey();\n\t\t$this->User->saveField('authkey', $newkey);\n\t\t$this->__extralog(\n\t\t\t\t'reset_auth_key',\n\t\t\t\t'Authentication key for user ' . $user['User']['id'] . ' (' . $user['User']['email'] . ')',\n\t\t\t\t$fieldsResult = 'authkey(' . $oldKey . ') => (' . $newkey . ')'\n\t\t);\n\t\tif (!$this->_isRest()) {\n\t\t\t$this->Session->setFlash(__('New authkey generated.', true));\n\t\t\t$this->_refreshAuth();\n\t\t\t$this->redirect($this->referer());\n\t\t} else {\n\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'resetauthkey', $id, $this->response->type(), 'User\\'s authkey has been reset.');\n\t\t}\n\t}\n\n\tpublic function histogram($selected = null) {\n\t\t//if (!$this->request->is('ajax') && !$this->_isRest()) throw new MethodNotAllowedException('This function can only be accessed via AJAX or the API.');\n\t\tif ($selected == '[]') $selected = null;\n\t\t$selectedTypes = array();\n\t\tif ($selected) $selectedTypes = json_decode($selected);\n\t\t$org_ids = $this->User->Event->find('list', array(\n\t\t\t'fields' => array('Event.orgc_id', 'Event.orgc_id'),\n\t\t\t'group' => array('Event.orgc_id')\n\t\t));\n\t\t$orgs = $this->User->Organisation->find('list', array(\n\t\t\t'fields' => array('Organisation.id', 'Organisation.name'),\n\t\t\t'conditions' => array('Organisation.id' => $org_ids)\n\t\t));\n\t\t$temp = $this->User->Event->find('all', array(\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('distinct(orgc_id)'),\n\t\t\t'contain' => array('Orgc' => array('fields' => array('Orgc.name'))),\n\t\t));\n\t\t$orgs = array(0 => 'All organisations');\n\t\tforeach ($temp as $t) {\n\t\t\tif (!isset($t['Event'])) $t['Event'] = $t[0]; // Postgres workaround, array element has index 0 instead of Event\n\t\t\t$orgs[$t['Event']['orgc_id']] = $t['Orgc']['name'];\n\t\t}\n\t\t$data = array();\n\t\t$max = 1;\n\t\tforeach ($orgs as $org_id => $org_name) {\n\t\t\t$conditions = array('Attribute.deleted' => 0);\n\t\t\tif ($selected) $conditions['Attribute.type'] = $selectedTypes;\n\t\t\tif ($org_id != 0) $conditions['Event.orgc_id'] = $org_id;\n\t\t\t$params = array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'fields' => array('Attribute.type', 'COUNT(*) as num_types'),\n\t\t\t\t'group' => array('Attribute.type'),\n\t\t\t\t'joins' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'table' => 'events',\n\t\t\t\t\t\t'alias' => 'Event',\n\t\t\t\t\t\t'type' => 'LEFT',\n\t\t\t\t\t\t'conditions' => array(\n\t\t\t\t\t\t\t'Attribute.event_id = Event.id'\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\t//'order' => array('num_types DESC'),\n\t\t\t\t'conditions' => $conditions\n\t\t\t);\n\t\t\t$temp = $this->User->Event->Attribute->find('all', $params);\n\t\t\t$temp = Hash::combine($temp, '{n}.Attribute.type', '{n}.0.num_types');\n\t\t\t$total = 0;\n\t\t\tforeach ($temp as $k => $v) {\n\t\t\t\tif (intval($v) > $max) $max = intval($v);\n\t\t\t\t$total += intval($v);\n\t\t\t}\n\t\t\t$data[$org_id]['data'] = $temp;\n\t\t\t$data[$org_id]['org_name'] = $org_name;\n\t\t\t$data[$org_id]['total'] = $total;\n\t\t}\n\t\tuasort($data, function($a, $b) {\n\t\t\treturn $b['total'] - $a['total'];\n\t\t});\n\t\t$this->set('data', $data);\n\t\t$this->set('max', $max);\n\t\t$this->set('selectedTypes', $selectedTypes);\n\n\t\t// Nice graphical histogram\n\t\t$sigTypes = array_keys($this->User->Event->Attribute->typeDefinitions);\n\t\tApp::uses('ColourPaletteTool', 'Tools');\n\t\t$paletteTool = new ColourPaletteTool();\n\t\t$colours = $paletteTool->createColourPalette(count($sigTypes));\n\t\t$typeDb = array();\n\t\tforeach ($sigTypes as $k => $type) {\n\t\t\t$typeDb[$type] = $colours[$k];\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('typeDb', $typeDb);\n\t\t\t$this->set('sigTypes', $sigTypes);\n\t\t\t$this->layout = 'ajax';\n\t\t}\n\t}\n\n\tpublic function terms() {\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$this->User->id = $this->Auth->user('id');\n\t\t\t$this->User->saveField('termsaccepted', true);\n\t\t\t$this->_refreshAuth(); // refresh auth info\n\t\t\t$this->Session->setFlash(__('You accepted the Terms and Conditions.'));\n\t\t\t$this->redirect(array('action' => 'routeafterlogin'));\n\t\t}\n\t\t$this->set('termsaccepted', $this->Auth->user('termsaccepted'));\n\t}\n\n\tpublic function downloadTerms() {\n\t\tif (!Configure::read('MISP.terms_file')) {\n\t\t\t$termsFile = APP .\"View/Users/terms\";\n\t\t} else {\n\t\t\t$termsFile = APP . 'files' . DS . 'terms' . DS .  Configure::read('MISP.terms_file');\n\t\t}\n\t\t$this->response->file($termsFile, array('download' => true, 'name' => Configure::read('MISP.terms_file')));\n\t\treturn $this->response;\n\t}\n\n\tprivate function __extralog($action = null, $description = null, $fieldsResult = null) {\t// TODO move audit to AuditsController?\n\t\t// new data\n\t\t$model = 'User';\n\t\t$modelId = $this->Auth->user('id');\n\t\tif ($action == 'login') {\n\t\t\t$description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->data['User']['email'];\n\t\t} else if ($action == 'logout') {\n\t\t\t$description = \"User (\" . $this->Auth->user('id') . \"): \" . $this->Auth->user('email');\n\t\t} else if ($action == 'edit') {\n\t\t\t$description = \"User (\" . $this->User->id . \"): \" . $this->data['User']['email'];\n\t\t} else if ($action == 'change_pw') {\n\t\t\t$description = \"User (\" . $this->User->id . \"): \" . $this->data['User']['email'];\n\t\t\t$fieldsResult = \"Password changed.\";\n\t\t}\n\n\t\t// query\n\t\t$this->Log = ClassRegistry::init('Log');\n\t\t$this->Log->create();\n\t\t$this->Log->save(array(\n\t\t\t'org' => $this->Auth->user('Organisation')['name'],\n\t\t\t'model' => $model,\n\t\t\t'model_id' => $modelId,\n\t\t\t'email' => $this->Auth->user('email'),\n\t\t\t'action' => $action,\n\t\t\t'title' => $description,\n\t\t\t'change' => isset($fieldsResult) ? $fieldsResult : ''));\n\n\t\t// write to syslogd as well\n\t\tApp::import('Lib', 'SysLog.SysLog');\n\t\t$syslog = new SysLog();\n\t\tif (isset($fieldsResult) && $fieldsResult) {\n\t\t\t$syslog->write('notice', $description . ' -- ' . $action . ' -- ' . $fieldsResult);\n\t\t} else {\n\t\t\t$syslog->write('notice', $description . ' -- ' . $action);\n\t\t}\n\t}\n\n\t// Used for fields_before and fields for audit\n\tpublic function arrayCopy(array $array) {\n\t\t$result = array();\n\t\tforeach ($array as $key => $val) {\n\t\t\tif (is_array($val)) {\n\t\t\t\t$result[$key] = arrayCopy($val);\n\t\t\t} else if (is_object($val)) {\n\t\t\t\t$result[$key] = clone $val;\n\t\t\t} else {\n\t\t\t\t$result[$key] = $val;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\tpublic function checkAndCorrectPgps() {\n\t\tif (!self::_isAdmin()) throw new NotFoundException();\n\t\t$this->set('fails', $this->User->checkAndCorrectPgps());\n\t}\n\n\tpublic function admin_quickEmail($user_id) {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException();\n\t\t$conditions = array('User.id' => $user_id);\n\t\tif (!$this->_isSiteAdmin()) {\n\t\t\t$conditions['User.org_id'] = $this->Auth->user('org_id');\n\t\t}\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => $conditions,\n\t\t\t'recursive' => -1\n\t\t));\n\t\t$error = false;\n\t\tif (empty($user)) {\n\t\t\t$error = 'Invalid user.';\n\t\t}\n\t\tif (!$error && $user['User']['disabled']) {\n\t\t\t$error = 'Cannot send an e-mail to this user as the account is disabled.';\n\t\t}\n\t\t$encryption = false;\n\t\tif (!$error && !empty($user['User']['gpgkey'])) {\n\t\t\t$encryption = 'PGP';\n\t\t} else if (!$error && !empty($user['User']['certif_public'])){\n\t\t\t$encryption = 'SMIME';\n\t\t}\n\t\t$this->set('encryption', $encryption);\n\t\tif (!$error && !$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n\t\t\t$error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n\t\t}\n\t\tif ($error) {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $error, $this->response->type());\n\t\t\t} else {\n\t\t\t\t$this->Session->setFlash('Cannot send an e-mail to this user as the account is disabled.');\n\t\t\t\t$this->redirect('/admin/users/view/' . $user_id);\n\t\t\t}\n\t\t}\n\t\tif ($this->request->is('post')) {\n\t\t\tif (!isset($this->request->data['User'])) {\n\t\t\t\t$this->request->data['User'] = $this->request->data;\n\t\t\t}\n\t\t\tif (empty($this->request->data['User']['subject']) || empty($this->request->data['User']['body'])) {\n\t\t\t\t$message = 'Both the subject and the body have to be set.';\n\t\t\t\tif ($this->_isRest()) {\n\t\t\t\t\tthrow new MethodNotAllowedException($message);\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash($message);\n\t\t\t\t\t$this->redirect('/admin/users/quickEmail/' . $user_id);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$result = $this->User->sendEmail($user, $this->request->data['User']['body'], false, $this->request->data['User']['subject']);\n\t\t\tif ($this->_isRest()) {\n\t\t\t\tif ($result) {\n\t\t\t\t\treturn $this->RestResponse->saveSuccessResponse('User', 'admin_quickEmail', $id, $this->response->type(), 'User deleted.');\n\t\t\t\t} else {\n\t\t\t\t\treturn $this->RestResponse->saveFailResponse('Users', 'admin_quickEmail', false, $this->User->validationErrors, $this->response->type());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($result) {\n\t\t\t\t\t$this->Session->setFlash('Email sent.');\n\t\t\t\t} else {\n\t\t\t\t\t$this->Session->setFlash('Could not send e-mail.');\n\t\t\t\t}\n\t\t\t\t$this->redirect('/admin/users/view/' . $user_id);\n\t\t\t}\n\t\t} else if ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->describe('Users', 'admin_quickEmail', false, $this->response->type());\n\t\t}\n\t\t$this->set('encryption', $encryption);\n\t\t$this->set('user', $user);\n\t}\n\n\tpublic function admin_email() {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException();\n\t\t// User has filled in his contact form, send out the email.\n\t\tif ($this->request->is('post') || $this->request->is('put')) {\n\t\t\t$conditions = array();\n\t\t\tif (!$this->_isSiteAdmin()) $conditions = array('org_id' => $this->Auth->user('org_id'));\n\t\t\tif ($this->request->data['User']['recipient'] != 1) $conditions['id'] = $this->request->data['User']['recipientEmailList'];\n\t\t\t$conditions['AND'][] = array('User.disabled' => 0);\n\t\t\t$users = $this->User->find('all', array('recursive' => -1, 'order' => array('email ASC'), 'conditions' => $conditions));\n\t\t\t$this->request->data['User']['message'] = $this->User->adminMessageResolve($this->request->data['User']['message']);\n\t\t\t$failures = '';\n\t\t\tforeach ($users as $user) {\n\t\t\t\t$password = $this->User->generateRandomPassword();\n\t\t\t\t$body = str_replace('$password', $password, $this->request->data['User']['message']);\n\t\t\t\t$body = str_replace('$username', $user['User']['email'], $body);\n\t\t\t\t$result = $this->User->sendEmail($user, $body, false, $this->request->data['User']['subject']);\n\t\t\t\t// if sending successful and action was a password change, update the user's password.\n\t\t\t\tif ($result && $this->request->data['User']['action'] != '0') {\n\t\t\t\t\t$this->User->id = $user['User']['id'];\n\t\t\t\t\t$this->User->saveField('password', $password);\n\t\t\t\t\t$this->User->saveField('change_pw', '1');\n\t\t\t\t}\n\t\t\t\tif (!$result) {\n\t\t\t\t\tif ($failures != '') $failures .= ', ';\n\t\t\t\t\t$failures .= $user['User']['email'];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($failures != '') $this->Session->setFlash(__('E-mails sent, but failed to deliver the messages to the following recipients: ' . $failures));\n\t\t\telse $this->Session->setFlash(__('E-mails sent.'));\n\t\t}\n\t\t$conditions = array();\n\t\tif (!$this->_isSiteAdmin()) $conditions = array('org_id' => $this->Auth->user('org_id'));\n\t\t$conditions['User.disabled'] = 0;\n\t\t$temp = $this->User->find('all', array('recursive' => -1, 'fields' => array('id', 'email'), 'order' => array('email ASC'), 'conditions' => $conditions));\n\t\t$emails = array();\n\t\t// save all the emails of the users and set it for the dropdown list in the form\n\t\tforeach ($temp as $user) {\n\t\t\t$emails[$user['User']['id']] = $user['User']['email'];\n\t\t}\n\t\t$this->set('users', $temp);\n\t\t$this->set('recipientEmail', $emails);\n\t\t$this->set('org', Configure::read('MISP.org'));\n\t\t$textsToFetch = array('newUserText', 'passwordResetText');\n\t\t$this->loadModel('Server');\n\t\tforeach ($textsToFetch as $text) {\n\t\t\t${$text} = Configure::read('MISP.' . $text);\n\t\t\tif (!${$text}) ${$text} = $this->Server->serverSettings['MISP'][$text]['value'];\n\t\t\t$this->set($text, ${$text});\n\t\t}\n\t}\n\n\tpublic function initiatePasswordReset($id, $firstTime = false) {\n\t\tif (!$this->_isAdmin()) throw new MethodNotAllowedException('You are not authorised to do that.');\n\t\t$user = $this->User->find('first', array(\n\t\t\t'conditions' => array('id' => $id),\n\t\t\t'recursive' => -1\n\t\t));\n\t\tif (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != $user['User']['org_id']) {\n\t\t\tthrow new MethodNotAllowedException('You are not authorised to do that.');\n\t\t}\n\t\tif ($this->request->is('post')) {\n\t\t\tif (isset($this->request->data['User']['firstTime'])) $firstTime = $this->request->data['User']['firstTime'];\n\t\t\treturn new CakeResponse($this->User->initiatePasswordReset($user, $firstTime));\n\t\t} else {\n\t\t\t$error = false;\n\t\t\t$encryption = false;\n\t\t\tif (!empty($user['User']['gpgkey'])) {\n\t\t\t\t$encryption = 'PGP';\n\t\t\t} else if (!$error && !empty($user['User']['certif_public'])){\n\t\t\t\t$encryption = 'SMIME';\n\t\t\t}\n\t\t\t$this->set('encryption', $encryption);\n\t\t\tif (!$encryption && (Configure::read('GnuPG.onlyencrypted') || Configure::read('GnuPG.bodyonlyencrypted'))) {\n\t\t\t\t$error = 'No encryption key found for the user and the instance posture blocks non encrypted e-mails from being sent.';\n\t\t\t}\n\t\t\t$this->set('error', $error);\n\t\t\t$this->layout = 'ajax';\n\t\t\t$this->set('user', $user);\n\t\t\t$this->set('firstTime', $firstTime);\n\t\t\t$this->render('ajax/passwordResetConfirmationForm');\n\t\t}\n\t}\n\n\t// shows some statistics about the instance\n\tpublic function statistics($page = 'data') {\n\t\t$this->set('page', $page);\n\t\t$this->set('pages', array('data' => 'Usage data', 'orgs' => 'Organisations', 'tags' => 'Tags', 'attributehistogram' => 'Attribute histogram', 'sightings' => 'Sightings toplists'));\n\t\t$result = array();\n\t\tif ($page == 'data') {\n\t\t\t$result = $this->__statisticsData($this->params['named']);\n\t\t} else if ($page == 'orgs') {\n\t\t\t$result = $this->__statisticsOrgs($this->params['named']);\n\t\t} else if ($page == 'tags') {\n\t\t\t$result = $this->__statisticsTags($this->params['named']);\n\t\t} else if ($page == 'attributehistogram') {\n\t\t\tif ($this->_isRest()) {\n\t\t\t\treturn $this->histogram($selected = null);\n\t\t\t} else {\n\t\t\t\t$this->render('statistics_histogram');\n\t\t\t}\n\t\t} else if ($page == 'sightings') {\n\t\t\t$result = $this->__statisticsSightings($this->params['named']);\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $result;\n\t\t}\n\t}\n\n\tprivate function __statisticsData($params = array()) {\n\t\t// set all of the data up for the heatmaps\n\t\t$orgs = $this->User->Organisation->find('all', array('fields' => array('DISTINCT (name) AS name'), 'recursive' => -1));\n\t\t$this->loadModel('Log');\n\t\t$year = date('Y');\n\t\t$month = date('n');\n\t\t$month = $month - 5;\n\t\tif ($month < 1) {\n\t\t\t$year--;\n\t\t\t$month = 12 + $month;\n\t\t}\n\t\t// Some additional statistics\n\t\t$this_month = strtotime('first day of this month');\n\t\t$stats['event_count'] = $this->User->Event->find('count', null);\n\t\t$stats['event_count_month'] = $this->User->Event->find('count', array('conditions' => array('Event.timestamp >' => $this_month)));\n\n\t\t$stats['attribute_count'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.deleted' => 0)));\n\t\t$stats['attribute_count_month'] = $this->User->Event->Attribute->find('count', array('conditions' => array('Attribute.timestamp >' => $this_month, 'Attribute.deleted' => 0)));\n\t\t$stats['attributes_per_event'] = round($stats['attribute_count'] / $stats['event_count']);\n\n\t\t$this->loadModel('Correlation');\n\t\t$this->Correlation->recursive = -1;\n\t\t$stats['correlation_count'] = $this->Correlation->find('count', null);\n\t\t$stats['correlation_count'] = $stats['correlation_count'] / 2;\n\n\t\t$stats['proposal_count'] = $this->User->Event->ShadowAttribute->find('count', null);\n\n\t\t$stats['user_count'] = $this->User->find('count', null);\n\t\t$stats['org_count'] = count($orgs);\n\n\t\t$this->loadModel('Thread');\n\t\t$stats['thread_count'] = $this->Thread->find('count', array('conditions' => array('Thread.post_count >' => 0)));\n\t\t$stats['thread_count_month'] = $this->Thread->find('count', array('conditions' => array('Thread.date_created >' => date(\"Y-m-d H:i:s\",$this_month), 'Thread.post_count >' => 0)));\n\n\t\t$stats['post_count'] = $this->Thread->Post->find('count', null);\n\t\t$stats['post_count_month'] = $this->Thread->Post->find('count', array('conditions' => array('Post.date_created >' => date(\"Y-m-d H:i:s\",$this_month))));\n\n\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'stats' => $stats\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('stats', $stats);\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t$this->set('start', strtotime(date('Y-m-d H:i:s') . ' -5 months'));\n\t\t\t$this->set('end', strtotime(date('Y-m-d H:i:s')));\n\t\t\t$this->set('startDateCal', $year . ', ' . $month . ', 01');\n\t\t\t$range = '[5, 10, 50, 100]';\n\t\t\t$this->set('range', $range);\n\t\t\t$this->render('statistics_data');\n\t\t}\n\t}\n\n\tprivate function __statisticsSightings($params = array()) {\n\t\t$this->loadModel('Sighting');\n\t\t$conditions = array('Sighting.org_id' => $this->Auth->user('org_id'));\n\t\tif (isset($params['timestamp'])) {\n\t\t\t$conditions['Sighting.date_sighting >'] = $params['timestamp'];\n\t\t}\n\t\t$sightings = $this->Sighting->find('all', array(\n\t\t\t'conditions' => $conditions,\n\t\t\t'fields' => array('Sighting.date_sighting', 'Sighting.type', 'Sighting.source', 'Sighting.event_id')\n\t\t));\n\t\t$data = array();\n\t\t$toplist = array();\n\t\t$eventids = array();\n\t\tforeach ($sightings as $k => $v) {\n\t\t\tif ($v['Sighting']['source'] == '') {\n\t\t\t\t$v['Sighting']['source'] = 'Undefined';\n\t\t\t}\n\t\t\t$v['Sighting']['type'] = array('sighting', 'false-positive', 'expiration')[$v['Sighting']['type']];\n\t\t\tif (isset($data[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$data[$v['Sighting']['source']][$v['Sighting']['type']]++;\n\t\t\t} else {\n\t\t\t\t$data[$v['Sighting']['source']][$v['Sighting']['type']] = 1;\n\t\t\t}\n\t\t\tif (!isset($toplist[$v['Sighting']['source']])) {\n\t\t\t\t$toplist[$v['Sighting']['source']] = 1;\n\t\t\t} else {\n\t\t\t\t$toplist[$v['Sighting']['source']]++;\n\t\t\t}\n\t\t\tif (!isset($eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$eventids[$v['Sighting']['source']][$v['Sighting']['type']] = array();\n\t\t\t}\n\t\t\tif (!in_array($v['Sighting']['event_id'], $eventids[$v['Sighting']['source']][$v['Sighting']['type']])) {\n\t\t\t\t$eventids[$v['Sighting']['source']][$v['Sighting']['type']][] = $v['Sighting']['event_id'];\n\t\t\t}\n\t\t}\n\t\tarsort($toplist);\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'toplist' => $toplist,\n\t\t\t\t'eventids' => $eventids\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('eventids', $eventids);\n\t\t\t$this->set('toplist', $toplist);\n\t\t\t$this->set('data', $data);\n\t\t\t$this->render('statistics_sightings');\n\t\t}\n\t}\n\n\tprivate function __statisticsOrgs($params = array()) {\n\t\t$this->loadModel('Organisation');\n\t\t$conditions = array();\n\t\tif (!isset($params['scope']) || $params['scope'] == 'local') {\n\t\t\t$params['scope'] = 'local';\n\t\t\t$conditions['Organisation.local'] = 1;\n\t\t} elseif ($params['scope'] == 'external') {\n\t\t\t$conditions['Organisation.local'] = 0;\n\t\t}\n\t\t$orgs = array();\n\t\t$orgs = $this->Organisation->find('all', array(\n\t\t\t\t'recursive' => -1,\n\t\t\t\t'conditions' => $conditions,\n\t\t\t\t'fields' => array('id', 'name', 'description', 'local', 'contacts', 'type', 'sector', 'nationality'),\n\t\t));\n\t\t$orgs = Set::combine($orgs, '{n}.Organisation.id', '{n}.Organisation');\n\t\t$users = $this->User->find('all', array(\n\t\t\t'group' => 'User.org_id',\n\t\t\t'conditions' => array('User.org_id' => array_keys($orgs)),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('org_id', 'count(*)')\n\t\t));\n\t\tforeach ($users as $user) {\n\t\t\t$orgs[$user['User']['org_id']]['userCount'] = $user[0]['count(*)'];\n\t\t}\n\t\tunset($users);\n\t\t$events = $this->User->Event->find('all', array(\n\t\t\t'group' => 'Event.orgc_id',\n\t\t\t'conditions' => array('Event.orgc_id' => array_keys($orgs)),\n\t\t\t'recursive' => -1,\n\t\t\t'fields' => array('Event.orgc_id', 'count(*)')\n\t\t));\n\t\tforeach ($events as $event) {\n\t\t\t$orgs[$event['Event']['orgc_id']]['eventCount'] = $event[0]['count(*)'];\n\t\t}\n\t\tunset($events);\n\t\t$orgs = Set::combine($orgs, '{n}.name', '{n}');\n\t\t// f*** php\n\t\tuksort($orgs, 'strcasecmp');\n\t\tforeach ($orgs as $k => $value) {\n\t\t\tif (file_exists(APP . 'webroot' . DS . 'img' . DS . 'orgs' . DS . $k . '.png')) {\n\t\t\t\t$orgs[$k]['logo'] = true;\n\t\t\t}\n\t\t}\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->RestResponse->viewData($orgs, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('scope', $params['scope']);\n\t\t\t$this->set('orgs', $orgs);\n\t\t\t$this->render('statistics_orgs');\n\t\t}\n\t}\n\n\tpublic function tagStatisticsGraph() {\n\t\t$this->loadModel('EventTag');\n\t\t$tags = $this->EventTag->getSortedTagList();\n\t\t$this->loadModel('Taxonomy');\n\t\t$taxonomies = $this->Taxonomy->find('list', array(\n\t\t\t\t'conditions' => array('enabled' => true),\n\t\t\t\t'fields' => array('Taxonomy.namespace')\n\t\t));\n\t\t$flatData = array();\n\t\t$tagIds = $this->EventTag->Tag->find('list', array('fields' => array('Tag.name', 'Tag.id')));\n\t\t$this->set('tagIds', $tagIds);\n\t\tforeach ($tags as $key => $value) {\n\t\t\t$name = explode(':', $value['name']);\n\t\t\t$tags[$key]['taxonomy'] = 'custom';\n\t\t\tif (count($name) > 1) {\n\t\t\t\tif (in_array($name[0], $taxonomies)) {\n\t\t\t\t\t$tags[$key]['taxonomy'] = $name[0];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$flatData[$tags[$key]['taxonomy']][$value['name']] = array('name' => $value['name'], 'size' => $value['eventCount']);\n\t\t}\n\t\t$treemap = array(\n\t\t\t\t'name' => 'tags',\n\t\t\t\t'children' => array()\n\t\t);\n\n\t\tforeach ($flatData as $key => $value) {\n\t\t\t $newElement = array(\n\t\t\t\t'name' => $key,\n\t\t\t\t'children' => array()\n\t\t\t);\n\t\t\tforeach ($value as $tag) {\n\t\t\t\t$newElement['children'][] = array('name' => $tag['name'], 'size' => $tag['size']);\n\t\t\t}\n\t\t\t$treemap['children'][] = $newElement;\n\t\t}\n\t\t$taxonomyColourCodes = array();\n\t\t$taxonomies = array_merge(array('custom'), $taxonomies);\n\t\tif ($this->_isRest()) {\n\t\t\t$data = array(\n\t\t\t\t'flatData' => $flatData,\n\t\t\t\t'treemap' => $treemap\n\t\t\t);\n\t\t\treturn $this->RestResponse->viewData($data, $this->response->type());\n\t\t} else {\n\t\t\t$this->set('taxonomyColourCodes', $taxonomyColourCodes);\n\t\t\t$this->set('taxonomies', $taxonomies);\n\t\t\t$this->set('flatData', $flatData);\n\t\t\t$this->set('treemap', $treemap);\n\t\t\t$this->set('tags', $tags);\n\t\t\t$this->layout = 'treemap';\n\t\t\t$this->render('ajax/tag_statistics_graph');\n\t\t}\n\t}\n\n\tprivate function __statisticsTags($params = array()) {\n\t\t$trending_tags = array();\n\t\t$all_tags = array();\n\t\tif ($this->_isRest()) {\n\t\t\treturn $this->tagStatisticsGraph();\n\t\t} else {\n\t\t\t$this->render('statistics_tags');\n\t\t}\n\t}\n\n\tpublic function verifyGPG() {\n\t\tif (!self::_isSiteAdmin()) throw new NotFoundException();\n\t\t$user_results = $this->User->verifyGPG();\n\t\t$this->set('users', $user_results);\n\t}\n\n\tpublic function verifyCertificate() {\n\t\t$user_results = $this->User->verifyCertificate();\n\t\t$this->set('users', $user_results);\n\t}\n\n\t// Refreshes the Auth session with new/updated data\n\tprotected function _refreshAuth() {\n\t\t$oldUser = $this->Auth->user();\n\t\t$newUser = $this->User->find('first', array('conditions' => array('User.id' => $oldUser['id']), 'recursive' => -1,'contain' => array('Organisation', 'Role')));\n\t\t// Rearrange it a bit to match the Auth object created during the login\n\t\t$newUser['User']['Role'] = $newUser['Role'];\n\t\t$newUser['User']['Organisation'] = $newUser['Organisation'];\n\t\tunset($newUser['Organisation'], $newUser['Role']);\n\t\t$this->Auth->login($newUser['User']);\n\t}\n\n\tpublic function fetchPGPKey($email = false) {\n\t\tif ($email == false) {\n\t\t\tthrow new NotFoundException('No email provided.');\n\t\t}\n\t\t$keys = $this->User->fetchPGPKey($email);\n\t\tif (is_numeric($keys)) {\n\t\t\tthrow new NotFoundException('Could not retrieved any keys from the key server.');\n\t\t}\n\t\t$this->set('keys', $keys);\n\t\t$this->autorender = false;\n\t\t$this->layout = false;\n\t\t$this->render('ajax/fetchpgpkey');\n\t}\n\n\tpublic function dashboard() {\n\t\t$events = array();\n\t\t// the last login in the session is not updated after the login - only in the db, so let's fetch it.\n\t\t$lastLogin = $this->Auth->user('last_login');\n\t\t$this->loadModel('Event');\n\t\t$events['changed'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, $lastLogin));\n\t\t$events['published'] = count($this->Event->fetchEventIds($this->Auth->user(), false, false, false, true, false, $lastLogin));\n\t\t$notifications = $this->{$this->modelClass}->populateNotifications($this->Auth->user());\n\t\t$this->set('notifications', $notifications);\n\t\t$this->set('events', $events);\n\t}\n}\n"], "filenames": ["app/Controller/UsersController.php"], "buggy_code_start_loc": [647], "buggy_code_end_loc": [648], "fixing_code_start_loc": [647], "fixing_code_end_loc": [648], "type": "CWE-532", "message": "The admin_edit function in app/Controller/UsersController.php in MISP 2.4.82 mishandles the enable_password field, which allows admins to discover a hashed password by reading the audit log.", "other": {"cve": {"id": "CVE-2017-16946", "sourceIdentifier": "cve@mitre.org", "published": "2017-11-25T18:29:00.220", "lastModified": "2017-12-07T20:08:59.977", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The admin_edit function in app/Controller/UsersController.php in MISP 2.4.82 mishandles the enable_password field, which allows admins to discover a hashed password by reading the audit log."}, {"lang": "es", "value": "La funci\u00f3n admin_edit en app/Controller/UsersController.php en MISP 2.4.82 gestiona de manera incorrecta el campo enable_password, lo que permite que administradores descubran una contrase\u00f1a hasheada mediante la lectura del registro de auditor\u00eda."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-532"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:2.4.82:*:*:*:*:*:*:*", "matchCriteriaId": "4F07B278-2608-43FD-9831-C1B62719EA31"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/7d5890b2fc63285f010d5845913894dd71cf232c", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/7d5890b2fc63285f010d5845913894dd71cf232c"}}