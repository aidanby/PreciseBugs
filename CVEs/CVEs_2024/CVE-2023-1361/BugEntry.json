{"buggy_code": ["<?php\n\n\n// Product Details for purchase\nif(isset($_GET['page']) and $_GET['page'] == \"productDetails\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelecta(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        die(\"Sorry no product found!\");\n    }\n\n    //$this_product = product_type($product_id);\n    $select_product = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_id, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as product_name, product_type, 0 as product_discount, \n                        round(product_sale_price, 4) as product_sale_price, round(product_purchase_price, 4) as product_purchase_price, product_unit, has_expiry_date\",\n        \"where\"     => array(\n            \"is_trash = 0 and product_id\"   => $product_id\n        )\n    ));\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n        die(\"Sorry no product found!\");\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) { \n\n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"child_products.is_trash = 0 and parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n\n\n    } else if( $product_is(\"Grouped\") ) {\n\n        $selectGroupedProducts = easySelectA(array(\n            \"table\"     => \"bg_product_items as bg_product_items\",\n            \"fields\"    => \"bg_item_product_id, product_name, round(product_purchase_price, 2) as product_purchase_price, product_unit, bg_product_qnt, 0 as product_discount\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as products on products.product_id = bg_item_product_id\"\n            ),\n            \"where\"     => array(\n                \"is_raw_materials = 0 and bg_product_id\" => $product_id\n            )\n        ));\n\n        if($selectGroupedProducts !== false) {\n\n            foreach($selectGroupedProducts[\"data\"] as $pkey => $pvalue) {\n\n                // Store the product data\n                array_push($returnData, \n                    array(\n                        \"pid\"  => $pvalue[\"bg_item_product_id\"], // pid = Product id\n                        \"pn\"   => $pvalue[\"product_name\"], // pn = product Name\n                        \"pd\"   => $pvalue[\"product_discount\"], // pd = product Discount \n                        \"iq\"   => $pvalue[\"bg_product_qnt\"], // iq = Item Qunatity\n                        \"pu\"   => $pvalue[\"product_unit\"], // iq = Item Qunatity\n                        \"pp\"   => $pvalue[\"product_purchase_price\"], // sp = purchase price\n                    )\n                );\n\n            }\n\n        }\n        \n    } else {\n\n        // For normal product\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pd\"   => $product[\"product_discount\"], // pd = product Discount\n            \"sp\"   => $product[\"product_sale_price\"], // sp = sale price\n            \"pp\"   => $product[\"product_purchase_price\"], // sp = purchase price\n            \"pu\"   => $product[\"product_unit\"], // pu = Product Unit\n            \"hed\"  => $product[\"has_expiry_date\"] // hed = Has Expiry Date\n        ));\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n// Product details for POS\nif(isset($_GET['page']) and $_GET['page'] == \"productDetailsForPos\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelecta(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        \n        $returnData = array (\n            \"error\" => true,\n            \"msg\"   => \"Product out of stock or not found.\"\n        );\n\n        echo json_encode($returnData);\n        exit();\n    }\n\n    $warehouse_id = isset($_GET[\"warehouse_id\"]) ? (int)safe_input($_GET[\"warehouse_id\"]) : \"\";\n    $customer_id = isset($_GET[\"cid\"]) ? (int)safe_input($_GET[\"cid\"]) : \"\";\n    $product_qnt = (isset($_GET[\"pqnt\"]) and !empty($_GET[\"pqnt\"])) ? safe_entities($_GET[\"pqnt\"]) : get_options(\"defaultSaleQnt\");\n    $packet = ( isset($_GET[\"packet\"]) and !empty($_GET[\"packet\"]) ) ? safe_entities($_GET[\"packet\"]) : 0;\n\n    $customerType = \"consumer\";\n    $selectCustomerType = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"customer_type\",\n        \"where\"     => array(\n            \"customer_id\"   => $customer_id\n        )\n    ));\n\n    if($selectCustomerType !== false) {\n        $customerType = strtolower($selectCustomerType[\"data\"][0][\"customer_type\"]);\n    }\n\n    // Settings\n    $allowToAddStockOutProduct = get_options(\"allowToAddStockOutProductInPOS\");\n    $allowToSaleStockOutProduct = get_options(\"allowToSaleStockOutProductInPOS\");\n\n    $returnData = array();\n\n    $select_product = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id as product_id, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as product_name, product_generic, \n                        if(stock_in is null, 0, round(stock_in, 2) ) as stock_in, product_type, product_{$customerType}_discount as product_discount, round(product_sale_price, 2) as product_sale_price, \n                        round(product_purchase_price, 2) as product_purchase_price, product_packet_qnt, product_unit, maintain_stock, has_expiry_date, has_batch\",\n        \"join\"      => array(\n            \"left join ( select \n                            vp_id,\n                            if(batch_id is not null, 1, 0) as has_batch, /** Checking the product if set has expriy date and there also have batch entry*/\n                            warehouse, \n                            sum(base_stock_in/base_qty) as stock_in \n                        FROM product_base_stock\n                        where vp_id= '{$product_id}' and ( batch_id is null or date(batch_expiry_date) > curdate() ) and warehouse = '{$warehouse_id}' \n                        group by vp_id\n                    ) as stock on stock.vp_id =  product.product_id\"\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 and product.product_id\"   => $product_id\n        )\n    ));\n\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n\n        $returnData = array (\n            \"error\" => true,\n            \"msg\"   => \"Product out of stock or not found.\"\n        );\n\n        echo json_encode($returnData);\n        exit();\n\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) {\n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"child_products.is_trash = 0 and parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n        \n    } else {\n\n        // Select products, which have sub/bundle products and check it if there have enough quantity in stock\n        \n        $subProductsStockCheck = easySelectA(array(\n            \"table\"     => \"bg_product_items\",\n            \"fields\"    => \"bg_item_product_id, product_name, product_{$customerType}_discount as product_discount, \n                            bg_item_product_id, \n                            round(sub_product.product_sale_price, 2) as product_sale_price,\n                            round(sub_product.product_purchase_price, 2) as product_purchase_price,\n                            sub_product.product_generic as product_generic,\n                            sub_product.product_unit as product_unit,\n                            sub_product.product_packet_qnt as product_packet_qnt,\n                            sub_product.has_expiry_date as has_expiry_date,\n                            sub_product.maintain_stock as maintain_stock,\n                            if(stock_in is null, 0, round(stock_in, 2)) as stock_in,\n                            round(bg_product_qnt, 2) as bg_product_qnt,\n                            has_batch\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as sub_product on sub_product.product_id = bg_item_product_id\",\n                \"left join ( select \n                                vp_id,\n                                if(batch_id is not null, 1, 0) as has_batch, /** Checking the product if set has expriy date and there also have batch entry*/\n                                sum(base_stock_in/base_qty) as stock_in \n                        FROM product_base_stock\n                        where ( batch_id is null or date(batch_expiry_date) > curdate() ) and warehouse = '{$warehouse_id}' \n                        group by vp_id\n                    ) as stock on stock.vp_id = bg_item_product_id\"\n            ),\n            \"where\"     => array(\n                \"is_raw_materials = 0 and bg_product_id = {$product_id}\"\n            )\n\n        ));\n\n\n        // default false value for stock out product in bundle/ sub product\n        $subProductIsStockOut = false;\n\n        // Checking sub product stock\n        if($subProductsStockCheck !== false) {\n\n            // Set stock quantity to null by default\n            $lowerQuantity = null;\n\n            foreach($subProductsStockCheck[\"data\"] as $subKey => $subProduct) {\n\n                // Calculate stock quantity\n                $stockQnt = $subProduct[\"stock_in\"] / $subProduct[\"bg_product_qnt\"];\n\n                // Check there at least one stock out product in this bundle product\n                $subProductIsStockOut = $subProductIsStockOut ?: $product_qnt > $stockQnt;\n\n                 // Check if the $product_qnt/ Sale quantity is below of stock quantity\n                // And return the lower quantity with error msg\n                if( $subProduct[\"maintain_stock\"] == 1 and $product_qnt > $stockQnt and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct ) and ( $lowerQuantity === null or $lowerQuantity > $stockQnt )) {\n                    \n                    $product_unit = $subProduct[\"product_unit\"] !== null ? $subProduct[\"product_unit\"] . \"(s)\" : \"\";\n\n                    $returnData = array (\n                        \"error\" => true,\n                        \"stq\"   => $stockQnt,\n                        \"msg\"   => \"The Bundle/ Grouped item ({$subProduct[\"product_name\"]}) only left {$subProduct[\"stock_in\"]}/{$subProduct[\"bg_product_qnt\"]} = {$stockQnt} {$product_unit} in stock. But it is defined {$product_qnt} {$product_unit}. Quantity must be bellow or equal to product stock in.\"\n                    );\n\n                    $lowerQuantity = $stockQnt;\n\n                } else if( $product_is(\"Grouped\") ) { \n                    \n                    // If there is no error, add the grouped product in $returnData\n                    // Store the Grouped product data\n                    array_push($returnData, array(\n                        \"pid\"  => $subProduct[\"bg_item_product_id\"], // pid = Product id\n                        \"pn\"   => $subProduct[\"product_name\"], // pn = product Name\n                        \"pd\"   => $subProduct[\"product_discount\"], // pd = product Discount \n                        \"stq\"  => $stockQnt, // stq = Stock Quantity\n                        \"iq\"   => $subProduct[\"bg_product_qnt\"], // item quantity\n                        \"so\"   => ( $subProduct[\"maintain_stock\"] == 1 and ( $product_qnt > $stockQnt or $subProductIsStockOut ) and !$allowToSaleStockOutProduct) ? 1 : 0, // Stock Out\n                        \"sp\"   => $subProduct[\"product_sale_price\"], // sp = sale price\n                        \"pp\"   => $subProduct[\"product_purchase_price\"], // pp = purchase price\n                        \"gn\"   => $subProduct[\"product_generic\"], // gn = generic name\n                        \"pu\"   => $subProduct[\"product_unit\"], // pu = Product Unit\n                        \"pq\"   => $subProduct[\"product_packet_qnt\"], // pu = Product Unit\n                        \"hed\"  => ($subProduct[\"has_expiry_date\"] and $subProduct[\"has_batch\"]) ? 1 : 0, // hed = Has Expiry Date\n                    ));\n\n                }\n\n            }\n\n        }\n\n        // Check there are any error in grouped/ bundle product checking\n        // and If the product is not grouped product\n        if( !isset($returnData[\"error\"]) and $product_is(\"Grouped\") === false ) {\n\n            if( $product[\"maintain_stock\"] == 1 and  $product[\"stock_in\"] == 0 and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct ) ) {  // Check if there enough stock for normal product\n\n                $returnData = array (\n                    \"error\" => true,\n                    \"msg\"   => \"Product out of stock in the selected warehouse.\"\n                );\n    \n                \n            } else if( $product[\"maintain_stock\"] == 1 and $product_qnt > $product[\"stock_in\"] and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct )  ) {\n                \n                $product_unit = $product[\"product_unit\"] !== null ? $product[\"product_unit\"] . \"(s)\" : \"\";\n    \n                $returnData = array (\n                    \"error\" => true,\n                    \"msg\"   => \"Only {$product[\"stock_in\"]} {$product_unit} left in stock. You entered total {$product_qnt} {$product_unit}. Quantity must be bellow or equal to product stock in.\",\n                    \"stq\" => $product[\"stock_in\"],\n                    \"sp\" => $product[\"product_sale_price\"],\n                    \"pp\" => $product[\"product_purchase_price\"]\n                );\n    \n            } else {\n    \n                // Store the product data\n                // Normal and Bundle Product\n                array_push($returnData, array(\n                    \"pid\"  => $product[\"product_id\"], // pid = Product id\n                    \"pn\"   => $product[\"product_name\"], // pn = product Name\n                    \"pd\"   => $product[\"product_discount\"], // pd = product Discount \n                    \"stq\"  => $product[\"stock_in\"], // stq = Stock Quantity\n                    \"iq\"   => $product_qnt, // item quantity\n                    \"so\"   => ( $product[\"maintain_stock\"] == 1 and ( $product_qnt > $product[\"stock_in\"] or $subProductIsStockOut ) and !$allowToSaleStockOutProduct) ? 1 : 0, // SO = stock out\n                    \"sp\"   => $product[\"product_sale_price\"], // sp = sale price\n                    \"pp\"   => $product[\"product_purchase_price\"], // pp = purchase price\n                    \"gn\"   => $product[\"product_generic\"], // gn = generic name\n                    \"pu\"   => $product[\"product_unit\"], // pu = Product Unit\n                    \"pq\"   => $product[\"product_packet_qnt\"], // pu = Product Unit\n                    \"hed\"  => ($product[\"has_expiry_date\"] and $product[\"has_batch\"]) ? 1 : 0, // hed = Has Expiry Date\n                ));\n\n            }\n\n        }\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n\n// Product for return\nif(isset($_GET['page']) and $_GET['page'] == \"productDetailsForReturn\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelecta(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        die(\"Sorry no product found!\");\n    }\n\n\n    $customer_id = isset($_GET[\"customer_id\"]) ? safe_input($_GET[\"customer_id\"]) : \"\";\n    $customerType = \"consumer\";\n    $selectCustomerType = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"customer_type\",\n        \"where\"     => array(\n            \"customer_id\"   => $customer_id\n        )\n    ));\n\n    if($selectCustomerType !== false) {\n        $customerType = strtolower($selectCustomerType[\"data\"][0][\"customer_type\"]);\n    }\n\n    $select_product = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_id, product_name, product_type, product_{$customerType}_discount as product_discount, round(product_sale_price, 2) as product_sale_price, round(product_purchase_price, 2) as product_purchase_price, product_unit, has_expiry_date\",\n        \"where\"     => array(\n            \"is_trash = 0 and product_id\"   => $product_id\n        )\n    ));\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n        die(\"Sorry no product found!\");\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) { \n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n        \n        \n    } else {\n\n\n        // For normal product\n        $normal_product = easySelectA(array(\n            \"table\"     => \"products as products\",\n            \"fields\"    => \"\n                    product_id, product_name, product_{$customerType}_discount as product_discount, product_unit, has_expiry_date, round(product_sale_price, 2) as product_sale_price,\n                    if(sale_item_quantity is null, 0, round(sale_item_quantity, 2)) as purchasedQnt,\n                    if(returns_products_quantity is null, 0, round(returns_products_quantity, 2)) as returnedQnt\n            \",\n            \"join\"      => array(\n                \"left join (\n                    select\n                        stock_product_id,\n                        sum(case when stock_type = 'sale' then stock_item_qty end ) as sale_item_quantity,\n                        sum(case when stock_type = 'sale-return' then stock_item_qty end ) as returns_products_quantity\n                    from {$table_prefix}product_stock as product_stock\n                    left join {$table_prefix}sales on stock_sales_id = sales_id\n                    where stock_product_id = {$product_id} and sales_customer_id = {$customer_id} and product_stock.is_trash = 0\n                    group by stock_product_id\n                ) as stock on stock_product_id = product_id\",\n            ),\n            \"where\" => array(\n                \"product_id\"    => $product_id\n            )\n        ))[\"data\"][0];\n    \n        array_push($returnData, array(\n            \"pid\"  => $normal_product[\"product_id\"], // pid = Product id\n            \"pn\"   => $normal_product[\"product_name\"], // pn = product Name\n            \"pd\"   => $normal_product[\"product_discount\"], // pd = product Discount \n            \"prq\"  => $normal_product[\"purchasedQnt\"], // prq = Purchased Quantity\n            \"rtq\"  => $normal_product[\"returnedQnt\"], // rtq = Returned Quantity\n            \"sp\"   => $normal_product[\"product_sale_price\"], // sp = sale price\n            \"pu\"    => $normal_product[\"product_unit\"], // pu = product_unit\n            \"hed\"    => $normal_product[\"has_expiry_date\"]\n        ));\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n// Product List\nif(isset($_GET['page']) and $_GET['page'] == \"productList\") {\n\n    $productCategoryFilter = ( isset($_GET[\"catId\"]) and !empty($_GET[\"catId\"]) ) ? $_GET[\"catId\"] : \"\";\n    $productBrandFilter = ( isset($_GET[\"brand\"]) and !empty($_GET[\"brand\"]) ) ? $_GET[\"brand\"] : \"\";\n    $productGenericFilter = ( isset($_GET[\"generic\"]) and !empty($_GET[\"generic\"]) ) ? $_GET[\"generic\"] : \"\";\n    $productAuthorFilter = ( isset($_GET[\"author\"]) and !empty($_GET[\"author\"]) ) ? $_GET[\"author\"] : \"\";\n\n    // If there are any edition to filter, we do not need product_type != 'Child' filter\n    $productEditionFilter = ( isset($_GET[\"edition\"]) and !empty($_GET[\"edition\"]) ) ? \" product_edition = '{$_GET[\"edition\"]}' \" : \" product_type != 'Child' \";\n\n    $oderBy = array();\n    \n    if( !empty(get_options(\"defaultProductOrder\")) ) {\n\n        $oderBy = array(\n            get_options(\"defaultProductOrder\") => empty(get_options(\"defaultProductOrderBy\")) ? \"ASC\" : get_options(\"defaultProductOrderBy\")\n        );\n\n    }\n    \n    $ProductList = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_id as id, product_name as name, length(product_photo) as v\",\n        \"where\"     => array (\n            \"is_trash = 0 AND {$productEditionFilter}\",\n            \" AND product_category_id\"          => $productCategoryFilter,\n            \" AND product_brand_id\"             => $productBrandFilter,\n            \" AND product_generic\"              => $productGenericFilter\n        ),\n        \"join\"  => array(\n            \"left join ( select \n                    stock_product_id, \n                    if(stock_item_qty is null, 0, sum(stock_item_qty)) as totalSoldQnt \n                from {$table_prefix}product_stock \n                where is_trash = 0 and stock_type = 'sale' \n                group by stock_product_id \n            ) as sale_items on stock_product_id = product_id\"\n        ),\n        \"orderby\"   => $oderBy,\n        \"limit\"     => array (\n            \"start\"     => 0,\n            \"length\"    => empty(get_options(\"maxProductDisplay\")) ? 1500 : get_options(\"maxProductDisplay\")\n        )\n        \n    ));\n    \n    if($ProductList) {\n        \n        echo json_encode($ProductList[\"data\"]);\n\n    } else {\n        echo \"null\";\n    }\n\n}\n\n\n// Product Unit Details\nif(isset($_GET['page']) and $_GET['page'] == \"productUnitDetails\") {\n\n\n    $unitDetails = easySelectA(\n        array(\n            \"table\"  => \"product_unit_variants\",\n            // \"fields\" => \"puv_default as d, puv_name as n, puv_product_id as pid, round(puv_purchase_price, 2) as pp, round(puv_sale_price, 2) as sp\",\n            \"fields\" => \"round(puv_purchase_price, 2) as pp, round(puv_sale_price, 2) as sp\",\n            \"where\"  => array(\n                \"puv_product_id\" => $_GET[\"product_id\"],\n                \" and puv_name\"  => $_GET[\"unit\"]\n            )\n        )\n    )[\"data\"][0];\n\n    echo json_encode($unitDetails);\n\n}\n\n\n// Return shop income in the specific date \nif(isset($_GET['page']) and $_GET['page'] == \"getShopIncome\") {\n\n   $todaySale = easySelect(\n        \"sales\",\n        \"(sum(sales_grand_total) - sum(sales_due)) as chash_in\",\n        array(),\n        array (\n            \"is_trash = 0 and sales_delivery_date\"    => $_POST[\"incomeDate\"],\n            \" AND sales_shop_id\" => $_POST[\"shopId\"]\n        )\n   );\n\n   echo $todaySale[\"data\"][0][\"chash_in\"];\n\n}\n\n\n// Employee Salary data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmpSalaryData\") {\n\n    $emp_id = safe_input($_POST[\"empId\"]);\n\n    $employeeSalaryData = easySelectD(\n        \"SELECT \n            emp_id, emp_firstname, emp_lastname, emp_positions, round(emp_payable_salary, 2) as emp_payable_salary, round(emp_payable_overtime, 2) as emp_payable_overtime, round(emp_payable_bonus, 2) as emp_payable_bonus,\n            loan_amount, loan_installment_amount, loan_id, \n            if(loan_installment_paid_amount is null, 0, loan_installment_paid_amount) as loan_installment_paid_amount\n        from {$table_prefix}employees\n        left join (select \n                loan_id, loan_borrower, loan_amount, loan_installment_amount \n            from {$table_prefix}loan where is_trash = 0 group by loan_id\n        ) as loan on emp_id = loan_borrower\n        left join (select \n                loan_ids, sum(loan_installment_paying_amount) as loan_installment_paid_amount \n            from {$table_prefix}loan_installment where is_trash = 0 group by loan_ids\n        ) as loan_installment on loan_id = loan_ids\n        where emp_id = {$emp_id}\n        order by loan_id \n        desc limit 1\"\n    )[\"data\"][0];\n\n    echo json_encode($employeeSalaryData);\n}\n\n\n// Customer Payment Info\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerPaymentInfo\") {\n\n    $customer_id = safe_input($_POST[\"customerId\"]);\n\n    $customerPaymentsData = easySelectD(\n        \"SELECT customer_id, round(customer_opening_balance, 2) as customer_opening_balance,\n            if(sales_grand_total is null, 0, round(sales_grand_total, 2)) as sales_grand_total, \n            if(sales_shipping is null, 0, round(sales_shipping, 2)) as sales_shipping, \n            if(sales_due is null, 0, round(sales_due, 2)) as sales_due, \n            if(returns_grand_total is null, 0, round(returns_grand_total, 2)) as returns_grand_total,\n            if(received_payments_amount is null, 0, round(received_payments_amount, 2)) as total_received_payments,\n            if(payments_return_amount is null, 0, round(payments_return_amount, 2)) as total_payment_return,\n            if(received_payments_bonus is null, 0, round(received_payments_bonus, 2)) as total_given_bonus\n        from {$table_prefix}customers\n        left join ( select\n                sales_customer_id,\n                sum(sales_grand_total) as sales_grand_total,\n                sum(sales_shipping) as sales_shipping,\n                sum(sales_due) as sales_due\n            from {$table_prefix}sales where is_return = 0 and is_trash = 0 and sales_status = 'Delivered' group by sales_customer_id\n        ) as sales on customer_id = sales.sales_customer_id\n        left join ( select \n                sales_customer_id, \n                sum(sales_grand_total) as returns_grand_total \n            from {$table_prefix}sales where is_return = 1 and is_trash = 0 and sales_status = 'Delivered' group by sales_customer_id\n        ) as product_returns on customer_id = product_returns.sales_customer_id\n        left join ( select \n                received_payments_from, \n                sum(received_payments_amount) as received_payments_amount, \n                sum(received_payments_bonus) as received_payments_bonus \n            from {$table_prefix}received_payments where is_trash = 0 group by received_payments_from\n        ) as received_payments on customer_id = received_payments_from\n        left join ( select\n                payments_return_customer_id,\n                sum(payments_return_amount) as payments_return_amount\n            from {$table_prefix}payments_return where is_trash = 0 and payments_return_type = 'Outgoing' group by payments_return_customer_id\n        ) as payment_return on customer_id = payments_return_customer_id\n        where customer_id = {$customer_id}\"\n    )[\"data\"][0];\n\n    echo json_encode($customerPaymentsData);\n}\n\n// Customer Statement Info\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerStatementInfo\") {\n\n    $customer_id = safe_input($_POST[\"customerId\"]);\n\n    $dateRange = explode(\" - \", safe_input($_POST[\"dateRange\"]));\n\n\n    $customerPaymentsData = easySelectD(\n        \"select customer_id, customer_name, customer_address, customer_district, district_name,\n            ( \n                if(sales_total_amount is null, 0, sales_total_amount) + \n                if(wastage_sale_grand_total is null, 0, wastage_sale_grand_total) \n            ) as net_purchased, \n            if(sales_shipping is null, 0, sales_shipping) as total_shipping, \n            (\n                if(sales_product_discount is null, 0, sales_product_discount) +\n                if(sales_discount is null, 0, sales_discount)\n            ) as total_purchased_discount,\n            if(received_payments_amount is null, 0, received_payments_amount) as received_payments_amount,\n            if(advance_payments_amount is null, 0, advance_payments_amount) as advance_payments_amount,\n            if(sales_payments_amount is null, 0, sales_payments_amount) as sales_payments_amount,\n            if(received_payments_bonus is null, 0, received_payments_bonus) as total_given_bonus,\n            if(returns_grand_total is null, 0, returns_grand_total) as total_product_returns,\n            if(discounts_amount is null, 0, discounts_amount) as special_discounts_amount,\n            if(payments_return_amount is null, 0, payments_return_amount) as payments_return_amount\n        from {$table_prefix}customers\n        left join {$table_prefix}districts on district_id = customer_district\n        left join ( select \n                sales_customer_id,  \n                sum(case when is_return = 0 then sales_total_amount end) as sales_total_amount,\n                sum(case when is_return = 0 then sales_shipping end) as sales_shipping,\n                sum(case when is_return = 0 then sales_product_discount end) as sales_product_discount,\n                sum(case when is_return = 0 then sales_discount end) as sales_discount,\n                sum(case when is_return = 1 then sales_grand_total end) as returns_grand_total\n            from {$table_prefix}sales where is_trash = 0 and sales_status = 'Delivered' and sales_delivery_date between '{$dateRange[0]}' and '{$dateRange[1]}' group by sales_customer_id\n            ) as sales on customer_id = sales_customer_id\n        left join ( select\n                    wastage_sale_customer,\n                    sum(wastage_sale_grand_total) as wastage_sale_grand_total\n                from {$table_prefix}wastage_sale where is_trash = 0 and wastage_sale_date between '{$dateRange[0]}' and '{$dateRange[1]}' group by wastage_sale_customer\n            ) as wastage_sale on customer_id = wastage_sale_customer\n        left join ( select \n                        received_payments_from, \n                        sum(case when received_payments_type = 'Received Payments' then received_payments_amount end) as received_payments_amount, \n                        sum(case when received_payments_type = 'Advance Collection' then received_payments_amount end) as advance_payments_amount, \n                        sum(case when received_payments_type = 'Sales Payments' or received_payments_type = 'Wastage Sales Payments' then received_payments_amount end) as sales_payments_amount, \n                        sum(received_payments_bonus) as received_payments_bonus \n                    from {$table_prefix}received_payments \n                    where is_trash = 0 and received_payments_type != 'Discounts' and date(received_payments_datetime) between '{$dateRange[0]}' and '{$dateRange[1]}' \n                    group by received_payments_from\n                ) as received_payments on customer_id = received_payments.received_payments_from\n        left join ( select \n                received_payments_from, \n                sum(received_payments_amount) as discounts_amount \n            from {$table_prefix}received_payments \n            where is_trash = 0 and received_payments_type = 'Discounts' and date(received_payments_datetime) between '{$dateRange[0]}' and '{$dateRange[1]}' \n            group by received_payments_from\n        ) as given_discounts on customer_id = given_discounts.received_payments_from\n        left join (select\n                payments_return_customer_id,\n                sum(payments_return_amount) as payments_return_amount\n            from {$table_prefix}payments_return\n            where is_trash = 0 and payments_return_type = 'Outgoing' and date(payments_return_date) between '{$dateRange[0]}' and '{$dateRange[1]}' \n            group by payments_return_customer_id\n        ) as payment_return on customer_id = payments_return_customer_id\n        where customer_id = {$customer_id}\"\n    )[\"data\"][0];\n\n    $customerPaymentsData[\"previous_balance\"] = easySelectD(\"\n\t\t\tSELECT \n\t\t\t\t(\n\t\t\t\t\t\tif(customer_opening_balance is null, 0, customer_opening_balance) +\t\t\t\t\t\t\n\t\t\t\t\t\tif(total_returned_before_filtered_date is null, 0, total_returned_before_filtered_date) +\n\t\t\t\t\t\tif(total_payment_before_filtered_date is null, 0, total_payment_before_filtered_date)\n\t\t\t\t) - ( \n\t\t\t\t\t\tif(total_purchased_before_filtered_date is null, 0, total_purchased_before_filtered_date) +\n                        if(total_wastage_purched_before_filtered_date is null, 0, total_wastage_purched_before_filtered_date) +\n                        if(total_payment_return_before_filtered_date is null, 0, total_payment_return_before_filtered_date)\n\t\t\t\t) as previous_balance\n\n\t\t\tFROM {$table_prefix}customers as customers\n\t\t\tleft join ( select\n\t\t\t\t\tsales_customer_id,\n\t\t\t\t\tsum(case when is_return = 0 then sales_grand_total end) as total_purchased_before_filtered_date,\n                    sum(case when is_return = 1 then sales_due end) as total_returned_before_filtered_date\n\t\t\t\tfrom {$table_prefix}sales where is_trash = 0 and sales_status = 'Delivered' and sales_delivery_date < '{$dateRange[0]}' group by sales_customer_id\n\t\t\t) as sales on sales_customer_id = customer_id\n            left join ( select\n                    wastage_sale_customer,\n                    sum(wastage_sale_grand_total) as total_wastage_purched_before_filtered_date\n                from {$table_prefix}wastage_sale where is_trash = 0 and wastage_sale_date < '{$dateRange[0]}' group by wastage_sale_customer\n            ) as wastage_sale on wastage_sale_customer = customer_id\n\t\t\tleft join ( select \n\t\t\t\t\treceived_payments_from,\n\t\t\t\t\tsum(received_payments_amount) + sum(received_payments_bonus) as total_payment_before_filtered_date\n\t\t\t\tfrom {$table_prefix}received_payments where is_trash = 0 and date(received_payments_datetime) < '{$dateRange[0]}' group by received_payments_from\n\t\t\t) as payments on received_payments_from = customer_id\n            left join (select\n                    payments_return_customer_id,\n                    sum(payments_return_amount) as total_payment_return_before_filtered_date\n                from {$table_prefix}payments_return\n                where is_trash = 0 and payments_return_type = 'Outgoing' and date(payments_return_date) < '{$dateRange[0]}'\n                group by payments_return_customer_id\n            ) as payment_return on customer_id = payments_return_customer_id\n\t\t\twhere customer_id = {$customer_id}\n\t\")[\"data\"][0][\"previous_balance\"];\n\n    echo json_encode($customerPaymentsData);\n}\n\n// Get Employee Loan Data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmpLoanLoanData\") {\n\n    $emp_id = safe_input($_POST[\"empId\"]);\n    $month = safe_input($_POST[\"month\"]);\n    $year = safe_input($_POST[\"year\"]);\n\n    $getLoanDetails = easySelectD(\n        \"select \n            loan_id, loan_amount, loan_installment_amount, \n            if(thisMonthInstallmentPayingStatus is null, 0, 1) as thisMonthInstallmentPayingStatus, \n            if(loan_paid_amount is null, 0, loan_paid_amount) as loan_paid_amount \n        from {$table_prefix}loan as loan\n        left join (select \n                loan_ids, \n                sum(loan_installment_paying_amount) as loan_paid_amount \n            from {$table_prefix}loan_installment where is_trash = 0 group by loan_ids\n        ) as totalPaidAmount on loan_id = totalPaidAmount.loan_ids\n        left join (select \n                loan_ids, \n                1 as thisMonthInstallmentPayingStatus\n            from {$table_prefix}loan_installment where is_trash = 0 and MONTH(loan_installment_date) = {$month} and year(loan_installment_date) = {$year} group by loan_ids \n        ) as thisMonthStatus on loan_id = thisMonthStatus.loan_ids\n        where loan.is_trash = 0 and loan_borrower = {$emp_id} and loan_installment_starting_from <= '{$year}-{$month}-01'\n        and ( loan_paid_amount is null or loan_paid_amount < loan_amount)\" \n        // loan_paid_amount can be NULL on left join if there is no recrods, for that the is null check.\n        // We can also use HAVING cluese without using is null check. But it will raise a error with full_group_by mode.\n    );\n\n    $selectSalary = easySelectA(array(\n        \"table\"     => \"employees\",\n        \"fields\"    => \"round(emp_salary, 2) as emp_salary\",\n        \"where\"     => array(\"emp_id = {$emp_id}\")\n    ))[\"data\"][0][\"emp_salary\"];\n\n    if(!isset($getLoanDetails[\"data\"])) {\n        \n        $return = array (\n            \"totalInstallmentAmount\"  => 0,\n            \"totalLoan\"         => 0,\n            \"totalLoanPaid\"     => 0,\n            \"salary\"            => $selectSalary\n       );\n    \n       echo json_encode($return);\n       return; \n    }\n\n    $loanInstallmentAmountInCurrentMonth = 0;\n    $totalLoanAmount = 0;\n    $totalLoanPaidAmount = 0;\n\n    foreach($getLoanDetails[\"data\"] as $key => $value) {\n\n        // Check if the loan installment already not paid\n        // then add the installment amount\n        if($value[\"thisMonthInstallmentPayingStatus\"] != 1) {\n            $loanInstallmentAmountInCurrentMonth += ( $value[\"loan_amount\"] - $value[\"loan_paid_amount\"] >= $value[\"loan_installment_amount\"] ) ? $value[\"loan_installment_amount\"] : $value[\"loan_amount\"] - $value[\"loan_paid_amount\"];\n        }\n\n        $totalLoanAmount += $value[\"loan_amount\"];\n        $totalLoanPaidAmount += $value[\"loan_paid_amount\"];\n        \n    }\n    \n   $return = array (\n        \"totalInstallmentAmount\"  => $loanInstallmentAmountInCurrentMonth,\n        \"totalLoan\"         => $totalLoanAmount,\n        \"totalLoanPaid\"     => $totalLoanPaidAmount,\n        \"salary\"            => $selectSalary\n   );\n\n   echo json_encode($return);\n\n}\n\n\n// Get Employee Advance Payments Data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmployeeAdvancePaymentsData\") {\n    $emp_id = safe_input($_POST[\"empId\"]);\n\n    $getEmpAdvancePaymentData = easySelectD(\"\n        select emp_id, emp_firstname, emp_lastname,\n            if(advance_payment_amount_sum is null, 0, advance_payment_amount_sum) as advance_paid_amount,\n            if(payments_return_amount_sum is null, 0, payments_return_amount_sum) + if(payment_amount_sum is null, 0, payment_amount_sum) as advance_adjust_amount\n        from {$table_prefix}employees\n        left join ( select \n                advance_payment_pay_to, \n                sum(advance_payment_amount) as advance_payment_amount_sum \n            from {$table_prefix}advance_payments where is_trash = 0 group by advance_payment_pay_to \n        ) as get_advance_payments on advance_payment_pay_to = emp_id\n        left join ( select \n                payment_to_employee, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefix}payments where is_trash = 0 and payment_type = 'Advance Adjustment' group by payment_to_employee \n        ) as get_payments on payment_to_employee = emp_id\n        left join ( select \n                payments_return_emp_id, \n                sum(payments_return_amount) as payments_return_amount_sum \n            from {$table_prefix}payments_return where is_trash = 0 group by payments_return_emp_id \n        ) as get_advance_return on payments_return_emp_id = emp_id\n        where emp_id = {$emp_id}\"\n    )[\"data\"][0];\n    \n    echo json_encode($getEmpAdvancePaymentData);\n\n}\n\n\n// Get Company Due Bill Details\nif(isset($_GET['page']) and $_GET['page'] == \"getCompanyDueBillDetails\") {\n    $company_id = safe_input($_POST[\"company_id\"]);\n\n    $getEmpAdvancePaymentData = easySelectD(\"\n        select company_id, round(company_opening_balance, 2) as company_opening_balance,\n            (\n                if(bills_amount_sum is null, 0, round(bills_amount_sum, 2)) +\n                if(purchase_grand_total is null, 0, round(purchase_grand_total, 2))\n            ) as bills_amount_sum,\n            (\n                if(payment_amount_sum is null, 0, round(payment_amount_sum, 2)) +\n                if(purchase_return_grand_total is null, 0, purchase_return_grand_total)\n            ) as payment_amount_sum,\n            if(adjustment_amount is null, 0, round(adjustment_amount, 2)) as adjustment_amount_sum\n        from {$table_prefix}companies\n        left join ( select \n                bills_company_id, \n                sum(bills_amount) as bills_amount_sum \n            from {$table_prefix}bills where is_trash = 0 group by bills_company_id \n        ) as get_company_bills on bills_company_id = company_id \n        left join ( select\n                payment_to_company, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefix}payments where is_trash = 0 and ( payment_type = 'Due Bill' or payment_type = 'Bill' ) group by payment_to_company \n        ) as get_company_payment on payment_to_company = company_id\n        left join (\n            select\n                pa_company,\n                sum(pa_amount) as adjustment_amount\n            from {$table_prefix}payment_adjustment where is_trash = 0 group by pa_company\n        ) as payment_adjustment on pa_company = company_id\n        left join (\n            select\n                purchase_company_id,\n                sum(CASE WHEN is_return = 0 then purchase_grand_total end) as purchase_grand_total,\n                sum(CASE WHEN is_return = 1 then purchase_due end) as purchase_return_grand_total\n            from {$table_prefix}purchases where is_trash = 0 group by purchase_company_id\n        ) as purchaseBill on purchaseBill.purchase_company_id = company_id\n        where company_id = {$company_id}\"\n    )[\"data\"][0];\n    \n    echo json_encode($getEmpAdvancePaymentData);\n\n}\n\n\n// Product Comparision Details\n\nif(isset($_GET['page']) and $_GET['page'] == \"getProductComparision\") {\n\n    $dateRange = explode(\" - \", safe_input($_POST[\"dateRange\"]));\n    $product = implode(\",\",$_POST[\"productsId\"]);\n\n\n    // Check if the given products are variable or not\n    $selectAllProduct = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_type, product_id, child_product as child_product_list\",\n        \"join\"      => array(\n            \"left join (\n                SELECT \n                    product_parent_id,\n                    group_concat(product_id) as child_product\n                FROM {$table_prefix}products\n                where is_trash = 0\n                group by product_parent_id\n            ) as child_product on child_product.product_parent_id = product_id\"\n        ),\n        \"where\"     => array(\n            \"product_id in($product)\"\n        )\n    ));\n\n\n    if($selectAllProduct !== false) {\n\n        $productIDList = array();\n        foreach($selectAllProduct[\"data\"] as $product ) {\n\n            if( $product[\"product_type\"] === \"Variable\" ) {\n\n                // If the product is variable, push the child_product_list in productIDList variable\n                array_push($productIDList, $product[\"child_product_list\"]);\n        \n            } else {\n        \n                // If the product is a normal product or any other type of product then push the product_id\n                array_push($productIDList, $product[\"product_id\"] );\n        \n            }\n\n        }\n\n\n        $product = implode(\",\", $productIDList);\n        \n    }\n\n    \n\n\n    $chart_label = array();\n    $chart_data = array();\n\n    $actProductAs = $_POST[\"actProduct\"];\n\n    if($actProductAs === \"Same\") {\n\n        list($startYear, $startMonth, $startDay) = explode(\"-\", $dateRange[0]);\n        list($endYear, $endMonth, $endDay) = explode(\"-\", $dateRange[1]);\n\n        $label = \"CONCAT( DAY(db_date), ', ', LEFT(MONTHNAME(db_date), 3))\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $label = \"LEFT(MONTHNAME(db_date), 3)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $label = \"YEAR(db_date)\";\n        }\n        \n        $groupByOnStockEntry = \"MONTH(stock_entry_date), DAY(stock_entry_date)\";\n        $groupByOnDbDate = \"MONTH(db_date), DAY(db_date)\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n\n            $groupByOnStockEntry = \"MONTH(stock_entry_date)\";\n            $groupByOnDbDate = \"MONTH(db_date)\";\n\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n\n            $groupByOnStockEntry = \"YEAR(stock_entry_date)\";\n            $groupByOnDbDate = \"YEAR(db_date)\";\n\n        }\n\n\n        $relationOnDate = \"MONTH(stock_entry_date) = MONTH(db_date) and DAY(stock_entry_date) = DAY(db_date)\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n\n            $relationOnDate = \"MONTH(stock_entry_date) = MONTH(db_date)\";\n\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n\n            $relationOnDate = \"YEAR(stock_entry_date) = YEAR(db_date)\";\n\n        }\n\n    \n        $sales = easySelectD(\"\n            SELECT\n                product_id,\n                product_name,\n                {$label} as label,\n                if(total_sale_qnt is null, 0, total_sale_qnt) as total_sale_qnt_sum\n            FROM\n                ro_products\n            JOIN time_dimension \n            LEFT JOIN ( select \n                        stock_entry_date, \n                        stock_product_id, \n                        sum(stock_item_qty) as total_sale_qnt \n                    from ro_product_stock where is_trash = 0 and stock_type = 'sale' group by {$groupByOnStockEntry}, stock_product_id\n                ) as sale_items ON {$relationOnDate} and stock_product_id = product_id\n            WHERE\n                product_id IN($product) and MONTH(db_date) between '{$startMonth}' and '{$endMonth}' and DAY(db_date) between '{$startDay}' and '{$endDay}'\n            GROUP BY {$groupByOnDbDate}, product_id\n            ORDER BY `time_dimension`.`db_date` ASC, product_id DESC\n        \");\n\n        //print_r($sales);\n        \n\n        foreach($sales[\"data\"] as $key => $data) {\n\n            // Collect Sold qunatity\n            if( !isset($chart_data[$data[\"product_id\"]]) ) {\n    \n                $chart_data[$data[\"product_id\"]] = array(\n                    \"label\"  => $data[\"product_name\"],\n                    \"borderColor\" => \"#\".substr(md5(rand()), 0, 6),\n                    \"borderWidth\"  => 2,\n                    \"data\"      => array($data[\"total_sale_qnt_sum\"])\n                );\n    \n            } else {\n    \n                array_push($chart_data[$data[\"product_id\"]][\"data\"], $data[\"total_sale_qnt_sum\"]);\n    \n            }\n    \n            // Collect Dates\n            if(!in_array($data[\"label\"], $chart_label)) {\n    \n                if( !in_array($data[\"label\"], $chart_label) ) {\n    \n                    array_push($chart_label, $data[\"label\"] );   \n    \n                }\n    \n    \n            }\n    \n        }\n\n        \n\n    } else {\n\n        $label = \"db_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $label = \"CONCAT(LEFT(MONTHNAME(db_date), 3), ', ', YEAR(db_date))\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $label = \"YEAR(db_date)\";\n        }\n        \n        $groupBy = \"stock_entry_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $groupBy = \"EXTRACT(YEAR_MONTH FROM stock_entry_date)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $groupBy = \"YEAR(stock_entry_date)\";\n        }\n\n\n        $relationOnDate = \"db_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $relationOnDate = \"EXTRACT(YEAR_MONTH FROM db_date)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $relationOnDate = \"YEAR(db_date)\";\n        }\n\n        $sales = easySelectD(\"\n            SELECT\n                product_id,\n                product_name,\n                {$label} as label,\n                db_date,\n                if(total_sale_qnt is null, 0, total_sale_qnt) as total_sale_qnt_sum\n            FROM\n                ro_products\n            JOIN time_dimension \n            LEFT JOIN ( select \n                        stock_entry_date, \n                        stock_product_id, \n                        sum(stock_item_qty) as total_sale_qnt \n                    from ro_product_stock where is_trash = 0 and stock_type = 'sale' group by {$groupBy}, stock_product_id\n                ) as sale_items ON {$groupBy} = {$relationOnDate} and stock_product_id = product_id\n            WHERE\n                product_id IN($product) and db_date between '{$dateRange[0]}' and '{$dateRange[1]}'\n            GROUP BY {$relationOnDate}, product_id\n            ORDER BY `time_dimension`.`db_date` ASC, product_id DESC\n        \")[\"data\"];\n\n        foreach($sales as $key => $data) {\n\n            // Collect Sold qunatity\n            if( !isset($chart_data[$data[\"product_id\"]]) ) {\n    \n                $chart_data[$data[\"product_id\"]] = array(\n                    \"label\"  => $data[\"product_name\"],\n                    \"borderColor\" => \"#\".substr(md5(rand()), 0, 6),\n                    \"borderWidth\"  => 2,\n                    \"data\"      => array($data[\"total_sale_qnt_sum\"])\n                );\n    \n            } else {\n    \n                array_push($chart_data[$data[\"product_id\"]][\"data\"], $data[\"total_sale_qnt_sum\"]);\n    \n            }\n    \n            // Collect Dates\n            if(!in_array($data[\"label\"], $chart_label)) {\n    \n                if( !in_array($data[\"label\"], $chart_label) ) {\n    \n                    array_push($chart_label, $data[\"label\"] );   \n    \n                }\n    \n    \n            }\n    \n        }\n\n    }\n\n\n    echo json_encode( array(\n            \"label\"  => $chart_label,\n            \"dataset\"  => $chart_data\n        ));\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getAccountsInfo\") {\n\n    $selectAccounts = easySelectA(array(\n        \"table\"    => \"accounts\",\n        \"fields\"    => \"accounts_name, round(accounts_balance, 2) as accounts_balance\",\n        \"where\"     => array(\n            \"accounts_id\"   => $_POST[\"accountsId\"]\n        )\n    ));\n\n    $accountData = array();\n\n    if($selectAccounts) {\n        $accountData[\"name\"] = $selectAccounts[\"data\"][0][\"accounts_name\"];\n        $accountData[\"balance\"] = $selectAccounts[\"data\"][0][\"accounts_balance\"];\n    }\n\n    echo json_encode($accountData);\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseList\") {\n\n    $invoiceSearch = ( isset($_GET[\"s\"]) and !empty($_GET[\"s\"]) ) ? \"and sales_reference like '%{$_GET[\"s\"]}%'\" : \"\";\n\n    $selectSales = easySelectA(array(\n        \"table\"     => \"sales\",\n        \"fields\"    => \"sales_id as id, sales_status, DATE_FORMAT(sales_delivery_date, '%b %d, %Y') as date, sales_reference as ref, round(sales_grand_total, 2) as total, sales_payment_status as pay_status, shop_name as shop\",\n        \"join\"      => array(\n            \"left join {$table_prefix}shops on sales_shop_id = shop_id\"\n        ),\n        \"where\"     => array(\n            \"sales_customer_id\" => $_GET[\"cid\"],\n            \"{$invoiceSearch}\"\n        ),\n        \"orderby\"   => array(\n            \"sales_id\"  => \"DESC\"\n        ),\n        \"limit\" => array(\n            \"start\"     => 0,\n            \"length\"    => 25\n        )\n    ));\n\n    if($selectSales) {\n        \n        echo json_encode($selectSales[\"data\"]);\n\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseProductList\") {\n\n    $selectPurchaseProductBySalesId = easySelectA(array(\n        \"table\"     => \"product_stock\",\n        \"fields\"    => \"stock_product_id as pid, product_name as pn, product_unit as pu, has_expiry_date as hed, product_generic as pg, if(stock_batch_id is null, '', stock_batch_id) as batch, round(stock_item_price, 2) as stock_item_price, round(stock_item_qty, 2) as stock_item_qty, round(stock_item_discount, 2) as stock_item_discount, round(stock_item_subtotal, 2) as stock_item_subtotal\",\n        \"join\"      => array(\n            \"left join {$table_prefix}products on stock_product_id = product_id\",\n            \"left join {$table_prefix}product_batches on stock_batch_id = batch_id\"\n        ),\n        \"where\"     => array(\n            \"stock_item_qty > 0 and stock_sales_id \" => $_GET[\"saleid\"]\n        )\n    ));\n\n    if($selectPurchaseProductBySalesId) {\n        \n        echo json_encode($selectPurchaseProductBySalesId[\"data\"]);\n\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerData\") {\n\n    $customerData = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"round(customer_shipping_rate, 2) as shipping_rate, customer_discount as discount\",\n        \"where\"     => array(\n            \"customer_id\"   => $_GET[\"cid\"]\n        )\n    ));\n\n    echo json_encode($customerData[\"data\"][0]);\n\n}\n\n\n/************************** Update in line data **********************/\nif(isset($_GET['page']) and $_GET['page'] == \"updateInLine\") {\n\n    //print_r( $_REQUEST );\n\n    /**\n     * tab = table\n     * p = prefeix\n     * f = field\n     * t = target (primary key field)\n     * pkey = primary key\n     */\n\n    if( !isset($_GET[\"t\"]) or !isset($_GET[\"f\"]) or !isset($_GET[\"p\"]) or !isset($_GET[\"tab\"])  ) {\n\n        echo '{\n            \"error\": \"true\",\n            \"msg\": \"An unknow error occured. Please contact with administrator.\"\n        }';\n\n    } else if( empty($_GET[\"t\"]) or empty($_GET[\"f\"]) or empty($_GET[\"p\"]) or empty($_GET[\"tab\"])  ) {\n        \n        echo '{\n            \"error\": \"true\",\n            \"msg\": \"An unknow error occured. Please contact with administrator.d\"\n        }';\n\n    } else {\n\n        // Update the\n        $updateData = easyUpdate(\n            safe_input($_GET[\"tab\"]),\n            array(\n                safe_input($_GET[\"p\"]).safe_input($_GET[\"f\"]) => $_POST[\"newData\"]\n            ),\n            array(\n                safe_input($_GET[\"p\"]).safe_input($_GET[\"t\"]) => $_POST[\"pkey\"]\n            )\n        );\n\n        if($updateData === true) {\n            \n            echo '{\n                \"error\": \"false\"\n            }';\n\n        } else {\n\n            echo '{\n                \"error\": \"true\",\n                \"msg\": \"'. $updateData .'\"\n            }';\n\n        }\n\n    }\n\n}\n\n\n/************************** Add New Capital **********************/\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerClosingsDate\") {\n\n    $closings = easySelectA(array(\n        \"table\"     => \"closings\",\n        \"fields\"    => \"closings_date, closings_title\",\n        \"where\"     => array(\n            \"is_trash = 0 and closings_customer\" => $_GET[\"cid\"]\n        ),\n        \"orderby\"   => array(\n            \"closings_date\" => \"ASC\"\n        )\n    ));\n\n    \n    if($closings !== false) {\n            \n        $closingData[\"Next Period\"] = array(\n            end($closings[\"data\"])[\"closings_date\"],\n            date(\"Y-12-31\")\n        );\n\n        $previous_data = \"1970-01-00\";\n        foreach($closings[\"data\"] as $closing) {\n            \n            $closingData[$closing[\"closings_title\"]] = array(\n                date(\"Y-m-d\", strtotime($previous_data . ' +1 day')),\n                $closing[\"closings_date\"]\n            );\n            $previous_data = $closing[\"closings_date\"];\n\n        }\n\n        echo json_encode($closingData);\n\n    }\n\n}\n\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"productVisualList\") {\n\n    $productCategoryFilter = ( isset($_GET[\"catId\"]) and !empty($_GET[\"catId\"]) ) ? $_GET[\"catId\"] : \"\";\n    $productBrandFilter = ( isset($_GET[\"brand\"]) and !empty($_GET[\"brand\"]) ) ? $_GET[\"brand\"] : \"\";\n    $productEditionFilter = ( isset($_GET[\"edition\"]) and !empty($_GET[\"edition\"]) ) ? \" AND product.product_edition = '{$_GET[\"edition\"]}'\" : \" AND product_type != 'Child' \";\n    $productGenericFilter = ( isset($_GET[\"generic\"]) and !empty($_GET[\"generic\"]) ) ? $_GET[\"generic\"] : \"\";\n    $productAuthorFilter = ( isset($_GET[\"author\"]) and !empty($_GET[\"author\"]) ) ? $_GET[\"author\"] : \"\";\n    $productTerms = ( isset($_GET[\"terms\"]) and !empty($_GET[\"terms\"]) ) ? \" AND product_name like '%{$_GET[\"terms\"]}%'\" : \"\";\n    $productSort = ( isset($_GET[\"sort\"]) and !empty($_GET[\"sort\"]) ) ? $_GET[\"sort\"] : \"\";\n\n    $oderBy = array(\n        \"product.product_id\" => \"DESC\"\n    );\n    \n    if( !empty($productSort) ) {\n\n        if( $productSort === \"1\") {\n\n            $oderBy = array(\n                \"total_sold_qty\"  => \"DESC\",\n                \"id\"           => \"ASC\"\n            );\n\n        } else if( $productSort === \"2\") {\n            $oderBy = array(\n                \"total_stock\"  => \"ASC\",\n                \"id\"           => \"ASC\"\n            );\n        } else if( $productSort === \"3\") {\n            $oderBy = array(\n                \"total_stock\"  => \"DESC\",\n                \"id\"           => \"ASC\"\n            );\n        }\n\n    }\n    \n    $productList = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id as id, product_name as name, product_type, product_alert_qnt as alert, length(product_photo) as v, \n\n                        round( coalesce(child_stock_in, main_stock_in, 0), 2) as stock,\n                        round( coalesce(child_sold_qty, main_sold_qty, 0), 2) as sold_qty,\n\n                        round( coalesce(child_stock_in, edition_stock_in, main_stock_in, 0), 2) as total_stock,\n                        round( coalesce(child_sold_qty, edition_sold_qty, main_sold_qty, 0), 2) as total_sold_qty\",\n        \"where\"     => array (\n            \"is_trash = 0 $productEditionFilter\",\n            \" AND product_category_id\"          => $productCategoryFilter,\n            \" AND product_brand_id\"             => $productBrandFilter,\n            \" AND product_generic\"              => $productGenericFilter,\n            \"{$productTerms}\"\n        ),\n        \"join\"  => array(\n            \n            \"left join (select\n                    product_id,\n                    sum(base_stock_in/ base_qty) as main_stock_in\n                from product_base_stock\n                group by product_id\n            ) as stock using(product_id)\",\n\n            \"left join (select\n                    stock_product_id,\n                    sum(stock_item_qty) as main_sold_qty\n                from {$table_prefix}product_stock\n                where is_trash = 0 and stock_type = 'sale'\n                group by stock_product_id\n            ) as sold on stock_product_id = product.product_id\",\n\n            \"left join ( -- Variable product stock counting by all child product\n\n                SELECT -- Child Product\n                    product_parent_id,\n                    group_concat(product_id) as child_products,\n                    sum(stock_in) as child_stock_in,\n                    sum(sold_qty) as child_sold_qty\n                FROM {$table_prefix}products as childProductJoin\n\n                left join (select \n                        product_id,\n                        sum(base_stock_in/ base_qty) as stock_in\n                    from product_base_stock\n                    group by product_id\n                ) as stock using(product_id)\n                \n                left join (select\n                        stock_product_id,\n                        sum(stock_item_qty) as sold_qty\n                    from {$table_prefix}product_stock\n                    where is_trash = 0 and stock_type = 'sale'\n                    group by stock_product_id\n                ) as sold on stock_product_id = childProductJoin.product_id\n\n                where childProductJoin.is_trash = 0\n                group by product_parent_id\n\n            ) as child_product on child_product.product_parent_id = product_id\",\n\n            \"LEFT JOIN (\n\n                SELECT -- same edition Product counting\n                    product_parent_id,\n                    product_edition as test_edit,\n                    product_edition,\n                    sum(edition_stock_in) as edition_stock_in,\n                    sum(edition_sold_qty) as edition_sold_qty\n                FROM {$table_prefix}products as sameEditionProduct\n    \n                left join (select \n                        product_id,\n                        sum(base_stock_in/ base_qty) as edition_stock_in\n                    from product_base_stock\n                    group by product_id\n                ) as stock using(product_id)\n                \n                left join (select\n                        stock_product_id,\n                        sum(stock_item_qty) as edition_sold_qty\n                    from {$table_prefix}product_stock\n                    where is_trash = 0 and stock_type = 'sale'\n                    group by stock_product_id\n                ) as sold on stock_product_id = sameEditionProduct.product_id\n    \n                where sameEditionProduct.is_trash = 0\n                group by product_parent_id, product_edition\n    \n                -- sep = same edition product\n    \n            ) as sep on (sep.product_parent_id = product.product_parent_id and sep.product_edition = product.product_edition)\",\n\n        ),\n        \"orderby\"   => $oderBy,\n        \"limit\"     => array (\n            \"start\"     => 0,\n            \"length\"    => empty(get_options(\"maxProductDisplay\")) ? 100 : get_options(\"maxProductDisplay\")\n        )\n        \n    ));\n    \n    if($productList) {\n        \n        echo json_encode($productList[\"data\"]);\n\n    } else {\n        echo \"null\";\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getChildProductData\") {\n\n\n    $warehouse_filter = empty($_GET[\"wid\"]) ? \"\" : \" = \" . safe_input($_GET[\"wid\"]);\n\n    $getChildProductData = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"\n                        product.product_id as pid, product_type, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, \n                        brand_name, product_purchase_price, product_sale_price, product_edition, product_unit, product_category_id, category_name,\n                        round( coalesce(initial_qty, 0), 2) as initial_qty,\n                        round( coalesce(production_qty, 0), 2) as production_qty,\n                        round( coalesce(sale_qty, 0), 2) as sale_qty,\n                        round( coalesce(wastage_sale_qty, 0), 2) as wastage_sale_qty,\n                        round( coalesce(sale_return_qty, 0), 2) as sale_return_qty,\n                        round( coalesce(purchase_qty, 0), 2) as purchase_qty,\n                        round( coalesce(purchase_order_qty, 0), 2) as purchase_order_qty,\n                        round( coalesce(purchase_return_qty, 0), 2) as purchase_return_qty,\n                        round( coalesce(transfer_in_qty, 0), 2) as transfer_in_qty,\n                        round( coalesce(transfer_out_qty, 0), 2) as transfer_out_qty,\n                        round( coalesce(specimen_copy_qty, 0), 2) as specimen_copy_qty,\n                        round( coalesce(specimen_copy_return_qty, 0), 2) as specimen_copy_return_qty,\n                        round( coalesce(expired_qty, 0), 2) as expired_qty,\n                        round( coalesce(stock_qty, 0), 2) as stock_qty,\n                        round( coalesce(sale_item_subtotal, 0), 2) as total_sold_amount,\n                        round( coalesce(purchase_item_subtotal, 0), 2) as total_purchased_amount,\n                        round( coalesce(sale_qty_in_range, 0), 2) as sale_qty_in_range,\n                        round( coalesce(specimen_copy_qty, 0), 2) as specimen_copy_qty\n        \",\n        \"join\"      => array(\n            \"left join (\n                select\n                    stock_product_id,\n                    sum(case when stock_type = 'initial' then stock_item_qty end) as initial_qty,\n                    sum(case when stock_type = 'sale-production' then stock_item_qty end) as production_qty,\n                    sum(case when stock_type = 'sale' then stock_item_qty end) as sale_qty,\n                    sum(case when stock_type = 'sale' then stock_item_qty end) as sale_qty_in_range,\n                    sum(case when stock_type = 'sale' then stock_item_subtotal end) as sale_item_subtotal,\n                    sum(case when stock_type = 'wastage-sale' then stock_item_qty end) as wastage_sale_qty,\n                    sum(case when stock_type = 'sale-return' then stock_item_qty end) as sale_return_qty,\n                    sum(case when stock_type = 'purchase' then stock_item_qty end) as purchase_qty,\n                    sum(case when stock_type = 'purchase' then stock_item_subtotal end) as purchase_item_subtotal,\n                    sum(case when stock_type = 'purchase-order' then stock_item_qty end) as purchase_order_qty,\n                    sum(case when stock_type = 'purchase-return' then stock_item_qty end) as purchase_return_qty,\n                    sum(case when stock_type = 'transfer-in' then stock_item_qty end) as transfer_in_qty,\n                    sum(case when stock_type = 'transfer-out' then stock_item_qty end) as transfer_out_qty,\n                    sum(case when stock_type = 'specimen-copy' then stock_item_qty end) as specimen_copy_qty,\n                    sum(case when stock_type = 'specimen-copy-return' then stock_item_qty end) as specimen_copy_return_qty\n                from {$table_prefix}product_stock\n                where is_trash = 0 and stock_warehouse_id $warehouse_filter\n                group by stock_product_id\n            ) as product_stock on stock_product_id = product_id\",\n            \"left join (\n                select\n                    vp_id,\n                    sum(case when batch_expiry_date < curdate() then base_stock_in/base_qty end) as expired_qty,\n                    sum(case when batch_expiry_date is null or batch_expiry_date > curdate() then base_stock_in/base_qty end) as stock_qty\n                from product_base_stock\n                where warehouse $warehouse_filter\n                group by vp_id\n            ) as base_stock on base_stock.vp_id = product.product_id\",\n\n            \"left join {$table_prefix}product_category on product_category_id = category_id\",\n            \"left join {$table_prefix}product_brands on product_brand_id = brand_id\",\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 and product.product_parent_id\" => $_GET[\"pid\"]\n        ),\n        \"groupby\"   => \"product.product_id\",\n    ));\n\n    if($getChildProductData !== false) {\n\n\n        $allData = [];\n\n        foreach($getChildProductData['data'] as $key => $value) {\n\n            \n            $allNestedData = [];\n\n            $allNestedData[] = \"\";\n                \n            $allNestedData[] = \"<a title='Show More Details' href='\". full_website_address() .\"/reports/product-report/?pid={$value['pid']}'>{$value['product_name']}</a> \n                            <a title='Update stock' style='padding-left: 5px; color: #a1a1a1;' class='updateEntry' href='\". full_website_address() . \"/xhr/?module=reports&page=updateProductStock' data-to-be-updated='\". $value[\"pid\"] .\"'><i class='fa fa-refresh'></i></a>\";\n            $allNestedData[] = $value[\"brand_name\"];\n            $allNestedData[] = $value[\"category_name\"];\n            $allNestedData[] = $value[\"product_edition\"];\n            $allNestedData[] = $value[\"initial_qty\"];\n            $allNestedData[] = $value[\"production_qty\"];\n            $allNestedData[] = number_format($value[\"purchase_qty\"], 2) ;\n            $allNestedData[] = $value[\"purchase_return_qty\"];\n            $allNestedData[] = $value[\"transfer_in_qty\"];\n            $allNestedData[] = $value[\"transfer_out_qty\"];\n            $allNestedData[] = number_format($value[\"sale_qty\"], 2);\n            $allNestedData[] = $value[\"sale_qty_in_range\"];\n            $allNestedData[] = $value[\"sale_return_qty\"];\n            $allNestedData[] = $value[\"specimen_copy_qty\"];\n            $allNestedData[] = $value[\"specimen_copy_return_qty\"];\n            $allNestedData[] = $value[\"expired_qty\"];\n            $allNestedData[] = number_format($value[\"stock_qty\"], 2);\n            $allNestedData[] = $value[\"product_unit\"];\n            $allNestedData[] = $value[\"stock_qty\"] * $value[\"product_sale_price\"];\n            $allNestedData[] = $value[\"stock_qty\"] * $value[\"product_purchase_price\"];\n            $allNestedData[] = $value[\"total_purchased_amount\"];\n            $allNestedData[] = $value[\"total_sold_amount\"];\n\n            \n            $allData[] = $allNestedData;\n\n        }\n\n\n        echo json_encode($allData);\n\n\n    } else {\n\n        echo 0;\n\n    }\n\n}\n\n\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"salesOverviewChartData\") {\n\n    $type = isset($_GET[\"type\"]) ? $_GET[\"type\"] : \"daily\";\n\n    if( $type === \"weekly\" ) {\n\n        $weeklySalesData = easySelectD(\"\n            SELECT\n                concat(date_format(db_date, '%D %M')) AS label,\n                if(sales_quantity is null, 0, sum(sales_quantity)) as sales_quantity\n            FROM time_dimension\n            LEFT JOIN (\n                SELECT \n                    sales_delivery_date, \n                    sum(sales_quantity) as sales_quantity \n                FROM {$table_prefix}sales \n                WHERE is_trash = 0\n                GROUP BY sales_delivery_date\n            ) AS sales on sales_delivery_date = db_date\n            WHERE db_date BETWEEN NOW() - INTERVAL 30 WEEK AND NOW()\n            group by week(db_date)\n\t\t\");\n\n        $weeklySalesOverviewLabel = array();\n\t\t$weeklySalesOverviewData = array();\n        \n        if( $weeklySalesData !== false ) {\n\n            foreach($weeklySalesData[\"data\"] as $sales ) {\n                array_push($weeklySalesOverviewLabel, $sales[\"label\"] );\n                array_push($weeklySalesOverviewData, $sales[\"sales_quantity\"] );\n            }\n\n        }\n\n\n        $weeklySalesData = array(\n            \"labels\" => $weeklySalesOverviewLabel,\n            \"datasets\" => array(\n                array(\n                    \"label\" => __(\"Weekly Sales\"),\n                    \"borderColor\" => \"green\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $weeklySalesOverviewData\n                )\n            )\n        );\n\n        echo json_encode($weeklySalesData);\n\n\n    } else {\n\n        \n        /** Daily Sales Calculatin */\n\n        $dailySalesData = easySelectD(\"\n            SELECT\n                db_date AS label,\n                if(sales_quantity is null, 0, sales_quantity) as sales_quantity\n            FROM time_dimension\n            LEFT JOIN (\n                SELECT \n                    sales_delivery_date, \n                    sum(sales_quantity) as sales_quantity \n                FROM {$table_prefix}sales \n                WHERE is_trash = 0\n                GROUP BY sales_delivery_date\n            ) AS sales on sales_delivery_date = db_date\n            WHERE db_date BETWEEN NOW() - INTERVAL 30 DAY AND NOW()\n\t\t\");\n\n        $dailySalesOverviewLabel = array();\n\t\t$dailySalesOverviewData = array();\n        \n        if( $dailySalesData !== false ) {\n\n            foreach($dailySalesData[\"data\"] as $sales ) {\n                array_push($dailySalesOverviewLabel, $sales[\"label\"] );\n                array_push($dailySalesOverviewData, $sales[\"sales_quantity\"] );\n            }\n\n        }\n\n\n        $dailySalesData = array(\n            \"labels\" => $dailySalesOverviewLabel,\n            \"datasets\" => array(\n                array(\n                    \"label\" => __(\"Daily Sales\"),\n                    \"borderColor\" => \"green\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $dailySalesOverviewData\n                )\n            )\n        );\n\n        echo json_encode($dailySalesData);\n\n    }\n\n\n}\n\n?>"], "fixing_code": ["<?php\n\n\n// Product Details for purchase\nif(isset($_GET['page']) and $_GET['page'] == \"productDetails\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelectA(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        die(\"Sorry no product found!\");\n    }\n\n    //$this_product = product_type($product_id);\n    $select_product = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as product_name, product_type, 0 as product_discount, \n                        round( COALESCE(purchase_price, product_purchase_price), 2) as product_purchase_price, \n                        round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, \n                        product_unit, has_expiry_date, if(stock_in is null, 0, round(stock_in, 2)) as stock_in,\n                        if(total_sold is null, 0, round(total_sold, 2)) as total_sold_count, round(product_alert_qnt, 2) as product_alert_qnt\",\n        \"join\"      => array(\n            \"left join (select\n                            vp_id,\n                            sum(base_stock_in/base_qty) as stock_in\n                        from product_base_stock\n                        where warehouse = '{$_SESSION['wid']}'\n                        group by vp_id\n            ) as pbs on pbs.vp_id = product.product_id\",\n            \"left join (\n                SELECT\n                    stock_product_id,\n                    sum(stock_item_qty) as total_sold\n                FROM {$table_prefix}product_stock\n                WHERE is_trash = 0 and stock_type = 'sale' and stock_warehouse_id = '{$_SESSION['wid']}'\n            ) as sold on sold.stock_product_id = product.product_id\",\n            // Because Of we have different price based on shop\n            \"left join (SELECT\n                            product_id,\n                            purchase_price,\n                            sale_price\n                FROM {$table_prefix}product_price    \n                WHERE shop_id = '{$_SESSION['sid']}'\n            ) as product_price on product_price.product_id = product.product_id\"\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 and product.product_id\"   => $product_id\n        )\n    ));\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n        die(\"Sorry no product found!\");\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) { \n\n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"child_products.is_trash = 0 and parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n\n\n    } else if( $product_is(\"Grouped\") ) {\n\n        $selectGroupedProducts = easySelectA(array(\n            \"table\"     => \"bg_product_items as bg_product_items\",\n            \"fields\"    => \"bg_item_product_id, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as product_name, product_type,\n                            round( COALESCE(purchase_price, product_purchase_price)  , 2) as product_purchase_price, \n                            product_unit, bg_product_qnt, 0 as product_discount, if(stock_in is null, 0, round(stock_in, 2)) as stock_in,\n                            if(total_sold is null, 0, round(total_sold, 2)) as total_sold_count, round(product_alert_qnt, 2) as product_alert_qnt\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as products on products.product_id = bg_item_product_id\",\n                \"left join (SELECT\n                                product_id,\n                                purchase_price\n                    FROM {$table_prefix}product_price \n                    WHERE shop_id = '{$_SESSION['sid']}'\n                ) as product_price on product_price.product_id = bg_item_product_id\",\n                \"left join (\n                    SELECT\n                        stock_product_id,\n                        sum(stock_item_qty) as total_sold\n                    FROM {$table_prefix}product_stock\n                    WHERE is_trash = 0 and stock_type = 'sale' and stock_warehouse_id = '{$_SESSION['wid']}'\n                ) as sold on sold.stock_product_id = bg_item_product_id\",\n                \"left join (select\n                                vp_id,\n                                sum(base_stock_in/base_qty) as stock_in\n                            from product_base_stock\n                            where warehouse = '{$_SESSION['wid']}'\n                            group by vp_id\n                ) as pbs on pbs.vp_id = bg_item_product_id\",\n            ),\n            \"where\"     => array(\n                \"is_raw_materials = 0 and bg_product_id\" => $product_id\n            )\n        ));\n\n        if($selectGroupedProducts !== false) {\n\n            foreach($selectGroupedProducts[\"data\"] as $pkey => $pvalue) {\n\n                // Store the product data\n                array_push($returnData, \n                    array(\n                        \"pid\"       => $pvalue[\"bg_item_product_id\"], // pid = Product id\n                        \"pn\"        => $pvalue[\"product_name\"], // pn = product Name\n                        \"pd\"        => $pvalue[\"product_discount\"], // pd = product Discount \n                        \"iq\"        => $pvalue[\"bg_product_qnt\"], // iq = Item Quantity\n                        \"pu\"        => $pvalue[\"product_unit\"], // iq = Item Quantity\n                        \"alertq\"    => $product[\"product_alert_qnt\"], // aq = alert quantity\n                        \"soldq\"     => $product[\"total_sold_count\"], // soldq = stock quantity\n                        \"stockq\"    => $product[\"stock_in\"], // stockq = stock quantity\n                        \"pp\"        => $pvalue[\"product_purchase_price\"], // sp = purchase price\n                    )\n                );\n\n            }\n\n        }\n        \n    } else {\n\n        // For normal product\n        array_push($returnData, array(\n            \"pid\"       => $product[\"product_id\"], // pid = Product id\n            \"pn\"        => $product[\"product_name\"], // pn = product Name\n            \"pd\"        => $product[\"product_discount\"], // pd = product Discount\n            \"sp\"        => $product[\"product_sale_price\"], // sp = sale price\n            \"pp\"        => $product[\"product_purchase_price\"], // sp = purchase price\n            \"pu\"        => $product[\"product_unit\"], // pu = Product Unit\n            \"alertq\"    => $product[\"product_alert_qnt\"], // aq = alert quantity\n            \"soldq\"     => $product[\"total_sold_count\"], // soldq = stock quantity\n            \"stockq\"    => $product[\"stock_in\"], // stockq = stock quantity\n            \"hed\"       => $product[\"has_expiry_date\"] // hed = Has Expiry Date\n        ));\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n// Product details for POS\nif(isset($_GET['page']) and $_GET['page'] == \"productDetailsForPos\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelectA(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        \n        $returnData = array (\n            \"error\" => true,\n            \"msg\"   => \"Product out of stock or not found.\"\n        );\n\n        echo json_encode($returnData);\n        exit();\n    }\n\n    $warehouse_id = isset($_GET[\"warehouse_id\"]) ? (int)safe_input($_GET[\"warehouse_id\"]) : \"\";\n    $customer_id = isset($_GET[\"cid\"]) ? (int)safe_input($_GET[\"cid\"]) : \"\";\n    $product_qnt = (isset($_GET[\"pqnt\"]) and !empty($_GET[\"pqnt\"])) ? safe_entities($_GET[\"pqnt\"]) : get_options(\"defaultSaleQnt\");\n    $packet = ( isset($_GET[\"packet\"]) and !empty($_GET[\"packet\"]) ) ? safe_entities($_GET[\"packet\"]) : 0;\n\n    $customerType = \"consumer\";\n    $selectCustomerType = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"customer_type\",\n        \"where\"     => array(\n            \"customer_id\"   => $customer_id\n        )\n    ));\n\n    if($selectCustomerType !== false) {\n        $customerType = strtolower($selectCustomerType[\"data\"][0][\"customer_type\"]);\n    }\n\n    // Settings\n    $allowToAddStockOutProduct = get_options(\"allowToAddStockOutProductInPOS\");\n    $allowToSaleStockOutProduct = get_options(\"allowToSaleStockOutProductInPOS\");\n\n    $returnData = array();\n\n    $select_product = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id as product_id, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as product_name, product_generic, \n                        if(stock_in is null, 0, round(stock_in, 2) ) as stock_in, product_type, product_{$customerType}_discount as product_discount, \n                        round( COALESCE(product_price.purchase_price, product_purchase_price), 2) as product_purchase_price, \n                        round( COALESCE(product_price.sale_price, product_sale_price), 2) as product_sale_price, \n                        product_packet_qnt, product_unit, maintain_stock, has_expiry_date, has_batch\",\n        \"join\"      => array(\n            \"left join ( select \n                            vp_id,\n                            if(batch_id is not null, 1, 0) as has_batch, /** Checking the product if set has expriy date and there also have batch entry*/\n                            warehouse, \n                            sum(base_stock_in/base_qty) as stock_in \n                        FROM product_base_stock\n                        where vp_id= '{$product_id}' and ( batch_id is null or date(batch_expiry_date) > curdate() ) and warehouse = '{$warehouse_id}' \n                        group by vp_id\n                    ) as stock on stock.vp_id =  product.product_id\",\n            // Because Of we have different price based on shop\n            \"left join (SELECT\n                            product_id,\n                            purchase_price,\n                            sale_price\n                FROM {$table_prefix}product_price    \n                WHERE shop_id = '{$_SESSION['sid']}'\n            ) as product_price on product_price.product_id = product.product_id\"\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 and product.product_id\"   => $product_id\n        )\n    ));\n\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n\n        $returnData = array (\n            \"error\" => true,\n            \"msg\"   => \"Product out of stock or not found.\"\n        );\n\n        echo json_encode($returnData);\n        exit();\n\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) {\n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"child_products.is_trash = 0 and parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n        \n    } else {\n\n        // Select products, which have sub/bundle products and check it if there have enough quantity in stock\n        \n        $subProductsStockCheck = easySelectA(array(\n            \"table\"     => \"bg_product_items\",\n            \"fields\"    => \"bg_item_product_id, product_name, product_{$customerType}_discount as product_discount, \n                            bg_item_product_id, \n\n                            round( COALESCE(product_price.purchase_price, sub_product.product_purchase_price), 2) as product_purchase_price, \n                            round( COALESCE(product_price.sale_price, sub_product.product_sale_price), 2) as product_sale_price, \n\n                            sub_product.product_generic as product_generic,\n                            sub_product.product_unit as product_unit,\n                            sub_product.product_packet_qnt as product_packet_qnt,\n                            sub_product.has_expiry_date as has_expiry_date,\n                            sub_product.maintain_stock as maintain_stock,\n                            if(stock_in is null, 0, round(stock_in, 2)) as stock_in,\n                            round(bg_product_qnt, 2) as bg_product_qnt,\n                            has_batch\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as sub_product on sub_product.product_id = bg_item_product_id\",\n                \"left join ( select \n                                vp_id,\n                                if(batch_id is not null, 1, 0) as has_batch, /** Checking the product if set has expriy date and there also have batch entry*/\n                                sum(base_stock_in/base_qty) as stock_in \n                        FROM product_base_stock\n                        where ( batch_id is null or date(batch_expiry_date) > curdate() ) and warehouse = '{$warehouse_id}' \n                        group by vp_id\n                    ) as stock on stock.vp_id = bg_item_product_id\",\n                // Because Of we have different price based on shop\n                \"left join (SELECT\n                                product_id,\n                                purchase_price,\n                                sale_price\n                    FROM {$table_prefix}product_price    \n                    WHERE shop_id = '{$_SESSION['sid']}'\n                ) as product_price on product_price.product_id = sub_product.product_id\"\n            ),\n            \"where\"     => array(\n                \"is_raw_materials = 0 and bg_product_id = {$product_id}\"\n            )\n\n        ));\n\n\n        // default false value for stock out product in bundle/ sub product\n        $subProductIsStockOut = false;\n\n        // Checking sub product stock\n        if($subProductsStockCheck !== false) {\n\n            // Set stock quantity to null by default\n            $lowerQuantity = null;\n\n            foreach($subProductsStockCheck[\"data\"] as $subKey => $subProduct) {\n\n                // Calculate stock quantity\n                $stockQnt = $subProduct[\"stock_in\"] / $subProduct[\"bg_product_qnt\"];\n\n                // Check there at least one stock out product in this bundle product\n                $subProductIsStockOut = $subProductIsStockOut ?: $product_qnt > $stockQnt;\n\n                 // Check if the $product_qnt/ Sale quantity is below of stock quantity\n                // And return the lower quantity with error msg\n                if( $subProduct[\"maintain_stock\"] == 1 and $product_qnt > $stockQnt and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct ) and ( $lowerQuantity === null or $lowerQuantity > $stockQnt )) {\n                    \n                    $product_unit = $subProduct[\"product_unit\"] !== null ? $subProduct[\"product_unit\"] . \"(s)\" : \"\";\n\n                    $returnData = array (\n                        \"error\" => true,\n                        \"stq\"   => $stockQnt,\n                        \"msg\"   => \"The Bundle/ Grouped item ({$subProduct[\"product_name\"]}) only left {$subProduct[\"stock_in\"]}/{$subProduct[\"bg_product_qnt\"]} = {$stockQnt} {$product_unit} in stock. But it is defined {$product_qnt} {$product_unit}. Quantity must be bellow or equal to product stock in.\"\n                    );\n\n                    $lowerQuantity = $stockQnt;\n\n                } else if( $product_is(\"Grouped\") ) { \n                    \n                    // If there is no error, add the grouped product in $returnData\n                    // Store the Grouped product data\n                    array_push($returnData, array(\n                        \"pid\"  => $subProduct[\"bg_item_product_id\"], // pid = Product id\n                        \"pn\"   => $subProduct[\"product_name\"], // pn = product Name\n                        \"pd\"   => $subProduct[\"product_discount\"], // pd = product Discount \n                        \"stq\"  => $stockQnt, // stq = Stock Quantity\n                        \"iq\"   => $subProduct[\"bg_product_qnt\"], // item quantity\n                        \"so\"   => ( $subProduct[\"maintain_stock\"] == 1 and ( $product_qnt > $stockQnt or $subProductIsStockOut ) and !$allowToSaleStockOutProduct) ? 1 : 0, // Stock Out\n                        \"sp\"   => $subProduct[\"product_sale_price\"], // sp = sale price\n                        \"pp\"   => $subProduct[\"product_purchase_price\"], // pp = purchase price\n                        \"gn\"   => $subProduct[\"product_generic\"], // gn = generic name\n                        \"pu\"   => $subProduct[\"product_unit\"], // pu = Product Unit\n                        \"pq\"   => $subProduct[\"product_packet_qnt\"], // pu = Product Unit\n                        \"hed\"  => ($subProduct[\"has_expiry_date\"] and $subProduct[\"has_batch\"]) ? 1 : 0, // hed = Has Expiry Date\n                    ));\n\n                }\n\n            }\n\n        }\n\n        // Check there are any error in grouped/ bundle product checking\n        // and If the product is not grouped product\n        if( !isset($returnData[\"error\"]) and $product_is(\"Grouped\") === false ) {\n\n            if( $product[\"maintain_stock\"] == 1 and  $product[\"stock_in\"] == 0 and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct ) ) {  // Check if there enough stock for normal product\n\n                $returnData = array (\n                    \"error\" => true,\n                    \"msg\"   => \"Product out of stock in the selected warehouse.\"\n                );\n    \n                \n            } else if( $product[\"maintain_stock\"] == 1 and $product_qnt > $product[\"stock_in\"] and ( !$allowToAddStockOutProduct and !$allowToSaleStockOutProduct )  ) {\n                \n                $product_unit = $product[\"product_unit\"] !== null ? $product[\"product_unit\"] . \"(s)\" : \"\";\n    \n                $returnData = array (\n                    \"error\" => true,\n                    \"msg\"   => \"Only {$product[\"stock_in\"]} {$product_unit} left in stock. You entered total {$product_qnt} {$product_unit}. Quantity must be bellow or equal to product stock in.\",\n                    \"stq\" => $product[\"stock_in\"],\n                    \"sp\" => $product[\"product_sale_price\"],\n                    \"pp\" => $product[\"product_purchase_price\"]\n                );\n    \n            } else {\n    \n                // Store the product data\n                // Normal and Bundle Product\n                array_push($returnData, array(\n                    \"pid\"  => $product[\"product_id\"], // pid = Product id\n                    \"pn\"   => $product[\"product_name\"], // pn = product Name\n                    \"pd\"   => $product[\"product_discount\"], // pd = product Discount \n                    \"stq\"  => $product[\"stock_in\"], // stq = Stock Quantity\n                    \"iq\"   => $product_qnt, // item quantity\n                    \"so\"   => ( $product[\"maintain_stock\"] == 1 and ( $product_qnt > $product[\"stock_in\"] or $subProductIsStockOut ) and !$allowToSaleStockOutProduct) ? 1 : 0, // SO = stock out\n                    \"sp\"   => $product[\"product_sale_price\"], // sp = sale price\n                    \"pp\"   => $product[\"product_purchase_price\"], // pp = purchase price\n                    \"gn\"   => $product[\"product_generic\"], // gn = generic name\n                    \"pu\"   => $product[\"product_unit\"], // pu = Product Unit\n                    \"pq\"   => $product[\"product_packet_qnt\"], // pu = Product Unit\n                    \"hed\"  => ($product[\"has_expiry_date\"] and $product[\"has_batch\"]) ? 1 : 0, // hed = Has Expiry Date\n                ));\n\n            }\n\n        }\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n\n// Product for return\nif(isset($_GET['page']) and $_GET['page'] == \"productDetailsForReturn\") {\n\n    $product_id = \"\";\n    if(isset($_GET[\"product_id\"])) {\n        $selectProductId = easySelectA(array(\n            \"table\"     => \"products\",\n            \"fields\"    => \"product_id\",\n            \"where\"     => array(\n                \"product_id\" => $_GET[\"product_id\"],\n                \" or product_code\" => $_GET[\"product_id\"],\n            )\n        ));\n\n        if($selectProductId !== false) {\n            $product_id = $selectProductId[\"data\"][0][\"product_id\"];\n        }\n    }\n\n    // If no product id\n    if(empty($product_id)) {\n        die(\"Sorry no product found!\");\n    }\n\n\n    $customer_id = isset($_GET[\"customer_id\"]) ? safe_input($_GET[\"customer_id\"]) : \"\";\n    $customerType = \"consumer\";\n    $selectCustomerType = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"customer_type\",\n        \"where\"     => array(\n            \"customer_id\"   => $customer_id\n        )\n    ));\n\n    if($selectCustomerType !== false) {\n        $customerType = strtolower($selectCustomerType[\"data\"][0][\"customer_type\"]);\n    }\n\n    $select_product = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_id, product_name, product_type, product_{$customerType}_discount as product_discount, \n\n                        round( COALESCE(purchase_price, product_purchase_price), 2) as product_purchase_price, \n                        round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, \n                        \n                        product_unit, has_expiry_date\",\n        \"join\"      => array(\n            // Because Of we have different price based on shop\n            \"left join (SELECT\n                            product_id,\n                            purchase_price,\n                            sale_price\n                FROM {$table_prefix}product_price    \n                WHERE shop_id = '{$_SESSION['sid']}'\n            ) as product_price using(product_id) \"\n        ),\n        \"where\"     => array(\n            \"is_trash = 0 and product_id\"   => $product_id\n        )\n    ));\n\n    // If there is no product againts given ID\n    if(!$select_product) {\n        die(\"Sorry no product found!\");\n    }\n\n    // This variable will be kept all data for returning\n    $returnData = array();\n    $product = $select_product[\"data\"][0];\n\n    // Use for checking product type\n    $product_is = function($type) {\n        return $type === $GLOBALS[\"product\"][\"product_type\"];\n    };\n\n\n    if( $product_is(\"Variable\")) { \n\n        $select_variation = easySelectA(array(\n            \"table\"     => \"products as parent_product\",\n            \"fields\"    => \"product_meta.product_id as id, \n                            (case when meta_type = 'Variation' then 'V' \n                                when meta_type = 'Default-Variation' then 'DV' \n                            END) as t,  \n                            meta_key as mk, meta_value as mv\",\n            \"join\"      => array(\n                \"left join {$table_prefix}products as child_products on parent_product.product_id = child_products.product_parent_id\",\n                \"inner join ( select \n                        product_id,\n                        meta_type,\n                        meta_key, \n                        meta_value \n                    from {$table_prefix}product_meta \n                ) as product_meta on product_meta.product_id = parent_product.product_id or product_meta.product_id = child_products.product_id\"\n            ),\n            \"where\"     => array(\n                \"parent_product.product_id\" => $product_id\n            ),\n            \"groupby\"   => \"product_meta.product_id, meta_type, meta_key, meta_value\"\n        \n        ))[\"data\"];\n\n        // Store the product data\n        array_push($returnData, array(\n            \"pid\"  => $product[\"product_id\"], // pid = Product id\n            \"pn\"   => $product[\"product_name\"], // pn = product Name\n            \"pv\"  => $select_variation\n        ));\n        \n        \n    } else {\n\n\n        // For normal product\n        $normal_product = easySelectA(array(\n            \"table\"     => \"products as products\",\n            \"fields\"    => \"\n                    product_id, product_name, product_{$customerType}_discount as product_discount, product_unit, has_expiry_date, \n\n                    round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, \n\n                    if(sale_item_quantity is null, 0, round(sale_item_quantity, 2)) as purchasedQnt,\n                    if(returns_products_quantity is null, 0, round(returns_products_quantity, 2)) as returnedQnt\n            \",\n            \"join\"      => array(\n                \"left join (\n                    select\n                        stock_product_id,\n                        sum(case when stock_type = 'sale' then stock_item_qty end ) as sale_item_quantity,\n                        sum(case when stock_type = 'sale-return' then stock_item_qty end ) as returns_products_quantity\n                    from {$table_prefix}product_stock as product_stock\n                    left join {$table_prefix}sales on stock_sales_id = sales_id\n                    where stock_product_id = {$product_id} and sales_customer_id = '{$customer_id}' and product_stock.is_trash = 0\n                    group by stock_product_id\n                ) as stock on stock_product_id = product_id\",\n                \"left join (SELECT\n                                product_id,\n                                sale_price\n                    FROM {$table_prefix}product_price    \n                    WHERE shop_id = '{$_SESSION['sid']}'\n                ) as product_price using(product_id) \"\n            ),\n            \"where\" => array(\n                \"product_id\"    => $product_id\n            )\n        ))[\"data\"][0];\n    \n        array_push($returnData, array(\n            \"pid\"  => $normal_product[\"product_id\"], // pid = Product id\n            \"pn\"   => $normal_product[\"product_name\"], // pn = product Name\n            \"pd\"   => $normal_product[\"product_discount\"], // pd = product Discount \n            \"prq\"  => $normal_product[\"purchasedQnt\"], // prq = Purchased Quantity\n            \"rtq\"  => $normal_product[\"returnedQnt\"], // rtq = Returned Quantity\n            \"sp\"   => $normal_product[\"product_sale_price\"], // sp = sale price\n            \"pu\"    => $normal_product[\"product_unit\"], // pu = product_unit\n            \"hed\"    => $normal_product[\"has_expiry_date\"]\n        ));\n\n    }\n\n    echo json_encode($returnData);\n\n}\n\n\n// Product List\nif(isset($_GET['page']) and $_GET['page'] == \"productList\") {\n\n    $productCategoryFilter = ( isset($_GET[\"catId\"]) and !empty($_GET[\"catId\"]) ) ? $_GET[\"catId\"] : \"\";\n    $productBrandFilter = ( isset($_GET[\"brand\"]) and !empty($_GET[\"brand\"]) ) ? $_GET[\"brand\"] : \"\";\n    $productGenericFilter = ( isset($_GET[\"generic\"]) and !empty($_GET[\"generic\"]) ) ? $_GET[\"generic\"] : \"\";\n    $productAuthorFilter = ( isset($_GET[\"author\"]) and !empty($_GET[\"author\"]) ) ? $_GET[\"author\"] : \"\";\n\n    // If there are any edition to filter, we do not need product_type != 'Child' filter\n    $productEditionFilter = ( isset($_GET[\"edition\"]) and !empty($_GET[\"edition\"]) ) ? \" product_edition = '\". safe_input($_GET[\"edition\"]) .\"' \" : \" product_type != 'Child' \";\n\n    $oderBy = array();\n    \n    if( !empty(get_options(\"defaultProductOrder\")) ) {\n\n        $oderBy = array(\n            get_options(\"defaultProductOrder\") => empty(get_options(\"defaultProductOrderBy\")) ? \"ASC\" : get_options(\"defaultProductOrderBy\")\n        );\n\n    }\n    \n    $ProductList = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_id as id, product_name as name, length(product_photo) as v\",\n        \"where\"     => array (\n            \"is_trash = 0 AND {$productEditionFilter}\",\n            \" AND product_category_id\"          => $productCategoryFilter,\n            \" AND product_brand_id\"             => $productBrandFilter,\n            \" AND product_generic\"              => $productGenericFilter\n        ),\n        \"join\"  => array(\n            \"left join ( select \n                    stock_product_id, \n                    if(stock_item_qty is null, 0, sum(stock_item_qty)) as totalSoldQnt \n                from {$table_prefix}product_stock \n                where is_trash = 0 and stock_type = 'sale' \n                group by stock_product_id \n            ) as sale_items on stock_product_id = product_id\"\n        ),\n        \"orderby\"   => $oderBy,\n        \"limit\"     => array (\n            \"start\"     => 0,\n            \"length\"    => empty(get_options(\"maxProductDisplay\")) ? 1500 : get_options(\"maxProductDisplay\")\n        )\n        \n    ));\n    \n    if($ProductList) {\n        \n        echo json_encode($ProductList[\"data\"]);\n\n    } else {\n        echo \"null\";\n    }\n\n}\n\n\n// Product Unit Details\nif(isset($_GET['page']) and $_GET['page'] == \"productUnitDetails\") {\n\n\n    $unitDetails = easySelectA(\n        array(\n            \"table\"  => \"product_unit_variants\",\n            // \"fields\" => \"puv_default as d, puv_name as n, puv_product_id as pid, round(puv_purchase_price, 2) as pp, round(puv_sale_price, 2) as sp\",\n            \"fields\" => \"round(puv_purchase_price, 2) as pp, round(puv_sale_price, 2) as sp\",\n            \"where\"  => array(\n                \"puv_product_id\" => $_GET[\"product_id\"],\n                \" and puv_name\"  => $_GET[\"unit\"]\n            )\n        )\n    )[\"data\"][0];\n\n    echo json_encode($unitDetails);\n\n}\n\n\n// Return shop income in the specific date \nif(isset($_GET['page']) and $_GET['page'] == \"getShopIncome\") {\n\n   $todaySale = easySelect(\n        \"sales\",\n        \"(sum(sales_grand_total) - sum(sales_due)) as chash_in\",\n        array(),\n        array (\n            \"is_trash = 0 and sales_delivery_date\"    => $_POST[\"incomeDate\"],\n            \" AND sales_shop_id\" => $_POST[\"shopId\"]\n        )\n   );\n\n   echo $todaySale[\"data\"][0][\"chash_in\"];\n\n}\n\n\n// Employee Salary data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmpSalaryData\") {\n\n    $emp_id = safe_input($_POST[\"empId\"]);\n\n    $employeeSalaryData = easySelectD(\n        \"SELECT \n            emp_id, emp_firstname, emp_lastname, emp_positions, round(emp_payable_salary, 2) as emp_payable_salary, round(emp_payable_overtime, 2) as emp_payable_overtime, round(emp_payable_bonus, 2) as emp_payable_bonus,\n            loan_amount, loan_installment_amount, loan_id, \n            if(loan_installment_paid_amount is null, 0, loan_installment_paid_amount) as loan_installment_paid_amount\n        from {$table_prefix}employees\n        left join (select \n                loan_id, loan_borrower, loan_amount, loan_installment_amount \n            from {$table_prefix}loan where is_trash = 0 group by loan_id\n        ) as loan on emp_id = loan_borrower\n        left join (select \n                loan_ids, sum(loan_installment_paying_amount) as loan_installment_paid_amount \n            from {$table_prefix}loan_installment where is_trash = 0 group by loan_ids\n        ) as loan_installment on loan_id = loan_ids\n        where emp_id = {$emp_id}\n        order by loan_id \n        desc limit 1\"\n    )[\"data\"][0];\n\n    echo json_encode($employeeSalaryData);\n}\n\n\n// Customer Payment Info\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerPaymentInfo\") {\n\n    $customer_id = safe_input($_POST[\"customerId\"]);\n\n    $customerPaymentsData = easySelectD(\n        \"SELECT customer_id, round(customer_opening_balance, 2) as customer_opening_balance,\n            if(sales_grand_total is null, 0, round(sales_grand_total, 2)) as sales_grand_total, \n            if(sales_shipping is null, 0, round(sales_shipping, 2)) as sales_shipping, \n            if(sales_due is null, 0, round(sales_due, 2)) as sales_due, \n            if(returns_grand_total is null, 0, round(returns_grand_total, 2)) as returns_grand_total,\n            if(received_payments_amount is null, 0, round(received_payments_amount, 2)) as total_received_payments,\n            if(payments_return_amount is null, 0, round(payments_return_amount, 2)) as total_payment_return,\n            if(received_payments_bonus is null, 0, round(received_payments_bonus, 2)) as total_given_bonus\n        from {$table_prefix}customers\n        left join ( select\n                sales_customer_id,\n                sum(sales_grand_total) as sales_grand_total,\n                sum(sales_shipping) as sales_shipping,\n                sum(sales_due) as sales_due\n            from {$table_prefix}sales where is_return = 0 and is_trash = 0 and sales_status = 'Delivered' group by sales_customer_id\n        ) as sales on customer_id = sales.sales_customer_id\n        left join ( select \n                sales_customer_id, \n                sum(sales_grand_total) as returns_grand_total \n            from {$table_prefix}sales where is_return = 1 and is_trash = 0 and sales_status = 'Delivered' group by sales_customer_id\n        ) as product_returns on customer_id = product_returns.sales_customer_id\n        left join ( select \n                received_payments_from, \n                sum(received_payments_amount) as received_payments_amount, \n                sum(received_payments_bonus) as received_payments_bonus \n            from {$table_prefix}received_payments where is_trash = 0 group by received_payments_from\n        ) as received_payments on customer_id = received_payments_from\n        left join ( select\n                payments_return_customer_id,\n                sum(payments_return_amount) as payments_return_amount\n            from {$table_prefix}payments_return where is_trash = 0 and payments_return_type = 'Outgoing' group by payments_return_customer_id\n        ) as payment_return on customer_id = payments_return_customer_id\n        where customer_id = {$customer_id}\"\n    )[\"data\"][0];\n\n    echo json_encode($customerPaymentsData);\n}\n\n// Customer Statement Info\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerStatementInfo\") {\n\n    $customer_id = safe_input($_POST[\"customerId\"]);\n\n    $dateRange = explode(\" - \", safe_input($_POST[\"dateRange\"]));\n\n\n    $customerPaymentsData = easySelectD(\n        \"select customer_id, customer_name, customer_address, customer_district, district_name,\n            ( \n                if(sales_total_amount is null, 0, sales_total_amount) + \n                if(wastage_sale_grand_total is null, 0, wastage_sale_grand_total) \n            ) as net_purchased, \n            if(sales_shipping is null, 0, sales_shipping) as total_shipping, \n            (\n                if(sales_product_discount is null, 0, sales_product_discount) +\n                if(sales_discount is null, 0, sales_discount)\n            ) as total_purchased_discount,\n            if(received_payments_amount is null, 0, received_payments_amount) as received_payments_amount,\n            if(advance_payments_amount is null, 0, advance_payments_amount) as advance_payments_amount,\n            if(sales_payments_amount is null, 0, sales_payments_amount) as sales_payments_amount,\n            if(received_payments_bonus is null, 0, received_payments_bonus) as total_given_bonus,\n            if(returns_grand_total is null, 0, returns_grand_total) as total_product_returns,\n            if(discounts_amount is null, 0, discounts_amount) as special_discounts_amount,\n            if(payments_return_amount is null, 0, payments_return_amount) as payments_return_amount\n        from {$table_prefix}customers\n        left join {$table_prefix}districts on district_id = customer_district\n        left join ( select \n                sales_customer_id,  \n                sum(case when is_return = 0 then sales_total_amount end) as sales_total_amount,\n                sum(case when is_return = 0 then sales_shipping end) as sales_shipping,\n                sum(case when is_return = 0 then sales_product_discount end) as sales_product_discount,\n                sum(case when is_return = 0 then sales_discount end) as sales_discount,\n                sum(case when is_return = 1 then sales_grand_total end) as returns_grand_total\n            from {$table_prefix}sales where is_trash = 0 and sales_status = 'Delivered' and sales_delivery_date between '{$dateRange[0]}' and '{$dateRange[1]}' group by sales_customer_id\n            ) as sales on customer_id = sales_customer_id\n        left join ( select\n                    wastage_sale_customer,\n                    sum(wastage_sale_grand_total) as wastage_sale_grand_total\n                from {$table_prefix}wastage_sale where is_trash = 0 and wastage_sale_date between '{$dateRange[0]}' and '{$dateRange[1]}' group by wastage_sale_customer\n            ) as wastage_sale on customer_id = wastage_sale_customer\n        left join ( select \n                        received_payments_from, \n                        sum(case when received_payments_type = 'Received Payments' then received_payments_amount end) as received_payments_amount, \n                        sum(case when received_payments_type = 'Advance Collection' then received_payments_amount end) as advance_payments_amount, \n                        sum(case when received_payments_type = 'Sales Payments' or received_payments_type = 'Wastage Sales Payments' then received_payments_amount end) as sales_payments_amount, \n                        sum(received_payments_bonus) as received_payments_bonus \n                    from {$table_prefix}received_payments \n                    where is_trash = 0 and received_payments_type != 'Discounts' and date(received_payments_datetime) between '{$dateRange[0]}' and '{$dateRange[1]}' \n                    group by received_payments_from\n                ) as received_payments on customer_id = received_payments.received_payments_from\n        left join ( select \n                received_payments_from, \n                sum(received_payments_amount) as discounts_amount \n            from {$table_prefix}received_payments \n            where is_trash = 0 and received_payments_type = 'Discounts' and date(received_payments_datetime) between '{$dateRange[0]}' and '{$dateRange[1]}' \n            group by received_payments_from\n        ) as given_discounts on customer_id = given_discounts.received_payments_from\n        left join (select\n                payments_return_customer_id,\n                sum(payments_return_amount) as payments_return_amount\n            from {$table_prefix}payments_return\n            where is_trash = 0 and payments_return_type = 'Outgoing' and date(payments_return_date) between '{$dateRange[0]}' and '{$dateRange[1]}' \n            group by payments_return_customer_id\n        ) as payment_return on customer_id = payments_return_customer_id\n        where customer_id = {$customer_id}\"\n    )[\"data\"][0];\n\n    $customerPaymentsData[\"previous_balance\"] = easySelectD(\"\n\t\t\tSELECT \n\t\t\t\t(\n\t\t\t\t\t\tif(customer_opening_balance is null, 0, customer_opening_balance) +\t\t\t\t\t\t\n\t\t\t\t\t\tif(total_returned_before_filtered_date is null, 0, total_returned_before_filtered_date) +\n\t\t\t\t\t\tif(total_payment_before_filtered_date is null, 0, total_payment_before_filtered_date)\n\t\t\t\t) - ( \n\t\t\t\t\t\tif(total_purchased_before_filtered_date is null, 0, total_purchased_before_filtered_date) +\n                        if(total_wastage_purched_before_filtered_date is null, 0, total_wastage_purched_before_filtered_date) +\n                        if(total_payment_return_before_filtered_date is null, 0, total_payment_return_before_filtered_date)\n\t\t\t\t) as previous_balance\n\n\t\t\tFROM {$table_prefix}customers as customers\n\t\t\tleft join ( select\n\t\t\t\t\tsales_customer_id,\n\t\t\t\t\tsum(case when is_return = 0 then sales_grand_total end) as total_purchased_before_filtered_date,\n                    sum(case when is_return = 1 then sales_due end) as total_returned_before_filtered_date\n\t\t\t\tfrom {$table_prefix}sales where is_trash = 0 and sales_status = 'Delivered' and sales_delivery_date < '{$dateRange[0]}' group by sales_customer_id\n\t\t\t) as sales on sales_customer_id = customer_id\n            left join ( select\n                    wastage_sale_customer,\n                    sum(wastage_sale_grand_total) as total_wastage_purched_before_filtered_date\n                from {$table_prefix}wastage_sale where is_trash = 0 and wastage_sale_date < '{$dateRange[0]}' group by wastage_sale_customer\n            ) as wastage_sale on wastage_sale_customer = customer_id\n\t\t\tleft join ( select \n\t\t\t\t\treceived_payments_from,\n\t\t\t\t\tsum(received_payments_amount) + sum(received_payments_bonus) as total_payment_before_filtered_date\n\t\t\t\tfrom {$table_prefix}received_payments where is_trash = 0 and date(received_payments_datetime) < '{$dateRange[0]}' group by received_payments_from\n\t\t\t) as payments on received_payments_from = customer_id\n            left join (select\n                    payments_return_customer_id,\n                    sum(payments_return_amount) as total_payment_return_before_filtered_date\n                from {$table_prefix}payments_return\n                where is_trash = 0 and payments_return_type = 'Outgoing' and date(payments_return_date) < '{$dateRange[0]}'\n                group by payments_return_customer_id\n            ) as payment_return on customer_id = payments_return_customer_id\n\t\t\twhere customer_id = {$customer_id}\n\t\")[\"data\"][0][\"previous_balance\"];\n\n    echo json_encode($customerPaymentsData);\n}\n\n// Get Employee Loan Data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmpLoanLoanData\") {\n\n    $emp_id = safe_input($_POST[\"empId\"]);\n    $month = safe_input($_POST[\"month\"]);\n    $year = safe_input($_POST[\"year\"]);\n\n    $getLoanDetails = easySelectD(\n        \"select \n            loan_id, loan_amount, loan_installment_amount, \n            if(thisMonthInstallmentPayingStatus is null, 0, 1) as thisMonthInstallmentPayingStatus, \n            if(loan_paid_amount is null, 0, loan_paid_amount) as loan_paid_amount \n        from {$table_prefix}loan as loan\n        left join (select \n                loan_ids, \n                sum(loan_installment_paying_amount) as loan_paid_amount \n            from {$table_prefix}loan_installment where is_trash = 0 group by loan_ids\n        ) as totalPaidAmount on loan_id = totalPaidAmount.loan_ids\n        left join (select \n                loan_ids, \n                1 as thisMonthInstallmentPayingStatus\n            from {$table_prefix}loan_installment where is_trash = 0 and MONTH(loan_installment_date) = {$month} and year(loan_installment_date) = {$year} group by loan_ids \n        ) as thisMonthStatus on loan_id = thisMonthStatus.loan_ids\n        where loan.is_trash = 0 and loan_borrower = {$emp_id} and loan_installment_starting_from <= '{$year}-{$month}-01'\n        and ( loan_paid_amount is null or loan_paid_amount < loan_amount)\" \n        // loan_paid_amount can be NULL on left join if there is no recrods, for that the is null check.\n        // We can also use HAVING cluese without using is null check. But it will raise a error with full_group_by mode.\n    );\n\n    $selectSalary = easySelectA(array(\n        \"table\"     => \"employees\",\n        \"fields\"    => \"round(emp_salary, 2) as emp_salary\",\n        \"where\"     => array(\"emp_id = {$emp_id}\")\n    ))[\"data\"][0][\"emp_salary\"];\n\n    if(!isset($getLoanDetails[\"data\"])) {\n        \n        $return = array (\n            \"totalInstallmentAmount\"  => 0,\n            \"totalLoan\"         => 0,\n            \"totalLoanPaid\"     => 0,\n            \"salary\"            => $selectSalary\n       );\n    \n       echo json_encode($return);\n       return; \n    }\n\n    $loanInstallmentAmountInCurrentMonth = 0;\n    $totalLoanAmount = 0;\n    $totalLoanPaidAmount = 0;\n\n    foreach($getLoanDetails[\"data\"] as $key => $value) {\n\n        // Check if the loan installment already not paid\n        // then add the installment amount\n        if($value[\"thisMonthInstallmentPayingStatus\"] != 1) {\n            $loanInstallmentAmountInCurrentMonth += ( $value[\"loan_amount\"] - $value[\"loan_paid_amount\"] >= $value[\"loan_installment_amount\"] ) ? $value[\"loan_installment_amount\"] : $value[\"loan_amount\"] - $value[\"loan_paid_amount\"];\n        }\n\n        $totalLoanAmount += $value[\"loan_amount\"];\n        $totalLoanPaidAmount += $value[\"loan_paid_amount\"];\n        \n    }\n    \n   $return = array (\n        \"totalInstallmentAmount\"  => $loanInstallmentAmountInCurrentMonth,\n        \"totalLoan\"         => $totalLoanAmount,\n        \"totalLoanPaid\"     => $totalLoanPaidAmount,\n        \"salary\"            => $selectSalary\n   );\n\n   echo json_encode($return);\n\n}\n\n\n// Get Employee Advance Payments Data\nif(isset($_GET['page']) and $_GET['page'] == \"getEmployeeAdvancePaymentsData\") {\n    $emp_id = safe_input($_POST[\"empId\"]);\n\n    $getEmpAdvancePaymentData = easySelectD(\"\n        select emp_id, emp_firstname, emp_lastname,\n            if(advance_payment_amount_sum is null, 0, advance_payment_amount_sum) as advance_paid_amount,\n            if(payments_return_amount_sum is null, 0, payments_return_amount_sum) + if(payment_amount_sum is null, 0, payment_amount_sum) as advance_adjust_amount\n        from {$table_prefix}employees\n        left join ( select \n                advance_payment_pay_to, \n                sum(advance_payment_amount) as advance_payment_amount_sum \n            from {$table_prefix}advance_payments where is_trash = 0 group by advance_payment_pay_to \n        ) as get_advance_payments on advance_payment_pay_to = emp_id\n        left join ( select \n                payment_to_employee, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefix}payments where is_trash = 0 and payment_type = 'Advance Adjustment' group by payment_to_employee \n        ) as get_payments on payment_to_employee = emp_id\n        left join ( select \n                payments_return_emp_id, \n                sum(payments_return_amount) as payments_return_amount_sum \n            from {$table_prefix}payments_return where is_trash = 0 group by payments_return_emp_id \n        ) as get_advance_return on payments_return_emp_id = emp_id\n        where emp_id = {$emp_id}\"\n    )[\"data\"][0];\n    \n    echo json_encode($getEmpAdvancePaymentData);\n\n}\n\n\n// Get Company Due Bill Details\nif(isset($_GET['page']) and $_GET['page'] == \"getCompanyDueBillDetails\") {\n    $company_id = safe_input($_POST[\"company_id\"]);\n\n    $getEmpAdvancePaymentData = easySelectD(\"\n        select company_id, round(company_opening_balance, 2) as company_opening_balance,\n            (\n                if(bills_amount_sum is null, 0, round(bills_amount_sum, 2)) +\n                if(purchase_grand_total is null, 0, round(purchase_grand_total, 2))\n            ) as bills_amount_sum,\n            (\n                if(payment_amount_sum is null, 0, round(payment_amount_sum, 2)) +\n                if(purchase_return_grand_total is null, 0, purchase_return_grand_total)\n            ) as payment_amount_sum,\n            if(adjustment_amount is null, 0, round(adjustment_amount, 2)) as adjustment_amount_sum\n        from {$table_prefix}companies\n        left join ( select \n                bills_company_id, \n                sum(bills_amount) as bills_amount_sum \n            from {$table_prefix}bills where is_trash = 0 group by bills_company_id \n        ) as get_company_bills on bills_company_id = company_id \n        left join ( select\n                payment_to_company, \n                sum(payment_amount) as payment_amount_sum \n            from {$table_prefix}payments where is_trash = 0 and ( payment_type = 'Due Bill' or payment_type = 'Bill' ) group by payment_to_company \n        ) as get_company_payment on payment_to_company = company_id\n        left join (\n            select\n                pa_company,\n                sum(pa_amount) as adjustment_amount\n            from {$table_prefix}payment_adjustment where is_trash = 0 group by pa_company\n        ) as payment_adjustment on pa_company = company_id\n        left join (\n            select\n                purchase_company_id,\n                sum(CASE WHEN is_return = 0 then purchase_grand_total end) as purchase_grand_total,\n                sum(CASE WHEN is_return = 1 then purchase_due end) as purchase_return_grand_total\n            from {$table_prefix}purchases where is_trash = 0 group by purchase_company_id\n        ) as purchaseBill on purchaseBill.purchase_company_id = company_id\n        where company_id = {$company_id}\"\n    )[\"data\"][0];\n    \n    echo json_encode($getEmpAdvancePaymentData);\n\n}\n\n\n// Product Comparison Details\n\nif(isset($_GET['page']) and $_GET['page'] == \"getProductComparison\") {\n\n    $dateRange = explode(\" - \", safe_input($_POST[\"dateRange\"]));\n    $product =  safe_input(implode(\",\",$_POST[\"productsId\"]));\n\n\n    // Check if the given products are variable or not\n    $selectAllProduct = easySelectA(array(\n        \"table\"     => \"products\",\n        \"fields\"    => \"product_type, product_id, child_product as child_product_list\",\n        \"join\"      => array(\n            \"left join (\n                SELECT \n                    product_parent_id,\n                    group_concat(product_id) as child_product\n                FROM {$table_prefix}products\n                where is_trash = 0\n                group by product_parent_id\n            ) as child_product on child_product.product_parent_id = product_id\"\n        ),\n        \"where\"     => array(\n            \"product_id in($product)\"\n        )\n    ));\n\n\n    if($selectAllProduct !== false) {\n\n        $productIDList = array();\n        foreach($selectAllProduct[\"data\"] as $product ) {\n\n            if( $product[\"product_type\"] === \"Variable\" ) {\n\n                // If the product is variable, push the child_product_list in productIDList variable\n                array_push($productIDList, $product[\"child_product_list\"]);\n        \n            } else {\n        \n                // If the product is a normal product or any other type of product then push the product_id\n                array_push($productIDList, $product[\"product_id\"] );\n        \n            }\n\n        }\n\n\n        $product = implode(\",\", $productIDList);\n        \n    }\n\n    \n\n\n    $chart_label = array();\n    $chart_data = array();\n\n    $actProductAs = $_POST[\"actProduct\"];\n\n    if($actProductAs === \"Same\") {\n\n        list($startYear, $startMonth, $startDay) = explode(\"-\", $dateRange[0]);\n        list($endYear, $endMonth, $endDay) = explode(\"-\", $dateRange[1]);\n\n        $label = \"CONCAT( DAY(db_date), ', ', LEFT(MONTHNAME(db_date), 3))\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $label = \"LEFT(MONTHNAME(db_date), 3)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $label = \"YEAR(db_date)\";\n        }\n        \n        $groupByOnStockEntry = \"MONTH(stock_entry_date), DAY(stock_entry_date)\";\n        $groupByOnDbDate = \"MONTH(db_date), DAY(db_date)\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n\n            $groupByOnStockEntry = \"MONTH(stock_entry_date)\";\n            $groupByOnDbDate = \"MONTH(db_date)\";\n\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n\n            $groupByOnStockEntry = \"YEAR(stock_entry_date)\";\n            $groupByOnDbDate = \"YEAR(db_date)\";\n\n        }\n\n\n        $relationOnDate = \"MONTH(stock_entry_date) = MONTH(db_date) and DAY(stock_entry_date) = DAY(db_date)\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n\n            $relationOnDate = \"MONTH(stock_entry_date) = MONTH(db_date)\";\n\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n\n            $relationOnDate = \"YEAR(stock_entry_date) = YEAR(db_date)\";\n\n        }\n\n    \n        $sales = easySelectD(\"\n            SELECT\n                product_id,\n                product_name,\n                {$label} as label,\n                if(total_sale_qnt is null, 0, total_sale_qnt) as total_sale_qnt_sum\n            FROM\n                ro_products\n            JOIN time_dimension \n            LEFT JOIN ( select \n                        stock_entry_date, \n                        stock_product_id, \n                        sum(stock_item_qty) as total_sale_qnt \n                    from ro_product_stock where is_trash = 0 and stock_type = 'sale' group by {$groupByOnStockEntry}, stock_product_id\n                ) as sale_items ON {$relationOnDate} and stock_product_id = product_id\n            WHERE\n                product_id IN($product) and MONTH(db_date) between '{$startMonth}' and '{$endMonth}' and DAY(db_date) between '{$startDay}' and '{$endDay}'\n            GROUP BY {$groupByOnDbDate}, product_id\n            ORDER BY `time_dimension`.`db_date` ASC, product_id DESC\n        \");\n\n        //print_r($sales);\n        \n\n        foreach($sales[\"data\"] as $key => $data) {\n\n            // Collect Sold qunatity\n            if( !isset($chart_data[$data[\"product_id\"]]) ) {\n    \n                $chart_data[$data[\"product_id\"]] = array(\n                    \"label\"  => $data[\"product_name\"],\n                    \"borderColor\" => \"#\".substr(md5(rand()), 0, 6),\n                    \"borderWidth\"  => 2,\n                    \"data\"      => array($data[\"total_sale_qnt_sum\"])\n                );\n    \n            } else {\n    \n                array_push($chart_data[$data[\"product_id\"]][\"data\"], $data[\"total_sale_qnt_sum\"]);\n    \n            }\n    \n            // Collect Dates\n            if(!in_array($data[\"label\"], $chart_label)) {\n    \n                if( !in_array($data[\"label\"], $chart_label) ) {\n    \n                    array_push($chart_label, $data[\"label\"] );   \n    \n                }\n    \n    \n            }\n    \n        }\n\n        \n\n    } else {\n\n        $label = \"db_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $label = \"CONCAT(LEFT(MONTHNAME(db_date), 3), ', ', YEAR(db_date))\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $label = \"YEAR(db_date)\";\n        }\n        \n        $groupBy = \"stock_entry_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $groupBy = \"EXTRACT(YEAR_MONTH FROM stock_entry_date)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $groupBy = \"YEAR(stock_entry_date)\";\n        }\n\n\n        $relationOnDate = \"db_date\";\n        if($_POST[\"groupBy\"] === \"Monthly\") {\n            $relationOnDate = \"EXTRACT(YEAR_MONTH FROM db_date)\";\n        } else if($_POST[\"groupBy\"] === \"Yearly\") {\n            $relationOnDate = \"YEAR(db_date)\";\n        }\n\n        $sales = easySelectD(\"\n            SELECT\n                product_id,\n                product_name,\n                {$label} as label,\n                db_date,\n                if(total_sale_qnt is null, 0, total_sale_qnt) as total_sale_qnt_sum\n            FROM\n                ro_products\n            JOIN time_dimension \n            LEFT JOIN ( select \n                        stock_entry_date, \n                        stock_product_id, \n                        sum(stock_item_qty) as total_sale_qnt \n                    from ro_product_stock where is_trash = 0 and stock_type = 'sale' group by {$groupBy}, stock_product_id\n                ) as sale_items ON {$groupBy} = {$relationOnDate} and stock_product_id = product_id\n            WHERE\n                product_id IN($product) and db_date between '{$dateRange[0]}' and '{$dateRange[1]}'\n            GROUP BY {$relationOnDate}, product_id\n            ORDER BY `time_dimension`.`db_date` ASC, product_id DESC\n        \")[\"data\"];\n\n        // var_dump($sales);\n\n        foreach($sales as $key => $data) {\n\n            // Collect Sold qunatity\n            if( !isset($chart_data[$data[\"product_id\"]]) ) {\n    \n                $chart_data[$data[\"product_id\"]] = array(\n                    \"label\"  => $data[\"product_name\"],\n                    \"borderColor\" => \"#\".substr(md5(rand()), 0, 6),\n                    \"borderWidth\"  => 2,\n                    \"data\"      => array($data[\"total_sale_qnt_sum\"])\n                );\n    \n            } else {\n    \n                array_push($chart_data[$data[\"product_id\"]][\"data\"], $data[\"total_sale_qnt_sum\"]);\n    \n            }\n    \n            // Collect Dates\n            if(!in_array($data[\"label\"], $chart_label)) {\n    \n                if( !in_array($data[\"label\"], $chart_label) ) {\n    \n                    array_push($chart_label, $data[\"label\"] );   \n    \n                }\n    \n    \n            }\n    \n        }\n\n    }\n\n\n    echo json_encode( array(\n            \"label\"  => $chart_label,\n            \"dataset\"  => $chart_data\n        ));\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getAccountsInfo\") {\n\n    $selectAccounts = easySelectA(array(\n        \"table\"    => \"accounts\",\n        \"fields\"    => \"accounts_name, round(accounts_balance, 2) as accounts_balance\",\n        \"where\"     => array(\n            \"accounts_id\"   => $_POST[\"accountsId\"]\n        )\n    ));\n\n    $accountData = array();\n\n    if($selectAccounts) {\n        $accountData[\"name\"] = $selectAccounts[\"data\"][0][\"accounts_name\"];\n        $accountData[\"balance\"] = $selectAccounts[\"data\"][0][\"accounts_balance\"];\n    }\n\n    echo json_encode($accountData);\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseList\") {\n\n    $invoiceSearch = ( isset($_GET[\"s\"]) and !empty($_GET[\"s\"]) ) ? \"and sales_reference like '%{$_GET[\"s\"]}%'\" : \"\";\n\n    $selectSales = easySelectA(array(\n        \"table\"     => \"sales\",\n        \"fields\"    => \"sales_id as id, sales_status, DATE_FORMAT(sales_delivery_date, '%b %d, %Y') as date, sales_reference as ref, round(sales_grand_total, 2) as total, sales_payment_status as pay_status, shop_name as shop\",\n        \"join\"      => array(\n            \"left join {$table_prefix}shops on sales_shop_id = shop_id\"\n        ),\n        \"where\"     => array(\n            \"sales_customer_id\" => $_GET[\"cid\"],\n            \"{$invoiceSearch}\"\n        ),\n        \"orderby\"   => array(\n            \"sales_id\"  => \"DESC\"\n        ),\n        \"limit\" => array(\n            \"start\"     => 0,\n            \"length\"    => 25\n        )\n    ));\n\n    if($selectSales) {\n        \n        echo json_encode($selectSales[\"data\"]);\n\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseProductList\") {\n\n    $selectPurchaseProductBySalesId = easySelectA(array(\n        \"table\"     => \"product_stock\",\n        \"fields\"    => \"stock_product_id as pid, product_name as pn, product_unit as pu, has_expiry_date as hed, product_generic as pg, if(stock_batch_id is null, '', stock_batch_id) as batch, round(stock_item_price, 2) as stock_item_price, round(stock_item_qty, 2) as stock_item_qty, round(stock_item_discount, 2) as stock_item_discount, round(stock_item_subtotal, 2) as stock_item_subtotal\",\n        \"join\"      => array(\n            \"left join {$table_prefix}products on stock_product_id = product_id\",\n            \"left join {$table_prefix}product_batches on stock_batch_id = batch_id\"\n        ),\n        \"where\"     => array(\n            \"stock_item_qty > 0 and stock_sales_id \" => $_GET[\"saleid\"]\n        )\n    ));\n\n    if($selectPurchaseProductBySalesId) {\n        \n        echo json_encode($selectPurchaseProductBySalesId[\"data\"]);\n\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerData\") {\n\n    $customerData = easySelectA(array(\n        \"table\"     => \"customers\",\n        \"fields\"    => \"round(customer_shipping_rate, 2) as shipping_rate, customer_discount as discount\",\n        \"where\"     => array(\n            \"customer_id\"   => $_GET[\"cid\"]\n        )\n    ));\n\n    echo json_encode($customerData[\"data\"][0]);\n\n}\n\n\n/************************** Update in line data **********************/\nif(isset($_GET['page']) and $_GET['page'] == \"updateInLine\") {\n\n    //print_r( $_REQUEST );\n\n    /**\n     * tab = table\n     * p = prefeix\n     * f = field\n     * t = target (primary key field)\n     * pkey = primary key\n     */\n\n    if( !isset($_GET[\"t\"]) or !isset($_GET[\"f\"]) or !isset($_GET[\"p\"]) or !isset($_GET[\"tab\"])  ) {\n\n        echo '{\n            \"error\": \"true\",\n            \"msg\": \"An unknown error occurred. Please contact with administrator.\"\n        }';\n\n    } else if( empty($_GET[\"t\"]) or empty($_GET[\"f\"]) or empty($_GET[\"p\"]) or empty($_GET[\"tab\"])  ) {\n        \n        echo '{\n            \"error\": \"true\",\n            \"msg\": \"An unknown error occurred. Please contact with administrator.d\"\n        }';\n\n    } else {\n\n        // Update the\n        $updateData = easyUpdate(\n            safe_input($_GET[\"tab\"]),\n            array(\n                safe_input($_GET[\"p\"]).safe_input($_GET[\"f\"]) => $_POST[\"newData\"]\n            ),\n            array(\n                safe_input($_GET[\"p\"]).safe_input($_GET[\"t\"]) => $_POST[\"pkey\"]\n            )\n        );\n\n        if($updateData === true) {\n            \n            echo '{\n                \"error\": \"false\"\n            }';\n\n        } else {\n\n            echo '{\n                \"error\": \"true\",\n                \"msg\": \"'. $updateData .'\"\n            }';\n\n        }\n\n    }\n\n}\n\n\n/************************** Add New Capital **********************/\nif(isset($_GET['page']) and $_GET['page'] == \"getCustomerClosingsDate\") {\n\n    $closings = easySelectA(array(\n        \"table\"     => \"closings\",\n        \"fields\"    => \"closings_date, closings_title\",\n        \"where\"     => array(\n            \"is_trash = 0 and closings_customer\" => $_GET[\"cid\"]\n        ),\n        \"orderby\"   => array(\n            \"closings_date\" => \"ASC\"\n        )\n    ));\n\n    \n    if($closings !== false) {\n            \n        $closingData[\"Next Period\"] = array(\n            end($closings[\"data\"])[\"closings_date\"],\n            date(\"Y-12-31\")\n        );\n\n        $previous_data = \"1970-01-00\";\n        foreach($closings[\"data\"] as $closing) {\n            \n            $closingData[$closing[\"closings_title\"]] = array(\n                date(\"Y-m-d\", strtotime($previous_data . ' +1 day')),\n                $closing[\"closings_date\"]\n            );\n            $previous_data = $closing[\"closings_date\"];\n\n        }\n\n        echo json_encode($closingData);\n\n    }\n\n}\n\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"productVisualList\") {\n\n    $productCategoryFilter = ( isset($_GET[\"catId\"]) and !empty($_GET[\"catId\"]) ) ? $_GET[\"catId\"] : \"\";\n    $productBrandFilter = ( isset($_GET[\"brand\"]) and !empty($_GET[\"brand\"]) ) ? $_GET[\"brand\"] : \"\";\n    $productEditionFilter = ( isset($_GET[\"edition\"]) and !empty($_GET[\"edition\"]) ) ? \" AND product.product_edition = '{$_GET[\"edition\"]}'\" : \" AND product_type != 'Child' \";\n    $productGenericFilter = ( isset($_GET[\"generic\"]) and !empty($_GET[\"generic\"]) ) ? $_GET[\"generic\"] : \"\";\n    $productAuthorFilter = ( isset($_GET[\"author\"]) and !empty($_GET[\"author\"]) ) ? $_GET[\"author\"] : \"\";\n    $productTerms = ( isset($_GET[\"terms\"]) and !empty($_GET[\"terms\"]) ) ? \" AND product_name like '%{$_GET[\"terms\"]}%'\" : \"\";\n    $productSort = ( isset($_GET[\"sort\"]) and !empty($_GET[\"sort\"]) ) ? $_GET[\"sort\"] : \"\";\n\n    $oderBy = array(\n        \"product.product_id\" => \"DESC\"\n    );\n    \n    if( !empty($productSort) ) {\n\n        if( $productSort === \"1\") {\n\n            $oderBy = array(\n                \"total_sold_qty\"  => \"DESC\",\n                \"id\"           => \"ASC\"\n            );\n\n        } else if( $productSort === \"2\") {\n            $oderBy = array(\n                \"total_stock\"  => \"ASC\",\n                \"id\"           => \"ASC\"\n            );\n        } else if( $productSort === \"3\") {\n            $oderBy = array(\n                \"total_stock\"  => \"DESC\",\n                \"id\"           => \"ASC\"\n            );\n        }\n\n    }\n    \n    $productList = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id as id, product_name as name, product_type, product_alert_qnt as alert, length(product_photo) as v, \n\n                        round( coalesce(child_stock_in, main_stock_in, 0), 2) as stock,\n                        round( coalesce(child_sold_qty, main_sold_qty, 0), 2) as sold_qty,\n\n                        round( coalesce(child_stock_in, edition_stock_in, main_stock_in, 0), 2) as total_stock,\n                        round( coalesce(child_sold_qty, edition_sold_qty, main_sold_qty, 0), 2) as total_sold_qty\",\n        \"where\"     => array (\n            \"is_trash = 0 $productEditionFilter\",\n            \" AND product_category_id\"          => $productCategoryFilter,\n            \" AND product_brand_id\"             => $productBrandFilter,\n            \" AND product_generic\"              => $productGenericFilter,\n            \"{$productTerms}\"\n        ),\n        \"join\"  => array(\n            \n            \"left join (select\n                    product_id,\n                    sum(base_stock_in/ base_qty) as main_stock_in\n                from product_base_stock\n                group by product_id\n            ) as stock using(product_id)\",\n\n            \"left join (select\n                    stock_product_id,\n                    sum(stock_item_qty) as main_sold_qty\n                from {$table_prefix}product_stock\n                where is_trash = 0 and stock_type = 'sale'\n                group by stock_product_id\n            ) as sold on stock_product_id = product.product_id\",\n\n            \"left join ( -- Variable product stock counting by all child product\n\n                SELECT -- Child Product\n                    product_parent_id,\n                    group_concat(product_id) as child_products,\n                    sum(stock_in) as child_stock_in,\n                    sum(sold_qty) as child_sold_qty\n                FROM {$table_prefix}products as childProductJoin\n\n                left join (select \n                        product_id,\n                        sum(base_stock_in/ base_qty) as stock_in\n                    from product_base_stock\n                    group by product_id\n                ) as stock using(product_id)\n                \n                left join (select\n                        stock_product_id,\n                        sum(stock_item_qty) as sold_qty\n                    from {$table_prefix}product_stock\n                    where is_trash = 0 and stock_type = 'sale'\n                    group by stock_product_id\n                ) as sold on stock_product_id = childProductJoin.product_id\n\n                where childProductJoin.is_trash = 0\n                group by product_parent_id\n\n            ) as child_product on child_product.product_parent_id = product_id\",\n\n            \"LEFT JOIN (\n\n                SELECT -- same edition Product counting\n                    product_parent_id,\n                    product_edition as test_edit,\n                    product_edition,\n                    sum(edition_stock_in) as edition_stock_in,\n                    sum(edition_sold_qty) as edition_sold_qty\n                FROM {$table_prefix}products as sameEditionProduct\n    \n                left join (select \n                        product_id,\n                        sum(base_stock_in/ base_qty) as edition_stock_in\n                    from product_base_stock\n                    group by product_id\n                ) as stock using(product_id)\n                \n                left join (select\n                        stock_product_id,\n                        sum(stock_item_qty) as edition_sold_qty\n                    from {$table_prefix}product_stock\n                    where is_trash = 0 and stock_type = 'sale'\n                    group by stock_product_id\n                ) as sold on stock_product_id = sameEditionProduct.product_id\n    \n                where sameEditionProduct.is_trash = 0\n                group by product_parent_id, product_edition\n    \n                -- sep = same edition product\n    \n            ) as sep on (sep.product_parent_id = product.product_parent_id and sep.product_edition = product.product_edition)\",\n\n        ),\n        \"orderby\"   => $oderBy,\n        \"limit\"     => array (\n            \"start\"     => 0,\n            \"length\"    => empty(get_options(\"maxProductDisplay\")) ? 100 : get_options(\"maxProductDisplay\")\n        )\n        \n    ));\n    \n    if($productList) {\n        \n        echo json_encode($productList[\"data\"]);\n\n    } else {\n        echo \"null\";\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getChildProductData\") {\n\n\n    $warehouse_filter = empty($_GET[\"wid\"]) ? \"\" : \" = \" . safe_input($_GET[\"wid\"]);\n\n    $getChildProductData = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"\n                        product.product_id as pid, product_type, concat(product_name, ' ', if(product_group is null, '', product_group) ) as product_name, \n                        brand_name, product_purchase_price, product_sale_price, product_edition, product_unit, product_category_id, category_name,\n                        round( coalesce(initial_qty, 0), 2) as initial_qty,\n                        round( coalesce(production_qty, 0), 2) as production_qty,\n                        round( coalesce(sale_qty, 0), 2) as sale_qty,\n                        round( coalesce(wastage_sale_qty, 0), 2) as wastage_sale_qty,\n                        round( coalesce(sale_return_qty, 0), 2) as sale_return_qty,\n                        round( coalesce(purchase_qty, 0), 2) as purchase_qty,\n                        round( coalesce(purchase_order_qty, 0), 2) as purchase_order_qty,\n                        round( coalesce(purchase_return_qty, 0), 2) as purchase_return_qty,\n                        round( coalesce(transfer_in_qty, 0), 2) as transfer_in_qty,\n                        round( coalesce(transfer_out_qty, 0), 2) as transfer_out_qty,\n                        round( coalesce(specimen_copy_qty, 0), 2) as specimen_copy_qty,\n                        round( coalesce(specimen_copy_return_qty, 0), 2) as specimen_copy_return_qty,\n                        round( coalesce(expired_qty, 0), 2) as expired_qty,\n                        round( coalesce(stock_qty, 0), 2) as stock_qty,\n                        round( coalesce(sale_item_subtotal, 0), 2) as total_sold_amount,\n                        round( coalesce(purchase_item_subtotal, 0), 2) as total_purchased_amount,\n                        round( coalesce(sale_qty_in_range, 0), 2) as sale_qty_in_range,\n                        round( coalesce(specimen_copy_qty, 0), 2) as specimen_copy_qty\n        \",\n        \"join\"      => array(\n            \"left join (\n                select\n                    stock_product_id,\n                    sum(case when stock_type = 'initial' then stock_item_qty end) as initial_qty,\n                    sum(case when stock_type = 'sale-production' then stock_item_qty end) as production_qty,\n                    sum(case when stock_type = 'sale' then stock_item_qty end) as sale_qty,\n                    sum(case when stock_type = 'sale' then stock_item_qty end) as sale_qty_in_range,\n                    sum(case when stock_type = 'sale' then stock_item_subtotal end) as sale_item_subtotal,\n                    sum(case when stock_type = 'wastage-sale' then stock_item_qty end) as wastage_sale_qty,\n                    sum(case when stock_type = 'sale-return' then stock_item_qty end) as sale_return_qty,\n                    sum(case when stock_type = 'purchase' then stock_item_qty end) as purchase_qty,\n                    sum(case when stock_type = 'purchase' then stock_item_subtotal end) as purchase_item_subtotal,\n                    sum(case when stock_type = 'purchase-order' then stock_item_qty end) as purchase_order_qty,\n                    sum(case when stock_type = 'purchase-return' then stock_item_qty end) as purchase_return_qty,\n                    sum(case when stock_type = 'transfer-in' then stock_item_qty end) as transfer_in_qty,\n                    sum(case when stock_type = 'transfer-out' then stock_item_qty end) as transfer_out_qty,\n                    sum(case when stock_type = 'specimen-copy' then stock_item_qty end) as specimen_copy_qty,\n                    sum(case when stock_type = 'specimen-copy-return' then stock_item_qty end) as specimen_copy_return_qty\n                from {$table_prefix}product_stock\n                where is_trash = 0 and stock_warehouse_id $warehouse_filter\n                group by stock_product_id\n            ) as product_stock on stock_product_id = product_id\",\n            \"left join (\n                select\n                    vp_id,\n                    sum(case when batch_expiry_date < curdate() then base_stock_in/base_qty end) as expired_qty,\n                    sum(case when batch_expiry_date is null or batch_expiry_date > curdate() then base_stock_in/base_qty end) as stock_qty\n                from product_base_stock\n                where warehouse $warehouse_filter\n                group by vp_id\n            ) as base_stock on base_stock.vp_id = product.product_id\",\n\n            \"left join {$table_prefix}product_category on product_category_id = category_id\",\n            \"left join {$table_prefix}product_brands on product_brand_id = brand_id\",\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 and product.product_parent_id\" => $_GET[\"pid\"]\n        ),\n        \"groupby\"   => \"product.product_id\",\n    ));\n\n    if($getChildProductData !== false) {\n\n\n        $allData = [];\n\n        foreach($getChildProductData['data'] as $key => $value) {\n\n            \n            $allNestedData = [];\n\n            $allNestedData[] = \"\";\n                \n            $allNestedData[] = \"<a title='Show More Details' href='\". full_website_address() .\"/reports/product-report/?pid={$value['pid']}'>{$value['product_name']}</a> \n                            <a title='Update stock' style='padding-left: 5px; color: #a1a1a1;' class='updateEntry' href='\". full_website_address() . \"/xhr/?module=reports&page=updateProductStock' data-to-be-updated='\". $value[\"pid\"] .\"'><i class='fa fa-refresh'></i></a>\";\n            $allNestedData[] = $value[\"brand_name\"];\n            $allNestedData[] = $value[\"category_name\"];\n            $allNestedData[] = $value[\"product_edition\"];\n            $allNestedData[] = $value[\"initial_qty\"];\n            $allNestedData[] = $value[\"production_qty\"];\n            $allNestedData[] = number_format($value[\"purchase_qty\"], 2) ;\n            $allNestedData[] = $value[\"purchase_return_qty\"];\n            $allNestedData[] = $value[\"transfer_in_qty\"];\n            $allNestedData[] = $value[\"transfer_out_qty\"];\n            $allNestedData[] = number_format($value[\"sale_qty\"], 2);\n            $allNestedData[] = $value[\"sale_qty_in_range\"];\n            $allNestedData[] = $value[\"sale_return_qty\"];\n            $allNestedData[] = $value[\"specimen_copy_qty\"];\n            $allNestedData[] = $value[\"specimen_copy_return_qty\"];\n            $allNestedData[] = $value[\"expired_qty\"];\n            $allNestedData[] = number_format($value[\"stock_qty\"], 2);\n            $allNestedData[] = $value[\"product_unit\"];\n            $allNestedData[] = $value[\"stock_qty\"] * $value[\"product_sale_price\"];\n            $allNestedData[] = $value[\"stock_qty\"] * $value[\"product_purchase_price\"];\n            $allNestedData[] = $value[\"total_purchased_amount\"];\n            $allNestedData[] = $value[\"total_sold_amount\"];\n\n            \n            $allData[] = $allNestedData;\n\n        }\n\n\n        echo json_encode($allData);\n\n\n    } else {\n\n        echo 0;\n\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"salesOverviewChartData\") {\n\n    $type = isset($_GET[\"type\"]) ? $_GET[\"type\"] : \"daily\";\n\n    if( $type === \"monthly\" ) {\n\n        $monthlySalesData = easySelectD(\"\n            SELECT\n                concat(date_format(db_date, '%M %Y')) AS label,\n                sum(if(sales_quantity is null, 0, sales_quantity)) as sales_quantity,\n                sum(if(sales_grand_total is null, 0, sales_grand_total)) as sales_grand_total\n            FROM time_dimension\n            LEFT JOIN (\n                SELECT \n                    sales_delivery_date, \n                    sum(sales_quantity) as sales_quantity,\n                    sum(sales_grand_total) as sales_grand_total\n                FROM {$table_prefix}sales \n                WHERE is_trash = 0 and is_return = 0\n                GROUP BY sales_delivery_date\n            ) AS sales on sales_delivery_date = db_date\n            WHERE db_date BETWEEN NOW() - INTERVAL 20 MONTH AND NOW()\n            group by year(db_date), month(db_date)\n            order by year(db_date), month(db_date) ASC\n\t\t\");\n\n        $monthlySalesOverviewLabel = array();\n\t\t$monthlySalesOverviewQtyData = array();\n\t\t$monthlySalesOverviewAmountData = array();\n        \n        if( $monthlySalesData !== false ) {\n\n            foreach($monthlySalesData[\"data\"] as $sales ) {\n                array_push($monthlySalesOverviewLabel, $sales[\"label\"] );\n                array_push($monthlySalesOverviewQtyData, $sales[\"sales_quantity\"] );\n                array_push($monthlySalesOverviewAmountData, $sales[\"sales_grand_total\"] );\n            }\n\n        }\n\n\n        $monthlySalesData = array(\n            \"labels\" => $monthlySalesOverviewLabel,\n            \"datasets\" => array(\n                array(\n                    \"label\" => __(\"Monthly Sold Qty\"),\n                    \"borderColor\" => \"orange\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $monthlySalesOverviewQtyData\n                ),\n                array(\n                    \"label\" => __(\"Monthly Sold Amount\"),\n                    \"borderColor\" => \"green\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $monthlySalesOverviewAmountData\n                )\n            )\n        );\n\n        echo json_encode($monthlySalesData);\n\n\n    } else if( $type === \"weekly\" ) {\n\n        $weeklySalesData = easySelectD(\"\n            SELECT\n                concat(date_format(db_date, '%D %M')) AS label,\n                sum(if(sales_quantity is null, 0, sales_quantity)) as sales_quantity,\n                sum(if(sales_grand_total is null, 0, sales_grand_total)) as sales_grand_total\n            FROM time_dimension\n            LEFT JOIN (\n                SELECT \n                    sales_delivery_date, \n                    sum(sales_quantity) as sales_quantity,\n                    sum(sales_grand_total) as sales_grand_total\n                FROM {$table_prefix}sales \n                WHERE is_trash = 0 and is_return = 0\n                GROUP BY sales_delivery_date\n            ) AS sales on sales_delivery_date = db_date\n            WHERE db_date BETWEEN NOW() - INTERVAL 30 WEEK AND NOW()\n            group by week(db_date)\n            order by year(db_date), week(db_date) ASC\n\t\t\");\n\n        $weeklySalesOverviewLabel = array();\n\t\t$weeklySalesOverviewQtyData = array();\n\t\t$weeklySalesOverviewAmountData = array();\n        \n        if( $weeklySalesData !== false ) {\n\n            foreach($weeklySalesData[\"data\"] as $sales ) {\n                array_push($weeklySalesOverviewLabel, $sales[\"label\"] );\n                array_push($weeklySalesOverviewQtyData, $sales[\"sales_quantity\"] );\n                array_push($weeklySalesOverviewAmountData, $sales[\"sales_grand_total\"] );\n            }\n\n        }\n\n\n        $weeklySalesData = array(\n            \"labels\" => $weeklySalesOverviewLabel,\n            \"datasets\" => array(\n                array(\n                    \"label\" => __(\"Weekly Sold Qty\"),\n                    \"borderColor\" => \"orange\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $weeklySalesOverviewQtyData\n                ),\n                array(\n                    \"label\" => __(\"Weekly Sold Amount\"),\n                    \"borderColor\" => \"green\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $weeklySalesOverviewAmountData\n                )\n            )\n        );\n\n        echo json_encode($weeklySalesData);\n\n\n    } else {\n\n        \n        /** Daily Sales Calculatin */\n\n        $dailySalesData = easySelectD(\"\n            SELECT\n                db_date AS label,\n                if(sales_quantity is null, 0, sales_quantity) as sales_quantity,\n                if(sales_grand_total is null, 0, sales_grand_total) as sales_grand_total\n            FROM time_dimension\n            LEFT JOIN (\n                SELECT \n                    sales_delivery_date, \n                    sum(sales_quantity) as sales_quantity,\n                    sum(sales_grand_total) as sales_grand_total\n                FROM {$table_prefix}sales \n                WHERE is_trash = 0 and is_return = 0\n                GROUP BY sales_delivery_date\n            ) AS sales on sales_delivery_date = db_date\n            WHERE db_date BETWEEN NOW() - INTERVAL 30 DAY AND NOW()\n\t\t\");\n\n        $dailySalesOverviewLabel = array();\n\t\t$dailySalesOverviewQtyData = array();\n\t\t$dailySalesOverviewAmountData = array();\n        \n        if( $dailySalesData !== false ) {\n\n            foreach($dailySalesData[\"data\"] as $sales ) {\n                array_push($dailySalesOverviewLabel, $sales[\"label\"] );\n                array_push($dailySalesOverviewQtyData, $sales[\"sales_quantity\"] );\n                array_push($dailySalesOverviewAmountData, $sales[\"sales_grand_total\"] );\n            }\n\n        }\n\n\n        $dailySalesData = array(\n            \"labels\" => $dailySalesOverviewLabel,\n            \"datasets\" => array(\n                array(\n                    \"label\" => __(\"Daily Sold Qty\"),\n                    \"borderColor\" => \"orange\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $dailySalesOverviewQtyData\n                ),\n                array(\n                    \"label\" => __(\"Daily Sold Amount\"),\n                    \"borderColor\" => \"green\",\n                    \"borderWidth\"   => 2,\n                    \"data\"  => $dailySalesOverviewAmountData\n                )\n            )\n        );\n\n        echo json_encode($dailySalesData);\n\n    }\n\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseIncreasedList\") {\n\n    /**\n     * See here to know how to caculat parcentage\n     * https://www.bbc.co.uk/bitesize/guides/zpjmjty/revision/2\n     * \n     * \n     * percentage increase = increased number \u00f7 original number \u00d7 100\n     * percentage decrease = decreased number \u00f7 original number \u00d7 100\n     * \n     */\n\n    $type = isset($_GET[\"type\"]) ? $_GET[\"type\"] : \"daily\";\n\n    if( $type === \"fullYear\" ) {\n\n        $getPurchaseIncreasedCustomer = easySelectA(array(\n            \"table\"     => \"customers as customer\",\n            \"fields\"    => \"customer_id, customer_name, upazila_name, district_name,\n                            round(previous_year_total_sales, 2) as previous_year_total_purchase, \n                            round(coalesce(current_year_total_sales, 0), 2) as current_year_total_purchase,\n                            round( ( coalesce(current_year_total_sales, 0) - coalesce(previous_year_total_sales, 0) ) / previous_year_total_sales * 100, 2) as increased_rate\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}upazilas on customer_upazila = upazila_id\",\n                \"left join {$table_prefix}districts on customer_district = district_id\",\n                \"left join (\n                    select\n                        sales_customer_id,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() - INTERVAL 1 YEAR ) THEN sales_grand_total END ) as previous_year_total_sales,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() ) THEN sales_grand_total END ) as current_year_total_sales\n                    from ro_sales\n                    where is_trash = 0 and is_return = 0\n                    group by sales_customer_id\n                ) as customer_sale on sales_customer_id = customer_id\"\n            ),\n            \"where\" => array(\n                \"customer.is_trash = 0 and previous_year_total_sales is not null and coalesce(previous_year_total_sales, 0) < current_year_total_sales and current_year_total_sales > 100000\"\n            ),\n            \"orderby\"   => array(\n                \"increased_rate\"    => \"DESC\"\n            ),\n            \"limit\" => array(\n                \"start\"     => 0,\n                \"length\"    => 15\n            )\n        ));\n\n    } else {\n\n        $getPurchaseIncreasedCustomer = easySelectA(array(\n            \"table\"     => \"customers as customer\",\n            \"fields\"    => \"customer_id, customer_name, upazila_name, district_name,\n                            round(previous_year_total_sales, 2) as previous_year_total_purchase, \n                            round(coalesce(current_year_total_sales, 0), 2) as current_year_total_purchase,\n                            round( ( coalesce(current_year_total_sales, 0) - coalesce(previous_year_total_sales, 0) ) / previous_year_total_sales * 100, 2) as increased_rate\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}upazilas on customer_upazila = upazila_id\",\n                \"left join {$table_prefix}districts on customer_district = district_id\",\n                \"left join (\n                    select\n                        sales_customer_id,\n                        sum( CASE WHEN sales_delivery_date between CONCAT( YEAR(CURDATE() - INTERVAL 1 YEAR),'-',01,'-',01) AND CURDATE() - INTERVAL 1 YEAR THEN sales_grand_total END ) as previous_year_total_sales,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() ) THEN sales_grand_total END ) as current_year_total_sales\n                    from ro_sales\n                    where is_trash = 0 and is_return = 0\n                    group by sales_customer_id\n                ) as customer_sale on sales_customer_id = customer_id\"\n            ),\n            \"where\" => array(\n                \"customer.is_trash = 0 and previous_year_total_sales is not null and coalesce(previous_year_total_sales, 0) < current_year_total_sales and current_year_total_sales > 100000\"\n            ),\n            \"orderby\"   => array(\n                \"increased_rate\"    => \"DESC\"\n            ),\n            \"limit\" => array(\n                \"start\"     => 0,\n                \"length\"    => 15\n            )\n        ));\n\n    }\n    \n\n    if($getPurchaseIncreasedCustomer !== false) {\n\n        echo json_encode( $getPurchaseIncreasedCustomer[\"data\"] );\n\n    }\n\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"customerPurchaseDecreasedList\") {\n\n\n    /**\n     * See here to know how to caculat parcentage\n     * https://www.bbc.co.uk/bitesize/guides/zpjmjty/revision/2\n     * \n     * \n     * percentage increase = increased number \u00f7 original number \u00d7 100\n     * percentage decrease = decreased number \u00f7 original number \u00d7 100\n     * \n     */\n\n    $type = isset($_GET[\"type\"]) ? $_GET[\"type\"] : \"daily\";\n\n    if( $type === \"fullYear\" ) {\n\n        $getPurchaseDecreasedCustomer = easySelectA(array(\n            \"table\"     => \"customers as customer\",\n            \"fields\"    => \"customer_id, customer_name, upazila_name, district_name,\n                            round(previous_year_total_sales, 2) as previous_year_total_purchase, \n                            round(coalesce(current_year_total_sales, 0), 2) as current_year_total_purchase,\n                            round( ( coalesce(previous_year_total_sales, 0) - coalesce(current_year_total_sales, 0) ) / previous_year_total_sales * 100, 2) as decreased_rate\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}upazilas on customer_upazila = upazila_id\",\n                \"left join {$table_prefix}districts on customer_district = district_id\",\n                \"left join (\n                    select\n                        sales_customer_id,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() - INTERVAL 1 YEAR ) THEN sales_grand_total END ) as previous_year_total_sales,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() ) THEN sales_grand_total END ) as current_year_total_sales\n                    from ro_sales\n                    where is_trash = 0 and is_return = 0\n                    group by sales_customer_id\n                ) as customer_sale on sales_customer_id = customer_id\"\n            ),\n            \"where\" => array(\n                \"customer.is_trash = 0 and previous_year_total_sales is not null and previous_year_total_sales > coalesce(current_year_total_sales, 0) and previous_year_total_sales > 100000\"\n            ),\n            \"orderby\"   => array(\n                \"decreased_rate\"    => \"DESC\",\n                \"previous_year_total_sales\"    => \"DESC\"\n            ),\n            \"limit\" => array(\n                \"start\"     => 0,\n                \"length\"    => 15\n            )\n        \n        ));\n    \n    } else {\n        \n        $getPurchaseDecreasedCustomer = easySelectA(array(\n            \"table\"     => \"customers as customer\",\n            \"fields\"    => \"customer_id, customer_name, upazila_name, district_name,\n                            round(previous_year_total_sales, 2) as previous_year_total_purchase, \n                            round(coalesce(current_year_total_sales, 0), 2) as current_year_total_purchase,\n                            round( ( coalesce(previous_year_total_sales, 0) - coalesce(current_year_total_sales, 0) ) / previous_year_total_sales * 100, 2) as decreased_rate\n                            \",\n            \"join\"      => array(\n                \"left join {$table_prefix}upazilas on customer_upazila = upazila_id\",\n                \"left join {$table_prefix}districts on customer_district = district_id\",\n                \"left join (\n                    select\n                        sales_customer_id,\n                        sum( CASE WHEN sales_delivery_date between CONCAT( YEAR(CURDATE() - INTERVAL 1 YEAR),'-',01,'-',01) AND CURDATE() - INTERVAL 1 YEAR THEN sales_grand_total END ) as previous_year_total_sales,\n                        sum( CASE WHEN YEAR(sales_delivery_date) = YEAR( CURDATE() ) THEN sales_grand_total END ) as current_year_total_sales\n                    from ro_sales\n                    where is_trash = 0 and is_return = 0\n                    group by sales_customer_id\n                ) as customer_sale on sales_customer_id = customer_id\"\n            ),\n            \"where\" => array(\n                \"customer.is_trash = 0 and previous_year_total_sales is not null and previous_year_total_sales > coalesce(current_year_total_sales, 0) and previous_year_total_sales > 100000\"\n            ),\n            \"orderby\"   => array(\n                \"decreased_rate\"    => \"DESC\",\n                \"previous_year_total_sales\"    => \"DESC\"\n            ),\n            \"limit\" => array(\n                \"start\"     => 0,\n                \"length\"    => 15\n            )\n        \n        ));\n\n    }\n\n\n    if($getPurchaseDecreasedCustomer !== false) {\n\n        echo json_encode( $getPurchaseDecreasedCustomer[\"data\"] );\n\n    }\n\n\n}\n\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"searchContact\") {\n\n    $search = safe_input($_GET['s']);\n\n    $getContact = easySelectD(\"\n\n        SELECT\n            name,\n            number,\n            type\n        FROM\n        (\n            SELECT \n                customer_name as name,\n                customer_phone as number,\n                'Customer' as type\n            FROM {$table_prefix}customers\n            WHERE is_trash = 0\n            UNION ALL\n            SELECT \n                person_full_name as name,\n                person_phone as number,\n                'Leads' as type\n            FROM {$table_prefix}persons\n            WHERE is_trash = 0\n        ) as contactData \n        WHERE name LIKE '%{$search}%' or number like '{$search}%'\n        limit 0,10\n    \");\n\n    if($getContact !== false) {\n        echo json_encode($getContact[\"data\"]);\n    } else {\n        echo \"\";\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"productListByBrand\") {\n\n\n    $filter_reorder_qty = \"\";\n    if( isset( $_GET[\"frq\"] ) and $_GET[\"frq\"] === \"Yes\" ) {\n        $filter_reorder_qty = \" AND stock_in <= product_alert_qnt\";\n    }\n\n    $products = easySelectA(array(\n        \"table\"     => \"products as product\",\n        \"fields\"    => \"product.product_id as pid, concat(product_name, ' ', if(product_group is null, '', left(product_group, 3))) as pn, product_type, 0 as product_discount, \n                        round( COALESCE(purchase_price, product_purchase_price), 2) as pp, \n                        round( COALESCE(sale_price, product_sale_price), 2) as product_sale_price, \n                        product_unit as pu, has_expiry_date, if(stock_in is null, 0, round(stock_in, 2)) as stockq,\n                        if(total_sold is null, 0, round(total_sold, 2)) as soldq, round(product_alert_qnt, 2) as alertq\n                        \",\n        \"join\"      => array(\n            \"left join (\n                SELECT\n                    stock_product_id,\n                    sum(stock_item_qty) as total_sold\n                FROM {$table_prefix}product_stock\n                WHERE is_trash = 0 and stock_type = 'sale'\n                group by stock_product_id\n            ) as sold on sold.stock_product_id = product.product_id\",\n            \"left join (select\n                            vp_id,\n                            sum(base_stock_in/base_qty) as stock_in\n                        from product_base_stock\n                        where warehouse = '{$_SESSION['wid']}'\n                        group by vp_id\n            ) as pbs on pbs.vp_id = product.product_id\",\n            // Because Of we have different price based on shop\n            \"left join (SELECT\n                            product_id,\n                            purchase_price,\n                            sale_price\n                FROM {$table_prefix}product_price    \n                WHERE shop_id = '{$_SESSION['sid']}'\n            ) as product_price on product_price.product_id = product.product_id\"\n        ),\n        \"where\"     => array(\n            \"product.is_trash = 0 {$filter_reorder_qty}\",\n            \" AND product.product_brand_id\" => $_GET[\"brand_id\"],\n        ),\n        \"groupby\"   => \"product.product_id\"\n    ));\n\n    if($products !== false) {\n        echo json_encode( $products[\"data\"] );\n    } else {\n        echo \"\";\n    }\n\n}\n\n\nif(isset($_GET['page']) and $_GET['page'] == \"getIncomeReportData\") {\n\n\n    $dateFilter = empty($_POST[\"incomeReportDate\"]) ? \"1970-01-01 - \".date(\"Y\").\"-12-31\" : safe_input($_POST[\"incomeReportDate\"]);\n    $dateRange = explode(\" - \", $dateFilter);\n\n    if( !empty($_POST[\"incomeReportDate\"]) ) {\n        \n    }\n    \n\n    $incomeData = easySelectA(array(\n        \"table\"     => \"product_stock\",\n        \"fields\"    => \"sum(case when stock_type = 'sale' then stock_item_subtotal else 0 end) as total_sale,\n                        sum(case when stock_type = 'purchase' then stock_item_subtotal else 0 end) as total_purchase\n                        \",\n        \"where\"     => array(\n            \"is_trash = 0 AND stock_entry_date BETWEEN '{$dateRange[0]}' AND '{$dateRange[1]}'\",\n            \" AND stock_shop_id\"    => $_POST[\"incomeReportShop\"]\n        )\n    ));\n\n\n    $openingStock = easySelectA(array(\n        \"table\"     => \"purchase\",\n        \"fields\"    => \"sum(CASE WHEN purchase_date > '{$dateRange[0]}' THEN purchase_grand_total ELSE 0 END ) AS opening_stock,\n                        sum(CASE WHEN purchase_date > '{$dateRange[0]}' THEN purchase_grand_total ELSE 0 END ) AS opening_stock,\n        \",\n        \"where\"     => array(\n            \"is_trash = 0\"\n        )\n    ));\n\n    print_r($incomeData);\n\n\n}\n\n?>"], "filenames": ["core/ajax/ajax_data.php"], "buggy_code_start_loc": [9], "buggy_code_end_loc": [1820], "fixing_code_start_loc": [9], "fixing_code_end_loc": [2331], "type": "CWE-89", "message": "SQL Injection in GitHub repository unilogies/bumsys prior to v2.0.2.", "other": {"cve": {"id": "CVE-2023-1361", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-13T05:15:11.827", "lastModified": "2023-03-15T18:55:55.927", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL Injection in GitHub repository unilogies/bumsys prior to v2.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bumsys_project:bumsys:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.0.2", "matchCriteriaId": "B44DC2F2-8FA2-4A56-A735-72441B7B688F"}]}]}], "references": [{"url": "https://github.com/unilogies/bumsys/commit/6a328eb5bf9dbb44329a3df82e95683b77c4730d", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/1b1dbc5a-df16-421f-9a0d-de83e43146c4", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/unilogies/bumsys/commit/6a328eb5bf9dbb44329a3df82e95683b77c4730d"}}