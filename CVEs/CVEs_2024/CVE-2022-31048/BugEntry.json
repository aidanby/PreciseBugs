{"buggy_code": ["/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\n/**\n * Module: @typo3/form/backend/form-editor/stage-component\n */\nimport $ from 'jquery';\nimport * as Helper from '@typo3/form/backend/form-editor/helper.js';\nimport Icons from '@typo3/backend/icons.js';\nimport '@typo3/form/backend/contrib/jquery.mjs.nested-sortable.js';\n\nconst {\n  bootstrap,\n  buildTitleByFormElement,\n  createAndAddAbstractViewFormElementToolbar,\n  createAbstractViewFormElementToolbar,\n  eachTemplateProperty,\n  getAbstractViewFormElementDomElement,\n  getAbstractViewFormElementWithinDomElement,\n  getAbstractViewFormElementIdentifierPathWithinDomElement,\n  getAbstractViewParentFormElementWithinDomElement,\n  getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n  getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n  getAllFormElementDomElements,\n  getStageDomElement,\n  getStagePanelDomElement,\n  removeAllStageToolbars,\n  renderAbstractStageArea,\n  renderCheckboxTemplate,\n  renderFileUploadTemplates,\n  renderFormDefinitionPageAsSortableList,\n  renderPagination,\n  renderPreviewStageArea,\n  renderSelectTemplates,\n  renderSimpleTemplate,\n  renderSimpleTemplateWithValidators,\n  renderUndoRedo,\n  setStageHeadline,\n} = factory($, Helper, Icons);\n\nexport {\n  bootstrap,\n  buildTitleByFormElement,\n  createAndAddAbstractViewFormElementToolbar,\n  createAbstractViewFormElementToolbar,\n  eachTemplateProperty,\n  getAbstractViewFormElementDomElement,\n  getAbstractViewFormElementWithinDomElement,\n  getAbstractViewFormElementIdentifierPathWithinDomElement,\n  getAbstractViewParentFormElementWithinDomElement,\n  getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n  getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n  getAllFormElementDomElements,\n  getStageDomElement,\n  getStagePanelDomElement,\n  removeAllStageToolbars,\n  renderAbstractStageArea,\n  renderCheckboxTemplate,\n  renderFileUploadTemplates,\n  renderFormDefinitionPageAsSortableList,\n  renderPagination,\n  renderPreviewStageArea,\n  renderSelectTemplates,\n  renderSimpleTemplate,\n  renderSimpleTemplateWithValidators,\n  renderUndoRedo,\n  setStageHeadline,\n};\n\n\nfunction factory($, Helper, Icons) {\n  return (function($, Helper, Icons) {\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _configuration = null;\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _defaultConfiguration = {\n      domElementClassNames: {\n        formElementIsComposit: 't3-form-element-composit',\n        formElementIsTopLevel: 't3-form-element-toplevel',\n        noNesting: 'mjs-nestedSortable-no-nesting',\n        selected: 'selected',\n        sortable: 'sortable',\n        previewViewPreviewElement: 't3-form-element-preview'\n      },\n      domElementDataAttributeNames: {\n        abstractType: 'data-element-abstract-type',\n        noSorting: 'data-no-sorting'\n      },\n      domElementDataAttributeValues: {\n        abstractViewToolbar: 'elementToolbar',\n        abstractViewToolbarNewElement: 'stageElementToolbarNewElement',\n        abstractViewToolbarNewElementSplitButton: 'stageElementToolbarNewElementSplitButton',\n        abstractViewToolbarNewElementSplitButtonAfter: 'stageElementToolbarNewElementSplitButtonAfter',\n        abstractViewToolbarNewElementSplitButtonInside: 'stageElementToolbarNewElementSplitButtonInside',\n        abstractViewToolbarRemoveElement: 'stageElementToolbarRemoveElement',\n        buttonHeaderRedo: 'redoButton',\n        buttonHeaderUndo: 'undoButton',\n        buttonPaginationPrevious: 'buttonPaginationPrevious',\n        buttonPaginationNext: 'buttonPaginationNext',\n        'FormElement-_ElementToolbar': 'FormElement-_ElementToolbar',\n        'FormElement-_UnknownElement': 'FormElement-_UnknownElement',\n        'FormElement-AdvancedPassword': 'FormElement-AdvancedPassword',\n        'FormElement-Checkbox': 'FormElement-Checkbox',\n        'FormElement-ContentElement': 'FormElement-ContentElement',\n        'FormElement-DatePicker': 'FormElement-DatePicker',\n        'FormElement-Fieldset': 'FormElement-Fieldset',\n        'FormElement-GridRow': 'FormElement-GridRow',\n        'FormElement-FileUpload': 'FormElement-FileUpload',\n        'FormElement-Hidden': 'FormElement-Hidden',\n        'FormElement-ImageUpload': 'FormElement-ImageUpload',\n        'FormElement-MultiCheckbox': 'FormElement-MultiCheckbox',\n        'FormElement-MultiSelect': 'FormElement-MultiSelect',\n        'FormElement-Page': 'FormElement-Page',\n        'FormElement-Password': 'FormElement-Password',\n        'FormElement-RadioButton': 'FormElement-RadioButton',\n        'FormElement-SingleSelect': 'FormElement-SingleSelect',\n        'FormElement-StaticText': 'FormElement-StaticText',\n        'FormElement-SummaryPage': 'FormElement-SummaryPage',\n        'FormElement-Text': 'FormElement-Text',\n        'FormElement-Textarea': 'FormElement-Textarea',\n        'FormElement-Email': 'FormElement-Email',\n        'FormElement-Url': 'FormElement-Url',\n        'FormElement-Telephone': 'FormElement-Telephone',\n        'FormElement-Number': 'FormElement-Number',\n        'FormElement-Date': 'FormElement-Date',\n        formElementIcon: 'elementIcon',\n        iconValidator: 'form-validator',\n        multiValueContainer: 'multiValueContainer',\n        paginationTitle: 'paginationTitle',\n        stageHeadline: 'formDefinitionLabel',\n        stagePanel: 'stagePanel',\n        validatorsContainer: 'validatorsContainer',\n        validatorIcon: 'validatorIcon'\n      },\n      isSortable: true\n    };\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _formEditorApp = null;\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _stageDomElement = null;\n\n    /* *************************************************************\n     * Private Methods\n     * ************************************************************/\n\n    /**\n     * @private\n     *\n     * @return void\n     * @throws 1478268638\n     */\n    function _helperSetup() {\n      assert('function' === $.type(Helper.bootstrap),\n        'The view model helper does not implement the method \"bootstrap\"',\n        1478268638\n      );\n      Helper.bootstrap(getFormEditorApp());\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getFormEditorApp() {\n      return _formEditorApp;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     */\n    function getHelper(configuration) {\n      if (getUtility().isUndefinedOrNull(configuration)) {\n        return Helper.setConfiguration(_configuration);\n      }\n      return Helper.setConfiguration(configuration);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getUtility() {\n      return getFormEditorApp().getUtility();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getViewModel() {\n      return getFormEditorApp().getViewModel();\n    };\n\n    /**\n     * @private\n     *\n     * @param mixed test\n     * @param string message\n     * @param int messageCode\n     * @return void\n     */\n    function assert(test, message, messageCode) {\n      return getFormEditorApp().assert(test, message, messageCode);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getRootFormElement() {\n      return getFormEditorApp().getRootFormElement();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getCurrentlySelectedFormElement() {\n      return getFormEditorApp().getCurrentlySelectedFormElement();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getPublisherSubscriber() {\n      return getFormEditorApp().getPublisherSubscriber();\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param string\n     * @return mixed\n     */\n    function getFormElementDefinition(formElement, formElementDefinitionKey) {\n      return getFormEditorApp().getFormElementDefinition(formElement, formElementDefinitionKey);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     * @return string\n     * @return void\n     */\n    function _setTemplateTextContent(domElement, content) {\n      if (getUtility().isNonEmptyString(content)) {\n        $(domElement).text(content);\n      }\n    }\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param object\n     * @return void\n     * @publish view/stage/abstract/render/template/perform\n     */\n    function _renderTemplateDispatcher(formElement, template) {\n      switch (formElement.get('type')) {\n        case 'Checkbox':\n          renderCheckboxTemplate(formElement, template);\n          break;\n        case 'FileUpload':\n        case 'ImageUpload':\n          renderFileUploadTemplates(formElement, template);\n          break;\n        case 'SingleSelect':\n        case 'RadioButton':\n        case 'MultiSelect':\n        case 'MultiCheckbox':\n          renderSelectTemplates(formElement, template);\n          break;\n        case 'Textarea':\n        case 'AdvancedPassword':\n        case 'Password':\n        case 'Text':\n        case 'Email':\n        case 'Url':\n        case 'Telephone':\n        case 'Number':\n        case 'DatePicker':\n        case 'Date':\n          renderSimpleTemplateWithValidators(formElement, template);\n          break;\n        case 'Fieldset':\n        case 'GridRow':\n        case 'SummaryPage':\n        case 'Page':\n        case 'StaticText':\n        case 'Hidden':\n        case 'ContentElement':\n          renderSimpleTemplate(formElement, template);\n          break;\n      }\n      getPublisherSubscriber().publish('view/stage/abstract/render/template/perform', [formElement, template]);\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @return object\n     * @throws 1478987818\n     */\n    function _renderNestedSortableListItem(formElement) {\n      var childFormElements, childList, listItem, template;\n\n      listItem = $('<li></li>');\n      if (!getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('noNesting'));\n      }\n\n      if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('formElementIsTopLevel'));\n      }\n      if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('formElementIsComposit'));\n      }\n\n      try {\n        template = getHelper().getTemplate('FormElement-' + formElement.get('type')).clone();\n      } catch (error) {\n        template = getHelper().getTemplate('FormElement-_UnknownElement').clone();\n        assert(\n          template.length,\n          'No template found for element \"' + formElement.get('__identifierPath') + '\"',\n          1478987818\n        );\n      }\n\n      template = $('<div></div>')\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'), formElement.get('__identifierPath'))\n        .append($(template.html()));\n\n      if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        template.attr(getHelper().getDomElementDataAttribute('abstractType'), 'isCompositeFormElement');\n      }\n      if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n        template.attr(getHelper().getDomElementDataAttribute('abstractType'), 'isTopLevelFormElement');\n      }\n      listItem.append(template);\n\n      _renderTemplateDispatcher(formElement, template);\n\n      childFormElements = formElement.get('renderables');\n      childList = null;\n      if ('array' === $.type(childFormElements)) {\n        childList = $('<ol></ol>');\n        if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n          childList.addClass(getHelper().getDomElementClassName('sortable'));\n        }\n        for (var i = 0, len = childFormElements.length; i < len; ++i) {\n          childList.append(_renderNestedSortableListItem(childFormElements[i]));\n        }\n      }\n\n      if (childList) {\n        listItem.append(childList);\n      }\n      return listItem;\n    };\n\n    /**\n     * @private\n     *\n     * @return void\n     * @publish view/stage/abstract/dnd/start\n     * @publish view/stage/abstract/dnd/stop\n     * @publish view/stage/abstract/dnd/change\n     * @publish view/stage/abstract/dnd/update\n     */\n    function _addSortableEvents() {\n      $('ol.' + getHelper().getDomElementClassName('sortable'), _stageDomElement).nestedSortable({\n        forcePlaceholderSize: true,\n        handle: 'div' + getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'),\n        helper: 'clone',\n        items: 'li:not(' + getHelper().getDomElementDataAttribute('noSorting', 'bracesWithKey') + ')',\n        opacity: .6,\n        revert: 250,\n        delay: 200,\n        tolerance: 'pointer',\n        toleranceElement: '> div',\n\n        isAllowed: function(placeholder, placeholderParent, currentItem) {\n          var formElementIdentifierPath, formElementTypeDefinition, targetFormElementIdentifierPath,\n            targetFormElementTypeDefinition;\n\n          formElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(currentItem));\n          targetFormElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(placeholderParent));\n          if (!targetFormElementIdentifierPath) {\n            targetFormElementIdentifierPath = getFormEditorApp().getCurrentlySelectedPage();\n          }\n\n          return true;\n        },\n        start: function(e, o) {\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/start', [$(o.item), $(o.placeholder)]);\n        },\n        stop: function(e, o) {\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/stop', [\n            getAbstractViewFormElementIdentifierPathWithinDomElement($(o.item))\n          ]);\n        },\n        change: function(e, o) {\n          var enclosingCompositeFormElement, parentFormElementIdentifierPath;\n\n          parentFormElementIdentifierPath = getAbstractViewParentFormElementIdentifierPathWithinDomElement($(o.placeholder));\n          if (parentFormElementIdentifierPath) {\n            enclosingCompositeFormElement = getFormEditorApp()\n              .findEnclosingCompositeFormElementWhichIsNotOnTopLevel(parentFormElementIdentifierPath);\n          }\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/change', [\n            $(o.placeholder),\n            parentFormElementIdentifierPath, enclosingCompositeFormElement\n          ]);\n        },\n        update: function(e, o) {\n          var nextFormElementIdentifierPath, movedFormElement, movedFormElementIdentifierPath,\n            parentFormElementIdentifierPath, previousFormElementIdentifierPath;\n\n          movedFormElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(o.item));\n          previousFormElementIdentifierPath = getAbstractViewSiblingFormElementIdentifierPathWithinDomElement($(o.item), 'prev');\n          nextFormElementIdentifierPath = getAbstractViewSiblingFormElementIdentifierPathWithinDomElement($(o.item), 'next');\n\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/update', [\n            $(o.item),\n            movedFormElementIdentifierPath,\n            previousFormElementIdentifierPath,\n            nextFormElementIdentifierPath\n          ]);\n        }\n      });\n    };\n\n    /* *************************************************************\n     * Public Methods\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @return object\n     */\n    function getStageDomElement() {\n      return _stageDomElement;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     * @throws 1479037151\n     */\n    function buildTitleByFormElement(formElement) {\n      if (getUtility().isUndefinedOrNull(formElement)) {\n        formElement = getRootFormElement();\n      }\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479037151);\n\n      return $('<span></span>')\n        .text((formElement.get('label') ? formElement.get('label') : formElement.get('identifier')));\n    };\n\n    /**\n     * @public\n     *\n     * @param string title\n     * @return void\n     */\n    function setStageHeadline(title) {\n      if (getUtility().isUndefinedOrNull(title)) {\n        title = buildTitleByFormElement();\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).html(title);\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     */\n    function getStagePanelDomElement() {\n      return $(getHelper().getDomElementDataIdentifierSelector('stagePanel'));\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function renderPagination() {\n      var pageCount;\n\n      pageCount = getRootFormElement().get('renderables').length;\n\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationPrevious')));\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationNext')));\n\n      if (getFormEditorApp().getCurrentlySelectedPageIndex() === 0) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationPrevious')));\n      }\n\n      if (pageCount === 1 || getFormEditorApp().getCurrentlySelectedPageIndex() === (pageCount - 1)) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationNext')));\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('paginationTitle')).text(\n        getFormElementDefinition(getRootFormElement(), 'paginationTitle')\n          .replace('{0}', getFormEditorApp().getCurrentlySelectedPageIndex() + 1)\n          .replace('{1}', pageCount)\n      );\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function renderUndoRedo() {\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderUndo')));\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderRedo')));\n\n      if (getFormEditorApp().getCurrentApplicationStatePosition() + 1 >= getFormEditorApp().getCurrentApplicationStates()) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderUndo')));\n      }\n      if (getFormEditorApp().getCurrentApplicationStatePosition() === 0) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderRedo')));\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAllFormElementDomElements() {\n      return $(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'),\n        _stageDomElement\n      );\n    };\n\n    /* *************************************************************\n     * Abstract stage\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param int\n     * @return object\n     * @throws 1478721208\n     */\n    function renderFormDefinitionPageAsSortableList(pageIndex) {\n      assert(\n        'number' === $.type(pageIndex),\n        'Invalid parameter \"pageIndex\"',\n        1478721208\n      );\n\n      return $('<ol></ol>')\n        .append(_renderNestedSortableListItem(getRootFormElement().get('renderables')[pageIndex]));\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewParentFormElementWithinDomElement(element) {\n      return $(element)\n        .parent()\n        .closest('li')\n        .find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .first();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewParentFormElementIdentifierPathWithinDomElement(element) {\n      return getAbstractViewParentFormElementWithinDomElement(element)\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewFormElementWithinDomElement(element) {\n      return $(element)\n        .find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .first();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewFormElementIdentifierPathWithinDomElement(element) {\n      return getAbstractViewFormElementWithinDomElement($(element))\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param string\n     * @return string\n     */\n    function getAbstractViewSiblingFormElementIdentifierPathWithinDomElement(element, position) {\n      var formElementIdentifierPath;\n\n      if (getUtility().isUndefinedOrNull(position)) {\n        position = 'prev';\n      }\n      formElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement(element);\n      element = (position === 'prev') ? $(element).prev('li') : $(element).next('li');\n      return element.find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .not(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKeyValue', [formElementIdentifierPath]))\n        .first()\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @public\n     *\n     * @param string|object\n     * @return object\n     */\n    function getAbstractViewFormElementDomElement(formElement) {\n      var formElementIdentifierPath;\n\n      if ('string' === $.type(formElement)) {\n        formElementIdentifierPath = formElement;\n      } else {\n        if (getUtility().isUndefinedOrNull(formElement)) {\n          formElementIdentifierPath = getCurrentlySelectedFormElement().get('__identifierPath');\n        } else {\n          formElementIdentifierPath = formElement.get('__identifierPath');\n        }\n      }\n      return $(getHelper()\n        .getDomElementDataAttribute('elementIdentifier', 'bracesWithKeyValue', [formElementIdentifierPath]), _stageDomElement);\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function removeAllStageToolbars() {\n      $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbar'), _stageDomElement).off().empty().remove();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     * @publish view/insertElements/perform/after\n     * @publish view/insertElements/perform/inside\n     * @throws 1479035778\n     */\n    function createAbstractViewFormElementToolbar(formElement) {\n      var formElementTypeDefinition, template;\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035778);\n\n      formElementTypeDefinition = getFormElementDefinition(formElement);\n      if (formElementTypeDefinition['_isTopLevelFormElement']) {\n        return $();\n      }\n\n      template = getHelper().getTemplate('FormElement-_ElementToolbar').clone();\n      if (!template.length) {\n        return $();\n      }\n\n      template = $($(template.html()));\n\n      getHelper().getTemplatePropertyDomElement('_type', template).text(getFormElementDefinition(formElement, 'label'));\n      getHelper().getTemplatePropertyDomElement('_identifier', template).text(formElement.get('identifier'));\n\n      if (formElementTypeDefinition['_isCompositeFormElement']) {\n        getViewModel().hideComponent($(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElement'), template));\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButtonAfter'), template).on('click', function(e) {\n          getPublisherSubscriber().publish('view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/after',\n              {\n                disableElementTypes: [],\n                onlyEnableElementTypes: []\n              }\n            ]\n          );\n        });\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButtonInside'), template).on('click', function(e) {\n          getPublisherSubscriber().publish('view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/inside',\n              {\n                disableElementTypes: [],\n                onlyEnableElementTypes: []\n              }\n            ]\n          );\n        });\n      } else {\n        getViewModel().hideComponent($(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButton'), template));\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElement'), template).on('click', function(e) {\n          getPublisherSubscriber().publish(\n            'view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/after',\n              {\n                disableElementTypes: []\n              }\n            ]\n          );\n        });\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarRemoveElement'), template).on('click', function(e) {\n        getViewModel().showRemoveFormElementModal();\n      });\n\n      return template;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param object\n     * @param bool\n     * @return void\n     */\n    function createAndAddAbstractViewFormElementToolbar(selectedFormElementDomElement, formElement, useFadeEffect) {\n      var toolbar;\n      if (getUtility().isUndefinedOrNull(formElement)) {\n        formElement = getCurrentlySelectedFormElement();\n      }\n\n      if (useFadeEffect) {\n        createAbstractViewFormElementToolbar(formElement).fadeOut(0, function() {\n          selectedFormElementDomElement.prepend($(this));\n          $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbar'), selectedFormElementDomElement).fadeIn('fast');\n        });\n      } else {\n        selectedFormElementDomElement.prepend(createAbstractViewFormElementToolbar(formElement));\n      }\n\n    };\n\n    /**\n     * @public\n     *\n     * @param int\n     * @param function\n     * @return void\n     * @publish view/stage/dnd/stop\n     * @publish view/stage/element/clicked\n     * @throws 1478169511\n     */\n    function renderAbstractStageArea(pageIndex, callback) {\n      if (getUtility().isUndefinedOrNull(pageIndex)) {\n        pageIndex = getFormEditorApp().getCurrentlySelectedPageIndex();\n      }\n      _stageDomElement.off().empty().append(renderFormDefinitionPageAsSortableList(pageIndex));\n\n      _stageDomElement.on(\"click\", function(e) {\n        var formElementIdentifierPath;\n\n        formElementIdentifierPath = $(e.target)\n          .closest(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n          .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n        if (\n          getUtility().isUndefinedOrNull(formElementIdentifierPath)\n          || !getUtility().isNonEmptyString(formElementIdentifierPath)\n        ) {\n          return;\n        }\n\n        getPublisherSubscriber().publish('view/stage/element/clicked', [formElementIdentifierPath]);\n      });\n\n      if (_configuration['isSortable']) {\n        _addSortableEvents();\n      }\n\n      if ('function' === $.type(callback)) {\n        callback();\n      }\n    };\n\n\n    /* *************************************************************\n     * Preview stage\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param string html\n     * @return void\n     * @throws 1475424409\n     */\n    function renderPreviewStageArea(html) {\n      assert(getUtility().isNonEmptyString(html), 'Invalid parameter \"html\"', 1475424409);\n\n      _stageDomElement.off().empty().html(html);\n\n      $(':input', _stageDomElement).prop('disabled', 'disabled').on('click dblclick select focus keydown keypress keyup mousedown mouseup', function(e) {\n        return e.preventDefault();\n      });\n\n      $('form', _stageDomElement).submit(function(e) {\n        return e.preventDefault();\n      });\n\n      getAllFormElementDomElements().each(function(i, element) {\n        var formElement, metaLabel;\n\n        formElement = getFormEditorApp()\n          .getFormElementByIdentifierPath($(this).data('elementIdentifierPath'));\n\n        if (\n          !getFormElementDefinition(formElement, '_isTopLevelFormElement')\n          && getFormElementDefinition(formElement, '_isCompositeFormElement')\n        ) {\n          $(this).tooltip({\n            title: 'identifier: ' + formElement.get('identifier') + ' (type: ' + formElement.get('type') + ')',\n            placement: 'right'\n          });\n        } else if (\n          !getFormElementDefinition(formElement, '_isTopLevelFormElement')\n          && !getFormElementDefinition(formElement, '_isCompositeFormElement')\n        ) {\n          $(this).tooltip({\n            title: 'identifier: ' + formElement.get('identifier') + ' (type: ' + formElement.get('type') + ')',\n            placement: 'left'\n          });\n        }\n\n        if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n          $(this).addClass(getHelper().getDomElementClassName('formElementIsTopLevel'));\n        }\n        if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n          $(this).addClass(getHelper().getDomElementClassName('formElementIsComposit'));\n        }\n      });\n\n    };\n\n    /* *************************************************************\n     * Template rendering\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param template\n     * @param function\n     * @return void\n     */\n    function eachTemplateProperty(formElement, template, callback) {\n      $(getHelper().getDomElementDataAttribute('templateProperty', 'bracesWithKey'), template).each(function(i, element) {\n        var propertyPath, propertyValue;\n\n        propertyPath = $(element).attr(getHelper().getDomElementDataAttribute('templateProperty'));\n        propertyValue = formElement.get(propertyPath);\n\n        if ('function' === $.type(callback)) {\n          callback(propertyPath, propertyValue, element);\n        }\n      });\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderCheckboxTemplate(formElement, template) {\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      eachTemplateProperty(formElement, template, function(propertyPath, propertyValue, domElement) {\n        if (\n          ('boolean' === $.type(propertyValue) && propertyValue)\n          || propertyValue === 'true'\n          || propertyValue === 1\n          || propertyValue === \"1\"\n        ) {\n          $(domElement).addClass(getHelper().getDomElementClassName('noNesting'));\n        }\n      });\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     * @throws 1479035696\n     */\n    function renderSimpleTemplate(formElement, template) {\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035696);\n\n      eachTemplateProperty(formElement, template, function(propertyPath, propertyValue, domElement) {\n        _setTemplateTextContent(domElement, propertyValue);\n      });\n\n      Icons.getIcon(\n        getFormElementDefinition(formElement, 'iconIdentifier'),\n        Icons.sizes.small,\n        null,\n        Icons.states.default,\n        Icons.markupIdentifiers.inline\n      ).then(function(icon) {\n        $(getHelper().getDomElementDataIdentifierSelector('formElementIcon'), template)\n          .append($(icon).addClass(getHelper().getDomElementClassName('icon')));\n      });\n\n      getHelper()\n        .getTemplatePropertyDomElement('_type', template)\n        .append(getFormElementDefinition(formElement, 'label'));\n      getHelper()\n        .getTemplatePropertyDomElement('_identifier', template)\n        .append(formElement.get('identifier'));\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     * @throws 1479035674\n     */\n    function renderSimpleTemplateWithValidators(formElement, template) {\n      var validators, validatorsCountWithoutRequired, validatorsTemplateContent;\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035674);\n\n      renderSimpleTemplate(formElement, template);\n\n      validatorsTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('validatorsContainer'),\n        $(template)\n      ).clone();\n\n      $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template)).empty();\n      validators = formElement.get('validators');\n\n      if ('array' === $.type(validators)) {\n        validatorsCountWithoutRequired = 0;\n        if (validators.length > 0) {\n          for (var i = 0, len = validators.length; i < len; ++i) {\n            var collectionElementConfiguration, rowTemplate;\n\n            if ('NotEmpty' === validators[i]['identifier']) {\n              getHelper()\n                .getTemplatePropertyDomElement('_required', template)\n                .text('*');\n              continue;\n            }\n            validatorsCountWithoutRequired++;\n\n            collectionElementConfiguration = getFormEditorApp()\n              .getFormEditorDefinition('validators', validators[i]['identifier']);\n            rowTemplate = $($(validatorsTemplateContent).clone());\n\n            getHelper()\n              .getTemplatePropertyDomElement('_label', rowTemplate)\n              .append(collectionElementConfiguration['label']);\n            $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))\n              .append(rowTemplate.html());\n          }\n\n          if (validatorsCountWithoutRequired > 0) {\n            Icons.getIcon(\n              getHelper().getDomElementDataAttributeValue('iconValidator'),\n              Icons.sizes.small,\n              null,\n              Icons.states.default,\n              Icons.markupIdentifiers.inline\n            ).then(function(icon) {\n              $(getHelper().getDomElementDataIdentifierSelector('validatorIcon'), $(template))\n                .append($(icon).addClass(getHelper().getDomElementClassName('icon')));\n            });\n          }\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderSelectTemplates(formElement, template) {\n      var appendMultiValue, defaultValue, multiValueTemplateContent, propertyPath, propertyValue;\n\n      multiValueTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('multiValueContainer'),\n        $(template)\n      ).clone();\n      $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template)).empty();\n\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      propertyPath = $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n        .attr(getHelper().getDomElementDataAttribute('templateProperty'));\n\n      propertyValue = formElement.get(propertyPath);\n\n      appendMultiValue = function(label, value, defaultValue) {\n        var isPreselected, rowTemplate;\n\n        isPreselected = false;\n        rowTemplate = $($(multiValueTemplateContent).clone());\n\n        for (var defaultValueKey in defaultValue) {\n          if (!defaultValue.hasOwnProperty(defaultValueKey)) {\n            continue;\n          }\n          if (defaultValue[defaultValueKey] === value) {\n            isPreselected = true;\n            break;\n          }\n        }\n\n        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(label);\n\n        if (isPreselected) {\n          getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(\n            getHelper().getDomElementClassName('selected')\n          );\n        }\n\n        $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n          .append(rowTemplate.html());\n      };\n\n      defaultValue = formElement.get('defaultValue');\n\n      if (getFormEditorApp().getUtility().isUndefinedOrNull(defaultValue)) {\n        defaultValue = {};\n      } else if ('string' === $.type(defaultValue)) {\n        defaultValue = {0: defaultValue};\n      }\n\n      if ('object' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          appendMultiValue(propertyValue[propertyValueKey], propertyValueKey, defaultValue);\n        }\n      } else if ('array' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          if (getUtility().isUndefinedOrNull(propertyValue[propertyValueKey]['_label'])) {\n            appendMultiValue(propertyValue[propertyValueKey], propertyValueKey, defaultValue);\n          } else {\n            appendMultiValue(propertyValue[propertyValueKey]['_label'], propertyValue[propertyValueKey]['_value'], defaultValue);\n          }\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderFileUploadTemplates(formElement, template) {\n      var appendMultiValue, multiValueTemplateContent, propertyPath, propertyValue;\n\n      multiValueTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('multiValueContainer'),\n        $(template)\n      ).clone();\n      $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template)).empty();\n\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      propertyPath = $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n        .attr(getHelper().getDomElementDataAttribute('templateProperty'));\n      propertyValue = formElement.get(propertyPath);\n\n      appendMultiValue = function(value) {\n        var rowTemplate;\n\n        rowTemplate = $($(multiValueTemplateContent).clone());\n\n        getHelper().getTemplatePropertyDomElement('_value', rowTemplate).append(value);\n        $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n          .append(rowTemplate.html());\n      };\n\n      if ('object' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          appendMultiValue(propertyValue[propertyValueKey]);\n        }\n      } else if ('array' === $.type(propertyValue)) {\n        for (var i = 0, len = propertyValue.length; i < len; ++i) {\n          appendMultiValue(propertyValue[i]);\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param object\n     * @param object\n     * @return this\n     * @throws 1478992119\n     */\n    function bootstrap(formEditorApp, appendToDomElement, configuration) {\n      _formEditorApp = formEditorApp;\n      assert('object' === $.type(appendToDomElement), 'Invalid parameter \"appendToDomElement\"', 1478992119);\n\n      _stageDomElement = $(appendToDomElement);\n      _configuration = $.extend(true, _defaultConfiguration, configuration || {});\n      _helperSetup();\n      return this;\n    };\n\n    /**\n     * Publish the public methods.\n     * Implements the \"Revealing Module Pattern\".\n     */\n    return {\n      bootstrap: bootstrap,\n      buildTitleByFormElement: buildTitleByFormElement,\n      createAndAddAbstractViewFormElementToolbar: createAndAddAbstractViewFormElementToolbar,\n      createAbstractViewFormElementToolbar: createAbstractViewFormElementToolbar,\n      eachTemplateProperty: eachTemplateProperty,\n      getAbstractViewFormElementDomElement: getAbstractViewFormElementDomElement,\n      getAbstractViewFormElementWithinDomElement: getAbstractViewFormElementWithinDomElement,\n      getAbstractViewFormElementIdentifierPathWithinDomElement: getAbstractViewFormElementIdentifierPathWithinDomElement,\n      getAbstractViewParentFormElementWithinDomElement: getAbstractViewParentFormElementWithinDomElement,\n      getAbstractViewParentFormElementIdentifierPathWithinDomElement: getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n      getAbstractViewSiblingFormElementIdentifierPathWithinDomElement: getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n      getAllFormElementDomElements: getAllFormElementDomElements,\n      getStageDomElement: getStageDomElement,\n      getStagePanelDomElement: getStagePanelDomElement,\n      removeAllStageToolbars: removeAllStageToolbars,\n      renderAbstractStageArea: renderAbstractStageArea,\n      renderCheckboxTemplate: renderCheckboxTemplate,\n      renderFileUploadTemplates: renderFileUploadTemplates,\n      renderFormDefinitionPageAsSortableList: renderFormDefinitionPageAsSortableList,\n      renderPagination: renderPagination,\n      renderPreviewStageArea: renderPreviewStageArea,\n      renderSelectTemplates: renderSelectTemplates,\n      renderSimpleTemplate: renderSimpleTemplate,\n      renderSimpleTemplateWithValidators: renderSimpleTemplateWithValidators,\n      renderUndoRedo: renderUndoRedo,\n      setStageHeadline: setStageHeadline\n    };\n  })($, Helper, Icons);\n}\n"], "fixing_code": ["/*\n * This file is part of the TYPO3 CMS project.\n *\n * It is free software; you can redistribute it and/or modify it under\n * the terms of the GNU General Public License, either version 2\n * of the License, or any later version.\n *\n * For the full copyright and license information, please read the\n * LICENSE.txt file that was distributed with this source code.\n *\n * The TYPO3 project - inspiring people to share!\n */\n\n/**\n * Module: @typo3/form/backend/form-editor/stage-component\n */\nimport $ from 'jquery';\nimport * as Helper from '@typo3/form/backend/form-editor/helper.js';\nimport Icons from '@typo3/backend/icons.js';\nimport '@typo3/form/backend/contrib/jquery.mjs.nested-sortable.js';\n\nconst {\n  bootstrap,\n  buildTitleByFormElement,\n  createAndAddAbstractViewFormElementToolbar,\n  createAbstractViewFormElementToolbar,\n  eachTemplateProperty,\n  getAbstractViewFormElementDomElement,\n  getAbstractViewFormElementWithinDomElement,\n  getAbstractViewFormElementIdentifierPathWithinDomElement,\n  getAbstractViewParentFormElementWithinDomElement,\n  getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n  getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n  getAllFormElementDomElements,\n  getStageDomElement,\n  getStagePanelDomElement,\n  removeAllStageToolbars,\n  renderAbstractStageArea,\n  renderCheckboxTemplate,\n  renderFileUploadTemplates,\n  renderFormDefinitionPageAsSortableList,\n  renderPagination,\n  renderPreviewStageArea,\n  renderSelectTemplates,\n  renderSimpleTemplate,\n  renderSimpleTemplateWithValidators,\n  renderUndoRedo,\n  setStageHeadline,\n} = factory($, Helper, Icons);\n\nexport {\n  bootstrap,\n  buildTitleByFormElement,\n  createAndAddAbstractViewFormElementToolbar,\n  createAbstractViewFormElementToolbar,\n  eachTemplateProperty,\n  getAbstractViewFormElementDomElement,\n  getAbstractViewFormElementWithinDomElement,\n  getAbstractViewFormElementIdentifierPathWithinDomElement,\n  getAbstractViewParentFormElementWithinDomElement,\n  getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n  getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n  getAllFormElementDomElements,\n  getStageDomElement,\n  getStagePanelDomElement,\n  removeAllStageToolbars,\n  renderAbstractStageArea,\n  renderCheckboxTemplate,\n  renderFileUploadTemplates,\n  renderFormDefinitionPageAsSortableList,\n  renderPagination,\n  renderPreviewStageArea,\n  renderSelectTemplates,\n  renderSimpleTemplate,\n  renderSimpleTemplateWithValidators,\n  renderUndoRedo,\n  setStageHeadline,\n};\n\n\nfunction factory($, Helper, Icons) {\n  return (function($, Helper, Icons) {\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _configuration = null;\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _defaultConfiguration = {\n      domElementClassNames: {\n        formElementIsComposit: 't3-form-element-composit',\n        formElementIsTopLevel: 't3-form-element-toplevel',\n        noNesting: 'mjs-nestedSortable-no-nesting',\n        selected: 'selected',\n        sortable: 'sortable',\n        previewViewPreviewElement: 't3-form-element-preview'\n      },\n      domElementDataAttributeNames: {\n        abstractType: 'data-element-abstract-type',\n        noSorting: 'data-no-sorting'\n      },\n      domElementDataAttributeValues: {\n        abstractViewToolbar: 'elementToolbar',\n        abstractViewToolbarNewElement: 'stageElementToolbarNewElement',\n        abstractViewToolbarNewElementSplitButton: 'stageElementToolbarNewElementSplitButton',\n        abstractViewToolbarNewElementSplitButtonAfter: 'stageElementToolbarNewElementSplitButtonAfter',\n        abstractViewToolbarNewElementSplitButtonInside: 'stageElementToolbarNewElementSplitButtonInside',\n        abstractViewToolbarRemoveElement: 'stageElementToolbarRemoveElement',\n        buttonHeaderRedo: 'redoButton',\n        buttonHeaderUndo: 'undoButton',\n        buttonPaginationPrevious: 'buttonPaginationPrevious',\n        buttonPaginationNext: 'buttonPaginationNext',\n        'FormElement-_ElementToolbar': 'FormElement-_ElementToolbar',\n        'FormElement-_UnknownElement': 'FormElement-_UnknownElement',\n        'FormElement-AdvancedPassword': 'FormElement-AdvancedPassword',\n        'FormElement-Checkbox': 'FormElement-Checkbox',\n        'FormElement-ContentElement': 'FormElement-ContentElement',\n        'FormElement-DatePicker': 'FormElement-DatePicker',\n        'FormElement-Fieldset': 'FormElement-Fieldset',\n        'FormElement-GridRow': 'FormElement-GridRow',\n        'FormElement-FileUpload': 'FormElement-FileUpload',\n        'FormElement-Hidden': 'FormElement-Hidden',\n        'FormElement-ImageUpload': 'FormElement-ImageUpload',\n        'FormElement-MultiCheckbox': 'FormElement-MultiCheckbox',\n        'FormElement-MultiSelect': 'FormElement-MultiSelect',\n        'FormElement-Page': 'FormElement-Page',\n        'FormElement-Password': 'FormElement-Password',\n        'FormElement-RadioButton': 'FormElement-RadioButton',\n        'FormElement-SingleSelect': 'FormElement-SingleSelect',\n        'FormElement-StaticText': 'FormElement-StaticText',\n        'FormElement-SummaryPage': 'FormElement-SummaryPage',\n        'FormElement-Text': 'FormElement-Text',\n        'FormElement-Textarea': 'FormElement-Textarea',\n        'FormElement-Email': 'FormElement-Email',\n        'FormElement-Url': 'FormElement-Url',\n        'FormElement-Telephone': 'FormElement-Telephone',\n        'FormElement-Number': 'FormElement-Number',\n        'FormElement-Date': 'FormElement-Date',\n        formElementIcon: 'elementIcon',\n        iconValidator: 'form-validator',\n        multiValueContainer: 'multiValueContainer',\n        paginationTitle: 'paginationTitle',\n        stageHeadline: 'formDefinitionLabel',\n        stagePanel: 'stagePanel',\n        validatorsContainer: 'validatorsContainer',\n        validatorIcon: 'validatorIcon'\n      },\n      isSortable: true\n    };\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _formEditorApp = null;\n\n    /**\n     * @private\n     *\n     * @var object\n     */\n    var _stageDomElement = null;\n\n    /* *************************************************************\n     * Private Methods\n     * ************************************************************/\n\n    /**\n     * @private\n     *\n     * @return void\n     * @throws 1478268638\n     */\n    function _helperSetup() {\n      assert('function' === $.type(Helper.bootstrap),\n        'The view model helper does not implement the method \"bootstrap\"',\n        1478268638\n      );\n      Helper.bootstrap(getFormEditorApp());\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getFormEditorApp() {\n      return _formEditorApp;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     */\n    function getHelper(configuration) {\n      if (getUtility().isUndefinedOrNull(configuration)) {\n        return Helper.setConfiguration(_configuration);\n      }\n      return Helper.setConfiguration(configuration);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getUtility() {\n      return getFormEditorApp().getUtility();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getViewModel() {\n      return getFormEditorApp().getViewModel();\n    };\n\n    /**\n     * @private\n     *\n     * @param mixed test\n     * @param string message\n     * @param int messageCode\n     * @return void\n     */\n    function assert(test, message, messageCode) {\n      return getFormEditorApp().assert(test, message, messageCode);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getRootFormElement() {\n      return getFormEditorApp().getRootFormElement();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getCurrentlySelectedFormElement() {\n      return getFormEditorApp().getCurrentlySelectedFormElement();\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     */\n    function getPublisherSubscriber() {\n      return getFormEditorApp().getPublisherSubscriber();\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param string\n     * @return mixed\n     */\n    function getFormElementDefinition(formElement, formElementDefinitionKey) {\n      return getFormEditorApp().getFormElementDefinition(formElement, formElementDefinitionKey);\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     * @return string\n     * @return void\n     */\n    function _setTemplateTextContent(domElement, content) {\n      if (getUtility().isNonEmptyString(content)) {\n        $(domElement).text(content);\n      }\n    }\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param object\n     * @return void\n     * @publish view/stage/abstract/render/template/perform\n     */\n    function _renderTemplateDispatcher(formElement, template) {\n      switch (formElement.get('type')) {\n        case 'Checkbox':\n          renderCheckboxTemplate(formElement, template);\n          break;\n        case 'FileUpload':\n        case 'ImageUpload':\n          renderFileUploadTemplates(formElement, template);\n          break;\n        case 'SingleSelect':\n        case 'RadioButton':\n        case 'MultiSelect':\n        case 'MultiCheckbox':\n          renderSelectTemplates(formElement, template);\n          break;\n        case 'Textarea':\n        case 'AdvancedPassword':\n        case 'Password':\n        case 'Text':\n        case 'Email':\n        case 'Url':\n        case 'Telephone':\n        case 'Number':\n        case 'DatePicker':\n        case 'Date':\n          renderSimpleTemplateWithValidators(formElement, template);\n          break;\n        case 'Fieldset':\n        case 'GridRow':\n        case 'SummaryPage':\n        case 'Page':\n        case 'StaticText':\n        case 'Hidden':\n        case 'ContentElement':\n          renderSimpleTemplate(formElement, template);\n          break;\n      }\n      getPublisherSubscriber().publish('view/stage/abstract/render/template/perform', [formElement, template]);\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @return object\n     * @throws 1478987818\n     */\n    function _renderNestedSortableListItem(formElement) {\n      var childFormElements, childList, listItem, template;\n\n      listItem = $('<li></li>');\n      if (!getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('noNesting'));\n      }\n\n      if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('formElementIsTopLevel'));\n      }\n      if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        listItem.addClass(getHelper().getDomElementClassName('formElementIsComposit'));\n      }\n\n      try {\n        template = getHelper().getTemplate('FormElement-' + formElement.get('type')).clone();\n      } catch (error) {\n        template = getHelper().getTemplate('FormElement-_UnknownElement').clone();\n        assert(\n          template.length,\n          'No template found for element \"' + formElement.get('__identifierPath') + '\"',\n          1478987818\n        );\n      }\n\n      template = $('<div></div>')\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'), formElement.get('__identifierPath'))\n        .append($(template.html()));\n\n      if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n        template.attr(getHelper().getDomElementDataAttribute('abstractType'), 'isCompositeFormElement');\n      }\n      if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n        template.attr(getHelper().getDomElementDataAttribute('abstractType'), 'isTopLevelFormElement');\n      }\n      listItem.append(template);\n\n      _renderTemplateDispatcher(formElement, template);\n\n      childFormElements = formElement.get('renderables');\n      childList = null;\n      if ('array' === $.type(childFormElements)) {\n        childList = $('<ol></ol>');\n        if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n          childList.addClass(getHelper().getDomElementClassName('sortable'));\n        }\n        for (var i = 0, len = childFormElements.length; i < len; ++i) {\n          childList.append(_renderNestedSortableListItem(childFormElements[i]));\n        }\n      }\n\n      if (childList) {\n        listItem.append(childList);\n      }\n      return listItem;\n    };\n\n    /**\n     * @private\n     *\n     * @return void\n     * @publish view/stage/abstract/dnd/start\n     * @publish view/stage/abstract/dnd/stop\n     * @publish view/stage/abstract/dnd/change\n     * @publish view/stage/abstract/dnd/update\n     */\n    function _addSortableEvents() {\n      $('ol.' + getHelper().getDomElementClassName('sortable'), _stageDomElement).nestedSortable({\n        forcePlaceholderSize: true,\n        handle: 'div' + getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'),\n        helper: 'clone',\n        items: 'li:not(' + getHelper().getDomElementDataAttribute('noSorting', 'bracesWithKey') + ')',\n        opacity: .6,\n        revert: 250,\n        delay: 200,\n        tolerance: 'pointer',\n        toleranceElement: '> div',\n\n        isAllowed: function(placeholder, placeholderParent, currentItem) {\n          var formElementIdentifierPath, formElementTypeDefinition, targetFormElementIdentifierPath,\n            targetFormElementTypeDefinition;\n\n          formElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(currentItem));\n          targetFormElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(placeholderParent));\n          if (!targetFormElementIdentifierPath) {\n            targetFormElementIdentifierPath = getFormEditorApp().getCurrentlySelectedPage();\n          }\n\n          return true;\n        },\n        start: function(e, o) {\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/start', [$(o.item), $(o.placeholder)]);\n        },\n        stop: function(e, o) {\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/stop', [\n            getAbstractViewFormElementIdentifierPathWithinDomElement($(o.item))\n          ]);\n        },\n        change: function(e, o) {\n          var enclosingCompositeFormElement, parentFormElementIdentifierPath;\n\n          parentFormElementIdentifierPath = getAbstractViewParentFormElementIdentifierPathWithinDomElement($(o.placeholder));\n          if (parentFormElementIdentifierPath) {\n            enclosingCompositeFormElement = getFormEditorApp()\n              .findEnclosingCompositeFormElementWhichIsNotOnTopLevel(parentFormElementIdentifierPath);\n          }\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/change', [\n            $(o.placeholder),\n            parentFormElementIdentifierPath, enclosingCompositeFormElement\n          ]);\n        },\n        update: function(e, o) {\n          var nextFormElementIdentifierPath, movedFormElement, movedFormElementIdentifierPath,\n            parentFormElementIdentifierPath, previousFormElementIdentifierPath;\n\n          movedFormElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement($(o.item));\n          previousFormElementIdentifierPath = getAbstractViewSiblingFormElementIdentifierPathWithinDomElement($(o.item), 'prev');\n          nextFormElementIdentifierPath = getAbstractViewSiblingFormElementIdentifierPathWithinDomElement($(o.item), 'next');\n\n          getPublisherSubscriber().publish('view/stage/abstract/dnd/update', [\n            $(o.item),\n            movedFormElementIdentifierPath,\n            previousFormElementIdentifierPath,\n            nextFormElementIdentifierPath\n          ]);\n        }\n      });\n    };\n\n    /* *************************************************************\n     * Public Methods\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @return object\n     */\n    function getStageDomElement() {\n      return _stageDomElement;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     * @throws 1479037151\n     */\n    function buildTitleByFormElement(formElement) {\n      if (getUtility().isUndefinedOrNull(formElement)) {\n        formElement = getRootFormElement();\n      }\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479037151);\n\n      return $('<span></span>')\n        .text((formElement.get('label') ? formElement.get('label') : formElement.get('identifier')));\n    };\n\n    /**\n     * @public\n     *\n     * @param string title\n     * @return void\n     */\n    function setStageHeadline(title) {\n      if (getUtility().isUndefinedOrNull(title)) {\n        title = buildTitleByFormElement().text();\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('stageHeadline')).text(title);\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     */\n    function getStagePanelDomElement() {\n      return $(getHelper().getDomElementDataIdentifierSelector('stagePanel'));\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function renderPagination() {\n      var pageCount;\n\n      pageCount = getRootFormElement().get('renderables').length;\n\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationPrevious')));\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationNext')));\n\n      if (getFormEditorApp().getCurrentlySelectedPageIndex() === 0) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationPrevious')));\n      }\n\n      if (pageCount === 1 || getFormEditorApp().getCurrentlySelectedPageIndex() === (pageCount - 1)) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonPaginationNext')));\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('paginationTitle')).text(\n        getFormElementDefinition(getRootFormElement(), 'paginationTitle')\n          .replace('{0}', getFormEditorApp().getCurrentlySelectedPageIndex() + 1)\n          .replace('{1}', pageCount)\n      );\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function renderUndoRedo() {\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderUndo')));\n      getViewModel().enableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderRedo')));\n\n      if (getFormEditorApp().getCurrentApplicationStatePosition() + 1 >= getFormEditorApp().getCurrentApplicationStates()) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderUndo')));\n      }\n      if (getFormEditorApp().getCurrentApplicationStatePosition() === 0) {\n        getViewModel().disableButton($(getHelper().getDomElementDataIdentifierSelector('buttonHeaderRedo')));\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAllFormElementDomElements() {\n      return $(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'),\n        _stageDomElement\n      );\n    };\n\n    /* *************************************************************\n     * Abstract stage\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param int\n     * @return object\n     * @throws 1478721208\n     */\n    function renderFormDefinitionPageAsSortableList(pageIndex) {\n      assert(\n        'number' === $.type(pageIndex),\n        'Invalid parameter \"pageIndex\"',\n        1478721208\n      );\n\n      return $('<ol></ol>')\n        .append(_renderNestedSortableListItem(getRootFormElement().get('renderables')[pageIndex]));\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewParentFormElementWithinDomElement(element) {\n      return $(element)\n        .parent()\n        .closest('li')\n        .find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .first();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewParentFormElementIdentifierPathWithinDomElement(element) {\n      return getAbstractViewParentFormElementWithinDomElement(element)\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewFormElementWithinDomElement(element) {\n      return $(element)\n        .find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .first();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return string\n     */\n    function getAbstractViewFormElementIdentifierPathWithinDomElement(element) {\n      return getAbstractViewFormElementWithinDomElement($(element))\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @private\n     *\n     * @param object\n     * @param string\n     * @return string\n     */\n    function getAbstractViewSiblingFormElementIdentifierPathWithinDomElement(element, position) {\n      var formElementIdentifierPath;\n\n      if (getUtility().isUndefinedOrNull(position)) {\n        position = 'prev';\n      }\n      formElementIdentifierPath = getAbstractViewFormElementIdentifierPathWithinDomElement(element);\n      element = (position === 'prev') ? $(element).prev('li') : $(element).next('li');\n      return element.find(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n        .not(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKeyValue', [formElementIdentifierPath]))\n        .first()\n        .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n    };\n\n    /**\n     * @public\n     *\n     * @param string|object\n     * @return object\n     */\n    function getAbstractViewFormElementDomElement(formElement) {\n      var formElementIdentifierPath;\n\n      if ('string' === $.type(formElement)) {\n        formElementIdentifierPath = formElement;\n      } else {\n        if (getUtility().isUndefinedOrNull(formElement)) {\n          formElementIdentifierPath = getCurrentlySelectedFormElement().get('__identifierPath');\n        } else {\n          formElementIdentifierPath = formElement.get('__identifierPath');\n        }\n      }\n      return $(getHelper()\n        .getDomElementDataAttribute('elementIdentifier', 'bracesWithKeyValue', [formElementIdentifierPath]), _stageDomElement);\n    };\n\n    /**\n     * @public\n     *\n     * @return void\n     */\n    function removeAllStageToolbars() {\n      $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbar'), _stageDomElement).off().empty().remove();\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @return object\n     * @publish view/insertElements/perform/after\n     * @publish view/insertElements/perform/inside\n     * @throws 1479035778\n     */\n    function createAbstractViewFormElementToolbar(formElement) {\n      var formElementTypeDefinition, template;\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035778);\n\n      formElementTypeDefinition = getFormElementDefinition(formElement);\n      if (formElementTypeDefinition['_isTopLevelFormElement']) {\n        return $();\n      }\n\n      template = getHelper().getTemplate('FormElement-_ElementToolbar').clone();\n      if (!template.length) {\n        return $();\n      }\n\n      template = $($(template.html()));\n\n      getHelper().getTemplatePropertyDomElement('_type', template).text(getFormElementDefinition(formElement, 'label'));\n      getHelper().getTemplatePropertyDomElement('_identifier', template).text(formElement.get('identifier'));\n\n      if (formElementTypeDefinition['_isCompositeFormElement']) {\n        getViewModel().hideComponent($(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElement'), template));\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButtonAfter'), template).on('click', function(e) {\n          getPublisherSubscriber().publish('view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/after',\n              {\n                disableElementTypes: [],\n                onlyEnableElementTypes: []\n              }\n            ]\n          );\n        });\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButtonInside'), template).on('click', function(e) {\n          getPublisherSubscriber().publish('view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/inside',\n              {\n                disableElementTypes: [],\n                onlyEnableElementTypes: []\n              }\n            ]\n          );\n        });\n      } else {\n        getViewModel().hideComponent($(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElementSplitButton'), template));\n\n        $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarNewElement'), template).on('click', function(e) {\n          getPublisherSubscriber().publish(\n            'view/stage/abstract/elementToolbar/button/newElement/clicked', [\n              'view/insertElements/perform/after',\n              {\n                disableElementTypes: []\n              }\n            ]\n          );\n        });\n      }\n\n      $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbarRemoveElement'), template).on('click', function(e) {\n        getViewModel().showRemoveFormElementModal();\n      });\n\n      return template;\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param object\n     * @param bool\n     * @return void\n     */\n    function createAndAddAbstractViewFormElementToolbar(selectedFormElementDomElement, formElement, useFadeEffect) {\n      var toolbar;\n      if (getUtility().isUndefinedOrNull(formElement)) {\n        formElement = getCurrentlySelectedFormElement();\n      }\n\n      if (useFadeEffect) {\n        createAbstractViewFormElementToolbar(formElement).fadeOut(0, function() {\n          selectedFormElementDomElement.prepend($(this));\n          $(getHelper().getDomElementDataIdentifierSelector('abstractViewToolbar'), selectedFormElementDomElement).fadeIn('fast');\n        });\n      } else {\n        selectedFormElementDomElement.prepend(createAbstractViewFormElementToolbar(formElement));\n      }\n\n    };\n\n    /**\n     * @public\n     *\n     * @param int\n     * @param function\n     * @return void\n     * @publish view/stage/dnd/stop\n     * @publish view/stage/element/clicked\n     * @throws 1478169511\n     */\n    function renderAbstractStageArea(pageIndex, callback) {\n      if (getUtility().isUndefinedOrNull(pageIndex)) {\n        pageIndex = getFormEditorApp().getCurrentlySelectedPageIndex();\n      }\n      _stageDomElement.off().empty().append(renderFormDefinitionPageAsSortableList(pageIndex));\n\n      _stageDomElement.on(\"click\", function(e) {\n        var formElementIdentifierPath;\n\n        formElementIdentifierPath = $(e.target)\n          .closest(getHelper().getDomElementDataAttribute('elementIdentifier', 'bracesWithKey'))\n          .attr(getHelper().getDomElementDataAttribute('elementIdentifier'));\n        if (\n          getUtility().isUndefinedOrNull(formElementIdentifierPath)\n          || !getUtility().isNonEmptyString(formElementIdentifierPath)\n        ) {\n          return;\n        }\n\n        getPublisherSubscriber().publish('view/stage/element/clicked', [formElementIdentifierPath]);\n      });\n\n      if (_configuration['isSortable']) {\n        _addSortableEvents();\n      }\n\n      if ('function' === $.type(callback)) {\n        callback();\n      }\n    };\n\n\n    /* *************************************************************\n     * Preview stage\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param string html\n     * @return void\n     * @throws 1475424409\n     */\n    function renderPreviewStageArea(html) {\n      assert(getUtility().isNonEmptyString(html), 'Invalid parameter \"html\"', 1475424409);\n\n      _stageDomElement.off().empty().html(html);\n\n      $(':input', _stageDomElement).prop('disabled', 'disabled').on('click dblclick select focus keydown keypress keyup mousedown mouseup', function(e) {\n        return e.preventDefault();\n      });\n\n      $('form', _stageDomElement).submit(function(e) {\n        return e.preventDefault();\n      });\n\n      getAllFormElementDomElements().each(function(i, element) {\n        var formElement, metaLabel;\n\n        formElement = getFormEditorApp()\n          .getFormElementByIdentifierPath($(this).data('elementIdentifierPath'));\n\n        if (\n          !getFormElementDefinition(formElement, '_isTopLevelFormElement')\n          && getFormElementDefinition(formElement, '_isCompositeFormElement')\n        ) {\n          $(this).tooltip({\n            title: 'identifier: ' + formElement.get('identifier') + ' (type: ' + formElement.get('type') + ')',\n            placement: 'right'\n          });\n        } else if (\n          !getFormElementDefinition(formElement, '_isTopLevelFormElement')\n          && !getFormElementDefinition(formElement, '_isCompositeFormElement')\n        ) {\n          $(this).tooltip({\n            title: 'identifier: ' + formElement.get('identifier') + ' (type: ' + formElement.get('type') + ')',\n            placement: 'left'\n          });\n        }\n\n        if (getFormElementDefinition(formElement, '_isTopLevelFormElement')) {\n          $(this).addClass(getHelper().getDomElementClassName('formElementIsTopLevel'));\n        }\n        if (getFormElementDefinition(formElement, '_isCompositeFormElement')) {\n          $(this).addClass(getHelper().getDomElementClassName('formElementIsComposit'));\n        }\n      });\n\n    };\n\n    /* *************************************************************\n     * Template rendering\n     * ************************************************************/\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param template\n     * @param function\n     * @return void\n     */\n    function eachTemplateProperty(formElement, template, callback) {\n      $(getHelper().getDomElementDataAttribute('templateProperty', 'bracesWithKey'), template).each(function(i, element) {\n        var propertyPath, propertyValue;\n\n        propertyPath = $(element).attr(getHelper().getDomElementDataAttribute('templateProperty'));\n        propertyValue = formElement.get(propertyPath);\n\n        if ('function' === $.type(callback)) {\n          callback(propertyPath, propertyValue, element);\n        }\n      });\n    };\n\n    /**\n     * @private\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderCheckboxTemplate(formElement, template) {\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      eachTemplateProperty(formElement, template, function(propertyPath, propertyValue, domElement) {\n        if (\n          ('boolean' === $.type(propertyValue) && propertyValue)\n          || propertyValue === 'true'\n          || propertyValue === 1\n          || propertyValue === \"1\"\n        ) {\n          $(domElement).addClass(getHelper().getDomElementClassName('noNesting'));\n        }\n      });\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     * @throws 1479035696\n     */\n    function renderSimpleTemplate(formElement, template) {\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035696);\n\n      eachTemplateProperty(formElement, template, function(propertyPath, propertyValue, domElement) {\n        _setTemplateTextContent(domElement, propertyValue);\n      });\n\n      Icons.getIcon(\n        getFormElementDefinition(formElement, 'iconIdentifier'),\n        Icons.sizes.small,\n        null,\n        Icons.states.default,\n        Icons.markupIdentifiers.inline\n      ).then(function(icon) {\n        $(getHelper().getDomElementDataIdentifierSelector('formElementIcon'), template)\n          .append($(icon).addClass(getHelper().getDomElementClassName('icon')));\n      });\n\n      getHelper()\n        .getTemplatePropertyDomElement('_type', template)\n        .append(document.createTextNode(getFormElementDefinition(formElement, 'label')));\n      getHelper()\n        .getTemplatePropertyDomElement('_identifier', template)\n        .append(document.createTextNode(formElement.get('identifier')));\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     * @throws 1479035674\n     */\n    function renderSimpleTemplateWithValidators(formElement, template) {\n      var validators, validatorsCountWithoutRequired, validatorsTemplateContent;\n      assert('object' === $.type(formElement), 'Invalid parameter \"formElement\"', 1479035674);\n\n      renderSimpleTemplate(formElement, template);\n\n      validatorsTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('validatorsContainer'),\n        $(template)\n      ).clone();\n\n      $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template)).empty();\n      validators = formElement.get('validators');\n\n      if ('array' === $.type(validators)) {\n        validatorsCountWithoutRequired = 0;\n        if (validators.length > 0) {\n          for (var i = 0, len = validators.length; i < len; ++i) {\n            var collectionElementConfiguration, rowTemplate;\n\n            if ('NotEmpty' === validators[i]['identifier']) {\n              getHelper()\n                .getTemplatePropertyDomElement('_required', template)\n                .text('*');\n              continue;\n            }\n            validatorsCountWithoutRequired++;\n\n            collectionElementConfiguration = getFormEditorApp()\n              .getFormEditorDefinition('validators', validators[i]['identifier']);\n            rowTemplate = $($(validatorsTemplateContent).clone());\n\n            getHelper()\n              .getTemplatePropertyDomElement('_label', rowTemplate)\n              .append(document.createTextNode(collectionElementConfiguration['label']));\n            $(getHelper().getDomElementDataIdentifierSelector('validatorsContainer'), $(template))\n              .append(rowTemplate.html());\n          }\n\n          if (validatorsCountWithoutRequired > 0) {\n            Icons.getIcon(\n              getHelper().getDomElementDataAttributeValue('iconValidator'),\n              Icons.sizes.small,\n              null,\n              Icons.states.default,\n              Icons.markupIdentifiers.inline\n            ).then(function(icon) {\n              $(getHelper().getDomElementDataIdentifierSelector('validatorIcon'), $(template))\n                .append($(icon).addClass(getHelper().getDomElementClassName('icon')));\n            });\n          }\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderSelectTemplates(formElement, template) {\n      var appendMultiValue, defaultValue, multiValueTemplateContent, propertyPath, propertyValue;\n\n      multiValueTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('multiValueContainer'),\n        $(template)\n      ).clone();\n      $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template)).empty();\n\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      propertyPath = $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n        .attr(getHelper().getDomElementDataAttribute('templateProperty'));\n\n      propertyValue = formElement.get(propertyPath);\n\n      appendMultiValue = function(label, value, defaultValue) {\n        var isPreselected, rowTemplate;\n\n        isPreselected = false;\n        rowTemplate = $($(multiValueTemplateContent).clone());\n\n        for (var defaultValueKey in defaultValue) {\n          if (!defaultValue.hasOwnProperty(defaultValueKey)) {\n            continue;\n          }\n          if (defaultValue[defaultValueKey] === value) {\n            isPreselected = true;\n            break;\n          }\n        }\n\n        getHelper().getTemplatePropertyDomElement('_label', rowTemplate).append(document.createTextNode(label));\n\n        if (isPreselected) {\n          getHelper().getTemplatePropertyDomElement('_label', rowTemplate).addClass(\n            getHelper().getDomElementClassName('selected')\n          );\n        }\n\n        $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n          .append(rowTemplate.html());\n      };\n\n      defaultValue = formElement.get('defaultValue');\n\n      if (getFormEditorApp().getUtility().isUndefinedOrNull(defaultValue)) {\n        defaultValue = {};\n      } else if ('string' === $.type(defaultValue)) {\n        defaultValue = {0: defaultValue};\n      }\n\n      if ('object' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          appendMultiValue(propertyValue[propertyValueKey], propertyValueKey, defaultValue);\n        }\n      } else if ('array' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          if (getUtility().isUndefinedOrNull(propertyValue[propertyValueKey]['_label'])) {\n            appendMultiValue(propertyValue[propertyValueKey], propertyValueKey, defaultValue);\n          } else {\n            appendMultiValue(propertyValue[propertyValueKey]['_label'], propertyValue[propertyValueKey]['_value'], defaultValue);\n          }\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @return object\n     * @return object\n     * @return void\n     */\n    function renderFileUploadTemplates(formElement, template) {\n      var appendMultiValue, multiValueTemplateContent, propertyPath, propertyValue;\n\n      multiValueTemplateContent = $(\n        getHelper().getDomElementDataIdentifierSelector('multiValueContainer'),\n        $(template)\n      ).clone();\n      $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template)).empty();\n\n      renderSimpleTemplateWithValidators(formElement, template);\n\n      propertyPath = $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n        .attr(getHelper().getDomElementDataAttribute('templateProperty'));\n      propertyValue = formElement.get(propertyPath);\n\n      appendMultiValue = function(value) {\n        var rowTemplate;\n\n        rowTemplate = $($(multiValueTemplateContent).clone());\n\n        getHelper().getTemplatePropertyDomElement('_value', rowTemplate).append(value);\n        $(getHelper().getDomElementDataIdentifierSelector('multiValueContainer'), $(template))\n          .append(rowTemplate.html());\n      };\n\n      if ('object' === $.type(propertyValue)) {\n        for (var propertyValueKey in propertyValue) {\n          if (!propertyValue.hasOwnProperty(propertyValueKey)) {\n            continue;\n          }\n          appendMultiValue(propertyValue[propertyValueKey]);\n        }\n      } else if ('array' === $.type(propertyValue)) {\n        for (var i = 0, len = propertyValue.length; i < len; ++i) {\n          appendMultiValue(propertyValue[i]);\n        }\n      }\n    };\n\n    /**\n     * @public\n     *\n     * @param object\n     * @param object\n     * @param object\n     * @return this\n     * @throws 1478992119\n     */\n    function bootstrap(formEditorApp, appendToDomElement, configuration) {\n      _formEditorApp = formEditorApp;\n      assert('object' === $.type(appendToDomElement), 'Invalid parameter \"appendToDomElement\"', 1478992119);\n\n      _stageDomElement = $(appendToDomElement);\n      _configuration = $.extend(true, _defaultConfiguration, configuration || {});\n      _helperSetup();\n      return this;\n    };\n\n    /**\n     * Publish the public methods.\n     * Implements the \"Revealing Module Pattern\".\n     */\n    return {\n      bootstrap: bootstrap,\n      buildTitleByFormElement: buildTitleByFormElement,\n      createAndAddAbstractViewFormElementToolbar: createAndAddAbstractViewFormElementToolbar,\n      createAbstractViewFormElementToolbar: createAbstractViewFormElementToolbar,\n      eachTemplateProperty: eachTemplateProperty,\n      getAbstractViewFormElementDomElement: getAbstractViewFormElementDomElement,\n      getAbstractViewFormElementWithinDomElement: getAbstractViewFormElementWithinDomElement,\n      getAbstractViewFormElementIdentifierPathWithinDomElement: getAbstractViewFormElementIdentifierPathWithinDomElement,\n      getAbstractViewParentFormElementWithinDomElement: getAbstractViewParentFormElementWithinDomElement,\n      getAbstractViewParentFormElementIdentifierPathWithinDomElement: getAbstractViewParentFormElementIdentifierPathWithinDomElement,\n      getAbstractViewSiblingFormElementIdentifierPathWithinDomElement: getAbstractViewSiblingFormElementIdentifierPathWithinDomElement,\n      getAllFormElementDomElements: getAllFormElementDomElements,\n      getStageDomElement: getStageDomElement,\n      getStagePanelDomElement: getStagePanelDomElement,\n      removeAllStageToolbars: removeAllStageToolbars,\n      renderAbstractStageArea: renderAbstractStageArea,\n      renderCheckboxTemplate: renderCheckboxTemplate,\n      renderFileUploadTemplates: renderFileUploadTemplates,\n      renderFormDefinitionPageAsSortableList: renderFormDefinitionPageAsSortableList,\n      renderPagination: renderPagination,\n      renderPreviewStageArea: renderPreviewStageArea,\n      renderSelectTemplates: renderSelectTemplates,\n      renderSimpleTemplate: renderSimpleTemplate,\n      renderSimpleTemplateWithValidators: renderSimpleTemplateWithValidators,\n      renderUndoRedo: renderUndoRedo,\n      setStageHeadline: setStageHeadline\n    };\n  })($, Helper, Icons);\n}\n"], "filenames": ["typo3/sysext/form/Resources/Public/JavaScript/backend/form-editor/stage-component.js"], "buggy_code_start_loc": [516], "buggy_code_end_loc": [1093], "fixing_code_start_loc": [516], "fixing_code_end_loc": [1093], "type": "CWE-79", "message": "TYPO3 is an open source web content management system. Prior to versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, the Form Designer backend module of the Form Framework is vulnerable to cross-site scripting. A valid backend user account with access to the form module is needed to exploit this vulnerability. TYPO3 versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11 contain a fix for the problem.", "other": {"cve": {"id": "CVE-2022-31048", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-14T21:15:16.120", "lastModified": "2022-06-23T13:16:16.360", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TYPO3 is an open source web content management system. Prior to versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11, the Form Designer backend module of the Form Framework is vulnerable to cross-site scripting. A valid backend user account with access to the form module is needed to exploit this vulnerability. TYPO3 versions 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29, and 11.5.11 contain a fix for the problem."}, {"lang": "es", "value": "TYPO3 es un sistema de administraci\u00f3n de contenidos web de c\u00f3digo abierto. En versiones anteriores a 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29 y 11.5.11, el m\u00f3dulo backend del Dise\u00f1ador de formularios de Form Framework es vulnerable a un ataque de tipo cross-site scripting. Es necesaria una cuenta de usuario backend v\u00e1lida con acceso al m\u00f3dulo de formularios para explotar esta vulnerabilidad. TYPO3 versiones 8.7.47 ELTS, 9.5.34 ELTS, 10.4.29 y 11.5.11, contienen una correci\u00f3n para el problema"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "8.0.0", "versionEndExcluding": "8.7.47", "matchCriteriaId": "CD542E1B-F3BA-4816-B97D-D877EFADA02D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:elts:*:*:*", "versionStartIncluding": "9.0.0", "versionEndExcluding": "9.5.35", "matchCriteriaId": "83732441-A020-4401-A274-067B95354BB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "10.0.0", "versionEndExcluding": "10.4.29", "matchCriteriaId": "272C6A8B-94DB-4A74-BB3A-24CD0486DFA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:typo3:typo3:*:*:*:*:*:*:*:*", "versionStartIncluding": "11.0.0", "versionEndExcluding": "11.5.11", "matchCriteriaId": "772D645D-5158-416C-BF2C-74E5E43EF1DC"}]}]}], "references": [{"url": "https://github.com/TYPO3/typo3/commit/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TYPO3/typo3/security/advisories/GHSA-3r95-23jp-mhvg", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://typo3.org/security/advisory/typo3-core-sa-2022-003", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/TYPO3/typo3/commit/6f2554dc4ea0b670fd5599c54fd788d4db96c4a0"}}