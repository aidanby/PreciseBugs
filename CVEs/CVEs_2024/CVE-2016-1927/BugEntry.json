{"buggy_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = [];\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the query editor in SQL tab\n */\nvar codemirror_editor = false;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the inline query editor\n */\nvar codemirror_inline_editor = false;\n\n/**\n * @var sql_autocomplete_in_progress bool shows if Table/Column name autocomplete AJAX is in progress\n */\nvar sql_autocomplete_in_progress = false;\n\n/**\n * @var sql_autocomplete object containing list of columns in each table\n */\nvar sql_autocomplete = false;\n\n/**\n * @var sql_autocomplete_default_table string containing default table to autocomplete columns\n */\nvar sql_autocomplete_default_table = '';\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = {};\n\n/**\n * @var central_column_list array to hold the columns in central list per db.\n */\nvar central_column_list = [];\n\n/**\n * @var primary_indexes array to hold 'Primary' index columns.\n */\nvar primary_indexes = [];\n\n/**\n * @var unique_indexes array to hold 'Unique' index columns.\n */\nvar unique_indexes = [];\n\n/**\n * @var indexes array to hold 'Index' columns.\n */\nvar indexes = [];\n\n/**\n * @var fulltext_indexes array to hold 'Fulltext' columns.\n */\nvar fulltext_indexes = [];\n\n/**\n * @var spatial_indexes array to hold 'Spatial' columns.\n */\nvar spatial_indexes = [];\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache' : nocache});\n    }\n});\n\n/**\n * Hanle redirect and reload flags send as part of AJAX requests\n *\n * @param data ajax response data\n */\nfunction PMA_handleRedirectAndReload(data) {\n    if (parseInt(data.redirect_flag) == 1) {\n        // add one more GET param to display session expiry msg\n        if (window.location.href.indexOf('?') === -1) {\n            window.location.href += '?session_expired=1';\n        } else {\n            window.location.href += '&session_expired=1';\n        }\n        window.location.reload();\n    } else if (parseInt(data.reload_flag) == 1) {\n        // remove the token param and reload\n        window.location.href = window.location.href.replace(/&?token=[^&#]*/g, \"\");\n        window.location.reload();\n    }\n}\n\n/**\n * Creates an SQL editor which supports auto completing etc.\n *\n * @param $textarea jQuery object wrapping the textarea to be made the editor\n * @param options   optional options for CodeMirror\n * @param resize    optional resizing ('vertical', 'horizontal', 'both')\n */\nfunction PMA_getSQLEditor($textarea, options, resize) {\n    if ($textarea.length > 0 && typeof CodeMirror !== 'undefined') {\n\n        // merge options for CodeMirror\n        var defaults = {\n            lineNumbers: true,\n            matchBrackets: true,\n            extraKeys: {\"Ctrl-Space\": \"autocomplete\"},\n            hintOptions: {\"completeSingle\": false, \"completeOnSingleClick\": true},\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        };\n\n        if (CodeMirror.sqlLint) {\n            $.extend(defaults, {\n                gutters: [\"CodeMirror-lint-markers\"],\n                lint: {\n                    \"getAnnotations\": CodeMirror.sqlLint,\n                    \"async\": true,\n                }\n            });\n        }\n\n        $.extend(true, defaults, options);\n\n        // create CodeMirror editor\n        var codemirrorEditor = CodeMirror.fromTextArea($textarea[0], defaults);\n        // allow resizing\n        if (! resize) {\n            resize = 'vertical';\n        }\n        var handles = '';\n        if (resize == 'vertical') {\n            handles = 'n, s';\n        }\n        if (resize == 'both') {\n            handles = 'all';\n        }\n        if (resize == 'horizontal') {\n            handles = 'e, w';\n        }\n        $(codemirrorEditor.getWrapperElement())\n            .css('resize', resize)\n            .resizable({\n                handles: handles,\n                resize: function() {\n                    codemirrorEditor.setSize($(this).width(), $(this).height());\n                }\n            });\n        // enable autocomplete\n        codemirrorEditor.on(\"inputRead\", codemirrorAutocompleteOnInputRead);\n\n        return codemirrorEditor;\n    }\n    return null;\n}\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if (document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if (window.getSelection) {\n        var sel = window.getSelection();\n        if (sel.empty) {\n            sel.empty();\n        }\n        if (sel.removeAllRanges) {\n            sel.removeAllRanges();\n        }\n    }\n}\n\n/**\n * Create a jQuery UI tooltip\n *\n * @param $elements     jQuery object representing the elements\n * @param item          the item\n *                      (see http://api.jqueryui.com/tooltip/#option-items)\n * @param myContent     content of the tooltip\n * @param additionalOptions to override the default options\n *\n */\nfunction PMA_tooltip($elements, item, myContent, additionalOptions)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var defaultOptions = {\n        content: myContent,\n        items:  item,\n        tooltipClass: \"tooltip\",\n        track: true,\n        show: false,\n        hide: false\n    };\n\n    $elements.tooltip($.extend(true, defaultOptions, additionalOptions));\n}\n\n/**\n * HTML escaping\n */\n\nfunction escapeHtml(unsafe) {\n    if (typeof(unsafe) != 'undefined') {\n        return unsafe\n            .toString()\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    } else {\n        return false;\n    }\n}\n\nfunction PMA_sprintf() {\n    return sprintf.apply(this, arguments);\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n * Ticks the NULL checkbox if NULL is chosen as default value.\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n        if ($default_type.val() == 'NULL') {\n            var $null_checkbox = $default_type.closest('tr').find('.allow_null');\n            $null_checkbox.prop('checked', true);\n        }\n    }\n}\n\n/**\n * Hides/shows the input field for column expression based on whether\n * VIRTUAL/PERSISTENT is selected\n *\n * @param $virtuality virtuality dropdown\n */\nfunction PMA_hideShowExpression($virtuality)\n{\n    if ($virtuality.val() == '') {\n        $virtuality.siblings('.expression').hide();\n    } else {\n        $virtuality.siblings('.expression').show();\n    }\n}\n\n/**\n * Show notices for ENUM columns; add/hide the default value\n *\n */\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select.column_type\").each(function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").each(function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $('select.virtuality').each(function () {\n        PMA_hideShowExpression($(this));\n    });\n}\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param $form object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param passwd_form object   the form that holds the password fields\n *\n * @return boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    passwd.value = '';\n\n    for (var i = 0; i < passwordlength; i++) {\n        passwd.value += pwchars.charAt(Math.floor(Math.random() * pwchars.length));\n    }\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString(str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2), 10);\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4), 10);\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5), 10);\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0], 10) || 0;\n    var min = parseInt(x[1], 10) || 0;\n    var pat = parseInt(x[2], 10) || 0;\n    var hotfix = parseInt(x[3], 10) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version(data)\n{\n    if (data && data.version && data.date) {\n        var current = parseVersionString($('span.version').text());\n        var latest = parseVersionString(data.version);\n        var version_information_message = '<span class=\"latest\">' +\n            PMA_messages.strLatestAvailable +\n            ' ' + escapeHtml(data.version) +\n            '</span>';\n        if (latest > current) {\n            var message = PMA_sprintf(\n                PMA_messages.strNewerVersion,\n                escapeHtml(data.version),\n                escapeHtml(data.date)\n            );\n            var htmlClass = 'notice';\n            if (Math.floor(latest / 10000) === Math.floor(current / 10000)) {\n                /* Security update */\n                htmlClass = 'error';\n            }\n            $('#newer_version_notice').remove();\n            $('#maincontainer').after('<div id=\"newer_version_notice\" class=\"' + htmlClass + '\">' + message + '</div>');\n        }\n        if (latest === current) {\n            version_information_message = ' (' + PMA_messages.strUpToDate + ')';\n        }\n        var $liPmaVersion = $('#li_pma_version');\n        $liPmaVersion.find('span.latest').remove();\n        $liPmaVersion.append(version_information_message);\n    }\n}\n\n/**\n * Loads Git revision data from ajax for index.php\n */\nfunction PMA_display_git_revision()\n{\n    $('#is_git_revision').remove();\n    $('#li_pma_version_git').remove();\n    $.get(\n        \"index.php\",\n        {\n            \"server\": PMA_commonParams.get('server'),\n            \"token\": PMA_commonParams.get('token'),\n            \"git_revision\": true,\n            \"ajax_request\": true,\n            \"no_debug\": true\n        },\n        function (data) {\n            if (typeof data !== 'undefined' && data.success === true) {\n                $(data.message).insertAfter('#li_pma_version');\n            }\n        }\n    );\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr class=\"vmiddle\"><td>' + PMA_messages.strGeneratePassword + '</td><td><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages.strGeneratePassword + ':</label><span class=\"options\"><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, type, options)\n{\n    var showTimepicker = true;\n    if (type==\"date\") {\n        showTimepicker = false;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showMillisec: true,\n        showMicrosec: true,\n        showTimepicker: showTimepicker,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'HH:mm:ss.lc',\n        constrainInput: false,\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function (input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n            if ($(input).closest('.cEdit').length > 0) {\n                setTimeout(function () {\n                    inst.dpDiv.css({\n                        top: 0,\n                        left: 0,\n                        position: 'relative'\n                    });\n                }, 0);\n            }\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function () {\n                $('#ui-timepicker-div').css('z-index', $('#ui-datepicker-div').css('z-index'));\n            }, 0);\n        },\n        onSelect: function() {\n            $this_element.data('datepicker').inline = true;\n        },\n        onClose: function (dateText, dp_inst) {\n            // The value is no more from the date picker\n            $this_element.data('comes_from', '');\n            if (typeof $this_element.data('datepicker') !== 'undefined') {\n                $this_element.data('datepicker').inline = false;\n            }\n        }\n    };\n    if (type == \"datetime\" || type == \"timestamp\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"date\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"time\") {\n        $this_element.timepicker($.extend(defaultOptions, options));\n    }\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param element     object  element of which the content will be selected\n * @param lock        var     variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param only_once   boolean if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent(element, lock, only_once)\n{\n    if (only_once && only_once_elements[element.name]) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if (lock) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param theLink     object the link\n * @param theSqlQuery object the sql query to submit\n *\n * @return boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages.strDoYouReally === '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_sprintf(PMA_messages.strDoYouReally, theSqlQuery));\n    if (is_confirmed) {\n        if ($(theLink).hasClass('formLinkSubmit')) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if (typeof(theLink.href) != 'undefined') {\n            theLink.href += '&is_js_confirmed=1';\n        } else if (typeof(theLink.form) != 'undefined') {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * submitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param theForm1 object   the form\n * @param sqlQuery1 object  the sql query textarea\n *\n * @return boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages.strNoDropDatabases !== '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages.strNoDropDatabases);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value) ||\n        do_confirm_re_1.test(sqlQuery1.value) ||\n        do_confirm_re_2.test(sqlQuery1.value) ||\n        do_confirm_re_3.test(sqlQuery1.value)) {\n        var message;\n        if (sqlQuery1.value.length > 100) {\n            message = sqlQuery1.value.substr(0, 100) + '\\n    ...';\n        } else {\n            message = sqlQuery1.value;\n        }\n        var is_confirmed = confirm(PMA_sprintf(PMA_messages.strDoYouReally, message));\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements.is_js_confirmed.value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param theForm object the form\n *\n * @return boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    // get the textarea element containing the query\n    var sqlQuery;\n    if (codemirror_editor) {\n        codemirror_editor.save();\n        sqlQuery = codemirror_editor.getValue();\n    } else {\n        sqlQuery = theForm.elements.sql_query.value;\n    }\n    var isEmpty  = 1;\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements.sql_file) != 'undefined' &&\n            theForm.elements.sql_file.value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements.id_bookmark) != 'undefined' &&\n            (theForm.elements.id_bookmark.value !== null || theForm.elements.id_bookmark.value !== '') &&\n            theForm.elements.id_bookmark.selectedIndex !== 0) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.replace(space_re, '') !== '') {\n        return confirmQuery(theForm, sqlQuery);\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        alert(PMA_messages.strFormEmpty);\n        codemirror_editor.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return theField.value.replace(space_re, '') === '';\n} // end of the 'emptyCheckTheField()' function\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param object   the form\n * @param string   the name of the form field to check\n * @param integer  the minimum authorized value\n * @param integer  the maximum authorized value\n *\n * @return boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value, 10);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages.strEnterValidNumber);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert(PMA_sprintf(message, val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i = 0; i < fieldsCnt; i++) {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val();\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val(), 10);\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() !== \"\") {\n                elm2.select();\n                alert(PMA_messages.strEnterValidLength);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField === 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField === 0) {\n        var theField = theForm.elements.field_0_1;\n        alert(PMA_messages.strFormEmpty);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    var $input = $(\"input.textfield[name='table']\");\n    if ($input.val() === \"\") {\n        alert(PMA_messages.strFormEmpty);\n        $input.focus();\n        return false;\n    }\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\nvar _idleSecondsCounter = 0;\nvar IncInterval;\nvar updateTimeout;\nAJAX.registerTeardown('functions.js', function () {\n    clearTimeout(updateTimeout);\n    clearInterval(IncInterval);\n    $(document).off('mousemove');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    document.onclick = function() {\n        _idleSecondsCounter = 0;\n    };\n    $(document).on('mousemove',function() {\n        _idleSecondsCounter = 0;\n    });\n    document.onkeypress = function() {\n        _idleSecondsCounter = 0;\n    };\n\n    function SetIdleTime() {\n        _idleSecondsCounter++;\n    }\n    function UpdateIdleTime() {\n        var href = 'index.php';\n        var params = {\n                'ajax_request' : true,\n                'token' : PMA_commonParams.get('token'),\n                'server' : PMA_commonParams.get('server'),\n                'db' : PMA_commonParams.get('db'),\n                'access_time':_idleSecondsCounter\n            };\n        $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        if (PMA_commonParams.get('LoginCookieValidity')-_idleSecondsCounter > 5) {\n                            var interval = (PMA_commonParams.get('LoginCookieValidity') - _idleSecondsCounter - 5) * 1000;\n                            if (interval > Math.pow(2, 31) - 1) { // max value for setInterval() function\n                                interval = Math.pow(2, 31) - 1;\n                            }\n                            updateTimeout = window.setTimeout(UpdateIdleTime, interval);\n                        } else {\n                            updateTimeout = window.setTimeout(UpdateIdleTime, 2000);\n                        }\n                    } else { //timeout occurred\n                        window.location.reload(true);\n                        clearInterval(IncInterval);\n                    }\n                }\n            });\n    }\n    if (PMA_commonParams.get('logged_in') && PMA_commonParams.get('auth_type') == 'cookie') {\n        IncInterval = window.setInterval(SetIdleTime, 1000);\n        var interval = (PMA_commonParams.get('LoginCookieValidity') - 5) * 1000;\n        if (interval > Math.pow(2, 31) - 1) { // max value for setInterval() function\n            interval = Math.pow(2, 31) - 1;\n        }\n        updateTimeout = window.setTimeout(UpdateIdleTime, interval);\n    }\n});\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', 'input:checkbox.checkall');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Row marking in horizontal mode (use \"on\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n\n    $(document).on('click', 'input:checkbox.checkall', function (e) {\n        $this = $(this);\n        var $tr = $this.closest('tr');\n        var $table = $this.closest('table');\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            var $checkbox = $tr.find(':checkbox.checkall');\n            var checked = $this.prop('checked');\n            $checkbox.prop('checked', checked).trigger('change');\n            if (checked) {\n                $tr.addClass('marked');\n            } else {\n                $tr.removeClass('marked');\n            }\n            last_click_checked = checked;\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $table.find('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .prop('checked', false)\n                    .trigger('change');\n            }\n\n            // handle new shift click\n            var curr_row = $table.find('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .prop('checked', true)\n                .trigger('change');\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    addDateTimePicker();\n\n    /**\n     * Add attribute to text boxes for iOS devices (based on bugID: 3508912)\n     */\n    if (navigator.userAgent.match(/(iphone|ipod|ipad)/i)) {\n        $('input[type=text]').attr('autocapitalize', 'off').attr('autocorrect', 'off');\n    }\n});\n\n/**\n * Row highlighting in horizontal mode (use \"on\"\n * so that it works also for pages reached via AJAX)\n */\n/*AJAX.registerOnload('functions.js', function () {\n    $(document).on('hover', 'tr.odd, tr.even',function (event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = [];\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usually a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction markAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', true)\n    .trigger(\"change\")\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usually a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction unMarkAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', false)\n    .trigger(\"change\")\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given container (f.e. a form, fieldset or div)\n *\n * @param string   container_id  the container id\n * @param boolean  state         new value for checkbox (true or false)\n * @return boolean  always true\n */\nfunction setCheckboxes(container_id, state)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox\").prop('checked', state);\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param string   the form name\n  * @param string   the element name\n  * @param boolean  whether to check or to uncheck options\n  *\n  * @return boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\" + the_form + \"'] select[name='\" + the_select + \"']\").find(\"option\").prop('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n        codemirror_editor.focus();\n    } else {\n        document.sqlform.sql_query.value = query;\n        document.sqlform.sql_query.focus();\n    }\n}\n\n/**\n * Handles 'Simulate query' button on SQL query box.\n *\n * @return void\n */\nfunction PMA_handleSimulateQueryButton()\n{\n    var update_re = new RegExp('^\\\\s*UPDATE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+SET\\\\s', 'i');\n    var delete_re = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var query = '';\n\n    if (codemirror_editor) {\n        query = codemirror_editor.getValue();\n    } else {\n        query = $('#sqlquery').val();\n    }\n\n    var $simulateDml = $('#simulate_dml');\n    if (update_re.test(query) || delete_re.test(query)) {\n        if (! $simulateDml.length) {\n            $('#button_submit_query')\n            .before('<input type=\"button\" id=\"simulate_dml\"' +\n                'tabindex=\"199\" value=\"' +\n                PMA_messages.strSimulateDML +\n                '\" />');\n        }\n    } else {\n        if ($simulateDml.length) {\n            $simulateDml.remove();\n        }\n    }\n}\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    } else if (queryType == \"format\") {\n        if (codemirror_editor) {\n            $('#querymessage').html(PMA_messages.strFormatting +\n                '&nbsp;<img class=\"ajaxIcon\" src=\"' +\n                pmaThemeImage + 'ajax_clock_small.gif\" alt=\"\">');\n            var href = 'db_sql_format.php';\n            var params = {\n                'ajax_request': true,\n                'token': PMA_commonParams.get('token'),\n                'sql': codemirror_editor.getValue()\n            };\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        codemirror_editor.setValue(data.sql);\n                    }\n                    $('#querymessage').html('');\n                }\n            });\n        }\n        return;\n    } else if (queryType == \"saved\") {\n        if ($.cookie('auto_saved_sql')) {\n            setQuery($.cookie('auto_saved_sql'));\n        } else {\n            PMA_ajaxShowMessage(PMA_messages.strNoAutoSavedQuery);\n        }\n        return;\n    }\n\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                columnsList += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            columnsList += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + columnsList + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n            query = \"INSERT INTO `\" + table + \"`(\" + columnsList + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if (queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    columnsList += \", \";\n                }\n                columnsList += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(columnsList);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            var sel = document.selection.createRange();\n            sel.text = columnsList;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var SqlString = document.sqlform.sql_query.value;\n\n            myQuery.value = SqlString.substring(0, startPos) + columnsList + SqlString.substring(endPos, SqlString.length);\n        } else {\n            myQuery.value += columnsList;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n * Updates the input fields for the parameters based on the query\n */\nfunction updateQueryParameters() {\n\n    if ($('#parameterized').is(':checked')) {\n        var query = codemirror_editor ? codemirror_editor.getValue() : $('#sqlquery').val();\n\n        var allParameters = query.match(/:[a-zA-Z0-9_]+/g);\n         var parameters = [];\n         // get unique parameters\n         if (allParameters) {\n             $.each(allParameters, function(i, parameter){\n                 if ($.inArray(parameter, parameters) === -1) {\n                     parameters.push(parameter);\n                 }\n             });\n         }\n\n         var $temp = $('<div />');\n         $temp.append($('#parametersDiv').children());\n         $('#parametersDiv').empty();\n\n         $.each(parameters, function (i, parameter) {\n             var paramName = parameter.substring(1);\n             var $param = $temp.find('#paramSpan_' + paramName );\n             if (! $param.length) {\n                 $param = $('<span class=\"parameter\" id=\"paramSpan_' + paramName + '\" />');\n                 $('<label for=\"param_' + paramName + '\" />').text(parameter).appendTo($param);\n                 $('<input type=\"text\" name=\"parameters[' + parameter + ']\" id=\"param_' + paramName + '\" />').appendTo($param);\n             }\n             $('#parametersDiv').append($param);\n         });\n    } else {\n        $('#parametersDiv').empty();\n    }\n}\n\n/**\n * Add a date/time picker to each element that needs it\n * (only when jquery-ui-timepicker-addon.js is loaded)\n */\nfunction addDateTimePicker() {\n    if ($.timepicker !== undefined) {\n        $('input.timefield, input.datefield, input.datetimefield').each(function () {\n\n            var decimals = $(this).parent().attr('data-decimals');\n            var type = $(this).parent().attr('data-type');\n\n            var showMillisec = false;\n            var showMicrosec = false;\n            var timeFormat = 'HH:mm:ss';\n            // check for decimal places of seconds\n            if (decimals > 0 && type.indexOf('time') != -1){\n                if (decimals > 3) {\n                    showMillisec = true;\n                    showMicrosec = true;\n                    timeFormat = 'HH:mm:ss.lc';\n                } else {\n                    showMillisec = true;\n                    timeFormat = 'HH:mm:ss.l';\n                }\n            }\n            PMA_addDatepicker($(this), type, {\n                showMillisec: showMillisec,\n                showMicrosec: showMicrosec,\n                timeFormat: timeFormat\n            });\n        });\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var $elm = $('#pdflayout');\n    var orientation = $('#orientation_opt').val();\n    var paper = 'A4';\n    var $paperOpt = $('#paper_opt');\n    if ($paperOpt.length == 1) {\n        paper = $paperOpt.val();\n    }\n    var posa = 'y';\n    var posb = 'x';\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    }\n    $elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    $elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n * Initializes positions of elements.\n */\nfunction TableDragInit() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var number = $this.data('number');\n        var x = $('#c_table_' + number + '_x').val();\n        var y = $('#c_table_' + number + '_y').val();\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n        /* Make elements draggable */\n        $this.draggable({\n            containment: \"parent\",\n            drag: function (evt, ui) {\n                var number = $this.data('number');\n                $('#c_table_' + number + '_x').val(parseInt(ui.position.left, 10));\n                $('#c_table_' + number + '_y').val(parseInt(ui.position.top, 10));\n            }\n        });\n    });\n}\n\n/**\n * Resets drag and drop positions.\n */\nfunction resetDrag() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var x = $this.data('x');\n        var y = $this.data('y');\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n    });\n}\n\n/**\n * User schema handlers.\n */\n$(function () {\n    /* Move in scratchboard on manual change */\n    $(document).on('change', '.position-change', function () {\n        var $this = $(this);\n        var $elm = $('#table_' + $this.data('number'));\n        $elm.css($this.data('axis'), $this.val() + 'px');\n    });\n    /* Refresh on paper size/orientation change */\n    $(document).on('change', '.paper-change', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'visible') {\n            refreshLayout();\n            TableDragInit();\n        }\n    });\n    /* Show/hide the WYSIWYG scratchboard */\n    $(document).on('click', '#toggle-dragdrop', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'hidden') {\n            refreshLayout();\n            TableDragInit();\n            $elm.css('visibility', 'visible');\n            $elm.css('display', 'block');\n            $('#showwysiwyg').val('1');\n        } else {\n            $elm.css('visibility', 'hidden');\n            $elm.css('display', 'none');\n            $('#showwysiwyg').val('0');\n        }\n    });\n    /* Reset scratchboard */\n    $(document).on('click', '#reset-dragdrop', function () {\n        resetDrag();\n    });\n});\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n    case '4A0':\n        if (axis == 'x') {\n            return 4767.87;\n        } else {\n            return 6740.79;\n        }\n        break;\n    case '2A0':\n        if (axis == 'x') {\n            return 3370.39;\n        } else {\n            return 4767.87;\n        }\n        break;\n    case 'A0':\n        if (axis == 'x') {\n            return 2383.94;\n        } else {\n            return 3370.39;\n        }\n        break;\n    case 'A1':\n        if (axis == 'x') {\n            return 1683.78;\n        } else {\n            return 2383.94;\n        }\n        break;\n    case 'A2':\n        if (axis == 'x') {\n            return 1190.55;\n        } else {\n            return 1683.78;\n        }\n        break;\n    case 'A3':\n        if (axis == 'x') {\n            return 841.89;\n        } else {\n            return 1190.55;\n        }\n        break;\n    case 'A4':\n        if (axis == 'x') {\n            return 595.28;\n        } else {\n            return 841.89;\n        }\n        break;\n    case 'A5':\n        if (axis == 'x') {\n            return 419.53;\n        } else {\n            return 595.28;\n        }\n        break;\n    case 'A6':\n        if (axis == 'x') {\n            return 297.64;\n        } else {\n            return 419.53;\n        }\n        break;\n    case 'A7':\n        if (axis == 'x') {\n            return 209.76;\n        } else {\n            return 297.64;\n        }\n        break;\n    case 'A8':\n        if (axis == 'x') {\n            return 147.40;\n        } else {\n            return 209.76;\n        }\n        break;\n    case 'A9':\n        if (axis == 'x') {\n            return 104.88;\n        } else {\n            return 147.40;\n        }\n        break;\n    case 'A10':\n        if (axis == 'x') {\n            return 73.70;\n        } else {\n            return 104.88;\n        }\n        break;\n    case 'B0':\n        if (axis == 'x') {\n            return 2834.65;\n        } else {\n            return 4008.19;\n        }\n        break;\n    case 'B1':\n        if (axis == 'x') {\n            return 2004.09;\n        } else {\n            return 2834.65;\n        }\n        break;\n    case 'B2':\n        if (axis == 'x') {\n            return 1417.32;\n        } else {\n            return 2004.09;\n        }\n        break;\n    case 'B3':\n        if (axis == 'x') {\n            return 1000.63;\n        } else {\n            return 1417.32;\n        }\n        break;\n    case 'B4':\n        if (axis == 'x') {\n            return 708.66;\n        } else {\n            return 1000.63;\n        }\n        break;\n    case 'B5':\n        if (axis == 'x') {\n            return 498.90;\n        } else {\n            return 708.66;\n        }\n        break;\n    case 'B6':\n        if (axis == 'x') {\n            return 354.33;\n        } else {\n            return 498.90;\n        }\n        break;\n    case 'B7':\n        if (axis == 'x') {\n            return 249.45;\n        } else {\n            return 354.33;\n        }\n        break;\n    case 'B8':\n        if (axis == 'x') {\n            return 175.75;\n        } else {\n            return 249.45;\n        }\n        break;\n    case 'B9':\n        if (axis == 'x') {\n            return 124.72;\n        } else {\n            return 175.75;\n        }\n        break;\n    case 'B10':\n        if (axis == 'x') {\n            return 87.87;\n        } else {\n            return 124.72;\n        }\n        break;\n    case 'C0':\n        if (axis == 'x') {\n            return 2599.37;\n        } else {\n            return 3676.54;\n        }\n        break;\n    case 'C1':\n        if (axis == 'x') {\n            return 1836.85;\n        } else {\n            return 2599.37;\n        }\n        break;\n    case 'C2':\n        if (axis == 'x') {\n            return 1298.27;\n        } else {\n            return 1836.85;\n        }\n        break;\n    case 'C3':\n        if (axis == 'x') {\n            return 918.43;\n        } else {\n            return 1298.27;\n        }\n        break;\n    case 'C4':\n        if (axis == 'x') {\n            return 649.13;\n        } else {\n            return 918.43;\n        }\n        break;\n    case 'C5':\n        if (axis == 'x') {\n            return 459.21;\n        } else {\n            return 649.13;\n        }\n        break;\n    case 'C6':\n        if (axis == 'x') {\n            return 323.15;\n        } else {\n            return 459.21;\n        }\n        break;\n    case 'C7':\n        if (axis == 'x') {\n            return 229.61;\n        } else {\n            return 323.15;\n        }\n        break;\n    case 'C8':\n        if (axis == 'x') {\n            return 161.57;\n        } else {\n            return 229.61;\n        }\n        break;\n    case 'C9':\n        if (axis == 'x') {\n            return 113.39;\n        } else {\n            return 161.57;\n        }\n        break;\n    case 'C10':\n        if (axis == 'x') {\n            return 79.37;\n        } else {\n            return 113.39;\n        }\n        break;\n    case 'RA0':\n        if (axis == 'x') {\n            return 2437.80;\n        } else {\n            return 3458.27;\n        }\n        break;\n    case 'RA1':\n        if (axis == 'x') {\n            return 1729.13;\n        } else {\n            return 2437.80;\n        }\n        break;\n    case 'RA2':\n        if (axis == 'x') {\n            return 1218.90;\n        } else {\n            return 1729.13;\n        }\n        break;\n    case 'RA3':\n        if (axis == 'x') {\n            return 864.57;\n        } else {\n            return 1218.90;\n        }\n        break;\n    case 'RA4':\n        if (axis == 'x') {\n            return 609.45;\n        } else {\n            return 864.57;\n        }\n        break;\n    case 'SRA0':\n        if (axis == 'x') {\n            return 2551.18;\n        } else {\n            return 3628.35;\n        }\n        break;\n    case 'SRA1':\n        if (axis == 'x') {\n            return 1814.17;\n        } else {\n            return 2551.18;\n        }\n        break;\n    case 'SRA2':\n        if (axis == 'x') {\n            return 1275.59;\n        } else {\n            return 1814.17;\n        }\n        break;\n    case 'SRA3':\n        if (axis == 'x') {\n            return 907.09;\n        } else {\n            return 1275.59;\n        }\n        break;\n    case 'SRA4':\n        if (axis == 'x') {\n            return 637.80;\n        } else {\n            return 907.09;\n        }\n        break;\n    case 'LETTER':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 792.00;\n        }\n        break;\n    case 'LEGAL':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 1008.00;\n        }\n        break;\n    case 'EXECUTIVE':\n        if (axis == 'x') {\n            return 521.86;\n        } else {\n            return 756.00;\n        }\n        break;\n    case 'FOLIO':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 936.00;\n        }\n        break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * Get checkbox for foreign key checks\n *\n * @return string\n */\nfunction getForeignKeyCheckboxLoader() {\n    var html = '';\n    html    += '<div>';\n    html    += '<div class=\"load-default-fk-check-value\">';\n    html    += PMA_getImage('ajax_clock_small.gif');\n    html    += '</div>';\n    html    += '</div>';\n    return html;\n}\n\nfunction loadForeignKeyCheckbox() {\n    // Load default foreign key check value\n    var params = {\n        'ajax_request': true,\n        'token': PMA_commonParams.get('token'),\n        'server': PMA_commonParams.get('server'),\n        'get_default_fk_check_value': true\n    };\n    $.get('sql.php', params, function (data) {\n        var html = '<input type=\"hidden\" name=\"fk_checks\" value=\"0\" />' +\n            '<input type=\"checkbox\" name=\"fk_checks\" id=\"fk_checks\"' +\n            (data.default_fk_check_value ? ' checked=\"checked\"' : '') + ' />' +\n            '<label for=\"fk_checks\">' + PMA_messages.strForeignKeyCheck + '</label>';\n        $('.load-default-fk-check-value').replaceWith(html);\n    });\n}\n\nfunction getJSConfirmCommonParam(elem) {\n    return {\n        'is_js_confirmed' : 1,\n        'ajax_request' : true,\n        'fk_checks': $(elem).find('#fk_checks').is(':checked') ? 1 : 0\n    };\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', \"a.inline_edit_sql\");\n    $(document).off('click', \"input#sql_query_edit_save\");\n    $(document).off('click', \"input#sql_query_edit_discard\");\n    $('input.sqlbutton').unbind('click');\n    if (codemirror_editor) {\n        codemirror_editor.off('blur');\n    } else {\n        $(document).off('blur', '#sqlquery');\n    }\n    $(document).off('change', '#parameterized');\n    $('#sqlquery').unbind('keydown');\n    $('#sql_query_edit').unbind('keydown');\n\n    if (codemirror_inline_editor) {\n        // Copy the sql query to the text area to preserve it.\n        $('#sql_query_edit').text(codemirror_inline_editor.getValue());\n        $(codemirror_inline_editor.getWrapperElement()).unbind('keydown');\n        codemirror_inline_editor.toTextArea();\n        codemirror_inline_editor = false;\n    }\n    if (codemirror_editor) {\n        $(codemirror_editor.getWrapperElement()).unbind('keydown');\n    }\n});\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\nAJAX.registerOnload('functions.js', function () {\n    // If we are coming back to the page by clicking forward button\n    // of the browser, bind the code mirror to inline query editor.\n    bindCodeMirrorToInlineEditor();\n    $(document).on('click', \"a.inline_edit_sql\", function () {\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev('form');\n        var sql_query  = $form.find(\"input[name='sql_query']\").val().trim();\n        var $inner_sql = $(this).parent().prev().find('code.sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += getForeignKeyCheckboxLoader();\n        new_content    += \"<input type=\\\"submit\\\" id=\\\"sql_query_edit_save\\\" class=\\\"button btnSave\\\" value=\\\"\" + PMA_messages.strGo + \"\\\"/>\\n\";\n        new_content    += \"<input type=\\\"button\\\" id=\\\"sql_query_edit_discard\\\" class=\\\"button btnDiscard\\\" value=\\\"\" + PMA_messages.strCancel + \"\\\"/>\\n\";\n        var $editor_area = $('div#inline_editor');\n        if ($editor_area.length === 0) {\n            $editor_area = $('<div id=\"inline_editor_outer\"></div>');\n            $editor_area.insertBefore($inner_sql);\n        }\n        $editor_area.html(new_content);\n        loadForeignKeyCheckbox();\n        $inner_sql.hide();\n\n        bindCodeMirrorToInlineEditor();\n        return false;\n    });\n\n    $(document).on('click', \"input#sql_query_edit_save\", function () {\n        $(\".success\").hide();\n        //hide already existing success message\n        var sql_query;\n        if (codemirror_inline_editor) {\n            codemirror_inline_editor.save();\n            sql_query = codemirror_inline_editor.getValue();\n        } else {\n            sql_query = $(this).parent().find('#sql_query_edit').val();\n        }\n        var fk_check = $(this).parent().find('#fk_checks').is(':checked');\n\n        var $form = $(\"a.inline_edit_sql\").prev('form');\n        var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                .append($('<input/>', {type: 'hidden', name: 'show_query', value: 1}))\n                .append($('<input/>', {type: 'hidden', name: 'is_js_confirmed', value: 0}))\n                .append($('<input/>', {type: 'hidden', name: 'sql_query', value: sql_query}))\n                .append($('<input/>', {type: 'hidden', name: 'fk_checks', value: fk_check ? 1 : 0}));\n        if (! checkSqlQuery($fake_form[0])) {\n            return false;\n        }\n        $fake_form.appendTo($('body')).submit();\n    });\n\n    $(document).on('click', \"input#sql_query_edit_discard\", function () {\n        var $divEditor = $('div#inline_editor_outer');\n        $divEditor.siblings('code.sql').show();\n        $divEditor.remove();\n    });\n\n    $('input.sqlbutton').click(function (evt) {\n        insertQuery(evt.target.id);\n        PMA_handleSimulateQueryButton();\n        return false;\n    });\n\n    $(document).on('change', '#parameterized', updateQueryParameters);\n\n    var $inputUsername = $('#input_username');\n    if ($inputUsername) {\n        if ($inputUsername.val() === '') {\n            $inputUsername.focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * \"inputRead\" event handler for CodeMirror SQL query editors for autocompletion\n */\nfunction codemirrorAutocompleteOnInputRead(instance) {\n    if (!sql_autocomplete_in_progress\n        && (!instance.options.hintOptions.tables || !sql_autocomplete)) {\n\n        if (!sql_autocomplete) {\n            // Reset after teardown\n            instance.options.hintOptions.tables = false;\n            instance.options.hintOptions.defaultTable = '';\n\n            sql_autocomplete_in_progress = true;\n\n            var href = 'db_sql_autocomplete.php';\n            var params = {\n                'ajax_request': true,\n                'token': PMA_commonParams.get('token'),\n                'server': PMA_commonParams.get('server'),\n                'db': PMA_commonParams.get('db'),\n                'no_debug': true\n            };\n\n            var columnHintRender = function(elem, self, data) {\n                $('<div class=\"autocomplete-column-name\">')\n                    .text(data.columnName)\n                    .appendTo(elem);\n                $('<div class=\"autocomplete-column-hint\">')\n                    .text(data.columnHint)\n                    .appendTo(elem);\n            };\n\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        var tables = $.parseJSON(data.tables);\n                        sql_autocomplete_default_table = PMA_commonParams.get('table');\n                        sql_autocomplete = [];\n                        for (var table in tables) {\n                            if (tables.hasOwnProperty(table)) {\n                                var columns = tables[table];\n                                table = {\n                                    text: table,\n                                    columns: []\n                                };\n                                for (var column in columns) {\n                                    if (columns.hasOwnProperty(column)) {\n                                        var displayText = columns[column].Type;\n                                        if (columns[column].Key == 'PRI') {\n                                            displayText += ' | Primary';\n                                        } else if (columns[column].Key == 'UNI') {\n                                            displayText += ' | Unique';\n                                        }\n                                        table.columns.push({\n                                            text: column,\n                                            displayText: column + \" | \" +  displayText,\n                                            columnName: column,\n                                            columnHint: displayText,\n                                            render: columnHintRender\n                                        });\n                                    }\n                                }\n                            }\n                            sql_autocomplete.push(table);\n                        }\n                        instance.options.hintOptions.tables = sql_autocomplete;\n                        instance.options.hintOptions.defaultTable = sql_autocomplete_default_table;\n                    }\n                },\n                complete: function () {\n                    sql_autocomplete_in_progress = false;\n                }\n            });\n        }\n        else {\n            instance.options.hintOptions.tables = sql_autocomplete;\n            instance.options.hintOptions.defaultTable = sql_autocomplete_default_table;\n        }\n    }\n    if (instance.state.completionActive) {\n        return;\n    }\n    var cur = instance.getCursor();\n    var token = instance.getTokenAt(cur);\n    var string = '';\n    if (token.string.match(/^[.`\\w@]\\w*$/)) {\n        string = token.string;\n    }\n    if (string.length > 0) {\n        CodeMirror.commands.autocomplete(instance);\n    }\n}\n\n/**\n * Remove autocomplete information before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    sql_autocomplete = false;\n    sql_autocomplete_default_table = '';\n});\n\n/**\n * Binds the CodeMirror to the text area used to inline edit a query.\n */\nfunction bindCodeMirrorToInlineEditor() {\n    var $inline_editor = $('#sql_query_edit');\n    if ($inline_editor.length > 0) {\n        if (typeof CodeMirror !== 'undefined') {\n            var height = $inline_editor.css('height');\n            codemirror_inline_editor = PMA_getSQLEditor($inline_editor);\n            codemirror_inline_editor.getWrapperElement().style.height = height;\n            codemirror_inline_editor.refresh();\n            codemirror_inline_editor.focus();\n            $(codemirror_inline_editor.getWrapperElement())\n                .bind('keydown', catchKeypressesFromSqlInlineEdit);\n        } else {\n            $inline_editor\n                .focus()\n                .bind('keydown', catchKeypressesFromSqlInlineEdit);\n        }\n    }\n}\n\nfunction catchKeypressesFromSqlInlineEdit(event) {\n    // ctrl-enter is 10 in chrome and ie, but 13 in ff\n    if (event.ctrlKey && (event.keyCode == 13 || event.keyCode == 10)) {\n        $(\"#sql_query_edit_save\").trigger('click');\n    }\n}\n\n/**\n * Adds doc link to single highlighted SQL element\n */\nfunction PMA_doc_add($elm, params)\n{\n    if (typeof mysql_doc_template == 'undefined') {\n        return;\n    }\n\n    var url = PMA_sprintf(\n        decodeURIComponent(mysql_doc_template),\n        params[0]\n    );\n    if (params.length > 1) {\n        url += '#' + params[1];\n    }\n    var content = $elm.text();\n    $elm.text('');\n    $elm.append('<a target=\"mysql_doc\" class=\"cm-sql-doc\" href=\"' + url + '\">' + content + '</a>');\n}\n\n/**\n * Generates doc links for keywords inside highlighted SQL\n */\nfunction PMA_doc_keyword(idx, elm)\n{\n    var $elm = $(elm);\n    /* Skip already processed ones */\n    if ($elm.find('a').length > 0) {\n        return;\n    }\n    var keyword = $elm.text().toUpperCase();\n    var $next = $elm.next('.cm-keyword');\n    if ($next) {\n        var next_keyword = $next.text().toUpperCase();\n        var full = keyword + ' ' + next_keyword;\n\n        var $next2 = $next.next('.cm-keyword');\n        if ($next2) {\n            var next2_keyword = $next2.text().toUpperCase();\n            var full2 = full + ' ' + next2_keyword;\n            if (full2 in mysql_doc_keyword) {\n                PMA_doc_add($elm, mysql_doc_keyword[full2]);\n                PMA_doc_add($next, mysql_doc_keyword[full2]);\n                PMA_doc_add($next2, mysql_doc_keyword[full2]);\n                return;\n            }\n        }\n        if (full in mysql_doc_keyword) {\n            PMA_doc_add($elm, mysql_doc_keyword[full]);\n            PMA_doc_add($next, mysql_doc_keyword[full]);\n            return;\n        }\n    }\n    if (keyword in mysql_doc_keyword) {\n        PMA_doc_add($elm, mysql_doc_keyword[keyword]);\n    }\n}\n\n/**\n * Generates doc links for builtins inside highlighted SQL\n */\nfunction PMA_doc_builtin(idx, elm)\n{\n    var $elm = $(elm);\n    var builtin = $elm.text().toUpperCase();\n    if (builtin in mysql_doc_builtin) {\n        PMA_doc_add($elm, mysql_doc_builtin[builtin]);\n    }\n}\n\n/**\n * Higlights SQL using CodeMirror.\n */\nfunction PMA_highlightSQL($base)\n{\n    var $elm = $base.find('code.sql');\n    $elm.each(function () {\n        var $sql = $(this);\n        var $pre = $sql.find('pre');\n        /* We only care about visible elements to avoid double processing */\n        if ($pre.is(\":visible\")) {\n            var $highlight = $('<div class=\"sql-highlight cm-s-default\"></div>');\n            $sql.append($highlight);\n            if (typeof CodeMirror != 'undefined') {\n                CodeMirror.runMode($sql.text(), 'text/x-mysql', $highlight[0]);\n                $pre.hide();\n                $highlight.find('.cm-keyword').each(PMA_doc_keyword);\n                $highlight.find('.cm-builtin').each(PMA_doc_builtin);\n            }\n        }\n    });\n}\n\n/**\n * Updates an element containing code.\n *\n * @param jQuery Object $base base element which contains the raw and the\n *                            highlighted code.\n *\n * @param string htmlValue    code in HTML format, displayed if code cannot be\n *                            highlighted\n *\n * @param string rawValue     raw code, used as a parameter for highlighter\n *\n * @return bool               whether content was updated or not\n */\nfunction PMA_updateCode($base, htmlValue, rawValue)\n{\n    var $code = $base.find('code');\n    if ($code.length == 0) {\n        return false;\n    }\n\n    // Determines the type of the content and appropriate CodeMirror mode.\n    var type = '', mode = '';\n    if  ($code.hasClass('json')) {\n        type = 'json';\n        mode = 'application/json';\n    } else if ($code.hasClass('sql')) {\n        type = 'sql';\n        mode = 'text/x-mysql';\n    } else if ($code.hasClass('xml')) {\n        type = 'xml';\n        mode = 'application/xml';\n    } else {\n        return false;\n    }\n\n    // Element used to display unhighlighted code.\n    var $notHighlighted = $('<pre>' + htmlValue + '</pre>');\n\n    // Tries to highlight code using CodeMirror.\n    if (typeof CodeMirror != 'undefined') {\n        var $highlighted = $('<div class=\"' + type + '-highlight cm-s-default\"></div>');\n        CodeMirror.runMode(rawValue, mode, $highlighted[0]);\n        $notHighlighted.hide();\n        $code.html('').append($notHighlighted, $highlighted[0]);\n    } else {\n        $code.html('').append($notHighlighted);\n    }\n\n    return true;\n}\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message === '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages.strLoading;\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages.strProcessingRequest) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout === undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length === 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"#page_content\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\"span.ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_' +\n            ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .show();\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function () {\n            if ($(this).is(':data(tooltip)')) {\n                $(this).tooltip('destroy');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_tooltip(\n            $retval,\n            'span',\n            PMA_messages.strDismiss\n        );\n    }\n    PMA_highlightSQL($retval);\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox !== undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is(':data(tooltip)')) {\n            $this_msgbox.tooltip('destroy');\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n/**\n * Requests SQL for previewing before executing.\n *\n * @param jQuery Object $form Form containing query data\n *\n * @return void\n */\nfunction PMA_previewSQL($form)\n{\n    var form_url = $form.attr('action');\n    var form_data = $form.serialize() +\n        '&do_save_data=1' +\n        '&preview_sql=1' +\n        '&ajax_request=1';\n    var $msgbox = PMA_ajaxShowMessage();\n    $.ajax({\n        type: 'POST',\n        url: form_url,\n        data: form_data,\n        success: function (response) {\n            PMA_ajaxRemoveMessage($msgbox);\n            if (response.success) {\n                var $dialog_content = $('<div/>')\n                    .append(response.sql_data);\n                var button_options = {};\n                button_options[PMA_messages.strClose] = function () {\n                    $(this).dialog('close');\n                };\n                var $response_dialog = $dialog_content.dialog({\n                    minWidth: 550,\n                    maxHeight: 400,\n                    modal: true,\n                    buttons: button_options,\n                    title: PMA_messages.strPreviewSQL,\n                    close: function () {\n                        $(this).remove();\n                    },\n                    open: function () {\n                        // Pretty SQL printing.\n                        PMA_highlightSQL($(this));\n                    }\n                });\n            } else {\n                PMA_ajaxShowMessage(response.message);\n            }\n        },\n        error: function () {\n            PMA_ajaxShowMessage(PMA_messages.strErrorProcessingRequest);\n        }\n    });\n}\n\n/**\n * check for reserved keyword column name\n *\n * @param jQuery Object $form Form\n *\n * @returns true|false\n */\n\nfunction PMA_checkReservedWordColumns($form) {\n    var is_confirmed = true;\n    $.ajax({\n        type: 'POST',\n        url: \"tbl_structure.php\",\n        data: $form.serialize() + '&reserved_word_check=1',\n        success: function (data) {\n            if (typeof data.success != 'undefined' && data.success === true) {\n                is_confirmed = confirm(data.message);\n            }\n        },\n        async:false\n    });\n    return is_confirmed;\n}\n\n// This event only need to be fired once after the initial page load\n$(function () {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $(document).on('click', 'span.ajax_notification.dismissable', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $(document).on('mouseover', 'span.ajax_notification a, span.ajax_notification button, span.ajax_notification input', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('disable');\n        }\n    });\n    $(document).on('mouseout', 'span.ajax_notification a, span.ajax_notification button, span.ajax_notification input', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('enable');\n        }\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2], 10) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p#enum_notice_\" + enum_notice_id).show();\n    } else {\n        $(\"p#enum_notice_\" + enum_notice_id).hide();\n    }\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n * and in server_status_monitor.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true\n                }\n            },\n            highlighter: {\n                show: true,\n                tooltipLocation: 'se',\n                sizeAdjust: 0,\n                tooltipAxes: 'pieref',\n                useAxesFormatters: false,\n                formatString: '%s, %.9Ps'\n            },\n            legend: {\n                show: true,\n                location: 'e',\n                rendererOptions: {numberColumns: 2}\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n                '#fce94f',\n                '#fcaf3e',\n                '#e9b96e',\n                '#8ae234',\n                '#729fcf',\n                '#ad7fa8',\n                '#ef2929',\n                '#eeeeec',\n                '#888a85',\n                '#c4a000',\n                '#ce5c00',\n                '#8f5902',\n                '#4e9a06',\n                '#204a87',\n                '#5c3566',\n                '#a40000',\n                '#babdb6',\n                '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time).\n * Used in server_status_monitor.js\n *\n * @param  integer    Number to be formatted, should be in the range of microsecond to second\n * @param  integer    Accuracy, how many numbers right to the comma should be\n * @return string     The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10, acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param string      Query to be formatted\n * @return string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    if (typeof CodeMirror == 'undefined') {\n        return string;\n    }\n\n    var mode = CodeMirror.getMode({}, \"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function (cnt) {\n        var ret = '';\n        for (var i = 0; i < 4 * cnt; i++) {\n            ret += \" \";\n        }\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from', 'on', 'where', 'having', 'limit', 'order by', 'group by'],\n        'update': ['update', 'set', 'where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = {';': true, ',': true, '.': true, '(': true};\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = {'.': true};\n\n    // Populate tokens array\n    var str = '';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if (token !== null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if (! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i + 1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i - 1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i + 1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i + 1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) {\n                output += \"\\n\";\n            }\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentation and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]] &&\n               ! (i > 0 && spaceExceptionsAfter[tokens[i - 1][1]]) &&\n               output.charAt(output.length - 1) != ' ') {\n                output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if ((lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set') &&\n            tokens[i][1] == ',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where' &&\n            (tokens[i][1] == 'and' || tokens[i][1] == 'or' || tokens[i][1] == 'xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & indentation++\n            //if (blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param string      question\n * @param string      url           URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param function    callbackFn    callback to execute after user clicks on OK\n * @param function    openCallback  optional callback to run when dialog is shown\n */\n\njQuery.fn.PMA_confirm = function (question, url, callbackFn, openCallback) {\n    var confirmState = PMA_commonParams.get('confirm');\n    if (! confirmState) {\n        // user does not want to confirm\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n            return true;\n        }\n    }\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    /**\n     * @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = [\n        {\n            text: PMA_messages.strOK,\n            'class': 'submitOK',\n            click: function () {\n                $(this).dialog(\"close\");\n                if ($.isFunction(callbackFn)) {\n                    callbackFn.call(this, url);\n                }\n            }\n        },\n        {\n            text: PMA_messages.strCancel,\n            'class': 'submitCancel',\n            click: function () {\n                $(this).dialog(\"close\");\n            }\n        }\n    ];\n\n    $('<div/>', {'id': 'confirm_dialog', 'title': PMA_messages.strConfirm})\n    .prepend(question)\n    .dialog({\n        buttons: button_options,\n        close: function () {\n            $(this).remove();\n        },\n        open: openCallback,\n        modal: true\n    });\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param string      text_selector   string to select the sortKey's text\n *\n * @return jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function (text_selector) {\n    return this.each(function () {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function (index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        });\n\n        //get the sorted order\n        rows.sort(function (a, b) {\n            if (a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if (a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        });\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function (index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        });\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('submit', \"#create_table_form_minimal.ajax\");\n    $(document).off('submit', \"form.create_table_form.ajax\");\n    $(document).off('click', \"form.create_table_form.ajax input[name=submit_num_fields]\");\n    $(document).off('keyup', \"form.create_table_form.ajax input\");\n});\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Attach event handler for submission of create table form (save)\n     */\n    $(document).on('submit', \"form.create_table_form.ajax\", function (event) {\n        event.preventDefault();\n\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this);\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            PMA_prepareForAjaxRequest($form);\n            if (PMA_checkReservedWordColumns($form)) {\n                PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n                //User wants to submit the form\n                $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n                    if (typeof data !== 'undefined' && data.success === true) {\n                        $('#properties_message')\n                         .removeClass('error')\n                         .html('');\n                        PMA_ajaxShowMessage(data.message);\n                        // Only if the create table dialog (distinct panel) exists\n                        var $createTableDialog = $(\"#create_table_dialog\");\n                        if ($createTableDialog.length > 0) {\n                            $createTableDialog.dialog(\"close\").remove();\n                        }\n                        $('#tableslistcontainer').before(data.formatted_sql);\n\n                        /**\n                         * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                         */\n                        var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                        // this is the first table created in this db\n                        if (tables_table.length === 0) {\n                            PMA_commonActions.refreshMain(\n                                PMA_commonParams.get('opendb_url')\n                            );\n                        } else {\n                            /**\n                             * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                             */\n                            var curr_last_row = $(tables_table).find('tr:last');\n                            /**\n                             * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                            /**\n                             * @var curr_last_row_index Index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                            /**\n                             * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_index = curr_last_row_index + 1;\n                            /**\n                             * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                            data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                            //append to table\n                            $(data.new_table_string)\n                             .appendTo(tables_table);\n\n                            //Sort the table\n                            $(tables_table).PMA_sort_table('th');\n\n                            // Adjust summary row\n                            PMA_adjustTotals();\n                        }\n\n                        //Refresh navigation as a new table has been added\n                        PMA_reloadNavigation();\n                        // Redirect to table structure page on creation of new table\n                        var params_12 = 'ajax_request=true&ajax_page_request=true';\n                        if (! (history && history.pushState)) {\n                            params_12 += PMA_MicroHistory.menus.getRequestParam();\n                        }\n                        tblStruct_url = 'tbl_structure.php?server=' + data._params.server +\n                            '&db='+ data._params.db + '&token=' + data._params.token +\n                            '&goto=db_structure.php&table=' + data._params.table + '';\n                        $.get(tblStruct_url, params_12, AJAX.responseHandler);\n                    } else {\n                        PMA_ajaxShowMessage(\n                            '<div class=\"error\">' + data.error + '</div>',\n                            false\n                        );\n                    }\n                }); // end $.post()\n            }\n        } // end if (checkTableEditForm() )\n    }); // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     */\n    $(document).on('click', \"form.create_table_form.ajax input[name=submit_num_fields]\", function (event) {\n        event.preventDefault();\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this).closest('form');\n\n        if (!checkFormElementInRange(this.form, 'added_fields', PMA_messages.strLeastColumnError, 1)) {\n            return;\n        }\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=1\", function (data) {\n            if (typeof data !== 'undefined' && data.success) {\n                var $pageContent = $(\"#page_content\");\n                $pageContent.html(data.message);\n                PMA_highlightSQL($pageContent);\n                PMA_verifyColumnsProperties();\n                PMA_hideShowConnection($('.create_table_form select[name=tbl_storage_engine]'));\n                PMA_ajaxRemoveMessage($msgbox);\n            } else {\n                PMA_ajaxShowMessage(data.error);\n            }\n        }); //end $.post()\n    }); // end create table form (add fields)\n\n    $(document).on('keydown', \"form.create_table_form.ajax input[name=added_fields]\", function (event) {\n        if (event.keyCode == 13) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            $(this)\n                .closest('form')\n                .find('input[name=submit_num_fields]')\n                .click();\n        }\n    });\n    $(\"input[value=AUTO_INCREMENT]\").change(function(){\n        if (this.checked) {\n            var col = /\\d/.exec($(this).attr('name'));\n            col = col[0];\n            var $selectFieldKey = $('select[name=\"field_key[' + col + ']\"]');\n            if ($selectFieldKey.val() === 'none_'+col) {\n                $selectFieldKey.val('primary_'+col).change();\n            }\n        }\n    });\n    $('body')\n    .off('click', 'input.preview_sql')\n    .on('click', 'input.preview_sql', function () {\n        var $form = $(this).closest('form');\n        PMA_previewSQL($form);\n    });\n});\n\n\n/**\n * Validates the password field in a form\n *\n * @see    PMA_messages.strPasswordEmpty\n * @see    PMA_messages.strPasswordNotSame\n * @param  object $the_form The form to be validated\n * @return bool\n */\nfunction PMA_checkPassword($the_form)\n{\n    // Did the user select 'no password'?\n    if ($the_form.find('#nopass_1').is(':checked')) {\n        return true;\n    } else {\n        var $pred = $the_form.find('#select_pred_password');\n        if ($pred.length && ($pred.val() == 'none' || $pred.val() == 'keep')) {\n            return true;\n        }\n    }\n\n    var $password = $the_form.find('input[name=pma_pw]');\n    var $password_repeat = $the_form.find('input[name=pma_pw2]');\n    var alert_msg = false;\n\n    if ($password.val() === '') {\n        alert_msg = PMA_messages.strPasswordEmpty;\n    } else if ($password.val() != $password_repeat.val()) {\n        alert_msg = PMA_messages.strPasswordNotSame;\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        $password.val('');\n        $password_repeat.val('');\n        $password.focus();\n        return false;\n    }\n    return true;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', '#change_password_anchor.ajax');\n});\n/**\n * Attach Ajax event handlers for 'Change Password' on index.php\n */\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     */\n    $(document).on('click', '#change_password_anchor.ajax', function (event) {\n        event.preventDefault();\n\n        var $msgbox = PMA_ajaxShowMessage();\n\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages.strGo] = function () {\n\n            event.preventDefault();\n\n            /**\n             * @var $the_form    Object referring to the change password form\n             */\n            var $the_form = $(\"#change_password_form\");\n\n            if (! PMA_checkPassword($the_form)) {\n                return false;\n            }\n\n            /**\n             * @var this_value  String containing the value of the submit button.\n             * Need to append this for the change password form on Server Privileges\n             * page to work\n             */\n            var this_value = $(this).val();\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $the_form.append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n            $.post($the_form.attr('action'), $the_form.serialize() + '&change_pw=' + this_value, function (data) {\n                if (typeof data === 'undefined' || data.success !== true) {\n                    PMA_ajaxShowMessage(data.error, false);\n                    return;\n                }\n\n                var $pageContent = $(\"#page_content\");\n                $pageContent.prepend(data.message);\n                PMA_highlightSQL($pageContent);\n                $(\"#change_password_dialog\").hide().remove();\n                $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                PMA_ajaxRemoveMessage($msgbox);\n            }); // end $.post()\n        };\n\n        button_options[PMA_messages.strCancel] = function () {\n            $(this).dialog('close');\n        };\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (typeof data === 'undefined' || !data.success) {\n                PMA_ajaxShowMessage(data.error, false);\n                return;\n            }\n\n            $('<div id=\"change_password_dialog\"></div>')\n                .dialog({\n                    title: PMA_messages.strChangePassword,\n                    width: 600,\n                    close: function (ev, ui) {\n                        $(this).remove();\n                    },\n                    buttons: button_options,\n                    modal: true\n                })\n                .append(data.message);\n            // for this dialog, we remove the fieldset wrapping due to double headings\n            $(\"fieldset#fieldset_change_password\")\n                .find(\"legend\").remove().end()\n                .find(\"table.noclick\").unwrap().addClass(\"some-margin\")\n                .find(\"input#text_pma_pw\").focus();\n            displayPasswordGenerateButton();\n            $('#fieldset_change_password_footer').hide();\n            PMA_ajaxRemoveMessage($msgbox);\n            $('#change_password_form').bind('submit', function (e) {\n                e.preventDefault();\n                $(this)\n                    .closest('.ui-dialog')\n                    .find('.ui-dialog-buttonpane .ui-button')\n                    .first()\n                    .click();\n            });\n        }); // end $.get()\n    }); // end handler for change password anchor\n}); // end $() for Change Password\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('change', \"select.column_type\");\n    $(document).off('change', \"select.default_type\");\n    $(document).off('change', \"select.virtuality\");\n    $(document).off('change', 'input.allow_null');\n    $(document).off('change', '.create_table_form select[name=tbl_storage_engine]');\n});\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\nAJAX.registerOnload('functions.js', function () {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs on() to work also in the Create Table dialog\n    $(document).on('change', \"select.column_type\", function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(document).on('change', \"select.default_type\", function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $(document).on('change', \"select.virtuality\", function () {\n        PMA_hideShowExpression($(this));\n    });\n    $(document).on('change', 'input.allow_null', function () {\n        PMA_validateDefaultValue($(this));\n    });\n    $(document).on('change', '.create_table_form select[name=tbl_storage_engine]', function () {\n        PMA_hideShowConnection($(this));\n    });\n});\n\n/**\n * If the chosen storage engine is FEDERATED show connection field. Hide otherwise\n *\n * @param $engine_selector storage engine selector\n */\nfunction PMA_hideShowConnection($engine_selector)\n{\n    var $connection = $('.create_table_form input[name=connection]');\n    var index = $connection.parent('td').index() + 1;\n    var $labelTh = $connection.parents('tr').prev('tr').children('th:nth-child(' + index + ')');\n    if ($engine_selector.val() != 'FEDERATED') {\n        $connection\n            .prop('disabled', true)\n            .parent('td').hide();\n        $labelTh.hide();\n    } else {\n        $connection\n            .prop('disabled', false)\n            .parent('td').show();\n        $labelTh.show();\n    }\n}\n\n/**\n * If the column does not allow NULL values, makes sure that default is not NULL\n */\nfunction PMA_validateDefaultValue($null_checkbox)\n{\n    if (! $null_checkbox.prop('checked')) {\n        var $default = $null_checkbox.closest('tr').find('.default_type');\n        if ($default.val() == 'NULL') {\n            $default.val('NONE');\n        }\n    }\n}\n\n/**\n * function to populate the input fields on picking a column from central list\n *\n * @param string  input_id input id of the name field for the column to be populated\n * @param integer offset of the selected column in central list of columns\n */\nfunction autoPopulate(input_id, offset)\n{\n    var db = PMA_commonParams.get('db');\n    var table = PMA_commonParams.get('table');\n    input_id = input_id.substring(0, input_id.length - 1);\n    $('#' + input_id + '1').val(central_column_list[db + '_' + table][offset].col_name);\n    var col_type = central_column_list[db + '_' + table][offset].col_type.toUpperCase();\n    $('#' + input_id + '2').val(col_type);\n    var $input3 = $('#' + input_id + '3');\n    $input3.val(central_column_list[db + '_' + table][offset].col_length);\n    if(col_type === 'ENUM' || col_type === 'SET') {\n        $input3.next().show();\n    } else {\n        $input3.next().hide();\n    }\n    var col_default = central_column_list[db + '_' + table][offset].col_default.toUpperCase();\n    var $input4 = $('#' + input_id + '4');\n    if (col_default !== '' && col_default !== 'NULL' && col_default !== 'CURRENT_TIMESTAMP') {\n        $input4.val(\"USER_DEFINED\");\n        $input4.next().next().show();\n        $input4.next().next().val(central_column_list[db + '_' + table][offset].col_default);\n    } else {\n        $input4.val(central_column_list[db + '_' + table][offset].col_default);\n        $input4.next().next().hide();\n    }\n    $('#' + input_id + '5').val(central_column_list[db + '_' + table][offset].col_collation);\n    var $input6 = $('#' + input_id + '6');\n    $input6.val(central_column_list[db + '_' + table][offset].col_attribute);\n    if(central_column_list[db + '_' + table][offset].col_extra === 'on update CURRENT_TIMESTAMP') {\n        $input6.val(central_column_list[db + '_' + table][offset].col_extra);\n    }\n    if(central_column_list[db + '_' + table][offset].col_extra.toUpperCase() === 'AUTO_INCREMENT') {\n        $('#' + input_id + '9').prop(\"checked\",true).change();\n    } else {\n        $('#' + input_id + '9').prop(\"checked\",false);\n    }\n    if(central_column_list[db + '_' + table][offset].col_isNull !== '0') {\n        $('#' + input_id + '7').prop(\"checked\",true);\n    } else {\n        $('#' + input_id + '7').prop(\"checked\",false);\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', \"a.open_enum_editor\");\n    $(document).off('click', \"input.add_value\");\n    $(document).off('click', \"#enum_editor td.drop\");\n    $(document).off('click', 'a.central_columns_dialog');\n});\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\nAJAX.registerOnload('functions.js', function () {\n    $(document).on('click', \"a.open_enum_editor\", function () {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        var title;\n        var i;\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            title = PMA_messages.enum_newColumnVals;\n        } else {\n            title = PMA_messages.enum_columnVals.replace(\n                /%s/,\n                '\"' + escapeHtml(decodeURIComponent(colname)) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (i = 0; i < inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i + 1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length === 0) {\n            values.push('', '', '', '');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (i = 0; i < values.length; i++) {\n            fields += \"<tr><td>\" +\n                   \"<input type='text' value='\" + values[i] + \"'/>\" +\n                   \"</td><td class='drop'>\" +\n                   drop_icon +\n                   \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\" +\n                   \"<fieldset>\" +\n                    \"<legend>\" + title + \"</legend>\" +\n                    \"<p>\" + PMA_getImage('s_notice.png') +\n                    PMA_messages.enum_hint + \"</p>\" +\n                    \"<table class='values'>\" + fields + \"</table>\" +\n                    \"</fieldset><fieldset class='tblFooters'>\" +\n                    \"<table class='add'><tr><td>\" +\n                    \"<div class='slider'></div>\" +\n                    \"</td><td>\" +\n                    \"<form><div><input type='submit' class='add_value' value='\" +\n                    PMA_sprintf(PMA_messages.enum_addValue, 1) +\n                    \"'/></div></form>\" +\n                    \"</td></tr></table>\" +\n                    \"<input type='hidden' value='\" + // So we know which column's data is being edited\n                    $(this).closest('td').find(\"input\").attr(\"id\") +\n                    \"' />\" +\n                    \"</fieldset>\" +\n                    \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages.strGo] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = [];\n            $(this).find(\".values input\").each(function (index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").val();\n            $(\"input#\" + values_id).val(value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages.strClose] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            maxHeight: 450,\n            modal: true,\n            title: PMA_messages.enum_editor,\n            buttons: buttonOptions,\n            open: function () {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function (event, ui) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    PMA_sprintf(PMA_messages.enum_addValue, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('a.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    $(document).on('click', 'a.central_columns_dialog', function (e) {\n        var href = \"db_central_columns.php\";\n        var db = PMA_commonParams.get('db');\n        var table = PMA_commonParams.get('table');\n        var maxRows = $(this).data('maxrows');\n        var pick = $(this).data('pick');\n        if (pick !== false) {\n            pick = true;\n        }\n        var params = {\n            'ajax_request' : true,\n            'token' : PMA_commonParams.get('token'),\n            'server' : PMA_commonParams.get('server'),\n            'db' : PMA_commonParams.get('db'),\n            'cur_table' : PMA_commonParams.get('table'),\n            'getColumnList':true\n        };\n        var colid = $(this).closest('td').find(\"input\").attr(\"id\");\n        var fields = '';\n        if (! (db + '_' + table in central_column_list)) {\n            central_column_list.push(db + '_' + table);\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    central_column_list[db + '_' + table] = $.parseJSON(data.message);\n                },\n                async:false\n            });\n        }\n        var i = 0;\n        var list_size = central_column_list[db + '_' + table].length;\n        var min = (list_size <= maxRows) ? list_size : maxRows;\n        for (i = 0; i < min; i++) {\n\n            fields += '<tr><td><div><span style=\"font-weight:bold\">' +\n                escapeHtml(central_column_list[db + '_' + table][i].col_name) +\n                '</span><br><span style=\"color:gray\">' + central_column_list[db + '_' + table][i].col_type;\n\n            if (central_column_list[db + '_' + table][i].col_attribute !== '') {\n                fields += '(' + escapeHtml(central_column_list[db + '_' + table][i].col_attribute) + ') ';\n            }\n            if (central_column_list[db + '_' + table][i].col_length !== '') {\n                fields += '(' + escapeHtml(central_column_list[db + '_' + table][i].col_length) +') ';\n            }\n            fields += escapeHtml(central_column_list[db + '_' + table][i].col_extra) + '</span>' +\n                '</div></td>';\n            if (pick) {\n                fields += '<td><input class=\"pick\" style=\"width:100%\" type=\"submit\" value=\"' +\n                    PMA_messages.pickColumn + '\" onclick=\"autoPopulate(\\'' + colid + '\\',' + i + ')\"/></td>';\n            }\n            fields += '</tr>';\n        }\n        var result_pointer = i;\n        var search_in = '<input type=\"text\" class=\"filter_rows\" placeholder=\"' + PMA_messages.searchList + '\">';\n        if (fields === '') {\n            fields = PMA_sprintf(PMA_messages.strEmptyCentralList, \"'\" + db + \"'\");\n            search_in = '';\n        }\n        var seeMore = '';\n        if (list_size > maxRows) {\n            seeMore = \"<fieldset class='tblFooters' style='text-align:center;font-weight:bold'>\" +\n                \"<a href='#' id='seeMore'>\" + PMA_messages.seeMore + \"</a></fieldset>\";\n        }\n        var central_columns_dialog = \"<div style='max-height:400px'>\" +\n            \"<fieldset>\" +\n            search_in +\n            \"<table id='col_list' style='width:100%' class='values'>\" + fields + \"</table>\" +\n            \"</fieldset>\" +\n            seeMore +\n            \"</div>\";\n\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 500,\n            10\n        );\n        if (! width) {\n            width = 500;\n        }\n        var buttonOptions = {};\n        var $central_columns_dialog = $(central_columns_dialog).dialog({\n            minWidth: width,\n            maxHeight: 450,\n            modal: true,\n            title: PMA_messages.pickColumnTitle,\n            buttons: buttonOptions,\n            open: function () {\n                $('#col_list').on(\"click\", \".pick\", function (){\n                    $central_columns_dialog.remove();\n                });\n                $(\".filter_rows\").on(\"keyup\", function () {\n                    $.uiTableFilter($(\"#col_list\"), $(this).val());\n                });\n                $(\"#seeMore\").click(function() {\n                    fields = '';\n                    min = (list_size <= maxRows + result_pointer) ? list_size : maxRows + result_pointer;\n                    for (i = result_pointer; i < min; i++) {\n\n                        fields += '<tr><td><div><span style=\"font-weight:bold\">' +\n                            central_column_list[db + '_' + table][i].col_name +\n                            '</span><br><span style=\"color:gray\">' +\n                            central_column_list[db + '_' + table][i].col_type;\n\n                        if (central_column_list[db + '_' + table][i].col_attribute !== '') {\n                            fields += '(' + central_column_list[db + '_' + table][i].col_attribute + ') ';\n                        }\n                        if (central_column_list[db + '_' + table][i].col_length !== '') {\n                            fields += '(' + central_column_list[db + '_' + table][i].col_length + ') ';\n                        }\n                        fields += central_column_list[db + '_' + table][i].col_extra + '</span>' +\n                            '</div></td>';\n                        if (pick) {\n                            fields += '<td><input class=\"pick\" style=\"width:100%\" type=\"submit\" value=\"' +\n                                PMA_messages.pickColumn + '\" onclick=\"autoPopulate(\\'' + colid + '\\',' + i + ')\"/></td>';\n                        }\n                        fields += '</tr>';\n                    }\n                    $(\"#col_list\").append(fields);\n                    result_pointer = i;\n                    if (result_pointer === list_size) {\n                        $('.tblFooters').hide();\n                    }\n                    return false;\n                });\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $('#col_list').off(\"click\", \".pick\");\n                $(\".filter_rows\").off(\"keyup\");\n                $(this).remove();\n            }\n        });\n        return false;\n    });\n\n   // $(document).on('click', 'a.show_central_list',function(e) {\n\n   // });\n    // When \"add a new value\" is clicked, append an empty text field\n    $(document).on('click', \"input.add_value\", function (e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\" +\n                    \"<input type='text' />\" +\n                    \"</td><td class='drop'>\" +\n                    PMA_getImage('b_drop.png') +\n                    \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(document).on('click', \"#enum_editor td.drop\", function () {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param string   form_id  Variable which parses the form name as\n *                            the input\n * @return boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\" + form_id).length === 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_choice = $(\"#select_index_choice\");\n\n    // Index is a primary key\n    if ($the_idx_choice.find(\"option:selected\").val() == 'PRIMARY') {\n        $the_idx_name.val('PRIMARY');\n        $the_idx_name.prop(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.val() == 'PRIMARY') {\n            $the_idx_name.val(\"\");\n        }\n        $the_idx_name.prop(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', '#index_frm input[type=submit]');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handler for adding more columns to an index in the editor\n     */\n    $(document).on('click', '#index_frm input[type=submit]', function (event) {\n        event.preventDefault();\n        var rows_to_add = $(this)\n            .closest('fieldset')\n            .find('.slider')\n            .slider('value');\n\n        var tempEmptyVal = function () {\n            $(this).val('');\n        };\n\n        var tempSetFocus = function () {\n            if ($(this).find(\"option:selected\").val() === '') {\n                return true;\n            }\n            $(this).closest(\"tr\").find(\"input\").focus();\n        };\n\n        while (rows_to_add--) {\n            var $indexColumns = $('#index_columns');\n            var $newrow = $indexColumns\n                .find('tbody > tr:first')\n                .clone()\n                .appendTo(\n                    $indexColumns.find('tbody')\n                );\n            $newrow.find(':input').each(tempEmptyVal);\n            // focus index size input on column picked\n            $newrow.find('select').change(tempSetFocus);\n        }\n    });\n});\n\nfunction indexEditorDialog(url, title, callback_success, callback_failure)\n{\n    /*Remove the hidden dialogs if there are*/\n    var $editIndexDialog = $('#edit_index_dialog');\n    if ($editIndexDialog.length !== 0) {\n        $editIndexDialog.remove();\n    }\n    var $div = $('<div id=\"edit_index_dialog\"></div>');\n\n    /**\n     * @var button_options Object that stores the options\n     *                     passed to jQueryUI dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strGo] = function () {\n        /**\n         * @var    the_form    object referring to the export form\n         */\n        var $form = $(\"#index_frm\");\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n        //User wants to submit the form\n        $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n            var $sqlqueryresults = $(\".sqlqueryresults\");\n            if ($sqlqueryresults.length !== 0) {\n                $sqlqueryresults.remove();\n            }\n            if (typeof data !== 'undefined' && data.success === true) {\n                PMA_ajaxShowMessage(data.message);\n                var $resultQuery = $('.result_query');\n                if ($resultQuery.length) {\n                    $resultQuery.remove();\n                }\n                if (data.sql_query) {\n                    $('<div class=\"result_query\"></div>')\n                        .html(data.sql_query)\n                        .prependTo('#page_content');\n                    PMA_highlightSQL($('#page_content'));\n                }\n                $(\".result_query .notice\").remove();\n                $resultQuery.prepend(data.message);\n                /*Reload the field form*/\n                $(\"#table_index\").remove();\n                $(\"<div id='temp_div'><div>\")\n                    .append(data.index_table)\n                    .find(\"#table_index\")\n                    .insertAfter(\"#index_header\");\n                var $editIndexDialog = $(\"#edit_index_dialog\");\n                if ($editIndexDialog.length > 0) {\n                    $editIndexDialog.dialog(\"close\");\n                }\n                $('div.no_indexes_defined').hide();\n                if (callback_success) {\n                    callback_success();\n                }\n                PMA_reloadNavigation();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.error);\n                var $error;\n                if ($temp_div.find(\".error code\").length !== 0) {\n                    $error = $temp_div.find(\".error code\").addClass(\"error\");\n                } else {\n                    $error = $temp_div;\n                }\n                if (callback_failure) {\n                    callback_failure();\n                }\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    };\n    button_options[PMA_messages.strPreviewSQL] = function () {\n        // Function for Previewing SQL\n        var $form = $('#index_frm');\n        PMA_previewSQL($form);\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog('close');\n    };\n    var $msgbox = PMA_ajaxShowMessage();\n    $.get(\"tbl_indexes.php\", url, function (data) {\n        if (typeof data !== 'undefined' && data.success === false) {\n            //in the case of an error, show the error message returned.\n            PMA_ajaxShowMessage(data.error, false);\n        } else {\n            PMA_ajaxRemoveMessage($msgbox);\n            // Show dialog if the request was successful\n            $div\n            .append(data.message)\n            .dialog({\n                title: title,\n                width: 450,\n                height: 350,\n                open: PMA_verifyColumnsProperties,\n                modal: true,\n                buttons: button_options,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            $div.find('.tblFooters').remove();\n            showIndexEditDialog($div);\n        }\n    }); // end $.get()\n}\n\nfunction showIndexEditDialog($outer)\n{\n    checkIndexType();\n    checkIndexName(\"index_frm\");\n    var $indexColumns = $('#index_columns');\n    $indexColumns.find('td').each(function () {\n        $(this).css(\"width\", $(this).width() + 'px');\n    });\n    $indexColumns.find('tbody').sortable({\n        axis: 'y',\n        containment: $indexColumns.find(\"tbody\"),\n        tolerance: 'pointer'\n    });\n    PMA_showHints($outer);\n    PMA_init_slider();\n    // Add a slider for selecting how many columns to add to the index\n    $outer.find('.slider').slider({\n        animate: true,\n        value: 1,\n        min: 1,\n        max: 16,\n        slide: function (event, ui) {\n            $(this).closest('fieldset').find('input[type=submit]').val(\n                PMA_sprintf(PMA_messages.strAddToIndex, ui.value)\n            );\n        }\n    });\n    $('div.add_fields').removeClass('hide');\n    // focus index size input on column picked\n    $outer.find('table#index_columns select').change(function () {\n        if ($(this).find(\"option:selected\").val() === '') {\n            return true;\n        }\n        $(this).closest(\"tr\").find(\"input\").focus();\n    });\n    // Focus the slider, otherwise it looks nearly transparent\n    $('a.ui-slider-handle').addClass('ui-state-focus');\n    // set focus on index name input, if empty\n    var input = $outer.find('input#input_index_name');\n    input.val() || input.focus();\n}\n\n/**\n * Function to display tooltips that were\n * generated on the PHP side by PMA_Util::showHint()\n *\n * @param object $div a div jquery object which specifies the\n *                    domain for searching for tooltips. If we\n *                    omit this parameter the function searches\n *                    in the whole body\n **/\nfunction PMA_showHints($div)\n{\n    if ($div === undefined || ! $div instanceof jQuery || $div.length === 0) {\n        $div = $(\"body\");\n    }\n    $div.find('.pma_hint').each(function () {\n        PMA_tooltip(\n            $(this).children('img'),\n            'img',\n            $(this).children('span').html()\n        );\n    });\n}\n\nAJAX.registerOnload('functions.js', function () {\n    PMA_showHints();\n});\n\nfunction PMA_mainMenuResizerCallback() {\n    // 5 px margin for jumping menu in Chrome\n    return $(document.body).width() - 5;\n}\n// This must be fired only once after the initial page load\n$(function () {\n    // Initialise the menu resize plugin\n    $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);\n    // register resize event\n    $(window).resize(function () {\n        $('#topmenu').menuResizer('resize');\n    });\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1], 10);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text;\n    if ($element.css('display') == 'none') {\n        text = '+ ';\n    } else {\n        text = '- ';\n    }\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    var right;\n    if ($('span.text_direction', $obj).text() == 'ltr') {\n        right = 'right';\n    } else {\n        right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h - 1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('td.toggleOn', $obj).width();\n    var off = $('td.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('td.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('td.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('td.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('td.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('div.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('div.container', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('div.container', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('div.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('span.callback', this).text();\n        var operator, url, removeClass, addClass;\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                operator = '-=';\n            } else {\n                operator = '+=';\n            }\n            url = $(this).find('td.toggleOff > span').text();\n            removeClass = 'on';\n            addClass = 'off';\n        } else {\n            if (right == 'right') {\n                operator = '+=';\n            } else {\n                operator = '-=';\n            }\n            url = $(this).find('td.toggleOn > span').text();\n            removeClass = 'off';\n            addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function (data) {\n            if (typeof data !== 'undefined' && data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.container').unbind('click');\n});\n/**\n * Initialise all toggle buttons\n */\nAJAX.registerOnload('functions.js', function () {\n    $('div.toggleAjax').each(function () {\n        var $button = $(this).show();\n        $button.find('img').each(function () {\n            if (this.complete) {\n                toggleButton($button);\n            } else {\n                $(this).load(function () {\n                    toggleButton($button);\n                });\n            }\n        });\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('change', 'select.pageselector');\n    $(document).off('click', 'a.formLinkSubmit');\n    $('#update_recent_tables').unbind('ready');\n    $('#sync_favorite_tables').unbind('ready');\n});\n\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Autosubmit page selector\n     */\n    $(document).on('change', 'select.pageselector', function (event) {\n        event.stopPropagation();\n        // Check where to load the new content\n        if ($(this).closest(\"#pma_navigation\").length === 0) {\n            // For the main page we don't need to do anything,\n            $(this).closest(\"form\").submit();\n        } else {\n            // but for the navigation we need to manually replace the content\n            PMA_navigationTreePagination($(this));\n        }\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('li.jsversioncheck').length > 0) {\n        $.getJSON('version_check.php', {'server' : PMA_commonParams.get('server')}, PMA_current_version);\n    }\n\n    if ($('#is_git_revision').length > 0) {\n        setTimeout(PMA_display_git_revision, 10);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_Util::linkOrButton() to be clickable\n     */\n    $(document).on('click', 'a.formLinkSubmit', function (e) {\n        if (! $(this).hasClass('requireConfirm')) {\n            submitFormLink($(this));\n            return false;\n        }\n    });\n\n    var $updateRecentTables = $('#update_recent_tables');\n    if ($updateRecentTables.length) {\n        $.get(\n            $updateRecentTables.attr('href'),\n            {no_debug: true},\n            function (data) {\n                if (typeof data !== 'undefined' && data.success === true) {\n                    $('#pma_recent_list').html(data.list);\n                }\n            }\n        );\n    }\n\n    // Sync favorite tables from localStorage to pmadb.\n    if ($('#sync_favorite_tables').length) {\n        $.ajax({\n            url: $('#sync_favorite_tables').attr(\"href\"),\n            cache: false,\n            type: 'POST',\n            data: {\n                favorite_tables: (isStorageSupported('localStorage') && typeof window.localStorage.favorite_tables !== 'undefined')\n                    ? window.localStorage.favorite_tables\n                    : '',\n                no_debug: true\n            },\n            success: function (data) {\n                // Update localStorage.\n                if (isStorageSupported('localStorage')) {\n                    window.localStorage.favorite_tables = data.favorite_tables;\n                }\n                $('#pma_favorite_list').html(data.list);\n            }\n        });\n    }\n}); // end of $()\n\n/**\n * Submits the form placed in place of a link due to the excessive url length\n *\n * @param $link anchor\n * @returns {Boolean}\n */\nfunction submitFormLink($link)\n{\n    if ($link.attr('href').indexOf('=') != -1) {\n        var data = $link.attr('href').substr($link.attr('href').indexOf('#') + 1).split('=', 2);\n        $link.parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n    }\n    $link.parents('form').submit();\n}\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        if ($this.data('slider_init_done')) {\n            return;\n        }\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#' + this.id, \"class\": 'ajax'})\n            .text($this.attr('title'))\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function () {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function () {\n                    $wrapper.toggle(!visible);\n                    $wrapper.parent().toggleClass(\"print_ignore\", visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        $this.removeAttr('title');\n        PMA_set_status_label($this);\n        $this.data('slider_init_done', 1);\n    });\n}\n\n/**\n * Initializes slider effect.\n */\nAJAX.registerOnload('functions.js', function () {\n    PMA_init_slider();\n});\n\n/**\n * Restores sliders to the state they were in before initialisation.\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        $this.removeData();\n        $this.parent().replaceWith($this);\n        $this.parent().children('a').remove();\n    });\n});\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param msg    A string containing the text to display\n * @param $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg === undefined || msg.length === 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj === undefined || ! $obj instanceof jQuery || $obj.length === 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length === 0) {\n            $('#page_content').prepend(\n                '<span id=\"PMA_slidingMessage\" ' +\n                'style=\"display: inline-block;\"></span>'\n            );\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div>' + msg + '</div>');\n            // highlight any sql before taking height;\n            PMA_highlightSQL($obj);\n            $obj.find('div')\n                .first()\n                .hide();\n            $obj\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        $obj.width('100%')\n            .html('<div>' + msg + '</div>');\n        // highlight any sql before taking height;\n        PMA_highlightSQL($obj);\n        var h = $obj\n            .find('div')\n            .first()\n            .hide()\n            .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function () {\n            // Set the height of the parent\n            // to the height of the child\n                $obj\n                .height(\n                    $obj\n                    .find('div')\n                    .first()\n                    .height()\n                );\n            });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\nAJAX.registerOnload('functions.js', function () {\n    var $elm = $('#sqlquery');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            codemirror_editor = PMA_getSQLEditor($elm);\n            codemirror_editor.focus();\n            codemirror_editor.on(\"blur\", updateQueryParameters);\n        } else {\n            // without codemirror\n            $elm.focus()\n                .bind('blur', updateQueryParameters);\n        }\n    }\n    PMA_highlightSQL($('body'));\n});\nAJAX.registerTeardown('functions.js', function () {\n    if (codemirror_editor) {\n        $('#sqlquery').text(codemirror_editor.getValue());\n        codemirror_editor.toTextArea();\n        codemirror_editor = false;\n    }\n});\nAJAX.registerOnload('functions.js', function () {\n    // initializes all lock-page elements lock-id and\n    // val-hash data property\n    $('#page_content form.lock-page textarea, ' +\n            '#page_content form.lock-page input[type=\"text\"], '+\n            '#page_content form.lock-page input[type=\"number\"], '+\n            '#page_content form.lock-page select').each(function (i) {\n        $(this).data('lock-id', i);\n        // val-hash is the hash of default value of the field\n        // so that it can be compared with new value hash\n        // to check whether field was modified or not.\n        $(this).data('val-hash', AJAX.hash($(this).val()));\n    });\n\n    // initializes lock-page elements (input types checkbox and radio buttons)\n    // lock-id and val-hash data property\n    $('#page_content form.lock-page input[type=\"checkbox\"], ' +\n            '#page_content form.lock-page input[type=\"radio\"]').each(function (i) {\n        $(this).data('lock-id', i);\n        $(this).data('val-hash', AJAX.hash($(this).is(\":checked\")));\n    });\n});\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p === null) ? true : p;\n        var is_msie = navigator.userAgent.indexOf('MSIE') > -1 || !!window.navigator.userAgent.match(/Trident.*rv\\:11\\./);\n        var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;\n        var is_safari = navigator.userAgent.indexOf(\"Safari\") > -1;\n        var is_opera = navigator.userAgent.indexOf(\"Presto\") > -1;\n        if (prevent) {\n            return this.each(function () {\n                if (is_msie || is_safari) {\n                    $(this).bind('selectstart', function () {\n                        return false;\n                    });\n                } else if (is_firefox) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if (is_opera) {\n                    $(this).bind('mousedown', function () {\n                        return false;\n                    });\n                } else {\n                    $(this).attr('unselectable', 'on');\n                }\n            });\n        } else {\n            return this.each(function () {\n                if (is_msie || is_safari) {\n                    $(this).unbind('selectstart');\n                } else if (is_firefox) {\n                    $(this).css('MozUserSelect', 'inherit');\n                } else if (is_opera) {\n                    $(this).unbind('mousedown');\n                } else {\n                    $(this).removeAttr('unselectable');\n                }\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value;\n        });\n    };\n})(jQuery);\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    var $td = $(td);\n    if ($td.is('.null')) {\n        return '';\n    } else if ((! $td.is('.to_be_saved')\n        || $td.is('.set'))\n        && $td.data('original_data')\n    ) {\n        return $td.data('original_data');\n    } else {\n        return $td.text();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', 'a.themeselect');\n    $(document).off('change', '.autosubmit');\n    $('a.take_theme').unbind('click');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Theme selector.\n     */\n    $(document).on('click', 'a.themeselect', function (e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $(document).on('change', '.autosubmit', function (e) {\n        $(this).closest('form').submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('a.take_theme').click(function (e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms.setTheme.elements.set_theme) {\n            window.opener.document.forms.setTheme.elements.set_theme.value = what;\n            window.opener.document.forms.setTheme.submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input#print').unbind('click');\n    $(document).off('click', 'a.create_view.ajax');\n    $(document).off('keydown', '#createViewDialog input, #createViewDialog select');\n    $(document).off('change', '#fkc_checkbox');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    $('input#print').click(printPage);\n    /**\n     * Ajaxification for the \"Create View\" action\n     */\n    $(document).on('click', 'a.create_view.ajax', function (e) {\n        e.preventDefault();\n        PMA_createViewDialog($(this));\n    });\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and used to submit the Ajax request when the ENTER key is pressed.\n     */\n    if ($('#createViewDialog').length !== 0) {\n        $(document).on('keydown', '#createViewDialog input, #createViewDialog select', function (e) {\n            if (e.which === 13) { // 13 is the ENTER key\n                e.preventDefault();\n\n                // with preventing default, selection by <select> tag\n                // was also prevented in IE\n                $(this).blur();\n\n                $(this).closest('.ui-dialog').find('.ui-button:first').click();\n            }\n        }); // end $(document).on()\n    }\n\n    syntaxHighlighter = PMA_getSQLEditor($('textarea[name=\"view[as]\"]'));\n\n});\n\nfunction PMA_createViewDialog($this)\n{\n    var $msg = PMA_ajaxShowMessage();\n    var syntaxHighlighter = null;\n    $.get($this.attr('href') + '&ajax_request=1&ajax_dialog=1', function (data) {\n        if (typeof data !== 'undefined' && data.success === true) {\n            PMA_ajaxRemoveMessage($msg);\n            var buttonOptions = {};\n            buttonOptions[PMA_messages.strGo] = function () {\n                if (typeof CodeMirror !== 'undefined') {\n                    syntaxHighlighter.save();\n                }\n                $msg = PMA_ajaxShowMessage();\n                $.get('view_create.php', $('#createViewDialog').find('form').serialize(), function (data) {\n                    PMA_ajaxRemoveMessage($msg);\n                    if (typeof data !== 'undefined' && data.success === true) {\n                        $('#createViewDialog').dialog(\"close\");\n                        $('.result_query').html(data.message);\n                        PMA_reloadNavigation();\n                    } else {\n                        PMA_ajaxShowMessage(data.error, false);\n                    }\n                });\n            };\n            buttonOptions[PMA_messages.strClose] = function () {\n                $(this).dialog(\"close\");\n            };\n            var $dialog = $('<div/>').attr('id', 'createViewDialog').append(data.message).dialog({\n                width: 600,\n                minWidth: 400,\n                modal: true,\n                buttons: buttonOptions,\n                title: PMA_messages.strCreateView,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            // Attach syntax highlighted editor\n            syntaxHighlighter = PMA_getSQLEditor($dialog.find('textarea'));\n            $('input:visible[type=text]', $dialog).first().focus();\n        } else {\n            PMA_ajaxShowMessage(data.error);\n        }\n    });\n}\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length === 0) {\n        var left = $('html').attr('dir') == 'ltr' ? 'left' : 'right';\n        $(\"#floating_menubar\")\n            .css('margin-' + left, $('#pma_navigation').width() + $('#pma_navigation_resizer').width())\n            .css(left, 0)\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'width': '100%',\n                'z-index': 99\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        // Allow the DOM to render, then adjust the padding on the body\n        setTimeout(function () {\n            $('body').css(\n                'padding-top',\n                $('#floating_menubar').outerHeight(true)\n            );\n            $('#topmenu').menuResizer('resize');\n        }, 4);\n    }\n});\n\n/**\n * Scrolls the page to the top if clicking the serverinfo bar\n */\n$(function () {\n    $(document).delegate(\"#serverinfo, #goto_pagetop\", \"click\", function (event) {\n        event.preventDefault();\n        $('html, body').animate({scrollTop: 0}, 'fast');\n    });\n});\n\nvar checkboxes_sel = \"input.checkall:checkbox:enabled\";\n/**\n * Watches checkboxes in a form to set the checkall box accordingly\n */\nvar checkboxes_changed = function () {\n    var $form = $(this.form);\n    // total number of checkboxes in current form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(document).on(\"change\", checkboxes_sel, checkboxes_changed);\n\n$(document).on(\"change\", \"input.checkall_box\", function () {\n    var is_checked = $(this).is(\":checked\");\n    $(this.form).find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Watches checkboxes in a sub form to set the sub checkall box accordingly\n */\nvar sub_checkboxes_changed = function () {\n    var $form = $(this).parent().parent();\n    // total number of checkboxes in current sub form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current sub form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.sub_checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(document).on(\"change\", checkboxes_sel + \", input.checkall_box:checkbox:enabled\", sub_checkboxes_changed);\n\n$(document).on(\"change\", \"input.sub_checkall_box\", function () {\n    var is_checked = $(this).is(\":checked\");\n    var $form = $(this).parent().parent();\n    $form.find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n\n/**\n * Formats a byte number to human-readable form\n *\n * @param bytes the bytes to format\n * @param optional subdecimals the number of digits after the point\n * @param optional pointchar the char to use as decimal point\n */\nfunction formatBytes(bytes, subdecimals, pointchar) {\n    if (!subdecimals) {\n        subdecimals = 0;\n    }\n    if (!pointchar) {\n        pointchar = '.';\n    }\n    var units = ['B', 'KiB', 'MiB', 'GiB'];\n    for (var i = 0; bytes > 1024 && i < units.length; i++) {\n        bytes /= 1024;\n    }\n    var factor = Math.pow(10, subdecimals);\n    bytes = Math.round(bytes * factor) / factor;\n    bytes = bytes.toString().split('.').join(pointchar);\n    return bytes + ' ' + units[i];\n}\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Opens pma more themes link in themes browser, in new window instead of popup\n     * This way, we don't break HTML validity\n     */\n    $(\"a._blank\").prop(\"target\", \"_blank\");\n    /**\n     * Reveal the login form to users with JS enabled\n     * and focus the appropriate input field\n     */\n    var $loginform = $('#loginform');\n    if ($loginform.length) {\n        $loginform.find('.js-show').show();\n        if ($('#input_username').val()) {\n            $('#input_password').focus();\n        } else {\n            $('#input_username').focus();\n        }\n    }\n});\n\n/**\n * Dynamically adjust the width of the boxes\n * on the table and db operations pages\n */\n(function () {\n    function DynamicBoxes() {\n        var $boxContainer = $('#boxContainer');\n        if ($boxContainer.length) {\n            var minWidth = $boxContainer.data('box-width');\n            var viewport = $(window).width() - $('#pma_navigation').width();\n            var slots = Math.floor(viewport / minWidth);\n            $boxContainer.children()\n            .each(function () {\n                if (viewport < minWidth) {\n                    $(this).width(minWidth);\n                } else {\n                    $(this).css('width', ((1 /  slots) * 100) + \"%\");\n                }\n            })\n            .removeClass('clearfloat')\n            .filter(':nth-child(' + slots + 'n+1)')\n            .addClass('clearfloat');\n        }\n    }\n    AJAX.registerOnload('functions.js', function () {\n        DynamicBoxes();\n    });\n    $(function () {\n        $(window).resize(DynamicBoxes);\n    });\n})();\n\n/**\n * Formats timestamp for display\n */\nfunction PMA_formatDateTime(date, seconds) {\n    var result = $.datepicker.formatDate('yy-mm-dd', date);\n    var timefmt = 'HH:mm';\n    if (seconds) {\n        timefmt = 'HH:mm:ss';\n    }\n    return result + ' ' + $.datepicker.formatTime(\n        timefmt, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds()\n        }\n    );\n}\n\n/**\n * Check than forms have less fields than max allowed by PHP.\n */\nfunction checkNumberOfFields() {\n    if (typeof maxInputVars === 'undefined') {\n        return false;\n    }\n    if (false === maxInputVars) {\n        return false;\n    }\n    $('form').each(function() {\n        var nbInputs = $(this).find(':input').length;\n        if (nbInputs > maxInputVars) {\n            var warning = PMA_sprintf(PMA_messages.strTooManyInputs, maxInputVars);\n            PMA_ajaxShowMessage(warning);\n            return false;\n        }\n        return true;\n    });\n\n    return true;\n}\n\n/**\n * Ignore the displayed php errors.\n * Simply removes the displayed errors.\n *\n * @param  clearPrevErrors whether to clear errors stored\n *             in $_SESSION['prev_errors'] at server\n *\n */\nfunction PMA_ignorePhpErrors(clearPrevErrors){\n    if (typeof(clearPrevErrors) === \"undefined\" ||\n        clearPrevErrors === null\n    ) {\n        str = false;\n    }\n    // send AJAX request to error_report.php with send_error_report=0, exception_type=php & token.\n    // It clears the prev_errors stored in session.\n    if(clearPrevErrors){\n        var $pmaReportErrorsForm = $('#pma_report_errors_form');\n        $pmaReportErrorsForm.find('input[name=\"send_error_report\"]').val(0); // change send_error_report to '0'\n        $pmaReportErrorsForm.submit();\n    }\n\n    // remove displayed errors\n    var $pmaErrors = $('#pma_errors');\n    $pmaErrors.fadeOut( \"slow\");\n    $pmaErrors.remove();\n}\n\n/**\n * checks whether browser supports web storage\n *\n * @param type the type of storage i.e. localStorage or sessionStorage\n *\n * @returns bool\n */\nfunction isStorageSupported(type)\n{\n    try {\n        window[type].setItem('PMATest', 'test');\n        // Check whether key-value pair was set successfully\n        if (window[type].getItem('PMATest') === 'test') {\n            // Supported, remove test variable from storage\n            window[type].removeItem('PMATest');\n            return true;\n        }\n    } catch(error) {\n        // Not supported\n        PMA_ajaxShowMessage(PMA_messages.strNoLocalStorage, false);\n    }\n    return false;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function(){\n    $(document).off('keydown', 'form input, form textarea, form select');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handle 'Ctrl/Alt + Enter' form submits\n     */\n    $('form input, form textarea, form select').on('keydown', function(e){\n        if((e.ctrlKey && e.which == 13) || (e.altKey && e.which == 13)) {\n            $form = $(this).closest('form');\n            if (! $form.find('input[type=\"submit\"]') ||\n                ! $form.find('input[type=\"submit\"]').click()\n            ) {\n                $form.submit();\n            }\n        }\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function(){\n    $(document).off('change', 'input[type=radio][name=\"pw_hash\"]');\n});\n\nAJAX.registerOnload('functions.js', function(){\n    /*\n     * Display warning regarding SSL when sha256_password\n     * method is selected\n     * Used in user_password.php (Change Password link on index.php)\n     */\n    $(document).on(\"change\", 'select#select_authentication_plugin_cp', function() {\n        if (this.value === 'sha256_password') {\n            $('#ssl_reqd_warning_cp').show();\n        } else {\n            $('#ssl_reqd_warning_cp').hide();\n        }\n    });\n});\n"], "fixing_code": ["/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * general function, usually for data manipulation pages\n *\n */\n\n/**\n * @var sql_box_locked lock for the sqlbox textarea in the querybox\n */\nvar sql_box_locked = false;\n\n/**\n * @var array holds elements which content should only selected once\n */\nvar only_once_elements = [];\n\n/**\n * @var   int   ajax_message_count   Number of AJAX messages shown since page load\n */\nvar ajax_message_count = 0;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the query editor in SQL tab\n */\nvar codemirror_editor = false;\n\n/**\n * @var codemirror_editor object containing CodeMirror editor of the inline query editor\n */\nvar codemirror_inline_editor = false;\n\n/**\n * @var sql_autocomplete_in_progress bool shows if Table/Column name autocomplete AJAX is in progress\n */\nvar sql_autocomplete_in_progress = false;\n\n/**\n * @var sql_autocomplete object containing list of columns in each table\n */\nvar sql_autocomplete = false;\n\n/**\n * @var sql_autocomplete_default_table string containing default table to autocomplete columns\n */\nvar sql_autocomplete_default_table = '';\n\n/**\n * @var chart_activeTimeouts object active timeouts that refresh the charts. When disabling a realtime chart, this can be used to stop the continuous ajax requests\n */\nvar chart_activeTimeouts = {};\n\n/**\n * @var central_column_list array to hold the columns in central list per db.\n */\nvar central_column_list = [];\n\n/**\n * @var primary_indexes array to hold 'Primary' index columns.\n */\nvar primary_indexes = [];\n\n/**\n * @var unique_indexes array to hold 'Unique' index columns.\n */\nvar unique_indexes = [];\n\n/**\n * @var indexes array to hold 'Index' columns.\n */\nvar indexes = [];\n\n/**\n * @var fulltext_indexes array to hold 'Fulltext' columns.\n */\nvar fulltext_indexes = [];\n\n/**\n * @var spatial_indexes array to hold 'Spatial' columns.\n */\nvar spatial_indexes = [];\n\n/**\n * Make sure that ajax requests will not be cached\n * by appending a random variable to their parameters\n */\n$.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var nocache = new Date().getTime() + \"\" + Math.floor(Math.random() * 1000000);\n    if (typeof options.data == \"string\") {\n        options.data += \"&_nocache=\" + nocache;\n    } else if (typeof options.data == \"object\") {\n        options.data = $.extend(originalOptions.data, {'_nocache' : nocache});\n    }\n});\n\n/**\n * Hanle redirect and reload flags send as part of AJAX requests\n *\n * @param data ajax response data\n */\nfunction PMA_handleRedirectAndReload(data) {\n    if (parseInt(data.redirect_flag) == 1) {\n        // add one more GET param to display session expiry msg\n        if (window.location.href.indexOf('?') === -1) {\n            window.location.href += '?session_expired=1';\n        } else {\n            window.location.href += '&session_expired=1';\n        }\n        window.location.reload();\n    } else if (parseInt(data.reload_flag) == 1) {\n        // remove the token param and reload\n        window.location.href = window.location.href.replace(/&?token=[^&#]*/g, \"\");\n        window.location.reload();\n    }\n}\n\n/**\n * Creates an SQL editor which supports auto completing etc.\n *\n * @param $textarea jQuery object wrapping the textarea to be made the editor\n * @param options   optional options for CodeMirror\n * @param resize    optional resizing ('vertical', 'horizontal', 'both')\n */\nfunction PMA_getSQLEditor($textarea, options, resize) {\n    if ($textarea.length > 0 && typeof CodeMirror !== 'undefined') {\n\n        // merge options for CodeMirror\n        var defaults = {\n            lineNumbers: true,\n            matchBrackets: true,\n            extraKeys: {\"Ctrl-Space\": \"autocomplete\"},\n            hintOptions: {\"completeSingle\": false, \"completeOnSingleClick\": true},\n            indentUnit: 4,\n            mode: \"text/x-mysql\",\n            lineWrapping: true\n        };\n\n        if (CodeMirror.sqlLint) {\n            $.extend(defaults, {\n                gutters: [\"CodeMirror-lint-markers\"],\n                lint: {\n                    \"getAnnotations\": CodeMirror.sqlLint,\n                    \"async\": true,\n                }\n            });\n        }\n\n        $.extend(true, defaults, options);\n\n        // create CodeMirror editor\n        var codemirrorEditor = CodeMirror.fromTextArea($textarea[0], defaults);\n        // allow resizing\n        if (! resize) {\n            resize = 'vertical';\n        }\n        var handles = '';\n        if (resize == 'vertical') {\n            handles = 'n, s';\n        }\n        if (resize == 'both') {\n            handles = 'all';\n        }\n        if (resize == 'horizontal') {\n            handles = 'e, w';\n        }\n        $(codemirrorEditor.getWrapperElement())\n            .css('resize', resize)\n            .resizable({\n                handles: handles,\n                resize: function() {\n                    codemirrorEditor.setSize($(this).width(), $(this).height());\n                }\n            });\n        // enable autocomplete\n        codemirrorEditor.on(\"inputRead\", codemirrorAutocompleteOnInputRead);\n\n        return codemirrorEditor;\n    }\n    return null;\n}\n\n/**\n * Clear text selection\n */\nfunction PMA_clearSelection() {\n    if (document.selection && document.selection.empty) {\n        document.selection.empty();\n    } else if (window.getSelection) {\n        var sel = window.getSelection();\n        if (sel.empty) {\n            sel.empty();\n        }\n        if (sel.removeAllRanges) {\n            sel.removeAllRanges();\n        }\n    }\n}\n\n/**\n * Create a jQuery UI tooltip\n *\n * @param $elements     jQuery object representing the elements\n * @param item          the item\n *                      (see http://api.jqueryui.com/tooltip/#option-items)\n * @param myContent     content of the tooltip\n * @param additionalOptions to override the default options\n *\n */\nfunction PMA_tooltip($elements, item, myContent, additionalOptions)\n{\n    if ($('#no_hint').length > 0) {\n        return;\n    }\n\n    var defaultOptions = {\n        content: myContent,\n        items:  item,\n        tooltipClass: \"tooltip\",\n        track: true,\n        show: false,\n        hide: false\n    };\n\n    $elements.tooltip($.extend(true, defaultOptions, additionalOptions));\n}\n\n/**\n * HTML escaping\n */\n\nfunction escapeHtml(unsafe) {\n    if (typeof(unsafe) != 'undefined') {\n        return unsafe\n            .toString()\n            .replace(/&/g, \"&amp;\")\n            .replace(/</g, \"&lt;\")\n            .replace(/>/g, \"&gt;\")\n            .replace(/\"/g, \"&quot;\")\n            .replace(/'/g, \"&#039;\");\n    } else {\n        return false;\n    }\n}\n\nfunction PMA_sprintf() {\n    return sprintf.apply(this, arguments);\n}\n\n/**\n * Hides/shows the default value input field, depending on the default type\n * Ticks the NULL checkbox if NULL is chosen as default value.\n */\nfunction PMA_hideShowDefaultValue($default_type)\n{\n    if ($default_type.val() == 'USER_DEFINED') {\n        $default_type.siblings('.default_value').show().focus();\n    } else {\n        $default_type.siblings('.default_value').hide();\n        if ($default_type.val() == 'NULL') {\n            var $null_checkbox = $default_type.closest('tr').find('.allow_null');\n            $null_checkbox.prop('checked', true);\n        }\n    }\n}\n\n/**\n * Hides/shows the input field for column expression based on whether\n * VIRTUAL/PERSISTENT is selected\n *\n * @param $virtuality virtuality dropdown\n */\nfunction PMA_hideShowExpression($virtuality)\n{\n    if ($virtuality.val() == '') {\n        $virtuality.siblings('.expression').hide();\n    } else {\n        $virtuality.siblings('.expression').show();\n    }\n}\n\n/**\n * Show notices for ENUM columns; add/hide the default value\n *\n */\nfunction PMA_verifyColumnsProperties()\n{\n    $(\"select.column_type\").each(function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(\"select.default_type\").each(function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $('select.virtuality').each(function () {\n        PMA_hideShowExpression($(this));\n    });\n}\n\n/**\n * Add a hidden field to the form to indicate that this will be an\n * Ajax request (only if this hidden field does not exist)\n *\n * @param $form object   the form\n */\nfunction PMA_prepareForAjaxRequest($form)\n{\n    if (! $form.find('input:hidden').is('#ajax_request_hidden')) {\n        $form.append('<input type=\"hidden\" id=\"ajax_request_hidden\" name=\"ajax_request\" value=\"true\" />');\n    }\n}\n\n/**\n * Generate a new password and copy it to the password input areas\n *\n * @param passwd_form object   the form that holds the password fields\n *\n * @return boolean  always true\n */\nfunction suggestPassword(passwd_form)\n{\n    // restrict the password to just letters and numbers to avoid problems:\n    // \"editors and viewers regard the password as multiple words and\n    // things like double click no longer work\"\n    var pwchars = \"abcdefhjmnpqrstuvwxyz23456789ABCDEFGHJKLMNPQRSTUVWYXZ\";\n    var passwordlength = 16;    // do we want that to be dynamic?  no, keep it simple :)\n    var passwd = passwd_form.generated_pw;\n    var randomWords = new Int32Array(passwordlength);\n\n    passwd.value = '';\n\n    // First we're going to try to use a built-in CSPRNG\n    if (window.crypto && window.crypto.getRandomValues) {\n        window.crypto.getRandomValues(randomWords);\n    }\n    // Because of course IE calls it msCrypto instead of being standard\n    else if (window.msCrypto && window.msCrypto.getRandomValues) {\n        window.msCrypto.getRandomValues(randomWords);\n    } else {\n        // Fallback to Math.random\n        for (var i = 0; i < passwordlength; i++) {\n            randomWords[i] = Math.floor(Math.random() * pwchars.length);\n        }\n    }\n\n    for (var i = 0; i < passwordlength; i++) {\n        passwd.value += pwchars.charAt(Math.abs(randomWords[i]) % pwchars.length);\n    }\n\n    passwd_form.text_pma_pw.value = passwd.value;\n    passwd_form.text_pma_pw2.value = passwd.value;\n    return true;\n}\n\n/**\n * Version string to integer conversion.\n */\nfunction parseVersionString(str)\n{\n    if (typeof(str) != 'string') { return false; }\n    var add = 0;\n    // Parse possible alpha/beta/rc/\n    var state = str.split('-');\n    if (state.length >= 2) {\n        if (state[1].substr(0, 2) == 'rc') {\n            add = - 20 - parseInt(state[1].substr(2), 10);\n        } else if (state[1].substr(0, 4) == 'beta') {\n            add =  - 40 - parseInt(state[1].substr(4), 10);\n        } else if (state[1].substr(0, 5) == 'alpha') {\n            add =  - 60 - parseInt(state[1].substr(5), 10);\n        } else if (state[1].substr(0, 3) == 'dev') {\n            /* We don't handle dev, it's git snapshot */\n            add = 0;\n        }\n    }\n    // Parse version\n    var x = str.split('.');\n    // Use 0 for non existing parts\n    var maj = parseInt(x[0], 10) || 0;\n    var min = parseInt(x[1], 10) || 0;\n    var pat = parseInt(x[2], 10) || 0;\n    var hotfix = parseInt(x[3], 10) || 0;\n    return  maj * 100000000 + min * 1000000 + pat * 10000 + hotfix * 100 + add;\n}\n\n/**\n * Indicates current available version on main page.\n */\nfunction PMA_current_version(data)\n{\n    if (data && data.version && data.date) {\n        var current = parseVersionString($('span.version').text());\n        var latest = parseVersionString(data.version);\n        var version_information_message = '<span class=\"latest\">' +\n            PMA_messages.strLatestAvailable +\n            ' ' + escapeHtml(data.version) +\n            '</span>';\n        if (latest > current) {\n            var message = PMA_sprintf(\n                PMA_messages.strNewerVersion,\n                escapeHtml(data.version),\n                escapeHtml(data.date)\n            );\n            var htmlClass = 'notice';\n            if (Math.floor(latest / 10000) === Math.floor(current / 10000)) {\n                /* Security update */\n                htmlClass = 'error';\n            }\n            $('#newer_version_notice').remove();\n            $('#maincontainer').after('<div id=\"newer_version_notice\" class=\"' + htmlClass + '\">' + message + '</div>');\n        }\n        if (latest === current) {\n            version_information_message = ' (' + PMA_messages.strUpToDate + ')';\n        }\n        var $liPmaVersion = $('#li_pma_version');\n        $liPmaVersion.find('span.latest').remove();\n        $liPmaVersion.append(version_information_message);\n    }\n}\n\n/**\n * Loads Git revision data from ajax for index.php\n */\nfunction PMA_display_git_revision()\n{\n    $('#is_git_revision').remove();\n    $('#li_pma_version_git').remove();\n    $.get(\n        \"index.php\",\n        {\n            \"server\": PMA_commonParams.get('server'),\n            \"token\": PMA_commonParams.get('token'),\n            \"git_revision\": true,\n            \"ajax_request\": true,\n            \"no_debug\": true\n        },\n        function (data) {\n            if (typeof data !== 'undefined' && data.success === true) {\n                $(data.message).insertAfter('#li_pma_version');\n            }\n        }\n    );\n}\n\n/**\n * for libraries/display_change_password.lib.php\n *     libraries/user_password.php\n *\n */\n\nfunction displayPasswordGenerateButton()\n{\n    $('#tr_element_before_generate_password').parent().append('<tr class=\"vmiddle\"><td>' + PMA_messages.strGeneratePassword + '</td><td><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></td></tr>');\n    $('#div_element_before_generate_password').parent().append('<div class=\"item\"><label for=\"button_generate_password\">' + PMA_messages.strGeneratePassword + ':</label><span class=\"options\"><input type=\"button\" class=\"button\" id=\"button_generate_password\" value=\"' + PMA_messages.strGenerate + '\" onclick=\"suggestPassword(this.form)\" /></span><input type=\"text\" name=\"generated_pw\" id=\"generated_pw\" /></div>');\n}\n\n/*\n * Adds a date/time picker to an element\n *\n * @param object  $this_element   a jQuery object pointing to the element\n */\nfunction PMA_addDatepicker($this_element, type, options)\n{\n    var showTimepicker = true;\n    if (type==\"date\") {\n        showTimepicker = false;\n    }\n\n    var defaultOptions = {\n        showOn: 'button',\n        buttonImage: themeCalendarImage, // defined in js/messages.php\n        buttonImageOnly: true,\n        stepMinutes: 1,\n        stepHours: 1,\n        showSecond: true,\n        showMillisec: true,\n        showMicrosec: true,\n        showTimepicker: showTimepicker,\n        showButtonPanel: false,\n        dateFormat: 'yy-mm-dd', // yy means year with four digits\n        timeFormat: 'HH:mm:ss.lc',\n        constrainInput: false,\n        altFieldTimeOnly: false,\n        showAnim: '',\n        beforeShow: function (input, inst) {\n            // Remember that we came from the datepicker; this is used\n            // in tbl_change.js by verificationsAfterFieldChange()\n            $this_element.data('comes_from', 'datepicker');\n            if ($(input).closest('.cEdit').length > 0) {\n                setTimeout(function () {\n                    inst.dpDiv.css({\n                        top: 0,\n                        left: 0,\n                        position: 'relative'\n                    });\n                }, 0);\n            }\n            // Fix wrong timepicker z-index, doesn't work without timeout\n            setTimeout(function () {\n                $('#ui-timepicker-div').css('z-index', $('#ui-datepicker-div').css('z-index'));\n            }, 0);\n        },\n        onSelect: function() {\n            $this_element.data('datepicker').inline = true;\n        },\n        onClose: function (dateText, dp_inst) {\n            // The value is no more from the date picker\n            $this_element.data('comes_from', '');\n            if (typeof $this_element.data('datepicker') !== 'undefined') {\n                $this_element.data('datepicker').inline = false;\n            }\n        }\n    };\n    if (type == \"datetime\" || type == \"timestamp\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"date\") {\n        $this_element.datetimepicker($.extend(defaultOptions, options));\n    }\n    else if (type == \"time\") {\n        $this_element.timepicker($.extend(defaultOptions, options));\n    }\n}\n\n/**\n * selects the content of a given object, f.e. a textarea\n *\n * @param element     object  element of which the content will be selected\n * @param lock        var     variable which holds the lock for this element\n *                              or true, if no lock exists\n * @param only_once   boolean if true this is only done once\n *                              f.e. only on first focus\n */\nfunction selectContent(element, lock, only_once)\n{\n    if (only_once && only_once_elements[element.name]) {\n        return;\n    }\n\n    only_once_elements[element.name] = true;\n\n    if (lock) {\n        return;\n    }\n\n    element.select();\n}\n\n/**\n * Displays a confirmation box before submitting a \"DROP/DELETE/ALTER\" query.\n * This function is called while clicking links\n *\n * @param theLink     object the link\n * @param theSqlQuery object the sql query to submit\n *\n * @return boolean  whether to run the query or not\n */\nfunction confirmLink(theLink, theSqlQuery)\n{\n    // Confirmation is not required in the configuration file\n    // or browser is Opera (crappy js implementation)\n    if (PMA_messages.strDoYouReally === '' || typeof(window.opera) != 'undefined') {\n        return true;\n    }\n\n    var is_confirmed = confirm(PMA_sprintf(PMA_messages.strDoYouReally, theSqlQuery));\n    if (is_confirmed) {\n        if ($(theLink).hasClass('formLinkSubmit')) {\n            var name = 'is_js_confirmed';\n            if ($(theLink).attr('href').indexOf('usesubform') != -1) {\n                name = 'subform[' + $(theLink).attr('href').substr('#').match(/usesubform\\[(\\d+)\\]/i)[1] + '][is_js_confirmed]';\n            }\n\n            $(theLink).parents('form').append('<input type=\"hidden\" name=\"' + name + '\" value=\"1\" />');\n        } else if (typeof(theLink.href) != 'undefined') {\n            theLink.href += '&is_js_confirmed=1';\n        } else if (typeof(theLink.form) != 'undefined') {\n            theLink.form.action += '?is_js_confirmed=1';\n        }\n    }\n\n    return is_confirmed;\n} // end of the 'confirmLink()' function\n\n/**\n * Displays an error message if a \"DROP DATABASE\" statement is submitted\n * while it isn't allowed, else confirms a \"DROP/DELETE/ALTER\" query before\n * submitting it if required.\n * This function is called by the 'checkSqlQuery()' js function.\n *\n * @param theForm1 object   the form\n * @param sqlQuery1 object  the sql query textarea\n *\n * @return boolean  whether to run the query or not\n *\n * @see     checkSqlQuery()\n */\nfunction confirmQuery(theForm1, sqlQuery1)\n{\n    // Confirmation is not required in the configuration file\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    // \"DROP DATABASE\" statement isn't allowed\n    if (PMA_messages.strNoDropDatabases !== '') {\n        var drop_re = new RegExp('(^|;)\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?DATABASE\\\\s', 'i');\n        if (drop_re.test(sqlQuery1.value)) {\n            alert(PMA_messages.strNoDropDatabases);\n            theForm1.reset();\n            sqlQuery1.focus();\n            return false;\n        } // end if\n    } // end if\n\n    // Confirms a \"DROP/DELETE/ALTER/TRUNCATE\" statement\n    //\n    // TODO: find a way (if possible) to use the parser-analyser\n    // for this kind of verification\n    // For now, I just added a ^ to check for the statement at\n    // beginning of expression\n\n    var do_confirm_re_0 = new RegExp('^\\\\s*DROP\\\\s+(IF EXISTS\\\\s+)?(TABLE|DATABASE|PROCEDURE)\\\\s', 'i');\n    var do_confirm_re_1 = new RegExp('^\\\\s*ALTER\\\\s+TABLE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+DROP\\\\s', 'i');\n    var do_confirm_re_2 = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var do_confirm_re_3 = new RegExp('^\\\\s*TRUNCATE\\\\s', 'i');\n\n    if (do_confirm_re_0.test(sqlQuery1.value) ||\n        do_confirm_re_1.test(sqlQuery1.value) ||\n        do_confirm_re_2.test(sqlQuery1.value) ||\n        do_confirm_re_3.test(sqlQuery1.value)) {\n        var message;\n        if (sqlQuery1.value.length > 100) {\n            message = sqlQuery1.value.substr(0, 100) + '\\n    ...';\n        } else {\n            message = sqlQuery1.value;\n        }\n        var is_confirmed = confirm(PMA_sprintf(PMA_messages.strDoYouReally, message));\n        // statement is confirmed -> update the\n        // \"is_js_confirmed\" form field so the confirm test won't be\n        // run on the server side and allows to submit the form\n        if (is_confirmed) {\n            theForm1.elements.is_js_confirmed.value = 1;\n            return true;\n        }\n        // statement is rejected -> do not submit the form\n        else {\n            window.focus();\n            sqlQuery1.focus();\n            return false;\n        } // end if (handle confirm box result)\n    } // end if (display confirm box)\n\n    return true;\n} // end of the 'confirmQuery()' function\n\n/**\n * Displays an error message if the user submitted the sql query form with no\n * sql query, else checks for \"DROP/DELETE/ALTER\" statements\n *\n * @param theForm object the form\n *\n * @return boolean  always false\n *\n * @see     confirmQuery()\n */\nfunction checkSqlQuery(theForm)\n{\n    // get the textarea element containing the query\n    var sqlQuery;\n    if (codemirror_editor) {\n        codemirror_editor.save();\n        sqlQuery = codemirror_editor.getValue();\n    } else {\n        sqlQuery = theForm.elements.sql_query.value;\n    }\n    var isEmpty  = 1;\n    var space_re = new RegExp('\\\\s+');\n    if (typeof(theForm.elements.sql_file) != 'undefined' &&\n            theForm.elements.sql_file.value.replace(space_re, '') !== '') {\n        return true;\n    }\n    if (isEmpty && typeof(theForm.elements.id_bookmark) != 'undefined' &&\n            (theForm.elements.id_bookmark.value !== null || theForm.elements.id_bookmark.value !== '') &&\n            theForm.elements.id_bookmark.selectedIndex !== 0) {\n        return true;\n    }\n    // Checks for \"DROP/DELETE/ALTER\" statements\n    if (sqlQuery.replace(space_re, '') !== '') {\n        return confirmQuery(theForm, sqlQuery);\n    }\n    theForm.reset();\n    isEmpty = 1;\n\n    if (isEmpty) {\n        alert(PMA_messages.strFormEmpty);\n        codemirror_editor.focus();\n        return false;\n    }\n\n    return true;\n} // end of the 'checkSqlQuery()' function\n\n/**\n * Check if a form's element is empty.\n * An element containing only spaces is also considered empty\n *\n * @param object   the form\n * @param string   the name of the form field to put the focus on\n *\n * @return boolean  whether the form field is empty or not\n */\nfunction emptyCheckTheField(theForm, theFieldName)\n{\n    var theField = theForm.elements[theFieldName];\n    var space_re = new RegExp('\\\\s+');\n    return theField.value.replace(space_re, '') === '';\n} // end of the 'emptyCheckTheField()' function\n\n/**\n * Ensures a value submitted in a form is numeric and is in a range\n *\n * @param object   the form\n * @param string   the name of the form field to check\n * @param integer  the minimum authorized value\n * @param integer  the maximum authorized value\n *\n * @return boolean  whether a valid number has been submitted or not\n */\nfunction checkFormElementInRange(theForm, theFieldName, message, min, max)\n{\n    var theField         = theForm.elements[theFieldName];\n    var val              = parseInt(theField.value, 10);\n\n    if (typeof(min) == 'undefined') {\n        min = 0;\n    }\n    if (typeof(max) == 'undefined') {\n        max = Number.MAX_VALUE;\n    }\n\n    // It's not a number\n    if (isNaN(val)) {\n        theField.select();\n        alert(PMA_messages.strEnterValidNumber);\n        theField.focus();\n        return false;\n    }\n    // It's a number but it is not between min and max\n    else if (val < min || val > max) {\n        theField.select();\n        alert(PMA_sprintf(message, val));\n        theField.focus();\n        return false;\n    }\n    // It's a valid number\n    else {\n        theField.value = val;\n    }\n    return true;\n\n} // end of the 'checkFormElementInRange()' function\n\n\nfunction checkTableEditForm(theForm, fieldsCnt)\n{\n    // TODO: avoid sending a message if user just wants to add a line\n    // on the form but has not completed at least one field name\n\n    var atLeastOneField = 0;\n    var i, elm, elm2, elm3, val, id;\n\n    for (i = 0; i < fieldsCnt; i++) {\n        id = \"#field_\" + i + \"_2\";\n        elm = $(id);\n        val = elm.val();\n        if (val == 'VARCHAR' || val == 'CHAR' || val == 'BIT' || val == 'VARBINARY' || val == 'BINARY') {\n            elm2 = $(\"#field_\" + i + \"_3\");\n            val = parseInt(elm2.val(), 10);\n            elm3 = $(\"#field_\" + i + \"_1\");\n            if (isNaN(val) && elm3.val() !== \"\") {\n                elm2.select();\n                alert(PMA_messages.strEnterValidLength);\n                elm2.focus();\n                return false;\n            }\n        }\n\n        if (atLeastOneField === 0) {\n            id = \"field_\" + i + \"_1\";\n            if (!emptyCheckTheField(theForm, id)) {\n                atLeastOneField = 1;\n            }\n        }\n    }\n    if (atLeastOneField === 0) {\n        var theField = theForm.elements.field_0_1;\n        alert(PMA_messages.strFormEmpty);\n        theField.focus();\n        return false;\n    }\n\n    // at least this section is under jQuery\n    var $input = $(\"input.textfield[name='table']\");\n    if ($input.val() === \"\") {\n        alert(PMA_messages.strFormEmpty);\n        $input.focus();\n        return false;\n    }\n\n    return true;\n} // enf of the 'checkTableEditForm()' function\n\n/**\n * True if last click is to check a row.\n */\nvar last_click_checked = false;\n\n/**\n * Zero-based index of last clicked row.\n * Used to handle the shift + click event in the code above.\n */\nvar last_clicked_row = -1;\n\n/**\n * Zero-based index of last shift clicked row.\n */\nvar last_shift_clicked_row = -1;\n\nvar _idleSecondsCounter = 0;\nvar IncInterval;\nvar updateTimeout;\nAJAX.registerTeardown('functions.js', function () {\n    clearTimeout(updateTimeout);\n    clearInterval(IncInterval);\n    $(document).off('mousemove');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    document.onclick = function() {\n        _idleSecondsCounter = 0;\n    };\n    $(document).on('mousemove',function() {\n        _idleSecondsCounter = 0;\n    });\n    document.onkeypress = function() {\n        _idleSecondsCounter = 0;\n    };\n\n    function SetIdleTime() {\n        _idleSecondsCounter++;\n    }\n    function UpdateIdleTime() {\n        var href = 'index.php';\n        var params = {\n                'ajax_request' : true,\n                'token' : PMA_commonParams.get('token'),\n                'server' : PMA_commonParams.get('server'),\n                'db' : PMA_commonParams.get('db'),\n                'access_time':_idleSecondsCounter\n            };\n        $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        if (PMA_commonParams.get('LoginCookieValidity')-_idleSecondsCounter > 5) {\n                            var interval = (PMA_commonParams.get('LoginCookieValidity') - _idleSecondsCounter - 5) * 1000;\n                            if (interval > Math.pow(2, 31) - 1) { // max value for setInterval() function\n                                interval = Math.pow(2, 31) - 1;\n                            }\n                            updateTimeout = window.setTimeout(UpdateIdleTime, interval);\n                        } else {\n                            updateTimeout = window.setTimeout(UpdateIdleTime, 2000);\n                        }\n                    } else { //timeout occurred\n                        window.location.reload(true);\n                        clearInterval(IncInterval);\n                    }\n                }\n            });\n    }\n    if (PMA_commonParams.get('logged_in') && PMA_commonParams.get('auth_type') == 'cookie') {\n        IncInterval = window.setInterval(SetIdleTime, 1000);\n        var interval = (PMA_commonParams.get('LoginCookieValidity') - 5) * 1000;\n        if (interval > Math.pow(2, 31) - 1) { // max value for setInterval() function\n            interval = Math.pow(2, 31) - 1;\n        }\n        updateTimeout = window.setTimeout(UpdateIdleTime, interval);\n    }\n});\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', 'input:checkbox.checkall');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Row marking in horizontal mode (use \"on\" so that it works also for\n     * next pages reached via AJAX); a tr may have the class noclick to remove\n     * this behavior.\n     */\n\n    $(document).on('click', 'input:checkbox.checkall', function (e) {\n        $this = $(this);\n        var $tr = $this.closest('tr');\n        var $table = $this.closest('table');\n\n        if (!e.shiftKey || last_clicked_row == -1) {\n            // usual click\n\n            var $checkbox = $tr.find(':checkbox.checkall');\n            var checked = $this.prop('checked');\n            $checkbox.prop('checked', checked).trigger('change');\n            if (checked) {\n                $tr.addClass('marked');\n            } else {\n                $tr.removeClass('marked');\n            }\n            last_click_checked = checked;\n\n            // remember the last clicked row\n            last_clicked_row = last_click_checked ? $table.find('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr) : -1;\n            last_shift_clicked_row = -1;\n        } else {\n            // handle the shift click\n            PMA_clearSelection();\n            var start, end;\n\n            // clear last shift click result\n            if (last_shift_clicked_row >= 0) {\n                if (last_shift_clicked_row >= last_clicked_row) {\n                    start = last_clicked_row;\n                    end = last_shift_clicked_row;\n                } else {\n                    start = last_shift_clicked_row;\n                    end = last_clicked_row;\n                }\n                $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                    .slice(start, end + 1)\n                    .removeClass('marked')\n                    .find(':checkbox')\n                    .prop('checked', false)\n                    .trigger('change');\n            }\n\n            // handle new shift click\n            var curr_row = $table.find('tr.odd:not(.noclick), tr.even:not(.noclick)').index($tr);\n            if (curr_row >= last_clicked_row) {\n                start = last_clicked_row;\n                end = curr_row;\n            } else {\n                start = curr_row;\n                end = last_clicked_row;\n            }\n            $tr.parent().find('tr.odd:not(.noclick), tr.even:not(.noclick)')\n                .slice(start, end + 1)\n                .addClass('marked')\n                .find(':checkbox')\n                .prop('checked', true)\n                .trigger('change');\n\n            // remember the last shift clicked row\n            last_shift_clicked_row = curr_row;\n        }\n    });\n\n    addDateTimePicker();\n\n    /**\n     * Add attribute to text boxes for iOS devices (based on bugID: 3508912)\n     */\n    if (navigator.userAgent.match(/(iphone|ipod|ipad)/i)) {\n        $('input[type=text]').attr('autocapitalize', 'off').attr('autocorrect', 'off');\n    }\n});\n\n/**\n * Row highlighting in horizontal mode (use \"on\"\n * so that it works also for pages reached via AJAX)\n */\n/*AJAX.registerOnload('functions.js', function () {\n    $(document).on('hover', 'tr.odd, tr.even',function (event) {\n        var $tr = $(this);\n        $tr.toggleClass('hover',event.type=='mouseover');\n        $tr.children().toggleClass('hover',event.type=='mouseover');\n    });\n})*/\n\n/**\n * This array is used to remember mark status of rows in browse mode\n */\nvar marked_row = [];\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usually a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction markAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', true)\n    .trigger(\"change\")\n    .parents(\"tr\").addClass(\"marked\");\n    return true;\n}\n\n/**\n * marks all rows and selects its first checkbox inside the given element\n * the given element is usually a table or a div containing the table or tables\n *\n * @param container    DOM element\n */\nfunction unMarkAllRows(container_id)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox:enabled\").prop('checked', false)\n    .trigger(\"change\")\n    .parents(\"tr\").removeClass(\"marked\");\n    return true;\n}\n\n/**\n * Checks/unchecks all checkbox in given container (f.e. a form, fieldset or div)\n *\n * @param string   container_id  the container id\n * @param boolean  state         new value for checkbox (true or false)\n * @return boolean  always true\n */\nfunction setCheckboxes(container_id, state)\n{\n\n    $(\"#\" + container_id).find(\"input:checkbox\").prop('checked', state);\n    return true;\n} // end of the 'setCheckboxes()' function\n\n/**\n  * Checks/unchecks all options of a <select> element\n  *\n  * @param string   the form name\n  * @param string   the element name\n  * @param boolean  whether to check or to uncheck options\n  *\n  * @return boolean  always true\n  */\nfunction setSelectOptions(the_form, the_select, do_check)\n{\n    $(\"form[name='\" + the_form + \"'] select[name='\" + the_select + \"']\").find(\"option\").prop('selected', do_check);\n    return true;\n} // end of the 'setSelectOptions()' function\n\n/**\n * Sets current value for query box.\n */\nfunction setQuery(query)\n{\n    if (codemirror_editor) {\n        codemirror_editor.setValue(query);\n        codemirror_editor.focus();\n    } else {\n        document.sqlform.sql_query.value = query;\n        document.sqlform.sql_query.focus();\n    }\n}\n\n/**\n * Handles 'Simulate query' button on SQL query box.\n *\n * @return void\n */\nfunction PMA_handleSimulateQueryButton()\n{\n    var update_re = new RegExp('^\\\\s*UPDATE\\\\s+((`[^`]+`)|([A-Za-z0-9_$]+))\\\\s+SET\\\\s', 'i');\n    var delete_re = new RegExp('^\\\\s*DELETE\\\\s+FROM\\\\s', 'i');\n    var query = '';\n\n    if (codemirror_editor) {\n        query = codemirror_editor.getValue();\n    } else {\n        query = $('#sqlquery').val();\n    }\n\n    var $simulateDml = $('#simulate_dml');\n    if (update_re.test(query) || delete_re.test(query)) {\n        if (! $simulateDml.length) {\n            $('#button_submit_query')\n            .before('<input type=\"button\" id=\"simulate_dml\"' +\n                'tabindex=\"199\" value=\"' +\n                PMA_messages.strSimulateDML +\n                '\" />');\n        }\n    } else {\n        if ($simulateDml.length) {\n            $simulateDml.remove();\n        }\n    }\n}\n\n/**\n  * Create quick sql statements.\n  *\n  */\nfunction insertQuery(queryType)\n{\n    if (queryType == \"clear\") {\n        setQuery('');\n        return;\n    } else if (queryType == \"format\") {\n        if (codemirror_editor) {\n            $('#querymessage').html(PMA_messages.strFormatting +\n                '&nbsp;<img class=\"ajaxIcon\" src=\"' +\n                pmaThemeImage + 'ajax_clock_small.gif\" alt=\"\">');\n            var href = 'db_sql_format.php';\n            var params = {\n                'ajax_request': true,\n                'token': PMA_commonParams.get('token'),\n                'sql': codemirror_editor.getValue()\n            };\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        codemirror_editor.setValue(data.sql);\n                    }\n                    $('#querymessage').html('');\n                }\n            });\n        }\n        return;\n    } else if (queryType == \"saved\") {\n        if ($.cookie('auto_saved_sql')) {\n            setQuery($.cookie('auto_saved_sql'));\n        } else {\n            PMA_ajaxShowMessage(PMA_messages.strNoAutoSavedQuery);\n        }\n        return;\n    }\n\n    var query = \"\";\n    var myListBox = document.sqlform.dummy;\n    var table = document.sqlform.table.value;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var valDis = \"\";\n        var editDis = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            NbSelect++;\n            if (NbSelect > 1) {\n                columnsList += \", \";\n                valDis += \",\";\n                editDis += \",\";\n            }\n            columnsList += myListBox.options[i].value;\n            valDis += \"[value-\" + NbSelect + \"]\";\n            editDis += myListBox.options[i].value + \"=[value-\" + NbSelect + \"]\";\n        }\n        if (queryType == \"selectall\") {\n            query = \"SELECT * FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"select\") {\n            query = \"SELECT \" + columnsList + \" FROM `\" + table + \"` WHERE 1\";\n        } else if (queryType == \"insert\") {\n            query = \"INSERT INTO `\" + table + \"`(\" + columnsList + \") VALUES (\" + valDis + \")\";\n        } else if (queryType == \"update\") {\n            query = \"UPDATE `\" + table + \"` SET \" + editDis + \" WHERE 1\";\n        } else if (queryType == \"delete\") {\n            query = \"DELETE FROM `\" + table + \"` WHERE 1\";\n        }\n        setQuery(query);\n        sql_box_locked = false;\n    }\n}\n\n\n/**\n  * Inserts multiple fields.\n  *\n  */\nfunction insertValueQuery()\n{\n    var myQuery = document.sqlform.sql_query;\n    var myListBox = document.sqlform.dummy;\n\n    if (myListBox.options.length > 0) {\n        sql_box_locked = true;\n        var columnsList = \"\";\n        var NbSelect = 0;\n        for (var i = 0; i < myListBox.options.length; i++) {\n            if (myListBox.options[i].selected) {\n                NbSelect++;\n                if (NbSelect > 1) {\n                    columnsList += \", \";\n                }\n                columnsList += myListBox.options[i].value;\n            }\n        }\n\n        /* CodeMirror support */\n        if (codemirror_editor) {\n            codemirror_editor.replaceSelection(columnsList);\n        //IE support\n        } else if (document.selection) {\n            myQuery.focus();\n            var sel = document.selection.createRange();\n            sel.text = columnsList;\n            document.sqlform.insert.focus();\n        }\n        //MOZILLA/NETSCAPE support\n        else if (document.sqlform.sql_query.selectionStart || document.sqlform.sql_query.selectionStart == \"0\") {\n            var startPos = document.sqlform.sql_query.selectionStart;\n            var endPos = document.sqlform.sql_query.selectionEnd;\n            var SqlString = document.sqlform.sql_query.value;\n\n            myQuery.value = SqlString.substring(0, startPos) + columnsList + SqlString.substring(endPos, SqlString.length);\n        } else {\n            myQuery.value += columnsList;\n        }\n        sql_box_locked = false;\n    }\n}\n\n/**\n * Updates the input fields for the parameters based on the query\n */\nfunction updateQueryParameters() {\n\n    if ($('#parameterized').is(':checked')) {\n        var query = codemirror_editor ? codemirror_editor.getValue() : $('#sqlquery').val();\n\n        var allParameters = query.match(/:[a-zA-Z0-9_]+/g);\n         var parameters = [];\n         // get unique parameters\n         if (allParameters) {\n             $.each(allParameters, function(i, parameter){\n                 if ($.inArray(parameter, parameters) === -1) {\n                     parameters.push(parameter);\n                 }\n             });\n         }\n\n         var $temp = $('<div />');\n         $temp.append($('#parametersDiv').children());\n         $('#parametersDiv').empty();\n\n         $.each(parameters, function (i, parameter) {\n             var paramName = parameter.substring(1);\n             var $param = $temp.find('#paramSpan_' + paramName );\n             if (! $param.length) {\n                 $param = $('<span class=\"parameter\" id=\"paramSpan_' + paramName + '\" />');\n                 $('<label for=\"param_' + paramName + '\" />').text(parameter).appendTo($param);\n                 $('<input type=\"text\" name=\"parameters[' + parameter + ']\" id=\"param_' + paramName + '\" />').appendTo($param);\n             }\n             $('#parametersDiv').append($param);\n         });\n    } else {\n        $('#parametersDiv').empty();\n    }\n}\n\n/**\n * Add a date/time picker to each element that needs it\n * (only when jquery-ui-timepicker-addon.js is loaded)\n */\nfunction addDateTimePicker() {\n    if ($.timepicker !== undefined) {\n        $('input.timefield, input.datefield, input.datetimefield').each(function () {\n\n            var decimals = $(this).parent().attr('data-decimals');\n            var type = $(this).parent().attr('data-type');\n\n            var showMillisec = false;\n            var showMicrosec = false;\n            var timeFormat = 'HH:mm:ss';\n            // check for decimal places of seconds\n            if (decimals > 0 && type.indexOf('time') != -1){\n                if (decimals > 3) {\n                    showMillisec = true;\n                    showMicrosec = true;\n                    timeFormat = 'HH:mm:ss.lc';\n                } else {\n                    showMillisec = true;\n                    timeFormat = 'HH:mm:ss.l';\n                }\n            }\n            PMA_addDatepicker($(this), type, {\n                showMillisec: showMillisec,\n                showMicrosec: showMicrosec,\n                timeFormat: timeFormat\n            });\n        });\n    }\n}\n\n/**\n  * Refresh/resize the WYSIWYG scratchboard\n  */\nfunction refreshLayout()\n{\n    var $elm = $('#pdflayout');\n    var orientation = $('#orientation_opt').val();\n    var paper = 'A4';\n    var $paperOpt = $('#paper_opt');\n    if ($paperOpt.length == 1) {\n        paper = $paperOpt.val();\n    }\n    var posa = 'y';\n    var posb = 'x';\n    if (orientation == 'P') {\n        posa = 'x';\n        posb = 'y';\n    }\n    $elm.css('width', pdfPaperSize(paper, posa) + 'px');\n    $elm.css('height', pdfPaperSize(paper, posb) + 'px');\n}\n\n/**\n * Initializes positions of elements.\n */\nfunction TableDragInit() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var number = $this.data('number');\n        var x = $('#c_table_' + number + '_x').val();\n        var y = $('#c_table_' + number + '_y').val();\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n        /* Make elements draggable */\n        $this.draggable({\n            containment: \"parent\",\n            drag: function (evt, ui) {\n                var number = $this.data('number');\n                $('#c_table_' + number + '_x').val(parseInt(ui.position.left, 10));\n                $('#c_table_' + number + '_y').val(parseInt(ui.position.top, 10));\n            }\n        });\n    });\n}\n\n/**\n * Resets drag and drop positions.\n */\nfunction resetDrag() {\n    $('.pdflayout_table').each(function () {\n        var $this = $(this);\n        var x = $this.data('x');\n        var y = $this.data('y');\n        $this.css('left', x + 'px');\n        $this.css('top', y + 'px');\n    });\n}\n\n/**\n * User schema handlers.\n */\n$(function () {\n    /* Move in scratchboard on manual change */\n    $(document).on('change', '.position-change', function () {\n        var $this = $(this);\n        var $elm = $('#table_' + $this.data('number'));\n        $elm.css($this.data('axis'), $this.val() + 'px');\n    });\n    /* Refresh on paper size/orientation change */\n    $(document).on('change', '.paper-change', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'visible') {\n            refreshLayout();\n            TableDragInit();\n        }\n    });\n    /* Show/hide the WYSIWYG scratchboard */\n    $(document).on('click', '#toggle-dragdrop', function () {\n        var $elm = $('#pdflayout');\n        if ($elm.css('visibility') == 'hidden') {\n            refreshLayout();\n            TableDragInit();\n            $elm.css('visibility', 'visible');\n            $elm.css('display', 'block');\n            $('#showwysiwyg').val('1');\n        } else {\n            $elm.css('visibility', 'hidden');\n            $elm.css('display', 'none');\n            $('#showwysiwyg').val('0');\n        }\n    });\n    /* Reset scratchboard */\n    $(document).on('click', '#reset-dragdrop', function () {\n        resetDrag();\n    });\n});\n\n/**\n * Returns paper sizes for a given format\n */\nfunction pdfPaperSize(format, axis)\n{\n    switch (format.toUpperCase()) {\n    case '4A0':\n        if (axis == 'x') {\n            return 4767.87;\n        } else {\n            return 6740.79;\n        }\n        break;\n    case '2A0':\n        if (axis == 'x') {\n            return 3370.39;\n        } else {\n            return 4767.87;\n        }\n        break;\n    case 'A0':\n        if (axis == 'x') {\n            return 2383.94;\n        } else {\n            return 3370.39;\n        }\n        break;\n    case 'A1':\n        if (axis == 'x') {\n            return 1683.78;\n        } else {\n            return 2383.94;\n        }\n        break;\n    case 'A2':\n        if (axis == 'x') {\n            return 1190.55;\n        } else {\n            return 1683.78;\n        }\n        break;\n    case 'A3':\n        if (axis == 'x') {\n            return 841.89;\n        } else {\n            return 1190.55;\n        }\n        break;\n    case 'A4':\n        if (axis == 'x') {\n            return 595.28;\n        } else {\n            return 841.89;\n        }\n        break;\n    case 'A5':\n        if (axis == 'x') {\n            return 419.53;\n        } else {\n            return 595.28;\n        }\n        break;\n    case 'A6':\n        if (axis == 'x') {\n            return 297.64;\n        } else {\n            return 419.53;\n        }\n        break;\n    case 'A7':\n        if (axis == 'x') {\n            return 209.76;\n        } else {\n            return 297.64;\n        }\n        break;\n    case 'A8':\n        if (axis == 'x') {\n            return 147.40;\n        } else {\n            return 209.76;\n        }\n        break;\n    case 'A9':\n        if (axis == 'x') {\n            return 104.88;\n        } else {\n            return 147.40;\n        }\n        break;\n    case 'A10':\n        if (axis == 'x') {\n            return 73.70;\n        } else {\n            return 104.88;\n        }\n        break;\n    case 'B0':\n        if (axis == 'x') {\n            return 2834.65;\n        } else {\n            return 4008.19;\n        }\n        break;\n    case 'B1':\n        if (axis == 'x') {\n            return 2004.09;\n        } else {\n            return 2834.65;\n        }\n        break;\n    case 'B2':\n        if (axis == 'x') {\n            return 1417.32;\n        } else {\n            return 2004.09;\n        }\n        break;\n    case 'B3':\n        if (axis == 'x') {\n            return 1000.63;\n        } else {\n            return 1417.32;\n        }\n        break;\n    case 'B4':\n        if (axis == 'x') {\n            return 708.66;\n        } else {\n            return 1000.63;\n        }\n        break;\n    case 'B5':\n        if (axis == 'x') {\n            return 498.90;\n        } else {\n            return 708.66;\n        }\n        break;\n    case 'B6':\n        if (axis == 'x') {\n            return 354.33;\n        } else {\n            return 498.90;\n        }\n        break;\n    case 'B7':\n        if (axis == 'x') {\n            return 249.45;\n        } else {\n            return 354.33;\n        }\n        break;\n    case 'B8':\n        if (axis == 'x') {\n            return 175.75;\n        } else {\n            return 249.45;\n        }\n        break;\n    case 'B9':\n        if (axis == 'x') {\n            return 124.72;\n        } else {\n            return 175.75;\n        }\n        break;\n    case 'B10':\n        if (axis == 'x') {\n            return 87.87;\n        } else {\n            return 124.72;\n        }\n        break;\n    case 'C0':\n        if (axis == 'x') {\n            return 2599.37;\n        } else {\n            return 3676.54;\n        }\n        break;\n    case 'C1':\n        if (axis == 'x') {\n            return 1836.85;\n        } else {\n            return 2599.37;\n        }\n        break;\n    case 'C2':\n        if (axis == 'x') {\n            return 1298.27;\n        } else {\n            return 1836.85;\n        }\n        break;\n    case 'C3':\n        if (axis == 'x') {\n            return 918.43;\n        } else {\n            return 1298.27;\n        }\n        break;\n    case 'C4':\n        if (axis == 'x') {\n            return 649.13;\n        } else {\n            return 918.43;\n        }\n        break;\n    case 'C5':\n        if (axis == 'x') {\n            return 459.21;\n        } else {\n            return 649.13;\n        }\n        break;\n    case 'C6':\n        if (axis == 'x') {\n            return 323.15;\n        } else {\n            return 459.21;\n        }\n        break;\n    case 'C7':\n        if (axis == 'x') {\n            return 229.61;\n        } else {\n            return 323.15;\n        }\n        break;\n    case 'C8':\n        if (axis == 'x') {\n            return 161.57;\n        } else {\n            return 229.61;\n        }\n        break;\n    case 'C9':\n        if (axis == 'x') {\n            return 113.39;\n        } else {\n            return 161.57;\n        }\n        break;\n    case 'C10':\n        if (axis == 'x') {\n            return 79.37;\n        } else {\n            return 113.39;\n        }\n        break;\n    case 'RA0':\n        if (axis == 'x') {\n            return 2437.80;\n        } else {\n            return 3458.27;\n        }\n        break;\n    case 'RA1':\n        if (axis == 'x') {\n            return 1729.13;\n        } else {\n            return 2437.80;\n        }\n        break;\n    case 'RA2':\n        if (axis == 'x') {\n            return 1218.90;\n        } else {\n            return 1729.13;\n        }\n        break;\n    case 'RA3':\n        if (axis == 'x') {\n            return 864.57;\n        } else {\n            return 1218.90;\n        }\n        break;\n    case 'RA4':\n        if (axis == 'x') {\n            return 609.45;\n        } else {\n            return 864.57;\n        }\n        break;\n    case 'SRA0':\n        if (axis == 'x') {\n            return 2551.18;\n        } else {\n            return 3628.35;\n        }\n        break;\n    case 'SRA1':\n        if (axis == 'x') {\n            return 1814.17;\n        } else {\n            return 2551.18;\n        }\n        break;\n    case 'SRA2':\n        if (axis == 'x') {\n            return 1275.59;\n        } else {\n            return 1814.17;\n        }\n        break;\n    case 'SRA3':\n        if (axis == 'x') {\n            return 907.09;\n        } else {\n            return 1275.59;\n        }\n        break;\n    case 'SRA4':\n        if (axis == 'x') {\n            return 637.80;\n        } else {\n            return 907.09;\n        }\n        break;\n    case 'LETTER':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 792.00;\n        }\n        break;\n    case 'LEGAL':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 1008.00;\n        }\n        break;\n    case 'EXECUTIVE':\n        if (axis == 'x') {\n            return 521.86;\n        } else {\n            return 756.00;\n        }\n        break;\n    case 'FOLIO':\n        if (axis == 'x') {\n            return 612.00;\n        } else {\n            return 936.00;\n        }\n        break;\n    } // end switch\n\n    return 0;\n}\n\n/**\n * Get checkbox for foreign key checks\n *\n * @return string\n */\nfunction getForeignKeyCheckboxLoader() {\n    var html = '';\n    html    += '<div>';\n    html    += '<div class=\"load-default-fk-check-value\">';\n    html    += PMA_getImage('ajax_clock_small.gif');\n    html    += '</div>';\n    html    += '</div>';\n    return html;\n}\n\nfunction loadForeignKeyCheckbox() {\n    // Load default foreign key check value\n    var params = {\n        'ajax_request': true,\n        'token': PMA_commonParams.get('token'),\n        'server': PMA_commonParams.get('server'),\n        'get_default_fk_check_value': true\n    };\n    $.get('sql.php', params, function (data) {\n        var html = '<input type=\"hidden\" name=\"fk_checks\" value=\"0\" />' +\n            '<input type=\"checkbox\" name=\"fk_checks\" id=\"fk_checks\"' +\n            (data.default_fk_check_value ? ' checked=\"checked\"' : '') + ' />' +\n            '<label for=\"fk_checks\">' + PMA_messages.strForeignKeyCheck + '</label>';\n        $('.load-default-fk-check-value').replaceWith(html);\n    });\n}\n\nfunction getJSConfirmCommonParam(elem) {\n    return {\n        'is_js_confirmed' : 1,\n        'ajax_request' : true,\n        'fk_checks': $(elem).find('#fk_checks').is(':checked') ? 1 : 0\n    };\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', \"a.inline_edit_sql\");\n    $(document).off('click', \"input#sql_query_edit_save\");\n    $(document).off('click', \"input#sql_query_edit_discard\");\n    $('input.sqlbutton').unbind('click');\n    if (codemirror_editor) {\n        codemirror_editor.off('blur');\n    } else {\n        $(document).off('blur', '#sqlquery');\n    }\n    $(document).off('change', '#parameterized');\n    $('#sqlquery').unbind('keydown');\n    $('#sql_query_edit').unbind('keydown');\n\n    if (codemirror_inline_editor) {\n        // Copy the sql query to the text area to preserve it.\n        $('#sql_query_edit').text(codemirror_inline_editor.getValue());\n        $(codemirror_inline_editor.getWrapperElement()).unbind('keydown');\n        codemirror_inline_editor.toTextArea();\n        codemirror_inline_editor = false;\n    }\n    if (codemirror_editor) {\n        $(codemirror_editor.getWrapperElement()).unbind('keydown');\n    }\n});\n\n/**\n * Jquery Coding for inline editing SQL_QUERY\n */\nAJAX.registerOnload('functions.js', function () {\n    // If we are coming back to the page by clicking forward button\n    // of the browser, bind the code mirror to inline query editor.\n    bindCodeMirrorToInlineEditor();\n    $(document).on('click', \"a.inline_edit_sql\", function () {\n        if ($('#sql_query_edit').length) {\n            // An inline query editor is already open,\n            // we don't want another copy of it\n            return false;\n        }\n\n        var $form = $(this).prev('form');\n        var sql_query  = $form.find(\"input[name='sql_query']\").val().trim();\n        var $inner_sql = $(this).parent().prev().find('code.sql');\n        var old_text   = $inner_sql.html();\n\n        var new_content = \"<textarea name=\\\"sql_query_edit\\\" id=\\\"sql_query_edit\\\">\" + sql_query + \"</textarea>\\n\";\n        new_content    += getForeignKeyCheckboxLoader();\n        new_content    += \"<input type=\\\"submit\\\" id=\\\"sql_query_edit_save\\\" class=\\\"button btnSave\\\" value=\\\"\" + PMA_messages.strGo + \"\\\"/>\\n\";\n        new_content    += \"<input type=\\\"button\\\" id=\\\"sql_query_edit_discard\\\" class=\\\"button btnDiscard\\\" value=\\\"\" + PMA_messages.strCancel + \"\\\"/>\\n\";\n        var $editor_area = $('div#inline_editor');\n        if ($editor_area.length === 0) {\n            $editor_area = $('<div id=\"inline_editor_outer\"></div>');\n            $editor_area.insertBefore($inner_sql);\n        }\n        $editor_area.html(new_content);\n        loadForeignKeyCheckbox();\n        $inner_sql.hide();\n\n        bindCodeMirrorToInlineEditor();\n        return false;\n    });\n\n    $(document).on('click', \"input#sql_query_edit_save\", function () {\n        $(\".success\").hide();\n        //hide already existing success message\n        var sql_query;\n        if (codemirror_inline_editor) {\n            codemirror_inline_editor.save();\n            sql_query = codemirror_inline_editor.getValue();\n        } else {\n            sql_query = $(this).parent().find('#sql_query_edit').val();\n        }\n        var fk_check = $(this).parent().find('#fk_checks').is(':checked');\n\n        var $form = $(\"a.inline_edit_sql\").prev('form');\n        var $fake_form = $('<form>', {action: 'import.php', method: 'post'})\n                .append($form.find(\"input[name=server], input[name=db], input[name=table], input[name=token]\").clone())\n                .append($('<input/>', {type: 'hidden', name: 'show_query', value: 1}))\n                .append($('<input/>', {type: 'hidden', name: 'is_js_confirmed', value: 0}))\n                .append($('<input/>', {type: 'hidden', name: 'sql_query', value: sql_query}))\n                .append($('<input/>', {type: 'hidden', name: 'fk_checks', value: fk_check ? 1 : 0}));\n        if (! checkSqlQuery($fake_form[0])) {\n            return false;\n        }\n        $fake_form.appendTo($('body')).submit();\n    });\n\n    $(document).on('click', \"input#sql_query_edit_discard\", function () {\n        var $divEditor = $('div#inline_editor_outer');\n        $divEditor.siblings('code.sql').show();\n        $divEditor.remove();\n    });\n\n    $('input.sqlbutton').click(function (evt) {\n        insertQuery(evt.target.id);\n        PMA_handleSimulateQueryButton();\n        return false;\n    });\n\n    $(document).on('change', '#parameterized', updateQueryParameters);\n\n    var $inputUsername = $('#input_username');\n    if ($inputUsername) {\n        if ($inputUsername.val() === '') {\n            $inputUsername.focus();\n        } else {\n            $('#input_password').focus();\n        }\n    }\n});\n\n/**\n * \"inputRead\" event handler for CodeMirror SQL query editors for autocompletion\n */\nfunction codemirrorAutocompleteOnInputRead(instance) {\n    if (!sql_autocomplete_in_progress\n        && (!instance.options.hintOptions.tables || !sql_autocomplete)) {\n\n        if (!sql_autocomplete) {\n            // Reset after teardown\n            instance.options.hintOptions.tables = false;\n            instance.options.hintOptions.defaultTable = '';\n\n            sql_autocomplete_in_progress = true;\n\n            var href = 'db_sql_autocomplete.php';\n            var params = {\n                'ajax_request': true,\n                'token': PMA_commonParams.get('token'),\n                'server': PMA_commonParams.get('server'),\n                'db': PMA_commonParams.get('db'),\n                'no_debug': true\n            };\n\n            var columnHintRender = function(elem, self, data) {\n                $('<div class=\"autocomplete-column-name\">')\n                    .text(data.columnName)\n                    .appendTo(elem);\n                $('<div class=\"autocomplete-column-hint\">')\n                    .text(data.columnHint)\n                    .appendTo(elem);\n            };\n\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    if (data.success) {\n                        var tables = $.parseJSON(data.tables);\n                        sql_autocomplete_default_table = PMA_commonParams.get('table');\n                        sql_autocomplete = [];\n                        for (var table in tables) {\n                            if (tables.hasOwnProperty(table)) {\n                                var columns = tables[table];\n                                table = {\n                                    text: table,\n                                    columns: []\n                                };\n                                for (var column in columns) {\n                                    if (columns.hasOwnProperty(column)) {\n                                        var displayText = columns[column].Type;\n                                        if (columns[column].Key == 'PRI') {\n                                            displayText += ' | Primary';\n                                        } else if (columns[column].Key == 'UNI') {\n                                            displayText += ' | Unique';\n                                        }\n                                        table.columns.push({\n                                            text: column,\n                                            displayText: column + \" | \" +  displayText,\n                                            columnName: column,\n                                            columnHint: displayText,\n                                            render: columnHintRender\n                                        });\n                                    }\n                                }\n                            }\n                            sql_autocomplete.push(table);\n                        }\n                        instance.options.hintOptions.tables = sql_autocomplete;\n                        instance.options.hintOptions.defaultTable = sql_autocomplete_default_table;\n                    }\n                },\n                complete: function () {\n                    sql_autocomplete_in_progress = false;\n                }\n            });\n        }\n        else {\n            instance.options.hintOptions.tables = sql_autocomplete;\n            instance.options.hintOptions.defaultTable = sql_autocomplete_default_table;\n        }\n    }\n    if (instance.state.completionActive) {\n        return;\n    }\n    var cur = instance.getCursor();\n    var token = instance.getTokenAt(cur);\n    var string = '';\n    if (token.string.match(/^[.`\\w@]\\w*$/)) {\n        string = token.string;\n    }\n    if (string.length > 0) {\n        CodeMirror.commands.autocomplete(instance);\n    }\n}\n\n/**\n * Remove autocomplete information before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    sql_autocomplete = false;\n    sql_autocomplete_default_table = '';\n});\n\n/**\n * Binds the CodeMirror to the text area used to inline edit a query.\n */\nfunction bindCodeMirrorToInlineEditor() {\n    var $inline_editor = $('#sql_query_edit');\n    if ($inline_editor.length > 0) {\n        if (typeof CodeMirror !== 'undefined') {\n            var height = $inline_editor.css('height');\n            codemirror_inline_editor = PMA_getSQLEditor($inline_editor);\n            codemirror_inline_editor.getWrapperElement().style.height = height;\n            codemirror_inline_editor.refresh();\n            codemirror_inline_editor.focus();\n            $(codemirror_inline_editor.getWrapperElement())\n                .bind('keydown', catchKeypressesFromSqlInlineEdit);\n        } else {\n            $inline_editor\n                .focus()\n                .bind('keydown', catchKeypressesFromSqlInlineEdit);\n        }\n    }\n}\n\nfunction catchKeypressesFromSqlInlineEdit(event) {\n    // ctrl-enter is 10 in chrome and ie, but 13 in ff\n    if (event.ctrlKey && (event.keyCode == 13 || event.keyCode == 10)) {\n        $(\"#sql_query_edit_save\").trigger('click');\n    }\n}\n\n/**\n * Adds doc link to single highlighted SQL element\n */\nfunction PMA_doc_add($elm, params)\n{\n    if (typeof mysql_doc_template == 'undefined') {\n        return;\n    }\n\n    var url = PMA_sprintf(\n        decodeURIComponent(mysql_doc_template),\n        params[0]\n    );\n    if (params.length > 1) {\n        url += '#' + params[1];\n    }\n    var content = $elm.text();\n    $elm.text('');\n    $elm.append('<a target=\"mysql_doc\" class=\"cm-sql-doc\" href=\"' + url + '\">' + content + '</a>');\n}\n\n/**\n * Generates doc links for keywords inside highlighted SQL\n */\nfunction PMA_doc_keyword(idx, elm)\n{\n    var $elm = $(elm);\n    /* Skip already processed ones */\n    if ($elm.find('a').length > 0) {\n        return;\n    }\n    var keyword = $elm.text().toUpperCase();\n    var $next = $elm.next('.cm-keyword');\n    if ($next) {\n        var next_keyword = $next.text().toUpperCase();\n        var full = keyword + ' ' + next_keyword;\n\n        var $next2 = $next.next('.cm-keyword');\n        if ($next2) {\n            var next2_keyword = $next2.text().toUpperCase();\n            var full2 = full + ' ' + next2_keyword;\n            if (full2 in mysql_doc_keyword) {\n                PMA_doc_add($elm, mysql_doc_keyword[full2]);\n                PMA_doc_add($next, mysql_doc_keyword[full2]);\n                PMA_doc_add($next2, mysql_doc_keyword[full2]);\n                return;\n            }\n        }\n        if (full in mysql_doc_keyword) {\n            PMA_doc_add($elm, mysql_doc_keyword[full]);\n            PMA_doc_add($next, mysql_doc_keyword[full]);\n            return;\n        }\n    }\n    if (keyword in mysql_doc_keyword) {\n        PMA_doc_add($elm, mysql_doc_keyword[keyword]);\n    }\n}\n\n/**\n * Generates doc links for builtins inside highlighted SQL\n */\nfunction PMA_doc_builtin(idx, elm)\n{\n    var $elm = $(elm);\n    var builtin = $elm.text().toUpperCase();\n    if (builtin in mysql_doc_builtin) {\n        PMA_doc_add($elm, mysql_doc_builtin[builtin]);\n    }\n}\n\n/**\n * Higlights SQL using CodeMirror.\n */\nfunction PMA_highlightSQL($base)\n{\n    var $elm = $base.find('code.sql');\n    $elm.each(function () {\n        var $sql = $(this);\n        var $pre = $sql.find('pre');\n        /* We only care about visible elements to avoid double processing */\n        if ($pre.is(\":visible\")) {\n            var $highlight = $('<div class=\"sql-highlight cm-s-default\"></div>');\n            $sql.append($highlight);\n            if (typeof CodeMirror != 'undefined') {\n                CodeMirror.runMode($sql.text(), 'text/x-mysql', $highlight[0]);\n                $pre.hide();\n                $highlight.find('.cm-keyword').each(PMA_doc_keyword);\n                $highlight.find('.cm-builtin').each(PMA_doc_builtin);\n            }\n        }\n    });\n}\n\n/**\n * Updates an element containing code.\n *\n * @param jQuery Object $base base element which contains the raw and the\n *                            highlighted code.\n *\n * @param string htmlValue    code in HTML format, displayed if code cannot be\n *                            highlighted\n *\n * @param string rawValue     raw code, used as a parameter for highlighter\n *\n * @return bool               whether content was updated or not\n */\nfunction PMA_updateCode($base, htmlValue, rawValue)\n{\n    var $code = $base.find('code');\n    if ($code.length == 0) {\n        return false;\n    }\n\n    // Determines the type of the content and appropriate CodeMirror mode.\n    var type = '', mode = '';\n    if  ($code.hasClass('json')) {\n        type = 'json';\n        mode = 'application/json';\n    } else if ($code.hasClass('sql')) {\n        type = 'sql';\n        mode = 'text/x-mysql';\n    } else if ($code.hasClass('xml')) {\n        type = 'xml';\n        mode = 'application/xml';\n    } else {\n        return false;\n    }\n\n    // Element used to display unhighlighted code.\n    var $notHighlighted = $('<pre>' + htmlValue + '</pre>');\n\n    // Tries to highlight code using CodeMirror.\n    if (typeof CodeMirror != 'undefined') {\n        var $highlighted = $('<div class=\"' + type + '-highlight cm-s-default\"></div>');\n        CodeMirror.runMode(rawValue, mode, $highlighted[0]);\n        $notHighlighted.hide();\n        $code.html('').append($notHighlighted, $highlighted[0]);\n    } else {\n        $code.html('').append($notHighlighted);\n    }\n\n    return true;\n}\n\n/**\n * Show a message on the top of the page for an Ajax request\n *\n * Sample usage:\n *\n * 1) var $msg = PMA_ajaxShowMessage();\n * This will show a message that reads \"Loading...\". Such a message will not\n * disappear automatically and cannot be dismissed by the user. To remove this\n * message either the PMA_ajaxRemoveMessage($msg) function must be called or\n * another message must be show with PMA_ajaxShowMessage() function.\n *\n * 2) var $msg = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n * This is a special case. The behaviour is same as above,\n * just with a different message\n *\n * 3) var $msg = PMA_ajaxShowMessage('The operation was successful');\n * This will show a message that will disappear automatically and it can also\n * be dismissed by the user.\n *\n * 4) var $msg = PMA_ajaxShowMessage('Some error', false);\n * This will show a message that will not disappear automatically, but it\n * can be dismissed by the user after he has finished reading it.\n *\n * @param string  message     string containing the message to be shown.\n *                              optional, defaults to 'Loading...'\n * @param mixed   timeout     number of milliseconds for the message to be visible\n *                              optional, defaults to 5000. If set to 'false', the\n *                              notification will never disappear\n * @return jQuery object       jQuery Element that holds the message div\n *                              this object can be passed to PMA_ajaxRemoveMessage()\n *                              to remove the notification\n */\nfunction PMA_ajaxShowMessage(message, timeout)\n{\n    /**\n     * @var self_closing Whether the notification will automatically disappear\n     */\n    var self_closing = true;\n    /**\n     * @var dismissable Whether the user will be able to remove\n     *                  the notification by clicking on it\n     */\n    var dismissable = true;\n    // Handle the case when a empty data.message is passed.\n    // We don't want the empty message\n    if (message === '') {\n        return true;\n    } else if (! message) {\n        // If the message is undefined, show the default\n        message = PMA_messages.strLoading;\n        dismissable = false;\n        self_closing = false;\n    } else if (message == PMA_messages.strProcessingRequest) {\n        // This is another case where the message should not disappear\n        dismissable = false;\n        self_closing = false;\n    }\n    // Figure out whether (or after how long) to remove the notification\n    if (timeout === undefined) {\n        timeout = 5000;\n    } else if (timeout === false) {\n        self_closing = false;\n    }\n    // Create a parent element for the AJAX messages, if necessary\n    if ($('#loading_parent').length === 0) {\n        $('<div id=\"loading_parent\"></div>')\n        .prependTo(\"#page_content\");\n    }\n    // Update message count to create distinct message elements every time\n    ajax_message_count++;\n    // Remove all old messages, if any\n    $(\"span.ajax_notification[id^=ajax_message_num]\").remove();\n    /**\n     * @var    $retval    a jQuery object containing the reference\n     *                    to the created AJAX message\n     */\n    var $retval = $(\n            '<span class=\"ajax_notification\" id=\"ajax_message_num_' +\n            ajax_message_count +\n            '\"></span>'\n    )\n    .hide()\n    .appendTo(\"#loading_parent\")\n    .html(message)\n    .show();\n    // If the notification is self-closing we should create a callback to remove it\n    if (self_closing) {\n        $retval\n        .delay(timeout)\n        .fadeOut('medium', function () {\n            if ($(this).is(':data(tooltip)')) {\n                $(this).tooltip('destroy');\n            }\n            // Remove the notification\n            $(this).remove();\n        });\n    }\n    // If the notification is dismissable we need to add the relevant class to it\n    // and add a tooltip so that the users know that it can be removed\n    if (dismissable) {\n        $retval.addClass('dismissable').css('cursor', 'pointer');\n        /**\n         * Add a tooltip to the notification to let the user know that (s)he\n         * can dismiss the ajax notification by clicking on it.\n         */\n        PMA_tooltip(\n            $retval,\n            'span',\n            PMA_messages.strDismiss\n        );\n    }\n    PMA_highlightSQL($retval);\n\n    return $retval;\n}\n\n/**\n * Removes the message shown for an Ajax operation when it's completed\n *\n * @param jQuery object   jQuery Element that holds the notification\n *\n * @return nothing\n */\nfunction PMA_ajaxRemoveMessage($this_msgbox)\n{\n    if ($this_msgbox !== undefined && $this_msgbox instanceof jQuery) {\n        $this_msgbox\n        .stop(true, true)\n        .fadeOut('medium');\n        if ($this_msgbox.is(':data(tooltip)')) {\n            $this_msgbox.tooltip('destroy');\n        } else {\n            $this_msgbox.remove();\n        }\n    }\n}\n\n/**\n * Requests SQL for previewing before executing.\n *\n * @param jQuery Object $form Form containing query data\n *\n * @return void\n */\nfunction PMA_previewSQL($form)\n{\n    var form_url = $form.attr('action');\n    var form_data = $form.serialize() +\n        '&do_save_data=1' +\n        '&preview_sql=1' +\n        '&ajax_request=1';\n    var $msgbox = PMA_ajaxShowMessage();\n    $.ajax({\n        type: 'POST',\n        url: form_url,\n        data: form_data,\n        success: function (response) {\n            PMA_ajaxRemoveMessage($msgbox);\n            if (response.success) {\n                var $dialog_content = $('<div/>')\n                    .append(response.sql_data);\n                var button_options = {};\n                button_options[PMA_messages.strClose] = function () {\n                    $(this).dialog('close');\n                };\n                var $response_dialog = $dialog_content.dialog({\n                    minWidth: 550,\n                    maxHeight: 400,\n                    modal: true,\n                    buttons: button_options,\n                    title: PMA_messages.strPreviewSQL,\n                    close: function () {\n                        $(this).remove();\n                    },\n                    open: function () {\n                        // Pretty SQL printing.\n                        PMA_highlightSQL($(this));\n                    }\n                });\n            } else {\n                PMA_ajaxShowMessage(response.message);\n            }\n        },\n        error: function () {\n            PMA_ajaxShowMessage(PMA_messages.strErrorProcessingRequest);\n        }\n    });\n}\n\n/**\n * check for reserved keyword column name\n *\n * @param jQuery Object $form Form\n *\n * @returns true|false\n */\n\nfunction PMA_checkReservedWordColumns($form) {\n    var is_confirmed = true;\n    $.ajax({\n        type: 'POST',\n        url: \"tbl_structure.php\",\n        data: $form.serialize() + '&reserved_word_check=1',\n        success: function (data) {\n            if (typeof data.success != 'undefined' && data.success === true) {\n                is_confirmed = confirm(data.message);\n            }\n        },\n        async:false\n    });\n    return is_confirmed;\n}\n\n// This event only need to be fired once after the initial page load\n$(function () {\n    /**\n     * Allows the user to dismiss a notification\n     * created with PMA_ajaxShowMessage()\n     */\n    $(document).on('click', 'span.ajax_notification.dismissable', function () {\n        PMA_ajaxRemoveMessage($(this));\n    });\n    /**\n     * The below two functions hide the \"Dismiss notification\" tooltip when a user\n     * is hovering a link or button that is inside an ajax message\n     */\n    $(document).on('mouseover', 'span.ajax_notification a, span.ajax_notification button, span.ajax_notification input', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('disable');\n        }\n    });\n    $(document).on('mouseout', 'span.ajax_notification a, span.ajax_notification button, span.ajax_notification input', function () {\n        if ($(this).parents('span.ajax_notification').is(':data(tooltip)')) {\n            $(this).parents('span.ajax_notification').tooltip('enable');\n        }\n    });\n});\n\n/**\n * Hides/shows the \"Open in ENUM/SET editor\" message, depending on the data type of the column currently selected\n */\nfunction PMA_showNoticeForEnum(selectElement)\n{\n    var enum_notice_id = selectElement.attr(\"id\").split(\"_\")[1];\n    enum_notice_id += \"_\" + (parseInt(selectElement.attr(\"id\").split(\"_\")[2], 10) + 1);\n    var selectedType = selectElement.val();\n    if (selectedType == \"ENUM\" || selectedType == \"SET\") {\n        $(\"p#enum_notice_\" + enum_notice_id).show();\n    } else {\n        $(\"p#enum_notice_\" + enum_notice_id).hide();\n    }\n}\n\n/*\n * Creates a Profiling Chart with jqplot. Used in sql.js\n * and in server_status_monitor.js\n */\nfunction PMA_createProfilingChartJqplot(target, data)\n{\n    return $.jqplot(target, [data],\n        {\n            seriesDefaults: {\n                renderer: $.jqplot.PieRenderer,\n                rendererOptions: {\n                    showDataLabels:  true\n                }\n            },\n            highlighter: {\n                show: true,\n                tooltipLocation: 'se',\n                sizeAdjust: 0,\n                tooltipAxes: 'pieref',\n                useAxesFormatters: false,\n                formatString: '%s, %.9Ps'\n            },\n            legend: {\n                show: true,\n                location: 'e',\n                rendererOptions: {numberColumns: 2}\n            },\n            // from http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines#Color_Palette\n            seriesColors: [\n                '#fce94f',\n                '#fcaf3e',\n                '#e9b96e',\n                '#8ae234',\n                '#729fcf',\n                '#ad7fa8',\n                '#ef2929',\n                '#eeeeec',\n                '#888a85',\n                '#c4a000',\n                '#ce5c00',\n                '#8f5902',\n                '#4e9a06',\n                '#204a87',\n                '#5c3566',\n                '#a40000',\n                '#babdb6',\n                '#2e3436'\n            ]\n        }\n    );\n}\n\n/**\n * Formats a profiling duration nicely (in us and ms time).\n * Used in server_status_monitor.js\n *\n * @param  integer    Number to be formatted, should be in the range of microsecond to second\n * @param  integer    Accuracy, how many numbers right to the comma should be\n * @return string     The formatted number\n */\nfunction PMA_prettyProfilingNum(num, acc)\n{\n    if (!acc) {\n        acc = 2;\n    }\n    acc = Math.pow(10, acc);\n    if (num * 1000 < 0.1) {\n        num = Math.round(acc * (num * 1000 * 1000)) / acc + '\u00b5';\n    } else if (num < 0.1) {\n        num = Math.round(acc * (num * 1000)) / acc + 'm';\n    } else {\n        num = Math.round(acc * num) / acc;\n    }\n\n    return num + 's';\n}\n\n\n/**\n * Formats a SQL Query nicely with newlines and indentation. Depends on Codemirror and MySQL Mode!\n *\n * @param string      Query to be formatted\n * @return string      The formatted query\n */\nfunction PMA_SQLPrettyPrint(string)\n{\n    if (typeof CodeMirror == 'undefined') {\n        return string;\n    }\n\n    var mode = CodeMirror.getMode({}, \"text/x-mysql\");\n    var stream = new CodeMirror.StringStream(string);\n    var state = mode.startState();\n    var token, tokens = [];\n    var output = '';\n    var tabs = function (cnt) {\n        var ret = '';\n        for (var i = 0; i < 4 * cnt; i++) {\n            ret += \" \";\n        }\n        return ret;\n    };\n\n    // \"root-level\" statements\n    var statements = {\n        'select': ['select', 'from', 'on', 'where', 'having', 'limit', 'order by', 'group by'],\n        'update': ['update', 'set', 'where'],\n        'insert into': ['insert into', 'values']\n    };\n    // don't put spaces before these tokens\n    var spaceExceptionsBefore = {';': true, ',': true, '.': true, '(': true};\n    // don't put spaces after these tokens\n    var spaceExceptionsAfter = {'.': true};\n\n    // Populate tokens array\n    var str = '';\n    while (! stream.eol()) {\n        stream.start = stream.pos;\n        token = mode.token(stream, state);\n        if (token !== null) {\n            tokens.push([token, stream.current().toLowerCase()]);\n        }\n    }\n\n    var currentStatement = tokens[0][1];\n\n    if (! statements[currentStatement]) {\n        return string;\n    }\n    // Holds all currently opened code blocks (statement, function or generic)\n    var blockStack = [];\n    // Holds the type of block from last iteration (the current is in blockStack[0])\n    var previousBlock;\n    // If a new code block is found, newBlock contains its type for one iteration and vice versa for endBlock\n    var newBlock, endBlock;\n    // How much to indent in the current line\n    var indentLevel = 0;\n    // Holds the \"root-level\" statements\n    var statementPart, lastStatementPart = statements[currentStatement][0];\n\n    blockStack.unshift('statement');\n\n    // Iterate through every token and format accordingly\n    for (var i = 0; i < tokens.length; i++) {\n        previousBlock = blockStack[0];\n\n        // New block => push to stack\n        if (tokens[i][1] == '(') {\n            if (i < tokens.length - 1 && tokens[i + 1][0] == 'statement-verb') {\n                blockStack.unshift(newBlock = 'statement');\n            } else if (i > 0 && tokens[i - 1][0] == 'builtin') {\n                blockStack.unshift(newBlock = 'function');\n            } else {\n                blockStack.unshift(newBlock = 'generic');\n            }\n        } else {\n            newBlock = null;\n        }\n\n        // Block end => pop from stack\n        if (tokens[i][1] == ')') {\n            endBlock = blockStack[0];\n            blockStack.shift();\n        } else {\n            endBlock = null;\n        }\n\n        // A subquery is starting\n        if (i > 0 && newBlock == 'statement') {\n            indentLevel++;\n            output += \"\\n\" + tabs(indentLevel) + tokens[i][1] + ' ' + tokens[i + 1][1].toUpperCase() + \"\\n\" + tabs(indentLevel + 1);\n            currentStatement = tokens[i + 1][1];\n            i++;\n            continue;\n        }\n\n        // A subquery is ending\n        if (endBlock == 'statement' && indentLevel > 0) {\n            output += \"\\n\" + tabs(indentLevel);\n            indentLevel--;\n        }\n\n        // One less indentation for statement parts (from, where, order by, etc.) and a newline\n        statementPart = statements[currentStatement].indexOf(tokens[i][1]);\n        if (statementPart != -1) {\n            if (i > 0) {\n                output += \"\\n\";\n            }\n            output += tabs(indentLevel) + tokens[i][1].toUpperCase();\n            output += \"\\n\" + tabs(indentLevel + 1);\n            lastStatementPart = tokens[i][1];\n        }\n        // Normal indentation and spaces for everything else\n        else {\n            if (! spaceExceptionsBefore[tokens[i][1]] &&\n               ! (i > 0 && spaceExceptionsAfter[tokens[i - 1][1]]) &&\n               output.charAt(output.length - 1) != ' ') {\n                output += \" \";\n            }\n            if (tokens[i][0] == 'keyword') {\n                output += tokens[i][1].toUpperCase();\n            } else {\n                output += tokens[i][1];\n            }\n        }\n\n        // split columns in select and 'update set' clauses, but only inside statements blocks\n        if ((lastStatementPart == 'select' || lastStatementPart == 'where'  || lastStatementPart == 'set') &&\n            tokens[i][1] == ',' && blockStack[0] == 'statement') {\n\n            output += \"\\n\" + tabs(indentLevel + 1);\n        }\n\n        // split conditions in where clauses, but only inside statements blocks\n        if (lastStatementPart == 'where' &&\n            (tokens[i][1] == 'and' || tokens[i][1] == 'or' || tokens[i][1] == 'xor')) {\n\n            if (blockStack[0] == 'statement') {\n                output += \"\\n\" + tabs(indentLevel + 1);\n            }\n            // Todo: Also split and or blocks in newlines & indentation++\n            //if (blockStack[0] == 'generic')\n             //   output += ...\n        }\n    }\n    return output;\n}\n\n/**\n * jQuery function that uses jQueryUI's dialogs to confirm with user. Does not\n *  return a jQuery object yet and hence cannot be chained\n *\n * @param string      question\n * @param string      url           URL to be passed to the callbackFn to make\n *                                  an Ajax call to\n * @param function    callbackFn    callback to execute after user clicks on OK\n * @param function    openCallback  optional callback to run when dialog is shown\n */\n\njQuery.fn.PMA_confirm = function (question, url, callbackFn, openCallback) {\n    var confirmState = PMA_commonParams.get('confirm');\n    if (! confirmState) {\n        // user does not want to confirm\n        if ($.isFunction(callbackFn)) {\n            callbackFn.call(this, url);\n            return true;\n        }\n    }\n    if (PMA_messages.strDoYouReally === '') {\n        return true;\n    }\n\n    /**\n     * @var    button_options  Object that stores the options passed to jQueryUI\n     *                          dialog\n     */\n    var button_options = [\n        {\n            text: PMA_messages.strOK,\n            'class': 'submitOK',\n            click: function () {\n                $(this).dialog(\"close\");\n                if ($.isFunction(callbackFn)) {\n                    callbackFn.call(this, url);\n                }\n            }\n        },\n        {\n            text: PMA_messages.strCancel,\n            'class': 'submitCancel',\n            click: function () {\n                $(this).dialog(\"close\");\n            }\n        }\n    ];\n\n    $('<div/>', {'id': 'confirm_dialog', 'title': PMA_messages.strConfirm})\n    .prepend(question)\n    .dialog({\n        buttons: button_options,\n        close: function () {\n            $(this).remove();\n        },\n        open: openCallback,\n        modal: true\n    });\n};\n\n/**\n * jQuery function to sort a table's body after a new row has been appended to it.\n * Also fixes the even/odd classes of the table rows at the end.\n *\n * @param string      text_selector   string to select the sortKey's text\n *\n * @return jQuery Object for chaining purposes\n */\njQuery.fn.PMA_sort_table = function (text_selector) {\n    return this.each(function () {\n\n        /**\n         * @var table_body  Object referring to the table's <tbody> element\n         */\n        var table_body = $(this);\n        /**\n         * @var rows    Object referring to the collection of rows in {@link table_body}\n         */\n        var rows = $(this).find('tr').get();\n\n        //get the text of the field that we will sort by\n        $.each(rows, function (index, row) {\n            row.sortKey = $.trim($(row).find(text_selector).text().toLowerCase());\n        });\n\n        //get the sorted order\n        rows.sort(function (a, b) {\n            if (a.sortKey < b.sortKey) {\n                return -1;\n            }\n            if (a.sortKey > b.sortKey) {\n                return 1;\n            }\n            return 0;\n        });\n\n        //pull out each row from the table and then append it according to it's order\n        $.each(rows, function (index, row) {\n            $(table_body).append(row);\n            row.sortKey = null;\n        });\n\n        //Re-check the classes of each row\n        $(this).find('tr:odd')\n        .removeClass('even').addClass('odd')\n        .end()\n        .find('tr:even')\n        .removeClass('odd').addClass('even');\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('submit', \"#create_table_form_minimal.ajax\");\n    $(document).off('submit', \"form.create_table_form.ajax\");\n    $(document).off('click', \"form.create_table_form.ajax input[name=submit_num_fields]\");\n    $(document).off('keyup', \"form.create_table_form.ajax input\");\n});\n\n/**\n * jQuery coding for 'Create Table'.  Used on db_operations.php,\n * db_structure.php and db_tracking.php (i.e., wherever\n * libraries/display_create_table.lib.php is used)\n *\n * Attach Ajax Event handlers for Create Table\n */\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Attach event handler for submission of create table form (save)\n     */\n    $(document).on('submit', \"form.create_table_form.ajax\", function (event) {\n        event.preventDefault();\n\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this);\n\n        /*\n         * First validate the form; if there is a problem, avoid submitting it\n         *\n         * checkTableEditForm() needs a pure element and not a jQuery object,\n         * this is why we pass $form[0] as a parameter (the jQuery object\n         * is actually an array of DOM elements)\n         */\n\n        if (checkTableEditForm($form[0], $form.find('input[name=orig_num_fields]').val())) {\n            PMA_prepareForAjaxRequest($form);\n            if (PMA_checkReservedWordColumns($form)) {\n                PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n                //User wants to submit the form\n                $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n                    if (typeof data !== 'undefined' && data.success === true) {\n                        $('#properties_message')\n                         .removeClass('error')\n                         .html('');\n                        PMA_ajaxShowMessage(data.message);\n                        // Only if the create table dialog (distinct panel) exists\n                        var $createTableDialog = $(\"#create_table_dialog\");\n                        if ($createTableDialog.length > 0) {\n                            $createTableDialog.dialog(\"close\").remove();\n                        }\n                        $('#tableslistcontainer').before(data.formatted_sql);\n\n                        /**\n                         * @var tables_table    Object referring to the <tbody> element that holds the list of tables\n                         */\n                        var tables_table = $(\"#tablesForm\").find(\"tbody\").not(\"#tbl_summary_row\");\n                        // this is the first table created in this db\n                        if (tables_table.length === 0) {\n                            PMA_commonActions.refreshMain(\n                                PMA_commonParams.get('opendb_url')\n                            );\n                        } else {\n                            /**\n                             * @var curr_last_row   Object referring to the last <tr> element in {@link tables_table}\n                             */\n                            var curr_last_row = $(tables_table).find('tr:last');\n                            /**\n                             * @var curr_last_row_index_string   String containing the index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index_string = $(curr_last_row).find('input:checkbox').attr('id').match(/\\d+/)[0];\n                            /**\n                             * @var curr_last_row_index Index of {@link curr_last_row}\n                             */\n                            var curr_last_row_index = parseFloat(curr_last_row_index_string);\n                            /**\n                             * @var new_last_row_index   Index of the new row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_index = curr_last_row_index + 1;\n                            /**\n                             * @var new_last_row_id String containing the id of the row to be appended to {@link tables_table}\n                             */\n                            var new_last_row_id = 'checkbox_tbl_' + new_last_row_index;\n\n                            data.new_table_string = data.new_table_string.replace(/checkbox_tbl_/, new_last_row_id);\n                            //append to table\n                            $(data.new_table_string)\n                             .appendTo(tables_table);\n\n                            //Sort the table\n                            $(tables_table).PMA_sort_table('th');\n\n                            // Adjust summary row\n                            PMA_adjustTotals();\n                        }\n\n                        //Refresh navigation as a new table has been added\n                        PMA_reloadNavigation();\n                        // Redirect to table structure page on creation of new table\n                        var params_12 = 'ajax_request=true&ajax_page_request=true';\n                        if (! (history && history.pushState)) {\n                            params_12 += PMA_MicroHistory.menus.getRequestParam();\n                        }\n                        tblStruct_url = 'tbl_structure.php?server=' + data._params.server +\n                            '&db='+ data._params.db + '&token=' + data._params.token +\n                            '&goto=db_structure.php&table=' + data._params.table + '';\n                        $.get(tblStruct_url, params_12, AJAX.responseHandler);\n                    } else {\n                        PMA_ajaxShowMessage(\n                            '<div class=\"error\">' + data.error + '</div>',\n                            false\n                        );\n                    }\n                }); // end $.post()\n            }\n        } // end if (checkTableEditForm() )\n    }); // end create table form (save)\n\n    /**\n     * Attach event handler for create table form (add fields)\n     */\n    $(document).on('click', \"form.create_table_form.ajax input[name=submit_num_fields]\", function (event) {\n        event.preventDefault();\n        /**\n         * @var    the_form    object referring to the create table form\n         */\n        var $form = $(this).closest('form');\n\n        if (!checkFormElementInRange(this.form, 'added_fields', PMA_messages.strLeastColumnError, 1)) {\n            return;\n        }\n\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n\n        //User wants to add more fields to the table\n        $.post($form.attr('action'), $form.serialize() + \"&submit_num_fields=1\", function (data) {\n            if (typeof data !== 'undefined' && data.success) {\n                var $pageContent = $(\"#page_content\");\n                $pageContent.html(data.message);\n                PMA_highlightSQL($pageContent);\n                PMA_verifyColumnsProperties();\n                PMA_hideShowConnection($('.create_table_form select[name=tbl_storage_engine]'));\n                PMA_ajaxRemoveMessage($msgbox);\n            } else {\n                PMA_ajaxShowMessage(data.error);\n            }\n        }); //end $.post()\n    }); // end create table form (add fields)\n\n    $(document).on('keydown', \"form.create_table_form.ajax input[name=added_fields]\", function (event) {\n        if (event.keyCode == 13) {\n            event.preventDefault();\n            event.stopImmediatePropagation();\n            $(this)\n                .closest('form')\n                .find('input[name=submit_num_fields]')\n                .click();\n        }\n    });\n    $(\"input[value=AUTO_INCREMENT]\").change(function(){\n        if (this.checked) {\n            var col = /\\d/.exec($(this).attr('name'));\n            col = col[0];\n            var $selectFieldKey = $('select[name=\"field_key[' + col + ']\"]');\n            if ($selectFieldKey.val() === 'none_'+col) {\n                $selectFieldKey.val('primary_'+col).change();\n            }\n        }\n    });\n    $('body')\n    .off('click', 'input.preview_sql')\n    .on('click', 'input.preview_sql', function () {\n        var $form = $(this).closest('form');\n        PMA_previewSQL($form);\n    });\n});\n\n\n/**\n * Validates the password field in a form\n *\n * @see    PMA_messages.strPasswordEmpty\n * @see    PMA_messages.strPasswordNotSame\n * @param  object $the_form The form to be validated\n * @return bool\n */\nfunction PMA_checkPassword($the_form)\n{\n    // Did the user select 'no password'?\n    if ($the_form.find('#nopass_1').is(':checked')) {\n        return true;\n    } else {\n        var $pred = $the_form.find('#select_pred_password');\n        if ($pred.length && ($pred.val() == 'none' || $pred.val() == 'keep')) {\n            return true;\n        }\n    }\n\n    var $password = $the_form.find('input[name=pma_pw]');\n    var $password_repeat = $the_form.find('input[name=pma_pw2]');\n    var alert_msg = false;\n\n    if ($password.val() === '') {\n        alert_msg = PMA_messages.strPasswordEmpty;\n    } else if ($password.val() != $password_repeat.val()) {\n        alert_msg = PMA_messages.strPasswordNotSame;\n    }\n\n    if (alert_msg) {\n        alert(alert_msg);\n        $password.val('');\n        $password_repeat.val('');\n        $password.focus();\n        return false;\n    }\n    return true;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', '#change_password_anchor.ajax');\n});\n/**\n * Attach Ajax event handlers for 'Change Password' on index.php\n */\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Attach Ajax event handler on the change password anchor\n     */\n    $(document).on('click', '#change_password_anchor.ajax', function (event) {\n        event.preventDefault();\n\n        var $msgbox = PMA_ajaxShowMessage();\n\n        /**\n         * @var button_options  Object containing options to be passed to jQueryUI's dialog\n         */\n        var button_options = {};\n        button_options[PMA_messages.strGo] = function () {\n\n            event.preventDefault();\n\n            /**\n             * @var $the_form    Object referring to the change password form\n             */\n            var $the_form = $(\"#change_password_form\");\n\n            if (! PMA_checkPassword($the_form)) {\n                return false;\n            }\n\n            /**\n             * @var this_value  String containing the value of the submit button.\n             * Need to append this for the change password form on Server Privileges\n             * page to work\n             */\n            var this_value = $(this).val();\n\n            var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n            $the_form.append('<input type=\"hidden\" name=\"ajax_request\" value=\"true\" />');\n\n            $.post($the_form.attr('action'), $the_form.serialize() + '&change_pw=' + this_value, function (data) {\n                if (typeof data === 'undefined' || data.success !== true) {\n                    PMA_ajaxShowMessage(data.error, false);\n                    return;\n                }\n\n                var $pageContent = $(\"#page_content\");\n                $pageContent.prepend(data.message);\n                PMA_highlightSQL($pageContent);\n                $(\"#change_password_dialog\").hide().remove();\n                $(\"#edit_user_dialog\").dialog(\"close\").remove();\n                PMA_ajaxRemoveMessage($msgbox);\n            }); // end $.post()\n        };\n\n        button_options[PMA_messages.strCancel] = function () {\n            $(this).dialog('close');\n        };\n        $.get($(this).attr('href'), {'ajax_request': true}, function (data) {\n            if (typeof data === 'undefined' || !data.success) {\n                PMA_ajaxShowMessage(data.error, false);\n                return;\n            }\n\n            $('<div id=\"change_password_dialog\"></div>')\n                .dialog({\n                    title: PMA_messages.strChangePassword,\n                    width: 600,\n                    close: function (ev, ui) {\n                        $(this).remove();\n                    },\n                    buttons: button_options,\n                    modal: true\n                })\n                .append(data.message);\n            // for this dialog, we remove the fieldset wrapping due to double headings\n            $(\"fieldset#fieldset_change_password\")\n                .find(\"legend\").remove().end()\n                .find(\"table.noclick\").unwrap().addClass(\"some-margin\")\n                .find(\"input#text_pma_pw\").focus();\n            displayPasswordGenerateButton();\n            $('#fieldset_change_password_footer').hide();\n            PMA_ajaxRemoveMessage($msgbox);\n            $('#change_password_form').bind('submit', function (e) {\n                e.preventDefault();\n                $(this)\n                    .closest('.ui-dialog')\n                    .find('.ui-dialog-buttonpane .ui-button')\n                    .first()\n                    .click();\n            });\n        }); // end $.get()\n    }); // end handler for change password anchor\n}); // end $() for Change Password\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('change', \"select.column_type\");\n    $(document).off('change', \"select.default_type\");\n    $(document).off('change', \"select.virtuality\");\n    $(document).off('change', 'input.allow_null');\n    $(document).off('change', '.create_table_form select[name=tbl_storage_engine]');\n});\n/**\n * Toggle the hiding/showing of the \"Open in ENUM/SET editor\" message when\n * the page loads and when the selected data type changes\n */\nAJAX.registerOnload('functions.js', function () {\n    // is called here for normal page loads and also when opening\n    // the Create table dialog\n    PMA_verifyColumnsProperties();\n    //\n    // needs on() to work also in the Create Table dialog\n    $(document).on('change', \"select.column_type\", function () {\n        PMA_showNoticeForEnum($(this));\n    });\n    $(document).on('change', \"select.default_type\", function () {\n        PMA_hideShowDefaultValue($(this));\n    });\n    $(document).on('change', \"select.virtuality\", function () {\n        PMA_hideShowExpression($(this));\n    });\n    $(document).on('change', 'input.allow_null', function () {\n        PMA_validateDefaultValue($(this));\n    });\n    $(document).on('change', '.create_table_form select[name=tbl_storage_engine]', function () {\n        PMA_hideShowConnection($(this));\n    });\n});\n\n/**\n * If the chosen storage engine is FEDERATED show connection field. Hide otherwise\n *\n * @param $engine_selector storage engine selector\n */\nfunction PMA_hideShowConnection($engine_selector)\n{\n    var $connection = $('.create_table_form input[name=connection]');\n    var index = $connection.parent('td').index() + 1;\n    var $labelTh = $connection.parents('tr').prev('tr').children('th:nth-child(' + index + ')');\n    if ($engine_selector.val() != 'FEDERATED') {\n        $connection\n            .prop('disabled', true)\n            .parent('td').hide();\n        $labelTh.hide();\n    } else {\n        $connection\n            .prop('disabled', false)\n            .parent('td').show();\n        $labelTh.show();\n    }\n}\n\n/**\n * If the column does not allow NULL values, makes sure that default is not NULL\n */\nfunction PMA_validateDefaultValue($null_checkbox)\n{\n    if (! $null_checkbox.prop('checked')) {\n        var $default = $null_checkbox.closest('tr').find('.default_type');\n        if ($default.val() == 'NULL') {\n            $default.val('NONE');\n        }\n    }\n}\n\n/**\n * function to populate the input fields on picking a column from central list\n *\n * @param string  input_id input id of the name field for the column to be populated\n * @param integer offset of the selected column in central list of columns\n */\nfunction autoPopulate(input_id, offset)\n{\n    var db = PMA_commonParams.get('db');\n    var table = PMA_commonParams.get('table');\n    input_id = input_id.substring(0, input_id.length - 1);\n    $('#' + input_id + '1').val(central_column_list[db + '_' + table][offset].col_name);\n    var col_type = central_column_list[db + '_' + table][offset].col_type.toUpperCase();\n    $('#' + input_id + '2').val(col_type);\n    var $input3 = $('#' + input_id + '3');\n    $input3.val(central_column_list[db + '_' + table][offset].col_length);\n    if(col_type === 'ENUM' || col_type === 'SET') {\n        $input3.next().show();\n    } else {\n        $input3.next().hide();\n    }\n    var col_default = central_column_list[db + '_' + table][offset].col_default.toUpperCase();\n    var $input4 = $('#' + input_id + '4');\n    if (col_default !== '' && col_default !== 'NULL' && col_default !== 'CURRENT_TIMESTAMP') {\n        $input4.val(\"USER_DEFINED\");\n        $input4.next().next().show();\n        $input4.next().next().val(central_column_list[db + '_' + table][offset].col_default);\n    } else {\n        $input4.val(central_column_list[db + '_' + table][offset].col_default);\n        $input4.next().next().hide();\n    }\n    $('#' + input_id + '5').val(central_column_list[db + '_' + table][offset].col_collation);\n    var $input6 = $('#' + input_id + '6');\n    $input6.val(central_column_list[db + '_' + table][offset].col_attribute);\n    if(central_column_list[db + '_' + table][offset].col_extra === 'on update CURRENT_TIMESTAMP') {\n        $input6.val(central_column_list[db + '_' + table][offset].col_extra);\n    }\n    if(central_column_list[db + '_' + table][offset].col_extra.toUpperCase() === 'AUTO_INCREMENT') {\n        $('#' + input_id + '9').prop(\"checked\",true).change();\n    } else {\n        $('#' + input_id + '9').prop(\"checked\",false);\n    }\n    if(central_column_list[db + '_' + table][offset].col_isNull !== '0') {\n        $('#' + input_id + '7').prop(\"checked\",true);\n    } else {\n        $('#' + input_id + '7').prop(\"checked\",false);\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', \"a.open_enum_editor\");\n    $(document).off('click', \"input.add_value\");\n    $(document).off('click', \"#enum_editor td.drop\");\n    $(document).off('click', 'a.central_columns_dialog');\n});\n/**\n * @var $enum_editor_dialog An object that points to the jQuery\n *                          dialog of the ENUM/SET editor\n */\nvar $enum_editor_dialog = null;\n/**\n * Opens the ENUM/SET editor and controls its functions\n */\nAJAX.registerOnload('functions.js', function () {\n    $(document).on('click', \"a.open_enum_editor\", function () {\n        // Get the name of the column that is being edited\n        var colname = $(this).closest('tr').find('input:first').val();\n        var title;\n        var i;\n        // And use it to make up a title for the page\n        if (colname.length < 1) {\n            title = PMA_messages.enum_newColumnVals;\n        } else {\n            title = PMA_messages.enum_columnVals.replace(\n                /%s/,\n                '\"' + escapeHtml(decodeURIComponent(colname)) + '\"'\n            );\n        }\n        // Get the values as a string\n        var inputstring = $(this)\n            .closest('td')\n            .find(\"input\")\n            .val();\n        // Escape html entities\n        inputstring = $('<div/>')\n            .text(inputstring)\n            .html();\n        // Parse the values, escaping quotes and\n        // slashes on the fly, into an array\n        var values = [];\n        var in_string = false;\n        var curr, next, buffer = '';\n        for (i = 0; i < inputstring.length; i++) {\n            curr = inputstring.charAt(i);\n            next = i == inputstring.length ? '' : inputstring.charAt(i + 1);\n            if (! in_string && curr == \"'\") {\n                in_string = true;\n            } else if (in_string && curr == \"\\\\\" && next == \"\\\\\") {\n                buffer += \"&#92;\";\n                i++;\n            } else if (in_string && next == \"'\" && (curr == \"'\" || curr == \"\\\\\")) {\n                buffer += \"&#39;\";\n                i++;\n            } else if (in_string && curr == \"'\") {\n                in_string = false;\n                values.push(buffer);\n                buffer = '';\n            } else if (in_string) {\n                buffer += curr;\n            }\n        }\n        if (buffer.length > 0) {\n            // The leftovers in the buffer are the last value (if any)\n            values.push(buffer);\n        }\n        var fields = '';\n        // If there are no values, maybe the user is about to make a\n        // new list so we add a few for him/her to get started with.\n        if (values.length === 0) {\n            values.push('', '', '', '');\n        }\n        // Add the parsed values to the editor\n        var drop_icon = PMA_getImage('b_drop.png');\n        for (i = 0; i < values.length; i++) {\n            fields += \"<tr><td>\" +\n                   \"<input type='text' value='\" + values[i] + \"'/>\" +\n                   \"</td><td class='drop'>\" +\n                   drop_icon +\n                   \"</td></tr>\";\n        }\n        /**\n         * @var dialog HTML code for the ENUM/SET dialog\n         */\n        var dialog = \"<div id='enum_editor'>\" +\n                   \"<fieldset>\" +\n                    \"<legend>\" + title + \"</legend>\" +\n                    \"<p>\" + PMA_getImage('s_notice.png') +\n                    PMA_messages.enum_hint + \"</p>\" +\n                    \"<table class='values'>\" + fields + \"</table>\" +\n                    \"</fieldset><fieldset class='tblFooters'>\" +\n                    \"<table class='add'><tr><td>\" +\n                    \"<div class='slider'></div>\" +\n                    \"</td><td>\" +\n                    \"<form><div><input type='submit' class='add_value' value='\" +\n                    PMA_sprintf(PMA_messages.enum_addValue, 1) +\n                    \"'/></div></form>\" +\n                    \"</td></tr></table>\" +\n                    \"<input type='hidden' value='\" + // So we know which column's data is being edited\n                    $(this).closest('td').find(\"input\").attr(\"id\") +\n                    \"' />\" +\n                    \"</fieldset>\" +\n                    \"</div>\";\n        /**\n         * @var  Defines functions to be called when the buttons in\n         * the buttonOptions jQuery dialog bar are pressed\n         */\n        var buttonOptions = {};\n        buttonOptions[PMA_messages.strGo] = function () {\n            // When the submit button is clicked,\n            // put the data back into the original form\n            var value_array = [];\n            $(this).find(\".values input\").each(function (index, elm) {\n                var val = elm.value.replace(/\\\\/g, '\\\\\\\\').replace(/'/g, \"''\");\n                value_array.push(\"'\" + val + \"'\");\n            });\n            // get the Length/Values text field where this value belongs\n            var values_id = $(this).find(\"input[type='hidden']\").val();\n            $(\"input#\" + values_id).val(value_array.join(\",\"));\n            $(this).dialog(\"close\");\n        };\n        buttonOptions[PMA_messages.strClose] = function () {\n            $(this).dialog(\"close\");\n        };\n        // Show the dialog\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 340,\n            10\n        );\n        if (! width) {\n            width = 340;\n        }\n        $enum_editor_dialog = $(dialog).dialog({\n            minWidth: width,\n            maxHeight: 450,\n            modal: true,\n            title: PMA_messages.enum_editor,\n            buttons: buttonOptions,\n            open: function () {\n                // Focus the \"Go\" button after opening the dialog\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $(this).remove();\n            }\n        });\n        // slider for choosing how many fields to add\n        $enum_editor_dialog.find(\".slider\").slider({\n            animate: true,\n            range: \"min\",\n            value: 1,\n            min: 1,\n            max: 9,\n            slide: function (event, ui) {\n                $(this).closest('table').find('input[type=submit]').val(\n                    PMA_sprintf(PMA_messages.enum_addValue, ui.value)\n                );\n            }\n        });\n        // Focus the slider, otherwise it looks nearly transparent\n        $('a.ui-slider-handle').addClass('ui-state-focus');\n        return false;\n    });\n\n    $(document).on('click', 'a.central_columns_dialog', function (e) {\n        var href = \"db_central_columns.php\";\n        var db = PMA_commonParams.get('db');\n        var table = PMA_commonParams.get('table');\n        var maxRows = $(this).data('maxrows');\n        var pick = $(this).data('pick');\n        if (pick !== false) {\n            pick = true;\n        }\n        var params = {\n            'ajax_request' : true,\n            'token' : PMA_commonParams.get('token'),\n            'server' : PMA_commonParams.get('server'),\n            'db' : PMA_commonParams.get('db'),\n            'cur_table' : PMA_commonParams.get('table'),\n            'getColumnList':true\n        };\n        var colid = $(this).closest('td').find(\"input\").attr(\"id\");\n        var fields = '';\n        if (! (db + '_' + table in central_column_list)) {\n            central_column_list.push(db + '_' + table);\n            $.ajax({\n                type: 'POST',\n                url: href,\n                data: params,\n                success: function (data) {\n                    central_column_list[db + '_' + table] = $.parseJSON(data.message);\n                },\n                async:false\n            });\n        }\n        var i = 0;\n        var list_size = central_column_list[db + '_' + table].length;\n        var min = (list_size <= maxRows) ? list_size : maxRows;\n        for (i = 0; i < min; i++) {\n\n            fields += '<tr><td><div><span style=\"font-weight:bold\">' +\n                escapeHtml(central_column_list[db + '_' + table][i].col_name) +\n                '</span><br><span style=\"color:gray\">' + central_column_list[db + '_' + table][i].col_type;\n\n            if (central_column_list[db + '_' + table][i].col_attribute !== '') {\n                fields += '(' + escapeHtml(central_column_list[db + '_' + table][i].col_attribute) + ') ';\n            }\n            if (central_column_list[db + '_' + table][i].col_length !== '') {\n                fields += '(' + escapeHtml(central_column_list[db + '_' + table][i].col_length) +') ';\n            }\n            fields += escapeHtml(central_column_list[db + '_' + table][i].col_extra) + '</span>' +\n                '</div></td>';\n            if (pick) {\n                fields += '<td><input class=\"pick\" style=\"width:100%\" type=\"submit\" value=\"' +\n                    PMA_messages.pickColumn + '\" onclick=\"autoPopulate(\\'' + colid + '\\',' + i + ')\"/></td>';\n            }\n            fields += '</tr>';\n        }\n        var result_pointer = i;\n        var search_in = '<input type=\"text\" class=\"filter_rows\" placeholder=\"' + PMA_messages.searchList + '\">';\n        if (fields === '') {\n            fields = PMA_sprintf(PMA_messages.strEmptyCentralList, \"'\" + db + \"'\");\n            search_in = '';\n        }\n        var seeMore = '';\n        if (list_size > maxRows) {\n            seeMore = \"<fieldset class='tblFooters' style='text-align:center;font-weight:bold'>\" +\n                \"<a href='#' id='seeMore'>\" + PMA_messages.seeMore + \"</a></fieldset>\";\n        }\n        var central_columns_dialog = \"<div style='max-height:400px'>\" +\n            \"<fieldset>\" +\n            search_in +\n            \"<table id='col_list' style='width:100%' class='values'>\" + fields + \"</table>\" +\n            \"</fieldset>\" +\n            seeMore +\n            \"</div>\";\n\n        var width = parseInt(\n            (parseInt($('html').css('font-size'), 10) / 13) * 500,\n            10\n        );\n        if (! width) {\n            width = 500;\n        }\n        var buttonOptions = {};\n        var $central_columns_dialog = $(central_columns_dialog).dialog({\n            minWidth: width,\n            maxHeight: 450,\n            modal: true,\n            title: PMA_messages.pickColumnTitle,\n            buttons: buttonOptions,\n            open: function () {\n                $('#col_list').on(\"click\", \".pick\", function (){\n                    $central_columns_dialog.remove();\n                });\n                $(\".filter_rows\").on(\"keyup\", function () {\n                    $.uiTableFilter($(\"#col_list\"), $(this).val());\n                });\n                $(\"#seeMore\").click(function() {\n                    fields = '';\n                    min = (list_size <= maxRows + result_pointer) ? list_size : maxRows + result_pointer;\n                    for (i = result_pointer; i < min; i++) {\n\n                        fields += '<tr><td><div><span style=\"font-weight:bold\">' +\n                            central_column_list[db + '_' + table][i].col_name +\n                            '</span><br><span style=\"color:gray\">' +\n                            central_column_list[db + '_' + table][i].col_type;\n\n                        if (central_column_list[db + '_' + table][i].col_attribute !== '') {\n                            fields += '(' + central_column_list[db + '_' + table][i].col_attribute + ') ';\n                        }\n                        if (central_column_list[db + '_' + table][i].col_length !== '') {\n                            fields += '(' + central_column_list[db + '_' + table][i].col_length + ') ';\n                        }\n                        fields += central_column_list[db + '_' + table][i].col_extra + '</span>' +\n                            '</div></td>';\n                        if (pick) {\n                            fields += '<td><input class=\"pick\" style=\"width:100%\" type=\"submit\" value=\"' +\n                                PMA_messages.pickColumn + '\" onclick=\"autoPopulate(\\'' + colid + '\\',' + i + ')\"/></td>';\n                        }\n                        fields += '</tr>';\n                    }\n                    $(\"#col_list\").append(fields);\n                    result_pointer = i;\n                    if (result_pointer === list_size) {\n                        $('.tblFooters').hide();\n                    }\n                    return false;\n                });\n                $(this).closest('.ui-dialog').find('.ui-dialog-buttonpane button:first').focus();\n            },\n            close: function () {\n                $('#col_list').off(\"click\", \".pick\");\n                $(\".filter_rows\").off(\"keyup\");\n                $(this).remove();\n            }\n        });\n        return false;\n    });\n\n   // $(document).on('click', 'a.show_central_list',function(e) {\n\n   // });\n    // When \"add a new value\" is clicked, append an empty text field\n    $(document).on('click', \"input.add_value\", function (e) {\n        e.preventDefault();\n        var num_new_rows = $enum_editor_dialog.find(\"div.slider\").slider('value');\n        while (num_new_rows--) {\n            $enum_editor_dialog.find('.values')\n                .append(\n                    \"<tr style='display: none;'><td>\" +\n                    \"<input type='text' />\" +\n                    \"</td><td class='drop'>\" +\n                    PMA_getImage('b_drop.png') +\n                    \"</td></tr>\"\n                )\n                .find('tr:last')\n                .show('fast');\n        }\n    });\n\n    // Removes the specified row from the enum editor\n    $(document).on('click', \"#enum_editor td.drop\", function () {\n        $(this).closest('tr').hide('fast', function () {\n            $(this).remove();\n        });\n    });\n});\n\n/**\n * Ensures indexes names are valid according to their type and, for a primary\n * key, lock index name to 'PRIMARY'\n * @param string   form_id  Variable which parses the form name as\n *                            the input\n * @return boolean  false    if there is no index form, true else\n */\nfunction checkIndexName(form_id)\n{\n    if ($(\"#\" + form_id).length === 0) {\n        return false;\n    }\n\n    // Gets the elements pointers\n    var $the_idx_name = $(\"#input_index_name\");\n    var $the_idx_choice = $(\"#select_index_choice\");\n\n    // Index is a primary key\n    if ($the_idx_choice.find(\"option:selected\").val() == 'PRIMARY') {\n        $the_idx_name.val('PRIMARY');\n        $the_idx_name.prop(\"disabled\", true);\n    }\n\n    // Other cases\n    else {\n        if ($the_idx_name.val() == 'PRIMARY') {\n            $the_idx_name.val(\"\");\n        }\n        $the_idx_name.prop(\"disabled\", false);\n    }\n\n    return true;\n} // end of the 'checkIndexName()' function\n\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', '#index_frm input[type=submit]');\n});\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handler for adding more columns to an index in the editor\n     */\n    $(document).on('click', '#index_frm input[type=submit]', function (event) {\n        event.preventDefault();\n        var rows_to_add = $(this)\n            .closest('fieldset')\n            .find('.slider')\n            .slider('value');\n\n        var tempEmptyVal = function () {\n            $(this).val('');\n        };\n\n        var tempSetFocus = function () {\n            if ($(this).find(\"option:selected\").val() === '') {\n                return true;\n            }\n            $(this).closest(\"tr\").find(\"input\").focus();\n        };\n\n        while (rows_to_add--) {\n            var $indexColumns = $('#index_columns');\n            var $newrow = $indexColumns\n                .find('tbody > tr:first')\n                .clone()\n                .appendTo(\n                    $indexColumns.find('tbody')\n                );\n            $newrow.find(':input').each(tempEmptyVal);\n            // focus index size input on column picked\n            $newrow.find('select').change(tempSetFocus);\n        }\n    });\n});\n\nfunction indexEditorDialog(url, title, callback_success, callback_failure)\n{\n    /*Remove the hidden dialogs if there are*/\n    var $editIndexDialog = $('#edit_index_dialog');\n    if ($editIndexDialog.length !== 0) {\n        $editIndexDialog.remove();\n    }\n    var $div = $('<div id=\"edit_index_dialog\"></div>');\n\n    /**\n     * @var button_options Object that stores the options\n     *                     passed to jQueryUI dialog\n     */\n    var button_options = {};\n    button_options[PMA_messages.strGo] = function () {\n        /**\n         * @var    the_form    object referring to the export form\n         */\n        var $form = $(\"#index_frm\");\n        var $msgbox = PMA_ajaxShowMessage(PMA_messages.strProcessingRequest);\n        PMA_prepareForAjaxRequest($form);\n        //User wants to submit the form\n        $.post($form.attr('action'), $form.serialize() + \"&do_save_data=1\", function (data) {\n            var $sqlqueryresults = $(\".sqlqueryresults\");\n            if ($sqlqueryresults.length !== 0) {\n                $sqlqueryresults.remove();\n            }\n            if (typeof data !== 'undefined' && data.success === true) {\n                PMA_ajaxShowMessage(data.message);\n                var $resultQuery = $('.result_query');\n                if ($resultQuery.length) {\n                    $resultQuery.remove();\n                }\n                if (data.sql_query) {\n                    $('<div class=\"result_query\"></div>')\n                        .html(data.sql_query)\n                        .prependTo('#page_content');\n                    PMA_highlightSQL($('#page_content'));\n                }\n                $(\".result_query .notice\").remove();\n                $resultQuery.prepend(data.message);\n                /*Reload the field form*/\n                $(\"#table_index\").remove();\n                $(\"<div id='temp_div'><div>\")\n                    .append(data.index_table)\n                    .find(\"#table_index\")\n                    .insertAfter(\"#index_header\");\n                var $editIndexDialog = $(\"#edit_index_dialog\");\n                if ($editIndexDialog.length > 0) {\n                    $editIndexDialog.dialog(\"close\");\n                }\n                $('div.no_indexes_defined').hide();\n                if (callback_success) {\n                    callback_success();\n                }\n                PMA_reloadNavigation();\n            } else {\n                var $temp_div = $(\"<div id='temp_div'><div>\").append(data.error);\n                var $error;\n                if ($temp_div.find(\".error code\").length !== 0) {\n                    $error = $temp_div.find(\".error code\").addClass(\"error\");\n                } else {\n                    $error = $temp_div;\n                }\n                if (callback_failure) {\n                    callback_failure();\n                }\n                PMA_ajaxShowMessage($error, false);\n            }\n        }); // end $.post()\n    };\n    button_options[PMA_messages.strPreviewSQL] = function () {\n        // Function for Previewing SQL\n        var $form = $('#index_frm');\n        PMA_previewSQL($form);\n    };\n    button_options[PMA_messages.strCancel] = function () {\n        $(this).dialog('close');\n    };\n    var $msgbox = PMA_ajaxShowMessage();\n    $.get(\"tbl_indexes.php\", url, function (data) {\n        if (typeof data !== 'undefined' && data.success === false) {\n            //in the case of an error, show the error message returned.\n            PMA_ajaxShowMessage(data.error, false);\n        } else {\n            PMA_ajaxRemoveMessage($msgbox);\n            // Show dialog if the request was successful\n            $div\n            .append(data.message)\n            .dialog({\n                title: title,\n                width: 450,\n                height: 350,\n                open: PMA_verifyColumnsProperties,\n                modal: true,\n                buttons: button_options,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            $div.find('.tblFooters').remove();\n            showIndexEditDialog($div);\n        }\n    }); // end $.get()\n}\n\nfunction showIndexEditDialog($outer)\n{\n    checkIndexType();\n    checkIndexName(\"index_frm\");\n    var $indexColumns = $('#index_columns');\n    $indexColumns.find('td').each(function () {\n        $(this).css(\"width\", $(this).width() + 'px');\n    });\n    $indexColumns.find('tbody').sortable({\n        axis: 'y',\n        containment: $indexColumns.find(\"tbody\"),\n        tolerance: 'pointer'\n    });\n    PMA_showHints($outer);\n    PMA_init_slider();\n    // Add a slider for selecting how many columns to add to the index\n    $outer.find('.slider').slider({\n        animate: true,\n        value: 1,\n        min: 1,\n        max: 16,\n        slide: function (event, ui) {\n            $(this).closest('fieldset').find('input[type=submit]').val(\n                PMA_sprintf(PMA_messages.strAddToIndex, ui.value)\n            );\n        }\n    });\n    $('div.add_fields').removeClass('hide');\n    // focus index size input on column picked\n    $outer.find('table#index_columns select').change(function () {\n        if ($(this).find(\"option:selected\").val() === '') {\n            return true;\n        }\n        $(this).closest(\"tr\").find(\"input\").focus();\n    });\n    // Focus the slider, otherwise it looks nearly transparent\n    $('a.ui-slider-handle').addClass('ui-state-focus');\n    // set focus on index name input, if empty\n    var input = $outer.find('input#input_index_name');\n    input.val() || input.focus();\n}\n\n/**\n * Function to display tooltips that were\n * generated on the PHP side by PMA_Util::showHint()\n *\n * @param object $div a div jquery object which specifies the\n *                    domain for searching for tooltips. If we\n *                    omit this parameter the function searches\n *                    in the whole body\n **/\nfunction PMA_showHints($div)\n{\n    if ($div === undefined || ! $div instanceof jQuery || $div.length === 0) {\n        $div = $(\"body\");\n    }\n    $div.find('.pma_hint').each(function () {\n        PMA_tooltip(\n            $(this).children('img'),\n            'img',\n            $(this).children('span').html()\n        );\n    });\n}\n\nAJAX.registerOnload('functions.js', function () {\n    PMA_showHints();\n});\n\nfunction PMA_mainMenuResizerCallback() {\n    // 5 px margin for jumping menu in Chrome\n    return $(document.body).width() - 5;\n}\n// This must be fired only once after the initial page load\n$(function () {\n    // Initialise the menu resize plugin\n    $('#topmenu').menuResizer(PMA_mainMenuResizerCallback);\n    // register resize event\n    $(window).resize(function () {\n        $('#topmenu').menuResizer('resize');\n    });\n});\n\n/**\n * Get the row number from the classlist (for example, row_1)\n */\nfunction PMA_getRowNumber(classlist)\n{\n    return parseInt(classlist.split(/\\s+row_/)[1], 10);\n}\n\n/**\n * Changes status of slider\n */\nfunction PMA_set_status_label($element)\n{\n    var text;\n    if ($element.css('display') == 'none') {\n        text = '+ ';\n    } else {\n        text = '- ';\n    }\n    $element.closest('.slide-wrapper').prev().find('span').text(text);\n}\n\n/**\n * var  toggleButton  This is a function that creates a toggle\n *                    sliding button given a jQuery reference\n *                    to the correct DOM element\n */\nvar toggleButton = function ($obj) {\n    // In rtl mode the toggle switch is flipped horizontally\n    // so we need to take that into account\n    var right;\n    if ($('span.text_direction', $obj).text() == 'ltr') {\n        right = 'right';\n    } else {\n        right = 'left';\n    }\n    /**\n     *  var  h  Height of the button, used to scale the\n     *          background image and position the layers\n     */\n    var h = $obj.height();\n    $('img', $obj).height(h);\n    $('table', $obj).css('bottom', h - 1);\n    /**\n     *  var  on   Width of the \"ON\" part of the toggle switch\n     *  var  off  Width of the \"OFF\" part of the toggle switch\n     */\n    var on  = $('td.toggleOn', $obj).width();\n    var off = $('td.toggleOff', $obj).width();\n    // Make the \"ON\" and \"OFF\" parts of the switch the same size\n    // + 2 pixels to avoid overflowed\n    $('td.toggleOn > div', $obj).width(Math.max(on, off) + 2);\n    $('td.toggleOff > div', $obj).width(Math.max(on, off) + 2);\n    /**\n     *  var  w  Width of the central part of the switch\n     */\n    var w = parseInt(($('img', $obj).height() / 16) * 22, 10);\n    // Resize the central part of the switch on the top\n    // layer to match the background\n    $('table td:nth-child(2) > div', $obj).width(w);\n    /**\n     *  var  imgw    Width of the background image\n     *  var  tblw    Width of the foreground layer\n     *  var  offset  By how many pixels to move the background\n     *               image, so that it matches the top layer\n     */\n    var imgw = $('img', $obj).width();\n    var tblw = $('table', $obj).width();\n    var offset = parseInt(((imgw - tblw) / 2), 10);\n    // Move the background to match the layout of the top layer\n    $obj.find('img').css(right, offset);\n    /**\n     *  var  offw    Outer width of the \"ON\" part of the toggle switch\n     *  var  btnw    Outer width of the central part of the switch\n     */\n    var offw = $('td.toggleOff', $obj).outerWidth();\n    var btnw = $('table td:nth-child(2)', $obj).outerWidth();\n    // Resize the main div so that exactly one side of\n    // the switch plus the central part fit into it.\n    $obj.width(offw + btnw + 2);\n    /**\n     *  var  move  How many pixels to move the\n     *             switch by when toggling\n     */\n    var move = $('td.toggleOff', $obj).outerWidth();\n    // If the switch is initialized to the\n    // OFF state we need to move it now.\n    if ($('div.container', $obj).hasClass('off')) {\n        if (right == 'right') {\n            $('div.container', $obj).animate({'left': '-=' + move + 'px'}, 0);\n        } else {\n            $('div.container', $obj).animate({'left': '+=' + move + 'px'}, 0);\n        }\n    }\n    // Attach an 'onclick' event to the switch\n    $('div.container', $obj).click(function () {\n        if ($(this).hasClass('isActive')) {\n            return false;\n        } else {\n            $(this).addClass('isActive');\n        }\n        var $msg = PMA_ajaxShowMessage();\n        var $container = $(this);\n        var callback = $('span.callback', this).text();\n        var operator, url, removeClass, addClass;\n        // Perform the actual toggle\n        if ($(this).hasClass('on')) {\n            if (right == 'right') {\n                operator = '-=';\n            } else {\n                operator = '+=';\n            }\n            url = $(this).find('td.toggleOff > span').text();\n            removeClass = 'on';\n            addClass = 'off';\n        } else {\n            if (right == 'right') {\n                operator = '+=';\n            } else {\n                operator = '-=';\n            }\n            url = $(this).find('td.toggleOn > span').text();\n            removeClass = 'off';\n            addClass = 'on';\n        }\n        $.post(url, {'ajax_request': true}, function (data) {\n            if (typeof data !== 'undefined' && data.success === true) {\n                PMA_ajaxRemoveMessage($msg);\n                $container\n                .removeClass(removeClass)\n                .addClass(addClass)\n                .animate({'left': operator + move + 'px'}, function () {\n                    $container.removeClass('isActive');\n                });\n                eval(callback);\n            } else {\n                PMA_ajaxShowMessage(data.error, false);\n                $container.removeClass('isActive');\n            }\n        });\n    });\n};\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.container').unbind('click');\n});\n/**\n * Initialise all toggle buttons\n */\nAJAX.registerOnload('functions.js', function () {\n    $('div.toggleAjax').each(function () {\n        var $button = $(this).show();\n        $button.find('img').each(function () {\n            if (this.complete) {\n                toggleButton($button);\n            } else {\n                $(this).load(function () {\n                    toggleButton($button);\n                });\n            }\n        });\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('change', 'select.pageselector');\n    $(document).off('click', 'a.formLinkSubmit');\n    $('#update_recent_tables').unbind('ready');\n    $('#sync_favorite_tables').unbind('ready');\n});\n\nAJAX.registerOnload('functions.js', function () {\n\n    /**\n     * Autosubmit page selector\n     */\n    $(document).on('change', 'select.pageselector', function (event) {\n        event.stopPropagation();\n        // Check where to load the new content\n        if ($(this).closest(\"#pma_navigation\").length === 0) {\n            // For the main page we don't need to do anything,\n            $(this).closest(\"form\").submit();\n        } else {\n            // but for the navigation we need to manually replace the content\n            PMA_navigationTreePagination($(this));\n        }\n    });\n\n    /**\n     * Load version information asynchronously.\n     */\n    if ($('li.jsversioncheck').length > 0) {\n        $.getJSON('version_check.php', {'server' : PMA_commonParams.get('server')}, PMA_current_version);\n    }\n\n    if ($('#is_git_revision').length > 0) {\n        setTimeout(PMA_display_git_revision, 10);\n    }\n\n    /**\n     * Slider effect.\n     */\n    PMA_init_slider();\n\n    /**\n     * Enables the text generated by PMA_Util::linkOrButton() to be clickable\n     */\n    $(document).on('click', 'a.formLinkSubmit', function (e) {\n        if (! $(this).hasClass('requireConfirm')) {\n            submitFormLink($(this));\n            return false;\n        }\n    });\n\n    var $updateRecentTables = $('#update_recent_tables');\n    if ($updateRecentTables.length) {\n        $.get(\n            $updateRecentTables.attr('href'),\n            {no_debug: true},\n            function (data) {\n                if (typeof data !== 'undefined' && data.success === true) {\n                    $('#pma_recent_list').html(data.list);\n                }\n            }\n        );\n    }\n\n    // Sync favorite tables from localStorage to pmadb.\n    if ($('#sync_favorite_tables').length) {\n        $.ajax({\n            url: $('#sync_favorite_tables').attr(\"href\"),\n            cache: false,\n            type: 'POST',\n            data: {\n                favorite_tables: (isStorageSupported('localStorage') && typeof window.localStorage.favorite_tables !== 'undefined')\n                    ? window.localStorage.favorite_tables\n                    : '',\n                no_debug: true\n            },\n            success: function (data) {\n                // Update localStorage.\n                if (isStorageSupported('localStorage')) {\n                    window.localStorage.favorite_tables = data.favorite_tables;\n                }\n                $('#pma_favorite_list').html(data.list);\n            }\n        });\n    }\n}); // end of $()\n\n/**\n * Submits the form placed in place of a link due to the excessive url length\n *\n * @param $link anchor\n * @returns {Boolean}\n */\nfunction submitFormLink($link)\n{\n    if ($link.attr('href').indexOf('=') != -1) {\n        var data = $link.attr('href').substr($link.attr('href').indexOf('#') + 1).split('=', 2);\n        $link.parents('form').append('<input type=\"hidden\" name=\"' + data[0] + '\" value=\"' + data[1] + '\"/>');\n    }\n    $link.parents('form').submit();\n}\n\n/**\n * Initializes slider effect.\n */\nfunction PMA_init_slider()\n{\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        if ($this.data('slider_init_done')) {\n            return;\n        }\n        var $wrapper = $('<div>', {'class': 'slide-wrapper'});\n        $wrapper.toggle($this.is(':visible'));\n        $('<a>', {href: '#' + this.id, \"class\": 'ajax'})\n            .text($this.attr('title'))\n            .prepend($('<span>'))\n            .insertBefore($this)\n            .click(function () {\n                var $wrapper = $this.closest('.slide-wrapper');\n                var visible = $this.is(':visible');\n                if (!visible) {\n                    $wrapper.show();\n                }\n                $this[visible ? 'hide' : 'show']('blind', function () {\n                    $wrapper.toggle(!visible);\n                    $wrapper.parent().toggleClass(\"print_ignore\", visible);\n                    PMA_set_status_label($this);\n                });\n                return false;\n            });\n        $this.wrap($wrapper);\n        $this.removeAttr('title');\n        PMA_set_status_label($this);\n        $this.data('slider_init_done', 1);\n    });\n}\n\n/**\n * Initializes slider effect.\n */\nAJAX.registerOnload('functions.js', function () {\n    PMA_init_slider();\n});\n\n/**\n * Restores sliders to the state they were in before initialisation.\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('div.pma_auto_slider').each(function () {\n        var $this = $(this);\n        $this.removeData();\n        $this.parent().replaceWith($this);\n        $this.parent().children('a').remove();\n    });\n});\n\n/**\n * Creates a message inside an object with a sliding effect\n *\n * @param msg    A string containing the text to display\n * @param $obj   a jQuery object containing the reference\n *                 to the element where to put the message\n *                 This is optional, if no element is\n *                 provided, one will be created below the\n *                 navigation links at the top of the page\n *\n * @return bool   True on success, false on failure\n */\nfunction PMA_slidingMessage(msg, $obj)\n{\n    if (msg === undefined || msg.length === 0) {\n        // Don't show an empty message\n        return false;\n    }\n    if ($obj === undefined || ! $obj instanceof jQuery || $obj.length === 0) {\n        // If the second argument was not supplied,\n        // we might have to create a new DOM node.\n        if ($('#PMA_slidingMessage').length === 0) {\n            $('#page_content').prepend(\n                '<span id=\"PMA_slidingMessage\" ' +\n                'style=\"display: inline-block;\"></span>'\n            );\n        }\n        $obj = $('#PMA_slidingMessage');\n    }\n    if ($obj.has('div').length > 0) {\n        // If there already is a message inside the\n        // target object, we must get rid of it\n        $obj\n        .find('div')\n        .first()\n        .fadeOut(function () {\n            $obj\n            .children()\n            .remove();\n            $obj\n            .append('<div>' + msg + '</div>');\n            // highlight any sql before taking height;\n            PMA_highlightSQL($obj);\n            $obj.find('div')\n                .first()\n                .hide();\n            $obj\n            .animate({\n                height: $obj.find('div').first().height()\n            })\n            .find('div')\n            .first()\n            .fadeIn();\n        });\n    } else {\n        // Object does not already have a message\n        // inside it, so we simply slide it down\n        $obj.width('100%')\n            .html('<div>' + msg + '</div>');\n        // highlight any sql before taking height;\n        PMA_highlightSQL($obj);\n        var h = $obj\n            .find('div')\n            .first()\n            .hide()\n            .height();\n        $obj\n        .find('div')\n        .first()\n        .css('height', 0)\n        .show()\n        .animate({\n                height: h\n            }, function () {\n            // Set the height of the parent\n            // to the height of the child\n                $obj\n                .height(\n                    $obj\n                    .find('div')\n                    .first()\n                    .height()\n                );\n            });\n    }\n    return true;\n} // end PMA_slidingMessage()\n\n/**\n * Attach CodeMirror2 editor to SQL edit area.\n */\nAJAX.registerOnload('functions.js', function () {\n    var $elm = $('#sqlquery');\n    if ($elm.length > 0) {\n        if (typeof CodeMirror != 'undefined') {\n            codemirror_editor = PMA_getSQLEditor($elm);\n            codemirror_editor.focus();\n            codemirror_editor.on(\"blur\", updateQueryParameters);\n        } else {\n            // without codemirror\n            $elm.focus()\n                .bind('blur', updateQueryParameters);\n        }\n    }\n    PMA_highlightSQL($('body'));\n});\nAJAX.registerTeardown('functions.js', function () {\n    if (codemirror_editor) {\n        $('#sqlquery').text(codemirror_editor.getValue());\n        codemirror_editor.toTextArea();\n        codemirror_editor = false;\n    }\n});\nAJAX.registerOnload('functions.js', function () {\n    // initializes all lock-page elements lock-id and\n    // val-hash data property\n    $('#page_content form.lock-page textarea, ' +\n            '#page_content form.lock-page input[type=\"text\"], '+\n            '#page_content form.lock-page input[type=\"number\"], '+\n            '#page_content form.lock-page select').each(function (i) {\n        $(this).data('lock-id', i);\n        // val-hash is the hash of default value of the field\n        // so that it can be compared with new value hash\n        // to check whether field was modified or not.\n        $(this).data('val-hash', AJAX.hash($(this).val()));\n    });\n\n    // initializes lock-page elements (input types checkbox and radio buttons)\n    // lock-id and val-hash data property\n    $('#page_content form.lock-page input[type=\"checkbox\"], ' +\n            '#page_content form.lock-page input[type=\"radio\"]').each(function (i) {\n        $(this).data('lock-id', i);\n        $(this).data('val-hash', AJAX.hash($(this).is(\":checked\")));\n    });\n});\n/**\n * jQuery plugin to cancel selection in HTML code.\n */\n(function ($) {\n    $.fn.noSelect = function (p) { //no select plugin by Paulo P.Marinas\n        var prevent = (p === null) ? true : p;\n        var is_msie = navigator.userAgent.indexOf('MSIE') > -1 || !!window.navigator.userAgent.match(/Trident.*rv\\:11\\./);\n        var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;\n        var is_safari = navigator.userAgent.indexOf(\"Safari\") > -1;\n        var is_opera = navigator.userAgent.indexOf(\"Presto\") > -1;\n        if (prevent) {\n            return this.each(function () {\n                if (is_msie || is_safari) {\n                    $(this).bind('selectstart', function () {\n                        return false;\n                    });\n                } else if (is_firefox) {\n                    $(this).css('MozUserSelect', 'none');\n                    $('body').trigger('focus');\n                } else if (is_opera) {\n                    $(this).bind('mousedown', function () {\n                        return false;\n                    });\n                } else {\n                    $(this).attr('unselectable', 'on');\n                }\n            });\n        } else {\n            return this.each(function () {\n                if (is_msie || is_safari) {\n                    $(this).unbind('selectstart');\n                } else if (is_firefox) {\n                    $(this).css('MozUserSelect', 'inherit');\n                } else if (is_opera) {\n                    $(this).unbind('mousedown');\n                } else {\n                    $(this).removeAttr('unselectable');\n                }\n            });\n        }\n    }; //end noSelect\n})(jQuery);\n\n/**\n * jQuery plugin to correctly filter input fields by value, needed\n * because some nasty values may break selector syntax\n */\n(function ($) {\n    $.fn.filterByValue = function (value) {\n        return this.filter(function () {\n            return $(this).val() === value;\n        });\n    };\n})(jQuery);\n\n/**\n * Return value of a cell in a table.\n */\nfunction PMA_getCellValue(td) {\n    var $td = $(td);\n    if ($td.is('.null')) {\n        return '';\n    } else if ((! $td.is('.to_be_saved')\n        || $td.is('.set'))\n        && $td.data('original_data')\n    ) {\n        return $td.data('original_data');\n    } else {\n        return $td.text();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $(document).off('click', 'a.themeselect');\n    $(document).off('change', '.autosubmit');\n    $('a.take_theme').unbind('click');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Theme selector.\n     */\n    $(document).on('click', 'a.themeselect', function (e) {\n        window.open(\n            e.target,\n            'themes',\n            'left=10,top=20,width=510,height=350,scrollbars=yes,status=yes,resizable=yes'\n            );\n        return false;\n    });\n\n    /**\n     * Automatic form submission on change.\n     */\n    $(document).on('change', '.autosubmit', function (e) {\n        $(this).closest('form').submit();\n    });\n\n    /**\n     * Theme changer.\n     */\n    $('a.take_theme').click(function (e) {\n        var what = this.name;\n        if (window.opener && window.opener.document.forms.setTheme.elements.set_theme) {\n            window.opener.document.forms.setTheme.elements.set_theme.value = what;\n            window.opener.document.forms.setTheme.submit();\n            window.close();\n            return false;\n        }\n        return true;\n    });\n});\n\n/**\n * Print button\n */\nfunction printPage()\n{\n    // Do print the page\n    if (typeof(window.print) != 'undefined') {\n        window.print();\n    }\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function () {\n    $('input#print').unbind('click');\n    $(document).off('click', 'a.create_view.ajax');\n    $(document).off('keydown', '#createViewDialog input, #createViewDialog select');\n    $(document).off('change', '#fkc_checkbox');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    $('input#print').click(printPage);\n    /**\n     * Ajaxification for the \"Create View\" action\n     */\n    $(document).on('click', 'a.create_view.ajax', function (e) {\n        e.preventDefault();\n        PMA_createViewDialog($(this));\n    });\n    /**\n     * Attach Ajax event handlers for input fields in the editor\n     * and used to submit the Ajax request when the ENTER key is pressed.\n     */\n    if ($('#createViewDialog').length !== 0) {\n        $(document).on('keydown', '#createViewDialog input, #createViewDialog select', function (e) {\n            if (e.which === 13) { // 13 is the ENTER key\n                e.preventDefault();\n\n                // with preventing default, selection by <select> tag\n                // was also prevented in IE\n                $(this).blur();\n\n                $(this).closest('.ui-dialog').find('.ui-button:first').click();\n            }\n        }); // end $(document).on()\n    }\n\n    syntaxHighlighter = PMA_getSQLEditor($('textarea[name=\"view[as]\"]'));\n\n});\n\nfunction PMA_createViewDialog($this)\n{\n    var $msg = PMA_ajaxShowMessage();\n    var syntaxHighlighter = null;\n    $.get($this.attr('href') + '&ajax_request=1&ajax_dialog=1', function (data) {\n        if (typeof data !== 'undefined' && data.success === true) {\n            PMA_ajaxRemoveMessage($msg);\n            var buttonOptions = {};\n            buttonOptions[PMA_messages.strGo] = function () {\n                if (typeof CodeMirror !== 'undefined') {\n                    syntaxHighlighter.save();\n                }\n                $msg = PMA_ajaxShowMessage();\n                $.get('view_create.php', $('#createViewDialog').find('form').serialize(), function (data) {\n                    PMA_ajaxRemoveMessage($msg);\n                    if (typeof data !== 'undefined' && data.success === true) {\n                        $('#createViewDialog').dialog(\"close\");\n                        $('.result_query').html(data.message);\n                        PMA_reloadNavigation();\n                    } else {\n                        PMA_ajaxShowMessage(data.error, false);\n                    }\n                });\n            };\n            buttonOptions[PMA_messages.strClose] = function () {\n                $(this).dialog(\"close\");\n            };\n            var $dialog = $('<div/>').attr('id', 'createViewDialog').append(data.message).dialog({\n                width: 600,\n                minWidth: 400,\n                modal: true,\n                buttons: buttonOptions,\n                title: PMA_messages.strCreateView,\n                close: function () {\n                    $(this).remove();\n                }\n            });\n            // Attach syntax highlighted editor\n            syntaxHighlighter = PMA_getSQLEditor($dialog.find('textarea'));\n            $('input:visible[type=text]', $dialog).first().focus();\n        } else {\n            PMA_ajaxShowMessage(data.error);\n        }\n    });\n}\n\n/**\n * Makes the breadcrumbs and the menu bar float at the top of the viewport\n */\n$(function () {\n    if ($(\"#floating_menubar\").length && $('#PMA_disable_floating_menubar').length === 0) {\n        var left = $('html').attr('dir') == 'ltr' ? 'left' : 'right';\n        $(\"#floating_menubar\")\n            .css('margin-' + left, $('#pma_navigation').width() + $('#pma_navigation_resizer').width())\n            .css(left, 0)\n            .css({\n                'position': 'fixed',\n                'top': 0,\n                'width': '100%',\n                'z-index': 99\n            })\n            .append($('#serverinfo'))\n            .append($('#topmenucontainer'));\n        // Allow the DOM to render, then adjust the padding on the body\n        setTimeout(function () {\n            $('body').css(\n                'padding-top',\n                $('#floating_menubar').outerHeight(true)\n            );\n            $('#topmenu').menuResizer('resize');\n        }, 4);\n    }\n});\n\n/**\n * Scrolls the page to the top if clicking the serverinfo bar\n */\n$(function () {\n    $(document).delegate(\"#serverinfo, #goto_pagetop\", \"click\", function (event) {\n        event.preventDefault();\n        $('html, body').animate({scrollTop: 0}, 'fast');\n    });\n});\n\nvar checkboxes_sel = \"input.checkall:checkbox:enabled\";\n/**\n * Watches checkboxes in a form to set the checkall box accordingly\n */\nvar checkboxes_changed = function () {\n    var $form = $(this.form);\n    // total number of checkboxes in current form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(document).on(\"change\", checkboxes_sel, checkboxes_changed);\n\n$(document).on(\"change\", \"input.checkall_box\", function () {\n    var is_checked = $(this).is(\":checked\");\n    $(this.form).find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Watches checkboxes in a sub form to set the sub checkall box accordingly\n */\nvar sub_checkboxes_changed = function () {\n    var $form = $(this).parent().parent();\n    // total number of checkboxes in current sub form\n    var total_boxes = $form.find(checkboxes_sel).length;\n    // number of checkboxes checked in current sub form\n    var checked_boxes = $form.find(checkboxes_sel + \":checked\").length;\n    var $checkall = $form.find(\"input.sub_checkall_box\");\n    if (total_boxes == checked_boxes) {\n        $checkall.prop({checked: true, indeterminate: false});\n    }\n    else if (checked_boxes > 0) {\n        $checkall.prop({checked: true, indeterminate: true});\n    }\n    else {\n        $checkall.prop({checked: false, indeterminate: false});\n    }\n};\n$(document).on(\"change\", checkboxes_sel + \", input.checkall_box:checkbox:enabled\", sub_checkboxes_changed);\n\n$(document).on(\"change\", \"input.sub_checkall_box\", function () {\n    var is_checked = $(this).is(\":checked\");\n    var $form = $(this).parent().parent();\n    $form.find(checkboxes_sel).prop(\"checked\", is_checked)\n    .parents(\"tr\").toggleClass(\"marked\", is_checked);\n});\n\n/**\n * Toggles row colors of a set of 'tr' elements starting from a given element\n *\n * @param $start Starting element\n */\nfunction toggleRowColors($start)\n{\n    for (var $curr_row = $start; $curr_row.length > 0; $curr_row = $curr_row.next()) {\n        if ($curr_row.hasClass('odd')) {\n            $curr_row.removeClass('odd').addClass('even');\n        } else if ($curr_row.hasClass('even')) {\n            $curr_row.removeClass('even').addClass('odd');\n        }\n    }\n}\n\n/**\n * Formats a byte number to human-readable form\n *\n * @param bytes the bytes to format\n * @param optional subdecimals the number of digits after the point\n * @param optional pointchar the char to use as decimal point\n */\nfunction formatBytes(bytes, subdecimals, pointchar) {\n    if (!subdecimals) {\n        subdecimals = 0;\n    }\n    if (!pointchar) {\n        pointchar = '.';\n    }\n    var units = ['B', 'KiB', 'MiB', 'GiB'];\n    for (var i = 0; bytes > 1024 && i < units.length; i++) {\n        bytes /= 1024;\n    }\n    var factor = Math.pow(10, subdecimals);\n    bytes = Math.round(bytes * factor) / factor;\n    bytes = bytes.toString().split('.').join(pointchar);\n    return bytes + ' ' + units[i];\n}\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Opens pma more themes link in themes browser, in new window instead of popup\n     * This way, we don't break HTML validity\n     */\n    $(\"a._blank\").prop(\"target\", \"_blank\");\n    /**\n     * Reveal the login form to users with JS enabled\n     * and focus the appropriate input field\n     */\n    var $loginform = $('#loginform');\n    if ($loginform.length) {\n        $loginform.find('.js-show').show();\n        if ($('#input_username').val()) {\n            $('#input_password').focus();\n        } else {\n            $('#input_username').focus();\n        }\n    }\n});\n\n/**\n * Dynamically adjust the width of the boxes\n * on the table and db operations pages\n */\n(function () {\n    function DynamicBoxes() {\n        var $boxContainer = $('#boxContainer');\n        if ($boxContainer.length) {\n            var minWidth = $boxContainer.data('box-width');\n            var viewport = $(window).width() - $('#pma_navigation').width();\n            var slots = Math.floor(viewport / minWidth);\n            $boxContainer.children()\n            .each(function () {\n                if (viewport < minWidth) {\n                    $(this).width(minWidth);\n                } else {\n                    $(this).css('width', ((1 /  slots) * 100) + \"%\");\n                }\n            })\n            .removeClass('clearfloat')\n            .filter(':nth-child(' + slots + 'n+1)')\n            .addClass('clearfloat');\n        }\n    }\n    AJAX.registerOnload('functions.js', function () {\n        DynamicBoxes();\n    });\n    $(function () {\n        $(window).resize(DynamicBoxes);\n    });\n})();\n\n/**\n * Formats timestamp for display\n */\nfunction PMA_formatDateTime(date, seconds) {\n    var result = $.datepicker.formatDate('yy-mm-dd', date);\n    var timefmt = 'HH:mm';\n    if (seconds) {\n        timefmt = 'HH:mm:ss';\n    }\n    return result + ' ' + $.datepicker.formatTime(\n        timefmt, {\n            hour: date.getHours(),\n            minute: date.getMinutes(),\n            second: date.getSeconds()\n        }\n    );\n}\n\n/**\n * Check than forms have less fields than max allowed by PHP.\n */\nfunction checkNumberOfFields() {\n    if (typeof maxInputVars === 'undefined') {\n        return false;\n    }\n    if (false === maxInputVars) {\n        return false;\n    }\n    $('form').each(function() {\n        var nbInputs = $(this).find(':input').length;\n        if (nbInputs > maxInputVars) {\n            var warning = PMA_sprintf(PMA_messages.strTooManyInputs, maxInputVars);\n            PMA_ajaxShowMessage(warning);\n            return false;\n        }\n        return true;\n    });\n\n    return true;\n}\n\n/**\n * Ignore the displayed php errors.\n * Simply removes the displayed errors.\n *\n * @param  clearPrevErrors whether to clear errors stored\n *             in $_SESSION['prev_errors'] at server\n *\n */\nfunction PMA_ignorePhpErrors(clearPrevErrors){\n    if (typeof(clearPrevErrors) === \"undefined\" ||\n        clearPrevErrors === null\n    ) {\n        str = false;\n    }\n    // send AJAX request to error_report.php with send_error_report=0, exception_type=php & token.\n    // It clears the prev_errors stored in session.\n    if(clearPrevErrors){\n        var $pmaReportErrorsForm = $('#pma_report_errors_form');\n        $pmaReportErrorsForm.find('input[name=\"send_error_report\"]').val(0); // change send_error_report to '0'\n        $pmaReportErrorsForm.submit();\n    }\n\n    // remove displayed errors\n    var $pmaErrors = $('#pma_errors');\n    $pmaErrors.fadeOut( \"slow\");\n    $pmaErrors.remove();\n}\n\n/**\n * checks whether browser supports web storage\n *\n * @param type the type of storage i.e. localStorage or sessionStorage\n *\n * @returns bool\n */\nfunction isStorageSupported(type)\n{\n    try {\n        window[type].setItem('PMATest', 'test');\n        // Check whether key-value pair was set successfully\n        if (window[type].getItem('PMATest') === 'test') {\n            // Supported, remove test variable from storage\n            window[type].removeItem('PMATest');\n            return true;\n        }\n    } catch(error) {\n        // Not supported\n        PMA_ajaxShowMessage(PMA_messages.strNoLocalStorage, false);\n    }\n    return false;\n}\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function(){\n    $(document).off('keydown', 'form input, form textarea, form select');\n});\n\nAJAX.registerOnload('functions.js', function () {\n    /**\n     * Handle 'Ctrl/Alt + Enter' form submits\n     */\n    $('form input, form textarea, form select').on('keydown', function(e){\n        if((e.ctrlKey && e.which == 13) || (e.altKey && e.which == 13)) {\n            $form = $(this).closest('form');\n            if (! $form.find('input[type=\"submit\"]') ||\n                ! $form.find('input[type=\"submit\"]').click()\n            ) {\n                $form.submit();\n            }\n        }\n    });\n});\n\n/**\n * Unbind all event handlers before tearing down a page\n */\nAJAX.registerTeardown('functions.js', function(){\n    $(document).off('change', 'input[type=radio][name=\"pw_hash\"]');\n});\n\nAJAX.registerOnload('functions.js', function(){\n    /*\n     * Display warning regarding SSL when sha256_password\n     * method is selected\n     * Used in user_password.php (Change Password link on index.php)\n     */\n    $(document).on(\"change\", 'select#select_authentication_plugin_cp', function() {\n        if (this.value === 'sha256_password') {\n            $('#ssl_reqd_warning_cp').show();\n        } else {\n            $('#ssl_reqd_warning_cp').hide();\n        }\n    });\n});\n"], "filenames": ["js/functions.js"], "buggy_code_start_loc": [324], "buggy_code_end_loc": [330], "fixing_code_start_loc": [325], "fixing_code_end_loc": [347], "type": "CWE-254", "message": "The suggestPassword function in js/functions.js in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 relies on the Math.random JavaScript function, which makes it easier for remote attackers to guess passwords via a brute-force approach.", "other": {"cve": {"id": "CVE-2016-1927", "sourceIdentifier": "cve@mitre.org", "published": "2016-02-20T01:59:00.140", "lastModified": "2016-11-28T20:02:25.890", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The suggestPassword function in js/functions.js in phpMyAdmin 4.0.x before 4.0.10.13, 4.4.x before 4.4.15.3, and 4.5.x before 4.5.4 relies on the Math.random JavaScript function, which makes it easier for remote attackers to guess passwords via a brute-force approach."}, {"lang": "es", "value": "La funci\u00f3n suggestPassword en js/functions.js en phpMyAdmin 4.0.x en versiones anteriores a 4.0.10.13, 4.4.x en versiones anteriores a 4.4.15.3 y 4.5.x en versiones anteriores a 4.5.4 se basa en la funci\u00f3n Math.random JavaScript, lo que hace que sea m\u00e1s f\u00e1cil para atacantes remotos adivinar las contrase\u00f1as a trav\u00e9s de una aproximaci\u00f3n por fuerza bruta."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-254"}, {"lang": "en", "value": "CWE-255"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F06DC95-76B1-4E24-A55F-1358A25ED0E5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "B406A721-0075-46C8-A920-3C9602AD667B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.0:rc3:*:*:*:*:*:*", "matchCriteriaId": "C8AE4653-1911-4A58-85DD-51E0578E788E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "2CA76CB4-6167-446A-8D4F-6D5B38046334"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10:*:*:*:*:*:*:*", "matchCriteriaId": "6325E2AE-BB86-4953-AA9E-0433C00B096E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C54B828-8B23-4C62-907E-8EE7E757B721"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.2:*:*:*:*:*:*:*", "matchCriteriaId": "02DD18C8-172B-41CD-87DD-58BDEC0D9418"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.3:*:*:*:*:*:*:*", "matchCriteriaId": "10666E30-D98A-47A9-881A-B281066F0EC8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.4:*:*:*:*:*:*:*", "matchCriteriaId": "3993826B-CA66-4BC2-8E1B-06CF9230B214"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.5:*:*:*:*:*:*:*", "matchCriteriaId": "14928F51-761E-4FCA-B13C-A11530C7FC46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.6:*:*:*:*:*:*:*", "matchCriteriaId": "DB761644-20F5-4E0D-B301-7809EAECA813"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.7:*:*:*:*:*:*:*", "matchCriteriaId": "896439D0-6C98-44A6-8C9D-0D57D57782D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.8:*:*:*:*:*:*:*", "matchCriteriaId": "978B828C-1FCB-4386-B685-5BEE5A8A500C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.9:*:*:*:*:*:*:*", "matchCriteriaId": "51A3261B-23BE-42D7-8A52-AE2E8C274A3D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.10:*:*:*:*:*:*:*", "matchCriteriaId": "F0B7EA51-27EC-4884-8D60-FB9477D2B91A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.11:*:*:*:*:*:*:*", "matchCriteriaId": "D6C9F2CC-778B-4604-B463-7A1D3FB8B9C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.0.10.12:*:*:*:*:*:*:*", "matchCriteriaId": "4B20C44D-0EF1-48F2-B0AA-C8FF0BD9E252"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4D7AAF1-64FF-40C9-90B2-DEC814157372"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.1:*:*:*:*:*:*:*", "matchCriteriaId": "96D529F5-8870-4934-BCD8-E49095D21224"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "296EB2FA-FCAD-4BD5-A015-62765407AFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.1:*:*:*:*:*:*:*", "matchCriteriaId": "4DBD0DC7-64D0-42B1-8EEE-73A0214680F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.2:*:*:*:*:*:*:*", "matchCriteriaId": "A6A15D1E-83ED-47EC-B17C-E6BCC49DE83D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.5.3:*:*:*:*:*:*:*", "matchCriteriaId": "4112ACFF-D40E-45BE-9307-F710E7B41ECD"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176483.html", "source": "cve@mitre.org"}, {"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-February/176739.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00028.html", "source": "cve@mitre.org"}, {"url": "http://lists.opensuse.org/opensuse-updates/2016-02/msg00049.html", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.phpmyadmin.net/home_page/security/PMASA-2016-4.php", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/8dedcc1a175eb07debd4fe116407c43694c60b22", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/912856b432d794201884c36e5f390d446339b6e4", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/8dedcc1a175eb07debd4fe116407c43694c60b22"}}