{"buggy_code": ["# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\n# == Schema Information\n#\n# Table name: users\n#\n#  id                  :integer         not null, primary key\n#  username            :string(32)      default(\"\"), not null\n#  email               :string(64)      default(\"\"), not null\n#  first_name          :string(32)\n#  last_name           :string(32)\n#  title               :string(64)\n#  company             :string(64)\n#  alt_email           :string(64)\n#  phone               :string(32)\n#  mobile              :string(32)\n#  aim                 :string(32)\n#  yahoo               :string(32)\n#  google              :string(32)\n#  skype               :string(32)\n#  password_hash       :string(255)     default(\"\"), not null\n#  password_salt       :string(255)     default(\"\"), not null\n#  persistence_token   :string(255)     default(\"\"), not null\n#  perishable_token    :string(255)     default(\"\"), not null\n#  last_request_at     :datetime\n#  last_login_at       :datetime\n#  current_login_at    :datetime\n#  last_login_ip       :string(255)\n#  current_login_ip    :string(255)\n#  login_count         :integer         default(0), not null\n#  deleted_at          :datetime\n#  created_at          :datetime\n#  updated_at          :datetime\n#  admin               :boolean         default(FALSE), not null\n#  suspended_at        :datetime\n#  single_access_token :string(255)\n#\n\nclass User < ActiveRecord::Base\n  attr_protected :admin, :suspended_at\n\n  before_create  :check_if_needs_approval\n  before_destroy :check_if_current_user, :check_if_has_related_assets\n\n  has_one     :avatar, :as => :entity, :dependent => :destroy  # Personal avatar.\n  has_many    :avatars                                         # As owner who uploaded it, ex. Contact avatar.\n  has_many    :comments, :as => :commentable                   # As owner who created a comment.\n  has_many    :accounts\n  has_many    :campaigns\n  has_many    :leads\n  has_many    :contacts\n  has_many    :opportunities\n  has_many    :assigned_opportunities, :class_name => 'Opportunity', :foreign_key => 'assigned_to'\n  has_many    :permissions, :dependent => :destroy\n  has_many    :preferences, :dependent => :destroy\n  has_many    :lists\n  has_and_belongs_to_many :groups\n\n  has_paper_trail :ignore => [:last_request_at, :perishable_token]\n\n  # For some reason this does not play nice with has_paper_trail when set as default scope\n  scope :by_id, -> { order('id DESC') }\n  scope :except, ->(user) { where('id != ?', user.id).by_name }\n  scope :by_name, -> { order('first_name, last_name, email') }\n\n  scope :text_search, ->(query) {\n    query = query.gsub(/[^\\w\\s\\-\\.'\\p{L}]/u, '').strip\n    where('upper(username) LIKE upper(:s) OR upper(first_name) LIKE upper(:s) OR upper(last_name) LIKE upper(:s)', :s => \"%#{query}%\")\n  }\n\n  scope :my, -> { accessible_by(User.current_ability) }\n\n  scope :have_assigned_opportunities, -> {\n    joins(\"INNER JOIN opportunities ON users.id = opportunities.assigned_to\")\n    .where(\"opportunities.stage <> 'lost' AND opportunities.stage <> 'won'\")\n    .select('DISTINCT(users.id), users.*')\n  }\n\n  acts_as_authentic do |c|\n    c.session_class = Authentication\n    c.validates_uniqueness_of_login_field_options = { :message => :username_taken }\n    c.validates_length_of_login_field_options     = { :minimum => 1, :message => :missing_username }\n    c.merge_validates_format_of_login_field_options(:with => /[a-zA-Z0-9_-]+/)\n\n    c.validates_uniqueness_of_email_field_options = { :message => :email_in_use }\n    c.validates_length_of_password_field_options  = { :minimum => 0, :allow_blank => true, :if => :require_password? }\n    c.ignore_blank_passwords = true\n  end\n\n  # Store current user in the class so we could access it from the activity\n  # observer without extra authentication query.\n  cattr_accessor :current_user\n\n  validates_presence_of :email, :message => :missing_email\n\n  #----------------------------------------------------------------------------\n  def name\n    self.first_name.blank? ? self.username : self.first_name\n  end\n\n  #----------------------------------------------------------------------------\n  def full_name\n    self.first_name.blank? && self.last_name.blank? ? self.email : \"#{self.first_name} #{self.last_name}\".strip\n  end\n\n  #----------------------------------------------------------------------------\n  def suspended?\n    self.suspended_at != nil\n  end\n\n  #----------------------------------------------------------------------------\n  def awaits_approval?\n    self.suspended? && self.login_count == 0 && Setting.user_signup == :needs_approval\n  end\n\n  #----------------------------------------------------------------------------\n  def preference\n    @preference ||= Preference.new(:user => self)\n  end\n  alias :pref :preference\n\n  #----------------------------------------------------------------------------\n  def deliver_password_reset_instructions!\n    reset_perishable_token!\n    UserMailer.password_reset_instructions(self).deliver\n  end\n\n  # Override global I18n.locale if the user has individual local preference.\n  #----------------------------------------------------------------------------\n  def set_individual_locale\n    I18n.locale = self.preference[:locale] if self.preference[:locale]\n  end\n\n  # Generate the value of single access token if it hasn't been set already.\n  #----------------------------------------------------------------------------\n  def set_single_access_token\n    self.single_access_token ||= update_attribute(:single_access_token, Authlogic::Random.friendly_token)\n  end\n\n  # Massage value when using Chosen select box which gives values like [\"\", \"1,2,3\"]\n  #----------------------------------------------------------------------------\n  def group_ids=(value)\n    value = value.join.split(',').map(&:to_i) if value.map{|v| v.to_s.include?(',')}.any?\n    super(value)\n  end\n\n  private\n\n  # Suspend newly created user if signup requires an approval.\n  #----------------------------------------------------------------------------\n  def check_if_needs_approval\n    self.suspended_at = Time.now if Setting.user_signup == :needs_approval && !self.admin\n  end\n\n  # Prevent current user from deleting herself.\n  #----------------------------------------------------------------------------\n  def check_if_current_user\n    User.current_user.nil? || User.current_user != self\n  end\n\n  # Prevent deleting a user unless she has no artifacts left.\n  #----------------------------------------------------------------------------\n  def check_if_has_related_assets\n    artifacts = %w(Account Campaign Lead Contact Opportunity Comment Task).inject(0) do |sum, asset|\n      klass = asset.constantize\n      sum += klass.assigned_to(self).count if asset != \"Comment\"\n      sum += klass.created_by(self).count\n    end\n    artifacts == 0\n  end\n\n  # Define class methods\n  #----------------------------------------------------------------------------\n  class << self\n\n    def current_ability\n      Ability.new(User.current_user)\n    end\n\n  end\n\n  ActiveSupport.run_load_hooks(:fat_free_crm_user, self)\n\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\nRails.application.routes.draw do\n  resources :lists\n\n  root :to => 'home#index'\n\n  match 'activities' => 'home#index'\n  match 'admin'      => 'admin/users#index',       :as => :admin\n  match 'login'      => 'authentications#new',     :as => :login\n  match 'logout'     => 'authentications#destroy', :as => :logout\n  match 'profile'    => 'users#show',              :as => :profile\n  match 'signup'     => 'users#new',               :as => :signup\n\n  match '/home/options',  :as => :options\n  match '/home/toggle',   :as => :toggle\n  match '/home/timeline', :as => :timeline\n  match '/home/timezone', :as => :timezone\n  match '/home/redraw',   :as => :redraw\n\n  resource  :authentication\n  resources :comments, :except => [:new, :show]\n  resources :emails\n  resources :passwords\n\n  resources :accounts, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      match :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :contacts\n      get :opportunities\n    end\n  end\n\n  resources :campaigns, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :leads\n      get :opportunities\n    end\n  end\n\n  resources :contacts, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :opportunities\n    end\n  end\n\n  resources :leads, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      get  :convert\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      put  :attach\n      put  :promote\n      put  :reject\n    end\n\n    get :autocomplete_account_name, :on => :collection\n  end\n\n  resources :opportunities, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :contacts\n    end\n  end\n\n  resources :tasks, :id => /\\d+/ do\n    collection do\n      post :filter\n      post :auto_complete\n    end\n    member do\n      put :complete\n    end\n  end\n\n  resources :users, :id => /\\d+/ do\n    member do\n      get :avatar\n      get :password\n      put :upload_avatar\n      put :change_password\n      post :redraw\n    end\n\n    collection do\n      match :auto_complete\n    end\n    collection do\n      get :opportunities_overview\n    end\n  end\n\n  namespace :admin do\n    resources :groups\n\n    resources :users do\n      collection do\n        post :auto_complete\n      end\n      member do\n        get :confirm\n        put :suspend\n        put :reactivate\n      end\n    end\n\n    resources :field_groups, :except => :index do\n      collection do\n        post :sort\n      end\n      member do\n        get :confirm\n      end\n    end\n\n    resources :fields do\n      collection do\n        post :auto_complete\n        get :options\n        post :redraw\n        post :sort\n        get :subform\n      end\n    end\n\n    resources :tags do\n      member do\n        get :confirm\n      end\n    end\n\n    resources :fields, :as => :custom_fields\n    resources :fields, :as => :core_fields\n\n    resources :settings\n    resources :plugins\n  end\n\n  get '/:controller/tagged/:id' => '#tagged'\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\n# == Schema Information\n#\n# Table name: users\n#\n#  id                  :integer         not null, primary key\n#  username            :string(32)      default(\"\"), not null\n#  email               :string(64)      default(\"\"), not null\n#  first_name          :string(32)\n#  last_name           :string(32)\n#  title               :string(64)\n#  company             :string(64)\n#  alt_email           :string(64)\n#  phone               :string(32)\n#  mobile              :string(32)\n#  aim                 :string(32)\n#  yahoo               :string(32)\n#  google              :string(32)\n#  skype               :string(32)\n#  password_hash       :string(255)     default(\"\"), not null\n#  password_salt       :string(255)     default(\"\"), not null\n#  persistence_token   :string(255)     default(\"\"), not null\n#  perishable_token    :string(255)     default(\"\"), not null\n#  last_request_at     :datetime\n#  last_login_at       :datetime\n#  current_login_at    :datetime\n#  last_login_ip       :string(255)\n#  current_login_ip    :string(255)\n#  login_count         :integer         default(0), not null\n#  deleted_at          :datetime\n#  created_at          :datetime\n#  updated_at          :datetime\n#  admin               :boolean         default(FALSE), not null\n#  suspended_at        :datetime\n#  single_access_token :string(255)\n#\n\nrequire File.expand_path(File.dirname(__FILE__) + '/../../spec_helper')\n\ndescribe User do\n  it \"should create a new instance given valid attributes\" do\n    User.create!(\n      :username => \"username\",\n      :email    => \"user@example.com\",\n      :password => \"password\",\n      :password_confirmation => \"password\"\n    )\n  end\n\n  describe \"Destroying users with and without related assets\" do\n    before do\n      @user = FactoryGirl.create(:user)\n    end\n\n    %w(account campaign lead contact opportunity).each do |asset|\n      it \"should not destroy the user if she owns #{asset}\" do\n        FactoryGirl.create(asset, :user => @user)\n        @user.destroy\n        expect { User.find(@user) }.to_not raise_error()\n        @user.destroyed?.should == false\n      end\n\n      it \"should not destroy the user if she has #{asset} assigned\" do\n        FactoryGirl.create(asset, :assignee => @user)\n        @user.destroy\n        expect { User.find(@user) }.to_not raise_error()\n        @user.destroyed?.should == false\n      end\n    end\n\n    it \"should not destroy the user if she owns a comment\" do\n      login\n      account = FactoryGirl.create(:account, :user => current_user)\n      FactoryGirl.create(:comment, :user => @user, :commentable => account)\n      @user.destroy\n      expect { User.find(@user) }.to_not raise_error()\n      @user.destroyed?.should == false\n    end\n\n    it \"should not destroy the current user\" do\n      login\n      current_user.destroy\n      expect { current_user.reload }.to_not raise_error()\n      current_user.should_not be_destroyed\n    end\n\n    it \"should destroy the user\" do\n      @user.destroy\n      expect { User.find(@user) }.to raise_error(ActiveRecord::RecordNotFound)\n      @user.should be_destroyed\n    end\n\n    it \"once the user gets deleted all her permissions must be deleted too\" do\n      FactoryGirl.create(:permission, :user => @user, :asset => FactoryGirl.create(:account))\n      FactoryGirl.create(:permission, :user => @user, :asset => FactoryGirl.create(:contact))\n      @user.permissions.count.should == 2\n      @user.destroy\n      @user.permissions.count.should == 0\n    end\n\n    it \"once the user gets deleted all her preferences must be deleted too\" do\n      FactoryGirl.create(:preference, :user => @user, :name => \"Hello\", :value => \"World\")\n      FactoryGirl.create(:preference, :user => @user, :name => \"World\", :value => \"Hello\")\n      @user.preferences.count.should == 2\n      @user.destroy\n      @user.preferences.count.should == 0\n    end\n  end\n\n  it \"should set suspended timestamp upon creation if signups need approval and the user is not an admin\" do\n    Setting.stub(:user_signup).and_return(:needs_approval)\n    @user = FactoryGirl.create(:user, :suspended_at => nil)\n    @user.should be_suspended\n  end\n\n  it \"should not set suspended timestamp upon creation if signups need approval and the user is an admin\" do\n    Setting.stub(:user_signup).and_return(:needs_approval)\n    @user = FactoryGirl.create(:user, :admin => true, :suspended_at => nil)\n    @user.should_not be_suspended\n  end\n\n  context \"scopes\" do\n    describe \"have_assigned_opportunities\" do\n      before :each do\n        @user1 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user1, :stage => 'analysis')\n\n        @user2 = FactoryGirl.create(:user)\n\n        @user3 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user3, :stage => 'won')\n\n        @user4 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user4, :stage => 'lost')\n      end\n\n      it \"includes users with assigned opportunities\" do\n        User.have_assigned_opportunities.should include(@user1)\n      end\n\n      it \"excludes users without any assigned opportunities\" do\n        User.have_assigned_opportunities.should_not include(@user2)\n      end\n\n      it \"excludes users with opportunities that have been won or lost\" do\n        User.have_assigned_opportunities.should_not include(@user3)\n        User.have_assigned_opportunities.should_not include(@user4)\n      end\n    end\n  end\n\n  context \"instance methods\" do\n    describe \"assigned_opportunities\" do\n      before :each do\n        @user = FactoryGirl.create(:user)\n        @opportunity1 = FactoryGirl.create(:opportunity, :assignee => @user)\n        @opportunity2 = FactoryGirl.create(:opportunity, :assignee => FactoryGirl.create(:user))\n      end\n\n      it \"includes opportunities assigned to user\" do\n        @user.assigned_opportunities.should include(@opportunity1)\n      end\n\n      it \"does not include opportunities assigned to another user\" do\n        @user.assigned_opportunities.should_not include(@opportunity2)\n      end\n    end\n  end\n\n  describe \"Setting I18n.locale\" do\n    before do\n      @user = FactoryGirl.create(:user)\n      @locale = I18n.locale\n    end\n\n    after do\n      I18n.locale = @locale\n    end\n\n    it \"should update I18n.locale if proference[:locale] is set\" do\n      @user.preference[:locale] = :es\n      @user.set_individual_locale\n      I18n.locale.should == :es\n    end\n\n    it \"should not update I18n.locale if proference[:locale] is not set\" do\n      @user.preference[:locale] = nil\n      @user.set_individual_locale\n      I18n.locale.should == @locale\n    end\n  end\n\n  describe \"Setting single access token\" do\n    it \"should update single_access_token attribute if it is not set already\" do\n      @user = FactoryGirl.create(:user, :single_access_token => nil)\n\n      @user.set_single_access_token\n      @user.single_access_token.should_not == nil\n    end\n\n    it \"should not update single_access_token attribute if it is set already\" do\n      @user = FactoryGirl.create(:user, :single_access_token => \"token\")\n\n      @user.set_single_access_token\n      @user.single_access_token.should == \"token\"\n    end\n  end\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\nrequire File.expand_path(File.dirname(__FILE__) + '/../spec_helper')\n\ndescribe UsersController do\n  describe \"routing\" do\n\n    it \"recognizes and generates #index\" do\n      { :get => \"/users\" }.should route_to(:controller => \"users\", :action => \"index\")\n    end\n\n    it \"recognizes and generates #new as /signup\" do\n      { :get => \"/signup\" }.should route_to(:controller => \"users\", :action => \"new\")\n    end\n\n    it \"recognizes and generates #show as /profile\" do\n      { :get => \"/profile\" }.should route_to(:controller => \"users\", :action => \"show\")\n    end\n\n    it \"recognizes and generates #edit\" do\n      { :get => \"/users/1/edit\" }.should route_to(:controller => \"users\", :action => \"edit\", :id => \"1\")\n    end\n\n    it \"doesn't recognize #edit with non-numeric id\" do\n      { :get => \"/opportunities/aaron/edit\" }.should_not be_routable\n    end\n\n    it \"recognizes and generates #create\" do\n      { :post => \"/users\" }.should route_to(:controller => \"users\", :action => \"create\")\n    end\n\n    it \"recognizes and generates #update\" do\n      { :put => \"/users/1\" }.should route_to(:controller => \"users\", :action => \"update\", :id => \"1\")\n    end\n\n    it \"doesn't recognize #update with non-numeric id\" do\n      { :put => \"/opportunities/aaron\" }.should_not be_routable\n    end\n\n    it \"recognizes and generates #destroy\" do\n      { :delete => \"/users/1\" }.should route_to(:controller => \"users\", :action => \"destroy\", :id => \"1\")\n    end\n\n    it \"doesn't recognize #destroy with non-numeric id\" do\n      { :delete => \"/opportunities/aaron\" }.should_not be_routable\n    end\n\n    it \"should generate params for #avatar\" do\n      { :get => \"/users/1/avatar\" }.should route_to( :controller => \"users\", :action => \"avatar\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #avatar with non-numeric id\" do\n      { :get => \"/opportunities/aaron/avatar\" }.should_not be_routable\n    end\n\n    it \"should generate params for #upload_avatar\" do\n      { :put => \"/users/1/upload_avatar\" }.should route_to( :controller => \"users\", :action => \"upload_avatar\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #upload_avatar with non-numeric id\" do\n      { :put => \"/opportunities/aaron/upload_avatar\" }.should_not be_routable\n    end\n\n    it \"should generate params for #password\" do\n      { :get => \"/users/1/password\" }.should route_to( :controller => \"users\", :action => \"password\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #password with non-numeric id\" do\n      { :get => \"/opportunities/aaron/password\" }.should_not be_routable\n    end\n\n    it \"should generate params for #change_password\" do\n      { :put => \"/users/1/change_password\" }.should route_to( :controller => \"users\", :action => \"change_password\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #change_password with non-numeric id\" do\n      { :put => \"/opportunities/aaron/change_password\" }.should_not be_routable\n    end\n  end\nend\n\n"], "fixing_code": ["# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\n# == Schema Information\n#\n# Table name: users\n#\n#  id                  :integer         not null, primary key\n#  username            :string(32)      default(\"\"), not null\n#  email               :string(64)      default(\"\"), not null\n#  first_name          :string(32)\n#  last_name           :string(32)\n#  title               :string(64)\n#  company             :string(64)\n#  alt_email           :string(64)\n#  phone               :string(32)\n#  mobile              :string(32)\n#  aim                 :string(32)\n#  yahoo               :string(32)\n#  google              :string(32)\n#  skype               :string(32)\n#  password_hash       :string(255)     default(\"\"), not null\n#  password_salt       :string(255)     default(\"\"), not null\n#  persistence_token   :string(255)     default(\"\"), not null\n#  perishable_token    :string(255)     default(\"\"), not null\n#  last_request_at     :datetime\n#  last_login_at       :datetime\n#  current_login_at    :datetime\n#  last_login_ip       :string(255)\n#  current_login_ip    :string(255)\n#  login_count         :integer         default(0), not null\n#  deleted_at          :datetime\n#  created_at          :datetime\n#  updated_at          :datetime\n#  admin               :boolean         default(FALSE), not null\n#  suspended_at        :datetime\n#  single_access_token :string(255)\n#\n\nclass User < ActiveRecord::Base\n  attr_protected :admin, :suspended_at\n\n  before_create  :check_if_needs_approval\n  before_destroy :check_if_current_user, :check_if_has_related_assets\n\n  has_one     :avatar, :as => :entity, :dependent => :destroy  # Personal avatar.\n  has_many    :avatars                                         # As owner who uploaded it, ex. Contact avatar.\n  has_many    :comments, :as => :commentable                   # As owner who created a comment.\n  has_many    :accounts\n  has_many    :campaigns\n  has_many    :leads\n  has_many    :contacts\n  has_many    :opportunities\n  has_many    :assigned_opportunities, :class_name => 'Opportunity', :foreign_key => 'assigned_to'\n  has_many    :permissions, :dependent => :destroy\n  has_many    :preferences, :dependent => :destroy\n  has_many    :lists\n  has_and_belongs_to_many :groups\n\n  has_paper_trail :ignore => [:last_request_at, :perishable_token]\n\n  # For some reason this does not play nice with has_paper_trail when set as default scope\n  scope :by_id, -> { order('id DESC') }\n  scope :except, ->(user) { where('id != ?', user.id).by_name }\n  scope :by_name, -> { order('first_name, last_name, email') }\n\n  scope :text_search, ->(query) {\n    query = query.gsub(/[^\\w\\s\\-\\.'\\p{L}]/u, '').strip\n    where('upper(username) LIKE upper(:s) OR upper(first_name) LIKE upper(:s) OR upper(last_name) LIKE upper(:s)', :s => \"%#{query}%\")\n  }\n\n  scope :my, -> { accessible_by(User.current_ability) }\n\n  scope :have_assigned_opportunities, -> {\n    joins(\"INNER JOIN opportunities ON users.id = opportunities.assigned_to\")\n    .where(\"opportunities.stage <> 'lost' AND opportunities.stage <> 'won'\")\n    .select('DISTINCT(users.id), users.*')\n  }\n\n  acts_as_authentic do |c|\n    c.session_class = Authentication\n    c.validates_uniqueness_of_login_field_options = { :message => :username_taken }\n    c.validates_length_of_login_field_options     = { :minimum => 1, :message => :missing_username }\n    c.merge_validates_format_of_login_field_options(:with => /[a-zA-Z0-9_-]+/)\n\n    c.validates_uniqueness_of_email_field_options = { :message => :email_in_use }\n    c.validates_length_of_password_field_options  = { :minimum => 0, :allow_blank => true, :if => :require_password? }\n    c.ignore_blank_passwords = true\n  end\n\n  # Store current user in the class so we could access it from the activity\n  # observer without extra authentication query.\n  cattr_accessor :current_user\n\n  validates_presence_of :email, :message => :missing_email\n\n  #----------------------------------------------------------------------------\n  def name\n    self.first_name.blank? ? self.username : self.first_name\n  end\n\n  #----------------------------------------------------------------------------\n  def full_name\n    self.first_name.blank? && self.last_name.blank? ? self.email : \"#{self.first_name} #{self.last_name}\".strip\n  end\n\n  #----------------------------------------------------------------------------\n  def suspended?\n    self.suspended_at != nil\n  end\n\n  #----------------------------------------------------------------------------\n  def awaits_approval?\n    self.suspended? && self.login_count == 0 && Setting.user_signup == :needs_approval\n  end\n\n  #----------------------------------------------------------------------------\n  def preference\n    @preference ||= Preference.new(:user => self)\n  end\n  alias :pref :preference\n\n  #----------------------------------------------------------------------------\n  def deliver_password_reset_instructions!\n    reset_perishable_token!\n    UserMailer.password_reset_instructions(self).deliver\n  end\n\n  # Override global I18n.locale if the user has individual local preference.\n  #----------------------------------------------------------------------------\n  def set_individual_locale\n    I18n.locale = self.preference[:locale] if self.preference[:locale]\n  end\n\n  # Generate the value of single access token if it hasn't been set already.\n  #----------------------------------------------------------------------------\n  def set_single_access_token\n    self.single_access_token ||= update_attribute(:single_access_token, Authlogic::Random.friendly_token)\n  end\n\n  # Massage value when using Chosen select box which gives values like [\"\", \"1,2,3\"]\n  #----------------------------------------------------------------------------\n  def group_ids=(value)\n    value = value.join.split(',').map(&:to_i) if value.map{|v| v.to_s.include?(',')}.any?\n    super(value)\n  end\n\n  def to_json(options = nil)\n    [name].to_json\n  end\n\n  def to_xml(options = nil)\n    [name].to_xml\n  end\n\n  private\n\n  # Suspend newly created user if signup requires an approval.\n  #----------------------------------------------------------------------------\n  def check_if_needs_approval\n    self.suspended_at = Time.now if Setting.user_signup == :needs_approval && !self.admin\n  end\n\n  # Prevent current user from deleting herself.\n  #----------------------------------------------------------------------------\n  def check_if_current_user\n    User.current_user.nil? || User.current_user != self\n  end\n\n  # Prevent deleting a user unless she has no artifacts left.\n  #----------------------------------------------------------------------------\n  def check_if_has_related_assets\n    artifacts = %w(Account Campaign Lead Contact Opportunity Comment Task).inject(0) do |sum, asset|\n      klass = asset.constantize\n      sum += klass.assigned_to(self).count if asset != \"Comment\"\n      sum += klass.created_by(self).count\n    end\n    artifacts == 0\n  end\n\n  # Define class methods\n  #----------------------------------------------------------------------------\n  class << self\n\n    def current_ability\n      Ability.new(User.current_user)\n    end\n\n  end\n\n  ActiveSupport.run_load_hooks(:fat_free_crm_user, self)\n\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\nRails.application.routes.draw do\n  resources :lists\n\n  root :to => 'home#index'\n\n  match 'activities' => 'home#index'\n  match 'admin'      => 'admin/users#index',       :as => :admin\n  match 'login'      => 'authentications#new',     :as => :login\n  match 'logout'     => 'authentications#destroy', :as => :logout\n  match 'profile'    => 'users#show',              :as => :profile\n  match 'signup'     => 'users#new',               :as => :signup\n\n  match '/home/options',  :as => :options\n  match '/home/toggle',   :as => :toggle\n  match '/home/timeline', :as => :timeline\n  match '/home/timezone', :as => :timezone\n  match '/home/redraw',   :as => :redraw\n\n  resource  :authentication\n  resources :comments, :except => [:new, :show]\n  resources :emails\n  resources :passwords\n\n  resources :accounts, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      match :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :contacts\n      get :opportunities\n    end\n  end\n\n  resources :campaigns, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :leads\n      get :opportunities\n    end\n  end\n\n  resources :contacts, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :opportunities\n    end\n  end\n\n  resources :leads, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      get  :convert\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      put  :attach\n      put  :promote\n      put  :reject\n    end\n\n    get :autocomplete_account_name, :on => :collection\n  end\n\n  resources :opportunities, :id => /\\d+/ do\n    collection do\n      get  :advanced_search\n      post :filter\n      get  :options\n      get  :field_group\n      post :auto_complete\n      post :redraw\n      get :versions\n    end\n    member do\n      put  :attach\n      post :discard\n      post :subscribe\n      post :unsubscribe\n      get :contacts\n    end\n  end\n\n  resources :tasks, :id => /\\d+/ do\n    collection do\n      post :filter\n      post :auto_complete\n    end\n    member do\n      put :complete\n    end\n  end\n\n  resources :users, :id => /\\d+/, :except => [:index, :destroy] do\n    member do\n      get :avatar\n      get :password\n      put :upload_avatar\n      put :change_password\n      post :redraw\n    end\n\n    collection do\n      match :auto_complete\n    end\n    collection do\n      get :opportunities_overview\n    end\n  end\n\n  namespace :admin do\n    resources :groups\n\n    resources :users do\n      collection do\n        post :auto_complete\n      end\n      member do\n        get :confirm\n        put :suspend\n        put :reactivate\n      end\n    end\n\n    resources :field_groups, :except => :index do\n      collection do\n        post :sort\n      end\n      member do\n        get :confirm\n      end\n    end\n\n    resources :fields do\n      collection do\n        post :auto_complete\n        get :options\n        post :redraw\n        post :sort\n        get :subform\n      end\n    end\n\n    resources :tags do\n      member do\n        get :confirm\n      end\n    end\n\n    resources :fields, :as => :custom_fields\n    resources :fields, :as => :core_fields\n\n    resources :settings\n    resources :plugins\n  end\n\n  get '/:controller/tagged/:id' => '#tagged'\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\n# == Schema Information\n#\n# Table name: users\n#\n#  id                  :integer         not null, primary key\n#  username            :string(32)      default(\"\"), not null\n#  email               :string(64)      default(\"\"), not null\n#  first_name          :string(32)\n#  last_name           :string(32)\n#  title               :string(64)\n#  company             :string(64)\n#  alt_email           :string(64)\n#  phone               :string(32)\n#  mobile              :string(32)\n#  aim                 :string(32)\n#  yahoo               :string(32)\n#  google              :string(32)\n#  skype               :string(32)\n#  password_hash       :string(255)     default(\"\"), not null\n#  password_salt       :string(255)     default(\"\"), not null\n#  persistence_token   :string(255)     default(\"\"), not null\n#  perishable_token    :string(255)     default(\"\"), not null\n#  last_request_at     :datetime\n#  last_login_at       :datetime\n#  current_login_at    :datetime\n#  last_login_ip       :string(255)\n#  current_login_ip    :string(255)\n#  login_count         :integer         default(0), not null\n#  deleted_at          :datetime\n#  created_at          :datetime\n#  updated_at          :datetime\n#  admin               :boolean         default(FALSE), not null\n#  suspended_at        :datetime\n#  single_access_token :string(255)\n#\n\nrequire File.expand_path(File.dirname(__FILE__) + '/../../spec_helper')\n\ndescribe User do\n  it \"should create a new instance given valid attributes\" do\n    User.create!(\n      :username => \"username\",\n      :email    => \"user@example.com\",\n      :password => \"password\",\n      :password_confirmation => \"password\"\n    )\n  end\n\n  describe \"Destroying users with and without related assets\" do\n    before do\n      @user = FactoryGirl.create(:user)\n    end\n\n    %w(account campaign lead contact opportunity).each do |asset|\n      it \"should not destroy the user if she owns #{asset}\" do\n        FactoryGirl.create(asset, :user => @user)\n        @user.destroy\n        expect { User.find(@user) }.to_not raise_error()\n        @user.destroyed?.should == false\n      end\n\n      it \"should not destroy the user if she has #{asset} assigned\" do\n        FactoryGirl.create(asset, :assignee => @user)\n        @user.destroy\n        expect { User.find(@user) }.to_not raise_error()\n        @user.destroyed?.should == false\n      end\n    end\n\n    it \"should not destroy the user if she owns a comment\" do\n      login\n      account = FactoryGirl.create(:account, :user => current_user)\n      FactoryGirl.create(:comment, :user => @user, :commentable => account)\n      @user.destroy\n      expect { User.find(@user) }.to_not raise_error()\n      @user.destroyed?.should == false\n    end\n\n    it \"should not destroy the current user\" do\n      login\n      current_user.destroy\n      expect { current_user.reload }.to_not raise_error()\n      current_user.should_not be_destroyed\n    end\n\n    it \"should destroy the user\" do\n      @user.destroy\n      expect { User.find(@user) }.to raise_error(ActiveRecord::RecordNotFound)\n      @user.should be_destroyed\n    end\n\n    it \"once the user gets deleted all her permissions must be deleted too\" do\n      FactoryGirl.create(:permission, :user => @user, :asset => FactoryGirl.create(:account))\n      FactoryGirl.create(:permission, :user => @user, :asset => FactoryGirl.create(:contact))\n      @user.permissions.count.should == 2\n      @user.destroy\n      @user.permissions.count.should == 0\n    end\n\n    it \"once the user gets deleted all her preferences must be deleted too\" do\n      FactoryGirl.create(:preference, :user => @user, :name => \"Hello\", :value => \"World\")\n      FactoryGirl.create(:preference, :user => @user, :name => \"World\", :value => \"Hello\")\n      @user.preferences.count.should == 2\n      @user.destroy\n      @user.preferences.count.should == 0\n    end\n  end\n\n  it \"should set suspended timestamp upon creation if signups need approval and the user is not an admin\" do\n    Setting.stub(:user_signup).and_return(:needs_approval)\n    @user = FactoryGirl.create(:user, :suspended_at => nil)\n    @user.should be_suspended\n  end\n\n  it \"should not set suspended timestamp upon creation if signups need approval and the user is an admin\" do\n    Setting.stub(:user_signup).and_return(:needs_approval)\n    @user = FactoryGirl.create(:user, :admin => true, :suspended_at => nil)\n    @user.should_not be_suspended\n  end\n\n  context \"scopes\" do\n    describe \"have_assigned_opportunities\" do\n      before :each do\n        @user1 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user1, :stage => 'analysis')\n\n        @user2 = FactoryGirl.create(:user)\n\n        @user3 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user3, :stage => 'won')\n\n        @user4 = FactoryGirl.create(:user)\n        FactoryGirl.create(:opportunity, :assignee => @user4, :stage => 'lost')\n      end\n\n      it \"includes users with assigned opportunities\" do\n        User.have_assigned_opportunities.should include(@user1)\n      end\n\n      it \"excludes users without any assigned opportunities\" do\n        User.have_assigned_opportunities.should_not include(@user2)\n      end\n\n      it \"excludes users with opportunities that have been won or lost\" do\n        User.have_assigned_opportunities.should_not include(@user3)\n        User.have_assigned_opportunities.should_not include(@user4)\n      end\n    end\n  end\n\n  context \"instance methods\" do\n    describe \"assigned_opportunities\" do\n      before :each do\n        @user = FactoryGirl.create(:user)\n        @opportunity1 = FactoryGirl.create(:opportunity, :assignee => @user)\n        @opportunity2 = FactoryGirl.create(:opportunity, :assignee => FactoryGirl.create(:user))\n      end\n\n      it \"includes opportunities assigned to user\" do\n        @user.assigned_opportunities.should include(@opportunity1)\n      end\n\n      it \"does not include opportunities assigned to another user\" do\n        @user.assigned_opportunities.should_not include(@opportunity2)\n      end\n    end\n  end\n\n  describe \"Setting I18n.locale\" do\n    before do\n      @user = FactoryGirl.create(:user)\n      @locale = I18n.locale\n    end\n\n    after do\n      I18n.locale = @locale\n    end\n\n    it \"should update I18n.locale if proference[:locale] is set\" do\n      @user.preference[:locale] = :es\n      @user.set_individual_locale\n      I18n.locale.should == :es\n    end\n\n    it \"should not update I18n.locale if proference[:locale] is not set\" do\n      @user.preference[:locale] = nil\n      @user.set_individual_locale\n      I18n.locale.should == @locale\n    end\n  end\n\n  describe \"Setting single access token\" do\n    it \"should update single_access_token attribute if it is not set already\" do\n      @user = FactoryGirl.create(:user, :single_access_token => nil)\n\n      @user.set_single_access_token\n      @user.single_access_token.should_not == nil\n    end\n\n    it \"should not update single_access_token attribute if it is set already\" do\n      @user = FactoryGirl.create(:user, :single_access_token => \"token\")\n\n      @user.set_single_access_token\n      @user.single_access_token.should == \"token\"\n    end\n  end\n\n  describe \"serialization\" do\n\n    let(:user) { FactoryGirl.build(:user) }\n\n    it \"to json\" do\n      expect(user.to_json).to eql([user.name].to_json)\n    end\n\n    it \"to xml\" do\n      expect(user.to_xml).to eql([user.name].to_xml)\n    end\n\n  end\nend\n", "# Copyright (c) 2008-2013 Michael Dvorkin and contributors.\n#\n# Fat Free CRM is freely distributable under the terms of MIT license.\n# See MIT-LICENSE file or http://www.opensource.org/licenses/mit-license.php\n#------------------------------------------------------------------------------\nrequire File.expand_path(File.dirname(__FILE__) + '/../spec_helper')\n\ndescribe UsersController do\n  describe \"routing\" do\n\n    it \"doesn't recognize #index\" do\n      { :get => \"/users\" }.should_not be_routable\n    end\n\n    it \"recognizes and generates #new as /signup\" do\n      { :get => \"/signup\" }.should route_to(:controller => \"users\", :action => \"new\")\n    end\n\n    it \"recognizes and generates #show as /profile\" do\n      { :get => \"/profile\" }.should route_to(:controller => \"users\", :action => \"show\")\n    end\n\n    it \"recognizes and generates #edit\" do\n      { :get => \"/users/1/edit\" }.should route_to(:controller => \"users\", :action => \"edit\", :id => \"1\")\n    end\n\n    it \"doesn't recognize #edit with non-numeric id\" do\n      { :get => \"/opportunities/aaron/edit\" }.should_not be_routable\n    end\n\n    it \"recognizes and generates #create\" do\n      { :post => \"/users\" }.should route_to(:controller => \"users\", :action => \"create\")\n    end\n\n    it \"recognizes and generates #update\" do\n      { :put => \"/users/1\" }.should route_to(:controller => \"users\", :action => \"update\", :id => \"1\")\n    end\n\n    it \"doesn't recognize #update with non-numeric id\" do\n      { :put => \"/opportunities/aaron\" }.should_not be_routable\n    end\n\n    it \"doesn't recognize #destroy\" do\n      { :delete => \"/users/1\" }.should_not be_routable\n    end\n\n    it \"doesn't recognize #destroy with non-numeric id\" do\n      { :delete => \"/opportunities/aaron\" }.should_not be_routable\n    end\n\n    it \"should generate params for #avatar\" do\n      { :get => \"/users/1/avatar\" }.should route_to( :controller => \"users\", :action => \"avatar\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #avatar with non-numeric id\" do\n      { :get => \"/opportunities/aaron/avatar\" }.should_not be_routable\n    end\n\n    it \"should generate params for #upload_avatar\" do\n      { :put => \"/users/1/upload_avatar\" }.should route_to( :controller => \"users\", :action => \"upload_avatar\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #upload_avatar with non-numeric id\" do\n      { :put => \"/opportunities/aaron/upload_avatar\" }.should_not be_routable\n    end\n\n    it \"should generate params for #password\" do\n      { :get => \"/users/1/password\" }.should route_to( :controller => \"users\", :action => \"password\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #password with non-numeric id\" do\n      { :get => \"/opportunities/aaron/password\" }.should_not be_routable\n    end\n\n    it \"should generate params for #change_password\" do\n      { :put => \"/users/1/change_password\" }.should route_to( :controller => \"users\", :action => \"change_password\", :id => \"1\" )\n    end\n\n    it \"doesn't recognize #change_password with non-numeric id\" do\n      { :put => \"/opportunities/aaron/change_password\" }.should_not be_routable\n    end\n  end\nend\n"], "filenames": ["app/models/users/user.rb", "config/routes.rb", "spec/models/users/user_spec.rb", "spec/routing/users_routing_spec.rb"], "buggy_code_start_loc": [149, 140, 211, 11], "buggy_code_end_loc": [149, 141, 211, 85], "fixing_code_start_loc": [150, 140, 212, 11], "fixing_code_end_loc": [158, 141, 226, 83], "type": "CWE-200", "message": "Fat Free CRM before 0.12.1 does not restrict XML serialization, which allows remote attackers to obtain sensitive information via a direct request, as demonstrated by a request for users/1.xml, a different vulnerability than CVE-2013-7224.", "other": {"cve": {"id": "CVE-2013-7249", "sourceIdentifier": "cve@mitre.org", "published": "2014-01-02T14:59:04.190", "lastModified": "2014-01-03T16:57:31.603", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Fat Free CRM before 0.12.1 does not restrict XML serialization, which allows remote attackers to obtain sensitive information via a direct request, as demonstrated by a request for users/1.xml, a different vulnerability than CVE-2013-7224."}, {"lang": "es", "value": "Fat Free CRM anterior a 0.12.1 no restringe la serializaci\u00f3n XML, lo que permite a atacantes remotos obtener informaci\u00f3n sensible a trav\u00e9s de una petici\u00f3n directa, como lo demuestra una solicitud de users/1.xml, una vulnerabilidad diferente a CVE-2013-7224."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.12.0", "matchCriteriaId": "437226C5-1A19-4BFE-9177-603284DAEADA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.9.6:*:*:*:*:*:*:*", "matchCriteriaId": "ADF154CE-04ED-446E-B2F4-483D7D356975"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.9.7:*:*:*:*:*:*:*", "matchCriteriaId": "34CFB3C8-9C3B-43D8-B946-0EB2FAFD3BF3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.9.8:*:*:*:*:*:*:*", "matchCriteriaId": "8C2B22FC-6FA2-4365-BC71-ED79D914B781"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.9.9:*:*:*:*:*:*:*", "matchCriteriaId": "0108A4ED-2D1F-49C8-88C7-7A074767CFE5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.9.10:*:*:*:*:*:*:*", "matchCriteriaId": "0A5888F1-1D68-4131-ADDC-BBEDB62E74ED"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.10.1:*:*:*:*:*:*:*", "matchCriteriaId": "0F5CBECE-E4A4-48A7-8880-D9562378FE22"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.11.0:*:*:*:*:*:*:*", "matchCriteriaId": "33170E54-4CF5-42B2-9F9A-269C26C9FB70"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.11.1:*:*:*:*:*:*:*", "matchCriteriaId": "890482B9-D9AC-4D10-9764-4E23A112070F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:fatfreecrm:fat_free_crm:0.11.2:*:*:*:*:*:*:*", "matchCriteriaId": "3C652479-AE15-4BAC-AE75-9018FE71AABA"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2013/12/28/2", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2013/Dec/199", "source": "cve@mitre.org"}, {"url": "http://www.phenoelit.org/stuff/ffcrm.txt", "source": "cve@mitre.org", "tags": ["Exploit"]}, {"url": "https://github.com/fatfreecrm/fat_free_crm/commit/cf26a04b356ad2161c4c6160260eb870a3de5328", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://github.com/fatfreecrm/fat_free_crm/issues/300", "source": "cve@mitre.org"}, {"url": "https://github.com/fatfreecrm/fat_free_crm/wiki/Fixing-security-vulnerabilities-%2827th-Dec-2013%29", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/fatfreecrm/fat_free_crm/commit/cf26a04b356ad2161c4c6160260eb870a3de5328"}}