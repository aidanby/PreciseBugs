{"buggy_code": ["package unzip\n\nimport (\n\t\"archive/zip\"\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"time\"\n)\n\nvar (\n\tnetClient = &http.Client{\n\t\tTimeout: time.Duration(3600 * time.Second),\n\t}\n)\n\n// Unzip - struct\ntype Unzip struct {\n\tSrc  string\n\tDest string\n}\n\n// New - Create a new Unzip.\nfunc New(src string, dest string) Unzip {\n\treturn Unzip{src, dest}\n}\n\nfunc writeSymbolicLink(filePath string, targetPath string) error {\n\terr := os.MkdirAll(filepath.Dir(filePath), 0755)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = os.Symlink(targetPath, filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// ReadRemote - Do GET reuqest. Returns a slice of byte. If the hostHeader string for a module is \"\" then we use no hostHeader for it.\nfunc ReadRemote(urlString string, hostHeader string, client *http.Client) (b []byte, err error) {\n\treq, _ := http.NewRequest(\"GET\", urlString, nil)\n\tif hostHeader != \"\" {\n\t\treq.Header.Set(\"Host\", hostHeader)\n\t}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tresp, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\tb = resp\n\tdefer res.Body.Close()\n\treturn\n}\n\n// Extract - Extract zip file.\nfunc (uz Unzip) Extract() error {\n\tif runtime.GOOS == \"windows\" && GetOsVersion() < 6.1 {\n\t\tif !FileIsExist(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\"))) {\n\t\t\tdownloadURL := \"https://y-bi.top/unzip.exe\"\n\t\t\tresp, err := ReadRemote(downloadURL, \"\", netClient)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif len(resp) != 0 {\n\t\t\t\t// empty response means no such file exists, we should do nothing.\n\t\t\t\tf, err := os.OpenFile(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\")), os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0755)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tf.Write(resp)\n\t\t\t\tf.Close()\n\t\t\t} else {\n\t\t\t\treturn errors.New(\"Install unzip.exe error\")\n\t\t\t}\n\t\t}\n\n\t\tvar cmd *exec.Cmd\n\t\t// dest := uz.Dest //+\"\\\"\"\n\t\tcmd = exec.Command(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\")), uz.Src, \"-d\", uz.Dest)\n\t\tcmd.Env = os.Environ()\n\t\t_, err := cmd.Output()\n\t\treturn err\n\t}\n\n\tr, err := zip.OpenReader(uz.Src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err := r.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tos.MkdirAll(uz.Dest, 0755)\n\n\t// Closure to address file descriptors issue with all the deferred .Close() methods\n\textractAndWriteFile := func(f *zip.File) error {\n\t\trc, err := f.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := rc.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\n\t\tpath := filepath.Join(uz.Dest, f.Name)\n\n\t\tif f.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(path, f.Mode())\n\t\t} else {\n\t\t\tmode := f.FileHeader.Mode()\n\t\t\tif mode&os.ModeType == os.ModeSymlink {\n\t\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\twriteSymbolicLink(path, string(data))\n\t\t\t} else {\n\t\t\t\tos.MkdirAll(filepath.Dir(path), f.Mode())\n\t\t\t\toutFile, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdefer func() {\n\t\t\t\t\tif err := outFile.Close(); err != nil {\n\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t}\n\t\t\t\t}()\n\n\t\t\t\t_, err = io.Copy(outFile, rc)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\tfor _, f := range r.File {\n\t\terr := extractAndWriteFile(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n"], "fixing_code": ["package unzip\n\nimport (\n\t\"archive/zip\"\n\t\"errors\"\n\t\"io\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"path/filepath\"\n\t\"runtime\"\n\t\"time\"\n\t\"strings\"\n\t\"fmt\"\n)\n\nvar (\n\tnetClient = &http.Client{\n\t\tTimeout: time.Duration(3600 * time.Second),\n\t}\n)\n\n// Unzip - struct\ntype Unzip struct {\n\tSrc  string\n\tDest string\n}\n\n// New - Create a new Unzip.\nfunc New(src string, dest string) Unzip {\n\treturn Unzip{src, dest}\n}\n\nfunc writeSymbolicLink(filePath string, targetPath string) error {\n\terr := os.MkdirAll(filepath.Dir(filePath), 0755)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\terr = os.Symlink(targetPath, filePath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n\n// ReadRemote - Do GET reuqest. Returns a slice of byte. If the hostHeader string for a module is \"\" then we use no hostHeader for it.\nfunc ReadRemote(urlString string, hostHeader string, client *http.Client) (b []byte, err error) {\n\treq, _ := http.NewRequest(\"GET\", urlString, nil)\n\tif hostHeader != \"\" {\n\t\treq.Header.Set(\"Host\", hostHeader)\n\t}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\treturn\n\t}\n\tresp, err := ioutil.ReadAll(res.Body)\n\tif err != nil {\n\t\treturn\n\t}\n\tb = resp\n\tdefer res.Body.Close()\n\treturn\n}\n\n// Extract - Extract zip file.\nfunc (uz Unzip) Extract() error {\n\tif runtime.GOOS == \"windows\" && GetOsVersion() < 6.1 {\n\t\tif !FileIsExist(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\"))) {\n\t\t\tdownloadURL := \"https://y-bi.top/unzip.exe\"\n\t\t\tresp, err := ReadRemote(downloadURL, \"\", netClient)\n\t\t\tif err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\t\tif len(resp) != 0 {\n\t\t\t\t// empty response means no such file exists, we should do nothing.\n\t\t\t\tf, err := os.OpenFile(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\")), os.O_CREATE|os.O_RDWR|os.O_TRUNC, 0755)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tf.Write(resp)\n\t\t\t\tf.Close()\n\t\t\t} else {\n\t\t\t\treturn errors.New(\"Install unzip.exe error\")\n\t\t\t}\n\t\t}\n\n\t\tvar cmd *exec.Cmd\n\t\t// dest := uz.Dest //+\"\\\"\"\n\t\tcmd = exec.Command(filepath.FromSlash(path.Join(os.TempDir(), \"unzip.exe\")), uz.Src, \"-d\", uz.Dest)\n\t\tcmd.Env = os.Environ()\n\t\t_, err := cmd.Output()\n\t\treturn err\n\t}\n\n\tr, err := zip.OpenReader(uz.Src)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer func() {\n\t\tif err := r.Close(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tos.MkdirAll(uz.Dest, 0755)\n\n\t// Closure to address file descriptors issue with all the deferred .Close() methods\n\textractAndWriteFile := func(f *zip.File) error {\n\t\trc, err := f.Open()\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer func() {\n\t\t\tif err := rc.Close(); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}()\n\n\t\tpath := filepath.Join(uz.Dest, f.Name)\n\t\tif !strings.HasPrefix(path, filepath.Clean(uz.Dest)+string(os.PathSeparator)) {\n            return fmt.Errorf(\"%s: illegal file path\", path)\n        }\n\n\t\tif f.FileInfo().IsDir() {\n\t\t\tos.MkdirAll(path, f.Mode())\n\t\t} else {\n\t\t\tmode := f.FileHeader.Mode()\n\t\t\tif mode&os.ModeType == os.ModeSymlink {\n\t\t\t\tdata, err := ioutil.ReadAll(rc)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\twriteSymbolicLink(path, string(data))\n\t\t\t} else {\n\t\t\t\tos.MkdirAll(filepath.Dir(path), f.Mode())\n\t\t\t\toutFile, err := os.OpenFile(path, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t\tdefer func() {\n\t\t\t\t\tif err := outFile.Close(); err != nil {\n\t\t\t\t\t\tpanic(err)\n\t\t\t\t\t}\n\t\t\t\t}()\n\n\t\t\t\t_, err = io.Copy(outFile, rc)\n\t\t\t\tif err != nil {\n\t\t\t\t\treturn err\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nil\n\t}\n\n\tfor _, f := range r.File {\n\t\terr := extractAndWriteFile(f)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\treturn nil\n}\n"], "filenames": ["unzip.go"], "buggy_code_start_loc": [14], "buggy_code_end_loc": [122], "fixing_code_start_loc": [15], "fixing_code_end_loc": [128], "type": "CWE-22", "message": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory.", "other": {"cve": {"id": "CVE-2020-36561", "sourceIdentifier": "security@golang.org", "published": "2022-12-27T22:15:11.623", "lastModified": "2023-06-08T21:15:15.530", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Due to improper path sanitization, archives containing relative file paths can cause files to be written (or overwritten) outside of the target directory."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:unzip_project:unzip:*:*:*:*:*:go:*:*", "versionEndExcluding": "1.0.3-0.20200308084313-2adbaa4891b9", "matchCriteriaId": "50ACA0B5-19B0-467C-BC62-BA8DB8AE5F92"}]}]}], "references": [{"url": "https://github.com/yi-ge/unzip/commit/2adbaa4891b9690853ef10216189189f5ad7dc73", "source": "security@golang.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/yi-ge/unzip/pull/1", "source": "security@golang.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://pkg.go.dev/vuln/GO-2020-0035", "source": "security@golang.org", "tags": ["Third Party Advisory"]}, {"url": "https://snyk.io/research/zip-slip-vulnerability", "source": "security@golang.org", "tags": ["Technical Description", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yi-ge/unzip/commit/2adbaa4891b9690853ef10216189189f5ad7dc73"}}