{"buggy_code": ["<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse HtmlSanitizer\\Sanitizer;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     *\n     * @param string $answer\n     * @return string\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     * @param string $answer\n     * @param string $currentUrl\n     * @return string\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\"><i aria-hidden=\"true\" class=\"fa fa-twitter\"></i></a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\"><i aria-hidden=\"true\" class=\"fa fa-envelope\"></i></a>',\n            $url\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     *\n     * @param Faq $faq\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        global $languageCodes;\n\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\n        if (count($availableLanguages) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', $languageCodes[strtoupper($language)]);\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @param string  $answer\n     * @param int $numWords\n     * @return string\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags($parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @param Category $category\n     * @param Faq      $faq\n     * @param string   $language\n     * @return string\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, string $language = ''): string\n    {\n        global $PMF_LANG;\n\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf('<h3>%s</h3>', $category->getPath($data['category_id'], ' &raquo; '));\n                }\n\n                $output .= sprintf('<h4>%s</h4>', Strings::htmlentities($data['title']));\n                $output .= sprintf('<article>%s</article>', $data['content']);\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    $PMF_LANG['msgAuthor'],\n                    Strings::htmlentities($data['author']),\n                    $PMF_LANG['msgLastUpdateArticle'] . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     *\n     * @param int    $faqId\n     * @param string $faqLang\n     * @return string\n     */\n    public function createFaqTranslationLinkList(int $faqId, string $faqLang): string\n    {\n        global $languageCodes;\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->languageAvailable(0, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $languageCode,\n                    'Translate to',\n                    $languageCodes[strtoupper($languageCode)]\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n\n\n    /**\n     * Remove <script> tags, we don't need them\n     *\n     * @param string $content\n     * @return string\n     */\n    public function cleanUpContent(string $content): string\n    {\n        $htmlSanitizer = Sanitizer::create(\n            [\n                'extensions' => [\n                    'basic', 'code', 'image', 'list', 'table', 'iframe', 'details', 'extra'\n                ],\n                'tags' => [\n                    'img' => [\n                        'allowed_attributes' => ['alt', 'class', 'height', 'src', 'style', 'title', 'width'],\n                    ],\n                    'div' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'li' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'p' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'span' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'table' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'tr' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'th' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'td' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ]\n                ],\n\n            ]\n        );\n\n        return $htmlSanitizer->sanitize($content);\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ search.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-09-07\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Utils;\nuse stdClass;\n\n/**\n * Class SearchHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass SearchHelper extends Helper\n{\n    /**\n     * Pagination object.\n     *\n     * @var Pagination\n     */\n    private $pagination = null;\n\n    /**\n     * Search term.\n     *\n     * @var string\n     */\n    private $searchTerm = '';\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->pmfLang = $this->getTranslations();\n    }\n\n    /**\n     * PMF_Pagination setter.\n     *\n     * @param Pagination $pagination Pagination\n     */\n    public function setPagination(Pagination $pagination)\n    {\n        $this->pagination = $pagination;\n    }\n\n    /**\n     * Search term setter.\n     *\n     * @param string $searchTerm Search term\n     */\n    public function setSearchTerm(string $searchTerm)\n    {\n        $this->searchTerm = $searchTerm;\n    }\n\n    /**\n     * Renders the results for Typehead.\n     *\n     * @param SearchResultSet $resultSet Result set object\n     *\n     * @return string\n     */\n    public function renderInstantResponseResult(SearchResultSet $resultSet): string\n    {\n        $results = [];\n        $maxResults = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if (0 < $numOfResults) {\n            $i = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($i > $maxResults) {\n                    continue;\n                }\n\n                // Build the link to the faq record\n                $currentUrl = sprintf(\n                    '%s?%saction=faq&cat=%d&id=%d&artlang=%s&highlight=%s',\n                    $this->config->getDefaultUrl() . 'index.php',\n                    $this->sessionId,\n                    $result->category_id,\n                    $result->id,\n                    $result->lang,\n                    urlencode($this->searchTerm)\n                );\n\n                $question = html_entity_decode($result->question, ENT_QUOTES | ENT_XML1 | ENT_HTML5, 'UTF-8');\n                $link = new Link($currentUrl, $this->config);\n                $link->itemTitle = $result->question;\n                $faq = new stdClass();\n                $faq->categoryName = $this->Category->getPath($result->category_id);\n                $faq->faqQuestion = Utils::chopString($question, 15);\n                $faq->faqLink = $link->toString();\n\n                $results[] = $faq;\n            }\n        }\n\n        return json_encode($results);\n    }\n\n    /**\n     * Renders the result page for Instant Response.\n     *\n     * @param SearchResultSet $resultSet SearchResultSet object\n     *\n     * @return string\n     */\n    public function renderAdminSuggestionResult(SearchResultSet $resultSet): string\n    {\n        $html = '';\n        $confPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if (0 < $numOfResults) {\n            $i = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($i > $confPerPage) {\n                    continue;\n                }\n\n                if (!isset($result->solution_id)) {\n                    $faq = new Faq($this->config);\n                    $solutionId = $faq->getSolutionIdFromId($result->id, $result->lang);\n                } else {\n                    $solutionId = $result->solution_id;\n                }\n\n                // Build the link to the faq record\n                $currentUrl = $this->config->getDefaultUrl() . sprintf('index.php?solution_id=%d', $solutionId);\n\n                $html .= sprintf(\n                    '<label for=\"%d\"><input id=\"%d\" type=\"radio\" name=\"faqURL\" value=\"%s\"> %s</label><br>',\n                    $result->id,\n                    $result->id,\n                    $currentUrl,\n                    $result->question\n                );\n                ++$i;\n            }\n        } else {\n            $html = $this->translation['err_noArticles'];\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the result page for the main search page.\n     *\n     * @param SearchResultSet $resultSet\n     * @param int             $currentPage\n     *\n     * @return string\n     * @throws Exception\n     */\n    public function renderSearchResult(SearchResultSet $resultSet, int $currentPage): string\n    {\n        $html = '';\n        $confPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        $totalPages = ceil($numOfResults / $confPerPage);\n        $lastPage = $currentPage * $confPerPage;\n        $firstPage = $lastPage - $confPerPage;\n\n        if (0 < $numOfResults) {\n            $html .= sprintf(\n                \"<p role=\\\"heading\\\" aria-level=\\\"1\\\">%s</p>\\n\",\n                $this->plurals->GetMsg('plmsgSearchAmount', $numOfResults)\n            );\n\n            if (1 < $totalPages) {\n                $html .= sprintf(\n                    \"<p><strong>%s%d %s %s</strong></p>\\n\",\n                    $this->translation['msgPage'],\n                    $currentPage,\n                    $this->translation['msgVoteFrom'],\n                    $this->plurals->GetMsg('plmsgPagesTotal', $totalPages)\n                );\n            }\n\n            $html .= \"<ul class=\\\"phpmyfaq-search-results list-unstyled\\\">\\n\";\n\n            $counter = $displayedCounter = 0;\n            $faqHelper = new FaqHelper($this->config);\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($displayedCounter >= $confPerPage) {\n                    break;\n                }\n                ++$counter;\n                if ($counter <= $firstPage) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                // Set language for current category to fetch the correct category name\n                $this->Category->setLanguage($result->lang);\n\n                $categoryInfo = $this->Category->getCategoriesFromFaq($result->id);\n                $categoryInfo = array_values($categoryInfo); //Reset the array keys\n                $question = Utils::chopString($result->question, 15);\n                $answerPreview = $faqHelper->renderAnswerPreview($result->answer, 25);\n\n                $searchTerm = str_replace(\n                    ['^', '.', '?', '*', '+', '{', '}', '(', ')', '[', ']', '\"'],\n                    '',\n                    $this->searchTerm\n                );\n                $searchTerm = preg_quote($searchTerm, '/');\n                $searchItems = explode(' ', $searchTerm);\n\n                if ($this->config->get('search.enableHighlighting') && Strings::strlen($searchItems[0]) > 1) {\n                    foreach ($searchItems as $item) {\n                        if (Strings::strlen($item) > 2) {\n                            $question = Utils::setHighlightedString($question, $item);\n                            $answerPreview = Utils::setHighlightedString($answerPreview, $item);\n                        }\n                    }\n                }\n\n                // Build the link to the faq record\n                $currentUrl = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s&amp;highlight=%s',\n                    $this->config->getDefaultUrl(),\n                    $this->sessionId,\n                    $result->category_id,\n                    $result->id,\n                    $result->lang,\n                    urlencode($searchTerm)\n                );\n\n                $oLink = new Link($currentUrl, $this->config);\n                $oLink->text = $question;\n                $oLink->itemTitle = $oLink->tooltip = $result->question;\n\n                $html .= '<li>';\n                $html .= $this->renderScore($result->score * 33);\n                $html .= sprintf(\n                    '<strong>%s</strong>: %s<br>',\n                    $categoryInfo[0]['name'],\n                    $oLink->toHtmlAnchor()\n                );\n                $html .= sprintf(\n                    \"<small class=\\\"searchpreview\\\"><strong>%s</strong> %s...</small>\\n\",\n                    $this->translation['msgSearchContent'],\n                    $answerPreview\n                );\n                $html .= '</li>';\n            }\n\n            $html .= \"</ul>\\n\";\n\n            if (1 < $totalPages) {\n                $html .= $this->pagination->render();\n            }\n        } else {\n            $html = $this->translation['err_noArticles'];\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the scoring stars\n     * @param int $relevance\n     * @return string\n     */\n    private function renderScore(int $relevance = 0): string\n    {\n        $html = sprintf('<span title=\"%01.2f%%\">', $relevance);\n        $emptyStar = '<i aria-hidden=\"true\" class=\"fa fa-star-o\"></i>';\n        $fullStar = '<i aria-hidden=\"true\" class=\"fa fa-star\"></i>';\n\n        if (0 === (int)$relevance) {\n            $html .= $emptyStar . $emptyStar . $emptyStar;\n        } elseif ($relevance < 33) {\n            $html .= $fullStar . $emptyStar . $emptyStar;\n        } elseif ($relevance < 66) {\n            $html .= $fullStar . $fullStar . $emptyStar;\n        } else {\n            $html .= $fullStar . $fullStar . $fullStar;\n        }\n\n        return $html . '</span> ';\n    }\n\n    /**\n     * @param SearchResultSet $resultSet\n     * @param int             $recordId\n     *\n     * @return string\n     */\n    public function renderRelatedFaqs(SearchResultSet $resultSet, int $recordId): string\n    {\n        $html = '';\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if ($numOfResults > 0) {\n            $html .= '<ul>';\n            $counter = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($counter >= 5) {\n                    continue;\n                }\n                if ($recordId == $result->id) {\n                    continue;\n                }\n                ++$counter;\n\n                $url = sprintf(\n                    '%sindex.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $result->category_id,\n                    $result->id,\n                    $result->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = Strings::htmlentities($result->question);\n                $oLink->text = Strings::htmlentities($result->question);\n                $oLink->tooltip = Strings::htmlentities($result->question);\n                $html .= '<li>' . $oLink->toHtmlAnchor() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the list of the most popular search terms.\n     *\n     * @param array $mostPopularSearches Array with popular search terms\n     *\n     * @return string\n     */\n    public function renderMostPopularSearches(array $mostPopularSearches)\n    {\n        $html = '';\n\n        foreach ($mostPopularSearches as $searchItem) {\n            if (Strings::strlen($searchItem['searchterm']) > 0) {\n                $html .= sprintf(\n                    '<a class=\"btn btn-primary m-1\" href=\"?search=%s&submit=Search&action=search\">%s ' .\n                    '<span class=\"badge badge-info\">%dx</span> </a>',\n                    urlencode($searchItem['searchterm']),\n                    $searchItem['searchterm'],\n                    $searchItem['number']\n                );\n            }\n        }\n\n        return $html;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Helper class for phpMyFAQ FAQs.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2010-11-12\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse HtmlSanitizer\\Sanitizer;\nuse ParsedownExtra;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Date;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Utils;\n\n/**\n * Class FaqHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass FaqHelper extends Helper\n{\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * Rewrites the CSS class generated by TinyMCE for HighlightJS.\n     *\n     * @param string $answer\n     * @return string\n     */\n    public function renderMarkupContent(string $answer): string\n    {\n        return str_replace('class=\"language-markup\"', 'class=\"language-html\"', $answer);\n    }\n\n    /**\n     * Extends URL fragments (e.g. <a href=\"#foo\">) with the full default URL.\n     * @param string $answer\n     * @param string $currentUrl\n     * @return string\n     */\n    public function rewriteUrlFragments(string $answer, string $currentUrl): string\n    {\n        return str_replace('href=\"#', 'href=\"' . $currentUrl . '#', $answer);\n    }\n\n    /**\n     * Renders a Share on Twitter link.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderTwitterShareLink(string $url): string\n    {\n        if (empty($url) || $this->config->get('socialnetworks.disableAll')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\" target=\"_blank\"><i aria-hidden=\"true\" class=\"fa fa-twitter\"></i></a>',\n            $url\n        );\n    }\n\n    /**\n     * Renders a \"Send to friend\" HTML snippet.\n     *\n     * @param  string $url\n     * @return string\n     */\n    public function renderSendToFriend(string $url): string\n    {\n        if (empty($url) || !$this->config->get('main.enableSendToFriend')) {\n            return '';\n        }\n\n        return sprintf(\n            '<a rel=\"nofollow\" href=\"%s\"><i aria-hidden=\"true\" class=\"fa fa-envelope\"></i></a>',\n            $url\n        );\n    }\n\n\n    /**\n     * Renders a select box with all translations of a FAQ.\n     *\n     * @param Faq $faq\n     * @param int $categoryId\n     * @return string\n     */\n    public function renderChangeLanguageSelector(Faq $faq, int $categoryId): string\n    {\n        global $languageCodes;\n\n        $html = '';\n        $faqUrl = sprintf(\n            '?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%%s',\n            $categoryId,\n            $faq->faqRecord['id']\n        );\n\n        $oLink = new Link($this->config->getDefaultUrl() . $faqUrl, $this->config);\n        $oLink->itemTitle = $faq->faqRecord['title'];\n        $availableLanguages = $this->config->getLanguage()->languageAvailable($faq->faqRecord['id']);\n\n        if (count($availableLanguages) > 1) {\n            $html = '<form method=\"post\">';\n            $html .= '<select name=\"language\" onchange=\"top.location.href = this.options[this.selectedIndex].value;\">';\n\n            foreach ($availableLanguages as $language) {\n                $html .= sprintf('<option value=\"%s\"', sprintf($oLink->toString(), $language));\n                $html .= ($faq->faqRecord['lang'] === $language ? ' selected' : '');\n                $html .= sprintf('>%s</option>', $languageCodes[strtoupper($language)]);\n            }\n\n            $html .= '</select></form>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders a preview of the answer.\n     *\n     * @param string  $answer\n     * @param int $numWords\n     * @return string\n     * @throws Exception\n     */\n    public function renderAnswerPreview(string $answer, int $numWords): string\n    {\n        if ($this->config->get('main.enableMarkdownEditor')) {\n            $parseDown = new ParsedownExtra();\n            return Utils::chopString(strip_tags($parseDown->text($answer)), $numWords);\n        } else {\n            return Utils::chopString(strip_tags($answer), $numWords);\n        }\n    }\n\n    /**\n     * Creates an overview with all categories with their FAQs.\n     *\n     * @param Category $category\n     * @param Faq      $faq\n     * @param string   $language\n     * @return string\n     * @throws Exception\n     */\n    public function createOverview(Category $category, Faq $faq, string $language = ''): string\n    {\n        global $PMF_LANG;\n\n        $output = '';\n\n        // Initialize categories\n        $category->transform(0);\n\n        // Get all FAQs\n        $faq->getAllRecords(FAQ_SORTING_TYPE_CATID_FAQID, ['lang' => $language]);\n        $date = new Date($this->config);\n\n        if (count($faq->faqRecords)) {\n            $lastCategory = 0;\n            foreach ($faq->faqRecords as $data) {\n                if ($data['category_id'] !== $lastCategory) {\n                    $output .= sprintf(\n                        '<h3>%s</h3>',\n                        $this->cleanUpContent(\n                            $this->cleanUpContent($category->getPath($data['category_id'], ' &raquo; '))\n                        )\n                    );\n                }\n\n                $output .= sprintf('<h4>%s</h4>', Strings::htmlentities($data['title']));\n                $output .= sprintf('<article>%s</article>', $this->cleanUpContent($data['content']));\n                $output .= sprintf(\n                    '<p>%s: %s<br>%s',\n                    $PMF_LANG['msgAuthor'],\n                    Strings::htmlentities($data['author']),\n                    $PMF_LANG['msgLastUpdateArticle'] . $date->format($data['updated'])\n                );\n                $output .= '<hr>';\n\n                $lastCategory = $data['category_id'];\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Creates a list of links with available languages to edit a FAQ\n     * in the admin backend.\n     *\n     * @param int    $faqId\n     * @param string $faqLang\n     * @return string\n     */\n    public function createFaqTranslationLinkList(int $faqId, string $faqLang): string\n    {\n        global $languageCodes;\n        $output = '';\n\n        $availableLanguages = $this->config->getLanguage()->languageAvailable(0, 'faqcategories');\n        foreach ($availableLanguages as $languageCode) {\n            if ($languageCode !== $faqLang) {\n                $output .= sprintf(\n                    '<a class=\"dropdown-item\" href=\"?action=editentry&id=%d&translateTo=%s\">%s %s</a>',\n                    $faqId,\n                    $languageCode,\n                    'Translate to',\n                    $languageCodes[strtoupper($languageCode)]\n                );\n            } else {\n                $output .= '<a class=\"dropdown-item\">n/a</a>';\n            }\n        }\n\n        return $output;\n    }\n\n\n    /**\n     * Remove <script> tags, we don't need them\n     *\n     * @param string $content\n     * @return string\n     */\n    public function cleanUpContent(string $content): string\n    {\n        $htmlSanitizer = Sanitizer::create(\n            [\n                'extensions' => [\n                    'basic', 'code', 'image', 'list', 'table', 'iframe', 'details', 'extra'\n                ],\n                'tags' => [\n                    'img' => [\n                        'allowed_attributes' => ['alt', 'class', 'height', 'src', 'style', 'title', 'width'],\n                    ],\n                    'div' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'li' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'p' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'span' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'table' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'tr' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'th' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ],\n                    'td' => [\n                        'allowed_attributes' => ['class', 'style'],\n                    ]\n                ],\n\n            ]\n        );\n\n        return $htmlSanitizer->sanitize($content);\n    }\n}\n", "<?php\n\n/**\n * Helper class for phpMyFAQ search.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\\Helper\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2009-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2009-09-07\n */\n\nnamespace phpMyFAQ\\Helper;\n\nuse Exception;\nuse phpMyFAQ\\Configuration;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Helper;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Pagination;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\Utils;\nuse stdClass;\n\n/**\n * Class SearchHelper\n *\n * @package phpMyFAQ\\Helper\n */\nclass SearchHelper extends Helper\n{\n    /**\n     * Pagination object.\n     *\n     * @var Pagination\n     */\n    private $pagination = null;\n\n    /**\n     * Search term.\n     *\n     * @var string\n     */\n    private $searchTerm = '';\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->pmfLang = $this->getTranslations();\n    }\n\n    /**\n     * PMF_Pagination setter.\n     *\n     * @param Pagination $pagination Pagination\n     */\n    public function setPagination(Pagination $pagination)\n    {\n        $this->pagination = $pagination;\n    }\n\n    /**\n     * Search term setter.\n     *\n     * @param string $searchTerm Search term\n     */\n    public function setSearchTerm(string $searchTerm)\n    {\n        $this->searchTerm = $searchTerm;\n    }\n\n    /**\n     * Renders the results for Typehead.\n     *\n     * @param SearchResultSet $resultSet Result set object\n     *\n     * @return string\n     */\n    public function renderInstantResponseResult(SearchResultSet $resultSet): string\n    {\n        $results = [];\n        $maxResults = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if (0 < $numOfResults) {\n            $i = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($i > $maxResults) {\n                    continue;\n                }\n\n                // Build the link to the faq record\n                $currentUrl = sprintf(\n                    '%s?%saction=faq&cat=%d&id=%d&artlang=%s&highlight=%s',\n                    $this->config->getDefaultUrl() . 'index.php',\n                    $this->sessionId,\n                    $result->category_id,\n                    $result->id,\n                    $result->lang,\n                    urlencode($this->searchTerm)\n                );\n\n                $question = html_entity_decode($result->question, ENT_QUOTES | ENT_XML1 | ENT_HTML5, 'UTF-8');\n                $link = new Link($currentUrl, $this->config);\n                $link->itemTitle = $result->question;\n                $faq = new stdClass();\n                $faq->categoryName = $this->Category->getPath($result->category_id);\n                $faq->faqQuestion = Utils::chopString($question, 15);\n                $faq->faqLink = $link->toString();\n\n                $results[] = $faq;\n            }\n        }\n\n        return json_encode($results);\n    }\n\n    /**\n     * Renders the result page for Instant Response.\n     *\n     * @param SearchResultSet $resultSet SearchResultSet object\n     *\n     * @return string\n     */\n    public function renderAdminSuggestionResult(SearchResultSet $resultSet): string\n    {\n        $html = '';\n        $confPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if (0 < $numOfResults) {\n            $i = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($i > $confPerPage) {\n                    continue;\n                }\n\n                if (!isset($result->solution_id)) {\n                    $faq = new Faq($this->config);\n                    $solutionId = $faq->getSolutionIdFromId($result->id, $result->lang);\n                } else {\n                    $solutionId = $result->solution_id;\n                }\n\n                // Build the link to the faq record\n                $currentUrl = $this->config->getDefaultUrl() . sprintf('index.php?solution_id=%d', $solutionId);\n\n                $html .= sprintf(\n                    '<label for=\"%d\"><input id=\"%d\" type=\"radio\" name=\"faqURL\" value=\"%s\"> %s</label><br>',\n                    $result->id,\n                    $result->id,\n                    $currentUrl,\n                    $result->question\n                );\n                ++$i;\n            }\n        } else {\n            $html = $this->translation['err_noArticles'];\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the result page for the main search page.\n     *\n     * @param SearchResultSet $resultSet\n     * @param int             $currentPage\n     *\n     * @return string\n     * @throws Exception\n     */\n    public function renderSearchResult(SearchResultSet $resultSet, int $currentPage): string\n    {\n        $html = '';\n        $confPerPage = $this->config->get('records.numberOfRecordsPerPage');\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        $totalPages = ceil($numOfResults / $confPerPage);\n        $lastPage = $currentPage * $confPerPage;\n        $firstPage = $lastPage - $confPerPage;\n\n        if (0 < $numOfResults) {\n            $html .= sprintf(\n                \"<p role=\\\"heading\\\" aria-level=\\\"1\\\">%s</p>\\n\",\n                $this->plurals->GetMsg('plmsgSearchAmount', $numOfResults)\n            );\n\n            if (1 < $totalPages) {\n                $html .= sprintf(\n                    \"<p><strong>%s%d %s %s</strong></p>\\n\",\n                    $this->translation['msgPage'],\n                    $currentPage,\n                    $this->translation['msgVoteFrom'],\n                    $this->plurals->GetMsg('plmsgPagesTotal', $totalPages)\n                );\n            }\n\n            $html .= \"<ul class=\\\"phpmyfaq-search-results list-unstyled\\\">\\n\";\n\n            $counter = $displayedCounter = 0;\n            $faqHelper = new FaqHelper($this->config);\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($displayedCounter >= $confPerPage) {\n                    break;\n                }\n                ++$counter;\n                if ($counter <= $firstPage) {\n                    continue;\n                }\n                ++$displayedCounter;\n\n                // Set language for current category to fetch the correct category name\n                $this->Category->setLanguage($result->lang);\n\n                $categoryInfo = $this->Category->getCategoriesFromFaq($result->id);\n                $categoryInfo = array_values($categoryInfo); //Reset the array keys\n                $question = Utils::chopString($result->question, 15);\n                $answerPreview = $faqHelper->renderAnswerPreview($result->answer, 25);\n\n                $searchTerm = str_replace(\n                    ['^', '.', '?', '*', '+', '{', '}', '(', ')', '[', ']', '\"'],\n                    '',\n                    $this->searchTerm\n                );\n                $searchTerm = preg_quote($searchTerm, '/');\n                $searchItems = explode(' ', $searchTerm);\n\n                if ($this->config->get('search.enableHighlighting') && Strings::strlen($searchItems[0]) > 1) {\n                    foreach ($searchItems as $item) {\n                        if (Strings::strlen($item) > 2) {\n                            $question = Utils::setHighlightedString($question, $item);\n                            $answerPreview = Utils::setHighlightedString($answerPreview, $item);\n                        }\n                    }\n                }\n\n                // Build the link to the faq record\n                $currentUrl = sprintf(\n                    '%sindex.php?%saction=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s&amp;highlight=%s',\n                    $this->config->getDefaultUrl(),\n                    $this->sessionId,\n                    $result->category_id,\n                    $result->id,\n                    $result->lang,\n                    urlencode($searchTerm)\n                );\n\n                $oLink = new Link($currentUrl, $this->config);\n                $oLink->text = Strings::htmlentities($question);\n                $oLink->itemTitle = $oLink->tooltip = Strings::htmlentities($result->question);\n\n                $html .= '<li>';\n                $html .= $this->renderScore($result->score * 33);\n                $html .= sprintf(\n                    '<strong>%s</strong>: %s<br>',\n                    Strings::htmlentities($categoryInfo[0]['name']),\n                    $oLink->toHtmlAnchor()\n                );\n                $html .= sprintf(\n                    \"<small class=\\\"searchpreview\\\"><strong>%s</strong> %s...</small>\\n\",\n                    $this->translation['msgSearchContent'],\n                    $answerPreview\n                );\n                $html .= '</li>';\n            }\n\n            $html .= \"</ul>\\n\";\n\n            if (1 < $totalPages) {\n                $html .= $this->pagination->render();\n            }\n        } else {\n            $html = $this->translation['err_noArticles'];\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the scoring stars\n     * @param int $relevance\n     * @return string\n     */\n    private function renderScore(int $relevance = 0): string\n    {\n        $html = sprintf('<span title=\"%01.2f%%\">', $relevance);\n        $emptyStar = '<i aria-hidden=\"true\" class=\"fa fa-star-o\"></i>';\n        $fullStar = '<i aria-hidden=\"true\" class=\"fa fa-star\"></i>';\n\n        if (0 === (int)$relevance) {\n            $html .= $emptyStar . $emptyStar . $emptyStar;\n        } elseif ($relevance < 33) {\n            $html .= $fullStar . $emptyStar . $emptyStar;\n        } elseif ($relevance < 66) {\n            $html .= $fullStar . $fullStar . $emptyStar;\n        } else {\n            $html .= $fullStar . $fullStar . $fullStar;\n        }\n\n        return $html . '</span> ';\n    }\n\n    /**\n     * @param SearchResultSet $resultSet\n     * @param int             $recordId\n     *\n     * @return string\n     */\n    public function renderRelatedFaqs(SearchResultSet $resultSet, int $recordId): string\n    {\n        $html = '';\n        $numOfResults = $resultSet->getNumberOfResults();\n\n        if ($numOfResults > 0) {\n            $html .= '<ul>';\n            $counter = 0;\n            foreach ($resultSet->getResultSet() as $result) {\n                if ($counter >= 5) {\n                    continue;\n                }\n                if ($recordId == $result->id) {\n                    continue;\n                }\n                ++$counter;\n\n                $url = sprintf(\n                    '%sindex.php?action=faq&amp;cat=%d&amp;id=%d&amp;artlang=%s',\n                    $this->config->getDefaultUrl(),\n                    $result->category_id,\n                    $result->id,\n                    $result->lang\n                );\n                $oLink = new Link($url, $this->config);\n                $oLink->itemTitle = Strings::htmlentities($result->question);\n                $oLink->text = Strings::htmlentities($result->question);\n                $oLink->tooltip = Strings::htmlentities($result->question);\n                $html .= '<li>' . $oLink->toHtmlAnchor() . '</li>';\n            }\n            $html .= '</ul>';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Renders the list of the most popular search terms.\n     *\n     * @param array $mostPopularSearches Array with popular search terms\n     *\n     * @return string\n     */\n    public function renderMostPopularSearches(array $mostPopularSearches)\n    {\n        $html = '';\n\n        foreach ($mostPopularSearches as $searchItem) {\n            if (Strings::strlen($searchItem['searchterm']) > 0) {\n                $html .= sprintf(\n                    '<a class=\"btn btn-primary m-1\" href=\"?search=%s&submit=Search&action=search\">%s ' .\n                    '<span class=\"badge badge-info\">%dx</span> </a>',\n                    urlencode($searchItem['searchterm']),\n                    $searchItem['searchterm'],\n                    $searchItem['number']\n                );\n            }\n        }\n\n        return $html;\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Helper/FaqHelper.php", "phpmyfaq/src/phpMyFAQ/Helper/SearchHelper.php"], "buggy_code_start_loc": [190, 261], "buggy_code_end_loc": [195, 269], "fixing_code_start_loc": [190, 261], "fixing_code_end_loc": [200, 269], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.17.", "other": {"cve": {"id": "CVE-2023-6890", "sourceIdentifier": "security@huntr.dev", "published": "2023-12-16T09:15:07.470", "lastModified": "2024-02-08T10:15:13.133", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository thorsten/phpmyfaq prior to 3.1.17."}, {"lang": "es", "value": "Cross-site Scripting (XSS): almacenadas en el repositorio de GitHub thorsten/phpmyfaq antes de la versi\u00f3n 3.1.17."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.17", "matchCriteriaId": "85E03A12-18B2-4BD1-AC03-9440332134B9"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/97d90ebbe11ebc6081bf49a2ba4b60f227cd1b43", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/2cf11678-8793-4fa1-b21a-f135564a105d", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/97d90ebbe11ebc6081bf49a2ba4b60f227cd1b43"}}