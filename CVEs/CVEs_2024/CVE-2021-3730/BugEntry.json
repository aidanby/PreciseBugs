{"buggy_code": ["<?php\n/**\n * AvailableBudgetController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Budget;\n\nuse Carbon\\Carbon;\nuse Carbon\\Exceptions\\InvalidDateException;\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\Repositories\\Budget\\AvailableBudgetRepositoryInterface;\nuse FireflyIII\\Repositories\\Currency\\CurrencyRepositoryInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\nuse Log;\n\n/**\n *\n * Class AvailableBudgetController\n */\nclass AvailableBudgetController extends Controller\n{\n\n    /** @var AvailableBudgetRepositoryInterface */\n    private $abRepository;\n    /** @var CurrencyRepositoryInterface */\n    private $currencyRepos;\n\n    /**\n     * AmountController constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.budgets'));\n                app('view')->share('mainTitleIcon', 'fa-pie-chart');\n                $this->abRepository  = app(AvailableBudgetRepositoryInterface::class);\n                $this->currencyRepos = app(CurrencyRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create will always assume the user's default currency, if it's not set.\n     *\n     * This method will check if there is no AB, and refuse to continue if it exists.\n     *\n     * @param Request                  $request\n     * @param Carbon                   $start\n     * @param Carbon                   $end\n     * @param TransactionCurrency|null $currency\n     *\n     * @return Factory|RedirectResponse|Redirector|View\n     */\n    public function create(Request $request, Carbon $start, Carbon $end, ?TransactionCurrency $currency = null)\n    {\n        $currency   = $currency ?? app('amount')->getDefaultCurrency();\n        $collection = $this->abRepository->get($start, $end);\n        $filtered   = $collection->filter(\n            static function (AvailableBudget $budget) use ($currency) {\n                return $currency->id === $budget->transaction_currency_id;\n            }\n        );\n        if ($filtered->count() > 0) {\n            /** @var AvailableBudget $first */\n            $first = $filtered->first();\n\n            return redirect(route('available-budgets.edit', [$first->id]));\n        }\n        $page = (int)($request->get('page') ?? 1);\n\n        return prefixView('budgets.available-budgets.create', compact('start', 'end', 'page', 'currency'));\n    }\n\n    /**\n     * createAlternative will show a list of enabled currencies so the user can pick one.\n     *\n     * @param Request $request\n     * @param Carbon  $start\n     * @param Carbon  $end\n     *\n     * @return Factory|View\n     */\n    public function createAlternative(Request $request, Carbon $start, Carbon $end)\n    {\n        $currencies       = $this->currencyRepos->get();\n        $availableBudgets = $this->abRepository->get($start, $end);\n\n        // remove already budgeted currencies:\n        $currencies = $currencies->filter(\n            static function (TransactionCurrency $currency) use ($availableBudgets) {\n                /** @var AvailableBudget $budget */\n                foreach ($availableBudgets as $budget) {\n                    if ($budget->transaction_currency_id === $currency->id) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n        $page       = (int)($request->get('page') ?? 1);\n\n        return prefixView('budgets.available-budgets.create-alternative', compact('start', 'end', 'page', 'currencies'));\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function delete(AvailableBudget $availableBudget)\n    {\n        $this->abRepository->destroyAvailableBudget($availableBudget);\n        session()->flash('success', trans('firefly.deleted_ab'));\n\n        return redirect(route('budgets.index'));\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     *\n     * @param Carbon          $start\n     * @param Carbon          $end\n     *\n     * @return Factory|View\n     */\n    public function edit(AvailableBudget $availableBudget, Carbon $start, Carbon $end)\n    {\n        $availableBudget->amount = number_format((float)$availableBudget->amount, $availableBudget->transactionCurrency->decimal_places, '.', '');\n\n        return prefixView('budgets.available-budgets.edit', compact('availableBudget', 'start', 'end'));\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function store(Request $request)\n    {\n        // make dates.\n        try {\n            $start = Carbon::createFromFormat('Y-m-d', $request->get('start'));\n            $end   = Carbon::createFromFormat('Y-m-d', $request->get('end'));\n        } catch (InvalidDateException $e) {\n            $start = session()->get('start');\n            $end   = session()->get('end');\n            Log::info($e->getMessage());\n        }\n\n        // validate amount\n        $amount = (string)$request->get('amount');\n        if ('' === $amount) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        if (bccomp($amount, '0') <= 0) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n\n        // find currency\n        $currency = $this->currencyRepos->find((int)$request->get('currency_id'));\n        if (null === $currency) {\n            session()->flash('error', trans('firefly.invalid_currency'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        $start->startOfDay();\n        $end->endOfDay();\n        // find existing AB\n        $existing = $this->abRepository->find($currency, $start, $end);\n        if (null === $existing) {\n            $this->abRepository->store(\n                [\n                    'amount'      => $amount,\n                    'currency_id' => $currency->id,\n                    'start'       => $start,\n                    'end'         => $end,\n                ]\n            );\n        }\n        if (null !== $existing) {\n            // update amount:\n            $this->abRepository->update($existing, ['amount' => $amount]);\n        }\n        session()->flash('success', trans('firefly.set_ab'));\n\n        return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n    }\n\n    /**\n     * @param Request         $request\n     * @param AvailableBudget $availableBudget\n     *\n     * @param Carbon          $start\n     * @param Carbon          $end\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function update(Request $request, AvailableBudget $availableBudget, Carbon $start, Carbon $end)\n    {\n        // validate amount\n        $amount = (string)$request->get('amount');\n        if ('' === $amount) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        if (bccomp($amount, '0') <= 0) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        $this->abRepository->update($availableBudget, ['amount' => $amount]);\n        session()->flash('success', trans('firefly.updated_ab'));\n\n        return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n    }\n}\n", "<?php\n/**\n * AvailableBudgetRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\n\nuse Carbon\\Carbon;\nuse Exception;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n *\n * Class AvailableBudgetRepository\n */\nclass AvailableBudgetRepository implements AvailableBudgetRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * Delete all available budgets.\n     */\n    public function destroyAll(): void\n    {\n        $this->user->availableBudgets()->delete();\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     */\n    public function destroyAvailableBudget(AvailableBudget $availableBudget): void\n    {\n        try {\n            $availableBudget->delete();\n        } catch (Exception $e) { // @phpstan-ignore-line\n            // @ignoreException\n        }\n    }\n\n    /**\n     * Find existing AB.\n     *\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return AvailableBudget|null\n     */\n    public function find(TransactionCurrency $currency, Carbon $start, Carbon $end): ?AvailableBudget\n    {\n        return $this->user->availableBudgets()\n                          ->where('transaction_currency_id', $currency->id)\n                          ->where('start_date', $start->format('Y-m-d'))\n                          ->where('end_date', $end->format('Y-m-d'))\n                          ->first();\n\n    }\n\n    /**\n     * Return a list of all available budgets (in all currencies) (for the selected period).\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function get(?Carbon $start = null, ?Carbon $end = null): Collection\n    {\n        $query = $this->user->availableBudgets()->with(['transactionCurrency']);\n        if (null !== $start && null !== $end) {\n            $query->where(\n                static function (Builder $q1) use ($start, $end) {\n                    $q1->where('start_date', '=', $start->format('Y-m-d'));\n                    $q1->where('end_date', '=', $end->format('Y-m-d'));\n                }\n            );\n        }\n\n        return $query->get(['available_budgets.*']);\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return string\n     */\n    public function getAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end): string\n    {\n        $amount          = '0';\n        $availableBudget = $this->user->availableBudgets()\n                                      ->where('transaction_currency_id', $currency->id)\n                                      ->where('start_date', $start->format('Y-m-d'))\n                                      ->where('end_date', $end->format('Y-m-d'))->first();\n        if (null !== $availableBudget) {\n            $amount = (string)$availableBudget->amount;\n        }\n\n        return $amount;\n    }\n\n    /**\n     * @param Carbon $start\n     * @param Carbon $end\n     *\n     * @return array\n     */\n    public function getAvailableBudgetWithCurrency(Carbon $start, Carbon $end): array\n    {\n        $return           = [];\n        $availableBudgets = $this->user->availableBudgets()\n                                       ->where('start_date', $start->format('Y-m-d'))\n                                       ->where('end_date', $end->format('Y-m-d'))->get();\n        /** @var AvailableBudget $availableBudget */\n        foreach ($availableBudgets as $availableBudget) {\n            $return[$availableBudget->transaction_currency_id] = $availableBudget->amount;\n        }\n\n        return $return;\n    }\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param TransactionCurrency $currency\n     *\n     * @return Collection\n     */\n    public function getAvailableBudgetsByCurrency(TransactionCurrency $currency): Collection\n    {\n        return $this->user->availableBudgets()->where('transaction_currency_id', $currency->id)->get();\n    }\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     *\n     */\n    public function getAvailableBudgetsByDate(?Carbon $start, ?Carbon $end): Collection\n    {\n        $query = $this->user->availableBudgets();\n\n        if (null !== $start) {\n            $query->where('start_date', '>=', $start->format('Y-m-d'));\n        }\n        if (null !== $end) {\n            $query->where('end_date', '<=', $end->format('Y-m-d'));\n        }\n\n        return $query->get();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getByCurrencyDate(Carbon $start, Carbon $end, TransactionCurrency $currency): ?AvailableBudget\n    {\n        return $this->user\n            ->availableBudgets()\n            ->where('transaction_currency_id', $currency->id)\n            ->where('start_date', $start->format('Y-m-d'))\n            ->where('end_date', $end->format('Y-m-d'))->first();\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param string              $amount\n     *\n     * @return AvailableBudget\n     * @deprecated\n     */\n    public function setAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end, string $amount): AvailableBudget\n    {\n        $availableBudget = $this->user->availableBudgets()\n                                      ->where('transaction_currency_id', $currency->id)\n                                      ->where('start_date', $start->format('Y-m-d'))\n                                      ->where('end_date', $end->format('Y-m-d'))->first();\n        if (null === $availableBudget) {\n            $availableBudget = new AvailableBudget;\n            $availableBudget->user()->associate($this->user);\n            $availableBudget->transactionCurrency()->associate($currency);\n            $availableBudget->start_date = $start->format('Y-m-d');\n            $availableBudget->end_date   = $end->format('Y-m-d');\n        }\n        $availableBudget->amount = $amount;\n        $availableBudget->save();\n\n        return $availableBudget;\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return AvailableBudget|null\n     */\n    public function store(array $data): ?AvailableBudget\n    {\n        $start = $data['start'];\n        if ($start instanceof Carbon) {\n            $start = $data['start']->startOfDay();\n        }\n        $end = $data['end'];\n        if ($end instanceof Carbon) {\n            $end = $data['end']->endOfDay();\n        }\n\n        return AvailableBudget::create(\n            [\n                'user_id'                 => $this->user->id,\n                'transaction_currency_id' => $data['currency_id'],\n                'amount'                  => $data['amount'],\n                'start_date'              => $start,\n                'end_date'                => $end,\n\n            ]\n        );\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function update(AvailableBudget $availableBudget, array $data): AvailableBudget\n    {\n        if (array_key_exists('amount', $data)) {\n            $availableBudget->amount = $data['amount'];\n        }\n        $availableBudget->save();\n\n        return $availableBudget;\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function updateAvailableBudget(AvailableBudget $availableBudget, array $data): AvailableBudget\n    {\n        if (array_key_exists('start', $data)) {\n            $start = $data['start'];\n            if ($start instanceof Carbon) {\n                $start                       = $data['start']->startOfDay();\n                $availableBudget->start_date = $start;\n                $availableBudget->save();\n            }\n        }\n\n        if (array_key_exists('end', $data)) {\n            $end = $data['end'];\n            if ($end instanceof Carbon) {\n                $end                       = $data['end']->endOfDay();\n                $availableBudget->end_date = $end;\n                $availableBudget->save();\n            }\n        }\n        if (array_key_exists('currency_id', $data)) {\n            $availableBudget->transaction_currency_id = $data['currency_id'];\n            $availableBudget->save();\n        }\n        if (array_key_exists('amount', $data)) {\n            $availableBudget->amount = $data['amount'];\n            $availableBudget->save();\n        }\n\n        return $availableBudget;\n\n    }\n}\n", "<?php\n/**\n * AvailableBudgetRepositoryInterface.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\n\nuse Carbon\\Carbon;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Interface AvailableBudgetRepositoryInterface\n */\ninterface AvailableBudgetRepositoryInterface\n{\n\n    /**\n     * Delete all available budgets.\n     */\n    public function destroyAll(): void;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     */\n    public function destroyAvailableBudget(AvailableBudget $availableBudget): void;\n\n    /**\n     * Find existing AB.\n     *\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return AvailableBudget|null\n     */\n    public function find(TransactionCurrency $currency, Carbon $start, Carbon $end): ?AvailableBudget;\n\n    /**\n     * Return a list of all available budgets (in all currencies) (for the selected period).\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function get(?Carbon $start = null, ?Carbon $end = null): Collection;\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return string\n     * @deprecated\n     */\n    public function getAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end): string;\n\n    /**\n     * @param Carbon $start\n     * @param Carbon $end\n     *\n     * @return array\n     */\n    public function getAvailableBudgetWithCurrency(Carbon $start, Carbon $end): array;\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param TransactionCurrency $currency\n     *\n     * @return Collection\n     */\n    public function getAvailableBudgetsByCurrency(TransactionCurrency $currency): Collection;\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     *\n     */\n    public function getAvailableBudgetsByDate(?Carbon $start, ?Carbon $end): Collection;\n\n    /**\n     * Get by transaction currency and date. Should always result in one entry or NULL.\n     *\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param TransactionCurrency $currency\n     *\n     * @return null|AvailableBudget\n     */\n    public function getByCurrencyDate(Carbon $start, Carbon $end, TransactionCurrency $currency): ?AvailableBudget;\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param string              $amount\n     *\n     * @return AvailableBudget\n     * @deprecated\n     */\n    public function setAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end, string $amount): AvailableBudget;\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void;\n\n    /**\n     * @param array $data\n     *\n     * @return AvailableBudget|null\n     */\n    public function store(array $data): ?AvailableBudget;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function update(AvailableBudget $availableBudget, array $data): AvailableBudget;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function updateAvailableBudget(AvailableBudget $availableBudget, array $data): AvailableBudget;\n\n}\n", "<?php\n/**\n * BudgetLimitRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\nuse Carbon\\Carbon;\nuse Exception;\nuse FireflyIII\\Exceptions\\FireflyException;\nuse FireflyIII\\Factory\\TransactionCurrencyFactory;\nuse FireflyIII\\Models\\Budget;\nuse FireflyIII\\Models\\BudgetLimit;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n *\n * Class BudgetLimitRepository\n */\nclass BudgetLimitRepository implements BudgetLimitRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * Tells you which amount has been budgeted (for the given budgets)\n     * in the selected query. Returns a positive amount as a string.\n     *\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param TransactionCurrency $currency\n     * @param Collection|null     $budgets\n     *\n     * @return string\n     */\n    public function budgeted(Carbon $start, Carbon $end, TransactionCurrency $currency, ?Collection $budgets = null): string\n    {\n        $query = BudgetLimit\n            ::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n\n            // same complex where query as below.\n            ->where(\n                static function (Builder $q5) use ($start, $end) {\n                    $q5->where(\n                        static function (Builder $q1) use ($start, $end) {\n                            $q1->where(\n                                static function (Builder $q2) use ($start, $end) {\n                                    $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d'));\n                                    $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d'));\n                                }\n                            )\n                               ->orWhere(\n                                   static function (Builder $q3) use ($start, $end) {\n                                       $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d'));\n                                       $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d'));\n                                   }\n                               );\n                        }\n                    )\n                       ->orWhere(\n                           static function (Builder $q4) use ($start, $end) {\n                               // or start is before start AND end is after end.\n                               $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d'));\n                               $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d'));\n                           }\n                       );\n                }\n            )\n            ->where('budget_limits.transaction_currency_id', $currency->id)\n            ->whereNull('budgets.deleted_at')\n            ->where('budgets.active', true)\n            ->where('budgets.user_id', $this->user->id);\n        if (null !== $budgets && $budgets->count() > 0) {\n            $query->whereIn('budget_limits.budget_id', $budgets->pluck('id')->toArray());\n        }\n\n        $set    = $query->get(['budget_limits.*']);\n        $result = '0';\n        /** @var BudgetLimit $budgetLimit */\n        foreach ($set as $budgetLimit) {\n            $result = bcadd($budgetLimit->amount, $result);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Destroy all budget limits.\n     */\n    public function destroyAll(): void\n    {\n        $budgets = $this->user->budgets()->get();\n        /** @var Budget $budget */\n        foreach ($budgets as $budget) {\n            $budget->budgetlimits()->delete();\n        }\n    }\n\n    /**\n     * Destroy a budget limit.\n     *\n     * @param BudgetLimit $budgetLimit\n     */\n    public function destroyBudgetLimit(BudgetLimit $budgetLimit): void\n    {\n        try {\n            $budgetLimit->delete();\n        } catch (Exception $e) { // @phpstan-ignore-line\n            // @ignoreException\n        }\n    }\n\n    /**\n     * @param Budget              $budget\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return BudgetLimit|null\n     */\n    public function find(Budget $budget, TransactionCurrency $currency, Carbon $start, Carbon $end): ?BudgetLimit\n    {\n        return $budget->budgetlimits()\n                      ->where('transaction_currency_id', $currency->id)\n                      ->where('start_date', $start->format('Y-m-d'))\n                      ->where('end_date', $end->format('Y-m-d'))->first();\n    }\n\n    /**\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function getAllBudgetLimits(Carbon $start = null, Carbon $end = null): Collection\n    {\n        // both are NULL:\n        if (null === $start && null === $end) {\n            return BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                              ->with(['budget'])\n                              ->where('budgets.user_id', $this->user->id)\n                              ->whereNull('budgets.deleted_at')\n                              ->get(['budget_limits.*']);\n        }\n        // one of the two is NULL.\n        if (null === $start xor null === $end) {\n            $query = BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                                ->with(['budget'])\n                                ->whereNull('budgets.deleted_at')\n                                ->where('budgets.user_id', $this->user->id);\n            if (null !== $end) {\n                // end date must be before $end.\n                $query->where('end_date', '<=', $end->format('Y-m-d 00:00:00'));\n            }\n            if (null !== $start) {\n                // start date must be after $start.\n                $query->where('start_date', '>=', $start->format('Y-m-d 00:00:00'));\n            }\n\n            return $query->get(['budget_limits.*']);\n        }\n\n        // neither are NULL:\n        return BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                          ->with(['budget'])\n                          ->where('budgets.user_id', $this->user->id)\n                          ->whereNull('budgets.deleted_at')\n                          ->where(\n                              static function (Builder $q5) use ($start, $end) {\n                                  $q5->where(\n                                      static function (Builder $q1) use ($start, $end) {\n                                          $q1->where(\n                                              static function (Builder $q2) use ($start, $end) {\n                                                  $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d'));\n                                                  $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d'));\n                                              }\n                                          )\n                                             ->orWhere(\n                                                 static function (Builder $q3) use ($start, $end) {\n                                                     $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d'));\n                                                     $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d'));\n                                                 }\n                                             );\n                                      }\n                                  )\n                                     ->orWhere(\n                                         static function (Builder $q4) use ($start, $end) {\n                                             // or start is before start AND end is after end.\n                                             $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d'));\n                                             $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d'));\n                                         }\n                                     );\n                              }\n                          )->get(['budget_limits.*']);\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon|null         $start\n     * @param Carbon|null         $end\n     *\n     * @return Collection\n     */\n    public function getAllBudgetLimitsByCurrency(TransactionCurrency $currency, Carbon $start = null, Carbon $end = null): Collection\n    {\n        return $this->getAllBudgetLimits($start, $end)->filter(\n            static function (BudgetLimit $budgetLimit) use ($currency) {\n                return $budgetLimit->transaction_currency_id === $currency->id;\n            }\n        );\n    }\n\n    /**\n     * @param Budget      $budget\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function getBudgetLimits(Budget $budget, Carbon $start = null, Carbon $end = null): Collection\n    {\n        if (null === $end && null === $start) {\n            return $budget->budgetlimits()->with(['transactionCurrency'])->orderBy('budget_limits.start_date', 'DESC')->get(['budget_limits.*']);\n        }\n        if (null === $end xor null === $start) {\n            $query = $budget->budgetlimits()->with(['transactionCurrency'])->orderBy('budget_limits.start_date', 'DESC');\n            // one of the two is null\n            if (null !== $end) {\n                // end date must be before $end.\n                $query->where('end_date', '<=', $end->format('Y-m-d 00:00:00'));\n            }\n            if (null !== $start) {\n                // start date must be after $start.\n                $query->where('start_date', '>=', $start->format('Y-m-d 00:00:00'));\n            }\n\n            return $query->get(['budget_limits.*']);\n        }\n\n        // when both dates are set:\n        return $budget->budgetlimits()\n                      ->where(\n                          static function (Builder $q5) use ($start, $end) {\n                              $q5->where(\n                                  static function (Builder $q1) use ($start, $end) {\n                                      // budget limit ends within period\n                                      $q1->where(\n                                          static function (Builder $q2) use ($start, $end) {\n                                              $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d 00:00:00'));\n                                              $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d 23:59:59'));\n                                          }\n                                      )\n                                          // budget limit start within period\n                                         ->orWhere(\n                                              static function (Builder $q3) use ($start, $end) {\n                                                  $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d 00:00:00'));\n                                                  $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d 23:59:59'));\n                                              }\n                                          );\n                                  }\n                              )\n                                 ->orWhere(\n                                     static function (Builder $q4) use ($start, $end) {\n                                         // or start is before start AND end is after end.\n                                         $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d 23:59:59'));\n                                         $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d 00:00:00'));\n                                     }\n                                 );\n                          }\n                      )->orderBy('budget_limits.start_date', 'DESC')->get(['budget_limits.*']);\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return BudgetLimit\n     * @throws FireflyException\n     */\n    public function store(array $data): BudgetLimit\n    {\n        // if no currency has been provided, use the user's default currency:\n        /** @var TransactionCurrencyFactory $factory */\n        $factory  = app(TransactionCurrencyFactory::class);\n        $currency = $factory->find($data['currency_id'] ?? null, $data['currency_code'] ?? null);\n        if (null === $currency) {\n            $currency = app('amount')->getDefaultCurrencyByUser($this->user);\n        }\n        $currency->enabled = true;\n        $currency->save();\n\n        // find the budget:\n        $budget = $this->user->budgets()->find((int)$data['budget_id']);\n        if (null === $budget) {\n            throw new FireflyException('200004: Budget does not exist.'); \n        }\n\n        // find limit with same date range and currency.\n        $limit = $budget->budgetlimits()\n                        ->where('budget_limits.start_date', $data['start_date']->format('Y-m-d'))\n                        ->where('budget_limits.end_date', $data['end_date']->format('Y-m-d'))\n                        ->where('budget_limits.transaction_currency_id', $currency->id)\n                        ->first(['budget_limits.*']);\n        if (null !== $limit) {\n            throw new FireflyException('200027: Budget limit already exists.'); \n        }\n        Log::debug('No existing budget limit, create a new one');\n\n        // or create one and return it.\n        $limit = new BudgetLimit;\n        $limit->budget()->associate($budget);\n        $limit->start_date              = $data['start_date']->format('Y-m-d');\n        $limit->end_date                = $data['end_date']->format('Y-m-d');\n        $limit->amount                  = $data['amount'];\n        $limit->transaction_currency_id = $currency->id;\n        $limit->save();\n        Log::debug(sprintf('Created new budget limit with ID #%d and amount %s', $limit->id, $data['amount']));\n\n        return $limit;\n    }\n\n    /**\n     * @param BudgetLimit $budgetLimit\n     * @param array       $data\n     *\n     * @return BudgetLimit\n     */\n    public function update(BudgetLimit $budgetLimit, array $data): BudgetLimit\n    {\n        $budgetLimit->amount     = array_key_exists('amount', $data) ? $data['amount'] : $budgetLimit->amount;\n        $budgetLimit->budget_id  = array_key_exists('budget_id', $data) ? $data['budget_id'] : $budgetLimit->budget_id;\n        $budgetLimit->start_date = array_key_exists('start', $data) ? $data['start']->format('Y-m-d 00:00:00') : $budgetLimit->start_date;\n        $budgetLimit->end_date   = array_key_exists('end', $data) ? $data['end']->format('Y-m-d 23:59:59') : $budgetLimit->end_date;\n\n        // if no currency has been provided, use the user's default currency:\n        $currency = null;\n\n        // update if relevant:\n        if (array_key_exists('currency_id', $data) || array_key_exists('currency_code', $data)) {\n            /** @var TransactionCurrencyFactory $factory */\n            $factory  = app(TransactionCurrencyFactory::class);\n            $currency = $factory->find($data['currency_id'] ?? null, $data['currency_code'] ?? null);\n        }\n        // catch unexpected null:\n        if (null === $currency) {\n            $currency = $budgetLimit->transactionCurrency ?? app('amount')->getDefaultCurrencyByUser($this->user);\n        }\n        $currency->enabled = true;\n        $currency->save();\n\n        $budgetLimit->transaction_currency_id = $currency->id;\n        $budgetLimit->save();\n\n        return $budgetLimit;\n    }\n\n    /**\n     * @param Budget $budget\n     * @param Carbon $start\n     * @param Carbon $end\n     * @param string $amount\n     *\n     * @return BudgetLimit|null\n     *\n     */\n    public function updateLimitAmount(Budget $budget, Carbon $start, Carbon $end, string $amount): ?BudgetLimit\n    {\n        // count the limits:\n        $limits = $budget->budgetlimits()\n                         ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                         ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                         ->count(['budget_limits.*']);\n        Log::debug(sprintf('Found %d budget limits.', $limits));\n\n        // there might be a budget limit for these dates:\n        /** @var BudgetLimit $limit */\n        $limit = $budget->budgetlimits()\n                        ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                        ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                        ->first(['budget_limits.*']);\n\n        // if more than 1 limit found, delete the others:\n        if ($limits > 1 && null !== $limit) {\n            Log::debug(sprintf('Found more than 1, delete all except #%d', $limit->id));\n            $budget->budgetlimits()\n                   ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                   ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                   ->where('budget_limits.id', '!=', $limit->id)->delete();\n        }\n\n        // delete if amount is zero.\n        // Returns 0 if the two operands are equal,\n        // 1 if the left_operand is larger than the right_operand, -1 otherwise.\n        if (null !== $limit && bccomp($amount, '0') <= 0) {\n            Log::debug(sprintf('%s is zero, delete budget limit #%d', $amount, $limit->id));\n            try {\n                $limit->delete();\n            } catch (Exception $e) { // @phpstan-ignore-line\n                // @ignoreException\n            }\n            return null;\n        }\n        // update if exists:\n        if (null !== $limit) {\n            Log::debug(sprintf('Existing budget limit is #%d, update this to amount %s', $limit->id, $amount));\n            $limit->amount = $amount;\n            $limit->save();\n\n            return $limit;\n        }\n        Log::debug('No existing budget limit, create a new one');\n        // or create one and return it.\n        $limit = new BudgetLimit;\n        $limit->budget()->associate($budget);\n        $limit->start_date = $start->startOfDay();\n        $limit->end_date   = $end->startOfDay();\n        $limit->amount     = $amount;\n        $limit->save();\n        Log::debug(sprintf('Created new budget limit with ID #%d and amount %s', $limit->id, $amount));\n\n        return $limit;\n    }\n}\n", "/*\n * index.js\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\n */\n$(function () {\n    \"use strict\";\n    /*\n     On start, fill the \"spent\"-bar using the content from the page.\n     */\n    drawSpentBars();\n    drawBudgetedBars();\n\n    $('.update_ab').on('click', updateAvailableBudget);\n    $('.create_ab_alt').on('click', createAltAvailableBudget);\n\n    $('.budget_amount').on('change', updateBudgetedAmount);\n    $('.create_bl').on('click', createBudgetLimit);\n    $('.delete_bl').on('click', deleteBudgetLimit);\n\n\n    /*\n     When the input changes, update the percentages for the budgeted bar:\n     */\n    $('.selectPeriod').change(function (e) {\n        var selected = $(e.currentTarget);\n        if (selected.find(\":selected\").val() !== \"x\") {\n            var newUri = budgetIndexUri.replace(\"START\", selected.find(\":selected\").data('start')).replace('END', selected.find(\":selected\").data('end'));\n            window.location.assign(newUri);\n        }\n    });\n\n    // sortable!\n    if (typeof $(\".sortable-table tbody\").sortable !== \"undefined\") {\n        $(\".sortable-table tbody\").sortable(\n            {\n                helper: fixHelper,\n                items: 'tr:not(.ignore)',\n                stop: sortStop,\n                handle: '.handle',\n                start: function (event, ui) {\n                    // Build a placeholder cell that spans all the cells in the row\n                    var cellCount = 0;\n                    $('td, th', ui.helper).each(function () {\n                        // For each TD or TH try and get it's colspan attribute, and add that or 1 to the total\n                        var colspan = 1;\n                        var colspanAttr = $(this).attr('colspan');\n                        if (colspanAttr > 1) {\n                            colspan = colspanAttr;\n                        }\n                        cellCount += colspan;\n                    });\n\n                    // Add the placeholder UI - note that this is the item's content, so TD rather than TR\n                    ui.placeholder.html('<td colspan=\"' + cellCount + '\">&nbsp;</td>');\n                }\n            }\n        );\n    }\n});\n\nfunction updateBudgetedAmount(e) {\n    var input = $(e.currentTarget);\n    var budgetId = parseInt(input.data('id'));\n    var budgetLimitId = parseInt(input.data('limit'));\n    var currencyId = parseInt(input.data('currency'));\n    input.prop('disabled', true);\n    if (0 === budgetLimitId) {\n        $.post(storeBudgetLimitUri, {\n            _token: token,\n            budget_id: budgetId,\n            transaction_currency_id: currencyId,\n            amount: input.val(),\n            start: periodStart,\n            end: periodEnd\n        }).done(function (data) {\n\n            input.prop('disabled', false);\n\n            // update amount left.\n            $('.left_span[data-limit=\"0\"][data-id=\"' + budgetId + '\"]').html(data.left_formatted);\n            if (data.left_per_day > 0) {\n                $('.left_span[data-limit=\"0\"][data-id=\"' + budgetId + '\"]').html(data.left_formatted + '(' + data.left_per_day_formatted + ')');\n            }\n            // update budgeted amount\n            updateTotalBudgetedAmount(data.transaction_currency_id);\n\n        }).fail(function () {\n            console.error('I failed :(');\n        });\n    } else {\n        $.post(updateBudgetLimitUri.replace('REPLACEME', budgetLimitId.toString()), {\n            _token: token,\n            amount: input.val(),\n        }).done(function (data) {\n            input.prop('disabled', false);\n            $('.left_span[data-limit=\"' + budgetLimitId + '\"]').html(data.left_formatted);\n            if (data.left_per_day > 0) {\n                $('.left_span[data-limit=\"' + budgetLimitId + '\"]').html(data.left_formatted + '(' + data.left_per_day_formatted + ')');\n            }\n            updateTotalBudgetedAmount(data.transaction_currency_id);\n            // update budgeted amount\n\n        }).fail(function () {\n            console.error('I failed :(');\n        });\n    }\n}\n\nfunction updateTotalBudgetedAmount(currencyId) {\n    // fade info away:\n    $('span.budgeted_amount[data-currency=\"' + currencyId + '\"]')\n        .fadeTo(100, 0.1, function () {\n            //$(this).fadeTo(500, 1.0);\n        });\n\n    // get new amount:\n    $.get(totalBudgetedUri.replace('REPLACEME', currencyId)).done(function (data) {\n        // set thing:\n        $('span.budgeted_amount[data-currency=\"' + currencyId + '\"]')\n            .html(data.budgeted_formatted)\n            // fade back:\n            .fadeTo(300, 1.0);\n\n        // set bar:\n        var pct = parseFloat(data.percentage);\n        if (pct <= 100) {\n            console.log('<100 (' + pct + ')');\n            console.log($('div.budgeted_bar[data-currency=\"' + currencyId + '\"]'));\n            // red bar to 0\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-danger').width('0%');\n            // orange to 0:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-warning').width('0%');\n            // blue to the rest:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-info').width(pct + '%');\n        } else {\n            var newPct = (100 / pct) * 100;\n            // red bar to new pct\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-danger').width(newPct + '%');\n            // orange to the rest:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-warning').width((100 - newPct) + '%');\n            // blue to 0:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-info').width('0%');\n        }\n\n\n    });\n}\n\nvar fixHelper = function (e, tr) {\n    \"use strict\";\n    var $originals = tr.children();\n    var $helper = tr.clone();\n    $helper.children().each(function (index) {\n        // Set helper cell sizes to match the original sizes\n        $(this).width($originals.eq(index).width());\n    });\n    return $helper;\n};\n\n\nfunction sortStop(event, ui) {\n    \"use strict\";\n\n    //var current = $(ui.item);\n    var list = $('.sortable-table tbody tr');\n    var submit = [];\n    $.each(list, function (i, v) {\n        var row = $(v);\n        var id = parseInt(row.data('id'));\n        if (id > 0) {\n            submit.push(id);\n        }\n    });\n    var arr = {\n        budgetIds: submit,\n        _token: token\n    };\n    $.post('budgets/reorder', arr);\n}\n\nfunction createBudgetLimit(e) {\n    var button = $(e.currentTarget);\n    var budgetId = button.data('id');\n    $('#defaultModal').empty().load(createBudgetLimitUri.replace('REPLACEME', budgetId.toString()), function () {\n        $('#defaultModal').modal('show');\n    });\n    return false;\n}\n\nfunction deleteBudgetLimit(e) {\n    e.preventDefault();\n    var button = $(e.currentTarget);\n    var budgetLimitId = button.data('budget-limit-id');\n    var url = deleteBudgetLimitUrl.replace('REPLACEME', budgetLimitId.toString());\n    $.post(url, {_token: token}).then(function () {\n        $('.bl_entry[data-budget-limit-id=\"' + budgetLimitId + '\"]').remove();\n        \n    });\n    return false;\n}\n\nfunction createAltAvailableBudget(e) {\n    $('#defaultModal').empty().load(createAltAvailableBudgetUri, function () {\n        $('#defaultModal').modal('show');\n    });\n    return false;\n}\n\nfunction updateAvailableBudget(e) {\n    var button = $(e.currentTarget);\n    var abId = parseInt(button.data('id'));\n    if (0 === abId) {\n        $('#defaultModal').empty().load(createAvailableBudgetUri, function () {\n            $('#defaultModal').modal('show');\n        });\n    }\n    if (abId > 0) {\n        // edit URL.\n        $('#defaultModal').empty().load(editAvailableBudgetUri.replace('REPLACEME', abId), function () {\n            $('#defaultModal').modal('show');\n        });\n    }\n    return false;\n}\n\n\nfunction drawBudgetedBars() {\n    \"use strict\";\n    $.each($('.budgeted_bar'), function (i, v) {\n        var bar = $(v);\n        var budgeted = parseFloat(bar.data('budgeted'));\n        var available = parseFloat(bar.data('available'));\n        var budgetedTooMuch = budgeted > available;\n        var pct;\n        if (budgetedTooMuch) {\n            // budgeted too much.\n            pct = (available / budgeted) * 100;\n            bar.find('.progress-bar-danger').css('width', pct + '%');\n            bar.find('.progress-bar-warning').css('width', (100 - pct) + '%');\n            bar.find('.progress-bar-info').css('width', 0);\n        } else {\n            pct = (budgeted / available) * 100;\n            bar.find('.progress-bar-danger').css('width', 0);\n            bar.find('.progress-bar-warning').css('width', 0);\n            bar.find('.progress-bar-info').css('width', pct + '%');\n        }\n        //$('#budgetedAmount').html(currencySymbol + ' ' + budgeted.toFixed(2));\n    });\n}\n\nfunction drawSpentBars() {\n    \"use strict\";\n    $.each($('.spent_bar'), function (i, v) {\n        var bar = $(v);\n        var spent = parseFloat(bar.data('spent')) * -1;\n        var budgeted = parseFloat(bar.data('budgeted'));\n        var overspent = spent > budgeted;\n        var pct;\n\n        if (overspent) {\n            // draw overspent bar\n            pct = (budgeted / spent) * 100;\n            bar.find('.progress-bar-warning').css('width', pct + '%');\n            bar.find('.progress-bar-danger').css('width', (100 - pct) + '%');\n        } else {\n            // draw normal bar:\n            pct = (spent / budgeted) * 100;\n            bar.find('.progress-bar-info').css('width', pct + '%');\n        }\n    });\n}\n\n//\n//\n// function drawSpentBar() {\n//     \"use strict\";\n//     if ($('.spentBar').length > 0) {\n//         var overspent = spent > budgeted;\n//         var pct;\n//\n//         if (overspent) {\n//             // draw overspent bar\n//             pct = (budgeted / spent) * 100;\n//             $('.spentBar .progress-bar-warning').css('width', pct + '%');\n//             $('.spentBar .progress-bar-danger').css('width', (100 - pct) + '%');\n//         } else {\n//             // draw normal bar:\n//             pct = (spent / budgeted) * 100;\n//             $('.spentBar .progress-bar-info').css('width', pct + '%');\n//         }\n//     }\n// }\n//\n// function drawBudgetedBar() {\n//     \"use strict\";\n//\n//     if ($('.budgetedBar').length > 0) {\n//         var budgetedMuch = budgeted > available;\n//\n//         // recalculate percentage:\n//\n//         var pct;\n//         if (budgetedMuch) {\n//             // budgeted too much.\n//             pct = (available / budgeted) * 100;\n//             $('.budgetedBar .progress-bar-warning').css('width', pct + '%');\n//             $('.budgetedBar .progress-bar-danger').css('width', (100 - pct) + '%');\n//             $('.budgetedBar .progress-bar-info').css('width', 0);\n//         } else {\n//             pct = (budgeted / available) * 100;\n//             $('.budgetedBar .progress-bar-warning').css('width', 0);\n//             $('.budgetedBar .progress-bar-danger').css('width', 0);\n//             $('.budgetedBar .progress-bar-info').css('width', pct + '%');\n//         }\n//\n//         $('#budgetedAmount').html(currencySymbol + ' ' + budgeted.toFixed(2));\n//     }\n// }\n\n// /**\n//  *\n//  * @param e\n//  */\n// function updateBudgetedAmounts(e) {\n//     \"use strict\";\n//     var target = $(e.target);\n//     var id = target.data('id');\n//     var leftCell = $('td[class$=\"left\"][data-id=\"' + id + '\"]');\n//     var link = $('a[data-id=\"' + id + '\"][class=\"budget-link\"]');\n//     var value = target.val();\n//     var original = target.data('original');\n//\n//     // disable input\n//     target.prop('disabled', true);\n//\n//     // replace link (for now)\n//     link.attr('href', '#');\n//\n//     // replace \"left\" with spinner.\n//     leftCell.empty().html('<i class=\"fa fa-fw fa-spin fa-spinner\"></i>');\n//\n//     // send a post to Firefly to update the amount:\n//     var newUri = budgetAmountUri.replace(\"REPLACE\", id);\n//\n//     $.post(newUri, {amount: value, start: periodStart, end: periodEnd, _token: token}).done(function (data) {\n//\n//         // difference between new value and original value\n//         var difference = value - original;\n//\n//         // update budgeted value\n//         budgeted = budgeted + difference;\n//\n//         // fill in \"left\" value:\n//\n//\n//         if (data.left_per_day !== null) {\n//             leftCell.html(data.left + ' (' + data.left_per_day + ')');\n//         } else {\n//             leftCell.html(data.left);\n//         }\n//\n//         // update \"budgeted\" input:\n//         target.val(data.amount);\n//\n//         // enable thing again\n//         target.prop('disabled', false);\n//\n//         // set new original value:\n//         target.data('original', data.amount);\n//\n//         // run drawBudgetedBar() again:\n//         drawBudgetedBar();\n//\n//         // update the link if relevant:\n//         link.attr('href', 'budgets/show/' + id);\n//         if (data.limit > 0) {\n//             link.attr('href', 'budgets/show/' + id + '/' + data.limit);\n//         }\n//\n//         // update the warning if relevant:\n//         if (data.large_diff === true) {\n//             $('span[class$=\"budget_warning\"][data-id=\"' + id + '\"]').html(data.warn_text).show();\n//             console.log('Show warning for budget');\n//         } else {\n//             $('span[class$=\"budget_warning\"][data-id=\"' + id + '\"]').empty().hide();\n//         }\n//     });\n// }\n\n// /**\n//  *\n//  * @returns {boolean}\n//  */\n// function updateIncome() {\n//     \"use strict\";\n//     $('#defaultModal').empty().load(updateIncomeUri, function () {\n//         $('#defaultModal').modal('show');\n//     });\n//\n//     return false;\n// }\n", "{% extends './v1/layout/default' %}\n\n{% block breadcrumbs %}\n    {{ Breadcrumbs.render(Route.getCurrentRoute.getName) }}\n{% endblock %}\n\n{% block content %}\n    <!-- date selector -->\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h3 class=\"box-title\">{{ 'budget_period_navigator'|_ }}</h3>\n                </div>\n                <div class=\"box-body\">\n                    <div class=\"row\" id=\"periodNavigator\">\n                        <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                            <select class=\"form-control selectPeriod\" name=\"previous\">\n                                <option label=\"{{ 'select_date'|_ }}\" value=\"x\">{{ 'select_date'|_ }}</option>\n                                {% for array in prevLoop %}\n                                    <option label=\"{{ array.title }}\" value=\"{{ array.label }}\" data-start=\"{{ array.start.format('Y-m-d') }}\"\n                                            data-end=\"{{ array.end.format('Y-m-d') }}\">{{ array.title }}</option>\n                                {% endfor %}\n                            </select>\n                        </div>\n                        <div class=\"col-lg-8 col-md-4 col-sm-12 col-xs-12 text-center\">\n                            <div class=\"btn btn-group btn-group-lg\" style=\"padding-top:0;\">\n                                <a href=\"{{ route('budgets.index', [prevLoop[0].start.format('Y-m-d'), prevLoop[0].end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\" title=\"{{ prevLoop[0].title }}\">&larr;</a>\n                                <a title=\"{{ start.formatLocalized(monthAndDayFormat) }} - {{ end.formatLocalized(monthAndDayFormat) }}\"\n                                   href=\"{{ route('budgets.index', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\">{{ periodTitle }}</a>\n                                <a href=\"{{ route('budgets.index', [nextLoop[0].start.format('Y-m-d'), nextLoop[0].end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\" title=\"{{ nextLoop[0].title }}\">&rarr;</a>\n                            </div>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12 text-right\">\n                            <select class=\"form-control selectPeriod\" name=\"next\">\n                                <option label=\"{{ 'select_date'|_ }}\" value=\"x\">{{ 'select_date'|_ }}</option>\n                                {% for array in nextLoop %}\n                                    <option label=\"{{ array.title }}\" value=\"{{ array.label }}\" data-start=\"{{ array.start.format('Y-m-d') }}\"\n                                            data-end=\"{{ array.end.format('Y-m-d') }}\">{{ array.title }}</option>\n                                {% endfor %}\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- available budget configurator. -->\n    {% if availableBudgets|length == 0 %}\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">\n                            {{ trans('firefly.total_available_budget_in_currency', {currency: defaultCurrency.name}) }}\n                            <br>\n                            <small>{{ trans('firefly.between_dates_breadcrumb', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}</small>\n                        </h3>\n                    </div>\n                    <div class=\"box-body\">\n                        <div class=\"row\">\n                            {# info about the amount budgeted #}\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                <small>{{ 'budgeted'|_ }} ({{ 'see_below'|_ }}):\n                                    <span class=\"budgeted_amount\" data-value=\"{{ budgeted }}\" data-id=\"0\" data-currency=\"{{ defaultCurrency.id }}\">\n                                        {{ formatAmountBySymbol(budgeted, defaultCurrency.symbol, defaultCurrency.decimal_places) }}\n                                    </span>\n                                </small>\n                            </div>\n                            {# info about the amount spent #}\n                            <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\" style=\"text-align:right;margin-bottom:3px;\">\n                                <small class=\"available_bar\"\n                                       data-id=\"0\">{{ trans('firefly.available_between', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat) }) }}\n                                    :\n                                    <span class=\"available_amount\" data-id=\"0\" data-value=\"0\" data-currency=\"{{ defaultCurrency.id }}\"\n                                          data-value=\"0\">{{ formatAmountBySymbol(0, defaultCurrency.symbol, defaultCurrency.decimal_places, true) }}</span>\n                                    <a href=\"#\" data-id=\"0\" class=\"update_ab btn btn-default btn-xs\"><span class=\"fa fa-pencil\"></span></a>\n                                </small>\n                            </div>\n                        </div>\n                        {# info text to show how much is spent (in currency). #}\n                        <div class=\"row spentInfo\" data-id=\"0\" data-value=\"{{ spent }}\">\n                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                <small>{{ trans('firefly.spent_between', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}\n                                    : {{ formatAmountBySymbol(spent, defaultCurrency.symbol, defaultCurrency.decimal_places) }} </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {% if enableAddButton %}\n                    <div class=\"col-lg-12\">\n                        <p class=\"pull-right\">\n                            <a href=\"#\" class=\"btn btn-light btn-xs create_ab_alt\">\n                                <span class=\"fa fa-plus-circle\"></span>\n                                {{ 'alt_currency_ab_create'|_ }}</a>\n                        </p>\n                    </div>\n                {% endif %}\n            </div>\n        </div>\n    {% endif %}\n\n    {% set boxSize = 12 %}\n    {% if availableBudgets|length > 1 %}\n        {% set boxSize = 6 %}\n    {% endif %}\n    {% if availableBudgets|length > 0 %}\n        <div class=\"row\">\n            {% for budget in availableBudgets %}\n                <div class=\"col-lg-{{ boxSize }} col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"box\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">\n                                {{ trans('firefly.total_available_budget_in_currency', {currency: budget.transaction_currency.name}) }}\n                                <br>\n                                <small>{{ trans('firefly.between_dates_breadcrumb', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat)}) }}</small>\n                            </h3>\n                        </div>\n                        <div class=\"box-body\">\n                            <div class=\"row\">\n                                {# info about the amount budgeted #}\n                                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                    <small>{{ 'budgeted'|_ }}:\n                                        <span class=\"text-success budgeted_amount\" data-id=\"{{ budget.id }}\" data-currency=\"{{ budget.transaction_currency.id }}\">\n                                        {{ formatAmountBySymbol(budget.budgeted, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places, false) }}\n                                    </span>\n                                    </small>\n                                </div>\n                                {# info about the amount spent #}\n                                <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\" style=\"text-align:right;margin-bottom:3px;\">\n                                    <small class=\"available_bar\"\n                                           data-id=\"{{ budget.id }}\">{{ trans('firefly.available_between', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat) }) }}\n                                        :\n                                        <span class=\"available_amount\" data-id=\"{{ budget.id }}\"\n                                              data-value=\"{{ budget.amount }}\">{{ formatAmountBySymbol(budget.amount, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places, true) }}</span>\n                                        <a href=\"#\" data-id=\"{{ budget.id }}\" class=\"update_ab btn btn-default btn-xs\"><span class=\"fa fa-pencil\"></span></a>\n                                        <a href=\"{{ route('available-budgets.delete', [budget.id]) }}\" data-id=\"{{ budget.id }}\"\n                                           class=\"delete_ab btn btn-danger btn-xs\"><span class=\"fa fa-trash\"></span></a>\n                                    </small>\n                                </div>\n                            </div>\n                            {# progresss bar to visualise available vs budgeted. #}\n                            <div class=\"row\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <div class=\"progress budgeted_bar\" data-id=\"{{ budget.id }}\" data-budgeted=\"{{ budget.budgeted }}\"\n                                         data-available=\"{{ budget.amount }}\" data-currency=\"{{ budget.transaction_currency.id }}\">\n                                        {# red: the exact amount of the available budget, if more has budgeted. #}\n                                        <div class=\"progress-bar progress-bar-danger\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"10\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n\n                                        {# orange: overbudgeted amount #}\n                                        <div class=\"progress-bar progress-bar-warning\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"0\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n\n                                        {# budgeted amount if enough or les #}\n                                        <div class=\"progress-bar progress-bar-info\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"0\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                            {# info text to show how much is spent (in currency). #}\n                            <div class=\"row spentInfo\" data-id=\"{{ budget.id }}\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <small>{{ trans('firefly.spent_between', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat)}) }}\n                                        : {{ formatAmountBySymbol(budget.spent, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places) }} </small>\n                                </div>\n                            </div>\n\n                            {# bar to visualise spending in budget .#}\n                            <div class=\"row\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <div class=\"progress spent_bar\" data-id=\"{{ budget.id }}\" data-budgeted=\"{{ budget.budgeted }}\"\n                                         data-spent=\"{{ budget.spent }}\">\n                                        <div class=\"progress-bar progress-bar-warning\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                        <div class=\"progress-bar progress-bar-info\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n            {% if enableAddButton %}\n                <div class=\"col-lg-12\">\n                    <p class=\"pull-right\">\n                        <a href=\"#\" class=\"btn btn-light btn-xs create_ab_alt\">\n                            <span class=\"fa fa-plus-circle\"></span>\n                            {{ 'alt_currency_ab_create'|_ }}</a>\n                    </p>\n                </div>\n            {% endif %}\n        </div>\n    {% endif %}\n    {% if budgets|length == 0 and inactive.count() == 0 %}\n        {% include 'v1.partials.empty' with {objectType: 'default', type: 'budgets',route: route('budgets.create')} %}\n        {# make FF ignore demo for now. #}\n        {% set shownDemo = true %}\n    {% else %}\n    \n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">{{ 'budgets'|_ }}</h3>\n                    </div>\n                    <div class=\"box-body no-padding\">\n                        <div style=\"padding:8px;\">\n                            <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success\"><span class=\"fa fa-plus fa-fw\"></span> {{ 'createBudget'|_ }}</a>\n                        </div>\n                        <table class=\"table table-bordered sortable-table table-striped sortable\" id=\"budgetList\">\n                            <thead>\n                            <tr>\n                                <th class=\"hidden-sm hidden-xs\" style=\"width:10%;\">&nbsp;</th>\n                                <th>{{ 'budget'|_ }}</th>\n                                <th style=\"width:25%;\">{{ 'budgeted'|_ }}</th>\n                                <th class=\"hidden-sm hidden-xs\">{{ 'spent'|_ }} ({{ 'per_day'|_|lower }})</th>\n                                <th>{{ 'left'|_ }} ({{ 'per_day'|_|lower }})</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {% for budget in budgets %}\n                                <tr data-id=\"{{ budget.id }}\">\n                                    <td class=\"hidden-sm hidden-xs\">\n                                        <div class=\"btn-group btn-group-xs\">\n                                            <a href=\"#\" class=\"handle object-handle btn btn-default\"><span class=\"fa fa-fw fa-bars\"></span></a>\n                                            <a href=\"{{ route('budgets.edit', budget.id) }}\" class=\"btn btn-xs btn-default\"><span class=\"fa fa-fw fa-pencil\"></span></a>\n                                            <a href=\"{{ route('budgets.delete', budget.id) }}\" class=\"btn btn-xs btn-danger\"><span class=\"fa fa-fw fa-trash-o\"></span></a>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        {% if 0 == budget.budgeted|length %}\n                                            <a href=\"{{ route('budgets.show', budget.id) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }}</a>\n                                        {% endif %}\n                                        {% if 1 == budget.budgeted|length %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                <a href=\"{{ route('budgets.show.limit', [budget.id, budgetLimit.id]) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }}</a>\n                                                {% endfor %}\n                                        {% endif %}\n\n                                        {% if budget.budgeted|length > 1 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                <a href=\"{{ route('budgets.show.limit', [budget.id, budgetLimit.id]) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }} ({{ budgetLimit.currency_name }})</a><br>\n                                            {% endfor %}\n                                        {% endif %}\n\n                                        {% if budget.auto_budget %}\n                                        {% if 1 == budget.auto_budget.auto_budget_type %}\n                                            <span class=\"fa fa-fw fa-calendar-check-o\" title=\"{{ 'auto_budget_reset_icon'|_ }}\"></span>\n                                        {% endif %}\n                                        {% if 2 == budget.auto_budget.auto_budget_type %}\n                                            <span class=\"fa fa-fw fa-calendar-plus-o\" title=\"{{ 'auto_budget_rollover_icon'|_ }}\"></span>\n                                        {% endif %}\n                                        {% endif %}\n                                        {% if budget.attachments.count() > 0 %}\n                                            <span class=\"fa fa-paperclip\"></span>\n                                        {% endif %}\n                                    </td>\n                                    <td>\n                                        {% if 0==budget.budgeted|length %}\n                                            <div class=\"input-group\">\n                                                <div class=\"input-group-addon\">{{ defaultCurrency.symbol }}</div>\n                                                <input type=\"hidden\" name=\"balance_currency_id\" value=\"{{ defaultCurrency.id }}\"/>\n                                                <input class=\"form-control budget_amount\" data-original=\"0\" data-id=\"{{ budget.id }}\"\n                                                    data-currency=\"{{ defaultCurrency.id }}\" data-limit=\"0\" value=\"0\" autocomplete=\"off\" min=\"0\" name=\"amount\"\n                                                    type=\"number\">\n                                            </div>\n                                            <span class=\"text-danger budget_warning\" data-id=\"{{ budget.id }}\" data-budgetLimit=\"{{ budgetLimit.id }}\"\n                                                style=\"display:none;\"></span>\n                                        {% endif %}\n                                        {% if budget.budgeted|length > 0 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                {% if not budgetLimit.in_range %}\n                                                    <small class=\"text-muted\">\n                                                        {{ trans('firefly.budget_limit_not_in_range', {start: budgetLimit.start_date, end: budgetLimit.end_date}) }}\n                                                    </small><br>\n                                                {% endif %}\n                                                <div class=\"input-group bl_entry\" data-budget-limit-id=\"{{ budgetLimit.id }}\">\n                                                    <div class=\"input-group-addon\">{{ budgetLimit.currency_symbol }}</div>\n                                                    <input class=\"form-control budget_amount\" data-original=\"{{ budgetLimit.amount }}\"\n                                                        data-id=\"{{ budget.id }}\" data-limit=\"{{ budgetLimit.id }}\" value=\"{{ budgetLimit.amount }}\"\n                                                        autocomplete=\"off\"\n                                                        min=\"0\" name=\"amount\" type=\"number\">\n                                                    <div class=\"input-group-btn\">\n                                                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                                                                aria-expanded=\"false\"><span class=\"caret\"></span></button>\n                                                        <ul class=\"dropdown-menu\">\n                                                            <li>\n                                                                <a class=\"delete_bl\" href=\"#\" data-budget-limit-id=\"{{ budgetLimit.id }}\">{{ trans('firefly.remove_budgeted_amount', {currency: budgetLimit.currency_name }) }}</a>\n                                                            </li>\n                                                        </ul>\n                                                    </div>\n                                                </div>\n                                                <span class=\"text-danger budget_warning\" data-id=\"{{ budget.id }}\" data-budgetLimit=\"{{ budgetLimit.id }}\"\n                                                    style=\"display:none;\"></span>\n                                            {% endfor %}\n                                        {% endif %}\n                                        {% if budget.budgeted|length < currencies.count() %}\n                                            <a href=\"#\" class=\"btn btn-light btn-xs create_bl\" data-id=\"{{ budget.id }}\">\n                                                <span class=\"fa fa-plus-circle\"></span>\n                                            </a>\n                                        {% endif %}\n                                    </td>\n                                    <td class=\"hidden-sm hidden-xs spent\" data-id=\"{{ budget.id }}\" style=\"text-align:right;\">\n                                        {% for spentInfo in budget.spent %}\n                                            {{ formatAmountBySymbol(spentInfo.spent, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                            ({{ formatAmountBySymbol(spentInfo.spent / activeDaysPassed, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                            <br/>\n                                        {% endfor %}\n                                        {% for budgetLimit in budget.budgeted %}\n                                            {% if null == budget.spent[budgetLimit.currency_id] %}\n                                                {{ formatAmountBySymbol(0, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }}<br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                    </td>\n                                    <td class=\"left\" data-id=\"{{ budget.id }}\" style=\"text-align: right;\">\n                                        {% for spentInfo in budget.spent %}\n                                            {% set countLimit = 0 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                {% if spentInfo.currency_id == budgetLimit.currency_id and budgetLimit.in_range %}\n                                                    {% set countLimit = countLimit + 1 %}\n                                                    <span class=\"left_span\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"{{ budgetLimit.id }}\"\n                                                        data-value=\"{{ spentInfo.spent + budgetLimit.amount }}\" class=\"amount_left\">\n                                                        {{ formatAmountBySymbol(spentInfo.spent + budgetLimit.amount, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                                        {% if spentInfo.spent + budgetLimit.amount > 0 %}\n                                                            ({{ formatAmountBySymbol((spentInfo.spent + budgetLimit.amount) / activeDaysLeft, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                                        {% else %}\n                                                            ({{ formatAmountBySymbol(0, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                                        {% endif %}\n                                                    </span>\n                                                    <br/>\n                                                {% endif %}\n                                            {% endfor %}\n                                            {% if countLimit == 0 %}\n                                                <span class=\"left_span\" data-id=\"{{ budget.id }}\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"0\"\n                                                    class=\"amount_left\" data-value=\"{{ spentInfo.spent }}\">\n                                                    {{ formatAmountBySymbol(spentInfo.spent, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                                </span>\n                                                <br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                        {% for budgetLimit in budget.budgeted %}\n                                            {% if null == budget.spent[budgetLimit.currency_id] %}\n                                            <span class=\"left_span\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"{{ budgetLimit.id }}\"\n                                                data-value=\"{{ spentInfo.spent + budgetLimit.amount }}\" class=\"amount_left\">\n                                                {{ formatAmountBySymbol(budgetLimit.amount, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }}\n                                                {% if budgetLimit.in_range %}\n                                                    ({{ formatAmountBySymbol(budgetLimit.amount / activeDaysLeft, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }})\n                                                {% endif %}\n                                            </span>\n                                            <br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                    </td>\n                                </tr>\n                            {% endfor %}\n                            </tbody>\n                            <tfoot>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td><em>{{ 'sum'|_ }}</em></td>\n                                <td class=\"hidden-sm hidden-xs\" style=\"text-align:right;\">\n                                    {% for arr in sums.budgeted %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}<br/>\n                                    {% endfor %}\n                                </td>\n                                <td class=\"hidden-sm hidden-xs\" style=\"text-align:right;\">\n                                    {% for arr in sums.spent %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}\n                                        ({{ formatAmountBySymbol(arr.amount / activeDaysPassed, arr.currency_symbol, arr.currency_decimal_places) }})\n                                        <br/>\n                                    {% endfor %}\n                                </td>\n                                <td style=\"text-align: right;\">\n                                    {% for arr in sums.left %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}\n                                        ({{ formatAmountBySymbol(arr.amount / activeDaysLeft, arr.currency_symbol, arr.currency_decimal_places) }})\n                                        <br/>\n                                    {% endfor %}\n                                </td>\n                            </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                    <div class=\"box-footer\">\n                        <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success\"><span class=\"fa fa-plus fa-fw\"></span> {{ 'createBudget'|_ }}</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"row\">\n            <div class=\"col-lg-3 col-md-4 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">{{ 'transactionsWithoutBudget'|_ }}</h3>\n                    </div>\n                    <div class=\"box-body\">\n                        <p>\n                            <a href=\"{{ route('budgets.no-budget', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\">\n                                {{ trans('firefly.transactions_no_budget', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}\n                            </a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n            {% if paginator.count() > 0 and inactive.count() > 0 %}\n                <div class=\"col-lg-3 col-md-4 col-sm-12 col-xs-12\">\n                    <div class=\"box\" id=\"createBudgetBox\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">{{ 'createBudget'|_ }}</h3>\n                        </div>\n                        <div class=\"box-body\">\n                            <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success pull-right\">{{ 'createBudget'|_ }}</a>\n                        </div>\n                    </div>\n                </div>\n            {% endif %}\n            {% if inactive|length > 0 %}\n                <div class=\"col-lg-3 col-sm-4 col-md-6\">\n                    <div class=\"box\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">{{ 'inactiveBudgets'|_ }}</h3>\n                        </div>\n                        <div class=\"box-body\">\n                            {% for budget in inactive %}\n                                {% if loop.index == inactive.count() %}\n                                    <a href=\"{{ route('budgets.show',budget.id) }}\">{{ budget.name }}</a>\n                                {% else %}\n                                    <a href=\"{{ route('budgets.show',budget.id) }}\">{{ budget.name }}</a>,\n                                {% endif %}\n                            {% endfor %}\n                        </div>\n                    </div>\n                </div>\n            {% endif %}\n        </div>\n    {% endif %}\n\n{% endblock %}\n\n{% block styles %}\n    <link href=\"v1/css/bootstrap-sortable.css?v={{ FF_VERSION }}\" type=\"text/css\" rel=\"stylesheet\"  media=\"all\" nonce=\"{{ JS_NONCE }}\">\n{% endblock %}\n\n{% block scripts %}\n    <script src=\"v1/js/lib/jquery-ui.min.js?v={{ FF_VERSION }}\" type=\"text/javascript\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" nonce=\"{{ JS_NONCE }}\">\n\n        // index route.\n        var budgetIndexUri = \"{{ route('budgets.index',['START','END']) }}\";\n\n        // create available budgets / edit\n        var createAvailableBudgetUri = \"{{ route('available-budgets.create', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var createAltAvailableBudgetUri = \"{{ route('available-budgets.create-alternative', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var editAvailableBudgetUri = \"{{ route('available-budgets.edit', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n\n        // budget limit create form.\n        var createBudgetLimitUri = \"{{ route('budget-limits.create', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var storeBudgetLimitUri = \"{{ route('budget-limits.store') }}\";\n        var updateBudgetLimitUri = \"{{ route('budget-limits.update', ['REPLACEME']) }}\";\n        var deleteBudgetLimitUrl = \"{{ route('budget-limits.delete', ['REPLACEME']) }}\";\n        var totalBudgetedUri = \"{{ route('json.budget.total-budgeted', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n\n        // period thing:\n        var periodStart = \"{{ start.format('Y-m-d') }}\";\n        var periodEnd = \"{{ end.format('Y-m-d') }}\";\n    </script>\n    <script type=\"text/javascript\" src=\"v1/js/lib/bootstrap-sortable.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" src=\"v1/js/ff/budgets/index.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n{% endblock %}\n", "<?php\n/**\n * web.php\n * Copyright (c) 2019 james@firefly-iii.org.\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nRoute::group(\n    ['namespace' => 'FireflyIII\\Http\\Controllers\\System',\n     'as'        => 'installer.', 'prefix' => 'install',],\n    static function () {\n        Route::get('', ['uses' => 'InstallController@index', 'as' => 'index']);\n        Route::post('runCommand', ['uses' => 'InstallController@runCommand', 'as' => 'runCommand']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only', 'namespace' => 'FireflyIII\\Http\\Controllers\\System', 'as' => 'cron.', 'prefix' => 'cron'],\n    static function () {\n        Route::get('run/{cliToken}', ['uses' => 'CronController@cron', 'as' => 'cron']);\n    }\n);\n\n/**\n * These routes only work when the user is NOT logged in.\n */\nRoute::group(\n    ['middleware' => 'user-not-logged-in', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n\n    // Authentication Routes...\n        Route::get('login', ['uses' => 'Auth\\LoginController@showLoginForm', 'as' => 'login']);\n        Route::post('login', ['uses' => 'Auth\\LoginController@login', 'as' => 'login.post']);\n\n        // Registration Routes...\n        Route::get('register', ['uses' => 'Auth\\RegisterController@showRegistrationForm', 'as' => 'register']);\n        Route::post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        Route::get('password/reset/{token}', ['uses' => 'Auth\\ResetPasswordController@showResetForm', 'as' => 'password.reset']);\n        Route::post('password/email', ['uses' => 'Auth\\ForgotPasswordController@sendResetLinkEmail', 'as' => 'password.email']);\n        Route::post('password/reset', ['uses' => 'Auth\\ResetPasswordController@reset', 'as' => 'password.reset.post']);\n        Route::get('password/reset', ['uses' => 'Auth\\ForgotPasswordController@showLinkRequestForm', 'as' => 'password.reset.request']);\n\n        // Change email routes:\n        Route::get('profile/confirm-email-change/{token}', ['uses' => 'ProfileController@confirmEmailChange', 'as' => 'profile.confirm-email-change']);\n        Route::get('profile/undo-email-change/{token}/{oldAddressHash}', ['uses' => 'ProfileController@undoEmailChange', 'as' => 'profile.undo-email-change']);\n    }\n);\n\n/**\n * For some other routes, it is only relevant that the user is authenticated.\n */\nRoute::group(\n    ['middleware' => 'user-simple-auth', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('error', ['uses' => 'DebugController@displayError', 'as' => 'error']);\n        Route::any('logout', ['uses' => 'Auth\\LoginController@logout', 'as' => 'logout']);\n        Route::get('flush', ['uses' => 'DebugController@flush', 'as' => 'flush']);\n        //Route::get('routes', ['uses' => 'DebugController@routes', 'as' => 'routes']);\n        Route::get('debug', 'DebugController@index')->name('debug');\n    }\n);\n\n/**\n * For the two factor routes, the user must be logged in, but NOT 2FA. Account confirmation does not matter here.\n *\n */\nRoute::group(\n    ['middleware' => 'user-logged-in-no-2fa', 'prefix' => 'two-factor', 'as' => 'two-factor.', 'namespace' => 'FireflyIII\\Http\\Controllers\\Auth'],\n    static function () {\n        Route::post('submit', ['uses' => 'TwoFactorController@submitMFA', 'as' => 'submit']);\n        Route::get('lost', ['uses' => 'TwoFactorController@lostTwoFactor', 'as' => 'lost']); // can be removed when v2 is live.\n    }\n);\n\n/**\n * For all other routes, the user must be fully authenticated and have an activated account.\n */\n\n/**\n * Home Controller.\n */\nRoute::group(\n    ['middleware' => ['user-full-auth'], 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('/', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::get('/flash', ['uses' => 'DebugController@testFlash', 'as' => 'test-flash']);\n        Route::get('/home', ['uses' => 'HomeController@index', 'as' => 'home']);\n        Route::post('/daterange', ['uses' => 'HomeController@dateRange', 'as' => 'daterange']);\n    }\n);\n\n// show inactive\n\n/**\n * Account Controller.\n * DROP ME WHEN v2 hits\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'inactive-accounts', 'as' => 'accounts.'],\n    static function () {\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@inactive', 'as' => 'inactive.index'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n    }\n);\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'accounts', 'as' => 'accounts.'],\n    static function () {\n\n        // show:\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@index', 'as' => 'index'])->where('objectType', 'revenue|asset|expense|liabilities');\n\n        // create\n        Route::get('create/{objectType}', ['uses' => 'Account\\CreateController@create', 'as' => 'create'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n        Route::post('store', ['uses' => 'Account\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{account}', ['uses' => 'Account\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{account}', ['uses' => 'Account\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{account}', ['uses' => 'Account\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{account}', ['uses' => 'Account\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show\n        Route::get('show/{account}/all', ['uses' => 'Account\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{account}/{start_date?}/{end_date?}', ['uses' => 'Account\\ShowController@show', 'as' => 'show']);\n\n        // reconcile routes:\n        Route::get('reconcile/{account}/index/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@reconcile', 'as' => 'reconcile']);\n        Route::post('reconcile/{account}/submit/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@submit', 'as' => 'reconcile.submit']);\n\n        // reconcile JSON routes\n        Route::get('reconcile/{account}/overview/{start_date?}/{end_date?}', ['uses' => 'Json\\ReconcileController@overview', 'as' => 'reconcile.overview']);\n        Route::get(\n            'reconcile/{account}/transactions/{start_date?}/{end_date?}',\n            ['uses' => 'Json\\ReconcileController@transactions', 'as' => 'reconcile.transactions']\n        );\n    }\n);\n\n/**\n * Attachment Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'attachments', 'as' => 'attachments.'],\n    static function () {\n        Route::get('', ['uses' => 'AttachmentController@index', 'as' => 'index']);\n        Route::get('edit/{attachment}', ['uses' => 'AttachmentController@edit', 'as' => 'edit']);\n        Route::get('delete/{attachment}', ['uses' => 'AttachmentController@delete', 'as' => 'delete']);\n        Route::get('download/{attachment}', ['uses' => 'AttachmentController@download', 'as' => 'download']);\n        Route::get('view/{attachment}', ['uses' => 'AttachmentController@view', 'as' => 'view']);\n\n        Route::post('update/{attachment}', ['uses' => 'AttachmentController@update', 'as' => 'update']);\n        Route::post('destroy/{attachment}', ['uses' => 'AttachmentController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Bills Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'bills', 'as' => 'bills.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budgets', 'as' => 'budgets.'],\n    static function () {\n\n    // delete\n        Route::get('delete/{budget}', ['uses' => 'Budget\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{budget}', ['uses' => 'Budget\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // create\n        Route::get('create', ['uses' => 'Budget\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{budget}', ['uses' => 'Budget\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{budget}', ['uses' => 'Budget\\EditController@update', 'as' => 'update']);\n\n        // show\n        Route::get('show/{budget}', ['uses' => 'Budget\\ShowController@show', 'as' => 'show']);\n        Route::get('show/{budget}/{budgetLimit}', ['uses' => 'Budget\\ShowController@showByBudgetLimit', 'as' => 'show.limit']);\n        Route::get('list/no-budget/all', ['uses' => 'Budget\\ShowController@noBudgetAll', 'as' => 'no-budget-all']);\n        Route::get('list/no-budget/{start_date?}/{end_date?}', ['uses' => 'Budget\\ShowController@noBudget', 'as' => 'no-budget']);\n\n        // reorder budgets\n        Route::post('reorder', ['uses' => 'Budget\\IndexController@reorder', 'as' => 'reorder']);\n\n        // index\n        Route::get('{start_date?}/{end_date?}', ['uses' => 'Budget\\IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * Available Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'available-budgets', 'as' => 'available-budgets.'],\n    static function () {\n\n        // create\n        Route::get('create/{start_date}/{end_date}/{currency?}', ['uses' => 'Budget\\AvailableBudgetController@create', 'as' => 'create']);\n        Route::get(\n            'create-alternative/{start_date}/{end_date}',\n            ['uses' => 'Budget\\AvailableBudgetController@createAlternative', 'as' => 'create-alternative']\n        );\n        Route::post('store', ['uses' => 'Budget\\AvailableBudgetController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@edit', 'as' => 'edit']);\n        Route::post('update/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@update', 'as' => 'update']);\n\n        Route::get('delete/{availableBudget}', ['uses' => 'Budget\\AvailableBudgetController@delete', 'as' => 'delete']);\n    }\n);\n\n/**\n * Budget Limit Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budget-limits', 'as' => 'budget-limits.'],\n    static function () {\n        Route::get('create/{budget}/{start_date}/{end_date}', ['uses' => 'Budget\\BudgetLimitController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\BudgetLimitController@store', 'as' => 'store']);\n\n        Route::post('delete/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@delete', 'as' => 'delete']);\n\n        Route::post('update/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'categories', 'as' => 'categories.'],\n    static function () {\n\n    // index:\n        Route::get('', ['uses' => 'Category\\IndexController@index', 'as' => 'index']);\n\n        // create\n        Route::get('create', ['uses' => 'Category\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Category\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{category}', ['uses' => 'Category\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{category}', ['uses' => 'Category\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{category}', ['uses' => 'Category\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{category}', ['uses' => 'Category\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show category:\n        Route::get('show/{category}/all', ['uses' => 'Category\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{category}/{start_date?}/{end_date?}', ['uses' => 'Category\\ShowController@show', 'as' => 'show']);\n\n        // no category controller:\n        Route::get('list/no-category/all', ['uses' => 'Category\\NoCategoryController@showAll', 'as' => 'no-category.all']);\n        Route::get('list/no-category/{start_date?}/{end_date?}', ['uses' => 'Category\\NoCategoryController@show', 'as' => 'no-category']);\n    }\n);\n\n/**\n * Currency Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'currencies', 'as' => 'currencies.'],\n    static function () {\n        Route::get('', ['uses' => 'CurrencyController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'CurrencyController@create', 'as' => 'create']);\n        Route::get('edit/{currency}', ['uses' => 'CurrencyController@edit', 'as' => 'edit']);\n        Route::get('delete/{currency}', ['uses' => 'CurrencyController@delete', 'as' => 'delete']);\n        Route::post('default', ['uses' => 'CurrencyController@defaultCurrency', 'as' => 'default']);\n        Route::get('enable/{currency}', ['uses' => 'CurrencyController@enableCurrency', 'as' => 'enable']);\n        Route::get('disable/{currency}', ['uses' => 'CurrencyController@disableCurrency', 'as' => 'disable']);\n\n        Route::post('store', ['uses' => 'CurrencyController@store', 'as' => 'store']);\n        Route::post('update/{currency}', ['uses' => 'CurrencyController@update', 'as' => 'update']);\n        Route::post('destroy/{currency}', ['uses' => 'CurrencyController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Chart\\Account Controller (default report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/account', 'as' => 'chart.account.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'AccountController@frontpage', 'as' => 'frontpage']);\n        Route::get('expense', ['uses' => 'AccountController@expenseAccounts', 'as' => 'expense']);\n        Route::get('revenue', ['uses' => 'AccountController@revenueAccounts', 'as' => 'revenue']);\n        Route::get('report/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@report', 'as' => 'report']);\n        Route::get('period/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@period', 'as' => 'period']);\n\n        Route::get('income-category/{account}/all/all', ['uses' => 'AccountController@incomeCategoryAll', 'as' => 'income-category-all']);\n        Route::get('expense-category/{account}/all/all', ['uses' => 'AccountController@expenseCategoryAll', 'as' => 'expense-category-all']);\n        Route::get('expense-budget/{account}/all/all', ['uses' => 'AccountController@expenseBudgetAll', 'as' => 'expense-budget-all']);\n\n        Route::get('income-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@incomeCategory', 'as' => 'income-category']);\n        Route::get('expense-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-budget/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseBudget', 'as' => 'expense-budget']);\n    }\n);\n\n/**\n * Chart\\Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/bill', 'as' => 'chart.bill.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BillController@frontpage', 'as' => 'frontpage']);\n        Route::get('single/{bill}', ['uses' => 'BillController@single', 'as' => 'single']);\n    }\n);\n\n/**\n * Chart\\Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/budget', 'as' => 'chart.budget.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BudgetController@frontpage', 'as' => 'frontpage']);\n        Route::get('period/0/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@periodNoBudget', 'as' => 'period.no-budget']);\n        Route::get('period/{budget}/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n        Route::get('budget/{budget}/{budgetLimit}', ['uses' => 'BudgetController@budgetLimit', 'as' => 'budget-limit']);\n        Route::get('budget/{budget}', ['uses' => 'BudgetController@budget', 'as' => 'budget']);\n\n        // these charts are used in budget/show:\n        Route::get('expense-category/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-asset/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseAsset', 'as' => 'expense-asset']);\n        Route::get('expense-expense/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseExpense', 'as' => 'expense-expense']);\n\n        // these charts are used in reports (category reports):\n        Route::get(\n            'category/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@sourceAccountExpense', 'as' => 'source-account-expense']\n        );\n        Route::get(\n            'destination-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@destinationAccountExpense', 'as' => 'destination-account-expense']\n        );\n        Route::get('operations/{accountList}/{budget}/{start_date}/{end_date}', ['uses' => 'BudgetReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/category', 'as' => 'chart.category.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'CategoryController@frontPage', 'as' => 'frontpage']);\n        Route::get('period/{category}', ['uses' => 'CategoryController@currentPeriod', 'as' => 'current']);\n        Route::get('period/{category}/{date}', ['uses' => 'CategoryController@specificPeriod', 'as' => 'specific']);\n        Route::get('all/{category}', ['uses' => 'CategoryController@all', 'as' => 'all']);\n        Route::get(\n            'report-period/0/{accountList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@reportPeriodNoCategory', 'as' => 'period.no-category']\n        );\n        Route::get('report-period/{category}/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@reportPeriod', 'as' => 'period']);\n\n        Route::get(\n            'category/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceExpense', 'as' => 'source-expense']\n        );\n        Route::get(\n            'source/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceIncome', 'as' => 'source-income']\n        );\n        Route::get(\n            'dest/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationExpense', 'as' => 'dest-expense']\n        );\n        Route::get(\n            'dest/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationIncome', 'as' => 'dest-income']\n        );\n        Route::get('operations/{accountList}/{category}/{start_date}/{end_date}', ['uses' => 'CategoryReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/tag', 'as' => 'chart.tag.'],\n    static function () {\n        Route::get('tag/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagIncome', 'as' => 'tag-income']);\n        Route::get(\n            'category/expense/{accountList}/{tagList}/{start_date}/{end_date}',\n            ['uses' => 'TagReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get('category/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@categoryIncome', 'as' => 'category-income']);\n        Route::get('budget/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@budgetExpense', 'as' => 'budget-expense']);\n        Route::get('source/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceExpense', 'as' => 'source-expense']);\n        Route::get('source/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceIncome', 'as' => 'source-income']);\n        Route::get('dest/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationExpense', 'as' => 'dest-expense']);\n        Route::get('dest/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationIncome', 'as' => 'dest-income']);\n\n        Route::get('operations/{accountList}/{tag}/{start_date}/{end_date}', ['uses' => 'TagReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Double Controller (for expense/revenue report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/double', 'as' => 'chart.double.'],\n    static function () {\n        Route::get('main/{accountList}/{account}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@mainChart', 'as' => 'main']);\n\n        Route::get(\n            'category/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n\n        Route::get('tag/expense/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagIncome', 'as' => 'tag-income']);\n    }\n);\n\n/**\n * Chart\\PiggyBank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/piggy-bank', 'as' => 'chart.piggy-bank.'],\n    static function () {\n        Route::get('{piggyBank}', ['uses' => 'PiggyBankController@history', 'as' => 'history']);\n    }\n);\n\n/**\n * Chart\\Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/report', 'as' => 'chart.report.'],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@operations', 'as' => 'operations']);\n        Route::get('net-worth/{accountList}/{start_date}/{end_date}/', ['uses' => 'ReportController@netWorth', 'as' => 'net-worth']);\n    }\n);\n\n/**\n * Chart\\Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/transactions', 'as' => 'chart.transactions.'],\n    static function () {\n        Route::get('categories/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@categories', 'as' => 'categories']);\n        Route::get('budgets/{start_date}/{end_date}', ['uses' => 'TransactionController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'destinationAccounts/{objectType}/{start_date}/{end_date}',\n            ['uses' => 'TransactionController@destinationAccounts', 'as' => 'destinationAccounts']\n        );\n        Route::get('sourceAccounts/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@sourceAccounts', 'as' => 'sourceAccounts']);\n        //\n    }\n);\n\n/**\n * Export controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'export', 'as' => 'export.'],\n    static function () {\n\n    // index\n        Route::get('', ['uses' => 'Export\\IndexController@index', 'as' => 'index']);\n        Route::post('export', ['uses' => 'Export\\IndexController@export', 'as' => 'export']);\n    }\n);\n/**\n * Object group controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'groups', 'as' => 'object-groups.'],\n    static function () {\n\n        // index\n        Route::get('', ['uses' => 'ObjectGroup\\IndexController@index', 'as' => 'index']);\n        Route::post('set-order/{objectGroup}', ['uses' => 'ObjectGroup\\IndexController@setOrder', 'as' => 'set-order']);\n\n        // edit\n        Route::get('edit/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Help Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'help', 'as' => 'help.'],\n    static function () {\n        Route::get('{route}', ['uses' => 'HelpController@show', 'as' => 'show']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v1/jscript', 'as' => 'javascript.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variables', 'as' => 'variables']);\n        Route::get('accounts', ['uses' => 'JavascriptController@accounts', 'as' => 'accounts']);\n        Route::get('currencies', ['uses' => 'JavascriptController@currencies', 'as' => 'currencies']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v2/jscript', 'as' => 'javascript.v2.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variablesV2', 'as' => 'variables']);\n    }\n);\n\n/**\n * JSON Controller(s).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'json', 'as' => 'json.'],\n    static function () {\n\n        // budgets:\n        Route::get(\n            'budget/total-budgeted/{currency}/{start_date}/{end_date}',\n            ['uses' => 'Json\\BudgetController@getBudgetInformation', 'as' => 'budget.total-budgeted']\n        );\n        // boxes\n        Route::get('box/balance', ['uses' => 'Json\\BoxController@balance', 'as' => 'box.balance']);\n        Route::get('box/available', ['uses' => 'Json\\BoxController@available', 'as' => 'box.available']);\n        Route::get('box/net-worth', ['uses' => 'Json\\BoxController@netWorth', 'as' => 'box.net-worth']);\n\n        // rules\n        Route::get('trigger', ['uses' => 'Json\\RuleController@trigger', 'as' => 'trigger']);\n        Route::get('action', ['uses' => 'Json\\RuleController@action', 'as' => 'action']);\n\n        // front page\n        Route::get('frontpage/piggy-banks', ['uses' => 'Json\\FrontpageController@piggyBanks', 'as' => 'fp.piggy-banks']);\n\n        // currency conversion:\n        Route::get('rate/{fromCurrencyCode}/{toCurrencyCode}/{date}', ['uses' => 'Json\\ExchangeController@getRate', 'as' => 'rate']);\n\n        // intro things:\n        Route::any('intro/finished/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postFinished', 'as' => 'intro.finished']);\n        Route::post('intro/enable/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postEnable', 'as' => 'intro.enable']);\n        Route::get('intro/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@getIntroSteps', 'as' => 'intro']);\n    }\n);\n\n/**\n * NewUser Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'new-user', 'as' => 'new-user.'],\n    static function () {\n        Route::get('', ['uses' => 'NewUserController@index', 'as' => 'index']);\n        Route::post('submit', ['uses' => 'NewUserController@submit', 'as' => 'submit']);\n    }\n);\n\n/**\n * Piggy Bank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'piggy-banks', 'as' => 'piggy-banks.'],\n    static function () {\n\n        Route::get('', ['uses' => 'PiggyBank\\IndexController@index', 'as' => 'index']);\n        Route::get('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@add', 'as' => 'add-money']);\n        Route::get('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@remove', 'as' => 'remove-money']);\n        Route::get('add-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@addMobile', 'as' => 'add-money-mobile']);\n        Route::get('remove-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@removeMobile', 'as' => 'remove-money-mobile']);\n        Route::get('create', ['uses' => 'PiggyBank\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{piggyBank}', ['uses' => 'PiggyBank\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{piggyBank}', ['uses' => 'PiggyBank\\ShowController@show', 'as' => 'show']);\n        Route::post('store', ['uses' => 'PiggyBank\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{piggyBank}', ['uses' => 'PiggyBank\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postAdd', 'as' => 'add']);\n        Route::post('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postRemove', 'as' => 'remove']);\n\n        Route::post('set-order/{piggyBank}', ['uses' => 'PiggyBank\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Preferences Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'preferences', 'as' => 'preferences.'],\n    static function () {\n        Route::get('', ['uses' => 'PreferencesController@index', 'as' => 'index']);\n        Route::post('', ['uses' => 'PreferencesController@postIndex', 'as' => 'update']);\n    }\n);\n\n/**\n * Profile Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'profile', 'as' => 'profile.'],\n    static function () {\n        Route::get('', ['uses' => 'ProfileController@index', 'as' => 'index']);\n        Route::get('change-email', ['uses' => 'ProfileController@changeEmail', 'as' => 'change-email']);\n        Route::get('change-password', ['uses' => 'ProfileController@changePassword', 'as' => 'change-password']);\n        Route::get('delete-account', ['uses' => 'ProfileController@deleteAccount', 'as' => 'delete-account']);\n\n        Route::post('delete-account', ['uses' => 'ProfileController@postDeleteAccount', 'as' => 'delete-account.post']);\n        Route::post('change-password', ['uses' => 'ProfileController@postChangePassword', 'as' => 'change-password.post']);\n        Route::post('change-email', ['uses' => 'ProfileController@postChangeEmail', 'as' => 'change-email.post']);\n        Route::post('regenerate', ['uses' => 'ProfileController@regenerate', 'as' => 'regenerate']);\n\n        Route::get('logout-others', ['uses' => 'ProfileController@logoutOtherSessions', 'as' => 'logout-others']);\n        Route::post('logout-others', ['uses' => 'ProfileController@postLogoutOtherSessions', 'as' => 'logout-others.post']);\n\n        // new 2FA routes\n        Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\n        Route::get('2fa/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\n        Route::post('2fa/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\n        Route::get('/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\n        Route::get('2fa/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\n\n    }\n);\n\n/**\n * Recurring Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\n    static function () {\n        Route::get('', ['uses' => 'Recurring\\IndexController@index', 'as' => 'index']);\n\n        Route::get('show/{recurrence}', ['uses' => 'Recurring\\ShowController@show', 'as' => 'show']);\n        Route::get('create', ['uses' => 'Recurring\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-transaction/{tj}', ['uses' => 'Recurring\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::get('edit/{recurrence}', ['uses' => 'Recurring\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{recurrence}', ['uses' => 'Recurring\\DeleteController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'Recurring\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{recurrence}', ['uses' => 'Recurring\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{recurrence}', ['uses' => 'Recurring\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // JSON routes:\n        Route::get('events', ['uses' => 'Json\\RecurrenceController@events', 'as' => 'events']);\n        Route::get('suggest', ['uses' => 'Json\\RecurrenceController@suggest', 'as' => 'suggest']);\n    }\n);\n\n/**\n * Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'reports', 'as' => 'reports.'],\n    static function () {\n        Route::get('', ['uses' => 'ReportController@index', 'as' => 'index']);\n        Route::get('options/{reportType}', ['uses' => 'ReportController@options', 'as' => 'options']);\n        Route::get('default/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@defaultReport', 'as' => 'report.default']);\n        Route::get('audit/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@auditReport', 'as' => 'report.audit']);\n        Route::get('category/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'ReportController@categoryReport', 'as' => 'report.category']);\n        Route::get('budget/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'ReportController@budgetReport', 'as' => 'report.budget']);\n        Route::get('tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'ReportController@tagReport', 'as' => 'report.tag']);\n        Route::get('double/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'ReportController@doubleReport', 'as' => 'report.double']);\n\n        Route::post('', ['uses' => 'ReportController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Report Data AccountController.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/account', 'as' => 'report-data.account.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/bill', 'as' => 'report-data.bills.'],\n    static function () {\n        Route::get('overview/{accountList}/{start_date}/{end_date}', ['uses' => 'BillController@overview', 'as' => 'overview']);\n    }\n);\n\n/**\n * Report Double Data Expense / Revenue Account Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/double', 'as' => 'report-data.double.'],\n    static function () {\n\n        // spent + earned per combination.\n        Route::get('operations/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operations', 'as' => 'operations']);\n        Route::get('ops-asset/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operationsPerAsset', 'as' => 'ops-asset']);\n\n        Route::get('top-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Income/Expenses Controller (called financial operations).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/operations',\n     'as'         => 'report-data.operations.',],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@expenses', 'as' => 'expenses']);\n    }\n);\n\n/**\n * Report Data Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/category',\n     'as'         => 'report-data.category.',],\n    static function () {\n\n// See reference nr. 3\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@expenses', 'as' => 'expenses']);\n\n        Route::get('accounts/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@accounts', 'as' => 'accounts']);\n        Route::get('categories/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@categories', 'as' => 'categories']);\n        Route::get(\n            'account-per-category/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@accountPerCategory', 'as' => 'account-per-category']\n        );\n\n        Route::get('top-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data TAG Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/tag',\n     'as'         => 'report-data.tag.',],\n    static function () {\n        Route::get('accounts/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accounts', 'as' => 'accounts']);\n        Route::get('tags/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@tags', 'as' => 'tags']);\n        Route::get('account-per-tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accountPerTag', 'as' => 'account-per-tag']);\n\n        Route::get('top-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Balance Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/balance', 'as' => 'report-data.balance.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'BalanceController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/budget', 'as' => 'report-data.budget.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}/', ['uses' => 'BudgetController@general', 'as' => 'general']);\n// See reference nr. 4\n        Route::get('period/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n\n        Route::get('accounts/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@accounts', 'as' => 'accounts']);\n        Route::get('budgets/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'account-per-budget/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetController@accountPerBudget', 'as' => 'account-per-budget']\n        );\n        Route::get('top-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@avgExpenses', 'as' => 'avg-expenses']);\n    }\n);\n\n/**\n * Rules Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rules', 'as' => 'rules.'],\n    static function () {\n\n    // create controller\n        Route::get('create/{ruleGroup?}', ['uses' => 'Rule\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-bill/{bill}', ['uses' => 'Rule\\CreateController@createFromBill', 'as' => 'create-from-bill']);\n        Route::get('create-from-journal/{tj}', ['uses' => 'Rule\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::post('store', ['uses' => 'Rule\\CreateController@store', 'as' => 'store']);\n        Route::get('duplicate/{rule}', ['uses' => 'Rule\\CreateController@duplicate', 'as' => 'duplicate']);\n\n        // delete controller\n        Route::get('delete/{rule}', ['uses' => 'Rule\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{rule}', ['uses' => 'Rule\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // index controller\n        Route::get('', ['uses' => 'Rule\\IndexController@index', 'as' => 'index']);\n\n        Route::post('move-rule/{rule}/{ruleGroup}', ['uses' => 'Rule\\IndexController@moveRule', 'as' => 'move-rule']);\n        // select controller\n        Route::get('test', ['uses' => 'Rule\\SelectController@testTriggers', 'as' => 'test-triggers']);\n        Route::get('test-rule/{rule}', ['uses' => 'Rule\\SelectController@testTriggersByRule', 'as' => 'test-triggers-rule']);\n        Route::get('search/{rule}', ['uses' => 'Rule\\IndexController@search', 'as' => 'search']);\n        Route::get('select/{rule}', ['uses' => 'Rule\\SelectController@selectTransactions', 'as' => 'select-transactions']);\n        Route::post('execute/{rule}', ['uses' => 'Rule\\SelectController@execute', 'as' => 'execute']);\n\n        // edit controller\n        Route::get('edit/{rule}', ['uses' => 'Rule\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{rule}', ['uses' => 'Rule\\EditController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Rule Groups Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rule-groups', 'as' => 'rule-groups.'],\n    static function () {\n        Route::get('create', ['uses' => 'RuleGroup\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('up/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@up', 'as' => 'up']);\n        Route::get('down/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@down', 'as' => 'down']);\n        Route::get('select/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@selectTransactions', 'as' => 'select-transactions']);\n\n        Route::post('store', ['uses' => 'RuleGroup\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('execute/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@execute', 'as' => 'execute']);\n    }\n);\n\n/**\n * Search Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'search', 'as' => 'search.'],\n    static function () {\n        Route::get('', ['uses' => 'SearchController@index', 'as' => 'index']);\n        Route::any('search', ['uses' => 'SearchController@search', 'as' => 'search']);\n    }\n);\n\n/**\n * Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'tags', 'as' => 'tags.'],\n    static function () {\n        Route::get('', ['uses' => 'TagController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'TagController@create', 'as' => 'create']);\n\n        Route::get('show/{tagOrId}/all', ['uses' => 'TagController@showAll', 'as' => 'show.all']);\n        Route::get('show/{tagOrId}/{start_date?}/{end_date?}', ['uses' => 'TagController@show', 'as' => 'show']);\n\n        Route::get('edit/{tag}', ['uses' => 'TagController@edit', 'as' => 'edit']);\n        Route::get('delete/{tag}', ['uses' => 'TagController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'TagController@store', 'as' => 'store']);\n        Route::post('update/{tag}', ['uses' => 'TagController@update', 'as' => 'update']);\n        Route::post('destroy/{tag}', ['uses' => 'TagController@destroy', 'as' => 'destroy']);\n        Route::post('mass-destroy', ['uses' => 'TagController@massDestroy', 'as' => 'mass-destroy']);\n    }\n);\n\n/**\n * Transaction Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'transactions', 'as' => 'transactions.'],\n    static function () {\n\n    // show groups:\n// See reference nr. 5\n        Route::get('{what}/all', ['uses' => 'Transaction\\IndexController@indexAll', 'as' => 'index.all'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        Route::get('{what}/{start_date?}/{end_date?}', ['uses' => 'Transaction\\IndexController@index', 'as' => 'index'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        // create group:\n        Route::get('create/{objectType}', ['uses' => 'Transaction\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Transaction\\CreateController@store', 'as' => 'store']);\n\n        // clone group\n        Route::get('clone/{transactionGroup}', ['uses' => 'Transaction\\CreateController@cloneGroup', 'as' => 'clone']);\n\n        // edit group\n        Route::get('edit/{transactionGroup}', ['uses' => 'Transaction\\EditController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'Transaction\\EditController@update', 'as' => 'update']);\n\n        // delete group\n        Route::get('delete/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::get('show/{transactionGroup}', ['uses' => 'Transaction\\ShowController@show', 'as' => 'show']);\n        Route::get('debug/{transactionGroup}', ['uses' => 'Transaction\\ShowController@debugShow', 'as' => 'debug']);\n    }\n);\n\n/**\n * Transaction Mass Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/mass', 'as' => 'transactions.mass.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'MassController@edit', 'as' => 'edit']);\n        Route::get('delete/{journalList}', ['uses' => 'MassController@delete', 'as' => 'delete']);\n        Route::post('update', ['uses' => 'MassController@update', 'as' => 'update']);\n        Route::post('destroy', ['uses' => 'MassController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Transaction Bulk Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/bulk', 'as' => 'transactions.bulk.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'BulkController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'BulkController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Transaction Convert Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/convert',\n     'as'         => 'transactions.convert.',],\n    static function () {\n        Route::get('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@index', 'as' => 'index']);\n        Route::post('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Transaction Link Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/link', 'as' => 'transactions.link.'],\n    static function () {\n        Route::get('modal/{tj}', ['uses' => 'LinkController@modal', 'as' => 'modal']);\n\n// See reference nr. 6\n        Route::post('store/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\n        Route::get('delete/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\n        Route::get('switch/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\n\n        Route::post('destroy/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Report Popup Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Popup', 'prefix' => 'popup', 'as' => 'popup.'],\n    static function () {\n        Route::get('general', ['uses' => 'ReportController@general', 'as' => 'general']);\n    }\n);\n\n/*\n * Webhooks management\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Webhooks', 'prefix' => 'webhooks', 'as' => 'webhooks.'],\n    static function () {\n        Route::get('index', ['uses' => 'IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * For the admin routes, the user must be logged in and have the role of 'owner'.\n */\nRoute::group(\n    ['middleware' => 'admin', 'namespace' => 'FireflyIII\\Http\\Controllers\\Admin', 'prefix' => 'admin', 'as' => 'admin.'],\n    static function () {\n\n    // admin home\n        Route::get('', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::post('test-message', ['uses' => 'HomeController@testMessage', 'as' => 'test-message']);\n\n        // check for updates?\n        Route::get('update-check', ['uses' => 'UpdateController@index', 'as' => 'update-check']);\n        Route::any('update-check/manual', ['uses' => 'UpdateController@updateCheck', 'as' => 'update-check.manual']);\n        Route::post('update-check', ['uses' => 'UpdateController@post', 'as' => 'update-check.post']);\n\n        // user manager\n        Route::get('users', ['uses' => 'UserController@index', 'as' => 'users']);\n        Route::get('users/edit/{user}', ['uses' => 'UserController@edit', 'as' => 'users.edit']);\n        Route::get('users/delete/{user}', ['uses' => 'UserController@delete', 'as' => 'users.delete']);\n        Route::get('users/show/{user}', ['uses' => 'UserController@show', 'as' => 'users.show']);\n\n        Route::post('users/update/{user}', ['uses' => 'UserController@update', 'as' => 'users.update']);\n        Route::post('users/destroy/{user}', ['uses' => 'UserController@destroy', 'as' => 'users.destroy']);\n\n        // journal links manager\n        Route::get('links', ['uses' => 'LinkController@index', 'as' => 'links.index']);\n        Route::get('links/create', ['uses' => 'LinkController@create', 'as' => 'links.create']);\n        Route::get('links/show/{linkType}', ['uses' => 'LinkController@show', 'as' => 'links.show']);\n        Route::get('links/edit/{linkType}', ['uses' => 'LinkController@edit', 'as' => 'links.edit']);\n        Route::get('links/delete/{linkType}', ['uses' => 'LinkController@delete', 'as' => 'links.delete']);\n\n        Route::post('links/store', ['uses' => 'LinkController@store', 'as' => 'links.store']);\n        Route::post('links/update/{linkType}', ['uses' => 'LinkController@update', 'as' => 'links.update']);\n        Route::post('links/destroy/{linkType}', ['uses' => 'LinkController@destroy', 'as' => 'links.destroy']);\n\n        // FF configuration:\n        Route::get('configuration', ['uses' => 'ConfigurationController@index', 'as' => 'configuration.index']);\n        Route::post('configuration', ['uses' => 'ConfigurationController@postIndex', 'as' => 'configuration.index.post']);\n    }\n);\n"], "fixing_code": ["<?php\n/**\n * AvailableBudgetController.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Budget;\n\nuse Carbon\\Carbon;\nuse Carbon\\Exceptions\\InvalidDateException;\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\Repositories\\Budget\\AvailableBudgetRepositoryInterface;\nuse FireflyIII\\Repositories\\Currency\\CurrencyRepositoryInterface;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Routing\\Redirector;\nuse Illuminate\\View\\View;\nuse Log;\n\n/**\n *\n * Class AvailableBudgetController\n */\nclass AvailableBudgetController extends Controller\n{\n\n    /** @var AvailableBudgetRepositoryInterface */\n    private $abRepository;\n    /** @var CurrencyRepositoryInterface */\n    private $currencyRepos;\n\n    /**\n     * AmountController constructor.\n     */\n    public function __construct()\n    {\n        parent::__construct();\n\n        $this->middleware(\n            function ($request, $next) {\n                app('view')->share('title', (string)trans('firefly.budgets'));\n                app('view')->share('mainTitleIcon', 'fa-pie-chart');\n                $this->abRepository  = app(AvailableBudgetRepositoryInterface::class);\n                $this->currencyRepos = app(CurrencyRepositoryInterface::class);\n\n                return $next($request);\n            }\n        );\n    }\n\n    /**\n     * Create will always assume the user's default currency, if it's not set.\n     *\n     * This method will check if there is no AB, and refuse to continue if it exists.\n     *\n     * @param Request                  $request\n     * @param Carbon                   $start\n     * @param Carbon                   $end\n     * @param TransactionCurrency|null $currency\n     *\n     * @return Factory|RedirectResponse|Redirector|View\n     */\n    public function create(Request $request, Carbon $start, Carbon $end, ?TransactionCurrency $currency = null)\n    {\n        $currency   = $currency ?? app('amount')->getDefaultCurrency();\n        $collection = $this->abRepository->get($start, $end);\n        $filtered   = $collection->filter(\n            static function (AvailableBudget $budget) use ($currency) {\n                return $currency->id === $budget->transaction_currency_id;\n            }\n        );\n        if ($filtered->count() > 0) {\n            /** @var AvailableBudget $first */\n            $first = $filtered->first();\n\n            return redirect(route('available-budgets.edit', [$first->id]));\n        }\n        $page = (int)($request->get('page') ?? 1);\n\n        return prefixView('budgets.available-budgets.create', compact('start', 'end', 'page', 'currency'));\n    }\n\n    /**\n     * createAlternative will show a list of enabled currencies so the user can pick one.\n     *\n     * @param Request $request\n     * @param Carbon  $start\n     * @param Carbon  $end\n     *\n     * @return Factory|View\n     */\n    public function createAlternative(Request $request, Carbon $start, Carbon $end)\n    {\n        $currencies       = $this->currencyRepos->get();\n        $availableBudgets = $this->abRepository->get($start, $end);\n\n        // remove already budgeted currencies:\n        $currencies = $currencies->filter(\n            static function (TransactionCurrency $currency) use ($availableBudgets) {\n                /** @var AvailableBudget $budget */\n                foreach ($availableBudgets as $budget) {\n                    if ($budget->transaction_currency_id === $currency->id) {\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        );\n        $page       = (int)($request->get('page') ?? 1);\n\n        return prefixView('budgets.available-budgets.create-alternative', compact('start', 'end', 'page', 'currencies'));\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function delete(Request $request)\n    {\n        $id = (int)$request->get('id');\n        if (0 !== $id) {\n            $availableBudget = $this->abRepository->findById($id);\n            if (null !== $availableBudget) {\n                $this->abRepository->destroyAvailableBudget($availableBudget);\n                session()->flash('success', trans('firefly.deleted_ab'));\n            }\n        }\n\n        return redirect(route('budgets.index'));\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     *\n     * @param Carbon          $start\n     * @param Carbon          $end\n     *\n     * @return Factory|View\n     */\n    public function edit(AvailableBudget $availableBudget, Carbon $start, Carbon $end)\n    {\n        $availableBudget->amount = number_format((float)$availableBudget->amount, $availableBudget->transactionCurrency->decimal_places, '.', '');\n\n        return prefixView('budgets.available-budgets.edit', compact('availableBudget', 'start', 'end'));\n    }\n\n    /**\n     * @param Request $request\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function store(Request $request)\n    {\n        // make dates.\n        try {\n            $start = Carbon::createFromFormat('Y-m-d', $request->get('start'));\n            $end   = Carbon::createFromFormat('Y-m-d', $request->get('end'));\n        } catch (InvalidDateException $e) {\n            $start = session()->get('start');\n            $end   = session()->get('end');\n            Log::info($e->getMessage());\n        }\n\n        // validate amount\n        $amount = (string)$request->get('amount');\n        if ('' === $amount) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        if (bccomp($amount, '0') <= 0) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n\n        // find currency\n        $currency = $this->currencyRepos->find((int)$request->get('currency_id'));\n        if (null === $currency) {\n            session()->flash('error', trans('firefly.invalid_currency'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        $start->startOfDay();\n        $end->endOfDay();\n        // find existing AB\n        $existing = $this->abRepository->find($currency, $start, $end);\n        if (null === $existing) {\n            $this->abRepository->store(\n                [\n                    'amount'      => $amount,\n                    'currency_id' => $currency->id,\n                    'start'       => $start,\n                    'end'         => $end,\n                ]\n            );\n        }\n        if (null !== $existing) {\n            // update amount:\n            $this->abRepository->update($existing, ['amount' => $amount]);\n        }\n        session()->flash('success', trans('firefly.set_ab'));\n\n        return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n    }\n\n    /**\n     * @param Request         $request\n     * @param AvailableBudget $availableBudget\n     *\n     * @param Carbon          $start\n     * @param Carbon          $end\n     *\n     * @return RedirectResponse|Redirector\n     */\n    public function update(Request $request, AvailableBudget $availableBudget, Carbon $start, Carbon $end)\n    {\n        // validate amount\n        $amount = (string)$request->get('amount');\n        if ('' === $amount) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        if (bccomp($amount, '0') <= 0) {\n            session()->flash('error', trans('firefly.invalid_amount'));\n\n            return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n        }\n        $this->abRepository->update($availableBudget, ['amount' => $amount]);\n        session()->flash('success', trans('firefly.updated_ab'));\n\n        return redirect(route('budgets.index', [$start->format('Y-m-d'), $end->format('Y-m-d')]));\n    }\n}\n", "<?php\n/**\n * AvailableBudgetRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\n\nuse Carbon\\Carbon;\nuse Exception;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n *\n * Class AvailableBudgetRepository\n */\nclass AvailableBudgetRepository implements AvailableBudgetRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * Delete all available budgets.\n     */\n    public function destroyAll(): void\n    {\n        $this->user->availableBudgets()->delete();\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     */\n    public function destroyAvailableBudget(AvailableBudget $availableBudget): void\n    {\n        try {\n            $availableBudget->delete();\n        } catch (Exception $e) { // @phpstan-ignore-line\n            // @ignoreException\n        }\n    }\n\n    /**\n     * Find existing AB.\n     *\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return AvailableBudget|null\n     */\n    public function find(TransactionCurrency $currency, Carbon $start, Carbon $end): ?AvailableBudget\n    {\n        return $this->user->availableBudgets()\n                          ->where('transaction_currency_id', $currency->id)\n                          ->where('start_date', $start->format('Y-m-d'))\n                          ->where('end_date', $end->format('Y-m-d'))\n                          ->first();\n\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function findById(int $id): ?AvailableBudget\n    {\n        return $this->user->availableBudgets->find($id);\n    }\n\n    /**\n     * Return a list of all available budgets (in all currencies) (for the selected period).\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function get(?Carbon $start = null, ?Carbon $end = null): Collection\n    {\n        $query = $this->user->availableBudgets()->with(['transactionCurrency']);\n        if (null !== $start && null !== $end) {\n            $query->where(\n                static function (Builder $q1) use ($start, $end) {\n                    $q1->where('start_date', '=', $start->format('Y-m-d'));\n                    $q1->where('end_date', '=', $end->format('Y-m-d'));\n                }\n            );\n        }\n\n        return $query->get(['available_budgets.*']);\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return string\n     */\n    public function getAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end): string\n    {\n        $amount          = '0';\n        $availableBudget = $this->user->availableBudgets()\n                                      ->where('transaction_currency_id', $currency->id)\n                                      ->where('start_date', $start->format('Y-m-d'))\n                                      ->where('end_date', $end->format('Y-m-d'))->first();\n        if (null !== $availableBudget) {\n            $amount = (string)$availableBudget->amount;\n        }\n\n        return $amount;\n    }\n\n    /**\n     * @param Carbon $start\n     * @param Carbon $end\n     *\n     * @return array\n     */\n    public function getAvailableBudgetWithCurrency(Carbon $start, Carbon $end): array\n    {\n        $return           = [];\n        $availableBudgets = $this->user->availableBudgets()\n                                       ->where('start_date', $start->format('Y-m-d'))\n                                       ->where('end_date', $end->format('Y-m-d'))->get();\n        /** @var AvailableBudget $availableBudget */\n        foreach ($availableBudgets as $availableBudget) {\n            $return[$availableBudget->transaction_currency_id] = $availableBudget->amount;\n        }\n\n        return $return;\n    }\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param TransactionCurrency $currency\n     *\n     * @return Collection\n     */\n    public function getAvailableBudgetsByCurrency(TransactionCurrency $currency): Collection\n    {\n        return $this->user->availableBudgets()->where('transaction_currency_id', $currency->id)->get();\n    }\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     *\n     */\n    public function getAvailableBudgetsByDate(?Carbon $start, ?Carbon $end): Collection\n    {\n        $query = $this->user->availableBudgets();\n\n        if (null !== $start) {\n            $query->where('start_date', '>=', $start->format('Y-m-d'));\n        }\n        if (null !== $end) {\n            $query->where('end_date', '<=', $end->format('Y-m-d'));\n        }\n\n        return $query->get();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    public function getByCurrencyDate(Carbon $start, Carbon $end, TransactionCurrency $currency): ?AvailableBudget\n    {\n        return $this->user\n            ->availableBudgets()\n            ->where('transaction_currency_id', $currency->id)\n            ->where('start_date', $start->format('Y-m-d'))\n            ->where('end_date', $end->format('Y-m-d'))->first();\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param string              $amount\n     *\n     * @return AvailableBudget\n     * @deprecated\n     */\n    public function setAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end, string $amount): AvailableBudget\n    {\n        $availableBudget = $this->user->availableBudgets()\n                                      ->where('transaction_currency_id', $currency->id)\n                                      ->where('start_date', $start->format('Y-m-d'))\n                                      ->where('end_date', $end->format('Y-m-d'))->first();\n        if (null === $availableBudget) {\n            $availableBudget = new AvailableBudget;\n            $availableBudget->user()->associate($this->user);\n            $availableBudget->transactionCurrency()->associate($currency);\n            $availableBudget->start_date = $start->format('Y-m-d');\n            $availableBudget->end_date   = $end->format('Y-m-d');\n        }\n        $availableBudget->amount = $amount;\n        $availableBudget->save();\n\n        return $availableBudget;\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return AvailableBudget|null\n     */\n    public function store(array $data): ?AvailableBudget\n    {\n        $start = $data['start'];\n        if ($start instanceof Carbon) {\n            $start = $data['start']->startOfDay();\n        }\n        $end = $data['end'];\n        if ($end instanceof Carbon) {\n            $end = $data['end']->endOfDay();\n        }\n\n        return AvailableBudget::create(\n            [\n                'user_id'                 => $this->user->id,\n                'transaction_currency_id' => $data['currency_id'],\n                'amount'                  => $data['amount'],\n                'start_date'              => $start,\n                'end_date'                => $end,\n\n            ]\n        );\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function update(AvailableBudget $availableBudget, array $data): AvailableBudget\n    {\n        if (array_key_exists('amount', $data)) {\n            $availableBudget->amount = $data['amount'];\n        }\n        $availableBudget->save();\n\n        return $availableBudget;\n    }\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function updateAvailableBudget(AvailableBudget $availableBudget, array $data): AvailableBudget\n    {\n        if (array_key_exists('start', $data)) {\n            $start = $data['start'];\n            if ($start instanceof Carbon) {\n                $start                       = $data['start']->startOfDay();\n                $availableBudget->start_date = $start;\n                $availableBudget->save();\n            }\n        }\n\n        if (array_key_exists('end', $data)) {\n            $end = $data['end'];\n            if ($end instanceof Carbon) {\n                $end                       = $data['end']->endOfDay();\n                $availableBudget->end_date = $end;\n                $availableBudget->save();\n            }\n        }\n        if (array_key_exists('currency_id', $data)) {\n            $availableBudget->transaction_currency_id = $data['currency_id'];\n            $availableBudget->save();\n        }\n        if (array_key_exists('amount', $data)) {\n            $availableBudget->amount = $data['amount'];\n            $availableBudget->save();\n        }\n\n        return $availableBudget;\n\n    }\n}\n", "<?php\n/**\n * AvailableBudgetRepositoryInterface.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\n\nuse Carbon\\Carbon;\nuse FireflyIII\\Models\\AvailableBudget;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Support\\Collection;\n\n/**\n * Interface AvailableBudgetRepositoryInterface\n */\ninterface AvailableBudgetRepositoryInterface\n{\n\n    /**\n     * Delete all available budgets.\n     */\n    public function destroyAll(): void;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     */\n    public function destroyAvailableBudget(AvailableBudget $availableBudget): void;\n\n    /**\n     * Find existing AB.\n     *\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return AvailableBudget|null\n     */\n    public function find(TransactionCurrency $currency, Carbon $start, Carbon $end): ?AvailableBudget;\n\n    /**\n     * @param int $id\n     *\n     * @return AvailableBudget|null\n     */\n    public function findById(int $id): ?AvailableBudget;\n\n    /**\n     * Return a list of all available budgets (in all currencies) (for the selected period).\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function get(?Carbon $start = null, ?Carbon $end = null): Collection;\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return string\n     * @deprecated\n     */\n    public function getAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end): string;\n\n    /**\n     * @param Carbon $start\n     * @param Carbon $end\n     *\n     * @return array\n     */\n    public function getAvailableBudgetWithCurrency(Carbon $start, Carbon $end): array;\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param TransactionCurrency $currency\n     *\n     * @return Collection\n     */\n    public function getAvailableBudgetsByCurrency(TransactionCurrency $currency): Collection;\n\n    /**\n     * Returns all available budget objects.\n     *\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     *\n     */\n    public function getAvailableBudgetsByDate(?Carbon $start, ?Carbon $end): Collection;\n\n    /**\n     * Get by transaction currency and date. Should always result in one entry or NULL.\n     *\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param TransactionCurrency $currency\n     *\n     * @return null|AvailableBudget\n     */\n    public function getByCurrencyDate(Carbon $start, Carbon $end, TransactionCurrency $currency): ?AvailableBudget;\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param string              $amount\n     *\n     * @return AvailableBudget\n     * @deprecated\n     */\n    public function setAvailableBudget(TransactionCurrency $currency, Carbon $start, Carbon $end, string $amount): AvailableBudget;\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void;\n\n    /**\n     * @param array $data\n     *\n     * @return AvailableBudget|null\n     */\n    public function store(array $data): ?AvailableBudget;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function update(AvailableBudget $availableBudget, array $data): AvailableBudget;\n\n    /**\n     * @param AvailableBudget $availableBudget\n     * @param array           $data\n     *\n     * @return AvailableBudget\n     */\n    public function updateAvailableBudget(AvailableBudget $availableBudget, array $data): AvailableBudget;\n\n}\n", "<?php\n/**\n * BudgetLimitRepository.php\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Repositories\\Budget;\n\nuse Carbon\\Carbon;\nuse Exception;\nuse FireflyIII\\Exceptions\\FireflyException;\nuse FireflyIII\\Factory\\TransactionCurrencyFactory;\nuse FireflyIII\\Models\\Budget;\nuse FireflyIII\\Models\\BudgetLimit;\nuse FireflyIII\\Models\\TransactionCurrency;\nuse FireflyIII\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Collection;\nuse Log;\n\n/**\n *\n * Class BudgetLimitRepository\n */\nclass BudgetLimitRepository implements BudgetLimitRepositoryInterface\n{\n    private User $user;\n\n    /**\n     * Tells you which amount has been budgeted (for the given budgets)\n     * in the selected query. Returns a positive amount as a string.\n     *\n     * @param Carbon              $start\n     * @param Carbon              $end\n     * @param TransactionCurrency $currency\n     * @param Collection|null     $budgets\n     *\n     * @return string\n     */\n    public function budgeted(Carbon $start, Carbon $end, TransactionCurrency $currency, ?Collection $budgets = null): string\n    {\n        $query = BudgetLimit\n            ::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n\n            // same complex where query as below.\n            ->where(\n                static function (Builder $q5) use ($start, $end) {\n                    $q5->where(\n                        static function (Builder $q1) use ($start, $end) {\n                            $q1->where(\n                                static function (Builder $q2) use ($start, $end) {\n                                    $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d'));\n                                    $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d'));\n                                }\n                            )\n                               ->orWhere(\n                                   static function (Builder $q3) use ($start, $end) {\n                                       $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d'));\n                                       $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d'));\n                                   }\n                               );\n                        }\n                    )\n                       ->orWhere(\n                           static function (Builder $q4) use ($start, $end) {\n                               // or start is before start AND end is after end.\n                               $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d'));\n                               $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d'));\n                           }\n                       );\n                }\n            )\n            ->where('budget_limits.transaction_currency_id', $currency->id)\n            ->whereNull('budgets.deleted_at')\n            ->where('budgets.active', true)\n            ->where('budgets.user_id', $this->user->id);\n        if (null !== $budgets && $budgets->count() > 0) {\n            $query->whereIn('budget_limits.budget_id', $budgets->pluck('id')->toArray());\n        }\n\n        $set    = $query->get(['budget_limits.*']);\n        $result = '0';\n        /** @var BudgetLimit $budgetLimit */\n        foreach ($set as $budgetLimit) {\n            $result = bcadd($budgetLimit->amount, $result);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Destroy all budget limits.\n     */\n    public function destroyAll(): void\n    {\n        $budgets = $this->user->budgets()->get();\n        /** @var Budget $budget */\n        foreach ($budgets as $budget) {\n            $budget->budgetlimits()->delete();\n        }\n    }\n\n    /**\n     * Destroy a budget limit.\n     *\n     * @param BudgetLimit $budgetLimit\n     */\n    public function destroyBudgetLimit(BudgetLimit $budgetLimit): void\n    {\n        try {\n            $budgetLimit->delete();\n        } catch (Exception $e) { // @phpstan-ignore-line\n            // @ignoreException\n        }\n    }\n\n    /**\n     * @param Budget              $budget\n     * @param TransactionCurrency $currency\n     * @param Carbon              $start\n     * @param Carbon              $end\n     *\n     * @return BudgetLimit|null\n     */\n    public function find(Budget $budget, TransactionCurrency $currency, Carbon $start, Carbon $end): ?BudgetLimit\n    {\n        return $budget->budgetlimits()\n                      ->where('transaction_currency_id', $currency->id)\n                      ->where('start_date', $start->format('Y-m-d'))\n                      ->where('end_date', $end->format('Y-m-d'))->first();\n    }\n\n    /**\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function getAllBudgetLimits(Carbon $start = null, Carbon $end = null): Collection\n    {\n        // both are NULL:\n        if (null === $start && null === $end) {\n            return BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                              ->with(['budget'])\n                              ->where('budgets.user_id', $this->user->id)\n                              ->whereNull('budgets.deleted_at')\n                              ->get(['budget_limits.*']);\n        }\n        // one of the two is NULL.\n        if (null === $start xor null === $end) {\n            $query = BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                                ->with(['budget'])\n                                ->whereNull('budgets.deleted_at')\n                                ->where('budgets.user_id', $this->user->id);\n            if (null !== $end) {\n                // end date must be before $end.\n                $query->where('end_date', '<=', $end->format('Y-m-d 00:00:00'));\n            }\n            if (null !== $start) {\n                // start date must be after $start.\n                $query->where('start_date', '>=', $start->format('Y-m-d 00:00:00'));\n            }\n\n            return $query->get(['budget_limits.*']);\n        }\n\n        // neither are NULL:\n        return BudgetLimit::leftJoin('budgets', 'budgets.id', '=', 'budget_limits.budget_id')\n                          ->with(['budget'])\n                          ->where('budgets.user_id', $this->user->id)\n                          ->whereNull('budgets.deleted_at')\n                          ->where(\n                              static function (Builder $q5) use ($start, $end) {\n                                  $q5->where(\n                                      static function (Builder $q1) use ($start, $end) {\n                                          $q1->where(\n                                              static function (Builder $q2) use ($start, $end) {\n                                                  $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d'));\n                                                  $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d'));\n                                              }\n                                          )\n                                             ->orWhere(\n                                                 static function (Builder $q3) use ($start, $end) {\n                                                     $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d'));\n                                                     $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d'));\n                                                 }\n                                             );\n                                      }\n                                  )\n                                     ->orWhere(\n                                         static function (Builder $q4) use ($start, $end) {\n                                             // or start is before start AND end is after end.\n                                             $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d'));\n                                             $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d'));\n                                         }\n                                     );\n                              }\n                          )->get(['budget_limits.*']);\n    }\n\n    /**\n     * @param TransactionCurrency $currency\n     * @param Carbon|null         $start\n     * @param Carbon|null         $end\n     *\n     * @return Collection\n     */\n    public function getAllBudgetLimitsByCurrency(TransactionCurrency $currency, Carbon $start = null, Carbon $end = null): Collection\n    {\n        return $this->getAllBudgetLimits($start, $end)->filter(\n            static function (BudgetLimit $budgetLimit) use ($currency) {\n                return $budgetLimit->transaction_currency_id === $currency->id;\n            }\n        );\n    }\n\n    /**\n     * @param Budget      $budget\n     * @param Carbon|null $start\n     * @param Carbon|null $end\n     *\n     * @return Collection\n     */\n    public function getBudgetLimits(Budget $budget, Carbon $start = null, Carbon $end = null): Collection\n    {\n        if (null === $end && null === $start) {\n            return $budget->budgetlimits()->with(['transactionCurrency'])->orderBy('budget_limits.start_date', 'DESC')->get(['budget_limits.*']);\n        }\n        if (null === $end xor null === $start) {\n            $query = $budget->budgetlimits()->with(['transactionCurrency'])->orderBy('budget_limits.start_date', 'DESC');\n            // one of the two is null\n            if (null !== $end) {\n                // end date must be before $end.\n                $query->where('end_date', '<=', $end->format('Y-m-d 00:00:00'));\n            }\n            if (null !== $start) {\n                // start date must be after $start.\n                $query->where('start_date', '>=', $start->format('Y-m-d 00:00:00'));\n            }\n\n            return $query->get(['budget_limits.*']);\n        }\n\n        // when both dates are set:\n        return $budget->budgetlimits()\n                      ->where(\n                          static function (Builder $q5) use ($start, $end) {\n                              $q5->where(\n                                  static function (Builder $q1) use ($start, $end) {\n                                      // budget limit ends within period\n                                      $q1->where(\n                                          static function (Builder $q2) use ($start, $end) {\n                                              $q2->where('budget_limits.end_date', '>=', $start->format('Y-m-d 00:00:00'));\n                                              $q2->where('budget_limits.end_date', '<=', $end->format('Y-m-d 23:59:59'));\n                                          }\n                                      )\n                                          // budget limit start within period\n                                         ->orWhere(\n                                              static function (Builder $q3) use ($start, $end) {\n                                                  $q3->where('budget_limits.start_date', '>=', $start->format('Y-m-d 00:00:00'));\n                                                  $q3->where('budget_limits.start_date', '<=', $end->format('Y-m-d 23:59:59'));\n                                              }\n                                          );\n                                  }\n                              )\n                                 ->orWhere(\n                                     static function (Builder $q4) use ($start, $end) {\n                                         // or start is before start AND end is after end.\n                                         $q4->where('budget_limits.start_date', '<=', $start->format('Y-m-d 23:59:59'));\n                                         $q4->where('budget_limits.end_date', '>=', $end->format('Y-m-d 00:00:00'));\n                                     }\n                                 );\n                          }\n                      )->orderBy('budget_limits.start_date', 'DESC')->get(['budget_limits.*']);\n    }\n\n    /**\n     * @param User $user\n     */\n    public function setUser(User $user): void\n    {\n        $this->user = $user;\n    }\n\n    /**\n     * @param array $data\n     *\n     * @return BudgetLimit\n     * @throws FireflyException\n     */\n    public function store(array $data): BudgetLimit\n    {\n        // if no currency has been provided, use the user's default currency:\n        /** @var TransactionCurrencyFactory $factory */\n        $factory  = app(TransactionCurrencyFactory::class);\n        $currency = $factory->find($data['currency_id'] ?? null, $data['currency_code'] ?? null);\n        if (null === $currency) {\n            $currency = app('amount')->getDefaultCurrencyByUser($this->user);\n        }\n        $currency->enabled = true;\n        $currency->save();\n\n        // find the budget:\n        $budget = $this->user->budgets()->find((int)$data['budget_id']);\n        if (null === $budget) {\n            throw new FireflyException('200004: Budget does not exist.');\n        }\n\n        // find limit with same date range and currency.\n        $limit = $budget->budgetlimits()\n                        ->where('budget_limits.start_date', $data['start_date']->format('Y-m-d'))\n                        ->where('budget_limits.end_date', $data['end_date']->format('Y-m-d'))\n                        ->where('budget_limits.transaction_currency_id', $currency->id)\n                        ->first(['budget_limits.*']);\n        if (null !== $limit) {\n            throw new FireflyException('200027: Budget limit already exists.');\n        }\n        Log::debug('No existing budget limit, create a new one');\n\n        // or create one and return it.\n        $limit = new BudgetLimit;\n        $limit->budget()->associate($budget);\n        $limit->start_date              = $data['start_date']->format('Y-m-d');\n        $limit->end_date                = $data['end_date']->format('Y-m-d');\n        $limit->amount                  = $data['amount'];\n        $limit->transaction_currency_id = $currency->id;\n        $limit->save();\n        Log::debug(sprintf('Created new budget limit with ID #%d and amount %s', $limit->id, $data['amount']));\n\n        return $limit;\n    }\n\n    /**\n     * @param BudgetLimit $budgetLimit\n     * @param array       $data\n     *\n     * @return BudgetLimit\n     */\n    public function update(BudgetLimit $budgetLimit, array $data): BudgetLimit\n    {\n        $budgetLimit->amount     = array_key_exists('amount', $data) ? $data['amount'] : $budgetLimit->amount;\n        $budgetLimit->budget_id  = array_key_exists('budget_id', $data) ? $data['budget_id'] : $budgetLimit->budget_id;\n        $budgetLimit->start_date = array_key_exists('start', $data) ? $data['start']->format('Y-m-d 00:00:00') : $budgetLimit->start_date;\n        $budgetLimit->end_date   = array_key_exists('end', $data) ? $data['end']->format('Y-m-d 23:59:59') : $budgetLimit->end_date;\n\n        // if no currency has been provided, use the user's default currency:\n        $currency = null;\n\n        // update if relevant:\n        if (array_key_exists('currency_id', $data) || array_key_exists('currency_code', $data)) {\n            /** @var TransactionCurrencyFactory $factory */\n            $factory  = app(TransactionCurrencyFactory::class);\n            $currency = $factory->find($data['currency_id'] ?? null, $data['currency_code'] ?? null);\n        }\n        // catch unexpected null:\n        if (null === $currency) {\n            $currency = $budgetLimit->transactionCurrency ?? app('amount')->getDefaultCurrencyByUser($this->user);\n        }\n        $currency->enabled = true;\n        $currency->save();\n\n        $budgetLimit->transaction_currency_id = $currency->id;\n        $budgetLimit->save();\n\n        return $budgetLimit;\n    }\n\n    /**\n     * @param Budget $budget\n     * @param Carbon $start\n     * @param Carbon $end\n     * @param string $amount\n     *\n     * @return BudgetLimit|null\n     *\n     */\n    public function updateLimitAmount(Budget $budget, Carbon $start, Carbon $end, string $amount): ?BudgetLimit\n    {\n        // count the limits:\n        $limits = $budget->budgetlimits()\n                         ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                         ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                         ->count(['budget_limits.*']);\n        Log::debug(sprintf('Found %d budget limits.', $limits));\n\n        // there might be a budget limit for these dates:\n        /** @var BudgetLimit $limit */\n        $limit = $budget->budgetlimits()\n                        ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                        ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                        ->first(['budget_limits.*']);\n\n        // if more than 1 limit found, delete the others:\n        if ($limits > 1 && null !== $limit) {\n            Log::debug(sprintf('Found more than 1, delete all except #%d', $limit->id));\n            $budget->budgetlimits()\n                   ->where('budget_limits.start_date', $start->format('Y-m-d 00:00:00'))\n                   ->where('budget_limits.end_date', $end->format('Y-m-d 00:00:00'))\n                   ->where('budget_limits.id', '!=', $limit->id)->delete();\n        }\n\n        // delete if amount is zero.\n        // Returns 0 if the two operands are equal,\n        // 1 if the left_operand is larger than the right_operand, -1 otherwise.\n        if (null !== $limit && bccomp($amount, '0') <= 0) {\n            Log::debug(sprintf('%s is zero, delete budget limit #%d', $amount, $limit->id));\n            try {\n                $limit->delete();\n            } catch (Exception $e) { // @phpstan-ignore-line\n                // @ignoreException\n            }\n\n            return null;\n        }\n        // update if exists:\n        if (null !== $limit) {\n            Log::debug(sprintf('Existing budget limit is #%d, update this to amount %s', $limit->id, $amount));\n            $limit->amount = $amount;\n            $limit->save();\n\n            return $limit;\n        }\n        Log::debug('No existing budget limit, create a new one');\n        // or create one and return it.\n        $limit = new BudgetLimit;\n        $limit->budget()->associate($budget);\n        $limit->start_date = $start->startOfDay();\n        $limit->end_date   = $end->startOfDay();\n        $limit->amount     = $amount;\n        $limit->save();\n        Log::debug(sprintf('Created new budget limit with ID #%d and amount %s', $limit->id, $amount));\n\n        return $limit;\n    }\n}\n", "/*\n * index.js\n * Copyright (c) 2019 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\n */\n$(function () {\n    \"use strict\";\n    /*\n     On start, fill the \"spent\"-bar using the content from the page.\n     */\n    drawSpentBars();\n    drawBudgetedBars();\n\n    $('.update_ab').on('click', updateAvailableBudget);\n    $('.delete_ab').on('click', deleteAvailableBudget);\n    $('.create_ab_alt').on('click', createAltAvailableBudget);\n\n    $('.budget_amount').on('change', updateBudgetedAmount);\n    $('.create_bl').on('click', createBudgetLimit);\n    $('.delete_bl').on('click', deleteBudgetLimit);\n\n\n    /*\n     When the input changes, update the percentages for the budgeted bar:\n     */\n    $('.selectPeriod').change(function (e) {\n        var selected = $(e.currentTarget);\n        if (selected.find(\":selected\").val() !== \"x\") {\n            var newUri = budgetIndexUri.replace(\"START\", selected.find(\":selected\").data('start')).replace('END', selected.find(\":selected\").data('end'));\n            window.location.assign(newUri);\n        }\n    });\n\n    // sortable!\n    if (typeof $(\".sortable-table tbody\").sortable !== \"undefined\") {\n        $(\".sortable-table tbody\").sortable(\n            {\n                helper: fixHelper,\n                items: 'tr:not(.ignore)',\n                stop: sortStop,\n                handle: '.handle',\n                start: function (event, ui) {\n                    // Build a placeholder cell that spans all the cells in the row\n                    var cellCount = 0;\n                    $('td, th', ui.helper).each(function () {\n                        // For each TD or TH try and get it's colspan attribute, and add that or 1 to the total\n                        var colspan = 1;\n                        var colspanAttr = $(this).attr('colspan');\n                        if (colspanAttr > 1) {\n                            colspan = colspanAttr;\n                        }\n                        cellCount += colspan;\n                    });\n\n                    // Add the placeholder UI - note that this is the item's content, so TD rather than TR\n                    ui.placeholder.html('<td colspan=\"' + cellCount + '\">&nbsp;</td>');\n                }\n            }\n        );\n    }\n});\n\nfunction updateBudgetedAmount(e) {\n    var input = $(e.currentTarget);\n    var budgetId = parseInt(input.data('id'));\n    var budgetLimitId = parseInt(input.data('limit'));\n    var currencyId = parseInt(input.data('currency'));\n    input.prop('disabled', true);\n    if (0 === budgetLimitId) {\n        $.post(storeBudgetLimitUri, {\n            _token: token,\n            budget_id: budgetId,\n            transaction_currency_id: currencyId,\n            amount: input.val(),\n            start: periodStart,\n            end: periodEnd\n        }).done(function (data) {\n\n            input.prop('disabled', false);\n\n            // update amount left.\n            $('.left_span[data-limit=\"0\"][data-id=\"' + budgetId + '\"]').html(data.left_formatted);\n            if (data.left_per_day > 0) {\n                $('.left_span[data-limit=\"0\"][data-id=\"' + budgetId + '\"]').html(data.left_formatted + '(' + data.left_per_day_formatted + ')');\n            }\n            // update budgeted amount\n            updateTotalBudgetedAmount(data.transaction_currency_id);\n\n        }).fail(function () {\n            console.error('I failed :(');\n        });\n    } else {\n        $.post(updateBudgetLimitUri.replace('REPLACEME', budgetLimitId.toString()), {\n            _token: token,\n            amount: input.val(),\n        }).done(function (data) {\n            input.prop('disabled', false);\n            $('.left_span[data-limit=\"' + budgetLimitId + '\"]').html(data.left_formatted);\n            if (data.left_per_day > 0) {\n                $('.left_span[data-limit=\"' + budgetLimitId + '\"]').html(data.left_formatted + '(' + data.left_per_day_formatted + ')');\n            }\n            updateTotalBudgetedAmount(data.transaction_currency_id);\n            // update budgeted amount\n\n        }).fail(function () {\n            console.error('I failed :(');\n        });\n    }\n}\n\nfunction updateTotalBudgetedAmount(currencyId) {\n    // fade info away:\n    $('span.budgeted_amount[data-currency=\"' + currencyId + '\"]')\n        .fadeTo(100, 0.1, function () {\n            //$(this).fadeTo(500, 1.0);\n        });\n\n    // get new amount:\n    $.get(totalBudgetedUri.replace('REPLACEME', currencyId)).done(function (data) {\n        // set thing:\n        $('span.budgeted_amount[data-currency=\"' + currencyId + '\"]')\n            .html(data.budgeted_formatted)\n            // fade back:\n            .fadeTo(300, 1.0);\n\n        // set bar:\n        var pct = parseFloat(data.percentage);\n        if (pct <= 100) {\n            console.log('<100 (' + pct + ')');\n            console.log($('div.budgeted_bar[data-currency=\"' + currencyId + '\"]'));\n            // red bar to 0\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-danger').width('0%');\n            // orange to 0:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-warning').width('0%');\n            // blue to the rest:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-info').width(pct + '%');\n        } else {\n            var newPct = (100 / pct) * 100;\n            // red bar to new pct\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-danger').width(newPct + '%');\n            // orange to the rest:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-warning').width((100 - newPct) + '%');\n            // blue to 0:\n            $('div.budgeted_bar[data-currency=\"' + currencyId + '\"] div.progress-bar-info').width('0%');\n        }\n\n\n    });\n}\n\nvar fixHelper = function (e, tr) {\n    \"use strict\";\n    var $originals = tr.children();\n    var $helper = tr.clone();\n    $helper.children().each(function (index) {\n        // Set helper cell sizes to match the original sizes\n        $(this).width($originals.eq(index).width());\n    });\n    return $helper;\n};\n\n\nfunction sortStop(event, ui) {\n    \"use strict\";\n\n    //var current = $(ui.item);\n    var list = $('.sortable-table tbody tr');\n    var submit = [];\n    $.each(list, function (i, v) {\n        var row = $(v);\n        var id = parseInt(row.data('id'));\n        if (id > 0) {\n            submit.push(id);\n        }\n    });\n    var arr = {\n        budgetIds: submit,\n        _token: token\n    };\n    $.post('budgets/reorder', arr);\n}\n\nfunction createBudgetLimit(e) {\n    var button = $(e.currentTarget);\n    var budgetId = button.data('id');\n    $('#defaultModal').empty().load(createBudgetLimitUri.replace('REPLACEME', budgetId.toString()), function () {\n        $('#defaultModal').modal('show');\n    });\n    return false;\n}\n\nfunction deleteBudgetLimit(e) {\n    e.preventDefault();\n    var button = $(e.currentTarget);\n    var budgetLimitId = button.data('budget-limit-id');\n    var url = deleteBudgetLimitUrl.replace('REPLACEME', budgetLimitId.toString());\n    $.post(url, {_token: token}).then(function () {\n        $('.bl_entry[data-budget-limit-id=\"' + budgetLimitId + '\"]').remove();\n        \n    });\n    return false;\n}\n\nfunction createAltAvailableBudget(e) {\n    $('#defaultModal').empty().load(createAltAvailableBudgetUri, function () {\n        $('#defaultModal').modal('show');\n    });\n    return false;\n}\n\nfunction updateAvailableBudget(e) {\n    var button = $(e.currentTarget);\n    var abId = parseInt(button.data('id'));\n    if (0 === abId) {\n        $('#defaultModal').empty().load(createAvailableBudgetUri, function () {\n            $('#defaultModal').modal('show');\n        });\n    }\n    if (abId > 0) {\n        // edit URL.\n        $('#defaultModal').empty().load(editAvailableBudgetUri.replace('REPLACEME', abId), function () {\n            $('#defaultModal').modal('show');\n        });\n    }\n    return false;\n}\nfunction deleteAvailableBudget(e) {\n    //\n    e.preventDefault();\n    var button = $(e.currentTarget);\n    var abId = button.data('id');\n    $.post(deleteABUrl, {_token: token, id: abId}).then(function () {\n        // lame but it works.\n        location.reload();\n    });\n    return false;\n}\n\nfunction drawBudgetedBars() {\n    \"use strict\";\n    $.each($('.budgeted_bar'), function (i, v) {\n        var bar = $(v);\n        var budgeted = parseFloat(bar.data('budgeted'));\n        var available = parseFloat(bar.data('available'));\n        var budgetedTooMuch = budgeted > available;\n        var pct;\n        if (budgetedTooMuch) {\n            // budgeted too much.\n            pct = (available / budgeted) * 100;\n            bar.find('.progress-bar-danger').css('width', pct + '%');\n            bar.find('.progress-bar-warning').css('width', (100 - pct) + '%');\n            bar.find('.progress-bar-info').css('width', 0);\n        } else {\n            pct = (budgeted / available) * 100;\n            bar.find('.progress-bar-danger').css('width', 0);\n            bar.find('.progress-bar-warning').css('width', 0);\n            bar.find('.progress-bar-info').css('width', pct + '%');\n        }\n        //$('#budgetedAmount').html(currencySymbol + ' ' + budgeted.toFixed(2));\n    });\n}\n\nfunction drawSpentBars() {\n    \"use strict\";\n    $.each($('.spent_bar'), function (i, v) {\n        var bar = $(v);\n        var spent = parseFloat(bar.data('spent')) * -1;\n        var budgeted = parseFloat(bar.data('budgeted'));\n        var overspent = spent > budgeted;\n        var pct;\n\n        if (overspent) {\n            // draw overspent bar\n            pct = (budgeted / spent) * 100;\n            bar.find('.progress-bar-warning').css('width', pct + '%');\n            bar.find('.progress-bar-danger').css('width', (100 - pct) + '%');\n        } else {\n            // draw normal bar:\n            pct = (spent / budgeted) * 100;\n            bar.find('.progress-bar-info').css('width', pct + '%');\n        }\n    });\n}\n", "{% extends './v1/layout/default' %}\n\n{% block breadcrumbs %}\n    {{ Breadcrumbs.render(Route.getCurrentRoute.getName) }}\n{% endblock %}\n\n{% block content %}\n    <!-- date selector -->\n    <div class=\"row\">\n        <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n            <div class=\"box\">\n                <div class=\"box-header with-border\">\n                    <h3 class=\"box-title\">{{ 'budget_period_navigator'|_ }}</h3>\n                </div>\n                <div class=\"box-body\">\n                    <div class=\"row\" id=\"periodNavigator\">\n                        <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12\">\n                            <select class=\"form-control selectPeriod\" name=\"previous\">\n                                <option label=\"{{ 'select_date'|_ }}\" value=\"x\">{{ 'select_date'|_ }}</option>\n                                {% for array in prevLoop %}\n                                    <option label=\"{{ array.title }}\" value=\"{{ array.label }}\" data-start=\"{{ array.start.format('Y-m-d') }}\"\n                                            data-end=\"{{ array.end.format('Y-m-d') }}\">{{ array.title }}</option>\n                                {% endfor %}\n                            </select>\n                        </div>\n                        <div class=\"col-lg-8 col-md-4 col-sm-12 col-xs-12 text-center\">\n                            <div class=\"btn btn-group btn-group-lg\" style=\"padding-top:0;\">\n                                <a href=\"{{ route('budgets.index', [prevLoop[0].start.format('Y-m-d'), prevLoop[0].end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\" title=\"{{ prevLoop[0].title }}\">&larr;</a>\n                                <a title=\"{{ start.formatLocalized(monthAndDayFormat) }} - {{ end.formatLocalized(monthAndDayFormat) }}\"\n                                   href=\"{{ route('budgets.index', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\">{{ periodTitle }}</a>\n                                <a href=\"{{ route('budgets.index', [nextLoop[0].start.format('Y-m-d'), nextLoop[0].end.format('Y-m-d')]) }}\"\n                                   class=\"btn btn-default\" title=\"{{ nextLoop[0].title }}\">&rarr;</a>\n                            </div>\n                        </div>\n                        <div class=\"col-lg-2 col-md-4 col-sm-12 col-xs-12 text-right\">\n                            <select class=\"form-control selectPeriod\" name=\"next\">\n                                <option label=\"{{ 'select_date'|_ }}\" value=\"x\">{{ 'select_date'|_ }}</option>\n                                {% for array in nextLoop %}\n                                    <option label=\"{{ array.title }}\" value=\"{{ array.label }}\" data-start=\"{{ array.start.format('Y-m-d') }}\"\n                                            data-end=\"{{ array.end.format('Y-m-d') }}\">{{ array.title }}</option>\n                                {% endfor %}\n                            </select>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <!-- available budget configurator. -->\n    {% if availableBudgets|length == 0 %}\n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">\n                            {{ trans('firefly.total_available_budget_in_currency', {currency: defaultCurrency.name}) }}\n                            <br>\n                            <small>{{ trans('firefly.between_dates_breadcrumb', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}</small>\n                        </h3>\n                    </div>\n                    <div class=\"box-body\">\n                        <div class=\"row\">\n                            {# info about the amount budgeted #}\n                            <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                <small>{{ 'budgeted'|_ }} ({{ 'see_below'|_ }}):\n                                    <span class=\"budgeted_amount\" data-value=\"{{ budgeted }}\" data-id=\"0\" data-currency=\"{{ defaultCurrency.id }}\">\n                                        {{ formatAmountBySymbol(budgeted, defaultCurrency.symbol, defaultCurrency.decimal_places) }}\n                                    </span>\n                                </small>\n                            </div>\n                            {# info about the amount spent #}\n                            <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\" style=\"text-align:right;margin-bottom:3px;\">\n                                <small class=\"available_bar\"\n                                       data-id=\"0\">{{ trans('firefly.available_between', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat) }) }}\n                                    :\n                                    <span class=\"available_amount\" data-id=\"0\" data-value=\"0\" data-currency=\"{{ defaultCurrency.id }}\"\n                                          data-value=\"0\">{{ formatAmountBySymbol(0, defaultCurrency.symbol, defaultCurrency.decimal_places, true) }}</span>\n                                    <a href=\"#\" data-id=\"0\" class=\"update_ab btn btn-default btn-xs\"><span class=\"fa fa-pencil\"></span></a>\n                                </small>\n                            </div>\n                        </div>\n                        {# info text to show how much is spent (in currency). #}\n                        <div class=\"row spentInfo\" data-id=\"0\" data-value=\"{{ spent }}\">\n                            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                <small>{{ trans('firefly.spent_between', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}\n                                    : {{ formatAmountBySymbol(spent, defaultCurrency.symbol, defaultCurrency.decimal_places) }} </small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {% if enableAddButton %}\n                    <div class=\"col-lg-12\">\n                        <p class=\"pull-right\">\n                            <a href=\"#\" class=\"btn btn-light btn-xs create_ab_alt\">\n                                <span class=\"fa fa-plus-circle\"></span>\n                                {{ 'alt_currency_ab_create'|_ }}</a>\n                        </p>\n                    </div>\n                {% endif %}\n            </div>\n        </div>\n    {% endif %}\n\n    {% set boxSize = 12 %}\n    {% if availableBudgets|length > 1 %}\n        {% set boxSize = 6 %}\n    {% endif %}\n    {% if availableBudgets|length > 0 %}\n        <div class=\"row\">\n            {% for budget in availableBudgets %}\n                <div class=\"col-lg-{{ boxSize }} col-md-12 col-sm-12 col-xs-12\">\n                    <div class=\"box\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">\n                                {{ trans('firefly.total_available_budget_in_currency', {currency: budget.transaction_currency.name}) }}\n                                <br>\n                                <small>{{ trans('firefly.between_dates_breadcrumb', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat)}) }}</small>\n                            </h3>\n                        </div>\n                        <div class=\"box-body\">\n                            <div class=\"row\">\n                                {# info about the amount budgeted #}\n                                <div class=\"col-lg-3 col-md-3 col-sm-3 col-xs-3\">\n                                    <small>{{ 'budgeted'|_ }}:\n                                        <span class=\"text-success budgeted_amount\" data-id=\"{{ budget.id }}\" data-currency=\"{{ budget.transaction_currency.id }}\">\n                                        {{ formatAmountBySymbol(budget.budgeted, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places, false) }}\n                                    </span>\n                                    </small>\n                                </div>\n                                {# info about the amount spent #}\n                                <div class=\"col-lg-9 col-md-9 col-sm-9 col-xs-9\" style=\"text-align:right;margin-bottom:3px;\">\n                                    <small class=\"available_bar\"\n                                           data-id=\"{{ budget.id }}\">{{ trans('firefly.available_between', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat) }) }}\n                                        :\n                                        <span class=\"available_amount\" data-id=\"{{ budget.id }}\"\n                                              data-value=\"{{ budget.amount }}\">{{ formatAmountBySymbol(budget.amount, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places, true) }}</span>\n                                        <a href=\"#\" data-id=\"{{ budget.id }}\" class=\"update_ab btn btn-default btn-xs\"><span class=\"fa fa-pencil\"></span></a>\n                                        <a href=\"#\" data-id=\"{{ budget.id }}\" class=\"delete_ab btn btn-danger btn-xs\"><span class=\"fa fa-trash\"></span></a>\n                                    </small>\n                                </div>\n                            </div>\n                            {# progresss bar to visualise available vs budgeted. #}\n                            <div class=\"row\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <div class=\"progress budgeted_bar\" data-id=\"{{ budget.id }}\" data-budgeted=\"{{ budget.budgeted }}\"\n                                         data-available=\"{{ budget.amount }}\" data-currency=\"{{ budget.transaction_currency.id }}\">\n                                        {# red: the exact amount of the available budget, if more has budgeted. #}\n                                        <div class=\"progress-bar progress-bar-danger\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"10\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n\n                                        {# orange: overbudgeted amount #}\n                                        <div class=\"progress-bar progress-bar-warning\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"0\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n\n                                        {# budgeted amount if enough or les #}\n                                        <div class=\"progress-bar progress-bar-info\" data-id=\"{{ budget.id }}\" role=\"progressbar\" aria-valuenow=\"0\"\n                                             aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\" style=\"width: 0;\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                            {# info text to show how much is spent (in currency). #}\n                            <div class=\"row spentInfo\" data-id=\"{{ budget.id }}\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <small>{{ trans('firefly.spent_between', {start: budget.start_date.formatLocalized(monthAndDayFormat), end: budget.end_date.formatLocalized(monthAndDayFormat)}) }}\n                                        : {{ formatAmountBySymbol(budget.spent, budget.transaction_currency.symbol, budget.transaction_currency.decimal_places) }} </small>\n                                </div>\n                            </div>\n\n                            {# bar to visualise spending in budget .#}\n                            <div class=\"row\">\n                                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                                    <div class=\"progress spent_bar\" data-id=\"{{ budget.id }}\" data-budgeted=\"{{ budget.budgeted }}\"\n                                         data-spent=\"{{ budget.spent }}\">\n                                        <div class=\"progress-bar progress-bar-warning\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\"\n                                             aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                        <div class=\"progress-bar progress-bar-danger\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                        <div class=\"progress-bar progress-bar-info\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"\n                                             style=\"width: 0;\"></div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n            {% if enableAddButton %}\n                <div class=\"col-lg-12\">\n                    <p class=\"pull-right\">\n                        <a href=\"#\" class=\"btn btn-light btn-xs create_ab_alt\">\n                            <span class=\"fa fa-plus-circle\"></span>\n                            {{ 'alt_currency_ab_create'|_ }}</a>\n                    </p>\n                </div>\n            {% endif %}\n        </div>\n    {% endif %}\n    {% if budgets|length == 0 and inactive.count() == 0 %}\n        {% include 'v1.partials.empty' with {objectType: 'default', type: 'budgets',route: route('budgets.create')} %}\n        {# make FF ignore demo for now. #}\n        {% set shownDemo = true %}\n    {% else %}\n    \n        <div class=\"row\">\n            <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">{{ 'budgets'|_ }}</h3>\n                    </div>\n                    <div class=\"box-body no-padding\">\n                        <div style=\"padding:8px;\">\n                            <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success\"><span class=\"fa fa-plus fa-fw\"></span> {{ 'createBudget'|_ }}</a>\n                        </div>\n                        <table class=\"table table-bordered sortable-table table-striped sortable\" id=\"budgetList\">\n                            <thead>\n                            <tr>\n                                <th class=\"hidden-sm hidden-xs\" style=\"width:10%;\">&nbsp;</th>\n                                <th>{{ 'budget'|_ }}</th>\n                                <th style=\"width:25%;\">{{ 'budgeted'|_ }}</th>\n                                <th class=\"hidden-sm hidden-xs\">{{ 'spent'|_ }} ({{ 'per_day'|_|lower }})</th>\n                                <th>{{ 'left'|_ }} ({{ 'per_day'|_|lower }})</th>\n                            </tr>\n                            </thead>\n                            <tbody>\n                            {% for budget in budgets %}\n                                <tr data-id=\"{{ budget.id }}\">\n                                    <td class=\"hidden-sm hidden-xs\">\n                                        <div class=\"btn-group btn-group-xs\">\n                                            <a href=\"#\" class=\"handle object-handle btn btn-default\"><span class=\"fa fa-fw fa-bars\"></span></a>\n                                            <a href=\"{{ route('budgets.edit', budget.id) }}\" class=\"btn btn-xs btn-default\"><span class=\"fa fa-fw fa-pencil\"></span></a>\n                                            <a href=\"{{ route('budgets.delete', budget.id) }}\" class=\"btn btn-xs btn-danger\"><span class=\"fa fa-fw fa-trash-o\"></span></a>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        {% if 0 == budget.budgeted|length %}\n                                            <a href=\"{{ route('budgets.show', budget.id) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }}</a>\n                                        {% endif %}\n                                        {% if 1 == budget.budgeted|length %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                <a href=\"{{ route('budgets.show.limit', [budget.id, budgetLimit.id]) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }}</a>\n                                                {% endfor %}\n                                        {% endif %}\n\n                                        {% if budget.budgeted|length > 1 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                <a href=\"{{ route('budgets.show.limit', [budget.id, budgetLimit.id]) }}\" data-id=\"{{ budget.id }}\">{{ budget.name }} ({{ budgetLimit.currency_name }})</a><br>\n                                            {% endfor %}\n                                        {% endif %}\n\n                                        {% if budget.auto_budget %}\n                                        {% if 1 == budget.auto_budget.auto_budget_type %}\n                                            <span class=\"fa fa-fw fa-calendar-check-o\" title=\"{{ 'auto_budget_reset_icon'|_ }}\"></span>\n                                        {% endif %}\n                                        {% if 2 == budget.auto_budget.auto_budget_type %}\n                                            <span class=\"fa fa-fw fa-calendar-plus-o\" title=\"{{ 'auto_budget_rollover_icon'|_ }}\"></span>\n                                        {% endif %}\n                                        {% endif %}\n                                        {% if budget.attachments.count() > 0 %}\n                                            <span class=\"fa fa-paperclip\"></span>\n                                        {% endif %}\n                                    </td>\n                                    <td>\n                                        {% if 0==budget.budgeted|length %}\n                                            <div class=\"input-group\">\n                                                <div class=\"input-group-addon\">{{ defaultCurrency.symbol }}</div>\n                                                <input type=\"hidden\" name=\"balance_currency_id\" value=\"{{ defaultCurrency.id }}\"/>\n                                                <input class=\"form-control budget_amount\" data-original=\"0\" data-id=\"{{ budget.id }}\"\n                                                    data-currency=\"{{ defaultCurrency.id }}\" data-limit=\"0\" value=\"0\" autocomplete=\"off\" min=\"0\" name=\"amount\"\n                                                    type=\"number\">\n                                            </div>\n                                            <span class=\"text-danger budget_warning\" data-id=\"{{ budget.id }}\" data-budgetLimit=\"{{ budgetLimit.id }}\"\n                                                style=\"display:none;\"></span>\n                                        {% endif %}\n                                        {% if budget.budgeted|length > 0 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                {% if not budgetLimit.in_range %}\n                                                    <small class=\"text-muted\">\n                                                        {{ trans('firefly.budget_limit_not_in_range', {start: budgetLimit.start_date, end: budgetLimit.end_date}) }}\n                                                    </small><br>\n                                                {% endif %}\n                                                <div class=\"input-group bl_entry\" data-budget-limit-id=\"{{ budgetLimit.id }}\">\n                                                    <div class=\"input-group-addon\">{{ budgetLimit.currency_symbol }}</div>\n                                                    <input class=\"form-control budget_amount\" data-original=\"{{ budgetLimit.amount }}\"\n                                                        data-id=\"{{ budget.id }}\" data-limit=\"{{ budgetLimit.id }}\" value=\"{{ budgetLimit.amount }}\"\n                                                        autocomplete=\"off\"\n                                                        min=\"0\" name=\"amount\" type=\"number\">\n                                                    <div class=\"input-group-btn\">\n                                                        <button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\"\n                                                                aria-expanded=\"false\"><span class=\"caret\"></span></button>\n                                                        <ul class=\"dropdown-menu\">\n                                                            <li>\n                                                                <a class=\"delete_bl\" href=\"#\" data-budget-limit-id=\"{{ budgetLimit.id }}\">{{ trans('firefly.remove_budgeted_amount', {currency: budgetLimit.currency_name }) }}</a>\n                                                            </li>\n                                                        </ul>\n                                                    </div>\n                                                </div>\n                                                <span class=\"text-danger budget_warning\" data-id=\"{{ budget.id }}\" data-budgetLimit=\"{{ budgetLimit.id }}\"\n                                                    style=\"display:none;\"></span>\n                                            {% endfor %}\n                                        {% endif %}\n                                        {% if budget.budgeted|length < currencies.count() %}\n                                            <a href=\"#\" class=\"btn btn-light btn-xs create_bl\" data-id=\"{{ budget.id }}\">\n                                                <span class=\"fa fa-plus-circle\"></span>\n                                            </a>\n                                        {% endif %}\n                                    </td>\n                                    <td class=\"hidden-sm hidden-xs spent\" data-id=\"{{ budget.id }}\" style=\"text-align:right;\">\n                                        {% for spentInfo in budget.spent %}\n                                            {{ formatAmountBySymbol(spentInfo.spent, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                            ({{ formatAmountBySymbol(spentInfo.spent / activeDaysPassed, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                            <br/>\n                                        {% endfor %}\n                                        {% for budgetLimit in budget.budgeted %}\n                                            {% if null == budget.spent[budgetLimit.currency_id] %}\n                                                {{ formatAmountBySymbol(0, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }}<br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                    </td>\n                                    <td class=\"left\" data-id=\"{{ budget.id }}\" style=\"text-align: right;\">\n                                        {% for spentInfo in budget.spent %}\n                                            {% set countLimit = 0 %}\n                                            {% for budgetLimit in budget.budgeted %}\n                                                {% if spentInfo.currency_id == budgetLimit.currency_id and budgetLimit.in_range %}\n                                                    {% set countLimit = countLimit + 1 %}\n                                                    <span class=\"left_span\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"{{ budgetLimit.id }}\"\n                                                        data-value=\"{{ spentInfo.spent + budgetLimit.amount }}\" class=\"amount_left\">\n                                                        {{ formatAmountBySymbol(spentInfo.spent + budgetLimit.amount, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                                        {% if spentInfo.spent + budgetLimit.amount > 0 %}\n                                                            ({{ formatAmountBySymbol((spentInfo.spent + budgetLimit.amount) / activeDaysLeft, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                                        {% else %}\n                                                            ({{ formatAmountBySymbol(0, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }})\n                                                        {% endif %}\n                                                    </span>\n                                                    <br/>\n                                                {% endif %}\n                                            {% endfor %}\n                                            {% if countLimit == 0 %}\n                                                <span class=\"left_span\" data-id=\"{{ budget.id }}\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"0\"\n                                                    class=\"amount_left\" data-value=\"{{ spentInfo.spent }}\">\n                                                    {{ formatAmountBySymbol(spentInfo.spent, spentInfo.currency_symbol, spentInfo.currency_decimal_places) }}\n                                                </span>\n                                                <br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                        {% for budgetLimit in budget.budgeted %}\n                                            {% if null == budget.spent[budgetLimit.currency_id] %}\n                                            <span class=\"left_span\" data-currency=\"{{ spentInfo.currency_id }}\" data-limit=\"{{ budgetLimit.id }}\"\n                                                data-value=\"{{ spentInfo.spent + budgetLimit.amount }}\" class=\"amount_left\">\n                                                {{ formatAmountBySymbol(budgetLimit.amount, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }}\n                                                {% if budgetLimit.in_range %}\n                                                    ({{ formatAmountBySymbol(budgetLimit.amount / activeDaysLeft, budgetLimit.currency_symbol, budgetLimit.currency_decimal_places) }})\n                                                {% endif %}\n                                            </span>\n                                            <br/>\n                                            {% endif %}\n                                        {% endfor %}\n                                    </td>\n                                </tr>\n                            {% endfor %}\n                            </tbody>\n                            <tfoot>\n                            <tr>\n                                <td>&nbsp;</td>\n                                <td><em>{{ 'sum'|_ }}</em></td>\n                                <td class=\"hidden-sm hidden-xs\" style=\"text-align:right;\">\n                                    {% for arr in sums.budgeted %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}<br/>\n                                    {% endfor %}\n                                </td>\n                                <td class=\"hidden-sm hidden-xs\" style=\"text-align:right;\">\n                                    {% for arr in sums.spent %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}\n                                        ({{ formatAmountBySymbol(arr.amount / activeDaysPassed, arr.currency_symbol, arr.currency_decimal_places) }})\n                                        <br/>\n                                    {% endfor %}\n                                </td>\n                                <td style=\"text-align: right;\">\n                                    {% for arr in sums.left %}\n                                        {{ formatAmountBySymbol(arr.amount, arr.currency_symbol, arr.currency_decimal_places) }}\n                                        ({{ formatAmountBySymbol(arr.amount / activeDaysLeft, arr.currency_symbol, arr.currency_decimal_places) }})\n                                        <br/>\n                                    {% endfor %}\n                                </td>\n                            </tr>\n                            </tfoot>\n                        </table>\n                    </div>\n                    <div class=\"box-footer\">\n                        <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success\"><span class=\"fa fa-plus fa-fw\"></span> {{ 'createBudget'|_ }}</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n\n        <div class=\"row\">\n            <div class=\"col-lg-3 col-md-4 col-sm-12 col-xs-12\">\n                <div class=\"box\">\n                    <div class=\"box-header with-border\">\n                        <h3 class=\"box-title\">{{ 'transactionsWithoutBudget'|_ }}</h3>\n                    </div>\n                    <div class=\"box-body\">\n                        <p>\n                            <a href=\"{{ route('budgets.no-budget', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\">\n                                {{ trans('firefly.transactions_no_budget', {start: start.formatLocalized(monthAndDayFormat), end: end.formatLocalized(monthAndDayFormat)}) }}\n                            </a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n            {% if paginator.count() > 0 and inactive.count() > 0 %}\n                <div class=\"col-lg-3 col-md-4 col-sm-12 col-xs-12\">\n                    <div class=\"box\" id=\"createBudgetBox\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">{{ 'createBudget'|_ }}</h3>\n                        </div>\n                        <div class=\"box-body\">\n                            <a href=\"{{ route('budgets.create') }}\" class=\"btn btn-success pull-right\">{{ 'createBudget'|_ }}</a>\n                        </div>\n                    </div>\n                </div>\n            {% endif %}\n            {% if inactive|length > 0 %}\n                <div class=\"col-lg-3 col-sm-4 col-md-6\">\n                    <div class=\"box\">\n                        <div class=\"box-header with-border\">\n                            <h3 class=\"box-title\">{{ 'inactiveBudgets'|_ }}</h3>\n                        </div>\n                        <div class=\"box-body\">\n                            {% for budget in inactive %}\n                                {% if loop.index == inactive.count() %}\n                                    <a href=\"{{ route('budgets.show',budget.id) }}\">{{ budget.name }}</a>\n                                {% else %}\n                                    <a href=\"{{ route('budgets.show',budget.id) }}\">{{ budget.name }}</a>,\n                                {% endif %}\n                            {% endfor %}\n                        </div>\n                    </div>\n                </div>\n            {% endif %}\n        </div>\n    {% endif %}\n\n{% endblock %}\n\n{% block styles %}\n    <link href=\"v1/css/bootstrap-sortable.css?v={{ FF_VERSION }}\" type=\"text/css\" rel=\"stylesheet\"  media=\"all\" nonce=\"{{ JS_NONCE }}\">\n{% endblock %}\n\n{% block scripts %}\n    <script src=\"v1/js/lib/jquery-ui.min.js?v={{ FF_VERSION }}\" type=\"text/javascript\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" nonce=\"{{ JS_NONCE }}\">\n\n        // index route.\n        var budgetIndexUri = \"{{ route('budgets.index',['START','END']) }}\";\n\n        // create available budgets / edit\n        var createAvailableBudgetUri = \"{{ route('available-budgets.create', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var createAltAvailableBudgetUri = \"{{ route('available-budgets.create-alternative', [start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var editAvailableBudgetUri = \"{{ route('available-budgets.edit', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var deleteABUrl = \"{{ route('available-budgets.delete') }}\";\n\n        // budget limit create form.\n        var createBudgetLimitUri = \"{{ route('budget-limits.create', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n        var storeBudgetLimitUri = \"{{ route('budget-limits.store') }}\";\n        var updateBudgetLimitUri = \"{{ route('budget-limits.update', ['REPLACEME']) }}\";\n        var deleteBudgetLimitUrl = \"{{ route('budget-limits.delete', ['REPLACEME']) }}\";\n        var totalBudgetedUri = \"{{ route('json.budget.total-budgeted', ['REPLACEME', start.format('Y-m-d'), end.format('Y-m-d')]) }}\";\n\n        // period thing:\n        var periodStart = \"{{ start.format('Y-m-d') }}\";\n        var periodEnd = \"{{ end.format('Y-m-d') }}\";\n    </script>\n    <script type=\"text/javascript\" src=\"v1/js/lib/bootstrap-sortable.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n    <script type=\"text/javascript\" src=\"v1/js/ff/budgets/index.js?v={{ FF_VERSION }}\" nonce=\"{{ JS_NONCE }}\"></script>\n{% endblock %}\n", "<?php\n/**\n * web.php\n * Copyright (c) 2019 james@firefly-iii.org.\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=1);\n\nRoute::group(\n    ['namespace' => 'FireflyIII\\Http\\Controllers\\System',\n     'as'        => 'installer.', 'prefix' => 'install',],\n    static function () {\n        Route::get('', ['uses' => 'InstallController@index', 'as' => 'index']);\n        Route::post('runCommand', ['uses' => 'InstallController@runCommand', 'as' => 'runCommand']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'binders-only', 'namespace' => 'FireflyIII\\Http\\Controllers\\System', 'as' => 'cron.', 'prefix' => 'cron'],\n    static function () {\n        Route::get('run/{cliToken}', ['uses' => 'CronController@cron', 'as' => 'cron']);\n    }\n);\n\n/**\n * These routes only work when the user is NOT logged in.\n */\nRoute::group(\n    ['middleware' => 'user-not-logged-in', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n\n    // Authentication Routes...\n        Route::get('login', ['uses' => 'Auth\\LoginController@showLoginForm', 'as' => 'login']);\n        Route::post('login', ['uses' => 'Auth\\LoginController@login', 'as' => 'login.post']);\n\n        // Registration Routes...\n        Route::get('register', ['uses' => 'Auth\\RegisterController@showRegistrationForm', 'as' => 'register']);\n        Route::post('register', 'Auth\\RegisterController@register');\n\n        // Password Reset Routes...\n        Route::get('password/reset/{token}', ['uses' => 'Auth\\ResetPasswordController@showResetForm', 'as' => 'password.reset']);\n        Route::post('password/email', ['uses' => 'Auth\\ForgotPasswordController@sendResetLinkEmail', 'as' => 'password.email']);\n        Route::post('password/reset', ['uses' => 'Auth\\ResetPasswordController@reset', 'as' => 'password.reset.post']);\n        Route::get('password/reset', ['uses' => 'Auth\\ForgotPasswordController@showLinkRequestForm', 'as' => 'password.reset.request']);\n\n        // Change email routes:\n        Route::get('profile/confirm-email-change/{token}', ['uses' => 'ProfileController@confirmEmailChange', 'as' => 'profile.confirm-email-change']);\n        Route::get('profile/undo-email-change/{token}/{oldAddressHash}', ['uses' => 'ProfileController@undoEmailChange', 'as' => 'profile.undo-email-change']);\n    }\n);\n\n/**\n * For some other routes, it is only relevant that the user is authenticated.\n */\nRoute::group(\n    ['middleware' => 'user-simple-auth', 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('error', ['uses' => 'DebugController@displayError', 'as' => 'error']);\n        Route::any('logout', ['uses' => 'Auth\\LoginController@logout', 'as' => 'logout']);\n        Route::get('flush', ['uses' => 'DebugController@flush', 'as' => 'flush']);\n        //Route::get('routes', ['uses' => 'DebugController@routes', 'as' => 'routes']);\n        Route::get('debug', 'DebugController@index')->name('debug');\n    }\n);\n\n/**\n * For the two factor routes, the user must be logged in, but NOT 2FA. Account confirmation does not matter here.\n *\n */\nRoute::group(\n    ['middleware' => 'user-logged-in-no-2fa', 'prefix' => 'two-factor', 'as' => 'two-factor.', 'namespace' => 'FireflyIII\\Http\\Controllers\\Auth'],\n    static function () {\n        Route::post('submit', ['uses' => 'TwoFactorController@submitMFA', 'as' => 'submit']);\n        Route::get('lost', ['uses' => 'TwoFactorController@lostTwoFactor', 'as' => 'lost']); // can be removed when v2 is live.\n    }\n);\n\n/**\n * For all other routes, the user must be fully authenticated and have an activated account.\n */\n\n/**\n * Home Controller.\n */\nRoute::group(\n    ['middleware' => ['user-full-auth'], 'namespace' => 'FireflyIII\\Http\\Controllers'],\n    static function () {\n        Route::get('/', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::get('/flash', ['uses' => 'DebugController@testFlash', 'as' => 'test-flash']);\n        Route::get('/home', ['uses' => 'HomeController@index', 'as' => 'home']);\n        Route::post('/daterange', ['uses' => 'HomeController@dateRange', 'as' => 'daterange']);\n    }\n);\n\n// show inactive\n\n/**\n * Account Controller.\n * DROP ME WHEN v2 hits\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'inactive-accounts', 'as' => 'accounts.'],\n    static function () {\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@inactive', 'as' => 'inactive.index'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n    }\n);\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'accounts', 'as' => 'accounts.'],\n    static function () {\n\n        // show:\n        Route::get('{objectType}', ['uses' => 'Account\\IndexController@index', 'as' => 'index'])->where('objectType', 'revenue|asset|expense|liabilities');\n\n        // create\n        Route::get('create/{objectType}', ['uses' => 'Account\\CreateController@create', 'as' => 'create'])->where(\n            'objectType',\n            'revenue|asset|expense|liabilities'\n        );\n        Route::post('store', ['uses' => 'Account\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{account}', ['uses' => 'Account\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{account}', ['uses' => 'Account\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{account}', ['uses' => 'Account\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{account}', ['uses' => 'Account\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show\n        Route::get('show/{account}/all', ['uses' => 'Account\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{account}/{start_date?}/{end_date?}', ['uses' => 'Account\\ShowController@show', 'as' => 'show']);\n\n        // reconcile routes:\n        Route::get('reconcile/{account}/index/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@reconcile', 'as' => 'reconcile']);\n        Route::post('reconcile/{account}/submit/{start_date?}/{end_date?}', ['uses' => 'Account\\ReconcileController@submit', 'as' => 'reconcile.submit']);\n\n        // reconcile JSON routes\n        Route::get('reconcile/{account}/overview/{start_date?}/{end_date?}', ['uses' => 'Json\\ReconcileController@overview', 'as' => 'reconcile.overview']);\n        Route::get(\n            'reconcile/{account}/transactions/{start_date?}/{end_date?}',\n            ['uses' => 'Json\\ReconcileController@transactions', 'as' => 'reconcile.transactions']\n        );\n    }\n);\n\n/**\n * Attachment Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'attachments', 'as' => 'attachments.'],\n    static function () {\n        Route::get('', ['uses' => 'AttachmentController@index', 'as' => 'index']);\n        Route::get('edit/{attachment}', ['uses' => 'AttachmentController@edit', 'as' => 'edit']);\n        Route::get('delete/{attachment}', ['uses' => 'AttachmentController@delete', 'as' => 'delete']);\n        Route::get('download/{attachment}', ['uses' => 'AttachmentController@download', 'as' => 'download']);\n        Route::get('view/{attachment}', ['uses' => 'AttachmentController@view', 'as' => 'view']);\n\n        Route::post('update/{attachment}', ['uses' => 'AttachmentController@update', 'as' => 'update']);\n        Route::post('destroy/{attachment}', ['uses' => 'AttachmentController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Bills Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'bills', 'as' => 'bills.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'subscriptions', 'as' => 'subscriptions.'],\n    static function () {\n        Route::get('', ['uses' => 'Bill\\IndexController@index', 'as' => 'index']);\n        Route::get('rescan/{bill}', ['uses' => 'Bill\\ShowController@rescan', 'as' => 'rescan']);\n        Route::get('create', ['uses' => 'Bill\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{bill}', ['uses' => 'Bill\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{bill}', ['uses' => 'Bill\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{bill}', ['uses' => 'Bill\\ShowController@show', 'as' => 'show']);\n\n        Route::post('store', ['uses' => 'Bill\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{bill}', ['uses' => 'Bill\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{bill}', ['uses' => 'Bill\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::post('set-order/{bill}', ['uses' => 'Bill\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budgets', 'as' => 'budgets.'],\n    static function () {\n\n    // delete\n        Route::get('delete/{budget}', ['uses' => 'Budget\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{budget}', ['uses' => 'Budget\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // create\n        Route::get('create', ['uses' => 'Budget\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{budget}', ['uses' => 'Budget\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{budget}', ['uses' => 'Budget\\EditController@update', 'as' => 'update']);\n\n        // show\n        Route::get('show/{budget}', ['uses' => 'Budget\\ShowController@show', 'as' => 'show']);\n        Route::get('show/{budget}/{budgetLimit}', ['uses' => 'Budget\\ShowController@showByBudgetLimit', 'as' => 'show.limit']);\n        Route::get('list/no-budget/all', ['uses' => 'Budget\\ShowController@noBudgetAll', 'as' => 'no-budget-all']);\n        Route::get('list/no-budget/{start_date?}/{end_date?}', ['uses' => 'Budget\\ShowController@noBudget', 'as' => 'no-budget']);\n\n        // reorder budgets\n        Route::post('reorder', ['uses' => 'Budget\\IndexController@reorder', 'as' => 'reorder']);\n\n        // index\n        Route::get('{start_date?}/{end_date?}', ['uses' => 'Budget\\IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * Available Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'available-budgets', 'as' => 'available-budgets.'],\n    static function () {\n\n        // create\n        Route::get('create/{start_date}/{end_date}/{currency?}', ['uses' => 'Budget\\AvailableBudgetController@create', 'as' => 'create']);\n        Route::get(\n            'create-alternative/{start_date}/{end_date}',\n            ['uses' => 'Budget\\AvailableBudgetController@createAlternative', 'as' => 'create-alternative']\n        );\n        Route::post('store', ['uses' => 'Budget\\AvailableBudgetController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@edit', 'as' => 'edit']);\n        Route::post('update/{availableBudget}/{start_date}/{end_date}', ['uses' => 'Budget\\AvailableBudgetController@update', 'as' => 'update']);\n\n        Route::post('delete', ['uses' => 'Budget\\AvailableBudgetController@delete', 'as' => 'delete']);\n    }\n);\n\n/**\n * Budget Limit Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'budget-limits', 'as' => 'budget-limits.'],\n    static function () {\n        Route::get('create/{budget}/{start_date}/{end_date}', ['uses' => 'Budget\\BudgetLimitController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Budget\\BudgetLimitController@store', 'as' => 'store']);\n\n        Route::post('delete/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@delete', 'as' => 'delete']);\n\n        Route::post('update/{budgetLimit}', ['uses' => 'Budget\\BudgetLimitController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'categories', 'as' => 'categories.'],\n    static function () {\n\n    // index:\n        Route::get('', ['uses' => 'Category\\IndexController@index', 'as' => 'index']);\n\n        // create\n        Route::get('create', ['uses' => 'Category\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Category\\CreateController@store', 'as' => 'store']);\n\n        // edit\n        Route::get('edit/{category}', ['uses' => 'Category\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{category}', ['uses' => 'Category\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{category}', ['uses' => 'Category\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{category}', ['uses' => 'Category\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // show category:\n        Route::get('show/{category}/all', ['uses' => 'Category\\ShowController@showAll', 'as' => 'show.all']);\n        Route::get('show/{category}/{start_date?}/{end_date?}', ['uses' => 'Category\\ShowController@show', 'as' => 'show']);\n\n        // no category controller:\n        Route::get('list/no-category/all', ['uses' => 'Category\\NoCategoryController@showAll', 'as' => 'no-category.all']);\n        Route::get('list/no-category/{start_date?}/{end_date?}', ['uses' => 'Category\\NoCategoryController@show', 'as' => 'no-category']);\n    }\n);\n\n/**\n * Currency Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'currencies', 'as' => 'currencies.'],\n    static function () {\n        Route::get('', ['uses' => 'CurrencyController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'CurrencyController@create', 'as' => 'create']);\n        Route::get('edit/{currency}', ['uses' => 'CurrencyController@edit', 'as' => 'edit']);\n        Route::get('delete/{currency}', ['uses' => 'CurrencyController@delete', 'as' => 'delete']);\n        Route::post('default', ['uses' => 'CurrencyController@defaultCurrency', 'as' => 'default']);\n        Route::get('enable/{currency}', ['uses' => 'CurrencyController@enableCurrency', 'as' => 'enable']);\n        Route::get('disable/{currency}', ['uses' => 'CurrencyController@disableCurrency', 'as' => 'disable']);\n\n        Route::post('store', ['uses' => 'CurrencyController@store', 'as' => 'store']);\n        Route::post('update/{currency}', ['uses' => 'CurrencyController@update', 'as' => 'update']);\n        Route::post('destroy/{currency}', ['uses' => 'CurrencyController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Chart\\Account Controller (default report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/account', 'as' => 'chart.account.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'AccountController@frontpage', 'as' => 'frontpage']);\n        Route::get('expense', ['uses' => 'AccountController@expenseAccounts', 'as' => 'expense']);\n        Route::get('revenue', ['uses' => 'AccountController@revenueAccounts', 'as' => 'revenue']);\n        Route::get('report/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@report', 'as' => 'report']);\n        Route::get('period/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@period', 'as' => 'period']);\n\n        Route::get('income-category/{account}/all/all', ['uses' => 'AccountController@incomeCategoryAll', 'as' => 'income-category-all']);\n        Route::get('expense-category/{account}/all/all', ['uses' => 'AccountController@expenseCategoryAll', 'as' => 'expense-category-all']);\n        Route::get('expense-budget/{account}/all/all', ['uses' => 'AccountController@expenseBudgetAll', 'as' => 'expense-budget-all']);\n\n        Route::get('income-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@incomeCategory', 'as' => 'income-category']);\n        Route::get('expense-category/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-budget/{account}/{start_date}/{end_date}', ['uses' => 'AccountController@expenseBudget', 'as' => 'expense-budget']);\n    }\n);\n\n/**\n * Chart\\Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/bill', 'as' => 'chart.bill.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BillController@frontpage', 'as' => 'frontpage']);\n        Route::get('single/{bill}', ['uses' => 'BillController@single', 'as' => 'single']);\n    }\n);\n\n/**\n * Chart\\Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/budget', 'as' => 'chart.budget.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'BudgetController@frontpage', 'as' => 'frontpage']);\n        Route::get('period/0/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@periodNoBudget', 'as' => 'period.no-budget']);\n        Route::get('period/{budget}/{currency}/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n        Route::get('budget/{budget}/{budgetLimit}', ['uses' => 'BudgetController@budgetLimit', 'as' => 'budget-limit']);\n        Route::get('budget/{budget}', ['uses' => 'BudgetController@budget', 'as' => 'budget']);\n\n        // these charts are used in budget/show:\n        Route::get('expense-category/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseCategory', 'as' => 'expense-category']);\n        Route::get('expense-asset/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseAsset', 'as' => 'expense-asset']);\n        Route::get('expense-expense/{budget}/{budgetLimit?}', ['uses' => 'BudgetController@expenseExpense', 'as' => 'expense-expense']);\n\n        // these charts are used in reports (category reports):\n        Route::get(\n            'category/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@sourceAccountExpense', 'as' => 'source-account-expense']\n        );\n        Route::get(\n            'destination-account/expense/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetReportController@destinationAccountExpense', 'as' => 'destination-account-expense']\n        );\n        Route::get('operations/{accountList}/{budget}/{start_date}/{end_date}', ['uses' => 'BudgetReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/category', 'as' => 'chart.category.'],\n    static function () {\n        Route::get('frontpage', ['uses' => 'CategoryController@frontPage', 'as' => 'frontpage']);\n        Route::get('period/{category}', ['uses' => 'CategoryController@currentPeriod', 'as' => 'current']);\n        Route::get('period/{category}/{date}', ['uses' => 'CategoryController@specificPeriod', 'as' => 'specific']);\n        Route::get('all/{category}', ['uses' => 'CategoryController@all', 'as' => 'all']);\n        Route::get(\n            'report-period/0/{accountList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@reportPeriodNoCategory', 'as' => 'period.no-category']\n        );\n        Route::get('report-period/{category}/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@reportPeriod', 'as' => 'period']);\n\n        Route::get(\n            'category/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n        Route::get(\n            'source/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceExpense', 'as' => 'source-expense']\n        );\n        Route::get(\n            'source/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@sourceIncome', 'as' => 'source-income']\n        );\n        Route::get(\n            'dest/expense/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationExpense', 'as' => 'dest-expense']\n        );\n        Route::get(\n            'dest/income/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryReportController@destinationIncome', 'as' => 'dest-income']\n        );\n        Route::get('operations/{accountList}/{category}/{start_date}/{end_date}', ['uses' => 'CategoryReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/tag', 'as' => 'chart.tag.'],\n    static function () {\n        Route::get('tag/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@tagIncome', 'as' => 'tag-income']);\n        Route::get(\n            'category/expense/{accountList}/{tagList}/{start_date}/{end_date}',\n            ['uses' => 'TagReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get('category/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@categoryIncome', 'as' => 'category-income']);\n        Route::get('budget/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@budgetExpense', 'as' => 'budget-expense']);\n        Route::get('source/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceExpense', 'as' => 'source-expense']);\n        Route::get('source/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@sourceIncome', 'as' => 'source-income']);\n        Route::get('dest/expense/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationExpense', 'as' => 'dest-expense']);\n        Route::get('dest/income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagReportController@destinationIncome', 'as' => 'dest-income']);\n\n        Route::get('operations/{accountList}/{tag}/{start_date}/{end_date}', ['uses' => 'TagReportController@mainChart', 'as' => 'main']);\n    }\n);\n\n/**\n * Chart\\Double Controller (for expense/revenue report).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/double', 'as' => 'chart.double.'],\n    static function () {\n        Route::get('main/{accountList}/{account}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@mainChart', 'as' => 'main']);\n\n        Route::get(\n            'category/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryExpense', 'as' => 'category-expense']\n        );\n        Route::get(\n            'category/income/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@categoryIncome', 'as' => 'category-income']\n        );\n        Route::get(\n            'budget/expense/{accountList}/{doubleList}/{start_date}/{end_date}',\n            ['uses' => 'DoubleReportController@budgetExpense', 'as' => 'budget-expense']\n        );\n\n        Route::get('tag/expense/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagExpense', 'as' => 'tag-expense']);\n        Route::get('tag/income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleReportController@tagIncome', 'as' => 'tag-income']);\n    }\n);\n\n/**\n * Chart\\PiggyBank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/piggy-bank', 'as' => 'chart.piggy-bank.'],\n    static function () {\n        Route::get('{piggyBank}', ['uses' => 'PiggyBankController@history', 'as' => 'history']);\n    }\n);\n\n/**\n * Chart\\Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/report', 'as' => 'chart.report.'],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@operations', 'as' => 'operations']);\n        Route::get('net-worth/{accountList}/{start_date}/{end_date}/', ['uses' => 'ReportController@netWorth', 'as' => 'net-worth']);\n    }\n);\n\n/**\n * Chart\\Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Chart', 'prefix' => 'chart/transactions', 'as' => 'chart.transactions.'],\n    static function () {\n        Route::get('categories/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@categories', 'as' => 'categories']);\n        Route::get('budgets/{start_date}/{end_date}', ['uses' => 'TransactionController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'destinationAccounts/{objectType}/{start_date}/{end_date}',\n            ['uses' => 'TransactionController@destinationAccounts', 'as' => 'destinationAccounts']\n        );\n        Route::get('sourceAccounts/{objectType}/{start_date}/{end_date}', ['uses' => 'TransactionController@sourceAccounts', 'as' => 'sourceAccounts']);\n        //\n    }\n);\n\n/**\n * Export controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'export', 'as' => 'export.'],\n    static function () {\n\n    // index\n        Route::get('', ['uses' => 'Export\\IndexController@index', 'as' => 'index']);\n        Route::post('export', ['uses' => 'Export\\IndexController@export', 'as' => 'export']);\n    }\n);\n/**\n * Object group controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'groups', 'as' => 'object-groups.'],\n    static function () {\n\n        // index\n        Route::get('', ['uses' => 'ObjectGroup\\IndexController@index', 'as' => 'index']);\n        Route::post('set-order/{objectGroup}', ['uses' => 'ObjectGroup\\IndexController@setOrder', 'as' => 'set-order']);\n\n        // edit\n        Route::get('edit/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{objectGroup}', ['uses' => 'ObjectGroup\\EditController@update', 'as' => 'update']);\n\n        // delete\n        Route::get('delete/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{objectGroup}', ['uses' => 'ObjectGroup\\DeleteController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Help Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'help', 'as' => 'help.'],\n    static function () {\n        Route::get('{route}', ['uses' => 'HelpController@show', 'as' => 'show']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v1/jscript', 'as' => 'javascript.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variables', 'as' => 'variables']);\n        Route::get('accounts', ['uses' => 'JavascriptController@accounts', 'as' => 'accounts']);\n        Route::get('currencies', ['uses' => 'JavascriptController@currencies', 'as' => 'currencies']);\n    }\n);\n\n/**\n * JScript Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'v2/jscript', 'as' => 'javascript.v2.'],\n    static function () {\n        Route::get('variables', ['uses' => 'JavascriptController@variablesV2', 'as' => 'variables']);\n    }\n);\n\n/**\n * JSON Controller(s).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'json', 'as' => 'json.'],\n    static function () {\n\n        // budgets:\n        Route::get(\n            'budget/total-budgeted/{currency}/{start_date}/{end_date}',\n            ['uses' => 'Json\\BudgetController@getBudgetInformation', 'as' => 'budget.total-budgeted']\n        );\n        // boxes\n        Route::get('box/balance', ['uses' => 'Json\\BoxController@balance', 'as' => 'box.balance']);\n        Route::get('box/available', ['uses' => 'Json\\BoxController@available', 'as' => 'box.available']);\n        Route::get('box/net-worth', ['uses' => 'Json\\BoxController@netWorth', 'as' => 'box.net-worth']);\n\n        // rules\n        Route::get('trigger', ['uses' => 'Json\\RuleController@trigger', 'as' => 'trigger']);\n        Route::get('action', ['uses' => 'Json\\RuleController@action', 'as' => 'action']);\n\n        // front page\n        Route::get('frontpage/piggy-banks', ['uses' => 'Json\\FrontpageController@piggyBanks', 'as' => 'fp.piggy-banks']);\n\n        // currency conversion:\n        Route::get('rate/{fromCurrencyCode}/{toCurrencyCode}/{date}', ['uses' => 'Json\\ExchangeController@getRate', 'as' => 'rate']);\n\n        // intro things:\n        Route::any('intro/finished/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postFinished', 'as' => 'intro.finished']);\n        Route::post('intro/enable/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@postEnable', 'as' => 'intro.enable']);\n        Route::get('intro/{route}/{specificPage?}', ['uses' => 'Json\\IntroController@getIntroSteps', 'as' => 'intro']);\n    }\n);\n\n/**\n * NewUser Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'new-user', 'as' => 'new-user.'],\n    static function () {\n        Route::get('', ['uses' => 'NewUserController@index', 'as' => 'index']);\n        Route::post('submit', ['uses' => 'NewUserController@submit', 'as' => 'submit']);\n    }\n);\n\n/**\n * Piggy Bank Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'piggy-banks', 'as' => 'piggy-banks.'],\n    static function () {\n\n        Route::get('', ['uses' => 'PiggyBank\\IndexController@index', 'as' => 'index']);\n        Route::get('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@add', 'as' => 'add-money']);\n        Route::get('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@remove', 'as' => 'remove-money']);\n        Route::get('add-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@addMobile', 'as' => 'add-money-mobile']);\n        Route::get('remove-money/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@removeMobile', 'as' => 'remove-money-mobile']);\n        Route::get('create', ['uses' => 'PiggyBank\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{piggyBank}', ['uses' => 'PiggyBank\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('show/{piggyBank}', ['uses' => 'PiggyBank\\ShowController@show', 'as' => 'show']);\n        Route::post('store', ['uses' => 'PiggyBank\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{piggyBank}', ['uses' => 'PiggyBank\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{piggyBank}', ['uses' => 'PiggyBank\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('add/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postAdd', 'as' => 'add']);\n        Route::post('remove/{piggyBank}', ['uses' => 'PiggyBank\\AmountController@postRemove', 'as' => 'remove']);\n\n        Route::post('set-order/{piggyBank}', ['uses' => 'PiggyBank\\IndexController@setOrder', 'as' => 'set-order']);\n    }\n);\n\n/**\n * Preferences Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'preferences', 'as' => 'preferences.'],\n    static function () {\n        Route::get('', ['uses' => 'PreferencesController@index', 'as' => 'index']);\n        Route::post('', ['uses' => 'PreferencesController@postIndex', 'as' => 'update']);\n    }\n);\n\n/**\n * Profile Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'profile', 'as' => 'profile.'],\n    static function () {\n        Route::get('', ['uses' => 'ProfileController@index', 'as' => 'index']);\n        Route::get('change-email', ['uses' => 'ProfileController@changeEmail', 'as' => 'change-email']);\n        Route::get('change-password', ['uses' => 'ProfileController@changePassword', 'as' => 'change-password']);\n        Route::get('delete-account', ['uses' => 'ProfileController@deleteAccount', 'as' => 'delete-account']);\n\n        Route::post('delete-account', ['uses' => 'ProfileController@postDeleteAccount', 'as' => 'delete-account.post']);\n        Route::post('change-password', ['uses' => 'ProfileController@postChangePassword', 'as' => 'change-password.post']);\n        Route::post('change-email', ['uses' => 'ProfileController@postChangeEmail', 'as' => 'change-email.post']);\n        Route::post('regenerate', ['uses' => 'ProfileController@regenerate', 'as' => 'regenerate']);\n\n        Route::get('logout-others', ['uses' => 'ProfileController@logoutOtherSessions', 'as' => 'logout-others']);\n        Route::post('logout-others', ['uses' => 'ProfileController@postLogoutOtherSessions', 'as' => 'logout-others.post']);\n\n        // new 2FA routes\n        Route::post('enable2FA', ['uses' => 'ProfileController@enable2FA', 'as' => 'enable2FA']);\n        Route::get('2fa/code', ['uses' => 'ProfileController@code', 'as' => 'code']);\n        Route::post('2fa/code', ['uses' => 'ProfileController@postCode', 'as' => 'code.store']);\n        Route::get('/delete-code', ['uses' => 'ProfileController@deleteCode', 'as' => 'delete-code']);\n        Route::get('2fa/new-codes', ['uses' => 'ProfileController@newBackupCodes', 'as' => 'new-backup-codes']);\n\n    }\n);\n\n/**\n * Recurring Transactions Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'recurring', 'as' => 'recurring.'],\n    static function () {\n        Route::get('', ['uses' => 'Recurring\\IndexController@index', 'as' => 'index']);\n\n        Route::get('show/{recurrence}', ['uses' => 'Recurring\\ShowController@show', 'as' => 'show']);\n        Route::get('create', ['uses' => 'Recurring\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-transaction/{tj}', ['uses' => 'Recurring\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::get('edit/{recurrence}', ['uses' => 'Recurring\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{recurrence}', ['uses' => 'Recurring\\DeleteController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'Recurring\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{recurrence}', ['uses' => 'Recurring\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{recurrence}', ['uses' => 'Recurring\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // JSON routes:\n        Route::get('events', ['uses' => 'Json\\RecurrenceController@events', 'as' => 'events']);\n        Route::get('suggest', ['uses' => 'Json\\RecurrenceController@suggest', 'as' => 'suggest']);\n    }\n);\n\n/**\n * Report Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'reports', 'as' => 'reports.'],\n    static function () {\n        Route::get('', ['uses' => 'ReportController@index', 'as' => 'index']);\n        Route::get('options/{reportType}', ['uses' => 'ReportController@options', 'as' => 'options']);\n        Route::get('default/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@defaultReport', 'as' => 'report.default']);\n        Route::get('audit/{accountList}/{start_date}/{end_date}', ['uses' => 'ReportController@auditReport', 'as' => 'report.audit']);\n        Route::get('category/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'ReportController@categoryReport', 'as' => 'report.category']);\n        Route::get('budget/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'ReportController@budgetReport', 'as' => 'report.budget']);\n        Route::get('tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'ReportController@tagReport', 'as' => 'report.tag']);\n        Route::get('double/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'ReportController@doubleReport', 'as' => 'report.double']);\n\n        Route::post('', ['uses' => 'ReportController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Report Data AccountController.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/account', 'as' => 'report-data.account.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'AccountController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Bill Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/bill', 'as' => 'report-data.bills.'],\n    static function () {\n        Route::get('overview/{accountList}/{start_date}/{end_date}', ['uses' => 'BillController@overview', 'as' => 'overview']);\n    }\n);\n\n/**\n * Report Double Data Expense / Revenue Account Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/double', 'as' => 'report-data.double.'],\n    static function () {\n\n        // spent + earned per combination.\n        Route::get('operations/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operations', 'as' => 'operations']);\n        Route::get('ops-asset/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@operationsPerAsset', 'as' => 'ops-asset']);\n\n        Route::get('top-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{doubleList}/{start_date}/{end_date}', ['uses' => 'DoubleController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Income/Expenses Controller (called financial operations).\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/operations',\n     'as'         => 'report-data.operations.',],\n    static function () {\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'OperationsController@expenses', 'as' => 'expenses']);\n    }\n);\n\n/**\n * Report Data Category Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/category',\n     'as'         => 'report-data.category.',],\n    static function () {\n\n// See reference nr. 3\n        Route::get('operations/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@operations', 'as' => 'operations']);\n        Route::get('income/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@income', 'as' => 'income']);\n        Route::get('expenses/{accountList}/{start_date}/{end_date}', ['uses' => 'CategoryController@expenses', 'as' => 'expenses']);\n\n        Route::get('accounts/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@accounts', 'as' => 'accounts']);\n        Route::get('categories/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@categories', 'as' => 'categories']);\n        Route::get(\n            'account-per-category/{accountList}/{categoryList}/{start_date}/{end_date}',\n            ['uses' => 'CategoryController@accountPerCategory', 'as' => 'account-per-category']\n        );\n\n        Route::get('top-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{categoryList}/{start_date}/{end_date}', ['uses' => 'CategoryController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data TAG Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/tag',\n     'as'         => 'report-data.tag.',],\n    static function () {\n        Route::get('accounts/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accounts', 'as' => 'accounts']);\n        Route::get('tags/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@tags', 'as' => 'tags']);\n        Route::get('account-per-tag/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@accountPerTag', 'as' => 'account-per-tag']);\n\n        Route::get('top-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgExpenses', 'as' => 'avg-expenses']);\n\n        Route::get('top-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@topIncome', 'as' => 'top-income']);\n        Route::get('avg-income/{accountList}/{tagList}/{start_date}/{end_date}', ['uses' => 'TagController@avgIncome', 'as' => 'avg-income']);\n    }\n);\n\n/**\n * Report Data Balance Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/balance', 'as' => 'report-data.balance.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}', ['uses' => 'BalanceController@general', 'as' => 'general']);\n    }\n);\n\n/**\n * Report Data Budget Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Report', 'prefix' => 'report-data/budget', 'as' => 'report-data.budget.'],\n    static function () {\n        Route::get('general/{accountList}/{start_date}/{end_date}/', ['uses' => 'BudgetController@general', 'as' => 'general']);\n// See reference nr. 4\n        Route::get('period/{accountList}/{start_date}/{end_date}', ['uses' => 'BudgetController@period', 'as' => 'period']);\n\n        Route::get('accounts/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@accounts', 'as' => 'accounts']);\n        Route::get('budgets/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@budgets', 'as' => 'budgets']);\n        Route::get(\n            'account-per-budget/{accountList}/{budgetList}/{start_date}/{end_date}',\n            ['uses' => 'BudgetController@accountPerBudget', 'as' => 'account-per-budget']\n        );\n        Route::get('top-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@topExpenses', 'as' => 'top-expenses']);\n        Route::get('avg-expenses/{accountList}/{budgetList}/{start_date}/{end_date}', ['uses' => 'BudgetController@avgExpenses', 'as' => 'avg-expenses']);\n    }\n);\n\n/**\n * Rules Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rules', 'as' => 'rules.'],\n    static function () {\n\n    // create controller\n        Route::get('create/{ruleGroup?}', ['uses' => 'Rule\\CreateController@create', 'as' => 'create']);\n        Route::get('create-from-bill/{bill}', ['uses' => 'Rule\\CreateController@createFromBill', 'as' => 'create-from-bill']);\n        Route::get('create-from-journal/{tj}', ['uses' => 'Rule\\CreateController@createFromJournal', 'as' => 'create-from-journal']);\n        Route::post('store', ['uses' => 'Rule\\CreateController@store', 'as' => 'store']);\n        Route::get('duplicate/{rule}', ['uses' => 'Rule\\CreateController@duplicate', 'as' => 'duplicate']);\n\n        // delete controller\n        Route::get('delete/{rule}', ['uses' => 'Rule\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{rule}', ['uses' => 'Rule\\DeleteController@destroy', 'as' => 'destroy']);\n\n        // index controller\n        Route::get('', ['uses' => 'Rule\\IndexController@index', 'as' => 'index']);\n\n        Route::post('move-rule/{rule}/{ruleGroup}', ['uses' => 'Rule\\IndexController@moveRule', 'as' => 'move-rule']);\n        // select controller\n        Route::get('test', ['uses' => 'Rule\\SelectController@testTriggers', 'as' => 'test-triggers']);\n        Route::get('test-rule/{rule}', ['uses' => 'Rule\\SelectController@testTriggersByRule', 'as' => 'test-triggers-rule']);\n        Route::get('search/{rule}', ['uses' => 'Rule\\IndexController@search', 'as' => 'search']);\n        Route::get('select/{rule}', ['uses' => 'Rule\\SelectController@selectTransactions', 'as' => 'select-transactions']);\n        Route::post('execute/{rule}', ['uses' => 'Rule\\SelectController@execute', 'as' => 'execute']);\n\n        // edit controller\n        Route::get('edit/{rule}', ['uses' => 'Rule\\EditController@edit', 'as' => 'edit']);\n        Route::post('update/{rule}', ['uses' => 'Rule\\EditController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Rule Groups Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'rule-groups', 'as' => 'rule-groups.'],\n    static function () {\n        Route::get('create', ['uses' => 'RuleGroup\\CreateController@create', 'as' => 'create']);\n        Route::get('edit/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@edit', 'as' => 'edit']);\n        Route::get('delete/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@delete', 'as' => 'delete']);\n        Route::get('up/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@up', 'as' => 'up']);\n        Route::get('down/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@down', 'as' => 'down']);\n        Route::get('select/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@selectTransactions', 'as' => 'select-transactions']);\n\n        Route::post('store', ['uses' => 'RuleGroup\\CreateController@store', 'as' => 'store']);\n        Route::post('update/{ruleGroup}', ['uses' => 'RuleGroup\\EditController@update', 'as' => 'update']);\n        Route::post('destroy/{ruleGroup}', ['uses' => 'RuleGroup\\DeleteController@destroy', 'as' => 'destroy']);\n        Route::post('execute/{ruleGroup}', ['uses' => 'RuleGroup\\ExecutionController@execute', 'as' => 'execute']);\n    }\n);\n\n/**\n * Search Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'search', 'as' => 'search.'],\n    static function () {\n        Route::get('', ['uses' => 'SearchController@index', 'as' => 'index']);\n        Route::any('search', ['uses' => 'SearchController@search', 'as' => 'search']);\n    }\n);\n\n/**\n * Tag Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'tags', 'as' => 'tags.'],\n    static function () {\n        Route::get('', ['uses' => 'TagController@index', 'as' => 'index']);\n        Route::get('create', ['uses' => 'TagController@create', 'as' => 'create']);\n\n        Route::get('show/{tagOrId}/all', ['uses' => 'TagController@showAll', 'as' => 'show.all']);\n        Route::get('show/{tagOrId}/{start_date?}/{end_date?}', ['uses' => 'TagController@show', 'as' => 'show']);\n\n        Route::get('edit/{tag}', ['uses' => 'TagController@edit', 'as' => 'edit']);\n        Route::get('delete/{tag}', ['uses' => 'TagController@delete', 'as' => 'delete']);\n\n        Route::post('store', ['uses' => 'TagController@store', 'as' => 'store']);\n        Route::post('update/{tag}', ['uses' => 'TagController@update', 'as' => 'update']);\n        Route::post('destroy/{tag}', ['uses' => 'TagController@destroy', 'as' => 'destroy']);\n        Route::post('mass-destroy', ['uses' => 'TagController@massDestroy', 'as' => 'mass-destroy']);\n    }\n);\n\n/**\n * Transaction Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers', 'prefix' => 'transactions', 'as' => 'transactions.'],\n    static function () {\n\n    // show groups:\n// See reference nr. 5\n        Route::get('{what}/all', ['uses' => 'Transaction\\IndexController@indexAll', 'as' => 'index.all'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        Route::get('{what}/{start_date?}/{end_date?}', ['uses' => 'Transaction\\IndexController@index', 'as' => 'index'])->where(\n            ['what' => 'withdrawal|deposit|transfers|transfer']\n        );\n\n        // create group:\n        Route::get('create/{objectType}', ['uses' => 'Transaction\\CreateController@create', 'as' => 'create']);\n        Route::post('store', ['uses' => 'Transaction\\CreateController@store', 'as' => 'store']);\n\n        // clone group\n        Route::get('clone/{transactionGroup}', ['uses' => 'Transaction\\CreateController@cloneGroup', 'as' => 'clone']);\n\n        // edit group\n        Route::get('edit/{transactionGroup}', ['uses' => 'Transaction\\EditController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'Transaction\\EditController@update', 'as' => 'update']);\n\n        // delete group\n        Route::get('delete/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@delete', 'as' => 'delete']);\n        Route::post('destroy/{transactionGroup}', ['uses' => 'Transaction\\DeleteController@destroy', 'as' => 'destroy']);\n\n        Route::get('show/{transactionGroup}', ['uses' => 'Transaction\\ShowController@show', 'as' => 'show']);\n        Route::get('debug/{transactionGroup}', ['uses' => 'Transaction\\ShowController@debugShow', 'as' => 'debug']);\n    }\n);\n\n/**\n * Transaction Mass Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/mass', 'as' => 'transactions.mass.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'MassController@edit', 'as' => 'edit']);\n        Route::get('delete/{journalList}', ['uses' => 'MassController@delete', 'as' => 'delete']);\n        Route::post('update', ['uses' => 'MassController@update', 'as' => 'update']);\n        Route::post('destroy', ['uses' => 'MassController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Transaction Bulk Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/bulk', 'as' => 'transactions.bulk.'],\n    static function () {\n        Route::get('edit/{journalList}', ['uses' => 'BulkController@edit', 'as' => 'edit']);\n        Route::post('update', ['uses' => 'BulkController@update', 'as' => 'update']);\n    }\n);\n\n/**\n * Transaction Convert Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/convert',\n     'as'         => 'transactions.convert.',],\n    static function () {\n        Route::get('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@index', 'as' => 'index']);\n        Route::post('{transactionType}/{transactionGroup}', ['uses' => 'ConvertController@postIndex', 'as' => 'index.post']);\n    }\n);\n\n/**\n * Transaction Link Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Transaction', 'prefix' => 'transactions/link', 'as' => 'transactions.link.'],\n    static function () {\n        Route::get('modal/{tj}', ['uses' => 'LinkController@modal', 'as' => 'modal']);\n\n// See reference nr. 6\n        Route::post('store/{tj}', ['uses' => 'LinkController@store', 'as' => 'store']);\n        Route::get('delete/{journalLink}', ['uses' => 'LinkController@delete', 'as' => 'delete']);\n        Route::get('switch/{journalLink}', ['uses' => 'LinkController@switchLink', 'as' => 'switch']);\n\n        Route::post('destroy/{journalLink}', ['uses' => 'LinkController@destroy', 'as' => 'destroy']);\n    }\n);\n\n/**\n * Report Popup Controller.\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Popup', 'prefix' => 'popup', 'as' => 'popup.'],\n    static function () {\n        Route::get('general', ['uses' => 'ReportController@general', 'as' => 'general']);\n    }\n);\n\n/*\n * Webhooks management\n */\nRoute::group(\n    ['middleware' => 'user-full-auth', 'namespace' => 'FireflyIII\\Http\\Controllers\\Webhooks', 'prefix' => 'webhooks', 'as' => 'webhooks.'],\n    static function () {\n        Route::get('index', ['uses' => 'IndexController@index', 'as' => 'index']);\n    }\n);\n\n/**\n * For the admin routes, the user must be logged in and have the role of 'owner'.\n */\nRoute::group(\n    ['middleware' => 'admin', 'namespace' => 'FireflyIII\\Http\\Controllers\\Admin', 'prefix' => 'admin', 'as' => 'admin.'],\n    static function () {\n\n    // admin home\n        Route::get('', ['uses' => 'HomeController@index', 'as' => 'index']);\n        Route::post('test-message', ['uses' => 'HomeController@testMessage', 'as' => 'test-message']);\n\n        // check for updates?\n        Route::get('update-check', ['uses' => 'UpdateController@index', 'as' => 'update-check']);\n        Route::any('update-check/manual', ['uses' => 'UpdateController@updateCheck', 'as' => 'update-check.manual']);\n        Route::post('update-check', ['uses' => 'UpdateController@post', 'as' => 'update-check.post']);\n\n        // user manager\n        Route::get('users', ['uses' => 'UserController@index', 'as' => 'users']);\n        Route::get('users/edit/{user}', ['uses' => 'UserController@edit', 'as' => 'users.edit']);\n        Route::get('users/delete/{user}', ['uses' => 'UserController@delete', 'as' => 'users.delete']);\n        Route::get('users/show/{user}', ['uses' => 'UserController@show', 'as' => 'users.show']);\n\n        Route::post('users/update/{user}', ['uses' => 'UserController@update', 'as' => 'users.update']);\n        Route::post('users/destroy/{user}', ['uses' => 'UserController@destroy', 'as' => 'users.destroy']);\n\n        // journal links manager\n        Route::get('links', ['uses' => 'LinkController@index', 'as' => 'links.index']);\n        Route::get('links/create', ['uses' => 'LinkController@create', 'as' => 'links.create']);\n        Route::get('links/show/{linkType}', ['uses' => 'LinkController@show', 'as' => 'links.show']);\n        Route::get('links/edit/{linkType}', ['uses' => 'LinkController@edit', 'as' => 'links.edit']);\n        Route::get('links/delete/{linkType}', ['uses' => 'LinkController@delete', 'as' => 'links.delete']);\n\n        Route::post('links/store', ['uses' => 'LinkController@store', 'as' => 'links.store']);\n        Route::post('links/update/{linkType}', ['uses' => 'LinkController@update', 'as' => 'links.update']);\n        Route::post('links/destroy/{linkType}', ['uses' => 'LinkController@destroy', 'as' => 'links.destroy']);\n\n        // FF configuration:\n        Route::get('configuration', ['uses' => 'ConfigurationController@index', 'as' => 'configuration.index']);\n        Route::post('configuration', ['uses' => 'ConfigurationController@postIndex', 'as' => 'configuration.index.post']);\n    }\n);\n"], "filenames": ["app/Http/Controllers/Budget/AvailableBudgetController.php", "app/Repositories/Budget/AvailableBudgetRepository.php", "app/Repositories/Budget/AvailableBudgetRepositoryInterface.php", "app/Repositories/Budget/BudgetLimitRepository.php", "public/v1/js/ff/budgets/index.js", "resources/views/v1/budgets/index.twig", "routes/web.php"], "buggy_code_start_loc": [140, 79, 57, 24, 32, 140, 272], "buggy_code_end_loc": [144, 79, 57, 427, 421, 467, 273], "fixing_code_start_loc": [140, 80, 58, 25, 33, 140, 272], "fixing_code_end_loc": [150, 88, 65, 430, 301, 468, 273], "type": "CWE-352", "message": "firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF)", "other": {"cve": {"id": "CVE-2021-3730", "sourceIdentifier": "security@huntr.dev", "published": "2021-08-23T13:15:07.953", "lastModified": "2021-08-26T19:41:42.613", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "firefly-iii is vulnerable to Cross-Site Request Forgery (CSRF)"}, {"lang": "es", "value": "firefly-iii, es vulnerable a un ataque de tipo Cross-Site Request Forgery (CSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:-:*:*:*:*:*:*:*", "matchCriteriaId": "5E8FA4FA-AA2F-407F-815C-4381DD7F273A"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/f80178b1b2b7864d17500a131d570c353c9a26f6", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ea181323-51f8-46a2-a60f-6a401907feb7", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/f80178b1b2b7864d17500a131d570c353c9a26f6"}}