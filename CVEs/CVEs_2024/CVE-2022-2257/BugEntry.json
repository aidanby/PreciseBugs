{"buggy_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * message.c: functions for displaying messages on the command line\n */\n\n#define MESSAGE_FILE\t\t// don't include prototype for smsg()\n\n#include \"vim.h\"\n\nstatic void add_msg_hist(char_u *s, int len, int attr);\nstatic void hit_return_msg(void);\nstatic void msg_home_replace_attr(char_u *fname, int attr);\nstatic void msg_puts_attr_len(char *str, int maxlen, int attr);\nstatic void msg_puts_display(char_u *str, int maxlen, int attr, int recurse);\nstatic void msg_scroll_up(void);\nstatic void inc_msg_scrolled(void);\nstatic void store_sb_text(char_u **sb_str, char_u *s, int attr, int *sb_col, int finish);\nstatic void t_puts(int *t_col, char_u *t_s, char_u *s, int attr);\nstatic void msg_puts_printf(char_u *str, int maxlen);\nstatic int do_more_prompt(int typed_char);\nstatic void msg_screen_putchar(int c, int attr);\nstatic void msg_moremsg(int full);\nstatic int  msg_check_screen(void);\nstatic void redir_write(char_u *s, int maxlen);\n#ifdef FEAT_CON_DIALOG\nstatic char_u *msg_show_console_dialog(char_u *message, char_u *buttons, int dfltbutton);\nstatic int\tconfirm_msg_used = FALSE;\t// displaying confirm_msg\nstatic char_u\t*confirm_msg = NULL;\t\t// \":confirm\" message\nstatic char_u\t*confirm_msg_tail;\t\t// tail of confirm_msg\nstatic void display_confirm_msg(void);\n#endif\n#ifdef FEAT_JOB_CHANNEL\nstatic int emsg_to_channel_log = FALSE;\n#endif\n\nstruct msg_hist\n{\n    struct msg_hist\t*next;\n    char_u\t\t*msg;\n    int\t\t\tattr;\n};\n\nstatic struct msg_hist *first_msg_hist = NULL;\nstatic struct msg_hist *last_msg_hist = NULL;\nstatic int msg_hist_len = 0;\n\nstatic FILE *verbose_fd = NULL;\nstatic int  verbose_did_open = FALSE;\n\n/*\n * When writing messages to the screen, there are many different situations.\n * A number of variables is used to remember the current state:\n * msg_didany\t    TRUE when messages were written since the last time the\n *\t\t    user reacted to a prompt.\n *\t\t    Reset: After hitting a key for the hit-return prompt,\n *\t\t    hitting <CR> for the command line or input().\n *\t\t    Set: When any message is written to the screen.\n * msg_didout\t    TRUE when something was written to the current line.\n *\t\t    Reset: When advancing to the next line, when the current\n *\t\t    text can be overwritten.\n *\t\t    Set: When any message is written to the screen.\n * msg_nowait\t    No extra delay for the last drawn message.\n *\t\t    Used in normal_cmd() before the mode message is drawn.\n * emsg_on_display  There was an error message recently.  Indicates that there\n *\t\t    should be a delay before redrawing.\n * msg_scroll\t    The next message should not overwrite the current one.\n * msg_scrolled\t    How many lines the screen has been scrolled (because of\n *\t\t    messages).  Used in update_screen() to scroll the screen\n *\t\t    back.  Incremented each time the screen scrolls a line.\n * msg_scrolled_ign  TRUE when msg_scrolled is non-zero and msg_puts_attr()\n *\t\t    writes something without scrolling should not make\n *\t\t    need_wait_return to be set.  This is a hack to make \":ts\"\n *\t\t    work without an extra prompt.\n * lines_left\t    Number of lines available for messages before the\n *\t\t    more-prompt is to be given.  -1 when not set.\n * need_wait_return TRUE when the hit-return prompt is needed.\n *\t\t    Reset: After giving the hit-return prompt, when the user\n *\t\t    has answered some other prompt.\n *\t\t    Set: When the ruler or typeahead display is overwritten,\n *\t\t    scrolling the screen for some message.\n * keep_msg\t    Message to be displayed after redrawing the screen, in\n *\t\t    main_loop().\n *\t\t    This is an allocated string or NULL when not used.\n */\n\n/*\n * msg(s) - displays the string 's' on the status line\n * When terminal not initialized (yet) mch_errmsg(..) is used.\n * return TRUE if wait_return not called\n */\n    int\nmsg(char *s)\n{\n    return msg_attr_keep(s, 0, FALSE);\n}\n\n/*\n * Like msg() but keep it silent when 'verbosefile' is set.\n */\n    int\nverb_msg(char *s)\n{\n    int\t\tn;\n\n    verbose_enter();\n    n = msg_attr_keep(s, 0, FALSE);\n    verbose_leave();\n\n    return n;\n}\n\n    int\nmsg_attr(char *s, int attr)\n{\n    return msg_attr_keep(s, attr, FALSE);\n}\n\n    int\nmsg_attr_keep(\n    char\t*s,\n    int\t\tattr,\n    int\t\tkeep)\t    // TRUE: set keep_msg if it doesn't scroll\n{\n    static int\tentered = 0;\n    int\t\tretval;\n    char_u\t*buf = NULL;\n\n    // Skip messages not matching \":filter pattern\".\n    // Don't filter when there is an error.\n    if (!emsg_on_display && message_filtered((char_u *)s))\n\treturn TRUE;\n\n#ifdef FEAT_EVAL\n    if (attr == 0)\n\tset_vim_var_string(VV_STATUSMSG, (char_u *)s, -1);\n#endif\n\n    /*\n     * It is possible that displaying a messages causes a problem (e.g.,\n     * when redrawing the window), which causes another message, etc..\tTo\n     * break this loop, limit the recursiveness to 3 levels.\n     */\n    if (entered >= 3)\n\treturn TRUE;\n    ++entered;\n\n    // Add message to history (unless it's a repeated kept message or a\n    // truncated message)\n    if ((char_u *)s != keep_msg\n\t    || (*s != '<'\n\t\t&& last_msg_hist != NULL\n\t\t&& last_msg_hist->msg != NULL\n\t\t&& STRCMP(s, last_msg_hist->msg)))\n\tadd_msg_hist((char_u *)s, -1, attr);\n\n#ifdef FEAT_JOB_CHANNEL\n    if (emsg_to_channel_log)\n\t// Write message in the channel log.\n\tch_log(NULL, \"ERROR: %s\", s);\n#endif\n\n    // Truncate the message if needed.\n    msg_start();\n    buf = msg_strtrunc((char_u *)s, FALSE);\n    if (buf != NULL)\n\ts = (char *)buf;\n\n    msg_outtrans_attr((char_u *)s, attr);\n    msg_clr_eos();\n    retval = msg_end();\n\n    if (keep && retval && vim_strsize((char_u *)s)\n\t\t\t    < (int)(Rows - cmdline_row - 1) * Columns + sc_col)\n\tset_keep_msg((char_u *)s, 0);\n\n    need_fileinfo = FALSE;\n\n    vim_free(buf);\n    --entered;\n    return retval;\n}\n\n/*\n * Truncate a string such that it can be printed without causing a scroll.\n * Returns an allocated string or NULL when no truncating is done.\n */\n    char_u *\nmsg_strtrunc(\n    char_u\t*s,\n    int\t\tforce)\t    // always truncate\n{\n    char_u\t*buf = NULL;\n    int\t\tlen;\n    int\t\troom;\n\n    // May truncate message to avoid a hit-return prompt\n    if ((!msg_scroll && !need_wait_return && shortmess(SHM_TRUNCALL)\n\t\t\t       && !exmode_active && msg_silent == 0) || force)\n    {\n\tlen = vim_strsize(s);\n\tif (msg_scrolled != 0)\n\t    // Use all the columns.\n\t    room = (int)(Rows - msg_row) * Columns - 1;\n\telse\n\t    // Use up to 'showcmd' column.\n\t    room = (int)(Rows - msg_row - 1) * Columns + sc_col - 1;\n\tif (len > room && room > 0)\n\t{\n\t    if (enc_utf8)\n\t\t// may have up to 18 bytes per cell (6 per char, up to two\n\t\t// composing chars)\n\t\tlen = (room + 2) * 18;\n\t    else if (enc_dbcs == DBCS_JPNU)\n\t\t// may have up to 2 bytes per cell for euc-jp\n\t\tlen = (room + 2) * 2;\n\t    else\n\t\tlen = room + 2;\n\t    buf = alloc(len);\n\t    if (buf != NULL)\n\t\ttrunc_string(s, buf, room, len);\n\t}\n    }\n    return buf;\n}\n\n/*\n * Truncate a string \"s\" to \"buf\" with cell width \"room\".\n * \"s\" and \"buf\" may be equal.\n */\n    void\ntrunc_string(\n    char_u\t*s,\n    char_u\t*buf,\n    int\t\troom_in,\n    int\t\tbuflen)\n{\n    size_t\troom = room_in - 3; // \"...\" takes 3 chars\n    size_t\thalf;\n    size_t\tlen = 0;\n    int\t\te;\n    int\t\ti;\n    int\t\tn;\n\n    if (*s == NUL)\n    {\n\tif (buflen > 0)\n\t    *buf = NUL;\n\treturn;\n    }\n\n    if (room_in < 3)\n\troom = 0;\n    half = room / 2;\n\n    // First part: Start of the string.\n    for (e = 0; len < half && e < buflen; ++e)\n    {\n\tif (s[e] == NUL)\n\t{\n\t    // text fits without truncating!\n\t    buf[e] = NUL;\n\t    return;\n\t}\n\tn = ptr2cells(s + e);\n\tif (len + n > half)\n\t    break;\n\tlen += n;\n\tbuf[e] = s[e];\n\tif (has_mbyte)\n\t    for (n = (*mb_ptr2len)(s + e); --n > 0; )\n\t    {\n\t\tif (++e == buflen)\n\t\t    break;\n\t\tbuf[e] = s[e];\n\t    }\n    }\n\n    // Last part: End of the string.\n    i = e;\n    if (enc_dbcs != 0)\n    {\n\t// For DBCS going backwards in a string is slow, but\n\t// computing the cell width isn't too slow: go forward\n\t// until the rest fits.\n\tn = vim_strsize(s + i);\n\twhile (len + n > room)\n\t{\n\t    n -= ptr2cells(s + i);\n\t    i += (*mb_ptr2len)(s + i);\n\t}\n    }\n    else if (enc_utf8)\n    {\n\t// For UTF-8 we can go backwards easily.\n\thalf = i = (int)STRLEN(s);\n\tfor (;;)\n\t{\n\t    do\n\t\thalf = half - utf_head_off(s, s + half - 1) - 1;\n\t    while (half > 0 && utf_iscomposing(utf_ptr2char(s + half)));\n\t    n = ptr2cells(s + half);\n\t    if (len + n > room || half == 0)\n\t\tbreak;\n\t    len += n;\n\t    i = (int)half;\n\t}\n    }\n    else\n    {\n\tfor (i = (int)STRLEN(s);\n\t\t   i - 1 >= 0 && len + (n = ptr2cells(s + i - 1)) <= room; --i)\n\t    len += n;\n    }\n\n\n    if (i <= e + 3)\n    {\n\t// text fits without truncating\n\tif (s != buf)\n\t{\n\t    len = STRLEN(s);\n\t    if (len >= (size_t)buflen)\n\t\tlen = buflen - 1;\n\t    len = len - e + 1;\n\t    if (len < 1)\n\t\tbuf[e - 1] = NUL;\n\t    else\n\t\tmch_memmove(buf + e, s + e, len);\n\t}\n    }\n    else if (e + 3 < buflen)\n    {\n\t// set the middle and copy the last part\n\tmch_memmove(buf + e, \"...\", (size_t)3);\n\tlen = STRLEN(s + i) + 1;\n\tif (len >= (size_t)buflen - e - 3)\n\t    len = buflen - e - 3 - 1;\n\tmch_memmove(buf + e + 3, s + i, len);\n\tbuf[e + 3 + len - 1] = NUL;\n    }\n    else\n    {\n\t// can't fit in the \"...\", just truncate it\n\tbuf[e - 1] = NUL;\n    }\n}\n\n/*\n * Automatic prototype generation does not understand this function.\n * Note: Caller of smsg() and smsg_attr() must check the resulting string is\n * shorter than IOSIZE!!!\n */\n#ifndef PROTO\n\nint vim_snprintf(char *str, size_t str_m, const char *fmt, ...);\n\n    int\nsmsg(const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg((char *)s);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg((char *)IObuff);\n    }\n}\n\n    int\nsmsg_attr(int attr, const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg_attr((char *)s, attr);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg_attr((char *)IObuff, attr);\n    }\n}\n\n    int\nsmsg_attr_keep(int attr, const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg_attr_keep((char *)s, attr, TRUE);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg_attr_keep((char *)IObuff, attr, TRUE);\n    }\n}\n\n#endif\n\n/*\n * Remember the last sourcing name/lnum used in an error message, so that it\n * isn't printed each time when it didn't change.\n */\nstatic int\tlast_sourcing_lnum = 0;\nstatic char_u   *last_sourcing_name = NULL;\n\n/*\n * Reset the last used sourcing name/lnum.  Makes sure it is displayed again\n * for the next error message;\n */\n    void\nreset_last_sourcing(void)\n{\n    VIM_CLEAR(last_sourcing_name);\n    last_sourcing_lnum = 0;\n}\n\n/*\n * Return TRUE if \"SOURCING_NAME\" differs from \"last_sourcing_name\".\n */\n    static int\nother_sourcing_name(void)\n{\n    if (HAVE_SOURCING_INFO && SOURCING_NAME != NULL)\n    {\n\tif (last_sourcing_name != NULL)\n\t    return STRCMP(SOURCING_NAME, last_sourcing_name) != 0;\n\treturn TRUE;\n    }\n    return FALSE;\n}\n\n/*\n * Get the message about the source, as used for an error message.\n * Returns an allocated string with room for one more character.\n * Returns NULL when no message is to be given.\n */\n    static char_u *\nget_emsg_source(void)\n{\n    char_u\t*Buf, *p;\n\n    if (HAVE_SOURCING_INFO && SOURCING_NAME != NULL && other_sourcing_name())\n    {\n\tchar_u\t    *sname = estack_sfile(ESTACK_NONE);\n\tchar_u\t    *tofree = sname;\n\n\tif (sname == NULL)\n\t    sname = SOURCING_NAME;\n\n#ifdef FEAT_EVAL\n\tif (estack_compiling)\n\t    p = (char_u *)_(\"Error detected while compiling %s:\");\n\telse\n#endif\n\t    p = (char_u *)_(\"Error detected while processing %s:\");\n\tBuf = alloc(STRLEN(sname) + STRLEN(p));\n\tif (Buf != NULL)\n\t    sprintf((char *)Buf, (char *)p, sname);\n\tvim_free(tofree);\n\treturn Buf;\n    }\n    return NULL;\n}\n\n/*\n * Get the message about the source lnum, as used for an error message.\n * Returns an allocated string with room for one more character.\n * Returns NULL when no message is to be given.\n */\n    static char_u *\nget_emsg_lnum(void)\n{\n    char_u\t*Buf, *p;\n\n    // lnum is 0 when executing a command from the command line\n    // argument, we don't want a line number then\n    if (SOURCING_NAME != NULL\n\t    && (other_sourcing_name() || SOURCING_LNUM != last_sourcing_lnum)\n\t    && SOURCING_LNUM != 0)\n    {\n\tp = (char_u *)_(\"line %4ld:\");\n\tBuf = alloc(STRLEN(p) + 20);\n\tif (Buf != NULL)\n\t    sprintf((char *)Buf, (char *)p, (long)SOURCING_LNUM);\n\treturn Buf;\n    }\n    return NULL;\n}\n\n/*\n * Display name and line number for the source of an error.\n * Remember the file name and line number, so that for the next error the info\n * is only displayed if it changed.\n */\n    void\nmsg_source(int attr)\n{\n    char_u\t*p;\n    static int\trecursive = FALSE;\n\n    // Bail out if something called here causes an error.\n    if (recursive)\n\treturn;\n    recursive = TRUE;\n\n    ++no_wait_return;\n    p = get_emsg_source();\n    if (p != NULL)\n    {\n\tmsg_attr((char *)p, attr);\n\tvim_free(p);\n    }\n    p = get_emsg_lnum();\n    if (p != NULL)\n    {\n\tmsg_attr((char *)p, HL_ATTR(HLF_N));\n\tvim_free(p);\n\tlast_sourcing_lnum = SOURCING_LNUM;  // only once for each line\n    }\n\n    // remember the last sourcing name printed, also when it's empty\n    if (SOURCING_NAME == NULL || other_sourcing_name())\n    {\n\tVIM_CLEAR(last_sourcing_name);\n\tif (SOURCING_NAME != NULL)\n\t    last_sourcing_name = vim_strsave(SOURCING_NAME);\n    }\n    --no_wait_return;\n\n    recursive = FALSE;\n}\n\n/*\n * Return TRUE if not giving error messages right now:\n * If \"emsg_off\" is set: no error messages at the moment.\n * If \"msg\" is in 'debug': do error message but without side effects.\n * If \"emsg_skip\" is set: never do error messages.\n */\n    static int\nemsg_not_now(void)\n{\n    if ((emsg_off > 0 && vim_strchr(p_debug, 'm') == NULL\n\t\t\t\t\t  && vim_strchr(p_debug, 't') == NULL)\n#ifdef FEAT_EVAL\n\t    || emsg_skip > 0\n#endif\n\t    )\n\treturn TRUE;\n    return FALSE;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\nstatic garray_T ignore_error_list = GA_EMPTY;\n\n    void\nignore_error_for_testing(char_u *error)\n{\n    if (ignore_error_list.ga_itemsize == 0)\n\tga_init2(&ignore_error_list, sizeof(char_u *), 1);\n\n    if (STRCMP(\"RESET\", error) == 0)\n\tga_clear_strings(&ignore_error_list);\n    else\n\tga_copy_string(&ignore_error_list, error);\n}\n\n    static int\nignore_error(char_u *msg)\n{\n    int i;\n\n    for (i = 0; i < ignore_error_list.ga_len; ++i)\n\tif (strstr((char *)msg,\n\t\t  (char *)((char_u **)(ignore_error_list.ga_data))[i]) != NULL)\n\t    return TRUE;\n    return FALSE;\n}\n#endif\n\n#if !defined(HAVE_STRERROR) || defined(PROTO)\n/*\n * Replacement for perror() that behaves more or less like emsg() was called.\n * v:errmsg will be set and called_emsg will be incremented.\n */\n    void\ndo_perror(char *msg)\n{\n    perror(msg);\n    ++emsg_silent;\n    emsg(msg);\n    --emsg_silent;\n}\n#endif\n\n/*\n * emsg_core() - display an error message\n *\n * Rings the bell, if appropriate, and calls message() to do the real work\n * When terminal not initialized (yet) mch_errmsg(..) is used.\n *\n * Return TRUE if wait_return not called.\n * Note: caller must check 'emsg_not_now()' before calling this.\n */\n    static int\nemsg_core(char_u *s)\n{\n    int\t\tattr;\n    char_u\t*p;\n    int\t\tr;\n#ifdef FEAT_EVAL\n    int\t\tignore = FALSE;\n    int\t\tsevere;\n#endif\n\n#ifdef FEAT_EVAL\n    // When testing some errors are turned into a normal message.\n    if (ignore_error(s))\n\t// don't call msg() if it results in a dialog\n\treturn msg_use_printf() ? FALSE : msg((char *)s);\n#endif\n\n    ++called_emsg;\n\n#ifdef FEAT_EVAL\n    // If \"emsg_severe\" is TRUE: When an error exception is to be thrown,\n    // prefer this message over previous messages for the same command.\n    severe = emsg_severe;\n    emsg_severe = FALSE;\n#endif\n\n    if (!emsg_off || vim_strchr(p_debug, 't') != NULL)\n    {\n#ifdef FEAT_EVAL\n\t/*\n\t * Cause a throw of an error exception if appropriate.  Don't display\n\t * the error message in this case.  (If no matching catch clause will\n\t * be found, the message will be displayed later on.)  \"ignore\" is set\n\t * when the message should be ignored completely (used for the\n\t * interrupt message).\n\t */\n\tif (cause_errthrow(s, severe, &ignore) == TRUE)\n\t{\n\t    if (!ignore)\n\t\t++did_emsg;\n\t    return TRUE;\n\t}\n\n\tif (in_assert_fails && emsg_assert_fails_msg == NULL)\n\t{\n\t    emsg_assert_fails_msg = vim_strsave(s);\n\t    emsg_assert_fails_lnum = SOURCING_LNUM;\n\t    vim_free(emsg_assert_fails_context);\n\t    emsg_assert_fails_context = vim_strsave(\n\t\t\t SOURCING_NAME == NULL ? (char_u *)\"\" : SOURCING_NAME);\n\t}\n\n\t// set \"v:errmsg\", also when using \":silent! cmd\"\n\tset_vim_var_string(VV_ERRMSG, s, -1);\n#endif\n\n\t/*\n\t * When using \":silent! cmd\" ignore error messages.\n\t * But do write it to the redirection file.\n\t */\n\tif (emsg_silent != 0)\n\t{\n#ifdef FEAT_EVAL\n\t    ++did_emsg_silent;\n#endif\n\t    if (emsg_noredir == 0)\n\t    {\n\t\tmsg_start();\n\t\tp = get_emsg_source();\n\t\tif (p != NULL)\n\t\t{\n\t\t    STRCAT(p, \"\\n\");\n\t\t    redir_write(p, -1);\n\t\t    vim_free(p);\n\t\t}\n\t\tp = get_emsg_lnum();\n\t\tif (p != NULL)\n\t\t{\n\t\t    STRCAT(p, \"\\n\");\n\t\t    redir_write(p, -1);\n\t\t    vim_free(p);\n\t\t}\n\t\tredir_write(s, -1);\n\t    }\n#ifdef FEAT_EVAL\n\t    // Only increment did_emsg_def when :silent! wasn't used inside the\n\t    // :def function.\n\t    if (emsg_silent == emsg_silent_def)\n\t\t++did_emsg_def;\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t    ch_log(NULL, \"ERROR silent: %s\", (char *)s);\n#endif\n\t    return TRUE;\n\t}\n\n\tex_exitval = 1;\n\n\t// Reset msg_silent, an error causes messages to be switched back on.\n\tmsg_silent = 0;\n\tcmd_silent = FALSE;\n\n\tif (global_busy)\t\t// break :global command\n\t    ++global_busy;\n\n\tif (p_eb)\n\t    beep_flush();\t\t// also includes flush_buffers()\n\telse\n\t    flush_buffers(FLUSH_MINIMAL);  // flush internal buffers\n\t++did_emsg;\t\t\t   // flag for DoOneCmd()\n#ifdef FEAT_EVAL\n\t++uncaught_emsg;\n#endif\n    }\n\n    emsg_on_display = TRUE;\t// remember there is an error message\n    ++msg_scroll;\t\t// don't overwrite a previous message\n    attr = HL_ATTR(HLF_E);\t// set highlight mode for error messages\n    if (msg_scrolled != 0)\n\tneed_wait_return = TRUE;    // needed in case emsg() is called after\n\t\t\t\t    // wait_return has reset need_wait_return\n\t\t\t\t    // and a redraw is expected because\n\t\t\t\t    // msg_scrolled is non-zero\n\n#ifdef FEAT_JOB_CHANNEL\n    emsg_to_channel_log = TRUE;\n#endif\n    /*\n     * Display name and line number for the source of the error.\n     */\n    msg_source(attr);\n\n    /*\n     * Display the error message itself.\n     */\n    msg_nowait = FALSE;\t\t\t// wait for this msg\n    r = msg_attr((char *)s, attr);\n\n#ifdef FEAT_JOB_CHANNEL\n    emsg_to_channel_log = FALSE;\n#endif\n    return r;\n}\n\n/*\n * Print an error message.\n */\n    int\nemsg(char *s)\n{\n    // Skip this if not giving error messages at the moment.\n    if (!emsg_not_now())\n\treturn emsg_core((char_u *)s);\n    return TRUE;\t\t// no error messages at the moment\n}\n\n#ifndef PROTO  // manual proto with __attribute__\n/*\n * Print an error message with format string and variable arguments.\n * Note: caller must not pass 'IObuff' as 1st argument.\n */\n    int\nsemsg(const char *s, ...)\n{\n    // Skip this if not giving error messages at the moment.\n    if (!emsg_not_now())\n    {\n\tif (IObuff == NULL)\n\t{\n\t    // Very early in initialisation and already something wrong, just\n\t    // give the raw message so the user at least gets a hint.\n\t    return emsg_core((char_u *)s);\n\t}\n\telse\n\t{\n\t    va_list ap;\n\n\t    va_start(ap, s);\n\t    vim_vsnprintf((char *)IObuff, IOSIZE, s, ap);\n\t    va_end(ap);\n\t    return emsg_core(IObuff);\n\t}\n    }\n    return TRUE;\t\t// no error messages at the moment\n}\n#endif\n\n/*\n * Same as emsg(...), but abort on error when ABORT_ON_INTERNAL_ERROR is\n * defined. It is used for internal errors only, so that they can be\n * detected when fuzzing vim.\n */\n    void\niemsg(char *s)\n{\n    if (!emsg_not_now())\n    {\n\temsg_core((char_u *)s);\n#if defined(ABORT_ON_INTERNAL_ERROR) && defined(FEAT_EVAL)\n\tset_vim_var_string(VV_ERRMSG, (char_u *)s, -1);\n\tabort();\n#endif\n    }\n}\n\n#ifndef PROTO  // manual proto with __attribute__\n/*\n * Same as semsg(...) but abort on error when ABORT_ON_INTERNAL_ERROR is\n * defined. It is used for internal errors only, so that they can be\n * detected when fuzzing vim.\n * Note: caller must not pass 'IObuff' as 1st argument.\n */\n    void\nsiemsg(const char *s, ...)\n{\n    if (!emsg_not_now())\n    {\n\tif (IObuff == NULL)\n\t{\n\t    // Very early in initialisation and already something wrong, just\n\t    // give the raw message so the user at least gets a hint.\n\t    emsg_core((char_u *)s);\n\t}\n\telse\n\t{\n\t    va_list ap;\n\n\t    va_start(ap, s);\n\t    vim_vsnprintf((char *)IObuff, IOSIZE, s, ap);\n\t    va_end(ap);\n\t    emsg_core(IObuff);\n\t}\n    }\n# ifdef ABORT_ON_INTERNAL_ERROR\n    abort();\n# endif\n}\n#endif\n\n/*\n * Give an \"Internal error\" message.\n */\n    void\ninternal_error(char *where)\n{\n    siemsg(_(e_internal_error_str), where);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Like internal_error() but do not call abort(), to avoid tests using\n * test_unknown() and test_void() causing Vim to exit.\n */\n    void\ninternal_error_no_abort(char *where)\n{\n     semsg(_(e_internal_error_str), where);\n}\n#endif\n\n// emsg3() and emsgn() are in misc2.c to avoid warnings for the prototypes.\n\n    void\nemsg_invreg(int name)\n{\n    semsg(_(e_invalid_register_name_str), transchar(name));\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Give an error message which contains %s for \"name[len]\".\n */\n    void\nemsg_namelen(char *msg, char_u *name, int len)\n{\n    char_u *copy = vim_strnsave(name, len);\n\n    semsg(msg, copy == NULL ? \"NULL\" : (char *)copy);\n    vim_free(copy);\n}\n#endif\n\n/*\n * Like msg(), but truncate to a single line if p_shm contains 't', or when\n * \"force\" is TRUE.  This truncates in another way as for normal messages.\n * Careful: The string may be changed by msg_may_trunc()!\n * Returns a pointer to the printed message, if wait_return() not called.\n */\n    char *\nmsg_trunc_attr(char *s, int force, int attr)\n{\n    int\t\tn;\n    char\t*ts;\n\n    // Add message to history before truncating\n    add_msg_hist((char_u *)s, -1, attr);\n\n    ts = (char *)msg_may_trunc(force, (char_u *)s);\n\n    msg_hist_off = TRUE;\n    n = msg_attr(ts, attr);\n    msg_hist_off = FALSE;\n\n    if (n)\n\treturn ts;\n    return NULL;\n}\n\n/*\n * Check if message \"s\" should be truncated at the start (for filenames).\n * Return a pointer to where the truncated message starts.\n * Note: May change the message by replacing a character with '<'.\n */\n    char_u *\nmsg_may_trunc(int force, char_u *s)\n{\n    int\t\tn;\n    int\t\troom;\n\n    // If something unexpected happened \"room\" may be negative, check for that\n    // just in case.\n    room = (int)(Rows - cmdline_row - 1) * Columns + sc_col - 1;\n    if (room > 0 && (force || (shortmess(SHM_TRUNC) && !exmode_active))\n\t    && (n = (int)STRLEN(s) - room) > 0)\n    {\n\tif (has_mbyte)\n\t{\n\t    int\tsize = vim_strsize(s);\n\n\t    // There may be room anyway when there are multibyte chars.\n\t    if (size <= room)\n\t\treturn s;\n\n\t    for (n = 0; size >= room; )\n\t    {\n\t\tsize -= (*mb_ptr2cells)(s + n);\n\t\tn += (*mb_ptr2len)(s + n);\n\t    }\n\t    --n;\n\t}\n\ts += n;\n\t*s = '<';\n    }\n    return s;\n}\n\n    static void\nadd_msg_hist(\n    char_u\t*s,\n    int\t\tlen,\t\t// -1 for undetermined length\n    int\t\tattr)\n{\n    struct msg_hist *p;\n\n    if (msg_hist_off || msg_silent != 0)\n\treturn;\n\n    // Don't let the message history get too big\n    while (msg_hist_len > MAX_MSG_HIST_LEN)\n\t(void)delete_first_msg();\n\n    // allocate an entry and add the message at the end of the history\n    p = ALLOC_ONE(struct msg_hist);\n    if (p != NULL)\n    {\n\tif (len < 0)\n\t    len = (int)STRLEN(s);\n\t// remove leading and trailing newlines\n\twhile (len > 0 && *s == '\\n')\n\t{\n\t    ++s;\n\t    --len;\n\t}\n\twhile (len > 0 && s[len - 1] == '\\n')\n\t    --len;\n\tp->msg = vim_strnsave(s, len);\n\tp->next = NULL;\n\tp->attr = attr;\n\tif (last_msg_hist != NULL)\n\t    last_msg_hist->next = p;\n\tlast_msg_hist = p;\n\tif (first_msg_hist == NULL)\n\t    first_msg_hist = last_msg_hist;\n\t++msg_hist_len;\n    }\n}\n\n/*\n * Delete the first (oldest) message from the history.\n * Returns FAIL if there are no messages.\n */\n    int\ndelete_first_msg(void)\n{\n    struct msg_hist *p;\n\n    if (msg_hist_len <= 0)\n\treturn FAIL;\n    p = first_msg_hist;\n    first_msg_hist = p->next;\n    if (first_msg_hist == NULL)\n\tlast_msg_hist = NULL;  // history is empty\n    vim_free(p->msg);\n    vim_free(p);\n    --msg_hist_len;\n    return OK;\n}\n\n/*\n * \":messages\" command.\n */\n    void\nex_messages(exarg_T *eap)\n{\n    struct msg_hist *p;\n    char_u\t    *s;\n    int\t\t    c = 0;\n\n    if (STRCMP(eap->arg, \"clear\") == 0)\n    {\n\tint keep = eap->addr_count == 0 ? 0 : eap->line2;\n\n\twhile (msg_hist_len > keep)\n\t    (void)delete_first_msg();\n\treturn;\n    }\n\n    if (*eap->arg != NUL)\n    {\n\temsg(_(e_invalid_argument));\n\treturn;\n    }\n\n    msg_hist_off = TRUE;\n\n    p = first_msg_hist;\n    if (eap->addr_count != 0)\n    {\n\t// Count total messages\n\tfor (; p != NULL && !got_int; p = p->next)\n\t    c++;\n\n\tc -= eap->line2;\n\n\t// Skip without number of messages specified\n\tfor (p = first_msg_hist; p != NULL && !got_int && c > 0;\n\t\t\t\t\t\t    p = p->next, c--);\n    }\n\n    if (p == first_msg_hist)\n    {\n#ifdef FEAT_MULTI_LANG\n\ts = get_mess_lang();\n#else\n\ts = mch_getenv((char_u *)\"LANG\");\n#endif\n\tif (s != NULL && *s != NUL)\n\t    // The next comment is extracted by xgettext and put in po file for\n\t    // translators to read.\n\t    msg_attr(\n\t\t    // Translator: Please replace the name and email address\n\t\t    // with the appropriate text for your translation.\n\t\t    _(\"Messages maintainer: Bram Moolenaar <Bram@vim.org>\"),\n\t\t    HL_ATTR(HLF_T));\n    }\n\n    // Display what was not skipped.\n    for (; p != NULL && !got_int; p = p->next)\n\tif (p->msg != NULL)\n\t    msg_attr((char *)p->msg, p->attr);\n\n    msg_hist_off = FALSE;\n}\n\n#if defined(FEAT_CON_DIALOG) || defined(FIND_REPLACE_DIALOG) || defined(PROTO)\n/*\n * Call this after prompting the user.  This will avoid a hit-return message\n * and a delay.\n */\n    void\nmsg_end_prompt(void)\n{\n    need_wait_return = FALSE;\n    emsg_on_display = FALSE;\n    cmdline_row = msg_row;\n    msg_col = 0;\n    msg_clr_eos();\n    lines_left = -1;\n}\n#endif\n\n/*\n * Wait for the user to hit a key (normally Enter).\n * If \"redraw\" is TRUE, clear and redraw the screen.\n * If \"redraw\" is FALSE, just redraw the screen.\n * If \"redraw\" is -1, don't redraw at all.\n */\n    void\nwait_return(int redraw)\n{\n    int\t\tc;\n    int\t\toldState;\n    int\t\ttmpState;\n    int\t\thad_got_int;\n    int\t\tsave_reg_recording;\n    FILE\t*save_scriptout;\n\n    if (redraw == TRUE)\n\tmust_redraw = CLEAR;\n\n    // If using \":silent cmd\", don't wait for a return.  Also don't set\n    // need_wait_return to do it later.\n    if (msg_silent != 0)\n\treturn;\n\n    /*\n     * When inside vgetc(), we can't wait for a typed character at all.\n     * With the global command (and some others) we only need one return at\n     * the end. Adjust cmdline_row to avoid the next message overwriting the\n     * last one.\n     */\n    if (vgetc_busy > 0)\n\treturn;\n    need_wait_return = TRUE;\n    if (no_wait_return)\n    {\n\tif (!exmode_active)\n\t    cmdline_row = msg_row;\n\treturn;\n    }\n\n    redir_off = TRUE;\t\t// don't redirect this message\n    oldState = State;\n    if (quit_more)\n    {\n\tc = CAR;\t\t// just pretend CR was hit\n\tquit_more = FALSE;\n\tgot_int = FALSE;\n    }\n    else if (exmode_active)\n    {\n\tmsg_puts(\" \");\t\t// make sure the cursor is on the right line\n\tc = CAR;\t\t// no need for a return in ex mode\n\tgot_int = FALSE;\n    }\n    else\n    {\n\t// Make sure the hit-return prompt is on screen when 'guioptions' was\n\t// just changed.\n\tscreenalloc(FALSE);\n\n\tState = MODE_HITRETURN;\n\tsetmouse();\n#ifdef USE_ON_FLY_SCROLL\n\tdont_scroll = TRUE;\t\t// disallow scrolling here\n#endif\n\tcmdline_row = msg_row;\n\n\t// Avoid the sequence that the user types \":\" at the hit-return prompt\n\t// to start an Ex command, but the file-changed dialog gets in the\n\t// way.\n\tif (need_check_timestamps)\n\t    check_timestamps(FALSE);\n\n\thit_return_msg();\n\n\tdo\n\t{\n\t    // Remember \"got_int\", if it is set vgetc() probably returns a\n\t    // CTRL-C, but we need to loop then.\n\t    had_got_int = got_int;\n\n\t    // Don't do mappings here, we put the character back in the\n\t    // typeahead buffer.\n\t    ++no_mapping;\n\t    ++allow_keys;\n\n\t    // Temporarily disable Recording. If Recording is active, the\n\t    // character will be recorded later, since it will be added to the\n\t    // typebuf after the loop\n\t    save_reg_recording = reg_recording;\n\t    save_scriptout = scriptout;\n\t    reg_recording = 0;\n\t    scriptout = NULL;\n\t    c = safe_vgetc();\n\t    if (had_got_int && !global_busy)\n\t\tgot_int = FALSE;\n\t    --no_mapping;\n\t    --allow_keys;\n\t    reg_recording = save_reg_recording;\n\t    scriptout = save_scriptout;\n\n#ifdef FEAT_CLIPBOARD\n\t    // Strange way to allow copying (yanking) a modeless selection at\n\t    // the hit-enter prompt.  Use CTRL-Y, because the same is used in\n\t    // Cmdline-mode and it's harmless when there is no selection.\n\t    if (c == Ctrl_Y && clip_star.state == SELECT_DONE)\n\t    {\n\t\tclip_copy_modeless_selection(TRUE);\n\t\tc = K_IGNORE;\n\t    }\n#endif\n\n\t    /*\n\t     * Allow scrolling back in the messages.\n\t     * Also accept scroll-down commands when messages fill the screen,\n\t     * to avoid that typing one 'j' too many makes the messages\n\t     * disappear.\n\t     */\n\t    if (p_more && !p_cp)\n\t    {\n\t\tif (c == 'b' || c == 'k' || c == 'u' || c == 'g'\n\t\t\t\t\t\t|| c == K_UP || c == K_PAGEUP)\n\t\t{\n\t\t    if (msg_scrolled > Rows)\n\t\t\t// scroll back to show older messages\n\t\t\tdo_more_prompt(c);\n\t\t    else\n\t\t    {\n\t\t\tmsg_didout = FALSE;\n\t\t\tc = K_IGNORE;\n\t\t\tmsg_col =\n#ifdef FEAT_RIGHTLEFT\n\t\t\t    cmdmsg_rl ? Columns - 1 :\n#endif\n\t\t\t    0;\n\t\t    }\n\t\t    if (quit_more)\n\t\t    {\n\t\t\tc = CAR;\t\t// just pretend CR was hit\n\t\t\tquit_more = FALSE;\n\t\t\tgot_int = FALSE;\n\t\t    }\n\t\t    else if (c != K_IGNORE)\n\t\t    {\n\t\t\tc = K_IGNORE;\n\t\t\thit_return_msg();\n\t\t    }\n\t\t}\n\t\telse if (msg_scrolled > Rows - 2\n\t\t\t && (c == 'j' || c == 'd' || c == 'f'\n\t\t\t\t\t   || c == K_DOWN || c == K_PAGEDOWN))\n\t\t    c = K_IGNORE;\n\t    }\n\t} while ((had_got_int && c == Ctrl_C)\n\t\t\t\t|| c == K_IGNORE\n#ifdef FEAT_GUI\n\t\t\t\t|| c == K_VER_SCROLLBAR || c == K_HOR_SCROLLBAR\n#endif\n\t\t\t\t|| c == K_LEFTDRAG   || c == K_LEFTRELEASE\n\t\t\t\t|| c == K_MIDDLEDRAG || c == K_MIDDLERELEASE\n\t\t\t\t|| c == K_RIGHTDRAG  || c == K_RIGHTRELEASE\n\t\t\t\t|| c == K_MOUSELEFT  || c == K_MOUSERIGHT\n\t\t\t\t|| c == K_MOUSEDOWN  || c == K_MOUSEUP\n\t\t\t\t|| c == K_MOUSEMOVE\n\t\t\t\t|| (!mouse_has(MOUSE_RETURN)\n\t\t\t\t    && mouse_row < msg_row\n\t\t\t\t    && (c == K_LEFTMOUSE\n\t\t\t\t\t|| c == K_MIDDLEMOUSE\n\t\t\t\t\t|| c == K_RIGHTMOUSE\n\t\t\t\t\t|| c == K_X1MOUSE\n\t\t\t\t\t|| c == K_X2MOUSE))\n\t\t\t\t);\n\tui_breakcheck();\n\t/*\n\t * Avoid that the mouse-up event causes visual mode to start.\n\t */\n\tif (c == K_LEFTMOUSE || c == K_MIDDLEMOUSE || c == K_RIGHTMOUSE\n\t\t\t\t\t  || c == K_X1MOUSE || c == K_X2MOUSE)\n\t    (void)jump_to_mouse(MOUSE_SETPOS, NULL, 0);\n\telse if (vim_strchr((char_u *)\"\\r\\n \", c) == NULL && c != Ctrl_C)\n\t{\n\t    // Put the character back in the typeahead buffer.  Don't use the\n\t    // stuff buffer, because lmaps wouldn't work.\n\t    ins_char_typebuf(vgetc_char, vgetc_mod_mask);\n\t    do_redraw = TRUE;\t    // need a redraw even though there is\n\t\t\t\t    // typeahead\n\t}\n    }\n    redir_off = FALSE;\n\n    /*\n     * If the user hits ':', '?' or '/' we get a command line from the next\n     * line.\n     */\n    if (c == ':' || c == '?' || c == '/')\n    {\n\tif (!exmode_active)\n\t    cmdline_row = msg_row;\n\tskip_redraw = TRUE;\t    // skip redraw once\n\tdo_redraw = FALSE;\n#ifdef FEAT_TERMINAL\n\tskip_term_loop = TRUE;\n#endif\n    }\n\n    /*\n     * If the window size changed set_shellsize() will redraw the screen.\n     * Otherwise the screen is only redrawn if 'redraw' is set and no ':'\n     * typed.\n     */\n    tmpState = State;\n    State = oldState;\t\t    // restore State before set_shellsize\n    setmouse();\n    msg_check();\n\n#if defined(UNIX) || defined(VMS)\n    /*\n     * When switching screens, we need to output an extra newline on exit.\n     */\n    if (swapping_screen() && !termcap_active)\n\tnewline_on_exit = TRUE;\n#endif\n\n    need_wait_return = FALSE;\n    did_wait_return = TRUE;\n    emsg_on_display = FALSE;\t// can delete error message now\n    lines_left = -1;\t\t// reset lines_left at next msg_start()\n    reset_last_sourcing();\n    if (keep_msg != NULL && vim_strsize(keep_msg) >=\n\t\t\t\t  (Rows - cmdline_row - 1) * Columns + sc_col)\n\tVIM_CLEAR(keep_msg);\t    // don't redisplay message, it's too long\n\n    if (tmpState == MODE_SETWSIZE)  // got resize event while in vgetc()\n    {\n\tstarttermcap();\t\t    // start termcap before redrawing\n\tshell_resized();\n    }\n    else if (!skip_redraw\n\t    && (redraw == TRUE || (msg_scrolled != 0 && redraw != -1)))\n    {\n\tstarttermcap();\t\t    // start termcap before redrawing\n\tredraw_later(VALID);\n    }\n}\n\n/*\n * Write the hit-return prompt.\n */\n    static void\nhit_return_msg(void)\n{\n    int\t\tsave_p_more = p_more;\n\n    p_more = FALSE;\t// don't want to see this message when scrolling back\n    if (msg_didout)\t// start on a new line\n\tmsg_putchar('\\n');\n    if (got_int)\n\tmsg_puts(_(\"Interrupt: \"));\n\n    msg_puts_attr(_(\"Press ENTER or type command to continue\"), HL_ATTR(HLF_R));\n    if (!msg_use_printf())\n\tmsg_clr_eos();\n    p_more = save_p_more;\n}\n\n/*\n * Set \"keep_msg\" to \"s\".  Free the old value and check for NULL pointer.\n */\n    void\nset_keep_msg(char_u *s, int attr)\n{\n    vim_free(keep_msg);\n    if (s != NULL && msg_silent == 0)\n\tkeep_msg = vim_strsave(s);\n    else\n\tkeep_msg = NULL;\n    keep_msg_more = FALSE;\n    keep_msg_attr = attr;\n}\n\n#if defined(FEAT_TERMRESPONSE) || defined(PROTO)\n/*\n * If there currently is a message being displayed, set \"keep_msg\" to it, so\n * that it will be displayed again after redraw.\n */\n    void\nset_keep_msg_from_hist(void)\n{\n    if (keep_msg == NULL && last_msg_hist != NULL && msg_scrolled == 0\n\t\t\t\t\t\t      && (State & MODE_NORMAL))\n\tset_keep_msg(last_msg_hist->msg, last_msg_hist->attr);\n}\n#endif\n\n/*\n * Prepare for outputting characters in the command line.\n */\n    void\nmsg_start(void)\n{\n    int\t\tdid_return = FALSE;\n\n    if (!msg_silent)\n    {\n\tVIM_CLEAR(keep_msg);\n\tneed_fileinfo = FALSE;\n    }\n\n#ifdef FEAT_EVAL\n    if (need_clr_eos)\n    {\n\t// Halfway an \":echo\" command and getting an (error) message: clear\n\t// any text from the command.\n\tneed_clr_eos = FALSE;\n\tmsg_clr_eos();\n    }\n#endif\n\n    if (!msg_scroll && full_screen)\t// overwrite last message\n    {\n\tmsg_row = cmdline_row;\n\tmsg_col =\n#ifdef FEAT_RIGHTLEFT\n\t    cmdmsg_rl ? Columns - 1 :\n#endif\n\t    0;\n    }\n    else if (msg_didout)\t\t    // start message on next line\n    {\n\tmsg_putchar('\\n');\n\tdid_return = TRUE;\n\tif (exmode_active != EXMODE_NORMAL)\n\t    cmdline_row = msg_row;\n    }\n    if (!msg_didany || lines_left < 0)\n\tmsg_starthere();\n    if (msg_silent == 0)\n    {\n\tmsg_didout = FALSE;\t\t    // no output on current line yet\n\tcursor_off();\n    }\n\n    // when redirecting, may need to start a new line.\n    if (!did_return)\n\tredir_write((char_u *)\"\\n\", -1);\n}\n\n/*\n * Note that the current msg position is where messages start.\n */\n    void\nmsg_starthere(void)\n{\n    lines_left = cmdline_row;\n    msg_didany = FALSE;\n}\n\n    void\nmsg_putchar(int c)\n{\n    msg_putchar_attr(c, 0);\n}\n\n    void\nmsg_putchar_attr(int c, int attr)\n{\n    char_u\tbuf[MB_MAXBYTES + 1];\n\n    if (IS_SPECIAL(c))\n    {\n\tbuf[0] = K_SPECIAL;\n\tbuf[1] = K_SECOND(c);\n\tbuf[2] = K_THIRD(c);\n\tbuf[3] = NUL;\n    }\n    else\n\tbuf[(*mb_char2bytes)(c, buf)] = NUL;\n    msg_puts_attr((char *)buf, attr);\n}\n\n    void\nmsg_outnum(long n)\n{\n    char\tbuf[20];\n\n    sprintf(buf, \"%ld\", n);\n    msg_puts(buf);\n}\n\n    void\nmsg_home_replace(char_u *fname)\n{\n    msg_home_replace_attr(fname, 0);\n}\n\n#if defined(FEAT_FIND_ID) || defined(PROTO)\n    void\nmsg_home_replace_hl(char_u *fname)\n{\n    msg_home_replace_attr(fname, HL_ATTR(HLF_D));\n}\n#endif\n\n    static void\nmsg_home_replace_attr(char_u *fname, int attr)\n{\n    char_u\t*name;\n\n    name = home_replace_save(NULL, fname);\n    if (name != NULL)\n\tmsg_outtrans_attr(name, attr);\n    vim_free(name);\n}\n\n/*\n * Output 'len' characters in 'str' (including NULs) with translation\n * if 'len' is -1, output up to a NUL character.\n * Use attributes 'attr'.\n * Return the number of characters it takes on the screen.\n */\n    int\nmsg_outtrans(char_u *str)\n{\n    return msg_outtrans_attr(str, 0);\n}\n\n    int\nmsg_outtrans_attr(char_u *str, int attr)\n{\n    return msg_outtrans_len_attr(str, (int)STRLEN(str), attr);\n}\n\n    int\nmsg_outtrans_len(char_u *str, int len)\n{\n    return msg_outtrans_len_attr(str, len, 0);\n}\n\n/*\n * Output one character at \"p\".  Return pointer to the next character.\n * Handles multi-byte characters.\n */\n    char_u *\nmsg_outtrans_one(char_u *p, int attr)\n{\n    int\t\tl;\n\n    if (has_mbyte && (l = (*mb_ptr2len)(p)) > 1)\n    {\n\tmsg_outtrans_len_attr(p, l, attr);\n\treturn p + l;\n    }\n    msg_puts_attr((char *)transchar_byte(*p), attr);\n    return p + 1;\n}\n\n    int\nmsg_outtrans_len_attr(char_u *msgstr, int len, int attr)\n{\n    int\t\tretval = 0;\n    char_u\t*str = msgstr;\n    char_u\t*plain_start = msgstr;\n    char_u\t*s;\n    int\t\tmb_l;\n    int\t\tc;\n    int\t\tsave_got_int = got_int;\n\n    // Only quit when got_int was set in here.\n    got_int = FALSE;\n\n    // if MSG_HIST flag set, add message to history\n    if (attr & MSG_HIST)\n    {\n\tadd_msg_hist(str, len, attr);\n\tattr &= ~MSG_HIST;\n    }\n\n    // If the string starts with a composing character first draw a space on\n    // which the composing char can be drawn.\n    if (enc_utf8 && utf_iscomposing(utf_ptr2char(msgstr)))\n\tmsg_puts_attr(\" \", attr);\n\n    /*\n     * Go over the string.  Special characters are translated and printed.\n     * Normal characters are printed several at a time.\n     */\n    while (--len >= 0 && !got_int)\n    {\n\tif (enc_utf8)\n\t    // Don't include composing chars after the end.\n\t    mb_l = utfc_ptr2len_len(str, len + 1);\n\telse if (has_mbyte)\n\t    mb_l = (*mb_ptr2len)(str);\n\telse\n\t    mb_l = 1;\n\tif (has_mbyte && mb_l > 1)\n\t{\n\t    c = (*mb_ptr2char)(str);\n\t    if (vim_isprintc(c))\n\t\t// printable multi-byte char: count the cells.\n\t\tretval += (*mb_ptr2cells)(str);\n\t    else\n\t    {\n\t\t// unprintable multi-byte char: print the printable chars so\n\t\t// far and the translation of the unprintable char.\n\t\tif (str > plain_start)\n\t\t    msg_puts_attr_len((char *)plain_start,\n\t\t\t\t\t       (int)(str - plain_start), attr);\n\t\tplain_start = str + mb_l;\n\t\tmsg_puts_attr((char *)transchar(c),\n\t\t\t\t\t    attr == 0 ? HL_ATTR(HLF_8) : attr);\n\t\tretval += char2cells(c);\n\t    }\n\t    len -= mb_l - 1;\n\t    str += mb_l;\n\t}\n\telse\n\t{\n\t    s = transchar_byte(*str);\n\t    if (s[1] != NUL)\n\t    {\n\t\t// unprintable char: print the printable chars so far and the\n\t\t// translation of the unprintable char.\n\t\tif (str > plain_start)\n\t\t    msg_puts_attr_len((char *)plain_start,\n\t\t\t\t\t       (int)(str - plain_start), attr);\n\t\tplain_start = str + 1;\n\t\tmsg_puts_attr((char *)s, attr == 0 ? HL_ATTR(HLF_8) : attr);\n\t\tretval += (int)STRLEN(s);\n\t    }\n\t    else\n\t\t++retval;\n\t    ++str;\n\t}\n    }\n\n    if (str > plain_start && !got_int)\n\t// print the printable chars at the end\n\tmsg_puts_attr_len((char *)plain_start, (int)(str - plain_start), attr);\n\n    got_int |= save_got_int;\n\n    return retval;\n}\n\n#if defined(FEAT_QUICKFIX) || defined(PROTO)\n    void\nmsg_make(char_u *arg)\n{\n    int\t    i;\n    static char_u *str = (char_u *)\"eeffoc\", *rs = (char_u *)\"Plon#dqg#vxjduB\";\n\n    arg = skipwhite(arg);\n    for (i = 5; *arg && i >= 0; --i)\n\tif (*arg++ != str[i])\n\t    break;\n    if (i < 0)\n    {\n\tmsg_putchar('\\n');\n\tfor (i = 0; rs[i]; ++i)\n\t    msg_putchar(rs[i] - 3);\n    }\n}\n#endif\n\n/*\n * Output the string 'str' up to a NUL character.\n * Return the number of characters it takes on the screen.\n *\n * If K_SPECIAL is encountered, then it is taken in conjunction with the\n * following character and shown as <F1>, <S-Up> etc.  Any other character\n * which is not printable shown in <> form.\n * If 'from' is TRUE (lhs of a mapping), a space is shown as <Space>.\n * If a character is displayed in one of these special ways, is also\n * highlighted (its highlight name is '8' in the p_hl variable).\n * Otherwise characters are not highlighted.\n * This function is used to show mappings, where we want to see how to type\n * the character/string -- webb\n */\n    int\nmsg_outtrans_special(\n    char_u\t*strstart,\n    int\t\tfrom,\t// TRUE for lhs of a mapping\n    int\t\tmaxlen) // screen columns, 0 for unlimited\n{\n    char_u\t*str = strstart;\n    int\t\tretval = 0;\n    char\t*text;\n    int\t\tattr;\n    int\t\tlen;\n\n    attr = HL_ATTR(HLF_8);\n    while (*str != NUL)\n    {\n\t// Leading and trailing spaces need to be displayed in <> form.\n\tif ((str == strstart || str[1] == NUL) && *str == ' ')\n\t{\n\t    text = \"<Space>\";\n\t    ++str;\n\t}\n\telse\n\t    text = (char *)str2special(&str, from);\n\tif (text[0] != NUL && text[1] == NUL)\n\t    // single-byte character or illegal byte\n\t    text = (char *)transchar_byte((char_u)text[0]);\n\tlen = vim_strsize((char_u *)text);\n\tif (maxlen > 0 && retval + len >= maxlen)\n\t    break;\n\t// Highlight special keys\n\tmsg_puts_attr(text, len > 1\n\t\t&& (*mb_ptr2len)((char_u *)text) <= 1 ? attr : 0);\n\tretval += len;\n    }\n    return retval;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return the lhs or rhs of a mapping, with the key codes turned into printable\n * strings, in an allocated string.\n */\n    char_u *\nstr2special_save(\n    char_u  *str,\n    int\t    is_lhs)  // TRUE for lhs, FALSE for rhs\n{\n    garray_T\tga;\n    char_u\t*p = str;\n\n    ga_init2(&ga, 1, 40);\n    while (*p != NUL)\n\tga_concat(&ga, str2special(&p, is_lhs));\n    ga_append(&ga, NUL);\n    return (char_u *)ga.ga_data;\n}\n#endif\n\n/*\n * Return the printable string for the key codes at \"*sp\".\n * On illegal byte return a string with only that byte.\n * Used for translating the lhs or rhs of a mapping to printable chars.\n * Advances \"sp\" to the next code.\n */\n    char_u *\nstr2special(\n    char_u\t**sp,\n    int\t\tfrom)\t// TRUE for lhs of mapping\n{\n    int\t\t\tc;\n    static char_u\tbuf[7];\n    char_u\t\t*str = *sp;\n    int\t\t\tmodifiers = 0;\n    int\t\t\tspecial = FALSE;\n\n    if (has_mbyte)\n    {\n\tchar_u\t*p;\n\n\t// Try to un-escape a multi-byte character.  Return the un-escaped\n\t// string if it is a multi-byte character.\n\tp = mb_unescape(sp);\n\tif (p != NULL)\n\t    return p;\n    }\n\n    c = *str;\n    if (c == K_SPECIAL && str[1] != NUL && str[2] != NUL)\n    {\n\tif (str[1] == KS_MODIFIER)\n\t{\n\t    modifiers = str[2];\n\t    str += 3;\n\t    c = *str;\n\t}\n\tif (c == K_SPECIAL && str[1] != NUL && str[2] != NUL)\n\t{\n\t    c = TO_SPECIAL(str[1], str[2]);\n\t    str += 2;\n\t}\n\tif (IS_SPECIAL(c) || modifiers)\t// special key\n\t    special = TRUE;\n    }\n\n    if (has_mbyte && !IS_SPECIAL(c) && MB_BYTE2LEN(c) > 1)\n    {\n\tchar_u\t*p;\n\n\t*sp = str;\n\t// Try to un-escape a multi-byte character after modifiers.\n\tp = mb_unescape(sp);\n\tif (p != NULL)\n\t    // Since 'special' is TRUE the multi-byte character 'c' will be\n\t    // processed by get_special_key_name()\n\t    c = (*mb_ptr2char)(p);\n\telse\n\t    // illegal byte\n\t    *sp = str + 1;\n    }\n    else\n\t// single-byte character or illegal byte\n\t*sp = str + 1;\n\n    // Make special keys and C0 control characters in <> form, also <M-Space>.\n    // Use <Space> only for lhs of a mapping.\n    if (special || c < ' ' || (from && c == ' '))\n\treturn get_special_key_name(c, modifiers);\n    buf[0] = c;\n    buf[1] = NUL;\n    return buf;\n}\n\n/*\n * Translate a key sequence into special key names.\n */\n    void\nstr2specialbuf(char_u *sp, char_u *buf, int len)\n{\n    char_u\t*s;\n\n    *buf = NUL;\n    while (*sp)\n    {\n\ts = str2special(&sp, FALSE);\n\tif ((int)(STRLEN(s) + STRLEN(buf)) < len)\n\t    STRCAT(buf, s);\n    }\n}\n\n/*\n * print line for :print or :list command\n */\n    void\nmsg_prt_line(char_u *s, int list)\n{\n    int\t\tc;\n    int\t\tcol = 0;\n    int\t\tn_extra = 0;\n    int\t\tc_extra = 0;\n    int\t\tc_final = 0;\n    char_u\t*p_extra = NULL;\t    // init to make SASC shut up\n    int\t\tn;\n    int\t\tattr = 0;\n    char_u\t*trail = NULL;\n    char_u\t*lead = NULL;\n    int\t\tin_multispace = FALSE;\n    int\t\tmultispace_pos = 0;\n    int\t\tl;\n    char_u\tbuf[MB_MAXBYTES + 1];\n\n    if (curwin->w_p_list)\n\tlist = TRUE;\n\n    if (list)\n    {\n\t// find start of trailing whitespace\n\tif (curwin->w_lcs_chars.trail)\n\t{\n\t    trail = s + STRLEN(s);\n\t    while (trail > s && VIM_ISWHITE(trail[-1]))\n\t\t--trail;\n\t}\n\t// find end of leading whitespace\n\tif (curwin->w_lcs_chars.lead || curwin->w_lcs_chars.leadmultispace != NULL)\n\t{\n\t    lead = s;\n\t    while (VIM_ISWHITE(lead[0]))\n\t\tlead++;\n\t    // in a line full of spaces all of them are treated as trailing\n\t    if (*lead == NUL)\n\t\tlead = NULL;\n\t}\n    }\n\n    // output a space for an empty line, otherwise the line will be\n    // overwritten\n    if (*s == NUL && !(list && curwin->w_lcs_chars.eol != NUL))\n\tmsg_putchar(' ');\n\n    while (!got_int)\n    {\n\tif (n_extra > 0)\n\t{\n\t    --n_extra;\n\t    if (n_extra == 0 && c_final)\n\t\tc = c_final;\n\t    else if (c_extra)\n\t\tc = c_extra;\n\t    else\n\t\tc = *p_extra++;\n\t}\n\telse if (has_mbyte && (l = (*mb_ptr2len)(s)) > 1)\n\t{\n\t    col += (*mb_ptr2cells)(s);\n\t    if (l >= MB_MAXBYTES)\n\t    {\n\t\tSTRCPY(buf, \"?\");\n\t    }\n\t    else if (curwin->w_lcs_chars.nbsp != NUL && list\n\t\t    && (mb_ptr2char(s) == 160\n\t\t\t|| mb_ptr2char(s) == 0x202f))\n\t    {\n\t\tint len = mb_char2bytes(curwin->w_lcs_chars.nbsp, buf);\n\n\t\tbuf[len] = NUL;\n\t    }\n\t    else\n\t    {\n\t\tmch_memmove(buf, s, (size_t)l);\n\t\tbuf[l] = NUL;\n\t    }\n\t    msg_puts((char *)buf);\n\t    s += l;\n\t    continue;\n\t}\n\telse\n\t{\n\t    attr = 0;\n\t    c = *s++;\n\t    in_multispace = c == ' '\n\t\t&& ((col > 0 && s[-2] == ' ') || *s == ' ');\n\t    if (!in_multispace)\n\t\tmultispace_pos = 0;\n\t    if (c == TAB && (!list || curwin->w_lcs_chars.tab1))\n\t    {\n\t\t// tab amount depends on current column\n#ifdef FEAT_VARTABS\n\t\tn_extra = tabstop_padding(col, curbuf->b_p_ts,\n\t\t\t\t\t\t    curbuf->b_p_vts_array) - 1;\n#else\n\t\tn_extra = curbuf->b_p_ts - col % curbuf->b_p_ts - 1;\n#endif\n\t\tif (!list)\n\t\t{\n\t\t    c = ' ';\n\t\t    c_extra = ' ';\n\t\t    c_final = NUL;\n\t\t}\n\t\telse\n\t\t{\n\t\t    c = (n_extra == 0 && curwin->w_lcs_chars.tab3)\n\t\t\t\t\t\t? curwin->w_lcs_chars.tab3\n\t\t\t\t\t\t: curwin->w_lcs_chars.tab1;\n\t\t    c_extra = curwin->w_lcs_chars.tab2;\n\t\t    c_final = curwin->w_lcs_chars.tab3;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t    }\n\t    else if (c == 160 && list && curwin->w_lcs_chars.nbsp != NUL)\n\t    {\n\t\tc = curwin->w_lcs_chars.nbsp;\n\t\tattr = HL_ATTR(HLF_8);\n\t    }\n\t    else if (c == NUL && list && curwin->w_lcs_chars.eol != NUL)\n\t    {\n\t\tp_extra = (char_u *)\"\";\n\t\tc_extra = NUL;\n\t\tc_final = NUL;\n\t\tn_extra = 1;\n\t\tc = curwin->w_lcs_chars.eol;\n\t\tattr = HL_ATTR(HLF_AT);\n\t\t--s;\n\t    }\n\t    else if (c != NUL && (n = byte2cells(c)) > 1)\n\t    {\n\t\tn_extra = n - 1;\n\t\tp_extra = transchar_byte(c);\n\t\tc_extra = NUL;\n\t\tc_final = NUL;\n\t\tc = *p_extra++;\n\t\t// Use special coloring to be able to distinguish <hex> from\n\t\t// the same in plain text.\n\t\tattr = HL_ATTR(HLF_8);\n\t    }\n\t    else if (c == ' ')\n\t    {\n\t\tif (list && lead != NULL && s <= lead && in_multispace\n\t\t\t&& curwin->w_lcs_chars.leadmultispace != NULL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.leadmultispace[multispace_pos++];\n\t\t    if (curwin->w_lcs_chars.leadmultispace[multispace_pos]\n\t\t\t\t\t\t\t\t\t== NUL)\n\t\t\tmultispace_pos = 0;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (lead != NULL && s <= lead\n\t\t\t\t\t    && curwin->w_lcs_chars.lead != NUL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.lead;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (trail != NULL && s > trail)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.trail;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (list && in_multispace\n\t\t\t&& curwin->w_lcs_chars.multispace != NULL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.multispace[multispace_pos++];\n\t\t    if (curwin->w_lcs_chars.multispace[multispace_pos] == NUL)\n\t\t\tmultispace_pos = 0;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (list && curwin->w_lcs_chars.space != NUL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.space;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t    }\n\t}\n\n\tif (c == NUL)\n\t    break;\n\n\tmsg_putchar_attr(c, attr);\n\tcol++;\n    }\n    msg_clr_eos();\n}\n\n/*\n * Use screen_puts() to output one multi-byte character.\n * Return the pointer \"s\" advanced to the next character.\n */\n    static char_u *\nscreen_puts_mbyte(char_u *s, int l, int attr)\n{\n    int\t\tcw;\n\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    cw = (*mb_ptr2cells)(s);\n    if (cw > 1 && (\n#ifdef FEAT_RIGHTLEFT\n\t\tcmdmsg_rl ? msg_col <= 1 :\n#endif\n\t\tmsg_col == Columns - 1))\n    {\n\t// Doesn't fit, print a highlighted '>' to fill it up.\n\tmsg_screen_putchar('>', HL_ATTR(HLF_AT));\n\treturn s;\n    }\n\n    screen_puts_len(s, l, msg_row, msg_col, attr);\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n    {\n\tmsg_col -= cw;\n\tif (msg_col == 0)\n\t{\n\t    msg_col = Columns;\n\t    ++msg_row;\n\t}\n    }\n    else\n#endif\n    {\n\tmsg_col += cw;\n\tif (msg_col >= Columns)\n\t{\n\t    msg_col = 0;\n\t    ++msg_row;\n\t}\n    }\n    return s + l;\n}\n\n/*\n * Output a string to the screen at position msg_row, msg_col.\n * Update msg_row and msg_col for the next message.\n */\n    void\nmsg_puts(char *s)\n{\n    msg_puts_attr(s, 0);\n}\n\n    void\nmsg_puts_title(char *s)\n{\n    msg_puts_attr(s, HL_ATTR(HLF_T));\n}\n\n/*\n * Show a message in such a way that it always fits in the line.  Cut out a\n * part in the middle and replace it with \"...\" when necessary.\n * Does not handle multi-byte characters!\n */\n    static void\nmsg_outtrans_long_len_attr(char_u *longstr, int len, int attr)\n{\n    int\t\tslen = len;\n    int\t\troom;\n\n    room = Columns - msg_col;\n    if (len > room && room >= 20)\n    {\n\tslen = (room - 3) / 2;\n\tmsg_outtrans_len_attr(longstr, slen, attr);\n\tmsg_puts_attr(\"...\", HL_ATTR(HLF_8));\n    }\n    msg_outtrans_len_attr(longstr + len - slen, slen, attr);\n}\n\n    void\nmsg_outtrans_long_attr(char_u *longstr, int attr)\n{\n    msg_outtrans_long_len_attr(longstr, (int)STRLEN(longstr), attr);\n}\n\n/*\n * Basic function for writing a message with highlight attributes.\n */\n    void\nmsg_puts_attr(char *s, int attr)\n{\n    msg_puts_attr_len(s, -1, attr);\n}\n\n/*\n * Like msg_puts_attr(), but with a maximum length \"maxlen\" (in bytes).\n * When \"maxlen\" is -1 there is no maximum length.\n * When \"maxlen\" is >= 0 the message is not put in the history.\n */\n    static void\nmsg_puts_attr_len(char *str, int maxlen, int attr)\n{\n    /*\n     * If redirection is on, also write to the redirection file.\n     */\n    redir_write((char_u *)str, maxlen);\n\n    /*\n     * Don't print anything when using \":silent cmd\".\n     */\n    if (msg_silent != 0)\n\treturn;\n\n    // if MSG_HIST flag set, add message to history\n    if ((attr & MSG_HIST) && maxlen < 0)\n    {\n\tadd_msg_hist((char_u *)str, -1, attr);\n\tattr &= ~MSG_HIST;\n    }\n\n    // When writing something to the screen after it has scrolled, requires a\n    // wait-return prompt later.  Needed when scrolling, resetting\n    // need_wait_return after some prompt, and then outputting something\n    // without scrolling\n    // Not needed when only using CR to move the cursor.\n    if (msg_scrolled != 0 && !msg_scrolled_ign && STRCMP(str, \"\\r\") != 0)\n\tneed_wait_return = TRUE;\n    msg_didany = TRUE;\t\t// remember that something was outputted\n\n    /*\n     * If there is no valid screen, use fprintf so we can see error messages.\n     * If termcap is not active, we may be writing in an alternate console\n     * window, cursor positioning may not work correctly (window size may be\n     * different, e.g. for Win32 console) or we just don't know where the\n     * cursor is.\n     */\n    if (msg_use_printf())\n\tmsg_puts_printf((char_u *)str, maxlen);\n    else\n\tmsg_puts_display((char_u *)str, maxlen, attr, FALSE);\n\n    need_fileinfo = FALSE;\n}\n\n/*\n * The display part of msg_puts_attr_len().\n * May be called recursively to display scroll-back text.\n */\n    static void\nmsg_puts_display(\n    char_u\t*str,\n    int\t\tmaxlen,\n    int\t\tattr,\n    int\t\trecurse)\n{\n    char_u\t*s = str;\n    char_u\t*t_s = str;\t// string from \"t_s\" to \"s\" is still todo\n    int\t\tt_col = 0;\t// screen cells todo, 0 when \"t_s\" not used\n    int\t\tl;\n    int\t\tcw;\n    char_u\t*sb_str = str;\n    int\t\tsb_col = msg_col;\n    int\t\twrap;\n    int\t\tdid_last_char;\n\n    did_wait_return = FALSE;\n    while ((maxlen < 0 || (int)(s - str) < maxlen) && *s != NUL)\n    {\n\t/*\n\t * We are at the end of the screen line when:\n\t * - When outputting a newline.\n\t * - When outputting a character in the last column.\n\t */\n\tif (!recurse && msg_row >= Rows - 1 && (*s == '\\n' || (\n#ifdef FEAT_RIGHTLEFT\n\t\t    cmdmsg_rl\n\t\t    ? (\n\t\t\tmsg_col <= 1\n\t\t      || (*s == TAB && msg_col <= 7)\n\t\t      || (has_mbyte && (*mb_ptr2cells)(s) > 1 && msg_col <= 2))\n\t\t    :\n#endif\n\t\t      ((*s != '\\r' && msg_col + t_col >= Columns - 1)\n\t\t       || (*s == TAB && msg_col + t_col >= ((Columns - 1) & ~7))\n\t\t       || (has_mbyte && (*mb_ptr2cells)(s) > 1\n\t\t\t\t\t && msg_col + t_col >= Columns - 2)))))\n\t{\n\t    /*\n\t     * The screen is scrolled up when at the last row (some terminals\n\t     * scroll automatically, some don't.  To avoid problems we scroll\n\t     * ourselves).\n\t     */\n\t    if (t_col > 0)\n\t\t// output postponed text\n\t\tt_puts(&t_col, t_s, s, attr);\n\n\t    // When no more prompt and no more room, truncate here\n\t    if (msg_no_more && lines_left == 0)\n\t\tbreak;\n\n\t    // Scroll the screen up one line.\n\t    msg_scroll_up();\n\n\t    msg_row = Rows - 2;\n\t    if (msg_col >= Columns)\t// can happen after screen resize\n\t\tmsg_col = Columns - 1;\n\n\t    // Display char in last column before showing more-prompt.\n\t    if (*s >= ' '\n#ifdef FEAT_RIGHTLEFT\n\t\t    && !cmdmsg_rl\n#endif\n\t       )\n\t    {\n\t\tif (has_mbyte)\n\t\t{\n\t\t    if (enc_utf8 && maxlen >= 0)\n\t\t\t// avoid including composing chars after the end\n\t\t\tl = utfc_ptr2len_len(s, (int)((str + maxlen) - s));\n\t\t    else\n\t\t\tl = (*mb_ptr2len)(s);\n\t\t    s = screen_puts_mbyte(s, l, attr);\n\t\t}\n\t\telse\n\t\t    msg_screen_putchar(*s++, attr);\n\t\tdid_last_char = TRUE;\n\t    }\n\t    else\n\t\tdid_last_char = FALSE;\n\n\t    if (p_more)\n\t\t// store text for scrolling back\n\t\tstore_sb_text(&sb_str, s, attr, &sb_col, TRUE);\n\n\t    inc_msg_scrolled();\n\t    need_wait_return = TRUE; // may need wait_return in main()\n\t    redraw_cmdline = TRUE;\n\t    if (cmdline_row > 0 && !exmode_active)\n\t\t--cmdline_row;\n\n\t    /*\n\t     * If screen is completely filled and 'more' is set then wait\n\t     * for a character.\n\t     */\n\t    if (lines_left > 0)\n\t\t--lines_left;\n\t    if (p_more && lines_left == 0 && State != MODE_HITRETURN\n\t\t\t\t\t    && !msg_no_more && !exmode_active)\n\t    {\n#ifdef FEAT_CON_DIALOG\n\t\tif (do_more_prompt(NUL))\n\t\t    s = confirm_msg_tail;\n#else\n\t\t(void)do_more_prompt(NUL);\n#endif\n\t\tif (quit_more)\n\t\t    return;\n\t    }\n\n\t    // When we displayed a char in last column need to check if there\n\t    // is still more.\n\t    if (did_last_char)\n\t\tcontinue;\n\t}\n\n\twrap = *s == '\\n'\n\t\t    || msg_col + t_col >= Columns\n\t\t    || (has_mbyte && (*mb_ptr2cells)(s) > 1\n\t\t\t\t\t    && msg_col + t_col >= Columns - 1);\n\tif (t_col > 0 && (wrap || *s == '\\r' || *s == '\\b'\n\t\t\t\t\t\t || *s == '\\t' || *s == BELL))\n\t    // output any postponed text\n\t    t_puts(&t_col, t_s, s, attr);\n\n\tif (wrap && p_more && !recurse)\n\t    // store text for scrolling back\n\t    store_sb_text(&sb_str, s, attr, &sb_col, TRUE);\n\n\tif (*s == '\\n')\t\t    // go to next line\n\t{\n\t    msg_didout = FALSE;\t    // remember that line is empty\n#ifdef FEAT_RIGHTLEFT\n\t    if (cmdmsg_rl)\n\t\tmsg_col = Columns - 1;\n\t    else\n#endif\n\t\tmsg_col = 0;\n\t    if (++msg_row >= Rows)  // safety check\n\t\tmsg_row = Rows - 1;\n\t}\n\telse if (*s == '\\r')\t    // go to column 0\n\t{\n\t    msg_col = 0;\n\t}\n\telse if (*s == '\\b')\t    // go to previous char\n\t{\n\t    if (msg_col)\n\t\t--msg_col;\n\t}\n\telse if (*s == TAB)\t    // translate Tab into spaces\n\t{\n\t    do\n\t\tmsg_screen_putchar(' ', attr);\n\t    while (msg_col & 7);\n\t}\n\telse if (*s == BELL)\t\t// beep (from \":sh\")\n\t    vim_beep(BO_SH);\n\telse\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tcw = (*mb_ptr2cells)(s);\n\t\tif (enc_utf8 && maxlen >= 0)\n\t\t    // avoid including composing chars after the end\n\t\t    l = utfc_ptr2len_len(s, (int)((str + maxlen) - s));\n\t\telse\n\t\t    l = (*mb_ptr2len)(s);\n\t    }\n\t    else\n\t    {\n\t\tcw = 1;\n\t\tl = 1;\n\t    }\n\n\t    // When drawing from right to left or when a double-wide character\n\t    // doesn't fit, draw a single character here.  Otherwise collect\n\t    // characters and draw them all at once later.\n\t    if (\n# ifdef FEAT_RIGHTLEFT\n\t\t    cmdmsg_rl ||\n# endif\n\t\t    (cw > 1 && msg_col + t_col >= Columns - 1))\n\t    {\n\t\tif (l > 1)\n\t\t    s = screen_puts_mbyte(s, l, attr) - 1;\n\t\telse\n\t\t    msg_screen_putchar(*s, attr);\n\t    }\n\t    else\n\t    {\n\t\t// postpone this character until later\n\t\tif (t_col == 0)\n\t\t    t_s = s;\n\t\tt_col += cw;\n\t\ts += l - 1;\n\t    }\n\t}\n\t++s;\n    }\n\n    // output any postponed text\n    if (t_col > 0)\n\tt_puts(&t_col, t_s, s, attr);\n    if (p_more && !recurse)\n\tstore_sb_text(&sb_str, s, attr, &sb_col, FALSE);\n\n    msg_check();\n}\n\n/*\n * Return TRUE when \":filter pattern\" was used and \"msg\" does not match\n * \"pattern\".\n */\n    int\nmessage_filtered(char_u *msg)\n{\n    int match;\n\n    if (cmdmod.cmod_filter_regmatch.regprog == NULL)\n\treturn FALSE;\n    match = vim_regexec(&cmdmod.cmod_filter_regmatch, msg, (colnr_T)0);\n    return cmdmod.cmod_filter_force ? match : !match;\n}\n\n/*\n * Scroll the screen up one line for displaying the next message line.\n */\n    static void\nmsg_scroll_up(void)\n{\n#ifdef FEAT_GUI\n    // Remove the cursor before scrolling, ScreenLines[] is going\n    // to become invalid.\n    if (gui.in_use)\n\tgui_undraw_cursor();\n#endif\n    // scrolling up always works\n    mch_disable_flush();\n    screen_del_lines(0, 0, 1, (int)Rows, TRUE, 0, NULL);\n    mch_enable_flush();\n\n    if (!can_clear((char_u *)\" \"))\n    {\n\t// Scrolling up doesn't result in the right background.  Set the\n\t// background here.  It's not efficient, but avoids that we have to do\n\t// it all over the code.\n\tscreen_fill((int)Rows - 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\n\t// Also clear the last char of the last but one line if it was not\n\t// cleared before to avoid a scroll-up.\n\tif (ScreenAttrs[LineOffset[Rows - 2] + Columns - 1] == (sattr_T)-1)\n\t    screen_fill((int)Rows - 2, (int)Rows - 1,\n\t\t\t\t (int)Columns - 1, (int)Columns, ' ', ' ', 0);\n    }\n}\n\n/*\n * Increment \"msg_scrolled\".\n */\n    static void\ninc_msg_scrolled(void)\n{\n#ifdef FEAT_EVAL\n    if (*get_vim_var_str(VV_SCROLLSTART) == NUL)\n    {\n\tchar_u\t    *p = SOURCING_NAME;\n\tchar_u\t    *tofree = NULL;\n\tint\t    len;\n\n\t// v:scrollstart is empty, set it to the script/function name and line\n\t// number\n\tif (p == NULL)\n\t    p = (char_u *)_(\"Unknown\");\n\telse\n\t{\n\t    len = (int)STRLEN(p) + 40;\n\t    tofree = alloc(len);\n\t    if (tofree != NULL)\n\t    {\n\t\tvim_snprintf((char *)tofree, len, _(\"%s line %ld\"),\n\t\t\t\t\t\t      p, (long)SOURCING_LNUM);\n\t\tp = tofree;\n\t    }\n\t}\n\tset_vim_var_string(VV_SCROLLSTART, p, -1);\n\tvim_free(tofree);\n    }\n#endif\n    ++msg_scrolled;\n    if (must_redraw < VALID)\n\tmust_redraw = VALID;\n}\n\n/*\n * To be able to scroll back at the \"more\" and \"hit-enter\" prompts we need to\n * store the displayed text and remember where screen lines start.\n */\ntypedef struct msgchunk_S msgchunk_T;\nstruct msgchunk_S\n{\n    msgchunk_T\t*sb_next;\n    msgchunk_T\t*sb_prev;\n    char\tsb_eol;\t\t// TRUE when line ends after this text\n    int\t\tsb_msg_col;\t// column in which text starts\n    int\t\tsb_attr;\t// text attributes\n    char_u\tsb_text[1];\t// text to be displayed, actually longer\n};\n\nstatic msgchunk_T *last_msgchunk = NULL; // last displayed text\n\nstatic msgchunk_T *msg_sb_start(msgchunk_T *mps);\n\ntypedef enum {\n    SB_CLEAR_NONE = 0,\n    SB_CLEAR_ALL,\n    SB_CLEAR_CMDLINE_BUSY,\n    SB_CLEAR_CMDLINE_DONE\n} sb_clear_T;\n\n// When to clear text on next msg.\nstatic sb_clear_T do_clear_sb_text = SB_CLEAR_NONE;\n\n/*\n * Store part of a printed message for displaying when scrolling back.\n */\n    static void\nstore_sb_text(\n    char_u\t**sb_str,\t// start of string\n    char_u\t*s,\t\t// just after string\n    int\t\tattr,\n    int\t\t*sb_col,\n    int\t\tfinish)\t\t// line ends\n{\n    msgchunk_T\t*mp;\n\n    if (do_clear_sb_text == SB_CLEAR_ALL\n\t    || do_clear_sb_text == SB_CLEAR_CMDLINE_DONE)\n    {\n\tclear_sb_text(do_clear_sb_text == SB_CLEAR_ALL);\n\tdo_clear_sb_text = SB_CLEAR_NONE;\n    }\n\n    if (s > *sb_str)\n    {\n\tmp = alloc(sizeof(msgchunk_T) + (s - *sb_str));\n\tif (mp != NULL)\n\t{\n\t    mp->sb_eol = finish;\n\t    mp->sb_msg_col = *sb_col;\n\t    mp->sb_attr = attr;\n\t    vim_strncpy(mp->sb_text, *sb_str, s - *sb_str);\n\n\t    if (last_msgchunk == NULL)\n\t    {\n\t\tlast_msgchunk = mp;\n\t\tmp->sb_prev = NULL;\n\t    }\n\t    else\n\t    {\n\t\tmp->sb_prev = last_msgchunk;\n\t\tlast_msgchunk->sb_next = mp;\n\t\tlast_msgchunk = mp;\n\t    }\n\t    mp->sb_next = NULL;\n\t}\n    }\n    else if (finish && last_msgchunk != NULL)\n\tlast_msgchunk->sb_eol = TRUE;\n\n    *sb_str = s;\n    *sb_col = 0;\n}\n\n/*\n * Finished showing messages, clear the scroll-back text on the next message.\n */\n    void\nmay_clear_sb_text(void)\n{\n    do_clear_sb_text = SB_CLEAR_ALL;\n}\n\n/*\n * Starting to edit the command line, do not clear messages now.\n */\n    void\nsb_text_start_cmdline(void)\n{\n    do_clear_sb_text = SB_CLEAR_CMDLINE_BUSY;\n    msg_sb_eol();\n}\n\n/*\n * Ending to edit the command line.  Clear old lines but the last one later.\n */\n    void\nsb_text_end_cmdline(void)\n{\n    do_clear_sb_text = SB_CLEAR_CMDLINE_DONE;\n}\n\n/*\n * Clear any text remembered for scrolling back.\n * When \"all\" is FALSE keep the last line.\n * Called when redrawing the screen.\n */\n    void\nclear_sb_text(int all)\n{\n    msgchunk_T\t*mp;\n    msgchunk_T\t**lastp;\n\n    if (all)\n\tlastp = &last_msgchunk;\n    else\n    {\n\tif (last_msgchunk == NULL)\n\t    return;\n\tlastp = &last_msgchunk->sb_prev;\n    }\n\n    while (*lastp != NULL)\n    {\n\tmp = (*lastp)->sb_prev;\n\tvim_free(*lastp);\n\t*lastp = mp;\n    }\n}\n\n/*\n * \"g<\" command.\n */\n    void\nshow_sb_text(void)\n{\n    msgchunk_T\t*mp;\n\n    // Only show something if there is more than one line, otherwise it looks\n    // weird, typing a command without output results in one line.\n    mp = msg_sb_start(last_msgchunk);\n    if (mp == NULL || mp->sb_prev == NULL)\n\tvim_beep(BO_MESS);\n    else\n    {\n\tdo_more_prompt('G');\n\twait_return(FALSE);\n    }\n}\n\n/*\n * Move to the start of screen line in already displayed text.\n */\n    static msgchunk_T *\nmsg_sb_start(msgchunk_T *mps)\n{\n    msgchunk_T *mp = mps;\n\n    while (mp != NULL && mp->sb_prev != NULL && !mp->sb_prev->sb_eol)\n\tmp = mp->sb_prev;\n    return mp;\n}\n\n/*\n * Mark the last message chunk as finishing the line.\n */\n    void\nmsg_sb_eol(void)\n{\n    if (last_msgchunk != NULL)\n\tlast_msgchunk->sb_eol = TRUE;\n}\n\n/*\n * Display a screen line from previously displayed text at row \"row\".\n * Returns a pointer to the text for the next line (can be NULL).\n */\n    static msgchunk_T *\ndisp_sb_line(int row, msgchunk_T *smp)\n{\n    msgchunk_T\t*mp = smp;\n    char_u\t*p;\n\n    for (;;)\n    {\n\tmsg_row = row;\n\tmsg_col = mp->sb_msg_col;\n\tp = mp->sb_text;\n\tif (*p == '\\n')\t    // don't display the line break\n\t    ++p;\n\tmsg_puts_display(p, -1, mp->sb_attr, TRUE);\n\tif (mp->sb_eol || mp->sb_next == NULL)\n\t    break;\n\tmp = mp->sb_next;\n    }\n    return mp->sb_next;\n}\n\n/*\n * Output any postponed text for msg_puts_attr_len().\n */\n    static void\nt_puts(\n    int\t\t*t_col,\n    char_u\t*t_s,\n    char_u\t*s,\n    int\t\tattr)\n{\n    // output postponed text\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    screen_puts_len(t_s, (int)(s - t_s), msg_row, msg_col, attr);\n    msg_col += *t_col;\n    *t_col = 0;\n    // If the string starts with a composing character don't increment the\n    // column position for it.\n    if (enc_utf8 && utf_iscomposing(utf_ptr2char(t_s)))\n\t--msg_col;\n    if (msg_col >= Columns)\n    {\n\tmsg_col = 0;\n\t++msg_row;\n    }\n}\n\n/*\n * Returns TRUE when messages should be printed with mch_errmsg().\n * This is used when there is no valid screen, so we can see error messages.\n * If termcap is not active, we may be writing in an alternate console\n * window, cursor positioning may not work correctly (window size may be\n * different, e.g. for Win32 console) or we just don't know where the\n * cursor is.\n */\n    int\nmsg_use_printf(void)\n{\n    return (!msg_check_screen()\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n\t    || (!gui.in_use && !termcap_active)\n# else\n\t    || !termcap_active\n# endif\n#endif\n\t    || (swapping_screen() && !termcap_active)\n\t       );\n}\n\n/*\n * Print a message when there is no valid screen.\n */\n    static void\nmsg_puts_printf(char_u *str, int maxlen)\n{\n    char_u\t*s = str;\n    char_u\t*buf = NULL;\n    char_u\t*p = s;\n\n#ifdef MSWIN\n    if (!(silent_mode && p_verbose == 0))\n\tmch_settmode(TMODE_COOK);\t// handle CR and NL correctly\n#endif\n    while ((maxlen < 0 || (int)(s - str) < maxlen) && *s != NUL)\n    {\n\tif (!(silent_mode && p_verbose == 0))\n\t{\n\t    // NL --> CR NL translation (for Unix, not for \"--version\")\n\t    if (*s == NL)\n\t    {\n\t\tint n = (int)(s - p);\n\n\t\tbuf = alloc(n + 3);\n\t\tif (buf != NULL)\n\t\t{\n\t\t    memcpy(buf, p, n);\n\t\t    if (!info_message)\n\t\t\tbuf[n++] = CAR;\n\t\t    buf[n++] = NL;\n\t\t    buf[n++] = NUL;\n\t\t    if (info_message)   // informative message, not an error\n\t\t\tmch_msg((char *)buf);\n\t\t    else\n\t\t\tmch_errmsg((char *)buf);\n\t\t    vim_free(buf);\n\t\t}\n\t\tp = s + 1;\n\t    }\n\t}\n\n\t// primitive way to compute the current column\n#ifdef FEAT_RIGHTLEFT\n\tif (cmdmsg_rl)\n\t{\n\t    if (*s == CAR || *s == NL)\n\t\tmsg_col = Columns - 1;\n\t    else\n\t\t--msg_col;\n\t}\n\telse\n#endif\n\t{\n\t    if (*s == CAR || *s == NL)\n\t\tmsg_col = 0;\n\t    else\n\t\t++msg_col;\n\t}\n\t++s;\n    }\n\n    if (*p != NUL && !(silent_mode && p_verbose == 0))\n    {\n\tchar_u *tofree = NULL;\n\n\tif (maxlen > 0 && STRLEN(p) > (size_t)maxlen)\n\t{\n\t    tofree = vim_strnsave(p, (size_t)maxlen);\n\t    p = tofree;\n\t}\n\tif (p != NULL)\n\t{\n\t    if (info_message)\n\t\tmch_msg((char *)p);\n\t    else\n\t\tmch_errmsg((char *)p);\n\t    vim_free(tofree);\n\t}\n    }\n\n    msg_didout = TRUE;\t    // assume that line is not empty\n\n#ifdef MSWIN\n    if (!(silent_mode && p_verbose == 0))\n\tmch_settmode(TMODE_RAW);\n#endif\n}\n\n/*\n * Show the more-prompt and handle the user response.\n * This takes care of scrolling back and displaying previously displayed text.\n * When at hit-enter prompt \"typed_char\" is the already typed character,\n * otherwise it's NUL.\n * Returns TRUE when jumping ahead to \"confirm_msg_tail\".\n */\n    static int\ndo_more_prompt(int typed_char)\n{\n    static int\tentered = FALSE;\n    int\t\tused_typed_char = typed_char;\n    int\t\toldState = State;\n    int\t\tc;\n#ifdef FEAT_CON_DIALOG\n    int\t\tretval = FALSE;\n#endif\n    int\t\ttoscroll;\n    msgchunk_T\t*mp_last = NULL;\n    msgchunk_T\t*mp;\n    int\t\ti;\n\n    // We get called recursively when a timer callback outputs a message. In\n    // that case don't show another prompt. Also when at the hit-Enter prompt\n    // and nothing was typed.\n    if (entered || (State == MODE_HITRETURN && typed_char == 0))\n\treturn FALSE;\n    entered = TRUE;\n\n    if (typed_char == 'G')\n    {\n\t// \"g<\": Find first line on the last page.\n\tmp_last = msg_sb_start(last_msgchunk);\n\tfor (i = 0; i < Rows - 2 && mp_last != NULL\n\t\t\t\t\t     && mp_last->sb_prev != NULL; ++i)\n\t    mp_last = msg_sb_start(mp_last->sb_prev);\n    }\n\n    State = MODE_ASKMORE;\n    setmouse();\n    if (typed_char == NUL)\n\tmsg_moremsg(FALSE);\n    for (;;)\n    {\n\t/*\n\t * Get a typed character directly from the user.\n\t */\n\tif (used_typed_char != NUL)\n\t{\n\t    c = used_typed_char;\t// was typed at hit-enter prompt\n\t    used_typed_char = NUL;\n\t}\n\telse\n\t    c = get_keystroke();\n\n#if defined(FEAT_MENU) && defined(FEAT_GUI)\n\tif (c == K_MENU)\n\t{\n\t    int idx = get_menu_index(current_menu, MODE_ASKMORE);\n\n\t    // Used a menu.  If it starts with CTRL-Y, it must\n\t    // be a \"Copy\" for the clipboard.  Otherwise\n\t    // assume that we end\n\t    if (idx == MENU_INDEX_INVALID)\n\t\tcontinue;\n\t    c = *current_menu->strings[idx];\n\t    if (c != NUL && current_menu->strings[idx][1] != NUL)\n\t\tins_typebuf(current_menu->strings[idx] + 1,\n\t\t\t\tcurrent_menu->noremap[idx], 0, TRUE,\n\t\t\t\t\t\t   current_menu->silent[idx]);\n\t}\n#endif\n\n\ttoscroll = 0;\n\tswitch (c)\n\t{\n\tcase BS:\t\t// scroll one line back\n\tcase K_BS:\n\tcase 'k':\n\tcase K_UP:\n\t    toscroll = -1;\n\t    break;\n\n\tcase CAR:\t\t// one extra line\n\tcase NL:\n\tcase 'j':\n\tcase K_DOWN:\n\t    toscroll = 1;\n\t    break;\n\n\tcase 'u':\t\t// Up half a page\n\t    toscroll = -(Rows / 2);\n\t    break;\n\n\tcase 'd':\t\t// Down half a page\n\t    toscroll = Rows / 2;\n\t    break;\n\n\tcase 'b':\t\t// one page back\n\tcase K_PAGEUP:\n\t    toscroll = -(Rows - 1);\n\t    break;\n\n\tcase ' ':\t\t// one extra page\n\tcase 'f':\n\tcase K_PAGEDOWN:\n\tcase K_LEFTMOUSE:\n\t    toscroll = Rows - 1;\n\t    break;\n\n\tcase 'g':\t\t// all the way back to the start\n\t    toscroll = -999999;\n\t    break;\n\n\tcase 'G':\t\t// all the way to the end\n\t    toscroll = 999999;\n\t    lines_left = 999999;\n\t    break;\n\n\tcase ':':\t\t// start new command line\n#ifdef FEAT_CON_DIALOG\n\t    if (!confirm_msg_used)\n#endif\n\t    {\n\t\t// Since got_int is set all typeahead will be flushed, but we\n\t\t// want to keep this ':', remember that in a special way.\n\t\ttypeahead_noflush(':');\n#ifdef FEAT_TERMINAL\n\t\tskip_term_loop = TRUE;\n#endif\n\t\tcmdline_row = Rows - 1;\t\t// put ':' on this line\n\t\tskip_redraw = TRUE;\t\t// skip redraw once\n\t\tneed_wait_return = FALSE;\t// don't wait in main()\n\t    }\n\t    // FALLTHROUGH\n\tcase 'q':\t\t// quit\n\tcase Ctrl_C:\n\tcase ESC:\n#ifdef FEAT_CON_DIALOG\n\t    if (confirm_msg_used)\n\t    {\n\t\t// Jump to the choices of the dialog.\n\t\tretval = TRUE;\n\t    }\n\t    else\n#endif\n\t    {\n\t\tgot_int = TRUE;\n\t\tquit_more = TRUE;\n\t    }\n\t    // When there is some more output (wrapping line) display that\n\t    // without another prompt.\n\t    lines_left = Rows - 1;\n\t    break;\n\n#ifdef FEAT_CLIPBOARD\n\tcase Ctrl_Y:\n\t    // Strange way to allow copying (yanking) a modeless\n\t    // selection at the more prompt.  Use CTRL-Y,\n\t    // because the same is used in Cmdline-mode and at the\n\t    // hit-enter prompt.  However, scrolling one line up\n\t    // might be expected...\n\t    if (clip_star.state == SELECT_DONE)\n\t\tclip_copy_modeless_selection(TRUE);\n\t    continue;\n#endif\n\tdefault:\t\t// no valid response\n\t    msg_moremsg(TRUE);\n\t    continue;\n\t}\n\n\tif (toscroll != 0)\n\t{\n\t    if (toscroll < 0)\n\t    {\n\t\t// go to start of last line\n\t\tif (mp_last == NULL)\n\t\t    mp = msg_sb_start(last_msgchunk);\n\t\telse if (mp_last->sb_prev != NULL)\n\t\t    mp = msg_sb_start(mp_last->sb_prev);\n\t\telse\n\t\t    mp = NULL;\n\n\t\t// go to start of line at top of the screen\n\t\tfor (i = 0; i < Rows - 2 && mp != NULL && mp->sb_prev != NULL;\n\t\t\t\t\t\t\t\t\t  ++i)\n\t\t    mp = msg_sb_start(mp->sb_prev);\n\n\t\tif (mp != NULL && mp->sb_prev != NULL)\n\t\t{\n\t\t    // Find line to be displayed at top.\n\t\t    for (i = 0; i > toscroll; --i)\n\t\t    {\n\t\t\tif (mp == NULL || mp->sb_prev == NULL)\n\t\t\t    break;\n\t\t\tmp = msg_sb_start(mp->sb_prev);\n\t\t\tif (mp_last == NULL)\n\t\t\t    mp_last = msg_sb_start(last_msgchunk);\n\t\t\telse\n\t\t\t    mp_last = msg_sb_start(mp_last->sb_prev);\n\t\t    }\n\n\t\t    if (toscroll == -1 && screen_ins_lines(0, 0, 1,\n\t\t\t\t\t\t     (int)Rows, 0, NULL) == OK)\n\t\t    {\n\t\t\t// display line at top\n\t\t\t(void)disp_sb_line(0, mp);\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t// redisplay all lines\n\t\t\tscreenclear();\n\t\t\tfor (i = 0; mp != NULL && i < Rows - 1; ++i)\n\t\t\t{\n\t\t\t    mp = disp_sb_line(i, mp);\n\t\t\t    ++msg_scrolled;\n\t\t\t}\n\t\t    }\n\t\t    toscroll = 0;\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// First display any text that we scrolled back.\n\t\twhile (toscroll > 0 && mp_last != NULL)\n\t\t{\n\t\t    // scroll up, display line at bottom\n\t\t    msg_scroll_up();\n\t\t    inc_msg_scrolled();\n\t\t    screen_fill((int)Rows - 2, (int)Rows - 1, 0,\n\t\t\t\t\t\t   (int)Columns, ' ', ' ', 0);\n\t\t    mp_last = disp_sb_line((int)Rows - 2, mp_last);\n\t\t    --toscroll;\n\t\t}\n\t    }\n\n\t    if (toscroll <= 0)\n\t    {\n\t\t// displayed the requested text, more prompt again\n\t\tscreen_fill((int)Rows - 1, (int)Rows, 0,\n\t\t\t\t\t\t   (int)Columns, ' ', ' ', 0);\n\t\tmsg_moremsg(FALSE);\n\t\tcontinue;\n\t    }\n\n\t    // display more text, return to caller\n\t    lines_left = toscroll;\n\t}\n\n\tbreak;\n    }\n\n    // clear the --more-- message\n    screen_fill((int)Rows - 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n    State = oldState;\n    setmouse();\n    if (quit_more)\n    {\n\tmsg_row = Rows - 1;\n\tmsg_col = 0;\n    }\n#ifdef FEAT_RIGHTLEFT\n    else if (cmdmsg_rl)\n\tmsg_col = Columns - 1;\n#endif\n\n    entered = FALSE;\n#ifdef FEAT_CON_DIALOG\n    return retval;\n#else\n    return FALSE;\n#endif\n}\n\n#if defined(USE_MCH_ERRMSG) || defined(PROTO)\n\n#ifdef mch_errmsg\n# undef mch_errmsg\n#endif\n#ifdef mch_msg\n# undef mch_msg\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n    static void\nmch_errmsg_c(char *str)\n{\n    int\t    len = (int)STRLEN(str);\n    DWORD   nwrite = 0;\n    DWORD   mode = 0;\n    HANDLE  h = GetStdHandle(STD_ERROR_HANDLE);\n\n    if (GetConsoleMode(h, &mode) && enc_codepage >= 0\n\t    && (int)GetConsoleCP() != enc_codepage)\n    {\n\tWCHAR\t*w = enc_to_utf16((char_u *)str, &len);\n\n\tWriteConsoleW(h, w, len, &nwrite, NULL);\n\tvim_free(w);\n    }\n    else\n    {\n\tfprintf(stderr, \"%s\", str);\n    }\n}\n#endif\n\n/*\n * Give an error message.  To be used when the screen hasn't been initialized\n * yet.  When stderr can't be used, collect error messages until the GUI has\n * started and they can be displayed in a message box.\n */\n    void\nmch_errmsg(char *str)\n{\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    int\t\tlen;\n#endif\n\n#if (defined(UNIX) || defined(FEAT_GUI)) && !defined(ALWAYS_USE_GUI) && !defined(VIMDLL)\n    // On Unix use stderr if it's a tty.\n    // When not going to start the GUI also use stderr.\n    // On Mac, when started from Finder, stderr is the console.\n    if (\n# ifdef UNIX\n#  ifdef MACOS_X\n\t    (isatty(2) && strcmp(\"/dev/console\", ttyname(2)) != 0)\n#  else\n\t    isatty(2)\n#  endif\n#  ifdef FEAT_GUI\n\t    ||\n#  endif\n# endif\n# ifdef FEAT_GUI\n\t    !(gui.in_use || gui.starting)\n# endif\n\t    )\n    {\n\tfprintf(stderr, \"%s\", str);\n\treturn;\n    }\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n    if (!(gui.in_use || gui.starting))\n# endif\n    {\n\tmch_errmsg_c(str);\n\treturn;\n    }\n#endif\n\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    // avoid a delay for a message that isn't there\n    emsg_on_display = FALSE;\n\n    len = (int)STRLEN(str) + 1;\n    if (error_ga.ga_growsize == 0)\n    {\n\terror_ga.ga_growsize = 80;\n\terror_ga.ga_itemsize = 1;\n    }\n    if (ga_grow(&error_ga, len) == OK)\n    {\n\tmch_memmove((char_u *)error_ga.ga_data + error_ga.ga_len,\n\t\t\t\t\t\t\t  (char_u *)str, len);\n# ifdef UNIX\n\t// remove CR characters, they are displayed\n\t{\n\t    char_u\t*p;\n\n\t    p = (char_u *)error_ga.ga_data + error_ga.ga_len;\n\t    for (;;)\n\t    {\n\t\tp = vim_strchr(p, '\\r');\n\t\tif (p == NULL)\n\t\t    break;\n\t\t*p = ' ';\n\t    }\n\t}\n# endif\n\t--len;\t\t// don't count the NUL at the end\n\terror_ga.ga_len += len;\n    }\n#endif\n}\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n    static void\nmch_msg_c(char *str)\n{\n    int\t    len = (int)STRLEN(str);\n    DWORD   nwrite = 0;\n    DWORD   mode;\n    HANDLE  h = GetStdHandle(STD_OUTPUT_HANDLE);\n\n\n    if (GetConsoleMode(h, &mode) && enc_codepage >= 0\n\t    && (int)GetConsoleCP() != enc_codepage)\n    {\n\tWCHAR\t*w = enc_to_utf16((char_u *)str, &len);\n\n\tWriteConsoleW(h, w, len, &nwrite, NULL);\n\tvim_free(w);\n    }\n    else\n    {\n\tprintf(\"%s\", str);\n    }\n}\n#endif\n\n/*\n * Give a message.  To be used when the screen hasn't been initialized yet.\n * When there is no tty, collect messages until the GUI has started and they\n * can be displayed in a message box.\n */\n    void\nmch_msg(char *str)\n{\n#if (defined(UNIX) || defined(FEAT_GUI)) && !defined(ALWAYS_USE_GUI) && !defined(VIMDLL)\n    // On Unix use stdout if we have a tty.  This allows \"vim -h | more\" and\n    // uses mch_errmsg() when started from the desktop.\n    // When not going to start the GUI also use stdout.\n    // On Mac, when started from Finder, stderr is the console.\n    if (\n# ifdef UNIX\n#  ifdef MACOS_X\n\t    (isatty(2) && strcmp(\"/dev/console\", ttyname(2)) != 0)\n#  else\n\t    isatty(2)\n#  endif\n#  ifdef FEAT_GUI\n\t    ||\n#  endif\n# endif\n# ifdef FEAT_GUI\n\t    !(gui.in_use || gui.starting)\n# endif\n\t    )\n    {\n\tprintf(\"%s\", str);\n\treturn;\n    }\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n    if (!(gui.in_use || gui.starting))\n# endif\n    {\n\tmch_msg_c(str);\n\treturn;\n    }\n#endif\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    mch_errmsg(str);\n#endif\n}\n#endif // USE_MCH_ERRMSG\n\n/*\n * Put a character on the screen at the current message position and advance\n * to the next position.  Only for printable ASCII!\n */\n    static void\nmsg_screen_putchar(int c, int attr)\n{\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    screen_putchar(c, msg_row, msg_col, attr);\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n    {\n\tif (--msg_col == 0)\n\t{\n\t    msg_col = Columns;\n\t    ++msg_row;\n\t}\n    }\n    else\n#endif\n    {\n\tif (++msg_col >= Columns)\n\t{\n\t    msg_col = 0;\n\t    ++msg_row;\n\t}\n    }\n}\n\n    static void\nmsg_moremsg(int full)\n{\n    int\t\tattr;\n    char_u\t*s = (char_u *)_(\"-- More --\");\n\n    attr = HL_ATTR(HLF_M);\n    screen_puts(s, (int)Rows - 1, 0, attr);\n    if (full)\n\tscreen_puts((char_u *)\n\t\t_(\" SPACE/d/j: screen/page/line down, b/u/k: up, q: quit \"),\n\t\t(int)Rows - 1, vim_strsize(s), attr);\n}\n\n/*\n * Repeat the message for the current mode: MODE_ASKMORE, MODE_EXTERNCMD,\n * MODE_CONFIRM or exmode_active.\n */\n    void\nrepeat_message(void)\n{\n    if (State == MODE_ASKMORE)\n    {\n\tmsg_moremsg(TRUE);\t// display --more-- message again\n\tmsg_row = Rows - 1;\n    }\n#ifdef FEAT_CON_DIALOG\n    else if (State == MODE_CONFIRM)\n    {\n\tdisplay_confirm_msg();\t// display \":confirm\" message again\n\tmsg_row = Rows - 1;\n    }\n#endif\n    else if (State == MODE_EXTERNCMD)\n    {\n\twindgoto(msg_row, msg_col); // put cursor back\n    }\n    else if (State == MODE_HITRETURN || State == MODE_SETWSIZE)\n    {\n\tif (msg_row == Rows - 1)\n\t{\n\t    // Avoid drawing the \"hit-enter\" prompt below the previous one,\n\t    // overwrite it.  Esp. useful when regaining focus and a\n\t    // FocusGained autocmd exists but didn't draw anything.\n\t    msg_didout = FALSE;\n\t    msg_col = 0;\n\t    msg_clr_eos();\n\t}\n\thit_return_msg();\n\tmsg_row = Rows - 1;\n    }\n}\n\n/*\n * msg_check_screen - check if the screen is initialized.\n * Also check msg_row and msg_col, if they are too big it may cause a crash.\n * While starting the GUI the terminal codes will be set for the GUI, but the\n * output goes to the terminal.  Don't use the terminal codes then.\n */\n    static int\nmsg_check_screen(void)\n{\n    if (!full_screen || !screen_valid(FALSE))\n\treturn FALSE;\n\n    if (msg_row >= Rows)\n\tmsg_row = Rows - 1;\n    if (msg_col >= Columns)\n\tmsg_col = Columns - 1;\n    return TRUE;\n}\n\n/*\n * Clear from current message position to end of screen.\n * Skip this when \":silent\" was used, no need to clear for redirection.\n */\n    void\nmsg_clr_eos(void)\n{\n    if (msg_silent == 0)\n\tmsg_clr_eos_force();\n}\n\n/*\n * Clear from current message position to end of screen.\n * Note: msg_col is not updated, so we remember the end of the message\n * for msg_check().\n */\n    void\nmsg_clr_eos_force(void)\n{\n    if (msg_use_printf())\n    {\n\tif (full_screen)\t// only when termcap codes are valid\n\t{\n\t    if (*T_CD)\n\t\tout_str(T_CD);\t// clear to end of display\n\t    else if (*T_CE)\n\t\tout_str(T_CE);\t// clear to end of line\n\t}\n    }\n    else\n    {\n#ifdef FEAT_RIGHTLEFT\n\tif (cmdmsg_rl)\n\t{\n\t    screen_fill(msg_row, msg_row + 1, 0, msg_col + 1, ' ', ' ', 0);\n\t    screen_fill(msg_row + 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\t}\n\telse\n#endif\n\t{\n\t    screen_fill(msg_row, msg_row + 1, msg_col, (int)Columns,\n\t\t\t\t\t\t\t\t ' ', ' ', 0);\n\t    screen_fill(msg_row + 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\t}\n    }\n}\n\n/*\n * Clear the command line.\n */\n    void\nmsg_clr_cmdline(void)\n{\n    msg_row = cmdline_row;\n    msg_col = 0;\n    msg_clr_eos_force();\n}\n\n/*\n * end putting a message on the screen\n * call wait_return if the message does not fit in the available space\n * return TRUE if wait_return not called.\n */\n    int\nmsg_end(void)\n{\n    /*\n     * If the string is larger than the window,\n     * or the ruler option is set and we run into it,\n     * we have to redraw the window.\n     * Do not do this if we are abandoning the file or editing the command line.\n     */\n    if (!exiting && need_wait_return && !(State & MODE_CMDLINE))\n    {\n\twait_return(FALSE);\n\treturn FALSE;\n    }\n    out_flush();\n    return TRUE;\n}\n\n/*\n * If the written message runs into the shown command or ruler, we have to\n * wait for hit-return and redraw the window later.\n */\n    void\nmsg_check(void)\n{\n    if (msg_row == Rows - 1 && msg_col >= sc_col)\n    {\n\tneed_wait_return = TRUE;\n\tredraw_cmdline = TRUE;\n    }\n}\n\n/*\n * May write a string to the redirection file.\n * When \"maxlen\" is -1 write the whole string, otherwise up to \"maxlen\" bytes.\n */\n    static void\nredir_write(char_u *str, int maxlen)\n{\n    char_u\t*s = str;\n    static int\tcur_col = 0;\n\n    // Don't do anything for displaying prompts and the like.\n    if (redir_off)\n\treturn;\n\n    // If 'verbosefile' is set prepare for writing in that file.\n    if (*p_vfile != NUL && verbose_fd == NULL)\n\tverbose_open();\n\n    if (redirecting())\n    {\n\t// If the string doesn't start with CR or NL, go to msg_col\n\tif (*s != '\\n' && *s != '\\r')\n\t{\n\t    while (cur_col < msg_col)\n\t    {\n#ifdef FEAT_EVAL\n\t\tif (redir_execute)\n\t\t    execute_redir_str((char_u *)\" \", -1);\n\t\telse if (redir_reg)\n\t\t    write_reg_contents(redir_reg, (char_u *)\" \", -1, TRUE);\n\t\telse if (redir_vname)\n\t\t    var_redir_str((char_u *)\" \", -1);\n\t\telse\n#endif\n\t\t    if (redir_fd != NULL)\n\t\t    fputs(\" \", redir_fd);\n\t\tif (verbose_fd != NULL)\n\t\t    fputs(\" \", verbose_fd);\n\t\t++cur_col;\n\t    }\n\t}\n\n#ifdef FEAT_EVAL\n\tif (redir_execute)\n\t    execute_redir_str(s, maxlen);\n\telse if (redir_reg)\n\t    write_reg_contents(redir_reg, s, maxlen, TRUE);\n\telse if (redir_vname)\n\t    var_redir_str(s, maxlen);\n#endif\n\n\t// Write and adjust the current column.\n\twhile (*s != NUL && (maxlen < 0 || (int)(s - str) < maxlen))\n\t{\n#ifdef FEAT_EVAL\n\t    if (!redir_reg && !redir_vname && !redir_execute)\n#endif\n\t\tif (redir_fd != NULL)\n\t\t    putc(*s, redir_fd);\n\t    if (verbose_fd != NULL)\n\t\tputc(*s, verbose_fd);\n\t    if (*s == '\\r' || *s == '\\n')\n\t\tcur_col = 0;\n\t    else if (*s == '\\t')\n\t\tcur_col += (8 - cur_col % 8);\n\t    else\n\t\t++cur_col;\n\t    ++s;\n\t}\n\n\tif (msg_silent != 0)\t// should update msg_col\n\t    msg_col = cur_col;\n    }\n}\n\n    int\nredirecting(void)\n{\n    return redir_fd != NULL || *p_vfile != NUL\n#ifdef FEAT_EVAL\n\t\t\t  || redir_reg || redir_vname || redir_execute\n#endif\n\t\t\t\t       ;\n}\n\n/*\n * Before giving verbose message.\n * Must always be called paired with verbose_leave()!\n */\n    void\nverbose_enter(void)\n{\n    if (*p_vfile != NUL)\n\t++msg_silent;\n}\n\n/*\n * After giving verbose message.\n * Must always be called paired with verbose_enter()!\n */\n    void\nverbose_leave(void)\n{\n    if (*p_vfile != NUL)\n\tif (--msg_silent < 0)\n\t    msg_silent = 0;\n}\n\n/*\n * Like verbose_enter() and set msg_scroll when displaying the message.\n */\n    void\nverbose_enter_scroll(void)\n{\n    if (*p_vfile != NUL)\n\t++msg_silent;\n    else\n\t// always scroll up, don't overwrite\n\tmsg_scroll = TRUE;\n}\n\n/*\n * Like verbose_leave() and set cmdline_row when displaying the message.\n */\n    void\nverbose_leave_scroll(void)\n{\n    if (*p_vfile != NUL)\n    {\n\tif (--msg_silent < 0)\n\t    msg_silent = 0;\n    }\n    else\n\tcmdline_row = msg_row;\n}\n\n/*\n * Called when 'verbosefile' is set: stop writing to the file.\n */\n    void\nverbose_stop(void)\n{\n    if (verbose_fd != NULL)\n    {\n\tfclose(verbose_fd);\n\tverbose_fd = NULL;\n    }\n    verbose_did_open = FALSE;\n}\n\n/*\n * Open the file 'verbosefile'.\n * Return FAIL or OK.\n */\n    int\nverbose_open(void)\n{\n    if (verbose_fd == NULL && !verbose_did_open)\n    {\n\t// Only give the error message once.\n\tverbose_did_open = TRUE;\n\n\tverbose_fd = mch_fopen((char *)p_vfile, \"a\");\n\tif (verbose_fd == NULL)\n\t{\n\t    semsg(_(e_cant_open_file_str), p_vfile);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * Give a warning message (for searching).\n * Use 'w' highlighting and may repeat the message after redrawing\n */\n    void\ngive_warning(char_u *message, int hl)\n{\n    give_warning_with_source(message, hl, FALSE);\n}\n\n    void\ngive_warning_with_source(char_u *message, int hl, int with_source)\n{\n    // Don't do this for \":silent\".\n    if (msg_silent != 0)\n\treturn;\n\n    // Don't want a hit-enter prompt here.\n    ++no_wait_return;\n\n#ifdef FEAT_EVAL\n    set_vim_var_string(VV_WARNINGMSG, message, -1);\n#endif\n    VIM_CLEAR(keep_msg);\n    if (hl)\n\tkeep_msg_attr = HL_ATTR(HLF_W);\n    else\n\tkeep_msg_attr = 0;\n\n    if (with_source)\n    {\n\t// Do what msg() does, but with a column offset if the warning should\n\t// be after the mode message.\n\tmsg_start();\n\tmsg_source(HL_ATTR(HLF_W));\n\tmsg_puts(\" \");\n\tmsg_puts_attr((char *)message, HL_ATTR(HLF_W) | MSG_HIST);\n\tmsg_clr_eos();\n\t(void)msg_end();\n    }\n    else if (msg_attr((char *)message, keep_msg_attr) && msg_scrolled == 0)\n\tset_keep_msg(message, keep_msg_attr);\n\n    msg_didout = FALSE;\t    // overwrite this message\n    msg_nowait = TRUE;\t    // don't wait for this message\n    msg_col = 0;\n\n    --no_wait_return;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n    void\ngive_warning2(char_u *message, char_u *a1, int hl)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just give\n\t// the raw message so the user at least gets a hint.\n\tgive_warning(message, hl);\n    }\n    else\n    {\n\tvim_snprintf((char *)IObuff, IOSIZE, (char *)message, a1);\n\tgive_warning(IObuff, hl);\n    }\n}\n#endif\n\n/*\n * Advance msg cursor to column \"col\".\n */\n    void\nmsg_advance(int col)\n{\n    if (msg_silent != 0)\t// nothing to advance to\n    {\n\tmsg_col = col;\t\t// for redirection, may fill it up later\n\treturn;\n    }\n    if (col >= Columns)\t\t// not enough room\n\tcol = Columns - 1;\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n\twhile (msg_col > Columns - col)\n\t    msg_putchar(' ');\n    else\n#endif\n\twhile (msg_col < col)\n\t    msg_putchar(' ');\n}\n\n#if defined(FEAT_CON_DIALOG) || defined(PROTO)\n/*\n * Used for \"confirm()\" function, and the :confirm command prefix.\n * Versions which haven't got flexible dialogs yet, and console\n * versions, get this generic handler which uses the command line.\n *\n * type  = one of:\n *\t   VIM_QUESTION, VIM_INFO, VIM_WARNING, VIM_ERROR or VIM_GENERIC\n * title = title string (can be NULL for default)\n * (neither used in console dialogs at the moment)\n *\n * Format of the \"buttons\" string:\n * \"Button1Name\\nButton2Name\\nButton3Name\"\n * The first button should normally be the default/accept\n * The second button should be the 'Cancel' button\n * Other buttons- use your imagination!\n * A '&' in a button name becomes a shortcut, so each '&' should be before a\n * different letter.\n *\n * Returns 0 if cancelled, otherwise the nth button (1-indexed).\n */\n    int\ndo_dialog(\n    int\t\ttype UNUSED,\n    char_u\t*title UNUSED,\n    char_u\t*message,\n    char_u\t*buttons,\n    int\t\tdfltbutton,\n    char_u\t*textfield UNUSED,\t// IObuff for inputdialog(), NULL\n\t\t\t\t\t// otherwise\n    int\t\tex_cmd)\t    // when TRUE pressing : accepts default and starts\n\t\t\t    // Ex command\n{\n    int\t\toldState;\n    int\t\tretval = 0;\n    char_u\t*hotkeys;\n    int\t\tc;\n    int\t\ti;\n    tmode_T\tsave_tmode;\n\n#ifndef NO_CONSOLE\n    // Don't output anything in silent mode (\"ex -s\")\n    if (silent_mode)\n\treturn dfltbutton;   // return default option\n#endif\n\n#ifdef FEAT_GUI_DIALOG\n    // When GUI is running and 'c' not in 'guioptions', use the GUI dialog\n    if (gui.in_use && vim_strchr(p_go, GO_CONDIALOG) == NULL)\n    {\n\t// --gui-dialog-file: write text to a file\n\tif (gui_dialog_log(title, message))\n\t    c = dfltbutton;\n\telse\n\t    c = gui_mch_dialog(type, title, message, buttons, dfltbutton,\n\t\t\t\t\t\t\t   textfield, ex_cmd);\n\t// avoid a hit-enter prompt without clearing the cmdline\n\tneed_wait_return = FALSE;\n\temsg_on_display = FALSE;\n\tcmdline_row = msg_row;\n\n\t// Flush output to avoid that further messages and redrawing is done\n\t// in the wrong order.\n\tout_flush();\n\tgui_mch_update();\n\n\treturn c;\n    }\n#endif\n\n    oldState = State;\n    State = MODE_CONFIRM;\n    setmouse();\n\n    // Ensure raw mode here.\n    save_tmode = cur_tmode;\n    settmode(TMODE_RAW);\n\n    /*\n     * Since we wait for a keypress, don't make the\n     * user press RETURN as well afterwards.\n     */\n    ++no_wait_return;\n    hotkeys = msg_show_console_dialog(message, buttons, dfltbutton);\n\n    if (hotkeys != NULL)\n    {\n\tfor (;;)\n\t{\n\t    // Get a typed character directly from the user.\n\t    c = get_keystroke();\n\t    switch (c)\n\t    {\n\t    case CAR:\t\t// User accepts default option\n\t    case NL:\n\t\tretval = dfltbutton;\n\t\tbreak;\n\t    case Ctrl_C:\t// User aborts/cancels\n\t    case ESC:\n\t\tretval = 0;\n\t\tbreak;\n\t    default:\t\t// Could be a hotkey?\n\t\tif (c < 0)\t// special keys are ignored here\n\t\t    continue;\n\t\tif (c == ':' && ex_cmd)\n\t\t{\n\t\t    retval = dfltbutton;\n\t\t    ins_char_typebuf(':', 0);\n\t\t    break;\n\t\t}\n\n\t\t// Make the character lowercase, as chars in \"hotkeys\" are.\n\t\tc = MB_TOLOWER(c);\n\t\tretval = 1;\n\t\tfor (i = 0; hotkeys[i]; ++i)\n\t\t{\n\t\t    if (has_mbyte)\n\t\t    {\n\t\t\tif ((*mb_ptr2char)(hotkeys + i) == c)\n\t\t\t    break;\n\t\t\ti += (*mb_ptr2len)(hotkeys + i) - 1;\n\t\t    }\n\t\t    else\n\t\t\tif (hotkeys[i] == c)\n\t\t\t    break;\n\t\t    ++retval;\n\t\t}\n\t\tif (hotkeys[i])\n\t\t    break;\n\t\t// No hotkey match, so keep waiting\n\t\tcontinue;\n\t    }\n\t    break;\n\t}\n\n\tvim_free(hotkeys);\n    }\n\n    settmode(save_tmode);\n    State = oldState;\n    setmouse();\n    --no_wait_return;\n    msg_end_prompt();\n\n    return retval;\n}\n\n/*\n * Copy one character from \"*from\" to \"*to\", taking care of multi-byte\n * characters.  Return the length of the character in bytes.\n */\n    static int\ncopy_char(\n    char_u\t*from,\n    char_u\t*to,\n    int\t\tlowercase)\t// make character lower case\n{\n    int\t\tlen;\n    int\t\tc;\n\n    if (has_mbyte)\n    {\n\tif (lowercase)\n\t{\n\t    c = MB_TOLOWER((*mb_ptr2char)(from));\n\t    return (*mb_char2bytes)(c, to);\n\t}\n\telse\n\t{\n\t    len = (*mb_ptr2len)(from);\n\t    mch_memmove(to, from, (size_t)len);\n\t    return len;\n\t}\n    }\n    else\n    {\n\tif (lowercase)\n\t    *to = (char_u)TOLOWER_LOC(*from);\n\telse\n\t    *to = *from;\n\treturn 1;\n    }\n}\n\n/*\n * Format the dialog string, and display it at the bottom of\n * the screen. Return a string of hotkey chars (if defined) for\n * each 'button'. If a button has no hotkey defined, the first character of\n * the button is used.\n * The hotkeys can be multi-byte characters, but without combining chars.\n *\n * Returns an allocated string with hotkeys, or NULL for error.\n */\n    static char_u *\nmsg_show_console_dialog(\n    char_u\t*message,\n    char_u\t*buttons,\n    int\t\tdfltbutton)\n{\n    int\t\tlen = 0;\n#define HOTK_LEN (has_mbyte ? MB_MAXBYTES : 1)\n    int\t\tlenhotkey = HOTK_LEN;\t// count first button\n    char_u\t*hotk = NULL;\n    char_u\t*msgp = NULL;\n    char_u\t*hotkp = NULL;\n    char_u\t*r;\n    int\t\tcopy;\n#define HAS_HOTKEY_LEN 30\n    char_u\thas_hotkey[HAS_HOTKEY_LEN];\n    int\t\tfirst_hotkey = FALSE;\t// first char of button is hotkey\n    int\t\tidx;\n\n    has_hotkey[0] = FALSE;\n\n    /*\n     * First loop: compute the size of memory to allocate.\n     * Second loop: copy to the allocated memory.\n     */\n    for (copy = 0; copy <= 1; ++copy)\n    {\n\tr = buttons;\n\tidx = 0;\n\twhile (*r)\n\t{\n\t    if (*r == DLG_BUTTON_SEP)\n\t    {\n\t\tif (copy)\n\t\t{\n\t\t    *msgp++ = ',';\n\t\t    *msgp++ = ' ';\t    // '\\n' -> ', '\n\n\t\t    // advance to next hotkey and set default hotkey\n\t\t    if (has_mbyte)\n\t\t\thotkp += STRLEN(hotkp);\n\t\t    else\n\t\t\t++hotkp;\n\t\t    hotkp[copy_char(r + 1, hotkp, TRUE)] = NUL;\n\t\t    if (dfltbutton)\n\t\t\t--dfltbutton;\n\n\t\t    // If no hotkey is specified first char is used.\n\t\t    if (idx < HAS_HOTKEY_LEN - 1 && !has_hotkey[++idx])\n\t\t\tfirst_hotkey = TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    len += 3;\t\t    // '\\n' -> ', '; 'x' -> '(x)'\n\t\t    lenhotkey += HOTK_LEN;  // each button needs a hotkey\n\t\t    if (idx < HAS_HOTKEY_LEN - 1)\n\t\t\thas_hotkey[++idx] = FALSE;\n\t\t}\n\t    }\n\t    else if (*r == DLG_HOTKEY_CHAR || first_hotkey)\n\t    {\n\t\tif (*r == DLG_HOTKEY_CHAR)\n\t\t    ++r;\n\t\tfirst_hotkey = FALSE;\n\t\tif (copy)\n\t\t{\n\t\t    if (*r == DLG_HOTKEY_CHAR)\t\t// '&&a' -> '&a'\n\t\t\t*msgp++ = *r;\n\t\t    else\n\t\t    {\n\t\t\t// '&a' -> '[a]'\n\t\t\t*msgp++ = (dfltbutton == 1) ? '[' : '(';\n\t\t\tmsgp += copy_char(r, msgp, FALSE);\n\t\t\t*msgp++ = (dfltbutton == 1) ? ']' : ')';\n\n\t\t\t// redefine hotkey\n\t\t\thotkp[copy_char(r, hotkp, TRUE)] = NUL;\n\t\t    }\n\t\t}\n\t\telse\n\t\t{\n\t\t    ++len;\t    // '&a' -> '[a]'\n\t\t    if (idx < HAS_HOTKEY_LEN - 1)\n\t\t\thas_hotkey[idx] = TRUE;\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// everything else copy literally\n\t\tif (copy)\n\t\t    msgp += copy_char(r, msgp, FALSE);\n\t    }\n\n\t    // advance to the next character\n\t    MB_PTR_ADV(r);\n\t}\n\n\tif (copy)\n\t{\n\t    *msgp++ = ':';\n\t    *msgp++ = ' ';\n\t    *msgp = NUL;\n\t}\n\telse\n\t{\n\t    len += (int)(STRLEN(message)\n\t\t\t+ 2\t\t\t// for the NL's\n\t\t\t+ STRLEN(buttons)\n\t\t\t+ 3);\t\t\t// for the \": \" and NUL\n\t    lenhotkey++;\t\t\t// for the NUL\n\n\t    // If no hotkey is specified first char is used.\n\t    if (!has_hotkey[0])\n\t    {\n\t\tfirst_hotkey = TRUE;\n\t\tlen += 2;\t\t// \"x\" -> \"[x]\"\n\t    }\n\n\t    /*\n\t     * Now allocate and load the strings\n\t     */\n\t    vim_free(confirm_msg);\n\t    confirm_msg = alloc(len);\n\t    if (confirm_msg == NULL)\n\t\treturn NULL;\n\t    *confirm_msg = NUL;\n\t    hotk = alloc(lenhotkey);\n\t    if (hotk == NULL)\n\t\treturn NULL;\n\n\t    *confirm_msg = '\\n';\n\t    STRCPY(confirm_msg + 1, message);\n\n\t    msgp = confirm_msg + 1 + STRLEN(message);\n\t    hotkp = hotk;\n\n\t    // Define first default hotkey.  Keep the hotkey string NUL\n\t    // terminated to avoid reading past the end.\n\t    hotkp[copy_char(buttons, hotkp, TRUE)] = NUL;\n\n\t    // Remember where the choices start, displaying starts here when\n\t    // \"hotkp\" typed at the more prompt.\n\t    confirm_msg_tail = msgp;\n\t    *msgp++ = '\\n';\n\t}\n    }\n\n    display_confirm_msg();\n    return hotk;\n}\n\n/*\n * Display the \":confirm\" message.  Also called when screen resized.\n */\n    static void\ndisplay_confirm_msg(void)\n{\n    // avoid that 'q' at the more prompt truncates the message here\n    ++confirm_msg_used;\n    if (confirm_msg != NULL)\n\tmsg_puts_attr((char *)confirm_msg, HL_ATTR(HLF_M));\n    --confirm_msg_used;\n}\n\n#endif // FEAT_CON_DIALOG\n\n#if defined(FEAT_CON_DIALOG) || defined(FEAT_GUI_DIALOG)\n\n    int\nvim_dialog_yesno(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    if (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)_(\"Question\") : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\"), dflt, NULL, FALSE) == 1)\n\treturn VIM_YES;\n    return VIM_NO;\n}\n\n    int\nvim_dialog_yesnocancel(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    switch (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)_(\"Question\") : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\\n&Cancel\"), dflt, NULL, FALSE))\n    {\n\tcase 1: return VIM_YES;\n\tcase 2: return VIM_NO;\n    }\n    return VIM_CANCEL;\n}\n\n    int\nvim_dialog_yesnoallcancel(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    switch (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)\"Question\" : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\\nSave &All\\n&Discard All\\n&Cancel\"),\n\t\t\t\t\t\t\t   dflt, NULL, FALSE))\n    {\n\tcase 1: return VIM_YES;\n\tcase 2: return VIM_NO;\n\tcase 3: return VIM_ALL;\n\tcase 4: return VIM_DISCARDALL;\n    }\n    return VIM_CANCEL;\n}\n\n#endif // FEAT_GUI_DIALOG || FEAT_CON_DIALOG\n", "\" Test that the system menu can be loaded.\n\nsource check.vim\nCheckFeature menu\n\nfunc Test_load_menu()\n  try\n    source $VIMRUNTIME/menu.vim\n  catch\n    call assert_report('error while loading menus: ' . v:exception)\n  endtry\n  call assert_match('browse confirm w', execute(':menu File.Save'))\n\n  let v:errmsg = ''\n  doautocmd LoadBufferMenu VimEnter\n  call assert_equal('', v:errmsg)\n\n  source $VIMRUNTIME/delmenu.vim\n  call assert_equal('', v:errmsg)\nendfunc\n\nfunc Test_buffer_menu_special_buffers()\n  \" Load in runtime menus\n  try\n    source $VIMRUNTIME/menu.vim\n  catch\n    call assert_report('error while loading menus: ' . v:exception)\n  endtry\n\n  let v:errmsg = ''\n  doautocmd LoadBufferMenu VimEnter\n  call assert_equal('', v:errmsg)\n\n  let orig_buffer_menus = execute(\"nmenu Buffers\")\n\n  \" Test that regular new buffer results in a new buffer menu item.\n  new\n  let new_buffer_menus = execute('nmenu Buffers')\n  call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(new_buffer_menus, \"\\n\")))\n  bwipe!\n  call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n\n  \" Make a new command-line window, test that it does not create a new buffer\n  \" menu.\n  call feedkeys(\"q::let cmdline_buffer_menus=execute('nmenu Buffers')\\<CR>:q\\<CR>\", 'ntx')\n  call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(cmdline_buffer_menus, \"\\n\")))\n  call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n\n  if has('terminal')\n    \" Open a terminal window and test that it does not create a buffer menu\n    \" item.\n    terminal\n    let term_buffer_menus = execute('nmenu Buffers')\n    call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(term_buffer_menus, \"\\n\")))\n    bwipe!\n    call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n  endif\n\n  \" Remove menus to clean up\n  source $VIMRUNTIME/delmenu.vim\n  call assert_equal('', v:errmsg)\nendfunc\n\nfunc Test_translate_menu()\n  CheckFeature multi_lang\n  if !filereadable($VIMRUNTIME . '/lang/menu_de_de.latin1.vim')\n    throw 'Skipped: translated menu not found'\n  endif\n\n  \" First delete any English menus.\n  source $VIMRUNTIME/delmenu.vim\n  set langmenu=de_de\n  source $VIMRUNTIME/menu.vim\n  call assert_match('browse confirm w', execute(':menu Datei.Speichern'))\n\n  source $VIMRUNTIME/delmenu.vim\nendfunc\n\nfunc Test_menu_commands()\n  nmenu 2 Test.FooBar :let g:did_menu = 'normal'<CR>\n  vmenu 2 Test.FooBar :let g:did_menu = 'visual'<CR>\n  smenu 2 Test.FooBar :let g:did_menu = 'select'<CR>\n  omenu 2 Test.FooBar :let g:did_menu = 'op-pending'<CR>\n  tlmenu 2 Test.FooBar :let g:did_menu = 'terminal'<CR>\n  imenu 2 Test.FooBar :let g:did_menu = 'insert'<CR>\n  cmenu 2 Test.FooBar :let g:did_menu = 'cmdline'<CR>\n  emenu n Test.FooBar\n\n  call feedkeys(\":menu Test.FooB\\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')\n  call assert_equal('\"menu Test.FooBar', @:)\n\n  call assert_equal('normal', g:did_menu)\n  emenu v Test.FooBar\n  call assert_equal('visual', g:did_menu)\n  emenu s Test.FooBar\n  call assert_equal('select', g:did_menu)\n  emenu o Test.FooBar\n  call assert_equal('op-pending', g:did_menu)\n  emenu t Test.FooBar\n  call assert_equal('terminal', g:did_menu)\n  emenu i Test.FooBar\n  call assert_equal('insert', g:did_menu)\n  emenu c Test.FooBar\n  call assert_equal('cmdline', g:did_menu)\n\n  nunmenu Test.FooBar\n  call assert_fails('emenu n Test.FooBar', 'E335: Menu not defined for Normal mode')\n  vunmenu Test.FooBar\n  call assert_fails('emenu v Test.FooBar', 'E335: Menu not defined for Visual mode')\n  vmenu 2 Test.FooBar :let g:did_menu = 'visual'<CR>\n  sunmenu Test.FooBar\n  call assert_fails('emenu s Test.FooBar', 'E335: Menu not defined for Select mode')\n  ounmenu Test.FooBar\n  call assert_fails('emenu o Test.FooBar', 'E335: Menu not defined for Op-pending mode')\n  iunmenu Test.FooBar\n  call assert_fails('emenu i Test.FooBar', 'E335: Menu not defined for Insert mode')\n  cunmenu Test.FooBar\n  call assert_fails('emenu c Test.FooBar', 'E335: Menu not defined for Cmdline mode')\n  tlunmenu Test.FooBar\n  call assert_fails('emenu t Test.FooBar', 'E335: Menu not defined for Terminal mode')\n\n  aunmenu Test.FooBar\n  call assert_fails('emenu n Test.FooBar', 'E334:')\n\n  nmenu 2 Test.FooBar.Child :let g:did_menu = 'foobar'<CR>\n  call assert_fails('emenu n Test.FooBar', 'E333:')\n  nunmenu Test.FooBar.Child\n\n  unlet g:did_menu\nendfun\n\n\" Test various menu related errors\nfunc Test_menu_errors()\n  menu Test.Foo  :version<CR>\n\n  \" Error cases\n  call assert_fails('menu .Test.Foo :ls<CR>', 'E475:')\n  call assert_fails('menu Test. :ls<CR>', 'E330:')\n  call assert_fails('menu Foo. :ls<CR>', 'E331:')\n  call assert_fails('unmenu Test.Foo abc', 'E488:')\n  call assert_fails('menu <Tab>:ls  :ls<CR>', 'E792:')\n  call assert_fails('menu Test.<Tab>:ls  :ls<CR>', 'E792:')\n  call assert_fails('menu Test.Foo.Bar  :ls<CR>', 'E327:')\n  call assert_fails('menu Test.-Sep-.Baz  :ls<CR>', 'E332:')\n  call assert_fails('menu Foo.Bar.--.Baz  :ls<CR>', 'E332:')\n  call assert_fails('menu disable Test.Foo.Bar', 'E327:')\n  call assert_fails('menu disable T.Foo', 'E329:')\n  call assert_fails('unmenu Test.Foo.Bar', 'E327:')\n  call assert_fails('cunmenu Test.Foo', 'E328:')\n  call assert_fails('unmenu Test.Bar', 'E329:')\n  call assert_fails('menu Test.Foo.Bar', 'E327:')\n  call assert_fails('cmenu Test.Foo', 'E328:')\n  call assert_fails('emenu x Test.Foo', 'E475:')\n  call assert_fails('emenu Test.Foo.Bar', 'E327:')\n  call assert_fails('menutranslate Test', 'E474:')\n\n  silent! unmenu Foo\n  unmenu Test\nendfunc\n\n\" Test for menu item completion in command line\nfunc Test_menu_expand()\n  \" Make sure we don't have stale menu items like Buffers menu.\n  source $VIMRUNTIME/delmenu.vim\n\n  \" Create the menu itmes for test\n  menu Dummy.Nothing lll\n  for i in range(1, 4)\n    let m = 'menu Xmenu.A' .. i .. '.A' .. i\n    for j in range(1, 4)\n      exe m .. 'B' .. j .. ' :echo \"A' .. i .. 'B' .. j .. '\"' .. \"<CR>\"\n    endfor\n  endfor\n  set wildmenu\n\n  \" Test for <CR> selecting a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<CR>\\<Right>x\\<BS>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A1.A1B2', @:)\n\n  \" Test for <Down> selecting a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Right>\\<Right>\\<Down>\" ..\n        \\ \"\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A3.A3B1 A3B2 A3B3 A3B4', @:)\n\n  \" Test for <Up> to go up a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Down>\\<Up>\\<Right>\\<Right>\" ..\n        \\ \"\\<Left>\\<Down>\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A2.A2B1 A2B2 A2B3 A2B4', @:)\n\n  \" Test for <Up> to go up a menu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Down>\\<Up>\\<Up>\\<Up>\" ..\n        \\ \"\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Dummy. Xmenu.', @:)\n\n  \" Test for expanding only submenus\n  call feedkeys(\":popup Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"popup Xmenu.A1 A2 A3 A4', @:)\n\n  \" Test for expanding menus after enable/disable\n  call feedkeys(\":menu enable Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu enable Xmenu.A1. A2. A3. A4.', @:)\n  call feedkeys(\":menu disable Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu disable Xmenu.A1. A2. A3. A4.', @:)\n\n  \" Test for expanding non-existing menu path\n  call feedkeys(\":menu xyz.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu xyz.', @:)\n  call feedkeys(\":menu Xmenu.A1.A1B1.xyz.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu Xmenu.A1.A1B1.xyz.', @:)\n\n  set wildmenu&\n  unmenu Xmenu\n  unmenu Dummy\n\n  \" Test for expanding popup menus with some hidden items\n  menu Xmenu.foo.A1 a1\n  menu Xmenu.]bar bar\n  menu Xmenu.]baz.B1 b1\n  menu Xmenu.-sep- :\n  call feedkeys(\":popup Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"popup Xmenu.foo', @:)\n  unmenu Xmenu\nendfunc\n\n\" Test for the menu_info() function\nfunc Test_menu_info()\n  \" Define menus with various attributes\n  10nnoremenu 10.10 T&est.F&oo  :echo 'foo'<CR>\n  10nmenu <silent> 10.20 T&est.B&ar<Tab>:bar  :echo 'bar'<CR>\n  10nmenu <script> 10.30.5 T&est.Ba&z.Qu&x  :echo 'qux'<CR>\n\n  let d = #{name: \"B&ar\\t:bar\", display: 'Bar', modes: 'n', shortcut: 'a',\n        \\ accel: ':bar', priority: 20, enabled: v:true, silent: v:true,\n        \\ noremenu: v:false, script: v:false, rhs: \":echo 'bar'<CR>\"}\n  call assert_equal(d, menu_info('Test.Bar'))\n\n  let d = #{name: 'Ba&z', display: 'Baz', modes: 'n', shortcut: 'z',\n        \\ priority: 30, submenus: ['Qux']}\n  call assert_equal(d, menu_info('Test.Baz'))\n\n  let d = #{name: 'T&est', display: 'Test', modes: 'n', shortcut: 'e',\n        \\ priority: 10, submenus: ['Foo', 'Bar', 'Baz']}\n  call assert_equal(d, menu_info('Test'))\n  call assert_equal({}, menu_info('Test.Dummy'))\n  call assert_equal({}, menu_info('Dummy'))\n\n  nmenu disable Test.Foo\n  call assert_equal(v:false, menu_info('Test.Foo').enabled)\n  nmenu enable Test.Foo\n  call assert_equal(v:true, menu_info('Test.Foo').enabled)\n\n  call assert_equal(menu_info('Test.Foo'), menu_info('Test.Foo', ''))\n  nmenu Test.abc  <Nop>\n  call assert_equal('<Nop>', menu_info('Test.abc').rhs)\n  call assert_fails('call menu_info([])', 'E730:')\n  call assert_fails('call menu_info(\"\", [])', 'E730:')\n  nunmenu Test\n\n  \" Test for defining menus in different modes\n  menu Test.menu :menu<CR>\n  menu! Test.menu! :menu!<CR>\n  amenu Test.amenu  :amenu<CR>\n  nmenu Test.nmenu  :nmenu<CR>\n  omenu Test.omenu  :omenu<CR>\n  vmenu Test.vmenu  :vmenu<CR>\n  xmenu Test.xmenu  :xmenu<CR>\n  smenu Test.smenu  :smenu<CR>\n  imenu <silent> <script> Test.imenu  :imenu<CR>\n  cmenu Test.cmenu  :cmenu<CR>\n  tlmenu Test.tlmenu  :tlmenu<CR>\n  tmenu Test.nmenu Normal mode menu\n  tmenu Test.omenu Op-pending mode menu\n  noremenu Test.noremenu :noremenu<CR>\n  noremenu! Test.noremenu! :noremenu!<CR>\n  anoremenu Test.anoremenu  :anoremenu<CR>\n  nnoremenu Test.nnoremenu  :nnoremenu<CR>\n  onoremenu Test.onoremenu  :onoremenu<CR>\n  vnoremenu Test.vnoremenu  :vnoremenu<CR>\n  xnoremenu Test.xnoremenu  :xnoremenu<CR>\n  snoremenu Test.snoremenu  :snoremenu<CR>\n  inoremenu <silent> Test.inoremenu  :inoremenu<CR>\n  cnoremenu Test.cnoremenu  :cnoremenu<CR>\n  tlnoremenu Test.tlnoremenu  :tlnoremenu<CR>\n  call assert_equal(#{name: 'menu', priority: 500, shortcut: '',\n        \\ display: 'menu', modes: ' ', enabled: v:true, silent: v:false,\n        \\ rhs: \":menu<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.menu'))\n  call assert_equal(#{name: 'menu!', priority: 500, shortcut: '',\n        \\ display: 'menu!', modes: '!', enabled: v:true, silent: v:false,\n        \\ rhs: \":menu!<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.menu!', '!'))\n  call assert_equal(#{name: 'amenu', priority: 500, shortcut: '',\n        \\ display: 'amenu', modes: 'a', enabled: v:true, silent: v:false,\n        \\ rhs: \":amenu<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.amenu', 'a'))\n  call assert_equal(#{name: 'nmenu', priority: 500, shortcut: '',\n        \\ display: 'nmenu', modes: 'n', enabled: v:true, silent: v:false,\n        \\ rhs: ':nmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.nmenu', 'n'))\n  call assert_equal(#{name: 'omenu', priority: 500, shortcut: '',\n        \\ display: 'omenu', modes: 'o', enabled: v:true, silent: v:false,\n        \\ rhs: ':omenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.omenu', 'o'))\n  call assert_equal(#{name: 'vmenu', priority: 500, shortcut: '',\n        \\ display: 'vmenu', modes: 'v', enabled: v:true, silent: v:false,\n        \\ rhs: ':vmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.vmenu', 'v'))\n  call assert_equal(#{name: 'xmenu', priority: 500, shortcut: '',\n        \\ display: 'xmenu', modes: 'x', enabled: v:true, silent: v:false,\n        \\ rhs: ':xmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.xmenu', 'x'))\n  call assert_equal(#{name: 'smenu', priority: 500, shortcut: '',\n        \\ display: 'smenu', modes: 's', enabled: v:true, silent: v:false,\n        \\ rhs: ':smenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.smenu', 's'))\n  call assert_equal(#{name: 'imenu', priority: 500, shortcut: '',\n        \\ display: 'imenu', modes: 'i', enabled: v:true, silent: v:true,\n        \\ rhs: ':imenu<CR>', noremenu: v:false, script: v:true},\n        \\ menu_info('Test.imenu', 'i'))\n  call assert_equal(#{ name: 'cmenu', priority: 500, shortcut: '',\n        \\ display: 'cmenu', modes: 'c', enabled: v:true, silent: v:false,\n        \\ rhs: ':cmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.cmenu', 'c'))\n  call assert_equal(#{name: 'tlmenu', priority: 500, shortcut: '',\n        \\ display: 'tlmenu', modes: 'tl', enabled: v:true, silent: v:false,\n        \\ rhs: ':tlmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.tlmenu', 'tl'))\n  call assert_equal(#{name: 'noremenu', priority: 500, shortcut: '',\n        \\ display: 'noremenu', modes: ' ', enabled: v:true, silent: v:false,\n        \\ rhs: \":noremenu<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.noremenu'))\n  call assert_equal(#{name: 'noremenu!', priority: 500, shortcut: '',\n        \\ display: 'noremenu!', modes: '!', enabled: v:true, silent: v:false,\n        \\ rhs: \":noremenu!<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.noremenu!', '!'))\n  call assert_equal(#{name: 'anoremenu', priority: 500, shortcut: '',\n        \\ display: 'anoremenu', modes: 'a', enabled: v:true, silent: v:false,\n        \\ rhs: \":anoremenu<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.anoremenu', 'a'))\n  call assert_equal(#{name: 'nnoremenu', priority: 500, shortcut: '',\n        \\ display: 'nnoremenu', modes: 'n', enabled: v:true, silent: v:false,\n        \\ rhs: ':nnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.nnoremenu', 'n'))\n  call assert_equal(#{name: 'onoremenu', priority: 500, shortcut: '',\n        \\ display: 'onoremenu', modes: 'o', enabled: v:true, silent: v:false,\n        \\ rhs: ':onoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.onoremenu', 'o'))\n  call assert_equal(#{name: 'vnoremenu', priority: 500, shortcut: '',\n        \\ display: 'vnoremenu', modes: 'v', enabled: v:true, silent: v:false,\n        \\ rhs: ':vnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.vnoremenu', 'v'))\n  call assert_equal(#{name: 'xnoremenu', priority: 500, shortcut: '',\n        \\ display: 'xnoremenu', modes: 'x', enabled: v:true, silent: v:false,\n        \\ rhs: ':xnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.xnoremenu', 'x'))\n  call assert_equal(#{name: 'snoremenu', priority: 500, shortcut: '',\n        \\ display: 'snoremenu', modes: 's', enabled: v:true, silent: v:false,\n        \\ rhs: ':snoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.snoremenu', 's'))\n  call assert_equal(#{name: 'inoremenu', priority: 500, shortcut: '',\n        \\ display: 'inoremenu', modes: 'i', enabled: v:true, silent: v:true,\n        \\ rhs: ':inoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.inoremenu', 'i'))\n  call assert_equal(#{ name: 'cnoremenu', priority: 500, shortcut: '',\n        \\ display: 'cnoremenu', modes: 'c', enabled: v:true, silent: v:false,\n        \\ rhs: ':cnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.cnoremenu', 'c'))\n  call assert_equal(#{name: 'tlnoremenu', priority: 500, shortcut: '',\n        \\ display: 'tlnoremenu', modes: 'tl', enabled: v:true, silent: v:false,\n        \\ rhs: ':tlnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.tlnoremenu', 'tl'))\n  aunmenu Test\n  tlunmenu Test\n  call assert_equal({}, menu_info('Test'))\n  call assert_equal({}, menu_info('Test', '!'))\n  call assert_equal({}, menu_info('Test', 'a'))\n  call assert_equal({}, menu_info('Test', 'n'))\n  call assert_equal({}, menu_info('Test', 'o'))\n  call assert_equal({}, menu_info('Test', 'v'))\n  call assert_equal({}, menu_info('Test', 'x'))\n  call assert_equal({}, menu_info('Test', 's'))\n  call assert_equal({}, menu_info('Test', 'i'))\n  call assert_equal({}, menu_info('Test', 'c'))\n  call assert_equal({}, menu_info('Test', 't'))\n  call assert_equal({}, menu_info('Test', 'tl'))\n\n  amenu Test.amenu  :amenu<CR>\n  call assert_equal(':amenu<CR>', menu_info('Test.amenu', '').rhs)\n  call assert_equal('<C-\\><C-O>:amenu<CR>', menu_info('Test.amenu', '!').rhs)\n  call assert_equal(':amenu<CR>', menu_info('Test.amenu', 'n').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'o').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'v').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'x').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 's').rhs)\n  call assert_equal('<C-\\><C-O>:amenu<CR>', menu_info('Test.amenu', 'i').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'c').rhs)\n  aunmenu Test.amenu\n\n  \" Test for hidden menus\n  menu ]Test.menu :menu<CR>\n  call assert_equal(#{name: ']Test', display: ']Test', priority: 500,\n        \\ shortcut: '', modes: ' ', submenus: ['menu']},\n        \\ menu_info(']Test'))\n  unmenu ]Test\n\n  \" Test for getting all the top-level menu names\n  call assert_notequal(menu_info('').submenus, [])\nendfunc\n\n\" Test for <special> keyword in a menu with 'cpo' containing '<'\nfunc Test_menu_special()\n  new\n  set cpo+=<\n  nmenu Test.Sign  am<Tab>n<Esc>\n  call feedkeys(\":emenu n Test.Sign\\<CR>\", 'x')\n  call assert_equal(\"m<Tab>n<Esc>\", getline(1))\n  nunmenu Test.Sign\n  nmenu <special> Test.Sign  am<Tab>n<Esc>\n  call setline(1, '')\n  call feedkeys(\":emenu n Test.Sign\\<CR>\", 'x')\n  call assert_equal(\"m\\tn\", getline(1))\n  set cpo-=<\n  close!\n  nunmenu Test.Sign\nendfunc\n\n\" Test for \"icon=filename\" in a toolbar\nfunc Test_menu_icon()\n  CheckFeature toolbar\n  nmenu icon=myicon.xpm Toolbar.Foo  :echo \"Foo\"<CR>\n  call assert_equal('myicon.xpm', \"Toolbar.Foo\"->menu_info().icon)\n  nunmenu Toolbar.Foo\n\n  \" Test for using the builtin icon\n  amenu ToolBar.BuiltIn22 :echo \"BuiltIn22\"<CR>\n  call assert_equal(#{name: 'BuiltIn22', display: 'BuiltIn22',\n        \\ enabled: v:true, shortcut: '', modes: 'a', script: v:false,\n        \\ iconidx: 22, priority: 500, silent: v:false,\n        \\ rhs: ':echo \"BuiltIn22\"<CR>', noremenu: v:false},\n        \\ menu_info(\"ToolBar.BuiltIn22\"))\n  aunmenu ToolBar.BuiltIn22\nendfunc\n\n\" Test for \":emenu\" command in different modes\nfunc Test_emenu_cmd()\n  new\n  xmenu Test.foo rx\n  call setline(1, ['aaaa', 'bbbb'])\n  normal ggVj\n  %emenu Test.foo\n  call assert_equal(['xxxx', 'xxxx'], getline(1, 2))\n  call setline(1, ['aaaa', 'bbbb'])\n  exe \"normal ggVj\\<Esc>\"\n  %emenu Test.foo\n  call assert_equal(['xxxx', 'xxxx'], getline(1, 2))\n  call setline(1, ['aaaa', 'bbbb'])\n  exe \"normal ggV\\<Esc>\"\n  2emenu Test.foo\n  call assert_equal(['aaaa', 'xxxx'], getline(1, 2))\n  xunmenu Test.foo\n  close!\nendfunc\n\n\" Test for PopUp menus\nfunc Test_popup_menu()\n  20menu PopUp.foo :echo 'foo'<CR>\n  20menu PopUp.bar :echo 'bar'<CR>\n  call assert_equal(#{name: 'PopUp', display: 'PopUp', priority: 20,\n        \\ shortcut: '', modes: ' ', submenus: ['foo', 'bar']},\n        \\ menu_info('PopUp'))\n  menu disable PopUp.bar\n  call assert_equal(v:true, \"PopUp.foo\"->menu_info().enabled)\n  call assert_equal(v:false, \"PopUp.bar\"->menu_info().enabled)\n  menu enable PopUp.bar\n  call assert_equal(v:true, \"PopUp.bar\"->menu_info().enabled)\n  unmenu PopUp\nendfunc\n\n\" Test for listing the menus using the :menu command\nfunc Test_show_menus()\n  \" In the GUI, tear-off menu items are present in the output below\n  \" So skip this test\n  CheckNotGui\n  aunmenu *\n  call assert_equal(['--- Menus ---'], split(execute('menu'), \"\\n\"))\n  nmenu <script> 200.10 Test.nmenu1 :nmenu1<CR>\n  nmenu 200.20 Test.nmenu2 :nmenu2<CR>\n  nnoremenu 200.30 Test.nmenu3 :nmenu3<CR>\n  nmenu 200.40 Test.nmenu4 :nmenu4<CR>\n  nmenu 200.50 disable Test.nmenu4\n  let exp =<< trim [TEXT]\n  --- Menus ---\n  200 Test\n    10 nmenu1\n        n&   :nmenu1<CR>\n    20 nmenu2\n        n    :nmenu2<CR>\n    30 nmenu3\n        n*   :nmenu3<CR>\n    40 nmenu4\n        n  - :nmenu4<CR>\n  [TEXT]\n  call assert_equal(exp, split(execute('nmenu'), \"\\n\"))\n  nunmenu Test\nendfunc\n\n\" Test for menu tips\nfunc Test_tmenu()\n  tunmenu *\n  call assert_equal(['--- Menus ---'], split(execute('tmenu'), \"\\n\"))\n  tmenu Test.nmenu1 nmenu1\n  tmenu Test.nmenu2.sub1 nmenu2.sub1\n  let exp =<< trim [TEXT]\n  --- Menus ---\n  500 Test\n    500 nmenu1\n        t  - nmenu1\n    500 nmenu2\n      500 sub1\n          t  - nmenu2.sub1\n  [TEXT]\n  call assert_equal(exp, split(execute('tmenu'), \"\\n\"))\n  tunmenu Test\nendfunc\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    while (l < h)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "fixing_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * message.c: functions for displaying messages on the command line\n */\n\n#define MESSAGE_FILE\t\t// don't include prototype for smsg()\n\n#include \"vim.h\"\n\nstatic void add_msg_hist(char_u *s, int len, int attr);\nstatic void hit_return_msg(void);\nstatic void msg_home_replace_attr(char_u *fname, int attr);\nstatic void msg_puts_attr_len(char *str, int maxlen, int attr);\nstatic void msg_puts_display(char_u *str, int maxlen, int attr, int recurse);\nstatic void msg_scroll_up(void);\nstatic void inc_msg_scrolled(void);\nstatic void store_sb_text(char_u **sb_str, char_u *s, int attr, int *sb_col, int finish);\nstatic void t_puts(int *t_col, char_u *t_s, char_u *s, int attr);\nstatic void msg_puts_printf(char_u *str, int maxlen);\nstatic int do_more_prompt(int typed_char);\nstatic void msg_screen_putchar(int c, int attr);\nstatic void msg_moremsg(int full);\nstatic int  msg_check_screen(void);\nstatic void redir_write(char_u *s, int maxlen);\n#ifdef FEAT_CON_DIALOG\nstatic char_u *msg_show_console_dialog(char_u *message, char_u *buttons, int dfltbutton);\nstatic int\tconfirm_msg_used = FALSE;\t// displaying confirm_msg\nstatic char_u\t*confirm_msg = NULL;\t\t// \":confirm\" message\nstatic char_u\t*confirm_msg_tail;\t\t// tail of confirm_msg\nstatic void display_confirm_msg(void);\n#endif\n#ifdef FEAT_JOB_CHANNEL\nstatic int emsg_to_channel_log = FALSE;\n#endif\n\nstruct msg_hist\n{\n    struct msg_hist\t*next;\n    char_u\t\t*msg;\n    int\t\t\tattr;\n};\n\nstatic struct msg_hist *first_msg_hist = NULL;\nstatic struct msg_hist *last_msg_hist = NULL;\nstatic int msg_hist_len = 0;\n\nstatic FILE *verbose_fd = NULL;\nstatic int  verbose_did_open = FALSE;\n\n/*\n * When writing messages to the screen, there are many different situations.\n * A number of variables is used to remember the current state:\n * msg_didany\t    TRUE when messages were written since the last time the\n *\t\t    user reacted to a prompt.\n *\t\t    Reset: After hitting a key for the hit-return prompt,\n *\t\t    hitting <CR> for the command line or input().\n *\t\t    Set: When any message is written to the screen.\n * msg_didout\t    TRUE when something was written to the current line.\n *\t\t    Reset: When advancing to the next line, when the current\n *\t\t    text can be overwritten.\n *\t\t    Set: When any message is written to the screen.\n * msg_nowait\t    No extra delay for the last drawn message.\n *\t\t    Used in normal_cmd() before the mode message is drawn.\n * emsg_on_display  There was an error message recently.  Indicates that there\n *\t\t    should be a delay before redrawing.\n * msg_scroll\t    The next message should not overwrite the current one.\n * msg_scrolled\t    How many lines the screen has been scrolled (because of\n *\t\t    messages).  Used in update_screen() to scroll the screen\n *\t\t    back.  Incremented each time the screen scrolls a line.\n * msg_scrolled_ign  TRUE when msg_scrolled is non-zero and msg_puts_attr()\n *\t\t    writes something without scrolling should not make\n *\t\t    need_wait_return to be set.  This is a hack to make \":ts\"\n *\t\t    work without an extra prompt.\n * lines_left\t    Number of lines available for messages before the\n *\t\t    more-prompt is to be given.  -1 when not set.\n * need_wait_return TRUE when the hit-return prompt is needed.\n *\t\t    Reset: After giving the hit-return prompt, when the user\n *\t\t    has answered some other prompt.\n *\t\t    Set: When the ruler or typeahead display is overwritten,\n *\t\t    scrolling the screen for some message.\n * keep_msg\t    Message to be displayed after redrawing the screen, in\n *\t\t    main_loop().\n *\t\t    This is an allocated string or NULL when not used.\n */\n\n/*\n * msg(s) - displays the string 's' on the status line\n * When terminal not initialized (yet) mch_errmsg(..) is used.\n * return TRUE if wait_return not called\n */\n    int\nmsg(char *s)\n{\n    return msg_attr_keep(s, 0, FALSE);\n}\n\n/*\n * Like msg() but keep it silent when 'verbosefile' is set.\n */\n    int\nverb_msg(char *s)\n{\n    int\t\tn;\n\n    verbose_enter();\n    n = msg_attr_keep(s, 0, FALSE);\n    verbose_leave();\n\n    return n;\n}\n\n    int\nmsg_attr(char *s, int attr)\n{\n    return msg_attr_keep(s, attr, FALSE);\n}\n\n    int\nmsg_attr_keep(\n    char\t*s,\n    int\t\tattr,\n    int\t\tkeep)\t    // TRUE: set keep_msg if it doesn't scroll\n{\n    static int\tentered = 0;\n    int\t\tretval;\n    char_u\t*buf = NULL;\n\n    // Skip messages not matching \":filter pattern\".\n    // Don't filter when there is an error.\n    if (!emsg_on_display && message_filtered((char_u *)s))\n\treturn TRUE;\n\n#ifdef FEAT_EVAL\n    if (attr == 0)\n\tset_vim_var_string(VV_STATUSMSG, (char_u *)s, -1);\n#endif\n\n    /*\n     * It is possible that displaying a messages causes a problem (e.g.,\n     * when redrawing the window), which causes another message, etc..\tTo\n     * break this loop, limit the recursiveness to 3 levels.\n     */\n    if (entered >= 3)\n\treturn TRUE;\n    ++entered;\n\n    // Add message to history (unless it's a repeated kept message or a\n    // truncated message)\n    if ((char_u *)s != keep_msg\n\t    || (*s != '<'\n\t\t&& last_msg_hist != NULL\n\t\t&& last_msg_hist->msg != NULL\n\t\t&& STRCMP(s, last_msg_hist->msg)))\n\tadd_msg_hist((char_u *)s, -1, attr);\n\n#ifdef FEAT_JOB_CHANNEL\n    if (emsg_to_channel_log)\n\t// Write message in the channel log.\n\tch_log(NULL, \"ERROR: %s\", s);\n#endif\n\n    // Truncate the message if needed.\n    msg_start();\n    buf = msg_strtrunc((char_u *)s, FALSE);\n    if (buf != NULL)\n\ts = (char *)buf;\n\n    msg_outtrans_attr((char_u *)s, attr);\n    msg_clr_eos();\n    retval = msg_end();\n\n    if (keep && retval && vim_strsize((char_u *)s)\n\t\t\t    < (int)(Rows - cmdline_row - 1) * Columns + sc_col)\n\tset_keep_msg((char_u *)s, 0);\n\n    need_fileinfo = FALSE;\n\n    vim_free(buf);\n    --entered;\n    return retval;\n}\n\n/*\n * Truncate a string such that it can be printed without causing a scroll.\n * Returns an allocated string or NULL when no truncating is done.\n */\n    char_u *\nmsg_strtrunc(\n    char_u\t*s,\n    int\t\tforce)\t    // always truncate\n{\n    char_u\t*buf = NULL;\n    int\t\tlen;\n    int\t\troom;\n\n    // May truncate message to avoid a hit-return prompt\n    if ((!msg_scroll && !need_wait_return && shortmess(SHM_TRUNCALL)\n\t\t\t       && !exmode_active && msg_silent == 0) || force)\n    {\n\tlen = vim_strsize(s);\n\tif (msg_scrolled != 0)\n\t    // Use all the columns.\n\t    room = (int)(Rows - msg_row) * Columns - 1;\n\telse\n\t    // Use up to 'showcmd' column.\n\t    room = (int)(Rows - msg_row - 1) * Columns + sc_col - 1;\n\tif (len > room && room > 0)\n\t{\n\t    if (enc_utf8)\n\t\t// may have up to 18 bytes per cell (6 per char, up to two\n\t\t// composing chars)\n\t\tlen = (room + 2) * 18;\n\t    else if (enc_dbcs == DBCS_JPNU)\n\t\t// may have up to 2 bytes per cell for euc-jp\n\t\tlen = (room + 2) * 2;\n\t    else\n\t\tlen = room + 2;\n\t    buf = alloc(len);\n\t    if (buf != NULL)\n\t\ttrunc_string(s, buf, room, len);\n\t}\n    }\n    return buf;\n}\n\n/*\n * Truncate a string \"s\" to \"buf\" with cell width \"room\".\n * \"s\" and \"buf\" may be equal.\n */\n    void\ntrunc_string(\n    char_u\t*s,\n    char_u\t*buf,\n    int\t\troom_in,\n    int\t\tbuflen)\n{\n    size_t\troom = room_in - 3; // \"...\" takes 3 chars\n    size_t\thalf;\n    size_t\tlen = 0;\n    int\t\te;\n    int\t\ti;\n    int\t\tn;\n\n    if (*s == NUL)\n    {\n\tif (buflen > 0)\n\t    *buf = NUL;\n\treturn;\n    }\n\n    if (room_in < 3)\n\troom = 0;\n    half = room / 2;\n\n    // First part: Start of the string.\n    for (e = 0; len < half && e < buflen; ++e)\n    {\n\tif (s[e] == NUL)\n\t{\n\t    // text fits without truncating!\n\t    buf[e] = NUL;\n\t    return;\n\t}\n\tn = ptr2cells(s + e);\n\tif (len + n > half)\n\t    break;\n\tlen += n;\n\tbuf[e] = s[e];\n\tif (has_mbyte)\n\t    for (n = (*mb_ptr2len)(s + e); --n > 0; )\n\t    {\n\t\tif (++e == buflen)\n\t\t    break;\n\t\tbuf[e] = s[e];\n\t    }\n    }\n\n    // Last part: End of the string.\n    i = e;\n    if (enc_dbcs != 0)\n    {\n\t// For DBCS going backwards in a string is slow, but\n\t// computing the cell width isn't too slow: go forward\n\t// until the rest fits.\n\tn = vim_strsize(s + i);\n\twhile (len + n > room)\n\t{\n\t    n -= ptr2cells(s + i);\n\t    i += (*mb_ptr2len)(s + i);\n\t}\n    }\n    else if (enc_utf8)\n    {\n\t// For UTF-8 we can go backwards easily.\n\thalf = i = (int)STRLEN(s);\n\tfor (;;)\n\t{\n\t    do\n\t\thalf = half - utf_head_off(s, s + half - 1) - 1;\n\t    while (half > 0 && utf_iscomposing(utf_ptr2char(s + half)));\n\t    n = ptr2cells(s + half);\n\t    if (len + n > room || half == 0)\n\t\tbreak;\n\t    len += n;\n\t    i = (int)half;\n\t}\n    }\n    else\n    {\n\tfor (i = (int)STRLEN(s);\n\t\t   i - 1 >= 0 && len + (n = ptr2cells(s + i - 1)) <= room; --i)\n\t    len += n;\n    }\n\n\n    if (i <= e + 3)\n    {\n\t// text fits without truncating\n\tif (s != buf)\n\t{\n\t    len = STRLEN(s);\n\t    if (len >= (size_t)buflen)\n\t\tlen = buflen - 1;\n\t    len = len - e + 1;\n\t    if (len < 1)\n\t\tbuf[e - 1] = NUL;\n\t    else\n\t\tmch_memmove(buf + e, s + e, len);\n\t}\n    }\n    else if (e + 3 < buflen)\n    {\n\t// set the middle and copy the last part\n\tmch_memmove(buf + e, \"...\", (size_t)3);\n\tlen = STRLEN(s + i) + 1;\n\tif (len >= (size_t)buflen - e - 3)\n\t    len = buflen - e - 3 - 1;\n\tmch_memmove(buf + e + 3, s + i, len);\n\tbuf[e + 3 + len - 1] = NUL;\n    }\n    else\n    {\n\t// can't fit in the \"...\", just truncate it\n\tbuf[e - 1] = NUL;\n    }\n}\n\n/*\n * Automatic prototype generation does not understand this function.\n * Note: Caller of smsg() and smsg_attr() must check the resulting string is\n * shorter than IOSIZE!!!\n */\n#ifndef PROTO\n\nint vim_snprintf(char *str, size_t str_m, const char *fmt, ...);\n\n    int\nsmsg(const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg((char *)s);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg((char *)IObuff);\n    }\n}\n\n    int\nsmsg_attr(int attr, const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg_attr((char *)s, attr);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg_attr((char *)IObuff, attr);\n    }\n}\n\n    int\nsmsg_attr_keep(int attr, const char *s, ...)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just\n\t// give the raw message so the user at least gets a hint.\n\treturn msg_attr_keep((char *)s, attr, TRUE);\n    }\n    else\n    {\n\tva_list arglist;\n\n\tva_start(arglist, s);\n\tvim_vsnprintf((char *)IObuff, IOSIZE, s, arglist);\n\tva_end(arglist);\n\treturn msg_attr_keep((char *)IObuff, attr, TRUE);\n    }\n}\n\n#endif\n\n/*\n * Remember the last sourcing name/lnum used in an error message, so that it\n * isn't printed each time when it didn't change.\n */\nstatic int\tlast_sourcing_lnum = 0;\nstatic char_u   *last_sourcing_name = NULL;\n\n/*\n * Reset the last used sourcing name/lnum.  Makes sure it is displayed again\n * for the next error message;\n */\n    void\nreset_last_sourcing(void)\n{\n    VIM_CLEAR(last_sourcing_name);\n    last_sourcing_lnum = 0;\n}\n\n/*\n * Return TRUE if \"SOURCING_NAME\" differs from \"last_sourcing_name\".\n */\n    static int\nother_sourcing_name(void)\n{\n    if (HAVE_SOURCING_INFO && SOURCING_NAME != NULL)\n    {\n\tif (last_sourcing_name != NULL)\n\t    return STRCMP(SOURCING_NAME, last_sourcing_name) != 0;\n\treturn TRUE;\n    }\n    return FALSE;\n}\n\n/*\n * Get the message about the source, as used for an error message.\n * Returns an allocated string with room for one more character.\n * Returns NULL when no message is to be given.\n */\n    static char_u *\nget_emsg_source(void)\n{\n    char_u\t*Buf, *p;\n\n    if (HAVE_SOURCING_INFO && SOURCING_NAME != NULL && other_sourcing_name())\n    {\n\tchar_u\t    *sname = estack_sfile(ESTACK_NONE);\n\tchar_u\t    *tofree = sname;\n\n\tif (sname == NULL)\n\t    sname = SOURCING_NAME;\n\n#ifdef FEAT_EVAL\n\tif (estack_compiling)\n\t    p = (char_u *)_(\"Error detected while compiling %s:\");\n\telse\n#endif\n\t    p = (char_u *)_(\"Error detected while processing %s:\");\n\tBuf = alloc(STRLEN(sname) + STRLEN(p));\n\tif (Buf != NULL)\n\t    sprintf((char *)Buf, (char *)p, sname);\n\tvim_free(tofree);\n\treturn Buf;\n    }\n    return NULL;\n}\n\n/*\n * Get the message about the source lnum, as used for an error message.\n * Returns an allocated string with room for one more character.\n * Returns NULL when no message is to be given.\n */\n    static char_u *\nget_emsg_lnum(void)\n{\n    char_u\t*Buf, *p;\n\n    // lnum is 0 when executing a command from the command line\n    // argument, we don't want a line number then\n    if (SOURCING_NAME != NULL\n\t    && (other_sourcing_name() || SOURCING_LNUM != last_sourcing_lnum)\n\t    && SOURCING_LNUM != 0)\n    {\n\tp = (char_u *)_(\"line %4ld:\");\n\tBuf = alloc(STRLEN(p) + 20);\n\tif (Buf != NULL)\n\t    sprintf((char *)Buf, (char *)p, (long)SOURCING_LNUM);\n\treturn Buf;\n    }\n    return NULL;\n}\n\n/*\n * Display name and line number for the source of an error.\n * Remember the file name and line number, so that for the next error the info\n * is only displayed if it changed.\n */\n    void\nmsg_source(int attr)\n{\n    char_u\t*p;\n    static int\trecursive = FALSE;\n\n    // Bail out if something called here causes an error.\n    if (recursive)\n\treturn;\n    recursive = TRUE;\n\n    ++no_wait_return;\n    p = get_emsg_source();\n    if (p != NULL)\n    {\n\tmsg_attr((char *)p, attr);\n\tvim_free(p);\n    }\n    p = get_emsg_lnum();\n    if (p != NULL)\n    {\n\tmsg_attr((char *)p, HL_ATTR(HLF_N));\n\tvim_free(p);\n\tlast_sourcing_lnum = SOURCING_LNUM;  // only once for each line\n    }\n\n    // remember the last sourcing name printed, also when it's empty\n    if (SOURCING_NAME == NULL || other_sourcing_name())\n    {\n\tVIM_CLEAR(last_sourcing_name);\n\tif (SOURCING_NAME != NULL)\n\t    last_sourcing_name = vim_strsave(SOURCING_NAME);\n    }\n    --no_wait_return;\n\n    recursive = FALSE;\n}\n\n/*\n * Return TRUE if not giving error messages right now:\n * If \"emsg_off\" is set: no error messages at the moment.\n * If \"msg\" is in 'debug': do error message but without side effects.\n * If \"emsg_skip\" is set: never do error messages.\n */\n    static int\nemsg_not_now(void)\n{\n    if ((emsg_off > 0 && vim_strchr(p_debug, 'm') == NULL\n\t\t\t\t\t  && vim_strchr(p_debug, 't') == NULL)\n#ifdef FEAT_EVAL\n\t    || emsg_skip > 0\n#endif\n\t    )\n\treturn TRUE;\n    return FALSE;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\nstatic garray_T ignore_error_list = GA_EMPTY;\n\n    void\nignore_error_for_testing(char_u *error)\n{\n    if (ignore_error_list.ga_itemsize == 0)\n\tga_init2(&ignore_error_list, sizeof(char_u *), 1);\n\n    if (STRCMP(\"RESET\", error) == 0)\n\tga_clear_strings(&ignore_error_list);\n    else\n\tga_copy_string(&ignore_error_list, error);\n}\n\n    static int\nignore_error(char_u *msg)\n{\n    int i;\n\n    for (i = 0; i < ignore_error_list.ga_len; ++i)\n\tif (strstr((char *)msg,\n\t\t  (char *)((char_u **)(ignore_error_list.ga_data))[i]) != NULL)\n\t    return TRUE;\n    return FALSE;\n}\n#endif\n\n#if !defined(HAVE_STRERROR) || defined(PROTO)\n/*\n * Replacement for perror() that behaves more or less like emsg() was called.\n * v:errmsg will be set and called_emsg will be incremented.\n */\n    void\ndo_perror(char *msg)\n{\n    perror(msg);\n    ++emsg_silent;\n    emsg(msg);\n    --emsg_silent;\n}\n#endif\n\n/*\n * emsg_core() - display an error message\n *\n * Rings the bell, if appropriate, and calls message() to do the real work\n * When terminal not initialized (yet) mch_errmsg(..) is used.\n *\n * Return TRUE if wait_return not called.\n * Note: caller must check 'emsg_not_now()' before calling this.\n */\n    static int\nemsg_core(char_u *s)\n{\n    int\t\tattr;\n    char_u\t*p;\n    int\t\tr;\n#ifdef FEAT_EVAL\n    int\t\tignore = FALSE;\n    int\t\tsevere;\n#endif\n\n#ifdef FEAT_EVAL\n    // When testing some errors are turned into a normal message.\n    if (ignore_error(s))\n\t// don't call msg() if it results in a dialog\n\treturn msg_use_printf() ? FALSE : msg((char *)s);\n#endif\n\n    ++called_emsg;\n\n#ifdef FEAT_EVAL\n    // If \"emsg_severe\" is TRUE: When an error exception is to be thrown,\n    // prefer this message over previous messages for the same command.\n    severe = emsg_severe;\n    emsg_severe = FALSE;\n#endif\n\n    if (!emsg_off || vim_strchr(p_debug, 't') != NULL)\n    {\n#ifdef FEAT_EVAL\n\t/*\n\t * Cause a throw of an error exception if appropriate.  Don't display\n\t * the error message in this case.  (If no matching catch clause will\n\t * be found, the message will be displayed later on.)  \"ignore\" is set\n\t * when the message should be ignored completely (used for the\n\t * interrupt message).\n\t */\n\tif (cause_errthrow(s, severe, &ignore) == TRUE)\n\t{\n\t    if (!ignore)\n\t\t++did_emsg;\n\t    return TRUE;\n\t}\n\n\tif (in_assert_fails && emsg_assert_fails_msg == NULL)\n\t{\n\t    emsg_assert_fails_msg = vim_strsave(s);\n\t    emsg_assert_fails_lnum = SOURCING_LNUM;\n\t    vim_free(emsg_assert_fails_context);\n\t    emsg_assert_fails_context = vim_strsave(\n\t\t\t SOURCING_NAME == NULL ? (char_u *)\"\" : SOURCING_NAME);\n\t}\n\n\t// set \"v:errmsg\", also when using \":silent! cmd\"\n\tset_vim_var_string(VV_ERRMSG, s, -1);\n#endif\n\n\t/*\n\t * When using \":silent! cmd\" ignore error messages.\n\t * But do write it to the redirection file.\n\t */\n\tif (emsg_silent != 0)\n\t{\n#ifdef FEAT_EVAL\n\t    ++did_emsg_silent;\n#endif\n\t    if (emsg_noredir == 0)\n\t    {\n\t\tmsg_start();\n\t\tp = get_emsg_source();\n\t\tif (p != NULL)\n\t\t{\n\t\t    STRCAT(p, \"\\n\");\n\t\t    redir_write(p, -1);\n\t\t    vim_free(p);\n\t\t}\n\t\tp = get_emsg_lnum();\n\t\tif (p != NULL)\n\t\t{\n\t\t    STRCAT(p, \"\\n\");\n\t\t    redir_write(p, -1);\n\t\t    vim_free(p);\n\t\t}\n\t\tredir_write(s, -1);\n\t    }\n#ifdef FEAT_EVAL\n\t    // Only increment did_emsg_def when :silent! wasn't used inside the\n\t    // :def function.\n\t    if (emsg_silent == emsg_silent_def)\n\t\t++did_emsg_def;\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t    ch_log(NULL, \"ERROR silent: %s\", (char *)s);\n#endif\n\t    return TRUE;\n\t}\n\n\tex_exitval = 1;\n\n\t// Reset msg_silent, an error causes messages to be switched back on.\n\tmsg_silent = 0;\n\tcmd_silent = FALSE;\n\n\tif (global_busy)\t\t// break :global command\n\t    ++global_busy;\n\n\tif (p_eb)\n\t    beep_flush();\t\t// also includes flush_buffers()\n\telse\n\t    flush_buffers(FLUSH_MINIMAL);  // flush internal buffers\n\t++did_emsg;\t\t\t   // flag for DoOneCmd()\n#ifdef FEAT_EVAL\n\t++uncaught_emsg;\n#endif\n    }\n\n    emsg_on_display = TRUE;\t// remember there is an error message\n    ++msg_scroll;\t\t// don't overwrite a previous message\n    attr = HL_ATTR(HLF_E);\t// set highlight mode for error messages\n    if (msg_scrolled != 0)\n\tneed_wait_return = TRUE;    // needed in case emsg() is called after\n\t\t\t\t    // wait_return has reset need_wait_return\n\t\t\t\t    // and a redraw is expected because\n\t\t\t\t    // msg_scrolled is non-zero\n\n#ifdef FEAT_JOB_CHANNEL\n    emsg_to_channel_log = TRUE;\n#endif\n    /*\n     * Display name and line number for the source of the error.\n     */\n    msg_source(attr);\n\n    /*\n     * Display the error message itself.\n     */\n    msg_nowait = FALSE;\t\t\t// wait for this msg\n    r = msg_attr((char *)s, attr);\n\n#ifdef FEAT_JOB_CHANNEL\n    emsg_to_channel_log = FALSE;\n#endif\n    return r;\n}\n\n/*\n * Print an error message.\n */\n    int\nemsg(char *s)\n{\n    // Skip this if not giving error messages at the moment.\n    if (!emsg_not_now())\n\treturn emsg_core((char_u *)s);\n    return TRUE;\t\t// no error messages at the moment\n}\n\n#ifndef PROTO  // manual proto with __attribute__\n/*\n * Print an error message with format string and variable arguments.\n * Note: caller must not pass 'IObuff' as 1st argument.\n */\n    int\nsemsg(const char *s, ...)\n{\n    // Skip this if not giving error messages at the moment.\n    if (!emsg_not_now())\n    {\n\tif (IObuff == NULL)\n\t{\n\t    // Very early in initialisation and already something wrong, just\n\t    // give the raw message so the user at least gets a hint.\n\t    return emsg_core((char_u *)s);\n\t}\n\telse\n\t{\n\t    va_list ap;\n\n\t    va_start(ap, s);\n\t    vim_vsnprintf((char *)IObuff, IOSIZE, s, ap);\n\t    va_end(ap);\n\t    return emsg_core(IObuff);\n\t}\n    }\n    return TRUE;\t\t// no error messages at the moment\n}\n#endif\n\n/*\n * Same as emsg(...), but abort on error when ABORT_ON_INTERNAL_ERROR is\n * defined. It is used for internal errors only, so that they can be\n * detected when fuzzing vim.\n */\n    void\niemsg(char *s)\n{\n    if (!emsg_not_now())\n    {\n\temsg_core((char_u *)s);\n#if defined(ABORT_ON_INTERNAL_ERROR) && defined(FEAT_EVAL)\n\tset_vim_var_string(VV_ERRMSG, (char_u *)s, -1);\n\tabort();\n#endif\n    }\n}\n\n#ifndef PROTO  // manual proto with __attribute__\n/*\n * Same as semsg(...) but abort on error when ABORT_ON_INTERNAL_ERROR is\n * defined. It is used for internal errors only, so that they can be\n * detected when fuzzing vim.\n * Note: caller must not pass 'IObuff' as 1st argument.\n */\n    void\nsiemsg(const char *s, ...)\n{\n    if (!emsg_not_now())\n    {\n\tif (IObuff == NULL)\n\t{\n\t    // Very early in initialisation and already something wrong, just\n\t    // give the raw message so the user at least gets a hint.\n\t    emsg_core((char_u *)s);\n\t}\n\telse\n\t{\n\t    va_list ap;\n\n\t    va_start(ap, s);\n\t    vim_vsnprintf((char *)IObuff, IOSIZE, s, ap);\n\t    va_end(ap);\n\t    emsg_core(IObuff);\n\t}\n    }\n# ifdef ABORT_ON_INTERNAL_ERROR\n    abort();\n# endif\n}\n#endif\n\n/*\n * Give an \"Internal error\" message.\n */\n    void\ninternal_error(char *where)\n{\n    siemsg(_(e_internal_error_str), where);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Like internal_error() but do not call abort(), to avoid tests using\n * test_unknown() and test_void() causing Vim to exit.\n */\n    void\ninternal_error_no_abort(char *where)\n{\n     semsg(_(e_internal_error_str), where);\n}\n#endif\n\n// emsg3() and emsgn() are in misc2.c to avoid warnings for the prototypes.\n\n    void\nemsg_invreg(int name)\n{\n    semsg(_(e_invalid_register_name_str), transchar(name));\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Give an error message which contains %s for \"name[len]\".\n */\n    void\nemsg_namelen(char *msg, char_u *name, int len)\n{\n    char_u *copy = vim_strnsave(name, len);\n\n    semsg(msg, copy == NULL ? \"NULL\" : (char *)copy);\n    vim_free(copy);\n}\n#endif\n\n/*\n * Like msg(), but truncate to a single line if p_shm contains 't', or when\n * \"force\" is TRUE.  This truncates in another way as for normal messages.\n * Careful: The string may be changed by msg_may_trunc()!\n * Returns a pointer to the printed message, if wait_return() not called.\n */\n    char *\nmsg_trunc_attr(char *s, int force, int attr)\n{\n    int\t\tn;\n    char\t*ts;\n\n    // Add message to history before truncating\n    add_msg_hist((char_u *)s, -1, attr);\n\n    ts = (char *)msg_may_trunc(force, (char_u *)s);\n\n    msg_hist_off = TRUE;\n    n = msg_attr(ts, attr);\n    msg_hist_off = FALSE;\n\n    if (n)\n\treturn ts;\n    return NULL;\n}\n\n/*\n * Check if message \"s\" should be truncated at the start (for filenames).\n * Return a pointer to where the truncated message starts.\n * Note: May change the message by replacing a character with '<'.\n */\n    char_u *\nmsg_may_trunc(int force, char_u *s)\n{\n    int\t\tn;\n    int\t\troom;\n\n    // If something unexpected happened \"room\" may be negative, check for that\n    // just in case.\n    room = (int)(Rows - cmdline_row - 1) * Columns + sc_col - 1;\n    if (room > 0 && (force || (shortmess(SHM_TRUNC) && !exmode_active))\n\t    && (n = (int)STRLEN(s) - room) > 0)\n    {\n\tif (has_mbyte)\n\t{\n\t    int\tsize = vim_strsize(s);\n\n\t    // There may be room anyway when there are multibyte chars.\n\t    if (size <= room)\n\t\treturn s;\n\n\t    for (n = 0; size >= room; )\n\t    {\n\t\tsize -= (*mb_ptr2cells)(s + n);\n\t\tn += (*mb_ptr2len)(s + n);\n\t    }\n\t    --n;\n\t}\n\ts += n;\n\t*s = '<';\n    }\n    return s;\n}\n\n    static void\nadd_msg_hist(\n    char_u\t*s,\n    int\t\tlen,\t\t// -1 for undetermined length\n    int\t\tattr)\n{\n    struct msg_hist *p;\n\n    if (msg_hist_off || msg_silent != 0)\n\treturn;\n\n    // Don't let the message history get too big\n    while (msg_hist_len > MAX_MSG_HIST_LEN)\n\t(void)delete_first_msg();\n\n    // allocate an entry and add the message at the end of the history\n    p = ALLOC_ONE(struct msg_hist);\n    if (p != NULL)\n    {\n\tif (len < 0)\n\t    len = (int)STRLEN(s);\n\t// remove leading and trailing newlines\n\twhile (len > 0 && *s == '\\n')\n\t{\n\t    ++s;\n\t    --len;\n\t}\n\twhile (len > 0 && s[len - 1] == '\\n')\n\t    --len;\n\tp->msg = vim_strnsave(s, len);\n\tp->next = NULL;\n\tp->attr = attr;\n\tif (last_msg_hist != NULL)\n\t    last_msg_hist->next = p;\n\tlast_msg_hist = p;\n\tif (first_msg_hist == NULL)\n\t    first_msg_hist = last_msg_hist;\n\t++msg_hist_len;\n    }\n}\n\n/*\n * Delete the first (oldest) message from the history.\n * Returns FAIL if there are no messages.\n */\n    int\ndelete_first_msg(void)\n{\n    struct msg_hist *p;\n\n    if (msg_hist_len <= 0)\n\treturn FAIL;\n    p = first_msg_hist;\n    first_msg_hist = p->next;\n    if (first_msg_hist == NULL)\n\tlast_msg_hist = NULL;  // history is empty\n    vim_free(p->msg);\n    vim_free(p);\n    --msg_hist_len;\n    return OK;\n}\n\n/*\n * \":messages\" command.\n */\n    void\nex_messages(exarg_T *eap)\n{\n    struct msg_hist *p;\n    char_u\t    *s;\n    int\t\t    c = 0;\n\n    if (STRCMP(eap->arg, \"clear\") == 0)\n    {\n\tint keep = eap->addr_count == 0 ? 0 : eap->line2;\n\n\twhile (msg_hist_len > keep)\n\t    (void)delete_first_msg();\n\treturn;\n    }\n\n    if (*eap->arg != NUL)\n    {\n\temsg(_(e_invalid_argument));\n\treturn;\n    }\n\n    msg_hist_off = TRUE;\n\n    p = first_msg_hist;\n    if (eap->addr_count != 0)\n    {\n\t// Count total messages\n\tfor (; p != NULL && !got_int; p = p->next)\n\t    c++;\n\n\tc -= eap->line2;\n\n\t// Skip without number of messages specified\n\tfor (p = first_msg_hist; p != NULL && !got_int && c > 0;\n\t\t\t\t\t\t    p = p->next, c--);\n    }\n\n    if (p == first_msg_hist)\n    {\n#ifdef FEAT_MULTI_LANG\n\ts = get_mess_lang();\n#else\n\ts = mch_getenv((char_u *)\"LANG\");\n#endif\n\tif (s != NULL && *s != NUL)\n\t    // The next comment is extracted by xgettext and put in po file for\n\t    // translators to read.\n\t    msg_attr(\n\t\t    // Translator: Please replace the name and email address\n\t\t    // with the appropriate text for your translation.\n\t\t    _(\"Messages maintainer: Bram Moolenaar <Bram@vim.org>\"),\n\t\t    HL_ATTR(HLF_T));\n    }\n\n    // Display what was not skipped.\n    for (; p != NULL && !got_int; p = p->next)\n\tif (p->msg != NULL)\n\t    msg_attr((char *)p->msg, p->attr);\n\n    msg_hist_off = FALSE;\n}\n\n#if defined(FEAT_CON_DIALOG) || defined(FIND_REPLACE_DIALOG) || defined(PROTO)\n/*\n * Call this after prompting the user.  This will avoid a hit-return message\n * and a delay.\n */\n    void\nmsg_end_prompt(void)\n{\n    need_wait_return = FALSE;\n    emsg_on_display = FALSE;\n    cmdline_row = msg_row;\n    msg_col = 0;\n    msg_clr_eos();\n    lines_left = -1;\n}\n#endif\n\n/*\n * Wait for the user to hit a key (normally Enter).\n * If \"redraw\" is TRUE, clear and redraw the screen.\n * If \"redraw\" is FALSE, just redraw the screen.\n * If \"redraw\" is -1, don't redraw at all.\n */\n    void\nwait_return(int redraw)\n{\n    int\t\tc;\n    int\t\toldState;\n    int\t\ttmpState;\n    int\t\thad_got_int;\n    int\t\tsave_reg_recording;\n    FILE\t*save_scriptout;\n\n    if (redraw == TRUE)\n\tmust_redraw = CLEAR;\n\n    // If using \":silent cmd\", don't wait for a return.  Also don't set\n    // need_wait_return to do it later.\n    if (msg_silent != 0)\n\treturn;\n\n    /*\n     * When inside vgetc(), we can't wait for a typed character at all.\n     * With the global command (and some others) we only need one return at\n     * the end. Adjust cmdline_row to avoid the next message overwriting the\n     * last one.\n     */\n    if (vgetc_busy > 0)\n\treturn;\n    need_wait_return = TRUE;\n    if (no_wait_return)\n    {\n\tif (!exmode_active)\n\t    cmdline_row = msg_row;\n\treturn;\n    }\n\n    redir_off = TRUE;\t\t// don't redirect this message\n    oldState = State;\n    if (quit_more)\n    {\n\tc = CAR;\t\t// just pretend CR was hit\n\tquit_more = FALSE;\n\tgot_int = FALSE;\n    }\n    else if (exmode_active)\n    {\n\tmsg_puts(\" \");\t\t// make sure the cursor is on the right line\n\tc = CAR;\t\t// no need for a return in ex mode\n\tgot_int = FALSE;\n    }\n    else\n    {\n\t// Make sure the hit-return prompt is on screen when 'guioptions' was\n\t// just changed.\n\tscreenalloc(FALSE);\n\n\tState = MODE_HITRETURN;\n\tsetmouse();\n#ifdef USE_ON_FLY_SCROLL\n\tdont_scroll = TRUE;\t\t// disallow scrolling here\n#endif\n\tcmdline_row = msg_row;\n\n\t// Avoid the sequence that the user types \":\" at the hit-return prompt\n\t// to start an Ex command, but the file-changed dialog gets in the\n\t// way.\n\tif (need_check_timestamps)\n\t    check_timestamps(FALSE);\n\n\thit_return_msg();\n\n\tdo\n\t{\n\t    // Remember \"got_int\", if it is set vgetc() probably returns a\n\t    // CTRL-C, but we need to loop then.\n\t    had_got_int = got_int;\n\n\t    // Don't do mappings here, we put the character back in the\n\t    // typeahead buffer.\n\t    ++no_mapping;\n\t    ++allow_keys;\n\n\t    // Temporarily disable Recording. If Recording is active, the\n\t    // character will be recorded later, since it will be added to the\n\t    // typebuf after the loop\n\t    save_reg_recording = reg_recording;\n\t    save_scriptout = scriptout;\n\t    reg_recording = 0;\n\t    scriptout = NULL;\n\t    c = safe_vgetc();\n\t    if (had_got_int && !global_busy)\n\t\tgot_int = FALSE;\n\t    --no_mapping;\n\t    --allow_keys;\n\t    reg_recording = save_reg_recording;\n\t    scriptout = save_scriptout;\n\n#ifdef FEAT_CLIPBOARD\n\t    // Strange way to allow copying (yanking) a modeless selection at\n\t    // the hit-enter prompt.  Use CTRL-Y, because the same is used in\n\t    // Cmdline-mode and it's harmless when there is no selection.\n\t    if (c == Ctrl_Y && clip_star.state == SELECT_DONE)\n\t    {\n\t\tclip_copy_modeless_selection(TRUE);\n\t\tc = K_IGNORE;\n\t    }\n#endif\n\n\t    /*\n\t     * Allow scrolling back in the messages.\n\t     * Also accept scroll-down commands when messages fill the screen,\n\t     * to avoid that typing one 'j' too many makes the messages\n\t     * disappear.\n\t     */\n\t    if (p_more && !p_cp)\n\t    {\n\t\tif (c == 'b' || c == 'k' || c == 'u' || c == 'g'\n\t\t\t\t\t\t|| c == K_UP || c == K_PAGEUP)\n\t\t{\n\t\t    if (msg_scrolled > Rows)\n\t\t\t// scroll back to show older messages\n\t\t\tdo_more_prompt(c);\n\t\t    else\n\t\t    {\n\t\t\tmsg_didout = FALSE;\n\t\t\tc = K_IGNORE;\n\t\t\tmsg_col =\n#ifdef FEAT_RIGHTLEFT\n\t\t\t    cmdmsg_rl ? Columns - 1 :\n#endif\n\t\t\t    0;\n\t\t    }\n\t\t    if (quit_more)\n\t\t    {\n\t\t\tc = CAR;\t\t// just pretend CR was hit\n\t\t\tquit_more = FALSE;\n\t\t\tgot_int = FALSE;\n\t\t    }\n\t\t    else if (c != K_IGNORE)\n\t\t    {\n\t\t\tc = K_IGNORE;\n\t\t\thit_return_msg();\n\t\t    }\n\t\t}\n\t\telse if (msg_scrolled > Rows - 2\n\t\t\t && (c == 'j' || c == 'd' || c == 'f'\n\t\t\t\t\t   || c == K_DOWN || c == K_PAGEDOWN))\n\t\t    c = K_IGNORE;\n\t    }\n\t} while ((had_got_int && c == Ctrl_C)\n\t\t\t\t|| c == K_IGNORE\n#ifdef FEAT_GUI\n\t\t\t\t|| c == K_VER_SCROLLBAR || c == K_HOR_SCROLLBAR\n#endif\n\t\t\t\t|| c == K_LEFTDRAG   || c == K_LEFTRELEASE\n\t\t\t\t|| c == K_MIDDLEDRAG || c == K_MIDDLERELEASE\n\t\t\t\t|| c == K_RIGHTDRAG  || c == K_RIGHTRELEASE\n\t\t\t\t|| c == K_MOUSELEFT  || c == K_MOUSERIGHT\n\t\t\t\t|| c == K_MOUSEDOWN  || c == K_MOUSEUP\n\t\t\t\t|| c == K_MOUSEMOVE\n\t\t\t\t|| (!mouse_has(MOUSE_RETURN)\n\t\t\t\t    && mouse_row < msg_row\n\t\t\t\t    && (c == K_LEFTMOUSE\n\t\t\t\t\t|| c == K_MIDDLEMOUSE\n\t\t\t\t\t|| c == K_RIGHTMOUSE\n\t\t\t\t\t|| c == K_X1MOUSE\n\t\t\t\t\t|| c == K_X2MOUSE))\n\t\t\t\t);\n\tui_breakcheck();\n\t/*\n\t * Avoid that the mouse-up event causes visual mode to start.\n\t */\n\tif (c == K_LEFTMOUSE || c == K_MIDDLEMOUSE || c == K_RIGHTMOUSE\n\t\t\t\t\t  || c == K_X1MOUSE || c == K_X2MOUSE)\n\t    (void)jump_to_mouse(MOUSE_SETPOS, NULL, 0);\n\telse if (vim_strchr((char_u *)\"\\r\\n \", c) == NULL && c != Ctrl_C)\n\t{\n\t    // Put the character back in the typeahead buffer.  Don't use the\n\t    // stuff buffer, because lmaps wouldn't work.\n\t    ins_char_typebuf(vgetc_char, vgetc_mod_mask);\n\t    do_redraw = TRUE;\t    // need a redraw even though there is\n\t\t\t\t    // typeahead\n\t}\n    }\n    redir_off = FALSE;\n\n    /*\n     * If the user hits ':', '?' or '/' we get a command line from the next\n     * line.\n     */\n    if (c == ':' || c == '?' || c == '/')\n    {\n\tif (!exmode_active)\n\t    cmdline_row = msg_row;\n\tskip_redraw = TRUE;\t    // skip redraw once\n\tdo_redraw = FALSE;\n#ifdef FEAT_TERMINAL\n\tskip_term_loop = TRUE;\n#endif\n    }\n\n    /*\n     * If the window size changed set_shellsize() will redraw the screen.\n     * Otherwise the screen is only redrawn if 'redraw' is set and no ':'\n     * typed.\n     */\n    tmpState = State;\n    State = oldState;\t\t    // restore State before set_shellsize\n    setmouse();\n    msg_check();\n\n#if defined(UNIX) || defined(VMS)\n    /*\n     * When switching screens, we need to output an extra newline on exit.\n     */\n    if (swapping_screen() && !termcap_active)\n\tnewline_on_exit = TRUE;\n#endif\n\n    need_wait_return = FALSE;\n    did_wait_return = TRUE;\n    emsg_on_display = FALSE;\t// can delete error message now\n    lines_left = -1;\t\t// reset lines_left at next msg_start()\n    reset_last_sourcing();\n    if (keep_msg != NULL && vim_strsize(keep_msg) >=\n\t\t\t\t  (Rows - cmdline_row - 1) * Columns + sc_col)\n\tVIM_CLEAR(keep_msg);\t    // don't redisplay message, it's too long\n\n    if (tmpState == MODE_SETWSIZE)  // got resize event while in vgetc()\n    {\n\tstarttermcap();\t\t    // start termcap before redrawing\n\tshell_resized();\n    }\n    else if (!skip_redraw\n\t    && (redraw == TRUE || (msg_scrolled != 0 && redraw != -1)))\n    {\n\tstarttermcap();\t\t    // start termcap before redrawing\n\tredraw_later(VALID);\n    }\n}\n\n/*\n * Write the hit-return prompt.\n */\n    static void\nhit_return_msg(void)\n{\n    int\t\tsave_p_more = p_more;\n\n    p_more = FALSE;\t// don't want to see this message when scrolling back\n    if (msg_didout)\t// start on a new line\n\tmsg_putchar('\\n');\n    if (got_int)\n\tmsg_puts(_(\"Interrupt: \"));\n\n    msg_puts_attr(_(\"Press ENTER or type command to continue\"), HL_ATTR(HLF_R));\n    if (!msg_use_printf())\n\tmsg_clr_eos();\n    p_more = save_p_more;\n}\n\n/*\n * Set \"keep_msg\" to \"s\".  Free the old value and check for NULL pointer.\n */\n    void\nset_keep_msg(char_u *s, int attr)\n{\n    vim_free(keep_msg);\n    if (s != NULL && msg_silent == 0)\n\tkeep_msg = vim_strsave(s);\n    else\n\tkeep_msg = NULL;\n    keep_msg_more = FALSE;\n    keep_msg_attr = attr;\n}\n\n#if defined(FEAT_TERMRESPONSE) || defined(PROTO)\n/*\n * If there currently is a message being displayed, set \"keep_msg\" to it, so\n * that it will be displayed again after redraw.\n */\n    void\nset_keep_msg_from_hist(void)\n{\n    if (keep_msg == NULL && last_msg_hist != NULL && msg_scrolled == 0\n\t\t\t\t\t\t      && (State & MODE_NORMAL))\n\tset_keep_msg(last_msg_hist->msg, last_msg_hist->attr);\n}\n#endif\n\n/*\n * Prepare for outputting characters in the command line.\n */\n    void\nmsg_start(void)\n{\n    int\t\tdid_return = FALSE;\n\n    if (!msg_silent)\n    {\n\tVIM_CLEAR(keep_msg);\n\tneed_fileinfo = FALSE;\n    }\n\n#ifdef FEAT_EVAL\n    if (need_clr_eos)\n    {\n\t// Halfway an \":echo\" command and getting an (error) message: clear\n\t// any text from the command.\n\tneed_clr_eos = FALSE;\n\tmsg_clr_eos();\n    }\n#endif\n\n    if (!msg_scroll && full_screen)\t// overwrite last message\n    {\n\tmsg_row = cmdline_row;\n\tmsg_col =\n#ifdef FEAT_RIGHTLEFT\n\t    cmdmsg_rl ? Columns - 1 :\n#endif\n\t    0;\n    }\n    else if (msg_didout)\t\t    // start message on next line\n    {\n\tmsg_putchar('\\n');\n\tdid_return = TRUE;\n\tif (exmode_active != EXMODE_NORMAL)\n\t    cmdline_row = msg_row;\n    }\n    if (!msg_didany || lines_left < 0)\n\tmsg_starthere();\n    if (msg_silent == 0)\n    {\n\tmsg_didout = FALSE;\t\t    // no output on current line yet\n\tcursor_off();\n    }\n\n    // when redirecting, may need to start a new line.\n    if (!did_return)\n\tredir_write((char_u *)\"\\n\", -1);\n}\n\n/*\n * Note that the current msg position is where messages start.\n */\n    void\nmsg_starthere(void)\n{\n    lines_left = cmdline_row;\n    msg_didany = FALSE;\n}\n\n    void\nmsg_putchar(int c)\n{\n    msg_putchar_attr(c, 0);\n}\n\n    void\nmsg_putchar_attr(int c, int attr)\n{\n    char_u\tbuf[MB_MAXBYTES + 1];\n\n    if (IS_SPECIAL(c))\n    {\n\tbuf[0] = K_SPECIAL;\n\tbuf[1] = K_SECOND(c);\n\tbuf[2] = K_THIRD(c);\n\tbuf[3] = NUL;\n    }\n    else\n\tbuf[(*mb_char2bytes)(c, buf)] = NUL;\n    msg_puts_attr((char *)buf, attr);\n}\n\n    void\nmsg_outnum(long n)\n{\n    char\tbuf[20];\n\n    sprintf(buf, \"%ld\", n);\n    msg_puts(buf);\n}\n\n    void\nmsg_home_replace(char_u *fname)\n{\n    msg_home_replace_attr(fname, 0);\n}\n\n#if defined(FEAT_FIND_ID) || defined(PROTO)\n    void\nmsg_home_replace_hl(char_u *fname)\n{\n    msg_home_replace_attr(fname, HL_ATTR(HLF_D));\n}\n#endif\n\n    static void\nmsg_home_replace_attr(char_u *fname, int attr)\n{\n    char_u\t*name;\n\n    name = home_replace_save(NULL, fname);\n    if (name != NULL)\n\tmsg_outtrans_attr(name, attr);\n    vim_free(name);\n}\n\n/*\n * Output 'len' characters in 'str' (including NULs) with translation\n * if 'len' is -1, output up to a NUL character.\n * Use attributes 'attr'.\n * Return the number of characters it takes on the screen.\n */\n    int\nmsg_outtrans(char_u *str)\n{\n    return msg_outtrans_attr(str, 0);\n}\n\n    int\nmsg_outtrans_attr(char_u *str, int attr)\n{\n    return msg_outtrans_len_attr(str, (int)STRLEN(str), attr);\n}\n\n    int\nmsg_outtrans_len(char_u *str, int len)\n{\n    return msg_outtrans_len_attr(str, len, 0);\n}\n\n/*\n * Output one character at \"p\".  Return pointer to the next character.\n * Handles multi-byte characters.\n */\n    char_u *\nmsg_outtrans_one(char_u *p, int attr)\n{\n    int\t\tl;\n\n    if (has_mbyte && (l = (*mb_ptr2len)(p)) > 1)\n    {\n\tmsg_outtrans_len_attr(p, l, attr);\n\treturn p + l;\n    }\n    msg_puts_attr((char *)transchar_byte(*p), attr);\n    return p + 1;\n}\n\n    int\nmsg_outtrans_len_attr(char_u *msgstr, int len, int attr)\n{\n    int\t\tretval = 0;\n    char_u\t*str = msgstr;\n    char_u\t*plain_start = msgstr;\n    char_u\t*s;\n    int\t\tmb_l;\n    int\t\tc;\n    int\t\tsave_got_int = got_int;\n\n    // Only quit when got_int was set in here.\n    got_int = FALSE;\n\n    // if MSG_HIST flag set, add message to history\n    if (attr & MSG_HIST)\n    {\n\tadd_msg_hist(str, len, attr);\n\tattr &= ~MSG_HIST;\n    }\n\n    // If the string starts with a composing character first draw a space on\n    // which the composing char can be drawn.\n    if (enc_utf8 && utf_iscomposing(utf_ptr2char(msgstr)))\n\tmsg_puts_attr(\" \", attr);\n\n    /*\n     * Go over the string.  Special characters are translated and printed.\n     * Normal characters are printed several at a time.\n     */\n    while (--len >= 0 && !got_int)\n    {\n\tif (enc_utf8)\n\t    // Don't include composing chars after the end.\n\t    mb_l = utfc_ptr2len_len(str, len + 1);\n\telse if (has_mbyte)\n\t    mb_l = (*mb_ptr2len)(str);\n\telse\n\t    mb_l = 1;\n\tif (has_mbyte && mb_l > 1)\n\t{\n\t    c = (*mb_ptr2char)(str);\n\t    if (vim_isprintc(c))\n\t\t// printable multi-byte char: count the cells.\n\t\tretval += (*mb_ptr2cells)(str);\n\t    else\n\t    {\n\t\t// unprintable multi-byte char: print the printable chars so\n\t\t// far and the translation of the unprintable char.\n\t\tif (str > plain_start)\n\t\t    msg_puts_attr_len((char *)plain_start,\n\t\t\t\t\t       (int)(str - plain_start), attr);\n\t\tplain_start = str + mb_l;\n\t\tmsg_puts_attr((char *)transchar(c),\n\t\t\t\t\t    attr == 0 ? HL_ATTR(HLF_8) : attr);\n\t\tretval += char2cells(c);\n\t    }\n\t    len -= mb_l - 1;\n\t    str += mb_l;\n\t}\n\telse\n\t{\n\t    s = transchar_byte(*str);\n\t    if (s[1] != NUL)\n\t    {\n\t\t// unprintable char: print the printable chars so far and the\n\t\t// translation of the unprintable char.\n\t\tif (str > plain_start)\n\t\t    msg_puts_attr_len((char *)plain_start,\n\t\t\t\t\t       (int)(str - plain_start), attr);\n\t\tplain_start = str + 1;\n\t\tmsg_puts_attr((char *)s, attr == 0 ? HL_ATTR(HLF_8) : attr);\n\t\tretval += (int)STRLEN(s);\n\t    }\n\t    else\n\t\t++retval;\n\t    ++str;\n\t}\n    }\n\n    if (str > plain_start && !got_int)\n\t// print the printable chars at the end\n\tmsg_puts_attr_len((char *)plain_start, (int)(str - plain_start), attr);\n\n    got_int |= save_got_int;\n\n    return retval;\n}\n\n#if defined(FEAT_QUICKFIX) || defined(PROTO)\n    void\nmsg_make(char_u *arg)\n{\n    int\t    i;\n    static char_u *str = (char_u *)\"eeffoc\", *rs = (char_u *)\"Plon#dqg#vxjduB\";\n\n    arg = skipwhite(arg);\n    for (i = 5; *arg && i >= 0; --i)\n\tif (*arg++ != str[i])\n\t    break;\n    if (i < 0)\n    {\n\tmsg_putchar('\\n');\n\tfor (i = 0; rs[i]; ++i)\n\t    msg_putchar(rs[i] - 3);\n    }\n}\n#endif\n\n/*\n * Output the string 'str' up to a NUL character.\n * Return the number of characters it takes on the screen.\n *\n * If K_SPECIAL is encountered, then it is taken in conjunction with the\n * following character and shown as <F1>, <S-Up> etc.  Any other character\n * which is not printable shown in <> form.\n * If 'from' is TRUE (lhs of a mapping), a space is shown as <Space>.\n * If a character is displayed in one of these special ways, is also\n * highlighted (its highlight name is '8' in the p_hl variable).\n * Otherwise characters are not highlighted.\n * This function is used to show mappings, where we want to see how to type\n * the character/string -- webb\n */\n    int\nmsg_outtrans_special(\n    char_u\t*strstart,\n    int\t\tfrom,\t// TRUE for lhs of a mapping\n    int\t\tmaxlen) // screen columns, 0 for unlimited\n{\n    char_u\t*str = strstart;\n    int\t\tretval = 0;\n    char\t*text;\n    int\t\tattr;\n    int\t\tlen;\n\n    attr = HL_ATTR(HLF_8);\n    while (*str != NUL)\n    {\n\t// Leading and trailing spaces need to be displayed in <> form.\n\tif ((str == strstart || str[1] == NUL) && *str == ' ')\n\t{\n\t    text = \"<Space>\";\n\t    ++str;\n\t}\n\telse\n\t    text = (char *)str2special(&str, from);\n\tif (text[0] != NUL && text[1] == NUL)\n\t    // single-byte character or illegal byte\n\t    text = (char *)transchar_byte((char_u)text[0]);\n\tlen = vim_strsize((char_u *)text);\n\tif (maxlen > 0 && retval + len >= maxlen)\n\t    break;\n\t// Highlight special keys\n\tmsg_puts_attr(text, len > 1\n\t\t&& (*mb_ptr2len)((char_u *)text) <= 1 ? attr : 0);\n\tretval += len;\n    }\n    return retval;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return the lhs or rhs of a mapping, with the key codes turned into printable\n * strings, in an allocated string.\n */\n    char_u *\nstr2special_save(\n    char_u  *str,\n    int\t    is_lhs)  // TRUE for lhs, FALSE for rhs\n{\n    garray_T\tga;\n    char_u\t*p = str;\n\n    ga_init2(&ga, 1, 40);\n    while (*p != NUL)\n\tga_concat(&ga, str2special(&p, is_lhs));\n    ga_append(&ga, NUL);\n    return (char_u *)ga.ga_data;\n}\n#endif\n\n/*\n * Return the printable string for the key codes at \"*sp\".\n * On illegal byte return a string with only that byte.\n * Used for translating the lhs or rhs of a mapping to printable chars.\n * Advances \"sp\" to the next code.\n */\n    char_u *\nstr2special(\n    char_u\t**sp,\n    int\t\tfrom)\t// TRUE for lhs of mapping\n{\n    int\t\t\tc;\n    static char_u\tbuf[7];\n    char_u\t\t*str = *sp;\n    int\t\t\tmodifiers = 0;\n    int\t\t\tspecial = FALSE;\n\n    if (has_mbyte)\n    {\n\tchar_u\t*p;\n\n\t// Try to un-escape a multi-byte character.  Return the un-escaped\n\t// string if it is a multi-byte character.\n\tp = mb_unescape(sp);\n\tif (p != NULL)\n\t    return p;\n    }\n\n    c = *str;\n    if (c == K_SPECIAL && str[1] != NUL && str[2] != NUL)\n    {\n\tif (str[1] == KS_MODIFIER)\n\t{\n\t    modifiers = str[2];\n\t    str += 3;\n\t    c = *str;\n\t}\n\tif (c == K_SPECIAL && str[1] != NUL && str[2] != NUL)\n\t{\n\t    c = TO_SPECIAL(str[1], str[2]);\n\t    str += 2;\n\t}\n\tif (IS_SPECIAL(c) || modifiers)\t// special key\n\t    special = TRUE;\n    }\n\n    if (has_mbyte && !IS_SPECIAL(c) && MB_BYTE2LEN(c) > 1)\n    {\n\tchar_u\t*p;\n\n\t*sp = str;\n\t// Try to un-escape a multi-byte character after modifiers.\n\tp = mb_unescape(sp);\n\tif (p != NULL)\n\t    // Since 'special' is TRUE the multi-byte character 'c' will be\n\t    // processed by get_special_key_name()\n\t    c = (*mb_ptr2char)(p);\n\telse\n\t    // illegal byte\n\t    *sp = str + 1;\n    }\n    else\n\t// single-byte character, NUL or illegal byte\n\t*sp = str + (*str == NUL ? 0 : 1);\n\n    // Make special keys and C0 control characters in <> form, also <M-Space>.\n    // Use <Space> only for lhs of a mapping.\n    if (special || c < ' ' || (from && c == ' '))\n\treturn get_special_key_name(c, modifiers);\n    buf[0] = c;\n    buf[1] = NUL;\n    return buf;\n}\n\n/*\n * Translate a key sequence into special key names.\n */\n    void\nstr2specialbuf(char_u *sp, char_u *buf, int len)\n{\n    char_u\t*s;\n\n    *buf = NUL;\n    while (*sp)\n    {\n\ts = str2special(&sp, FALSE);\n\tif ((int)(STRLEN(s) + STRLEN(buf)) < len)\n\t    STRCAT(buf, s);\n    }\n}\n\n/*\n * print line for :print or :list command\n */\n    void\nmsg_prt_line(char_u *s, int list)\n{\n    int\t\tc;\n    int\t\tcol = 0;\n    int\t\tn_extra = 0;\n    int\t\tc_extra = 0;\n    int\t\tc_final = 0;\n    char_u\t*p_extra = NULL;\t    // init to make SASC shut up\n    int\t\tn;\n    int\t\tattr = 0;\n    char_u\t*trail = NULL;\n    char_u\t*lead = NULL;\n    int\t\tin_multispace = FALSE;\n    int\t\tmultispace_pos = 0;\n    int\t\tl;\n    char_u\tbuf[MB_MAXBYTES + 1];\n\n    if (curwin->w_p_list)\n\tlist = TRUE;\n\n    if (list)\n    {\n\t// find start of trailing whitespace\n\tif (curwin->w_lcs_chars.trail)\n\t{\n\t    trail = s + STRLEN(s);\n\t    while (trail > s && VIM_ISWHITE(trail[-1]))\n\t\t--trail;\n\t}\n\t// find end of leading whitespace\n\tif (curwin->w_lcs_chars.lead || curwin->w_lcs_chars.leadmultispace != NULL)\n\t{\n\t    lead = s;\n\t    while (VIM_ISWHITE(lead[0]))\n\t\tlead++;\n\t    // in a line full of spaces all of them are treated as trailing\n\t    if (*lead == NUL)\n\t\tlead = NULL;\n\t}\n    }\n\n    // output a space for an empty line, otherwise the line will be\n    // overwritten\n    if (*s == NUL && !(list && curwin->w_lcs_chars.eol != NUL))\n\tmsg_putchar(' ');\n\n    while (!got_int)\n    {\n\tif (n_extra > 0)\n\t{\n\t    --n_extra;\n\t    if (n_extra == 0 && c_final)\n\t\tc = c_final;\n\t    else if (c_extra)\n\t\tc = c_extra;\n\t    else\n\t\tc = *p_extra++;\n\t}\n\telse if (has_mbyte && (l = (*mb_ptr2len)(s)) > 1)\n\t{\n\t    col += (*mb_ptr2cells)(s);\n\t    if (l >= MB_MAXBYTES)\n\t    {\n\t\tSTRCPY(buf, \"?\");\n\t    }\n\t    else if (curwin->w_lcs_chars.nbsp != NUL && list\n\t\t    && (mb_ptr2char(s) == 160\n\t\t\t|| mb_ptr2char(s) == 0x202f))\n\t    {\n\t\tint len = mb_char2bytes(curwin->w_lcs_chars.nbsp, buf);\n\n\t\tbuf[len] = NUL;\n\t    }\n\t    else\n\t    {\n\t\tmch_memmove(buf, s, (size_t)l);\n\t\tbuf[l] = NUL;\n\t    }\n\t    msg_puts((char *)buf);\n\t    s += l;\n\t    continue;\n\t}\n\telse\n\t{\n\t    attr = 0;\n\t    c = *s++;\n\t    in_multispace = c == ' '\n\t\t&& ((col > 0 && s[-2] == ' ') || *s == ' ');\n\t    if (!in_multispace)\n\t\tmultispace_pos = 0;\n\t    if (c == TAB && (!list || curwin->w_lcs_chars.tab1))\n\t    {\n\t\t// tab amount depends on current column\n#ifdef FEAT_VARTABS\n\t\tn_extra = tabstop_padding(col, curbuf->b_p_ts,\n\t\t\t\t\t\t    curbuf->b_p_vts_array) - 1;\n#else\n\t\tn_extra = curbuf->b_p_ts - col % curbuf->b_p_ts - 1;\n#endif\n\t\tif (!list)\n\t\t{\n\t\t    c = ' ';\n\t\t    c_extra = ' ';\n\t\t    c_final = NUL;\n\t\t}\n\t\telse\n\t\t{\n\t\t    c = (n_extra == 0 && curwin->w_lcs_chars.tab3)\n\t\t\t\t\t\t? curwin->w_lcs_chars.tab3\n\t\t\t\t\t\t: curwin->w_lcs_chars.tab1;\n\t\t    c_extra = curwin->w_lcs_chars.tab2;\n\t\t    c_final = curwin->w_lcs_chars.tab3;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t    }\n\t    else if (c == 160 && list && curwin->w_lcs_chars.nbsp != NUL)\n\t    {\n\t\tc = curwin->w_lcs_chars.nbsp;\n\t\tattr = HL_ATTR(HLF_8);\n\t    }\n\t    else if (c == NUL && list && curwin->w_lcs_chars.eol != NUL)\n\t    {\n\t\tp_extra = (char_u *)\"\";\n\t\tc_extra = NUL;\n\t\tc_final = NUL;\n\t\tn_extra = 1;\n\t\tc = curwin->w_lcs_chars.eol;\n\t\tattr = HL_ATTR(HLF_AT);\n\t\t--s;\n\t    }\n\t    else if (c != NUL && (n = byte2cells(c)) > 1)\n\t    {\n\t\tn_extra = n - 1;\n\t\tp_extra = transchar_byte(c);\n\t\tc_extra = NUL;\n\t\tc_final = NUL;\n\t\tc = *p_extra++;\n\t\t// Use special coloring to be able to distinguish <hex> from\n\t\t// the same in plain text.\n\t\tattr = HL_ATTR(HLF_8);\n\t    }\n\t    else if (c == ' ')\n\t    {\n\t\tif (list && lead != NULL && s <= lead && in_multispace\n\t\t\t&& curwin->w_lcs_chars.leadmultispace != NULL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.leadmultispace[multispace_pos++];\n\t\t    if (curwin->w_lcs_chars.leadmultispace[multispace_pos]\n\t\t\t\t\t\t\t\t\t== NUL)\n\t\t\tmultispace_pos = 0;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (lead != NULL && s <= lead\n\t\t\t\t\t    && curwin->w_lcs_chars.lead != NUL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.lead;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (trail != NULL && s > trail)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.trail;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (list && in_multispace\n\t\t\t&& curwin->w_lcs_chars.multispace != NULL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.multispace[multispace_pos++];\n\t\t    if (curwin->w_lcs_chars.multispace[multispace_pos] == NUL)\n\t\t\tmultispace_pos = 0;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t\telse if (list && curwin->w_lcs_chars.space != NUL)\n\t\t{\n\t\t    c = curwin->w_lcs_chars.space;\n\t\t    attr = HL_ATTR(HLF_8);\n\t\t}\n\t    }\n\t}\n\n\tif (c == NUL)\n\t    break;\n\n\tmsg_putchar_attr(c, attr);\n\tcol++;\n    }\n    msg_clr_eos();\n}\n\n/*\n * Use screen_puts() to output one multi-byte character.\n * Return the pointer \"s\" advanced to the next character.\n */\n    static char_u *\nscreen_puts_mbyte(char_u *s, int l, int attr)\n{\n    int\t\tcw;\n\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    cw = (*mb_ptr2cells)(s);\n    if (cw > 1 && (\n#ifdef FEAT_RIGHTLEFT\n\t\tcmdmsg_rl ? msg_col <= 1 :\n#endif\n\t\tmsg_col == Columns - 1))\n    {\n\t// Doesn't fit, print a highlighted '>' to fill it up.\n\tmsg_screen_putchar('>', HL_ATTR(HLF_AT));\n\treturn s;\n    }\n\n    screen_puts_len(s, l, msg_row, msg_col, attr);\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n    {\n\tmsg_col -= cw;\n\tif (msg_col == 0)\n\t{\n\t    msg_col = Columns;\n\t    ++msg_row;\n\t}\n    }\n    else\n#endif\n    {\n\tmsg_col += cw;\n\tif (msg_col >= Columns)\n\t{\n\t    msg_col = 0;\n\t    ++msg_row;\n\t}\n    }\n    return s + l;\n}\n\n/*\n * Output a string to the screen at position msg_row, msg_col.\n * Update msg_row and msg_col for the next message.\n */\n    void\nmsg_puts(char *s)\n{\n    msg_puts_attr(s, 0);\n}\n\n    void\nmsg_puts_title(char *s)\n{\n    msg_puts_attr(s, HL_ATTR(HLF_T));\n}\n\n/*\n * Show a message in such a way that it always fits in the line.  Cut out a\n * part in the middle and replace it with \"...\" when necessary.\n * Does not handle multi-byte characters!\n */\n    static void\nmsg_outtrans_long_len_attr(char_u *longstr, int len, int attr)\n{\n    int\t\tslen = len;\n    int\t\troom;\n\n    room = Columns - msg_col;\n    if (len > room && room >= 20)\n    {\n\tslen = (room - 3) / 2;\n\tmsg_outtrans_len_attr(longstr, slen, attr);\n\tmsg_puts_attr(\"...\", HL_ATTR(HLF_8));\n    }\n    msg_outtrans_len_attr(longstr + len - slen, slen, attr);\n}\n\n    void\nmsg_outtrans_long_attr(char_u *longstr, int attr)\n{\n    msg_outtrans_long_len_attr(longstr, (int)STRLEN(longstr), attr);\n}\n\n/*\n * Basic function for writing a message with highlight attributes.\n */\n    void\nmsg_puts_attr(char *s, int attr)\n{\n    msg_puts_attr_len(s, -1, attr);\n}\n\n/*\n * Like msg_puts_attr(), but with a maximum length \"maxlen\" (in bytes).\n * When \"maxlen\" is -1 there is no maximum length.\n * When \"maxlen\" is >= 0 the message is not put in the history.\n */\n    static void\nmsg_puts_attr_len(char *str, int maxlen, int attr)\n{\n    /*\n     * If redirection is on, also write to the redirection file.\n     */\n    redir_write((char_u *)str, maxlen);\n\n    /*\n     * Don't print anything when using \":silent cmd\".\n     */\n    if (msg_silent != 0)\n\treturn;\n\n    // if MSG_HIST flag set, add message to history\n    if ((attr & MSG_HIST) && maxlen < 0)\n    {\n\tadd_msg_hist((char_u *)str, -1, attr);\n\tattr &= ~MSG_HIST;\n    }\n\n    // When writing something to the screen after it has scrolled, requires a\n    // wait-return prompt later.  Needed when scrolling, resetting\n    // need_wait_return after some prompt, and then outputting something\n    // without scrolling\n    // Not needed when only using CR to move the cursor.\n    if (msg_scrolled != 0 && !msg_scrolled_ign && STRCMP(str, \"\\r\") != 0)\n\tneed_wait_return = TRUE;\n    msg_didany = TRUE;\t\t// remember that something was outputted\n\n    /*\n     * If there is no valid screen, use fprintf so we can see error messages.\n     * If termcap is not active, we may be writing in an alternate console\n     * window, cursor positioning may not work correctly (window size may be\n     * different, e.g. for Win32 console) or we just don't know where the\n     * cursor is.\n     */\n    if (msg_use_printf())\n\tmsg_puts_printf((char_u *)str, maxlen);\n    else\n\tmsg_puts_display((char_u *)str, maxlen, attr, FALSE);\n\n    need_fileinfo = FALSE;\n}\n\n/*\n * The display part of msg_puts_attr_len().\n * May be called recursively to display scroll-back text.\n */\n    static void\nmsg_puts_display(\n    char_u\t*str,\n    int\t\tmaxlen,\n    int\t\tattr,\n    int\t\trecurse)\n{\n    char_u\t*s = str;\n    char_u\t*t_s = str;\t// string from \"t_s\" to \"s\" is still todo\n    int\t\tt_col = 0;\t// screen cells todo, 0 when \"t_s\" not used\n    int\t\tl;\n    int\t\tcw;\n    char_u\t*sb_str = str;\n    int\t\tsb_col = msg_col;\n    int\t\twrap;\n    int\t\tdid_last_char;\n\n    did_wait_return = FALSE;\n    while ((maxlen < 0 || (int)(s - str) < maxlen) && *s != NUL)\n    {\n\t/*\n\t * We are at the end of the screen line when:\n\t * - When outputting a newline.\n\t * - When outputting a character in the last column.\n\t */\n\tif (!recurse && msg_row >= Rows - 1 && (*s == '\\n' || (\n#ifdef FEAT_RIGHTLEFT\n\t\t    cmdmsg_rl\n\t\t    ? (\n\t\t\tmsg_col <= 1\n\t\t      || (*s == TAB && msg_col <= 7)\n\t\t      || (has_mbyte && (*mb_ptr2cells)(s) > 1 && msg_col <= 2))\n\t\t    :\n#endif\n\t\t      ((*s != '\\r' && msg_col + t_col >= Columns - 1)\n\t\t       || (*s == TAB && msg_col + t_col >= ((Columns - 1) & ~7))\n\t\t       || (has_mbyte && (*mb_ptr2cells)(s) > 1\n\t\t\t\t\t && msg_col + t_col >= Columns - 2)))))\n\t{\n\t    /*\n\t     * The screen is scrolled up when at the last row (some terminals\n\t     * scroll automatically, some don't.  To avoid problems we scroll\n\t     * ourselves).\n\t     */\n\t    if (t_col > 0)\n\t\t// output postponed text\n\t\tt_puts(&t_col, t_s, s, attr);\n\n\t    // When no more prompt and no more room, truncate here\n\t    if (msg_no_more && lines_left == 0)\n\t\tbreak;\n\n\t    // Scroll the screen up one line.\n\t    msg_scroll_up();\n\n\t    msg_row = Rows - 2;\n\t    if (msg_col >= Columns)\t// can happen after screen resize\n\t\tmsg_col = Columns - 1;\n\n\t    // Display char in last column before showing more-prompt.\n\t    if (*s >= ' '\n#ifdef FEAT_RIGHTLEFT\n\t\t    && !cmdmsg_rl\n#endif\n\t       )\n\t    {\n\t\tif (has_mbyte)\n\t\t{\n\t\t    if (enc_utf8 && maxlen >= 0)\n\t\t\t// avoid including composing chars after the end\n\t\t\tl = utfc_ptr2len_len(s, (int)((str + maxlen) - s));\n\t\t    else\n\t\t\tl = (*mb_ptr2len)(s);\n\t\t    s = screen_puts_mbyte(s, l, attr);\n\t\t}\n\t\telse\n\t\t    msg_screen_putchar(*s++, attr);\n\t\tdid_last_char = TRUE;\n\t    }\n\t    else\n\t\tdid_last_char = FALSE;\n\n\t    if (p_more)\n\t\t// store text for scrolling back\n\t\tstore_sb_text(&sb_str, s, attr, &sb_col, TRUE);\n\n\t    inc_msg_scrolled();\n\t    need_wait_return = TRUE; // may need wait_return in main()\n\t    redraw_cmdline = TRUE;\n\t    if (cmdline_row > 0 && !exmode_active)\n\t\t--cmdline_row;\n\n\t    /*\n\t     * If screen is completely filled and 'more' is set then wait\n\t     * for a character.\n\t     */\n\t    if (lines_left > 0)\n\t\t--lines_left;\n\t    if (p_more && lines_left == 0 && State != MODE_HITRETURN\n\t\t\t\t\t    && !msg_no_more && !exmode_active)\n\t    {\n#ifdef FEAT_CON_DIALOG\n\t\tif (do_more_prompt(NUL))\n\t\t    s = confirm_msg_tail;\n#else\n\t\t(void)do_more_prompt(NUL);\n#endif\n\t\tif (quit_more)\n\t\t    return;\n\t    }\n\n\t    // When we displayed a char in last column need to check if there\n\t    // is still more.\n\t    if (did_last_char)\n\t\tcontinue;\n\t}\n\n\twrap = *s == '\\n'\n\t\t    || msg_col + t_col >= Columns\n\t\t    || (has_mbyte && (*mb_ptr2cells)(s) > 1\n\t\t\t\t\t    && msg_col + t_col >= Columns - 1);\n\tif (t_col > 0 && (wrap || *s == '\\r' || *s == '\\b'\n\t\t\t\t\t\t || *s == '\\t' || *s == BELL))\n\t    // output any postponed text\n\t    t_puts(&t_col, t_s, s, attr);\n\n\tif (wrap && p_more && !recurse)\n\t    // store text for scrolling back\n\t    store_sb_text(&sb_str, s, attr, &sb_col, TRUE);\n\n\tif (*s == '\\n')\t\t    // go to next line\n\t{\n\t    msg_didout = FALSE;\t    // remember that line is empty\n#ifdef FEAT_RIGHTLEFT\n\t    if (cmdmsg_rl)\n\t\tmsg_col = Columns - 1;\n\t    else\n#endif\n\t\tmsg_col = 0;\n\t    if (++msg_row >= Rows)  // safety check\n\t\tmsg_row = Rows - 1;\n\t}\n\telse if (*s == '\\r')\t    // go to column 0\n\t{\n\t    msg_col = 0;\n\t}\n\telse if (*s == '\\b')\t    // go to previous char\n\t{\n\t    if (msg_col)\n\t\t--msg_col;\n\t}\n\telse if (*s == TAB)\t    // translate Tab into spaces\n\t{\n\t    do\n\t\tmsg_screen_putchar(' ', attr);\n\t    while (msg_col & 7);\n\t}\n\telse if (*s == BELL)\t\t// beep (from \":sh\")\n\t    vim_beep(BO_SH);\n\telse\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tcw = (*mb_ptr2cells)(s);\n\t\tif (enc_utf8 && maxlen >= 0)\n\t\t    // avoid including composing chars after the end\n\t\t    l = utfc_ptr2len_len(s, (int)((str + maxlen) - s));\n\t\telse\n\t\t    l = (*mb_ptr2len)(s);\n\t    }\n\t    else\n\t    {\n\t\tcw = 1;\n\t\tl = 1;\n\t    }\n\n\t    // When drawing from right to left or when a double-wide character\n\t    // doesn't fit, draw a single character here.  Otherwise collect\n\t    // characters and draw them all at once later.\n\t    if (\n# ifdef FEAT_RIGHTLEFT\n\t\t    cmdmsg_rl ||\n# endif\n\t\t    (cw > 1 && msg_col + t_col >= Columns - 1))\n\t    {\n\t\tif (l > 1)\n\t\t    s = screen_puts_mbyte(s, l, attr) - 1;\n\t\telse\n\t\t    msg_screen_putchar(*s, attr);\n\t    }\n\t    else\n\t    {\n\t\t// postpone this character until later\n\t\tif (t_col == 0)\n\t\t    t_s = s;\n\t\tt_col += cw;\n\t\ts += l - 1;\n\t    }\n\t}\n\t++s;\n    }\n\n    // output any postponed text\n    if (t_col > 0)\n\tt_puts(&t_col, t_s, s, attr);\n    if (p_more && !recurse)\n\tstore_sb_text(&sb_str, s, attr, &sb_col, FALSE);\n\n    msg_check();\n}\n\n/*\n * Return TRUE when \":filter pattern\" was used and \"msg\" does not match\n * \"pattern\".\n */\n    int\nmessage_filtered(char_u *msg)\n{\n    int match;\n\n    if (cmdmod.cmod_filter_regmatch.regprog == NULL)\n\treturn FALSE;\n    match = vim_regexec(&cmdmod.cmod_filter_regmatch, msg, (colnr_T)0);\n    return cmdmod.cmod_filter_force ? match : !match;\n}\n\n/*\n * Scroll the screen up one line for displaying the next message line.\n */\n    static void\nmsg_scroll_up(void)\n{\n#ifdef FEAT_GUI\n    // Remove the cursor before scrolling, ScreenLines[] is going\n    // to become invalid.\n    if (gui.in_use)\n\tgui_undraw_cursor();\n#endif\n    // scrolling up always works\n    mch_disable_flush();\n    screen_del_lines(0, 0, 1, (int)Rows, TRUE, 0, NULL);\n    mch_enable_flush();\n\n    if (!can_clear((char_u *)\" \"))\n    {\n\t// Scrolling up doesn't result in the right background.  Set the\n\t// background here.  It's not efficient, but avoids that we have to do\n\t// it all over the code.\n\tscreen_fill((int)Rows - 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\n\t// Also clear the last char of the last but one line if it was not\n\t// cleared before to avoid a scroll-up.\n\tif (ScreenAttrs[LineOffset[Rows - 2] + Columns - 1] == (sattr_T)-1)\n\t    screen_fill((int)Rows - 2, (int)Rows - 1,\n\t\t\t\t (int)Columns - 1, (int)Columns, ' ', ' ', 0);\n    }\n}\n\n/*\n * Increment \"msg_scrolled\".\n */\n    static void\ninc_msg_scrolled(void)\n{\n#ifdef FEAT_EVAL\n    if (*get_vim_var_str(VV_SCROLLSTART) == NUL)\n    {\n\tchar_u\t    *p = SOURCING_NAME;\n\tchar_u\t    *tofree = NULL;\n\tint\t    len;\n\n\t// v:scrollstart is empty, set it to the script/function name and line\n\t// number\n\tif (p == NULL)\n\t    p = (char_u *)_(\"Unknown\");\n\telse\n\t{\n\t    len = (int)STRLEN(p) + 40;\n\t    tofree = alloc(len);\n\t    if (tofree != NULL)\n\t    {\n\t\tvim_snprintf((char *)tofree, len, _(\"%s line %ld\"),\n\t\t\t\t\t\t      p, (long)SOURCING_LNUM);\n\t\tp = tofree;\n\t    }\n\t}\n\tset_vim_var_string(VV_SCROLLSTART, p, -1);\n\tvim_free(tofree);\n    }\n#endif\n    ++msg_scrolled;\n    if (must_redraw < VALID)\n\tmust_redraw = VALID;\n}\n\n/*\n * To be able to scroll back at the \"more\" and \"hit-enter\" prompts we need to\n * store the displayed text and remember where screen lines start.\n */\ntypedef struct msgchunk_S msgchunk_T;\nstruct msgchunk_S\n{\n    msgchunk_T\t*sb_next;\n    msgchunk_T\t*sb_prev;\n    char\tsb_eol;\t\t// TRUE when line ends after this text\n    int\t\tsb_msg_col;\t// column in which text starts\n    int\t\tsb_attr;\t// text attributes\n    char_u\tsb_text[1];\t// text to be displayed, actually longer\n};\n\nstatic msgchunk_T *last_msgchunk = NULL; // last displayed text\n\nstatic msgchunk_T *msg_sb_start(msgchunk_T *mps);\n\ntypedef enum {\n    SB_CLEAR_NONE = 0,\n    SB_CLEAR_ALL,\n    SB_CLEAR_CMDLINE_BUSY,\n    SB_CLEAR_CMDLINE_DONE\n} sb_clear_T;\n\n// When to clear text on next msg.\nstatic sb_clear_T do_clear_sb_text = SB_CLEAR_NONE;\n\n/*\n * Store part of a printed message for displaying when scrolling back.\n */\n    static void\nstore_sb_text(\n    char_u\t**sb_str,\t// start of string\n    char_u\t*s,\t\t// just after string\n    int\t\tattr,\n    int\t\t*sb_col,\n    int\t\tfinish)\t\t// line ends\n{\n    msgchunk_T\t*mp;\n\n    if (do_clear_sb_text == SB_CLEAR_ALL\n\t    || do_clear_sb_text == SB_CLEAR_CMDLINE_DONE)\n    {\n\tclear_sb_text(do_clear_sb_text == SB_CLEAR_ALL);\n\tdo_clear_sb_text = SB_CLEAR_NONE;\n    }\n\n    if (s > *sb_str)\n    {\n\tmp = alloc(sizeof(msgchunk_T) + (s - *sb_str));\n\tif (mp != NULL)\n\t{\n\t    mp->sb_eol = finish;\n\t    mp->sb_msg_col = *sb_col;\n\t    mp->sb_attr = attr;\n\t    vim_strncpy(mp->sb_text, *sb_str, s - *sb_str);\n\n\t    if (last_msgchunk == NULL)\n\t    {\n\t\tlast_msgchunk = mp;\n\t\tmp->sb_prev = NULL;\n\t    }\n\t    else\n\t    {\n\t\tmp->sb_prev = last_msgchunk;\n\t\tlast_msgchunk->sb_next = mp;\n\t\tlast_msgchunk = mp;\n\t    }\n\t    mp->sb_next = NULL;\n\t}\n    }\n    else if (finish && last_msgchunk != NULL)\n\tlast_msgchunk->sb_eol = TRUE;\n\n    *sb_str = s;\n    *sb_col = 0;\n}\n\n/*\n * Finished showing messages, clear the scroll-back text on the next message.\n */\n    void\nmay_clear_sb_text(void)\n{\n    do_clear_sb_text = SB_CLEAR_ALL;\n}\n\n/*\n * Starting to edit the command line, do not clear messages now.\n */\n    void\nsb_text_start_cmdline(void)\n{\n    do_clear_sb_text = SB_CLEAR_CMDLINE_BUSY;\n    msg_sb_eol();\n}\n\n/*\n * Ending to edit the command line.  Clear old lines but the last one later.\n */\n    void\nsb_text_end_cmdline(void)\n{\n    do_clear_sb_text = SB_CLEAR_CMDLINE_DONE;\n}\n\n/*\n * Clear any text remembered for scrolling back.\n * When \"all\" is FALSE keep the last line.\n * Called when redrawing the screen.\n */\n    void\nclear_sb_text(int all)\n{\n    msgchunk_T\t*mp;\n    msgchunk_T\t**lastp;\n\n    if (all)\n\tlastp = &last_msgchunk;\n    else\n    {\n\tif (last_msgchunk == NULL)\n\t    return;\n\tlastp = &last_msgchunk->sb_prev;\n    }\n\n    while (*lastp != NULL)\n    {\n\tmp = (*lastp)->sb_prev;\n\tvim_free(*lastp);\n\t*lastp = mp;\n    }\n}\n\n/*\n * \"g<\" command.\n */\n    void\nshow_sb_text(void)\n{\n    msgchunk_T\t*mp;\n\n    // Only show something if there is more than one line, otherwise it looks\n    // weird, typing a command without output results in one line.\n    mp = msg_sb_start(last_msgchunk);\n    if (mp == NULL || mp->sb_prev == NULL)\n\tvim_beep(BO_MESS);\n    else\n    {\n\tdo_more_prompt('G');\n\twait_return(FALSE);\n    }\n}\n\n/*\n * Move to the start of screen line in already displayed text.\n */\n    static msgchunk_T *\nmsg_sb_start(msgchunk_T *mps)\n{\n    msgchunk_T *mp = mps;\n\n    while (mp != NULL && mp->sb_prev != NULL && !mp->sb_prev->sb_eol)\n\tmp = mp->sb_prev;\n    return mp;\n}\n\n/*\n * Mark the last message chunk as finishing the line.\n */\n    void\nmsg_sb_eol(void)\n{\n    if (last_msgchunk != NULL)\n\tlast_msgchunk->sb_eol = TRUE;\n}\n\n/*\n * Display a screen line from previously displayed text at row \"row\".\n * Returns a pointer to the text for the next line (can be NULL).\n */\n    static msgchunk_T *\ndisp_sb_line(int row, msgchunk_T *smp)\n{\n    msgchunk_T\t*mp = smp;\n    char_u\t*p;\n\n    for (;;)\n    {\n\tmsg_row = row;\n\tmsg_col = mp->sb_msg_col;\n\tp = mp->sb_text;\n\tif (*p == '\\n')\t    // don't display the line break\n\t    ++p;\n\tmsg_puts_display(p, -1, mp->sb_attr, TRUE);\n\tif (mp->sb_eol || mp->sb_next == NULL)\n\t    break;\n\tmp = mp->sb_next;\n    }\n    return mp->sb_next;\n}\n\n/*\n * Output any postponed text for msg_puts_attr_len().\n */\n    static void\nt_puts(\n    int\t\t*t_col,\n    char_u\t*t_s,\n    char_u\t*s,\n    int\t\tattr)\n{\n    // output postponed text\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    screen_puts_len(t_s, (int)(s - t_s), msg_row, msg_col, attr);\n    msg_col += *t_col;\n    *t_col = 0;\n    // If the string starts with a composing character don't increment the\n    // column position for it.\n    if (enc_utf8 && utf_iscomposing(utf_ptr2char(t_s)))\n\t--msg_col;\n    if (msg_col >= Columns)\n    {\n\tmsg_col = 0;\n\t++msg_row;\n    }\n}\n\n/*\n * Returns TRUE when messages should be printed with mch_errmsg().\n * This is used when there is no valid screen, so we can see error messages.\n * If termcap is not active, we may be writing in an alternate console\n * window, cursor positioning may not work correctly (window size may be\n * different, e.g. for Win32 console) or we just don't know where the\n * cursor is.\n */\n    int\nmsg_use_printf(void)\n{\n    return (!msg_check_screen()\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n\t    || (!gui.in_use && !termcap_active)\n# else\n\t    || !termcap_active\n# endif\n#endif\n\t    || (swapping_screen() && !termcap_active)\n\t       );\n}\n\n/*\n * Print a message when there is no valid screen.\n */\n    static void\nmsg_puts_printf(char_u *str, int maxlen)\n{\n    char_u\t*s = str;\n    char_u\t*buf = NULL;\n    char_u\t*p = s;\n\n#ifdef MSWIN\n    if (!(silent_mode && p_verbose == 0))\n\tmch_settmode(TMODE_COOK);\t// handle CR and NL correctly\n#endif\n    while ((maxlen < 0 || (int)(s - str) < maxlen) && *s != NUL)\n    {\n\tif (!(silent_mode && p_verbose == 0))\n\t{\n\t    // NL --> CR NL translation (for Unix, not for \"--version\")\n\t    if (*s == NL)\n\t    {\n\t\tint n = (int)(s - p);\n\n\t\tbuf = alloc(n + 3);\n\t\tif (buf != NULL)\n\t\t{\n\t\t    memcpy(buf, p, n);\n\t\t    if (!info_message)\n\t\t\tbuf[n++] = CAR;\n\t\t    buf[n++] = NL;\n\t\t    buf[n++] = NUL;\n\t\t    if (info_message)   // informative message, not an error\n\t\t\tmch_msg((char *)buf);\n\t\t    else\n\t\t\tmch_errmsg((char *)buf);\n\t\t    vim_free(buf);\n\t\t}\n\t\tp = s + 1;\n\t    }\n\t}\n\n\t// primitive way to compute the current column\n#ifdef FEAT_RIGHTLEFT\n\tif (cmdmsg_rl)\n\t{\n\t    if (*s == CAR || *s == NL)\n\t\tmsg_col = Columns - 1;\n\t    else\n\t\t--msg_col;\n\t}\n\telse\n#endif\n\t{\n\t    if (*s == CAR || *s == NL)\n\t\tmsg_col = 0;\n\t    else\n\t\t++msg_col;\n\t}\n\t++s;\n    }\n\n    if (*p != NUL && !(silent_mode && p_verbose == 0))\n    {\n\tchar_u *tofree = NULL;\n\n\tif (maxlen > 0 && STRLEN(p) > (size_t)maxlen)\n\t{\n\t    tofree = vim_strnsave(p, (size_t)maxlen);\n\t    p = tofree;\n\t}\n\tif (p != NULL)\n\t{\n\t    if (info_message)\n\t\tmch_msg((char *)p);\n\t    else\n\t\tmch_errmsg((char *)p);\n\t    vim_free(tofree);\n\t}\n    }\n\n    msg_didout = TRUE;\t    // assume that line is not empty\n\n#ifdef MSWIN\n    if (!(silent_mode && p_verbose == 0))\n\tmch_settmode(TMODE_RAW);\n#endif\n}\n\n/*\n * Show the more-prompt and handle the user response.\n * This takes care of scrolling back and displaying previously displayed text.\n * When at hit-enter prompt \"typed_char\" is the already typed character,\n * otherwise it's NUL.\n * Returns TRUE when jumping ahead to \"confirm_msg_tail\".\n */\n    static int\ndo_more_prompt(int typed_char)\n{\n    static int\tentered = FALSE;\n    int\t\tused_typed_char = typed_char;\n    int\t\toldState = State;\n    int\t\tc;\n#ifdef FEAT_CON_DIALOG\n    int\t\tretval = FALSE;\n#endif\n    int\t\ttoscroll;\n    msgchunk_T\t*mp_last = NULL;\n    msgchunk_T\t*mp;\n    int\t\ti;\n\n    // We get called recursively when a timer callback outputs a message. In\n    // that case don't show another prompt. Also when at the hit-Enter prompt\n    // and nothing was typed.\n    if (entered || (State == MODE_HITRETURN && typed_char == 0))\n\treturn FALSE;\n    entered = TRUE;\n\n    if (typed_char == 'G')\n    {\n\t// \"g<\": Find first line on the last page.\n\tmp_last = msg_sb_start(last_msgchunk);\n\tfor (i = 0; i < Rows - 2 && mp_last != NULL\n\t\t\t\t\t     && mp_last->sb_prev != NULL; ++i)\n\t    mp_last = msg_sb_start(mp_last->sb_prev);\n    }\n\n    State = MODE_ASKMORE;\n    setmouse();\n    if (typed_char == NUL)\n\tmsg_moremsg(FALSE);\n    for (;;)\n    {\n\t/*\n\t * Get a typed character directly from the user.\n\t */\n\tif (used_typed_char != NUL)\n\t{\n\t    c = used_typed_char;\t// was typed at hit-enter prompt\n\t    used_typed_char = NUL;\n\t}\n\telse\n\t    c = get_keystroke();\n\n#if defined(FEAT_MENU) && defined(FEAT_GUI)\n\tif (c == K_MENU)\n\t{\n\t    int idx = get_menu_index(current_menu, MODE_ASKMORE);\n\n\t    // Used a menu.  If it starts with CTRL-Y, it must\n\t    // be a \"Copy\" for the clipboard.  Otherwise\n\t    // assume that we end\n\t    if (idx == MENU_INDEX_INVALID)\n\t\tcontinue;\n\t    c = *current_menu->strings[idx];\n\t    if (c != NUL && current_menu->strings[idx][1] != NUL)\n\t\tins_typebuf(current_menu->strings[idx] + 1,\n\t\t\t\tcurrent_menu->noremap[idx], 0, TRUE,\n\t\t\t\t\t\t   current_menu->silent[idx]);\n\t}\n#endif\n\n\ttoscroll = 0;\n\tswitch (c)\n\t{\n\tcase BS:\t\t// scroll one line back\n\tcase K_BS:\n\tcase 'k':\n\tcase K_UP:\n\t    toscroll = -1;\n\t    break;\n\n\tcase CAR:\t\t// one extra line\n\tcase NL:\n\tcase 'j':\n\tcase K_DOWN:\n\t    toscroll = 1;\n\t    break;\n\n\tcase 'u':\t\t// Up half a page\n\t    toscroll = -(Rows / 2);\n\t    break;\n\n\tcase 'd':\t\t// Down half a page\n\t    toscroll = Rows / 2;\n\t    break;\n\n\tcase 'b':\t\t// one page back\n\tcase K_PAGEUP:\n\t    toscroll = -(Rows - 1);\n\t    break;\n\n\tcase ' ':\t\t// one extra page\n\tcase 'f':\n\tcase K_PAGEDOWN:\n\tcase K_LEFTMOUSE:\n\t    toscroll = Rows - 1;\n\t    break;\n\n\tcase 'g':\t\t// all the way back to the start\n\t    toscroll = -999999;\n\t    break;\n\n\tcase 'G':\t\t// all the way to the end\n\t    toscroll = 999999;\n\t    lines_left = 999999;\n\t    break;\n\n\tcase ':':\t\t// start new command line\n#ifdef FEAT_CON_DIALOG\n\t    if (!confirm_msg_used)\n#endif\n\t    {\n\t\t// Since got_int is set all typeahead will be flushed, but we\n\t\t// want to keep this ':', remember that in a special way.\n\t\ttypeahead_noflush(':');\n#ifdef FEAT_TERMINAL\n\t\tskip_term_loop = TRUE;\n#endif\n\t\tcmdline_row = Rows - 1;\t\t// put ':' on this line\n\t\tskip_redraw = TRUE;\t\t// skip redraw once\n\t\tneed_wait_return = FALSE;\t// don't wait in main()\n\t    }\n\t    // FALLTHROUGH\n\tcase 'q':\t\t// quit\n\tcase Ctrl_C:\n\tcase ESC:\n#ifdef FEAT_CON_DIALOG\n\t    if (confirm_msg_used)\n\t    {\n\t\t// Jump to the choices of the dialog.\n\t\tretval = TRUE;\n\t    }\n\t    else\n#endif\n\t    {\n\t\tgot_int = TRUE;\n\t\tquit_more = TRUE;\n\t    }\n\t    // When there is some more output (wrapping line) display that\n\t    // without another prompt.\n\t    lines_left = Rows - 1;\n\t    break;\n\n#ifdef FEAT_CLIPBOARD\n\tcase Ctrl_Y:\n\t    // Strange way to allow copying (yanking) a modeless\n\t    // selection at the more prompt.  Use CTRL-Y,\n\t    // because the same is used in Cmdline-mode and at the\n\t    // hit-enter prompt.  However, scrolling one line up\n\t    // might be expected...\n\t    if (clip_star.state == SELECT_DONE)\n\t\tclip_copy_modeless_selection(TRUE);\n\t    continue;\n#endif\n\tdefault:\t\t// no valid response\n\t    msg_moremsg(TRUE);\n\t    continue;\n\t}\n\n\tif (toscroll != 0)\n\t{\n\t    if (toscroll < 0)\n\t    {\n\t\t// go to start of last line\n\t\tif (mp_last == NULL)\n\t\t    mp = msg_sb_start(last_msgchunk);\n\t\telse if (mp_last->sb_prev != NULL)\n\t\t    mp = msg_sb_start(mp_last->sb_prev);\n\t\telse\n\t\t    mp = NULL;\n\n\t\t// go to start of line at top of the screen\n\t\tfor (i = 0; i < Rows - 2 && mp != NULL && mp->sb_prev != NULL;\n\t\t\t\t\t\t\t\t\t  ++i)\n\t\t    mp = msg_sb_start(mp->sb_prev);\n\n\t\tif (mp != NULL && mp->sb_prev != NULL)\n\t\t{\n\t\t    // Find line to be displayed at top.\n\t\t    for (i = 0; i > toscroll; --i)\n\t\t    {\n\t\t\tif (mp == NULL || mp->sb_prev == NULL)\n\t\t\t    break;\n\t\t\tmp = msg_sb_start(mp->sb_prev);\n\t\t\tif (mp_last == NULL)\n\t\t\t    mp_last = msg_sb_start(last_msgchunk);\n\t\t\telse\n\t\t\t    mp_last = msg_sb_start(mp_last->sb_prev);\n\t\t    }\n\n\t\t    if (toscroll == -1 && screen_ins_lines(0, 0, 1,\n\t\t\t\t\t\t     (int)Rows, 0, NULL) == OK)\n\t\t    {\n\t\t\t// display line at top\n\t\t\t(void)disp_sb_line(0, mp);\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t// redisplay all lines\n\t\t\tscreenclear();\n\t\t\tfor (i = 0; mp != NULL && i < Rows - 1; ++i)\n\t\t\t{\n\t\t\t    mp = disp_sb_line(i, mp);\n\t\t\t    ++msg_scrolled;\n\t\t\t}\n\t\t    }\n\t\t    toscroll = 0;\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// First display any text that we scrolled back.\n\t\twhile (toscroll > 0 && mp_last != NULL)\n\t\t{\n\t\t    // scroll up, display line at bottom\n\t\t    msg_scroll_up();\n\t\t    inc_msg_scrolled();\n\t\t    screen_fill((int)Rows - 2, (int)Rows - 1, 0,\n\t\t\t\t\t\t   (int)Columns, ' ', ' ', 0);\n\t\t    mp_last = disp_sb_line((int)Rows - 2, mp_last);\n\t\t    --toscroll;\n\t\t}\n\t    }\n\n\t    if (toscroll <= 0)\n\t    {\n\t\t// displayed the requested text, more prompt again\n\t\tscreen_fill((int)Rows - 1, (int)Rows, 0,\n\t\t\t\t\t\t   (int)Columns, ' ', ' ', 0);\n\t\tmsg_moremsg(FALSE);\n\t\tcontinue;\n\t    }\n\n\t    // display more text, return to caller\n\t    lines_left = toscroll;\n\t}\n\n\tbreak;\n    }\n\n    // clear the --more-- message\n    screen_fill((int)Rows - 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n    State = oldState;\n    setmouse();\n    if (quit_more)\n    {\n\tmsg_row = Rows - 1;\n\tmsg_col = 0;\n    }\n#ifdef FEAT_RIGHTLEFT\n    else if (cmdmsg_rl)\n\tmsg_col = Columns - 1;\n#endif\n\n    entered = FALSE;\n#ifdef FEAT_CON_DIALOG\n    return retval;\n#else\n    return FALSE;\n#endif\n}\n\n#if defined(USE_MCH_ERRMSG) || defined(PROTO)\n\n#ifdef mch_errmsg\n# undef mch_errmsg\n#endif\n#ifdef mch_msg\n# undef mch_msg\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n    static void\nmch_errmsg_c(char *str)\n{\n    int\t    len = (int)STRLEN(str);\n    DWORD   nwrite = 0;\n    DWORD   mode = 0;\n    HANDLE  h = GetStdHandle(STD_ERROR_HANDLE);\n\n    if (GetConsoleMode(h, &mode) && enc_codepage >= 0\n\t    && (int)GetConsoleCP() != enc_codepage)\n    {\n\tWCHAR\t*w = enc_to_utf16((char_u *)str, &len);\n\n\tWriteConsoleW(h, w, len, &nwrite, NULL);\n\tvim_free(w);\n    }\n    else\n    {\n\tfprintf(stderr, \"%s\", str);\n    }\n}\n#endif\n\n/*\n * Give an error message.  To be used when the screen hasn't been initialized\n * yet.  When stderr can't be used, collect error messages until the GUI has\n * started and they can be displayed in a message box.\n */\n    void\nmch_errmsg(char *str)\n{\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    int\t\tlen;\n#endif\n\n#if (defined(UNIX) || defined(FEAT_GUI)) && !defined(ALWAYS_USE_GUI) && !defined(VIMDLL)\n    // On Unix use stderr if it's a tty.\n    // When not going to start the GUI also use stderr.\n    // On Mac, when started from Finder, stderr is the console.\n    if (\n# ifdef UNIX\n#  ifdef MACOS_X\n\t    (isatty(2) && strcmp(\"/dev/console\", ttyname(2)) != 0)\n#  else\n\t    isatty(2)\n#  endif\n#  ifdef FEAT_GUI\n\t    ||\n#  endif\n# endif\n# ifdef FEAT_GUI\n\t    !(gui.in_use || gui.starting)\n# endif\n\t    )\n    {\n\tfprintf(stderr, \"%s\", str);\n\treturn;\n    }\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n    if (!(gui.in_use || gui.starting))\n# endif\n    {\n\tmch_errmsg_c(str);\n\treturn;\n    }\n#endif\n\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    // avoid a delay for a message that isn't there\n    emsg_on_display = FALSE;\n\n    len = (int)STRLEN(str) + 1;\n    if (error_ga.ga_growsize == 0)\n    {\n\terror_ga.ga_growsize = 80;\n\terror_ga.ga_itemsize = 1;\n    }\n    if (ga_grow(&error_ga, len) == OK)\n    {\n\tmch_memmove((char_u *)error_ga.ga_data + error_ga.ga_len,\n\t\t\t\t\t\t\t  (char_u *)str, len);\n# ifdef UNIX\n\t// remove CR characters, they are displayed\n\t{\n\t    char_u\t*p;\n\n\t    p = (char_u *)error_ga.ga_data + error_ga.ga_len;\n\t    for (;;)\n\t    {\n\t\tp = vim_strchr(p, '\\r');\n\t\tif (p == NULL)\n\t\t    break;\n\t\t*p = ' ';\n\t    }\n\t}\n# endif\n\t--len;\t\t// don't count the NUL at the end\n\terror_ga.ga_len += len;\n    }\n#endif\n}\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n    static void\nmch_msg_c(char *str)\n{\n    int\t    len = (int)STRLEN(str);\n    DWORD   nwrite = 0;\n    DWORD   mode;\n    HANDLE  h = GetStdHandle(STD_OUTPUT_HANDLE);\n\n\n    if (GetConsoleMode(h, &mode) && enc_codepage >= 0\n\t    && (int)GetConsoleCP() != enc_codepage)\n    {\n\tWCHAR\t*w = enc_to_utf16((char_u *)str, &len);\n\n\tWriteConsoleW(h, w, len, &nwrite, NULL);\n\tvim_free(w);\n    }\n    else\n    {\n\tprintf(\"%s\", str);\n    }\n}\n#endif\n\n/*\n * Give a message.  To be used when the screen hasn't been initialized yet.\n * When there is no tty, collect messages until the GUI has started and they\n * can be displayed in a message box.\n */\n    void\nmch_msg(char *str)\n{\n#if (defined(UNIX) || defined(FEAT_GUI)) && !defined(ALWAYS_USE_GUI) && !defined(VIMDLL)\n    // On Unix use stdout if we have a tty.  This allows \"vim -h | more\" and\n    // uses mch_errmsg() when started from the desktop.\n    // When not going to start the GUI also use stdout.\n    // On Mac, when started from Finder, stderr is the console.\n    if (\n# ifdef UNIX\n#  ifdef MACOS_X\n\t    (isatty(2) && strcmp(\"/dev/console\", ttyname(2)) != 0)\n#  else\n\t    isatty(2)\n#  endif\n#  ifdef FEAT_GUI\n\t    ||\n#  endif\n# endif\n# ifdef FEAT_GUI\n\t    !(gui.in_use || gui.starting)\n# endif\n\t    )\n    {\n\tprintf(\"%s\", str);\n\treturn;\n    }\n#endif\n\n#if defined(MSWIN) && (!defined(FEAT_GUI_MSWIN) || defined(VIMDLL))\n# ifdef VIMDLL\n    if (!(gui.in_use || gui.starting))\n# endif\n    {\n\tmch_msg_c(str);\n\treturn;\n    }\n#endif\n#if !defined(MSWIN) || defined(FEAT_GUI_MSWIN)\n    mch_errmsg(str);\n#endif\n}\n#endif // USE_MCH_ERRMSG\n\n/*\n * Put a character on the screen at the current message position and advance\n * to the next position.  Only for printable ASCII!\n */\n    static void\nmsg_screen_putchar(int c, int attr)\n{\n    msg_didout = TRUE;\t\t// remember that line is not empty\n    screen_putchar(c, msg_row, msg_col, attr);\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n    {\n\tif (--msg_col == 0)\n\t{\n\t    msg_col = Columns;\n\t    ++msg_row;\n\t}\n    }\n    else\n#endif\n    {\n\tif (++msg_col >= Columns)\n\t{\n\t    msg_col = 0;\n\t    ++msg_row;\n\t}\n    }\n}\n\n    static void\nmsg_moremsg(int full)\n{\n    int\t\tattr;\n    char_u\t*s = (char_u *)_(\"-- More --\");\n\n    attr = HL_ATTR(HLF_M);\n    screen_puts(s, (int)Rows - 1, 0, attr);\n    if (full)\n\tscreen_puts((char_u *)\n\t\t_(\" SPACE/d/j: screen/page/line down, b/u/k: up, q: quit \"),\n\t\t(int)Rows - 1, vim_strsize(s), attr);\n}\n\n/*\n * Repeat the message for the current mode: MODE_ASKMORE, MODE_EXTERNCMD,\n * MODE_CONFIRM or exmode_active.\n */\n    void\nrepeat_message(void)\n{\n    if (State == MODE_ASKMORE)\n    {\n\tmsg_moremsg(TRUE);\t// display --more-- message again\n\tmsg_row = Rows - 1;\n    }\n#ifdef FEAT_CON_DIALOG\n    else if (State == MODE_CONFIRM)\n    {\n\tdisplay_confirm_msg();\t// display \":confirm\" message again\n\tmsg_row = Rows - 1;\n    }\n#endif\n    else if (State == MODE_EXTERNCMD)\n    {\n\twindgoto(msg_row, msg_col); // put cursor back\n    }\n    else if (State == MODE_HITRETURN || State == MODE_SETWSIZE)\n    {\n\tif (msg_row == Rows - 1)\n\t{\n\t    // Avoid drawing the \"hit-enter\" prompt below the previous one,\n\t    // overwrite it.  Esp. useful when regaining focus and a\n\t    // FocusGained autocmd exists but didn't draw anything.\n\t    msg_didout = FALSE;\n\t    msg_col = 0;\n\t    msg_clr_eos();\n\t}\n\thit_return_msg();\n\tmsg_row = Rows - 1;\n    }\n}\n\n/*\n * msg_check_screen - check if the screen is initialized.\n * Also check msg_row and msg_col, if they are too big it may cause a crash.\n * While starting the GUI the terminal codes will be set for the GUI, but the\n * output goes to the terminal.  Don't use the terminal codes then.\n */\n    static int\nmsg_check_screen(void)\n{\n    if (!full_screen || !screen_valid(FALSE))\n\treturn FALSE;\n\n    if (msg_row >= Rows)\n\tmsg_row = Rows - 1;\n    if (msg_col >= Columns)\n\tmsg_col = Columns - 1;\n    return TRUE;\n}\n\n/*\n * Clear from current message position to end of screen.\n * Skip this when \":silent\" was used, no need to clear for redirection.\n */\n    void\nmsg_clr_eos(void)\n{\n    if (msg_silent == 0)\n\tmsg_clr_eos_force();\n}\n\n/*\n * Clear from current message position to end of screen.\n * Note: msg_col is not updated, so we remember the end of the message\n * for msg_check().\n */\n    void\nmsg_clr_eos_force(void)\n{\n    if (msg_use_printf())\n    {\n\tif (full_screen)\t// only when termcap codes are valid\n\t{\n\t    if (*T_CD)\n\t\tout_str(T_CD);\t// clear to end of display\n\t    else if (*T_CE)\n\t\tout_str(T_CE);\t// clear to end of line\n\t}\n    }\n    else\n    {\n#ifdef FEAT_RIGHTLEFT\n\tif (cmdmsg_rl)\n\t{\n\t    screen_fill(msg_row, msg_row + 1, 0, msg_col + 1, ' ', ' ', 0);\n\t    screen_fill(msg_row + 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\t}\n\telse\n#endif\n\t{\n\t    screen_fill(msg_row, msg_row + 1, msg_col, (int)Columns,\n\t\t\t\t\t\t\t\t ' ', ' ', 0);\n\t    screen_fill(msg_row + 1, (int)Rows, 0, (int)Columns, ' ', ' ', 0);\n\t}\n    }\n}\n\n/*\n * Clear the command line.\n */\n    void\nmsg_clr_cmdline(void)\n{\n    msg_row = cmdline_row;\n    msg_col = 0;\n    msg_clr_eos_force();\n}\n\n/*\n * end putting a message on the screen\n * call wait_return if the message does not fit in the available space\n * return TRUE if wait_return not called.\n */\n    int\nmsg_end(void)\n{\n    /*\n     * If the string is larger than the window,\n     * or the ruler option is set and we run into it,\n     * we have to redraw the window.\n     * Do not do this if we are abandoning the file or editing the command line.\n     */\n    if (!exiting && need_wait_return && !(State & MODE_CMDLINE))\n    {\n\twait_return(FALSE);\n\treturn FALSE;\n    }\n    out_flush();\n    return TRUE;\n}\n\n/*\n * If the written message runs into the shown command or ruler, we have to\n * wait for hit-return and redraw the window later.\n */\n    void\nmsg_check(void)\n{\n    if (msg_row == Rows - 1 && msg_col >= sc_col)\n    {\n\tneed_wait_return = TRUE;\n\tredraw_cmdline = TRUE;\n    }\n}\n\n/*\n * May write a string to the redirection file.\n * When \"maxlen\" is -1 write the whole string, otherwise up to \"maxlen\" bytes.\n */\n    static void\nredir_write(char_u *str, int maxlen)\n{\n    char_u\t*s = str;\n    static int\tcur_col = 0;\n\n    // Don't do anything for displaying prompts and the like.\n    if (redir_off)\n\treturn;\n\n    // If 'verbosefile' is set prepare for writing in that file.\n    if (*p_vfile != NUL && verbose_fd == NULL)\n\tverbose_open();\n\n    if (redirecting())\n    {\n\t// If the string doesn't start with CR or NL, go to msg_col\n\tif (*s != '\\n' && *s != '\\r')\n\t{\n\t    while (cur_col < msg_col)\n\t    {\n#ifdef FEAT_EVAL\n\t\tif (redir_execute)\n\t\t    execute_redir_str((char_u *)\" \", -1);\n\t\telse if (redir_reg)\n\t\t    write_reg_contents(redir_reg, (char_u *)\" \", -1, TRUE);\n\t\telse if (redir_vname)\n\t\t    var_redir_str((char_u *)\" \", -1);\n\t\telse\n#endif\n\t\t    if (redir_fd != NULL)\n\t\t    fputs(\" \", redir_fd);\n\t\tif (verbose_fd != NULL)\n\t\t    fputs(\" \", verbose_fd);\n\t\t++cur_col;\n\t    }\n\t}\n\n#ifdef FEAT_EVAL\n\tif (redir_execute)\n\t    execute_redir_str(s, maxlen);\n\telse if (redir_reg)\n\t    write_reg_contents(redir_reg, s, maxlen, TRUE);\n\telse if (redir_vname)\n\t    var_redir_str(s, maxlen);\n#endif\n\n\t// Write and adjust the current column.\n\twhile (*s != NUL && (maxlen < 0 || (int)(s - str) < maxlen))\n\t{\n#ifdef FEAT_EVAL\n\t    if (!redir_reg && !redir_vname && !redir_execute)\n#endif\n\t\tif (redir_fd != NULL)\n\t\t    putc(*s, redir_fd);\n\t    if (verbose_fd != NULL)\n\t\tputc(*s, verbose_fd);\n\t    if (*s == '\\r' || *s == '\\n')\n\t\tcur_col = 0;\n\t    else if (*s == '\\t')\n\t\tcur_col += (8 - cur_col % 8);\n\t    else\n\t\t++cur_col;\n\t    ++s;\n\t}\n\n\tif (msg_silent != 0)\t// should update msg_col\n\t    msg_col = cur_col;\n    }\n}\n\n    int\nredirecting(void)\n{\n    return redir_fd != NULL || *p_vfile != NUL\n#ifdef FEAT_EVAL\n\t\t\t  || redir_reg || redir_vname || redir_execute\n#endif\n\t\t\t\t       ;\n}\n\n/*\n * Before giving verbose message.\n * Must always be called paired with verbose_leave()!\n */\n    void\nverbose_enter(void)\n{\n    if (*p_vfile != NUL)\n\t++msg_silent;\n}\n\n/*\n * After giving verbose message.\n * Must always be called paired with verbose_enter()!\n */\n    void\nverbose_leave(void)\n{\n    if (*p_vfile != NUL)\n\tif (--msg_silent < 0)\n\t    msg_silent = 0;\n}\n\n/*\n * Like verbose_enter() and set msg_scroll when displaying the message.\n */\n    void\nverbose_enter_scroll(void)\n{\n    if (*p_vfile != NUL)\n\t++msg_silent;\n    else\n\t// always scroll up, don't overwrite\n\tmsg_scroll = TRUE;\n}\n\n/*\n * Like verbose_leave() and set cmdline_row when displaying the message.\n */\n    void\nverbose_leave_scroll(void)\n{\n    if (*p_vfile != NUL)\n    {\n\tif (--msg_silent < 0)\n\t    msg_silent = 0;\n    }\n    else\n\tcmdline_row = msg_row;\n}\n\n/*\n * Called when 'verbosefile' is set: stop writing to the file.\n */\n    void\nverbose_stop(void)\n{\n    if (verbose_fd != NULL)\n    {\n\tfclose(verbose_fd);\n\tverbose_fd = NULL;\n    }\n    verbose_did_open = FALSE;\n}\n\n/*\n * Open the file 'verbosefile'.\n * Return FAIL or OK.\n */\n    int\nverbose_open(void)\n{\n    if (verbose_fd == NULL && !verbose_did_open)\n    {\n\t// Only give the error message once.\n\tverbose_did_open = TRUE;\n\n\tverbose_fd = mch_fopen((char *)p_vfile, \"a\");\n\tif (verbose_fd == NULL)\n\t{\n\t    semsg(_(e_cant_open_file_str), p_vfile);\n\t    return FAIL;\n\t}\n    }\n    return OK;\n}\n\n/*\n * Give a warning message (for searching).\n * Use 'w' highlighting and may repeat the message after redrawing\n */\n    void\ngive_warning(char_u *message, int hl)\n{\n    give_warning_with_source(message, hl, FALSE);\n}\n\n    void\ngive_warning_with_source(char_u *message, int hl, int with_source)\n{\n    // Don't do this for \":silent\".\n    if (msg_silent != 0)\n\treturn;\n\n    // Don't want a hit-enter prompt here.\n    ++no_wait_return;\n\n#ifdef FEAT_EVAL\n    set_vim_var_string(VV_WARNINGMSG, message, -1);\n#endif\n    VIM_CLEAR(keep_msg);\n    if (hl)\n\tkeep_msg_attr = HL_ATTR(HLF_W);\n    else\n\tkeep_msg_attr = 0;\n\n    if (with_source)\n    {\n\t// Do what msg() does, but with a column offset if the warning should\n\t// be after the mode message.\n\tmsg_start();\n\tmsg_source(HL_ATTR(HLF_W));\n\tmsg_puts(\" \");\n\tmsg_puts_attr((char *)message, HL_ATTR(HLF_W) | MSG_HIST);\n\tmsg_clr_eos();\n\t(void)msg_end();\n    }\n    else if (msg_attr((char *)message, keep_msg_attr) && msg_scrolled == 0)\n\tset_keep_msg(message, keep_msg_attr);\n\n    msg_didout = FALSE;\t    // overwrite this message\n    msg_nowait = TRUE;\t    // don't wait for this message\n    msg_col = 0;\n\n    --no_wait_return;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n    void\ngive_warning2(char_u *message, char_u *a1, int hl)\n{\n    if (IObuff == NULL)\n    {\n\t// Very early in initialisation and already something wrong, just give\n\t// the raw message so the user at least gets a hint.\n\tgive_warning(message, hl);\n    }\n    else\n    {\n\tvim_snprintf((char *)IObuff, IOSIZE, (char *)message, a1);\n\tgive_warning(IObuff, hl);\n    }\n}\n#endif\n\n/*\n * Advance msg cursor to column \"col\".\n */\n    void\nmsg_advance(int col)\n{\n    if (msg_silent != 0)\t// nothing to advance to\n    {\n\tmsg_col = col;\t\t// for redirection, may fill it up later\n\treturn;\n    }\n    if (col >= Columns)\t\t// not enough room\n\tcol = Columns - 1;\n#ifdef FEAT_RIGHTLEFT\n    if (cmdmsg_rl)\n\twhile (msg_col > Columns - col)\n\t    msg_putchar(' ');\n    else\n#endif\n\twhile (msg_col < col)\n\t    msg_putchar(' ');\n}\n\n#if defined(FEAT_CON_DIALOG) || defined(PROTO)\n/*\n * Used for \"confirm()\" function, and the :confirm command prefix.\n * Versions which haven't got flexible dialogs yet, and console\n * versions, get this generic handler which uses the command line.\n *\n * type  = one of:\n *\t   VIM_QUESTION, VIM_INFO, VIM_WARNING, VIM_ERROR or VIM_GENERIC\n * title = title string (can be NULL for default)\n * (neither used in console dialogs at the moment)\n *\n * Format of the \"buttons\" string:\n * \"Button1Name\\nButton2Name\\nButton3Name\"\n * The first button should normally be the default/accept\n * The second button should be the 'Cancel' button\n * Other buttons- use your imagination!\n * A '&' in a button name becomes a shortcut, so each '&' should be before a\n * different letter.\n *\n * Returns 0 if cancelled, otherwise the nth button (1-indexed).\n */\n    int\ndo_dialog(\n    int\t\ttype UNUSED,\n    char_u\t*title UNUSED,\n    char_u\t*message,\n    char_u\t*buttons,\n    int\t\tdfltbutton,\n    char_u\t*textfield UNUSED,\t// IObuff for inputdialog(), NULL\n\t\t\t\t\t// otherwise\n    int\t\tex_cmd)\t    // when TRUE pressing : accepts default and starts\n\t\t\t    // Ex command\n{\n    int\t\toldState;\n    int\t\tretval = 0;\n    char_u\t*hotkeys;\n    int\t\tc;\n    int\t\ti;\n    tmode_T\tsave_tmode;\n\n#ifndef NO_CONSOLE\n    // Don't output anything in silent mode (\"ex -s\")\n    if (silent_mode)\n\treturn dfltbutton;   // return default option\n#endif\n\n#ifdef FEAT_GUI_DIALOG\n    // When GUI is running and 'c' not in 'guioptions', use the GUI dialog\n    if (gui.in_use && vim_strchr(p_go, GO_CONDIALOG) == NULL)\n    {\n\t// --gui-dialog-file: write text to a file\n\tif (gui_dialog_log(title, message))\n\t    c = dfltbutton;\n\telse\n\t    c = gui_mch_dialog(type, title, message, buttons, dfltbutton,\n\t\t\t\t\t\t\t   textfield, ex_cmd);\n\t// avoid a hit-enter prompt without clearing the cmdline\n\tneed_wait_return = FALSE;\n\temsg_on_display = FALSE;\n\tcmdline_row = msg_row;\n\n\t// Flush output to avoid that further messages and redrawing is done\n\t// in the wrong order.\n\tout_flush();\n\tgui_mch_update();\n\n\treturn c;\n    }\n#endif\n\n    oldState = State;\n    State = MODE_CONFIRM;\n    setmouse();\n\n    // Ensure raw mode here.\n    save_tmode = cur_tmode;\n    settmode(TMODE_RAW);\n\n    /*\n     * Since we wait for a keypress, don't make the\n     * user press RETURN as well afterwards.\n     */\n    ++no_wait_return;\n    hotkeys = msg_show_console_dialog(message, buttons, dfltbutton);\n\n    if (hotkeys != NULL)\n    {\n\tfor (;;)\n\t{\n\t    // Get a typed character directly from the user.\n\t    c = get_keystroke();\n\t    switch (c)\n\t    {\n\t    case CAR:\t\t// User accepts default option\n\t    case NL:\n\t\tretval = dfltbutton;\n\t\tbreak;\n\t    case Ctrl_C:\t// User aborts/cancels\n\t    case ESC:\n\t\tretval = 0;\n\t\tbreak;\n\t    default:\t\t// Could be a hotkey?\n\t\tif (c < 0)\t// special keys are ignored here\n\t\t    continue;\n\t\tif (c == ':' && ex_cmd)\n\t\t{\n\t\t    retval = dfltbutton;\n\t\t    ins_char_typebuf(':', 0);\n\t\t    break;\n\t\t}\n\n\t\t// Make the character lowercase, as chars in \"hotkeys\" are.\n\t\tc = MB_TOLOWER(c);\n\t\tretval = 1;\n\t\tfor (i = 0; hotkeys[i]; ++i)\n\t\t{\n\t\t    if (has_mbyte)\n\t\t    {\n\t\t\tif ((*mb_ptr2char)(hotkeys + i) == c)\n\t\t\t    break;\n\t\t\ti += (*mb_ptr2len)(hotkeys + i) - 1;\n\t\t    }\n\t\t    else\n\t\t\tif (hotkeys[i] == c)\n\t\t\t    break;\n\t\t    ++retval;\n\t\t}\n\t\tif (hotkeys[i])\n\t\t    break;\n\t\t// No hotkey match, so keep waiting\n\t\tcontinue;\n\t    }\n\t    break;\n\t}\n\n\tvim_free(hotkeys);\n    }\n\n    settmode(save_tmode);\n    State = oldState;\n    setmouse();\n    --no_wait_return;\n    msg_end_prompt();\n\n    return retval;\n}\n\n/*\n * Copy one character from \"*from\" to \"*to\", taking care of multi-byte\n * characters.  Return the length of the character in bytes.\n */\n    static int\ncopy_char(\n    char_u\t*from,\n    char_u\t*to,\n    int\t\tlowercase)\t// make character lower case\n{\n    int\t\tlen;\n    int\t\tc;\n\n    if (has_mbyte)\n    {\n\tif (lowercase)\n\t{\n\t    c = MB_TOLOWER((*mb_ptr2char)(from));\n\t    return (*mb_char2bytes)(c, to);\n\t}\n\telse\n\t{\n\t    len = (*mb_ptr2len)(from);\n\t    mch_memmove(to, from, (size_t)len);\n\t    return len;\n\t}\n    }\n    else\n    {\n\tif (lowercase)\n\t    *to = (char_u)TOLOWER_LOC(*from);\n\telse\n\t    *to = *from;\n\treturn 1;\n    }\n}\n\n/*\n * Format the dialog string, and display it at the bottom of\n * the screen. Return a string of hotkey chars (if defined) for\n * each 'button'. If a button has no hotkey defined, the first character of\n * the button is used.\n * The hotkeys can be multi-byte characters, but without combining chars.\n *\n * Returns an allocated string with hotkeys, or NULL for error.\n */\n    static char_u *\nmsg_show_console_dialog(\n    char_u\t*message,\n    char_u\t*buttons,\n    int\t\tdfltbutton)\n{\n    int\t\tlen = 0;\n#define HOTK_LEN (has_mbyte ? MB_MAXBYTES : 1)\n    int\t\tlenhotkey = HOTK_LEN;\t// count first button\n    char_u\t*hotk = NULL;\n    char_u\t*msgp = NULL;\n    char_u\t*hotkp = NULL;\n    char_u\t*r;\n    int\t\tcopy;\n#define HAS_HOTKEY_LEN 30\n    char_u\thas_hotkey[HAS_HOTKEY_LEN];\n    int\t\tfirst_hotkey = FALSE;\t// first char of button is hotkey\n    int\t\tidx;\n\n    has_hotkey[0] = FALSE;\n\n    /*\n     * First loop: compute the size of memory to allocate.\n     * Second loop: copy to the allocated memory.\n     */\n    for (copy = 0; copy <= 1; ++copy)\n    {\n\tr = buttons;\n\tidx = 0;\n\twhile (*r)\n\t{\n\t    if (*r == DLG_BUTTON_SEP)\n\t    {\n\t\tif (copy)\n\t\t{\n\t\t    *msgp++ = ',';\n\t\t    *msgp++ = ' ';\t    // '\\n' -> ', '\n\n\t\t    // advance to next hotkey and set default hotkey\n\t\t    if (has_mbyte)\n\t\t\thotkp += STRLEN(hotkp);\n\t\t    else\n\t\t\t++hotkp;\n\t\t    hotkp[copy_char(r + 1, hotkp, TRUE)] = NUL;\n\t\t    if (dfltbutton)\n\t\t\t--dfltbutton;\n\n\t\t    // If no hotkey is specified first char is used.\n\t\t    if (idx < HAS_HOTKEY_LEN - 1 && !has_hotkey[++idx])\n\t\t\tfirst_hotkey = TRUE;\n\t\t}\n\t\telse\n\t\t{\n\t\t    len += 3;\t\t    // '\\n' -> ', '; 'x' -> '(x)'\n\t\t    lenhotkey += HOTK_LEN;  // each button needs a hotkey\n\t\t    if (idx < HAS_HOTKEY_LEN - 1)\n\t\t\thas_hotkey[++idx] = FALSE;\n\t\t}\n\t    }\n\t    else if (*r == DLG_HOTKEY_CHAR || first_hotkey)\n\t    {\n\t\tif (*r == DLG_HOTKEY_CHAR)\n\t\t    ++r;\n\t\tfirst_hotkey = FALSE;\n\t\tif (copy)\n\t\t{\n\t\t    if (*r == DLG_HOTKEY_CHAR)\t\t// '&&a' -> '&a'\n\t\t\t*msgp++ = *r;\n\t\t    else\n\t\t    {\n\t\t\t// '&a' -> '[a]'\n\t\t\t*msgp++ = (dfltbutton == 1) ? '[' : '(';\n\t\t\tmsgp += copy_char(r, msgp, FALSE);\n\t\t\t*msgp++ = (dfltbutton == 1) ? ']' : ')';\n\n\t\t\t// redefine hotkey\n\t\t\thotkp[copy_char(r, hotkp, TRUE)] = NUL;\n\t\t    }\n\t\t}\n\t\telse\n\t\t{\n\t\t    ++len;\t    // '&a' -> '[a]'\n\t\t    if (idx < HAS_HOTKEY_LEN - 1)\n\t\t\thas_hotkey[idx] = TRUE;\n\t\t}\n\t    }\n\t    else\n\t    {\n\t\t// everything else copy literally\n\t\tif (copy)\n\t\t    msgp += copy_char(r, msgp, FALSE);\n\t    }\n\n\t    // advance to the next character\n\t    MB_PTR_ADV(r);\n\t}\n\n\tif (copy)\n\t{\n\t    *msgp++ = ':';\n\t    *msgp++ = ' ';\n\t    *msgp = NUL;\n\t}\n\telse\n\t{\n\t    len += (int)(STRLEN(message)\n\t\t\t+ 2\t\t\t// for the NL's\n\t\t\t+ STRLEN(buttons)\n\t\t\t+ 3);\t\t\t// for the \": \" and NUL\n\t    lenhotkey++;\t\t\t// for the NUL\n\n\t    // If no hotkey is specified first char is used.\n\t    if (!has_hotkey[0])\n\t    {\n\t\tfirst_hotkey = TRUE;\n\t\tlen += 2;\t\t// \"x\" -> \"[x]\"\n\t    }\n\n\t    /*\n\t     * Now allocate and load the strings\n\t     */\n\t    vim_free(confirm_msg);\n\t    confirm_msg = alloc(len);\n\t    if (confirm_msg == NULL)\n\t\treturn NULL;\n\t    *confirm_msg = NUL;\n\t    hotk = alloc(lenhotkey);\n\t    if (hotk == NULL)\n\t\treturn NULL;\n\n\t    *confirm_msg = '\\n';\n\t    STRCPY(confirm_msg + 1, message);\n\n\t    msgp = confirm_msg + 1 + STRLEN(message);\n\t    hotkp = hotk;\n\n\t    // Define first default hotkey.  Keep the hotkey string NUL\n\t    // terminated to avoid reading past the end.\n\t    hotkp[copy_char(buttons, hotkp, TRUE)] = NUL;\n\n\t    // Remember where the choices start, displaying starts here when\n\t    // \"hotkp\" typed at the more prompt.\n\t    confirm_msg_tail = msgp;\n\t    *msgp++ = '\\n';\n\t}\n    }\n\n    display_confirm_msg();\n    return hotk;\n}\n\n/*\n * Display the \":confirm\" message.  Also called when screen resized.\n */\n    static void\ndisplay_confirm_msg(void)\n{\n    // avoid that 'q' at the more prompt truncates the message here\n    ++confirm_msg_used;\n    if (confirm_msg != NULL)\n\tmsg_puts_attr((char *)confirm_msg, HL_ATTR(HLF_M));\n    --confirm_msg_used;\n}\n\n#endif // FEAT_CON_DIALOG\n\n#if defined(FEAT_CON_DIALOG) || defined(FEAT_GUI_DIALOG)\n\n    int\nvim_dialog_yesno(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    if (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)_(\"Question\") : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\"), dflt, NULL, FALSE) == 1)\n\treturn VIM_YES;\n    return VIM_NO;\n}\n\n    int\nvim_dialog_yesnocancel(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    switch (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)_(\"Question\") : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\\n&Cancel\"), dflt, NULL, FALSE))\n    {\n\tcase 1: return VIM_YES;\n\tcase 2: return VIM_NO;\n    }\n    return VIM_CANCEL;\n}\n\n    int\nvim_dialog_yesnoallcancel(\n    int\t\ttype,\n    char_u\t*title,\n    char_u\t*message,\n    int\t\tdflt)\n{\n    switch (do_dialog(type,\n\t\ttitle == NULL ? (char_u *)\"Question\" : title,\n\t\tmessage,\n\t\t(char_u *)_(\"&Yes\\n&No\\nSave &All\\n&Discard All\\n&Cancel\"),\n\t\t\t\t\t\t\t   dflt, NULL, FALSE))\n    {\n\tcase 1: return VIM_YES;\n\tcase 2: return VIM_NO;\n\tcase 3: return VIM_ALL;\n\tcase 4: return VIM_DISCARDALL;\n    }\n    return VIM_CANCEL;\n}\n\n#endif // FEAT_GUI_DIALOG || FEAT_CON_DIALOG\n", "\" Test that the system menu can be loaded.\n\nsource check.vim\nCheckFeature menu\n\nfunc Test_load_menu()\n  try\n    source $VIMRUNTIME/menu.vim\n  catch\n    call assert_report('error while loading menus: ' . v:exception)\n  endtry\n  call assert_match('browse confirm w', execute(':menu File.Save'))\n\n  let v:errmsg = ''\n  doautocmd LoadBufferMenu VimEnter\n  call assert_equal('', v:errmsg)\n\n  source $VIMRUNTIME/delmenu.vim\n  call assert_equal('', v:errmsg)\nendfunc\n\nfunc Test_buffer_menu_special_buffers()\n  \" Load in runtime menus\n  try\n    source $VIMRUNTIME/menu.vim\n  catch\n    call assert_report('error while loading menus: ' . v:exception)\n  endtry\n\n  let v:errmsg = ''\n  doautocmd LoadBufferMenu VimEnter\n  call assert_equal('', v:errmsg)\n\n  let orig_buffer_menus = execute(\"nmenu Buffers\")\n\n  \" Test that regular new buffer results in a new buffer menu item.\n  new\n  let new_buffer_menus = execute('nmenu Buffers')\n  call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(new_buffer_menus, \"\\n\")))\n  bwipe!\n  call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n\n  \" Make a new command-line window, test that it does not create a new buffer\n  \" menu.\n  call feedkeys(\"q::let cmdline_buffer_menus=execute('nmenu Buffers')\\<CR>:q\\<CR>\", 'ntx')\n  call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(cmdline_buffer_menus, \"\\n\")))\n  call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n\n  if has('terminal')\n    \" Open a terminal window and test that it does not create a buffer menu\n    \" item.\n    terminal\n    let term_buffer_menus = execute('nmenu Buffers')\n    call assert_equal(len(split(orig_buffer_menus, \"\\n\")) + 2, len(split(term_buffer_menus, \"\\n\")))\n    bwipe!\n    call assert_equal(orig_buffer_menus, execute(\"nmenu Buffers\"))\n  endif\n\n  \" Remove menus to clean up\n  source $VIMRUNTIME/delmenu.vim\n  call assert_equal('', v:errmsg)\nendfunc\n\nfunc Test_translate_menu()\n  CheckFeature multi_lang\n  if !filereadable($VIMRUNTIME . '/lang/menu_de_de.latin1.vim')\n    throw 'Skipped: translated menu not found'\n  endif\n\n  \" First delete any English menus.\n  source $VIMRUNTIME/delmenu.vim\n  set langmenu=de_de\n  source $VIMRUNTIME/menu.vim\n  call assert_match('browse confirm w', execute(':menu Datei.Speichern'))\n\n  source $VIMRUNTIME/delmenu.vim\nendfunc\n\nfunc Test_menu_commands()\n  nmenu 2 Test.FooBar :let g:did_menu = 'normal'<CR>\n  vmenu 2 Test.FooBar :let g:did_menu = 'visual'<CR>\n  smenu 2 Test.FooBar :let g:did_menu = 'select'<CR>\n  omenu 2 Test.FooBar :let g:did_menu = 'op-pending'<CR>\n  tlmenu 2 Test.FooBar :let g:did_menu = 'terminal'<CR>\n  imenu 2 Test.FooBar :let g:did_menu = 'insert'<CR>\n  cmenu 2 Test.FooBar :let g:did_menu = 'cmdline'<CR>\n  emenu n Test.FooBar\n\n  call feedkeys(\":menu Test.FooB\\<C-A>\\<C-B>\\\"\\<CR>\", 'tx')\n  call assert_equal('\"menu Test.FooBar', @:)\n\n  call assert_equal('normal', g:did_menu)\n  emenu v Test.FooBar\n  call assert_equal('visual', g:did_menu)\n  emenu s Test.FooBar\n  call assert_equal('select', g:did_menu)\n  emenu o Test.FooBar\n  call assert_equal('op-pending', g:did_menu)\n  emenu t Test.FooBar\n  call assert_equal('terminal', g:did_menu)\n  emenu i Test.FooBar\n  call assert_equal('insert', g:did_menu)\n  emenu c Test.FooBar\n  call assert_equal('cmdline', g:did_menu)\n\n  nunmenu Test.FooBar\n  call assert_fails('emenu n Test.FooBar', 'E335: Menu not defined for Normal mode')\n  vunmenu Test.FooBar\n  call assert_fails('emenu v Test.FooBar', 'E335: Menu not defined for Visual mode')\n  vmenu 2 Test.FooBar :let g:did_menu = 'visual'<CR>\n  sunmenu Test.FooBar\n  call assert_fails('emenu s Test.FooBar', 'E335: Menu not defined for Select mode')\n  ounmenu Test.FooBar\n  call assert_fails('emenu o Test.FooBar', 'E335: Menu not defined for Op-pending mode')\n  iunmenu Test.FooBar\n  call assert_fails('emenu i Test.FooBar', 'E335: Menu not defined for Insert mode')\n  cunmenu Test.FooBar\n  call assert_fails('emenu c Test.FooBar', 'E335: Menu not defined for Cmdline mode')\n  tlunmenu Test.FooBar\n  call assert_fails('emenu t Test.FooBar', 'E335: Menu not defined for Terminal mode')\n\n  aunmenu Test.FooBar\n  call assert_fails('emenu n Test.FooBar', 'E334:')\n\n  nmenu 2 Test.FooBar.Child :let g:did_menu = 'foobar'<CR>\n  call assert_fails('emenu n Test.FooBar', 'E333:')\n  nunmenu Test.FooBar.Child\n\n  unlet g:did_menu\nendfun\n\n\" Test various menu related errors\nfunc Test_menu_errors()\n  menu Test.Foo  :version<CR>\n\n  \" Error cases\n  call assert_fails('menu .Test.Foo :ls<CR>', 'E475:')\n  call assert_fails('menu Test. :ls<CR>', 'E330:')\n  call assert_fails('menu Foo. :ls<CR>', 'E331:')\n  call assert_fails('unmenu Test.Foo abc', 'E488:')\n  call assert_fails('menu <Tab>:ls  :ls<CR>', 'E792:')\n  call assert_fails('menu Test.<Tab>:ls  :ls<CR>', 'E792:')\n  call assert_fails('menu Test.Foo.Bar  :ls<CR>', 'E327:')\n  call assert_fails('menu Test.-Sep-.Baz  :ls<CR>', 'E332:')\n  call assert_fails('menu Foo.Bar.--.Baz  :ls<CR>', 'E332:')\n  call assert_fails('menu disable Test.Foo.Bar', 'E327:')\n  call assert_fails('menu disable T.Foo', 'E329:')\n  call assert_fails('unmenu Test.Foo.Bar', 'E327:')\n  call assert_fails('cunmenu Test.Foo', 'E328:')\n  call assert_fails('unmenu Test.Bar', 'E329:')\n  call assert_fails('menu Test.Foo.Bar', 'E327:')\n  call assert_fails('cmenu Test.Foo', 'E328:')\n  call assert_fails('emenu x Test.Foo', 'E475:')\n  call assert_fails('emenu Test.Foo.Bar', 'E327:')\n  call assert_fails('menutranslate Test', 'E474:')\n\n  silent! unmenu Foo\n  unmenu Test\nendfunc\n\n\" Test for menu item completion in command line\nfunc Test_menu_expand()\n  \" Make sure we don't have stale menu items like Buffers menu.\n  source $VIMRUNTIME/delmenu.vim\n\n  \" Create the menu itmes for test\n  menu Dummy.Nothing lll\n  for i in range(1, 4)\n    let m = 'menu Xmenu.A' .. i .. '.A' .. i\n    for j in range(1, 4)\n      exe m .. 'B' .. j .. ' :echo \"A' .. i .. 'B' .. j .. '\"' .. \"<CR>\"\n    endfor\n  endfor\n  set wildmenu\n\n  \" Test for <CR> selecting a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<CR>\\<Right>x\\<BS>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A1.A1B2', @:)\n\n  \" Test for <Down> selecting a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Right>\\<Right>\\<Down>\" ..\n        \\ \"\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A3.A3B1 A3B2 A3B3 A3B4', @:)\n\n  \" Test for <Up> to go up a submenu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Down>\\<Up>\\<Right>\\<Right>\" ..\n        \\ \"\\<Left>\\<Down>\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Xmenu.A2.A2B1 A2B2 A2B3 A2B4', @:)\n\n  \" Test for <Up> to go up a menu\n  call feedkeys(\":emenu Xmenu.A\\<Tab>\\<Down>\\<Up>\\<Up>\\<Up>\" ..\n        \\ \"\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"emenu Dummy. Xmenu.', @:)\n\n  \" Test for expanding only submenus\n  call feedkeys(\":popup Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"popup Xmenu.A1 A2 A3 A4', @:)\n\n  \" Test for expanding menus after enable/disable\n  call feedkeys(\":menu enable Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu enable Xmenu.A1. A2. A3. A4.', @:)\n  call feedkeys(\":menu disable Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu disable Xmenu.A1. A2. A3. A4.', @:)\n\n  \" Test for expanding non-existing menu path\n  call feedkeys(\":menu xyz.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu xyz.', @:)\n  call feedkeys(\":menu Xmenu.A1.A1B1.xyz.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"menu Xmenu.A1.A1B1.xyz.', @:)\n\n  set wildmenu&\n  unmenu Xmenu\n  unmenu Dummy\n\n  \" Test for expanding popup menus with some hidden items\n  menu Xmenu.foo.A1 a1\n  menu Xmenu.]bar bar\n  menu Xmenu.]baz.B1 b1\n  menu Xmenu.-sep- :\n  call feedkeys(\":popup Xmenu.\\<C-A>\\<C-B>\\\"\\<CR>\", 'xt')\n  call assert_equal('\"popup Xmenu.foo', @:)\n  unmenu Xmenu\nendfunc\n\n\" Test for the menu_info() function\nfunc Test_menu_info()\n  \" Define menus with various attributes\n  10nnoremenu 10.10 T&est.F&oo  :echo 'foo'<CR>\n  10nmenu <silent> 10.20 T&est.B&ar<Tab>:bar  :echo 'bar'<CR>\n  10nmenu <script> 10.30.5 T&est.Ba&z.Qu&x  :echo 'qux'<CR>\n\n  let d = #{name: \"B&ar\\t:bar\", display: 'Bar', modes: 'n', shortcut: 'a',\n        \\ accel: ':bar', priority: 20, enabled: v:true, silent: v:true,\n        \\ noremenu: v:false, script: v:false, rhs: \":echo 'bar'<CR>\"}\n  call assert_equal(d, menu_info('Test.Bar'))\n\n  let d = #{name: 'Ba&z', display: 'Baz', modes: 'n', shortcut: 'z',\n        \\ priority: 30, submenus: ['Qux']}\n  call assert_equal(d, menu_info('Test.Baz'))\n\n  let d = #{name: 'T&est', display: 'Test', modes: 'n', shortcut: 'e',\n        \\ priority: 10, submenus: ['Foo', 'Bar', 'Baz']}\n  call assert_equal(d, menu_info('Test'))\n  call assert_equal({}, menu_info('Test.Dummy'))\n  call assert_equal({}, menu_info('Dummy'))\n\n  nmenu disable Test.Foo\n  call assert_equal(v:false, menu_info('Test.Foo').enabled)\n  nmenu enable Test.Foo\n  call assert_equal(v:true, menu_info('Test.Foo').enabled)\n\n  call assert_equal(menu_info('Test.Foo'), menu_info('Test.Foo', ''))\n  nmenu Test.abc  <Nop>\n  call assert_equal('<Nop>', menu_info('Test.abc').rhs)\n  call assert_fails('call menu_info([])', 'E730:')\n  call assert_fails('call menu_info(\"\", [])', 'E730:')\n  nunmenu Test\n\n  \" Test for defining menus in different modes\n  menu Test.menu :menu<CR>\n  menu! Test.menu! :menu!<CR>\n  amenu Test.amenu  :amenu<CR>\n  nmenu Test.nmenu  :nmenu<CR>\n  omenu Test.omenu  :omenu<CR>\n  vmenu Test.vmenu  :vmenu<CR>\n  xmenu Test.xmenu  :xmenu<CR>\n  smenu Test.smenu  :smenu<CR>\n  imenu <silent> <script> Test.imenu  :imenu<CR>\n  cmenu Test.cmenu  :cmenu<CR>\n  tlmenu Test.tlmenu  :tlmenu<CR>\n  tmenu Test.nmenu Normal mode menu\n  tmenu Test.omenu Op-pending mode menu\n  noremenu Test.noremenu :noremenu<CR>\n  noremenu! Test.noremenu! :noremenu!<CR>\n  anoremenu Test.anoremenu  :anoremenu<CR>\n  nnoremenu Test.nnoremenu  :nnoremenu<CR>\n  onoremenu Test.onoremenu  :onoremenu<CR>\n  vnoremenu Test.vnoremenu  :vnoremenu<CR>\n  xnoremenu Test.xnoremenu  :xnoremenu<CR>\n  snoremenu Test.snoremenu  :snoremenu<CR>\n  inoremenu <silent> Test.inoremenu  :inoremenu<CR>\n  cnoremenu Test.cnoremenu  :cnoremenu<CR>\n  tlnoremenu Test.tlnoremenu  :tlnoremenu<CR>\n  call assert_equal(#{name: 'menu', priority: 500, shortcut: '',\n        \\ display: 'menu', modes: ' ', enabled: v:true, silent: v:false,\n        \\ rhs: \":menu<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.menu'))\n  call assert_equal(#{name: 'menu!', priority: 500, shortcut: '',\n        \\ display: 'menu!', modes: '!', enabled: v:true, silent: v:false,\n        \\ rhs: \":menu!<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.menu!', '!'))\n  call assert_equal(#{name: 'amenu', priority: 500, shortcut: '',\n        \\ display: 'amenu', modes: 'a', enabled: v:true, silent: v:false,\n        \\ rhs: \":amenu<CR>\", noremenu: v:false, script: v:false},\n        \\ menu_info('Test.amenu', 'a'))\n  call assert_equal(#{name: 'nmenu', priority: 500, shortcut: '',\n        \\ display: 'nmenu', modes: 'n', enabled: v:true, silent: v:false,\n        \\ rhs: ':nmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.nmenu', 'n'))\n  call assert_equal(#{name: 'omenu', priority: 500, shortcut: '',\n        \\ display: 'omenu', modes: 'o', enabled: v:true, silent: v:false,\n        \\ rhs: ':omenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.omenu', 'o'))\n  call assert_equal(#{name: 'vmenu', priority: 500, shortcut: '',\n        \\ display: 'vmenu', modes: 'v', enabled: v:true, silent: v:false,\n        \\ rhs: ':vmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.vmenu', 'v'))\n  call assert_equal(#{name: 'xmenu', priority: 500, shortcut: '',\n        \\ display: 'xmenu', modes: 'x', enabled: v:true, silent: v:false,\n        \\ rhs: ':xmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.xmenu', 'x'))\n  call assert_equal(#{name: 'smenu', priority: 500, shortcut: '',\n        \\ display: 'smenu', modes: 's', enabled: v:true, silent: v:false,\n        \\ rhs: ':smenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.smenu', 's'))\n  call assert_equal(#{name: 'imenu', priority: 500, shortcut: '',\n        \\ display: 'imenu', modes: 'i', enabled: v:true, silent: v:true,\n        \\ rhs: ':imenu<CR>', noremenu: v:false, script: v:true},\n        \\ menu_info('Test.imenu', 'i'))\n  call assert_equal(#{ name: 'cmenu', priority: 500, shortcut: '',\n        \\ display: 'cmenu', modes: 'c', enabled: v:true, silent: v:false,\n        \\ rhs: ':cmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.cmenu', 'c'))\n  call assert_equal(#{name: 'tlmenu', priority: 500, shortcut: '',\n        \\ display: 'tlmenu', modes: 'tl', enabled: v:true, silent: v:false,\n        \\ rhs: ':tlmenu<CR>', noremenu: v:false, script: v:false},\n        \\ menu_info('Test.tlmenu', 'tl'))\n  call assert_equal(#{name: 'noremenu', priority: 500, shortcut: '',\n        \\ display: 'noremenu', modes: ' ', enabled: v:true, silent: v:false,\n        \\ rhs: \":noremenu<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.noremenu'))\n  call assert_equal(#{name: 'noremenu!', priority: 500, shortcut: '',\n        \\ display: 'noremenu!', modes: '!', enabled: v:true, silent: v:false,\n        \\ rhs: \":noremenu!<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.noremenu!', '!'))\n  call assert_equal(#{name: 'anoremenu', priority: 500, shortcut: '',\n        \\ display: 'anoremenu', modes: 'a', enabled: v:true, silent: v:false,\n        \\ rhs: \":anoremenu<CR>\", noremenu: v:true, script: v:false},\n        \\ menu_info('Test.anoremenu', 'a'))\n  call assert_equal(#{name: 'nnoremenu', priority: 500, shortcut: '',\n        \\ display: 'nnoremenu', modes: 'n', enabled: v:true, silent: v:false,\n        \\ rhs: ':nnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.nnoremenu', 'n'))\n  call assert_equal(#{name: 'onoremenu', priority: 500, shortcut: '',\n        \\ display: 'onoremenu', modes: 'o', enabled: v:true, silent: v:false,\n        \\ rhs: ':onoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.onoremenu', 'o'))\n  call assert_equal(#{name: 'vnoremenu', priority: 500, shortcut: '',\n        \\ display: 'vnoremenu', modes: 'v', enabled: v:true, silent: v:false,\n        \\ rhs: ':vnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.vnoremenu', 'v'))\n  call assert_equal(#{name: 'xnoremenu', priority: 500, shortcut: '',\n        \\ display: 'xnoremenu', modes: 'x', enabled: v:true, silent: v:false,\n        \\ rhs: ':xnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.xnoremenu', 'x'))\n  call assert_equal(#{name: 'snoremenu', priority: 500, shortcut: '',\n        \\ display: 'snoremenu', modes: 's', enabled: v:true, silent: v:false,\n        \\ rhs: ':snoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.snoremenu', 's'))\n  call assert_equal(#{name: 'inoremenu', priority: 500, shortcut: '',\n        \\ display: 'inoremenu', modes: 'i', enabled: v:true, silent: v:true,\n        \\ rhs: ':inoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.inoremenu', 'i'))\n  call assert_equal(#{ name: 'cnoremenu', priority: 500, shortcut: '',\n        \\ display: 'cnoremenu', modes: 'c', enabled: v:true, silent: v:false,\n        \\ rhs: ':cnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.cnoremenu', 'c'))\n  call assert_equal(#{name: 'tlnoremenu', priority: 500, shortcut: '',\n        \\ display: 'tlnoremenu', modes: 'tl', enabled: v:true, silent: v:false,\n        \\ rhs: ':tlnoremenu<CR>', noremenu: v:true, script: v:false},\n        \\ menu_info('Test.tlnoremenu', 'tl'))\n  aunmenu Test\n  tlunmenu Test\n  call assert_equal({}, menu_info('Test'))\n  call assert_equal({}, menu_info('Test', '!'))\n  call assert_equal({}, menu_info('Test', 'a'))\n  call assert_equal({}, menu_info('Test', 'n'))\n  call assert_equal({}, menu_info('Test', 'o'))\n  call assert_equal({}, menu_info('Test', 'v'))\n  call assert_equal({}, menu_info('Test', 'x'))\n  call assert_equal({}, menu_info('Test', 's'))\n  call assert_equal({}, menu_info('Test', 'i'))\n  call assert_equal({}, menu_info('Test', 'c'))\n  call assert_equal({}, menu_info('Test', 't'))\n  call assert_equal({}, menu_info('Test', 'tl'))\n\n  amenu Test.amenu  :amenu<CR>\n  call assert_equal(':amenu<CR>', menu_info('Test.amenu', '').rhs)\n  call assert_equal('<C-\\><C-O>:amenu<CR>', menu_info('Test.amenu', '!').rhs)\n  call assert_equal(':amenu<CR>', menu_info('Test.amenu', 'n').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'o').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'v').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'x').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 's').rhs)\n  call assert_equal('<C-\\><C-O>:amenu<CR>', menu_info('Test.amenu', 'i').rhs)\n  call assert_equal('<C-C>:amenu<CR><C-\\><C-G>',\n        \\ menu_info('Test.amenu', 'c').rhs)\n  aunmenu Test.amenu\n\n  \" Test for hidden menus\n  menu ]Test.menu :menu<CR>\n  call assert_equal(#{name: ']Test', display: ']Test', priority: 500,\n        \\ shortcut: '', modes: ' ', submenus: ['menu']},\n        \\ menu_info(']Test'))\n  unmenu ]Test\n\n  \" Test for getting all the top-level menu names\n  call assert_notequal(menu_info('').submenus, [])\nendfunc\n\n\" Test for <special> keyword in a menu with 'cpo' containing '<'\nfunc Test_menu_special()\n  new\n  set cpo+=<\n  nmenu Test.Sign  am<Tab>n<Esc>\n  call feedkeys(\":emenu n Test.Sign\\<CR>\", 'x')\n  call assert_equal(\"m<Tab>n<Esc>\", getline(1))\n  nunmenu Test.Sign\n  nmenu <special> Test.Sign  am<Tab>n<Esc>\n  call setline(1, '')\n  call feedkeys(\":emenu n Test.Sign\\<CR>\", 'x')\n  call assert_equal(\"m\\tn\", getline(1))\n  set cpo-=<\n  close!\n  nunmenu Test.Sign\nendfunc\n\n\" Test for \"icon=filename\" in a toolbar\nfunc Test_menu_icon()\n  CheckFeature toolbar\n  nmenu icon=myicon.xpm Toolbar.Foo  :echo \"Foo\"<CR>\n  call assert_equal('myicon.xpm', \"Toolbar.Foo\"->menu_info().icon)\n  nunmenu Toolbar.Foo\n\n  \" Test for using the builtin icon\n  amenu ToolBar.BuiltIn22 :echo \"BuiltIn22\"<CR>\n  call assert_equal(#{name: 'BuiltIn22', display: 'BuiltIn22',\n        \\ enabled: v:true, shortcut: '', modes: 'a', script: v:false,\n        \\ iconidx: 22, priority: 500, silent: v:false,\n        \\ rhs: ':echo \"BuiltIn22\"<CR>', noremenu: v:false},\n        \\ menu_info(\"ToolBar.BuiltIn22\"))\n  aunmenu ToolBar.BuiltIn22\nendfunc\n\n\" Test for \":emenu\" command in different modes\nfunc Test_emenu_cmd()\n  new\n  xmenu Test.foo rx\n  call setline(1, ['aaaa', 'bbbb'])\n  normal ggVj\n  %emenu Test.foo\n  call assert_equal(['xxxx', 'xxxx'], getline(1, 2))\n  call setline(1, ['aaaa', 'bbbb'])\n  exe \"normal ggVj\\<Esc>\"\n  %emenu Test.foo\n  call assert_equal(['xxxx', 'xxxx'], getline(1, 2))\n  call setline(1, ['aaaa', 'bbbb'])\n  exe \"normal ggV\\<Esc>\"\n  2emenu Test.foo\n  call assert_equal(['aaaa', 'xxxx'], getline(1, 2))\n  xunmenu Test.foo\n  close!\nendfunc\n\n\" Test for PopUp menus\nfunc Test_popup_menu()\n  20menu PopUp.foo :echo 'foo'<CR>\n  20menu PopUp.bar :echo 'bar'<CR>\n  call assert_equal(#{name: 'PopUp', display: 'PopUp', priority: 20,\n        \\ shortcut: '', modes: ' ', submenus: ['foo', 'bar']},\n        \\ menu_info('PopUp'))\n  menu disable PopUp.bar\n  call assert_equal(v:true, \"PopUp.foo\"->menu_info().enabled)\n  call assert_equal(v:false, \"PopUp.bar\"->menu_info().enabled)\n  menu enable PopUp.bar\n  call assert_equal(v:true, \"PopUp.bar\"->menu_info().enabled)\n  unmenu PopUp\nendfunc\n\n\" Test for listing the menus using the :menu command\nfunc Test_show_menus()\n  \" In the GUI, tear-off menu items are present in the output below\n  \" So skip this test\n  CheckNotGui\n  aunmenu *\n  call assert_equal(['--- Menus ---'], split(execute('menu'), \"\\n\"))\n  nmenu <script> 200.10 Test.nmenu1 :nmenu1<CR>\n  nmenu 200.20 Test.nmenu2 :nmenu2<CR>\n  nnoremenu 200.30 Test.nmenu3 :nmenu3<CR>\n  nmenu 200.40 Test.nmenu4 :nmenu4<CR>\n  nmenu 200.50 disable Test.nmenu4\n  let exp =<< trim [TEXT]\n  --- Menus ---\n  200 Test\n    10 nmenu1\n        n&   :nmenu1<CR>\n    20 nmenu2\n        n    :nmenu2<CR>\n    30 nmenu3\n        n*   :nmenu3<CR>\n    40 nmenu4\n        n  - :nmenu4<CR>\n  [TEXT]\n  call assert_equal(exp, split(execute('nmenu'), \"\\n\"))\n  nunmenu Test\nendfunc\n\n\" Test for menu tips\nfunc Test_tmenu()\n  tunmenu *\n  call assert_equal(['--- Menus ---'], split(execute('tmenu'), \"\\n\"))\n  tmenu Test.nmenu1 nmenu1\n  tmenu Test.nmenu2.sub1 nmenu2.sub1\n  let exp =<< trim [TEXT]\n  --- Menus ---\n  500 Test\n    500 nmenu1\n        t  - nmenu1\n    500 nmenu2\n      500 sub1\n          t  - nmenu2.sub1\n  [TEXT]\n  call assert_equal(exp, split(execute('tmenu'), \"\\n\"))\n  tunmenu Test\nendfunc\n\nfunc Test_only_modifier()\n  exe \"tmenu a.b \\x80\\xfc0\"\n  let exp =<< trim [TEXT]\n  --- Menus ---\n  500 a\n    500 b\n        t  - <T-2-^@>\n  [TEXT]\n  call assert_equal(exp, split(execute('tmenu'), \"\\n\"))\n\n  tunmenu a.b\nendfunc\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    while (l < h)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "filenames": ["src/message.c", "src/testdir/test_menu.vim", "src/version.c"], "buggy_code_start_loc": [1823, 530, 737], "buggy_code_end_loc": [1825, 530, 737], "fixing_code_start_loc": [1823, 531, 738], "fixing_code_end_loc": [1825, 544, 740], "type": "CWE-125", "message": "Out-of-bounds Read in GitHub repository vim/vim prior to 9.0.", "other": {"cve": {"id": "CVE-2022-2257", "sourceIdentifier": "security@huntr.dev", "published": "2022-06-30T21:15:10.523", "lastModified": "2023-05-03T12:15:50.943", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Out-of-bounds Read in GitHub repository vim/vim prior to 9.0."}, {"lang": "es", "value": "Una Lectura Fuera de L\u00edmites en el repositorio de GitHub vim/vim versiones anteriores a 9.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim:vim:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.0009", "matchCriteriaId": "7C292EEF-CF6F-4CFF-B72F-B9D04B92E021"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}]}]}], "references": [{"url": "https://github.com/vim/vim/commit/083692d598139228e101b8c521aaef7bcf256e9a", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ca581f80-03ba-472a-b820-78f7fd05fe89", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/43Y3VJPOTTY3NTREDIFUPITM2POG4ZLP/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UXPO5EHDV6J4B27E65DOQGZFELUFPRSK/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-32", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202305-16", "source": "security@huntr.dev"}]}, "github_commit_url": "https://github.com/vim/vim/commit/083692d598139228e101b8c521aaef7bcf256e9a"}}