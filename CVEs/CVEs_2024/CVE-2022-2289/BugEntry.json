{"buggy_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * diff.c: code for diff'ing two, three or four buffers.\n *\n * There are three ways to diff:\n * - Shell out to an external diff program, using files.\n * - Use the compiled-in xdiff library.\n * - Let 'diffexpr' do the work, using files.\n */\n\n#include \"vim.h\"\n#include \"xdiff/xdiff.h\"\n\n#if defined(FEAT_DIFF) || defined(PROTO)\n\nstatic int diff_busy = FALSE;\t    // using diff structs, don't change them\nstatic int diff_need_update = FALSE; // ex_diffupdate needs to be called\n\n// flags obtained from the 'diffopt' option\n#define DIFF_FILLER\t0x001\t// display filler lines\n#define DIFF_IBLANK\t0x002\t// ignore empty lines\n#define DIFF_ICASE\t0x004\t// ignore case\n#define DIFF_IWHITE\t0x008\t// ignore change in white space\n#define DIFF_IWHITEALL\t0x010\t// ignore all white space changes\n#define DIFF_IWHITEEOL\t0x020\t// ignore change in white space at EOL\n#define DIFF_HORIZONTAL\t0x040\t// horizontal splits\n#define DIFF_VERTICAL\t0x080\t// vertical splits\n#define DIFF_HIDDEN_OFF\t0x100\t// diffoff when hidden\n#define DIFF_INTERNAL\t0x200\t// use internal xdiff algorithm\n#define DIFF_CLOSE_OFF\t0x400\t// diffoff when closing window\n#define DIFF_FOLLOWWRAP\t0x800\t// follow the wrap option\n#define ALL_WHITE_DIFF (DIFF_IWHITE | DIFF_IWHITEALL | DIFF_IWHITEEOL)\nstatic int\tdiff_flags = DIFF_INTERNAL | DIFF_FILLER | DIFF_CLOSE_OFF;\n\nstatic long diff_algorithm = 0;\n\n#define LBUFLEN 50\t\t// length of line in diff file\n\nstatic int diff_a_works = MAYBE; // TRUE when \"diff -a\" works, FALSE when it\n\t\t\t\t // doesn't work, MAYBE when not checked yet\n#if defined(MSWIN)\nstatic int diff_bin_works = MAYBE; // TRUE when \"diff --binary\" works, FALSE\n\t\t\t\t   // when it doesn't work, MAYBE when not\n\t\t\t\t   // checked yet\n#endif\n\n// used for diff input\ntypedef struct {\n    char_u\t*din_fname;  // used for external diff\n    mmfile_t\tdin_mmfile;  // used for internal diff\n} diffin_T;\n\n// used for diff result\ntypedef struct {\n    char_u\t*dout_fname;  // used for external diff\n    garray_T\tdout_ga;      // used for internal diff\n} diffout_T;\n\n// used for recording hunks from xdiff\ntypedef struct {\n    linenr_T lnum_orig;\n    long     count_orig;\n    linenr_T lnum_new;\n    long     count_new;\n} diffhunk_T;\n\n// two diff inputs and one result\ntypedef struct {\n    diffin_T\tdio_orig;     // original file input\n    diffin_T\tdio_new;      // new file input\n    diffout_T\tdio_diff;     // diff result\n    int\t\tdio_internal; // using internal diff\n} diffio_T;\n\nstatic int diff_buf_idx(buf_T *buf);\nstatic int diff_buf_idx_tp(buf_T *buf, tabpage_T *tp);\nstatic void diff_mark_adjust_tp(tabpage_T *tp, int idx, linenr_T line1, linenr_T line2, long amount, long amount_after);\nstatic void diff_check_unchanged(tabpage_T *tp, diff_T *dp);\nstatic int diff_check_sanity(tabpage_T *tp, diff_T *dp);\nstatic int check_external_diff(diffio_T *diffio);\nstatic int diff_file(diffio_T *diffio);\nstatic int diff_equal_entry(diff_T *dp, int idx1, int idx2);\nstatic int diff_cmp(char_u *s1, char_u *s2);\n#ifdef FEAT_FOLDING\nstatic void diff_fold_update(diff_T *dp, int skip_idx);\n#endif\nstatic void diff_read(int idx_orig, int idx_new, diffio_T *dio);\nstatic void diff_copy_entry(diff_T *dprev, diff_T *dp, int idx_orig, int idx_new);\nstatic diff_T *diff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp);\nstatic int parse_diff_ed(char_u *line, diffhunk_T *hunk);\nstatic int parse_diff_unified(char_u *line, diffhunk_T *hunk);\nstatic int xdiff_out(long start_a, long count_a, long start_b, long count_b, void *priv);\n\n#define FOR_ALL_DIFFBLOCKS_IN_TAB(tp, dp) \\\n    for ((dp) = (tp)->tp_first_diff; (dp) != NULL; (dp) = (dp)->df_next)\n\n/*\n * Called when deleting or unloading a buffer: No longer make a diff with it.\n */\n    void\ndiff_buf_delete(buf_T *buf)\n{\n    int\t\ti;\n    tabpage_T\t*tp;\n\n    FOR_ALL_TABPAGES(tp)\n    {\n\ti = diff_buf_idx_tp(buf, tp);\n\tif (i != DB_COUNT)\n\t{\n\t    tp->tp_diffbuf[i] = NULL;\n\t    tp->tp_diff_invalid = TRUE;\n\t    if (tp == curtab)\n\t    {\n\t\t// don't redraw right away, more might change or buffer state\n\t\t// is invalid right now\n\t\tneed_diff_redraw = TRUE;\n\t\tredraw_later(VALID);\n\t    }\n\t}\n    }\n}\n\n/*\n * Check if the current buffer should be added to or removed from the list of\n * diff buffers.\n */\n    void\ndiff_buf_adjust(win_T *win)\n{\n    win_T\t*wp;\n    int\t\ti;\n\n    if (!win->w_p_diff)\n    {\n\t// When there is no window showing a diff for this buffer, remove\n\t// it from the diffs.\n\tFOR_ALL_WINDOWS(wp)\n\t    if (wp->w_buffer == win->w_buffer && wp->w_p_diff)\n\t\tbreak;\n\tif (wp == NULL)\n\t{\n\t    i = diff_buf_idx(win->w_buffer);\n\t    if (i != DB_COUNT)\n\t    {\n\t\tcurtab->tp_diffbuf[i] = NULL;\n\t\tcurtab->tp_diff_invalid = TRUE;\n\t\tdiff_redraw(TRUE);\n\t    }\n\t}\n    }\n    else\n\tdiff_buf_add(win->w_buffer);\n}\n\n/*\n * Add a buffer to make diffs for.\n * Call this when a new buffer is being edited in the current window where\n * 'diff' is set.\n * Marks the current buffer as being part of the diff and requiring updating.\n * This must be done before any autocmd, because a command may use info\n * about the screen contents.\n */\n    void\ndiff_buf_add(buf_T *buf)\n{\n    int\t\ti;\n\n    if (diff_buf_idx(buf) != DB_COUNT)\n\treturn;\t\t// It's already there.\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] == NULL)\n\t{\n\t    curtab->tp_diffbuf[i] = buf;\n\t    curtab->tp_diff_invalid = TRUE;\n\t    diff_redraw(TRUE);\n\t    return;\n\t}\n\n    semsg(_(e_cannot_diff_more_than_nr_buffers), DB_COUNT);\n}\n\n/*\n * Remove all buffers to make diffs for.\n */\n    static void\ndiff_buf_clear(void)\n{\n    int\t\ti;\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL)\n\t{\n\t    curtab->tp_diffbuf[i] = NULL;\n\t    curtab->tp_diff_invalid = TRUE;\n\t    diff_redraw(TRUE);\n\t}\n}\n\n/*\n * Find buffer \"buf\" in the list of diff buffers for the current tab page.\n * Return its index or DB_COUNT if not found.\n */\n    static int\ndiff_buf_idx(buf_T *buf)\n{\n    int\t\tidx;\n\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (curtab->tp_diffbuf[idx] == buf)\n\t    break;\n    return idx;\n}\n\n/*\n * Find buffer \"buf\" in the list of diff buffers for tab page \"tp\".\n * Return its index or DB_COUNT if not found.\n */\n    static int\ndiff_buf_idx_tp(buf_T *buf, tabpage_T *tp)\n{\n    int\t\tidx;\n\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (tp->tp_diffbuf[idx] == buf)\n\t    break;\n    return idx;\n}\n\n/*\n * Mark the diff info involving buffer \"buf\" as invalid, it will be updated\n * when info is requested.\n */\n    void\ndiff_invalidate(buf_T *buf)\n{\n    tabpage_T\t*tp;\n    int\t\ti;\n\n    FOR_ALL_TABPAGES(tp)\n    {\n\ti = diff_buf_idx_tp(buf, tp);\n\tif (i != DB_COUNT)\n\t{\n\t    tp->tp_diff_invalid = TRUE;\n\t    if (tp == curtab)\n\t\tdiff_redraw(TRUE);\n\t}\n    }\n}\n\n/*\n * Called by mark_adjust(): update line numbers in \"curbuf\".\n */\n    void\ndiff_mark_adjust(\n    linenr_T\tline1,\n    linenr_T\tline2,\n    long\tamount,\n    long\tamount_after)\n{\n    int\t\tidx;\n    tabpage_T\t*tp;\n\n    // Handle all tab pages that use the current buffer in a diff.\n    FOR_ALL_TABPAGES(tp)\n    {\n\tidx = diff_buf_idx_tp(curbuf, tp);\n\tif (idx != DB_COUNT)\n\t    diff_mark_adjust_tp(tp, idx, line1, line2, amount, amount_after);\n    }\n}\n\n/*\n * Update line numbers in tab page \"tp\" for \"curbuf\" with index \"idx\".\n * This attempts to update the changes as much as possible:\n * When inserting/deleting lines outside of existing change blocks, create a\n * new change block and update the line numbers in following blocks.\n * When inserting/deleting lines in existing change blocks, update them.\n */\n    static void\ndiff_mark_adjust_tp(\n    tabpage_T\t*tp,\n    int\t\tidx,\n    linenr_T\tline1,\n    linenr_T\tline2,\n    long\tamount,\n    long\tamount_after)\n{\n    diff_T\t*dp;\n    diff_T\t*dprev;\n    diff_T\t*dnext;\n    int\t\ti;\n    int\t\tinserted, deleted;\n    int\t\tn, off;\n    linenr_T\tlast;\n    linenr_T\tlnum_deleted = line1;\t// lnum of remaining deletion\n    int\t\tcheck_unchanged;\n\n    if (diff_internal())\n    {\n\t// Will update diffs before redrawing.  Set _invalid to update the\n\t// diffs themselves, set _update to also update folds properly just\n\t// before redrawing.\n\t// Do update marks here, it is needed for :%diffput.\n\ttp->tp_diff_invalid = TRUE;\n\ttp->tp_diff_update = TRUE;\n    }\n\n    if (line2 == MAXLNUM)\n    {\n\t// mark_adjust(99, MAXLNUM, 9, 0): insert lines\n\tinserted = amount;\n\tdeleted = 0;\n    }\n    else if (amount_after > 0)\n    {\n\t// mark_adjust(99, 98, MAXLNUM, 9): a change that inserts lines\n\tinserted = amount_after;\n\tdeleted = 0;\n    }\n    else\n    {\n\t// mark_adjust(98, 99, MAXLNUM, -2): delete lines\n\tinserted = 0;\n\tdeleted = -amount_after;\n    }\n\n    dprev = NULL;\n    dp = tp->tp_first_diff;\n    for (;;)\n    {\n\t// If the change is after the previous diff block and before the next\n\t// diff block, thus not touching an existing change, create a new diff\n\t// block.  Don't do this when ex_diffgetput() is busy.\n\tif ((dp == NULL || dp->df_lnum[idx] - 1 > line2\n\t\t    || (line2 == MAXLNUM && dp->df_lnum[idx] > line1))\n\t\t&& (dprev == NULL\n\t\t    || dprev->df_lnum[idx] + dprev->df_count[idx] < line1)\n\t\t&& !diff_busy)\n\t{\n\t    dnext = diff_alloc_new(tp, dprev, dp);\n\t    if (dnext == NULL)\n\t\treturn;\n\n\t    dnext->df_lnum[idx] = line1;\n\t    dnext->df_count[idx] = inserted;\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (tp->tp_diffbuf[i] != NULL && i != idx)\n\t\t{\n\t\t    if (dprev == NULL)\n\t\t\tdnext->df_lnum[i] = line1;\n\t\t    else\n\t\t\tdnext->df_lnum[i] = line1\n\t\t\t    + (dprev->df_lnum[i] + dprev->df_count[i])\n\t\t\t    - (dprev->df_lnum[idx] + dprev->df_count[idx]);\n\t\t    dnext->df_count[i] = deleted;\n\t\t}\n\t}\n\n\t// if at end of the list, quit\n\tif (dp == NULL)\n\t    break;\n\n\t/*\n\t * Check for these situations:\n\t *\t  1  2\t3\n\t *\t  1  2\t3\n\t * line1     2\t3  4  5\n\t *\t     2\t3  4  5\n\t *\t     2\t3  4  5\n\t * line2     2\t3  4  5\n\t *\t\t3     5  6\n\t *\t\t3     5  6\n\t */\n\t// compute last line of this change\n\tlast = dp->df_lnum[idx] + dp->df_count[idx] - 1;\n\n\t// 1. change completely above line1: nothing to do\n\tif (last >= line1 - 1)\n\t{\n\t    // 6. change below line2: only adjust for amount_after; also when\n\t    // \"deleted\" became zero when deleted all lines between two diffs\n\t    if (dp->df_lnum[idx] - (deleted + inserted != 0) > line2)\n\t    {\n\t\tif (amount_after == 0)\n\t\t    break;\t// nothing left to change\n\t\tdp->df_lnum[idx] += amount_after;\n\t    }\n\t    else\n\t    {\n\t\tcheck_unchanged = FALSE;\n\n\t\t// 2. 3. 4. 5.: inserted/deleted lines touching this diff.\n\t\tif (deleted > 0)\n\t\t{\n\t\t    off = 0;\n\t\t    if (dp->df_lnum[idx] >= line1)\n\t\t    {\n\t\t\tif (last <= line2)\n\t\t\t{\n\t\t\t    // 4. delete all lines of diff\n\t\t\t    if (dp->df_next != NULL\n\t\t\t\t    && dp->df_next->df_lnum[idx] - 1 <= line2)\n\t\t\t    {\n\t\t\t\t// delete continues in next diff, only do\n\t\t\t\t// lines until that one\n\t\t\t\tn = dp->df_next->df_lnum[idx] - lnum_deleted;\n\t\t\t\tdeleted -= n;\n\t\t\t\tn -= dp->df_count[idx];\n\t\t\t\tlnum_deleted = dp->df_next->df_lnum[idx];\n\t\t\t    }\n\t\t\t    else\n\t\t\t\tn = deleted - dp->df_count[idx];\n\t\t\t    dp->df_count[idx] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    // 5. delete lines at or just before top of diff\n\t\t\t    off = dp->df_lnum[idx] - lnum_deleted;\n\t\t\t    n = off;\n\t\t\t    dp->df_count[idx] -= line2 - dp->df_lnum[idx] + 1;\n\t\t\t    check_unchanged = TRUE;\n\t\t\t}\n\t\t\tdp->df_lnum[idx] = line1;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tif (last < line2)\n\t\t\t{\n\t\t\t    // 2. delete at end of diff\n\t\t\t    dp->df_count[idx] -= last - lnum_deleted + 1;\n\t\t\t    if (dp->df_next != NULL\n\t\t\t\t    && dp->df_next->df_lnum[idx] - 1 <= line2)\n\t\t\t    {\n\t\t\t\t// delete continues in next diff, only do\n\t\t\t\t// lines until that one\n\t\t\t\tn = dp->df_next->df_lnum[idx] - 1 - last;\n\t\t\t\tdeleted -= dp->df_next->df_lnum[idx]\n\t\t\t\t\t\t\t       - lnum_deleted;\n\t\t\t\tlnum_deleted = dp->df_next->df_lnum[idx];\n\t\t\t    }\n\t\t\t    else\n\t\t\t\tn = line2 - last;\n\t\t\t    check_unchanged = TRUE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    // 3. delete lines inside the diff\n\t\t\t    n = 0;\n\t\t\t    dp->df_count[idx] -= deleted;\n\t\t\t}\n\t\t    }\n\n\t\t    for (i = 0; i < DB_COUNT; ++i)\n\t\t\tif (tp->tp_diffbuf[i] != NULL && i != idx)\n\t\t\t{\n\t\t\t    dp->df_lnum[i] -= off;\n\t\t\t    dp->df_count[i] += n;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (dp->df_lnum[idx] <= line1)\n\t\t    {\n\t\t\t// inserted lines somewhere in this diff\n\t\t\tdp->df_count[idx] += inserted;\n\t\t\tcheck_unchanged = TRUE;\n\t\t    }\n\t\t    else\n\t\t\t// inserted lines somewhere above this diff\n\t\t\tdp->df_lnum[idx] += inserted;\n\t\t}\n\n\t\tif (check_unchanged)\n\t\t    // Check if inserted lines are equal, may reduce the\n\t\t    // size of the diff.  TODO: also check for equal lines\n\t\t    // in the middle and perhaps split the block.\n\t\t    diff_check_unchanged(tp, dp);\n\t    }\n\t}\n\n\t// check if this block touches the previous one, may merge them.\n\tif (dprev != NULL && dprev->df_lnum[idx] + dprev->df_count[idx]\n\t\t\t\t\t\t\t  == dp->df_lnum[idx])\n\t{\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (tp->tp_diffbuf[i] != NULL)\n\t\t    dprev->df_count[i] += dp->df_count[i];\n\t    dprev->df_next = dp->df_next;\n\t    vim_free(dp);\n\t    dp = dprev->df_next;\n\t}\n\telse\n\t{\n\t    // Advance to next entry.\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n    }\n\n    dprev = NULL;\n    dp = tp->tp_first_diff;\n    while (dp != NULL)\n    {\n\t// All counts are zero, remove this entry.\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (tp->tp_diffbuf[i] != NULL && dp->df_count[i] != 0)\n\t\tbreak;\n\tif (i == DB_COUNT)\n\t{\n\t    dnext = dp->df_next;\n\t    vim_free(dp);\n\t    dp = dnext;\n\t    if (dprev == NULL)\n\t\ttp->tp_first_diff = dnext;\n\t    else\n\t\tdprev->df_next = dnext;\n\t}\n\telse\n\t{\n\t    // Advance to next entry.\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n\n    }\n\n    if (tp == curtab)\n    {\n\t// Don't redraw right away, this updates the diffs, which can be slow.\n\tneed_diff_redraw = TRUE;\n\n\t// Need to recompute the scroll binding, may remove or add filler\n\t// lines (e.g., when adding lines above w_topline). But it's slow when\n\t// making many changes, postpone until redrawing.\n\tdiff_need_scrollbind = TRUE;\n    }\n}\n\n/*\n * Allocate a new diff block and link it between \"dprev\" and \"dp\".\n */\n    static diff_T *\ndiff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp)\n{\n    diff_T\t*dnew;\n\n    dnew = ALLOC_ONE(diff_T);\n    if (dnew != NULL)\n    {\n\tdnew->df_next = dp;\n\tif (dprev == NULL)\n\t    tp->tp_first_diff = dnew;\n\telse\n\t    dprev->df_next = dnew;\n    }\n    return dnew;\n}\n\n/*\n * Check if the diff block \"dp\" can be made smaller for lines at the start and\n * end that are equal.  Called after inserting lines.\n * This may result in a change where all buffers have zero lines, the caller\n * must take care of removing it.\n */\n    static void\ndiff_check_unchanged(tabpage_T *tp, diff_T *dp)\n{\n    int\t\ti_org;\n    int\t\ti_new;\n    int\t\toff_org, off_new;\n    char_u\t*line_org;\n    int\t\tdir = FORWARD;\n\n    // Find the first buffers, use it as the original, compare the other\n    // buffer lines against this one.\n    for (i_org = 0; i_org < DB_COUNT; ++i_org)\n\tif (tp->tp_diffbuf[i_org] != NULL)\n\t    break;\n    if (i_org == DB_COUNT)\t// safety check\n\treturn;\n\n    if (diff_check_sanity(tp, dp) == FAIL)\n\treturn;\n\n    // First check lines at the top, then at the bottom.\n    off_org = 0;\n    off_new = 0;\n    for (;;)\n    {\n\t// Repeat until a line is found which is different or the number of\n\t// lines has become zero.\n\twhile (dp->df_count[i_org] > 0)\n\t{\n\t    // Copy the line, the next ml_get() will invalidate it.\n\t    if (dir == BACKWARD)\n\t\toff_org = dp->df_count[i_org] - 1;\n\t    line_org = vim_strsave(ml_get_buf(tp->tp_diffbuf[i_org],\n\t\t\t\t\tdp->df_lnum[i_org] + off_org, FALSE));\n\t    if (line_org == NULL)\n\t\treturn;\n\t    for (i_new = i_org + 1; i_new < DB_COUNT; ++i_new)\n\t    {\n\t\tif (tp->tp_diffbuf[i_new] == NULL)\n\t\t    continue;\n\t\tif (dir == BACKWARD)\n\t\t    off_new = dp->df_count[i_new] - 1;\n\t\t// if other buffer doesn't have this line, it was inserted\n\t\tif (off_new < 0 || off_new >= dp->df_count[i_new])\n\t\t    break;\n\t\tif (diff_cmp(line_org, ml_get_buf(tp->tp_diffbuf[i_new],\n\t\t\t\t   dp->df_lnum[i_new] + off_new, FALSE)) != 0)\n\t\t    break;\n\t    }\n\t    vim_free(line_org);\n\n\t    // Stop when a line isn't equal in all diff buffers.\n\t    if (i_new != DB_COUNT)\n\t\tbreak;\n\n\t    // Line matched in all buffers, remove it from the diff.\n\t    for (i_new = i_org; i_new < DB_COUNT; ++i_new)\n\t\tif (tp->tp_diffbuf[i_new] != NULL)\n\t\t{\n\t\t    if (dir == FORWARD)\n\t\t\t++dp->df_lnum[i_new];\n\t\t    --dp->df_count[i_new];\n\t\t}\n\t}\n\tif (dir == BACKWARD)\n\t    break;\n\tdir = BACKWARD;\n    }\n}\n\n/*\n * Check if a diff block doesn't contain invalid line numbers.\n * This can happen when the diff program returns invalid results.\n */\n    static int\ndiff_check_sanity(tabpage_T *tp, diff_T *dp)\n{\n    int\t\ti;\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (tp->tp_diffbuf[i] != NULL)\n\t    if (dp->df_lnum[i] + dp->df_count[i] - 1\n\t\t\t\t      > tp->tp_diffbuf[i]->b_ml.ml_line_count)\n\t\treturn FAIL;\n    return OK;\n}\n\n/*\n * Mark all diff buffers in the current tab page for redraw.\n */\n    void\ndiff_redraw(\n    int\t\tdofold)\t    // also recompute the folds\n{\n    win_T\t*wp;\n    win_T\t*wp_other = NULL;\n    int\t\tused_max_fill_other = FALSE;\n    int\t\tused_max_fill_curwin = FALSE;\n    int\t\tn;\n\n    need_diff_redraw = FALSE;\n    FOR_ALL_WINDOWS(wp)\n\t// when closing windows or wiping buffers skip invalid window\n\tif (wp->w_p_diff && buf_valid(wp->w_buffer))\n\t{\n\t    redraw_win_later(wp, SOME_VALID);\n\t    if (wp != curwin)\n\t\twp_other = wp;\n#ifdef FEAT_FOLDING\n\t    if (dofold && foldmethodIsDiff(wp))\n\t\tfoldUpdateAll(wp);\n#endif\n\t    // A change may have made filler lines invalid, need to take care\n\t    // of that for other windows.\n\t    n = diff_check(wp, wp->w_topline);\n\t    if ((wp != curwin && wp->w_topfill > 0) || n > 0)\n\t    {\n\t\tif (wp->w_topfill > n)\n\t\t    wp->w_topfill = (n < 0 ? 0 : n);\n\t\telse if (n > 0 && n > wp->w_topfill)\n\t\t{\n\t\t    wp->w_topfill = n;\n\t\t    if (wp == curwin)\n\t\t\tused_max_fill_curwin = TRUE;\n\t\t    else if (wp_other != NULL)\n\t\t\tused_max_fill_other = TRUE;\n\t\t}\n\t\tcheck_topfill(wp, FALSE);\n\t    }\n\t}\n\n    if (wp_other != NULL && curwin->w_p_scb)\n    {\n\tif (used_max_fill_curwin)\n\t    // The current window was set to use the maximum number of filler\n\t    // lines, may need to reduce them.\n\t    diff_set_topline(wp_other, curwin);\n\telse if (used_max_fill_other)\n\t    // The other window was set to use the maximum number of filler\n\t    // lines, may need to reduce them.\n\t    diff_set_topline(curwin, wp_other);\n    }\n}\n\n    static void\nclear_diffin(diffin_T *din)\n{\n    if (din->din_fname == NULL)\n    {\n\tvim_free(din->din_mmfile.ptr);\n\tdin->din_mmfile.ptr = NULL;\n    }\n    else\n\tmch_remove(din->din_fname);\n}\n\n    static void\nclear_diffout(diffout_T *dout)\n{\n    if (dout->dout_fname == NULL)\n\tga_clear_strings(&dout->dout_ga);\n    else\n\tmch_remove(dout->dout_fname);\n}\n\n/*\n * Write buffer \"buf\" to a memory buffer.\n * Return FAIL for failure.\n */\n    static int\ndiff_write_buffer(buf_T *buf, diffin_T *din)\n{\n    linenr_T\tlnum;\n    char_u\t*s;\n    long\tlen = 0;\n    char_u\t*ptr;\n\n    // xdiff requires one big block of memory with all the text.\n    for (lnum = 1; lnum <= buf->b_ml.ml_line_count; ++lnum)\n\tlen += (long)STRLEN(ml_get_buf(buf, lnum, FALSE)) + 1;\n    ptr = alloc(len);\n    if (ptr == NULL)\n    {\n\t// Allocating memory failed.  This can happen, because we try to read\n\t// the whole buffer text into memory.  Set the failed flag, the diff\n\t// will be retried with external diff.  The flag is never reset.\n\tbuf->b_diff_failed = TRUE;\n\tif (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"Not enough memory to use internal diff for buffer \\\"%s\\\"\"),\n\t\t\t\t\t\t\t\t buf->b_fname);\n\t    verbose_leave();\n\t}\n\treturn FAIL;\n    }\n    din->din_mmfile.ptr = (char *)ptr;\n    din->din_mmfile.size = len;\n\n    len = 0;\n    for (lnum = 1; lnum <= buf->b_ml.ml_line_count; ++lnum)\n    {\n\tfor (s = ml_get_buf(buf, lnum, FALSE); *s != NUL; )\n\t{\n\t    if (diff_flags & DIFF_ICASE)\n\t    {\n\t\tint c;\n\t\tint\torig_len;\n\t\tchar_u\tcbuf[MB_MAXBYTES + 1];\n\n\t\tif (*s == NL)\n\t\t    c = NUL;\n\t\telse\n\t\t{\n\t\t    // xdiff doesn't support ignoring case, fold-case the text.\n\t\t    c = PTR2CHAR(s);\n\t\t    c = MB_CASEFOLD(c);\n\t\t}\n\t\torig_len = mb_ptr2len(s);\n\t\tif (mb_char2bytes(c, cbuf) != orig_len)\n\t\t    // TODO: handle byte length difference\n\t\t    mch_memmove(ptr + len, s, orig_len);\n\t\telse\n\t\t    mch_memmove(ptr + len, cbuf, orig_len);\n\n\t\ts += orig_len;\n\t\tlen += orig_len;\n\t    }\n\t    else\n\t    {\n\t\tptr[len++] = *s == NL ? NUL : *s;\n\t\ts++;\n\t    }\n\t}\n\tptr[len++] = NL;\n    }\n    return OK;\n}\n\n/*\n * Write buffer \"buf\" to file or memory buffer.\n * Return FAIL for failure.\n */\n    static int\ndiff_write(buf_T *buf, diffin_T *din)\n{\n    int\t\tr;\n    char_u\t*save_ff;\n    int\t\tsave_cmod_flags;\n\n    if (din->din_fname == NULL)\n\treturn diff_write_buffer(buf, din);\n\n    // Always use 'fileformat' set to \"unix\".\n    save_ff = buf->b_p_ff;\n    buf->b_p_ff = vim_strsave((char_u *)FF_UNIX);\n    save_cmod_flags = cmdmod.cmod_flags;\n    // Writing the buffer is an implementation detail of performing the diff,\n    // so it shouldn't update the '[ and '] marks.\n    cmdmod.cmod_flags |= CMOD_LOCKMARKS;\n    r = buf_write(buf, din->din_fname, NULL,\n\t\t\t(linenr_T)1, buf->b_ml.ml_line_count,\n\t\t\tNULL, FALSE, FALSE, FALSE, TRUE);\n    cmdmod.cmod_flags = save_cmod_flags;\n    free_string_option(buf->b_p_ff);\n    buf->b_p_ff = save_ff;\n    return r;\n}\n\n/*\n * Update the diffs for all buffers involved.\n */\n    static void\ndiff_try_update(\n\tdiffio_T    *dio,\n\tint\t    idx_orig,\n\texarg_T\t    *eap)\t// \"eap\" can be NULL\n{\n    buf_T\t*buf;\n    int\t\tidx_new;\n\n    if (dio->dio_internal)\n    {\n\tga_init2(&dio->dio_diff.dout_ga, sizeof(char *), 1000);\n    }\n    else\n    {\n\t// We need three temp file names.\n\tdio->dio_orig.din_fname = vim_tempname('o', TRUE);\n\tdio->dio_new.din_fname = vim_tempname('n', TRUE);\n\tdio->dio_diff.dout_fname = vim_tempname('d', TRUE);\n\tif (dio->dio_orig.din_fname == NULL\n\t\t|| dio->dio_new.din_fname == NULL\n\t\t|| dio->dio_diff.dout_fname == NULL)\n\t    goto theend;\n    }\n\n    // Check external diff is actually working.\n    if (!dio->dio_internal && check_external_diff(dio) == FAIL)\n\tgoto theend;\n\n    // :diffupdate!\n    if (eap != NULL && eap->forceit)\n\tfor (idx_new = idx_orig; idx_new < DB_COUNT; ++idx_new)\n\t{\n\t    buf = curtab->tp_diffbuf[idx_new];\n\t    if (buf_valid(buf))\n\t\tbuf_check_timestamp(buf, FALSE);\n\t}\n\n    // Write the first buffer to a tempfile or mmfile_t.\n    buf = curtab->tp_diffbuf[idx_orig];\n    if (diff_write(buf, &dio->dio_orig) == FAIL)\n\tgoto theend;\n\n    // Make a difference between the first buffer and every other.\n    for (idx_new = idx_orig + 1; idx_new < DB_COUNT; ++idx_new)\n    {\n\tbuf = curtab->tp_diffbuf[idx_new];\n\tif (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\t    continue; // skip buffer that isn't loaded\n\n\t// Write the other buffer and diff with the first one.\n\tif (diff_write(buf, &dio->dio_new) == FAIL)\n\t    continue;\n\tif (diff_file(dio) == FAIL)\n\t    continue;\n\n\t// Read the diff output and add each entry to the diff list.\n\tdiff_read(idx_orig, idx_new, dio);\n\n\tclear_diffin(&dio->dio_new);\n\tclear_diffout(&dio->dio_diff);\n    }\n    clear_diffin(&dio->dio_orig);\n\ntheend:\n    vim_free(dio->dio_orig.din_fname);\n    vim_free(dio->dio_new.din_fname);\n    vim_free(dio->dio_diff.dout_fname);\n}\n\n/*\n * Return TRUE if the options are set to use the internal diff library.\n * Note that if the internal diff failed for one of the buffers, the external\n * diff will be used anyway.\n */\n    int\ndiff_internal(void)\n{\n    return (diff_flags & DIFF_INTERNAL) != 0\n#ifdef FEAT_EVAL\n\t&& *p_dex == NUL\n#endif\n\t;\n}\n\n/*\n * Return TRUE if the internal diff failed for one of the diff buffers.\n */\n    static int\ndiff_internal_failed(void)\n{\n    int idx;\n\n    // Only need to do something when there is another buffer.\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (curtab->tp_diffbuf[idx] != NULL\n\t\t&& curtab->tp_diffbuf[idx]->b_diff_failed)\n\t    return TRUE;\n    return FALSE;\n}\n\n/*\n * Completely update the diffs for the buffers involved.\n * When using the external \"diff\" command the buffers are written to a file,\n * also for unmodified buffers (the file could have been produced by\n * autocommands, e.g. the netrw plugin).\n */\n    void\nex_diffupdate(exarg_T *eap)\t// \"eap\" can be NULL\n{\n    int\t\tidx_orig;\n    int\t\tidx_new;\n    diffio_T\tdiffio;\n    int\t\thad_diffs = curtab->tp_first_diff != NULL;\n\n    if (diff_busy)\n    {\n\tdiff_need_update = TRUE;\n\treturn;\n    }\n\n    // Delete all diffblocks.\n    diff_clear(curtab);\n    curtab->tp_diff_invalid = FALSE;\n\n    // Use the first buffer as the original text.\n    for (idx_orig = 0; idx_orig < DB_COUNT; ++idx_orig)\n\tif (curtab->tp_diffbuf[idx_orig] != NULL)\n\t    break;\n    if (idx_orig == DB_COUNT)\n\tgoto theend;\n\n    // Only need to do something when there is another buffer.\n    for (idx_new = idx_orig + 1; idx_new < DB_COUNT; ++idx_new)\n\tif (curtab->tp_diffbuf[idx_new] != NULL)\n\t    break;\n    if (idx_new == DB_COUNT)\n\tgoto theend;\n\n    // Only use the internal method if it did not fail for one of the buffers.\n    CLEAR_FIELD(diffio);\n    diffio.dio_internal = diff_internal() && !diff_internal_failed();\n\n    diff_try_update(&diffio, idx_orig, eap);\n    if (diffio.dio_internal && diff_internal_failed())\n    {\n\t// Internal diff failed, use external diff instead.\n\tCLEAR_FIELD(diffio);\n\tdiff_try_update(&diffio, idx_orig, eap);\n    }\n\n    // force updating cursor position on screen\n    curwin->w_valid_cursor.lnum = 0;\n\ntheend:\n    // A redraw is needed if there were diffs and they were cleared, or there\n    // are diffs now, which means they got updated.\n    if (had_diffs || curtab->tp_first_diff != NULL)\n    {\n\tdiff_redraw(TRUE);\n\tapply_autocmds(EVENT_DIFFUPDATED, NULL, NULL, FALSE, curbuf);\n    }\n}\n\n/*\n * Do a quick test if \"diff\" really works.  Otherwise it looks like there\n * are no differences.  Can't use the return value, it's non-zero when\n * there are differences.\n */\n    static int\ncheck_external_diff(diffio_T *diffio)\n{\n    FILE\t*fd;\n    int\t\tok;\n    int\t\tio_error = FALSE;\n\n    // May try twice, first with \"-a\" and then without.\n    for (;;)\n    {\n\tok = FALSE;\n\tfd = mch_fopen((char *)diffio->dio_orig.din_fname, \"w\");\n\tif (fd == NULL)\n\t    io_error = TRUE;\n\telse\n\t{\n\t    if (fwrite(\"line1\\n\", (size_t)6, (size_t)1, fd) != 1)\n\t\tio_error = TRUE;\n\t    fclose(fd);\n\t    fd = mch_fopen((char *)diffio->dio_new.din_fname, \"w\");\n\t    if (fd == NULL)\n\t\tio_error = TRUE;\n\t    else\n\t    {\n\t\tif (fwrite(\"line2\\n\", (size_t)6, (size_t)1, fd) != 1)\n\t\t    io_error = TRUE;\n\t\tfclose(fd);\n\t\tfd = NULL;\n\t\tif (diff_file(diffio) == OK)\n\t\t    fd = mch_fopen((char *)diffio->dio_diff.dout_fname, \"r\");\n\t\tif (fd == NULL)\n\t\t    io_error = TRUE;\n\t\telse\n\t\t{\n\t\t    char_u\tlinebuf[LBUFLEN];\n\n\t\t    for (;;)\n\t\t    {\n\t\t\t// For normal diff there must be a line that contains\n\t\t\t// \"1c1\".  For unified diff \"@@ -1 +1 @@\".\n\t\t\tif (vim_fgets(linebuf, LBUFLEN, fd))\n\t\t\t    break;\n\t\t\tif (STRNCMP(linebuf, \"1c1\", 3) == 0\n\t\t\t\t|| STRNCMP(linebuf, \"@@ -1 +1 @@\", 11) == 0)\n\t\t\t    ok = TRUE;\n\t\t    }\n\t\t    fclose(fd);\n\t\t}\n\t\tmch_remove(diffio->dio_diff.dout_fname);\n\t\tmch_remove(diffio->dio_new.din_fname);\n\t    }\n\t    mch_remove(diffio->dio_orig.din_fname);\n\t}\n\n#ifdef FEAT_EVAL\n\t// When using 'diffexpr' break here.\n\tif (*p_dex != NUL)\n\t    break;\n#endif\n\n#if defined(MSWIN)\n\t// If the \"-a\" argument works, also check if \"--binary\" works.\n\tif (ok && diff_a_works == MAYBE && diff_bin_works == MAYBE)\n\t{\n\t    diff_a_works = TRUE;\n\t    diff_bin_works = TRUE;\n\t    continue;\n\t}\n\tif (!ok && diff_a_works == TRUE && diff_bin_works == TRUE)\n\t{\n\t    // Tried --binary, but it failed. \"-a\" works though.\n\t    diff_bin_works = FALSE;\n\t    ok = TRUE;\n\t}\n#endif\n\n\t// If we checked if \"-a\" works already, break here.\n\tif (diff_a_works != MAYBE)\n\t    break;\n\tdiff_a_works = ok;\n\n\t// If \"-a\" works break here, otherwise retry without \"-a\".\n\tif (ok)\n\t    break;\n    }\n    if (!ok)\n    {\n\tif (io_error)\n\t    emsg(_(e_cannot_read_or_write_temp_files));\n\temsg(_(e_cannot_create_diffs));\n\tdiff_a_works = MAYBE;\n#if defined(MSWIN)\n\tdiff_bin_works = MAYBE;\n#endif\n\treturn FAIL;\n    }\n    return OK;\n}\n\n/*\n * Invoke the xdiff function.\n */\n    static int\ndiff_file_internal(diffio_T *diffio)\n{\n    xpparam_t\t    param;\n    xdemitconf_t    emit_cfg;\n    xdemitcb_t\t    emit_cb;\n\n    CLEAR_FIELD(param);\n    CLEAR_FIELD(emit_cfg);\n    CLEAR_FIELD(emit_cb);\n\n    param.flags = diff_algorithm;\n\n    if (diff_flags & DIFF_IWHITE)\n\tparam.flags |= XDF_IGNORE_WHITESPACE_CHANGE;\n    if (diff_flags & DIFF_IWHITEALL)\n\tparam.flags |= XDF_IGNORE_WHITESPACE;\n    if (diff_flags & DIFF_IWHITEEOL)\n\tparam.flags |= XDF_IGNORE_WHITESPACE_AT_EOL;\n    if (diff_flags & DIFF_IBLANK)\n\tparam.flags |= XDF_IGNORE_BLANK_LINES;\n\n    emit_cfg.ctxlen = 0; // don't need any diff_context here\n    emit_cb.priv = &diffio->dio_diff;\n    emit_cfg.hunk_func = xdiff_out;\n    if (xdl_diff(&diffio->dio_orig.din_mmfile,\n\t\t&diffio->dio_new.din_mmfile,\n\t\t&param, &emit_cfg, &emit_cb) < 0)\n    {\n\temsg(_(e_problem_creating_internal_diff));\n\treturn FAIL;\n    }\n    return OK;\n}\n\n/*\n * Make a diff between files \"tmp_orig\" and \"tmp_new\", results in \"tmp_diff\".\n * return OK or FAIL;\n */\n    static int\ndiff_file(diffio_T *dio)\n{\n    char_u\t*cmd;\n    size_t\tlen;\n    char_u\t*tmp_orig = dio->dio_orig.din_fname;\n    char_u\t*tmp_new = dio->dio_new.din_fname;\n    char_u\t*tmp_diff = dio->dio_diff.dout_fname;\n\n#ifdef FEAT_EVAL\n    if (*p_dex != NUL)\n    {\n\t// Use 'diffexpr' to generate the diff file.\n\teval_diff(tmp_orig, tmp_new, tmp_diff);\n\treturn OK;\n    }\n    else\n#endif\n    // Use xdiff for generating the diff.\n    if (dio->dio_internal)\n    {\n\treturn diff_file_internal(dio);\n    }\n    else\n    {\n\tlen = STRLEN(tmp_orig) + STRLEN(tmp_new)\n\t\t\t\t      + STRLEN(tmp_diff) + STRLEN(p_srr) + 27;\n\tcmd = alloc(len);\n\tif (cmd == NULL)\n\t    return FAIL;\n\n\t// We don't want $DIFF_OPTIONS to get in the way.\n\tif (getenv(\"DIFF_OPTIONS\"))\n\t    vim_setenv((char_u *)\"DIFF_OPTIONS\", (char_u *)\"\");\n\n\t// Build the diff command and execute it.  Always use -a, binary\n\t// differences are of no use.  Ignore errors, diff returns\n\t// non-zero when differences have been found.\n\tvim_snprintf((char *)cmd, len, \"diff %s%s%s%s%s%s%s%s %s\",\n\t\tdiff_a_works == FALSE ? \"\" : \"-a \",\n#if defined(MSWIN)\n\t\tdiff_bin_works == TRUE ? \"--binary \" : \"\",\n#else\n\t\t\"\",\n#endif\n\t\t(diff_flags & DIFF_IWHITE) ? \"-b \" : \"\",\n\t\t(diff_flags & DIFF_IWHITEALL) ? \"-w \" : \"\",\n\t\t(diff_flags & DIFF_IWHITEEOL) ? \"-Z \" : \"\",\n\t\t(diff_flags & DIFF_IBLANK) ? \"-B \" : \"\",\n\t\t(diff_flags & DIFF_ICASE) ? \"-i \" : \"\",\n\t\ttmp_orig, tmp_new);\n\tappend_redir(cmd, (int)len, p_srr, tmp_diff);\n\tblock_autocmds();\t// avoid ShellCmdPost stuff\n\t(void)call_shell(cmd, SHELL_FILTER|SHELL_SILENT|SHELL_DOOUT);\n\tunblock_autocmds();\n\tvim_free(cmd);\n\treturn OK;\n    }\n}\n\n/*\n * Create a new version of a file from the current buffer and a diff file.\n * The buffer is written to a file, also for unmodified buffers (the file\n * could have been produced by autocommands, e.g. the netrw plugin).\n */\n    void\nex_diffpatch(exarg_T *eap)\n{\n    char_u\t*tmp_orig;\t// name of original temp file\n    char_u\t*tmp_new;\t// name of patched temp file\n    char_u\t*buf = NULL;\n    size_t\tbuflen;\n    win_T\t*old_curwin = curwin;\n    char_u\t*newname = NULL;\t// name of patched file buffer\n#ifdef UNIX\n    char_u\tdirbuf[MAXPATHL];\n    char_u\t*fullname = NULL;\n#endif\n#ifdef FEAT_BROWSE\n    char_u\t*browseFile = NULL;\n    int\t\tsave_cmod_flags = cmdmod.cmod_flags;\n#endif\n    stat_T\tst;\n    char_u\t*esc_name = NULL;\n\n#ifdef FEAT_BROWSE\n    if (cmdmod.cmod_flags & CMOD_BROWSE)\n    {\n\tbrowseFile = do_browse(0, (char_u *)_(\"Patch file\"),\n\t\t\t eap->arg, NULL, NULL,\n\t\t\t (char_u *)_(BROWSE_FILTER_ALL_FILES), NULL);\n\tif (browseFile == NULL)\n\t    return;\t\t// operation cancelled\n\teap->arg = browseFile;\n\tcmdmod.cmod_flags &= ~CMOD_BROWSE; // don't let do_ecmd() browse again\n    }\n#endif\n\n    // We need two temp file names.\n    tmp_orig = vim_tempname('o', FALSE);\n    tmp_new = vim_tempname('n', FALSE);\n    if (tmp_orig == NULL || tmp_new == NULL)\n\tgoto theend;\n\n    // Write the current buffer to \"tmp_orig\".\n    if (buf_write(curbuf, tmp_orig, NULL,\n\t\t(linenr_T)1, curbuf->b_ml.ml_line_count,\n\t\t\t\t     NULL, FALSE, FALSE, FALSE, TRUE) == FAIL)\n\tgoto theend;\n\n#ifdef UNIX\n    // Get the absolute path of the patchfile, changing directory below.\n    fullname = FullName_save(eap->arg, FALSE);\n#endif\n    esc_name = vim_strsave_shellescape(\n# ifdef UNIX\n\t\t    fullname != NULL ? fullname :\n# endif\n\t\t    eap->arg, TRUE, TRUE);\n    if (esc_name == NULL)\n\tgoto theend;\n    buflen = STRLEN(tmp_orig) + STRLEN(esc_name) + STRLEN(tmp_new) + 16;\n    buf = alloc(buflen);\n    if (buf == NULL)\n\tgoto theend;\n\n#ifdef UNIX\n    // Temporarily chdir to /tmp, to avoid patching files in the current\n    // directory when the patch file contains more than one patch.  When we\n    // have our own temp dir use that instead, it will be cleaned up when we\n    // exit (any .rej files created).  Don't change directory if we can't\n    // return to the current.\n    if (mch_dirname(dirbuf, MAXPATHL) != OK || mch_chdir((char *)dirbuf) != 0)\n\tdirbuf[0] = NUL;\n    else\n    {\n# ifdef TEMPDIRNAMES\n\tif (vim_tempdir != NULL)\n\t    vim_ignored = mch_chdir((char *)vim_tempdir);\n\telse\n# endif\n\t    vim_ignored = mch_chdir(\"/tmp\");\n\tshorten_fnames(TRUE);\n    }\n#endif\n\n#ifdef FEAT_EVAL\n    if (*p_pex != NUL)\n\t// Use 'patchexpr' to generate the new file.\n\teval_patch(tmp_orig,\n# ifdef UNIX\n\t\tfullname != NULL ? fullname :\n# endif\n\t\teap->arg, tmp_new);\n    else\n#endif\n    {\n\t// Build the patch command and execute it.  Ignore errors.  Switch to\n\t// cooked mode to allow the user to respond to prompts.\n\tvim_snprintf((char *)buf, buflen, \"patch -o %s %s < %s\",\n\t\t\t\t\t\t  tmp_new, tmp_orig, esc_name);\n\tblock_autocmds();\t// Avoid ShellCmdPost stuff\n\t(void)call_shell(buf, SHELL_FILTER | SHELL_COOKED);\n\tunblock_autocmds();\n    }\n\n#ifdef UNIX\n    if (dirbuf[0] != NUL)\n    {\n\tif (mch_chdir((char *)dirbuf) != 0)\n\t    emsg(_(e_cannot_go_back_to_previous_directory));\n\tshorten_fnames(TRUE);\n    }\n#endif\n\n    // patch probably has written over the screen\n    redraw_later(CLEAR);\n\n    // Delete any .orig or .rej file created.\n    STRCPY(buf, tmp_new);\n    STRCAT(buf, \".orig\");\n    mch_remove(buf);\n    STRCPY(buf, tmp_new);\n    STRCAT(buf, \".rej\");\n    mch_remove(buf);\n\n    // Only continue if the output file was created.\n    if (mch_stat((char *)tmp_new, &st) < 0 || st.st_size == 0)\n\temsg(_(e_cannot_read_patch_output));\n    else\n    {\n\tif (curbuf->b_fname != NULL)\n\t{\n\t    newname = vim_strnsave(curbuf->b_fname,\n\t\t\t\t\t\t  STRLEN(curbuf->b_fname) + 4);\n\t    if (newname != NULL)\n\t\tSTRCAT(newname, \".new\");\n\t}\n\n#ifdef FEAT_GUI\n\tneed_mouse_correct = TRUE;\n#endif\n\t// don't use a new tab page, each tab page has its own diffs\n\tcmdmod.cmod_tab = 0;\n\n\tif (win_split(0, (diff_flags & DIFF_VERTICAL) ? WSP_VERT : 0) != FAIL)\n\t{\n\t    // Pretend it was a \":split fname\" command\n\t    eap->cmdidx = CMD_split;\n\t    eap->arg = tmp_new;\n\t    do_exedit(eap, old_curwin);\n\n\t    // check that split worked and editing tmp_new\n\t    if (curwin != old_curwin && win_valid(old_curwin))\n\t    {\n\t\t// Set 'diff', 'scrollbind' on and 'wrap' off.\n\t\tdiff_win_options(curwin, TRUE);\n\t\tdiff_win_options(old_curwin, TRUE);\n\n\t\tif (newname != NULL)\n\t\t{\n\t\t    // do a \":file filename.new\" on the patched buffer\n\t\t    eap->arg = newname;\n\t\t    ex_file(eap);\n\n\t\t    // Do filetype detection with the new name.\n\t\t    if (au_has_group((char_u *)\"filetypedetect\"))\n\t\t\tdo_cmdline_cmd((char_u *)\":doau filetypedetect BufRead\");\n\t\t}\n\t    }\n\t}\n    }\n\ntheend:\n    if (tmp_orig != NULL)\n\tmch_remove(tmp_orig);\n    vim_free(tmp_orig);\n    if (tmp_new != NULL)\n\tmch_remove(tmp_new);\n    vim_free(tmp_new);\n    vim_free(newname);\n    vim_free(buf);\n#ifdef UNIX\n    vim_free(fullname);\n#endif\n    vim_free(esc_name);\n#ifdef FEAT_BROWSE\n    vim_free(browseFile);\n    cmdmod.cmod_flags = save_cmod_flags;\n#endif\n}\n\n/*\n * Split the window and edit another file, setting options to show the diffs.\n */\n    void\nex_diffsplit(exarg_T *eap)\n{\n    win_T\t*old_curwin = curwin;\n    bufref_T\told_curbuf;\n\n    set_bufref(&old_curbuf, curbuf);\n#ifdef FEAT_GUI\n    need_mouse_correct = TRUE;\n#endif\n    // Need to compute w_fraction when no redraw happened yet.\n    validate_cursor();\n    set_fraction(curwin);\n\n    // don't use a new tab page, each tab page has its own diffs\n    cmdmod.cmod_tab = 0;\n\n    if (win_split(0, (diff_flags & DIFF_VERTICAL) ? WSP_VERT : 0) != FAIL)\n    {\n\t// Pretend it was a \":split fname\" command\n\teap->cmdidx = CMD_split;\n\tcurwin->w_p_diff = TRUE;\n\tdo_exedit(eap, old_curwin);\n\n\tif (curwin != old_curwin)\t\t// split must have worked\n\t{\n\t    // Set 'diff', 'scrollbind' on and 'wrap' off.\n\t    diff_win_options(curwin, TRUE);\n\t    if (win_valid(old_curwin))\n\t    {\n\t\tdiff_win_options(old_curwin, TRUE);\n\n\t\tif (bufref_valid(&old_curbuf))\n\t\t    // Move the cursor position to that of the old window.\n\t\t    curwin->w_cursor.lnum = diff_get_corresponding_line(\n\t\t\t    old_curbuf.br_buf, old_curwin->w_cursor.lnum);\n\t    }\n\t    // Now that lines are folded scroll to show the cursor at the same\n\t    // relative position.\n\t    scroll_to_fraction(curwin, curwin->w_height);\n\t}\n    }\n}\n\n/*\n * Set options to show diffs for the current window.\n */\n    void\nex_diffthis(exarg_T *eap UNUSED)\n{\n    // Set 'diff', 'scrollbind' on and 'wrap' off.\n    diff_win_options(curwin, TRUE);\n}\n\n    static void\nset_diff_option(win_T *wp, int value)\n{\n    win_T *old_curwin = curwin;\n\n    curwin = wp;\n    curbuf = curwin->w_buffer;\n    ++curbuf_lock;\n    set_option_value_give_err((char_u *)\"diff\", (long)value, NULL, OPT_LOCAL);\n    --curbuf_lock;\n    curwin = old_curwin;\n    curbuf = curwin->w_buffer;\n}\n\n/*\n * Set options in window \"wp\" for diff mode.\n */\n    void\ndiff_win_options(\n    win_T\t*wp,\n    int\t\taddbuf)\t\t// Add buffer to diff.\n{\n# ifdef FEAT_FOLDING\n    win_T *old_curwin = curwin;\n\n    // close the manually opened folds\n    curwin = wp;\n    newFoldLevel();\n    curwin = old_curwin;\n# endif\n\n    // Use 'scrollbind' and 'cursorbind' when available\n    if (!wp->w_p_diff)\n\twp->w_p_scb_save = wp->w_p_scb;\n    wp->w_p_scb = TRUE;\n    if (!wp->w_p_diff)\n\twp->w_p_crb_save = wp->w_p_crb;\n    wp->w_p_crb = TRUE;\n    if (!(diff_flags & DIFF_FOLLOWWRAP))\n    {\n\tif (!wp->w_p_diff)\n\t    wp->w_p_wrap_save = wp->w_p_wrap;\n\twp->w_p_wrap = FALSE;\n    }\n# ifdef FEAT_FOLDING\n    if (!wp->w_p_diff)\n    {\n\tif (wp->w_p_diff_saved)\n\t    free_string_option(wp->w_p_fdm_save);\n\twp->w_p_fdm_save = vim_strsave(wp->w_p_fdm);\n    }\n    set_string_option_direct_in_win(wp, (char_u *)\"fdm\", -1, (char_u *)\"diff\",\n\t\t\t\t\t\t       OPT_LOCAL|OPT_FREE, 0);\n    if (!wp->w_p_diff)\n    {\n\twp->w_p_fdc_save = wp->w_p_fdc;\n\twp->w_p_fen_save = wp->w_p_fen;\n\twp->w_p_fdl_save = wp->w_p_fdl;\n    }\n    wp->w_p_fdc = diff_foldcolumn;\n    wp->w_p_fen = TRUE;\n    wp->w_p_fdl = 0;\n    foldUpdateAll(wp);\n    // make sure topline is not halfway a fold\n    changed_window_setting_win(wp);\n# endif\n    if (vim_strchr(p_sbo, 'h') == NULL)\n\tdo_cmdline_cmd((char_u *)\"set sbo+=hor\");\n    // Save the current values, to be restored in ex_diffoff().\n    wp->w_p_diff_saved = TRUE;\n\n    set_diff_option(wp, TRUE);\n\n    if (addbuf)\n\tdiff_buf_add(wp->w_buffer);\n    redraw_win_later(wp, NOT_VALID);\n}\n\n/*\n * Set options not to show diffs.  For the current window or all windows.\n * Only in the current tab page.\n */\n    void\nex_diffoff(exarg_T *eap)\n{\n    win_T\t*wp;\n    int\t\tdiffwin = FALSE;\n\n    FOR_ALL_WINDOWS(wp)\n    {\n\tif (eap->forceit ? wp->w_p_diff : wp == curwin)\n\t{\n\t    // Set 'diff' off. If option values were saved in\n\t    // diff_win_options(), restore the ones whose settings seem to have\n\t    // been left over from diff mode.\n\t    set_diff_option(wp, FALSE);\n\n\t    if (wp->w_p_diff_saved)\n\t    {\n\n\t\tif (wp->w_p_scb)\n\t\t    wp->w_p_scb = wp->w_p_scb_save;\n\t\tif (wp->w_p_crb)\n\t\t    wp->w_p_crb = wp->w_p_crb_save;\n\t\tif (!(diff_flags & DIFF_FOLLOWWRAP))\n\t\t{\n\t\t    if (!wp->w_p_wrap)\n\t\t\twp->w_p_wrap = wp->w_p_wrap_save;\n\t\t}\n#ifdef FEAT_FOLDING\n\t\tfree_string_option(wp->w_p_fdm);\n\t\twp->w_p_fdm = vim_strsave(\n\t\t    *wp->w_p_fdm_save ? wp->w_p_fdm_save : (char_u*)\"manual\");\n\n\t\tif (wp->w_p_fdc == diff_foldcolumn)\n\t\t    wp->w_p_fdc = wp->w_p_fdc_save;\n\t\tif (wp->w_p_fdl == 0)\n\t\t    wp->w_p_fdl = wp->w_p_fdl_save;\n\n\t\t// Only restore 'foldenable' when 'foldmethod' is not\n\t\t// \"manual\", otherwise we continue to show the diff folds.\n\t\tif (wp->w_p_fen)\n\t\t    wp->w_p_fen = foldmethodIsManual(wp) ? FALSE\n\t\t\t\t\t\t\t : wp->w_p_fen_save;\n\n\t\tfoldUpdateAll(wp);\n#endif\n\t    }\n\t    // remove filler lines\n\t    wp->w_topfill = 0;\n\n\t    // make sure topline is not halfway a fold and cursor is\n\t    // invalidated\n\t    changed_window_setting_win(wp);\n\n\t    // Note: 'sbo' is not restored, it's a global option.\n\t    diff_buf_adjust(wp);\n\t}\n\tdiffwin |= wp->w_p_diff;\n    }\n\n    // Also remove hidden buffers from the list.\n    if (eap->forceit)\n\tdiff_buf_clear();\n\n    if (!diffwin)\n    {\n\tdiff_need_update = FALSE;\n\tcurtab->tp_diff_invalid = FALSE;\n\tcurtab->tp_diff_update = FALSE;\n\tdiff_clear(curtab);\n    }\n\n    // Remove \"hor\" from 'scrollopt' if there are no diff windows left.\n    if (!diffwin && vim_strchr(p_sbo, 'h') != NULL)\n\tdo_cmdline_cmd((char_u *)\"set sbo-=hor\");\n}\n\n/*\n * Read the diff output and add each entry to the diff list.\n */\n    static void\ndiff_read(\n    int\t\tidx_orig,\t// idx of original file\n    int\t\tidx_new,\t// idx of new file\n    diffio_T   *dio)\t\t// diff output\n{\n    FILE\t*fd = NULL;\n    int\t\tline_idx = 0;\n    diff_T\t*dprev = NULL;\n    diff_T\t*dp = curtab->tp_first_diff;\n    diff_T\t*dn, *dpl;\n    diffout_T   *dout = &dio->dio_diff;\n    char_u\tlinebuf[LBUFLEN];   // only need to hold the diff line\n    char_u\t*line;\n    long\toff;\n    int\t\ti;\n    int\t\tnotset = TRUE;\t    // block \"*dp\" not set yet\n    diffhunk_T\t*hunk = NULL;\t    // init to avoid gcc warning\n\n    enum {\n\tDIFF_ED,\n\tDIFF_UNIFIED,\n\tDIFF_NONE\n    } diffstyle = DIFF_NONE;\n\n    if (dout->dout_fname == NULL)\n    {\n\tdiffstyle = DIFF_UNIFIED;\n    }\n    else\n    {\n\tfd = mch_fopen((char *)dout->dout_fname, \"r\");\n\tif (fd == NULL)\n\t{\n\t    emsg(_(e_cannot_read_diff_output));\n\t    return;\n\t}\n    }\n\n    if (!dio->dio_internal)\n    {\n\thunk = ALLOC_ONE(diffhunk_T);\n\tif (hunk == NULL)\n\t{\n\t    if (fd != NULL)\n\t\tfclose(fd);\n\t    return;\n\t}\n    }\n\n    for (;;)\n    {\n\tif (dio->dio_internal)\n\t{\n\t    if (line_idx >= dout->dout_ga.ga_len) {\n\t\tbreak;      // did last line\n\t    }\n\t    hunk = ((diffhunk_T **)dout->dout_ga.ga_data)[line_idx++];\n\t}\n\telse\n\t{\n\t    if (fd == NULL)\n\t    {\n\t\tif (line_idx >= dout->dout_ga.ga_len)\n\t\t    break;\t    // did last line\n\t\tline = ((char_u **)dout->dout_ga.ga_data)[line_idx++];\n\t    }\n\t    else\n\t    {\n\t\tif (vim_fgets(linebuf, LBUFLEN, fd))\n\t\t    break;\t\t// end of file\n\t\tline = linebuf;\n\t    }\n\n\t    if (diffstyle == DIFF_NONE)\n\t    {\n\t\t// Determine diff style.\n\t\t// ed like diff looks like this:\n\t\t// {first}[,{last}]c{first}[,{last}]\n\t\t// {first}a{first}[,{last}]\n\t\t// {first}[,{last}]d{first}\n\t\t//\n\t\t// unified diff looks like this:\n\t\t// --- file1       2018-03-20 13:23:35.783153140 +0100\n\t\t// +++ file2       2018-03-20 13:23:41.183156066 +0100\n\t\t// @@ -1,3 +1,5 @@\n\t\tif (isdigit(*line))\n\t\t    diffstyle = DIFF_ED;\n\t\telse if ((STRNCMP(line, \"@@ \", 3) == 0))\n\t\t    diffstyle = DIFF_UNIFIED;\n\t\telse if ((STRNCMP(line, \"--- \", 4) == 0)\n\t\t\t&& (vim_fgets(linebuf, LBUFLEN, fd) == 0)\n\t\t\t&& (STRNCMP(line, \"+++ \", 4) == 0)\n\t\t\t&& (vim_fgets(linebuf, LBUFLEN, fd) == 0)\n\t\t\t&& (STRNCMP(line, \"@@ \", 3) == 0))\n\t\t    diffstyle = DIFF_UNIFIED;\n\t\telse\n\t\t    // Format not recognized yet, skip over this line.  Cygwin\n\t\t    // diff may put a warning at the start of the file.\n\t\t    continue;\n\t    }\n\n\t    if (diffstyle == DIFF_ED)\n\t    {\n\t\tif (!isdigit(*line))\n\t\t    continue;\t// not the start of a diff block\n\t\tif (parse_diff_ed(line, hunk) == FAIL)\n\t\t    continue;\n\t    }\n\t    else if (diffstyle == DIFF_UNIFIED)\n\t    {\n\t\tif (STRNCMP(line, \"@@ \", 3)  != 0)\n\t\t    continue;\t// not the start of a diff block\n\t\tif (parse_diff_unified(line, hunk) == FAIL)\n\t\t    continue;\n\t    }\n\t    else\n\t    {\n\t\temsg(_(e_invalid_diff_format));\n\t\tbreak;\n\t    }\n\t}\n\n\t// Go over blocks before the change, for which orig and new are equal.\n\t// Copy blocks from orig to new.\n\twhile (dp != NULL\n\t\t&& hunk->lnum_orig > dp->df_lnum[idx_orig]\n\t\t\t\t\t\t      + dp->df_count[idx_orig])\n\t{\n\t    if (notset)\n\t\tdiff_copy_entry(dprev, dp, idx_orig, idx_new);\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t    notset = TRUE;\n\t}\n\n\tif (dp != NULL\n\t\t&& hunk->lnum_orig <= dp->df_lnum[idx_orig]\n\t\t\t\t\t\t       + dp->df_count[idx_orig]\n\t\t&& hunk->lnum_orig + hunk->count_orig >= dp->df_lnum[idx_orig])\n\t{\n\t    // New block overlaps with existing block(s).\n\t    // First find last block that overlaps.\n\t    for (dpl = dp; dpl->df_next != NULL; dpl = dpl->df_next)\n\t\tif (hunk->lnum_orig + hunk->count_orig\n\t\t\t\t\t     < dpl->df_next->df_lnum[idx_orig])\n\t\t    break;\n\n\t    // If the newly found block starts before the old one, set the\n\t    // start back a number of lines.\n\t    off = dp->df_lnum[idx_orig] - hunk->lnum_orig;\n\t    if (off > 0)\n\t    {\n\t\tfor (i = idx_orig; i < idx_new; ++i)\n\t\t    if (curtab->tp_diffbuf[i] != NULL)\n\t\t\tdp->df_lnum[i] -= off;\n\t\tdp->df_lnum[idx_new] = hunk->lnum_new;\n\t\tdp->df_count[idx_new] = hunk->count_new;\n\t    }\n\t    else if (notset)\n\t    {\n\t\t// new block inside existing one, adjust new block\n\t\tdp->df_lnum[idx_new] = hunk->lnum_new + off;\n\t\tdp->df_count[idx_new] = hunk->count_new - off;\n\t    }\n\t    else\n\t\t// second overlap of new block with existing block\n\t\tdp->df_count[idx_new] += hunk->count_new - hunk->count_orig\n\t\t    + dpl->df_lnum[idx_orig] + dpl->df_count[idx_orig]\n\t\t    - (dp->df_lnum[idx_orig] + dp->df_count[idx_orig]);\n\n\t    // Adjust the size of the block to include all the lines to the\n\t    // end of the existing block or the new diff, whatever ends last.\n\t    off = (hunk->lnum_orig + hunk->count_orig)\n\t\t\t - (dpl->df_lnum[idx_orig] + dpl->df_count[idx_orig]);\n\t    if (off < 0)\n\t    {\n\t\t// new change ends in existing block, adjust the end if not\n\t\t// done already\n\t\tif (notset)\n\t\t    dp->df_count[idx_new] += -off;\n\t\toff = 0;\n\t    }\n\t    for (i = idx_orig; i < idx_new; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL)\n\t\t    dp->df_count[i] = dpl->df_lnum[i] + dpl->df_count[i]\n\t\t\t\t\t\t       - dp->df_lnum[i] + off;\n\n\t    // Delete the diff blocks that have been merged into one.\n\t    dn = dp->df_next;\n\t    dp->df_next = dpl->df_next;\n\t    while (dn != dp->df_next)\n\t    {\n\t\tdpl = dn->df_next;\n\t\tvim_free(dn);\n\t\tdn = dpl;\n\t    }\n\t}\n\telse\n\t{\n\t    // Allocate a new diffblock.\n\t    dp = diff_alloc_new(curtab, dprev, dp);\n\t    if (dp == NULL)\n\t\tgoto done;\n\n\t    dp->df_lnum[idx_orig] = hunk->lnum_orig;\n\t    dp->df_count[idx_orig] = hunk->count_orig;\n\t    dp->df_lnum[idx_new] = hunk->lnum_new;\n\t    dp->df_count[idx_new] = hunk->count_new;\n\n\t    // Set values for other buffers, these must be equal to the\n\t    // original buffer, otherwise there would have been a change\n\t    // already.\n\t    for (i = idx_orig + 1; i < idx_new; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL)\n\t\t    diff_copy_entry(dprev, dp, idx_orig, i);\n\t}\n\tnotset = FALSE;\t\t// \"*dp\" has been set\n    }\n\n    // for remaining diff blocks orig and new are equal\n    while (dp != NULL)\n    {\n\tif (notset)\n\t    diff_copy_entry(dprev, dp, idx_orig, idx_new);\n\tdprev = dp;\n\tdp = dp->df_next;\n\tnotset = TRUE;\n    }\n\ndone:\n    if (!dio->dio_internal)\n\tvim_free(hunk);\n\n    if (fd != NULL)\n\tfclose(fd);\n}\n\n/*\n * Copy an entry at \"dp\" from \"idx_orig\" to \"idx_new\".\n */\n    static void\ndiff_copy_entry(\n    diff_T\t*dprev,\n    diff_T\t*dp,\n    int\t\tidx_orig,\n    int\t\tidx_new)\n{\n    long\toff;\n\n    if (dprev == NULL)\n\toff = 0;\n    else\n\toff = (dprev->df_lnum[idx_orig] + dprev->df_count[idx_orig])\n\t    - (dprev->df_lnum[idx_new] + dprev->df_count[idx_new]);\n    dp->df_lnum[idx_new] = dp->df_lnum[idx_orig] - off;\n    dp->df_count[idx_new] = dp->df_count[idx_orig];\n}\n\n/*\n * Clear the list of diffblocks for tab page \"tp\".\n */\n    void\ndiff_clear(tabpage_T *tp)\n{\n    diff_T\t*p, *next_p;\n\n    for (p = tp->tp_first_diff; p != NULL; p = next_p)\n    {\n\tnext_p = p->df_next;\n\tvim_free(p);\n    }\n    tp->tp_first_diff = NULL;\n}\n\n/*\n * Check diff status for line \"lnum\" in buffer \"buf\":\n * Returns 0 for nothing special\n * Returns -1 for a line that should be highlighted as changed.\n * Returns -2 for a line that should be highlighted as added/deleted.\n * Returns > 0 for inserting that many filler lines above it (never happens\n * when 'diffopt' doesn't contain \"filler\").\n * This should only be used for windows where 'diff' is set.\n */\n    int\ndiff_check(win_T *wp, linenr_T lnum)\n{\n    int\t\tidx;\t\t// index in tp_diffbuf[] for this buffer\n    diff_T\t*dp;\n    int\t\tmaxcount;\n    int\t\ti;\n    buf_T\t*buf = wp->w_buffer;\n    int\t\tcmp;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL || !wp->w_p_diff)\t// no diffs at all\n\treturn 0;\n\n    // safety check: \"lnum\" must be a buffer line\n    if (lnum < 1 || lnum > buf->b_ml.ml_line_count + 1)\n\treturn 0;\n\n    idx = diff_buf_idx(buf);\n    if (idx == DB_COUNT)\n\treturn 0;\t\t// no diffs for buffer \"buf\"\n\n#ifdef FEAT_FOLDING\n    // A closed fold never has filler lines.\n    if (hasFoldingWin(wp, lnum, NULL, NULL, TRUE, NULL))\n\treturn 0;\n#endif\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n    if (dp == NULL || lnum < dp->df_lnum[idx])\n\treturn 0;\n\n    if (lnum < dp->df_lnum[idx] + dp->df_count[idx])\n    {\n\tint\tzero = FALSE;\n\n\t// Changed or inserted line.  If the other buffers have a count of\n\t// zero, the lines were inserted.  If the other buffers have the same\n\t// count, check if the lines are identical.\n\tcmp = FALSE;\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (i != idx && curtab->tp_diffbuf[i] != NULL)\n\t    {\n\t\tif (dp->df_count[i] == 0)\n\t\t    zero = TRUE;\n\t\telse\n\t\t{\n\t\t    if (dp->df_count[i] != dp->df_count[idx])\n\t\t\treturn -1;\t    // nr of lines changed.\n\t\t    cmp = TRUE;\n\t\t}\n\t    }\n\tif (cmp)\n\t{\n\t    // Compare all lines.  If they are equal the lines were inserted\n\t    // in some buffers, deleted in others, but not changed.\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (i != idx && curtab->tp_diffbuf[i] != NULL\n\t\t\t\t\t\t      && dp->df_count[i] != 0)\n\t\t    if (!diff_equal_entry(dp, idx, i))\n\t\t\treturn -1;\n\t}\n\t// If there is no buffer with zero lines then there is no difference\n\t// any longer.  Happens when making a change (or undo) that removes\n\t// the difference.  Can't remove the entry here, we might be halfway\n\t// updating the window.  Just report the text as unchanged.  Other\n\t// windows might still show the change though.\n\tif (zero == FALSE)\n\t    return 0;\n\treturn -2;\n    }\n\n    // If 'diffopt' doesn't contain \"filler\", return 0.\n    if (!(diff_flags & DIFF_FILLER))\n\treturn 0;\n\n    // Insert filler lines above the line just below the change.  Will return\n    // 0 when this buf had the max count.\n    maxcount = 0;\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL && dp->df_count[i] > maxcount)\n\t    maxcount = dp->df_count[i];\n    return maxcount - dp->df_count[idx];\n}\n\n/*\n * Compare two entries in diff \"*dp\" and return TRUE if they are equal.\n */\n    static int\ndiff_equal_entry(diff_T *dp, int idx1, int idx2)\n{\n    int\t\ti;\n    char_u\t*line;\n    int\t\tcmp;\n\n    if (dp->df_count[idx1] != dp->df_count[idx2])\n\treturn FALSE;\n    if (diff_check_sanity(curtab, dp) == FAIL)\n\treturn FALSE;\n    for (i = 0; i < dp->df_count[idx1]; ++i)\n    {\n\tline = vim_strsave(ml_get_buf(curtab->tp_diffbuf[idx1],\n\t\t\t\t\t       dp->df_lnum[idx1] + i, FALSE));\n\tif (line == NULL)\n\t    return FALSE;\n\tcmp = diff_cmp(line, ml_get_buf(curtab->tp_diffbuf[idx2],\n\t\t\t\t\t       dp->df_lnum[idx2] + i, FALSE));\n\tvim_free(line);\n\tif (cmp != 0)\n\t    return FALSE;\n    }\n    return TRUE;\n}\n\n/*\n * Compare the characters at \"p1\" and \"p2\".  If they are equal (possibly\n * ignoring case) return TRUE and set \"len\" to the number of bytes.\n */\n    static int\ndiff_equal_char(char_u *p1, char_u *p2, int *len)\n{\n    int l  = (*mb_ptr2len)(p1);\n\n    if (l != (*mb_ptr2len)(p2))\n\treturn FALSE;\n    if (l > 1)\n    {\n\tif (STRNCMP(p1, p2, l) != 0\n\t\t&& (!enc_utf8\n\t\t    || !(diff_flags & DIFF_ICASE)\n\t\t    || utf_fold(utf_ptr2char(p1))\n\t\t\t\t\t\t!= utf_fold(utf_ptr2char(p2))))\n\t    return FALSE;\n\t*len = l;\n    }\n    else\n    {\n\tif ((*p1 != *p2)\n\t\t&& (!(diff_flags & DIFF_ICASE)\n\t\t    || TOLOWER_LOC(*p1) != TOLOWER_LOC(*p2)))\n\t    return FALSE;\n\t*len = 1;\n    }\n    return TRUE;\n}\n\n/*\n * Compare strings \"s1\" and \"s2\" according to 'diffopt'.\n * Return non-zero when they are different.\n */\n    static int\ndiff_cmp(char_u *s1, char_u *s2)\n{\n    char_u\t*p1, *p2;\n    int\t\tl;\n\n    if ((diff_flags & DIFF_IBLANK)\n\t    && (*skipwhite(s1) == NUL || *skipwhite(s2) == NUL))\n\treturn 0;\n\n    if ((diff_flags & (DIFF_ICASE | ALL_WHITE_DIFF)) == 0)\n\treturn STRCMP(s1, s2);\n    if ((diff_flags & DIFF_ICASE) && !(diff_flags & ALL_WHITE_DIFF))\n\treturn MB_STRICMP(s1, s2);\n\n    p1 = s1;\n    p2 = s2;\n\n    // Ignore white space changes and possibly ignore case.\n    while (*p1 != NUL && *p2 != NUL)\n    {\n\tif (((diff_flags & DIFF_IWHITE)\n\t\t    && VIM_ISWHITE(*p1) && VIM_ISWHITE(*p2))\n\t\t|| ((diff_flags & DIFF_IWHITEALL)\n\t\t    && (VIM_ISWHITE(*p1) || VIM_ISWHITE(*p2))))\n\t{\n\t    p1 = skipwhite(p1);\n\t    p2 = skipwhite(p2);\n\t}\n\telse\n\t{\n\t    if (!diff_equal_char(p1, p2, &l))\n\t\tbreak;\n\t    p1 += l;\n\t    p2 += l;\n\t}\n    }\n\n    // Ignore trailing white space.\n    p1 = skipwhite(p1);\n    p2 = skipwhite(p2);\n    if (*p1 != NUL || *p2 != NUL)\n\treturn 1;\n    return 0;\n}\n\n/*\n * Return the number of filler lines above \"lnum\".\n */\n    int\ndiff_check_fill(win_T *wp, linenr_T lnum)\n{\n    int\t\tn;\n\n    // be quick when there are no filler lines\n    if (!(diff_flags & DIFF_FILLER))\n\treturn 0;\n    n = diff_check(wp, lnum);\n    if (n <= 0)\n\treturn 0;\n    return n;\n}\n\n/*\n * Set the topline of \"towin\" to match the position in \"fromwin\", so that they\n * show the same diff'ed lines.\n */\n    void\ndiff_set_topline(win_T *fromwin, win_T *towin)\n{\n    buf_T\t*frombuf = fromwin->w_buffer;\n    linenr_T\tlnum = fromwin->w_topline;\n    int\t\tfromidx;\n    int\t\ttoidx;\n    diff_T\t*dp;\n    int\t\tmax_count;\n    int\t\ti;\n\n    fromidx = diff_buf_idx(frombuf);\n    if (fromidx == DB_COUNT)\n\treturn;\t\t// safety check\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    towin->w_topfill = 0;\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t    break;\n    if (dp == NULL)\n    {\n\t// After last change, compute topline relative to end of file; no\n\t// filler lines.\n\ttowin->w_topline = towin->w_buffer->b_ml.ml_line_count\n\t\t\t\t       - (frombuf->b_ml.ml_line_count - lnum);\n    }\n    else\n    {\n\t// Find index for \"towin\".\n\ttoidx = diff_buf_idx(towin->w_buffer);\n\tif (toidx == DB_COUNT)\n\t    return;\t\t// safety check\n\n\ttowin->w_topline = lnum + (dp->df_lnum[toidx] - dp->df_lnum[fromidx]);\n\tif (lnum >= dp->df_lnum[fromidx])\n\t{\n\t    // Inside a change: compute filler lines. With three or more\n\t    // buffers we need to know the largest count.\n\t    max_count = 0;\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL\n\t\t\t\t\t       && max_count < dp->df_count[i])\n\t\t    max_count = dp->df_count[i];\n\n\t    if (dp->df_count[toidx] == dp->df_count[fromidx])\n\t    {\n\t\t// same number of lines: use same filler count\n\t\ttowin->w_topfill = fromwin->w_topfill;\n\t    }\n\t    else if (dp->df_count[toidx] > dp->df_count[fromidx])\n\t    {\n\t\tif (lnum == dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t\t{\n\t\t    // more lines in towin and fromwin doesn't show diff\n\t\t    // lines, only filler lines\n\t\t    if (max_count - fromwin->w_topfill >= dp->df_count[toidx])\n\t\t    {\n\t\t\t// towin also only shows filler lines\n\t\t\ttowin->w_topline = dp->df_lnum[toidx]\n\t\t\t\t\t\t       + dp->df_count[toidx];\n\t\t\ttowin->w_topfill = fromwin->w_topfill;\n\t\t    }\n\t\t    else\n\t\t\t// towin still has some diff lines to show\n\t\t\ttowin->w_topline = dp->df_lnum[toidx]\n\t\t\t\t\t     + max_count - fromwin->w_topfill;\n\t\t}\n\t    }\n\t    else if (towin->w_topline >= dp->df_lnum[toidx]\n\t\t\t\t\t\t\t+ dp->df_count[toidx])\n\t    {\n\t\t// less lines in towin and no diff lines to show: compute\n\t\t// filler lines\n\t\ttowin->w_topline = dp->df_lnum[toidx] + dp->df_count[toidx];\n\t\tif (diff_flags & DIFF_FILLER)\n\t\t{\n\t\t    if (lnum == dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t\t\t// fromwin is also out of diff lines\n\t\t\ttowin->w_topfill = fromwin->w_topfill;\n\t\t    else\n\t\t\t// fromwin has some diff lines\n\t\t\ttowin->w_topfill = dp->df_lnum[fromidx]\n\t\t\t\t\t\t\t   + max_count - lnum;\n\t\t}\n\t    }\n\t}\n    }\n\n    // safety check (if diff info gets outdated strange things may happen)\n    towin->w_botfill = FALSE;\n    if (towin->w_topline > towin->w_buffer->b_ml.ml_line_count)\n    {\n\ttowin->w_topline = towin->w_buffer->b_ml.ml_line_count;\n\ttowin->w_botfill = TRUE;\n    }\n    if (towin->w_topline < 1)\n    {\n\ttowin->w_topline = 1;\n\ttowin->w_topfill = 0;\n    }\n\n    // When w_topline changes need to recompute w_botline and cursor position\n    invalidate_botline_win(towin);\n    changed_line_abv_curs_win(towin);\n\n    check_topfill(towin, FALSE);\n#ifdef FEAT_FOLDING\n    (void)hasFoldingWin(towin, towin->w_topline, &towin->w_topline,\n\t\t\t\t\t\t\t    NULL, TRUE, NULL);\n#endif\n}\n\n/*\n * This is called when 'diffopt' is changed.\n */\n    int\ndiffopt_changed(void)\n{\n    char_u\t*p;\n    int\t\tdiff_context_new = 6;\n    int\t\tdiff_flags_new = 0;\n    int\t\tdiff_foldcolumn_new = 2;\n    long\tdiff_algorithm_new = 0;\n    long\tdiff_indent_heuristic = 0;\n    tabpage_T\t*tp;\n\n    p = p_dip;\n    while (*p != NUL)\n    {\n\tif (STRNCMP(p, \"filler\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_FILLER;\n\t}\n\telse if (STRNCMP(p, \"context:\", 8) == 0 && VIM_ISDIGIT(p[8]))\n\t{\n\t    p += 8;\n\t    diff_context_new = getdigits(&p);\n\t}\n\telse if (STRNCMP(p, \"iblank\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_IBLANK;\n\t}\n\telse if (STRNCMP(p, \"icase\", 5) == 0)\n\t{\n\t    p += 5;\n\t    diff_flags_new |= DIFF_ICASE;\n\t}\n\telse if (STRNCMP(p, \"iwhiteall\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_IWHITEALL;\n\t}\n\telse if (STRNCMP(p, \"iwhiteeol\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_IWHITEEOL;\n\t}\n\telse if (STRNCMP(p, \"iwhite\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_IWHITE;\n\t}\n\telse if (STRNCMP(p, \"horizontal\", 10) == 0)\n\t{\n\t    p += 10;\n\t    diff_flags_new |= DIFF_HORIZONTAL;\n\t}\n\telse if (STRNCMP(p, \"vertical\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_VERTICAL;\n\t}\n\telse if (STRNCMP(p, \"foldcolumn:\", 11) == 0 && VIM_ISDIGIT(p[11]))\n\t{\n\t    p += 11;\n\t    diff_foldcolumn_new = getdigits(&p);\n\t}\n\telse if (STRNCMP(p, \"hiddenoff\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_HIDDEN_OFF;\n\t}\n\telse if (STRNCMP(p, \"closeoff\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_CLOSE_OFF;\n\t}\n\telse if (STRNCMP(p, \"followwrap\", 10) == 0)\n\t{\n\t    p += 10;\n\t    diff_flags_new |= DIFF_FOLLOWWRAP;\n\t}\n\telse if (STRNCMP(p, \"indent-heuristic\", 16) == 0)\n\t{\n\t    p += 16;\n\t    diff_indent_heuristic = XDF_INDENT_HEURISTIC;\n\t}\n\telse if (STRNCMP(p, \"internal\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_INTERNAL;\n\t}\n\telse if (STRNCMP(p, \"algorithm:\", 10) == 0)\n\t{\n\t    p += 10;\n\t    if (STRNCMP(p, \"myers\", 5) == 0)\n\t    {\n\t\tp += 5;\n\t\tdiff_algorithm_new = 0;\n\t    }\n\t    else if (STRNCMP(p, \"minimal\", 7) == 0)\n\t    {\n\t\tp += 7;\n\t\tdiff_algorithm_new = XDF_NEED_MINIMAL;\n\t    }\n\t    else if (STRNCMP(p, \"patience\", 8) == 0)\n\t    {\n\t\tp += 8;\n\t\tdiff_algorithm_new = XDF_PATIENCE_DIFF;\n\t    }\n\t    else if (STRNCMP(p, \"histogram\", 9) == 0)\n\t    {\n\t\tp += 9;\n\t\tdiff_algorithm_new = XDF_HISTOGRAM_DIFF;\n\t    }\n\t    else\n\t\treturn FAIL;\n\t}\n\n\tif (*p != ',' && *p != NUL)\n\t    return FAIL;\n\tif (*p == ',')\n\t    ++p;\n    }\n\n    diff_algorithm_new |= diff_indent_heuristic;\n\n    // Can't have both \"horizontal\" and \"vertical\".\n    if ((diff_flags_new & DIFF_HORIZONTAL) && (diff_flags_new & DIFF_VERTICAL))\n\treturn FAIL;\n\n    // If flags were added or removed, or the algorithm was changed, need to\n    // update the diff.\n    if (diff_flags != diff_flags_new || diff_algorithm != diff_algorithm_new)\n\tFOR_ALL_TABPAGES(tp)\n\t    tp->tp_diff_invalid = TRUE;\n\n    diff_flags = diff_flags_new;\n    diff_context = diff_context_new == 0 ? 1 : diff_context_new;\n    diff_foldcolumn = diff_foldcolumn_new;\n    diff_algorithm = diff_algorithm_new;\n\n    diff_redraw(TRUE);\n\n    // recompute the scroll binding with the new option value, may\n    // remove or add filler lines\n    check_scrollbind((linenr_T)0, 0L);\n\n    return OK;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"horizontal\".\n */\n    int\ndiffopt_horizontal(void)\n{\n    return (diff_flags & DIFF_HORIZONTAL) != 0;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"hiddenoff\".\n */\n    int\ndiffopt_hiddenoff(void)\n{\n    return (diff_flags & DIFF_HIDDEN_OFF) != 0;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"closeoff\".\n */\n    int\ndiffopt_closeoff(void)\n{\n    return (diff_flags & DIFF_CLOSE_OFF) != 0;\n}\n\n/*\n * Find the difference within a changed line.\n * Returns TRUE if the line was added, no other buffer has it.\n */\n    int\ndiff_find_change(\n    win_T\t*wp,\n    linenr_T\tlnum,\n    int\t\t*startp,\t// first char of the change\n    int\t\t*endp)\t\t// last char of the change\n{\n    char_u\t*line_org;\n    char_u\t*line_new;\n    int\t\ti;\n    int\t\tsi_org, si_new;\n    int\t\tei_org, ei_new;\n    diff_T\t*dp;\n    int\t\tidx;\n    int\t\toff;\n    int\t\tadded = TRUE;\n    char_u\t*p1, *p2;\n    int\t\tl;\n\n    // Make a copy of the line, the next ml_get() will invalidate it.\n    line_org = vim_strsave(ml_get_buf(wp->w_buffer, lnum, FALSE));\n    if (line_org == NULL)\n\treturn FALSE;\n\n    idx = diff_buf_idx(wp->w_buffer);\n    if (idx == DB_COUNT)\t// cannot happen\n    {\n\tvim_free(line_org);\n\treturn FALSE;\n    }\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n    if (dp == NULL || diff_check_sanity(curtab, dp) == FAIL)\n    {\n\tvim_free(line_org);\n\treturn FALSE;\n    }\n\n    off = lnum - dp->df_lnum[idx];\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL && i != idx)\n\t{\n\t    // Skip lines that are not in the other change (filler lines).\n\t    if (off >= dp->df_count[i])\n\t\tcontinue;\n\t    added = FALSE;\n\t    line_new = ml_get_buf(curtab->tp_diffbuf[i],\n\t\t\t\t\t\t dp->df_lnum[i] + off, FALSE);\n\n\t    // Search for start of difference\n\t    si_org = si_new = 0;\n\t    while (line_org[si_org] != NUL)\n\t    {\n\t\tif (((diff_flags & DIFF_IWHITE)\n\t\t\t    && VIM_ISWHITE(line_org[si_org])\n\t\t\t\t\t      && VIM_ISWHITE(line_new[si_new]))\n\t\t\t|| ((diff_flags & DIFF_IWHITEALL)\n\t\t\t    && (VIM_ISWHITE(line_org[si_org])\n\t\t\t\t\t    || VIM_ISWHITE(line_new[si_new]))))\n\t\t{\n\t\t    si_org = (int)(skipwhite(line_org + si_org) - line_org);\n\t\t    si_new = (int)(skipwhite(line_new + si_new) - line_new);\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (!diff_equal_char(line_org + si_org, line_new + si_new,\n\t\t\t\t\t\t\t\t\t   &l))\n\t\t\tbreak;\n\t\t    si_org += l;\n\t\t    si_new += l;\n\t\t}\n\t    }\n\t    if (has_mbyte)\n\t    {\n\t\t// Move back to first byte of character in both lines (may\n\t\t// have \"nn^\" in line_org and \"n^ in line_new).\n\t\tsi_org -= (*mb_head_off)(line_org, line_org + si_org);\n\t\tsi_new -= (*mb_head_off)(line_new, line_new + si_new);\n\t    }\n\t    if (*startp > si_org)\n\t\t*startp = si_org;\n\n\t    // Search for end of difference, if any.\n\t    if (line_org[si_org] != NUL || line_new[si_new] != NUL)\n\t    {\n\t\tei_org = (int)STRLEN(line_org);\n\t\tei_new = (int)STRLEN(line_new);\n\t\twhile (ei_org >= *startp && ei_new >= si_new\n\t\t\t\t\t\t&& ei_org >= 0 && ei_new >= 0)\n\t\t{\n\t\t    if (((diff_flags & DIFF_IWHITE)\n\t\t\t\t&& VIM_ISWHITE(line_org[ei_org])\n\t\t\t\t\t      && VIM_ISWHITE(line_new[ei_new]))\n\t\t\t    || ((diff_flags & DIFF_IWHITEALL)\n\t\t\t\t&& (VIM_ISWHITE(line_org[ei_org])\n\t\t\t\t\t    || VIM_ISWHITE(line_new[ei_new]))))\n\t\t    {\n\t\t\twhile (ei_org >= *startp\n\t\t\t\t\t     && VIM_ISWHITE(line_org[ei_org]))\n\t\t\t    --ei_org;\n\t\t\twhile (ei_new >= si_new\n\t\t\t\t\t     && VIM_ISWHITE(line_new[ei_new]))\n\t\t\t    --ei_new;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tp1 = line_org + ei_org;\n\t\t\tp2 = line_new + ei_new;\n\t\t\tp1 -= (*mb_head_off)(line_org, p1);\n\t\t\tp2 -= (*mb_head_off)(line_new, p2);\n\t\t\tif (!diff_equal_char(p1, p2, &l))\n\t\t\t    break;\n\t\t\tei_org -= l;\n\t\t\tei_new -= l;\n\t\t    }\n\t\t}\n\t\tif (*endp < ei_org)\n\t\t    *endp = ei_org;\n\t    }\n\t}\n\n    vim_free(line_org);\n    return added;\n}\n\n#if defined(FEAT_FOLDING) || defined(PROTO)\n/*\n * Return TRUE if line \"lnum\" is not close to a diff block, this line should\n * be in a fold.\n * Return FALSE if there are no diff blocks at all in this window.\n */\n    int\ndiff_infold(win_T *wp, linenr_T lnum)\n{\n    int\t\ti;\n    int\t\tidx = -1;\n    int\t\tother = FALSE;\n    diff_T\t*dp;\n\n    // Return if 'diff' isn't set.\n    if (!wp->w_p_diff)\n\treturn FALSE;\n\n    for (i = 0; i < DB_COUNT; ++i)\n    {\n\tif (curtab->tp_diffbuf[i] == wp->w_buffer)\n\t    idx = i;\n\telse if (curtab->tp_diffbuf[i] != NULL)\n\t    other = TRUE;\n    }\n\n    // return here if there are no diffs in the window\n    if (idx == -1 || !other)\n\treturn FALSE;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    // Return if there are no diff blocks.  All lines will be folded.\n    if (curtab->tp_first_diff == NULL)\n\treturn TRUE;\n\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n    {\n\t// If this change is below the line there can't be any further match.\n\tif (dp->df_lnum[idx] - diff_context > lnum)\n\t    break;\n\t// If this change ends before the line we have a match.\n\tif (dp->df_lnum[idx] + dp->df_count[idx] + diff_context > lnum)\n\t    return FALSE;\n    }\n    return TRUE;\n}\n#endif\n\n/*\n * \"dp\" and \"do\" commands.\n */\n    void\nnv_diffgetput(int put, long count)\n{\n    exarg_T\tea;\n    char_u\tbuf[30];\n\n#ifdef FEAT_JOB_CHANNEL\n    if (bt_prompt(curbuf))\n    {\n\tvim_beep(BO_OPER);\n\treturn;\n    }\n#endif\n    if (count == 0)\n\tea.arg = (char_u *)\"\";\n    else\n    {\n\tvim_snprintf((char *)buf, 30, \"%ld\", count);\n\tea.arg = buf;\n    }\n    if (put)\n\tea.cmdidx = CMD_diffput;\n    else\n\tea.cmdidx = CMD_diffget;\n    ea.addr_count = 0;\n    ea.line1 = curwin->w_cursor.lnum;\n    ea.line2 = curwin->w_cursor.lnum;\n    ex_diffgetput(&ea);\n}\n\n/*\n * \":diffget\"\n * \":diffput\"\n */\n    void\nex_diffgetput(exarg_T *eap)\n{\n    linenr_T\tlnum;\n    int\t\tcount;\n    linenr_T\toff = 0;\n    diff_T\t*dp;\n    diff_T\t*dprev;\n    diff_T\t*dfree;\n    int\t\tidx_cur;\n    int\t\tidx_other;\n    int\t\tidx_from;\n    int\t\tidx_to;\n    int\t\ti;\n    int\t\tadded;\n    char_u\t*p;\n    aco_save_T\taco;\n    buf_T\t*buf;\n    int\t\tstart_skip, end_skip;\n    int\t\tnew_count;\n    int\t\tbuf_empty;\n    int\t\tfound_not_ma = FALSE;\n\n    // Find the current buffer in the list of diff buffers.\n    idx_cur = diff_buf_idx(curbuf);\n    if (idx_cur == DB_COUNT)\n    {\n\temsg(_(e_current_buffer_is_not_in_diff_mode));\n\treturn;\n    }\n\n    if (*eap->arg == NUL)\n    {\n\t// No argument: Find the other buffer in the list of diff buffers.\n\tfor (idx_other = 0; idx_other < DB_COUNT; ++idx_other)\n\t    if (curtab->tp_diffbuf[idx_other] != curbuf\n\t\t    && curtab->tp_diffbuf[idx_other] != NULL)\n\t    {\n\t\tif (eap->cmdidx != CMD_diffput\n\t\t\t\t     || curtab->tp_diffbuf[idx_other]->b_p_ma)\n\t\t    break;\n\t\tfound_not_ma = TRUE;\n\t    }\n\tif (idx_other == DB_COUNT)\n\t{\n\t    if (found_not_ma)\n\t\temsg(_(e_no_other_buffer_in_diff_mode_is_modifiable));\n\t    else\n\t\temsg(_(e_no_other_buffer_in_diff_mode));\n\t    return;\n\t}\n\n\t// Check that there isn't a third buffer in the list\n\tfor (i = idx_other + 1; i < DB_COUNT; ++i)\n\t    if (curtab->tp_diffbuf[i] != curbuf\n\t\t    && curtab->tp_diffbuf[i] != NULL\n\t\t    && (eap->cmdidx != CMD_diffput || curtab->tp_diffbuf[i]->b_p_ma))\n\t    {\n\t\temsg(_(e_more_than_two_buffers_in_diff_mode_dont_know_which_one_to_use));\n\t\treturn;\n\t    }\n    }\n    else\n    {\n\t// Buffer number or pattern given.  Ignore trailing white space.\n\tp = eap->arg + STRLEN(eap->arg);\n\twhile (p > eap->arg && VIM_ISWHITE(p[-1]))\n\t    --p;\n\tfor (i = 0; vim_isdigit(eap->arg[i]) && eap->arg + i < p; ++i)\n\t    ;\n\tif (eap->arg + i == p)\t    // digits only\n\t    i = atol((char *)eap->arg);\n\telse\n\t{\n\t    i = buflist_findpat(eap->arg, p, FALSE, TRUE, FALSE);\n\t    if (i < 0)\n\t\treturn;\t\t// error message already given\n\t}\n\tbuf = buflist_findnr(i);\n\tif (buf == NULL)\n\t{\n\t    semsg(_(e_cant_find_buffer_str), eap->arg);\n\t    return;\n\t}\n\tif (buf == curbuf)\n\t    return;\t\t// nothing to do\n\tidx_other = diff_buf_idx(buf);\n\tif (idx_other == DB_COUNT)\n\t{\n\t    semsg(_(e_buffer_str_is_not_in_diff_mode), eap->arg);\n\t    return;\n\t}\n    }\n\n    diff_busy = TRUE;\n\n    // When no range given include the line above or below the cursor.\n    if (eap->addr_count == 0)\n    {\n\t// Make it possible that \":diffget\" on the last line gets line below\n\t// the cursor line when there is no difference above the cursor.\n\tif (eap->cmdidx == CMD_diffget\n\t\t&& eap->line1 == curbuf->b_ml.ml_line_count\n\t\t&& diff_check(curwin, eap->line1) == 0\n\t\t&& (eap->line1 == 1 || diff_check(curwin, eap->line1 - 1) == 0))\n\t    ++eap->line2;\n\telse if (eap->line1 > 0)\n\t    --eap->line1;\n    }\n\n    if (eap->cmdidx == CMD_diffget)\n    {\n\tidx_from = idx_other;\n\tidx_to = idx_cur;\n    }\n    else\n    {\n\tidx_from = idx_cur;\n\tidx_to = idx_other;\n\t// Need to make the other buffer the current buffer to be able to make\n\t// changes in it.\n\t// set curwin/curbuf to buf and save a few things\n\taucmd_prepbuf(&aco, curtab->tp_diffbuf[idx_other]);\n    }\n\n    // May give the warning for a changed buffer here, which can trigger the\n    // FileChangedRO autocommand, which may do nasty things and mess\n    // everything up.\n    if (!curbuf->b_changed)\n    {\n\tchange_warning(0);\n\tif (diff_buf_idx(curbuf) != idx_to)\n\t{\n\t    emsg(_(e_buffer_changed_unexpectedly));\n\t    goto theend;\n\t}\n    }\n\n    dprev = NULL;\n    for (dp = curtab->tp_first_diff; dp != NULL; )\n    {\n\tif (dp->df_lnum[idx_cur] > eap->line2 + off)\n\t    break;\t// past the range that was specified\n\n\tdfree = NULL;\n\tlnum = dp->df_lnum[idx_to];\n\tcount = dp->df_count[idx_to];\n\tif (dp->df_lnum[idx_cur] + dp->df_count[idx_cur] > eap->line1 + off\n\t\t&& u_save(lnum - 1, lnum + count) != FAIL)\n\t{\n\t    // Inside the specified range and saving for undo worked.\n\t    start_skip = 0;\n\t    end_skip = 0;\n\t    if (eap->addr_count > 0)\n\t    {\n\t\t// A range was specified: check if lines need to be skipped.\n\t\tstart_skip = eap->line1 + off - dp->df_lnum[idx_cur];\n\t\tif (start_skip > 0)\n\t\t{\n\t\t    // range starts below start of current diff block\n\t\t    if (start_skip > count)\n\t\t    {\n\t\t\tlnum += count;\n\t\t\tcount = 0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tcount -= start_skip;\n\t\t\tlnum += start_skip;\n\t\t    }\n\t\t}\n\t\telse\n\t\t    start_skip = 0;\n\n\t\tend_skip = dp->df_lnum[idx_cur] + dp->df_count[idx_cur] - 1\n\t\t\t\t\t\t\t - (eap->line2 + off);\n\t\tif (end_skip > 0)\n\t\t{\n\t\t    // range ends above end of current/from diff block\n\t\t    if (idx_cur == idx_from)\t// :diffput\n\t\t    {\n\t\t\ti = dp->df_count[idx_cur] - start_skip - end_skip;\n\t\t\tif (count > i)\n\t\t\t    count = i;\n\t\t    }\n\t\t    else\t\t\t// :diffget\n\t\t    {\n\t\t\tcount -= end_skip;\n\t\t\tend_skip = dp->df_count[idx_from] - start_skip - count;\n\t\t\tif (end_skip < 0)\n\t\t\t    end_skip = 0;\n\t\t    }\n\t\t}\n\t\telse\n\t\t    end_skip = 0;\n\t    }\n\n\t    buf_empty = BUFEMPTY();\n\t    added = 0;\n\t    for (i = 0; i < count; ++i)\n\t    {\n\t\t// remember deleting the last line of the buffer\n\t\tbuf_empty = curbuf->b_ml.ml_line_count == 1;\n\t\tml_delete(lnum);\n\t\t--added;\n\t    }\n\t    for (i = 0; i < dp->df_count[idx_from] - start_skip - end_skip; ++i)\n\t    {\n\t\tlinenr_T nr;\n\n\t\tnr = dp->df_lnum[idx_from] + start_skip + i;\n\t\tif (nr > curtab->tp_diffbuf[idx_from]->b_ml.ml_line_count)\n\t\t    break;\n\t\tp = vim_strsave(ml_get_buf(curtab->tp_diffbuf[idx_from],\n\t\t\t\t\t\t\t\t  nr, FALSE));\n\t\tif (p != NULL)\n\t\t{\n\t\t    ml_append(lnum + i - 1, p, 0, FALSE);\n\t\t    vim_free(p);\n\t\t    ++added;\n\t\t    if (buf_empty && curbuf->b_ml.ml_line_count == 2)\n\t\t    {\n\t\t\t// Added the first line into an empty buffer, need to\n\t\t\t// delete the dummy empty line.\n\t\t\tbuf_empty = FALSE;\n\t\t\tml_delete((linenr_T)2);\n\t\t    }\n\t\t}\n\t    }\n\t    new_count = dp->df_count[idx_to] + added;\n\t    dp->df_count[idx_to] = new_count;\n\n\t    if (start_skip == 0 && end_skip == 0)\n\t    {\n\t\t// Check if there are any other buffers and if the diff is\n\t\t// equal in them.\n\t\tfor (i = 0; i < DB_COUNT; ++i)\n\t\t    if (curtab->tp_diffbuf[i] != NULL && i != idx_from\n\t\t\t\t\t\t\t\t&& i != idx_to\n\t\t\t    && !diff_equal_entry(dp, idx_from, i))\n\t\t\tbreak;\n\t\tif (i == DB_COUNT)\n\t\t{\n\t\t    // delete the diff entry, the buffers are now equal here\n\t\t    dfree = dp;\n\t\t    dp = dp->df_next;\n\t\t    if (dprev == NULL)\n\t\t\tcurtab->tp_first_diff = dp;\n\t\t    else\n\t\t\tdprev->df_next = dp;\n\t\t}\n\t    }\n\n\t    // Adjust marks.  This will change the following entries!\n\t    if (added != 0)\n\t    {\n\t\tmark_adjust(lnum, lnum + count - 1, (long)MAXLNUM, (long)added);\n\t\tif (curwin->w_cursor.lnum >= lnum)\n\t\t{\n\t\t    // Adjust the cursor position if it's in/after the changed\n\t\t    // lines.\n\t\t    if (curwin->w_cursor.lnum >= lnum + count)\n\t\t\tcurwin->w_cursor.lnum += added;\n\t\t    else if (added < 0)\n\t\t\tcurwin->w_cursor.lnum = lnum;\n\t\t}\n\t    }\n\t    changed_lines(lnum, 0, lnum + count, (long)added);\n\n\t    if (dfree != NULL)\n\t    {\n\t\t// Diff is deleted, update folds in other windows.\n#ifdef FEAT_FOLDING\n\t\tdiff_fold_update(dfree, idx_to);\n#endif\n\t\tvim_free(dfree);\n\t    }\n\t    else\n\t\t// mark_adjust() may have changed the count in a wrong way\n\t\tdp->df_count[idx_to] = new_count;\n\n\t    // When changing the current buffer, keep track of line numbers\n\t    if (idx_cur == idx_to)\n\t\toff += added;\n\t}\n\n\t// If before the range or not deleted, go to next diff.\n\tif (dfree == NULL)\n\t{\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n    }\n\n    // restore curwin/curbuf and a few other things\n    if (eap->cmdidx != CMD_diffget)\n    {\n\t// Syncing undo only works for the current buffer, but we change\n\t// another buffer.  Sync undo if the command was typed.  This isn't\n\t// 100% right when \":diffput\" is used in a function or mapping.\n\tif (KeyTyped)\n\t    u_sync(FALSE);\n\taucmd_restbuf(&aco);\n    }\n\ntheend:\n    diff_busy = FALSE;\n    if (diff_need_update)\n\tex_diffupdate(NULL);\n\n    // Check that the cursor is on a valid character and update its\n    // position.  When there were filler lines the topline has become\n    // invalid.\n    check_cursor();\n    changed_line_abv_curs();\n\n    if (diff_need_update)\n\t// redraw already done by ex_diffupdate()\n\tdiff_need_update = FALSE;\n    else\n    {\n\t// Also need to redraw the other buffers.\n\tdiff_redraw(FALSE);\n\tapply_autocmds(EVENT_DIFFUPDATED, NULL, NULL, FALSE, curbuf);\n    }\n}\n\n#ifdef FEAT_FOLDING\n/*\n * Update folds for all diff buffers for entry \"dp\".\n * Skip buffer with index \"skip_idx\".\n * When there are no diffs, all folds are removed.\n */\n    static void\ndiff_fold_update(diff_T *dp, int skip_idx)\n{\n    int\t\ti;\n    win_T\t*wp;\n\n    FOR_ALL_WINDOWS(wp)\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (curtab->tp_diffbuf[i] == wp->w_buffer && i != skip_idx)\n\t\tfoldUpdate(wp, dp->df_lnum[i],\n\t\t\t\t\t    dp->df_lnum[i] + dp->df_count[i]);\n}\n#endif\n\n/*\n * Return TRUE if buffer \"buf\" is in diff-mode.\n */\n    int\ndiff_mode_buf(buf_T *buf)\n{\n    tabpage_T\t*tp;\n\n    FOR_ALL_TABPAGES(tp)\n\tif (diff_buf_idx_tp(buf, tp) != DB_COUNT)\n\t    return TRUE;\n    return FALSE;\n}\n\n/*\n * Move \"count\" times in direction \"dir\" to the next diff block.\n * Return FAIL if there isn't such a diff block.\n */\n    int\ndiff_move_to(int dir, long count)\n{\n    int\t\tidx;\n    linenr_T\tlnum = curwin->w_cursor.lnum;\n    diff_T\t*dp;\n\n    idx = diff_buf_idx(curbuf);\n    if (idx == DB_COUNT || curtab->tp_first_diff == NULL)\n\treturn FAIL;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL)\t\t// no diffs today\n\treturn FAIL;\n\n    while (--count >= 0)\n    {\n\t// Check if already before first diff.\n\tif (dir == BACKWARD && lnum <= curtab->tp_first_diff->df_lnum[idx])\n\t    break;\n\n\tfor (dp = curtab->tp_first_diff; ; dp = dp->df_next)\n\t{\n\t    if (dp == NULL)\n\t\tbreak;\n\t    if ((dir == FORWARD && lnum < dp->df_lnum[idx])\n\t\t    || (dir == BACKWARD\n\t\t\t&& (dp->df_next == NULL\n\t\t\t    || lnum <= dp->df_next->df_lnum[idx])))\n\t    {\n\t\tlnum = dp->df_lnum[idx];\n\t\tbreak;\n\t    }\n\t}\n    }\n\n    // don't end up past the end of the file\n    if (lnum > curbuf->b_ml.ml_line_count)\n\tlnum = curbuf->b_ml.ml_line_count;\n\n    // When the cursor didn't move at all we fail.\n    if (lnum == curwin->w_cursor.lnum)\n\treturn FAIL;\n\n    setpcmark();\n    curwin->w_cursor.lnum = lnum;\n    curwin->w_cursor.col = 0;\n\n    return OK;\n}\n\n/*\n * Return the line number in the current window that is closest to \"lnum1\" in\n * \"buf1\" in diff mode.\n */\n    static linenr_T\ndiff_get_corresponding_line_int(\n    buf_T\t*buf1,\n    linenr_T\tlnum1)\n{\n    int\t\tidx1;\n    int\t\tidx2;\n    diff_T\t*dp;\n    int\t\tbaseline = 0;\n\n    idx1 = diff_buf_idx(buf1);\n    idx2 = diff_buf_idx(curbuf);\n    if (idx1 == DB_COUNT || idx2 == DB_COUNT || curtab->tp_first_diff == NULL)\n\treturn lnum1;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL)\t\t// no diffs today\n\treturn lnum1;\n\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n    {\n\tif (dp->df_lnum[idx1] > lnum1)\n\t    return lnum1 - baseline;\n\tif ((dp->df_lnum[idx1] + dp->df_count[idx1]) > lnum1)\n\t{\n\t    // Inside the diffblock\n\t    baseline = lnum1 - dp->df_lnum[idx1];\n\t    if (baseline > dp->df_count[idx2])\n\t\tbaseline = dp->df_count[idx2];\n\n\t    return dp->df_lnum[idx2] + baseline;\n\t}\n\tif (    (dp->df_lnum[idx1] == lnum1)\n\t     && (dp->df_count[idx1] == 0)\n\t     && (dp->df_lnum[idx2] <= curwin->w_cursor.lnum)\n\t     && ((dp->df_lnum[idx2] + dp->df_count[idx2])\n\t\t\t\t\t\t      > curwin->w_cursor.lnum))\n\t    /*\n\t     * Special case: if the cursor is just after a zero-count\n\t     * block (i.e. all filler) and the target cursor is already\n\t     * inside the corresponding block, leave the target cursor\n\t     * unmoved. This makes repeated CTRL-W W operations work\n\t     * as expected.\n\t     */\n\t    return curwin->w_cursor.lnum;\n\tbaseline = (dp->df_lnum[idx1] + dp->df_count[idx1])\n\t\t\t\t   - (dp->df_lnum[idx2] + dp->df_count[idx2]);\n    }\n\n    // If we get here then the cursor is after the last diff\n    return lnum1 - baseline;\n}\n\n/*\n * Return the line number in the current window that is closest to \"lnum1\" in\n * \"buf1\" in diff mode.  Checks the line number to be valid.\n */\n    linenr_T\ndiff_get_corresponding_line(buf_T *buf1, linenr_T lnum1)\n{\n    linenr_T lnum = diff_get_corresponding_line_int(buf1, lnum1);\n\n    // don't end up past the end of the file\n    if (lnum > curbuf->b_ml.ml_line_count)\n\treturn curbuf->b_ml.ml_line_count;\n    return lnum;\n}\n\n/*\n * For line \"lnum\" in the current window find the equivalent lnum in window\n * \"wp\", compensating for inserted/deleted lines.\n */\n    linenr_T\ndiff_lnum_win(linenr_T lnum, win_T *wp)\n{\n    diff_T\t*dp;\n    int\t\tidx;\n    int\t\ti;\n    linenr_T\tn;\n\n    idx = diff_buf_idx(curbuf);\n    if (idx == DB_COUNT)\t\t// safety check\n\treturn (linenr_T)0;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n\n    // When after the last change, compute relative to the last line number.\n    if (dp == NULL)\n\treturn wp->w_buffer->b_ml.ml_line_count\n\t\t\t\t\t- (curbuf->b_ml.ml_line_count - lnum);\n\n    // Find index for \"wp\".\n    i = diff_buf_idx(wp->w_buffer);\n    if (i == DB_COUNT)\t\t\t// safety check\n\treturn (linenr_T)0;\n\n    n = lnum + (dp->df_lnum[i] - dp->df_lnum[idx]);\n    if (n > dp->df_lnum[i] + dp->df_count[i])\n\tn = dp->df_lnum[i] + dp->df_count[i];\n    return n;\n}\n\n/*\n * Handle an ED style diff line.\n * Return FAIL if the line does not contain diff info.\n */\n    static int\nparse_diff_ed(\n\tchar_u\t    *line,\n\tdiffhunk_T  *hunk)\n{\n    char_u *p;\n    long    f1, l1, f2, l2;\n    int\t    difftype;\n\n    // The line must be one of three formats:\n    // change: {first}[,{last}]c{first}[,{last}]\n    // append: {first}a{first}[,{last}]\n    // delete: {first}[,{last}]d{first}\n    p = line;\n    f1 = getdigits(&p);\n    if (*p == ',')\n    {\n\t++p;\n\tl1 = getdigits(&p);\n    }\n    else\n\tl1 = f1;\n    if (*p != 'a' && *p != 'c' && *p != 'd')\n\treturn FAIL;\t\t// invalid diff format\n    difftype = *p++;\n    f2 = getdigits(&p);\n    if (*p == ',')\n    {\n\t++p;\n\tl2 = getdigits(&p);\n    }\n    else\n\tl2 = f2;\n    if (l1 < f1 || l2 < f2)\n\treturn FAIL;\n\n    if (difftype == 'a')\n    {\n\thunk->lnum_orig = f1 + 1;\n\thunk->count_orig = 0;\n    }\n    else\n    {\n\thunk->lnum_orig = f1;\n\thunk->count_orig = l1 - f1 + 1;\n    }\n    if (difftype == 'd')\n    {\n\thunk->lnum_new = f2 + 1;\n\thunk->count_new = 0;\n    }\n    else\n    {\n\thunk->lnum_new = f2;\n\thunk->count_new = l2 - f2 + 1;\n    }\n    return OK;\n}\n\n/*\n * Parses unified diff with zero(!) context lines.\n * Return FAIL if there is no diff information in \"line\".\n */\n    static int\nparse_diff_unified(\n\tchar_u\t    *line,\n\tdiffhunk_T  *hunk)\n{\n    char_u *p;\n    long    oldline, oldcount, newline, newcount;\n\n    // Parse unified diff hunk header:\n    // @@ -oldline,oldcount +newline,newcount @@\n    p = line;\n    if (*p++ == '@' && *p++ == '@' && *p++ == ' ' && *p++ == '-')\n    {\n\toldline = getdigits(&p);\n\tif (*p == ',')\n\t{\n\t    ++p;\n\t    oldcount = getdigits(&p);\n\t}\n\telse\n\t    oldcount = 1;\n\tif (*p++ == ' ' && *p++ == '+')\n\t{\n\t    newline = getdigits(&p);\n\t    if (*p == ',')\n\t    {\n\t\t++p;\n\t\tnewcount = getdigits(&p);\n\t    }\n\t    else\n\t\tnewcount = 1;\n\t}\n\telse\n\t    return FAIL;\t// invalid diff format\n\n\tif (oldcount == 0)\n\t    oldline += 1;\n\tif (newcount == 0)\n\t    newline += 1;\n\tif (newline == 0)\n\t    newline = 1;\n\n\thunk->lnum_orig = oldline;\n\thunk->count_orig = oldcount;\n\thunk->lnum_new = newline;\n\thunk->count_new = newcount;\n\n\treturn OK;\n    }\n\n    return FAIL;\n}\n\n/*\n * Callback function for the xdl_diff() function.\n * Stores the diff output in a grow array.\n */\n    static int\nxdiff_out(\n\tlong start_a,\n\tlong count_a,\n\tlong start_b,\n\tlong count_b,\n\tvoid *priv)\n{\n    diffout_T\t*dout = (diffout_T *)priv;\n    diffhunk_T *p = ALLOC_ONE(diffhunk_T);\n\n    if (p == NULL)\n\treturn -1;\n\n    if (ga_grow(&dout->dout_ga, 1) == FAIL)\n    {\n\tvim_free(p);\n\treturn -1;\n    }\n\n    p->lnum_orig  = start_a + 1;\n    p->count_orig = count_a;\n    p->lnum_new   = start_b + 1;\n    p->count_new  = count_b;\n    ((diffhunk_T **)dout->dout_ga.ga_data)[dout->dout_ga.ga_len++] = p;\n    return 0;\n}\n\n#endif\t// FEAT_DIFF\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * \"diff_filler()\" function\n */\n    void\nf_diff_filler(typval_T *argvars UNUSED, typval_T *rettv UNUSED)\n{\n#ifdef FEAT_DIFF\n    if (in_vim9script() && check_for_lnum_arg(argvars, 0) == FAIL)\n\treturn;\n\n    rettv->vval.v_number = diff_check_fill(curwin, tv_get_lnum(argvars));\n#endif\n}\n\n/*\n * \"diff_hlID()\" function\n */\n    void\nf_diff_hlID(typval_T *argvars UNUSED, typval_T *rettv UNUSED)\n{\n#ifdef FEAT_DIFF\n    linenr_T\t\tlnum;\n    static linenr_T\tprev_lnum = 0;\n    static varnumber_T\tchangedtick = 0;\n    static int\t\tfnum = 0;\n    static int\t\tchange_start = 0;\n    static int\t\tchange_end = 0;\n    static hlf_T\thlID = (hlf_T)0;\n    int\t\t\tfiller_lines;\n    int\t\t\tcol;\n\n    if (in_vim9script()\n\t    && (check_for_lnum_arg(argvars,0) == FAIL\n\t\t|| check_for_number_arg(argvars, 1) == FAIL))\n\treturn;\n\n    lnum = tv_get_lnum(argvars);\n    if (lnum < 0)\t// ignore type error in {lnum} arg\n\tlnum = 0;\n    if (lnum != prev_lnum\n\t    || changedtick != CHANGEDTICK(curbuf)\n\t    || fnum != curbuf->b_fnum)\n    {\n\t// New line, buffer, change: need to get the values.\n\tfiller_lines = diff_check(curwin, lnum);\n\tif (filler_lines < 0)\n\t{\n\t    if (filler_lines == -1)\n\t    {\n\t\tchange_start = MAXCOL;\n\t\tchange_end = -1;\n\t\tif (diff_find_change(curwin, lnum, &change_start, &change_end))\n\t\t    hlID = HLF_ADD;\t// added line\n\t\telse\n\t\t    hlID = HLF_CHD;\t// changed line\n\t    }\n\t    else\n\t\thlID = HLF_ADD;\t// added line\n\t}\n\telse\n\t    hlID = (hlf_T)0;\n\tprev_lnum = lnum;\n\tchangedtick = CHANGEDTICK(curbuf);\n\tfnum = curbuf->b_fnum;\n    }\n\n    if (hlID == HLF_CHD || hlID == HLF_TXD)\n    {\n\tcol = tv_get_number(&argvars[1]) - 1; // ignore type error in {col}\n\tif (col >= change_start && col <= change_end)\n\t    hlID = HLF_TXD;\t\t\t// changed text\n\telse\n\t    hlID = HLF_CHD;\t\t\t// changed line\n    }\n    rettv->vval.v_number = hlID == (hlf_T)0 ? 0 : (int)hlID;\n#endif\n}\n\n#endif\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "fixing_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * diff.c: code for diff'ing two, three or four buffers.\n *\n * There are three ways to diff:\n * - Shell out to an external diff program, using files.\n * - Use the compiled-in xdiff library.\n * - Let 'diffexpr' do the work, using files.\n */\n\n#include \"vim.h\"\n#include \"xdiff/xdiff.h\"\n\n#if defined(FEAT_DIFF) || defined(PROTO)\n\nstatic int diff_busy = FALSE;\t    // using diff structs, don't change them\nstatic int diff_need_update = FALSE; // ex_diffupdate needs to be called\n\n// flags obtained from the 'diffopt' option\n#define DIFF_FILLER\t0x001\t// display filler lines\n#define DIFF_IBLANK\t0x002\t// ignore empty lines\n#define DIFF_ICASE\t0x004\t// ignore case\n#define DIFF_IWHITE\t0x008\t// ignore change in white space\n#define DIFF_IWHITEALL\t0x010\t// ignore all white space changes\n#define DIFF_IWHITEEOL\t0x020\t// ignore change in white space at EOL\n#define DIFF_HORIZONTAL\t0x040\t// horizontal splits\n#define DIFF_VERTICAL\t0x080\t// vertical splits\n#define DIFF_HIDDEN_OFF\t0x100\t// diffoff when hidden\n#define DIFF_INTERNAL\t0x200\t// use internal xdiff algorithm\n#define DIFF_CLOSE_OFF\t0x400\t// diffoff when closing window\n#define DIFF_FOLLOWWRAP\t0x800\t// follow the wrap option\n#define ALL_WHITE_DIFF (DIFF_IWHITE | DIFF_IWHITEALL | DIFF_IWHITEEOL)\nstatic int\tdiff_flags = DIFF_INTERNAL | DIFF_FILLER | DIFF_CLOSE_OFF;\n\nstatic long diff_algorithm = 0;\n\n#define LBUFLEN 50\t\t// length of line in diff file\n\nstatic int diff_a_works = MAYBE; // TRUE when \"diff -a\" works, FALSE when it\n\t\t\t\t // doesn't work, MAYBE when not checked yet\n#if defined(MSWIN)\nstatic int diff_bin_works = MAYBE; // TRUE when \"diff --binary\" works, FALSE\n\t\t\t\t   // when it doesn't work, MAYBE when not\n\t\t\t\t   // checked yet\n#endif\n\n// used for diff input\ntypedef struct {\n    char_u\t*din_fname;  // used for external diff\n    mmfile_t\tdin_mmfile;  // used for internal diff\n} diffin_T;\n\n// used for diff result\ntypedef struct {\n    char_u\t*dout_fname;  // used for external diff\n    garray_T\tdout_ga;      // used for internal diff\n} diffout_T;\n\n// used for recording hunks from xdiff\ntypedef struct {\n    linenr_T lnum_orig;\n    long     count_orig;\n    linenr_T lnum_new;\n    long     count_new;\n} diffhunk_T;\n\n// two diff inputs and one result\ntypedef struct {\n    diffin_T\tdio_orig;     // original file input\n    diffin_T\tdio_new;      // new file input\n    diffout_T\tdio_diff;     // diff result\n    int\t\tdio_internal; // using internal diff\n} diffio_T;\n\nstatic int diff_buf_idx(buf_T *buf);\nstatic int diff_buf_idx_tp(buf_T *buf, tabpage_T *tp);\nstatic void diff_mark_adjust_tp(tabpage_T *tp, int idx, linenr_T line1, linenr_T line2, long amount, long amount_after);\nstatic void diff_check_unchanged(tabpage_T *tp, diff_T *dp);\nstatic int diff_check_sanity(tabpage_T *tp, diff_T *dp);\nstatic int check_external_diff(diffio_T *diffio);\nstatic int diff_file(diffio_T *diffio);\nstatic int diff_equal_entry(diff_T *dp, int idx1, int idx2);\nstatic int diff_cmp(char_u *s1, char_u *s2);\n#ifdef FEAT_FOLDING\nstatic void diff_fold_update(diff_T *dp, int skip_idx);\n#endif\nstatic void diff_read(int idx_orig, int idx_new, diffio_T *dio);\nstatic void diff_copy_entry(diff_T *dprev, diff_T *dp, int idx_orig, int idx_new);\nstatic diff_T *diff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp);\nstatic int parse_diff_ed(char_u *line, diffhunk_T *hunk);\nstatic int parse_diff_unified(char_u *line, diffhunk_T *hunk);\nstatic int xdiff_out(long start_a, long count_a, long start_b, long count_b, void *priv);\n\n#define FOR_ALL_DIFFBLOCKS_IN_TAB(tp, dp) \\\n    for ((dp) = (tp)->tp_first_diff; (dp) != NULL; (dp) = (dp)->df_next)\n\n/*\n * Called when deleting or unloading a buffer: No longer make a diff with it.\n */\n    void\ndiff_buf_delete(buf_T *buf)\n{\n    int\t\ti;\n    tabpage_T\t*tp;\n\n    FOR_ALL_TABPAGES(tp)\n    {\n\ti = diff_buf_idx_tp(buf, tp);\n\tif (i != DB_COUNT)\n\t{\n\t    tp->tp_diffbuf[i] = NULL;\n\t    tp->tp_diff_invalid = TRUE;\n\t    if (tp == curtab)\n\t    {\n\t\t// don't redraw right away, more might change or buffer state\n\t\t// is invalid right now\n\t\tneed_diff_redraw = TRUE;\n\t\tredraw_later(VALID);\n\t    }\n\t}\n    }\n}\n\n/*\n * Check if the current buffer should be added to or removed from the list of\n * diff buffers.\n */\n    void\ndiff_buf_adjust(win_T *win)\n{\n    win_T\t*wp;\n    int\t\ti;\n\n    if (!win->w_p_diff)\n    {\n\t// When there is no window showing a diff for this buffer, remove\n\t// it from the diffs.\n\tFOR_ALL_WINDOWS(wp)\n\t    if (wp->w_buffer == win->w_buffer && wp->w_p_diff)\n\t\tbreak;\n\tif (wp == NULL)\n\t{\n\t    i = diff_buf_idx(win->w_buffer);\n\t    if (i != DB_COUNT)\n\t    {\n\t\tcurtab->tp_diffbuf[i] = NULL;\n\t\tcurtab->tp_diff_invalid = TRUE;\n\t\tdiff_redraw(TRUE);\n\t    }\n\t}\n    }\n    else\n\tdiff_buf_add(win->w_buffer);\n}\n\n/*\n * Add a buffer to make diffs for.\n * Call this when a new buffer is being edited in the current window where\n * 'diff' is set.\n * Marks the current buffer as being part of the diff and requiring updating.\n * This must be done before any autocmd, because a command may use info\n * about the screen contents.\n */\n    void\ndiff_buf_add(buf_T *buf)\n{\n    int\t\ti;\n\n    if (diff_buf_idx(buf) != DB_COUNT)\n\treturn;\t\t// It's already there.\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] == NULL)\n\t{\n\t    curtab->tp_diffbuf[i] = buf;\n\t    curtab->tp_diff_invalid = TRUE;\n\t    diff_redraw(TRUE);\n\t    return;\n\t}\n\n    semsg(_(e_cannot_diff_more_than_nr_buffers), DB_COUNT);\n}\n\n/*\n * Remove all buffers to make diffs for.\n */\n    static void\ndiff_buf_clear(void)\n{\n    int\t\ti;\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL)\n\t{\n\t    curtab->tp_diffbuf[i] = NULL;\n\t    curtab->tp_diff_invalid = TRUE;\n\t    diff_redraw(TRUE);\n\t}\n}\n\n/*\n * Find buffer \"buf\" in the list of diff buffers for the current tab page.\n * Return its index or DB_COUNT if not found.\n */\n    static int\ndiff_buf_idx(buf_T *buf)\n{\n    int\t\tidx;\n\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (curtab->tp_diffbuf[idx] == buf)\n\t    break;\n    return idx;\n}\n\n/*\n * Find buffer \"buf\" in the list of diff buffers for tab page \"tp\".\n * Return its index or DB_COUNT if not found.\n */\n    static int\ndiff_buf_idx_tp(buf_T *buf, tabpage_T *tp)\n{\n    int\t\tidx;\n\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (tp->tp_diffbuf[idx] == buf)\n\t    break;\n    return idx;\n}\n\n/*\n * Mark the diff info involving buffer \"buf\" as invalid, it will be updated\n * when info is requested.\n */\n    void\ndiff_invalidate(buf_T *buf)\n{\n    tabpage_T\t*tp;\n    int\t\ti;\n\n    FOR_ALL_TABPAGES(tp)\n    {\n\ti = diff_buf_idx_tp(buf, tp);\n\tif (i != DB_COUNT)\n\t{\n\t    tp->tp_diff_invalid = TRUE;\n\t    if (tp == curtab)\n\t\tdiff_redraw(TRUE);\n\t}\n    }\n}\n\n/*\n * Called by mark_adjust(): update line numbers in \"curbuf\".\n */\n    void\ndiff_mark_adjust(\n    linenr_T\tline1,\n    linenr_T\tline2,\n    long\tamount,\n    long\tamount_after)\n{\n    int\t\tidx;\n    tabpage_T\t*tp;\n\n    // Handle all tab pages that use the current buffer in a diff.\n    FOR_ALL_TABPAGES(tp)\n    {\n\tidx = diff_buf_idx_tp(curbuf, tp);\n\tif (idx != DB_COUNT)\n\t    diff_mark_adjust_tp(tp, idx, line1, line2, amount, amount_after);\n    }\n}\n\n/*\n * Update line numbers in tab page \"tp\" for \"curbuf\" with index \"idx\".\n * This attempts to update the changes as much as possible:\n * When inserting/deleting lines outside of existing change blocks, create a\n * new change block and update the line numbers in following blocks.\n * When inserting/deleting lines in existing change blocks, update them.\n */\n    static void\ndiff_mark_adjust_tp(\n    tabpage_T\t*tp,\n    int\t\tidx,\n    linenr_T\tline1,\n    linenr_T\tline2,\n    long\tamount,\n    long\tamount_after)\n{\n    diff_T\t*dp;\n    diff_T\t*dprev;\n    diff_T\t*dnext;\n    int\t\ti;\n    int\t\tinserted, deleted;\n    int\t\tn, off;\n    linenr_T\tlast;\n    linenr_T\tlnum_deleted = line1;\t// lnum of remaining deletion\n    int\t\tcheck_unchanged;\n\n    if (diff_internal())\n    {\n\t// Will update diffs before redrawing.  Set _invalid to update the\n\t// diffs themselves, set _update to also update folds properly just\n\t// before redrawing.\n\t// Do update marks here, it is needed for :%diffput.\n\ttp->tp_diff_invalid = TRUE;\n\ttp->tp_diff_update = TRUE;\n    }\n\n    if (line2 == MAXLNUM)\n    {\n\t// mark_adjust(99, MAXLNUM, 9, 0): insert lines\n\tinserted = amount;\n\tdeleted = 0;\n    }\n    else if (amount_after > 0)\n    {\n\t// mark_adjust(99, 98, MAXLNUM, 9): a change that inserts lines\n\tinserted = amount_after;\n\tdeleted = 0;\n    }\n    else\n    {\n\t// mark_adjust(98, 99, MAXLNUM, -2): delete lines\n\tinserted = 0;\n\tdeleted = -amount_after;\n    }\n\n    dprev = NULL;\n    dp = tp->tp_first_diff;\n    for (;;)\n    {\n\t// If the change is after the previous diff block and before the next\n\t// diff block, thus not touching an existing change, create a new diff\n\t// block.  Don't do this when ex_diffgetput() is busy.\n\tif ((dp == NULL || dp->df_lnum[idx] - 1 > line2\n\t\t    || (line2 == MAXLNUM && dp->df_lnum[idx] > line1))\n\t\t&& (dprev == NULL\n\t\t    || dprev->df_lnum[idx] + dprev->df_count[idx] < line1)\n\t\t&& !diff_busy)\n\t{\n\t    dnext = diff_alloc_new(tp, dprev, dp);\n\t    if (dnext == NULL)\n\t\treturn;\n\n\t    dnext->df_lnum[idx] = line1;\n\t    dnext->df_count[idx] = inserted;\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (tp->tp_diffbuf[i] != NULL && i != idx)\n\t\t{\n\t\t    if (dprev == NULL)\n\t\t\tdnext->df_lnum[i] = line1;\n\t\t    else\n\t\t\tdnext->df_lnum[i] = line1\n\t\t\t    + (dprev->df_lnum[i] + dprev->df_count[i])\n\t\t\t    - (dprev->df_lnum[idx] + dprev->df_count[idx]);\n\t\t    dnext->df_count[i] = deleted;\n\t\t}\n\t}\n\n\t// if at end of the list, quit\n\tif (dp == NULL)\n\t    break;\n\n\t/*\n\t * Check for these situations:\n\t *\t  1  2\t3\n\t *\t  1  2\t3\n\t * line1     2\t3  4  5\n\t *\t     2\t3  4  5\n\t *\t     2\t3  4  5\n\t * line2     2\t3  4  5\n\t *\t\t3     5  6\n\t *\t\t3     5  6\n\t */\n\t// compute last line of this change\n\tlast = dp->df_lnum[idx] + dp->df_count[idx] - 1;\n\n\t// 1. change completely above line1: nothing to do\n\tif (last >= line1 - 1)\n\t{\n\t    // 6. change below line2: only adjust for amount_after; also when\n\t    // \"deleted\" became zero when deleted all lines between two diffs\n\t    if (dp->df_lnum[idx] - (deleted + inserted != 0) > line2)\n\t    {\n\t\tif (amount_after == 0)\n\t\t    break;\t// nothing left to change\n\t\tdp->df_lnum[idx] += amount_after;\n\t    }\n\t    else\n\t    {\n\t\tcheck_unchanged = FALSE;\n\n\t\t// 2. 3. 4. 5.: inserted/deleted lines touching this diff.\n\t\tif (deleted > 0)\n\t\t{\n\t\t    off = 0;\n\t\t    if (dp->df_lnum[idx] >= line1)\n\t\t    {\n\t\t\tif (last <= line2)\n\t\t\t{\n\t\t\t    // 4. delete all lines of diff\n\t\t\t    if (dp->df_next != NULL\n\t\t\t\t    && dp->df_next->df_lnum[idx] - 1 <= line2)\n\t\t\t    {\n\t\t\t\t// delete continues in next diff, only do\n\t\t\t\t// lines until that one\n\t\t\t\tn = dp->df_next->df_lnum[idx] - lnum_deleted;\n\t\t\t\tdeleted -= n;\n\t\t\t\tn -= dp->df_count[idx];\n\t\t\t\tlnum_deleted = dp->df_next->df_lnum[idx];\n\t\t\t    }\n\t\t\t    else\n\t\t\t\tn = deleted - dp->df_count[idx];\n\t\t\t    dp->df_count[idx] = 0;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    // 5. delete lines at or just before top of diff\n\t\t\t    off = dp->df_lnum[idx] - lnum_deleted;\n\t\t\t    n = off;\n\t\t\t    dp->df_count[idx] -= line2 - dp->df_lnum[idx] + 1;\n\t\t\t    check_unchanged = TRUE;\n\t\t\t}\n\t\t\tdp->df_lnum[idx] = line1;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tif (last < line2)\n\t\t\t{\n\t\t\t    // 2. delete at end of diff\n\t\t\t    dp->df_count[idx] -= last - lnum_deleted + 1;\n\t\t\t    if (dp->df_next != NULL\n\t\t\t\t    && dp->df_next->df_lnum[idx] - 1 <= line2)\n\t\t\t    {\n\t\t\t\t// delete continues in next diff, only do\n\t\t\t\t// lines until that one\n\t\t\t\tn = dp->df_next->df_lnum[idx] - 1 - last;\n\t\t\t\tdeleted -= dp->df_next->df_lnum[idx]\n\t\t\t\t\t\t\t       - lnum_deleted;\n\t\t\t\tlnum_deleted = dp->df_next->df_lnum[idx];\n\t\t\t    }\n\t\t\t    else\n\t\t\t\tn = line2 - last;\n\t\t\t    check_unchanged = TRUE;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t    // 3. delete lines inside the diff\n\t\t\t    n = 0;\n\t\t\t    dp->df_count[idx] -= deleted;\n\t\t\t}\n\t\t    }\n\n\t\t    for (i = 0; i < DB_COUNT; ++i)\n\t\t\tif (tp->tp_diffbuf[i] != NULL && i != idx)\n\t\t\t{\n\t\t\t    dp->df_lnum[i] -= off;\n\t\t\t    dp->df_count[i] += n;\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (dp->df_lnum[idx] <= line1)\n\t\t    {\n\t\t\t// inserted lines somewhere in this diff\n\t\t\tdp->df_count[idx] += inserted;\n\t\t\tcheck_unchanged = TRUE;\n\t\t    }\n\t\t    else\n\t\t\t// inserted lines somewhere above this diff\n\t\t\tdp->df_lnum[idx] += inserted;\n\t\t}\n\n\t\tif (check_unchanged)\n\t\t    // Check if inserted lines are equal, may reduce the\n\t\t    // size of the diff.  TODO: also check for equal lines\n\t\t    // in the middle and perhaps split the block.\n\t\t    diff_check_unchanged(tp, dp);\n\t    }\n\t}\n\n\t// check if this block touches the previous one, may merge them.\n\tif (dprev != NULL && dprev->df_lnum[idx] + dprev->df_count[idx]\n\t\t\t\t\t\t\t  == dp->df_lnum[idx])\n\t{\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (tp->tp_diffbuf[i] != NULL)\n\t\t    dprev->df_count[i] += dp->df_count[i];\n\t    dprev->df_next = dp->df_next;\n\t    vim_free(dp);\n\t    dp = dprev->df_next;\n\t}\n\telse\n\t{\n\t    // Advance to next entry.\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n    }\n\n    dprev = NULL;\n    dp = tp->tp_first_diff;\n    while (dp != NULL)\n    {\n\t// All counts are zero, remove this entry.\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (tp->tp_diffbuf[i] != NULL && dp->df_count[i] != 0)\n\t\tbreak;\n\tif (i == DB_COUNT)\n\t{\n\t    dnext = dp->df_next;\n\t    vim_free(dp);\n\t    dp = dnext;\n\t    if (dprev == NULL)\n\t\ttp->tp_first_diff = dnext;\n\t    else\n\t\tdprev->df_next = dnext;\n\t}\n\telse\n\t{\n\t    // Advance to next entry.\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n\n    }\n\n    if (tp == curtab)\n    {\n\t// Don't redraw right away, this updates the diffs, which can be slow.\n\tneed_diff_redraw = TRUE;\n\n\t// Need to recompute the scroll binding, may remove or add filler\n\t// lines (e.g., when adding lines above w_topline). But it's slow when\n\t// making many changes, postpone until redrawing.\n\tdiff_need_scrollbind = TRUE;\n    }\n}\n\n/*\n * Allocate a new diff block and link it between \"dprev\" and \"dp\".\n */\n    static diff_T *\ndiff_alloc_new(tabpage_T *tp, diff_T *dprev, diff_T *dp)\n{\n    diff_T\t*dnew;\n\n    dnew = ALLOC_ONE(diff_T);\n    if (dnew != NULL)\n    {\n\tdnew->df_next = dp;\n\tif (dprev == NULL)\n\t    tp->tp_first_diff = dnew;\n\telse\n\t    dprev->df_next = dnew;\n    }\n    return dnew;\n}\n\n/*\n * Check if the diff block \"dp\" can be made smaller for lines at the start and\n * end that are equal.  Called after inserting lines.\n * This may result in a change where all buffers have zero lines, the caller\n * must take care of removing it.\n */\n    static void\ndiff_check_unchanged(tabpage_T *tp, diff_T *dp)\n{\n    int\t\ti_org;\n    int\t\ti_new;\n    int\t\toff_org, off_new;\n    char_u\t*line_org;\n    int\t\tdir = FORWARD;\n\n    // Find the first buffers, use it as the original, compare the other\n    // buffer lines against this one.\n    for (i_org = 0; i_org < DB_COUNT; ++i_org)\n\tif (tp->tp_diffbuf[i_org] != NULL)\n\t    break;\n    if (i_org == DB_COUNT)\t// safety check\n\treturn;\n\n    if (diff_check_sanity(tp, dp) == FAIL)\n\treturn;\n\n    // First check lines at the top, then at the bottom.\n    off_org = 0;\n    off_new = 0;\n    for (;;)\n    {\n\t// Repeat until a line is found which is different or the number of\n\t// lines has become zero.\n\twhile (dp->df_count[i_org] > 0)\n\t{\n\t    // Copy the line, the next ml_get() will invalidate it.\n\t    if (dir == BACKWARD)\n\t\toff_org = dp->df_count[i_org] - 1;\n\t    line_org = vim_strsave(ml_get_buf(tp->tp_diffbuf[i_org],\n\t\t\t\t\tdp->df_lnum[i_org] + off_org, FALSE));\n\t    if (line_org == NULL)\n\t\treturn;\n\t    for (i_new = i_org + 1; i_new < DB_COUNT; ++i_new)\n\t    {\n\t\tif (tp->tp_diffbuf[i_new] == NULL)\n\t\t    continue;\n\t\tif (dir == BACKWARD)\n\t\t    off_new = dp->df_count[i_new] - 1;\n\t\t// if other buffer doesn't have this line, it was inserted\n\t\tif (off_new < 0 || off_new >= dp->df_count[i_new])\n\t\t    break;\n\t\tif (diff_cmp(line_org, ml_get_buf(tp->tp_diffbuf[i_new],\n\t\t\t\t   dp->df_lnum[i_new] + off_new, FALSE)) != 0)\n\t\t    break;\n\t    }\n\t    vim_free(line_org);\n\n\t    // Stop when a line isn't equal in all diff buffers.\n\t    if (i_new != DB_COUNT)\n\t\tbreak;\n\n\t    // Line matched in all buffers, remove it from the diff.\n\t    for (i_new = i_org; i_new < DB_COUNT; ++i_new)\n\t\tif (tp->tp_diffbuf[i_new] != NULL)\n\t\t{\n\t\t    if (dir == FORWARD)\n\t\t\t++dp->df_lnum[i_new];\n\t\t    --dp->df_count[i_new];\n\t\t}\n\t}\n\tif (dir == BACKWARD)\n\t    break;\n\tdir = BACKWARD;\n    }\n}\n\n/*\n * Check if a diff block doesn't contain invalid line numbers.\n * This can happen when the diff program returns invalid results.\n */\n    static int\ndiff_check_sanity(tabpage_T *tp, diff_T *dp)\n{\n    int\t\ti;\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (tp->tp_diffbuf[i] != NULL)\n\t    if (dp->df_lnum[i] + dp->df_count[i] - 1\n\t\t\t\t      > tp->tp_diffbuf[i]->b_ml.ml_line_count)\n\t\treturn FAIL;\n    return OK;\n}\n\n/*\n * Mark all diff buffers in the current tab page for redraw.\n */\n    void\ndiff_redraw(\n    int\t\tdofold)\t    // also recompute the folds\n{\n    win_T\t*wp;\n    win_T\t*wp_other = NULL;\n    int\t\tused_max_fill_other = FALSE;\n    int\t\tused_max_fill_curwin = FALSE;\n    int\t\tn;\n\n    need_diff_redraw = FALSE;\n    FOR_ALL_WINDOWS(wp)\n\t// when closing windows or wiping buffers skip invalid window\n\tif (wp->w_p_diff && buf_valid(wp->w_buffer))\n\t{\n\t    redraw_win_later(wp, SOME_VALID);\n\t    if (wp != curwin)\n\t\twp_other = wp;\n#ifdef FEAT_FOLDING\n\t    if (dofold && foldmethodIsDiff(wp))\n\t\tfoldUpdateAll(wp);\n#endif\n\t    // A change may have made filler lines invalid, need to take care\n\t    // of that for other windows.\n\t    n = diff_check(wp, wp->w_topline);\n\t    if ((wp != curwin && wp->w_topfill > 0) || n > 0)\n\t    {\n\t\tif (wp->w_topfill > n)\n\t\t    wp->w_topfill = (n < 0 ? 0 : n);\n\t\telse if (n > 0 && n > wp->w_topfill)\n\t\t{\n\t\t    wp->w_topfill = n;\n\t\t    if (wp == curwin)\n\t\t\tused_max_fill_curwin = TRUE;\n\t\t    else if (wp_other != NULL)\n\t\t\tused_max_fill_other = TRUE;\n\t\t}\n\t\tcheck_topfill(wp, FALSE);\n\t    }\n\t}\n\n    if (wp_other != NULL && curwin->w_p_scb)\n    {\n\tif (used_max_fill_curwin)\n\t    // The current window was set to use the maximum number of filler\n\t    // lines, may need to reduce them.\n\t    diff_set_topline(wp_other, curwin);\n\telse if (used_max_fill_other)\n\t    // The other window was set to use the maximum number of filler\n\t    // lines, may need to reduce them.\n\t    diff_set_topline(curwin, wp_other);\n    }\n}\n\n    static void\nclear_diffin(diffin_T *din)\n{\n    if (din->din_fname == NULL)\n    {\n\tvim_free(din->din_mmfile.ptr);\n\tdin->din_mmfile.ptr = NULL;\n    }\n    else\n\tmch_remove(din->din_fname);\n}\n\n    static void\nclear_diffout(diffout_T *dout)\n{\n    if (dout->dout_fname == NULL)\n\tga_clear_strings(&dout->dout_ga);\n    else\n\tmch_remove(dout->dout_fname);\n}\n\n/*\n * Write buffer \"buf\" to a memory buffer.\n * Return FAIL for failure.\n */\n    static int\ndiff_write_buffer(buf_T *buf, diffin_T *din)\n{\n    linenr_T\tlnum;\n    char_u\t*s;\n    long\tlen = 0;\n    char_u\t*ptr;\n\n    // xdiff requires one big block of memory with all the text.\n    for (lnum = 1; lnum <= buf->b_ml.ml_line_count; ++lnum)\n\tlen += (long)STRLEN(ml_get_buf(buf, lnum, FALSE)) + 1;\n    ptr = alloc(len);\n    if (ptr == NULL)\n    {\n\t// Allocating memory failed.  This can happen, because we try to read\n\t// the whole buffer text into memory.  Set the failed flag, the diff\n\t// will be retried with external diff.  The flag is never reset.\n\tbuf->b_diff_failed = TRUE;\n\tif (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"Not enough memory to use internal diff for buffer \\\"%s\\\"\"),\n\t\t\t\t\t\t\t\t buf->b_fname);\n\t    verbose_leave();\n\t}\n\treturn FAIL;\n    }\n    din->din_mmfile.ptr = (char *)ptr;\n    din->din_mmfile.size = len;\n\n    len = 0;\n    for (lnum = 1; lnum <= buf->b_ml.ml_line_count; ++lnum)\n    {\n\tfor (s = ml_get_buf(buf, lnum, FALSE); *s != NUL; )\n\t{\n\t    if (diff_flags & DIFF_ICASE)\n\t    {\n\t\tint c;\n\t\tint\torig_len;\n\t\tchar_u\tcbuf[MB_MAXBYTES + 1];\n\n\t\tif (*s == NL)\n\t\t    c = NUL;\n\t\telse\n\t\t{\n\t\t    // xdiff doesn't support ignoring case, fold-case the text.\n\t\t    c = PTR2CHAR(s);\n\t\t    c = MB_CASEFOLD(c);\n\t\t}\n\t\torig_len = mb_ptr2len(s);\n\t\tif (mb_char2bytes(c, cbuf) != orig_len)\n\t\t    // TODO: handle byte length difference\n\t\t    mch_memmove(ptr + len, s, orig_len);\n\t\telse\n\t\t    mch_memmove(ptr + len, cbuf, orig_len);\n\n\t\ts += orig_len;\n\t\tlen += orig_len;\n\t    }\n\t    else\n\t    {\n\t\tptr[len++] = *s == NL ? NUL : *s;\n\t\ts++;\n\t    }\n\t}\n\tptr[len++] = NL;\n    }\n    return OK;\n}\n\n/*\n * Write buffer \"buf\" to file or memory buffer.\n * Return FAIL for failure.\n */\n    static int\ndiff_write(buf_T *buf, diffin_T *din)\n{\n    int\t\tr;\n    char_u\t*save_ff;\n    int\t\tsave_cmod_flags;\n\n    if (din->din_fname == NULL)\n\treturn diff_write_buffer(buf, din);\n\n    // Always use 'fileformat' set to \"unix\".\n    save_ff = buf->b_p_ff;\n    buf->b_p_ff = vim_strsave((char_u *)FF_UNIX);\n    save_cmod_flags = cmdmod.cmod_flags;\n    // Writing the buffer is an implementation detail of performing the diff,\n    // so it shouldn't update the '[ and '] marks.\n    cmdmod.cmod_flags |= CMOD_LOCKMARKS;\n    r = buf_write(buf, din->din_fname, NULL,\n\t\t\t(linenr_T)1, buf->b_ml.ml_line_count,\n\t\t\tNULL, FALSE, FALSE, FALSE, TRUE);\n    cmdmod.cmod_flags = save_cmod_flags;\n    free_string_option(buf->b_p_ff);\n    buf->b_p_ff = save_ff;\n    return r;\n}\n\n/*\n * Update the diffs for all buffers involved.\n */\n    static void\ndiff_try_update(\n\tdiffio_T    *dio,\n\tint\t    idx_orig,\n\texarg_T\t    *eap)\t// \"eap\" can be NULL\n{\n    buf_T\t*buf;\n    int\t\tidx_new;\n\n    if (dio->dio_internal)\n    {\n\tga_init2(&dio->dio_diff.dout_ga, sizeof(char *), 1000);\n    }\n    else\n    {\n\t// We need three temp file names.\n\tdio->dio_orig.din_fname = vim_tempname('o', TRUE);\n\tdio->dio_new.din_fname = vim_tempname('n', TRUE);\n\tdio->dio_diff.dout_fname = vim_tempname('d', TRUE);\n\tif (dio->dio_orig.din_fname == NULL\n\t\t|| dio->dio_new.din_fname == NULL\n\t\t|| dio->dio_diff.dout_fname == NULL)\n\t    goto theend;\n    }\n\n    // Check external diff is actually working.\n    if (!dio->dio_internal && check_external_diff(dio) == FAIL)\n\tgoto theend;\n\n    // :diffupdate!\n    if (eap != NULL && eap->forceit)\n\tfor (idx_new = idx_orig; idx_new < DB_COUNT; ++idx_new)\n\t{\n\t    buf = curtab->tp_diffbuf[idx_new];\n\t    if (buf_valid(buf))\n\t\tbuf_check_timestamp(buf, FALSE);\n\t}\n\n    // Write the first buffer to a tempfile or mmfile_t.\n    buf = curtab->tp_diffbuf[idx_orig];\n    if (diff_write(buf, &dio->dio_orig) == FAIL)\n\tgoto theend;\n\n    // Make a difference between the first buffer and every other.\n    for (idx_new = idx_orig + 1; idx_new < DB_COUNT; ++idx_new)\n    {\n\tbuf = curtab->tp_diffbuf[idx_new];\n\tif (buf == NULL || buf->b_ml.ml_mfp == NULL)\n\t    continue; // skip buffer that isn't loaded\n\n\t// Write the other buffer and diff with the first one.\n\tif (diff_write(buf, &dio->dio_new) == FAIL)\n\t    continue;\n\tif (diff_file(dio) == FAIL)\n\t    continue;\n\n\t// Read the diff output and add each entry to the diff list.\n\tdiff_read(idx_orig, idx_new, dio);\n\n\tclear_diffin(&dio->dio_new);\n\tclear_diffout(&dio->dio_diff);\n    }\n    clear_diffin(&dio->dio_orig);\n\ntheend:\n    vim_free(dio->dio_orig.din_fname);\n    vim_free(dio->dio_new.din_fname);\n    vim_free(dio->dio_diff.dout_fname);\n}\n\n/*\n * Return TRUE if the options are set to use the internal diff library.\n * Note that if the internal diff failed for one of the buffers, the external\n * diff will be used anyway.\n */\n    int\ndiff_internal(void)\n{\n    return (diff_flags & DIFF_INTERNAL) != 0\n#ifdef FEAT_EVAL\n\t&& *p_dex == NUL\n#endif\n\t;\n}\n\n/*\n * Return TRUE if the internal diff failed for one of the diff buffers.\n */\n    static int\ndiff_internal_failed(void)\n{\n    int idx;\n\n    // Only need to do something when there is another buffer.\n    for (idx = 0; idx < DB_COUNT; ++idx)\n\tif (curtab->tp_diffbuf[idx] != NULL\n\t\t&& curtab->tp_diffbuf[idx]->b_diff_failed)\n\t    return TRUE;\n    return FALSE;\n}\n\n/*\n * Completely update the diffs for the buffers involved.\n * When using the external \"diff\" command the buffers are written to a file,\n * also for unmodified buffers (the file could have been produced by\n * autocommands, e.g. the netrw plugin).\n */\n    void\nex_diffupdate(exarg_T *eap)\t// \"eap\" can be NULL\n{\n    int\t\tidx_orig;\n    int\t\tidx_new;\n    diffio_T\tdiffio;\n    int\t\thad_diffs = curtab->tp_first_diff != NULL;\n\n    if (diff_busy)\n    {\n\tdiff_need_update = TRUE;\n\treturn;\n    }\n\n    // Delete all diffblocks.\n    diff_clear(curtab);\n    curtab->tp_diff_invalid = FALSE;\n\n    // Use the first buffer as the original text.\n    for (idx_orig = 0; idx_orig < DB_COUNT; ++idx_orig)\n\tif (curtab->tp_diffbuf[idx_orig] != NULL)\n\t    break;\n    if (idx_orig == DB_COUNT)\n\tgoto theend;\n\n    // Only need to do something when there is another buffer.\n    for (idx_new = idx_orig + 1; idx_new < DB_COUNT; ++idx_new)\n\tif (curtab->tp_diffbuf[idx_new] != NULL)\n\t    break;\n    if (idx_new == DB_COUNT)\n\tgoto theend;\n\n    // Only use the internal method if it did not fail for one of the buffers.\n    CLEAR_FIELD(diffio);\n    diffio.dio_internal = diff_internal() && !diff_internal_failed();\n\n    diff_try_update(&diffio, idx_orig, eap);\n    if (diffio.dio_internal && diff_internal_failed())\n    {\n\t// Internal diff failed, use external diff instead.\n\tCLEAR_FIELD(diffio);\n\tdiff_try_update(&diffio, idx_orig, eap);\n    }\n\n    // force updating cursor position on screen\n    curwin->w_valid_cursor.lnum = 0;\n\ntheend:\n    // A redraw is needed if there were diffs and they were cleared, or there\n    // are diffs now, which means they got updated.\n    if (had_diffs || curtab->tp_first_diff != NULL)\n    {\n\tdiff_redraw(TRUE);\n\tapply_autocmds(EVENT_DIFFUPDATED, NULL, NULL, FALSE, curbuf);\n    }\n}\n\n/*\n * Do a quick test if \"diff\" really works.  Otherwise it looks like there\n * are no differences.  Can't use the return value, it's non-zero when\n * there are differences.\n */\n    static int\ncheck_external_diff(diffio_T *diffio)\n{\n    FILE\t*fd;\n    int\t\tok;\n    int\t\tio_error = FALSE;\n\n    // May try twice, first with \"-a\" and then without.\n    for (;;)\n    {\n\tok = FALSE;\n\tfd = mch_fopen((char *)diffio->dio_orig.din_fname, \"w\");\n\tif (fd == NULL)\n\t    io_error = TRUE;\n\telse\n\t{\n\t    if (fwrite(\"line1\\n\", (size_t)6, (size_t)1, fd) != 1)\n\t\tio_error = TRUE;\n\t    fclose(fd);\n\t    fd = mch_fopen((char *)diffio->dio_new.din_fname, \"w\");\n\t    if (fd == NULL)\n\t\tio_error = TRUE;\n\t    else\n\t    {\n\t\tif (fwrite(\"line2\\n\", (size_t)6, (size_t)1, fd) != 1)\n\t\t    io_error = TRUE;\n\t\tfclose(fd);\n\t\tfd = NULL;\n\t\tif (diff_file(diffio) == OK)\n\t\t    fd = mch_fopen((char *)diffio->dio_diff.dout_fname, \"r\");\n\t\tif (fd == NULL)\n\t\t    io_error = TRUE;\n\t\telse\n\t\t{\n\t\t    char_u\tlinebuf[LBUFLEN];\n\n\t\t    for (;;)\n\t\t    {\n\t\t\t// For normal diff there must be a line that contains\n\t\t\t// \"1c1\".  For unified diff \"@@ -1 +1 @@\".\n\t\t\tif (vim_fgets(linebuf, LBUFLEN, fd))\n\t\t\t    break;\n\t\t\tif (STRNCMP(linebuf, \"1c1\", 3) == 0\n\t\t\t\t|| STRNCMP(linebuf, \"@@ -1 +1 @@\", 11) == 0)\n\t\t\t    ok = TRUE;\n\t\t    }\n\t\t    fclose(fd);\n\t\t}\n\t\tmch_remove(diffio->dio_diff.dout_fname);\n\t\tmch_remove(diffio->dio_new.din_fname);\n\t    }\n\t    mch_remove(diffio->dio_orig.din_fname);\n\t}\n\n#ifdef FEAT_EVAL\n\t// When using 'diffexpr' break here.\n\tif (*p_dex != NUL)\n\t    break;\n#endif\n\n#if defined(MSWIN)\n\t// If the \"-a\" argument works, also check if \"--binary\" works.\n\tif (ok && diff_a_works == MAYBE && diff_bin_works == MAYBE)\n\t{\n\t    diff_a_works = TRUE;\n\t    diff_bin_works = TRUE;\n\t    continue;\n\t}\n\tif (!ok && diff_a_works == TRUE && diff_bin_works == TRUE)\n\t{\n\t    // Tried --binary, but it failed. \"-a\" works though.\n\t    diff_bin_works = FALSE;\n\t    ok = TRUE;\n\t}\n#endif\n\n\t// If we checked if \"-a\" works already, break here.\n\tif (diff_a_works != MAYBE)\n\t    break;\n\tdiff_a_works = ok;\n\n\t// If \"-a\" works break here, otherwise retry without \"-a\".\n\tif (ok)\n\t    break;\n    }\n    if (!ok)\n    {\n\tif (io_error)\n\t    emsg(_(e_cannot_read_or_write_temp_files));\n\temsg(_(e_cannot_create_diffs));\n\tdiff_a_works = MAYBE;\n#if defined(MSWIN)\n\tdiff_bin_works = MAYBE;\n#endif\n\treturn FAIL;\n    }\n    return OK;\n}\n\n/*\n * Invoke the xdiff function.\n */\n    static int\ndiff_file_internal(diffio_T *diffio)\n{\n    xpparam_t\t    param;\n    xdemitconf_t    emit_cfg;\n    xdemitcb_t\t    emit_cb;\n\n    CLEAR_FIELD(param);\n    CLEAR_FIELD(emit_cfg);\n    CLEAR_FIELD(emit_cb);\n\n    param.flags = diff_algorithm;\n\n    if (diff_flags & DIFF_IWHITE)\n\tparam.flags |= XDF_IGNORE_WHITESPACE_CHANGE;\n    if (diff_flags & DIFF_IWHITEALL)\n\tparam.flags |= XDF_IGNORE_WHITESPACE;\n    if (diff_flags & DIFF_IWHITEEOL)\n\tparam.flags |= XDF_IGNORE_WHITESPACE_AT_EOL;\n    if (diff_flags & DIFF_IBLANK)\n\tparam.flags |= XDF_IGNORE_BLANK_LINES;\n\n    emit_cfg.ctxlen = 0; // don't need any diff_context here\n    emit_cb.priv = &diffio->dio_diff;\n    emit_cfg.hunk_func = xdiff_out;\n    if (xdl_diff(&diffio->dio_orig.din_mmfile,\n\t\t&diffio->dio_new.din_mmfile,\n\t\t&param, &emit_cfg, &emit_cb) < 0)\n    {\n\temsg(_(e_problem_creating_internal_diff));\n\treturn FAIL;\n    }\n    return OK;\n}\n\n/*\n * Make a diff between files \"tmp_orig\" and \"tmp_new\", results in \"tmp_diff\".\n * return OK or FAIL;\n */\n    static int\ndiff_file(diffio_T *dio)\n{\n    char_u\t*cmd;\n    size_t\tlen;\n    char_u\t*tmp_orig = dio->dio_orig.din_fname;\n    char_u\t*tmp_new = dio->dio_new.din_fname;\n    char_u\t*tmp_diff = dio->dio_diff.dout_fname;\n\n#ifdef FEAT_EVAL\n    if (*p_dex != NUL)\n    {\n\t// Use 'diffexpr' to generate the diff file.\n\teval_diff(tmp_orig, tmp_new, tmp_diff);\n\treturn OK;\n    }\n    else\n#endif\n    // Use xdiff for generating the diff.\n    if (dio->dio_internal)\n    {\n\treturn diff_file_internal(dio);\n    }\n    else\n    {\n\tlen = STRLEN(tmp_orig) + STRLEN(tmp_new)\n\t\t\t\t      + STRLEN(tmp_diff) + STRLEN(p_srr) + 27;\n\tcmd = alloc(len);\n\tif (cmd == NULL)\n\t    return FAIL;\n\n\t// We don't want $DIFF_OPTIONS to get in the way.\n\tif (getenv(\"DIFF_OPTIONS\"))\n\t    vim_setenv((char_u *)\"DIFF_OPTIONS\", (char_u *)\"\");\n\n\t// Build the diff command and execute it.  Always use -a, binary\n\t// differences are of no use.  Ignore errors, diff returns\n\t// non-zero when differences have been found.\n\tvim_snprintf((char *)cmd, len, \"diff %s%s%s%s%s%s%s%s %s\",\n\t\tdiff_a_works == FALSE ? \"\" : \"-a \",\n#if defined(MSWIN)\n\t\tdiff_bin_works == TRUE ? \"--binary \" : \"\",\n#else\n\t\t\"\",\n#endif\n\t\t(diff_flags & DIFF_IWHITE) ? \"-b \" : \"\",\n\t\t(diff_flags & DIFF_IWHITEALL) ? \"-w \" : \"\",\n\t\t(diff_flags & DIFF_IWHITEEOL) ? \"-Z \" : \"\",\n\t\t(diff_flags & DIFF_IBLANK) ? \"-B \" : \"\",\n\t\t(diff_flags & DIFF_ICASE) ? \"-i \" : \"\",\n\t\ttmp_orig, tmp_new);\n\tappend_redir(cmd, (int)len, p_srr, tmp_diff);\n\tblock_autocmds();\t// avoid ShellCmdPost stuff\n\t(void)call_shell(cmd, SHELL_FILTER|SHELL_SILENT|SHELL_DOOUT);\n\tunblock_autocmds();\n\tvim_free(cmd);\n\treturn OK;\n    }\n}\n\n/*\n * Create a new version of a file from the current buffer and a diff file.\n * The buffer is written to a file, also for unmodified buffers (the file\n * could have been produced by autocommands, e.g. the netrw plugin).\n */\n    void\nex_diffpatch(exarg_T *eap)\n{\n    char_u\t*tmp_orig;\t// name of original temp file\n    char_u\t*tmp_new;\t// name of patched temp file\n    char_u\t*buf = NULL;\n    size_t\tbuflen;\n    win_T\t*old_curwin = curwin;\n    char_u\t*newname = NULL;\t// name of patched file buffer\n#ifdef UNIX\n    char_u\tdirbuf[MAXPATHL];\n    char_u\t*fullname = NULL;\n#endif\n#ifdef FEAT_BROWSE\n    char_u\t*browseFile = NULL;\n    int\t\tsave_cmod_flags = cmdmod.cmod_flags;\n#endif\n    stat_T\tst;\n    char_u\t*esc_name = NULL;\n\n#ifdef FEAT_BROWSE\n    if (cmdmod.cmod_flags & CMOD_BROWSE)\n    {\n\tbrowseFile = do_browse(0, (char_u *)_(\"Patch file\"),\n\t\t\t eap->arg, NULL, NULL,\n\t\t\t (char_u *)_(BROWSE_FILTER_ALL_FILES), NULL);\n\tif (browseFile == NULL)\n\t    return;\t\t// operation cancelled\n\teap->arg = browseFile;\n\tcmdmod.cmod_flags &= ~CMOD_BROWSE; // don't let do_ecmd() browse again\n    }\n#endif\n\n    // We need two temp file names.\n    tmp_orig = vim_tempname('o', FALSE);\n    tmp_new = vim_tempname('n', FALSE);\n    if (tmp_orig == NULL || tmp_new == NULL)\n\tgoto theend;\n\n    // Write the current buffer to \"tmp_orig\".\n    if (buf_write(curbuf, tmp_orig, NULL,\n\t\t(linenr_T)1, curbuf->b_ml.ml_line_count,\n\t\t\t\t     NULL, FALSE, FALSE, FALSE, TRUE) == FAIL)\n\tgoto theend;\n\n#ifdef UNIX\n    // Get the absolute path of the patchfile, changing directory below.\n    fullname = FullName_save(eap->arg, FALSE);\n#endif\n    esc_name = vim_strsave_shellescape(\n# ifdef UNIX\n\t\t    fullname != NULL ? fullname :\n# endif\n\t\t    eap->arg, TRUE, TRUE);\n    if (esc_name == NULL)\n\tgoto theend;\n    buflen = STRLEN(tmp_orig) + STRLEN(esc_name) + STRLEN(tmp_new) + 16;\n    buf = alloc(buflen);\n    if (buf == NULL)\n\tgoto theend;\n\n#ifdef UNIX\n    // Temporarily chdir to /tmp, to avoid patching files in the current\n    // directory when the patch file contains more than one patch.  When we\n    // have our own temp dir use that instead, it will be cleaned up when we\n    // exit (any .rej files created).  Don't change directory if we can't\n    // return to the current.\n    if (mch_dirname(dirbuf, MAXPATHL) != OK || mch_chdir((char *)dirbuf) != 0)\n\tdirbuf[0] = NUL;\n    else\n    {\n# ifdef TEMPDIRNAMES\n\tif (vim_tempdir != NULL)\n\t    vim_ignored = mch_chdir((char *)vim_tempdir);\n\telse\n# endif\n\t    vim_ignored = mch_chdir(\"/tmp\");\n\tshorten_fnames(TRUE);\n    }\n#endif\n\n#ifdef FEAT_EVAL\n    if (*p_pex != NUL)\n\t// Use 'patchexpr' to generate the new file.\n\teval_patch(tmp_orig,\n# ifdef UNIX\n\t\tfullname != NULL ? fullname :\n# endif\n\t\teap->arg, tmp_new);\n    else\n#endif\n    {\n\t// Build the patch command and execute it.  Ignore errors.  Switch to\n\t// cooked mode to allow the user to respond to prompts.\n\tvim_snprintf((char *)buf, buflen, \"patch -o %s %s < %s\",\n\t\t\t\t\t\t  tmp_new, tmp_orig, esc_name);\n\tblock_autocmds();\t// Avoid ShellCmdPost stuff\n\t(void)call_shell(buf, SHELL_FILTER | SHELL_COOKED);\n\tunblock_autocmds();\n    }\n\n#ifdef UNIX\n    if (dirbuf[0] != NUL)\n    {\n\tif (mch_chdir((char *)dirbuf) != 0)\n\t    emsg(_(e_cannot_go_back_to_previous_directory));\n\tshorten_fnames(TRUE);\n    }\n#endif\n\n    // patch probably has written over the screen\n    redraw_later(CLEAR);\n\n    // Delete any .orig or .rej file created.\n    STRCPY(buf, tmp_new);\n    STRCAT(buf, \".orig\");\n    mch_remove(buf);\n    STRCPY(buf, tmp_new);\n    STRCAT(buf, \".rej\");\n    mch_remove(buf);\n\n    // Only continue if the output file was created.\n    if (mch_stat((char *)tmp_new, &st) < 0 || st.st_size == 0)\n\temsg(_(e_cannot_read_patch_output));\n    else\n    {\n\tif (curbuf->b_fname != NULL)\n\t{\n\t    newname = vim_strnsave(curbuf->b_fname,\n\t\t\t\t\t\t  STRLEN(curbuf->b_fname) + 4);\n\t    if (newname != NULL)\n\t\tSTRCAT(newname, \".new\");\n\t}\n\n#ifdef FEAT_GUI\n\tneed_mouse_correct = TRUE;\n#endif\n\t// don't use a new tab page, each tab page has its own diffs\n\tcmdmod.cmod_tab = 0;\n\n\tif (win_split(0, (diff_flags & DIFF_VERTICAL) ? WSP_VERT : 0) != FAIL)\n\t{\n\t    // Pretend it was a \":split fname\" command\n\t    eap->cmdidx = CMD_split;\n\t    eap->arg = tmp_new;\n\t    do_exedit(eap, old_curwin);\n\n\t    // check that split worked and editing tmp_new\n\t    if (curwin != old_curwin && win_valid(old_curwin))\n\t    {\n\t\t// Set 'diff', 'scrollbind' on and 'wrap' off.\n\t\tdiff_win_options(curwin, TRUE);\n\t\tdiff_win_options(old_curwin, TRUE);\n\n\t\tif (newname != NULL)\n\t\t{\n\t\t    // do a \":file filename.new\" on the patched buffer\n\t\t    eap->arg = newname;\n\t\t    ex_file(eap);\n\n\t\t    // Do filetype detection with the new name.\n\t\t    if (au_has_group((char_u *)\"filetypedetect\"))\n\t\t\tdo_cmdline_cmd((char_u *)\":doau filetypedetect BufRead\");\n\t\t}\n\t    }\n\t}\n    }\n\ntheend:\n    if (tmp_orig != NULL)\n\tmch_remove(tmp_orig);\n    vim_free(tmp_orig);\n    if (tmp_new != NULL)\n\tmch_remove(tmp_new);\n    vim_free(tmp_new);\n    vim_free(newname);\n    vim_free(buf);\n#ifdef UNIX\n    vim_free(fullname);\n#endif\n    vim_free(esc_name);\n#ifdef FEAT_BROWSE\n    vim_free(browseFile);\n    cmdmod.cmod_flags = save_cmod_flags;\n#endif\n}\n\n/*\n * Split the window and edit another file, setting options to show the diffs.\n */\n    void\nex_diffsplit(exarg_T *eap)\n{\n    win_T\t*old_curwin = curwin;\n    bufref_T\told_curbuf;\n\n    set_bufref(&old_curbuf, curbuf);\n#ifdef FEAT_GUI\n    need_mouse_correct = TRUE;\n#endif\n    // Need to compute w_fraction when no redraw happened yet.\n    validate_cursor();\n    set_fraction(curwin);\n\n    // don't use a new tab page, each tab page has its own diffs\n    cmdmod.cmod_tab = 0;\n\n    if (win_split(0, (diff_flags & DIFF_VERTICAL) ? WSP_VERT : 0) != FAIL)\n    {\n\t// Pretend it was a \":split fname\" command\n\teap->cmdidx = CMD_split;\n\tcurwin->w_p_diff = TRUE;\n\tdo_exedit(eap, old_curwin);\n\n\tif (curwin != old_curwin)\t\t// split must have worked\n\t{\n\t    // Set 'diff', 'scrollbind' on and 'wrap' off.\n\t    diff_win_options(curwin, TRUE);\n\t    if (win_valid(old_curwin))\n\t    {\n\t\tdiff_win_options(old_curwin, TRUE);\n\n\t\tif (bufref_valid(&old_curbuf))\n\t\t    // Move the cursor position to that of the old window.\n\t\t    curwin->w_cursor.lnum = diff_get_corresponding_line(\n\t\t\t    old_curbuf.br_buf, old_curwin->w_cursor.lnum);\n\t    }\n\t    // Now that lines are folded scroll to show the cursor at the same\n\t    // relative position.\n\t    scroll_to_fraction(curwin, curwin->w_height);\n\t}\n    }\n}\n\n/*\n * Set options to show diffs for the current window.\n */\n    void\nex_diffthis(exarg_T *eap UNUSED)\n{\n    // Set 'diff', 'scrollbind' on and 'wrap' off.\n    diff_win_options(curwin, TRUE);\n}\n\n    static void\nset_diff_option(win_T *wp, int value)\n{\n    win_T *old_curwin = curwin;\n\n    curwin = wp;\n    curbuf = curwin->w_buffer;\n    ++curbuf_lock;\n    set_option_value_give_err((char_u *)\"diff\", (long)value, NULL, OPT_LOCAL);\n    --curbuf_lock;\n    curwin = old_curwin;\n    curbuf = curwin->w_buffer;\n}\n\n/*\n * Set options in window \"wp\" for diff mode.\n */\n    void\ndiff_win_options(\n    win_T\t*wp,\n    int\t\taddbuf)\t\t// Add buffer to diff.\n{\n# ifdef FEAT_FOLDING\n    win_T *old_curwin = curwin;\n\n    // close the manually opened folds\n    curwin = wp;\n    newFoldLevel();\n    curwin = old_curwin;\n# endif\n\n    // Use 'scrollbind' and 'cursorbind' when available\n    if (!wp->w_p_diff)\n\twp->w_p_scb_save = wp->w_p_scb;\n    wp->w_p_scb = TRUE;\n    if (!wp->w_p_diff)\n\twp->w_p_crb_save = wp->w_p_crb;\n    wp->w_p_crb = TRUE;\n    if (!(diff_flags & DIFF_FOLLOWWRAP))\n    {\n\tif (!wp->w_p_diff)\n\t    wp->w_p_wrap_save = wp->w_p_wrap;\n\twp->w_p_wrap = FALSE;\n    }\n# ifdef FEAT_FOLDING\n    if (!wp->w_p_diff)\n    {\n\tif (wp->w_p_diff_saved)\n\t    free_string_option(wp->w_p_fdm_save);\n\twp->w_p_fdm_save = vim_strsave(wp->w_p_fdm);\n    }\n    set_string_option_direct_in_win(wp, (char_u *)\"fdm\", -1, (char_u *)\"diff\",\n\t\t\t\t\t\t       OPT_LOCAL|OPT_FREE, 0);\n    if (!wp->w_p_diff)\n    {\n\twp->w_p_fdc_save = wp->w_p_fdc;\n\twp->w_p_fen_save = wp->w_p_fen;\n\twp->w_p_fdl_save = wp->w_p_fdl;\n    }\n    wp->w_p_fdc = diff_foldcolumn;\n    wp->w_p_fen = TRUE;\n    wp->w_p_fdl = 0;\n    foldUpdateAll(wp);\n    // make sure topline is not halfway a fold\n    changed_window_setting_win(wp);\n# endif\n    if (vim_strchr(p_sbo, 'h') == NULL)\n\tdo_cmdline_cmd((char_u *)\"set sbo+=hor\");\n    // Save the current values, to be restored in ex_diffoff().\n    wp->w_p_diff_saved = TRUE;\n\n    set_diff_option(wp, TRUE);\n\n    if (addbuf)\n\tdiff_buf_add(wp->w_buffer);\n    redraw_win_later(wp, NOT_VALID);\n}\n\n/*\n * Set options not to show diffs.  For the current window or all windows.\n * Only in the current tab page.\n */\n    void\nex_diffoff(exarg_T *eap)\n{\n    win_T\t*wp;\n    int\t\tdiffwin = FALSE;\n\n    FOR_ALL_WINDOWS(wp)\n    {\n\tif (eap->forceit ? wp->w_p_diff : wp == curwin)\n\t{\n\t    // Set 'diff' off. If option values were saved in\n\t    // diff_win_options(), restore the ones whose settings seem to have\n\t    // been left over from diff mode.\n\t    set_diff_option(wp, FALSE);\n\n\t    if (wp->w_p_diff_saved)\n\t    {\n\n\t\tif (wp->w_p_scb)\n\t\t    wp->w_p_scb = wp->w_p_scb_save;\n\t\tif (wp->w_p_crb)\n\t\t    wp->w_p_crb = wp->w_p_crb_save;\n\t\tif (!(diff_flags & DIFF_FOLLOWWRAP))\n\t\t{\n\t\t    if (!wp->w_p_wrap)\n\t\t\twp->w_p_wrap = wp->w_p_wrap_save;\n\t\t}\n#ifdef FEAT_FOLDING\n\t\tfree_string_option(wp->w_p_fdm);\n\t\twp->w_p_fdm = vim_strsave(\n\t\t    *wp->w_p_fdm_save ? wp->w_p_fdm_save : (char_u*)\"manual\");\n\n\t\tif (wp->w_p_fdc == diff_foldcolumn)\n\t\t    wp->w_p_fdc = wp->w_p_fdc_save;\n\t\tif (wp->w_p_fdl == 0)\n\t\t    wp->w_p_fdl = wp->w_p_fdl_save;\n\n\t\t// Only restore 'foldenable' when 'foldmethod' is not\n\t\t// \"manual\", otherwise we continue to show the diff folds.\n\t\tif (wp->w_p_fen)\n\t\t    wp->w_p_fen = foldmethodIsManual(wp) ? FALSE\n\t\t\t\t\t\t\t : wp->w_p_fen_save;\n\n\t\tfoldUpdateAll(wp);\n#endif\n\t    }\n\t    // remove filler lines\n\t    wp->w_topfill = 0;\n\n\t    // make sure topline is not halfway a fold and cursor is\n\t    // invalidated\n\t    changed_window_setting_win(wp);\n\n\t    // Note: 'sbo' is not restored, it's a global option.\n\t    diff_buf_adjust(wp);\n\t}\n\tdiffwin |= wp->w_p_diff;\n    }\n\n    // Also remove hidden buffers from the list.\n    if (eap->forceit)\n\tdiff_buf_clear();\n\n    if (!diffwin)\n    {\n\tdiff_need_update = FALSE;\n\tcurtab->tp_diff_invalid = FALSE;\n\tcurtab->tp_diff_update = FALSE;\n\tdiff_clear(curtab);\n    }\n\n    // Remove \"hor\" from 'scrollopt' if there are no diff windows left.\n    if (!diffwin && vim_strchr(p_sbo, 'h') != NULL)\n\tdo_cmdline_cmd((char_u *)\"set sbo-=hor\");\n}\n\n/*\n * Read the diff output and add each entry to the diff list.\n */\n    static void\ndiff_read(\n    int\t\tidx_orig,\t// idx of original file\n    int\t\tidx_new,\t// idx of new file\n    diffio_T   *dio)\t\t// diff output\n{\n    FILE\t*fd = NULL;\n    int\t\tline_idx = 0;\n    diff_T\t*dprev = NULL;\n    diff_T\t*dp = curtab->tp_first_diff;\n    diff_T\t*dn, *dpl;\n    diffout_T   *dout = &dio->dio_diff;\n    char_u\tlinebuf[LBUFLEN];   // only need to hold the diff line\n    char_u\t*line;\n    long\toff;\n    int\t\ti;\n    int\t\tnotset = TRUE;\t    // block \"*dp\" not set yet\n    diffhunk_T\t*hunk = NULL;\t    // init to avoid gcc warning\n\n    enum {\n\tDIFF_ED,\n\tDIFF_UNIFIED,\n\tDIFF_NONE\n    } diffstyle = DIFF_NONE;\n\n    if (dout->dout_fname == NULL)\n    {\n\tdiffstyle = DIFF_UNIFIED;\n    }\n    else\n    {\n\tfd = mch_fopen((char *)dout->dout_fname, \"r\");\n\tif (fd == NULL)\n\t{\n\t    emsg(_(e_cannot_read_diff_output));\n\t    return;\n\t}\n    }\n\n    if (!dio->dio_internal)\n    {\n\thunk = ALLOC_ONE(diffhunk_T);\n\tif (hunk == NULL)\n\t{\n\t    if (fd != NULL)\n\t\tfclose(fd);\n\t    return;\n\t}\n    }\n\n    for (;;)\n    {\n\tif (dio->dio_internal)\n\t{\n\t    if (line_idx >= dout->dout_ga.ga_len) {\n\t\tbreak;      // did last line\n\t    }\n\t    hunk = ((diffhunk_T **)dout->dout_ga.ga_data)[line_idx++];\n\t}\n\telse\n\t{\n\t    if (fd == NULL)\n\t    {\n\t\tif (line_idx >= dout->dout_ga.ga_len)\n\t\t    break;\t    // did last line\n\t\tline = ((char_u **)dout->dout_ga.ga_data)[line_idx++];\n\t    }\n\t    else\n\t    {\n\t\tif (vim_fgets(linebuf, LBUFLEN, fd))\n\t\t    break;\t\t// end of file\n\t\tline = linebuf;\n\t    }\n\n\t    if (diffstyle == DIFF_NONE)\n\t    {\n\t\t// Determine diff style.\n\t\t// ed like diff looks like this:\n\t\t// {first}[,{last}]c{first}[,{last}]\n\t\t// {first}a{first}[,{last}]\n\t\t// {first}[,{last}]d{first}\n\t\t//\n\t\t// unified diff looks like this:\n\t\t// --- file1       2018-03-20 13:23:35.783153140 +0100\n\t\t// +++ file2       2018-03-20 13:23:41.183156066 +0100\n\t\t// @@ -1,3 +1,5 @@\n\t\tif (isdigit(*line))\n\t\t    diffstyle = DIFF_ED;\n\t\telse if ((STRNCMP(line, \"@@ \", 3) == 0))\n\t\t    diffstyle = DIFF_UNIFIED;\n\t\telse if ((STRNCMP(line, \"--- \", 4) == 0)\n\t\t\t&& (vim_fgets(linebuf, LBUFLEN, fd) == 0)\n\t\t\t&& (STRNCMP(line, \"+++ \", 4) == 0)\n\t\t\t&& (vim_fgets(linebuf, LBUFLEN, fd) == 0)\n\t\t\t&& (STRNCMP(line, \"@@ \", 3) == 0))\n\t\t    diffstyle = DIFF_UNIFIED;\n\t\telse\n\t\t    // Format not recognized yet, skip over this line.  Cygwin\n\t\t    // diff may put a warning at the start of the file.\n\t\t    continue;\n\t    }\n\n\t    if (diffstyle == DIFF_ED)\n\t    {\n\t\tif (!isdigit(*line))\n\t\t    continue;\t// not the start of a diff block\n\t\tif (parse_diff_ed(line, hunk) == FAIL)\n\t\t    continue;\n\t    }\n\t    else if (diffstyle == DIFF_UNIFIED)\n\t    {\n\t\tif (STRNCMP(line, \"@@ \", 3)  != 0)\n\t\t    continue;\t// not the start of a diff block\n\t\tif (parse_diff_unified(line, hunk) == FAIL)\n\t\t    continue;\n\t    }\n\t    else\n\t    {\n\t\temsg(_(e_invalid_diff_format));\n\t\tbreak;\n\t    }\n\t}\n\n\t// Go over blocks before the change, for which orig and new are equal.\n\t// Copy blocks from orig to new.\n\twhile (dp != NULL\n\t\t&& hunk->lnum_orig > dp->df_lnum[idx_orig]\n\t\t\t\t\t\t      + dp->df_count[idx_orig])\n\t{\n\t    if (notset)\n\t\tdiff_copy_entry(dprev, dp, idx_orig, idx_new);\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t    notset = TRUE;\n\t}\n\n\tif (dp != NULL\n\t\t&& hunk->lnum_orig <= dp->df_lnum[idx_orig]\n\t\t\t\t\t\t       + dp->df_count[idx_orig]\n\t\t&& hunk->lnum_orig + hunk->count_orig >= dp->df_lnum[idx_orig])\n\t{\n\t    // New block overlaps with existing block(s).\n\t    // First find last block that overlaps.\n\t    for (dpl = dp; dpl->df_next != NULL; dpl = dpl->df_next)\n\t\tif (hunk->lnum_orig + hunk->count_orig\n\t\t\t\t\t     < dpl->df_next->df_lnum[idx_orig])\n\t\t    break;\n\n\t    // If the newly found block starts before the old one, set the\n\t    // start back a number of lines.\n\t    off = dp->df_lnum[idx_orig] - hunk->lnum_orig;\n\t    if (off > 0)\n\t    {\n\t\tfor (i = idx_orig; i < idx_new; ++i)\n\t\t    if (curtab->tp_diffbuf[i] != NULL)\n\t\t\tdp->df_lnum[i] -= off;\n\t\tdp->df_lnum[idx_new] = hunk->lnum_new;\n\t\tdp->df_count[idx_new] = hunk->count_new;\n\t    }\n\t    else if (notset)\n\t    {\n\t\t// new block inside existing one, adjust new block\n\t\tdp->df_lnum[idx_new] = hunk->lnum_new + off;\n\t\tdp->df_count[idx_new] = hunk->count_new - off;\n\t    }\n\t    else\n\t\t// second overlap of new block with existing block\n\t\tdp->df_count[idx_new] += hunk->count_new - hunk->count_orig\n\t\t    + dpl->df_lnum[idx_orig] + dpl->df_count[idx_orig]\n\t\t    - (dp->df_lnum[idx_orig] + dp->df_count[idx_orig]);\n\n\t    // Adjust the size of the block to include all the lines to the\n\t    // end of the existing block or the new diff, whatever ends last.\n\t    off = (hunk->lnum_orig + hunk->count_orig)\n\t\t\t - (dpl->df_lnum[idx_orig] + dpl->df_count[idx_orig]);\n\t    if (off < 0)\n\t    {\n\t\t// new change ends in existing block, adjust the end if not\n\t\t// done already\n\t\tif (notset)\n\t\t    dp->df_count[idx_new] += -off;\n\t\toff = 0;\n\t    }\n\t    for (i = idx_orig; i < idx_new; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL)\n\t\t    dp->df_count[i] = dpl->df_lnum[i] + dpl->df_count[i]\n\t\t\t\t\t\t       - dp->df_lnum[i] + off;\n\n\t    // Delete the diff blocks that have been merged into one.\n\t    dn = dp->df_next;\n\t    dp->df_next = dpl->df_next;\n\t    while (dn != dp->df_next)\n\t    {\n\t\tdpl = dn->df_next;\n\t\tvim_free(dn);\n\t\tdn = dpl;\n\t    }\n\t}\n\telse\n\t{\n\t    // Allocate a new diffblock.\n\t    dp = diff_alloc_new(curtab, dprev, dp);\n\t    if (dp == NULL)\n\t\tgoto done;\n\n\t    dp->df_lnum[idx_orig] = hunk->lnum_orig;\n\t    dp->df_count[idx_orig] = hunk->count_orig;\n\t    dp->df_lnum[idx_new] = hunk->lnum_new;\n\t    dp->df_count[idx_new] = hunk->count_new;\n\n\t    // Set values for other buffers, these must be equal to the\n\t    // original buffer, otherwise there would have been a change\n\t    // already.\n\t    for (i = idx_orig + 1; i < idx_new; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL)\n\t\t    diff_copy_entry(dprev, dp, idx_orig, i);\n\t}\n\tnotset = FALSE;\t\t// \"*dp\" has been set\n    }\n\n    // for remaining diff blocks orig and new are equal\n    while (dp != NULL)\n    {\n\tif (notset)\n\t    diff_copy_entry(dprev, dp, idx_orig, idx_new);\n\tdprev = dp;\n\tdp = dp->df_next;\n\tnotset = TRUE;\n    }\n\ndone:\n    if (!dio->dio_internal)\n\tvim_free(hunk);\n\n    if (fd != NULL)\n\tfclose(fd);\n}\n\n/*\n * Copy an entry at \"dp\" from \"idx_orig\" to \"idx_new\".\n */\n    static void\ndiff_copy_entry(\n    diff_T\t*dprev,\n    diff_T\t*dp,\n    int\t\tidx_orig,\n    int\t\tidx_new)\n{\n    long\toff;\n\n    if (dprev == NULL)\n\toff = 0;\n    else\n\toff = (dprev->df_lnum[idx_orig] + dprev->df_count[idx_orig])\n\t    - (dprev->df_lnum[idx_new] + dprev->df_count[idx_new]);\n    dp->df_lnum[idx_new] = dp->df_lnum[idx_orig] - off;\n    dp->df_count[idx_new] = dp->df_count[idx_orig];\n}\n\n/*\n * Clear the list of diffblocks for tab page \"tp\".\n */\n    void\ndiff_clear(tabpage_T *tp)\n{\n    diff_T\t*p, *next_p;\n\n    for (p = tp->tp_first_diff; p != NULL; p = next_p)\n    {\n\tnext_p = p->df_next;\n\tvim_free(p);\n    }\n    tp->tp_first_diff = NULL;\n}\n\n/*\n * Check diff status for line \"lnum\" in buffer \"buf\":\n * Returns 0 for nothing special\n * Returns -1 for a line that should be highlighted as changed.\n * Returns -2 for a line that should be highlighted as added/deleted.\n * Returns > 0 for inserting that many filler lines above it (never happens\n * when 'diffopt' doesn't contain \"filler\").\n * This should only be used for windows where 'diff' is set.\n */\n    int\ndiff_check(win_T *wp, linenr_T lnum)\n{\n    int\t\tidx;\t\t// index in tp_diffbuf[] for this buffer\n    diff_T\t*dp;\n    int\t\tmaxcount;\n    int\t\ti;\n    buf_T\t*buf = wp->w_buffer;\n    int\t\tcmp;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL || !wp->w_p_diff)\t// no diffs at all\n\treturn 0;\n\n    // safety check: \"lnum\" must be a buffer line\n    if (lnum < 1 || lnum > buf->b_ml.ml_line_count + 1)\n\treturn 0;\n\n    idx = diff_buf_idx(buf);\n    if (idx == DB_COUNT)\n\treturn 0;\t\t// no diffs for buffer \"buf\"\n\n#ifdef FEAT_FOLDING\n    // A closed fold never has filler lines.\n    if (hasFoldingWin(wp, lnum, NULL, NULL, TRUE, NULL))\n\treturn 0;\n#endif\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n    if (dp == NULL || lnum < dp->df_lnum[idx])\n\treturn 0;\n\n    if (lnum < dp->df_lnum[idx] + dp->df_count[idx])\n    {\n\tint\tzero = FALSE;\n\n\t// Changed or inserted line.  If the other buffers have a count of\n\t// zero, the lines were inserted.  If the other buffers have the same\n\t// count, check if the lines are identical.\n\tcmp = FALSE;\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (i != idx && curtab->tp_diffbuf[i] != NULL)\n\t    {\n\t\tif (dp->df_count[i] == 0)\n\t\t    zero = TRUE;\n\t\telse\n\t\t{\n\t\t    if (dp->df_count[i] != dp->df_count[idx])\n\t\t\treturn -1;\t    // nr of lines changed.\n\t\t    cmp = TRUE;\n\t\t}\n\t    }\n\tif (cmp)\n\t{\n\t    // Compare all lines.  If they are equal the lines were inserted\n\t    // in some buffers, deleted in others, but not changed.\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (i != idx && curtab->tp_diffbuf[i] != NULL\n\t\t\t\t\t\t      && dp->df_count[i] != 0)\n\t\t    if (!diff_equal_entry(dp, idx, i))\n\t\t\treturn -1;\n\t}\n\t// If there is no buffer with zero lines then there is no difference\n\t// any longer.  Happens when making a change (or undo) that removes\n\t// the difference.  Can't remove the entry here, we might be halfway\n\t// updating the window.  Just report the text as unchanged.  Other\n\t// windows might still show the change though.\n\tif (zero == FALSE)\n\t    return 0;\n\treturn -2;\n    }\n\n    // If 'diffopt' doesn't contain \"filler\", return 0.\n    if (!(diff_flags & DIFF_FILLER))\n\treturn 0;\n\n    // Insert filler lines above the line just below the change.  Will return\n    // 0 when this buf had the max count.\n    maxcount = 0;\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL && dp->df_count[i] > maxcount)\n\t    maxcount = dp->df_count[i];\n    return maxcount - dp->df_count[idx];\n}\n\n/*\n * Compare two entries in diff \"*dp\" and return TRUE if they are equal.\n */\n    static int\ndiff_equal_entry(diff_T *dp, int idx1, int idx2)\n{\n    int\t\ti;\n    char_u\t*line;\n    int\t\tcmp;\n\n    if (dp->df_count[idx1] != dp->df_count[idx2])\n\treturn FALSE;\n    if (diff_check_sanity(curtab, dp) == FAIL)\n\treturn FALSE;\n    for (i = 0; i < dp->df_count[idx1]; ++i)\n    {\n\tline = vim_strsave(ml_get_buf(curtab->tp_diffbuf[idx1],\n\t\t\t\t\t       dp->df_lnum[idx1] + i, FALSE));\n\tif (line == NULL)\n\t    return FALSE;\n\tcmp = diff_cmp(line, ml_get_buf(curtab->tp_diffbuf[idx2],\n\t\t\t\t\t       dp->df_lnum[idx2] + i, FALSE));\n\tvim_free(line);\n\tif (cmp != 0)\n\t    return FALSE;\n    }\n    return TRUE;\n}\n\n/*\n * Compare the characters at \"p1\" and \"p2\".  If they are equal (possibly\n * ignoring case) return TRUE and set \"len\" to the number of bytes.\n */\n    static int\ndiff_equal_char(char_u *p1, char_u *p2, int *len)\n{\n    int l  = (*mb_ptr2len)(p1);\n\n    if (l != (*mb_ptr2len)(p2))\n\treturn FALSE;\n    if (l > 1)\n    {\n\tif (STRNCMP(p1, p2, l) != 0\n\t\t&& (!enc_utf8\n\t\t    || !(diff_flags & DIFF_ICASE)\n\t\t    || utf_fold(utf_ptr2char(p1))\n\t\t\t\t\t\t!= utf_fold(utf_ptr2char(p2))))\n\t    return FALSE;\n\t*len = l;\n    }\n    else\n    {\n\tif ((*p1 != *p2)\n\t\t&& (!(diff_flags & DIFF_ICASE)\n\t\t    || TOLOWER_LOC(*p1) != TOLOWER_LOC(*p2)))\n\t    return FALSE;\n\t*len = 1;\n    }\n    return TRUE;\n}\n\n/*\n * Compare strings \"s1\" and \"s2\" according to 'diffopt'.\n * Return non-zero when they are different.\n */\n    static int\ndiff_cmp(char_u *s1, char_u *s2)\n{\n    char_u\t*p1, *p2;\n    int\t\tl;\n\n    if ((diff_flags & DIFF_IBLANK)\n\t    && (*skipwhite(s1) == NUL || *skipwhite(s2) == NUL))\n\treturn 0;\n\n    if ((diff_flags & (DIFF_ICASE | ALL_WHITE_DIFF)) == 0)\n\treturn STRCMP(s1, s2);\n    if ((diff_flags & DIFF_ICASE) && !(diff_flags & ALL_WHITE_DIFF))\n\treturn MB_STRICMP(s1, s2);\n\n    p1 = s1;\n    p2 = s2;\n\n    // Ignore white space changes and possibly ignore case.\n    while (*p1 != NUL && *p2 != NUL)\n    {\n\tif (((diff_flags & DIFF_IWHITE)\n\t\t    && VIM_ISWHITE(*p1) && VIM_ISWHITE(*p2))\n\t\t|| ((diff_flags & DIFF_IWHITEALL)\n\t\t    && (VIM_ISWHITE(*p1) || VIM_ISWHITE(*p2))))\n\t{\n\t    p1 = skipwhite(p1);\n\t    p2 = skipwhite(p2);\n\t}\n\telse\n\t{\n\t    if (!diff_equal_char(p1, p2, &l))\n\t\tbreak;\n\t    p1 += l;\n\t    p2 += l;\n\t}\n    }\n\n    // Ignore trailing white space.\n    p1 = skipwhite(p1);\n    p2 = skipwhite(p2);\n    if (*p1 != NUL || *p2 != NUL)\n\treturn 1;\n    return 0;\n}\n\n/*\n * Return the number of filler lines above \"lnum\".\n */\n    int\ndiff_check_fill(win_T *wp, linenr_T lnum)\n{\n    int\t\tn;\n\n    // be quick when there are no filler lines\n    if (!(diff_flags & DIFF_FILLER))\n\treturn 0;\n    n = diff_check(wp, lnum);\n    if (n <= 0)\n\treturn 0;\n    return n;\n}\n\n/*\n * Set the topline of \"towin\" to match the position in \"fromwin\", so that they\n * show the same diff'ed lines.\n */\n    void\ndiff_set_topline(win_T *fromwin, win_T *towin)\n{\n    buf_T\t*frombuf = fromwin->w_buffer;\n    linenr_T\tlnum = fromwin->w_topline;\n    int\t\tfromidx;\n    int\t\ttoidx;\n    diff_T\t*dp;\n    int\t\tmax_count;\n    int\t\ti;\n\n    fromidx = diff_buf_idx(frombuf);\n    if (fromidx == DB_COUNT)\n\treturn;\t\t// safety check\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    towin->w_topfill = 0;\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t    break;\n    if (dp == NULL)\n    {\n\t// After last change, compute topline relative to end of file; no\n\t// filler lines.\n\ttowin->w_topline = towin->w_buffer->b_ml.ml_line_count\n\t\t\t\t       - (frombuf->b_ml.ml_line_count - lnum);\n    }\n    else\n    {\n\t// Find index for \"towin\".\n\ttoidx = diff_buf_idx(towin->w_buffer);\n\tif (toidx == DB_COUNT)\n\t    return;\t\t// safety check\n\n\ttowin->w_topline = lnum + (dp->df_lnum[toidx] - dp->df_lnum[fromidx]);\n\tif (lnum >= dp->df_lnum[fromidx])\n\t{\n\t    // Inside a change: compute filler lines. With three or more\n\t    // buffers we need to know the largest count.\n\t    max_count = 0;\n\t    for (i = 0; i < DB_COUNT; ++i)\n\t\tif (curtab->tp_diffbuf[i] != NULL\n\t\t\t\t\t       && max_count < dp->df_count[i])\n\t\t    max_count = dp->df_count[i];\n\n\t    if (dp->df_count[toidx] == dp->df_count[fromidx])\n\t    {\n\t\t// same number of lines: use same filler count\n\t\ttowin->w_topfill = fromwin->w_topfill;\n\t    }\n\t    else if (dp->df_count[toidx] > dp->df_count[fromidx])\n\t    {\n\t\tif (lnum == dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t\t{\n\t\t    // more lines in towin and fromwin doesn't show diff\n\t\t    // lines, only filler lines\n\t\t    if (max_count - fromwin->w_topfill >= dp->df_count[toidx])\n\t\t    {\n\t\t\t// towin also only shows filler lines\n\t\t\ttowin->w_topline = dp->df_lnum[toidx]\n\t\t\t\t\t\t       + dp->df_count[toidx];\n\t\t\ttowin->w_topfill = fromwin->w_topfill;\n\t\t    }\n\t\t    else\n\t\t\t// towin still has some diff lines to show\n\t\t\ttowin->w_topline = dp->df_lnum[toidx]\n\t\t\t\t\t     + max_count - fromwin->w_topfill;\n\t\t}\n\t    }\n\t    else if (towin->w_topline >= dp->df_lnum[toidx]\n\t\t\t\t\t\t\t+ dp->df_count[toidx])\n\t    {\n\t\t// less lines in towin and no diff lines to show: compute\n\t\t// filler lines\n\t\ttowin->w_topline = dp->df_lnum[toidx] + dp->df_count[toidx];\n\t\tif (diff_flags & DIFF_FILLER)\n\t\t{\n\t\t    if (lnum == dp->df_lnum[fromidx] + dp->df_count[fromidx])\n\t\t\t// fromwin is also out of diff lines\n\t\t\ttowin->w_topfill = fromwin->w_topfill;\n\t\t    else\n\t\t\t// fromwin has some diff lines\n\t\t\ttowin->w_topfill = dp->df_lnum[fromidx]\n\t\t\t\t\t\t\t   + max_count - lnum;\n\t\t}\n\t    }\n\t}\n    }\n\n    // safety check (if diff info gets outdated strange things may happen)\n    towin->w_botfill = FALSE;\n    if (towin->w_topline > towin->w_buffer->b_ml.ml_line_count)\n    {\n\ttowin->w_topline = towin->w_buffer->b_ml.ml_line_count;\n\ttowin->w_botfill = TRUE;\n    }\n    if (towin->w_topline < 1)\n    {\n\ttowin->w_topline = 1;\n\ttowin->w_topfill = 0;\n    }\n\n    // When w_topline changes need to recompute w_botline and cursor position\n    invalidate_botline_win(towin);\n    changed_line_abv_curs_win(towin);\n\n    check_topfill(towin, FALSE);\n#ifdef FEAT_FOLDING\n    (void)hasFoldingWin(towin, towin->w_topline, &towin->w_topline,\n\t\t\t\t\t\t\t    NULL, TRUE, NULL);\n#endif\n}\n\n/*\n * This is called when 'diffopt' is changed.\n */\n    int\ndiffopt_changed(void)\n{\n    char_u\t*p;\n    int\t\tdiff_context_new = 6;\n    int\t\tdiff_flags_new = 0;\n    int\t\tdiff_foldcolumn_new = 2;\n    long\tdiff_algorithm_new = 0;\n    long\tdiff_indent_heuristic = 0;\n    tabpage_T\t*tp;\n\n    p = p_dip;\n    while (*p != NUL)\n    {\n\tif (STRNCMP(p, \"filler\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_FILLER;\n\t}\n\telse if (STRNCMP(p, \"context:\", 8) == 0 && VIM_ISDIGIT(p[8]))\n\t{\n\t    p += 8;\n\t    diff_context_new = getdigits(&p);\n\t}\n\telse if (STRNCMP(p, \"iblank\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_IBLANK;\n\t}\n\telse if (STRNCMP(p, \"icase\", 5) == 0)\n\t{\n\t    p += 5;\n\t    diff_flags_new |= DIFF_ICASE;\n\t}\n\telse if (STRNCMP(p, \"iwhiteall\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_IWHITEALL;\n\t}\n\telse if (STRNCMP(p, \"iwhiteeol\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_IWHITEEOL;\n\t}\n\telse if (STRNCMP(p, \"iwhite\", 6) == 0)\n\t{\n\t    p += 6;\n\t    diff_flags_new |= DIFF_IWHITE;\n\t}\n\telse if (STRNCMP(p, \"horizontal\", 10) == 0)\n\t{\n\t    p += 10;\n\t    diff_flags_new |= DIFF_HORIZONTAL;\n\t}\n\telse if (STRNCMP(p, \"vertical\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_VERTICAL;\n\t}\n\telse if (STRNCMP(p, \"foldcolumn:\", 11) == 0 && VIM_ISDIGIT(p[11]))\n\t{\n\t    p += 11;\n\t    diff_foldcolumn_new = getdigits(&p);\n\t}\n\telse if (STRNCMP(p, \"hiddenoff\", 9) == 0)\n\t{\n\t    p += 9;\n\t    diff_flags_new |= DIFF_HIDDEN_OFF;\n\t}\n\telse if (STRNCMP(p, \"closeoff\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_CLOSE_OFF;\n\t}\n\telse if (STRNCMP(p, \"followwrap\", 10) == 0)\n\t{\n\t    p += 10;\n\t    diff_flags_new |= DIFF_FOLLOWWRAP;\n\t}\n\telse if (STRNCMP(p, \"indent-heuristic\", 16) == 0)\n\t{\n\t    p += 16;\n\t    diff_indent_heuristic = XDF_INDENT_HEURISTIC;\n\t}\n\telse if (STRNCMP(p, \"internal\", 8) == 0)\n\t{\n\t    p += 8;\n\t    diff_flags_new |= DIFF_INTERNAL;\n\t}\n\telse if (STRNCMP(p, \"algorithm:\", 10) == 0)\n\t{\n\t    p += 10;\n\t    if (STRNCMP(p, \"myers\", 5) == 0)\n\t    {\n\t\tp += 5;\n\t\tdiff_algorithm_new = 0;\n\t    }\n\t    else if (STRNCMP(p, \"minimal\", 7) == 0)\n\t    {\n\t\tp += 7;\n\t\tdiff_algorithm_new = XDF_NEED_MINIMAL;\n\t    }\n\t    else if (STRNCMP(p, \"patience\", 8) == 0)\n\t    {\n\t\tp += 8;\n\t\tdiff_algorithm_new = XDF_PATIENCE_DIFF;\n\t    }\n\t    else if (STRNCMP(p, \"histogram\", 9) == 0)\n\t    {\n\t\tp += 9;\n\t\tdiff_algorithm_new = XDF_HISTOGRAM_DIFF;\n\t    }\n\t    else\n\t\treturn FAIL;\n\t}\n\n\tif (*p != ',' && *p != NUL)\n\t    return FAIL;\n\tif (*p == ',')\n\t    ++p;\n    }\n\n    diff_algorithm_new |= diff_indent_heuristic;\n\n    // Can't have both \"horizontal\" and \"vertical\".\n    if ((diff_flags_new & DIFF_HORIZONTAL) && (diff_flags_new & DIFF_VERTICAL))\n\treturn FAIL;\n\n    // If flags were added or removed, or the algorithm was changed, need to\n    // update the diff.\n    if (diff_flags != diff_flags_new || diff_algorithm != diff_algorithm_new)\n\tFOR_ALL_TABPAGES(tp)\n\t    tp->tp_diff_invalid = TRUE;\n\n    diff_flags = diff_flags_new;\n    diff_context = diff_context_new == 0 ? 1 : diff_context_new;\n    diff_foldcolumn = diff_foldcolumn_new;\n    diff_algorithm = diff_algorithm_new;\n\n    diff_redraw(TRUE);\n\n    // recompute the scroll binding with the new option value, may\n    // remove or add filler lines\n    check_scrollbind((linenr_T)0, 0L);\n\n    return OK;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"horizontal\".\n */\n    int\ndiffopt_horizontal(void)\n{\n    return (diff_flags & DIFF_HORIZONTAL) != 0;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"hiddenoff\".\n */\n    int\ndiffopt_hiddenoff(void)\n{\n    return (diff_flags & DIFF_HIDDEN_OFF) != 0;\n}\n\n/*\n * Return TRUE if 'diffopt' contains \"closeoff\".\n */\n    int\ndiffopt_closeoff(void)\n{\n    return (diff_flags & DIFF_CLOSE_OFF) != 0;\n}\n\n/*\n * Find the difference within a changed line.\n * Returns TRUE if the line was added, no other buffer has it.\n */\n    int\ndiff_find_change(\n    win_T\t*wp,\n    linenr_T\tlnum,\n    int\t\t*startp,\t// first char of the change\n    int\t\t*endp)\t\t// last char of the change\n{\n    char_u\t*line_org;\n    char_u\t*line_new;\n    int\t\ti;\n    int\t\tsi_org, si_new;\n    int\t\tei_org, ei_new;\n    diff_T\t*dp;\n    int\t\tidx;\n    int\t\toff;\n    int\t\tadded = TRUE;\n    char_u\t*p1, *p2;\n    int\t\tl;\n\n    // Make a copy of the line, the next ml_get() will invalidate it.\n    line_org = vim_strsave(ml_get_buf(wp->w_buffer, lnum, FALSE));\n    if (line_org == NULL)\n\treturn FALSE;\n\n    idx = diff_buf_idx(wp->w_buffer);\n    if (idx == DB_COUNT)\t// cannot happen\n    {\n\tvim_free(line_org);\n\treturn FALSE;\n    }\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n    if (dp == NULL || diff_check_sanity(curtab, dp) == FAIL)\n    {\n\tvim_free(line_org);\n\treturn FALSE;\n    }\n\n    off = lnum - dp->df_lnum[idx];\n\n    for (i = 0; i < DB_COUNT; ++i)\n\tif (curtab->tp_diffbuf[i] != NULL && i != idx)\n\t{\n\t    // Skip lines that are not in the other change (filler lines).\n\t    if (off >= dp->df_count[i])\n\t\tcontinue;\n\t    added = FALSE;\n\t    line_new = ml_get_buf(curtab->tp_diffbuf[i],\n\t\t\t\t\t\t dp->df_lnum[i] + off, FALSE);\n\n\t    // Search for start of difference\n\t    si_org = si_new = 0;\n\t    while (line_org[si_org] != NUL)\n\t    {\n\t\tif (((diff_flags & DIFF_IWHITE)\n\t\t\t    && VIM_ISWHITE(line_org[si_org])\n\t\t\t\t\t      && VIM_ISWHITE(line_new[si_new]))\n\t\t\t|| ((diff_flags & DIFF_IWHITEALL)\n\t\t\t    && (VIM_ISWHITE(line_org[si_org])\n\t\t\t\t\t    || VIM_ISWHITE(line_new[si_new]))))\n\t\t{\n\t\t    si_org = (int)(skipwhite(line_org + si_org) - line_org);\n\t\t    si_new = (int)(skipwhite(line_new + si_new) - line_new);\n\t\t}\n\t\telse\n\t\t{\n\t\t    if (!diff_equal_char(line_org + si_org, line_new + si_new,\n\t\t\t\t\t\t\t\t\t   &l))\n\t\t\tbreak;\n\t\t    si_org += l;\n\t\t    si_new += l;\n\t\t}\n\t    }\n\t    if (has_mbyte)\n\t    {\n\t\t// Move back to first byte of character in both lines (may\n\t\t// have \"nn^\" in line_org and \"n^ in line_new).\n\t\tsi_org -= (*mb_head_off)(line_org, line_org + si_org);\n\t\tsi_new -= (*mb_head_off)(line_new, line_new + si_new);\n\t    }\n\t    if (*startp > si_org)\n\t\t*startp = si_org;\n\n\t    // Search for end of difference, if any.\n\t    if (line_org[si_org] != NUL || line_new[si_new] != NUL)\n\t    {\n\t\tei_org = (int)STRLEN(line_org);\n\t\tei_new = (int)STRLEN(line_new);\n\t\twhile (ei_org >= *startp && ei_new >= si_new\n\t\t\t\t\t\t&& ei_org >= 0 && ei_new >= 0)\n\t\t{\n\t\t    if (((diff_flags & DIFF_IWHITE)\n\t\t\t\t&& VIM_ISWHITE(line_org[ei_org])\n\t\t\t\t\t      && VIM_ISWHITE(line_new[ei_new]))\n\t\t\t    || ((diff_flags & DIFF_IWHITEALL)\n\t\t\t\t&& (VIM_ISWHITE(line_org[ei_org])\n\t\t\t\t\t    || VIM_ISWHITE(line_new[ei_new]))))\n\t\t    {\n\t\t\twhile (ei_org >= *startp\n\t\t\t\t\t     && VIM_ISWHITE(line_org[ei_org]))\n\t\t\t    --ei_org;\n\t\t\twhile (ei_new >= si_new\n\t\t\t\t\t     && VIM_ISWHITE(line_new[ei_new]))\n\t\t\t    --ei_new;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tp1 = line_org + ei_org;\n\t\t\tp2 = line_new + ei_new;\n\t\t\tp1 -= (*mb_head_off)(line_org, p1);\n\t\t\tp2 -= (*mb_head_off)(line_new, p2);\n\t\t\tif (!diff_equal_char(p1, p2, &l))\n\t\t\t    break;\n\t\t\tei_org -= l;\n\t\t\tei_new -= l;\n\t\t    }\n\t\t}\n\t\tif (*endp < ei_org)\n\t\t    *endp = ei_org;\n\t    }\n\t}\n\n    vim_free(line_org);\n    return added;\n}\n\n#if defined(FEAT_FOLDING) || defined(PROTO)\n/*\n * Return TRUE if line \"lnum\" is not close to a diff block, this line should\n * be in a fold.\n * Return FALSE if there are no diff blocks at all in this window.\n */\n    int\ndiff_infold(win_T *wp, linenr_T lnum)\n{\n    int\t\ti;\n    int\t\tidx = -1;\n    int\t\tother = FALSE;\n    diff_T\t*dp;\n\n    // Return if 'diff' isn't set.\n    if (!wp->w_p_diff)\n\treturn FALSE;\n\n    for (i = 0; i < DB_COUNT; ++i)\n    {\n\tif (curtab->tp_diffbuf[i] == wp->w_buffer)\n\t    idx = i;\n\telse if (curtab->tp_diffbuf[i] != NULL)\n\t    other = TRUE;\n    }\n\n    // return here if there are no diffs in the window\n    if (idx == -1 || !other)\n\treturn FALSE;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    // Return if there are no diff blocks.  All lines will be folded.\n    if (curtab->tp_first_diff == NULL)\n\treturn TRUE;\n\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n    {\n\t// If this change is below the line there can't be any further match.\n\tif (dp->df_lnum[idx] - diff_context > lnum)\n\t    break;\n\t// If this change ends before the line we have a match.\n\tif (dp->df_lnum[idx] + dp->df_count[idx] + diff_context > lnum)\n\t    return FALSE;\n    }\n    return TRUE;\n}\n#endif\n\n/*\n * \"dp\" and \"do\" commands.\n */\n    void\nnv_diffgetput(int put, long count)\n{\n    exarg_T\tea;\n    char_u\tbuf[30];\n\n#ifdef FEAT_JOB_CHANNEL\n    if (bt_prompt(curbuf))\n    {\n\tvim_beep(BO_OPER);\n\treturn;\n    }\n#endif\n    if (count == 0)\n\tea.arg = (char_u *)\"\";\n    else\n    {\n\tvim_snprintf((char *)buf, 30, \"%ld\", count);\n\tea.arg = buf;\n    }\n    if (put)\n\tea.cmdidx = CMD_diffput;\n    else\n\tea.cmdidx = CMD_diffget;\n    ea.addr_count = 0;\n    ea.line1 = curwin->w_cursor.lnum;\n    ea.line2 = curwin->w_cursor.lnum;\n    ex_diffgetput(&ea);\n}\n\n/*\n * Return TRUE if \"diff\" appears in the list of diff blocks of the current tab.\n */\n    static int\nvalid_diff(diff_T *diff)\n{\n    diff_T\t*dp;\n\n    for (dp = curtab->tp_first_diff; dp != NULL; dp = dp->df_next)\n\tif (dp == diff)\n\t    return TRUE;\n    return FALSE;\n}\n\n/*\n * \":diffget\"\n * \":diffput\"\n */\n    void\nex_diffgetput(exarg_T *eap)\n{\n    linenr_T\tlnum;\n    int\t\tcount;\n    linenr_T\toff = 0;\n    diff_T\t*dp;\n    diff_T\t*dprev;\n    diff_T\t*dfree;\n    int\t\tidx_cur;\n    int\t\tidx_other;\n    int\t\tidx_from;\n    int\t\tidx_to;\n    int\t\ti;\n    int\t\tadded;\n    char_u\t*p;\n    aco_save_T\taco;\n    buf_T\t*buf;\n    int\t\tstart_skip, end_skip;\n    int\t\tnew_count;\n    int\t\tbuf_empty;\n    int\t\tfound_not_ma = FALSE;\n\n    // Find the current buffer in the list of diff buffers.\n    idx_cur = diff_buf_idx(curbuf);\n    if (idx_cur == DB_COUNT)\n    {\n\temsg(_(e_current_buffer_is_not_in_diff_mode));\n\treturn;\n    }\n\n    if (*eap->arg == NUL)\n    {\n\t// No argument: Find the other buffer in the list of diff buffers.\n\tfor (idx_other = 0; idx_other < DB_COUNT; ++idx_other)\n\t    if (curtab->tp_diffbuf[idx_other] != curbuf\n\t\t    && curtab->tp_diffbuf[idx_other] != NULL)\n\t    {\n\t\tif (eap->cmdidx != CMD_diffput\n\t\t\t\t     || curtab->tp_diffbuf[idx_other]->b_p_ma)\n\t\t    break;\n\t\tfound_not_ma = TRUE;\n\t    }\n\tif (idx_other == DB_COUNT)\n\t{\n\t    if (found_not_ma)\n\t\temsg(_(e_no_other_buffer_in_diff_mode_is_modifiable));\n\t    else\n\t\temsg(_(e_no_other_buffer_in_diff_mode));\n\t    return;\n\t}\n\n\t// Check that there isn't a third buffer in the list\n\tfor (i = idx_other + 1; i < DB_COUNT; ++i)\n\t    if (curtab->tp_diffbuf[i] != curbuf\n\t\t    && curtab->tp_diffbuf[i] != NULL\n\t\t    && (eap->cmdidx != CMD_diffput || curtab->tp_diffbuf[i]->b_p_ma))\n\t    {\n\t\temsg(_(e_more_than_two_buffers_in_diff_mode_dont_know_which_one_to_use));\n\t\treturn;\n\t    }\n    }\n    else\n    {\n\t// Buffer number or pattern given.  Ignore trailing white space.\n\tp = eap->arg + STRLEN(eap->arg);\n\twhile (p > eap->arg && VIM_ISWHITE(p[-1]))\n\t    --p;\n\tfor (i = 0; vim_isdigit(eap->arg[i]) && eap->arg + i < p; ++i)\n\t    ;\n\tif (eap->arg + i == p)\t    // digits only\n\t    i = atol((char *)eap->arg);\n\telse\n\t{\n\t    i = buflist_findpat(eap->arg, p, FALSE, TRUE, FALSE);\n\t    if (i < 0)\n\t\treturn;\t\t// error message already given\n\t}\n\tbuf = buflist_findnr(i);\n\tif (buf == NULL)\n\t{\n\t    semsg(_(e_cant_find_buffer_str), eap->arg);\n\t    return;\n\t}\n\tif (buf == curbuf)\n\t    return;\t\t// nothing to do\n\tidx_other = diff_buf_idx(buf);\n\tif (idx_other == DB_COUNT)\n\t{\n\t    semsg(_(e_buffer_str_is_not_in_diff_mode), eap->arg);\n\t    return;\n\t}\n    }\n\n    diff_busy = TRUE;\n\n    // When no range given include the line above or below the cursor.\n    if (eap->addr_count == 0)\n    {\n\t// Make it possible that \":diffget\" on the last line gets line below\n\t// the cursor line when there is no difference above the cursor.\n\tif (eap->cmdidx == CMD_diffget\n\t\t&& eap->line1 == curbuf->b_ml.ml_line_count\n\t\t&& diff_check(curwin, eap->line1) == 0\n\t\t&& (eap->line1 == 1 || diff_check(curwin, eap->line1 - 1) == 0))\n\t    ++eap->line2;\n\telse if (eap->line1 > 0)\n\t    --eap->line1;\n    }\n\n    if (eap->cmdidx == CMD_diffget)\n    {\n\tidx_from = idx_other;\n\tidx_to = idx_cur;\n    }\n    else\n    {\n\tidx_from = idx_cur;\n\tidx_to = idx_other;\n\t// Need to make the other buffer the current buffer to be able to make\n\t// changes in it.\n\t// set curwin/curbuf to buf and save a few things\n\taucmd_prepbuf(&aco, curtab->tp_diffbuf[idx_other]);\n    }\n\n    // May give the warning for a changed buffer here, which can trigger the\n    // FileChangedRO autocommand, which may do nasty things and mess\n    // everything up.\n    if (!curbuf->b_changed)\n    {\n\tchange_warning(0);\n\tif (diff_buf_idx(curbuf) != idx_to)\n\t{\n\t    emsg(_(e_buffer_changed_unexpectedly));\n\t    goto theend;\n\t}\n    }\n\n    dprev = NULL;\n    for (dp = curtab->tp_first_diff; dp != NULL; )\n    {\n\tif (dp->df_lnum[idx_cur] > eap->line2 + off)\n\t    break;\t// past the range that was specified\n\n\tdfree = NULL;\n\tlnum = dp->df_lnum[idx_to];\n\tcount = dp->df_count[idx_to];\n\tif (dp->df_lnum[idx_cur] + dp->df_count[idx_cur] > eap->line1 + off\n\t\t&& u_save(lnum - 1, lnum + count) != FAIL)\n\t{\n\t    // Inside the specified range and saving for undo worked.\n\t    start_skip = 0;\n\t    end_skip = 0;\n\t    if (eap->addr_count > 0)\n\t    {\n\t\t// A range was specified: check if lines need to be skipped.\n\t\tstart_skip = eap->line1 + off - dp->df_lnum[idx_cur];\n\t\tif (start_skip > 0)\n\t\t{\n\t\t    // range starts below start of current diff block\n\t\t    if (start_skip > count)\n\t\t    {\n\t\t\tlnum += count;\n\t\t\tcount = 0;\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\tcount -= start_skip;\n\t\t\tlnum += start_skip;\n\t\t    }\n\t\t}\n\t\telse\n\t\t    start_skip = 0;\n\n\t\tend_skip = dp->df_lnum[idx_cur] + dp->df_count[idx_cur] - 1\n\t\t\t\t\t\t\t - (eap->line2 + off);\n\t\tif (end_skip > 0)\n\t\t{\n\t\t    // range ends above end of current/from diff block\n\t\t    if (idx_cur == idx_from)\t// :diffput\n\t\t    {\n\t\t\ti = dp->df_count[idx_cur] - start_skip - end_skip;\n\t\t\tif (count > i)\n\t\t\t    count = i;\n\t\t    }\n\t\t    else\t\t\t// :diffget\n\t\t    {\n\t\t\tcount -= end_skip;\n\t\t\tend_skip = dp->df_count[idx_from] - start_skip - count;\n\t\t\tif (end_skip < 0)\n\t\t\t    end_skip = 0;\n\t\t    }\n\t\t}\n\t\telse\n\t\t    end_skip = 0;\n\t    }\n\n\t    buf_empty = BUFEMPTY();\n\t    added = 0;\n\t    for (i = 0; i < count; ++i)\n\t    {\n\t\t// remember deleting the last line of the buffer\n\t\tbuf_empty = curbuf->b_ml.ml_line_count == 1;\n\t\tml_delete(lnum);\n\t\t--added;\n\t    }\n\t    for (i = 0; i < dp->df_count[idx_from] - start_skip - end_skip; ++i)\n\t    {\n\t\tlinenr_T nr;\n\n\t\tnr = dp->df_lnum[idx_from] + start_skip + i;\n\t\tif (nr > curtab->tp_diffbuf[idx_from]->b_ml.ml_line_count)\n\t\t    break;\n\t\tp = vim_strsave(ml_get_buf(curtab->tp_diffbuf[idx_from],\n\t\t\t\t\t\t\t\t  nr, FALSE));\n\t\tif (p != NULL)\n\t\t{\n\t\t    ml_append(lnum + i - 1, p, 0, FALSE);\n\t\t    vim_free(p);\n\t\t    ++added;\n\t\t    if (buf_empty && curbuf->b_ml.ml_line_count == 2)\n\t\t    {\n\t\t\t// Added the first line into an empty buffer, need to\n\t\t\t// delete the dummy empty line.\n\t\t\tbuf_empty = FALSE;\n\t\t\tml_delete((linenr_T)2);\n\t\t    }\n\t\t}\n\t    }\n\t    new_count = dp->df_count[idx_to] + added;\n\t    dp->df_count[idx_to] = new_count;\n\n\t    if (start_skip == 0 && end_skip == 0)\n\t    {\n\t\t// Check if there are any other buffers and if the diff is\n\t\t// equal in them.\n\t\tfor (i = 0; i < DB_COUNT; ++i)\n\t\t    if (curtab->tp_diffbuf[i] != NULL && i != idx_from\n\t\t\t\t\t\t\t\t&& i != idx_to\n\t\t\t    && !diff_equal_entry(dp, idx_from, i))\n\t\t\tbreak;\n\t\tif (i == DB_COUNT)\n\t\t{\n\t\t    // delete the diff entry, the buffers are now equal here\n\t\t    dfree = dp;\n\t\t    dp = dp->df_next;\n\t\t    if (dprev == NULL)\n\t\t\tcurtab->tp_first_diff = dp;\n\t\t    else\n\t\t\tdprev->df_next = dp;\n\t\t}\n\t    }\n\n\t    if (added != 0)\n\t    {\n\t\t// Adjust marks.  This will change the following entries!\n\t\tmark_adjust(lnum, lnum + count - 1, (long)MAXLNUM, (long)added);\n\t\tif (curwin->w_cursor.lnum >= lnum)\n\t\t{\n\t\t    // Adjust the cursor position if it's in/after the changed\n\t\t    // lines.\n\t\t    if (curwin->w_cursor.lnum >= lnum + count)\n\t\t\tcurwin->w_cursor.lnum += added;\n\t\t    else if (added < 0)\n\t\t\tcurwin->w_cursor.lnum = lnum;\n\t\t}\n\t    }\n\t    changed_lines(lnum, 0, lnum + count, (long)added);\n\n\t    if (dfree != NULL)\n\t    {\n\t\t// Diff is deleted, update folds in other windows.\n#ifdef FEAT_FOLDING\n\t\tdiff_fold_update(dfree, idx_to);\n#endif\n\t\tvim_free(dfree);\n\t    }\n\n\t    // mark_adjust() may have made \"dp\" invalid.  We don't know where\n\t    // to continue then, bail out.\n\t    if (added != 0 && !valid_diff(dp))\n\t\tbreak;\n\n\t    if (dfree == NULL)\n\t\t// mark_adjust() may have changed the count in a wrong way\n\t\tdp->df_count[idx_to] = new_count;\n\n\t    // When changing the current buffer, keep track of line numbers\n\t    if (idx_cur == idx_to)\n\t\toff += added;\n\t}\n\n\t// If before the range or not deleted, go to next diff.\n\tif (dfree == NULL)\n\t{\n\t    dprev = dp;\n\t    dp = dp->df_next;\n\t}\n    }\n\n    // restore curwin/curbuf and a few other things\n    if (eap->cmdidx != CMD_diffget)\n    {\n\t// Syncing undo only works for the current buffer, but we change\n\t// another buffer.  Sync undo if the command was typed.  This isn't\n\t// 100% right when \":diffput\" is used in a function or mapping.\n\tif (KeyTyped)\n\t    u_sync(FALSE);\n\taucmd_restbuf(&aco);\n    }\n\ntheend:\n    diff_busy = FALSE;\n    if (diff_need_update)\n\tex_diffupdate(NULL);\n\n    // Check that the cursor is on a valid character and update its\n    // position.  When there were filler lines the topline has become\n    // invalid.\n    check_cursor();\n    changed_line_abv_curs();\n\n    if (diff_need_update)\n\t// redraw already done by ex_diffupdate()\n\tdiff_need_update = FALSE;\n    else\n    {\n\t// Also need to redraw the other buffers.\n\tdiff_redraw(FALSE);\n\tapply_autocmds(EVENT_DIFFUPDATED, NULL, NULL, FALSE, curbuf);\n    }\n}\n\n#ifdef FEAT_FOLDING\n/*\n * Update folds for all diff buffers for entry \"dp\".\n * Skip buffer with index \"skip_idx\".\n * When there are no diffs, all folds are removed.\n */\n    static void\ndiff_fold_update(diff_T *dp, int skip_idx)\n{\n    int\t\ti;\n    win_T\t*wp;\n\n    FOR_ALL_WINDOWS(wp)\n\tfor (i = 0; i < DB_COUNT; ++i)\n\t    if (curtab->tp_diffbuf[i] == wp->w_buffer && i != skip_idx)\n\t\tfoldUpdate(wp, dp->df_lnum[i],\n\t\t\t\t\t    dp->df_lnum[i] + dp->df_count[i]);\n}\n#endif\n\n/*\n * Return TRUE if buffer \"buf\" is in diff-mode.\n */\n    int\ndiff_mode_buf(buf_T *buf)\n{\n    tabpage_T\t*tp;\n\n    FOR_ALL_TABPAGES(tp)\n\tif (diff_buf_idx_tp(buf, tp) != DB_COUNT)\n\t    return TRUE;\n    return FALSE;\n}\n\n/*\n * Move \"count\" times in direction \"dir\" to the next diff block.\n * Return FAIL if there isn't such a diff block.\n */\n    int\ndiff_move_to(int dir, long count)\n{\n    int\t\tidx;\n    linenr_T\tlnum = curwin->w_cursor.lnum;\n    diff_T\t*dp;\n\n    idx = diff_buf_idx(curbuf);\n    if (idx == DB_COUNT || curtab->tp_first_diff == NULL)\n\treturn FAIL;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL)\t\t// no diffs today\n\treturn FAIL;\n\n    while (--count >= 0)\n    {\n\t// Check if already before first diff.\n\tif (dir == BACKWARD && lnum <= curtab->tp_first_diff->df_lnum[idx])\n\t    break;\n\n\tfor (dp = curtab->tp_first_diff; ; dp = dp->df_next)\n\t{\n\t    if (dp == NULL)\n\t\tbreak;\n\t    if ((dir == FORWARD && lnum < dp->df_lnum[idx])\n\t\t    || (dir == BACKWARD\n\t\t\t&& (dp->df_next == NULL\n\t\t\t    || lnum <= dp->df_next->df_lnum[idx])))\n\t    {\n\t\tlnum = dp->df_lnum[idx];\n\t\tbreak;\n\t    }\n\t}\n    }\n\n    // don't end up past the end of the file\n    if (lnum > curbuf->b_ml.ml_line_count)\n\tlnum = curbuf->b_ml.ml_line_count;\n\n    // When the cursor didn't move at all we fail.\n    if (lnum == curwin->w_cursor.lnum)\n\treturn FAIL;\n\n    setpcmark();\n    curwin->w_cursor.lnum = lnum;\n    curwin->w_cursor.col = 0;\n\n    return OK;\n}\n\n/*\n * Return the line number in the current window that is closest to \"lnum1\" in\n * \"buf1\" in diff mode.\n */\n    static linenr_T\ndiff_get_corresponding_line_int(\n    buf_T\t*buf1,\n    linenr_T\tlnum1)\n{\n    int\t\tidx1;\n    int\t\tidx2;\n    diff_T\t*dp;\n    int\t\tbaseline = 0;\n\n    idx1 = diff_buf_idx(buf1);\n    idx2 = diff_buf_idx(curbuf);\n    if (idx1 == DB_COUNT || idx2 == DB_COUNT || curtab->tp_first_diff == NULL)\n\treturn lnum1;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    if (curtab->tp_first_diff == NULL)\t\t// no diffs today\n\treturn lnum1;\n\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n    {\n\tif (dp->df_lnum[idx1] > lnum1)\n\t    return lnum1 - baseline;\n\tif ((dp->df_lnum[idx1] + dp->df_count[idx1]) > lnum1)\n\t{\n\t    // Inside the diffblock\n\t    baseline = lnum1 - dp->df_lnum[idx1];\n\t    if (baseline > dp->df_count[idx2])\n\t\tbaseline = dp->df_count[idx2];\n\n\t    return dp->df_lnum[idx2] + baseline;\n\t}\n\tif (    (dp->df_lnum[idx1] == lnum1)\n\t     && (dp->df_count[idx1] == 0)\n\t     && (dp->df_lnum[idx2] <= curwin->w_cursor.lnum)\n\t     && ((dp->df_lnum[idx2] + dp->df_count[idx2])\n\t\t\t\t\t\t      > curwin->w_cursor.lnum))\n\t    /*\n\t     * Special case: if the cursor is just after a zero-count\n\t     * block (i.e. all filler) and the target cursor is already\n\t     * inside the corresponding block, leave the target cursor\n\t     * unmoved. This makes repeated CTRL-W W operations work\n\t     * as expected.\n\t     */\n\t    return curwin->w_cursor.lnum;\n\tbaseline = (dp->df_lnum[idx1] + dp->df_count[idx1])\n\t\t\t\t   - (dp->df_lnum[idx2] + dp->df_count[idx2]);\n    }\n\n    // If we get here then the cursor is after the last diff\n    return lnum1 - baseline;\n}\n\n/*\n * Return the line number in the current window that is closest to \"lnum1\" in\n * \"buf1\" in diff mode.  Checks the line number to be valid.\n */\n    linenr_T\ndiff_get_corresponding_line(buf_T *buf1, linenr_T lnum1)\n{\n    linenr_T lnum = diff_get_corresponding_line_int(buf1, lnum1);\n\n    // don't end up past the end of the file\n    if (lnum > curbuf->b_ml.ml_line_count)\n\treturn curbuf->b_ml.ml_line_count;\n    return lnum;\n}\n\n/*\n * For line \"lnum\" in the current window find the equivalent lnum in window\n * \"wp\", compensating for inserted/deleted lines.\n */\n    linenr_T\ndiff_lnum_win(linenr_T lnum, win_T *wp)\n{\n    diff_T\t*dp;\n    int\t\tidx;\n    int\t\ti;\n    linenr_T\tn;\n\n    idx = diff_buf_idx(curbuf);\n    if (idx == DB_COUNT)\t\t// safety check\n\treturn (linenr_T)0;\n\n    if (curtab->tp_diff_invalid)\n\tex_diffupdate(NULL);\t\t// update after a big change\n\n    // search for a change that includes \"lnum\" in the list of diffblocks.\n    FOR_ALL_DIFFBLOCKS_IN_TAB(curtab, dp)\n\tif (lnum <= dp->df_lnum[idx] + dp->df_count[idx])\n\t    break;\n\n    // When after the last change, compute relative to the last line number.\n    if (dp == NULL)\n\treturn wp->w_buffer->b_ml.ml_line_count\n\t\t\t\t\t- (curbuf->b_ml.ml_line_count - lnum);\n\n    // Find index for \"wp\".\n    i = diff_buf_idx(wp->w_buffer);\n    if (i == DB_COUNT)\t\t\t// safety check\n\treturn (linenr_T)0;\n\n    n = lnum + (dp->df_lnum[i] - dp->df_lnum[idx]);\n    if (n > dp->df_lnum[i] + dp->df_count[i])\n\tn = dp->df_lnum[i] + dp->df_count[i];\n    return n;\n}\n\n/*\n * Handle an ED style diff line.\n * Return FAIL if the line does not contain diff info.\n */\n    static int\nparse_diff_ed(\n\tchar_u\t    *line,\n\tdiffhunk_T  *hunk)\n{\n    char_u *p;\n    long    f1, l1, f2, l2;\n    int\t    difftype;\n\n    // The line must be one of three formats:\n    // change: {first}[,{last}]c{first}[,{last}]\n    // append: {first}a{first}[,{last}]\n    // delete: {first}[,{last}]d{first}\n    p = line;\n    f1 = getdigits(&p);\n    if (*p == ',')\n    {\n\t++p;\n\tl1 = getdigits(&p);\n    }\n    else\n\tl1 = f1;\n    if (*p != 'a' && *p != 'c' && *p != 'd')\n\treturn FAIL;\t\t// invalid diff format\n    difftype = *p++;\n    f2 = getdigits(&p);\n    if (*p == ',')\n    {\n\t++p;\n\tl2 = getdigits(&p);\n    }\n    else\n\tl2 = f2;\n    if (l1 < f1 || l2 < f2)\n\treturn FAIL;\n\n    if (difftype == 'a')\n    {\n\thunk->lnum_orig = f1 + 1;\n\thunk->count_orig = 0;\n    }\n    else\n    {\n\thunk->lnum_orig = f1;\n\thunk->count_orig = l1 - f1 + 1;\n    }\n    if (difftype == 'd')\n    {\n\thunk->lnum_new = f2 + 1;\n\thunk->count_new = 0;\n    }\n    else\n    {\n\thunk->lnum_new = f2;\n\thunk->count_new = l2 - f2 + 1;\n    }\n    return OK;\n}\n\n/*\n * Parses unified diff with zero(!) context lines.\n * Return FAIL if there is no diff information in \"line\".\n */\n    static int\nparse_diff_unified(\n\tchar_u\t    *line,\n\tdiffhunk_T  *hunk)\n{\n    char_u *p;\n    long    oldline, oldcount, newline, newcount;\n\n    // Parse unified diff hunk header:\n    // @@ -oldline,oldcount +newline,newcount @@\n    p = line;\n    if (*p++ == '@' && *p++ == '@' && *p++ == ' ' && *p++ == '-')\n    {\n\toldline = getdigits(&p);\n\tif (*p == ',')\n\t{\n\t    ++p;\n\t    oldcount = getdigits(&p);\n\t}\n\telse\n\t    oldcount = 1;\n\tif (*p++ == ' ' && *p++ == '+')\n\t{\n\t    newline = getdigits(&p);\n\t    if (*p == ',')\n\t    {\n\t\t++p;\n\t\tnewcount = getdigits(&p);\n\t    }\n\t    else\n\t\tnewcount = 1;\n\t}\n\telse\n\t    return FAIL;\t// invalid diff format\n\n\tif (oldcount == 0)\n\t    oldline += 1;\n\tif (newcount == 0)\n\t    newline += 1;\n\tif (newline == 0)\n\t    newline = 1;\n\n\thunk->lnum_orig = oldline;\n\thunk->count_orig = oldcount;\n\thunk->lnum_new = newline;\n\thunk->count_new = newcount;\n\n\treturn OK;\n    }\n\n    return FAIL;\n}\n\n/*\n * Callback function for the xdl_diff() function.\n * Stores the diff output in a grow array.\n */\n    static int\nxdiff_out(\n\tlong start_a,\n\tlong count_a,\n\tlong start_b,\n\tlong count_b,\n\tvoid *priv)\n{\n    diffout_T\t*dout = (diffout_T *)priv;\n    diffhunk_T *p = ALLOC_ONE(diffhunk_T);\n\n    if (p == NULL)\n\treturn -1;\n\n    if (ga_grow(&dout->dout_ga, 1) == FAIL)\n    {\n\tvim_free(p);\n\treturn -1;\n    }\n\n    p->lnum_orig  = start_a + 1;\n    p->count_orig = count_a;\n    p->lnum_new   = start_b + 1;\n    p->count_new  = count_b;\n    ((diffhunk_T **)dout->dout_ga.ga_data)[dout->dout_ga.ga_len++] = p;\n    return 0;\n}\n\n#endif\t// FEAT_DIFF\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * \"diff_filler()\" function\n */\n    void\nf_diff_filler(typval_T *argvars UNUSED, typval_T *rettv UNUSED)\n{\n#ifdef FEAT_DIFF\n    if (in_vim9script() && check_for_lnum_arg(argvars, 0) == FAIL)\n\treturn;\n\n    rettv->vval.v_number = diff_check_fill(curwin, tv_get_lnum(argvars));\n#endif\n}\n\n/*\n * \"diff_hlID()\" function\n */\n    void\nf_diff_hlID(typval_T *argvars UNUSED, typval_T *rettv UNUSED)\n{\n#ifdef FEAT_DIFF\n    linenr_T\t\tlnum;\n    static linenr_T\tprev_lnum = 0;\n    static varnumber_T\tchangedtick = 0;\n    static int\t\tfnum = 0;\n    static int\t\tchange_start = 0;\n    static int\t\tchange_end = 0;\n    static hlf_T\thlID = (hlf_T)0;\n    int\t\t\tfiller_lines;\n    int\t\t\tcol;\n\n    if (in_vim9script()\n\t    && (check_for_lnum_arg(argvars,0) == FAIL\n\t\t|| check_for_number_arg(argvars, 1) == FAIL))\n\treturn;\n\n    lnum = tv_get_lnum(argvars);\n    if (lnum < 0)\t// ignore type error in {lnum} arg\n\tlnum = 0;\n    if (lnum != prev_lnum\n\t    || changedtick != CHANGEDTICK(curbuf)\n\t    || fnum != curbuf->b_fnum)\n    {\n\t// New line, buffer, change: need to get the values.\n\tfiller_lines = diff_check(curwin, lnum);\n\tif (filler_lines < 0)\n\t{\n\t    if (filler_lines == -1)\n\t    {\n\t\tchange_start = MAXCOL;\n\t\tchange_end = -1;\n\t\tif (diff_find_change(curwin, lnum, &change_start, &change_end))\n\t\t    hlID = HLF_ADD;\t// added line\n\t\telse\n\t\t    hlID = HLF_CHD;\t// changed line\n\t    }\n\t    else\n\t\thlID = HLF_ADD;\t// added line\n\t}\n\telse\n\t    hlID = (hlf_T)0;\n\tprev_lnum = lnum;\n\tchangedtick = CHANGEDTICK(curbuf);\n\tfnum = curbuf->b_fnum;\n    }\n\n    if (hlID == HLF_CHD || hlID == HLF_TXD)\n    {\n\tcol = tv_get_number(&argvars[1]) - 1; // ignore type error in {col}\n\tif (col >= change_start && col <= change_end)\n\t    hlID = HLF_TXD;\t\t\t// changed text\n\telse\n\t    hlID = HLF_CHD;\t\t\t// changed line\n    }\n    rettv->vval.v_number = hlID == (hlf_T)0 ? 0 : (int)hlID;\n#endif\n}\n\n#endif\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 8.2 and 9.0 can be found with \":help version9\".\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n\t\"+cindent\",\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n\t\"+lispindent\",\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n\t\"+smartindent\",\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    for (;;)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (l == h)\n\t    break;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version9<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "filenames": ["src/diff.c", "src/version.c"], "buggy_code_start_loc": [2645, 737], "buggy_code_end_loc": [2927, 737], "fixing_code_start_loc": [2646, 738], "fixing_code_end_loc": [2947, 740], "type": "CWE-416", "message": "Use After Free in GitHub repository vim/vim prior to 9.0.", "other": {"cve": {"id": "CVE-2022-2289", "sourceIdentifier": "security@huntr.dev", "published": "2022-07-03T15:15:08.130", "lastModified": "2023-05-03T12:15:56.857", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Use After Free in GitHub repository vim/vim prior to 9.0."}, {"lang": "es", "value": "Un Uso de Memoria Previamente Liberada en el repositorio GitHub vim/vim versiones anteriores a 9.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim:vim:*:*:*:*:*:*:*:*", "versionEndExcluding": "9.0.0026", "matchCriteriaId": "C886C399-CF99-4664-8F38-F091260E9622"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}]}]}], "references": [{"url": "https://github.com/vim/vim/commit/c5274dd12224421f2430b30c53b881b9403d649e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/7447d2ea-db5b-4883-adf4-1eaf7deace64", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/43Y3VJPOTTY3NTREDIFUPITM2POG4ZLP/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/UXPO5EHDV6J4B27E65DOQGZFELUFPRSK/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-32", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202305-16", "source": "security@huntr.dev"}]}, "github_commit_url": "https://github.com/vim/vim/commit/c5274dd12224421f2430b30c53b881b9403d649e"}}