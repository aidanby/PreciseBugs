{"buggy_code": ["#\n# This file is part of pretix (Community Edition).\n#\n# Copyright (C) 2014-2020 Raphael Michel and contributors\n# Copyright (C) 2020-2021 rami.io GmbH and contributors\n#\n# This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General\n# Public License as published by the Free Software Foundation in version 3 of the License.\n#\n# ADDITIONAL TERMS APPLY: Pursuant to Section 7 of the GNU Affero General Public License, additional terms are\n# applicable granting you additional permissions and placing additional restrictions on your usage of this software.\n# Please refer to the pretix LICENSE file to obtain the full terms applicable to this work. If you did not receive\n# this file, see <https://pretix.eu/about/en/license>.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n# details.\n#\n# You should have received a copy of the GNU Affero General Public License along with this program.  If not, see\n# <https://www.gnu.org/licenses/>.\n#\n\n# This file is based on an earlier version of pretix which was released under the Apache License 2.0. The full text of\n# the Apache License 2.0 can be obtained at <http://www.apache.org/licenses/LICENSE-2.0>.\n#\n# This file may have since been changed and any changes are released under the terms of AGPLv3 as described above. A\n# full history of changes and contributors is available at <https://github.com/pretix/pretix>.\n#\n# This file contains Apache-licensed contributions copyrighted by: FlaviaBastos, Jason Estibeiro, Jonas Gro\u00dfe Sundrup,\n# Laura Kl\u00fcnder, Matthew Emerson, Nils Schneider, Tim Freund, Tobias Kunze\n#\n# Unless required by applicable law or agreed to in writing, software distributed under the Apache License 2.0 is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under the License.\n\nimport configparser\nimport logging\nimport os\nimport sys\nfrom json import loads\nfrom urllib.parse import urlparse\n\nimport importlib_metadata as metadata\nfrom django.utils.crypto import get_random_string\nfrom kombu import Queue\n\nfrom . import __version__\nfrom .helpers.config import EnvOrParserConfig\n\n# Pull in all settings that we also need at wheel require time\nfrom ._base_settings import *  # NOQA\n\n\nfrom django.contrib.messages import constants as messages  # NOQA\nfrom django.utils.translation import gettext_lazy as _  # NOQA\n\n_config = configparser.RawConfigParser()\nif 'PRETIX_CONFIG_FILE' in os.environ:\n    _config.read_file(open(os.environ.get('PRETIX_CONFIG_FILE'), encoding='utf-8'))\nelse:\n    _config.read(['/etc/pretix/pretix.cfg', os.path.expanduser('~/.pretix.cfg'), 'pretix.cfg'],\n                 encoding='utf-8')\nconfig = EnvOrParserConfig(_config)\n\nCONFIG_FILE = config\nDATA_DIR = config.get('pretix', 'datadir', fallback=os.environ.get('DATA_DIR', 'data'))\nLOG_DIR = os.path.join(DATA_DIR, 'logs')\nMEDIA_ROOT = os.path.join(DATA_DIR, 'media')\nPROFILE_DIR = os.path.join(DATA_DIR, 'profiles')\nCACHE_DIR = os.path.join(DATA_DIR, 'cache')\n\nif not os.path.exists(DATA_DIR):\n    os.mkdir(DATA_DIR)\nif not os.path.exists(LOG_DIR):\n    os.mkdir(LOG_DIR)\nif not os.path.exists(MEDIA_ROOT):\n    os.mkdir(MEDIA_ROOT)\nif not os.path.exists(CACHE_DIR):\n    os.mkdir(CACHE_DIR)\n\nif config.has_option('django', 'secret'):\n    SECRET_KEY = config.get('django', 'secret')\nelse:\n    SECRET_FILE = os.path.join(DATA_DIR, '.secret')\n    if os.path.exists(SECRET_FILE):\n        with open(SECRET_FILE, 'r') as f:\n            SECRET_KEY = f.read().strip()\n    else:\n        chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'\n        SECRET_KEY = get_random_string(50, chars)\n        with open(SECRET_FILE, 'w') as f:\n            os.chmod(SECRET_FILE, 0o600)\n            try:\n                os.chown(SECRET_FILE, os.getuid(), os.getgid())\n            except AttributeError:\n                pass  # os.chown is not available on Windows\n            f.write(SECRET_KEY)\n\n# Adjustable settings\n\ndebug_fallback = \"runserver\" in sys.argv\nDEBUG = config.getboolean('django', 'debug', fallback=debug_fallback)\nLOG_CSP = config.getboolean('pretix', 'csp_log', fallback=False)\nCSP_ADDITIONAL_HEADER = config.get('pretix', 'csp_additional_header', fallback='')\n\nPDFTK = config.get('tools', 'pdftk', fallback=None)\n\nPRETIX_AUTH_BACKENDS = config.get('pretix', 'auth_backends', fallback='pretix.base.auth.NativeAuthBackend').split(',')\n\ndb_backend = config.get('database', 'backend', fallback='sqlite3')\nif db_backend == 'postgresql_psycopg2':\n    db_backend = 'postgresql'\nelif 'mysql' in db_backend:\n    print(\"pretix does no longer support running on MySQL/MariaDB\")\n    sys.exit(1)\n\ndb_options = {}\n\npostgresql_sslmode = config.get('database', 'sslmode', fallback='disable')\nUSE_DATABASE_TLS = postgresql_sslmode != 'disable'\nUSE_DATABASE_MTLS = USE_DATABASE_TLS and config.has_option('database', 'sslcert')\n\nif USE_DATABASE_TLS or USE_DATABASE_MTLS:\n    tls_config = {}\n    if not USE_DATABASE_MTLS:\n        if 'postgresql' in db_backend:\n            tls_config = {\n                'sslmode': config.get('database', 'sslmode'),\n                'sslrootcert': config.get('database', 'sslrootcert'),\n            }\n    else:\n        if 'postgresql' in db_backend:\n            tls_config = {\n                'sslmode': config.get('database', 'sslmode'),\n                'sslrootcert': config.get('database', 'sslrootcert'),\n                'sslcert': config.get('database', 'sslcert'),\n                'sslkey': config.get('database', 'sslkey'),\n            }\n\n    db_options.update(tls_config)\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.' + db_backend,\n        'NAME': config.get('database', 'name', fallback=os.path.join(DATA_DIR, 'db.sqlite3')),\n        'USER': config.get('database', 'user', fallback=''),\n        'PASSWORD': config.get('database', 'password', fallback=''),\n        'HOST': config.get('database', 'host', fallback=''),\n        'PORT': config.get('database', 'port', fallback=''),\n        'CONN_MAX_AGE': 0 if db_backend == 'sqlite3' else 120,\n        'CONN_HEALTH_CHECKS': db_backend != 'sqlite3',  # Will only be used from Django 4.1 onwards\n        'OPTIONS': db_options,\n        'TEST': {}\n    }\n}\nDATABASE_REPLICA = 'default'\nif config.has_section('replica'):\n    DATABASE_REPLICA = 'replica'\n    DATABASES['replica'] = {\n        'ENGINE': 'django.db.backends.' + db_backend,\n        'NAME': config.get('replica', 'name', fallback=DATABASES['default']['NAME']),\n        'USER': config.get('replica', 'user', fallback=DATABASES['default']['USER']),\n        'PASSWORD': config.get('replica', 'password', fallback=DATABASES['default']['PASSWORD']),\n        'HOST': config.get('replica', 'host', fallback=DATABASES['default']['HOST']),\n        'PORT': config.get('replica', 'port', fallback=DATABASES['default']['PORT']),\n        'CONN_MAX_AGE': 0 if db_backend == 'sqlite3' else 120,\n        'OPTIONS': db_options,\n        'TEST': {}\n    }\n    DATABASE_ROUTERS = ['pretix.helpers.database.ReplicaRouter']\n\nSTATIC_URL = config.get('urls', 'static', fallback='/static/')\n\nMEDIA_URL = config.get('urls', 'media', fallback='/media/')\n\nPRETIX_INSTANCE_NAME = config.get('pretix', 'instance_name', fallback='pretix.de')\nPRETIX_REGISTRATION = config.getboolean('pretix', 'registration', fallback=True)\nPRETIX_PASSWORD_RESET = config.getboolean('pretix', 'password_reset', fallback=True)\nPRETIX_LONG_SESSIONS = config.getboolean('pretix', 'long_sessions', fallback=True)\nPRETIX_ADMIN_AUDIT_COMMENTS = config.getboolean('pretix', 'audit_comments', fallback=False)\nPRETIX_OBLIGATORY_2FA = config.getboolean('pretix', 'obligatory_2fa', fallback=False)\nPRETIX_SESSION_TIMEOUT_RELATIVE = 3600 * 3\nPRETIX_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12\n\nSITE_URL = config.get('pretix', 'url', fallback='http://localhost:8000')\nif SITE_URL.endswith('/'):\n    SITE_URL = SITE_URL[:-1]\n\nCSRF_TRUSTED_ORIGINS = [urlparse(SITE_URL).scheme + '://' + urlparse(SITE_URL).hostname]\n\nTRUST_X_FORWARDED_FOR = config.get('pretix', 'trust_x_forwarded_for', fallback=False)\nUSE_X_FORWARDED_HOST = config.get('pretix', 'trust_x_forwarded_host', fallback=False)\n\n\nREQUEST_ID_HEADER = config.get('pretix', 'request_id_header', fallback=False)\n\nif config.get('pretix', 'trust_x_forwarded_proto', fallback=False):\n    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n\nPRETIX_PLUGINS_DEFAULT = config.get('pretix', 'plugins_default',\n                                    fallback='pretix.plugins.sendmail,pretix.plugins.statistics,pretix.plugins.checkinlists,pretix.plugins.autocheckin')\nPRETIX_PLUGINS_EXCLUDE = config.get('pretix', 'plugins_exclude', fallback='').split(',')\nPRETIX_PLUGINS_SHOW_META = config.getboolean('pretix', 'plugins_show_meta', fallback=True)\n\nFETCH_ECB_RATES = config.getboolean('pretix', 'ecb_rates', fallback=True)\n\nDEFAULT_CURRENCY = config.get('pretix', 'currency', fallback='EUR')\n\nALLOWED_HOSTS = ['*']\n\nLANGUAGE_CODE = config.get('locale', 'default', fallback='en')\nTIME_ZONE = config.get('locale', 'timezone', fallback='UTC')\n\nMAIL_FROM = SERVER_EMAIL = DEFAULT_FROM_EMAIL = config.get('mail', 'from', fallback='pretix@localhost')\nMAIL_FROM_NOTIFICATIONS = config.get('mail', 'from_notifications', fallback=MAIL_FROM)\nMAIL_FROM_ORGANIZERS = config.get('mail', 'from_organizers', fallback=MAIL_FROM)\nMAIL_CUSTOM_SENDER_VERIFICATION_REQUIRED = config.getboolean('mail', 'custom_sender_verification_required', fallback=True)\nMAIL_CUSTOM_SENDER_SPF_STRING = config.get('mail', 'custom_sender_spf_string', fallback='')\nMAIL_CUSTOM_SMTP_ALLOW_PRIVATE_NETWORKS = config.getboolean('mail', 'custom_smtp_allow_private_networks', fallback=DEBUG)\nEMAIL_HOST = config.get('mail', 'host', fallback='localhost')\nEMAIL_PORT = config.getint('mail', 'port', fallback=25)\nEMAIL_HOST_USER = config.get('mail', 'user', fallback='')\nEMAIL_HOST_PASSWORD = config.get('mail', 'password', fallback='')\nEMAIL_USE_TLS = config.getboolean('mail', 'tls', fallback=False)\nEMAIL_USE_SSL = config.getboolean('mail', 'ssl', fallback=False)\nEMAIL_SUBJECT_PREFIX = '[pretix] '\nEMAIL_BACKEND = EMAIL_CUSTOM_SMTP_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_TIMEOUT = 60\n\nADMINS = [('Admin', n) for n in config.get('mail', 'admins', fallback='').split(\",\") if n]\n\nMETRICS_ENABLED = config.getboolean('metrics', 'enabled', fallback=False)\nMETRICS_USER = config.get('metrics', 'user', fallback=\"metrics\")\nMETRICS_PASSPHRASE = config.get('metrics', 'passphrase', fallback=\"\")\n\nCACHES = {\n    'default': {\n        'BACKEND': 'pretix.helpers.cache.CustomDummyCache',\n    }\n}\nREAL_CACHE_USED = False\nSESSION_ENGINE = None\n\nHAS_MEMCACHED = config.has_option('memcached', 'location')\nif HAS_MEMCACHED:\n    REAL_CACHE_USED = True\n    CACHES['default'] = {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION': config.get('memcached', 'location'),\n    }\n\nHAS_REDIS = config.has_option('redis', 'location')\nUSE_REDIS_SENTINEL = config.has_option('redis', 'sentinels')\nredis_ssl_cert_reqs = config.get('redis', 'ssl_cert_reqs', fallback='none')\nUSE_REDIS_TLS = redis_ssl_cert_reqs != 'none'\nUSE_REDIS_MTLS = USE_REDIS_TLS and config.has_option('redis', 'ssl_certfile')\nHAS_REDIS_PASSWORD = config.has_option('redis', 'password')\nif HAS_REDIS:\n    OPTIONS = {\n        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        \"REDIS_CLIENT_KWARGS\": {\"health_check_interval\": 30}\n    }\n\n    if USE_REDIS_SENTINEL:\n        DJANGO_REDIS_CONNECTION_FACTORY = \"django_redis.pool.SentinelConnectionFactory\"\n        OPTIONS[\"CLIENT_CLASS\"] = \"django_redis.client.SentinelClient\"\n        OPTIONS[\"CONNECTION_POOL_CLASS\"] = \"redis.sentinel.SentinelConnectionPool\"\n        # See https://github.com/jazzband/django-redis/issues/540\n        OPTIONS[\"SENTINEL_KWARGS\"] = {\"socket_timeout\": 1}\n        OPTIONS[\"SENTINELS\"] = [tuple(sentinel) for sentinel in loads(config.get('redis', 'sentinels'))]\n\n    if USE_REDIS_TLS or USE_REDIS_MTLS:\n        tls_config = {}\n        if not USE_REDIS_MTLS:\n            tls_config = {\n                'ssl_cert_reqs': config.get('redis', 'ssl_cert_reqs'),\n                'ssl_ca_certs': config.get('redis', 'ssl_ca_certs'),\n            }\n        else:\n            tls_config = {\n                'ssl_cert_reqs': config.get('redis', 'ssl_cert_reqs'),\n                'ssl_ca_certs': config.get('redis', 'ssl_ca_certs'),\n                'ssl_keyfile': config.get('redis', 'ssl_keyfile'),\n                'ssl_certfile': config.get('redis', 'ssl_certfile'),\n            }\n\n        if USE_REDIS_SENTINEL is False:\n            # The CONNECTION_POOL_KWARGS option is necessary for self-signed certs. For further details, please check\n            # https://github.com/jazzband/django-redis/issues/554#issuecomment-949498321\n            OPTIONS[\"CONNECTION_POOL_KWARGS\"] = tls_config\n            OPTIONS[\"REDIS_CLIENT_KWARGS\"].update(tls_config)\n        else:\n            OPTIONS[\"SENTINEL_KWARGS\"].update(tls_config)\n\n    if HAS_REDIS_PASSWORD:\n        OPTIONS[\"PASSWORD\"] = config.get('redis', 'password')\n\n    CACHES['redis'] = {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": config.get('redis', 'location'),\n        \"OPTIONS\": OPTIONS\n    }\n    CACHES['redis_sessions'] = {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": config.get('redis', 'location'),\n        \"TIMEOUT\": 3600 * 24 * 30,\n        \"OPTIONS\": OPTIONS\n    }\n    if not HAS_MEMCACHED:\n        CACHES['default'] = CACHES['redis']\n        REAL_CACHE_USED = True\n    if config.getboolean('redis', 'sessions', fallback=False):\n        SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\n        SESSION_CACHE_ALIAS = \"redis_sessions\"\n\nif not SESSION_ENGINE:\n    if REAL_CACHE_USED:\n        SESSION_ENGINE = \"django.contrib.sessions.backends.cached_db\"\n    else:\n        SESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n\nHAS_CELERY = config.has_option('celery', 'broker')\nHAS_CELERY_BROKER_TRANSPORT_OPTS = config.has_option('celery', 'broker_transport_options')\nHAS_CELERY_BACKEND_TRANSPORT_OPTS = config.has_option('celery', 'backend_transport_options')\nif HAS_CELERY:\n    CELERY_BROKER_URL = config.get('celery', 'broker')\n    CELERY_RESULT_BACKEND = config.get('celery', 'backend')\n    if HAS_CELERY_BROKER_TRANSPORT_OPTS:\n        CELERY_BROKER_TRANSPORT_OPTIONS = loads(config.get('celery', 'broker_transport_options'))\n    if HAS_CELERY_BACKEND_TRANSPORT_OPTS:\n        CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = loads(config.get('celery', 'backend_transport_options'))\nelse:\n    CELERY_TASK_ALWAYS_EAGER = True\n\nSESSION_COOKIE_DOMAIN = config.get('pretix', 'cookie_domain', fallback=None)\n\nCACHE_TICKETS_HOURS = config.getint('cache', 'tickets', fallback=24 * 3)\n\nENTROPY = {\n    'order_code': config.getint('entropy', 'order_code', fallback=5),\n    'customer_identifier': config.getint('entropy', 'customer_identifier', fallback=7),\n    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),\n    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),\n    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),\n}\n\nHAS_GEOIP = False\nif config.has_option('geoip', 'path'):\n    HAS_GEOIP = True\n    GEOIP_PATH = config.get('geoip', 'path')\n    GEOIP_COUNTRY = config.get('geoip', 'filename_country', fallback='GeoLite2-Country.mmdb')\n\n# Internal settings\nSESSION_COOKIE_NAME = 'pretix_session'\nLANGUAGE_COOKIE_NAME = 'pretix_language'\nCSRF_COOKIE_NAME = 'pretix_csrftoken'\nSESSION_COOKIE_HTTPONLY = True\n\nINSTALLED_APPS += [ # noqa\n    'django_filters',\n    'django_markup',\n    'django_otp',\n    'django_otp.plugins.otp_totp',\n    'django_otp.plugins.otp_static',\n    'hijack',\n    'localflavor',\n]\n\nif db_backend == 'postgresql':\n    # ALlow plugins to use django.contrib.postgres\n    INSTALLED_APPS.insert(0, 'django.contrib.postgres')\n\ntry:\n    import django_extensions  # noqa\n    INSTALLED_APPS.append('django_extensions')\nexcept ImportError:\n    pass\n\nPLUGINS = []\nfor entry_point in metadata.entry_points(group='pretix.plugin'):\n    if entry_point.module in PRETIX_PLUGINS_EXCLUDE:\n        continue\n    PLUGINS.append(entry_point.module)\n    INSTALLED_APPS.append(entry_point.module)\n\nHIJACK_PERMISSION_CHECK = \"hijack.permissions.superusers_and_staff\"\nHIJACK_INSERT_BEFORE = None\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'pretix.api.auth.permission.EventPermission',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'pretix.api.pagination.Pagination',\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    'PAGE_SIZE': 50,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'pretix.api.auth.token.TeamTokenAuthentication',\n        'pretix.api.auth.device.DeviceTokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'drf_ujson.renderers.UJSONRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'drf_ujson.parsers.UJSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser'\n    ),\n    'TEST_REQUEST_RENDERER_CLASSES': [\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'pretix.testutils.api.UploadRenderer',\n    ],\n    'EXCEPTION_HANDLER': 'pretix.api.exception.custom_exception_handler',\n    'UNICODE_JSON': False\n}\n\n\nCORE_MODULES = {\n    \"pretix.base\",\n    \"pretix.presale\",\n    \"pretix.control\",\n    \"pretix.plugins.checkinlists\",\n    \"pretix.plugins.reports\",\n}\n\nMIDDLEWARE = [\n    'pretix.helpers.logs.RequestIdMiddleware',\n    'pretix.api.middleware.IdempotencyMiddleware',\n    'pretix.multidomain.middlewares.MultiDomainMiddleware',\n    'pretix.base.middleware.CustomCommonMiddleware',\n    'pretix.multidomain.middlewares.SessionMiddleware',\n    'pretix.multidomain.middlewares.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'hijack.middleware.HijackUserMiddleware',\n    'pretix.control.middleware.PermissionMiddleware',\n    'pretix.control.middleware.AuditLogMiddleware',\n    'pretix.base.middleware.LocaleMiddleware',\n    'pretix.base.middleware.SecurityMiddleware',\n    'pretix.presale.middleware.EventMiddleware',\n    'pretix.api.middleware.ApiScopeMiddleware',\n]\n\ntry:\n    import debug_toolbar.settings  # noqa\n    if DEBUG:\n        INSTALLED_APPS.append('debug_toolbar.apps.DebugToolbarConfig')\n        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')\n        DEBUG_TOOLBAR_PATCH_SETTINGS = False\n        DEBUG_TOOLBAR_CONFIG = {\n            'JQUERY_URL': '',\n            'DISABLE_PANELS': debug_toolbar.settings.PANELS_DEFAULTS,\n        }\n    pass\nexcept ImportError:\n    pass\n\n\nif METRICS_ENABLED:\n    MIDDLEWARE.insert(MIDDLEWARE.index('pretix.base.middleware.CustomCommonMiddleware') + 1,\n                      'pretix.helpers.metrics.middleware.MetricsMiddleware')\n\n\nPROFILING_RATE = config.getfloat('django', 'profile', fallback=0)  # Percentage of requests to profile\nif PROFILING_RATE > 0:\n    if not os.path.exists(PROFILE_DIR):\n        os.mkdir(PROFILE_DIR)\n    MIDDLEWARE.insert(0, 'pretix.helpers.profile.middleware.CProfileMiddleware')\n\n\n# Security settings\nX_FRAME_OPTIONS = 'DENY'\n\n# URL settings\nROOT_URLCONF = 'pretix.multidomain.maindomain_urlconf'\n\nWSGI_APPLICATION = 'pretix.wsgi.application'\n\nif config.has_option('languages', 'path'):\n    LOCALE_PATHS.insert(0, config.get('languages', 'path')) # noqa\n\nLANGUAGES_INCUBATING = LANGUAGES_INCUBATING - set(config.get('languages', 'allow_incubating', fallback='').split(',')) # noqa\nLANGUAGES = []\nLANGUAGES_ENABLED = [lang for lang in config.get(\"languages\", \"enabled\", fallback='').split(',') if lang]\nfor k, v in ALL_LANGUAGES: # noqa\n    if not DEBUG and k in LANGUAGES_INCUBATING:\n        continue\n    if LANGUAGES_ENABLED and k not in LANGUAGES_ENABLED:\n        continue\n    LANGUAGES.append((k, v))\n\n\nAUTH_USER_MODEL = 'pretixbase.User'\nLOGIN_URL = 'control:auth.login'\nLOGIN_URL_CONTROL = 'control:auth.login'\nCSRF_FAILURE_VIEW = 'pretix.base.views.errors.csrf_failure'\n\ntemplate_loaders = (\n    'django.template.loaders.filesystem.Loader',\n    'pretix.helpers.template_loaders.AppLoader',\n)\nif not DEBUG:\n    TEMPLATES[0]['OPTIONS']['loaders'] = ( # noqa\n        ('django.template.loaders.cached.Loader', template_loaders),\n    )\nTEMPLATES[0]['DIRS'].insert(0, os.path.join(DATA_DIR, 'templates')) # noqa\n\nINTERNAL_IPS = ('127.0.0.1', '::1')\n\nMESSAGE_TAGS = {\n    messages.INFO: 'alert-info',\n    messages.ERROR: 'alert-danger',\n    messages.WARNING: 'alert-warning',\n    messages.SUCCESS: 'alert-success',\n}\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\n\nloglevel = 'DEBUG' if DEBUG else config.get('pretix', 'loglevel', fallback='INFO')\n\nCOMPRESS_ENABLED = COMPRESS_OFFLINE = not debug_fallback\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'default': {\n            'format': (\n                '%(levelname)s %(asctime)s RequestId=%(request_id)s %(name)s %(module)s %(message)s'\n                if REQUEST_ID_HEADER\n                else '%(levelname)s %(asctime)s %(name)s %(module)s %(message)s'\n            )\n        },\n    },\n    'filters': {\n        'require_admin_enabled': {\n            '()': 'pretix.helpers.logs.AdminExistsFilter',\n        },\n        'request_id': {\n            '()': 'pretix.helpers.logs.RequestIdFilter'\n        },\n    },\n    'handlers': {\n        'console': {\n            'level': loglevel,\n            'class': 'logging.StreamHandler',\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'csp_file': {\n            'level': loglevel,\n            'class': 'logging.FileHandler',\n            'filename': os.path.join(LOG_DIR, 'csp.log'),\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'file': {\n            'level': loglevel,\n            'class': 'logging.FileHandler',\n            'filename': os.path.join(LOG_DIR, 'pretix.log'),\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'class': 'django.utils.log.AdminEmailHandler',\n            'filters': ['require_admin_enabled']\n        },\n        'null': {\n            'class': 'logging.NullHandler',\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['file', 'console'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'django.request': {\n            'handlers': ['file', 'console', 'mail_admins'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'pretix.security.csp': {\n            'handlers': ['csp_file'],\n            'level': loglevel,\n            'propagate': False,\n        },\n        'django.security': {\n            'handlers': ['file', 'console', 'mail_admins'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'django.security.DisallowedHost': {\n            'handlers': ['null'],\n            'propagate': False,\n        },\n        'django.db.backends': {\n            'handlers': ['file', 'console'],\n            'level': 'INFO',  # Do not output all the queries\n            'propagate': False,\n        },\n        'asyncio': {\n            'handlers': ['file', 'console'],\n            'level': 'WARNING',\n        },\n    },\n}\n\nSENTRY_ENABLED = False\nif config.has_option('sentry', 'dsn') and not any(c in sys.argv for c in ('shell', 'shell_scoped', 'shell_plus')):\n    import sentry_sdk\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    from sentry_sdk.integrations.logging import (\n        LoggingIntegration, ignore_logger,\n    )\n\n    from .sentry import PretixSentryIntegration, setup_custom_filters\n\n    SENTRY_TOKEN = config.get('sentry', 'traces_sample_token', fallback='')\n\n    def traces_sampler(sampling_context):\n        qs = sampling_context.get('wsgi_environ', {}).get('QUERY_STRING', '')\n        if SENTRY_TOKEN and SENTRY_TOKEN in qs:\n            return 1.0\n        return config.getfloat('sentry', 'traces_sample_rate', fallback=0.0)\n\n    SENTRY_ENABLED = True\n    sentry_sdk.init(\n        dsn=config.get('sentry', 'dsn'),\n        integrations=[\n            PretixSentryIntegration(),\n            CeleryIntegration(),\n            LoggingIntegration(\n                level=logging.INFO,\n                event_level=logging.CRITICAL\n            )\n        ],\n        traces_sampler=traces_sampler,\n        environment=urlparse(SITE_URL).netloc,\n        release=__version__,\n        send_default_pii=False,\n        propagate_traces=False,  # see https://github.com/getsentry/sentry-python/issues/1717\n    )\n    ignore_logger('pretix.base.tasks')\n    ignore_logger('django.security.DisallowedHost')\n    setup_custom_filters()\n\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TASK_DEFAULT_QUEUE = 'default'\nCELERY_TASK_QUEUES = (\n    Queue('default', routing_key='default.#'),\n    Queue('checkout', routing_key='checkout.#'),\n    Queue('mail', routing_key='mail.#'),\n    Queue('background', routing_key='background.#'),\n    Queue('notifications', routing_key='notifications.#'),\n)\nCELERY_TASK_ROUTES = ([\n    ('pretix.base.services.cart.*', {'queue': 'checkout'}),\n    ('pretix.base.services.export.scheduled_organizer_export', {'queue': 'background'}),\n    ('pretix.base.services.export.scheduled_event_export', {'queue': 'background'}),\n    ('pretix.base.services.orders.*', {'queue': 'checkout'}),\n    ('pretix.base.services.mail.*', {'queue': 'mail'}),\n    ('pretix.base.services.update_check.*', {'queue': 'background'}),\n    ('pretix.base.services.quotas.*', {'queue': 'background'}),\n    ('pretix.base.services.waitinglist.*', {'queue': 'background'}),\n    ('pretix.base.services.notifications.*', {'queue': 'notifications'}),\n    ('pretix.api.webhooks.*', {'queue': 'notifications'}),\n    ('pretix.presale.style.*', {'queue': 'background'}),\n    ('pretix.plugins.banktransfer.*', {'queue': 'background'}),\n],)\n\nBOOTSTRAP3 = {\n    'success_css_class': '',\n    'field_renderers': {\n        'default': 'pretix.base.forms.renderers.FieldRenderer',\n        'inline': 'pretix.base.forms.renderers.InlineFieldRenderer',\n        'control': 'pretix.control.forms.renderers.ControlFieldRenderer',\n        'bulkedit': 'pretix.control.forms.renderers.BulkEditFieldRenderer',\n        'bulkedit_inline': 'pretix.control.forms.renderers.InlineBulkEditFieldRenderer',\n        'checkout': 'pretix.presale.forms.renderers.CheckoutFieldRenderer',\n    },\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nOAUTH2_PROVIDER_APPLICATION_MODEL = 'pretixapi.OAuthApplication'\nOAUTH2_PROVIDER_GRANT_MODEL = 'pretixapi.OAuthGrant'\nOAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'pretixapi.OAuthAccessToken'\nOAUTH2_PROVIDER_ID_TOKEN_MODEL = 'pretixapi.OAuthIDToken'\nOAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = 'pretixapi.OAuthRefreshToken'\nOAUTH2_PROVIDER = {\n    'SCOPES': {\n        'profile': _('User profile only'),\n        'read': _('Read access'),\n        'write': _('Write access'),\n    },\n    'OAUTH2_VALIDATOR_CLASS': 'pretix.api.oauth.Validator',\n    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'] if not DEBUG else ['http', 'https'],\n    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 24,\n    'ROTATE_REFRESH_TOKEN': False,\n    'PKCE_REQUIRED': False,\n    'OIDC_RESPONSE_TYPES_SUPPORTED': [\"code\"],  # We don't support proper OIDC for now\n}\n\nCOUNTRIES_OVERRIDE = {\n    'XK': _('Kosovo'),\n}\n\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 25000\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB\n\n# File sizes are in MiB\nFILE_UPLOAD_MAX_SIZE_IMAGE = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_image\", fallback=10)\nFILE_UPLOAD_MAX_SIZE_FAVICON = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_favicon\", fallback=1)\nFILE_UPLOAD_MAX_SIZE_EMAIL_ATTACHMENT = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_email_attachment\", fallback=5)\nFILE_UPLOAD_MAX_SIZE_EMAIL_AUTO_ATTACHMENT = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_email_auto_attachment\", fallback=1)\nFILE_UPLOAD_MAX_SIZE_OTHER = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_other\", fallback=10)\n\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'  # sadly. we would prefer BigInt, and should use it for all new models but the migration will be hard\n"], "fixing_code": ["#\n# This file is part of pretix (Community Edition).\n#\n# Copyright (C) 2014-2020 Raphael Michel and contributors\n# Copyright (C) 2020-2021 rami.io GmbH and contributors\n#\n# This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General\n# Public License as published by the Free Software Foundation in version 3 of the License.\n#\n# ADDITIONAL TERMS APPLY: Pursuant to Section 7 of the GNU Affero General Public License, additional terms are\n# applicable granting you additional permissions and placing additional restrictions on your usage of this software.\n# Please refer to the pretix LICENSE file to obtain the full terms applicable to this work. If you did not receive\n# this file, see <https://pretix.eu/about/en/license>.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied\n# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Affero General Public License for more\n# details.\n#\n# You should have received a copy of the GNU Affero General Public License along with this program.  If not, see\n# <https://www.gnu.org/licenses/>.\n#\n\n# This file is based on an earlier version of pretix which was released under the Apache License 2.0. The full text of\n# the Apache License 2.0 can be obtained at <http://www.apache.org/licenses/LICENSE-2.0>.\n#\n# This file may have since been changed and any changes are released under the terms of AGPLv3 as described above. A\n# full history of changes and contributors is available at <https://github.com/pretix/pretix>.\n#\n# This file contains Apache-licensed contributions copyrighted by: FlaviaBastos, Jason Estibeiro, Jonas Gro\u00dfe Sundrup,\n# Laura Kl\u00fcnder, Matthew Emerson, Nils Schneider, Tim Freund, Tobias Kunze\n#\n# Unless required by applicable law or agreed to in writing, software distributed under the Apache License 2.0 is\n# distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n# License for the specific language governing permissions and limitations under the License.\n\nimport configparser\nimport logging\nimport os\nimport sys\nfrom json import loads\nfrom urllib.parse import urlparse\n\nimport importlib_metadata as metadata\nfrom django.utils.crypto import get_random_string\nfrom kombu import Queue\n\nfrom . import __version__\nfrom .helpers.config import EnvOrParserConfig\n\n# Pull in all settings that we also need at wheel require time\nfrom ._base_settings import *  # NOQA\n\n\nfrom django.contrib.messages import constants as messages  # NOQA\nfrom django.utils.translation import gettext_lazy as _  # NOQA\n\n_config = configparser.RawConfigParser()\nif 'PRETIX_CONFIG_FILE' in os.environ:\n    _config.read_file(open(os.environ.get('PRETIX_CONFIG_FILE'), encoding='utf-8'))\nelse:\n    _config.read(['/etc/pretix/pretix.cfg', os.path.expanduser('~/.pretix.cfg'), 'pretix.cfg'],\n                 encoding='utf-8')\nconfig = EnvOrParserConfig(_config)\n\nCONFIG_FILE = config\nDATA_DIR = config.get('pretix', 'datadir', fallback=os.environ.get('DATA_DIR', 'data'))\nLOG_DIR = os.path.join(DATA_DIR, 'logs')\nMEDIA_ROOT = os.path.join(DATA_DIR, 'media')\nPROFILE_DIR = os.path.join(DATA_DIR, 'profiles')\nCACHE_DIR = os.path.join(DATA_DIR, 'cache')\n\nif not os.path.exists(DATA_DIR):\n    os.mkdir(DATA_DIR)\nif not os.path.exists(LOG_DIR):\n    os.mkdir(LOG_DIR)\nif not os.path.exists(MEDIA_ROOT):\n    os.mkdir(MEDIA_ROOT)\nif not os.path.exists(CACHE_DIR):\n    os.mkdir(CACHE_DIR)\n\nif config.has_option('django', 'secret'):\n    SECRET_KEY = config.get('django', 'secret')\nelse:\n    SECRET_FILE = os.path.join(DATA_DIR, '.secret')\n    if os.path.exists(SECRET_FILE):\n        with open(SECRET_FILE, 'r') as f:\n            SECRET_KEY = f.read().strip()\n    else:\n        chars = 'abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)'\n        SECRET_KEY = get_random_string(50, chars)\n        with open(SECRET_FILE, 'w') as f:\n            os.chmod(SECRET_FILE, 0o600)\n            try:\n                os.chown(SECRET_FILE, os.getuid(), os.getgid())\n            except AttributeError:\n                pass  # os.chown is not available on Windows\n            f.write(SECRET_KEY)\n\n# Adjustable settings\n\ndebug_fallback = \"runserver\" in sys.argv\nDEBUG = config.getboolean('django', 'debug', fallback=debug_fallback)\nLOG_CSP = config.getboolean('pretix', 'csp_log', fallback=False)\nCSP_ADDITIONAL_HEADER = config.get('pretix', 'csp_additional_header', fallback='')\n\nPDFTK = config.get('tools', 'pdftk', fallback=None)\n\nPRETIX_AUTH_BACKENDS = config.get('pretix', 'auth_backends', fallback='pretix.base.auth.NativeAuthBackend').split(',')\n\ndb_backend = config.get('database', 'backend', fallback='sqlite3')\nif db_backend == 'postgresql_psycopg2':\n    db_backend = 'postgresql'\nelif 'mysql' in db_backend:\n    print(\"pretix does no longer support running on MySQL/MariaDB\")\n    sys.exit(1)\n\ndb_options = {}\n\npostgresql_sslmode = config.get('database', 'sslmode', fallback='disable')\nUSE_DATABASE_TLS = postgresql_sslmode != 'disable'\nUSE_DATABASE_MTLS = USE_DATABASE_TLS and config.has_option('database', 'sslcert')\n\nif USE_DATABASE_TLS or USE_DATABASE_MTLS:\n    tls_config = {}\n    if not USE_DATABASE_MTLS:\n        if 'postgresql' in db_backend:\n            tls_config = {\n                'sslmode': config.get('database', 'sslmode'),\n                'sslrootcert': config.get('database', 'sslrootcert'),\n            }\n    else:\n        if 'postgresql' in db_backend:\n            tls_config = {\n                'sslmode': config.get('database', 'sslmode'),\n                'sslrootcert': config.get('database', 'sslrootcert'),\n                'sslcert': config.get('database', 'sslcert'),\n                'sslkey': config.get('database', 'sslkey'),\n            }\n\n    db_options.update(tls_config)\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.' + db_backend,\n        'NAME': config.get('database', 'name', fallback=os.path.join(DATA_DIR, 'db.sqlite3')),\n        'USER': config.get('database', 'user', fallback=''),\n        'PASSWORD': config.get('database', 'password', fallback=''),\n        'HOST': config.get('database', 'host', fallback=''),\n        'PORT': config.get('database', 'port', fallback=''),\n        'CONN_MAX_AGE': 0 if db_backend == 'sqlite3' else 120,\n        'CONN_HEALTH_CHECKS': db_backend != 'sqlite3',  # Will only be used from Django 4.1 onwards\n        'OPTIONS': db_options,\n        'TEST': {}\n    }\n}\nDATABASE_REPLICA = 'default'\nif config.has_section('replica'):\n    DATABASE_REPLICA = 'replica'\n    DATABASES['replica'] = {\n        'ENGINE': 'django.db.backends.' + db_backend,\n        'NAME': config.get('replica', 'name', fallback=DATABASES['default']['NAME']),\n        'USER': config.get('replica', 'user', fallback=DATABASES['default']['USER']),\n        'PASSWORD': config.get('replica', 'password', fallback=DATABASES['default']['PASSWORD']),\n        'HOST': config.get('replica', 'host', fallback=DATABASES['default']['HOST']),\n        'PORT': config.get('replica', 'port', fallback=DATABASES['default']['PORT']),\n        'CONN_MAX_AGE': 0 if db_backend == 'sqlite3' else 120,\n        'OPTIONS': db_options,\n        'TEST': {}\n    }\n    DATABASE_ROUTERS = ['pretix.helpers.database.ReplicaRouter']\n\nSTATIC_URL = config.get('urls', 'static', fallback='/static/')\n\nMEDIA_URL = config.get('urls', 'media', fallback='/media/')\n\nPRETIX_INSTANCE_NAME = config.get('pretix', 'instance_name', fallback='pretix.de')\nPRETIX_REGISTRATION = config.getboolean('pretix', 'registration', fallback=True)\nPRETIX_PASSWORD_RESET = config.getboolean('pretix', 'password_reset', fallback=True)\nPRETIX_LONG_SESSIONS = config.getboolean('pretix', 'long_sessions', fallback=True)\nPRETIX_ADMIN_AUDIT_COMMENTS = config.getboolean('pretix', 'audit_comments', fallback=False)\nPRETIX_OBLIGATORY_2FA = config.getboolean('pretix', 'obligatory_2fa', fallback=False)\nPRETIX_SESSION_TIMEOUT_RELATIVE = 3600 * 3\nPRETIX_SESSION_TIMEOUT_ABSOLUTE = 3600 * 12\n\nSITE_URL = config.get('pretix', 'url', fallback='http://localhost:8000')\nif SITE_URL.endswith('/'):\n    SITE_URL = SITE_URL[:-1]\n\nCSRF_TRUSTED_ORIGINS = [urlparse(SITE_URL).scheme + '://' + urlparse(SITE_URL).hostname]\n\nTRUST_X_FORWARDED_FOR = config.getboolean('pretix', 'trust_x_forwarded_for', fallback=False)\nUSE_X_FORWARDED_HOST = config.getboolean('pretix', 'trust_x_forwarded_host', fallback=False)\n\n\nREQUEST_ID_HEADER = config.get('pretix', 'request_id_header', fallback=False)\n\nif config.getboolean('pretix', 'trust_x_forwarded_proto', fallback=False):\n    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n\nPRETIX_PLUGINS_DEFAULT = config.get('pretix', 'plugins_default',\n                                    fallback='pretix.plugins.sendmail,pretix.plugins.statistics,pretix.plugins.checkinlists,pretix.plugins.autocheckin')\nPRETIX_PLUGINS_EXCLUDE = config.get('pretix', 'plugins_exclude', fallback='').split(',')\nPRETIX_PLUGINS_SHOW_META = config.getboolean('pretix', 'plugins_show_meta', fallback=True)\n\nFETCH_ECB_RATES = config.getboolean('pretix', 'ecb_rates', fallback=True)\n\nDEFAULT_CURRENCY = config.get('pretix', 'currency', fallback='EUR')\n\nALLOWED_HOSTS = ['*']\n\nLANGUAGE_CODE = config.get('locale', 'default', fallback='en')\nTIME_ZONE = config.get('locale', 'timezone', fallback='UTC')\n\nMAIL_FROM = SERVER_EMAIL = DEFAULT_FROM_EMAIL = config.get('mail', 'from', fallback='pretix@localhost')\nMAIL_FROM_NOTIFICATIONS = config.get('mail', 'from_notifications', fallback=MAIL_FROM)\nMAIL_FROM_ORGANIZERS = config.get('mail', 'from_organizers', fallback=MAIL_FROM)\nMAIL_CUSTOM_SENDER_VERIFICATION_REQUIRED = config.getboolean('mail', 'custom_sender_verification_required', fallback=True)\nMAIL_CUSTOM_SENDER_SPF_STRING = config.get('mail', 'custom_sender_spf_string', fallback='')\nMAIL_CUSTOM_SMTP_ALLOW_PRIVATE_NETWORKS = config.getboolean('mail', 'custom_smtp_allow_private_networks', fallback=DEBUG)\nEMAIL_HOST = config.get('mail', 'host', fallback='localhost')\nEMAIL_PORT = config.getint('mail', 'port', fallback=25)\nEMAIL_HOST_USER = config.get('mail', 'user', fallback='')\nEMAIL_HOST_PASSWORD = config.get('mail', 'password', fallback='')\nEMAIL_USE_TLS = config.getboolean('mail', 'tls', fallback=False)\nEMAIL_USE_SSL = config.getboolean('mail', 'ssl', fallback=False)\nEMAIL_SUBJECT_PREFIX = '[pretix] '\nEMAIL_BACKEND = EMAIL_CUSTOM_SMTP_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_TIMEOUT = 60\n\nADMINS = [('Admin', n) for n in config.get('mail', 'admins', fallback='').split(\",\") if n]\n\nMETRICS_ENABLED = config.getboolean('metrics', 'enabled', fallback=False)\nMETRICS_USER = config.get('metrics', 'user', fallback=\"metrics\")\nMETRICS_PASSPHRASE = config.get('metrics', 'passphrase', fallback=\"\")\n\nCACHES = {\n    'default': {\n        'BACKEND': 'pretix.helpers.cache.CustomDummyCache',\n    }\n}\nREAL_CACHE_USED = False\nSESSION_ENGINE = None\n\nHAS_MEMCACHED = config.has_option('memcached', 'location')\nif HAS_MEMCACHED:\n    REAL_CACHE_USED = True\n    CACHES['default'] = {\n        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',\n        'LOCATION': config.get('memcached', 'location'),\n    }\n\nHAS_REDIS = config.has_option('redis', 'location')\nUSE_REDIS_SENTINEL = config.has_option('redis', 'sentinels')\nredis_ssl_cert_reqs = config.get('redis', 'ssl_cert_reqs', fallback='none')\nUSE_REDIS_TLS = redis_ssl_cert_reqs != 'none'\nUSE_REDIS_MTLS = USE_REDIS_TLS and config.has_option('redis', 'ssl_certfile')\nHAS_REDIS_PASSWORD = config.has_option('redis', 'password')\nif HAS_REDIS:\n    OPTIONS = {\n        \"CLIENT_CLASS\": \"django_redis.client.DefaultClient\",\n        \"REDIS_CLIENT_KWARGS\": {\"health_check_interval\": 30}\n    }\n\n    if USE_REDIS_SENTINEL:\n        DJANGO_REDIS_CONNECTION_FACTORY = \"django_redis.pool.SentinelConnectionFactory\"\n        OPTIONS[\"CLIENT_CLASS\"] = \"django_redis.client.SentinelClient\"\n        OPTIONS[\"CONNECTION_POOL_CLASS\"] = \"redis.sentinel.SentinelConnectionPool\"\n        # See https://github.com/jazzband/django-redis/issues/540\n        OPTIONS[\"SENTINEL_KWARGS\"] = {\"socket_timeout\": 1}\n        OPTIONS[\"SENTINELS\"] = [tuple(sentinel) for sentinel in loads(config.get('redis', 'sentinels'))]\n\n    if USE_REDIS_TLS or USE_REDIS_MTLS:\n        tls_config = {}\n        if not USE_REDIS_MTLS:\n            tls_config = {\n                'ssl_cert_reqs': config.get('redis', 'ssl_cert_reqs'),\n                'ssl_ca_certs': config.get('redis', 'ssl_ca_certs'),\n            }\n        else:\n            tls_config = {\n                'ssl_cert_reqs': config.get('redis', 'ssl_cert_reqs'),\n                'ssl_ca_certs': config.get('redis', 'ssl_ca_certs'),\n                'ssl_keyfile': config.get('redis', 'ssl_keyfile'),\n                'ssl_certfile': config.get('redis', 'ssl_certfile'),\n            }\n\n        if USE_REDIS_SENTINEL is False:\n            # The CONNECTION_POOL_KWARGS option is necessary for self-signed certs. For further details, please check\n            # https://github.com/jazzband/django-redis/issues/554#issuecomment-949498321\n            OPTIONS[\"CONNECTION_POOL_KWARGS\"] = tls_config\n            OPTIONS[\"REDIS_CLIENT_KWARGS\"].update(tls_config)\n        else:\n            OPTIONS[\"SENTINEL_KWARGS\"].update(tls_config)\n\n    if HAS_REDIS_PASSWORD:\n        OPTIONS[\"PASSWORD\"] = config.get('redis', 'password')\n\n    CACHES['redis'] = {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": config.get('redis', 'location'),\n        \"OPTIONS\": OPTIONS\n    }\n    CACHES['redis_sessions'] = {\n        \"BACKEND\": \"django_redis.cache.RedisCache\",\n        \"LOCATION\": config.get('redis', 'location'),\n        \"TIMEOUT\": 3600 * 24 * 30,\n        \"OPTIONS\": OPTIONS\n    }\n    if not HAS_MEMCACHED:\n        CACHES['default'] = CACHES['redis']\n        REAL_CACHE_USED = True\n    if config.getboolean('redis', 'sessions', fallback=False):\n        SESSION_ENGINE = \"django.contrib.sessions.backends.cache\"\n        SESSION_CACHE_ALIAS = \"redis_sessions\"\n\nif not SESSION_ENGINE:\n    if REAL_CACHE_USED:\n        SESSION_ENGINE = \"django.contrib.sessions.backends.cached_db\"\n    else:\n        SESSION_ENGINE = \"django.contrib.sessions.backends.db\"\n\nHAS_CELERY = config.has_option('celery', 'broker')\nHAS_CELERY_BROKER_TRANSPORT_OPTS = config.has_option('celery', 'broker_transport_options')\nHAS_CELERY_BACKEND_TRANSPORT_OPTS = config.has_option('celery', 'backend_transport_options')\nif HAS_CELERY:\n    CELERY_BROKER_URL = config.get('celery', 'broker')\n    CELERY_RESULT_BACKEND = config.get('celery', 'backend')\n    if HAS_CELERY_BROKER_TRANSPORT_OPTS:\n        CELERY_BROKER_TRANSPORT_OPTIONS = loads(config.get('celery', 'broker_transport_options'))\n    if HAS_CELERY_BACKEND_TRANSPORT_OPTS:\n        CELERY_RESULT_BACKEND_TRANSPORT_OPTIONS = loads(config.get('celery', 'backend_transport_options'))\nelse:\n    CELERY_TASK_ALWAYS_EAGER = True\n\nSESSION_COOKIE_DOMAIN = config.get('pretix', 'cookie_domain', fallback=None)\n\nCACHE_TICKETS_HOURS = config.getint('cache', 'tickets', fallback=24 * 3)\n\nENTROPY = {\n    'order_code': config.getint('entropy', 'order_code', fallback=5),\n    'customer_identifier': config.getint('entropy', 'customer_identifier', fallback=7),\n    'ticket_secret': config.getint('entropy', 'ticket_secret', fallback=32),\n    'voucher_code': config.getint('entropy', 'voucher_code', fallback=16),\n    'giftcard_secret': config.getint('entropy', 'giftcard_secret', fallback=12),\n}\n\nHAS_GEOIP = False\nif config.has_option('geoip', 'path'):\n    HAS_GEOIP = True\n    GEOIP_PATH = config.get('geoip', 'path')\n    GEOIP_COUNTRY = config.get('geoip', 'filename_country', fallback='GeoLite2-Country.mmdb')\n\n# Internal settings\nSESSION_COOKIE_NAME = 'pretix_session'\nLANGUAGE_COOKIE_NAME = 'pretix_language'\nCSRF_COOKIE_NAME = 'pretix_csrftoken'\nSESSION_COOKIE_HTTPONLY = True\n\nINSTALLED_APPS += [ # noqa\n    'django_filters',\n    'django_markup',\n    'django_otp',\n    'django_otp.plugins.otp_totp',\n    'django_otp.plugins.otp_static',\n    'hijack',\n    'localflavor',\n]\n\nif db_backend == 'postgresql':\n    # ALlow plugins to use django.contrib.postgres\n    INSTALLED_APPS.insert(0, 'django.contrib.postgres')\n\ntry:\n    import django_extensions  # noqa\n    INSTALLED_APPS.append('django_extensions')\nexcept ImportError:\n    pass\n\nPLUGINS = []\nfor entry_point in metadata.entry_points(group='pretix.plugin'):\n    if entry_point.module in PRETIX_PLUGINS_EXCLUDE:\n        continue\n    PLUGINS.append(entry_point.module)\n    INSTALLED_APPS.append(entry_point.module)\n\nHIJACK_PERMISSION_CHECK = \"hijack.permissions.superusers_and_staff\"\nHIJACK_INSERT_BEFORE = None\n\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'pretix.api.auth.permission.EventPermission',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'pretix.api.pagination.Pagination',\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    'PAGE_SIZE': 50,\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'pretix.api.auth.token.TeamTokenAuthentication',\n        'pretix.api.auth.device.DeviceTokenAuthentication',\n        'rest_framework.authentication.SessionAuthentication',\n        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',\n    ),\n    'DEFAULT_RENDERER_CLASSES': (\n        'drf_ujson.renderers.UJSONRenderer',\n    ),\n    'DEFAULT_PARSER_CLASSES': (\n        'drf_ujson.parsers.UJSONParser',\n        'rest_framework.parsers.FormParser',\n        'rest_framework.parsers.MultiPartParser'\n    ),\n    'TEST_REQUEST_RENDERER_CLASSES': [\n        'rest_framework.renderers.MultiPartRenderer',\n        'rest_framework.renderers.JSONRenderer',\n        'pretix.testutils.api.UploadRenderer',\n    ],\n    'EXCEPTION_HANDLER': 'pretix.api.exception.custom_exception_handler',\n    'UNICODE_JSON': False\n}\n\n\nCORE_MODULES = {\n    \"pretix.base\",\n    \"pretix.presale\",\n    \"pretix.control\",\n    \"pretix.plugins.checkinlists\",\n    \"pretix.plugins.reports\",\n}\n\nMIDDLEWARE = [\n    'pretix.helpers.logs.RequestIdMiddleware',\n    'pretix.api.middleware.IdempotencyMiddleware',\n    'pretix.multidomain.middlewares.MultiDomainMiddleware',\n    'pretix.base.middleware.CustomCommonMiddleware',\n    'pretix.multidomain.middlewares.SessionMiddleware',\n    'pretix.multidomain.middlewares.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'hijack.middleware.HijackUserMiddleware',\n    'pretix.control.middleware.PermissionMiddleware',\n    'pretix.control.middleware.AuditLogMiddleware',\n    'pretix.base.middleware.LocaleMiddleware',\n    'pretix.base.middleware.SecurityMiddleware',\n    'pretix.presale.middleware.EventMiddleware',\n    'pretix.api.middleware.ApiScopeMiddleware',\n]\n\ntry:\n    import debug_toolbar.settings  # noqa\n    if DEBUG:\n        INSTALLED_APPS.append('debug_toolbar.apps.DebugToolbarConfig')\n        MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')\n        DEBUG_TOOLBAR_PATCH_SETTINGS = False\n        DEBUG_TOOLBAR_CONFIG = {\n            'JQUERY_URL': '',\n            'DISABLE_PANELS': debug_toolbar.settings.PANELS_DEFAULTS,\n        }\n    pass\nexcept ImportError:\n    pass\n\n\nif METRICS_ENABLED:\n    MIDDLEWARE.insert(MIDDLEWARE.index('pretix.base.middleware.CustomCommonMiddleware') + 1,\n                      'pretix.helpers.metrics.middleware.MetricsMiddleware')\n\n\nPROFILING_RATE = config.getfloat('django', 'profile', fallback=0)  # Percentage of requests to profile\nif PROFILING_RATE > 0:\n    if not os.path.exists(PROFILE_DIR):\n        os.mkdir(PROFILE_DIR)\n    MIDDLEWARE.insert(0, 'pretix.helpers.profile.middleware.CProfileMiddleware')\n\n\n# Security settings\nX_FRAME_OPTIONS = 'DENY'\n\n# URL settings\nROOT_URLCONF = 'pretix.multidomain.maindomain_urlconf'\n\nWSGI_APPLICATION = 'pretix.wsgi.application'\n\nif config.has_option('languages', 'path'):\n    LOCALE_PATHS.insert(0, config.get('languages', 'path')) # noqa\n\nLANGUAGES_INCUBATING = LANGUAGES_INCUBATING - set(config.get('languages', 'allow_incubating', fallback='').split(',')) # noqa\nLANGUAGES = []\nLANGUAGES_ENABLED = [lang for lang in config.get(\"languages\", \"enabled\", fallback='').split(',') if lang]\nfor k, v in ALL_LANGUAGES: # noqa\n    if not DEBUG and k in LANGUAGES_INCUBATING:\n        continue\n    if LANGUAGES_ENABLED and k not in LANGUAGES_ENABLED:\n        continue\n    LANGUAGES.append((k, v))\n\n\nAUTH_USER_MODEL = 'pretixbase.User'\nLOGIN_URL = 'control:auth.login'\nLOGIN_URL_CONTROL = 'control:auth.login'\nCSRF_FAILURE_VIEW = 'pretix.base.views.errors.csrf_failure'\n\ntemplate_loaders = (\n    'django.template.loaders.filesystem.Loader',\n    'pretix.helpers.template_loaders.AppLoader',\n)\nif not DEBUG:\n    TEMPLATES[0]['OPTIONS']['loaders'] = ( # noqa\n        ('django.template.loaders.cached.Loader', template_loaders),\n    )\nTEMPLATES[0]['DIRS'].insert(0, os.path.join(DATA_DIR, 'templates')) # noqa\n\nINTERNAL_IPS = ('127.0.0.1', '::1')\n\nMESSAGE_TAGS = {\n    messages.INFO: 'alert-info',\n    messages.ERROR: 'alert-danger',\n    messages.WARNING: 'alert-warning',\n    messages.SUCCESS: 'alert-success',\n}\nMESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'\n\nloglevel = 'DEBUG' if DEBUG else config.get('pretix', 'loglevel', fallback='INFO')\n\nCOMPRESS_ENABLED = COMPRESS_OFFLINE = not debug_fallback\n\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'formatters': {\n        'default': {\n            'format': (\n                '%(levelname)s %(asctime)s RequestId=%(request_id)s %(name)s %(module)s %(message)s'\n                if REQUEST_ID_HEADER\n                else '%(levelname)s %(asctime)s %(name)s %(module)s %(message)s'\n            )\n        },\n    },\n    'filters': {\n        'require_admin_enabled': {\n            '()': 'pretix.helpers.logs.AdminExistsFilter',\n        },\n        'request_id': {\n            '()': 'pretix.helpers.logs.RequestIdFilter'\n        },\n    },\n    'handlers': {\n        'console': {\n            'level': loglevel,\n            'class': 'logging.StreamHandler',\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'csp_file': {\n            'level': loglevel,\n            'class': 'logging.FileHandler',\n            'filename': os.path.join(LOG_DIR, 'csp.log'),\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'file': {\n            'level': loglevel,\n            'class': 'logging.FileHandler',\n            'filename': os.path.join(LOG_DIR, 'pretix.log'),\n            'formatter': 'default',\n            'filters': ['request_id'],\n        },\n        'mail_admins': {\n            'level': 'ERROR',\n            'class': 'django.utils.log.AdminEmailHandler',\n            'filters': ['require_admin_enabled']\n        },\n        'null': {\n            'class': 'logging.NullHandler',\n        },\n    },\n    'loggers': {\n        '': {\n            'handlers': ['file', 'console'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'django.request': {\n            'handlers': ['file', 'console', 'mail_admins'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'pretix.security.csp': {\n            'handlers': ['csp_file'],\n            'level': loglevel,\n            'propagate': False,\n        },\n        'django.security': {\n            'handlers': ['file', 'console', 'mail_admins'],\n            'level': loglevel,\n            'propagate': True,\n        },\n        'django.security.DisallowedHost': {\n            'handlers': ['null'],\n            'propagate': False,\n        },\n        'django.db.backends': {\n            'handlers': ['file', 'console'],\n            'level': 'INFO',  # Do not output all the queries\n            'propagate': False,\n        },\n        'asyncio': {\n            'handlers': ['file', 'console'],\n            'level': 'WARNING',\n        },\n    },\n}\n\nSENTRY_ENABLED = False\nif config.has_option('sentry', 'dsn') and not any(c in sys.argv for c in ('shell', 'shell_scoped', 'shell_plus')):\n    import sentry_sdk\n    from sentry_sdk.integrations.celery import CeleryIntegration\n    from sentry_sdk.integrations.logging import (\n        LoggingIntegration, ignore_logger,\n    )\n\n    from .sentry import PretixSentryIntegration, setup_custom_filters\n\n    SENTRY_TOKEN = config.get('sentry', 'traces_sample_token', fallback='')\n\n    def traces_sampler(sampling_context):\n        qs = sampling_context.get('wsgi_environ', {}).get('QUERY_STRING', '')\n        if SENTRY_TOKEN and SENTRY_TOKEN in qs:\n            return 1.0\n        return config.getfloat('sentry', 'traces_sample_rate', fallback=0.0)\n\n    SENTRY_ENABLED = True\n    sentry_sdk.init(\n        dsn=config.get('sentry', 'dsn'),\n        integrations=[\n            PretixSentryIntegration(),\n            CeleryIntegration(),\n            LoggingIntegration(\n                level=logging.INFO,\n                event_level=logging.CRITICAL\n            )\n        ],\n        traces_sampler=traces_sampler,\n        environment=urlparse(SITE_URL).netloc,\n        release=__version__,\n        send_default_pii=False,\n        propagate_traces=False,  # see https://github.com/getsentry/sentry-python/issues/1717\n    )\n    ignore_logger('pretix.base.tasks')\n    ignore_logger('django.security.DisallowedHost')\n    setup_custom_filters()\n\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TASK_DEFAULT_QUEUE = 'default'\nCELERY_TASK_QUEUES = (\n    Queue('default', routing_key='default.#'),\n    Queue('checkout', routing_key='checkout.#'),\n    Queue('mail', routing_key='mail.#'),\n    Queue('background', routing_key='background.#'),\n    Queue('notifications', routing_key='notifications.#'),\n)\nCELERY_TASK_ROUTES = ([\n    ('pretix.base.services.cart.*', {'queue': 'checkout'}),\n    ('pretix.base.services.export.scheduled_organizer_export', {'queue': 'background'}),\n    ('pretix.base.services.export.scheduled_event_export', {'queue': 'background'}),\n    ('pretix.base.services.orders.*', {'queue': 'checkout'}),\n    ('pretix.base.services.mail.*', {'queue': 'mail'}),\n    ('pretix.base.services.update_check.*', {'queue': 'background'}),\n    ('pretix.base.services.quotas.*', {'queue': 'background'}),\n    ('pretix.base.services.waitinglist.*', {'queue': 'background'}),\n    ('pretix.base.services.notifications.*', {'queue': 'notifications'}),\n    ('pretix.api.webhooks.*', {'queue': 'notifications'}),\n    ('pretix.presale.style.*', {'queue': 'background'}),\n    ('pretix.plugins.banktransfer.*', {'queue': 'background'}),\n],)\n\nBOOTSTRAP3 = {\n    'success_css_class': '',\n    'field_renderers': {\n        'default': 'pretix.base.forms.renderers.FieldRenderer',\n        'inline': 'pretix.base.forms.renderers.InlineFieldRenderer',\n        'control': 'pretix.control.forms.renderers.ControlFieldRenderer',\n        'bulkedit': 'pretix.control.forms.renderers.BulkEditFieldRenderer',\n        'bulkedit_inline': 'pretix.control.forms.renderers.InlineBulkEditFieldRenderer',\n        'checkout': 'pretix.presale.forms.renderers.CheckoutFieldRenderer',\n    },\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nOAUTH2_PROVIDER_APPLICATION_MODEL = 'pretixapi.OAuthApplication'\nOAUTH2_PROVIDER_GRANT_MODEL = 'pretixapi.OAuthGrant'\nOAUTH2_PROVIDER_ACCESS_TOKEN_MODEL = 'pretixapi.OAuthAccessToken'\nOAUTH2_PROVIDER_ID_TOKEN_MODEL = 'pretixapi.OAuthIDToken'\nOAUTH2_PROVIDER_REFRESH_TOKEN_MODEL = 'pretixapi.OAuthRefreshToken'\nOAUTH2_PROVIDER = {\n    'SCOPES': {\n        'profile': _('User profile only'),\n        'read': _('Read access'),\n        'write': _('Write access'),\n    },\n    'OAUTH2_VALIDATOR_CLASS': 'pretix.api.oauth.Validator',\n    'ALLOWED_REDIRECT_URI_SCHEMES': ['https'] if not DEBUG else ['http', 'https'],\n    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600 * 24,\n    'ROTATE_REFRESH_TOKEN': False,\n    'PKCE_REQUIRED': False,\n    'OIDC_RESPONSE_TYPES_SUPPORTED': [\"code\"],  # We don't support proper OIDC for now\n}\n\nCOUNTRIES_OVERRIDE = {\n    'XK': _('Kosovo'),\n}\n\nDATA_UPLOAD_MAX_NUMBER_FIELDS = 25000\nDATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10 MB\n\n# File sizes are in MiB\nFILE_UPLOAD_MAX_SIZE_IMAGE = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_image\", fallback=10)\nFILE_UPLOAD_MAX_SIZE_FAVICON = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_favicon\", fallback=1)\nFILE_UPLOAD_MAX_SIZE_EMAIL_ATTACHMENT = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_email_attachment\", fallback=5)\nFILE_UPLOAD_MAX_SIZE_EMAIL_AUTO_ATTACHMENT = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_email_auto_attachment\", fallback=1)\nFILE_UPLOAD_MAX_SIZE_OTHER = 1024 * 1024 * config.getint(\"pretix_file_upload\", \"max_size_other\", fallback=10)\n\nDEFAULT_AUTO_FIELD = 'django.db.models.AutoField'  # sadly. we would prefer BigInt, and should use it for all new models but the migration will be hard\n"], "filenames": ["src/pretix/settings.py"], "buggy_code_start_loc": [191], "buggy_code_end_loc": [198], "fixing_code_start_loc": [191], "fixing_code_end_loc": [198], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in pretix before 2023.7.1. Incorrect parsing of configuration files causes the application to trust unchecked X-Forwarded-For headers even though it has not been configured to do so. This can lead to IP address spoofing by users of the application.", "other": {"cve": {"id": "CVE-2023-44463", "sourceIdentifier": "cve@mitre.org", "published": "2023-10-02T20:15:10.277", "lastModified": "2023-10-04T16:39:30.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in pretix before 2023.7.1. Incorrect parsing of configuration files causes the application to trust unchecked X-Forwarded-For headers even though it has not been configured to do so. This can lead to IP address spoofing by users of the application."}, {"lang": "es", "value": "Se descubri\u00f3 un problema en el pretix antes de 2023.7.1. El an\u00e1lisis incorrecto de los archivos de configuraci\u00f3n hace que la aplicaci\u00f3n conf\u00ede en encabezados X-Fordered-For no verificados aunque no haya sido configurada para hacerlo. Esto puede provocar que los usuarios de la aplicaci\u00f3n suplanten la direcci\u00f3n IP."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:rami:pretix:*:*:*:*:*:*:*:*", "versionEndExcluding": "2023.7.1", "matchCriteriaId": "D721E2BB-22BE-4C00-903C-C1706BBF87AB"}]}]}], "references": [{"url": "https://github.com/pretix/pretix/commit/ccdce2ccb8207b82501af3c03f50abc0f819b469", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/pretix/pretix/compare/v2023.7.0...v2023.7.1", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/pretix/pretix/tags", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://pretix.eu/about/en/blog/20230911-release-2023-7-1/", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://pretix.eu/about/en/ticketing", "source": "cve@mitre.org", "tags": ["Product"]}]}, "github_commit_url": "https://github.com/pretix/pretix/commit/ccdce2ccb8207b82501af3c03f50abc0f819b469"}}