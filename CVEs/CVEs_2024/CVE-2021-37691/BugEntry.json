{"buggy_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// LSH Projection projects an input to a bit vector via locality sensitive\n// hashing.\n//\n// Options:\n//   Sparse:\n//     Computed bit vector is considered to be sparse.\n//     Each output element is an int32 made up by multiple bits computed from\n// hash functions.\n//\n//   Dense:\n//     Computed bit vector is considered to be dense. Each output element is\n// either 0 or 1 that represents a bit.\n//\n// Input:\n//   Tensor[0]: Hash functions. Dim.size == 2, DataType: Float.\n//              Tensor[0].Dim[0]: Num of hash functions.\n//              Tensor[0].Dim[1]: Num of projected output bits generated by\n//                                each hash function.\n//   In sparse case, Tensor[0].Dim[1] + ceil( log2(Tensor[0].Dim[0] )) <= 32.\n//\n//   Tensor[1]: Input. Dim.size >= 1, No restriction on DataType.\n//   Tensor[2]: Optional, Weight. Dim.size == 1, DataType: Float.\n//              If not set, each element of input is considered to have same\n// weight of 1.0 Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Sparse:\n//     Output.Dim == { Tensor[0].Dim[0] }\n//     A tensor of int32 that represents hash signatures,\n//\n//     NOTE: To avoid collisions across hash functions, an offset value of\n//     k * (1 << Tensor[0].Dim[1]) will be added to each signature,\n//     k is the index of the hash function.\n//   Dense:\n//     Output.Dim == { Tensor[0].Dim[0] * Tensor[0].Dim[1] }\n//     A flattened tensor represents projected bit vectors.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstring>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include <farmhash.h>\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace lsh_projection {\n\nTfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);\n  // Support up to 32 bits.\n  TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n\n  if (NumInputs(node) == 3) {\n    const TfLiteTensor* weight;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &weight));\n    TF_LITE_ENSURE_EQ(context, NumDimensions(weight), 1);\n    TF_LITE_ENSURE_EQ(context, SizeOfDimension(weight, 0),\n                      SizeOfDimension(input, 0));\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);\n  switch (params->type) {\n    case kTfLiteLshProjectionSparse:\n      outputSize->data[0] = SizeOfDimension(hash, 0);\n      break;\n    case kTfLiteLshProjectionDense:\n      outputSize->data[0] = SizeOfDimension(hash, 0) * SizeOfDimension(hash, 1);\n      break;\n    default:\n      return kTfLiteError;\n  }\n  return context->ResizeTensor(context, output, outputSize);\n}\n\n// Compute sign bit of dot product of hash(seed, input) and weight.\n// NOTE: use float as seed, and convert it to double as a temporary solution\n//       to match the trained model. This is going to be changed once the new\n//       model is trained in an optimized method.\n//\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  double score = 0.0;\n  int input_item_bytes = input->bytes / SizeOfDimension(input, 0);\n  char* input_ptr = input->data.raw;\n\n  const size_t seed_size = sizeof(float);\n  const size_t key_bytes = sizeof(float) + input_item_bytes;\n  std::unique_ptr<char[]> key(new char[key_bytes]);\n\n  const float* weight_ptr = GetTensorData<float>(weight);\n\n  for (int i = 0; i < SizeOfDimension(input, 0); ++i) {\n    // Create running hash id and value for current dimension.\n    memcpy(key.get(), &seed, seed_size);\n    memcpy(key.get() + seed_size, input_ptr, input_item_bytes);\n\n    int64_t hash_signature = ::util::Fingerprint64(key.get(), key_bytes);\n    double running_value = static_cast<double>(hash_signature);\n    input_ptr += input_item_bytes;\n    if (weight_ptr == nullptr) {\n      score += running_value;\n    } else {\n      score += weight_ptr[i] * running_value;\n    }\n  }\n\n  return (score > 0) ? 1 : 0;\n}\n\nvoid SparseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                         const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    int32_t hash_signature = 0;\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      hash_signature = (hash_signature << 1) | bit;\n    }\n    *out_buf++ = hash_signature + i * (1 << num_bits);\n  }\n}\n\nvoid DenseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                        const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      *out_buf++ = bit;\n    }\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n\n  TfLiteTensor* out_tensor;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));\n  int32_t* out_buf = out_tensor->data.i32;\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  const TfLiteTensor* weight =\n      NumInputs(node) == 2 ? nullptr : GetInput(context, node, 2);\n\n  switch (params->type) {\n    case kTfLiteLshProjectionDense:\n      DenseLshProjection(hash, input, weight, out_buf);\n      break;\n    case kTfLiteLshProjectionSparse:\n      SparseLshProjection(hash, input, weight, out_buf);\n      break;\n    default:\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace lsh_projection\n\nTfLiteRegistration* Register_LSH_PROJECTION() {\n  static TfLiteRegistration r = {nullptr, nullptr, lsh_projection::Resize,\n                                 lsh_projection::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "fixing_code": ["/* Copyright 2017 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// LSH Projection projects an input to a bit vector via locality sensitive\n// hashing.\n//\n// Options:\n//   Sparse:\n//     Computed bit vector is considered to be sparse.\n//     Each output element is an int32 made up by multiple bits computed from\n// hash functions.\n//\n//   Dense:\n//     Computed bit vector is considered to be dense. Each output element is\n// either 0 or 1 that represents a bit.\n//\n// Input:\n//   Tensor[0]: Hash functions. Dim.size == 2, DataType: Float.\n//              Tensor[0].Dim[0]: Num of hash functions. Must be at least 1.\n//              Tensor[0].Dim[1]: Num of projected output bits generated by\n//                                each hash function.\n//   In sparse case, Tensor[0].Dim[1] + ceil( log2(Tensor[0].Dim[0] )) <= 32.\n//\n//   Tensor[1]: Input. Dim.size >= 1, No restriction on DataType.\n//   Tensor[2]: Optional, Weight. Dim.size == 1, DataType: Float.\n//              If not set, each element of input is considered to have same\n// weight of 1.0 Tensor[1].Dim[0] == Tensor[2].Dim[0]\n//\n// Output:\n//   Sparse:\n//     Output.Dim == { Tensor[0].Dim[0] }\n//     A tensor of int32 that represents hash signatures,\n//\n//     NOTE: To avoid collisions across hash functions, an offset value of\n//     k * (1 << Tensor[0].Dim[1]) will be added to each signature,\n//     k is the index of the hash function.\n//   Dense:\n//     Output.Dim == { Tensor[0].Dim[0] * Tensor[0].Dim[1] }\n//     A flattened tensor represents projected bit vectors.\n\n#include <stddef.h>\n#include <stdint.h>\n\n#include <cstring>\n#include <memory>\n\n#include \"tensorflow/lite/c/builtin_op_data.h\"\n#include \"tensorflow/lite/c/common.h\"\n#include \"tensorflow/lite/kernels/internal/tensor_ctypes.h\"\n#include \"tensorflow/lite/kernels/kernel_util.h\"\n#include <farmhash.h>\n\nnamespace tflite {\nnamespace ops {\nnamespace builtin {\nnamespace lsh_projection {\n\nTfLiteStatus Resize(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n  TF_LITE_ENSURE(context, NumInputs(node) == 2 || NumInputs(node) == 3);\n  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);\n\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  TF_LITE_ENSURE_EQ(context, NumDimensions(hash), 2);\n  // Support up to 32 bits.\n  TF_LITE_ENSURE(context, SizeOfDimension(hash, 1) <= 32);\n\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);\n  TF_LITE_ENSURE(context, SizeOfDimension(input, 0) >= 1);\n\n  if (NumInputs(node) == 3) {\n    const TfLiteTensor* weight;\n    TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 2, &weight));\n    TF_LITE_ENSURE_EQ(context, NumDimensions(weight), 1);\n    TF_LITE_ENSURE_EQ(context, SizeOfDimension(weight, 0),\n                      SizeOfDimension(input, 0));\n  }\n\n  TfLiteTensor* output;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &output));\n  TfLiteIntArray* outputSize = TfLiteIntArrayCreate(1);\n  switch (params->type) {\n    case kTfLiteLshProjectionSparse:\n      outputSize->data[0] = SizeOfDimension(hash, 0);\n      break;\n    case kTfLiteLshProjectionDense:\n      outputSize->data[0] = SizeOfDimension(hash, 0) * SizeOfDimension(hash, 1);\n      break;\n    default:\n      return kTfLiteError;\n  }\n  return context->ResizeTensor(context, output, outputSize);\n}\n\n// Compute sign bit of dot product of hash(seed, input) and weight.\n// NOTE: use float as seed, and convert it to double as a temporary solution\n//       to match the trained model. This is going to be changed once the new\n//       model is trained in an optimized method.\n//\nint RunningSignBit(const TfLiteTensor* input, const TfLiteTensor* weight,\n                   float seed) {\n  double score = 0.0;\n  int input_item_bytes = input->bytes / SizeOfDimension(input, 0);\n  char* input_ptr = input->data.raw;\n\n  const size_t seed_size = sizeof(float);\n  const size_t key_bytes = sizeof(float) + input_item_bytes;\n  std::unique_ptr<char[]> key(new char[key_bytes]);\n\n  const float* weight_ptr = GetTensorData<float>(weight);\n\n  for (int i = 0; i < SizeOfDimension(input, 0); ++i) {\n    // Create running hash id and value for current dimension.\n    memcpy(key.get(), &seed, seed_size);\n    memcpy(key.get() + seed_size, input_ptr, input_item_bytes);\n\n    int64_t hash_signature = ::util::Fingerprint64(key.get(), key_bytes);\n    double running_value = static_cast<double>(hash_signature);\n    input_ptr += input_item_bytes;\n    if (weight_ptr == nullptr) {\n      score += running_value;\n    } else {\n      score += weight_ptr[i] * running_value;\n    }\n  }\n\n  return (score > 0) ? 1 : 0;\n}\n\nvoid SparseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                         const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    int32_t hash_signature = 0;\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      hash_signature = (hash_signature << 1) | bit;\n    }\n    *out_buf++ = hash_signature + i * (1 << num_bits);\n  }\n}\n\nvoid DenseLshProjection(const TfLiteTensor* hash, const TfLiteTensor* input,\n                        const TfLiteTensor* weight, int32_t* out_buf) {\n  int num_hash = SizeOfDimension(hash, 0);\n  int num_bits = SizeOfDimension(hash, 1);\n  for (int i = 0; i < num_hash; i++) {\n    for (int j = 0; j < num_bits; j++) {\n      float seed = GetTensorData<float>(hash)[i * num_bits + j];\n      int bit = RunningSignBit(input, weight, seed);\n      *out_buf++ = bit;\n    }\n  }\n}\n\nTfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {\n  auto* params =\n      reinterpret_cast<TfLiteLSHProjectionParams*>(node->builtin_data);\n\n  TfLiteTensor* out_tensor;\n  TF_LITE_ENSURE_OK(context, GetOutputSafe(context, node, 0, &out_tensor));\n  int32_t* out_buf = out_tensor->data.i32;\n  const TfLiteTensor* hash;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 0, &hash));\n  const TfLiteTensor* input;\n  TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, 1, &input));\n  const TfLiteTensor* weight =\n      NumInputs(node) == 2 ? nullptr : GetInput(context, node, 2);\n\n  switch (params->type) {\n    case kTfLiteLshProjectionDense:\n      DenseLshProjection(hash, input, weight, out_buf);\n      break;\n    case kTfLiteLshProjectionSparse:\n      SparseLshProjection(hash, input, weight, out_buf);\n      break;\n    default:\n      return kTfLiteError;\n  }\n\n  return kTfLiteOk;\n}\n}  // namespace lsh_projection\n\nTfLiteRegistration* Register_LSH_PROJECTION() {\n  static TfLiteRegistration r = {nullptr, nullptr, lsh_projection::Resize,\n                                 lsh_projection::Eval};\n  return &r;\n}\n\n}  // namespace builtin\n}  // namespace ops\n}  // namespace tflite\n"], "filenames": ["tensorflow/lite/kernels/lsh_projection.cc"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [84], "fixing_code_start_loc": [31], "fixing_code_end_loc": [86], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). We have patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9. The fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-37691", "sourceIdentifier": "security-advisories@github.com", "published": "2021-08-12T23:15:08.870", "lastModified": "2021-08-18T21:53:48.823", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. In affected versions an attacker can craft a TFLite model that would trigger a division by zero error in LSH [implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). We have patched the issue in GitHub commit 0575b640091680cfb70f4dd93e70658de43b94f9. The fix will be included in TensorFlow 2.6.0. We will also cherrypick thiscommit on TensorFlow 2.5.1, TensorFlow 2.4.3, and TensorFlow 2.3.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;En las versiones afectadas, un atacante puede dise\u00f1ar un modelo TFLite que desencadenar\u00eda una divisi\u00f3n por error cero en LSH[implementation](https://github.com/tensorflow/tensorflow/blob/149562d49faa709ea80df1d99fc41d005b81082a/tensorflow/lite/kernels/lsh_projection.cc#L118). Hemos solucionado el problema en el commit de GitHub 0575b640091680cfb70f4dd93e70658de43b94f9.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.6.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.5.1, TensorFlow versi\u00f3n 2.4.3 y TensorFlow versi\u00f3n 2.3.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan se encuentran en el rango admitido."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.4", "matchCriteriaId": "0F83C081-51CC-415F-A8C0-0A44C75E2CD6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.3", "matchCriteriaId": "BD3F2BF8-EBA9-42BF-8F9B-D918B880B15A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "D03E99A7-4E3D-427D-A156-C0713E9FB02A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc0:*:*:*:*:*:*", "matchCriteriaId": "70FA6E48-6C57-40CA-809F-4E3D07CBF348"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "42187561-E491-434D-828C-F36701446634"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:2.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "C66B61C8-450A-4C5E-9174-F970D6DEE778"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-27qf-jwm8-g7f3", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/0575b640091680cfb70f4dd93e70658de43b94f9"}}