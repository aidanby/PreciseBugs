{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.domain\");\npimcore.settings.translation.domain = Class.create({\n    filterField: null,\n    preconfiguredFilter: \"\",\n\n    initialize: function (domain, filter) {\n        this.domain = domain ?? 'messages';\n        this.dataUrl = Routing.generate('pimcore_admin_translation_translations');\n        this.exportUrl = Routing.generate('pimcore_admin_translation_export');\n        this.uploadImportUrl = Routing.generate('pimcore_admin_translation_uploadimportfile');\n        this.importUrl = Routing.generate('pimcore_admin_translation_import');\n        this.mergeUrl = Routing.generate('pimcore_admin_translation_import', {merge: 1});\n        this.cleanupUrl = Routing.generate('pimcore_admin_translation_cleanup');\n        this.preconfiguredFilter = filter;\n        this.config = {};\n\n        this.initializeFilters();\n        this.getAvailableLanguages();\n    },\n\n    initializeFilters: function () {\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            value: this.preconfiguredFilter,\n            listeners: {\n                \"keydown\": function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.searchString = input.getValue();\n                        this.store.load({\n                            page: 1\n                        });\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.filterDomainField = new Ext.form.ComboBox({\n            emptyText: t('translations'),\n            name: \"domain\",\n            valueField: \"name\",\n            displayField: 'name',\n            value: this.domain,\n            store: new Ext.data.ArrayStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_translation_gettranslationdomains'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'domains'\n                    }\n                },\n                fields: ['name'],\n            }),\n            listeners: {\n                change: function (combo, newValue, oldValue) {\n                    this.domain = newValue;\n                    this.getAvailableLanguages();\n                }.bind(this),\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('translations')\n                    });\n                }\n            },\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            width: 150\n        });\n\n        this.filterLocaleField = new Ext.form.ComboBox({\n            emptyText: t('locale'),\n            name: \"locale\",\n            valueField: \"key\",\n            displayField: 'name',\n            tooltip: t('locale'),\n            store: new Ext.data.SimpleStore({\n                fields: ['key', 'name'],\n                data: []\n            }),\n            multiSelect: true,\n            listeners: {\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('locale')\n                    });\n                },\n                change: function (combo, records) {\n                    let languages = [];\n                    Ext.each(records, function (rec) {\n                        languages.push('translation_column_' + this.domain + '_' + rec.toLowerCase());\n                    }.bind(this));\n\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i = 0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            cm[i].hide();\n                            if (languages.length <= 0 || in_array(columnId, languages)) {\n                                cm[i].show();\n                            }\n                        }\n                    }\n                }.bind(this),\n            },\n            triggerAction: 'all',\n            mode: \"local\",\n            queryMode: 'local',\n            width: 150\n        });\n    },\n\n    getAvailableLanguages: function () {\n        let route = 'pimcore_admin_translation_getwebsitetranslationlanguages';\n        if (this.domain === 'admin') {\n            route = 'pimcore_admin_settings_getavailableadminlanguages';\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate(route),\n            success: function (response) {\n                try {\n                    if (this.domain === 'admin') {\n                        let languages = Ext.decode(response.responseText);\n                        this.languages = [];\n                        for (let i = 0; i < languages.length; i++) {\n                            this.languages.push(languages[i][\"language\"]);\n                        }\n                    } else {\n                        let container = Ext.decode(response.responseText);\n                        this.languages = container.view;\n                        this.editableLanguages = container.edit;\n                    }\n\n                    let languageStore = [];\n                    for (var i = 0; i < this.languages.length; i++) {\n                        languageStore.push([this.languages[i], t(this.languages[i])]);\n                    }\n\n                    this.filterLocaleField.getStore().loadData(languageStore);\n                    this.filterLocaleField.reset();\n                    this.getTabPanel();\n\n                    pimcore.layout.refresh();\n\n                } catch (e) {\n                    console.error(e);\n                    Ext.MessageBox.alert(t('error'), t('translations_are_not_configured')\n                        + '<br /><br /><a href=\"http://www.pimcore.org/docs/\" target=\"_blank\">'\n                        + t(\"read_more_here\") + '</a>');\n                }\n            }.bind(this)\n        });\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_translations_domain\",\n                iconCls: \"pimcore_icon_translations\",\n                title: t(\"translations\"),\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_translations_domain\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"translationdomainmanager\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        this.createGrid();\n\n        return this.panel;\n    },\n\n    createGrid: function () {\n\n        var stateId = \"tr_\" + this.domain;\n        var applyInitialSettings = false;\n        var showInfo = false;\n        var state = Ext.state.Manager.getProvider().get(stateId, null);\n        var languages = this.languages;\n\n        var maxCols = 7;   // including action column)\n        var maxLanguages = maxCols - 1;\n\n        if (state == null) {\n            applyInitialSettings = true;\n            if (languages.length > maxLanguages) {\n                showInfo = true;\n            }\n        } else {\n            if (state.columns) {\n                for (var i = 0; i < state.columns.length; i++) {\n                    var colState = state.columns[i];\n                    if (colState.hidden) {\n                        showInfo = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        var dateConverter = function (v, r) {\n            var d = new Date(intval(v));\n            return d;\n        };\n\n        var readerFields = [\n            {name: 'id', persist: false},\n            {name: 'editor', persist: false},\n            {name: 'key', allowBlank: false},\n            {name: 'type', allowBlank: false},\n            {name: 'creationDate', type: 'date', convert: dateConverter, persist: false},\n            {name: 'modificationDate', type: 'date', convert: dateConverter, persist: false}\n        ];\n\n        var typesColumns = [\n            {text: t(\"key\"), sortable: true, dataIndex: 'key', flex: 1, editable: false, filter: 'string'},\n            {text: t(\"type\"), sortable: true, dataIndex: 'type', width: 100, editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [[\"simple\", t('translation_simple')],[\"custom\", t('translation_custom')]]\n                }),\n                renderer: function (value) {\n                    return t('translation_' + value);\n                }\n            },\n        ];\n\n        for (var i = 0; i < languages.length; i++) {\n            readerFields.push({name: \"_\" + languages[i], defaultValue: ''});\n\n            let editable = in_array(languages[i], this.editableLanguages);\n            let columnConfig = {\n                cls: \"x-column-header_\" + languages[i].toLowerCase(),\n                text: pimcore.available_languages[languages[i]],\n                sortable: true,\n                flex: 1,\n                dataIndex: \"_\" + languages[i],\n                filter: 'string',\n                editor: this.getCellEditor(editable),\n                renderer: function (text) {\n                    if (text) {\n                        return replace_html_event_attributes(strip_tags(text, 'div,span,b,strong,em,i,small,sup,sub,p'));\n                    }\n                },\n                id: \"translation_column_\" + this.domain + \"_\" + languages[i].toLowerCase()\n            };\n            if (applyInitialSettings) {\n                var hidden = i >= maxLanguages;\n                columnConfig.hidden = hidden;\n            }\n\n            typesColumns.push(columnConfig);\n        }\n\n        if (showInfo) {\n            pimcore.helpers.showNotification(t(\"info\"), t(\"there_are_more_columns\"), null, null, 2000);\n        }\n\n        var dateRenderer = function (d) {\n            var date = new Date(d * 1000);\n            return Ext.Date.format(date, \"Y-m-d H:i:s\");\n        };\n\n        typesColumns.push({\n            text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        typesColumns.push({\n            text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        if (pimcore.globalmanager.get(\"user\").admin || this.domain === 'admin' || pimcore.settings.websiteLanguages.length == this.editableLanguages.length) {\n            typesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('translation'), data.data.key, function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            });\n        }\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            this.dataUrl,\n            readerFields,\n            itemsPerPage, {\n                idProperty: 'key'\n            }\n        );\n\n        var store = this.store;\n\n        this.store.getProxy().on('exception', function (proxy, request, operation) {\n            operation.config.records.forEach(function (item) {\n                store.remove(item);\n            });\n        });\n\n        let proxy = store.getProxy();\n        proxy.extraParams[\"domain\"] = this.domain;\n\n        if (this.preconfiguredFilter) {\n            proxy.extraParams[\"searchString\"] = this.preconfiguredFilter;\n        }\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(editor, context) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            let column = context.grid.getColumnManager().columns[i];\n                            let editor = column.getEditor();\n                            let value = context.record.get(column.dataIndex);\n                            editor.recordReference = context.record;\n                            this.setValueStatus(editor, value);\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                },\n                this.filterDomainField,\n                this.filterLocaleField,\n                '-', {\n                    text: this.getHint(),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                \"->\",\n                {\n                    text: t('cleanup'),\n                    handler: this.cleanup.bind(this),\n                    iconCls: \"pimcore_icon_cleanup\"\n                },\n                \"-\",\n                {\n                    text: t('merge_csv'),\n                    handler: this.doMerge.bind(this),\n                    iconCls: \"pimcore_icon_merge\"\n                },\n                '-',\n                {\n                    text: t('export_csv'),\n                    handler: this.doExport.bind(this),\n                    iconCls: \"pimcore_icon_export\"\n                }, '-', {\n                    text: t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }, this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            bodyCls: \"pimcore_editable_grid\",\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            stripeRows: true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            },\n            trackMouseOver: true,\n            bbar: this.pagingtoolbar,\n            stateful: true,\n            stateId: stateId,\n            stateEvents: ['columnmove', 'columnresize', 'sortchange', 'groupchange'],\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                \"pimcore.gridfilters\",\n                this.rowEditing\n            ],\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                loadingText: t('please_wait'),\n                enableTextSelection: true\n            }\n        });\n\n        this.store.load();\n\n        this.panel.removeAll();\n        this.panel.add(this.grid);\n        this.panel.updateLayout();\n    },\n\n    doMerge: function () {\n        pimcore.helpers.uploadDialog(this.uploadImportUrl, \"Filedata\", function (result) {\n            var data = result.response.responseText;\n            data = Ext.decode(data);\n\n            if(data && data.success == true) {\n                this.config = data.config;\n                this.showImportForm();\n            } else {\n                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n            }\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    refresh: function () {\n        this.store.reload();\n    },\n\n    showImportForm: function () {\n        this.csvSettingsPanel = new pimcore.settings.translation.translationSettingsTab(this.config, false, this);\n\n        var ImportForm = new Ext.form.FormPanel({\n            width: 500,\n            bodyStyle: 'padding: 10px;',\n            items: [{\n                    xtype: \"form\",\n                    bodyStyle: \"padding: 10px;\",\n                    defaults: {\n                        labelWidth: 250,\n                        width: 550\n                    },\n                    itemId: \"form\",\n                    items: [this.csvSettingsPanel.getPanel()],\n                    buttons: [{\n                        text: t(\"cancel\"),\n                        iconCls: \"pimcore_icon_cancel\",\n                        handler: function () {\n                            win.close();\n                        }\n                    },\n                    {\n                    text: t(\"import\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        if(ImportForm.isValid()) {\n                            this.csvSettingsPanel.commitData();\n                            var csvSettings = Ext.encode(this.config.csvSettings);\n                            ImportForm.getForm().submit({\n                                url: this.mergeUrl,\n                                params: {csvSettings: csvSettings, domain: this.domain},\n                                waitMsg: t(\"please_wait\"),\n                                success: function (el, response) {\n                                    try {\n                                        var data = response.response.responseText;\n                                        data = Ext.decode(data);\n                                        var merger = new pimcore.settings.translation.translationmerger(this.domain, data, this);\n                                        this.refresh();\n                                        win.close();\n                                    } catch (e) {\n                                        Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                                        win.close();\n                                    }\n                                }.bind(this),\n                                failure: function (message) {\n                                    Ext.MessageBox.alert(t(\"error\"), t(\"error\"), t(message));\n                                    win.close();\n                                }\n                            });\n                        }\n                    }.bind(this)\n                    }]\n                }]\n        });\n\n        var windowCfg = {\n            title: t(\"merge_csv\") + \" (Domain: \" + this.domain + \")\",\n            width: 600,\n            layout: \"fit\",\n            closeAction: \"close\",\n            items: [ImportForm]\n        };\n\n        var win = new Ext.Window(windowCfg);\n\n        win.show();\n    },\n\n    doExport: function () {\n        let store = this.grid.store;\n        let storeFilters = store.getFilters().items;\n        let proxy = store.getProxy();\n        let queryString = \"domain=\" + this.domain;\n\n        let filtersActive = this.filterField.getValue() || storeFilters.length > 0;\n        if (filtersActive) {\n            Ext.MessageBox.confirm(\"\", t(\"filter_active_message\"), function (buttonValue) {\n                if (buttonValue == \"yes\") {\n                    queryString += \"&searchString=\" + this.filterField.getValue() + \"&domain=\" + this.domain;\n                    queryString += \"&filter=\" + proxy.encodeFilters(storeFilters);\n                }\n                pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n            }.bind(this));\n        } else {\n            pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n\n        Ext.MessageBox.prompt(\"\", t(\"please_enter_the_new_name\"), function (button, value) {\n            if (button == \"ok\") {\n                this.rowEditing.cancelEdit();\n\n                this.grid.store.insert(0, {\n                    key: value\n                });\n\n                this.rowEditing.startEdit(0, 2);\n            }\n        }.bind(this));\n    },\n\n    activate: function (filter) {\n        if (filter) {\n            this.store.getProxy().setExtraParam(\"searchString\", filter);\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_translations_domain\");\n    },\n\n    getHint: function () {\n        return this.domain === 'admin' ? t('translations_admin_hint') : \"\";\n    },\n\n    cleanup: function () {\n        Ext.Ajax.request({\n            url: this.cleanupUrl,\n            method: 'DELETE',\n            params: {\n                domain: this.domain\n            },\n            success: function (response) {\n                this.store.reload();\n            }.bind(this)\n        });\n    },\n\n    setValueStatus: function (field, value) {\n\n        field.setEditable(true);\n        field.removeCls('pimcore_translation_cell_disabled');\n        field.getTrigger('plain').show();\n        field.getTrigger('html').show();\n\n        if(!value || !Ext.isString(value)) {\n            return;\n        }\n\n        if(value) {\n            let html = /<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/.test(value);\n            let plain = value.match(/\\n/gm)\n\n            if (html || plain) {\n                field.setEditable(false);\n                field.addCls('pimcore_translation_cell_disabled');\n\n                if(html) {\n                    field.getTrigger('plain').hide();\n                } else {\n                    field.getTrigger('html').hide();\n                }\n            }\n        }\n    },\n\n    openEditorWindow: function (field, editorType) {\n        if(this.currentEditorWindow) {\n            //this.currentEditorWindow.destroy();\n            this.currentEditorWindow = null;\n        }\n\n        this.currentEditorWindow = new pimcore.settings.translation.editor(this, field, field.recordReference.get('type'), editorType)\n    },\n\n    getCellEditor: function(editable) {\n        return new Ext.form.field.TextArea({\n            enableKeyEvents: true,\n            fieldStyle: 'min-height:30px',\n            disabled: !editable,\n            listeners: {\n                keyup: function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        return false;\n                    }\n                }\n            },\n            triggers: {\n                html: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_html',\n                    tooltip: t('edit_as_html'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'wysiwyg');\n                    }.bind(this)\n                },\n                plain: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_text',\n                    tooltip: t('edit_as_plain_text'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'plainText');\n                    }.bind(this)\n                }\n            }\n        });\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.translation.domain\");\npimcore.settings.translation.domain = Class.create({\n    filterField: null,\n    preconfiguredFilter: \"\",\n\n    initialize: function (domain, filter) {\n        this.domain = domain ?? 'messages';\n        this.dataUrl = Routing.generate('pimcore_admin_translation_translations');\n        this.exportUrl = Routing.generate('pimcore_admin_translation_export');\n        this.uploadImportUrl = Routing.generate('pimcore_admin_translation_uploadimportfile');\n        this.importUrl = Routing.generate('pimcore_admin_translation_import');\n        this.mergeUrl = Routing.generate('pimcore_admin_translation_import', {merge: 1});\n        this.cleanupUrl = Routing.generate('pimcore_admin_translation_cleanup');\n        this.preconfiguredFilter = filter;\n        this.config = {};\n\n        this.initializeFilters();\n        this.getAvailableLanguages();\n    },\n\n    initializeFilters: function () {\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 200,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            value: this.preconfiguredFilter,\n            listeners: {\n                \"keydown\": function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.searchString = input.getValue();\n                        this.store.load({\n                            page: 1\n                        });\n                    }\n                }.bind(this)\n            }\n        });\n\n        this.filterDomainField = new Ext.form.ComboBox({\n            emptyText: t('translations'),\n            name: \"domain\",\n            valueField: \"name\",\n            displayField: 'name',\n            value: this.domain,\n            store: new Ext.data.ArrayStore({\n                autoDestroy: true,\n                proxy: {\n                    type: 'ajax',\n                    url: Routing.generate('pimcore_admin_translation_gettranslationdomains'),\n                    reader: {\n                        type: 'json',\n                        rootProperty: 'domains'\n                    }\n                },\n                fields: ['name'],\n            }),\n            listeners: {\n                change: function (combo, newValue, oldValue) {\n                    this.domain = newValue;\n                    this.getAvailableLanguages();\n                }.bind(this),\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('translations')\n                    });\n                }\n            },\n            editable: false,\n            triggerAction: 'all',\n            mode: \"local\",\n            width: 150\n        });\n\n        this.filterLocaleField = new Ext.form.ComboBox({\n            emptyText: t('locale'),\n            name: \"locale\",\n            valueField: \"key\",\n            displayField: 'name',\n            tooltip: t('locale'),\n            store: new Ext.data.SimpleStore({\n                fields: ['key', 'name'],\n                data: []\n            }),\n            multiSelect: true,\n            listeners: {\n                render: function (c) {\n                    new Ext.ToolTip({\n                        target: c.getEl(),\n                        html: t('locale')\n                    });\n                },\n                change: function (combo, records) {\n                    let languages = [];\n                    Ext.each(records, function (rec) {\n                        languages.push('translation_column_' + this.domain + '_' + rec.toLowerCase());\n                    }.bind(this));\n\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i = 0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            cm[i].hide();\n                            if (languages.length <= 0 || in_array(columnId, languages)) {\n                                cm[i].show();\n                            }\n                        }\n                    }\n                }.bind(this),\n            },\n            triggerAction: 'all',\n            mode: \"local\",\n            queryMode: 'local',\n            width: 150\n        });\n    },\n\n    getAvailableLanguages: function () {\n        let route = 'pimcore_admin_translation_getwebsitetranslationlanguages';\n        if (this.domain === 'admin') {\n            route = 'pimcore_admin_settings_getavailableadminlanguages';\n        }\n\n        Ext.Ajax.request({\n            url: Routing.generate(route),\n            success: function (response) {\n                try {\n                    if (this.domain === 'admin') {\n                        let languages = Ext.decode(response.responseText);\n                        this.languages = [];\n                        for (let i = 0; i < languages.length; i++) {\n                            this.languages.push(languages[i][\"language\"]);\n                        }\n                    } else {\n                        let container = Ext.decode(response.responseText);\n                        this.languages = container.view;\n                        this.editableLanguages = container.edit;\n                    }\n\n                    let languageStore = [];\n                    for (var i = 0; i < this.languages.length; i++) {\n                        languageStore.push([this.languages[i], t(this.languages[i])]);\n                    }\n\n                    this.filterLocaleField.getStore().loadData(languageStore);\n                    this.filterLocaleField.reset();\n                    this.getTabPanel();\n\n                    pimcore.layout.refresh();\n\n                } catch (e) {\n                    console.error(e);\n                    Ext.MessageBox.alert(t('error'), t('translations_are_not_configured')\n                        + '<br /><br /><a href=\"http://www.pimcore.org/docs/\" target=\"_blank\">'\n                        + t(\"read_more_here\") + '</a>');\n                }\n            }.bind(this)\n        });\n    },\n\n    getTabPanel: function () {\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_translations_domain\",\n                iconCls: \"pimcore_icon_translations\",\n                title: t(\"translations\"),\n                border: false,\n                layout: \"fit\",\n                closable: true,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_translations_domain\");\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"translationdomainmanager\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        this.createGrid();\n\n        return this.panel;\n    },\n\n    createGrid: function () {\n\n        var stateId = \"tr_\" + this.domain;\n        var applyInitialSettings = false;\n        var showInfo = false;\n        var state = Ext.state.Manager.getProvider().get(stateId, null);\n        var languages = this.languages;\n\n        var maxCols = 7;   // including action column)\n        var maxLanguages = maxCols - 1;\n\n        if (state == null) {\n            applyInitialSettings = true;\n            if (languages.length > maxLanguages) {\n                showInfo = true;\n            }\n        } else {\n            if (state.columns) {\n                for (var i = 0; i < state.columns.length; i++) {\n                    var colState = state.columns[i];\n                    if (colState.hidden) {\n                        showInfo = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        var dateConverter = function (v, r) {\n            var d = new Date(intval(v));\n            return d;\n        };\n\n        var readerFields = [\n            {name: 'id', persist: false},\n            {name: 'editor', persist: false},\n            {name: 'key', allowBlank: false},\n            {name: 'type', allowBlank: false},\n            {name: 'creationDate', type: 'date', convert: dateConverter, persist: false},\n            {name: 'modificationDate', type: 'date', convert: dateConverter, persist: false}\n        ];\n\n        var typesColumns = [\n            {text: t(\"key\"), sortable: true, dataIndex: 'key', flex: 1, editable: false, filter: 'string',\n                editor: new Ext.form.DisplayField({\n                    htmlEncode: true\n                })},\n            {text: t(\"type\"), sortable: true, dataIndex: 'type', width: 100, editor: new Ext.form.ComboBox({\n                    triggerAction: 'all',\n                    editable: false,\n                    store: [[\"simple\", t('translation_simple')],[\"custom\", t('translation_custom')]]\n                }),\n                renderer: function (value) {\n                    return t('translation_' + value);\n                }\n            },\n        ];\n\n        for (var i = 0; i < languages.length; i++) {\n            readerFields.push({name: \"_\" + languages[i], defaultValue: ''});\n\n            let editable = in_array(languages[i], this.editableLanguages);\n            let columnConfig = {\n                cls: \"x-column-header_\" + languages[i].toLowerCase(),\n                text: pimcore.available_languages[languages[i]],\n                sortable: true,\n                flex: 1,\n                dataIndex: \"_\" + languages[i],\n                filter: 'string',\n                editor: this.getCellEditor(editable),\n                renderer: function (text) {\n                    if (text) {\n                        return replace_html_event_attributes(strip_tags(text, 'div,span,b,strong,em,i,small,sup,sub,p'));\n                    }\n                },\n                id: \"translation_column_\" + this.domain + \"_\" + languages[i].toLowerCase()\n            };\n            if (applyInitialSettings) {\n                var hidden = i >= maxLanguages;\n                columnConfig.hidden = hidden;\n            }\n\n            typesColumns.push(columnConfig);\n        }\n\n        if (showInfo) {\n            pimcore.helpers.showNotification(t(\"info\"), t(\"there_are_more_columns\"), null, null, 2000);\n        }\n\n        var dateRenderer = function (d) {\n            var date = new Date(d * 1000);\n            return Ext.Date.format(date, \"Y-m-d H:i:s\");\n        };\n\n        typesColumns.push({\n            text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        typesColumns.push({\n            text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false\n            , renderer: dateRenderer, filter: 'date', hidden: true\n        });\n\n        if (pimcore.globalmanager.get(\"user\").admin || this.domain === 'admin' || pimcore.settings.websiteLanguages.length == this.editableLanguages.length) {\n            typesColumns.push({\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                width: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('translation'), Ext.util.Format.htmlEncode(data.data.key), function () {\n                            grid.getStore().removeAt(rowIndex);\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            });\n        }\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize(-1);\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            this.dataUrl,\n            readerFields,\n            itemsPerPage, {\n                idProperty: 'key'\n            }\n        );\n\n        var store = this.store;\n\n        this.store.getProxy().on('exception', function (proxy, request, operation) {\n            operation.config.records.forEach(function (item) {\n                store.remove(item);\n            });\n        });\n\n        let proxy = store.getProxy();\n        proxy.extraParams[\"domain\"] = this.domain;\n\n        if (this.preconfiguredFilter) {\n            proxy.extraParams[\"searchString\"] = this.preconfiguredFilter;\n        }\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store, {pageSize: itemsPerPage});\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function(editor, context) {\n                    let cm = this.grid.getColumnManager().getColumns();\n                    for (let i=0; i < cm.length; i++) {\n                        let columnId = cm[i].id;\n                        if (columnId.startsWith('translation_column_')) {\n                            let column = context.grid.getColumnManager().columns[i];\n                            let editor = column.getEditor();\n                            let value = context.record.get(column.dataIndex);\n                            editor.recordReference = context.record;\n                            this.setValueStatus(editor, value);\n                        }\n                    }\n                }.bind(this)\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    text: t('add'),\n                    handler: this.onAdd.bind(this),\n                    iconCls: \"pimcore_icon_add\"\n                },\n                this.filterDomainField,\n                this.filterLocaleField,\n                '-', {\n                    text: this.getHint(),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                \"->\",\n                {\n                    text: t('cleanup'),\n                    handler: this.cleanup.bind(this),\n                    iconCls: \"pimcore_icon_cleanup\"\n                },\n                \"-\",\n                {\n                    text: t('merge_csv'),\n                    handler: this.doMerge.bind(this),\n                    iconCls: \"pimcore_icon_merge\"\n                },\n                '-',\n                {\n                    text: t('export_csv'),\n                    handler: this.doExport.bind(this),\n                    iconCls: \"pimcore_icon_export\"\n                }, '-', {\n                    text: t(\"filter\") + \"/\" + t(\"search\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                }, this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            bodyCls: \"pimcore_editable_grid\",\n            autoScroll: true,\n            store: this.store,\n            columnLines: true,\n            stripeRows: true,\n            columns: {\n                items: typesColumns,\n                defaults: {\n                    renderer: Ext.util.Format.htmlEncode\n                }\n            },\n            trackMouseOver: true,\n            bbar: this.pagingtoolbar,\n            stateful: true,\n            stateId: stateId,\n            stateEvents: ['columnmove', 'columnresize', 'sortchange', 'groupchange'],\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                \"pimcore.gridfilters\",\n                this.rowEditing\n            ],\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                loadingText: t('please_wait'),\n                enableTextSelection: true\n            }\n        });\n\n        this.store.load();\n\n        this.panel.removeAll();\n        this.panel.add(this.grid);\n        this.panel.updateLayout();\n    },\n\n    doMerge: function () {\n        pimcore.helpers.uploadDialog(this.uploadImportUrl, \"Filedata\", function (result) {\n            var data = result.response.responseText;\n            data = Ext.decode(data);\n\n            if(data && data.success == true) {\n                this.config = data.config;\n                this.showImportForm();\n            } else {\n                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n            }\n        }.bind(this), function () {\n            Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n        });\n    },\n\n    refresh: function () {\n        this.store.reload();\n    },\n\n    showImportForm: function () {\n        this.csvSettingsPanel = new pimcore.settings.translation.translationSettingsTab(this.config, false, this);\n\n        var ImportForm = new Ext.form.FormPanel({\n            width: 500,\n            bodyStyle: 'padding: 10px;',\n            items: [{\n                    xtype: \"form\",\n                    bodyStyle: \"padding: 10px;\",\n                    defaults: {\n                        labelWidth: 250,\n                        width: 550\n                    },\n                    itemId: \"form\",\n                    items: [this.csvSettingsPanel.getPanel()],\n                    buttons: [{\n                        text: t(\"cancel\"),\n                        iconCls: \"pimcore_icon_cancel\",\n                        handler: function () {\n                            win.close();\n                        }\n                    },\n                    {\n                    text: t(\"import\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        if(ImportForm.isValid()) {\n                            this.csvSettingsPanel.commitData();\n                            var csvSettings = Ext.encode(this.config.csvSettings);\n                            ImportForm.getForm().submit({\n                                url: this.mergeUrl,\n                                params: {csvSettings: csvSettings, domain: this.domain},\n                                waitMsg: t(\"please_wait\"),\n                                success: function (el, response) {\n                                    try {\n                                        var data = response.response.responseText;\n                                        data = Ext.decode(data);\n                                        var merger = new pimcore.settings.translation.translationmerger(this.domain, data, this);\n                                        this.refresh();\n                                        win.close();\n                                    } catch (e) {\n                                        Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                                        win.close();\n                                    }\n                                }.bind(this),\n                                failure: function (message) {\n                                    Ext.MessageBox.alert(t(\"error\"), t(\"error\"), t(message));\n                                    win.close();\n                                }\n                            });\n                        }\n                    }.bind(this)\n                    }]\n                }]\n        });\n\n        var windowCfg = {\n            title: t(\"merge_csv\") + \" (Domain: \" + this.domain + \")\",\n            width: 600,\n            layout: \"fit\",\n            closeAction: \"close\",\n            items: [ImportForm]\n        };\n\n        var win = new Ext.Window(windowCfg);\n\n        win.show();\n    },\n\n    doExport: function () {\n        let store = this.grid.store;\n        let storeFilters = store.getFilters().items;\n        let proxy = store.getProxy();\n        let queryString = \"domain=\" + this.domain;\n\n        let filtersActive = this.filterField.getValue() || storeFilters.length > 0;\n        if (filtersActive) {\n            Ext.MessageBox.confirm(\"\", t(\"filter_active_message\"), function (buttonValue) {\n                if (buttonValue == \"yes\") {\n                    queryString += \"&searchString=\" + this.filterField.getValue() + \"&domain=\" + this.domain;\n                    queryString += \"&filter=\" + proxy.encodeFilters(storeFilters);\n                }\n                pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n            }.bind(this));\n        } else {\n            pimcore.helpers.download(Ext.urlAppend(this.exportUrl, queryString));\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n\n        Ext.MessageBox.prompt(\"\", t(\"please_enter_the_new_name\"), function (button, value) {\n            if (button == \"ok\") {\n                this.rowEditing.cancelEdit();\n\n                this.grid.store.insert(0, {\n                    key: value\n                });\n\n                this.rowEditing.startEdit(0, 2);\n            }\n        }.bind(this));\n    },\n\n    activate: function (filter) {\n        if (filter) {\n            this.store.getProxy().setExtraParam(\"searchString\", filter);\n            this.store.load();\n            this.filterField.setValue(filter);\n        }\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_translations_domain\");\n    },\n\n    getHint: function () {\n        return this.domain === 'admin' ? t('translations_admin_hint') : \"\";\n    },\n\n    cleanup: function () {\n        Ext.Ajax.request({\n            url: this.cleanupUrl,\n            method: 'DELETE',\n            params: {\n                domain: this.domain\n            },\n            success: function (response) {\n                this.store.reload();\n            }.bind(this)\n        });\n    },\n\n    setValueStatus: function (field, value) {\n\n        field.setEditable(true);\n        field.removeCls('pimcore_translation_cell_disabled');\n        field.getTrigger('plain').show();\n        field.getTrigger('html').show();\n\n        if(!value || !Ext.isString(value)) {\n            return;\n        }\n\n        if(value) {\n            let html = /<([A-Za-z][A-Za-z0-9]*)\\b[^>]*>(.*?)<\\/\\1>/.test(value);\n            let plain = value.match(/\\n/gm)\n\n            if (html || plain) {\n                field.setEditable(false);\n                field.addCls('pimcore_translation_cell_disabled');\n\n                if(html) {\n                    field.getTrigger('plain').hide();\n                } else {\n                    field.getTrigger('html').hide();\n                }\n            }\n        }\n    },\n\n    openEditorWindow: function (field, editorType) {\n        if(this.currentEditorWindow) {\n            //this.currentEditorWindow.destroy();\n            this.currentEditorWindow = null;\n        }\n\n        this.currentEditorWindow = new pimcore.settings.translation.editor(this, field, field.recordReference.get('type'), editorType)\n    },\n\n    getCellEditor: function(editable) {\n        return new Ext.form.field.TextArea({\n            enableKeyEvents: true,\n            fieldStyle: 'min-height:30px',\n            disabled: !editable,\n            listeners: {\n                keyup: function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        return false;\n                    }\n                }\n            },\n            triggers: {\n                html: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_html',\n                    tooltip: t('edit_as_html'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'wysiwyg');\n                    }.bind(this)\n                },\n                plain: {\n                    cls: 'pimcore_translation_trigger pimcore_icon_text',\n                    tooltip: t('edit_as_plain_text'),\n                    handler: function (field, trigger) {\n                        this.openEditorWindow(field, 'plainText');\n                    }.bind(this)\n                }\n            }\n        });\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/translation.js"], "buggy_code_start_loc": [250], "buggy_code_end_loc": [319], "fixing_code_start_loc": [250], "fixing_code_end_loc": [322], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.4.", "other": {"cve": {"id": "CVE-2022-2796", "sourceIdentifier": "security@huntr.dev", "published": "2022-08-23T08:15:07.523", "lastModified": "2022-08-24T19:56:40.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.4."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Almacenado en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.5.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.4", "matchCriteriaId": "DB52954E-752C-4854-9210-81DF3D0B8A2A"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/2fd46859c1def6b5ab79ae2b9cb88c309769443d", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/69d56ec3-8370-44cf-9732-4065e3076097", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/2fd46859c1def6b5ab79ae2b9cb88c309769443d"}}