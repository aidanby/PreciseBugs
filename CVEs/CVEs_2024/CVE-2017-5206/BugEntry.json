{"buggy_code": ["firejail (0.9.44.3) baseline; urgency=low\n  * development version\n  * security: root exploit found by Sebastian Krahmer\n -- netblue30 <netblue30@yahoo.com>  Wed, 4 Jan 2017 11:00:00 -0500\n\nfirejail (0.9.44.2) baseline; urgency=low\n  * security: overwrite /etc/resolv.conf found by Martin Carpenter\n  * secuirty: TOCTOU exploit for --get and --put found by Daniel Hodson\n  * security: invalid environment exploit found by Martin Carpenter\n  * security: several security enhancements\n  * bugfix: crashing VLC by pressing Ctrl-O\n  * bugfix: use user configured icons in KDE\n  * bugfix: mkdir and mkfile are not applied to private directories\n  * bugfix: cannot open files on Deluge running under KDE\n  * bugfix: --private=dir where dir is the user home directory\n  * bugfix: cannot start Vivaldi browser\n  * bugfix: cannot start mupdf\n  * bugfix: ssh profile problems\n  * bugfix: --quiet\n  * bugfix: quiet in git profile\n  * bugfix: memory corruption\n -- netblue30 <netblue30@yahoo.com>  Fri, 2 Dec 2016 08:00:00 -0500\n  \nfirejail (0.9.44) baseline; urgency=low\n  * CVE-2016-7545 submitted by Aleksey Manevich\n  * modifs: removed man firejail-config\n  * modifs: --private-tmp whitelists /tmp/.X11-unix directory\n  * modifs: Nvidia drivers added to --private-dev\n  * modifs: /srv supported by --whitelist\n  * feature: allow user access to /sys/fs (--noblacklist=/sys/fs)\n  * feature: support starting/joining sandbox is a single command\n    (--join-or-start)\n  * feature: X11 detection support for --audit\n  * feature: assign a name to the interface connected to the bridge \n    (--veth-name)\n  * feature: all user home directories are visible (--allusers)\n  * feature: add files to sandbox container (--put)\n  * feature: blocking x11 (--x11=block)\n  * feature: X11 security extension (--x11=xorg)\n  * feature: disable 3D hardware acceleration (--no3d)\n  * feature: x11 xpra, x11 xephyr, x11 block, allusers, no3d profile commands\n  * feature: move files in sandbox (--put)\n  * feature: accept wildcard patterns in user  name field of restricted\n    shell login feature\n  * new profiles: qpdfview, mupdf, Luminance HDR, Synfig Studio, Gimp, Inkscape\n  * new profiles: feh, ranger, zathura, 7z, keepass, keepassx,\n  * new profiles: claws-mail, mutt, git, emacs, vim, xpdf, VirtualBox, OpenShot\n  * new profiles: Flowblade, Eye of GNOME (eog), Evolution\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Fri, 21 Oct 2016 08:00:00 -0500\n\nfirejail (0.9.42) baseline; urgency=low\n  * security: --whitelist deleted files, submitted by Vasya Novikov\n  * security: disable x32 ABI in seccomp, submitted by Jann Horn\n  * security: tighten --chroot, submitted by Jann Horn\n  * security: terminal sandbox escape, submitted by Stephan Sokolow\n  * security: several TOCTOU fixes submitted by Aleksey Manevich\n  * modifs: bringing back --private-home option\n  * modifs: deprecated --user option, please use \"sudo -u username firejail\"\n  * modifs: allow symlinks in home directory for --whitelist option\n  * modifs: Firejail prompt is enabled by env variable FIREJAIL_PROMPT=\"yes\"\n  * modifs: recursive mkdir\n  * modifs: include /dev/snd in --private-dev\n  * modifs: seccomp filter update\n  * modifs: release archives moved to .xz format\n  * feature: AppImage support (--appimage)\n  * feature: AppArmor support (--apparmor)\n  * feature: Ubuntu snap support (/etc/firejail/snap.profile)\n  * feature: Sandbox auditing support (--audit)\n  * feature: remove environment variable (--rmenv)\n  * feature: noexec support (--noexec)\n  * feature: clean local overlay storage directory (--overlay-clean)\n  * feature: store and reuse overlay (--overlay-named)\n  * feature: allow debugging inside the sandbox with gdb and strace\n         (--allow-debuggers)\n  * feature: mkfile profile command\n  * feature: quiet profile command\n  * feature: x11 profile command\n  * feature: option to fix desktop files (firecfg --fix)\n  * compile time: Busybox support (--enable-busybox-workaround)\n  * compile time: disable overlayfs (--disable-overlayfs)\n  * compile time: disable whitlisting (--disable-whitelist)\n  * compile time: disable global config (--disable-globalcfg)\n  * run time: enable/disable overlayfs (overlayfs yes/no)\n  * run time: enable/disable  quiet as default (quiet-by-default yes/no)\n  * run time: user-defined network filter (netfilter-default)\n  * run time: enable/disable whitelisting (whitelist yes/no)\n  * run time: enable/disable remounting of /proc and /sys\n          (remount-proc-sys yes/no)\n  * run time: enable/disable chroot desktop features (chroot-desktop yes/no)\n  * profiles: Gitter, gThumb, mpv, Franz messenger, LibreOffice\n  * profiles: pix, audacity, xz, xzdec, gzip, cpio, less\n  * profiles: Atom Beta, Atom, jitsi, eom, uudeview\n  * profiles: tar (gtar), unzip, unrar, file, skypeforlinux,\n  * profiles: inox, Slack, gnome-chess. Gajim IM client, DOSBox\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Thu, 8 Sept 2016 08:00:00 -0500\n\nfirejail (0.9.40) baseline; urgency=low\n  * added --nice option\n  * added --x11 option\n  * added --x11=xpra option\n  * added --x11=xephyr option\n  * added --cpu.print option\n  * added filetransfer options --ls and --get\n  * added --writable-etc and --writable-var options\n  * added --read-only option\n  * added mkdir, ipc-namespace, and nosound profile commands\n  * added net, ip, defaultgw, ip6, mac, mtu and iprange profile commands\n  * --version also prints compile options\n  * --output option also redirects stderr\n  * added compile-time option to restrict --net= to root only\n  * run time config support, man firejail-config\n  * added firecfg utility\n  * AppArmor fixes\n  * default seccomp filter update\n  * disable STUN/WebRTC in default netfilter configuration\n  * new profiles: lxterminal, Epiphany, cherrytree, Polari, Vivaldi, Atril\n  * new profiles: qutebrowser, SlimJet, Battle for Wesnoth, Hedgewars\n  * new profiles: qTox, OpenSSH client, OpenBox, Dillo, cmus, dnsmasq\n  * new profiles: PaleMoon, Icedove, abrowser, 0ad, netsurf, Warzone2100\n  * new profiles: okular, gwenview, Google-Play-Music-Desktop-Player\n  * new profiles: Aweather, Stellarium, gpredict, quiterss, cyberfox\n  * new profiles: generic Ubuntu snap application profile, xplayer\n  * new profiles: xreader, xviewer, mcabber, Psi+, Corebird, Konversation\n  * new profiles: Brave, Gitter\n  * generic.profile renamed default.profile\n  * build rpm packages using \"make rpms\"\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sun, 29 May 2016 08:00:00 -0500\n\nfirejail (0.9.38) baseline; urgency=low\n  * IPv6 support (--ip6 and --netfilter6)\n  * --join command enhancement (--join-network, --join-filesystem)\n  * added --user command\n  * added --disable-network and --disable-userns compile time flags\n  * Centos 6 support\n  * symlink invocation\n  * added KMail, Seamonkey, Telegram, Mathematica, uGet,\n  *   and mupen64plus profiles\n  * --chroot in user mode allowed only if seccomp support is available\n  *   in current Linux kernel\n  * deprecated --private-home feature\n  * the first protocol list installed takes precedence\n  * --tmpfs option allowed only running as root\n  * added --private-tmp option\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Tue, 2 Feb 2016 10:00:00 -0500\n\nfirejail (0.9.36) baseline; urgency=low\n  * added  unbound, dnscrypt-proxy, BitlBee, HexChat, WeeChat,\n     parole and rtorrent profiles\n  * Google Chrome profile rework\n  * added google-chrome-stable profile\n  * added google-chrome-beta profile\n  * added google-chrome-unstable profile\n  * Opera profile rework\n  * added opera-beta profile\n  * added --noblacklist option\n  * added --profile-path option\n  * added --force option\n  * whitelist command enhancements\n  * prevent user name enumeration\n  * added /etc/firejail/nolocal.net network filter\n  * added /etc/firejail/webserver.net network filter\n  * blacklisting firejail configuration by default\n  * allow default gateway configuration for --interface option\n  * --debug enhancements: --debug-check-filenames, --debug-blacklists,\n    --debug-whitelists\n  * filesystem log\n  * libtrace enhancements, tracing opendir call\n  * added --tracelog option\n  * added \"name\" command to profile files\n  * added \"hostname\" command to profile files\n  * added automated feature testing framework\n  * Debian reproducible build\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sun, 27 Dec 2015 09:00:00 -0500\n\nfirejail (0.9.34) baseline; urgency=low\n  * added --ignore option\n  * added --protocol option\n  * support dual i386/amd64 seccomp filters\n  * added Google Chrome profile\n  * added Steam, Skype, Wine and Conkeror profiles\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sat, 7 Nov 2015 08:00:00 -0500\n\nfirejail (0.9.32) baseline; urgency=low\n  * added --interface option\n  * added --mtu option\n  * added --private-bin option\n  * added --nosound option\n  * added --hostname option\n  * added --quiet option\n  * added seccomp errno support\n  * added FBReader default profile\n  * added Spotify default profile\n  * lots of default security profile changes\n  * fixed a security problem on multi-user systems\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Wed, 21 Oct 2015 08:00:00 -0500\n\n\nfirejail (0.9.30) baseline; urgency=low\n  * added a disable-history.inc profile as a result of Firefox PDF.js exploit;\n    disable-history.inc included in all default profiles\n  * Firefox PDF.js exploit (CVE-2015-4495) fixes\n  * added --private-etc option\n  * added --env option\n  * added --whitelist option\n  * support ${HOME} token in include directive in profile files\n  * --private.keep is transitioned to --private-home\n  * support ~ and blanks in blacklist option\n  * support \"net none\" command in profile files\n  * using /etc/firejail/generic.profile by default for user sessions\n  * using /etc/firejail/server.profile by default for root sessions\n  * added build --enable-fatal-warnings configure option\n  * added persistence to --overlay option\n  * added --overlay-tmpfs option\n  * make install-strip implemented, make install renamed\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Mon, 14 Sept 2015 08:00:00 -0500\n\nfirejail (0.9.28) baseline; urgency=low\n  * network scanning, --scan option\n  * interface MAC address support, --mac option\n  * IP address range, --iprange option\n  * traffic shaping, --bandwidth option\n  * reworked printing of network status at startup\n  * man pages rework\n  * added firejail-login man page\n  * added GNU Icecat, FileZilla, Pidgin, XChat, Empathy, DeaDBeeF default\n    profiles\n  * added an /etc/firejail/disable-common.inc file to hold common directory\n    blacklists\n  * blacklist Opera and Chrome/Chromium config directories in profile files\n  * support noroot option for profile files\n  * enabled noroot in default profile files\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sat, 1 Aug 2015 08:00:00 -0500\n\nfirejail (0.9.26) baseline; urgency=low\n  * private dev directory\n  * private.keep option for whitelisting home files in a new private directory\n  * user namespaces support, noroot option\n  * added Deluge and qBittorent profiles\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Thu, 30 Apr 2015 08:00:00 -0500\n\n\nfirejail (0.9.24) baseline; urgency=low\n  * whitelist and blacklist seccomp filters\n  * doubledash option\n  * --shell=none support\n  * netfilter file support in profile files\n  * dns server support in profile files\n  * added --dns.print option\n  * added default profiles for Audacious, Clementine, Gnome-MPlayer, Rhythmbox and Totem.\n  * added --caps.drop=all in default profiles\n  * new syscalls in default seccomp filter: sysfs, sysctl, adjtimex, kcmp\n  *         clock_adjtime, lookup_dcookie, perf_event_open, fanotify_init\n  * Bugfix: using /proc/sys/kernel/pid_max for the max number of pids\n  * two build patches from Reiner Herman (tickets 11, 12)\n  * man page patch from Reiner Herman (ticket 13)\n  * output patch (ticket 15) from sshirokov\n  \n -- netblue30 <netblue30@yahoo.com>  Sun, 5 Apr 2015 08:00:00 -0500\n\nfirejail (0.9.22) baseline; urgency=low\n  * Replaced --noip option with --ip=none\n  * Container stdout logging and log rotation\n  * Added process_vm_readv, process_vm_writev and mknod to\n  *    default seccomp blacklist\n  * Added CAP_MKNOD to default caps blacklist\n  * Blacklist and whitelist custom Linux capabilities filters\n  * macvlan device driver support for --net option\n  * DNS server support, --dns option\n  * Netfilter support\n  * Monitor network statistics, --netstats option\n  * Added profile for Mozilla Thunderbird/Icedove\n  * - --overlay support for Linux kernels 3.18+\n  * Bugfix: preserve .Xauthority file in private mode (test with ssh -X)\n  * Bugfix: check uid/gid for cgroup\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 9 Mar 2015 09:00:00 -0500\n\nfirejail (0.9.20) baseline; urgency=low\n  * utmp, btmp and wtmp enhancements\n  *    create empty /var/log/wtmp and /var/log/btmp files in sandbox\n  *    generate a new /var/run/utmp file in sandbox\n  * CPU affinity, --cpu option\n  * Linux control groups support, --cgroup option\n  * Opera web browser support\n  * VLC support\n  * Added \"empty\" attribute to seccomp command to remove the default\n  *    syscall list form seccomp blacklist\n  * Added --nogroups option to disable supplementary groups for regular\n  *   users. root user always runs without supplementary groups.\n  * firemon enhancements\n  *   display the command that started the sandbox\n  *   added --caps option to display capabilities for all sandboxes\n  *   added --cgroup option to display the control groups for all sandboxes\n  *   added --cpu option to display CPU affinity for all sandboxes\n  *   added --seccomp option to display seccomp setting for all sandboxes\n  * New compile time options: --disable-chroot, --disable-bind\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 02 Feb 2015 08:00:00 -0500\n\nfirejail (0.9.18) baseline; urgency=low\n  * Support for tracing system, setuid, setgid, setfsuid, setfsgid syscalls\n  * Support for tracing setreuid, setregid, setresuid, setresguid syscalls\n  * Added profiles for transmission-gtk and transmission-qt\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Dec 2014 10:00:00 -0500\n\nfirejail (0.9.16) baseline; urgency=low\n  * Configurable private home directory\n  * Configurable default user shell\n  * Software configuration support for --docdir and DESTDIR\n  * Profile file support for include, caps, seccomp and private keywords\n  * Dropbox profile file\n  * Linux capabilities and seccomp filters enabled by default for Firefox,\n  Midori, Evince and Dropbox\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 4 Nov 2014 10:00:00 -0500\n\nfirejail (0.9.14) baseline; urgency=low\n  * Linux capabilities and seccomp filters are automatically enabled in \n    chroot mode (--chroot option) if the sandbox is started as regular user\n  * Added support for user defined seccomp blacklists\n  * Added syscall trace support\n  * Added --tmpfs option\n  * Added --balcklist option\n  * Added --read-only option\n  * Added --bind option\n  * Logging enhancements\n  * --overlay option was reactivated\n  * Added firemon support to print the ARP table for each sandbox\n  * Added firemon support to print the route table for each sandbox\n  * Added firemon support to print interface information for each sandbox\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 15 Oct 2014 10:00:00 -0500\n\nfirejail (0.9.12.2) baseline; urgency=low\n  * Fix for pulseaudio problems\n  * --overlay option was temporarily disabled in this build\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 29 Sept 2014 07:00:00 -0500\n\nfirejail (0.9.12.1) baseline; urgency=low\n  * Fix for pulseaudio problems\n  * --overlay option was temporarily disabled in this build\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 22 Sept 2014 09:00:00 -0500\n\nfirejail (0.9.12) baseline; urgency=low\n  * Added capabilities support\n  * Added support for CentOS 7\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 15 Sept 2014 10:00:00 -0500\n\nfirejail (0.9.10) baseline; urgency=low\n  * Disable /proc/kcore, /proc/kallsyms, /dev/port, /boot\n  * Fixed --top option CPU utilization calculation\n  * Implemented --tree option in firejail and firemon\n  * Implemented --join=name option\n  * Implemented --shutdown option\n  * Preserve the current working directory if possible\n  * Cppcheck and clang errors cleanup\n  * Added a Chromium web browser profile\n\n -- netblue30 <netblue30@yahoo.com>  Thu, 28 Aug 2014 07:00:00 -0500\n\nfirejail (0.9.8.1) baseline; urgency=low\n  * FIxed a number of bugs introduced in 0.9.8\n\n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Jul 2014 07:25:00 -0500\n  \nfirejail (0.9.8) baseline; urgency=low\n  * Implemented nowrap mode for firejail --list command option\n  * Added --top option in both firejail and firemon\n  * seccomp filter support\n  * Added pid support for firemon\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 24 Jul 2014 08:51:00 -0500\n  \nfirejail (0.9.6) baseline; urgency=low\n\n  * Mounting tmpfs on top of /var/log, required by several server programs\n  * Server fixes for /var/lib and /var/cache\n  * Private mode fixes\n  * csh and zsh default shell support\n  * Chroot mode fixes\n  * Added support for lighttpd, isc-dhcp-server, apache2, nginx, snmpd,\n\n -- netblue30 <netblue30@yahoo.com>  Sat, 7 Jun 2014 09:00:00 -0500\n\nfirejail (0.9.4) baseline; urgency=low\n\n  * Fixed resolv.conf on Ubuntu systems using DHCP\n  * Fixed resolv.conf on Debian systems using resolvconf package\n  * Fixed /var/lock directory\n  * Fixed /var/tmp directory\n  * Fixed symbolic links in profile files\n  * Added profiles for evince, midori\n\n -- netblue30 <netblue30@yahoo.com>  Sun, 4 May 2014 08:00:00 -0500\n\nfirejail (0.9.2) baseline; urgency=low\n\n  * Checking IP address passed with --ip option using ARP; exit if the address\n   is already present\n  * Using a lock file during ARP address assignment in order to removed a race\n   condition.\n  * Several fixes to --private option; it also mounts a tmpfs filesystem on top\n   of /tmp\n  * Added user access check for profile file\n  * Added --defaultgw option\n  * Added support of --noip option; it is necessary for DHCP setups\n  * Added syslog support\n  * Added support for \"tmpfs\" and \"read-only\" profile commands\n  * Added an expect-based testing framework for the project\n  * Added bash completion support\n  * Added support for multiple networks\n  \n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Apr 2014 08:00:00 -0500\n\nfirejail (0.9) baseline; urgency=low\n\n  * First beta version\n\n -- netblue30 <netblue30@yahoo.com>  Sat, 12 Apr 2014 09:00:00 -0500\n", "/*\n * Copyright (C) 2014-2016 Firejail Authors\n *\n * This file is part of firejail project\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n#include \"firejail.h\"\n#include \"../include/pid.h\"\n#define _GNU_SOURCE\n#include <sys/utsname.h>\n#include <sched.h>\n#include <sys/mount.h>\n#include <sys/wait.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <dirent.h>\n#include <pwd.h>\n#include <errno.h>\n#include <limits.h>\n#include <sys/file.h>\n#include <sys/prctl.h>\n#include <signal.h>\n#include <time.h>\n#include <net/if.h>\n\n#if 0\n#include <sys/times.h>\n{\nstruct tms tm;\nclock_t systick = times(&tm);\nprintf(\"time %s:%d %u\\n\", __FILE__, __LINE__, (uint32_t) systick);\n}\n#endif\n\nuid_t firejail_uid = 0;\ngid_t firejail_gid = 0;\n\n#define STACK_SIZE (1024 * 1024)\nstatic char child_stack[STACK_SIZE];\t\t// space for child's stack\nConfig cfg;\t\t\t\t\t// configuration\nint arg_private = 0;\t\t\t\t// mount private /home and /tmp directoryu\nint arg_private_template = 0; // mount private /home using a template\nint arg_debug = 0;\t\t\t\t// print debug messages\nint arg_debug_check_filename;\t\t// print debug messages for filename checking\nint arg_debug_blacklists;\t\t\t// print debug messages for blacklists\nint arg_debug_whitelists;\t\t\t// print debug messages for whitelists\nint arg_nonetwork = 0;\t\t\t\t// --net=none\nint arg_command = 0;\t\t\t\t// -c\nint arg_overlay = 0;\t\t\t\t// overlay option\nint arg_overlay_keep = 0;\t\t\t// place overlay diff in a known directory\nint arg_overlay_reuse = 0;\t\t\t// allow the reuse of overlays\n\nint arg_seccomp = 0;\t\t\t\t// enable default seccomp filter\n\nint arg_caps_default_filter = 0;\t\t\t// enable default capabilities filter\nint arg_caps_drop = 0;\t\t\t\t// drop list\nint arg_caps_drop_all = 0;\t\t\t// drop all capabilities\nint arg_caps_keep = 0;\t\t\t// keep list\nchar *arg_caps_list = NULL;\t\t\t// optional caps list\n\nint arg_trace = 0;\t\t\t\t// syscall tracing support\nint arg_tracelog = 0;\t\t\t\t// blacklist tracing support\nint arg_rlimit_nofile = 0;\t\t\t// rlimit nofile\nint arg_rlimit_nproc = 0;\t\t\t// rlimit nproc\nint arg_rlimit_fsize = 0;\t\t\t\t// rlimit fsize\nint arg_rlimit_sigpending = 0;\t\t\t// rlimit fsize\nint arg_nogroups = 0;\t\t\t\t// disable supplementary groups\nint arg_nonewprivs = 0;\t\t\t// set the NO_NEW_PRIVS prctl\nint arg_noroot = 0;\t\t\t\t// create a new user namespace and disable root user\nint arg_netfilter;\t\t\t\t// enable netfilter\nint arg_netfilter6;\t\t\t\t// enable netfilter6\nchar *arg_netfilter_file = NULL;\t\t\t// netfilter file\nchar *arg_netfilter6_file = NULL;\t\t// netfilter6 file\nint arg_doubledash = 0;\t\t\t// double dash\nint arg_shell_none = 0;\t\t\t// run the program directly without a shell\nint arg_private_dev = 0;\t\t\t// private dev directory\nint arg_private_etc = 0;\t\t\t// private etc directory\nint arg_private_bin = 0;\t\t\t// private bin directory\nint arg_private_tmp = 0;\t\t\t// private tmp directory\nint arg_scan = 0;\t\t\t\t// arp-scan all interfaces\nint arg_whitelist = 0;\t\t\t\t// whitelist commad\nint arg_nosound = 0;\t\t\t\t// disable sound\nint arg_no3d;\t\t\t\t\t// disable 3d hardware acceleration\nint arg_quiet = 0;\t\t\t\t// no output for scripting\nint arg_join_network = 0;\t\t\t// join only the network namespace\nint arg_join_filesystem = 0;\t\t\t// join only the mount namespace\nint arg_nice = 0;\t\t\t\t// nice value configured\nint arg_ipc = 0;\t\t\t\t\t// enable ipc namespace\nint arg_writable_etc = 0;\t\t\t// writable etc\nint arg_writable_var = 0;\t\t\t// writable var\nint arg_appimage = 0;\t\t\t\t// appimage\nint arg_audit = 0;\t\t\t\t// audit\nchar *arg_audit_prog = NULL;\t\t\t// audit\nint arg_apparmor = 0;\t\t\t\t// apparmor\nint arg_allow_debuggers = 0;\t\t\t// allow debuggers\nint arg_x11_block = 0;\t\t\t\t// block X11\nint arg_x11_xorg = 0;\t\t\t\t// use X11 security extention\nint arg_allusers = 0;\t\t\t\t// all user home directories visible\n\nint login_shell = 0;\n\n\nint parent_to_child_fds[2];\nint child_to_parent_fds[2];\n\nchar *fullargv[MAX_ARGS];\t\t\t// expanded argv for restricted shell\nint fullargc = 0;\nstatic pid_t child = 0;\npid_t sandbox_pid;\n\nstatic void set_name_file(pid_t pid);\nstatic void delete_name_file(pid_t pid);\nstatic void set_x11_file(pid_t pid, int display);\nstatic void delete_x11_file(pid_t pid);\n\nvoid clear_run_files(pid_t pid) {\n\tbandwidth_del_run_file(pid);\t\t// bandwidth file\n\tnetwork_del_run_file(pid);\t\t// network map file\n\tdelete_name_file(pid);\n\tdelete_x11_file(pid);\n}\n\nstatic void myexit(int rv) {\n\tlogmsg(\"exiting...\");\n\tif (!arg_command && !arg_quiet)\n\t\tprintf(\"\\nParent is shutting down, bye...\\n\");\n\n\n\t// delete sandbox files in shared memory\n\tEUID_ROOT();\n\tclear_run_files(sandbox_pid);\n\tappimage_clear();\n\tflush_stdin();\n\texit(rv); \n}\n\nstatic void my_handler(int s){\n\tEUID_ROOT();\n\tif (!arg_quiet) {\n\t\tprintf(\"\\nParent received signal %d, shutting down the child process...\\n\", s);\n\t\tfflush(0);\n\t}\n\tlogsignal(s);\n\tkill(child, SIGTERM);\n\tmyexit(1);\n}\n\n// return 1 if error, 0 if a valid pid was found\nstatic inline int read_pid(char *str, pid_t *pid) {\n\tchar *endptr;\n\terrno = 0;\n\tlong int pidtmp = strtol(str, &endptr, 10);\n\tif ((errno == ERANGE && (pidtmp == LONG_MAX || pidtmp == LONG_MIN))\n\t\t|| (errno != 0 && pidtmp == 0)) {\n\t\treturn 1;\n\t}\n\t// endptr points to '\\0' char in str if the entire string is valid\n\tif (endptr == NULL || endptr[0]!='\\0') {\n\t\treturn 1;\n\t}\n\t*pid = (pid_t)pidtmp;\n\treturn 0;\n}\n\n// init configuration\nstatic void init_cfg(int argc, char **argv) {\n\tEUID_ASSERT();\n\tmemset(&cfg, 0, sizeof(cfg));\n\n\tcfg.original_argv = argv;\n\tcfg.original_argc = argc;\n\tcfg.bridge0.devsandbox = \"eth0\";\n\tcfg.bridge1.devsandbox = \"eth1\";\n\tcfg.bridge2.devsandbox = \"eth2\";\n\tcfg.bridge3.devsandbox = \"eth3\";\n\t\n\t// extract user data\n\tEUID_ROOT(); // rise permissions for grsecurity\n\tstruct passwd *pw = getpwuid(getuid());\n\tif (!pw)\n\t\terrExit(\"getpwuid\");\n\tEUID_USER();\n\tcfg.username = strdup(pw->pw_name);\n\tif (!cfg.username)\n\t\terrExit(\"strdup\");\n\n\t// build home directory name\n\tcfg.homedir = NULL;\n\tif (pw->pw_dir != NULL) {\n\t\tcfg.homedir = strdup(pw->pw_dir);\n\t\tif (!cfg.homedir)\n\t\t\terrExit(\"strdup\");\n\t}\n\telse {\n\t\tfprintf(stderr, \"Error: user %s doesn't have a user directory assigned\\n\", cfg.username);\n\t\texit(1);\n\t}\n\tcfg.cwd = getcwd(NULL, 0);\n\n\t// initialize random number generator\n\tsandbox_pid = getpid();\n\ttime_t t = time(NULL);\n\tsrand(t ^ sandbox_pid);\n}\n\nstatic void check_network(Bridge *br) {\n\tassert(br);\n\tif (br->macvlan == 0) // for bridge devices check network range or arp-scan and assign address\n\t\tnet_configure_sandbox_ip(br);\n\telse if (br->ipsandbox) { // for macvlan check network range\n\t\tchar *rv = in_netrange(br->ipsandbox, br->ip, br->mask);\n\t\tif (rv) {\n\t\t\tfprintf(stderr, \"%s\", rv);\n\t\t\texit(1);\n\t\t}\n\t}\n}\n\n#ifdef HAVE_USERNS\nvoid check_user_namespace(void) {\n\tEUID_ASSERT();\n\tif (getuid() == 0) {\n\t\tfprintf(stderr, \"Error: --noroot option cannot be used when starting the sandbox as root.\\n\");\n\t\texit(1);\n\t}\n\t\n\t// test user namespaces available in the kernel\n\tstruct stat s1;\n\tstruct stat s2;\n\tstruct stat s3;\n\tif (stat(\"/proc/self/ns/user\", &s1) == 0 &&\n\t    stat(\"/proc/self/uid_map\", &s2) == 0 &&\n\t    stat(\"/proc/self/gid_map\", &s3) == 0)\n\t\targ_noroot = 1;\n\telse {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: user namespaces not available in the current kernel.\\n\");\n\t\targ_noroot = 0;\n\t}\n}\n#endif\n\n\n// exit commands\nstatic void run_cmd_and_exit(int i, int argc, char **argv) {\n\tEUID_ASSERT();\n\t\n\t//*************************************\n\t// basic arguments\n\t//*************************************\n\tif (strcmp(argv[i], \"--help\") == 0 ||\n\t    strcmp(argv[i], \"-?\") == 0) {\n\t\tusage();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--version\") == 0) {\n\t\tprintf(\"firejail version %s\\n\", VERSION);\n\t\tprintf(\"\\n\");\n\t\tprint_compiletime_support();\n\t\tprintf(\"\\n\");\n\t\texit(0);\n\t}\n#ifdef HAVE_OVERLAYFS\n\telse if (strcmp(argv[i], \"--overlay-clean\") == 0) {\n\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\tchar *path;\n\t\t\tif (asprintf(&path, \"%s/.firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tEUID_ROOT();\n\t\t\tif (setreuid(0, 0) < 0)\n\t\t\t\terrExit(\"setreuid\");\n\t\t\tif (setregid(0, 0) < 0)\n\t\t\t\terrExit(\"setregid\");\n\t\t\terrno = 0;\n\t\t\tint rv = remove_directory(path);\n\t\t\tif (rv) {\n\t\t\t\tfprintf(stderr, \"Error: cannot removed overlays stored in ~/.firejail directory, errno %d\\n\", errno);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n#ifdef HAVE_X11\n\telse if (strcmp(argv[i], \"--x11\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--x11=xpra\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start_xpra(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--x11=xephyr\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start_xephyr(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n#endif\n#ifdef HAVE_NETWORK\t\n\telse if (strncmp(argv[i], \"--bandwidth=\", 12) == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// extract the command\n\t\t\tif ((i + 1) == argc) {\n\t\t\t\tfprintf(stderr, \"Error: command expected after --bandwidth option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *cmd = argv[i + 1];\n\t\t\tif (strcmp(cmd, \"status\") && strcmp(cmd, \"clear\") && strcmp(cmd, \"set\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --bandwidth command.\\nValid commands: set, clear, status.\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\n\t\t\t// extract network name\n\t\t\tchar *dev = NULL;\n\t\t\tint down = 0;\n\t\t\tint up = 0;\n\t\t\tif (strcmp(cmd, \"set\") == 0 || strcmp(cmd, \"clear\") == 0) {\n\t\t\t\t// extract device name\n\t\t\t\tif ((i + 2) == argc) {\n\t\t\t\t\tfprintf(stderr, \"Error: network name expected after --bandwidth %s option\\n\", cmd);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tdev = argv[i + 2];\n\t\n\t\t\t\t// check device name\n\t\t\t\tif (if_nametoindex(dev) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: network device %s not found\\n\", dev);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// extract bandwidth\n\t\t\t\tif (strcmp(cmd, \"set\") == 0) {\n\t\t\t\t\tif ((i + 4) >= argc) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid --bandwidth set command\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdown = atoi(argv[i + 3]);\n\t\t\t\t\tif (down < 0) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid download speed\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t\tup = atoi(argv[i + 4]);\n\t\t\t\t\tif (up < 0) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid upload speed\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t\n\t\t\t// extract pid or sandbox name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 12, &pid) == 0)\n\t\t\t\tbandwidth_pid(pid, cmd, dev, down, up);\n\t\t\telse\n\t\t\t\tbandwidth_name(argv[i] + 12, cmd, dev, down, up);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n\t//*************************************\n\t// independent commands - the program will exit!\n\t//*************************************\n#ifdef HAVE_SECCOMP\n\telse if (strcmp(argv[i], \"--debug-syscalls\") == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\tsyscall_print();\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--debug-errnos\") == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\terrno_print();\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--seccomp.print=\", 16) == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t// print seccomp filter for a sandbox specified by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 16, &pid) == 0)\t\t\n\t\t\t\tseccomp_print_filter(pid);\n\t\t\telse\n\t\t\t\tseccomp_print_filter_name(argv[i] + 16);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--debug-protocols\") == 0) {\n\t\tprotocol_list();\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--protocol.print=\", 17) == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t// print seccomp filter for a sandbox specified by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 17, &pid) == 0)\t\t\n\t\t\t\tprotocol_print_filter(pid);\n\t\t\telse\n\t\t\t\tprotocol_print_filter_name(argv[i] + 17);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--cpu.print=\", 12) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 12, &pid) == 0)\t\t\n\t\t\tcpu_print_filter(pid);\n\t\telse\n\t\t\tcpu_print_filter_name(argv[i] + 12);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--caps.print=\", 13) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 13, &pid) == 0)\t\t\n\t\t\tcaps_print_filter(pid);\n\t\telse\n\t\t\tcaps_print_filter_name(argv[i] + 13);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--fs.print=\", 11) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 11, &pid) == 0)\t\t\n\t\t\tfs_logger_print_log(pid);\n\t\telse\n\t\t\tfs_logger_print_log_name(argv[i] + 11);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--dns.print=\", 12) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 12, &pid) == 0)\t\t\n\t\t\tnet_dns_print(pid);\n\t\telse\n\t\t\tnet_dns_print_name(argv[i] + 12);\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--debug-caps\") == 0) {\n\t\tcaps_print();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--list\") == 0) {\n\t\tlist();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--tree\") == 0) {\n\t\ttree();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--top\") == 0) {\n\t\ttop();\n\t\texit(0);\n\t}\n#ifdef HAVE_NETWORK\t\n\telse if (strcmp(argv[i], \"--netstats\") == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tnetstats();\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\t\n#ifdef HAVE_FILE_TRANSFER\n\telse if (strncmp(argv[i], \"--get=\", 6) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 2) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --get option, path expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path = argv[i + 1];\n\t\t\t invalid_filename(path);\n\t\t\t if (strstr(path, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// get file\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 6, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_GET, pid, path, NULL);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_GET, argv[i] + 6, path, NULL);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --get feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strncmp(argv[i], \"--put=\", 6) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 3) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --put option, 2 paths expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path1 = argv[i + 1];\n\t\t\t invalid_filename(path1);\n\t\t\t if (strstr(path1, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path1);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\tchar *path2 = argv[i + 2];\n\t\t\t invalid_filename(path2);\n\t\t\t if (strstr(path2, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path2);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// get file\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 6, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_PUT, pid, path1, path2);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_PUT, argv[i] + 6, path1, path2);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --get feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strncmp(argv[i], \"--ls=\", 5) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 2) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --ls option, path expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path = argv[i + 1];\n\t\t\t invalid_filename(path);\n\t\t\t if (strstr(path, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// list directory contents\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 5, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_LS, pid, path, NULL);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_LS, argv[i] + 5, path, NULL);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --ls feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--join=\", 7) == 0) {\n\t\tlogargs(argc, argv);\n\n\t\tif (arg_shell_none) {\n\t\t\tif (argc <= (i+1)) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none set, but no command specified\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcfg.original_program_index = i + 1;\n\t\t}\n\n\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\tcfg.shell = guess_shell();\n\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 7, &pid) == 0)\t\t\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\telse\n\t\t\tjoin_name(argv[i] + 7, argc, argv, i + 1);\n\t\texit(0);\n\n\t}\n\telse if (strncmp(argv[i], \"--join-or-start=\", 16) == 0) {\n\t\t// NOTE: this is first part of option handler,\n\t\t// \t\t sandbox name is set in other part\n\t\tlogargs(argc, argv);\n\n\t\tif (arg_shell_none) {\n\t\t\tif (argc <= (i+1)) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none set, but no command specified\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcfg.original_program_index = i + 1;\n\t\t}\n\n\t\t// try to join by name only\n\t\tpid_t pid;\n\t\tif (!name2pid(argv[i] + 16, &pid)) {\n\t\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\t\tcfg.shell = guess_shell();\n\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\t\texit(0);\n\t\t}\n\t\t// if there no such sandbox continue argument processing\n\t}\n#ifdef HAVE_NETWORK\t\n\telse if (strncmp(argv[i], \"--join-network=\", 15) == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tlogargs(argc, argv);\n\t\t\targ_join_network = 1;\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --join-network is only available to root user\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\t\tcfg.shell = guess_shell();\n\n\t\t\t// join sandbox by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 15, &pid) == 0)\t\t\n\t\t\t\tjoin(pid, argc, argv, i + 1);\n\t\t\telse\n\t\t\t\tjoin_name(argv[i] + 15, argc, argv, i + 1);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\n\t\texit(0);\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--join-filesystem=\", 18) == 0) {\n\t\tlogargs(argc, argv);\n\t\targ_join_filesystem = 1;\n\t\tif (getuid() != 0) {\n\t\t\tfprintf(stderr, \"Error: --join-filesystem is only available to root user\\n\");\n\t\t\texit(1);\n\t\t}\n\t\t\n\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\tcfg.shell = guess_shell();\n\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 18, &pid) == 0)\t\t\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\telse\n\t\t\tjoin_name(argv[i] + 18, argc, argv, i + 1);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--shutdown=\", 11) == 0) {\n\t\tlogargs(argc, argv);\n\t\t\n\t\t// shutdown sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 11, &pid) == 0)\n\t\t\tshut(pid);\n\t\telse\n\t\t\tshut_name(argv[i] + 11);\n\t\texit(0);\n\t}\n\n}\n\nstatic void set_name_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_NAME_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\n\t// the file is deleted first\n\tFILE *fp = fopen(fname, \"w\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"Error: cannot create %s\\n\", fname);\n\t\texit(1);\n\t}\n\tfprintf(fp, \"%s\\n\", cfg.name);\n\n\t// mode and ownership\n\tSET_PERMS_STREAM(fp, 0, 0, 0644);\n\tfclose(fp);\n}\n\nstatic void delete_name_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_NAME_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\tint rv = unlink(fname);\n\t(void) rv;\n\tfree(fname);\n}\n\nstatic void set_x11_file(pid_t pid, int display) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_X11_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\n\t// the file is deleted first\n\tFILE *fp = fopen(fname, \"w\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"Error: cannot create %s\\n\", fname);\n\t\texit(1);\n\t}\n\tfprintf(fp, \"%d\\n\", display);\n\n\t// mode and ownership\n\tSET_PERMS_STREAM(fp, 0, 0, 0644);\n\tfclose(fp);\n}\n\nstatic void delete_x11_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_X11_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\tint rv = unlink(fname);\n\t(void) rv;\n\tfree(fname);\n}\n\nstatic void detect_quiet(int argc, char **argv) {\n\tint i;\n\t\n\t// detect --quiet\n\tfor (i = 1; i < argc; i++) {\n\t\tif (strcmp(argv[i], \"--quiet\") == 0) {\n\t\t\targ_quiet = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// detect end of firejail params\n\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\tbreak;\n\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\tbreak;\n\t}\n}\n\nstatic void detect_allow_debuggers(int argc, char **argv) {\n\tint i;\n\t\n\t// detect --allow-debuggers\n\tfor (i = 1; i < argc; i++) {\n\t\tif (strcmp(argv[i], \"--allow-debuggers\") == 0) {\n\t\t\targ_allow_debuggers = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// detect end of firejail params\n\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\tbreak;\n\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\tbreak;\n\t}\n}\n\nchar *guess_shell(void) {\n\tchar *shell = NULL;\n\t// shells in order of preference\n\tchar *shells[] = {\"/bin/bash\", \"/bin/csh\", \"/usr/bin/zsh\", \"/bin/sh\", \"/bin/ash\", NULL };\n\n\tint i = 0;\n\twhile (shells[i] != NULL) {\n\t\tstruct stat s;\n\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\tif (stat(shells[i], &s) == 0 && access(shells[i], R_OK) == 0) {\n\t\t\tshell = shells[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn shell;\n}\n\n//*******************************************\n// Main program\n//*******************************************\nint main(int argc, char **argv) {\n\tint i;\n\tint prog_index = -1;\t\t\t  // index in argv where the program command starts\n\tint lockfd = -1;\n\tint option_cgroup = 0;\n\tint option_force = 0;\n\tint custom_profile = 0;\t// custom profile loaded\n\tchar *custom_profile_dir = NULL; // custom profile directory\n\tint arg_noprofile = 0; // use default.profile if none other found/specified\n#ifdef HAVE_SECCOMP\n\tint highest_errno = errno_highest_nr();\n#endif\n\n\tdetect_quiet(argc, argv);\n\tdetect_allow_debuggers(argc, argv);\n\n\t// drop permissions by default and rise them when required\n\tEUID_INIT();\n\tEUID_USER();\n\n\n\t// check argv[0] symlink wrapper if this is not a login shell\n\tif (*argv[0] != '-')\n\t\trun_symlink(argc, argv);\n\n\t// check if we already have a sandbox running\n\t// If LXC is detected, start firejail sandbox\n\t// otherwise try to detect a PID namespace by looking under /proc for specific kernel processes and:\n\t//\t- if --force flag is set, start firejail sandbox\n\t//\t-- if --force flag is not set, start the application in a /bin/bash shell \n\tif (check_namespace_virt() == 0) {\n\t\tEUID_ROOT();\n\t\tint rv = check_kernel_procs();\n\t\tEUID_USER();\n\t\tif (rv == 0) {\n\t\t\t// if --force option is passed to the program, disregard the existing sandbox\n\t\t\tint found = 0;\n\t\t\tfor (i = 1; i < argc; i++) {\n\t\t\t\tif (strcmp(argv[i], \"--force\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--list\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--netstats\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--tree\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--top\") == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--ls=\", 5) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--get=\", 6) == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-caps\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-errnos\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-syscalls\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-protocols\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--help\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--version\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--overlay-clean\") == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--dns.print=\", 12) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--bandwidth=\", 12) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--caps.print=\", 13) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--cpu.print=\", 12) == 0 ||\n\t//********************************************************************************\n\t// todo: fix the following problems\n\t\t\t\t    strncmp(argv[i], \"--join=\", 7) == 0 ||\n\t//[netblue@debian Downloads]$ firejail --join=896\n\t//Switching to pid 897, the first child process inside the sandbox\n\t//Error: seccomp file not found\n\t//********************************************************************************\n\t\n\t\t\t\t    strncmp(argv[i], \"--join-filesystem=\", 18) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--join-network=\", 15) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--fs.print=\", 11) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--protocol.print=\", 17) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--seccomp.print\", 15) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--shutdown=\", 11) == 0) {\n\t\t\t\t\tfound = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\n\t\t\t\t// detect end of firejail params\n\t\t\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\t\t\tbreak;\n\t\t\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (found == 0) {\n\t\t\t\t// start the program directly without sandboxing\n\t\t\t\trun_no_sandbox(argc, argv);\n\t\t\t\t// it will never get here!\n\t\t\t\tassert(0);\n\t\t\t}\n\t\t\telse\n\t\t\t\toption_force = 1;\n\t\t}\n\t}\n\t\n\t// check root/suid\n\tEUID_ROOT();\n\tif (geteuid()) {\n\t\t// detect --version\n\t\tfor (i = 1; i < argc; i++) {\n\t\t\tif (strcmp(argv[i], \"--version\") == 0) {\n\t\t\t\tprintf(\"firejail version %s\\n\", VERSION);\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\t\n\t\t\t// detect end of firejail params\n\t\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\t\tbreak;\n\t\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\t\tbreak;\n\t\t}\n\t\texit(1);\n\t}\n\tEUID_USER();\n\n\t// initialize globals\n\tinit_cfg(argc, argv);\n\n\n\t// check firejail directories\n\tEUID_ROOT();\n\tfs_build_firejail_dir();\n\tbandwidth_del_run_file(sandbox_pid);\n\tnetwork_del_run_file(sandbox_pid);\n\tdelete_name_file(sandbox_pid);\n\tdelete_x11_file(sandbox_pid);\n\t\n\tEUID_USER();\n\t\n\t//check if the parent is sshd daemon\n\tint parent_sshd = 0;\n\t{\n\t\tpid_t ppid = getppid();\n\t\tEUID_ROOT();\n\t\tchar *comm = pid_proc_comm(ppid);\n\t\tEUID_USER();\n\t\tif (comm) {\n\t\t\tif (strcmp(comm, \"sshd\") == 0) {\n\t\t\t\targ_quiet = 1;\n\t\t\t\tparent_sshd = 1;\n\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t\t{EUID_ROOT();\n\t\t\t\tFILE *fp = fopen(\"/firelog\", \"w\");\n\t\t\t\tif (fp) {\n\t\t\t\t\tint i;\n\t\t\t\t\tfprintf(fp, \"argc %d: \", argc);\n\t\t\t\t\tfor (i = 0; i < argc; i++)\n\t\t\t\t\t\tfprintf(fp, \"#%s# \", argv[i]);\n\t\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\t\tfclose(fp);\n\t\t\t\t}\n\t\t\t\tEUID_USER();}\n#endif\n\t\t\t\t// run sftp and scp directly without any sandboxing\n\t\t\t\t// regular login has argv[0] == \"-firejail\"\n\t\t\t\tif (*argv[0] != '-') {\n\t\t\t\t\tif (strcmp(argv[1], \"-c\") == 0 && argc > 2) {\n\t\t\t\t\t\tif (strcmp(argv[2], \"/usr/lib/openssh/sftp-server\") == 0 ||\n\t\t\t\t\t\t    strncmp(argv[2], \"scp \", 4) == 0) {\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t\t\t\t\t{EUID_ROOT();\n\t\t\t\t\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\t\t\t\t\tif (fp) {\n\t\t\t\t\t\t\t\tfprintf(fp, \"run without a sandbox\\n\");\n\t\t\t\t\t\t\t\tfclose(fp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tEUID_USER();}\n#endif\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \tdrop_privs(1);\n\t\t\t\t\t\t    \tint rv = system(argv[2]);\n\t\t\t\t\t\t    \texit(rv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree(comm);\n\t\t}\n\t}\n\t\n\t// is this a login shell, or a command passed by sshd, insert command line options from /etc/firejail/login.users\n\tif (*argv[0] == '-' || parent_sshd) {\n\t\tif (argc == 1)\n\t\t\tlogin_shell = 1;\n\t\tfullargc = restricted_shell(cfg.username);\n\t\tif (fullargc) {\n\t\t\t\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t{EUID_ROOT();\n\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"fullargc %d: \",  fullargc);\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < fullargc; i++)\n\t\t\t\t\tfprintf(fp, \"#%s# \", fullargv[i]);\n\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\tfclose(fp);\n\t\t\t}\n\t\t\tEUID_USER();}\n#endif\n\t\t\t\n\t\t\tint j;\n\t\t\tfor (i = 1, j = fullargc; i < argc && j < MAX_ARGS; i++, j++, fullargc++)\n\t\t\t\tfullargv[j] = argv[i];\n\n\t\t\t// replace argc/argv with fullargc/fullargv\n\t\t\targv = fullargv;\n\t\t\targc = j;\n\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t{EUID_ROOT();\n\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"argc %d: \", argc);\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < argc; i++)\n\t\t\t\t\tfprintf(fp, \"#%s# \", argv[i]);\n\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\tfclose(fp);\n\t\t\t}\n\t\t\tEUID_USER();}\n#endif\n\t\t}\n\t}\n\telse {\n\t\t// check --output option and execute it;\n\t\tcheck_output(argc, argv); // the function will not return if --output option was found\n\t}\n\t\n\t\n\t// check for force-nonewprivs in /etc/firejail/firejail.config file\n\tif (checkcfg(CFG_FORCE_NONEWPRIVS))\n\t\targ_nonewprivs = 1;\n\t\n\tif (arg_allow_debuggers) {\n\t\tchar *cmd = strdup(\"noblacklist ${PATH}/strace\");\n\t\tif (!cmd)\n\t\t\terrExit(\"strdup\");\n\t\tprofile_add(cmd);\n\t}\n\t\n\t// parse arguments\n\tfor (i = 1; i < argc; i++) {\n\t\trun_cmd_and_exit(i, argc, argv); // will exit if the command is recognized\n\t\t\n\t\tif (strcmp(argv[i], \"--debug\") == 0) {\n\t\t\tif (!arg_quiet) {\n\t\t\t\targ_debug = 1;\n\t\t\t\tif (option_force)\n\t\t\t\t\tprintf(\"Entering sandbox-in-sandbox mode\\n\");\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--debug-check-filename\") == 0)\n\t\t\targ_debug_check_filename = 1;\n\t\telse if (strcmp(argv[i], \"--debug-blacklists\") == 0)\n\t\t\targ_debug_blacklists = 1;\n\t\telse if (strcmp(argv[i], \"--debug-whitelists\") == 0)\n\t\t\targ_debug_whitelists = 1;\n\t\telse if (strcmp(argv[i], \"--quiet\") == 0) {\n\t\t\targ_quiet = 1;\n\t\t\targ_debug = 0;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--force\") == 0)\n\t\t\t;\n\t\telse if (strcmp(argv[i], \"--allow-debuggers\") == 0) {\n\t\t\t// already handled\n\t\t}\n\n\t\t//*************************************\n\t\t// filtering\n\t\t//*************************************\n#ifdef HAVE_APPARMOR\n\t\telse if (strcmp(argv[i], \"--apparmor\") == 0)\n\t\t\targ_apparmor = 1;\n#endif\t\n#ifdef HAVE_SECCOMP\n\t\telse if (strncmp(argv[i], \"--protocol=\", 11) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tprotocol_store(argv[i] + 11);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--seccomp\") == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp=\", 10) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list = strdup(argv[i] + 10);\n\t\t\t\tif (!cfg.seccomp_list)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.drop=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_drop = strdup(argv[i] + 15);\n\t\t\t\tif (!cfg.seccomp_list_drop)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.keep=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_keep = strdup(argv[i] + 15);\n\t\t\t\tif (!cfg.seccomp_list_keep)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.e\", 11) == 0 && strchr(argv[i], '=')) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp && !cfg.seccomp_list_errno) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tchar *eq = strchr(argv[i], '=');\n\t\t\t\tchar *errnoname = strndup(argv[i] + 10, eq - (argv[i] + 10));\n\t\t\t\tint nr = errno_find_name(errnoname);\n\t\t\t\tif (nr == -1) {\n\t\t\t\t\tfprintf(stderr, \"Error: unknown errno %s\\n\", errnoname);\n\t\t\t\t\tfree(errnoname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tif (!cfg.seccomp_list_errno)\n\t\t\t\t\tcfg.seccomp_list_errno = calloc(highest_errno+1, sizeof(cfg.seccomp_list_errno[0]));\n\t\n\t\t\t\tif (cfg.seccomp_list_errno[nr]) {\n\t\t\t\t\tfprintf(stderr, \"Error: errno %s already configured\\n\", errnoname);\n\t\t\t\t\tfree(errnoname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_errno[nr] = strdup(eq+1);\n\t\t\t\tif (!cfg.seccomp_list_errno[nr])\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tfree(errnoname);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strcmp(argv[i], \"--caps\") == 0)\n\t\t\targ_caps_default_filter = 1;\n\t\telse if (strcmp(argv[i], \"--caps.drop=all\") == 0)\n\t\t\targ_caps_drop_all = 1;\n\t\telse if (strncmp(argv[i], \"--caps.drop=\", 12) == 0) {\n\t\t\targ_caps_drop = 1;\n\t\t\targ_caps_list = strdup(argv[i] + 12);\n\t\t\tif (!arg_caps_list)\n\t\t\t\terrExit(\"strdup\");\n\t\t\t// verify caps list and exit if problems\n\t\t\tif (caps_check_list(arg_caps_list, NULL))\n\t\t\t\treturn 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--caps.keep=\", 12) == 0) {\n\t\t\targ_caps_keep = 1;\n\t\t\targ_caps_list = strdup(argv[i] + 12);\n\t\t\tif (!arg_caps_list)\n\t\t\t\terrExit(\"strdup\");\n\t\t\t// verify caps list and exit if problems\n\t\t\tif (caps_check_list(arg_caps_list, NULL))\n\t\t\t\treturn 1;\n\t\t}\n\n\n\t\telse if (strcmp(argv[i], \"--trace\") == 0)\n\t\t\targ_trace = 1;\n\t\telse if (strcmp(argv[i], \"--tracelog\") == 0)\n\t\t\targ_tracelog = 1;\n\t\telse if (strncmp(argv[i], \"--rlimit-nofile=\", 16) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 16)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt nofile\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 16, \"%u\", &cfg.rlimit_nofile);\n\t\t\targ_rlimit_nofile = 1;\n\t\t}\t\t\n\t\telse if (strncmp(argv[i], \"--rlimit-nproc=\", 15) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 15)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt nproc\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 15, \"%u\", &cfg.rlimit_nproc);\n\t\t\targ_rlimit_nproc = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--rlimit-fsize=\", 15) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 15)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt fsize\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 15, \"%u\", &cfg.rlimit_fsize);\n\t\t\targ_rlimit_fsize = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--rlimit-sigpending=\", 20) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 20)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt sigpending\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 20, \"%u\", &cfg.rlimit_sigpending);\n\t\t\targ_rlimit_sigpending = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--ipc-namespace\", 15) == 0)\n\t\t\targ_ipc = 1;\n\t\telse if (strncmp(argv[i], \"--cpu=\", 6) == 0)\n\t\t\tread_cpu_list(argv[i] + 6);\n\t\telse if (strncmp(argv[i], \"--nice=\", 7) == 0) {\n\t\t\tcfg.nice = atoi(argv[i] + 7);\n\t\t\tif (getuid() != 0 &&cfg.nice < 0)\n\t\t\t\tcfg.nice = 0;\n\t\t\targ_nice = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--cgroup=\", 9) == 0) {\n\t\t\tif (option_cgroup) {\n\t\t\t\tfprintf(stderr, \"Error: only a cgroup can be defined\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\toption_cgroup = 1;\n\t\t\tcfg.cgroup = strdup(argv[i] + 9);\n\t\t\tif (!cfg.cgroup)\n\t\t\t\terrExit(\"strdup\");\n\t\t\tset_cgroup(cfg.cgroup);\n\t\t}\n\t\t\n\t\t//*************************************\n\t\t// filesystem\n\t\t//*************************************\n\t\telse if (strcmp(argv[i], \"--allusers\") == 0)\n\t\t\targ_allusers = 1;\n#ifdef HAVE_BIND\t\t\n\t\telse if (strncmp(argv[i], \"--bind=\", 7) == 0) {\n\t\t\tif (checkcfg(CFG_BIND)) {\n\t\t\t\tchar *line;\n\t\t\t\tif (asprintf(&line, \"bind %s\", argv[i] + 7) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\n\t\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\t\tprofile_add(line);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --bind feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--tmpfs=\", 8) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"tmpfs %s\", argv[i] + 8) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--blacklist=\", 12) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"blacklist %s\", argv[i] + 12) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--noblacklist=\", 14) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"noblacklist %s\", argv[i] + 14) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\n#ifdef HAVE_WHITELIST\n\t\telse if (strncmp(argv[i], \"--whitelist=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_WHITELIST)) {\n\t\t\t\tchar *line;\n\t\t\t\tif (asprintf(&line, \"whitelist %s\", argv[i] + 12) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\t\n\t\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\t\tprofile_add(line);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: whitelist feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\n\t\telse if (strncmp(argv[i], \"--read-only=\", 12) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"read-only %s\", argv[i] + 12) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--noexec=\", 9) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"noexec %s\", argv[i] + 9) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--read-write=\", 13) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"read-write %s\", argv[i] + 13) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n#ifdef HAVE_OVERLAYFS\n\t\telse if (strcmp(argv[i], \"--overlay\") == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\t\n\t\t\t\tchar *subdirname;\n\t\t\t\tif (asprintf(&subdirname, \"%d\", getpid()) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tcfg.overlay_dir = fs_check_overlay_dir(subdirname, arg_overlay_reuse);\n\t\n\t\t\t\tfree(subdirname);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--overlay-named=\", 16) == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\targ_overlay_reuse = 1;\n\t\t\t\t\n\t\t\t\tchar *subdirname = argv[i] + 16;\n\t\t\t\tif (subdirname == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay option\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// check name\n\t\t\t\tinvalid_filename(subdirname);\n\t\t\t\tif (strstr(subdirname, \"..\") || strstr(subdirname, \"/\")) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay name\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tcfg.overlay_dir = fs_check_overlay_dir(subdirname, arg_overlay_reuse);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t}\n#if 0 // disabled for now, it could be used to overwrite system directories\t\n\t\telse if (strncmp(argv[i], \"--overlay-path=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\targ_overlay_reuse = 1;\n\t\t\t\t\n\t\t\t\tchar *dirname = argv[i] + 15;\n\t\t\t\tif (dirname == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay option\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tcfg.overlay_dir = expand_home(dirname, cfg.homedir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--overlay-tmpfs\") == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--profile=\", 10) == 0) {\n\t\t\tif (arg_noprofile) {\n\t\t\t\tfprintf(stderr, \"Error: --noprofile and --profile options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tchar *ppath = expand_home(argv[i] + 10, cfg.homedir);\n\t\t\tif (!ppath)\n\t\t\t\terrExit(\"strdup\");\n\t\t\tinvalid_filename(ppath);\n\t\t\t\n\t\t\t// multiple profile files are allowed!\n\t\t\tif (is_dir(ppath) || is_link(ppath) || strstr(ppath, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid profile file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif (access(ppath, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access profile file\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tprofile_read(ppath);\n\t\t\tcustom_profile = 1;\n\t\t\tfree(ppath);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--profile-path=\", 15) == 0) {\n\t\t\tif (arg_noprofile) {\n\t\t\t\tfprintf(stderr, \"Error: --noprofile and --profile-path options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcustom_profile_dir = expand_home(argv[i] + 15, cfg.homedir);\n\t\t\tinvalid_filename(custom_profile_dir);\n\t\t\tif (!is_dir(custom_profile_dir) || is_link(custom_profile_dir) || strstr(custom_profile_dir, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid profile path\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif (access(custom_profile_dir, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access profile directory\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--noprofile\") == 0) {\n\t\t\tif (custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: --profile and --noprofile options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_noprofile = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--ignore=\", 9) == 0) {\n\t\t\tif (custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: please use --profile after --ignore\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\tif (*(argv[i] + 9) == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid ignore option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// find an empty entry in profile_ignore array\n\t\t\tint j;\n\t\t\tfor (j = 0; j < MAX_PROFILE_IGNORE; j++) {\n\t\t\t\tif (cfg.profile_ignore[j] == NULL) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j >= MAX_PROFILE_IGNORE) {\n\t\t\t\tfprintf(stderr, \"Error: maximum %d --ignore options are permitted\\n\", MAX_PROFILE_IGNORE);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t// ... and configure it\n\t\t\telse\n\t\t\t\tcfg.profile_ignore[j] = argv[i] + 9;\n\t\t}\n#ifdef HAVE_CHROOT\t\t\n\t\telse if (strncmp(argv[i], \"--chroot=\", 9) == 0) {\n\t\t\tif (checkcfg(CFG_CHROOT)) {\n\t\t\t\tif (arg_overlay) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --chroot option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tinvalid_filename(argv[i] + 9);\n\t\t\t\t\n\t\t\t\t// extract chroot dirname\n\t\t\t\tcfg.chrootdir = argv[i] + 9;\n\t\t\t\t// if the directory starts with ~, expand the home directory\n\t\t\t\tif (*cfg.chrootdir == '~') {\n\t\t\t\t\tchar *tmp;\n\t\t\t\t\tif (asprintf(&tmp, \"%s%s\", cfg.homedir, cfg.chrootdir + 1) == -1)\n\t\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\t\tcfg.chrootdir = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// check chroot dirname exists\n\t\t\t\tif (strstr(cfg.chrootdir, \"..\") || !is_dir(cfg.chrootdir) || is_link(cfg.chrootdir)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid directory %s\\n\", cfg.chrootdir);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// don't allow \"--chroot=/\"\n\t\t\t\tchar *rpath = realpath(cfg.chrootdir, NULL);\n\t\t\t\tif (rpath == NULL || strcmp(rpath, \"/\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid chroot directory\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tfree(rpath);\n\t\t\t\t\n\t\t\t\t// check chroot directory structure\n\t\t\t\tif (fs_check_chroot_dir(cfg.chrootdir)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid chroot\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --chroot feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--writable-etc\") == 0) {\n\t\t\tif (cfg.etc_private_keep) {\n\t\t\t\tfprintf(stderr, \"Error: --private-etc and --writable-etc are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_writable_etc = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--writable-var\") == 0) {\n\t\t\targ_writable_var = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--private\") == 0) {\n\t\t\targ_private = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private=\", 10) == 0) {\n\t\t\tif (cfg.home_private_keep) {\n\t\t\t\tfprintf(stderr, \"Error: a private list of files was already defined with --private-home option.\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t// extract private home dirname\n\t\t\tcfg.home_private = argv[i] + 10;\n\t\t\tif (*cfg.home_private == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tfs_check_private_dir();\n\n\t\t\t// downgrade to --private if the directory is the user home directory\n\t\t\tif (strcmp(cfg.home_private, cfg.homedir) == 0) {\n\t\t\t\tfree(cfg.home_private);\n\t\t\t\tcfg.home_private = NULL;\n\t\t\t}\n\t\t\targ_private = 1;\n\t\t}\n#ifdef HAVE_PRIVATE_HOME\n\t\telse if (strncmp(argv[i], \"--private-home=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_PRIVATE_HOME)) {\n\t\t\t\tif (cfg.home_private) {\n\t\t\t\t\tfprintf(stderr, \"Error: a private home directory was already defined with --private option.\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// extract private home dirname\n\t\t\t\tcfg.home_private_keep = argv[i] + 15;\n\t\t\t\tfs_check_home_list();\n\t\t\t\targ_private = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --private-home feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strcmp(argv[i], \"--private-dev\") == 0) {\n\t\t\targ_private_dev = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private-etc=\", 14) == 0) {\n\t\t\tif (arg_writable_etc) {\n\t\t\t\tfprintf(stderr, \"Error: --private-etc and --writable-etc are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// extract private etc list\n\t\t\tcfg.etc_private_keep = argv[i] + 14;\n\t\t\tif (*cfg.etc_private_keep == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private-etc option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tfs_check_etc_list();\n\t\t\targ_private_etc = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private-bin=\", 14) == 0) {\n\t\t\t// extract private bin list\n\t\t\tcfg.bin_private_keep = argv[i] + 14;\n\t\t\tif (*cfg.bin_private_keep == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private-bin option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_private_bin = 1;\n\t\t\tfs_check_bin_list();\n\t\t}\n\t\telse if (strcmp(argv[i], \"--private-tmp\") == 0) {\n\t\t\targ_private_tmp = 1;\n\t\t}\n\n\t\t//*************************************\n\t\t// hostname, etc\n\t\t//*************************************\n\t\telse if (strncmp(argv[i], \"--name=\", 7) == 0) {\n\t\t\tcfg.name = argv[i] + 7;\n\t\t\tif (strlen(cfg.name) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a name for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--hostname=\", 11) == 0) {\n\t\t\tcfg.hostname = argv[i] + 11;\n\t\t\tif (strlen(cfg.hostname) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a hostname for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--nogroups\") == 0)\n\t\t\targ_nogroups = 1;\n#ifdef HAVE_USERNS\n\t\telse if (strcmp(argv[i], \"--noroot\") == 0) {\n\t\t\tif (checkcfg(CFG_USERNS))\n\t\t\t\tcheck_user_namespace();\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --noroot feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--nonewprivs\") == 0) {\n\t\t\targ_nonewprivs = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--env=\", 6) == 0)\n\t\t\tenv_store(argv[i] + 6, SETENV);\n\t\telse if (strncmp(argv[i], \"--rmenv=\", 8) == 0)\n\t\t\tenv_store(argv[i] + 8, RMENV);\n\t\telse if (strcmp(argv[i], \"--nosound\") == 0) {\n\t\t\targ_nosound = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--no3d\") == 0) {\n\t\t\targ_no3d = 1;\n\t\t}\n\t\t\t\t\n\t\t//*************************************\n\t\t// network\n\t\t//*************************************\n#ifdef HAVE_NETWORK\t\n\t\telse if (strncmp(argv[i], \"--interface=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t\t// compile time restricted networking\n\t\t\t\tif (getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --interface is allowed only to root user\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n#endif\n\t\t\t\t// run time restricted networking\n\t\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --interface is allowed only to root user\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\n\t\t\t\t// checks\n\t\t\t\tif (arg_nonetwork) {\n\t\t\t\t\tfprintf(stderr, \"Error: --network=none and --interface are incompatible\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (strcmp(argv[i] + 12, \"lo\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot use lo device in --interface command\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tint ifindex = if_nametoindex(argv[i] + 12);\n\t\t\t\tif (ifindex <= 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot find interface %s\\n\", argv[i] + 12);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tInterface *intf;\n\t\t\t\tif (cfg.interface0.configured == 0)\n\t\t\t\t\tintf = &cfg.interface0;\n\t\t\t\telse if (cfg.interface1.configured == 0)\n\t\t\t\t\tintf = &cfg.interface1;\n\t\t\t\telse if (cfg.interface2.configured == 0)\n\t\t\t\t\tintf = &cfg.interface2;\n\t\t\t\telse if (cfg.interface3.configured == 0)\n\t\t\t\t\tintf = &cfg.interface3;\n\t\t\t\telse {\n\t\t\t\t\tfprintf(stderr, \"Error: maximum 4 interfaces are allowed\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tintf->dev = strdup(argv[i] + 12);\n\t\t\t\tif (!intf->dev)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\t\n\t\t\t\tif (net_get_if_addr(intf->dev, &intf->ip, &intf->mask, intf->mac, &intf->mtu)) {\n\t\t\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\t\t\tfprintf(stderr, \"Warning:  interface %s is not configured\\n\", intf->dev);\n\t\t\t\t}\n\t\t\t\tintf->configured = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--net=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tif (strcmp(argv[i] + 6, \"none\") == 0) {\n\t\t\t\t\targ_nonetwork  = 1;\n\t\t\t\t\tcfg.bridge0.configured = 0;\n\t\t\t\t\tcfg.bridge1.configured = 0;\n\t\t\t\t\tcfg.bridge2.configured = 0;\n\t\t\t\t\tcfg.bridge3.configured = 0;\n\t\t\t\t\tcfg.interface0.configured = 0;\n\t\t\t\t\tcfg.interface1.configured = 0;\n\t\t\t\t\tcfg.interface2.configured = 0;\n\t\t\t\t\tcfg.interface3.configured = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t\t// compile time restricted networking\n\t\t\t\tif (getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: only --net=none is allowed to non-root users\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n#endif\n\t\t\t\t// run time restricted networking\n\t\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: only --net=none is allowed to non-root users\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (strcmp(argv[i] + 6, \"lo\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot attach to lo device\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tBridge *br;\n\t\t\t\tif (cfg.bridge0.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge0;\n\t\t\t\telse if (cfg.bridge1.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge1;\n\t\t\t\telse if (cfg.bridge2.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge2;\n\t\t\t\telse if (cfg.bridge3.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge3;\n\t\t\t\telse {\n\t\t\t\t\tfprintf(stderr, \"Error: maximum 4 network devices are allowed\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tnet_configure_bridge(br, argv[i] + 6);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--veth-name=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbr->veth_name = strdup(argv[i] + 12);\n\t\t\t\tif (br->veth_name == NULL)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tif (*br->veth_name == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: no veth-name configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strcmp(argv[i], \"--scan\") == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_scan = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--iprange=\", 10) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (br->iprange_start || br->iprange_end) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP range twice for the same interface\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// parse option arguments\n\t\t\t\tchar *firstip = argv[i] + 10;\n\t\t\t\tchar *secondip = firstip;\n\t\t\t\twhile (*secondip != '\\0') {\n\t\t\t\t\tif (*secondip == ',')\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tsecondip++;\n\t\t\t\t}\n\t\t\t\tif (*secondip == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t*secondip = '\\0';\n\t\t\t\tsecondip++;\n\t\t\t\t\n\t\t\t\t// check addresses\n\t\t\t\tif (atoip(firstip, &br->iprange_start) || atoip(secondip, &br->iprange_end) ||\n\t\t\t\t    br->iprange_start >= br->iprange_end) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (in_netrange(br->iprange_start, br->ip, br->mask) || in_netrange(br->iprange_end, br->ip, br->mask)) {\n\t\t\t\t\tfprintf(stderr, \"Error: IP range addresses not in network range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--mac=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (mac_not_zero(br->macsandbox)) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the MAC address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// read the address\n\t\t\t\tif (atomac(argv[i] + 6, br->macsandbox)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid MAC address\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--mtu=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tif (sscanf(argv[i] + 6, \"%d\", &br->mtu) != 1 || br->mtu < 576 || br->mtu > 9198) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid mtu value\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--ip=\", 5) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (br->arg_ip_none || br->ipsandbox) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// configure this IP address for the last bridge defined\n\t\t\t\tif (strcmp(argv[i] + 5, \"none\") == 0)\n\t\t\t\t\tbr->arg_ip_none = 1;\n\t\t\t\telse {\n\t\t\t\t\tif (atoip(argv[i] + 5, &br->ipsandbox)) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--ip6=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (br->arg_ip_none || br->ip6sandbox) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// configure this IP address for the last bridge defined\n\t\t\t\t// todo: verify ipv6 syntax\n\t\t\t\tbr->ip6sandbox = argv[i] + 6;\n//\t\t\t\tif (atoip(argv[i] + 5, &br->ipsandbox)) {\n//\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n//\t\t\t\t\texit(1);\n//\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\n\t\telse if (strncmp(argv[i], \"--defaultgw=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tif (atoip(argv[i] + 12, &cfg.defaultgw)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strncmp(argv[i], \"--dns=\", 6) == 0) {\n\t\t\tuint32_t dns;\n\t\t\tif (atoip(argv[i] + 6, &dns)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid DNS server IP address\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (cfg.dns1 == 0)\n\t\t\t\tcfg.dns1 = dns;\n\t\t\telse if (cfg.dns2 == 0)\n\t\t\t\tcfg.dns2 = dns;\n\t\t\telse if (cfg.dns3 == 0)\n\t\t\t\tcfg.dns3 = dns;\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: up to 3 DNS servers can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n#ifdef HAVE_NETWORK\n\t\telse if (strcmp(argv[i], \"--netfilter\") == 0) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t// compile time restricted networking\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n#endif\n\t\t\t// run time restricted networking\n\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--netfilter=\", 12) == 0) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t// compile time restricted networking\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n#endif\n\t\t\t// run time restricted networking\n\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter = 1;\n\t\t\t\targ_netfilter_file = argv[i] + 12;\n\t\t\t\tcheck_netfilter_file(arg_netfilter_file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--netfilter6=\", 13) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter6 = 1;\n\t\t\t\targ_netfilter6_file = argv[i] + 13;\n\t\t\t\tcheck_netfilter_file(arg_netfilter6_file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\t//*************************************\n\t\t// command\n\t\t//*************************************\n\t\telse if (strcmp(argv[i], \"--audit\") == 0) {\n\t\t\tif (asprintf(&arg_audit_prog, \"%s/firejail/faudit\", LIBDIR) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\targ_audit = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--audit=\", 8) == 0) {\n\t\t\tif (strlen(argv[i] + 8) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: invalid audit program\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_audit_prog = strdup(argv[i] + 8);\n\t\t\tif (!arg_audit_prog)\n\t\t\t\terrExit(\"strdup\");\n\t\t\targ_audit = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--appimage\") == 0)\n\t\t\targ_appimage = 1;\n\t\telse if (strcmp(argv[i], \"--csh\") == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one default user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = \"/bin/csh\";\n\t\t}\n\t\telse if (strcmp(argv[i], \"--zsh\") == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one default user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = \"/bin/zsh\";\n\t\t}\n\t\telse if (strcmp(argv[i], \"--shell=none\") == 0) {\n\t\t\targ_shell_none = 1;\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: a shell was already specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--shell=\", 8) == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tinvalid_filename(argv[i] + 8);\n\t\t\t\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = argv[i] + 8;\n\n\t\t\tif (is_dir(cfg.shell) || strstr(cfg.shell, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid shell\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif(cfg.chrootdir) {\n\t\t\t\tchar *shellpath;\n\t\t\t\tif (asprintf(&shellpath, \"%s%s\", cfg.chrootdir, cfg.shell) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tif (access(shellpath, R_OK)) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot access shell file in chroot\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tfree(shellpath);\n\t\t\t} else if (access(cfg.shell, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access shell file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"-c\") == 0) {\n\t\t\targ_command = 1;\n\t\t\tif (i == (argc -  1)) {\n\t\t\t\tfprintf(stderr, \"Error: option -c requires an argument\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// unlike all other x11 features, this is available always\n\t\telse if (strcmp(argv[i], \"--x11=none\") == 0) {\n\t\t\targ_x11_block = 1;\n\t\t}\n#ifdef HAVE_X11\n\t\telse if (strcmp(argv[i], \"--x11=xorg\") == 0) {\n\t\t\tif (checkcfg(CFG_X11))\n\t\t\t\targ_x11_xorg = 1;\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--join-or-start=\", 16) == 0) {\n\t\t\t// NOTE: this is second part of option handler,\n\t\t\t//\t\t atempt to find and join sandbox is done in other one\n\n\t\t\t// set sandbox name and start normally\n\t\t\tcfg.name = argv[i] + 16;\n\t\t\tif (strlen(cfg.name) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a name for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--\") == 0) {\n\t\t\t// double dash - positional params to follow\n\t\t\targ_doubledash = 1;\n\t\t\ti++;\n\t\t\tif (i  >= argc) {\n\t\t\t\tfprintf(stderr, \"Error: program name not found\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\textract_command_name(i, argv);\n\t\t\tprog_index = i;\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\t// is this an invalid option?\n\t\t\tif (*argv[i] == '-') {\n\t\t\t\tfprintf(stderr, \"Error: invalid %s command line option\\n\", argv[i]);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t\n\t\t\t// we have a program name coming\n\t\t\tif (arg_appimage) {\n\t\t\t\tcfg.command_name = strdup(argv[i]);\n\t\t\t\tif (!cfg.command_name)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse\n\t\t\t\textract_command_name(i, argv);\n\t\t\tprog_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// prog_index could still be -1 if no program was specified\n\tif (prog_index == -1 && arg_shell_none) {\n\t\tfprintf(stderr, \"shell=none configured, but no program specified\\n\");\n\t\texit(1);\n\t}\n\n\t// check trace configuration\n\tif (arg_trace && arg_tracelog) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --trace and --tracelog are mutually exclusive; --tracelog disabled\\n\");\n\t}\n\t\n\t// disable x11 abstract socket\n\tif (getenv(\"FIREJAIL_X11\"))\n\t\tmask_x11_abstract_socket = 1;\n\t\n\t// check user namespace (--noroot) options\n\tif (arg_noroot) {\n\t\tif (arg_overlay) {\n\t\t\tfprintf(stderr, \"Error: --overlay and --noroot are mutually exclusive.\\n\");\n\t\t\texit(1);\n\t\t}\n\t\telse if (cfg.chrootdir) {\n\t\t\tfprintf(stderr, \"Error: --chroot and --noroot are mutually exclusive.\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t// log command\n\tlogargs(argc, argv);\n\tif (fullargc) {\n\t\tchar *msg;\n\t\tif (asprintf(&msg, \"user %s entering restricted shell\", cfg.username) == -1)\n\t\t\terrExit(\"asprintf\");\n\t\tlogmsg(msg);\n\t\tfree(msg);\n\t}\n\n\t// guess shell if unspecified\n\tif (!arg_shell_none && !cfg.shell) {\n\t\tcfg.shell = guess_shell();\n\t\tif (!cfg.shell) {\n\t\t\tfprintf(stderr, \"Error: unable to guess your shell, please set explicitly by using --shell option.\\n\");\n\t\t\texit(1);\n\t\t}\n\t\tif (arg_debug)\n\t\t\tprintf(\"Autoselecting %s as shell\\n\", cfg.shell);\n\t}\n\n\t// build the sandbox command\n\tif (prog_index == -1 && cfg.shell) {\n\t\tcfg.command_line = cfg.shell;\n\t\tcfg.window_title = cfg.shell;\n\t\tcfg.command_name = cfg.shell;\n\t}\n\telse if (arg_appimage) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Configuring appimage environment\\n\");\n\t\tappimage_set(cfg.command_name);\n\t\tcfg.window_title = \"appimage\";\n\t}\n\telse {\n\t\tbuild_cmdline(&cfg.command_line, &cfg.window_title, argc, argv, prog_index);\n\t}\n/*\telse {\n\t\tfprintf(stderr, \"Error: command must be specified when --shell=none used.\\n\");\n\t\texit(1);\n\t}*/\n\t\n\tassert(cfg.command_name);\n\tif (arg_debug)\n\t\tprintf(\"Command name #%s#\\n\", cfg.command_name);\n\t\t\n\t\t\t\t\n\t// load the profile\n\tif (!arg_noprofile) {\n\t\tif (!custom_profile) {\n\t\t\t// look for a profile in ~/.config/firejail directory\n\t\t\tchar *usercfgdir;\n\t\t\tif (asprintf(&usercfgdir, \"%s/.config/firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tint rv = profile_find(cfg.command_name, usercfgdir);\n\t\t\tfree(usercfgdir);\n\t\t\tcustom_profile = rv;\n\t\t}\n\t\tif (!custom_profile) {\n\t\t\t// look for a user profile in /etc/firejail directory\n\t\t\tint rv;\n\t\t\tif (custom_profile_dir)\n\t\t\t\trv = profile_find(cfg.command_name, custom_profile_dir);\n\t\t\telse\n\t\t\t\trv = profile_find(cfg.command_name, SYSCONFDIR);\n\t\t\tcustom_profile = rv;\n\t\t}\n\t}\n\n\t// use default.profile as the default\n\tif (!custom_profile && !arg_noprofile) {\n\t\tif (cfg.chrootdir) {\n\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\tfprintf(stderr, \"Warning: default profile disabled by --chroot option\\n\");\n\t\t}\n\t\telse if (arg_overlay) {\n\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\tfprintf(stderr, \"Warning: default profile disabled by --overlay option\\n\");\n\t\t}\n\t\telse {\n\t\t\t// try to load a default profile\n\t\t\tchar *profile_name = DEFAULT_USER_PROFILE;\n\t\t\tif (getuid() == 0)\n\t\t\t\tprofile_name = DEFAULT_ROOT_PROFILE;\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Attempting to find %s.profile...\\n\", profile_name);\n\t\n\t\t\t// look for the profile in ~/.config/firejail directory\n\t\t\tchar *usercfgdir;\n\t\t\tif (asprintf(&usercfgdir, \"%s/.config/firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tcustom_profile = profile_find(profile_name, usercfgdir);\n\t\t\tfree(usercfgdir);\n\t\n\t\t\tif (!custom_profile) {\n\t\t\t\t// look for the profile in /etc/firejail directory\n\t\t\t\tif (custom_profile_dir)\n\t\t\t\t\tcustom_profile = profile_find(profile_name, custom_profile_dir);\n\t\t\t\telse\n\t\t\t\t\tcustom_profile = profile_find(profile_name, SYSCONFDIR);\n\t\t\t}\n\t\t\tif (!custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: no default.profile installed\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tif (custom_profile && !arg_quiet)\n\t\t\t\tprintf(\"\\n** Note: you can use --noprofile to disable %s.profile **\\n\\n\", profile_name);\n\t\t}\n\t}\n\n\t// block X11 sockets\n\tif (arg_x11_block)\n\t\tx11_block();\n\n\t// check network configuration options - it will exit if anything went wrong\n\tnet_check_cfg();\n\t\n\t// check and assign an IP address - for macvlan it will be done again in the sandbox!\n\tif (any_bridge_configured()) {\n\t\tEUID_ROOT();\n\t\tlockfd = open(RUN_NETWORK_LOCK_FILE, O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR);\n\t\tif (lockfd != -1) {\n\t\t\tint rv = fchown(lockfd, 0, 0);\n\t\t\t(void) rv;\n\t\t\tflock(lockfd, LOCK_EX);\n\t\t}\n\t\t\n\t\tcheck_network(&cfg.bridge0);\n\t\tcheck_network(&cfg.bridge1);\n\t\tcheck_network(&cfg.bridge2);\n\t\tcheck_network(&cfg.bridge3);\n\t\t\t\n\t\t// save network mapping in shared memory\n\t\tnetwork_set_run_file(sandbox_pid);\n\t\tEUID_USER();\n\t}\n\n \t// create the parent-child communication pipe\n \tif (pipe(parent_to_child_fds) < 0)\n \t\terrExit(\"pipe\");\n \tif (pipe(child_to_parent_fds) < 0)\n\t\terrExit(\"pipe\");\n\n\tif (arg_noroot && arg_overlay) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --overlay and --noroot are mutually exclusive, noroot disabled\\n\");\n\t\targ_noroot = 0;\n\t}\n\telse if (arg_noroot && cfg.chrootdir) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --chroot and --noroot are mutually exclusive, noroot disabled\\n\");\n\t\targ_noroot = 0;\n\t}\n\n\n\t// set name file\n\tEUID_ROOT();\n\tif (cfg.name)\n\t\tset_name_file(sandbox_pid);\n\tint display = x11_display();\n\tif (display > 0)\n\t\tset_x11_file(sandbox_pid, display);\n\tEUID_USER();\n\t\n\t// clone environment\n\tint flags = CLONE_NEWNS | CLONE_NEWPID | CLONE_NEWUTS | SIGCHLD;\n\t\n\t// in root mode also enable CLONE_NEWIPC\n\t// in user mode CLONE_NEWIPC will break MIT Shared Memory Extension (MIT-SHM)\n\tif (getuid() == 0 || arg_ipc) {\n\t\tflags |= CLONE_NEWIPC;\n\t\tif (arg_debug)\n\t\t\tprintf(\"Enabling IPC namespace\\n\");\n\t}\n\t\n\tif (any_bridge_configured() || any_interface_configured() || arg_nonetwork) {\n\t\tflags |= CLONE_NEWNET;\n\t}\n\telse if (arg_debug)\n\t\tprintf(\"Using the local network stack\\n\");\n\n\tEUID_ROOT();\n\tchild = clone(sandbox,\n\t\tchild_stack + STACK_SIZE,\n\t\tflags,\n\t\tNULL);\n\tif (child == -1)\n\t\terrExit(\"clone\");\n\tEUID_USER();\n\n\tif (!arg_command && !arg_quiet) {\n\t\tprintf(\"Parent pid %u, child pid %u\\n\", sandbox_pid, child);\n\t\t// print the path of the new log directory\n\t\tif (getuid() == 0) // only for root\n\t\t\tprintf(\"The new log directory is /proc/%d/root/var/log\\n\", child);\n\t}\n\t\n\tif (!arg_nonetwork) {\n\t\tEUID_ROOT();\t\n\t\tpid_t net_child = fork();\n\t\tif (net_child < 0)\n\t\t\terrExit(\"fork\");\n\t\tif (net_child == 0) {\n\t\t\t// elevate privileges in order to get grsecurity working\n\t\t\tif (setreuid(0, 0))\n\t\t\t\terrExit(\"setreuid\");\n\t\t\tif (setregid(0, 0))\n\t\t\t\terrExit(\"setregid\");\n\t\t\tnetwork_main(child);\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Host network configured\\n\");\t\t\t\n\t\t\t_exit(0);\t\t\t\n\t\t}\n\n\t\t// wait for the child to finish\n\t\twaitpid(net_child, NULL, 0);\n\t\tEUID_USER();\n\t}\n\n \t// close each end of the unused pipes\n \tclose(parent_to_child_fds[0]);\n \tclose(child_to_parent_fds[1]);\n \n\t// notify child that base setup is complete\n \tnotify_other(parent_to_child_fds[1]);\n \n \t// wait for child to create new user namespace with CLONE_NEWUSER\n \twait_for_other(child_to_parent_fds[0]);\n \tclose(child_to_parent_fds[0]);\n\n \tif (arg_noroot) {\n\t \t// update the UID and GID maps in the new child user namespace\n\t\t// uid\n\t \tchar *map_path;\n\t \tif (asprintf(&map_path, \"/proc/%d/uid_map\", child) == -1)\n\t \t\terrExit(\"asprintf\");\n\n\t \tchar *map;\n\t \tuid_t uid = getuid();\n\t \tif (asprintf(&map, \"%d %d 1\", uid, uid) == -1)\n\t \t\terrExit(\"asprintf\");\n \t\tEUID_ROOT();\n\t \tupdate_map(map, map_path);\n\t \tEUID_USER();\n\t \tfree(map);\n\t \tfree(map_path);\n\t \n\t \t// gid file\n\t\tif (asprintf(&map_path, \"/proc/%d/gid_map\", child) == -1)\n\t\t\terrExit(\"asprintf\");\n\t \tchar gidmap[1024];\n\t \tchar *ptr = gidmap;\n\t \t*ptr = '\\0';\n\n\t \t// add user group\n\t \tgid_t gid = getgid();\n\t \tsprintf(ptr, \"%d %d 1\\n\", gid, gid);\n\t \tptr += strlen(ptr);\n\t \t\n\t \t//  add tty group\n\t \tgid_t g = get_group_id(\"tty\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add audio group\n\t \tg = get_group_id(\"audio\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add video group\n\t \tg = get_group_id(\"video\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add games group\n\t \tg = get_group_id(\"games\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t}\n\t \t\n \t\tEUID_ROOT();\n\t \tupdate_map(gidmap, map_path);\n\t \tEUID_USER();\n\t \tfree(map_path);\n \t}\n \t\n \t// notify child that UID/GID mapping is complete\n \tnotify_other(parent_to_child_fds[1]);\n \tclose(parent_to_child_fds[1]);\n \n \tEUID_ROOT();\n\tif (lockfd != -1) {\n\t\tflock(lockfd, LOCK_UN);\n\t\tclose(lockfd);\n\t}\n\n\t// create name file under /run/firejail\n\t\n\n\t// handle CTRL-C in parent\n\tsignal (SIGINT, my_handler);\n\tsignal (SIGTERM, my_handler);\n\n\t\n\t// wait for the child to finish\n\tEUID_USER();\n\tint status = 0;\n\twaitpid(child, &status, 0);\n\n\t// free globals\n#ifdef HAVE_SECCOMP\n\tif (cfg.seccomp_list_errno) {\n\t\tfor (i = 0; i < highest_errno; i++)\n\t\t\tfree(cfg.seccomp_list_errno[i]);\n\t\tfree(cfg.seccomp_list_errno);\n\t}\n#endif\n\tif (cfg.profile) {\n\t\tProfileEntry *prf = cfg.profile;\n\t\twhile (prf != NULL) {\n\t\t\tProfileEntry *next = prf->next;\n\t\t\tfree(prf->data);\n\t\t\tfree(prf->link);\n\t\t\tfree(prf);\n\t\t\tprf = next;\n\t\t}\n\t}\n\n\tif (WIFEXITED(status)){\n\t\tmyexit(WEXITSTATUS(status));\n\t} else if (WIFSIGNALED(status)) {\n\t\tmyexit(WTERMSIG(status));\n\t} else {\n\t\tmyexit(0);\n\t}\n\n\treturn 0;\n}\n", ".TH FIREJAIL 1 \"MONTH YEAR\" \"VERSION\" \"firejail man page\"\n.SH NAME\nFirejail \\- Linux namespaces sandbox program\n.SH SYNOPSIS\nStart a sandbox:\n.PP\n.RS\nfirejail [OPTIONS] [program and arguments]\n.RE\n.PP\nFile transfer from an existing sandbox\n.PP\n.RS\nfirejail {\\-\\-ls | \\-\\-get | \\-\\-put} dir_or_filename\n.RE\n.PP\nNetwork traffic shaping for an existing sandbox:\n.PP\n.RS\nfirejail \\-\\-bandwidth={name|pid} bandwidth-command\n.RE\n.PP\nMonitoring:\n.PP\n.RS\nfirejail {\\-\\-list | \\-\\-netstats | \\-\\-top | \\-\\-tree}\n.RE\n.PP\nMiscellaneous:\n.PP\n.RS\nfirejail {\\-? | \\-\\-debug-caps | \\-\\-debug-errnos | \\-\\-debug-syscalls | \\-\\-debug-protocols | \\-\\-help | \\-\\-version}\n.RE\n.SH DESCRIPTION\nFirejail is a SUID sandbox program that reduces the risk of security breaches by\nrestricting the running environment of untrusted applications using Linux\nnamespaces, seccomp-bpf and Linux capabilities.\nIt allows a process and all its descendants to have their own private view of the\nglobally shared kernel resources, such as the network stack, process table, mount table.\nFirejail can work in a SELinux or AppArmor environment,\nand it is integrated with Linux Control Groups.\n.PP\nWritten in C with virtually no dependencies, the software runs on any Linux computer with a 3.x kernel version\nor newer.\nIt can sandbox any type of processes: servers, graphical applications, and even user login sessions. \n.PP\nFirejail allows the user to manage application security using security profiles.\nEach profile defines a set of permissions for a specific application or group\nof applications. The software includes security profiles for a number of more common\nLinux programs, such as Mozilla Firefox, Chromium, VLC, Transmission etc.\n\n.SH USAGE\nWithout any options, the sandbox consists of a filesystem build in a new mount namespace,\nand new PID and UTS namespaces. IPC, network and user namespaces can be added using the\ncommand line options. The default Firejail filesystem is based on the host filesystem with the main \nsystem directories mounted read-only. These directories are /etc, /var, /usr, /bin, /sbin, /lib, /lib32, \n/libx32 and /lib64. Only /home and /tmp are writable.\n.PP\nAs it starts up, Firejail tries to find a security profile based on the name of the application.\nIf an appropriate profile is not found, Firejail will use a default profile.\nThe default profile is quite restrictive. In case the application doesn't work, use --noprofile option \nto disable it. For more information, please see \\fBSECURITY PROFILES\\fR section below.\n.PP\nIf a program argument is not specified, Firejail starts /bin/bash shell.\nExamples:\n.PP\n$ firejail [OPTIONS]                # starting a /bin/bash shell\n.PP\n$ firejail [OPTIONS] firefox        # starting Mozilla Firefox\n.PP\n# sudo firejail [OPTIONS] /etc/init.d/nginx start\n\n.SH OPTIONS\n.TP\n\\fB\\-\\-\nSignal the end of options and disables further option processing.\n.TP\n\\fB\\-\\-allow-debuggers\nAllow tools such as strace and gdb inside the sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail  --allow-debuggers --profile=/etc/firejail/firefox.profile strace -f firefox\n.TP\n\\fB\\-\\-allusers\nAll user home directories are visible inside the sandbox. By default, only current user home directory is visible.\n.br\n\n.br\nExample:\n.br\n$ firejail --allusers\n.TP\n\\fB\\-\\-apparmor\nEnable AppArmor confinement. For more information, please see \\fBAPPARMOR\\fR section below.\n.TP\n\\fB\\-\\-appimage\nSandbox an AppImage (http://appimage.org/) application.\n.br\n\n.br\nExample:\n.br\n$ firejail --appimage krita-3.0-x86_64.appimage\n.br\n$ firejail --appimage --private krita-3.0-x86_64.appimage\n.br\n$ firejail --appimage --net=none --x11 krita-3.0-x86_64.appimage\n.TP\n\\fB\\-\\-audit\nAudit the sandbox, see \\fBAUDIT\\fR section for more details.\n.TP\n\\fB\\-\\-audit=test-program\nAudit the sandbox, see \\fBAUDIT\\fR section for more details.\n.TP\n\\fB\\-\\-bandwidth=name|pid\nSet bandwidth limits for the sandbox identified by name or PID, see \\fBTRAFFIC SHAPING\\fR section for more details.\n.TP\n\\fB\\-\\-bind=filename1,filename2\nMount-bind filename1 on top of filename2. This option is only available when running as root.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-bind=/config/etc/passwd,/etc/passwd\n.TP\n\\fB\\-\\-blacklist=dirname_or_filename\nBlacklist directory or file.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-blacklist=/sbin \\-\\-blacklist=/usr/sbin\n.br\n$ firejail \\-\\-blacklist=~/.mozilla\n.br\n$ firejail \"\\-\\-blacklist=/home/username/My Virtual Machines\"\n.br\n$ firejail \\-\\-blacklist=/home/username/My\\\\ Virtual\\\\ Machines\n.TP\n\\fB\\-c\nExecute command and exit.\n.TP\n\\fB\\-\\-caps\nLinux capabilities is a kernel feature designed to split up the root privilege into a set of distinct privileges.\nThese privileges can be enabled or disabled independently, thus restricting what a process running\nas root can do in the system.\n\nBy default root programs run with all capabilities enabled. \\-\\-caps option disables the following capabilities:\nCAP_SYS_MODULE, CAP_SYS_RAWIO,\nCAP_SYS_BOOT, CAP_SYS_NICE, CAP_SYS_TTY_CONFIG, CAP_SYSLOG, CAP_MKNOD, CAP_SYS_ADMIN.\nThe filter is applied to all processes started in the sandbox.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail \\-\\-caps /etc/init.d/nginx start\n\n.TP\n\\fB\\-\\-caps.drop=all\nDrop all capabilities for the processes running in the sandbox. This option is recommended for running GUI programs\nor any other program that doesn't require root privileges. It is a must-have option for sandboxing untrusted programs\ninstalled from unofficial sources - such as games, Java programs, etc.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-caps.drop=all warzone2100\n\n.TP\n\\fB\\-\\-caps.drop=capability,capability,capability\nDefine a custom blacklist Linux capabilities filter.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-caps.keep=net_broadcast,net_admin,net_raw\n\n.TP\n\\fB\\-\\-caps.keep=capability,capability,capability\nDefine a custom whitelist Linux capabilities filter.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail \\-\\-caps.keep=chown,net_bind_service,setgid,\\\\\nsetuid /etc/init.d/nginx start\n\n.TP\n\\fB\\-\\-caps.print=name|pid\nPrint the caps filter for the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-caps.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-caps.print=3272\n\n.TP\n\\fB\\-\\-cgroup=tasks-file\nPlace the sandbox in the specified control group. tasks-file is the full path of cgroup tasks file.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-cgroup=/sys/fs/cgroup/g1/tasks\n\n.TP\n\\fB\\-\\-chroot=dirname\nChroot the sandbox into a root filesystem. Unlike the regular filesystem container,\nthe system directories are mounted read-write. If the sandbox is started as a\nregular user, default seccomp and capabilities filters are enabled. This\noption is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-chroot=/media/ubuntu warzone2100\n\n.TP\n\\fB\\-\\-cpu=cpu-number,cpu-number,cpu-number\nSet CPU affinity.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-cpu=0,1 handbrake\n\n.TP\n\\fB\\-\\-cpu.print=name|pid\nPrint the CPU cores in use by the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-cpu.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-cpu.print=3272\n\n.TP\n\\fB\\-\\-csh\nUse /bin/csh as default user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-csh\n.TP\n\\fB\\-\\-debug\\fR\nPrint debug messages.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug firefox\n\n.TP\n\\fB\\-\\-debug-blacklists\\fR\nDebug blacklisting.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-blacklists firefox\n\n.TP\n\\fB\\-\\-debug-caps\nPrint all recognized capabilities in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-caps\n.TP\n\\fB\\-\\-debug-check-filename\\fR\nDebug filename checking.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-check-filename firefox\n\n.TP\n\\fB\\-\\-debug-errnos\nPrint all recognized error numbers in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-errnos\n.TP\n\\fB\\-\\-debug-protocols\nPrint all recognized protocols in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-protocols\n.TP\n\\fB\\-\\-debug-syscalls\nPrint all recognized system calls in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-syscalls\n.TP\n\\fB\\-\\-debug-whitelists\\fR\nDebug whitelisting.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-whitelists firefox\n\n.TP\n\\fB\\-\\-defaultgw=address\nUse this address as default gateway in the new network namespace.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-defaultgw=10.10.20.1 firefox\n\n.TP\n\\fB\\-\\-dns=address\nSet a DNS server for the sandbox. Up to three DNS servers can be defined.\nUse this option if you don't trust the DNS setup on your network.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-dns=8.8.8.8 \\-\\-dns=8.8.4.4 firefox\n\n.TP\n\\fB\\-\\-dns.print=name|pid\nPrint DNS configuration for a sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-dns.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-dns.print=3272\n\n.TP\n\\fB\\-\\-env=name=value\nSet environment variable in the new sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-env=LD_LIBRARY_PATH=/opt/test/lib\n\n.TP\n\\fB\\-\\-force\nBy default, if Firejail is started in an existing sandbox, it will run the program in a bash shell.\nThis option disables this behavior, and attempts to start Firejail in the existing sandbox.\nThere could be lots of reasons for it to fail, for example if the existing sandbox disables\nadmin capabilities, SUID binaries, or if it runs seccomp.\n\n.TP\n\\fB\\-\\-fs.print=name|print\nPrint the filesystem log for the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-fs.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-fs.print=3272\n\n.TP\n\\fB\\-\\-get=name|pid filename\nGet a file from sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n\n.TP\n\\fB\\-?\\fR, \\fB\\-\\-help\\fR\nPrint options end exit.\n\n\n.TP\n\\fB\\-\\-hostname=name\nSet sandbox hostname.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-hostname=officepc firefox\n\n.TP\n\\fB\\-\\-ignore=command\nIgnore command in profile file.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-ignore=shell --ignore=seccomp firefox\n\n.TP\n\\fB\\-\\-interface=interface\nMove interface in a new network namespace. Up to four --interface options can be specified.\nNote: wlan devices are not supported for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-interface=eth1 \\-\\-interface=eth0.vlan100\n\n.TP\n\\fB\\-\\-ip=address\nAssign IP addresses to the last network interface defined by a \\-\\-net option. A\ndefault gateway is assigned by default.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip=10.10.20.56 firefox\n\n.TP\n\\fB\\-\\-ip=none\nNo IP address and no default gateway are configured for the last interface\ndefined by a \\-\\-net option. Use this option\nin case you intend to start an external DHCP client in the sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-\\ip=none\n.br\n\n.br\nIf the corresponding interface doesn't have an IP address configured, this\noption is enabled by default.\n\n.TP\n\\fB\\-\\-ip6=address\nAssign IPv6 addresses to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip6=2001:0db8:0:f101::1/64 firefox\n\nNote: you don't need this option if you obtain your ip6 address from router via SLAAC (your ip6 address and default route will be configured by kernel automatically).\n\n.TP\n\\fB\\-\\-iprange=address,address\nAssign an IP address in the provided range to the last network interface defined by a \\-\\-net option. A\ndefault gateway is assigned by default.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-\\iprange=192.168.1.100,192.168.1.150\n\n.TP\n\\fB\\-\\-ipc-namespace\nEnable  a new IPC namespace if the sandbox was started as a regular user. IPC namespace is enabled by default\nfor sandboxes started as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-ipc-namespace firefox\n.TP\n\\fB\\-\\-join=name|pid\nJoin the sandbox identified by name or by PID. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. If \\-\\-join command is issued as a regular user,\nall security filters are configured for the new process the same they are configured in the sandbox.\nIf \\-\\-join command is issued as root, the security filters, cgroups and cpus configurations are not applied\nto the process joining the sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-join=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-join=3272\n\n.TP\n\\fB\\-\\-join-filesystem=name|pid\nJoin the mount namespace of the sandbox identified by name or PID. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. This command is available only to root user.\nSecurity filters, cgroups and cpus configurations are not applied to the process joining the sandbox.\n\n.TP\n\\fB\\-\\-join-network=name|PID\nJoin the network namespace of the sandbox identified by name. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. This command is available only to root user.\nSecurity filters, cgroups and cpus configurations are not applied to the process joining the sandbox. Example:\n.br\n\n.br\n# start firefox\n.br\n$ firejail --net=eth0 --name=browser firefox &\n.br\n\n.br\n# change netfilter configuration\n.br\n$ sudo firejail --join-network=browser bash -c \"cat /etc/firejail/nolocal.net | /sbin/iptables-restore\"\n.br\n\n.br\n# verify netfilter configuration\n.br\n$ sudo firejail --join-network=browser /sbin/iptables -vL\n.br\n\n.br\n# verify  IP addresses\n.br\n$ sudo firejail --join-network=browser ip addr\n.br\nSwitching to pid 1932, the first child process inside the sandbox\n.br\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default \n.br\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n.br\n    inet 127.0.0.1/8 scope host lo\n.br\n       valid_lft forever preferred_lft forever\n.br\n    inet6 ::1/128 scope host \n.br\n       valid_lft forever preferred_lft forever\n.br\n2: eth0-1931: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default \n.br\n    link/ether 76:58:14:42:78:e4 brd ff:ff:ff:ff:ff:ff\n.br\n    inet 192.168.1.158/24 brd 192.168.1.255 scope global eth0-1931\n.br\n       valid_lft forever preferred_lft forever\n.br\n    inet6 fe80::7458:14ff:fe42:78e4/64 scope link \n.br\n       valid_lft forever preferred_lft forever\n\n.TP\n\\fB\\-\\-join-or-start=name\nJoin the sandbox identified by name or start a new one.\nSame as \"firejail --join=name\" if sandbox with specified name exists, otherwise same as \"firejail --name=name ...\"\n.br\nNote that in contrary to other join options there is respective profile option.\n\n.TP\n\\fB\\-\\-ls=name|pid dir_or_filename\nList files in sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n\n.TP\n\\fB\\-\\-list\nList all sandboxes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n7015:netblue:firejail firefox \n.br\n7056:netblue:firejail \\-\\-net=eth0 transmission-gtk \n.br\n7064:netblue:firejail \\-\\-noroot xterm \n.br\n$ \n.TP\n\\fB\\-\\-mac=address\nAssign MAC addresses to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-mac=00:11:22:33:44:55 firefox\n\n.TP\n\\fB\\-\\-mtu=number\nAssign a MTU value to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-mtu=1492\n\n.TP\n\\fB\\-\\-name=name\nSet sandbox name. Several options, such as \\-\\-join and \\-\\-shutdown, can use\nthis name to identify a sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mybrowser firefox\n\n.TP\n\\fB\\-\\-net=bridge_interface\nEnable a new network namespace and connect it to this bridge interface.\nUnless specified with option \\-\\-ip and \\-\\-defaultgw, an IP address and a default gateway will be assigned\nautomatically to the sandbox. The IP address is verified using ARP before assignment. The address\nconfigured as default gateway is the bridge device IP address. Up to four \\-\\-net\nbridge devices can be defined. Mixing bridge and macvlan devices is allowed.\n.br\n\n.br\nExample:\n.br\n$ sudo brctl addbr br0\n.br\n$ sudo ifconfig br0 10.10.20.1/24\n.br\n$ sudo brctl addbr br1\n.br\n$ sudo ifconfig br1 10.10.30.1/24\n.br\n$ firejail \\-\\-net=br0 \\-\\-net=br1\n\n.TP\n\\fB\\-\\-net=ethernet_interface\nEnable a new network namespace and connect it\nto this ethernet interface using the standard Linux macvlan\ndriver. Unless specified with option \\-\\-ip and \\-\\-defaultgw, an\nIP address and a default gateway will be assigned automatically\nto the sandbox. The IP address is verified using ARP before\nassignment. The address configured as default gateway is the\ndefault gateway of the host. Up to four \\-\\-net devices can\nbe defined. Mixing bridge and macvlan devices is allowed.\nNote: wlan devices are not supported for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip=192.168.1.80 \\-\\-dns=8.8.8.8 firefox\n\n.TP\n\\fB\\-\\-net=none\nEnable a new, unconnected network namespace. The only interface\navailable in the new namespace is a new loopback interface (lo).\nUse this option to deny\nnetwork access to programs that don't really need network access.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=none vlc\n\n.TP\n\\fB\\-\\-netfilter\nEnable a default client network filter in the new network namespace.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter option does nothing.\nThe default filter is as follows:\n.br\n\n.br\n*filter\n.br\n:INPUT DROP [0:0]\n.br\n:FORWARD DROP [0:0]\n.br\n:OUTPUT ACCEPT [0:0]\n.br\n\\-A INPUT \\-i lo \\-j ACCEPT\n.br\n\\-A INPUT \\-m state \\-\\-state RELATED,ESTABLISHED \\-j ACCEPT\n.br\n# allow ping\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type destination-unreachable \\-j ACCEPT\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type time-exceeded \\-j ACCEPT\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type echo-request \\-j ACCEPT\n.br\n# drop STUN (WebRTC) requests\n.br\n-A OUTPUT -p udp --dport 3478 -j DROP\n.br\n-A OUTPUT -p udp --dport 3479 -j DROP\n.br\n-A OUTPUT -p tcp --dport 3478 -j DROP\n.br\n-A OUTPUT -p tcp --dport 3479 -j DROP\n.br\nCOMMIT\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-netfilter firefox\n.TP\n\\fB\\-\\-netfilter=filename\nEnable the network filter specified by filename in the new network namespace. The filter file format\nis the format of iptables-save and iptable-restore commands.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter option does nothing.\n.br\n\n.br\nThe following filters are available in /etc/firejail directory:\n.br\n\n.br\n.B webserver.net\nis a webserver filter that allows access only to TCP ports 80 and 443.\nExample:\n.br\n\n.br\n$ firejail --netfilter=/etc/firejail/webserver.net --net=eth0 \\\\\n.br\n/etc/init.d/apache2 start\n.br\n\n.br\n.B nolocal.net\nis a client filter that disable access to local network. Example:\n.br\n\n.br\n$ firejail --netfilter=/etc/firejail/nolocal.net \\\\\n.br\n--net=eth0 firefox\n.TP\n\\fB\\-\\-netfilter6=filename\nEnable the IPv6 network filter specified by filename in the new network namespace. The filter file format\nis the format of ip6tables-save and ip6table-restore commands.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter6 option does nothing.\n.TP\n\\fB\\-\\-netstats\nMonitor network namespace statistics, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n\n.br\n$ firejail \\-\\-netstats\n.br\nPID  User    RX(KB/s) TX(KB/s) Command\n.br\n1294 netblue 53.355   1.473    firejail \\-\\-net=eth0 firefox\n.br\n7383 netblue 9.045    0.112    firejail \\-\\-net=eth0 transmission\n\n.TP\n\\fB\\-\\-nice=value\nSet nice value for all processes running inside the sandbox.\nOnly root may specify a negative value.\n.br\n\n.br\nExample:\n.br\n$ firejail --nice=2 firefox\n\n.TP\n\\fB\\-\\-no3d\nDisable 3D hardware acceleration.\n.br\n\n.br\nExample:\n.br\n$ firejail --no3d firefox\n\n.TP\n\\fB\\-\\-noblacklist=dirname_or_filename\nDisable blacklist for this directory or file.\n.br\n\n.br\nExample:\n.br\n$ firejail\n.br\n$ nc dict.org 2628\n.br\nbash: /bin/nc: Permission denied\n.br\n$ exit\n.br\n\n.br\n$ firejail --noblacklist=/bin/nc\n.br\n$ nc dict.org 2628\n.br\n220 pan.alephnull.com dictd 1.12.1/rf on Linux 3.14-1-amd64\n.br\n.TP\n\\fB\\-\\-noexec=dirname_or_filename\nRemount directory or file noexec, nodev and nosuid.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noexec=/tmp\n.br\n\n.br\n/etc and /var are noexec by default if the sandbox was started as a regular user. If there are more than one mount operation\non the path of the file or directory, noexec should be applied to the last one. Always check if the change took effect inside the sandbox.\n\n.TP\n\\fB\\-\\-nogroups\nDisable supplementary groups. Without this option, supplementary groups are enabled for the user starting the\nsandbox. For root user supplementary groups are always disabled.\n.br\n\n.br\nExample:\n.br\n$ id\n.br\nuid=1000(netblue) gid=1000(netblue) groups=1000(netblue),24(cdrom),25(floppy),27(sudo),29(audio)\n.br\n$ firejail \\-\\-nogroups\n.br\nParent pid 8704, child pid 8705\n.br\nChild process initialized\n.br\n$ id\n.br\nuid=1000(netblue) gid=1000(netblue) groups=1000(netblue)\n.br\n$\n\n.TP\n\\fB\\-\\-noprofile\nDo not use a security profile. \n.br\n\n.br\nExample:\n.br\n$ firejail\n.br\nReading profile /etc/firejail/default.profile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...] \n.br\n\n.br\n$ firejail \\-\\-noprofile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...]\n\n.TP\n\\fB\\-\\-noroot\nInstall a user namespace with a single user - the current user.\nroot user does not exist in the new namespace. This option\nrequires a Linux kernel version 3.8 or newer. The option\nis not supported for \\-\\-chroot and \\-\\-overlay configurations,\nor for sandboxes started as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noroot\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n$ ping google.com\n.br\nping: icmp open socket: Operation not permitted\n.br\n$\n\n.TP\n\\fB\\-\\-nonewprivs\nSets the NO_NEW_PRIVS prctl.  This ensures that child processes\ncannot acquire new privileges using execve(2);  in particular,\nthis means that calling a suid binary (or one with file capabilities)\ndoes not result in an increase of privilege. This option\nis enabled by default if seccomp filter is activated.\n\n.TP\n\\fB\\-\\-nosound\nDisable sound system.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-nosound firefox\n\n.TP\n\\fB\\-\\-output=logfile\nstdout logging and log rotation. Copy stdout and stderr to logfile, and keep the size of the file under 500KB using log\nrotation. Five files with prefixes .1 to .5 are used in rotation.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-output=sandboxlog /bin/bash\n.br\n[...]\n.br\n$ ls -l sandboxlog*\n.br\n-rw-r--r-- 1 netblue netblue 333890 Jun  2 07:48 sandboxlog\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.1\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.2\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.3\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.4\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.5\n\n.TP\n\\fB\\-\\-overlay\nMount a filesystem overlay on top of the current filesystem.  Unlike the regular filesystem container,\nthe system directories are mounted read-write. All filesystem modifications go into the overlay.\nThe overlay is stored in $HOME/.firejail/<PID> directory.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay firefox\n\n.TP\n\\fB\\-\\-overlay-named=name\nMount a filesystem overlay on top of the current filesystem.  Unlike the regular filesystem container,\nthe system directories are mounted read-write. All filesystem modifications go into the overlay.\nThe overlay is stored in $HOME/.firejail/<NAME> directory. The created overlay can be reused between multiple\nsessions.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-named=jail1 firefox\n\n.TP\n\\fB\\-\\-overlay-tmpfs\nMount a filesystem overlay on top of the current filesystem. All filesystem modifications go into the overlay,\nand are discarded when the sandbox is closed.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-tmpfs firefox\n\n.TP\n\\fB\\-\\-overlay-clean\nClean all overlays stored in $HOME/.firejail directory. Overlays created with --overlay-path=path\noutside $HOME/.firejail will not be deleted.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-clean\n\n.TP\n\\fB\\-\\-private\nMount new /root and /home/user directories in temporary\nfilesystems. All modifications are discarded when the sandbox is\nclosed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private firefox\n.TP\n\\fB\\-\\-private=directory\nUse directory as user home.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private=/home/netblue/firefox-home firefox\n\n.TP\n\\fB\\-\\-private-home=file,directory\nBuild a new user home in a temporary\nfilesystem, and copy the files and directories in the list in the\nnew home. All modifications are discarded when the sandbox is\nclosed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-home=.mozilla firefox\n\n.TP\n\\fB\\-\\-private-bin=file,file\nBuild a new /bin in a temporary filesystem, and copy the programs in the list.\nIf no listed file is found, /bin directory will be empty.\nThe same directory is also bind-mounted over /sbin, /usr/bin, /usr/sbin and /usr/local/bin.\nAll modifications are discarded when the sandbox is closed. \n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-bin=bash,sed,ls,cat\n.br\nParent pid 20841, child pid 20842\n.br\nChild process initialized\n.br\n$ ls /bin\n.br\nbash  cat  ls  sed\n\n.TP\n\\fB\\-\\-private-dev\nCreate a new /dev directory. Only dri, null, full, zero, tty, pts, ptmx, random, snd, urandom, log and shm devices are available.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-dev\n.br\nParent pid 9887, child pid 9888\n.br\nChild process initialized\n.br\n$ ls /dev\n.br\ndri  full  log  null  ptmx  pts  random  shm  snd  tty  urandom  zero\n.br\n$\n.TP\n\\fB\\-\\-private-etc=file,directory\nBuild a new /etc in a temporary\nfilesystem, and copy the files and directories in the list.\nIf no listed file is found, /etc directory will be empty.\nAll modifications are discarded when the sandbox is closed. \n.br\n\n.br\nExample:\n.br\n$ firejail --private-etc=group,hostname,localtime, \\\\\n.br\nnsswitch.conf,passwd,resolv.conf\n\n.TP\n\\fB\\-\\-private-tmp\nMount an empty temporary filesystem on top of /tmp directory.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-tmp\n\n.TP\n\\fB\\-\\-profile=filename\nLoad a custom security profile from filename. For filename use an absolute path or a path relative to the current path.\nFor more information, see \\fBSECURITY PROFILES\\fR section below.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-profile=myprofile\n\n.TP\n\\fB\\-\\-profile-path=directory\nUse this directory to look for profile files. Use an absolute path or a path in the home directory starting with ~/.\nFor more information, see \\fBSECURITY PROFILES\\fR section below and \\fBRELOCATING PROFILE FILES\\fR in\n\\fBman 5 firejail-profile\\fR.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-profile-path=~/myprofiles\n.br\n$ firejail \\-\\-profile-path=/home/netblue/myprofiles\n\n.TP\n\\fB\\-\\-protocol=protocol,protocol,protocol\nEnable protocol filter. The filter is based on seccomp and checks the first argument to socket system call.\nRecognized values: unix, inet, inet6, netlink and packet. This option is not supported for i386 architecture.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-protocol=unix,inet,inet6 firefox\n.TP\n\\fB\\-\\-protocol.print=name|pid\nPrint the protocol filter for the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mybrowser firefox &\n.br\n$ firejail \\-\\-protocol.print=mybrowser\n.br\nunix,inet,inet6,netlink\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-protocol.print=3272\n.br\nunix,inet,inet6,netlink\n.TP\n\\fB\\-\\-put=name|pid src-filename dest-filename\nPut a file in sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n.TP\n\\fB\\-\\-quiet\nTurn off Firejail's output.\n.TP\n\\fB\\-\\-read-only=dirname_or_filename\nSet directory or file read-only.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-read-only=~/.mozilla firefox\n.br\n\n.br\nA short note about mixing \\-\\-whitelist and \\-\\-read-only options. Whitelisted directories\nshould be made read-only independently. Making a parent directory read-only, will not\nmake the whitelist read-only. Example:\n.br\n\n.br\n$ firejail --whitelist=~/work --read-only=~ --read-only=~/work\n\n.TP\n\\fB\\-\\-read-write=dirname_or_filename\nSet directory or file read-write. Only files or directories belonging to the current user are allowed for\nthis operation. Example:\n.br\n\n.br\n$ mkdir ~/test\n.br\n$ touch ~/test/a\n.br\n$ firejail --read-only=~/test --read-write=~/test/a\n\n\n.TP\n\\fB\\-\\-rlimit-fsize=number\nSet the maximum file size that can be created by a process.\n.TP\n\\fB\\-\\-rlimit-nofile=number\nSet the maximum number of files that can be opened by a process.\n.TP\n\\fB\\-\\-rlimit-nproc=number\nSet the maximum number of processes that can be created for the real user ID of the calling process.\n.TP\n\\fB\\-\\-rlimit-sigpending=number\nSet the maximum number of pending signals for a process.\n\n.TP\n\\fB\\-\\-rmenv=name\nRemove environment variable in the new sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-rmenv=DBUS_SESSION_BUS_ADDRESS\n\n.TP\n\\fB\\-\\-scan\nARP-scan all the networks from inside a network namespace.\nThis makes it possible to detect macvlan kernel device drivers running on the current host.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-scan\n.TP\n\\fB\\-\\-seccomp\nEnable seccomp filter and blacklist the syscalls in the default list. The default list is as follows:\nmount, umount2, ptrace, kexec_load, kexec_file_load, name_to_handle_at, open_by_handle_at, create_module, init_module, finit_module, delete_module,\niopl, ioperm, ioprio_set, swapon, swapoff, syslog, process_vm_readv, process_vm_writev,\nsysfs,_sysctl, adjtimex, clock_adjtime, lookup_dcookie, perf_event_open, fanotify_init, kcmp,\nadd_key, request_key, keyctl, uselib, acct, modify_ldt, pivot_root, io_setup,\nio_destroy, io_getevents, io_submit, io_cancel,\nremap_file_pages, mbind, get_mempolicy, set_mempolicy,\nmigrate_pages, move_pages, vmsplice, chroot,\ntuxcall, reboot, mfsservctl and get_kernel_syms.\n.br\n\n.br\nSystem architecture is not strictly imposed. The filter is applied\nat run time only if the correct architecture was detected. For the case of I386 and AMD64\nboth 32-bit and 64-bit filters are installed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp\n.TP\n\\fB\\-\\-seccomp=syscall,syscall,syscall\nEnable seccomp filter, blacklist the default list and the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp=utime,utimensat,utimes firefox\n.TP\n\\fB\\-\\-seccomp.drop=syscall,syscall,syscall\nEnable seccomp filter, and blacklist the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp.drop=utime,utimensat,utimes\n.TP\n\\fB\\-\\-seccomp.keep=syscall,syscall,syscall\nEnable seccomp filter, and whitelist the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-shell=none \\-\\-seccomp.keep=poll,select,[...] transmission-gtk\n.TP\n\\fB\\-\\-seccomp.<errno>=syscall,syscall,syscall\nEnable seccomp filter, and return errno for the syscalls specified by the command.\n.br\n\n.br\nExample: a Bash shell where deleting files is disabled\n.br\n\n.br\n$ firejail --seccomp.eperm=unlinkat\n.br\nParent pid 10662, child pid 10663\n.br\nChild process initialized\n.br\n$ touch testfile\n.br\n$ rm testfile\n.br\nrm: cannot remove `testfile': Operation not permitted\n\n.TP\n\\fB\\-\\-seccomp.print=name|PID\nPrint the seccomp filter for the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=browser firefox &\n.br\n$ firejail \\-\\-seccomp.print=browser\n.br\nSECCOMP Filter:\n.br\n  VALIDATE_ARCHITECTURE\n.br\n  EXAMINE_SYSCALL\n.br\n  BLACKLIST 165 mount\n.br\n  BLACKLIST 166 umount2\n.br\n  BLACKLIST 101 ptrace\n.br\n  BLACKLIST 246 kexec_load\n.br\n  BLACKLIST 304 open_by_handle_at\n.br\n  BLACKLIST 175 init_module\n.br\n  BLACKLIST 176 delete_module\n.br\n  BLACKLIST 172 iopl\n.br\n  BLACKLIST 173 ioperm\n.br\n  BLACKLIST 167 swapon\n.br\n  BLACKLIST 168 swapoff\n.br\n  BLACKLIST 103 syslog\n.br\n  BLACKLIST 310 process_vm_readv\n.br\n  BLACKLIST 311 process_vm_writev\n.br\n  BLACKLIST 133 mknod\n.br\n  BLACKLIST 139 sysfs\n.br\n  BLACKLIST 156 _sysctl\n.br\n  BLACKLIST 159 adjtimex\n.br\n  BLACKLIST 305 clock_adjtime\n.br\n  BLACKLIST 212 lookup_dcookie\n.br\n  BLACKLIST 298 perf_event_open\n.br\n  BLACKLIST 300 fanotify_init\n.br\n  RETURN_ALLOW\n.br\n$ \n.TP\n\\fB\\-\\-shell=none\nRun the program directly, without a user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-shell=none script.sh\n.TP\n\\fB\\-\\-shell=program\nSet default user shell. Use this shell to run the application using \\-c shell option.\nFor example \"firejail \\-\\-shell=/bin/dash firefox\" will start Mozilla Firefox as \"/bin/dash \\-c firefox\".\nBy default Bash shell (/bin/bash) is used. Options such as \\-\\-zsh and \\-\\-csh can also set the default\nshell.\n.br\n\n.br\nExample:\n$firejail \\-\\-shell=/bin/dash script.sh\n.TP\n\\fB\\-\\-shutdown=name|PID\nShutdown the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-shutdown=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-shutdown=3272\n.TP\n\\fB\\-\\-tmpfs=dirname\nMount a tmpfs filesystem on directory dirname. This option is available only when running the sandbox as root.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-tmpfs=/var\n.TP\n\\fB\\-\\-top\nMonitor the most CPU-intensive sandboxes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-top\n.TP\n\\fB\\-\\-trace\nTrace open, access and connect system calls.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-trace wget -q www.debian.org\n.br\nParent pid 11793, child pid 11794\n.br\nChild process initialized\n.br\n1:bash:open /dev/tty\n.br\n1:wget:fopen64 /etc/wgetrc\n.br\n1:wget:fopen /etc/hosts\n.br\n1:wget:socket AF_INET SOCK_DGRAM IPPROTO_IP\n.br\n1:wget:connect 8.8.8.8:53\n.br\n1:wget:socket AF_INET SOCK_STREAM IPPROTO_IP\n.br\n1:wget:connect 140.211.15.34:80\n.br\n1:wget:fopen64 index.html.1\n.br\n\n.br\nparent is shutting down, bye...\n.TP\n\\fB\\-\\-tracelog\nThis option enables auditing blacklisted files and directories. A message\nis sent to syslog in case the file or the directory is accessed. \n.br\n\n.br\nExample:\n.br\n$ firejail --tracelog firefox\n.br\n\n.br\nSample messages:\n.br\n$ sudo tail -f /var/log/syslog\n.br\n[...]\n.br\nDec  3 11:43:25 debian firejail[70]: blacklist violation - sandbox 26370, exe firefox, syscall open64, path /etc/shadow\n.br\nDec  3 11:46:17 debian firejail[70]: blacklist violation - sandbox 26370, exe firefox, syscall opendir, path /boot\n.br\n[...]\n.TP\n\\fB\\-\\-tree\nPrint a tree of all sandboxed processes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-tree\n.br\n11903:netblue:firejail iceweasel\n.br\n  11904:netblue:iceweasel \n.br\n    11957:netblue:/usr/lib/iceweasel/plugin-container\n.br\n11969:netblue:firejail \\-\\-net=eth0 transmission-gtk \n.br\n  11970:netblue:transmission-gtk \n\n.TP\n\\fB\\-\\-version\nPrint program version and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-version\n.br\nfirejail version 0.9.27\n\n.TP\n\\fB\\-\\-veth-name=name\nUse this name for the interface connected to the bridge for --net=bridge_interface commands, \ninstead of the default one.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=br0 --veth-name=if0\n\n.TP\n\\fB\\-\\-whitelist=dirname_or_filename\nWhitelist directory or file. A temporary file system is mounted on the top directory, and the\nwhitelisted files are mount-binded inside. Modifications to whitelisted files are persistent,\neverything else is discarded when the sandbox is closed. The top directory could be \nuser home, /dev, /media, /mnt, /opt, /srv, /var, and /tmp.\n.br\n\n.br\nSymbolic link handling: with the exception of user home, both the link and the real file should be in\nthe same top directory. For user home, both the link and the real file should be owned by the user.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noprofile \\-\\-whitelist=~/.mozilla\n.br\n$ firejail \\-\\-whitelist=/tmp/.X11-unix --whitelist=/dev/null\n.br\n$ firejail \"\\-\\-whitelist=/home/username/My Virtual Machines\"\n\n.TP\n\\fB\\-\\-writable-etc\nMount /etc directory read-write.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail --writable-etc\n\n.TP\n\\fB\\-\\-writable-var\nMount /var directory read-write.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail --writable-var\n\n\n.TP\n\\fB\\-\\-x11\nSandbox the application using Xpra, Xephyr or Xorg security extension.\nThe sandbox will prevents screenshot and keylogger applications started inside the sandbox from accessing\nclients running outside the sandbox.\nFirejail will try first Xpra, and if Xpra is not installed on the system, it will try to find Xephyr.\nIf all fails, Firejail will not attempt to use X11 security extension.\n.br\n\n.br\nXpra and Xephyr modes require a network namespace to be instantiated in order to disable\nX11 abstract Unix socket. If this is not possible, the user can disable the abstract socket\nby adding \"-nolisten local\" on Xorg command line.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11 --net=eth0 firefox\n\n.TP\n\\fB\\-\\-x11=none\nBlacklist /tmp/.X11-unix directory, ${HOME}/.Xauthority and the file specified in ${XAUTHORITY} environment variable.\nRemove DISPLAY and XAUTHORITY environment variables.\nStop with error message if X11 abstract socket will be accessible in jail.\n\n.TP\n\\fB\\-\\-x11=xephyr\nStart Xephyr and attach the sandbox to this server.\nXephyr is a display server implementing the X11 display server protocol.\nA network namespace needs to be instantiated in order to deny access to X11 abstract Unix domain socket.\n.br\n\n.br\nXephyr runs in a window just like any other X11 application. The default window size is 800x600.\nThis can be modified in /etc/firejail/firejail.config file.\n.br\n\n.br\nThe recommended way to use this feature is to run a window manager inside the sandbox.\nA security profile for OpenBox is provided.\n.br\n\n.br\nXephyr is developed by Xorg project. On Debian platforms it is installed with the command \\fBsudo apt-get install xserver-xephyr\\fR.\nThis feature is not available when running as root. \n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xephyr --net=eth0 openbox\n\n.TP\n\\fB\\-\\-x11=xorg\nSandbox the application using the untrusted mode implemented by X11 security extension. \nThe extension is available in Xorg package\nand it is installed by default on most Linux distributions. It provides support for a simple trusted/untrusted \nconnection model. Untrusted clients are restricted in certain ways to prevent them from reading window\ncontents of other clients, stealing input events, etc.\n\nThe untrusted mode has several limitations. A lot of regular programs  assume they are a trusted X11 clients\nand will crash or lock up when run in untrusted mode. Chromium browser and xterm are two examples.\nFirefox and transmission-gtk seem to be working fine.\nA network namespace is not required for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xorg firefox\n\n.TP\n\\fB\\-\\-x11=xpra\nStart Xpra (http://xpra.org) and attach the sandbox to this server.\nXpra is a persistent remote display server and client for forwarding X11 applications and desktop screens.\nA network namespace needs to be instantiated in order to deny access to X11 abstract Unix domain socket.\n.br\n\n.br\nOn Debian platforms Xpra is installed with the command \\fBsudo apt-get install xpra\\fR.\nThis feature is not available when running as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xpra --net=eth0 firefox\n\n.TP\n\\fB\\-\\-zsh\nUse /usr/bin/zsh as default user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-zsh\n\n.SH DESKTOP INTEGRATION\nA symbolic link to /usr/bin/firejail under the name of a program, will start the program in Firejail sandbox.\nThe symbolic link should be placed in the first $PATH position. On most systems, a good place\nis /usr/local/bin directory. Example:\n.PP\n.RS\n.br\n\n.br\nMake a firefox symlink to /usr/bin/firejail:\n.br\n\n.br\n$ ln -s /usr/bin/firejail /usr/local/bin/firefox\n.br\n\n.br\nVerify $PATH\n.br\n\n.br\n$ which -a firefox\n.br\n/usr/local/bin/firefox\n.br\n/usr/bin/firefox\n.br\n\n.br\nStarting firefox in this moment, automatically invokes \u201cfirejail firefox\u201d.\n.RE\n.br\n\n.br\nThis works for clicking on desktop environment icons, menus etc. Use \"firejail --tree\"\nto verify the program is sandboxed.\n.PP\n.RS\n.br\n\n.br\n.br\n$ firejail --tree\n.br\n1189:netblue:firejail firefox\n.br\n  1190:netblue:firejail firefox\n.br\n    1220:netblue:/bin/sh -c \"/usr/lib/firefox/firefox\"  \n.br\n      1221:netblue:/usr/lib/firefox/firefox\n.RE\n\n.SH APPARMOR\n.TP\nAppArmor support is disabled by default at compile time. Use --enable-apparmor configuration option to enable it:\n.br\n\n.br\n$ ./configure --prefix=/usr --enable-apparmor\n.TP\nDuring software install, a generic AppArmor profile file, firejail-default, is placed in /etc/apparmor.d directory. The profile needs to be loaded into the kernel by running the following command as root:\n.br\n\n.br\n# aa-enforce firejail-default\n.TP\nThe installed profile tries to replicate some advanced security features inspired by kernel-based Grsecurity:\n.br\n\n.br\n- Prevent information leakage in /proc and /sys directories. The resulting filesystem is barely enough for running\ncommands such as \"top\" and \"ps aux\".\n.br\n\n.br\n- Allow running programs only from well-known system paths, such as /bin, /sbin, /usr/bin etc. Running\nprograms and scripts from user home or other directories writable by the user is not allowed.\n.br\n\n.br\n- Disable D-Bus. D-Bus has long been a huge security hole, and most programs don't use it anyway.\nYou should have no problems running Chromium or Firefox.\n\n.TP\nTo enable AppArmor confinement on top of your current Firejail security features, pass \\fB\\-\\-apparmor\\fR flag to Firejail command line. You can also include \\fBapparmor\\fR command in a Firejail profile file. Example:\n.br\n\n.br\n$ firejail --apparmor firefox\n\n.SH FILE TRANSFER\nThese features allow the user to inspect the filesystem container of an existing sandbox\nand transfer files from the container to the host filesystem.\n\n.TP\n\\fB\\-\\-get=name|pid filename\nRetrieve the container file and store it on the host in the current working directory.\nThe container is specified by name or PID. This option is not available for sandboxes\nusing --chroot.\n\n.TP\n\\fB\\-\\-ls=name|pid dir_or_filename\nList container files. The container is specified by name or PID.\n\n.TP\n\\fB\\-\\-put=name|pid src-filename dest-filename\nPut src-filename in sandbox container.\nThe container is specified by name or PID. This option is not available for sandboxes\nusing --chroot.\n\n.TP\nExamples:\n.br\n\n.br\n$ firejail \\-\\-name=mybrowser --private firefox\n.br\n\n.br\n$ firejail \\-\\-ls=mybrowser ~/Downloads\n.br\ndrwxr-xr-x netblue  netblue         4096 .\n.br\ndrwxr-xr-x netblue  netblue         4096 ..\n.br\n-rw-r--r-- netblue  netblue         7847 x11-x305.png\n.br\n-rw-r--r-- netblue  netblue         6800 x11-x642.png\n.br\n-rw-r--r-- netblue  netblue        34139 xpra-clipboard.png\n.br\n\n.br\n$ firejail \\-\\-get=mybrowser ~/Downloads/xpra-clipboard.png\n.br\n\n.br\n$ firejail \\-\\-put=mybrowser xpra-clipboard.png ~/Downloads/xpra-clipboard.png\n.br\n\n.SH TRAFFIC SHAPING\nNetwork bandwidth is an expensive resource shared among all sandboxes running on a system.\nTraffic shaping allows the user to increase network performance by controlling\nthe amount of data that flows into and out of the sandboxes.\n\nFirejail implements a simple rate-limiting shaper based on Linux command tc.\nThe shaper works at sandbox level, and can be used only for sandboxes configured with new network namespaces.\n\nSet rate-limits:\n\n\t$ firejail --bandwidth=name|pid set network download upload\n\nClear rate-limits:\n\n\t$ firejail --bandwidth=name|pid clear network\n\nStatus:\n\n\t$ firejail --bandwidth=name|pid status\n\nwhere:\n.br\n\tname - sandbox name\n.br\n\tpid - sandbox pid\n.br\n\tnetwork - network interface as used by \\-\\-net option\n.br\n\tdownload - download speed in KB/s (kilobyte per second)\n.br\n\tupload - upload speed in KB/s (kilobyte per second)\n\nExample:\n.br\n\t$ firejail \\-\\-name=mybrowser \\-\\-net=eth0 firefox &\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser set eth0 80 20\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser status\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser clear eth0\n\n.SH AUDIT\nAudit feature allows the user to point out gaps in security profiles. The\nimplementation replaces the program to be sandboxed with a test program. By\ndefault, we use faudit program distributed with Firejail. A custom test program\ncan also be supplied by the user. Examples:\n\nRunning the default audit program:\n.br\n\t$ firejail --audit transmission-gtk\n\nRunning a custom audit program:\n.br\n\t$ firejail --audit=~/sandbox-test transmission-gtk\n\nIn the examples above, the sandbox configures transmission-gtk profile and\nstarts the test program. The real program, transmission-gtk, will not be\nstarted.\n\nLimitations: audit feature is not implemented for --x11 commands.\n\n.SH MONITORING\nOption \\-\\-list prints a list of all sandboxes. The format\nfor each process entry is as follows:\n\n\tPID:USER:Command\n\nOption \\-\\-tree prints the tree of processes running in the sandbox. The format\nfor each process entry is as follows:\n\n\tPID:USER:Command\n\nOption \\-\\-top is similar to the UNIX top command, however it applies only to\nsandboxes.\n\nOption \\-\\-netstats prints network statistics for active sandboxes installing new network namespaces.\n\n\nListed below are the available fields (columns) in alphabetical\norder for \\-\\-top and \\-\\-netstat options:\n\n.TP\nCommand\nCommand used to start the sandbox.\n.TP\nCPU%\nCPU usage, the sandbox share of the elapsed CPU time since the\nlast screen update\n.TP\nPID\nUnique process ID for the task controlling the sandbox.\n.TP\nPrcs\nNumber of processes running in sandbox, including the controlling process.\n.TP\nRES\nResident Memory Size (KiB), sandbox non-swapped physical memory.\nIt is a sum of the RES values for all processes running in the sandbox.\n.TP\nRX(KB/s)\nNetwork receive speed.\n.TP\nSHR\nShared Memory Size (KiB), it reflects memory shared with other\nprocesses. It is a sum of the SHR values for all processes running\nin the sandbox, including the controlling process.\n.TP\nTX(KB/s)\nNetwork transmit speed.\n.TP\nUptime\nSandbox running time in hours:minutes:seconds format.\n.TP\nUser\nThe owner of the sandbox.\n\n.SH SECURITY PROFILES\nSeveral command line options can be passed to the program using\nprofile files. Firejail chooses the profile file as follows:\n\n1. If a profile file is provided by the user with --profile option, the profile file is loaded.\nExample:\n.PP\n.RS\n$ firejail --profile=/home/netblue/icecat.profile icecat\n.br\nReading profile /home/netblue/icecat.profile\n.br\n[...]\n.RE\n\n2. If a profile file with the same name as the application is present in ~/.config/firejail directory or\nin /etc/firejail, the profile is loaded. ~/.config/firejail takes precedence over /etc/firejail. Example:\n.PP\n.RS\n$ firejail icecat\n.br\nCommand name #icecat#\n.br\nFound icecat profile in /home/netblue/.config/firejail directory\n.br\nReading profile /home/netblue/.config/firejail/icecat.profile\n.br\n[...]\n.RE\n\n3. Use default.profile file if the sandbox\nis started by a regular user, or server.profile file if the sandbox\nis started by root. Firejail looks for these files in ~/.config/firejail directory, followed by /etc/firejail directory.\nTo disable default profile loading, use --noprofile command option. Example:\n.PP\n.RS\n$ firejail\n.br\nReading profile /etc/firejail/default.profile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...] \n.br\n\n.br\n$ firejail \\-\\-noprofile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...]\n.RE\n\nSee man 5 firejail-profile for profile file syntax information.\n\t\n.SH RESTRICTED SHELL\nTo configure a restricted shell, replace /bin/bash with /usr/bin/firejail in\n/etc/passwd file for each user that needs to be restricted. Alternatively,\nyou can specify /usr/bin/firejail  in adduser command:\n\nadduser \\-\\-shell /usr/bin/firejail username\n\nAdditional arguments passed to firejail executable upon login are declared in /etc/firejail/login.users file.\n\n.SH EXAMPLES\n.TP\n\\f\\firejail\nSandbox a regular /bin/bash session.\n.TP\n\\f\\firejail firefox\nStart Mozilla Firefox.\n.TP\n\\f\\firejail \\-\\-debug firefox\nDebug Firefox sandbox.\n.TP\n\\f\\firejail \\-\\-private firefox\nStart Firefox with a new, empty home directory.\n.TP\n\\f\\firejail --net=none vlc\nStart VLC in an unconnected network namespace.\n.TP\n\\f\\firejail \\-\\-net=eth0 firefox\nStart Firefox in a new network namespace. An IP address is\nassigned automatically.\n.TP\n\\f\\firejail \\-\\-net=br0 \\-\\-ip=10.10.20.5 \\-\\-net=br1 \\-\\-net=br2\nStart a /bin/bash session in a new network namespace and connect it\nto br0, br1, and br2 host bridge devices. IP addresses are assigned\nautomatically for the interfaces connected to br1 and b2\n.TP\n\\f\\firejail \\-\\-list\nList all sandboxed processes.\n.SH LICENSE\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n.PP\nHomepage: http://firejail.wordpress.com\n.SH SEE ALSO\n\\&\\flfiremon\\fR\\|(1),\n\\&\\flfirecfg\\fR\\|(1),\n\\&\\flfirejail-profile\\fR\\|(5),\n\\&\\flfirejail-login\\fR\\|(5)\n\n\n\n"], "fixing_code": ["firejail (0.9.44.3) baseline; urgency=low\n  * development version\n  * security: disabled --allow-debuggers when running on kernel\n    versions prior to 4.8; a kernel bug in ptrace system call\n    allows a full bypass of seccomp filter; problem reported by Lizzie Dixon\n  * security: root exploit found by Sebastian Krahmer\n -- netblue30 <netblue30@yahoo.com>  Wed, 4 Jan 2017 11:00:00 -0500\n\nfirejail (0.9.44.2) baseline; urgency=low\n  * security: overwrite /etc/resolv.conf found by Martin Carpenter\n  * secuirty: TOCTOU exploit for --get and --put found by Daniel Hodson\n  * security: invalid environment exploit found by Martin Carpenter\n  * security: several security enhancements\n  * bugfix: crashing VLC by pressing Ctrl-O\n  * bugfix: use user configured icons in KDE\n  * bugfix: mkdir and mkfile are not applied to private directories\n  * bugfix: cannot open files on Deluge running under KDE\n  * bugfix: --private=dir where dir is the user home directory\n  * bugfix: cannot start Vivaldi browser\n  * bugfix: cannot start mupdf\n  * bugfix: ssh profile problems\n  * bugfix: --quiet\n  * bugfix: quiet in git profile\n  * bugfix: memory corruption\n -- netblue30 <netblue30@yahoo.com>  Fri, 2 Dec 2016 08:00:00 -0500\n  \nfirejail (0.9.44) baseline; urgency=low\n  * CVE-2016-7545 submitted by Aleksey Manevich\n  * modifs: removed man firejail-config\n  * modifs: --private-tmp whitelists /tmp/.X11-unix directory\n  * modifs: Nvidia drivers added to --private-dev\n  * modifs: /srv supported by --whitelist\n  * feature: allow user access to /sys/fs (--noblacklist=/sys/fs)\n  * feature: support starting/joining sandbox is a single command\n    (--join-or-start)\n  * feature: X11 detection support for --audit\n  * feature: assign a name to the interface connected to the bridge \n    (--veth-name)\n  * feature: all user home directories are visible (--allusers)\n  * feature: add files to sandbox container (--put)\n  * feature: blocking x11 (--x11=block)\n  * feature: X11 security extension (--x11=xorg)\n  * feature: disable 3D hardware acceleration (--no3d)\n  * feature: x11 xpra, x11 xephyr, x11 block, allusers, no3d profile commands\n  * feature: move files in sandbox (--put)\n  * feature: accept wildcard patterns in user  name field of restricted\n    shell login feature\n  * new profiles: qpdfview, mupdf, Luminance HDR, Synfig Studio, Gimp, Inkscape\n  * new profiles: feh, ranger, zathura, 7z, keepass, keepassx,\n  * new profiles: claws-mail, mutt, git, emacs, vim, xpdf, VirtualBox, OpenShot\n  * new profiles: Flowblade, Eye of GNOME (eog), Evolution\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Fri, 21 Oct 2016 08:00:00 -0500\n\nfirejail (0.9.42) baseline; urgency=low\n  * security: --whitelist deleted files, submitted by Vasya Novikov\n  * security: disable x32 ABI in seccomp, submitted by Jann Horn\n  * security: tighten --chroot, submitted by Jann Horn\n  * security: terminal sandbox escape, submitted by Stephan Sokolow\n  * security: several TOCTOU fixes submitted by Aleksey Manevich\n  * modifs: bringing back --private-home option\n  * modifs: deprecated --user option, please use \"sudo -u username firejail\"\n  * modifs: allow symlinks in home directory for --whitelist option\n  * modifs: Firejail prompt is enabled by env variable FIREJAIL_PROMPT=\"yes\"\n  * modifs: recursive mkdir\n  * modifs: include /dev/snd in --private-dev\n  * modifs: seccomp filter update\n  * modifs: release archives moved to .xz format\n  * feature: AppImage support (--appimage)\n  * feature: AppArmor support (--apparmor)\n  * feature: Ubuntu snap support (/etc/firejail/snap.profile)\n  * feature: Sandbox auditing support (--audit)\n  * feature: remove environment variable (--rmenv)\n  * feature: noexec support (--noexec)\n  * feature: clean local overlay storage directory (--overlay-clean)\n  * feature: store and reuse overlay (--overlay-named)\n  * feature: allow debugging inside the sandbox with gdb and strace\n         (--allow-debuggers)\n  * feature: mkfile profile command\n  * feature: quiet profile command\n  * feature: x11 profile command\n  * feature: option to fix desktop files (firecfg --fix)\n  * compile time: Busybox support (--enable-busybox-workaround)\n  * compile time: disable overlayfs (--disable-overlayfs)\n  * compile time: disable whitlisting (--disable-whitelist)\n  * compile time: disable global config (--disable-globalcfg)\n  * run time: enable/disable overlayfs (overlayfs yes/no)\n  * run time: enable/disable  quiet as default (quiet-by-default yes/no)\n  * run time: user-defined network filter (netfilter-default)\n  * run time: enable/disable whitelisting (whitelist yes/no)\n  * run time: enable/disable remounting of /proc and /sys\n          (remount-proc-sys yes/no)\n  * run time: enable/disable chroot desktop features (chroot-desktop yes/no)\n  * profiles: Gitter, gThumb, mpv, Franz messenger, LibreOffice\n  * profiles: pix, audacity, xz, xzdec, gzip, cpio, less\n  * profiles: Atom Beta, Atom, jitsi, eom, uudeview\n  * profiles: tar (gtar), unzip, unrar, file, skypeforlinux,\n  * profiles: inox, Slack, gnome-chess. Gajim IM client, DOSBox\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Thu, 8 Sept 2016 08:00:00 -0500\n\nfirejail (0.9.40) baseline; urgency=low\n  * added --nice option\n  * added --x11 option\n  * added --x11=xpra option\n  * added --x11=xephyr option\n  * added --cpu.print option\n  * added filetransfer options --ls and --get\n  * added --writable-etc and --writable-var options\n  * added --read-only option\n  * added mkdir, ipc-namespace, and nosound profile commands\n  * added net, ip, defaultgw, ip6, mac, mtu and iprange profile commands\n  * --version also prints compile options\n  * --output option also redirects stderr\n  * added compile-time option to restrict --net= to root only\n  * run time config support, man firejail-config\n  * added firecfg utility\n  * AppArmor fixes\n  * default seccomp filter update\n  * disable STUN/WebRTC in default netfilter configuration\n  * new profiles: lxterminal, Epiphany, cherrytree, Polari, Vivaldi, Atril\n  * new profiles: qutebrowser, SlimJet, Battle for Wesnoth, Hedgewars\n  * new profiles: qTox, OpenSSH client, OpenBox, Dillo, cmus, dnsmasq\n  * new profiles: PaleMoon, Icedove, abrowser, 0ad, netsurf, Warzone2100\n  * new profiles: okular, gwenview, Google-Play-Music-Desktop-Player\n  * new profiles: Aweather, Stellarium, gpredict, quiterss, cyberfox\n  * new profiles: generic Ubuntu snap application profile, xplayer\n  * new profiles: xreader, xviewer, mcabber, Psi+, Corebird, Konversation\n  * new profiles: Brave, Gitter\n  * generic.profile renamed default.profile\n  * build rpm packages using \"make rpms\"\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sun, 29 May 2016 08:00:00 -0500\n\nfirejail (0.9.38) baseline; urgency=low\n  * IPv6 support (--ip6 and --netfilter6)\n  * --join command enhancement (--join-network, --join-filesystem)\n  * added --user command\n  * added --disable-network and --disable-userns compile time flags\n  * Centos 6 support\n  * symlink invocation\n  * added KMail, Seamonkey, Telegram, Mathematica, uGet,\n  *   and mupen64plus profiles\n  * --chroot in user mode allowed only if seccomp support is available\n  *   in current Linux kernel\n  * deprecated --private-home feature\n  * the first protocol list installed takes precedence\n  * --tmpfs option allowed only running as root\n  * added --private-tmp option\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Tue, 2 Feb 2016 10:00:00 -0500\n\nfirejail (0.9.36) baseline; urgency=low\n  * added  unbound, dnscrypt-proxy, BitlBee, HexChat, WeeChat,\n     parole and rtorrent profiles\n  * Google Chrome profile rework\n  * added google-chrome-stable profile\n  * added google-chrome-beta profile\n  * added google-chrome-unstable profile\n  * Opera profile rework\n  * added opera-beta profile\n  * added --noblacklist option\n  * added --profile-path option\n  * added --force option\n  * whitelist command enhancements\n  * prevent user name enumeration\n  * added /etc/firejail/nolocal.net network filter\n  * added /etc/firejail/webserver.net network filter\n  * blacklisting firejail configuration by default\n  * allow default gateway configuration for --interface option\n  * --debug enhancements: --debug-check-filenames, --debug-blacklists,\n    --debug-whitelists\n  * filesystem log\n  * libtrace enhancements, tracing opendir call\n  * added --tracelog option\n  * added \"name\" command to profile files\n  * added \"hostname\" command to profile files\n  * added automated feature testing framework\n  * Debian reproducible build\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sun, 27 Dec 2015 09:00:00 -0500\n\nfirejail (0.9.34) baseline; urgency=low\n  * added --ignore option\n  * added --protocol option\n  * support dual i386/amd64 seccomp filters\n  * added Google Chrome profile\n  * added Steam, Skype, Wine and Conkeror profiles\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sat, 7 Nov 2015 08:00:00 -0500\n\nfirejail (0.9.32) baseline; urgency=low\n  * added --interface option\n  * added --mtu option\n  * added --private-bin option\n  * added --nosound option\n  * added --hostname option\n  * added --quiet option\n  * added seccomp errno support\n  * added FBReader default profile\n  * added Spotify default profile\n  * lots of default security profile changes\n  * fixed a security problem on multi-user systems\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Wed, 21 Oct 2015 08:00:00 -0500\n\n\nfirejail (0.9.30) baseline; urgency=low\n  * added a disable-history.inc profile as a result of Firefox PDF.js exploit;\n    disable-history.inc included in all default profiles\n  * Firefox PDF.js exploit (CVE-2015-4495) fixes\n  * added --private-etc option\n  * added --env option\n  * added --whitelist option\n  * support ${HOME} token in include directive in profile files\n  * --private.keep is transitioned to --private-home\n  * support ~ and blanks in blacklist option\n  * support \"net none\" command in profile files\n  * using /etc/firejail/generic.profile by default for user sessions\n  * using /etc/firejail/server.profile by default for root sessions\n  * added build --enable-fatal-warnings configure option\n  * added persistence to --overlay option\n  * added --overlay-tmpfs option\n  * make install-strip implemented, make install renamed\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Mon, 14 Sept 2015 08:00:00 -0500\n\nfirejail (0.9.28) baseline; urgency=low\n  * network scanning, --scan option\n  * interface MAC address support, --mac option\n  * IP address range, --iprange option\n  * traffic shaping, --bandwidth option\n  * reworked printing of network status at startup\n  * man pages rework\n  * added firejail-login man page\n  * added GNU Icecat, FileZilla, Pidgin, XChat, Empathy, DeaDBeeF default\n    profiles\n  * added an /etc/firejail/disable-common.inc file to hold common directory\n    blacklists\n  * blacklist Opera and Chrome/Chromium config directories in profile files\n  * support noroot option for profile files\n  * enabled noroot in default profile files\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Sat, 1 Aug 2015 08:00:00 -0500\n\nfirejail (0.9.26) baseline; urgency=low\n  * private dev directory\n  * private.keep option for whitelisting home files in a new private directory\n  * user namespaces support, noroot option\n  * added Deluge and qBittorent profiles\n  * bugfixes\n -- netblue30 <netblue30@yahoo.com>  Thu, 30 Apr 2015 08:00:00 -0500\n\n\nfirejail (0.9.24) baseline; urgency=low\n  * whitelist and blacklist seccomp filters\n  * doubledash option\n  * --shell=none support\n  * netfilter file support in profile files\n  * dns server support in profile files\n  * added --dns.print option\n  * added default profiles for Audacious, Clementine, Gnome-MPlayer, Rhythmbox and Totem.\n  * added --caps.drop=all in default profiles\n  * new syscalls in default seccomp filter: sysfs, sysctl, adjtimex, kcmp\n  *         clock_adjtime, lookup_dcookie, perf_event_open, fanotify_init\n  * Bugfix: using /proc/sys/kernel/pid_max for the max number of pids\n  * two build patches from Reiner Herman (tickets 11, 12)\n  * man page patch from Reiner Herman (ticket 13)\n  * output patch (ticket 15) from sshirokov\n  \n -- netblue30 <netblue30@yahoo.com>  Sun, 5 Apr 2015 08:00:00 -0500\n\nfirejail (0.9.22) baseline; urgency=low\n  * Replaced --noip option with --ip=none\n  * Container stdout logging and log rotation\n  * Added process_vm_readv, process_vm_writev and mknod to\n  *    default seccomp blacklist\n  * Added CAP_MKNOD to default caps blacklist\n  * Blacklist and whitelist custom Linux capabilities filters\n  * macvlan device driver support for --net option\n  * DNS server support, --dns option\n  * Netfilter support\n  * Monitor network statistics, --netstats option\n  * Added profile for Mozilla Thunderbird/Icedove\n  * - --overlay support for Linux kernels 3.18+\n  * Bugfix: preserve .Xauthority file in private mode (test with ssh -X)\n  * Bugfix: check uid/gid for cgroup\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 9 Mar 2015 09:00:00 -0500\n\nfirejail (0.9.20) baseline; urgency=low\n  * utmp, btmp and wtmp enhancements\n  *    create empty /var/log/wtmp and /var/log/btmp files in sandbox\n  *    generate a new /var/run/utmp file in sandbox\n  * CPU affinity, --cpu option\n  * Linux control groups support, --cgroup option\n  * Opera web browser support\n  * VLC support\n  * Added \"empty\" attribute to seccomp command to remove the default\n  *    syscall list form seccomp blacklist\n  * Added --nogroups option to disable supplementary groups for regular\n  *   users. root user always runs without supplementary groups.\n  * firemon enhancements\n  *   display the command that started the sandbox\n  *   added --caps option to display capabilities for all sandboxes\n  *   added --cgroup option to display the control groups for all sandboxes\n  *   added --cpu option to display CPU affinity for all sandboxes\n  *   added --seccomp option to display seccomp setting for all sandboxes\n  * New compile time options: --disable-chroot, --disable-bind\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 02 Feb 2015 08:00:00 -0500\n\nfirejail (0.9.18) baseline; urgency=low\n  * Support for tracing system, setuid, setgid, setfsuid, setfsgid syscalls\n  * Support for tracing setreuid, setregid, setresuid, setresguid syscalls\n  * Added profiles for transmission-gtk and transmission-qt\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Dec 2014 10:00:00 -0500\n\nfirejail (0.9.16) baseline; urgency=low\n  * Configurable private home directory\n  * Configurable default user shell\n  * Software configuration support for --docdir and DESTDIR\n  * Profile file support for include, caps, seccomp and private keywords\n  * Dropbox profile file\n  * Linux capabilities and seccomp filters enabled by default for Firefox,\n  Midori, Evince and Dropbox\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 4 Nov 2014 10:00:00 -0500\n\nfirejail (0.9.14) baseline; urgency=low\n  * Linux capabilities and seccomp filters are automatically enabled in \n    chroot mode (--chroot option) if the sandbox is started as regular user\n  * Added support for user defined seccomp blacklists\n  * Added syscall trace support\n  * Added --tmpfs option\n  * Added --balcklist option\n  * Added --read-only option\n  * Added --bind option\n  * Logging enhancements\n  * --overlay option was reactivated\n  * Added firemon support to print the ARP table for each sandbox\n  * Added firemon support to print the route table for each sandbox\n  * Added firemon support to print interface information for each sandbox\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 15 Oct 2014 10:00:00 -0500\n\nfirejail (0.9.12.2) baseline; urgency=low\n  * Fix for pulseaudio problems\n  * --overlay option was temporarily disabled in this build\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 29 Sept 2014 07:00:00 -0500\n\nfirejail (0.9.12.1) baseline; urgency=low\n  * Fix for pulseaudio problems\n  * --overlay option was temporarily disabled in this build\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 22 Sept 2014 09:00:00 -0500\n\nfirejail (0.9.12) baseline; urgency=low\n  * Added capabilities support\n  * Added support for CentOS 7\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Mon, 15 Sept 2014 10:00:00 -0500\n\nfirejail (0.9.10) baseline; urgency=low\n  * Disable /proc/kcore, /proc/kallsyms, /dev/port, /boot\n  * Fixed --top option CPU utilization calculation\n  * Implemented --tree option in firejail and firemon\n  * Implemented --join=name option\n  * Implemented --shutdown option\n  * Preserve the current working directory if possible\n  * Cppcheck and clang errors cleanup\n  * Added a Chromium web browser profile\n\n -- netblue30 <netblue30@yahoo.com>  Thu, 28 Aug 2014 07:00:00 -0500\n\nfirejail (0.9.8.1) baseline; urgency=low\n  * FIxed a number of bugs introduced in 0.9.8\n\n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Jul 2014 07:25:00 -0500\n  \nfirejail (0.9.8) baseline; urgency=low\n  * Implemented nowrap mode for firejail --list command option\n  * Added --top option in both firejail and firemon\n  * seccomp filter support\n  * Added pid support for firemon\n  * bugfixes\n\n -- netblue30 <netblue30@yahoo.com>  Tue, 24 Jul 2014 08:51:00 -0500\n  \nfirejail (0.9.6) baseline; urgency=low\n\n  * Mounting tmpfs on top of /var/log, required by several server programs\n  * Server fixes for /var/lib and /var/cache\n  * Private mode fixes\n  * csh and zsh default shell support\n  * Chroot mode fixes\n  * Added support for lighttpd, isc-dhcp-server, apache2, nginx, snmpd,\n\n -- netblue30 <netblue30@yahoo.com>  Sat, 7 Jun 2014 09:00:00 -0500\n\nfirejail (0.9.4) baseline; urgency=low\n\n  * Fixed resolv.conf on Ubuntu systems using DHCP\n  * Fixed resolv.conf on Debian systems using resolvconf package\n  * Fixed /var/lock directory\n  * Fixed /var/tmp directory\n  * Fixed symbolic links in profile files\n  * Added profiles for evince, midori\n\n -- netblue30 <netblue30@yahoo.com>  Sun, 4 May 2014 08:00:00 -0500\n\nfirejail (0.9.2) baseline; urgency=low\n\n  * Checking IP address passed with --ip option using ARP; exit if the address\n   is already present\n  * Using a lock file during ARP address assignment in order to removed a race\n   condition.\n  * Several fixes to --private option; it also mounts a tmpfs filesystem on top\n   of /tmp\n  * Added user access check for profile file\n  * Added --defaultgw option\n  * Added support of --noip option; it is necessary for DHCP setups\n  * Added syslog support\n  * Added support for \"tmpfs\" and \"read-only\" profile commands\n  * Added an expect-based testing framework for the project\n  * Added bash completion support\n  * Added support for multiple networks\n  \n -- netblue30 <netblue30@yahoo.com>  Fri, 25 Apr 2014 08:00:00 -0500\n\nfirejail (0.9) baseline; urgency=low\n\n  * First beta version\n\n -- netblue30 <netblue30@yahoo.com>  Sat, 12 Apr 2014 09:00:00 -0500\n", "/*\n * Copyright (C) 2014-2016 Firejail Authors\n *\n * This file is part of firejail project\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License along\n * with this program; if not, write to the Free Software Foundation, Inc.,\n * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n */\n#include \"firejail.h\"\n#include \"../include/pid.h\"\n#define _GNU_SOURCE\n#include <sys/utsname.h>\n#include <sched.h>\n#include <sys/mount.h>\n#include <sys/wait.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <dirent.h>\n#include <pwd.h>\n#include <errno.h>\n#include <limits.h>\n#include <sys/file.h>\n#include <sys/prctl.h>\n#include <signal.h>\n#include <time.h>\n#include <net/if.h>\n#include <sys/utsname.h>\n\n#if 0\n#include <sys/times.h>\n{\nstruct tms tm;\nclock_t systick = times(&tm);\nprintf(\"time %s:%d %u\\n\", __FILE__, __LINE__, (uint32_t) systick);\n}\n#endif\n\nuid_t firejail_uid = 0;\ngid_t firejail_gid = 0;\n\n#define STACK_SIZE (1024 * 1024)\nstatic char child_stack[STACK_SIZE];\t\t// space for child's stack\nConfig cfg;\t\t\t\t\t// configuration\nint arg_private = 0;\t\t\t\t// mount private /home and /tmp directoryu\nint arg_private_template = 0; // mount private /home using a template\nint arg_debug = 0;\t\t\t\t// print debug messages\nint arg_debug_check_filename;\t\t// print debug messages for filename checking\nint arg_debug_blacklists;\t\t\t// print debug messages for blacklists\nint arg_debug_whitelists;\t\t\t// print debug messages for whitelists\nint arg_nonetwork = 0;\t\t\t\t// --net=none\nint arg_command = 0;\t\t\t\t// -c\nint arg_overlay = 0;\t\t\t\t// overlay option\nint arg_overlay_keep = 0;\t\t\t// place overlay diff in a known directory\nint arg_overlay_reuse = 0;\t\t\t// allow the reuse of overlays\n\nint arg_seccomp = 0;\t\t\t\t// enable default seccomp filter\n\nint arg_caps_default_filter = 0;\t\t\t// enable default capabilities filter\nint arg_caps_drop = 0;\t\t\t\t// drop list\nint arg_caps_drop_all = 0;\t\t\t// drop all capabilities\nint arg_caps_keep = 0;\t\t\t// keep list\nchar *arg_caps_list = NULL;\t\t\t// optional caps list\n\nint arg_trace = 0;\t\t\t\t// syscall tracing support\nint arg_tracelog = 0;\t\t\t\t// blacklist tracing support\nint arg_rlimit_nofile = 0;\t\t\t// rlimit nofile\nint arg_rlimit_nproc = 0;\t\t\t// rlimit nproc\nint arg_rlimit_fsize = 0;\t\t\t\t// rlimit fsize\nint arg_rlimit_sigpending = 0;\t\t\t// rlimit fsize\nint arg_nogroups = 0;\t\t\t\t// disable supplementary groups\nint arg_nonewprivs = 0;\t\t\t// set the NO_NEW_PRIVS prctl\nint arg_noroot = 0;\t\t\t\t// create a new user namespace and disable root user\nint arg_netfilter;\t\t\t\t// enable netfilter\nint arg_netfilter6;\t\t\t\t// enable netfilter6\nchar *arg_netfilter_file = NULL;\t\t\t// netfilter file\nchar *arg_netfilter6_file = NULL;\t\t// netfilter6 file\nint arg_doubledash = 0;\t\t\t// double dash\nint arg_shell_none = 0;\t\t\t// run the program directly without a shell\nint arg_private_dev = 0;\t\t\t// private dev directory\nint arg_private_etc = 0;\t\t\t// private etc directory\nint arg_private_bin = 0;\t\t\t// private bin directory\nint arg_private_tmp = 0;\t\t\t// private tmp directory\nint arg_scan = 0;\t\t\t\t// arp-scan all interfaces\nint arg_whitelist = 0;\t\t\t\t// whitelist commad\nint arg_nosound = 0;\t\t\t\t// disable sound\nint arg_no3d;\t\t\t\t\t// disable 3d hardware acceleration\nint arg_quiet = 0;\t\t\t\t// no output for scripting\nint arg_join_network = 0;\t\t\t// join only the network namespace\nint arg_join_filesystem = 0;\t\t\t// join only the mount namespace\nint arg_nice = 0;\t\t\t\t// nice value configured\nint arg_ipc = 0;\t\t\t\t\t// enable ipc namespace\nint arg_writable_etc = 0;\t\t\t// writable etc\nint arg_writable_var = 0;\t\t\t// writable var\nint arg_appimage = 0;\t\t\t\t// appimage\nint arg_audit = 0;\t\t\t\t// audit\nchar *arg_audit_prog = NULL;\t\t\t// audit\nint arg_apparmor = 0;\t\t\t\t// apparmor\nint arg_allow_debuggers = 0;\t\t\t// allow debuggers\nint arg_x11_block = 0;\t\t\t\t// block X11\nint arg_x11_xorg = 0;\t\t\t\t// use X11 security extention\nint arg_allusers = 0;\t\t\t\t// all user home directories visible\n\nint login_shell = 0;\n\n\nint parent_to_child_fds[2];\nint child_to_parent_fds[2];\n\nchar *fullargv[MAX_ARGS];\t\t\t// expanded argv for restricted shell\nint fullargc = 0;\nstatic pid_t child = 0;\npid_t sandbox_pid;\n\nstatic void set_name_file(pid_t pid);\nstatic void delete_name_file(pid_t pid);\nstatic void set_x11_file(pid_t pid, int display);\nstatic void delete_x11_file(pid_t pid);\n\nvoid clear_run_files(pid_t pid) {\n\tbandwidth_del_run_file(pid);\t\t// bandwidth file\n\tnetwork_del_run_file(pid);\t\t// network map file\n\tdelete_name_file(pid);\n\tdelete_x11_file(pid);\n}\n\nstatic void myexit(int rv) {\n\tlogmsg(\"exiting...\");\n\tif (!arg_command && !arg_quiet)\n\t\tprintf(\"\\nParent is shutting down, bye...\\n\");\n\n\n\t// delete sandbox files in shared memory\n\tEUID_ROOT();\n\tclear_run_files(sandbox_pid);\n\tappimage_clear();\n\tflush_stdin();\n\texit(rv); \n}\n\nstatic void my_handler(int s){\n\tEUID_ROOT();\n\tif (!arg_quiet) {\n\t\tprintf(\"\\nParent received signal %d, shutting down the child process...\\n\", s);\n\t\tfflush(0);\n\t}\n\tlogsignal(s);\n\tkill(child, SIGTERM);\n\tmyexit(1);\n}\n\n// return 1 if error, 0 if a valid pid was found\nstatic inline int read_pid(char *str, pid_t *pid) {\n\tchar *endptr;\n\terrno = 0;\n\tlong int pidtmp = strtol(str, &endptr, 10);\n\tif ((errno == ERANGE && (pidtmp == LONG_MAX || pidtmp == LONG_MIN))\n\t\t|| (errno != 0 && pidtmp == 0)) {\n\t\treturn 1;\n\t}\n\t// endptr points to '\\0' char in str if the entire string is valid\n\tif (endptr == NULL || endptr[0]!='\\0') {\n\t\treturn 1;\n\t}\n\t*pid = (pid_t)pidtmp;\n\treturn 0;\n}\n\n// init configuration\nstatic void init_cfg(int argc, char **argv) {\n\tEUID_ASSERT();\n\tmemset(&cfg, 0, sizeof(cfg));\n\n\tcfg.original_argv = argv;\n\tcfg.original_argc = argc;\n\tcfg.bridge0.devsandbox = \"eth0\";\n\tcfg.bridge1.devsandbox = \"eth1\";\n\tcfg.bridge2.devsandbox = \"eth2\";\n\tcfg.bridge3.devsandbox = \"eth3\";\n\t\n\t// extract user data\n\tEUID_ROOT(); // rise permissions for grsecurity\n\tstruct passwd *pw = getpwuid(getuid());\n\tif (!pw)\n\t\terrExit(\"getpwuid\");\n\tEUID_USER();\n\tcfg.username = strdup(pw->pw_name);\n\tif (!cfg.username)\n\t\terrExit(\"strdup\");\n\n\t// build home directory name\n\tcfg.homedir = NULL;\n\tif (pw->pw_dir != NULL) {\n\t\tcfg.homedir = strdup(pw->pw_dir);\n\t\tif (!cfg.homedir)\n\t\t\terrExit(\"strdup\");\n\t}\n\telse {\n\t\tfprintf(stderr, \"Error: user %s doesn't have a user directory assigned\\n\", cfg.username);\n\t\texit(1);\n\t}\n\tcfg.cwd = getcwd(NULL, 0);\n\n\t// initialize random number generator\n\tsandbox_pid = getpid();\n\ttime_t t = time(NULL);\n\tsrand(t ^ sandbox_pid);\n}\n\nstatic void check_network(Bridge *br) {\n\tassert(br);\n\tif (br->macvlan == 0) // for bridge devices check network range or arp-scan and assign address\n\t\tnet_configure_sandbox_ip(br);\n\telse if (br->ipsandbox) { // for macvlan check network range\n\t\tchar *rv = in_netrange(br->ipsandbox, br->ip, br->mask);\n\t\tif (rv) {\n\t\t\tfprintf(stderr, \"%s\", rv);\n\t\t\texit(1);\n\t\t}\n\t}\n}\n\n#ifdef HAVE_USERNS\nvoid check_user_namespace(void) {\n\tEUID_ASSERT();\n\tif (getuid() == 0) {\n\t\tfprintf(stderr, \"Error: --noroot option cannot be used when starting the sandbox as root.\\n\");\n\t\texit(1);\n\t}\n\t\n\t// test user namespaces available in the kernel\n\tstruct stat s1;\n\tstruct stat s2;\n\tstruct stat s3;\n\tif (stat(\"/proc/self/ns/user\", &s1) == 0 &&\n\t    stat(\"/proc/self/uid_map\", &s2) == 0 &&\n\t    stat(\"/proc/self/gid_map\", &s3) == 0)\n\t\targ_noroot = 1;\n\telse {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: user namespaces not available in the current kernel.\\n\");\n\t\targ_noroot = 0;\n\t}\n}\n#endif\n\n\n// exit commands\nstatic void run_cmd_and_exit(int i, int argc, char **argv) {\n\tEUID_ASSERT();\n\t\n\t//*************************************\n\t// basic arguments\n\t//*************************************\n\tif (strcmp(argv[i], \"--help\") == 0 ||\n\t    strcmp(argv[i], \"-?\") == 0) {\n\t\tusage();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--version\") == 0) {\n\t\tprintf(\"firejail version %s\\n\", VERSION);\n\t\tprintf(\"\\n\");\n\t\tprint_compiletime_support();\n\t\tprintf(\"\\n\");\n\t\texit(0);\n\t}\n#ifdef HAVE_OVERLAYFS\n\telse if (strcmp(argv[i], \"--overlay-clean\") == 0) {\n\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\tchar *path;\n\t\t\tif (asprintf(&path, \"%s/.firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tEUID_ROOT();\n\t\t\tif (setreuid(0, 0) < 0)\n\t\t\t\terrExit(\"setreuid\");\n\t\t\tif (setregid(0, 0) < 0)\n\t\t\t\terrExit(\"setregid\");\n\t\t\terrno = 0;\n\t\t\tint rv = remove_directory(path);\n\t\t\tif (rv) {\n\t\t\t\tfprintf(stderr, \"Error: cannot removed overlays stored in ~/.firejail directory, errno %d\\n\", errno);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n#ifdef HAVE_X11\n\telse if (strcmp(argv[i], \"--x11\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--x11=xpra\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start_xpra(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--x11=xephyr\") == 0) {\n\t\tif (checkcfg(CFG_X11)) {\n\t\t\tx11_start_xephyr(argc, argv);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n#endif\n#ifdef HAVE_NETWORK\t\n\telse if (strncmp(argv[i], \"--bandwidth=\", 12) == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// extract the command\n\t\t\tif ((i + 1) == argc) {\n\t\t\t\tfprintf(stderr, \"Error: command expected after --bandwidth option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *cmd = argv[i + 1];\n\t\t\tif (strcmp(cmd, \"status\") && strcmp(cmd, \"clear\") && strcmp(cmd, \"set\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --bandwidth command.\\nValid commands: set, clear, status.\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\n\t\t\t// extract network name\n\t\t\tchar *dev = NULL;\n\t\t\tint down = 0;\n\t\t\tint up = 0;\n\t\t\tif (strcmp(cmd, \"set\") == 0 || strcmp(cmd, \"clear\") == 0) {\n\t\t\t\t// extract device name\n\t\t\t\tif ((i + 2) == argc) {\n\t\t\t\t\tfprintf(stderr, \"Error: network name expected after --bandwidth %s option\\n\", cmd);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tdev = argv[i + 2];\n\t\n\t\t\t\t// check device name\n\t\t\t\tif (if_nametoindex(dev) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: network device %s not found\\n\", dev);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// extract bandwidth\n\t\t\t\tif (strcmp(cmd, \"set\") == 0) {\n\t\t\t\t\tif ((i + 4) >= argc) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid --bandwidth set command\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tdown = atoi(argv[i + 3]);\n\t\t\t\t\tif (down < 0) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid download speed\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t\tup = atoi(argv[i + 4]);\n\t\t\t\t\tif (up < 0) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid upload speed\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\n\t\t\t\n\t\t\t// extract pid or sandbox name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 12, &pid) == 0)\n\t\t\t\tbandwidth_pid(pid, cmd, dev, down, up);\n\t\t\telse\n\t\t\t\tbandwidth_name(argv[i] + 12, cmd, dev, down, up);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n\t//*************************************\n\t// independent commands - the program will exit!\n\t//*************************************\n#ifdef HAVE_SECCOMP\n\telse if (strcmp(argv[i], \"--debug-syscalls\") == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\tsyscall_print();\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strcmp(argv[i], \"--debug-errnos\") == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\terrno_print();\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--seccomp.print=\", 16) == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t// print seccomp filter for a sandbox specified by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 16, &pid) == 0)\t\t\n\t\t\t\tseccomp_print_filter(pid);\n\t\t\telse\n\t\t\t\tseccomp_print_filter_name(argv[i] + 16);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--debug-protocols\") == 0) {\n\t\tprotocol_list();\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--protocol.print=\", 17) == 0) {\n\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t// print seccomp filter for a sandbox specified by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 17, &pid) == 0)\t\t\n\t\t\t\tprotocol_print_filter(pid);\n\t\t\telse\n\t\t\t\tprotocol_print_filter_name(argv[i] + 17);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--cpu.print=\", 12) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 12, &pid) == 0)\t\t\n\t\t\tcpu_print_filter(pid);\n\t\telse\n\t\t\tcpu_print_filter_name(argv[i] + 12);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--caps.print=\", 13) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 13, &pid) == 0)\t\t\n\t\t\tcaps_print_filter(pid);\n\t\telse\n\t\t\tcaps_print_filter_name(argv[i] + 13);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--fs.print=\", 11) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 11, &pid) == 0)\t\t\n\t\t\tfs_logger_print_log(pid);\n\t\telse\n\t\t\tfs_logger_print_log_name(argv[i] + 11);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--dns.print=\", 12) == 0) {\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 12, &pid) == 0)\t\t\n\t\t\tnet_dns_print(pid);\n\t\telse\n\t\t\tnet_dns_print_name(argv[i] + 12);\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--debug-caps\") == 0) {\n\t\tcaps_print();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--list\") == 0) {\n\t\tlist();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--tree\") == 0) {\n\t\ttree();\n\t\texit(0);\n\t}\n\telse if (strcmp(argv[i], \"--top\") == 0) {\n\t\ttop();\n\t\texit(0);\n\t}\n#ifdef HAVE_NETWORK\t\n\telse if (strcmp(argv[i], \"--netstats\") == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tnetstats();\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t\texit(0);\n\t}\n#endif\t\n#ifdef HAVE_FILE_TRANSFER\n\telse if (strncmp(argv[i], \"--get=\", 6) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 2) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --get option, path expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path = argv[i + 1];\n\t\t\t invalid_filename(path);\n\t\t\t if (strstr(path, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// get file\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 6, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_GET, pid, path, NULL);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_GET, argv[i] + 6, path, NULL);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --get feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strncmp(argv[i], \"--put=\", 6) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 3) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --put option, 2 paths expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path1 = argv[i + 1];\n\t\t\t invalid_filename(path1);\n\t\t\t if (strstr(path1, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path1);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\tchar *path2 = argv[i + 2];\n\t\t\t invalid_filename(path2);\n\t\t\t if (strstr(path2, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path2);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// get file\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 6, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_PUT, pid, path1, path2);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_PUT, argv[i] + 6, path1, path2);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --get feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\telse if (strncmp(argv[i], \"--ls=\", 5) == 0) {\n\t\tif (checkcfg(CFG_FILE_TRANSFER)) {\n\t\t\tlogargs(argc, argv);\n\t\t\t\n\t\t\t// verify path\n\t\t\tif ((i + 2) != argc) {\n\t\t\t\tfprintf(stderr, \"Error: invalid --ls option, path expected\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tchar *path = argv[i + 1];\n\t\t\t invalid_filename(path);\n\t\t\t if (strstr(path, \"..\")) {\n\t\t\t \tfprintf(stderr, \"Error: invalid file name %s\\n\", path);\n\t\t\t \texit(1);\n\t\t\t }\n\t\t\t \n\t\t\t// list directory contents\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 5, &pid) == 0)\t\t\n\t\t\t\tsandboxfs(SANDBOX_FS_LS, pid, path, NULL);\n\t\t\telse\n\t\t\t\tsandboxfs_name(SANDBOX_FS_LS, argv[i] + 5, path, NULL);\n\t\t\texit(0);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: --ls feature is disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--join=\", 7) == 0) {\n\t\tlogargs(argc, argv);\n\n\t\tif (arg_shell_none) {\n\t\t\tif (argc <= (i+1)) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none set, but no command specified\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcfg.original_program_index = i + 1;\n\t\t}\n\n\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\tcfg.shell = guess_shell();\n\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 7, &pid) == 0)\t\t\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\telse\n\t\t\tjoin_name(argv[i] + 7, argc, argv, i + 1);\n\t\texit(0);\n\n\t}\n\telse if (strncmp(argv[i], \"--join-or-start=\", 16) == 0) {\n\t\t// NOTE: this is first part of option handler,\n\t\t// \t\t sandbox name is set in other part\n\t\tlogargs(argc, argv);\n\n\t\tif (arg_shell_none) {\n\t\t\tif (argc <= (i+1)) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none set, but no command specified\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcfg.original_program_index = i + 1;\n\t\t}\n\n\t\t// try to join by name only\n\t\tpid_t pid;\n\t\tif (!name2pid(argv[i] + 16, &pid)) {\n\t\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\t\tcfg.shell = guess_shell();\n\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\t\texit(0);\n\t\t}\n\t\t// if there no such sandbox continue argument processing\n\t}\n#ifdef HAVE_NETWORK\t\n\telse if (strncmp(argv[i], \"--join-network=\", 15) == 0) {\n\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\tlogargs(argc, argv);\n\t\t\targ_join_network = 1;\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --join-network is only available to root user\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\t\tcfg.shell = guess_shell();\n\n\t\t\t// join sandbox by pid or by name\n\t\t\tpid_t pid;\n\t\t\tif (read_pid(argv[i] + 15, &pid) == 0)\t\t\n\t\t\t\tjoin(pid, argc, argv, i + 1);\n\t\t\telse\n\t\t\t\tjoin_name(argv[i] + 15, argc, argv, i + 1);\n\t\t}\n\t\telse {\n\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\texit(1);\n\t\t}\n\n\t\texit(0);\n\t}\n#endif\n\telse if (strncmp(argv[i], \"--join-filesystem=\", 18) == 0) {\n\t\tlogargs(argc, argv);\n\t\targ_join_filesystem = 1;\n\t\tif (getuid() != 0) {\n\t\t\tfprintf(stderr, \"Error: --join-filesystem is only available to root user\\n\");\n\t\t\texit(1);\n\t\t}\n\t\t\n\t\tif (!cfg.shell && !arg_shell_none)\n\t\t\tcfg.shell = guess_shell();\n\n\t\t// join sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 18, &pid) == 0)\t\t\n\t\t\tjoin(pid, argc, argv, i + 1);\n\t\telse\n\t\t\tjoin_name(argv[i] + 18, argc, argv, i + 1);\n\t\texit(0);\n\t}\n\telse if (strncmp(argv[i], \"--shutdown=\", 11) == 0) {\n\t\tlogargs(argc, argv);\n\t\t\n\t\t// shutdown sandbox by pid or by name\n\t\tpid_t pid;\n\t\tif (read_pid(argv[i] + 11, &pid) == 0)\n\t\t\tshut(pid);\n\t\telse\n\t\t\tshut_name(argv[i] + 11);\n\t\texit(0);\n\t}\n\n}\n\nstatic void set_name_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_NAME_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\n\t// the file is deleted first\n\tFILE *fp = fopen(fname, \"w\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"Error: cannot create %s\\n\", fname);\n\t\texit(1);\n\t}\n\tfprintf(fp, \"%s\\n\", cfg.name);\n\n\t// mode and ownership\n\tSET_PERMS_STREAM(fp, 0, 0, 0644);\n\tfclose(fp);\n}\n\nstatic void delete_name_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_NAME_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\tint rv = unlink(fname);\n\t(void) rv;\n\tfree(fname);\n}\n\nstatic void set_x11_file(pid_t pid, int display) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_X11_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\n\t// the file is deleted first\n\tFILE *fp = fopen(fname, \"w\");\n\tif (!fp) {\n\t\tfprintf(stderr, \"Error: cannot create %s\\n\", fname);\n\t\texit(1);\n\t}\n\tfprintf(fp, \"%d\\n\", display);\n\n\t// mode and ownership\n\tSET_PERMS_STREAM(fp, 0, 0, 0644);\n\tfclose(fp);\n}\n\nstatic void delete_x11_file(pid_t pid) {\n\tchar *fname;\n\tif (asprintf(&fname, \"%s/%d\", RUN_FIREJAIL_X11_DIR, pid) == -1)\n\t\terrExit(\"asprintf\");\n\tint rv = unlink(fname);\n\t(void) rv;\n\tfree(fname);\n}\n\nstatic void detect_quiet(int argc, char **argv) {\n\tint i;\n\t\n\t// detect --quiet\n\tfor (i = 1; i < argc; i++) {\n\t\tif (strcmp(argv[i], \"--quiet\") == 0) {\n\t\t\targ_quiet = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// detect end of firejail params\n\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\tbreak;\n\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\tbreak;\n\t}\n}\n\nstatic void detect_allow_debuggers(int argc, char **argv) {\n\tint i;\n\t\n\t// detect --allow-debuggers\n\tfor (i = 1; i < argc; i++) {\n\t\tif (strcmp(argv[i], \"--allow-debuggers\") == 0) {\n\t\t\t// check kernel version\n\t\t\tstruct utsname u;\n\t\t\tint rv = uname(&u);\n\t\t\tif (rv != 0)\n\t\t\t\terrExit(\"uname\");\n\t\t\tint major;\n\t\t\tint minor;\n\t\t\tif (2 != sscanf(u.release, \"%d.%d\", &major, &minor)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot extract Linux kernel version: %s\\n\", u.version);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (major < 4 || (major == 4 && minor < 8)) {\n\t\t\t\tfprintf(stderr, \"Error: --allow-debuggers is disabled on Linux kernels prior to 4.8. \"\n\t\t\t\t\t\"A bug in ptrace call allows a full bypass of the seccomp filter. \"\n\t\t\t\t\t\"Your current kernel version is %d.%d.\\n\", major, minor);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\targ_allow_debuggers = 1;\n\t\t\tbreak;\n\t\t}\n\t\t\n\t\t// detect end of firejail params\n\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\tbreak;\n\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\tbreak;\n\t}\n}\n\nchar *guess_shell(void) {\n\tchar *shell = NULL;\n\t// shells in order of preference\n\tchar *shells[] = {\"/bin/bash\", \"/bin/csh\", \"/usr/bin/zsh\", \"/bin/sh\", \"/bin/ash\", NULL };\n\n\tint i = 0;\n\twhile (shells[i] != NULL) {\n\t\tstruct stat s;\n\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\tif (stat(shells[i], &s) == 0 && access(shells[i], R_OK) == 0) {\n\t\t\tshell = shells[i];\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\n\treturn shell;\n}\n\n//*******************************************\n// Main program\n//*******************************************\nint main(int argc, char **argv) {\n\tint i;\n\tint prog_index = -1;\t\t\t  // index in argv where the program command starts\n\tint lockfd = -1;\n\tint option_cgroup = 0;\n\tint option_force = 0;\n\tint custom_profile = 0;\t// custom profile loaded\n\tchar *custom_profile_dir = NULL; // custom profile directory\n\tint arg_noprofile = 0; // use default.profile if none other found/specified\n#ifdef HAVE_SECCOMP\n\tint highest_errno = errno_highest_nr();\n#endif\n\n\tdetect_quiet(argc, argv);\n\tdetect_allow_debuggers(argc, argv);\n\n\t// drop permissions by default and rise them when required\n\tEUID_INIT();\n\tEUID_USER();\n\n\n\t// check argv[0] symlink wrapper if this is not a login shell\n\tif (*argv[0] != '-')\n\t\trun_symlink(argc, argv);\n\n\t// check if we already have a sandbox running\n\t// If LXC is detected, start firejail sandbox\n\t// otherwise try to detect a PID namespace by looking under /proc for specific kernel processes and:\n\t//\t- if --force flag is set, start firejail sandbox\n\t//\t-- if --force flag is not set, start the application in a /bin/bash shell \n\tif (check_namespace_virt() == 0) {\n\t\tEUID_ROOT();\n\t\tint rv = check_kernel_procs();\n\t\tEUID_USER();\n\t\tif (rv == 0) {\n\t\t\t// if --force option is passed to the program, disregard the existing sandbox\n\t\t\tint found = 0;\n\t\t\tfor (i = 1; i < argc; i++) {\n\t\t\t\tif (strcmp(argv[i], \"--force\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--list\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--netstats\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--tree\") == 0 ||\t\n\t\t\t\t    strcmp(argv[i], \"--top\") == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--ls=\", 5) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--get=\", 6) == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-caps\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-errnos\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-syscalls\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--debug-protocols\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--help\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--version\") == 0 ||\n\t\t\t\t    strcmp(argv[i], \"--overlay-clean\") == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--dns.print=\", 12) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--bandwidth=\", 12) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--caps.print=\", 13) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--cpu.print=\", 12) == 0 ||\n\t//********************************************************************************\n\t// todo: fix the following problems\n\t\t\t\t    strncmp(argv[i], \"--join=\", 7) == 0 ||\n\t//[netblue@debian Downloads]$ firejail --join=896\n\t//Switching to pid 897, the first child process inside the sandbox\n\t//Error: seccomp file not found\n\t//********************************************************************************\n\t\n\t\t\t\t    strncmp(argv[i], \"--join-filesystem=\", 18) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--join-network=\", 15) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--fs.print=\", 11) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--protocol.print=\", 17) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--seccomp.print\", 15) == 0 ||\n\t\t\t\t    strncmp(argv[i], \"--shutdown=\", 11) == 0) {\n\t\t\t\t\tfound = 1;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\n\t\t\t\t// detect end of firejail params\n\t\t\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\t\t\tbreak;\n\t\t\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\tif (found == 0) {\n\t\t\t\t// start the program directly without sandboxing\n\t\t\t\trun_no_sandbox(argc, argv);\n\t\t\t\t// it will never get here!\n\t\t\t\tassert(0);\n\t\t\t}\n\t\t\telse\n\t\t\t\toption_force = 1;\n\t\t}\n\t}\n\t\n\t// check root/suid\n\tEUID_ROOT();\n\tif (geteuid()) {\n\t\t// detect --version\n\t\tfor (i = 1; i < argc; i++) {\n\t\t\tif (strcmp(argv[i], \"--version\") == 0) {\n\t\t\t\tprintf(\"firejail version %s\\n\", VERSION);\n\t\t\t\texit(0);\n\t\t\t}\n\t\t\t\n\t\t\t// detect end of firejail params\n\t\t\tif (strcmp(argv[i], \"--\") == 0)\n\t\t\t\tbreak;\n\t\t\tif (strncmp(argv[i], \"--\", 2) != 0)\n\t\t\t\tbreak;\n\t\t}\n\t\texit(1);\n\t}\n\tEUID_USER();\n\n\t// initialize globals\n\tinit_cfg(argc, argv);\n\n\n\t// check firejail directories\n\tEUID_ROOT();\n\tfs_build_firejail_dir();\n\tbandwidth_del_run_file(sandbox_pid);\n\tnetwork_del_run_file(sandbox_pid);\n\tdelete_name_file(sandbox_pid);\n\tdelete_x11_file(sandbox_pid);\n\t\n\tEUID_USER();\n\t\n\t//check if the parent is sshd daemon\n\tint parent_sshd = 0;\n\t{\n\t\tpid_t ppid = getppid();\n\t\tEUID_ROOT();\n\t\tchar *comm = pid_proc_comm(ppid);\n\t\tEUID_USER();\n\t\tif (comm) {\n\t\t\tif (strcmp(comm, \"sshd\") == 0) {\n\t\t\t\targ_quiet = 1;\n\t\t\t\tparent_sshd = 1;\n\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t\t{EUID_ROOT();\n\t\t\t\tFILE *fp = fopen(\"/firelog\", \"w\");\n\t\t\t\tif (fp) {\n\t\t\t\t\tint i;\n\t\t\t\t\tfprintf(fp, \"argc %d: \", argc);\n\t\t\t\t\tfor (i = 0; i < argc; i++)\n\t\t\t\t\t\tfprintf(fp, \"#%s# \", argv[i]);\n\t\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\t\tfclose(fp);\n\t\t\t\t}\n\t\t\t\tEUID_USER();}\n#endif\n\t\t\t\t// run sftp and scp directly without any sandboxing\n\t\t\t\t// regular login has argv[0] == \"-firejail\"\n\t\t\t\tif (*argv[0] != '-') {\n\t\t\t\t\tif (strcmp(argv[1], \"-c\") == 0 && argc > 2) {\n\t\t\t\t\t\tif (strcmp(argv[2], \"/usr/lib/openssh/sftp-server\") == 0 ||\n\t\t\t\t\t\t    strncmp(argv[2], \"scp \", 4) == 0) {\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t\t\t\t\t{EUID_ROOT();\n\t\t\t\t\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\t\t\t\t\tif (fp) {\n\t\t\t\t\t\t\t\tfprintf(fp, \"run without a sandbox\\n\");\n\t\t\t\t\t\t\t\tfclose(fp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tEUID_USER();}\n#endif\n\t\t\t\t\t\t    \n\t\t\t\t\t\t    \tdrop_privs(1);\n\t\t\t\t\t\t    \tint rv = system(argv[2]);\n\t\t\t\t\t\t    \texit(rv);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree(comm);\n\t\t}\n\t}\n\t\n\t// is this a login shell, or a command passed by sshd, insert command line options from /etc/firejail/login.users\n\tif (*argv[0] == '-' || parent_sshd) {\n\t\tif (argc == 1)\n\t\t\tlogin_shell = 1;\n\t\tfullargc = restricted_shell(cfg.username);\n\t\tif (fullargc) {\n\t\t\t\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t{EUID_ROOT();\n\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"fullargc %d: \",  fullargc);\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < fullargc; i++)\n\t\t\t\t\tfprintf(fp, \"#%s# \", fullargv[i]);\n\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\tfclose(fp);\n\t\t\t}\n\t\t\tEUID_USER();}\n#endif\n\t\t\t\n\t\t\tint j;\n\t\t\tfor (i = 1, j = fullargc; i < argc && j < MAX_ARGS; i++, j++, fullargc++)\n\t\t\t\tfullargv[j] = argv[i];\n\n\t\t\t// replace argc/argv with fullargc/fullargv\n\t\t\targv = fullargv;\n\t\t\targc = j;\n\n#ifdef DEBUG_RESTRICTED_SHELL\n\t\t\t{EUID_ROOT();\n\t\t\tFILE *fp = fopen(\"/firelog\", \"a\");\n\t\t\tif (fp) {\n\t\t\t\tfprintf(fp, \"argc %d: \", argc);\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < argc; i++)\n\t\t\t\t\tfprintf(fp, \"#%s# \", argv[i]);\n\t\t\t\tfprintf(fp, \"\\n\");\n\t\t\t\tfclose(fp);\n\t\t\t}\n\t\t\tEUID_USER();}\n#endif\n\t\t}\n\t}\n\telse {\n\t\t// check --output option and execute it;\n\t\tcheck_output(argc, argv); // the function will not return if --output option was found\n\t}\n\t\n\t\n\t// check for force-nonewprivs in /etc/firejail/firejail.config file\n\tif (checkcfg(CFG_FORCE_NONEWPRIVS))\n\t\targ_nonewprivs = 1;\n\t\n\tif (arg_allow_debuggers) {\n\t\tchar *cmd = strdup(\"noblacklist ${PATH}/strace\");\n\t\tif (!cmd)\n\t\t\terrExit(\"strdup\");\n\t\tprofile_add(cmd);\n\t}\n\t\n\t// parse arguments\n\tfor (i = 1; i < argc; i++) {\n\t\trun_cmd_and_exit(i, argc, argv); // will exit if the command is recognized\n\t\t\n\t\tif (strcmp(argv[i], \"--debug\") == 0) {\n\t\t\tif (!arg_quiet) {\n\t\t\t\targ_debug = 1;\n\t\t\t\tif (option_force)\n\t\t\t\t\tprintf(\"Entering sandbox-in-sandbox mode\\n\");\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--debug-check-filename\") == 0)\n\t\t\targ_debug_check_filename = 1;\n\t\telse if (strcmp(argv[i], \"--debug-blacklists\") == 0)\n\t\t\targ_debug_blacklists = 1;\n\t\telse if (strcmp(argv[i], \"--debug-whitelists\") == 0)\n\t\t\targ_debug_whitelists = 1;\n\t\telse if (strcmp(argv[i], \"--quiet\") == 0) {\n\t\t\targ_quiet = 1;\n\t\t\targ_debug = 0;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--force\") == 0)\n\t\t\t;\n\t\telse if (strcmp(argv[i], \"--allow-debuggers\") == 0) {\n\t\t\t// already handled\n\t\t}\n\n\t\t//*************************************\n\t\t// filtering\n\t\t//*************************************\n#ifdef HAVE_APPARMOR\n\t\telse if (strcmp(argv[i], \"--apparmor\") == 0)\n\t\t\targ_apparmor = 1;\n#endif\t\n#ifdef HAVE_SECCOMP\n\t\telse if (strncmp(argv[i], \"--protocol=\", 11) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tprotocol_store(argv[i] + 11);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--seccomp\") == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp=\", 10) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list = strdup(argv[i] + 10);\n\t\t\t\tif (!cfg.seccomp_list)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.drop=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_drop = strdup(argv[i] + 15);\n\t\t\t\tif (!cfg.seccomp_list_drop)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.keep=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_keep = strdup(argv[i] + 15);\n\t\t\t\tif (!cfg.seccomp_list_keep)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--seccomp.e\", 11) == 0 && strchr(argv[i], '=')) {\n\t\t\tif (checkcfg(CFG_SECCOMP)) {\n\t\t\t\tif (arg_seccomp && !cfg.seccomp_list_errno) {\n\t\t\t\t\tfprintf(stderr, \"Error: seccomp already enabled\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tchar *eq = strchr(argv[i], '=');\n\t\t\t\tchar *errnoname = strndup(argv[i] + 10, eq - (argv[i] + 10));\n\t\t\t\tint nr = errno_find_name(errnoname);\n\t\t\t\tif (nr == -1) {\n\t\t\t\t\tfprintf(stderr, \"Error: unknown errno %s\\n\", errnoname);\n\t\t\t\t\tfree(errnoname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tif (!cfg.seccomp_list_errno)\n\t\t\t\t\tcfg.seccomp_list_errno = calloc(highest_errno+1, sizeof(cfg.seccomp_list_errno[0]));\n\t\n\t\t\t\tif (cfg.seccomp_list_errno[nr]) {\n\t\t\t\t\tfprintf(stderr, \"Error: errno %s already configured\\n\", errnoname);\n\t\t\t\t\tfree(errnoname);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_seccomp = 1;\n\t\t\t\tcfg.seccomp_list_errno[nr] = strdup(eq+1);\n\t\t\t\tif (!cfg.seccomp_list_errno[nr])\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tfree(errnoname);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: seccomp feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strcmp(argv[i], \"--caps\") == 0)\n\t\t\targ_caps_default_filter = 1;\n\t\telse if (strcmp(argv[i], \"--caps.drop=all\") == 0)\n\t\t\targ_caps_drop_all = 1;\n\t\telse if (strncmp(argv[i], \"--caps.drop=\", 12) == 0) {\n\t\t\targ_caps_drop = 1;\n\t\t\targ_caps_list = strdup(argv[i] + 12);\n\t\t\tif (!arg_caps_list)\n\t\t\t\terrExit(\"strdup\");\n\t\t\t// verify caps list and exit if problems\n\t\t\tif (caps_check_list(arg_caps_list, NULL))\n\t\t\t\treturn 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--caps.keep=\", 12) == 0) {\n\t\t\targ_caps_keep = 1;\n\t\t\targ_caps_list = strdup(argv[i] + 12);\n\t\t\tif (!arg_caps_list)\n\t\t\t\terrExit(\"strdup\");\n\t\t\t// verify caps list and exit if problems\n\t\t\tif (caps_check_list(arg_caps_list, NULL))\n\t\t\t\treturn 1;\n\t\t}\n\n\n\t\telse if (strcmp(argv[i], \"--trace\") == 0)\n\t\t\targ_trace = 1;\n\t\telse if (strcmp(argv[i], \"--tracelog\") == 0)\n\t\t\targ_tracelog = 1;\n\t\telse if (strncmp(argv[i], \"--rlimit-nofile=\", 16) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 16)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt nofile\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 16, \"%u\", &cfg.rlimit_nofile);\n\t\t\targ_rlimit_nofile = 1;\n\t\t}\t\t\n\t\telse if (strncmp(argv[i], \"--rlimit-nproc=\", 15) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 15)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt nproc\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 15, \"%u\", &cfg.rlimit_nproc);\n\t\t\targ_rlimit_nproc = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--rlimit-fsize=\", 15) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 15)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt fsize\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 15, \"%u\", &cfg.rlimit_fsize);\n\t\t\targ_rlimit_fsize = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--rlimit-sigpending=\", 20) == 0) {\n\t\t\tif (not_unsigned(argv[i] + 20)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid rlimt sigpending\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tsscanf(argv[i] + 20, \"%u\", &cfg.rlimit_sigpending);\n\t\t\targ_rlimit_sigpending = 1;\n\t\t}\t\n\t\telse if (strncmp(argv[i], \"--ipc-namespace\", 15) == 0)\n\t\t\targ_ipc = 1;\n\t\telse if (strncmp(argv[i], \"--cpu=\", 6) == 0)\n\t\t\tread_cpu_list(argv[i] + 6);\n\t\telse if (strncmp(argv[i], \"--nice=\", 7) == 0) {\n\t\t\tcfg.nice = atoi(argv[i] + 7);\n\t\t\tif (getuid() != 0 &&cfg.nice < 0)\n\t\t\t\tcfg.nice = 0;\n\t\t\targ_nice = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--cgroup=\", 9) == 0) {\n\t\t\tif (option_cgroup) {\n\t\t\t\tfprintf(stderr, \"Error: only a cgroup can be defined\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\toption_cgroup = 1;\n\t\t\tcfg.cgroup = strdup(argv[i] + 9);\n\t\t\tif (!cfg.cgroup)\n\t\t\t\terrExit(\"strdup\");\n\t\t\tset_cgroup(cfg.cgroup);\n\t\t}\n\t\t\n\t\t//*************************************\n\t\t// filesystem\n\t\t//*************************************\n\t\telse if (strcmp(argv[i], \"--allusers\") == 0)\n\t\t\targ_allusers = 1;\n#ifdef HAVE_BIND\t\t\n\t\telse if (strncmp(argv[i], \"--bind=\", 7) == 0) {\n\t\t\tif (checkcfg(CFG_BIND)) {\n\t\t\t\tchar *line;\n\t\t\t\tif (asprintf(&line, \"bind %s\", argv[i] + 7) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\n\t\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\t\tprofile_add(line);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --bind feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--tmpfs=\", 8) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"tmpfs %s\", argv[i] + 8) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--blacklist=\", 12) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"blacklist %s\", argv[i] + 12) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--noblacklist=\", 14) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"noblacklist %s\", argv[i] + 14) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\n#ifdef HAVE_WHITELIST\n\t\telse if (strncmp(argv[i], \"--whitelist=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_WHITELIST)) {\n\t\t\t\tchar *line;\n\t\t\t\tif (asprintf(&line, \"whitelist %s\", argv[i] + 12) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\t\n\t\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\t\tprofile_add(line);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: whitelist feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\n\t\telse if (strncmp(argv[i], \"--read-only=\", 12) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"read-only %s\", argv[i] + 12) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--noexec=\", 9) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"noexec %s\", argv[i] + 9) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--read-write=\", 13) == 0) {\n\t\t\tchar *line;\n\t\t\tif (asprintf(&line, \"read-write %s\", argv[i] + 13) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\t\n\t\t\tprofile_check_line(line, 0, NULL);\t// will exit if something wrong\n\t\t\tprofile_add(line);\n\t\t}\n#ifdef HAVE_OVERLAYFS\n\t\telse if (strcmp(argv[i], \"--overlay\") == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\t\n\t\t\t\tchar *subdirname;\n\t\t\t\tif (asprintf(&subdirname, \"%d\", getpid()) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tcfg.overlay_dir = fs_check_overlay_dir(subdirname, arg_overlay_reuse);\n\t\n\t\t\t\tfree(subdirname);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--overlay-named=\", 16) == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\targ_overlay_reuse = 1;\n\t\t\t\t\n\t\t\t\tchar *subdirname = argv[i] + 16;\n\t\t\t\tif (subdirname == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay option\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// check name\n\t\t\t\tinvalid_filename(subdirname);\n\t\t\t\tif (strstr(subdirname, \"..\") || strstr(subdirname, \"/\")) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay name\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tcfg.overlay_dir = fs_check_overlay_dir(subdirname, arg_overlay_reuse);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t}\n#if 0 // disabled for now, it could be used to overwrite system directories\t\n\t\telse if (strncmp(argv[i], \"--overlay-path=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t\targ_overlay_keep = 1;\n\t\t\t\targ_overlay_reuse = 1;\n\t\t\t\t\n\t\t\t\tchar *dirname = argv[i] + 15;\n\t\t\t\tif (dirname == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid overlay option\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tcfg.overlay_dir = expand_home(dirname, cfg.homedir);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--overlay-tmpfs\") == 0) {\n\t\t\tif (checkcfg(CFG_OVERLAYFS)) {\n\t\t\t\tif (cfg.chrootdir) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\targ_overlay = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: overlayfs feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--profile=\", 10) == 0) {\n\t\t\tif (arg_noprofile) {\n\t\t\t\tfprintf(stderr, \"Error: --noprofile and --profile options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tchar *ppath = expand_home(argv[i] + 10, cfg.homedir);\n\t\t\tif (!ppath)\n\t\t\t\terrExit(\"strdup\");\n\t\t\tinvalid_filename(ppath);\n\t\t\t\n\t\t\t// multiple profile files are allowed!\n\t\t\tif (is_dir(ppath) || is_link(ppath) || strstr(ppath, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid profile file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif (access(ppath, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access profile file\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tprofile_read(ppath);\n\t\t\tcustom_profile = 1;\n\t\t\tfree(ppath);\n\t\t}\n\t\telse if (strncmp(argv[i], \"--profile-path=\", 15) == 0) {\n\t\t\tif (arg_noprofile) {\n\t\t\t\tfprintf(stderr, \"Error: --noprofile and --profile-path options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tcustom_profile_dir = expand_home(argv[i] + 15, cfg.homedir);\n\t\t\tinvalid_filename(custom_profile_dir);\n\t\t\tif (!is_dir(custom_profile_dir) || is_link(custom_profile_dir) || strstr(custom_profile_dir, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid profile path\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif (access(custom_profile_dir, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access profile directory\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--noprofile\") == 0) {\n\t\t\tif (custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: --profile and --noprofile options are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_noprofile = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--ignore=\", 9) == 0) {\n\t\t\tif (custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: please use --profile after --ignore\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\tif (*(argv[i] + 9) == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid ignore option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// find an empty entry in profile_ignore array\n\t\t\tint j;\n\t\t\tfor (j = 0; j < MAX_PROFILE_IGNORE; j++) {\n\t\t\t\tif (cfg.profile_ignore[j] == NULL) \n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (j >= MAX_PROFILE_IGNORE) {\n\t\t\t\tfprintf(stderr, \"Error: maximum %d --ignore options are permitted\\n\", MAX_PROFILE_IGNORE);\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t// ... and configure it\n\t\t\telse\n\t\t\t\tcfg.profile_ignore[j] = argv[i] + 9;\n\t\t}\n#ifdef HAVE_CHROOT\t\t\n\t\telse if (strncmp(argv[i], \"--chroot=\", 9) == 0) {\n\t\t\tif (checkcfg(CFG_CHROOT)) {\n\t\t\t\tif (arg_overlay) {\n\t\t\t\t\tfprintf(stderr, \"Error: --overlay and --chroot options are mutually exclusive\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tstruct stat s;\n\t\t\t\tif (stat(\"/proc/sys/kernel/grsecurity\", &s) == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --chroot option is not available on Grsecurity systems\\n\");\n\t\t\t\t\texit(1);\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tinvalid_filename(argv[i] + 9);\n\t\t\t\t\n\t\t\t\t// extract chroot dirname\n\t\t\t\tcfg.chrootdir = argv[i] + 9;\n\t\t\t\t// if the directory starts with ~, expand the home directory\n\t\t\t\tif (*cfg.chrootdir == '~') {\n\t\t\t\t\tchar *tmp;\n\t\t\t\t\tif (asprintf(&tmp, \"%s%s\", cfg.homedir, cfg.chrootdir + 1) == -1)\n\t\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\t\tcfg.chrootdir = tmp;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// check chroot dirname exists\n\t\t\t\tif (strstr(cfg.chrootdir, \"..\") || !is_dir(cfg.chrootdir) || is_link(cfg.chrootdir)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid directory %s\\n\", cfg.chrootdir);\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// don't allow \"--chroot=/\"\n\t\t\t\tchar *rpath = realpath(cfg.chrootdir, NULL);\n\t\t\t\tif (rpath == NULL || strcmp(rpath, \"/\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid chroot directory\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tfree(rpath);\n\t\t\t\t\n\t\t\t\t// check chroot directory structure\n\t\t\t\tif (fs_check_chroot_dir(cfg.chrootdir)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid chroot\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --chroot feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--writable-etc\") == 0) {\n\t\t\tif (cfg.etc_private_keep) {\n\t\t\t\tfprintf(stderr, \"Error: --private-etc and --writable-etc are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_writable_etc = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--writable-var\") == 0) {\n\t\t\targ_writable_var = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--private\") == 0) {\n\t\t\targ_private = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private=\", 10) == 0) {\n\t\t\tif (cfg.home_private_keep) {\n\t\t\t\tfprintf(stderr, \"Error: a private list of files was already defined with --private-home option.\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t// extract private home dirname\n\t\t\tcfg.home_private = argv[i] + 10;\n\t\t\tif (*cfg.home_private == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tfs_check_private_dir();\n\n\t\t\t// downgrade to --private if the directory is the user home directory\n\t\t\tif (strcmp(cfg.home_private, cfg.homedir) == 0) {\n\t\t\t\tfree(cfg.home_private);\n\t\t\t\tcfg.home_private = NULL;\n\t\t\t}\n\t\t\targ_private = 1;\n\t\t}\n#ifdef HAVE_PRIVATE_HOME\n\t\telse if (strncmp(argv[i], \"--private-home=\", 15) == 0) {\n\t\t\tif (checkcfg(CFG_PRIVATE_HOME)) {\n\t\t\t\tif (cfg.home_private) {\n\t\t\t\t\tfprintf(stderr, \"Error: a private home directory was already defined with --private option.\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// extract private home dirname\n\t\t\t\tcfg.home_private_keep = argv[i] + 15;\n\t\t\t\tfs_check_home_list();\n\t\t\t\targ_private = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --private-home feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strcmp(argv[i], \"--private-dev\") == 0) {\n\t\t\targ_private_dev = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private-etc=\", 14) == 0) {\n\t\t\tif (arg_writable_etc) {\n\t\t\t\tfprintf(stderr, \"Error: --private-etc and --writable-etc are mutually exclusive\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\t// extract private etc list\n\t\t\tcfg.etc_private_keep = argv[i] + 14;\n\t\t\tif (*cfg.etc_private_keep == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private-etc option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tfs_check_etc_list();\n\t\t\targ_private_etc = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--private-bin=\", 14) == 0) {\n\t\t\t// extract private bin list\n\t\t\tcfg.bin_private_keep = argv[i] + 14;\n\t\t\tif (*cfg.bin_private_keep == '\\0') {\n\t\t\t\tfprintf(stderr, \"Error: invalid private-bin option\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_private_bin = 1;\n\t\t\tfs_check_bin_list();\n\t\t}\n\t\telse if (strcmp(argv[i], \"--private-tmp\") == 0) {\n\t\t\targ_private_tmp = 1;\n\t\t}\n\n\t\t//*************************************\n\t\t// hostname, etc\n\t\t//*************************************\n\t\telse if (strncmp(argv[i], \"--name=\", 7) == 0) {\n\t\t\tcfg.name = argv[i] + 7;\n\t\t\tif (strlen(cfg.name) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a name for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--hostname=\", 11) == 0) {\n\t\t\tcfg.hostname = argv[i] + 11;\n\t\t\tif (strlen(cfg.hostname) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a hostname for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--nogroups\") == 0)\n\t\t\targ_nogroups = 1;\n#ifdef HAVE_USERNS\n\t\telse if (strcmp(argv[i], \"--noroot\") == 0) {\n\t\t\tif (checkcfg(CFG_USERNS))\n\t\t\t\tcheck_user_namespace();\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --noroot feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strcmp(argv[i], \"--nonewprivs\") == 0) {\n\t\t\targ_nonewprivs = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--env=\", 6) == 0)\n\t\t\tenv_store(argv[i] + 6, SETENV);\n\t\telse if (strncmp(argv[i], \"--rmenv=\", 8) == 0)\n\t\t\tenv_store(argv[i] + 8, RMENV);\n\t\telse if (strcmp(argv[i], \"--nosound\") == 0) {\n\t\t\targ_nosound = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--no3d\") == 0) {\n\t\t\targ_no3d = 1;\n\t\t}\n\t\t\t\t\n\t\t//*************************************\n\t\t// network\n\t\t//*************************************\n#ifdef HAVE_NETWORK\t\n\t\telse if (strncmp(argv[i], \"--interface=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t\t// compile time restricted networking\n\t\t\t\tif (getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --interface is allowed only to root user\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n#endif\n\t\t\t\t// run time restricted networking\n\t\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: --interface is allowed only to root user\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\n\t\t\t\t// checks\n\t\t\t\tif (arg_nonetwork) {\n\t\t\t\t\tfprintf(stderr, \"Error: --network=none and --interface are incompatible\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (strcmp(argv[i] + 12, \"lo\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot use lo device in --interface command\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tint ifindex = if_nametoindex(argv[i] + 12);\n\t\t\t\tif (ifindex <= 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot find interface %s\\n\", argv[i] + 12);\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tInterface *intf;\n\t\t\t\tif (cfg.interface0.configured == 0)\n\t\t\t\t\tintf = &cfg.interface0;\n\t\t\t\telse if (cfg.interface1.configured == 0)\n\t\t\t\t\tintf = &cfg.interface1;\n\t\t\t\telse if (cfg.interface2.configured == 0)\n\t\t\t\t\tintf = &cfg.interface2;\n\t\t\t\telse if (cfg.interface3.configured == 0)\n\t\t\t\t\tintf = &cfg.interface3;\n\t\t\t\telse {\n\t\t\t\t\tfprintf(stderr, \"Error: maximum 4 interfaces are allowed\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tintf->dev = strdup(argv[i] + 12);\n\t\t\t\tif (!intf->dev)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\t\n\t\t\t\tif (net_get_if_addr(intf->dev, &intf->ip, &intf->mask, intf->mac, &intf->mtu)) {\n\t\t\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\t\t\tfprintf(stderr, \"Warning:  interface %s is not configured\\n\", intf->dev);\n\t\t\t\t}\n\t\t\t\tintf->configured = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--net=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tif (strcmp(argv[i] + 6, \"none\") == 0) {\n\t\t\t\t\targ_nonetwork  = 1;\n\t\t\t\t\tcfg.bridge0.configured = 0;\n\t\t\t\t\tcfg.bridge1.configured = 0;\n\t\t\t\t\tcfg.bridge2.configured = 0;\n\t\t\t\t\tcfg.bridge3.configured = 0;\n\t\t\t\t\tcfg.interface0.configured = 0;\n\t\t\t\t\tcfg.interface1.configured = 0;\n\t\t\t\t\tcfg.interface2.configured = 0;\n\t\t\t\t\tcfg.interface3.configured = 0;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t\t// compile time restricted networking\n\t\t\t\tif (getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: only --net=none is allowed to non-root users\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n#endif\n\t\t\t\t// run time restricted networking\n\t\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: only --net=none is allowed to non-root users\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (strcmp(argv[i] + 6, \"lo\") == 0) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot attach to lo device\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tBridge *br;\n\t\t\t\tif (cfg.bridge0.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge0;\n\t\t\t\telse if (cfg.bridge1.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge1;\n\t\t\t\telse if (cfg.bridge2.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge2;\n\t\t\t\telse if (cfg.bridge3.configured == 0)\n\t\t\t\t\tbr = &cfg.bridge3;\n\t\t\t\telse {\n\t\t\t\t\tfprintf(stderr, \"Error: maximum 4 network devices are allowed\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tnet_configure_bridge(br, argv[i] + 6);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--veth-name=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tbr->veth_name = strdup(argv[i] + 12);\n\t\t\t\tif (br->veth_name == NULL)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t\tif (*br->veth_name == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: no veth-name configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strcmp(argv[i], \"--scan\") == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_scan = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--iprange=\", 10) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (br->iprange_start || br->iprange_end) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP range twice for the same interface\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// parse option arguments\n\t\t\t\tchar *firstip = argv[i] + 10;\n\t\t\t\tchar *secondip = firstip;\n\t\t\t\twhile (*secondip != '\\0') {\n\t\t\t\t\tif (*secondip == ',')\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tsecondip++;\n\t\t\t\t}\n\t\t\t\tif (*secondip == '\\0') {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\t*secondip = '\\0';\n\t\t\t\tsecondip++;\n\t\t\t\t\n\t\t\t\t// check addresses\n\t\t\t\tif (atoip(firstip, &br->iprange_start) || atoip(secondip, &br->iprange_end) ||\n\t\t\t\t    br->iprange_start >= br->iprange_end) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\tif (in_netrange(br->iprange_start, br->ip, br->mask) || in_netrange(br->iprange_end, br->ip, br->mask)) {\n\t\t\t\t\tfprintf(stderr, \"Error: IP range addresses not in network range\\n\");\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--mac=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (mac_not_zero(br->macsandbox)) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the MAC address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// read the address\n\t\t\t\tif (atomac(argv[i] + 6, br->macsandbox)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid MAC address\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--mtu=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\tif (sscanf(argv[i] + 6, \"%d\", &br->mtu) != 1 || br->mtu < 576 || br->mtu > 9198) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid mtu value\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--ip=\", 5) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (br->arg_ip_none || br->ipsandbox) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// configure this IP address for the last bridge defined\n\t\t\t\tif (strcmp(argv[i] + 5, \"none\") == 0)\n\t\t\t\t\tbr->arg_ip_none = 1;\n\t\t\t\telse {\n\t\t\t\t\tif (atoip(argv[i] + 5, &br->ipsandbox)) {\n\t\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n\t\t\t\t\t\texit(1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--ip6=\", 6) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tBridge *br = last_bridge_configured();\n\t\t\t\tif (br == NULL) {\n\t\t\t\t\tfprintf(stderr, \"Error: no network device configured\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tif (br->arg_ip_none || br->ip6sandbox) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot configure the IP address twice for the same interface\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\n\t\t\t\t// configure this IP address for the last bridge defined\n\t\t\t\t// todo: verify ipv6 syntax\n\t\t\t\tbr->ip6sandbox = argv[i] + 6;\n//\t\t\t\tif (atoip(argv[i] + 5, &br->ipsandbox)) {\n//\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n//\t\t\t\t\texit(1);\n//\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\n\t\telse if (strncmp(argv[i], \"--defaultgw=\", 12) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\tif (atoip(argv[i] + 12, &cfg.defaultgw)) {\n\t\t\t\t\tfprintf(stderr, \"Error: invalid IP address\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\t\t\n\t\telse if (strncmp(argv[i], \"--dns=\", 6) == 0) {\n\t\t\tuint32_t dns;\n\t\t\tif (atoip(argv[i] + 6, &dns)) {\n\t\t\t\tfprintf(stderr, \"Error: invalid DNS server IP address\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t\n\t\t\tif (cfg.dns1 == 0)\n\t\t\t\tcfg.dns1 = dns;\n\t\t\telse if (cfg.dns2 == 0)\n\t\t\t\tcfg.dns2 = dns;\n\t\t\telse if (cfg.dns3 == 0)\n\t\t\t\tcfg.dns3 = dns;\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: up to 3 DNS servers can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\n#ifdef HAVE_NETWORK\n\t\telse if (strcmp(argv[i], \"--netfilter\") == 0) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t// compile time restricted networking\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n#endif\n\t\t\t// run time restricted networking\n\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter = 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--netfilter=\", 12) == 0) {\n#ifdef HAVE_NETWORK_RESTRICTED\n\t\t\t// compile time restricted networking\n\t\t\tif (getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n#endif\n\t\t\t// run time restricted networking\n\t\t\tif (checkcfg(CFG_RESTRICTED_NETWORK) && getuid() != 0) {\n\t\t\t\tfprintf(stderr, \"Error: --netfilter is only allowed for root\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter = 1;\n\t\t\t\targ_netfilter_file = argv[i] + 12;\n\t\t\t\tcheck_netfilter_file(arg_netfilter_file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\n\t\telse if (strncmp(argv[i], \"--netfilter6=\", 13) == 0) {\n\t\t\tif (checkcfg(CFG_NETWORK)) {\n\t\t\t\targ_netfilter6 = 1;\n\t\t\t\targ_netfilter6_file = argv[i] + 13;\n\t\t\t\tcheck_netfilter_file(arg_netfilter6_file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: networking features are disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\t//*************************************\n\t\t// command\n\t\t//*************************************\n\t\telse if (strcmp(argv[i], \"--audit\") == 0) {\n\t\t\tif (asprintf(&arg_audit_prog, \"%s/firejail/faudit\", LIBDIR) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\targ_audit = 1;\n\t\t}\n\t\telse if (strncmp(argv[i], \"--audit=\", 8) == 0) {\n\t\t\tif (strlen(argv[i] + 8) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: invalid audit program\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\targ_audit_prog = strdup(argv[i] + 8);\n\t\t\tif (!arg_audit_prog)\n\t\t\t\terrExit(\"strdup\");\n\t\t\targ_audit = 1;\n\t\t}\n\t\telse if (strcmp(argv[i], \"--appimage\") == 0)\n\t\t\targ_appimage = 1;\n\t\telse if (strcmp(argv[i], \"--csh\") == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one default user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = \"/bin/csh\";\n\t\t}\n\t\telse if (strcmp(argv[i], \"--zsh\") == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one default user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = \"/bin/zsh\";\n\t\t}\n\t\telse if (strcmp(argv[i], \"--shell=none\") == 0) {\n\t\t\targ_shell_none = 1;\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: a shell was already specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strncmp(argv[i], \"--shell=\", 8) == 0) {\n\t\t\tif (arg_shell_none) {\n\t\t\t\tfprintf(stderr, \"Error: --shell=none was already specified.\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tinvalid_filename(argv[i] + 8);\n\t\t\t\n\t\t\tif (cfg.shell) {\n\t\t\t\tfprintf(stderr, \"Error: only one user shell can be specified\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tcfg.shell = argv[i] + 8;\n\n\t\t\tif (is_dir(cfg.shell) || strstr(cfg.shell, \"..\")) {\n\t\t\t\tfprintf(stderr, \"Error: invalid shell\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\n\t\t\t// access call checks as real UID/GID, not as effective UID/GID\n\t\t\tif(cfg.chrootdir) {\n\t\t\t\tchar *shellpath;\n\t\t\t\tif (asprintf(&shellpath, \"%s%s\", cfg.chrootdir, cfg.shell) == -1)\n\t\t\t\t\terrExit(\"asprintf\");\n\t\t\t\tif (access(shellpath, R_OK)) {\n\t\t\t\t\tfprintf(stderr, \"Error: cannot access shell file in chroot\\n\");\n\t\t\t\t\texit(1);\n\t\t\t\t}\n\t\t\t\tfree(shellpath);\n\t\t\t} else if (access(cfg.shell, R_OK)) {\n\t\t\t\tfprintf(stderr, \"Error: cannot access shell file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"-c\") == 0) {\n\t\t\targ_command = 1;\n\t\t\tif (i == (argc -  1)) {\n\t\t\t\tfprintf(stderr, \"Error: option -c requires an argument\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t// unlike all other x11 features, this is available always\n\t\telse if (strcmp(argv[i], \"--x11=none\") == 0) {\n\t\t\targ_x11_block = 1;\n\t\t}\n#ifdef HAVE_X11\n\t\telse if (strcmp(argv[i], \"--x11=xorg\") == 0) {\n\t\t\tif (checkcfg(CFG_X11))\n\t\t\t\targ_x11_xorg = 1;\n\t\t\telse {\n\t\t\t\tfprintf(stderr, \"Error: --x11 feature is disabled in Firejail configuration file\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t}\n#endif\n\t\telse if (strncmp(argv[i], \"--join-or-start=\", 16) == 0) {\n\t\t\t// NOTE: this is second part of option handler,\n\t\t\t//\t\t atempt to find and join sandbox is done in other one\n\n\t\t\t// set sandbox name and start normally\n\t\t\tcfg.name = argv[i] + 16;\n\t\t\tif (strlen(cfg.name) == 0) {\n\t\t\t\tfprintf(stderr, \"Error: please provide a name for sandbox\\n\");\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\telse if (strcmp(argv[i], \"--\") == 0) {\n\t\t\t// double dash - positional params to follow\n\t\t\targ_doubledash = 1;\n\t\t\ti++;\n\t\t\tif (i  >= argc) {\n\t\t\t\tfprintf(stderr, \"Error: program name not found\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\textract_command_name(i, argv);\n\t\t\tprog_index = i;\n\t\t\tbreak;\n\t\t}\n\t\telse {\n\t\t\t// is this an invalid option?\n\t\t\tif (*argv[i] == '-') {\n\t\t\t\tfprintf(stderr, \"Error: invalid %s command line option\\n\", argv[i]);\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t\n\t\t\t// we have a program name coming\n\t\t\tif (arg_appimage) {\n\t\t\t\tcfg.command_name = strdup(argv[i]);\n\t\t\t\tif (!cfg.command_name)\n\t\t\t\t\terrExit(\"strdup\");\n\t\t\t}\n\t\t\telse\n\t\t\t\textract_command_name(i, argv);\n\t\t\tprog_index = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\t// prog_index could still be -1 if no program was specified\n\tif (prog_index == -1 && arg_shell_none) {\n\t\tfprintf(stderr, \"shell=none configured, but no program specified\\n\");\n\t\texit(1);\n\t}\n\n\t// check trace configuration\n\tif (arg_trace && arg_tracelog) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --trace and --tracelog are mutually exclusive; --tracelog disabled\\n\");\n\t}\n\t\n\t// disable x11 abstract socket\n\tif (getenv(\"FIREJAIL_X11\"))\n\t\tmask_x11_abstract_socket = 1;\n\t\n\t// check user namespace (--noroot) options\n\tif (arg_noroot) {\n\t\tif (arg_overlay) {\n\t\t\tfprintf(stderr, \"Error: --overlay and --noroot are mutually exclusive.\\n\");\n\t\t\texit(1);\n\t\t}\n\t\telse if (cfg.chrootdir) {\n\t\t\tfprintf(stderr, \"Error: --chroot and --noroot are mutually exclusive.\\n\");\n\t\t\texit(1);\n\t\t}\n\t}\n\n\t// log command\n\tlogargs(argc, argv);\n\tif (fullargc) {\n\t\tchar *msg;\n\t\tif (asprintf(&msg, \"user %s entering restricted shell\", cfg.username) == -1)\n\t\t\terrExit(\"asprintf\");\n\t\tlogmsg(msg);\n\t\tfree(msg);\n\t}\n\n\t// guess shell if unspecified\n\tif (!arg_shell_none && !cfg.shell) {\n\t\tcfg.shell = guess_shell();\n\t\tif (!cfg.shell) {\n\t\t\tfprintf(stderr, \"Error: unable to guess your shell, please set explicitly by using --shell option.\\n\");\n\t\t\texit(1);\n\t\t}\n\t\tif (arg_debug)\n\t\t\tprintf(\"Autoselecting %s as shell\\n\", cfg.shell);\n\t}\n\n\t// build the sandbox command\n\tif (prog_index == -1 && cfg.shell) {\n\t\tcfg.command_line = cfg.shell;\n\t\tcfg.window_title = cfg.shell;\n\t\tcfg.command_name = cfg.shell;\n\t}\n\telse if (arg_appimage) {\n\t\tif (arg_debug)\n\t\t\tprintf(\"Configuring appimage environment\\n\");\n\t\tappimage_set(cfg.command_name);\n\t\tcfg.window_title = \"appimage\";\n\t}\n\telse {\n\t\tbuild_cmdline(&cfg.command_line, &cfg.window_title, argc, argv, prog_index);\n\t}\n/*\telse {\n\t\tfprintf(stderr, \"Error: command must be specified when --shell=none used.\\n\");\n\t\texit(1);\n\t}*/\n\t\n\tassert(cfg.command_name);\n\tif (arg_debug)\n\t\tprintf(\"Command name #%s#\\n\", cfg.command_name);\n\t\t\n\t\t\t\t\n\t// load the profile\n\tif (!arg_noprofile) {\n\t\tif (!custom_profile) {\n\t\t\t// look for a profile in ~/.config/firejail directory\n\t\t\tchar *usercfgdir;\n\t\t\tif (asprintf(&usercfgdir, \"%s/.config/firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tint rv = profile_find(cfg.command_name, usercfgdir);\n\t\t\tfree(usercfgdir);\n\t\t\tcustom_profile = rv;\n\t\t}\n\t\tif (!custom_profile) {\n\t\t\t// look for a user profile in /etc/firejail directory\n\t\t\tint rv;\n\t\t\tif (custom_profile_dir)\n\t\t\t\trv = profile_find(cfg.command_name, custom_profile_dir);\n\t\t\telse\n\t\t\t\trv = profile_find(cfg.command_name, SYSCONFDIR);\n\t\t\tcustom_profile = rv;\n\t\t}\n\t}\n\n\t// use default.profile as the default\n\tif (!custom_profile && !arg_noprofile) {\n\t\tif (cfg.chrootdir) {\n\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\tfprintf(stderr, \"Warning: default profile disabled by --chroot option\\n\");\n\t\t}\n\t\telse if (arg_overlay) {\n\t\t\tif (!arg_quiet || arg_debug)\n\t\t\t\tfprintf(stderr, \"Warning: default profile disabled by --overlay option\\n\");\n\t\t}\n\t\telse {\n\t\t\t// try to load a default profile\n\t\t\tchar *profile_name = DEFAULT_USER_PROFILE;\n\t\t\tif (getuid() == 0)\n\t\t\t\tprofile_name = DEFAULT_ROOT_PROFILE;\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Attempting to find %s.profile...\\n\", profile_name);\n\t\n\t\t\t// look for the profile in ~/.config/firejail directory\n\t\t\tchar *usercfgdir;\n\t\t\tif (asprintf(&usercfgdir, \"%s/.config/firejail\", cfg.homedir) == -1)\n\t\t\t\terrExit(\"asprintf\");\n\t\t\tcustom_profile = profile_find(profile_name, usercfgdir);\n\t\t\tfree(usercfgdir);\n\t\n\t\t\tif (!custom_profile) {\n\t\t\t\t// look for the profile in /etc/firejail directory\n\t\t\t\tif (custom_profile_dir)\n\t\t\t\t\tcustom_profile = profile_find(profile_name, custom_profile_dir);\n\t\t\t\telse\n\t\t\t\t\tcustom_profile = profile_find(profile_name, SYSCONFDIR);\n\t\t\t}\n\t\t\tif (!custom_profile) {\n\t\t\t\tfprintf(stderr, \"Error: no default.profile installed\\n\");\n\t\t\t\texit(1);\n\t\t\t}\n\t\t\t\n\t\t\tif (custom_profile && !arg_quiet)\n\t\t\t\tprintf(\"\\n** Note: you can use --noprofile to disable %s.profile **\\n\\n\", profile_name);\n\t\t}\n\t}\n\n\t// block X11 sockets\n\tif (arg_x11_block)\n\t\tx11_block();\n\n\t// check network configuration options - it will exit if anything went wrong\n\tnet_check_cfg();\n\t\n\t// check and assign an IP address - for macvlan it will be done again in the sandbox!\n\tif (any_bridge_configured()) {\n\t\tEUID_ROOT();\n\t\tlockfd = open(RUN_NETWORK_LOCK_FILE, O_WRONLY | O_CREAT, S_IRUSR | S_IWUSR);\n\t\tif (lockfd != -1) {\n\t\t\tint rv = fchown(lockfd, 0, 0);\n\t\t\t(void) rv;\n\t\t\tflock(lockfd, LOCK_EX);\n\t\t}\n\t\t\n\t\tcheck_network(&cfg.bridge0);\n\t\tcheck_network(&cfg.bridge1);\n\t\tcheck_network(&cfg.bridge2);\n\t\tcheck_network(&cfg.bridge3);\n\t\t\t\n\t\t// save network mapping in shared memory\n\t\tnetwork_set_run_file(sandbox_pid);\n\t\tEUID_USER();\n\t}\n\n \t// create the parent-child communication pipe\n \tif (pipe(parent_to_child_fds) < 0)\n \t\terrExit(\"pipe\");\n \tif (pipe(child_to_parent_fds) < 0)\n\t\terrExit(\"pipe\");\n\n\tif (arg_noroot && arg_overlay) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --overlay and --noroot are mutually exclusive, noroot disabled\\n\");\n\t\targ_noroot = 0;\n\t}\n\telse if (arg_noroot && cfg.chrootdir) {\n\t\tif (!arg_quiet || arg_debug)\n\t\t\tfprintf(stderr, \"Warning: --chroot and --noroot are mutually exclusive, noroot disabled\\n\");\n\t\targ_noroot = 0;\n\t}\n\n\n\t// set name file\n\tEUID_ROOT();\n\tif (cfg.name)\n\t\tset_name_file(sandbox_pid);\n\tint display = x11_display();\n\tif (display > 0)\n\t\tset_x11_file(sandbox_pid, display);\n\tEUID_USER();\n\t\n\t// clone environment\n\tint flags = CLONE_NEWNS | CLONE_NEWPID | CLONE_NEWUTS | SIGCHLD;\n\t\n\t// in root mode also enable CLONE_NEWIPC\n\t// in user mode CLONE_NEWIPC will break MIT Shared Memory Extension (MIT-SHM)\n\tif (getuid() == 0 || arg_ipc) {\n\t\tflags |= CLONE_NEWIPC;\n\t\tif (arg_debug)\n\t\t\tprintf(\"Enabling IPC namespace\\n\");\n\t}\n\t\n\tif (any_bridge_configured() || any_interface_configured() || arg_nonetwork) {\n\t\tflags |= CLONE_NEWNET;\n\t}\n\telse if (arg_debug)\n\t\tprintf(\"Using the local network stack\\n\");\n\n\tEUID_ROOT();\n\tchild = clone(sandbox,\n\t\tchild_stack + STACK_SIZE,\n\t\tflags,\n\t\tNULL);\n\tif (child == -1)\n\t\terrExit(\"clone\");\n\tEUID_USER();\n\n\tif (!arg_command && !arg_quiet) {\n\t\tprintf(\"Parent pid %u, child pid %u\\n\", sandbox_pid, child);\n\t\t// print the path of the new log directory\n\t\tif (getuid() == 0) // only for root\n\t\t\tprintf(\"The new log directory is /proc/%d/root/var/log\\n\", child);\n\t}\n\t\n\tif (!arg_nonetwork) {\n\t\tEUID_ROOT();\t\n\t\tpid_t net_child = fork();\n\t\tif (net_child < 0)\n\t\t\terrExit(\"fork\");\n\t\tif (net_child == 0) {\n\t\t\t// elevate privileges in order to get grsecurity working\n\t\t\tif (setreuid(0, 0))\n\t\t\t\terrExit(\"setreuid\");\n\t\t\tif (setregid(0, 0))\n\t\t\t\terrExit(\"setregid\");\n\t\t\tnetwork_main(child);\n\t\t\tif (arg_debug)\n\t\t\t\tprintf(\"Host network configured\\n\");\t\t\t\n\t\t\t_exit(0);\t\t\t\n\t\t}\n\n\t\t// wait for the child to finish\n\t\twaitpid(net_child, NULL, 0);\n\t\tEUID_USER();\n\t}\n\n \t// close each end of the unused pipes\n \tclose(parent_to_child_fds[0]);\n \tclose(child_to_parent_fds[1]);\n \n\t// notify child that base setup is complete\n \tnotify_other(parent_to_child_fds[1]);\n \n \t// wait for child to create new user namespace with CLONE_NEWUSER\n \twait_for_other(child_to_parent_fds[0]);\n \tclose(child_to_parent_fds[0]);\n\n \tif (arg_noroot) {\n\t \t// update the UID and GID maps in the new child user namespace\n\t\t// uid\n\t \tchar *map_path;\n\t \tif (asprintf(&map_path, \"/proc/%d/uid_map\", child) == -1)\n\t \t\terrExit(\"asprintf\");\n\n\t \tchar *map;\n\t \tuid_t uid = getuid();\n\t \tif (asprintf(&map, \"%d %d 1\", uid, uid) == -1)\n\t \t\terrExit(\"asprintf\");\n \t\tEUID_ROOT();\n\t \tupdate_map(map, map_path);\n\t \tEUID_USER();\n\t \tfree(map);\n\t \tfree(map_path);\n\t \n\t \t// gid file\n\t\tif (asprintf(&map_path, \"/proc/%d/gid_map\", child) == -1)\n\t\t\terrExit(\"asprintf\");\n\t \tchar gidmap[1024];\n\t \tchar *ptr = gidmap;\n\t \t*ptr = '\\0';\n\n\t \t// add user group\n\t \tgid_t gid = getgid();\n\t \tsprintf(ptr, \"%d %d 1\\n\", gid, gid);\n\t \tptr += strlen(ptr);\n\t \t\n\t \t//  add tty group\n\t \tgid_t g = get_group_id(\"tty\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add audio group\n\t \tg = get_group_id(\"audio\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add video group\n\t \tg = get_group_id(\"video\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t\tptr += strlen(ptr);\n\t \t}\n\t \t\n\t \t//  add games group\n\t \tg = get_group_id(\"games\");\n\t \tif (g) {\n\t \t\tsprintf(ptr, \"%d %d 1\\n\", g, g);\n\t \t}\n\t \t\n \t\tEUID_ROOT();\n\t \tupdate_map(gidmap, map_path);\n\t \tEUID_USER();\n\t \tfree(map_path);\n \t}\n \t\n \t// notify child that UID/GID mapping is complete\n \tnotify_other(parent_to_child_fds[1]);\n \tclose(parent_to_child_fds[1]);\n \n \tEUID_ROOT();\n\tif (lockfd != -1) {\n\t\tflock(lockfd, LOCK_UN);\n\t\tclose(lockfd);\n\t}\n\n\t// create name file under /run/firejail\n\t\n\n\t// handle CTRL-C in parent\n\tsignal (SIGINT, my_handler);\n\tsignal (SIGTERM, my_handler);\n\n\t\n\t// wait for the child to finish\n\tEUID_USER();\n\tint status = 0;\n\twaitpid(child, &status, 0);\n\n\t// free globals\n#ifdef HAVE_SECCOMP\n\tif (cfg.seccomp_list_errno) {\n\t\tfor (i = 0; i < highest_errno; i++)\n\t\t\tfree(cfg.seccomp_list_errno[i]);\n\t\tfree(cfg.seccomp_list_errno);\n\t}\n#endif\n\tif (cfg.profile) {\n\t\tProfileEntry *prf = cfg.profile;\n\t\twhile (prf != NULL) {\n\t\t\tProfileEntry *next = prf->next;\n\t\t\tfree(prf->data);\n\t\t\tfree(prf->link);\n\t\t\tfree(prf);\n\t\t\tprf = next;\n\t\t}\n\t}\n\n\tif (WIFEXITED(status)){\n\t\tmyexit(WEXITSTATUS(status));\n\t} else if (WIFSIGNALED(status)) {\n\t\tmyexit(WTERMSIG(status));\n\t} else {\n\t\tmyexit(0);\n\t}\n\n\treturn 0;\n}\n", ".TH FIREJAIL 1 \"MONTH YEAR\" \"VERSION\" \"firejail man page\"\n.SH NAME\nFirejail \\- Linux namespaces sandbox program\n.SH SYNOPSIS\nStart a sandbox:\n.PP\n.RS\nfirejail [OPTIONS] [program and arguments]\n.RE\n.PP\nFile transfer from an existing sandbox\n.PP\n.RS\nfirejail {\\-\\-ls | \\-\\-get | \\-\\-put} dir_or_filename\n.RE\n.PP\nNetwork traffic shaping for an existing sandbox:\n.PP\n.RS\nfirejail \\-\\-bandwidth={name|pid} bandwidth-command\n.RE\n.PP\nMonitoring:\n.PP\n.RS\nfirejail {\\-\\-list | \\-\\-netstats | \\-\\-top | \\-\\-tree}\n.RE\n.PP\nMiscellaneous:\n.PP\n.RS\nfirejail {\\-? | \\-\\-debug-caps | \\-\\-debug-errnos | \\-\\-debug-syscalls | \\-\\-debug-protocols | \\-\\-help | \\-\\-version}\n.RE\n.SH DESCRIPTION\nFirejail is a SUID sandbox program that reduces the risk of security breaches by\nrestricting the running environment of untrusted applications using Linux\nnamespaces, seccomp-bpf and Linux capabilities.\nIt allows a process and all its descendants to have their own private view of the\nglobally shared kernel resources, such as the network stack, process table, mount table.\nFirejail can work in a SELinux or AppArmor environment,\nand it is integrated with Linux Control Groups.\n.PP\nWritten in C with virtually no dependencies, the software runs on any Linux computer with a 3.x kernel version\nor newer.\nIt can sandbox any type of processes: servers, graphical applications, and even user login sessions. \n.PP\nFirejail allows the user to manage application security using security profiles.\nEach profile defines a set of permissions for a specific application or group\nof applications. The software includes security profiles for a number of more common\nLinux programs, such as Mozilla Firefox, Chromium, VLC, Transmission etc.\n\n.SH USAGE\nWithout any options, the sandbox consists of a filesystem build in a new mount namespace,\nand new PID and UTS namespaces. IPC, network and user namespaces can be added using the\ncommand line options. The default Firejail filesystem is based on the host filesystem with the main \nsystem directories mounted read-only. These directories are /etc, /var, /usr, /bin, /sbin, /lib, /lib32, \n/libx32 and /lib64. Only /home and /tmp are writable.\n.PP\nAs it starts up, Firejail tries to find a security profile based on the name of the application.\nIf an appropriate profile is not found, Firejail will use a default profile.\nThe default profile is quite restrictive. In case the application doesn't work, use --noprofile option \nto disable it. For more information, please see \\fBSECURITY PROFILES\\fR section below.\n.PP\nIf a program argument is not specified, Firejail starts /bin/bash shell.\nExamples:\n.PP\n$ firejail [OPTIONS]                # starting a /bin/bash shell\n.PP\n$ firejail [OPTIONS] firefox        # starting Mozilla Firefox\n.PP\n# sudo firejail [OPTIONS] /etc/init.d/nginx start\n\n.SH OPTIONS\n.TP\n\\fB\\-\\-\nSignal the end of options and disables further option processing.\n.TP\n\\fB\\-\\-allow-debuggers\nAllow tools such as strace and gdb inside the sandbox. This option is only available\nwhen running on Linux kernels 4.8 or newer - a kernel bug in ptrace system call allows a full\nbypass of the seccomp filter.\n.br\n\n.br\nExample:\n.br\n$ firejail  --allow-debuggers --profile=/etc/firejail/firefox.profile strace -f firefox\n.TP\n\\fB\\-\\-allusers\nAll user home directories are visible inside the sandbox. By default, only current user home directory is visible.\n.br\n\n.br\nExample:\n.br\n$ firejail --allusers\n.TP\n\\fB\\-\\-apparmor\nEnable AppArmor confinement. For more information, please see \\fBAPPARMOR\\fR section below.\n.TP\n\\fB\\-\\-appimage\nSandbox an AppImage (http://appimage.org/) application.\n.br\n\n.br\nExample:\n.br\n$ firejail --appimage krita-3.0-x86_64.appimage\n.br\n$ firejail --appimage --private krita-3.0-x86_64.appimage\n.br\n$ firejail --appimage --net=none --x11 krita-3.0-x86_64.appimage\n.TP\n\\fB\\-\\-audit\nAudit the sandbox, see \\fBAUDIT\\fR section for more details.\n.TP\n\\fB\\-\\-audit=test-program\nAudit the sandbox, see \\fBAUDIT\\fR section for more details.\n.TP\n\\fB\\-\\-bandwidth=name|pid\nSet bandwidth limits for the sandbox identified by name or PID, see \\fBTRAFFIC SHAPING\\fR section for more details.\n.TP\n\\fB\\-\\-bind=filename1,filename2\nMount-bind filename1 on top of filename2. This option is only available when running as root.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-bind=/config/etc/passwd,/etc/passwd\n.TP\n\\fB\\-\\-blacklist=dirname_or_filename\nBlacklist directory or file.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-blacklist=/sbin \\-\\-blacklist=/usr/sbin\n.br\n$ firejail \\-\\-blacklist=~/.mozilla\n.br\n$ firejail \"\\-\\-blacklist=/home/username/My Virtual Machines\"\n.br\n$ firejail \\-\\-blacklist=/home/username/My\\\\ Virtual\\\\ Machines\n.TP\n\\fB\\-c\nExecute command and exit.\n.TP\n\\fB\\-\\-caps\nLinux capabilities is a kernel feature designed to split up the root privilege into a set of distinct privileges.\nThese privileges can be enabled or disabled independently, thus restricting what a process running\nas root can do in the system.\n\nBy default root programs run with all capabilities enabled. \\-\\-caps option disables the following capabilities:\nCAP_SYS_MODULE, CAP_SYS_RAWIO,\nCAP_SYS_BOOT, CAP_SYS_NICE, CAP_SYS_TTY_CONFIG, CAP_SYSLOG, CAP_MKNOD, CAP_SYS_ADMIN.\nThe filter is applied to all processes started in the sandbox.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail \\-\\-caps /etc/init.d/nginx start\n\n.TP\n\\fB\\-\\-caps.drop=all\nDrop all capabilities for the processes running in the sandbox. This option is recommended for running GUI programs\nor any other program that doesn't require root privileges. It is a must-have option for sandboxing untrusted programs\ninstalled from unofficial sources - such as games, Java programs, etc.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-caps.drop=all warzone2100\n\n.TP\n\\fB\\-\\-caps.drop=capability,capability,capability\nDefine a custom blacklist Linux capabilities filter.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-caps.keep=net_broadcast,net_admin,net_raw\n\n.TP\n\\fB\\-\\-caps.keep=capability,capability,capability\nDefine a custom whitelist Linux capabilities filter.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail \\-\\-caps.keep=chown,net_bind_service,setgid,\\\\\nsetuid /etc/init.d/nginx start\n\n.TP\n\\fB\\-\\-caps.print=name|pid\nPrint the caps filter for the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-caps.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-caps.print=3272\n\n.TP\n\\fB\\-\\-cgroup=tasks-file\nPlace the sandbox in the specified control group. tasks-file is the full path of cgroup tasks file.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-cgroup=/sys/fs/cgroup/g1/tasks\n\n.TP\n\\fB\\-\\-chroot=dirname\nChroot the sandbox into a root filesystem. Unlike the regular filesystem container,\nthe system directories are mounted read-write. If the sandbox is started as a\nregular user, default seccomp and capabilities filters are enabled. This\noption is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-chroot=/media/ubuntu warzone2100\n\n.TP\n\\fB\\-\\-cpu=cpu-number,cpu-number,cpu-number\nSet CPU affinity.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-cpu=0,1 handbrake\n\n.TP\n\\fB\\-\\-cpu.print=name|pid\nPrint the CPU cores in use by the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-cpu.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-cpu.print=3272\n\n.TP\n\\fB\\-\\-csh\nUse /bin/csh as default user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-csh\n.TP\n\\fB\\-\\-debug\\fR\nPrint debug messages.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug firefox\n\n.TP\n\\fB\\-\\-debug-blacklists\\fR\nDebug blacklisting.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-blacklists firefox\n\n.TP\n\\fB\\-\\-debug-caps\nPrint all recognized capabilities in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-caps\n.TP\n\\fB\\-\\-debug-check-filename\\fR\nDebug filename checking.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-check-filename firefox\n\n.TP\n\\fB\\-\\-debug-errnos\nPrint all recognized error numbers in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-errnos\n.TP\n\\fB\\-\\-debug-protocols\nPrint all recognized protocols in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-protocols\n.TP\n\\fB\\-\\-debug-syscalls\nPrint all recognized system calls in the current Firejail software build and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-syscalls\n.TP\n\\fB\\-\\-debug-whitelists\\fR\nDebug whitelisting.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-debug-whitelists firefox\n\n.TP\n\\fB\\-\\-defaultgw=address\nUse this address as default gateway in the new network namespace.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-defaultgw=10.10.20.1 firefox\n\n.TP\n\\fB\\-\\-dns=address\nSet a DNS server for the sandbox. Up to three DNS servers can be defined.\nUse this option if you don't trust the DNS setup on your network.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-dns=8.8.8.8 \\-\\-dns=8.8.4.4 firefox\n\n.TP\n\\fB\\-\\-dns.print=name|pid\nPrint DNS configuration for a sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-dns.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-dns.print=3272\n\n.TP\n\\fB\\-\\-env=name=value\nSet environment variable in the new sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-env=LD_LIBRARY_PATH=/opt/test/lib\n\n.TP\n\\fB\\-\\-force\nBy default, if Firejail is started in an existing sandbox, it will run the program in a bash shell.\nThis option disables this behavior, and attempts to start Firejail in the existing sandbox.\nThere could be lots of reasons for it to fail, for example if the existing sandbox disables\nadmin capabilities, SUID binaries, or if it runs seccomp.\n\n.TP\n\\fB\\-\\-fs.print=name|print\nPrint the filesystem log for the sandbox identified by name or by PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-fs.print=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-fs.print=3272\n\n.TP\n\\fB\\-\\-get=name|pid filename\nGet a file from sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n\n.TP\n\\fB\\-?\\fR, \\fB\\-\\-help\\fR\nPrint options end exit.\n\n\n.TP\n\\fB\\-\\-hostname=name\nSet sandbox hostname.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-hostname=officepc firefox\n\n.TP\n\\fB\\-\\-ignore=command\nIgnore command in profile file.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-ignore=shell --ignore=seccomp firefox\n\n.TP\n\\fB\\-\\-interface=interface\nMove interface in a new network namespace. Up to four --interface options can be specified.\nNote: wlan devices are not supported for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-interface=eth1 \\-\\-interface=eth0.vlan100\n\n.TP\n\\fB\\-\\-ip=address\nAssign IP addresses to the last network interface defined by a \\-\\-net option. A\ndefault gateway is assigned by default.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip=10.10.20.56 firefox\n\n.TP\n\\fB\\-\\-ip=none\nNo IP address and no default gateway are configured for the last interface\ndefined by a \\-\\-net option. Use this option\nin case you intend to start an external DHCP client in the sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-\\ip=none\n.br\n\n.br\nIf the corresponding interface doesn't have an IP address configured, this\noption is enabled by default.\n\n.TP\n\\fB\\-\\-ip6=address\nAssign IPv6 addresses to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip6=2001:0db8:0:f101::1/64 firefox\n\nNote: you don't need this option if you obtain your ip6 address from router via SLAAC (your ip6 address and default route will be configured by kernel automatically).\n\n.TP\n\\fB\\-\\-iprange=address,address\nAssign an IP address in the provided range to the last network interface defined by a \\-\\-net option. A\ndefault gateway is assigned by default.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-\\iprange=192.168.1.100,192.168.1.150\n\n.TP\n\\fB\\-\\-ipc-namespace\nEnable  a new IPC namespace if the sandbox was started as a regular user. IPC namespace is enabled by default\nfor sandboxes started as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-ipc-namespace firefox\n.TP\n\\fB\\-\\-join=name|pid\nJoin the sandbox identified by name or by PID. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. If \\-\\-join command is issued as a regular user,\nall security filters are configured for the new process the same they are configured in the sandbox.\nIf \\-\\-join command is issued as root, the security filters, cgroups and cpus configurations are not applied\nto the process joining the sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-join=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-join=3272\n\n.TP\n\\fB\\-\\-join-filesystem=name|pid\nJoin the mount namespace of the sandbox identified by name or PID. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. This command is available only to root user.\nSecurity filters, cgroups and cpus configurations are not applied to the process joining the sandbox.\n\n.TP\n\\fB\\-\\-join-network=name|PID\nJoin the network namespace of the sandbox identified by name. By default a /bin/bash shell is started after joining the sandbox.\nIf a program is specified, the program is run in the sandbox. This command is available only to root user.\nSecurity filters, cgroups and cpus configurations are not applied to the process joining the sandbox. Example:\n.br\n\n.br\n# start firefox\n.br\n$ firejail --net=eth0 --name=browser firefox &\n.br\n\n.br\n# change netfilter configuration\n.br\n$ sudo firejail --join-network=browser bash -c \"cat /etc/firejail/nolocal.net | /sbin/iptables-restore\"\n.br\n\n.br\n# verify netfilter configuration\n.br\n$ sudo firejail --join-network=browser /sbin/iptables -vL\n.br\n\n.br\n# verify  IP addresses\n.br\n$ sudo firejail --join-network=browser ip addr\n.br\nSwitching to pid 1932, the first child process inside the sandbox\n.br\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default \n.br\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n.br\n    inet 127.0.0.1/8 scope host lo\n.br\n       valid_lft forever preferred_lft forever\n.br\n    inet6 ::1/128 scope host \n.br\n       valid_lft forever preferred_lft forever\n.br\n2: eth0-1931: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UNKNOWN group default \n.br\n    link/ether 76:58:14:42:78:e4 brd ff:ff:ff:ff:ff:ff\n.br\n    inet 192.168.1.158/24 brd 192.168.1.255 scope global eth0-1931\n.br\n       valid_lft forever preferred_lft forever\n.br\n    inet6 fe80::7458:14ff:fe42:78e4/64 scope link \n.br\n       valid_lft forever preferred_lft forever\n\n.TP\n\\fB\\-\\-join-or-start=name\nJoin the sandbox identified by name or start a new one.\nSame as \"firejail --join=name\" if sandbox with specified name exists, otherwise same as \"firejail --name=name ...\"\n.br\nNote that in contrary to other join options there is respective profile option.\n\n.TP\n\\fB\\-\\-ls=name|pid dir_or_filename\nList files in sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n\n.TP\n\\fB\\-\\-list\nList all sandboxes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n7015:netblue:firejail firefox \n.br\n7056:netblue:firejail \\-\\-net=eth0 transmission-gtk \n.br\n7064:netblue:firejail \\-\\-noroot xterm \n.br\n$ \n.TP\n\\fB\\-\\-mac=address\nAssign MAC addresses to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-mac=00:11:22:33:44:55 firefox\n\n.TP\n\\fB\\-\\-mtu=number\nAssign a MTU value to the last network interface defined by a \\-\\-net option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-mtu=1492\n\n.TP\n\\fB\\-\\-name=name\nSet sandbox name. Several options, such as \\-\\-join and \\-\\-shutdown, can use\nthis name to identify a sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mybrowser firefox\n\n.TP\n\\fB\\-\\-net=bridge_interface\nEnable a new network namespace and connect it to this bridge interface.\nUnless specified with option \\-\\-ip and \\-\\-defaultgw, an IP address and a default gateway will be assigned\nautomatically to the sandbox. The IP address is verified using ARP before assignment. The address\nconfigured as default gateway is the bridge device IP address. Up to four \\-\\-net\nbridge devices can be defined. Mixing bridge and macvlan devices is allowed.\n.br\n\n.br\nExample:\n.br\n$ sudo brctl addbr br0\n.br\n$ sudo ifconfig br0 10.10.20.1/24\n.br\n$ sudo brctl addbr br1\n.br\n$ sudo ifconfig br1 10.10.30.1/24\n.br\n$ firejail \\-\\-net=br0 \\-\\-net=br1\n\n.TP\n\\fB\\-\\-net=ethernet_interface\nEnable a new network namespace and connect it\nto this ethernet interface using the standard Linux macvlan\ndriver. Unless specified with option \\-\\-ip and \\-\\-defaultgw, an\nIP address and a default gateway will be assigned automatically\nto the sandbox. The IP address is verified using ARP before\nassignment. The address configured as default gateway is the\ndefault gateway of the host. Up to four \\-\\-net devices can\nbe defined. Mixing bridge and macvlan devices is allowed.\nNote: wlan devices are not supported for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-ip=192.168.1.80 \\-\\-dns=8.8.8.8 firefox\n\n.TP\n\\fB\\-\\-net=none\nEnable a new, unconnected network namespace. The only interface\navailable in the new namespace is a new loopback interface (lo).\nUse this option to deny\nnetwork access to programs that don't really need network access.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=none vlc\n\n.TP\n\\fB\\-\\-netfilter\nEnable a default client network filter in the new network namespace.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter option does nothing.\nThe default filter is as follows:\n.br\n\n.br\n*filter\n.br\n:INPUT DROP [0:0]\n.br\n:FORWARD DROP [0:0]\n.br\n:OUTPUT ACCEPT [0:0]\n.br\n\\-A INPUT \\-i lo \\-j ACCEPT\n.br\n\\-A INPUT \\-m state \\-\\-state RELATED,ESTABLISHED \\-j ACCEPT\n.br\n# allow ping\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type destination-unreachable \\-j ACCEPT\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type time-exceeded \\-j ACCEPT\n.br\n\\-A INPUT \\-p icmp \\-\\-icmp-type echo-request \\-j ACCEPT\n.br\n# drop STUN (WebRTC) requests\n.br\n-A OUTPUT -p udp --dport 3478 -j DROP\n.br\n-A OUTPUT -p udp --dport 3479 -j DROP\n.br\n-A OUTPUT -p tcp --dport 3478 -j DROP\n.br\n-A OUTPUT -p tcp --dport 3479 -j DROP\n.br\nCOMMIT\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-netfilter firefox\n.TP\n\\fB\\-\\-netfilter=filename\nEnable the network filter specified by filename in the new network namespace. The filter file format\nis the format of iptables-save and iptable-restore commands.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter option does nothing.\n.br\n\n.br\nThe following filters are available in /etc/firejail directory:\n.br\n\n.br\n.B webserver.net\nis a webserver filter that allows access only to TCP ports 80 and 443.\nExample:\n.br\n\n.br\n$ firejail --netfilter=/etc/firejail/webserver.net --net=eth0 \\\\\n.br\n/etc/init.d/apache2 start\n.br\n\n.br\n.B nolocal.net\nis a client filter that disable access to local network. Example:\n.br\n\n.br\n$ firejail --netfilter=/etc/firejail/nolocal.net \\\\\n.br\n--net=eth0 firefox\n.TP\n\\fB\\-\\-netfilter6=filename\nEnable the IPv6 network filter specified by filename in the new network namespace. The filter file format\nis the format of ip6tables-save and ip6table-restore commands.\nNew network namespaces are created using \\-\\-net option. If a new network namespaces is not created,\n\\-\\-netfilter6 option does nothing.\n.TP\n\\fB\\-\\-netstats\nMonitor network namespace statistics, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n\n.br\n$ firejail \\-\\-netstats\n.br\nPID  User    RX(KB/s) TX(KB/s) Command\n.br\n1294 netblue 53.355   1.473    firejail \\-\\-net=eth0 firefox\n.br\n7383 netblue 9.045    0.112    firejail \\-\\-net=eth0 transmission\n\n.TP\n\\fB\\-\\-nice=value\nSet nice value for all processes running inside the sandbox.\nOnly root may specify a negative value.\n.br\n\n.br\nExample:\n.br\n$ firejail --nice=2 firefox\n\n.TP\n\\fB\\-\\-no3d\nDisable 3D hardware acceleration.\n.br\n\n.br\nExample:\n.br\n$ firejail --no3d firefox\n\n.TP\n\\fB\\-\\-noblacklist=dirname_or_filename\nDisable blacklist for this directory or file.\n.br\n\n.br\nExample:\n.br\n$ firejail\n.br\n$ nc dict.org 2628\n.br\nbash: /bin/nc: Permission denied\n.br\n$ exit\n.br\n\n.br\n$ firejail --noblacklist=/bin/nc\n.br\n$ nc dict.org 2628\n.br\n220 pan.alephnull.com dictd 1.12.1/rf on Linux 3.14-1-amd64\n.br\n.TP\n\\fB\\-\\-noexec=dirname_or_filename\nRemount directory or file noexec, nodev and nosuid.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noexec=/tmp\n.br\n\n.br\n/etc and /var are noexec by default if the sandbox was started as a regular user. If there are more than one mount operation\non the path of the file or directory, noexec should be applied to the last one. Always check if the change took effect inside the sandbox.\n\n.TP\n\\fB\\-\\-nogroups\nDisable supplementary groups. Without this option, supplementary groups are enabled for the user starting the\nsandbox. For root user supplementary groups are always disabled.\n.br\n\n.br\nExample:\n.br\n$ id\n.br\nuid=1000(netblue) gid=1000(netblue) groups=1000(netblue),24(cdrom),25(floppy),27(sudo),29(audio)\n.br\n$ firejail \\-\\-nogroups\n.br\nParent pid 8704, child pid 8705\n.br\nChild process initialized\n.br\n$ id\n.br\nuid=1000(netblue) gid=1000(netblue) groups=1000(netblue)\n.br\n$\n\n.TP\n\\fB\\-\\-noprofile\nDo not use a security profile. \n.br\n\n.br\nExample:\n.br\n$ firejail\n.br\nReading profile /etc/firejail/default.profile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...] \n.br\n\n.br\n$ firejail \\-\\-noprofile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...]\n\n.TP\n\\fB\\-\\-noroot\nInstall a user namespace with a single user - the current user.\nroot user does not exist in the new namespace. This option\nrequires a Linux kernel version 3.8 or newer. The option\nis not supported for \\-\\-chroot and \\-\\-overlay configurations,\nor for sandboxes started as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noroot\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n$ ping google.com\n.br\nping: icmp open socket: Operation not permitted\n.br\n$\n\n.TP\n\\fB\\-\\-nonewprivs\nSets the NO_NEW_PRIVS prctl.  This ensures that child processes\ncannot acquire new privileges using execve(2);  in particular,\nthis means that calling a suid binary (or one with file capabilities)\ndoes not result in an increase of privilege. This option\nis enabled by default if seccomp filter is activated.\n\n.TP\n\\fB\\-\\-nosound\nDisable sound system.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-nosound firefox\n\n.TP\n\\fB\\-\\-output=logfile\nstdout logging and log rotation. Copy stdout and stderr to logfile, and keep the size of the file under 500KB using log\nrotation. Five files with prefixes .1 to .5 are used in rotation.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-output=sandboxlog /bin/bash\n.br\n[...]\n.br\n$ ls -l sandboxlog*\n.br\n-rw-r--r-- 1 netblue netblue 333890 Jun  2 07:48 sandboxlog\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.1\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.2\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.3\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.4\n.br\n-rw-r--r-- 1 netblue netblue 511488 Jun  2 07:48 sandboxlog.5\n\n.TP\n\\fB\\-\\-overlay\nMount a filesystem overlay on top of the current filesystem.  Unlike the regular filesystem container,\nthe system directories are mounted read-write. All filesystem modifications go into the overlay.\nThe overlay is stored in $HOME/.firejail/<PID> directory.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay firefox\n\n.TP\n\\fB\\-\\-overlay-named=name\nMount a filesystem overlay on top of the current filesystem.  Unlike the regular filesystem container,\nthe system directories are mounted read-write. All filesystem modifications go into the overlay.\nThe overlay is stored in $HOME/.firejail/<NAME> directory. The created overlay can be reused between multiple\nsessions.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-named=jail1 firefox\n\n.TP\n\\fB\\-\\-overlay-tmpfs\nMount a filesystem overlay on top of the current filesystem. All filesystem modifications go into the overlay,\nand are discarded when the sandbox is closed.\n.br\n\n.br\nOverlayFS support is required in Linux kernel for this option to work.\nOverlayFS was officially introduced in Linux kernel version 3.18.\nThis option is not available on Grsecurity systems.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-tmpfs firefox\n\n.TP\n\\fB\\-\\-overlay-clean\nClean all overlays stored in $HOME/.firejail directory. Overlays created with --overlay-path=path\noutside $HOME/.firejail will not be deleted.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-overlay-clean\n\n.TP\n\\fB\\-\\-private\nMount new /root and /home/user directories in temporary\nfilesystems. All modifications are discarded when the sandbox is\nclosed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private firefox\n.TP\n\\fB\\-\\-private=directory\nUse directory as user home.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private=/home/netblue/firefox-home firefox\n\n.TP\n\\fB\\-\\-private-home=file,directory\nBuild a new user home in a temporary\nfilesystem, and copy the files and directories in the list in the\nnew home. All modifications are discarded when the sandbox is\nclosed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-home=.mozilla firefox\n\n.TP\n\\fB\\-\\-private-bin=file,file\nBuild a new /bin in a temporary filesystem, and copy the programs in the list.\nIf no listed file is found, /bin directory will be empty.\nThe same directory is also bind-mounted over /sbin, /usr/bin, /usr/sbin and /usr/local/bin.\nAll modifications are discarded when the sandbox is closed. \n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-bin=bash,sed,ls,cat\n.br\nParent pid 20841, child pid 20842\n.br\nChild process initialized\n.br\n$ ls /bin\n.br\nbash  cat  ls  sed\n\n.TP\n\\fB\\-\\-private-dev\nCreate a new /dev directory. Only dri, null, full, zero, tty, pts, ptmx, random, snd, urandom, log and shm devices are available.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-dev\n.br\nParent pid 9887, child pid 9888\n.br\nChild process initialized\n.br\n$ ls /dev\n.br\ndri  full  log  null  ptmx  pts  random  shm  snd  tty  urandom  zero\n.br\n$\n.TP\n\\fB\\-\\-private-etc=file,directory\nBuild a new /etc in a temporary\nfilesystem, and copy the files and directories in the list.\nIf no listed file is found, /etc directory will be empty.\nAll modifications are discarded when the sandbox is closed. \n.br\n\n.br\nExample:\n.br\n$ firejail --private-etc=group,hostname,localtime, \\\\\n.br\nnsswitch.conf,passwd,resolv.conf\n\n.TP\n\\fB\\-\\-private-tmp\nMount an empty temporary filesystem on top of /tmp directory.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-private-tmp\n\n.TP\n\\fB\\-\\-profile=filename\nLoad a custom security profile from filename. For filename use an absolute path or a path relative to the current path.\nFor more information, see \\fBSECURITY PROFILES\\fR section below.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-profile=myprofile\n\n.TP\n\\fB\\-\\-profile-path=directory\nUse this directory to look for profile files. Use an absolute path or a path in the home directory starting with ~/.\nFor more information, see \\fBSECURITY PROFILES\\fR section below and \\fBRELOCATING PROFILE FILES\\fR in\n\\fBman 5 firejail-profile\\fR.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-profile-path=~/myprofiles\n.br\n$ firejail \\-\\-profile-path=/home/netblue/myprofiles\n\n.TP\n\\fB\\-\\-protocol=protocol,protocol,protocol\nEnable protocol filter. The filter is based on seccomp and checks the first argument to socket system call.\nRecognized values: unix, inet, inet6, netlink and packet. This option is not supported for i386 architecture.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-protocol=unix,inet,inet6 firefox\n.TP\n\\fB\\-\\-protocol.print=name|pid\nPrint the protocol filter for the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mybrowser firefox &\n.br\n$ firejail \\-\\-protocol.print=mybrowser\n.br\nunix,inet,inet6,netlink\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-protocol.print=3272\n.br\nunix,inet,inet6,netlink\n.TP\n\\fB\\-\\-put=name|pid src-filename dest-filename\nPut a file in sandbox container, see \\fBFILE TRANSFER\\fR section for more details.\n.TP\n\\fB\\-\\-quiet\nTurn off Firejail's output.\n.TP\n\\fB\\-\\-read-only=dirname_or_filename\nSet directory or file read-only.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-read-only=~/.mozilla firefox\n.br\n\n.br\nA short note about mixing \\-\\-whitelist and \\-\\-read-only options. Whitelisted directories\nshould be made read-only independently. Making a parent directory read-only, will not\nmake the whitelist read-only. Example:\n.br\n\n.br\n$ firejail --whitelist=~/work --read-only=~ --read-only=~/work\n\n.TP\n\\fB\\-\\-read-write=dirname_or_filename\nSet directory or file read-write. Only files or directories belonging to the current user are allowed for\nthis operation. Example:\n.br\n\n.br\n$ mkdir ~/test\n.br\n$ touch ~/test/a\n.br\n$ firejail --read-only=~/test --read-write=~/test/a\n\n\n.TP\n\\fB\\-\\-rlimit-fsize=number\nSet the maximum file size that can be created by a process.\n.TP\n\\fB\\-\\-rlimit-nofile=number\nSet the maximum number of files that can be opened by a process.\n.TP\n\\fB\\-\\-rlimit-nproc=number\nSet the maximum number of processes that can be created for the real user ID of the calling process.\n.TP\n\\fB\\-\\-rlimit-sigpending=number\nSet the maximum number of pending signals for a process.\n\n.TP\n\\fB\\-\\-rmenv=name\nRemove environment variable in the new sandbox.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-rmenv=DBUS_SESSION_BUS_ADDRESS\n\n.TP\n\\fB\\-\\-scan\nARP-scan all the networks from inside a network namespace.\nThis makes it possible to detect macvlan kernel device drivers running on the current host.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=eth0 \\-\\-scan\n.TP\n\\fB\\-\\-seccomp\nEnable seccomp filter and blacklist the syscalls in the default list. The default list is as follows:\nmount, umount2, ptrace, kexec_load, kexec_file_load, name_to_handle_at, open_by_handle_at, create_module, init_module, finit_module, delete_module,\niopl, ioperm, ioprio_set, swapon, swapoff, syslog, process_vm_readv, process_vm_writev,\nsysfs,_sysctl, adjtimex, clock_adjtime, lookup_dcookie, perf_event_open, fanotify_init, kcmp,\nadd_key, request_key, keyctl, uselib, acct, modify_ldt, pivot_root, io_setup,\nio_destroy, io_getevents, io_submit, io_cancel,\nremap_file_pages, mbind, get_mempolicy, set_mempolicy,\nmigrate_pages, move_pages, vmsplice, chroot,\ntuxcall, reboot, mfsservctl and get_kernel_syms.\n.br\n\n.br\nSystem architecture is not strictly imposed. The filter is applied\nat run time only if the correct architecture was detected. For the case of I386 and AMD64\nboth 32-bit and 64-bit filters are installed.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp\n.TP\n\\fB\\-\\-seccomp=syscall,syscall,syscall\nEnable seccomp filter, blacklist the default list and the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp=utime,utimensat,utimes firefox\n.TP\n\\fB\\-\\-seccomp.drop=syscall,syscall,syscall\nEnable seccomp filter, and blacklist the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-seccomp.drop=utime,utimensat,utimes\n.TP\n\\fB\\-\\-seccomp.keep=syscall,syscall,syscall\nEnable seccomp filter, and whitelist the syscalls specified by the command.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-shell=none \\-\\-seccomp.keep=poll,select,[...] transmission-gtk\n.TP\n\\fB\\-\\-seccomp.<errno>=syscall,syscall,syscall\nEnable seccomp filter, and return errno for the syscalls specified by the command.\n.br\n\n.br\nExample: a Bash shell where deleting files is disabled\n.br\n\n.br\n$ firejail --seccomp.eperm=unlinkat\n.br\nParent pid 10662, child pid 10663\n.br\nChild process initialized\n.br\n$ touch testfile\n.br\n$ rm testfile\n.br\nrm: cannot remove `testfile': Operation not permitted\n\n.TP\n\\fB\\-\\-seccomp.print=name|PID\nPrint the seccomp filter for the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=browser firefox &\n.br\n$ firejail \\-\\-seccomp.print=browser\n.br\nSECCOMP Filter:\n.br\n  VALIDATE_ARCHITECTURE\n.br\n  EXAMINE_SYSCALL\n.br\n  BLACKLIST 165 mount\n.br\n  BLACKLIST 166 umount2\n.br\n  BLACKLIST 101 ptrace\n.br\n  BLACKLIST 246 kexec_load\n.br\n  BLACKLIST 304 open_by_handle_at\n.br\n  BLACKLIST 175 init_module\n.br\n  BLACKLIST 176 delete_module\n.br\n  BLACKLIST 172 iopl\n.br\n  BLACKLIST 173 ioperm\n.br\n  BLACKLIST 167 swapon\n.br\n  BLACKLIST 168 swapoff\n.br\n  BLACKLIST 103 syslog\n.br\n  BLACKLIST 310 process_vm_readv\n.br\n  BLACKLIST 311 process_vm_writev\n.br\n  BLACKLIST 133 mknod\n.br\n  BLACKLIST 139 sysfs\n.br\n  BLACKLIST 156 _sysctl\n.br\n  BLACKLIST 159 adjtimex\n.br\n  BLACKLIST 305 clock_adjtime\n.br\n  BLACKLIST 212 lookup_dcookie\n.br\n  BLACKLIST 298 perf_event_open\n.br\n  BLACKLIST 300 fanotify_init\n.br\n  RETURN_ALLOW\n.br\n$ \n.TP\n\\fB\\-\\-shell=none\nRun the program directly, without a user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-shell=none script.sh\n.TP\n\\fB\\-\\-shell=program\nSet default user shell. Use this shell to run the application using \\-c shell option.\nFor example \"firejail \\-\\-shell=/bin/dash firefox\" will start Mozilla Firefox as \"/bin/dash \\-c firefox\".\nBy default Bash shell (/bin/bash) is used. Options such as \\-\\-zsh and \\-\\-csh can also set the default\nshell.\n.br\n\n.br\nExample:\n$firejail \\-\\-shell=/bin/dash script.sh\n.TP\n\\fB\\-\\-shutdown=name|PID\nShutdown the sandbox identified by name or PID.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-name=mygame \\-\\-caps.drop=all warzone2100 &\n.br\n$ firejail \\-\\-shutdown=mygame\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-list\n.br\n3272:netblue:firejail \\-\\-private firefox\n.br\n$ firejail \\-\\-shutdown=3272\n.TP\n\\fB\\-\\-tmpfs=dirname\nMount a tmpfs filesystem on directory dirname. This option is available only when running the sandbox as root.\n.br\n\n.br\nExample:\n.br\n# firejail \\-\\-tmpfs=/var\n.TP\n\\fB\\-\\-top\nMonitor the most CPU-intensive sandboxes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-top\n.TP\n\\fB\\-\\-trace\nTrace open, access and connect system calls.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-trace wget -q www.debian.org\n.br\nParent pid 11793, child pid 11794\n.br\nChild process initialized\n.br\n1:bash:open /dev/tty\n.br\n1:wget:fopen64 /etc/wgetrc\n.br\n1:wget:fopen /etc/hosts\n.br\n1:wget:socket AF_INET SOCK_DGRAM IPPROTO_IP\n.br\n1:wget:connect 8.8.8.8:53\n.br\n1:wget:socket AF_INET SOCK_STREAM IPPROTO_IP\n.br\n1:wget:connect 140.211.15.34:80\n.br\n1:wget:fopen64 index.html.1\n.br\n\n.br\nparent is shutting down, bye...\n.TP\n\\fB\\-\\-tracelog\nThis option enables auditing blacklisted files and directories. A message\nis sent to syslog in case the file or the directory is accessed. \n.br\n\n.br\nExample:\n.br\n$ firejail --tracelog firefox\n.br\n\n.br\nSample messages:\n.br\n$ sudo tail -f /var/log/syslog\n.br\n[...]\n.br\nDec  3 11:43:25 debian firejail[70]: blacklist violation - sandbox 26370, exe firefox, syscall open64, path /etc/shadow\n.br\nDec  3 11:46:17 debian firejail[70]: blacklist violation - sandbox 26370, exe firefox, syscall opendir, path /boot\n.br\n[...]\n.TP\n\\fB\\-\\-tree\nPrint a tree of all sandboxed processes, see \\fBMONITORING\\fR section for more details.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-tree\n.br\n11903:netblue:firejail iceweasel\n.br\n  11904:netblue:iceweasel \n.br\n    11957:netblue:/usr/lib/iceweasel/plugin-container\n.br\n11969:netblue:firejail \\-\\-net=eth0 transmission-gtk \n.br\n  11970:netblue:transmission-gtk \n\n.TP\n\\fB\\-\\-version\nPrint program version and exit.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-version\n.br\nfirejail version 0.9.27\n\n.TP\n\\fB\\-\\-veth-name=name\nUse this name for the interface connected to the bridge for --net=bridge_interface commands, \ninstead of the default one.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-net=br0 --veth-name=if0\n\n.TP\n\\fB\\-\\-whitelist=dirname_or_filename\nWhitelist directory or file. A temporary file system is mounted on the top directory, and the\nwhitelisted files are mount-binded inside. Modifications to whitelisted files are persistent,\neverything else is discarded when the sandbox is closed. The top directory could be \nuser home, /dev, /media, /mnt, /opt, /srv, /var, and /tmp.\n.br\n\n.br\nSymbolic link handling: with the exception of user home, both the link and the real file should be in\nthe same top directory. For user home, both the link and the real file should be owned by the user.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-noprofile \\-\\-whitelist=~/.mozilla\n.br\n$ firejail \\-\\-whitelist=/tmp/.X11-unix --whitelist=/dev/null\n.br\n$ firejail \"\\-\\-whitelist=/home/username/My Virtual Machines\"\n\n.TP\n\\fB\\-\\-writable-etc\nMount /etc directory read-write.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail --writable-etc\n\n.TP\n\\fB\\-\\-writable-var\nMount /var directory read-write.\n.br\n\n.br\nExample:\n.br\n$ sudo firejail --writable-var\n\n\n.TP\n\\fB\\-\\-x11\nSandbox the application using Xpra, Xephyr or Xorg security extension.\nThe sandbox will prevents screenshot and keylogger applications started inside the sandbox from accessing\nclients running outside the sandbox.\nFirejail will try first Xpra, and if Xpra is not installed on the system, it will try to find Xephyr.\nIf all fails, Firejail will not attempt to use X11 security extension.\n.br\n\n.br\nXpra and Xephyr modes require a network namespace to be instantiated in order to disable\nX11 abstract Unix socket. If this is not possible, the user can disable the abstract socket\nby adding \"-nolisten local\" on Xorg command line.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11 --net=eth0 firefox\n\n.TP\n\\fB\\-\\-x11=none\nBlacklist /tmp/.X11-unix directory, ${HOME}/.Xauthority and the file specified in ${XAUTHORITY} environment variable.\nRemove DISPLAY and XAUTHORITY environment variables.\nStop with error message if X11 abstract socket will be accessible in jail.\n\n.TP\n\\fB\\-\\-x11=xephyr\nStart Xephyr and attach the sandbox to this server.\nXephyr is a display server implementing the X11 display server protocol.\nA network namespace needs to be instantiated in order to deny access to X11 abstract Unix domain socket.\n.br\n\n.br\nXephyr runs in a window just like any other X11 application. The default window size is 800x600.\nThis can be modified in /etc/firejail/firejail.config file.\n.br\n\n.br\nThe recommended way to use this feature is to run a window manager inside the sandbox.\nA security profile for OpenBox is provided.\n.br\n\n.br\nXephyr is developed by Xorg project. On Debian platforms it is installed with the command \\fBsudo apt-get install xserver-xephyr\\fR.\nThis feature is not available when running as root. \n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xephyr --net=eth0 openbox\n\n.TP\n\\fB\\-\\-x11=xorg\nSandbox the application using the untrusted mode implemented by X11 security extension. \nThe extension is available in Xorg package\nand it is installed by default on most Linux distributions. It provides support for a simple trusted/untrusted \nconnection model. Untrusted clients are restricted in certain ways to prevent them from reading window\ncontents of other clients, stealing input events, etc.\n\nThe untrusted mode has several limitations. A lot of regular programs  assume they are a trusted X11 clients\nand will crash or lock up when run in untrusted mode. Chromium browser and xterm are two examples.\nFirefox and transmission-gtk seem to be working fine.\nA network namespace is not required for this option.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xorg firefox\n\n.TP\n\\fB\\-\\-x11=xpra\nStart Xpra (http://xpra.org) and attach the sandbox to this server.\nXpra is a persistent remote display server and client for forwarding X11 applications and desktop screens.\nA network namespace needs to be instantiated in order to deny access to X11 abstract Unix domain socket.\n.br\n\n.br\nOn Debian platforms Xpra is installed with the command \\fBsudo apt-get install xpra\\fR.\nThis feature is not available when running as root.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-x11=xpra --net=eth0 firefox\n\n.TP\n\\fB\\-\\-zsh\nUse /usr/bin/zsh as default user shell.\n.br\n\n.br\nExample:\n.br\n$ firejail \\-\\-zsh\n\n.SH DESKTOP INTEGRATION\nA symbolic link to /usr/bin/firejail under the name of a program, will start the program in Firejail sandbox.\nThe symbolic link should be placed in the first $PATH position. On most systems, a good place\nis /usr/local/bin directory. Example:\n.PP\n.RS\n.br\n\n.br\nMake a firefox symlink to /usr/bin/firejail:\n.br\n\n.br\n$ ln -s /usr/bin/firejail /usr/local/bin/firefox\n.br\n\n.br\nVerify $PATH\n.br\n\n.br\n$ which -a firefox\n.br\n/usr/local/bin/firefox\n.br\n/usr/bin/firefox\n.br\n\n.br\nStarting firefox in this moment, automatically invokes \u201cfirejail firefox\u201d.\n.RE\n.br\n\n.br\nThis works for clicking on desktop environment icons, menus etc. Use \"firejail --tree\"\nto verify the program is sandboxed.\n.PP\n.RS\n.br\n\n.br\n.br\n$ firejail --tree\n.br\n1189:netblue:firejail firefox\n.br\n  1190:netblue:firejail firefox\n.br\n    1220:netblue:/bin/sh -c \"/usr/lib/firefox/firefox\"  \n.br\n      1221:netblue:/usr/lib/firefox/firefox\n.RE\n\n.SH APPARMOR\n.TP\nAppArmor support is disabled by default at compile time. Use --enable-apparmor configuration option to enable it:\n.br\n\n.br\n$ ./configure --prefix=/usr --enable-apparmor\n.TP\nDuring software install, a generic AppArmor profile file, firejail-default, is placed in /etc/apparmor.d directory. The profile needs to be loaded into the kernel by running the following command as root:\n.br\n\n.br\n# aa-enforce firejail-default\n.TP\nThe installed profile tries to replicate some advanced security features inspired by kernel-based Grsecurity:\n.br\n\n.br\n- Prevent information leakage in /proc and /sys directories. The resulting filesystem is barely enough for running\ncommands such as \"top\" and \"ps aux\".\n.br\n\n.br\n- Allow running programs only from well-known system paths, such as /bin, /sbin, /usr/bin etc. Running\nprograms and scripts from user home or other directories writable by the user is not allowed.\n.br\n\n.br\n- Disable D-Bus. D-Bus has long been a huge security hole, and most programs don't use it anyway.\nYou should have no problems running Chromium or Firefox.\n\n.TP\nTo enable AppArmor confinement on top of your current Firejail security features, pass \\fB\\-\\-apparmor\\fR flag to Firejail command line. You can also include \\fBapparmor\\fR command in a Firejail profile file. Example:\n.br\n\n.br\n$ firejail --apparmor firefox\n\n.SH FILE TRANSFER\nThese features allow the user to inspect the filesystem container of an existing sandbox\nand transfer files from the container to the host filesystem.\n\n.TP\n\\fB\\-\\-get=name|pid filename\nRetrieve the container file and store it on the host in the current working directory.\nThe container is specified by name or PID. This option is not available for sandboxes\nusing --chroot.\n\n.TP\n\\fB\\-\\-ls=name|pid dir_or_filename\nList container files. The container is specified by name or PID.\n\n.TP\n\\fB\\-\\-put=name|pid src-filename dest-filename\nPut src-filename in sandbox container.\nThe container is specified by name or PID. This option is not available for sandboxes\nusing --chroot.\n\n.TP\nExamples:\n.br\n\n.br\n$ firejail \\-\\-name=mybrowser --private firefox\n.br\n\n.br\n$ firejail \\-\\-ls=mybrowser ~/Downloads\n.br\ndrwxr-xr-x netblue  netblue         4096 .\n.br\ndrwxr-xr-x netblue  netblue         4096 ..\n.br\n-rw-r--r-- netblue  netblue         7847 x11-x305.png\n.br\n-rw-r--r-- netblue  netblue         6800 x11-x642.png\n.br\n-rw-r--r-- netblue  netblue        34139 xpra-clipboard.png\n.br\n\n.br\n$ firejail \\-\\-get=mybrowser ~/Downloads/xpra-clipboard.png\n.br\n\n.br\n$ firejail \\-\\-put=mybrowser xpra-clipboard.png ~/Downloads/xpra-clipboard.png\n.br\n\n.SH TRAFFIC SHAPING\nNetwork bandwidth is an expensive resource shared among all sandboxes running on a system.\nTraffic shaping allows the user to increase network performance by controlling\nthe amount of data that flows into and out of the sandboxes.\n\nFirejail implements a simple rate-limiting shaper based on Linux command tc.\nThe shaper works at sandbox level, and can be used only for sandboxes configured with new network namespaces.\n\nSet rate-limits:\n\n\t$ firejail --bandwidth=name|pid set network download upload\n\nClear rate-limits:\n\n\t$ firejail --bandwidth=name|pid clear network\n\nStatus:\n\n\t$ firejail --bandwidth=name|pid status\n\nwhere:\n.br\n\tname - sandbox name\n.br\n\tpid - sandbox pid\n.br\n\tnetwork - network interface as used by \\-\\-net option\n.br\n\tdownload - download speed in KB/s (kilobyte per second)\n.br\n\tupload - upload speed in KB/s (kilobyte per second)\n\nExample:\n.br\n\t$ firejail \\-\\-name=mybrowser \\-\\-net=eth0 firefox &\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser set eth0 80 20\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser status\n.br\n\t$ firejail \\-\\-bandwidth=mybrowser clear eth0\n\n.SH AUDIT\nAudit feature allows the user to point out gaps in security profiles. The\nimplementation replaces the program to be sandboxed with a test program. By\ndefault, we use faudit program distributed with Firejail. A custom test program\ncan also be supplied by the user. Examples:\n\nRunning the default audit program:\n.br\n\t$ firejail --audit transmission-gtk\n\nRunning a custom audit program:\n.br\n\t$ firejail --audit=~/sandbox-test transmission-gtk\n\nIn the examples above, the sandbox configures transmission-gtk profile and\nstarts the test program. The real program, transmission-gtk, will not be\nstarted.\n\nLimitations: audit feature is not implemented for --x11 commands.\n\n.SH MONITORING\nOption \\-\\-list prints a list of all sandboxes. The format\nfor each process entry is as follows:\n\n\tPID:USER:Command\n\nOption \\-\\-tree prints the tree of processes running in the sandbox. The format\nfor each process entry is as follows:\n\n\tPID:USER:Command\n\nOption \\-\\-top is similar to the UNIX top command, however it applies only to\nsandboxes.\n\nOption \\-\\-netstats prints network statistics for active sandboxes installing new network namespaces.\n\n\nListed below are the available fields (columns) in alphabetical\norder for \\-\\-top and \\-\\-netstat options:\n\n.TP\nCommand\nCommand used to start the sandbox.\n.TP\nCPU%\nCPU usage, the sandbox share of the elapsed CPU time since the\nlast screen update\n.TP\nPID\nUnique process ID for the task controlling the sandbox.\n.TP\nPrcs\nNumber of processes running in sandbox, including the controlling process.\n.TP\nRES\nResident Memory Size (KiB), sandbox non-swapped physical memory.\nIt is a sum of the RES values for all processes running in the sandbox.\n.TP\nRX(KB/s)\nNetwork receive speed.\n.TP\nSHR\nShared Memory Size (KiB), it reflects memory shared with other\nprocesses. It is a sum of the SHR values for all processes running\nin the sandbox, including the controlling process.\n.TP\nTX(KB/s)\nNetwork transmit speed.\n.TP\nUptime\nSandbox running time in hours:minutes:seconds format.\n.TP\nUser\nThe owner of the sandbox.\n\n.SH SECURITY PROFILES\nSeveral command line options can be passed to the program using\nprofile files. Firejail chooses the profile file as follows:\n\n1. If a profile file is provided by the user with --profile option, the profile file is loaded.\nExample:\n.PP\n.RS\n$ firejail --profile=/home/netblue/icecat.profile icecat\n.br\nReading profile /home/netblue/icecat.profile\n.br\n[...]\n.RE\n\n2. If a profile file with the same name as the application is present in ~/.config/firejail directory or\nin /etc/firejail, the profile is loaded. ~/.config/firejail takes precedence over /etc/firejail. Example:\n.PP\n.RS\n$ firejail icecat\n.br\nCommand name #icecat#\n.br\nFound icecat profile in /home/netblue/.config/firejail directory\n.br\nReading profile /home/netblue/.config/firejail/icecat.profile\n.br\n[...]\n.RE\n\n3. Use default.profile file if the sandbox\nis started by a regular user, or server.profile file if the sandbox\nis started by root. Firejail looks for these files in ~/.config/firejail directory, followed by /etc/firejail directory.\nTo disable default profile loading, use --noprofile command option. Example:\n.PP\n.RS\n$ firejail\n.br\nReading profile /etc/firejail/default.profile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...] \n.br\n\n.br\n$ firejail \\-\\-noprofile\n.br\nParent pid 8553, child pid 8554\n.br\nChild process initialized\n.br\n[...]\n.RE\n\nSee man 5 firejail-profile for profile file syntax information.\n\t\n.SH RESTRICTED SHELL\nTo configure a restricted shell, replace /bin/bash with /usr/bin/firejail in\n/etc/passwd file for each user that needs to be restricted. Alternatively,\nyou can specify /usr/bin/firejail  in adduser command:\n\nadduser \\-\\-shell /usr/bin/firejail username\n\nAdditional arguments passed to firejail executable upon login are declared in /etc/firejail/login.users file.\n\n.SH EXAMPLES\n.TP\n\\f\\firejail\nSandbox a regular /bin/bash session.\n.TP\n\\f\\firejail firefox\nStart Mozilla Firefox.\n.TP\n\\f\\firejail \\-\\-debug firefox\nDebug Firefox sandbox.\n.TP\n\\f\\firejail \\-\\-private firefox\nStart Firefox with a new, empty home directory.\n.TP\n\\f\\firejail --net=none vlc\nStart VLC in an unconnected network namespace.\n.TP\n\\f\\firejail \\-\\-net=eth0 firefox\nStart Firefox in a new network namespace. An IP address is\nassigned automatically.\n.TP\n\\f\\firejail \\-\\-net=br0 \\-\\-ip=10.10.20.5 \\-\\-net=br1 \\-\\-net=br2\nStart a /bin/bash session in a new network namespace and connect it\nto br0, br1, and br2 host bridge devices. IP addresses are assigned\nautomatically for the interfaces connected to br1 and b2\n.TP\n\\f\\firejail \\-\\-list\nList all sandboxed processes.\n.SH LICENSE\nThis program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.\n.PP\nHomepage: http://firejail.wordpress.com\n.SH SEE ALSO\n\\&\\flfiremon\\fR\\|(1),\n\\&\\flfirecfg\\fR\\|(1),\n\\&\\flfirejail-profile\\fR\\|(5),\n\\&\\flfirejail-login\\fR\\|(5)\n\n\n\n"], "filenames": ["RELNOTES", "src/firejail/main.c", "src/man/firejail.txt"], "buggy_code_start_loc": [2, 37, 79], "buggy_code_end_loc": [2, 804, 80], "fixing_code_start_loc": [3, 38, 79], "fixing_code_end_loc": [6, 824, 82], "type": "NVD-CWE-noinfo", "message": "Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument.", "other": {"cve": {"id": "CVE-2017-5206", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-23T16:59:00.417", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Firejail before 0.9.44.4, when running on a Linux kernel before 4.8, allows context-dependent attackers to bypass a seccomp-based sandbox protection mechanism via the --allow-debuggers argument."}, {"lang": "es", "value": "Firejail en versiones anteriores a 0.9.44.4, cuando se ejecuta en un Linux kernel en versiones anteriores a 4.8, permite a atacantes dependientes del contexto evitar un mecanismo seccomp-based de protecci\u00f3n de sandbox a trav\u00e9s del argumento --allow-debuggers."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.2, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firejail_project:firejail:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.44.4", "matchCriteriaId": "7CEF9414-DBF1-4FFC-BFF7-48E094599AD5"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.8", "matchCriteriaId": "28EB12EC-3BC4-4DCC-9A6A-5F810F17E8FE"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2017/01/07/5", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97120", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://blog.lizzie.io/linux-containers-in-500-loc.html#fn.51", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://firejail.wordpress.com/download-2/release-notes/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201701-62", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/netblue30/firejail/commit/6b8dba29d73257311564ee7f27b9b14758cc693e"}}