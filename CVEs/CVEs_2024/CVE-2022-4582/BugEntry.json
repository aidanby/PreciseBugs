{"buggy_code": ["<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Base_Controller extends Core_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        // Code for the real authentication system.\n        //$this->load\n        //    ->model('current_user')\n        //;\n\n        $this->load->model('visual_themes');\n        $this->load->library('template');\n\n        // Determine the current visual theme.\n        if ($this->input->get('theme') != '' && $this->input->method() == 'get' && !$this->input->is_ajax_request()) {\n\n            $theme = (string) $this->input->get('theme');\n            $this->visual_themes->set_current($theme);\n\n            parse_str(parse_url(CURRENT_URL, PHP_URL_QUERY), $query);\n            unset($query['theme']);\n            redirect(http_build_url(current_url(), array('query' => http_build_query($query))));\n        }\n\n        $this->template->set_theme($this->visual_themes->get_current());\n\n        //$default_title = config_item('default_title');\n        //$default_title = $this->settings->lang('site_name');\n        $default_title = 'Application Starter 4 Public Edition';\n        //\n\n        if ($default_title != '') {\n             $this->template->title($default_title);\n        }\n\n        $this->template\n            ->set_layout('default')\n            ->set_metadata('robots', 'noindex,nofollow,noarchive')\n            ->set_breadcrumb('<i class=\"dashboard icon\"></i>'.$this->lang->line('ui_home'), site_url())\n        ;\n    }\n\n    // Code for the real authentication system.\n    //protected function _login($username, $password) {\n    //\n    //    // Break the previous login if there is any.\n    //    $this->_logout();\n    //\n    //    return $this->current_user->login($username, $password);\n    //}\n\n    protected function _login($username, $password) {\n\n        // Break the previous login if there is any.\n        $this->_logout();\n\n        $this->session->set_userdata('user_logged', true);\n\n        // This is a method for demo purpose, it always returns TRUE.\n        return true;\n    }\n\n    // Code for the real authentication system.\n    //protected function _logout() {\n    //\n    //    // Don't do anything if a user has not been logged.\n    //    if (!$this->current_user->is_logged_in()) {\n    //        return;\n    //    }\n    //\n    //    $this->current_user->logout();\n    //}\n    //\n    //protected function _last_login_error() {\n    //\n    //    return $this->current_user->last_login_error();\n    //}\n\n    protected function _logout() {\n\n        // Don't do anything if a user has not been logged.\n        if (!$this->session->userdata('user_logged')) {\n            return;\n        }\n\n        // If the public site and the administration site\n        // share same session space, consider the following:\n        //$this->session->unset_userdata('user_logged');\n        //\n\n        $this->session->sess_destroy();\n    }\n\n    protected function _check_access() {\n\n        // Change this condition according to your system of authentication.\n        if (!$this->session->userdata('user_logged')) {\n        // Code for the real authentication system.\n        //if (!$this->current_user->is_logged_in()) {\n\n            if ($this->input->is_ajax_request()) {\n\n                $this->session->set_flashdata('warning_message', $this->lang->line('ui_session_expired'));\n\n                set_status_header(403);\n\n                exit;\n            }\n\n            if ($this->uri->total_segments() != 0) {\n\n                // Session expiration message is not to be shown\n                // when we are comming from the protected home page.\n                $this->session->set_flashdata('warning_message', $this->lang->line('ui_session_expired'));\n            }\n\n            if ($this->input->method() != 'get') {\n                redirect('login');\n            }\n\n            redirect(http_build_url(site_url('login'), array('query' => http_build_query(array('continue' => CURRENT_URL)))));\n        }\n\n        return true;\n    }\n\n    protected function _set_title($title, $title_short = null) {\n\n        if ($title_short == '') {\n            $title_short = $title;\n        }\n\n        $this->registry->set('title', $title);\n\n        $this->template\n            ->prepend_title($title_short)\n            ->set_breadcrumb($title_short)\n        ;\n    }\n\n    protected function _set_header_icon($icon) {\n\n        if (trim((string) $icon) != '') {\n            //$this->registry->set('header_icon', '<i class=\"circular '.$icon.' icon\"></i>');\n            $this->registry->set('header_icon', '<i class=\"'.$icon.' icon\"></i>');\n        } else {\n            $this->registry->delete('header_icon');\n        }\n    }\n\n    protected function _set_header_image($url, $attributes = null) {\n\n        if (trim((string) $url) != '') {\n            $this->registry->set('header_image', '<img src=\"'.html_attr_escape($url).'\" '.html_attr($attributes).' />');\n        } else {\n            $this->registry->delete('header_image');\n        }\n    }\n\n    protected function _set_subtitle($subtitle) {\n\n        $this->registry->set('subtitle', $subtitle);\n    }\n\n    protected function _set_nav($id) {\n\n        $this->registry->set('nav', $id);\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed.');\n\nclass Login_controller extends Base_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load\n            ->library('kcaptcha', null, 'captcha')\n            ->language('captcha')\n        ;\n\n        $this->template->set_layout('login');\n    }\n\n    public function index() {\n\n        $this->load->library('form_validation');\n\n        $login_rules = array(\n            array(\n                'field' => 'username',\n                'label' => $this->lang->line('ui_username').' / '.'E-mail',\n                'rules' => 'nohtml|trim|max_length[256]|required'\n            ),\n            array(\n                'field' => 'password',\n                'label' => 'lang:ui_password',\n                'rules' => 'nohtml|trim|max_length[256]|required'\n            ),\n            array(\n                'field' => 'captcha',\n                'label' => 'Captcha',\n                'rules' => 'nohtml|trim|max_length[256]|callback__captcha'\n            ),\n        );\n\n        $this->form_validation->set_rules($login_rules);\n\n        if ($this->form_validation->run()) {\n\n            $username = $this->input->post('username');\n            $password = $this->input->post('password');\n\n            // Implement your own login system.\n            if ($this->_login($username, $password)) {\n\n                if ($this->input->get('continue')) {\n                    redirect($this->input->get('continue'));\n                }\n\n                $this->session->set_flashdata('confirmation_message', '<nobr>Hello, <strong>'.$username.'</strong>.</nobr>');\n                redirect(site_url());\n\n            } else {\n\n                $error_message = 'Wrong username or password.';\n                // Code for the real authentication system.\n                //switch ($this->_last_login_error()) {\n                //\n                //    case LOGIN_USER_UNVERIFIED:\n                //        $error_message = 'The user account has not been verified by e-mail.';\n                //        break;\n                //\n                //    case LOGIN_USER_SUSPENDED:\n                //        $error_message = 'The user has been suspended';\n                //        break;\n                //\n                //    default:\n                //        $error_message = $error_message = 'Wrong username or password.';\n                //        break;\n                //}\n\n                $this->template->set('error_message', $error_message);\n            }\n\n        } elseif (validation_errors()) {\n\n            $this->template->set('error_message', '<ul class=\"list\">'.validation_errors('<li>', '</li>').'</ul>');\n            $this->template->set('validation_errors', validation_errors_array());\n        }\n\n        $this->captcha->clear();\n\n        $this->template\n            ->prepend_title('Login')\n            ->set_partial('scripts', 'login_scripts')\n            ->build('login');\n    }\n\n    public function _captcha($string) {\n\n        $captcha_valid = $this->captcha->valid($string);\n        $this->captcha->clear();\n\n        if (!$captcha_valid) {\n            $this->form_validation->set_message('_captcha', $this->lang->line('captcha.validation_error'));\n        }\n\n        return $captcha_valid;\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Theme_switcher_widget_controller extends Base_Widget_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load->model('visual_themes');\n    }\n\n    public function index($display_type = null) {\n\n        $display_type = (string) $display_type;\n\n        if ($display_type == 'test') {\n            $display_type = '';\n        }\n\n        if (!in_array($display_type, array('', 'navbar', 'navbar_mobile'))) {\n            $display_type = '';\n        }\n\n        $theme_switcher = $this->visual_themes->get_all();\n\n        if (empty($theme_switcher) || count($theme_switcher) == 1) {\n            return;\n        }\n\n        foreach ($theme_switcher as $key => $value) {\n\n            $theme_switcher[$key]['label'] = $value['name'];\n            $theme_switcher[$key]['link'] = http_build_url(CURRENT_URL, array('query' => http_build_query(array('theme' => $value['key']))), HTTP_URL_JOIN_QUERY);\n\n            if ($value['key'] == $this->visual_themes->get_current()) {\n                $theme_switcher[$key]['active'] = true;\n            }\n        }\n\n        $this->load->view('theme_switcher_widget'.($display_type == '' ? '' : '_'.$display_type), compact('theme_switcher'));\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Base_Controller extends Core_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load\n            ->model('visual_themes')\n            ->library('template')\n        ;\n\n        // Determine the current visual theme.\n        if ($this->input->get('theme') != '' && $this->input->method() == 'get' && !$this->input->is_ajax_request()) {\n\n            $theme = (string) $this->input->get('theme');\n            $this->visual_themes->set_current($theme);\n\n            parse_str(parse_url(CURRENT_URL, PHP_URL_QUERY), $query);\n            unset($query['theme']);\n            redirect(http_build_url(current_url(), array('query' => http_build_query($query))));\n        }\n\n        $this->template->set_theme($this->visual_themes->get_current());\n\n        $default_title = config_item('default_title');\n        $default_description = config_item('default_description');\n        $default_keywords = config_item('default_keywords');\n\n        if ($default_title != '') {\n             $this->template->title($default_title);\n        }\n\n        if ($default_description != '') {\n            $this->template->set_metadata('description', $default_description);\n        }\n\n        if ($default_keywords != '') {\n            $this->template->set_metadata('keywords', $default_keywords);\n        }\n\n        $this->template->set_breadcrumb('<i class=\"home icon\"></i> '.$this->lang->line('ui_home'), site_url());\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Theme_switcher_widget_controller extends Base_Widget_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load->model('visual_themes');\n    }\n\n    public function index($display_type = null) {\n\n        $display_type = (string) $display_type;\n\n        if ($display_type == 'test') {\n            $display_type = '';\n        }\n\n        if (!in_array($display_type, array('', 'navbar', 'navbar_mobile'))) {\n            $display_type = '';\n        }\n\n        $theme_switcher = $this->visual_themes->get_all();\n\n        if (empty($theme_switcher) || count($theme_switcher) == 1) {\n            return;\n        }\n\n        foreach ($theme_switcher as $key => $value) {\n\n            $theme_switcher[$key]['label'] = $value['name'];\n            $theme_switcher[$key]['link'] = http_build_url(CURRENT_URL, array('query' => http_build_query(array('theme' => $value['key']))), HTTP_URL_JOIN_QUERY);\n\n            if ($value['key'] == $this->visual_themes->get_current()) {\n                $theme_switcher[$key]['active'] = true;\n            }\n        }\n\n        $this->load->view('theme_switcher_widget'.($display_type == '' ? '' : '_'.$display_type), compact('theme_switcher'));\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\n// CLI -------------------------------------------------------------------------\n\nif (!function_exists('escape_shell_arg')) {\n\n    /**\n     * Escapes command line shell arguments, this is an alternative\n     * to the built-in PHP function escapeshellarg($arg).\n     *\n     * @param string $arg   The input string.\n     * @return string\n     *\n     * @see https://www.php.net/manual/en/function.escapeshellarg.php\n     * @see http://stackoverflow.com/questions/6427732/how-can-i-escape-an-arbitrary-string-for-use-as-a-command-line-argument-in-windo\n     * @see http://markushedlund.com/dev-tech/php-escapeshellarg-with-unicodeutf-8-support\n     *\n     * @author Ivan Tcholakov <ivantcholakov@gmail.com>, 2016-2020.\n     * @license The MIT License (MIT)\n     * @link http://opensource.org/licenses/MIT\n     */\n    function escape_shell_arg($arg)\n    {\n        if (stripos(PHP_OS, 'win') === 0) { // Beware about 'Darwin', etc.\n\n            // PHP engine is built for Windows.\n\n            // Sequence of backslashes followed by a double quote:\n            // double up all the backslashes and escape the double quote\n            $arg = preg_replace('/(\\\\*)\"/', '$1$1\\\\\"', $arg);\n\n            // Sequence of backslashes followed by the end of the arg,\n            // which will become a double quote later:\n            // double up all the backslashes\n            $arg = preg_replace('/(\\\\*)$/', '$1$1', $arg);\n\n            // All other backslashes do not need modifying\n\n            // Double-quote the whole thing\n            $arg = '\"'.$arg.'\"';\n\n            // Escape shell metacharacters.\n            $arg = preg_replace('/([\\(\\)%!^\"<>&|;, ])/', '^$1', $arg);\n\n            return $arg;\n        }\n\n        // PHP engine is built for Linux or similar.\n\n        return \"'\" . str_replace(\"'\", \"'\\\\''\", $arg) . \"'\";\n    }\n\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('get_config'))\n{\n    /**\n     * Loads the main config.php file\n     *\n     * This function lets us grab the config file even if the Config class\n     * hasn't been instantiated yet\n     *\n     * @param     array\n     * @return    array\n     */\n    function &get_config(Array $replace = array())\n    {\n        static $config;\n\n        if (empty($config))\n        {\n            // Added by Ivan Tcholakov, 02-OCT-2013.\n            // Loading the common configuration file first.\n            $file_path = COMMONPATH.'config/config.php';\n            $found = FALSE;\n            if (file_exists($file_path))\n            {\n                $found = TRUE;\n                require($file_path);\n            }\n            if (file_exists($file_path = COMMONPATH.'config/'.ENVIRONMENT.'/config.php'))\n            {\n                require($file_path);\n            }\n            //\n\n            $file_path = APPPATH.'config/config.php';\n            // Removed by Ivan Tcholakov, 02-OCT-2013.\n            //$found = FALSE;\n            //\n            if (file_exists($file_path))\n            {\n                $found = TRUE;\n                require($file_path);\n            }\n\n            // Is the config file in the environment folder?\n            if (file_exists($file_path = APPPATH.'config/'.ENVIRONMENT.'/config.php'))\n            {\n                require($file_path);\n            }\n            elseif ( ! $found)\n            {\n                set_status_header(503);\n                echo 'The configuration file does not exist.';\n                exit(3); // EXIT_CONFIG\n            }\n\n            // Does the $config array exist in the file?\n            if ( ! isset($config) OR ! is_array($config))\n            {\n                set_status_header(503);\n                echo 'Your config file does not appear to be formatted correctly.';\n                exit(3); // EXIT_CONFIG\n            }\n        }\n\n        // Are any values being dynamically added or replaced?\n        foreach ($replace as $key => $val)\n        {\n            $config[$key] = $val;\n        }\n\n        return $config;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('load_class'))\n{\n    /**\n     * Class registry\n     *\n     * This function acts as a singleton. If the requested class does not\n     * exist it is instantiated and set to a static variable. If it has\n     * previously been instantiated the variable is returned.\n     *\n     * @param       string      the class name being requested\n     * @param       string      the directory where the class should be found\n     * @param       mixed       an optional argument to pass to the class constructor\n     * @return      object\n     */\n    function &load_class($class, $directory = 'libraries', $param = NULL)\n    {\n        static $_classes = array();\n\n        // Does the class exist? If so, we're done...\n        if (isset($_classes[$class]))\n        {\n            return $_classes[$class];\n        }\n\n        $name = FALSE;\n\n        // Look for the class first in the local application/libraries folder\n        // then in the native system/libraries folder\n        foreach (array(APPPATH, BASEPATH) as $path)\n        {\n            if (file_exists($path.$directory.'/'.$class.'.php'))\n            {\n                $name = 'CI_'.$class;\n\n                if (!class_exists($name, FALSE))\n                {\n                    require_once $path.$directory.'/'.$class.'.php';\n                }\n\n                break;\n            }\n        }\n\n        // Added by Ivan Tcholakov, 11-OCT-2013.\n        // Load customized core classes.\n        if (file_exists(COMMONPATH.\"$directory/Core_$class.php\"))\n        {\n            $name = 'Core_'.$class;\n\n            if (!class_exists($name, FALSE))\n            {\n                require_once COMMONPATH.\"$directory/Core_$class.php\";\n            }\n        }\n        //\n\n        // Is the request a class extension? If so we load it too\n        if (file_exists(APPPATH.$directory.'/'.config_item('subclass_prefix').$class.'.php'))\n        {\n            $name = config_item('subclass_prefix').$class;\n\n            if (!class_exists($name, FALSE))\n            {\n                require_once APPPATH.$directory.'/'.config_item('subclass_prefix').$class.'.php';\n            }\n        }\n\n        // Did we find the class?\n        if ($name === FALSE)\n        {\n            // Note: We use exit() rather then show_error() in order to avoid a\n            // self-referencing loop with the Exceptions class\n            set_status_header(503);\n            echo 'Unable to locate the specified class: '.$class.'.php';\n            exit(5); // EXIT_UNK_CLASS\n        }\n\n        // Keep track of what we just loaded\n        is_loaded($class);\n\n        $_classes[$class] = new $name();\n        return $_classes[$class];\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('get_mimes'))\n{\n    /**\n     * Returns the MIME types array from config/mimes.php\n     *\n     * @return    array\n     */\n    function &get_mimes()\n    {\n        static $_mimes;\n\n        if (empty($_mimes))\n        {\n            $_mimes = file_exists(COMMONPATH.'config/mimes.php')\n                ? include(COMMONPATH.'config/mimes.php')\n                : array();\n\n            if (file_exists(COMMONPATH.'config/'.ENVIRONMENT.'/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(COMMONPATH.'config/'.ENVIRONMENT.'/mimes.php'));\n            }\n\n            if (file_exists(APPPATH.'config/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(APPPATH.'config/mimes.php'));\n            }\n\n            if (file_exists(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'));\n            }\n        }\n\n        return $_mimes;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('_error_handler'))\n{\n    /**\n     * Error Handler\n     *\n     * This is the custom error handler that is declared at the (relative)\n     * top of CodeIgniter.php. The main reason we use this is to permit\n     * PHP errors to be logged in our own log files since the user may\n     * not have access to server logs. Since this function effectively\n     * intercepts PHP errors, however, we also need to display errors\n     * based on the current error_reporting level.\n     * We do that with the use of a PHP error template.\n     *\n     * @param       int         $severity\n     * @param       string      $message\n     * @param       string      $filepath\n     * @param       int         $line\n     * @return      void\n     */\n    function _error_handler($severity, $message, $filepath, $line)\n    {\n        // We don't bother with \"strict\" notices since they tend to fill up\n        // the log file with excess information that isn't normally very helpful.\n        // For example, if you are running PHP 5 and you use version 4 style\n        // class functions (without prefixes like \"public\", \"private\", etc.)\n        // you'll get notices telling you that these have been deprecated.\n        if ($severity == E_STRICT)\n        {\n            return;\n        }\n\n        $is_error = (((E_ERROR | E_PARSE | E_COMPILE_ERROR | E_CORE_ERROR | E_USER_ERROR) & $severity) === $severity);\n\n        // When an error occurred, set the status header to '500 Internal Server Error'\n        // to indicate to the client something went wrong.\n        // This can't be done within the $_error->show_php_error method because\n        // it is only called when the display_errors flag is set (which isn't usually\n        // the case in a production environment) or when errors are ignored because\n        // they are above the error_reporting threshold.\n        if ($is_error)\n        {\n            set_status_header(500);\n        }\n\n        // Should we ignore the error? We'll get the current error_reporting\n        // level and add its bits with the severity bits to find out.\n        if (($severity & error_reporting()) !== $severity)\n        {\n            return;\n        }\n\n        $_error =& load_class('Exceptions', 'core');\n        $_error->log_exception($severity, $message, $filepath, $line);\n\n        // Should we display the error?\n        if (str_ireplace(array('off', 'none', 'no', 'false', 'null'), '', ini_get('display_errors')))\n        {\n            $_error->show_php_error($severity, $message, $filepath, $line);\n        }\n\n        // If the error is fatal, the execution of the script should be stopped because\n        // errors can't be recovered from. Halting the script conforms with PHP's\n        // default error handling. See http://www.php.net/manual/en/errorfunc.constants.php\n        if ($is_error)\n        {\n            exit(1); // EXIT_ERROR\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------\n\n// Escapers\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('html_attr_escape')) {\n\n    function html_attr_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'html_attr');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('js_escape')) {\n\n    function js_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'js');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('css_escape')) {\n\n    function css_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'css');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('url_escape')) {\n\n    function url_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'url');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 28-JUN-2016.\n// An implementation of the function esc(), introduced in CodeIgniter 4.\n// The original CI4 function will be watched further for possible changes.\n// Valid context values: 'html', 'js', 'css', 'url', 'attr', 'raw', null\nif (!function_exists('esc')) {\n\n    function esc($data, $context = 'html', $charset = null) {\n\n        if (is_array($data)) {\n\n            foreach ($data as $key => & $value) {\n                $value = esc($value, $context, $charset);\n            }\n\n        } elseif (is_string($data)) {\n\n            $context = strtolower($context);\n\n            if (empty($context) || $context == 'raw') {\n                return $data;\n            }\n\n            if (!in_array($context, array('html', 'js', 'css', 'url', 'attr'))) {\n                throw new InvalidArgumentException('Invalid escape context provided.');\n            }\n\n            if ($context == 'attr') {\n                $context = 'html_attr';\n            }\n\n            $twig = & _get_simple_twig_instance($charset);\n\n            $data = call_user_func($twig->getFilter('escape')->getCallable(), $twig, $data, $context);\n        }\n\n        return $data;\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('_get_simple_twig_instance')) {\n\n    function & _get_simple_twig_instance($charset = null) {\n\n        static $instance = array();\n\n        $charset = (string) $charset;\n\n        if ($charset == '') {\n            $charset = config_item('charset');\n        }\n\n        $charset = strtoupper($charset);\n\n        if (!isset($instance[$charset])) {\n\n            $instance[$charset] = new \\Twig\\Environment(\n                new \\Parser_Twig_Loader_Filesystem([]),\n                array(\n                    'debug' => false,\n                    'charset' => $charset,\n                    'strict_variables' => false,\n                    'autoescape' => 'html',\n                    'cache' => false,\n                    'auto_reload' => null,\n                    'optimizations' => -1,\n                )\n            );\n        }\n\n        return $instance[$charset];\n    }\n\n}\n\n// End Escapers\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('_stringify_attributes'))\n{\n    /**\n     * Stringify attributes for use in HTML tags.\n     *\n     * Helper function used to convert a string, array, or object\n     * of attributes to a string.\n     *\n     * @param       mixed       string, array, object\n     * @param       bool\n     * @return      string\n     */\n    function _stringify_attributes($attributes, $js = FALSE)\n    {\n        if (empty($attributes))\n        {\n            return NULL;\n        }\n\n        // Added by Ivan Tcholakov, 03-JAN-2016.\n        if (!$js)\n        {\n            return html_attr($attributes);\n        }\n        //\n\n        if (is_string($attributes))\n        {\n            return ' '.$attributes;\n        }\n\n        $attributes = (array) $attributes;\n\n        $atts = '';\n        foreach ($attributes as $key => $val)\n        {\n            $atts .= ($js) ? $key.'='.$val.',' : ' '.$key.'=\"'.$val.'\"';\n        }\n\n        return rtrim($atts, ',');\n    }\n}\n\nif ( ! function_exists('html_code'))\n{\n    // Added by Ivan Tcholakov, 22-JAN-2016.\n    function html_code($string, $begin = null, $end = null)\n    {\n        if ($begin === null)\n        {\n            $begin = '<pre><code>';\n        }\n\n        if ($end === null)\n        {\n            $end = '</code></pre>';\n        }\n\n        return $begin.html_escape($string).$end;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\n// Processing HTML Attributes\n// Ivan Tcholakov, 2016.\n\nif (!function_exists('html_attr')) {\n\n    function html_attr($attributes, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_has')) {\n\n    function html_attr_has($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name) !== null;\n    }\n\n}\n\nif (!function_exists('html_attr_has_empty')) {\n\n    function html_attr_has_empty($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name) == '';\n    }\n\n}\n\nif (!function_exists('html_attr_get')) {\n\n    function html_attr_get($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name);\n    }\n\n}\n\nif (!function_exists('html_attr_set')) {\n\n    function html_attr_set($attributes, $name, $value = null, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->setAttribute($name, $value);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_merge')) {\n\n    function html_attr_merge($attributes1, $attributes2, $return_as_array = false) {\n\n        $attr1 = new HTML_Attributes($attributes1);\n        $attr2 = new HTML_Attributes($attributes2);\n\n        $class2 = $attr2->getAttribute('class');\n        $attr2->removeAttribute('class');\n        $attr1->addClass($class2);\n\n        $attr1->mergeAttributes($attr2->getAttributes());\n\n        if (trim((string) $attr1->getAttribute('class')) == '') {\n            $attr1->removeAttribute('class');\n        }\n\n        return $attr1->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_remove')) {\n\n    function html_attr_remove($attributes, $name, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->removeAttribute($name);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_has_class')) {\n\n    function html_attr_has_class($attributes, $class) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->hasClass($class);\n    }\n\n}\n\nif (!function_exists('html_attr_add_class')) {\n\n    function html_attr_add_class($attributes, $class, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->addClass($class);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_remove_class')) {\n\n    function html_attr_remove_class($attributes, $class, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->removeClass($class);\n\n        if (trim((string) $attr->getAttribute('class')) == '') {\n            $attr->removeAttribute('class');\n        }\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\n// End Processing HTML Attributes\n\n// -----------------------------------------------------------------------------\n\n// HTML Tags\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag')) {\n\n    function html_tag($tag = null, $attributes = array(), $content = false) {\n\n        $tag = trim(@ (string) $tag);\n\n        $has_content = $content !== false && $content !== null;\n\n        switch (strtolower($tag)) {\n\n            case 'script':\n\n                $has_content = true;\n                break;\n        }\n\n        return '<'.$tag.html_attr($attributes).($has_content ? '>'.$content.'</'.$tag.'>' : ' />');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag_open')) {\n\n    function html_tag_open($tag, $attributes = array()) {\n\n        $tag = trim(@ (string) $tag);\n\n        return '<'.$tag.html_attr($attributes).'>';\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag_close')) {\n\n    function html_tag_close($tag) {\n\n        $tag = trim(@ (string) $tag);\n\n        return '</'.$tag.'>';\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\n// See http://stackoverflow.com/questions/2519845/how-to-check-if-string-is-a-valid-xml-element-name\nif (!function_exists('xml_tag_valid_name')) {\n\n    function xml_tag_valid_name($name) {\n\n        static $pattern = '~\n# XML 1.0 Name symbol PHP PCRE regex <http://www.w3.org/TR/REC-xml/#NT-Name>\n(?(DEFINE)\n    (?<NameStartChar> [:A-Z_a-z\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\x{2FF}\\\\x{370}-\\\\x{37D}\\\\x{37F}-\\\\x{1FFF}\\\\x{200C}-\\\\x{200D}\\\\x{2070}-\\\\x{218F}\\\\x{2C00}-\\\\x{2FEF}\\\\x{3001}-\\\\x{D7FF}\\\\x{F900}-\\\\x{FDCF}\\\\x{FDF0}-\\\\x{FFFD}\\\\x{10000}-\\\\x{EFFFF}])\n    (?<NameChar>      (?&NameStartChar) | [.\\\\-0-9\\\\xB7\\\\x{0300}-\\\\x{036F}\\\\x{203F}-\\\\x{2040}])\n    (?<Name>          (?&NameStartChar) (?&NameChar)*)\n)\n^(?&Name)$\n~ux';\n\n        return 1 === preg_match($pattern, $name);\n    }\n\n}\n\n// End HTM Tags\n\n// -----------------------------------------------------------------------------\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed.');\n\nif (!function_exists('form_ckeditor')) {\n\n    // Added by Ivan Tcholakov, 20-FEB-2016.\n    function form_ckeditor($name, $value = null, $config_name = null, $options = array(), $events = array()) {\n\n        $config_name = trim(@ (string) $config_name);\n\n        if ($config_name == '') {\n            $config_name = 'user';\n        }\n\n        $config = CKEditorConfig::get($config_name);\n\n        if (empty($config)) {\n\n            // Avoid these defaults, make sure that a configuration file exists.\n            $config = array();\n\n            $config['basePath'] = DEFAULT_BASE_URL.'assets/js/ckeditor/';\n            $config['config']['baseHref'] = http_build_url(DEFAULT_BASE_URL.'../');\n            $config['config']['fullPage'] = false;\n            $config['config']['language'] = language_ckeditor();\n            $config['config']['defaultLanguage'] = 'en';\n            $config['config']['contentsLanguage'] = language_ckeditor();\n            $config['config']['contentsLangDirection'] = get_instance()->lang->direction();\n\n            $config['config']['contentsCss'][] = DEFAULT_BASE_URL.'assets/css/lib/editor.css';\n\n            $config['config']['width'] = '';\n            $config['config']['height'] = '100';\n            $config['config']['resize_enabled'] = false;\n            $config['textareaAttributes'] = array('rows' => 8, 'cols' => 60);\n\n            $config['config']['entities_latin'] = false;\n            $config['config']['entities_greek'] = false;\n\n            $config['config']['forcePasteAsPlainText'] = true;\n            $config['config']['toolbarCanCollapse'] = false;\n\n            $config['config']['allowedContent'] = true;\n        }\n\n        $initialized = true;\n\n        if (is_object($options)) {\n            $options = get_object_vars($object);\n        }\n\n        if (!empty($options) && is_array($options)) {\n\n            if (isset($options['initialized'])) {\n\n                $initialized = !empty($options['initialized']);\n                unset($options['initialized']);\n            }\n\n            if (isset($options['basePath'])) {\n                unset($options['basePath']);\n            }\n\n            if (isset($options['textareaAttributes'])) {\n\n                if (is_object($options['textareaAttributes'])) {\n                    $options['textareaAttributes'] = get_object_vars($options['textareaAttributes']);\n                }\n\n                if (is_array($options['textareaAttributes'])) {\n                    $config['textareaAttributes'] = $options['textareaAttributes'];\n                }\n\n                unset($options['textareaAttributes']);\n            }\n\n            if (!empty($options)) {\n                $config['config'] = array_merge($config['config'], $options);\n            }\n        }\n\n        $ckeditor = new CKEditor($config['basePath']);\n        $ckeditor->returnOutput = true;\n        $ckeditor->initialized = $initialized;\n        $ckeditor->textareaAttributes = $config['textareaAttributes'];\n\n        // Repopulate the value when form validation fails.\n\n        $CI = get_instance();\n\n        $value_editor = (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($name))\n            ? $CI->form_validation->set_value($name, $value)\n            : $CI->input->post($name, FALSE);\n\n        isset($value_editor) OR $value_editor = $value;\n\n        return $ckeditor->editor($name, $value_editor, $config['config'], $events);\n    }\n\n}\n\nif (!function_exists('form_per_page')) {\n\n    // For serving pagination: A select box for choosing number of items to be shown per page.\n    function form_per_page($name = null, $options = null, $selected = null, $extra_attributes = null, $min = null, $max = null) {\n\n        $ci = get_instance();\n\n        if (empty($options) || !is_array($options)) {\n            $options = array(5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500, 1000);\n        }\n\n        $min = (int) $min;\n\n        if ($min <= 0) {\n            $min = $options[0];\n        }\n\n        $all = $max == 'all';\n\n        $max = (int) $max;\n\n        if ($max <= 0) {\n            $max = $options[count($options) - 1];\n        }\n\n        if ($max < $min) {\n            $max = $min;\n        }\n\n        $result_options = array();\n\n        foreach ($options as $option) {\n\n            if ($option >= $min && $option <= $max) {\n                $result_options[(string) $option] = $ci->lang->line('ui_per_page', $option);\n            }\n        }\n\n        if ($all) {\n            $result_options['all'] = '-- '.$ci->lang->line('ui_all').' --';\n        }\n\n        return form_dropdown($name, $result_options, $selected, $extra_attributes);\n    }\n\n}\n\n//------------------------------------------------------------------------------\n\nif ( ! function_exists('form_open'))\n{\n    /**\n     * Form Declaration\n     *\n     * Creates the opening portion of the form.\n     *\n     * @param       string      the URI segments of the form destination\n     * @param       array       a key/value pair of attributes\n     * @param       array       a key/value pair hidden data\n     * @return      string\n     */\n    function form_open($action = '', $attributes = array(), $hidden = array())\n    {\n        $CI =& get_instance();\n\n        // If no action is provided then set to the current url\n        if ( ! $action)\n        {\n            // Modified by Ivan Tcholakov, 23-FEB-2015.\n            //$action = $CI->config->site_url($CI->uri->uri_string());\n            $action = CURRENT_URL;\n            //\n        }\n        // If an action is not a full URL then turn it into one\n        elseif (strpos($action, '://') === FALSE)\n        {\n            $action = $CI->config->site_url($action);\n        }\n\n        $attributes = _attributes_to_string($attributes);\n\n        if (stripos($attributes, 'method=') === FALSE)\n        {\n            $attributes .= ' method=\"post\"';\n        }\n\n        if (stripos($attributes, 'accept-charset=') === FALSE)\n        {\n            $attributes .= ' accept-charset=\"'.strtolower(config_item('charset')).'\"';\n        }\n\n        $form = '<form action=\"'.$action.'\"'.$attributes.\">\\n\";\n\n        if (is_array($hidden))\n        {\n            foreach ($hidden as $name => $value)\n            {\n                $form .= '<input type=\"hidden\" name=\"'.$name.'\" value=\"'.form_prep($value).'\" />'.\"\\n\";\n            }\n        }\n\n        // Add CSRF field if enabled, but leave it out for GET requests and requests to external websites\n        // Modified by Ivan Tcholakov, 04-NOV-2011.\n        //if ($CI->config->item('csrf_protection') === TRUE && strpos($action, $CI->config->base_url()) !== FALSE && ! stripos($form, 'method=\"get\"'))\n        // Aways add the hidden value for protecting AJAX requests, when the global configuration option 'csrf_protection' is off.\n        if (strpos($action, $CI->config->base_url()) !== FALSE && ! stripos($form, 'method=\"get\"'))\n        //\n        {\n            // Prepend/append random-length \"white noise\" around the CSRF\n            // token input, as a form of protection against BREACH attacks\n            if (FALSE !== ($noise = $CI->security->get_random_bytes(1)))\n            {\n                list(, $noise) = unpack('c', $noise);\n            }\n            else\n            {\n                $noise = mt_rand(-128, 127);\n            }\n\n            // Prepend if $noise has a negative value, append if positive, do nothing for zero\n            $prepend = $append = '';\n            if ($noise < 0)\n            {\n                $prepend = str_repeat(\" \", abs($noise));\n            }\n            elseif ($noise > 0)\n            {\n                $append  = str_repeat(\" \", $noise);\n            }\n\n            $form .= sprintf(\n                '%s<input type=\"hidden\" name=\"%s\" value=\"%s\" />%s%s',\n                $prepend,\n                $CI->security->get_csrf_token_name(),\n                $CI->security->get_csrf_hash(),\n                $append,\n                \"\\n\"\n            );\n        }\n\n        return $form;\n    }\n}\n\nif ( ! function_exists('has_validation_error'))\n{\n    // Added by Ivan Tcholakov, 20-OCT-2015.\n    /**\n     * This function informs whether there is at least one error after validation.\n     * @return bool     TRUE if there is an error (or errors), FALSE otherwise.\n     */\n    function has_validation_error()\n    {\n        if (FALSE === ($OBJ =& _get_validation_object()))\n        {\n            return FALSE;\n        }\n\n        return $OBJ->has_error();\n    }\n}\n\nif ( ! function_exists('validation_errors_array'))\n{\n    function validation_errors_array()\n    {\n        if (FALSE === ($OBJ =& _get_validation_object()))\n        {\n            return array();\n        }\n\n        return $OBJ->error_array();\n    }\n}\n\nif ( ! function_exists('build_validation_message'))\n{\n    /*\n     * This function might be useful for client-side validation - preparing messages.\n     * Sample JavaScript fragment for jQuery Validation Plugin:\n     * ...\n     * messages: {\n     *     name: {\n     *        required: <?php echo json_encode(build_validation_message('required', $this->lang->line('ui_title'))); ?>\n     *     },\n     * },\n     * ...\n     */\n    function build_validation_message($rule, $field = NULL, $param = NULL)\n    {\n        get_instance()->lang->load('form_validation');\n\n        $line = get_instance()->lang->line('form_validation_'.$rule);\n\n        return str_replace(array('{field}', '{param}'), array($field, $param), $line);\n    }\n}\n\nif ( ! function_exists('form_value'))\n{\n    /**\n     * Form Value (Raw)\n     *\n     * Grabs a value from the POST array for the specified field so you can\n     * re-populate fields in some special or cutting-edge cases. If Form Validation\n     * is active it retrieves the info from the validation class.\n     *\n     * Important: The result is not HTML-escaped or HTML-attribute-escaped,\n     * you might need to do it additionaly according to the context of usage.\n     *\n     * @param       string      $field          Field name\n     * @param       string      $default        Default value\n     * @return      string\n     * @deprecated\n     */\n    function form_value($field, $default = '')\n    {\n        return set_value($field, $default, FALSE);\n    }\n}\n\n\n// Functions for BC compatibility with CI development before 21-JAN-2015.\n// See: https://github.com/bcit-ci/CodeIgniter/issues/1953\n// See: https://github.com/bcit-ci/CodeIgniter/issues/2477\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_hidden'))\n{\n    /**\n     * Hidden Input Field\n     *\n     * Generates hidden fields. You can pass a simple key/value string or\n     * an associative array with multiple values.\n     *\n     * @param       mixed       $name           Field name\n     * @param       string      $value          Field value\n     * @param       bool        $recursing\n     * @return      string\n     */\n    function form_hidden($name, $value = '', $recursing = FALSE)\n    {\n        static $form;\n\n        if ($recursing === FALSE)\n        {\n            $form = \"\\n\";\n        }\n\n        if (is_array($name))\n        {\n            foreach ($name as $key => $val)\n            {\n                form_hidden($key, $val, TRUE);\n            }\n\n            return $form;\n        }\n\n        if ( ! is_array($value))\n        {\n            $form .= '<input type=\"hidden\" name=\"'.$name.'\" value=\"'.form_prep($value).\"\\\" />\\n\";\n        }\n        else\n        {\n            foreach ($value as $k => $v)\n            {\n                $k = is_int($k) ? '' : $k;\n                form_hidden($name.'['.$k.']', $v, TRUE);\n            }\n        }\n\n        return $form;\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_textarea'))\n{\n    /**\n     * Textarea field\n     *\n     * @param       mixed       $data\n     * @param       string      $value\n     * @param       string      $extra\n     * @return      string\n     */\n    function form_textarea($data = '', $value = '', $extra = '')\n    {\n        $defaults = array(\n            'name' => is_array($data) ? '' : $data,\n            'cols' => '40',\n            'rows' => '10'\n        );\n\n        if ( ! is_array($data) OR ! isset($data['value']))\n        {\n            $val = $value;\n        }\n        else\n        {\n            $val = $data['value'];\n            unset($data['value']); // textareas don't use the value attribute\n        }\n\n        return '<textarea '._parse_form_attributes($data, $defaults)._attributes_to_string($extra).'>'.form_prep($val, TRUE).\"</textarea>\\n\";\n    }\n}\n\n// --------------------------------------------------------------------\n\nif ( ! function_exists('form_dropdown'))\n{\n    /**\n     * Drop-down Menu\n     *\n     * @param       mixed       $data\n     * @param       mixed       $options\n     * @param       mixed       $selected\n     * @param       mixed       $extra\n     * @return      string\n     */\n    function form_dropdown($data = '', $options = array(), $selected = array(), $extra = '')\n    {\n        $defaults = array();\n\n        if (is_array($data))\n        {\n            if (isset($data['selected']))\n            {\n                $selected = $data['selected'];\n                unset($data['selected']); // select tags don't have a selected attribute\n            }\n\n            if (isset($data['options']))\n            {\n                $options = $data['options'];\n                unset($data['options']); // select tags don't use an options attribute\n            }\n        }\n        else\n        {\n            $defaults = array('name' => $data);\n        }\n\n        is_array($selected) OR $selected = array($selected);\n        is_array($options) OR $options = array($options);\n\n        // If no selected state was submitted we will attempt to set it automatically\n        if (empty($selected))\n        {\n            if (is_array($data))\n            {\n                if (isset($data['name'], $_POST[$data['name']]))\n                {\n                    $selected = array($_POST[$data['name']]);\n                }\n            }\n            elseif (isset($_POST[$data]))\n            {\n                $selected = array($_POST[$data]);\n            }\n        }\n\n        $extra = _attributes_to_string($extra);\n\n        $multiple = (count($selected) > 1 && stripos($extra, 'multiple') === FALSE) ? ' multiple=\"multiple\"' : '';\n\n        $form = '<select '.rtrim(_parse_form_attributes($data, $defaults)).$extra.$multiple.\">\\n\";\n\n        foreach ($options as $key => $val)\n        {\n            $key = (string) $key;\n\n            if (is_array($val))\n            {\n                if (empty($val))\n                {\n                    continue;\n                }\n\n                $form .= '<optgroup label=\"'.$key.\"\\\">\\n\";\n\n                foreach ($val as $optgroup_key => $optgroup_val)\n                {\n                    $sel = in_array($optgroup_key, $selected) ? ' selected=\"selected\"' : '';\n                    $form .= '<option value=\"'.form_prep($optgroup_key).'\"'.$sel.'>'\n                        .(string) $optgroup_val.\"</option>\\n\";\n                }\n\n                $form .= \"</optgroup>\\n\";\n            }\n            else\n            {\n                $form .= '<option value=\"'.form_prep($key).'\"'\n                    .(in_array($key, $selected) ? ' selected=\"selected\"' : '').'>'\n                    .(string) $val.\"</option>\\n\";\n            }\n        }\n\n        return $form.\"</select>\\n\";\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_prep'))\n{\n    /**\n     * Form Prep\n     *\n     * Formats text so that it can be safely placed in a form field in the event it has HTML tags.\n     *\n     * @param       string|string[]     $str                Value to escape\n     * @param       bool                $is_textarea        Whether we're escaping for a textarea element\n     * @return      string|string[]                         Escaped values\n     */\n    function form_prep($str = '', $is_textarea = FALSE)\n    {\n        if (is_array($str))\n        {\n            foreach (array_keys($str) as $key)\n            {\n                $str[$key] = form_prep($str[$key], $is_textarea);\n            }\n\n            return $str;\n        }\n\n        if ($is_textarea === TRUE)\n        {\n            return html_escape($str);\n        }\n\n        return str_replace(array(\"'\", '\"'), array('&#39;', '&quot;'), html_escape($str));\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('set_value'))\n{\n    /**\n     * Form Value\n     *\n     * Grabs a value from the POST array for the specified field so you can\n     * re-populate an input field or textarea. If Form Validation\n     * is active it retrieves the info from the validation class\n     *\n     * @param       string      $field          Field name\n     * @param       string      $default        Default value\n     * @param       bool        $escape         Whether to escape HTML/attribute or not: TRUE/'html' = html escape, 'attr' = attribute escape, FALSE = no escape.\n     * @return      string\n     */\n    function set_value($field = '', $default = '', $escape = 'attr')\n    {\n        $CI =& get_instance();\n\n        $value = (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))\n            ? $CI->form_validation->set_value($field, $default)\n            : $CI->input->post($field, FALSE);\n\n        isset($value) OR $value = $default;\n\n        if ($escape === FALSE)\n        {\n            return $value;\n        }\n        elseif ($escape === 'attr')\n        {\n            return str_replace(array(\"'\", '\"'), array('&#39;', '&quot;'), (string) html_escape($value));\n        }\n\n        return html_escape($value);\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('_parse_form_attributes'))\n{\n    /**\n     * Parse the form attributes\n     *\n     * Helper function used by some of the form helpers\n     *\n     * @param       array       $attributes     List of attributes\n     * @param       array       $default        Default values\n     * @return      string\n     */\n    function _parse_form_attributes($attributes, $default)\n    {\n        if (is_array($attributes))\n        {\n            foreach ($default as $key => $val)\n            {\n                if (isset($attributes[$key]))\n                {\n                    $default[$key] = $attributes[$key];\n                    unset($attributes[$key]);\n                }\n            }\n\n            if (count($attributes) > 0)\n            {\n                $default = array_merge($default, $attributes);\n            }\n        }\n\n        $att = '';\n\n        foreach ($default as $key => $val)\n        {\n            if ($key === 'value')\n            {\n                $val = form_prep($val);\n            }\n            elseif ($key === 'name' && ! strlen($default['name']))\n            {\n                continue;\n            }\n\n            $att .= $key.'=\"'.$val.'\" ';\n        }\n\n        return $att;\n    }\n}\n\n// ------------------------------------------------------------------------\n// End BC functions\n"], "fixing_code": ["<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Base_Controller extends Core_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        // Code for the real authentication system.\n        //$this->load\n        //    ->model('current_user')\n        //;\n\n        $this->load->model('visual_themes');\n        $this->load->library('template');\n\n        $theme = (string) $this->input->get('theme');\n\n        if ($theme != '') {\n            $theme = (string) base64_decode($theme);\n        }\n\n        // Determine the current visual theme.\n        if ($theme != '' && $this->input->method() == 'get' && !$this->input->is_ajax_request()) {\n\n            $this->visual_themes->set_current($theme);\n\n            parse_str(parse_url(CURRENT_URL, PHP_URL_QUERY), $query);\n            unset($query['theme']);\n            redirect(http_build_url(current_url(), array('query' => http_build_query($query))));\n        }\n\n        $this->template->set_theme($this->visual_themes->get_current());\n\n        //$default_title = config_item('default_title');\n        //$default_title = $this->settings->lang('site_name');\n        $default_title = 'Application Starter 4 Public Edition';\n        //\n\n        if ($default_title != '') {\n             $this->template->title($default_title);\n        }\n\n        $this->template\n            ->set_layout('default')\n            ->set_metadata('robots', 'noindex,nofollow,noarchive')\n            ->set_breadcrumb('<i class=\"dashboard icon\"></i>'.$this->lang->line('ui_home'), site_url())\n        ;\n    }\n\n    // Code for the real authentication system.\n    //protected function _login($username, $password) {\n    //\n    //    // Break the previous login if there is any.\n    //    $this->_logout();\n    //\n    //    return $this->current_user->login($username, $password);\n    //}\n\n    protected function _login($username, $password) {\n\n        // Break the previous login if there is any.\n        $this->_logout();\n\n        $this->session->set_userdata('user_logged', true);\n\n        // This is a method for demo purpose, it always returns TRUE.\n        return true;\n    }\n\n    // Code for the real authentication system.\n    //protected function _logout() {\n    //\n    //    // Don't do anything if a user has not been logged.\n    //    if (!$this->current_user->is_logged_in()) {\n    //        return;\n    //    }\n    //\n    //    $this->current_user->logout();\n    //}\n    //\n    //protected function _last_login_error() {\n    //\n    //    return $this->current_user->last_login_error();\n    //}\n\n    protected function _logout() {\n\n        // Don't do anything if a user has not been logged.\n        if (!$this->session->userdata('user_logged')) {\n            return;\n        }\n\n        // If the public site and the administration site\n        // share same session space, consider the following:\n        //$this->session->unset_userdata('user_logged');\n        //\n\n        $this->session->sess_destroy();\n    }\n\n    protected function _check_access() {\n\n        // Change this condition according to your system of authentication.\n        if (!$this->session->userdata('user_logged')) {\n        // Code for the real authentication system.\n        //if (!$this->current_user->is_logged_in()) {\n\n            if ($this->input->is_ajax_request()) {\n\n                $this->session->set_flashdata('warning_message', $this->lang->line('ui_session_expired'));\n\n                set_status_header(403);\n\n                exit;\n            }\n\n            if ($this->uri->total_segments() != 0) {\n\n                // Session expiration message is not to be shown\n                // when we are comming from the protected home page.\n                $this->session->set_flashdata('warning_message', $this->lang->line('ui_session_expired'));\n            }\n\n            if ($this->input->method() != 'get') {\n                redirect('login');\n            }\n\n            redirect(http_build_url(site_url('login'), array('query' => http_build_query(array('continue' => base64_encode(CURRENT_URL))))));\n        }\n\n        return true;\n    }\n\n    protected function _set_title($title, $title_short = null) {\n\n        if ($title_short == '') {\n            $title_short = $title;\n        }\n\n        $this->registry->set('title', $title);\n\n        $this->template\n            ->prepend_title($title_short)\n            ->set_breadcrumb($title_short)\n        ;\n    }\n\n    protected function _set_header_icon($icon) {\n\n        if (trim((string) $icon) != '') {\n            //$this->registry->set('header_icon', '<i class=\"circular '.$icon.' icon\"></i>');\n            $this->registry->set('header_icon', '<i class=\"'.$icon.' icon\"></i>');\n        } else {\n            $this->registry->delete('header_icon');\n        }\n    }\n\n    protected function _set_header_image($url, $attributes = null) {\n\n        if (trim((string) $url) != '') {\n            $this->registry->set('header_image', '<img src=\"'.html_attr_escape($url).'\" '.html_attr($attributes).' />');\n        } else {\n            $this->registry->delete('header_image');\n        }\n    }\n\n    protected function _set_subtitle($subtitle) {\n\n        $this->registry->set('subtitle', $subtitle);\n    }\n\n    protected function _set_nav($id) {\n\n        $this->registry->set('nav', $id);\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed.');\n\nclass Login_controller extends Base_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load\n            ->library('kcaptcha', null, 'captcha')\n            ->language('captcha')\n        ;\n\n        $this->template->set_layout('login');\n    }\n\n    public function index() {\n\n        $this->load->library('form_validation');\n\n        $login_rules = array(\n            array(\n                'field' => 'username',\n                'label' => $this->lang->line('ui_username').' / '.'E-mail',\n                'rules' => 'nohtml|trim|max_length[256]|required'\n            ),\n            array(\n                'field' => 'password',\n                'label' => 'lang:ui_password',\n                'rules' => 'nohtml|trim|max_length[256]|required'\n            ),\n            array(\n                'field' => 'captcha',\n                'label' => 'Captcha',\n                'rules' => 'nohtml|trim|max_length[256]|callback__captcha'\n            ),\n        );\n\n        $this->form_validation->set_rules($login_rules);\n\n        if ($this->form_validation->run()) {\n\n            $username = $this->input->post('username');\n            $password = $this->input->post('password');\n\n            // Implement your own login system.\n            if ($this->_login($username, $password)) {\n\n                $continue = (string) $this->input->get('continue');\n\n                if ($continue != '') {\n                    $continue = (string) base64_decode($continue);\n                }\n\n                if ($continue != '' && strpos($continue, site_url()) === 0) {\n                    redirect($continue);\n                }\n\n                $this->session->set_flashdata('confirmation_message', '<nobr>Hello, <strong>'.html_escape($username).'</strong>.</nobr>');\n                redirect(site_url());\n\n            } else {\n\n                $error_message = 'Wrong username or password.';\n                // Code for the real authentication system.\n                //switch ($this->_last_login_error()) {\n                //\n                //    case LOGIN_USER_UNVERIFIED:\n                //        $error_message = 'The user account has not been verified by e-mail.';\n                //        break;\n                //\n                //    case LOGIN_USER_SUSPENDED:\n                //        $error_message = 'The user has been suspended';\n                //        break;\n                //\n                //    default:\n                //        $error_message = $error_message = 'Wrong username or password.';\n                //        break;\n                //}\n\n                $this->template->set('error_message', $error_message);\n            }\n\n        } elseif (validation_errors()) {\n\n            $this->template->set('error_message', '<ul class=\"list\">'.validation_errors('<li>', '</li>').'</ul>');\n            $this->template->set('validation_errors', validation_errors_array());\n        }\n\n        $this->captcha->clear();\n\n        $this->template\n            ->prepend_title('Login')\n            ->set_partial('scripts', 'login_scripts')\n            ->build('login');\n    }\n\n    public function _captcha($string) {\n\n        $captcha_valid = $this->captcha->valid($string);\n        $this->captcha->clear();\n\n        if (!$captcha_valid) {\n            $this->form_validation->set_message('_captcha', $this->lang->line('captcha.validation_error'));\n        }\n\n        return $captcha_valid;\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Theme_switcher_widget_controller extends Base_Widget_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load->model('visual_themes');\n    }\n\n    public function index($display_type = null) {\n\n        $display_type = (string) $display_type;\n\n        if ($display_type == 'test') {\n            $display_type = '';\n        }\n\n        if (!in_array($display_type, array('', 'navbar', 'navbar_mobile'))) {\n            $display_type = '';\n        }\n\n        $theme_switcher = $this->visual_themes->get_all();\n\n        if (empty($theme_switcher) || count($theme_switcher) == 1) {\n            return;\n        }\n\n        foreach ($theme_switcher as $key => $value) {\n\n            $theme_switcher[$key]['label'] = $value['name'];\n            $theme_switcher[$key]['link'] = http_build_url(CURRENT_URL, array('query' => http_build_query(array('theme' => base64_encode($value['key'])))), HTTP_URL_JOIN_QUERY);\n\n            if ($value['key'] == $this->visual_themes->get_current()) {\n                $theme_switcher[$key]['active'] = true;\n            }\n        }\n\n        $this->load->view('theme_switcher_widget'.($display_type == '' ? '' : '_'.$display_type), compact('theme_switcher'));\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Base_Controller extends Core_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load\n            ->model('visual_themes')\n            ->library('template')\n        ;\n\n        $theme = (string) $this->input->get('theme');\n\n        if ($theme != '') {\n            $theme = (string) base64_decode($theme);\n        }\n\n        // Determine the current visual theme.\n        if ($theme != '' && $this->input->method() == 'get' && !$this->input->is_ajax_request()) {\n\n            $this->visual_themes->set_current($theme);\n\n            parse_str(parse_url(CURRENT_URL, PHP_URL_QUERY), $query);\n            unset($query['theme']);\n            redirect(http_build_url(current_url(), array('query' => http_build_query($query))));\n        }\n\n        $this->template->set_theme($this->visual_themes->get_current());\n\n        $default_title = config_item('default_title');\n        $default_description = config_item('default_description');\n        $default_keywords = config_item('default_keywords');\n\n        if ($default_title != '') {\n             $this->template->title($default_title);\n        }\n\n        if ($default_description != '') {\n            $this->template->set_metadata('description', $default_description);\n        }\n\n        if ($default_keywords != '') {\n            $this->template->set_metadata('keywords', $default_keywords);\n        }\n\n        $this->template->set_breadcrumb('<i class=\"home icon\"></i> '.$this->lang->line('ui_home'), site_url());\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\nclass Theme_switcher_widget_controller extends Base_Widget_Controller {\n\n    public function __construct() {\n\n        parent::__construct();\n\n        $this->load->model('visual_themes');\n    }\n\n    public function index($display_type = null) {\n\n        $display_type = (string) $display_type;\n\n        if ($display_type == 'test') {\n            $display_type = '';\n        }\n\n        if (!in_array($display_type, array('', 'navbar', 'navbar_mobile'))) {\n            $display_type = '';\n        }\n\n        $theme_switcher = $this->visual_themes->get_all();\n\n        if (empty($theme_switcher) || count($theme_switcher) == 1) {\n            return;\n        }\n\n        foreach ($theme_switcher as $key => $value) {\n\n            $theme_switcher[$key]['label'] = $value['name'];\n            $theme_switcher[$key]['link'] = http_build_url(CURRENT_URL, array('query' => http_build_query(array('theme' => base64_encode($value['key'])))), HTTP_URL_JOIN_QUERY);\n\n            if ($value['key'] == $this->visual_themes->get_current()) {\n                $theme_switcher[$key]['active'] = true;\n            }\n        }\n\n        $this->load->view('theme_switcher_widget'.($display_type == '' ? '' : '_'.$display_type), compact('theme_switcher'));\n    }\n\n}\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed');\n\n// CLI -------------------------------------------------------------------------\n\nif (!function_exists('escape_shell_arg')) {\n\n    /**\n     * Escapes command line shell arguments, this is an alternative\n     * to the built-in PHP function escapeshellarg($arg).\n     *\n     * @param string $arg   The input string.\n     * @return string\n     *\n     * @see https://www.php.net/manual/en/function.escapeshellarg.php\n     * @see http://stackoverflow.com/questions/6427732/how-can-i-escape-an-arbitrary-string-for-use-as-a-command-line-argument-in-windo\n     * @see http://markushedlund.com/dev-tech/php-escapeshellarg-with-unicodeutf-8-support\n     *\n     * @author Ivan Tcholakov <ivantcholakov@gmail.com>, 2016-2020.\n     * @license The MIT License (MIT)\n     * @link http://opensource.org/licenses/MIT\n     */\n    function escape_shell_arg($arg)\n    {\n        if (stripos(PHP_OS, 'win') === 0) { // Beware about 'Darwin', etc.\n\n            // PHP engine is built for Windows.\n\n            // Sequence of backslashes followed by a double quote:\n            // double up all the backslashes and escape the double quote\n            $arg = preg_replace('/(\\\\*)\"/', '$1$1\\\\\"', $arg);\n\n            // Sequence of backslashes followed by the end of the arg,\n            // which will become a double quote later:\n            // double up all the backslashes\n            $arg = preg_replace('/(\\\\*)$/', '$1$1', $arg);\n\n            // All other backslashes do not need modifying\n\n            // Double-quote the whole thing\n            $arg = '\"'.$arg.'\"';\n\n            // Escape shell metacharacters.\n            $arg = preg_replace('/([\\(\\)%!^\"<>&|;, ])/', '^$1', $arg);\n\n            return $arg;\n        }\n\n        // PHP engine is built for Linux or similar.\n\n        return \"'\" . str_replace(\"'\", \"'\\\\''\", $arg) . \"'\";\n    }\n\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('get_config'))\n{\n    /**\n     * Loads the main config.php file\n     *\n     * This function lets us grab the config file even if the Config class\n     * hasn't been instantiated yet\n     *\n     * @param     array\n     * @return    array\n     */\n    function &get_config(Array $replace = array())\n    {\n        static $config;\n\n        if (empty($config))\n        {\n            // Added by Ivan Tcholakov, 02-OCT-2013.\n            // Loading the common configuration file first.\n            $file_path = COMMONPATH.'config/config.php';\n            $found = FALSE;\n            if (file_exists($file_path))\n            {\n                $found = TRUE;\n                require($file_path);\n            }\n            if (file_exists($file_path = COMMONPATH.'config/'.ENVIRONMENT.'/config.php'))\n            {\n                require($file_path);\n            }\n            //\n\n            $file_path = APPPATH.'config/config.php';\n            // Removed by Ivan Tcholakov, 02-OCT-2013.\n            //$found = FALSE;\n            //\n            if (file_exists($file_path))\n            {\n                $found = TRUE;\n                require($file_path);\n            }\n\n            // Is the config file in the environment folder?\n            if (file_exists($file_path = APPPATH.'config/'.ENVIRONMENT.'/config.php'))\n            {\n                require($file_path);\n            }\n            elseif ( ! $found)\n            {\n                set_status_header(503);\n                echo 'The configuration file does not exist.';\n                exit(3); // EXIT_CONFIG\n            }\n\n            // Does the $config array exist in the file?\n            if ( ! isset($config) OR ! is_array($config))\n            {\n                set_status_header(503);\n                echo 'Your config file does not appear to be formatted correctly.';\n                exit(3); // EXIT_CONFIG\n            }\n        }\n\n        // Are any values being dynamically added or replaced?\n        foreach ($replace as $key => $val)\n        {\n            $config[$key] = $val;\n        }\n\n        return $config;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('load_class'))\n{\n    /**\n     * Class registry\n     *\n     * This function acts as a singleton. If the requested class does not\n     * exist it is instantiated and set to a static variable. If it has\n     * previously been instantiated the variable is returned.\n     *\n     * @param       string      the class name being requested\n     * @param       string      the directory where the class should be found\n     * @param       mixed       an optional argument to pass to the class constructor\n     * @return      object\n     */\n    function &load_class($class, $directory = 'libraries', $param = NULL)\n    {\n        static $_classes = array();\n\n        // Does the class exist? If so, we're done...\n        if (isset($_classes[$class]))\n        {\n            return $_classes[$class];\n        }\n\n        $name = FALSE;\n\n        // Look for the class first in the local application/libraries folder\n        // then in the native system/libraries folder\n        foreach (array(APPPATH, BASEPATH) as $path)\n        {\n            if (file_exists($path.$directory.'/'.$class.'.php'))\n            {\n                $name = 'CI_'.$class;\n\n                if (!class_exists($name, FALSE))\n                {\n                    require_once $path.$directory.'/'.$class.'.php';\n                }\n\n                break;\n            }\n        }\n\n        // Added by Ivan Tcholakov, 11-OCT-2013.\n        // Load customized core classes.\n        if (file_exists(COMMONPATH.\"$directory/Core_$class.php\"))\n        {\n            $name = 'Core_'.$class;\n\n            if (!class_exists($name, FALSE))\n            {\n                require_once COMMONPATH.\"$directory/Core_$class.php\";\n            }\n        }\n        //\n\n        // Is the request a class extension? If so we load it too\n        if (file_exists(APPPATH.$directory.'/'.config_item('subclass_prefix').$class.'.php'))\n        {\n            $name = config_item('subclass_prefix').$class;\n\n            if (!class_exists($name, FALSE))\n            {\n                require_once APPPATH.$directory.'/'.config_item('subclass_prefix').$class.'.php';\n            }\n        }\n\n        // Did we find the class?\n        if ($name === FALSE)\n        {\n            // Note: We use exit() rather then show_error() in order to avoid a\n            // self-referencing loop with the Exceptions class\n            set_status_header(503);\n            echo 'Unable to locate the specified class: '.$class.'.php';\n            exit(5); // EXIT_UNK_CLASS\n        }\n\n        // Keep track of what we just loaded\n        is_loaded($class);\n\n        $_classes[$class] = new $name();\n        return $_classes[$class];\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('get_mimes'))\n{\n    /**\n     * Returns the MIME types array from config/mimes.php\n     *\n     * @return    array\n     */\n    function &get_mimes()\n    {\n        static $_mimes;\n\n        if (empty($_mimes))\n        {\n            $_mimes = file_exists(COMMONPATH.'config/mimes.php')\n                ? include(COMMONPATH.'config/mimes.php')\n                : array();\n\n            if (file_exists(COMMONPATH.'config/'.ENVIRONMENT.'/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(COMMONPATH.'config/'.ENVIRONMENT.'/mimes.php'));\n            }\n\n            if (file_exists(APPPATH.'config/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(APPPATH.'config/mimes.php'));\n            }\n\n            if (file_exists(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'))\n            {\n                $_mimes = array_merge($_mimes, include(APPPATH.'config/'.ENVIRONMENT.'/mimes.php'));\n            }\n        }\n\n        return $_mimes;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('_error_handler'))\n{\n    /**\n     * Error Handler\n     *\n     * This is the custom error handler that is declared at the (relative)\n     * top of CodeIgniter.php. The main reason we use this is to permit\n     * PHP errors to be logged in our own log files since the user may\n     * not have access to server logs. Since this function effectively\n     * intercepts PHP errors, however, we also need to display errors\n     * based on the current error_reporting level.\n     * We do that with the use of a PHP error template.\n     *\n     * @param       int         $severity\n     * @param       string      $message\n     * @param       string      $filepath\n     * @param       int         $line\n     * @return      void\n     */\n    function _error_handler($severity, $message, $filepath, $line)\n    {\n        // We don't bother with \"strict\" notices since they tend to fill up\n        // the log file with excess information that isn't normally very helpful.\n        // For example, if you are running PHP 5 and you use version 4 style\n        // class functions (without prefixes like \"public\", \"private\", etc.)\n        // you'll get notices telling you that these have been deprecated.\n        if ($severity == E_STRICT)\n        {\n            return;\n        }\n\n        $is_error = (((E_ERROR | E_PARSE | E_COMPILE_ERROR | E_CORE_ERROR | E_USER_ERROR) & $severity) === $severity);\n\n        // When an error occurred, set the status header to '500 Internal Server Error'\n        // to indicate to the client something went wrong.\n        // This can't be done within the $_error->show_php_error method because\n        // it is only called when the display_errors flag is set (which isn't usually\n        // the case in a production environment) or when errors are ignored because\n        // they are above the error_reporting threshold.\n        if ($is_error)\n        {\n            set_status_header(500);\n        }\n\n        // Should we ignore the error? We'll get the current error_reporting\n        // level and add its bits with the severity bits to find out.\n        if (($severity & error_reporting()) !== $severity)\n        {\n            return;\n        }\n\n        $_error =& load_class('Exceptions', 'core');\n        $_error->log_exception($severity, $message, $filepath, $line);\n\n        // Should we display the error?\n        if (str_ireplace(array('off', 'none', 'no', 'false', 'null'), '', ini_get('display_errors')))\n        {\n            $_error->show_php_error($severity, $message, $filepath, $line);\n        }\n\n        // If the error is fatal, the execution of the script should be stopped because\n        // errors can't be recovered from. Halting the script conforms with PHP's\n        // default error handling. See http://www.php.net/manual/en/errorfunc.constants.php\n        if ($is_error)\n        {\n            exit(1); // EXIT_ERROR\n        }\n    }\n}\n\n// -----------------------------------------------------------------------------\n\n// Escapers\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('html_attr_escape')) {\n\n    function html_attr_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'html_attr');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('js_escape')) {\n\n    function js_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'js');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('css_escape')) {\n\n    function css_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'css');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('url_escape')) {\n\n    function url_escape($string) {\n\n        $twig = & _get_simple_twig_instance();\n\n        return call_user_func($twig->getFilter('escape')->getCallable(), $twig, $string, 'url');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 28-JUN-2016.\n// An implementation of the function esc(), introduced in CodeIgniter 4.\n// The original CI4 function will be watched further for possible changes.\n// Valid context values: 'html', 'js', 'css', 'url', 'attr', 'raw', null\nif (!function_exists('esc')) {\n\n    function esc($data, $context = 'html', $charset = null) {\n\n        if (is_array($data)) {\n\n            foreach ($data as $key => & $value) {\n                $value = esc($value, $context, $charset);\n            }\n\n        } elseif (is_string($data)) {\n\n            $context = strtolower($context);\n\n            if (empty($context) || $context == 'raw') {\n                return $data;\n            }\n\n            if (!in_array($context, array('html', 'js', 'css', 'url', 'attr'))) {\n                throw new InvalidArgumentException('Invalid escape context provided.');\n            }\n\n            if ($context == 'attr') {\n                $context = 'html_attr';\n            }\n\n            $twig = & _get_simple_twig_instance($charset);\n\n            $data = call_user_func($twig->getFilter('escape')->getCallable(), $twig, $data, $context);\n        }\n\n        return $data;\n    }\n\n}\n\n// Added by Ivan Tcholakov, 26-APR-2016.\nif (!function_exists('_get_simple_twig_instance')) {\n\n    function & _get_simple_twig_instance($charset = null) {\n\n        static $instance = array();\n\n        $charset = (string) $charset;\n\n        if ($charset == '') {\n            $charset = config_item('charset');\n        }\n\n        $charset = strtoupper($charset);\n\n        if (!isset($instance[$charset])) {\n\n            $instance[$charset] = new \\Twig\\Environment(\n                new \\Parser_Twig_Loader_Filesystem([]),\n                array(\n                    'debug' => false,\n                    'charset' => $charset,\n                    'strict_variables' => false,\n                    'autoescape' => 'html',\n                    'cache' => false,\n                    'auto_reload' => null,\n                    'optimizations' => -1,\n                )\n            );\n        }\n\n        return $instance[$charset];\n    }\n\n}\n\n// End Escapers\n\n// -----------------------------------------------------------------------------\n\nif ( ! function_exists('_stringify_attributes'))\n{\n    /**\n     * Stringify attributes for use in HTML tags.\n     *\n     * Helper function used to convert a string, array, or object\n     * of attributes to a string.\n     *\n     * @param       mixed       string, array, object\n     * @param       bool\n     * @return      string\n     */\n    function _stringify_attributes($attributes, $js = FALSE)\n    {\n        if (empty($attributes))\n        {\n            return NULL;\n        }\n\n        // Added by Ivan Tcholakov, 03-JAN-2016.\n        if (!$js)\n        {\n            return html_attr($attributes);\n        }\n        //\n\n        if (is_string($attributes))\n        {\n            return ' '.$attributes;\n        }\n\n        $attributes = (array) $attributes;\n\n        $atts = '';\n        foreach ($attributes as $key => $val)\n        {\n            $atts .= ($js) ? $key.'='.$val.',' : ' '.get_instance()->security->xss_clean($key).'=\"'.html_attr_escape($val).'\"';\n        }\n\n        return rtrim($atts, ',');\n    }\n}\n\nif ( ! function_exists('html_code'))\n{\n    // Added by Ivan Tcholakov, 22-JAN-2016.\n    function html_code($string, $begin = null, $end = null)\n    {\n        if ($begin === null)\n        {\n            $begin = '<pre><code>';\n        }\n\n        if ($end === null)\n        {\n            $end = '</code></pre>';\n        }\n\n        return $begin.html_escape($string).$end;\n    }\n}\n\n// -----------------------------------------------------------------------------\n\n// Processing HTML Attributes\n// Ivan Tcholakov, 2016.\n\nif (!function_exists('html_attr')) {\n\n    function html_attr($attributes, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        if (!$return_as_array) {\n\n            $str = '';\n            $attributes = $attr->getAttributes(false);\n\n            foreach ($attributes as $key => $value) {\n                $str .= ' ' . get_instance()->security->xss_clean($key) . '=\"' . html_attr_escape($value) . '\"';\n            }\n\n            return $str;\n        }\n\n        return $attr->getAttributes(false);\n    }\n\n}\n\nif (!function_exists('html_attr_has')) {\n\n    function html_attr_has($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name) !== null;\n    }\n\n}\n\nif (!function_exists('html_attr_has_empty')) {\n\n    function html_attr_has_empty($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name) == '';\n    }\n\n}\n\nif (!function_exists('html_attr_get')) {\n\n    function html_attr_get($attributes, $name) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->getAttribute($name);\n    }\n\n}\n\nif (!function_exists('html_attr_set')) {\n\n    function html_attr_set($attributes, $name, $value = null, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->setAttribute($name, $value);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_merge')) {\n\n    function html_attr_merge($attributes1, $attributes2, $return_as_array = false) {\n\n        $attr1 = new HTML_Attributes($attributes1);\n        $attr2 = new HTML_Attributes($attributes2);\n\n        $class2 = $attr2->getAttribute('class');\n        $attr2->removeAttribute('class');\n        $attr1->addClass($class2);\n\n        $attr1->mergeAttributes($attr2->getAttributes());\n\n        if (trim((string) $attr1->getAttribute('class')) == '') {\n            $attr1->removeAttribute('class');\n        }\n\n        return $attr1->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_remove')) {\n\n    function html_attr_remove($attributes, $name, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->removeAttribute($name);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_has_class')) {\n\n    function html_attr_has_class($attributes, $class) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        return $attr->hasClass($class);\n    }\n\n}\n\nif (!function_exists('html_attr_add_class')) {\n\n    function html_attr_add_class($attributes, $class, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->addClass($class);\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\nif (!function_exists('html_attr_remove_class')) {\n\n    function html_attr_remove_class($attributes, $class, $return_as_array = false) {\n\n        $attr = new HTML_Attributes($attributes);\n\n        $attr->removeClass($class);\n\n        if (trim((string) $attr->getAttribute('class')) == '') {\n            $attr->removeAttribute('class');\n        }\n\n        return $attr->getAttributes( ! $return_as_array);\n    }\n\n}\n\n// End Processing HTML Attributes\n\n// -----------------------------------------------------------------------------\n\n// HTML Tags\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag')) {\n\n    function html_tag($tag = null, $attributes = array(), $content = false) {\n\n        $tag = trim(@ (string) $tag);\n\n        $has_content = $content !== false && $content !== null;\n\n        switch (strtolower($tag)) {\n\n            case 'script':\n\n                $has_content = true;\n                break;\n        }\n\n        return '<'.$tag.html_attr($attributes).($has_content ? '>'.$content.'</'.$tag.'>' : ' />');\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag_open')) {\n\n    function html_tag_open($tag, $attributes = array()) {\n\n        $tag = trim(@ (string) $tag);\n\n        return '<'.$tag.html_attr($attributes).'>';\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\nif (!function_exists('html_tag_close')) {\n\n    function html_tag_close($tag) {\n\n        $tag = trim(@ (string) $tag);\n\n        return '</'.$tag.'>';\n    }\n\n}\n\n// Added by Ivan Tcholakov, 03-JAN-2016.\n// See http://stackoverflow.com/questions/2519845/how-to-check-if-string-is-a-valid-xml-element-name\nif (!function_exists('xml_tag_valid_name')) {\n\n    function xml_tag_valid_name($name) {\n\n        static $pattern = '~\n# XML 1.0 Name symbol PHP PCRE regex <http://www.w3.org/TR/REC-xml/#NT-Name>\n(?(DEFINE)\n    (?<NameStartChar> [:A-Z_a-z\\\\xC0-\\\\xD6\\\\xD8-\\\\xF6\\\\xF8-\\\\x{2FF}\\\\x{370}-\\\\x{37D}\\\\x{37F}-\\\\x{1FFF}\\\\x{200C}-\\\\x{200D}\\\\x{2070}-\\\\x{218F}\\\\x{2C00}-\\\\x{2FEF}\\\\x{3001}-\\\\x{D7FF}\\\\x{F900}-\\\\x{FDCF}\\\\x{FDF0}-\\\\x{FFFD}\\\\x{10000}-\\\\x{EFFFF}])\n    (?<NameChar>      (?&NameStartChar) | [.\\\\-0-9\\\\xB7\\\\x{0300}-\\\\x{036F}\\\\x{203F}-\\\\x{2040}])\n    (?<Name>          (?&NameStartChar) (?&NameChar)*)\n)\n^(?&Name)$\n~ux';\n\n        return 1 === preg_match($pattern, $name);\n    }\n\n}\n\n// End HTM Tags\n\n// -----------------------------------------------------------------------------\n", "<?php defined('BASEPATH') OR exit('No direct script access allowed.');\n\nif (!function_exists('form_ckeditor')) {\n\n    // Added by Ivan Tcholakov, 20-FEB-2016.\n    function form_ckeditor($name, $value = null, $config_name = null, $options = array(), $events = array()) {\n\n        $config_name = trim(@ (string) $config_name);\n\n        if ($config_name == '') {\n            $config_name = 'user';\n        }\n\n        $config = CKEditorConfig::get($config_name);\n\n        if (empty($config)) {\n\n            // Avoid these defaults, make sure that a configuration file exists.\n            $config = array();\n\n            $config['basePath'] = DEFAULT_BASE_URL.'assets/js/ckeditor/';\n            $config['config']['baseHref'] = http_build_url(DEFAULT_BASE_URL.'../');\n            $config['config']['fullPage'] = false;\n            $config['config']['language'] = language_ckeditor();\n            $config['config']['defaultLanguage'] = 'en';\n            $config['config']['contentsLanguage'] = language_ckeditor();\n            $config['config']['contentsLangDirection'] = get_instance()->lang->direction();\n\n            $config['config']['contentsCss'][] = DEFAULT_BASE_URL.'assets/css/lib/editor.css';\n\n            $config['config']['width'] = '';\n            $config['config']['height'] = '100';\n            $config['config']['resize_enabled'] = false;\n            $config['textareaAttributes'] = array('rows' => 8, 'cols' => 60);\n\n            $config['config']['entities_latin'] = false;\n            $config['config']['entities_greek'] = false;\n\n            $config['config']['forcePasteAsPlainText'] = true;\n            $config['config']['toolbarCanCollapse'] = false;\n\n            $config['config']['allowedContent'] = true;\n        }\n\n        $initialized = true;\n\n        if (is_object($options)) {\n            $options = get_object_vars($object);\n        }\n\n        if (!empty($options) && is_array($options)) {\n\n            if (isset($options['initialized'])) {\n\n                $initialized = !empty($options['initialized']);\n                unset($options['initialized']);\n            }\n\n            if (isset($options['basePath'])) {\n                unset($options['basePath']);\n            }\n\n            if (isset($options['textareaAttributes'])) {\n\n                if (is_object($options['textareaAttributes'])) {\n                    $options['textareaAttributes'] = get_object_vars($options['textareaAttributes']);\n                }\n\n                if (is_array($options['textareaAttributes'])) {\n                    $config['textareaAttributes'] = $options['textareaAttributes'];\n                }\n\n                unset($options['textareaAttributes']);\n            }\n\n            if (!empty($options)) {\n                $config['config'] = array_merge($config['config'], $options);\n            }\n        }\n\n        $ckeditor = new CKEditor($config['basePath']);\n        $ckeditor->returnOutput = true;\n        $ckeditor->initialized = $initialized;\n        $ckeditor->textareaAttributes = $config['textareaAttributes'];\n\n        // Repopulate the value when form validation fails.\n\n        $CI = get_instance();\n\n        $value_editor = (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($name))\n            ? $CI->form_validation->set_value($name, $value)\n            : $CI->input->post($name, FALSE);\n\n        isset($value_editor) OR $value_editor = $value;\n\n        return $ckeditor->editor($name, $value_editor, $config['config'], $events);\n    }\n\n}\n\nif (!function_exists('form_per_page')) {\n\n    // For serving pagination: A select box for choosing number of items to be shown per page.\n    function form_per_page($name = null, $options = null, $selected = null, $extra_attributes = null, $min = null, $max = null) {\n\n        $ci = get_instance();\n\n        if (empty($options) || !is_array($options)) {\n            $options = array(5, 10, 20, 30, 40, 50, 100, 200, 300, 400, 500, 1000);\n        }\n\n        $min = (int) $min;\n\n        if ($min <= 0) {\n            $min = $options[0];\n        }\n\n        $all = $max == 'all';\n\n        $max = (int) $max;\n\n        if ($max <= 0) {\n            $max = $options[count($options) - 1];\n        }\n\n        if ($max < $min) {\n            $max = $min;\n        }\n\n        $result_options = array();\n\n        foreach ($options as $option) {\n\n            if ($option >= $min && $option <= $max) {\n                $result_options[(string) $option] = $ci->lang->line('ui_per_page', $option);\n            }\n        }\n\n        if ($all) {\n            $result_options['all'] = '-- '.$ci->lang->line('ui_all').' --';\n        }\n\n        return form_dropdown($name, $result_options, $selected, $extra_attributes);\n    }\n\n}\n\n//------------------------------------------------------------------------------\n\nif ( ! function_exists('form_open'))\n{\n    /**\n     * Form Declaration\n     *\n     * Creates the opening portion of the form.\n     *\n     * @param       string      the URI segments of the form destination\n     * @param       array       a key/value pair of attributes\n     * @param       array       a key/value pair hidden data\n     * @return      string\n     */\n    function form_open($action = '', $attributes = array(), $hidden = array())\n    {\n        $CI =& get_instance();\n\n        // If no action is provided then set to the current url\n        if ( ! $action)\n        {\n            // Modified by Ivan Tcholakov, 23-FEB-2015.\n            //$action = $CI->config->site_url($CI->uri->uri_string());\n            $action = CURRENT_URL;\n            //\n        }\n        // If an action is not a full URL then turn it into one\n        elseif (strpos($action, '://') === FALSE)\n        {\n            $action = $CI->config->site_url($action);\n        }\n\n        $attributes = _attributes_to_string($attributes);\n\n        if (stripos($attributes, 'method=') === FALSE)\n        {\n            $attributes .= ' method=\"post\"';\n        }\n\n        if (stripos($attributes, 'accept-charset=') === FALSE)\n        {\n            $attributes .= ' accept-charset=\"'.strtolower(config_item('charset')).'\"';\n        }\n\n        $form = '<form action=\"'.html_attr_escape(get_instance()->security->xss_clean($action)).'\"'.$attributes.\">\\n\";\n\n        if (is_array($hidden))\n        {\n            foreach ($hidden as $name => $value)\n            {\n                $form .= '<input type=\"hidden\" name=\"'.html_attr_escape($name).'\" value=\"'.form_prep($value).'\" />'.\"\\n\";\n            }\n        }\n\n        // Add CSRF field if enabled, but leave it out for GET requests and requests to external websites\n        // Modified by Ivan Tcholakov, 04-NOV-2011.\n        //if ($CI->config->item('csrf_protection') === TRUE && strpos($action, $CI->config->base_url()) !== FALSE && ! stripos($form, 'method=\"get\"'))\n        // Aways add the hidden value for protecting AJAX requests, when the global configuration option 'csrf_protection' is off.\n        if (strpos($action, $CI->config->base_url()) !== FALSE && ! stripos($form, 'method=\"get\"'))\n        //\n        {\n            // Prepend/append random-length \"white noise\" around the CSRF\n            // token input, as a form of protection against BREACH attacks\n            if (FALSE !== ($noise = $CI->security->get_random_bytes(1)))\n            {\n                list(, $noise) = unpack('c', $noise);\n            }\n            else\n            {\n                $noise = mt_rand(-128, 127);\n            }\n\n            // Prepend if $noise has a negative value, append if positive, do nothing for zero\n            $prepend = $append = '';\n            if ($noise < 0)\n            {\n                $prepend = str_repeat(\" \", abs($noise));\n            }\n            elseif ($noise > 0)\n            {\n                $append  = str_repeat(\" \", $noise);\n            }\n\n            $form .= sprintf(\n                '%s<input type=\"hidden\" name=\"%s\" value=\"%s\" />%s%s',\n                $prepend,\n                $CI->security->get_csrf_token_name(),\n                $CI->security->get_csrf_hash(),\n                $append,\n                \"\\n\"\n            );\n        }\n\n        return $form;\n    }\n}\n\nif ( ! function_exists('has_validation_error'))\n{\n    // Added by Ivan Tcholakov, 20-OCT-2015.\n    /**\n     * This function informs whether there is at least one error after validation.\n     * @return bool     TRUE if there is an error (or errors), FALSE otherwise.\n     */\n    function has_validation_error()\n    {\n        if (FALSE === ($OBJ =& _get_validation_object()))\n        {\n            return FALSE;\n        }\n\n        return $OBJ->has_error();\n    }\n}\n\nif ( ! function_exists('validation_errors_array'))\n{\n    function validation_errors_array()\n    {\n        if (FALSE === ($OBJ =& _get_validation_object()))\n        {\n            return array();\n        }\n\n        return $OBJ->error_array();\n    }\n}\n\nif ( ! function_exists('build_validation_message'))\n{\n    /*\n     * This function might be useful for client-side validation - preparing messages.\n     * Sample JavaScript fragment for jQuery Validation Plugin:\n     * ...\n     * messages: {\n     *     name: {\n     *        required: <?php echo json_encode(build_validation_message('required', $this->lang->line('ui_title'))); ?>\n     *     },\n     * },\n     * ...\n     */\n    function build_validation_message($rule, $field = NULL, $param = NULL)\n    {\n        get_instance()->lang->load('form_validation');\n\n        $line = get_instance()->lang->line('form_validation_'.$rule);\n\n        return str_replace(array('{field}', '{param}'), array($field, $param), $line);\n    }\n}\n\nif ( ! function_exists('form_value'))\n{\n    /**\n     * Form Value (Raw)\n     *\n     * Grabs a value from the POST array for the specified field so you can\n     * re-populate fields in some special or cutting-edge cases. If Form Validation\n     * is active it retrieves the info from the validation class.\n     *\n     * Important: The result is not HTML-escaped or HTML-attribute-escaped,\n     * you might need to do it additionaly according to the context of usage.\n     *\n     * @param       string      $field          Field name\n     * @param       string      $default        Default value\n     * @return      string\n     * @deprecated\n     */\n    function form_value($field, $default = '')\n    {\n        return set_value($field, $default, FALSE);\n    }\n}\n\n\n// Functions for BC compatibility with CI development before 21-JAN-2015.\n// See: https://github.com/bcit-ci/CodeIgniter/issues/1953\n// See: https://github.com/bcit-ci/CodeIgniter/issues/2477\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_hidden'))\n{\n    /**\n     * Hidden Input Field\n     *\n     * Generates hidden fields. You can pass a simple key/value string or\n     * an associative array with multiple values.\n     *\n     * @param       mixed       $name           Field name\n     * @param       string      $value          Field value\n     * @param       bool        $recursing\n     * @return      string\n     */\n    function form_hidden($name, $value = '', $recursing = FALSE)\n    {\n        static $form;\n\n        if ($recursing === FALSE)\n        {\n            $form = \"\\n\";\n        }\n\n        if (is_array($name))\n        {\n            foreach ($name as $key => $val)\n            {\n                form_hidden($key, $val, TRUE);\n            }\n\n            return $form;\n        }\n\n        if ( ! is_array($value))\n        {\n            $form .= '<input type=\"hidden\" name=\"'.html_attr_escape($name).'\" value=\"'.form_prep($value).\"\\\" />\\n\";\n        }\n        else\n        {\n            foreach ($value as $k => $v)\n            {\n                $k = is_int($k) ? '' : $k;\n                form_hidden($name.'['.$k.']', $v, TRUE);\n            }\n        }\n\n        return $form;\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_textarea'))\n{\n    /**\n     * Textarea field\n     *\n     * @param       mixed       $data\n     * @param       string      $value\n     * @param       string      $extra\n     * @return      string\n     */\n    function form_textarea($data = '', $value = '', $extra = '')\n    {\n        $defaults = array(\n            'name' => is_array($data) ? '' : $data,\n            'cols' => '40',\n            'rows' => '10'\n        );\n\n        if ( ! is_array($data) OR ! isset($data['value']))\n        {\n            $val = $value;\n        }\n        else\n        {\n            $val = $data['value'];\n            unset($data['value']); // textareas don't use the value attribute\n        }\n\n        return '<textarea '._parse_form_attributes($data, $defaults)._attributes_to_string($extra).'>'.form_prep($val, TRUE).\"</textarea>\\n\";\n    }\n}\n\n// --------------------------------------------------------------------\n\nif ( ! function_exists('form_dropdown'))\n{\n    /**\n     * Drop-down Menu\n     *\n     * @param       mixed       $data\n     * @param       mixed       $options\n     * @param       mixed       $selected\n     * @param       mixed       $extra\n     * @return      string\n     */\n    function form_dropdown($data = '', $options = array(), $selected = array(), $extra = '')\n    {\n        $defaults = array();\n\n        if (is_array($data))\n        {\n            if (isset($data['selected']))\n            {\n                $selected = $data['selected'];\n                unset($data['selected']); // select tags don't have a selected attribute\n            }\n\n            if (isset($data['options']))\n            {\n                $options = $data['options'];\n                unset($data['options']); // select tags don't use an options attribute\n            }\n        }\n        else\n        {\n            $defaults = array('name' => $data);\n        }\n\n        is_array($selected) OR $selected = array($selected);\n        is_array($options) OR $options = array($options);\n\n        // If no selected state was submitted we will attempt to set it automatically\n        if (empty($selected))\n        {\n            if (is_array($data))\n            {\n                if (isset($data['name'], $_POST[$data['name']]))\n                {\n                    $selected = array($_POST[$data['name']]);\n                }\n            }\n            elseif (isset($_POST[$data]))\n            {\n                $selected = array($_POST[$data]);\n            }\n        }\n\n        $extra = _attributes_to_string($extra);\n\n        $multiple = (count($selected) > 1 && stripos($extra, 'multiple') === FALSE) ? ' multiple=\"multiple\"' : '';\n\n        $form = '<select '.rtrim(_parse_form_attributes($data, $defaults)).$extra.$multiple.\">\\n\";\n\n        foreach ($options as $key => $val)\n        {\n            $key = (string) $key;\n\n            if (is_array($val))\n            {\n                if (empty($val))\n                {\n                    continue;\n                }\n\n                $form .= '<optgroup label=\"'.html_attr_escape($key).\"\\\">\\n\";\n\n                foreach ($val as $optgroup_key => $optgroup_val)\n                {\n                    $sel = in_array($optgroup_key, $selected) ? ' selected=\"selected\"' : '';\n                    $form .= '<option value=\"'.form_prep($optgroup_key).'\"'.$sel.'>'\n                        .(string) $optgroup_val.\"</option>\\n\";\n                }\n\n                $form .= \"</optgroup>\\n\";\n            }\n            else\n            {\n                $form .= '<option value=\"'.form_prep($key).'\"'\n                    .(in_array($key, $selected) ? ' selected=\"selected\"' : '').'>'\n                    .(string) $val.\"</option>\\n\";\n            }\n        }\n\n        return $form.\"</select>\\n\";\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('form_prep'))\n{\n    /**\n     * Form Prep\n     *\n     * Formats text so that it can be safely placed in a form field in the event it has HTML tags.\n     *\n     * @param       string|string[]     $str                Value to escape\n     * @param       bool                $is_textarea        Whether we're escaping for a textarea element\n     * @return      string|string[]                         Escaped values\n     */\n    function form_prep($str = '', $is_textarea = FALSE)\n    {\n        if (is_array($str))\n        {\n            foreach (array_keys($str) as $key)\n            {\n                $str[$key] = form_prep($str[$key], $is_textarea);\n            }\n\n            return $str;\n        }\n\n        if ($is_textarea === TRUE)\n        {\n            return html_escape($str);\n        }\n\n        return str_replace(array(\"'\", '\"'), array('&#39;', '&quot;'), html_escape($str));\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('set_value'))\n{\n    /**\n     * Form Value\n     *\n     * Grabs a value from the POST array for the specified field so you can\n     * re-populate an input field or textarea. If Form Validation\n     * is active it retrieves the info from the validation class\n     *\n     * @param       string      $field          Field name\n     * @param       string      $default        Default value\n     * @param       bool        $escape         Whether to escape HTML/attribute or not: TRUE/'html' = html escape, 'attr' = attribute escape, FALSE = no escape.\n     * @return      string\n     */\n    function set_value($field = '', $default = '', $escape = 'attr')\n    {\n        $CI =& get_instance();\n\n        $value = (isset($CI->form_validation) && is_object($CI->form_validation) && $CI->form_validation->has_rule($field))\n            ? $CI->form_validation->set_value($field, $default)\n            : $CI->input->post($field, FALSE);\n\n        isset($value) OR $value = $default;\n\n        if ($escape === FALSE)\n        {\n            return $value;\n        }\n        elseif ($escape === 'attr')\n        {\n            return str_replace(array(\"'\", '\"'), array('&#39;', '&quot;'), (string) html_escape($value));\n        }\n\n        return html_escape($value);\n    }\n}\n\n// ------------------------------------------------------------------------\n\nif ( ! function_exists('_parse_form_attributes'))\n{\n    /**\n     * Parse the form attributes\n     *\n     * Helper function used by some of the form helpers\n     *\n     * @param       array       $attributes     List of attributes\n     * @param       array       $default        Default values\n     * @return      string\n     */\n    function _parse_form_attributes($attributes, $default)\n    {\n        if (is_array($attributes))\n        {\n            foreach ($default as $key => $val)\n            {\n                if (isset($attributes[$key]))\n                {\n                    $default[$key] = $attributes[$key];\n                    unset($attributes[$key]);\n                }\n            }\n\n            if (count($attributes) > 0)\n            {\n                $default = array_merge($default, $attributes);\n            }\n        }\n\n        $att = '';\n\n        foreach ($default as $key => $val)\n        {\n            if ($key === 'value')\n            {\n                $att .= get_instance()->security->xss_clean($key).'=\"'.form_prep($val).'\" ';\n            }\n            elseif ($key === 'name' && ! strlen($default['name']))\n            {\n                continue;\n            }\n            else\n            {\n                $att .= get_instance()->security->xss_clean($key).'=\"'.html_attr_escape($val).'\" ';\n            }\n        }\n\n        return $att;\n    }\n}\n\n// ------------------------------------------------------------------------\n// End BC functions\n\n\n// Added by Ivan Tcholakov, 05-SEP-2022.\nif ( ! function_exists('_attributes_to_string'))\n{\n    function _attributes_to_string($attributes)\n    {\n        if (empty($attributes))\n        {\n            return '';\n        }\n\n        if (is_array($attributes) || is_string($attributes) || is_object($attributes))\n        {\n            return html_attr($attributes, false);\n        }\n\n        return FALSE;\n    }\n}\n"], "filenames": ["platform/applications/admin/core/Base_Controller.php", "platform/applications/admin/modules/login/controllers/Login_controller.php", "platform/applications/admin/modules/theme_switcher_widget/controllers/Theme_switcher_widget_controller.php", "platform/applications/front/core/Base_Controller.php", "platform/applications/front/modules/theme_switcher_widget/controllers/Theme_switcher_widget_controller.php", "platform/common/core/Common.php", "platform/common/helpers/MY_form_helper.php"], "buggy_code_start_loc": [16, 49, 33, 13, 33, 496, 192], "buggy_code_end_loc": [125, 54, 34, 18, 34, 534, 632], "fixing_code_start_loc": [17, 49, 33, 14, 33, 496, 192], "fixing_code_end_loc": [130, 60, 34, 22, 34, 546, 655], "type": "CWE-707", "message": "A vulnerability was found in starter-public-edition-4 up to 4.6.10. It has been classified as problematic. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 4.6.11 is able to address this issue. The name of the patch is 2606983c20f6ea3430ac4b36b3d2e88aafef45da. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216168.", "other": {"cve": {"id": "CVE-2022-4582", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-17T13:15:09.317", "lastModified": "2022-12-22T14:58:42.537", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in starter-public-edition-4 up to 4.6.10. It has been classified as problematic. Affected is an unknown function. The manipulation leads to cross site scripting. It is possible to launch the attack remotely. Upgrading to version 4.6.11 is able to address this issue. The name of the patch is 2606983c20f6ea3430ac4b36b3d2e88aafef45da. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-216168."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-707"}, {"lang": "en", "value": "CWE-74"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:starter-public-edition-4_project:starter-public-edition-4:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.6.11", "matchCriteriaId": "C21EA5EC-C389-4678-A8AB-F85596FBAE96"}]}]}], "references": [{"url": "https://github.com/ivantcholakov/starter-public-edition-4/commit/2606983c20f6ea3430ac4b36b3d2e88aafef45da", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ivantcholakov/starter-public-edition-4/releases/tag/v4.6.11", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216168", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ivantcholakov/starter-public-edition-4/commit/2606983c20f6ea3430ac4b36b3d2e88aafef45da"}}