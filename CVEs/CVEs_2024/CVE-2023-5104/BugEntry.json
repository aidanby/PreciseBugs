{"buggy_code": ["<script setup lang=\"ts\">\nimport { watchEffect } from '@vue/runtime-core'\nimport { Form, message } from 'ant-design-vue'\nimport type { TableType } from 'nocodb-sdk'\nimport { useProject, useTabs } from '#imports'\nimport { extractSdkResponseErrorMsg, validateTableName } from '~/utils'\nimport { useNuxtApp } from '#app'\n\ninterface Props {\n  modelValue?: boolean\n  tableMeta: TableType\n}\n\nconst { modelValue = false, tableMeta } = defineProps<Props>()\nconst emit = defineEmits(['update:modelValue', 'updated'])\nconst { $e, $api } = useNuxtApp()\nconst dialogShow = computed({\n  get() {\n    return modelValue\n  },\n  set(v) {\n    emit('update:modelValue', v)\n  },\n})\n\nconst { updateTab } = useTabs()\nconst { loadTables } = useProject()\nconst { tables } = useProject()\n\nconst inputEl = $ref<any>()\nlet loading = $ref(false)\nconst useForm = Form.useForm\nconst formState = reactive({\n  title: '',\n})\nconst validators = computed(() => {\n  return {\n    title: [\n      validateTableName,\n      {\n        validator: (rule: any, value: any, callback: (errMsg?: string) => void) => {\n          if (/^\\s+|\\s+$/.test(value)) {\n            callback('Leading or trailing whitespace not allowed in table name')\n          }\n          if (\n            !(tables?.value || []).every(\n              (t) => t.id === tableMeta.id || t.table_name.toLowerCase() !== (value || '').toLowerCase(),\n            )\n          ) {\n            callback('Duplicate table alias')\n          }\n          callback()\n        },\n      },\n    ],\n  }\n})\nconst { validateInfos } = useForm(formState, validators)\n\nwatchEffect(() => {\n  if (tableMeta?.title) formState.title = tableMeta?.title\n  // todo: replace setTimeout and follow better approach\n  nextTick(() => {\n    const input = inputEl?.$el\n    input.setSelectionRange(0, formState.title.length)\n    input.focus()\n  })\n})\n\nconst renameTable = async () => {\n  loading = true\n  try {\n    await $api.dbTable.update(tableMeta?.id as string, {\n      title: formState.title,\n    })\n    dialogShow.value = false\n    loadTables()\n    updateTab({ id: tableMeta?.id }, { title: formState.title })\n    message.success('Table renamed successfully')\n    $e('a:table:rename')\n    dialogShow.value = false\n  } catch (e: any) {\n    message.error(await extractSdkResponseErrorMsg(e))\n  }\n  loading = false\n}\n</script>\n\n<template>\n  <a-modal\n    v-model:visible=\"dialogShow\"\n    :title=\"$t('activity.renameTable')\"\n    :mask-closable=\"false\"\n    @keydown.esc=\"dialogShow = false\"\n    @finish=\"renameTable\"\n  >\n    <template #footer>\n      <a-button key=\"back\" @click=\"dialogShow = false\">{{ $t('general.cancel') }}</a-button>\n      <a-button key=\"submit\" type=\"primary\" :loading=\"loading\" @click=\"renameTable\">{{ $t('general.submit') }}</a-button>\n    </template>\n    <div class=\"pl-10 pr-10 pt-5\">\n      <a-form :model=\"formState\" name=\"create-new-table-form\">\n        <!-- hint=\"Enter table name\" -->\n        <div class=\"mb-2\">{{ $t('msg.info.enterTableName') }}</div>\n        <a-form-item v-bind=\"validateInfos.title\">\n          <a-input\n            ref=\"inputEl\"\n            v-model:value=\"formState.title\"\n            hide-details\n            :placeholder=\"$t('msg.info.enterTableName')\"\n            @keydown.enter=\"renameTable\"\n          />\n        </a-form-item>\n      </a-form>\n    </div>\n  </a-modal>\n</template>\n"], "fixing_code": ["<script setup lang=\"ts\">\nimport { watchEffect } from '@vue/runtime-core'\nimport { Form, message } from 'ant-design-vue'\nimport type { TableType } from 'nocodb-sdk'\nimport { useProject, useTabs } from '#imports'\nimport { extractSdkResponseErrorMsg, validateTableName } from '~/utils'\nimport { useNuxtApp } from '#app'\n\ninterface Props {\n  modelValue?: boolean\n  tableMeta: TableType\n}\n\nconst { modelValue = false, tableMeta } = defineProps<Props>()\nconst emit = defineEmits(['update:modelValue', 'updated'])\nconst { $e, $api } = useNuxtApp()\nconst dialogShow = computed({\n  get() {\n    return modelValue\n  },\n  set(v) {\n    emit('update:modelValue', v)\n  },\n})\n\nconst { updateTab } = useTabs()\nconst { loadTables, tables, project, isMysql, isMssql, isPg } = useProject()\n\nconst inputEl = $ref<any>()\nlet loading = $ref(false)\nconst useForm = Form.useForm\nconst formState = reactive({\n  title: '',\n})\nconst validators = computed(() => {\n  return {\n    title: [\n      validateTableName,\n      {\n        validator: (rule: any, value: any) => {\n          return new Promise<void>((resolve, reject) => {\n            let tableNameLengthLimit = 255\n            if (isMysql) {\n              tableNameLengthLimit = 64\n            } else if (isPg) {\n              tableNameLengthLimit = 63\n            } else if (isMssql) {\n              tableNameLengthLimit = 128\n            }\n            const projectPrefix = project?.value?.prefix || ''\n            if ((projectPrefix + value).length > tableNameLengthLimit) {\n              return reject(new Error(`Table name exceeds ${tableNameLengthLimit} characters`))\n            }\n            resolve()\n          })\n        },\n      },\n      {\n        validator: (rule: any, value: any, callback: (errMsg?: string) => void) => {\n          if (/^\\s+|\\s+$/.test(value)) {\n            callback('Leading or trailing whitespace not allowed in table name')\n          }\n          if (\n            !(tables?.value || []).every(\n              (t) => t.id === tableMeta.id || t.table_name.toLowerCase() !== (value || '').toLowerCase(),\n            )\n          ) {\n            callback('Duplicate table alias')\n          }\n          callback()\n        },\n      },\n    ],\n  }\n})\nconst { validateInfos } = useForm(formState, validators)\n\nwatchEffect(() => {\n  if (tableMeta?.title) formState.title = tableMeta?.title\n  // todo: replace setTimeout and follow better approach\n  nextTick(() => {\n    const input = inputEl?.$el\n    input.setSelectionRange(0, formState.title.length)\n    input.focus()\n  })\n})\n\nconst renameTable = async () => {\n  loading = true\n  try {\n    await $api.dbTable.update(tableMeta?.id as string, {\n      title: formState.title,\n    })\n    dialogShow.value = false\n    loadTables()\n    updateTab({ id: tableMeta?.id }, { title: formState.title })\n    message.success('Table renamed successfully')\n    $e('a:table:rename')\n    dialogShow.value = false\n  } catch (e: any) {\n    message.error(await extractSdkResponseErrorMsg(e))\n  }\n  loading = false\n}\n</script>\n\n<template>\n  <a-modal\n    v-model:visible=\"dialogShow\"\n    :title=\"$t('activity.renameTable')\"\n    :mask-closable=\"false\"\n    @keydown.esc=\"dialogShow = false\"\n    @finish=\"renameTable\"\n  >\n    <template #footer>\n      <a-button key=\"back\" @click=\"dialogShow = false\">{{ $t('general.cancel') }}</a-button>\n      <a-button key=\"submit\" type=\"primary\" :loading=\"loading\" @click=\"renameTable\">{{ $t('general.submit') }}</a-button>\n    </template>\n    <div class=\"pl-10 pr-10 pt-5\">\n      <a-form :model=\"formState\" name=\"create-new-table-form\">\n        <!-- hint=\"Enter table name\" -->\n        <div class=\"mb-2\">{{ $t('msg.info.enterTableName') }}</div>\n        <a-form-item v-bind=\"validateInfos.title\">\n          <a-input\n            ref=\"inputEl\"\n            v-model:value=\"formState.title\"\n            hide-details\n            :placeholder=\"$t('msg.info.enterTableName')\"\n            @keydown.enter=\"renameTable\"\n          />\n        </a-form-item>\n      </a-form>\n    </div>\n  </a-modal>\n</template>\n"], "filenames": ["packages/nc-gui-v2/components/dlg/TableRename.vue"], "buggy_code_start_loc": [27], "buggy_code_end_loc": [39], "fixing_code_start_loc": [27], "fixing_code_end_loc": [58], "type": "CWE-20", "message": "Improper Input Validation in GitHub repository nocodb/nocodb prior to 0.96.0.", "other": {"cve": {"id": "CVE-2023-5104", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-21T09:15:10.063", "lastModified": "2023-09-22T13:48:21.577", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Input Validation in GitHub repository nocodb/nocodb prior to 0.96.0."}, {"lang": "es", "value": "Validaci\u00f3n de Entrada Incorrecta en el repositorio de GitHub nocodb/nocodb anterior a 0.96.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xgenecloud:nocodb:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.96.0", "matchCriteriaId": "BF4594AD-B668-43AA-8A82-BFB6DD12CC29"}]}]}], "references": [{"url": "https://github.com/nocodb/nocodb/commit/db0385cb8aab2a34e233454607f59152ac62b3e2", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/1b5c6d9f-941e-4dd7-a964-42b53d6826b0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nocodb/nocodb/commit/db0385cb8aab2a34e233454607f59152ac62b3e2"}}