{"buggy_code": ["<?php\nnamespace Omeka\\Controller\\Admin;\n\nuse Omeka\\Api\\Exception\\ValidationException;\nuse Omeka\\Form\\ConfirmForm;\nuse Omeka\\Form\\VocabularyForm;\nuse Omeka\\Form\\VocabularyUpdateForm;\nuse Omeka\\Mvc\\Exception;\nuse Omeka\\Stdlib\\RdfImporter;\nuse Omeka\\Stdlib\\Message;\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\n\nclass VocabularyController extends AbstractActionController\n{\n    /**\n     * @var RdfImporter\n     */\n    protected $rdfImporter;\n\n    /**\n     * @param RdfImporter $rdfImporter\n     */\n    public function __construct(RdfImporter $rdfImporter)\n    {\n        $this->rdfImporter = $rdfImporter;\n    }\n\n    public function browseAction()\n    {\n        $this->browse()->setDefaults('vocabularies');\n        $response = $this->api()->search('vocabularies', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('vocabularies', $response->getContent());\n        return $view;\n    }\n\n    public function showDetailsAction()\n    {\n        $response = $this->api()->read('vocabularies', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setVariable('resource', $response->getContent());\n        return $view;\n    }\n\n    public function deleteConfirmAction()\n    {\n        $response = $this->api()->read('vocabularies', $this->params('id'));\n        $vocabulary = $response->getContent();\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setTemplate('common/delete-confirm-details');\n        $view->setVariable('resource', $vocabulary);\n        $view->setVariable('resourceLabel', 'vocabulary'); // @translate\n        $view->setVariable('partialPath', 'omeka/admin/vocabulary/show-details');\n        return $view;\n    }\n\n    public function importAction()\n    {\n        $form = $this->getForm(VocabularyForm::class, ['include_namespace' => true]);\n\n        $request = $this->getRequest();\n        if ($request->isPost()) {\n            $post = array_merge_recursive(\n                $request->getPost()->toArray(),\n                $request->getFiles()->toArray()\n            );\n            $form->setData($post);\n            if ($form->isValid()) {\n                $data = $form->getData();\n                try {\n                    $strategy = null;\n                    $options = [\n                        'format' => $data['vocabulary-file']['format'],\n                        'lang' => $data['vocabulary-advanced']['lang'],\n                        'label_property' => $data['vocabulary-advanced']['label_property'],\n                        'comment_property' => $data['vocabulary-advanced']['comment_property'],\n                    ];\n                    if (\\UPLOAD_ERR_OK === $data['vocabulary-file']['file']['error']) {\n                        $strategy = 'file';\n                        $options['file'] = $data['vocabulary-file']['file']['tmp_name'];\n                    } elseif ($data['vocabulary-file']['url']) {\n                        $strategy = 'url';\n                        $options['url'] = $data['vocabulary-file']['url'];\n                    } else {\n                        throw new ValidationException($this->translate('Must provide a vocabulary file or a vocabulary URL'));\n                    }\n                    $response = $this->rdfImporter->import($strategy, $data['vocabulary-info'], $options);\n                    if ($response) {\n                        $message = new Message(\n                            'Vocabulary successfully imported. %s', // @translate\n                            sprintf(\n                                '<a href=\"%s\">%s</a>',\n                                htmlspecialchars($this->url()->fromRoute(null, [], true)),\n                                $this->translate('Import another vocabulary?')\n                            ));\n                        $message->setEscapeHtml(false);\n                        $this->messenger()->addSuccess($message);\n                        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n                    }\n                } catch (ValidationException $e) {\n                    $messages = [];\n                    // A message may be thrown directly from the RDF importer.\n                    if ($e->getMessage()) {\n                        $messages[] = $e->getMessage();\n                    }\n                    // Messages may be thrown from the API via the importer.\n                    foreach ($e->getErrorStore()->getErrors() as $message) {\n                        $messages[] = $message;\n                    }\n                    $this->messenger()->addErrors($messages);\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function editAction()\n    {\n        $form = $this->getForm(VocabularyForm::class);\n        $vocabulary = $this->api()->read('vocabularies', $this->params('id'))->getContent();\n\n        if ($vocabulary->isPermanent()) {\n            throw new Exception\\PermissionDeniedException('Cannot edit a permanent vocabulary');\n        }\n\n        $data = [\n            'vocabulary-info' => [\n                'o:label' => $vocabulary->label(),\n                'o:comment' => $vocabulary->comment(),\n            ],\n        ];\n        $form->setData($data);\n\n        $view = new ViewModel;\n        $view->setVariable('vocabulary', $vocabulary);\n\n        $request = $this->getRequest();\n        if ($request->isPost()) {\n            $post = array_merge_recursive(\n                $request->getPost()->toArray(),\n                $request->getFiles()->toArray()\n            );\n            $form->setData($post);\n            if ($form->isValid()) {\n                $data = $form->getData();\n                $response = $this->api($form)->update('vocabularies', $this->params('id'), $data['vocabulary-info'], [], ['isPartial' => true]);\n\n                $strategy = null;\n                $options = [\n                    'format' => $data['vocabulary-file']['format'],\n                    'lang' => $data['vocabulary-advanced']['lang'],\n                    'label_property' => $data['vocabulary-advanced']['label_property'],\n                    'comment_property' => $data['vocabulary-advanced']['comment_property'],\n                ];\n                if (\\UPLOAD_ERR_OK === $data['vocabulary-file']['file']['error']) {\n                    $strategy = 'file';\n                    $options['file'] = $data['vocabulary-file']['file']['tmp_name'];\n                } elseif ($data['vocabulary-file']['url']) {\n                    $strategy = 'url';\n                    $options['url'] = $data['vocabulary-file']['url'];\n                }\n\n                if (null !== $strategy) {\n                    $this->messenger()->addSuccess('Please review these changes before you accept them.'); // @translate\n                    $diff = $this->rdfImporter->getDiff($strategy, $vocabulary->namespaceUri(), $options);\n                    $form = $this->getForm(VocabularyUpdateForm::class);\n                    $form->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'update'], true));\n                    $form->get('diff')->setValue(json_encode($diff));\n                    $view->setVariable('diff', $diff);\n                    $view->setTemplate('omeka/admin/vocabulary/update');\n                } else {\n                    $this->messenger()->addSuccess('Vocabulary successfully updated'); // @translate\n                    return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function updateAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $data = $this->params()->fromPost();\n            $form = $this->getForm(VocabularyUpdateForm::class);\n            $form->setData($data);\n            if ($form->isValid()) {\n                $this->rdfImporter->update($this->params('id'), json_decode($data['diff'], true));\n                $this->messenger()->addSuccess('Changes to the vocabulary successfully made'); // @translate\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function deleteAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $form = $this->getForm(ConfirmForm::class);\n            $form->setData($this->getRequest()->getPost());\n            if ($form->isValid()) {\n                $response = $this->api($form)->delete('vocabularies', $this->params('id'));\n                if ($response) {\n                    $this->messenger()->addSuccess('Vocabulary successfully deleted'); // @translate\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function propertiesAction()\n    {\n        if (!$this->params('id')) {\n            throw new Exception\\NotFoundException;\n        }\n\n        $this->browse()->setDefaults('properties');\n        $this->getRequest()->getQuery()->set('vocabulary_id', $this->params('id'));\n        $propResponse = $this->api()->search('properties', $this->params()->fromQuery());\n        $vocabResponse = $this->api()->read('vocabularies', $this->params('id'));\n        $this->paginator($propResponse->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('properties', $propResponse->getContent());\n        $view->setVariable('vocabulary', $vocabResponse->getContent());\n        return $view;\n    }\n\n    public function classesAction()\n    {\n        if (!$this->params('id')) {\n            throw new Exception\\NotFoundException;\n        }\n\n        $this->browse()->setDefaults('resource_classes');\n        $this->getRequest()->getQuery()->set('vocabulary_id', $this->params('id'));\n        $classResponse = $this->api()->search('resource_classes', $this->params()->fromQuery());\n        $vocabResponse = $this->api()->read('vocabularies', $this->params('id'));\n        $this->paginator($classResponse->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('resourceClasses', $classResponse->getContent());\n        $view->setVariable('vocabulary', $vocabResponse->getContent());\n        return $view;\n    }\n}\n"], "fixing_code": ["<?php\nnamespace Omeka\\Controller\\Admin;\n\nuse Omeka\\Api\\Exception\\ValidationException;\nuse Omeka\\Form\\ConfirmForm;\nuse Omeka\\Form\\VocabularyForm;\nuse Omeka\\Form\\VocabularyUpdateForm;\nuse Omeka\\Mvc\\Exception;\nuse Omeka\\Stdlib\\RdfImporter;\nuse Omeka\\Stdlib\\Message;\nuse Laminas\\Mvc\\Controller\\AbstractActionController;\nuse Laminas\\View\\Model\\ViewModel;\n\nclass VocabularyController extends AbstractActionController\n{\n    /**\n     * @var RdfImporter\n     */\n    protected $rdfImporter;\n\n    /**\n     * @param RdfImporter $rdfImporter\n     */\n    public function __construct(RdfImporter $rdfImporter)\n    {\n        $this->rdfImporter = $rdfImporter;\n    }\n\n    public function browseAction()\n    {\n        $this->browse()->setDefaults('vocabularies');\n        $response = $this->api()->search('vocabularies', $this->params()->fromQuery());\n        $this->paginator($response->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('vocabularies', $response->getContent());\n        return $view;\n    }\n\n    public function showDetailsAction()\n    {\n        $response = $this->api()->read('vocabularies', $this->params('id'));\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setVariable('resource', $response->getContent());\n        return $view;\n    }\n\n    public function deleteConfirmAction()\n    {\n        $response = $this->api()->read('vocabularies', $this->params('id'));\n        $vocabulary = $response->getContent();\n\n        $view = new ViewModel;\n        $view->setTerminal(true);\n        $view->setTemplate('common/delete-confirm-details');\n        $view->setVariable('resource', $vocabulary);\n        $view->setVariable('resourceLabel', 'vocabulary'); // @translate\n        $view->setVariable('partialPath', 'omeka/admin/vocabulary/show-details');\n        return $view;\n    }\n\n    public function importAction()\n    {\n        $form = $this->getForm(VocabularyForm::class, ['include_namespace' => true]);\n\n        $request = $this->getRequest();\n        if ($request->isPost()) {\n            $post = array_merge_recursive(\n                $request->getPost()->toArray(),\n                $request->getFiles()->toArray()\n            );\n            $form->setData($post);\n            if ($form->isValid()) {\n                $data = $form->getData();\n                try {\n                    $strategy = null;\n                    $options = [\n                        'format' => $data['vocabulary-file']['format'],\n                        'lang' => $data['vocabulary-advanced']['lang'],\n                        'label_property' => $data['vocabulary-advanced']['label_property'],\n                        'comment_property' => $data['vocabulary-advanced']['comment_property'],\n                    ];\n                    if (\\UPLOAD_ERR_OK === $data['vocabulary-file']['file']['error']) {\n                        $strategy = 'file';\n                        $options['file'] = $data['vocabulary-file']['file']['tmp_name'];\n                    } elseif ($data['vocabulary-file']['url']) {\n                        $strategy = 'url';\n                        $options['url'] = $data['vocabulary-file']['url'];\n                    } else {\n                        throw new ValidationException($this->translate('Must provide a vocabulary file or a vocabulary URL'));\n                    }\n                    $response = $this->rdfImporter->import($strategy, $data['vocabulary-info'], $options);\n                    if ($response) {\n                        $message = new Message(\n                            'Vocabulary successfully imported. %s', // @translate\n                            sprintf(\n                                '<a href=\"%s\">%s</a>',\n                                htmlspecialchars($this->url()->fromRoute(null, [], true)),\n                                $this->translate('Import another vocabulary?')\n                            ));\n                        $message->setEscapeHtml(false);\n                        $this->messenger()->addSuccess($message);\n                        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n                    }\n                } catch (ValidationException $e) {\n                    $messages = [];\n                    // A message may be thrown directly from the RDF importer.\n                    // Here, we set a generic message because error messages\n                    // thrown by the RDF library may make the target server\n                    // vulnerable to Server Side Request Forgery (SSRF).\n                    if ($e->getMessage()) {\n                        $messages[] = $this->translate('Error importing the vocabulary. Check the file or URL.');\n                    }\n                    // Messages may be thrown from the API via the importer.\n                    foreach ($e->getErrorStore()->getErrors() as $message) {\n                        $messages[] = $message;\n                    }\n                    $this->messenger()->addErrors($messages);\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view = new ViewModel;\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function editAction()\n    {\n        $form = $this->getForm(VocabularyForm::class);\n        $vocabulary = $this->api()->read('vocabularies', $this->params('id'))->getContent();\n\n        if ($vocabulary->isPermanent()) {\n            throw new Exception\\PermissionDeniedException('Cannot edit a permanent vocabulary');\n        }\n\n        $data = [\n            'vocabulary-info' => [\n                'o:label' => $vocabulary->label(),\n                'o:comment' => $vocabulary->comment(),\n            ],\n        ];\n        $form->setData($data);\n\n        $view = new ViewModel;\n        $view->setVariable('vocabulary', $vocabulary);\n\n        $request = $this->getRequest();\n        if ($request->isPost()) {\n            $post = array_merge_recursive(\n                $request->getPost()->toArray(),\n                $request->getFiles()->toArray()\n            );\n            $form->setData($post);\n            if ($form->isValid()) {\n                $data = $form->getData();\n                $response = $this->api($form)->update('vocabularies', $this->params('id'), $data['vocabulary-info'], [], ['isPartial' => true]);\n\n                $strategy = null;\n                $options = [\n                    'format' => $data['vocabulary-file']['format'],\n                    'lang' => $data['vocabulary-advanced']['lang'],\n                    'label_property' => $data['vocabulary-advanced']['label_property'],\n                    'comment_property' => $data['vocabulary-advanced']['comment_property'],\n                ];\n                if (\\UPLOAD_ERR_OK === $data['vocabulary-file']['file']['error']) {\n                    $strategy = 'file';\n                    $options['file'] = $data['vocabulary-file']['file']['tmp_name'];\n                } elseif ($data['vocabulary-file']['url']) {\n                    $strategy = 'url';\n                    $options['url'] = $data['vocabulary-file']['url'];\n                }\n\n                if (null !== $strategy) {\n                    $this->messenger()->addSuccess('Please review these changes before you accept them.'); // @translate\n                    $diff = $this->rdfImporter->getDiff($strategy, $vocabulary->namespaceUri(), $options);\n                    $form = $this->getForm(VocabularyUpdateForm::class);\n                    $form->setAttribute('action', $this->url()->fromRoute(null, ['action' => 'update'], true));\n                    $form->get('diff')->setValue(json_encode($diff));\n                    $view->setVariable('diff', $diff);\n                    $view->setTemplate('omeka/admin/vocabulary/update');\n                } else {\n                    $this->messenger()->addSuccess('Vocabulary successfully updated'); // @translate\n                    return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n\n        $view->setVariable('form', $form);\n        return $view;\n    }\n\n    public function updateAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $data = $this->params()->fromPost();\n            $form = $this->getForm(VocabularyUpdateForm::class);\n            $form->setData($data);\n            if ($form->isValid()) {\n                $this->rdfImporter->update($this->params('id'), json_decode($data['diff'], true));\n                $this->messenger()->addSuccess('Changes to the vocabulary successfully made'); // @translate\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function deleteAction()\n    {\n        if ($this->getRequest()->isPost()) {\n            $form = $this->getForm(ConfirmForm::class);\n            $form->setData($this->getRequest()->getPost());\n            if ($form->isValid()) {\n                $response = $this->api($form)->delete('vocabularies', $this->params('id'));\n                if ($response) {\n                    $this->messenger()->addSuccess('Vocabulary successfully deleted'); // @translate\n                }\n            } else {\n                $this->messenger()->addFormErrors($form);\n            }\n        }\n        return $this->redirect()->toRoute(null, ['action' => 'browse'], true);\n    }\n\n    public function propertiesAction()\n    {\n        if (!$this->params('id')) {\n            throw new Exception\\NotFoundException;\n        }\n\n        $this->browse()->setDefaults('properties');\n        $this->getRequest()->getQuery()->set('vocabulary_id', $this->params('id'));\n        $propResponse = $this->api()->search('properties', $this->params()->fromQuery());\n        $vocabResponse = $this->api()->read('vocabularies', $this->params('id'));\n        $this->paginator($propResponse->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('properties', $propResponse->getContent());\n        $view->setVariable('vocabulary', $vocabResponse->getContent());\n        return $view;\n    }\n\n    public function classesAction()\n    {\n        if (!$this->params('id')) {\n            throw new Exception\\NotFoundException;\n        }\n\n        $this->browse()->setDefaults('resource_classes');\n        $this->getRequest()->getQuery()->set('vocabulary_id', $this->params('id'));\n        $classResponse = $this->api()->search('resource_classes', $this->params()->fromQuery());\n        $vocabResponse = $this->api()->read('vocabularies', $this->params('id'));\n        $this->paginator($classResponse->getTotalResults());\n\n        $view = new ViewModel;\n        $view->setVariable('resourceClasses', $classResponse->getContent());\n        $view->setVariable('vocabulary', $vocabResponse->getContent());\n        return $view;\n    }\n}\n"], "filenames": ["application/src/Controller/Admin/VocabularyController.php"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [112], "fixing_code_start_loc": [110], "fixing_code_end_loc": [115], "type": "CWE-918", "message": "Server-Side Request Forgery (SSRF) in GitHub repository omeka/omeka-s prior to 4.0.2.", "other": {"cve": {"id": "CVE-2023-3981", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-27T19:15:10.523", "lastModified": "2023-08-03T13:41:58.530", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Server-Side Request Forgery (SSRF) in GitHub repository omeka/omeka-s prior to 4.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:omeka:omeka:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.2", "matchCriteriaId": "AFD2141E-7543-4384-8AD9-9279732AB5EF"}]}]}], "references": [{"url": "https://github.com/omeka/omeka-s/commit/dc01ca1b03e845db8a6a6b665d8da36c8dcd2c31", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/f5018226-0063-415d-9675-d7e30934ff78", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/omeka/omeka-s/commit/dc01ca1b03e845db8a6a6b665d8da36c8dcd2c31"}}