{"buggy_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * scriptfile.c: functions for dealing with the runtime directories/files\n */\n\n#include \"vim.h\"\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n// The names of packages that once were loaded are remembered.\nstatic garray_T\t\tga_loaded = {0, 0, sizeof(char_u *), 4, NULL};\n#endif\n\n// last used sequence number for sourcing scripts (current_sctx.sc_seq)\n#ifdef FEAT_EVAL\nstatic int\t\tlast_current_SID_seq = 0;\n#endif\n\nstatic int do_source_ext(char_u *fname, int check_other, int is_vimrc, int *ret_sid, exarg_T *eap, int clearvars);\n\n/*\n * Initialize the execution stack.\n */\n    void\nestack_init(void)\n{\n    estack_T *entry;\n\n    if (ga_grow(&exestack, 10) == FAIL)\n\tmch_exit(0);\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len;\n    entry->es_type = ETYPE_TOP;\n    entry->es_name = NULL;\n    entry->es_lnum = 0;\n#ifdef FEAT_EVAL\n    entry->es_info.ufunc = NULL;\n#endif\n    ++exestack.ga_len;\n}\n\n/*\n * Add an item to the execution stack.\n * Returns the new entry or NULL when out of memory.\n */\n    estack_T *\nestack_push(etype_T type, char_u *name, long lnum)\n{\n    estack_T *entry;\n\n    // If memory allocation fails then we'll pop more than we push, eventually\n    // at the top level it will be OK again.\n    if (ga_grow(&exestack, 1) == OK)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + exestack.ga_len;\n\tentry->es_type = type;\n\tentry->es_name = name;\n\tentry->es_lnum = lnum;\n#ifdef FEAT_EVAL\n\tentry->es_info.ufunc = NULL;\n#endif\n\t++exestack.ga_len;\n\treturn entry;\n    }\n    return NULL;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Add a user function to the execution stack.\n */\n    estack_T *\nestack_push_ufunc(ufunc_T *ufunc, long lnum)\n{\n    estack_T *entry = estack_push(ETYPE_UFUNC,\n\t    ufunc->uf_name_exp != NULL\n\t\t\t\t  ? ufunc->uf_name_exp : ufunc->uf_name, lnum);\n    if (entry != NULL)\n\tentry->es_info.ufunc = ufunc;\n    return entry;\n}\n\n/*\n * Return TRUE if \"ufunc\" with \"lnum\" is already at the top of the exe stack.\n */\n    int\nestack_top_is_ufunc(ufunc_T *ufunc, long lnum)\n{\n    estack_T *entry;\n\n    if (exestack.ga_len == 0)\n\treturn FALSE;\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n    return entry->es_type == ETYPE_UFUNC\n\t&& STRCMP( entry->es_name, ufunc->uf_name_exp != NULL\n\t\t\t\t    ? ufunc->uf_name_exp : ufunc->uf_name) == 0\n\t&& entry->es_lnum == lnum;\n}\n#endif\n\n/*\n * Take an item off of the execution stack and return it.\n */\n    estack_T *\nestack_pop(void)\n{\n    if (exestack.ga_len == 0)\n\treturn NULL;\n    --exestack.ga_len;\n    return ((estack_T *)exestack.ga_data) + exestack.ga_len;\n}\n\n/*\n * Get the current value for \"which\" in allocated memory.\n * \"which\" is ESTACK_SFILE for <sfile>, ESTACK_STACK for <stack> or\n * ESTACK_SCRIPT for <script>.\n */\n    char_u *\nestack_sfile(estack_arg_T which UNUSED)\n{\n    estack_T\t*entry;\n#ifdef FEAT_EVAL\n    garray_T\tga;\n    size_t\tlen;\n    int\t\tidx;\n    etype_T\tlast_type = ETYPE_SCRIPT;\n    char\t*type_name;\n#endif\n\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n#ifdef FEAT_EVAL\n    if (which == ESTACK_SFILE && entry->es_type != ETYPE_UFUNC)\n#endif\n    {\n\tif (entry->es_name == NULL)\n\t    return NULL;\n\treturn vim_strsave(entry->es_name);\n    }\n#ifdef FEAT_EVAL\n    // expand('<sfile>') works in a function for backwards compatibility, but\n    // may give an unexpected result.  Disallow it in Vim 9 script.\n    if (which == ESTACK_SFILE && in_vim9script())\n    {\n\tint  save_emsg_off = emsg_off;\n\n\tif (emsg_off == 1)\n\t    // f_expand() silences errors but we do want this one\n\t    emsg_off = 0;\n\temsg(_(e_cannot_expand_sfile_in_vim9_function));\n\temsg_off = save_emsg_off;\n\treturn NULL;\n    }\n\n    // If evaluated in a function or autocommand, return the path of the script\n    // where it is defined, at script level the current script path is returned\n    // instead.\n    if (which == ESTACK_SCRIPT)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n\t// Walk the stack backwards, starting from the current frame.\n\tfor (idx = exestack.ga_len - 1; idx >= 0; --idx, --entry)\n\t{\n\t    if (entry->es_type == ETYPE_UFUNC)\n\t    {\n\t\tsctx_T *def_ctx = &entry->es_info.ufunc->uf_script_ctx;\n\n\t\tif (def_ctx->sc_sid > 0)\n\t\t    return vim_strsave(SCRIPT_ITEM(def_ctx->sc_sid)->sn_name);\n\t\telse\n\t\t    return NULL;\n\t    }\n\t    else if (entry->es_type == ETYPE_AUCMD)\n\t    {\n\t\tsctx_T *def_ctx = acp_script_ctx(entry->es_info.aucmd);\n\n\t\tif (def_ctx->sc_sid > 0)\n\t\t    return vim_strsave(SCRIPT_ITEM(def_ctx->sc_sid)->sn_name);\n\t\telse\n\t\t    return NULL;\n\t    }\n\t    else if (entry->es_type == ETYPE_SCRIPT)\n\t    {\n\t\treturn vim_strsave(entry->es_name);\n\t    }\n\t}\n\treturn NULL;\n    }\n\n    // Give information about each stack entry up to the root.\n    // For a function we compose the call stack, as it was done in the past:\n    //   \"function One[123]..Two[456]..Three\"\n    ga_init2(&ga, sizeof(char), 100);\n    for (idx = 0; idx < exestack.ga_len; ++idx)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + idx;\n\tif (entry->es_name != NULL)\n\t{\n\t    long    lnum = 0;\n\t    char    *dots;\n\n\t    len = STRLEN(entry->es_name) + 15;\n\t    type_name = \"\";\n\t    if (entry->es_type != last_type)\n\t    {\n\t\tswitch (entry->es_type)\n\t\t{\n\t\t    case ETYPE_SCRIPT: type_name = \"script \"; break;\n\t\t    case ETYPE_UFUNC: type_name = \"function \"; break;\n\t\t    default: type_name = \"\"; break;\n\t\t}\n\t\tlast_type = entry->es_type;\n\t    }\n\t    len += STRLEN(type_name);\n\t    if (ga_grow(&ga, (int)len) == FAIL)\n\t\tbreak;\n\t    if (idx == exestack.ga_len - 1)\n\t\tlnum = which == ESTACK_STACK ? SOURCING_LNUM : 0;\n\t    else\n\t\tlnum = entry->es_lnum;\n\t    dots = idx == exestack.ga_len - 1 ? \"\" : \"..\";\n\t    if (lnum == 0)\n\t\t// For the bottom entry of <sfile>: do not add the line number,\n\t\t// it is used in <slnum>.  Also leave it out when the number is\n\t\t// not set.\n\t\tvim_snprintf((char *)ga.ga_data + ga.ga_len, len, \"%s%s%s\",\n\t\t\t\ttype_name, entry->es_name, dots);\n\t    else\n\t\tvim_snprintf((char *)ga.ga_data + ga.ga_len, len, \"%s%s[%ld]%s\",\n\t\t\t\t    type_name, entry->es_name, lnum, dots);\n\t    ga.ga_len += (int)STRLEN((char *)ga.ga_data + ga.ga_len);\n\t}\n    }\n\n    return (char_u *)ga.ga_data;\n#endif\n}\n\n/*\n * \":runtime [what] {name}\"\n */\n    void\nex_runtime(exarg_T *eap)\n{\n    char_u  *arg = eap->arg;\n    char_u  *p = skiptowhite(arg);\n    int\t    len = (int)(p - arg);\n    int\t    flags = eap->forceit ? DIP_ALL : 0;\n\n    if (STRNCMP(arg, \"START\", len) == 0)\n    {\n\tflags += DIP_START + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"OPT\", len) == 0)\n    {\n\tflags += DIP_OPT + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"PACK\", len) == 0)\n    {\n\tflags += DIP_START + DIP_OPT + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"ALL\", len) == 0)\n    {\n\tflags += DIP_START + DIP_OPT;\n\targ = skipwhite(arg + len);\n    }\n\n    source_runtime(arg, flags);\n}\n\n    static void\nsource_callback(char_u *fname, void *cookie)\n{\n    (void)do_source(fname, FALSE, DOSO_NONE, cookie);\n}\n\n#ifdef FEAT_EVAL\n/*\n * Find an already loaded script \"name\".\n * If found returns its script ID.  If not found returns -1.\n */\n    int\nfind_script_by_name(char_u *name)\n{\n    int\t\t    sid;\n    scriptitem_T    *si;\n\n    for (sid = script_items.ga_len; sid > 0; --sid)\n    {\n\t// We used to check inode here, but that doesn't work:\n\t// - If a script is edited and written, it may get a different\n\t//   inode number, even though to the user it is the same script.\n\t// - If a script is deleted and another script is written, with a\n\t//   different name, the inode may be re-used.\n\tsi = SCRIPT_ITEM(sid);\n\tif (si->sn_name != NULL && fnamecmp(si->sn_name, name) == 0)\n\t    return sid;\n    }\n    return -1;\n}\n\n/*\n * Add a new scriptitem with all items initialized.\n * When running out of memory \"error\" is set to FAIL.\n * Returns the script ID.\n */\n    static int\nget_new_scriptitem(int *error)\n{\n    static scid_T   last_current_SID = 0;\n    int\t\t    sid = ++last_current_SID;\n    scriptitem_T    *si = NULL;\n\n    if (ga_grow(&script_items, (int)(sid - script_items.ga_len)) == FAIL)\n    {\n\t*error = FAIL;\n\treturn sid;\n    }\n    while (script_items.ga_len < sid)\n    {\n\tsi = ALLOC_CLEAR_ONE(scriptitem_T);\n\tif (si == NULL)\n\t{\n\t    *error = FAIL;\n\t    return sid;\n\t}\n\t++script_items.ga_len;\n\tSCRIPT_ITEM(script_items.ga_len) = si;\n\tsi->sn_name = NULL;\n\tsi->sn_version = 1;\n\n\t// Allocate the local script variables to use for this script.\n\tnew_script_vars(script_items.ga_len);\n\tga_init2(&si->sn_var_vals, sizeof(svar_T), 10);\n\thash_init(&si->sn_all_vars.dv_hashtab);\n\tga_init2(&si->sn_imports, sizeof(imported_T), 10);\n\tga_init2(&si->sn_type_list, sizeof(type_T), 10);\n# ifdef FEAT_PROFILE\n\tsi->sn_prof_on = FALSE;\n# endif\n    }\n\n    // \"si\" can't be NULL, check only to avoid a compiler warning\n    if (si != NULL)\n\t// Used to check script variable index is still valid.\n\tsi->sn_script_seq = current_sctx.sc_seq;\n\n    return sid;\n}\n\n    int\nget_new_scriptitem_for_fname(int *error, char_u *fname)\n{\n    int sid = get_new_scriptitem(error);\n\n    if (*error == OK)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(sid);\n\n\tsi->sn_name = vim_strsave(fname);\n\tsi->sn_state = SN_STATE_NOT_LOADED;\n    }\n    return sid;\n}\n\n    static void\nfind_script_callback(char_u *fname, void *cookie)\n{\n    int sid;\n    int error = OK;\n    int *ret_sid = cookie;\n\n    sid = find_script_by_name(fname);\n    if (sid < 0)\n\t// script does not exist yet, create a new scriptitem\n\tsid = get_new_scriptitem_for_fname(&error, fname);\n    *ret_sid = sid;\n}\n#endif\n\n/*\n * Find the file \"name\" in all directories in \"path\" and invoke\n * \"callback(fname, cookie)\".\n * \"name\" can contain wildcards.\n * When \"flags\" has DIP_ALL: source all files, otherwise only the first one.\n * When \"flags\" has DIP_DIR: find directories instead of files.\n * When \"flags\" has DIP_ERR: give an error message if there is no match.\n *\n * return FAIL when no file could be sourced, OK otherwise.\n */\n    int\ndo_in_path(\n    char_u\t*path,\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    char_u\t*rtp;\n    char_u\t*np;\n    char_u\t*buf;\n    char_u\t*rtp_copy;\n    char_u\t*tail;\n    int\t\tnum_files;\n    char_u\t**files;\n    int\t\ti;\n    int\t\tdid_one = FALSE;\n#ifdef AMIGA\n    struct Process\t*proc = (struct Process *)FindTask(0L);\n    APTR\t\tsave_winptr = proc->pr_WindowPtr;\n\n    // Avoid a requester here for a volume that doesn't exist.\n    proc->pr_WindowPtr = (APTR)-1L;\n#endif\n\n    // Make a copy of 'runtimepath'.  Invoking the callback may change the\n    // value.\n    rtp_copy = vim_strsave(path);\n    buf = alloc(MAXPATHL);\n    if (buf != NULL && rtp_copy != NULL)\n    {\n\tif (p_verbose > 10 && name != NULL)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"Searching for \\\"%s\\\" in \\\"%s\\\"\"),\n\t\t\t\t\t\t (char *)name, (char *)path);\n\t    verbose_leave();\n\t}\n\n\t// Loop over all entries in 'runtimepath'.\n\trtp = rtp_copy;\n\twhile (*rtp != NUL && ((flags & DIP_ALL) || !did_one))\n\t{\n\t    size_t buflen;\n\n\t    // Copy the path from 'runtimepath' to buf[].\n\t    copy_option_part(&rtp, buf, MAXPATHL, \",\");\n\t    buflen = STRLEN(buf);\n\n\t    // Skip after or non-after directories.\n\t    if (flags & (DIP_NOAFTER | DIP_AFTER))\n\t    {\n\t\tint is_after = buflen >= 5\n\t\t\t\t     && STRCMP(buf + buflen - 5, \"after\") == 0;\n\n\t\tif ((is_after && (flags & DIP_NOAFTER))\n\t\t\t|| (!is_after && (flags & DIP_AFTER)))\n\t\t    continue;\n\t    }\n\n\t    if (name == NULL)\n\t    {\n\t\t(*callback)(buf, (void *) &cookie);\n\t\tif (!did_one)\n\t\t    did_one = (cookie == NULL);\n\t    }\n\t    else if (buflen + STRLEN(name) + 2 < MAXPATHL)\n\t    {\n\t\tadd_pathsep(buf);\n\t\ttail = buf + STRLEN(buf);\n\n\t\t// Loop over all patterns in \"name\"\n\t\tnp = name;\n\t\twhile (*np != NUL && ((flags & DIP_ALL) || !did_one))\n\t\t{\n\t\t    // Append the pattern from \"name\" to buf[].\n\t\t    copy_option_part(&np, tail, (int)(MAXPATHL - (tail - buf)),\n\t\t\t\t\t\t\t\t       \"\\t \");\n\n\t\t    if (p_verbose > 10)\n\t\t    {\n\t\t\tverbose_enter();\n\t\t\tsmsg(_(\"Searching for \\\"%s\\\"\"), buf);\n\t\t\tverbose_leave();\n\t\t    }\n\n\t\t    // Expand wildcards, invoke the callback for each match.\n\t\t    if (gen_expand_wildcards(1, &buf, &num_files, &files,\n\t\t\t\t  (flags & DIP_DIR) ? EW_DIR : EW_FILE) == OK)\n\t\t    {\n\t\t\tfor (i = 0; i < num_files; ++i)\n\t\t\t{\n\t\t\t    (*callback)(files[i], cookie);\n\t\t\t    did_one = TRUE;\n\t\t\t    if (!(flags & DIP_ALL))\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tFreeWild(num_files, files);\n\t\t    }\n\t\t}\n\t    }\n\t}\n    }\n    vim_free(buf);\n    vim_free(rtp_copy);\n    if (!did_one && name != NULL)\n    {\n\tchar *basepath = path == p_rtp ? \"runtimepath\" : \"packpath\";\n\n\tif (flags & DIP_ERR)\n\t    semsg(_(e_directory_not_found_in_str_str), basepath, name);\n\telse if (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"not found in '%s': \\\"%s\\\"\"), basepath, name);\n\t    verbose_leave();\n\t}\n    }\n\n#ifdef AMIGA\n    proc->pr_WindowPtr = save_winptr;\n#endif\n\n    return did_one ? OK : FAIL;\n}\n\n/*\n * Find \"name\" in \"path\".  When found, invoke the callback function for\n * it: callback(fname, \"cookie\")\n * When \"flags\" has DIP_ALL repeat for all matches, otherwise only the first\n * one is used.\n * Returns OK when at least one match found, FAIL otherwise.\n *\n * If \"name\" is NULL calls callback for each entry in \"path\". Cookie is\n * passed by reference in this case, setting it to NULL indicates that callback\n * has done its job.\n */\n    static int\ndo_in_path_and_pp(\n    char_u\t*path,\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    int\t\tdone = FAIL;\n    char_u\t*s;\n    int\t\tlen;\n    char\t*start_dir = \"pack/*/start/*/%s\";\n    char\t*opt_dir = \"pack/*/opt/*/%s\";\n\n    if ((flags & DIP_NORTP) == 0)\n\tdone = do_in_path(path, name, flags, callback, cookie);\n\n    if ((done == FAIL || (flags & DIP_ALL)) && (flags & DIP_START))\n    {\n\tlen = (int)(STRLEN(start_dir) + STRLEN(name));\n\ts = alloc(len);\n\tif (s == NULL)\n\t    return FAIL;\n\tvim_snprintf((char *)s, len, start_dir, name);\n\tdone = do_in_path(p_pp, s, flags, callback, cookie);\n\tvim_free(s);\n    }\n\n    if ((done == FAIL || (flags & DIP_ALL)) && (flags & DIP_OPT))\n    {\n\tlen = (int)(STRLEN(opt_dir) + STRLEN(name));\n\ts = alloc(len);\n\tif (s == NULL)\n\t    return FAIL;\n\tvim_snprintf((char *)s, len, opt_dir, name);\n\tdone = do_in_path(p_pp, s, flags, callback, cookie);\n\tvim_free(s);\n    }\n\n    return done;\n}\n\n/*\n * Just like do_in_path_and_pp(), using 'runtimepath' for \"path\".\n */\n    int\ndo_in_runtimepath(\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    return do_in_path_and_pp(p_rtp, name, flags, callback, cookie);\n}\n\n/*\n * Source the file \"name\" from all directories in 'runtimepath'.\n * \"name\" can contain wildcards.\n * When \"flags\" has DIP_ALL: source all files, otherwise only the first one.\n *\n * return FAIL when no file could be sourced, OK otherwise.\n */\n    int\nsource_runtime(char_u *name, int flags)\n{\n    return source_in_path(p_rtp, name, flags, NULL);\n}\n\n/*\n * Just like source_runtime(), but use \"path\" instead of 'runtimepath'\n * and return the script ID in \"ret_sid\".\n */\n    int\nsource_in_path(char_u *path, char_u *name, int flags, int *ret_sid)\n{\n    return do_in_path_and_pp(path, name, flags, source_callback, ret_sid);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * Find \"name\" in 'runtimepath'. If found a new scriptitem is created for it\n * and it's script ID is returned.\n * If not found returns -1.\n */\n    int\nfind_script_in_rtp(char_u *name)\n{\n    int sid = -1;\n\n    (void)do_in_path_and_pp(p_rtp, name, DIP_NOAFTER,\n\t\t\t\t\t\t   find_script_callback, &sid);\n    return sid;\n}\n\n/*\n * Expand wildcards in \"pat\" and invoke do_source() for each match.\n */\n    static void\nsource_all_matches(char_u *pat)\n{\n    int\t    num_files;\n    char_u  **files;\n    int\t    i;\n\n    if (gen_expand_wildcards(1, &pat, &num_files, &files, EW_FILE) == OK)\n    {\n\tfor (i = 0; i < num_files; ++i)\n\t    (void)do_source(files[i], FALSE, DOSO_NONE, NULL);\n\tFreeWild(num_files, files);\n    }\n}\n\n/*\n * Add the package directory to 'runtimepath'.\n */\n    static int\nadd_pack_dir_to_rtp(char_u *fname)\n{\n    char_u  *p4, *p3, *p2, *p1, *p;\n    char_u  *entry;\n    char_u  *insp = NULL;\n    int\t    c;\n    char_u  *new_rtp;\n    int\t    keep;\n    size_t  oldlen;\n    size_t  addlen;\n    size_t  new_rtp_len;\n    char_u  *afterdir = NULL;\n    size_t  afterlen = 0;\n    char_u  *after_insp = NULL;\n    char_u  *ffname = NULL;\n    size_t  fname_len;\n    char_u  *buf = NULL;\n    char_u  *rtp_ffname;\n    int\t    match;\n    int\t    retval = FAIL;\n\n    p4 = p3 = p2 = p1 = get_past_head(fname);\n    for (p = p1; *p; MB_PTR_ADV(p))\n\tif (vim_ispathsep_nocolon(*p))\n\t{\n\t    p4 = p3; p3 = p2; p2 = p1; p1 = p;\n\t}\n\n    // now we have:\n    // rtp/pack/name/start/name\n    //    p4   p3   p2    p1\n    //\n    // find the part up to \"pack\" in 'runtimepath'\n    c = *++p4; // append pathsep in order to expand symlink\n    *p4 = NUL;\n    ffname = fix_fname(fname);\n    *p4 = c;\n    if (ffname == NULL)\n\treturn FAIL;\n\n    // Find \"ffname\" in \"p_rtp\", ignoring '/' vs '\\' differences.\n    // Also stop at the first \"after\" directory.\n    fname_len = STRLEN(ffname);\n    buf = alloc(MAXPATHL);\n    if (buf == NULL)\n\tgoto theend;\n    for (entry = p_rtp; *entry != NUL; )\n    {\n\tchar_u *cur_entry = entry;\n\n\tcopy_option_part(&entry, buf, MAXPATHL, \",\");\n\tif (insp == NULL)\n\t{\n\t    add_pathsep(buf);\n\t    rtp_ffname = fix_fname(buf);\n\t    if (rtp_ffname == NULL)\n\t\tgoto theend;\n\t    match = vim_fnamencmp(rtp_ffname, ffname, fname_len) == 0;\n\t    vim_free(rtp_ffname);\n\t    if (match)\n\t\t// Insert \"ffname\" after this entry (and comma).\n\t\tinsp = entry;\n\t}\n\n\tif ((p = (char_u *)strstr((char *)buf, \"after\")) != NULL\n\t\t&& p > buf\n\t\t&& vim_ispathsep(p[-1])\n\t\t&& (vim_ispathsep(p[5]) || p[5] == NUL || p[5] == ','))\n\t{\n\t    if (insp == NULL)\n\t\t// Did not find \"ffname\" before the first \"after\" directory,\n\t\t// insert it before this entry.\n\t\tinsp = cur_entry;\n\t    after_insp = cur_entry;\n\t    break;\n\t}\n    }\n\n    if (insp == NULL)\n\t// Both \"fname\" and \"after\" not found, append at the end.\n\tinsp = p_rtp + STRLEN(p_rtp);\n\n    // check if rtp/pack/name/start/name/after exists\n    afterdir = concat_fnames(fname, (char_u *)\"after\", TRUE);\n    if (afterdir != NULL && mch_isdir(afterdir))\n\tafterlen = STRLEN(afterdir) + 1; // add one for comma\n\n    oldlen = STRLEN(p_rtp);\n    addlen = STRLEN(fname) + 1; // add one for comma\n    new_rtp = alloc(oldlen + addlen + afterlen + 1); // add one for NUL\n    if (new_rtp == NULL)\n\tgoto theend;\n\n    // We now have 'rtp' parts: {keep}{keep_after}{rest}.\n    // Create new_rtp, first: {keep},{fname}\n    keep = (int)(insp - p_rtp);\n    mch_memmove(new_rtp, p_rtp, keep);\n    new_rtp_len = keep;\n    if (*insp == NUL)\n\tnew_rtp[new_rtp_len++] = ',';  // add comma before\n    mch_memmove(new_rtp + new_rtp_len, fname, addlen - 1);\n    new_rtp_len += addlen - 1;\n    if (*insp != NUL)\n\tnew_rtp[new_rtp_len++] = ',';  // add comma after\n\n    if (afterlen > 0 && after_insp != NULL)\n    {\n\tint keep_after = (int)(after_insp - p_rtp);\n\n\t// Add to new_rtp: {keep},{fname}{keep_after},{afterdir}\n\tmch_memmove(new_rtp + new_rtp_len, p_rtp + keep,\n\t\t\t\t\t\t\tkeep_after - keep);\n\tnew_rtp_len += keep_after - keep;\n\tmch_memmove(new_rtp + new_rtp_len, afterdir, afterlen - 1);\n\tnew_rtp_len += afterlen - 1;\n\tnew_rtp[new_rtp_len++] = ',';\n\tkeep = keep_after;\n    }\n\n    if (p_rtp[keep] != NUL)\n\t// Append rest: {keep},{fname}{keep_after},{afterdir}{rest}\n\tmch_memmove(new_rtp + new_rtp_len, p_rtp + keep, oldlen - keep + 1);\n    else\n\tnew_rtp[new_rtp_len] = NUL;\n\n    if (afterlen > 0 && after_insp == NULL)\n    {\n\t// Append afterdir when \"after\" was not found:\n\t// {keep},{fname}{rest},{afterdir}\n\tSTRCAT(new_rtp, \",\");\n\tSTRCAT(new_rtp, afterdir);\n    }\n\n    set_option_value_give_err((char_u *)\"rtp\", 0L, new_rtp, 0);\n    vim_free(new_rtp);\n    retval = OK;\n\ntheend:\n    vim_free(buf);\n    vim_free(ffname);\n    vim_free(afterdir);\n    return retval;\n}\n\n/*\n * Load scripts in \"plugin\" and \"ftdetect\" directories of the package.\n */\n    static int\nload_pack_plugin(char_u *fname)\n{\n    static char *plugpat = \"%s/plugin/**/*.vim\";\n    static char *ftpat = \"%s/ftdetect/*.vim\";\n    int\t\tlen;\n    char_u\t*ffname = fix_fname(fname);\n    char_u\t*pat = NULL;\n    int\t\tretval = FAIL;\n\n    if (ffname == NULL)\n\treturn FAIL;\n    len = (int)STRLEN(ffname) + (int)STRLEN(ftpat);\n    pat = alloc(len);\n    if (pat == NULL)\n\tgoto theend;\n    vim_snprintf((char *)pat, len, plugpat, ffname);\n    source_all_matches(pat);\n\n    {\n\tchar_u *cmd = vim_strsave((char_u *)\"g:did_load_filetypes\");\n\n\t// If runtime/filetype.vim wasn't loaded yet, the scripts will be\n\t// found when it loads.\n\tif (cmd != NULL && eval_to_number(cmd) > 0)\n\t{\n\t    do_cmdline_cmd((char_u *)\"augroup filetypedetect\");\n\t    vim_snprintf((char *)pat, len, ftpat, ffname);\n\t    source_all_matches(pat);\n\t    do_cmdline_cmd((char_u *)\"augroup END\");\n\t}\n\tvim_free(cmd);\n    }\n    vim_free(pat);\n    retval = OK;\n\ntheend:\n    vim_free(ffname);\n    return retval;\n}\n\n// used for \"cookie\" of add_pack_plugin()\nstatic int APP_ADD_DIR;\nstatic int APP_LOAD;\nstatic int APP_BOTH;\n\n    static void\nadd_pack_plugin(char_u *fname, void *cookie)\n{\n    if (cookie != &APP_LOAD)\n    {\n\tchar_u\t*buf = alloc(MAXPATHL);\n\tchar_u\t*p;\n\tint\tfound = FALSE;\n\n\tif (buf == NULL)\n\t    return;\n\tp = p_rtp;\n\twhile (*p != NUL)\n\t{\n\t    copy_option_part(&p, buf, MAXPATHL, \",\");\n\t    if (pathcmp((char *)buf, (char *)fname, -1) == 0)\n\t    {\n\t\tfound = TRUE;\n\t\tbreak;\n\t    }\n\t}\n\tvim_free(buf);\n\tif (!found)\n\t    // directory is not yet in 'runtimepath', add it\n\t    if (add_pack_dir_to_rtp(fname) == FAIL)\n\t\treturn;\n    }\n\n    if (cookie != &APP_ADD_DIR)\n\tload_pack_plugin(fname);\n}\n\n/*\n * Add all packages in the \"start\" directory to 'runtimepath'.\n */\n    void\nadd_pack_start_dirs(void)\n{\n    do_in_path(p_pp, (char_u *)\"pack/*/start/*\", DIP_ALL + DIP_DIR,\n\t\t\t\t\t       add_pack_plugin, &APP_ADD_DIR);\n}\n\n/*\n * Load plugins from all packages in the \"start\" directory.\n */\n    void\nload_start_packages(void)\n{\n    did_source_packages = TRUE;\n    do_in_path(p_pp, (char_u *)\"pack/*/start/*\", DIP_ALL + DIP_DIR,\n\t\t\t\t\t\t  add_pack_plugin, &APP_LOAD);\n}\n\n/*\n * \":packloadall\"\n * Find plugins in the package directories and source them.\n */\n    void\nex_packloadall(exarg_T *eap)\n{\n    if (!did_source_packages || eap->forceit)\n    {\n\t// First do a round to add all directories to 'runtimepath', then load\n\t// the plugins. This allows for plugins to use an autoload directory\n\t// of another plugin.\n\tadd_pack_start_dirs();\n\tload_start_packages();\n    }\n}\n\n/*\n * \":packadd[!] {name}\"\n */\n    void\nex_packadd(exarg_T *eap)\n{\n    static char *plugpat = \"pack/*/%s/%s\";\n    int\t\tlen;\n    char\t*pat;\n    int\t\tround;\n    int\t\tres = OK;\n\n    // Round 1: use \"start\", round 2: use \"opt\".\n    for (round = 1; round <= 2; ++round)\n    {\n\t// Only look under \"start\" when loading packages wasn't done yet.\n\tif (round == 1 && did_source_packages)\n\t    continue;\n\n\tlen = (int)STRLEN(plugpat) + (int)STRLEN(eap->arg) + 5;\n\tpat = alloc(len);\n\tif (pat == NULL)\n\t    return;\n\tvim_snprintf(pat, len, plugpat, round == 1 ? \"start\" : \"opt\", eap->arg);\n\t// The first round don't give a \"not found\" error, in the second round\n\t// only when nothing was found in the first round.\n\tres = do_in_path(p_pp, (char_u *)pat,\n\t\tDIP_ALL + DIP_DIR + (round == 2 && res == FAIL ? DIP_ERR : 0),\n\t\tadd_pack_plugin, eap->forceit ? &APP_ADD_DIR : &APP_BOTH);\n\tvim_free(pat);\n    }\n}\n#endif\n\n/*\n * Sort \"gap\" and remove duplicate entries.  \"gap\" is expected to contain a\n * list of file names in allocated memory.\n */\n    void\nremove_duplicates(garray_T *gap)\n{\n    int\t    i;\n    int\t    j;\n    char_u  **fnames = (char_u **)gap->ga_data;\n\n    sort_strings(fnames, gap->ga_len);\n    for (i = gap->ga_len - 1; i > 0; --i)\n\tif (fnamecmp(fnames[i - 1], fnames[i]) == 0)\n\t{\n\t    vim_free(fnames[i]);\n\t    for (j = i + 1; j < gap->ga_len; ++j)\n\t\tfnames[j - 1] = fnames[j];\n\t    --gap->ga_len;\n\t}\n}\n\n/*\n * Expand color scheme, compiler or filetype names.\n * Search from 'runtimepath':\n *   'runtimepath'/{dirnames}/{pat}.vim\n * When \"flags\" has DIP_START: search also from 'start' of 'packpath':\n *   'packpath'/pack/ * /start/ * /{dirnames}/{pat}.vim\n * When \"flags\" has DIP_OPT: search also from 'opt' of 'packpath':\n *   'packpath'/pack/ * /opt/ * /{dirnames}/{pat}.vim\n * \"dirnames\" is an array with one or more directory names.\n */\n    int\nExpandRTDir(\n    char_u\t*pat,\n    int\t\tflags,\n    int\t\t*num_file,\n    char_u\t***file,\n    char\t*dirnames[])\n{\n    char_u\t*s;\n    char_u\t*e;\n    char_u\t*match;\n    garray_T\tga;\n    int\t\ti;\n    int\t\tpat_len;\n\n    *num_file = 0;\n    *file = NULL;\n    pat_len = (int)STRLEN(pat);\n    ga_init2(&ga, sizeof(char *), 10);\n\n    for (i = 0; dirnames[i] != NULL; ++i)\n    {\n\ts = alloc(STRLEN(dirnames[i]) + pat_len + 7);\n\tif (s == NULL)\n\t{\n\t    ga_clear_strings(&ga);\n\t    return FAIL;\n\t}\n\tsprintf((char *)s, \"%s/%s*.vim\", dirnames[i], pat);\n\tglobpath(p_rtp, s, &ga, 0);\n\tvim_free(s);\n    }\n\n    if (flags & DIP_START) {\n\tfor (i = 0; dirnames[i] != NULL; ++i)\n\t{\n\t    s = alloc(STRLEN(dirnames[i]) + pat_len + 22);\n\t    if (s == NULL)\n\t    {\n\t\tga_clear_strings(&ga);\n\t\treturn FAIL;\n\t    }\n\t    sprintf((char *)s, \"pack/*/start/*/%s/%s*.vim\", dirnames[i], pat);\n\t    globpath(p_pp, s, &ga, 0);\n\t    vim_free(s);\n\t}\n    }\n\n    if (flags & DIP_OPT) {\n\tfor (i = 0; dirnames[i] != NULL; ++i)\n\t{\n\t    s = alloc(STRLEN(dirnames[i]) + pat_len + 20);\n\t    if (s == NULL)\n\t    {\n\t\tga_clear_strings(&ga);\n\t\treturn FAIL;\n\t    }\n\t    sprintf((char *)s, \"pack/*/opt/*/%s/%s*.vim\", dirnames[i], pat);\n\t    globpath(p_pp, s, &ga, 0);\n\t    vim_free(s);\n\t}\n    }\n\n    for (i = 0; i < ga.ga_len; ++i)\n    {\n\tmatch = ((char_u **)ga.ga_data)[i];\n\ts = match;\n\te = s + STRLEN(s);\n\tif (e - 4 > s && STRNICMP(e - 4, \".vim\", 4) == 0)\n\t{\n\t    e -= 4;\n\t    for (s = e; s > match; MB_PTR_BACK(match, s))\n\t\tif (s < match || vim_ispathsep(*s))\n\t\t    break;\n\t    ++s;\n\t    *e = NUL;\n\t    mch_memmove(match, s, e - s + 1);\n\t}\n    }\n\n    if (ga.ga_len == 0)\n\treturn FAIL;\n\n    // Sort and remove duplicates which can happen when specifying multiple\n    // directories in dirnames.\n    remove_duplicates(&ga);\n\n    *file = ga.ga_data;\n    *num_file = ga.ga_len;\n    return OK;\n}\n\n/*\n * Expand loadplugin names:\n * 'packpath'/pack/ * /opt/{pat}\n */\n    int\nExpandPackAddDir(\n    char_u\t*pat,\n    int\t\t*num_file,\n    char_u\t***file)\n{\n    char_u\t*s;\n    char_u\t*e;\n    char_u\t*match;\n    garray_T\tga;\n    int\t\ti;\n    int\t\tpat_len;\n\n    *num_file = 0;\n    *file = NULL;\n    pat_len = (int)STRLEN(pat);\n    ga_init2(&ga, sizeof(char *), 10);\n\n    s = alloc(pat_len + 26);\n    if (s == NULL)\n    {\n\tga_clear_strings(&ga);\n\treturn FAIL;\n    }\n    sprintf((char *)s, \"pack/*/opt/%s*\", pat);\n    globpath(p_pp, s, &ga, 0);\n    vim_free(s);\n\n    for (i = 0; i < ga.ga_len; ++i)\n    {\n\tmatch = ((char_u **)ga.ga_data)[i];\n\ts = gettail(match);\n\te = s + STRLEN(s);\n\tmch_memmove(match, s, e - s + 1);\n    }\n\n    if (ga.ga_len == 0)\n\treturn FAIL;\n\n    // Sort and remove duplicates which can happen when specifying multiple\n    // directories in dirnames.\n    remove_duplicates(&ga);\n\n    *file = ga.ga_data;\n    *num_file = ga.ga_len;\n    return OK;\n}\n\n    static void\ncmd_source(char_u *fname, exarg_T *eap)\n{\n    int clearvars = FALSE;\n\n    if (*fname != NUL && STRNCMP(fname, \"++clear\", 7) == 0)\n    {\n\t// ++clear argument is supplied\n\tclearvars = TRUE;\n\tfname = fname + 7;\n\tif (*fname != NUL)\n\t{\n\t    semsg(_(e_invalid_argument_str), eap->arg);\n\t    return;\n\t}\n    }\n\n    if (*fname != NUL && eap != NULL && eap->addr_count > 0)\n    {\n\t// if a filename is specified to :source, then a range is not allowed\n\temsg(_(e_no_range_allowed));\n\treturn;\n    }\n\n    if (eap != NULL && *fname == NUL)\n    {\n\tif (eap->forceit)\n\t    // a file name is needed to source normal mode commands\n\t    emsg(_(e_argument_required));\n\telse\n\t    // source ex commands from the current buffer\n\t    do_source_ext(NULL, FALSE, FALSE, NULL, eap, clearvars);\n    }\n    else if (eap != NULL && eap->forceit)\n\t// \":source!\": read Normal mode commands\n\t// Need to execute the commands directly.  This is required at least\n\t// for:\n\t// - \":g\" command busy\n\t// - after \":argdo\", \":windo\" or \":bufdo\"\n\t// - another command follows\n\t// - inside a loop\n\topenscript(fname, global_busy || listcmd_busy || eap->nextcmd != NULL\n#ifdef FEAT_EVAL\n\t\t\t\t\t\t || eap->cstack->cs_idx >= 0\n#endif\n\t\t\t\t\t\t );\n\n    // \":source\" read ex commands\n    else if (do_source(fname, FALSE, DOSO_NONE, NULL) == FAIL)\n\tsemsg(_(e_cant_open_file_str), fname);\n}\n\n/*\n * \":source {fname}\"\n */\n    void\nex_source(exarg_T *eap)\n{\n#ifdef FEAT_BROWSE\n    if (cmdmod.cmod_flags & CMOD_BROWSE)\n    {\n\tchar_u *fname = NULL;\n\n\tfname = do_browse(0, (char_u *)_(\"Source Vim script\"), eap->arg,\n\t\t\t\t      NULL, NULL,\n\t\t\t\t      (char_u *)_(BROWSE_FILTER_MACROS), NULL);\n\tif (fname != NULL)\n\t{\n\t    cmd_source(fname, eap);\n\t    vim_free(fname);\n\t}\n    }\n    else\n#endif\n\tcmd_source(eap->arg, eap);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * \":options\"\n */\n    void\nex_options(\n    exarg_T\t*eap UNUSED)\n{\n    char_u  buf[500];\n    int\t    multi_mods = 0;\n\n    buf[0] = NUL;\n    (void)add_win_cmd_modifers(buf, &cmdmod, &multi_mods);\n\n    vim_setenv((char_u *)\"OPTWIN_CMD\", buf);\n    cmd_source((char_u *)SYS_OPTWIN_FILE, NULL);\n}\n#endif\n\n/*\n * \":source\" and associated commands.\n */\n\n#ifdef FEAT_EVAL\n/*\n * Return the address holding the next breakpoint line for a source cookie.\n */\n    linenr_T *\nsource_breakpoint(void *cookie)\n{\n    return &((source_cookie_T *)cookie)->breakpoint;\n}\n\n/*\n * Return the address holding the debug tick for a source cookie.\n */\n    int *\nsource_dbg_tick(void *cookie)\n{\n    return &((source_cookie_T *)cookie)->dbg_tick;\n}\n\n/*\n * Return the nesting level for a source cookie.\n */\n    int\nsource_level(void *cookie)\n{\n    return ((source_cookie_T *)cookie)->level;\n}\n\n/*\n * Return the readahead line. Note that the pointer may become invalid when\n * getting the next line, if it's concatenated with the next one.\n */\n    char_u *\nsource_nextline(void *cookie)\n{\n    return ((source_cookie_T *)cookie)->nextline;\n}\n#endif\n\n#if (defined(MSWIN) && defined(FEAT_CSCOPE)) || defined(HAVE_FD_CLOEXEC)\n# define USE_FOPEN_NOINH\n/*\n * Special function to open a file without handle inheritance.\n * When possible the handle is closed on exec().\n */\n    static FILE *\nfopen_noinh_readbin(char *filename)\n{\n# ifdef MSWIN\n    int\tfd_tmp = mch_open(filename, O_RDONLY | O_BINARY | O_NOINHERIT, 0);\n# else\n    int\tfd_tmp = mch_open(filename, O_RDONLY, 0);\n# endif\n\n    if (fd_tmp == -1)\n\treturn NULL;\n\n# ifdef HAVE_FD_CLOEXEC\n    {\n\tint fdflags = fcntl(fd_tmp, F_GETFD);\n\tif (fdflags >= 0 && (fdflags & FD_CLOEXEC) == 0)\n\t    (void)fcntl(fd_tmp, F_SETFD, fdflags | FD_CLOEXEC);\n    }\n# endif\n\n    return fdopen(fd_tmp, READBIN);\n}\n#endif\n\n/*\n * Initialization for sourcing lines from the current buffer. Reads all the\n * lines from the buffer and stores it in the cookie grow array.\n * Returns a pointer to the name \":source buffer=<n>\" on success and NULL on\n * failure.\n */\n    static char_u *\ndo_source_buffer_init(source_cookie_T *sp, exarg_T *eap)\n{\n    linenr_T\tcurr_lnum;\n    char_u\t*line = NULL;\n    char_u\t*fname;\n\n    CLEAR_FIELD(*sp);\n\n    if (curbuf == NULL)\n\treturn NULL;\n\n    // Use \":source buffer=<num>\" as the script name\n    vim_snprintf((char *)IObuff, IOSIZE, \":source buffer=%d\", curbuf->b_fnum);\n    fname = vim_strsave(IObuff);\n    if (fname == NULL)\n\treturn NULL;\n\n    ga_init2(&sp->buflines, sizeof(char_u *), 100);\n\n    // Copy the lines from the buffer into a grow array\n    for (curr_lnum = eap->line1; curr_lnum <= eap->line2; curr_lnum++)\n    {\n\tline = vim_strsave(ml_get(curr_lnum));\n\tif (line == NULL)\n\t    goto errret;\n\tif (ga_add_string(&sp->buflines, line) == FAIL)\n\t    goto errret;\n\tline = NULL;\n    }\n    sp->buf_lnum = 0;\n    sp->source_from_buf = TRUE;\n\n    return fname;\n\nerrret:\n    vim_free(fname);\n    vim_free(line);\n    ga_clear_strings(&sp->buflines);\n    return NULL;\n}\n\n/*\n * Read the file \"fname\" and execute its lines as EX commands.\n * When \"ret_sid\" is not NULL and we loaded the script before, don't load it\n * again.\n *\n * The 'eap' argument is used when sourcing lines from a buffer instead of a\n * file.\n *\n * If 'clearvars' is TRUE, then for scripts which are loaded more than\n * once, clear all the functions and variables previously defined in that\n * script.\n *\n * This function may be called recursively!\n *\n * Return FAIL if file could not be opened, OK otherwise.\n * If a scriptitem_T was found or created \"*ret_sid\" is set to the SID.\n */\n    static int\ndo_source_ext(\n    char_u\t*fname,\n    int\t\tcheck_other,\t    // check for .vimrc and _vimrc\n    int\t\tis_vimrc,\t    // DOSO_ value\n    int\t\t*ret_sid UNUSED,\n    exarg_T\t*eap,\n    int\t\tclearvars UNUSED)\n{\n    source_cookie_T\t    cookie;\n    char_u\t\t    *p;\n    char_u\t\t    *fname_exp;\n    char_u\t\t    *firstline = NULL;\n    int\t\t\t    retval = FAIL;\n    sctx_T\t\t    save_current_sctx;\n#ifdef FEAT_EVAL\n    funccal_entry_T\t    funccalp_entry;\n    int\t\t\t    save_debug_break_level = debug_break_level;\n    int\t\t\t    sid;\n    scriptitem_T\t    *si = NULL;\n    int\t\t\t    save_estack_compiling = estack_compiling;\n#endif\n#ifdef STARTUPTIME\n    struct timeval\t    tv_rel;\n    struct timeval\t    tv_start;\n#endif\n#ifdef FEAT_PROFILE\n    proftime_T\t\t    wait_start;\n#endif\n    int\t\t\t    save_sticky_cmdmod_flags = sticky_cmdmod_flags;\n    int\t\t\t    trigger_source_post = FALSE;\n    ESTACK_CHECK_DECLARATION\n\n    CLEAR_FIELD(cookie);\n    if (fname == NULL)\n    {\n\t// sourcing lines from a buffer\n\tfname_exp = do_source_buffer_init(&cookie, eap);\n\tif (fname_exp == NULL)\n\t    return FAIL;\n    }\n    else\n    {\n\tp = expand_env_save(fname);\n\tif (p == NULL)\n\t    return retval;\n\tfname_exp = fix_fname(p);\n\tvim_free(p);\n\tif (fname_exp == NULL)\n\t    return retval;\n\tif (mch_isdir(fname_exp))\n\t{\n\t    smsg(_(\"Cannot source a directory: \\\"%s\\\"\"), fname);\n\t    goto theend;\n\t}\n    }\n#ifdef FEAT_EVAL\n    estack_compiling = FALSE;\n\n    // See if we loaded this script before.\n    sid = find_script_by_name(fname_exp);\n    if (sid > 0 && ret_sid != NULL\n\t\t\t  && SCRIPT_ITEM(sid)->sn_state != SN_STATE_NOT_LOADED)\n    {\n\t// Already loaded and no need to load again, return here.\n\t*ret_sid = sid;\n\tretval = OK;\n\tgoto theend;\n    }\n#endif\n\n    // Apply SourceCmd autocommands, they should get the file and source it.\n    if (has_autocmd(EVENT_SOURCECMD, fname_exp, NULL)\n\t    && apply_autocmds(EVENT_SOURCECMD, fname_exp, fname_exp,\n\t\t\t\t\t\t\t       FALSE, curbuf))\n    {\n#ifdef FEAT_EVAL\n\tretval = aborting() ? FAIL : OK;\n#else\n\tretval = OK;\n#endif\n\tif (retval == OK)\n\t    // Apply SourcePost autocommands.\n\t    apply_autocmds(EVENT_SOURCEPOST, fname_exp, fname_exp,\n\t\t\t\t\t\t\t\tFALSE, curbuf);\n\tgoto theend;\n    }\n\n    // Apply SourcePre autocommands, they may get the file.\n    apply_autocmds(EVENT_SOURCEPRE, fname_exp, fname_exp, FALSE, curbuf);\n\n    if (!cookie.source_from_buf)\n    {\n#ifdef USE_FOPEN_NOINH\n\tcookie.fp = fopen_noinh_readbin((char *)fname_exp);\n#else\n\tcookie.fp = mch_fopen((char *)fname_exp, READBIN);\n#endif\n    }\n    if (cookie.fp == NULL && check_other)\n    {\n\t// Try again, replacing file name \".vimrc\" by \"_vimrc\" or vice versa,\n\t// and \".exrc\" by \"_exrc\" or vice versa.\n\tp = gettail(fname_exp);\n\tif ((*p == '.' || *p == '_')\n\t\t&& (STRICMP(p + 1, \"vimrc\") == 0\n\t\t    || STRICMP(p + 1, \"gvimrc\") == 0\n\t\t    || STRICMP(p + 1, \"exrc\") == 0))\n\t{\n\t    if (*p == '_')\n\t\t*p = '.';\n\t    else\n\t\t*p = '_';\n#ifdef USE_FOPEN_NOINH\n\t    cookie.fp = fopen_noinh_readbin((char *)fname_exp);\n#else\n\t    cookie.fp = mch_fopen((char *)fname_exp, READBIN);\n#endif\n\t}\n    }\n\n    if (cookie.fp == NULL && !cookie.source_from_buf)\n    {\n\tif (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    if (SOURCING_NAME == NULL)\n\t\tsmsg(_(\"could not source \\\"%s\\\"\"), fname);\n\t    else\n\t\tsmsg(_(\"line %ld: could not source \\\"%s\\\"\"),\n\t\t\t\t\t\t\tSOURCING_LNUM, fname);\n\t    verbose_leave();\n\t}\n\tgoto theend;\n    }\n\n    // The file exists.\n    // - In verbose mode, give a message.\n    // - For a vimrc file, may want to set 'compatible', call vimrc_found().\n    if (p_verbose > 1)\n    {\n\tverbose_enter();\n\tif (SOURCING_NAME == NULL)\n\t    smsg(_(\"sourcing \\\"%s\\\"\"), fname);\n\telse\n\t    smsg(_(\"line %ld: sourcing \\\"%s\\\"\"), SOURCING_LNUM, fname);\n\tverbose_leave();\n    }\n    if (is_vimrc == DOSO_VIMRC)\n\tvimrc_found(fname_exp, (char_u *)\"MYVIMRC\");\n    else if (is_vimrc == DOSO_GVIMRC)\n\tvimrc_found(fname_exp, (char_u *)\"MYGVIMRC\");\n\n#ifdef USE_CRNL\n    // If no automatic file format: Set default to CR-NL.\n    if (*p_ffs == NUL)\n\tcookie.fileformat = EOL_DOS;\n    else\n\tcookie.fileformat = EOL_UNKNOWN;\n#endif\n\n    if (fname == NULL)\n\t// When sourcing a range of lines from a buffer, use the buffer line\n\t// number.\n\tcookie.sourcing_lnum = eap->line1 - 1;\n    else\n\tcookie.sourcing_lnum = 0;\n\n#ifdef FEAT_EVAL\n    // Check if this script has a breakpoint.\n    cookie.breakpoint = dbg_find_breakpoint(TRUE, fname_exp, (linenr_T)0);\n    cookie.fname = fname_exp;\n    cookie.dbg_tick = debug_tick;\n\n    cookie.level = ex_nesting_level;\n#endif\n\n    // Keep the sourcing name/lnum, for recursive calls.\n    estack_push(ETYPE_SCRIPT, fname_exp, 0);\n    ESTACK_CHECK_SETUP\n\n#ifdef STARTUPTIME\n    if (time_fd != NULL)\n\ttime_push(&tv_rel, &tv_start);\n#endif\n\n    // \"legacy\" does not apply to commands in the script\n    sticky_cmdmod_flags = 0;\n\n    save_current_sctx = current_sctx;\n    if (cmdmod.cmod_flags & CMOD_VIM9CMD)\n\t// When the \":vim9cmd\" command modifier is used, source the script as a\n\t// Vim9 script.\n\tcurrent_sctx.sc_version = SCRIPT_VERSION_VIM9;\n    else\n\tcurrent_sctx.sc_version = 1;  // default script version\n\n#ifdef FEAT_EVAL\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tprof_child_enter(&wait_start);\t\t// entering a child now\n# endif\n\n    // Don't use local function variables, if called from a function.\n    // Also starts profiling timer for nested script.\n    save_funccal(&funccalp_entry);\n\n    current_sctx.sc_lnum = 0;\n\n    // Check if this script was sourced before to find its SID.\n    // Always use a new sequence number.\n    current_sctx.sc_seq = ++last_current_SID_seq;\n    if (sid > 0)\n    {\n\thashtab_T\t*ht;\n\tint\t\ttodo;\n\thashitem_T\t*hi;\n\tdictitem_T\t*di;\n\n\t// loading the same script again\n\tcurrent_sctx.sc_sid = sid;\n\tsi = SCRIPT_ITEM(sid);\n\tif (si->sn_state == SN_STATE_NOT_LOADED)\n\t{\n\t    // this script was found but not loaded yet\n\t    si->sn_state = SN_STATE_NEW;\n\t}\n\telse\n\t{\n\t    si->sn_state = SN_STATE_RELOAD;\n\n\t    if (!clearvars)\n\t    {\n\t\t// Script-local variables remain but \"const\" can be set again.\n\t\t// In Vim9 script variables will be cleared when \"vim9script\"\n\t\t// is encountered without the \"noclear\" argument.\n\t\tht = &SCRIPT_VARS(sid);\n\t\ttodo = (int)ht->ht_used;\n\t\tfor (hi = ht->ht_array; todo > 0; ++hi)\n\t\t    if (!HASHITEM_EMPTY(hi))\n\t\t    {\n\t\t\t--todo;\n\t\t\tdi = HI2DI(hi);\n\t\t\tdi->di_flags |= DI_FLAGS_RELOAD;\n\t\t    }\n\t\t// imports can be redefined once\n\t\tmark_imports_for_reload(sid);\n\t    }\n\t    else\n\t\tclear_vim9_scriptlocal_vars(sid);\n\n\t    // reset version, \"vim9script\" may have been added or removed.\n\t    si->sn_version = 1;\n\t}\n    }\n    else\n    {\n\tint error = OK;\n\n\t// It's new, generate a new SID and initialize the scriptitem.\n\tcurrent_sctx.sc_sid = get_new_scriptitem(&error);\n\tif (error == FAIL)\n\t    goto almosttheend;\n\tsi = SCRIPT_ITEM(current_sctx.sc_sid);\n\tsi->sn_name = fname_exp;\n\tfname_exp = vim_strsave(si->sn_name);  // used for autocmd\n\tif (ret_sid != NULL)\n\t    *ret_sid = current_sctx.sc_sid;\n\n\t// Remember the \"is_vimrc\" flag for when the file is sourced again.\n\tsi->sn_is_vimrc = is_vimrc;\n    }\n\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n    {\n\tint\tforceit;\n\n\t// Check if we do profiling for this script.\n\tif (!si->sn_prof_on && has_profiling(TRUE, si->sn_name, &forceit))\n\t{\n\t    script_do_profile(si);\n\t    si->sn_pr_force = forceit;\n\t}\n\tif (si->sn_prof_on)\n\t{\n\t    ++si->sn_pr_count;\n\t    profile_start(&si->sn_pr_start);\n\t    profile_zero(&si->sn_pr_children);\n\t}\n    }\n# endif\n#endif\n\n    cookie.conv.vc_type = CONV_NONE;\t\t// no conversion\n\n    // Read the first line so we can check for a UTF-8 BOM.\n    firstline = getsourceline(0, (void *)&cookie, 0, TRUE);\n    if (firstline != NULL && STRLEN(firstline) >= 3 && firstline[0] == 0xef\n\t\t\t      && firstline[1] == 0xbb && firstline[2] == 0xbf)\n    {\n\t// Found BOM; setup conversion, skip over BOM and recode the line.\n\tconvert_setup(&cookie.conv, (char_u *)\"utf-8\", p_enc);\n\tp = string_convert(&cookie.conv, firstline + 3, NULL);\n\tif (p == NULL)\n\t    p = vim_strsave(firstline + 3);\n\tif (p != NULL)\n\t{\n\t    vim_free(firstline);\n\t    firstline = p;\n\t}\n    }\n\n    // Call do_cmdline, which will call getsourceline() to get the lines.\n    do_cmdline(firstline, getsourceline, (void *)&cookie,\n\t\t\t\t     DOCMD_VERBOSE|DOCMD_NOWAIT|DOCMD_REPEAT);\n    retval = OK;\n\n#ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n    {\n\t// Get \"si\" again, \"script_items\" may have been reallocated.\n\tsi = SCRIPT_ITEM(current_sctx.sc_sid);\n\tif (si->sn_prof_on)\n\t{\n\t    profile_end(&si->sn_pr_start);\n\t    profile_sub_wait(&wait_start, &si->sn_pr_start);\n\t    profile_add(&si->sn_pr_total, &si->sn_pr_start);\n\t    profile_self(&si->sn_pr_self, &si->sn_pr_start,\n\t\t\t\t\t\t\t &si->sn_pr_children);\n\t}\n    }\n#endif\n\n    if (got_int)\n\temsg(_(e_interrupted));\n    ESTACK_CHECK_NOW\n    estack_pop();\n    if (p_verbose > 1)\n    {\n\tverbose_enter();\n\tsmsg(_(\"finished sourcing %s\"), fname);\n\tif (SOURCING_NAME != NULL)\n\t    smsg(_(\"continuing in %s\"), SOURCING_NAME);\n\tverbose_leave();\n    }\n#ifdef STARTUPTIME\n    if (time_fd != NULL)\n    {\n\tvim_snprintf((char *)IObuff, IOSIZE, \"sourcing %s\", fname);\n\ttime_msg((char *)IObuff, &tv_start);\n\ttime_pop(&tv_rel);\n    }\n#endif\n\n    if (!got_int)\n\ttrigger_source_post = TRUE;\n\n#ifdef FEAT_EVAL\n    // After a \"finish\" in debug mode, need to break at first command of next\n    // sourced file.\n    if (save_debug_break_level > ex_nesting_level\n\t    && debug_break_level == ex_nesting_level)\n\t++debug_break_level;\n#endif\n\n#ifdef FEAT_EVAL\nalmosttheend:\n    // If \"sn_save_cpo\" is set that means we encountered \"vim9script\": restore\n    // 'cpoptions', unless in the main .vimrc file.\n    // Get \"si\" again, \"script_items\" may have been reallocated.\n    si = SCRIPT_ITEM(current_sctx.sc_sid);\n    if (si->sn_save_cpo != NULL && si->sn_is_vimrc == DOSO_NONE)\n    {\n\tif (STRCMP(p_cpo, CPO_VIM) != 0)\n\t{\n\t    char_u *f;\n\t    char_u *t;\n\n\t    // 'cpo' was changed in the script.  Apply the same change to the\n\t    // saved value, if possible.\n\t    for (f = (char_u *)CPO_VIM; *f != NUL; ++f)\n\t\tif (vim_strchr(p_cpo, *f) == NULL\n\t\t\t&& (t = vim_strchr(si->sn_save_cpo, *f)) != NULL)\n\t\t    // flag was removed, also remove it from the saved 'cpo'\n\t\t    mch_memmove(t, t + 1, STRLEN(t));\n\t    for (f = p_cpo; *f != NUL; ++f)\n\t\tif (vim_strchr((char_u *)CPO_VIM, *f) == NULL\n\t\t\t&& vim_strchr(si->sn_save_cpo, *f) == NULL)\n\t\t{\n\t\t    // flag was added, also add it to the saved 'cpo'\n\t\t    t = alloc(STRLEN(si->sn_save_cpo) + 2);\n\t\t    if (t != NULL)\n\t\t    {\n\t\t\t*t = *f;\n\t\t\tSTRCPY(t + 1, si->sn_save_cpo);\n\t\t\tvim_free(si->sn_save_cpo);\n\t\t\tsi->sn_save_cpo = t;\n\t\t    }\n\t\t}\n\t}\n\tset_option_value_give_err((char_u *)\"cpo\",\n\t\t\t\t\t   0L, si->sn_save_cpo, OPT_NO_REDRAW);\n    }\n    VIM_CLEAR(si->sn_save_cpo);\n\n    restore_funccal();\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tprof_child_exit(&wait_start);\t\t// leaving a child now\n# endif\n#endif\n    current_sctx = save_current_sctx;\n\n    if (cookie.fp != NULL)\n\tfclose(cookie.fp);\n    if (cookie.source_from_buf)\n\tga_clear_strings(&cookie.buflines);\n    vim_free(cookie.nextline);\n    vim_free(firstline);\n    convert_setup(&cookie.conv, NULL, NULL);\n\n    if (trigger_source_post)\n\tapply_autocmds(EVENT_SOURCEPOST, fname_exp, fname_exp, FALSE, curbuf);\n\ntheend:\n    vim_free(fname_exp);\n    sticky_cmdmod_flags = save_sticky_cmdmod_flags;\n#ifdef FEAT_EVAL\n    estack_compiling = save_estack_compiling;\n#endif\n    return retval;\n}\n\n    int\ndo_source(\n    char_u\t*fname,\n    int\t\tcheck_other,\t    // check for .vimrc and _vimrc\n    int\t\tis_vimrc,\t    // DOSO_ value\n    int\t\t*ret_sid UNUSED)\n{\n    return do_source_ext(fname, check_other, is_vimrc, ret_sid, NULL, FALSE);\n}\n\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * \":scriptnames\"\n */\n    void\nex_scriptnames(exarg_T *eap)\n{\n    int i;\n\n    if (eap->addr_count > 0 || *eap->arg != NUL)\n    {\n\t// :script {scriptId}: edit the script\n\tif (eap->addr_count > 0 && !SCRIPT_ID_VALID(eap->line2))\n\t    emsg(_(e_invalid_argument));\n\telse\n\t{\n\t    if (eap->addr_count > 0)\n\t\teap->arg = SCRIPT_ITEM(eap->line2)->sn_name;\n\t    else\n\t    {\n\t\texpand_env(eap->arg, NameBuff, MAXPATHL);\n\t\teap->arg = NameBuff;\n\t    }\n\t    do_exedit(eap, NULL);\n\t}\n\treturn;\n    }\n\n    for (i = 1; i <= script_items.ga_len && !got_int; ++i)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(i);\n\n\tif (si->sn_name != NULL)\n\t{\n\t    home_replace(NULL, si->sn_name, NameBuff, MAXPATHL, TRUE);\n\t    vim_snprintf((char *)IObuff, IOSIZE, \"%3d%s: %s\",\n\t\t    i,\n\t\t    si->sn_state == SN_STATE_NOT_LOADED ? \" A\" : \"\",\n\t\t    NameBuff);\n\t    if (!message_filtered(IObuff))\n\t    {\n\t\tmsg_putchar('\\n');\n\t\tmsg_outtrans(IObuff);\n\t\tout_flush();\t    // output one line at a time\n\t\tui_breakcheck();\n\t    }\n\t}\n    }\n}\n\n# if defined(BACKSLASH_IN_FILENAME) || defined(PROTO)\n/*\n * Fix slashes in the list of script names for 'shellslash'.\n */\n    void\nscriptnames_slash_adjust(void)\n{\n    int i;\n\n    for (i = 1; i <= script_items.ga_len; ++i)\n\tif (SCRIPT_ITEM(i)->sn_name != NULL)\n\t    slash_adjust(SCRIPT_ITEM(i)->sn_name);\n}\n# endif\n\n/*\n * Get a pointer to a script name.  Used for \":verbose set\".\n * Message appended to \"Last set from \"\n */\n    char_u *\nget_scriptname(scid_T id)\n{\n    if (id == SID_MODELINE)\n\treturn (char_u *)_(\"modeline\");\n    if (id == SID_CMDARG)\n\treturn (char_u *)_(\"--cmd argument\");\n    if (id == SID_CARG)\n\treturn (char_u *)_(\"-c argument\");\n    if (id == SID_ENV)\n\treturn (char_u *)_(\"environment variable\");\n    if (id == SID_ERROR)\n\treturn (char_u *)_(\"error handler\");\n    if (id == SID_WINLAYOUT)\n\treturn (char_u *)_(\"changed window size\");\n    return SCRIPT_ITEM(id)->sn_name;\n}\n\n# if defined(EXITFREE) || defined(PROTO)\n    void\nfree_scriptnames(void)\n{\n    int\t\t\ti;\n\n    for (i = script_items.ga_len; i > 0; --i)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(i);\n\n\t// the variables themselves are cleared in evalvars_clear()\n\tvim_free(si->sn_vars);\n\n\tvim_free(si->sn_name);\n\tfree_imports_and_script_vars(i);\n\tfree_string_option(si->sn_save_cpo);\n#  ifdef FEAT_PROFILE\n\tga_clear(&si->sn_prl_ga);\n#  endif\n\tvim_free(si->sn_autoload_prefix);\n\tvim_free(si);\n    }\n    ga_clear(&script_items);\n}\n\n    void\nfree_autoload_scriptnames(void)\n{\n    ga_clear_strings(&ga_loaded);\n}\n# endif\n\n    linenr_T\nget_sourced_lnum(\n\tchar_u *(*fgetline)(int, void *, int, getline_opt_T),\n\tvoid *cookie)\n{\n    return fgetline == getsourceline\n\t\t\t? ((source_cookie_T *)cookie)->sourcing_lnum\n\t\t\t: SOURCING_LNUM;\n}\n#endif\n\n    static char_u *\nget_one_sourceline(source_cookie_T *sp)\n{\n    garray_T\t\tga;\n    int\t\t\tlen;\n    int\t\t\tc;\n    char_u\t\t*buf;\n#ifdef USE_CRNL\n    int\t\t\thas_cr;\t\t// CR-LF found\n#endif\n    int\t\t\thave_read = FALSE;\n\n    // use a growarray to store the sourced line\n    ga_init2(&ga, 1, 250);\n\n    // Loop until there is a finished line (or end-of-file).\n    ++sp->sourcing_lnum;\n    for (;;)\n    {\n\t// make room to read at least 120 (more) characters\n\tif (ga_grow(&ga, 120) == FAIL)\n\t    break;\n\tif (sp->source_from_buf)\n\t{\n\t    if (sp->buf_lnum >= sp->buflines.ga_len)\n\t\tbreak;\t\t    // all the lines are processed\n\t    ga_concat(&ga, ((char_u **)sp->buflines.ga_data)[sp->buf_lnum]);\n\t    sp->buf_lnum++;\n\t    if (ga_grow(&ga, 1) == FAIL)\n\t\tbreak;\n\t    buf = (char_u *)ga.ga_data;\n\t    buf[ga.ga_len++] = NUL;\n\t}\n\telse\n\t{\n\t    buf = (char_u *)ga.ga_data;\n\t    if (fgets((char *)buf + ga.ga_len, ga.ga_maxlen - ga.ga_len,\n\t\t\tsp->fp) == NULL)\n\t\tbreak;\n\t}\n\tlen = ga.ga_len + (int)STRLEN(buf + ga.ga_len);\n#ifdef USE_CRNL\n\t// Ignore a trailing CTRL-Z, when in Dos mode.\tOnly recognize the\n\t// CTRL-Z by its own, or after a NL.\n\tif (\t   (len == 1 || (len >= 2 && buf[len - 2] == '\\n'))\n\t\t&& sp->fileformat == EOL_DOS\n\t\t&& buf[len - 1] == Ctrl_Z)\n\t{\n\t    buf[len - 1] = NUL;\n\t    break;\n\t}\n#endif\n\n\thave_read = TRUE;\n\tga.ga_len = len;\n\n\t// If the line was longer than the buffer, read more.\n\tif (ga.ga_maxlen - ga.ga_len == 1 && buf[len - 1] != '\\n')\n\t    continue;\n\n\tif (len >= 1 && buf[len - 1] == '\\n')\t// remove trailing NL\n\t{\n#ifdef USE_CRNL\n\t    has_cr = (len >= 2 && buf[len - 2] == '\\r');\n\t    if (sp->fileformat == EOL_UNKNOWN)\n\t    {\n\t\tif (has_cr)\n\t\t    sp->fileformat = EOL_DOS;\n\t\telse\n\t\t    sp->fileformat = EOL_UNIX;\n\t    }\n\n\t    if (sp->fileformat == EOL_DOS)\n\t    {\n\t\tif (has_cr)\t    // replace trailing CR\n\t\t{\n\t\t    buf[len - 2] = '\\n';\n\t\t    --len;\n\t\t    --ga.ga_len;\n\t\t}\n\t\telse\t    // lines like \":map xx yy^M\" will have failed\n\t\t{\n\t\t    if (!sp->error)\n\t\t    {\n\t\t\tmsg_source(HL_ATTR(HLF_W));\n\t\t\temsg(_(\"W15: Warning: Wrong line separator, ^M may be missing\"));\n\t\t    }\n\t\t    sp->error = TRUE;\n\t\t    sp->fileformat = EOL_UNIX;\n\t\t}\n\t    }\n#endif\n\t    // The '\\n' is escaped if there is an odd number of ^V's just\n\t    // before it, first set \"c\" just before the 'V's and then check\n\t    // len&c parities (is faster than ((len-c)%2 == 0)) -- Acevedo\n\t    for (c = len - 2; c >= 0 && buf[c] == Ctrl_V; c--)\n\t\t;\n\t    if ((len & 1) != (c & 1))\t// escaped NL, read more\n\t    {\n\t\t++sp->sourcing_lnum;\n\t\tcontinue;\n\t    }\n\n\t    buf[len - 1] = NUL;\t\t// remove the NL\n\t}\n\n\t// Check for ^C here now and then, so recursive :so can be broken.\n\tline_breakcheck();\n\tbreak;\n    }\n\n    if (have_read)\n\treturn (char_u *)ga.ga_data;\n\n    vim_free(ga.ga_data);\n    return NULL;\n}\n\n/*\n * Get one full line from a sourced file.\n * Called by do_cmdline() when it's called from do_source().\n *\n * Return a pointer to the line in allocated memory.\n * Return NULL for end-of-file or some error.\n */\n    char_u *\ngetsourceline(\n\tint c UNUSED,\n\tvoid *cookie,\n\tint indent UNUSED,\n\tgetline_opt_T options)\n{\n    source_cookie_T\t*sp = (source_cookie_T *)cookie;\n    char_u\t\t*line;\n    char_u\t\t*p;\n    int\t\t\tdo_vim9_all = in_vim9script()\n\t\t\t\t\t      && options == GETLINE_CONCAT_ALL;\n    int\t\t\tdo_bar_cont = do_vim9_all\n\t\t\t\t\t || options == GETLINE_CONCAT_CONTBAR;\n\n#ifdef FEAT_EVAL\n    // If breakpoints have been added/deleted need to check for it.\n    if ((sp->dbg_tick < debug_tick) && !sp->source_from_buf)\n    {\n\tsp->breakpoint = dbg_find_breakpoint(TRUE, sp->fname, SOURCING_LNUM);\n\tsp->dbg_tick = debug_tick;\n    }\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tscript_line_end();\n# endif\n#endif\n\n    // Set the current sourcing line number.\n    SOURCING_LNUM = sp->sourcing_lnum + 1;\n\n    // Get current line.  If there is a read-ahead line, use it, otherwise get\n    // one now.  \"fp\" is NULL if actually using a string.\n    if (sp->finished || (!sp->source_from_buf && sp->fp == NULL))\n\tline = NULL;\n    else if (sp->nextline == NULL)\n\tline = get_one_sourceline(sp);\n    else\n    {\n\tline = sp->nextline;\n\tsp->nextline = NULL;\n\t++sp->sourcing_lnum;\n    }\n#ifdef FEAT_PROFILE\n    if (line != NULL && do_profiling == PROF_YES)\n\tscript_line_start();\n#endif\n\n    // Only concatenate lines starting with a \\ when 'cpoptions' doesn't\n    // contain the 'C' flag.\n    if (line != NULL && options != GETLINE_NONE\n\t\t\t\t      && vim_strchr(p_cpo, CPO_CONCAT) == NULL)\n    {\n\tint comment_char = in_vim9script() ? '#' : '\"';\n\n\t// compensate for the one line read-ahead\n\t--sp->sourcing_lnum;\n\n\t// Get the next line and concatenate it when it starts with a\n\t// backslash. We always need to read the next line, keep it in\n\t// sp->nextline.\n\t/* Also check for a comment in between continuation lines: \"\\ */\n\t// Also check for a Vim9 comment, empty line, line starting with '|',\n\t// but not \"||\".\n\tsp->nextline = get_one_sourceline(sp);\n\tif (sp->nextline != NULL\n\t\t&& (*(p = skipwhite(sp->nextline)) == '\\\\'\n\t\t\t      || (p[0] == comment_char\n\t\t\t\t\t\t&& p[1] == '\\\\' && p[2] == ' ')\n\t\t\t      || (do_vim9_all && (*p == NUL\n\t\t\t\t\t\t     || vim9_comment_start(p)))\n\t\t\t      || (do_bar_cont && p[0] == '|' && p[1] != '|')))\n\t{\n\t    garray_T    ga;\n\n\t    ga_init2(&ga, sizeof(char_u), 400);\n\t    ga_concat(&ga, line);\n\t    if (*p == '\\\\')\n\t\tga_concat(&ga, p + 1);\n\t    else if (*p == '|')\n\t    {\n\t\tga_concat(&ga, (char_u *)\" \");\n\t\tga_concat(&ga, p);\n\t    }\n\t    for (;;)\n\t    {\n\t\tvim_free(sp->nextline);\n\t\tsp->nextline = get_one_sourceline(sp);\n\t\tif (sp->nextline == NULL)\n\t\t    break;\n\t\tp = skipwhite(sp->nextline);\n\t\tif (*p == '\\\\' || (do_bar_cont && p[0] == '|' && p[1] != '|'))\n\t\t{\n\t\t    // Adjust the growsize to the current length to speed up\n\t\t    // concatenating many lines.\n\t\t    if (ga.ga_len > 400)\n\t\t    {\n\t\t\tif (ga.ga_len > 8000)\n\t\t\t    ga.ga_growsize = 8000;\n\t\t\telse\n\t\t\t    ga.ga_growsize = ga.ga_len;\n\t\t    }\n\t\t    if (*p == '\\\\')\n\t\t\tga_concat(&ga, p + 1);\n\t\t    else\n\t\t    {\n\t\t\tga_concat(&ga, (char_u *)\" \");\n\t\t\tga_concat(&ga, p);\n\t\t    }\n\t\t}\n\t\telse if (!(p[0] == (comment_char)\n\t\t\t\t\t\t&& p[1] == '\\\\' && p[2] == ' ')\n\t\t     && !(do_vim9_all && (*p == NUL || vim9_comment_start(p))))\n\t\t    break;\n\t\t/* drop a # comment or \"\\ comment line */\n\t    }\n\t    ga_append(&ga, NUL);\n\t    vim_free(line);\n\t    line = ga.ga_data;\n\t}\n    }\n\n    if (line != NULL && sp->conv.vc_type != CONV_NONE)\n    {\n\tchar_u\t*s;\n\n\t// Convert the encoding of the script line.\n\ts = string_convert(&sp->conv, line, NULL);\n\tif (s != NULL)\n\t{\n\t    vim_free(line);\n\t    line = s;\n\t}\n    }\n\n#ifdef FEAT_EVAL\n    // Did we encounter a breakpoint?\n    if (!sp->source_from_buf && sp->breakpoint != 0\n\t    && sp->breakpoint <= SOURCING_LNUM)\n    {\n\tdbg_breakpoint(sp->fname, SOURCING_LNUM);\n\t// Find next breakpoint.\n\tsp->breakpoint = dbg_find_breakpoint(TRUE, sp->fname, SOURCING_LNUM);\n\tsp->dbg_tick = debug_tick;\n    }\n#endif\n\n    return line;\n}\n\n/*\n * Returns TRUE if sourcing a script either from a file or a buffer.\n * Otherwise returns FALSE.\n */\n    int\nsourcing_a_script(exarg_T *eap)\n{\n    return (getline_equal(eap->getline, eap->cookie, getsourceline));\n}\n\n/*\n * \":scriptencoding\": Set encoding conversion for a sourced script.\n */\n    void\nex_scriptencoding(exarg_T *eap)\n{\n    source_cookie_T\t*sp;\n    char_u\t\t*name;\n\n    if (!sourcing_a_script(eap))\n    {\n\temsg(_(e_scriptencoding_used_outside_of_sourced_file));\n\treturn;\n    }\n\n    if (*eap->arg != NUL)\n    {\n\tname = enc_canonize(eap->arg);\n\tif (name == NULL)\t// out of memory\n\t    return;\n    }\n    else\n\tname = eap->arg;\n\n    // Setup for conversion from the specified encoding to 'encoding'.\n    sp = (source_cookie_T *)getline_cookie(eap->getline, eap->cookie);\n    convert_setup(&sp->conv, name, p_enc);\n\n    if (name != eap->arg)\n\tvim_free(name);\n}\n\n/*\n * \":scriptversion\": Set Vim script version for a sourced script.\n */\n    void\nex_scriptversion(exarg_T *eap UNUSED)\n{\n    int\t\tnr;\n\n    if (!sourcing_a_script(eap))\n    {\n\temsg(_(e_scriptversion_used_outside_of_sourced_file));\n\treturn;\n    }\n    if (in_vim9script())\n    {\n\temsg(_(e_cannot_use_scriptversion_after_vim9script));\n\treturn;\n    }\n\n    nr = getdigits(&eap->arg);\n    if (nr == 0 || *eap->arg != NUL)\n\temsg(_(e_invalid_argument));\n    else if (nr > SCRIPT_VERSION_MAX)\n\tsemsg(_(e_scriptversion_not_supported_nr), nr);\n    else\n    {\n\tcurrent_sctx.sc_version = nr;\n#ifdef FEAT_EVAL\n\tSCRIPT_ITEM(current_sctx.sc_sid)->sn_version = nr;\n#endif\n    }\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * \":finish\": Mark a sourced file as finished.\n */\n    void\nex_finish(exarg_T *eap)\n{\n    if (sourcing_a_script(eap))\n\tdo_finish(eap, FALSE);\n    else\n\temsg(_(e_finish_used_outside_of_sourced_file));\n}\n\n/*\n * Mark a sourced file as finished.  Possibly makes the \":finish\" pending.\n * Also called for a pending finish at the \":endtry\" or after returning from\n * an extra do_cmdline().  \"reanimate\" is used in the latter case.\n */\n    void\ndo_finish(exarg_T *eap, int reanimate)\n{\n    int\t\tidx;\n\n    if (reanimate)\n\t((source_cookie_T *)getline_cookie(eap->getline,\n\t\t\t\t\t      eap->cookie))->finished = FALSE;\n\n    // Cleanup (and inactivate) conditionals, but stop when a try conditional\n    // not in its finally clause (which then is to be executed next) is found.\n    // In this case, make the \":finish\" pending for execution at the \":endtry\".\n    // Otherwise, finish normally.\n    idx = cleanup_conditionals(eap->cstack, 0, TRUE);\n    if (idx >= 0)\n    {\n\teap->cstack->cs_pending[idx] = CSTP_FINISH;\n\treport_make_pending(CSTP_FINISH, NULL);\n    }\n    else\n\t((source_cookie_T *)getline_cookie(eap->getline,\n\t\t\t\t\t       eap->cookie))->finished = TRUE;\n}\n\n\n/*\n * Return TRUE when a sourced file had the \":finish\" command: Don't give error\n * message for missing \":endif\".\n * Return FALSE when not sourcing a file.\n */\n    int\nsource_finished(\n    char_u\t*(*fgetline)(int, void *, int, getline_opt_T),\n    void\t*cookie)\n{\n    return (getline_equal(fgetline, cookie, getsourceline)\n\t    && ((source_cookie_T *)getline_cookie(\n\t\t\t\t\t\tfgetline, cookie))->finished);\n}\n\n/*\n * Find the path of a script below the \"autoload\" directory.\n * Returns NULL if there is no \"/autoload/\" in the script name.\n */\n    char_u *\nscript_name_after_autoload(scriptitem_T *si)\n{\n    char_u\t*p = si->sn_name;\n    char_u\t*res = NULL;\n\n    for (;;)\n    {\n\tchar_u *n = (char_u *)strstr((char *)p, \"autoload\");\n\n\tif (n == NULL)\n\t    break;\n\tif (n > p && vim_ispathsep(n[-1]) && vim_ispathsep(n[8]))\n\t    res = n + 9;\n\tp = n + 8;\n    }\n    return res;\n}\n\n/*\n * For an autoload script \"autoload/dir/script.vim\" return the prefix\n * \"dir#script#\" in allocated memory.\n * Returns NULL if anything is wrong.\n */\n    char_u *\nget_autoload_prefix(scriptitem_T *si)\n{\n    char_u *p = script_name_after_autoload(si);\n    char_u *prefix;\n\n    if (p == NULL)\n\treturn NULL;\n    prefix = vim_strsave(p);\n    if (prefix == NULL)\n\treturn NULL;\n\n    // replace all '/' with '#' and locate \".vim\" at the end\n    for (p = prefix; *p != NUL; p += mb_ptr2len(p))\n    {\n\tif (vim_ispathsep(*p))\n\t    *p = '#';\n\telse if (STRCMP(p, \".vim\") == 0)\n\t{\n\t    p[0] = '#';\n\t    p[1] = NUL;\n\t    return prefix;\n\t}\n    }\n\n    // did not find \".vim\" at the end\n    vim_free(prefix);\n    return NULL;\n}\n\n/*\n * If in a Vim9 autoload script return \"name\" with the autoload prefix for the\n * script.  If successful the returned name is allocated.\n * Otherwise it returns \"name\" unmodified.\n */\n    char_u *\nmay_prefix_autoload(char_u *name)\n{\n    if (SCRIPT_ID_VALID(current_sctx.sc_sid))\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(current_sctx.sc_sid);\n\n\tif (si->sn_autoload_prefix != NULL)\n\t{\n\t    char_u  *basename = name;\n\t    size_t  len;\n\t    char_u  *res;\n\n\t    if (*name == K_SPECIAL)\n\t    {\n\t\tchar_u *p = vim_strchr(name, '_');\n\n\t\t// skip over \"<SNR>99_\"\n\t\tif (p != NULL)\n\t\t    basename = p + 1;\n\t    }\n\n\t    len = STRLEN(si->sn_autoload_prefix) + STRLEN(basename) + 2;\n\t    res = alloc(len);\n\t    if (res != NULL)\n\t    {\n\t\tvim_snprintf((char *)res, len, \"%s%s\",\n\t\t\t\t\t     si->sn_autoload_prefix, basename);\n\t\treturn res;\n\t    }\n\t}\n    }\n    return name;\n}\n\n/*\n * Return the autoload script name for a function or variable name.\n * Returns NULL when out of memory.\n * Caller must make sure that \"name\" contains AUTOLOAD_CHAR.\n */\n    char_u *\nautoload_name(char_u *name)\n{\n    char_u\t*p, *q = NULL;\n    char_u\t*scriptname;\n\n    // Get the script file name: replace '#' with '/', append \".vim\".\n    scriptname = alloc(STRLEN(name) + 14);\n    if (scriptname == NULL)\n\treturn NULL;\n    STRCPY(scriptname, \"autoload/\");\n    STRCAT(scriptname, name[0] == 'g' && name[1] == ':' ? name + 2: name);\n    for (p = scriptname + 9; (p = vim_strchr(p, AUTOLOAD_CHAR)) != NULL;\n\t\t\t\t\t\t\t\t    q = p, ++p)\n\t*p = '/';\n    STRCPY(q, \".vim\");\n    return scriptname;\n}\n\n/*\n * If \"name\" has a package name try autoloading the script for it.\n * Return TRUE if a package was loaded.\n */\n    int\nscript_autoload(\n    char_u\t*name,\n    int\t\treload)\t    // load script again when already loaded\n{\n    char_u\t*p;\n    char_u\t*scriptname, *tofree;\n    int\t\tret = FALSE;\n    int\t\ti;\n    int\t\tret_sid;\n\n    // If the name starts with \"<SNR>123_\" then \"123\" is the script ID.\n    if (name[0] == K_SPECIAL && name[1] == KS_EXTRA && name[2] == KE_SNR)\n    {\n\tp = name + 3;\n\tret_sid = (int)getdigits(&p);\n\tif (*p == '_' && SCRIPT_ID_VALID(ret_sid))\n\t{\n\t    may_load_script(ret_sid, &ret);\n\t    return ret;\n\t}\n    }\n\n    // If there is no '#' after name[0] there is no package name.\n    p = vim_strchr(name, AUTOLOAD_CHAR);\n    if (p == NULL || p == name)\n\treturn FALSE;\n\n    tofree = scriptname = autoload_name(name);\n    if (scriptname == NULL)\n\treturn FALSE;\n\n    // Find the name in the list of previously loaded package names.  Skip\n    // \"autoload/\", it's always the same.\n    for (i = 0; i < ga_loaded.ga_len; ++i)\n\tif (STRCMP(((char_u **)ga_loaded.ga_data)[i] + 9, scriptname + 9) == 0)\n\t    break;\n    if (!reload && i < ga_loaded.ga_len)\n\tret = FALSE;\t    // was loaded already\n    else\n    {\n\t// Remember the name if it wasn't loaded already.\n\tif (i == ga_loaded.ga_len && ga_grow(&ga_loaded, 1) == OK)\n\t{\n\t    ((char_u **)ga_loaded.ga_data)[ga_loaded.ga_len++] = scriptname;\n\t    tofree = NULL;\n\t}\n\n\t// Try loading the package from $VIMRUNTIME/autoload/<name>.vim\n\t// Use \"ret_sid\" to avoid loading the same script again.\n\tif (source_in_path(p_rtp, scriptname, DIP_START, &ret_sid) == OK)\n\t    ret = TRUE;\n    }\n\n    vim_free(tofree);\n    return ret;\n}\n#endif\n", "\" Tests for the :source command.\n\nsource check.vim\nsource view_util.vim\n\nfunc Test_source_autocmd()\n  call writefile([\n\t\\ 'let did_source = 1',\n\t\\ ], 'Xsourced')\n  au SourcePre *source* let did_source_pre = 1\n  au SourcePost *source* let did_source_post = 1\n\n  source Xsourced\n\n  call assert_equal(g:did_source, 1)\n  call assert_equal(g:did_source_pre, 1)\n  call assert_equal(g:did_source_post, 1)\n\n  call delete('Xsourced')\n  au! SourcePre\n  au! SourcePost\n  unlet g:did_source\n  unlet g:did_source_pre\n  unlet g:did_source_post\nendfunc\n\nfunc Test_source_cmd()\n  au SourceCmd *source* let did_source = expand('<afile>')\n  au SourcePre *source* let did_source_pre = 2\n  au SourcePost *source* let did_source_post = 2\n\n  source Xsourced\n\n  call assert_equal(g:did_source, 'Xsourced')\n  call assert_false(exists('g:did_source_pre'))\n  call assert_equal(g:did_source_post, 2)\n\n  au! SourceCmd\n  au! SourcePre\n  au! SourcePost\nendfunc\n\nfunc Test_source_sandbox()\n  new\n  call writefile([\"Ohello\\<Esc>\"], 'Xsourcehello')\n  source! Xsourcehello | echo\n  call assert_equal('hello', getline(1))\n  call assert_fails('sandbox source! Xsourcehello', 'E48:')\n  bwipe!\n  call delete('Xsourcehello')\nendfunc\n\n\" When deleting a file and immediately creating a new one the inode may be\n\" recycled.  Vim should not recognize it as the same script.\nfunc Test_different_script()\n  call writefile(['let s:var = \"asdf\"'], 'XoneScript')\n  source XoneScript\n  call delete('XoneScript')\n  call writefile(['let g:var = s:var'], 'XtwoScript')\n  call assert_fails('source XtwoScript', 'E121:')\n  call delete('XtwoScript')\nendfunc\n\n\" When sourcing a vim script, shebang should be ignored.\nfunc Test_source_ignore_shebang()\n  call writefile(['#!./xyzabc', 'let g:val=369'], 'Xfile.vim')\n  source Xfile.vim\n  call assert_equal(g:val, 369)\n  call delete('Xfile.vim')\nendfunc\n\n\" Test for expanding <sfile> in an autocmd and for <slnum> and <sflnum>\nfunc Test_source_autocmd_sfile()\n  let code =<< trim [CODE]\n    let g:SfileName = ''\n    augroup sfiletest\n      au!\n      autocmd User UserAutoCmd let g:Sfile = '<sfile>:t'\n    augroup END\n    doautocmd User UserAutoCmd\n    let g:Slnum = expand('<slnum>')\n    let g:Sflnum = expand('<sflnum>')\n    augroup! sfiletest\n  [CODE]\n  call writefile(code, 'Xscript.vim')\n  source Xscript.vim\n  call assert_equal('Xscript.vim', g:Sfile)\n  call assert_equal('7', g:Slnum)\n  call assert_equal('8', g:Sflnum)\n  call delete('Xscript.vim')\nendfunc\n\nfunc Test_source_error()\n  call assert_fails('scriptencoding utf-8', 'E167:')\n  call assert_fails('finish', 'E168:')\n  call assert_fails('scriptversion 2', 'E984:')\n  call assert_fails('source!', 'E471:')\n  new\n  call setline(1, ['', '', '', ''])\n  call assert_fails('1,3source Xscript.vim', 'E481:')\n  call assert_fails('1,3source! Xscript.vim', 'E481:')\n  bw!\nendfunc\n\n\" Test for sourcing a script recursively\nfunc Test_nested_script()\n  CheckRunVimInTerminal\n  call writefile([':source! Xscript.vim', ''], 'Xscript.vim')\n  let buf = RunVimInTerminal('', {'rows': 6})\n  call term_wait(buf)\n  call term_sendkeys(buf, \":set noruler\\n\")\n  call term_sendkeys(buf, \":source! Xscript.vim\\n\")\n  call term_wait(buf)\n  call WaitForAssert({-> assert_match('E22: Scripts nested too deep\\s*', term_getline(buf, 6))})\n  call delete('Xscript.vim')\n  call StopVimInTerminal(buf)\nendfunc\n\n\" Test for sourcing a script from the current buffer\nfunc Test_source_buffer()\n  new\n  \" Source a simple script\n  let lines =<< trim END\n    let a = \"Test\"\n    let b = 20\n\n    let c = [1.1]\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['Test', 20, [1.1]], [g:a, g:b, g:c])\n\n  \" Source a range of lines in the current buffer\n  %d _\n  let lines =<< trim END\n    let a = 10\n    let a += 20\n    let a += 30\n    let a += 40\n  END\n  call setline(1, lines)\n  .source\n  call assert_equal(10, g:a)\n  3source\n  call assert_equal(40, g:a)\n  2,3source\n  call assert_equal(90, g:a)\n\n  \" Make sure the script line number is correct when sourcing a range of\n  \" lines.\n  %d _\n  let lines =<< trim END\n     Line 1\n     Line 2\n     func Xtestfunc()\n       return expand(\"<sflnum>\")\n     endfunc\n     Line 3\n     Line 4\n  END\n  call setline(1, lines)\n  3,5source\n  call assert_equal('4', Xtestfunc())\n  delfunc Xtestfunc\n\n  \" Source a script with line continuation lines\n  %d _\n  let lines =<< trim END\n    let m = [\n      \\   1,\n      \\   2,\n      \\ ]\n    call add(m, 3)\n  END\n  call setline(1, lines)\n  source\n  call assert_equal([1, 2, 3], g:m)\n  \" Source a script with line continuation lines and a comment\n  %d _\n  let lines =<< trim END\n    let m = [\n      \"\\ first entry\n      \\   'a',\n      \"\\ second entry\n      \\   'b',\n      \\ ]\n    \" third entry\n    call add(m, 'c')\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['a', 'b', 'c'], g:m)\n  \" Source an incomplete line continuation line\n  %d _\n  let lines =<< trim END\n    let k = [\n      \\\n  END\n  call setline(1, lines)\n  call assert_fails('source', 'E697:')\n  \" Source a function with a for loop\n  %d _\n  let lines =<< trim END\n    let m = []\n    \" test function\n    func! Xtest()\n      for i in range(5, 7)\n        call add(g:m, i)\n      endfor\n    endfunc\n    call Xtest()\n  END\n  call setline(1, lines)\n  source\n  call assert_equal([5, 6, 7], g:m)\n  \" Source an empty buffer\n  %d _\n  source\n\n  \" test for script local functions and variables\n  let lines =<< trim END\n    let s:var1 = 10\n    func s:F1()\n      let s:var1 += 1\n      return s:var1\n    endfunc\n    func s:F2()\n    endfunc\n    let g:ScriptID = expand(\"<SID>\")\n  END\n  call setline(1, lines)\n  source\n  call assert_true(g:ScriptID != '')\n  call assert_true(exists('*' .. g:ScriptID .. 'F1'))\n  call assert_true(exists('*' .. g:ScriptID .. 'F2'))\n  call assert_equal(11, call(g:ScriptID .. 'F1', []))\n\n  \" the same script ID should be used even if the buffer is sourced more than\n  \" once\n  %d _\n  let lines =<< trim END\n    let g:ScriptID = expand(\"<SID>\")\n    let g:Count += 1\n  END\n  call setline(1, lines)\n  let g:Count = 0\n  source\n  call assert_true(g:ScriptID != '')\n  let scid = g:ScriptID\n  source\n  call assert_equal(scid, g:ScriptID)\n  call assert_equal(2, g:Count)\n  source\n  call assert_equal(scid, g:ScriptID)\n  call assert_equal(3, g:Count)\n\n  \" test for the script line number\n  %d _\n  let lines =<< trim END\n    \" comment\n    let g:Slnum1 = expand(\"<slnum>\")\n    let i = 1 +\n           \\ 2 +\n          \"\\ comment\n           \\ 3\n    let g:Slnum2 = expand(\"<slnum>\")\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('2', g:Slnum1)\n  call assert_equal('7', g:Slnum2)\n\n  \" test for retaining the same script number across source calls\n  let lines =<< trim END\n     let g:ScriptID1 = expand(\"<SID>\")\n     let g:Slnum1 = expand(\"<slnum>\")\n     let l =<< trim END\n       let g:Slnum2 = expand(\"<slnum>\")\n       let g:ScriptID2 = expand(\"<SID>\")\n     END\n     new\n     call setline(1, l)\n     source\n     bw!\n     let g:ScriptID3 = expand(\"<SID>\")\n     let g:Slnum3 = expand(\"<slnum>\")\n  END\n  call writefile(lines, 'Xscript')\n  source Xscript\n  call assert_true(g:ScriptID1 != g:ScriptID2)\n  call assert_equal(g:ScriptID1, g:ScriptID3)\n  call assert_equal('2', g:Slnum1)\n  call assert_equal('1', g:Slnum2)\n  call assert_equal('12', g:Slnum3)\n  call delete('Xscript')\n\n  \" test for sourcing a heredoc\n  %d _\n  let lines =<< trim END\n     let a = 1\n     let heredoc =<< trim DATA\n        red\n          green\n        blue\n     DATA\n     let b = 2\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['red', '  green', 'blue'], g:heredoc)\n\n  \" test for a while and for statement\n  %d _\n  let lines =<< trim END\n     let a = 0\n     let b = 1\n     while b <= 10\n       let a += 10\n       let b += 1\n     endwhile\n     for i in range(5)\n       let a += 10\n     endfor\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(150, g:a)\n\n  \" test for sourcing the same buffer multiple times after changing a function\n  %d _\n  let lines =<< trim END\n     func Xtestfunc()\n       return \"one\"\n     endfunc\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"one\", Xtestfunc())\n  call setline(2, '  return \"two\"')\n  source\n  call assert_equal(\"two\", Xtestfunc())\n  call setline(2, '  return \"three\"')\n  source\n  call assert_equal(\"three\", Xtestfunc())\n  delfunc Xtestfunc\n\n  \" test for using try/catch\n  %d _\n  let lines =<< trim END\n     let Trace = '1'\n     try\n       let a1 = b1\n     catch\n       let Trace ..= '2'\n     finally\n       let Trace ..= '3'\n     endtry\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"123\", g:Trace)\n\n  \" test with the finish command\n  %d _\n  let lines =<< trim END\n     let g:Color = 'blue'\n     finish\n     let g:Color = 'green'\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('blue', g:Color)\n\n  \" Test for the SourcePre and SourcePost autocmds\n  augroup Xtest\n    au!\n    au SourcePre * let g:XsourcePre=4\n          \\ | let g:XsourcePreFile = expand(\"<afile>\")\n    au SourcePost * let g:XsourcePost=6\n          \\ | let g:XsourcePostFile = expand(\"<afile>\")\n  augroup END\n  %d _\n  let lines =<< trim END\n     let a = 1\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(4, g:XsourcePre)\n  call assert_equal(6, g:XsourcePost)\n  call assert_equal(':source buffer=' .. bufnr(), g:XsourcePreFile)\n  call assert_equal(':source buffer=' .. bufnr(), g:XsourcePostFile)\n  augroup Xtest\n    au!\n  augroup END\n  augroup! Xtest\n\n  %bw!\nendfunc\n\n\" Test for sourcing a Vim9 script from the current buffer\nfunc Test_source_buffer_vim9()\n  new\n\n  \" test for sourcing a Vim9 script\n  %d _\n  let lines =<< trim END\n     vim9script\n\n     # check dict\n     var x: number = 10\n     def g:Xtestfunc(): number\n       return x\n     enddef\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(10, Xtestfunc())\n\n  \" test for sourcing a vim9 script with line continuation\n  %d _\n  let lines =<< trim END\n     vim9script\n\n     g:Str1 = \"hello \"\n              .. \"world\"\n              .. \", how are you?\"\n     g:Colors = [\n       'red',\n       # comment\n       'blue'\n       ]\n     g:Dict = {\n       a: 22,\n       # comment\n       b: 33\n       }\n\n     # calling a function with line continuation\n     def Sum(...values: list<number>): number\n       var sum: number = 0\n       for v in values\n         sum += v\n       endfor\n       return sum\n     enddef\n     g:Total1 = Sum(10,\n                   20,\n                   30)\n\n     var i: number = 0\n     while i < 10\n       # while loop\n       i +=\n           1\n     endwhile\n     g:Count1 = i\n\n     # for loop\n     g:Count2 = 0\n     for j in range(10, 20)\n       g:Count2 +=\n           i\n     endfor\n\n     g:Total2 = 10 +\n                20 -\n                5\n\n     g:Result1 = g:Total2 > 1\n                ? 'red'\n                : 'blue'\n\n     g:Str2 = 'x'\n              ->repeat(10)\n              ->trim()\n              ->strpart(4)\n\n     g:Result2 = g:Dict\n                    .a\n\n     augroup Test\n       au!\n       au BufNewFile Xfile g:readFile = 1\n             | g:readExtra = 2\n     augroup END\n     g:readFile = 0\n     g:readExtra = 0\n     new Xfile\n     bwipe!\n     augroup Test\n       au!\n     augroup END\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"hello world, how are you?\", g:Str1)\n  call assert_equal(['red', 'blue'], g:Colors)\n  call assert_equal(#{a: 22, b: 33}, g:Dict)\n  call assert_equal(60, g:Total1)\n  call assert_equal(10, g:Count1)\n  call assert_equal(110, g:Count2)\n  call assert_equal(25, g:Total2)\n  call assert_equal('red', g:Result1)\n  call assert_equal('xxxxxx', g:Str2)\n  call assert_equal(22, g:Result2)\n  call assert_equal(1, g:readFile)\n  call assert_equal(2, g:readExtra)\n\n  \" test for sourcing the same buffer multiple times after changing a function\n  %d _\n  let lines =<< trim END\n     vim9script\n     def g:Xtestfunc(): string\n       return \"one\"\n     enddef\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"one\", Xtestfunc())\n  call setline(3, '  return \"two\"')\n  source\n  call assert_equal(\"two\", Xtestfunc())\n  call setline(3, '  return \"three\"')\n  source\n  call assert_equal(\"three\", Xtestfunc())\n  delfunc Xtestfunc\n\n  \" Test for sourcing a range of lines. Make sure the script line number is\n  \" correct.\n  %d _\n  let lines =<< trim END\n     Line 1\n     Line 2\n     vim9script\n     def g:Xtestfunc(): string\n       return expand(\"<sflnum>\")\n     enddef\n     Line 3\n     Line 4\n  END\n  call setline(1, lines)\n  3,6source\n  call assert_equal('5', Xtestfunc())\n  delfunc Xtestfunc\n\n  \" test for sourcing a heredoc\n  %d _\n  let lines =<< trim END\n    vim9script\n    var a = 1\n    g:heredoc =<< trim DATA\n       red\n         green\n       blue\n    DATA\n    var b = 2\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['red', '  green', 'blue'], g:heredoc)\n\n  \" test for using the :vim9cmd modifier\n  %d _\n  let lines =<< trim END\n    first line\n    g:Math = {\n         pi: 3.12,\n         e: 2.71828\n      }\n    g:Editors = [\n      'vim',\n      # comment\n      'nano'\n      ]\n    last line\n  END\n  call setline(1, lines)\n  vim9cmd :2,10source\n  call assert_equal(#{pi: 3.12, e: 2.71828}, g:Math)\n  call assert_equal(['vim', 'nano'], g:Editors)\n\n  \" '<,'> range before the cmd modifier works\n  unlet g:Math\n  unlet g:Editors\n  exe \"normal 6GV4j:vim9cmd source\\<CR>\"\n  call assert_equal(['vim', 'nano'], g:Editors)\n  unlet g:Editors\n\n  \" test for using try/catch\n  %d _\n  let lines =<< trim END\n     vim9script\n     g:Trace = '1'\n     try\n       a1 = b1\n     catch\n       g:Trace ..= '2'\n     finally\n       g:Trace ..= '3'\n     endtry\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('123', g:Trace)\n\n  \" test with the finish command\n  %d _\n  let lines =<< trim END\n     vim9script\n     g:Color = 'red'\n     finish\n     g:Color = 'blue'\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('red', g:Color)\n\n  \" test for ++clear argument to clear all the functions/variables\n  %d _\n  let lines =<< trim END\n     g:ScriptVarFound = exists(\"color\")\n     g:MyFuncFound = exists('*Myfunc')\n     if g:MyFuncFound\n       finish\n     endif\n     var color = 'blue'\n     def Myfunc()\n     enddef\n  END\n  call setline(1, lines)\n  vim9cmd source\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  vim9cmd source\n  call assert_true(g:MyFuncFound)\n  call assert_true(g:ScriptVarFound)\n  vim9cmd source ++clear\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  vim9cmd source ++clear\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  call assert_fails('vim9cmd source ++clearx', 'E475:')\n  call assert_fails('vim9cmd source ++abcde', 'E484:')\n\n  %bw!\nendfunc\n\nfunc Test_source_buffer_long_line()\n  \" This was reading past the end of the line.\n  new\n  norm300gr0\n  so\n  bwipe!\nendfunc\n\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n#ifdef FEAT_CINDENT\n\t\"+cindent\",\n#else\n\t\"-cindent\",\n#endif\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n#ifdef FEAT_LISP\n\t\"+lispindent\",\n#else\n\t\"-lispindent\",\n#endif\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n#ifdef FEAT_SMARTINDENT\n\t\"+smartindent\",\n#else\n\t\"-smartindent\",\n#endif\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    4973,\n/**/\n    4972,\n/**/\n    4971,\n/**/\n    4970,\n/**/\n    4969,\n/**/\n    4968,\n/**/\n    4967,\n/**/\n    4966,\n/**/\n    4965,\n/**/\n    4964,\n/**/\n    4963,\n/**/\n    4962,\n/**/\n    4961,\n/**/\n    4960,\n/**/\n    4959,\n/**/\n    4958,\n/**/\n    4957,\n/**/\n    4956,\n/**/\n    4955,\n/**/\n    4954,\n/**/\n    4953,\n/**/\n    4952,\n/**/\n    4951,\n/**/\n    4950,\n/**/\n    4949,\n/**/\n    4948,\n/**/\n    4947,\n/**/\n    4946,\n/**/\n    4945,\n/**/\n    4944,\n/**/\n    4943,\n/**/\n    4942,\n/**/\n    4941,\n/**/\n    4940,\n/**/\n    4939,\n/**/\n    4938,\n/**/\n    4937,\n/**/\n    4936,\n/**/\n    4935,\n/**/\n    4934,\n/**/\n    4933,\n/**/\n    4932,\n/**/\n    4931,\n/**/\n    4930,\n/**/\n    4929,\n/**/\n    4928,\n/**/\n    4927,\n/**/\n    4926,\n/**/\n    4925,\n/**/\n    4924,\n/**/\n    4923,\n/**/\n    4922,\n/**/\n    4921,\n/**/\n    4920,\n/**/\n    4919,\n/**/\n    4918,\n/**/\n    4917,\n/**/\n    4916,\n/**/\n    4915,\n/**/\n    4914,\n/**/\n    4913,\n/**/\n    4912,\n/**/\n    4911,\n/**/\n    4910,\n/**/\n    4909,\n/**/\n    4908,\n/**/\n    4907,\n/**/\n    4906,\n/**/\n    4905,\n/**/\n    4904,\n/**/\n    4903,\n/**/\n    4902,\n/**/\n    4901,\n/**/\n    4900,\n/**/\n    4899,\n/**/\n    4898,\n/**/\n    4897,\n/**/\n    4896,\n/**/\n    4895,\n/**/\n    4894,\n/**/\n    4893,\n/**/\n    4892,\n/**/\n    4891,\n/**/\n    4890,\n/**/\n    4889,\n/**/\n    4888,\n/**/\n    4887,\n/**/\n    4886,\n/**/\n    4885,\n/**/\n    4884,\n/**/\n    4883,\n/**/\n    4882,\n/**/\n    4881,\n/**/\n    4880,\n/**/\n    4879,\n/**/\n    4878,\n/**/\n    4877,\n/**/\n    4876,\n/**/\n    4875,\n/**/\n    4874,\n/**/\n    4873,\n/**/\n    4872,\n/**/\n    4871,\n/**/\n    4870,\n/**/\n    4869,\n/**/\n    4868,\n/**/\n    4867,\n/**/\n    4866,\n/**/\n    4865,\n/**/\n    4864,\n/**/\n    4863,\n/**/\n    4862,\n/**/\n    4861,\n/**/\n    4860,\n/**/\n    4859,\n/**/\n    4858,\n/**/\n    4857,\n/**/\n    4856,\n/**/\n    4855,\n/**/\n    4854,\n/**/\n    4853,\n/**/\n    4852,\n/**/\n    4851,\n/**/\n    4850,\n/**/\n    4849,\n/**/\n    4848,\n/**/\n    4847,\n/**/\n    4846,\n/**/\n    4845,\n/**/\n    4844,\n/**/\n    4843,\n/**/\n    4842,\n/**/\n    4841,\n/**/\n    4840,\n/**/\n    4839,\n/**/\n    4838,\n/**/\n    4837,\n/**/\n    4836,\n/**/\n    4835,\n/**/\n    4834,\n/**/\n    4833,\n/**/\n    4832,\n/**/\n    4831,\n/**/\n    4830,\n/**/\n    4829,\n/**/\n    4828,\n/**/\n    4827,\n/**/\n    4826,\n/**/\n    4825,\n/**/\n    4824,\n/**/\n    4823,\n/**/\n    4822,\n/**/\n    4821,\n/**/\n    4820,\n/**/\n    4819,\n/**/\n    4818,\n/**/\n    4817,\n/**/\n    4816,\n/**/\n    4815,\n/**/\n    4814,\n/**/\n    4813,\n/**/\n    4812,\n/**/\n    4811,\n/**/\n    4810,\n/**/\n    4809,\n/**/\n    4808,\n/**/\n    4807,\n/**/\n    4806,\n/**/\n    4805,\n/**/\n    4804,\n/**/\n    4803,\n/**/\n    4802,\n/**/\n    4801,\n/**/\n    4800,\n/**/\n    4799,\n/**/\n    4798,\n/**/\n    4797,\n/**/\n    4796,\n/**/\n    4795,\n/**/\n    4794,\n/**/\n    4793,\n/**/\n    4792,\n/**/\n    4791,\n/**/\n    4790,\n/**/\n    4789,\n/**/\n    4788,\n/**/\n    4787,\n/**/\n    4786,\n/**/\n    4785,\n/**/\n    4784,\n/**/\n    4783,\n/**/\n    4782,\n/**/\n    4781,\n/**/\n    4780,\n/**/\n    4779,\n/**/\n    4778,\n/**/\n    4777,\n/**/\n    4776,\n/**/\n    4775,\n/**/\n    4774,\n/**/\n    4773,\n/**/\n    4772,\n/**/\n    4771,\n/**/\n    4770,\n/**/\n    4769,\n/**/\n    4768,\n/**/\n    4767,\n/**/\n    4766,\n/**/\n    4765,\n/**/\n    4764,\n/**/\n    4763,\n/**/\n    4762,\n/**/\n    4761,\n/**/\n    4760,\n/**/\n    4759,\n/**/\n    4758,\n/**/\n    4757,\n/**/\n    4756,\n/**/\n    4755,\n/**/\n    4754,\n/**/\n    4753,\n/**/\n    4752,\n/**/\n    4751,\n/**/\n    4750,\n/**/\n    4749,\n/**/\n    4748,\n/**/\n    4747,\n/**/\n    4746,\n/**/\n    4745,\n/**/\n    4744,\n/**/\n    4743,\n/**/\n    4742,\n/**/\n    4741,\n/**/\n    4740,\n/**/\n    4739,\n/**/\n    4738,\n/**/\n    4737,\n/**/\n    4736,\n/**/\n    4735,\n/**/\n    4734,\n/**/\n    4733,\n/**/\n    4732,\n/**/\n    4731,\n/**/\n    4730,\n/**/\n    4729,\n/**/\n    4728,\n/**/\n    4727,\n/**/\n    4726,\n/**/\n    4725,\n/**/\n    4724,\n/**/\n    4723,\n/**/\n    4722,\n/**/\n    4721,\n/**/\n    4720,\n/**/\n    4719,\n/**/\n    4718,\n/**/\n    4717,\n/**/\n    4716,\n/**/\n    4715,\n/**/\n    4714,\n/**/\n    4713,\n/**/\n    4712,\n/**/\n    4711,\n/**/\n    4710,\n/**/\n    4709,\n/**/\n    4708,\n/**/\n    4707,\n/**/\n    4706,\n/**/\n    4705,\n/**/\n    4704,\n/**/\n    4703,\n/**/\n    4702,\n/**/\n    4701,\n/**/\n    4700,\n/**/\n    4699,\n/**/\n    4698,\n/**/\n    4697,\n/**/\n    4696,\n/**/\n    4695,\n/**/\n    4694,\n/**/\n    4693,\n/**/\n    4692,\n/**/\n    4691,\n/**/\n    4690,\n/**/\n    4689,\n/**/\n    4688,\n/**/\n    4687,\n/**/\n    4686,\n/**/\n    4685,\n/**/\n    4684,\n/**/\n    4683,\n/**/\n    4682,\n/**/\n    4681,\n/**/\n    4680,\n/**/\n    4679,\n/**/\n    4678,\n/**/\n    4677,\n/**/\n    4676,\n/**/\n    4675,\n/**/\n    4674,\n/**/\n    4673,\n/**/\n    4672,\n/**/\n    4671,\n/**/\n    4670,\n/**/\n    4669,\n/**/\n    4668,\n/**/\n    4667,\n/**/\n    4666,\n/**/\n    4665,\n/**/\n    4664,\n/**/\n    4663,\n/**/\n    4662,\n/**/\n    4661,\n/**/\n    4660,\n/**/\n    4659,\n/**/\n    4658,\n/**/\n    4657,\n/**/\n    4656,\n/**/\n    4655,\n/**/\n    4654,\n/**/\n    4653,\n/**/\n    4652,\n/**/\n    4651,\n/**/\n    4650,\n/**/\n    4649,\n/**/\n    4648,\n/**/\n    4647,\n/**/\n    4646,\n/**/\n    4645,\n/**/\n    4644,\n/**/\n    4643,\n/**/\n    4642,\n/**/\n    4641,\n/**/\n    4640,\n/**/\n    4639,\n/**/\n    4638,\n/**/\n    4637,\n/**/\n    4636,\n/**/\n    4635,\n/**/\n    4634,\n/**/\n    4633,\n/**/\n    4632,\n/**/\n    4631,\n/**/\n    4630,\n/**/\n    4629,\n/**/\n    4628,\n/**/\n    4627,\n/**/\n    4626,\n/**/\n    4625,\n/**/\n    4624,\n/**/\n    4623,\n/**/\n    4622,\n/**/\n    4621,\n/**/\n    4620,\n/**/\n    4619,\n/**/\n    4618,\n/**/\n    4617,\n/**/\n    4616,\n/**/\n    4615,\n/**/\n    4614,\n/**/\n    4613,\n/**/\n    4612,\n/**/\n    4611,\n/**/\n    4610,\n/**/\n    4609,\n/**/\n    4608,\n/**/\n    4607,\n/**/\n    4606,\n/**/\n    4605,\n/**/\n    4604,\n/**/\n    4603,\n/**/\n    4602,\n/**/\n    4601,\n/**/\n    4600,\n/**/\n    4599,\n/**/\n    4598,\n/**/\n    4597,\n/**/\n    4596,\n/**/\n    4595,\n/**/\n    4594,\n/**/\n    4593,\n/**/\n    4592,\n/**/\n    4591,\n/**/\n    4590,\n/**/\n    4589,\n/**/\n    4588,\n/**/\n    4587,\n/**/\n    4586,\n/**/\n    4585,\n/**/\n    4584,\n/**/\n    4583,\n/**/\n    4582,\n/**/\n    4581,\n/**/\n    4580,\n/**/\n    4579,\n/**/\n    4578,\n/**/\n    4577,\n/**/\n    4576,\n/**/\n    4575,\n/**/\n    4574,\n/**/\n    4573,\n/**/\n    4572,\n/**/\n    4571,\n/**/\n    4570,\n/**/\n    4569,\n/**/\n    4568,\n/**/\n    4567,\n/**/\n    4566,\n/**/\n    4565,\n/**/\n    4564,\n/**/\n    4563,\n/**/\n    4562,\n/**/\n    4561,\n/**/\n    4560,\n/**/\n    4559,\n/**/\n    4558,\n/**/\n    4557,\n/**/\n    4556,\n/**/\n    4555,\n/**/\n    4554,\n/**/\n    4553,\n/**/\n    4552,\n/**/\n    4551,\n/**/\n    4550,\n/**/\n    4549,\n/**/\n    4548,\n/**/\n    4547,\n/**/\n    4546,\n/**/\n    4545,\n/**/\n    4544,\n/**/\n    4543,\n/**/\n    4542,\n/**/\n    4541,\n/**/\n    4540,\n/**/\n    4539,\n/**/\n    4538,\n/**/\n    4537,\n/**/\n    4536,\n/**/\n    4535,\n/**/\n    4534,\n/**/\n    4533,\n/**/\n    4532,\n/**/\n    4531,\n/**/\n    4530,\n/**/\n    4529,\n/**/\n    4528,\n/**/\n    4527,\n/**/\n    4526,\n/**/\n    4525,\n/**/\n    4524,\n/**/\n    4523,\n/**/\n    4522,\n/**/\n    4521,\n/**/\n    4520,\n/**/\n    4519,\n/**/\n    4518,\n/**/\n    4517,\n/**/\n    4516,\n/**/\n    4515,\n/**/\n    4514,\n/**/\n    4513,\n/**/\n    4512,\n/**/\n    4511,\n/**/\n    4510,\n/**/\n    4509,\n/**/\n    4508,\n/**/\n    4507,\n/**/\n    4506,\n/**/\n    4505,\n/**/\n    4504,\n/**/\n    4503,\n/**/\n    4502,\n/**/\n    4501,\n/**/\n    4500,\n/**/\n    4499,\n/**/\n    4498,\n/**/\n    4497,\n/**/\n    4496,\n/**/\n    4495,\n/**/\n    4494,\n/**/\n    4493,\n/**/\n    4492,\n/**/\n    4491,\n/**/\n    4490,\n/**/\n    4489,\n/**/\n    4488,\n/**/\n    4487,\n/**/\n    4486,\n/**/\n    4485,\n/**/\n    4484,\n/**/\n    4483,\n/**/\n    4482,\n/**/\n    4481,\n/**/\n    4480,\n/**/\n    4479,\n/**/\n    4478,\n/**/\n    4477,\n/**/\n    4476,\n/**/\n    4475,\n/**/\n    4474,\n/**/\n    4473,\n/**/\n    4472,\n/**/\n    4471,\n/**/\n    4470,\n/**/\n    4469,\n/**/\n    4468,\n/**/\n    4467,\n/**/\n    4466,\n/**/\n    4465,\n/**/\n    4464,\n/**/\n    4463,\n/**/\n    4462,\n/**/\n    4461,\n/**/\n    4460,\n/**/\n    4459,\n/**/\n    4458,\n/**/\n    4457,\n/**/\n    4456,\n/**/\n    4455,\n/**/\n    4454,\n/**/\n    4453,\n/**/\n    4452,\n/**/\n    4451,\n/**/\n    4450,\n/**/\n    4449,\n/**/\n    4448,\n/**/\n    4447,\n/**/\n    4446,\n/**/\n    4445,\n/**/\n    4444,\n/**/\n    4443,\n/**/\n    4442,\n/**/\n    4441,\n/**/\n    4440,\n/**/\n    4439,\n/**/\n    4438,\n/**/\n    4437,\n/**/\n    4436,\n/**/\n    4435,\n/**/\n    4434,\n/**/\n    4433,\n/**/\n    4432,\n/**/\n    4431,\n/**/\n    4430,\n/**/\n    4429,\n/**/\n    4428,\n/**/\n    4427,\n/**/\n    4426,\n/**/\n    4425,\n/**/\n    4424,\n/**/\n    4423,\n/**/\n    4422,\n/**/\n    4421,\n/**/\n    4420,\n/**/\n    4419,\n/**/\n    4418,\n/**/\n    4417,\n/**/\n    4416,\n/**/\n    4415,\n/**/\n    4414,\n/**/\n    4413,\n/**/\n    4412,\n/**/\n    4411,\n/**/\n    4410,\n/**/\n    4409,\n/**/\n    4408,\n/**/\n    4407,\n/**/\n    4406,\n/**/\n    4405,\n/**/\n    4404,\n/**/\n    4403,\n/**/\n    4402,\n/**/\n    4401,\n/**/\n    4400,\n/**/\n    4399,\n/**/\n    4398,\n/**/\n    4397,\n/**/\n    4396,\n/**/\n    4395,\n/**/\n    4394,\n/**/\n    4393,\n/**/\n    4392,\n/**/\n    4391,\n/**/\n    4390,\n/**/\n    4389,\n/**/\n    4388,\n/**/\n    4387,\n/**/\n    4386,\n/**/\n    4385,\n/**/\n    4384,\n/**/\n    4383,\n/**/\n    4382,\n/**/\n    4381,\n/**/\n    4380,\n/**/\n    4379,\n/**/\n    4378,\n/**/\n    4377,\n/**/\n    4376,\n/**/\n    4375,\n/**/\n    4374,\n/**/\n    4373,\n/**/\n    4372,\n/**/\n    4371,\n/**/\n    4370,\n/**/\n    4369,\n/**/\n    4368,\n/**/\n    4367,\n/**/\n    4366,\n/**/\n    4365,\n/**/\n    4364,\n/**/\n    4363,\n/**/\n    4362,\n/**/\n    4361,\n/**/\n    4360,\n/**/\n    4359,\n/**/\n    4358,\n/**/\n    4357,\n/**/\n    4356,\n/**/\n    4355,\n/**/\n    4354,\n/**/\n    4353,\n/**/\n    4352,\n/**/\n    4351,\n/**/\n    4350,\n/**/\n    4349,\n/**/\n    4348,\n/**/\n    4347,\n/**/\n    4346,\n/**/\n    4345,\n/**/\n    4344,\n/**/\n    4343,\n/**/\n    4342,\n/**/\n    4341,\n/**/\n    4340,\n/**/\n    4339,\n/**/\n    4338,\n/**/\n    4337,\n/**/\n    4336,\n/**/\n    4335,\n/**/\n    4334,\n/**/\n    4333,\n/**/\n    4332,\n/**/\n    4331,\n/**/\n    4330,\n/**/\n    4329,\n/**/\n    4328,\n/**/\n    4327,\n/**/\n    4326,\n/**/\n    4325,\n/**/\n    4324,\n/**/\n    4323,\n/**/\n    4322,\n/**/\n    4321,\n/**/\n    4320,\n/**/\n    4319,\n/**/\n    4318,\n/**/\n    4317,\n/**/\n    4316,\n/**/\n    4315,\n/**/\n    4314,\n/**/\n    4313,\n/**/\n    4312,\n/**/\n    4311,\n/**/\n    4310,\n/**/\n    4309,\n/**/\n    4308,\n/**/\n    4307,\n/**/\n    4306,\n/**/\n    4305,\n/**/\n    4304,\n/**/\n    4303,\n/**/\n    4302,\n/**/\n    4301,\n/**/\n    4300,\n/**/\n    4299,\n/**/\n    4298,\n/**/\n    4297,\n/**/\n    4296,\n/**/\n    4295,\n/**/\n    4294,\n/**/\n    4293,\n/**/\n    4292,\n/**/\n    4291,\n/**/\n    4290,\n/**/\n    4289,\n/**/\n    4288,\n/**/\n    4287,\n/**/\n    4286,\n/**/\n    4285,\n/**/\n    4284,\n/**/\n    4283,\n/**/\n    4282,\n/**/\n    4281,\n/**/\n    4280,\n/**/\n    4279,\n/**/\n    4278,\n/**/\n    4277,\n/**/\n    4276,\n/**/\n    4275,\n/**/\n    4274,\n/**/\n    4273,\n/**/\n    4272,\n/**/\n    4271,\n/**/\n    4270,\n/**/\n    4269,\n/**/\n    4268,\n/**/\n    4267,\n/**/\n    4266,\n/**/\n    4265,\n/**/\n    4264,\n/**/\n    4263,\n/**/\n    4262,\n/**/\n    4261,\n/**/\n    4260,\n/**/\n    4259,\n/**/\n    4258,\n/**/\n    4257,\n/**/\n    4256,\n/**/\n    4255,\n/**/\n    4254,\n/**/\n    4253,\n/**/\n    4252,\n/**/\n    4251,\n/**/\n    4250,\n/**/\n    4249,\n/**/\n    4248,\n/**/\n    4247,\n/**/\n    4246,\n/**/\n    4245,\n/**/\n    4244,\n/**/\n    4243,\n/**/\n    4242,\n/**/\n    4241,\n/**/\n    4240,\n/**/\n    4239,\n/**/\n    4238,\n/**/\n    4237,\n/**/\n    4236,\n/**/\n    4235,\n/**/\n    4234,\n/**/\n    4233,\n/**/\n    4232,\n/**/\n    4231,\n/**/\n    4230,\n/**/\n    4229,\n/**/\n    4228,\n/**/\n    4227,\n/**/\n    4226,\n/**/\n    4225,\n/**/\n    4224,\n/**/\n    4223,\n/**/\n    4222,\n/**/\n    4221,\n/**/\n    4220,\n/**/\n    4219,\n/**/\n    4218,\n/**/\n    4217,\n/**/\n    4216,\n/**/\n    4215,\n/**/\n    4214,\n/**/\n    4213,\n/**/\n    4212,\n/**/\n    4211,\n/**/\n    4210,\n/**/\n    4209,\n/**/\n    4208,\n/**/\n    4207,\n/**/\n    4206,\n/**/\n    4205,\n/**/\n    4204,\n/**/\n    4203,\n/**/\n    4202,\n/**/\n    4201,\n/**/\n    4200,\n/**/\n    4199,\n/**/\n    4198,\n/**/\n    4197,\n/**/\n    4196,\n/**/\n    4195,\n/**/\n    4194,\n/**/\n    4193,\n/**/\n    4192,\n/**/\n    4191,\n/**/\n    4190,\n/**/\n    4189,\n/**/\n    4188,\n/**/\n    4187,\n/**/\n    4186,\n/**/\n    4185,\n/**/\n    4184,\n/**/\n    4183,\n/**/\n    4182,\n/**/\n    4181,\n/**/\n    4180,\n/**/\n    4179,\n/**/\n    4178,\n/**/\n    4177,\n/**/\n    4176,\n/**/\n    4175,\n/**/\n    4174,\n/**/\n    4173,\n/**/\n    4172,\n/**/\n    4171,\n/**/\n    4170,\n/**/\n    4169,\n/**/\n    4168,\n/**/\n    4167,\n/**/\n    4166,\n/**/\n    4165,\n/**/\n    4164,\n/**/\n    4163,\n/**/\n    4162,\n/**/\n    4161,\n/**/\n    4160,\n/**/\n    4159,\n/**/\n    4158,\n/**/\n    4157,\n/**/\n    4156,\n/**/\n    4155,\n/**/\n    4154,\n/**/\n    4153,\n/**/\n    4152,\n/**/\n    4151,\n/**/\n    4150,\n/**/\n    4149,\n/**/\n    4148,\n/**/\n    4147,\n/**/\n    4146,\n/**/\n    4145,\n/**/\n    4144,\n/**/\n    4143,\n/**/\n    4142,\n/**/\n    4141,\n/**/\n    4140,\n/**/\n    4139,\n/**/\n    4138,\n/**/\n    4137,\n/**/\n    4136,\n/**/\n    4135,\n/**/\n    4134,\n/**/\n    4133,\n/**/\n    4132,\n/**/\n    4131,\n/**/\n    4130,\n/**/\n    4129,\n/**/\n    4128,\n/**/\n    4127,\n/**/\n    4126,\n/**/\n    4125,\n/**/\n    4124,\n/**/\n    4123,\n/**/\n    4122,\n/**/\n    4121,\n/**/\n    4120,\n/**/\n    4119,\n/**/\n    4118,\n/**/\n    4117,\n/**/\n    4116,\n/**/\n    4115,\n/**/\n    4114,\n/**/\n    4113,\n/**/\n    4112,\n/**/\n    4111,\n/**/\n    4110,\n/**/\n    4109,\n/**/\n    4108,\n/**/\n    4107,\n/**/\n    4106,\n/**/\n    4105,\n/**/\n    4104,\n/**/\n    4103,\n/**/\n    4102,\n/**/\n    4101,\n/**/\n    4100,\n/**/\n    4099,\n/**/\n    4098,\n/**/\n    4097,\n/**/\n    4096,\n/**/\n    4095,\n/**/\n    4094,\n/**/\n    4093,\n/**/\n    4092,\n/**/\n    4091,\n/**/\n    4090,\n/**/\n    4089,\n/**/\n    4088,\n/**/\n    4087,\n/**/\n    4086,\n/**/\n    4085,\n/**/\n    4084,\n/**/\n    4083,\n/**/\n    4082,\n/**/\n    4081,\n/**/\n    4080,\n/**/\n    4079,\n/**/\n    4078,\n/**/\n    4077,\n/**/\n    4076,\n/**/\n    4075,\n/**/\n    4074,\n/**/\n    4073,\n/**/\n    4072,\n/**/\n    4071,\n/**/\n    4070,\n/**/\n    4069,\n/**/\n    4068,\n/**/\n    4067,\n/**/\n    4066,\n/**/\n    4065,\n/**/\n    4064,\n/**/\n    4063,\n/**/\n    4062,\n/**/\n    4061,\n/**/\n    4060,\n/**/\n    4059,\n/**/\n    4058,\n/**/\n    4057,\n/**/\n    4056,\n/**/\n    4055,\n/**/\n    4054,\n/**/\n    4053,\n/**/\n    4052,\n/**/\n    4051,\n/**/\n    4050,\n/**/\n    4049,\n/**/\n    4048,\n/**/\n    4047,\n/**/\n    4046,\n/**/\n    4045,\n/**/\n    4044,\n/**/\n    4043,\n/**/\n    4042,\n/**/\n    4041,\n/**/\n    4040,\n/**/\n    4039,\n/**/\n    4038,\n/**/\n    4037,\n/**/\n    4036,\n/**/\n    4035,\n/**/\n    4034,\n/**/\n    4033,\n/**/\n    4032,\n/**/\n    4031,\n/**/\n    4030,\n/**/\n    4029,\n/**/\n    4028,\n/**/\n    4027,\n/**/\n    4026,\n/**/\n    4025,\n/**/\n    4024,\n/**/\n    4023,\n/**/\n    4022,\n/**/\n    4021,\n/**/\n    4020,\n/**/\n    4019,\n/**/\n    4018,\n/**/\n    4017,\n/**/\n    4016,\n/**/\n    4015,\n/**/\n    4014,\n/**/\n    4013,\n/**/\n    4012,\n/**/\n    4011,\n/**/\n    4010,\n/**/\n    4009,\n/**/\n    4008,\n/**/\n    4007,\n/**/\n    4006,\n/**/\n    4005,\n/**/\n    4004,\n/**/\n    4003,\n/**/\n    4002,\n/**/\n    4001,\n/**/\n    4000,\n/**/\n    3999,\n/**/\n    3998,\n/**/\n    3997,\n/**/\n    3996,\n/**/\n    3995,\n/**/\n    3994,\n/**/\n    3993,\n/**/\n    3992,\n/**/\n    3991,\n/**/\n    3990,\n/**/\n    3989,\n/**/\n    3988,\n/**/\n    3987,\n/**/\n    3986,\n/**/\n    3985,\n/**/\n    3984,\n/**/\n    3983,\n/**/\n    3982,\n/**/\n    3981,\n/**/\n    3980,\n/**/\n    3979,\n/**/\n    3978,\n/**/\n    3977,\n/**/\n    3976,\n/**/\n    3975,\n/**/\n    3974,\n/**/\n    3973,\n/**/\n    3972,\n/**/\n    3971,\n/**/\n    3970,\n/**/\n    3969,\n/**/\n    3968,\n/**/\n    3967,\n/**/\n    3966,\n/**/\n    3965,\n/**/\n    3964,\n/**/\n    3963,\n/**/\n    3962,\n/**/\n    3961,\n/**/\n    3960,\n/**/\n    3959,\n/**/\n    3958,\n/**/\n    3957,\n/**/\n    3956,\n/**/\n    3955,\n/**/\n    3954,\n/**/\n    3953,\n/**/\n    3952,\n/**/\n    3951,\n/**/\n    3950,\n/**/\n    3949,\n/**/\n    3948,\n/**/\n    3947,\n/**/\n    3946,\n/**/\n    3945,\n/**/\n    3944,\n/**/\n    3943,\n/**/\n    3942,\n/**/\n    3941,\n/**/\n    3940,\n/**/\n    3939,\n/**/\n    3938,\n/**/\n    3937,\n/**/\n    3936,\n/**/\n    3935,\n/**/\n    3934,\n/**/\n    3933,\n/**/\n    3932,\n/**/\n    3931,\n/**/\n    3930,\n/**/\n    3929,\n/**/\n    3928,\n/**/\n    3927,\n/**/\n    3926,\n/**/\n    3925,\n/**/\n    3924,\n/**/\n    3923,\n/**/\n    3922,\n/**/\n    3921,\n/**/\n    3920,\n/**/\n    3919,\n/**/\n    3918,\n/**/\n    3917,\n/**/\n    3916,\n/**/\n    3915,\n/**/\n    3914,\n/**/\n    3913,\n/**/\n    3912,\n/**/\n    3911,\n/**/\n    3910,\n/**/\n    3909,\n/**/\n    3908,\n/**/\n    3907,\n/**/\n    3906,\n/**/\n    3905,\n/**/\n    3904,\n/**/\n    3903,\n/**/\n    3902,\n/**/\n    3901,\n/**/\n    3900,\n/**/\n    3899,\n/**/\n    3898,\n/**/\n    3897,\n/**/\n    3896,\n/**/\n    3895,\n/**/\n    3894,\n/**/\n    3893,\n/**/\n    3892,\n/**/\n    3891,\n/**/\n    3890,\n/**/\n    3889,\n/**/\n    3888,\n/**/\n    3887,\n/**/\n    3886,\n/**/\n    3885,\n/**/\n    3884,\n/**/\n    3883,\n/**/\n    3882,\n/**/\n    3881,\n/**/\n    3880,\n/**/\n    3879,\n/**/\n    3878,\n/**/\n    3877,\n/**/\n    3876,\n/**/\n    3875,\n/**/\n    3874,\n/**/\n    3873,\n/**/\n    3872,\n/**/\n    3871,\n/**/\n    3870,\n/**/\n    3869,\n/**/\n    3868,\n/**/\n    3867,\n/**/\n    3866,\n/**/\n    3865,\n/**/\n    3864,\n/**/\n    3863,\n/**/\n    3862,\n/**/\n    3861,\n/**/\n    3860,\n/**/\n    3859,\n/**/\n    3858,\n/**/\n    3857,\n/**/\n    3856,\n/**/\n    3855,\n/**/\n    3854,\n/**/\n    3853,\n/**/\n    3852,\n/**/\n    3851,\n/**/\n    3850,\n/**/\n    3849,\n/**/\n    3848,\n/**/\n    3847,\n/**/\n    3846,\n/**/\n    3845,\n/**/\n    3844,\n/**/\n    3843,\n/**/\n    3842,\n/**/\n    3841,\n/**/\n    3840,\n/**/\n    3839,\n/**/\n    3838,\n/**/\n    3837,\n/**/\n    3836,\n/**/\n    3835,\n/**/\n    3834,\n/**/\n    3833,\n/**/\n    3832,\n/**/\n    3831,\n/**/\n    3830,\n/**/\n    3829,\n/**/\n    3828,\n/**/\n    3827,\n/**/\n    3826,\n/**/\n    3825,\n/**/\n    3824,\n/**/\n    3823,\n/**/\n    3822,\n/**/\n    3821,\n/**/\n    3820,\n/**/\n    3819,\n/**/\n    3818,\n/**/\n    3817,\n/**/\n    3816,\n/**/\n    3815,\n/**/\n    3814,\n/**/\n    3813,\n/**/\n    3812,\n/**/\n    3811,\n/**/\n    3810,\n/**/\n    3809,\n/**/\n    3808,\n/**/\n    3807,\n/**/\n    3806,\n/**/\n    3805,\n/**/\n    3804,\n/**/\n    3803,\n/**/\n    3802,\n/**/\n    3801,\n/**/\n    3800,\n/**/\n    3799,\n/**/\n    3798,\n/**/\n    3797,\n/**/\n    3796,\n/**/\n    3795,\n/**/\n    3794,\n/**/\n    3793,\n/**/\n    3792,\n/**/\n    3791,\n/**/\n    3790,\n/**/\n    3789,\n/**/\n    3788,\n/**/\n    3787,\n/**/\n    3786,\n/**/\n    3785,\n/**/\n    3784,\n/**/\n    3783,\n/**/\n    3782,\n/**/\n    3781,\n/**/\n    3780,\n/**/\n    3779,\n/**/\n    3778,\n/**/\n    3777,\n/**/\n    3776,\n/**/\n    3775,\n/**/\n    3774,\n/**/\n    3773,\n/**/\n    3772,\n/**/\n    3771,\n/**/\n    3770,\n/**/\n    3769,\n/**/\n    3768,\n/**/\n    3767,\n/**/\n    3766,\n/**/\n    3765,\n/**/\n    3764,\n/**/\n    3763,\n/**/\n    3762,\n/**/\n    3761,\n/**/\n    3760,\n/**/\n    3759,\n/**/\n    3758,\n/**/\n    3757,\n/**/\n    3756,\n/**/\n    3755,\n/**/\n    3754,\n/**/\n    3753,\n/**/\n    3752,\n/**/\n    3751,\n/**/\n    3750,\n/**/\n    3749,\n/**/\n    3748,\n/**/\n    3747,\n/**/\n    3746,\n/**/\n    3745,\n/**/\n    3744,\n/**/\n    3743,\n/**/\n    3742,\n/**/\n    3741,\n/**/\n    3740,\n/**/\n    3739,\n/**/\n    3738,\n/**/\n    3737,\n/**/\n    3736,\n/**/\n    3735,\n/**/\n    3734,\n/**/\n    3733,\n/**/\n    3732,\n/**/\n    3731,\n/**/\n    3730,\n/**/\n    3729,\n/**/\n    3728,\n/**/\n    3727,\n/**/\n    3726,\n/**/\n    3725,\n/**/\n    3724,\n/**/\n    3723,\n/**/\n    3722,\n/**/\n    3721,\n/**/\n    3720,\n/**/\n    3719,\n/**/\n    3718,\n/**/\n    3717,\n/**/\n    3716,\n/**/\n    3715,\n/**/\n    3714,\n/**/\n    3713,\n/**/\n    3712,\n/**/\n    3711,\n/**/\n    3710,\n/**/\n    3709,\n/**/\n    3708,\n/**/\n    3707,\n/**/\n    3706,\n/**/\n    3705,\n/**/\n    3704,\n/**/\n    3703,\n/**/\n    3702,\n/**/\n    3701,\n/**/\n    3700,\n/**/\n    3699,\n/**/\n    3698,\n/**/\n    3697,\n/**/\n    3696,\n/**/\n    3695,\n/**/\n    3694,\n/**/\n    3693,\n/**/\n    3692,\n/**/\n    3691,\n/**/\n    3690,\n/**/\n    3689,\n/**/\n    3688,\n/**/\n    3687,\n/**/\n    3686,\n/**/\n    3685,\n/**/\n    3684,\n/**/\n    3683,\n/**/\n    3682,\n/**/\n    3681,\n/**/\n    3680,\n/**/\n    3679,\n/**/\n    3678,\n/**/\n    3677,\n/**/\n    3676,\n/**/\n    3675,\n/**/\n    3674,\n/**/\n    3673,\n/**/\n    3672,\n/**/\n    3671,\n/**/\n    3670,\n/**/\n    3669,\n/**/\n    3668,\n/**/\n    3667,\n/**/\n    3666,\n/**/\n    3665,\n/**/\n    3664,\n/**/\n    3663,\n/**/\n    3662,\n/**/\n    3661,\n/**/\n    3660,\n/**/\n    3659,\n/**/\n    3658,\n/**/\n    3657,\n/**/\n    3656,\n/**/\n    3655,\n/**/\n    3654,\n/**/\n    3653,\n/**/\n    3652,\n/**/\n    3651,\n/**/\n    3650,\n/**/\n    3649,\n/**/\n    3648,\n/**/\n    3647,\n/**/\n    3646,\n/**/\n    3645,\n/**/\n    3644,\n/**/\n    3643,\n/**/\n    3642,\n/**/\n    3641,\n/**/\n    3640,\n/**/\n    3639,\n/**/\n    3638,\n/**/\n    3637,\n/**/\n    3636,\n/**/\n    3635,\n/**/\n    3634,\n/**/\n    3633,\n/**/\n    3632,\n/**/\n    3631,\n/**/\n    3630,\n/**/\n    3629,\n/**/\n    3628,\n/**/\n    3627,\n/**/\n    3626,\n/**/\n    3625,\n/**/\n    3624,\n/**/\n    3623,\n/**/\n    3622,\n/**/\n    3621,\n/**/\n    3620,\n/**/\n    3619,\n/**/\n    3618,\n/**/\n    3617,\n/**/\n    3616,\n/**/\n    3615,\n/**/\n    3614,\n/**/\n    3613,\n/**/\n    3612,\n/**/\n    3611,\n/**/\n    3610,\n/**/\n    3609,\n/**/\n    3608,\n/**/\n    3607,\n/**/\n    3606,\n/**/\n    3605,\n/**/\n    3604,\n/**/\n    3603,\n/**/\n    3602,\n/**/\n    3601,\n/**/\n    3600,\n/**/\n    3599,\n/**/\n    3598,\n/**/\n    3597,\n/**/\n    3596,\n/**/\n    3595,\n/**/\n    3594,\n/**/\n    3593,\n/**/\n    3592,\n/**/\n    3591,\n/**/\n    3590,\n/**/\n    3589,\n/**/\n    3588,\n/**/\n    3587,\n/**/\n    3586,\n/**/\n    3585,\n/**/\n    3584,\n/**/\n    3583,\n/**/\n    3582,\n/**/\n    3581,\n/**/\n    3580,\n/**/\n    3579,\n/**/\n    3578,\n/**/\n    3577,\n/**/\n    3576,\n/**/\n    3575,\n/**/\n    3574,\n/**/\n    3573,\n/**/\n    3572,\n/**/\n    3571,\n/**/\n    3570,\n/**/\n    3569,\n/**/\n    3568,\n/**/\n    3567,\n/**/\n    3566,\n/**/\n    3565,\n/**/\n    3564,\n/**/\n    3563,\n/**/\n    3562,\n/**/\n    3561,\n/**/\n    3560,\n/**/\n    3559,\n/**/\n    3558,\n/**/\n    3557,\n/**/\n    3556,\n/**/\n    3555,\n/**/\n    3554,\n/**/\n    3553,\n/**/\n    3552,\n/**/\n    3551,\n/**/\n    3550,\n/**/\n    3549,\n/**/\n    3548,\n/**/\n    3547,\n/**/\n    3546,\n/**/\n    3545,\n/**/\n    3544,\n/**/\n    3543,\n/**/\n    3542,\n/**/\n    3541,\n/**/\n    3540,\n/**/\n    3539,\n/**/\n    3538,\n/**/\n    3537,\n/**/\n    3536,\n/**/\n    3535,\n/**/\n    3534,\n/**/\n    3533,\n/**/\n    3532,\n/**/\n    3531,\n/**/\n    3530,\n/**/\n    3529,\n/**/\n    3528,\n/**/\n    3527,\n/**/\n    3526,\n/**/\n    3525,\n/**/\n    3524,\n/**/\n    3523,\n/**/\n    3522,\n/**/\n    3521,\n/**/\n    3520,\n/**/\n    3519,\n/**/\n    3518,\n/**/\n    3517,\n/**/\n    3516,\n/**/\n    3515,\n/**/\n    3514,\n/**/\n    3513,\n/**/\n    3512,\n/**/\n    3511,\n/**/\n    3510,\n/**/\n    3509,\n/**/\n    3508,\n/**/\n    3507,\n/**/\n    3506,\n/**/\n    3505,\n/**/\n    3504,\n/**/\n    3503,\n/**/\n    3502,\n/**/\n    3501,\n/**/\n    3500,\n/**/\n    3499,\n/**/\n    3498,\n/**/\n    3497,\n/**/\n    3496,\n/**/\n    3495,\n/**/\n    3494,\n/**/\n    3493,\n/**/\n    3492,\n/**/\n    3491,\n/**/\n    3490,\n/**/\n    3489,\n/**/\n    3488,\n/**/\n    3487,\n/**/\n    3486,\n/**/\n    3485,\n/**/\n    3484,\n/**/\n    3483,\n/**/\n    3482,\n/**/\n    3481,\n/**/\n    3480,\n/**/\n    3479,\n/**/\n    3478,\n/**/\n    3477,\n/**/\n    3476,\n/**/\n    3475,\n/**/\n    3474,\n/**/\n    3473,\n/**/\n    3472,\n/**/\n    3471,\n/**/\n    3470,\n/**/\n    3469,\n/**/\n    3468,\n/**/\n    3467,\n/**/\n    3466,\n/**/\n    3465,\n/**/\n    3464,\n/**/\n    3463,\n/**/\n    3462,\n/**/\n    3461,\n/**/\n    3460,\n/**/\n    3459,\n/**/\n    3458,\n/**/\n    3457,\n/**/\n    3456,\n/**/\n    3455,\n/**/\n    3454,\n/**/\n    3453,\n/**/\n    3452,\n/**/\n    3451,\n/**/\n    3450,\n/**/\n    3449,\n/**/\n    3448,\n/**/\n    3447,\n/**/\n    3446,\n/**/\n    3445,\n/**/\n    3444,\n/**/\n    3443,\n/**/\n    3442,\n/**/\n    3441,\n/**/\n    3440,\n/**/\n    3439,\n/**/\n    3438,\n/**/\n    3437,\n/**/\n    3436,\n/**/\n    3435,\n/**/\n    3434,\n/**/\n    3433,\n/**/\n    3432,\n/**/\n    3431,\n/**/\n    3430,\n/**/\n    3429,\n/**/\n    3428,\n/**/\n    3427,\n/**/\n    3426,\n/**/\n    3425,\n/**/\n    3424,\n/**/\n    3423,\n/**/\n    3422,\n/**/\n    3421,\n/**/\n    3420,\n/**/\n    3419,\n/**/\n    3418,\n/**/\n    3417,\n/**/\n    3416,\n/**/\n    3415,\n/**/\n    3414,\n/**/\n    3413,\n/**/\n    3412,\n/**/\n    3411,\n/**/\n    3410,\n/**/\n    3409,\n/**/\n    3408,\n/**/\n    3407,\n/**/\n    3406,\n/**/\n    3405,\n/**/\n    3404,\n/**/\n    3403,\n/**/\n    3402,\n/**/\n    3401,\n/**/\n    3400,\n/**/\n    3399,\n/**/\n    3398,\n/**/\n    3397,\n/**/\n    3396,\n/**/\n    3395,\n/**/\n    3394,\n/**/\n    3393,\n/**/\n    3392,\n/**/\n    3391,\n/**/\n    3390,\n/**/\n    3389,\n/**/\n    3388,\n/**/\n    3387,\n/**/\n    3386,\n/**/\n    3385,\n/**/\n    3384,\n/**/\n    3383,\n/**/\n    3382,\n/**/\n    3381,\n/**/\n    3380,\n/**/\n    3379,\n/**/\n    3378,\n/**/\n    3377,\n/**/\n    3376,\n/**/\n    3375,\n/**/\n    3374,\n/**/\n    3373,\n/**/\n    3372,\n/**/\n    3371,\n/**/\n    3370,\n/**/\n    3369,\n/**/\n    3368,\n/**/\n    3367,\n/**/\n    3366,\n/**/\n    3365,\n/**/\n    3364,\n/**/\n    3363,\n/**/\n    3362,\n/**/\n    3361,\n/**/\n    3360,\n/**/\n    3359,\n/**/\n    3358,\n/**/\n    3357,\n/**/\n    3356,\n/**/\n    3355,\n/**/\n    3354,\n/**/\n    3353,\n/**/\n    3352,\n/**/\n    3351,\n/**/\n    3350,\n/**/\n    3349,\n/**/\n    3348,\n/**/\n    3347,\n/**/\n    3346,\n/**/\n    3345,\n/**/\n    3344,\n/**/\n    3343,\n/**/\n    3342,\n/**/\n    3341,\n/**/\n    3340,\n/**/\n    3339,\n/**/\n    3338,\n/**/\n    3337,\n/**/\n    3336,\n/**/\n    3335,\n/**/\n    3334,\n/**/\n    3333,\n/**/\n    3332,\n/**/\n    3331,\n/**/\n    3330,\n/**/\n    3329,\n/**/\n    3328,\n/**/\n    3327,\n/**/\n    3326,\n/**/\n    3325,\n/**/\n    3324,\n/**/\n    3323,\n/**/\n    3322,\n/**/\n    3321,\n/**/\n    3320,\n/**/\n    3319,\n/**/\n    3318,\n/**/\n    3317,\n/**/\n    3316,\n/**/\n    3315,\n/**/\n    3314,\n/**/\n    3313,\n/**/\n    3312,\n/**/\n    3311,\n/**/\n    3310,\n/**/\n    3309,\n/**/\n    3308,\n/**/\n    3307,\n/**/\n    3306,\n/**/\n    3305,\n/**/\n    3304,\n/**/\n    3303,\n/**/\n    3302,\n/**/\n    3301,\n/**/\n    3300,\n/**/\n    3299,\n/**/\n    3298,\n/**/\n    3297,\n/**/\n    3296,\n/**/\n    3295,\n/**/\n    3294,\n/**/\n    3293,\n/**/\n    3292,\n/**/\n    3291,\n/**/\n    3290,\n/**/\n    3289,\n/**/\n    3288,\n/**/\n    3287,\n/**/\n    3286,\n/**/\n    3285,\n/**/\n    3284,\n/**/\n    3283,\n/**/\n    3282,\n/**/\n    3281,\n/**/\n    3280,\n/**/\n    3279,\n/**/\n    3278,\n/**/\n    3277,\n/**/\n    3276,\n/**/\n    3275,\n/**/\n    3274,\n/**/\n    3273,\n/**/\n    3272,\n/**/\n    3271,\n/**/\n    3270,\n/**/\n    3269,\n/**/\n    3268,\n/**/\n    3267,\n/**/\n    3266,\n/**/\n    3265,\n/**/\n    3264,\n/**/\n    3263,\n/**/\n    3262,\n/**/\n    3261,\n/**/\n    3260,\n/**/\n    3259,\n/**/\n    3258,\n/**/\n    3257,\n/**/\n    3256,\n/**/\n    3255,\n/**/\n    3254,\n/**/\n    3253,\n/**/\n    3252,\n/**/\n    3251,\n/**/\n    3250,\n/**/\n    3249,\n/**/\n    3248,\n/**/\n    3247,\n/**/\n    3246,\n/**/\n    3245,\n/**/\n    3244,\n/**/\n    3243,\n/**/\n    3242,\n/**/\n    3241,\n/**/\n    3240,\n/**/\n    3239,\n/**/\n    3238,\n/**/\n    3237,\n/**/\n    3236,\n/**/\n    3235,\n/**/\n    3234,\n/**/\n    3233,\n/**/\n    3232,\n/**/\n    3231,\n/**/\n    3230,\n/**/\n    3229,\n/**/\n    3228,\n/**/\n    3227,\n/**/\n    3226,\n/**/\n    3225,\n/**/\n    3224,\n/**/\n    3223,\n/**/\n    3222,\n/**/\n    3221,\n/**/\n    3220,\n/**/\n    3219,\n/**/\n    3218,\n/**/\n    3217,\n/**/\n    3216,\n/**/\n    3215,\n/**/\n    3214,\n/**/\n    3213,\n/**/\n    3212,\n/**/\n    3211,\n/**/\n    3210,\n/**/\n    3209,\n/**/\n    3208,\n/**/\n    3207,\n/**/\n    3206,\n/**/\n    3205,\n/**/\n    3204,\n/**/\n    3203,\n/**/\n    3202,\n/**/\n    3201,\n/**/\n    3200,\n/**/\n    3199,\n/**/\n    3198,\n/**/\n    3197,\n/**/\n    3196,\n/**/\n    3195,\n/**/\n    3194,\n/**/\n    3193,\n/**/\n    3192,\n/**/\n    3191,\n/**/\n    3190,\n/**/\n    3189,\n/**/\n    3188,\n/**/\n    3187,\n/**/\n    3186,\n/**/\n    3185,\n/**/\n    3184,\n/**/\n    3183,\n/**/\n    3182,\n/**/\n    3181,\n/**/\n    3180,\n/**/\n    3179,\n/**/\n    3178,\n/**/\n    3177,\n/**/\n    3176,\n/**/\n    3175,\n/**/\n    3174,\n/**/\n    3173,\n/**/\n    3172,\n/**/\n    3171,\n/**/\n    3170,\n/**/\n    3169,\n/**/\n    3168,\n/**/\n    3167,\n/**/\n    3166,\n/**/\n    3165,\n/**/\n    3164,\n/**/\n    3163,\n/**/\n    3162,\n/**/\n    3161,\n/**/\n    3160,\n/**/\n    3159,\n/**/\n    3158,\n/**/\n    3157,\n/**/\n    3156,\n/**/\n    3155,\n/**/\n    3154,\n/**/\n    3153,\n/**/\n    3152,\n/**/\n    3151,\n/**/\n    3150,\n/**/\n    3149,\n/**/\n    3148,\n/**/\n    3147,\n/**/\n    3146,\n/**/\n    3145,\n/**/\n    3144,\n/**/\n    3143,\n/**/\n    3142,\n/**/\n    3141,\n/**/\n    3140,\n/**/\n    3139,\n/**/\n    3138,\n/**/\n    3137,\n/**/\n    3136,\n/**/\n    3135,\n/**/\n    3134,\n/**/\n    3133,\n/**/\n    3132,\n/**/\n    3131,\n/**/\n    3130,\n/**/\n    3129,\n/**/\n    3128,\n/**/\n    3127,\n/**/\n    3126,\n/**/\n    3125,\n/**/\n    3124,\n/**/\n    3123,\n/**/\n    3122,\n/**/\n    3121,\n/**/\n    3120,\n/**/\n    3119,\n/**/\n    3118,\n/**/\n    3117,\n/**/\n    3116,\n/**/\n    3115,\n/**/\n    3114,\n/**/\n    3113,\n/**/\n    3112,\n/**/\n    3111,\n/**/\n    3110,\n/**/\n    3109,\n/**/\n    3108,\n/**/\n    3107,\n/**/\n    3106,\n/**/\n    3105,\n/**/\n    3104,\n/**/\n    3103,\n/**/\n    3102,\n/**/\n    3101,\n/**/\n    3100,\n/**/\n    3099,\n/**/\n    3098,\n/**/\n    3097,\n/**/\n    3096,\n/**/\n    3095,\n/**/\n    3094,\n/**/\n    3093,\n/**/\n    3092,\n/**/\n    3091,\n/**/\n    3090,\n/**/\n    3089,\n/**/\n    3088,\n/**/\n    3087,\n/**/\n    3086,\n/**/\n    3085,\n/**/\n    3084,\n/**/\n    3083,\n/**/\n    3082,\n/**/\n    3081,\n/**/\n    3080,\n/**/\n    3079,\n/**/\n    3078,\n/**/\n    3077,\n/**/\n    3076,\n/**/\n    3075,\n/**/\n    3074,\n/**/\n    3073,\n/**/\n    3072,\n/**/\n    3071,\n/**/\n    3070,\n/**/\n    3069,\n/**/\n    3068,\n/**/\n    3067,\n/**/\n    3066,\n/**/\n    3065,\n/**/\n    3064,\n/**/\n    3063,\n/**/\n    3062,\n/**/\n    3061,\n/**/\n    3060,\n/**/\n    3059,\n/**/\n    3058,\n/**/\n    3057,\n/**/\n    3056,\n/**/\n    3055,\n/**/\n    3054,\n/**/\n    3053,\n/**/\n    3052,\n/**/\n    3051,\n/**/\n    3050,\n/**/\n    3049,\n/**/\n    3048,\n/**/\n    3047,\n/**/\n    3046,\n/**/\n    3045,\n/**/\n    3044,\n/**/\n    3043,\n/**/\n    3042,\n/**/\n    3041,\n/**/\n    3040,\n/**/\n    3039,\n/**/\n    3038,\n/**/\n    3037,\n/**/\n    3036,\n/**/\n    3035,\n/**/\n    3034,\n/**/\n    3033,\n/**/\n    3032,\n/**/\n    3031,\n/**/\n    3030,\n/**/\n    3029,\n/**/\n    3028,\n/**/\n    3027,\n/**/\n    3026,\n/**/\n    3025,\n/**/\n    3024,\n/**/\n    3023,\n/**/\n    3022,\n/**/\n    3021,\n/**/\n    3020,\n/**/\n    3019,\n/**/\n    3018,\n/**/\n    3017,\n/**/\n    3016,\n/**/\n    3015,\n/**/\n    3014,\n/**/\n    3013,\n/**/\n    3012,\n/**/\n    3011,\n/**/\n    3010,\n/**/\n    3009,\n/**/\n    3008,\n/**/\n    3007,\n/**/\n    3006,\n/**/\n    3005,\n/**/\n    3004,\n/**/\n    3003,\n/**/\n    3002,\n/**/\n    3001,\n/**/\n    3000,\n/**/\n    2999,\n/**/\n    2998,\n/**/\n    2997,\n/**/\n    2996,\n/**/\n    2995,\n/**/\n    2994,\n/**/\n    2993,\n/**/\n    2992,\n/**/\n    2991,\n/**/\n    2990,\n/**/\n    2989,\n/**/\n    2988,\n/**/\n    2987,\n/**/\n    2986,\n/**/\n    2985,\n/**/\n    2984,\n/**/\n    2983,\n/**/\n    2982,\n/**/\n    2981,\n/**/\n    2980,\n/**/\n    2979,\n/**/\n    2978,\n/**/\n    2977,\n/**/\n    2976,\n/**/\n    2975,\n/**/\n    2974,\n/**/\n    2973,\n/**/\n    2972,\n/**/\n    2971,\n/**/\n    2970,\n/**/\n    2969,\n/**/\n    2968,\n/**/\n    2967,\n/**/\n    2966,\n/**/\n    2965,\n/**/\n    2964,\n/**/\n    2963,\n/**/\n    2962,\n/**/\n    2961,\n/**/\n    2960,\n/**/\n    2959,\n/**/\n    2958,\n/**/\n    2957,\n/**/\n    2956,\n/**/\n    2955,\n/**/\n    2954,\n/**/\n    2953,\n/**/\n    2952,\n/**/\n    2951,\n/**/\n    2950,\n/**/\n    2949,\n/**/\n    2948,\n/**/\n    2947,\n/**/\n    2946,\n/**/\n    2945,\n/**/\n    2944,\n/**/\n    2943,\n/**/\n    2942,\n/**/\n    2941,\n/**/\n    2940,\n/**/\n    2939,\n/**/\n    2938,\n/**/\n    2937,\n/**/\n    2936,\n/**/\n    2935,\n/**/\n    2934,\n/**/\n    2933,\n/**/\n    2932,\n/**/\n    2931,\n/**/\n    2930,\n/**/\n    2929,\n/**/\n    2928,\n/**/\n    2927,\n/**/\n    2926,\n/**/\n    2925,\n/**/\n    2924,\n/**/\n    2923,\n/**/\n    2922,\n/**/\n    2921,\n/**/\n    2920,\n/**/\n    2919,\n/**/\n    2918,\n/**/\n    2917,\n/**/\n    2916,\n/**/\n    2915,\n/**/\n    2914,\n/**/\n    2913,\n/**/\n    2912,\n/**/\n    2911,\n/**/\n    2910,\n/**/\n    2909,\n/**/\n    2908,\n/**/\n    2907,\n/**/\n    2906,\n/**/\n    2905,\n/**/\n    2904,\n/**/\n    2903,\n/**/\n    2902,\n/**/\n    2901,\n/**/\n    2900,\n/**/\n    2899,\n/**/\n    2898,\n/**/\n    2897,\n/**/\n    2896,\n/**/\n    2895,\n/**/\n    2894,\n/**/\n    2893,\n/**/\n    2892,\n/**/\n    2891,\n/**/\n    2890,\n/**/\n    2889,\n/**/\n    2888,\n/**/\n    2887,\n/**/\n    2886,\n/**/\n    2885,\n/**/\n    2884,\n/**/\n    2883,\n/**/\n    2882,\n/**/\n    2881,\n/**/\n    2880,\n/**/\n    2879,\n/**/\n    2878,\n/**/\n    2877,\n/**/\n    2876,\n/**/\n    2875,\n/**/\n    2874,\n/**/\n    2873,\n/**/\n    2872,\n/**/\n    2871,\n/**/\n    2870,\n/**/\n    2869,\n/**/\n    2868,\n/**/\n    2867,\n/**/\n    2866,\n/**/\n    2865,\n/**/\n    2864,\n/**/\n    2863,\n/**/\n    2862,\n/**/\n    2861,\n/**/\n    2860,\n/**/\n    2859,\n/**/\n    2858,\n/**/\n    2857,\n/**/\n    2856,\n/**/\n    2855,\n/**/\n    2854,\n/**/\n    2853,\n/**/\n    2852,\n/**/\n    2851,\n/**/\n    2850,\n/**/\n    2849,\n/**/\n    2848,\n/**/\n    2847,\n/**/\n    2846,\n/**/\n    2845,\n/**/\n    2844,\n/**/\n    2843,\n/**/\n    2842,\n/**/\n    2841,\n/**/\n    2840,\n/**/\n    2839,\n/**/\n    2838,\n/**/\n    2837,\n/**/\n    2836,\n/**/\n    2835,\n/**/\n    2834,\n/**/\n    2833,\n/**/\n    2832,\n/**/\n    2831,\n/**/\n    2830,\n/**/\n    2829,\n/**/\n    2828,\n/**/\n    2827,\n/**/\n    2826,\n/**/\n    2825,\n/**/\n    2824,\n/**/\n    2823,\n/**/\n    2822,\n/**/\n    2821,\n/**/\n    2820,\n/**/\n    2819,\n/**/\n    2818,\n/**/\n    2817,\n/**/\n    2816,\n/**/\n    2815,\n/**/\n    2814,\n/**/\n    2813,\n/**/\n    2812,\n/**/\n    2811,\n/**/\n    2810,\n/**/\n    2809,\n/**/\n    2808,\n/**/\n    2807,\n/**/\n    2806,\n/**/\n    2805,\n/**/\n    2804,\n/**/\n    2803,\n/**/\n    2802,\n/**/\n    2801,\n/**/\n    2800,\n/**/\n    2799,\n/**/\n    2798,\n/**/\n    2797,\n/**/\n    2796,\n/**/\n    2795,\n/**/\n    2794,\n/**/\n    2793,\n/**/\n    2792,\n/**/\n    2791,\n/**/\n    2790,\n/**/\n    2789,\n/**/\n    2788,\n/**/\n    2787,\n/**/\n    2786,\n/**/\n    2785,\n/**/\n    2784,\n/**/\n    2783,\n/**/\n    2782,\n/**/\n    2781,\n/**/\n    2780,\n/**/\n    2779,\n/**/\n    2778,\n/**/\n    2777,\n/**/\n    2776,\n/**/\n    2775,\n/**/\n    2774,\n/**/\n    2773,\n/**/\n    2772,\n/**/\n    2771,\n/**/\n    2770,\n/**/\n    2769,\n/**/\n    2768,\n/**/\n    2767,\n/**/\n    2766,\n/**/\n    2765,\n/**/\n    2764,\n/**/\n    2763,\n/**/\n    2762,\n/**/\n    2761,\n/**/\n    2760,\n/**/\n    2759,\n/**/\n    2758,\n/**/\n    2757,\n/**/\n    2756,\n/**/\n    2755,\n/**/\n    2754,\n/**/\n    2753,\n/**/\n    2752,\n/**/\n    2751,\n/**/\n    2750,\n/**/\n    2749,\n/**/\n    2748,\n/**/\n    2747,\n/**/\n    2746,\n/**/\n    2745,\n/**/\n    2744,\n/**/\n    2743,\n/**/\n    2742,\n/**/\n    2741,\n/**/\n    2740,\n/**/\n    2739,\n/**/\n    2738,\n/**/\n    2737,\n/**/\n    2736,\n/**/\n    2735,\n/**/\n    2734,\n/**/\n    2733,\n/**/\n    2732,\n/**/\n    2731,\n/**/\n    2730,\n/**/\n    2729,\n/**/\n    2728,\n/**/\n    2727,\n/**/\n    2726,\n/**/\n    2725,\n/**/\n    2724,\n/**/\n    2723,\n/**/\n    2722,\n/**/\n    2721,\n/**/\n    2720,\n/**/\n    2719,\n/**/\n    2718,\n/**/\n    2717,\n/**/\n    2716,\n/**/\n    2715,\n/**/\n    2714,\n/**/\n    2713,\n/**/\n    2712,\n/**/\n    2711,\n/**/\n    2710,\n/**/\n    2709,\n/**/\n    2708,\n/**/\n    2707,\n/**/\n    2706,\n/**/\n    2705,\n/**/\n    2704,\n/**/\n    2703,\n/**/\n    2702,\n/**/\n    2701,\n/**/\n    2700,\n/**/\n    2699,\n/**/\n    2698,\n/**/\n    2697,\n/**/\n    2696,\n/**/\n    2695,\n/**/\n    2694,\n/**/\n    2693,\n/**/\n    2692,\n/**/\n    2691,\n/**/\n    2690,\n/**/\n    2689,\n/**/\n    2688,\n/**/\n    2687,\n/**/\n    2686,\n/**/\n    2685,\n/**/\n    2684,\n/**/\n    2683,\n/**/\n    2682,\n/**/\n    2681,\n/**/\n    2680,\n/**/\n    2679,\n/**/\n    2678,\n/**/\n    2677,\n/**/\n    2676,\n/**/\n    2675,\n/**/\n    2674,\n/**/\n    2673,\n/**/\n    2672,\n/**/\n    2671,\n/**/\n    2670,\n/**/\n    2669,\n/**/\n    2668,\n/**/\n    2667,\n/**/\n    2666,\n/**/\n    2665,\n/**/\n    2664,\n/**/\n    2663,\n/**/\n    2662,\n/**/\n    2661,\n/**/\n    2660,\n/**/\n    2659,\n/**/\n    2658,\n/**/\n    2657,\n/**/\n    2656,\n/**/\n    2655,\n/**/\n    2654,\n/**/\n    2653,\n/**/\n    2652,\n/**/\n    2651,\n/**/\n    2650,\n/**/\n    2649,\n/**/\n    2648,\n/**/\n    2647,\n/**/\n    2646,\n/**/\n    2645,\n/**/\n    2644,\n/**/\n    2643,\n/**/\n    2642,\n/**/\n    2641,\n/**/\n    2640,\n/**/\n    2639,\n/**/\n    2638,\n/**/\n    2637,\n/**/\n    2636,\n/**/\n    2635,\n/**/\n    2634,\n/**/\n    2633,\n/**/\n    2632,\n/**/\n    2631,\n/**/\n    2630,\n/**/\n    2629,\n/**/\n    2628,\n/**/\n    2627,\n/**/\n    2626,\n/**/\n    2625,\n/**/\n    2624,\n/**/\n    2623,\n/**/\n    2622,\n/**/\n    2621,\n/**/\n    2620,\n/**/\n    2619,\n/**/\n    2618,\n/**/\n    2617,\n/**/\n    2616,\n/**/\n    2615,\n/**/\n    2614,\n/**/\n    2613,\n/**/\n    2612,\n/**/\n    2611,\n/**/\n    2610,\n/**/\n    2609,\n/**/\n    2608,\n/**/\n    2607,\n/**/\n    2606,\n/**/\n    2605,\n/**/\n    2604,\n/**/\n    2603,\n/**/\n    2602,\n/**/\n    2601,\n/**/\n    2600,\n/**/\n    2599,\n/**/\n    2598,\n/**/\n    2597,\n/**/\n    2596,\n/**/\n    2595,\n/**/\n    2594,\n/**/\n    2593,\n/**/\n    2592,\n/**/\n    2591,\n/**/\n    2590,\n/**/\n    2589,\n/**/\n    2588,\n/**/\n    2587,\n/**/\n    2586,\n/**/\n    2585,\n/**/\n    2584,\n/**/\n    2583,\n/**/\n    2582,\n/**/\n    2581,\n/**/\n    2580,\n/**/\n    2579,\n/**/\n    2578,\n/**/\n    2577,\n/**/\n    2576,\n/**/\n    2575,\n/**/\n    2574,\n/**/\n    2573,\n/**/\n    2572,\n/**/\n    2571,\n/**/\n    2570,\n/**/\n    2569,\n/**/\n    2568,\n/**/\n    2567,\n/**/\n    2566,\n/**/\n    2565,\n/**/\n    2564,\n/**/\n    2563,\n/**/\n    2562,\n/**/\n    2561,\n/**/\n    2560,\n/**/\n    2559,\n/**/\n    2558,\n/**/\n    2557,\n/**/\n    2556,\n/**/\n    2555,\n/**/\n    2554,\n/**/\n    2553,\n/**/\n    2552,\n/**/\n    2551,\n/**/\n    2550,\n/**/\n    2549,\n/**/\n    2548,\n/**/\n    2547,\n/**/\n    2546,\n/**/\n    2545,\n/**/\n    2544,\n/**/\n    2543,\n/**/\n    2542,\n/**/\n    2541,\n/**/\n    2540,\n/**/\n    2539,\n/**/\n    2538,\n/**/\n    2537,\n/**/\n    2536,\n/**/\n    2535,\n/**/\n    2534,\n/**/\n    2533,\n/**/\n    2532,\n/**/\n    2531,\n/**/\n    2530,\n/**/\n    2529,\n/**/\n    2528,\n/**/\n    2527,\n/**/\n    2526,\n/**/\n    2525,\n/**/\n    2524,\n/**/\n    2523,\n/**/\n    2522,\n/**/\n    2521,\n/**/\n    2520,\n/**/\n    2519,\n/**/\n    2518,\n/**/\n    2517,\n/**/\n    2516,\n/**/\n    2515,\n/**/\n    2514,\n/**/\n    2513,\n/**/\n    2512,\n/**/\n    2511,\n/**/\n    2510,\n/**/\n    2509,\n/**/\n    2508,\n/**/\n    2507,\n/**/\n    2506,\n/**/\n    2505,\n/**/\n    2504,\n/**/\n    2503,\n/**/\n    2502,\n/**/\n    2501,\n/**/\n    2500,\n/**/\n    2499,\n/**/\n    2498,\n/**/\n    2497,\n/**/\n    2496,\n/**/\n    2495,\n/**/\n    2494,\n/**/\n    2493,\n/**/\n    2492,\n/**/\n    2491,\n/**/\n    2490,\n/**/\n    2489,\n/**/\n    2488,\n/**/\n    2487,\n/**/\n    2486,\n/**/\n    2485,\n/**/\n    2484,\n/**/\n    2483,\n/**/\n    2482,\n/**/\n    2481,\n/**/\n    2480,\n/**/\n    2479,\n/**/\n    2478,\n/**/\n    2477,\n/**/\n    2476,\n/**/\n    2475,\n/**/\n    2474,\n/**/\n    2473,\n/**/\n    2472,\n/**/\n    2471,\n/**/\n    2470,\n/**/\n    2469,\n/**/\n    2468,\n/**/\n    2467,\n/**/\n    2466,\n/**/\n    2465,\n/**/\n    2464,\n/**/\n    2463,\n/**/\n    2462,\n/**/\n    2461,\n/**/\n    2460,\n/**/\n    2459,\n/**/\n    2458,\n/**/\n    2457,\n/**/\n    2456,\n/**/\n    2455,\n/**/\n    2454,\n/**/\n    2453,\n/**/\n    2452,\n/**/\n    2451,\n/**/\n    2450,\n/**/\n    2449,\n/**/\n    2448,\n/**/\n    2447,\n/**/\n    2446,\n/**/\n    2445,\n/**/\n    2444,\n/**/\n    2443,\n/**/\n    2442,\n/**/\n    2441,\n/**/\n    2440,\n/**/\n    2439,\n/**/\n    2438,\n/**/\n    2437,\n/**/\n    2436,\n/**/\n    2435,\n/**/\n    2434,\n/**/\n    2433,\n/**/\n    2432,\n/**/\n    2431,\n/**/\n    2430,\n/**/\n    2429,\n/**/\n    2428,\n/**/\n    2427,\n/**/\n    2426,\n/**/\n    2425,\n/**/\n    2424,\n/**/\n    2423,\n/**/\n    2422,\n/**/\n    2421,\n/**/\n    2420,\n/**/\n    2419,\n/**/\n    2418,\n/**/\n    2417,\n/**/\n    2416,\n/**/\n    2415,\n/**/\n    2414,\n/**/\n    2413,\n/**/\n    2412,\n/**/\n    2411,\n/**/\n    2410,\n/**/\n    2409,\n/**/\n    2408,\n/**/\n    2407,\n/**/\n    2406,\n/**/\n    2405,\n/**/\n    2404,\n/**/\n    2403,\n/**/\n    2402,\n/**/\n    2401,\n/**/\n    2400,\n/**/\n    2399,\n/**/\n    2398,\n/**/\n    2397,\n/**/\n    2396,\n/**/\n    2395,\n/**/\n    2394,\n/**/\n    2393,\n/**/\n    2392,\n/**/\n    2391,\n/**/\n    2390,\n/**/\n    2389,\n/**/\n    2388,\n/**/\n    2387,\n/**/\n    2386,\n/**/\n    2385,\n/**/\n    2384,\n/**/\n    2383,\n/**/\n    2382,\n/**/\n    2381,\n/**/\n    2380,\n/**/\n    2379,\n/**/\n    2378,\n/**/\n    2377,\n/**/\n    2376,\n/**/\n    2375,\n/**/\n    2374,\n/**/\n    2373,\n/**/\n    2372,\n/**/\n    2371,\n/**/\n    2370,\n/**/\n    2369,\n/**/\n    2368,\n/**/\n    2367,\n/**/\n    2366,\n/**/\n    2365,\n/**/\n    2364,\n/**/\n    2363,\n/**/\n    2362,\n/**/\n    2361,\n/**/\n    2360,\n/**/\n    2359,\n/**/\n    2358,\n/**/\n    2357,\n/**/\n    2356,\n/**/\n    2355,\n/**/\n    2354,\n/**/\n    2353,\n/**/\n    2352,\n/**/\n    2351,\n/**/\n    2350,\n/**/\n    2349,\n/**/\n    2348,\n/**/\n    2347,\n/**/\n    2346,\n/**/\n    2345,\n/**/\n    2344,\n/**/\n    2343,\n/**/\n    2342,\n/**/\n    2341,\n/**/\n    2340,\n/**/\n    2339,\n/**/\n    2338,\n/**/\n    2337,\n/**/\n    2336,\n/**/\n    2335,\n/**/\n    2334,\n/**/\n    2333,\n/**/\n    2332,\n/**/\n    2331,\n/**/\n    2330,\n/**/\n    2329,\n/**/\n    2328,\n/**/\n    2327,\n/**/\n    2326,\n/**/\n    2325,\n/**/\n    2324,\n/**/\n    2323,\n/**/\n    2322,\n/**/\n    2321,\n/**/\n    2320,\n/**/\n    2319,\n/**/\n    2318,\n/**/\n    2317,\n/**/\n    2316,\n/**/\n    2315,\n/**/\n    2314,\n/**/\n    2313,\n/**/\n    2312,\n/**/\n    2311,\n/**/\n    2310,\n/**/\n    2309,\n/**/\n    2308,\n/**/\n    2307,\n/**/\n    2306,\n/**/\n    2305,\n/**/\n    2304,\n/**/\n    2303,\n/**/\n    2302,\n/**/\n    2301,\n/**/\n    2300,\n/**/\n    2299,\n/**/\n    2298,\n/**/\n    2297,\n/**/\n    2296,\n/**/\n    2295,\n/**/\n    2294,\n/**/\n    2293,\n/**/\n    2292,\n/**/\n    2291,\n/**/\n    2290,\n/**/\n    2289,\n/**/\n    2288,\n/**/\n    2287,\n/**/\n    2286,\n/**/\n    2285,\n/**/\n    2284,\n/**/\n    2283,\n/**/\n    2282,\n/**/\n    2281,\n/**/\n    2280,\n/**/\n    2279,\n/**/\n    2278,\n/**/\n    2277,\n/**/\n    2276,\n/**/\n    2275,\n/**/\n    2274,\n/**/\n    2273,\n/**/\n    2272,\n/**/\n    2271,\n/**/\n    2270,\n/**/\n    2269,\n/**/\n    2268,\n/**/\n    2267,\n/**/\n    2266,\n/**/\n    2265,\n/**/\n    2264,\n/**/\n    2263,\n/**/\n    2262,\n/**/\n    2261,\n/**/\n    2260,\n/**/\n    2259,\n/**/\n    2258,\n/**/\n    2257,\n/**/\n    2256,\n/**/\n    2255,\n/**/\n    2254,\n/**/\n    2253,\n/**/\n    2252,\n/**/\n    2251,\n/**/\n    2250,\n/**/\n    2249,\n/**/\n    2248,\n/**/\n    2247,\n/**/\n    2246,\n/**/\n    2245,\n/**/\n    2244,\n/**/\n    2243,\n/**/\n    2242,\n/**/\n    2241,\n/**/\n    2240,\n/**/\n    2239,\n/**/\n    2238,\n/**/\n    2237,\n/**/\n    2236,\n/**/\n    2235,\n/**/\n    2234,\n/**/\n    2233,\n/**/\n    2232,\n/**/\n    2231,\n/**/\n    2230,\n/**/\n    2229,\n/**/\n    2228,\n/**/\n    2227,\n/**/\n    2226,\n/**/\n    2225,\n/**/\n    2224,\n/**/\n    2223,\n/**/\n    2222,\n/**/\n    2221,\n/**/\n    2220,\n/**/\n    2219,\n/**/\n    2218,\n/**/\n    2217,\n/**/\n    2216,\n/**/\n    2215,\n/**/\n    2214,\n/**/\n    2213,\n/**/\n    2212,\n/**/\n    2211,\n/**/\n    2210,\n/**/\n    2209,\n/**/\n    2208,\n/**/\n    2207,\n/**/\n    2206,\n/**/\n    2205,\n/**/\n    2204,\n/**/\n    2203,\n/**/\n    2202,\n/**/\n    2201,\n/**/\n    2200,\n/**/\n    2199,\n/**/\n    2198,\n/**/\n    2197,\n/**/\n    2196,\n/**/\n    2195,\n/**/\n    2194,\n/**/\n    2193,\n/**/\n    2192,\n/**/\n    2191,\n/**/\n    2190,\n/**/\n    2189,\n/**/\n    2188,\n/**/\n    2187,\n/**/\n    2186,\n/**/\n    2185,\n/**/\n    2184,\n/**/\n    2183,\n/**/\n    2182,\n/**/\n    2181,\n/**/\n    2180,\n/**/\n    2179,\n/**/\n    2178,\n/**/\n    2177,\n/**/\n    2176,\n/**/\n    2175,\n/**/\n    2174,\n/**/\n    2173,\n/**/\n    2172,\n/**/\n    2171,\n/**/\n    2170,\n/**/\n    2169,\n/**/\n    2168,\n/**/\n    2167,\n/**/\n    2166,\n/**/\n    2165,\n/**/\n    2164,\n/**/\n    2163,\n/**/\n    2162,\n/**/\n    2161,\n/**/\n    2160,\n/**/\n    2159,\n/**/\n    2158,\n/**/\n    2157,\n/**/\n    2156,\n/**/\n    2155,\n/**/\n    2154,\n/**/\n    2153,\n/**/\n    2152,\n/**/\n    2151,\n/**/\n    2150,\n/**/\n    2149,\n/**/\n    2148,\n/**/\n    2147,\n/**/\n    2146,\n/**/\n    2145,\n/**/\n    2144,\n/**/\n    2143,\n/**/\n    2142,\n/**/\n    2141,\n/**/\n    2140,\n/**/\n    2139,\n/**/\n    2138,\n/**/\n    2137,\n/**/\n    2136,\n/**/\n    2135,\n/**/\n    2134,\n/**/\n    2133,\n/**/\n    2132,\n/**/\n    2131,\n/**/\n    2130,\n/**/\n    2129,\n/**/\n    2128,\n/**/\n    2127,\n/**/\n    2126,\n/**/\n    2125,\n/**/\n    2124,\n/**/\n    2123,\n/**/\n    2122,\n/**/\n    2121,\n/**/\n    2120,\n/**/\n    2119,\n/**/\n    2118,\n/**/\n    2117,\n/**/\n    2116,\n/**/\n    2115,\n/**/\n    2114,\n/**/\n    2113,\n/**/\n    2112,\n/**/\n    2111,\n/**/\n    2110,\n/**/\n    2109,\n/**/\n    2108,\n/**/\n    2107,\n/**/\n    2106,\n/**/\n    2105,\n/**/\n    2104,\n/**/\n    2103,\n/**/\n    2102,\n/**/\n    2101,\n/**/\n    2100,\n/**/\n    2099,\n/**/\n    2098,\n/**/\n    2097,\n/**/\n    2096,\n/**/\n    2095,\n/**/\n    2094,\n/**/\n    2093,\n/**/\n    2092,\n/**/\n    2091,\n/**/\n    2090,\n/**/\n    2089,\n/**/\n    2088,\n/**/\n    2087,\n/**/\n    2086,\n/**/\n    2085,\n/**/\n    2084,\n/**/\n    2083,\n/**/\n    2082,\n/**/\n    2081,\n/**/\n    2080,\n/**/\n    2079,\n/**/\n    2078,\n/**/\n    2077,\n/**/\n    2076,\n/**/\n    2075,\n/**/\n    2074,\n/**/\n    2073,\n/**/\n    2072,\n/**/\n    2071,\n/**/\n    2070,\n/**/\n    2069,\n/**/\n    2068,\n/**/\n    2067,\n/**/\n    2066,\n/**/\n    2065,\n/**/\n    2064,\n/**/\n    2063,\n/**/\n    2062,\n/**/\n    2061,\n/**/\n    2060,\n/**/\n    2059,\n/**/\n    2058,\n/**/\n    2057,\n/**/\n    2056,\n/**/\n    2055,\n/**/\n    2054,\n/**/\n    2053,\n/**/\n    2052,\n/**/\n    2051,\n/**/\n    2050,\n/**/\n    2049,\n/**/\n    2048,\n/**/\n    2047,\n/**/\n    2046,\n/**/\n    2045,\n/**/\n    2044,\n/**/\n    2043,\n/**/\n    2042,\n/**/\n    2041,\n/**/\n    2040,\n/**/\n    2039,\n/**/\n    2038,\n/**/\n    2037,\n/**/\n    2036,\n/**/\n    2035,\n/**/\n    2034,\n/**/\n    2033,\n/**/\n    2032,\n/**/\n    2031,\n/**/\n    2030,\n/**/\n    2029,\n/**/\n    2028,\n/**/\n    2027,\n/**/\n    2026,\n/**/\n    2025,\n/**/\n    2024,\n/**/\n    2023,\n/**/\n    2022,\n/**/\n    2021,\n/**/\n    2020,\n/**/\n    2019,\n/**/\n    2018,\n/**/\n    2017,\n/**/\n    2016,\n/**/\n    2015,\n/**/\n    2014,\n/**/\n    2013,\n/**/\n    2012,\n/**/\n    2011,\n/**/\n    2010,\n/**/\n    2009,\n/**/\n    2008,\n/**/\n    2007,\n/**/\n    2006,\n/**/\n    2005,\n/**/\n    2004,\n/**/\n    2003,\n/**/\n    2002,\n/**/\n    2001,\n/**/\n    2000,\n/**/\n    1999,\n/**/\n    1998,\n/**/\n    1997,\n/**/\n    1996,\n/**/\n    1995,\n/**/\n    1994,\n/**/\n    1993,\n/**/\n    1992,\n/**/\n    1991,\n/**/\n    1990,\n/**/\n    1989,\n/**/\n    1988,\n/**/\n    1987,\n/**/\n    1986,\n/**/\n    1985,\n/**/\n    1984,\n/**/\n    1983,\n/**/\n    1982,\n/**/\n    1981,\n/**/\n    1980,\n/**/\n    1979,\n/**/\n    1978,\n/**/\n    1977,\n/**/\n    1976,\n/**/\n    1975,\n/**/\n    1974,\n/**/\n    1973,\n/**/\n    1972,\n/**/\n    1971,\n/**/\n    1970,\n/**/\n    1969,\n/**/\n    1968,\n/**/\n    1967,\n/**/\n    1966,\n/**/\n    1965,\n/**/\n    1964,\n/**/\n    1963,\n/**/\n    1962,\n/**/\n    1961,\n/**/\n    1960,\n/**/\n    1959,\n/**/\n    1958,\n/**/\n    1957,\n/**/\n    1956,\n/**/\n    1955,\n/**/\n    1954,\n/**/\n    1953,\n/**/\n    1952,\n/**/\n    1951,\n/**/\n    1950,\n/**/\n    1949,\n/**/\n    1948,\n/**/\n    1947,\n/**/\n    1946,\n/**/\n    1945,\n/**/\n    1944,\n/**/\n    1943,\n/**/\n    1942,\n/**/\n    1941,\n/**/\n    1940,\n/**/\n    1939,\n/**/\n    1938,\n/**/\n    1937,\n/**/\n    1936,\n/**/\n    1935,\n/**/\n    1934,\n/**/\n    1933,\n/**/\n    1932,\n/**/\n    1931,\n/**/\n    1930,\n/**/\n    1929,\n/**/\n    1928,\n/**/\n    1927,\n/**/\n    1926,\n/**/\n    1925,\n/**/\n    1924,\n/**/\n    1923,\n/**/\n    1922,\n/**/\n    1921,\n/**/\n    1920,\n/**/\n    1919,\n/**/\n    1918,\n/**/\n    1917,\n/**/\n    1916,\n/**/\n    1915,\n/**/\n    1914,\n/**/\n    1913,\n/**/\n    1912,\n/**/\n    1911,\n/**/\n    1910,\n/**/\n    1909,\n/**/\n    1908,\n/**/\n    1907,\n/**/\n    1906,\n/**/\n    1905,\n/**/\n    1904,\n/**/\n    1903,\n/**/\n    1902,\n/**/\n    1901,\n/**/\n    1900,\n/**/\n    1899,\n/**/\n    1898,\n/**/\n    1897,\n/**/\n    1896,\n/**/\n    1895,\n/**/\n    1894,\n/**/\n    1893,\n/**/\n    1892,\n/**/\n    1891,\n/**/\n    1890,\n/**/\n    1889,\n/**/\n    1888,\n/**/\n    1887,\n/**/\n    1886,\n/**/\n    1885,\n/**/\n    1884,\n/**/\n    1883,\n/**/\n    1882,\n/**/\n    1881,\n/**/\n    1880,\n/**/\n    1879,\n/**/\n    1878,\n/**/\n    1877,\n/**/\n    1876,\n/**/\n    1875,\n/**/\n    1874,\n/**/\n    1873,\n/**/\n    1872,\n/**/\n    1871,\n/**/\n    1870,\n/**/\n    1869,\n/**/\n    1868,\n/**/\n    1867,\n/**/\n    1866,\n/**/\n    1865,\n/**/\n    1864,\n/**/\n    1863,\n/**/\n    1862,\n/**/\n    1861,\n/**/\n    1860,\n/**/\n    1859,\n/**/\n    1858,\n/**/\n    1857,\n/**/\n    1856,\n/**/\n    1855,\n/**/\n    1854,\n/**/\n    1853,\n/**/\n    1852,\n/**/\n    1851,\n/**/\n    1850,\n/**/\n    1849,\n/**/\n    1848,\n/**/\n    1847,\n/**/\n    1846,\n/**/\n    1845,\n/**/\n    1844,\n/**/\n    1843,\n/**/\n    1842,\n/**/\n    1841,\n/**/\n    1840,\n/**/\n    1839,\n/**/\n    1838,\n/**/\n    1837,\n/**/\n    1836,\n/**/\n    1835,\n/**/\n    1834,\n/**/\n    1833,\n/**/\n    1832,\n/**/\n    1831,\n/**/\n    1830,\n/**/\n    1829,\n/**/\n    1828,\n/**/\n    1827,\n/**/\n    1826,\n/**/\n    1825,\n/**/\n    1824,\n/**/\n    1823,\n/**/\n    1822,\n/**/\n    1821,\n/**/\n    1820,\n/**/\n    1819,\n/**/\n    1818,\n/**/\n    1817,\n/**/\n    1816,\n/**/\n    1815,\n/**/\n    1814,\n/**/\n    1813,\n/**/\n    1812,\n/**/\n    1811,\n/**/\n    1810,\n/**/\n    1809,\n/**/\n    1808,\n/**/\n    1807,\n/**/\n    1806,\n/**/\n    1805,\n/**/\n    1804,\n/**/\n    1803,\n/**/\n    1802,\n/**/\n    1801,\n/**/\n    1800,\n/**/\n    1799,\n/**/\n    1798,\n/**/\n    1797,\n/**/\n    1796,\n/**/\n    1795,\n/**/\n    1794,\n/**/\n    1793,\n/**/\n    1792,\n/**/\n    1791,\n/**/\n    1790,\n/**/\n    1789,\n/**/\n    1788,\n/**/\n    1787,\n/**/\n    1786,\n/**/\n    1785,\n/**/\n    1784,\n/**/\n    1783,\n/**/\n    1782,\n/**/\n    1781,\n/**/\n    1780,\n/**/\n    1779,\n/**/\n    1778,\n/**/\n    1777,\n/**/\n    1776,\n/**/\n    1775,\n/**/\n    1774,\n/**/\n    1773,\n/**/\n    1772,\n/**/\n    1771,\n/**/\n    1770,\n/**/\n    1769,\n/**/\n    1768,\n/**/\n    1767,\n/**/\n    1766,\n/**/\n    1765,\n/**/\n    1764,\n/**/\n    1763,\n/**/\n    1762,\n/**/\n    1761,\n/**/\n    1760,\n/**/\n    1759,\n/**/\n    1758,\n/**/\n    1757,\n/**/\n    1756,\n/**/\n    1755,\n/**/\n    1754,\n/**/\n    1753,\n/**/\n    1752,\n/**/\n    1751,\n/**/\n    1750,\n/**/\n    1749,\n/**/\n    1748,\n/**/\n    1747,\n/**/\n    1746,\n/**/\n    1745,\n/**/\n    1744,\n/**/\n    1743,\n/**/\n    1742,\n/**/\n    1741,\n/**/\n    1740,\n/**/\n    1739,\n/**/\n    1738,\n/**/\n    1737,\n/**/\n    1736,\n/**/\n    1735,\n/**/\n    1734,\n/**/\n    1733,\n/**/\n    1732,\n/**/\n    1731,\n/**/\n    1730,\n/**/\n    1729,\n/**/\n    1728,\n/**/\n    1727,\n/**/\n    1726,\n/**/\n    1725,\n/**/\n    1724,\n/**/\n    1723,\n/**/\n    1722,\n/**/\n    1721,\n/**/\n    1720,\n/**/\n    1719,\n/**/\n    1718,\n/**/\n    1717,\n/**/\n    1716,\n/**/\n    1715,\n/**/\n    1714,\n/**/\n    1713,\n/**/\n    1712,\n/**/\n    1711,\n/**/\n    1710,\n/**/\n    1709,\n/**/\n    1708,\n/**/\n    1707,\n/**/\n    1706,\n/**/\n    1705,\n/**/\n    1704,\n/**/\n    1703,\n/**/\n    1702,\n/**/\n    1701,\n/**/\n    1700,\n/**/\n    1699,\n/**/\n    1698,\n/**/\n    1697,\n/**/\n    1696,\n/**/\n    1695,\n/**/\n    1694,\n/**/\n    1693,\n/**/\n    1692,\n/**/\n    1691,\n/**/\n    1690,\n/**/\n    1689,\n/**/\n    1688,\n/**/\n    1687,\n/**/\n    1686,\n/**/\n    1685,\n/**/\n    1684,\n/**/\n    1683,\n/**/\n    1682,\n/**/\n    1681,\n/**/\n    1680,\n/**/\n    1679,\n/**/\n    1678,\n/**/\n    1677,\n/**/\n    1676,\n/**/\n    1675,\n/**/\n    1674,\n/**/\n    1673,\n/**/\n    1672,\n/**/\n    1671,\n/**/\n    1670,\n/**/\n    1669,\n/**/\n    1668,\n/**/\n    1667,\n/**/\n    1666,\n/**/\n    1665,\n/**/\n    1664,\n/**/\n    1663,\n/**/\n    1662,\n/**/\n    1661,\n/**/\n    1660,\n/**/\n    1659,\n/**/\n    1658,\n/**/\n    1657,\n/**/\n    1656,\n/**/\n    1655,\n/**/\n    1654,\n/**/\n    1653,\n/**/\n    1652,\n/**/\n    1651,\n/**/\n    1650,\n/**/\n    1649,\n/**/\n    1648,\n/**/\n    1647,\n/**/\n    1646,\n/**/\n    1645,\n/**/\n    1644,\n/**/\n    1643,\n/**/\n    1642,\n/**/\n    1641,\n/**/\n    1640,\n/**/\n    1639,\n/**/\n    1638,\n/**/\n    1637,\n/**/\n    1636,\n/**/\n    1635,\n/**/\n    1634,\n/**/\n    1633,\n/**/\n    1632,\n/**/\n    1631,\n/**/\n    1630,\n/**/\n    1629,\n/**/\n    1628,\n/**/\n    1627,\n/**/\n    1626,\n/**/\n    1625,\n/**/\n    1624,\n/**/\n    1623,\n/**/\n    1622,\n/**/\n    1621,\n/**/\n    1620,\n/**/\n    1619,\n/**/\n    1618,\n/**/\n    1617,\n/**/\n    1616,\n/**/\n    1615,\n/**/\n    1614,\n/**/\n    1613,\n/**/\n    1612,\n/**/\n    1611,\n/**/\n    1610,\n/**/\n    1609,\n/**/\n    1608,\n/**/\n    1607,\n/**/\n    1606,\n/**/\n    1605,\n/**/\n    1604,\n/**/\n    1603,\n/**/\n    1602,\n/**/\n    1601,\n/**/\n    1600,\n/**/\n    1599,\n/**/\n    1598,\n/**/\n    1597,\n/**/\n    1596,\n/**/\n    1595,\n/**/\n    1594,\n/**/\n    1593,\n/**/\n    1592,\n/**/\n    1591,\n/**/\n    1590,\n/**/\n    1589,\n/**/\n    1588,\n/**/\n    1587,\n/**/\n    1586,\n/**/\n    1585,\n/**/\n    1584,\n/**/\n    1583,\n/**/\n    1582,\n/**/\n    1581,\n/**/\n    1580,\n/**/\n    1579,\n/**/\n    1578,\n/**/\n    1577,\n/**/\n    1576,\n/**/\n    1575,\n/**/\n    1574,\n/**/\n    1573,\n/**/\n    1572,\n/**/\n    1571,\n/**/\n    1570,\n/**/\n    1569,\n/**/\n    1568,\n/**/\n    1567,\n/**/\n    1566,\n/**/\n    1565,\n/**/\n    1564,\n/**/\n    1563,\n/**/\n    1562,\n/**/\n    1561,\n/**/\n    1560,\n/**/\n    1559,\n/**/\n    1558,\n/**/\n    1557,\n/**/\n    1556,\n/**/\n    1555,\n/**/\n    1554,\n/**/\n    1553,\n/**/\n    1552,\n/**/\n    1551,\n/**/\n    1550,\n/**/\n    1549,\n/**/\n    1548,\n/**/\n    1547,\n/**/\n    1546,\n/**/\n    1545,\n/**/\n    1544,\n/**/\n    1543,\n/**/\n    1542,\n/**/\n    1541,\n/**/\n    1540,\n/**/\n    1539,\n/**/\n    1538,\n/**/\n    1537,\n/**/\n    1536,\n/**/\n    1535,\n/**/\n    1534,\n/**/\n    1533,\n/**/\n    1532,\n/**/\n    1531,\n/**/\n    1530,\n/**/\n    1529,\n/**/\n    1528,\n/**/\n    1527,\n/**/\n    1526,\n/**/\n    1525,\n/**/\n    1524,\n/**/\n    1523,\n/**/\n    1522,\n/**/\n    1521,\n/**/\n    1520,\n/**/\n    1519,\n/**/\n    1518,\n/**/\n    1517,\n/**/\n    1516,\n/**/\n    1515,\n/**/\n    1514,\n/**/\n    1513,\n/**/\n    1512,\n/**/\n    1511,\n/**/\n    1510,\n/**/\n    1509,\n/**/\n    1508,\n/**/\n    1507,\n/**/\n    1506,\n/**/\n    1505,\n/**/\n    1504,\n/**/\n    1503,\n/**/\n    1502,\n/**/\n    1501,\n/**/\n    1500,\n/**/\n    1499,\n/**/\n    1498,\n/**/\n    1497,\n/**/\n    1496,\n/**/\n    1495,\n/**/\n    1494,\n/**/\n    1493,\n/**/\n    1492,\n/**/\n    1491,\n/**/\n    1490,\n/**/\n    1489,\n/**/\n    1488,\n/**/\n    1487,\n/**/\n    1486,\n/**/\n    1485,\n/**/\n    1484,\n/**/\n    1483,\n/**/\n    1482,\n/**/\n    1481,\n/**/\n    1480,\n/**/\n    1479,\n/**/\n    1478,\n/**/\n    1477,\n/**/\n    1476,\n/**/\n    1475,\n/**/\n    1474,\n/**/\n    1473,\n/**/\n    1472,\n/**/\n    1471,\n/**/\n    1470,\n/**/\n    1469,\n/**/\n    1468,\n/**/\n    1467,\n/**/\n    1466,\n/**/\n    1465,\n/**/\n    1464,\n/**/\n    1463,\n/**/\n    1462,\n/**/\n    1461,\n/**/\n    1460,\n/**/\n    1459,\n/**/\n    1458,\n/**/\n    1457,\n/**/\n    1456,\n/**/\n    1455,\n/**/\n    1454,\n/**/\n    1453,\n/**/\n    1452,\n/**/\n    1451,\n/**/\n    1450,\n/**/\n    1449,\n/**/\n    1448,\n/**/\n    1447,\n/**/\n    1446,\n/**/\n    1445,\n/**/\n    1444,\n/**/\n    1443,\n/**/\n    1442,\n/**/\n    1441,\n/**/\n    1440,\n/**/\n    1439,\n/**/\n    1438,\n/**/\n    1437,\n/**/\n    1436,\n/**/\n    1435,\n/**/\n    1434,\n/**/\n    1433,\n/**/\n    1432,\n/**/\n    1431,\n/**/\n    1430,\n/**/\n    1429,\n/**/\n    1428,\n/**/\n    1427,\n/**/\n    1426,\n/**/\n    1425,\n/**/\n    1424,\n/**/\n    1423,\n/**/\n    1422,\n/**/\n    1421,\n/**/\n    1420,\n/**/\n    1419,\n/**/\n    1418,\n/**/\n    1417,\n/**/\n    1416,\n/**/\n    1415,\n/**/\n    1414,\n/**/\n    1413,\n/**/\n    1412,\n/**/\n    1411,\n/**/\n    1410,\n/**/\n    1409,\n/**/\n    1408,\n/**/\n    1407,\n/**/\n    1406,\n/**/\n    1405,\n/**/\n    1404,\n/**/\n    1403,\n/**/\n    1402,\n/**/\n    1401,\n/**/\n    1400,\n/**/\n    1399,\n/**/\n    1398,\n/**/\n    1397,\n/**/\n    1396,\n/**/\n    1395,\n/**/\n    1394,\n/**/\n    1393,\n/**/\n    1392,\n/**/\n    1391,\n/**/\n    1390,\n/**/\n    1389,\n/**/\n    1388,\n/**/\n    1387,\n/**/\n    1386,\n/**/\n    1385,\n/**/\n    1384,\n/**/\n    1383,\n/**/\n    1382,\n/**/\n    1381,\n/**/\n    1380,\n/**/\n    1379,\n/**/\n    1378,\n/**/\n    1377,\n/**/\n    1376,\n/**/\n    1375,\n/**/\n    1374,\n/**/\n    1373,\n/**/\n    1372,\n/**/\n    1371,\n/**/\n    1370,\n/**/\n    1369,\n/**/\n    1368,\n/**/\n    1367,\n/**/\n    1366,\n/**/\n    1365,\n/**/\n    1364,\n/**/\n    1363,\n/**/\n    1362,\n/**/\n    1361,\n/**/\n    1360,\n/**/\n    1359,\n/**/\n    1358,\n/**/\n    1357,\n/**/\n    1356,\n/**/\n    1355,\n/**/\n    1354,\n/**/\n    1353,\n/**/\n    1352,\n/**/\n    1351,\n/**/\n    1350,\n/**/\n    1349,\n/**/\n    1348,\n/**/\n    1347,\n/**/\n    1346,\n/**/\n    1345,\n/**/\n    1344,\n/**/\n    1343,\n/**/\n    1342,\n/**/\n    1341,\n/**/\n    1340,\n/**/\n    1339,\n/**/\n    1338,\n/**/\n    1337,\n/**/\n    1336,\n/**/\n    1335,\n/**/\n    1334,\n/**/\n    1333,\n/**/\n    1332,\n/**/\n    1331,\n/**/\n    1330,\n/**/\n    1329,\n/**/\n    1328,\n/**/\n    1327,\n/**/\n    1326,\n/**/\n    1325,\n/**/\n    1324,\n/**/\n    1323,\n/**/\n    1322,\n/**/\n    1321,\n/**/\n    1320,\n/**/\n    1319,\n/**/\n    1318,\n/**/\n    1317,\n/**/\n    1316,\n/**/\n    1315,\n/**/\n    1314,\n/**/\n    1313,\n/**/\n    1312,\n/**/\n    1311,\n/**/\n    1310,\n/**/\n    1309,\n/**/\n    1308,\n/**/\n    1307,\n/**/\n    1306,\n/**/\n    1305,\n/**/\n    1304,\n/**/\n    1303,\n/**/\n    1302,\n/**/\n    1301,\n/**/\n    1300,\n/**/\n    1299,\n/**/\n    1298,\n/**/\n    1297,\n/**/\n    1296,\n/**/\n    1295,\n/**/\n    1294,\n/**/\n    1293,\n/**/\n    1292,\n/**/\n    1291,\n/**/\n    1290,\n/**/\n    1289,\n/**/\n    1288,\n/**/\n    1287,\n/**/\n    1286,\n/**/\n    1285,\n/**/\n    1284,\n/**/\n    1283,\n/**/\n    1282,\n/**/\n    1281,\n/**/\n    1280,\n/**/\n    1279,\n/**/\n    1278,\n/**/\n    1277,\n/**/\n    1276,\n/**/\n    1275,\n/**/\n    1274,\n/**/\n    1273,\n/**/\n    1272,\n/**/\n    1271,\n/**/\n    1270,\n/**/\n    1269,\n/**/\n    1268,\n/**/\n    1267,\n/**/\n    1266,\n/**/\n    1265,\n/**/\n    1264,\n/**/\n    1263,\n/**/\n    1262,\n/**/\n    1261,\n/**/\n    1260,\n/**/\n    1259,\n/**/\n    1258,\n/**/\n    1257,\n/**/\n    1256,\n/**/\n    1255,\n/**/\n    1254,\n/**/\n    1253,\n/**/\n    1252,\n/**/\n    1251,\n/**/\n    1250,\n/**/\n    1249,\n/**/\n    1248,\n/**/\n    1247,\n/**/\n    1246,\n/**/\n    1245,\n/**/\n    1244,\n/**/\n    1243,\n/**/\n    1242,\n/**/\n    1241,\n/**/\n    1240,\n/**/\n    1239,\n/**/\n    1238,\n/**/\n    1237,\n/**/\n    1236,\n/**/\n    1235,\n/**/\n    1234,\n/**/\n    1233,\n/**/\n    1232,\n/**/\n    1231,\n/**/\n    1230,\n/**/\n    1229,\n/**/\n    1228,\n/**/\n    1227,\n/**/\n    1226,\n/**/\n    1225,\n/**/\n    1224,\n/**/\n    1223,\n/**/\n    1222,\n/**/\n    1221,\n/**/\n    1220,\n/**/\n    1219,\n/**/\n    1218,\n/**/\n    1217,\n/**/\n    1216,\n/**/\n    1215,\n/**/\n    1214,\n/**/\n    1213,\n/**/\n    1212,\n/**/\n    1211,\n/**/\n    1210,\n/**/\n    1209,\n/**/\n    1208,\n/**/\n    1207,\n/**/\n    1206,\n/**/\n    1205,\n/**/\n    1204,\n/**/\n    1203,\n/**/\n    1202,\n/**/\n    1201,\n/**/\n    1200,\n/**/\n    1199,\n/**/\n    1198,\n/**/\n    1197,\n/**/\n    1196,\n/**/\n    1195,\n/**/\n    1194,\n/**/\n    1193,\n/**/\n    1192,\n/**/\n    1191,\n/**/\n    1190,\n/**/\n    1189,\n/**/\n    1188,\n/**/\n    1187,\n/**/\n    1186,\n/**/\n    1185,\n/**/\n    1184,\n/**/\n    1183,\n/**/\n    1182,\n/**/\n    1181,\n/**/\n    1180,\n/**/\n    1179,\n/**/\n    1178,\n/**/\n    1177,\n/**/\n    1176,\n/**/\n    1175,\n/**/\n    1174,\n/**/\n    1173,\n/**/\n    1172,\n/**/\n    1171,\n/**/\n    1170,\n/**/\n    1169,\n/**/\n    1168,\n/**/\n    1167,\n/**/\n    1166,\n/**/\n    1165,\n/**/\n    1164,\n/**/\n    1163,\n/**/\n    1162,\n/**/\n    1161,\n/**/\n    1160,\n/**/\n    1159,\n/**/\n    1158,\n/**/\n    1157,\n/**/\n    1156,\n/**/\n    1155,\n/**/\n    1154,\n/**/\n    1153,\n/**/\n    1152,\n/**/\n    1151,\n/**/\n    1150,\n/**/\n    1149,\n/**/\n    1148,\n/**/\n    1147,\n/**/\n    1146,\n/**/\n    1145,\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    while (l < h)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version8<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "fixing_code": ["/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n/*\n * scriptfile.c: functions for dealing with the runtime directories/files\n */\n\n#include \"vim.h\"\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n// The names of packages that once were loaded are remembered.\nstatic garray_T\t\tga_loaded = {0, 0, sizeof(char_u *), 4, NULL};\n#endif\n\n// last used sequence number for sourcing scripts (current_sctx.sc_seq)\n#ifdef FEAT_EVAL\nstatic int\t\tlast_current_SID_seq = 0;\n#endif\n\nstatic int do_source_ext(char_u *fname, int check_other, int is_vimrc, int *ret_sid, exarg_T *eap, int clearvars);\n\n/*\n * Initialize the execution stack.\n */\n    void\nestack_init(void)\n{\n    estack_T *entry;\n\n    if (ga_grow(&exestack, 10) == FAIL)\n\tmch_exit(0);\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len;\n    entry->es_type = ETYPE_TOP;\n    entry->es_name = NULL;\n    entry->es_lnum = 0;\n#ifdef FEAT_EVAL\n    entry->es_info.ufunc = NULL;\n#endif\n    ++exestack.ga_len;\n}\n\n/*\n * Add an item to the execution stack.\n * Returns the new entry or NULL when out of memory.\n */\n    estack_T *\nestack_push(etype_T type, char_u *name, long lnum)\n{\n    estack_T *entry;\n\n    // If memory allocation fails then we'll pop more than we push, eventually\n    // at the top level it will be OK again.\n    if (ga_grow(&exestack, 1) == OK)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + exestack.ga_len;\n\tentry->es_type = type;\n\tentry->es_name = name;\n\tentry->es_lnum = lnum;\n#ifdef FEAT_EVAL\n\tentry->es_info.ufunc = NULL;\n#endif\n\t++exestack.ga_len;\n\treturn entry;\n    }\n    return NULL;\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Add a user function to the execution stack.\n */\n    estack_T *\nestack_push_ufunc(ufunc_T *ufunc, long lnum)\n{\n    estack_T *entry = estack_push(ETYPE_UFUNC,\n\t    ufunc->uf_name_exp != NULL\n\t\t\t\t  ? ufunc->uf_name_exp : ufunc->uf_name, lnum);\n    if (entry != NULL)\n\tentry->es_info.ufunc = ufunc;\n    return entry;\n}\n\n/*\n * Return TRUE if \"ufunc\" with \"lnum\" is already at the top of the exe stack.\n */\n    int\nestack_top_is_ufunc(ufunc_T *ufunc, long lnum)\n{\n    estack_T *entry;\n\n    if (exestack.ga_len == 0)\n\treturn FALSE;\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n    return entry->es_type == ETYPE_UFUNC\n\t&& STRCMP( entry->es_name, ufunc->uf_name_exp != NULL\n\t\t\t\t    ? ufunc->uf_name_exp : ufunc->uf_name) == 0\n\t&& entry->es_lnum == lnum;\n}\n#endif\n\n/*\n * Take an item off of the execution stack and return it.\n */\n    estack_T *\nestack_pop(void)\n{\n    if (exestack.ga_len == 0)\n\treturn NULL;\n    --exestack.ga_len;\n    return ((estack_T *)exestack.ga_data) + exestack.ga_len;\n}\n\n/*\n * Get the current value for \"which\" in allocated memory.\n * \"which\" is ESTACK_SFILE for <sfile>, ESTACK_STACK for <stack> or\n * ESTACK_SCRIPT for <script>.\n */\n    char_u *\nestack_sfile(estack_arg_T which UNUSED)\n{\n    estack_T\t*entry;\n#ifdef FEAT_EVAL\n    garray_T\tga;\n    size_t\tlen;\n    int\t\tidx;\n    etype_T\tlast_type = ETYPE_SCRIPT;\n    char\t*type_name;\n#endif\n\n    entry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n#ifdef FEAT_EVAL\n    if (which == ESTACK_SFILE && entry->es_type != ETYPE_UFUNC)\n#endif\n    {\n\tif (entry->es_name == NULL)\n\t    return NULL;\n\treturn vim_strsave(entry->es_name);\n    }\n#ifdef FEAT_EVAL\n    // expand('<sfile>') works in a function for backwards compatibility, but\n    // may give an unexpected result.  Disallow it in Vim 9 script.\n    if (which == ESTACK_SFILE && in_vim9script())\n    {\n\tint  save_emsg_off = emsg_off;\n\n\tif (emsg_off == 1)\n\t    // f_expand() silences errors but we do want this one\n\t    emsg_off = 0;\n\temsg(_(e_cannot_expand_sfile_in_vim9_function));\n\temsg_off = save_emsg_off;\n\treturn NULL;\n    }\n\n    // If evaluated in a function or autocommand, return the path of the script\n    // where it is defined, at script level the current script path is returned\n    // instead.\n    if (which == ESTACK_SCRIPT)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + exestack.ga_len - 1;\n\t// Walk the stack backwards, starting from the current frame.\n\tfor (idx = exestack.ga_len - 1; idx >= 0; --idx, --entry)\n\t{\n\t    if (entry->es_type == ETYPE_UFUNC)\n\t    {\n\t\tsctx_T *def_ctx = &entry->es_info.ufunc->uf_script_ctx;\n\n\t\tif (def_ctx->sc_sid > 0)\n\t\t    return vim_strsave(SCRIPT_ITEM(def_ctx->sc_sid)->sn_name);\n\t\telse\n\t\t    return NULL;\n\t    }\n\t    else if (entry->es_type == ETYPE_AUCMD)\n\t    {\n\t\tsctx_T *def_ctx = acp_script_ctx(entry->es_info.aucmd);\n\n\t\tif (def_ctx->sc_sid > 0)\n\t\t    return vim_strsave(SCRIPT_ITEM(def_ctx->sc_sid)->sn_name);\n\t\telse\n\t\t    return NULL;\n\t    }\n\t    else if (entry->es_type == ETYPE_SCRIPT)\n\t    {\n\t\treturn vim_strsave(entry->es_name);\n\t    }\n\t}\n\treturn NULL;\n    }\n\n    // Give information about each stack entry up to the root.\n    // For a function we compose the call stack, as it was done in the past:\n    //   \"function One[123]..Two[456]..Three\"\n    ga_init2(&ga, sizeof(char), 100);\n    for (idx = 0; idx < exestack.ga_len; ++idx)\n    {\n\tentry = ((estack_T *)exestack.ga_data) + idx;\n\tif (entry->es_name != NULL)\n\t{\n\t    long    lnum = 0;\n\t    char    *dots;\n\n\t    len = STRLEN(entry->es_name) + 15;\n\t    type_name = \"\";\n\t    if (entry->es_type != last_type)\n\t    {\n\t\tswitch (entry->es_type)\n\t\t{\n\t\t    case ETYPE_SCRIPT: type_name = \"script \"; break;\n\t\t    case ETYPE_UFUNC: type_name = \"function \"; break;\n\t\t    default: type_name = \"\"; break;\n\t\t}\n\t\tlast_type = entry->es_type;\n\t    }\n\t    len += STRLEN(type_name);\n\t    if (ga_grow(&ga, (int)len) == FAIL)\n\t\tbreak;\n\t    if (idx == exestack.ga_len - 1)\n\t\tlnum = which == ESTACK_STACK ? SOURCING_LNUM : 0;\n\t    else\n\t\tlnum = entry->es_lnum;\n\t    dots = idx == exestack.ga_len - 1 ? \"\" : \"..\";\n\t    if (lnum == 0)\n\t\t// For the bottom entry of <sfile>: do not add the line number,\n\t\t// it is used in <slnum>.  Also leave it out when the number is\n\t\t// not set.\n\t\tvim_snprintf((char *)ga.ga_data + ga.ga_len, len, \"%s%s%s\",\n\t\t\t\ttype_name, entry->es_name, dots);\n\t    else\n\t\tvim_snprintf((char *)ga.ga_data + ga.ga_len, len, \"%s%s[%ld]%s\",\n\t\t\t\t    type_name, entry->es_name, lnum, dots);\n\t    ga.ga_len += (int)STRLEN((char *)ga.ga_data + ga.ga_len);\n\t}\n    }\n\n    return (char_u *)ga.ga_data;\n#endif\n}\n\n/*\n * \":runtime [what] {name}\"\n */\n    void\nex_runtime(exarg_T *eap)\n{\n    char_u  *arg = eap->arg;\n    char_u  *p = skiptowhite(arg);\n    int\t    len = (int)(p - arg);\n    int\t    flags = eap->forceit ? DIP_ALL : 0;\n\n    if (STRNCMP(arg, \"START\", len) == 0)\n    {\n\tflags += DIP_START + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"OPT\", len) == 0)\n    {\n\tflags += DIP_OPT + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"PACK\", len) == 0)\n    {\n\tflags += DIP_START + DIP_OPT + DIP_NORTP;\n\targ = skipwhite(arg + len);\n    }\n    else if (STRNCMP(arg, \"ALL\", len) == 0)\n    {\n\tflags += DIP_START + DIP_OPT;\n\targ = skipwhite(arg + len);\n    }\n\n    source_runtime(arg, flags);\n}\n\n    static void\nsource_callback(char_u *fname, void *cookie)\n{\n    (void)do_source(fname, FALSE, DOSO_NONE, cookie);\n}\n\n#ifdef FEAT_EVAL\n/*\n * Find an already loaded script \"name\".\n * If found returns its script ID.  If not found returns -1.\n */\n    int\nfind_script_by_name(char_u *name)\n{\n    int\t\t    sid;\n    scriptitem_T    *si;\n\n    for (sid = script_items.ga_len; sid > 0; --sid)\n    {\n\t// We used to check inode here, but that doesn't work:\n\t// - If a script is edited and written, it may get a different\n\t//   inode number, even though to the user it is the same script.\n\t// - If a script is deleted and another script is written, with a\n\t//   different name, the inode may be re-used.\n\tsi = SCRIPT_ITEM(sid);\n\tif (si->sn_name != NULL && fnamecmp(si->sn_name, name) == 0)\n\t    return sid;\n    }\n    return -1;\n}\n\n/*\n * Add a new scriptitem with all items initialized.\n * When running out of memory \"error\" is set to FAIL.\n * Returns the script ID.\n */\n    static int\nget_new_scriptitem(int *error)\n{\n    static scid_T   last_current_SID = 0;\n    int\t\t    sid = ++last_current_SID;\n    scriptitem_T    *si = NULL;\n\n    if (ga_grow(&script_items, (int)(sid - script_items.ga_len)) == FAIL)\n    {\n\t*error = FAIL;\n\treturn sid;\n    }\n    while (script_items.ga_len < sid)\n    {\n\tsi = ALLOC_CLEAR_ONE(scriptitem_T);\n\tif (si == NULL)\n\t{\n\t    *error = FAIL;\n\t    return sid;\n\t}\n\t++script_items.ga_len;\n\tSCRIPT_ITEM(script_items.ga_len) = si;\n\tsi->sn_name = NULL;\n\tsi->sn_version = 1;\n\n\t// Allocate the local script variables to use for this script.\n\tnew_script_vars(script_items.ga_len);\n\tga_init2(&si->sn_var_vals, sizeof(svar_T), 10);\n\thash_init(&si->sn_all_vars.dv_hashtab);\n\tga_init2(&si->sn_imports, sizeof(imported_T), 10);\n\tga_init2(&si->sn_type_list, sizeof(type_T), 10);\n# ifdef FEAT_PROFILE\n\tsi->sn_prof_on = FALSE;\n# endif\n    }\n\n    // \"si\" can't be NULL, check only to avoid a compiler warning\n    if (si != NULL)\n\t// Used to check script variable index is still valid.\n\tsi->sn_script_seq = current_sctx.sc_seq;\n\n    return sid;\n}\n\n    int\nget_new_scriptitem_for_fname(int *error, char_u *fname)\n{\n    int sid = get_new_scriptitem(error);\n\n    if (*error == OK)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(sid);\n\n\tsi->sn_name = vim_strsave(fname);\n\tsi->sn_state = SN_STATE_NOT_LOADED;\n    }\n    return sid;\n}\n\n    static void\nfind_script_callback(char_u *fname, void *cookie)\n{\n    int sid;\n    int error = OK;\n    int *ret_sid = cookie;\n\n    sid = find_script_by_name(fname);\n    if (sid < 0)\n\t// script does not exist yet, create a new scriptitem\n\tsid = get_new_scriptitem_for_fname(&error, fname);\n    *ret_sid = sid;\n}\n#endif\n\n/*\n * Find the file \"name\" in all directories in \"path\" and invoke\n * \"callback(fname, cookie)\".\n * \"name\" can contain wildcards.\n * When \"flags\" has DIP_ALL: source all files, otherwise only the first one.\n * When \"flags\" has DIP_DIR: find directories instead of files.\n * When \"flags\" has DIP_ERR: give an error message if there is no match.\n *\n * return FAIL when no file could be sourced, OK otherwise.\n */\n    int\ndo_in_path(\n    char_u\t*path,\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    char_u\t*rtp;\n    char_u\t*np;\n    char_u\t*buf;\n    char_u\t*rtp_copy;\n    char_u\t*tail;\n    int\t\tnum_files;\n    char_u\t**files;\n    int\t\ti;\n    int\t\tdid_one = FALSE;\n#ifdef AMIGA\n    struct Process\t*proc = (struct Process *)FindTask(0L);\n    APTR\t\tsave_winptr = proc->pr_WindowPtr;\n\n    // Avoid a requester here for a volume that doesn't exist.\n    proc->pr_WindowPtr = (APTR)-1L;\n#endif\n\n    // Make a copy of 'runtimepath'.  Invoking the callback may change the\n    // value.\n    rtp_copy = vim_strsave(path);\n    buf = alloc(MAXPATHL);\n    if (buf != NULL && rtp_copy != NULL)\n    {\n\tif (p_verbose > 10 && name != NULL)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"Searching for \\\"%s\\\" in \\\"%s\\\"\"),\n\t\t\t\t\t\t (char *)name, (char *)path);\n\t    verbose_leave();\n\t}\n\n\t// Loop over all entries in 'runtimepath'.\n\trtp = rtp_copy;\n\twhile (*rtp != NUL && ((flags & DIP_ALL) || !did_one))\n\t{\n\t    size_t buflen;\n\n\t    // Copy the path from 'runtimepath' to buf[].\n\t    copy_option_part(&rtp, buf, MAXPATHL, \",\");\n\t    buflen = STRLEN(buf);\n\n\t    // Skip after or non-after directories.\n\t    if (flags & (DIP_NOAFTER | DIP_AFTER))\n\t    {\n\t\tint is_after = buflen >= 5\n\t\t\t\t     && STRCMP(buf + buflen - 5, \"after\") == 0;\n\n\t\tif ((is_after && (flags & DIP_NOAFTER))\n\t\t\t|| (!is_after && (flags & DIP_AFTER)))\n\t\t    continue;\n\t    }\n\n\t    if (name == NULL)\n\t    {\n\t\t(*callback)(buf, (void *) &cookie);\n\t\tif (!did_one)\n\t\t    did_one = (cookie == NULL);\n\t    }\n\t    else if (buflen + STRLEN(name) + 2 < MAXPATHL)\n\t    {\n\t\tadd_pathsep(buf);\n\t\ttail = buf + STRLEN(buf);\n\n\t\t// Loop over all patterns in \"name\"\n\t\tnp = name;\n\t\twhile (*np != NUL && ((flags & DIP_ALL) || !did_one))\n\t\t{\n\t\t    // Append the pattern from \"name\" to buf[].\n\t\t    copy_option_part(&np, tail, (int)(MAXPATHL - (tail - buf)),\n\t\t\t\t\t\t\t\t       \"\\t \");\n\n\t\t    if (p_verbose > 10)\n\t\t    {\n\t\t\tverbose_enter();\n\t\t\tsmsg(_(\"Searching for \\\"%s\\\"\"), buf);\n\t\t\tverbose_leave();\n\t\t    }\n\n\t\t    // Expand wildcards, invoke the callback for each match.\n\t\t    if (gen_expand_wildcards(1, &buf, &num_files, &files,\n\t\t\t\t  (flags & DIP_DIR) ? EW_DIR : EW_FILE) == OK)\n\t\t    {\n\t\t\tfor (i = 0; i < num_files; ++i)\n\t\t\t{\n\t\t\t    (*callback)(files[i], cookie);\n\t\t\t    did_one = TRUE;\n\t\t\t    if (!(flags & DIP_ALL))\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tFreeWild(num_files, files);\n\t\t    }\n\t\t}\n\t    }\n\t}\n    }\n    vim_free(buf);\n    vim_free(rtp_copy);\n    if (!did_one && name != NULL)\n    {\n\tchar *basepath = path == p_rtp ? \"runtimepath\" : \"packpath\";\n\n\tif (flags & DIP_ERR)\n\t    semsg(_(e_directory_not_found_in_str_str), basepath, name);\n\telse if (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    smsg(_(\"not found in '%s': \\\"%s\\\"\"), basepath, name);\n\t    verbose_leave();\n\t}\n    }\n\n#ifdef AMIGA\n    proc->pr_WindowPtr = save_winptr;\n#endif\n\n    return did_one ? OK : FAIL;\n}\n\n/*\n * Find \"name\" in \"path\".  When found, invoke the callback function for\n * it: callback(fname, \"cookie\")\n * When \"flags\" has DIP_ALL repeat for all matches, otherwise only the first\n * one is used.\n * Returns OK when at least one match found, FAIL otherwise.\n *\n * If \"name\" is NULL calls callback for each entry in \"path\". Cookie is\n * passed by reference in this case, setting it to NULL indicates that callback\n * has done its job.\n */\n    static int\ndo_in_path_and_pp(\n    char_u\t*path,\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    int\t\tdone = FAIL;\n    char_u\t*s;\n    int\t\tlen;\n    char\t*start_dir = \"pack/*/start/*/%s\";\n    char\t*opt_dir = \"pack/*/opt/*/%s\";\n\n    if ((flags & DIP_NORTP) == 0)\n\tdone = do_in_path(path, name, flags, callback, cookie);\n\n    if ((done == FAIL || (flags & DIP_ALL)) && (flags & DIP_START))\n    {\n\tlen = (int)(STRLEN(start_dir) + STRLEN(name));\n\ts = alloc(len);\n\tif (s == NULL)\n\t    return FAIL;\n\tvim_snprintf((char *)s, len, start_dir, name);\n\tdone = do_in_path(p_pp, s, flags, callback, cookie);\n\tvim_free(s);\n    }\n\n    if ((done == FAIL || (flags & DIP_ALL)) && (flags & DIP_OPT))\n    {\n\tlen = (int)(STRLEN(opt_dir) + STRLEN(name));\n\ts = alloc(len);\n\tif (s == NULL)\n\t    return FAIL;\n\tvim_snprintf((char *)s, len, opt_dir, name);\n\tdone = do_in_path(p_pp, s, flags, callback, cookie);\n\tvim_free(s);\n    }\n\n    return done;\n}\n\n/*\n * Just like do_in_path_and_pp(), using 'runtimepath' for \"path\".\n */\n    int\ndo_in_runtimepath(\n    char_u\t*name,\n    int\t\tflags,\n    void\t(*callback)(char_u *fname, void *ck),\n    void\t*cookie)\n{\n    return do_in_path_and_pp(p_rtp, name, flags, callback, cookie);\n}\n\n/*\n * Source the file \"name\" from all directories in 'runtimepath'.\n * \"name\" can contain wildcards.\n * When \"flags\" has DIP_ALL: source all files, otherwise only the first one.\n *\n * return FAIL when no file could be sourced, OK otherwise.\n */\n    int\nsource_runtime(char_u *name, int flags)\n{\n    return source_in_path(p_rtp, name, flags, NULL);\n}\n\n/*\n * Just like source_runtime(), but use \"path\" instead of 'runtimepath'\n * and return the script ID in \"ret_sid\".\n */\n    int\nsource_in_path(char_u *path, char_u *name, int flags, int *ret_sid)\n{\n    return do_in_path_and_pp(path, name, flags, source_callback, ret_sid);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * Find \"name\" in 'runtimepath'. If found a new scriptitem is created for it\n * and it's script ID is returned.\n * If not found returns -1.\n */\n    int\nfind_script_in_rtp(char_u *name)\n{\n    int sid = -1;\n\n    (void)do_in_path_and_pp(p_rtp, name, DIP_NOAFTER,\n\t\t\t\t\t\t   find_script_callback, &sid);\n    return sid;\n}\n\n/*\n * Expand wildcards in \"pat\" and invoke do_source() for each match.\n */\n    static void\nsource_all_matches(char_u *pat)\n{\n    int\t    num_files;\n    char_u  **files;\n    int\t    i;\n\n    if (gen_expand_wildcards(1, &pat, &num_files, &files, EW_FILE) == OK)\n    {\n\tfor (i = 0; i < num_files; ++i)\n\t    (void)do_source(files[i], FALSE, DOSO_NONE, NULL);\n\tFreeWild(num_files, files);\n    }\n}\n\n/*\n * Add the package directory to 'runtimepath'.\n */\n    static int\nadd_pack_dir_to_rtp(char_u *fname)\n{\n    char_u  *p4, *p3, *p2, *p1, *p;\n    char_u  *entry;\n    char_u  *insp = NULL;\n    int\t    c;\n    char_u  *new_rtp;\n    int\t    keep;\n    size_t  oldlen;\n    size_t  addlen;\n    size_t  new_rtp_len;\n    char_u  *afterdir = NULL;\n    size_t  afterlen = 0;\n    char_u  *after_insp = NULL;\n    char_u  *ffname = NULL;\n    size_t  fname_len;\n    char_u  *buf = NULL;\n    char_u  *rtp_ffname;\n    int\t    match;\n    int\t    retval = FAIL;\n\n    p4 = p3 = p2 = p1 = get_past_head(fname);\n    for (p = p1; *p; MB_PTR_ADV(p))\n\tif (vim_ispathsep_nocolon(*p))\n\t{\n\t    p4 = p3; p3 = p2; p2 = p1; p1 = p;\n\t}\n\n    // now we have:\n    // rtp/pack/name/start/name\n    //    p4   p3   p2    p1\n    //\n    // find the part up to \"pack\" in 'runtimepath'\n    c = *++p4; // append pathsep in order to expand symlink\n    *p4 = NUL;\n    ffname = fix_fname(fname);\n    *p4 = c;\n    if (ffname == NULL)\n\treturn FAIL;\n\n    // Find \"ffname\" in \"p_rtp\", ignoring '/' vs '\\' differences.\n    // Also stop at the first \"after\" directory.\n    fname_len = STRLEN(ffname);\n    buf = alloc(MAXPATHL);\n    if (buf == NULL)\n\tgoto theend;\n    for (entry = p_rtp; *entry != NUL; )\n    {\n\tchar_u *cur_entry = entry;\n\n\tcopy_option_part(&entry, buf, MAXPATHL, \",\");\n\tif (insp == NULL)\n\t{\n\t    add_pathsep(buf);\n\t    rtp_ffname = fix_fname(buf);\n\t    if (rtp_ffname == NULL)\n\t\tgoto theend;\n\t    match = vim_fnamencmp(rtp_ffname, ffname, fname_len) == 0;\n\t    vim_free(rtp_ffname);\n\t    if (match)\n\t\t// Insert \"ffname\" after this entry (and comma).\n\t\tinsp = entry;\n\t}\n\n\tif ((p = (char_u *)strstr((char *)buf, \"after\")) != NULL\n\t\t&& p > buf\n\t\t&& vim_ispathsep(p[-1])\n\t\t&& (vim_ispathsep(p[5]) || p[5] == NUL || p[5] == ','))\n\t{\n\t    if (insp == NULL)\n\t\t// Did not find \"ffname\" before the first \"after\" directory,\n\t\t// insert it before this entry.\n\t\tinsp = cur_entry;\n\t    after_insp = cur_entry;\n\t    break;\n\t}\n    }\n\n    if (insp == NULL)\n\t// Both \"fname\" and \"after\" not found, append at the end.\n\tinsp = p_rtp + STRLEN(p_rtp);\n\n    // check if rtp/pack/name/start/name/after exists\n    afterdir = concat_fnames(fname, (char_u *)\"after\", TRUE);\n    if (afterdir != NULL && mch_isdir(afterdir))\n\tafterlen = STRLEN(afterdir) + 1; // add one for comma\n\n    oldlen = STRLEN(p_rtp);\n    addlen = STRLEN(fname) + 1; // add one for comma\n    new_rtp = alloc(oldlen + addlen + afterlen + 1); // add one for NUL\n    if (new_rtp == NULL)\n\tgoto theend;\n\n    // We now have 'rtp' parts: {keep}{keep_after}{rest}.\n    // Create new_rtp, first: {keep},{fname}\n    keep = (int)(insp - p_rtp);\n    mch_memmove(new_rtp, p_rtp, keep);\n    new_rtp_len = keep;\n    if (*insp == NUL)\n\tnew_rtp[new_rtp_len++] = ',';  // add comma before\n    mch_memmove(new_rtp + new_rtp_len, fname, addlen - 1);\n    new_rtp_len += addlen - 1;\n    if (*insp != NUL)\n\tnew_rtp[new_rtp_len++] = ',';  // add comma after\n\n    if (afterlen > 0 && after_insp != NULL)\n    {\n\tint keep_after = (int)(after_insp - p_rtp);\n\n\t// Add to new_rtp: {keep},{fname}{keep_after},{afterdir}\n\tmch_memmove(new_rtp + new_rtp_len, p_rtp + keep,\n\t\t\t\t\t\t\tkeep_after - keep);\n\tnew_rtp_len += keep_after - keep;\n\tmch_memmove(new_rtp + new_rtp_len, afterdir, afterlen - 1);\n\tnew_rtp_len += afterlen - 1;\n\tnew_rtp[new_rtp_len++] = ',';\n\tkeep = keep_after;\n    }\n\n    if (p_rtp[keep] != NUL)\n\t// Append rest: {keep},{fname}{keep_after},{afterdir}{rest}\n\tmch_memmove(new_rtp + new_rtp_len, p_rtp + keep, oldlen - keep + 1);\n    else\n\tnew_rtp[new_rtp_len] = NUL;\n\n    if (afterlen > 0 && after_insp == NULL)\n    {\n\t// Append afterdir when \"after\" was not found:\n\t// {keep},{fname}{rest},{afterdir}\n\tSTRCAT(new_rtp, \",\");\n\tSTRCAT(new_rtp, afterdir);\n    }\n\n    set_option_value_give_err((char_u *)\"rtp\", 0L, new_rtp, 0);\n    vim_free(new_rtp);\n    retval = OK;\n\ntheend:\n    vim_free(buf);\n    vim_free(ffname);\n    vim_free(afterdir);\n    return retval;\n}\n\n/*\n * Load scripts in \"plugin\" and \"ftdetect\" directories of the package.\n */\n    static int\nload_pack_plugin(char_u *fname)\n{\n    static char *plugpat = \"%s/plugin/**/*.vim\";\n    static char *ftpat = \"%s/ftdetect/*.vim\";\n    int\t\tlen;\n    char_u\t*ffname = fix_fname(fname);\n    char_u\t*pat = NULL;\n    int\t\tretval = FAIL;\n\n    if (ffname == NULL)\n\treturn FAIL;\n    len = (int)STRLEN(ffname) + (int)STRLEN(ftpat);\n    pat = alloc(len);\n    if (pat == NULL)\n\tgoto theend;\n    vim_snprintf((char *)pat, len, plugpat, ffname);\n    source_all_matches(pat);\n\n    {\n\tchar_u *cmd = vim_strsave((char_u *)\"g:did_load_filetypes\");\n\n\t// If runtime/filetype.vim wasn't loaded yet, the scripts will be\n\t// found when it loads.\n\tif (cmd != NULL && eval_to_number(cmd) > 0)\n\t{\n\t    do_cmdline_cmd((char_u *)\"augroup filetypedetect\");\n\t    vim_snprintf((char *)pat, len, ftpat, ffname);\n\t    source_all_matches(pat);\n\t    do_cmdline_cmd((char_u *)\"augroup END\");\n\t}\n\tvim_free(cmd);\n    }\n    vim_free(pat);\n    retval = OK;\n\ntheend:\n    vim_free(ffname);\n    return retval;\n}\n\n// used for \"cookie\" of add_pack_plugin()\nstatic int APP_ADD_DIR;\nstatic int APP_LOAD;\nstatic int APP_BOTH;\n\n    static void\nadd_pack_plugin(char_u *fname, void *cookie)\n{\n    if (cookie != &APP_LOAD)\n    {\n\tchar_u\t*buf = alloc(MAXPATHL);\n\tchar_u\t*p;\n\tint\tfound = FALSE;\n\n\tif (buf == NULL)\n\t    return;\n\tp = p_rtp;\n\twhile (*p != NUL)\n\t{\n\t    copy_option_part(&p, buf, MAXPATHL, \",\");\n\t    if (pathcmp((char *)buf, (char *)fname, -1) == 0)\n\t    {\n\t\tfound = TRUE;\n\t\tbreak;\n\t    }\n\t}\n\tvim_free(buf);\n\tif (!found)\n\t    // directory is not yet in 'runtimepath', add it\n\t    if (add_pack_dir_to_rtp(fname) == FAIL)\n\t\treturn;\n    }\n\n    if (cookie != &APP_ADD_DIR)\n\tload_pack_plugin(fname);\n}\n\n/*\n * Add all packages in the \"start\" directory to 'runtimepath'.\n */\n    void\nadd_pack_start_dirs(void)\n{\n    do_in_path(p_pp, (char_u *)\"pack/*/start/*\", DIP_ALL + DIP_DIR,\n\t\t\t\t\t       add_pack_plugin, &APP_ADD_DIR);\n}\n\n/*\n * Load plugins from all packages in the \"start\" directory.\n */\n    void\nload_start_packages(void)\n{\n    did_source_packages = TRUE;\n    do_in_path(p_pp, (char_u *)\"pack/*/start/*\", DIP_ALL + DIP_DIR,\n\t\t\t\t\t\t  add_pack_plugin, &APP_LOAD);\n}\n\n/*\n * \":packloadall\"\n * Find plugins in the package directories and source them.\n */\n    void\nex_packloadall(exarg_T *eap)\n{\n    if (!did_source_packages || eap->forceit)\n    {\n\t// First do a round to add all directories to 'runtimepath', then load\n\t// the plugins. This allows for plugins to use an autoload directory\n\t// of another plugin.\n\tadd_pack_start_dirs();\n\tload_start_packages();\n    }\n}\n\n/*\n * \":packadd[!] {name}\"\n */\n    void\nex_packadd(exarg_T *eap)\n{\n    static char *plugpat = \"pack/*/%s/%s\";\n    int\t\tlen;\n    char\t*pat;\n    int\t\tround;\n    int\t\tres = OK;\n\n    // Round 1: use \"start\", round 2: use \"opt\".\n    for (round = 1; round <= 2; ++round)\n    {\n\t// Only look under \"start\" when loading packages wasn't done yet.\n\tif (round == 1 && did_source_packages)\n\t    continue;\n\n\tlen = (int)STRLEN(plugpat) + (int)STRLEN(eap->arg) + 5;\n\tpat = alloc(len);\n\tif (pat == NULL)\n\t    return;\n\tvim_snprintf(pat, len, plugpat, round == 1 ? \"start\" : \"opt\", eap->arg);\n\t// The first round don't give a \"not found\" error, in the second round\n\t// only when nothing was found in the first round.\n\tres = do_in_path(p_pp, (char_u *)pat,\n\t\tDIP_ALL + DIP_DIR + (round == 2 && res == FAIL ? DIP_ERR : 0),\n\t\tadd_pack_plugin, eap->forceit ? &APP_ADD_DIR : &APP_BOTH);\n\tvim_free(pat);\n    }\n}\n#endif\n\n/*\n * Sort \"gap\" and remove duplicate entries.  \"gap\" is expected to contain a\n * list of file names in allocated memory.\n */\n    void\nremove_duplicates(garray_T *gap)\n{\n    int\t    i;\n    int\t    j;\n    char_u  **fnames = (char_u **)gap->ga_data;\n\n    sort_strings(fnames, gap->ga_len);\n    for (i = gap->ga_len - 1; i > 0; --i)\n\tif (fnamecmp(fnames[i - 1], fnames[i]) == 0)\n\t{\n\t    vim_free(fnames[i]);\n\t    for (j = i + 1; j < gap->ga_len; ++j)\n\t\tfnames[j - 1] = fnames[j];\n\t    --gap->ga_len;\n\t}\n}\n\n/*\n * Expand color scheme, compiler or filetype names.\n * Search from 'runtimepath':\n *   'runtimepath'/{dirnames}/{pat}.vim\n * When \"flags\" has DIP_START: search also from 'start' of 'packpath':\n *   'packpath'/pack/ * /start/ * /{dirnames}/{pat}.vim\n * When \"flags\" has DIP_OPT: search also from 'opt' of 'packpath':\n *   'packpath'/pack/ * /opt/ * /{dirnames}/{pat}.vim\n * \"dirnames\" is an array with one or more directory names.\n */\n    int\nExpandRTDir(\n    char_u\t*pat,\n    int\t\tflags,\n    int\t\t*num_file,\n    char_u\t***file,\n    char\t*dirnames[])\n{\n    char_u\t*s;\n    char_u\t*e;\n    char_u\t*match;\n    garray_T\tga;\n    int\t\ti;\n    int\t\tpat_len;\n\n    *num_file = 0;\n    *file = NULL;\n    pat_len = (int)STRLEN(pat);\n    ga_init2(&ga, sizeof(char *), 10);\n\n    for (i = 0; dirnames[i] != NULL; ++i)\n    {\n\ts = alloc(STRLEN(dirnames[i]) + pat_len + 7);\n\tif (s == NULL)\n\t{\n\t    ga_clear_strings(&ga);\n\t    return FAIL;\n\t}\n\tsprintf((char *)s, \"%s/%s*.vim\", dirnames[i], pat);\n\tglobpath(p_rtp, s, &ga, 0);\n\tvim_free(s);\n    }\n\n    if (flags & DIP_START) {\n\tfor (i = 0; dirnames[i] != NULL; ++i)\n\t{\n\t    s = alloc(STRLEN(dirnames[i]) + pat_len + 22);\n\t    if (s == NULL)\n\t    {\n\t\tga_clear_strings(&ga);\n\t\treturn FAIL;\n\t    }\n\t    sprintf((char *)s, \"pack/*/start/*/%s/%s*.vim\", dirnames[i], pat);\n\t    globpath(p_pp, s, &ga, 0);\n\t    vim_free(s);\n\t}\n    }\n\n    if (flags & DIP_OPT) {\n\tfor (i = 0; dirnames[i] != NULL; ++i)\n\t{\n\t    s = alloc(STRLEN(dirnames[i]) + pat_len + 20);\n\t    if (s == NULL)\n\t    {\n\t\tga_clear_strings(&ga);\n\t\treturn FAIL;\n\t    }\n\t    sprintf((char *)s, \"pack/*/opt/*/%s/%s*.vim\", dirnames[i], pat);\n\t    globpath(p_pp, s, &ga, 0);\n\t    vim_free(s);\n\t}\n    }\n\n    for (i = 0; i < ga.ga_len; ++i)\n    {\n\tmatch = ((char_u **)ga.ga_data)[i];\n\ts = match;\n\te = s + STRLEN(s);\n\tif (e - 4 > s && STRNICMP(e - 4, \".vim\", 4) == 0)\n\t{\n\t    e -= 4;\n\t    for (s = e; s > match; MB_PTR_BACK(match, s))\n\t\tif (s < match || vim_ispathsep(*s))\n\t\t    break;\n\t    ++s;\n\t    *e = NUL;\n\t    mch_memmove(match, s, e - s + 1);\n\t}\n    }\n\n    if (ga.ga_len == 0)\n\treturn FAIL;\n\n    // Sort and remove duplicates which can happen when specifying multiple\n    // directories in dirnames.\n    remove_duplicates(&ga);\n\n    *file = ga.ga_data;\n    *num_file = ga.ga_len;\n    return OK;\n}\n\n/*\n * Expand loadplugin names:\n * 'packpath'/pack/ * /opt/{pat}\n */\n    int\nExpandPackAddDir(\n    char_u\t*pat,\n    int\t\t*num_file,\n    char_u\t***file)\n{\n    char_u\t*s;\n    char_u\t*e;\n    char_u\t*match;\n    garray_T\tga;\n    int\t\ti;\n    int\t\tpat_len;\n\n    *num_file = 0;\n    *file = NULL;\n    pat_len = (int)STRLEN(pat);\n    ga_init2(&ga, sizeof(char *), 10);\n\n    s = alloc(pat_len + 26);\n    if (s == NULL)\n    {\n\tga_clear_strings(&ga);\n\treturn FAIL;\n    }\n    sprintf((char *)s, \"pack/*/opt/%s*\", pat);\n    globpath(p_pp, s, &ga, 0);\n    vim_free(s);\n\n    for (i = 0; i < ga.ga_len; ++i)\n    {\n\tmatch = ((char_u **)ga.ga_data)[i];\n\ts = gettail(match);\n\te = s + STRLEN(s);\n\tmch_memmove(match, s, e - s + 1);\n    }\n\n    if (ga.ga_len == 0)\n\treturn FAIL;\n\n    // Sort and remove duplicates which can happen when specifying multiple\n    // directories in dirnames.\n    remove_duplicates(&ga);\n\n    *file = ga.ga_data;\n    *num_file = ga.ga_len;\n    return OK;\n}\n\n    static void\ncmd_source(char_u *fname, exarg_T *eap)\n{\n    int clearvars = FALSE;\n\n    if (*fname != NUL && STRNCMP(fname, \"++clear\", 7) == 0)\n    {\n\t// ++clear argument is supplied\n\tclearvars = TRUE;\n\tfname = fname + 7;\n\tif (*fname != NUL)\n\t{\n\t    semsg(_(e_invalid_argument_str), eap->arg);\n\t    return;\n\t}\n    }\n\n    if (*fname != NUL && eap != NULL && eap->addr_count > 0)\n    {\n\t// if a filename is specified to :source, then a range is not allowed\n\temsg(_(e_no_range_allowed));\n\treturn;\n    }\n\n    if (eap != NULL && *fname == NUL)\n    {\n\tif (eap->forceit)\n\t    // a file name is needed to source normal mode commands\n\t    emsg(_(e_argument_required));\n\telse\n\t    // source ex commands from the current buffer\n\t    do_source_ext(NULL, FALSE, FALSE, NULL, eap, clearvars);\n    }\n    else if (eap != NULL && eap->forceit)\n\t// \":source!\": read Normal mode commands\n\t// Need to execute the commands directly.  This is required at least\n\t// for:\n\t// - \":g\" command busy\n\t// - after \":argdo\", \":windo\" or \":bufdo\"\n\t// - another command follows\n\t// - inside a loop\n\topenscript(fname, global_busy || listcmd_busy || eap->nextcmd != NULL\n#ifdef FEAT_EVAL\n\t\t\t\t\t\t || eap->cstack->cs_idx >= 0\n#endif\n\t\t\t\t\t\t );\n\n    // \":source\" read ex commands\n    else if (do_source(fname, FALSE, DOSO_NONE, NULL) == FAIL)\n\tsemsg(_(e_cant_open_file_str), fname);\n}\n\n/*\n * \":source {fname}\"\n */\n    void\nex_source(exarg_T *eap)\n{\n#ifdef FEAT_BROWSE\n    if (cmdmod.cmod_flags & CMOD_BROWSE)\n    {\n\tchar_u *fname = NULL;\n\n\tfname = do_browse(0, (char_u *)_(\"Source Vim script\"), eap->arg,\n\t\t\t\t      NULL, NULL,\n\t\t\t\t      (char_u *)_(BROWSE_FILTER_MACROS), NULL);\n\tif (fname != NULL)\n\t{\n\t    cmd_source(fname, eap);\n\t    vim_free(fname);\n\t}\n    }\n    else\n#endif\n\tcmd_source(eap->arg, eap);\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * \":options\"\n */\n    void\nex_options(\n    exarg_T\t*eap UNUSED)\n{\n    char_u  buf[500];\n    int\t    multi_mods = 0;\n\n    buf[0] = NUL;\n    (void)add_win_cmd_modifers(buf, &cmdmod, &multi_mods);\n\n    vim_setenv((char_u *)\"OPTWIN_CMD\", buf);\n    cmd_source((char_u *)SYS_OPTWIN_FILE, NULL);\n}\n#endif\n\n/*\n * \":source\" and associated commands.\n */\n\n#ifdef FEAT_EVAL\n/*\n * Return the address holding the next breakpoint line for a source cookie.\n */\n    linenr_T *\nsource_breakpoint(void *cookie)\n{\n    return &((source_cookie_T *)cookie)->breakpoint;\n}\n\n/*\n * Return the address holding the debug tick for a source cookie.\n */\n    int *\nsource_dbg_tick(void *cookie)\n{\n    return &((source_cookie_T *)cookie)->dbg_tick;\n}\n\n/*\n * Return the nesting level for a source cookie.\n */\n    int\nsource_level(void *cookie)\n{\n    return ((source_cookie_T *)cookie)->level;\n}\n\n/*\n * Return the readahead line. Note that the pointer may become invalid when\n * getting the next line, if it's concatenated with the next one.\n */\n    char_u *\nsource_nextline(void *cookie)\n{\n    return ((source_cookie_T *)cookie)->nextline;\n}\n#endif\n\n#if (defined(MSWIN) && defined(FEAT_CSCOPE)) || defined(HAVE_FD_CLOEXEC)\n# define USE_FOPEN_NOINH\n/*\n * Special function to open a file without handle inheritance.\n * When possible the handle is closed on exec().\n */\n    static FILE *\nfopen_noinh_readbin(char *filename)\n{\n# ifdef MSWIN\n    int\tfd_tmp = mch_open(filename, O_RDONLY | O_BINARY | O_NOINHERIT, 0);\n# else\n    int\tfd_tmp = mch_open(filename, O_RDONLY, 0);\n# endif\n\n    if (fd_tmp == -1)\n\treturn NULL;\n\n# ifdef HAVE_FD_CLOEXEC\n    {\n\tint fdflags = fcntl(fd_tmp, F_GETFD);\n\tif (fdflags >= 0 && (fdflags & FD_CLOEXEC) == 0)\n\t    (void)fcntl(fd_tmp, F_SETFD, fdflags | FD_CLOEXEC);\n    }\n# endif\n\n    return fdopen(fd_tmp, READBIN);\n}\n#endif\n\n/*\n * Initialization for sourcing lines from the current buffer. Reads all the\n * lines from the buffer and stores it in the cookie grow array.\n * Returns a pointer to the name \":source buffer=<n>\" on success and NULL on\n * failure.\n */\n    static char_u *\ndo_source_buffer_init(source_cookie_T *sp, exarg_T *eap)\n{\n    linenr_T\tcurr_lnum;\n    char_u\t*line = NULL;\n    char_u\t*fname;\n\n    CLEAR_FIELD(*sp);\n\n    if (curbuf == NULL)\n\treturn NULL;\n\n    // Use \":source buffer=<num>\" as the script name\n    vim_snprintf((char *)IObuff, IOSIZE, \":source buffer=%d\", curbuf->b_fnum);\n    fname = vim_strsave(IObuff);\n    if (fname == NULL)\n\treturn NULL;\n\n    ga_init2(&sp->buflines, sizeof(char_u *), 100);\n\n    // Copy the lines from the buffer into a grow array\n    for (curr_lnum = eap->line1; curr_lnum <= eap->line2; curr_lnum++)\n    {\n\tline = vim_strsave(ml_get(curr_lnum));\n\tif (line == NULL)\n\t    goto errret;\n\tif (ga_add_string(&sp->buflines, line) == FAIL)\n\t    goto errret;\n\tline = NULL;\n    }\n    sp->buf_lnum = 0;\n    sp->source_from_buf = TRUE;\n\n    return fname;\n\nerrret:\n    vim_free(fname);\n    vim_free(line);\n    ga_clear_strings(&sp->buflines);\n    return NULL;\n}\n\n/*\n * Read the file \"fname\" and execute its lines as EX commands.\n * When \"ret_sid\" is not NULL and we loaded the script before, don't load it\n * again.\n *\n * The 'eap' argument is used when sourcing lines from a buffer instead of a\n * file.\n *\n * If 'clearvars' is TRUE, then for scripts which are loaded more than\n * once, clear all the functions and variables previously defined in that\n * script.\n *\n * This function may be called recursively!\n *\n * Return FAIL if file could not be opened, OK otherwise.\n * If a scriptitem_T was found or created \"*ret_sid\" is set to the SID.\n */\n    static int\ndo_source_ext(\n    char_u\t*fname,\n    int\t\tcheck_other,\t    // check for .vimrc and _vimrc\n    int\t\tis_vimrc,\t    // DOSO_ value\n    int\t\t*ret_sid UNUSED,\n    exarg_T\t*eap,\n    int\t\tclearvars UNUSED)\n{\n    source_cookie_T\t    cookie;\n    char_u\t\t    *p;\n    char_u\t\t    *fname_exp;\n    char_u\t\t    *firstline = NULL;\n    int\t\t\t    retval = FAIL;\n    sctx_T\t\t    save_current_sctx;\n#ifdef FEAT_EVAL\n    funccal_entry_T\t    funccalp_entry;\n    int\t\t\t    save_debug_break_level = debug_break_level;\n    int\t\t\t    sid;\n    scriptitem_T\t    *si = NULL;\n    int\t\t\t    save_estack_compiling = estack_compiling;\n#endif\n#ifdef STARTUPTIME\n    struct timeval\t    tv_rel;\n    struct timeval\t    tv_start;\n#endif\n#ifdef FEAT_PROFILE\n    proftime_T\t\t    wait_start;\n#endif\n    int\t\t\t    save_sticky_cmdmod_flags = sticky_cmdmod_flags;\n    int\t\t\t    trigger_source_post = FALSE;\n    ESTACK_CHECK_DECLARATION\n\n    CLEAR_FIELD(cookie);\n    if (fname == NULL)\n    {\n\t// sourcing lines from a buffer\n\tfname_exp = do_source_buffer_init(&cookie, eap);\n\tif (fname_exp == NULL)\n\t    return FAIL;\n    }\n    else\n    {\n\tp = expand_env_save(fname);\n\tif (p == NULL)\n\t    return retval;\n\tfname_exp = fix_fname(p);\n\tvim_free(p);\n\tif (fname_exp == NULL)\n\t    return retval;\n\tif (mch_isdir(fname_exp))\n\t{\n\t    smsg(_(\"Cannot source a directory: \\\"%s\\\"\"), fname);\n\t    goto theend;\n\t}\n    }\n#ifdef FEAT_EVAL\n    estack_compiling = FALSE;\n\n    // See if we loaded this script before.\n    sid = find_script_by_name(fname_exp);\n    if (sid > 0 && ret_sid != NULL\n\t\t\t  && SCRIPT_ITEM(sid)->sn_state != SN_STATE_NOT_LOADED)\n    {\n\t// Already loaded and no need to load again, return here.\n\t*ret_sid = sid;\n\tretval = OK;\n\tgoto theend;\n    }\n#endif\n\n    // Apply SourceCmd autocommands, they should get the file and source it.\n    if (has_autocmd(EVENT_SOURCECMD, fname_exp, NULL)\n\t    && apply_autocmds(EVENT_SOURCECMD, fname_exp, fname_exp,\n\t\t\t\t\t\t\t       FALSE, curbuf))\n    {\n#ifdef FEAT_EVAL\n\tretval = aborting() ? FAIL : OK;\n#else\n\tretval = OK;\n#endif\n\tif (retval == OK)\n\t    // Apply SourcePost autocommands.\n\t    apply_autocmds(EVENT_SOURCEPOST, fname_exp, fname_exp,\n\t\t\t\t\t\t\t\tFALSE, curbuf);\n\tgoto theend;\n    }\n\n    // Apply SourcePre autocommands, they may get the file.\n    apply_autocmds(EVENT_SOURCEPRE, fname_exp, fname_exp, FALSE, curbuf);\n\n    if (!cookie.source_from_buf)\n    {\n#ifdef USE_FOPEN_NOINH\n\tcookie.fp = fopen_noinh_readbin((char *)fname_exp);\n#else\n\tcookie.fp = mch_fopen((char *)fname_exp, READBIN);\n#endif\n    }\n    if (cookie.fp == NULL && check_other)\n    {\n\t// Try again, replacing file name \".vimrc\" by \"_vimrc\" or vice versa,\n\t// and \".exrc\" by \"_exrc\" or vice versa.\n\tp = gettail(fname_exp);\n\tif ((*p == '.' || *p == '_')\n\t\t&& (STRICMP(p + 1, \"vimrc\") == 0\n\t\t    || STRICMP(p + 1, \"gvimrc\") == 0\n\t\t    || STRICMP(p + 1, \"exrc\") == 0))\n\t{\n\t    if (*p == '_')\n\t\t*p = '.';\n\t    else\n\t\t*p = '_';\n#ifdef USE_FOPEN_NOINH\n\t    cookie.fp = fopen_noinh_readbin((char *)fname_exp);\n#else\n\t    cookie.fp = mch_fopen((char *)fname_exp, READBIN);\n#endif\n\t}\n    }\n\n    if (cookie.fp == NULL && !cookie.source_from_buf)\n    {\n\tif (p_verbose > 0)\n\t{\n\t    verbose_enter();\n\t    if (SOURCING_NAME == NULL)\n\t\tsmsg(_(\"could not source \\\"%s\\\"\"), fname);\n\t    else\n\t\tsmsg(_(\"line %ld: could not source \\\"%s\\\"\"),\n\t\t\t\t\t\t\tSOURCING_LNUM, fname);\n\t    verbose_leave();\n\t}\n\tgoto theend;\n    }\n\n    // The file exists.\n    // - In verbose mode, give a message.\n    // - For a vimrc file, may want to set 'compatible', call vimrc_found().\n    if (p_verbose > 1)\n    {\n\tverbose_enter();\n\tif (SOURCING_NAME == NULL)\n\t    smsg(_(\"sourcing \\\"%s\\\"\"), fname);\n\telse\n\t    smsg(_(\"line %ld: sourcing \\\"%s\\\"\"), SOURCING_LNUM, fname);\n\tverbose_leave();\n    }\n    if (is_vimrc == DOSO_VIMRC)\n\tvimrc_found(fname_exp, (char_u *)\"MYVIMRC\");\n    else if (is_vimrc == DOSO_GVIMRC)\n\tvimrc_found(fname_exp, (char_u *)\"MYGVIMRC\");\n\n#ifdef USE_CRNL\n    // If no automatic file format: Set default to CR-NL.\n    if (*p_ffs == NUL)\n\tcookie.fileformat = EOL_DOS;\n    else\n\tcookie.fileformat = EOL_UNKNOWN;\n#endif\n\n    if (fname == NULL)\n\t// When sourcing a range of lines from a buffer, use the buffer line\n\t// number.\n\tcookie.sourcing_lnum = eap->line1 - 1;\n    else\n\tcookie.sourcing_lnum = 0;\n\n#ifdef FEAT_EVAL\n    // Check if this script has a breakpoint.\n    cookie.breakpoint = dbg_find_breakpoint(TRUE, fname_exp, (linenr_T)0);\n    cookie.fname = fname_exp;\n    cookie.dbg_tick = debug_tick;\n\n    cookie.level = ex_nesting_level;\n#endif\n\n    // Keep the sourcing name/lnum, for recursive calls.\n    estack_push(ETYPE_SCRIPT, fname_exp, 0);\n    ESTACK_CHECK_SETUP\n\n#ifdef STARTUPTIME\n    if (time_fd != NULL)\n\ttime_push(&tv_rel, &tv_start);\n#endif\n\n    // \"legacy\" does not apply to commands in the script\n    sticky_cmdmod_flags = 0;\n\n    save_current_sctx = current_sctx;\n    if (cmdmod.cmod_flags & CMOD_VIM9CMD)\n\t// When the \":vim9cmd\" command modifier is used, source the script as a\n\t// Vim9 script.\n\tcurrent_sctx.sc_version = SCRIPT_VERSION_VIM9;\n    else\n\tcurrent_sctx.sc_version = 1;  // default script version\n\n#ifdef FEAT_EVAL\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tprof_child_enter(&wait_start);\t\t// entering a child now\n# endif\n\n    // Don't use local function variables, if called from a function.\n    // Also starts profiling timer for nested script.\n    save_funccal(&funccalp_entry);\n\n    current_sctx.sc_lnum = 0;\n\n    // Check if this script was sourced before to find its SID.\n    // Always use a new sequence number.\n    current_sctx.sc_seq = ++last_current_SID_seq;\n    if (sid > 0)\n    {\n\thashtab_T\t*ht;\n\tint\t\ttodo;\n\thashitem_T\t*hi;\n\tdictitem_T\t*di;\n\n\t// loading the same script again\n\tcurrent_sctx.sc_sid = sid;\n\tsi = SCRIPT_ITEM(sid);\n\tif (si->sn_state == SN_STATE_NOT_LOADED)\n\t{\n\t    // this script was found but not loaded yet\n\t    si->sn_state = SN_STATE_NEW;\n\t}\n\telse\n\t{\n\t    si->sn_state = SN_STATE_RELOAD;\n\n\t    if (!clearvars)\n\t    {\n\t\t// Script-local variables remain but \"const\" can be set again.\n\t\t// In Vim9 script variables will be cleared when \"vim9script\"\n\t\t// is encountered without the \"noclear\" argument.\n\t\tht = &SCRIPT_VARS(sid);\n\t\ttodo = (int)ht->ht_used;\n\t\tfor (hi = ht->ht_array; todo > 0; ++hi)\n\t\t    if (!HASHITEM_EMPTY(hi))\n\t\t    {\n\t\t\t--todo;\n\t\t\tdi = HI2DI(hi);\n\t\t\tdi->di_flags |= DI_FLAGS_RELOAD;\n\t\t    }\n\t\t// imports can be redefined once\n\t\tmark_imports_for_reload(sid);\n\t    }\n\t    else\n\t\tclear_vim9_scriptlocal_vars(sid);\n\n\t    // reset version, \"vim9script\" may have been added or removed.\n\t    si->sn_version = 1;\n\t}\n    }\n    else\n    {\n\tint error = OK;\n\n\t// It's new, generate a new SID and initialize the scriptitem.\n\tcurrent_sctx.sc_sid = get_new_scriptitem(&error);\n\tif (error == FAIL)\n\t    goto almosttheend;\n\tsi = SCRIPT_ITEM(current_sctx.sc_sid);\n\tsi->sn_name = fname_exp;\n\tfname_exp = vim_strsave(si->sn_name);  // used for autocmd\n\tif (ret_sid != NULL)\n\t    *ret_sid = current_sctx.sc_sid;\n\n\t// Remember the \"is_vimrc\" flag for when the file is sourced again.\n\tsi->sn_is_vimrc = is_vimrc;\n    }\n\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n    {\n\tint\tforceit;\n\n\t// Check if we do profiling for this script.\n\tif (!si->sn_prof_on && has_profiling(TRUE, si->sn_name, &forceit))\n\t{\n\t    script_do_profile(si);\n\t    si->sn_pr_force = forceit;\n\t}\n\tif (si->sn_prof_on)\n\t{\n\t    ++si->sn_pr_count;\n\t    profile_start(&si->sn_pr_start);\n\t    profile_zero(&si->sn_pr_children);\n\t}\n    }\n# endif\n#endif\n\n    cookie.conv.vc_type = CONV_NONE;\t\t// no conversion\n\n    // Read the first line so we can check for a UTF-8 BOM.\n    firstline = getsourceline(0, (void *)&cookie, 0, TRUE);\n    if (firstline != NULL && STRLEN(firstline) >= 3 && firstline[0] == 0xef\n\t\t\t      && firstline[1] == 0xbb && firstline[2] == 0xbf)\n    {\n\t// Found BOM; setup conversion, skip over BOM and recode the line.\n\tconvert_setup(&cookie.conv, (char_u *)\"utf-8\", p_enc);\n\tp = string_convert(&cookie.conv, firstline + 3, NULL);\n\tif (p == NULL)\n\t    p = vim_strsave(firstline + 3);\n\tif (p != NULL)\n\t{\n\t    vim_free(firstline);\n\t    firstline = p;\n\t}\n    }\n\n    // Call do_cmdline, which will call getsourceline() to get the lines.\n    do_cmdline(firstline, getsourceline, (void *)&cookie,\n\t\t\t\t     DOCMD_VERBOSE|DOCMD_NOWAIT|DOCMD_REPEAT);\n    retval = OK;\n\n#ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n    {\n\t// Get \"si\" again, \"script_items\" may have been reallocated.\n\tsi = SCRIPT_ITEM(current_sctx.sc_sid);\n\tif (si->sn_prof_on)\n\t{\n\t    profile_end(&si->sn_pr_start);\n\t    profile_sub_wait(&wait_start, &si->sn_pr_start);\n\t    profile_add(&si->sn_pr_total, &si->sn_pr_start);\n\t    profile_self(&si->sn_pr_self, &si->sn_pr_start,\n\t\t\t\t\t\t\t &si->sn_pr_children);\n\t}\n    }\n#endif\n\n    if (got_int)\n\temsg(_(e_interrupted));\n    ESTACK_CHECK_NOW\n    estack_pop();\n    if (p_verbose > 1)\n    {\n\tverbose_enter();\n\tsmsg(_(\"finished sourcing %s\"), fname);\n\tif (SOURCING_NAME != NULL)\n\t    smsg(_(\"continuing in %s\"), SOURCING_NAME);\n\tverbose_leave();\n    }\n#ifdef STARTUPTIME\n    if (time_fd != NULL)\n    {\n\tvim_snprintf((char *)IObuff, IOSIZE, \"sourcing %s\", fname);\n\ttime_msg((char *)IObuff, &tv_start);\n\ttime_pop(&tv_rel);\n    }\n#endif\n\n    if (!got_int)\n\ttrigger_source_post = TRUE;\n\n#ifdef FEAT_EVAL\n    // After a \"finish\" in debug mode, need to break at first command of next\n    // sourced file.\n    if (save_debug_break_level > ex_nesting_level\n\t    && debug_break_level == ex_nesting_level)\n\t++debug_break_level;\n#endif\n\n#ifdef FEAT_EVAL\nalmosttheend:\n    // If \"sn_save_cpo\" is set that means we encountered \"vim9script\": restore\n    // 'cpoptions', unless in the main .vimrc file.\n    // Get \"si\" again, \"script_items\" may have been reallocated.\n    si = SCRIPT_ITEM(current_sctx.sc_sid);\n    if (si->sn_save_cpo != NULL && si->sn_is_vimrc == DOSO_NONE)\n    {\n\tif (STRCMP(p_cpo, CPO_VIM) != 0)\n\t{\n\t    char_u *f;\n\t    char_u *t;\n\n\t    // 'cpo' was changed in the script.  Apply the same change to the\n\t    // saved value, if possible.\n\t    for (f = (char_u *)CPO_VIM; *f != NUL; ++f)\n\t\tif (vim_strchr(p_cpo, *f) == NULL\n\t\t\t&& (t = vim_strchr(si->sn_save_cpo, *f)) != NULL)\n\t\t    // flag was removed, also remove it from the saved 'cpo'\n\t\t    mch_memmove(t, t + 1, STRLEN(t));\n\t    for (f = p_cpo; *f != NUL; ++f)\n\t\tif (vim_strchr((char_u *)CPO_VIM, *f) == NULL\n\t\t\t&& vim_strchr(si->sn_save_cpo, *f) == NULL)\n\t\t{\n\t\t    // flag was added, also add it to the saved 'cpo'\n\t\t    t = alloc(STRLEN(si->sn_save_cpo) + 2);\n\t\t    if (t != NULL)\n\t\t    {\n\t\t\t*t = *f;\n\t\t\tSTRCPY(t + 1, si->sn_save_cpo);\n\t\t\tvim_free(si->sn_save_cpo);\n\t\t\tsi->sn_save_cpo = t;\n\t\t    }\n\t\t}\n\t}\n\tset_option_value_give_err((char_u *)\"cpo\",\n\t\t\t\t\t   0L, si->sn_save_cpo, OPT_NO_REDRAW);\n    }\n    VIM_CLEAR(si->sn_save_cpo);\n\n    restore_funccal();\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tprof_child_exit(&wait_start);\t\t// leaving a child now\n# endif\n#endif\n    current_sctx = save_current_sctx;\n\n    if (cookie.fp != NULL)\n\tfclose(cookie.fp);\n    if (cookie.source_from_buf)\n\tga_clear_strings(&cookie.buflines);\n    vim_free(cookie.nextline);\n    vim_free(firstline);\n    convert_setup(&cookie.conv, NULL, NULL);\n\n    if (trigger_source_post)\n\tapply_autocmds(EVENT_SOURCEPOST, fname_exp, fname_exp, FALSE, curbuf);\n\ntheend:\n    vim_free(fname_exp);\n    sticky_cmdmod_flags = save_sticky_cmdmod_flags;\n#ifdef FEAT_EVAL\n    estack_compiling = save_estack_compiling;\n#endif\n    return retval;\n}\n\n    int\ndo_source(\n    char_u\t*fname,\n    int\t\tcheck_other,\t    // check for .vimrc and _vimrc\n    int\t\tis_vimrc,\t    // DOSO_ value\n    int\t\t*ret_sid UNUSED)\n{\n    return do_source_ext(fname, check_other, is_vimrc, ret_sid, NULL, FALSE);\n}\n\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n\n/*\n * \":scriptnames\"\n */\n    void\nex_scriptnames(exarg_T *eap)\n{\n    int i;\n\n    if (eap->addr_count > 0 || *eap->arg != NUL)\n    {\n\t// :script {scriptId}: edit the script\n\tif (eap->addr_count > 0 && !SCRIPT_ID_VALID(eap->line2))\n\t    emsg(_(e_invalid_argument));\n\telse\n\t{\n\t    if (eap->addr_count > 0)\n\t\teap->arg = SCRIPT_ITEM(eap->line2)->sn_name;\n\t    else\n\t    {\n\t\texpand_env(eap->arg, NameBuff, MAXPATHL);\n\t\teap->arg = NameBuff;\n\t    }\n\t    do_exedit(eap, NULL);\n\t}\n\treturn;\n    }\n\n    for (i = 1; i <= script_items.ga_len && !got_int; ++i)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(i);\n\n\tif (si->sn_name != NULL)\n\t{\n\t    home_replace(NULL, si->sn_name, NameBuff, MAXPATHL, TRUE);\n\t    vim_snprintf((char *)IObuff, IOSIZE, \"%3d%s: %s\",\n\t\t    i,\n\t\t    si->sn_state == SN_STATE_NOT_LOADED ? \" A\" : \"\",\n\t\t    NameBuff);\n\t    if (!message_filtered(IObuff))\n\t    {\n\t\tmsg_putchar('\\n');\n\t\tmsg_outtrans(IObuff);\n\t\tout_flush();\t    // output one line at a time\n\t\tui_breakcheck();\n\t    }\n\t}\n    }\n}\n\n# if defined(BACKSLASH_IN_FILENAME) || defined(PROTO)\n/*\n * Fix slashes in the list of script names for 'shellslash'.\n */\n    void\nscriptnames_slash_adjust(void)\n{\n    int i;\n\n    for (i = 1; i <= script_items.ga_len; ++i)\n\tif (SCRIPT_ITEM(i)->sn_name != NULL)\n\t    slash_adjust(SCRIPT_ITEM(i)->sn_name);\n}\n# endif\n\n/*\n * Get a pointer to a script name.  Used for \":verbose set\".\n * Message appended to \"Last set from \"\n */\n    char_u *\nget_scriptname(scid_T id)\n{\n    if (id == SID_MODELINE)\n\treturn (char_u *)_(\"modeline\");\n    if (id == SID_CMDARG)\n\treturn (char_u *)_(\"--cmd argument\");\n    if (id == SID_CARG)\n\treturn (char_u *)_(\"-c argument\");\n    if (id == SID_ENV)\n\treturn (char_u *)_(\"environment variable\");\n    if (id == SID_ERROR)\n\treturn (char_u *)_(\"error handler\");\n    if (id == SID_WINLAYOUT)\n\treturn (char_u *)_(\"changed window size\");\n    return SCRIPT_ITEM(id)->sn_name;\n}\n\n# if defined(EXITFREE) || defined(PROTO)\n    void\nfree_scriptnames(void)\n{\n    int\t\t\ti;\n\n    for (i = script_items.ga_len; i > 0; --i)\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(i);\n\n\t// the variables themselves are cleared in evalvars_clear()\n\tvim_free(si->sn_vars);\n\n\tvim_free(si->sn_name);\n\tfree_imports_and_script_vars(i);\n\tfree_string_option(si->sn_save_cpo);\n#  ifdef FEAT_PROFILE\n\tga_clear(&si->sn_prl_ga);\n#  endif\n\tvim_free(si->sn_autoload_prefix);\n\tvim_free(si);\n    }\n    ga_clear(&script_items);\n}\n\n    void\nfree_autoload_scriptnames(void)\n{\n    ga_clear_strings(&ga_loaded);\n}\n# endif\n\n    linenr_T\nget_sourced_lnum(\n\tchar_u *(*fgetline)(int, void *, int, getline_opt_T),\n\tvoid *cookie)\n{\n    return fgetline == getsourceline\n\t\t\t? ((source_cookie_T *)cookie)->sourcing_lnum\n\t\t\t: SOURCING_LNUM;\n}\n#endif\n\n    static char_u *\nget_one_sourceline(source_cookie_T *sp)\n{\n    garray_T\t\tga;\n    int\t\t\tlen;\n    int\t\t\tc;\n    char_u\t\t*buf;\n#ifdef USE_CRNL\n    int\t\t\thas_cr;\t\t// CR-LF found\n#endif\n    int\t\t\thave_read = FALSE;\n\n    // use a growarray to store the sourced line\n    ga_init2(&ga, 1, 250);\n\n    // Loop until there is a finished line (or end-of-file).\n    ++sp->sourcing_lnum;\n    for (;;)\n    {\n\t// make room to read at least 120 (more) characters\n\tif (ga_grow(&ga, 120) == FAIL)\n\t    break;\n\tif (sp->source_from_buf)\n\t{\n\t    if (sp->buf_lnum >= sp->buflines.ga_len)\n\t\tbreak;\t\t    // all the lines are processed\n\t    ga_concat(&ga, ((char_u **)sp->buflines.ga_data)[sp->buf_lnum]);\n\t    sp->buf_lnum++;\n\t    if (ga_grow(&ga, 1) == FAIL)\n\t\tbreak;\n\t    buf = (char_u *)ga.ga_data;\n\t    buf[ga.ga_len++] = NUL;\n\t    len = ga.ga_len;\n\t}\n\telse\n\t{\n\t    buf = (char_u *)ga.ga_data;\n\t    if (fgets((char *)buf + ga.ga_len, ga.ga_maxlen - ga.ga_len,\n\t\t\tsp->fp) == NULL)\n\t\tbreak;\n\t    len = ga.ga_len + (int)STRLEN(buf + ga.ga_len);\n\t}\n#ifdef USE_CRNL\n\t// Ignore a trailing CTRL-Z, when in Dos mode.\tOnly recognize the\n\t// CTRL-Z by its own, or after a NL.\n\tif (\t   (len == 1 || (len >= 2 && buf[len - 2] == '\\n'))\n\t\t&& sp->fileformat == EOL_DOS\n\t\t&& buf[len - 1] == Ctrl_Z)\n\t{\n\t    buf[len - 1] = NUL;\n\t    break;\n\t}\n#endif\n\n\thave_read = TRUE;\n\tga.ga_len = len;\n\n\t// If the line was longer than the buffer, read more.\n\tif (ga.ga_maxlen - ga.ga_len == 1 && buf[len - 1] != '\\n')\n\t    continue;\n\n\tif (len >= 1 && buf[len - 1] == '\\n')\t// remove trailing NL\n\t{\n#ifdef USE_CRNL\n\t    has_cr = (len >= 2 && buf[len - 2] == '\\r');\n\t    if (sp->fileformat == EOL_UNKNOWN)\n\t    {\n\t\tif (has_cr)\n\t\t    sp->fileformat = EOL_DOS;\n\t\telse\n\t\t    sp->fileformat = EOL_UNIX;\n\t    }\n\n\t    if (sp->fileformat == EOL_DOS)\n\t    {\n\t\tif (has_cr)\t    // replace trailing CR\n\t\t{\n\t\t    buf[len - 2] = '\\n';\n\t\t    --len;\n\t\t    --ga.ga_len;\n\t\t}\n\t\telse\t    // lines like \":map xx yy^M\" will have failed\n\t\t{\n\t\t    if (!sp->error)\n\t\t    {\n\t\t\tmsg_source(HL_ATTR(HLF_W));\n\t\t\temsg(_(\"W15: Warning: Wrong line separator, ^M may be missing\"));\n\t\t    }\n\t\t    sp->error = TRUE;\n\t\t    sp->fileformat = EOL_UNIX;\n\t\t}\n\t    }\n#endif\n\t    // The '\\n' is escaped if there is an odd number of ^V's just\n\t    // before it, first set \"c\" just before the 'V's and then check\n\t    // len&c parities (is faster than ((len-c)%2 == 0)) -- Acevedo\n\t    for (c = len - 2; c >= 0 && buf[c] == Ctrl_V; c--)\n\t\t;\n\t    if ((len & 1) != (c & 1))\t// escaped NL, read more\n\t    {\n\t\t++sp->sourcing_lnum;\n\t\tcontinue;\n\t    }\n\n\t    buf[len - 1] = NUL;\t\t// remove the NL\n\t}\n\n\t// Check for ^C here now and then, so recursive :so can be broken.\n\tline_breakcheck();\n\tbreak;\n    }\n\n    if (have_read)\n\treturn (char_u *)ga.ga_data;\n\n    vim_free(ga.ga_data);\n    return NULL;\n}\n\n/*\n * Get one full line from a sourced file.\n * Called by do_cmdline() when it's called from do_source().\n *\n * Return a pointer to the line in allocated memory.\n * Return NULL for end-of-file or some error.\n */\n    char_u *\ngetsourceline(\n\tint c UNUSED,\n\tvoid *cookie,\n\tint indent UNUSED,\n\tgetline_opt_T options)\n{\n    source_cookie_T\t*sp = (source_cookie_T *)cookie;\n    char_u\t\t*line;\n    char_u\t\t*p;\n    int\t\t\tdo_vim9_all = in_vim9script()\n\t\t\t\t\t      && options == GETLINE_CONCAT_ALL;\n    int\t\t\tdo_bar_cont = do_vim9_all\n\t\t\t\t\t || options == GETLINE_CONCAT_CONTBAR;\n\n#ifdef FEAT_EVAL\n    // If breakpoints have been added/deleted need to check for it.\n    if ((sp->dbg_tick < debug_tick) && !sp->source_from_buf)\n    {\n\tsp->breakpoint = dbg_find_breakpoint(TRUE, sp->fname, SOURCING_LNUM);\n\tsp->dbg_tick = debug_tick;\n    }\n# ifdef FEAT_PROFILE\n    if (do_profiling == PROF_YES)\n\tscript_line_end();\n# endif\n#endif\n\n    // Set the current sourcing line number.\n    SOURCING_LNUM = sp->sourcing_lnum + 1;\n\n    // Get current line.  If there is a read-ahead line, use it, otherwise get\n    // one now.  \"fp\" is NULL if actually using a string.\n    if (sp->finished || (!sp->source_from_buf && sp->fp == NULL))\n\tline = NULL;\n    else if (sp->nextline == NULL)\n\tline = get_one_sourceline(sp);\n    else\n    {\n\tline = sp->nextline;\n\tsp->nextline = NULL;\n\t++sp->sourcing_lnum;\n    }\n#ifdef FEAT_PROFILE\n    if (line != NULL && do_profiling == PROF_YES)\n\tscript_line_start();\n#endif\n\n    // Only concatenate lines starting with a \\ when 'cpoptions' doesn't\n    // contain the 'C' flag.\n    if (line != NULL && options != GETLINE_NONE\n\t\t\t\t      && vim_strchr(p_cpo, CPO_CONCAT) == NULL)\n    {\n\tint comment_char = in_vim9script() ? '#' : '\"';\n\n\t// compensate for the one line read-ahead\n\t--sp->sourcing_lnum;\n\n\t// Get the next line and concatenate it when it starts with a\n\t// backslash. We always need to read the next line, keep it in\n\t// sp->nextline.\n\t/* Also check for a comment in between continuation lines: \"\\ */\n\t// Also check for a Vim9 comment, empty line, line starting with '|',\n\t// but not \"||\".\n\tsp->nextline = get_one_sourceline(sp);\n\tif (sp->nextline != NULL\n\t\t&& (*(p = skipwhite(sp->nextline)) == '\\\\'\n\t\t\t      || (p[0] == comment_char\n\t\t\t\t\t\t&& p[1] == '\\\\' && p[2] == ' ')\n\t\t\t      || (do_vim9_all && (*p == NUL\n\t\t\t\t\t\t     || vim9_comment_start(p)))\n\t\t\t      || (do_bar_cont && p[0] == '|' && p[1] != '|')))\n\t{\n\t    garray_T    ga;\n\n\t    ga_init2(&ga, sizeof(char_u), 400);\n\t    ga_concat(&ga, line);\n\t    if (*p == '\\\\')\n\t\tga_concat(&ga, p + 1);\n\t    else if (*p == '|')\n\t    {\n\t\tga_concat(&ga, (char_u *)\" \");\n\t\tga_concat(&ga, p);\n\t    }\n\t    for (;;)\n\t    {\n\t\tvim_free(sp->nextline);\n\t\tsp->nextline = get_one_sourceline(sp);\n\t\tif (sp->nextline == NULL)\n\t\t    break;\n\t\tp = skipwhite(sp->nextline);\n\t\tif (*p == '\\\\' || (do_bar_cont && p[0] == '|' && p[1] != '|'))\n\t\t{\n\t\t    // Adjust the growsize to the current length to speed up\n\t\t    // concatenating many lines.\n\t\t    if (ga.ga_len > 400)\n\t\t    {\n\t\t\tif (ga.ga_len > 8000)\n\t\t\t    ga.ga_growsize = 8000;\n\t\t\telse\n\t\t\t    ga.ga_growsize = ga.ga_len;\n\t\t    }\n\t\t    if (*p == '\\\\')\n\t\t\tga_concat(&ga, p + 1);\n\t\t    else\n\t\t    {\n\t\t\tga_concat(&ga, (char_u *)\" \");\n\t\t\tga_concat(&ga, p);\n\t\t    }\n\t\t}\n\t\telse if (!(p[0] == (comment_char)\n\t\t\t\t\t\t&& p[1] == '\\\\' && p[2] == ' ')\n\t\t     && !(do_vim9_all && (*p == NUL || vim9_comment_start(p))))\n\t\t    break;\n\t\t/* drop a # comment or \"\\ comment line */\n\t    }\n\t    ga_append(&ga, NUL);\n\t    vim_free(line);\n\t    line = ga.ga_data;\n\t}\n    }\n\n    if (line != NULL && sp->conv.vc_type != CONV_NONE)\n    {\n\tchar_u\t*s;\n\n\t// Convert the encoding of the script line.\n\ts = string_convert(&sp->conv, line, NULL);\n\tif (s != NULL)\n\t{\n\t    vim_free(line);\n\t    line = s;\n\t}\n    }\n\n#ifdef FEAT_EVAL\n    // Did we encounter a breakpoint?\n    if (!sp->source_from_buf && sp->breakpoint != 0\n\t    && sp->breakpoint <= SOURCING_LNUM)\n    {\n\tdbg_breakpoint(sp->fname, SOURCING_LNUM);\n\t// Find next breakpoint.\n\tsp->breakpoint = dbg_find_breakpoint(TRUE, sp->fname, SOURCING_LNUM);\n\tsp->dbg_tick = debug_tick;\n    }\n#endif\n\n    return line;\n}\n\n/*\n * Returns TRUE if sourcing a script either from a file or a buffer.\n * Otherwise returns FALSE.\n */\n    int\nsourcing_a_script(exarg_T *eap)\n{\n    return (getline_equal(eap->getline, eap->cookie, getsourceline));\n}\n\n/*\n * \":scriptencoding\": Set encoding conversion for a sourced script.\n */\n    void\nex_scriptencoding(exarg_T *eap)\n{\n    source_cookie_T\t*sp;\n    char_u\t\t*name;\n\n    if (!sourcing_a_script(eap))\n    {\n\temsg(_(e_scriptencoding_used_outside_of_sourced_file));\n\treturn;\n    }\n\n    if (*eap->arg != NUL)\n    {\n\tname = enc_canonize(eap->arg);\n\tif (name == NULL)\t// out of memory\n\t    return;\n    }\n    else\n\tname = eap->arg;\n\n    // Setup for conversion from the specified encoding to 'encoding'.\n    sp = (source_cookie_T *)getline_cookie(eap->getline, eap->cookie);\n    convert_setup(&sp->conv, name, p_enc);\n\n    if (name != eap->arg)\n\tvim_free(name);\n}\n\n/*\n * \":scriptversion\": Set Vim script version for a sourced script.\n */\n    void\nex_scriptversion(exarg_T *eap UNUSED)\n{\n    int\t\tnr;\n\n    if (!sourcing_a_script(eap))\n    {\n\temsg(_(e_scriptversion_used_outside_of_sourced_file));\n\treturn;\n    }\n    if (in_vim9script())\n    {\n\temsg(_(e_cannot_use_scriptversion_after_vim9script));\n\treturn;\n    }\n\n    nr = getdigits(&eap->arg);\n    if (nr == 0 || *eap->arg != NUL)\n\temsg(_(e_invalid_argument));\n    else if (nr > SCRIPT_VERSION_MAX)\n\tsemsg(_(e_scriptversion_not_supported_nr), nr);\n    else\n    {\n\tcurrent_sctx.sc_version = nr;\n#ifdef FEAT_EVAL\n\tSCRIPT_ITEM(current_sctx.sc_sid)->sn_version = nr;\n#endif\n    }\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * \":finish\": Mark a sourced file as finished.\n */\n    void\nex_finish(exarg_T *eap)\n{\n    if (sourcing_a_script(eap))\n\tdo_finish(eap, FALSE);\n    else\n\temsg(_(e_finish_used_outside_of_sourced_file));\n}\n\n/*\n * Mark a sourced file as finished.  Possibly makes the \":finish\" pending.\n * Also called for a pending finish at the \":endtry\" or after returning from\n * an extra do_cmdline().  \"reanimate\" is used in the latter case.\n */\n    void\ndo_finish(exarg_T *eap, int reanimate)\n{\n    int\t\tidx;\n\n    if (reanimate)\n\t((source_cookie_T *)getline_cookie(eap->getline,\n\t\t\t\t\t      eap->cookie))->finished = FALSE;\n\n    // Cleanup (and inactivate) conditionals, but stop when a try conditional\n    // not in its finally clause (which then is to be executed next) is found.\n    // In this case, make the \":finish\" pending for execution at the \":endtry\".\n    // Otherwise, finish normally.\n    idx = cleanup_conditionals(eap->cstack, 0, TRUE);\n    if (idx >= 0)\n    {\n\teap->cstack->cs_pending[idx] = CSTP_FINISH;\n\treport_make_pending(CSTP_FINISH, NULL);\n    }\n    else\n\t((source_cookie_T *)getline_cookie(eap->getline,\n\t\t\t\t\t       eap->cookie))->finished = TRUE;\n}\n\n\n/*\n * Return TRUE when a sourced file had the \":finish\" command: Don't give error\n * message for missing \":endif\".\n * Return FALSE when not sourcing a file.\n */\n    int\nsource_finished(\n    char_u\t*(*fgetline)(int, void *, int, getline_opt_T),\n    void\t*cookie)\n{\n    return (getline_equal(fgetline, cookie, getsourceline)\n\t    && ((source_cookie_T *)getline_cookie(\n\t\t\t\t\t\tfgetline, cookie))->finished);\n}\n\n/*\n * Find the path of a script below the \"autoload\" directory.\n * Returns NULL if there is no \"/autoload/\" in the script name.\n */\n    char_u *\nscript_name_after_autoload(scriptitem_T *si)\n{\n    char_u\t*p = si->sn_name;\n    char_u\t*res = NULL;\n\n    for (;;)\n    {\n\tchar_u *n = (char_u *)strstr((char *)p, \"autoload\");\n\n\tif (n == NULL)\n\t    break;\n\tif (n > p && vim_ispathsep(n[-1]) && vim_ispathsep(n[8]))\n\t    res = n + 9;\n\tp = n + 8;\n    }\n    return res;\n}\n\n/*\n * For an autoload script \"autoload/dir/script.vim\" return the prefix\n * \"dir#script#\" in allocated memory.\n * Returns NULL if anything is wrong.\n */\n    char_u *\nget_autoload_prefix(scriptitem_T *si)\n{\n    char_u *p = script_name_after_autoload(si);\n    char_u *prefix;\n\n    if (p == NULL)\n\treturn NULL;\n    prefix = vim_strsave(p);\n    if (prefix == NULL)\n\treturn NULL;\n\n    // replace all '/' with '#' and locate \".vim\" at the end\n    for (p = prefix; *p != NUL; p += mb_ptr2len(p))\n    {\n\tif (vim_ispathsep(*p))\n\t    *p = '#';\n\telse if (STRCMP(p, \".vim\") == 0)\n\t{\n\t    p[0] = '#';\n\t    p[1] = NUL;\n\t    return prefix;\n\t}\n    }\n\n    // did not find \".vim\" at the end\n    vim_free(prefix);\n    return NULL;\n}\n\n/*\n * If in a Vim9 autoload script return \"name\" with the autoload prefix for the\n * script.  If successful the returned name is allocated.\n * Otherwise it returns \"name\" unmodified.\n */\n    char_u *\nmay_prefix_autoload(char_u *name)\n{\n    if (SCRIPT_ID_VALID(current_sctx.sc_sid))\n    {\n\tscriptitem_T *si = SCRIPT_ITEM(current_sctx.sc_sid);\n\n\tif (si->sn_autoload_prefix != NULL)\n\t{\n\t    char_u  *basename = name;\n\t    size_t  len;\n\t    char_u  *res;\n\n\t    if (*name == K_SPECIAL)\n\t    {\n\t\tchar_u *p = vim_strchr(name, '_');\n\n\t\t// skip over \"<SNR>99_\"\n\t\tif (p != NULL)\n\t\t    basename = p + 1;\n\t    }\n\n\t    len = STRLEN(si->sn_autoload_prefix) + STRLEN(basename) + 2;\n\t    res = alloc(len);\n\t    if (res != NULL)\n\t    {\n\t\tvim_snprintf((char *)res, len, \"%s%s\",\n\t\t\t\t\t     si->sn_autoload_prefix, basename);\n\t\treturn res;\n\t    }\n\t}\n    }\n    return name;\n}\n\n/*\n * Return the autoload script name for a function or variable name.\n * Returns NULL when out of memory.\n * Caller must make sure that \"name\" contains AUTOLOAD_CHAR.\n */\n    char_u *\nautoload_name(char_u *name)\n{\n    char_u\t*p, *q = NULL;\n    char_u\t*scriptname;\n\n    // Get the script file name: replace '#' with '/', append \".vim\".\n    scriptname = alloc(STRLEN(name) + 14);\n    if (scriptname == NULL)\n\treturn NULL;\n    STRCPY(scriptname, \"autoload/\");\n    STRCAT(scriptname, name[0] == 'g' && name[1] == ':' ? name + 2: name);\n    for (p = scriptname + 9; (p = vim_strchr(p, AUTOLOAD_CHAR)) != NULL;\n\t\t\t\t\t\t\t\t    q = p, ++p)\n\t*p = '/';\n    STRCPY(q, \".vim\");\n    return scriptname;\n}\n\n/*\n * If \"name\" has a package name try autoloading the script for it.\n * Return TRUE if a package was loaded.\n */\n    int\nscript_autoload(\n    char_u\t*name,\n    int\t\treload)\t    // load script again when already loaded\n{\n    char_u\t*p;\n    char_u\t*scriptname, *tofree;\n    int\t\tret = FALSE;\n    int\t\ti;\n    int\t\tret_sid;\n\n    // If the name starts with \"<SNR>123_\" then \"123\" is the script ID.\n    if (name[0] == K_SPECIAL && name[1] == KS_EXTRA && name[2] == KE_SNR)\n    {\n\tp = name + 3;\n\tret_sid = (int)getdigits(&p);\n\tif (*p == '_' && SCRIPT_ID_VALID(ret_sid))\n\t{\n\t    may_load_script(ret_sid, &ret);\n\t    return ret;\n\t}\n    }\n\n    // If there is no '#' after name[0] there is no package name.\n    p = vim_strchr(name, AUTOLOAD_CHAR);\n    if (p == NULL || p == name)\n\treturn FALSE;\n\n    tofree = scriptname = autoload_name(name);\n    if (scriptname == NULL)\n\treturn FALSE;\n\n    // Find the name in the list of previously loaded package names.  Skip\n    // \"autoload/\", it's always the same.\n    for (i = 0; i < ga_loaded.ga_len; ++i)\n\tif (STRCMP(((char_u **)ga_loaded.ga_data)[i] + 9, scriptname + 9) == 0)\n\t    break;\n    if (!reload && i < ga_loaded.ga_len)\n\tret = FALSE;\t    // was loaded already\n    else\n    {\n\t// Remember the name if it wasn't loaded already.\n\tif (i == ga_loaded.ga_len && ga_grow(&ga_loaded, 1) == OK)\n\t{\n\t    ((char_u **)ga_loaded.ga_data)[ga_loaded.ga_len++] = scriptname;\n\t    tofree = NULL;\n\t}\n\n\t// Try loading the package from $VIMRUNTIME/autoload/<name>.vim\n\t// Use \"ret_sid\" to avoid loading the same script again.\n\tif (source_in_path(p_rtp, scriptname, DIP_START, &ret_sid) == OK)\n\t    ret = TRUE;\n    }\n\n    vim_free(tofree);\n    return ret;\n}\n#endif\n", "\" Tests for the :source command.\n\nsource check.vim\nsource view_util.vim\n\nfunc Test_source_autocmd()\n  call writefile([\n\t\\ 'let did_source = 1',\n\t\\ ], 'Xsourced')\n  au SourcePre *source* let did_source_pre = 1\n  au SourcePost *source* let did_source_post = 1\n\n  source Xsourced\n\n  call assert_equal(g:did_source, 1)\n  call assert_equal(g:did_source_pre, 1)\n  call assert_equal(g:did_source_post, 1)\n\n  call delete('Xsourced')\n  au! SourcePre\n  au! SourcePost\n  unlet g:did_source\n  unlet g:did_source_pre\n  unlet g:did_source_post\nendfunc\n\nfunc Test_source_cmd()\n  au SourceCmd *source* let did_source = expand('<afile>')\n  au SourcePre *source* let did_source_pre = 2\n  au SourcePost *source* let did_source_post = 2\n\n  source Xsourced\n\n  call assert_equal(g:did_source, 'Xsourced')\n  call assert_false(exists('g:did_source_pre'))\n  call assert_equal(g:did_source_post, 2)\n\n  au! SourceCmd\n  au! SourcePre\n  au! SourcePost\nendfunc\n\nfunc Test_source_sandbox()\n  new\n  call writefile([\"Ohello\\<Esc>\"], 'Xsourcehello')\n  source! Xsourcehello | echo\n  call assert_equal('hello', getline(1))\n  call assert_fails('sandbox source! Xsourcehello', 'E48:')\n  bwipe!\n  call delete('Xsourcehello')\nendfunc\n\n\" When deleting a file and immediately creating a new one the inode may be\n\" recycled.  Vim should not recognize it as the same script.\nfunc Test_different_script()\n  call writefile(['let s:var = \"asdf\"'], 'XoneScript')\n  source XoneScript\n  call delete('XoneScript')\n  call writefile(['let g:var = s:var'], 'XtwoScript')\n  call assert_fails('source XtwoScript', 'E121:')\n  call delete('XtwoScript')\nendfunc\n\n\" When sourcing a vim script, shebang should be ignored.\nfunc Test_source_ignore_shebang()\n  call writefile(['#!./xyzabc', 'let g:val=369'], 'Xfile.vim')\n  source Xfile.vim\n  call assert_equal(g:val, 369)\n  call delete('Xfile.vim')\nendfunc\n\n\" Test for expanding <sfile> in an autocmd and for <slnum> and <sflnum>\nfunc Test_source_autocmd_sfile()\n  let code =<< trim [CODE]\n    let g:SfileName = ''\n    augroup sfiletest\n      au!\n      autocmd User UserAutoCmd let g:Sfile = '<sfile>:t'\n    augroup END\n    doautocmd User UserAutoCmd\n    let g:Slnum = expand('<slnum>')\n    let g:Sflnum = expand('<sflnum>')\n    augroup! sfiletest\n  [CODE]\n  call writefile(code, 'Xscript.vim')\n  source Xscript.vim\n  call assert_equal('Xscript.vim', g:Sfile)\n  call assert_equal('7', g:Slnum)\n  call assert_equal('8', g:Sflnum)\n  call delete('Xscript.vim')\nendfunc\n\nfunc Test_source_error()\n  call assert_fails('scriptencoding utf-8', 'E167:')\n  call assert_fails('finish', 'E168:')\n  call assert_fails('scriptversion 2', 'E984:')\n  call assert_fails('source!', 'E471:')\n  new\n  call setline(1, ['', '', '', ''])\n  call assert_fails('1,3source Xscript.vim', 'E481:')\n  call assert_fails('1,3source! Xscript.vim', 'E481:')\n  bw!\nendfunc\n\n\" Test for sourcing a script recursively\nfunc Test_nested_script()\n  CheckRunVimInTerminal\n  call writefile([':source! Xscript.vim', ''], 'Xscript.vim')\n  let buf = RunVimInTerminal('', {'rows': 6})\n  call term_wait(buf)\n  call term_sendkeys(buf, \":set noruler\\n\")\n  call term_sendkeys(buf, \":source! Xscript.vim\\n\")\n  call term_wait(buf)\n  call WaitForAssert({-> assert_match('E22: Scripts nested too deep\\s*', term_getline(buf, 6))})\n  call delete('Xscript.vim')\n  call StopVimInTerminal(buf)\nendfunc\n\n\" Test for sourcing a script from the current buffer\nfunc Test_source_buffer()\n  new\n  \" Source a simple script\n  let lines =<< trim END\n    let a = \"Test\"\n    let b = 20\n\n    let c = [1.1]\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['Test', 20, [1.1]], [g:a, g:b, g:c])\n\n  \" Source a range of lines in the current buffer\n  %d _\n  let lines =<< trim END\n    let a = 10\n    let a += 20\n    let a += 30\n    let a += 40\n  END\n  call setline(1, lines)\n  .source\n  call assert_equal(10, g:a)\n  3source\n  call assert_equal(40, g:a)\n  2,3source\n  call assert_equal(90, g:a)\n\n  \" Make sure the script line number is correct when sourcing a range of\n  \" lines.\n  %d _\n  let lines =<< trim END\n     Line 1\n     Line 2\n     func Xtestfunc()\n       return expand(\"<sflnum>\")\n     endfunc\n     Line 3\n     Line 4\n  END\n  call setline(1, lines)\n  3,5source\n  call assert_equal('4', Xtestfunc())\n  delfunc Xtestfunc\n\n  \" Source a script with line continuation lines\n  %d _\n  let lines =<< trim END\n    let m = [\n      \\   1,\n      \\   2,\n      \\ ]\n    call add(m, 3)\n  END\n  call setline(1, lines)\n  source\n  call assert_equal([1, 2, 3], g:m)\n  \" Source a script with line continuation lines and a comment\n  %d _\n  let lines =<< trim END\n    let m = [\n      \"\\ first entry\n      \\   'a',\n      \"\\ second entry\n      \\   'b',\n      \\ ]\n    \" third entry\n    call add(m, 'c')\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['a', 'b', 'c'], g:m)\n  \" Source an incomplete line continuation line\n  %d _\n  let lines =<< trim END\n    let k = [\n      \\\n  END\n  call setline(1, lines)\n  call assert_fails('source', 'E697:')\n  \" Source a function with a for loop\n  %d _\n  let lines =<< trim END\n    let m = []\n    \" test function\n    func! Xtest()\n      for i in range(5, 7)\n        call add(g:m, i)\n      endfor\n    endfunc\n    call Xtest()\n  END\n  call setline(1, lines)\n  source\n  call assert_equal([5, 6, 7], g:m)\n  \" Source an empty buffer\n  %d _\n  source\n\n  \" test for script local functions and variables\n  let lines =<< trim END\n    let s:var1 = 10\n    func s:F1()\n      let s:var1 += 1\n      return s:var1\n    endfunc\n    func s:F2()\n    endfunc\n    let g:ScriptID = expand(\"<SID>\")\n  END\n  call setline(1, lines)\n  source\n  call assert_true(g:ScriptID != '')\n  call assert_true(exists('*' .. g:ScriptID .. 'F1'))\n  call assert_true(exists('*' .. g:ScriptID .. 'F2'))\n  call assert_equal(11, call(g:ScriptID .. 'F1', []))\n\n  \" the same script ID should be used even if the buffer is sourced more than\n  \" once\n  %d _\n  let lines =<< trim END\n    let g:ScriptID = expand(\"<SID>\")\n    let g:Count += 1\n  END\n  call setline(1, lines)\n  let g:Count = 0\n  source\n  call assert_true(g:ScriptID != '')\n  let scid = g:ScriptID\n  source\n  call assert_equal(scid, g:ScriptID)\n  call assert_equal(2, g:Count)\n  source\n  call assert_equal(scid, g:ScriptID)\n  call assert_equal(3, g:Count)\n\n  \" test for the script line number\n  %d _\n  let lines =<< trim END\n    \" comment\n    let g:Slnum1 = expand(\"<slnum>\")\n    let i = 1 +\n           \\ 2 +\n          \"\\ comment\n           \\ 3\n    let g:Slnum2 = expand(\"<slnum>\")\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('2', g:Slnum1)\n  call assert_equal('7', g:Slnum2)\n\n  \" test for retaining the same script number across source calls\n  let lines =<< trim END\n     let g:ScriptID1 = expand(\"<SID>\")\n     let g:Slnum1 = expand(\"<slnum>\")\n     let l =<< trim END\n       let g:Slnum2 = expand(\"<slnum>\")\n       let g:ScriptID2 = expand(\"<SID>\")\n     END\n     new\n     call setline(1, l)\n     source\n     bw!\n     let g:ScriptID3 = expand(\"<SID>\")\n     let g:Slnum3 = expand(\"<slnum>\")\n  END\n  call writefile(lines, 'Xscript')\n  source Xscript\n  call assert_true(g:ScriptID1 != g:ScriptID2)\n  call assert_equal(g:ScriptID1, g:ScriptID3)\n  call assert_equal('2', g:Slnum1)\n  call assert_equal('1', g:Slnum2)\n  call assert_equal('12', g:Slnum3)\n  call delete('Xscript')\n\n  \" test for sourcing a heredoc\n  %d _\n  let lines =<< trim END\n     let a = 1\n     let heredoc =<< trim DATA\n        red\n          green\n        blue\n     DATA\n     let b = 2\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['red', '  green', 'blue'], g:heredoc)\n\n  \" test for a while and for statement\n  %d _\n  let lines =<< trim END\n     let a = 0\n     let b = 1\n     while b <= 10\n       let a += 10\n       let b += 1\n     endwhile\n     for i in range(5)\n       let a += 10\n     endfor\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(150, g:a)\n\n  \" test for sourcing the same buffer multiple times after changing a function\n  %d _\n  let lines =<< trim END\n     func Xtestfunc()\n       return \"one\"\n     endfunc\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"one\", Xtestfunc())\n  call setline(2, '  return \"two\"')\n  source\n  call assert_equal(\"two\", Xtestfunc())\n  call setline(2, '  return \"three\"')\n  source\n  call assert_equal(\"three\", Xtestfunc())\n  delfunc Xtestfunc\n\n  \" test for using try/catch\n  %d _\n  let lines =<< trim END\n     let Trace = '1'\n     try\n       let a1 = b1\n     catch\n       let Trace ..= '2'\n     finally\n       let Trace ..= '3'\n     endtry\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"123\", g:Trace)\n\n  \" test with the finish command\n  %d _\n  let lines =<< trim END\n     let g:Color = 'blue'\n     finish\n     let g:Color = 'green'\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('blue', g:Color)\n\n  \" Test for the SourcePre and SourcePost autocmds\n  augroup Xtest\n    au!\n    au SourcePre * let g:XsourcePre=4\n          \\ | let g:XsourcePreFile = expand(\"<afile>\")\n    au SourcePost * let g:XsourcePost=6\n          \\ | let g:XsourcePostFile = expand(\"<afile>\")\n  augroup END\n  %d _\n  let lines =<< trim END\n     let a = 1\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(4, g:XsourcePre)\n  call assert_equal(6, g:XsourcePost)\n  call assert_equal(':source buffer=' .. bufnr(), g:XsourcePreFile)\n  call assert_equal(':source buffer=' .. bufnr(), g:XsourcePostFile)\n  augroup Xtest\n    au!\n  augroup END\n  augroup! Xtest\n\n  %bw!\nendfunc\n\n\" Test for sourcing a Vim9 script from the current buffer\nfunc Test_source_buffer_vim9()\n  new\n\n  \" test for sourcing a Vim9 script\n  %d _\n  let lines =<< trim END\n     vim9script\n\n     # check dict\n     var x: number = 10\n     def g:Xtestfunc(): number\n       return x\n     enddef\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(10, Xtestfunc())\n\n  \" test for sourcing a vim9 script with line continuation\n  %d _\n  let lines =<< trim END\n     vim9script\n\n     g:Str1 = \"hello \"\n              .. \"world\"\n              .. \", how are you?\"\n     g:Colors = [\n       'red',\n       # comment\n       'blue'\n       ]\n     g:Dict = {\n       a: 22,\n       # comment\n       b: 33\n       }\n\n     # calling a function with line continuation\n     def Sum(...values: list<number>): number\n       var sum: number = 0\n       for v in values\n         sum += v\n       endfor\n       return sum\n     enddef\n     g:Total1 = Sum(10,\n                   20,\n                   30)\n\n     var i: number = 0\n     while i < 10\n       # while loop\n       i +=\n           1\n     endwhile\n     g:Count1 = i\n\n     # for loop\n     g:Count2 = 0\n     for j in range(10, 20)\n       g:Count2 +=\n           i\n     endfor\n\n     g:Total2 = 10 +\n                20 -\n                5\n\n     g:Result1 = g:Total2 > 1\n                ? 'red'\n                : 'blue'\n\n     g:Str2 = 'x'\n              ->repeat(10)\n              ->trim()\n              ->strpart(4)\n\n     g:Result2 = g:Dict\n                    .a\n\n     augroup Test\n       au!\n       au BufNewFile Xfile g:readFile = 1\n             | g:readExtra = 2\n     augroup END\n     g:readFile = 0\n     g:readExtra = 0\n     new Xfile\n     bwipe!\n     augroup Test\n       au!\n     augroup END\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"hello world, how are you?\", g:Str1)\n  call assert_equal(['red', 'blue'], g:Colors)\n  call assert_equal(#{a: 22, b: 33}, g:Dict)\n  call assert_equal(60, g:Total1)\n  call assert_equal(10, g:Count1)\n  call assert_equal(110, g:Count2)\n  call assert_equal(25, g:Total2)\n  call assert_equal('red', g:Result1)\n  call assert_equal('xxxxxx', g:Str2)\n  call assert_equal(22, g:Result2)\n  call assert_equal(1, g:readFile)\n  call assert_equal(2, g:readExtra)\n\n  \" test for sourcing the same buffer multiple times after changing a function\n  %d _\n  let lines =<< trim END\n     vim9script\n     def g:Xtestfunc(): string\n       return \"one\"\n     enddef\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(\"one\", Xtestfunc())\n  call setline(3, '  return \"two\"')\n  source\n  call assert_equal(\"two\", Xtestfunc())\n  call setline(3, '  return \"three\"')\n  source\n  call assert_equal(\"three\", Xtestfunc())\n  delfunc Xtestfunc\n\n  \" Test for sourcing a range of lines. Make sure the script line number is\n  \" correct.\n  %d _\n  let lines =<< trim END\n     Line 1\n     Line 2\n     vim9script\n     def g:Xtestfunc(): string\n       return expand(\"<sflnum>\")\n     enddef\n     Line 3\n     Line 4\n  END\n  call setline(1, lines)\n  3,6source\n  call assert_equal('5', Xtestfunc())\n  delfunc Xtestfunc\n\n  \" test for sourcing a heredoc\n  %d _\n  let lines =<< trim END\n    vim9script\n    var a = 1\n    g:heredoc =<< trim DATA\n       red\n         green\n       blue\n    DATA\n    var b = 2\n  END\n  call setline(1, lines)\n  source\n  call assert_equal(['red', '  green', 'blue'], g:heredoc)\n\n  \" test for using the :vim9cmd modifier\n  %d _\n  let lines =<< trim END\n    first line\n    g:Math = {\n         pi: 3.12,\n         e: 2.71828\n      }\n    g:Editors = [\n      'vim',\n      # comment\n      'nano'\n      ]\n    last line\n  END\n  call setline(1, lines)\n  vim9cmd :2,10source\n  call assert_equal(#{pi: 3.12, e: 2.71828}, g:Math)\n  call assert_equal(['vim', 'nano'], g:Editors)\n\n  \" '<,'> range before the cmd modifier works\n  unlet g:Math\n  unlet g:Editors\n  exe \"normal 6GV4j:vim9cmd source\\<CR>\"\n  call assert_equal(['vim', 'nano'], g:Editors)\n  unlet g:Editors\n\n  \" test for using try/catch\n  %d _\n  let lines =<< trim END\n     vim9script\n     g:Trace = '1'\n     try\n       a1 = b1\n     catch\n       g:Trace ..= '2'\n     finally\n       g:Trace ..= '3'\n     endtry\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('123', g:Trace)\n\n  \" test with the finish command\n  %d _\n  let lines =<< trim END\n     vim9script\n     g:Color = 'red'\n     finish\n     g:Color = 'blue'\n  END\n  call setline(1, lines)\n  source\n  call assert_equal('red', g:Color)\n\n  \" test for ++clear argument to clear all the functions/variables\n  %d _\n  let lines =<< trim END\n     g:ScriptVarFound = exists(\"color\")\n     g:MyFuncFound = exists('*Myfunc')\n     if g:MyFuncFound\n       finish\n     endif\n     var color = 'blue'\n     def Myfunc()\n     enddef\n  END\n  call setline(1, lines)\n  vim9cmd source\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  vim9cmd source\n  call assert_true(g:MyFuncFound)\n  call assert_true(g:ScriptVarFound)\n  vim9cmd source ++clear\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  vim9cmd source ++clear\n  call assert_false(g:MyFuncFound)\n  call assert_false(g:ScriptVarFound)\n  call assert_fails('vim9cmd source ++clearx', 'E475:')\n  call assert_fails('vim9cmd source ++abcde', 'E484:')\n\n  %bw!\nendfunc\n\nfunc Test_source_buffer_long_line()\n  \" This was reading past the end of the line.\n  new\n  norm300gr0\n  so\n  bwipe!\n\n  let lines =<< trim END\n      new\n      norm 10a0000000000\u00f800000000000\n      norm i0000000000000000000\n      silent! so\n  END\n  call writefile(lines, 'Xtest.vim')\n  source Xtest.vim\n  bwipe!\n  call delete('Xtest.vim')\nendfunc\n\n\n\" vim: shiftwidth=2 sts=2 expandtab\n", "/* vi:set ts=8 sts=4 sw=4 noet:\n *\n * VIM - Vi IMproved\t\tby Bram Moolenaar\n *\n * Do \":help uganda\"  in Vim to read copying and usage conditions.\n * Do \":help credits\" in Vim to see a list of people who contributed.\n * See README.txt for an overview of the Vim source code.\n */\n\n#include \"vim.h\"\n\n/*\n * Vim originated from Stevie version 3.6 (Fish disk 217) by GRWalter (Fred)\n * It has been changed beyond recognition since then.\n *\n * Differences between version 7.4 and 8.x can be found with \":help version8\".\n * Differences between version 6.4 and 7.x can be found with \":help version7\".\n * Differences between version 5.8 and 6.x can be found with \":help version6\".\n * Differences between version 4.x and 5.x can be found with \":help version5\".\n * Differences between version 3.0 and 4.x can be found with \":help version4\".\n * All the remarks about older versions have been removed, they are not very\n * interesting.\n */\n\n#include \"version.h\"\n\nchar\t\t*Version = VIM_VERSION_SHORT;\nstatic char\t*mediumVersion = VIM_VERSION_MEDIUM;\n\n#if defined(HAVE_DATE_TIME) || defined(PROTO)\n# if (defined(VMS) && defined(VAXC)) || defined(PROTO)\nchar\tlongVersion[sizeof(VIM_VERSION_LONG_DATE) + sizeof(__DATE__)\n\t\t\t\t\t\t      + sizeof(__TIME__) + 3];\n\n    void\ninit_longVersion(void)\n{\n    /*\n     * Construct the long version string.  Necessary because\n     * VAX C can't concatenate strings in the preprocessor.\n     */\n    strcpy(longVersion, VIM_VERSION_LONG_DATE);\n#ifdef BUILD_DATE\n    strcat(longVersion, BUILD_DATE);\n#else\n    strcat(longVersion, __DATE__);\n    strcat(longVersion, \" \");\n    strcat(longVersion, __TIME__);\n#endif\n    strcat(longVersion, \")\");\n}\n\n# else\nchar\t*longVersion = NULL;\n\n    void\ninit_longVersion(void)\n{\n    if (longVersion == NULL)\n    {\n#ifdef BUILD_DATE\n\tchar *date_time = BUILD_DATE;\n#else\n\tchar *date_time = __DATE__ \" \" __TIME__;\n#endif\n\tchar *msg = _(\"%s (%s, compiled %s)\");\n\tsize_t len = strlen(msg)\n\t\t    + strlen(VIM_VERSION_LONG_ONLY)\n\t\t    + strlen(VIM_VERSION_DATE_ONLY)\n\t\t    + strlen(date_time);\n\n\tlongVersion = alloc(len);\n\tif (longVersion == NULL)\n\t    longVersion = VIM_VERSION_LONG;\n\telse\n\t    vim_snprintf(longVersion, len, msg,\n\t\t      VIM_VERSION_LONG_ONLY, VIM_VERSION_DATE_ONLY, date_time);\n    }\n}\n# endif\n#else\nchar\t*longVersion = VIM_VERSION_LONG;\n\n    void\ninit_longVersion(void)\n{\n    // nothing to do\n}\n#endif\n\nstatic char *(features[]) =\n{\n#ifdef HAVE_ACL\n\t\"+acl\",\n#else\n\t\"-acl\",\n#endif\n#ifdef AMIGA\t\t// only for Amiga systems\n# ifdef FEAT_ARP\n\t\"+ARP\",\n# else\n\t\"-ARP\",\n# endif\n#endif\n#ifdef FEAT_ARABIC\n\t\"+arabic\",\n#else\n\t\"-arabic\",\n#endif\n\t\"+autocmd\",\n#ifdef FEAT_AUTOCHDIR\n       \"+autochdir\",\n#else\n       \"-autochdir\",\n#endif\n#ifdef FEAT_AUTOSERVERNAME\n\t\"+autoservername\",\n#else\n\t\"-autoservername\",\n#endif\n#ifdef FEAT_BEVAL_GUI\n\t\"+balloon_eval\",\n#else\n\t\"-balloon_eval\",\n#endif\n#ifdef FEAT_BEVAL_TERM\n\t\"+balloon_eval_term\",\n#else\n\t\"-balloon_eval_term\",\n#endif\n#ifdef FEAT_BROWSE\n\t\"+browse\",\n#else\n\t\"-browse\",\n#endif\n#ifdef NO_BUILTIN_TCAPS\n\t\"-builtin_terms\",\n#endif\n#ifdef SOME_BUILTIN_TCAPS\n\t\"+builtin_terms\",\n#endif\n#ifdef ALL_BUILTIN_TCAPS\n\t\"++builtin_terms\",\n#endif\n#ifdef FEAT_BYTEOFF\n\t\"+byte_offset\",\n#else\n\t\"-byte_offset\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+channel\",\n#else\n\t\"-channel\",\n#endif\n#ifdef FEAT_CINDENT\n\t\"+cindent\",\n#else\n\t\"-cindent\",\n#endif\n#ifdef FEAT_CLIENTSERVER\n\t\"+clientserver\",\n#else\n\t\"-clientserver\",\n#endif\n#ifdef FEAT_CLIPBOARD\n\t\"+clipboard\",\n#else\n\t\"-clipboard\",\n#endif\n\t\"+cmdline_compl\",\n\t\"+cmdline_hist\",\n#ifdef FEAT_CMDL_INFO\n\t\"+cmdline_info\",\n#else\n\t\"-cmdline_info\",\n#endif\n\t\"+comments\",\n#ifdef FEAT_CONCEAL\n\t\"+conceal\",\n#else\n\t\"-conceal\",\n#endif\n#ifdef FEAT_CRYPT\n\t\"+cryptv\",\n#else\n\t\"-cryptv\",\n#endif\n#ifdef FEAT_CSCOPE\n\t\"+cscope\",\n#else\n\t\"-cscope\",\n#endif\n\t\"+cursorbind\",\n#ifdef CURSOR_SHAPE\n\t\"+cursorshape\",\n#else\n\t\"-cursorshape\",\n#endif\n#if defined(FEAT_CON_DIALOG) && defined(FEAT_GUI_DIALOG)\n\t\"+dialog_con_gui\",\n#else\n# if defined(FEAT_CON_DIALOG)\n\t\"+dialog_con\",\n# else\n#  if defined(FEAT_GUI_DIALOG)\n\t\"+dialog_gui\",\n#  else\n\t\"-dialog\",\n#  endif\n# endif\n#endif\n#ifdef FEAT_DIFF\n\t\"+diff\",\n#else\n\t\"-diff\",\n#endif\n#ifdef FEAT_DIGRAPHS\n\t\"+digraphs\",\n#else\n\t\"-digraphs\",\n#endif\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_DIRECTX\n\t\"+directx\",\n# else\n\t\"-directx\",\n# endif\n#endif\n#ifdef FEAT_DND\n\t\"+dnd\",\n#else\n\t\"-dnd\",\n#endif\n\t\"-ebcdic\",\n#ifdef FEAT_EMACS_TAGS\n\t\"+emacs_tags\",\n#else\n\t\"-emacs_tags\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+eval\",\n#else\n\t\"-eval\",\n#endif\n\t\"+ex_extra\",\n#ifdef FEAT_SEARCH_EXTRA\n\t\"+extra_search\",\n#else\n\t\"-extra_search\",\n#endif\n\t\"-farsi\",\n#ifdef FEAT_SEARCHPATH\n\t\"+file_in_path\",\n#else\n\t\"-file_in_path\",\n#endif\n#ifdef FEAT_FIND_ID\n\t\"+find_in_path\",\n#else\n\t\"-find_in_path\",\n#endif\n#ifdef FEAT_FLOAT\n\t\"+float\",\n#else\n\t\"-float\",\n#endif\n#ifdef FEAT_FOLDING\n\t\"+folding\",\n#else\n\t\"-folding\",\n#endif\n#ifdef FEAT_FOOTER\n\t\"+footer\",\n#else\n\t\"-footer\",\n#endif\n\t    // only interesting on Unix systems\n#if !defined(USE_SYSTEM) && defined(UNIX)\n\t\"+fork()\",\n#endif\n#ifdef FEAT_GETTEXT\n# ifdef DYNAMIC_GETTEXT\n\t\"+gettext/dyn\",\n# else\n\t\"+gettext\",\n# endif\n#else\n\t\"-gettext\",\n#endif\n\t\"-hangul_input\",\n#if (defined(HAVE_ICONV_H) && defined(USE_ICONV)) || defined(DYNAMIC_ICONV)\n# ifdef DYNAMIC_ICONV\n\t\"+iconv/dyn\",\n# else\n\t\"+iconv\",\n# endif\n#else\n\t\"-iconv\",\n#endif\n\t\"+insert_expand\",\n#ifdef FEAT_IPV6\n\t\"+ipv6\",\n#else\n\t\"-ipv6\",\n#endif\n#ifdef FEAT_JOB_CHANNEL\n\t\"+job\",\n#else\n\t\"-job\",\n#endif\n\t\"+jumplist\",\n#ifdef FEAT_KEYMAP\n\t\"+keymap\",\n#else\n\t\"-keymap\",\n#endif\n#ifdef FEAT_EVAL\n\t\"+lambda\",\n#else\n\t\"-lambda\",\n#endif\n#ifdef FEAT_LANGMAP\n\t\"+langmap\",\n#else\n\t\"-langmap\",\n#endif\n#ifdef FEAT_LIBCALL\n\t\"+libcall\",\n#else\n\t\"-libcall\",\n#endif\n#ifdef FEAT_LINEBREAK\n\t\"+linebreak\",\n#else\n\t\"-linebreak\",\n#endif\n#ifdef FEAT_LISP\n\t\"+lispindent\",\n#else\n\t\"-lispindent\",\n#endif\n\t\"+listcmds\",\n\t\"+localmap\",\n#ifdef FEAT_LUA\n# ifdef DYNAMIC_LUA\n\t\"+lua/dyn\",\n# else\n\t\"+lua\",\n# endif\n#else\n\t\"-lua\",\n#endif\n#ifdef FEAT_MENU\n\t\"+menu\",\n#else\n\t\"-menu\",\n#endif\n#ifdef FEAT_SESSION\n\t\"+mksession\",\n#else\n\t\"-mksession\",\n#endif\n\t\"+modify_fname\",\n\t\"+mouse\",\n#ifdef FEAT_MOUSESHAPE\n\t\"+mouseshape\",\n#else\n\t\"-mouseshape\",\n#endif\n\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_MOUSE_DEC\n\t\"+mouse_dec\",\n# else\n\t\"-mouse_dec\",\n# endif\n# ifdef FEAT_MOUSE_GPM\n#  ifdef DYNAMIC_GPM\n\t\"+mouse_gpm/dyn\",\n#  else\n\t\"+mouse_gpm\",\n#  endif\n# else\n\t\"-mouse_gpm\",\n# endif\n# ifdef FEAT_MOUSE_JSB\n\t\"+mouse_jsbterm\",\n# else\n\t\"-mouse_jsbterm\",\n# endif\n# ifdef FEAT_MOUSE_NET\n\t\"+mouse_netterm\",\n# else\n\t\"-mouse_netterm\",\n# endif\n#endif\n\n#ifdef __QNX__\n# ifdef FEAT_MOUSE_PTERM\n\t\"+mouse_pterm\",\n# else\n\t\"-mouse_pterm\",\n# endif\n#endif\n\n#if defined(UNIX) || defined(VMS)\n\t\"+mouse_sgr\",\n# ifdef FEAT_SYSMOUSE\n\t\"+mouse_sysmouse\",\n# else\n\t\"-mouse_sysmouse\",\n# endif\n# ifdef FEAT_MOUSE_URXVT\n\t\"+mouse_urxvt\",\n# else\n\t\"-mouse_urxvt\",\n# endif\n\t\"+mouse_xterm\",\n#endif\n\n#ifdef FEAT_MBYTE_IME\n# ifdef DYNAMIC_IME\n\t\"+multi_byte_ime/dyn\",\n# else\n\t\"+multi_byte_ime\",\n# endif\n#else\n\t\"+multi_byte\",\n#endif\n#ifdef FEAT_MULTI_LANG\n\t\"+multi_lang\",\n#else\n\t\"-multi_lang\",\n#endif\n#ifdef FEAT_MZSCHEME\n# ifdef DYNAMIC_MZSCHEME\n\t\"+mzscheme/dyn\",\n# else\n\t\"+mzscheme\",\n# endif\n#else\n\t\"-mzscheme\",\n#endif\n#ifdef FEAT_NETBEANS_INTG\n\t\"+netbeans_intg\",\n#else\n\t\"-netbeans_intg\",\n#endif\n\t\"+num64\",\n#ifdef FEAT_GUI_MSWIN\n# ifdef FEAT_OLE\n\t\"+ole\",\n# else\n\t\"-ole\",\n# endif\n#endif\n#ifdef FEAT_EVAL\n\t\"+packages\",\n#else\n\t\"-packages\",\n#endif\n#ifdef FEAT_PATH_EXTRA\n\t\"+path_extra\",\n#else\n\t\"-path_extra\",\n#endif\n#ifdef FEAT_PERL\n# ifdef DYNAMIC_PERL\n\t\"+perl/dyn\",\n# else\n\t\"+perl\",\n# endif\n#else\n\t\"-perl\",\n#endif\n#ifdef FEAT_PERSISTENT_UNDO\n\t\"+persistent_undo\",\n#else\n\t\"-persistent_undo\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+popupwin\",\n#else\n\t\"-popupwin\",\n#endif\n#ifdef FEAT_PRINTER\n# ifdef FEAT_POSTSCRIPT\n\t\"+postscript\",\n# else\n\t\"-postscript\",\n# endif\n\t\"+printer\",\n#else\n\t\"-printer\",\n#endif\n#ifdef FEAT_PROFILE\n\t\"+profile\",\n#else\n\t\"-profile\",\n#endif\n#ifdef FEAT_PYTHON\n# ifdef DYNAMIC_PYTHON\n\t\"+python/dyn\",\n# else\n\t\"+python\",\n# endif\n#else\n\t\"-python\",\n#endif\n#ifdef FEAT_PYTHON3\n# ifdef DYNAMIC_PYTHON3\n\t\"+python3/dyn\",\n# else\n\t\"+python3\",\n# endif\n#else\n\t\"-python3\",\n#endif\n#ifdef FEAT_QUICKFIX\n\t\"+quickfix\",\n#else\n\t\"-quickfix\",\n#endif\n#ifdef FEAT_RELTIME\n\t\"+reltime\",\n#else\n\t\"-reltime\",\n#endif\n#ifdef FEAT_RIGHTLEFT\n\t\"+rightleft\",\n#else\n\t\"-rightleft\",\n#endif\n#ifdef FEAT_RUBY\n# ifdef DYNAMIC_RUBY\n\t\"+ruby/dyn\",\n# else\n\t\"+ruby\",\n# endif\n#else\n\t\"-ruby\",\n#endif\n\t\"+scrollbind\",\n#ifdef FEAT_SIGNS\n\t\"+signs\",\n#else\n\t\"-signs\",\n#endif\n#ifdef FEAT_SMARTINDENT\n\t\"+smartindent\",\n#else\n\t\"-smartindent\",\n#endif\n#ifdef FEAT_SODIUM\n# ifdef DYNAMIC_SODIUM\n\t\"+sodium/dyn\",\n# else\n\t\"+sodium\",\n# endif\n#else\n\t\"-sodium\",\n#endif\n#ifdef FEAT_SOUND\n\t\"+sound\",\n#else\n\t\"-sound\",\n#endif\n#ifdef FEAT_SPELL\n\t\"+spell\",\n#else\n\t\"-spell\",\n#endif\n#ifdef STARTUPTIME\n\t\"+startuptime\",\n#else\n\t\"-startuptime\",\n#endif\n#ifdef FEAT_STL_OPT\n\t\"+statusline\",\n#else\n\t\"-statusline\",\n#endif\n\t\"-sun_workshop\",\n#ifdef FEAT_SYN_HL\n\t\"+syntax\",\n#else\n\t\"-syntax\",\n#endif\n\t    // only interesting on Unix systems\n#if defined(USE_SYSTEM) && defined(UNIX)\n\t\"+system()\",\n#endif\n\t\"+tag_binary\",\n\t\"-tag_old_static\",\n\t\"-tag_any_white\",\n#ifdef FEAT_TCL\n# ifdef DYNAMIC_TCL\n\t\"+tcl/dyn\",\n# else\n\t\"+tcl\",\n# endif\n#else\n\t\"-tcl\",\n#endif\n#ifdef FEAT_TERMGUICOLORS\n\t\"+termguicolors\",\n#else\n\t\"-termguicolors\",\n#endif\n#ifdef FEAT_TERMINAL\n\t\"+terminal\",\n#else\n\t\"-terminal\",\n#endif\n#if defined(UNIX)\n// only Unix can have terminfo instead of termcap\n# ifdef TERMINFO\n\t\"+terminfo\",\n# else\n\t\"-terminfo\",\n# endif\n#endif\n#ifdef FEAT_TERMRESPONSE\n\t\"+termresponse\",\n#else\n\t\"-termresponse\",\n#endif\n#ifdef FEAT_TEXTOBJ\n\t\"+textobjects\",\n#else\n\t\"-textobjects\",\n#endif\n#ifdef FEAT_PROP_POPUP\n\t\"+textprop\",\n#else\n\t\"-textprop\",\n#endif\n#if !defined(UNIX)\n// unix always includes termcap support\n# ifdef HAVE_TGETENT\n\t\"+tgetent\",\n# else\n\t\"-tgetent\",\n# endif\n#endif\n#ifdef FEAT_TIMERS\n\t\"+timers\",\n#else\n\t\"-timers\",\n#endif\n\t\"+title\",\n#ifdef FEAT_TOOLBAR\n\t\"+toolbar\",\n#else\n\t\"-toolbar\",\n#endif\n\t\"+user_commands\",\n#ifdef FEAT_VARTABS\n\t\"+vartabs\",\n#else\n\t\"-vartabs\",\n#endif\n\t\"+vertsplit\",\n\t\"+vim9script\",\n#ifdef FEAT_VIMINFO\n\t\"+viminfo\",\n#else\n\t\"-viminfo\",\n#endif\n\t\"+virtualedit\",\n\t\"+visual\",\n\t\"+visualextra\",\n\t\"+vreplace\",\n#ifdef MSWIN\n# ifdef FEAT_VTP\n\t\"+vtp\",\n# else\n\t\"-vtp\",\n# endif\n#endif\n#ifdef FEAT_WILDIGN\n\t\"+wildignore\",\n#else\n\t\"-wildignore\",\n#endif\n#ifdef FEAT_WILDMENU\n\t\"+wildmenu\",\n#else\n\t\"-wildmenu\",\n#endif\n\t\"+windows\",\n#ifdef FEAT_WRITEBACKUP\n\t\"+writebackup\",\n#else\n\t\"-writebackup\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# ifdef FEAT_X11\n\t\"+X11\",\n# else\n\t\"-X11\",\n# endif\n#endif\n#ifdef FEAT_XFONTSET\n\t\"+xfontset\",\n#else\n\t\"-xfontset\",\n#endif\n#ifdef FEAT_XIM\n\t\"+xim\",\n#else\n\t\"-xim\",\n#endif\n#if defined(MSWIN)\n# ifdef FEAT_XPM_W32\n\t\"+xpm_w32\",\n# else\n\t\"-xpm_w32\",\n# endif\n#elif defined(HAVE_XPM)\n\t\"+xpm\",\n#else\n\t\"-xpm\",\n#endif\n#if defined(UNIX) || defined(VMS)\n# if defined(USE_XSMP_INTERACT)\n\t\"+xsmp_interact\",\n# elif defined(USE_XSMP)\n\t\"+xsmp\",\n# else\n\t\"-xsmp\",\n# endif\n# ifdef FEAT_XCLIPBOARD\n\t\"+xterm_clipboard\",\n# else\n\t\"-xterm_clipboard\",\n# endif\n#endif\n#ifdef FEAT_XTERM_SAVE\n\t\"+xterm_save\",\n#else\n\t\"-xterm_save\",\n#endif\n\tNULL\n};\n\nstatic int included_patches[] =\n{   /* Add new patch number below this line */\n/**/\n    4974,\n/**/\n    4973,\n/**/\n    4972,\n/**/\n    4971,\n/**/\n    4970,\n/**/\n    4969,\n/**/\n    4968,\n/**/\n    4967,\n/**/\n    4966,\n/**/\n    4965,\n/**/\n    4964,\n/**/\n    4963,\n/**/\n    4962,\n/**/\n    4961,\n/**/\n    4960,\n/**/\n    4959,\n/**/\n    4958,\n/**/\n    4957,\n/**/\n    4956,\n/**/\n    4955,\n/**/\n    4954,\n/**/\n    4953,\n/**/\n    4952,\n/**/\n    4951,\n/**/\n    4950,\n/**/\n    4949,\n/**/\n    4948,\n/**/\n    4947,\n/**/\n    4946,\n/**/\n    4945,\n/**/\n    4944,\n/**/\n    4943,\n/**/\n    4942,\n/**/\n    4941,\n/**/\n    4940,\n/**/\n    4939,\n/**/\n    4938,\n/**/\n    4937,\n/**/\n    4936,\n/**/\n    4935,\n/**/\n    4934,\n/**/\n    4933,\n/**/\n    4932,\n/**/\n    4931,\n/**/\n    4930,\n/**/\n    4929,\n/**/\n    4928,\n/**/\n    4927,\n/**/\n    4926,\n/**/\n    4925,\n/**/\n    4924,\n/**/\n    4923,\n/**/\n    4922,\n/**/\n    4921,\n/**/\n    4920,\n/**/\n    4919,\n/**/\n    4918,\n/**/\n    4917,\n/**/\n    4916,\n/**/\n    4915,\n/**/\n    4914,\n/**/\n    4913,\n/**/\n    4912,\n/**/\n    4911,\n/**/\n    4910,\n/**/\n    4909,\n/**/\n    4908,\n/**/\n    4907,\n/**/\n    4906,\n/**/\n    4905,\n/**/\n    4904,\n/**/\n    4903,\n/**/\n    4902,\n/**/\n    4901,\n/**/\n    4900,\n/**/\n    4899,\n/**/\n    4898,\n/**/\n    4897,\n/**/\n    4896,\n/**/\n    4895,\n/**/\n    4894,\n/**/\n    4893,\n/**/\n    4892,\n/**/\n    4891,\n/**/\n    4890,\n/**/\n    4889,\n/**/\n    4888,\n/**/\n    4887,\n/**/\n    4886,\n/**/\n    4885,\n/**/\n    4884,\n/**/\n    4883,\n/**/\n    4882,\n/**/\n    4881,\n/**/\n    4880,\n/**/\n    4879,\n/**/\n    4878,\n/**/\n    4877,\n/**/\n    4876,\n/**/\n    4875,\n/**/\n    4874,\n/**/\n    4873,\n/**/\n    4872,\n/**/\n    4871,\n/**/\n    4870,\n/**/\n    4869,\n/**/\n    4868,\n/**/\n    4867,\n/**/\n    4866,\n/**/\n    4865,\n/**/\n    4864,\n/**/\n    4863,\n/**/\n    4862,\n/**/\n    4861,\n/**/\n    4860,\n/**/\n    4859,\n/**/\n    4858,\n/**/\n    4857,\n/**/\n    4856,\n/**/\n    4855,\n/**/\n    4854,\n/**/\n    4853,\n/**/\n    4852,\n/**/\n    4851,\n/**/\n    4850,\n/**/\n    4849,\n/**/\n    4848,\n/**/\n    4847,\n/**/\n    4846,\n/**/\n    4845,\n/**/\n    4844,\n/**/\n    4843,\n/**/\n    4842,\n/**/\n    4841,\n/**/\n    4840,\n/**/\n    4839,\n/**/\n    4838,\n/**/\n    4837,\n/**/\n    4836,\n/**/\n    4835,\n/**/\n    4834,\n/**/\n    4833,\n/**/\n    4832,\n/**/\n    4831,\n/**/\n    4830,\n/**/\n    4829,\n/**/\n    4828,\n/**/\n    4827,\n/**/\n    4826,\n/**/\n    4825,\n/**/\n    4824,\n/**/\n    4823,\n/**/\n    4822,\n/**/\n    4821,\n/**/\n    4820,\n/**/\n    4819,\n/**/\n    4818,\n/**/\n    4817,\n/**/\n    4816,\n/**/\n    4815,\n/**/\n    4814,\n/**/\n    4813,\n/**/\n    4812,\n/**/\n    4811,\n/**/\n    4810,\n/**/\n    4809,\n/**/\n    4808,\n/**/\n    4807,\n/**/\n    4806,\n/**/\n    4805,\n/**/\n    4804,\n/**/\n    4803,\n/**/\n    4802,\n/**/\n    4801,\n/**/\n    4800,\n/**/\n    4799,\n/**/\n    4798,\n/**/\n    4797,\n/**/\n    4796,\n/**/\n    4795,\n/**/\n    4794,\n/**/\n    4793,\n/**/\n    4792,\n/**/\n    4791,\n/**/\n    4790,\n/**/\n    4789,\n/**/\n    4788,\n/**/\n    4787,\n/**/\n    4786,\n/**/\n    4785,\n/**/\n    4784,\n/**/\n    4783,\n/**/\n    4782,\n/**/\n    4781,\n/**/\n    4780,\n/**/\n    4779,\n/**/\n    4778,\n/**/\n    4777,\n/**/\n    4776,\n/**/\n    4775,\n/**/\n    4774,\n/**/\n    4773,\n/**/\n    4772,\n/**/\n    4771,\n/**/\n    4770,\n/**/\n    4769,\n/**/\n    4768,\n/**/\n    4767,\n/**/\n    4766,\n/**/\n    4765,\n/**/\n    4764,\n/**/\n    4763,\n/**/\n    4762,\n/**/\n    4761,\n/**/\n    4760,\n/**/\n    4759,\n/**/\n    4758,\n/**/\n    4757,\n/**/\n    4756,\n/**/\n    4755,\n/**/\n    4754,\n/**/\n    4753,\n/**/\n    4752,\n/**/\n    4751,\n/**/\n    4750,\n/**/\n    4749,\n/**/\n    4748,\n/**/\n    4747,\n/**/\n    4746,\n/**/\n    4745,\n/**/\n    4744,\n/**/\n    4743,\n/**/\n    4742,\n/**/\n    4741,\n/**/\n    4740,\n/**/\n    4739,\n/**/\n    4738,\n/**/\n    4737,\n/**/\n    4736,\n/**/\n    4735,\n/**/\n    4734,\n/**/\n    4733,\n/**/\n    4732,\n/**/\n    4731,\n/**/\n    4730,\n/**/\n    4729,\n/**/\n    4728,\n/**/\n    4727,\n/**/\n    4726,\n/**/\n    4725,\n/**/\n    4724,\n/**/\n    4723,\n/**/\n    4722,\n/**/\n    4721,\n/**/\n    4720,\n/**/\n    4719,\n/**/\n    4718,\n/**/\n    4717,\n/**/\n    4716,\n/**/\n    4715,\n/**/\n    4714,\n/**/\n    4713,\n/**/\n    4712,\n/**/\n    4711,\n/**/\n    4710,\n/**/\n    4709,\n/**/\n    4708,\n/**/\n    4707,\n/**/\n    4706,\n/**/\n    4705,\n/**/\n    4704,\n/**/\n    4703,\n/**/\n    4702,\n/**/\n    4701,\n/**/\n    4700,\n/**/\n    4699,\n/**/\n    4698,\n/**/\n    4697,\n/**/\n    4696,\n/**/\n    4695,\n/**/\n    4694,\n/**/\n    4693,\n/**/\n    4692,\n/**/\n    4691,\n/**/\n    4690,\n/**/\n    4689,\n/**/\n    4688,\n/**/\n    4687,\n/**/\n    4686,\n/**/\n    4685,\n/**/\n    4684,\n/**/\n    4683,\n/**/\n    4682,\n/**/\n    4681,\n/**/\n    4680,\n/**/\n    4679,\n/**/\n    4678,\n/**/\n    4677,\n/**/\n    4676,\n/**/\n    4675,\n/**/\n    4674,\n/**/\n    4673,\n/**/\n    4672,\n/**/\n    4671,\n/**/\n    4670,\n/**/\n    4669,\n/**/\n    4668,\n/**/\n    4667,\n/**/\n    4666,\n/**/\n    4665,\n/**/\n    4664,\n/**/\n    4663,\n/**/\n    4662,\n/**/\n    4661,\n/**/\n    4660,\n/**/\n    4659,\n/**/\n    4658,\n/**/\n    4657,\n/**/\n    4656,\n/**/\n    4655,\n/**/\n    4654,\n/**/\n    4653,\n/**/\n    4652,\n/**/\n    4651,\n/**/\n    4650,\n/**/\n    4649,\n/**/\n    4648,\n/**/\n    4647,\n/**/\n    4646,\n/**/\n    4645,\n/**/\n    4644,\n/**/\n    4643,\n/**/\n    4642,\n/**/\n    4641,\n/**/\n    4640,\n/**/\n    4639,\n/**/\n    4638,\n/**/\n    4637,\n/**/\n    4636,\n/**/\n    4635,\n/**/\n    4634,\n/**/\n    4633,\n/**/\n    4632,\n/**/\n    4631,\n/**/\n    4630,\n/**/\n    4629,\n/**/\n    4628,\n/**/\n    4627,\n/**/\n    4626,\n/**/\n    4625,\n/**/\n    4624,\n/**/\n    4623,\n/**/\n    4622,\n/**/\n    4621,\n/**/\n    4620,\n/**/\n    4619,\n/**/\n    4618,\n/**/\n    4617,\n/**/\n    4616,\n/**/\n    4615,\n/**/\n    4614,\n/**/\n    4613,\n/**/\n    4612,\n/**/\n    4611,\n/**/\n    4610,\n/**/\n    4609,\n/**/\n    4608,\n/**/\n    4607,\n/**/\n    4606,\n/**/\n    4605,\n/**/\n    4604,\n/**/\n    4603,\n/**/\n    4602,\n/**/\n    4601,\n/**/\n    4600,\n/**/\n    4599,\n/**/\n    4598,\n/**/\n    4597,\n/**/\n    4596,\n/**/\n    4595,\n/**/\n    4594,\n/**/\n    4593,\n/**/\n    4592,\n/**/\n    4591,\n/**/\n    4590,\n/**/\n    4589,\n/**/\n    4588,\n/**/\n    4587,\n/**/\n    4586,\n/**/\n    4585,\n/**/\n    4584,\n/**/\n    4583,\n/**/\n    4582,\n/**/\n    4581,\n/**/\n    4580,\n/**/\n    4579,\n/**/\n    4578,\n/**/\n    4577,\n/**/\n    4576,\n/**/\n    4575,\n/**/\n    4574,\n/**/\n    4573,\n/**/\n    4572,\n/**/\n    4571,\n/**/\n    4570,\n/**/\n    4569,\n/**/\n    4568,\n/**/\n    4567,\n/**/\n    4566,\n/**/\n    4565,\n/**/\n    4564,\n/**/\n    4563,\n/**/\n    4562,\n/**/\n    4561,\n/**/\n    4560,\n/**/\n    4559,\n/**/\n    4558,\n/**/\n    4557,\n/**/\n    4556,\n/**/\n    4555,\n/**/\n    4554,\n/**/\n    4553,\n/**/\n    4552,\n/**/\n    4551,\n/**/\n    4550,\n/**/\n    4549,\n/**/\n    4548,\n/**/\n    4547,\n/**/\n    4546,\n/**/\n    4545,\n/**/\n    4544,\n/**/\n    4543,\n/**/\n    4542,\n/**/\n    4541,\n/**/\n    4540,\n/**/\n    4539,\n/**/\n    4538,\n/**/\n    4537,\n/**/\n    4536,\n/**/\n    4535,\n/**/\n    4534,\n/**/\n    4533,\n/**/\n    4532,\n/**/\n    4531,\n/**/\n    4530,\n/**/\n    4529,\n/**/\n    4528,\n/**/\n    4527,\n/**/\n    4526,\n/**/\n    4525,\n/**/\n    4524,\n/**/\n    4523,\n/**/\n    4522,\n/**/\n    4521,\n/**/\n    4520,\n/**/\n    4519,\n/**/\n    4518,\n/**/\n    4517,\n/**/\n    4516,\n/**/\n    4515,\n/**/\n    4514,\n/**/\n    4513,\n/**/\n    4512,\n/**/\n    4511,\n/**/\n    4510,\n/**/\n    4509,\n/**/\n    4508,\n/**/\n    4507,\n/**/\n    4506,\n/**/\n    4505,\n/**/\n    4504,\n/**/\n    4503,\n/**/\n    4502,\n/**/\n    4501,\n/**/\n    4500,\n/**/\n    4499,\n/**/\n    4498,\n/**/\n    4497,\n/**/\n    4496,\n/**/\n    4495,\n/**/\n    4494,\n/**/\n    4493,\n/**/\n    4492,\n/**/\n    4491,\n/**/\n    4490,\n/**/\n    4489,\n/**/\n    4488,\n/**/\n    4487,\n/**/\n    4486,\n/**/\n    4485,\n/**/\n    4484,\n/**/\n    4483,\n/**/\n    4482,\n/**/\n    4481,\n/**/\n    4480,\n/**/\n    4479,\n/**/\n    4478,\n/**/\n    4477,\n/**/\n    4476,\n/**/\n    4475,\n/**/\n    4474,\n/**/\n    4473,\n/**/\n    4472,\n/**/\n    4471,\n/**/\n    4470,\n/**/\n    4469,\n/**/\n    4468,\n/**/\n    4467,\n/**/\n    4466,\n/**/\n    4465,\n/**/\n    4464,\n/**/\n    4463,\n/**/\n    4462,\n/**/\n    4461,\n/**/\n    4460,\n/**/\n    4459,\n/**/\n    4458,\n/**/\n    4457,\n/**/\n    4456,\n/**/\n    4455,\n/**/\n    4454,\n/**/\n    4453,\n/**/\n    4452,\n/**/\n    4451,\n/**/\n    4450,\n/**/\n    4449,\n/**/\n    4448,\n/**/\n    4447,\n/**/\n    4446,\n/**/\n    4445,\n/**/\n    4444,\n/**/\n    4443,\n/**/\n    4442,\n/**/\n    4441,\n/**/\n    4440,\n/**/\n    4439,\n/**/\n    4438,\n/**/\n    4437,\n/**/\n    4436,\n/**/\n    4435,\n/**/\n    4434,\n/**/\n    4433,\n/**/\n    4432,\n/**/\n    4431,\n/**/\n    4430,\n/**/\n    4429,\n/**/\n    4428,\n/**/\n    4427,\n/**/\n    4426,\n/**/\n    4425,\n/**/\n    4424,\n/**/\n    4423,\n/**/\n    4422,\n/**/\n    4421,\n/**/\n    4420,\n/**/\n    4419,\n/**/\n    4418,\n/**/\n    4417,\n/**/\n    4416,\n/**/\n    4415,\n/**/\n    4414,\n/**/\n    4413,\n/**/\n    4412,\n/**/\n    4411,\n/**/\n    4410,\n/**/\n    4409,\n/**/\n    4408,\n/**/\n    4407,\n/**/\n    4406,\n/**/\n    4405,\n/**/\n    4404,\n/**/\n    4403,\n/**/\n    4402,\n/**/\n    4401,\n/**/\n    4400,\n/**/\n    4399,\n/**/\n    4398,\n/**/\n    4397,\n/**/\n    4396,\n/**/\n    4395,\n/**/\n    4394,\n/**/\n    4393,\n/**/\n    4392,\n/**/\n    4391,\n/**/\n    4390,\n/**/\n    4389,\n/**/\n    4388,\n/**/\n    4387,\n/**/\n    4386,\n/**/\n    4385,\n/**/\n    4384,\n/**/\n    4383,\n/**/\n    4382,\n/**/\n    4381,\n/**/\n    4380,\n/**/\n    4379,\n/**/\n    4378,\n/**/\n    4377,\n/**/\n    4376,\n/**/\n    4375,\n/**/\n    4374,\n/**/\n    4373,\n/**/\n    4372,\n/**/\n    4371,\n/**/\n    4370,\n/**/\n    4369,\n/**/\n    4368,\n/**/\n    4367,\n/**/\n    4366,\n/**/\n    4365,\n/**/\n    4364,\n/**/\n    4363,\n/**/\n    4362,\n/**/\n    4361,\n/**/\n    4360,\n/**/\n    4359,\n/**/\n    4358,\n/**/\n    4357,\n/**/\n    4356,\n/**/\n    4355,\n/**/\n    4354,\n/**/\n    4353,\n/**/\n    4352,\n/**/\n    4351,\n/**/\n    4350,\n/**/\n    4349,\n/**/\n    4348,\n/**/\n    4347,\n/**/\n    4346,\n/**/\n    4345,\n/**/\n    4344,\n/**/\n    4343,\n/**/\n    4342,\n/**/\n    4341,\n/**/\n    4340,\n/**/\n    4339,\n/**/\n    4338,\n/**/\n    4337,\n/**/\n    4336,\n/**/\n    4335,\n/**/\n    4334,\n/**/\n    4333,\n/**/\n    4332,\n/**/\n    4331,\n/**/\n    4330,\n/**/\n    4329,\n/**/\n    4328,\n/**/\n    4327,\n/**/\n    4326,\n/**/\n    4325,\n/**/\n    4324,\n/**/\n    4323,\n/**/\n    4322,\n/**/\n    4321,\n/**/\n    4320,\n/**/\n    4319,\n/**/\n    4318,\n/**/\n    4317,\n/**/\n    4316,\n/**/\n    4315,\n/**/\n    4314,\n/**/\n    4313,\n/**/\n    4312,\n/**/\n    4311,\n/**/\n    4310,\n/**/\n    4309,\n/**/\n    4308,\n/**/\n    4307,\n/**/\n    4306,\n/**/\n    4305,\n/**/\n    4304,\n/**/\n    4303,\n/**/\n    4302,\n/**/\n    4301,\n/**/\n    4300,\n/**/\n    4299,\n/**/\n    4298,\n/**/\n    4297,\n/**/\n    4296,\n/**/\n    4295,\n/**/\n    4294,\n/**/\n    4293,\n/**/\n    4292,\n/**/\n    4291,\n/**/\n    4290,\n/**/\n    4289,\n/**/\n    4288,\n/**/\n    4287,\n/**/\n    4286,\n/**/\n    4285,\n/**/\n    4284,\n/**/\n    4283,\n/**/\n    4282,\n/**/\n    4281,\n/**/\n    4280,\n/**/\n    4279,\n/**/\n    4278,\n/**/\n    4277,\n/**/\n    4276,\n/**/\n    4275,\n/**/\n    4274,\n/**/\n    4273,\n/**/\n    4272,\n/**/\n    4271,\n/**/\n    4270,\n/**/\n    4269,\n/**/\n    4268,\n/**/\n    4267,\n/**/\n    4266,\n/**/\n    4265,\n/**/\n    4264,\n/**/\n    4263,\n/**/\n    4262,\n/**/\n    4261,\n/**/\n    4260,\n/**/\n    4259,\n/**/\n    4258,\n/**/\n    4257,\n/**/\n    4256,\n/**/\n    4255,\n/**/\n    4254,\n/**/\n    4253,\n/**/\n    4252,\n/**/\n    4251,\n/**/\n    4250,\n/**/\n    4249,\n/**/\n    4248,\n/**/\n    4247,\n/**/\n    4246,\n/**/\n    4245,\n/**/\n    4244,\n/**/\n    4243,\n/**/\n    4242,\n/**/\n    4241,\n/**/\n    4240,\n/**/\n    4239,\n/**/\n    4238,\n/**/\n    4237,\n/**/\n    4236,\n/**/\n    4235,\n/**/\n    4234,\n/**/\n    4233,\n/**/\n    4232,\n/**/\n    4231,\n/**/\n    4230,\n/**/\n    4229,\n/**/\n    4228,\n/**/\n    4227,\n/**/\n    4226,\n/**/\n    4225,\n/**/\n    4224,\n/**/\n    4223,\n/**/\n    4222,\n/**/\n    4221,\n/**/\n    4220,\n/**/\n    4219,\n/**/\n    4218,\n/**/\n    4217,\n/**/\n    4216,\n/**/\n    4215,\n/**/\n    4214,\n/**/\n    4213,\n/**/\n    4212,\n/**/\n    4211,\n/**/\n    4210,\n/**/\n    4209,\n/**/\n    4208,\n/**/\n    4207,\n/**/\n    4206,\n/**/\n    4205,\n/**/\n    4204,\n/**/\n    4203,\n/**/\n    4202,\n/**/\n    4201,\n/**/\n    4200,\n/**/\n    4199,\n/**/\n    4198,\n/**/\n    4197,\n/**/\n    4196,\n/**/\n    4195,\n/**/\n    4194,\n/**/\n    4193,\n/**/\n    4192,\n/**/\n    4191,\n/**/\n    4190,\n/**/\n    4189,\n/**/\n    4188,\n/**/\n    4187,\n/**/\n    4186,\n/**/\n    4185,\n/**/\n    4184,\n/**/\n    4183,\n/**/\n    4182,\n/**/\n    4181,\n/**/\n    4180,\n/**/\n    4179,\n/**/\n    4178,\n/**/\n    4177,\n/**/\n    4176,\n/**/\n    4175,\n/**/\n    4174,\n/**/\n    4173,\n/**/\n    4172,\n/**/\n    4171,\n/**/\n    4170,\n/**/\n    4169,\n/**/\n    4168,\n/**/\n    4167,\n/**/\n    4166,\n/**/\n    4165,\n/**/\n    4164,\n/**/\n    4163,\n/**/\n    4162,\n/**/\n    4161,\n/**/\n    4160,\n/**/\n    4159,\n/**/\n    4158,\n/**/\n    4157,\n/**/\n    4156,\n/**/\n    4155,\n/**/\n    4154,\n/**/\n    4153,\n/**/\n    4152,\n/**/\n    4151,\n/**/\n    4150,\n/**/\n    4149,\n/**/\n    4148,\n/**/\n    4147,\n/**/\n    4146,\n/**/\n    4145,\n/**/\n    4144,\n/**/\n    4143,\n/**/\n    4142,\n/**/\n    4141,\n/**/\n    4140,\n/**/\n    4139,\n/**/\n    4138,\n/**/\n    4137,\n/**/\n    4136,\n/**/\n    4135,\n/**/\n    4134,\n/**/\n    4133,\n/**/\n    4132,\n/**/\n    4131,\n/**/\n    4130,\n/**/\n    4129,\n/**/\n    4128,\n/**/\n    4127,\n/**/\n    4126,\n/**/\n    4125,\n/**/\n    4124,\n/**/\n    4123,\n/**/\n    4122,\n/**/\n    4121,\n/**/\n    4120,\n/**/\n    4119,\n/**/\n    4118,\n/**/\n    4117,\n/**/\n    4116,\n/**/\n    4115,\n/**/\n    4114,\n/**/\n    4113,\n/**/\n    4112,\n/**/\n    4111,\n/**/\n    4110,\n/**/\n    4109,\n/**/\n    4108,\n/**/\n    4107,\n/**/\n    4106,\n/**/\n    4105,\n/**/\n    4104,\n/**/\n    4103,\n/**/\n    4102,\n/**/\n    4101,\n/**/\n    4100,\n/**/\n    4099,\n/**/\n    4098,\n/**/\n    4097,\n/**/\n    4096,\n/**/\n    4095,\n/**/\n    4094,\n/**/\n    4093,\n/**/\n    4092,\n/**/\n    4091,\n/**/\n    4090,\n/**/\n    4089,\n/**/\n    4088,\n/**/\n    4087,\n/**/\n    4086,\n/**/\n    4085,\n/**/\n    4084,\n/**/\n    4083,\n/**/\n    4082,\n/**/\n    4081,\n/**/\n    4080,\n/**/\n    4079,\n/**/\n    4078,\n/**/\n    4077,\n/**/\n    4076,\n/**/\n    4075,\n/**/\n    4074,\n/**/\n    4073,\n/**/\n    4072,\n/**/\n    4071,\n/**/\n    4070,\n/**/\n    4069,\n/**/\n    4068,\n/**/\n    4067,\n/**/\n    4066,\n/**/\n    4065,\n/**/\n    4064,\n/**/\n    4063,\n/**/\n    4062,\n/**/\n    4061,\n/**/\n    4060,\n/**/\n    4059,\n/**/\n    4058,\n/**/\n    4057,\n/**/\n    4056,\n/**/\n    4055,\n/**/\n    4054,\n/**/\n    4053,\n/**/\n    4052,\n/**/\n    4051,\n/**/\n    4050,\n/**/\n    4049,\n/**/\n    4048,\n/**/\n    4047,\n/**/\n    4046,\n/**/\n    4045,\n/**/\n    4044,\n/**/\n    4043,\n/**/\n    4042,\n/**/\n    4041,\n/**/\n    4040,\n/**/\n    4039,\n/**/\n    4038,\n/**/\n    4037,\n/**/\n    4036,\n/**/\n    4035,\n/**/\n    4034,\n/**/\n    4033,\n/**/\n    4032,\n/**/\n    4031,\n/**/\n    4030,\n/**/\n    4029,\n/**/\n    4028,\n/**/\n    4027,\n/**/\n    4026,\n/**/\n    4025,\n/**/\n    4024,\n/**/\n    4023,\n/**/\n    4022,\n/**/\n    4021,\n/**/\n    4020,\n/**/\n    4019,\n/**/\n    4018,\n/**/\n    4017,\n/**/\n    4016,\n/**/\n    4015,\n/**/\n    4014,\n/**/\n    4013,\n/**/\n    4012,\n/**/\n    4011,\n/**/\n    4010,\n/**/\n    4009,\n/**/\n    4008,\n/**/\n    4007,\n/**/\n    4006,\n/**/\n    4005,\n/**/\n    4004,\n/**/\n    4003,\n/**/\n    4002,\n/**/\n    4001,\n/**/\n    4000,\n/**/\n    3999,\n/**/\n    3998,\n/**/\n    3997,\n/**/\n    3996,\n/**/\n    3995,\n/**/\n    3994,\n/**/\n    3993,\n/**/\n    3992,\n/**/\n    3991,\n/**/\n    3990,\n/**/\n    3989,\n/**/\n    3988,\n/**/\n    3987,\n/**/\n    3986,\n/**/\n    3985,\n/**/\n    3984,\n/**/\n    3983,\n/**/\n    3982,\n/**/\n    3981,\n/**/\n    3980,\n/**/\n    3979,\n/**/\n    3978,\n/**/\n    3977,\n/**/\n    3976,\n/**/\n    3975,\n/**/\n    3974,\n/**/\n    3973,\n/**/\n    3972,\n/**/\n    3971,\n/**/\n    3970,\n/**/\n    3969,\n/**/\n    3968,\n/**/\n    3967,\n/**/\n    3966,\n/**/\n    3965,\n/**/\n    3964,\n/**/\n    3963,\n/**/\n    3962,\n/**/\n    3961,\n/**/\n    3960,\n/**/\n    3959,\n/**/\n    3958,\n/**/\n    3957,\n/**/\n    3956,\n/**/\n    3955,\n/**/\n    3954,\n/**/\n    3953,\n/**/\n    3952,\n/**/\n    3951,\n/**/\n    3950,\n/**/\n    3949,\n/**/\n    3948,\n/**/\n    3947,\n/**/\n    3946,\n/**/\n    3945,\n/**/\n    3944,\n/**/\n    3943,\n/**/\n    3942,\n/**/\n    3941,\n/**/\n    3940,\n/**/\n    3939,\n/**/\n    3938,\n/**/\n    3937,\n/**/\n    3936,\n/**/\n    3935,\n/**/\n    3934,\n/**/\n    3933,\n/**/\n    3932,\n/**/\n    3931,\n/**/\n    3930,\n/**/\n    3929,\n/**/\n    3928,\n/**/\n    3927,\n/**/\n    3926,\n/**/\n    3925,\n/**/\n    3924,\n/**/\n    3923,\n/**/\n    3922,\n/**/\n    3921,\n/**/\n    3920,\n/**/\n    3919,\n/**/\n    3918,\n/**/\n    3917,\n/**/\n    3916,\n/**/\n    3915,\n/**/\n    3914,\n/**/\n    3913,\n/**/\n    3912,\n/**/\n    3911,\n/**/\n    3910,\n/**/\n    3909,\n/**/\n    3908,\n/**/\n    3907,\n/**/\n    3906,\n/**/\n    3905,\n/**/\n    3904,\n/**/\n    3903,\n/**/\n    3902,\n/**/\n    3901,\n/**/\n    3900,\n/**/\n    3899,\n/**/\n    3898,\n/**/\n    3897,\n/**/\n    3896,\n/**/\n    3895,\n/**/\n    3894,\n/**/\n    3893,\n/**/\n    3892,\n/**/\n    3891,\n/**/\n    3890,\n/**/\n    3889,\n/**/\n    3888,\n/**/\n    3887,\n/**/\n    3886,\n/**/\n    3885,\n/**/\n    3884,\n/**/\n    3883,\n/**/\n    3882,\n/**/\n    3881,\n/**/\n    3880,\n/**/\n    3879,\n/**/\n    3878,\n/**/\n    3877,\n/**/\n    3876,\n/**/\n    3875,\n/**/\n    3874,\n/**/\n    3873,\n/**/\n    3872,\n/**/\n    3871,\n/**/\n    3870,\n/**/\n    3869,\n/**/\n    3868,\n/**/\n    3867,\n/**/\n    3866,\n/**/\n    3865,\n/**/\n    3864,\n/**/\n    3863,\n/**/\n    3862,\n/**/\n    3861,\n/**/\n    3860,\n/**/\n    3859,\n/**/\n    3858,\n/**/\n    3857,\n/**/\n    3856,\n/**/\n    3855,\n/**/\n    3854,\n/**/\n    3853,\n/**/\n    3852,\n/**/\n    3851,\n/**/\n    3850,\n/**/\n    3849,\n/**/\n    3848,\n/**/\n    3847,\n/**/\n    3846,\n/**/\n    3845,\n/**/\n    3844,\n/**/\n    3843,\n/**/\n    3842,\n/**/\n    3841,\n/**/\n    3840,\n/**/\n    3839,\n/**/\n    3838,\n/**/\n    3837,\n/**/\n    3836,\n/**/\n    3835,\n/**/\n    3834,\n/**/\n    3833,\n/**/\n    3832,\n/**/\n    3831,\n/**/\n    3830,\n/**/\n    3829,\n/**/\n    3828,\n/**/\n    3827,\n/**/\n    3826,\n/**/\n    3825,\n/**/\n    3824,\n/**/\n    3823,\n/**/\n    3822,\n/**/\n    3821,\n/**/\n    3820,\n/**/\n    3819,\n/**/\n    3818,\n/**/\n    3817,\n/**/\n    3816,\n/**/\n    3815,\n/**/\n    3814,\n/**/\n    3813,\n/**/\n    3812,\n/**/\n    3811,\n/**/\n    3810,\n/**/\n    3809,\n/**/\n    3808,\n/**/\n    3807,\n/**/\n    3806,\n/**/\n    3805,\n/**/\n    3804,\n/**/\n    3803,\n/**/\n    3802,\n/**/\n    3801,\n/**/\n    3800,\n/**/\n    3799,\n/**/\n    3798,\n/**/\n    3797,\n/**/\n    3796,\n/**/\n    3795,\n/**/\n    3794,\n/**/\n    3793,\n/**/\n    3792,\n/**/\n    3791,\n/**/\n    3790,\n/**/\n    3789,\n/**/\n    3788,\n/**/\n    3787,\n/**/\n    3786,\n/**/\n    3785,\n/**/\n    3784,\n/**/\n    3783,\n/**/\n    3782,\n/**/\n    3781,\n/**/\n    3780,\n/**/\n    3779,\n/**/\n    3778,\n/**/\n    3777,\n/**/\n    3776,\n/**/\n    3775,\n/**/\n    3774,\n/**/\n    3773,\n/**/\n    3772,\n/**/\n    3771,\n/**/\n    3770,\n/**/\n    3769,\n/**/\n    3768,\n/**/\n    3767,\n/**/\n    3766,\n/**/\n    3765,\n/**/\n    3764,\n/**/\n    3763,\n/**/\n    3762,\n/**/\n    3761,\n/**/\n    3760,\n/**/\n    3759,\n/**/\n    3758,\n/**/\n    3757,\n/**/\n    3756,\n/**/\n    3755,\n/**/\n    3754,\n/**/\n    3753,\n/**/\n    3752,\n/**/\n    3751,\n/**/\n    3750,\n/**/\n    3749,\n/**/\n    3748,\n/**/\n    3747,\n/**/\n    3746,\n/**/\n    3745,\n/**/\n    3744,\n/**/\n    3743,\n/**/\n    3742,\n/**/\n    3741,\n/**/\n    3740,\n/**/\n    3739,\n/**/\n    3738,\n/**/\n    3737,\n/**/\n    3736,\n/**/\n    3735,\n/**/\n    3734,\n/**/\n    3733,\n/**/\n    3732,\n/**/\n    3731,\n/**/\n    3730,\n/**/\n    3729,\n/**/\n    3728,\n/**/\n    3727,\n/**/\n    3726,\n/**/\n    3725,\n/**/\n    3724,\n/**/\n    3723,\n/**/\n    3722,\n/**/\n    3721,\n/**/\n    3720,\n/**/\n    3719,\n/**/\n    3718,\n/**/\n    3717,\n/**/\n    3716,\n/**/\n    3715,\n/**/\n    3714,\n/**/\n    3713,\n/**/\n    3712,\n/**/\n    3711,\n/**/\n    3710,\n/**/\n    3709,\n/**/\n    3708,\n/**/\n    3707,\n/**/\n    3706,\n/**/\n    3705,\n/**/\n    3704,\n/**/\n    3703,\n/**/\n    3702,\n/**/\n    3701,\n/**/\n    3700,\n/**/\n    3699,\n/**/\n    3698,\n/**/\n    3697,\n/**/\n    3696,\n/**/\n    3695,\n/**/\n    3694,\n/**/\n    3693,\n/**/\n    3692,\n/**/\n    3691,\n/**/\n    3690,\n/**/\n    3689,\n/**/\n    3688,\n/**/\n    3687,\n/**/\n    3686,\n/**/\n    3685,\n/**/\n    3684,\n/**/\n    3683,\n/**/\n    3682,\n/**/\n    3681,\n/**/\n    3680,\n/**/\n    3679,\n/**/\n    3678,\n/**/\n    3677,\n/**/\n    3676,\n/**/\n    3675,\n/**/\n    3674,\n/**/\n    3673,\n/**/\n    3672,\n/**/\n    3671,\n/**/\n    3670,\n/**/\n    3669,\n/**/\n    3668,\n/**/\n    3667,\n/**/\n    3666,\n/**/\n    3665,\n/**/\n    3664,\n/**/\n    3663,\n/**/\n    3662,\n/**/\n    3661,\n/**/\n    3660,\n/**/\n    3659,\n/**/\n    3658,\n/**/\n    3657,\n/**/\n    3656,\n/**/\n    3655,\n/**/\n    3654,\n/**/\n    3653,\n/**/\n    3652,\n/**/\n    3651,\n/**/\n    3650,\n/**/\n    3649,\n/**/\n    3648,\n/**/\n    3647,\n/**/\n    3646,\n/**/\n    3645,\n/**/\n    3644,\n/**/\n    3643,\n/**/\n    3642,\n/**/\n    3641,\n/**/\n    3640,\n/**/\n    3639,\n/**/\n    3638,\n/**/\n    3637,\n/**/\n    3636,\n/**/\n    3635,\n/**/\n    3634,\n/**/\n    3633,\n/**/\n    3632,\n/**/\n    3631,\n/**/\n    3630,\n/**/\n    3629,\n/**/\n    3628,\n/**/\n    3627,\n/**/\n    3626,\n/**/\n    3625,\n/**/\n    3624,\n/**/\n    3623,\n/**/\n    3622,\n/**/\n    3621,\n/**/\n    3620,\n/**/\n    3619,\n/**/\n    3618,\n/**/\n    3617,\n/**/\n    3616,\n/**/\n    3615,\n/**/\n    3614,\n/**/\n    3613,\n/**/\n    3612,\n/**/\n    3611,\n/**/\n    3610,\n/**/\n    3609,\n/**/\n    3608,\n/**/\n    3607,\n/**/\n    3606,\n/**/\n    3605,\n/**/\n    3604,\n/**/\n    3603,\n/**/\n    3602,\n/**/\n    3601,\n/**/\n    3600,\n/**/\n    3599,\n/**/\n    3598,\n/**/\n    3597,\n/**/\n    3596,\n/**/\n    3595,\n/**/\n    3594,\n/**/\n    3593,\n/**/\n    3592,\n/**/\n    3591,\n/**/\n    3590,\n/**/\n    3589,\n/**/\n    3588,\n/**/\n    3587,\n/**/\n    3586,\n/**/\n    3585,\n/**/\n    3584,\n/**/\n    3583,\n/**/\n    3582,\n/**/\n    3581,\n/**/\n    3580,\n/**/\n    3579,\n/**/\n    3578,\n/**/\n    3577,\n/**/\n    3576,\n/**/\n    3575,\n/**/\n    3574,\n/**/\n    3573,\n/**/\n    3572,\n/**/\n    3571,\n/**/\n    3570,\n/**/\n    3569,\n/**/\n    3568,\n/**/\n    3567,\n/**/\n    3566,\n/**/\n    3565,\n/**/\n    3564,\n/**/\n    3563,\n/**/\n    3562,\n/**/\n    3561,\n/**/\n    3560,\n/**/\n    3559,\n/**/\n    3558,\n/**/\n    3557,\n/**/\n    3556,\n/**/\n    3555,\n/**/\n    3554,\n/**/\n    3553,\n/**/\n    3552,\n/**/\n    3551,\n/**/\n    3550,\n/**/\n    3549,\n/**/\n    3548,\n/**/\n    3547,\n/**/\n    3546,\n/**/\n    3545,\n/**/\n    3544,\n/**/\n    3543,\n/**/\n    3542,\n/**/\n    3541,\n/**/\n    3540,\n/**/\n    3539,\n/**/\n    3538,\n/**/\n    3537,\n/**/\n    3536,\n/**/\n    3535,\n/**/\n    3534,\n/**/\n    3533,\n/**/\n    3532,\n/**/\n    3531,\n/**/\n    3530,\n/**/\n    3529,\n/**/\n    3528,\n/**/\n    3527,\n/**/\n    3526,\n/**/\n    3525,\n/**/\n    3524,\n/**/\n    3523,\n/**/\n    3522,\n/**/\n    3521,\n/**/\n    3520,\n/**/\n    3519,\n/**/\n    3518,\n/**/\n    3517,\n/**/\n    3516,\n/**/\n    3515,\n/**/\n    3514,\n/**/\n    3513,\n/**/\n    3512,\n/**/\n    3511,\n/**/\n    3510,\n/**/\n    3509,\n/**/\n    3508,\n/**/\n    3507,\n/**/\n    3506,\n/**/\n    3505,\n/**/\n    3504,\n/**/\n    3503,\n/**/\n    3502,\n/**/\n    3501,\n/**/\n    3500,\n/**/\n    3499,\n/**/\n    3498,\n/**/\n    3497,\n/**/\n    3496,\n/**/\n    3495,\n/**/\n    3494,\n/**/\n    3493,\n/**/\n    3492,\n/**/\n    3491,\n/**/\n    3490,\n/**/\n    3489,\n/**/\n    3488,\n/**/\n    3487,\n/**/\n    3486,\n/**/\n    3485,\n/**/\n    3484,\n/**/\n    3483,\n/**/\n    3482,\n/**/\n    3481,\n/**/\n    3480,\n/**/\n    3479,\n/**/\n    3478,\n/**/\n    3477,\n/**/\n    3476,\n/**/\n    3475,\n/**/\n    3474,\n/**/\n    3473,\n/**/\n    3472,\n/**/\n    3471,\n/**/\n    3470,\n/**/\n    3469,\n/**/\n    3468,\n/**/\n    3467,\n/**/\n    3466,\n/**/\n    3465,\n/**/\n    3464,\n/**/\n    3463,\n/**/\n    3462,\n/**/\n    3461,\n/**/\n    3460,\n/**/\n    3459,\n/**/\n    3458,\n/**/\n    3457,\n/**/\n    3456,\n/**/\n    3455,\n/**/\n    3454,\n/**/\n    3453,\n/**/\n    3452,\n/**/\n    3451,\n/**/\n    3450,\n/**/\n    3449,\n/**/\n    3448,\n/**/\n    3447,\n/**/\n    3446,\n/**/\n    3445,\n/**/\n    3444,\n/**/\n    3443,\n/**/\n    3442,\n/**/\n    3441,\n/**/\n    3440,\n/**/\n    3439,\n/**/\n    3438,\n/**/\n    3437,\n/**/\n    3436,\n/**/\n    3435,\n/**/\n    3434,\n/**/\n    3433,\n/**/\n    3432,\n/**/\n    3431,\n/**/\n    3430,\n/**/\n    3429,\n/**/\n    3428,\n/**/\n    3427,\n/**/\n    3426,\n/**/\n    3425,\n/**/\n    3424,\n/**/\n    3423,\n/**/\n    3422,\n/**/\n    3421,\n/**/\n    3420,\n/**/\n    3419,\n/**/\n    3418,\n/**/\n    3417,\n/**/\n    3416,\n/**/\n    3415,\n/**/\n    3414,\n/**/\n    3413,\n/**/\n    3412,\n/**/\n    3411,\n/**/\n    3410,\n/**/\n    3409,\n/**/\n    3408,\n/**/\n    3407,\n/**/\n    3406,\n/**/\n    3405,\n/**/\n    3404,\n/**/\n    3403,\n/**/\n    3402,\n/**/\n    3401,\n/**/\n    3400,\n/**/\n    3399,\n/**/\n    3398,\n/**/\n    3397,\n/**/\n    3396,\n/**/\n    3395,\n/**/\n    3394,\n/**/\n    3393,\n/**/\n    3392,\n/**/\n    3391,\n/**/\n    3390,\n/**/\n    3389,\n/**/\n    3388,\n/**/\n    3387,\n/**/\n    3386,\n/**/\n    3385,\n/**/\n    3384,\n/**/\n    3383,\n/**/\n    3382,\n/**/\n    3381,\n/**/\n    3380,\n/**/\n    3379,\n/**/\n    3378,\n/**/\n    3377,\n/**/\n    3376,\n/**/\n    3375,\n/**/\n    3374,\n/**/\n    3373,\n/**/\n    3372,\n/**/\n    3371,\n/**/\n    3370,\n/**/\n    3369,\n/**/\n    3368,\n/**/\n    3367,\n/**/\n    3366,\n/**/\n    3365,\n/**/\n    3364,\n/**/\n    3363,\n/**/\n    3362,\n/**/\n    3361,\n/**/\n    3360,\n/**/\n    3359,\n/**/\n    3358,\n/**/\n    3357,\n/**/\n    3356,\n/**/\n    3355,\n/**/\n    3354,\n/**/\n    3353,\n/**/\n    3352,\n/**/\n    3351,\n/**/\n    3350,\n/**/\n    3349,\n/**/\n    3348,\n/**/\n    3347,\n/**/\n    3346,\n/**/\n    3345,\n/**/\n    3344,\n/**/\n    3343,\n/**/\n    3342,\n/**/\n    3341,\n/**/\n    3340,\n/**/\n    3339,\n/**/\n    3338,\n/**/\n    3337,\n/**/\n    3336,\n/**/\n    3335,\n/**/\n    3334,\n/**/\n    3333,\n/**/\n    3332,\n/**/\n    3331,\n/**/\n    3330,\n/**/\n    3329,\n/**/\n    3328,\n/**/\n    3327,\n/**/\n    3326,\n/**/\n    3325,\n/**/\n    3324,\n/**/\n    3323,\n/**/\n    3322,\n/**/\n    3321,\n/**/\n    3320,\n/**/\n    3319,\n/**/\n    3318,\n/**/\n    3317,\n/**/\n    3316,\n/**/\n    3315,\n/**/\n    3314,\n/**/\n    3313,\n/**/\n    3312,\n/**/\n    3311,\n/**/\n    3310,\n/**/\n    3309,\n/**/\n    3308,\n/**/\n    3307,\n/**/\n    3306,\n/**/\n    3305,\n/**/\n    3304,\n/**/\n    3303,\n/**/\n    3302,\n/**/\n    3301,\n/**/\n    3300,\n/**/\n    3299,\n/**/\n    3298,\n/**/\n    3297,\n/**/\n    3296,\n/**/\n    3295,\n/**/\n    3294,\n/**/\n    3293,\n/**/\n    3292,\n/**/\n    3291,\n/**/\n    3290,\n/**/\n    3289,\n/**/\n    3288,\n/**/\n    3287,\n/**/\n    3286,\n/**/\n    3285,\n/**/\n    3284,\n/**/\n    3283,\n/**/\n    3282,\n/**/\n    3281,\n/**/\n    3280,\n/**/\n    3279,\n/**/\n    3278,\n/**/\n    3277,\n/**/\n    3276,\n/**/\n    3275,\n/**/\n    3274,\n/**/\n    3273,\n/**/\n    3272,\n/**/\n    3271,\n/**/\n    3270,\n/**/\n    3269,\n/**/\n    3268,\n/**/\n    3267,\n/**/\n    3266,\n/**/\n    3265,\n/**/\n    3264,\n/**/\n    3263,\n/**/\n    3262,\n/**/\n    3261,\n/**/\n    3260,\n/**/\n    3259,\n/**/\n    3258,\n/**/\n    3257,\n/**/\n    3256,\n/**/\n    3255,\n/**/\n    3254,\n/**/\n    3253,\n/**/\n    3252,\n/**/\n    3251,\n/**/\n    3250,\n/**/\n    3249,\n/**/\n    3248,\n/**/\n    3247,\n/**/\n    3246,\n/**/\n    3245,\n/**/\n    3244,\n/**/\n    3243,\n/**/\n    3242,\n/**/\n    3241,\n/**/\n    3240,\n/**/\n    3239,\n/**/\n    3238,\n/**/\n    3237,\n/**/\n    3236,\n/**/\n    3235,\n/**/\n    3234,\n/**/\n    3233,\n/**/\n    3232,\n/**/\n    3231,\n/**/\n    3230,\n/**/\n    3229,\n/**/\n    3228,\n/**/\n    3227,\n/**/\n    3226,\n/**/\n    3225,\n/**/\n    3224,\n/**/\n    3223,\n/**/\n    3222,\n/**/\n    3221,\n/**/\n    3220,\n/**/\n    3219,\n/**/\n    3218,\n/**/\n    3217,\n/**/\n    3216,\n/**/\n    3215,\n/**/\n    3214,\n/**/\n    3213,\n/**/\n    3212,\n/**/\n    3211,\n/**/\n    3210,\n/**/\n    3209,\n/**/\n    3208,\n/**/\n    3207,\n/**/\n    3206,\n/**/\n    3205,\n/**/\n    3204,\n/**/\n    3203,\n/**/\n    3202,\n/**/\n    3201,\n/**/\n    3200,\n/**/\n    3199,\n/**/\n    3198,\n/**/\n    3197,\n/**/\n    3196,\n/**/\n    3195,\n/**/\n    3194,\n/**/\n    3193,\n/**/\n    3192,\n/**/\n    3191,\n/**/\n    3190,\n/**/\n    3189,\n/**/\n    3188,\n/**/\n    3187,\n/**/\n    3186,\n/**/\n    3185,\n/**/\n    3184,\n/**/\n    3183,\n/**/\n    3182,\n/**/\n    3181,\n/**/\n    3180,\n/**/\n    3179,\n/**/\n    3178,\n/**/\n    3177,\n/**/\n    3176,\n/**/\n    3175,\n/**/\n    3174,\n/**/\n    3173,\n/**/\n    3172,\n/**/\n    3171,\n/**/\n    3170,\n/**/\n    3169,\n/**/\n    3168,\n/**/\n    3167,\n/**/\n    3166,\n/**/\n    3165,\n/**/\n    3164,\n/**/\n    3163,\n/**/\n    3162,\n/**/\n    3161,\n/**/\n    3160,\n/**/\n    3159,\n/**/\n    3158,\n/**/\n    3157,\n/**/\n    3156,\n/**/\n    3155,\n/**/\n    3154,\n/**/\n    3153,\n/**/\n    3152,\n/**/\n    3151,\n/**/\n    3150,\n/**/\n    3149,\n/**/\n    3148,\n/**/\n    3147,\n/**/\n    3146,\n/**/\n    3145,\n/**/\n    3144,\n/**/\n    3143,\n/**/\n    3142,\n/**/\n    3141,\n/**/\n    3140,\n/**/\n    3139,\n/**/\n    3138,\n/**/\n    3137,\n/**/\n    3136,\n/**/\n    3135,\n/**/\n    3134,\n/**/\n    3133,\n/**/\n    3132,\n/**/\n    3131,\n/**/\n    3130,\n/**/\n    3129,\n/**/\n    3128,\n/**/\n    3127,\n/**/\n    3126,\n/**/\n    3125,\n/**/\n    3124,\n/**/\n    3123,\n/**/\n    3122,\n/**/\n    3121,\n/**/\n    3120,\n/**/\n    3119,\n/**/\n    3118,\n/**/\n    3117,\n/**/\n    3116,\n/**/\n    3115,\n/**/\n    3114,\n/**/\n    3113,\n/**/\n    3112,\n/**/\n    3111,\n/**/\n    3110,\n/**/\n    3109,\n/**/\n    3108,\n/**/\n    3107,\n/**/\n    3106,\n/**/\n    3105,\n/**/\n    3104,\n/**/\n    3103,\n/**/\n    3102,\n/**/\n    3101,\n/**/\n    3100,\n/**/\n    3099,\n/**/\n    3098,\n/**/\n    3097,\n/**/\n    3096,\n/**/\n    3095,\n/**/\n    3094,\n/**/\n    3093,\n/**/\n    3092,\n/**/\n    3091,\n/**/\n    3090,\n/**/\n    3089,\n/**/\n    3088,\n/**/\n    3087,\n/**/\n    3086,\n/**/\n    3085,\n/**/\n    3084,\n/**/\n    3083,\n/**/\n    3082,\n/**/\n    3081,\n/**/\n    3080,\n/**/\n    3079,\n/**/\n    3078,\n/**/\n    3077,\n/**/\n    3076,\n/**/\n    3075,\n/**/\n    3074,\n/**/\n    3073,\n/**/\n    3072,\n/**/\n    3071,\n/**/\n    3070,\n/**/\n    3069,\n/**/\n    3068,\n/**/\n    3067,\n/**/\n    3066,\n/**/\n    3065,\n/**/\n    3064,\n/**/\n    3063,\n/**/\n    3062,\n/**/\n    3061,\n/**/\n    3060,\n/**/\n    3059,\n/**/\n    3058,\n/**/\n    3057,\n/**/\n    3056,\n/**/\n    3055,\n/**/\n    3054,\n/**/\n    3053,\n/**/\n    3052,\n/**/\n    3051,\n/**/\n    3050,\n/**/\n    3049,\n/**/\n    3048,\n/**/\n    3047,\n/**/\n    3046,\n/**/\n    3045,\n/**/\n    3044,\n/**/\n    3043,\n/**/\n    3042,\n/**/\n    3041,\n/**/\n    3040,\n/**/\n    3039,\n/**/\n    3038,\n/**/\n    3037,\n/**/\n    3036,\n/**/\n    3035,\n/**/\n    3034,\n/**/\n    3033,\n/**/\n    3032,\n/**/\n    3031,\n/**/\n    3030,\n/**/\n    3029,\n/**/\n    3028,\n/**/\n    3027,\n/**/\n    3026,\n/**/\n    3025,\n/**/\n    3024,\n/**/\n    3023,\n/**/\n    3022,\n/**/\n    3021,\n/**/\n    3020,\n/**/\n    3019,\n/**/\n    3018,\n/**/\n    3017,\n/**/\n    3016,\n/**/\n    3015,\n/**/\n    3014,\n/**/\n    3013,\n/**/\n    3012,\n/**/\n    3011,\n/**/\n    3010,\n/**/\n    3009,\n/**/\n    3008,\n/**/\n    3007,\n/**/\n    3006,\n/**/\n    3005,\n/**/\n    3004,\n/**/\n    3003,\n/**/\n    3002,\n/**/\n    3001,\n/**/\n    3000,\n/**/\n    2999,\n/**/\n    2998,\n/**/\n    2997,\n/**/\n    2996,\n/**/\n    2995,\n/**/\n    2994,\n/**/\n    2993,\n/**/\n    2992,\n/**/\n    2991,\n/**/\n    2990,\n/**/\n    2989,\n/**/\n    2988,\n/**/\n    2987,\n/**/\n    2986,\n/**/\n    2985,\n/**/\n    2984,\n/**/\n    2983,\n/**/\n    2982,\n/**/\n    2981,\n/**/\n    2980,\n/**/\n    2979,\n/**/\n    2978,\n/**/\n    2977,\n/**/\n    2976,\n/**/\n    2975,\n/**/\n    2974,\n/**/\n    2973,\n/**/\n    2972,\n/**/\n    2971,\n/**/\n    2970,\n/**/\n    2969,\n/**/\n    2968,\n/**/\n    2967,\n/**/\n    2966,\n/**/\n    2965,\n/**/\n    2964,\n/**/\n    2963,\n/**/\n    2962,\n/**/\n    2961,\n/**/\n    2960,\n/**/\n    2959,\n/**/\n    2958,\n/**/\n    2957,\n/**/\n    2956,\n/**/\n    2955,\n/**/\n    2954,\n/**/\n    2953,\n/**/\n    2952,\n/**/\n    2951,\n/**/\n    2950,\n/**/\n    2949,\n/**/\n    2948,\n/**/\n    2947,\n/**/\n    2946,\n/**/\n    2945,\n/**/\n    2944,\n/**/\n    2943,\n/**/\n    2942,\n/**/\n    2941,\n/**/\n    2940,\n/**/\n    2939,\n/**/\n    2938,\n/**/\n    2937,\n/**/\n    2936,\n/**/\n    2935,\n/**/\n    2934,\n/**/\n    2933,\n/**/\n    2932,\n/**/\n    2931,\n/**/\n    2930,\n/**/\n    2929,\n/**/\n    2928,\n/**/\n    2927,\n/**/\n    2926,\n/**/\n    2925,\n/**/\n    2924,\n/**/\n    2923,\n/**/\n    2922,\n/**/\n    2921,\n/**/\n    2920,\n/**/\n    2919,\n/**/\n    2918,\n/**/\n    2917,\n/**/\n    2916,\n/**/\n    2915,\n/**/\n    2914,\n/**/\n    2913,\n/**/\n    2912,\n/**/\n    2911,\n/**/\n    2910,\n/**/\n    2909,\n/**/\n    2908,\n/**/\n    2907,\n/**/\n    2906,\n/**/\n    2905,\n/**/\n    2904,\n/**/\n    2903,\n/**/\n    2902,\n/**/\n    2901,\n/**/\n    2900,\n/**/\n    2899,\n/**/\n    2898,\n/**/\n    2897,\n/**/\n    2896,\n/**/\n    2895,\n/**/\n    2894,\n/**/\n    2893,\n/**/\n    2892,\n/**/\n    2891,\n/**/\n    2890,\n/**/\n    2889,\n/**/\n    2888,\n/**/\n    2887,\n/**/\n    2886,\n/**/\n    2885,\n/**/\n    2884,\n/**/\n    2883,\n/**/\n    2882,\n/**/\n    2881,\n/**/\n    2880,\n/**/\n    2879,\n/**/\n    2878,\n/**/\n    2877,\n/**/\n    2876,\n/**/\n    2875,\n/**/\n    2874,\n/**/\n    2873,\n/**/\n    2872,\n/**/\n    2871,\n/**/\n    2870,\n/**/\n    2869,\n/**/\n    2868,\n/**/\n    2867,\n/**/\n    2866,\n/**/\n    2865,\n/**/\n    2864,\n/**/\n    2863,\n/**/\n    2862,\n/**/\n    2861,\n/**/\n    2860,\n/**/\n    2859,\n/**/\n    2858,\n/**/\n    2857,\n/**/\n    2856,\n/**/\n    2855,\n/**/\n    2854,\n/**/\n    2853,\n/**/\n    2852,\n/**/\n    2851,\n/**/\n    2850,\n/**/\n    2849,\n/**/\n    2848,\n/**/\n    2847,\n/**/\n    2846,\n/**/\n    2845,\n/**/\n    2844,\n/**/\n    2843,\n/**/\n    2842,\n/**/\n    2841,\n/**/\n    2840,\n/**/\n    2839,\n/**/\n    2838,\n/**/\n    2837,\n/**/\n    2836,\n/**/\n    2835,\n/**/\n    2834,\n/**/\n    2833,\n/**/\n    2832,\n/**/\n    2831,\n/**/\n    2830,\n/**/\n    2829,\n/**/\n    2828,\n/**/\n    2827,\n/**/\n    2826,\n/**/\n    2825,\n/**/\n    2824,\n/**/\n    2823,\n/**/\n    2822,\n/**/\n    2821,\n/**/\n    2820,\n/**/\n    2819,\n/**/\n    2818,\n/**/\n    2817,\n/**/\n    2816,\n/**/\n    2815,\n/**/\n    2814,\n/**/\n    2813,\n/**/\n    2812,\n/**/\n    2811,\n/**/\n    2810,\n/**/\n    2809,\n/**/\n    2808,\n/**/\n    2807,\n/**/\n    2806,\n/**/\n    2805,\n/**/\n    2804,\n/**/\n    2803,\n/**/\n    2802,\n/**/\n    2801,\n/**/\n    2800,\n/**/\n    2799,\n/**/\n    2798,\n/**/\n    2797,\n/**/\n    2796,\n/**/\n    2795,\n/**/\n    2794,\n/**/\n    2793,\n/**/\n    2792,\n/**/\n    2791,\n/**/\n    2790,\n/**/\n    2789,\n/**/\n    2788,\n/**/\n    2787,\n/**/\n    2786,\n/**/\n    2785,\n/**/\n    2784,\n/**/\n    2783,\n/**/\n    2782,\n/**/\n    2781,\n/**/\n    2780,\n/**/\n    2779,\n/**/\n    2778,\n/**/\n    2777,\n/**/\n    2776,\n/**/\n    2775,\n/**/\n    2774,\n/**/\n    2773,\n/**/\n    2772,\n/**/\n    2771,\n/**/\n    2770,\n/**/\n    2769,\n/**/\n    2768,\n/**/\n    2767,\n/**/\n    2766,\n/**/\n    2765,\n/**/\n    2764,\n/**/\n    2763,\n/**/\n    2762,\n/**/\n    2761,\n/**/\n    2760,\n/**/\n    2759,\n/**/\n    2758,\n/**/\n    2757,\n/**/\n    2756,\n/**/\n    2755,\n/**/\n    2754,\n/**/\n    2753,\n/**/\n    2752,\n/**/\n    2751,\n/**/\n    2750,\n/**/\n    2749,\n/**/\n    2748,\n/**/\n    2747,\n/**/\n    2746,\n/**/\n    2745,\n/**/\n    2744,\n/**/\n    2743,\n/**/\n    2742,\n/**/\n    2741,\n/**/\n    2740,\n/**/\n    2739,\n/**/\n    2738,\n/**/\n    2737,\n/**/\n    2736,\n/**/\n    2735,\n/**/\n    2734,\n/**/\n    2733,\n/**/\n    2732,\n/**/\n    2731,\n/**/\n    2730,\n/**/\n    2729,\n/**/\n    2728,\n/**/\n    2727,\n/**/\n    2726,\n/**/\n    2725,\n/**/\n    2724,\n/**/\n    2723,\n/**/\n    2722,\n/**/\n    2721,\n/**/\n    2720,\n/**/\n    2719,\n/**/\n    2718,\n/**/\n    2717,\n/**/\n    2716,\n/**/\n    2715,\n/**/\n    2714,\n/**/\n    2713,\n/**/\n    2712,\n/**/\n    2711,\n/**/\n    2710,\n/**/\n    2709,\n/**/\n    2708,\n/**/\n    2707,\n/**/\n    2706,\n/**/\n    2705,\n/**/\n    2704,\n/**/\n    2703,\n/**/\n    2702,\n/**/\n    2701,\n/**/\n    2700,\n/**/\n    2699,\n/**/\n    2698,\n/**/\n    2697,\n/**/\n    2696,\n/**/\n    2695,\n/**/\n    2694,\n/**/\n    2693,\n/**/\n    2692,\n/**/\n    2691,\n/**/\n    2690,\n/**/\n    2689,\n/**/\n    2688,\n/**/\n    2687,\n/**/\n    2686,\n/**/\n    2685,\n/**/\n    2684,\n/**/\n    2683,\n/**/\n    2682,\n/**/\n    2681,\n/**/\n    2680,\n/**/\n    2679,\n/**/\n    2678,\n/**/\n    2677,\n/**/\n    2676,\n/**/\n    2675,\n/**/\n    2674,\n/**/\n    2673,\n/**/\n    2672,\n/**/\n    2671,\n/**/\n    2670,\n/**/\n    2669,\n/**/\n    2668,\n/**/\n    2667,\n/**/\n    2666,\n/**/\n    2665,\n/**/\n    2664,\n/**/\n    2663,\n/**/\n    2662,\n/**/\n    2661,\n/**/\n    2660,\n/**/\n    2659,\n/**/\n    2658,\n/**/\n    2657,\n/**/\n    2656,\n/**/\n    2655,\n/**/\n    2654,\n/**/\n    2653,\n/**/\n    2652,\n/**/\n    2651,\n/**/\n    2650,\n/**/\n    2649,\n/**/\n    2648,\n/**/\n    2647,\n/**/\n    2646,\n/**/\n    2645,\n/**/\n    2644,\n/**/\n    2643,\n/**/\n    2642,\n/**/\n    2641,\n/**/\n    2640,\n/**/\n    2639,\n/**/\n    2638,\n/**/\n    2637,\n/**/\n    2636,\n/**/\n    2635,\n/**/\n    2634,\n/**/\n    2633,\n/**/\n    2632,\n/**/\n    2631,\n/**/\n    2630,\n/**/\n    2629,\n/**/\n    2628,\n/**/\n    2627,\n/**/\n    2626,\n/**/\n    2625,\n/**/\n    2624,\n/**/\n    2623,\n/**/\n    2622,\n/**/\n    2621,\n/**/\n    2620,\n/**/\n    2619,\n/**/\n    2618,\n/**/\n    2617,\n/**/\n    2616,\n/**/\n    2615,\n/**/\n    2614,\n/**/\n    2613,\n/**/\n    2612,\n/**/\n    2611,\n/**/\n    2610,\n/**/\n    2609,\n/**/\n    2608,\n/**/\n    2607,\n/**/\n    2606,\n/**/\n    2605,\n/**/\n    2604,\n/**/\n    2603,\n/**/\n    2602,\n/**/\n    2601,\n/**/\n    2600,\n/**/\n    2599,\n/**/\n    2598,\n/**/\n    2597,\n/**/\n    2596,\n/**/\n    2595,\n/**/\n    2594,\n/**/\n    2593,\n/**/\n    2592,\n/**/\n    2591,\n/**/\n    2590,\n/**/\n    2589,\n/**/\n    2588,\n/**/\n    2587,\n/**/\n    2586,\n/**/\n    2585,\n/**/\n    2584,\n/**/\n    2583,\n/**/\n    2582,\n/**/\n    2581,\n/**/\n    2580,\n/**/\n    2579,\n/**/\n    2578,\n/**/\n    2577,\n/**/\n    2576,\n/**/\n    2575,\n/**/\n    2574,\n/**/\n    2573,\n/**/\n    2572,\n/**/\n    2571,\n/**/\n    2570,\n/**/\n    2569,\n/**/\n    2568,\n/**/\n    2567,\n/**/\n    2566,\n/**/\n    2565,\n/**/\n    2564,\n/**/\n    2563,\n/**/\n    2562,\n/**/\n    2561,\n/**/\n    2560,\n/**/\n    2559,\n/**/\n    2558,\n/**/\n    2557,\n/**/\n    2556,\n/**/\n    2555,\n/**/\n    2554,\n/**/\n    2553,\n/**/\n    2552,\n/**/\n    2551,\n/**/\n    2550,\n/**/\n    2549,\n/**/\n    2548,\n/**/\n    2547,\n/**/\n    2546,\n/**/\n    2545,\n/**/\n    2544,\n/**/\n    2543,\n/**/\n    2542,\n/**/\n    2541,\n/**/\n    2540,\n/**/\n    2539,\n/**/\n    2538,\n/**/\n    2537,\n/**/\n    2536,\n/**/\n    2535,\n/**/\n    2534,\n/**/\n    2533,\n/**/\n    2532,\n/**/\n    2531,\n/**/\n    2530,\n/**/\n    2529,\n/**/\n    2528,\n/**/\n    2527,\n/**/\n    2526,\n/**/\n    2525,\n/**/\n    2524,\n/**/\n    2523,\n/**/\n    2522,\n/**/\n    2521,\n/**/\n    2520,\n/**/\n    2519,\n/**/\n    2518,\n/**/\n    2517,\n/**/\n    2516,\n/**/\n    2515,\n/**/\n    2514,\n/**/\n    2513,\n/**/\n    2512,\n/**/\n    2511,\n/**/\n    2510,\n/**/\n    2509,\n/**/\n    2508,\n/**/\n    2507,\n/**/\n    2506,\n/**/\n    2505,\n/**/\n    2504,\n/**/\n    2503,\n/**/\n    2502,\n/**/\n    2501,\n/**/\n    2500,\n/**/\n    2499,\n/**/\n    2498,\n/**/\n    2497,\n/**/\n    2496,\n/**/\n    2495,\n/**/\n    2494,\n/**/\n    2493,\n/**/\n    2492,\n/**/\n    2491,\n/**/\n    2490,\n/**/\n    2489,\n/**/\n    2488,\n/**/\n    2487,\n/**/\n    2486,\n/**/\n    2485,\n/**/\n    2484,\n/**/\n    2483,\n/**/\n    2482,\n/**/\n    2481,\n/**/\n    2480,\n/**/\n    2479,\n/**/\n    2478,\n/**/\n    2477,\n/**/\n    2476,\n/**/\n    2475,\n/**/\n    2474,\n/**/\n    2473,\n/**/\n    2472,\n/**/\n    2471,\n/**/\n    2470,\n/**/\n    2469,\n/**/\n    2468,\n/**/\n    2467,\n/**/\n    2466,\n/**/\n    2465,\n/**/\n    2464,\n/**/\n    2463,\n/**/\n    2462,\n/**/\n    2461,\n/**/\n    2460,\n/**/\n    2459,\n/**/\n    2458,\n/**/\n    2457,\n/**/\n    2456,\n/**/\n    2455,\n/**/\n    2454,\n/**/\n    2453,\n/**/\n    2452,\n/**/\n    2451,\n/**/\n    2450,\n/**/\n    2449,\n/**/\n    2448,\n/**/\n    2447,\n/**/\n    2446,\n/**/\n    2445,\n/**/\n    2444,\n/**/\n    2443,\n/**/\n    2442,\n/**/\n    2441,\n/**/\n    2440,\n/**/\n    2439,\n/**/\n    2438,\n/**/\n    2437,\n/**/\n    2436,\n/**/\n    2435,\n/**/\n    2434,\n/**/\n    2433,\n/**/\n    2432,\n/**/\n    2431,\n/**/\n    2430,\n/**/\n    2429,\n/**/\n    2428,\n/**/\n    2427,\n/**/\n    2426,\n/**/\n    2425,\n/**/\n    2424,\n/**/\n    2423,\n/**/\n    2422,\n/**/\n    2421,\n/**/\n    2420,\n/**/\n    2419,\n/**/\n    2418,\n/**/\n    2417,\n/**/\n    2416,\n/**/\n    2415,\n/**/\n    2414,\n/**/\n    2413,\n/**/\n    2412,\n/**/\n    2411,\n/**/\n    2410,\n/**/\n    2409,\n/**/\n    2408,\n/**/\n    2407,\n/**/\n    2406,\n/**/\n    2405,\n/**/\n    2404,\n/**/\n    2403,\n/**/\n    2402,\n/**/\n    2401,\n/**/\n    2400,\n/**/\n    2399,\n/**/\n    2398,\n/**/\n    2397,\n/**/\n    2396,\n/**/\n    2395,\n/**/\n    2394,\n/**/\n    2393,\n/**/\n    2392,\n/**/\n    2391,\n/**/\n    2390,\n/**/\n    2389,\n/**/\n    2388,\n/**/\n    2387,\n/**/\n    2386,\n/**/\n    2385,\n/**/\n    2384,\n/**/\n    2383,\n/**/\n    2382,\n/**/\n    2381,\n/**/\n    2380,\n/**/\n    2379,\n/**/\n    2378,\n/**/\n    2377,\n/**/\n    2376,\n/**/\n    2375,\n/**/\n    2374,\n/**/\n    2373,\n/**/\n    2372,\n/**/\n    2371,\n/**/\n    2370,\n/**/\n    2369,\n/**/\n    2368,\n/**/\n    2367,\n/**/\n    2366,\n/**/\n    2365,\n/**/\n    2364,\n/**/\n    2363,\n/**/\n    2362,\n/**/\n    2361,\n/**/\n    2360,\n/**/\n    2359,\n/**/\n    2358,\n/**/\n    2357,\n/**/\n    2356,\n/**/\n    2355,\n/**/\n    2354,\n/**/\n    2353,\n/**/\n    2352,\n/**/\n    2351,\n/**/\n    2350,\n/**/\n    2349,\n/**/\n    2348,\n/**/\n    2347,\n/**/\n    2346,\n/**/\n    2345,\n/**/\n    2344,\n/**/\n    2343,\n/**/\n    2342,\n/**/\n    2341,\n/**/\n    2340,\n/**/\n    2339,\n/**/\n    2338,\n/**/\n    2337,\n/**/\n    2336,\n/**/\n    2335,\n/**/\n    2334,\n/**/\n    2333,\n/**/\n    2332,\n/**/\n    2331,\n/**/\n    2330,\n/**/\n    2329,\n/**/\n    2328,\n/**/\n    2327,\n/**/\n    2326,\n/**/\n    2325,\n/**/\n    2324,\n/**/\n    2323,\n/**/\n    2322,\n/**/\n    2321,\n/**/\n    2320,\n/**/\n    2319,\n/**/\n    2318,\n/**/\n    2317,\n/**/\n    2316,\n/**/\n    2315,\n/**/\n    2314,\n/**/\n    2313,\n/**/\n    2312,\n/**/\n    2311,\n/**/\n    2310,\n/**/\n    2309,\n/**/\n    2308,\n/**/\n    2307,\n/**/\n    2306,\n/**/\n    2305,\n/**/\n    2304,\n/**/\n    2303,\n/**/\n    2302,\n/**/\n    2301,\n/**/\n    2300,\n/**/\n    2299,\n/**/\n    2298,\n/**/\n    2297,\n/**/\n    2296,\n/**/\n    2295,\n/**/\n    2294,\n/**/\n    2293,\n/**/\n    2292,\n/**/\n    2291,\n/**/\n    2290,\n/**/\n    2289,\n/**/\n    2288,\n/**/\n    2287,\n/**/\n    2286,\n/**/\n    2285,\n/**/\n    2284,\n/**/\n    2283,\n/**/\n    2282,\n/**/\n    2281,\n/**/\n    2280,\n/**/\n    2279,\n/**/\n    2278,\n/**/\n    2277,\n/**/\n    2276,\n/**/\n    2275,\n/**/\n    2274,\n/**/\n    2273,\n/**/\n    2272,\n/**/\n    2271,\n/**/\n    2270,\n/**/\n    2269,\n/**/\n    2268,\n/**/\n    2267,\n/**/\n    2266,\n/**/\n    2265,\n/**/\n    2264,\n/**/\n    2263,\n/**/\n    2262,\n/**/\n    2261,\n/**/\n    2260,\n/**/\n    2259,\n/**/\n    2258,\n/**/\n    2257,\n/**/\n    2256,\n/**/\n    2255,\n/**/\n    2254,\n/**/\n    2253,\n/**/\n    2252,\n/**/\n    2251,\n/**/\n    2250,\n/**/\n    2249,\n/**/\n    2248,\n/**/\n    2247,\n/**/\n    2246,\n/**/\n    2245,\n/**/\n    2244,\n/**/\n    2243,\n/**/\n    2242,\n/**/\n    2241,\n/**/\n    2240,\n/**/\n    2239,\n/**/\n    2238,\n/**/\n    2237,\n/**/\n    2236,\n/**/\n    2235,\n/**/\n    2234,\n/**/\n    2233,\n/**/\n    2232,\n/**/\n    2231,\n/**/\n    2230,\n/**/\n    2229,\n/**/\n    2228,\n/**/\n    2227,\n/**/\n    2226,\n/**/\n    2225,\n/**/\n    2224,\n/**/\n    2223,\n/**/\n    2222,\n/**/\n    2221,\n/**/\n    2220,\n/**/\n    2219,\n/**/\n    2218,\n/**/\n    2217,\n/**/\n    2216,\n/**/\n    2215,\n/**/\n    2214,\n/**/\n    2213,\n/**/\n    2212,\n/**/\n    2211,\n/**/\n    2210,\n/**/\n    2209,\n/**/\n    2208,\n/**/\n    2207,\n/**/\n    2206,\n/**/\n    2205,\n/**/\n    2204,\n/**/\n    2203,\n/**/\n    2202,\n/**/\n    2201,\n/**/\n    2200,\n/**/\n    2199,\n/**/\n    2198,\n/**/\n    2197,\n/**/\n    2196,\n/**/\n    2195,\n/**/\n    2194,\n/**/\n    2193,\n/**/\n    2192,\n/**/\n    2191,\n/**/\n    2190,\n/**/\n    2189,\n/**/\n    2188,\n/**/\n    2187,\n/**/\n    2186,\n/**/\n    2185,\n/**/\n    2184,\n/**/\n    2183,\n/**/\n    2182,\n/**/\n    2181,\n/**/\n    2180,\n/**/\n    2179,\n/**/\n    2178,\n/**/\n    2177,\n/**/\n    2176,\n/**/\n    2175,\n/**/\n    2174,\n/**/\n    2173,\n/**/\n    2172,\n/**/\n    2171,\n/**/\n    2170,\n/**/\n    2169,\n/**/\n    2168,\n/**/\n    2167,\n/**/\n    2166,\n/**/\n    2165,\n/**/\n    2164,\n/**/\n    2163,\n/**/\n    2162,\n/**/\n    2161,\n/**/\n    2160,\n/**/\n    2159,\n/**/\n    2158,\n/**/\n    2157,\n/**/\n    2156,\n/**/\n    2155,\n/**/\n    2154,\n/**/\n    2153,\n/**/\n    2152,\n/**/\n    2151,\n/**/\n    2150,\n/**/\n    2149,\n/**/\n    2148,\n/**/\n    2147,\n/**/\n    2146,\n/**/\n    2145,\n/**/\n    2144,\n/**/\n    2143,\n/**/\n    2142,\n/**/\n    2141,\n/**/\n    2140,\n/**/\n    2139,\n/**/\n    2138,\n/**/\n    2137,\n/**/\n    2136,\n/**/\n    2135,\n/**/\n    2134,\n/**/\n    2133,\n/**/\n    2132,\n/**/\n    2131,\n/**/\n    2130,\n/**/\n    2129,\n/**/\n    2128,\n/**/\n    2127,\n/**/\n    2126,\n/**/\n    2125,\n/**/\n    2124,\n/**/\n    2123,\n/**/\n    2122,\n/**/\n    2121,\n/**/\n    2120,\n/**/\n    2119,\n/**/\n    2118,\n/**/\n    2117,\n/**/\n    2116,\n/**/\n    2115,\n/**/\n    2114,\n/**/\n    2113,\n/**/\n    2112,\n/**/\n    2111,\n/**/\n    2110,\n/**/\n    2109,\n/**/\n    2108,\n/**/\n    2107,\n/**/\n    2106,\n/**/\n    2105,\n/**/\n    2104,\n/**/\n    2103,\n/**/\n    2102,\n/**/\n    2101,\n/**/\n    2100,\n/**/\n    2099,\n/**/\n    2098,\n/**/\n    2097,\n/**/\n    2096,\n/**/\n    2095,\n/**/\n    2094,\n/**/\n    2093,\n/**/\n    2092,\n/**/\n    2091,\n/**/\n    2090,\n/**/\n    2089,\n/**/\n    2088,\n/**/\n    2087,\n/**/\n    2086,\n/**/\n    2085,\n/**/\n    2084,\n/**/\n    2083,\n/**/\n    2082,\n/**/\n    2081,\n/**/\n    2080,\n/**/\n    2079,\n/**/\n    2078,\n/**/\n    2077,\n/**/\n    2076,\n/**/\n    2075,\n/**/\n    2074,\n/**/\n    2073,\n/**/\n    2072,\n/**/\n    2071,\n/**/\n    2070,\n/**/\n    2069,\n/**/\n    2068,\n/**/\n    2067,\n/**/\n    2066,\n/**/\n    2065,\n/**/\n    2064,\n/**/\n    2063,\n/**/\n    2062,\n/**/\n    2061,\n/**/\n    2060,\n/**/\n    2059,\n/**/\n    2058,\n/**/\n    2057,\n/**/\n    2056,\n/**/\n    2055,\n/**/\n    2054,\n/**/\n    2053,\n/**/\n    2052,\n/**/\n    2051,\n/**/\n    2050,\n/**/\n    2049,\n/**/\n    2048,\n/**/\n    2047,\n/**/\n    2046,\n/**/\n    2045,\n/**/\n    2044,\n/**/\n    2043,\n/**/\n    2042,\n/**/\n    2041,\n/**/\n    2040,\n/**/\n    2039,\n/**/\n    2038,\n/**/\n    2037,\n/**/\n    2036,\n/**/\n    2035,\n/**/\n    2034,\n/**/\n    2033,\n/**/\n    2032,\n/**/\n    2031,\n/**/\n    2030,\n/**/\n    2029,\n/**/\n    2028,\n/**/\n    2027,\n/**/\n    2026,\n/**/\n    2025,\n/**/\n    2024,\n/**/\n    2023,\n/**/\n    2022,\n/**/\n    2021,\n/**/\n    2020,\n/**/\n    2019,\n/**/\n    2018,\n/**/\n    2017,\n/**/\n    2016,\n/**/\n    2015,\n/**/\n    2014,\n/**/\n    2013,\n/**/\n    2012,\n/**/\n    2011,\n/**/\n    2010,\n/**/\n    2009,\n/**/\n    2008,\n/**/\n    2007,\n/**/\n    2006,\n/**/\n    2005,\n/**/\n    2004,\n/**/\n    2003,\n/**/\n    2002,\n/**/\n    2001,\n/**/\n    2000,\n/**/\n    1999,\n/**/\n    1998,\n/**/\n    1997,\n/**/\n    1996,\n/**/\n    1995,\n/**/\n    1994,\n/**/\n    1993,\n/**/\n    1992,\n/**/\n    1991,\n/**/\n    1990,\n/**/\n    1989,\n/**/\n    1988,\n/**/\n    1987,\n/**/\n    1986,\n/**/\n    1985,\n/**/\n    1984,\n/**/\n    1983,\n/**/\n    1982,\n/**/\n    1981,\n/**/\n    1980,\n/**/\n    1979,\n/**/\n    1978,\n/**/\n    1977,\n/**/\n    1976,\n/**/\n    1975,\n/**/\n    1974,\n/**/\n    1973,\n/**/\n    1972,\n/**/\n    1971,\n/**/\n    1970,\n/**/\n    1969,\n/**/\n    1968,\n/**/\n    1967,\n/**/\n    1966,\n/**/\n    1965,\n/**/\n    1964,\n/**/\n    1963,\n/**/\n    1962,\n/**/\n    1961,\n/**/\n    1960,\n/**/\n    1959,\n/**/\n    1958,\n/**/\n    1957,\n/**/\n    1956,\n/**/\n    1955,\n/**/\n    1954,\n/**/\n    1953,\n/**/\n    1952,\n/**/\n    1951,\n/**/\n    1950,\n/**/\n    1949,\n/**/\n    1948,\n/**/\n    1947,\n/**/\n    1946,\n/**/\n    1945,\n/**/\n    1944,\n/**/\n    1943,\n/**/\n    1942,\n/**/\n    1941,\n/**/\n    1940,\n/**/\n    1939,\n/**/\n    1938,\n/**/\n    1937,\n/**/\n    1936,\n/**/\n    1935,\n/**/\n    1934,\n/**/\n    1933,\n/**/\n    1932,\n/**/\n    1931,\n/**/\n    1930,\n/**/\n    1929,\n/**/\n    1928,\n/**/\n    1927,\n/**/\n    1926,\n/**/\n    1925,\n/**/\n    1924,\n/**/\n    1923,\n/**/\n    1922,\n/**/\n    1921,\n/**/\n    1920,\n/**/\n    1919,\n/**/\n    1918,\n/**/\n    1917,\n/**/\n    1916,\n/**/\n    1915,\n/**/\n    1914,\n/**/\n    1913,\n/**/\n    1912,\n/**/\n    1911,\n/**/\n    1910,\n/**/\n    1909,\n/**/\n    1908,\n/**/\n    1907,\n/**/\n    1906,\n/**/\n    1905,\n/**/\n    1904,\n/**/\n    1903,\n/**/\n    1902,\n/**/\n    1901,\n/**/\n    1900,\n/**/\n    1899,\n/**/\n    1898,\n/**/\n    1897,\n/**/\n    1896,\n/**/\n    1895,\n/**/\n    1894,\n/**/\n    1893,\n/**/\n    1892,\n/**/\n    1891,\n/**/\n    1890,\n/**/\n    1889,\n/**/\n    1888,\n/**/\n    1887,\n/**/\n    1886,\n/**/\n    1885,\n/**/\n    1884,\n/**/\n    1883,\n/**/\n    1882,\n/**/\n    1881,\n/**/\n    1880,\n/**/\n    1879,\n/**/\n    1878,\n/**/\n    1877,\n/**/\n    1876,\n/**/\n    1875,\n/**/\n    1874,\n/**/\n    1873,\n/**/\n    1872,\n/**/\n    1871,\n/**/\n    1870,\n/**/\n    1869,\n/**/\n    1868,\n/**/\n    1867,\n/**/\n    1866,\n/**/\n    1865,\n/**/\n    1864,\n/**/\n    1863,\n/**/\n    1862,\n/**/\n    1861,\n/**/\n    1860,\n/**/\n    1859,\n/**/\n    1858,\n/**/\n    1857,\n/**/\n    1856,\n/**/\n    1855,\n/**/\n    1854,\n/**/\n    1853,\n/**/\n    1852,\n/**/\n    1851,\n/**/\n    1850,\n/**/\n    1849,\n/**/\n    1848,\n/**/\n    1847,\n/**/\n    1846,\n/**/\n    1845,\n/**/\n    1844,\n/**/\n    1843,\n/**/\n    1842,\n/**/\n    1841,\n/**/\n    1840,\n/**/\n    1839,\n/**/\n    1838,\n/**/\n    1837,\n/**/\n    1836,\n/**/\n    1835,\n/**/\n    1834,\n/**/\n    1833,\n/**/\n    1832,\n/**/\n    1831,\n/**/\n    1830,\n/**/\n    1829,\n/**/\n    1828,\n/**/\n    1827,\n/**/\n    1826,\n/**/\n    1825,\n/**/\n    1824,\n/**/\n    1823,\n/**/\n    1822,\n/**/\n    1821,\n/**/\n    1820,\n/**/\n    1819,\n/**/\n    1818,\n/**/\n    1817,\n/**/\n    1816,\n/**/\n    1815,\n/**/\n    1814,\n/**/\n    1813,\n/**/\n    1812,\n/**/\n    1811,\n/**/\n    1810,\n/**/\n    1809,\n/**/\n    1808,\n/**/\n    1807,\n/**/\n    1806,\n/**/\n    1805,\n/**/\n    1804,\n/**/\n    1803,\n/**/\n    1802,\n/**/\n    1801,\n/**/\n    1800,\n/**/\n    1799,\n/**/\n    1798,\n/**/\n    1797,\n/**/\n    1796,\n/**/\n    1795,\n/**/\n    1794,\n/**/\n    1793,\n/**/\n    1792,\n/**/\n    1791,\n/**/\n    1790,\n/**/\n    1789,\n/**/\n    1788,\n/**/\n    1787,\n/**/\n    1786,\n/**/\n    1785,\n/**/\n    1784,\n/**/\n    1783,\n/**/\n    1782,\n/**/\n    1781,\n/**/\n    1780,\n/**/\n    1779,\n/**/\n    1778,\n/**/\n    1777,\n/**/\n    1776,\n/**/\n    1775,\n/**/\n    1774,\n/**/\n    1773,\n/**/\n    1772,\n/**/\n    1771,\n/**/\n    1770,\n/**/\n    1769,\n/**/\n    1768,\n/**/\n    1767,\n/**/\n    1766,\n/**/\n    1765,\n/**/\n    1764,\n/**/\n    1763,\n/**/\n    1762,\n/**/\n    1761,\n/**/\n    1760,\n/**/\n    1759,\n/**/\n    1758,\n/**/\n    1757,\n/**/\n    1756,\n/**/\n    1755,\n/**/\n    1754,\n/**/\n    1753,\n/**/\n    1752,\n/**/\n    1751,\n/**/\n    1750,\n/**/\n    1749,\n/**/\n    1748,\n/**/\n    1747,\n/**/\n    1746,\n/**/\n    1745,\n/**/\n    1744,\n/**/\n    1743,\n/**/\n    1742,\n/**/\n    1741,\n/**/\n    1740,\n/**/\n    1739,\n/**/\n    1738,\n/**/\n    1737,\n/**/\n    1736,\n/**/\n    1735,\n/**/\n    1734,\n/**/\n    1733,\n/**/\n    1732,\n/**/\n    1731,\n/**/\n    1730,\n/**/\n    1729,\n/**/\n    1728,\n/**/\n    1727,\n/**/\n    1726,\n/**/\n    1725,\n/**/\n    1724,\n/**/\n    1723,\n/**/\n    1722,\n/**/\n    1721,\n/**/\n    1720,\n/**/\n    1719,\n/**/\n    1718,\n/**/\n    1717,\n/**/\n    1716,\n/**/\n    1715,\n/**/\n    1714,\n/**/\n    1713,\n/**/\n    1712,\n/**/\n    1711,\n/**/\n    1710,\n/**/\n    1709,\n/**/\n    1708,\n/**/\n    1707,\n/**/\n    1706,\n/**/\n    1705,\n/**/\n    1704,\n/**/\n    1703,\n/**/\n    1702,\n/**/\n    1701,\n/**/\n    1700,\n/**/\n    1699,\n/**/\n    1698,\n/**/\n    1697,\n/**/\n    1696,\n/**/\n    1695,\n/**/\n    1694,\n/**/\n    1693,\n/**/\n    1692,\n/**/\n    1691,\n/**/\n    1690,\n/**/\n    1689,\n/**/\n    1688,\n/**/\n    1687,\n/**/\n    1686,\n/**/\n    1685,\n/**/\n    1684,\n/**/\n    1683,\n/**/\n    1682,\n/**/\n    1681,\n/**/\n    1680,\n/**/\n    1679,\n/**/\n    1678,\n/**/\n    1677,\n/**/\n    1676,\n/**/\n    1675,\n/**/\n    1674,\n/**/\n    1673,\n/**/\n    1672,\n/**/\n    1671,\n/**/\n    1670,\n/**/\n    1669,\n/**/\n    1668,\n/**/\n    1667,\n/**/\n    1666,\n/**/\n    1665,\n/**/\n    1664,\n/**/\n    1663,\n/**/\n    1662,\n/**/\n    1661,\n/**/\n    1660,\n/**/\n    1659,\n/**/\n    1658,\n/**/\n    1657,\n/**/\n    1656,\n/**/\n    1655,\n/**/\n    1654,\n/**/\n    1653,\n/**/\n    1652,\n/**/\n    1651,\n/**/\n    1650,\n/**/\n    1649,\n/**/\n    1648,\n/**/\n    1647,\n/**/\n    1646,\n/**/\n    1645,\n/**/\n    1644,\n/**/\n    1643,\n/**/\n    1642,\n/**/\n    1641,\n/**/\n    1640,\n/**/\n    1639,\n/**/\n    1638,\n/**/\n    1637,\n/**/\n    1636,\n/**/\n    1635,\n/**/\n    1634,\n/**/\n    1633,\n/**/\n    1632,\n/**/\n    1631,\n/**/\n    1630,\n/**/\n    1629,\n/**/\n    1628,\n/**/\n    1627,\n/**/\n    1626,\n/**/\n    1625,\n/**/\n    1624,\n/**/\n    1623,\n/**/\n    1622,\n/**/\n    1621,\n/**/\n    1620,\n/**/\n    1619,\n/**/\n    1618,\n/**/\n    1617,\n/**/\n    1616,\n/**/\n    1615,\n/**/\n    1614,\n/**/\n    1613,\n/**/\n    1612,\n/**/\n    1611,\n/**/\n    1610,\n/**/\n    1609,\n/**/\n    1608,\n/**/\n    1607,\n/**/\n    1606,\n/**/\n    1605,\n/**/\n    1604,\n/**/\n    1603,\n/**/\n    1602,\n/**/\n    1601,\n/**/\n    1600,\n/**/\n    1599,\n/**/\n    1598,\n/**/\n    1597,\n/**/\n    1596,\n/**/\n    1595,\n/**/\n    1594,\n/**/\n    1593,\n/**/\n    1592,\n/**/\n    1591,\n/**/\n    1590,\n/**/\n    1589,\n/**/\n    1588,\n/**/\n    1587,\n/**/\n    1586,\n/**/\n    1585,\n/**/\n    1584,\n/**/\n    1583,\n/**/\n    1582,\n/**/\n    1581,\n/**/\n    1580,\n/**/\n    1579,\n/**/\n    1578,\n/**/\n    1577,\n/**/\n    1576,\n/**/\n    1575,\n/**/\n    1574,\n/**/\n    1573,\n/**/\n    1572,\n/**/\n    1571,\n/**/\n    1570,\n/**/\n    1569,\n/**/\n    1568,\n/**/\n    1567,\n/**/\n    1566,\n/**/\n    1565,\n/**/\n    1564,\n/**/\n    1563,\n/**/\n    1562,\n/**/\n    1561,\n/**/\n    1560,\n/**/\n    1559,\n/**/\n    1558,\n/**/\n    1557,\n/**/\n    1556,\n/**/\n    1555,\n/**/\n    1554,\n/**/\n    1553,\n/**/\n    1552,\n/**/\n    1551,\n/**/\n    1550,\n/**/\n    1549,\n/**/\n    1548,\n/**/\n    1547,\n/**/\n    1546,\n/**/\n    1545,\n/**/\n    1544,\n/**/\n    1543,\n/**/\n    1542,\n/**/\n    1541,\n/**/\n    1540,\n/**/\n    1539,\n/**/\n    1538,\n/**/\n    1537,\n/**/\n    1536,\n/**/\n    1535,\n/**/\n    1534,\n/**/\n    1533,\n/**/\n    1532,\n/**/\n    1531,\n/**/\n    1530,\n/**/\n    1529,\n/**/\n    1528,\n/**/\n    1527,\n/**/\n    1526,\n/**/\n    1525,\n/**/\n    1524,\n/**/\n    1523,\n/**/\n    1522,\n/**/\n    1521,\n/**/\n    1520,\n/**/\n    1519,\n/**/\n    1518,\n/**/\n    1517,\n/**/\n    1516,\n/**/\n    1515,\n/**/\n    1514,\n/**/\n    1513,\n/**/\n    1512,\n/**/\n    1511,\n/**/\n    1510,\n/**/\n    1509,\n/**/\n    1508,\n/**/\n    1507,\n/**/\n    1506,\n/**/\n    1505,\n/**/\n    1504,\n/**/\n    1503,\n/**/\n    1502,\n/**/\n    1501,\n/**/\n    1500,\n/**/\n    1499,\n/**/\n    1498,\n/**/\n    1497,\n/**/\n    1496,\n/**/\n    1495,\n/**/\n    1494,\n/**/\n    1493,\n/**/\n    1492,\n/**/\n    1491,\n/**/\n    1490,\n/**/\n    1489,\n/**/\n    1488,\n/**/\n    1487,\n/**/\n    1486,\n/**/\n    1485,\n/**/\n    1484,\n/**/\n    1483,\n/**/\n    1482,\n/**/\n    1481,\n/**/\n    1480,\n/**/\n    1479,\n/**/\n    1478,\n/**/\n    1477,\n/**/\n    1476,\n/**/\n    1475,\n/**/\n    1474,\n/**/\n    1473,\n/**/\n    1472,\n/**/\n    1471,\n/**/\n    1470,\n/**/\n    1469,\n/**/\n    1468,\n/**/\n    1467,\n/**/\n    1466,\n/**/\n    1465,\n/**/\n    1464,\n/**/\n    1463,\n/**/\n    1462,\n/**/\n    1461,\n/**/\n    1460,\n/**/\n    1459,\n/**/\n    1458,\n/**/\n    1457,\n/**/\n    1456,\n/**/\n    1455,\n/**/\n    1454,\n/**/\n    1453,\n/**/\n    1452,\n/**/\n    1451,\n/**/\n    1450,\n/**/\n    1449,\n/**/\n    1448,\n/**/\n    1447,\n/**/\n    1446,\n/**/\n    1445,\n/**/\n    1444,\n/**/\n    1443,\n/**/\n    1442,\n/**/\n    1441,\n/**/\n    1440,\n/**/\n    1439,\n/**/\n    1438,\n/**/\n    1437,\n/**/\n    1436,\n/**/\n    1435,\n/**/\n    1434,\n/**/\n    1433,\n/**/\n    1432,\n/**/\n    1431,\n/**/\n    1430,\n/**/\n    1429,\n/**/\n    1428,\n/**/\n    1427,\n/**/\n    1426,\n/**/\n    1425,\n/**/\n    1424,\n/**/\n    1423,\n/**/\n    1422,\n/**/\n    1421,\n/**/\n    1420,\n/**/\n    1419,\n/**/\n    1418,\n/**/\n    1417,\n/**/\n    1416,\n/**/\n    1415,\n/**/\n    1414,\n/**/\n    1413,\n/**/\n    1412,\n/**/\n    1411,\n/**/\n    1410,\n/**/\n    1409,\n/**/\n    1408,\n/**/\n    1407,\n/**/\n    1406,\n/**/\n    1405,\n/**/\n    1404,\n/**/\n    1403,\n/**/\n    1402,\n/**/\n    1401,\n/**/\n    1400,\n/**/\n    1399,\n/**/\n    1398,\n/**/\n    1397,\n/**/\n    1396,\n/**/\n    1395,\n/**/\n    1394,\n/**/\n    1393,\n/**/\n    1392,\n/**/\n    1391,\n/**/\n    1390,\n/**/\n    1389,\n/**/\n    1388,\n/**/\n    1387,\n/**/\n    1386,\n/**/\n    1385,\n/**/\n    1384,\n/**/\n    1383,\n/**/\n    1382,\n/**/\n    1381,\n/**/\n    1380,\n/**/\n    1379,\n/**/\n    1378,\n/**/\n    1377,\n/**/\n    1376,\n/**/\n    1375,\n/**/\n    1374,\n/**/\n    1373,\n/**/\n    1372,\n/**/\n    1371,\n/**/\n    1370,\n/**/\n    1369,\n/**/\n    1368,\n/**/\n    1367,\n/**/\n    1366,\n/**/\n    1365,\n/**/\n    1364,\n/**/\n    1363,\n/**/\n    1362,\n/**/\n    1361,\n/**/\n    1360,\n/**/\n    1359,\n/**/\n    1358,\n/**/\n    1357,\n/**/\n    1356,\n/**/\n    1355,\n/**/\n    1354,\n/**/\n    1353,\n/**/\n    1352,\n/**/\n    1351,\n/**/\n    1350,\n/**/\n    1349,\n/**/\n    1348,\n/**/\n    1347,\n/**/\n    1346,\n/**/\n    1345,\n/**/\n    1344,\n/**/\n    1343,\n/**/\n    1342,\n/**/\n    1341,\n/**/\n    1340,\n/**/\n    1339,\n/**/\n    1338,\n/**/\n    1337,\n/**/\n    1336,\n/**/\n    1335,\n/**/\n    1334,\n/**/\n    1333,\n/**/\n    1332,\n/**/\n    1331,\n/**/\n    1330,\n/**/\n    1329,\n/**/\n    1328,\n/**/\n    1327,\n/**/\n    1326,\n/**/\n    1325,\n/**/\n    1324,\n/**/\n    1323,\n/**/\n    1322,\n/**/\n    1321,\n/**/\n    1320,\n/**/\n    1319,\n/**/\n    1318,\n/**/\n    1317,\n/**/\n    1316,\n/**/\n    1315,\n/**/\n    1314,\n/**/\n    1313,\n/**/\n    1312,\n/**/\n    1311,\n/**/\n    1310,\n/**/\n    1309,\n/**/\n    1308,\n/**/\n    1307,\n/**/\n    1306,\n/**/\n    1305,\n/**/\n    1304,\n/**/\n    1303,\n/**/\n    1302,\n/**/\n    1301,\n/**/\n    1300,\n/**/\n    1299,\n/**/\n    1298,\n/**/\n    1297,\n/**/\n    1296,\n/**/\n    1295,\n/**/\n    1294,\n/**/\n    1293,\n/**/\n    1292,\n/**/\n    1291,\n/**/\n    1290,\n/**/\n    1289,\n/**/\n    1288,\n/**/\n    1287,\n/**/\n    1286,\n/**/\n    1285,\n/**/\n    1284,\n/**/\n    1283,\n/**/\n    1282,\n/**/\n    1281,\n/**/\n    1280,\n/**/\n    1279,\n/**/\n    1278,\n/**/\n    1277,\n/**/\n    1276,\n/**/\n    1275,\n/**/\n    1274,\n/**/\n    1273,\n/**/\n    1272,\n/**/\n    1271,\n/**/\n    1270,\n/**/\n    1269,\n/**/\n    1268,\n/**/\n    1267,\n/**/\n    1266,\n/**/\n    1265,\n/**/\n    1264,\n/**/\n    1263,\n/**/\n    1262,\n/**/\n    1261,\n/**/\n    1260,\n/**/\n    1259,\n/**/\n    1258,\n/**/\n    1257,\n/**/\n    1256,\n/**/\n    1255,\n/**/\n    1254,\n/**/\n    1253,\n/**/\n    1252,\n/**/\n    1251,\n/**/\n    1250,\n/**/\n    1249,\n/**/\n    1248,\n/**/\n    1247,\n/**/\n    1246,\n/**/\n    1245,\n/**/\n    1244,\n/**/\n    1243,\n/**/\n    1242,\n/**/\n    1241,\n/**/\n    1240,\n/**/\n    1239,\n/**/\n    1238,\n/**/\n    1237,\n/**/\n    1236,\n/**/\n    1235,\n/**/\n    1234,\n/**/\n    1233,\n/**/\n    1232,\n/**/\n    1231,\n/**/\n    1230,\n/**/\n    1229,\n/**/\n    1228,\n/**/\n    1227,\n/**/\n    1226,\n/**/\n    1225,\n/**/\n    1224,\n/**/\n    1223,\n/**/\n    1222,\n/**/\n    1221,\n/**/\n    1220,\n/**/\n    1219,\n/**/\n    1218,\n/**/\n    1217,\n/**/\n    1216,\n/**/\n    1215,\n/**/\n    1214,\n/**/\n    1213,\n/**/\n    1212,\n/**/\n    1211,\n/**/\n    1210,\n/**/\n    1209,\n/**/\n    1208,\n/**/\n    1207,\n/**/\n    1206,\n/**/\n    1205,\n/**/\n    1204,\n/**/\n    1203,\n/**/\n    1202,\n/**/\n    1201,\n/**/\n    1200,\n/**/\n    1199,\n/**/\n    1198,\n/**/\n    1197,\n/**/\n    1196,\n/**/\n    1195,\n/**/\n    1194,\n/**/\n    1193,\n/**/\n    1192,\n/**/\n    1191,\n/**/\n    1190,\n/**/\n    1189,\n/**/\n    1188,\n/**/\n    1187,\n/**/\n    1186,\n/**/\n    1185,\n/**/\n    1184,\n/**/\n    1183,\n/**/\n    1182,\n/**/\n    1181,\n/**/\n    1180,\n/**/\n    1179,\n/**/\n    1178,\n/**/\n    1177,\n/**/\n    1176,\n/**/\n    1175,\n/**/\n    1174,\n/**/\n    1173,\n/**/\n    1172,\n/**/\n    1171,\n/**/\n    1170,\n/**/\n    1169,\n/**/\n    1168,\n/**/\n    1167,\n/**/\n    1166,\n/**/\n    1165,\n/**/\n    1164,\n/**/\n    1163,\n/**/\n    1162,\n/**/\n    1161,\n/**/\n    1160,\n/**/\n    1159,\n/**/\n    1158,\n/**/\n    1157,\n/**/\n    1156,\n/**/\n    1155,\n/**/\n    1154,\n/**/\n    1153,\n/**/\n    1152,\n/**/\n    1151,\n/**/\n    1150,\n/**/\n    1149,\n/**/\n    1148,\n/**/\n    1147,\n/**/\n    1146,\n/**/\n    1145,\n/**/\n    1144,\n/**/\n    1143,\n/**/\n    1142,\n/**/\n    1141,\n/**/\n    1140,\n/**/\n    1139,\n/**/\n    1138,\n/**/\n    1137,\n/**/\n    1136,\n/**/\n    1135,\n/**/\n    1134,\n/**/\n    1133,\n/**/\n    1132,\n/**/\n    1131,\n/**/\n    1130,\n/**/\n    1129,\n/**/\n    1128,\n/**/\n    1127,\n/**/\n    1126,\n/**/\n    1125,\n/**/\n    1124,\n/**/\n    1123,\n/**/\n    1122,\n/**/\n    1121,\n/**/\n    1120,\n/**/\n    1119,\n/**/\n    1118,\n/**/\n    1117,\n/**/\n    1116,\n/**/\n    1115,\n/**/\n    1114,\n/**/\n    1113,\n/**/\n    1112,\n/**/\n    1111,\n/**/\n    1110,\n/**/\n    1109,\n/**/\n    1108,\n/**/\n    1107,\n/**/\n    1106,\n/**/\n    1105,\n/**/\n    1104,\n/**/\n    1103,\n/**/\n    1102,\n/**/\n    1101,\n/**/\n    1100,\n/**/\n    1099,\n/**/\n    1098,\n/**/\n    1097,\n/**/\n    1096,\n/**/\n    1095,\n/**/\n    1094,\n/**/\n    1093,\n/**/\n    1092,\n/**/\n    1091,\n/**/\n    1090,\n/**/\n    1089,\n/**/\n    1088,\n/**/\n    1087,\n/**/\n    1086,\n/**/\n    1085,\n/**/\n    1084,\n/**/\n    1083,\n/**/\n    1082,\n/**/\n    1081,\n/**/\n    1080,\n/**/\n    1079,\n/**/\n    1078,\n/**/\n    1077,\n/**/\n    1076,\n/**/\n    1075,\n/**/\n    1074,\n/**/\n    1073,\n/**/\n    1072,\n/**/\n    1071,\n/**/\n    1070,\n/**/\n    1069,\n/**/\n    1068,\n/**/\n    1067,\n/**/\n    1066,\n/**/\n    1065,\n/**/\n    1064,\n/**/\n    1063,\n/**/\n    1062,\n/**/\n    1061,\n/**/\n    1060,\n/**/\n    1059,\n/**/\n    1058,\n/**/\n    1057,\n/**/\n    1056,\n/**/\n    1055,\n/**/\n    1054,\n/**/\n    1053,\n/**/\n    1052,\n/**/\n    1051,\n/**/\n    1050,\n/**/\n    1049,\n/**/\n    1048,\n/**/\n    1047,\n/**/\n    1046,\n/**/\n    1045,\n/**/\n    1044,\n/**/\n    1043,\n/**/\n    1042,\n/**/\n    1041,\n/**/\n    1040,\n/**/\n    1039,\n/**/\n    1038,\n/**/\n    1037,\n/**/\n    1036,\n/**/\n    1035,\n/**/\n    1034,\n/**/\n    1033,\n/**/\n    1032,\n/**/\n    1031,\n/**/\n    1030,\n/**/\n    1029,\n/**/\n    1028,\n/**/\n    1027,\n/**/\n    1026,\n/**/\n    1025,\n/**/\n    1024,\n/**/\n    1023,\n/**/\n    1022,\n/**/\n    1021,\n/**/\n    1020,\n/**/\n    1019,\n/**/\n    1018,\n/**/\n    1017,\n/**/\n    1016,\n/**/\n    1015,\n/**/\n    1014,\n/**/\n    1013,\n/**/\n    1012,\n/**/\n    1011,\n/**/\n    1010,\n/**/\n    1009,\n/**/\n    1008,\n/**/\n    1007,\n/**/\n    1006,\n/**/\n    1005,\n/**/\n    1004,\n/**/\n    1003,\n/**/\n    1002,\n/**/\n    1001,\n/**/\n    1000,\n/**/\n    999,\n/**/\n    998,\n/**/\n    997,\n/**/\n    996,\n/**/\n    995,\n/**/\n    994,\n/**/\n    993,\n/**/\n    992,\n/**/\n    991,\n/**/\n    990,\n/**/\n    989,\n/**/\n    988,\n/**/\n    987,\n/**/\n    986,\n/**/\n    985,\n/**/\n    984,\n/**/\n    983,\n/**/\n    982,\n/**/\n    981,\n/**/\n    980,\n/**/\n    979,\n/**/\n    978,\n/**/\n    977,\n/**/\n    976,\n/**/\n    975,\n/**/\n    974,\n/**/\n    973,\n/**/\n    972,\n/**/\n    971,\n/**/\n    970,\n/**/\n    969,\n/**/\n    968,\n/**/\n    967,\n/**/\n    966,\n/**/\n    965,\n/**/\n    964,\n/**/\n    963,\n/**/\n    962,\n/**/\n    961,\n/**/\n    960,\n/**/\n    959,\n/**/\n    958,\n/**/\n    957,\n/**/\n    956,\n/**/\n    955,\n/**/\n    954,\n/**/\n    953,\n/**/\n    952,\n/**/\n    951,\n/**/\n    950,\n/**/\n    949,\n/**/\n    948,\n/**/\n    947,\n/**/\n    946,\n/**/\n    945,\n/**/\n    944,\n/**/\n    943,\n/**/\n    942,\n/**/\n    941,\n/**/\n    940,\n/**/\n    939,\n/**/\n    938,\n/**/\n    937,\n/**/\n    936,\n/**/\n    935,\n/**/\n    934,\n/**/\n    933,\n/**/\n    932,\n/**/\n    931,\n/**/\n    930,\n/**/\n    929,\n/**/\n    928,\n/**/\n    927,\n/**/\n    926,\n/**/\n    925,\n/**/\n    924,\n/**/\n    923,\n/**/\n    922,\n/**/\n    921,\n/**/\n    920,\n/**/\n    919,\n/**/\n    918,\n/**/\n    917,\n/**/\n    916,\n/**/\n    915,\n/**/\n    914,\n/**/\n    913,\n/**/\n    912,\n/**/\n    911,\n/**/\n    910,\n/**/\n    909,\n/**/\n    908,\n/**/\n    907,\n/**/\n    906,\n/**/\n    905,\n/**/\n    904,\n/**/\n    903,\n/**/\n    902,\n/**/\n    901,\n/**/\n    900,\n/**/\n    899,\n/**/\n    898,\n/**/\n    897,\n/**/\n    896,\n/**/\n    895,\n/**/\n    894,\n/**/\n    893,\n/**/\n    892,\n/**/\n    891,\n/**/\n    890,\n/**/\n    889,\n/**/\n    888,\n/**/\n    887,\n/**/\n    886,\n/**/\n    885,\n/**/\n    884,\n/**/\n    883,\n/**/\n    882,\n/**/\n    881,\n/**/\n    880,\n/**/\n    879,\n/**/\n    878,\n/**/\n    877,\n/**/\n    876,\n/**/\n    875,\n/**/\n    874,\n/**/\n    873,\n/**/\n    872,\n/**/\n    871,\n/**/\n    870,\n/**/\n    869,\n/**/\n    868,\n/**/\n    867,\n/**/\n    866,\n/**/\n    865,\n/**/\n    864,\n/**/\n    863,\n/**/\n    862,\n/**/\n    861,\n/**/\n    860,\n/**/\n    859,\n/**/\n    858,\n/**/\n    857,\n/**/\n    856,\n/**/\n    855,\n/**/\n    854,\n/**/\n    853,\n/**/\n    852,\n/**/\n    851,\n/**/\n    850,\n/**/\n    849,\n/**/\n    848,\n/**/\n    847,\n/**/\n    846,\n/**/\n    845,\n/**/\n    844,\n/**/\n    843,\n/**/\n    842,\n/**/\n    841,\n/**/\n    840,\n/**/\n    839,\n/**/\n    838,\n/**/\n    837,\n/**/\n    836,\n/**/\n    835,\n/**/\n    834,\n/**/\n    833,\n/**/\n    832,\n/**/\n    831,\n/**/\n    830,\n/**/\n    829,\n/**/\n    828,\n/**/\n    827,\n/**/\n    826,\n/**/\n    825,\n/**/\n    824,\n/**/\n    823,\n/**/\n    822,\n/**/\n    821,\n/**/\n    820,\n/**/\n    819,\n/**/\n    818,\n/**/\n    817,\n/**/\n    816,\n/**/\n    815,\n/**/\n    814,\n/**/\n    813,\n/**/\n    812,\n/**/\n    811,\n/**/\n    810,\n/**/\n    809,\n/**/\n    808,\n/**/\n    807,\n/**/\n    806,\n/**/\n    805,\n/**/\n    804,\n/**/\n    803,\n/**/\n    802,\n/**/\n    801,\n/**/\n    800,\n/**/\n    799,\n/**/\n    798,\n/**/\n    797,\n/**/\n    796,\n/**/\n    795,\n/**/\n    794,\n/**/\n    793,\n/**/\n    792,\n/**/\n    791,\n/**/\n    790,\n/**/\n    789,\n/**/\n    788,\n/**/\n    787,\n/**/\n    786,\n/**/\n    785,\n/**/\n    784,\n/**/\n    783,\n/**/\n    782,\n/**/\n    781,\n/**/\n    780,\n/**/\n    779,\n/**/\n    778,\n/**/\n    777,\n/**/\n    776,\n/**/\n    775,\n/**/\n    774,\n/**/\n    773,\n/**/\n    772,\n/**/\n    771,\n/**/\n    770,\n/**/\n    769,\n/**/\n    768,\n/**/\n    767,\n/**/\n    766,\n/**/\n    765,\n/**/\n    764,\n/**/\n    763,\n/**/\n    762,\n/**/\n    761,\n/**/\n    760,\n/**/\n    759,\n/**/\n    758,\n/**/\n    757,\n/**/\n    756,\n/**/\n    755,\n/**/\n    754,\n/**/\n    753,\n/**/\n    752,\n/**/\n    751,\n/**/\n    750,\n/**/\n    749,\n/**/\n    748,\n/**/\n    747,\n/**/\n    746,\n/**/\n    745,\n/**/\n    744,\n/**/\n    743,\n/**/\n    742,\n/**/\n    741,\n/**/\n    740,\n/**/\n    739,\n/**/\n    738,\n/**/\n    737,\n/**/\n    736,\n/**/\n    735,\n/**/\n    734,\n/**/\n    733,\n/**/\n    732,\n/**/\n    731,\n/**/\n    730,\n/**/\n    729,\n/**/\n    728,\n/**/\n    727,\n/**/\n    726,\n/**/\n    725,\n/**/\n    724,\n/**/\n    723,\n/**/\n    722,\n/**/\n    721,\n/**/\n    720,\n/**/\n    719,\n/**/\n    718,\n/**/\n    717,\n/**/\n    716,\n/**/\n    715,\n/**/\n    714,\n/**/\n    713,\n/**/\n    712,\n/**/\n    711,\n/**/\n    710,\n/**/\n    709,\n/**/\n    708,\n/**/\n    707,\n/**/\n    706,\n/**/\n    705,\n/**/\n    704,\n/**/\n    703,\n/**/\n    702,\n/**/\n    701,\n/**/\n    700,\n/**/\n    699,\n/**/\n    698,\n/**/\n    697,\n/**/\n    696,\n/**/\n    695,\n/**/\n    694,\n/**/\n    693,\n/**/\n    692,\n/**/\n    691,\n/**/\n    690,\n/**/\n    689,\n/**/\n    688,\n/**/\n    687,\n/**/\n    686,\n/**/\n    685,\n/**/\n    684,\n/**/\n    683,\n/**/\n    682,\n/**/\n    681,\n/**/\n    680,\n/**/\n    679,\n/**/\n    678,\n/**/\n    677,\n/**/\n    676,\n/**/\n    675,\n/**/\n    674,\n/**/\n    673,\n/**/\n    672,\n/**/\n    671,\n/**/\n    670,\n/**/\n    669,\n/**/\n    668,\n/**/\n    667,\n/**/\n    666,\n/**/\n    665,\n/**/\n    664,\n/**/\n    663,\n/**/\n    662,\n/**/\n    661,\n/**/\n    660,\n/**/\n    659,\n/**/\n    658,\n/**/\n    657,\n/**/\n    656,\n/**/\n    655,\n/**/\n    654,\n/**/\n    653,\n/**/\n    652,\n/**/\n    651,\n/**/\n    650,\n/**/\n    649,\n/**/\n    648,\n/**/\n    647,\n/**/\n    646,\n/**/\n    645,\n/**/\n    644,\n/**/\n    643,\n/**/\n    642,\n/**/\n    641,\n/**/\n    640,\n/**/\n    639,\n/**/\n    638,\n/**/\n    637,\n/**/\n    636,\n/**/\n    635,\n/**/\n    634,\n/**/\n    633,\n/**/\n    632,\n/**/\n    631,\n/**/\n    630,\n/**/\n    629,\n/**/\n    628,\n/**/\n    627,\n/**/\n    626,\n/**/\n    625,\n/**/\n    624,\n/**/\n    623,\n/**/\n    622,\n/**/\n    621,\n/**/\n    620,\n/**/\n    619,\n/**/\n    618,\n/**/\n    617,\n/**/\n    616,\n/**/\n    615,\n/**/\n    614,\n/**/\n    613,\n/**/\n    612,\n/**/\n    611,\n/**/\n    610,\n/**/\n    609,\n/**/\n    608,\n/**/\n    607,\n/**/\n    606,\n/**/\n    605,\n/**/\n    604,\n/**/\n    603,\n/**/\n    602,\n/**/\n    601,\n/**/\n    600,\n/**/\n    599,\n/**/\n    598,\n/**/\n    597,\n/**/\n    596,\n/**/\n    595,\n/**/\n    594,\n/**/\n    593,\n/**/\n    592,\n/**/\n    591,\n/**/\n    590,\n/**/\n    589,\n/**/\n    588,\n/**/\n    587,\n/**/\n    586,\n/**/\n    585,\n/**/\n    584,\n/**/\n    583,\n/**/\n    582,\n/**/\n    581,\n/**/\n    580,\n/**/\n    579,\n/**/\n    578,\n/**/\n    577,\n/**/\n    576,\n/**/\n    575,\n/**/\n    574,\n/**/\n    573,\n/**/\n    572,\n/**/\n    571,\n/**/\n    570,\n/**/\n    569,\n/**/\n    568,\n/**/\n    567,\n/**/\n    566,\n/**/\n    565,\n/**/\n    564,\n/**/\n    563,\n/**/\n    562,\n/**/\n    561,\n/**/\n    560,\n/**/\n    559,\n/**/\n    558,\n/**/\n    557,\n/**/\n    556,\n/**/\n    555,\n/**/\n    554,\n/**/\n    553,\n/**/\n    552,\n/**/\n    551,\n/**/\n    550,\n/**/\n    549,\n/**/\n    548,\n/**/\n    547,\n/**/\n    546,\n/**/\n    545,\n/**/\n    544,\n/**/\n    543,\n/**/\n    542,\n/**/\n    541,\n/**/\n    540,\n/**/\n    539,\n/**/\n    538,\n/**/\n    537,\n/**/\n    536,\n/**/\n    535,\n/**/\n    534,\n/**/\n    533,\n/**/\n    532,\n/**/\n    531,\n/**/\n    530,\n/**/\n    529,\n/**/\n    528,\n/**/\n    527,\n/**/\n    526,\n/**/\n    525,\n/**/\n    524,\n/**/\n    523,\n/**/\n    522,\n/**/\n    521,\n/**/\n    520,\n/**/\n    519,\n/**/\n    518,\n/**/\n    517,\n/**/\n    516,\n/**/\n    515,\n/**/\n    514,\n/**/\n    513,\n/**/\n    512,\n/**/\n    511,\n/**/\n    510,\n/**/\n    509,\n/**/\n    508,\n/**/\n    507,\n/**/\n    506,\n/**/\n    505,\n/**/\n    504,\n/**/\n    503,\n/**/\n    502,\n/**/\n    501,\n/**/\n    500,\n/**/\n    499,\n/**/\n    498,\n/**/\n    497,\n/**/\n    496,\n/**/\n    495,\n/**/\n    494,\n/**/\n    493,\n/**/\n    492,\n/**/\n    491,\n/**/\n    490,\n/**/\n    489,\n/**/\n    488,\n/**/\n    487,\n/**/\n    486,\n/**/\n    485,\n/**/\n    484,\n/**/\n    483,\n/**/\n    482,\n/**/\n    481,\n/**/\n    480,\n/**/\n    479,\n/**/\n    478,\n/**/\n    477,\n/**/\n    476,\n/**/\n    475,\n/**/\n    474,\n/**/\n    473,\n/**/\n    472,\n/**/\n    471,\n/**/\n    470,\n/**/\n    469,\n/**/\n    468,\n/**/\n    467,\n/**/\n    466,\n/**/\n    465,\n/**/\n    464,\n/**/\n    463,\n/**/\n    462,\n/**/\n    461,\n/**/\n    460,\n/**/\n    459,\n/**/\n    458,\n/**/\n    457,\n/**/\n    456,\n/**/\n    455,\n/**/\n    454,\n/**/\n    453,\n/**/\n    452,\n/**/\n    451,\n/**/\n    450,\n/**/\n    449,\n/**/\n    448,\n/**/\n    447,\n/**/\n    446,\n/**/\n    445,\n/**/\n    444,\n/**/\n    443,\n/**/\n    442,\n/**/\n    441,\n/**/\n    440,\n/**/\n    439,\n/**/\n    438,\n/**/\n    437,\n/**/\n    436,\n/**/\n    435,\n/**/\n    434,\n/**/\n    433,\n/**/\n    432,\n/**/\n    431,\n/**/\n    430,\n/**/\n    429,\n/**/\n    428,\n/**/\n    427,\n/**/\n    426,\n/**/\n    425,\n/**/\n    424,\n/**/\n    423,\n/**/\n    422,\n/**/\n    421,\n/**/\n    420,\n/**/\n    419,\n/**/\n    418,\n/**/\n    417,\n/**/\n    416,\n/**/\n    415,\n/**/\n    414,\n/**/\n    413,\n/**/\n    412,\n/**/\n    411,\n/**/\n    410,\n/**/\n    409,\n/**/\n    408,\n/**/\n    407,\n/**/\n    406,\n/**/\n    405,\n/**/\n    404,\n/**/\n    403,\n/**/\n    402,\n/**/\n    401,\n/**/\n    400,\n/**/\n    399,\n/**/\n    398,\n/**/\n    397,\n/**/\n    396,\n/**/\n    395,\n/**/\n    394,\n/**/\n    393,\n/**/\n    392,\n/**/\n    391,\n/**/\n    390,\n/**/\n    389,\n/**/\n    388,\n/**/\n    387,\n/**/\n    386,\n/**/\n    385,\n/**/\n    384,\n/**/\n    383,\n/**/\n    382,\n/**/\n    381,\n/**/\n    380,\n/**/\n    379,\n/**/\n    378,\n/**/\n    377,\n/**/\n    376,\n/**/\n    375,\n/**/\n    374,\n/**/\n    373,\n/**/\n    372,\n/**/\n    371,\n/**/\n    370,\n/**/\n    369,\n/**/\n    368,\n/**/\n    367,\n/**/\n    366,\n/**/\n    365,\n/**/\n    364,\n/**/\n    363,\n/**/\n    362,\n/**/\n    361,\n/**/\n    360,\n/**/\n    359,\n/**/\n    358,\n/**/\n    357,\n/**/\n    356,\n/**/\n    355,\n/**/\n    354,\n/**/\n    353,\n/**/\n    352,\n/**/\n    351,\n/**/\n    350,\n/**/\n    349,\n/**/\n    348,\n/**/\n    347,\n/**/\n    346,\n/**/\n    345,\n/**/\n    344,\n/**/\n    343,\n/**/\n    342,\n/**/\n    341,\n/**/\n    340,\n/**/\n    339,\n/**/\n    338,\n/**/\n    337,\n/**/\n    336,\n/**/\n    335,\n/**/\n    334,\n/**/\n    333,\n/**/\n    332,\n/**/\n    331,\n/**/\n    330,\n/**/\n    329,\n/**/\n    328,\n/**/\n    327,\n/**/\n    326,\n/**/\n    325,\n/**/\n    324,\n/**/\n    323,\n/**/\n    322,\n/**/\n    321,\n/**/\n    320,\n/**/\n    319,\n/**/\n    318,\n/**/\n    317,\n/**/\n    316,\n/**/\n    315,\n/**/\n    314,\n/**/\n    313,\n/**/\n    312,\n/**/\n    311,\n/**/\n    310,\n/**/\n    309,\n/**/\n    308,\n/**/\n    307,\n/**/\n    306,\n/**/\n    305,\n/**/\n    304,\n/**/\n    303,\n/**/\n    302,\n/**/\n    301,\n/**/\n    300,\n/**/\n    299,\n/**/\n    298,\n/**/\n    297,\n/**/\n    296,\n/**/\n    295,\n/**/\n    294,\n/**/\n    293,\n/**/\n    292,\n/**/\n    291,\n/**/\n    290,\n/**/\n    289,\n/**/\n    288,\n/**/\n    287,\n/**/\n    286,\n/**/\n    285,\n/**/\n    284,\n/**/\n    283,\n/**/\n    282,\n/**/\n    281,\n/**/\n    280,\n/**/\n    279,\n/**/\n    278,\n/**/\n    277,\n/**/\n    276,\n/**/\n    275,\n/**/\n    274,\n/**/\n    273,\n/**/\n    272,\n/**/\n    271,\n/**/\n    270,\n/**/\n    269,\n/**/\n    268,\n/**/\n    267,\n/**/\n    266,\n/**/\n    265,\n/**/\n    264,\n/**/\n    263,\n/**/\n    262,\n/**/\n    261,\n/**/\n    260,\n/**/\n    259,\n/**/\n    258,\n/**/\n    257,\n/**/\n    256,\n/**/\n    255,\n/**/\n    254,\n/**/\n    253,\n/**/\n    252,\n/**/\n    251,\n/**/\n    250,\n/**/\n    249,\n/**/\n    248,\n/**/\n    247,\n/**/\n    246,\n/**/\n    245,\n/**/\n    244,\n/**/\n    243,\n/**/\n    242,\n/**/\n    241,\n/**/\n    240,\n/**/\n    239,\n/**/\n    238,\n/**/\n    237,\n/**/\n    236,\n/**/\n    235,\n/**/\n    234,\n/**/\n    233,\n/**/\n    232,\n/**/\n    231,\n/**/\n    230,\n/**/\n    229,\n/**/\n    228,\n/**/\n    227,\n/**/\n    226,\n/**/\n    225,\n/**/\n    224,\n/**/\n    223,\n/**/\n    222,\n/**/\n    221,\n/**/\n    220,\n/**/\n    219,\n/**/\n    218,\n/**/\n    217,\n/**/\n    216,\n/**/\n    215,\n/**/\n    214,\n/**/\n    213,\n/**/\n    212,\n/**/\n    211,\n/**/\n    210,\n/**/\n    209,\n/**/\n    208,\n/**/\n    207,\n/**/\n    206,\n/**/\n    205,\n/**/\n    204,\n/**/\n    203,\n/**/\n    202,\n/**/\n    201,\n/**/\n    200,\n/**/\n    199,\n/**/\n    198,\n/**/\n    197,\n/**/\n    196,\n/**/\n    195,\n/**/\n    194,\n/**/\n    193,\n/**/\n    192,\n/**/\n    191,\n/**/\n    190,\n/**/\n    189,\n/**/\n    188,\n/**/\n    187,\n/**/\n    186,\n/**/\n    185,\n/**/\n    184,\n/**/\n    183,\n/**/\n    182,\n/**/\n    181,\n/**/\n    180,\n/**/\n    179,\n/**/\n    178,\n/**/\n    177,\n/**/\n    176,\n/**/\n    175,\n/**/\n    174,\n/**/\n    173,\n/**/\n    172,\n/**/\n    171,\n/**/\n    170,\n/**/\n    169,\n/**/\n    168,\n/**/\n    167,\n/**/\n    166,\n/**/\n    165,\n/**/\n    164,\n/**/\n    163,\n/**/\n    162,\n/**/\n    161,\n/**/\n    160,\n/**/\n    159,\n/**/\n    158,\n/**/\n    157,\n/**/\n    156,\n/**/\n    155,\n/**/\n    154,\n/**/\n    153,\n/**/\n    152,\n/**/\n    151,\n/**/\n    150,\n/**/\n    149,\n/**/\n    148,\n/**/\n    147,\n/**/\n    146,\n/**/\n    145,\n/**/\n    144,\n/**/\n    143,\n/**/\n    142,\n/**/\n    141,\n/**/\n    140,\n/**/\n    139,\n/**/\n    138,\n/**/\n    137,\n/**/\n    136,\n/**/\n    135,\n/**/\n    134,\n/**/\n    133,\n/**/\n    132,\n/**/\n    131,\n/**/\n    130,\n/**/\n    129,\n/**/\n    128,\n/**/\n    127,\n/**/\n    126,\n/**/\n    125,\n/**/\n    124,\n/**/\n    123,\n/**/\n    122,\n/**/\n    121,\n/**/\n    120,\n/**/\n    119,\n/**/\n    118,\n/**/\n    117,\n/**/\n    116,\n/**/\n    115,\n/**/\n    114,\n/**/\n    113,\n/**/\n    112,\n/**/\n    111,\n/**/\n    110,\n/**/\n    109,\n/**/\n    108,\n/**/\n    107,\n/**/\n    106,\n/**/\n    105,\n/**/\n    104,\n/**/\n    103,\n/**/\n    102,\n/**/\n    101,\n/**/\n    100,\n/**/\n    99,\n/**/\n    98,\n/**/\n    97,\n/**/\n    96,\n/**/\n    95,\n/**/\n    94,\n/**/\n    93,\n/**/\n    92,\n/**/\n    91,\n/**/\n    90,\n/**/\n    89,\n/**/\n    88,\n/**/\n    87,\n/**/\n    86,\n/**/\n    85,\n/**/\n    84,\n/**/\n    83,\n/**/\n    82,\n/**/\n    81,\n/**/\n    80,\n/**/\n    79,\n/**/\n    78,\n/**/\n    77,\n/**/\n    76,\n/**/\n    75,\n/**/\n    74,\n/**/\n    73,\n/**/\n    72,\n/**/\n    71,\n/**/\n    70,\n/**/\n    69,\n/**/\n    68,\n/**/\n    67,\n/**/\n    66,\n/**/\n    65,\n/**/\n    64,\n/**/\n    63,\n/**/\n    62,\n/**/\n    61,\n/**/\n    60,\n/**/\n    59,\n/**/\n    58,\n/**/\n    57,\n/**/\n    56,\n/**/\n    55,\n/**/\n    54,\n/**/\n    53,\n/**/\n    52,\n/**/\n    51,\n/**/\n    50,\n/**/\n    49,\n/**/\n    48,\n/**/\n    47,\n/**/\n    46,\n/**/\n    45,\n/**/\n    44,\n/**/\n    43,\n/**/\n    42,\n/**/\n    41,\n/**/\n    40,\n/**/\n    39,\n/**/\n    38,\n/**/\n    37,\n/**/\n    36,\n/**/\n    35,\n/**/\n    34,\n/**/\n    33,\n/**/\n    32,\n/**/\n    31,\n/**/\n    30,\n/**/\n    29,\n/**/\n    28,\n/**/\n    27,\n/**/\n    26,\n/**/\n    25,\n/**/\n    24,\n/**/\n    23,\n/**/\n    22,\n/**/\n    21,\n/**/\n    20,\n/**/\n    19,\n/**/\n    18,\n/**/\n    17,\n/**/\n    16,\n/**/\n    15,\n/**/\n    14,\n/**/\n    13,\n/**/\n    12,\n/**/\n    11,\n/**/\n    10,\n/**/\n    9,\n/**/\n    8,\n/**/\n    7,\n/**/\n    6,\n/**/\n    5,\n/**/\n    4,\n/**/\n    3,\n/**/\n    2,\n/**/\n    1,\n/**/\n    0\n};\n\n/*\n * Place to put a short description when adding a feature with a patch.\n * Keep it short, e.g.,: \"relative numbers\", \"persistent undo\".\n * Also add a comment marker to separate the lines.\n * See the official Vim patches for the diff format: It must use a context of\n * one line only.  Create it by hand or use \"diff -C2\" and edit the patch.\n */\nstatic char *(extra_patches[]) =\n{   /* Add your patch description below this line */\n/**/\n    NULL\n};\n\n    int\nhighest_patch(void)\n{\n    // this relies on the highest patch number to be the first entry\n    return included_patches[0];\n}\n\n#if defined(FEAT_EVAL) || defined(PROTO)\n/*\n * Return TRUE if patch \"n\" has been included.\n */\n    int\nhas_patch(int n)\n{\n    int\t\th, m, l;\n\n    // Perform a binary search.\n    l = 0;\n    h = (int)ARRAY_LENGTH(included_patches) - 1;\n    while (l < h)\n    {\n\tm = (l + h) / 2;\n\tif (included_patches[m] == n)\n\t    return TRUE;\n\tif (included_patches[m] < n)\n\t    h = m;\n\telse\n\t    l = m + 1;\n    }\n    return FALSE;\n}\n#endif\n\n    void\nex_version(exarg_T *eap)\n{\n    /*\n     * Ignore a \":version 9.99\" command.\n     */\n    if (*eap->arg == NUL)\n    {\n\tmsg_putchar('\\n');\n\tlist_version();\n    }\n}\n\n/*\n * Output a string for the version message.  If it's going to wrap, output a\n * newline, unless the message is too long to fit on the screen anyway.\n * When \"wrap\" is TRUE wrap the string in [].\n */\n    static void\nversion_msg_wrap(char_u *s, int wrap)\n{\n    int\t\tlen = vim_strsize(s) + (wrap ? 2 : 0);\n\n    if (!got_int && len < (int)Columns && msg_col + len >= (int)Columns\n\t\t\t\t\t\t\t\t&& *s != '\\n')\n\tmsg_putchar('\\n');\n    if (!got_int)\n    {\n\tif (wrap)\n\t    msg_puts(\"[\");\n\tmsg_puts((char *)s);\n\tif (wrap)\n\t    msg_puts(\"]\");\n    }\n}\n\n    static void\nversion_msg(char *s)\n{\n    version_msg_wrap((char_u *)s, FALSE);\n}\n\n/*\n * List all features aligned in columns, dictionary style.\n */\n    static void\nlist_features(void)\n{\n    list_in_columns((char_u **)features, -1, -1);\n}\n\n/*\n * List string items nicely aligned in columns.\n * When \"size\" is < 0 then the last entry is marked with NULL.\n * The entry with index \"current\" is inclosed in [].\n */\n    void\nlist_in_columns(char_u **items, int size, int current)\n{\n    int\t\ti;\n    int\t\tncol;\n    int\t\tnrow;\n    int\t\tcur_row = 1;\n    int\t\titem_count = 0;\n    int\t\twidth = 0;\n#ifdef FEAT_SYN_HL\n    int\t\tuse_highlight = (items == (char_u **)features);\n#endif\n\n    // Find the length of the longest item, use that + 1 as the column\n    // width.\n    for (i = 0; size < 0 ? items[i] != NULL : i < size; ++i)\n    {\n\tint l = vim_strsize(items[i]) + (i == current ? 2 : 0);\n\n\tif (l > width)\n\t    width = l;\n\t++item_count;\n    }\n    width += 1;\n\n    if (Columns < width)\n    {\n\t// Not enough screen columns - show one per line\n\tfor (i = 0; i < item_count; ++i)\n\t{\n\t    version_msg_wrap(items[i], i == current);\n\t    if (msg_col > 0 && i < item_count - 1)\n\t\tmsg_putchar('\\n');\n\t}\n\treturn;\n    }\n\n    // The rightmost column doesn't need a separator.\n    // Sacrifice it to fit in one more column if possible.\n    ncol = (int) (Columns + 1) / width;\n    nrow = item_count / ncol + ((item_count % ncol) ? 1 : 0);\n\n    // \"i\" counts columns then rows.  \"idx\" counts rows then columns.\n    for (i = 0; !got_int && i < nrow * ncol; ++i)\n    {\n\tint idx = (i / ncol) + (i % ncol) * nrow;\n\n\tif (idx < item_count)\n\t{\n\t    int last_col = (i + 1) % ncol == 0;\n\n\t    if (idx == current)\n\t\tmsg_putchar('[');\n#ifdef FEAT_SYN_HL\n\t    if (use_highlight && items[idx][0] == '-')\n\t\tmsg_puts_attr((char *)items[idx], HL_ATTR(HLF_W));\n\t    else\n#endif\n\t\tmsg_puts((char *)items[idx]);\n\t    if (idx == current)\n\t\tmsg_putchar(']');\n\t    if (last_col)\n\t    {\n\t\tif (msg_col > 0 && cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t    else\n\t    {\n\t\twhile (msg_col % width)\n\t\t    msg_putchar(' ');\n\t    }\n\t}\n\telse\n\t{\n\t    // this row is out of items, thus at the end of the row\n\t    if (msg_col > 0)\n\t    {\n\t\tif (cur_row < nrow)\n\t\t    msg_putchar('\\n');\n\t\t++cur_row;\n\t    }\n\t}\n    }\n}\n\n    void\nlist_version(void)\n{\n    int\t\ti;\n    int\t\tfirst;\n    char\t*s = \"\";\n\n    /*\n     * When adding features here, don't forget to update the list of\n     * internal variables in eval.c!\n     */\n    init_longVersion();\n    msg(longVersion);\n#ifdef MSWIN\n# ifdef FEAT_GUI_MSWIN\n#  ifdef VIMDLL\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI/console version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI/console version\"));\n#   endif\n#  else\n#   ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit GUI version\"));\n#   else\n    msg_puts(_(\"\\nMS-Windows 32-bit GUI version\"));\n#   endif\n#  endif\n#  ifdef FEAT_OLE\n    msg_puts(_(\" with OLE support\"));\n#  endif\n# else\n#  ifdef _WIN64\n    msg_puts(_(\"\\nMS-Windows 64-bit console version\"));\n#  else\n    msg_puts(_(\"\\nMS-Windows 32-bit console version\"));\n#  endif\n# endif\n#endif\n#if defined(MACOS_X)\n# if defined(MACOS_X_DARWIN)\n    msg_puts(_(\"\\nmacOS version\"));\n# else\n    msg_puts(_(\"\\nmacOS version w/o darwin feat.\"));\n# endif\n# if defined(__arm64__)\n    msg_puts(\" - arm64\");\n# elif defined(__x86_64__)\n    msg_puts(\" - x86_64\");\n# endif\n#endif\n\n#ifdef VMS\n    msg_puts(_(\"\\nOpenVMS version\"));\n# ifdef HAVE_PATHDEF\n    if (*compiled_arch != NUL)\n    {\n\tmsg_puts(\" - \");\n\tmsg_puts((char *)compiled_arch);\n    }\n# endif\n\n#endif\n\n    // Print the list of patch numbers if there is at least one.\n    // Print a range when patches are consecutive: \"1-10, 12, 15-40, 42-45\"\n    if (included_patches[0] != 0)\n    {\n\tmsg_puts(_(\"\\nIncluded patches: \"));\n\tfirst = -1;\n\ti = (int)ARRAY_LENGTH(included_patches) - 1;\n\twhile (--i >= 0)\n\t{\n\t    if (first < 0)\n\t\tfirst = included_patches[i];\n\t    if (i == 0 || included_patches[i - 1] != included_patches[i] + 1)\n\t    {\n\t\tmsg_puts(s);\n\t\ts = \", \";\n\t\tmsg_outnum((long)first);\n\t\tif (first != included_patches[i])\n\t\t{\n\t\t    msg_puts(\"-\");\n\t\t    msg_outnum((long)included_patches[i]);\n\t\t}\n\t\tfirst = -1;\n\t    }\n\t}\n    }\n\n    // Print the list of extra patch descriptions if there is at least one.\n    if (extra_patches[0] != NULL)\n    {\n\tmsg_puts(_(\"\\nExtra patches: \"));\n\ts = \"\";\n\tfor (i = 0; extra_patches[i] != NULL; ++i)\n\t{\n\t    msg_puts(s);\n\t    s = \", \";\n\t    msg_puts(extra_patches[i]);\n\t}\n    }\n\n#ifdef MODIFIED_BY\n    msg_puts(\"\\n\");\n    msg_puts(_(\"Modified by \"));\n    msg_puts(MODIFIED_BY);\n#endif\n\n#ifdef HAVE_PATHDEF\n    if (*compiled_user != NUL || *compiled_sys != NUL)\n    {\n\tmsg_puts(_(\"\\nCompiled \"));\n\tif (*compiled_user != NUL)\n\t{\n\t    msg_puts(_(\"by \"));\n\t    msg_puts((char *)compiled_user);\n\t}\n\tif (*compiled_sys != NUL)\n\t{\n\t    msg_puts(\"@\");\n\t    msg_puts((char *)compiled_sys);\n\t}\n    }\n#endif\n\n#if defined(FEAT_HUGE)\n    msg_puts(_(\"\\nHuge version \"));\n#elif defined(FEAT_BIG)\n    msg_puts(_(\"\\nBig version \"));\n#elif defined(FEAT_NORMAL)\n    msg_puts(_(\"\\nNormal version \"));\n#elif defined(FEAT_SMALL)\n    msg_puts(_(\"\\nSmall version \"));\n#else\n    msg_puts(_(\"\\nTiny version \"));\n#endif\n#if !defined(FEAT_GUI)\n    msg_puts(_(\"without GUI.\"));\n#elif defined(FEAT_GUI_GTK)\n# if defined(USE_GTK3)\n    msg_puts(_(\"with GTK3 GUI.\"));\n# elif defined(FEAT_GUI_GNOME)\n     msg_puts(_(\"with GTK2-GNOME GUI.\"));\n# else\n     msg_puts(_(\"with GTK2 GUI.\"));\n# endif\n#elif defined(FEAT_GUI_MOTIF)\n    msg_puts(_(\"with X11-Motif GUI.\"));\n#elif defined(FEAT_GUI_HAIKU)\n    msg_puts(_(\"with Haiku GUI.\"));\n#elif defined(FEAT_GUI_PHOTON)\n    msg_puts(_(\"with Photon GUI.\"));\n#elif defined(MSWIN)\n    msg_puts(_(\"with GUI.\"));\n#endif\n    version_msg(_(\"  Features included (+) or not (-):\\n\"));\n\n    list_features();\n    if (msg_col > 0)\n\tmsg_putchar('\\n');\n\n#ifdef SYS_VIMRC_FILE\n    version_msg(_(\"   system vimrc file: \\\"\"));\n    version_msg(SYS_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE\n    version_msg(_(\"     user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE2\n    version_msg(_(\" 2nd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_VIMRC_FILE3\n    version_msg(_(\" 3rd user vimrc file: \\\"\"));\n    version_msg(USR_VIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE\n    version_msg(_(\"      user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef USR_EXRC_FILE2\n    version_msg(_(\"  2nd user exrc file: \\\"\"));\n    version_msg(USR_EXRC_FILE2);\n    version_msg(\"\\\"\\n\");\n#endif\n#ifdef FEAT_GUI\n# ifdef SYS_GVIMRC_FILE\n    version_msg(_(\"  system gvimrc file: \\\"\"));\n    version_msg(SYS_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n    version_msg(_(\"    user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE);\n    version_msg(\"\\\"\\n\");\n# ifdef USR_GVIMRC_FILE2\n    version_msg(_(\"2nd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE2);\n    version_msg(\"\\\"\\n\");\n# endif\n# ifdef USR_GVIMRC_FILE3\n    version_msg(_(\"3rd user gvimrc file: \\\"\"));\n    version_msg(USR_GVIMRC_FILE3);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n    version_msg(_(\"       defaults file: \\\"\"));\n    version_msg(VIM_DEFAULTS_FILE);\n    version_msg(\"\\\"\\n\");\n#ifdef FEAT_GUI\n# ifdef SYS_MENU_FILE\n    version_msg(_(\"    system menu file: \\\"\"));\n    version_msg(SYS_MENU_FILE);\n    version_msg(\"\\\"\\n\");\n# endif\n#endif\n#ifdef HAVE_PATHDEF\n    if (*default_vim_dir != NUL)\n    {\n\tversion_msg(_(\"  fall-back for $VIM: \\\"\"));\n\tversion_msg((char *)default_vim_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    if (*default_vimruntime_dir != NUL)\n    {\n\tversion_msg(_(\" f-b for $VIMRUNTIME: \\\"\"));\n\tversion_msg((char *)default_vimruntime_dir);\n\tversion_msg(\"\\\"\\n\");\n    }\n    version_msg(_(\"Compilation: \"));\n    version_msg((char *)all_cflags);\n    version_msg(\"\\n\");\n#ifdef VMS\n    if (*compiler_version != NUL)\n    {\n\tversion_msg(_(\"Compiler: \"));\n\tversion_msg((char *)compiler_version);\n\tversion_msg(\"\\n\");\n    }\n#endif\n    version_msg(_(\"Linking: \"));\n    version_msg((char *)all_lflags);\n#endif\n#ifdef DEBUG\n    version_msg(\"\\n\");\n    version_msg(_(\"  DEBUG BUILD\"));\n#endif\n}\n\nstatic void do_intro_line(int row, char_u *mesg, int add_version, int attr);\nstatic void intro_message(int colon);\n\n/*\n * Show the intro message when not editing a file.\n */\n    void\nmaybe_intro_message(void)\n{\n    if (BUFEMPTY()\n\t    && curbuf->b_fname == NULL\n\t    && firstwin->w_next == NULL\n\t    && vim_strchr(p_shm, SHM_INTRO) == NULL)\n\tintro_message(FALSE);\n}\n\n/*\n * Give an introductory message about Vim.\n * Only used when starting Vim on an empty file, without a file name.\n * Or with the \":intro\" command (for Sven :-).\n */\n    static void\nintro_message(\n    int\t\tcolon)\t\t// TRUE for \":intro\"\n{\n    int\t\ti;\n    int\t\trow;\n    int\t\tblanklines;\n    int\t\tsponsor;\n    char\t*p;\n    static char\t*(lines[]) =\n    {\n\tN_(\"VIM - Vi IMproved\"),\n\t\"\",\n\tN_(\"version \"),\n\tN_(\"by Bram Moolenaar et al.\"),\n#ifdef MODIFIED_BY\n\t\" \",\n#endif\n\tN_(\"Vim is open source and freely distributable\"),\n\t\"\",\n\tN_(\"Help poor children in Uganda!\"),\n\tN_(\"type  :help iccf<Enter>       for information \"),\n\t\"\",\n\tN_(\"type  :q<Enter>               to exit         \"),\n\tN_(\"type  :help<Enter>  or  <F1>  for on-line help\"),\n\tN_(\"type  :help version8<Enter>   for version info\"),\n\tNULL,\n\t\"\",\n\tN_(\"Running in Vi compatible mode\"),\n\tN_(\"type  :set nocp<Enter>        for Vim defaults\"),\n\tN_(\"type  :help cp-default<Enter> for info on this\"),\n    };\n#ifdef FEAT_GUI\n    static char\t*(gui_lines[]) =\n    {\n\tNULL,\n\tNULL,\n\tNULL,\n\tNULL,\n#ifdef MODIFIED_BY\n\tNULL,\n#endif\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Help->Orphans           for information    \"),\n\tNULL,\n\tN_(\"Running modeless, typed text is inserted\"),\n\tN_(\"menu  Edit->Global Settings->Toggle Insert Mode  \"),\n\tN_(\"                              for two modes      \"),\n\tNULL,\n\tNULL,\n\tNULL,\n\tN_(\"menu  Edit->Global Settings->Toggle Vi Compatible\"),\n\tN_(\"                              for Vim defaults   \"),\n    };\n#endif\n\n    // blanklines = screen height - # message lines\n    blanklines = (int)Rows - (ARRAY_LENGTH(lines) - 1);\n    if (!p_cp)\n\tblanklines += 4;  // add 4 for not showing \"Vi compatible\" message\n\n    // Don't overwrite a statusline.  Depends on 'cmdheight'.\n    if (p_ls > 1)\n\tblanklines -= Rows - topframe->fr_height;\n    if (blanklines < 0)\n\tblanklines = 0;\n\n    // Show the sponsor and register message one out of four times, the Uganda\n    // message two out of four times.\n    sponsor = (int)time(NULL);\n    sponsor = ((sponsor & 2) == 0) - ((sponsor & 4) == 0);\n\n    // start displaying the message lines after half of the blank lines\n    row = blanklines / 2;\n    if ((row >= 2 && Columns >= 50) || colon)\n    {\n\tfor (i = 0; i < (int)ARRAY_LENGTH(lines); ++i)\n\t{\n\t    p = lines[i];\n#ifdef FEAT_GUI\n\t    if (p_im && gui.in_use && gui_lines[i] != NULL)\n\t\tp = gui_lines[i];\n#endif\n\t    if (p == NULL)\n\t    {\n\t\tif (!p_cp)\n\t\t    break;\n\t\tcontinue;\n\t    }\n\t    if (sponsor != 0)\n\t    {\n\t\tif (strstr(p, \"children\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"Sponsor Vim development!\")\n\t\t\t: N_(\"Become a registered Vim user!\");\n\t\telse if (strstr(p, \"iccf\") != NULL)\n\t\t    p = sponsor < 0\n\t\t\t? N_(\"type  :help sponsor<Enter>    for information \")\n\t\t\t: N_(\"type  :help register<Enter>   for information \");\n\t\telse if (strstr(p, \"Orphans\") != NULL)\n\t\t    p = N_(\"menu  Help->Sponsor/Register  for information    \");\n\t    }\n\t    if (*p != NUL)\n\t\tdo_intro_line(row, (char_u *)_(p), i == 2, 0);\n\t    ++row;\n\t}\n    }\n\n    // Make the wait-return message appear just below the text.\n    if (colon)\n\tmsg_row = row;\n}\n\n    static void\ndo_intro_line(\n    int\t\trow,\n    char_u\t*mesg,\n    int\t\tadd_version,\n    int\t\tattr)\n{\n    char_u\tvers[20];\n    int\t\tcol;\n    char_u\t*p;\n    int\t\tl;\n    int\t\tclen;\n#ifdef MODIFIED_BY\n# define MODBY_LEN 150\n    char_u\tmodby[MODBY_LEN];\n\n    if (*mesg == ' ')\n    {\n\tvim_strncpy(modby, (char_u *)_(\"Modified by \"), MODBY_LEN - 1);\n\tl = (int)STRLEN(modby);\n\tvim_strncpy(modby + l, (char_u *)MODIFIED_BY, MODBY_LEN - l - 1);\n\tmesg = modby;\n    }\n#endif\n\n    // Center the message horizontally.\n    col = vim_strsize(mesg);\n    if (add_version)\n    {\n\tSTRCPY(vers, mediumVersion);\n\tif (highest_patch())\n\t{\n\t    // Check for 9.9x or 9.9xx, alpha/beta version\n\t    if (isalpha((int)vers[3]))\n\t    {\n\t\tint len = (isalpha((int)vers[4])) ? 5 : 4;\n\t\tsprintf((char *)vers + len, \".%d%s\", highest_patch(),\n\t\t\t\t\t\t\t mediumVersion + len);\n\t    }\n\t    else\n\t\tsprintf((char *)vers + 3, \".%d\", highest_patch());\n\t}\n\tcol += (int)STRLEN(vers);\n    }\n    col = (Columns - col) / 2;\n    if (col < 0)\n\tcol = 0;\n\n    // Split up in parts to highlight <> items differently.\n    for (p = mesg; *p != NUL; p += l)\n    {\n\tclen = 0;\n\tfor (l = 0; p[l] != NUL\n\t\t\t && (l == 0 || (p[l] != '<' && p[l - 1] != '>')); ++l)\n\t{\n\t    if (has_mbyte)\n\t    {\n\t\tclen += ptr2cells(p + l);\n\t\tl += (*mb_ptr2len)(p + l) - 1;\n\t    }\n\t    else\n\t\tclen += byte2cells(p[l]);\n\t}\n\tscreen_puts_len(p, l, row, col, *p == '<' ? HL_ATTR(HLF_8) : attr);\n\tcol += clen;\n    }\n\n    // Add the version number to the version line.\n    if (add_version)\n\tscreen_puts(vers, row, col, 0);\n}\n\n/*\n * \":intro\": clear screen, display intro screen and wait for return.\n */\n    void\nex_intro(exarg_T *eap UNUSED)\n{\n    screenclear();\n    intro_message(TRUE);\n    wait_return(TRUE);\n}\n"], "filenames": ["src/scriptfile.c", "src/testdir/test_source.vim", "src/version.c"], "buggy_code_start_loc": [1967, 654, 748], "buggy_code_end_loc": [1977, 654, 748], "fixing_code_start_loc": [1968, 655, 749], "fixing_code_end_loc": [1978, 666, 751], "type": "CWE-126", "message": "Buffer Over-read in GitHub repository vim/vim prior to 8.2.4974.", "other": {"cve": {"id": "CVE-2022-1769", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-17T17:15:08.153", "lastModified": "2023-05-03T12:15:28.663", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Buffer Over-read in GitHub repository vim/vim prior to 8.2.4974."}, {"lang": "es", "value": "Un desbordamiento de b\u00fafer en el repositorio de GitHub vim/vim versiones anteriores a 8.2.4974"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-126"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-125"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vim:vim:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.2.4974", "matchCriteriaId": "0A817425-3484-4BCF-9F0B-F397BE994FCD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:34:*:*:*:*:*:*:*", "matchCriteriaId": "A930E247-0B43-43CB-98FF-6CE7B8189835"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:35:*:*:*:*:*:*:*", "matchCriteriaId": "80E516C0-98A4-4ADE-B69F-66A772E2BAAA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:36:*:*:*:*:*:*:*", "matchCriteriaId": "5C675112-476C-4D7C-BCB9-A2FB2D0BC9FD"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:apple:macos:*:*:*:*:*:*:*:*", "versionEndExcluding": "13.0", "matchCriteriaId": "71E032AD-F827-4944-9699-BB1E6D4233FC"}]}]}], "references": [{"url": "http://seclists.org/fulldisclosure/2022/Oct/28", "source": "security@huntr.dev"}, {"url": "http://seclists.org/fulldisclosure/2022/Oct/41", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/vim/vim/commit/4748c4bd64610cf943a431d215bb1aad51f8d0b4", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/522076b2-96cb-4df6-a504-e6e2f64c171c", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/BFAZTAT5CZC2R6KYDYA2HBAVEDSIX6MW/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/IUPOLEX5GXC733HL4EFYMHFU7NISJJZG/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QKIX5HYKWXWG6QBCPPTPQ53GNOFHSAIS/", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202208-32", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/202305-16", "source": "security@huntr.dev"}, {"url": "https://support.apple.com/kb/HT213488", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vim/vim/commit/4748c4bd64610cf943a431d215bb1aad51f8d0b4"}}