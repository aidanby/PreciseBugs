{"buggy_code": ["source :rubygems\n\ngem \"thin\"\ngem \"sinatra\"\n\n# \u958b\u767a\u74b0\u5883\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\ngem \"pry\"\ngem \"sinatra-contrib\"\n\n# --- \u30e9\u30a4\u30d6\u30e9\u30ea ---\n\n# \u7ffb\u8a33\ngem \"bing_translator\", \"~> 4.4.0\"\n\n# \u5f62\u614b\u7d20\u89e3\u6790\uff08\u65e5\u672c\u8a9e\uff09\ngem \"mecab\", \"0.996\"\ngem \"natto\"\n\n# \u5f62\u614b\u7d20\u89e3\u6790\uff08\u82f1\u8a9e\uff09\ngem \"engtagger\"\n\n# HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\ngem \"faraday\"\ngem \"faraday_middleware\"\n\n# JSON\ngem \"json\"\n\n# --- \u30e9\u30a4\u30d6\u30e9\u30ea\u304a\u308f\u308a ---", "# \u30e9\u30a4\u30d6\u30e9\u30ea\nrequire 'sinatra'\n\n# \u958b\u767a\u74b0\u5883\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nif settings.development?\n  require 'pry'\n  require 'sinatra/reloader'\nend\n\n# \u30af\u30e9\u30b9\nrequire './class/vine.rb'\nrequire './class/itunes.rb'\nrequire './class/extract.rb'\n\nget '/' do\n  erb :index\nend\n\n# \u97f3\u697d\u306e\u691c\u7d22\nget '/music' do\n  info = params[\"info\"]\n  search = Itunes.new()\n  @music = search.search_musics(info)\n  content_type :json\n  data = { music: @music }\n  data.to_json\nend\n\n# \u691c\u7d22\u30ef\u30fc\u30c9\u306e\u6c7a\u5b9a\nget '/fixed' do\n  tag_pick = Extract.new()\n  t = tag_pick.pickup_words(params[\"track\"])\n  @tags = t.compact\n  content_type :json\n  data = { artist: params[\"artist\"],  track: params[\"track\"], id: params[\"id\"], tags: @tags}\n  data.to_json\nend\n\n# \u6620\u50cf\u306e\u51fa\u529b\npost '/result' do\n  @bpm = params[\"bpm\"]\n  t = params[\"tags\"]\n  id = params[\"id\"]\n\n  music = Itunes.new()\n  @music_url = music.search_music_by_id(id)\n\n  t = t.gsub(\" \", \"\")\n\n  tags = []\n  if t.index(\",\")\n    tags = t.split(\",\")\n  else\n    tags << t\n  end\n\n  video = Vine.new()\n  v = tags.map { |tag| video.search_tag(tag) }\n\n  v.flatten!\n  v = v.compact\n  v.sort!\n  v = v + v + v + v\n  @videos = v[0, 40]\n\n  erb :result\nend\n\n# \u30ea\u30ed\u30fc\u30c9\u3057\u305f\u3089\u30c8\u30c3\u30d7\u3078\nget '/result' do\n  redirect '/'\nend\n"], "fixing_code": ["source :rubygems\n\ngem \"thin\"\ngem \"sinatra\"\n\n# \u958b\u767a\u74b0\u5883\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\ngem \"pry\"\ngem \"sinatra-contrib\"\n\n# --- \u30e9\u30a4\u30d6\u30e9\u30ea ---\n\n# \u7ffb\u8a33\ngem \"bing_translator\", \"~> 4.4.0\"\n\n# \u5f62\u614b\u7d20\u89e3\u6790\uff08\u65e5\u672c\u8a9e\uff09\ngem \"mecab\", \"0.996\"\ngem \"natto\"\n\n# \u5f62\u614b\u7d20\u89e3\u6790\uff08\u82f1\u8a9e\uff09\ngem \"engtagger\"\n\n# HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\ngem \"faraday\"\ngem \"faraday_middleware\"\n\n# \u81ea\u52d5HTML\u30a8\u30b9\u30b1\u30fc\u30d7\ngem \"erubis\"\n\n# JSON\ngem \"json\"\n\n# --- \u30e9\u30a4\u30d6\u30e9\u30ea\u304a\u308f\u308a ---", "# \u30e9\u30a4\u30d6\u30e9\u30ea\nrequire 'sinatra'\n\n# \u958b\u767a\u74b0\u5883\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\nif settings.development?\n  require 'pry'\n  require 'sinatra/reloader'\nend\n\n# ERB\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5909\u6570\u3092\u81ea\u52d5\u30a8\u30b9\u30b1\u30fc\u30d7\n# cf. http://www.sinatrarb.com/faq.html#auto_escape_html\nrequire 'erubis'\nset :erb, :escape_html => true\n\n# \u30af\u30e9\u30b9\nrequire './class/vine.rb'\nrequire './class/itunes.rb'\nrequire './class/extract.rb'\n\nget '/' do\n  erb :index\nend\n\n# \u97f3\u697d\u306e\u691c\u7d22\nget '/music' do\n  info = params[\"info\"]\n  search = Itunes.new()\n  @music = search.search_musics(info)\n  content_type :json\n  data = { music: @music }\n  data.to_json\nend\n\n# \u691c\u7d22\u30ef\u30fc\u30c9\u306e\u6c7a\u5b9a\nget '/fixed' do\n  tag_pick = Extract.new()\n  t = tag_pick.pickup_words(params[\"track\"])\n  @tags = t.compact\n  content_type :json\n  data = { artist: params[\"artist\"],  track: params[\"track\"], id: params[\"id\"], tags: @tags}\n  data.to_json\nend\n\n# \u6620\u50cf\u306e\u51fa\u529b\npost '/result' do\n  @bpm = params[\"bpm\"]\n  t = params[\"tags\"]\n  id = params[\"id\"]\n\n  music = Itunes.new()\n  @music_url = music.search_music_by_id(id)\n\n  t = t.gsub(\" \", \"\")\n\n  tags = []\n  if t.index(\",\")\n    tags = t.split(\",\")\n  else\n    tags << t\n  end\n\n  video = Vine.new()\n  v = tags.map { |tag| video.search_tag(tag) }\n\n  v.flatten!\n  v = v.compact\n  v.sort!\n  v = v + v + v + v\n  @videos = v[0, 40]\n\n  erb :result\nend\n\n# \u30ea\u30ed\u30fc\u30c9\u3057\u305f\u3089\u30c8\u30c3\u30d7\u3078\nget '/result' do\n  redirect '/'\nend\n"], "filenames": ["Gemfile", "main.rb"], "buggy_code_start_loc": [25, 8], "buggy_code_end_loc": [25, 8], "fixing_code_start_loc": [26, 9], "fixing_code_end_loc": [29, 14], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in main.rb in Vine MV before 2015-11-08 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors.", "other": {"cve": {"id": "CVE-2016-1143", "sourceIdentifier": "vultures@jpcert.or.jp", "published": "2016-01-30T15:59:06.767", "lastModified": "2016-02-09T01:03:42.227", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in main.rb in Vine MV before 2015-11-08 allows remote attackers to inject arbitrary web script or HTML via unspecified vectors."}, {"lang": "es", "value": "Vulnerabilidad de XSS en main.rb en Vine MV en versiones anteriores a 2015-11-08 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de vectores no especificados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:vine_mv_project:vine_mv:*:*:*:*:*:*:*:*", "versionEndIncluding": "2015-09-09", "matchCriteriaId": "40FB96BA-93E7-498F-893C-D84FCEB4D69B"}]}]}], "references": [{"url": "http://jvn.jp/en/jp/JVN12165579/index.html", "source": "vultures@jpcert.or.jp", "tags": ["Vendor Advisory"]}, {"url": "http://jvndb.jvn.jp/jvndb/JVNDB-2016-000016", "source": "vultures@jpcert.or.jp", "tags": ["Vendor Advisory"]}, {"url": "https://github.com/ikeay/vinemv/commit/f41efbcac1f9262a161ebc1babfcf55fae9e939a", "source": "vultures@jpcert.or.jp", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/ikeay/vinemv/commit/f41efbcac1f9262a161ebc1babfcf55fae9e939a"}}