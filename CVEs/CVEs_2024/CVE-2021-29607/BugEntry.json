{"buggy_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// SparseSparseBinaryOpShared is the shared code for binary coefficient-wise\n// (cwise) operations of the following form:\n//\n//   sparse_t <binary cwise op> sparse_t -> new sparse_t\n//\n// The output SparseTensor may store up to \"a_nnz + b_nnz\" elements.\n\n// IMPLEMENTATION DETAILS (not part of the interface specification).\n//\n// This kernel implements the \"union\" semantics on the non-zeros: namely, any\n// non-zero from either side participate in the calculations, and any resultant\n// zeros will NOT be excluded from the output storage.\n//\n// (In the future, we could always add a pruning op the prunes away the zeros,\n// if desirable.)\n\n// See docs of all registered ops in ../ops/sparse_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/cwise_ops.h\"\n#include \"tensorflow/core/kernels/cwise_ops_common.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nnamespace {\n// Unions the sparse indices and outputs corresponding values: namely, if a\n// non-zero appear in one side, it will participate in the calculation, where\n// the counterpart on the other side is either a value or an implicit zero.\n//\n// On exit, outputs the augmented values in \"{a,b}_augmented_values\", and fills\n// \"entries_to_copy\" with \"(from_a?, index)\" pairs.  All three vectors have the\n// same size.\n//\n// The input and output sparse tensors are assumed ordered in the canonical\n// row-major order.\ntemplate <typename T>\nvoid UnionSparseIndicesAndValues(\n    typename TTypes<int64>::ConstMatrix a_indices_mat,\n    typename TTypes<T>::ConstFlat a_values, int64 a_nnz,\n    typename TTypes<int64>::ConstMatrix b_indices_mat,\n    typename TTypes<T>::ConstFlat b_values, int64 b_nnz, int num_dims,\n    std::vector<T> *a_augmented_values, std::vector<T> *b_augmented_values,\n    std::vector<std::pair<bool, int64>> *entries_to_copy) {\n  entries_to_copy->reserve(a_nnz + b_nnz);\n  a_augmented_values->reserve(a_nnz);\n  b_augmented_values->reserve(b_nnz);\n\n  int64 i = 0, j = 0;\n  const T kZero = T(0);\n  while (i < a_nnz && j < b_nnz) {\n    switch (sparse::DimComparator::cmp(a_indices_mat, b_indices_mat, i, j,\n                                       num_dims)) {\n      case -1:\n        entries_to_copy->emplace_back(true, i);\n        a_augmented_values->push_back(a_values(i));\n        b_augmented_values->push_back(kZero);\n        ++i;\n        break;\n      case 0:\n        entries_to_copy->emplace_back(true, i);\n        a_augmented_values->push_back(a_values(i));\n        b_augmented_values->push_back(b_values(j));\n        ++i;\n        ++j;\n        break;\n      case 1:\n        entries_to_copy->emplace_back(false, j);\n        a_augmented_values->push_back(kZero);\n        b_augmented_values->push_back(b_values(j));\n        ++j;\n        break;\n    }\n  }\n  // Handles leftovers; at most one loop runs.\n  while (i < a_nnz) {\n    entries_to_copy->emplace_back(/* is_a */ true, i);\n    a_augmented_values->push_back(a_values(i++));\n    b_augmented_values->push_back(kZero);\n  }\n  while (j < b_nnz) {\n    entries_to_copy->emplace_back(/* is_a */ false, j);\n    a_augmented_values->push_back(kZero);\n    b_augmented_values->push_back(b_values(j++));\n  }\n}\n}  // anonymous namespace\n\n// Device: CPUDevice.  GPU kernel is not supported currently.\n// T: dtype of the SparseTensor's.\n// Functor: binary cwise operation to perform on the corresponding operand\n// values.  See cwise_ops.h for a list of possible functors to register with.\ntemplate <typename Device, typename T, typename Functor>\nclass SparseSparseBinaryOpShared : public OpKernel {\n public:\n  explicit SparseSparseBinaryOpShared(OpKernelConstruction *ctx)\n      : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext *ctx) override {\n    const Tensor *a_indices_t, *a_values_t, *a_shape_t, *b_indices_t,\n        *b_values_t, *b_shape_t;\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_indices\", &a_indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_shape\", &a_shape_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_indices\", &b_indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_shape\", &b_shape_t));\n\n    // Validations.\n    OP_REQUIRES(\n        ctx,\n        TensorShapeUtils::IsMatrix(a_indices_t->shape()) &&\n            TensorShapeUtils::IsMatrix(b_indices_t->shape()),\n        errors::InvalidArgument(\"Inputs a_indices and b_indices should be \"\n                                \"matrices but received shapes: \",\n                                a_indices_t->shape().DebugString(), \", \",\n                                b_indices_t->shape().DebugString()));\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(a_values_t->shape()) &&\n                    TensorShapeUtils::IsVector(b_values_t->shape()),\n                errors::InvalidArgument(\n                    \"Inputs a_values and b_values should be vectors \"\n                    \"but received shapes: \",\n                    a_values_t->shape().DebugString(), \" and \",\n                    b_values_t->shape().DebugString()));\n\n    const int64 a_nnz = a_indices_t->dim_size(0);\n    const int64 b_nnz = b_indices_t->dim_size(0);\n    const auto a_values = a_values_t->vec<T>();\n    const auto b_values = b_values_t->vec<T>();\n\n    OP_REQUIRES(\n        ctx, a_values.size() == a_nnz && b_values.size() == b_nnz,\n        errors::InvalidArgument(\"Expected \", a_nnz, \" and \", b_nnz,\n                                \" non-empty input values, got \",\n                                a_values.size(), \" and \", b_values.size()));\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(a_shape_t->shape()) &&\n                    TensorShapeUtils::IsVector(b_shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Input shapes should be a vector but received shapes \",\n                    a_shape_t->shape().DebugString(), \" and \",\n                    b_shape_t->shape().DebugString()));\n    OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),\n                errors::InvalidArgument(\n                    \"Operands do not have the same ranks; got shapes: \",\n                    a_shape_t->SummarizeValue(10), \" and \",\n                    b_shape_t->SummarizeValue(10)));\n    const auto a_shape = a_shape_t->flat<int64>();\n    const auto b_shape = b_shape_t->flat<int64>();\n    for (int i = 0; i < a_shape_t->NumElements(); ++i) {\n      OP_REQUIRES(ctx, a_shape(i) == b_shape(i),\n                  errors::InvalidArgument(\"Operands' shapes do not match: got \",\n                                          a_shape(i), \" and \", b_shape(i),\n                                          \" for dimension \", i));\n    }\n\n    const int num_dims = a_indices_t->dim_size(1);\n    const auto a_indices_mat = a_indices_t->matrix<int64>();\n    const auto b_indices_mat = b_indices_t->matrix<int64>();\n    std::vector<T> a_augmented_values, b_augmented_values;\n    std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx\n    UnionSparseIndicesAndValues(a_indices_mat, a_values, a_nnz, b_indices_mat,\n                                b_values, b_nnz, num_dims, &a_augmented_values,\n                                &b_augmented_values, &entries_to_copy);\n\n    // Allocates and fills output tensors.\n    const int64 sum_nnz = a_augmented_values.size();\n    Tensor *output_indices_t, *output_values_t;\n    OP_REQUIRES_OK(ctx,\n                   ctx->allocate_output(0, TensorShape({sum_nnz, num_dims}),\n                                        &output_indices_t));\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(1, TensorShape({sum_nnz}), &output_values_t));\n    auto output_indices_mat = output_indices_t->matrix<int64>();\n\n    for (int64 i = 0; i < sum_nnz; ++i) {\n      const bool from_a = entries_to_copy[i].first;\n      const int64 idx = entries_to_copy[i].second;\n      output_indices_mat.chip<0>(i) =\n          from_a ? a_indices_mat.chip<0>(idx) : b_indices_mat.chip<0>(idx);\n    }\n\n    // Performs the functor operation using Eigen.\n    //\n    // Note that the two stack-allocated std::vector's may not be aligned. Using\n    // allocate_temp() would've given us aligned storage, but we do not know\n    // their sizes in advance, so we couldn't use allocate_temp() anyway.\n    //\n    // TODO(zongheng): measure if it's worthwhile to somehow force alignment.\n    using UnalignedTensorMap =\n        Eigen::TensorMap<Eigen::Tensor<const T, 1, Eigen::RowMajor>,\n                         Eigen::Unaligned>;\n    auto a_augmented_values_t =\n        UnalignedTensorMap(a_augmented_values.data(), sum_nnz);\n    auto b_augmented_values_t =\n        UnalignedTensorMap(b_augmented_values.data(), sum_nnz);\n    output_values_t->flat<T>().device(ctx->eigen_device<Device>()) =\n        a_augmented_values_t.binaryExpr(b_augmented_values_t,\n                                        typename Functor::func());\n  }\n};\n\n#define REGISTER_KERNELS(T)                                                  \\\n  REGISTER_KERNEL_BUILDER(                                                   \\\n      Name(\"SparseSparseMinimum\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SparseSparseBinaryOpShared<CPUDevice, T, functor::minimum<T>>)         \\\n                                                                             \\\n  REGISTER_KERNEL_BUILDER(                                                   \\\n      Name(\"SparseSparseMaximum\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SparseSparseBinaryOpShared<CPUDevice, T, functor::maximum<T>>)\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2016 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// SparseSparseBinaryOpShared is the shared code for binary coefficient-wise\n// (cwise) operations of the following form:\n//\n//   sparse_t <binary cwise op> sparse_t -> new sparse_t\n//\n// The output SparseTensor may store up to \"a_nnz + b_nnz\" elements.\n\n// IMPLEMENTATION DETAILS (not part of the interface specification).\n//\n// This kernel implements the \"union\" semantics on the non-zeros: namely, any\n// non-zero from either side participate in the calculations, and any resultant\n// zeros will NOT be excluded from the output storage.\n//\n// (In the future, we could always add a pruning op the prunes away the zeros,\n// if desirable.)\n\n// See docs of all registered ops in ../ops/sparse_ops.cc.\n\n#define EIGEN_USE_THREADS\n\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_util.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/kernels/cwise_ops.h\"\n#include \"tensorflow/core/kernels/cwise_ops_common.h\"\n#include \"tensorflow/core/util/sparse/sparse_tensor.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\n\nnamespace {\n// Unions the sparse indices and outputs corresponding values: namely, if a\n// non-zero appear in one side, it will participate in the calculation, where\n// the counterpart on the other side is either a value or an implicit zero.\n//\n// On exit, outputs the augmented values in \"{a,b}_augmented_values\", and fills\n// \"entries_to_copy\" with \"(from_a?, index)\" pairs.  All three vectors have the\n// same size.\n//\n// The input and output sparse tensors are assumed ordered in the canonical\n// row-major order.\ntemplate <typename T>\nvoid UnionSparseIndicesAndValues(\n    typename TTypes<int64>::ConstMatrix a_indices_mat,\n    typename TTypes<T>::ConstFlat a_values, int64 a_nnz,\n    typename TTypes<int64>::ConstMatrix b_indices_mat,\n    typename TTypes<T>::ConstFlat b_values, int64 b_nnz, int num_dims,\n    std::vector<T> *a_augmented_values, std::vector<T> *b_augmented_values,\n    std::vector<std::pair<bool, int64>> *entries_to_copy) {\n  entries_to_copy->reserve(a_nnz + b_nnz);\n  a_augmented_values->reserve(a_nnz);\n  b_augmented_values->reserve(b_nnz);\n\n  int64 i = 0, j = 0;\n  const T kZero = T(0);\n  while (i < a_nnz && j < b_nnz) {\n    switch (sparse::DimComparator::cmp(a_indices_mat, b_indices_mat, i, j,\n                                       num_dims)) {\n      case -1:\n        entries_to_copy->emplace_back(true, i);\n        a_augmented_values->push_back(a_values(i));\n        b_augmented_values->push_back(kZero);\n        ++i;\n        break;\n      case 0:\n        entries_to_copy->emplace_back(true, i);\n        a_augmented_values->push_back(a_values(i));\n        b_augmented_values->push_back(b_values(j));\n        ++i;\n        ++j;\n        break;\n      case 1:\n        entries_to_copy->emplace_back(false, j);\n        a_augmented_values->push_back(kZero);\n        b_augmented_values->push_back(b_values(j));\n        ++j;\n        break;\n    }\n  }\n  // Handles leftovers; at most one loop runs.\n  while (i < a_nnz) {\n    entries_to_copy->emplace_back(/* is_a */ true, i);\n    a_augmented_values->push_back(a_values(i++));\n    b_augmented_values->push_back(kZero);\n  }\n  while (j < b_nnz) {\n    entries_to_copy->emplace_back(/* is_a */ false, j);\n    a_augmented_values->push_back(kZero);\n    b_augmented_values->push_back(b_values(j++));\n  }\n}\n}  // anonymous namespace\n\n// Device: CPUDevice.  GPU kernel is not supported currently.\n// T: dtype of the SparseTensor's.\n// Functor: binary cwise operation to perform on the corresponding operand\n// values.  See cwise_ops.h for a list of possible functors to register with.\ntemplate <typename Device, typename T, typename Functor>\nclass SparseSparseBinaryOpShared : public OpKernel {\n public:\n  explicit SparseSparseBinaryOpShared(OpKernelConstruction *ctx)\n      : OpKernel(ctx) {}\n\n  void Compute(OpKernelContext *ctx) override {\n    const Tensor *a_indices_t, *a_values_t, *a_shape_t, *b_indices_t,\n        *b_values_t, *b_shape_t;\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_indices\", &a_indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_values\", &a_values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"a_shape\", &a_shape_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_indices\", &b_indices_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_values\", &b_values_t));\n    OP_REQUIRES_OK(ctx, ctx->input(\"b_shape\", &b_shape_t));\n\n    // Validations.\n    OP_REQUIRES(\n        ctx,\n        TensorShapeUtils::IsMatrix(a_indices_t->shape()) &&\n            TensorShapeUtils::IsMatrix(b_indices_t->shape()),\n        errors::InvalidArgument(\"Inputs a_indices and b_indices should be \"\n                                \"matrices but received shapes: \",\n                                a_indices_t->shape().DebugString(), \", \",\n                                b_indices_t->shape().DebugString()));\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(a_values_t->shape()) &&\n                    TensorShapeUtils::IsVector(b_values_t->shape()),\n                errors::InvalidArgument(\n                    \"Inputs a_values and b_values should be vectors \"\n                    \"but received shapes: \",\n                    a_values_t->shape().DebugString(), \" and \",\n                    b_values_t->shape().DebugString()));\n\n    const int64 a_nnz = a_indices_t->dim_size(0);\n    const int64 b_nnz = b_indices_t->dim_size(0);\n    const auto a_values = a_values_t->vec<T>();\n    const auto b_values = b_values_t->vec<T>();\n\n    OP_REQUIRES(\n        ctx, a_values.size() == a_nnz && b_values.size() == b_nnz,\n        errors::InvalidArgument(\"Expected \", a_nnz, \" and \", b_nnz,\n                                \" non-empty input values, got \",\n                                a_values.size(), \" and \", b_values.size()));\n\n    OP_REQUIRES(ctx,\n                TensorShapeUtils::IsVector(a_shape_t->shape()) &&\n                    TensorShapeUtils::IsVector(b_shape_t->shape()),\n                errors::InvalidArgument(\n                    \"Input shapes should be a vector but received shapes \",\n                    a_shape_t->shape().DebugString(), \" and \",\n                    b_shape_t->shape().DebugString()));\n    OP_REQUIRES(ctx, a_shape_t->IsSameSize(*b_shape_t),\n                errors::InvalidArgument(\n                    \"Operands do not have the same ranks; got shapes: \",\n                    a_shape_t->SummarizeValue(10), \" and \",\n                    b_shape_t->SummarizeValue(10)));\n    const auto a_shape = a_shape_t->flat<int64>();\n    const auto b_shape = b_shape_t->flat<int64>();\n    for (int i = 0; i < a_shape_t->NumElements(); ++i) {\n      OP_REQUIRES(ctx, a_shape(i) == b_shape(i),\n                  errors::InvalidArgument(\"Operands' shapes do not match: got \",\n                                          a_shape(i), \" and \", b_shape(i),\n                                          \" for dimension \", i));\n    }\n\n    OP_REQUIRES(\n        ctx, a_indices_t->dim_size(1) == b_indices_t->dim_size(1),\n        errors::InvalidArgument(\n            \"Indices' dimensions do not match: got \", a_indices_t->dim_size(1),\n            \" and \", b_indices_t->dim_size(1), \" for the second dimension.\"));\n    const int num_dims = a_indices_t->dim_size(1);\n    const auto a_indices_mat = a_indices_t->matrix<int64>();\n    const auto b_indices_mat = b_indices_t->matrix<int64>();\n    std::vector<T> a_augmented_values, b_augmented_values;\n    std::vector<std::pair<bool, int64>> entries_to_copy;  // from_a?, idx\n    UnionSparseIndicesAndValues(a_indices_mat, a_values, a_nnz, b_indices_mat,\n                                b_values, b_nnz, num_dims, &a_augmented_values,\n                                &b_augmented_values, &entries_to_copy);\n\n    // Allocates and fills output tensors.\n    const int64 sum_nnz = a_augmented_values.size();\n    Tensor *output_indices_t, *output_values_t;\n    OP_REQUIRES_OK(ctx,\n                   ctx->allocate_output(0, TensorShape({sum_nnz, num_dims}),\n                                        &output_indices_t));\n    OP_REQUIRES_OK(\n        ctx, ctx->allocate_output(1, TensorShape({sum_nnz}), &output_values_t));\n    auto output_indices_mat = output_indices_t->matrix<int64>();\n\n    for (int64 i = 0; i < sum_nnz; ++i) {\n      const bool from_a = entries_to_copy[i].first;\n      const int64 idx = entries_to_copy[i].second;\n      output_indices_mat.chip<0>(i) =\n          from_a ? a_indices_mat.chip<0>(idx) : b_indices_mat.chip<0>(idx);\n    }\n\n    // Performs the functor operation using Eigen.\n    //\n    // Note that the two stack-allocated std::vector's may not be aligned. Using\n    // allocate_temp() would've given us aligned storage, but we do not know\n    // their sizes in advance, so we couldn't use allocate_temp() anyway.\n    //\n    // TODO(zongheng): measure if it's worthwhile to somehow force alignment.\n    using UnalignedTensorMap =\n        Eigen::TensorMap<Eigen::Tensor<const T, 1, Eigen::RowMajor>,\n                         Eigen::Unaligned>;\n    auto a_augmented_values_t =\n        UnalignedTensorMap(a_augmented_values.data(), sum_nnz);\n    auto b_augmented_values_t =\n        UnalignedTensorMap(b_augmented_values.data(), sum_nnz);\n    output_values_t->flat<T>().device(ctx->eigen_device<Device>()) =\n        a_augmented_values_t.binaryExpr(b_augmented_values_t,\n                                        typename Functor::func());\n  }\n};\n\n#define REGISTER_KERNELS(T)                                                  \\\n  REGISTER_KERNEL_BUILDER(                                                   \\\n      Name(\"SparseSparseMinimum\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SparseSparseBinaryOpShared<CPUDevice, T, functor::minimum<T>>)         \\\n                                                                             \\\n  REGISTER_KERNEL_BUILDER(                                                   \\\n      Name(\"SparseSparseMaximum\").Device(DEVICE_CPU).TypeConstraint<T>(\"T\"), \\\n      SparseSparseBinaryOpShared<CPUDevice, T, functor::maximum<T>>)\n\nTF_CALL_REAL_NUMBER_TYPES(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc"], "buggy_code_start_loc": [182], "buggy_code_end_loc": [182], "fixing_code_start_loc": [183], "fixing_code_end_loc": [188], "type": "CWE-754", "message": "TensorFlow is an end-to-end open source platform for machine learning. Incomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data. The implementation(https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29607", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:15.763", "lastModified": "2021-05-18T15:08:11.263", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. Incomplete validation in `SparseAdd` results in allowing attackers to exploit undefined behavior (dereferencing null pointers) as well as write outside of bounds of heap allocated data. The implementation(https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) has a large set of validation for the two sparse tensor inputs (6 tensors in total), but does not validate that the tensors are not empty or that the second dimension of `*_indices` matches the size of corresponding `*_shape`. This allows attackers to send tensor triples that represent invalid sparse tensors to abuse code assumptions that are not protected by validation. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Una comprobaci\u00f3n incompleta en \"SparseAdd\" resulta en que los atacantes puedan explotar el comportamiento indefinido (desreferenciar punteros nulls), as\u00ed como escribir fuera de l\u00edmites de los datos asignados a la pila.&#xa0;La implementaci\u00f3n (https://github.com/tensorflow/tensorflow/blob/656e7673b14acd7835dc778867f84916c6d1cac2/tensorflow/core/kernels/sparse_sparse_binary_op_shared.cc) presenta un gran ajuste de comprobaci\u00f3n para los dos tensores en total entradas no comprobar que los tensores no est\u00e9n vac\u00edos o que la segunda dimensi\u00f3n de \"* _indices\" coincida con el tama\u00f1o de \"* _shape\" correspondiente.&#xa0;Esto permite a los atacantes enviar triples de tensor que representan tensores dispersos no comprobados para abusar de supuestos de c\u00f3digo que no est\u00e1n protegidos por comprobaci\u00f3n.&#xa0;La correcci\u00f3n ser\u00e1 incluida en TensorFlow versi\u00f3n 2.5.0.Tambi\u00e9n seleccionaremos este commits en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que tambi\u00e9n est\u00e1n afectadas y a\u00fan se encuentran en el rango compatible"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:L/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "HIGH", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.0, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-754"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/commit/f6fde895ef9c77d848061c0517f19d0ec2682f3a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-gv26-jpj9-c8gq", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/ba6822bd7b7324ba201a28b2f278c29a98edbef2"}}