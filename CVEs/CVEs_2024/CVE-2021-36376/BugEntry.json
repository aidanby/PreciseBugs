{"buggy_code": ["# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_colours\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60e2fb6138a49ad9f1cb3c6d8f8ccbdd5e62b4dab317c1b435a47ecd7da1d28f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30d3a39baa26f9651f17b375061f3233dde33424a8b72b0dbe93a68a0bc896d\"\ndependencies = [\n \"byteorder\",\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n\n[[package]]\nname = \"box_drawing\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea27d8d5fd867b17523bf6788b1175fa9867f34669d057e9adaf76e27bcea44b\"\n\n[[package]]\nname = \"bytelines\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791e4e40d13e1463dee537b254225c12c46ec7328f1817c6264873bc166f615f\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48\"\ndependencies = [\n \"jobserver\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"2.33.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002\"\ndependencies = [\n \"ansi_term 0.11.0\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3993e6445baa160675931ec041a5e03ca84b9c6e32a056150d3aa2bdda0a1f45\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"regex\",\n \"terminal_size\",\n \"unicode-width\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99de365f605554ae33f115102a02057d4fc18b01f3284d6870be0938743cfe7d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"error-chain\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d2f06b9cac1506ece98fe3231e3cc9c4410ec3d5b1f24ae1c8946f0742cdefc\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7411863d55df97a419aa64cb4d2f167103ea9d767e2c54a1868b7ac3f6b47129\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"crc32fast\",\n \"libc\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ece68d15c92e84fa4f19d3780f1294e5ca82a78a6d515f1efaabcc144688be00\"\ndependencies = [\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"git-delta\"\nversion = \"0.8.3\"\ndependencies = [\n \"ansi_colours\",\n \"ansi_term 0.12.1\",\n \"atty\",\n \"bitflags\",\n \"box_drawing\",\n \"bytelines\",\n \"console\",\n \"dirs-next\",\n \"error-chain\",\n \"git2\",\n \"itertools\",\n \"lazy_static\",\n \"pathdiff\",\n \"regex\",\n \"shell-words\",\n \"structopt\",\n \"syntect\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"vte\",\n \"xdg\",\n]\n\n[[package]]\nname = \"git2\"\nversion = \"0.13.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9831e983241f8c5591ed53f17d874833e2fa82cac2625f3888c50cbfe136cba\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"url\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aca5565f760fb5b220e499d72710ed156fdb74e631659e99377d9ebfbd13ae8\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e47a3566dd4fd4eec714ae6ceabdee0caec795be835c223d92c2d40f1e8cf1c\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd25036021b0de88a0aff6b850051563c6516d0bf53f8638938edbb9de732736\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c71313ebb9439f74b00d9d2dcec36440beaf57a6aa0623068441dd7cd81a7f2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1482821306169ec4d07f6aca392a4681f66c75c9918aa49641a2595db64053cb\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.12.21+1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86271bacd72b2b9e854c3dcfb82efd538f15f870e4c11af66900effb462f6825\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"602113192b08db8f38796c4e85c39e960c145965140e918018bcde1952429655\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"line-wrap\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30344350a2a51da54c1d53be93fade8a237e545dbcc4bdbe635413f2117cab9\"\ndependencies = [\n \"safemem\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8dd5a6d5999d9907cda8ed67bbd137d3af8085216c2ac62de5be860bd41f304a\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b\"\ndependencies = [\n \"cfg-if 0.1.10\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f2d26ec3309788e423cfbf68ad1800f061638098d76a83681af979dc4eda19d\"\ndependencies = [\n \"adler\",\n \"autocfg\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"onig\"\nversion = \"6.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b46fd9edbc018f0be4e366c24c46db44fac49cd01c039ae85308088b089dd5\"\ndependencies = [\n \"bitflags\",\n \"lazy_static\",\n \"libc\",\n \"onig_sys\",\n]\n\n[[package]]\nname = \"onig_sys\"\nversion = \"69.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed063c96cf4c0f2e5d09324409d158b38a0a85a7b90fbd68c8cad75c495d5775\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"877630b3de15c0b64cc52f659345724fbf6bdad9bd9566699fc53688f3c34a34\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c\"\n\n[[package]]\nname = \"plist\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4dc57ccf442c7414b790e8e7b72fb4d776a66c7680129360946d9aaa6f5311e9\"\ndependencies = [\n \"base64\",\n \"chrono\",\n \"indexmap\",\n \"line-wrap\",\n \"serde\",\n \"xml-rs\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"991431c3519a3f36861882da93630ce66b52918dcf1b8e2fd66b397fc96f28df\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de0737333e7a9502c789a36d7c7fa6092a49895d4faa31ca5df163857ded2e9d\"\ndependencies = [\n \"getrandom\",\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a26af418b574bd56588335b3a3659a65725d4e636eb1016c2f9e3b38c7cc759\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n\n[[package]]\nname = \"safemem\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef703b7cb59335eae2eb93ceb664c0eb7ea6bf567079d843e09420219668e072\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.118\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06c64263859d87aa2eb554587e2d23183398d617427327cf2b3d0ed8c69e4800\"\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.118\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c84d3526699cd55261af4b941e4e725444df67aa4f9e6a3564f18030d12672df\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fceb2595057b6891a4ee808f70054bd2d12f0e97f1cbb78689b59f676df325a\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6fa3938c99da4914afedd13bf3d79bcb6c277d1b2c398d23257a304d9e1b074\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"structopt\"\nversion = \"0.3.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69b041cdcb67226aca307e6e7be44c8806423d83e018bd662360a93dabce4d71\"\ndependencies = [\n \"clap\",\n \"lazy_static\",\n \"structopt-derive\",\n]\n\n[[package]]\nname = \"structopt-derive\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7813934aecf5f51a54775e00068c237de98489463968231a51746bbbc03f9c10\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4211ce9909eb971f111059df92c45640aad50a619cf55cd76476be803c4c68e6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"syntect\"\nversion = \"4.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bfac2b23b4d049dc9a89353b4e06bbc85a8f42020cccbe5409a115cf19031e5\"\ndependencies = [\n \"bincode\",\n \"bitflags\",\n \"flate2\",\n \"fnv\",\n \"lazy_static\",\n \"lazycell\",\n \"onig\",\n \"plist\",\n \"regex-syntax\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"walkdir\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bd2d183bd3fac5f5fe38ddbeb4dc9aec4a39a9d7d59e7491d900302da01cbe1\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccf8dbc19eb42fba10e8feaaec282fb50e2c14b2726d6301dbfeed0f73306a6f\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\ndependencies = [\n \"matches\",\n]\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a13e63ab62dbe32aeee58d1c5408d35c36c392bba5d9d3142287219721afe606\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n\n[[package]]\nname = \"url\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5909f2b0817350449ed73e8bcd81c8c3c8d9a7a5d8acba4b27db277f1868976e\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"936e4b492acfd135421d8dca4b1aa80a7bfc26e702ef3af710e0752684df5372\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b00bca6106a5e23f3eee943593759b7fcddb00554332e856d990c893966879fb\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed\"\n\n[[package]]\nname = \"vte\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983\"\ndependencies = [\n \"arrayvec\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"xdg\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d089681aa106a86fade1b0128fb5daf07d5867a509ab036d99988dec80429a57\"\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b07db065a5cf61a7e4ba64f29e67db906fb1787316516c4e6e5ff0fea1efcd8a\"\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n", "[package]\nname = \"git-delta\"\nauthors = [\"Dan Davison <dandavison7@gmail.com>\"]\ncategories = [\"command-line-utilities\", \"development-tools\"]\ndescription = \"A syntax-highlighting pager for git\"\ndocumentation = \"https://github.com/dandavison/delta\"\nedition = \"2018\"\nhomepage = \"https://github.com/dandavison/delta\"\nlicense = \"MIT\"\nrepository = \"https://github.com/dandavison/delta\"\nversion = \"0.8.3\"\n\n[[bin]]\nname = \"delta\"\npath = \"src/main.rs\"\n\n[dependencies]\nansi_colours = \"1.0.4\"\nansi_term = \"0.12.1\"\natty = \"0.2.14\"\nbitflags = \"1.2.1\"\nbox_drawing = \"0.1.2\"\nbytelines = \"2.2.2\"\nconsole = \"0.14.1\"\ndirs-next = \"2.0.0\"\nitertools = \"0.10.1\"\nlazy_static = \"1.4\"\npathdiff = \"0.2.0\"\nregex = \"1.4.6\"\nshell-words = \"1.0.0\"\nstructopt = \"0.3.22\"\nunicode-segmentation = \"1.8.0\"\nunicode-width = \"0.1.8\"\nvte = \"0.10.1\"\nxdg = \"2.2.0\"\n\n[dependencies.git2]\nversion = \"0.13.20\"\ndefault-features = false\nfeatures = []\n\n[dependencies.syntect]\nversion = \"4.5.0\"\ndefault-features = false\nfeatures = [\"parsing\", \"assets\", \"yaml-load\", \"dump-load\", \"regex-onig\"]\n\n[dependencies.error-chain]\nversion = \"0.12.4\"\ndefault-features = false\nfeatures = []\n", "use std::process::Command;\n\npub fn retrieve_less_version() -> Option<usize> {\n    let cmd = Command::new(\"less\").arg(\"--version\").output().ok()?;\n    parse_less_version(&cmd.stdout)\n}\n\nfn parse_less_version(output: &[u8]) -> Option<usize> {\n    if output.starts_with(b\"less \") {\n        let version = std::str::from_utf8(&output[5..]).ok()?;\n        let end = version.find(|c: char| !c.is_ascii_digit())?;\n        version[..end].parse::<usize>().ok()\n    } else {\n        None\n    }\n}\n\n#[test]\nfn test_parse_less_version_487() {\n    let output = b\"less 487 (GNU regular expressions)\nCopyright (C) 1984-2016  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHomepage: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(487), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_529() {\n    let output = b\"less 529 (Spencer V8 regular expressions)\nCopyright (C) 1984-2017  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHomepage: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(529), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_551() {\n    let output = b\"less 551 (PCRE regular expressions)\nCopyright (C) 1984-2019  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHome page: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(551), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_wrong_program() {\n    let output = b\"more from util-linux 2.34\";\n\n    assert_eq!(None, parse_less_version(output));\n}\n", "// https://github.com/sharkdp/bat a1b9334a44a2c652f52dddaa83dbacba57372468\n// src/output.rs\n// See src/bat_utils/LICENSE\nuse std::env;\nuse std::ffi::OsString;\nuse std::io::{self, Write};\nuse std::path::PathBuf;\nuse std::process::{Child, Command, Stdio};\n\nuse super::less::retrieve_less_version;\n\nuse crate::config;\nuse crate::features::navigate;\n\n#[derive(Debug, Clone, Copy, PartialEq)]\n#[allow(dead_code)]\npub enum PagingMode {\n    Always,\n    QuitIfOneScreen,\n    Never,\n}\nuse crate::errors::*;\n\npub enum OutputType {\n    Pager(Child),\n    Stdout(io::Stdout),\n}\n\nimpl OutputType {\n    pub fn from_mode(\n        mode: PagingMode,\n        pager: Option<String>,\n        config: &config::Config,\n    ) -> Result<Self> {\n        use self::PagingMode::*;\n        Ok(match mode {\n            Always => OutputType::try_pager(false, pager, config)?,\n            QuitIfOneScreen => OutputType::try_pager(true, pager, config)?,\n            _ => OutputType::stdout(),\n        })\n    }\n\n    /// Try to launch the pager. Fall back to stdout in case of errors.\n    fn try_pager(\n        quit_if_one_screen: bool,\n        pager_from_config: Option<String>,\n        config: &config::Config,\n    ) -> Result<Self> {\n        let mut replace_arguments_to_less = false;\n\n        let pager_from_env = match (\n            env::var(\"DELTA_PAGER\"),\n            env::var(\"BAT_PAGER\"),\n            env::var(\"PAGER\"),\n        ) {\n            (Ok(delta_pager), _, _) => Some(delta_pager),\n            (_, Ok(bat_pager), _) => Some(bat_pager),\n            (_, _, Ok(pager)) => {\n                // less needs to be called with the '-R' option in order to properly interpret ANSI\n                // color sequences. If someone has set PAGER=\"less -F\", we therefore need to\n                // overwrite the arguments and add '-R'.\n                // We only do this for PAGER, since it is used in other contexts.\n                replace_arguments_to_less = true;\n                Some(pager)\n            }\n            _ => None,\n        };\n\n        if pager_from_config.is_some() {\n            replace_arguments_to_less = false;\n        }\n\n        let pager = pager_from_config\n            .or(pager_from_env)\n            .unwrap_or_else(|| String::from(\"less\"));\n\n        let pagerflags =\n            shell_words::split(&pager).chain_err(|| \"Could not parse pager command.\")?;\n\n        match pagerflags.split_first() {\n            Some((pager_name, args)) => {\n                let pager_path = PathBuf::from(pager_name);\n\n                let is_less = pager_path.file_stem() == Some(&OsString::from(\"less\"));\n\n                let mut process = if is_less {\n                    let mut p = Command::new(&pager_path);\n                    if args.is_empty() || replace_arguments_to_less {\n                        p.args(vec![\"--RAW-CONTROL-CHARS\"]);\n\n                        // Passing '--no-init' fixes a bug with '--quit-if-one-screen' in older\n                        // versions of 'less'. Unfortunately, it also breaks mouse-wheel support.\n                        //\n                        // See: http://www.greenwoodsoftware.com/less/news.530.html\n                        //\n                        // For newer versions (530 or 558 on Windows), we omit '--no-init' as it\n                        // is not needed anymore.\n                        match retrieve_less_version() {\n                            None => {\n                                p.arg(\"--no-init\");\n                            }\n                            Some(version)\n                                if (version < 530 || (cfg!(windows) && version < 558)) =>\n                            {\n                                p.arg(\"--no-init\");\n                            }\n                            _ => {}\n                        }\n\n                        if quit_if_one_screen {\n                            p.arg(\"--quit-if-one-screen\");\n                        }\n                    } else {\n                        p.args(args);\n                    }\n                    p.env(\"LESSCHARSET\", \"UTF-8\");\n                    p\n                } else {\n                    if pager_path.file_stem() == Some(&OsString::from(\"delta\")) {\n                        eprintln!(\n                            \"\\\nIt looks like you have set delta as the value of $PAGER. \\\nThis would result in a non-terminating recursion. \\\ndelta is not an appropriate value for $PAGER \\\n(but it is an appropriate value for $GIT_PAGER).\"\n                        );\n                        std::process::exit(1);\n                    }\n                    let mut p = Command::new(&pager_path);\n                    p.args(args);\n                    p\n                };\n                if is_less && config.navigate {\n                    if let Ok(hist_file) =\n                        navigate::copy_less_hist_file_and_append_navigate_regexp(config)\n                    {\n                        process.env(\"LESSHISTFILE\", hist_file);\n                        if config.show_themes {\n                            process.arg(\"+n\");\n                        }\n                    }\n                }\n                Ok(process\n                    .env(\"LESSANSIENDCHARS\", \"mK\")\n                    .stdin(Stdio::piped())\n                    .spawn()\n                    .map(OutputType::Pager)\n                    .unwrap_or_else(|_| OutputType::stdout()))\n            }\n            None => Ok(OutputType::stdout()),\n        }\n    }\n\n    fn stdout() -> Self {\n        OutputType::Stdout(io::stdout())\n    }\n\n    pub fn handle(&mut self) -> Result<&mut dyn Write> {\n        Ok(match *self {\n            OutputType::Pager(ref mut command) => command\n                .stdin\n                .as_mut()\n                .chain_err(|| \"Could not open stdin for pager\")?,\n            OutputType::Stdout(ref mut handle) => handle,\n        })\n    }\n}\n\nimpl Drop for OutputType {\n    fn drop(&mut self) {\n        if let OutputType::Pager(ref mut command) = *self {\n            let _ = command.wait();\n        }\n    }\n}\n", "extern crate bitflags;\n\n#[macro_use]\nextern crate error_chain;\n\nmod align;\nmod ansi;\n#[cfg(not(tarpaulin_include))]\nmod bat_utils;\nmod cli;\nmod color;\nmod config;\nmod delta;\nmod draw;\nmod edits;\nmod env;\nmod features;\nmod format;\nmod git_config;\nmod hunk_header;\nmod options;\nmod paint;\nmod parse;\nmod parse_style;\nmod sample_diff;\nmod style;\nmod syntect_color;\nmod tests;\n\nuse std::io::{self, ErrorKind, Read, Write};\nuse std::path::PathBuf;\nuse std::process;\n\nuse bytelines::ByteLinesReader;\nuse itertools::Itertools;\nuse structopt::StructOpt;\n\nuse crate::bat_utils::assets::{list_languages, HighlightingAssets};\nuse crate::bat_utils::output::{OutputType, PagingMode};\nuse crate::config::delta_unreachable;\nuse crate::delta::delta;\nuse crate::options::get::get_themes;\nuse crate::options::theme::is_light_syntax_theme;\n\npub mod errors {\n    error_chain! {\n        foreign_links {\n            Io(::std::io::Error);\n            SyntectError(::syntect::LoadingError);\n            ParseIntError(::std::num::ParseIntError);\n        }\n    }\n}\n\n#[cfg(not(tarpaulin_include))]\n/// `Ok` of the `Result` contains with the exit code value\nfn run_app() -> std::io::Result<i32> {\n    let assets = HighlightingAssets::new();\n    let opt = cli::Opt::from_args_and_git_config(&mut git_config::GitConfig::try_create(), assets);\n\n    if opt.list_languages {\n        list_languages()?;\n        return Ok(0);\n    } else if opt.list_syntax_themes {\n        list_syntax_themes()?;\n        return Ok(0);\n    } else if opt.show_syntax_themes {\n        show_syntax_themes()?;\n        return Ok(0);\n    } else if opt.show_themes {\n        show_themes(opt.dark, opt.light, opt.computed.is_light_mode)?;\n        return Ok(0);\n    }\n\n    let _show_config = opt.show_config;\n    let config = config::Config::from(opt);\n\n    if _show_config {\n        let stdout = io::stdout();\n        let mut stdout = stdout.lock();\n        show_config(&config, &mut stdout)?;\n        return Ok(0);\n    }\n\n    let mut output_type =\n        OutputType::from_mode(config.paging_mode, config.pager.clone(), &config).unwrap();\n    let mut writer = output_type.handle().unwrap();\n\n    if atty::is(atty::Stream::Stdin) {\n        let exit_code = diff(\n            config.minus_file.as_ref(),\n            config.plus_file.as_ref(),\n            &config,\n            &mut writer,\n        );\n        return Ok(exit_code);\n    }\n\n    if let Err(error) = delta(io::stdin().lock().byte_lines(), &mut writer, &config) {\n        match error.kind() {\n            ErrorKind::BrokenPipe => return Ok(0),\n            _ => eprintln!(\"{}\", error),\n        }\n    };\n    Ok(0)\n}\n\n#[cfg(not(tarpaulin_include))]\nfn main() -> std::io::Result<()> {\n    let exit_code = run_app()?;\n    // when you call process::exit, no destructors are called, so we want to do it only once, here\n    process::exit(exit_code);\n}\n\n/// Run `git diff` on the files provided on the command line and display the output.\nfn diff(\n    minus_file: Option<&PathBuf>,\n    plus_file: Option<&PathBuf>,\n    config: &config::Config,\n    writer: &mut dyn Write,\n) -> i32 {\n    use std::io::BufReader;\n    let die = || {\n        eprintln!(\n            \"\\\nThe main way to use delta is to configure it as the pager for git: \\\nsee https://github.com/dandavison/delta#configuration. \\\nYou can also use delta to diff two files: `delta file_A file_B`.\"\n        );\n        process::exit(config.error_exit_code);\n    };\n    let diff_command = \"git\";\n    let minus_file = minus_file.unwrap_or_else(die);\n    let plus_file = plus_file.unwrap_or_else(die);\n    let mut diff_process = process::Command::new(PathBuf::from(diff_command))\n        .args(&[\"diff\", \"--no-index\"])\n        .args(&[minus_file, plus_file])\n        .stdout(process::Stdio::piped())\n        .spawn()\n        .unwrap_or_else(|err| {\n            eprintln!(\"Failed to execute the command '{}': {}\", diff_command, err);\n            process::exit(config.error_exit_code);\n        });\n\n    let exit_code = diff_process\n        .wait()\n        .unwrap_or_else(|_| {\n            delta_unreachable(&format!(\"'{}' process not running.\", diff_command));\n        })\n        .code()\n        .unwrap_or_else(|| {\n            eprintln!(\"'{}' process terminated without exit status.\", diff_command);\n            process::exit(config.error_exit_code);\n        });\n\n    if let Err(error) = delta(\n        BufReader::new(diff_process.stdout.unwrap()).byte_lines(),\n        writer,\n        &config,\n    ) {\n        match error.kind() {\n            ErrorKind::BrokenPipe => process::exit(0),\n            _ => {\n                eprintln!(\"{}\", error);\n                process::exit(config.error_exit_code);\n            }\n        }\n    };\n    exit_code\n}\n\nfn show_config(config: &config::Config, writer: &mut dyn Write) -> std::io::Result<()> {\n    // styles first\n    writeln!(\n        writer,\n        \"    commit-style                  = {commit_style}\n    file-style                    = {file_style}\n    hunk-header-style             = {hunk_header_style}\n    minus-style                   = {minus_style}\n    minus-non-emph-style          = {minus_non_emph_style}\n    minus-emph-style              = {minus_emph_style}\n    minus-empty-line-marker-style = {minus_empty_line_marker_style}\n    zero-style                    = {zero_style}\n    plus-style                    = {plus_style}\n    plus-non-emph-style           = {plus_non_emph_style}\n    plus-emph-style               = {plus_emph_style}\n    plus-empty-line-marker-style  = {plus_empty_line_marker_style}\n    whitespace-error-style        = {whitespace_error_style}\",\n        commit_style = config.commit_style.to_painted_string(),\n        file_style = config.file_style.to_painted_string(),\n        hunk_header_style = config.hunk_header_style.to_painted_string(),\n        minus_emph_style = config.minus_emph_style.to_painted_string(),\n        minus_empty_line_marker_style = config.minus_empty_line_marker_style.to_painted_string(),\n        minus_non_emph_style = config.minus_non_emph_style.to_painted_string(),\n        minus_style = config.minus_style.to_painted_string(),\n        plus_emph_style = config.plus_emph_style.to_painted_string(),\n        plus_empty_line_marker_style = config.plus_empty_line_marker_style.to_painted_string(),\n        plus_non_emph_style = config.plus_non_emph_style.to_painted_string(),\n        plus_style = config.plus_style.to_painted_string(),\n        whitespace_error_style = config.whitespace_error_style.to_painted_string(),\n        zero_style = config.zero_style.to_painted_string(),\n    )?;\n    // Everything else\n    writeln!(\n        writer,\n        \"    true-color                    = {true_color}\n    file-added-label              = {file_added_label}\n    file-modified-label           = {file_modified_label}\n    file-removed-label            = {file_removed_label}\n    file-renamed-label            = {file_renamed_label}\",\n        true_color = config.true_color,\n        file_added_label = format_option_value(&config.file_added_label),\n        file_modified_label = format_option_value(&config.file_modified_label),\n        file_removed_label = format_option_value(&config.file_removed_label),\n        file_renamed_label = format_option_value(&config.file_renamed_label),\n    )?;\n    writeln!(\n        writer,\n        \"    hyperlinks                    = {hyperlinks}\",\n        hyperlinks = config.hyperlinks\n    )?;\n    if config.hyperlinks {\n        writeln!(\n            writer,\n            \"    hyperlinks-file-link-format   = {hyperlinks_file_link_format}\",\n            hyperlinks_file_link_format = format_option_value(&config.hyperlinks_file_link_format),\n        )?\n    }\n    writeln!(\n        writer,\n        \"    inspect-raw-lines             = {inspect_raw_lines}\n    keep-plus-minus-markers       = {keep_plus_minus_markers}\",\n        inspect_raw_lines = match config.inspect_raw_lines {\n            cli::InspectRawLines::True => \"true\",\n            cli::InspectRawLines::False => \"false\",\n        },\n        keep_plus_minus_markers = config.keep_plus_minus_markers,\n    )?;\n    writeln!(\n        writer,\n        \"    line-numbers                  = {line_numbers}\",\n        line_numbers = config.line_numbers\n    )?;\n    if config.line_numbers {\n        writeln!(\n            writer,\n            \"    line-numbers-minus-style      = {line_numbers_minus_style}\n    line-numbers-zero-style       = {line_numbers_zero_style}\n    line-numbers-plus-style       = {line_numbers_plus_style}\n    line-numbers-left-style       = {line_numbers_left_style}\n    line-numbers-right-style      = {line_numbers_right_style}\n    line-numbers-left-format      = {line_numbers_left_format}\n    line-numbers-right-format     = {line_numbers_right_format}\",\n            line_numbers_minus_style = config.line_numbers_minus_style.to_painted_string(),\n            line_numbers_zero_style = config.line_numbers_zero_style.to_painted_string(),\n            line_numbers_plus_style = config.line_numbers_plus_style.to_painted_string(),\n            line_numbers_left_style = config.line_numbers_left_style.to_painted_string(),\n            line_numbers_right_style = config.line_numbers_right_style.to_painted_string(),\n            line_numbers_left_format = format_option_value(&config.line_numbers_left_format),\n            line_numbers_right_format = format_option_value(&config.line_numbers_right_format),\n        )?\n    }\n    writeln!(\n        writer,\n        \"    max-line-distance             = {max_line_distance}\n    max-line-length               = {max_line_length}\n    navigate                      = {navigate}\n    navigate-regexp               = {navigate_regexp}\n    pager                         = {pager}\n    paging                        = {paging_mode}\n    side-by-side                  = {side_by_side}\n    syntax-theme                  = {syntax_theme}\n    width                         = {width}\n    tabs                          = {tab_width}\n    word-diff-regex               = {tokenization_regex}\",\n        max_line_distance = config.max_line_distance,\n        max_line_length = config.max_line_length,\n        navigate = config.navigate,\n        navigate_regexp = match &config.navigate_regexp {\n            None => \"\".to_string(),\n            Some(s) => s.to_string(),\n        },\n        pager = config.pager.clone().unwrap_or_else(|| \"none\".to_string()),\n        paging_mode = match config.paging_mode {\n            PagingMode::Always => \"always\",\n            PagingMode::Never => \"never\",\n            PagingMode::QuitIfOneScreen => \"auto\",\n        },\n        side_by_side = config.side_by_side,\n        syntax_theme = config\n            .syntax_theme\n            .clone()\n            .map(|t| t.name.unwrap_or_else(|| \"none\".to_string()))\n            .unwrap_or_else(|| \"none\".to_string()),\n        width = match config.decorations_width {\n            cli::Width::Fixed(width) => width.to_string(),\n            cli::Width::Variable => \"variable\".to_string(),\n        },\n        tab_width = config.tab_width,\n        tokenization_regex = format_option_value(&config.tokenization_regex.to_string()),\n    )?;\n    Ok(())\n}\n\n// Heuristics determining whether to quote string option values when printing values intended for\n// git config.\nfn format_option_value<S>(s: S) -> String\nwhere\n    S: AsRef<str>,\n{\n    let s = s.as_ref();\n    if s.ends_with(' ')\n        || s.starts_with(' ')\n        || s.contains(&['\\\\', '{', '}', ':'][..])\n        || s.is_empty()\n    {\n        format!(\"'{}'\", s)\n    } else {\n        s.to_string()\n    }\n}\n\nfn show_themes(dark: bool, light: bool, computed_theme_is_light: bool) -> std::io::Result<()> {\n    use bytelines::ByteLines;\n    use sample_diff::DIFF;\n    use std::io::BufReader;\n    let mut input = DIFF.to_vec();\n\n    if !atty::is(atty::Stream::Stdin) {\n        let mut buf = Vec::new();\n        io::stdin().lock().read_to_end(&mut buf)?;\n        if !buf.is_empty() {\n            input = buf;\n        }\n    };\n\n    let mut git_config = git_config::GitConfig::try_create();\n    let opt = cli::Opt::from_iter_and_git_config(\n        &[\"\", \"\", \"--navigate\", \"--show-themes\"],\n        &mut git_config,\n    );\n    let mut output_type =\n        OutputType::from_mode(PagingMode::Always, None, &config::Config::from(opt)).unwrap();\n    let title_style = ansi_term::Style::new().bold();\n    let writer = output_type.handle().unwrap();\n\n    for theme in &get_themes(git_config::GitConfig::try_create()) {\n        let opt =\n            cli::Opt::from_iter_and_git_config(&[\"\", \"\", \"--features\", &theme], &mut git_config);\n        let is_dark_theme = opt.dark;\n        let is_light_theme = opt.light;\n        let config = config::Config::from(opt);\n\n        if (!computed_theme_is_light && is_dark_theme)\n            || (computed_theme_is_light && is_light_theme)\n            || (dark && light)\n        {\n            writeln!(writer, \"\\n\\nTheme: {}\\n\", title_style.paint(theme))?;\n\n            if let Err(error) = delta(ByteLines::new(BufReader::new(&input[0..])), writer, &config)\n            {\n                match error.kind() {\n                    ErrorKind::BrokenPipe => process::exit(0),\n                    _ => eprintln!(\"{}\", error),\n                }\n            }\n        }\n    }\n\n    Ok(())\n}\n\n#[cfg(not(tarpaulin_include))]\nfn show_syntax_themes() -> std::io::Result<()> {\n    let mut opt = cli::Opt::from_args();\n    let assets = HighlightingAssets::new();\n    let mut output_type = OutputType::from_mode(\n        PagingMode::QuitIfOneScreen,\n        None,\n        &config::Config::from(cli::Opt::default()),\n    )\n    .unwrap();\n    let mut writer = output_type.handle().unwrap();\n    opt.computed.syntax_set = assets.syntax_set;\n\n    let stdin_data = if !atty::is(atty::Stream::Stdin) {\n        let mut buf = Vec::new();\n        io::stdin().lock().read_to_end(&mut buf)?;\n        if !buf.is_empty() {\n            Some(buf)\n        } else {\n            None\n        }\n    } else {\n        None\n    };\n\n    if !(opt.dark || opt.light) {\n        _show_syntax_themes(opt.clone(), false, &mut writer, stdin_data.as_ref())?;\n        _show_syntax_themes(opt, true, &mut writer, stdin_data.as_ref())?;\n    } else if opt.light {\n        _show_syntax_themes(opt, true, &mut writer, stdin_data.as_ref())?;\n    } else {\n        _show_syntax_themes(opt, false, &mut writer, stdin_data.as_ref())?\n    };\n    Ok(())\n}\n\nfn _show_syntax_themes(\n    mut opt: cli::Opt,\n    is_light_mode: bool,\n    writer: &mut dyn Write,\n    stdin: Option<&Vec<u8>>,\n) -> std::io::Result<()> {\n    use bytelines::ByteLines;\n    use std::io::BufReader;\n    let input = match stdin {\n        Some(stdin_data) => &stdin_data[..],\n        None => {\n            b\"\\\ndiff --git a/example.rs b/example.rs\nindex f38589a..0f1bb83 100644\n--- a/example.rs\n+++ b/example.rs\n@@ -1,5 +1,5 @@\n-// Output the square of a number.\n-fn print_square(num: f64) {\n-    let result = f64::powf(num, 2.0);\n-    println!(\\\"The square of {:.2} is {:.2}.\\\", num, result);\n+// Output the cube of a number.\n+fn print_cube(num: f64) {\n+    let result = f64::powf(num, 3.0);\n+    println!(\\\"The cube of {:.2} is {:.2}.\\\", num, result);\n\"\n        }\n    };\n\n    opt.computed.is_light_mode = is_light_mode;\n    let mut config = config::Config::from(opt);\n    let title_style = ansi_term::Style::new().bold();\n    let assets = HighlightingAssets::new();\n\n    for syntax_theme in assets\n        .theme_set\n        .themes\n        .iter()\n        .filter(|(t, _)| is_light_syntax_theme(t) == is_light_mode)\n        .map(|(t, _)| t)\n    {\n        writeln!(writer, \"\\n\\nTheme: {}\\n\", title_style.paint(syntax_theme))?;\n        config.syntax_theme = Some(assets.theme_set.themes[syntax_theme.as_str()].clone());\n        if let Err(error) = delta(ByteLines::new(BufReader::new(&input[0..])), writer, &config) {\n            match error.kind() {\n                ErrorKind::BrokenPipe => process::exit(0),\n                _ => eprintln!(\"{}\", error),\n            }\n        };\n    }\n    Ok(())\n}\n\n#[cfg(not(tarpaulin_include))]\npub fn list_syntax_themes() -> std::io::Result<()> {\n    let stdout = io::stdout();\n    let mut stdout = stdout.lock();\n    if atty::is(atty::Stream::Stdout) {\n        _list_syntax_themes_for_humans(&mut stdout)\n    } else {\n        _list_syntax_themes_for_machines(&mut stdout)\n    }\n}\n\npub fn _list_syntax_themes_for_humans(writer: &mut dyn Write) -> std::io::Result<()> {\n    let assets = HighlightingAssets::new();\n    let themes = &assets.theme_set.themes;\n\n    writeln!(writer, \"Light themes:\")?;\n    for (theme, _) in themes.iter().filter(|(t, _)| is_light_syntax_theme(*t)) {\n        writeln!(writer, \"    {}\", theme)?;\n    }\n    writeln!(writer, \"\\nDark themes:\")?;\n    for (theme, _) in themes.iter().filter(|(t, _)| !is_light_syntax_theme(*t)) {\n        writeln!(writer, \"    {}\", theme)?;\n    }\n    writeln!(\n        writer,\n        \"\\nUse delta --show-syntax-themes to demo the themes.\"\n    )?;\n    Ok(())\n}\n\npub fn _list_syntax_themes_for_machines(writer: &mut dyn Write) -> std::io::Result<()> {\n    let assets = HighlightingAssets::new();\n    let themes = &assets.theme_set.themes;\n    for (theme, _) in themes\n        .iter()\n        .sorted_by_key(|(t, _)| is_light_syntax_theme(*t))\n    {\n        writeln!(\n            writer,\n            \"{}\\t{}\",\n            if is_light_syntax_theme(theme) {\n                \"light\"\n            } else {\n                \"dark\"\n            },\n            theme\n        )?;\n    }\n    Ok(())\n}\n\n#[cfg(test)]\nmod main_tests {\n    use super::*;\n    use std::io::{Cursor, Seek, SeekFrom};\n\n    use crate::ansi;\n    use crate::tests::integration_test_utils;\n\n    #[test]\n    fn test_show_config() {\n        let config = integration_test_utils::make_config_from_args(&[]);\n        let mut writer = Cursor::new(vec![0; 1024]);\n        show_config(&config, &mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        let s = ansi::strip_ansi_codes(&s);\n        assert!(s.contains(\"    commit-style                  = raw\\n\"));\n        assert!(s.contains(r\"    word-diff-regex               = '\\w+'\"));\n    }\n\n    #[test]\n    #[ignore] // Not working (timing out) when run by tarpaulin, presumably due to stdin detection.\n    fn test_show_syntax_themes() {\n        let opt = integration_test_utils::make_options_from_args(&[]);\n\n        let mut writer = Cursor::new(vec![0; 1024]);\n        _show_syntax_themes(opt, true, &mut writer, None).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        let s = ansi::strip_ansi_codes(&s);\n        assert!(s.contains(\"\\nTheme: gruvbox-light\\n\"));\n        println!(\"{}\", s);\n        assert!(s.contains(\"\\nfn print_cube(num: f64) {\\n\"));\n    }\n\n    #[test]\n    fn test_list_syntax_themes_for_humans() {\n        let mut writer = Cursor::new(vec![0; 512]);\n        _list_syntax_themes_for_humans(&mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        assert!(s.contains(\"Light themes:\\n\"));\n        assert!(s.contains(\"    GitHub\\n\"));\n        assert!(s.contains(\"Dark themes:\\n\"));\n        assert!(s.contains(\"    Dracula\\n\"));\n    }\n\n    #[test]\n    fn test_list_syntax_themes_for_machines() {\n        let mut writer = Cursor::new(vec![0; 512]);\n        _list_syntax_themes_for_machines(&mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        assert!(s.contains(\"light\tGitHub\\n\"));\n        assert!(s.contains(\"dark\tDracula\\n\"));\n    }\n\n    #[test]\n    #[ignore] // https://github.com/dandavison/delta/pull/546\n    fn test_diff_same_empty_file() {\n        _do_diff_test(\"/dev/null\", \"/dev/null\", false);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_same_non_empty_file() {\n        _do_diff_test(\"/etc/passwd\", \"/etc/passwd\", false);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_empty_vs_non_empty_file() {\n        _do_diff_test(\"/dev/null\", \"/etc/passwd\", true);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_two_non_empty_files() {\n        _do_diff_test(\"/etc/group\", \"/etc/passwd\", true);\n    }\n\n    fn _do_diff_test(file_a: &str, file_b: &str, expect_diff: bool) {\n        let config = integration_test_utils::make_config_from_args(&[]);\n        let mut writer = Cursor::new(vec![]);\n        let exit_code = diff(\n            Some(&PathBuf::from(file_a)),\n            Some(&PathBuf::from(file_b)),\n            &config,\n            &mut writer,\n        );\n        assert_eq!(exit_code, if expect_diff { 1 } else { 0 });\n    }\n\n    fn _read_to_string(cursor: &mut Cursor<Vec<u8>>) -> String {\n        let mut s = String::new();\n        cursor.seek(SeekFrom::Start(0)).unwrap();\n        cursor.read_to_string(&mut s).unwrap();\n        s\n    }\n}\n"], "fixing_code": ["# This file is automatically @generated by Cargo.\n# It is not intended for manual editing.\nversion = 3\n\n[[package]]\nname = \"adler\"\nversion = \"0.2.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee2a4ec343196209d6594e19543ae87a39f96d5534d7174822a3ad825dd6ed7e\"\n\n[[package]]\nname = \"aho-corasick\"\nversion = \"0.7.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7404febffaa47dac81aa44dba71523c9d069b1bdc50a77db41195149e17f68e5\"\ndependencies = [\n \"memchr\",\n]\n\n[[package]]\nname = \"ansi_colours\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"60e2fb6138a49ad9f1cb3c6d8f8ccbdd5e62b4dab317c1b435a47ecd7da1d28f\"\ndependencies = [\n \"cc\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"ansi_term\"\nversion = \"0.12.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"arrayvec\"\nversion = \"0.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"23b62fc65de8e4e7f52534fb52b0f3ed04746ae267519eef2a83941e8085068b\"\n\n[[package]]\nname = \"atty\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\ndependencies = [\n \"hermit-abi\",\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"autocfg\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n\n[[package]]\nname = \"base64\"\nversion = \"0.13.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"904dfeac50f3cdaba28fc6f57fdcddb75f49ed61346676a78c4ffe55877802fd\"\n\n[[package]]\nname = \"bincode\"\nversion = \"1.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30d3a39baa26f9651f17b375061f3233dde33424a8b72b0dbe93a68a0bc896d\"\ndependencies = [\n \"byteorder\",\n \"serde\",\n]\n\n[[package]]\nname = \"bitflags\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n\n[[package]]\nname = \"box_drawing\"\nversion = \"0.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ea27d8d5fd867b17523bf6788b1175fa9867f34669d057e9adaf76e27bcea44b\"\n\n[[package]]\nname = \"bstr\"\nversion = \"0.2.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a40b47ad93e1a5404e6c18dec46b628214fee441c70f4ab5d6942142cc268a3d\"\ndependencies = [\n \"lazy_static\",\n \"memchr\",\n \"regex-automata\",\n]\n\n[[package]]\nname = \"bytelines\"\nversion = \"2.2.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"791e4e40d13e1463dee537b254225c12c46ec7328f1817c6264873bc166f615f\"\n\n[[package]]\nname = \"byteorder\"\nversion = \"1.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"08c48aae112d48ed9f069b33538ea9e3e90aa263cfa3d1c24309612b1f7472de\"\n\n[[package]]\nname = \"cc\"\nversion = \"1.0.66\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4c0496836a84f8d0495758516b8621a622beb77c0fed418570e50764093ced48\"\ndependencies = [\n \"jobserver\",\n]\n\n[[package]]\nname = \"cfg-if\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822\"\n\n[[package]]\nname = \"cfg-if\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n\n[[package]]\nname = \"chrono\"\nversion = \"0.4.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73\"\ndependencies = [\n \"num-integer\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"clap\"\nversion = \"2.33.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"37e58ac78573c40708d45522f0d80fa2f01cc4f9b4e2bf749807255454312002\"\ndependencies = [\n \"ansi_term 0.11.0\",\n \"atty\",\n \"bitflags\",\n \"strsim\",\n \"textwrap\",\n \"unicode-width\",\n \"vec_map\",\n]\n\n[[package]]\nname = \"console\"\nversion = \"0.14.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3993e6445baa160675931ec041a5e03ca84b9c6e32a056150d3aa2bdda0a1f45\"\ndependencies = [\n \"encode_unicode\",\n \"lazy_static\",\n \"libc\",\n \"regex\",\n \"terminal_size\",\n \"unicode-width\",\n \"winapi\",\n]\n\n[[package]]\nname = \"crc32fast\"\nversion = \"1.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"81156fece84ab6a9f2afdb109ce3ae577e42b1228441eded99bd77f627953b1a\"\ndependencies = [\n \"cfg-if 1.0.0\",\n]\n\n[[package]]\nname = \"dirs-next\"\nversion = \"2.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b98cf8ebf19c3d1b223e151f99a4f9f0690dca41414773390fc824184ac833e1\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"dirs-sys-next\",\n]\n\n[[package]]\nname = \"dirs-sys-next\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"99de365f605554ae33f115102a02057d4fc18b01f3284d6870be0938743cfe7d\"\ndependencies = [\n \"libc\",\n \"redox_users\",\n \"winapi\",\n]\n\n[[package]]\nname = \"either\"\nversion = \"1.6.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e78d4f1cc4ae33bbfc157ed5d5a5ef3bc29227303d595861deb238fcec4e9457\"\n\n[[package]]\nname = \"encode_unicode\"\nversion = \"0.3.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a357d28ed41a50f9c765dbfe56cbc04a64e53e5fc58ba79fbc34c10ef3df831f\"\n\n[[package]]\nname = \"error-chain\"\nversion = \"0.12.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2d2f06b9cac1506ece98fe3231e3cc9c4410ec3d5b1f24ae1c8946f0742cdefc\"\ndependencies = [\n \"version_check\",\n]\n\n[[package]]\nname = \"flate2\"\nversion = \"1.0.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7411863d55df97a419aa64cb4d2f167103ea9d767e2c54a1868b7ac3f6b47129\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"crc32fast\",\n \"libc\",\n \"miniz_oxide\",\n]\n\n[[package]]\nname = \"fnv\"\nversion = \"1.0.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3f9eec918d3f24069decb9af1554cad7c880e2da24a9afd88aca000531ab82c1\"\n\n[[package]]\nname = \"form_urlencoded\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ece68d15c92e84fa4f19d3780f1294e5ca82a78a6d515f1efaabcc144688be00\"\ndependencies = [\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"getrandom\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8fc3cb4d91f53b50155bdcfd23f6a4c39ae1969c2ae85982b135750cccaf5fce\"\ndependencies = [\n \"cfg-if 1.0.0\",\n \"libc\",\n \"wasi\",\n]\n\n[[package]]\nname = \"git-delta\"\nversion = \"0.8.3\"\ndependencies = [\n \"ansi_colours\",\n \"ansi_term 0.12.1\",\n \"atty\",\n \"bitflags\",\n \"box_drawing\",\n \"bytelines\",\n \"console\",\n \"dirs-next\",\n \"error-chain\",\n \"git2\",\n \"grep-cli\",\n \"itertools\",\n \"lazy_static\",\n \"pathdiff\",\n \"regex\",\n \"shell-words\",\n \"structopt\",\n \"syntect\",\n \"unicode-segmentation\",\n \"unicode-width\",\n \"vte\",\n \"xdg\",\n]\n\n[[package]]\nname = \"git2\"\nversion = \"0.13.20\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d9831e983241f8c5591ed53f17d874833e2fa82cac2625f3888c50cbfe136cba\"\ndependencies = [\n \"bitflags\",\n \"libc\",\n \"libgit2-sys\",\n \"log\",\n \"url\",\n]\n\n[[package]]\nname = \"globset\"\nversion = \"0.4.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"10463d9ff00a2a068db14231982f5132edebad0d7660cd956a1c30292dbcbfbd\"\ndependencies = [\n \"aho-corasick\",\n \"bstr\",\n \"fnv\",\n \"log\",\n \"regex\",\n]\n\n[[package]]\nname = \"grep-cli\"\nversion = \"0.1.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dd110c34bb4460d0de5062413b773e385cbf8a85a63fc535590110a09e79e8a\"\ndependencies = [\n \"atty\",\n \"bstr\",\n \"globset\",\n \"lazy_static\",\n \"log\",\n \"regex\",\n \"same-file\",\n \"termcolor\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"hashbrown\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e91b62f79061a0bc2e046024cb7ba44b08419ed238ecbd9adbd787434b9e8c25\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"heck\"\nversion = \"0.3.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"87cbf45460356b7deeb5e3415b5563308c0a9b057c85e12b06ad551f98d0a6ac\"\ndependencies = [\n \"unicode-segmentation\",\n]\n\n[[package]]\nname = \"hermit-abi\"\nversion = \"0.1.17\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5aca5565f760fb5b220e499d72710ed156fdb74e631659e99377d9ebfbd13ae8\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"idna\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"02e2673c30ee86b5b96a9cb52ad15718aa1f966f5ab9ad54a8b95d5ca33120a9\"\ndependencies = [\n \"matches\",\n \"unicode-bidi\",\n \"unicode-normalization\",\n]\n\n[[package]]\nname = \"indexmap\"\nversion = \"1.5.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4e47a3566dd4fd4eec714ae6ceabdee0caec795be835c223d92c2d40f1e8cf1c\"\ndependencies = [\n \"autocfg\",\n \"hashbrown\",\n]\n\n[[package]]\nname = \"itertools\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69ddb889f9d0d08a67338271fa9b62996bc788c7796a5c18cf057420aaed5eaf\"\ndependencies = [\n \"either\",\n]\n\n[[package]]\nname = \"itoa\"\nversion = \"0.4.7\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"dd25036021b0de88a0aff6b850051563c6516d0bf53f8638938edbb9de732736\"\n\n[[package]]\nname = \"jobserver\"\nversion = \"0.1.21\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c71313ebb9439f74b00d9d2dcec36440beaf57a6aa0623068441dd7cd81a7f2\"\ndependencies = [\n \"libc\",\n]\n\n[[package]]\nname = \"lazy_static\"\nversion = \"1.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n\n[[package]]\nname = \"lazycell\"\nversion = \"1.3.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"830d08ce1d1d941e6b30645f1a0eb5643013d835ce3779a5fc208261dbe10f55\"\n\n[[package]]\nname = \"libc\"\nversion = \"0.2.81\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1482821306169ec4d07f6aca392a4681f66c75c9918aa49641a2595db64053cb\"\n\n[[package]]\nname = \"libgit2-sys\"\nversion = \"0.12.21+1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"86271bacd72b2b9e854c3dcfb82efd538f15f870e4c11af66900effb462f6825\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"libz-sys\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"libz-sys\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"602113192b08db8f38796c4e85c39e960c145965140e918018bcde1952429655\"\ndependencies = [\n \"cc\",\n \"libc\",\n \"pkg-config\",\n \"vcpkg\",\n]\n\n[[package]]\nname = \"line-wrap\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f30344350a2a51da54c1d53be93fade8a237e545dbcc4bdbe635413f2117cab9\"\ndependencies = [\n \"safemem\",\n]\n\n[[package]]\nname = \"linked-hash-map\"\nversion = \"0.5.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8dd5a6d5999d9907cda8ed67bbd137d3af8085216c2ac62de5be860bd41f304a\"\n\n[[package]]\nname = \"log\"\nversion = \"0.4.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fabed175da42fed1fa0746b0ea71f412aa9d35e76e95e59b192c64b9dc2bf8b\"\ndependencies = [\n \"cfg-if 0.1.10\",\n]\n\n[[package]]\nname = \"matches\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n\n[[package]]\nname = \"memchr\"\nversion = \"2.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0ee1c47aaa256ecabcaea351eae4a9b01ef39ed810004e298d2511ed284b1525\"\n\n[[package]]\nname = \"miniz_oxide\"\nversion = \"0.4.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"0f2d26ec3309788e423cfbf68ad1800f061638098d76a83681af979dc4eda19d\"\ndependencies = [\n \"adler\",\n \"autocfg\",\n]\n\n[[package]]\nname = \"num-integer\"\nversion = \"0.1.44\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\ndependencies = [\n \"autocfg\",\n \"num-traits\",\n]\n\n[[package]]\nname = \"num-traits\"\nversion = \"0.2.14\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\ndependencies = [\n \"autocfg\",\n]\n\n[[package]]\nname = \"onig\"\nversion = \"6.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"30b46fd9edbc018f0be4e366c24c46db44fac49cd01c039ae85308088b089dd5\"\ndependencies = [\n \"bitflags\",\n \"lazy_static\",\n \"libc\",\n \"onig_sys\",\n]\n\n[[package]]\nname = \"onig_sys\"\nversion = \"69.6.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ed063c96cf4c0f2e5d09324409d158b38a0a85a7b90fbd68c8cad75c495d5775\"\ndependencies = [\n \"cc\",\n \"pkg-config\",\n]\n\n[[package]]\nname = \"pathdiff\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"877630b3de15c0b64cc52f659345724fbf6bdad9bd9566699fc53688f3c34a34\"\n\n[[package]]\nname = \"percent-encoding\"\nversion = \"2.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n\n[[package]]\nname = \"pkg-config\"\nversion = \"0.3.19\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"3831453b3449ceb48b6d9c7ad7c96d5ea673e9b470a1dc578c2ce6521230884c\"\n\n[[package]]\nname = \"plist\"\nversion = \"1.0.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4dc57ccf442c7414b790e8e7b72fb4d776a66c7680129360946d9aaa6f5311e9\"\ndependencies = [\n \"base64\",\n \"chrono\",\n \"indexmap\",\n \"line-wrap\",\n \"serde\",\n \"xml-rs\",\n]\n\n[[package]]\nname = \"proc-macro-error\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\ndependencies = [\n \"proc-macro-error-attr\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro-error-attr\"\nversion = \"1.0.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"version_check\",\n]\n\n[[package]]\nname = \"proc-macro2\"\nversion = \"1.0.24\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"1e0704ee1a7e00d7bb417d0770ea303c1bccbabf0ef1667dae92b5967f5f8a71\"\ndependencies = [\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"quote\"\nversion = \"1.0.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"991431c3519a3f36861882da93630ce66b52918dcf1b8e2fd66b397fc96f28df\"\ndependencies = [\n \"proc-macro2\",\n]\n\n[[package]]\nname = \"redox_syscall\"\nversion = \"0.1.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"41cc0f7e4d5d4544e8861606a285bb08d3e70712ccc7d2b84d7c0ccfaf4b05ce\"\n\n[[package]]\nname = \"redox_users\"\nversion = \"0.3.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"de0737333e7a9502c789a36d7c7fa6092a49895d4faa31ca5df163857ded2e9d\"\ndependencies = [\n \"getrandom\",\n \"redox_syscall\",\n]\n\n[[package]]\nname = \"regex\"\nversion = \"1.4.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2a26af418b574bd56588335b3a3659a65725d4e636eb1016c2f9e3b38c7cc759\"\ndependencies = [\n \"aho-corasick\",\n \"memchr\",\n \"regex-syntax\",\n]\n\n[[package]]\nname = \"regex-automata\"\nversion = \"0.1.10\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6c230d73fb8d8c1b9c0b3135c5142a8acee3a0558fb8db5cf1cb65f8d7862132\"\n\n[[package]]\nname = \"regex-syntax\"\nversion = \"0.6.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5eb417147ba9860a96cfe72a0b93bf88fee1744b5636ec99ab20c1aa9376581\"\n\n[[package]]\nname = \"ryu\"\nversion = \"1.0.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"71d301d4193d031abdd79ff7e3dd721168a9572ef3fe51a1517aba235bd8f86e\"\n\n[[package]]\nname = \"safemem\"\nversion = \"0.3.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ef703b7cb59335eae2eb93ceb664c0eb7ea6bf567079d843e09420219668e072\"\n\n[[package]]\nname = \"same-file\"\nversion = \"1.0.6\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"93fc1dc3aaa9bfed95e02e6eadabb4baf7e3078b0bd1b4d7b6b0b68378900502\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"serde\"\nversion = \"1.0.118\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"06c64263859d87aa2eb554587e2d23183398d617427327cf2b3d0ed8c69e4800\"\n\n[[package]]\nname = \"serde_derive\"\nversion = \"1.0.118\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"c84d3526699cd55261af4b941e4e725444df67aa4f9e6a3564f18030d12672df\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"serde_json\"\nversion = \"1.0.61\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4fceb2595057b6891a4ee808f70054bd2d12f0e97f1cbb78689b59f676df325a\"\ndependencies = [\n \"itoa\",\n \"ryu\",\n \"serde\",\n]\n\n[[package]]\nname = \"shell-words\"\nversion = \"1.0.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b6fa3938c99da4914afedd13bf3d79bcb6c277d1b2c398d23257a304d9e1b074\"\n\n[[package]]\nname = \"strsim\"\nversion = \"0.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n\n[[package]]\nname = \"structopt\"\nversion = \"0.3.22\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"69b041cdcb67226aca307e6e7be44c8806423d83e018bd662360a93dabce4d71\"\ndependencies = [\n \"clap\",\n \"lazy_static\",\n \"structopt-derive\",\n]\n\n[[package]]\nname = \"structopt-derive\"\nversion = \"0.4.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"7813934aecf5f51a54775e00068c237de98489463968231a51746bbbc03f9c10\"\ndependencies = [\n \"heck\",\n \"proc-macro-error\",\n \"proc-macro2\",\n \"quote\",\n \"syn\",\n]\n\n[[package]]\nname = \"syn\"\nversion = \"1.0.57\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4211ce9909eb971f111059df92c45640aad50a619cf55cd76476be803c4c68e6\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n \"unicode-xid\",\n]\n\n[[package]]\nname = \"syntect\"\nversion = \"4.5.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2bfac2b23b4d049dc9a89353b4e06bbc85a8f42020cccbe5409a115cf19031e5\"\ndependencies = [\n \"bincode\",\n \"bitflags\",\n \"flate2\",\n \"fnv\",\n \"lazy_static\",\n \"lazycell\",\n \"onig\",\n \"plist\",\n \"regex-syntax\",\n \"serde\",\n \"serde_derive\",\n \"serde_json\",\n \"walkdir\",\n \"yaml-rust\",\n]\n\n[[package]]\nname = \"termcolor\"\nversion = \"1.1.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\ndependencies = [\n \"winapi-util\",\n]\n\n[[package]]\nname = \"terminal_size\"\nversion = \"0.1.15\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"4bd2d183bd3fac5f5fe38ddbeb4dc9aec4a39a9d7d59e7491d900302da01cbe1\"\ndependencies = [\n \"libc\",\n \"winapi\",\n]\n\n[[package]]\nname = \"textwrap\"\nversion = \"0.11.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\ndependencies = [\n \"unicode-width\",\n]\n\n[[package]]\nname = \"tinyvec\"\nversion = \"1.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ccf8dbc19eb42fba10e8feaaec282fb50e2c14b2726d6301dbfeed0f73306a6f\"\ndependencies = [\n \"tinyvec_macros\",\n]\n\n[[package]]\nname = \"tinyvec_macros\"\nversion = \"0.1.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n\n[[package]]\nname = \"unicode-bidi\"\nversion = \"0.3.4\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\ndependencies = [\n \"matches\",\n]\n\n[[package]]\nname = \"unicode-normalization\"\nversion = \"0.1.16\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"a13e63ab62dbe32aeee58d1c5408d35c36c392bba5d9d3142287219721afe606\"\ndependencies = [\n \"tinyvec\",\n]\n\n[[package]]\nname = \"unicode-segmentation\"\nversion = \"1.8.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"8895849a949e7845e06bd6dc1aa51731a103c42707010a5b591c0038fb73385b\"\n\n[[package]]\nname = \"unicode-width\"\nversion = \"0.1.8\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"9337591893a19b88d8d87f2cec1e73fad5cdfd10e5a6f349f498ad6ea2ffb1e3\"\n\n[[package]]\nname = \"unicode-xid\"\nversion = \"0.2.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f7fe0bb3479651439c9112f72b6c505038574c9fbb575ed1bf3b797fa39dd564\"\n\n[[package]]\nname = \"url\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5909f2b0817350449ed73e8bcd81c8c3c8d9a7a5d8acba4b27db277f1868976e\"\ndependencies = [\n \"form_urlencoded\",\n \"idna\",\n \"matches\",\n \"percent-encoding\",\n]\n\n[[package]]\nname = \"utf8parse\"\nversion = \"0.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"936e4b492acfd135421d8dca4b1aa80a7bfc26e702ef3af710e0752684df5372\"\n\n[[package]]\nname = \"vcpkg\"\nversion = \"0.2.11\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b00bca6106a5e23f3eee943593759b7fcddb00554332e856d990c893966879fb\"\n\n[[package]]\nname = \"vec_map\"\nversion = \"0.8.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"f1bddf1187be692e79c5ffeab891132dfb0f236ed36a43c7ed39f1165ee20191\"\n\n[[package]]\nname = \"version_check\"\nversion = \"0.9.2\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed\"\n\n[[package]]\nname = \"vte\"\nversion = \"0.10.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"6cbce692ab4ca2f1f3047fcf732430249c0e971bfdd2b234cf2c47ad93af5983\"\ndependencies = [\n \"arrayvec\",\n \"utf8parse\",\n \"vte_generate_state_changes\",\n]\n\n[[package]]\nname = \"vte_generate_state_changes\"\nversion = \"0.1.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d257817081c7dffcdbab24b9e62d2def62e2ff7d00b1c20062551e6cccc145ff\"\ndependencies = [\n \"proc-macro2\",\n \"quote\",\n]\n\n[[package]]\nname = \"walkdir\"\nversion = \"2.3.1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"777182bc735b6424e1a57516d35ed72cb8019d85c8c9bf536dccb3445c1a2f7d\"\ndependencies = [\n \"same-file\",\n \"winapi\",\n \"winapi-util\",\n]\n\n[[package]]\nname = \"wasi\"\nversion = \"0.9.0+wasi-snapshot-preview1\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"cccddf32554fecc6acb585f82a32a72e28b48f8c4c1883ddfeeeaa96f7d8e519\"\n\n[[package]]\nname = \"winapi\"\nversion = \"0.3.9\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\ndependencies = [\n \"winapi-i686-pc-windows-gnu\",\n \"winapi-x86_64-pc-windows-gnu\",\n]\n\n[[package]]\nname = \"winapi-i686-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n\n[[package]]\nname = \"winapi-util\"\nversion = \"0.1.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178\"\ndependencies = [\n \"winapi\",\n]\n\n[[package]]\nname = \"winapi-x86_64-pc-windows-gnu\"\nversion = \"0.4.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n\n[[package]]\nname = \"xdg\"\nversion = \"2.2.0\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"d089681aa106a86fade1b0128fb5daf07d5867a509ab036d99988dec80429a57\"\n\n[[package]]\nname = \"xml-rs\"\nversion = \"0.8.3\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"b07db065a5cf61a7e4ba64f29e67db906fb1787316516c4e6e5ff0fea1efcd8a\"\n\n[[package]]\nname = \"yaml-rust\"\nversion = \"0.4.5\"\nsource = \"registry+https://github.com/rust-lang/crates.io-index\"\nchecksum = \"56c1936c4cc7a1c9ab21a1ebb602eb942ba868cbd44a99cb7cdc5892335e1c85\"\ndependencies = [\n \"linked-hash-map\",\n]\n", "[package]\nname = \"git-delta\"\nauthors = [\"Dan Davison <dandavison7@gmail.com>\"]\ncategories = [\"command-line-utilities\", \"development-tools\"]\ndescription = \"A syntax-highlighting pager for git\"\ndocumentation = \"https://github.com/dandavison/delta\"\nedition = \"2018\"\nhomepage = \"https://github.com/dandavison/delta\"\nlicense = \"MIT\"\nrepository = \"https://github.com/dandavison/delta\"\nversion = \"0.8.3\"\n\n[[bin]]\nname = \"delta\"\npath = \"src/main.rs\"\n\n[dependencies]\nansi_colours = \"1.0.4\"\nansi_term = \"0.12.1\"\natty = \"0.2.14\"\nbitflags = \"1.2.1\"\nbox_drawing = \"0.1.2\"\nbytelines = \"2.2.2\"\nconsole = \"0.14.1\"\ndirs-next = \"2.0.0\"\ngrep-cli = \"0.1.6\"\nitertools = \"0.10.1\"\nlazy_static = \"1.4\"\npathdiff = \"0.2.0\"\nregex = \"1.4.6\"\nshell-words = \"1.0.0\"\nstructopt = \"0.3.22\"\nunicode-segmentation = \"1.8.0\"\nunicode-width = \"0.1.8\"\nvte = \"0.10.1\"\nxdg = \"2.2.0\"\n\n[dependencies.git2]\nversion = \"0.13.20\"\ndefault-features = false\nfeatures = []\n\n[dependencies.syntect]\nversion = \"4.5.0\"\ndefault-features = false\nfeatures = [\"parsing\", \"assets\", \"yaml-load\", \"dump-load\", \"regex-onig\"]\n\n[dependencies.error-chain]\nversion = \"0.12.4\"\ndefault-features = false\nfeatures = []\n", "use std::process::Command;\n\npub fn retrieve_less_version() -> Option<usize> {\n    if let Ok(less_path) = grep_cli::resolve_binary(\"less\") {\n        let cmd = Command::new(less_path).arg(\"--version\").output().ok()?;\n        parse_less_version(&cmd.stdout)\n    } else {\n        None\n    }\n}\n\nfn parse_less_version(output: &[u8]) -> Option<usize> {\n    if output.starts_with(b\"less \") {\n        let version = std::str::from_utf8(&output[5..]).ok()?;\n        let end = version.find(|c: char| !c.is_ascii_digit())?;\n        version[..end].parse::<usize>().ok()\n    } else {\n        None\n    }\n}\n\n#[test]\nfn test_parse_less_version_487() {\n    let output = b\"less 487 (GNU regular expressions)\nCopyright (C) 1984-2016  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHomepage: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(487), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_529() {\n    let output = b\"less 529 (Spencer V8 regular expressions)\nCopyright (C) 1984-2017  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHomepage: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(529), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_551() {\n    let output = b\"less 551 (PCRE regular expressions)\nCopyright (C) 1984-2019  Mark Nudelman\n\nless comes with NO WARRANTY, to the extent permitted by law.\nFor information about the terms of redistribution,\nsee the file named README in the less distribution.\nHome page: http://www.greenwoodsoftware.com/less\";\n\n    assert_eq!(Some(551), parse_less_version(output));\n}\n\n#[test]\nfn test_parse_less_version_wrong_program() {\n    let output = b\"more from util-linux 2.34\";\n\n    assert_eq!(None, parse_less_version(output));\n}\n", "// https://github.com/sharkdp/bat a1b9334a44a2c652f52dddaa83dbacba57372468\n// src/output.rs\n// See src/bat_utils/LICENSE\nuse std::env;\nuse std::ffi::OsString;\nuse std::io::{self, Write};\nuse std::path::PathBuf;\nuse std::process::{Child, Command, Stdio};\n\nuse super::less::retrieve_less_version;\n\nuse crate::config;\nuse crate::features::navigate;\n\n#[derive(Debug, Clone, Copy, PartialEq)]\n#[allow(dead_code)]\npub enum PagingMode {\n    Always,\n    QuitIfOneScreen,\n    Never,\n}\nuse crate::errors::*;\n\npub enum OutputType {\n    Pager(Child),\n    Stdout(io::Stdout),\n}\n\nimpl OutputType {\n    pub fn from_mode(\n        mode: PagingMode,\n        pager: Option<String>,\n        config: &config::Config,\n    ) -> Result<Self> {\n        use self::PagingMode::*;\n        Ok(match mode {\n            Always => OutputType::try_pager(false, pager, config)?,\n            QuitIfOneScreen => OutputType::try_pager(true, pager, config)?,\n            _ => OutputType::stdout(),\n        })\n    }\n\n    /// Try to launch the pager. Fall back to stdout in case of errors.\n    fn try_pager(\n        quit_if_one_screen: bool,\n        pager_from_config: Option<String>,\n        config: &config::Config,\n    ) -> Result<Self> {\n        let mut replace_arguments_to_less = false;\n\n        let pager_from_env = match (\n            env::var(\"DELTA_PAGER\"),\n            env::var(\"BAT_PAGER\"),\n            env::var(\"PAGER\"),\n        ) {\n            (Ok(delta_pager), _, _) => Some(delta_pager),\n            (_, Ok(bat_pager), _) => Some(bat_pager),\n            (_, _, Ok(pager)) => {\n                // less needs to be called with the '-R' option in order to properly interpret ANSI\n                // color sequences. If someone has set PAGER=\"less -F\", we therefore need to\n                // overwrite the arguments and add '-R'.\n                // We only do this for PAGER, since it is used in other contexts.\n                replace_arguments_to_less = true;\n                Some(pager)\n            }\n            _ => None,\n        };\n\n        if pager_from_config.is_some() {\n            replace_arguments_to_less = false;\n        }\n\n        let pager = pager_from_config\n            .or(pager_from_env)\n            .unwrap_or_else(|| String::from(\"less\"));\n\n        let pagerflags =\n            shell_words::split(&pager).chain_err(|| \"Could not parse pager command.\")?;\n\n        Ok(match pagerflags.split_first() {\n            Some((pager_name, args)) => {\n                let pager_path = PathBuf::from(pager_name);\n\n                let is_less = pager_path.file_stem() == Some(&OsString::from(\"less\"));\n\n                let process = if is_less {\n                    _make_process_from_less_path(\n                        pager_path,\n                        args,\n                        replace_arguments_to_less,\n                        quit_if_one_screen,\n                        config,\n                    )\n                } else {\n                    _make_process_from_pager_path(pager_path, args)\n                };\n                if let Some(mut process) = process {\n                    process\n                        .stdin(Stdio::piped())\n                        .spawn()\n                        .map(OutputType::Pager)\n                        .unwrap_or_else(|_| OutputType::stdout())\n                } else {\n                    OutputType::stdout()\n                }\n            }\n            None => OutputType::stdout(),\n        })\n    }\n\n    fn stdout() -> Self {\n        OutputType::Stdout(io::stdout())\n    }\n\n    pub fn handle(&mut self) -> Result<&mut dyn Write> {\n        Ok(match *self {\n            OutputType::Pager(ref mut command) => command\n                .stdin\n                .as_mut()\n                .chain_err(|| \"Could not open stdin for pager\")?,\n            OutputType::Stdout(ref mut handle) => handle,\n        })\n    }\n}\n\nfn _make_process_from_less_path(\n    less_path: PathBuf,\n    args: &[String],\n    replace_arguments_to_less: bool,\n    quit_if_one_screen: bool,\n    config: &config::Config,\n) -> Option<Command> {\n    if let Ok(less_path) = grep_cli::resolve_binary(less_path) {\n        let mut p = Command::new(&less_path);\n        if args.is_empty() || replace_arguments_to_less {\n            p.args(vec![\"--RAW-CONTROL-CHARS\"]);\n\n            // Passing '--no-init' fixes a bug with '--quit-if-one-screen' in older\n            // versions of 'less'. Unfortunately, it also breaks mouse-wheel support.\n            //\n            // See: http://www.greenwoodsoftware.com/less/news.530.html\n            //\n            // For newer versions (530 or 558 on Windows), we omit '--no-init' as it\n            // is not needed anymore.\n            match retrieve_less_version() {\n                None => {\n                    p.arg(\"--no-init\");\n                }\n                Some(version) if (version < 530 || (cfg!(windows) && version < 558)) => {\n                    p.arg(\"--no-init\");\n                }\n                _ => {}\n            }\n\n            if quit_if_one_screen {\n                p.arg(\"--quit-if-one-screen\");\n            }\n        } else {\n            p.args(args);\n        }\n        p.env(\"LESSCHARSET\", \"UTF-8\");\n        p.env(\"LESSANSIENDCHARS\", \"mK\");\n        if config.navigate {\n            if let Ok(hist_file) = navigate::copy_less_hist_file_and_append_navigate_regexp(config)\n            {\n                p.env(\"LESSHISTFILE\", hist_file);\n                if config.show_themes {\n                    p.arg(\"+n\");\n                }\n            }\n        }\n        Some(p)\n    } else {\n        None\n    }\n}\n\nfn _make_process_from_pager_path(pager_path: PathBuf, args: &[String]) -> Option<Command> {\n    if pager_path.file_stem() == Some(&OsString::from(\"delta\")) {\n        eprintln!(\n            \"\\\nIt looks like you have set delta as the value of $PAGER. \\\nThis would result in a non-terminating recursion. \\\ndelta is not an appropriate value for $PAGER \\\n(but it is an appropriate value for $GIT_PAGER).\"\n        );\n        std::process::exit(1);\n    }\n    if let Ok(pager_path) = grep_cli::resolve_binary(pager_path) {\n        let mut p = Command::new(&pager_path);\n        p.args(args);\n        Some(p)\n    } else {\n        None\n    }\n}\n\nimpl Drop for OutputType {\n    fn drop(&mut self) {\n        if let OutputType::Pager(ref mut command) = *self {\n            let _ = command.wait();\n        }\n    }\n}\n", "extern crate bitflags;\n\n#[macro_use]\nextern crate error_chain;\n\nmod align;\nmod ansi;\n#[cfg(not(tarpaulin_include))]\nmod bat_utils;\nmod cli;\nmod color;\nmod config;\nmod delta;\nmod draw;\nmod edits;\nmod env;\nmod features;\nmod format;\nmod git_config;\nmod hunk_header;\nmod options;\nmod paint;\nmod parse;\nmod parse_style;\nmod sample_diff;\nmod style;\nmod syntect_color;\nmod tests;\n\nuse std::io::{self, ErrorKind, Read, Write};\nuse std::path::PathBuf;\nuse std::process;\n\nuse bytelines::ByteLinesReader;\nuse itertools::Itertools;\nuse structopt::StructOpt;\n\nuse crate::bat_utils::assets::{list_languages, HighlightingAssets};\nuse crate::bat_utils::output::{OutputType, PagingMode};\nuse crate::config::delta_unreachable;\nuse crate::delta::delta;\nuse crate::options::get::get_themes;\nuse crate::options::theme::is_light_syntax_theme;\n\npub mod errors {\n    error_chain! {\n        foreign_links {\n            Io(::std::io::Error);\n            SyntectError(::syntect::LoadingError);\n            ParseIntError(::std::num::ParseIntError);\n        }\n    }\n}\n\n#[cfg(not(tarpaulin_include))]\n/// `Ok` of the `Result` contains with the exit code value\nfn run_app() -> std::io::Result<i32> {\n    let assets = HighlightingAssets::new();\n    let opt = cli::Opt::from_args_and_git_config(&mut git_config::GitConfig::try_create(), assets);\n\n    if opt.list_languages {\n        list_languages()?;\n        return Ok(0);\n    } else if opt.list_syntax_themes {\n        list_syntax_themes()?;\n        return Ok(0);\n    } else if opt.show_syntax_themes {\n        show_syntax_themes()?;\n        return Ok(0);\n    } else if opt.show_themes {\n        show_themes(opt.dark, opt.light, opt.computed.is_light_mode)?;\n        return Ok(0);\n    }\n\n    let _show_config = opt.show_config;\n    let config = config::Config::from(opt);\n\n    if _show_config {\n        let stdout = io::stdout();\n        let mut stdout = stdout.lock();\n        show_config(&config, &mut stdout)?;\n        return Ok(0);\n    }\n\n    let mut output_type =\n        OutputType::from_mode(config.paging_mode, config.pager.clone(), &config).unwrap();\n    let mut writer = output_type.handle().unwrap();\n\n    if atty::is(atty::Stream::Stdin) {\n        let exit_code = diff(\n            config.minus_file.as_ref(),\n            config.plus_file.as_ref(),\n            &config,\n            &mut writer,\n        );\n        return Ok(exit_code);\n    }\n\n    if let Err(error) = delta(io::stdin().lock().byte_lines(), &mut writer, &config) {\n        match error.kind() {\n            ErrorKind::BrokenPipe => return Ok(0),\n            _ => eprintln!(\"{}\", error),\n        }\n    };\n    Ok(0)\n}\n\n#[cfg(not(tarpaulin_include))]\nfn main() -> std::io::Result<()> {\n    let exit_code = run_app()?;\n    // when you call process::exit, no destructors are called, so we want to do it only once, here\n    process::exit(exit_code);\n}\n\n/// Run `git diff` on the files provided on the command line and display the output.\nfn diff(\n    minus_file: Option<&PathBuf>,\n    plus_file: Option<&PathBuf>,\n    config: &config::Config,\n    writer: &mut dyn Write,\n) -> i32 {\n    use std::io::BufReader;\n    let die = || {\n        eprintln!(\n            \"\\\nThe main way to use delta is to configure it as the pager for git: \\\nsee https://github.com/dandavison/delta#configuration. \\\nYou can also use delta to diff two files: `delta file_A file_B`.\"\n        );\n        process::exit(config.error_exit_code);\n    };\n    let diff_command = \"git\";\n    let minus_file = minus_file.unwrap_or_else(die);\n    let plus_file = plus_file.unwrap_or_else(die);\n    let diff_command_path = match grep_cli::resolve_binary(PathBuf::from(diff_command)) {\n        Ok(path) => path,\n        Err(_) => return config.error_exit_code,\n    };\n    let mut diff_process = process::Command::new(diff_command_path)\n        .args(&[\"diff\", \"--no-index\"])\n        .args(&[minus_file, plus_file])\n        .stdout(process::Stdio::piped())\n        .spawn()\n        .unwrap_or_else(|err| {\n            eprintln!(\"Failed to execute the command '{}': {}\", diff_command, err);\n            process::exit(config.error_exit_code);\n        });\n\n    let exit_code = diff_process\n        .wait()\n        .unwrap_or_else(|_| {\n            delta_unreachable(&format!(\"'{}' process not running.\", diff_command));\n        })\n        .code()\n        .unwrap_or_else(|| {\n            eprintln!(\"'{}' process terminated without exit status.\", diff_command);\n            process::exit(config.error_exit_code);\n        });\n\n    if let Err(error) = delta(\n        BufReader::new(diff_process.stdout.unwrap()).byte_lines(),\n        writer,\n        &config,\n    ) {\n        match error.kind() {\n            ErrorKind::BrokenPipe => process::exit(0),\n            _ => {\n                eprintln!(\"{}\", error);\n                process::exit(config.error_exit_code);\n            }\n        }\n    };\n    exit_code\n}\n\nfn show_config(config: &config::Config, writer: &mut dyn Write) -> std::io::Result<()> {\n    // styles first\n    writeln!(\n        writer,\n        \"    commit-style                  = {commit_style}\n    file-style                    = {file_style}\n    hunk-header-style             = {hunk_header_style}\n    minus-style                   = {minus_style}\n    minus-non-emph-style          = {minus_non_emph_style}\n    minus-emph-style              = {minus_emph_style}\n    minus-empty-line-marker-style = {minus_empty_line_marker_style}\n    zero-style                    = {zero_style}\n    plus-style                    = {plus_style}\n    plus-non-emph-style           = {plus_non_emph_style}\n    plus-emph-style               = {plus_emph_style}\n    plus-empty-line-marker-style  = {plus_empty_line_marker_style}\n    whitespace-error-style        = {whitespace_error_style}\",\n        commit_style = config.commit_style.to_painted_string(),\n        file_style = config.file_style.to_painted_string(),\n        hunk_header_style = config.hunk_header_style.to_painted_string(),\n        minus_emph_style = config.minus_emph_style.to_painted_string(),\n        minus_empty_line_marker_style = config.minus_empty_line_marker_style.to_painted_string(),\n        minus_non_emph_style = config.minus_non_emph_style.to_painted_string(),\n        minus_style = config.minus_style.to_painted_string(),\n        plus_emph_style = config.plus_emph_style.to_painted_string(),\n        plus_empty_line_marker_style = config.plus_empty_line_marker_style.to_painted_string(),\n        plus_non_emph_style = config.plus_non_emph_style.to_painted_string(),\n        plus_style = config.plus_style.to_painted_string(),\n        whitespace_error_style = config.whitespace_error_style.to_painted_string(),\n        zero_style = config.zero_style.to_painted_string(),\n    )?;\n    // Everything else\n    writeln!(\n        writer,\n        \"    true-color                    = {true_color}\n    file-added-label              = {file_added_label}\n    file-modified-label           = {file_modified_label}\n    file-removed-label            = {file_removed_label}\n    file-renamed-label            = {file_renamed_label}\",\n        true_color = config.true_color,\n        file_added_label = format_option_value(&config.file_added_label),\n        file_modified_label = format_option_value(&config.file_modified_label),\n        file_removed_label = format_option_value(&config.file_removed_label),\n        file_renamed_label = format_option_value(&config.file_renamed_label),\n    )?;\n    writeln!(\n        writer,\n        \"    hyperlinks                    = {hyperlinks}\",\n        hyperlinks = config.hyperlinks\n    )?;\n    if config.hyperlinks {\n        writeln!(\n            writer,\n            \"    hyperlinks-file-link-format   = {hyperlinks_file_link_format}\",\n            hyperlinks_file_link_format = format_option_value(&config.hyperlinks_file_link_format),\n        )?\n    }\n    writeln!(\n        writer,\n        \"    inspect-raw-lines             = {inspect_raw_lines}\n    keep-plus-minus-markers       = {keep_plus_minus_markers}\",\n        inspect_raw_lines = match config.inspect_raw_lines {\n            cli::InspectRawLines::True => \"true\",\n            cli::InspectRawLines::False => \"false\",\n        },\n        keep_plus_minus_markers = config.keep_plus_minus_markers,\n    )?;\n    writeln!(\n        writer,\n        \"    line-numbers                  = {line_numbers}\",\n        line_numbers = config.line_numbers\n    )?;\n    if config.line_numbers {\n        writeln!(\n            writer,\n            \"    line-numbers-minus-style      = {line_numbers_minus_style}\n    line-numbers-zero-style       = {line_numbers_zero_style}\n    line-numbers-plus-style       = {line_numbers_plus_style}\n    line-numbers-left-style       = {line_numbers_left_style}\n    line-numbers-right-style      = {line_numbers_right_style}\n    line-numbers-left-format      = {line_numbers_left_format}\n    line-numbers-right-format     = {line_numbers_right_format}\",\n            line_numbers_minus_style = config.line_numbers_minus_style.to_painted_string(),\n            line_numbers_zero_style = config.line_numbers_zero_style.to_painted_string(),\n            line_numbers_plus_style = config.line_numbers_plus_style.to_painted_string(),\n            line_numbers_left_style = config.line_numbers_left_style.to_painted_string(),\n            line_numbers_right_style = config.line_numbers_right_style.to_painted_string(),\n            line_numbers_left_format = format_option_value(&config.line_numbers_left_format),\n            line_numbers_right_format = format_option_value(&config.line_numbers_right_format),\n        )?\n    }\n    writeln!(\n        writer,\n        \"    max-line-distance             = {max_line_distance}\n    max-line-length               = {max_line_length}\n    navigate                      = {navigate}\n    navigate-regexp               = {navigate_regexp}\n    pager                         = {pager}\n    paging                        = {paging_mode}\n    side-by-side                  = {side_by_side}\n    syntax-theme                  = {syntax_theme}\n    width                         = {width}\n    tabs                          = {tab_width}\n    word-diff-regex               = {tokenization_regex}\",\n        max_line_distance = config.max_line_distance,\n        max_line_length = config.max_line_length,\n        navigate = config.navigate,\n        navigate_regexp = match &config.navigate_regexp {\n            None => \"\".to_string(),\n            Some(s) => s.to_string(),\n        },\n        pager = config.pager.clone().unwrap_or_else(|| \"none\".to_string()),\n        paging_mode = match config.paging_mode {\n            PagingMode::Always => \"always\",\n            PagingMode::Never => \"never\",\n            PagingMode::QuitIfOneScreen => \"auto\",\n        },\n        side_by_side = config.side_by_side,\n        syntax_theme = config\n            .syntax_theme\n            .clone()\n            .map(|t| t.name.unwrap_or_else(|| \"none\".to_string()))\n            .unwrap_or_else(|| \"none\".to_string()),\n        width = match config.decorations_width {\n            cli::Width::Fixed(width) => width.to_string(),\n            cli::Width::Variable => \"variable\".to_string(),\n        },\n        tab_width = config.tab_width,\n        tokenization_regex = format_option_value(&config.tokenization_regex.to_string()),\n    )?;\n    Ok(())\n}\n\n// Heuristics determining whether to quote string option values when printing values intended for\n// git config.\nfn format_option_value<S>(s: S) -> String\nwhere\n    S: AsRef<str>,\n{\n    let s = s.as_ref();\n    if s.ends_with(' ')\n        || s.starts_with(' ')\n        || s.contains(&['\\\\', '{', '}', ':'][..])\n        || s.is_empty()\n    {\n        format!(\"'{}'\", s)\n    } else {\n        s.to_string()\n    }\n}\n\nfn show_themes(dark: bool, light: bool, computed_theme_is_light: bool) -> std::io::Result<()> {\n    use bytelines::ByteLines;\n    use sample_diff::DIFF;\n    use std::io::BufReader;\n    let mut input = DIFF.to_vec();\n\n    if !atty::is(atty::Stream::Stdin) {\n        let mut buf = Vec::new();\n        io::stdin().lock().read_to_end(&mut buf)?;\n        if !buf.is_empty() {\n            input = buf;\n        }\n    };\n\n    let mut git_config = git_config::GitConfig::try_create();\n    let opt = cli::Opt::from_iter_and_git_config(\n        &[\"\", \"\", \"--navigate\", \"--show-themes\"],\n        &mut git_config,\n    );\n    let mut output_type =\n        OutputType::from_mode(PagingMode::Always, None, &config::Config::from(opt)).unwrap();\n    let title_style = ansi_term::Style::new().bold();\n    let writer = output_type.handle().unwrap();\n\n    for theme in &get_themes(git_config::GitConfig::try_create()) {\n        let opt =\n            cli::Opt::from_iter_and_git_config(&[\"\", \"\", \"--features\", &theme], &mut git_config);\n        let is_dark_theme = opt.dark;\n        let is_light_theme = opt.light;\n        let config = config::Config::from(opt);\n\n        if (!computed_theme_is_light && is_dark_theme)\n            || (computed_theme_is_light && is_light_theme)\n            || (dark && light)\n        {\n            writeln!(writer, \"\\n\\nTheme: {}\\n\", title_style.paint(theme))?;\n\n            if let Err(error) = delta(ByteLines::new(BufReader::new(&input[0..])), writer, &config)\n            {\n                match error.kind() {\n                    ErrorKind::BrokenPipe => process::exit(0),\n                    _ => eprintln!(\"{}\", error),\n                }\n            }\n        }\n    }\n\n    Ok(())\n}\n\n#[cfg(not(tarpaulin_include))]\nfn show_syntax_themes() -> std::io::Result<()> {\n    let mut opt = cli::Opt::from_args();\n    let assets = HighlightingAssets::new();\n    let mut output_type = OutputType::from_mode(\n        PagingMode::QuitIfOneScreen,\n        None,\n        &config::Config::from(cli::Opt::default()),\n    )\n    .unwrap();\n    let mut writer = output_type.handle().unwrap();\n    opt.computed.syntax_set = assets.syntax_set;\n\n    let stdin_data = if !atty::is(atty::Stream::Stdin) {\n        let mut buf = Vec::new();\n        io::stdin().lock().read_to_end(&mut buf)?;\n        if !buf.is_empty() {\n            Some(buf)\n        } else {\n            None\n        }\n    } else {\n        None\n    };\n\n    if !(opt.dark || opt.light) {\n        _show_syntax_themes(opt.clone(), false, &mut writer, stdin_data.as_ref())?;\n        _show_syntax_themes(opt, true, &mut writer, stdin_data.as_ref())?;\n    } else if opt.light {\n        _show_syntax_themes(opt, true, &mut writer, stdin_data.as_ref())?;\n    } else {\n        _show_syntax_themes(opt, false, &mut writer, stdin_data.as_ref())?\n    };\n    Ok(())\n}\n\nfn _show_syntax_themes(\n    mut opt: cli::Opt,\n    is_light_mode: bool,\n    writer: &mut dyn Write,\n    stdin: Option<&Vec<u8>>,\n) -> std::io::Result<()> {\n    use bytelines::ByteLines;\n    use std::io::BufReader;\n    let input = match stdin {\n        Some(stdin_data) => &stdin_data[..],\n        None => {\n            b\"\\\ndiff --git a/example.rs b/example.rs\nindex f38589a..0f1bb83 100644\n--- a/example.rs\n+++ b/example.rs\n@@ -1,5 +1,5 @@\n-// Output the square of a number.\n-fn print_square(num: f64) {\n-    let result = f64::powf(num, 2.0);\n-    println!(\\\"The square of {:.2} is {:.2}.\\\", num, result);\n+// Output the cube of a number.\n+fn print_cube(num: f64) {\n+    let result = f64::powf(num, 3.0);\n+    println!(\\\"The cube of {:.2} is {:.2}.\\\", num, result);\n\"\n        }\n    };\n\n    opt.computed.is_light_mode = is_light_mode;\n    let mut config = config::Config::from(opt);\n    let title_style = ansi_term::Style::new().bold();\n    let assets = HighlightingAssets::new();\n\n    for syntax_theme in assets\n        .theme_set\n        .themes\n        .iter()\n        .filter(|(t, _)| is_light_syntax_theme(t) == is_light_mode)\n        .map(|(t, _)| t)\n    {\n        writeln!(writer, \"\\n\\nTheme: {}\\n\", title_style.paint(syntax_theme))?;\n        config.syntax_theme = Some(assets.theme_set.themes[syntax_theme.as_str()].clone());\n        if let Err(error) = delta(ByteLines::new(BufReader::new(&input[0..])), writer, &config) {\n            match error.kind() {\n                ErrorKind::BrokenPipe => process::exit(0),\n                _ => eprintln!(\"{}\", error),\n            }\n        };\n    }\n    Ok(())\n}\n\n#[cfg(not(tarpaulin_include))]\npub fn list_syntax_themes() -> std::io::Result<()> {\n    let stdout = io::stdout();\n    let mut stdout = stdout.lock();\n    if atty::is(atty::Stream::Stdout) {\n        _list_syntax_themes_for_humans(&mut stdout)\n    } else {\n        _list_syntax_themes_for_machines(&mut stdout)\n    }\n}\n\npub fn _list_syntax_themes_for_humans(writer: &mut dyn Write) -> std::io::Result<()> {\n    let assets = HighlightingAssets::new();\n    let themes = &assets.theme_set.themes;\n\n    writeln!(writer, \"Light themes:\")?;\n    for (theme, _) in themes.iter().filter(|(t, _)| is_light_syntax_theme(*t)) {\n        writeln!(writer, \"    {}\", theme)?;\n    }\n    writeln!(writer, \"\\nDark themes:\")?;\n    for (theme, _) in themes.iter().filter(|(t, _)| !is_light_syntax_theme(*t)) {\n        writeln!(writer, \"    {}\", theme)?;\n    }\n    writeln!(\n        writer,\n        \"\\nUse delta --show-syntax-themes to demo the themes.\"\n    )?;\n    Ok(())\n}\n\npub fn _list_syntax_themes_for_machines(writer: &mut dyn Write) -> std::io::Result<()> {\n    let assets = HighlightingAssets::new();\n    let themes = &assets.theme_set.themes;\n    for (theme, _) in themes\n        .iter()\n        .sorted_by_key(|(t, _)| is_light_syntax_theme(*t))\n    {\n        writeln!(\n            writer,\n            \"{}\\t{}\",\n            if is_light_syntax_theme(theme) {\n                \"light\"\n            } else {\n                \"dark\"\n            },\n            theme\n        )?;\n    }\n    Ok(())\n}\n\n#[cfg(test)]\nmod main_tests {\n    use super::*;\n    use std::io::{Cursor, Seek, SeekFrom};\n\n    use crate::ansi;\n    use crate::tests::integration_test_utils;\n\n    #[test]\n    fn test_show_config() {\n        let config = integration_test_utils::make_config_from_args(&[]);\n        let mut writer = Cursor::new(vec![0; 1024]);\n        show_config(&config, &mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        let s = ansi::strip_ansi_codes(&s);\n        assert!(s.contains(\"    commit-style                  = raw\\n\"));\n        assert!(s.contains(r\"    word-diff-regex               = '\\w+'\"));\n    }\n\n    #[test]\n    #[ignore] // Not working (timing out) when run by tarpaulin, presumably due to stdin detection.\n    fn test_show_syntax_themes() {\n        let opt = integration_test_utils::make_options_from_args(&[]);\n\n        let mut writer = Cursor::new(vec![0; 1024]);\n        _show_syntax_themes(opt, true, &mut writer, None).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        let s = ansi::strip_ansi_codes(&s);\n        assert!(s.contains(\"\\nTheme: gruvbox-light\\n\"));\n        println!(\"{}\", s);\n        assert!(s.contains(\"\\nfn print_cube(num: f64) {\\n\"));\n    }\n\n    #[test]\n    fn test_list_syntax_themes_for_humans() {\n        let mut writer = Cursor::new(vec![0; 512]);\n        _list_syntax_themes_for_humans(&mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        assert!(s.contains(\"Light themes:\\n\"));\n        assert!(s.contains(\"    GitHub\\n\"));\n        assert!(s.contains(\"Dark themes:\\n\"));\n        assert!(s.contains(\"    Dracula\\n\"));\n    }\n\n    #[test]\n    fn test_list_syntax_themes_for_machines() {\n        let mut writer = Cursor::new(vec![0; 512]);\n        _list_syntax_themes_for_machines(&mut writer).unwrap();\n        let mut s = String::new();\n        writer.seek(SeekFrom::Start(0)).unwrap();\n        writer.read_to_string(&mut s).unwrap();\n        assert!(s.contains(\"light\tGitHub\\n\"));\n        assert!(s.contains(\"dark\tDracula\\n\"));\n    }\n\n    #[test]\n    #[ignore] // https://github.com/dandavison/delta/pull/546\n    fn test_diff_same_empty_file() {\n        _do_diff_test(\"/dev/null\", \"/dev/null\", false);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_same_non_empty_file() {\n        _do_diff_test(\"/etc/passwd\", \"/etc/passwd\", false);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_empty_vs_non_empty_file() {\n        _do_diff_test(\"/dev/null\", \"/etc/passwd\", true);\n    }\n\n    #[test]\n    #[cfg_attr(target_os = \"windows\", ignore)]\n    fn test_diff_two_non_empty_files() {\n        _do_diff_test(\"/etc/group\", \"/etc/passwd\", true);\n    }\n\n    fn _do_diff_test(file_a: &str, file_b: &str, expect_diff: bool) {\n        let config = integration_test_utils::make_config_from_args(&[]);\n        let mut writer = Cursor::new(vec![]);\n        let exit_code = diff(\n            Some(&PathBuf::from(file_a)),\n            Some(&PathBuf::from(file_b)),\n            &config,\n            &mut writer,\n        );\n        assert_eq!(exit_code, if expect_diff { 1 } else { 0 });\n    }\n\n    fn _read_to_string(cursor: &mut Cursor<Vec<u8>>) -> String {\n        let mut s = String::new();\n        cursor.seek(SeekFrom::Start(0)).unwrap();\n        cursor.read_to_string(&mut s).unwrap();\n        s\n    }\n}\n"], "filenames": ["Cargo.lock", "Cargo.toml", "src/bat_utils/less.rs", "src/bat_utils/output.rs", "src/main.rs"], "buggy_code_start_loc": [96, 25, 4, 80, 135], "buggy_code_end_loc": [727, 25, 6, 168, 136], "fixing_code_start_loc": [97, 26, 4, 80, 135], "fixing_code_end_loc": [785, 27, 10, 198, 140], "type": "CWE-427", "message": "dandavison delta before 0.8.3 on Windows resolves an executable's pathname as a relative path from the current directory.", "other": {"cve": {"id": "CVE-2021-36376", "sourceIdentifier": "cve@mitre.org", "published": "2021-07-13T13:15:09.283", "lastModified": "2021-07-16T19:20:37.667", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "dandavison delta before 0.8.3 on Windows resolves an executable's pathname as a relative path from the current directory."}, {"lang": "es", "value": "dandavison delta versiones anteriores a 0.8.3 en Windows, resuelve el nombre de la ruta de un ejecutable como una ruta relativa desde el directorio actual"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.4}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.4, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-427"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:delta_project:delta:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.8.3", "matchCriteriaId": "585EBDB4-9C07-463B-9942-9E2582011C24"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*", "matchCriteriaId": "A2572D17-1DE6-457B-99CC-64AFD54487EA"}]}]}], "references": [{"url": "https://github.com/dandavison/delta/commit/f01846bd443aaf92fdd5ac20f461beac3f6ee3fd", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/dandavison/delta/releases/tag/0.8.3", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuln.ryotak.me/advisories/54", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dandavison/delta/commit/f01846bd443aaf92fdd5ac20f461beac3f6ee3fd"}}