{"buggy_code": ["<?php\n/*\n * ScratchSig extension for MediaWiki\n * Renders <scratchsig> tag with profile image from scratch.mit.edu\n *\n * Copyright 2013, Tim Radvan\n * MIT Licensed\n * http://opensource.org/licenses/MIT\n *\n */\n\nif (!defined('MEDIAWIKI')) {\n    die();\n}\n\n\n// Don't dump DOM errors onto page\n\nerror_reporting(0);\n\n\n// Hooks\n\n$wgExtensionFunctions[] = 'sigSetup';\n$wgHooks['ParserFirstCallInit'][] = 'sigParserInit';\n\n\n// Temporary cache of avatar image URLs\n\nglobal $sig_imageUrls;\n$sig_imageUrls = array();\n\n\n// Hook callback function into parser\n\nfunction sigParserInit (Parser $parser) {\n    // Register <scratchsig> tag\n    $parser->setHook('scratchsig', 'sigRenderTag');\n    return true;\n}\n\n\n// Fetch avatar thumbnail url for user from site api\n\nfunction sigFetchProfile ($username) {\n    // Fetch page\n    $data = file_get_contents(\"http://scratch.mit.edu/site-api/users/all/$username/\");\n    $json = json_decode($data, $assoc=true);\n    $pk = $json['user']['pk'];\n    $image_url = \"http://cdn.scratch.mit.edu/get_image/user/{$pk}_18x18.png\";\n    return $image_url;\n}\n\n\n// Return the url of the avatar's profile image\n// Fetches it if not cached in database\n\nfunction sigGetAvatarUrl ($username) {\n    global $sig_imageUrls;\n    if (!isset($sig_imageUrls[$username])) {\n        $sig_imageUrls[$username] = sigFetchProfile($username);\n    }\n    return $sig_imageUrls[$username];\n}\n\n\n// Called to output HTML for <scratchsig> tag\n\nfunction sigRenderTag ($input, array $args, Parser $parser, PPFrame $frame) {\n    $username = $input;\n\n    $img_url = sigGetAvatarUrl($username);\n\n    $o =  '<br>'\n        . '<span class=\"scratch-sig\">'\n        . '<a href=\"/wiki/User:'.$username.'\">'\n        . '<img src=\"' . $img_url . '\" width=\"18px\" height=\"18px\">'\n        . '</a>'\n        . ' '\n        . '<a href=\"/wiki/User:'.$username.'\">'\n        . '<b>'.$username.'</b>'\n        . '</a>'\n        . ' '\n        . '('\n        . '<a href=\"/wiki/User_Talk:'.$username.'\">talk</a>'\n        . ' | '\n        . '<a href=\"/wiki/Special:Contributions/'.$username.'\">contribs</a>'\n        . ')'\n        . '</span>';\n\n    return $o;\n}\n\n\n// Make wiki load resources\n\nfunction sigSetup () {\n    global $wgOut;\n    $wgOut->addModules('ext.scratchSig');\n}\n\n\n// Define resources\n\n$wgResourceModules['ext.scratchSig'] = array(\n    'styles' => 'scratchsig.css',\n\n    'localBasePath' => __DIR__,\n    'remoteExtPath' => 'mw-ScratchSig2'\n);\n\n"], "fixing_code": ["<?php\n/*\n * ScratchSig extension for MediaWiki\n * Renders <scratchsig> tag with profile image from scratch.mit.edu\n *\n * Copyright 2013, Tim Radvan\n * MIT Licensed\n * http://opensource.org/licenses/MIT\n *\n */\n\nif (!defined('MEDIAWIKI')) {\n    die();\n}\n\n\n// Don't dump DOM errors onto page\n\nerror_reporting(0);\n\n\n// Hooks\n\n$wgExtensionFunctions[] = 'sigSetup';\n$wgHooks['ParserFirstCallInit'][] = 'sigParserInit';\n\n\n// Temporary cache of avatar image URLs\n\nglobal $sig_imageUrls;\n$sig_imageUrls = array();\n\n\n// Hook callback function into parser\n\nfunction sigParserInit (Parser $parser) {\n    // Register <scratchsig> tag\n    $parser->setHook('scratchsig', 'sigRenderTag');\n    return true;\n}\n\n\n// Fetch avatar thumbnail url for user from site api\n\nfunction sigFetchProfile ($username) {\n    // Fetch page\n    $data = file_get_contents(\"http://scratch.mit.edu/site-api/users/all/$username/\");\n    $json = json_decode($data, $assoc=true);\n    $pk = $json['user']['pk'];\n    $image_url = \"http://cdn.scratch.mit.edu/get_image/user/{$pk}_18x18.png\";\n    return $image_url;\n}\n\n\n// Return the url of the avatar's profile image\n// Fetches it if not cached in database\n\nfunction sigGetAvatarUrl ($username) {\n    global $sig_imageUrls;\n    if (!isset($sig_imageUrls[$username])) {\n        $sig_imageUrls[$username] = sigFetchProfile($username);\n    }\n    return $sig_imageUrls[$username];\n}\n\n\n// Called to output HTML for <scratchsig> tag\n\nfunction sigRenderTag ($input, array $args, Parser $parser, PPFrame $frame) {\n    $username = htmlspecialchars($input);\n\n    $img_url = sigGetAvatarUrl($username);\n\n    $o =  '<br>'\n        . '<span class=\"scratch-sig\">'\n        . '<a href=\"/wiki/User:'.$username.'\">'\n        . '<img src=\"' . $img_url . '\" width=\"18px\" height=\"18px\">'\n        . '</a>'\n        . ' '\n        . '<a href=\"/wiki/User:'.$username.'\">'\n        . '<b>'.$username.'</b>'\n        . '</a>'\n        . ' '\n        . '('\n        . '<a href=\"/wiki/User_Talk:'.$username.'\">talk</a>'\n        . ' | '\n        . '<a href=\"/wiki/Special:Contributions/'.$username.'\">contribs</a>'\n        . ')'\n        . '</span>';\n\n    return $o;\n}\n\n\n// Make wiki load resources\n\nfunction sigSetup () {\n    global $wgOut;\n    $wgOut->addModules('ext.scratchSig');\n}\n\n\n// Define resources\n\n$wgResourceModules['ext.scratchSig'] = array(\n    'styles' => 'scratchsig.css',\n\n    'localBasePath' => __DIR__,\n    'remoteExtPath' => 'mw-ScratchSig2'\n);\n\n"], "filenames": ["ScratchSig2.php"], "buggy_code_start_loc": [70], "buggy_code_end_loc": [71], "fixing_code_start_loc": [70], "fixing_code_end_loc": [71], "type": "CWE-79", "message": "The ScratchSig extension for MediaWiki before version 1.0.1 allows stored Cross-Site Scripting. Using <script> tag inside <scratchsig> tag, attackers with edit permission can execute scripts on visitors' browser. With MediaWiki JavaScript API, this can potentially lead to privilege escalation and/or account takeover. This has been patched in release 1.0.1. This has already been deployed to all Scratch Wikis. No workarounds exist other than disabling the extension completely.", "other": {"cve": {"id": "CVE-2020-15179", "sourceIdentifier": "security-advisories@github.com", "published": "2020-09-15T18:15:14.000", "lastModified": "2020-09-22T17:05:27.850", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The ScratchSig extension for MediaWiki before version 1.0.1 allows stored Cross-Site Scripting. Using <script> tag inside <scratchsig> tag, attackers with edit permission can execute scripts on visitors' browser. With MediaWiki JavaScript API, this can potentially lead to privilege escalation and/or account takeover. This has been patched in release 1.0.1. This has already been deployed to all Scratch Wikis. No workarounds exist other than disabling the extension completely."}, {"lang": "es", "value": "La extensi\u00f3n ScratchSig para MediaWiki versiones anteriores a 1.0.1, permite un ataque de tipo Cross-Site Scripting almacenado.&#xa0;Usando la etiqueta (script) dentro de la etiqueta (scratchsig), los atacantes con permiso de edici\u00f3n pueden ejecutar scripts en el navegador de los visitantes.&#xa0;Con MediaWiki JavaScript API, esto puede conllevar potencialmente a una escalada de privilegios y/o la toma de control de la cuenta.&#xa0;Esto ha sido parcheado en la versi\u00f3n 1.0.1.&#xa0;Esto ya ha sido implementado en todas las Scratch Wikis.&#xa0;No existen soluciones alternativas que no sean deshabilitar la extensi\u00f3n por completo"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratch-wiki:scratchsig:*:*:*:*:*:mediawiki:*:*", "versionEndExcluding": "1.0.1", "matchCriteriaId": "B2D24ECE-BEF9-49F9-ABCD-61C5052BBCFE"}]}]}], "references": [{"url": "https://github.com/InternationalScratchWiki/wiki-scratchsig/commit/4160a39a20eebeb63a59eb7597a91b961eca6388", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/InternationalScratchWiki/wiki-scratchsig/security/advisories/GHSA-gp9v-pg9f-vmp6", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/InternationalScratchWiki/wiki-scratchsig/commit/4160a39a20eebeb63a59eb7597a91b961eca6388"}}