{"buggy_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\DependencyInjection;\n\nuse Pimcore\\Bundle\\AdminBundle\\Security\\ContentSecurityPolicyHandler;\nuse Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition;\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\n/**\n * Adds configuration for gdpr data provider\n *\n * @internal\n */\nfinal class Configuration implements ConfigurationInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function getConfigTreeBuilder(): TreeBuilder\n    {\n        $treeBuilder = new TreeBuilder('pimcore_admin');\n        /** @var ArrayNodeDefinition $rootNode */\n        $rootNode = $treeBuilder->getRootNode();\n\n        $rootNode->append($this->buildGdprDataExtractorNode());\n        $rootNode->append($this->buildObjectsNode());\n        $rootNode->append($this->buildAssetsNode());\n        $rootNode->append($this->buildDocumentsNode());\n\n        $rootNode->children()\n            ->arrayNode('admin_languages')\n                ->prototype('scalar')\n                ->end()\n            ->end()\n            ->arrayNode('csrf_protection')\n                ->addDefaultsIfNotSet()\n                ->children()\n                    ->arrayNode('excluded_routes')\n                        ->prototype('scalar')\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n            ->arrayNode('admin_csp_header')\n                ->canBeEnabled()\n                ->info('Can be used to enable or disable the Content Security Policy headers.')\n                ->children()\n                    ->arrayNode('additional_urls')\n                        ->addDefaultsIfNotSet()\n                        ->normalizeKeys(false)\n                        ->children()\n                            ->arrayNode(ContentSecurityPolicyHandler::DEFAULT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::IMG_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::SCRIPT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::STYLE_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::CONNECT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::FONT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::MEDIA_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::FRAME_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n            ->scalarNode('custom_admin_path_identifier')\n                ->defaultNull()\n                ->validate()\n                    ->ifTrue(function ($v) {\n                        return strlen($v) < 20;\n                    })\n                    ->thenInvalid('custom_admin_path_identifier must be at least 20 characters long')\n                ->end()\n            ->end()\n            ->arrayNode('branding')\n                ->addDefaultsIfNotSet()\n                ->children()\n                    ->booleanNode('login_screen_invert_colors')\n                        ->defaultFalse()\n                    ->end()\n                    ->scalarNode('color_login_screen')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('color_admin_interface')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('color_admin_interface_background')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('login_screen_custom_image')\n                        ->defaultNull()\n                    ->end()\n                ->end()\n            ->end()\n        ;\n\n        return $treeBuilder;\n    }\n\n    /**\n     * @return \\Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildGdprDataExtractorNode()\n    {\n        $treeBuilder = new TreeBuilder('gdpr_data_extractor');\n\n        $gdprDataExtractor = $treeBuilder->getRootNode();\n        $gdprDataExtractor->addDefaultsIfNotSet();\n\n        $dataObjects = $treeBuilder->getRootNode()->children()->arrayNode('dataObjects');\n        $dataObjects\n            ->addDefaultsIfNotSet()\n            ->info('Settings for DataObjects DataProvider');\n\n        $dataObjects\n            ->children()\n                ->arrayNode('classes')\n                    ->info('Configure which classes should be considered, array key is class name')\n                    ->prototype('array')\n                        ->info('\n    MY_CLASS_NAME:\n\t\tinclude: true\n\t\tallowDelete: false\n\t\tincludedRelations:\n\t\t\t- manualSegemens\n\t\t\t- calculatedSegments\n                        ')\n                        ->children()\n                            ->booleanNode('include')\n                                ->info('Set if class should be considered in export.')\n                                ->defaultTrue()\n                            ->end()\n                            ->booleanNode('allowDelete')\n                                ->info('Allow delete of objects directly in preview grid.')\n                                ->defaultFalse()\n                            ->end()\n                            ->arrayNode('includedRelations')\n                                ->info('List relation attributes that should be included recursively into export.')\n                                ->prototype('scalar')->end()\n                            ->end()\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n        ;\n\n        $gdprDataExtractor->append($dataObjects);\n\n        $assets = $treeBuilder->getRootNode()->children()->arrayNode('assets');\n\n        $assets\n            ->addDefaultsIfNotSet()\n            ->info('Settings for Assets DataProvider');\n\n        $assets\n            ->children()\n                ->arrayNode('types')\n                    ->info('Configure which types should be considered')\n                    ->prototype('array')\n                    ->info('asset types')\n                ->end()->defaultValue([])\n            ->end();\n\n        $gdprDataExtractor->append($assets);\n\n        return $gdprDataExtractor;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildEventsNode()\n    {\n        $treeBuilder = new TreeBuilder('notes_events');\n        $notesEvents = $treeBuilder->getRootNode();\n\n        $notesEvents\n            ->addDefaultsIfNotSet()\n            ->children()\n                ->arrayNode('types')\n                    ->info('List all notes/event types.')\n                    ->prototype('scalar')->end()\n                    ->defaultValue(['', 'content', 'seo', 'warning', 'notice'])\n                ->end()\n            ->end()\n        ;\n\n        return $notesEvents;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildObjectsNode()\n    {\n        $treeBuilder = new TreeBuilder('objects');\n        $objectsNode = $treeBuilder->getRootNode();\n\n        $objectsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $objectsNode;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildAssetsNode()\n    {\n        $treeBuilder = new TreeBuilder('assets');\n        $assetsNode = $treeBuilder->getRootNode();\n\n        $assetsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $assetsNode;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildDocumentsNode()\n    {\n        $treeBuilder = new TreeBuilder('documents');\n        $documentsNode = $treeBuilder->getRootNode();\n\n        $documentsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $documentsNode;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\EventListener;\n\nuse Pimcore\\Bundle\\AdminBundle\\Security\\ContentSecurityPolicyHandler;\nuse Pimcore\\Bundle\\CoreBundle\\EventListener\\Traits\\PimcoreContextAwareTrait;\nuse Pimcore\\Config;\nuse Pimcore\\Http\\Request\\Resolver\\PimcoreContextResolver;\nuse Pimcore\\Http\\RequestHelper;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\n/**\n * @internal\n */\nclass AdminSecurityListener implements EventSubscriberInterface\n{\n    use PimcoreContextAwareTrait;\n\n    /**\n     * @param ContentSecurityPolicyHandler $contentSecurityPolicyHandler\n     */\n    public function __construct(\n        protected RequestHelper $requestHelper,\n        protected ContentSecurityPolicyHandler $contentSecurityPolicyHandler,\n        protected Config $config\n    ) {\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            KernelEvents::RESPONSE => 'onKernelResponse',\n        ];\n    }\n\n    public function onKernelResponse(ResponseEvent $event)\n    {\n        if (!$this->config['admin_csp_header']['enabled']) {\n            return;\n        }\n\n        $request = $event->getRequest();\n\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        if (!$this->matchesPimcoreContext($request, PimcoreContextResolver::CONTEXT_ADMIN)) {\n            return;\n        }\n\n        if ($this->requestHelper->isFrontendRequestByAdmin($request)) {\n            return;\n        }\n\n        $response = $event->getResponse();\n\n        // set CSP header with random nonce string to the response\n        $response->headers->set('Content-Security-Policy', $this->contentSecurityPolicyHandler->getCspHeader());\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Security;\n\nuse Pimcore\\Config;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n/**\n * @internal\n */\nclass ContentSecurityPolicyHandler implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /** @var String|null */\n    private ?string $nonce = null;\n\n    public const DEFAULT_OPT = 'default-src';\n\n    public const IMG_OPT = 'img-src';\n\n    public const SCRIPT_OPT = 'script-src';\n\n    public const STYLE_OPT = 'style-src';\n\n    public const CONNECT_OPT = 'connect-src';\n\n    public const FONT_OPT = 'font-src';\n\n    public const MEDIA_OPT = 'media-src';\n\n    public const FRAME_OPT = 'frame-src';\n\n    /**\n     * @var array\n     */\n    private array $allowedUrls = [\n        self::CONNECT_OPT => [\n            'https://liveupdate.pimcore.org/', //AdminBundle statistics & update-check service\n            'https://nominatim.openstreetmap.org/', //CoreBundle geocoding_url_template\n\n        ],\n        self::SCRIPT_OPT => [\n            'http://unpkg.com/', // For the OPCache\n        ],\n    ];\n\n    public function __construct(protected Config $config, protected array $cspHeaderOptions = [])\n    {\n        $resolver = new OptionsResolver();\n        $this->configureOptions($resolver);\n\n        $this->cspHeaderOptions = $resolver->resolve($cspHeaderOptions);\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults([\n            self::DEFAULT_OPT => \"'self'\",\n            self::IMG_OPT => '* data: blob:',\n            self::MEDIA_OPT => \"'self' data:\",\n            self::SCRIPT_OPT => \"'self' 'nonce-\" . $this->getNonce() . \"' 'unsafe-inline' 'unsafe-eval'\",\n            self::STYLE_OPT => \"'self' 'unsafe-inline'\",\n            self::FRAME_OPT => \"'self'\",\n            self::CONNECT_OPT => \"'self' blob:\",\n            self::FONT_OPT => \"'self'\",\n        ]);\n    }\n\n    /**\n     * @return string\n     */\n    public function getCspHeader(): string\n    {\n        $cspHeaderOptions = array_map(function ($k, $v) {\n            return \"$k $v \" . $this->getAllowedUrls($k);\n        }, array_keys($this->cspHeaderOptions), array_values($this->cspHeaderOptions));\n\n        return implode(';', $cspHeaderOptions);\n    }\n\n    /**\n     * @param string $key\n     * @param bool $flatten\n     *\n     * @return array|string\n     */\n    private function getAllowedUrls(string $key, bool $flatten = true): array|string\n    {\n        if (!$flatten) {\n            return $this->allowedUrls[$key] ?? [];\n        }\n\n        return isset($this->allowedUrls[$key]) && is_array($this->allowedUrls[$key]) ? implode(' ', $this->allowedUrls[$key]) : '';\n    }\n\n    /**\n     * @param string $key\n     * @param array $value\n     *\n     * @return $this\n     */\n    public function addAllowedUrls(string $key, array $value): self\n    {\n        if (!isset($this->allowedUrls[$key])) {\n            $this->allowedUrls[$key] = [];\n        }\n\n        foreach ($value as $val) {\n            $this->allowedUrls[$key][] = $val;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @param string $value\n     *\n     * @return $this\n     */\n    public function setCspHeader(string $key, string $value): self\n    {\n        $this->cspHeaderOptions[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function getNonceHtmlAttribute(): string\n    {\n        return $this->config['admin_csp_header']['enabled'] ? ' nonce=\"' . $this->getNonce() . '\"' : '';\n    }\n\n    /**\n     * Generates a random nonce parameter.\n     *\n     * @return string\n     */\n    private function getNonce(): string\n    {\n        if (!$this->nonce) {\n            $this->nonce = generateRandomSymfonySecret();\n        }\n\n        return $this->nonce;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\DependencyInjection;\n\nuse Pimcore\\Bundle\\AdminBundle\\Security\\ContentSecurityPolicyHandler;\nuse Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition;\nuse Symfony\\Component\\Config\\Definition\\Builder\\TreeBuilder;\nuse Symfony\\Component\\Config\\Definition\\ConfigurationInterface;\n\n/**\n * Adds configuration for gdpr data provider\n *\n * @internal\n */\nfinal class Configuration implements ConfigurationInterface\n{\n    /**\n     * {@inheritdoc}\n     */\n    public function getConfigTreeBuilder(): TreeBuilder\n    {\n        $treeBuilder = new TreeBuilder('pimcore_admin');\n        /** @var ArrayNodeDefinition $rootNode */\n        $rootNode = $treeBuilder->getRootNode();\n\n        $rootNode->append($this->buildGdprDataExtractorNode());\n        $rootNode->append($this->buildObjectsNode());\n        $rootNode->append($this->buildAssetsNode());\n        $rootNode->append($this->buildDocumentsNode());\n\n        $rootNode->children()\n            ->arrayNode('admin_languages')\n                ->prototype('scalar')\n                ->end()\n            ->end()\n            ->arrayNode('csrf_protection')\n                ->addDefaultsIfNotSet()\n                ->children()\n                    ->arrayNode('excluded_routes')\n                        ->prototype('scalar')\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n            ->arrayNode('admin_csp_header')\n                ->canBeEnabled()\n                ->info('Can be used to enable or disable the Content Security Policy headers.')\n                ->children()\n                    ->arrayNode('exclude_paths')\n                        ->scalarPrototype()->end()\n                        ->info('Regular Expressions like: /^\\/path\\/toexclude/')\n                    ->end()\n                    ->arrayNode('additional_urls')\n                        ->addDefaultsIfNotSet()\n                        ->normalizeKeys(false)\n                        ->children()\n                            ->arrayNode(ContentSecurityPolicyHandler::DEFAULT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::IMG_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::SCRIPT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::STYLE_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::CONNECT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::FONT_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::MEDIA_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                            ->arrayNode(ContentSecurityPolicyHandler::FRAME_OPT)\n                                ->scalarPrototype()->end()\n                            ->end()\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n            ->scalarNode('custom_admin_path_identifier')\n                ->defaultNull()\n                ->validate()\n                    ->ifTrue(function ($v) {\n                        return strlen($v) < 20;\n                    })\n                    ->thenInvalid('custom_admin_path_identifier must be at least 20 characters long')\n                ->end()\n            ->end()\n            ->arrayNode('branding')\n                ->addDefaultsIfNotSet()\n                ->children()\n                    ->booleanNode('login_screen_invert_colors')\n                        ->defaultFalse()\n                    ->end()\n                    ->scalarNode('color_login_screen')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('color_admin_interface')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('color_admin_interface_background')\n                        ->defaultNull()\n                    ->end()\n                    ->scalarNode('login_screen_custom_image')\n                        ->defaultNull()\n                    ->end()\n                ->end()\n            ->end()\n        ;\n\n        return $treeBuilder;\n    }\n\n    /**\n     * @return \\Symfony\\Component\\Config\\Definition\\Builder\\ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildGdprDataExtractorNode()\n    {\n        $treeBuilder = new TreeBuilder('gdpr_data_extractor');\n\n        $gdprDataExtractor = $treeBuilder->getRootNode();\n        $gdprDataExtractor->addDefaultsIfNotSet();\n\n        $dataObjects = $treeBuilder->getRootNode()->children()->arrayNode('dataObjects');\n        $dataObjects\n            ->addDefaultsIfNotSet()\n            ->info('Settings for DataObjects DataProvider');\n\n        $dataObjects\n            ->children()\n                ->arrayNode('classes')\n                    ->info('Configure which classes should be considered, array key is class name')\n                    ->prototype('array')\n                        ->info('\n    MY_CLASS_NAME:\n\t\tinclude: true\n\t\tallowDelete: false\n\t\tincludedRelations:\n\t\t\t- manualSegemens\n\t\t\t- calculatedSegments\n                        ')\n                        ->children()\n                            ->booleanNode('include')\n                                ->info('Set if class should be considered in export.')\n                                ->defaultTrue()\n                            ->end()\n                            ->booleanNode('allowDelete')\n                                ->info('Allow delete of objects directly in preview grid.')\n                                ->defaultFalse()\n                            ->end()\n                            ->arrayNode('includedRelations')\n                                ->info('List relation attributes that should be included recursively into export.')\n                                ->prototype('scalar')->end()\n                            ->end()\n                        ->end()\n                    ->end()\n                ->end()\n            ->end()\n        ;\n\n        $gdprDataExtractor->append($dataObjects);\n\n        $assets = $treeBuilder->getRootNode()->children()->arrayNode('assets');\n\n        $assets\n            ->addDefaultsIfNotSet()\n            ->info('Settings for Assets DataProvider');\n\n        $assets\n            ->children()\n                ->arrayNode('types')\n                    ->info('Configure which types should be considered')\n                    ->prototype('array')\n                    ->info('asset types')\n                ->end()->defaultValue([])\n            ->end();\n\n        $gdprDataExtractor->append($assets);\n\n        return $gdprDataExtractor;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildEventsNode()\n    {\n        $treeBuilder = new TreeBuilder('notes_events');\n        $notesEvents = $treeBuilder->getRootNode();\n\n        $notesEvents\n            ->addDefaultsIfNotSet()\n            ->children()\n                ->arrayNode('types')\n                    ->info('List all notes/event types.')\n                    ->prototype('scalar')->end()\n                    ->defaultValue(['', 'content', 'seo', 'warning', 'notice'])\n                ->end()\n            ->end()\n        ;\n\n        return $notesEvents;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildObjectsNode()\n    {\n        $treeBuilder = new TreeBuilder('objects');\n        $objectsNode = $treeBuilder->getRootNode();\n\n        $objectsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $objectsNode;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildAssetsNode()\n    {\n        $treeBuilder = new TreeBuilder('assets');\n        $assetsNode = $treeBuilder->getRootNode();\n\n        $assetsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $assetsNode;\n    }\n\n    /**\n     * @return ArrayNodeDefinition|\\Symfony\\Component\\Config\\Definition\\Builder\\NodeDefinition\n     */\n    protected function buildDocumentsNode()\n    {\n        $treeBuilder = new TreeBuilder('documents');\n        $documentsNode = $treeBuilder->getRootNode();\n\n        $documentsNode\n            ->addDefaultsIfNotSet()\n            ->append($this->buildEventsNode());\n\n        return $documentsNode;\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\EventListener;\n\nuse Pimcore\\Bundle\\AdminBundle\\Security\\ContentSecurityPolicyHandler;\nuse Pimcore\\Bundle\\CoreBundle\\EventListener\\Traits\\PimcoreContextAwareTrait;\nuse Pimcore\\Config;\nuse Pimcore\\Http\\Request\\Resolver\\PimcoreContextResolver;\nuse Pimcore\\Http\\RequestHelper;\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\Component\\HttpKernel\\Event\\ResponseEvent;\nuse Symfony\\Component\\HttpKernel\\KernelEvents;\n\n/**\n * @internal\n */\nclass AdminSecurityListener implements EventSubscriberInterface\n{\n    use PimcoreContextAwareTrait;\n\n    /**\n     * @param ContentSecurityPolicyHandler $contentSecurityPolicyHandler\n     */\n    public function __construct(\n        protected RequestHelper $requestHelper,\n        protected ContentSecurityPolicyHandler $contentSecurityPolicyHandler,\n        protected Config $config\n    ) {\n    }\n\n    /**\n     * {@inheritdoc}\n     */\n    public static function getSubscribedEvents()\n    {\n        return [\n            KernelEvents::RESPONSE => 'onKernelResponse',\n        ];\n    }\n\n    public function onKernelResponse(ResponseEvent $event)\n    {\n        if (!$this->config['admin_csp_header']['enabled']) {\n            return;\n        }\n\n        $request = $event->getRequest();\n\n        if (!$event->isMainRequest()) {\n            return;\n        }\n\n        if (!$this->matchesPimcoreContext($request, PimcoreContextResolver::CONTEXT_ADMIN)) {\n            return;\n        }\n\n        if ($this->requestHelper->isFrontendRequestByAdmin($request)) {\n            return;\n        }\n\n\n        if (!empty($this->config['admin_csp_header']['exclude_paths'])) {\n            $requestUri = $request->getRequestUri();\n            foreach ($this->config['admin_csp_header']['exclude_paths'] as $path) {\n                if (@preg_match($path, $requestUri)) {\n                    return;\n                }\n            }\n        }\n\n        $response = $event->getResponse();\n\n        // set CSP header with random nonce string to the response\n        $response->headers->set('Content-Security-Policy', $this->contentSecurityPolicyHandler->getCspHeader());\n    }\n}\n", "<?php\n\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Security;\n\nuse Pimcore\\Config;\nuse Psr\\Log\\LoggerAwareInterface;\nuse Psr\\Log\\LoggerAwareTrait;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\n/**\n * @internal\n */\nclass ContentSecurityPolicyHandler implements LoggerAwareInterface\n{\n    use LoggerAwareTrait;\n\n    /** @var String|null */\n    private ?string $nonce = null;\n\n    public const DEFAULT_OPT = 'default-src';\n\n    public const IMG_OPT = 'img-src';\n\n    public const SCRIPT_OPT = 'script-src';\n\n    public const STYLE_OPT = 'style-src';\n\n    public const CONNECT_OPT = 'connect-src';\n\n    public const FONT_OPT = 'font-src';\n\n    public const MEDIA_OPT = 'media-src';\n\n    public const FRAME_OPT = 'frame-src';\n\n    /**\n     * @var array\n     */\n    private array $allowedUrls = [\n        self::CONNECT_OPT => [\n            'https://liveupdate.pimcore.org/', //AdminBundle statistics & update-check service\n            'https://nominatim.openstreetmap.org/', //CoreBundle geocoding_url_template\n        ],\n    ];\n\n    public function __construct(protected Config $config, protected array $cspHeaderOptions = [])\n    {\n        $resolver = new OptionsResolver();\n        $this->configureOptions($resolver);\n\n        $this->cspHeaderOptions = $resolver->resolve($cspHeaderOptions);\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults([\n            self::DEFAULT_OPT => \"'self'\",\n            self::IMG_OPT => '* data: blob:',\n            self::MEDIA_OPT => \"'self' data:\",\n            self::SCRIPT_OPT => \"'self' 'nonce-\" . $this->getNonce() . \"' 'unsafe-inline' 'unsafe-eval'\",\n            self::STYLE_OPT => \"'self' 'unsafe-inline'\",\n            self::FRAME_OPT => \"'self'\",\n            self::CONNECT_OPT => \"'self' blob:\",\n            self::FONT_OPT => \"'self'\",\n        ]);\n    }\n\n    /**\n     * @return string\n     */\n    public function getCspHeader(): string\n    {\n        $cspHeaderOptions = array_map(function ($k, $v) {\n            return \"$k $v \" . $this->getAllowedUrls($k);\n        }, array_keys($this->cspHeaderOptions), array_values($this->cspHeaderOptions));\n\n        return implode(';', $cspHeaderOptions);\n    }\n\n    /**\n     * @param string $key\n     * @param bool $flatten\n     *\n     * @return array|string\n     */\n    private function getAllowedUrls(string $key, bool $flatten = true): array|string\n    {\n        if (!$flatten) {\n            return $this->allowedUrls[$key] ?? [];\n        }\n\n        return isset($this->allowedUrls[$key]) && is_array($this->allowedUrls[$key]) ? implode(' ', $this->allowedUrls[$key]) : '';\n    }\n\n    /**\n     * @param string $key\n     * @param array $value\n     *\n     * @return $this\n     */\n    public function addAllowedUrls(string $key, array $value): self\n    {\n        if (!isset($this->allowedUrls[$key])) {\n            $this->allowedUrls[$key] = [];\n        }\n\n        foreach ($value as $val) {\n            $this->allowedUrls[$key][] = $val;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param string $key\n     * @param string $value\n     *\n     * @return $this\n     */\n    public function setCspHeader(string $key, string $value): self\n    {\n        $this->cspHeaderOptions[$key] = $value;\n\n        return $this;\n    }\n\n    /**\n     *\n     * @return string\n     */\n    public function getNonceHtmlAttribute(): string\n    {\n        return $this->config['admin_csp_header']['enabled'] ? ' nonce=\"' . $this->getNonce() . '\"' : '';\n    }\n\n    /**\n     * Generates a random nonce parameter.\n     *\n     * @return string\n     */\n    private function getNonce(): string\n    {\n        if (!$this->nonce) {\n            $this->nonce = generateRandomSymfonySecret();\n        }\n\n        return $this->nonce;\n    }\n}\n"], "filenames": ["bundles/AdminBundle/DependencyInjection/Configuration.php", "bundles/AdminBundle/EventListener/AdminSecurityListener.php", "bundles/AdminBundle/Security/ContentSecurityPolicyHandler.php"], "buggy_code_start_loc": [61, 73, 56], "buggy_code_end_loc": [61, 73, 60], "fixing_code_start_loc": [62, 74, 55], "fixing_code_end_loc": [66, 84, 55], "type": "CWE-79", "message": "Stored XSS in Tooltip in GitHub repository pimcore/pimcore prior to 10.4.", "other": {"cve": {"id": "CVE-2022-1351", "sourceIdentifier": "security@huntr.dev", "published": "2022-04-14T10:15:07.593", "lastModified": "2022-04-21T20:10:13.280", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Stored XSS in Tooltip in GitHub repository pimcore/pimcore prior to 10.4."}, {"lang": "es", "value": "Una vulnerabilidad de tipo XSS almacenado en Tooltip en el repositorio de GitHub pimcore/pimcore versiones anteriores a 10.4"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.4.0", "matchCriteriaId": "EAC33C42-C1F2-4330-B2DF-8BDEE6A5EB05"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/8c39a8b8f14dce078b31f61c4da599ca6f8fc7ac", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/c23ae6c2-2e53-4bf5-85b0-e90418476615", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/8c39a8b8f14dce078b31f61c4da599ca6f8fc7ac"}}