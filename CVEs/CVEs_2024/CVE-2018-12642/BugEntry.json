{"buggy_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Florian Lippert <flo@syscp.org> (2003-2009)\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Panel\n *\n */\n\ndefine('AREA', 'customer');\nrequire './lib/init.php';\n\n\nif (isset($_POST['id'])) {\n\n\t$id = intval($_POST['id']);\n\n\t//Check if the current user is allowed to see the current ticket.\n\t$stmt = Database::prepare(\"SELECT `id` FROM `panel_tickets` WHERE `id` = :id AND `customerid` = :customerid\");\n\t$result = Database::pexecute_first($stmt, array(\"id\" => $id, \"customerid\" => $userinfo['customerid']));\n\n\tif ($result == null) {\n\t\t// no rights to see the requested ticket\n\t\tstandard_error(array('ticketnotaccessible'));\n\t}\n} elseif (isset($_GET['id'])) {\n\t$id = intval($_GET['id']);\n}\n\nif ($page == 'overview') {\n\t$log->logAction(USR_ACTION, LOG_NOTICE, \"viewed customer_tickets\");\n\teval(\"echo \\\"\" . getTemplate(\"tickets/ticket\") . \"\\\";\");\n} elseif ($page == 'tickets') {\n\tif ($action == '') {\n\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"viewed customer_tickets::tickets\");\n\t\t$fields = array(\n\t\t\t'status' => $lng['ticket']['status'],\n\t\t\t'lastchange' => $lng['ticket']['lastchange'],\n\t\t\t'subject' => $lng['ticket']['subject'],\n\t\t\t'lastreplier' => $lng['ticket']['lastreplier']\n\t\t);\n\t\t$paging = new paging($userinfo, TABLE_PANEL_TICKETS, $fields);\n\t\t$stmt = Database::prepare('SELECT `main`.`id`, (SELECT COUNT(`sub`.`id`) FROM `' . TABLE_PANEL_TICKETS . '` `sub`\n\t\t\tWHERE `sub`.`answerto` = `main`.`id`) AS `ticket_answers`, `main`.`lastchange`, `main`.`subject`, `main`.`status`, `main`.`lastreplier`, `main`.`priority`\n\t\t\tFROM `' . TABLE_PANEL_TICKETS . '` as `main`\n\t\t\tWHERE `main`.`answerto` = \"0\"\n\t\t\tAND `archived` = \"0\"\n\t\t\tAND `customerid`= :customerid ' . $paging->getSqlWhere(true) . \" \" . $paging->getSqlOrderBy() . \" \" . $paging->getSqlLimit()\n\t\t);\n\t\tDatabase::pexecute($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t$paging->setEntries(Database::num_rows());\n\t\t$sortcode = $paging->getHtmlSortCode($lng);\n\t\t$arrowcode = $paging->getHtmlArrowCode($filename . '?page=' . $page . '&s=' . $s);\n\t\t$searchcode = $paging->getHtmlSearchCode($lng);\n\t\t$pagingcode = $paging->getHtmlPagingCode($filename . '?page=' . $page . '&s=' . $s);\n\t\t$i = 0;\n\t\t$count = 0;\n\t\t$tickets = '';\n\t\t$tickets_count = 0;\n\n\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\tif ($paging->checkDisplay($i)) {\n\t\t\t\t$tickets_count++;\n\t\t\t\t$row = htmlentities_array($row);\n\t\t\t\t$row['lastchange'] = date(\"d.m.y H:i\", $row['lastchange']);\n\n\t\t\t\tif ($row['status'] >= 0 && $row['status'] <= 2) {\n\t\t\t\t\t$reopen = 0;\n\t\t\t\t} else {\n\t\t\t\t\t$reopen = 1;\n\t\t\t\t}\n\n\t\t\t\t$row['status'] = ticket::getStatusText($lng, $row['status']);\n\t\t\t\t$row['priority'] = ticket::getPriorityText($lng, $row['priority']);\n\n\t\t\t\tif ($row['lastreplier'] == '1') {\n\t\t\t\t\t$row['lastreplier'] = $lng['ticket']['staff'];\n\t\t\t\t\t$cananswer = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$row['lastreplier'] = $lng['ticket']['customer'];\n\t\t\t\t\t$cananswer = 0;\n\t\t\t\t}\n\n\t\t\t\t$row['subject'] = html_entity_decode($row['subject']);\n\t\t\t\tif (strlen($row['subject']) > 30) {\n\t\t\t\t\t$ts = wordwrap($row['subject'], 30, \"|\");\n\t\t\t\t\t$ts = explode(\"|\", $ts);\n\t\t\t\t\t$row['subject'] = $ts[0]. '...';\n\t\t\t\t}\n\n\t\t\t\teval(\"\\$tickets.=\\\"\" . getTemplate(\"tickets/tickets_tickets\") . \"\\\";\");\n\t\t\t\t$count++;\n\t\t\t}\n\n\t\t\t$i++;\n\t\t}\n\n\t\t$supportavailable = 0;\n\t\t$time = date(\"Hi\", time());\n\t\t$day = date(\"w\", time());\n\t\t$start = substr(Settings::Get('ticket.worktime_begin'), 0, 2) . substr(Settings::Get('ticket.worktime_begin'), 3, 2);\n\t\t$end = substr(Settings::Get('ticket.worktime_end'), 0, 2) . substr(Settings::Get('ticket.worktime_end'), 3, 2);\n\n\t\tif ($time >= $start && $time <= $end) {\n\t\t\t$supportavailable = 1;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_sat') == \"0\" && $day == \"6\") {\n\t\t\t$supportavailable = 0;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_sun') == \"0\" && $day == \"0\") {\n\t\t\t$supportavailable = 0;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_all') == \"1\") {\n\t\t\t$supportavailable = 1;\n\t\t}\n\n\t\t$ticketsopen = 0;\n\t\t$stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\tWHERE `customerid` = :customerid\n\t\t\tAND `answerto` = \"0\"\n\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t);\n\t\t$opentickets = Database::pexecute_first($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\tif (Settings::Get('ticket.concurrently_open') != - 1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\t$notmorethanxopentickets = strtr($lng['ticket']['notmorethanxopentickets'], array('%s' => Settings::Get('ticket.concurrently_open')));\n\t\t} else {\n\t\t\t$notmorethanxopentickets = '';\n\t\t}\n\n\t\t$ticketsopen = (int)$opentickets['count'];\n\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets\") . \"\\\";\");\n\n\t} elseif ($action == 'new') {\n\t\tif ($userinfo['tickets_used'] < $userinfo['tickets'] || $userinfo['tickets'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$newticket = ticket::getInstanceOf($userinfo, -1);\n\t\t\t\t$newticket->Set('subject', validate($_POST['subject'], 'subject'), true, false);\n\t\t\t\t$newticket->Set('priority', validate($_POST['priority'], 'priority'), true, false);\n\t\t\t\t$newticket->Set('category', validate($_POST['category'], 'category'), true, false);\n\t\t\t\t$newticket->Set('customer', (int)$userinfo['customerid'], true, false);\n\t\t\t\t$newticket->Set('admin', (int)$userinfo['adminid'], true, false);\n\t\t\t\t$newticket->Set('message', validate(str_replace(\"\\r\\n\", \"\\n\", $_POST['message']), 'message', '/^[^\\0]*$/'), true, false);\n\n\t\t\t\tif ($newticket->Get('subject') == null) {\n\t\t\t\t\tstandard_error(array('stringisempty', 'mysubject'));\n\t\t\t\t} elseif ($newticket->Get('message') == null) {\n\t\t\t\t\tstandard_error(array('stringisempty', 'mymessage'));\n\t\t\t\t} else {\n\t\t\t\t\t$now = time();\n\t\t\t\t\t$newticket->Set('dt', $now, true, true);\n\t\t\t\t\t$newticket->Set('lastchange', $now, true, true);\n\t\t\t\t\t$newticket->Set('ip', $_SERVER['REMOTE_ADDR'], true, true);\n\t\t\t\t\t$newticket->Set('status', '0', true, true);\n\t\t\t\t\t$newticket->Set('lastreplier', '0', true, true);\n\t\t\t\t\t$newticket->Set('by', '0', true, true);\n\t\t\t\t\t$newticket->Insert();\n\t\t\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"opened support-ticket '\" . $newticket->Get('subject') . \"'\");\n\n\t\t\t\t\t$stmt = Database::prepare('UPDATE `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\t\tSET `tickets_used`=`tickets_used` + 1\n\t\t\t\t\t\tWHERE `customerid`= :customerid'\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t\t\t\t// Customer mail\n\t\t\t\t\t$newticket->sendMail((int)$userinfo['customerid'], 'new_ticket_for_customer_subject', $lng['mails']['new_ticket_for_customer']['subject'], 'new_ticket_for_customer_mailbody', $lng['mails']['new_ticket_for_customer']['mailbody']);\n\n\t\t\t\t\t// Admin mail\n\t\t\t\t\t$newticket->sendMail(-1, 'new_ticket_by_customer_subject', $lng['mails']['new_ticket_by_customer']['subject'], 'new_ticket_by_customer_mailbody', $lng['mails']['new_ticket_by_customer']['mailbody']);\n\t\t\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$categories = '';\n\t\t\t\t$result_stmt = Database::prepare('SELECT `id`, `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\tORDER BY `logicalorder`, `name` ASC'\n\t\t\t\t);\n\t\t\t\t$result = Database::pexecute_first($result_stmt, array(\"adminid\" => $userinfo['adminid']));\n\n\t\t\t\tif (isset($result['name']) && $result['name'] != '') {\n\t\t\t\t\t$result2_stmt = Database::prepare('SELECT `id`, `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\tORDER BY `logicalorder`, `name` ASC'\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($result2_stmt, array(\"adminid\" => $userinfo['adminid']));\n\n\t\t\t\t\twhile ($row = $result2_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$categories.= makeoption($row['name'], $row['id']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$categories = makeoption($lng['ticket']['no_cat'], '0');\n\t\t\t\t}\n\n\t\t\t\t$priorities = makeoption($lng['ticket']['high'], '1');\n\t\t\t\t$priorities.= makeoption($lng['ticket']['normal'], '2');\n\t\t\t\t$priorities.= makeoption($lng['ticket']['low'], '3');\n\t\t\t\t$ticketsopen = 0;\n\t\t\t\t$opentickets_stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\tAND `answerto` = \"0\"\n\t\t\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t\t\t);\n\t\t\t\t$opentickets = Database::pexecute_first($opentickets_stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t\t\tif (Settings::Get('ticket.concurrently_open') != -1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\t\t\t$notmorethanxopentickets = strtr($lng['ticket']['notmorethanxopentickets'], array('%s' => Settings::Get('ticket.concurrently_open')));\n\t\t\t\t} else {\n\t\t\t\t\t$notmorethanxopentickets = '';\n\t\t\t\t}\n\n\t\t\t\t$ticketsopen = (int)$opentickets['count'];\n\n\t\t\t\t$ticket_add_data = include_once dirname(__FILE__).'/lib/formfields/customer/tickets/formfield.ticket_add.php';\n\t\t\t\t$ticket_add_form = htmlform::genHTMLForm($ticket_add_data);\n\n\t\t\t\t$title = $ticket_add_data['ticket_add']['title'];\n\t\t\t\t$image = $ticket_add_data['ticket_add']['image'];\n\n\t\t\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets_new\") . \"\\\";\");\n\t\t\t}\n\t\t} else {\n\t\t\tstandard_error('nomoreticketsavailable');\n\t\t}\n\t} elseif ($action == 'answer' && $id != 0) {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$replyticket = ticket::getInstanceOf($userinfo, -1);\n\t\t\t$replyticket->Set('subject', validate($_POST['subject'], 'subject'), true, false);\n\t\t\t$replyticket->Set('priority', validate($_POST['priority'], 'priority'), true, false);\n\t\t\t$replyticket->Set('message', validate(str_replace(\"\\r\\n\", \"\\n\", $_POST['message']), 'message', '/^[^\\0]*$/'), true, false);\n\n\t\t\tif ($replyticket->Get('message') == null) {\n\t\t\t\tstandard_error(array('stringisempty', 'mymessage'));\n\t\t\t} else {\n\t\t\t\t$now = time();\n\t\t\t\t$replyticket->Set('customer', (int)$userinfo['customerid'], true, true);\n\t\t\t\t$replyticket->Set('lastchange', $now, true, true);\n\t\t\t\t$replyticket->Set('ip', $_SERVER['REMOTE_ADDR'], true, true);\n\t\t\t\t$replyticket->Set('status', '1', true, true);\n\t\t\t\t$replyticket->Set('answerto', (int)$id, true, false);\n\t\t\t\t$replyticket->Set('by', '0', true, true);\n\t\t\t\t$replyticket->Insert();\n\n\t\t\t\t// Update priority if changed\n\t\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\n\t\t\t\tif ($replyticket->Get('priority') != $mainticket->Get('priority')) {\n\t\t\t\t\t$mainticket->Set('priority', $replyticket->Get('priority'), true);\n\t\t\t\t}\n\n\t\t\t\t$mainticket->Set('lastchange', $now);\n\t\t\t\t$mainticket->Set('lastreplier', '0');\n\t\t\t\t$mainticket->Set('status', '1');\n\t\t\t\t$mainticket->Update();\n\t\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"answered support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\t\t\t$mainticket->sendMail(-1, 'new_reply_ticket_by_customer_subject', $lng['mails']['new_reply_ticket_by_customer']['subject'], 'new_reply_ticket_by_customer_mailbody', $lng['mails']['new_reply_ticket_by_customer']['mailbody']);\n\t\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t\t}\n\t\t} else {\n\t\t\t$ticket_replies = '';\n\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\t$dt = date(\"d.m.Y H:i\\h\", $mainticket->Get('dt'));\n\t\t\t$status = ticket::getStatusText($lng, $mainticket->Get('status'));\n\n\t\t\tif ($mainticket->Get('status') >= 0 && $mainticket->Get('status') <= 2) {\n\t\t\t\t$isclosed = 0;\n\t\t\t} else {\n\t\t\t\t$isclosed = 1;\n\t\t\t}\n\n\t\t\tif ($mainticket->Get('by') == '1') {\n\t\t\t\t$by = $lng['ticket']['staff'];\n\t\t\t} else {\n\t\t\t\t$cid = $mainticket->Get('customer');\n\t\t\t\t$usr_stmt = Database::prepare('SELECT `customerid`, `firstname`, `name`, `company`, `loginname`\n\t\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\tWHERE `customerid` = :customerid '\n\t\t\t\t);\n\t\t\t\t$usr = Database::pexecute_first($usr_stmt, array(\"customerid\" => $cid));\n\t\t\t\t$by = getCorrectFullUserDetails($usr);\n\t\t\t}\n\n\t\t\t$subject = $mainticket->Get('subject');\n\t\t\t$message = $mainticket->Get('message');\n\t\t\teval(\"\\$ticket_replies.=\\\"\" . getTemplate(\"tickets/tickets_tickets_main\") . \"\\\";\");\n\t\t\t$result_stmt = Database::prepare('SELECT `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\tWHERE `id`= :id '\n\t\t\t);\n\t\t\t$row = Database::pexecute_first($result_stmt, array(\"id\" => $mainticket->Get('category')));\n\n\t\t\t$andere_stmt = Database::prepare('SELECT * FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\t\tWHERE `answerto`= :answerto\n\t\t\t\tORDER BY `lastchange` ASC'\n\t\t\t);\n\t\t\tDatabase::pexecute($andere_stmt, array(\"answerto\" => $id));\n\t\t\t$numrows_andere = Database::num_rows();\n\n\t\t\twhile ($row2 = $andere_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$subticket = ticket::getInstanceOf($userinfo, (int)$row2['id']);\n\t\t\t\t$lastchange = date(\"d.m.Y H:i\\h\", $subticket->Get('lastchange'));\n\n\t\t\t\tif ($subticket->Get('by') == '1') {\n\t\t\t\t\t$by = $lng['ticket']['staff'];\n\t\t\t\t} else {\n\t\t\t\t\t$cid = $subticket->Get('customer');\n\t\t\t\t\t$usr_stmt = Database::prepare('\n\t\t\t\t\t\tSELECT `customerid`, `firstname`, `name`, `company`, `loginname`\n\t\t\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\t\tWHERE `customerid` = :customerid '\n\t\t\t\t\t);\n\t\t\t\t\t$usr = Database::pexecute_first($usr_stmt, array(\"customerid\" => $cid));\n\t\t\t\t\t$by = getCorrectFullUserDetails($usr);\n\t\t\t\t}\n\n\t\t\t\t$subject = $subticket->Get('subject');\n\t\t\t\t$message = $subticket->Get('message');\n\n\t\t\t\t$row2 = htmlentities_array($row2);\n\t\t\t\teval(\"\\$ticket_replies.=\\\"\" . getTemplate(\"tickets/tickets_tickets_list\") . \"\\\";\");\n\t\t\t}\n\n\t\t\t$priorities = makeoption($lng['ticket']['high'], '1', $mainticket->Get('priority'), true, true);\n\t\t\t$priorities.= makeoption($lng['ticket']['normal'], '2', $mainticket->Get('priority'), true, true);\n\t\t\t$priorities.= makeoption($lng['ticket']['low'], '3', $mainticket->Get('priority'), true, true);\n\t\t\t$subject = htmlentities($mainticket->Get('subject'));\n\t\t\t$ticket_replies_count = $numrows_andere + 1;\n\n\t\t\t// don't forget the main-ticket!\n\t\t\t$ticket_reply_data = include_once dirname(__FILE__).'/lib/formfields/customer/tickets/formfield.ticket_reply.php';\n\t\t\t$ticket_reply_form = htmlform::genHTMLForm($ticket_reply_data);\n\n\t\t\t$title = $ticket_reply_data['ticket_reply']['title'];\n\t\t\t$image = $ticket_reply_data['ticket_reply']['image'];\n\n\t\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets_reply\") . \"\\\";\");\n\t\t}\n\t} elseif ($action == 'close' && $id != 0) {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$now = time();\n\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\t$mainticket->Set('lastchange', $now, true, true);\n\t\t\t$mainticket->Set('lastreplier', '0', true, true);\n\t\t\t$mainticket->Set('status', '3', true, true);\n\t\t\t$mainticket->Update();\n\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"closed support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t} else {\n\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\task_yesno('ticket_reallyclose', $filename, array('id' => $id, 'page' => $page, 'action' => $action), $mainticket->Get('subject'));\n\t\t}\n\t} elseif ($action == 'reopen' && $id != 0) {\n\t\t$ticketsopen = 0;\n\t\t$opentickets_stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\tWHERE `customerid` = :customerid\n\t\t\tAND `answerto` = \"0\"\n\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t);\n\t\t$opentickets = Database::pexecute_first($opentickets_stmt, array(\"customerid\" => $userinfo['customerid']));\n\t\t$ticketsopen = (int)$opentickets['count'];\n\n\t\tif ($ticketsopen > Settings::Get('ticket.concurrently_open') && Settings::Get('ticket.concurrently_open') != - 1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\tstandard_error('notmorethanxopentickets', Settings::Get('ticket.concurrently_open'));\n\t\t}\n\n\t\t$now = time();\n\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t$mainticket->Set('lastchange', $now, true, true);\n\t\t$mainticket->Set('lastreplier', '0', true, true);\n\t\t$mainticket->Set('status', '0', true, true);\n\t\t$mainticket->Update();\n\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"reopened support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Michael Kaufmann <mkaufmann@nutime.de>\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Logger\n *\n * @link       http://www.nutime.de/\n *\n * Support Tickets - Tickets-Class\n */\n\nclass ticket {\n\n\t/**\n\t * Userinfo\n\t * @var array\n\t */\n\tprivate $userinfo = array();\n\n\t/**\n\t * Ticket ID\n\t * @var tid\n\t */\n\tprivate $tid = - 1;\n\n\t/**\n\t * Ticket Data Array\n\t * @var t_data\n\t */\n\tprivate $t_data = array();\n\n\t/**\n\t * Ticket-Object-Array\n\t * @var tickets\n\t */\n\tstatic private $tickets = array();\n\n\t/**\n\t * Class constructor.\n\t *\n\t * @param array userinfo\n\t * @param int ticket id\n\t */\n\tprivate function __construct($userinfo, $tid = - 1) {\n\t\t$this->userinfo = $userinfo;\n\t\t$this->tid = $tid;\n\n\t\t// initialize data array\n\t\t$this->initData();\n\n\t\t// read data from database\n\t\t$this->readData();\n\t}\n\n\t/**\n\t * Singleton ftw ;-)\n\t *\n\t * @param array userinfo\n\t * @param int ticket id\n\t */\n\tstatic public function getInstanceOf($_usernfo, $_tid) {\n\t\tif (!isset(self::$tickets[$_tid])) {\n\t\t\tself::$tickets[$_tid] = new ticket($_usernfo, $_tid);\n\t\t}\n\t\treturn self::$tickets[$_tid];\n\t}\n\n\t/**\n\t * Initialize data-array\n\t */\n\tprivate function initData() {\n\n\t\t$this->Set('customer', 0, true, true);\n\t\t$this->Set('admin', 1, true, true);\n\t\t$this->Set('subject', '', true, true);\n\t\t$this->Set('category', '0', true, true);\n\t\t$this->Set('priority', '2', true, true);\n\t\t$this->Set('message', '', true, true);\n\t\t$this->Set('dt', 0, true, true);\n\t\t$this->Set('lastchange', 0, true, true);\n\t\t$this->Set('ip', '', true, true);\n\t\t$this->Set('status', '0', true, true);\n\t\t$this->Set('lastreplier', '0', true, true);\n\t\t$this->Set('by', '0', true, true);\n\t\t$this->Set('answerto', '0', true, true);\n\t\t$this->Set('archived', '0', true, true);\n\t}\n\n\t/**\n\t * Read ticket data from database.\n\t */\n\tprivate function readData() {\n\n\t\tif (isset($this->tid)\n\t\t\t&& $this->tid != - 1\n\t\t) {\n\t\t\t$_ticket_stmt = Database::prepare('\n\t\t\t\tSELECT * FROM `' . TABLE_PANEL_TICKETS . '` WHERE `id` = :tid'\n\t\t\t);\n\t\t\t$_ticket = Database::pexecute_first($_ticket_stmt, array('tid' => $this->tid));\n\n\t\t\t$this->Set('customer', $_ticket['customerid'], true, false);\n\t\t\t$this->Set('admin', $_ticket['adminid'], true, false);\n\t\t\t$this->Set('subject', $_ticket['subject'], true, false);\n\t\t\t$this->Set('category', $_ticket['category'], true, false);\n\t\t\t$this->Set('priority', $_ticket['priority'], true, false);\n\t\t\t$this->Set('message', $_ticket['message'], true, false);\n\t\t\t$this->Set('dt', $_ticket['dt'], true, false);\n\t\t\t$this->Set('lastchange', $_ticket['lastchange'], true, false);\n\t\t\t$this->Set('ip', $_ticket['ip'], true, false);\n\t\t\t$this->Set('status', $_ticket['status'], true, false);\n\t\t\t$this->Set('lastreplier', $_ticket['lastreplier'], true, false);\n\t\t\t$this->Set('by', $_ticket['by'], true, false);\n\t\t\t$this->Set('answerto', $_ticket['answerto'], true, false);\n\t\t\t$this->Set('archived', $_ticket['archived'], true, false);\n\t\t}\n\t}\n\n\t/**\n\t * Insert data to database\n\t */\n\tpublic function Insert() {\n\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_TICKETS . \"` SET\n                `customerid` = :customerid,\n                `adminid` = :adminid,\n                `category` = :category,\n                `priority` = :priority,\n                `subject` = :subject,\n                `message` = :message,\n                `dt` = :dt,\n                `lastchange` = :lastchange,\n                `ip` = :ip,\n                `status` = :status,\n                `lastreplier` = :lastreplier,\n                `by` = :by,\n                `answerto` = :answerto\"\n\t\t);\n\t\t$ins_data = array(\n\t\t\t'customerid' => $this->Get('customer'),\n\t\t\t'adminid' => $this->Get('admin'),\n\t\t\t'category' => $this->Get('category'),\n\t\t\t'priority' => $this->Get('priority'),\n\t\t\t'subject' => $this->Get('subject'),\n\t\t\t'message' => $this->Get('message'),\n\t\t\t'dt' => time(),\n\t\t\t'lastchange' => time(),\n\t\t\t'ip' => $this->Get('ip'),\n\t\t\t'status' => $this->Get('status'),\n\t\t\t'lastreplier' => $this->Get('lastreplier'),\n\t\t\t'by' => $this->Get('by'),\n\t\t\t'answerto' => $this->Get('answerto')\n\t\t);\n\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t$this->tid = Database::lastInsertId();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Update data in database\n\t */\n\tpublic function Update() {\n\n\t\t// Update \"main\" ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET\n                `priority` = :priority,\n                `lastchange` = :lastchange,\n                `status` = :status,\n                `lastreplier` = :lastreplier\n                WHERE `id` = :tid'\n\t\t);\n\t\t$upd_data = array(\n\t\t\t'priority' => $this->Get('priority'),\n\t\t\t'lastchange' => $this->Get('lastchange'),\n\t\t\t'status' => $this->Get('status'),\n\t\t\t'lastreplier' => $this->Get('lastreplier'),\n\t\t\t'tid' => $this->tid\n\t\t);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Moves a ticket to the archive\n\t */\n\tpublic function Archive() {\n\n\t\t// Update \"main\" ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET `archived` = \"1\" WHERE `id` = :tid'\n\t\t);\n\t\tDatabase::pexecute($upd_stmt, array('tid' => $this->tid));\n\n\t\t// Update \"answers\" to ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET `archived` = \"1\" WHERE `answerto` = :tid'\n\t\t);\n\t\tDatabase::pexecute($upd_stmt, array('tid' => $this->tid));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Remove ticket from database\n\t */\n\tpublic function Delete() {\n\n\t\t// Delete \"main\" ticket\n\t\t$del_stmt = Database::prepare('\n\t\t\tDELETE FROM `' . TABLE_PANEL_TICKETS . '` WHERE `id` = :tid'\n\t\t);\n\t\tDatabase::pexecute($del_stmt, array('tid' => $this->tid));\n\n\t\t// Delete \"answers\" to ticket\"\n\t\t$del_stmt = Database::prepare('\n\t\t\tDELETE FROM `' . TABLE_PANEL_TICKETS . '` WHERE `answerto` = :tid'\n\t\t);\n\t\tDatabase::pexecute($del_stmt, array('tid' => $this->tid));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Mail notifications\n\t */\n\tpublic function sendMail($customerid = - 1, $template_subject = null, $default_subject = null, $template_body = null, $default_body = null)\n\t{\n\t\tglobal $mail, $theme;\n\n\t\t// Some checks are to be made here in the future\n\t\tif ($customerid != - 1) {\n\t\t\t// Get e-mail message for customer\n\t\t\t$usr_stmt = Database::prepare('\n\t\t\t\tSELECT `name`, `firstname`, `company`, `email`\n\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '` WHERE `customerid` = :customerid'\n\t\t\t);\n\t\t\t$usr = Database::pexecute_first($usr_stmt, array('customerid' => $customerid));\n\n\t\t\t$replace_arr = array(\n\t\t\t\t'FIRSTNAME' => $usr['firstname'],\n\t\t\t\t'NAME' => $usr['name'],\n\t\t\t\t'COMPANY' => $usr['company'],\n\t\t\t\t'SALUTATION' => getCorrectUserSalutation($usr),\n\t\t\t\t'SUBJECT' => $this->Get('subject', true)\n\t\t\t);\n\t\t} else {\n\t\t\t$replace_arr = array(\n\t\t\t\t'SUBJECT' => $this->Get('subject', true)\n\t\t\t);\n\t\t}\n\t\t$tpl_seldata = array(\n\t\t\t'adminid' => $this->userinfo['adminid'],\n\t\t\t'lang' => $this->userinfo['def_language'],\n\t\t\t'tplsubject' => $template_subject\n\t\t);\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid`= :adminid\n\t\t\tAND `language`= :lang\n\t\t\tAND `templategroup`= 'mails' AND `varname`= :tplsubject\"\n\t\t);\n\t\t$result = Database::pexecute_first($result_stmt, $tpl_seldata);\n\t\t$mail_subject = html_entity_decode(replace_variables((($result['value'] != '') ? $result['value'] : $default_subject), $replace_arr));\n\n\t\tunset($tpl_seldata['tplsubject']);\n\t\t$tpl_seldata['tplmailbody'] = $template_body;\n\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid`= :adminid\n\t\t\tAND `language`= :lang\n\t\t\tAND `templategroup`= 'mails' AND `varname`= :tplmailbody\"\n\t\t);\n\t\t$result = Database::pexecute_first($result_stmt, $tpl_seldata);\n\t\t$mail_body = html_entity_decode(replace_variables((($result['value'] != '') ? $result['value'] : $default_body), $replace_arr));\n\n\t\tif ($customerid != - 1) {\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->SetFrom(Settings::Get('ticket.noreply_email'), Settings::Get('ticket.noreply_name'));\n\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$mail->AddAddress($usr['email'], $usr['firstname'] . ' ' . $usr['name']);\n\t\t\t\t$mail->Send();\n\t\t\t} catch(phpmailerException $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif ($_mailerror) {\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array('loginname' => 'ticket_class'));\n\t\t\t\t$rstlog->logAction(ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\tstandard_error('errorsendingmail', $usr['email']);\n\t\t\t}\n\t\t\t$mail->ClearAddresses();\n\n\t\t} else {\n\n\t\t\t$admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `name`, `email` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `adminid` = :adminid\"\n\t\t\t);\n\t\t\t$admin = Database::pexecute_first($admin_stmt, array('adminid' => $this->userinfo['adminid']));\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->SetFrom(Settings::Get('ticket.noreply_email'), Settings::Get('ticket.noreply_name'));\n\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$mail->AddAddress($admin['email'], $admin['name']);\n\t\t\t\t$mail->Send();\n\t\t\t} catch(phpmailerException $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\n\t\t\tif ($_mailerror) {\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array('loginname' => 'ticket_class'));\n\t\t\t\t$rstlog->logAction(ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\tstandard_error('errorsendingmail', $admin['email']);\n\t\t\t}\n\n\t\t\t$mail->ClearAddresses();\n\t\t}\n\t}\n\n\t/**\n\t * Add a support-categories\n\t */\n\tstatic public function addCategory($_category = null, $_admin = 1, $_order = 1) {\n\n\t\tif ($_category != null\n\t\t\t&& $_category != ''\n\t\t) {\n\t\t\tif ($_order < 1) {\n\t\t\t\t$_order = 1;\n\t\t\t}\n\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_TICKET_CATS . \"` SET\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t`logicalorder` = :lo\"\n\t\t\t);\n\t\t\t$ins_data = array(\n\t\t\t\t'name' => $_category,\n\t\t\t\t'adminid' => $_admin,\n\t\t\t\t'lo' => $_order\n\t\t\t);\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Edit a support-categories\n\t */\n\tstatic public function editCategory($_category = null, $_id = 0, $_order = 1) {\n\n\t\tif ($_category != null\n\t\t\t&& $_category != ''\n\t\t\t&& $_id != 0\n\t\t) {\n\t\t\tif ($_order < 1) {\n\t\t\t\t$_order = 1;\n\t\t\t}\n\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TICKET_CATS . \"` SET\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`logicalorder` = :lo\n                  WHERE `id` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array('name' => $_category, 'lo' => $_order, 'id' => $_id));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Delete a support-categories\n\t */\n\tstatic public function deleteCategory($_id = 0) {\n\n\t\tif ($_id != 0) {\n\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) as `numtickets` FROM `\" . TABLE_PANEL_TICKETS . \"`\n\t\t\t\tWHERE `category` = :cat\"\n\t\t\t);\n\t\t\t$result = Database::pexecute_first($result_stmt, array('cat' => $_id));\n\n\t\t\tif ($result['numtickets'] == \"0\") {\n\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TICKET_CATS . \"` WHERE `id` = :id\"\n\t\t\t\t);\n\t\t\t\tDatabase::pexecute($del_stmt, array('id' => $_id));\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return a support-category-name\n\t */\n\tstatic public function getCategoryName($_id = 0) {\n\n\t\tif ($_id != 0) {\n\t\t\t$stmt = Database::prepare(\"\n\t\t\t\tSELECT `name` FROM `\" . TABLE_PANEL_TICKET_CATS . \"` WHERE `id` = :id\"\n\t\t\t);\n\t\t\t$category = Database::pexecute_first($stmt, array('id' => $_id));\n\t\t\treturn $category['name'];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * get the highest order number\n\t * \n\t * @param object $_uid admin-id (optional)\n\t * \n\t * @return int highest order number\n\t */\n\tstatic public function getHighestOrderNumber($_uid = 0) {\n\n\t\t$where = '';\n\t\t$sel_data = array();\n\t\tif ($_uid > 0) {\n\t\t\t$where = \" WHERE `adminid` = :adminid\";\n\t\t\t$sel_data['adminid'] = $_uid;\n\t\t}\n\t\t$sql = \"SELECT MAX(`logicalorder`) as `highestorder` FROM `\" . TABLE_PANEL_TICKET_CATS . \"`\".$where.\";\";\n\t\t$result_stmt = Database::prepare($sql);\n\t\t$result = Database::pexecute_first($result_stmt, $sel_data);\n\t\treturn (isset($result['highestorder']) ? (int)$result['highestorder'] : 0);\n\t}\n\n\t/**\n\t * returns the last x archived tickets\n\t */\n\tstatic public function getLastArchived($_num = 10, $_admin = 1) {\n\n\t\tif ($_num > 0) {\n\n\t\t\t$archived = array();\n\t\t\t$counter = 0;\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *, (\n\t\t\t\t\tSELECT COUNT(`sub`.`id`)\n\t\t\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `sub`\n\t\t\t\t\tWHERE `sub`.`answerto` = `main`.`id`\n\t\t\t\t) as `ticket_answers`\n\t\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `main`\n\t\t\t\tWHERE `main`.`answerto` = '0' AND `main`.`archived` = '1'\n\t\t\t\tAND `main`.`adminid` = :adminid\n\t\t\t\tORDER BY `main`.`lastchange` DESC LIMIT 0, \".(int)$_num\n\t\t\t);\n\t\t\tDatabase::pexecute($result_stmt, array('adminid' => $_admin));\n\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\n\t\t\t\t$archived[$counter]['id'] = $row['id'];\n\t\t\t\t$archived[$counter]['customerid'] = $row['customerid'];\n\t\t\t\t$archived[$counter]['adminid'] = $row['adminid'];\n\t\t\t\t$archived[$counter]['lastreplier'] = $row['lastreplier'];\n\t\t\t\t$archived[$counter]['ticket_answers'] = $row['ticket_answers'];\n\t\t\t\t$archived[$counter]['category'] = $row['category'];\n\t\t\t\t$archived[$counter]['priority'] = $row['priority'];\n\t\t\t\t$archived[$counter]['subject'] = $row['subject'];\n\t\t\t\t$archived[$counter]['message'] = $row['message'];\n\t\t\t\t$archived[$counter]['dt'] = $row['dt'];\n\t\t\t\t$archived[$counter]['lastchange'] = $row['lastchange'];\n\t\t\t\t$archived[$counter]['status'] = $row['status'];\n\t\t\t\t$archived[$counter]['by'] = $row['by'];\n\t\t\t\t$counter++;\n\t\t\t}\n\n\t\t\tif (isset($archived[0]['id'])) {\n\t\t\t\treturn $archived;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a sql-statement to search the archive\n\t * including necessary parameter-array for PDO\n\t *\n\t * @return array 0 = query, 1 = params-array\n\t */\n\tstatic public function getArchiveSearchStatement($subject = null, $priority = null, $fromdate = null, $todate = null, $message = null, $customer = - 1, $admin = 1, $categories = null)\n\t{\n\t\t$search_params = array();\n\n\t\t$query = \"\n\t\t\tSELECT `main`.*, (\n\t\t\t\tSELECT COUNT(`sub`.`id`) FROM `\" . TABLE_PANEL_TICKETS . \"` `sub`\n\t\t\t\tWHERE `sub`.`answerto` = `main`.`id`\n\t\t\t) as `ticket_answers`\n\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `main`\n\t\t\tWHERE `main`.`archived` = '1' AND `main`.`adminid` = :admin\"\n\t\t;\n\n\t\t$search_params['admin'] = $admin;\n\n\t\tif ($subject != NULL\n\t\t\t&& $subject != ''\n\t\t) {\n\t\t\t$query .= \" AND `main`.`subject` LIKE :subject\";\n\t\t\t$search_params['subject'] = \"%\".$subject.\"%\";\n\t\t}\n\n\t\tif ($priority != null\n\t\t\t&& isset($priority[0])\n\t\t\t&& $priority[0] != ''\n\t\t) {\n\n\t\t\tif (isset($priority[1])\n\t\t\t\t&& $priority[1] != ''\n\t\t\t) {\n\n\t\t\t\tif (isset($priority[2])\n\t\t\t\t\t&& $priority[2] != ''\n\t\t\t\t) {\n\n\t\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '2' OR `main`.`priority` = '3')\";\n\n\t\t\t\t} else {\n\n\t\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '1')\";\n\t\t\t\t}\n\n\t\t\t} elseif (isset($priority[2])\n\t\t\t\t&& $priority[2] != ''\n\t\t\t) {\n\n\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '3')\";\n\n\t\t\t} else {\n\t\t\t\t$query .= \" AND `main`.`priority` = '1'\";\n\t\t\t}\n\n\t\t} elseif($priority != null\n\t\t\t&& isset($priority[1])\n\t\t\t&& $priority[1] != ''\n\t\t) {\n\t\t\tif (isset($priority[2])\n\t\t\t\t&& $priority[2] != ''\n\t\t\t) {\n\t\t\t\t$query .= \" AND (`main`.`priority` = '2' OR `main`.`priority` = '3')\";\n\t\t\t} else {\n\t\t\t\t$query .= \" AND `main`.`priority` = '2'\";\n\t\t\t}\n\n\t\t} elseif($priority != null) {\n\n\t\t\tif (isset($priority[3])\n\t\t\t\t&& $priority[3] != ''\n\t\t\t) {\n\t\t\t\t$query .= \" AND `main`.`priority` = '3'\";\n\t\t\t}\n\t\t}\n\n\t\tif ($fromdate != null\n\t\t\t&& $fromdate > 0\n\t\t) {\n\t\t\t$query .= \" AND `main`.`lastchange` > :fromdate\";\n\t\t\t$search_params['fromdate'] = strtotime($fromdate);\n\t\t}\n\n\t\tif ($todate != null\n\t\t\t&& $todate > 0\n\t\t) {\n\t\t\t$query .= \" AND `main`.`lastchange` < :todate\";\n\t\t\t$search_params['todate'] = strtotime($todate);\n\t\t}\n\n\t\tif ($message != null\n\t\t\t&& $message != ''\n\t\t) {\n\t\t\t$query .= \" AND `main`.`message` LIKE :message\";\n\t\t\t$search_params['message'] = \"%\".$message.\"%\";\n\t\t}\n\n\t\tif ($customer != - 1) {\n\t\t\t$query .= \" AND `main`.`customerid` = :customer\";\n\t\t\t$search_params['customer'] = $customer;\n\t\t}\n\n\t\tif ($categories != null) {\n\n\t\t\t$cats = array();\n\t\t\tforeach ($categories as $index => $catid) {\n\t\t\t\tif ($catid != \"\") {\n\t\t\t\t\t$cats[] = $catid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (count($cats) > 0) {\n\t\t\t\t$query .= \" AND (\";\n\t\t\t}\n\n\t\t\tforeach ($cats as $catid) {\n\t\t\t\tif (isset($catid) && $catid > 0) {\n\t\t\t\t\t$query .= \"`main`.`category` = :catid_\".$catid.\" OR \";\n\t\t\t\t\t$search_params['catid_'.$catid] = $catid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (count($cats) > 0) {\n\t\t\t\t$query = substr($query, 0, strlen($query) - 3);\n\t\t\t\t$query .= \") \";\n\t\t\t}\n\t\t}\n\n\t\treturn array('0' => $query, '1' => $search_params);\n\t}\n\n\t/**\n\t * Get statustext by status-no\n\t */\n\tstatic public function getStatusText($_lng, $_status = 0)\n\t{\n\t\tswitch($_status)\n\t\t{\n\t\t\tcase 0:\n\t\t\t\treturn $_lng['ticket']['open'];\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\treturn $_lng['ticket']['wait_reply'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\treturn $_lng['ticket']['replied'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn $_lng['ticket']['closed'];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Get prioritytext by priority-no\n\t */\n\tstatic public function getPriorityText($_lng, $_priority = 0)\n\t{\n\t\tswitch($_priority)\n\t\t{\n\t\t\tcase 1:\n\t\t\t\treturn $_lng['ticket']['high'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\treturn $_lng['ticket']['normal'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn $_lng['ticket']['low'];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate function convertLatin1ToHtml($str)\n\t{\n\t\t$html_entities = array (\n\t\t\t\t\t\"\u00c4\" =>  \"&Auml;\",\n\t\t\t\t\t\"\u00e4\" =>  \"&auml;\",\n\t\t\t\t\t\"\u00d6\" =>  \"&Ouml;\",\n\t\t\t\t\t\"\u00f6\" =>  \"&ouml;\",\n\t\t\t\t\t\"\u00dc\" =>  \"&Uuml;\",\n\t\t\t\t\t\"\u00fc\" =>  \"&uuml;\",\n\t\t\t\t\t\"\u00df\" =>  \"&szlig;\"\n\t\t\t\t\t/*\n\t\t\t\t\t * @TODO continue this table for all the special-characters\n\t\t\t\t\t */\n\t\t);\n\n\t\tforeach ($html_entities as $key => $value) {\n\t\t\t$str = str_replace($key, $value, $str);\n\t\t}\n\t\treturn $str;\n\t}\n\n\t/**\n\t * function customerHasTickets\n\t *\n\t * @param\tint\t\tcustomer-id\n\t *\n\t * @return\tarray/bool\tarray of ticket-ids if customer has any, else false\n\t */\n\tstatic public function customerHasTickets($_cid = 0) {\n\n\t\tif ($_cid != 0) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_TICKETS . \"` WHERE `customerid` = :cid\"\n\t\t\t);\n\t\t\tDatabase::pexecute($result_stmt, array('cid' => $_cid));\n\n\t\t\t$tickets = array();\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$tickets[] = $row['id'];\n\t\t\t}\n\n\t\t\treturn $tickets;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get a data-var\n\t */\n\tpublic function Get($_var = '', $_vartrusted = false) {\n\n\t\tif ($_var != '') {\n\t\t\tif (!$_vartrusted) {\n\t\t\t\t$_var = htmlspecialchars($_var);\n\t\t\t}\n\n\t\t\tif (isset($this->t_data[$_var])) {\n\t\t\t\tif (strtolower($_var) == 'message') {\n\t\t\t\t\t// avoid double line-breaks, #1413\n\t\t\t\t\t$this->t_data[$_var] = str_replace(\"<br />\\n\", \"\\n\", $this->t_data[$_var]);\n\t\t\t\t\treturn nl2br($this->t_data[$_var]);\n\t\t\t\t} elseif(strtolower($_var) == 'subject') {\n\t\t\t\t\treturn nl2br($this->t_data[$_var]);\n\t\t\t\t} else {\n\t\t\t\t\treturn $this->t_data[$_var];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set a data-var\n\t */\n\tpublic function Set($_var = '', $_value = '', $_vartrusted = false, $_valuetrusted = false) {\n\n\t\tif ($_var != ''\n\t\t\t&& $_value != ''\n\t\t) {\n\t\t\tif (!$_vartrusted) {\n\t\t\t\t$_var = strip_tags($_var);\n\t\t\t}\n\n\t\t\tif (!$_valuetrusted) {\n\t\t\t\t$_value = strip_tags($_value, '<br />');\n\t\t\t}\n\n\t\t\tif (strtolower($_var) == 'message'\n\t\t\t\t|| strtolower($_var) == 'subject'\n\t\t\t) {\n\t\t\t\t$_value = $this->convertLatin1ToHtml($_value);\n\t\t\t}\n\n\t\t\t$this->t_data[$_var] = $_value;\n\t\t}\n\t}\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Florian Lippert <flo@syscp.org> (2003-2009)\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Panel\n *\n */\n\ndefine('AREA', 'customer');\nrequire './lib/init.php';\n\n\nif (isset($_POST['id'])) {\n\n\t$id = intval($_POST['id']);\n\n\t//Check if the current user is allowed to see the current ticket.\n\t$stmt = Database::prepare(\"SELECT `id` FROM `panel_tickets` WHERE `id` = :id AND `customerid` = :customerid\");\n\t$result = Database::pexecute_first($stmt, array(\"id\" => $id, \"customerid\" => $userinfo['customerid']));\n\n\tif ($result == null) {\n\t\t// no rights to see the requested ticket\n\t\tstandard_error(array('ticketnotaccessible'));\n\t}\n} elseif (isset($_GET['id'])) {\n\t$id = intval($_GET['id']);\n}\n\nif ($page == 'overview') {\n\t$log->logAction(USR_ACTION, LOG_NOTICE, \"viewed customer_tickets\");\n\teval(\"echo \\\"\" . getTemplate(\"tickets/ticket\") . \"\\\";\");\n} elseif ($page == 'tickets') {\n\tif ($action == '') {\n\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"viewed customer_tickets::tickets\");\n\t\t$fields = array(\n\t\t\t'status' => $lng['ticket']['status'],\n\t\t\t'lastchange' => $lng['ticket']['lastchange'],\n\t\t\t'subject' => $lng['ticket']['subject'],\n\t\t\t'lastreplier' => $lng['ticket']['lastreplier']\n\t\t);\n\t\t$paging = new paging($userinfo, TABLE_PANEL_TICKETS, $fields);\n\t\t$stmt = Database::prepare('SELECT `main`.`id`, (SELECT COUNT(`sub`.`id`) FROM `' . TABLE_PANEL_TICKETS . '` `sub`\n\t\t\tWHERE `sub`.`answerto` = `main`.`id`) AS `ticket_answers`, `main`.`lastchange`, `main`.`subject`, `main`.`status`, `main`.`lastreplier`, `main`.`priority`\n\t\t\tFROM `' . TABLE_PANEL_TICKETS . '` as `main`\n\t\t\tWHERE `main`.`answerto` = \"0\"\n\t\t\tAND `archived` = \"0\"\n\t\t\tAND `customerid`= :customerid ' . $paging->getSqlWhere(true) . \" \" . $paging->getSqlOrderBy() . \" \" . $paging->getSqlLimit()\n\t\t);\n\t\tDatabase::pexecute($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t$paging->setEntries(Database::num_rows());\n\t\t$sortcode = $paging->getHtmlSortCode($lng);\n\t\t$arrowcode = $paging->getHtmlArrowCode($filename . '?page=' . $page . '&s=' . $s);\n\t\t$searchcode = $paging->getHtmlSearchCode($lng);\n\t\t$pagingcode = $paging->getHtmlPagingCode($filename . '?page=' . $page . '&s=' . $s);\n\t\t$i = 0;\n\t\t$count = 0;\n\t\t$tickets = '';\n\t\t$tickets_count = 0;\n\n\t\twhile ($row = $stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\tif ($paging->checkDisplay($i)) {\n\t\t\t\t$tickets_count++;\n\t\t\t\t$row = htmlentities_array($row);\n\t\t\t\t$row['lastchange'] = date(\"d.m.y H:i\", $row['lastchange']);\n\n\t\t\t\tif ($row['status'] >= 0 && $row['status'] <= 2) {\n\t\t\t\t\t$reopen = 0;\n\t\t\t\t} else {\n\t\t\t\t\t$reopen = 1;\n\t\t\t\t}\n\n\t\t\t\t$row['status'] = ticket::getStatusText($lng, $row['status']);\n\t\t\t\t$row['priority'] = ticket::getPriorityText($lng, $row['priority']);\n\n\t\t\t\tif ($row['lastreplier'] == '1') {\n\t\t\t\t\t$row['lastreplier'] = $lng['ticket']['staff'];\n\t\t\t\t\t$cananswer = 1;\n\t\t\t\t} else {\n\t\t\t\t\t$row['lastreplier'] = $lng['ticket']['customer'];\n\t\t\t\t\t$cananswer = 0;\n\t\t\t\t}\n\n\t\t\t\t$row['subject'] = html_entity_decode($row['subject']);\n\t\t\t\tif (strlen($row['subject']) > 30) {\n\t\t\t\t\t$ts = wordwrap($row['subject'], 30, \"|\");\n\t\t\t\t\t$ts = explode(\"|\", $ts);\n\t\t\t\t\t$row['subject'] = $ts[0]. '...';\n\t\t\t\t}\n\n\t\t\t\teval(\"\\$tickets.=\\\"\" . getTemplate(\"tickets/tickets_tickets\") . \"\\\";\");\n\t\t\t\t$count++;\n\t\t\t}\n\n\t\t\t$i++;\n\t\t}\n\n\t\t$supportavailable = 0;\n\t\t$time = date(\"Hi\", time());\n\t\t$day = date(\"w\", time());\n\t\t$start = substr(Settings::Get('ticket.worktime_begin'), 0, 2) . substr(Settings::Get('ticket.worktime_begin'), 3, 2);\n\t\t$end = substr(Settings::Get('ticket.worktime_end'), 0, 2) . substr(Settings::Get('ticket.worktime_end'), 3, 2);\n\n\t\tif ($time >= $start && $time <= $end) {\n\t\t\t$supportavailable = 1;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_sat') == \"0\" && $day == \"6\") {\n\t\t\t$supportavailable = 0;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_sun') == \"0\" && $day == \"0\") {\n\t\t\t$supportavailable = 0;\n\t\t}\n\n\t\tif (Settings::Get('ticket.worktime_all') == \"1\") {\n\t\t\t$supportavailable = 1;\n\t\t}\n\n\t\t$ticketsopen = 0;\n\t\t$stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\tWHERE `customerid` = :customerid\n\t\t\tAND `answerto` = \"0\"\n\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t);\n\t\t$opentickets = Database::pexecute_first($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\tif (Settings::Get('ticket.concurrently_open') != - 1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\t$notmorethanxopentickets = strtr($lng['ticket']['notmorethanxopentickets'], array('%s' => Settings::Get('ticket.concurrently_open')));\n\t\t} else {\n\t\t\t$notmorethanxopentickets = '';\n\t\t}\n\n\t\t$ticketsopen = (int)$opentickets['count'];\n\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets\") . \"\\\";\");\n\n\t} elseif ($action == 'new') {\n\t\tif ($userinfo['tickets_used'] < $userinfo['tickets'] || $userinfo['tickets'] == '-1') {\n\t\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t\t$newticket = ticket::getInstanceOf($userinfo, -1);\n\t\t\t\t$newticket->Set('subject', validate($_POST['subject'], 'subject'), true, false);\n\t\t\t\t$newticket->Set('priority', validate($_POST['priority'], 'priority'), true, false);\n\t\t\t\t$newticket->Set('category', validate($_POST['category'], 'category'), true, false);\n\t\t\t\t$newticket->Set('customer', (int)$userinfo['customerid'], true, false);\n\t\t\t\t$newticket->Set('admin', (int)$userinfo['adminid'], true, false);\n\t\t\t\t$newticket->Set('message', validate(str_replace(\"\\r\\n\", \"\\n\", $_POST['message']), 'message', '/^[^\\0]*$/'), true, false);\n\n\t\t\t\tif ($newticket->Get('subject') == null) {\n\t\t\t\t\tstandard_error(array('stringisempty', 'mysubject'));\n\t\t\t\t} elseif ($newticket->Get('message') == null) {\n\t\t\t\t\tstandard_error(array('stringisempty', 'mymessage'));\n\t\t\t\t} else {\n\t\t\t\t\t$now = time();\n\t\t\t\t\t$newticket->Set('dt', $now, true, true);\n\t\t\t\t\t$newticket->Set('lastchange', $now, true, true);\n\t\t\t\t\t$newticket->Set('ip', $_SERVER['REMOTE_ADDR'], true, true);\n\t\t\t\t\t$newticket->Set('status', '0', true, true);\n\t\t\t\t\t$newticket->Set('lastreplier', '0', true, true);\n\t\t\t\t\t$newticket->Set('by', '0', true, true);\n\t\t\t\t\t$newticket->Insert();\n\t\t\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"opened support-ticket '\" . $newticket->Get('subject') . \"'\");\n\n\t\t\t\t\t$stmt = Database::prepare('UPDATE `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\t\tSET `tickets_used`=`tickets_used` + 1\n\t\t\t\t\t\tWHERE `customerid`= :customerid'\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t\t\t\t// Customer mail\n\t\t\t\t\t$newticket->sendMail((int)$userinfo['customerid'], 'new_ticket_for_customer_subject', $lng['mails']['new_ticket_for_customer']['subject'], 'new_ticket_for_customer_mailbody', $lng['mails']['new_ticket_for_customer']['mailbody']);\n\n\t\t\t\t\t// Admin mail\n\t\t\t\t\t$newticket->sendMail(-1, 'new_ticket_by_customer_subject', $lng['mails']['new_ticket_by_customer']['subject'], 'new_ticket_by_customer_mailbody', $lng['mails']['new_ticket_by_customer']['mailbody']);\n\t\t\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$categories = '';\n\t\t\t\t$result_stmt = Database::prepare('SELECT `id`, `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\tORDER BY `logicalorder`, `name` ASC'\n\t\t\t\t);\n\t\t\t\t$result = Database::pexecute_first($result_stmt, array(\"adminid\" => $userinfo['adminid']));\n\n\t\t\t\tif (isset($result['name']) && $result['name'] != '') {\n\t\t\t\t\t$result2_stmt = Database::prepare('SELECT `id`, `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\t\t\tWHERE `adminid` = :adminid\n\t\t\t\t\t\tORDER BY `logicalorder`, `name` ASC'\n\t\t\t\t\t);\n\t\t\t\t\tDatabase::pexecute($result2_stmt, array(\"adminid\" => $userinfo['adminid']));\n\n\t\t\t\t\twhile ($row = $result2_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\t\t$categories.= makeoption($row['name'], $row['id']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t$categories = makeoption($lng['ticket']['no_cat'], '0');\n\t\t\t\t}\n\n\t\t\t\t$priorities = makeoption($lng['ticket']['high'], '1');\n\t\t\t\t$priorities.= makeoption($lng['ticket']['normal'], '2');\n\t\t\t\t$priorities.= makeoption($lng['ticket']['low'], '3');\n\t\t\t\t$ticketsopen = 0;\n\t\t\t\t$opentickets_stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\t\t\tWHERE `customerid` = :customerid\n\t\t\t\t\tAND `answerto` = \"0\"\n\t\t\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t\t\t);\n\t\t\t\t$opentickets = Database::pexecute_first($opentickets_stmt, array(\"customerid\" => $userinfo['customerid']));\n\n\t\t\t\tif (Settings::Get('ticket.concurrently_open') != -1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\t\t\t$notmorethanxopentickets = strtr($lng['ticket']['notmorethanxopentickets'], array('%s' => Settings::Get('ticket.concurrently_open')));\n\t\t\t\t} else {\n\t\t\t\t\t$notmorethanxopentickets = '';\n\t\t\t\t}\n\n\t\t\t\t$ticketsopen = (int)$opentickets['count'];\n\n\t\t\t\t$ticket_add_data = include_once dirname(__FILE__).'/lib/formfields/customer/tickets/formfield.ticket_add.php';\n\t\t\t\t$ticket_add_form = htmlform::genHTMLForm($ticket_add_data);\n\n\t\t\t\t$title = $ticket_add_data['ticket_add']['title'];\n\t\t\t\t$image = $ticket_add_data['ticket_add']['image'];\n\n\t\t\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets_new\") . \"\\\";\");\n\t\t\t}\n\t\t} else {\n\t\t\tstandard_error('nomoreticketsavailable');\n\t\t}\n\t} elseif ($action == 'answer' && $id != 0) {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\ttry {\n\t\t\t\t$replyticket = ticket::getInstanceOf($userinfo, -1);\n\t\t\t} catch(Exception $e) {\n\t\t\t\tstandard_error($e->getMessage());\n\t\t\t}\n\t\t\t$replyticket->Set('subject', validate($_POST['subject'], 'subject'), true, false);\n\t\t\t$replyticket->Set('priority', validate($_POST['priority'], 'priority'), true, false);\n\t\t\t$replyticket->Set('message', validate(str_replace(\"\\r\\n\", \"\\n\", $_POST['message']), 'message', '/^[^\\0]*$/'), true, false);\n\n\t\t\tif ($replyticket->Get('message') == null) {\n\t\t\t\tstandard_error(array('stringisempty', 'mymessage'));\n\t\t\t} else {\n\t\t\t\t$now = time();\n\t\t\t\t$replyticket->Set('customer', (int)$userinfo['customerid'], true, true);\n\t\t\t\t$replyticket->Set('lastchange', $now, true, true);\n\t\t\t\t$replyticket->Set('ip', $_SERVER['REMOTE_ADDR'], true, true);\n\t\t\t\t$replyticket->Set('status', '1', true, true);\n\t\t\t\t$replyticket->Set('answerto', (int)$id, true, false);\n\t\t\t\t$replyticket->Set('by', '0', true, true);\n\t\t\t\t$replyticket->Insert();\n\n\t\t\t\t// Update priority if changed\n\t\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\n\t\t\t\tif ($replyticket->Get('priority') != $mainticket->Get('priority')) {\n\t\t\t\t\t$mainticket->Set('priority', $replyticket->Get('priority'), true);\n\t\t\t\t}\n\n\t\t\t\t$mainticket->Set('lastchange', $now);\n\t\t\t\t$mainticket->Set('lastreplier', '0');\n\t\t\t\t$mainticket->Set('status', '1');\n\t\t\t\t$mainticket->Update();\n\t\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"answered support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\t\t\t$mainticket->sendMail(-1, 'new_reply_ticket_by_customer_subject', $lng['mails']['new_reply_ticket_by_customer']['subject'], 'new_reply_ticket_by_customer_mailbody', $lng['mails']['new_reply_ticket_by_customer']['mailbody']);\n\t\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t\t}\n\t\t} else {\n\t\t\t$ticket_replies = '';\n\t\t\ttry {\n\t\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\t} catch(Exception $e) {\n\t\t\t\tstandard_error($e->getMessage());\n\t\t\t}\n\t\t\t$dt = date(\"d.m.Y H:i\\h\", $mainticket->Get('dt'));\n\t\t\t$status = ticket::getStatusText($lng, $mainticket->Get('status'));\n\n\t\t\tif ($mainticket->Get('status') >= 0 && $mainticket->Get('status') <= 2) {\n\t\t\t\t$isclosed = 0;\n\t\t\t} else {\n\t\t\t\t$isclosed = 1;\n\t\t\t}\n\n\t\t\tif ($mainticket->Get('by') == '1') {\n\t\t\t\t$by = $lng['ticket']['staff'];\n\t\t\t} else {\n\t\t\t\t$cid = $mainticket->Get('customer');\n\t\t\t\t$usr_stmt = Database::prepare('SELECT `customerid`, `firstname`, `name`, `company`, `loginname`\n\t\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\tWHERE `customerid` = :customerid '\n\t\t\t\t);\n\t\t\t\t$usr = Database::pexecute_first($usr_stmt, array(\"customerid\" => $cid));\n\t\t\t\t$by = getCorrectFullUserDetails($usr);\n\t\t\t}\n\n\t\t\t$subject = $mainticket->Get('subject');\n\t\t\t$message = $mainticket->Get('message');\n\t\t\teval(\"\\$ticket_replies.=\\\"\" . getTemplate(\"tickets/tickets_tickets_main\") . \"\\\";\");\n\t\t\t$result_stmt = Database::prepare('SELECT `name` FROM `' . TABLE_PANEL_TICKET_CATS . '`\n\t\t\t\tWHERE `id`= :id '\n\t\t\t);\n\t\t\t$row = Database::pexecute_first($result_stmt, array(\"id\" => $mainticket->Get('category')));\n\n\t\t\t$andere_stmt = Database::prepare('SELECT * FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\t\tWHERE `answerto`= :answerto\n\t\t\t\tORDER BY `lastchange` ASC'\n\t\t\t);\n\t\t\tDatabase::pexecute($andere_stmt, array(\"answerto\" => $id));\n\t\t\t$numrows_andere = Database::num_rows();\n\n\t\t\twhile ($row2 = $andere_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$subticket = ticket::getInstanceOf($userinfo, (int)$row2['id']);\n\t\t\t\t$lastchange = date(\"d.m.Y H:i\\h\", $subticket->Get('lastchange'));\n\n\t\t\t\tif ($subticket->Get('by') == '1') {\n\t\t\t\t\t$by = $lng['ticket']['staff'];\n\t\t\t\t} else {\n\t\t\t\t\t$cid = $subticket->Get('customer');\n\t\t\t\t\t$usr_stmt = Database::prepare('\n\t\t\t\t\t\tSELECT `customerid`, `firstname`, `name`, `company`, `loginname`\n\t\t\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '`\n\t\t\t\t\t\tWHERE `customerid` = :customerid '\n\t\t\t\t\t);\n\t\t\t\t\t$usr = Database::pexecute_first($usr_stmt, array(\"customerid\" => $cid));\n\t\t\t\t\t$by = getCorrectFullUserDetails($usr);\n\t\t\t\t}\n\n\t\t\t\t$subject = $subticket->Get('subject');\n\t\t\t\t$message = $subticket->Get('message');\n\n\t\t\t\t$row2 = htmlentities_array($row2);\n\t\t\t\teval(\"\\$ticket_replies.=\\\"\" . getTemplate(\"tickets/tickets_tickets_list\") . \"\\\";\");\n\t\t\t}\n\n\t\t\t$priorities = makeoption($lng['ticket']['high'], '1', $mainticket->Get('priority'), true, true);\n\t\t\t$priorities.= makeoption($lng['ticket']['normal'], '2', $mainticket->Get('priority'), true, true);\n\t\t\t$priorities.= makeoption($lng['ticket']['low'], '3', $mainticket->Get('priority'), true, true);\n\t\t\t$subject = htmlentities($mainticket->Get('subject'));\n\t\t\t$ticket_replies_count = $numrows_andere + 1;\n\n\t\t\t// don't forget the main-ticket!\n\t\t\t$ticket_reply_data = include_once dirname(__FILE__).'/lib/formfields/customer/tickets/formfield.ticket_reply.php';\n\t\t\t$ticket_reply_form = htmlform::genHTMLForm($ticket_reply_data);\n\n\t\t\t$title = $ticket_reply_data['ticket_reply']['title'];\n\t\t\t$image = $ticket_reply_data['ticket_reply']['image'];\n\n\t\t\teval(\"echo \\\"\" . getTemplate(\"tickets/tickets_reply\") . \"\\\";\");\n\t\t}\n\t} elseif ($action == 'close' && $id != 0) {\n\t\tif (isset($_POST['send']) && $_POST['send'] == 'send') {\n\t\t\t$now = time();\n\t\t\ttry {\n\t\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\t} catch(Exception $e) {\n\t\t\t\tstandard_error($e->getMessage());\n\t\t\t}\n\t\t\t$mainticket->Set('lastchange', $now, true, true);\n\t\t\t$mainticket->Set('lastreplier', '0', true, true);\n\t\t\t$mainticket->Set('status', '3', true, true);\n\t\t\t$mainticket->Update();\n\t\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"closed support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t\t} else {\n\t\t\ttry {\n\t\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t\t} catch(Exception $e) {\n\t\t\t\tstandard_error($e->getMessage());\n\t\t\t}\n\t\t\task_yesno('ticket_reallyclose', $filename, array('id' => $id, 'page' => $page, 'action' => $action), $mainticket->Get('subject'));\n\t\t}\n\t} elseif ($action == 'reopen' && $id != 0) {\n\t\t$ticketsopen = 0;\n\t\t$opentickets_stmt = Database::prepare('SELECT COUNT(`id`) as `count` FROM `' . TABLE_PANEL_TICKETS . '`\n\t\t\tWHERE `customerid` = :customerid\n\t\t\tAND `answerto` = \"0\"\n\t\t\tAND (`status` = \"0\" OR `status` = \"1\" OR `status` = \"2\")'\n\t\t);\n\t\t$opentickets = Database::pexecute_first($opentickets_stmt, array(\"customerid\" => $userinfo['customerid']));\n\t\t$ticketsopen = (int)$opentickets['count'];\n\n\t\tif ($ticketsopen > Settings::Get('ticket.concurrently_open') && Settings::Get('ticket.concurrently_open') != - 1 && Settings::Get('ticket.concurrently_open') != '') {\n\t\t\tstandard_error('notmorethanxopentickets', Settings::Get('ticket.concurrently_open'));\n\t\t}\n\n\t\t$now = time();\n\t\ttry {\n\t\t\t$mainticket = ticket::getInstanceOf($userinfo, (int)$id);\n\t\t} catch(Exception $e) {\n\t\t\tstandard_error($e->getMessage());\n\t\t}\n\t\t$mainticket->Set('lastchange', $now, true, true);\n\t\t$mainticket->Set('lastreplier', '0', true, true);\n\t\t$mainticket->Set('status', '0', true, true);\n\t\t$mainticket->Update();\n\t\t$log->logAction(USR_ACTION, LOG_NOTICE, \"reopened support-ticket '\" . $mainticket->Get('subject') . \"'\");\n\t\tredirectTo($filename, array('page' => $page, 's' => $s));\n\t}\n}\n", "<?php\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2003-2009 the SysCP Team (see authors).\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright  (c) the authors\n * @author     Michael Kaufmann <mkaufmann@nutime.de>\n * @author     Froxlor team <team@froxlor.org> (2010-)\n * @license    GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package    Logger\n *\n * @link       http://www.nutime.de/\n *\n * Support Tickets - Tickets-Class\n */\nclass ticket\n{\n\n\t/**\n\t * Userinfo\n\t *\n\t * @var array\n\t */\n\tprivate $userinfo = array();\n\n\t/**\n\t * Ticket ID\n\t *\n\t * @var int\n\t */\n\tprivate $tid = - 1;\n\n\t/**\n\t * Ticket Data Array\n\t *\n\t * @var array\n\t */\n\tprivate $t_data = array();\n\n\t/**\n\t * Ticket-Object-Array\n\t *\n\t * @var ticket\n\t */\n\tprivate static $tickets = array();\n\n\t/**\n\t * Class constructor.\n\t *\n\t * @param\n\t *        \tarray userinfo\n\t * @param\n\t *        \tint ticket id\n\t */\n\tprivate function __construct($userinfo, $tid = - 1)\n\t{\n\t\t$this->userinfo = $userinfo;\n\t\t$this->tid = $tid;\n\t\t\n\t\t// initialize data array\n\t\t$this->initData();\n\t\t\n\t\t// read data from database\n\t\t$this->readData();\n\t}\n\n\t/**\n\t * Singleton ftw ;-)\n\t *\n\t * @param\n\t *        \tarray userinfo\n\t * @param\n\t *        \tint ticket id\n\t */\n\tstatic public function getInstanceOf($_usernfo, $_tid)\n\t{\n\t\tif (! isset(self::$tickets[$_tid . '-' . $_usernfo['userid']])) {\n\t\t\tself::$tickets[$_tid . '-' . $_usernfo['userid']] = new ticket($_usernfo, $_tid);\n\t\t}\n\t\treturn self::$tickets[$_tid . '-' . $_usernfo['userid']];\n\t}\n\n\t/**\n\t * Initialize data-array\n\t */\n\tprivate function initData()\n\t{\n\t\t$this->Set('customer', 0, true, true);\n\t\t$this->Set('admin', 1, true, true);\n\t\t$this->Set('subject', '', true, true);\n\t\t$this->Set('category', '0', true, true);\n\t\t$this->Set('priority', '2', true, true);\n\t\t$this->Set('message', '', true, true);\n\t\t$this->Set('dt', 0, true, true);\n\t\t$this->Set('lastchange', 0, true, true);\n\t\t$this->Set('ip', '', true, true);\n\t\t$this->Set('status', '0', true, true);\n\t\t$this->Set('lastreplier', '0', true, true);\n\t\t$this->Set('by', '0', true, true);\n\t\t$this->Set('answerto', '0', true, true);\n\t\t$this->Set('archived', '0', true, true);\n\t}\n\n\t/**\n\t * Read ticket data from database.\n\t */\n\tprivate function readData()\n\t{\n\t\tif (isset($this->tid) && $this->tid != - 1) {\n\t\t\t\n\t\t\tif ($this->userinfo['customerid'] > 0) {\n\t\t\t\t$_ticket_stmt = Database::prepare('\n\t\t\t\t\tSELECT * FROM `' . TABLE_PANEL_TICKETS . '` WHERE `id` = :tid AND `customerid` = :cid');\n\t\t\t\t$tdata = array(\n\t\t\t\t\t'tid' => $this->tid,\n\t\t\t\t\t'cid' => $this->userinfo['customerid']\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t$_ticket_stmt = Database::prepare('\n\t\t\t\t\tSELECT * FROM `' . TABLE_PANEL_TICKETS . '` WHERE `id` = :tid' . ($this->userinfo['customers_see_all'] ? '' : ' AND `adminid` = :adminid'));\n\t\t\t\t$tdata = array(\n\t\t\t\t\t'tid' => $this->tid\n\t\t\t\t);\n\t\t\t\tif ($this->userinfo['customers_see_all'] != '1') {\n\t\t\t\t\t$tdata['adminid'] = $this->userinfo['adminid'];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$_ticket = Database::pexecute_first($_ticket_stmt, $tdata);\n\t\t\t\n\t\t\tif ($_ticket == false) {\n\t\t\t\tthrow new Exception(\"Invalid ticket id\");\n\t\t\t}\n\t\t\t\n\t\t\t$this->Set('customer', $_ticket['customerid'], true, false);\n\t\t\t$this->Set('admin', $_ticket['adminid'], true, false);\n\t\t\t$this->Set('subject', $_ticket['subject'], true, false);\n\t\t\t$this->Set('category', $_ticket['category'], true, false);\n\t\t\t$this->Set('priority', $_ticket['priority'], true, false);\n\t\t\t$this->Set('message', $_ticket['message'], true, false);\n\t\t\t$this->Set('dt', $_ticket['dt'], true, false);\n\t\t\t$this->Set('lastchange', $_ticket['lastchange'], true, false);\n\t\t\t$this->Set('ip', $_ticket['ip'], true, false);\n\t\t\t$this->Set('status', $_ticket['status'], true, false);\n\t\t\t$this->Set('lastreplier', $_ticket['lastreplier'], true, false);\n\t\t\t$this->Set('by', $_ticket['by'], true, false);\n\t\t\t$this->Set('answerto', $_ticket['answerto'], true, false);\n\t\t\t$this->Set('archived', $_ticket['archived'], true, false);\n\t\t}\n\t}\n\n\t/**\n\t * Insert data to database\n\t */\n\tpublic function Insert()\n\t{\n\t\t$ins_stmt = Database::prepare(\"\n\t\t\tINSERT INTO `\" . TABLE_PANEL_TICKETS . \"` SET\n                `customerid` = :customerid,\n                `adminid` = :adminid,\n                `category` = :category,\n                `priority` = :priority,\n                `subject` = :subject,\n                `message` = :message,\n                `dt` = :dt,\n                `lastchange` = :lastchange,\n                `ip` = :ip,\n                `status` = :status,\n                `lastreplier` = :lastreplier,\n                `by` = :by,\n                `answerto` = :answerto\");\n\t\t$ins_data = array(\n\t\t\t'customerid' => $this->Get('customer'),\n\t\t\t'adminid' => $this->Get('admin'),\n\t\t\t'category' => $this->Get('category'),\n\t\t\t'priority' => $this->Get('priority'),\n\t\t\t'subject' => $this->Get('subject'),\n\t\t\t'message' => $this->Get('message'),\n\t\t\t'dt' => time(),\n\t\t\t'lastchange' => time(),\n\t\t\t'ip' => $this->Get('ip'),\n\t\t\t'status' => $this->Get('status'),\n\t\t\t'lastreplier' => $this->Get('lastreplier'),\n\t\t\t'by' => $this->Get('by'),\n\t\t\t'answerto' => $this->Get('answerto')\n\t\t);\n\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t$this->tid = Database::lastInsertId();\n\t\treturn true;\n\t}\n\n\t/**\n\t * Update data in database\n\t */\n\tpublic function Update()\n\t{\n\t\t\n\t\t// Update \"main\" ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET\n                `priority` = :priority,\n                `lastchange` = :lastchange,\n                `status` = :status,\n                `lastreplier` = :lastreplier\n                WHERE `id` = :tid');\n\t\t$upd_data = array(\n\t\t\t'priority' => $this->Get('priority'),\n\t\t\t'lastchange' => $this->Get('lastchange'),\n\t\t\t'status' => $this->Get('status'),\n\t\t\t'lastreplier' => $this->Get('lastreplier'),\n\t\t\t'tid' => $this->tid\n\t\t);\n\t\tDatabase::pexecute($upd_stmt, $upd_data);\n\t\treturn true;\n\t}\n\n\t/**\n\t * Moves a ticket to the archive\n\t */\n\tpublic function Archive()\n\t{\n\t\t\n\t\t// Update \"main\" ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET `archived` = \"1\" WHERE `id` = :tid');\n\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t'tid' => $this->tid\n\t\t));\n\t\t\n\t\t// Update \"answers\" to ticket\n\t\t$upd_stmt = Database::prepare('\n\t\t\tUPDATE `' . TABLE_PANEL_TICKETS . '` SET `archived` = \"1\" WHERE `answerto` = :tid');\n\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t'tid' => $this->tid\n\t\t));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Remove ticket from database\n\t */\n\tpublic function Delete()\n\t{\n\t\t\n\t\t// Delete \"main\" ticket\n\t\t$del_stmt = Database::prepare('\n\t\t\tDELETE FROM `' . TABLE_PANEL_TICKETS . '` WHERE `id` = :tid');\n\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t'tid' => $this->tid\n\t\t));\n\t\t\n\t\t// Delete \"answers\" to ticket\"\n\t\t$del_stmt = Database::prepare('\n\t\t\tDELETE FROM `' . TABLE_PANEL_TICKETS . '` WHERE `answerto` = :tid');\n\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t'tid' => $this->tid\n\t\t));\n\t\treturn true;\n\t}\n\n\t/**\n\t * Mail notifications\n\t */\n\tpublic function sendMail($customerid = - 1, $template_subject = null, $default_subject = null, $template_body = null, $default_body = null)\n\t{\n\t\tglobal $mail, $theme;\n\t\t\n\t\t// Some checks are to be made here in the future\n\t\tif ($customerid != - 1) {\n\t\t\t// Get e-mail message for customer\n\t\t\t$usr_stmt = Database::prepare('\n\t\t\t\tSELECT `name`, `firstname`, `company`, `email`\n\t\t\t\tFROM `' . TABLE_PANEL_CUSTOMERS . '` WHERE `customerid` = :customerid');\n\t\t\t$usr = Database::pexecute_first($usr_stmt, array(\n\t\t\t\t'customerid' => $customerid\n\t\t\t));\n\t\t\t\n\t\t\t$replace_arr = array(\n\t\t\t\t'FIRSTNAME' => $usr['firstname'],\n\t\t\t\t'NAME' => $usr['name'],\n\t\t\t\t'COMPANY' => $usr['company'],\n\t\t\t\t'SALUTATION' => getCorrectUserSalutation($usr),\n\t\t\t\t'SUBJECT' => $this->Get('subject', true)\n\t\t\t);\n\t\t} else {\n\t\t\t$replace_arr = array(\n\t\t\t\t'SUBJECT' => $this->Get('subject', true)\n\t\t\t);\n\t\t}\n\t\t$tpl_seldata = array(\n\t\t\t'adminid' => $this->userinfo['adminid'],\n\t\t\t'lang' => $this->userinfo['def_language'],\n\t\t\t'tplsubject' => $template_subject\n\t\t);\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid`= :adminid\n\t\t\tAND `language`= :lang\n\t\t\tAND `templategroup`= 'mails' AND `varname`= :tplsubject\");\n\t\t$result = Database::pexecute_first($result_stmt, $tpl_seldata);\n\t\t$mail_subject = html_entity_decode(replace_variables((($result['value'] != '') ? $result['value'] : $default_subject), $replace_arr));\n\t\t\n\t\tunset($tpl_seldata['tplsubject']);\n\t\t$tpl_seldata['tplmailbody'] = $template_body;\n\t\t\n\t\t$result_stmt = Database::prepare(\"\n\t\t\tSELECT `value` FROM `\" . TABLE_PANEL_TEMPLATES . \"`\n\t\t\tWHERE `adminid`= :adminid\n\t\t\tAND `language`= :lang\n\t\t\tAND `templategroup`= 'mails' AND `varname`= :tplmailbody\");\n\t\t$result = Database::pexecute_first($result_stmt, $tpl_seldata);\n\t\t$mail_body = html_entity_decode(replace_variables((($result['value'] != '') ? $result['value'] : $default_body), $replace_arr));\n\t\t\n\t\tif ($customerid != - 1) {\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->SetFrom(Settings::Get('ticket.noreply_email'), Settings::Get('ticket.noreply_name'));\n\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$mail->AddAddress($usr['email'], $usr['firstname'] . ' ' . $usr['name']);\n\t\t\t\t$mail->Send();\n\t\t\t} catch (phpmailerException $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\t\t\t\n\t\t\tif ($_mailerror) {\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t'loginname' => 'ticket_class'\n\t\t\t\t));\n\t\t\t\t$rstlog->logAction(ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\tstandard_error('errorsendingmail', $usr['email']);\n\t\t\t}\n\t\t\t$mail->ClearAddresses();\n\t\t} else {\n\t\t\t\n\t\t\t$admin_stmt = Database::prepare(\"\n\t\t\t\tSELECT `name`, `email` FROM `\" . TABLE_PANEL_ADMINS . \"`\n\t\t\t\tWHERE `adminid` = :adminid\");\n\t\t\t$admin = Database::pexecute_first($admin_stmt, array(\n\t\t\t\t'adminid' => $this->userinfo['adminid']\n\t\t\t));\n\t\t\t$_mailerror = false;\n\t\t\ttry {\n\t\t\t\t$mail->SetFrom(Settings::Get('ticket.noreply_email'), Settings::Get('ticket.noreply_name'));\n\t\t\t\t$mail->Subject = $mail_subject;\n\t\t\t\t$mail->AltBody = $mail_body;\n\t\t\t\t$mail->MsgHTML(str_replace(\"\\n\", \"<br />\", $mail_body));\n\t\t\t\t$mail->AddAddress($admin['email'], $admin['name']);\n\t\t\t\t$mail->Send();\n\t\t\t} catch (phpmailerException $e) {\n\t\t\t\t$mailerr_msg = $e->errorMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t} catch (Exception $e) {\n\t\t\t\t$mailerr_msg = $e->getMessage();\n\t\t\t\t$_mailerror = true;\n\t\t\t}\n\t\t\t\n\t\t\tif ($_mailerror) {\n\t\t\t\t$rstlog = FroxlorLogger::getInstanceOf(array(\n\t\t\t\t\t'loginname' => 'ticket_class'\n\t\t\t\t));\n\t\t\t\t$rstlog->logAction(ADM_ACTION, LOG_ERR, \"Error sending mail: \" . $mailerr_msg);\n\t\t\t\tstandard_error('errorsendingmail', $admin['email']);\n\t\t\t}\n\t\t\t\n\t\t\t$mail->ClearAddresses();\n\t\t}\n\t}\n\n\t/**\n\t * Add a support-categories\n\t */\n\tstatic public function addCategory($_category = null, $_admin = 1, $_order = 1)\n\t{\n\t\tif ($_category != null && $_category != '') {\n\t\t\tif ($_order < 1) {\n\t\t\t\t$_order = 1;\n\t\t\t}\n\t\t\t\n\t\t\t$ins_stmt = Database::prepare(\"\n\t\t\t\tINSERT INTO `\" . TABLE_PANEL_TICKET_CATS . \"` SET\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`adminid` = :adminid,\n\t\t\t\t\t`logicalorder` = :lo\");\n\t\t\t$ins_data = array(\n\t\t\t\t'name' => $_category,\n\t\t\t\t'adminid' => $_admin,\n\t\t\t\t'lo' => $_order\n\t\t\t);\n\t\t\tDatabase::pexecute($ins_stmt, $ins_data);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Edit a support-categories\n\t */\n\tstatic public function editCategory($_category = null, $_id = 0, $_order = 1)\n\t{\n\t\tif ($_category != null && $_category != '' && $_id != 0) {\n\t\t\tif ($_order < 1) {\n\t\t\t\t$_order = 1;\n\t\t\t}\n\t\t\t\n\t\t\t$upd_stmt = Database::prepare(\"\n\t\t\t\tUPDATE `\" . TABLE_PANEL_TICKET_CATS . \"` SET\n\t\t\t\t\t`name` = :name,\n\t\t\t\t\t`logicalorder` = :lo\n                  WHERE `id` = :id\n\t\t\t\");\n\t\t\tDatabase::pexecute($upd_stmt, array(\n\t\t\t\t'name' => $_category,\n\t\t\t\t'lo' => $_order,\n\t\t\t\t'id' => $_id\n\t\t\t));\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Delete a support-categories\n\t */\n\tstatic public function deleteCategory($_id = 0)\n\t{\n\t\tif ($_id != 0) {\n\t\t\t\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT COUNT(`id`) as `numtickets` FROM `\" . TABLE_PANEL_TICKETS . \"`\n\t\t\t\tWHERE `category` = :cat\");\n\t\t\t$result = Database::pexecute_first($result_stmt, array(\n\t\t\t\t'cat' => $_id\n\t\t\t));\n\t\t\t\n\t\t\tif ($result['numtickets'] == \"0\") {\n\t\t\t\t$del_stmt = Database::prepare(\"\n\t\t\t\t\tDELETE FROM `\" . TABLE_PANEL_TICKET_CATS . \"` WHERE `id` = :id\");\n\t\t\t\tDatabase::pexecute($del_stmt, array(\n\t\t\t\t\t'id' => $_id\n\t\t\t\t));\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\t/**\n\t * Return a support-category-name\n\t */\n\tstatic public function getCategoryName($_id = 0)\n\t{\n\t\tif ($_id != 0) {\n\t\t\t$stmt = Database::prepare(\"\n\t\t\t\tSELECT `name` FROM `\" . TABLE_PANEL_TICKET_CATS . \"` WHERE `id` = :id\");\n\t\t\t$category = Database::pexecute_first($stmt, array(\n\t\t\t\t'id' => $_id\n\t\t\t));\n\t\t\treturn $category['name'];\n\t\t}\n\t\treturn null;\n\t}\n\n\t/**\n\t * get the highest order number\n\t *\n\t * @param object $_uid\n\t *        \tadmin-id (optional)\n\t *        \t\n\t * @return int highest order number\n\t */\n\tstatic public function getHighestOrderNumber($_uid = 0)\n\t{\n\t\t$where = '';\n\t\t$sel_data = array();\n\t\tif ($_uid > 0) {\n\t\t\t$where = \" WHERE `adminid` = :adminid\";\n\t\t\t$sel_data['adminid'] = $_uid;\n\t\t}\n\t\t$sql = \"SELECT MAX(`logicalorder`) as `highestorder` FROM `\" . TABLE_PANEL_TICKET_CATS . \"`\" . $where . \";\";\n\t\t$result_stmt = Database::prepare($sql);\n\t\t$result = Database::pexecute_first($result_stmt, $sel_data);\n\t\treturn (isset($result['highestorder']) ? (int) $result['highestorder'] : 0);\n\t}\n\n\t/**\n\t * returns the last x archived tickets\n\t */\n\tstatic public function getLastArchived($_num = 10, $_admin = 1)\n\t{\n\t\tif ($_num > 0) {\n\t\t\t\n\t\t\t$archived = array();\n\t\t\t$counter = 0;\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT *, (\n\t\t\t\t\tSELECT COUNT(`sub`.`id`)\n\t\t\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `sub`\n\t\t\t\t\tWHERE `sub`.`answerto` = `main`.`id`\n\t\t\t\t) as `ticket_answers`\n\t\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `main`\n\t\t\t\tWHERE `main`.`answerto` = '0' AND `main`.`archived` = '1'\n\t\t\t\tAND `main`.`adminid` = :adminid\n\t\t\t\tORDER BY `main`.`lastchange` DESC LIMIT 0, \" . (int) $_num);\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'adminid' => $_admin\n\t\t\t));\n\t\t\t\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t\n\t\t\t\t$archived[$counter]['id'] = $row['id'];\n\t\t\t\t$archived[$counter]['customerid'] = $row['customerid'];\n\t\t\t\t$archived[$counter]['adminid'] = $row['adminid'];\n\t\t\t\t$archived[$counter]['lastreplier'] = $row['lastreplier'];\n\t\t\t\t$archived[$counter]['ticket_answers'] = $row['ticket_answers'];\n\t\t\t\t$archived[$counter]['category'] = $row['category'];\n\t\t\t\t$archived[$counter]['priority'] = $row['priority'];\n\t\t\t\t$archived[$counter]['subject'] = $row['subject'];\n\t\t\t\t$archived[$counter]['message'] = $row['message'];\n\t\t\t\t$archived[$counter]['dt'] = $row['dt'];\n\t\t\t\t$archived[$counter]['lastchange'] = $row['lastchange'];\n\t\t\t\t$archived[$counter]['status'] = $row['status'];\n\t\t\t\t$archived[$counter]['by'] = $row['by'];\n\t\t\t\t$counter ++;\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($archived[0]['id'])) {\n\t\t\t\treturn $archived;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns a sql-statement to search the archive\n\t * including necessary parameter-array for PDO\n\t *\n\t * @return array 0 = query, 1 = params-array\n\t */\n\tstatic public function getArchiveSearchStatement($subject = null, $priority = null, $fromdate = null, $todate = null, $message = null, $customer = - 1, $admin = 1, $categories = null)\n\t{\n\t\t$search_params = array();\n\t\t\n\t\t$query = \"\n\t\t\tSELECT `main`.*, (\n\t\t\t\tSELECT COUNT(`sub`.`id`) FROM `\" . TABLE_PANEL_TICKETS . \"` `sub`\n\t\t\t\tWHERE `sub`.`answerto` = `main`.`id`\n\t\t\t) as `ticket_answers`\n\t\t\tFROM `\" . TABLE_PANEL_TICKETS . \"` `main`\n\t\t\tWHERE `main`.`archived` = '1' AND `main`.`adminid` = :admin\";\n\t\t\n\t\t$search_params['admin'] = $admin;\n\t\t\n\t\tif ($subject != NULL && $subject != '') {\n\t\t\t$query .= \" AND `main`.`subject` LIKE :subject\";\n\t\t\t$search_params['subject'] = \"%\" . $subject . \"%\";\n\t\t}\n\t\t\n\t\tif ($priority != null && isset($priority[0]) && $priority[0] != '') {\n\t\t\t\n\t\t\tif (isset($priority[1]) && $priority[1] != '') {\n\t\t\t\t\n\t\t\t\tif (isset($priority[2]) && $priority[2] != '') {\n\t\t\t\t\t\n\t\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '2' OR `main`.`priority` = '3')\";\n\t\t\t\t} else {\n\t\t\t\t\t\n\t\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '1')\";\n\t\t\t\t}\n\t\t\t} elseif (isset($priority[2]) && $priority[2] != '') {\n\t\t\t\t\n\t\t\t\t$query .= \" AND (`main`.`priority` = '1' OR `main`.`priority` = '3')\";\n\t\t\t} else {\n\t\t\t\t$query .= \" AND `main`.`priority` = '1'\";\n\t\t\t}\n\t\t} elseif ($priority != null && isset($priority[1]) && $priority[1] != '') {\n\t\t\tif (isset($priority[2]) && $priority[2] != '') {\n\t\t\t\t$query .= \" AND (`main`.`priority` = '2' OR `main`.`priority` = '3')\";\n\t\t\t} else {\n\t\t\t\t$query .= \" AND `main`.`priority` = '2'\";\n\t\t\t}\n\t\t} elseif ($priority != null) {\n\t\t\t\n\t\t\tif (isset($priority[3]) && $priority[3] != '') {\n\t\t\t\t$query .= \" AND `main`.`priority` = '3'\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($fromdate != null && $fromdate > 0) {\n\t\t\t$query .= \" AND `main`.`lastchange` > :fromdate\";\n\t\t\t$search_params['fromdate'] = strtotime($fromdate);\n\t\t}\n\t\t\n\t\tif ($todate != null && $todate > 0) {\n\t\t\t$query .= \" AND `main`.`lastchange` < :todate\";\n\t\t\t$search_params['todate'] = strtotime($todate);\n\t\t}\n\t\t\n\t\tif ($message != null && $message != '') {\n\t\t\t$query .= \" AND `main`.`message` LIKE :message\";\n\t\t\t$search_params['message'] = \"%\" . $message . \"%\";\n\t\t}\n\t\t\n\t\tif ($customer != - 1) {\n\t\t\t$query .= \" AND `main`.`customerid` = :customer\";\n\t\t\t$search_params['customer'] = $customer;\n\t\t}\n\t\t\n\t\tif ($categories != null) {\n\t\t\t\n\t\t\t$cats = array();\n\t\t\tforeach ($categories as $index => $catid) {\n\t\t\t\tif ($catid != \"\") {\n\t\t\t\t\t$cats[] = $catid;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count($cats) > 0) {\n\t\t\t\t$query .= \" AND (\";\n\t\t\t}\n\t\t\t\n\t\t\tforeach ($cats as $catid) {\n\t\t\t\tif (isset($catid) && $catid > 0) {\n\t\t\t\t\t$query .= \"`main`.`category` = :catid_\" . $catid . \" OR \";\n\t\t\t\t\t$search_params['catid_' . $catid] = $catid;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (count($cats) > 0) {\n\t\t\t\t$query = substr($query, 0, strlen($query) - 3);\n\t\t\t\t$query .= \") \";\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn array(\n\t\t\t'0' => $query,\n\t\t\t'1' => $search_params\n\t\t);\n\t}\n\n\t/**\n\t * Get statustext by status-no\n\t */\n\tstatic public function getStatusText($_lng, $_status = 0)\n\t{\n\t\tswitch ($_status) {\n\t\t\tcase 0:\n\t\t\t\treturn $_lng['ticket']['open'];\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\treturn $_lng['ticket']['wait_reply'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\treturn $_lng['ticket']['replied'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn $_lng['ticket']['closed'];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Get prioritytext by priority-no\n\t */\n\tstatic public function getPriorityText($_lng, $_priority = 0)\n\t{\n\t\tswitch ($_priority) {\n\t\t\tcase 1:\n\t\t\t\treturn $_lng['ticket']['high'];\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\treturn $_lng['ticket']['normal'];\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\treturn $_lng['ticket']['low'];\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate function convertLatin1ToHtml($str)\n\t{\n\t\t$html_entities = array(\n\t\t\t\"\u00c4\" => \"&Auml;\",\n\t\t\t\"\u00e4\" => \"&auml;\",\n\t\t\t\"\u00d6\" => \"&Ouml;\",\n\t\t\t\"\u00f6\" => \"&ouml;\",\n\t\t\t\"\u00dc\" => \"&Uuml;\",\n\t\t\t\"\u00fc\" => \"&uuml;\",\n\t\t\t\"\u00df\" => \"&szlig;\"\n\t\t\t/*\n\t\t * @TODO continue this table for all the special-characters\n\t\t */\n\t\t);\n\t\t\n\t\tforeach ($html_entities as $key => $value) {\n\t\t\t$str = str_replace($key, $value, $str);\n\t\t}\n\t\treturn $str;\n\t}\n\n\t/**\n\t * function customerHasTickets\n\t *\n\t * @param\n\t *        \tint customer-id\n\t *        \t\n\t * @return array/bool array of ticket-ids if customer has any, else false\n\t */\n\tstatic public function customerHasTickets($_cid = 0)\n\t{\n\t\tif ($_cid != 0) {\n\t\t\t$result_stmt = Database::prepare(\"\n\t\t\t\tSELECT `id` FROM `\" . TABLE_PANEL_TICKETS . \"` WHERE `customerid` = :cid\");\n\t\t\tDatabase::pexecute($result_stmt, array(\n\t\t\t\t'cid' => $_cid\n\t\t\t));\n\t\t\t\n\t\t\t$tickets = array();\n\t\t\twhile ($row = $result_stmt->fetch(PDO::FETCH_ASSOC)) {\n\t\t\t\t$tickets[] = $row['id'];\n\t\t\t}\n\t\t\t\n\t\t\treturn $tickets;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\n\t/**\n\t * Get a data-var\n\t */\n\tpublic function Get($_var = '', $_vartrusted = false)\n\t{\n\t\tif ($_var != '') {\n\t\t\tif (! $_vartrusted) {\n\t\t\t\t$_var = htmlspecialchars($_var);\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($this->t_data[$_var])) {\n\t\t\t\tif (strtolower($_var) == 'message') {\n\t\t\t\t\t// avoid double line-breaks, #1413\n\t\t\t\t\t$this->t_data[$_var] = str_replace(\"<br />\\n\", \"\\n\", $this->t_data[$_var]);\n\t\t\t\t\treturn nl2br($this->t_data[$_var]);\n\t\t\t\t} elseif (strtolower($_var) == 'subject') {\n\t\t\t\t\treturn nl2br($this->t_data[$_var]);\n\t\t\t\t} else {\n\t\t\t\t\treturn $this->t_data[$_var];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Set a data-var\n\t */\n\tpublic function Set($_var = '', $_value = '', $_vartrusted = false, $_valuetrusted = false)\n\t{\n\t\tif ($_var != '' && $_value != '') {\n\t\t\tif (! $_vartrusted) {\n\t\t\t\t$_var = strip_tags($_var);\n\t\t\t}\n\t\t\t\n\t\t\tif (! $_valuetrusted) {\n\t\t\t\t$_value = strip_tags($_value, '<br />');\n\t\t\t}\n\t\t\t\n\t\t\tif (strtolower($_var) == 'message' || strtolower($_var) == 'subject') {\n\t\t\t\t$_value = $this->convertLatin1ToHtml($_value);\n\t\t\t}\n\t\t\t\n\t\t\t$this->t_data[$_var] = $_value;\n\t\t}\n\t}\n}\n"], "filenames": ["customer_tickets.php", "lib/classes/ticket/class.ticket.php"], "buggy_code_start_loc": [241, 22], "buggy_code_end_loc": [381, 780], "fixing_code_start_loc": [241, 22], "fixing_code_end_loc": [401, 787], "type": "CWE-732", "message": "Froxlor through 0.9.39.5 has Incorrect Access Control for tickets not owned by the current user.", "other": {"cve": {"id": "CVE-2018-12642", "sourceIdentifier": "cve@mitre.org", "published": "2018-06-22T12:29:00.273", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Froxlor through 0.9.39.5 has Incorrect Access Control for tickets not owned by the current user."}, {"lang": "es", "value": "Froxlor hasta la versi\u00f3n 0.9.39.5 tiene un control de acceso incorrecto para los tickets que no son propiedad del usuario actual."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-732"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.9.39.5", "matchCriteriaId": "7BDEE295-B7DC-440B-851A-E63FD81F79A8"}]}]}], "references": [{"url": "https://github.com/Froxlor/Froxlor/commit/aa881560cc996c38cbf8c20ee62854e27f72c73c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Froxlor/Froxlor/commit/aa881560cc996c38cbf8c20ee62854e27f72c73c"}}