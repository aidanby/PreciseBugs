{"buggy_code": ["/*\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @version   \n * @file      functions.js\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n/**\n*   Countdown before session expiration\n**/\nfunction countdown()\n{\n    // if a process is in progress then do not decrease the time counter.\n    if (typeof ProcessInProgress !== 'undefined' && ProcessInProgress === true) {\n        $('.countdown-icon')\n            .addClass('fas fa-history')\n            .removeClass('far fa-clock');\n        \n        $(this).delay(1000).queue(function()\n        {\n            countdown();\n            $(this).dequeue();\n        });\n\n        return false;\n    }\n\n    // Continue\n    let DayTill;\n    let hoursInDay = 24;\n    let limitTen = 10;\n    let oneSecondsMs = 1000;\n    let theDay =  $('#temps_restant').val();\n    let today = new Date();\n    let second = Math.floor(theDay - today.getTime() / oneSecondsMs);\n    let minute = Math.floor(second / hourInMinutes);\n    let hour = Math.floor(minute / hourInMinutes);\n    let CHour= hour % hoursInDay;\n    if (CHour < limitTen) {\n        CHour = '0' + CHour;\n    }\n    let CMinute= minute % hourInMinutes;\n    if (CMinute < limitTen) {\n        CMinute = '0' + CMinute;\n    }\n    let CSecond= second % hourInMinutes;\n    if (CSecond < limitTen) {\n        CSecond = '0' + CSecond;\n    }\n    DayTill = CHour + ':' + CMinute + ':' + CSecond;\n\n    // Session will soon be closed\n    if (DayTill === '00:00:50') {\n        showExtendSession();\n        $('#countdown').css('color', 'red');\n    }\n\n    // Manage end of session\n    if ($('#temps_restant').val() !== '' && DayTill <= '00:00:00' && parseInt($('#please_login').val()) !== 1) {\n        $('#please_login').val('1');\n        $(location).attr('href','index.php?session=expired');\n    }\n\n    //Rewrite the string to the correct information.\n    if ($('#countdown')) {\n        $('#countdown').html('<i class=\"far fa-clock countdown-icon mr-1\"></i>' + DayTill);\n    }\n\n    //Create the timer 'counter' that will automatic restart function countdown() again every second.\n    $(this).delay(1000).queue(function()\n    {\n        countdown();\n        $(this).dequeue();\n    });\n}\n\n\n/**\n*\n**/\nfunction unsanitizeString(string) {\n    if(string !== \"\" && string !== null) {\n        string = string.replace(/\\\\/g,\"\").replace(/&#92;/g, \"\\\\\").replace(/&quot;/g, '\"');\n    }\n    return string;\n}\n\n/**\n*   Clean up a string and delete any scripting tags\n**/\nfunction sanitizeString(string) {\n    if(string !== \"\" && string !== null && string !== undefined) {\n        string = string.replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\");\n        string = string.replace(new RegExp(\"\\\\s*<script[^>]*>[\\\\s\\\\S]*?</script>\\\\s*\",\"ig\"), \"\");\n    }\n    return string;\n}\n\n/**\n*   Checks if URL has expected format\n**/\nfunction validateURL(url) {\n    let urlregex = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return urlregex.test(url);\n}\n\n\nfunction split( val ) {\n    return val.split( / \\s*/ );\n}\n\nfunction extractLast( term ) {\n    return split( term ).pop();\n}\n\n/**\n * Shows error message\n * @param  {string} message  Message to display\n * @return {boolean}         False\n */\nfunction jsonErrorHdl(message)\n{\n    //show as confirm\n    // Prepare modal\n    showModalDialogBox(\n        '#warningModal',\n        '<i class=\"fas fa-warning fa-lg warning mr-2\"></i>Caution',\n        message,\n        '',\n        'Close',\n        true,\n        true\n    );\n\n    // Actions on modal buttons\n    $(document).on('click', '#warningModalButtonClose', function() {\n        \n    });\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // SHow user\n    });\n    return false;\n}\n\n/**\n * [prepareExchangedData description]\n * @param  {[type]} data [description]\n * @param  {[type]} type [description]\n * @param  {[type]} key  [description]\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n * @return {[type]}      [description]\n */\nfunction prepareExchangedData(data, type, key, fileName = '', functionName = '')\n{\n    if (type === 'decode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            try {\n                return $.parseJSON(data);\n            }\n            catch (e) {\n                return jsonErrorHdl(data);\n            }\n        } else {\n            try {\n                let encryption = new Encryption();\n                return JSON.parse(encryption.decrypt(data, key));\n            }\n            catch (e) {\n                return jsonErrorHdl('<b>Next error occurred</b><div>' + e + '</div>'\n                    + (fileName !== '' ? '<br><b>Informations:</b><div>  - File: ' + fileName + '<br>  - Function: ' + functionName + '</div>': '')\n                    + '<div><br><b>Raw answer from server:</b><br>'+data+'</div>');\n            }\n        }\n    } else if (type === 'encode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            return stripHtml(data);\n        } else {\n            let encryption = new Encryption();\n            return encryption.encrypt(data, key);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction isJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n\n/**\n * Returns the text from a HTML string\n * \n * @param {string} String The html string\n */\nfunction stripHtml(html) {\n    // Create a new div element\n    let temporalDivElement = document.createElement('div');\n    // Set the HTML content with the providen\n    temporalDivElement.innerHTML = html;\n    // Retrieve the text property of the element (cross-browser support)\n    return temporalDivElement.textContent || temporalDivElement.innerText || '';\n}\n\n\n/**\n * \n * @param {string} data Crypted string\n * @param {string} key  Session key\n */\nfunction unCryptData(data, key)\n{\n    if (data !== undefined && data.substr(0, 7) === 'crypted') {\n        let uncryptedData = prepareExchangedData(\n            data.substr(7),\n            'decode',\n            key\n        )\n        \n        if (uncryptedData.password.length > 0)\n            return uncryptedData.password;\n        else\n            return false;\n    }\n    return false;\n}\n\n/**\n * \n * @param {string}data Crypted string\n * @param {string}key  Session key\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n */\nfunction decodeQueryReturn(data, key, fileName = '', functionName = '')\n{\n    try {\n        return prepareExchangedData(data , \"decode\", key, fileName, functionName);\n    } catch (e) {\n        // error\n        toastr.remove();\n        toastr.error(\n            'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        return false;\n    }\n}\n\n/**\n * \n * @param {string} action Action\n * @param {string} name   Name\n * @param {array} data    Data\n */\nfunction browserSession(action, name, data)\n{\n    // Initialize the session\n    if (action === 'init') {\n        if (store.get(name) === 'undefined'\n            || store.get(name) === undefined\n        ) {\n            store.set(\n                name,\n                data\n            );\n        } else {\n            // Ensure all entries exist\n            $(data).each(function(value, key) {\n                store.update(\n                    name,\n                    function(bSession)\n                    {\n                        bSession.key = value;\n                    }\n                )\n            });\n        }\n    }\n}\n\n/**\n * \n * @param {string} modalId      Modal id\n * @param {string} title        Title\n * @param {string} body         Body\n * @param {string} actionButton Action Button\n * @param {string} closeButton  Close Button\n * @param {string} xlSize       Size\n * @param {string} warningModal Warning Modal\n * @param {string} closeCross   Close on cross\n */\nfunction showModalDialogBox(\n    modalId,\n    title,\n    body,\n    actionButton,\n    closeButton,\n    xlSize = false,\n    warningModal = false,\n    closeCross = true\n) {\n    $(modalId + 'Title').html(title);\n    $(modalId + 'Body').html(body);\n    if (actionButton === '') {\n        $(modalId + 'ButtonAction').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonAction').removeClass('hidden');\n        $(modalId + 'ButtonAction').html(actionButton);\n    }\n    if (closeButton === '') {\n        $(modalId + 'ButtonClose').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonClose').removeClass('hidden');\n        $(modalId + 'ButtonClose').html(closeButton);\n    }\n    if (xlSize === true) {\n        $(modalId + ' div:first').addClass('modal-xl');\n    } else {\n        $(modalId + ' div:first').removeClass('modal-xl');\n    }\n    if (warningModal === true) {\n        $(modalId + ':eq(1)').addClass('bg-warning');\n    } else {\n        $(modalId + ':eq(1)').removeClass('bg-warning');\n    }\n    if (closeCross === false) {\n        $(modalId + 'CrossClose').addClass('hidden');\n    } else {\n        $(modalId + 'CrossClose').removeClass('hidden');\n    }\n    $(modalId).modal({\n        backdrop : 'static',\n        keyboard : false,\n        show: true,\n        focus: true\n    });\n    $(modalId).modal('handleUpdate');\n}\n\n/**\n * Sanitize a string\n * \n * @param {string} str  The string\n */\nfunction htmlEncode(str){\n    return String(str).replace(/[^\\w. ]/gi, function(c){\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n/* Extend String object with method to encode multi-byte string to utf8\n * - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n * - note utf8Encode is an identity function with 7-bit ascii strings, but not with 8-bit strings;\n * - utf8Encode('x') = 'x', but utf8Encode('\u00e7a') = '\u00c3\u00a7a', and utf8Encode('\u00c3\u00a7a') = '\u00c3\u0083\u00c2\u00a7a'*/\nif (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function() {\n        return unescape( encodeURIComponent( this ) );\n    };\n}\n\n/* Extend String object with method to decode utf8 string to multi-byte */\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function() {\n        try {\n            return decodeURIComponent( escape( this ) );\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\nfunction fieldSanitizeStep1(\n    field,\n    bHtml=true,\n    bSvg=true,\n    bSvgFilters=true,\n    text=''\n)\n{\n    if (field === undefined ||field === '') {\n        return false;\n    }\n    let string = '';\n    text = (text === '') ? $(field).val() : text;\n    \n    // Purify string\n    string = DOMPurify.sanitize(\n        text\n            .replaceAll('&lt;', '<')\n            .replaceAll('&gt;', '>'),\n        {USE_PROFILES: {html:bHtml, svg:bSvg, svgFilters: bSvgFilters}}\n    );\n    \n    // Clear field if string is empty and warn user\n    if (string === '' && text !== '') {\n        $(field).val('');\n        return false;\n    }\n\n    return string;\n}", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      profile.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'profile', $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n?>\n\n\n<script type='text/javascript'>\n    <?php if (isset($SETTINGS['api']) === true && (int) $SETTINGS['api'] === 1) : ?>\n        // If user api is empty then generate one\n        if ($('#profile-user-api-token').text() === '') {\n            generateNewUserApiKey('profile-user-api-token', true);\n        }\n\n        $('#profile-button-api_token').click(function() {\n            generateNewUserApiKey('profile-user-api-token', false);\n        });\n    <?php endif; ?>\n\n    //iCheck for checkbox and radio inputs\n    $('#tab_reset_psk input[type=\"checkbox\"]').iCheck({\n        checkboxClass: 'icheckbox_flat-blue'\n    })\n\n    // Select user properties\n    $('#profile-user-language option[value=<?php echo $_SESSION['user']['user_language'];?>').attr('selected','selected');\n\n\n    // AVATAR IMPORT\n    var uploader_photo = new plupload.Uploader({\n        runtimes: 'gears,html5,flash,silverlight,browserplus',\n        browse_button: 'profile-avatar-file',\n        container: 'profile-avatar-file-container',\n        max_file_size: '2mb',\n        chunk_size: '1mb',\n        unique_names: true,\n        dragdrop: true,\n        multiple_queues: false,\n        multi_selection: false,\n        max_file_count: 1,\n        filters: [{\n            title: 'PNG files',\n            extensions: 'png'\n        }],\n        resize: {\n            width: '90',\n            height: '90',\n            quality: '90'\n        },\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.files.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        init: {\n            FilesAdded: function(up, files) {\n                // generate and save token\n                $.post(\n                    'sources/main.queries.php', {\n                        type: 'save_token',\n                        type_category: 'action_system',\n                        size: 25,\n                        capital: true,\n                        secure: true,\n                        numeric: true,\n                        symbols: true,\n                        lowercase: true,\n                        reason: 'avatar_profile_upload',\n                        duration: 10,\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        $('#profile-user-token').val(data[0].token);\n                        up.start();\n                    },\n                    'json'\n                );\n            },\n            BeforeUpload: function(up, file) {\n                var tmp = Math.random().toString(36).substring(7);\n\n                up.settings.multipart_params = {\n                    'PHPSESSID': '<?php echo $_SESSION['user_id']; ?>',\n                    'type_upload': 'upload_profile_photo',\n                    'user_token': $('#profile-user-token').val()\n                };\n            },\n            FileUploaded: function(upldr, file, object) {\n                // Decode returned data\n                var myData = prepareExchangedData(object.response, 'decode', '<?php echo $_SESSION['key']; ?>');\n                // update form\n                $('#profile-user-avatar').attr('src', 'includes/avatars/' + myData.filename);\n                $('#profile-avatar-file-list').html('').addClass('hidden');\n            }\n        }\n    });\n\n    // Show runtime status\n    uploader_photo.bind('Init', function(up, params) {\n        $('#profile-plupload-runtime')\n            .html(params.runtime)\n            .removeClass('text-danger')\n            .addClass('text-info')\n            .data('enabled', 1);\n    });\n\n    // get error\n    uploader_photo.bind('Error', function(up, err) {\n        $('#profile-avatar-file-list').html('<div class=\"ui-state-error ui-corner-all\">Error: ' + err.code +\n            ', Message: ' + err.message +\n            (err.file ? ', File: ' + err.file.name : '') +\n            '</div>'\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    uploader_photo.init();\n\n\n    // Save user settings\n    $('#profile-user-save-settings').click(function() {\n        var data = {\n            'name': DOMPurify.sanitize($('#profile-user-name').val()),\n            'lastname': DOMPurify.sanitize($('#profile-user-lastname').val()),\n            'email': DOMPurify.sanitize($('#profile-user-email').val()),\n            'timezone': $('#profile-user-timezone').val(),\n            'language': $('#profile-user-language').val().toLowerCase(),\n            'treeloadstrategy': $('#profile-user-treeloadstrategy').val().toLowerCase(),\n            'agsescardid': $('#profile-user-agsescardid').length > 0 ? $('#profile-user-agsescardid').val() : '',\n        }\n        //console.log(data)\n        // Inform user\n        toastr.remove();\n        toastr.info('<i class=\"fas fa-cog fa-spin fa-2x\"></i>');\n\n        //Send query\n        $.post(\n            \"sources/users.queries.php\", {\n                type: 'user_profile_update',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                isprofileupdate: true,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                        '', {\n                            closeButton: true\n                        }\n                    );\n                    return false;\n                }\n\n                if (data.error === true) {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            closeButton: true\n                        }\n                    );\n                } else {\n                    $('#profile-username').html(data.name + ' ' + data.lastname);\n                    $('#profile-user-name').val(data.name)\n                    $('#profile-user-lastname').val(data.lastname)\n                    $('#profile-user-email').val(data.email)\n\n                    // reload page in case of language change\n                    if ($('#profile-user-language').val().toLowerCase() !== '<?php echo $_SESSION['user']['user_language'];?>') {\n                        // prepare reload\n                        $(this).delay(3000).queue(function() {\n                            document.location.href = \"index.php?page=profile\";\n\n                            $(this).dequeue();\n                        });\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('alert_page_will_reload') . ' ... ' . langHdl('please_wait'); ?>',\n                            '', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n\n                    } else {\n                        // just inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true\n                            }\n                        );\n\n                        // Force tree refresh\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1\n                            }\n                        );\n                    }\n                }\n\n            }\n        );\n    });\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function generateNewUserApiKey(target, silent) {\n        var newApiKey = \"\";\n\n        // Generate key\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: \"39\",\n                lowercase: \"true\",\n                numerals: \"true\",\n                capitalize: \"true\",\n                symbols: \"false\",\n                secure: \"false\",\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (data.key !== \"\") {\n                    newApiKey = data.key;\n\n                    // Save key in session and database\n                    var data = {\n                        'field' : 'user_api_key',\n                        'value' : newApiKey[0],\n                        'user_id' : <?php echo $_SESSION['user_id']; ?>,\n                        'context' : '',\n                    };\n                    console.log(data)\n                    \n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: \"save_user_change\",\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            isprofileupdate: true,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            $(\"#\" + target).text(newApiKey);\n                            if (silent === false) {\n                                $('#profile-tabs a[href=\"#tab_information\"]').tab('show');\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('done'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        progressBar: true\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n\n    //-------------------\n    $(\"#profile-password\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-password-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_1;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_2;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_3;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_4;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_5;?>,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-password\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    });\n\n    $('#profile-save-password-change').click(function() {\n        // Check if passwords are the same\n        if ($('#profile-password').val() !== $('#profile-password-confirm').val() ||\n            $('#profile-password').val() === '' ||\n            $('#profile-password-confirm').val() === ''\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('index_pw_error_identical'); ?>',\n                '', {\n                    timeOut: 10000,\n                    closeButton: true,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        // Inform user\n        toastr.remove();\n        toastr.info('<i class=\"fas fa-cog fa-spin fa-2x\"></i>');\n\n        var data = {\n            'new_pw': DOMPurify.sanitize($('#profile-password').val()),\n            'complexity': $('#profile-password-complex').val(),\n            \"change_request\": 'user_decides_to_change_password',\n            \"user_id\": store.get('teampassUser').user_id,\n        };\n\n        //Send query\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"change_pw\",\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                console.log(data);\n\n                if (data.error === true) {\n                    $('#profile-password').focus();\n                    toastr.remove();\n                    toastr.warning(\n                        '<?php echo langHdl('your_attention_is_required'); ?>',\n                        data.message, {\n                            timeOut: 10000,\n                            closeButton: true,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('#profile-password, #profile-password-confirm').val('');\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        data.message, {\n                            timeOut: 2000,\n                            progressBar: true\n                        }\n                    );\n\n                    window.location.href = \"index.php\";\n                }\n\n            }\n        );\n    });\n\n\n    // ----\n    $(\"#profile-saltkey\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-saltkey-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_1;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_2;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_3;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_4;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_5;?>,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-saltkey\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-saltkey-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-saltkey-complex\").val(score);\n        }\n    });\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      main.functions.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nuse LdapRecord\\Connection;\nuse ForceUTF8\\Encoding;\n\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    //die('Hacking attempt...');\n}\n\n// Load config if $SETTINGS not defined\nif (isset($SETTINGS['cpassman_dir']) === false || empty($SETTINGS['cpassman_dir']) === true) {\n    include_once __DIR__ . '/../includes/config/tp.config.php';\n}\n\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\n/**\n * Convert language code to string.\n *\n * @param string $string String to get\n */\nfunction langHdl(string $string): string\n{\n    if (empty($string) === true) {\n        // Manage error\n        return 'ERROR in language strings!';\n    }\n\n    // Load superglobal\n    include_once __DIR__.'/../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get language string\n    $session_language = $superGlobal->get(trim($string), 'SESSION', 'lang');\n    if (is_null($session_language) === true) {\n        /* \n            Load the English version to $_SESSION so we don't \n            return bad JSON (multiple includes add BOM characters to the json returned \n            which makes jquery unhappy on the UI, especially on the log page)\n            and improve performance by avoiding to include the file for every missing strings.\n        */\n        if (isset($_SESSION['teampass']) === false || isset($_SESSION['teampass']['en_lang'][trim($string)]) === false) {\n            $_SESSION['teampass']['en_lang'] = include_once __DIR__. '/../includes/language/english.php';\n            $session_language = isset($_SESSION['teampass']['en_lang'][trim($string)]) === false ? '' : $_SESSION['teampass']['en_lang'][trim($string)];\n        } else {\n            $session_language = $_SESSION['teampass']['en_lang'][trim($string)];\n        }\n    }\n    // If after all this, we still don't have the string even in english (especially with old logs), return the language code\n    if (empty($session_language) === true) {\n        return trim($string);\n    }\n    //return (string) str_replace(\"'\",  \"&apos;\", $session_language);\n    return (string) $session_language;\n}\n\n/**\n * genHash().\n *\n * Generate a hash for user login\n *\n * @param string $password What password\n * @param string $cost     What cost\n *\n * @return string|void\n */\nfunction bCrypt(\n    string $password,\n    string $cost\n): ?string\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; ++$i) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n\n    return crypt($password, $salt);\n}\n\n/**\n * Defuse cryption function.\n *\n * @param string $message   what to de/crypt\n * @param string $ascii_key key to use\n * @param string $type      operation to perform\n * @param array  $SETTINGS  Teampass settings\n *\n * @return array\n */\nfunction cryption(string $message, string $ascii_key, string $type, ?array $SETTINGS = []): array\n{\n    $ascii_key = empty($ascii_key) === true ? file_get_contents(SECUREPATH.'/'.SECUREFILE) : $ascii_key;\n    $err = false;\n    \n    $path = __DIR__.'/../includes/libraries/Encryption/Encryption/';\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n    \n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n    try {\n        if ($type === 'encrypt') {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === 'decrypt') {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.';\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n    //echo \\Defuse\\Crypto\\Crypto::decrypt($message, $key).' ## ';\n\n    return [\n        'string' => $text ?? '',\n        'error' => $err,\n    ];\n}\n\n/**\n * Generating a defuse key.\n *\n * @return string\n */\nfunction defuse_generate_key()\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\n/**\n * Generate a Defuse personal key.\n *\n * @param string $psk psk used\n *\n * @return string\n */\nfunction defuse_generate_personal_key(string $psk): string\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n    \n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    return $protected_key->saveToAsciiSafeString(); // save this in user table\n}\n\n/**\n * Validate persoanl key with defuse.\n *\n * @param string $psk                   the user's psk\n * @param string $protected_key_encoded special key\n *\n * @return string\n */\nfunction defuse_validate_personal_key(string $psk, string $protected_key_encoded): string\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n\n    try {\n        $protected_key_encoded = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key_encoded->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return 'Error - Major issue as the encryption is broken.';\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return 'Error - The saltkey is not the correct one.';\n    }\n\n    return $user_key_encoded;\n    // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted.\n *\n * @param string $value Encrypted string\n *\n * @return string Decrypted string\n */\nfunction defuseReturnDecrypted(string $value, $SETTINGS): string\n{\n    if (substr($value, 0, 3) === 'def') {\n        $value = cryption($value, '', 'decrypt', $SETTINGS)['string'];\n    }\n\n    return $value;\n}\n\n/**\n * Trims a string depending on a specific string.\n *\n * @param string|array $chaine  what to trim\n * @param string       $element trim on what\n *\n * @return string\n */\nfunction trimElement($chaine, string $element): string\n{\n    if (! empty($chaine)) {\n        if (is_array($chaine) === true) {\n            $chaine = implode(';', $chaine);\n        }\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) === $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) === $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n\n    return $chaine;\n}\n\n/**\n * Permits to suppress all \"special\" characters from string.\n *\n * @param string $string  what to clean\n * @param bool   $special use of special chars?\n *\n * @return string\n */\nfunction cleanString(string $string, bool $special = false): string\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = [];\n    for ($i = 0; $i <= 31; ++$i) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, '<br />');\n    if ((int) $special === 1) {\n        $tabSpecialChar = array_merge($tabSpecialChar, ['</li>', '<ul>', '<ol>']);\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\n/**\n * Erro manager for DB.\n *\n * @param array $params output from query\n *\n * @return void\n */\nfunction db_error_handler(array $params): void\n{\n    echo 'Error: ' . $params['error'] . \"<br>\\n\";\n    echo 'Query: ' . $params['query'] . \"<br>\\n\";\n    throw new Exception('Error - Query', 1);\n}\n\n/**\n * Identify user's rights\n *\n * @param string|array $groupesVisiblesUser  [description]\n * @param string|array $groupesInterditsUser [description]\n * @param string       $isAdmin              [description]\n * @param string       $idFonctions          [description]\n *\n * @return bool\n */\nfunction identifyUserRights(\n    $groupesVisiblesUser,\n    $groupesInterditsUser,\n    $isAdmin,\n    $idFonctions,\n    $SETTINGS\n) {\n    //load ClassLoader\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR    \n    (int) $isAdmin === 1 ?\n        identAdmin(\n            $idFonctions,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $tree\n        )\n        :\n        identUser(\n            $groupesVisiblesUser,\n            $groupesInterditsUser,\n            $idFonctions,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $tree\n        );\n\n    // update user's timestamp\n    DB::update(\n        prefixTable('users'),\n        [\n            'timestamp' => time(),\n        ],\n        'id=%i',\n        $superGlobal->get('user_id', 'SESSION')\n    );\n\n    return true;\n}\n\n/**\n * Identify administrator.\n *\n * @param string $idFonctions Roles of user\n * @param array  $SETTINGS    Teampass settings\n * @param array  $tree        Tree of folders\n *\n * @return bool\n */\nfunction identAdmin($idFonctions, $SETTINGS, $tree)\n{\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Init\n    $groupesVisibles = [];\n    $superGlobal->put('personal_folders', [], 'SESSION');\n    $superGlobal->put('groupes_visibles', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('personal_visible_groups', [], 'SESSION');\n    $superGlobal->put('read_only_folders', [], 'SESSION');\n    $superGlobal->put('list_restricted_folders_for_items', [], 'SESSION');\n    $superGlobal->put('list_folders_editable_by_role', [], 'SESSION');\n    $superGlobal->put('list_folders_limited', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('forbiden_pfs', [], 'SESSION');\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsVisibleFolders = $superGlobal->get('groupes_visibles', 'SESSION');\n    $globalsPersonalVisibleFolders = $superGlobal->get('personal_visible_groups', 'SESSION');\n    // Get list of Folders\n    $rows = DB::query('SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i', 0);\n    foreach ($rows as $record) {\n        array_push($groupesVisibles, $record['id']);\n    }\n    $superGlobal->put('groupes_visibles', $groupesVisibles, 'SESSION');\n    $superGlobal->put('all_non_personal_folders', $groupesVisibles, 'SESSION');\n    // Exclude all PF\n    $where = new WhereClause('and');\n    // create a WHERE statement of pieces joined by ANDs\n    $where->add('personal_folder=%i', 1);\n    if (\n        isset($SETTINGS['enable_pf_feature']) === true\n        && (int) $SETTINGS['enable_pf_feature'] === 1\n    ) {\n        $where->add('title=%s', $globalsUserId);\n        $where->negateLast();\n    }\n    // Get ID of personal folder\n    $persfld = DB::queryfirstrow(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE title = %s',\n        $globalsUserId\n    );\n    if (empty($persfld['id']) === false) {\n        if (in_array($persfld['id'], $globalsVisibleFolders) === false) {\n            array_push($globalsVisibleFolders, $persfld['id']);\n            array_push($globalsPersonalVisibleFolders, $persfld['id']);\n            // get all descendants\n            $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $tst = $tree->getDescendants($persfld['id']);\n            foreach ($tst as $t) {\n                array_push($globalsVisibleFolders, $t->id);\n                array_push($globalsPersonalVisibleFolders, $t->id);\n            }\n        }\n    }\n\n    // get complete list of ROLES\n    $tmp = explode(';', $idFonctions);\n    $rows = DB::query(\n        'SELECT * FROM ' . prefixTable('roles_title') . '\n        ORDER BY title ASC'\n    );\n    foreach ($rows as $record) {\n        if (! empty($record['id']) && ! in_array($record['id'], $tmp)) {\n            array_push($tmp, $record['id']);\n        }\n    }\n    $superGlobal->put('fonction_id', implode(';', $tmp), 'SESSION');\n    $superGlobal->put('is_admin', 1, 'SESSION');\n    // Check if admin has created Folders and Roles\n    DB::query('SELECT * FROM ' . prefixTable('nested_tree') . '');\n    $superGlobal->put('nb_folders', DB::count(), 'SESSION');\n    DB::query('SELECT * FROM ' . prefixTable('roles_title'));\n    $superGlobal->put('nb_roles', DB::count(), 'SESSION');\n\n    return true;\n}\n\n/**\n * Permits to convert an element to array.\n *\n * @param string|array $element Any value to be returned as array\n *\n * @return array\n */\nfunction convertToArray($element): array\n{\n    if (is_string($element) === true) {\n        if (empty($element) === true) {\n            return [];\n        }\n        return explode(\n            ';',\n            trimElement($element, ';')\n        );\n    }\n    return $element;\n}\n\n/**\n * Defines the rights the user has.\n *\n * @param string|array $allowedFolders  Allowed folders\n * @param string|array $noAccessFolders Not allowed folders\n * @param string|array $userRoles       Roles of user\n * @param array        $SETTINGS        Teampass settings\n * @param object       $tree            Tree of folders\n * \n * @return bool\n */\nfunction identUser(\n    $allowedFolders,\n    $noAccessFolders,\n    $userRoles,\n    array $SETTINGS,\n    object $tree\n) {\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Init\n    $superGlobal->put('groupes_visibles', [], 'SESSION');\n    $superGlobal->put('personal_folders', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('personal_visible_groups', [], 'SESSION');\n    $superGlobal->put('read_only_folders', [], 'SESSION');\n    $superGlobal->put('fonction_id', $userRoles, 'SESSION');\n    $superGlobal->put('is_admin', 0, 'SESSION');\n    // init\n    $personalFolders = [];\n    $readOnlyFolders = [];\n    $noAccessPersonalFolders = [];\n    $restrictedFoldersForItems = [];\n    $foldersLimited = [];\n    $foldersLimitedFull = [];\n    $allowedFoldersByRoles = [];\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsPersonalFolders = $superGlobal->get('personal_folder', 'SESSION');\n    // Ensure consistency in array format\n    $noAccessFolders = convertToArray($noAccessFolders);\n    $userRoles = convertToArray($userRoles);\n    $allowedFolders = convertToArray($allowedFolders);\n    \n    // Get list of folders depending on Roles\n    $arrays = identUserGetFoldersFromRoles(\n        $userRoles,\n        $allowedFoldersByRoles,\n        $readOnlyFolders,\n        $allowedFolders\n    );\n    $allowedFoldersByRoles = $arrays['allowedFoldersByRoles'];\n    $readOnlyFolders = $arrays['readOnlyFolders'];\n\n    // Does this user is allowed to see other items\n    $inc = 0;\n    $rows = DB::query(\n        'SELECT id, id_tree FROM ' . prefixTable('items') . '\n            WHERE restricted_to LIKE %ss AND inactif = %s'.\n            (count($allowedFolders) > 0 ? ' AND id_tree NOT IN ('.implode(',', $allowedFolders).')' : ''),\n        $globalsUserId . ';',\n        '0'\n    );\n    foreach ($rows as $record) {\n        // Exclude restriction on item if folder is fully accessible\n        //if (in_array($record['id_tree'], $allowedFolders) === false) {\n            $restrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            ++$inc;\n        //}\n    }\n\n    // Check for the users roles if some specific rights exist on items\n    $rows = DB::query(\n        'SELECT i.id_tree, r.item_id\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('restriction_to_roles') . ' as r ON (r.item_id=i.id)\n        WHERE r.role_id IN %li AND i.id_tree <> \"\"\n        ORDER BY i.id_tree ASC',\n        $userRoles\n    );\n    $inc = 0;\n    foreach ($rows as $record) {\n        //if (isset($record['id_tree'])) {\n            $foldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n            array_push($foldersLimitedFull, $record['id_tree']);\n            ++$inc;\n        //}\n    }\n\n    // Get list of Personal Folders\n    $arrays = identUserGetPFList(\n        $globalsPersonalFolders,\n        $allowedFolders,\n        $globalsUserId,\n        $personalFolders,\n        $noAccessPersonalFolders,\n        $foldersLimitedFull,\n        $allowedFoldersByRoles,\n        array_keys($restrictedFoldersForItems),\n        $readOnlyFolders,\n        $noAccessFolders,\n        isset($SETTINGS['enable_pf_feature']) === true ? $SETTINGS['enable_pf_feature'] : 0,\n        $tree\n    );\n    $allowedFolders = $arrays['allowedFolders'];\n    $personalFolders = $arrays['personalFolders'];\n    $noAccessPersonalFolders = $arrays['noAccessPersonalFolders'];\n\n    // Return data\n    $superGlobal->put('all_non_personal_folders', $allowedFolders, 'SESSION');\n    $superGlobal->put('groupes_visibles', array_unique(array_merge($allowedFolders, $personalFolders), SORT_NUMERIC), 'SESSION');\n    $superGlobal->put('read_only_folders', $readOnlyFolders, 'SESSION');\n    $superGlobal->put('no_access_folders', $noAccessFolders, 'SESSION');\n    $superGlobal->put('personal_folders', $personalFolders, 'SESSION');\n    $superGlobal->put('list_folders_limited', $foldersLimited, 'SESSION');\n    $superGlobal->put('list_folders_editable_by_role', $allowedFoldersByRoles, 'SESSION');\n    $superGlobal->put('list_restricted_folders_for_items', $restrictedFoldersForItems, 'SESSION');\n    $superGlobal->put('forbiden_pfs', $noAccessPersonalFolders, 'SESSION');\n    $superGlobal->put(\n        'all_folders_including_no_access',\n        array_unique(array_merge(\n            $allowedFolders,\n            $personalFolders,\n            $noAccessFolders,\n            $readOnlyFolders\n        ), SORT_NUMERIC),\n        'SESSION'\n    );\n    // Folders and Roles numbers\n    DB::queryfirstrow('SELECT id FROM ' . prefixTable('nested_tree') . '');\n    $superGlobal->put('nb_folders', DB::count(), 'SESSION');\n    DB::queryfirstrow('SELECT id FROM ' . prefixTable('roles_title'));\n    $superGlobal->put('nb_roles', DB::count(), 'SESSION');\n    // check if change proposals on User's items\n    if (isset($SETTINGS['enable_suggestion']) === true && (int) $SETTINGS['enable_suggestion'] === 1) {\n        $countNewItems = DB::query(\n            'SELECT COUNT(*)\n            FROM ' . prefixTable('items_change') . ' AS c\n            LEFT JOIN ' . prefixTable('log_items') . ' AS i ON (c.item_id = i.id_item)\n            WHERE i.action = %s AND i.id_user = %i',\n            'at_creation',\n            $globalsUserId\n        );\n        $superGlobal->put('nb_item_change_proposals', $countNewItems, 'SESSION');\n    } else {\n        $superGlobal->put('nb_item_change_proposals', 0, 'SESSION');\n    }\n\n    return true;\n}\n\n/**\n * Get list of folders depending on Roles\n * \n * @param array $userRoles\n * @param array $allowedFoldersByRoles\n * @param array $readOnlyFolders\n * @param array $allowedFolders\n * \n * @return array\n */\nfunction identUserGetFoldersFromRoles($userRoles, $allowedFoldersByRoles, $readOnlyFolders, $allowedFolders) : array\n{\n    $rows = DB::query(\n        'SELECT *\n        FROM ' . prefixTable('roles_values') . '\n        WHERE role_id IN %li AND type IN %ls',\n        $userRoles,\n        ['W', 'ND', 'NE', 'NDNE', 'R']\n    );\n    foreach ($rows as $record) {\n        if ($record['type'] === 'R') {\n            array_push($readOnlyFolders, $record['folder_id']);\n        } elseif (in_array($record['folder_id'], $allowedFolders) === false) {\n            array_push($allowedFoldersByRoles, $record['folder_id']);\n        }\n    }\n    $allowedFoldersByRoles = array_unique($allowedFoldersByRoles);\n    $readOnlyFolders = array_unique($readOnlyFolders);\n    // Clean arrays\n    foreach ($allowedFoldersByRoles as $value) {\n        $key = array_search($value, $readOnlyFolders);\n        if ($key !== false) {\n            unset($readOnlyFolders[$key]);\n        }\n    }\n\n    return [\n        'readOnlyFolders' => $readOnlyFolders,\n        'allowedFoldersByRoles' => $allowedFoldersByRoles\n    ];\n}\n\n/**\n * Get list of Personal Folders\n * \n * @param int $globalsPersonalFolders\n * @param array $allowedFolders\n * @param int $globalsUserId\n * @param array $personalFolders\n * @param array $noAccessPersonalFolders\n * @param array $foldersLimitedFull\n * @param array $allowedFoldersByRoles\n * @param array $restrictedFoldersForItems\n * @param array $readOnlyFolders\n * @param array $noAccessFolders\n * @param int $enablePfFeature\n * @param object $tree\n * \n * @return array\n */\nfunction identUserGetPFList(\n    $globalsPersonalFolders,\n    $allowedFolders,\n    $globalsUserId,\n    $personalFolders,\n    $noAccessPersonalFolders,\n    $foldersLimitedFull,\n    $allowedFoldersByRoles,\n    $restrictedFoldersForItems,\n    $readOnlyFolders,\n    $noAccessFolders,\n    $enablePfFeature,\n    $tree\n)\n{\n    if (\n        (int) $enablePfFeature === 1\n        && (int) $globalsPersonalFolders === 1\n    ) {\n        $persoFld = DB::queryfirstrow(\n            'SELECT id\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE title = %s AND personal_folder = %i'.\n            (count($allowedFolders) > 0 ? ' AND id NOT IN ('.implode(',', $allowedFolders).')' : ''),\n            $globalsUserId,\n            1\n        );\n        if (empty($persoFld['id']) === false) {\n            array_push($personalFolders, $persoFld['id']);\n            array_push($allowedFolders, $persoFld['id']);\n            // get all descendants\n            $ids = $tree->getDescendants($persoFld['id'], false, false, true);\n            foreach ($ids as $id) {\n                //array_push($allowedFolders, $id);\n                array_push($personalFolders, $id);\n            }\n        }\n    }\n    \n    // Exclude all other PF\n    $where = new WhereClause('and');\n    $where->add('personal_folder=%i', 1);\n    if (count($personalFolders) > 0) {\n        $where->add('id NOT IN ('.implode(',', $personalFolders).')');\n    }\n    if (\n        (int) $enablePfFeature === 1\n        && (int) $globalsPersonalFolders === 1\n    ) {\n        $where->add('title=%s', $globalsUserId);\n        $where->negateLast();\n    }\n    $persoFlds = DB::query(\n        'SELECT id\n        FROM ' . prefixTable('nested_tree') . '\n        WHERE %l',\n        $where\n    );\n    foreach ($persoFlds as $persoFldId) {\n        array_push($noAccessPersonalFolders, $persoFldId['id']);\n    }\n\n    // All folders visibles\n    $allowedFolders = array_unique(array_merge(\n        $allowedFolders,\n        $foldersLimitedFull,\n        $allowedFoldersByRoles,\n        $restrictedFoldersForItems,\n        $readOnlyFolders\n    ), SORT_NUMERIC);\n    // Exclude from allowed folders all the specific user forbidden folders\n    if (count($noAccessFolders) > 0) {\n        $allowedFolders = array_diff($allowedFolders, $noAccessFolders);\n    }\n\n    return [\n        'allowedFolders' => array_diff(array_diff($allowedFolders, $noAccessPersonalFolders), $personalFolders),\n        'personalFolders' => $personalFolders,\n        'noAccessPersonalFolders' => $noAccessPersonalFolders\n    ];\n}\n\n\n/**\n * Update the CACHE table.\n *\n * @param string $action   What to do\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction updateCacheTable(string $action, array $SETTINGS, ?int $ident = null): void\n{\n    if ($action === 'reload') {\n        // Rebuild full cache table\n        cacheTableRefresh($SETTINGS);\n    } elseif ($action === 'update_value' && is_null($ident) === false) {\n        // UPDATE an item\n        cacheTableUpdate($SETTINGS, $ident);\n    } elseif ($action === 'add_value' && is_null($ident) === false) {\n        // ADD an item\n        cacheTableAdd($SETTINGS, $ident);\n    } elseif ($action === 'delete_value' && is_null($ident) === false) {\n        // DELETE an item\n        DB::delete(prefixTable('cache'), 'id = %i', $ident);\n    }\n}\n\n/**\n * Cache table - refresh.\n *\n * @param array $SETTINGS Teampass settings\n * \n * @return void\n */\nfunction cacheTableRefresh(array $SETTINGS): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] .'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // truncate table\n    DB::query('TRUNCATE TABLE ' . prefixTable('cache'));\n    // reload date\n    $rows = DB::query(\n        'SELECT *\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n        AND l.action = %s\n        AND i.inactif = %i',\n        'at_creation',\n        0\n    );\n    foreach ($rows as $record) {\n        if (empty($record['id_tree']) === false) {\n            // Get all TAGS\n            $tags = '';\n            $itemTags = DB::query(\n                'SELECT tag\n                FROM ' . prefixTable('tags') . '\n                WHERE item_id = %i AND tag != \"\"',\n                $record['id']\n            );\n            foreach ($itemTags as $itemTag) {\n                $tags .= $itemTag['tag'] . ' ';\n            }\n\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\n                'SELECT renewal_period\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %i',\n                $record['id_tree']\n            );\n            // form id_tree to full foldername\n            $folder = [];\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                // Check if title is the ID of a user\n                if (is_numeric($elem->title) === true) {\n                    // Is this a User id?\n                    $user = DB::queryfirstrow(\n                        'SELECT id, login\n                        FROM ' . prefixTable('users') . '\n                        WHERE id = %i',\n                        $elem->title\n                    );\n                    if (count($user) > 0) {\n                        $elem->title = $user['login'];\n                    }\n                }\n                // Build path\n                array_push($folder, stripslashes($elem->title));\n            }\n            // store data\n            DB::insert(\n                prefixTable('cache'),\n                [\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => $record['description'] ?? '',\n                    'url' => isset($record['url']) && ! empty($record['url']) ? $record['url'] : '0',\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => isset($record['restricted_to']) && ! empty($record['restricted_to']) ? $record['restricted_to'] : '0',\n                    'login' => $record['login'] ?? '',\n                    'folder' => implode(' > ', $folder),\n                    'author' => $record['id_user'],\n                    'renewal_period' => $resNT['renewal_period'] ?? '0',\n                    'timestamp' => $record['date'],\n                ]\n            );\n        }\n    }\n}\n\n/**\n * Cache table - update existing value.\n *\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction cacheTableUpdate(array $SETTINGS, ?int $ident = null): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // get new value from db\n    $data = DB::queryfirstrow(\n        'SELECT label, description, id_tree, perso, restricted_to, login, url\n        FROM ' . prefixTable('items') . '\n        WHERE id=%i',\n        $ident\n    );\n    // Get all TAGS\n    $tags = '';\n    $itemTags = DB::query(\n        'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i AND tag != \"\"',\n        $ident\n    );\n    foreach ($itemTags as $itemTag) {\n        $tags .= $itemTag['tag'] . ' ';\n    }\n    // form id_tree to full foldername\n    $folder = [];\n    $arbo = $tree->getPath($data['id_tree'], true);\n    foreach ($arbo as $elem) {\n        // Check if title is the ID of a user\n        if (is_numeric($elem->title) === true) {\n            // Is this a User id?\n            $user = DB::queryfirstrow(\n                'SELECT id, login\n                FROM ' . prefixTable('users') . '\n                WHERE id = %i',\n                $elem->title\n            );\n            if (count($user) > 0) {\n                $elem->title = $user['login'];\n            }\n        }\n        // Build path\n        array_push($folder, stripslashes($elem->title));\n    }\n    // finaly update\n    DB::update(\n        prefixTable('cache'),\n        [\n            'label' => $data['label'],\n            'description' => $data['description'],\n            'tags' => $tags,\n            'url' => isset($data['url']) && ! empty($data['url']) ? $data['url'] : '0',\n            'id_tree' => $data['id_tree'],\n            'perso' => $data['perso'],\n            'restricted_to' => isset($data['restricted_to']) && ! empty($data['restricted_to']) ? $data['restricted_to'] : '0',\n            'login' => $data['login'] ?? '',\n            'folder' => implode(' \u00bb ', $folder),\n            'author' => $superGlobal->get('user_id', 'SESSION'),\n        ],\n        'id = %i',\n        $ident\n    );\n}\n\n/**\n * Cache table - add new value.\n *\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction cacheTableAdd(array $SETTINGS, ?int $ident = null): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // get new value from db\n    $data = DB::queryFirstRow(\n        'SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n        WHERE i.id = %i\n        AND l.action = %s',\n        $ident,\n        'at_creation'\n    );\n    // Get all TAGS\n    $tags = '';\n    $itemTags = DB::query(\n        'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i AND tag != \"\"',\n        $ident\n    );\n    foreach ($itemTags as $itemTag) {\n        $tags .= $itemTag['tag'] . ' ';\n    }\n    // form id_tree to full foldername\n    $folder = [];\n    $arbo = $tree->getPath($data['id_tree'], true);\n    foreach ($arbo as $elem) {\n        // Check if title is the ID of a user\n        if (is_numeric($elem->title) === true) {\n            // Is this a User id?\n            $user = DB::queryfirstrow(\n                'SELECT id, login\n                FROM ' . prefixTable('users') . '\n                WHERE id = %i',\n                $elem->title\n            );\n            if (count($user) > 0) {\n                $elem->title = $user['login'];\n            }\n        }\n        // Build path\n        array_push($folder, stripslashes($elem->title));\n    }\n    // finaly update\n    DB::insert(\n        prefixTable('cache'),\n        [\n            'id' => $data['id'],\n            'label' => $data['label'],\n            'description' => $data['description'],\n            'tags' => isset($tags) && empty($tags) === false ? $tags : 'None',\n            'url' => isset($data['url']) && ! empty($data['url']) ? $data['url'] : '0',\n            'id_tree' => $data['id_tree'],\n            'perso' => isset($data['perso']) && empty($data['perso']) === false && $data['perso'] !== 'None' ? $data['perso'] : '0',\n            'restricted_to' => isset($data['restricted_to']) && empty($data['restricted_to']) === false ? $data['restricted_to'] : '0',\n            'login' => $data['login'] ?? '',\n            'folder' => implode(' \u00bb ', $folder),\n            'author' => $globalsUserId,\n            'timestamp' => $data['date'],\n        ]\n    );\n}\n\n/**\n * Do statistics.\n *\n * @param array $SETTINGS Teampass settings\n *\n * @return array\n */\nfunction getStatisticsData(array $SETTINGS): array\n{\n    DB::query(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n        0\n    );\n    $counter_folders = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n        1\n    );\n    $counter_folders_perso = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('items') . ' WHERE perso = %i',\n        0\n    );\n    $counter_items = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('items') . ' WHERE perso = %i',\n        1\n    );\n    $counter_items_perso = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ''\n    );\n    $counter_users = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE admin = %i',\n        1\n    );\n    $admins = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE gestionnaire = %i',\n        1\n    );\n    $managers = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE read_only = %i',\n        1\n    );\n    $readOnly = DB::count();\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        'SELECT name FROM ' . prefixTable('languages')\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            'SELECT * FROM ' . prefixTable('users') . ' WHERE user_language = %s',\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        'SELECT user_ip FROM ' . prefixTable('users')\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] += $usedIp[$ip['user_ip']];\n        } elseif (! empty($ip['user_ip']) && $ip['user_ip'] !== 'none') {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return [\n        'error' => '',\n        'stat_phpversion' => phpversion(),\n        'stat_folders' => $counter_folders,\n        'stat_folders_shared' => intval($counter_folders) - intval($counter_folders_perso),\n        'stat_items' => $counter_items,\n        'stat_items_shared' => intval($counter_items) - intval($counter_items_perso),\n        'stat_users' => $counter_users,\n        'stat_admins' => $admins,\n        'stat_managers' => $managers,\n        'stat_ro' => $readOnly,\n        'stat_kb' => $SETTINGS['enable_kb'],\n        'stat_pf' => $SETTINGS['enable_pf_feature'],\n        'stat_fav' => $SETTINGS['enable_favourites'],\n        'stat_teampassversion' => TP_VERSION,\n        'stat_ldap' => $SETTINGS['ldap_mode'],\n        'stat_agses' => $SETTINGS['agses_authentication_enabled'],\n        'stat_duo' => $SETTINGS['duo'],\n        'stat_suggestion' => $SETTINGS['enable_suggestion'],\n        'stat_api' => $SETTINGS['api'],\n        'stat_customfields' => $SETTINGS['item_extra_fields'],\n        'stat_syslog' => $SETTINGS['syslog_enable'],\n        'stat_2fa' => $SETTINGS['google_authentication'],\n        'stat_stricthttps' => $SETTINGS['enable_sts'],\n        'stat_mysqlversion' => DB::serverVersion(),\n        'stat_languages' => $usedLang,\n        'stat_country' => $usedIp,\n    ];\n}\n\n/**\n * Permits to prepare the way to send the email\n * \n * @param string $subject       email subject\n * @param string $body          email message\n * @param string $email         email\n * @param string $receiverName  Receiver name\n * @param array  $SETTINGS      settings\n *\n * @return void\n */\nfunction prepareSendingEmail(\n    $subject,\n    $body,\n    $email,\n    $receiverName,\n    $SETTINGS\n): void \n{\n    DB::insert(\n        prefixTable('processes'),\n        array(\n            'created_at' => time(),\n            'process_type' => 'send_email',\n            'arguments' => json_encode([\n                'subject' => $subject,\n                'receivers' => $email,\n                'body' => $body,\n                'receiver_name' => $receiverName,\n            ], JSON_HEX_QUOT | JSON_HEX_TAG),\n            'updated_at' => '',\n            'finished_at' => '',\n            'output' => '',\n        )\n    );\n}\n\n/**\n * Permits to send an email.\n *\n * @param string $subject     email subject\n * @param string $textMail    email message\n * @param string $email       email\n * @param array  $SETTINGS    settings\n * @param string $textMailAlt email message alt\n * @param bool   $silent      no errors\n *\n * @return string some json info\n */\nfunction sendEmail(\n    $subject,\n    $textMail,\n    $email,\n    $SETTINGS,\n    $textMailAlt = null,\n    $silent = true,\n    $cron = false\n) {\n    // CAse where email not defined\n    if ($email === 'none' || empty($email) === true) {\n        return json_encode(\n            [\n                'error' => true,\n                'message' => langHdl('forgot_my_pw_email_sent'),\n            ]\n        );\n    }\n\n    // Build and send email\n    $email = buildEmail(\n        $subject,\n        $textMail,\n        $email,\n        $SETTINGS,\n        $textMailAlt = null,\n        $silent = true,\n        $cron\n    );\n\n    if ($silent === false) {\n        return json_encode(\n            [\n                'error' => false,\n                'message' => langHdl('forgot_my_pw_email_sent'),\n            ]\n        );\n    }\n    // Debug purpose\n    if ((int) $SETTINGS['email_debug_level'] !== 0 && $cron === false) {\n        return json_encode(\n            [\n                'error' => true,\n                'message' => isset($email['ErrorInfo']) === true ? $email['ErrorInfo'] : '',\n            ]\n        );\n    }\n    return json_encode(\n        [\n            'error' => false,\n            'message' => langHdl('share_sent_ok'),\n        ]\n    );\n}\n\n\nfunction buildEmail(\n    $subject,\n    $textMail,\n    $email,\n    $SETTINGS,\n    $textMailAlt = null,\n    $silent = true,\n    $cron = false\n)\n{\n    // Load settings\n    //include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get user language\n    include_once $SETTINGS['cpassman_dir'] . '/includes/language/' . (null !== $superGlobal->get('user_language', 'SESSION', 'user') ? $superGlobal->get('user_language', 'SESSION', 'user') : 'english') . '.php';\n    // Load library\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // load PHPMailer\n    $mail = new SplClassLoader('PHPMailer\\PHPMailer', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $mail->register();\n    $mail = new PHPMailer\\PHPMailer\\PHPMailer(true);\n\n    // send to user\n    $mail->setLanguage('en', $SETTINGS['cpassman_dir'] . '/includes/libraries/PHPMailer/PHPMailer/language/');\n    $mail->SMTPDebug = isset($SETTINGS['email_debug_level']) === true && $cron === false && $silent === false ? $SETTINGS['email_debug_level'] : 0;\n    $mail->Port = (int) $SETTINGS['email_port'];\n    //COULD BE USED\n    $mail->CharSet = 'utf-8';\n    $mail->SMTPSecure = $SETTINGS['email_security'] !== 'none' ? $SETTINGS['email_security'] : '';\n    $mail->SMTPAutoTLS = $SETTINGS['email_security'] !== 'none' ? true : false;\n    $mail->SMTPOptions = [\n        'ssl' => [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n            'allow_self_signed' => true,\n        ],\n    ];\n    $mail->isSmtp();\n    // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server'];\n    // SMTP servers\n    $mail->SMTPAuth = (int) $SETTINGS['email_smtp_auth'] === 1 ? true : false;\n    // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username'];\n    // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd'];\n    // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    // Prepare for each person\n    foreach (array_filter(explode(',', $email)) as $dest) {\n        $mail->addAddress($dest);\n    }\n    \n    // Prepare HTML\n    $text_html = emailBody($textMail);\n    $mail->WordWrap = 80;\n    // set word wrap\n    $mail->isHtml(true);\n    // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $text_html;\n    $mail->AltBody = is_null($textMailAlt) === false ? $textMailAlt : '';\n\n    try {\n        // send email\n        $mail->send();\n    } catch (Exception $e) {\n        if ($silent === false || (int) $SETTINGS['email_debug_level'] !== 0) {\n            return json_encode(\n                [\n                    'error' => true,\n                    'errorInfo' => str_replace([\"\\n\", \"\\t\", \"\\r\"], '', $mail->ErrorInfo),\n                ]\n            );\n        }\n        return '';\n    }\n    $mail->smtpClose();\n\n    return json_encode(\n        [\n            'error' => true,\n            'errorInfo' => str_replace([\"\\n\", \"\\t\", \"\\r\"], '', $mail->ErrorInfo),\n        ]\n    );\n}\n\n/**\n * Returns the email body.\n *\n * @param string $textMail Text for the email\n */\nfunction emailBody(string $textMail): string\n{\n    return '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.=\n    w3.org/TR/html4/loose.dtd\"><html>\n    <head><title>Email Template</title>\n    <style type=\"text/css\">\n    body { background-color: #f0f0f0; padding: 10px 0; margin:0 0 10px =0; }\n    </style></head>\n    <body style=\"-ms-text-size-adjust: none; size-adjust: none; margin: 0; padding: 10px 0; background-color: #f0f0f0;\" bgcolor=\"#f0f0f0\" leftmargin=\"0\" topmargin=\"0\" marginwidth=\"0\" marginheight=\"0\">\n    <table border=\"0\" width=\"100%\" height=\"100%\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f0f0f0\" style=\"border-spacing: 0;\">\n    <tr><td style=\"border-collapse: collapse;\"><br>\n        <table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#17357c\" style=\"border-spacing: 0; margin-bottom: 25px;\">\n        <tr><td style=\"border-collapse: collapse; padding: 11px 20px;\">\n            <div style=\"max-width:150px; max-height:34px; color:#f0f0f0; font-weight:bold;\">Teampass</div>\n        </td></tr></table></td>\n    </tr>\n    <tr><td align=\"center\" valign=\"top\" bgcolor=\"#f0f0f0\" style=\"border-collapse: collapse; background-color: #f0f0f0;\">\n        <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"container\" bgcolor=\"#ffffff\" style=\"border-spacing: 0; border-bottom: 1px solid #e0e0e0; box-shadow: 0 0 3px #ddd; color: #434343; font-family: Helvetica, Verdana, sans-serif;\">\n        <tr><td class=\"container-padding\" bgcolor=\"#ffffff\" style=\"border-collapse: collapse; border-left: 1px solid #e0e0e0; background-color: #ffffff; padding-left: 30px; padding-right: 30px;\">\n        <br><div style=\"float:right;\">' .\n        $textMail .\n        '<br><br></td></tr></table>\n    </td></tr></table>\n    <br></body></html>';\n}\n\n/**\n * Generate a Key.\n * \n * @return string\n */\nfunction generateKey(): string\n{\n    return substr(md5(rand() . rand()), 0, 15);\n}\n\n/**\n * Convert date to timestamp.\n *\n * @param string $date        The date\n * @param string $date_format Date format\n *\n * @return int\n */\nfunction dateToStamp(string $date, string $date_format): int\n{\n    $date = date_parse_from_format($date_format, $date);\n    if ((int) $date['warning_count'] === 0 && (int) $date['error_count'] === 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    }\n    return 0;\n}\n\n/**\n * Is this a date.\n *\n * @param string $date Date\n *\n * @return bool\n */\nfunction isDate(string $date): bool\n{\n    return strtotime($date) !== false;\n}\n\n/**\n * Check if isUTF8().\n *\n * @param string|array $string Is the string\n *\n * @return int is the string in UTF8 format\n */\nfunction isUTF8($string): int\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/**\n * Prepare an array to UTF8 format before JSON_encode.\n *\n * @param array $array Array of values\n *\n * @return array\n */\nfunction utf8Converter(array $array): array\n{\n    array_walk_recursive(\n        $array,\n        static function (&$item): void {\n            if (mb_detect_encoding((string) $item, 'utf-8', true) === false) {\n                $item = utf8_encode($item);\n            }\n        }\n    );\n    return $array;\n}\n\n/**\n * Permits to prepare data to be exchanged.\n *\n * @param string       $teampassDir\n * @param array|string $data Text\n * @param string       $type Parameter\n * @param string       $key  Optional key\n *\n * @return string|array\n */\nfunction prepareExchangedData($teampassDir, $data, string $type, ?string $key = null)\n{\n    $teampassDir = __DIR__ . '/..';\n    // Load superglobal\n    include_once $teampassDir . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    if ($key !== null) {\n        $superGlobal->put('key', $key, 'SESSION');\n        $globalsKey = $key;\n    } else {\n        $globalsKey = $superGlobal->get('key', 'SESSION');\n    }\n\n    //load Encoding\n    include_once $teampassDir . '/includes/libraries/ForceUTF8/Encoding.php';\n    \n    //Load CRYPTOJS\n    include_once $teampassDir . '/includes/libraries/Encryption/CryptoJs/Encryption.php';\n\n    // Perform\n    if ($type === 'encode' && is_array($data) === true) {\n        // Now encode\n        return Encryption\\CryptoJs\\Encryption::encrypt(\n            json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            ),\n            $globalsKey\n        );\n    }\n    if ($type === 'decode' && is_array($data) === false) {\n        // check if key exists\n        return json_decode(\n            (string) Encryption\\CryptoJs\\Encryption::decrypt(\n                (string) $data,\n                $globalsKey\n            ),\n            true\n        );\n    }\n}\n\n\n/**\n * Create a thumbnail.\n *\n * @param string  $src           Source\n * @param string  $dest          Destination\n * @param int $desired_width Size of width\n * \n * @return void|string|bool\n */\nfunction makeThumbnail(string $src, string $dest, int $desired_width)\n{\n    /* read the source image */\n    if (is_file($src) === true && mime_content_type($src) === 'image/png') {\n        $source_image = imagecreatefrompng($src);\n        if ($source_image === false) {\n            return \"Error: Not a valid PNG file! It's type is \".mime_content_type($src);\n        }\n    } else {\n        return \"Error: Not a valid PNG file! It's type is \".mime_content_type($src);\n    }\n\n    // Get height and width\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = (int) floor($height * $desired_width / $width);\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n    if ($virtual_image === false) {\n        return false;\n    }\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/**\n * Check table prefix in SQL query.\n *\n * @param string $table Table name\n * \n * @return string\n */\nfunction prefixTable(string $table): string\n{\n    $safeTable = htmlspecialchars(DB_PREFIX . $table);\n    if (! empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    }\n    // stop error no table\n    return 'table_not_exists';\n}\n\n/**\n * GenerateCryptKey\n *\n * @param int     $size      Length\n * @param bool $secure Secure\n * @param bool $numerals Numerics\n * @param bool $uppercase Uppercase letters\n * @param bool $symbols Symbols\n * @param bool $lowercase Lowercase\n * @param array   $SETTINGS  SETTINGS\n * \n * @return string\n */\nfunction GenerateCryptKey(\n    int $size = 20,\n    bool $secure = false,\n    bool $numerals = false,\n    bool $uppercase = false,\n    bool $symbols = false,\n    bool $lowercase = false,\n    array $SETTINGS = []\n): string {\n    include_once __DIR__ . '/../sources/SplClassLoader.php';\n    $generator = new SplClassLoader('PasswordGenerator\\Generator', __DIR__. '/../includes/libraries');\n    $generator->register();\n    $generator = new PasswordGenerator\\Generator\\ComputerPasswordGenerator();\n    // Is PHP7 being used?\n    if (version_compare(PHP_VERSION, '7.0.0', '>=')) {\n        $php7generator = new SplClassLoader('PasswordGenerator\\RandomGenerator', __DIR__ . '/../includes/libraries');\n        $php7generator->register();\n        $generator->setRandomGenerator(new PasswordGenerator\\RandomGenerator\\Php7RandomGenerator());\n    }\n    \n    // Manage size\n    $generator->setLength((int) $size);\n    if ($secure === true) {\n        $generator->setSymbols(true);\n        $generator->setLowercase(true);\n        $generator->setUppercase(true);\n        $generator->setNumbers(true);\n    } else {\n        $generator->setLowercase($lowercase);\n        $generator->setUppercase($uppercase);\n        $generator->setNumbers($numerals);\n        $generator->setSymbols($symbols);\n    }\n\n    return $generator->generatePasswords()[0];\n}\n\n/**\n * Send sysLOG message\n *\n * @param string    $message\n * @param string    $host\n * @param int       $port\n * @param string    $component\n * \n * @return void\n*/\nfunction send_syslog($message, $host, $port, $component = 'teampass'): void\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = '<123>' . date('M d H:i:s ') . $component . ': ' . $message;\n    socket_sendto($sock, (string) $syslog_message, strlen($syslog_message), 0, (string) $host, (int) $port);\n    socket_close($sock);\n}\n\n/**\n * Permits to log events into DB\n *\n * @param array  $SETTINGS Teampass settings\n * @param string $type     Type\n * @param string $label    Label\n * @param string $who      Who\n * @param string $login    Login\n * @param string $field_1  Field\n * \n * @return void\n */\nfunction logEvents(\n    array $SETTINGS, \n    string $type, \n    string $label, \n    string $who, \n    ?string $login = null, \n    ?string $field_1 = null\n): void\n{\n    if (empty($who)) {\n        $who = getClientIpServer();\n    }\n\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    DB::insert(\n        prefixTable('log_system'),\n        [\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? '' : $field_1,\n        ]\n    );\n    // If SYSLOG\n    if (isset($SETTINGS['syslog_enable']) === true && (int) $SETTINGS['syslog_enable'] === 1) {\n        if ($type === 'user_mngt') {\n            send_syslog(\n                'action=' . str_replace('at_', '', $label) . ' attribute=user user=' . $who . ' userid=\"' . $login . '\" change=\"' . $field_1 . '\" ',\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                'teampass'\n            );\n        } else {\n            send_syslog(\n                'action=' . $type . ' attribute=' . $label . ' user=' . $who . ' userid=\"' . $login . '\" ',\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                'teampass'\n            );\n        }\n    }\n}\n\n/**\n * Log events.\n *\n * @param array  $SETTINGS        Teampass settings\n * @param int    $item_id         Item id\n * @param string $item_label      Item label\n * @param int    $id_user         User id\n * @param string $action          Code for reason\n * @param string $login           User login\n * @param string $raison          Code for reason\n * @param string $encryption_type Encryption on\n * \n * @return void\n */\nfunction logItems(\n    array $SETTINGS,\n    int $item_id,\n    string $item_label,\n    int $id_user,\n    string $action,\n    ?string $login = null,\n    ?string $raison = null,\n    ?string $encryption_type = null\n): void {\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Insert log in DB\n    DB::insert(\n        prefixTable('log_items'),\n        [\n            'id_item' => $item_id,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => '',\n            'encryption_type' => is_null($encryption_type) === true ? TP_ENCRYPTION_NAME : $encryption_type,\n        ]\n    );\n    // Timestamp the last change\n    if ($action === 'at_creation' || $action === 'at_modifiation' || $action === 'at_delete' || $action === 'at_import') {\n        DB::update(\n            prefixTable('misc'),\n            [\n                'valeur' => time(),\n            ],\n            'type = %s AND intitule = %s',\n            'timestamp',\n            'last_item_change'\n        );\n    }\n\n    // SYSLOG\n    if (isset($SETTINGS['syslog_enable']) === true && $SETTINGS['syslog_enable'] === '1') {\n        // Extract reason\n        $attribute = is_null($raison) === true ? Array('') : explode(' : ', $raison);\n        // Get item info if not known\n        if (empty($item_label) === true) {\n            $dataItem = DB::queryfirstrow(\n                'SELECT id, id_tree, label\n                FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $item_id\n            );\n            $item_label = $dataItem['label'];\n        }\n\n        send_syslog(\n            'action=' . str_replace('at_', '', $action) .\n                ' attribute=' . str_replace('at_', '', $attribute[0]) .\n                ' itemno=' . $item_id .\n                ' user=' . is_null($login) === true ? '' : addslashes((string) $login) .\n                ' itemname=\"' . addslashes($item_label) . '\"',\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            'teampass'\n        );\n    }\n\n    // send notification if enabled\n    //notifyOnChange($item_id, $action, $SETTINGS);\n}\n\n/**\n * If enabled, then notify admin/manager.\n *\n * @param int    $item_id  Item id\n * @param string $action   Action to do\n * @param array  $SETTINGS Teampass settings\n * \n * @return void\n */\n/*\nfunction notifyOnChange(int $item_id, string $action, array $SETTINGS): void\n{\n    if (\n        isset($SETTINGS['enable_email_notification_on_item_shown']) === true\n        && (int) $SETTINGS['enable_email_notification_on_item_shown'] === 1\n        && $action === 'at_shown'\n    ) {\n        // Load superglobal\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        // Get superglobals\n        $globalsLastname = $superGlobal->get('lastname', 'SESSION');\n        $globalsName = $superGlobal->get('name', 'SESSION');\n        $globalsNotifiedEmails = $superGlobal->get('listNotificationEmails', 'SESSION');\n        // Get info about item\n        $dataItem = DB::queryfirstrow(\n            'SELECT id, id_tree, label\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $item_id\n        );\n        $item_label = $dataItem['label'];\n        // send back infos\n        DB::insert(\n            prefixTable('emails'),\n            [\n                'timestamp' => time(),\n                'subject' => langHdl('email_on_open_notification_subject'),\n                'body' => str_replace(\n                    ['#tp_user#', '#tp_item#', '#tp_link#'],\n                    [\n                        addslashes($globalsName . ' ' . $globalsLastname),\n                        addslashes($item_label),\n                        $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $item_id,\n                    ],\n                    langHdl('email_on_open_notification_mail')\n                ),\n                'receivers' => $globalsNotifiedEmails,\n                'status' => '',\n            ]\n        );\n    }\n}\n*/\n\n/**\n * Prepare notification email to subscribers.\n *\n * @param int    $item_id  Item id\n * @param string $label    Item label\n * @param array  $changes  List of changes\n * @param array  $SETTINGS Teampass settings\n * \n * @return void\n */\nfunction notifyChangesToSubscribers(int $item_id, string $label, array $changes, array $SETTINGS): void\n{\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsLastname = $superGlobal->get('lastname', 'SESSION');\n    $globalsName = $superGlobal->get('name', 'SESSION');\n    // send email to user that what to be notified\n    $notification = DB::queryOneColumn(\n        'email',\n        'SELECT *\n        FROM ' . prefixTable('notification') . ' AS n\n        INNER JOIN ' . prefixTable('users') . ' AS u ON (n.user_id = u.id)\n        WHERE n.item_id = %i AND n.user_id != %i',\n        $item_id,\n        $globalsUserId\n    );\n    if (DB::count() > 0) {\n        // Prepare path\n        $path = geItemReadablePath($item_id, '', $SETTINGS);\n        // Get list of changes\n        $htmlChanges = '<ul>';\n        foreach ($changes as $change) {\n            $htmlChanges .= '<li>' . $change . '</li>';\n        }\n        $htmlChanges .= '</ul>';\n        // send email\n        DB::insert(\n            prefixTable('emails'),\n            [\n                'timestamp' => time(),\n                'subject' => langHdl('email_subject_item_updated'),\n                'body' => str_replace(\n                    ['#item_label#', '#folder_name#', '#item_id#', '#url#', '#name#', '#lastname#', '#changes#'],\n                    [$label, $path, $item_id, $SETTINGS['cpassman_url'], $globalsName, $globalsLastname, $htmlChanges],\n                    langHdl('email_body_item_updated')\n                ),\n                'receivers' => implode(',', $notification),\n                'status' => '',\n            ]\n        );\n    }\n}\n\n/**\n * Returns the Item + path.\n *\n * @param int    $id_tree  Node id\n * @param string $label    Label\n * @param array  $SETTINGS TP settings\n * \n * @return string\n */\nfunction geItemReadablePath(int $id_tree, string $label, array $SETTINGS): string\n{\n    // Class loader\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    $arbo = $tree->getPath($id_tree, true);\n    $path = '';\n    foreach ($arbo as $elem) {\n        if (empty($path) === true) {\n            $path = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES) . ' ';\n        } else {\n            $path .= '&#8594; ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n        }\n    }\n\n    // Build text to show user\n    if (empty($label) === false) {\n        return empty($path) === true ? addslashes($label) : addslashes($label) . ' (' . $path . ')';\n    }\n    return empty($path) === true ? '' : $path;\n}\n\n/**\n * Get the client ip address.\n *\n * @return string IP address\n */\nfunction getClientIpServer(): string\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n        $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n        $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n        $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n        $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n        $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n        $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS.\n *\n * @param string $input    The input string\n * @param string $encoding Which character encoding are we using?\n * \n * @return string\n */\nfunction noHTML(string $input, string $encoding = 'UTF-8'): string\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * Permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n *\n * @param string $action   Action to perform\n * @param array  $SETTINGS Teampass settings\n * @param string $field    Field to refresh\n * @param string $value    Value to set\n *\n * @return string|bool\n */\nfunction handleConfigFile($action, $SETTINGS, $field = null, $value = null)\n{\n    $tp_config_file = $SETTINGS['cpassman_dir'] . '/includes/config/tp.config.php';\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    if (file_exists($tp_config_file) === false || $action === 'rebuild') {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (! copy($tp_config_file, $tp_config_file . '.' . date('Y_m_d_His', time()))) {\n                return \"ERROR: Could not copy file '\" . $tp_config_file . \"'\";\n            }\n        }\n\n        // regenerate\n        $data = [];\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            'SELECT * FROM ' . prefixTable('misc') . ' WHERE type=%s',\n            'admin'\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\" . $record['intitule'] . \"' => '\" . htmlspecialchars_decode($record['valeur'], ENT_COMPAT) . \"',\\n\");\n        }\n        array_push($data, \");\\n\");\n        $data = array_unique($data);\n    // ---\n    } elseif ($action === 'update' && empty($field) === false) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, ');')) {\n                break;\n            }\n\n            if (stristr($line, \"'\" . $field . \"' => '\")) {\n                $data[$inc] = \"    '\" . $field . \"' => '\" . htmlspecialchars_decode($value, ENT_COMPAT) . \"',\\n\";\n                $bFound = true;\n                break;\n            }\n            ++$inc;\n        }\n        if ($bFound === false) {\n            $data[$inc] = \"    '\" . $field . \"' => '\" . htmlspecialchars_decode($value, ENT_COMPAT). \"',\\n);\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', $data ?? []));\n    return true;\n}\n\n/**\n * Permits to replace &#92; to permit correct display\n *\n * @param string $input Some text\n * \n * @return string\n */\nfunction handleBackslash(string $input): string\n{\n    return str_replace('&amp;#92;', '&#92;', $input);\n}\n\n/**\n * Permits to load settings\n * \n * @return void\n*/\nfunction loadSettings(): void\n{\n    global $SETTINGS;\n    /* LOAD CPASSMAN SETTINGS */\n    if (! isset($SETTINGS['loaded']) || $SETTINGS['loaded'] !== 1) {\n        $SETTINGS = [];\n        $SETTINGS['duplicate_folder'] = 0;\n        //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0;\n        //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5;\n        //by default, this value is set to 5;\n        $settings = [];\n        $rows = DB::query(\n            'SELECT * FROM ' . prefixTable('misc') . ' WHERE type=%s_type OR type=%s_type2',\n            [\n                'type' => 'admin',\n                'type2' => 'settings',\n            ]\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] === 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/**\n * check if folder has custom fields.\n * Ensure that target one also has same custom fields\n * \n * @param int $source_id\n * @param int $target_id \n * \n * @return bool\n*/\nfunction checkCFconsistency(int $source_id, int $target_id): bool\n{\n    $source_cf = [];\n    $rows = DB::QUERY(\n        'SELECT id_category\n            FROM ' . prefixTable('categories_folders') . '\n            WHERE id_folder = %i',\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = [];\n    $rows = DB::QUERY(\n        'SELECT id_category\n            FROM ' . prefixTable('categories_folders') . '\n            WHERE id_folder = %i',\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse.\n *\n * @param string $type        can be either encrypt or decrypt\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction prepareFileWithDefuse(\n    string $type,\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n    // Protect against bad inputs\n    if (is_array($source_file) === true || is_array($target_file) === true) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n    if (empty($password) === true || is_null($password) === true) {\n        // get KEY to define password\n        $ascii_key = file_get_contents(SECUREPATH.'/'.SECUREFILE);\n        $password = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n    }\n\n    $err = '';\n    if ($type === 'decrypt') {\n        // Decrypt file\n        $err = defuseFileDecrypt(\n            $source_file,\n            $target_file,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $password\n        );\n    } elseif ($type === 'encrypt') {\n        // Encrypt file\n        $err = defuseFileEncrypt(\n            $source_file,\n            $target_file,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $password\n        );\n    }\n\n    // return error\n    return $err === true ? '' : $err;\n}\n\n/**\n * Encrypt a file with Defuse.\n *\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction defuseFileEncrypt(\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/CryptoException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/BadFormatException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/IOException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Crypto.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Encoding.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'DerivedKeys.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Key.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyOrPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'File.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'RuntimeTests.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyProtectedByPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Core.php';\n    try {\n        \\Defuse\\Crypto\\File::encryptFileWithPassword(\n            $source_file,\n            $target_file,\n            $password\n        );\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'wrong_key';\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    // return error\n    return empty($err) === false ? $err : true;\n}\n\n/**\n * Decrypt a file with Defuse.\n *\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction defuseFileDecrypt(\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/CryptoException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/BadFormatException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/IOException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Crypto.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Encoding.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'DerivedKeys.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Key.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyOrPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'File.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'RuntimeTests.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyProtectedByPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Core.php';\n    try {\n        \\Defuse\\Crypto\\File::decryptFileWithPassword(\n            $source_file,\n            $target_file,\n            $password\n        );\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'wrong_key';\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    // return error\n    return empty($err) === false ? $err : true;\n}\n\n/*\n* NOT TO BE USED\n*/\n/**\n * Undocumented function.\n *\n * @param string $text Text to debug\n */\nfunction debugTeampass(string $text): void\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    if ($debugFile !== false) {\n        fputs($debugFile, $text);\n        fclose($debugFile);\n    }\n}\n\n/**\n * DELETE the file with expected command depending on server type.\n *\n * @param string $file     Path to file\n * @param array  $SETTINGS Teampass settings\n *\n * @return void\n */\nfunction fileDelete(string $file, array $SETTINGS): void\n{\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/**\n * Permits to extract the file extension.\n *\n * @param string $file File name\n *\n * @return string\n */\nfunction getFileExtension(string $file): string\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * Chmods files and folders with different permissions.\n *\n * This is an all-PHP alternative to using: \\n\n * <tt>exec(\"find \".$path.\" -type f -exec chmod 644 {} \\;\");</tt> \\n\n * <tt>exec(\"find \".$path.\" -type d -exec chmod 755 {} \\;\");</tt>\n *\n * @author Jeppe Toustrup (tenzer at tenzer dot dk)\n  *\n * @param string $path      An either relative or absolute path to a file or directory which should be processed.\n * @param int    $filePerm The permissions any found files should get.\n * @param int    $dirPerm  The permissions any found folder should get.\n *\n * @return bool Returns TRUE if the path if found and FALSE if not.\n *\n * @warning The permission levels has to be entered in octal format, which\n * normally means adding a zero (\"0\") in front of the permission level. \\n\n * More info at: http://php.net/chmod.\n*/\n\nfunction recursiveChmod(\n    string $path,\n    int $filePerm = 0644,\n    int  $dirPerm = 0755\n) {\n    // Check if the path exists\n    if (! file_exists($path)) {\n        return false;\n    }\n\n    // See whether this is a file\n    if (is_file($path)) {\n        // Chmod the file with our given filepermissions\n        chmod($path, $filePerm);\n    // If this is a directory...\n    } elseif (is_dir($path)) {\n        // Then get an array of the contents\n        $foldersAndFiles = scandir($path);\n        // Remove \".\" and \"..\" from the list\n        $entries = array_slice($foldersAndFiles, 2);\n        // Parse every result...\n        foreach ($entries as $entry) {\n            // And call this function again recursively, with the same permissions\n            recursiveChmod($path.'/'.$entry, $filePerm, $dirPerm);\n        }\n\n        // When we are done with the contents of the directory, we chmod the directory itself\n        chmod($path, $dirPerm);\n    }\n\n    // Everything seemed to work out well, return true\n    return true;\n}\n\n/**\n * Check if user can access to this item.\n *\n * @param int   $item_id ID of item\n * @param array $SETTINGS\n *\n * @return bool|string\n */\nfunction accessToItemIsGranted(int $item_id, array $SETTINGS)\n{\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Prepare superGlobal variables\n    $session_groupes_visibles = $superGlobal->get('groupes_visibles', 'SESSION');\n    $session_list_restricted_folders_for_items = $superGlobal->get('list_restricted_folders_for_items', 'SESSION');\n    // Load item data\n    $data = DB::queryFirstRow(\n        'SELECT id_tree\n        FROM ' . prefixTable('items') . '\n        WHERE id = %i',\n        $item_id\n    );\n    // Check if user can access this folder\n    if (in_array($data['id_tree'], $session_groupes_visibles) === false) {\n        // Now check if this folder is restricted to user\n        if (isset($session_list_restricted_folders_for_items[$data['id_tree']]) === true\n            && in_array($item_id, $session_list_restricted_folders_for_items[$data['id_tree']]) === false\n        ) {\n            return 'ERR_FOLDER_NOT_ALLOWED';\n        }\n    }\n\n    return true;\n}\n\n/**\n * Creates a unique key.\n *\n * @param int $lenght Key lenght\n *\n * @return string\n */\nfunction uniqidReal(int $lenght = 13): string\n{\n    if (function_exists('random_bytes')) {\n        $bytes = random_bytes(intval(ceil($lenght / 2)));\n    } elseif (function_exists('openssl_random_pseudo_bytes')) {\n        $bytes = openssl_random_pseudo_bytes(intval(ceil($lenght / 2)));\n    } else {\n        throw new Exception('no cryptographically secure random function available');\n    }\n\n    return substr(bin2hex($bytes), 0, $lenght);\n}\n\n/**\n * Obfuscate an email.\n *\n * @param string $email Email address\n *\n * @return string\n */\nfunction obfuscateEmail(string $email): string\n{\n    $email = explode(\"@\", $email);\n    $name = $email[0];\n    if (strlen($name) > 3) {\n        $name = substr($name, 0, 2);\n        for ($i = 0; $i < strlen($email[0]) - 3; $i++) {\n            $name .= \"*\";\n        }\n        $name .= substr($email[0], -1, 1);\n    }\n    $host = explode(\".\", $email[1])[0];\n    if (strlen($host) > 3) {\n        $host = substr($host, 0, 1);\n        for ($i = 0; $i < strlen(explode(\".\", $email[1])[0]) - 2; $i++) {\n            $host .= \"*\";\n        }\n        $host .= substr(explode(\".\", $email[1])[0], -1, 1);\n    }\n    $email = $name . \"@\" . $host . \".\" . explode(\".\", $email[1])[1];\n    return $email;\n}\n\n/**\n * Perform a Query.\n *\n * @param array  $SETTINGS Teamapss settings\n * @param string $fields   Fields to use\n * @param string $table    Table to use\n *\n * @return array\n */\nfunction performDBQuery(array $SETTINGS, string $fields, string $table): array\n{\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Insert log in DB\n    return DB::query(\n        'SELECT ' . $fields . '\n        FROM ' . prefixTable($table)\n    );\n}\n\n/**\n * Undocumented function.\n *\n * @param int $bytes Size of file\n *\n * @return string\n */\nfunction formatSizeUnits(int $bytes): string\n{\n    if ($bytes >= 1073741824) {\n        $bytes = number_format($bytes / 1073741824, 2) . ' GB';\n    } elseif ($bytes >= 1048576) {\n        $bytes = number_format($bytes / 1048576, 2) . ' MB';\n    } elseif ($bytes >= 1024) {\n        $bytes = number_format($bytes / 1024, 2) . ' KB';\n    } elseif ($bytes > 1) {\n        $bytes .= ' bytes';\n    } elseif ($bytes === 1) {\n        $bytes .= ' byte';\n    } else {\n        $bytes = '0 bytes';\n    }\n\n    return $bytes;\n}\n\n/**\n * Generate user pair of keys.\n *\n * @param string $userPwd User password\n *\n * @return array\n */\nfunction generateUserKeys(string $userPwd): array\n{\n    // include library\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $cipher = new Crypt_AES();\n    // Create the private and public key\n    $res = $rsa->createKey(4096);\n    // Encrypt the privatekey\n    $cipher->setPassword($userPwd);\n    $privatekey = $cipher->encrypt($res['privatekey']);\n    return [\n        'private_key' => base64_encode($privatekey),\n        'public_key' => base64_encode($res['publickey']),\n        'private_key_clear' => base64_encode($res['privatekey']),\n    ];\n}\n\n/**\n * Permits to decrypt the user's privatekey.\n *\n * @param string $userPwd        User password\n * @param string $userPrivateKey User private key\n *\n * @return string\n */\nfunction decryptPrivateKey(string $userPwd, string $userPrivateKey): string\n{\n    if (empty($userPwd) === false) {\n        include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n        // Load classes\n        $cipher = new Crypt_AES();\n        // Encrypt the privatekey\n        $cipher->setPassword($userPwd);\n        try {\n            return base64_encode((string) $cipher->decrypt(base64_decode($userPrivateKey)));\n        } catch (Exception $e) {\n            return $e;\n        }\n    }\n    return '';\n}\n\n/**\n * Permits to encrypt the user's privatekey.\n *\n * @param string $userPwd        User password\n * @param string $userPrivateKey User private key\n *\n * @return string\n */\nfunction encryptPrivateKey(string $userPwd, string $userPrivateKey): string\n{\n    if (empty($userPwd) === false) {\n        include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n        // Load classes\n        $cipher = new Crypt_AES();\n        // Encrypt the privatekey\n        $cipher->setPassword($userPwd);        \n        try {\n            return base64_encode($cipher->encrypt(base64_decode($userPrivateKey)));\n        } catch (Exception $e) {\n            return $e;\n        }\n    }\n    return '';\n}\n\n/**\n * Encrypts a string using AES.\n *\n * @param string $data String to encrypt\n * @param string $key\n *\n * @return array\n */\nfunction doDataEncryption(string $data, string $key = NULL): array\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES(CRYPT_AES_MODE_CBC);\n    // Generate an object key\n    $objectKey = is_null($key) === true ? uniqidReal(32) : $key;\n    // Set it as password\n    $cipher->setPassword($objectKey);\n    return [\n        'encrypted' => base64_encode($cipher->encrypt($data)),\n        'objectKey' => base64_encode($objectKey),\n    ];\n}\n\n/**\n * Decrypts a string using AES.\n *\n * @param string $data Encrypted data\n * @param string $key  Key to uncrypt\n *\n * @return string\n */\nfunction doDataDecryption(string $data, string $key): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Set the object key\n    $cipher->setPassword(base64_decode($key));\n    return base64_encode($cipher->decrypt(base64_decode($data)));\n}\n\n/**\n * Encrypts using RSA a string using a public key.\n *\n * @param string $key       Key to be encrypted\n * @param string $publicKey User public key\n *\n * @return string\n */\nfunction encryptUserObjectKey(string $key, string $publicKey): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $rsa->loadKey(base64_decode($publicKey));\n    // Encrypt\n    return base64_encode($rsa->encrypt(base64_decode($key)));\n}\n\n/**\n * Decrypts using RSA an encrypted string using a private key.\n *\n * @param string $key        Encrypted key\n * @param string $privateKey User private key\n *\n * @return string\n */\nfunction decryptUserObjectKey(string $key, string $privateKey): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $rsa->loadKey(base64_decode($privateKey));\n    // Decrypt\n    try {\n        $tmpValue = $rsa->decrypt(base64_decode($key));\n        if (is_bool($tmpValue) === false) {\n            $ret = base64_encode((string) /** @scrutinizer ignore-type */$tmpValue);\n        } else {\n            $ret = '';\n        }\n    } catch (Exception $e) {\n        return $e;\n    }\n\n    return $ret;\n}\n\n/**\n * Encrypts a file.\n *\n * @param string $fileInName File name\n * @param string $fileInPath Path to file\n *\n * @return array\n */\nfunction encryptFile(string $fileInName, string $fileInPath): array\n{\n    if (defined('FILE_BUFFER_SIZE') === false) {\n        define('FILE_BUFFER_SIZE', 128 * 1024);\n    }\n\n    // Includes\n    include_once __DIR__.'/../includes/config/include.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Generate an object key\n    $objectKey = uniqidReal(32);\n    // Set it as password\n    $cipher->setPassword($objectKey);\n    // Prevent against out of memory\n    $cipher->enableContinuousBuffer();\n    //$cipher->disablePadding();\n\n    // Encrypt the file content\n    $plaintext = file_get_contents(\n        filter_var($fileInPath . '/' . $fileInName, FILTER_SANITIZE_URL)\n    );\n    $ciphertext = $cipher->encrypt($plaintext);\n    // Save new file\n    $hash = md5($plaintext);\n    $fileOut = $fileInPath . '/' . TP_FILE_PREFIX . $hash;\n    file_put_contents($fileOut, $ciphertext);\n    unlink($fileInPath . '/' . $fileInName);\n    return [\n        'fileHash' => base64_encode($hash),\n        'objectKey' => base64_encode($objectKey),\n    ];\n}\n\n/**\n * Decrypt a file.\n *\n * @param string $fileName File name\n * @param string $filePath Path to file\n * @param string $key      Key to use\n *\n * @return string\n */\nfunction decryptFile(string $fileName, string $filePath, string $key): string\n{\n    if (! defined('FILE_BUFFER_SIZE')) {\n        define('FILE_BUFFER_SIZE', 128 * 1024);\n    }\n\n    // Includes\n    include_once __DIR__.'/../includes/config/include.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Get file name\n    $fileName = base64_decode($fileName);\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Set the object key\n    $cipher->setPassword(base64_decode($key));\n    // Prevent against out of memory\n    $cipher->enableContinuousBuffer();\n    $cipher->disablePadding();\n    // Get file content\n    $ciphertext = file_get_contents($filePath . '/' . TP_FILE_PREFIX . $fileName);\n    // Decrypt file content and return\n    return base64_encode($cipher->decrypt($ciphertext));\n}\n\n/**\n * Generate a simple password\n *\n * @param int $length Length of string\n * @param bool $symbolsincluded Allow symbols\n *\n * @return string\n */\nfunction generateQuickPassword(int $length = 16, bool $symbolsincluded = true): string\n{\n    // Generate new user password\n    $small_letters = range('a', 'z');\n    $big_letters = range('A', 'Z');\n    $digits = range(0, 9);\n    $symbols = $symbolsincluded === true ?\n        ['#', '_', '-', '@', '$', '+', '&'] : [];\n    $res = array_merge($small_letters, $big_letters, $digits, $symbols);\n    $count = count($res);\n    // first variant\n\n    $random_string = '';\n    for ($i = 0; $i < $length; ++$i) {\n        $random_string .= $res[random_int(0, $count - 1)];\n    }\n\n    return $random_string;\n}\n\n/**\n * Permit to store the sharekey of an object for users.\n *\n * @param string $object_name             Type for table selection\n * @param int    $post_folder_is_personal Personal\n * @param int    $post_folder_id          Folder\n * @param int    $post_object_id          Object\n * @param string $objectKey               Object key\n * @param array  $SETTINGS                Teampass settings\n *\n * @return void\n */\nfunction storeUsersShareKey(\n    string $object_name,\n    int $post_folder_is_personal,\n    int $post_folder_id,\n    int $post_object_id,\n    string $objectKey,\n    array $SETTINGS\n): void {\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Delete existing entries for this object\n    DB::delete(\n        $object_name,\n        'object_id = %i',\n        $post_object_id\n    );\n    // Superglobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Prepare superGlobal variables\n    $sessionPpersonaFolders = $superGlobal->get('personal_folders', 'SESSION');\n    $sessionUserId = $superGlobal->get('user_id', 'SESSION');\n    $sessionUserPublicKey = $superGlobal->get('public_key', 'SESSION', 'user');\n    if (\n        (int) $post_folder_is_personal === 1\n        && in_array($post_folder_id, $sessionPpersonaFolders) === true\n    ) {\n        // If this is a personal object\n        // Only create the sharekey for user\n        DB::insert(\n            $object_name,\n            [\n                'object_id' => (int) $post_object_id,\n                'user_id' => (int) $sessionUserId,\n                'share_key' => encryptUserObjectKey($objectKey, $sessionUserPublicKey),\n            ]\n        );\n    } else {\n        // This is a public object\n        // Create sharekey for each user\n        $users = DB::query(\n            'SELECT id, public_key\n            FROM ' . prefixTable('users') . '\n            WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\")\n            AND public_key != \"\"'\n        );\n        foreach ($users as $user) {\n            // Insert in DB the new object key for this item by user\n            DB::insert(\n                $object_name,\n                [\n                    'object_id' => $post_object_id,\n                    'user_id' => (int) $user['id'],\n                    'share_key' => encryptUserObjectKey(\n                        $objectKey,\n                        $user['public_key']\n                    ),\n                ]\n            );\n        }\n    }\n}\n\n/**\n * Is this string base64 encoded?\n *\n * @param string $str Encoded string?\n *\n * @return bool\n */\nfunction isBase64(string $str): bool\n{\n    $str = (string) trim($str);\n    if (! isset($str[0])) {\n        return false;\n    }\n\n    $base64String = (string) base64_decode($str, true);\n    if ($base64String && base64_encode($base64String) === $str) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Undocumented function\n *\n * @param string $field Parameter\n *\n * @return array|bool|resource|string\n */\nfunction filterString(string $field)\n{\n    // Sanitize string\n    $field = filter_var(trim($field), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n    if (empty($field) === false) {\n        // Load AntiXSS\n        include_once __DIR__.'/../includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n        $antiXss = new voku\\helper\\AntiXSS();\n        // Return\n        return $antiXss->xss_clean($field);\n    }\n\n    return false;\n}\n\n/**\n * CHeck if provided credentials are allowed on server\n *\n * @param string $login    User Login\n * @param string $password User Pwd\n * @param array  $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction ldapCheckUserPassword(string $login, string $password, array $SETTINGS): bool\n{\n    // Build ldap configuration array\n    $config = [\n        // Mandatory Configuration Options\n        'hosts' => [$SETTINGS['ldap_hosts']],\n        'base_dn' => $SETTINGS['ldap_bdn'],\n        'username' => $SETTINGS['ldap_username'],\n        'password' => $SETTINGS['ldap_password'],\n\n        // Optional Configuration Options\n        'port' => $SETTINGS['ldap_port'],\n        'use_ssl' => (int) $SETTINGS['ldap_ssl'] === 1 ? true : false,\n        'use_tls' => (int) $SETTINGS['ldap_tls'] === 1 ? true : false,\n        'version' => 3,\n        'timeout' => 5,\n        'follow_referrals' => false,\n\n        // Custom LDAP Options\n        'options' => [\n            // See: http://php.net/ldap_set_option\n            LDAP_OPT_X_TLS_REQUIRE_CERT => (isset($SETTINGS['ldap_tls_certiface_check']) ? $SETTINGS['ldap_tls_certiface_check'] : LDAP_OPT_X_TLS_HARD),\n        ],\n    ];\n    // Load expected libraries\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/Macroable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Arr.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/DetectsErrors.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Connection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/LdapInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Ldap.php';\n    $ad = new SplClassLoader('LdapRecord', '../includes/libraries');\n    $ad->register();\n    $connection = new Connection($config);\n    // Connect to LDAP\n    try {\n        $connection->connect();\n    } catch (\\LdapRecord\\Auth\\BindException $e) {\n        $error = $e->getDetailedError();\n        echo 'Error : '.$error->getErrorCode().' - '.$error->getErrorMessage(). '<br>'.$error->getDiagnosticMessage();\n        return false;\n    }\n\n    // Authenticate user\n    try {\n        if ($SETTINGS['ldap_type'] === 'ActiveDirectory') {\n            $connection->auth()->attempt($login, $password, $stayAuthenticated = true);\n        } else {\n            $connection->auth()->attempt($SETTINGS['ldap_user_attribute'].'='.$login.','.(isset($SETTINGS['ldap_dn_additional_user_dn']) && !empty($SETTINGS['ldap_dn_additional_user_dn']) ? $SETTINGS['ldap_dn_additional_user_dn'].',' : '').$SETTINGS['ldap_bdn'], $password, $stayAuthenticated = true);\n        }\n    } catch (\\LdapRecord\\Auth\\BindException $e) {\n        $error = $e->getDetailedError();\n        echo 'Error : '.$error->getErrorCode().' - '.$error->getErrorMessage(). '<br>'.$error->getDiagnosticMessage();\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes from DB all sharekeys of this user\n *\n * @param int $userId User's id\n * @param array   $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction deleteUserObjetsKeys(int $userId, array $SETTINGS = []): bool\n{\n    // include librairies & connect to DB\n    include_once __DIR__. '/../includes/config/settings.php';\n    include_once __DIR__. '/../includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Remove all item sharekeys items\n    DB::delete(\n        prefixTable('sharekeys_items'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys files\n    DB::delete(\n        prefixTable('sharekeys_files'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys fields\n    DB::delete(\n        prefixTable('sharekeys_fields'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys logs\n    DB::delete(\n        prefixTable('sharekeys_logs'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys suggestions\n    DB::delete(\n        prefixTable('sharekeys_suggestions'),\n        'user_id = %i',\n        $userId\n    );\n    return false;\n}\n\n/**\n * Manage list of timezones   $SETTINGS Teampass settings\n *\n * @return array\n */\nfunction timezone_list()\n{\n    static $timezones = null;\n    if ($timezones === null) {\n        $timezones = [];\n        $offsets = [];\n        $now = new DateTime('now', new DateTimeZone('UTC'));\n        foreach (DateTimeZone::listIdentifiers() as $timezone) {\n            $now->setTimezone(new DateTimeZone($timezone));\n            $offsets[] = $offset = $now->getOffset();\n            $timezones[$timezone] = '(' . format_GMT_offset($offset) . ') ' . format_timezone_name($timezone);\n        }\n\n        array_multisort($offsets, $timezones);\n    }\n\n    return $timezones;\n}\n\n/**\n * Provide timezone offset\n *\n * @param int $offset Timezone offset\n *\n * @return string\n */\nfunction format_GMT_offset($offset): string\n{\n    $hours = intval($offset / 3600);\n    $minutes = abs(intval($offset % 3600 / 60));\n    return 'GMT' . ($offset ? sprintf('%+03d:%02d', $hours, $minutes) : '');\n}\n\n/**\n * Provides timezone name\n *\n * @param string $name Timezone name\n *\n * @return string\n */\nfunction format_timezone_name($name): string\n{\n    $name = str_replace('/', ', ', $name);\n    $name = str_replace('_', ' ', $name);\n\n    return str_replace('St ', 'St. ', $name);\n}\n\n/**\n * Provides info if user should use MFA based on roles\n *\n * @param string $userRolesIds  User roles ids\n * @param string $mfaRoles      Roles for which MFA is requested\n *\n * @return bool\n */\nfunction mfa_auth_requested_roles(string $userRolesIds, string $mfaRoles): bool\n{\n    if (empty($mfaRoles) === true) {\n        return true;\n    }\n\n    $mfaRoles = array_values(json_decode($mfaRoles, true));\n    $userRolesIds = array_filter(explode(';', $userRolesIds));\n    if (count($mfaRoles) === 0 || count(array_intersect($mfaRoles, $userRolesIds)) > 0) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Permits to clean a string for export purpose\n *\n * @param string $text\n * @param bool $emptyCheckOnly\n * \n * @return string\n */\nfunction cleanStringForExport(string $text, bool $emptyCheckOnly = false): string\n{\n    if (is_null($text) === true || empty($text) === true) {\n        return '';\n    }\n    // only expected to check if $text was empty\n    elseif ($emptyCheckOnly === true) {\n        return $text;\n    }\n\n    return strip_tags(\n        cleanString(\n            html_entity_decode($text, ENT_QUOTES | ENT_XHTML, 'UTF-8'),\n            true)\n        );\n}\n\n/**\n * Permits to check if user ID is valid\n *\n * @param integer $post_user_id\n * @return bool\n */\nfunction isUserIdValid($userId): bool\n{\n    if (is_null($userId) === false\n        && isset($userId) === true\n        && empty($userId) === false\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value equal the one expected\n *\n * @param string $key\n * @param integer|string $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndEqual(\n    string $key,\n    /*PHP8 - integer|string*/$value,\n    array $array\n): bool\n{\n    if (isset($array[$key]) === true\n        && (is_int($value) === true ?\n            (int) $array[$key] === $value :\n            (string) $array[$key] === $value)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a variable is not set or equal to a value\n *\n * @param string|null $var\n * @param integer|string $value\n * \n * @return boolean\n */\nfunction isKeyNotSetOrEqual(\n    /*PHP8 - string|null*/$var,\n    /*PHP8 - integer|string*/$value\n): bool\n{\n    if (isset($var) === false\n        || (is_int($value) === true ?\n            (int) $var === $value :\n            (string) $var === $value)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value < to the one expected\n *\n * @param string $key\n * @param integer $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndInferior(string $key, int $value, array $array): bool\n{\n    if (isset($array[$key]) === true && (int) $array[$key] < $value) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value > to the one expected\n *\n * @param string $key\n * @param integer $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndSuperior(string $key, int $value, array $array): bool\n{\n    if (isset($array[$key]) === true && (int) $array[$key] > $value) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if values in array are set\n * Return true if all set\n * Return false if one of them is not set\n *\n * @param array $arrayOfValues\n * @return boolean\n */\nfunction isSetArrayOfValues(array $arrayOfValues): bool\n{\n    foreach($arrayOfValues as $value) {\n        if (isset($value) === false) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Check if values in array are set\n * Return true if all set\n * Return false if one of them is not set\n *\n * @param array $arrayOfValues\n * @param integer|string $value\n * @return boolean\n */\nfunction isArrayOfVarsEqualToValue(\n    array $arrayOfVars,\n    /*PHP8 - integer|string*/$value\n) : bool\n{\n    foreach($arrayOfVars as $variable) {\n        if ($variable !== $value) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Checks if at least one variable in array is equal to value\n *\n * @param array $arrayOfValues\n * @param integer|string $value\n * @return boolean\n */\nfunction isOneVarOfArrayEqualToValue(\n    array $arrayOfVars,\n    /*PHP8 - integer|string*/$value\n) : bool\n{\n    foreach($arrayOfVars as $variable) {\n        if ($variable === $value) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Checks is value is null, not set OR empty\n *\n * @param string|int|null $value\n * @return boolean\n */\nfunction isValueSetNullEmpty(/*PHP8 - string|int|null*/ $value) : bool\n{\n    if (is_null($value) === true || isset($value) === false || empty($value) === true) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Checks if value is set and if empty is equal to passed boolean\n *\n * @param string|int $value\n * @param boolean $boolean\n * @return boolean\n */\nfunction isValueSetEmpty($value, $boolean = true) : bool\n{\n    if (isset($value) === true && empty($value) === $boolean) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Ensure Complexity is translated\n *\n * @return void\n */\nfunction defineComplexity() : void\n{\n    if (defined('TP_PW_COMPLEXITY') === false) {\n        define(\n            'TP_PW_COMPLEXITY',\n            [\n                TP_PW_STRENGTH_1 => array(TP_PW_STRENGTH_1, langHdl('complex_level1'), 'fas fa-thermometer-empty text-danger'),\n                TP_PW_STRENGTH_2 => array(TP_PW_STRENGTH_2, langHdl('complex_level2'), 'fas fa-thermometer-quarter text-warning'),\n                TP_PW_STRENGTH_3 => array(TP_PW_STRENGTH_3, langHdl('complex_level3'), 'fas fa-thermometer-half text-warning'),\n                TP_PW_STRENGTH_4 => array(TP_PW_STRENGTH_4, langHdl('complex_level4'), 'fas fa-thermometer-three-quarters text-success'),\n                TP_PW_STRENGTH_5 => array(TP_PW_STRENGTH_5, langHdl('complex_level5'), 'fas fa-thermometer-full text-success'),\n            ]\n        );\n    }\n}\n\n/**\n * Uses Sanitizer to perform data sanitization\n *\n * @param array     $data\n * @param array     $filters\n * @param string    $path\n * @return array\n */\nfunction dataSanitizer(\n    array $data,\n    array $filters,\n    string $path = __DIR__. '/..' // Path to Teampass root\n): array\n{\n    // Load Sanitizer library\n    require_once $path . '/includes/libraries/Illuminate/Support/Traits/Macroable.php';\n    require_once $path . '/includes/libraries/Illuminate/Support/Str.php';\n    require_once $path . '/includes/libraries/Illuminate/Validation/ValidationRuleParser.php';\n    require_once $path . '/includes/libraries/Illuminate/Support/Arr.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Contracts/Filter.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/Trim.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/Cast.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/EscapeHTML.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/EmptyStringToNull.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Sanitizer.php';\n\n    // Sanitize post and get variables\n    $sanitizer = new Elegant\\sanitizer\\Sanitizer($data, $filters);\n    return $sanitizer->sanitize();\n}\n\n/**\n * Permits to manage the cache tree for a user\n *\n * @param integer $user_id\n * @param string $data\n * @param array $SETTINGS\n * @param string $field_update\n * @return void\n */\nfunction cacheTreeUserHandler(int $user_id, string $data, array $SETTINGS, string $field_update = '')\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n\n    // Exists ?\n    $userCacheId = DB::queryfirstrow(\n        'SELECT increment_id\n        FROM ' . prefixTable('cache_tree') . '\n        WHERE user_id = %i',\n        $user_id\n    );\n    \n    if (is_null($userCacheId) === true || count($userCacheId) === 0) {\n        DB::insert(\n            prefixTable('cache_tree'),\n            array(\n                'data' => $data,\n                'timestamp' => time(),\n                'user_id' => $user_id,\n                'visible_folders' => '',\n            )\n        );\n    } else {\n        if (empty($field_update) === true) {\n            DB::update(\n                prefixTable('cache_tree'),\n                [\n                    'timestamp' => time(),\n                    'data' => $data,\n                ],\n                'increment_id = %i',\n                $userCacheId['increment_id']\n            );\n        } else {\n            DB::update(\n                prefixTable('cache_tree'),\n                [\n                    $field_update => $data,\n                ],\n                'increment_id = %i',\n                $userCacheId['increment_id']\n            );\n        }\n    }\n}\n\n/**\n * Permits to calculate a %\n *\n * @param float $nombre\n * @param float $total\n * @param float $pourcentage\n * @return float\n */\nfunction pourcentage(float $nombre, float $total, float $pourcentage): float\n{ \n    $resultat = ($nombre/$total) * $pourcentage;\n    return round($resultat);\n}\n\n/**\n * Load the folders list from the cache\n *\n * @param string $fieldName\n * @param string $sessionName\n * @param boolean $forceRefresh\n * @return array\n */\nfunction loadFoldersListByCache(\n    string $fieldName,\n    string $sessionName,\n    bool $forceRefresh = false\n): array\n{\n    // Case when refresh is EXPECTED / MANDATORY\n    if ($forceRefresh === true) {\n        return [\n            'state' => false,\n            'data' => [],\n        ];\n    }\n\n    // Get last folder update\n    $lastFolderChange = DB::queryfirstrow(\n        'SELECT valeur FROM ' . prefixTable('misc') . '\n        WHERE type = %s AND intitule = %s',\n        'timestamp',\n        'last_folder_change'\n    );\n    if (DB::count() === 0) {\n        $lastFolderChange['valeur'] = 0;\n    }\n\n    // Case when an update in the tree has been done\n    // Refresh is then mandatory\n    if ((int) $lastFolderChange['valeur'] > (int) (isset($_SESSION['user_tree_last_refresh_timestamp']) === true ? $_SESSION['user_tree_last_refresh_timestamp'] : 0)) {\n        return [\n            'state' => false,\n            'data' => [],\n        ];\n    }\n\n    // Does this user has the tree structure in session?\n    // If yes then use it\n    if (count(isset($_SESSION['teampassUser'][$sessionName]) === true ? $_SESSION['teampassUser'][$sessionName] : []) > 0) {\n        return [\n            'state' => true,\n            'data' => json_encode($_SESSION['teampassUser'][$sessionName]),\n        ];\n    }\n\n    // Does this user has a tree cache\n    $userCacheTree = DB::queryfirstrow(\n        'SELECT '.$fieldName.'\n        FROM ' . prefixTable('cache_tree') . '\n        WHERE user_id = %i',\n        $_SESSION['user_id']\n    );\n    if (empty($userCacheTree[$fieldName]) === false && $userCacheTree[$fieldName] !== '[]') {\n        return [\n            'state' => true,\n            'data' => $userCacheTree[$fieldName],\n        ];\n    }\n\n    return [\n        'state' => false,\n        'data' => [],\n    ];\n}\n\n\n/**\n * Permits to refresh the categories of folders\n *\n * @param array $folderIds\n * @return void\n */\nfunction handleFoldersCategories(\n    array $folderIds\n)\n{\n    //load ClassLoader\n    include_once __DIR__. '/../sources/SplClassLoader.php';\n    \n    //Connect to DB\n    include_once __DIR__. '/../includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, []));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n\n    $arr_data = array();\n\n    // force full list of folders\n    if (count($folderIds) === 0) {\n        $folderIds = DB::queryFirstColumn(\n            'SELECT id\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE personal_folder=%i',\n            0\n        );\n    }\n\n    // Get complexity\n    defineComplexity();\n\n    // update\n    foreach ($folderIds as $folder) {\n        // Do we have Categories\n        // get list of associated Categories\n        $arrCatList = array();\n        $rows_tmp = DB::query(\n            'SELECT c.id, c.title, c.level, c.type, c.masked, c.order, c.encrypted_data, c.role_visibility, c.is_mandatory,\n            f.id_category AS category_id\n            FROM ' . prefixTable('categories_folders') . ' AS f\n            INNER JOIN ' . prefixTable('categories') . ' AS c ON (f.id_category = c.parent_id)\n            WHERE id_folder=%i',\n            $folder\n        );\n        if (DB::count() > 0) {\n            foreach ($rows_tmp as $row) {\n                $arrCatList[$row['id']] = array(\n                    'id' => $row['id'],\n                    'title' => $row['title'],\n                    'level' => $row['level'],\n                    'type' => $row['type'],\n                    'masked' => $row['masked'],\n                    'order' => $row['order'],\n                    'encrypted_data' => $row['encrypted_data'],\n                    'role_visibility' => $row['role_visibility'],\n                    'is_mandatory' => $row['is_mandatory'],\n                    'category_id' => $row['category_id'],\n                );\n            }\n        }\n        $arr_data['categories'] = $arrCatList;\n\n        // Now get complexity\n        $valTemp = '';\n        $data = DB::queryFirstRow(\n            'SELECT valeur\n            FROM ' . prefixTable('misc') . '\n            WHERE type = %s AND intitule=%i',\n            'complex',\n            $folder\n        );\n        if (DB::count() > 0 && empty($data['valeur']) === false) {\n            $valTemp = array(\n                'value' => $data['valeur'],\n                'text' => TP_PW_COMPLEXITY[$data['valeur']][1],\n            );\n        }\n        $arr_data['complexity'] = $valTemp;\n\n        // Now get Roles\n        $valTemp = '';\n        $rows_tmp = DB::query(\n            'SELECT t.title\n            FROM ' . prefixTable('roles_values') . ' as v\n            INNER JOIN ' . prefixTable('roles_title') . ' as t ON (v.role_id = t.id)\n            WHERE v.folder_id = %i\n            GROUP BY title',\n            $folder\n        );\n        foreach ($rows_tmp as $record) {\n            $valTemp .= (empty($valTemp) === true ? '' : ' - ') . $record['title'];\n        }\n        $arr_data['visibilityRoles'] = $valTemp;\n\n        // now save in DB\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'categories' => json_encode($arr_data),\n            ),\n            'id = %i',\n            $folder\n        );\n    }\n}\n\n/**\n * List all users that have specific roles\n *\n * @param array $roles\n * @return array\n */\nfunction getUsersWithRoles(\n    array $roles\n): array\n{\n    $arrUsers = array();\n\n    foreach ($roles as $role) {\n        // loop on users and check if user has this role\n        $rows = DB::query(\n            'SELECT id, fonction_id\n            FROM ' . prefixTable('users') . '\n            WHERE id != %i AND admin = 0 AND fonction_id IS NOT NULL AND fonction_id != \"\"',\n            $_SESSION['user_id']\n        );\n        foreach ($rows as $user) {\n            $userRoles = explode(';', is_null($user['fonction_id']) === false && empty($user['fonction_id']) === false ? $user['fonction_id'] : []);\n            if (in_array($role, $userRoles, true) === true) {\n                array_push($arrUsers, $user['id']);\n            }\n        }\n    }\n\n    return $arrUsers;\n}\n\n// #3476 - check if function str_contains exists (using PHP 8.0.0 or h)\n// else define it\nif (!function_exists('str_contains')) {\n    function str_contains($haystack, $needle) {\n        return $needle !== '' && mb_strpos($haystack, $needle) !== false;\n    }\n}\n\n/**\n * Get all users informations\n *\n * @param integer $userId\n * @return array\n */\nfunction getFullUserInfos(\n    int $userId\n): array\n{\n    if (empty($userId) === true) {\n        return array();\n    }\n\n    $val = DB::queryfirstrow(\n        'SELECT *\n        FROM ' . prefixTable('users') . '\n        WHERE id = %i',\n        $userId\n    );\n\n    return $val;\n}\n\n/**\n * Is required an upgrade\n *\n * @return boolean\n */\nfunction upgradeRequired(): bool\n{\n    // Get settings.php\n    include_once __DIR__. '/../includes/config/settings.php';\n\n    // Get timestamp in DB\n    $val = DB::queryfirstrow(\n        'SELECT valeur\n        FROM ' . prefixTable('misc') . '\n        WHERE type = %s AND intitule = %s',\n        'admin',\n        'upgrade_timestamp'\n    );\n    \n    // if not exists then error\n    if (is_null($val) === true || count($val) === 0 || defined('UPGRADE_MIN_DATE') === false) return true;\n\n    // if empty or too old then error\n    if (empty($val['valeur']) === true || (int) $val['valeur'] < (int) UPGRADE_MIN_DATE) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Permits to change the user keys on his demand\n *\n * @param integer $userId\n * @param string $passwordClear\n * @param integer $nbItemsToTreat\n * @param string $encryptionKey\n * @param boolean $deleteExistingKeys\n * @param boolean $sendEmailToUser\n * @param boolean $encryptWithUserPassword\n * @param boolean $generate_user_new_password\n * @param string $emailBody\n * @return string\n */\nfunction handleUserKeys(\n    int $userId,\n    string $passwordClear,\n    int $nbItemsToTreat,\n    string $encryptionKey = '',\n    bool $deleteExistingKeys = false,\n    bool $sendEmailToUser = true,\n    bool $encryptWithUserPassword = false,\n    bool $generate_user_new_password = false,\n    string $emailBody = ''\n): string\n{\n\n    // prepapre background tasks for item keys generation        \n    $userTP = DB::queryFirstRow(\n        'SELECT pw, public_key, private_key\n        FROM ' . prefixTable('users') . '\n        WHERE id = %i',\n        TP_USER_ID\n    );\n    if (DB::count() > 0) {\n        // Do we need to generate new user password\n        if ($generate_user_new_password === true) {\n            // Generate a new password\n            $passwordClear = GenerateCryptKey(20, false, true, true, false, true);\n\n            // Hash the new password\n            $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n            $pwdlib->register();\n            $pwdlib = new PasswordLib\\PasswordLib();\n            $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n            if ($pwdlib->verifyPasswordHash($passwordClear, $hashedPassword) === false) {\n                return prepareExchangedData(\n                    __DIR__.'/..',\n                    array(\n                        'error' => true,\n                        'message' => langHdl('pw_hash_not_correct'),\n                    ),\n                    'encode'\n                );\n            }\n\n            // Generate new keys\n            $userKeys = generateUserKeys($passwordClear);\n\n            // Save in DB\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'pw' => $hashedPassword,\n                    'public_key' => $userKeys['public_key'],\n                    'private_key' => $userKeys['private_key'],\n                ),\n                'id=%i',\n                $userId\n            );\n        }\n\n        // Manage empty encryption key\n        // Let's take the user's password if asked and if no encryption key provided\n        $encryptionKey = $encryptWithUserPassword === true && empty($encryptionKey) === true ? $passwordClear : $encryptionKey;\n\n        // Create process\n        DB::insert(\n            prefixTable('processes'),\n            array(\n                'created_at' => time(),\n                'process_type' => 'create_user_keys',\n                'arguments' => json_encode([\n                    'new_user_id' => (int) $userId,\n                    'new_user_pwd' => cryption($passwordClear, '','encrypt')['string'],\n                    'new_user_code' => cryption(empty($encryptionKey) === true ? uniqidReal(20) : $encryptionKey, '','encrypt')['string'],\n                    'owner_id' => (int) TP_USER_ID,\n                    'creator_pwd' => $userTP['pw'],\n                    'send_email' => $sendEmailToUser === true ? 1 : 0,\n                    'otp_provided_new_value' => 1,\n                    'email_body' => empty($emailBody) === true ? '' : langHdl($emailBody),\n                ]),\n                'updated_at' => '',\n                'finished_at' => '',\n                'output' => '',\n            )\n        );\n        $processId = DB::insertId();\n\n        // Delete existing keys\n        if ($deleteExistingKeys === true) {\n            deleteUserObjetsKeys(\n                (int) $userId,\n            );\n        }\n\n        // Create tasks\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step0',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step1',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step2',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step3',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step4',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step5',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step6',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        // update user's new status\n        DB::update(\n            prefixTable('users'),\n            [\n                'is_ready_for_usage' => 0,\n                'otp_provided' => 1,\n                'ongoing_process_id' => $processId,\n                'special' => 'generate-keys',\n            ],\n            'id=%i',\n            $userId\n        );\n    }\n\n    return prepareExchangedData(\n        __DIR__.'/..',\n        array(\n            'error' => false,\n            'message' => '',\n        ),\n        'encode'\n    );\n}\n\n/**\n * Permeits to check the consistency of date versus columns definition\n *\n * @param string $table\n * @param array $dataFields\n * @return array\n */\nfunction validateDataFields(\n    string $table,\n    array $dataFields\n): array\n{\n    // Get table structure\n    $result = DB::query(\n        \"SELECT `COLUMN_NAME`, `CHARACTER_MAXIMUM_LENGTH` FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = '%l' AND TABLE_NAME = '%l';\",\n        DB_NAME,\n        $table\n    );\n\n    foreach ($result as $row) {\n        $field = $row['COLUMN_NAME'];\n        $maxLength = is_null($row['CHARACTER_MAXIMUM_LENGTH']) === false ? (int) $row['CHARACTER_MAXIMUM_LENGTH'] : '';\n\n        if (isset($dataFields[$field]) === true && is_array($dataFields[$field]) === false && empty($maxLength) === false) {\n            if (strlen((string) $dataFields[$field]) > $maxLength) {\n                return [\n                    'state' => false,\n                    'field' => $field,\n                    'maxLength' => $maxLength,\n                    'currentLength' => strlen((string) $dataFields[$field]),\n                ];\n            }\n        }\n    }\n    \n    return [\n        'state' => true,\n        'message' => '',\n    ];\n}\n\n/**\n * Adapt special characters sanitized during filter_var with option FILTER_SANITIZE_SPECIAL_CHARS operation\n *\n * @param string $string\n * @return string\n */\nfunction filterVarBack(string $string): string\n{\n    $arr = [\n        '&#060;' => '<',\n        '&#062;' => '>',\n        '&#034;' => '\"',\n        '&#039;' => \"'\",\n        '&#038;' => '&',\n    ];\n\n    foreach ($arr as $key => $value) {\n        $string = str_replace($key, $value, $string);\n    }\n\n    return $string;\n}\n"], "fixing_code": ["/*\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n * @project   Teampass\n * @version   \n * @file      functions.js\n * ---\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n * @copyright 2009-2023 Teampass.net\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n * @see       https://www.teampass.net\n */\n\n/**\n*   Countdown before session expiration\n**/\nfunction countdown()\n{\n    // if a process is in progress then do not decrease the time counter.\n    if (typeof ProcessInProgress !== 'undefined' && ProcessInProgress === true) {\n        $('.countdown-icon')\n            .addClass('fas fa-history')\n            .removeClass('far fa-clock');\n        \n        $(this).delay(1000).queue(function()\n        {\n            countdown();\n            $(this).dequeue();\n        });\n\n        return false;\n    }\n\n    // Continue\n    let DayTill;\n    let hoursInDay = 24;\n    let limitTen = 10;\n    let oneSecondsMs = 1000;\n    let theDay =  $('#temps_restant').val();\n    let today = new Date();\n    let second = Math.floor(theDay - today.getTime() / oneSecondsMs);\n    let minute = Math.floor(second / hourInMinutes);\n    let hour = Math.floor(minute / hourInMinutes);\n    let CHour= hour % hoursInDay;\n    if (CHour < limitTen) {\n        CHour = '0' + CHour;\n    }\n    let CMinute= minute % hourInMinutes;\n    if (CMinute < limitTen) {\n        CMinute = '0' + CMinute;\n    }\n    let CSecond= second % hourInMinutes;\n    if (CSecond < limitTen) {\n        CSecond = '0' + CSecond;\n    }\n    DayTill = CHour + ':' + CMinute + ':' + CSecond;\n\n    // Session will soon be closed\n    if (DayTill === '00:00:50') {\n        showExtendSession();\n        $('#countdown').css('color', 'red');\n    }\n\n    // Manage end of session\n    if ($('#temps_restant').val() !== '' && DayTill <= '00:00:00' && parseInt($('#please_login').val()) !== 1) {\n        $('#please_login').val('1');\n        $(location).attr('href','index.php?session=expired');\n    }\n\n    //Rewrite the string to the correct information.\n    if ($('#countdown')) {\n        $('#countdown').html('<i class=\"far fa-clock countdown-icon mr-1\"></i>' + DayTill);\n    }\n\n    //Create the timer 'counter' that will automatic restart function countdown() again every second.\n    $(this).delay(1000).queue(function()\n    {\n        countdown();\n        $(this).dequeue();\n    });\n}\n\n\n/**\n*\n**/\nfunction unsanitizeString(string) {\n    if(string !== \"\" && string !== null) {\n        string = string.replace(/\\\\/g,\"\").replace(/&#92;/g, \"\\\\\").replace(/&quot;/g, '\"');\n    }\n    return string;\n}\n\n/**\n*   Clean up a string and delete any scripting tags\n**/\nfunction sanitizeString(string) {\n    if(string !== \"\" && string !== null && string !== undefined) {\n        string = string.replace(/\\\\/g,\"&#92;\").replace(/\"/g,\"&quot;\");\n        string = string.replace(new RegExp(\"\\\\s*<script[^>]*>[\\\\s\\\\S]*?</script>\\\\s*\",\"ig\"), \"\");\n    }\n    return string;\n}\n\n/**\n*   Checks if URL has expected format\n**/\nfunction validateURL(url) {\n    let urlregex = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n    return urlregex.test(url);\n}\n\n\nfunction split( val ) {\n    return val.split( / \\s*/ );\n}\n\nfunction extractLast( term ) {\n    return split( term ).pop();\n}\n\n/**\n * Shows error message\n * @param  {string} message  Message to display\n * @return {boolean}         False\n */\nfunction jsonErrorHdl(message)\n{\n    //show as confirm\n    // Prepare modal\n    showModalDialogBox(\n        '#warningModal',\n        '<i class=\"fas fa-warning fa-lg warning mr-2\"></i>Caution',\n        message,\n        '',\n        'Close',\n        true,\n        true\n    );\n\n    // Actions on modal buttons\n    $(document).on('click', '#warningModalButtonClose', function() {\n        \n    });\n    $(document).on('click', '#warningModalButtonAction', function() {\n        // SHow user\n    });\n    return false;\n}\n\n/**\n * [prepareExchangedData description]\n * @param  {[type]} data [description]\n * @param  {[type]} type [description]\n * @param  {[type]} key  [description]\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n * @return {[type]}      [description]\n */\nfunction prepareExchangedData(data, type, key, fileName = '', functionName = '')\n{\n    if (type === 'decode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            try {\n                return $.parseJSON(data);\n            }\n            catch (e) {\n                return jsonErrorHdl(data);\n            }\n        } else {\n            try {\n                let encryption = new Encryption();\n                return JSON.parse(encryption.decrypt(data, key));\n            }\n            catch (e) {\n                return jsonErrorHdl('<b>Next error occurred</b><div>' + e + '</div>'\n                    + (fileName !== '' ? '<br><b>Informations:</b><div>  - File: ' + fileName + '<br>  - Function: ' + functionName + '</div>': '')\n                    + '<div><br><b>Raw answer from server:</b><br>'+data+'</div>');\n            }\n        }\n    } else if (type === 'encode') {\n        if (parseInt($('#encryptClientServer').val()) === 0) {\n            return stripHtml(data);\n        } else {\n            let encryption = new Encryption();\n            return encryption.encrypt(data, key);\n        }\n    } else {\n        return false;\n    }\n}\n\nfunction isJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n\n\n/**\n * Returns the text from a HTML string\n * \n * @param {string} String The html string\n */\nfunction stripHtml(html) {\n    // Create a new div element\n    let temporalDivElement = document.createElement('div');\n    // Set the HTML content with the providen\n    temporalDivElement.innerHTML = html;\n    // Retrieve the text property of the element (cross-browser support)\n    return temporalDivElement.textContent || temporalDivElement.innerText || '';\n}\n\n\n/**\n * \n * @param {string} data Crypted string\n * @param {string} key  Session key\n */\nfunction unCryptData(data, key)\n{\n    if (data !== undefined && data.substr(0, 7) === 'crypted') {\n        let uncryptedData = prepareExchangedData(\n            data.substr(7),\n            'decode',\n            key\n        )\n        \n        if (uncryptedData.password.length > 0)\n            return uncryptedData.password;\n        else\n            return false;\n    }\n    return false;\n}\n\n/**\n * \n * @param {string}data Crypted string\n * @param {string}key  Session key\n * @param  {[type]} fileName  [description]\n * @param  {[type]} functionName  [description]\n */\nfunction decodeQueryReturn(data, key, fileName = '', functionName = '')\n{\n    try {\n        return prepareExchangedData(data , \"decode\", key, fileName, functionName);\n    } catch (e) {\n        // error\n        toastr.remove();\n        toastr.error(\n            'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n            'Error', {\n                timeOut: 5000,\n                progressBar: true\n            }\n        );\n        return false;\n    }\n}\n\n/**\n * \n * @param {string} action Action\n * @param {string} name   Name\n * @param {array} data    Data\n */\nfunction browserSession(action, name, data)\n{\n    // Initialize the session\n    if (action === 'init') {\n        if (store.get(name) === 'undefined'\n            || store.get(name) === undefined\n        ) {\n            store.set(\n                name,\n                data\n            );\n        } else {\n            // Ensure all entries exist\n            $(data).each(function(value, key) {\n                store.update(\n                    name,\n                    function(bSession)\n                    {\n                        bSession.key = value;\n                    }\n                )\n            });\n        }\n    }\n}\n\n/**\n * \n * @param {string} modalId      Modal id\n * @param {string} title        Title\n * @param {string} body         Body\n * @param {string} actionButton Action Button\n * @param {string} closeButton  Close Button\n * @param {string} xlSize       Size\n * @param {string} warningModal Warning Modal\n * @param {string} closeCross   Close on cross\n */\nfunction showModalDialogBox(\n    modalId,\n    title,\n    body,\n    actionButton,\n    closeButton,\n    xlSize = false,\n    warningModal = false,\n    closeCross = true\n) {\n    $(modalId + 'Title').html(title);\n    $(modalId + 'Body').html(body);\n    if (actionButton === '') {\n        $(modalId + 'ButtonAction').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonAction').removeClass('hidden');\n        $(modalId + 'ButtonAction').html(actionButton);\n    }\n    if (closeButton === '') {\n        $(modalId + 'ButtonClose').addClass('hidden');\n    } else {\n        $(modalId + 'ButtonClose').removeClass('hidden');\n        $(modalId + 'ButtonClose').html(closeButton);\n    }\n    if (xlSize === true) {\n        $(modalId + ' div:first').addClass('modal-xl');\n    } else {\n        $(modalId + ' div:first').removeClass('modal-xl');\n    }\n    if (warningModal === true) {\n        $(modalId + ':eq(1)').addClass('bg-warning');\n    } else {\n        $(modalId + ':eq(1)').removeClass('bg-warning');\n    }\n    if (closeCross === false) {\n        $(modalId + 'CrossClose').addClass('hidden');\n    } else {\n        $(modalId + 'CrossClose').removeClass('hidden');\n    }\n    $(modalId).modal({\n        backdrop : 'static',\n        keyboard : false,\n        show: true,\n        focus: true\n    });\n    $(modalId).modal('handleUpdate');\n}\n\n/**\n * Sanitize a string\n * \n * @param {string} str  The string\n */\nfunction htmlEncode(str){\n    return String(str).replace(/[^\\w. ]/gi, function(c){\n        return '&#'+c.charCodeAt(0)+';';\n    });\n}\n\n/* Extend String object with method to encode multi-byte string to utf8\n * - monsur.hossa.in/2012/07/20/utf-8-in-javascript.html\n * - note utf8Encode is an identity function with 7-bit ascii strings, but not with 8-bit strings;\n * - utf8Encode('x') = 'x', but utf8Encode('\u00e7a') = '\u00c3\u00a7a', and utf8Encode('\u00c3\u00a7a') = '\u00c3\u0083\u00c2\u00a7a'*/\nif (typeof String.prototype.utf8Encode == 'undefined') {\n    String.prototype.utf8Encode = function() {\n        return unescape( encodeURIComponent( this ) );\n    };\n}\n\n/* Extend String object with method to decode utf8 string to multi-byte */\nif (typeof String.prototype.utf8Decode == 'undefined') {\n    String.prototype.utf8Decode = function() {\n        try {\n            return decodeURIComponent( escape( this ) );\n        } catch (e) {\n            return this; // invalid UTF-8? return as-is\n        }\n    };\n}\n\nfunction fieldSanitizeStep1(\n    field,\n    bHtml=true,\n    bSvg=true,\n    bSvgFilters=true,\n    text=''\n)\n{\n    if (field === undefined ||field === '') {\n        return false;\n    }\n    let string = '';\n    text = (text === '') ? $(field).val() : text;\n/*\n    // Sanitize string\n    var tagsToReplace = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        \"'\" : '&#39;',\n        '\"' : '&quot;'\n    };\n    text = text.replace(/[&<>'\"]/g, function(tag) {\n        return tagsToReplace[tag] || tag;\n    });\n    */\n    // Purify string\n    string = DOMPurify.sanitize(\n        text\n            .replaceAll('&lt;', '<')\n            .replaceAll('&gt;', '>')\n            .replaceAll('&amp;', '&')\n            .replaceAll('&quot;', '\"')\n            .replaceAll('&#39;', \"'\"),\n        {USE_PROFILES: {html:bHtml, svg:bSvg, svgFilters: bSvgFilters}}\n    );\n    \n    // Clear field if string is empty and warn user\n    if (string === '' && text !== '') {\n        $(field).val('');\n        return false;\n    }\n\n    return string;\n}", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      profile.js.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nif (\n    isset($_SESSION['CPM']) === false || $_SESSION['CPM'] !== 1\n    || isset($_SESSION['user_id']) === false || empty($_SESSION['user_id']) === true\n    || isset($_SESSION['key']) === false || empty($_SESSION['key']) === true\n) {\n    die('Hacking attempt...');\n}\n\n// Load config\nif (file_exists('../includes/config/tp.config.php') === true) {\n    include_once '../includes/config/tp.config.php';\n} elseif (file_exists('./includes/config/tp.config.php') === true) {\n    include_once './includes/config/tp.config.php';\n} else {\n    throw new Exception('Error file \"/includes/config/tp.config.php\" not exists', 1);\n}\n\n/* do checks */\nrequire_once $SETTINGS['cpassman_dir'] . '/sources/checks.php';\nif (checkUser($_SESSION['user_id'], $_SESSION['key'], 'profile', $SETTINGS) === false) {\n    $_SESSION['error']['code'] = ERR_NOT_ALLOWED;\n    //not allowed page\n    include $SETTINGS['cpassman_dir'] . '/error.php';\n    exit;\n}\n?>\n\n\n<script type='text/javascript'>\n    <?php if (isset($SETTINGS['api']) === true && (int) $SETTINGS['api'] === 1) : ?>\n        // If user api is empty then generate one\n        if ($('#profile-user-api-token').text() === '') {\n            generateNewUserApiKey('profile-user-api-token', true);\n        }\n\n        $('#profile-button-api_token').click(function() {\n            generateNewUserApiKey('profile-user-api-token', false);\n        });\n    <?php endif; ?>\n\n    //iCheck for checkbox and radio inputs\n    $('#tab_reset_psk input[type=\"checkbox\"]').iCheck({\n        checkboxClass: 'icheckbox_flat-blue'\n    })\n\n    // Select user properties\n    $('#profile-user-language option[value=<?php echo $_SESSION['user']['user_language'];?>').attr('selected','selected');\n\n\n    // AVATAR IMPORT\n    var uploader_photo = new plupload.Uploader({\n        runtimes: 'gears,html5,flash,silverlight,browserplus',\n        browse_button: 'profile-avatar-file',\n        container: 'profile-avatar-file-container',\n        max_file_size: '2mb',\n        chunk_size: '1mb',\n        unique_names: true,\n        dragdrop: true,\n        multiple_queues: false,\n        multi_selection: false,\n        max_file_count: 1,\n        filters: [{\n            title: 'PNG files',\n            extensions: 'png'\n        }],\n        resize: {\n            width: '90',\n            height: '90',\n            quality: '90'\n        },\n        url: '<?php echo $SETTINGS['cpassman_url']; ?>/sources/upload.files.php',\n        flash_swf_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.swf',\n        silverlight_xap_url: '<?php echo $SETTINGS['cpassman_url']; ?>/includes/libraries/Plupload/Moxie.xap',\n        init: {\n            FilesAdded: function(up, files) {\n                // generate and save token\n                $.post(\n                    'sources/main.queries.php', {\n                        type: 'save_token',\n                        type_category: 'action_system',\n                        size: 25,\n                        capital: true,\n                        secure: true,\n                        numeric: true,\n                        symbols: true,\n                        lowercase: true,\n                        reason: 'avatar_profile_upload',\n                        duration: 10,\n                        key: '<?php echo $_SESSION['key']; ?>'\n                    },\n                    function(data) {\n                        $('#profile-user-token').val(data[0].token);\n                        up.start();\n                    },\n                    'json'\n                );\n            },\n            BeforeUpload: function(up, file) {\n                var tmp = Math.random().toString(36).substring(7);\n\n                up.settings.multipart_params = {\n                    'PHPSESSID': '<?php echo $_SESSION['user_id']; ?>',\n                    'type_upload': 'upload_profile_photo',\n                    'user_token': $('#profile-user-token').val()\n                };\n            },\n            FileUploaded: function(upldr, file, object) {\n                // Decode returned data\n                var myData = prepareExchangedData(object.response, 'decode', '<?php echo $_SESSION['key']; ?>');\n                // update form\n                $('#profile-user-avatar').attr('src', 'includes/avatars/' + myData.filename);\n                $('#profile-avatar-file-list').html('').addClass('hidden');\n            }\n        }\n    });\n\n    // Show runtime status\n    uploader_photo.bind('Init', function(up, params) {\n        $('#profile-plupload-runtime')\n            .html(params.runtime)\n            .removeClass('text-danger')\n            .addClass('text-info')\n            .data('enabled', 1);\n    });\n\n    // get error\n    uploader_photo.bind('Error', function(up, err) {\n        $('#profile-avatar-file-list').html('<div class=\"ui-state-error ui-corner-all\">Error: ' + err.code +\n            ', Message: ' + err.message +\n            (err.file ? ', File: ' + err.file.name : '') +\n            '</div>'\n        );\n        up.refresh(); // Reposition Flash/Silverlight\n    });\n\n    uploader_photo.init();\n\n\n    // Save user settings\n    $('#profile-user-save-settings').click(function() {\n        // Sanitize text fields\n        let formName = fieldSanitizeStep1('#profile-user-name', false, false, false),\n            formLastname = fieldSanitizeStep1('#profile-user-lastname', false, false, false),\n            formEmail = fieldSanitizeStep1('#profile-user-email', false, false, false);\n        if (formName === false || formLastname === false || formEmail === false) {\n            // Label is empty\n            toastr.remove();\n            toastr.warning(\n                'XSS attempt detected. Field has been emptied.',\n                'Error', {\n                    timeOut: 5000,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n\n        // Prepare data\n        var data = {\n            'name': formName,\n            'lastname': formLastname,\n            'email': formEmail,\n            'timezone': $('#profile-user-timezone').val(),\n            'language': $('#profile-user-language').val().toLowerCase(),\n            'treeloadstrategy': $('#profile-user-treeloadstrategy').val().toLowerCase(),\n            'agsescardid': $('#profile-user-agsescardid').length > 0 ? $('#profile-user-agsescardid').val() : '',\n        }\n        console.log(data);\n        //return false;\n        // \" onmouseover=\"confirm(document.cookie)\"\n        // Inform user\n        toastr.remove();\n        toastr.info('<i class=\"fas fa-cog fa-spin fa-2x\"></i>');\n\n        //Send query\n        $.post(\n            \"sources/users.queries.php\", {\n                type: 'user_profile_update',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                isprofileupdate: true,\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                //decrypt data\n                try {\n                    data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n                } catch (e) {\n                    // error\n                    toastr.remove();\n                    toastr.error(\n                        'An error appears. Answer from Server cannot be parsed!<br />Returned data:<br />' + data,\n                        '', {\n                            closeButton: true\n                        }\n                    );\n                    return false;\n                }\n\n                if (data.error === true) {\n                    toastr.remove();\n                    toastr.error(\n                        data.message,\n                        '', {\n                            closeButton: true\n                        }\n                    );\n                } else {\n                    $('#profile-username').html(data.name + ' ' + data.lastname);\n                    $('#profile-user-name').val(data.name)\n                    $('#profile-user-lastname').val(data.lastname)\n                    $('#profile-user-email').val(data.email)\n\n                    // reload page in case of language change\n                    if ($('#profile-user-language').val().toLowerCase() !== '<?php echo $_SESSION['user']['user_language'];?>') {\n                        // prepare reload\n                        $(this).delay(3000).queue(function() {\n                            document.location.href = \"index.php?page=profile\";\n\n                            $(this).dequeue();\n                        });\n\n                        // Inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('alert_page_will_reload') . ' ... ' . langHdl('please_wait'); ?>',\n                            '', {\n                                timeOut: 3000,\n                                progressBar: true\n                            }\n                        );\n\n                    } else {\n                        // just inform user\n                        toastr.remove();\n                        toastr.info(\n                            '<?php echo langHdl('done'); ?>',\n                            '', {\n                                timeOut: 2000,\n                                progressBar: true\n                            }\n                        );\n\n                        // Force tree refresh\n                        store.update(\n                            'teampassApplication',\n                            function(teampassApplication) {\n                                teampassApplication.jstreeForceRefresh = 1\n                            }\n                        );\n                    }\n                }\n\n            }\n        );\n    });\n\n    /**\n     * Undocumented function\n     *\n     * @return void\n     */\n    function generateNewUserApiKey(target, silent) {\n        var newApiKey = \"\";\n\n        // Generate key\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"generate_password\",\n                type_category: 'action_user',\n                size: \"39\",\n                lowercase: \"true\",\n                numerals: \"true\",\n                capitalize: \"true\",\n                symbols: \"false\",\n                secure: \"false\",\n                key: '<?php echo $_SESSION['key']; ?>'\n            },\n            function(data) {\n                data = prepareExchangedData(data, \"decode\", \"<?php echo $_SESSION['key']; ?>\");\n\n                if (data.key !== \"\") {\n                    newApiKey = data.key;\n\n                    // Save key in session and database\n                    var data = {\n                        'field' : 'user_api_key',\n                        'value' : newApiKey[0],\n                        'user_id' : <?php echo $_SESSION['user_id']; ?>,\n                        'context' : '',\n                    };\n                    console.log(data)\n                    \n                    $.post(\n                        \"sources/users.queries.php\", {\n                            type: \"save_user_change\",\n                            data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                            isprofileupdate: true,\n                            key: \"<?php echo $_SESSION['key']; ?>\"\n                        },\n                        function(data) {\n                            data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                            $(\"#\" + target).text(newApiKey);\n                            if (silent === false) {\n                                $('#profile-tabs a[href=\"#tab_information\"]').tab('show');\n                                toastr.remove();\n                                toastr.info(\n                                    '<?php echo langHdl('done'); ?>',\n                                    '', {\n                                        timeOut: 2000,\n                                        progressBar: true\n                                    }\n                                );\n                            }\n                        }\n                    );\n                }\n            }\n        );\n    }\n\n\n    //-------------------\n    $(\"#profile-password\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-password-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_1;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_2;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_3;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_4;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_5;?>,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-password\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-password-complex\").val(score);\n        }\n    });\n\n    $('#profile-save-password-change').click(function() {\n        // Check if passwords are the same\n        if ($('#profile-password').val() !== $('#profile-password-confirm').val() ||\n            $('#profile-password').val() === '' ||\n            $('#profile-password-confirm').val() === ''\n        ) {\n            toastr.remove();\n            toastr.error(\n                '<?php echo langHdl('index_pw_error_identical'); ?>',\n                '', {\n                    timeOut: 10000,\n                    closeButton: true,\n                    progressBar: true\n                }\n            );\n            return false;\n        }\n        // Inform user\n        toastr.remove();\n        toastr.info('<i class=\"fas fa-cog fa-spin fa-2x\"></i>');\n\n        var data = {\n            'new_pw': DOMPurify.sanitize($('#profile-password').val()),\n            'complexity': $('#profile-password-complex').val(),\n            \"change_request\": 'user_decides_to_change_password',\n            \"user_id\": store.get('teampassUser').user_id,\n        };\n\n        //Send query\n        $.post(\n            \"sources/main.queries.php\", {\n                type: \"change_pw\",\n                type_category: 'action_password',\n                data: prepareExchangedData(JSON.stringify(data), \"encode\", \"<?php echo $_SESSION['key']; ?>\"),\n                key: \"<?php echo $_SESSION['key']; ?>\"\n            },\n            function(data) {\n                data = prepareExchangedData(data, 'decode', '<?php echo $_SESSION['key']; ?>');\n                console.log(data);\n\n                if (data.error === true) {\n                    $('#profile-password').focus();\n                    toastr.remove();\n                    toastr.warning(\n                        '<?php echo langHdl('your_attention_is_required'); ?>',\n                        data.message, {\n                            timeOut: 10000,\n                            closeButton: true,\n                            progressBar: true\n                        }\n                    );\n                } else {\n                    $('#profile-password, #profile-password-confirm').val('');\n                    toastr.remove();\n                    toastr.success(\n                        '<?php echo langHdl('done'); ?>',\n                        data.message, {\n                            timeOut: 2000,\n                            progressBar: true\n                        }\n                    );\n\n                    window.location.href = \"index.php\";\n                }\n\n            }\n        );\n    });\n\n\n    // ----\n    $(\"#profile-saltkey\").simplePassMeter({\n        \"requirements\": {},\n        \"container\": \"#profile-saltkey-strength\",\n        \"defaultText\": \"<?php echo langHdl('index_pw_level_txt'); ?>\",\n        \"ratings\": [\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_1;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level1'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_2;?>,\n                \"className\": \"meterWarn\",\n                \"text\": \"<?php echo langHdl('complex_level2'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_3;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level3'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_4;?>,\n                \"className\": \"meterGood\",\n                \"text\": \"<?php echo langHdl('complex_level4'); ?>\"\n            },\n            {\n                \"minScore\": <?php echo TP_PW_STRENGTH_5;?>,\n                \"className\": \"meterExcel\",\n                \"text\": \"<?php echo langHdl('complex_level5'); ?>\"\n            }\n        ]\n    });\n    $(\"#profile-saltkey\").bind({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-saltkey-complex\").val(score);\n        }\n    }).change({\n        \"score.simplePassMeter\": function(jQEvent, score) {\n            $(\"#profile-saltkey-complex\").val(score);\n        }\n    });\n</script>\n", "<?php\n\ndeclare(strict_types=1);\n\n/**\n * Teampass - a collaborative passwords manager.\n * ---\n * This library is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * ---\n *\n * @project   Teampass\n * @file      main.functions.php\n * ---\n *\n * @author    Nils Laumaill\u00e9 (nils@teampass.net)\n *\n * @copyright 2009-2023 Teampass.net\n *\n * @license   https://spdx.org/licenses/GPL-3.0-only.html#licenseText GPL-3.0\n * ---\n *\n * @see       https://www.teampass.net\n */\n\nuse LdapRecord\\Connection;\nuse ForceUTF8\\Encoding;\n\nif (isset($_SESSION['CPM']) === false || (int) $_SESSION['CPM'] !== 1) {\n    //die('Hacking attempt...');\n}\n\n// Load config if $SETTINGS not defined\nif (isset($SETTINGS['cpassman_dir']) === false || empty($SETTINGS['cpassman_dir']) === true) {\n    include_once __DIR__ . '/../includes/config/tp.config.php';\n}\n\nheader('Content-type: text/html; charset=utf-8');\nheader('Cache-Control: no-cache, must-revalidate');\n/**\n * Convert language code to string.\n *\n * @param string $string String to get\n */\nfunction langHdl(string $string): string\n{\n    if (empty($string) === true) {\n        // Manage error\n        return 'ERROR in language strings!';\n    }\n\n    // Load superglobal\n    include_once __DIR__.'/../includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get language string\n    $session_language = $superGlobal->get(trim($string), 'SESSION', 'lang');\n    if (is_null($session_language) === true) {\n        /* \n            Load the English version to $_SESSION so we don't \n            return bad JSON (multiple includes add BOM characters to the json returned \n            which makes jquery unhappy on the UI, especially on the log page)\n            and improve performance by avoiding to include the file for every missing strings.\n        */\n        if (isset($_SESSION['teampass']) === false || isset($_SESSION['teampass']['en_lang'][trim($string)]) === false) {\n            $_SESSION['teampass']['en_lang'] = include_once __DIR__. '/../includes/language/english.php';\n            $session_language = isset($_SESSION['teampass']['en_lang'][trim($string)]) === false ? '' : $_SESSION['teampass']['en_lang'][trim($string)];\n        } else {\n            $session_language = $_SESSION['teampass']['en_lang'][trim($string)];\n        }\n    }\n    // If after all this, we still don't have the string even in english (especially with old logs), return the language code\n    if (empty($session_language) === true) {\n        return trim($string);\n    }\n    //return (string) str_replace(\"'\",  \"&apos;\", $session_language);\n    return (string) $session_language;\n}\n\n/**\n * genHash().\n *\n * Generate a hash for user login\n *\n * @param string $password What password\n * @param string $cost     What cost\n *\n * @return string|void\n */\nfunction bCrypt(\n    string $password,\n    string $cost\n): ?string\n{\n    $salt = sprintf('$2y$%02d$', $cost);\n    if (function_exists('openssl_random_pseudo_bytes')) {\n        $salt .= bin2hex(openssl_random_pseudo_bytes(11));\n    } else {\n        $chars = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for ($i = 0; $i < 22; ++$i) {\n            $salt .= $chars[mt_rand(0, 63)];\n        }\n    }\n\n    return crypt($password, $salt);\n}\n\n/**\n * Defuse cryption function.\n *\n * @param string $message   what to de/crypt\n * @param string $ascii_key key to use\n * @param string $type      operation to perform\n * @param array  $SETTINGS  Teampass settings\n *\n * @return array\n */\nfunction cryption(string $message, string $ascii_key, string $type, ?array $SETTINGS = []): array\n{\n    $ascii_key = empty($ascii_key) === true ? file_get_contents(SECUREPATH.'/'.SECUREFILE) : $ascii_key;\n    $err = false;\n    \n    $path = __DIR__.'/../includes/libraries/Encryption/Encryption/';\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n    \n    // convert KEY\n    $key = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n    try {\n        if ($type === 'encrypt') {\n            $text = \\Defuse\\Crypto\\Crypto::encrypt($message, $key);\n        } elseif ($type === 'decrypt') {\n            $text = \\Defuse\\Crypto\\Crypto::decrypt($message, $key);\n        }\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'an attack! either the wrong key was loaded, or the ciphertext has changed since it was created either corrupted in the database or intentionally modified by someone trying to carry out an attack.';\n    } catch (Defuse\\Crypto\\Exception\\BadFormatException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\CryptoException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n    //echo \\Defuse\\Crypto\\Crypto::decrypt($message, $key).' ## ';\n\n    return [\n        'string' => $text ?? '',\n        'error' => $err,\n    ];\n}\n\n/**\n * Generating a defuse key.\n *\n * @return string\n */\nfunction defuse_generate_key()\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n\n    $key = \\Defuse\\Crypto\\Key::createNewRandomKey();\n    $key = $key->saveToAsciiSafeString();\n    return $key;\n}\n\n/**\n * Generate a Defuse personal key.\n *\n * @param string $psk psk used\n *\n * @return string\n */\nfunction defuse_generate_personal_key(string $psk): string\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n    \n    $protected_key = \\Defuse\\Crypto\\KeyProtectedByPassword::createRandomPasswordProtectedKey($psk);\n    return $protected_key->saveToAsciiSafeString(); // save this in user table\n}\n\n/**\n * Validate persoanl key with defuse.\n *\n * @param string $psk                   the user's psk\n * @param string $protected_key_encoded special key\n *\n * @return string\n */\nfunction defuse_validate_personal_key(string $psk, string $protected_key_encoded): string\n{\n    // load PhpEncryption library\n    if (file_exists('../includes/config/tp.config.php') === true) {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    } elseif (file_exists('./includes/config/tp.config.php') === true) {\n        $path = './includes/libraries/Encryption/Encryption/';\n    } else {\n        $path = '../includes/libraries/Encryption/Encryption/';\n    }\n\n    include_once $path . 'Exception/CryptoException.php';\n    include_once $path . 'Exception/BadFormatException.php';\n    include_once $path . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $path . 'Exception/IOException.php';\n    include_once $path . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $path . 'Crypto.php';\n    include_once $path . 'Encoding.php';\n    include_once $path . 'DerivedKeys.php';\n    include_once $path . 'Key.php';\n    include_once $path . 'KeyOrPassword.php';\n    include_once $path . 'File.php';\n    include_once $path . 'RuntimeTests.php';\n    include_once $path . 'KeyProtectedByPassword.php';\n    include_once $path . 'Core.php';\n\n    try {\n        $protected_key_encoded = \\Defuse\\Crypto\\KeyProtectedByPassword::loadFromAsciiSafeString($protected_key_encoded);\n        $user_key = $protected_key_encoded->unlockKey($psk);\n        $user_key_encoded = $user_key->saveToAsciiSafeString();\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        return 'Error - Major issue as the encryption is broken.';\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        return 'Error - The saltkey is not the correct one.';\n    }\n\n    return $user_key_encoded;\n    // store it in session once user has entered his psk\n}\n\n/**\n * Decrypt a defuse string if encrypted.\n *\n * @param string $value Encrypted string\n *\n * @return string Decrypted string\n */\nfunction defuseReturnDecrypted(string $value, $SETTINGS): string\n{\n    if (substr($value, 0, 3) === 'def') {\n        $value = cryption($value, '', 'decrypt', $SETTINGS)['string'];\n    }\n\n    return $value;\n}\n\n/**\n * Trims a string depending on a specific string.\n *\n * @param string|array $chaine  what to trim\n * @param string       $element trim on what\n *\n * @return string\n */\nfunction trimElement($chaine, string $element): string\n{\n    if (! empty($chaine)) {\n        if (is_array($chaine) === true) {\n            $chaine = implode(';', $chaine);\n        }\n        $chaine = trim($chaine);\n        if (substr($chaine, 0, 1) === $element) {\n            $chaine = substr($chaine, 1);\n        }\n        if (substr($chaine, strlen($chaine) - 1, 1) === $element) {\n            $chaine = substr($chaine, 0, strlen($chaine) - 1);\n        }\n    }\n\n    return $chaine;\n}\n\n/**\n * Permits to suppress all \"special\" characters from string.\n *\n * @param string $string  what to clean\n * @param bool   $special use of special chars?\n *\n * @return string\n */\nfunction cleanString(string $string, bool $special = false): string\n{\n    // Create temporary table for special characters escape\n    $tabSpecialChar = [];\n    for ($i = 0; $i <= 31; ++$i) {\n        $tabSpecialChar[] = chr($i);\n    }\n    array_push($tabSpecialChar, '<br />');\n    if ((int) $special === 1) {\n        $tabSpecialChar = array_merge($tabSpecialChar, ['</li>', '<ul>', '<ol>']);\n    }\n\n    return str_replace($tabSpecialChar, \"\\n\", $string);\n}\n\n/**\n * Erro manager for DB.\n *\n * @param array $params output from query\n *\n * @return void\n */\nfunction db_error_handler(array $params): void\n{\n    echo 'Error: ' . $params['error'] . \"<br>\\n\";\n    echo 'Query: ' . $params['query'] . \"<br>\\n\";\n    throw new Exception('Error - Query', 1);\n}\n\n/**\n * Identify user's rights\n *\n * @param string|array $groupesVisiblesUser  [description]\n * @param string|array $groupesInterditsUser [description]\n * @param string       $isAdmin              [description]\n * @param string       $idFonctions          [description]\n *\n * @return bool\n */\nfunction identifyUserRights(\n    $groupesVisiblesUser,\n    $groupesInterditsUser,\n    $isAdmin,\n    $idFonctions,\n    $SETTINGS\n) {\n    //load ClassLoader\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Build tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n\n    // Check if user is ADMINISTRATOR    \n    (int) $isAdmin === 1 ?\n        identAdmin(\n            $idFonctions,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $tree\n        )\n        :\n        identUser(\n            $groupesVisiblesUser,\n            $groupesInterditsUser,\n            $idFonctions,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $tree\n        );\n\n    // update user's timestamp\n    DB::update(\n        prefixTable('users'),\n        [\n            'timestamp' => time(),\n        ],\n        'id=%i',\n        $superGlobal->get('user_id', 'SESSION')\n    );\n\n    return true;\n}\n\n/**\n * Identify administrator.\n *\n * @param string $idFonctions Roles of user\n * @param array  $SETTINGS    Teampass settings\n * @param array  $tree        Tree of folders\n *\n * @return bool\n */\nfunction identAdmin($idFonctions, $SETTINGS, $tree)\n{\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Init\n    $groupesVisibles = [];\n    $superGlobal->put('personal_folders', [], 'SESSION');\n    $superGlobal->put('groupes_visibles', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('personal_visible_groups', [], 'SESSION');\n    $superGlobal->put('read_only_folders', [], 'SESSION');\n    $superGlobal->put('list_restricted_folders_for_items', [], 'SESSION');\n    $superGlobal->put('list_folders_editable_by_role', [], 'SESSION');\n    $superGlobal->put('list_folders_limited', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('forbiden_pfs', [], 'SESSION');\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsVisibleFolders = $superGlobal->get('groupes_visibles', 'SESSION');\n    $globalsPersonalVisibleFolders = $superGlobal->get('personal_visible_groups', 'SESSION');\n    // Get list of Folders\n    $rows = DB::query('SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i', 0);\n    foreach ($rows as $record) {\n        array_push($groupesVisibles, $record['id']);\n    }\n    $superGlobal->put('groupes_visibles', $groupesVisibles, 'SESSION');\n    $superGlobal->put('all_non_personal_folders', $groupesVisibles, 'SESSION');\n    // Exclude all PF\n    $where = new WhereClause('and');\n    // create a WHERE statement of pieces joined by ANDs\n    $where->add('personal_folder=%i', 1);\n    if (\n        isset($SETTINGS['enable_pf_feature']) === true\n        && (int) $SETTINGS['enable_pf_feature'] === 1\n    ) {\n        $where->add('title=%s', $globalsUserId);\n        $where->negateLast();\n    }\n    // Get ID of personal folder\n    $persfld = DB::queryfirstrow(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE title = %s',\n        $globalsUserId\n    );\n    if (empty($persfld['id']) === false) {\n        if (in_array($persfld['id'], $globalsVisibleFolders) === false) {\n            array_push($globalsVisibleFolders, $persfld['id']);\n            array_push($globalsPersonalVisibleFolders, $persfld['id']);\n            // get all descendants\n            $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n            $tree->rebuild();\n            $tst = $tree->getDescendants($persfld['id']);\n            foreach ($tst as $t) {\n                array_push($globalsVisibleFolders, $t->id);\n                array_push($globalsPersonalVisibleFolders, $t->id);\n            }\n        }\n    }\n\n    // get complete list of ROLES\n    $tmp = explode(';', $idFonctions);\n    $rows = DB::query(\n        'SELECT * FROM ' . prefixTable('roles_title') . '\n        ORDER BY title ASC'\n    );\n    foreach ($rows as $record) {\n        if (! empty($record['id']) && ! in_array($record['id'], $tmp)) {\n            array_push($tmp, $record['id']);\n        }\n    }\n    $superGlobal->put('fonction_id', implode(';', $tmp), 'SESSION');\n    $superGlobal->put('is_admin', 1, 'SESSION');\n    // Check if admin has created Folders and Roles\n    DB::query('SELECT * FROM ' . prefixTable('nested_tree') . '');\n    $superGlobal->put('nb_folders', DB::count(), 'SESSION');\n    DB::query('SELECT * FROM ' . prefixTable('roles_title'));\n    $superGlobal->put('nb_roles', DB::count(), 'SESSION');\n\n    return true;\n}\n\n/**\n * Permits to convert an element to array.\n *\n * @param string|array $element Any value to be returned as array\n *\n * @return array\n */\nfunction convertToArray($element): array\n{\n    if (is_string($element) === true) {\n        if (empty($element) === true) {\n            return [];\n        }\n        return explode(\n            ';',\n            trimElement($element, ';')\n        );\n    }\n    return $element;\n}\n\n/**\n * Defines the rights the user has.\n *\n * @param string|array $allowedFolders  Allowed folders\n * @param string|array $noAccessFolders Not allowed folders\n * @param string|array $userRoles       Roles of user\n * @param array        $SETTINGS        Teampass settings\n * @param object       $tree            Tree of folders\n * \n * @return bool\n */\nfunction identUser(\n    $allowedFolders,\n    $noAccessFolders,\n    $userRoles,\n    array $SETTINGS,\n    object $tree\n) {\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Init\n    $superGlobal->put('groupes_visibles', [], 'SESSION');\n    $superGlobal->put('personal_folders', [], 'SESSION');\n    $superGlobal->put('no_access_folders', [], 'SESSION');\n    $superGlobal->put('personal_visible_groups', [], 'SESSION');\n    $superGlobal->put('read_only_folders', [], 'SESSION');\n    $superGlobal->put('fonction_id', $userRoles, 'SESSION');\n    $superGlobal->put('is_admin', 0, 'SESSION');\n    // init\n    $personalFolders = [];\n    $readOnlyFolders = [];\n    $noAccessPersonalFolders = [];\n    $restrictedFoldersForItems = [];\n    $foldersLimited = [];\n    $foldersLimitedFull = [];\n    $allowedFoldersByRoles = [];\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsPersonalFolders = $superGlobal->get('personal_folder', 'SESSION');\n    // Ensure consistency in array format\n    $noAccessFolders = convertToArray($noAccessFolders);\n    $userRoles = convertToArray($userRoles);\n    $allowedFolders = convertToArray($allowedFolders);\n    \n    // Get list of folders depending on Roles\n    $arrays = identUserGetFoldersFromRoles(\n        $userRoles,\n        $allowedFoldersByRoles,\n        $readOnlyFolders,\n        $allowedFolders\n    );\n    $allowedFoldersByRoles = $arrays['allowedFoldersByRoles'];\n    $readOnlyFolders = $arrays['readOnlyFolders'];\n\n    // Does this user is allowed to see other items\n    $inc = 0;\n    $rows = DB::query(\n        'SELECT id, id_tree FROM ' . prefixTable('items') . '\n            WHERE restricted_to LIKE %ss AND inactif = %s'.\n            (count($allowedFolders) > 0 ? ' AND id_tree NOT IN ('.implode(',', $allowedFolders).')' : ''),\n        $globalsUserId . ';',\n        '0'\n    );\n    foreach ($rows as $record) {\n        // Exclude restriction on item if folder is fully accessible\n        //if (in_array($record['id_tree'], $allowedFolders) === false) {\n            $restrictedFoldersForItems[$record['id_tree']][$inc] = $record['id'];\n            ++$inc;\n        //}\n    }\n\n    // Check for the users roles if some specific rights exist on items\n    $rows = DB::query(\n        'SELECT i.id_tree, r.item_id\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('restriction_to_roles') . ' as r ON (r.item_id=i.id)\n        WHERE r.role_id IN %li AND i.id_tree <> \"\"\n        ORDER BY i.id_tree ASC',\n        $userRoles\n    );\n    $inc = 0;\n    foreach ($rows as $record) {\n        //if (isset($record['id_tree'])) {\n            $foldersLimited[$record['id_tree']][$inc] = $record['item_id'];\n            array_push($foldersLimitedFull, $record['id_tree']);\n            ++$inc;\n        //}\n    }\n\n    // Get list of Personal Folders\n    $arrays = identUserGetPFList(\n        $globalsPersonalFolders,\n        $allowedFolders,\n        $globalsUserId,\n        $personalFolders,\n        $noAccessPersonalFolders,\n        $foldersLimitedFull,\n        $allowedFoldersByRoles,\n        array_keys($restrictedFoldersForItems),\n        $readOnlyFolders,\n        $noAccessFolders,\n        isset($SETTINGS['enable_pf_feature']) === true ? $SETTINGS['enable_pf_feature'] : 0,\n        $tree\n    );\n    $allowedFolders = $arrays['allowedFolders'];\n    $personalFolders = $arrays['personalFolders'];\n    $noAccessPersonalFolders = $arrays['noAccessPersonalFolders'];\n\n    // Return data\n    $superGlobal->put('all_non_personal_folders', $allowedFolders, 'SESSION');\n    $superGlobal->put('groupes_visibles', array_unique(array_merge($allowedFolders, $personalFolders), SORT_NUMERIC), 'SESSION');\n    $superGlobal->put('read_only_folders', $readOnlyFolders, 'SESSION');\n    $superGlobal->put('no_access_folders', $noAccessFolders, 'SESSION');\n    $superGlobal->put('personal_folders', $personalFolders, 'SESSION');\n    $superGlobal->put('list_folders_limited', $foldersLimited, 'SESSION');\n    $superGlobal->put('list_folders_editable_by_role', $allowedFoldersByRoles, 'SESSION');\n    $superGlobal->put('list_restricted_folders_for_items', $restrictedFoldersForItems, 'SESSION');\n    $superGlobal->put('forbiden_pfs', $noAccessPersonalFolders, 'SESSION');\n    $superGlobal->put(\n        'all_folders_including_no_access',\n        array_unique(array_merge(\n            $allowedFolders,\n            $personalFolders,\n            $noAccessFolders,\n            $readOnlyFolders\n        ), SORT_NUMERIC),\n        'SESSION'\n    );\n    // Folders and Roles numbers\n    DB::queryfirstrow('SELECT id FROM ' . prefixTable('nested_tree') . '');\n    $superGlobal->put('nb_folders', DB::count(), 'SESSION');\n    DB::queryfirstrow('SELECT id FROM ' . prefixTable('roles_title'));\n    $superGlobal->put('nb_roles', DB::count(), 'SESSION');\n    // check if change proposals on User's items\n    if (isset($SETTINGS['enable_suggestion']) === true && (int) $SETTINGS['enable_suggestion'] === 1) {\n        $countNewItems = DB::query(\n            'SELECT COUNT(*)\n            FROM ' . prefixTable('items_change') . ' AS c\n            LEFT JOIN ' . prefixTable('log_items') . ' AS i ON (c.item_id = i.id_item)\n            WHERE i.action = %s AND i.id_user = %i',\n            'at_creation',\n            $globalsUserId\n        );\n        $superGlobal->put('nb_item_change_proposals', $countNewItems, 'SESSION');\n    } else {\n        $superGlobal->put('nb_item_change_proposals', 0, 'SESSION');\n    }\n\n    return true;\n}\n\n/**\n * Get list of folders depending on Roles\n * \n * @param array $userRoles\n * @param array $allowedFoldersByRoles\n * @param array $readOnlyFolders\n * @param array $allowedFolders\n * \n * @return array\n */\nfunction identUserGetFoldersFromRoles($userRoles, $allowedFoldersByRoles, $readOnlyFolders, $allowedFolders) : array\n{\n    $rows = DB::query(\n        'SELECT *\n        FROM ' . prefixTable('roles_values') . '\n        WHERE role_id IN %li AND type IN %ls',\n        $userRoles,\n        ['W', 'ND', 'NE', 'NDNE', 'R']\n    );\n    foreach ($rows as $record) {\n        if ($record['type'] === 'R') {\n            array_push($readOnlyFolders, $record['folder_id']);\n        } elseif (in_array($record['folder_id'], $allowedFolders) === false) {\n            array_push($allowedFoldersByRoles, $record['folder_id']);\n        }\n    }\n    $allowedFoldersByRoles = array_unique($allowedFoldersByRoles);\n    $readOnlyFolders = array_unique($readOnlyFolders);\n    // Clean arrays\n    foreach ($allowedFoldersByRoles as $value) {\n        $key = array_search($value, $readOnlyFolders);\n        if ($key !== false) {\n            unset($readOnlyFolders[$key]);\n        }\n    }\n\n    return [\n        'readOnlyFolders' => $readOnlyFolders,\n        'allowedFoldersByRoles' => $allowedFoldersByRoles\n    ];\n}\n\n/**\n * Get list of Personal Folders\n * \n * @param int $globalsPersonalFolders\n * @param array $allowedFolders\n * @param int $globalsUserId\n * @param array $personalFolders\n * @param array $noAccessPersonalFolders\n * @param array $foldersLimitedFull\n * @param array $allowedFoldersByRoles\n * @param array $restrictedFoldersForItems\n * @param array $readOnlyFolders\n * @param array $noAccessFolders\n * @param int $enablePfFeature\n * @param object $tree\n * \n * @return array\n */\nfunction identUserGetPFList(\n    $globalsPersonalFolders,\n    $allowedFolders,\n    $globalsUserId,\n    $personalFolders,\n    $noAccessPersonalFolders,\n    $foldersLimitedFull,\n    $allowedFoldersByRoles,\n    $restrictedFoldersForItems,\n    $readOnlyFolders,\n    $noAccessFolders,\n    $enablePfFeature,\n    $tree\n)\n{\n    if (\n        (int) $enablePfFeature === 1\n        && (int) $globalsPersonalFolders === 1\n    ) {\n        $persoFld = DB::queryfirstrow(\n            'SELECT id\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE title = %s AND personal_folder = %i'.\n            (count($allowedFolders) > 0 ? ' AND id NOT IN ('.implode(',', $allowedFolders).')' : ''),\n            $globalsUserId,\n            1\n        );\n        if (empty($persoFld['id']) === false) {\n            array_push($personalFolders, $persoFld['id']);\n            array_push($allowedFolders, $persoFld['id']);\n            // get all descendants\n            $ids = $tree->getDescendants($persoFld['id'], false, false, true);\n            foreach ($ids as $id) {\n                //array_push($allowedFolders, $id);\n                array_push($personalFolders, $id);\n            }\n        }\n    }\n    \n    // Exclude all other PF\n    $where = new WhereClause('and');\n    $where->add('personal_folder=%i', 1);\n    if (count($personalFolders) > 0) {\n        $where->add('id NOT IN ('.implode(',', $personalFolders).')');\n    }\n    if (\n        (int) $enablePfFeature === 1\n        && (int) $globalsPersonalFolders === 1\n    ) {\n        $where->add('title=%s', $globalsUserId);\n        $where->negateLast();\n    }\n    $persoFlds = DB::query(\n        'SELECT id\n        FROM ' . prefixTable('nested_tree') . '\n        WHERE %l',\n        $where\n    );\n    foreach ($persoFlds as $persoFldId) {\n        array_push($noAccessPersonalFolders, $persoFldId['id']);\n    }\n\n    // All folders visibles\n    $allowedFolders = array_unique(array_merge(\n        $allowedFolders,\n        $foldersLimitedFull,\n        $allowedFoldersByRoles,\n        $restrictedFoldersForItems,\n        $readOnlyFolders\n    ), SORT_NUMERIC);\n    // Exclude from allowed folders all the specific user forbidden folders\n    if (count($noAccessFolders) > 0) {\n        $allowedFolders = array_diff($allowedFolders, $noAccessFolders);\n    }\n\n    return [\n        'allowedFolders' => array_diff(array_diff($allowedFolders, $noAccessPersonalFolders), $personalFolders),\n        'personalFolders' => $personalFolders,\n        'noAccessPersonalFolders' => $noAccessPersonalFolders\n    ];\n}\n\n\n/**\n * Update the CACHE table.\n *\n * @param string $action   What to do\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction updateCacheTable(string $action, array $SETTINGS, ?int $ident = null): void\n{\n    if ($action === 'reload') {\n        // Rebuild full cache table\n        cacheTableRefresh($SETTINGS);\n    } elseif ($action === 'update_value' && is_null($ident) === false) {\n        // UPDATE an item\n        cacheTableUpdate($SETTINGS, $ident);\n    } elseif ($action === 'add_value' && is_null($ident) === false) {\n        // ADD an item\n        cacheTableAdd($SETTINGS, $ident);\n    } elseif ($action === 'delete_value' && is_null($ident) === false) {\n        // DELETE an item\n        DB::delete(prefixTable('cache'), 'id = %i', $ident);\n    }\n}\n\n/**\n * Cache table - refresh.\n *\n * @param array $SETTINGS Teampass settings\n * \n * @return void\n */\nfunction cacheTableRefresh(array $SETTINGS): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', $SETTINGS['cpassman_dir'] .'/includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // truncate table\n    DB::query('TRUNCATE TABLE ' . prefixTable('cache'));\n    // reload date\n    $rows = DB::query(\n        'SELECT *\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n        AND l.action = %s\n        AND i.inactif = %i',\n        'at_creation',\n        0\n    );\n    foreach ($rows as $record) {\n        if (empty($record['id_tree']) === false) {\n            // Get all TAGS\n            $tags = '';\n            $itemTags = DB::query(\n                'SELECT tag\n                FROM ' . prefixTable('tags') . '\n                WHERE item_id = %i AND tag != \"\"',\n                $record['id']\n            );\n            foreach ($itemTags as $itemTag) {\n                $tags .= $itemTag['tag'] . ' ';\n            }\n\n            // Get renewal period\n            $resNT = DB::queryfirstrow(\n                'SELECT renewal_period\n                FROM ' . prefixTable('nested_tree') . '\n                WHERE id = %i',\n                $record['id_tree']\n            );\n            // form id_tree to full foldername\n            $folder = [];\n            $arbo = $tree->getPath($record['id_tree'], true);\n            foreach ($arbo as $elem) {\n                // Check if title is the ID of a user\n                if (is_numeric($elem->title) === true) {\n                    // Is this a User id?\n                    $user = DB::queryfirstrow(\n                        'SELECT id, login\n                        FROM ' . prefixTable('users') . '\n                        WHERE id = %i',\n                        $elem->title\n                    );\n                    if (count($user) > 0) {\n                        $elem->title = $user['login'];\n                    }\n                }\n                // Build path\n                array_push($folder, stripslashes($elem->title));\n            }\n            // store data\n            DB::insert(\n                prefixTable('cache'),\n                [\n                    'id' => $record['id'],\n                    'label' => $record['label'],\n                    'description' => $record['description'] ?? '',\n                    'url' => isset($record['url']) && ! empty($record['url']) ? $record['url'] : '0',\n                    'tags' => $tags,\n                    'id_tree' => $record['id_tree'],\n                    'perso' => $record['perso'],\n                    'restricted_to' => isset($record['restricted_to']) && ! empty($record['restricted_to']) ? $record['restricted_to'] : '0',\n                    'login' => $record['login'] ?? '',\n                    'folder' => implode(' > ', $folder),\n                    'author' => $record['id_user'],\n                    'renewal_period' => $resNT['renewal_period'] ?? '0',\n                    'timestamp' => $record['date'],\n                ]\n            );\n        }\n    }\n}\n\n/**\n * Cache table - update existing value.\n *\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction cacheTableUpdate(array $SETTINGS, ?int $ident = null): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // get new value from db\n    $data = DB::queryfirstrow(\n        'SELECT label, description, id_tree, perso, restricted_to, login, url\n        FROM ' . prefixTable('items') . '\n        WHERE id=%i',\n        $ident\n    );\n    // Get all TAGS\n    $tags = '';\n    $itemTags = DB::query(\n        'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i AND tag != \"\"',\n        $ident\n    );\n    foreach ($itemTags as $itemTag) {\n        $tags .= $itemTag['tag'] . ' ';\n    }\n    // form id_tree to full foldername\n    $folder = [];\n    $arbo = $tree->getPath($data['id_tree'], true);\n    foreach ($arbo as $elem) {\n        // Check if title is the ID of a user\n        if (is_numeric($elem->title) === true) {\n            // Is this a User id?\n            $user = DB::queryfirstrow(\n                'SELECT id, login\n                FROM ' . prefixTable('users') . '\n                WHERE id = %i',\n                $elem->title\n            );\n            if (count($user) > 0) {\n                $elem->title = $user['login'];\n            }\n        }\n        // Build path\n        array_push($folder, stripslashes($elem->title));\n    }\n    // finaly update\n    DB::update(\n        prefixTable('cache'),\n        [\n            'label' => $data['label'],\n            'description' => $data['description'],\n            'tags' => $tags,\n            'url' => isset($data['url']) && ! empty($data['url']) ? $data['url'] : '0',\n            'id_tree' => $data['id_tree'],\n            'perso' => $data['perso'],\n            'restricted_to' => isset($data['restricted_to']) && ! empty($data['restricted_to']) ? $data['restricted_to'] : '0',\n            'login' => $data['login'] ?? '',\n            'folder' => implode(' \u00bb ', $folder),\n            'author' => $superGlobal->get('user_id', 'SESSION'),\n        ],\n        'id = %i',\n        $ident\n    );\n}\n\n/**\n * Cache table - add new value.\n *\n * @param array  $SETTINGS Teampass settings\n * @param int    $ident    Ident format\n * \n * @return void\n */\nfunction cacheTableAdd(array $SETTINGS, ?int $ident = null): void\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    // get new value from db\n    $data = DB::queryFirstRow(\n        'SELECT i.label, i.description, i.id_tree as id_tree, i.perso, i.restricted_to, i.id, i.login, i.url, l.date\n        FROM ' . prefixTable('items') . ' as i\n        INNER JOIN ' . prefixTable('log_items') . ' as l ON (l.id_item = i.id)\n        WHERE i.id = %i\n        AND l.action = %s',\n        $ident,\n        'at_creation'\n    );\n    // Get all TAGS\n    $tags = '';\n    $itemTags = DB::query(\n        'SELECT tag\n            FROM ' . prefixTable('tags') . '\n            WHERE item_id = %i AND tag != \"\"',\n        $ident\n    );\n    foreach ($itemTags as $itemTag) {\n        $tags .= $itemTag['tag'] . ' ';\n    }\n    // form id_tree to full foldername\n    $folder = [];\n    $arbo = $tree->getPath($data['id_tree'], true);\n    foreach ($arbo as $elem) {\n        // Check if title is the ID of a user\n        if (is_numeric($elem->title) === true) {\n            // Is this a User id?\n            $user = DB::queryfirstrow(\n                'SELECT id, login\n                FROM ' . prefixTable('users') . '\n                WHERE id = %i',\n                $elem->title\n            );\n            if (count($user) > 0) {\n                $elem->title = $user['login'];\n            }\n        }\n        // Build path\n        array_push($folder, stripslashes($elem->title));\n    }\n    // finaly update\n    DB::insert(\n        prefixTable('cache'),\n        [\n            'id' => $data['id'],\n            'label' => $data['label'],\n            'description' => $data['description'],\n            'tags' => isset($tags) && empty($tags) === false ? $tags : 'None',\n            'url' => isset($data['url']) && ! empty($data['url']) ? $data['url'] : '0',\n            'id_tree' => $data['id_tree'],\n            'perso' => isset($data['perso']) && empty($data['perso']) === false && $data['perso'] !== 'None' ? $data['perso'] : '0',\n            'restricted_to' => isset($data['restricted_to']) && empty($data['restricted_to']) === false ? $data['restricted_to'] : '0',\n            'login' => $data['login'] ?? '',\n            'folder' => implode(' \u00bb ', $folder),\n            'author' => $globalsUserId,\n            'timestamp' => $data['date'],\n        ]\n    );\n}\n\n/**\n * Do statistics.\n *\n * @param array $SETTINGS Teampass settings\n *\n * @return array\n */\nfunction getStatisticsData(array $SETTINGS): array\n{\n    DB::query(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n        0\n    );\n    $counter_folders = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('nested_tree') . ' WHERE personal_folder = %i',\n        1\n    );\n    $counter_folders_perso = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('items') . ' WHERE perso = %i',\n        0\n    );\n    $counter_items = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('items') . ' WHERE perso = %i',\n        1\n    );\n    $counter_items_perso = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ''\n    );\n    $counter_users = DB::count();\n        DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE admin = %i',\n        1\n    );\n    $admins = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE gestionnaire = %i',\n        1\n    );\n    $managers = DB::count();\n    DB::query(\n        'SELECT id FROM ' . prefixTable('users') . ' WHERE read_only = %i',\n        1\n    );\n    $readOnly = DB::count();\n    // list the languages\n    $usedLang = [];\n    $tp_languages = DB::query(\n        'SELECT name FROM ' . prefixTable('languages')\n    );\n    foreach ($tp_languages as $tp_language) {\n        DB::query(\n            'SELECT * FROM ' . prefixTable('users') . ' WHERE user_language = %s',\n            $tp_language['name']\n        );\n        $usedLang[$tp_language['name']] = round((DB::count() * 100 / $counter_users), 0);\n    }\n\n    // get list of ips\n    $usedIp = [];\n    $tp_ips = DB::query(\n        'SELECT user_ip FROM ' . prefixTable('users')\n    );\n    foreach ($tp_ips as $ip) {\n        if (array_key_exists($ip['user_ip'], $usedIp)) {\n            $usedIp[$ip['user_ip']] += $usedIp[$ip['user_ip']];\n        } elseif (! empty($ip['user_ip']) && $ip['user_ip'] !== 'none') {\n            $usedIp[$ip['user_ip']] = 1;\n        }\n    }\n\n    return [\n        'error' => '',\n        'stat_phpversion' => phpversion(),\n        'stat_folders' => $counter_folders,\n        'stat_folders_shared' => intval($counter_folders) - intval($counter_folders_perso),\n        'stat_items' => $counter_items,\n        'stat_items_shared' => intval($counter_items) - intval($counter_items_perso),\n        'stat_users' => $counter_users,\n        'stat_admins' => $admins,\n        'stat_managers' => $managers,\n        'stat_ro' => $readOnly,\n        'stat_kb' => $SETTINGS['enable_kb'],\n        'stat_pf' => $SETTINGS['enable_pf_feature'],\n        'stat_fav' => $SETTINGS['enable_favourites'],\n        'stat_teampassversion' => TP_VERSION,\n        'stat_ldap' => $SETTINGS['ldap_mode'],\n        'stat_agses' => $SETTINGS['agses_authentication_enabled'],\n        'stat_duo' => $SETTINGS['duo'],\n        'stat_suggestion' => $SETTINGS['enable_suggestion'],\n        'stat_api' => $SETTINGS['api'],\n        'stat_customfields' => $SETTINGS['item_extra_fields'],\n        'stat_syslog' => $SETTINGS['syslog_enable'],\n        'stat_2fa' => $SETTINGS['google_authentication'],\n        'stat_stricthttps' => $SETTINGS['enable_sts'],\n        'stat_mysqlversion' => DB::serverVersion(),\n        'stat_languages' => $usedLang,\n        'stat_country' => $usedIp,\n    ];\n}\n\n/**\n * Permits to prepare the way to send the email\n * \n * @param string $subject       email subject\n * @param string $body          email message\n * @param string $email         email\n * @param string $receiverName  Receiver name\n * @param array  $SETTINGS      settings\n *\n * @return void\n */\nfunction prepareSendingEmail(\n    $subject,\n    $body,\n    $email,\n    $receiverName,\n    $SETTINGS\n): void \n{\n    DB::insert(\n        prefixTable('processes'),\n        array(\n            'created_at' => time(),\n            'process_type' => 'send_email',\n            'arguments' => json_encode([\n                'subject' => $subject,\n                'receivers' => $email,\n                'body' => $body,\n                'receiver_name' => $receiverName,\n            ], JSON_HEX_QUOT | JSON_HEX_TAG),\n            'updated_at' => '',\n            'finished_at' => '',\n            'output' => '',\n        )\n    );\n}\n\n/**\n * Permits to send an email.\n *\n * @param string $subject     email subject\n * @param string $textMail    email message\n * @param string $email       email\n * @param array  $SETTINGS    settings\n * @param string $textMailAlt email message alt\n * @param bool   $silent      no errors\n *\n * @return string some json info\n */\nfunction sendEmail(\n    $subject,\n    $textMail,\n    $email,\n    $SETTINGS,\n    $textMailAlt = null,\n    $silent = true,\n    $cron = false\n) {\n    // CAse where email not defined\n    if ($email === 'none' || empty($email) === true) {\n        return json_encode(\n            [\n                'error' => true,\n                'message' => langHdl('forgot_my_pw_email_sent'),\n            ]\n        );\n    }\n\n    // Build and send email\n    $email = buildEmail(\n        $subject,\n        $textMail,\n        $email,\n        $SETTINGS,\n        $textMailAlt = null,\n        $silent = true,\n        $cron\n    );\n\n    if ($silent === false) {\n        return json_encode(\n            [\n                'error' => false,\n                'message' => langHdl('forgot_my_pw_email_sent'),\n            ]\n        );\n    }\n    // Debug purpose\n    if ((int) $SETTINGS['email_debug_level'] !== 0 && $cron === false) {\n        return json_encode(\n            [\n                'error' => true,\n                'message' => isset($email['ErrorInfo']) === true ? $email['ErrorInfo'] : '',\n            ]\n        );\n    }\n    return json_encode(\n        [\n            'error' => false,\n            'message' => langHdl('share_sent_ok'),\n        ]\n    );\n}\n\n\nfunction buildEmail(\n    $subject,\n    $textMail,\n    $email,\n    $SETTINGS,\n    $textMailAlt = null,\n    $silent = true,\n    $cron = false\n)\n{\n    // Load settings\n    //include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get user language\n    include_once $SETTINGS['cpassman_dir'] . '/includes/language/' . (null !== $superGlobal->get('user_language', 'SESSION', 'user') ? $superGlobal->get('user_language', 'SESSION', 'user') : 'english') . '.php';\n    // Load library\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    // load PHPMailer\n    $mail = new SplClassLoader('PHPMailer\\PHPMailer', $SETTINGS['cpassman_dir'] . '/includes/libraries');\n    $mail->register();\n    $mail = new PHPMailer\\PHPMailer\\PHPMailer(true);\n\n    // send to user\n    $mail->setLanguage('en', $SETTINGS['cpassman_dir'] . '/includes/libraries/PHPMailer/PHPMailer/language/');\n    $mail->SMTPDebug = isset($SETTINGS['email_debug_level']) === true && $cron === false && $silent === false ? $SETTINGS['email_debug_level'] : 0;\n    $mail->Port = (int) $SETTINGS['email_port'];\n    //COULD BE USED\n    $mail->CharSet = 'utf-8';\n    $mail->SMTPSecure = $SETTINGS['email_security'] !== 'none' ? $SETTINGS['email_security'] : '';\n    $mail->SMTPAutoTLS = $SETTINGS['email_security'] !== 'none' ? true : false;\n    $mail->SMTPOptions = [\n        'ssl' => [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n            'allow_self_signed' => true,\n        ],\n    ];\n    $mail->isSmtp();\n    // send via SMTP\n    $mail->Host = $SETTINGS['email_smtp_server'];\n    // SMTP servers\n    $mail->SMTPAuth = (int) $SETTINGS['email_smtp_auth'] === 1 ? true : false;\n    // turn on SMTP authentication\n    $mail->Username = $SETTINGS['email_auth_username'];\n    // SMTP username\n    $mail->Password = $SETTINGS['email_auth_pwd'];\n    // SMTP password\n    $mail->From = $SETTINGS['email_from'];\n    $mail->FromName = $SETTINGS['email_from_name'];\n    // Prepare for each person\n    foreach (array_filter(explode(',', $email)) as $dest) {\n        $mail->addAddress($dest);\n    }\n    \n    // Prepare HTML\n    $text_html = emailBody($textMail);\n    $mail->WordWrap = 80;\n    // set word wrap\n    $mail->isHtml(true);\n    // send as HTML\n    $mail->Subject = $subject;\n    $mail->Body = $text_html;\n    $mail->AltBody = is_null($textMailAlt) === false ? $textMailAlt : '';\n\n    try {\n        // send email\n        $mail->send();\n    } catch (Exception $e) {\n        if ($silent === false || (int) $SETTINGS['email_debug_level'] !== 0) {\n            return json_encode(\n                [\n                    'error' => true,\n                    'errorInfo' => str_replace([\"\\n\", \"\\t\", \"\\r\"], '', $mail->ErrorInfo),\n                ]\n            );\n        }\n        return '';\n    }\n    $mail->smtpClose();\n\n    return json_encode(\n        [\n            'error' => true,\n            'errorInfo' => str_replace([\"\\n\", \"\\t\", \"\\r\"], '', $mail->ErrorInfo),\n        ]\n    );\n}\n\n/**\n * Returns the email body.\n *\n * @param string $textMail Text for the email\n */\nfunction emailBody(string $textMail): string\n{\n    return '<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.=\n    w3.org/TR/html4/loose.dtd\"><html>\n    <head><title>Email Template</title>\n    <style type=\"text/css\">\n    body { background-color: #f0f0f0; padding: 10px 0; margin:0 0 10px =0; }\n    </style></head>\n    <body style=\"-ms-text-size-adjust: none; size-adjust: none; margin: 0; padding: 10px 0; background-color: #f0f0f0;\" bgcolor=\"#f0f0f0\" leftmargin=\"0\" topmargin=\"0\" marginwidth=\"0\" marginheight=\"0\">\n    <table border=\"0\" width=\"100%\" height=\"100%\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#f0f0f0\" style=\"border-spacing: 0;\">\n    <tr><td style=\"border-collapse: collapse;\"><br>\n        <table border=\"0\" width=\"100%\" cellpadding=\"0\" cellspacing=\"0\" bgcolor=\"#17357c\" style=\"border-spacing: 0; margin-bottom: 25px;\">\n        <tr><td style=\"border-collapse: collapse; padding: 11px 20px;\">\n            <div style=\"max-width:150px; max-height:34px; color:#f0f0f0; font-weight:bold;\">Teampass</div>\n        </td></tr></table></td>\n    </tr>\n    <tr><td align=\"center\" valign=\"top\" bgcolor=\"#f0f0f0\" style=\"border-collapse: collapse; background-color: #f0f0f0;\">\n        <table width=\"600\" cellpadding=\"0\" cellspacing=\"0\" border=\"0\" class=\"container\" bgcolor=\"#ffffff\" style=\"border-spacing: 0; border-bottom: 1px solid #e0e0e0; box-shadow: 0 0 3px #ddd; color: #434343; font-family: Helvetica, Verdana, sans-serif;\">\n        <tr><td class=\"container-padding\" bgcolor=\"#ffffff\" style=\"border-collapse: collapse; border-left: 1px solid #e0e0e0; background-color: #ffffff; padding-left: 30px; padding-right: 30px;\">\n        <br><div style=\"float:right;\">' .\n        $textMail .\n        '<br><br></td></tr></table>\n    </td></tr></table>\n    <br></body></html>';\n}\n\n/**\n * Generate a Key.\n * \n * @return string\n */\nfunction generateKey(): string\n{\n    return substr(md5(rand() . rand()), 0, 15);\n}\n\n/**\n * Convert date to timestamp.\n *\n * @param string $date        The date\n * @param string $date_format Date format\n *\n * @return int\n */\nfunction dateToStamp(string $date, string $date_format): int\n{\n    $date = date_parse_from_format($date_format, $date);\n    if ((int) $date['warning_count'] === 0 && (int) $date['error_count'] === 0) {\n        return mktime(23, 59, 59, $date['month'], $date['day'], $date['year']);\n    }\n    return 0;\n}\n\n/**\n * Is this a date.\n *\n * @param string $date Date\n *\n * @return bool\n */\nfunction isDate(string $date): bool\n{\n    return strtotime($date) !== false;\n}\n\n/**\n * Check if isUTF8().\n *\n * @param string|array $string Is the string\n *\n * @return int is the string in UTF8 format\n */\nfunction isUTF8($string): int\n{\n    if (is_array($string) === true) {\n        $string = $string['string'];\n    }\n\n    return preg_match(\n        '%^(?:\n        [\\x09\\x0A\\x0D\\x20-\\x7E] # ASCII\n        | [\\xC2-\\xDF][\\x80-\\xBF] # non-overlong 2-byte\n        | \\xE0[\\xA0-\\xBF][\\x80-\\xBF] # excluding overlongs\n        | [\\xE1-\\xEC\\xEE\\xEF][\\x80-\\xBF]{2} # straight 3-byte\n        | \\xED[\\x80-\\x9F][\\x80-\\xBF] # excluding surrogates\n        | \\xF0[\\x90-\\xBF][\\x80-\\xBF]{2} # planes 1-3\n        | [\\xF1-\\xF3][\\x80-\\xBF]{3} # planes 4-15\n        | \\xF4[\\x80-\\x8F][\\x80-\\xBF]{2} # plane 16\n        )*$%xs',\n        $string\n    );\n}\n\n/**\n * Prepare an array to UTF8 format before JSON_encode.\n *\n * @param array $array Array of values\n *\n * @return array\n */\nfunction utf8Converter(array $array): array\n{\n    array_walk_recursive(\n        $array,\n        static function (&$item): void {\n            if (mb_detect_encoding((string) $item, 'utf-8', true) === false) {\n                $item = utf8_encode($item);\n            }\n        }\n    );\n    return $array;\n}\n\n/**\n * Permits to prepare data to be exchanged.\n *\n * @param string       $teampassDir\n * @param array|string $data Text\n * @param string       $type Parameter\n * @param string       $key  Optional key\n *\n * @return string|array\n */\nfunction prepareExchangedData($teampassDir, $data, string $type, ?string $key = null)\n{\n    $teampassDir = __DIR__ . '/..';\n    // Load superglobal\n    include_once $teampassDir . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    if ($key !== null) {\n        $superGlobal->put('key', $key, 'SESSION');\n        $globalsKey = $key;\n    } else {\n        $globalsKey = $superGlobal->get('key', 'SESSION');\n    }\n\n    //load Encoding\n    include_once $teampassDir . '/includes/libraries/ForceUTF8/Encoding.php';\n    \n    //Load CRYPTOJS\n    include_once $teampassDir . '/includes/libraries/Encryption/CryptoJs/Encryption.php';\n\n    // Perform\n    if ($type === 'encode' && is_array($data) === true) {\n        // Now encode\n        return Encryption\\CryptoJs\\Encryption::encrypt(\n            json_encode(\n                $data,\n                JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_QUOT | JSON_HEX_AMP\n            ),\n            $globalsKey\n        );\n    }\n    if ($type === 'decode' && is_array($data) === false) {\n        // check if key exists\n        return json_decode(\n            (string) Encryption\\CryptoJs\\Encryption::decrypt(\n                (string) $data,\n                $globalsKey\n            ),\n            true\n        );\n    }\n}\n\n\n/**\n * Create a thumbnail.\n *\n * @param string  $src           Source\n * @param string  $dest          Destination\n * @param int $desired_width Size of width\n * \n * @return void|string|bool\n */\nfunction makeThumbnail(string $src, string $dest, int $desired_width)\n{\n    /* read the source image */\n    if (is_file($src) === true && mime_content_type($src) === 'image/png') {\n        $source_image = imagecreatefrompng($src);\n        if ($source_image === false) {\n            return \"Error: Not a valid PNG file! It's type is \".mime_content_type($src);\n        }\n    } else {\n        return \"Error: Not a valid PNG file! It's type is \".mime_content_type($src);\n    }\n\n    // Get height and width\n    $width = imagesx($source_image);\n    $height = imagesy($source_image);\n    /* find the \"desired height\" of this thumbnail, relative to the desired width  */\n    $desired_height = (int) floor($height * $desired_width / $width);\n    /* create a new, \"virtual\" image */\n    $virtual_image = imagecreatetruecolor($desired_width, $desired_height);\n    if ($virtual_image === false) {\n        return false;\n    }\n    /* copy source image at a resized size */\n    imagecopyresampled($virtual_image, $source_image, 0, 0, 0, 0, $desired_width, $desired_height, $width, $height);\n    /* create the physical thumbnail image to its destination */\n    imagejpeg($virtual_image, $dest);\n}\n\n/**\n * Check table prefix in SQL query.\n *\n * @param string $table Table name\n * \n * @return string\n */\nfunction prefixTable(string $table): string\n{\n    $safeTable = htmlspecialchars(DB_PREFIX . $table);\n    if (! empty($safeTable)) {\n        // sanitize string\n        return $safeTable;\n    }\n    // stop error no table\n    return 'table_not_exists';\n}\n\n/**\n * GenerateCryptKey\n *\n * @param int     $size      Length\n * @param bool $secure Secure\n * @param bool $numerals Numerics\n * @param bool $uppercase Uppercase letters\n * @param bool $symbols Symbols\n * @param bool $lowercase Lowercase\n * @param array   $SETTINGS  SETTINGS\n * \n * @return string\n */\nfunction GenerateCryptKey(\n    int $size = 20,\n    bool $secure = false,\n    bool $numerals = false,\n    bool $uppercase = false,\n    bool $symbols = false,\n    bool $lowercase = false,\n    array $SETTINGS = []\n): string {\n    include_once __DIR__ . '/../sources/SplClassLoader.php';\n    $generator = new SplClassLoader('PasswordGenerator\\Generator', __DIR__. '/../includes/libraries');\n    $generator->register();\n    $generator = new PasswordGenerator\\Generator\\ComputerPasswordGenerator();\n    // Is PHP7 being used?\n    if (version_compare(PHP_VERSION, '7.0.0', '>=')) {\n        $php7generator = new SplClassLoader('PasswordGenerator\\RandomGenerator', __DIR__ . '/../includes/libraries');\n        $php7generator->register();\n        $generator->setRandomGenerator(new PasswordGenerator\\RandomGenerator\\Php7RandomGenerator());\n    }\n    \n    // Manage size\n    $generator->setLength((int) $size);\n    if ($secure === true) {\n        $generator->setSymbols(true);\n        $generator->setLowercase(true);\n        $generator->setUppercase(true);\n        $generator->setNumbers(true);\n    } else {\n        $generator->setLowercase($lowercase);\n        $generator->setUppercase($uppercase);\n        $generator->setNumbers($numerals);\n        $generator->setSymbols($symbols);\n    }\n\n    return $generator->generatePasswords()[0];\n}\n\n/**\n * Send sysLOG message\n *\n * @param string    $message\n * @param string    $host\n * @param int       $port\n * @param string    $component\n * \n * @return void\n*/\nfunction send_syslog($message, $host, $port, $component = 'teampass'): void\n{\n    $sock = socket_create(AF_INET, SOCK_DGRAM, SOL_UDP);\n    $syslog_message = '<123>' . date('M d H:i:s ') . $component . ': ' . $message;\n    socket_sendto($sock, (string) $syslog_message, strlen($syslog_message), 0, (string) $host, (int) $port);\n    socket_close($sock);\n}\n\n/**\n * Permits to log events into DB\n *\n * @param array  $SETTINGS Teampass settings\n * @param string $type     Type\n * @param string $label    Label\n * @param string $who      Who\n * @param string $login    Login\n * @param string $field_1  Field\n * \n * @return void\n */\nfunction logEvents(\n    array $SETTINGS, \n    string $type, \n    string $label, \n    string $who, \n    ?string $login = null, \n    ?string $field_1 = null\n): void\n{\n    if (empty($who)) {\n        $who = getClientIpServer();\n    }\n\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    DB::insert(\n        prefixTable('log_system'),\n        [\n            'type' => $type,\n            'date' => time(),\n            'label' => $label,\n            'qui' => $who,\n            'field_1' => $field_1 === null ? '' : $field_1,\n        ]\n    );\n    // If SYSLOG\n    if (isset($SETTINGS['syslog_enable']) === true && (int) $SETTINGS['syslog_enable'] === 1) {\n        if ($type === 'user_mngt') {\n            send_syslog(\n                'action=' . str_replace('at_', '', $label) . ' attribute=user user=' . $who . ' userid=\"' . $login . '\" change=\"' . $field_1 . '\" ',\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                'teampass'\n            );\n        } else {\n            send_syslog(\n                'action=' . $type . ' attribute=' . $label . ' user=' . $who . ' userid=\"' . $login . '\" ',\n                $SETTINGS['syslog_host'],\n                $SETTINGS['syslog_port'],\n                'teampass'\n            );\n        }\n    }\n}\n\n/**\n * Log events.\n *\n * @param array  $SETTINGS        Teampass settings\n * @param int    $item_id         Item id\n * @param string $item_label      Item label\n * @param int    $id_user         User id\n * @param string $action          Code for reason\n * @param string $login           User login\n * @param string $raison          Code for reason\n * @param string $encryption_type Encryption on\n * \n * @return void\n */\nfunction logItems(\n    array $SETTINGS,\n    int $item_id,\n    string $item_label,\n    int $id_user,\n    string $action,\n    ?string $login = null,\n    ?string $raison = null,\n    ?string $encryption_type = null\n): void {\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Insert log in DB\n    DB::insert(\n        prefixTable('log_items'),\n        [\n            'id_item' => $item_id,\n            'date' => time(),\n            'id_user' => $id_user,\n            'action' => $action,\n            'raison' => $raison,\n            'raison_iv' => '',\n            'encryption_type' => is_null($encryption_type) === true ? TP_ENCRYPTION_NAME : $encryption_type,\n        ]\n    );\n    // Timestamp the last change\n    if ($action === 'at_creation' || $action === 'at_modifiation' || $action === 'at_delete' || $action === 'at_import') {\n        DB::update(\n            prefixTable('misc'),\n            [\n                'valeur' => time(),\n            ],\n            'type = %s AND intitule = %s',\n            'timestamp',\n            'last_item_change'\n        );\n    }\n\n    // SYSLOG\n    if (isset($SETTINGS['syslog_enable']) === true && $SETTINGS['syslog_enable'] === '1') {\n        // Extract reason\n        $attribute = is_null($raison) === true ? Array('') : explode(' : ', $raison);\n        // Get item info if not known\n        if (empty($item_label) === true) {\n            $dataItem = DB::queryfirstrow(\n                'SELECT id, id_tree, label\n                FROM ' . prefixTable('items') . '\n                WHERE id = %i',\n                $item_id\n            );\n            $item_label = $dataItem['label'];\n        }\n\n        send_syslog(\n            'action=' . str_replace('at_', '', $action) .\n                ' attribute=' . str_replace('at_', '', $attribute[0]) .\n                ' itemno=' . $item_id .\n                ' user=' . is_null($login) === true ? '' : addslashes((string) $login) .\n                ' itemname=\"' . addslashes($item_label) . '\"',\n            $SETTINGS['syslog_host'],\n            $SETTINGS['syslog_port'],\n            'teampass'\n        );\n    }\n\n    // send notification if enabled\n    //notifyOnChange($item_id, $action, $SETTINGS);\n}\n\n/**\n * If enabled, then notify admin/manager.\n *\n * @param int    $item_id  Item id\n * @param string $action   Action to do\n * @param array  $SETTINGS Teampass settings\n * \n * @return void\n */\n/*\nfunction notifyOnChange(int $item_id, string $action, array $SETTINGS): void\n{\n    if (\n        isset($SETTINGS['enable_email_notification_on_item_shown']) === true\n        && (int) $SETTINGS['enable_email_notification_on_item_shown'] === 1\n        && $action === 'at_shown'\n    ) {\n        // Load superglobal\n        include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n        $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n        // Get superglobals\n        $globalsLastname = $superGlobal->get('lastname', 'SESSION');\n        $globalsName = $superGlobal->get('name', 'SESSION');\n        $globalsNotifiedEmails = $superGlobal->get('listNotificationEmails', 'SESSION');\n        // Get info about item\n        $dataItem = DB::queryfirstrow(\n            'SELECT id, id_tree, label\n            FROM ' . prefixTable('items') . '\n            WHERE id = %i',\n            $item_id\n        );\n        $item_label = $dataItem['label'];\n        // send back infos\n        DB::insert(\n            prefixTable('emails'),\n            [\n                'timestamp' => time(),\n                'subject' => langHdl('email_on_open_notification_subject'),\n                'body' => str_replace(\n                    ['#tp_user#', '#tp_item#', '#tp_link#'],\n                    [\n                        addslashes($globalsName . ' ' . $globalsLastname),\n                        addslashes($item_label),\n                        $SETTINGS['cpassman_url'] . '/index.php?page=items&group=' . $dataItem['id_tree'] . '&id=' . $item_id,\n                    ],\n                    langHdl('email_on_open_notification_mail')\n                ),\n                'receivers' => $globalsNotifiedEmails,\n                'status' => '',\n            ]\n        );\n    }\n}\n*/\n\n/**\n * Prepare notification email to subscribers.\n *\n * @param int    $item_id  Item id\n * @param string $label    Item label\n * @param array  $changes  List of changes\n * @param array  $SETTINGS Teampass settings\n * \n * @return void\n */\nfunction notifyChangesToSubscribers(int $item_id, string $label, array $changes, array $SETTINGS): void\n{\n    // Load superglobal\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Get superglobals\n    $globalsUserId = $superGlobal->get('user_id', 'SESSION');\n    $globalsLastname = $superGlobal->get('lastname', 'SESSION');\n    $globalsName = $superGlobal->get('name', 'SESSION');\n    // send email to user that what to be notified\n    $notification = DB::queryOneColumn(\n        'email',\n        'SELECT *\n        FROM ' . prefixTable('notification') . ' AS n\n        INNER JOIN ' . prefixTable('users') . ' AS u ON (n.user_id = u.id)\n        WHERE n.item_id = %i AND n.user_id != %i',\n        $item_id,\n        $globalsUserId\n    );\n    if (DB::count() > 0) {\n        // Prepare path\n        $path = geItemReadablePath($item_id, '', $SETTINGS);\n        // Get list of changes\n        $htmlChanges = '<ul>';\n        foreach ($changes as $change) {\n            $htmlChanges .= '<li>' . $change . '</li>';\n        }\n        $htmlChanges .= '</ul>';\n        // send email\n        DB::insert(\n            prefixTable('emails'),\n            [\n                'timestamp' => time(),\n                'subject' => langHdl('email_subject_item_updated'),\n                'body' => str_replace(\n                    ['#item_label#', '#folder_name#', '#item_id#', '#url#', '#name#', '#lastname#', '#changes#'],\n                    [$label, $path, $item_id, $SETTINGS['cpassman_url'], $globalsName, $globalsLastname, $htmlChanges],\n                    langHdl('email_body_item_updated')\n                ),\n                'receivers' => implode(',', $notification),\n                'status' => '',\n            ]\n        );\n    }\n}\n\n/**\n * Returns the Item + path.\n *\n * @param int    $id_tree  Node id\n * @param string $label    Label\n * @param array  $SETTINGS TP settings\n * \n * @return string\n */\nfunction geItemReadablePath(int $id_tree, string $label, array $SETTINGS): string\n{\n    // Class loader\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Load Tree\n    $tree = new SplClassLoader('Tree\\NestedTree', '../includes/libraries');\n    $tree->register();\n    $tree = new Tree\\NestedTree\\NestedTree(prefixTable('nested_tree'), 'id', 'parent_id', 'title');\n    $arbo = $tree->getPath($id_tree, true);\n    $path = '';\n    foreach ($arbo as $elem) {\n        if (empty($path) === true) {\n            $path = htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES) . ' ';\n        } else {\n            $path .= '&#8594; ' . htmlspecialchars(stripslashes(htmlspecialchars_decode($elem->title, ENT_QUOTES)), ENT_QUOTES);\n        }\n    }\n\n    // Build text to show user\n    if (empty($label) === false) {\n        return empty($path) === true ? addslashes($label) : addslashes($label) . ' (' . $path . ')';\n    }\n    return empty($path) === true ? '' : $path;\n}\n\n/**\n * Get the client ip address.\n *\n * @return string IP address\n */\nfunction getClientIpServer(): string\n{\n    if (getenv('HTTP_CLIENT_IP')) {\n        $ipaddress = getenv('HTTP_CLIENT_IP');\n    } elseif (getenv('HTTP_X_FORWARDED_FOR')) {\n        $ipaddress = getenv('HTTP_X_FORWARDED_FOR');\n    } elseif (getenv('HTTP_X_FORWARDED')) {\n        $ipaddress = getenv('HTTP_X_FORWARDED');\n    } elseif (getenv('HTTP_FORWARDED_FOR')) {\n        $ipaddress = getenv('HTTP_FORWARDED_FOR');\n    } elseif (getenv('HTTP_FORWARDED')) {\n        $ipaddress = getenv('HTTP_FORWARDED');\n    } elseif (getenv('REMOTE_ADDR')) {\n        $ipaddress = getenv('REMOTE_ADDR');\n    } else {\n        $ipaddress = 'UNKNOWN';\n    }\n\n    return $ipaddress;\n}\n\n/**\n * Escape all HTML, JavaScript, and CSS.\n *\n * @param string $input    The input string\n * @param string $encoding Which character encoding are we using?\n * \n * @return string\n */\nfunction noHTML(string $input, string $encoding = 'UTF-8'): string\n{\n    return htmlspecialchars($input, ENT_QUOTES | ENT_XHTML, $encoding, false);\n}\n\n/**\n * Permits to handle the Teampass config file\n * $action accepts \"rebuild\" and \"update\"\n *\n * @param string $action   Action to perform\n * @param array  $SETTINGS Teampass settings\n * @param string $field    Field to refresh\n * @param string $value    Value to set\n *\n * @return string|bool\n */\nfunction handleConfigFile($action, $SETTINGS, $field = null, $value = null)\n{\n    $tp_config_file = $SETTINGS['cpassman_dir'] . '/includes/config/tp.config.php';\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    if (file_exists($tp_config_file) === false || $action === 'rebuild') {\n        // perform a copy\n        if (file_exists($tp_config_file)) {\n            if (! copy($tp_config_file, $tp_config_file . '.' . date('Y_m_d_His', time()))) {\n                return \"ERROR: Could not copy file '\" . $tp_config_file . \"'\";\n            }\n        }\n\n        // regenerate\n        $data = [];\n        $data[0] = \"<?php\\n\";\n        $data[1] = \"global \\$SETTINGS;\\n\";\n        $data[2] = \"\\$SETTINGS = array (\\n\";\n        $rows = DB::query(\n            'SELECT * FROM ' . prefixTable('misc') . ' WHERE type=%s',\n            'admin'\n        );\n        foreach ($rows as $record) {\n            array_push($data, \"    '\" . $record['intitule'] . \"' => '\" . htmlspecialchars_decode($record['valeur'], ENT_COMPAT) . \"',\\n\");\n        }\n        array_push($data, \");\\n\");\n        $data = array_unique($data);\n    // ---\n    } elseif ($action === 'update' && empty($field) === false) {\n        $data = file($tp_config_file);\n        $inc = 0;\n        $bFound = false;\n        foreach ($data as $line) {\n            if (stristr($line, ');')) {\n                break;\n            }\n\n            if (stristr($line, \"'\" . $field . \"' => '\")) {\n                $data[$inc] = \"    '\" . $field . \"' => '\" . htmlspecialchars_decode($value, ENT_COMPAT) . \"',\\n\";\n                $bFound = true;\n                break;\n            }\n            ++$inc;\n        }\n        if ($bFound === false) {\n            $data[$inc] = \"    '\" . $field . \"' => '\" . htmlspecialchars_decode($value, ENT_COMPAT). \"',\\n);\\n\";\n        }\n    }\n\n    // update file\n    file_put_contents($tp_config_file, implode('', $data ?? []));\n    return true;\n}\n\n/**\n * Permits to replace &#92; to permit correct display\n *\n * @param string $input Some text\n * \n * @return string\n */\nfunction handleBackslash(string $input): string\n{\n    return str_replace('&amp;#92;', '&#92;', $input);\n}\n\n/**\n * Permits to load settings\n * \n * @return void\n*/\nfunction loadSettings(): void\n{\n    global $SETTINGS;\n    /* LOAD CPASSMAN SETTINGS */\n    if (! isset($SETTINGS['loaded']) || $SETTINGS['loaded'] !== 1) {\n        $SETTINGS = [];\n        $SETTINGS['duplicate_folder'] = 0;\n        //by default, this is set to 0;\n        $SETTINGS['duplicate_item'] = 0;\n        //by default, this is set to 0;\n        $SETTINGS['number_of_used_pw'] = 5;\n        //by default, this value is set to 5;\n        $settings = [];\n        $rows = DB::query(\n            'SELECT * FROM ' . prefixTable('misc') . ' WHERE type=%s_type OR type=%s_type2',\n            [\n                'type' => 'admin',\n                'type2' => 'settings',\n            ]\n        );\n        foreach ($rows as $record) {\n            if ($record['type'] === 'admin') {\n                $SETTINGS[$record['intitule']] = $record['valeur'];\n            } else {\n                $settings[$record['intitule']] = $record['valeur'];\n            }\n        }\n        $SETTINGS['loaded'] = 1;\n        $SETTINGS['default_session_expiration_time'] = 5;\n    }\n}\n\n/**\n * check if folder has custom fields.\n * Ensure that target one also has same custom fields\n * \n * @param int $source_id\n * @param int $target_id \n * \n * @return bool\n*/\nfunction checkCFconsistency(int $source_id, int $target_id): bool\n{\n    $source_cf = [];\n    $rows = DB::QUERY(\n        'SELECT id_category\n            FROM ' . prefixTable('categories_folders') . '\n            WHERE id_folder = %i',\n        $source_id\n    );\n    foreach ($rows as $record) {\n        array_push($source_cf, $record['id_category']);\n    }\n\n    $target_cf = [];\n    $rows = DB::QUERY(\n        'SELECT id_category\n            FROM ' . prefixTable('categories_folders') . '\n            WHERE id_folder = %i',\n        $target_id\n    );\n    foreach ($rows as $record) {\n        array_push($target_cf, $record['id_category']);\n    }\n\n    $cf_diff = array_diff($source_cf, $target_cf);\n    if (count($cf_diff) > 0) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Will encrypte/decrypt a fil eusing Defuse.\n *\n * @param string $type        can be either encrypt or decrypt\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction prepareFileWithDefuse(\n    string $type,\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n    // Protect against bad inputs\n    if (is_array($source_file) === true || is_array($target_file) === true) {\n        return 'error_cannot_be_array';\n    }\n\n    // Sanitize\n    $source_file = $antiXss->xss_clean($source_file);\n    $target_file = $antiXss->xss_clean($target_file);\n    if (empty($password) === true || is_null($password) === true) {\n        // get KEY to define password\n        $ascii_key = file_get_contents(SECUREPATH.'/'.SECUREFILE);\n        $password = \\Defuse\\Crypto\\Key::loadFromAsciiSafeString($ascii_key);\n    }\n\n    $err = '';\n    if ($type === 'decrypt') {\n        // Decrypt file\n        $err = defuseFileDecrypt(\n            $source_file,\n            $target_file,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $password\n        );\n    } elseif ($type === 'encrypt') {\n        // Encrypt file\n        $err = defuseFileEncrypt(\n            $source_file,\n            $target_file,\n            $SETTINGS, /** @scrutinizer ignore-type */\n            $password\n        );\n    }\n\n    // return error\n    return $err === true ? '' : $err;\n}\n\n/**\n * Encrypt a file with Defuse.\n *\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction defuseFileEncrypt(\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/CryptoException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/BadFormatException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/IOException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Crypto.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Encoding.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'DerivedKeys.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Key.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyOrPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'File.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'RuntimeTests.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyProtectedByPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Core.php';\n    try {\n        \\Defuse\\Crypto\\File::encryptFileWithPassword(\n            $source_file,\n            $target_file,\n            $password\n        );\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'wrong_key';\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    // return error\n    return empty($err) === false ? $err : true;\n}\n\n/**\n * Decrypt a file with Defuse.\n *\n * @param string $source_file path to source file\n * @param string $target_file path to target file\n * @param array  $SETTINGS    Settings\n * @param string $password    A password\n *\n * @return string|bool\n */\nfunction defuseFileDecrypt(\n    string $source_file,\n    string $target_file,\n    array $SETTINGS,\n    string $password = null\n) {\n    // load PhpEncryption library\n    $path_to_encryption = '/includes/libraries/Encryption/Encryption/';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/CryptoException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/BadFormatException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/IOException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/EnvironmentIsBrokenException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Exception/WrongKeyOrModifiedCiphertextException.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Crypto.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Encoding.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'DerivedKeys.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Key.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyOrPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'File.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'RuntimeTests.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'KeyProtectedByPassword.php';\n    include_once $SETTINGS['cpassman_dir'] . $path_to_encryption . 'Core.php';\n    try {\n        \\Defuse\\Crypto\\File::decryptFileWithPassword(\n            $source_file,\n            $target_file,\n            $password\n        );\n    } catch (Defuse\\Crypto\\Exception\\WrongKeyOrModifiedCiphertextException $ex) {\n        $err = 'wrong_key';\n    } catch (Defuse\\Crypto\\Exception\\EnvironmentIsBrokenException $ex) {\n        $err = $ex;\n    } catch (Defuse\\Crypto\\Exception\\IOException $ex) {\n        $err = $ex;\n    }\n\n    // return error\n    return empty($err) === false ? $err : true;\n}\n\n/*\n* NOT TO BE USED\n*/\n/**\n * Undocumented function.\n *\n * @param string $text Text to debug\n */\nfunction debugTeampass(string $text): void\n{\n    $debugFile = fopen('D:/wamp64/www/TeamPass/debug.txt', 'r+');\n    if ($debugFile !== false) {\n        fputs($debugFile, $text);\n        fclose($debugFile);\n    }\n}\n\n/**\n * DELETE the file with expected command depending on server type.\n *\n * @param string $file     Path to file\n * @param array  $SETTINGS Teampass settings\n *\n * @return void\n */\nfunction fileDelete(string $file, array $SETTINGS): void\n{\n    // Load AntiXSS\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-ascii-master/src/voku/helper/ASCII.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/portable-utf8-master/src/voku/helper/UTF8.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n    $file = $antiXss->xss_clean($file);\n    if (is_file($file)) {\n        unlink($file);\n    }\n}\n\n/**\n * Permits to extract the file extension.\n *\n * @param string $file File name\n *\n * @return string\n */\nfunction getFileExtension(string $file): string\n{\n    if (strpos($file, '.') === false) {\n        return $file;\n    }\n\n    return substr($file, strrpos($file, '.') + 1);\n}\n\n/**\n * Chmods files and folders with different permissions.\n *\n * This is an all-PHP alternative to using: \\n\n * <tt>exec(\"find \".$path.\" -type f -exec chmod 644 {} \\;\");</tt> \\n\n * <tt>exec(\"find \".$path.\" -type d -exec chmod 755 {} \\;\");</tt>\n *\n * @author Jeppe Toustrup (tenzer at tenzer dot dk)\n  *\n * @param string $path      An either relative or absolute path to a file or directory which should be processed.\n * @param int    $filePerm The permissions any found files should get.\n * @param int    $dirPerm  The permissions any found folder should get.\n *\n * @return bool Returns TRUE if the path if found and FALSE if not.\n *\n * @warning The permission levels has to be entered in octal format, which\n * normally means adding a zero (\"0\") in front of the permission level. \\n\n * More info at: http://php.net/chmod.\n*/\n\nfunction recursiveChmod(\n    string $path,\n    int $filePerm = 0644,\n    int  $dirPerm = 0755\n) {\n    // Check if the path exists\n    if (! file_exists($path)) {\n        return false;\n    }\n\n    // See whether this is a file\n    if (is_file($path)) {\n        // Chmod the file with our given filepermissions\n        chmod($path, $filePerm);\n    // If this is a directory...\n    } elseif (is_dir($path)) {\n        // Then get an array of the contents\n        $foldersAndFiles = scandir($path);\n        // Remove \".\" and \"..\" from the list\n        $entries = array_slice($foldersAndFiles, 2);\n        // Parse every result...\n        foreach ($entries as $entry) {\n            // And call this function again recursively, with the same permissions\n            recursiveChmod($path.'/'.$entry, $filePerm, $dirPerm);\n        }\n\n        // When we are done with the contents of the directory, we chmod the directory itself\n        chmod($path, $dirPerm);\n    }\n\n    // Everything seemed to work out well, return true\n    return true;\n}\n\n/**\n * Check if user can access to this item.\n *\n * @param int   $item_id ID of item\n * @param array $SETTINGS\n *\n * @return bool|string\n */\nfunction accessToItemIsGranted(int $item_id, array $SETTINGS)\n{\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Prepare superGlobal variables\n    $session_groupes_visibles = $superGlobal->get('groupes_visibles', 'SESSION');\n    $session_list_restricted_folders_for_items = $superGlobal->get('list_restricted_folders_for_items', 'SESSION');\n    // Load item data\n    $data = DB::queryFirstRow(\n        'SELECT id_tree\n        FROM ' . prefixTable('items') . '\n        WHERE id = %i',\n        $item_id\n    );\n    // Check if user can access this folder\n    if (in_array($data['id_tree'], $session_groupes_visibles) === false) {\n        // Now check if this folder is restricted to user\n        if (isset($session_list_restricted_folders_for_items[$data['id_tree']]) === true\n            && in_array($item_id, $session_list_restricted_folders_for_items[$data['id_tree']]) === false\n        ) {\n            return 'ERR_FOLDER_NOT_ALLOWED';\n        }\n    }\n\n    return true;\n}\n\n/**\n * Creates a unique key.\n *\n * @param int $lenght Key lenght\n *\n * @return string\n */\nfunction uniqidReal(int $lenght = 13): string\n{\n    if (function_exists('random_bytes')) {\n        $bytes = random_bytes(intval(ceil($lenght / 2)));\n    } elseif (function_exists('openssl_random_pseudo_bytes')) {\n        $bytes = openssl_random_pseudo_bytes(intval(ceil($lenght / 2)));\n    } else {\n        throw new Exception('no cryptographically secure random function available');\n    }\n\n    return substr(bin2hex($bytes), 0, $lenght);\n}\n\n/**\n * Obfuscate an email.\n *\n * @param string $email Email address\n *\n * @return string\n */\nfunction obfuscateEmail(string $email): string\n{\n    $email = explode(\"@\", $email);\n    $name = $email[0];\n    if (strlen($name) > 3) {\n        $name = substr($name, 0, 2);\n        for ($i = 0; $i < strlen($email[0]) - 3; $i++) {\n            $name .= \"*\";\n        }\n        $name .= substr($email[0], -1, 1);\n    }\n    $host = explode(\".\", $email[1])[0];\n    if (strlen($host) > 3) {\n        $host = substr($host, 0, 1);\n        for ($i = 0; $i < strlen(explode(\".\", $email[1])[0]) - 2; $i++) {\n            $host .= \"*\";\n        }\n        $host .= substr(explode(\".\", $email[1])[0], -1, 1);\n    }\n    $email = $name . \"@\" . $host . \".\" . explode(\".\", $email[1])[1];\n    return $email;\n}\n\n/**\n * Perform a Query.\n *\n * @param array  $SETTINGS Teamapss settings\n * @param string $fields   Fields to use\n * @param string $table    Table to use\n *\n * @return array\n */\nfunction performDBQuery(array $SETTINGS, string $fields, string $table): array\n{\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Insert log in DB\n    return DB::query(\n        'SELECT ' . $fields . '\n        FROM ' . prefixTable($table)\n    );\n}\n\n/**\n * Undocumented function.\n *\n * @param int $bytes Size of file\n *\n * @return string\n */\nfunction formatSizeUnits(int $bytes): string\n{\n    if ($bytes >= 1073741824) {\n        $bytes = number_format($bytes / 1073741824, 2) . ' GB';\n    } elseif ($bytes >= 1048576) {\n        $bytes = number_format($bytes / 1048576, 2) . ' MB';\n    } elseif ($bytes >= 1024) {\n        $bytes = number_format($bytes / 1024, 2) . ' KB';\n    } elseif ($bytes > 1) {\n        $bytes .= ' bytes';\n    } elseif ($bytes === 1) {\n        $bytes .= ' byte';\n    } else {\n        $bytes = '0 bytes';\n    }\n\n    return $bytes;\n}\n\n/**\n * Generate user pair of keys.\n *\n * @param string $userPwd User password\n *\n * @return array\n */\nfunction generateUserKeys(string $userPwd): array\n{\n    // include library\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $cipher = new Crypt_AES();\n    // Create the private and public key\n    $res = $rsa->createKey(4096);\n    // Encrypt the privatekey\n    $cipher->setPassword($userPwd);\n    $privatekey = $cipher->encrypt($res['privatekey']);\n    return [\n        'private_key' => base64_encode($privatekey),\n        'public_key' => base64_encode($res['publickey']),\n        'private_key_clear' => base64_encode($res['privatekey']),\n    ];\n}\n\n/**\n * Permits to decrypt the user's privatekey.\n *\n * @param string $userPwd        User password\n * @param string $userPrivateKey User private key\n *\n * @return string\n */\nfunction decryptPrivateKey(string $userPwd, string $userPrivateKey): string\n{\n    if (empty($userPwd) === false) {\n        include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n        // Load classes\n        $cipher = new Crypt_AES();\n        // Encrypt the privatekey\n        $cipher->setPassword($userPwd);\n        try {\n            return base64_encode((string) $cipher->decrypt(base64_decode($userPrivateKey)));\n        } catch (Exception $e) {\n            return $e;\n        }\n    }\n    return '';\n}\n\n/**\n * Permits to encrypt the user's privatekey.\n *\n * @param string $userPwd        User password\n * @param string $userPrivateKey User private key\n *\n * @return string\n */\nfunction encryptPrivateKey(string $userPwd, string $userPrivateKey): string\n{\n    if (empty($userPwd) === false) {\n        include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n        // Load classes\n        $cipher = new Crypt_AES();\n        // Encrypt the privatekey\n        $cipher->setPassword($userPwd);        \n        try {\n            return base64_encode($cipher->encrypt(base64_decode($userPrivateKey)));\n        } catch (Exception $e) {\n            return $e;\n        }\n    }\n    return '';\n}\n\n/**\n * Encrypts a string using AES.\n *\n * @param string $data String to encrypt\n * @param string $key\n *\n * @return array\n */\nfunction doDataEncryption(string $data, string $key = NULL): array\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES(CRYPT_AES_MODE_CBC);\n    // Generate an object key\n    $objectKey = is_null($key) === true ? uniqidReal(32) : $key;\n    // Set it as password\n    $cipher->setPassword($objectKey);\n    return [\n        'encrypted' => base64_encode($cipher->encrypt($data)),\n        'objectKey' => base64_encode($objectKey),\n    ];\n}\n\n/**\n * Decrypts a string using AES.\n *\n * @param string $data Encrypted data\n * @param string $key  Key to uncrypt\n *\n * @return string\n */\nfunction doDataDecryption(string $data, string $key): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Set the object key\n    $cipher->setPassword(base64_decode($key));\n    return base64_encode($cipher->decrypt(base64_decode($data)));\n}\n\n/**\n * Encrypts using RSA a string using a public key.\n *\n * @param string $key       Key to be encrypted\n * @param string $publicKey User public key\n *\n * @return string\n */\nfunction encryptUserObjectKey(string $key, string $publicKey): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $rsa->loadKey(base64_decode($publicKey));\n    // Encrypt\n    return base64_encode($rsa->encrypt(base64_decode($key)));\n}\n\n/**\n * Decrypts using RSA an encrypted string using a private key.\n *\n * @param string $key        Encrypted key\n * @param string $privateKey User private key\n *\n * @return string\n */\nfunction decryptUserObjectKey(string $key, string $privateKey): string\n{\n    // Includes\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    // Load classes\n    $rsa = new Crypt_RSA();\n    $rsa->loadKey(base64_decode($privateKey));\n    // Decrypt\n    try {\n        $tmpValue = $rsa->decrypt(base64_decode($key));\n        if (is_bool($tmpValue) === false) {\n            $ret = base64_encode((string) /** @scrutinizer ignore-type */$tmpValue);\n        } else {\n            $ret = '';\n        }\n    } catch (Exception $e) {\n        return $e;\n    }\n\n    return $ret;\n}\n\n/**\n * Encrypts a file.\n *\n * @param string $fileInName File name\n * @param string $fileInPath Path to file\n *\n * @return array\n */\nfunction encryptFile(string $fileInName, string $fileInPath): array\n{\n    if (defined('FILE_BUFFER_SIZE') === false) {\n        define('FILE_BUFFER_SIZE', 128 * 1024);\n    }\n\n    // Includes\n    include_once __DIR__.'/../includes/config/include.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Generate an object key\n    $objectKey = uniqidReal(32);\n    // Set it as password\n    $cipher->setPassword($objectKey);\n    // Prevent against out of memory\n    $cipher->enableContinuousBuffer();\n    //$cipher->disablePadding();\n\n    // Encrypt the file content\n    $plaintext = file_get_contents(\n        filter_var($fileInPath . '/' . $fileInName, FILTER_SANITIZE_URL)\n    );\n    $ciphertext = $cipher->encrypt($plaintext);\n    // Save new file\n    $hash = md5($plaintext);\n    $fileOut = $fileInPath . '/' . TP_FILE_PREFIX . $hash;\n    file_put_contents($fileOut, $ciphertext);\n    unlink($fileInPath . '/' . $fileInName);\n    return [\n        'fileHash' => base64_encode($hash),\n        'objectKey' => base64_encode($objectKey),\n    ];\n}\n\n/**\n * Decrypt a file.\n *\n * @param string $fileName File name\n * @param string $filePath Path to file\n * @param string $key      Key to use\n *\n * @return string\n */\nfunction decryptFile(string $fileName, string $filePath, string $key): string\n{\n    if (! defined('FILE_BUFFER_SIZE')) {\n        define('FILE_BUFFER_SIZE', 128 * 1024);\n    }\n\n    // Includes\n    include_once __DIR__.'/../includes/config/include.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Math/BigInteger.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/RSA.php';\n    include_once __DIR__.'/../includes/libraries/Encryption/phpseclib/Crypt/AES.php';\n    // Get file name\n    $fileName = base64_decode($fileName);\n    // Load classes\n    $cipher = new Crypt_AES();\n    // Set the object key\n    $cipher->setPassword(base64_decode($key));\n    // Prevent against out of memory\n    $cipher->enableContinuousBuffer();\n    $cipher->disablePadding();\n    // Get file content\n    $ciphertext = file_get_contents($filePath . '/' . TP_FILE_PREFIX . $fileName);\n    // Decrypt file content and return\n    return base64_encode($cipher->decrypt($ciphertext));\n}\n\n/**\n * Generate a simple password\n *\n * @param int $length Length of string\n * @param bool $symbolsincluded Allow symbols\n *\n * @return string\n */\nfunction generateQuickPassword(int $length = 16, bool $symbolsincluded = true): string\n{\n    // Generate new user password\n    $small_letters = range('a', 'z');\n    $big_letters = range('A', 'Z');\n    $digits = range(0, 9);\n    $symbols = $symbolsincluded === true ?\n        ['#', '_', '-', '@', '$', '+', '&'] : [];\n    $res = array_merge($small_letters, $big_letters, $digits, $symbols);\n    $count = count($res);\n    // first variant\n\n    $random_string = '';\n    for ($i = 0; $i < $length; ++$i) {\n        $random_string .= $res[random_int(0, $count - 1)];\n    }\n\n    return $random_string;\n}\n\n/**\n * Permit to store the sharekey of an object for users.\n *\n * @param string $object_name             Type for table selection\n * @param int    $post_folder_is_personal Personal\n * @param int    $post_folder_id          Folder\n * @param int    $post_object_id          Object\n * @param string $objectKey               Object key\n * @param array  $SETTINGS                Teampass settings\n *\n * @return void\n */\nfunction storeUsersShareKey(\n    string $object_name,\n    int $post_folder_is_personal,\n    int $post_folder_id,\n    int $post_object_id,\n    string $objectKey,\n    array $SETTINGS\n): void {\n    // include librairies & connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/config/settings.php';\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Delete existing entries for this object\n    DB::delete(\n        $object_name,\n        'object_id = %i',\n        $post_object_id\n    );\n    // Superglobals\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/protect/SuperGlobal/SuperGlobal.php';\n    $superGlobal = new protect\\SuperGlobal\\SuperGlobal();\n    // Prepare superGlobal variables\n    $sessionPpersonaFolders = $superGlobal->get('personal_folders', 'SESSION');\n    $sessionUserId = $superGlobal->get('user_id', 'SESSION');\n    $sessionUserPublicKey = $superGlobal->get('public_key', 'SESSION', 'user');\n    if (\n        (int) $post_folder_is_personal === 1\n        && in_array($post_folder_id, $sessionPpersonaFolders) === true\n    ) {\n        // If this is a personal object\n        // Only create the sharekey for user\n        DB::insert(\n            $object_name,\n            [\n                'object_id' => (int) $post_object_id,\n                'user_id' => (int) $sessionUserId,\n                'share_key' => encryptUserObjectKey($objectKey, $sessionUserPublicKey),\n            ]\n        );\n    } else {\n        // This is a public object\n        // Create sharekey for each user\n        $users = DB::query(\n            'SELECT id, public_key\n            FROM ' . prefixTable('users') . '\n            WHERE id NOT IN (\"' . OTV_USER_ID . '\",\"' . SSH_USER_ID . '\",\"' . API_USER_ID . '\")\n            AND public_key != \"\"'\n        );\n        foreach ($users as $user) {\n            // Insert in DB the new object key for this item by user\n            DB::insert(\n                $object_name,\n                [\n                    'object_id' => $post_object_id,\n                    'user_id' => (int) $user['id'],\n                    'share_key' => encryptUserObjectKey(\n                        $objectKey,\n                        $user['public_key']\n                    ),\n                ]\n            );\n        }\n    }\n}\n\n/**\n * Is this string base64 encoded?\n *\n * @param string $str Encoded string?\n *\n * @return bool\n */\nfunction isBase64(string $str): bool\n{\n    $str = (string) trim($str);\n    if (! isset($str[0])) {\n        return false;\n    }\n\n    $base64String = (string) base64_decode($str, true);\n    if ($base64String && base64_encode($base64String) === $str) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Undocumented function\n *\n * @param string $field Parameter\n *\n * @return array|bool|resource|string\n */\nfunction filterString(string $field)\n{\n    // Sanitize string\n    $field = filter_var(trim($field), FILTER_SANITIZE_FULL_SPECIAL_CHARS);\n    if (empty($field) === false) {\n        // Load AntiXSS\n        include_once __DIR__.'/../includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n        $antiXss = new voku\\helper\\AntiXSS();\n        // Return\n        return $antiXss->xss_clean($field);\n    }\n\n    return false;\n}\n\n/**\n * CHeck if provided credentials are allowed on server\n *\n * @param string $login    User Login\n * @param string $password User Pwd\n * @param array  $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction ldapCheckUserPassword(string $login, string $password, array $SETTINGS): bool\n{\n    // Build ldap configuration array\n    $config = [\n        // Mandatory Configuration Options\n        'hosts' => [$SETTINGS['ldap_hosts']],\n        'base_dn' => $SETTINGS['ldap_bdn'],\n        'username' => $SETTINGS['ldap_username'],\n        'password' => $SETTINGS['ldap_password'],\n\n        // Optional Configuration Options\n        'port' => $SETTINGS['ldap_port'],\n        'use_ssl' => (int) $SETTINGS['ldap_ssl'] === 1 ? true : false,\n        'use_tls' => (int) $SETTINGS['ldap_tls'] === 1 ? true : false,\n        'version' => 3,\n        'timeout' => 5,\n        'follow_referrals' => false,\n\n        // Custom LDAP Options\n        'options' => [\n            // See: http://php.net/ldap_set_option\n            LDAP_OPT_X_TLS_REQUIRE_CERT => (isset($SETTINGS['ldap_tls_certiface_check']) ? $SETTINGS['ldap_tls_certiface_check'] : LDAP_OPT_X_TLS_HARD),\n        ],\n    ];\n    // Load expected libraries\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Traits/Macroable.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Tightenco/Collect/Support/Arr.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/DetectsErrors.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Connection.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/LdapInterface.php';\n    require_once $SETTINGS['cpassman_dir'] . '/includes/libraries/LdapRecord/Ldap.php';\n    $ad = new SplClassLoader('LdapRecord', '../includes/libraries');\n    $ad->register();\n    $connection = new Connection($config);\n    // Connect to LDAP\n    try {\n        $connection->connect();\n    } catch (\\LdapRecord\\Auth\\BindException $e) {\n        $error = $e->getDetailedError();\n        echo 'Error : '.$error->getErrorCode().' - '.$error->getErrorMessage(). '<br>'.$error->getDiagnosticMessage();\n        return false;\n    }\n\n    // Authenticate user\n    try {\n        if ($SETTINGS['ldap_type'] === 'ActiveDirectory') {\n            $connection->auth()->attempt($login, $password, $stayAuthenticated = true);\n        } else {\n            $connection->auth()->attempt($SETTINGS['ldap_user_attribute'].'='.$login.','.(isset($SETTINGS['ldap_dn_additional_user_dn']) && !empty($SETTINGS['ldap_dn_additional_user_dn']) ? $SETTINGS['ldap_dn_additional_user_dn'].',' : '').$SETTINGS['ldap_bdn'], $password, $stayAuthenticated = true);\n        }\n    } catch (\\LdapRecord\\Auth\\BindException $e) {\n        $error = $e->getDetailedError();\n        echo 'Error : '.$error->getErrorCode().' - '.$error->getErrorMessage(). '<br>'.$error->getDiagnosticMessage();\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Removes from DB all sharekeys of this user\n *\n * @param int $userId User's id\n * @param array   $SETTINGS Teampass settings\n *\n * @return bool\n */\nfunction deleteUserObjetsKeys(int $userId, array $SETTINGS = []): bool\n{\n    // include librairies & connect to DB\n    include_once __DIR__. '/../includes/config/settings.php';\n    include_once __DIR__. '/../includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n    // Remove all item sharekeys items\n    DB::delete(\n        prefixTable('sharekeys_items'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys files\n    DB::delete(\n        prefixTable('sharekeys_files'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys fields\n    DB::delete(\n        prefixTable('sharekeys_fields'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys logs\n    DB::delete(\n        prefixTable('sharekeys_logs'),\n        'user_id = %i',\n        $userId\n    );\n    // Remove all item sharekeys suggestions\n    DB::delete(\n        prefixTable('sharekeys_suggestions'),\n        'user_id = %i',\n        $userId\n    );\n    return false;\n}\n\n/**\n * Manage list of timezones   $SETTINGS Teampass settings\n *\n * @return array\n */\nfunction timezone_list()\n{\n    static $timezones = null;\n    if ($timezones === null) {\n        $timezones = [];\n        $offsets = [];\n        $now = new DateTime('now', new DateTimeZone('UTC'));\n        foreach (DateTimeZone::listIdentifiers() as $timezone) {\n            $now->setTimezone(new DateTimeZone($timezone));\n            $offsets[] = $offset = $now->getOffset();\n            $timezones[$timezone] = '(' . format_GMT_offset($offset) . ') ' . format_timezone_name($timezone);\n        }\n\n        array_multisort($offsets, $timezones);\n    }\n\n    return $timezones;\n}\n\n/**\n * Provide timezone offset\n *\n * @param int $offset Timezone offset\n *\n * @return string\n */\nfunction format_GMT_offset($offset): string\n{\n    $hours = intval($offset / 3600);\n    $minutes = abs(intval($offset % 3600 / 60));\n    return 'GMT' . ($offset ? sprintf('%+03d:%02d', $hours, $minutes) : '');\n}\n\n/**\n * Provides timezone name\n *\n * @param string $name Timezone name\n *\n * @return string\n */\nfunction format_timezone_name($name): string\n{\n    $name = str_replace('/', ', ', $name);\n    $name = str_replace('_', ' ', $name);\n\n    return str_replace('St ', 'St. ', $name);\n}\n\n/**\n * Provides info if user should use MFA based on roles\n *\n * @param string $userRolesIds  User roles ids\n * @param string $mfaRoles      Roles for which MFA is requested\n *\n * @return bool\n */\nfunction mfa_auth_requested_roles(string $userRolesIds, string $mfaRoles): bool\n{\n    if (empty($mfaRoles) === true) {\n        return true;\n    }\n\n    $mfaRoles = array_values(json_decode($mfaRoles, true));\n    $userRolesIds = array_filter(explode(';', $userRolesIds));\n    if (count($mfaRoles) === 0 || count(array_intersect($mfaRoles, $userRolesIds)) > 0) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Permits to clean a string for export purpose\n *\n * @param string $text\n * @param bool $emptyCheckOnly\n * \n * @return string\n */\nfunction cleanStringForExport(string $text, bool $emptyCheckOnly = false): string\n{\n    if (is_null($text) === true || empty($text) === true) {\n        return '';\n    }\n    // only expected to check if $text was empty\n    elseif ($emptyCheckOnly === true) {\n        return $text;\n    }\n\n    return strip_tags(\n        cleanString(\n            html_entity_decode($text, ENT_QUOTES | ENT_XHTML, 'UTF-8'),\n            true)\n        );\n}\n\n/**\n * Permits to check if user ID is valid\n *\n * @param integer $post_user_id\n * @return bool\n */\nfunction isUserIdValid($userId): bool\n{\n    if (is_null($userId) === false\n        && isset($userId) === true\n        && empty($userId) === false\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value equal the one expected\n *\n * @param string $key\n * @param integer|string $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndEqual(\n    string $key,\n    /*PHP8 - integer|string*/$value,\n    array $array\n): bool\n{\n    if (isset($array[$key]) === true\n        && (is_int($value) === true ?\n            (int) $array[$key] === $value :\n            (string) $array[$key] === $value)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a variable is not set or equal to a value\n *\n * @param string|null $var\n * @param integer|string $value\n * \n * @return boolean\n */\nfunction isKeyNotSetOrEqual(\n    /*PHP8 - string|null*/$var,\n    /*PHP8 - integer|string*/$value\n): bool\n{\n    if (isset($var) === false\n        || (is_int($value) === true ?\n            (int) $var === $value :\n            (string) $var === $value)\n    ) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value < to the one expected\n *\n * @param string $key\n * @param integer $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndInferior(string $key, int $value, array $array): bool\n{\n    if (isset($array[$key]) === true && (int) $array[$key] < $value) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if a key exists and if its value > to the one expected\n *\n * @param string $key\n * @param integer $value\n * @param array $array\n * \n * @return boolean\n */\nfunction isKeyExistingAndSuperior(string $key, int $value, array $array): bool\n{\n    if (isset($array[$key]) === true && (int) $array[$key] > $value) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Check if values in array are set\n * Return true if all set\n * Return false if one of them is not set\n *\n * @param array $arrayOfValues\n * @return boolean\n */\nfunction isSetArrayOfValues(array $arrayOfValues): bool\n{\n    foreach($arrayOfValues as $value) {\n        if (isset($value) === false) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Check if values in array are set\n * Return true if all set\n * Return false if one of them is not set\n *\n * @param array $arrayOfValues\n * @param integer|string $value\n * @return boolean\n */\nfunction isArrayOfVarsEqualToValue(\n    array $arrayOfVars,\n    /*PHP8 - integer|string*/$value\n) : bool\n{\n    foreach($arrayOfVars as $variable) {\n        if ($variable !== $value) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n * Checks if at least one variable in array is equal to value\n *\n * @param array $arrayOfValues\n * @param integer|string $value\n * @return boolean\n */\nfunction isOneVarOfArrayEqualToValue(\n    array $arrayOfVars,\n    /*PHP8 - integer|string*/$value\n) : bool\n{\n    foreach($arrayOfVars as $variable) {\n        if ($variable === $value) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/**\n * Checks is value is null, not set OR empty\n *\n * @param string|int|null $value\n * @return boolean\n */\nfunction isValueSetNullEmpty(/*PHP8 - string|int|null*/ $value) : bool\n{\n    if (is_null($value) === true || isset($value) === false || empty($value) === true) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Checks if value is set and if empty is equal to passed boolean\n *\n * @param string|int $value\n * @param boolean $boolean\n * @return boolean\n */\nfunction isValueSetEmpty($value, $boolean = true) : bool\n{\n    if (isset($value) === true && empty($value) === $boolean) {\n        return true;\n    }\n    return false;\n}\n\n/**\n * Ensure Complexity is translated\n *\n * @return void\n */\nfunction defineComplexity() : void\n{\n    if (defined('TP_PW_COMPLEXITY') === false) {\n        define(\n            'TP_PW_COMPLEXITY',\n            [\n                TP_PW_STRENGTH_1 => array(TP_PW_STRENGTH_1, langHdl('complex_level1'), 'fas fa-thermometer-empty text-danger'),\n                TP_PW_STRENGTH_2 => array(TP_PW_STRENGTH_2, langHdl('complex_level2'), 'fas fa-thermometer-quarter text-warning'),\n                TP_PW_STRENGTH_3 => array(TP_PW_STRENGTH_3, langHdl('complex_level3'), 'fas fa-thermometer-half text-warning'),\n                TP_PW_STRENGTH_4 => array(TP_PW_STRENGTH_4, langHdl('complex_level4'), 'fas fa-thermometer-three-quarters text-success'),\n                TP_PW_STRENGTH_5 => array(TP_PW_STRENGTH_5, langHdl('complex_level5'), 'fas fa-thermometer-full text-success'),\n            ]\n        );\n    }\n}\n\n/**\n * Uses Sanitizer to perform data sanitization\n *\n * @param array     $data\n * @param array     $filters\n * @param string    $path\n * @return array\n */\nfunction dataSanitizer(\n    array $data,\n    array $filters,\n    string $path = __DIR__. '/..' // Path to Teampass root\n): array\n{\n    // Load Sanitizer library\n    require_once $path . '/includes/libraries/Illuminate/Support/Traits/Macroable.php';\n    require_once $path . '/includes/libraries/Illuminate/Support/Str.php';\n    require_once $path . '/includes/libraries/Illuminate/Validation/ValidationRuleParser.php';\n    require_once $path . '/includes/libraries/Illuminate/Support/Arr.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Contracts/Filter.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/Trim.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/Cast.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/EscapeHTML.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Filters/EmptyStringToNull.php';\n    require_once $path . '/includes/libraries/Elegant/sanitizer/Sanitizer.php';\n    $sanitizer = new Elegant\\sanitizer\\Sanitizer($data, $filters);\n\n    // Load AntiXSS\n    include_once $path. '/includes/libraries/anti-xss-master/src/voku/helper/ASCII.php';\n    include_once $path . '/includes/libraries/anti-xss-master/src/voku/helper/UTF8.php';\n    include_once $path . '/includes/libraries/anti-xss-master/src/voku/helper/AntiXSS.php';\n    $antiXss = new voku\\helper\\AntiXSS();\n\n    // Sanitize post and get variables\n    return $antiXss->xss_clean($sanitizer->sanitize());\n}\n\n/**\n * Permits to manage the cache tree for a user\n *\n * @param integer $user_id\n * @param string $data\n * @param array $SETTINGS\n * @param string $field_update\n * @return void\n */\nfunction cacheTreeUserHandler(int $user_id, string $data, array $SETTINGS, string $field_update = '')\n{\n    include_once $SETTINGS['cpassman_dir'] . '/sources/SplClassLoader.php';\n    //Connect to DB\n    include_once $SETTINGS['cpassman_dir'] . '/includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, $SETTINGS));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n\n    // Exists ?\n    $userCacheId = DB::queryfirstrow(\n        'SELECT increment_id\n        FROM ' . prefixTable('cache_tree') . '\n        WHERE user_id = %i',\n        $user_id\n    );\n    \n    if (is_null($userCacheId) === true || count($userCacheId) === 0) {\n        DB::insert(\n            prefixTable('cache_tree'),\n            array(\n                'data' => $data,\n                'timestamp' => time(),\n                'user_id' => $user_id,\n                'visible_folders' => '',\n            )\n        );\n    } else {\n        if (empty($field_update) === true) {\n            DB::update(\n                prefixTable('cache_tree'),\n                [\n                    'timestamp' => time(),\n                    'data' => $data,\n                ],\n                'increment_id = %i',\n                $userCacheId['increment_id']\n            );\n        } else {\n            DB::update(\n                prefixTable('cache_tree'),\n                [\n                    $field_update => $data,\n                ],\n                'increment_id = %i',\n                $userCacheId['increment_id']\n            );\n        }\n    }\n}\n\n/**\n * Permits to calculate a %\n *\n * @param float $nombre\n * @param float $total\n * @param float $pourcentage\n * @return float\n */\nfunction pourcentage(float $nombre, float $total, float $pourcentage): float\n{ \n    $resultat = ($nombre/$total) * $pourcentage;\n    return round($resultat);\n}\n\n/**\n * Load the folders list from the cache\n *\n * @param string $fieldName\n * @param string $sessionName\n * @param boolean $forceRefresh\n * @return array\n */\nfunction loadFoldersListByCache(\n    string $fieldName,\n    string $sessionName,\n    bool $forceRefresh = false\n): array\n{\n    // Case when refresh is EXPECTED / MANDATORY\n    if ($forceRefresh === true) {\n        return [\n            'state' => false,\n            'data' => [],\n        ];\n    }\n\n    // Get last folder update\n    $lastFolderChange = DB::queryfirstrow(\n        'SELECT valeur FROM ' . prefixTable('misc') . '\n        WHERE type = %s AND intitule = %s',\n        'timestamp',\n        'last_folder_change'\n    );\n    if (DB::count() === 0) {\n        $lastFolderChange['valeur'] = 0;\n    }\n\n    // Case when an update in the tree has been done\n    // Refresh is then mandatory\n    if ((int) $lastFolderChange['valeur'] > (int) (isset($_SESSION['user_tree_last_refresh_timestamp']) === true ? $_SESSION['user_tree_last_refresh_timestamp'] : 0)) {\n        return [\n            'state' => false,\n            'data' => [],\n        ];\n    }\n\n    // Does this user has the tree structure in session?\n    // If yes then use it\n    if (count(isset($_SESSION['teampassUser'][$sessionName]) === true ? $_SESSION['teampassUser'][$sessionName] : []) > 0) {\n        return [\n            'state' => true,\n            'data' => json_encode($_SESSION['teampassUser'][$sessionName]),\n        ];\n    }\n\n    // Does this user has a tree cache\n    $userCacheTree = DB::queryfirstrow(\n        'SELECT '.$fieldName.'\n        FROM ' . prefixTable('cache_tree') . '\n        WHERE user_id = %i',\n        $_SESSION['user_id']\n    );\n    if (empty($userCacheTree[$fieldName]) === false && $userCacheTree[$fieldName] !== '[]') {\n        return [\n            'state' => true,\n            'data' => $userCacheTree[$fieldName],\n        ];\n    }\n\n    return [\n        'state' => false,\n        'data' => [],\n    ];\n}\n\n\n/**\n * Permits to refresh the categories of folders\n *\n * @param array $folderIds\n * @return void\n */\nfunction handleFoldersCategories(\n    array $folderIds\n)\n{\n    //load ClassLoader\n    include_once __DIR__. '/../sources/SplClassLoader.php';\n    \n    //Connect to DB\n    include_once __DIR__. '/../includes/libraries/Database/Meekrodb/db.class.php';\n    if (defined('DB_PASSWD_CLEAR') === false) {\n        define('DB_PASSWD_CLEAR', defuseReturnDecrypted(DB_PASSWD, []));\n    }\n    DB::$host = DB_HOST;\n    DB::$user = DB_USER;\n    DB::$password = DB_PASSWD_CLEAR;\n    DB::$dbName = DB_NAME;\n    DB::$port = DB_PORT;\n    DB::$encoding = DB_ENCODING;\n    DB::$ssl = DB_SSL;\n    DB::$connect_options = DB_CONNECT_OPTIONS;\n\n    $arr_data = array();\n\n    // force full list of folders\n    if (count($folderIds) === 0) {\n        $folderIds = DB::queryFirstColumn(\n            'SELECT id\n            FROM ' . prefixTable('nested_tree') . '\n            WHERE personal_folder=%i',\n            0\n        );\n    }\n\n    // Get complexity\n    defineComplexity();\n\n    // update\n    foreach ($folderIds as $folder) {\n        // Do we have Categories\n        // get list of associated Categories\n        $arrCatList = array();\n        $rows_tmp = DB::query(\n            'SELECT c.id, c.title, c.level, c.type, c.masked, c.order, c.encrypted_data, c.role_visibility, c.is_mandatory,\n            f.id_category AS category_id\n            FROM ' . prefixTable('categories_folders') . ' AS f\n            INNER JOIN ' . prefixTable('categories') . ' AS c ON (f.id_category = c.parent_id)\n            WHERE id_folder=%i',\n            $folder\n        );\n        if (DB::count() > 0) {\n            foreach ($rows_tmp as $row) {\n                $arrCatList[$row['id']] = array(\n                    'id' => $row['id'],\n                    'title' => $row['title'],\n                    'level' => $row['level'],\n                    'type' => $row['type'],\n                    'masked' => $row['masked'],\n                    'order' => $row['order'],\n                    'encrypted_data' => $row['encrypted_data'],\n                    'role_visibility' => $row['role_visibility'],\n                    'is_mandatory' => $row['is_mandatory'],\n                    'category_id' => $row['category_id'],\n                );\n            }\n        }\n        $arr_data['categories'] = $arrCatList;\n\n        // Now get complexity\n        $valTemp = '';\n        $data = DB::queryFirstRow(\n            'SELECT valeur\n            FROM ' . prefixTable('misc') . '\n            WHERE type = %s AND intitule=%i',\n            'complex',\n            $folder\n        );\n        if (DB::count() > 0 && empty($data['valeur']) === false) {\n            $valTemp = array(\n                'value' => $data['valeur'],\n                'text' => TP_PW_COMPLEXITY[$data['valeur']][1],\n            );\n        }\n        $arr_data['complexity'] = $valTemp;\n\n        // Now get Roles\n        $valTemp = '';\n        $rows_tmp = DB::query(\n            'SELECT t.title\n            FROM ' . prefixTable('roles_values') . ' as v\n            INNER JOIN ' . prefixTable('roles_title') . ' as t ON (v.role_id = t.id)\n            WHERE v.folder_id = %i\n            GROUP BY title',\n            $folder\n        );\n        foreach ($rows_tmp as $record) {\n            $valTemp .= (empty($valTemp) === true ? '' : ' - ') . $record['title'];\n        }\n        $arr_data['visibilityRoles'] = $valTemp;\n\n        // now save in DB\n        DB::update(\n            prefixTable('nested_tree'),\n            array(\n                'categories' => json_encode($arr_data),\n            ),\n            'id = %i',\n            $folder\n        );\n    }\n}\n\n/**\n * List all users that have specific roles\n *\n * @param array $roles\n * @return array\n */\nfunction getUsersWithRoles(\n    array $roles\n): array\n{\n    $arrUsers = array();\n\n    foreach ($roles as $role) {\n        // loop on users and check if user has this role\n        $rows = DB::query(\n            'SELECT id, fonction_id\n            FROM ' . prefixTable('users') . '\n            WHERE id != %i AND admin = 0 AND fonction_id IS NOT NULL AND fonction_id != \"\"',\n            $_SESSION['user_id']\n        );\n        foreach ($rows as $user) {\n            $userRoles = explode(';', is_null($user['fonction_id']) === false && empty($user['fonction_id']) === false ? $user['fonction_id'] : []);\n            if (in_array($role, $userRoles, true) === true) {\n                array_push($arrUsers, $user['id']);\n            }\n        }\n    }\n\n    return $arrUsers;\n}\n\n// #3476 - check if function str_contains exists (using PHP 8.0.0 or h)\n// else define it\nif (!function_exists('str_contains')) {\n    function str_contains($haystack, $needle) {\n        return $needle !== '' && mb_strpos($haystack, $needle) !== false;\n    }\n}\n\n/**\n * Get all users informations\n *\n * @param integer $userId\n * @return array\n */\nfunction getFullUserInfos(\n    int $userId\n): array\n{\n    if (empty($userId) === true) {\n        return array();\n    }\n\n    $val = DB::queryfirstrow(\n        'SELECT *\n        FROM ' . prefixTable('users') . '\n        WHERE id = %i',\n        $userId\n    );\n\n    return $val;\n}\n\n/**\n * Is required an upgrade\n *\n * @return boolean\n */\nfunction upgradeRequired(): bool\n{\n    // Get settings.php\n    include_once __DIR__. '/../includes/config/settings.php';\n\n    // Get timestamp in DB\n    $val = DB::queryfirstrow(\n        'SELECT valeur\n        FROM ' . prefixTable('misc') . '\n        WHERE type = %s AND intitule = %s',\n        'admin',\n        'upgrade_timestamp'\n    );\n    \n    // if not exists then error\n    if (is_null($val) === true || count($val) === 0 || defined('UPGRADE_MIN_DATE') === false) return true;\n\n    // if empty or too old then error\n    if (empty($val['valeur']) === true || (int) $val['valeur'] < (int) UPGRADE_MIN_DATE) {\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * Permits to change the user keys on his demand\n *\n * @param integer $userId\n * @param string $passwordClear\n * @param integer $nbItemsToTreat\n * @param string $encryptionKey\n * @param boolean $deleteExistingKeys\n * @param boolean $sendEmailToUser\n * @param boolean $encryptWithUserPassword\n * @param boolean $generate_user_new_password\n * @param string $emailBody\n * @return string\n */\nfunction handleUserKeys(\n    int $userId,\n    string $passwordClear,\n    int $nbItemsToTreat,\n    string $encryptionKey = '',\n    bool $deleteExistingKeys = false,\n    bool $sendEmailToUser = true,\n    bool $encryptWithUserPassword = false,\n    bool $generate_user_new_password = false,\n    string $emailBody = ''\n): string\n{\n\n    // prepapre background tasks for item keys generation        \n    $userTP = DB::queryFirstRow(\n        'SELECT pw, public_key, private_key\n        FROM ' . prefixTable('users') . '\n        WHERE id = %i',\n        TP_USER_ID\n    );\n    if (DB::count() > 0) {\n        // Do we need to generate new user password\n        if ($generate_user_new_password === true) {\n            // Generate a new password\n            $passwordClear = GenerateCryptKey(20, false, true, true, false, true);\n\n            // Hash the new password\n            $pwdlib = new SplClassLoader('PasswordLib', '../includes/libraries');\n            $pwdlib->register();\n            $pwdlib = new PasswordLib\\PasswordLib();\n            $hashedPassword = $pwdlib->createPasswordHash($passwordClear);\n            if ($pwdlib->verifyPasswordHash($passwordClear, $hashedPassword) === false) {\n                return prepareExchangedData(\n                    __DIR__.'/..',\n                    array(\n                        'error' => true,\n                        'message' => langHdl('pw_hash_not_correct'),\n                    ),\n                    'encode'\n                );\n            }\n\n            // Generate new keys\n            $userKeys = generateUserKeys($passwordClear);\n\n            // Save in DB\n            DB::update(\n                prefixTable('users'),\n                array(\n                    'pw' => $hashedPassword,\n                    'public_key' => $userKeys['public_key'],\n                    'private_key' => $userKeys['private_key'],\n                ),\n                'id=%i',\n                $userId\n            );\n        }\n\n        // Manage empty encryption key\n        // Let's take the user's password if asked and if no encryption key provided\n        $encryptionKey = $encryptWithUserPassword === true && empty($encryptionKey) === true ? $passwordClear : $encryptionKey;\n\n        // Create process\n        DB::insert(\n            prefixTable('processes'),\n            array(\n                'created_at' => time(),\n                'process_type' => 'create_user_keys',\n                'arguments' => json_encode([\n                    'new_user_id' => (int) $userId,\n                    'new_user_pwd' => cryption($passwordClear, '','encrypt')['string'],\n                    'new_user_code' => cryption(empty($encryptionKey) === true ? uniqidReal(20) : $encryptionKey, '','encrypt')['string'],\n                    'owner_id' => (int) TP_USER_ID,\n                    'creator_pwd' => $userTP['pw'],\n                    'send_email' => $sendEmailToUser === true ? 1 : 0,\n                    'otp_provided_new_value' => 1,\n                    'email_body' => empty($emailBody) === true ? '' : langHdl($emailBody),\n                ]),\n                'updated_at' => '',\n                'finished_at' => '',\n                'output' => '',\n            )\n        );\n        $processId = DB::insertId();\n\n        // Delete existing keys\n        if ($deleteExistingKeys === true) {\n            deleteUserObjetsKeys(\n                (int) $userId,\n            );\n        }\n\n        // Create tasks\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step0',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step1',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step2',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step3',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step4',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step5',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        DB::insert(\n            prefixTable('processes_tasks'),\n            array(\n                'process_id' => $processId,\n                'created_at' => time(),\n                'task' => json_encode([\n                    'step' => 'step6',\n                    'index' => 0,\n                    'nb' => $nbItemsToTreat,\n                ]),\n            )\n        );\n\n        // update user's new status\n        DB::update(\n            prefixTable('users'),\n            [\n                'is_ready_for_usage' => 0,\n                'otp_provided' => 1,\n                'ongoing_process_id' => $processId,\n                'special' => 'generate-keys',\n            ],\n            'id=%i',\n            $userId\n        );\n    }\n\n    return prepareExchangedData(\n        __DIR__.'/..',\n        array(\n            'error' => false,\n            'message' => '',\n        ),\n        'encode'\n    );\n}\n\n/**\n * Permeits to check the consistency of date versus columns definition\n *\n * @param string $table\n * @param array $dataFields\n * @return array\n */\nfunction validateDataFields(\n    string $table,\n    array $dataFields\n): array\n{\n    // Get table structure\n    $result = DB::query(\n        \"SELECT `COLUMN_NAME`, `CHARACTER_MAXIMUM_LENGTH` FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = '%l' AND TABLE_NAME = '%l';\",\n        DB_NAME,\n        $table\n    );\n\n    foreach ($result as $row) {\n        $field = $row['COLUMN_NAME'];\n        $maxLength = is_null($row['CHARACTER_MAXIMUM_LENGTH']) === false ? (int) $row['CHARACTER_MAXIMUM_LENGTH'] : '';\n\n        if (isset($dataFields[$field]) === true && is_array($dataFields[$field]) === false && empty($maxLength) === false) {\n            if (strlen((string) $dataFields[$field]) > $maxLength) {\n                return [\n                    'state' => false,\n                    'field' => $field,\n                    'maxLength' => $maxLength,\n                    'currentLength' => strlen((string) $dataFields[$field]),\n                ];\n            }\n        }\n    }\n    \n    return [\n        'state' => true,\n        'message' => '',\n    ];\n}\n\n/**\n * Adapt special characters sanitized during filter_var with option FILTER_SANITIZE_SPECIAL_CHARS operation\n *\n * @param string $string\n * @return string\n */\nfunction filterVarBack(string $string): string\n{\n    $arr = [\n        '&#060;' => '<',\n        '&#062;' => '>',\n        '&#034;' => '\"',\n        '&#039;' => \"'\",\n        '&#038;' => '&',\n    ];\n\n    foreach ($arr as $key => $value) {\n        $string = str_replace($key, $value, $string);\n    }\n\n    return $string;\n}\n"], "filenames": ["includes/js/functions.js", "pages/profile.js.php", "sources/main.functions.php"], "buggy_code_start_loc": [406, 166, 3541], "buggy_code_end_loc": [412, 177, 3546], "fixing_code_start_loc": [406, 167, 3542], "fixing_code_end_loc": [427, 197, 3552], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.9.", "other": {"cve": {"id": "CVE-2023-3086", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-03T12:15:09.317", "lastModified": "2023-06-09T13:59:50.113", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository nilsteampassnet/teampass prior to 3.0.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:teampass:teampass:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.9", "matchCriteriaId": "1FBD6586-DC7F-4FD6-BB8D-9874CCFACB2E"}]}]}], "references": [{"url": "https://github.com/nilsteampassnet/teampass/commit/1c0825b67eb8f8b5ecc418ff7614423a275e6a79", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/17be9e8a-abe8-41db-987f-1d5b0686ae20", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/nilsteampassnet/teampass/commit/1c0825b67eb8f8b5ecc418ff7614423a275e6a79"}}