{"buggy_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI Inventory Plugin\n * Copyright (C) 2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on FusionInventory for GLPI\n * Copyright (C) 2010-2021 by the FusionInventory Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI Inventory Plugin.\n *\n * GLPI Inventory Plugin is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * GLPI Inventory Plugin is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with GLPI Inventory Plugin. If not, see <https://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n    die(\"Sorry. You can't access directly to this file\");\n}\n\n/**\n * Manage the deploy packages.\n */\nclass PluginGlpiinventoryDeployPackage extends CommonDBTM\n{\n   /**\n    * Initialize the tasks running with this package (updated with overrided getFromDB method)\n    *\n    * @var array\n    */\n    public $running_tasks = [];\n\n   /**\n    * The right name for this class\n    *\n    * @var string\n    */\n    public static $rightname = 'plugin_glpiinventory_package';\n\n   /**\n    * Initialize the users visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $users = [];\n\n   /**\n    * Initialize the groups visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $groups = [];\n\n   /**\n    * Initialize the profiles visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $profiles = [];\n\n   /**\n    * Initialize the entities visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $entities = [];\n\n\n   /**\n    * Get name of this type by language of the user connected\n    *\n    * @param integer $nb number of elements\n    * @return string name of this type\n    */\n    public static function getTypeName($nb = 0)\n    {\n        return __('Package', 'glpiinventory');\n    }\n\n\n    public function getFromDB($ID)\n    {\n        $found = parent::getFromDB($ID);\n\n        if ($found) {\n           // Get all tasks runnning\n            $this->running_tasks =\n               PluginGlpiinventoryTask::getItemsFromDB(\n                   [\n                      'is_active'   => true,\n                      'is_running'  => true,\n                      'targets'     => [__CLASS__ => $this->fields['id']],\n                      'by_entities' => false,\n                   ]\n               );\n        }\n\n        return $found;\n    }\n\n\n   /**\n    * Have I the right to \"update\" the object content (package actions)\n    *\n    * Also call canUpdateItem()\n    *\n    * @return booleen\n   **/\n    public function canUpdateContent()\n    {\n       // check if a task is currenlty runnning with this package\n        if (count($this->running_tasks)) {\n            return false;\n        }\n\n        return parent::canUpdateItem();\n    }\n\n\n   /**\n    * Get the massive actions for this object\n    *\n    * @param object|null $checkitem\n    * @return array list of actions\n    */\n    public function getSpecificMassiveActions($checkitem = null)\n    {\n\n        $actions = [];\n        if (strstr($_SERVER[\"HTTP_REFERER\"], 'deploypackage.import.php')) {\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import'] = __('Import', 'glpiinventory');\n        } else {\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'transfert'] = __('Transfer');\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'export'] = __('Export', 'glpiinventory');\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'duplicate'] = _sx('button', 'Duplicate');\n        }\n\n        return $actions;\n    }\n\n\n   /**\n    * Define standard massiveaction actions to deny\n    *\n    * @return array list of actions to deny\n    */\n    public function getForbiddenStandardMassiveAction()\n    {\n        $forbidden = parent::getForbiddenStandardMassiveAction();\n        if (strstr($_SERVER[\"HTTP_REFERER\"], 'deploypackage.import.php')) {\n            $forbidden[] = 'update';\n            $forbidden[] = 'add';\n            $forbidden[] = 'delete';\n            $forbidden[] = 'purge';\n        }\n        return $forbidden;\n    }\n\n\n   /**\n    * Display form related to the massive action selected\n    *\n    * @param object $ma MassiveAction instance\n    * @return boolean\n    */\n    public static function showMassiveActionsSubForm(MassiveAction $ma)\n    {\n        switch ($ma->getAction()) {\n            case 'transfert':\n                Dropdown::show('Entity');\n                echo \"<br><br>\" . Html::submit(\n                    __('Post'),\n                    ['name' => 'massiveaction']\n                );\n                return true;\n\n            case 'duplicate':\n                echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']);\n                return true;\n        }\n        return parent::showMassiveActionsSubForm($ma);\n    }\n\n\n   /**\n    * Execution code for massive action\n    *\n    * @param object $ma MassiveAction instance\n    * @param object $item item on which execute the code\n    * @param array $ids list of ID on which execute the code\n    */\n    public static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids)\n    {\n\n        switch ($ma->getAction()) {\n            case 'export':\n                foreach ($ids as $key) {\n                    if ($item->can($key, UPDATE)) {\n                        $item->exportPackage($key);\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                    }\n                }\n                break;\n\n            case 'transfert':\n                $pfDeployPackage = new PluginGlpiinventoryDeployPackage();\n                foreach ($ids as $key) {\n                    if ($pfDeployPackage->getFromDB($key)) {\n                        $input                = [];\n                        $input['id']          = $key;\n                        $input['entities_id'] = $ma->POST['entities_id'];\n                        $pfDeployPackage->update($input);\n                    }\n                }\n                break;\n\n            case 'import':\n                foreach ($ids as $key) {\n                    $item->importPackage($key);\n                    $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                }\n                break;\n\n            case 'duplicate':\n                $pfPackage = new self();\n                foreach ($ids as $key) {\n                    if ($pfPackage->getFromDB($key)) {\n                        if ($pfPackage->duplicate($pfPackage->getID())) {\n                          //set action massive ok for this item\n                            $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                        } else {\n                         // KO\n                            $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n\n   /**\n    * Define error message if package used in task. This will prevent edit the\n    * package\n    *\n    * @return string\n    */\n    public function getEditErrorMessage()\n    {\n        $error_message = \"\";\n        if (count($this->running_tasks) > 0) {\n           // Display error message\n            $error_message .= \"<div class='warning'>\";\n            $error_message .= \"<i class='fa fa-exclamation-triangle fa-3x'></i>\";\n            $error_message .= \"<h3>\" . __(\"Modification Denied\", 'glpiinventory') . \"</h3>\\n\";\n            $error_message .= \"<h4>\" .\n                              _n(\n                                  \"The following task is running with this package\",\n                                  \"The following tasks are running with this package\",\n                                  count($this->running_tasks),\n                                  'glpiinventory'\n                              ) .\n                           \"</h4>\\n\";\n\n            foreach ($this->running_tasks as $task) {\n                 $taskurl =\n                  PluginGlpiinventoryTask::getFormURLWithID($task['task']['id'], true);\n                 $error_message .= \"<a href='$taskurl'>\" . $task['task']['name'] . \"</a>, \";\n            }\n            $error_message .= \"</div>\";\n        }\n        return $error_message;\n    }\n\n\n   /**\n    * Prepare data before add to database\n    *\n    * @param array $input\n    * @return array\n    */\n    public function prepareInputForAdd($input)\n    {\n        if (!isset($input['json'])) {\n            $input['json'] = json_encode([\n             'jobs' => [\n                 'checks'           => [],\n                 'associatedFiles'  => [],\n                 'actions'          => [],\n                 'userinteractions' => []\n             ],\n             'associatedFiles' => []]);\n        }\n\n        return parent::prepareInputForAdd($input);\n    }\n\n\n   /**\n    * Get search function for the class\n    *\n    * @return array\n    */\n    public function rawSearchOptions()\n    {\n        $tab = [];\n        $tab[] = [\n         'id' => 'common',\n         'name' => __('Characteristics')\n        ];\n\n        $tab[] = [\n         'id'            => '1',\n         'table'         => $this->getTable(),\n         'field'         => 'name',\n         'name'          => __('Name'),\n         'datatype'      => 'itemlink',\n         'itemlink_link' => $this->getType()\n        ];\n\n        $tab[] = [\n         'id'        => '2',\n         'table'     => $this->getTable(),\n         'field'     => 'id',\n         'name'      => __('ID'),\n        ];\n\n        $tab[] = [\n         'id'        => '16',\n         'table'     => $this->getTable(),\n         'field'     => 'comment',\n         'name'      => __('Comments'),\n         'datatype'  => 'text',\n        ];\n\n        $tab[] = [\n         'id'        => '19',\n         'table'     => $this->getTable(),\n         'field'     => 'date_mod',\n         'name'      => __('Last update'),\n         'datatype'  => 'datetime',\n        ];\n\n        $tab[] = [\n         'id'       => '80',\n         'table'    => 'glpi_entities',\n         'field'    => 'completename',\n         'name'     => Entity::getTypeName(1),\n         'datatype' => 'dropdown',\n        ];\n\n        $tab[] = [\n         'id'        => '86',\n         'table'     => $this->getTable(),\n         'field'     => 'is_recursive',\n         'name'      => __('Child entities'),\n         'datatype'  => 'bool',\n        ];\n\n        $tab[] = [\n         'id'       => '20',\n         'table'    => 'glpi_plugin_glpiinventory_deploygroups',\n         'field'    => 'name',\n         'name'     => __('Enable deploy on demand for the following group', 'glpiinventory'),\n         'datatype' => 'dropdown',\n        ];\n\n        return $tab;\n    }\n\n\n   /**\n    * Get all packages in json format\n    *\n    * @return json\n    */\n    public function getAllDatas()\n    {\n        global $DB;\n\n        $sql = \" SELECT id, name\n               FROM `\" . $this->getTable() . \"`\n               ORDER BY name\";\n        $res  = $DB->query($sql);\n        $nb   = $DB->numrows($res);\n        $json = [];\n        $i    = 0;\n        while ($row = $DB->fetchAssoc($res)) {\n            $json['packages'][$i]['package_id'] = $row['id'];\n            $json['packages'][$i]['package_name'] = $row['name'];\n            $i++;\n        }\n        $json['results'] = $nb;\n        return json_encode($json);\n    }\n\n\n   /**\n    * Clean orders after delete the package\n    *\n    */\n    public function post_deleteFromDB()\n    {\n        $pfDeployFile = new PluginGlpiinventoryDeployFile();\n       // remove file in repo\n        $json = json_decode($this->fields['json'], true);\n        if (is_null($json)) {\n            return;\n        }\n        foreach ($json['associatedFiles'] as $sha512 => $file) {\n            $pfDeployFile->removeFileInRepo($sha512);\n        }\n    }\n\n\n   /**\n    * Display the menu / list of packages\n    *\n    * @param array $options\n    */\n    public function showMenu($options = [])\n    {\n\n        $this->displaylist  = false;\n        $this->fields['id'] = -1;\n        $this->showList();\n    }\n\n\n   /**\n    * Display list of packages\n    */\n    public function showList()\n    {\n        Search::show('PluginGlpiinventoryDeployPackage');\n    }\n\n\n   /**\n    * Define tabs to display on form page\n    *\n    * @param array $options\n    * @return array containing the tabs name\n    */\n    public function defineTabs($options = [])\n    {\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $ong['no_all_tab'] = true;\n        return $ong;\n    }\n\n\n   /**\n    * Display form\n    *\n    * @param integer $ID\n    * @param array $options\n    * @return true\n    */\n    public function showForm($ID, array $options = [])\n    {\n        $this->initForm($ID, $options);\n        $this->showFormHeader($options);\n       //Add redips_clone element before displaying tabs\n       //If we don't do this, dragged element won't be visible on the other tab not displayed at\n       //first (for reminder, GLPI tabs are displayed dynamically on-demand)\n        echo \"<div id='redips_clone'></div>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Name') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        echo Html::input('name', ['size' => 40, 'value' => $this->fields['name']]);\n        echo \"</td>\";\n\n        echo \"<td>\" . __('Comments') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        echo \"<textarea cols='40' class='form-control' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Enable deploy on demand for the following group', 'glpiinventory') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        PluginGlpiinventoryDeployGroup::dropdown(['value' => $this->fields[\"plugin_glpiinventory_deploygroups_id\"]]);\n        echo \"</td>\";\n\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n        return true;\n    }\n\n\n   /**\n    * Display order type form\n    *\n    * @global array $CFG_GLPI\n    */\n    public function displayOrderTypeForm()\n    {\n        global $CFG_GLPI;\n\n        $subtypes = [\n         'check'           => __(\"Audits\", 'glpiinventory'),\n         'file'            => __(\"Files\", 'glpiinventory'),\n         'action'          => __(\"Actions\", 'glpiinventory'),\n         'userinteraction' => __(\"User interactions\", 'glpiinventory')\n        ];\n        $json_subtypes = [\n         'check'           => 'checks',\n         'file'            => 'associatedFiles',\n         'action'          => 'actions',\n         'userinteraction' => 'userinteractions'\n        ];\n\n        $rand  = mt_rand();\n        $datas = json_decode($this->fields['json'], true);\n\n        echo \"<table class='tab_cadre_fixe' id='package_order_\" . $this->getID() . \"'>\";\n\n       // Display an error if the package modification is not possible\n        $canedit   = $this->canUpdateContent();\n        $error_msg = $this->getEditErrorMessage();\n        if (!empty($error_msg)) {\n            echo \"<tr><td>$error_msg</td></tr>\";\n        }\n\n       // Display the lists of each subtypes of a package\n        foreach ($subtypes as $subtype => $label) {\n            echo \"<tr>\";\n            echo \"<th id='th_title_{$subtype}_$rand'>\";\n            echo \"<img src='\" . Plugin::getWebDir('glpiinventory') . \"/pics/$subtype.png' />\";\n            echo \"&nbsp;\" . __($label, 'glpiinventory');\n            if ($canedit) {\n                $this->plusButtonSubtype($this->getID(), $subtype, $rand);\n            }\n            echo \"</th>\";\n            echo \"</tr>\";\n\n           /**\n            * File's form must be encoded as multipart/form-data\n            **/\n            $multipart = \"\";\n            if ($subtype == \"file\") {\n                $multipart = \"enctype='multipart/form-data'\";\n            }\n            echo \"<tr>\";\n            echo \"<td style='vertical-align:top'>\";\n\n           /**\n            * Display subtype form\n            **/\n            echo \"<form name='addition$subtype' method='post' \" . $multipart .\n            \" action='deploypackage.form.php'>\";\n            echo \"<input type='hidden' name='id' value='\" . $this->getID() . \"' />\";\n            echo \"<input type='hidden' name='itemtype' value='PluginGlpiinventoryDeploy\" .\n            ucfirst($subtype) . \"' />\";\n\n            $classname = \"PluginGlpiinventoryDeploy\" . ucfirst($subtype);\n            $class     = new $classname();\n            $class->displayForm($this, $datas, $rand, \"init\");\n            Html::closeForm();\n\n            $json_subtype = $json_subtypes[$subtype];\n           /**\n            * Display stored actions datas\n            **/\n            if (\n                isset($datas['jobs'][$json_subtype])\n                && !empty($datas['jobs'][$json_subtype])\n            ) {\n                echo  \"<div id='drag_deploypackage_\" . $subtype . \"s'>\";\n                echo  \"<form name='remove\" . $subtype . \"s' \" .\n                  \"method='post' action='deploypackage.form.php' \" .\n                  \"id='\" . $subtype . \"sList\" . $rand . \"'>\";\n                echo Html::hidden('remove_item');\n                echo Html::hidden('itemtype', ['value' => $classname]);\n                echo Html::hidden('packages_id', ['value' => $this->getID()]);\n                $class->displayList($this, $datas, $rand);\n                Html::closeForm();\n                echo \"</div>\";\n            }\n\n           /**\n            * Initialize drag and drop on subtype lists\n            **/\n            echo \"<script type='text/javascript'>\";\n            echo \"redipsInit('deploypackage', '$subtype', '\" . $this->getID() . \"');\";\n            echo \"</script>\";\n            echo \"</td>\";\n            echo \"</tr>\";\n        }\n\n        echo \"</table>\";\n    }\n\n\n   /**\n    * Manage + button (audits, files, actions)\n    *\n    * @global array $CFG_GLPI\n    * @param integer $id id of the package\n    * @param string $subtype name of subtype (audits, files, actions)\n    * @param string $rand random string for js to prevent collisions\n    */\n    public function plusButtonSubtype($id, $subtype, $rand)\n    {\n        global $CFG_GLPI;\n\n        if ($this->can($id, UPDATE)) {\n            echo \"&nbsp;\";\n            echo \"<img id='plus_{$subtype}s_block{$rand}'\";\n            echo \" onclick=\\\"new_subtype('{$subtype}', {$id}, {$rand})\\\" \";\n            echo  \" title='\" . __('Add') . \"' alt='\" . __('Add') . \"' \";\n            echo  \" class='pointer' src='\" .\n               $CFG_GLPI[\"root_doc\"] .\n               \"/pics/add_dropdown.png' /> \";\n        }\n    }\n\n\n   /**\n    * Plus button used to add an element\n    *\n    * @global array $CFG_GLPI\n    * @param string $dom_id\n    * @param boolean $clone\n    */\n    public static function plusButton($dom_id, $clone = false)\n    {\n        global $CFG_GLPI;\n\n        echo  \"&nbsp;\";\n        echo  \"<img id='plus_$dom_id' \";\n        if ($clone !== false) {\n            echo \" onClick=\\\"plusbutton('$dom_id', '$clone')\\\" \";\n        } else {\n            echo \" onClick=\\\"plusbutton('$dom_id')\\\" \";\n        }\n        echo \" title='\" . __('Add') . \"' alt='\" . __('Add') . \"' \";\n        echo \" class='pointer' src='\" . $CFG_GLPI[\"root_doc\"] .\n              \"/pics/add_dropdown.png'> \";\n    }\n\n\n   /**\n    * When user is in DEBUG mode, we display the json\n    *\n    * @global array $CFG_GLPI\n    */\n    public function showDebug()\n    {\n        global $CFG_GLPI;\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th>\" . __('JSON package representation', 'glpiinventory') . \"</th></tr>\";\n        echo \"<tr><td>\";\n        echo \"<textarea cols='132' rows='50' style='border:1' name='json'>\";\n        echo PluginGlpiinventoryToolbox::formatJson($this->fields['json']);\n        echo \"</textarea></td></tr>\";\n        echo \"</table>\";\n    }\n\n\n   /**\n    * Update the json structure\n    *\n    * @param string $action_type type of action\n    * @param array $params data used to update the json\n    */\n    public static function alterJSON($action_type, $params)\n    {\n       //route to sub class\n        $item_type = $params['itemtype'];\n\n        if (\n            in_array($item_type, [\n                                 'PluginGlpiinventoryDeployCheck',\n                                 'PluginGlpiinventoryDeployFile',\n                                 'PluginGlpiinventoryDeployAction',\n                                 'PluginGlpiinventoryDeployUserinteraction'\n                              ])\n        ) {\n            $class = new $item_type();\n            switch ($action_type) {\n                case \"add_item\":\n                    return $class->add_item($params);\n                break;\n\n                case \"save_item\":\n                    return $class->save_item($params);\n                break;\n\n                case \"remove_item\":\n                    return $class->remove_item($params);\n                break;\n\n                case \"move_item\":\n                    return $class->move_item($params);\n                break;\n            }\n        } else {\n            Toolbox::logDebug(\"package subtype not found : \" . $params['itemtype']);\n            Html::displayErrorAndDie(\"package subtype not found\");\n        }\n    }\n\n\n   /**\n    * Export the package (information, actions, files...)\n    *\n    * @param integer $packages_id id of the package to export\n    */\n    public function exportPackage($packages_id)\n    {\n        $this->getFromDB($packages_id);\n        if (empty($this->fields['uuid'])) {\n            $input = [\n             'id'   => $this->fields['id'],\n             'uuid' => Rule::getUuid()\n            ];\n            $this->update($input);\n        }\n\n        $pfDeployFile  = new PluginGlpiinventoryDeployFile();\n\n       // Generate JSON\n        $input = $this->fields;\n        unset($input['id']);\n        $a_xml = [\n          'package'    => $input,\n          'files'      => [],\n          'manifests'  => [],\n          'repository' => [],\n          'orders'     => [['json' => $this->fields['json']]],\n        ];\n        $json = json_decode($this->fields['json'], true);\n        $a_files = $json['associatedFiles'];\n\n       // Add files\n        foreach ($a_files as $files_id => $data) {\n            $a_pkgfiles = current($pfDeployFile->find(['sha512' => $files_id], [], 1));\n            if (count($a_pkgfiles) > 0) {\n                unset($a_pkgfiles['id']);\n                $a_xml['files'][] = $a_pkgfiles;\n            }\n        }\n\n       // Create zip with JSON and files\n        $name = preg_replace(\"/[^a-zA-Z0-9]/\", '', $this->fields['name']);\n        $filename = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/export/\" . $this->fields['uuid'] . \".\" . $name . \".zip\";\n        if (file_exists($filename)) {\n            unlink($filename);\n        }\n\n        $zip = new ZipArchive();\n        if ($zip->open($filename) == true) {\n            if ($zip->open($filename, ZipArchive::CREATE) == true) {\n                $zip->addEmptyDir('files');\n                $zip->addEmptyDir('files/manifests');\n                $zip->addEmptyDir('files/repository');\n                $pfDeployFile = new PluginGlpiinventoryDeployFile();\n                foreach ($a_files as $hash => $data) {\n                    $sha512 = trim(file_get_contents(PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $hash));\n                    $zip->addFile(PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $hash, \"files/manifests/\" . $hash);\n                    $a_xml['manifests'][] = $hash;\n                    $file = $pfDeployFile->getDirBySha512($sha512) .\n                       \"/\" . $sha512;\n                    $zip->addFile(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository/\" . $file, \"files/repository/\" . $file);\n                    $a_xml['repository'][] = $file;\n                }\n                $json_string = json_encode($a_xml);\n                $zip->addFromString('information.json', $json_string);\n            }\n            $zip->close();\n            Session::addMessageAfterRedirect(__(\"Package exported in\", \"glpiinventory\") . \" \" . GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/export/\" . $this->fields['uuid'] . \".\" . $name . \".zip\");\n        }\n    }\n\n\n   /**\n    * Import the package\n    *\n    * @param string $zipfile the zip file with all data inside\n    */\n    public function importPackage($zipfile)\n    {\n\n        $zip           = new ZipArchive();\n        $pfDeployFile  = new PluginGlpiinventoryDeployFile();\n\n        $filename = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\" . $zipfile;\n\n        $extract_folder = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\" . $zipfile . \".extract\";\n\n        if ($zip->open($filename, ZipArchive::CREATE) == true) {\n            $zip->extractTo($extract_folder);\n            $zip->close();\n        }\n        $json_string = file_get_contents($extract_folder . \"/information.json\");\n\n        $a_info = json_decode($json_string, true);\n\n       // Find package with this uuid\n        $a_packages = $this->find(['uuid' => $a_info['package']['uuid']]);\n        if (count($a_packages) == 0) {\n           // Create it\n            $_SESSION['tmp_clone_package'] = true;\n            $this->add($a_info['package']);\n            foreach ($a_info['files'] as $input) {\n                $pfDeployFile->add($input);\n            }\n        }\n       // Copy files\n        foreach ($a_info['manifests'] as $manifest) {\n            rename($extract_folder . \"/files/manifests/\" . $manifest, PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $manifest);\n        }\n        foreach ($a_info['repository'] as $repository) {\n            $split = explode('/', $repository);\n            array_pop($split);\n            $folder = '';\n            foreach ($split as $dir) {\n                $folder .= '/' . $dir;\n                if (!file_exists(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository\" . $folder)) {\n                    mkdir(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository\" . $folder);\n                }\n            }\n            rename($extract_folder . \"/files/repository/\" . $repository, GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository/\" . $repository);\n        }\n    }\n\n\n   /**\n    * Display list of packages to import\n    */\n    public function listPackagesToImport()\n    {\n\n        $rand = mt_rand();\n\n        echo \"<div class='spaced'>\";\n        Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n\n        $massiveactionparams = ['container' => 'mass' . __CLASS__ . $rand];\n        Html::showMassiveActions($massiveactionparams);\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th colspan='5'>\";\n        echo __('Packages to import', 'glpiinventory');\n        echo \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th width='10'>\" . Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand) . \"</th>\";\n        echo \"<th>\";\n        echo __('Name');\n        echo \"</th>\";\n        echo \"<th>\";\n        echo __('uuid');\n        echo \"</th>\";\n        echo \"<th>\";\n        echo __('Package to update');\n        echo \"</th>\";\n        echo \"</tr>\";\n\n        foreach (glob(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/*.zip\") as $file) {\n            echo \"<tr class='tab_bg_1'>\";\n            $file = str_replace(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\", \"\", $file);\n            $split = explode('.', $file);\n            echo \"<td>\";\n            Html::showMassiveActionCheckBox(__CLASS__, $file);\n            echo \"</td>\";\n            echo \"<td>\";\n            echo $split[2];\n            echo \"</td>\";\n            echo \"<td>\";\n            echo $split[0] . \".\" . $split[1];\n            echo \"</td>\";\n            echo \"<td>\";\n            $a_packages = current($this->find(['uuid' => $split[0] . \".\" . $split[1]], [], 1));\n            if (count($a_packages) > 1) {\n                $this->getFromDB($a_packages['id']);\n                echo $this->getLink();\n            }\n            echo \"</td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n        $massiveactionparams['ontop'] = false;\n        Html::showMassiveActions($massiveactionparams);\n        echo \"</div>\";\n    }\n\n\n   /**\n    * Get a sub element at index\n    *\n    * @param string $subtype\n    * @param integer $index\n    * @return string\n    */\n    public function getSubElement($subtype, $index)\n    {\n        $data_o = json_decode($this->fields['json'], true);\n        return $data_o['jobs'][$subtype][$index];\n    }\n\n\n   /**\n    * Get Order's associated file by hash\n    *\n    * @param string $hash\n    * @return null|string\n    */\n    public function getAssociatedFile($hash)\n    {\n        $data_o = json_decode($this->fields['json'], true);\n\n        if (array_key_exists($hash, $data_o['associatedFiles'])) {\n            return $data_o['associatedFiles'][$hash];\n        }\n        return null;\n    }\n\n\n   /**\n    * Get the json\n    *\n    * @param integer $packages_id id of the order\n    * @return boolean|string the string is in json format\n    */\n    public static function getJson($packages_id)\n    {\n        $pfDeployPackage = new self();\n        $pfDeployPackage->getFromDB($packages_id);\n        if (!empty($pfDeployPackage->fields['json'])) {\n            return $pfDeployPackage->fields['json'];\n        } else {\n            return false;\n        }\n    }\n\n\n   /**\n    * Update the order json\n    *\n    * @param integer $packages_id\n    * @param array $datas\n    * @return integer error number\n    */\n    public static function updateOrderJson($packages_id, $datas)\n    {\n        $pfDeployPackage = new self();\n        $options = JSON_UNESCAPED_SLASHES;\n\n        $json = json_encode($datas, $options);\n\n        $json_error_consts = [\n         JSON_ERROR_NONE           => \"JSON_ERROR_NONE\",\n         JSON_ERROR_DEPTH          => \"JSON_ERROR_DEPTH\",\n         JSON_ERROR_STATE_MISMATCH => \"JSON_ERROR_STATE_MISMATCH\",\n         JSON_ERROR_CTRL_CHAR      => \"JSON_ERROR_CTRL_CHAR\",\n         JSON_ERROR_SYNTAX         => \"JSON_ERROR_SYNTAX\",\n         JSON_ERROR_UTF8           => \"JSON_ERROR_UTF8\"\n        ];\n\n        $error_json = json_last_error();\n\n        if (version_compare(PHP_VERSION, '5.5.0', \"ge\")) {\n            $error_json_message = json_last_error_msg();\n        } else {\n            $error_json_message = \"\";\n        }\n        $error = 0;\n        if ($error_json != JSON_ERROR_NONE) {\n            $error_msg = $json_error_consts[$error_json];\n            Session::addMessageAfterRedirect(\n                __(\"The modified JSON contained a syntax error :\", \"glpiinventory\") . \"<br/>\" .\n                $error_msg . \"<br/>\" . $error_json_message,\n                false,\n                ERROR,\n                false\n            );\n            $error = 1;\n        } else {\n            $error = $pfDeployPackage->update(\n                [\n                'id'   => $packages_id,\n                'json' => Toolbox::addslashes_deep($json)\n                ]\n            );\n        }\n        return $error;\n    }\n\n\n   /**\n    * Get the tab name used for item\n    *\n    * @param object $item the item object\n    * @param integer $withtemplate 1 if is a template form\n    * @return string name of the tab\n    */\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (!$withtemplate) {\n            switch ($item->getType()) {\n                case __CLASS__:\n                    if ($item->canUpdateItem()) {\n                        $tabs = [];\n                        if ($item->fields['id'] > 0) {\n                            $tabs[1] = __('Package actions', 'glpiinventory');\n                        }\n                        if ($item->fields['plugin_glpiinventory_deploygroups_id'] > 0) {\n                            if ($_SESSION['glpishow_count_on_tabs']) {\n                                $nb = $item->countVisibilities();\n                                $tabs[2] = self::createTabEntry(\n                                    _n(\n                                        'Target for deploy on demand',\n                                        'Targets for deploy on demand',\n                                        $nb,\n                                        'glpiinventory'\n                                    ),\n                                    $nb\n                                );\n                            } else {\n                                $tabs[2] = _n(\n                                    'Target for deploy on demand',\n                                    'Targets for deploy on demand',\n                                    2,\n                                    'glpiinventory'\n                                );\n                            }\n                        }\n                        return $tabs;\n                    }\n                    break;\n\n                case 'Computer':\n                    if (\n                        Session::haveRight(\"plugin_glpiinventory_selfpackage\", READ)\n                        && PluginGlpiinventoryToolbox::isAnInventoryDevice($item)\n                        && self::isDeployEnabled($item->fields['id'])\n                    ) {\n                        return __('Package deploy', 'glpiinventory');\n                    }\n                    break;\n            }\n        }\n        return '';\n    }\n\n\n   /**\n    * Display the content of the tab\n    *\n    * @param object $item\n    * @param integer $tabnum number of the tab to display\n    * @param integer $withtemplate 1 if is a template form\n    * @return boolean\n    */\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            if ($tabnum == 2) {\n                $item->showVisibility();\n                return true;\n            } elseif ($tabnum == 1) {\n                $item->displayOrderTypeForm();\n                return true;\n            }\n        } elseif ($item->getType() == 'Computer') {\n            $package = new self();\n            $package->showPackageForMe($_SESSION['glpiID'], $item);\n            return true;\n        }\n        return false;\n    }\n\n\n   /**\n    * Count number elements for the visibility\n    *\n    * @return integer\n    */\n    public function countVisibilities()\n    {\n        return (count($this->entities)\n              + count($this->users)\n              + count($this->groups)\n              + count($this->profiles));\n    }\n\n\n   /**\n    * Display the visibility, so who can read. write...\n    *\n    * @global array $CFG_GLPI\n    * @return true\n    */\n    public function showVisibility()\n    {\n        global $CFG_GLPI;\n\n        $ID      = $this->fields['id'];\n        $canedit = $this->can($ID, UPDATE);\n\n        echo \"<div class='center'>\";\n\n        $rand = mt_rand();\n        $nb   = count($this->users) + count($this->groups) + count($this->profiles)\n              + count($this->entities);\n\n        if ($canedit) {\n            echo \"<div class='firstbloc'>\";\n            echo \"<form name='deploypackagevisibility_form$rand' id='deploypackagevisibility_form$rand' \";\n            echo \" method='post' action='\" . Toolbox::getItemTypeFormURL('PluginGlpiinventoryDeployPackage') . \"'>\";\n            echo \"<input type='hidden' name='plugin_glpiinventory_deploypackages_id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Add a target for self-service', 'glpiinventory') . \"</th></tr>\";\n            echo \"<tr class='tab_bg_2'><td width='100px'>\";\n\n            $types = ['Entity', 'Group', 'Profile', 'User'];\n\n            $addrand = Dropdown::showItemTypes('_type', $types);\n            $params  = ['type'  => '__VALUE__',\n                          'right' => 'plugin_glpiinventory_selfpackage'];\n\n            Ajax::updateItemOnSelectEvent(\n                \"dropdown__type\" . $addrand,\n                \"visibility$rand\",\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/visibility.php\",\n                $params\n            );\n\n            echo \"</td>\";\n            echo \"<td><span id='visibility$rand'></span>\";\n            echo \"</td></tr>\";\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n        }\n\n        echo \"<div class='spaced'>\";\n        if ($canedit && $nb) {\n            Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n            $massiveactionparams\n            = ['num_displayed'\n                        => $nb,\n                    'container'\n                        => 'mass' . __CLASS__ . $rand,\n                    'specific_actions'\n                         => ['delete' => _x('button', 'Delete permanently')] ];\n            Html::showMassiveActions($massiveactionparams);\n        }\n        echo \"<table class='tab_cadre_fixehov'>\";\n        $header_begin  = \"<tr>\";\n        $header_top    = '';\n        $header_bottom = '';\n        $header_end    = '';\n        if ($canedit && $nb) {\n            $header_begin  .= \"<th width='10'>\";\n            $header_top    .= Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n            $header_bottom .= Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n            $header_end    .= \"</th>\";\n        }\n        $header_end .= \"<th>\" . __('Type') . \"</th>\";\n        $header_end .= \"<th>\" . _n('Recipient', 'Recipients', Session::getPluralNumber()) . \"</th>\";\n        $header_end .= \"</tr>\";\n        echo $header_begin . $header_top . $header_end;\n\n       // Users\n        if (count($this->users)) {\n            foreach ($this->users as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_User', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . __('User') . \"</td>\";\n                    echo \"<td>\" . getUserName($data['users_id']) . \"</td>\";\n                    echo \"</tr>\";\n                }\n            }\n        }\n\n       // Groups\n        if (count($this->groups)) {\n            foreach ($this->groups as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Group', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . __('Group') . \"</td>\";\n                    echo \"<td>\";\n                    $names     = Dropdown::getDropdownName('glpi_groups', $data['groups_id'], 1);\n                    $groupname = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['entities_id'] >= 0) {\n                        $groupname = sprintf(\n                            __('%1$s / %2$s'),\n                            $groupname,\n                            Dropdown::getDropdownName(\n                                'glpi_entities',\n                                $data['entities_id']\n                            )\n                        );\n                        if ($data['is_recursive']) {\n                             $groupname = sprintf(\n                                 __('%1$s %2$s'),\n                                 $groupname,\n                                 \"<span class='b'>(\" . __('R') . \")</span>\"\n                             );\n                        }\n                    }\n                     echo $groupname;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n\n       // Entity\n        if (count($this->entities)) {\n            foreach ($this->entities as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Entity', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . Entity::getTypeName(1) . \"</td>\";\n                    echo \"<td>\";\n                    $names      = Dropdown::getDropdownName('glpi_entities', $data['entities_id'], 1);\n                    $entityname = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['is_recursive']) {\n                        $entityname = sprintf(\n                            __('%1$s %2$s'),\n                            $entityname,\n                            \"<span class='b'>(\" . __('R') . \")</span>\"\n                        );\n                    }\n                     echo $entityname;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n\n       // Profiles\n        if (count($this->profiles)) {\n            foreach ($this->profiles as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Profile', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . _n('Profile', 'Profiles', 1) . \"</td>\";\n                    echo \"<td>\";\n                    $names       = Dropdown::getDropdownName('glpi_profiles', $data['profiles_id'], 1);\n                    $profilename = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['entities_id'] >= 0) {\n                        $profilename = sprintf(\n                            __('%1$s / %2$s'),\n                            $profilename,\n                            Dropdown::getDropdownName(\n                                'glpi_entities',\n                                $data['entities_id']\n                            )\n                        );\n                        if ($data['is_recursive']) {\n                             $profilename = sprintf(\n                                 __('%1$s %2$s'),\n                                 $profilename,\n                                 \"<span class='b'>(\" . __('R') . \")</span>\"\n                             );\n                        }\n                    }\n                     echo $profilename;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n        if ($nb) {\n            echo $header_begin . $header_bottom . $header_end;\n        }\n\n        echo \"</table>\";\n        if ($canedit && $nb) {\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n            Html::closeForm();\n        }\n\n        echo \"</div>\";\n\n        return true;\n    }\n\n\n   /**\n    * Fill internal variable with visibility elements when load package\n    * information from database\n    */\n    public function post_getFromDB()\n    {\n       // Users\n        $this->users    = PluginGlpiinventoryDeployPackage_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = PluginGlpiinventoryDeployPackage_Entity::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = PluginGlpiinventoryDeployPackage_Group::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = PluginGlpiinventoryDeployPackage_Profile::getProfiles($this->fields['id']);\n    }\n\n\n   /**\n   * Get all available states for a package\n   * @return an array of states and their labels\n   */\n    public static function getPackageDeploymentStates()\n    {\n        return [\n              'agents_notdone'   => __('Not done yet', 'glpiinventory'),\n              'agents_error'     => __('In error', 'glpiinventory'),\n              'agents_success'   => __('Successful', 'glpiinventory'),\n              'agents_running'   => __('Running', 'glpiinventory'),\n              'agents_prepared'  => __('Prepared', 'glpiinventory'),\n              'agents_cancelled' => __('Cancelled', 'glpiinventory')             ];\n    }\n\n\n   /**\n   * Get a label for a state\n   * @param state the state\n   * @return the label associated to a state\n   */\n    public static function getDeploymentLabelForAState($state)\n    {\n        $states = self::getPackageDeploymentStates();\n        if (isset($states[$state])) {\n            return $states[$state];\n        } else {\n            return '';\n        }\n    }\n\n\n   /**\n    * Display a form with a list of packages and their state, that a user\n    * has request to install on it's computer\n    *\n    * @param integer $users_id id of the user\n    * @param $item source item (maybe a User or a computer)\n    */\n    public function showPackageForMe($users_id, $item = false)\n    {\n        global $CFG_GLPI;\n\n        $computer     = new Computer();\n        $self_service = !($_SESSION['glpiactiveprofile']['interface'] == 'central');\n        if (!$self_service) {\n            $computers_id = false;\n            if ($item && $item instanceof Computer) {\n                $computers_id = $item->getID();\n            }\n            $my_packages = $this->getPackageForMe(false, $computers_id);\n        } else {\n            $my_packages = $this->getPackageForMe($users_id);\n        }\n\n       // check current interface\n        $is_tech = isset($_SESSION['glpiactiveprofile']['interface'])\n                  && $_SESSION['glpiactiveprofile']['interface'] == \"central\";\n\n       // retrieve state name\n        $joblogs_labels = PluginGlpiinventoryTaskjoblog::dropdownStateValues();\n\n       // Display for each computer, list of packages you can deploy\n        $url = Plugin::getWebDir('glpiinventory');\n        echo \"<form name='onetimedeploy_form' id='onetimedeploy_form'\n             method='POST'\n             action='$url/front/deploypackage.public.php'\n             enctype=\\\"multipart/form-data\\\">\";\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        foreach ($my_packages as $computers_id => $data) {\n            $package_to_install = [];\n            $computer->getFromDB($computers_id);\n            echo \"<tr>\";\n            echo \"<th><img src='$url/pics/computer_icon.png'/> \"\n            . __('Computer', 'Computers', 1) . \" <i>\"\n            . $computer->fields['name'] . \"</i></th>\";\n            echo \"</tr>\";\n\n            if (count($data)) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td>\";\n                echo '<div class=\"target_block\">';\n                echo '<div class=\"target_details\">';\n                echo '<div class=\"target_stats\">';\n                foreach ($data as $packages_id => $package_info) {\n                    if (isset($package_info['taskjobs_id'])) {\n                        $taskjob_id = $package_info['taskjobs_id'];\n                        echo \"<div class='counter_block \" . $package_info['last_taskjobstate']['state'] . \"'\n                             id='block_$taskjob_id'>\";\n                      // display deploy informations\n                        echo \"<table>\";\n                        echo \"<tr>\";\n                        echo \"<td style='min-width: 600px'>\";\n\n                     // add a toggle control\n                        if ($is_tech) {\n                              echo \"<a class='toggle_run'\n                              href='#'\n                              id='toggle_run_$taskjob_id'>\";\n                              echo $package_info['name'];\n                              echo \"</a>\";\n                        } else {\n                            echo $package_info['name'];\n                        }\n                        echo \"</td>\";\n                        echo \"<td style='width: 200px'>\";\n                        echo Html::convDateTime($package_info['last_taskjobstate']['date']);\n                        echo \"</td>\";\n                        echo \"<td style='width: 200px'>\";\n                        echo self::getDeploymentLabelForAState($package_info['last_taskjobstate']['state']);\n                        echo \"</td>\";\n                        echo \"</tr>\";\n                        echo \"</table>\";\n\n                        if ($is_tech) {\n                         // display also last log (folded)\n                            echo \"<div class='agent_block'\n                                id='run_$taskjob_id'\n                                style='display:none;'>\";\n\n                            echo \"<div class='buttons'>\";\n\n                         // if job is in error, suggest restart\n                            if (\n                                in_array(\n                                    $package_info['last_taskjobstate']['state'],\n                                    [\"agents_error\", \"agents_success\"]\n                                )\n                            ) {\n                                echo \"<a class='restart btn'\n                                 href='#'\n                                 title='\" . __(\"Restart job\", 'glpiinventory') . \"'\n                                 id='restart_run_$taskjob_id'>\n                              <i class='fa fa-bolt'></i></a>\";\n                            }\n\n                         // if job has not started, user can cancel it\n                            if ($package_info['last_taskjobstate']['state'] == \"agents_prepared\") {\n                                echo \"<a class='cancel btn'\n                                 href='#'\n                                 title='\" . __(\"Cancel job\", 'glpiinventory') . \"'\n                                 id='cancel_run_$taskjob_id'>\n                              <i class='fa fa-stop'></i></a>\";\n                            }\n\n                      // permits to \"soft\" refresh\n                            echo \"<a href='#'\n                              title='\" . __(\"refresh job\", 'glpiinventory') . \"'\n                              class='btn'\n                              id='refresh_run_$taskjob_id'>\n                              <i class='fa fa-sync fa-fx'></i></a>\";\n\n                            echo \"</div>\"; // .buttons\n\n                      // log list\n                            echo \"<table class='runs' id='runs_$taskjob_id'>\";\n                            foreach ($package_info['last_taskjobstate']['logs'] as $log) {\n                                echo \"<tr class='run log'>\";\n                                echo \"<td>\" . $log['log.f_date'] . \"</td>\";\n                                echo \"<td>\" . $joblogs_labels[$log['log.state']] . \"</td>\";\n                                echo \"<td>\" . $log['log.comment'] . \"</td>\";\n                                echo \"</tr>\";\n                            }\n                            echo \"</table>\"; // .runs\n                            echo '</div>'; // .agent_block\n                        }\n\n                        echo '</div>'; // .counter_block\n\n                   // js controls (toggle, restart)\n                        echo Html::scriptBlock(\"$(function() {\n                     var logstatuses_names = \" . json_encode($joblogs_labels) . \";\n\n                     $('#toggle_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $('#run_$taskjob_id').toggle();\n                        $(this).toggleClass('expand')\n                               .parent('td')\n                               .nextAll('td').toggle();\n\n                     });\n\n                     $('#cancel_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/cancel_job.php',\n                           data: {\n                              'jobstate_id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'agent_id':    \" . $package_info['agent_id'] . \"\n                           },\n                           complete: function() {\n                              document.location.reload();\n                           }\n                        });\n                     });\n\n                     $('#restart_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/restart_job.php',\n                           data: {\n                              'jobstate_id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'agent_id':    \" . $package_info['agent_id'] . \"\n                           },\n                           complete: function() {\n                              document.location.reload();\n                           }\n                        });\n                     });\n\n                     $('#refresh_run_$taskjob_id i').click(function() {\n                        var fa = $(this);\n                        fa.addClass('fa-spin fa-spinner')\n                          .removeClass('fa-sync');\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/jobstates_logs.php',\n                           data: {\n                              'id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'last_date': '2999-01-01 00:00:00' // force a future date\n                           },\n                           success: function(data){\n                              // no data -> reload tab\n                              if (typeof data.logs == 'undefined') {\n                                 reloadTab();\n                                 return;\n                              }\n\n                              if (data.logs.length) {\n                                 // remove old data\n                                 $('#runs_$taskjob_id').empty();\n\n                                 $.each(data.logs, function( index, log ) {\n                                    $('#runs_$taskjob_id').append(\n                                       '<tr>'+\n                                       '<td>'+log['log.f_date']+'</td>'+\n                                       '<td>'+logstatuses_names[log['log.state']]+'</td>'+\n                                       '<td>'+log['log.comment']+'</td>'+\n                                       '<tr>'\n                                    )\n                                 });\n\n                                 var class_to_apply = '';\n                                 switch (data.logs[0]['log.state'] + '') {\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_RUNNING . \"':\n                                       class_to_apply = 'agents_running';\n                                       break;\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_ERROR . \"':\n                                       class_to_apply = 'agents_error';\n                                       break;\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_OK . \"':\n                                       class_to_apply = 'agents_success';\n                                       break;\n                                 }\n                                 if (class_to_apply.length) {\n                                    $('#block_$taskjob_id')\n                                       .attr('class', 'counter_block '+class_to_apply);\n                                 }\n                              }\n                           },\n                           complete: function() {\n                              setTimeout(function() {\n                                 fa.removeClass('fa-spin fa-spinner')\n                                   .addClass('fa-sync');\n                              }, 300);\n                           }\n                        });\n                     })\n                  });\");\n                    } else {\n                        $package_to_install[$packages_id] = $package_info['name'];\n                    }\n                }\n                echo '</div>'; // .target_stats\n                echo '</div>'; // .target_details\n                echo '</div>'; // .target_block\n\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            if (count($package_to_install)) {\n                $p['name']     = 'deploypackages_' . $computers_id;\n                $p['display']  = true;\n                $p['multiple'] = true;\n                $p['size']     = 3;\n                $p['width']    = 950;\n\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td>\";\n                echo __('Select packages you want install', 'glpiinventory');\n                echo \"<br/>\";\n                Dropdown::showFromArray($p['name'], $package_to_install, $p);\n                echo \"</td>\";\n                echo \"</tr>\";\n\n                echo \"<tr>\";\n                echo \"<th colspan='2'>\";\n                echo Html::submit(\n                    __('Prepare for install', 'glpiinventory'),\n                    ['name' => 'prepareinstall']\n                );\n                echo \"&nbsp;\";\n                if (!$self_service) {\n                    $options = ['local'  => __(\"I'm on this computer: local wakeup\", 'glpiinventory'),\n                           'remote' => __(\"I'm not on this computer: wakeup from the server\", 'glpiinventory'),\n                           'none'   => __(\"Don't wakeup\", 'glpiinventory')\n                        ];\n                    Dropdown::showFromArray(\n                        'wakeup_type',\n                        $options,\n                        ['value' => 'remote']\n                    );\n                } else {\n                    echo Html::hidden('wakeup_type', ['value' => 'local']);\n                }\n                echo Html::hidden('self_service', ['value' => $self_service]);\n                echo \"</th>\";\n                echo \"</tr>\";\n            } else {\n                echo \"<tr>\";\n                echo \"<th colspan='2'>\";\n                echo __('No packages available to install', 'glpiinventory');\n                echo \"</th>\";\n                echo \"</tr>\";\n            }\n        }\n        echo \"</table>\"; // .tab_cadre_fixe\n        Html::closeForm();\n    }\n\n\n   /**\n    * Check if an agent have deploy feature enabled\n    * @since 9.2\n    *\n    * @param integer $computers_id the ID of the computer to check\n    * @return boolean true if deploy is enabled for the agent\n    */\n    public static function isDeployEnabled($computers_id)\n    {\n        $agent = new Agent();\n       //If the agent associated with the computer has not the\n       //deploy feature enabled, do not propose to deploy packages on\n        if (!$agent->getFromDBByCrit(['itemtype' => 'Computer',  'items_id' => $computers_id])) {\n            return false;\n        }\n        $pfAgentModule = new PluginGlpiinventoryAgentmodule();\n        if ($pfAgentModule->isAgentCanDo('deploy', $agent->getID())) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n   /**\n    * Get deploy packages available to install on user computer(s) and for\n    * packages requested the state of deploy\n    *\n    * @param integer $users_id id of the user\n    */\n    public function getPackageForMe($users_id, $computers_id = false)\n    {\n\n        $computer      = new Computer();\n        $pfDeployGroup = new PluginGlpiinventoryDeployGroup();\n        $my_packages   = []; //Store all installable packages\n\n        $query = [];\n        if ($users_id) {\n            $query += ['users_id' => $users_id];\n        }\n        if ($computers_id) {\n            $query += ['id' => $computers_id];\n        }\n        $query += ['entities_id' => $_SESSION['glpiactiveentities']];\n\n       //Get all computers of the user\n        $mycomputers = $computer->find($query);\n\n        $agent       = new Agent();\n\n        foreach ($mycomputers as $mycomputers_id => $data) {\n            $my_packages[$mycomputers_id] = [];\n        }\n\n       //Get packages used for the user or a specific computer\n        $packages_used = $this->getMyDepoyPackages($my_packages, $users_id);\n\n       //Get packages that a the user can deploy\n        $packages = $this->canUserDeploySelf();\n\n        if ($packages) {\n           //Browse all packages that the user can install\n            foreach ($packages as $package) {\n               //Get computers that can be targeted for this package installation\n                $computers = $pfDeployGroup->getTargetsForGroup($package['plugin_glpiinventory_deploygroups_id']);\n\n               //Browse all computers that are target by a package installation\n\n                foreach ($mycomputers as $comp_id => $data) {\n                    //If we only want packages for one computer\n                    //check if it's the computer we look for\n                    if ($computers_id && $comp_id != $computers_id) {\n                        continue;\n                    }\n\n                    //If the agent associated with the computer has not the\n                    //deploy feature enabled, do not propose to deploy packages on it\n                    if (!self::isDeployEnabled($comp_id)) {\n                        continue;\n                    }\n\n                   //Get computers that can be targeted for this package installation\n                   //Check if the package belong to one of the entity that\n                   //are currently visible\n\n                   //The package is recursive, and visible in computer's entity\n                    if (Session::isMultiEntitiesMode()) {\n                        if (\n                             !$package['is_recursive']\n                             && $package['entities_id'] != $data['entities_id']\n                        ) {\n                            continue;\n                        } elseif (\n                               $package['is_recursive']\n                               && $package['entities_id'] != $data['entities_id']\n                               && !in_array(\n                                   $package['entities_id'],\n                                   getAncestorsOf('glpi_entities', $data['entities_id'])\n                               )\n                        ) {\n                     //The package is not recursive, and invisible in the computer's entity\n                            continue;\n                        }\n                    }\n\n                   //Does the computer belongs to the group\n                   //associated with the package ?\n                    if (isset($computers[$comp_id])) {\n                         $my_packages[$comp_id][$package['id']]\n                         = ['name'     => $package['name'],\n                         'agent_id' => $agent->getId()];\n\n                         //The package has already been deployed or requested to deploy\n                         if (isset($packages_used[$comp_id][$package['id']])) {\n                             $taskjobs_id = $packages_used[$comp_id][$package['id']];\n                             $my_packages[$comp_id][$package['id']]['taskjobs_id'] = $taskjobs_id;\n                             $last_job_state = $this->getMyDepoyPackagesState($comp_id, $taskjobs_id);\n                             if ($last_job_state) {\n                                 $my_packages[$comp_id][$package['id']]['last_taskjobstate']\n                                 = $last_job_state;\n                             }\n                         }\n                    }\n                }\n            }\n        }\n        return $my_packages;\n    }\n\n\n   /**\n    * Add the package in task or use existant task and add the computer in\n    * taskjob\n    *\n    * @global object $DB\n    * @param integer $computers_id id of the computer where depoy package\n    * @param integer $packages_id id of the package to install in computer\n    * @param integer $users_id id of the user have requested the installation\n    */\n    public function deployToComputer($computers_id, $packages_id, $users_id)\n    {\n        global $DB;\n\n        $pfTask    = new PluginGlpiinventoryTask();\n        $pfTaskJob = new PluginGlpiinventoryTaskJob();\n        $computer  = new Computer();\n\n        $computer->getFromDB($computers_id);\n\n       //Get jobs for a package on a computer\n        $query = \"SELECT `job`.*\n                FROM `glpi_plugin_glpiinventory_taskjobs` AS job\"\n              . \" LEFT JOIN `glpi_plugin_glpiinventory_tasks` AS task\"\n              . \"    ON `task`.`id` = `job`.`plugin_glpiinventory_tasks_id`\"\n              . \" WHERE `job`.`targets`='[{\\\"PluginGlpiinventoryDeployPackage\\\":\\\"\" . $packages_id . \"\\\"}]'\"\n              . \"    AND `task`.`is_active`='1'\"\n              . \"    AND `task`.`is_deploy_on_demand`='1'\"\n              . \"    AND `task`.`entities_id`='\" . $computer->fields['entities_id'] . \"'\"\n              . \"    AND `task`.`reprepare_if_successful`='0'\"\n              . \"     AND `job`.`method`='deployinstall'\"\n              . \" LIMIT 1\";\n        $iterator = $DB->request($query);\n\n       // case 1: if exist, we add computer in actors of the taskjob\n        if ($iterator->numrows() == 1) {\n            foreach ($iterator as $data) {\n                //Get current list of actors\n                $actors   = importArrayFromDB($data['actors']);\n\n                //Add a new actor : the computer that is being processed\n                $actors[] = ['Computer' => $computers_id];\n\n                //Get end user computers\n                $enduser  = importArrayFromDB($data['enduser']);\n                if (isset($enduser[$users_id])) {\n                    if (!in_array($computers_id, $enduser[$users_id])) {\n                        $enduser[$users_id][] = $computers_id;\n                    }\n                } else {\n                    $enduser[$users_id] = [$computers_id];\n                }\n                $input = [\n                'id'      => $data['id'],\n                'actors'  => exportArrayToDB($actors),\n                'enduser' => exportArrayToDB($enduser)\n                ];\n\n                //Update the job with the new actor\n                $pfTaskJob->update($input);\n                $tasks_id = $data['plugin_glpiinventory_tasks_id'];\n            }\n        } else {\n           // case 2: if not exist, create a new task + taskjob\n            $this->getFromDB($packages_id);\n\n           //Add the new task\n            $input = [\n            'name'                    => '[deploy on demand] ' . $this->fields['name'],\n            'entities_id'             => $computer->fields['entities_id'],\n            'reprepare_if_successful' => 0,\n            'is_deploy_on_demand'     => 1,\n            'is_active'               => 1,\n            ];\n            $tasks_id = $pfTask->add($input);\n\n           //Add a new job for the newly created task\n           //and enable it\n            $input = [\n            'plugin_glpiinventory_tasks_id' => $tasks_id,\n            'entities_id' => $computer->fields['entities_id'],\n            'name'        => 'deploy',\n            'method'      => 'deployinstall',\n            'targets'     => '[{\"PluginGlpiinventoryDeployPackage\":\"' . $packages_id . '\"}]',\n            'actors'      => exportArrayToDB([['Computer' => $computers_id]]),\n            'enduser'     => exportArrayToDB([$users_id  => [$computers_id]]),\n            ];\n            $pfTaskJob->add($input);\n        }\n\n       //Prepare the task (and only this one)\n        $pfTask->prepareTaskjobs(['deployinstall'], $tasks_id);\n    }\n\n\n   /**\n    * Get all packages that a user has requested to install\n    * on one of it's computer\n    *\n    * @global object $DB\n    * @param array $computers_packages\n    * @param integer $users_id\n    * @return array\n    */\n    public function getMyDepoyPackages($computers_packages, $users_id = false)\n    {\n        global $DB;\n\n       // Get packages yet deployed by enduser\n        $packages_used = [];\n        foreach ($computers_packages as $computers_id => $data) {\n            $packages_used[$computers_id] = [];\n        }\n        if ($users_id) {\n            $where = \"`enduser` IS NOT NULL\";\n        } else {\n            $where = \"1 \";\n        }\n        $sql = \"SELECT `job`.*\n              FROM `glpi_plugin_glpiinventory_taskjobs` AS job\n              LEFT JOIN `glpi_plugin_glpiinventory_tasks` AS task\n                 ON `task`.`id` = `job`.`plugin_glpiinventory_tasks_id`\n              WHERE $where\n                 AND `task`.`is_deploy_on_demand`='1'\n                 AND `task`.`is_active`='1'\n                 AND `task`.`entities_id`\n                    IN (\" . $_SESSION['glpiactiveentities_string'] . \")\";\n\n        foreach ($DB->request($sql) as $data) {\n           //Only look for deploy tasks\n            if ($data['method'] != 'deployinstall') {\n                continue;\n            }\n\n           //Look for all deploy on demand packages for a user\n            if ($users_id) {\n                $enduser = importArrayFromDB($data['enduser']);\n                if (isset($enduser[$users_id])) {\n                    $targets = importArrayFromDB($data['targets']);\n                    foreach ($enduser[$users_id] as $computers_id) {\n                        $packages_used[$computers_id][$targets[0]['PluginGlpiinventoryDeployPackage']] = $data['id'];\n                    }\n                }\n\n               //Look for all deploy on demand package for a computer\n            } else {\n                $targets = importArrayFromDB($data['targets']);\n                $actors  = importArrayFromDB($data['actors']);\n                foreach ($actors as $actor) {\n                    foreach ($actor as $itemtype => $items_id) {\n                        if ($itemtype == 'Computer' && $items_id == $computers_id) {\n                            $packages_used[$computers_id][$targets[0]['PluginGlpiinventoryDeployPackage']] = $data['id'];\n                        }\n                    }\n                }\n            }\n        }\n        return $packages_used;\n    }\n\n\n   /**\n    * Get the state of the package I have requeted to install\n    *\n    * @param integer $computers_id id of the computer\n    * @param integer $taskjobs_id id of the taskjob (where order defined)\n    * @param string $packages_name name of the package\n    */\n    public function getMyDepoyPackagesState($computers_id, $taskjobs_id)\n    {\n        $pfTaskJobState = new PluginGlpiinventoryTaskjobstate();\n        $agent        = new Agent();\n\n       // Get a taskjobstate by giving a  taskjobID and a computer ID\n        $agent->getFromDBByCrit(['itemtype' => Computer::getType(), 'items_id' => $computers_id]);\n        $agents_id = $agent->fields['id'];\n\n        $last_job_state = [];\n        $taskjobstates  = current($pfTaskJobState->find(\n            ['plugin_glpiinventory_taskjobs_id' => $taskjobs_id,\n            'agents_id'   => $agents_id],\n            ['id DESC'],\n            1\n        ));\n        if ($taskjobstates) {\n            $state = '';\n\n            switch ($taskjobstates['state']) {\n                case PluginGlpiinventoryTaskjobstate::CANCELLED:\n                    $state = 'agents_cancelled';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::PREPARED:\n                    $state = 'agents_prepared';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::SERVER_HAS_SENT_DATA:\n                case PluginGlpiinventoryTaskjobstate::AGENT_HAS_SENT_DATA:\n                    $state = 'agents_running';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::IN_ERROR:\n                      $state = 'agents_error';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::FINISHED:\n                     $state = 'agents_success';\n                    break;\n            }\n            $logs = $pfTaskJobState->getLogs(\n                $taskjobstates['id'],\n                $_SESSION['glpi_currenttime']\n            );\n            $last_job_state['id']    = $taskjobstates['id'];\n            $last_job_state['state'] = $state;\n            $last_job_state['date']  = $logs['logs'][0]['log.date'];\n            $last_job_state['logs']  = $logs['logs'];\n        }\n        return $last_job_state;\n    }\n\n\n   /**\n    * Check I have rights to deploy packages\n    *\n    * @global object $DB\n    * @return false|array\n    */\n    public function canUserDeploySelf()\n    {\n        global $DB;\n\n        $table = \"glpi_plugin_glpiinventory_deploypackages\";\n        $where = \" WHERE `\" . $table . \"`.`plugin_glpiinventory_deploygroups_id` > 0 \"\n              . \" AND (\";\n\n       //Include groups\n        if (!empty($_SESSION['glpigroups'])) {\n            $where .= \" `glpi_plugin_glpiinventory_deploypackages_groups`.`groups_id`\n                    IN ('\" . implode(\"', '\", $_SESSION['glpigroups']) . \"') OR \";\n        }\n\n       //Include entity\n        $where .= getEntitiesRestrictRequest(\n            '',\n            'glpi_plugin_glpiinventory_deploypackages_entities',\n            'entities_id',\n            $_SESSION['glpiactive_entity'],\n            true\n        );\n       //Include user\n        $where .= \" OR `glpi_plugin_glpiinventory_deploypackages_users`.`users_id`='\" . $_SESSION['glpiID'] . \"' OR \";\n\n       //Include profile\n        $where .= \" `glpi_plugin_glpiinventory_deploypackages_profiles`.`profiles_id`='\" . $_SESSION['glpiactiveprofile']['id'] . \"' \";\n        $where .= \" )\";\n\n        $query = \"SELECT DISTINCT `\" . $table . \"`.*\n                FROM `$table`\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_groups`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_groups`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_entities`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_entities`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_users`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_users`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_profiles`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_profiles`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n               $where\";\n        $result = $DB->query($query);\n        $a_packages = [];\n        if ($DB->numrows($result) > 0) {\n            while ($data = $DB->fetchAssoc($result)) {\n                $a_packages[$data['id']] = $data;\n            }\n            return $a_packages;\n        }\n        return false;\n    }\n\n\n   /**\n   * Duplicate a deploy package\n   * @param $deploypackages_id the ID of the package to duplicate\n   * @return duplication process status\n   */\n    public function duplicate($deploypackages_id)\n    {\n        if (!$this->getFromDB($deploypackages_id)) {\n            return false;\n        }\n        $result = true;\n        $input  = $this->fields;\n        $input['name'] = sprintf(\n            __('Copy of %s'),\n            $this->fields['name']\n        );\n        unset($input['id']);\n\n        $input = Toolbox::addslashes_deep($input);\n        if (!$this->add($input)) {\n            $result = false;\n        }\n        return $result;\n    }\n\n\n   /**\n   * Append needed informations to the json job for an agent\n   * @since 9.2\n   * @param $agent_task_version the version of the agent's deploy task\n   * @param $job the job as an array\n   * @return array the job plus new needed fields\n   */\n    public function buildJson($agent_task_version, $job)\n    {\n\n       //If task doesn't support checks skip, info, warning,\n       //send an ignore instead\n       //tasks version needs to be at least 2.2\n        $is_old_agent = version_compare($agent_task_version, '2.2', 'lt');\n        if ($is_old_agent && isset($job['job']['checks'])) {\n            foreach ($job['job']['checks'] as $key => $value) {\n                if (in_array($value['return'], ['skip', 'info', 'warning'])) {\n                    $job['job']['checks'][$key]['return'] = 'ignore';\n                }\n            }\n        }\n\n       //No need to perform further test if the agent doesn't support\n       //user interactions\n        if ($is_old_agent) {\n            return $job;\n        }\n\n        $do_interaction = true;\n        $jobstate       = new PluginGlpiinventoryTaskjobstate();\n\n       //Job has reached the maximum number of retries, do not interact with the user\n       //and execute the job\n        $jobstate->getFromDBByUniqID($job['job']['uuid']);\n        if (\n            isset($jobstate->fields['nb_retry'])\n            && $jobstate->fields['max_retry'] > 0\n        ) {\n            if ($jobstate->fields['nb_retry'] >= $jobstate->fields['max_retry']) {\n                $do_interaction = false;\n            }\n        }\n\n       //If the number of retries has been met,\n       //remove all userinteractions directives\n        if (!$do_interaction) {\n            unset($job['job']['userinteractions']);\n        } elseif (isset($job['job']['userinteractions'])) {\n            $template = new PluginGlpiinventoryDeployUserinteractionTemplate();\n            foreach ($job['job']['userinteractions'] as $key => $value) {\n                if (isset($value['template']) && $value['template']) {\n                    if ($template->getFromDB($value['template'])) {\n                        $job['job']['userinteractions'][$key]\n                        = $template->addJsonFieldsToArray($job['job']['userinteractions'][$key]);\n                        unset($job['job']['userinteractions'][$key]['template']);\n\n                        $job['job']['userinteractions'][$key]['text']\n                        = str_replace(\n                            PluginGlpiinventoryDeployUserinteraction::RN_TRANSFORMATION,\n                            \"\\r\\n\",\n                            $job['job']['userinteractions'][$key]['text']\n                        );\n                    }\n                }\n            }\n        }\n        return $job;\n    }\n\n\n   /**\n   * Transform \\r\\n in an userinteraction text\n   * @since 9.2\n   * @param array $params the input parameters\n   * @return array $params input parameters with text modified\n   */\n    public function escapeText($params)\n    {\n       //Hack to keep \\r\\n in the user interaction text\n       //before going to stripslashes_deep\n        if (isset($params['text'])) {\n            $params['text']\n            = str_replace(\n                '\\r\\n',\n                PluginGlpiinventoryDeployUserinteraction::RN_TRANSFORMATION,\n                $params['text']\n            );\n        }\n        return $params;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * ---------------------------------------------------------------------\n * GLPI Inventory Plugin\n * Copyright (C) 2021 Teclib' and contributors.\n *\n * http://glpi-project.org\n *\n * based on FusionInventory for GLPI\n * Copyright (C) 2010-2021 by the FusionInventory Development Team.\n *\n * ---------------------------------------------------------------------\n *\n * LICENSE\n *\n * This file is part of GLPI Inventory Plugin.\n *\n * GLPI Inventory Plugin is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * GLPI Inventory Plugin is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with GLPI Inventory Plugin. If not, see <https://www.gnu.org/licenses/>.\n * ---------------------------------------------------------------------\n */\n\nif (!defined('GLPI_ROOT')) {\n    die(\"Sorry. You can't access directly to this file\");\n}\n\nuse Glpi\\Toolbox\\Sanitizer;\n\n/**\n * Manage the deploy packages.\n */\nclass PluginGlpiinventoryDeployPackage extends CommonDBTM\n{\n   /**\n    * Initialize the tasks running with this package (updated with overrided getFromDB method)\n    *\n    * @var array\n    */\n    public $running_tasks = [];\n\n   /**\n    * The right name for this class\n    *\n    * @var string\n    */\n    public static $rightname = 'plugin_glpiinventory_package';\n\n   /**\n    * Initialize the users visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $users = [];\n\n   /**\n    * Initialize the groups visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $groups = [];\n\n   /**\n    * Initialize the profiles visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $profiles = [];\n\n   /**\n    * Initialize the entities visibility of package for self-service deploy\n    *\n    * @var array\n    */\n    protected $entities = [];\n\n\n   /**\n    * Get name of this type by language of the user connected\n    *\n    * @param integer $nb number of elements\n    * @return string name of this type\n    */\n    public static function getTypeName($nb = 0)\n    {\n        return __('Package', 'glpiinventory');\n    }\n\n\n    public function getFromDB($ID)\n    {\n        $found = parent::getFromDB($ID);\n\n        if ($found) {\n           // Get all tasks runnning\n            $this->running_tasks =\n               PluginGlpiinventoryTask::getItemsFromDB(\n                   [\n                      'is_active'   => true,\n                      'is_running'  => true,\n                      'targets'     => [__CLASS__ => $this->fields['id']],\n                      'by_entities' => false,\n                   ]\n               );\n        }\n\n        return $found;\n    }\n\n\n   /**\n    * Have I the right to \"update\" the object content (package actions)\n    *\n    * Also call canUpdateItem()\n    *\n    * @return booleen\n   **/\n    public function canUpdateContent()\n    {\n       // check if a task is currenlty runnning with this package\n        if (count($this->running_tasks)) {\n            return false;\n        }\n\n        return parent::canUpdateItem();\n    }\n\n\n   /**\n    * Get the massive actions for this object\n    *\n    * @param object|null $checkitem\n    * @return array list of actions\n    */\n    public function getSpecificMassiveActions($checkitem = null)\n    {\n\n        $actions = [];\n        if (strstr($_SERVER[\"HTTP_REFERER\"], 'deploypackage.import.php')) {\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'import'] = __('Import', 'glpiinventory');\n        } else {\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'transfert'] = __('Transfer');\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'export'] = __('Export', 'glpiinventory');\n            $actions[__CLASS__ . MassiveAction::CLASS_ACTION_SEPARATOR . 'duplicate'] = _sx('button', 'Duplicate');\n        }\n\n        return $actions;\n    }\n\n\n   /**\n    * Define standard massiveaction actions to deny\n    *\n    * @return array list of actions to deny\n    */\n    public function getForbiddenStandardMassiveAction()\n    {\n        $forbidden = parent::getForbiddenStandardMassiveAction();\n        if (strstr($_SERVER[\"HTTP_REFERER\"], 'deploypackage.import.php')) {\n            $forbidden[] = 'update';\n            $forbidden[] = 'add';\n            $forbidden[] = 'delete';\n            $forbidden[] = 'purge';\n        }\n        return $forbidden;\n    }\n\n\n   /**\n    * Display form related to the massive action selected\n    *\n    * @param object $ma MassiveAction instance\n    * @return boolean\n    */\n    public static function showMassiveActionsSubForm(MassiveAction $ma)\n    {\n        switch ($ma->getAction()) {\n            case 'transfert':\n                Dropdown::show('Entity');\n                echo \"<br><br>\" . Html::submit(\n                    __('Post'),\n                    ['name' => 'massiveaction']\n                );\n                return true;\n\n            case 'duplicate':\n                echo Html::submit(_x('button', 'Post'), ['name' => 'massiveaction']);\n                return true;\n        }\n        return parent::showMassiveActionsSubForm($ma);\n    }\n\n\n   /**\n    * Execution code for massive action\n    *\n    * @param object $ma MassiveAction instance\n    * @param object $item item on which execute the code\n    * @param array $ids list of ID on which execute the code\n    */\n    public static function processMassiveActionsForOneItemtype(MassiveAction $ma, CommonDBTM $item, array $ids)\n    {\n\n        switch ($ma->getAction()) {\n            case 'export':\n                foreach ($ids as $key) {\n                    if ($item->can($key, UPDATE)) {\n                        $item->exportPackage($key);\n                        $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                    }\n                }\n                break;\n\n            case 'transfert':\n                $pfDeployPackage = new PluginGlpiinventoryDeployPackage();\n                foreach ($ids as $key) {\n                    if ($pfDeployPackage->getFromDB($key)) {\n                        $input                = [];\n                        $input['id']          = $key;\n                        $input['entities_id'] = $ma->POST['entities_id'];\n                        $pfDeployPackage->update($input);\n                    }\n                }\n                break;\n\n            case 'import':\n                foreach ($ids as $key) {\n                    $item->importPackage($key);\n                    $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                }\n                break;\n\n            case 'duplicate':\n                $pfPackage = new self();\n                foreach ($ids as $key) {\n                    if ($pfPackage->getFromDB($key)) {\n                        if ($pfPackage->duplicate($pfPackage->getID())) {\n                          //set action massive ok for this item\n                            $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_OK);\n                        } else {\n                         // KO\n                            $ma->itemDone($item->getType(), $key, MassiveAction::ACTION_KO);\n                        }\n                    }\n                }\n                break;\n        }\n    }\n\n\n   /**\n    * Define error message if package used in task. This will prevent edit the\n    * package\n    *\n    * @return string\n    */\n    public function getEditErrorMessage()\n    {\n        $error_message = \"\";\n        if (count($this->running_tasks) > 0) {\n           // Display error message\n            $error_message .= \"<div class='warning'>\";\n            $error_message .= \"<i class='fa fa-exclamation-triangle fa-3x'></i>\";\n            $error_message .= \"<h3>\" . __(\"Modification Denied\", 'glpiinventory') . \"</h3>\\n\";\n            $error_message .= \"<h4>\" .\n                              _n(\n                                  \"The following task is running with this package\",\n                                  \"The following tasks are running with this package\",\n                                  count($this->running_tasks),\n                                  'glpiinventory'\n                              ) .\n                           \"</h4>\\n\";\n\n            foreach ($this->running_tasks as $task) {\n                 $taskurl =\n                  PluginGlpiinventoryTask::getFormURLWithID($task['task']['id'], true);\n                 $error_message .= \"<a href='$taskurl'>\" . $task['task']['name'] . \"</a>, \";\n            }\n            $error_message .= \"</div>\";\n        }\n        return $error_message;\n    }\n\n\n   /**\n    * Prepare data before add to database\n    *\n    * @param array $input\n    * @return array\n    */\n    public function prepareInputForAdd($input)\n    {\n        if (!isset($input['json'])) {\n            $input['json'] = json_encode([\n             'jobs' => [\n                 'checks'           => [],\n                 'associatedFiles'  => [],\n                 'actions'          => [],\n                 'userinteractions' => []\n             ],\n             'associatedFiles' => []]);\n        }\n\n        return parent::prepareInputForAdd($input);\n    }\n\n\n   /**\n    * Get search function for the class\n    *\n    * @return array\n    */\n    public function rawSearchOptions()\n    {\n        $tab = [];\n        $tab[] = [\n         'id' => 'common',\n         'name' => __('Characteristics')\n        ];\n\n        $tab[] = [\n         'id'            => '1',\n         'table'         => $this->getTable(),\n         'field'         => 'name',\n         'name'          => __('Name'),\n         'datatype'      => 'itemlink',\n         'itemlink_link' => $this->getType()\n        ];\n\n        $tab[] = [\n         'id'        => '2',\n         'table'     => $this->getTable(),\n         'field'     => 'id',\n         'name'      => __('ID'),\n        ];\n\n        $tab[] = [\n         'id'        => '16',\n         'table'     => $this->getTable(),\n         'field'     => 'comment',\n         'name'      => __('Comments'),\n         'datatype'  => 'text',\n        ];\n\n        $tab[] = [\n         'id'        => '19',\n         'table'     => $this->getTable(),\n         'field'     => 'date_mod',\n         'name'      => __('Last update'),\n         'datatype'  => 'datetime',\n        ];\n\n        $tab[] = [\n         'id'       => '80',\n         'table'    => 'glpi_entities',\n         'field'    => 'completename',\n         'name'     => Entity::getTypeName(1),\n         'datatype' => 'dropdown',\n        ];\n\n        $tab[] = [\n         'id'        => '86',\n         'table'     => $this->getTable(),\n         'field'     => 'is_recursive',\n         'name'      => __('Child entities'),\n         'datatype'  => 'bool',\n        ];\n\n        $tab[] = [\n         'id'       => '20',\n         'table'    => 'glpi_plugin_glpiinventory_deploygroups',\n         'field'    => 'name',\n         'name'     => __('Enable deploy on demand for the following group', 'glpiinventory'),\n         'datatype' => 'dropdown',\n        ];\n\n        return $tab;\n    }\n\n\n   /**\n    * Get all packages in json format\n    *\n    * @return json\n    */\n    public function getAllDatas()\n    {\n        global $DB;\n\n        $sql = \" SELECT id, name\n               FROM `\" . $this->getTable() . \"`\n               ORDER BY name\";\n        $res  = $DB->query($sql);\n        $nb   = $DB->numrows($res);\n        $json = [];\n        $i    = 0;\n        while ($row = $DB->fetchAssoc($res)) {\n            $json['packages'][$i]['package_id'] = $row['id'];\n            $json['packages'][$i]['package_name'] = $row['name'];\n            $i++;\n        }\n        $json['results'] = $nb;\n        return json_encode($json);\n    }\n\n\n   /**\n    * Clean orders after delete the package\n    *\n    */\n    public function post_deleteFromDB()\n    {\n        $pfDeployFile = new PluginGlpiinventoryDeployFile();\n       // remove file in repo\n        $json = json_decode($this->fields['json'], true);\n        if (is_null($json)) {\n            return;\n        }\n        foreach ($json['associatedFiles'] as $sha512 => $file) {\n            $pfDeployFile->removeFileInRepo($sha512);\n        }\n    }\n\n\n   /**\n    * Display the menu / list of packages\n    *\n    * @param array $options\n    */\n    public function showMenu($options = [])\n    {\n\n        $this->displaylist  = false;\n        $this->fields['id'] = -1;\n        $this->showList();\n    }\n\n\n   /**\n    * Display list of packages\n    */\n    public function showList()\n    {\n        Search::show('PluginGlpiinventoryDeployPackage');\n    }\n\n\n   /**\n    * Define tabs to display on form page\n    *\n    * @param array $options\n    * @return array containing the tabs name\n    */\n    public function defineTabs($options = [])\n    {\n        $ong = [];\n        $this->addDefaultFormTab($ong);\n        $this->addStandardTab(__CLASS__, $ong, $options);\n        $ong['no_all_tab'] = true;\n        return $ong;\n    }\n\n\n   /**\n    * Display form\n    *\n    * @param integer $ID\n    * @param array $options\n    * @return true\n    */\n    public function showForm($ID, array $options = [])\n    {\n        $this->initForm($ID, $options);\n        $this->showFormHeader($options);\n       //Add redips_clone element before displaying tabs\n       //If we don't do this, dragged element won't be visible on the other tab not displayed at\n       //first (for reminder, GLPI tabs are displayed dynamically on-demand)\n        echo \"<div id='redips_clone'></div>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Name') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        echo Html::input('name', ['size' => 40, 'value' => $this->fields['name']]);\n        echo \"</td>\";\n\n        echo \"<td>\" . __('Comments') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        echo \"<textarea cols='40' class='form-control' name='comment' >\" . $this->fields[\"comment\"] . \"</textarea>\";\n        echo \"</td>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<td>\" . __('Enable deploy on demand for the following group', 'glpiinventory') . \"&nbsp;:</td>\";\n        echo \"<td>\";\n        PluginGlpiinventoryDeployGroup::dropdown(['value' => $this->fields[\"plugin_glpiinventory_deploygroups_id\"]]);\n        echo \"</td>\";\n\n        echo \"<td colspan='2'></td>\";\n        echo \"</tr>\";\n\n        $this->showFormButtons($options);\n        return true;\n    }\n\n\n   /**\n    * Display order type form\n    *\n    * @global array $CFG_GLPI\n    */\n    public function displayOrderTypeForm()\n    {\n        global $CFG_GLPI;\n\n        $subtypes = [\n         'check'           => __(\"Audits\", 'glpiinventory'),\n         'file'            => __(\"Files\", 'glpiinventory'),\n         'action'          => __(\"Actions\", 'glpiinventory'),\n         'userinteraction' => __(\"User interactions\", 'glpiinventory')\n        ];\n        $json_subtypes = [\n         'check'           => 'checks',\n         'file'            => 'associatedFiles',\n         'action'          => 'actions',\n         'userinteraction' => 'userinteractions'\n        ];\n\n        $rand  = mt_rand();\n        $datas = json_decode($this->fields['json'], true);\n\n        echo \"<table class='tab_cadre_fixe' id='package_order_\" . $this->getID() . \"'>\";\n\n       // Display an error if the package modification is not possible\n        $canedit   = $this->canUpdateContent();\n        $error_msg = $this->getEditErrorMessage();\n        if (!empty($error_msg)) {\n            echo \"<tr><td>$error_msg</td></tr>\";\n        }\n\n       // Display the lists of each subtypes of a package\n        foreach ($subtypes as $subtype => $label) {\n            echo \"<tr>\";\n            echo \"<th id='th_title_{$subtype}_$rand'>\";\n            echo \"<img src='\" . Plugin::getWebDir('glpiinventory') . \"/pics/$subtype.png' />\";\n            echo \"&nbsp;\" . __($label, 'glpiinventory');\n            if ($canedit) {\n                $this->plusButtonSubtype($this->getID(), $subtype, $rand);\n            }\n            echo \"</th>\";\n            echo \"</tr>\";\n\n           /**\n            * File's form must be encoded as multipart/form-data\n            **/\n            $multipart = \"\";\n            if ($subtype == \"file\") {\n                $multipart = \"enctype='multipart/form-data'\";\n            }\n            echo \"<tr>\";\n            echo \"<td style='vertical-align:top'>\";\n\n           /**\n            * Display subtype form\n            **/\n            echo \"<form name='addition$subtype' method='post' \" . $multipart .\n            \" action='deploypackage.form.php'>\";\n            echo \"<input type='hidden' name='id' value='\" . $this->getID() . \"' />\";\n            echo \"<input type='hidden' name='itemtype' value='PluginGlpiinventoryDeploy\" .\n            ucfirst($subtype) . \"' />\";\n\n            $classname = \"PluginGlpiinventoryDeploy\" . ucfirst($subtype);\n            $class     = new $classname();\n            $class->displayForm($this, $datas, $rand, \"init\");\n            Html::closeForm();\n\n            $json_subtype = $json_subtypes[$subtype];\n           /**\n            * Display stored actions datas\n            **/\n            if (\n                isset($datas['jobs'][$json_subtype])\n                && !empty($datas['jobs'][$json_subtype])\n            ) {\n                echo  \"<div id='drag_deploypackage_\" . $subtype . \"s'>\";\n                echo  \"<form name='remove\" . $subtype . \"s' \" .\n                  \"method='post' action='deploypackage.form.php' \" .\n                  \"id='\" . $subtype . \"sList\" . $rand . \"'>\";\n                echo Html::hidden('remove_item');\n                echo Html::hidden('itemtype', ['value' => $classname]);\n                echo Html::hidden('packages_id', ['value' => $this->getID()]);\n                $class->displayList($this, $datas, $rand);\n                Html::closeForm();\n                echo \"</div>\";\n            }\n\n           /**\n            * Initialize drag and drop on subtype lists\n            **/\n            echo \"<script type='text/javascript'>\";\n            echo \"redipsInit('deploypackage', '$subtype', '\" . $this->getID() . \"');\";\n            echo \"</script>\";\n            echo \"</td>\";\n            echo \"</tr>\";\n        }\n\n        echo \"</table>\";\n    }\n\n\n   /**\n    * Manage + button (audits, files, actions)\n    *\n    * @global array $CFG_GLPI\n    * @param integer $id id of the package\n    * @param string $subtype name of subtype (audits, files, actions)\n    * @param string $rand random string for js to prevent collisions\n    */\n    public function plusButtonSubtype($id, $subtype, $rand)\n    {\n        global $CFG_GLPI;\n\n        if ($this->can($id, UPDATE)) {\n            echo \"&nbsp;\";\n            echo \"<img id='plus_{$subtype}s_block{$rand}'\";\n            echo \" onclick=\\\"new_subtype('{$subtype}', {$id}, {$rand})\\\" \";\n            echo  \" title='\" . __('Add') . \"' alt='\" . __('Add') . \"' \";\n            echo  \" class='pointer' src='\" .\n               $CFG_GLPI[\"root_doc\"] .\n               \"/pics/add_dropdown.png' /> \";\n        }\n    }\n\n\n   /**\n    * Plus button used to add an element\n    *\n    * @global array $CFG_GLPI\n    * @param string $dom_id\n    * @param boolean $clone\n    */\n    public static function plusButton($dom_id, $clone = false)\n    {\n        global $CFG_GLPI;\n\n        echo  \"&nbsp;\";\n        echo  \"<img id='plus_$dom_id' \";\n        if ($clone !== false) {\n            echo \" onClick=\\\"plusbutton('$dom_id', '$clone')\\\" \";\n        } else {\n            echo \" onClick=\\\"plusbutton('$dom_id')\\\" \";\n        }\n        echo \" title='\" . __('Add') . \"' alt='\" . __('Add') . \"' \";\n        echo \" class='pointer' src='\" . $CFG_GLPI[\"root_doc\"] .\n              \"/pics/add_dropdown.png'> \";\n    }\n\n\n   /**\n    * When user is in DEBUG mode, we display the json\n    *\n    * @global array $CFG_GLPI\n    */\n    public function showDebug()\n    {\n        global $CFG_GLPI;\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr><th>\" . __('JSON package representation', 'glpiinventory') . \"</th></tr>\";\n        echo \"<tr><td>\";\n        echo \"<textarea cols='132' rows='50' style='border:1' name='json'>\";\n        echo PluginGlpiinventoryToolbox::formatJson($this->fields['json']);\n        echo \"</textarea></td></tr>\";\n        echo \"</table>\";\n    }\n\n\n   /**\n    * Update the json structure\n    *\n    * @param string $action_type type of action\n    * @param array $params data used to update the json\n    */\n    public static function alterJSON($action_type, $params)\n    {\n       //route to sub class\n        $item_type = $params['itemtype'];\n\n        if (\n            in_array($item_type, [\n                                 'PluginGlpiinventoryDeployCheck',\n                                 'PluginGlpiinventoryDeployFile',\n                                 'PluginGlpiinventoryDeployAction',\n                                 'PluginGlpiinventoryDeployUserinteraction'\n                              ])\n        ) {\n            $class = new $item_type();\n            switch ($action_type) {\n                case \"add_item\":\n                    return $class->add_item($params);\n                break;\n\n                case \"save_item\":\n                    return $class->save_item($params);\n                break;\n\n                case \"remove_item\":\n                    return $class->remove_item($params);\n                break;\n\n                case \"move_item\":\n                    return $class->move_item($params);\n                break;\n            }\n        } else {\n            Toolbox::logDebug(\"package subtype not found : \" . $params['itemtype']);\n            Html::displayErrorAndDie(\"package subtype not found\");\n        }\n    }\n\n\n   /**\n    * Export the package (information, actions, files...)\n    *\n    * @param integer $packages_id id of the package to export\n    */\n    public function exportPackage($packages_id)\n    {\n        $this->getFromDB($packages_id);\n        if (empty($this->fields['uuid'])) {\n            $input = [\n             'id'   => $this->fields['id'],\n             'uuid' => Rule::getUuid()\n            ];\n            $this->update($input);\n        }\n\n        $pfDeployFile  = new PluginGlpiinventoryDeployFile();\n\n       // Generate JSON\n        $input = $this->fields;\n        unset($input['id']);\n        $a_xml = [\n          'package'    => $input,\n          'files'      => [],\n          'manifests'  => [],\n          'repository' => [],\n          'orders'     => [['json' => $this->fields['json']]],\n        ];\n        $json = json_decode($this->fields['json'], true);\n        $a_files = $json['associatedFiles'];\n\n       // Add files\n        foreach ($a_files as $files_id => $data) {\n            $a_pkgfiles = current($pfDeployFile->find(['sha512' => $files_id], [], 1));\n            if (count($a_pkgfiles) > 0) {\n                unset($a_pkgfiles['id']);\n                $a_xml['files'][] = $a_pkgfiles;\n            }\n        }\n\n       // Create zip with JSON and files\n        $name = preg_replace(\"/[^a-zA-Z0-9]/\", '', $this->fields['name']);\n        $filename = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/export/\" . $this->fields['uuid'] . \".\" . $name . \".zip\";\n        if (file_exists($filename)) {\n            unlink($filename);\n        }\n\n        $zip = new ZipArchive();\n        if ($zip->open($filename) == true) {\n            if ($zip->open($filename, ZipArchive::CREATE) == true) {\n                $zip->addEmptyDir('files');\n                $zip->addEmptyDir('files/manifests');\n                $zip->addEmptyDir('files/repository');\n                $pfDeployFile = new PluginGlpiinventoryDeployFile();\n                foreach ($a_files as $hash => $data) {\n                    $sha512 = trim(file_get_contents(PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $hash));\n                    $zip->addFile(PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $hash, \"files/manifests/\" . $hash);\n                    $a_xml['manifests'][] = $hash;\n                    $file = $pfDeployFile->getDirBySha512($sha512) .\n                       \"/\" . $sha512;\n                    $zip->addFile(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository/\" . $file, \"files/repository/\" . $file);\n                    $a_xml['repository'][] = $file;\n                }\n                $json_string = json_encode($a_xml);\n                $zip->addFromString('information.json', $json_string);\n            }\n            $zip->close();\n            Session::addMessageAfterRedirect(__(\"Package exported in\", \"glpiinventory\") . \" \" . GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/export/\" . $this->fields['uuid'] . \".\" . $name . \".zip\");\n        }\n    }\n\n\n   /**\n    * Import the package\n    *\n    * @param string $zipfile the zip file with all data inside\n    */\n    public function importPackage($zipfile)\n    {\n\n        $zip           = new ZipArchive();\n        $pfDeployFile  = new PluginGlpiinventoryDeployFile();\n\n        $filename = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\" . $zipfile;\n\n        $extract_folder = GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\" . $zipfile . \".extract\";\n\n        if ($zip->open($filename, ZipArchive::CREATE) == true) {\n            $zip->extractTo($extract_folder);\n            $zip->close();\n        }\n        $json_string = file_get_contents($extract_folder . \"/information.json\");\n\n        $a_info = json_decode($json_string, true);\n\n       // Find package with this uuid\n        $a_packages = $this->find(['uuid' => $a_info['package']['uuid']]);\n        if (count($a_packages) == 0) {\n           // Create it\n            $_SESSION['tmp_clone_package'] = true;\n            $this->add($a_info['package']);\n            foreach ($a_info['files'] as $input) {\n                $pfDeployFile->add($input);\n            }\n        }\n       // Copy files\n        foreach ($a_info['manifests'] as $manifest) {\n            rename($extract_folder . \"/files/manifests/\" . $manifest, PLUGIN_GLPI_INVENTORY_MANIFESTS_DIR . $manifest);\n        }\n        foreach ($a_info['repository'] as $repository) {\n            $split = explode('/', $repository);\n            array_pop($split);\n            $folder = '';\n            foreach ($split as $dir) {\n                $folder .= '/' . $dir;\n                if (!file_exists(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository\" . $folder)) {\n                    mkdir(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository\" . $folder);\n                }\n            }\n            rename($extract_folder . \"/files/repository/\" . $repository, GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/repository/\" . $repository);\n        }\n    }\n\n\n   /**\n    * Display list of packages to import\n    */\n    public function listPackagesToImport()\n    {\n\n        $rand = mt_rand();\n\n        echo \"<div class='spaced'>\";\n        Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n\n        $massiveactionparams = ['container' => 'mass' . __CLASS__ . $rand];\n        Html::showMassiveActions($massiveactionparams);\n        echo \"<table class='tab_cadre_fixe'>\";\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th colspan='5'>\";\n        echo __('Packages to import', 'glpiinventory');\n        echo \"</th>\";\n        echo \"</tr>\";\n\n        echo \"<tr class='tab_bg_1'>\";\n        echo \"<th width='10'>\" . Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand) . \"</th>\";\n        echo \"<th>\";\n        echo __('Name');\n        echo \"</th>\";\n        echo \"<th>\";\n        echo __('uuid');\n        echo \"</th>\";\n        echo \"<th>\";\n        echo __('Package to update');\n        echo \"</th>\";\n        echo \"</tr>\";\n\n        foreach (glob(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/*.zip\") as $file) {\n            echo \"<tr class='tab_bg_1'>\";\n            $file = str_replace(GLPI_PLUGIN_DOC_DIR . \"/glpiinventory/files/import/\", \"\", $file);\n            $split = explode('.', $file);\n            echo \"<td>\";\n            Html::showMassiveActionCheckBox(__CLASS__, $file);\n            echo \"</td>\";\n            echo \"<td>\";\n            echo $split[2];\n            echo \"</td>\";\n            echo \"<td>\";\n            echo $split[0] . \".\" . $split[1];\n            echo \"</td>\";\n            echo \"<td>\";\n            $a_packages = current($this->find(['uuid' => $split[0] . \".\" . $split[1]], [], 1));\n            if (count($a_packages) > 1) {\n                $this->getFromDB($a_packages['id']);\n                echo $this->getLink();\n            }\n            echo \"</td>\";\n            echo \"</tr>\";\n        }\n        echo \"</table>\";\n        $massiveactionparams['ontop'] = false;\n        Html::showMassiveActions($massiveactionparams);\n        echo \"</div>\";\n    }\n\n\n   /**\n    * Get a sub element at index\n    *\n    * @param string $subtype\n    * @param integer $index\n    * @return string\n    */\n    public function getSubElement($subtype, $index)\n    {\n        $data_o = json_decode($this->fields['json'], true);\n        return $data_o['jobs'][$subtype][$index];\n    }\n\n\n   /**\n    * Get Order's associated file by hash\n    *\n    * @param string $hash\n    * @return null|string\n    */\n    public function getAssociatedFile($hash)\n    {\n        $data_o = json_decode($this->fields['json'], true);\n\n        if (array_key_exists($hash, $data_o['associatedFiles'])) {\n            return $data_o['associatedFiles'][$hash];\n        }\n        return null;\n    }\n\n\n   /**\n    * Get the json\n    *\n    * @param integer $packages_id id of the order\n    * @return boolean|string the string is in json format\n    */\n    public static function getJson($packages_id)\n    {\n        $pfDeployPackage = new self();\n        $pfDeployPackage->getFromDB($packages_id);\n        if (!empty($pfDeployPackage->fields['json'])) {\n            return $pfDeployPackage->fields['json'];\n        } else {\n            return false;\n        }\n    }\n\n\n   /**\n    * Update the order json\n    *\n    * @param integer $packages_id\n    * @param array $datas\n    * @return integer error number\n    */\n    public static function updateOrderJson($packages_id, $datas)\n    {\n        $pfDeployPackage = new self();\n        $options = JSON_UNESCAPED_SLASHES;\n\n        $json = json_encode($datas, $options);\n\n        $json_error_consts = [\n         JSON_ERROR_NONE           => \"JSON_ERROR_NONE\",\n         JSON_ERROR_DEPTH          => \"JSON_ERROR_DEPTH\",\n         JSON_ERROR_STATE_MISMATCH => \"JSON_ERROR_STATE_MISMATCH\",\n         JSON_ERROR_CTRL_CHAR      => \"JSON_ERROR_CTRL_CHAR\",\n         JSON_ERROR_SYNTAX         => \"JSON_ERROR_SYNTAX\",\n         JSON_ERROR_UTF8           => \"JSON_ERROR_UTF8\"\n        ];\n\n        $error_json = json_last_error();\n\n        if (version_compare(PHP_VERSION, '5.5.0', \"ge\")) {\n            $error_json_message = json_last_error_msg();\n        } else {\n            $error_json_message = \"\";\n        }\n        $error = 0;\n        if ($error_json != JSON_ERROR_NONE) {\n            $error_msg = $json_error_consts[$error_json];\n            Session::addMessageAfterRedirect(\n                __(\"The modified JSON contained a syntax error :\", \"glpiinventory\") . \"<br/>\" .\n                $error_msg . \"<br/>\" . $error_json_message,\n                false,\n                ERROR,\n                false\n            );\n            $error = 1;\n        } else {\n            $error = $pfDeployPackage->update(\n                [\n                'id'   => $packages_id,\n                'json' => Toolbox::addslashes_deep($json)\n                ]\n            );\n        }\n        return $error;\n    }\n\n\n   /**\n    * Get the tab name used for item\n    *\n    * @param object $item the item object\n    * @param integer $withtemplate 1 if is a template form\n    * @return string name of the tab\n    */\n    public function getTabNameForItem(CommonGLPI $item, $withtemplate = 0)\n    {\n\n        if (!$withtemplate) {\n            switch ($item->getType()) {\n                case __CLASS__:\n                    if ($item->canUpdateItem()) {\n                        $tabs = [];\n                        if ($item->fields['id'] > 0) {\n                            $tabs[1] = __('Package actions', 'glpiinventory');\n                        }\n                        if ($item->fields['plugin_glpiinventory_deploygroups_id'] > 0) {\n                            if ($_SESSION['glpishow_count_on_tabs']) {\n                                $nb = $item->countVisibilities();\n                                $tabs[2] = self::createTabEntry(\n                                    _n(\n                                        'Target for deploy on demand',\n                                        'Targets for deploy on demand',\n                                        $nb,\n                                        'glpiinventory'\n                                    ),\n                                    $nb\n                                );\n                            } else {\n                                $tabs[2] = _n(\n                                    'Target for deploy on demand',\n                                    'Targets for deploy on demand',\n                                    2,\n                                    'glpiinventory'\n                                );\n                            }\n                        }\n                        return $tabs;\n                    }\n                    break;\n\n                case 'Computer':\n                    if (\n                        Session::haveRight(\"plugin_glpiinventory_selfpackage\", READ)\n                        && PluginGlpiinventoryToolbox::isAnInventoryDevice($item)\n                        && self::isDeployEnabled($item->fields['id'])\n                    ) {\n                        return __('Package deploy', 'glpiinventory');\n                    }\n                    break;\n            }\n        }\n        return '';\n    }\n\n\n   /**\n    * Display the content of the tab\n    *\n    * @param object $item\n    * @param integer $tabnum number of the tab to display\n    * @param integer $withtemplate 1 if is a template form\n    * @return boolean\n    */\n    public static function displayTabContentForItem(CommonGLPI $item, $tabnum = 1, $withtemplate = 0)\n    {\n\n        if ($item->getType() == __CLASS__) {\n            if ($tabnum == 2) {\n                $item->showVisibility();\n                return true;\n            } elseif ($tabnum == 1) {\n                $item->displayOrderTypeForm();\n                return true;\n            }\n        } elseif ($item->getType() == 'Computer') {\n            $package = new self();\n            $package->showPackageForMe($_SESSION['glpiID'], $item);\n            return true;\n        }\n        return false;\n    }\n\n\n   /**\n    * Count number elements for the visibility\n    *\n    * @return integer\n    */\n    public function countVisibilities()\n    {\n        return (count($this->entities)\n              + count($this->users)\n              + count($this->groups)\n              + count($this->profiles));\n    }\n\n\n   /**\n    * Display the visibility, so who can read. write...\n    *\n    * @global array $CFG_GLPI\n    * @return true\n    */\n    public function showVisibility()\n    {\n        global $CFG_GLPI;\n\n        $ID      = $this->fields['id'];\n        $canedit = $this->can($ID, UPDATE);\n\n        echo \"<div class='center'>\";\n\n        $rand = mt_rand();\n        $nb   = count($this->users) + count($this->groups) + count($this->profiles)\n              + count($this->entities);\n\n        if ($canedit) {\n            echo \"<div class='firstbloc'>\";\n            echo \"<form name='deploypackagevisibility_form$rand' id='deploypackagevisibility_form$rand' \";\n            echo \" method='post' action='\" . Toolbox::getItemTypeFormURL('PluginGlpiinventoryDeployPackage') . \"'>\";\n            echo \"<input type='hidden' name='plugin_glpiinventory_deploypackages_id' value='$ID'>\";\n            echo \"<table class='tab_cadre_fixe'>\";\n            echo \"<tr class='tab_bg_1'><th colspan='4'>\" . __('Add a target for self-service', 'glpiinventory') . \"</th></tr>\";\n            echo \"<tr class='tab_bg_2'><td width='100px'>\";\n\n            $types = ['Entity', 'Group', 'Profile', 'User'];\n\n            $addrand = Dropdown::showItemTypes('_type', $types);\n            $params  = ['type'  => '__VALUE__',\n                          'right' => 'plugin_glpiinventory_selfpackage'];\n\n            Ajax::updateItemOnSelectEvent(\n                \"dropdown__type\" . $addrand,\n                \"visibility$rand\",\n                $CFG_GLPI[\"root_doc\"] . \"/ajax/visibility.php\",\n                $params\n            );\n\n            echo \"</td>\";\n            echo \"<td><span id='visibility$rand'></span>\";\n            echo \"</td></tr>\";\n            echo \"</table>\";\n            Html::closeForm();\n            echo \"</div>\";\n        }\n\n        echo \"<div class='spaced'>\";\n        if ($canedit && $nb) {\n            Html::openMassiveActionsForm('mass' . __CLASS__ . $rand);\n            $massiveactionparams\n            = ['num_displayed'\n                        => $nb,\n                    'container'\n                        => 'mass' . __CLASS__ . $rand,\n                    'specific_actions'\n                         => ['delete' => _x('button', 'Delete permanently')] ];\n            Html::showMassiveActions($massiveactionparams);\n        }\n        echo \"<table class='tab_cadre_fixehov'>\";\n        $header_begin  = \"<tr>\";\n        $header_top    = '';\n        $header_bottom = '';\n        $header_end    = '';\n        if ($canedit && $nb) {\n            $header_begin  .= \"<th width='10'>\";\n            $header_top    .= Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n            $header_bottom .= Html::getCheckAllAsCheckbox('mass' . __CLASS__ . $rand);\n            $header_end    .= \"</th>\";\n        }\n        $header_end .= \"<th>\" . __('Type') . \"</th>\";\n        $header_end .= \"<th>\" . _n('Recipient', 'Recipients', Session::getPluralNumber()) . \"</th>\";\n        $header_end .= \"</tr>\";\n        echo $header_begin . $header_top . $header_end;\n\n       // Users\n        if (count($this->users)) {\n            foreach ($this->users as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_User', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . __('User') . \"</td>\";\n                    echo \"<td>\" . getUserName($data['users_id']) . \"</td>\";\n                    echo \"</tr>\";\n                }\n            }\n        }\n\n       // Groups\n        if (count($this->groups)) {\n            foreach ($this->groups as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Group', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . __('Group') . \"</td>\";\n                    echo \"<td>\";\n                    $names     = Dropdown::getDropdownName('glpi_groups', $data['groups_id'], 1);\n                    $groupname = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['entities_id'] >= 0) {\n                        $groupname = sprintf(\n                            __('%1$s / %2$s'),\n                            $groupname,\n                            Dropdown::getDropdownName(\n                                'glpi_entities',\n                                $data['entities_id']\n                            )\n                        );\n                        if ($data['is_recursive']) {\n                             $groupname = sprintf(\n                                 __('%1$s %2$s'),\n                                 $groupname,\n                                 \"<span class='b'>(\" . __('R') . \")</span>\"\n                             );\n                        }\n                    }\n                     echo $groupname;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n\n       // Entity\n        if (count($this->entities)) {\n            foreach ($this->entities as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Entity', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . Entity::getTypeName(1) . \"</td>\";\n                    echo \"<td>\";\n                    $names      = Dropdown::getDropdownName('glpi_entities', $data['entities_id'], 1);\n                    $entityname = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['is_recursive']) {\n                        $entityname = sprintf(\n                            __('%1$s %2$s'),\n                            $entityname,\n                            \"<span class='b'>(\" . __('R') . \")</span>\"\n                        );\n                    }\n                     echo $entityname;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n\n       // Profiles\n        if (count($this->profiles)) {\n            foreach ($this->profiles as $key => $val) {\n                foreach ($val as $data) {\n                    echo \"<tr class='tab_bg_1'>\";\n                    if ($canedit) {\n                        echo \"<td>\";\n                        Html::showMassiveActionCheckBox('PluginGlpiinventoryDeployPackage_Profile', $data[\"id\"]);\n                        echo \"</td>\";\n                    }\n                    echo \"<td>\" . _n('Profile', 'Profiles', 1) . \"</td>\";\n                    echo \"<td>\";\n                    $names       = Dropdown::getDropdownName('glpi_profiles', $data['profiles_id'], 1);\n                    $profilename = sprintf(\n                        __('%1$s %2$s'),\n                        $names[\"name\"],\n                        Html::showToolTip($names[\"comment\"], ['display' => false])\n                    );\n                    if ($data['entities_id'] >= 0) {\n                        $profilename = sprintf(\n                            __('%1$s / %2$s'),\n                            $profilename,\n                            Dropdown::getDropdownName(\n                                'glpi_entities',\n                                $data['entities_id']\n                            )\n                        );\n                        if ($data['is_recursive']) {\n                             $profilename = sprintf(\n                                 __('%1$s %2$s'),\n                                 $profilename,\n                                 \"<span class='b'>(\" . __('R') . \")</span>\"\n                             );\n                        }\n                    }\n                     echo $profilename;\n                     echo \"</td>\";\n                     echo \"</tr>\";\n                }\n            }\n        }\n        if ($nb) {\n            echo $header_begin . $header_bottom . $header_end;\n        }\n\n        echo \"</table>\";\n        if ($canedit && $nb) {\n            $massiveactionparams['ontop'] = false;\n            Html::showMassiveActions($massiveactionparams);\n            Html::closeForm();\n        }\n\n        echo \"</div>\";\n\n        return true;\n    }\n\n\n   /**\n    * Fill internal variable with visibility elements when load package\n    * information from database\n    */\n    public function post_getFromDB()\n    {\n       // Users\n        $this->users    = PluginGlpiinventoryDeployPackage_User::getUsers($this->fields['id']);\n\n       // Entities\n        $this->entities = PluginGlpiinventoryDeployPackage_Entity::getEntities($this->fields['id']);\n\n       // Group / entities\n        $this->groups   = PluginGlpiinventoryDeployPackage_Group::getGroups($this->fields['id']);\n\n       // Profile / entities\n        $this->profiles = PluginGlpiinventoryDeployPackage_Profile::getProfiles($this->fields['id']);\n    }\n\n\n   /**\n   * Get all available states for a package\n   * @return an array of states and their labels\n   */\n    public static function getPackageDeploymentStates()\n    {\n        return [\n              'agents_notdone'   => __('Not done yet', 'glpiinventory'),\n              'agents_error'     => __('In error', 'glpiinventory'),\n              'agents_success'   => __('Successful', 'glpiinventory'),\n              'agents_running'   => __('Running', 'glpiinventory'),\n              'agents_prepared'  => __('Prepared', 'glpiinventory'),\n              'agents_cancelled' => __('Cancelled', 'glpiinventory')             ];\n    }\n\n\n   /**\n   * Get a label for a state\n   * @param state the state\n   * @return the label associated to a state\n   */\n    public static function getDeploymentLabelForAState($state)\n    {\n        $states = self::getPackageDeploymentStates();\n        if (isset($states[$state])) {\n            return $states[$state];\n        } else {\n            return '';\n        }\n    }\n\n\n   /**\n    * Display a form with a list of packages and their state, that a user\n    * has request to install on it's computer\n    *\n    * @param integer $users_id id of the user\n    * @param $item source item (maybe a User or a computer)\n    */\n    public function showPackageForMe($users_id, $item = false)\n    {\n        global $CFG_GLPI;\n\n        $computer     = new Computer();\n        $self_service = !($_SESSION['glpiactiveprofile']['interface'] == 'central');\n        if (!$self_service) {\n            $computers_id = false;\n            if ($item && $item instanceof Computer) {\n                $computers_id = $item->getID();\n            }\n            $my_packages = $this->getPackageForMe(false, $computers_id);\n        } else {\n            $my_packages = $this->getPackageForMe($users_id);\n        }\n\n       // check current interface\n        $is_tech = isset($_SESSION['glpiactiveprofile']['interface'])\n                  && $_SESSION['glpiactiveprofile']['interface'] == \"central\";\n\n       // retrieve state name\n        $joblogs_labels = PluginGlpiinventoryTaskjoblog::dropdownStateValues();\n\n       // Display for each computer, list of packages you can deploy\n        $url = Plugin::getWebDir('glpiinventory');\n        echo \"<form name='onetimedeploy_form' id='onetimedeploy_form'\n             method='POST'\n             action='$url/front/deploypackage.public.php'\n             enctype=\\\"multipart/form-data\\\">\";\n\n        echo \"<table class='tab_cadre_fixe'>\";\n        foreach ($my_packages as $computers_id => $data) {\n            $package_to_install = [];\n            $computer->getFromDB($computers_id);\n            echo \"<tr>\";\n            echo \"<th><img src='$url/pics/computer_icon.png'/> \"\n            . __('Computer', 'Computers', 1) . \" <i>\"\n            . $computer->fields['name'] . \"</i></th>\";\n            echo \"</tr>\";\n\n            if (count($data)) {\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td>\";\n                echo '<div class=\"target_block\">';\n                echo '<div class=\"target_details\">';\n                echo '<div class=\"target_stats\">';\n                foreach ($data as $packages_id => $package_info) {\n                    if (isset($package_info['taskjobs_id'])) {\n                        $taskjob_id = $package_info['taskjobs_id'];\n                        echo \"<div class='counter_block \" . $package_info['last_taskjobstate']['state'] . \"'\n                             id='block_$taskjob_id'>\";\n                      // display deploy informations\n                        echo \"<table>\";\n                        echo \"<tr>\";\n                        echo \"<td style='min-width: 600px'>\";\n\n                     // add a toggle control\n                        if ($is_tech) {\n                              echo \"<a class='toggle_run'\n                              href='#'\n                              id='toggle_run_$taskjob_id'>\";\n                              echo $package_info['name'];\n                              echo \"</a>\";\n                        } else {\n                            echo $package_info['name'];\n                        }\n                        echo \"</td>\";\n                        echo \"<td style='width: 200px'>\";\n                        echo Html::convDateTime($package_info['last_taskjobstate']['date']);\n                        echo \"</td>\";\n                        echo \"<td style='width: 200px'>\";\n                        echo self::getDeploymentLabelForAState($package_info['last_taskjobstate']['state']);\n                        echo \"</td>\";\n                        echo \"</tr>\";\n                        echo \"</table>\";\n\n                        if ($is_tech) {\n                         // display also last log (folded)\n                            echo \"<div class='agent_block'\n                                id='run_$taskjob_id'\n                                style='display:none;'>\";\n\n                            echo \"<div class='buttons'>\";\n\n                         // if job is in error, suggest restart\n                            if (\n                                in_array(\n                                    $package_info['last_taskjobstate']['state'],\n                                    [\"agents_error\", \"agents_success\"]\n                                )\n                            ) {\n                                echo \"<a class='restart btn'\n                                 href='#'\n                                 title='\" . __(\"Restart job\", 'glpiinventory') . \"'\n                                 id='restart_run_$taskjob_id'>\n                              <i class='fa fa-bolt'></i></a>\";\n                            }\n\n                         // if job has not started, user can cancel it\n                            if ($package_info['last_taskjobstate']['state'] == \"agents_prepared\") {\n                                echo \"<a class='cancel btn'\n                                 href='#'\n                                 title='\" . __(\"Cancel job\", 'glpiinventory') . \"'\n                                 id='cancel_run_$taskjob_id'>\n                              <i class='fa fa-stop'></i></a>\";\n                            }\n\n                      // permits to \"soft\" refresh\n                            echo \"<a href='#'\n                              title='\" . __(\"refresh job\", 'glpiinventory') . \"'\n                              class='btn'\n                              id='refresh_run_$taskjob_id'>\n                              <i class='fa fa-sync fa-fx'></i></a>\";\n\n                            echo \"</div>\"; // .buttons\n\n                      // log list\n                            echo \"<table class='runs' id='runs_$taskjob_id'>\";\n                            foreach ($package_info['last_taskjobstate']['logs'] as $log) {\n                                echo \"<tr class='run log'>\";\n                                echo \"<td>\" . $log['log.f_date'] . \"</td>\";\n                                echo \"<td>\" . $joblogs_labels[$log['log.state']] . \"</td>\";\n                                echo \"<td>\" . $log['log.comment'] . \"</td>\";\n                                echo \"</tr>\";\n                            }\n                            echo \"</table>\"; // .runs\n                            echo '</div>'; // .agent_block\n                        }\n\n                        echo '</div>'; // .counter_block\n\n                   // js controls (toggle, restart)\n                        echo Html::scriptBlock(\"$(function() {\n                     var logstatuses_names = \" . json_encode($joblogs_labels) . \";\n\n                     $('#toggle_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $('#run_$taskjob_id').toggle();\n                        $(this).toggleClass('expand')\n                               .parent('td')\n                               .nextAll('td').toggle();\n\n                     });\n\n                     $('#cancel_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/cancel_job.php',\n                           data: {\n                              'jobstate_id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'agent_id':    \" . $package_info['agent_id'] . \"\n                           },\n                           complete: function() {\n                              document.location.reload();\n                           }\n                        });\n                     });\n\n                     $('#restart_run_$taskjob_id').click(function(event){\n                        event.preventDefault();\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/restart_job.php',\n                           data: {\n                              'jobstate_id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'agent_id':    \" . $package_info['agent_id'] . \"\n                           },\n                           complete: function() {\n                              document.location.reload();\n                           }\n                        });\n                     });\n\n                     $('#refresh_run_$taskjob_id i').click(function() {\n                        var fa = $(this);\n                        fa.addClass('fa-spin fa-spinner')\n                          .removeClass('fa-sync');\n                        $.ajax({\n                           url: '\" . $url . \"/ajax/jobstates_logs.php',\n                           data: {\n                              'id': \" . $package_info['last_taskjobstate']['id'] . \",\n                              'last_date': '2999-01-01 00:00:00' // force a future date\n                           },\n                           success: function(data){\n                              // no data -> reload tab\n                              if (typeof data.logs == 'undefined') {\n                                 reloadTab();\n                                 return;\n                              }\n\n                              if (data.logs.length) {\n                                 // remove old data\n                                 $('#runs_$taskjob_id').empty();\n\n                                 $.each(data.logs, function( index, log ) {\n                                    $('#runs_$taskjob_id').append(\n                                       '<tr>'+\n                                       '<td>'+log['log.f_date']+'</td>'+\n                                       '<td>'+logstatuses_names[log['log.state']]+'</td>'+\n                                       '<td>'+log['log.comment']+'</td>'+\n                                       '<tr>'\n                                    )\n                                 });\n\n                                 var class_to_apply = '';\n                                 switch (data.logs[0]['log.state'] + '') {\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_RUNNING . \"':\n                                       class_to_apply = 'agents_running';\n                                       break;\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_ERROR . \"':\n                                       class_to_apply = 'agents_error';\n                                       break;\n                                    case '\" . PluginGlpiinventoryTaskjoblog::TASK_OK . \"':\n                                       class_to_apply = 'agents_success';\n                                       break;\n                                 }\n                                 if (class_to_apply.length) {\n                                    $('#block_$taskjob_id')\n                                       .attr('class', 'counter_block '+class_to_apply);\n                                 }\n                              }\n                           },\n                           complete: function() {\n                              setTimeout(function() {\n                                 fa.removeClass('fa-spin fa-spinner')\n                                   .addClass('fa-sync');\n                              }, 300);\n                           }\n                        });\n                     })\n                  });\");\n                    } else {\n                        $package_to_install[$packages_id] = $package_info['name'];\n                    }\n                }\n                echo '</div>'; // .target_stats\n                echo '</div>'; // .target_details\n                echo '</div>'; // .target_block\n\n                echo \"</td>\";\n                echo \"</tr>\";\n            }\n\n            if (count($package_to_install)) {\n                $p['name']     = 'deploypackages_' . $computers_id;\n                $p['display']  = true;\n                $p['multiple'] = true;\n                $p['size']     = 3;\n                $p['width']    = 950;\n\n                echo \"<tr class='tab_bg_1'>\";\n                echo \"<td>\";\n                echo __('Select packages you want install', 'glpiinventory');\n                echo \"<br/>\";\n                Dropdown::showFromArray($p['name'], $package_to_install, $p);\n                echo \"</td>\";\n                echo \"</tr>\";\n\n                echo \"<tr>\";\n                echo \"<th colspan='2'>\";\n                echo Html::submit(\n                    __('Prepare for install', 'glpiinventory'),\n                    ['name' => 'prepareinstall']\n                );\n                echo \"&nbsp;\";\n                if (!$self_service) {\n                    $options = ['local'  => __(\"I'm on this computer: local wakeup\", 'glpiinventory'),\n                           'remote' => __(\"I'm not on this computer: wakeup from the server\", 'glpiinventory'),\n                           'none'   => __(\"Don't wakeup\", 'glpiinventory')\n                        ];\n                    Dropdown::showFromArray(\n                        'wakeup_type',\n                        $options,\n                        ['value' => 'remote']\n                    );\n                } else {\n                    echo Html::hidden('wakeup_type', ['value' => 'local']);\n                }\n                echo Html::hidden('self_service', ['value' => $self_service]);\n                echo \"</th>\";\n                echo \"</tr>\";\n            } else {\n                echo \"<tr>\";\n                echo \"<th colspan='2'>\";\n                echo __('No packages available to install', 'glpiinventory');\n                echo \"</th>\";\n                echo \"</tr>\";\n            }\n        }\n        echo \"</table>\"; // .tab_cadre_fixe\n        Html::closeForm();\n    }\n\n\n   /**\n    * Check if an agent have deploy feature enabled\n    * @since 9.2\n    *\n    * @param integer $computers_id the ID of the computer to check\n    * @return boolean true if deploy is enabled for the agent\n    */\n    public static function isDeployEnabled($computers_id)\n    {\n        $agent = new Agent();\n       //If the agent associated with the computer has not the\n       //deploy feature enabled, do not propose to deploy packages on\n        if (!$agent->getFromDBByCrit(['itemtype' => 'Computer',  'items_id' => $computers_id])) {\n            return false;\n        }\n        $pfAgentModule = new PluginGlpiinventoryAgentmodule();\n        if ($pfAgentModule->isAgentCanDo('deploy', $agent->getID())) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n   /**\n    * Get deploy packages available to install on user computer(s) and for\n    * packages requested the state of deploy\n    *\n    * @param integer $users_id id of the user\n    */\n    public function getPackageForMe($users_id, $computers_id = false)\n    {\n\n        $computer      = new Computer();\n        $pfDeployGroup = new PluginGlpiinventoryDeployGroup();\n        $my_packages   = []; //Store all installable packages\n\n        $query = [];\n        if ($users_id) {\n            $query += ['users_id' => $users_id];\n        }\n        if ($computers_id) {\n            $query += ['id' => $computers_id];\n        }\n        $query += ['entities_id' => $_SESSION['glpiactiveentities']];\n\n       //Get all computers of the user\n        $mycomputers = $computer->find($query);\n\n        $agent       = new Agent();\n\n        foreach ($mycomputers as $mycomputers_id => $data) {\n            $my_packages[$mycomputers_id] = [];\n        }\n\n       //Get packages used for the user or a specific computer\n        $packages_used = $this->getMyDepoyPackages($my_packages, $users_id);\n\n       //Get packages that a the user can deploy\n        $packages = $this->canUserDeploySelf();\n\n        if ($packages) {\n           //Browse all packages that the user can install\n            foreach ($packages as $package) {\n               //Get computers that can be targeted for this package installation\n                $computers = $pfDeployGroup->getTargetsForGroup($package['plugin_glpiinventory_deploygroups_id']);\n\n               //Browse all computers that are target by a package installation\n\n                foreach ($mycomputers as $comp_id => $data) {\n                    //If we only want packages for one computer\n                    //check if it's the computer we look for\n                    if ($computers_id && $comp_id != $computers_id) {\n                        continue;\n                    }\n\n                    //If the agent associated with the computer has not the\n                    //deploy feature enabled, do not propose to deploy packages on it\n                    if (!self::isDeployEnabled($comp_id)) {\n                        continue;\n                    }\n\n                   //Get computers that can be targeted for this package installation\n                   //Check if the package belong to one of the entity that\n                   //are currently visible\n\n                   //The package is recursive, and visible in computer's entity\n                    if (Session::isMultiEntitiesMode()) {\n                        if (\n                             !$package['is_recursive']\n                             && $package['entities_id'] != $data['entities_id']\n                        ) {\n                            continue;\n                        } elseif (\n                               $package['is_recursive']\n                               && $package['entities_id'] != $data['entities_id']\n                               && !in_array(\n                                   $package['entities_id'],\n                                   getAncestorsOf('glpi_entities', $data['entities_id'])\n                               )\n                        ) {\n                     //The package is not recursive, and invisible in the computer's entity\n                            continue;\n                        }\n                    }\n\n                   //Does the computer belongs to the group\n                   //associated with the package ?\n                    if (isset($computers[$comp_id])) {\n                         $my_packages[$comp_id][$package['id']]\n                         = ['name'     => $package['name'],\n                         'agent_id' => $agent->getId()];\n\n                         //The package has already been deployed or requested to deploy\n                         if (isset($packages_used[$comp_id][$package['id']])) {\n                             $taskjobs_id = $packages_used[$comp_id][$package['id']];\n                             $my_packages[$comp_id][$package['id']]['taskjobs_id'] = $taskjobs_id;\n                             $last_job_state = $this->getMyDepoyPackagesState($comp_id, $taskjobs_id);\n                             if ($last_job_state) {\n                                 $my_packages[$comp_id][$package['id']]['last_taskjobstate']\n                                 = $last_job_state;\n                             }\n                         }\n                    }\n                }\n            }\n        }\n        return $my_packages;\n    }\n\n\n   /**\n    * Add the package in task or use existant task and add the computer in\n    * taskjob\n    *\n    * @global object $DB\n    * @param integer $computers_id id of the computer where depoy package\n    * @param integer $packages_id id of the package to install in computer\n    * @param integer $users_id id of the user have requested the installation\n    */\n    public function deployToComputer($computers_id, $packages_id, $users_id)\n    {\n        global $DB;\n\n        $pfTask    = new PluginGlpiinventoryTask();\n        $pfTaskJob = new PluginGlpiinventoryTaskJob();\n        $computer  = new Computer();\n\n        $computer->getFromDB($computers_id);\n\n       //Get jobs for a package on a computer\n        $query = \"SELECT `job`.*\n                FROM `glpi_plugin_glpiinventory_taskjobs` AS job\"\n              . \" LEFT JOIN `glpi_plugin_glpiinventory_tasks` AS task\"\n              . \"    ON `task`.`id` = `job`.`plugin_glpiinventory_tasks_id`\"\n              . \" WHERE `job`.`targets`='[{\\\"PluginGlpiinventoryDeployPackage\\\":\\\"\" . $packages_id . \"\\\"}]'\"\n              . \"    AND `task`.`is_active`='1'\"\n              . \"    AND `task`.`is_deploy_on_demand`='1'\"\n              . \"    AND `task`.`entities_id`='\" . $computer->fields['entities_id'] . \"'\"\n              . \"    AND `task`.`reprepare_if_successful`='0'\"\n              . \"     AND `job`.`method`='deployinstall'\"\n              . \" LIMIT 1\";\n        $iterator = $DB->request($query);\n\n       // case 1: if exist, we add computer in actors of the taskjob\n        if ($iterator->numrows() == 1) {\n            foreach ($iterator as $data) {\n                //Get current list of actors\n                $actors   = importArrayFromDB($data['actors']);\n\n                //Add a new actor : the computer that is being processed\n                $actors[] = ['Computer' => $computers_id];\n\n                //Get end user computers\n                $enduser  = importArrayFromDB($data['enduser']);\n                if (isset($enduser[$users_id])) {\n                    if (!in_array($computers_id, $enduser[$users_id])) {\n                        $enduser[$users_id][] = $computers_id;\n                    }\n                } else {\n                    $enduser[$users_id] = [$computers_id];\n                }\n                $input = [\n                'id'      => $data['id'],\n                'actors'  => exportArrayToDB($actors),\n                'enduser' => exportArrayToDB($enduser)\n                ];\n\n                //Update the job with the new actor\n                $pfTaskJob->update($input);\n                $tasks_id = $data['plugin_glpiinventory_tasks_id'];\n            }\n        } else {\n           // case 2: if not exist, create a new task + taskjob\n            $this->getFromDB($packages_id);\n\n           //Add the new task\n            $input = [\n                'name'                    => '[deploy on demand] ' . Sanitizer::dbEscape($this->fields['name']),\n                'entities_id'             => $computer->fields['entities_id'],\n                'reprepare_if_successful' => 0,\n                'is_deploy_on_demand'     => 1,\n                'is_active'               => 1,\n            ];\n            $tasks_id = $pfTask->add($input);\n\n           //Add a new job for the newly created task\n           //and enable it\n            $input = [\n            'plugin_glpiinventory_tasks_id' => $tasks_id,\n            'entities_id' => $computer->fields['entities_id'],\n            'name'        => 'deploy',\n            'method'      => 'deployinstall',\n            'targets'     => '[{\"PluginGlpiinventoryDeployPackage\":\"' . $packages_id . '\"}]',\n            'actors'      => exportArrayToDB([['Computer' => $computers_id]]),\n            'enduser'     => exportArrayToDB([$users_id  => [$computers_id]]),\n            ];\n            $pfTaskJob->add($input);\n        }\n\n       //Prepare the task (and only this one)\n        $pfTask->prepareTaskjobs(['deployinstall'], $tasks_id);\n    }\n\n\n   /**\n    * Get all packages that a user has requested to install\n    * on one of it's computer\n    *\n    * @global object $DB\n    * @param array $computers_packages\n    * @param integer $users_id\n    * @return array\n    */\n    public function getMyDepoyPackages($computers_packages, $users_id = false)\n    {\n        global $DB;\n\n       // Get packages yet deployed by enduser\n        $packages_used = [];\n        foreach ($computers_packages as $computers_id => $data) {\n            $packages_used[$computers_id] = [];\n        }\n        if ($users_id) {\n            $where = \"`enduser` IS NOT NULL\";\n        } else {\n            $where = \"1 \";\n        }\n        $sql = \"SELECT `job`.*\n              FROM `glpi_plugin_glpiinventory_taskjobs` AS job\n              LEFT JOIN `glpi_plugin_glpiinventory_tasks` AS task\n                 ON `task`.`id` = `job`.`plugin_glpiinventory_tasks_id`\n              WHERE $where\n                 AND `task`.`is_deploy_on_demand`='1'\n                 AND `task`.`is_active`='1'\n                 AND `task`.`entities_id`\n                    IN (\" . $_SESSION['glpiactiveentities_string'] . \")\";\n\n        foreach ($DB->request($sql) as $data) {\n           //Only look for deploy tasks\n            if ($data['method'] != 'deployinstall') {\n                continue;\n            }\n\n           //Look for all deploy on demand packages for a user\n            if ($users_id) {\n                $enduser = importArrayFromDB($data['enduser']);\n                if (isset($enduser[$users_id])) {\n                    $targets = importArrayFromDB($data['targets']);\n                    foreach ($enduser[$users_id] as $computers_id) {\n                        $packages_used[$computers_id][$targets[0]['PluginGlpiinventoryDeployPackage']] = $data['id'];\n                    }\n                }\n\n               //Look for all deploy on demand package for a computer\n            } else {\n                $targets = importArrayFromDB($data['targets']);\n                $actors  = importArrayFromDB($data['actors']);\n                foreach ($actors as $actor) {\n                    foreach ($actor as $itemtype => $items_id) {\n                        if ($itemtype == 'Computer' && $items_id == $computers_id) {\n                            $packages_used[$computers_id][$targets[0]['PluginGlpiinventoryDeployPackage']] = $data['id'];\n                        }\n                    }\n                }\n            }\n        }\n        return $packages_used;\n    }\n\n\n   /**\n    * Get the state of the package I have requeted to install\n    *\n    * @param integer $computers_id id of the computer\n    * @param integer $taskjobs_id id of the taskjob (where order defined)\n    * @param string $packages_name name of the package\n    */\n    public function getMyDepoyPackagesState($computers_id, $taskjobs_id)\n    {\n        $pfTaskJobState = new PluginGlpiinventoryTaskjobstate();\n        $agent        = new Agent();\n\n       // Get a taskjobstate by giving a  taskjobID and a computer ID\n        $agent->getFromDBByCrit(['itemtype' => Computer::getType(), 'items_id' => $computers_id]);\n        $agents_id = $agent->fields['id'];\n\n        $last_job_state = [];\n        $taskjobstates  = current($pfTaskJobState->find(\n            ['plugin_glpiinventory_taskjobs_id' => $taskjobs_id,\n            'agents_id'   => $agents_id],\n            ['id DESC'],\n            1\n        ));\n        if ($taskjobstates) {\n            $state = '';\n\n            switch ($taskjobstates['state']) {\n                case PluginGlpiinventoryTaskjobstate::CANCELLED:\n                    $state = 'agents_cancelled';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::PREPARED:\n                    $state = 'agents_prepared';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::SERVER_HAS_SENT_DATA:\n                case PluginGlpiinventoryTaskjobstate::AGENT_HAS_SENT_DATA:\n                    $state = 'agents_running';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::IN_ERROR:\n                      $state = 'agents_error';\n                    break;\n\n                case PluginGlpiinventoryTaskjobstate::FINISHED:\n                     $state = 'agents_success';\n                    break;\n            }\n            $logs = $pfTaskJobState->getLogs(\n                $taskjobstates['id'],\n                $_SESSION['glpi_currenttime']\n            );\n            $last_job_state['id']    = $taskjobstates['id'];\n            $last_job_state['state'] = $state;\n            $last_job_state['date']  = $logs['logs'][0]['log.date'];\n            $last_job_state['logs']  = $logs['logs'];\n        }\n        return $last_job_state;\n    }\n\n\n   /**\n    * Check I have rights to deploy packages\n    *\n    * @global object $DB\n    * @return false|array\n    */\n    public function canUserDeploySelf()\n    {\n        global $DB;\n\n        $table = \"glpi_plugin_glpiinventory_deploypackages\";\n        $where = \" WHERE `\" . $table . \"`.`plugin_glpiinventory_deploygroups_id` > 0 \"\n              . \" AND (\";\n\n       //Include groups\n        if (!empty($_SESSION['glpigroups'])) {\n            $where .= \" `glpi_plugin_glpiinventory_deploypackages_groups`.`groups_id`\n                    IN ('\" . implode(\"', '\", $_SESSION['glpigroups']) . \"') OR \";\n        }\n\n       //Include entity\n        $where .= getEntitiesRestrictRequest(\n            '',\n            'glpi_plugin_glpiinventory_deploypackages_entities',\n            'entities_id',\n            $_SESSION['glpiactive_entity'],\n            true\n        );\n       //Include user\n        $where .= \" OR `glpi_plugin_glpiinventory_deploypackages_users`.`users_id`='\" . $_SESSION['glpiID'] . \"' OR \";\n\n       //Include profile\n        $where .= \" `glpi_plugin_glpiinventory_deploypackages_profiles`.`profiles_id`='\" . $_SESSION['glpiactiveprofile']['id'] . \"' \";\n        $where .= \" )\";\n\n        $query = \"SELECT DISTINCT `\" . $table . \"`.*\n                FROM `$table`\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_groups`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_groups`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_entities`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_entities`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_users`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_users`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n                LEFT JOIN `glpi_plugin_glpiinventory_deploypackages_profiles`\n                     ON (`glpi_plugin_glpiinventory_deploypackages_profiles`.`plugin_glpiinventory_deploypackages_id` = `$table`.`id`)\n               $where\";\n        $result = $DB->query($query);\n        $a_packages = [];\n        if ($DB->numrows($result) > 0) {\n            while ($data = $DB->fetchAssoc($result)) {\n                $a_packages[$data['id']] = $data;\n            }\n            return $a_packages;\n        }\n        return false;\n    }\n\n\n   /**\n   * Duplicate a deploy package\n   * @param $deploypackages_id the ID of the package to duplicate\n   * @return duplication process status\n   */\n    public function duplicate($deploypackages_id)\n    {\n        if (!$this->getFromDB($deploypackages_id)) {\n            return false;\n        }\n        $result = true;\n        $input  = $this->fields;\n        $input['name'] = sprintf(\n            __('Copy of %s'),\n            $this->fields['name']\n        );\n        unset($input['id']);\n\n        $input = Toolbox::addslashes_deep($input);\n        if (!$this->add($input)) {\n            $result = false;\n        }\n        return $result;\n    }\n\n\n   /**\n   * Append needed informations to the json job for an agent\n   * @since 9.2\n   * @param $agent_task_version the version of the agent's deploy task\n   * @param $job the job as an array\n   * @return array the job plus new needed fields\n   */\n    public function buildJson($agent_task_version, $job)\n    {\n\n       //If task doesn't support checks skip, info, warning,\n       //send an ignore instead\n       //tasks version needs to be at least 2.2\n        $is_old_agent = version_compare($agent_task_version, '2.2', 'lt');\n        if ($is_old_agent && isset($job['job']['checks'])) {\n            foreach ($job['job']['checks'] as $key => $value) {\n                if (in_array($value['return'], ['skip', 'info', 'warning'])) {\n                    $job['job']['checks'][$key]['return'] = 'ignore';\n                }\n            }\n        }\n\n       //No need to perform further test if the agent doesn't support\n       //user interactions\n        if ($is_old_agent) {\n            return $job;\n        }\n\n        $do_interaction = true;\n        $jobstate       = new PluginGlpiinventoryTaskjobstate();\n\n       //Job has reached the maximum number of retries, do not interact with the user\n       //and execute the job\n        $jobstate->getFromDBByUniqID($job['job']['uuid']);\n        if (\n            isset($jobstate->fields['nb_retry'])\n            && $jobstate->fields['max_retry'] > 0\n        ) {\n            if ($jobstate->fields['nb_retry'] >= $jobstate->fields['max_retry']) {\n                $do_interaction = false;\n            }\n        }\n\n       //If the number of retries has been met,\n       //remove all userinteractions directives\n        if (!$do_interaction) {\n            unset($job['job']['userinteractions']);\n        } elseif (isset($job['job']['userinteractions'])) {\n            $template = new PluginGlpiinventoryDeployUserinteractionTemplate();\n            foreach ($job['job']['userinteractions'] as $key => $value) {\n                if (isset($value['template']) && $value['template']) {\n                    if ($template->getFromDB($value['template'])) {\n                        $job['job']['userinteractions'][$key]\n                        = $template->addJsonFieldsToArray($job['job']['userinteractions'][$key]);\n                        unset($job['job']['userinteractions'][$key]['template']);\n\n                        $job['job']['userinteractions'][$key]['text']\n                        = str_replace(\n                            PluginGlpiinventoryDeployUserinteraction::RN_TRANSFORMATION,\n                            \"\\r\\n\",\n                            $job['job']['userinteractions'][$key]['text']\n                        );\n                    }\n                }\n            }\n        }\n        return $job;\n    }\n\n\n   /**\n   * Transform \\r\\n in an userinteraction text\n   * @since 9.2\n   * @param array $params the input parameters\n   * @return array $params input parameters with text modified\n   */\n    public function escapeText($params)\n    {\n       //Hack to keep \\r\\n in the user interaction text\n       //before going to stripslashes_deep\n        if (isset($params['text'])) {\n            $params['text']\n            = str_replace(\n                '\\r\\n',\n                PluginGlpiinventoryDeployUserinteraction::RN_TRANSFORMATION,\n                $params['text']\n            );\n        }\n        return $params;\n    }\n}\n"], "filenames": ["inc/deploypackage.class.php"], "buggy_code_start_loc": [36], "buggy_code_end_loc": [1897], "fixing_code_start_loc": [37], "fixing_code_end_loc": [1899], "type": "CWE-89", "message": "GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. glpi-inventory-plugin is a plugin for GLPI to handle inventory management. In affected versions a SQL injection can be made using package deployment tasks. This issue has been resolved in version 1.0.2. Users are advised to upgrade. Users unable to upgrade should delete the `front/deploypackage.public.php` file if they are not using the `deploy tasks` feature.", "other": {"cve": {"id": "CVE-2022-31082", "sourceIdentifier": "security-advisories@github.com", "published": "2022-06-27T21:15:08.097", "lastModified": "2022-07-07T18:23:10.477", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "GLPI is a Free Asset and IT Management Software package, Data center management, ITIL Service Desk, licenses tracking and software auditing. glpi-inventory-plugin is a plugin for GLPI to handle inventory management. In affected versions a SQL injection can be made using package deployment tasks. This issue has been resolved in version 1.0.2. Users are advised to upgrade. Users unable to upgrade should delete the `front/deploypackage.public.php` file if they are not using the `deploy tasks` feature."}, {"lang": "es", "value": "GLPI es un paquete de software gratuito de administraci\u00f3n de activos y TI, administraci\u00f3n de centros de datos, ITIL Service Desk, seguimiento de licencias y auditor\u00eda de software. glpi-inventory-plugin es un plugin para GLPI que permite administrar el inventario. En versiones afectadas puede realizarse una inyecci\u00f3n SQL usando las tareas de despliegue de paquetes. Este problema ha sido resuelto en versi\u00f3n 1.0.2. Es recomendado a usuarios actualizar. Los usuarios que no puedan actualizar deber\u00e1n eliminar el archivo \"front/deploypackage.public.php\" si no usan la funci\u00f3n \"deploy tasks\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.3, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:glpi-project:glpi_inventory:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.2", "matchCriteriaId": "4FBD0AAF-24B8-4D1A-A7B6-7FA8BA4E1F64"}]}]}], "references": [{"url": "https://github.com/glpi-project/glpi-inventory-plugin/commit/0b805ca6fb2a0f9bde4af29fca4f703fdfbd8f66", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/glpi-project/glpi-inventory-plugin/security/advisories/GHSA-q6m7-h6rj-5wmw", "source": "security-advisories@github.com", "tags": ["Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/glpi-project/glpi-inventory-plugin/commit/0b805ca6fb2a0f9bde4af29fca4f703fdfbd8f66"}}