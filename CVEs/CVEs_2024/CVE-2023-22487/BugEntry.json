{"buggy_code": ["{\n    \"name\": \"flarum/mentions\",\n    \"description\": \"Mention and reply to specific posts and users.\",\n    \"type\": \"flarum-extension\",\n    \"keywords\": [\n        \"discussion\"\n    ],\n    \"license\": \"MIT\",\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/framework/issues\",\n        \"source\": \"https://github.com/flarum/mentions\",\n        \"forum\": \"https://discuss.flarum.org\"\n    },\n    \"homepage\": \"https://flarum.org\",\n    \"funding\": [\n        {\n            \"type\": \"website\",\n            \"url\": \"https://flarum.org/donate/\"\n        }\n    ],\n    \"require\": {\n        \"flarum/core\": \"^1.6\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Flarum\\\\Mentions\\\\\": \"src/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"1.x-dev\"\n        },\n        \"flarum-extension\": {\n            \"title\": \"Mentions\",\n            \"category\": \"feature\",\n            \"icon\": {\n                \"name\": \"fas fa-at\",\n                \"backgroundColor\": \"#539EC1\",\n                \"color\": \"#fff\"\n            }\n        },\n        \"flarum-cli\": {\n            \"modules\": {\n                \"admin\": true,\n                \"forum\": true,\n                \"js\": true,\n                \"jsCommon\": false,\n                \"css\": true,\n                \"gitConf\": true,\n                \"githubActions\": true,\n                \"prettier\": true,\n                \"typescript\": false,\n                \"bundlewatch\": false,\n                \"backendTesting\": true,\n                \"editorConfig\": true,\n                \"styleci\": true\n            }\n        }\n    },\n    \"scripts\": {\n        \"test\": [\n            \"@test:unit\",\n            \"@test:integration\"\n        ],\n        \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n        \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n        \"test:setup\": \"@php tests/integration/setup.php\"\n    },\n    \"scripts-descriptions\": {\n        \"test\": \"Runs all tests.\",\n        \"test:unit\": \"Runs all unit tests.\",\n        \"test:integration\": \"Runs all integration tests.\",\n        \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n    },\n    \"require-dev\": {\n        \"flarum/core\": \"*@dev\",\n        \"flarum/testing\": \"^1.0.0\"\n    },\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../*/*\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions;\n\nuse Flarum\\Api\\Controller;\nuse Flarum\\Api\\Serializer\\BasicPostSerializer;\nuse Flarum\\Api\\Serializer\\BasicUserSerializer;\nuse Flarum\\Api\\Serializer\\CurrentUserSerializer;\nuse Flarum\\Api\\Serializer\\GroupSerializer;\nuse Flarum\\Api\\Serializer\\PostSerializer;\nuse Flarum\\Extend;\nuse Flarum\\Group\\Group;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Hidden;\nuse Flarum\\Post\\Event\\Posted;\nuse Flarum\\Post\\Event\\Restored;\nuse Flarum\\Post\\Event\\Revised;\nuse Flarum\\Post\\Filter\\PostFilterer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less'),\n\n    (new Extend\\Frontend('admin'))\n        ->js(__DIR__.'/js/dist/admin.js'),\n\n    (new Extend\\Formatter)\n        ->configure(ConfigureMentions::class)\n        ->render(Formatter\\FormatPostMentions::class)\n        ->render(Formatter\\FormatUserMentions::class)\n        ->render(Formatter\\FormatGroupMentions::class)\n        ->unparse(Formatter\\UnparsePostMentions::class)\n        ->unparse(Formatter\\UnparseUserMentions::class)\n        ->parse(Formatter\\CheckPermissions::class),\n\n    (new Extend\\Model(Post::class))\n        ->belongsToMany('mentionedBy', Post::class, 'post_mentions_post', 'mentions_post_id', 'post_id')\n        ->belongsToMany('mentionsPosts', Post::class, 'post_mentions_post', 'post_id', 'mentions_post_id')\n        ->belongsToMany('mentionsUsers', User::class, 'post_mentions_user', 'post_id', 'mentions_user_id')\n        ->belongsToMany('mentionsGroups', Group::class, 'post_mentions_group', 'post_id', 'mentions_group_id'),\n\n    new Extend\\Locales(__DIR__.'/locale'),\n\n    (new Extend\\View)\n        ->namespace('flarum-mentions', __DIR__.'/views'),\n\n    (new Extend\\Notification())\n        ->type(Notification\\PostMentionedBlueprint::class, PostSerializer::class, ['alert'])\n        ->type(Notification\\UserMentionedBlueprint::class, PostSerializer::class, ['alert'])\n        ->type(Notification\\GroupMentionedBlueprint::class, PostSerializer::class, ['alert']),\n\n    (new Extend\\ApiSerializer(BasicPostSerializer::class))\n        ->hasMany('mentionedBy', BasicPostSerializer::class)\n        ->hasMany('mentionsPosts', BasicPostSerializer::class)\n        ->hasMany('mentionsUsers', BasicUserSerializer::class)\n        ->hasMany('mentionsGroups', GroupSerializer::class),\n\n    (new Extend\\ApiController(Controller\\ShowDiscussionController::class))\n        ->addInclude(['posts.mentionedBy', 'posts.mentionedBy.user', 'posts.mentionedBy.discussion'])\n        ->load([\n            'posts.mentionsUsers', 'posts.mentionsPosts', 'posts.mentionsPosts.user', 'posts.mentionedBy',\n            'posts.mentionedBy.mentionsPosts', 'posts.mentionedBy.mentionsPosts.user', 'posts.mentionedBy.mentionsUsers',\n            'posts.mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\ListDiscussionsController::class))\n        ->load([\n            'firstPost.mentionsUsers', 'firstPost.mentionsPosts', 'firstPost.mentionsPosts.user', 'firstPost.mentionsGroups',\n            'lastPost.mentionsUsers', 'lastPost.mentionsPosts', 'lastPost.mentionsPosts.user', 'lastPost.mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\ShowPostController::class))\n        ->addInclude(['mentionedBy', 'mentionedBy.user', 'mentionedBy.discussion']),\n\n    (new Extend\\ApiController(Controller\\ListPostsController::class))\n        ->addInclude(['mentionedBy', 'mentionedBy.user', 'mentionedBy.discussion'])\n        ->load([\n            'mentionsUsers', 'mentionsPosts', 'mentionsPosts.user', 'mentionedBy',\n            'mentionedBy.mentionsPosts', 'mentionedBy.mentionsPosts.user', 'mentionedBy.mentionsUsers',\n            'mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\CreatePostController::class))\n        ->addInclude(['mentionsPosts', 'mentionsPosts.mentionedBy'])\n        ->addOptionalInclude('mentionsGroups'),\n\n    (new Extend\\ApiController(Controller\\UpdatePostController::class))\n        ->addInclude(['mentionsPosts', 'mentionsPosts.mentionedBy'])\n        ->addOptionalInclude('mentionsGroups'),\n\n    (new Extend\\ApiController(Controller\\AbstractSerializeController::class))\n        ->prepareDataForSerialization(FilterVisiblePosts::class),\n\n    (new Extend\\Settings)\n        ->serializeToForum('allowUsernameMentionFormat', 'flarum-mentions.allow_username_format', 'boolval'),\n\n    (new Extend\\Event())\n        ->listen(Posted::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Restored::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Revised::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Hidden::class, Listener\\UpdateMentionsMetadataWhenInvisible::class)\n        ->listen(Deleted::class, Listener\\UpdateMentionsMetadataWhenInvisible::class),\n\n    (new Extend\\Filter(PostFilterer::class))\n        ->addFilter(Filter\\MentionedFilter::class),\n\n    (new Extend\\ApiSerializer(CurrentUserSerializer::class))\n        ->attribute('canMentionGroups', function (CurrentUserSerializer $serializer, User $user, array $attributes): bool {\n            return $user->can('mentionGroups');\n        })\n];\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions;\n\nuse Flarum\\Group\\Group;\nuse Flarum\\Http\\UrlGenerator;\nuse Flarum\\Post\\CommentPost;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\User\\User;\nuse Illuminate\\Support\\Str;\nuse s9e\\TextFormatter\\Configurator;\n\nclass ConfigureMentions\n{\n    /**\n     * @var UrlGenerator\n     */\n    protected $url;\n\n    /**\n     * @param UrlGenerator $url\n     */\n    public function __construct(UrlGenerator $url)\n    {\n        $this->url = $url;\n    }\n\n    public function __invoke(Configurator $config)\n    {\n        $this->configureUserMentions($config);\n        $this->configurePostMentions($config);\n        $this->configureGroupMentions($config);\n    }\n\n    private function configureUserMentions(Configurator $config)\n    {\n        $config->rendering->parameters['PROFILE_URL'] = $this->url->to('forum')->route('user', ['username' => '']);\n\n        $tagName = 'USERMENTION';\n\n        $tag = $config->tags->add($tagName);\n        $tag->attributes->add('displayname');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <a href=\"{$PROFILE_URL}{@slug}\" class=\"UserMention\">@<xsl:value-of select=\"@displayname\"/></a>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"UserMention UserMention--deleted\">@<xsl:value-of select=\"@displayname\"/></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n        $tag->filterChain->prepend([static::class, 'addUserId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterUserMentions(tag); }');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<displayname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#(?<id>[0-9]+)\\b/', $tagName);\n        $config->Preg->match('/\\B@(?<username>[a-z0-9_-]+)(?!#)/i', $tagName);\n    }\n\n    /**\n     * @param $tag\n     *\n     * @return bool\n     */\n    public static function addUserId($tag)\n    {\n        $allow_username_format = (bool) resolve(SettingsRepositoryInterface::class)->get('flarum-mentions.allow_username_format');\n\n        if ($tag->hasAttribute('username') && $allow_username_format) {\n            $user = User::where('username', $tag->getAttribute('username'))->first();\n        } elseif ($tag->hasAttribute('id')) {\n            $user = User::find($tag->getAttribute('id'));\n        }\n\n        if (isset($user)) {\n            $tag->setAttribute('id', $user->id);\n            $tag->setAttribute('displayname', $user->display_name);\n\n            return true;\n        }\n\n        $tag->invalidate();\n    }\n\n    private function configurePostMentions(Configurator $config)\n    {\n        $config->rendering->parameters['DISCUSSION_URL'] = $this->url->to('forum')->route('discussion', ['id' => '']);\n\n        $tagName = 'POSTMENTION';\n\n        $tag = $config->tags->add($tagName);\n\n        $tag->attributes->add('displayname');\n        $tag->attributes->add('number')->filterChain->append('#uint');\n        $tag->attributes->add('discussionid')->filterChain->append('#uint');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <a href=\"{$DISCUSSION_URL}{@discussionid}/{@number}\" class=\"PostMention\" data-id=\"{@id}\"><xsl:value-of select=\"@displayname\"/></a>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"PostMention PostMention--deleted\" data-id=\"{@id}\"><xsl:value-of select=\"@displayname\"/></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n\n        $tag->filterChain\n            ->prepend([static::class, 'addPostId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterPostMentions(tag); }');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<displayname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#p(?<id>[0-9]+)\\b/', $tagName);\n    }\n\n    /**\n     * @param $tag\n     * @return bool\n     */\n    public static function addPostId($tag)\n    {\n        $post = CommentPost::find($tag->getAttribute('id'));\n\n        if ($post) {\n            $tag->setAttribute('discussionid', (int) $post->discussion_id);\n            $tag->setAttribute('number', (int) $post->number);\n\n            if ($post->user) {\n                $tag->setAttribute('displayname', $post->user->display_name);\n            }\n\n            return true;\n        }\n    }\n\n    private function configureGroupMentions(Configurator $config)\n    {\n        $tagName = 'GROUPMENTION';\n\n        $tag = $config->tags->add($tagName);\n        $tag->attributes->add('groupname');\n        $tag->attributes->add('icon');\n        $tag->attributes->add('color');\n        $tag->attributes->add('class');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <span class=\"GroupMention {@class}\" style=\"background: {@color}\">@<xsl:value-of select=\"@groupname\"/><i class=\"icon {@icon}\"></i></span>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"GroupMention GroupMention--deleted\" style=\"background: {@color}\">@<xsl:value-of select=\"@groupname\"/><i class=\"icon {@icon}\"></i></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n        $tag->filterChain->prepend([static::class, 'addGroupId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterGroupMentions(tag); }');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<groupname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#g(?<id>[0-9]+)\\b/', $tagName);\n    }\n\n    /**\n     * @param $tag\n     * @return bool\n     */\n    public static function addGroupId($tag)\n    {\n        $group = Group::find($tag->getAttribute('id'));\n\n        if (isset($group) && ! in_array($group->id, [Group::GUEST_ID, Group::MEMBER_ID])) {\n            $tag->setAttribute('id', $group->id);\n            $tag->setAttribute('groupname', $group->name_plural);\n            $tag->setAttribute('icon', $group->icon ?? 'fas fa-at');\n            $tag->setAttribute('color', $group->color);\n            if (! empty($group->color)) {\n                $tag->setAttribute('class', self::isDark($group->color) ? 'GroupMention--light' : 'GroupMention--dark');\n            } else {\n                $tag->setAttribute('class', '');\n            }\n\n            return true;\n        }\n\n        $tag->invalidate();\n    }\n\n    /**\n     * The `isDark` utility converts a hex color to rgb, and then calcul a YIQ\n     * value in order to get the appropriate brightness value (is it dark or is it\n     * light?) See https://www.w3.org/TR/AERT/#color-contrast for references. A YIQ\n     * value >= 128 is a light color.\n     */\n    public static function isDark(?string $hexColor): bool\n    {\n        if (! $hexColor) {\n            return false;\n        }\n\n        $hexNumbers = Str::replace('#', '', $hexColor);\n        if (Str::length($hexNumbers) === 3) {\n            $hexNumbers += $hexNumbers;\n        }\n\n        $r = hexdec(Str::substr($hexNumbers, 0, 2));\n        $g = hexdec(Str::subStr($hexNumbers, 2, 2));\n        $b = hexdec(Str::subStr($hexNumbers, 4, 2));\n        $yiq = ($r * 299 + $g * 587 + $b * 114) / 1000;\n\n        return $yiq >= 128 ? false : true;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions\\Tests\\integration\\api;\n\nuse Carbon\\Carbon;\nuse Flarum\\Extend;\nuse Flarum\\Post\\CommentPost;\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\nuse Flarum\\User\\DisplayName\\DriverInterface;\nuse Flarum\\User\\User;\n\nclass PostMentionsTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    /**\n     * @inheritDoc\n     */\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->extension('flarum-mentions');\n\n        $this->prepareDatabase([\n            'users' => [\n                ['id' => 3, 'username' => 'potato', 'email' => 'potato@machine.local', 'is_email_confirmed' => 1],\n                ['id' => 4, 'username' => 'toby', 'email' => 'toby@machine.local', 'is_email_confirmed' => 1],\n                ['id' => 5, 'username' => 'bad_user', 'email' => 'bad_user@machine.local', 'is_email_confirmed' => 1],\n            ],\n            'discussions' => [\n                ['id' => 2, 'title' => __CLASS__, 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 3, 'first_post_id' => 4, 'comment_count' => 2],\n            ],\n            'posts' => [\n                ['id' => 4, 'number' => 2, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 3, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"TobyFlarum___\" id=\"5\" number=\"2\" discussionid=\"2\" username=\"toby\">@tobyuuu#5</POSTMENTION></r>'],\n                ['id' => 5, 'number' => 3, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"potato\" id=\"4\" number=\"3\" discussionid=\"2\" username=\"potato\">@potato#4</POSTMENTION></r>'],\n                ['id' => 6, 'number' => 4, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 3, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"i_am_a_deleted_user\" id=\"7\" number=\"5\" discussionid=\"2\" username=\"i_am_a_deleted_user\">@\"i_am_a_deleted_user\"#p7</POSTMENTION></r>'],\n                ['id' => 7, 'number' => 5, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 2021, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"POTATO$\" id=\"2010\" number=\"7\" discussionid=\"2\">@\"POTATO$\"#2010</POSTMENTION></r>'],\n                ['id' => 8, 'number' => 6, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"i_am_a_deleted_user\" id=\"2020\" number=\"8\" discussionid=\"2\" username=\"i_am_a_deleted_user\">@\"i_am_a_deleted_user\"#p2020</POSTMENTION></r>'],\n                ['id' => 9, 'number' => 10, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 5, 'type' => 'comment', 'content' => '<r><p>I am bad</p></r>'],\n                ['id' => 10, 'number' => 11, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"Bad &quot;#p6 User\" id=\"9\" number=\"10\" discussionid=\"2\">@\"Bad \"#p6 User\"#p9</POSTMENTION></r>'],\n                ['id' => 11, 'number' => 12, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 40, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"Bad &quot;#p6 User\" id=\"9\" number=\"10\" discussionid=\"2\">@\"Bad \"#p6 User\"#p9</POSTMENTION></r>'],\n                ['id' => 12, 'number' => 13, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"deleted_user\" id=\"11\" number=\"12\" discussionid=\"2\">@\"acme\"#p11</POSTMENTION></r>'],\n            ],\n            'post_mentions_post' => [\n                ['post_id' => 4, 'mentions_post_id' => 5],\n                ['post_id' => 5, 'mentions_post_id' => 4],\n                ['post_id' => 6, 'mentions_post_id' => 7],\n                ['post_id' => 10, 'mentions_post_id' => 9],\n            ],\n        ]);\n\n        $this->setting('display_name_driver', 'custom_display_name_driver');\n\n        $this->extend(\n            (new Extend\\User)\n                ->displayNameDriver('custom_display_name_driver', CustomOtherDisplayNameDriver::class)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_old_format_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@potato#4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@potato#4', $response['data']['attributes']['content']);\n        $this->assertStringNotContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_new_format_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"POTATO$\"#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_new_format_with_smart_quotes_works_and_falls_back_to_normal_quotes()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\u201cPOTATO$\u201d#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_an_invalid_post_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"franzofflarum\"#p215',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringNotContainsString('FRANZOFFLARUM$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"franzofflarum\"#p215', $response['data']['attributes']['content']);\n        $this->assertStringNotContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_multiple_posts_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"TOBY$\"#p5 @\"flarum\"#2015 @\"franzofflarum\"#220 @\"POTATO$\"#3 @\"POTATO$\"#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('TOBY$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('FRANZOFFLARUM$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"TOBY$\"#p5 @\"flarum\"#2015 @\"franzofflarum\"#220 @\"POTATO$\"#3 @\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(2, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_render_with_fresh_data()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/4', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('TOBY$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_unparse_with_fresh_data()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/4', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('@\"TOBY$\"#p5', $response['data']['attributes']['content']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_s_user_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('core.lib.username.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/6', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p7', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('i_am_a_deleted_user', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('i_am_a_deleted_user', $response['data']['attributes']['content']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('flarum-mentions.forum.post_mention.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/7', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p2010', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['content']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_and_deleted_user_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('flarum-mentions.forum.post_mention.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/8', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p2020', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['content']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_with_unremoved_bad_string_from_display_names_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad \"#p6 User\"#p9',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p6 User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(6));\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_unparsing_removes_bad_display_name_string()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/10', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_with_removed_bad_string_from_display_names_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_that_has_a_mention_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/10', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_with_deleted_author_that_has_a_mention_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/11', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_with_a_mention_of_a_post_with_deleted_author_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/12', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"acme\"#p11',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('[deleted]', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"[deleted]\"#p11', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(11));\n    }\n}\n\nclass CustomOtherDisplayNameDriver implements DriverInterface\n{\n    public function displayName(User $user): string\n    {\n        if ($user->username === 'bad_user') {\n            return 'Bad \"#p6 User';\n        }\n\n        return strtoupper($user->username).'$';\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Formatter;\n\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Cache\\Repository;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Renderer;\nuse s9e\\TextFormatter\\Unparser;\nuse s9e\\TextFormatter\\Utils;\n\nclass Formatter\n{\n    protected $configurationCallbacks = [];\n\n    protected $parsingCallbacks = [];\n\n    protected $unparsingCallbacks = [];\n\n    protected $renderingCallbacks = [];\n\n    /**\n     * @var Repository\n     */\n    protected $cache;\n\n    /**\n     * @var string\n     */\n    protected $cacheDir;\n\n    /**\n     * @param Repository $cache\n     * @param string $cacheDir\n     */\n    public function __construct(Repository $cache, $cacheDir)\n    {\n        $this->cache = $cache;\n        $this->cacheDir = $cacheDir;\n    }\n\n    /**\n     * @internal\n     */\n    public function addConfigurationCallback($callback)\n    {\n        $this->configurationCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addParsingCallback($callback)\n    {\n        $this->parsingCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addUnparsingCallback($callback)\n    {\n        $this->unparsingCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addRenderingCallback($callback)\n    {\n        $this->renderingCallbacks[] = $callback;\n    }\n\n    /**\n     * Parse text.\n     *\n     * @param string $text\n     * @param mixed $context\n     * @param User|null $user\n     * @return string\n     */\n    public function parse($text, $context = null, User $user = null)\n    {\n        $parser = $this->getParser($context);\n\n        foreach ($this->parsingCallbacks as $callback) {\n            $text = $callback($parser, $context, $text, $user);\n        }\n\n        return $parser->parse($text);\n    }\n\n    /**\n     * Render parsed XML.\n     *\n     * @param string $xml\n     * @param mixed|null $context\n     * @param ServerRequestInterface|null $request\n     * @return string\n     */\n    public function render($xml, $context = null, ServerRequestInterface $request = null)\n    {\n        $renderer = $this->getRenderer();\n\n        foreach ($this->renderingCallbacks as $callback) {\n            $xml = $callback($renderer, $context, $xml, $request);\n        }\n\n        $xml = $this->configureDefaultsOnLinks($renderer, $xml, $context, $request);\n\n        return $renderer->render($xml);\n    }\n\n    /**\n     * Unparse XML.\n     *\n     * @param string $xml\n     * @param mixed $context\n     * @return string\n     */\n    public function unparse($xml, $context = null)\n    {\n        foreach ($this->unparsingCallbacks as $callback) {\n            $xml = $callback($context, $xml);\n        }\n\n        return Unparser::unparse($xml);\n    }\n\n    /**\n     * Flush the cache so that the formatter components are regenerated.\n     */\n    public function flush()\n    {\n        $this->cache->forget('flarum.formatter');\n    }\n\n    /**\n     * @return Configurator\n     */\n    protected function getConfigurator()\n    {\n        $configurator = new Configurator;\n\n        $configurator->rootRules->enableAutoLineBreaks();\n\n        $configurator->rendering->setEngine('PHP');\n        $configurator->rendering->getEngine()->cacheDir = $this->cacheDir; // @phpstan-ignore-line\n\n        $configurator->enableJavaScript();\n        $configurator->javascript->exports = ['preview'];\n\n        $configurator->javascript->setMinifier('MatthiasMullieMinify')\n            ->keepGoing = true;\n\n        $configurator->Escaper; /** @phpstan-ignore-line */\n        $configurator->Autoemail; /** @phpstan-ignore-line */\n        $configurator->Autolink; /** @phpstan-ignore-line */\n        $configurator->tags->onDuplicate('replace');\n\n        foreach ($this->configurationCallbacks as $callback) {\n            $callback($configurator);\n        }\n\n        $this->configureExternalLinks($configurator);\n\n        return $configurator;\n    }\n\n    /**\n     * @param Configurator $configurator\n     */\n    protected function configureExternalLinks(Configurator $configurator)\n    {\n        /**\n         * @var Configurator\\Items\\TemplateDocument $dom\n         */\n        $dom = $configurator->tags['URL']->template->asDOM();\n\n        foreach ($dom->getElementsByTagName('a') as $a) {\n            /** @var \\s9e\\SweetDOM\\Element $a */\n            $a->prependXslCopyOf('@target');\n            $a->prependXslCopyOf('@rel');\n        }\n\n        $dom->saveChanges();\n    }\n\n    /**\n     * Get a TextFormatter component.\n     *\n     * @param string $name \"renderer\" or \"parser\" or \"js\"\n     * @return mixed\n     */\n    protected function getComponent($name)\n    {\n        $formatter = $this->cache->rememberForever('flarum.formatter', function () {\n            return $this->getConfigurator()->finalize();\n        });\n\n        return $formatter[$name];\n    }\n\n    /**\n     * Get the parser.\n     *\n     * @param mixed $context\n     * @return \\s9e\\TextFormatter\\Parser\n     */\n    protected function getParser($context = null)\n    {\n        $parser = $this->getComponent('parser');\n\n        $parser->registeredVars['context'] = $context;\n\n        return $parser;\n    }\n\n    /**\n     * Get the renderer.\n     *\n     * @return Renderer\n     */\n    protected function getRenderer()\n    {\n        spl_autoload_register(function ($class) {\n            if (file_exists($file = $this->cacheDir.'/'.$class.'.php')) {\n                include $file;\n            }\n        });\n\n        return $this->getComponent('renderer');\n    }\n\n    /**\n     * Get the formatter JavaScript.\n     *\n     * @return string\n     */\n    public function getJs()\n    {\n        return $this->getComponent('js');\n    }\n\n    protected function configureDefaultsOnLinks(\n        Renderer $renderer,\n        string $xml,\n        $context = null,\n        ServerRequestInterface $request = null\n    ): string {\n        return Utils::replaceAttributes($xml, 'URL', function ($attributes) {\n            $attributes['rel'] = $attributes['rel'] ?? 'ugc nofollow';\n\n            return $attributes;\n        });\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass PostRepository\n{\n    /**\n     * Get a new query builder for the posts table.\n     *\n     * @return Builder<Post>\n     */\n    public function query()\n    {\n        return Post::query();\n    }\n\n    /**\n     * @param User|null $user\n     * @return Builder<Post>\n     */\n    protected function queryVisibleTo(User $user = null)\n    {\n        $query = $this->query();\n\n        if ($user !== null) {\n            $query->whereVisibleTo($user);\n        }\n\n        return $query;\n    }\n\n    /**\n     * Find a post by ID, optionally making sure it is visible to a certain\n     * user, or throw an exception.\n     *\n     * @param int $id\n     * @param \\Flarum\\User\\User|null $actor\n     * @return Post\n     *\n     * @throws \\Illuminate\\Database\\Eloquent\\ModelNotFoundException\n     */\n    public function findOrFail($id, User $actor = null)\n    {\n        return $this->queryVisibleTo($actor)->findOrFail($id);\n    }\n\n    /**\n     * Find posts that match certain conditions, optionally making sure they\n     * are visible to a certain user, and/or using other criteria.\n     *\n     * @param array $where\n     * @param \\Flarum\\User\\User|null $actor\n     * @param array $sort\n     * @param int $count\n     * @param int $start\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function findWhere(array $where = [], User $actor = null, $sort = [], $count = null, $start = 0)\n    {\n        $query = $this->queryVisibleTo($actor)\n            ->where($where)\n            ->skip($start)\n            ->take($count);\n\n        foreach ((array) $sort as $field => $order) {\n            $query->orderBy($field, $order);\n        }\n\n        return $query->get();\n    }\n\n    /**\n     * Filter a list of post IDs to only include posts that are visible to a\n     * certain user.\n     *\n     * @param array $ids\n     * @param User $actor\n     * @return array\n     */\n    public function filterVisibleIds(array $ids, User $actor)\n    {\n        return $this->queryIds($ids, $actor)->pluck('posts.id')->all();\n    }\n\n    /**\n     * Get the position within a discussion where a post with a certain number\n     * is. If the post with that number does not exist, the index of the\n     * closest post to it will be returned.\n     *\n     * @param int $discussionId\n     * @param int $number\n     * @param \\Flarum\\User\\User|null $actor\n     * @return int\n     */\n    public function getIndexForNumber($discussionId, $number, User $actor = null)\n    {\n        $query = Discussion::find($discussionId)\n            ->posts()\n            ->whereVisibleTo($actor)\n            ->where('created_at', '<', function ($query) use ($discussionId, $number) {\n                $query->select('created_at')\n                      ->from('posts')\n                      ->where('discussion_id', $discussionId)\n                      ->whereNotNull('number')\n                      ->take(1)\n\n                      // We don't add $number as a binding because for some\n                      // reason doing so makes the bindings go out of order.\n                      ->orderByRaw('ABS(CAST(number AS SIGNED) - '.(int) $number.')');\n            });\n\n        return $query->count();\n    }\n\n    /**\n     * @param array $ids\n     * @param User|null $actor\n     * @return Builder<Post>\n     */\n    protected function queryIds(array $ids, User $actor = null)\n    {\n        return $this->queryVisibleTo($actor)->whereIn('posts.id', $ids);\n    }\n}\n"], "fixing_code": ["{\n    \"name\": \"flarum/mentions\",\n    \"description\": \"Mention and reply to specific posts and users.\",\n    \"type\": \"flarum-extension\",\n    \"keywords\": [\n        \"discussion\"\n    ],\n    \"license\": \"MIT\",\n    \"support\": {\n        \"issues\": \"https://github.com/flarum/framework/issues\",\n        \"source\": \"https://github.com/flarum/mentions\",\n        \"forum\": \"https://discuss.flarum.org\"\n    },\n    \"homepage\": \"https://flarum.org\",\n    \"funding\": [\n        {\n            \"type\": \"website\",\n            \"url\": \"https://flarum.org/donate/\"\n        }\n    ],\n    \"require\": {\n        \"flarum/core\": \"^1.6.3\"\n    },\n    \"autoload\": {\n        \"psr-4\": {\n            \"Flarum\\\\Mentions\\\\\": \"src/\"\n        }\n    },\n    \"extra\": {\n        \"branch-alias\": {\n            \"dev-main\": \"1.x-dev\"\n        },\n        \"flarum-extension\": {\n            \"title\": \"Mentions\",\n            \"category\": \"feature\",\n            \"icon\": {\n                \"name\": \"fas fa-at\",\n                \"backgroundColor\": \"#539EC1\",\n                \"color\": \"#fff\"\n            }\n        },\n        \"flarum-cli\": {\n            \"modules\": {\n                \"admin\": true,\n                \"forum\": true,\n                \"js\": true,\n                \"jsCommon\": false,\n                \"css\": true,\n                \"gitConf\": true,\n                \"githubActions\": true,\n                \"prettier\": true,\n                \"typescript\": false,\n                \"bundlewatch\": false,\n                \"backendTesting\": true,\n                \"editorConfig\": true,\n                \"styleci\": true\n            }\n        }\n    },\n    \"scripts\": {\n        \"test\": [\n            \"@test:unit\",\n            \"@test:integration\"\n        ],\n        \"test:unit\": \"phpunit -c tests/phpunit.unit.xml\",\n        \"test:integration\": \"phpunit -c tests/phpunit.integration.xml\",\n        \"test:setup\": \"@php tests/integration/setup.php\"\n    },\n    \"scripts-descriptions\": {\n        \"test\": \"Runs all tests.\",\n        \"test:unit\": \"Runs all unit tests.\",\n        \"test:integration\": \"Runs all integration tests.\",\n        \"test:setup\": \"Sets up a database for use with integration tests. Execute this only once.\"\n    },\n    \"require-dev\": {\n        \"flarum/core\": \"*@dev\",\n        \"flarum/testing\": \"^1.0.0\"\n    },\n    \"repositories\": [\n        {\n            \"type\": \"path\",\n            \"url\": \"../../*/*\"\n        }\n    ],\n    \"minimum-stability\": \"dev\",\n    \"prefer-stable\": true\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions;\n\nuse Flarum\\Api\\Controller;\nuse Flarum\\Api\\Serializer\\BasicPostSerializer;\nuse Flarum\\Api\\Serializer\\BasicUserSerializer;\nuse Flarum\\Api\\Serializer\\CurrentUserSerializer;\nuse Flarum\\Api\\Serializer\\GroupSerializer;\nuse Flarum\\Api\\Serializer\\PostSerializer;\nuse Flarum\\Extend;\nuse Flarum\\Group\\Group;\nuse Flarum\\Post\\Event\\Deleted;\nuse Flarum\\Post\\Event\\Hidden;\nuse Flarum\\Post\\Event\\Posted;\nuse Flarum\\Post\\Event\\Restored;\nuse Flarum\\Post\\Event\\Revised;\nuse Flarum\\Post\\Filter\\PostFilterer;\nuse Flarum\\Post\\Post;\nuse Flarum\\User\\User;\n\nreturn [\n    (new Extend\\Frontend('forum'))\n        ->js(__DIR__.'/js/dist/forum.js')\n        ->css(__DIR__.'/less/forum.less'),\n\n    (new Extend\\Frontend('admin'))\n        ->js(__DIR__.'/js/dist/admin.js'),\n\n    (new Extend\\Formatter)\n        ->configure(ConfigureMentions::class)\n        ->render(Formatter\\FormatPostMentions::class)\n        ->render(Formatter\\FormatUserMentions::class)\n        ->render(Formatter\\FormatGroupMentions::class)\n        ->unparse(Formatter\\UnparsePostMentions::class)\n        ->unparse(Formatter\\UnparseUserMentions::class)\n        ->parse(Formatter\\CheckPermissions::class),\n\n    (new Extend\\Model(Post::class))\n        ->belongsToMany('mentionedBy', Post::class, 'post_mentions_post', 'mentions_post_id', 'post_id')\n        ->belongsToMany('mentionsPosts', Post::class, 'post_mentions_post', 'post_id', 'mentions_post_id')\n        ->belongsToMany('mentionsUsers', User::class, 'post_mentions_user', 'post_id', 'mentions_user_id')\n        ->belongsToMany('mentionsGroups', Group::class, 'post_mentions_group', 'post_id', 'mentions_group_id'),\n\n    new Extend\\Locales(__DIR__.'/locale'),\n\n    (new Extend\\View)\n        ->namespace('flarum-mentions', __DIR__.'/views'),\n\n    (new Extend\\Notification())\n        ->type(Notification\\PostMentionedBlueprint::class, PostSerializer::class, ['alert'])\n        ->type(Notification\\UserMentionedBlueprint::class, PostSerializer::class, ['alert'])\n        ->type(Notification\\GroupMentionedBlueprint::class, PostSerializer::class, ['alert']),\n\n    (new Extend\\ApiSerializer(BasicPostSerializer::class))\n        ->hasMany('mentionedBy', BasicPostSerializer::class)\n        ->hasMany('mentionsPosts', BasicPostSerializer::class)\n        ->hasMany('mentionsUsers', BasicUserSerializer::class)\n        ->hasMany('mentionsGroups', GroupSerializer::class),\n\n    (new Extend\\ApiController(Controller\\ShowDiscussionController::class))\n        ->addInclude(['posts.mentionedBy', 'posts.mentionedBy.user', 'posts.mentionedBy.discussion'])\n        ->load([\n            'posts.mentionsUsers', 'posts.mentionsPosts', 'posts.mentionsPosts.user', 'posts.mentionedBy',\n            'posts.mentionedBy.mentionsPosts', 'posts.mentionedBy.mentionsPosts.user', 'posts.mentionedBy.mentionsUsers',\n            'posts.mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\ListDiscussionsController::class))\n        ->load([\n            'firstPost.mentionsUsers', 'firstPost.mentionsPosts', 'firstPost.mentionsPosts.user', 'firstPost.mentionsGroups',\n            'lastPost.mentionsUsers', 'lastPost.mentionsPosts', 'lastPost.mentionsPosts.user', 'lastPost.mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\ShowPostController::class))\n        ->addInclude(['mentionedBy', 'mentionedBy.user', 'mentionedBy.discussion']),\n\n    (new Extend\\ApiController(Controller\\ListPostsController::class))\n        ->addInclude(['mentionedBy', 'mentionedBy.user', 'mentionedBy.discussion'])\n        ->load([\n            'mentionsUsers', 'mentionsPosts', 'mentionsPosts.user', 'mentionedBy',\n            'mentionedBy.mentionsPosts', 'mentionedBy.mentionsPosts.user', 'mentionedBy.mentionsUsers',\n            'mentionsGroups'\n        ]),\n\n    (new Extend\\ApiController(Controller\\CreatePostController::class))\n        ->addOptionalInclude('mentionsGroups'),\n\n    (new Extend\\ApiController(Controller\\UpdatePostController::class))\n        ->addOptionalInclude('mentionsGroups'),\n\n    (new Extend\\ApiController(Controller\\AbstractSerializeController::class))\n        ->prepareDataForSerialization(FilterVisiblePosts::class),\n\n    (new Extend\\Settings)\n        ->serializeToForum('allowUsernameMentionFormat', 'flarum-mentions.allow_username_format', 'boolval'),\n\n    (new Extend\\Event())\n        ->listen(Posted::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Restored::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Revised::class, Listener\\UpdateMentionsMetadataWhenVisible::class)\n        ->listen(Hidden::class, Listener\\UpdateMentionsMetadataWhenInvisible::class)\n        ->listen(Deleted::class, Listener\\UpdateMentionsMetadataWhenInvisible::class),\n\n    (new Extend\\Filter(PostFilterer::class))\n        ->addFilter(Filter\\MentionedFilter::class),\n\n    (new Extend\\ApiSerializer(CurrentUserSerializer::class))\n        ->attribute('canMentionGroups', function (CurrentUserSerializer $serializer, User $user, array $attributes): bool {\n            return $user->can('mentionGroups');\n        })\n];\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions;\n\nuse Flarum\\Group\\Group;\nuse Flarum\\Http\\UrlGenerator;\nuse Flarum\\Post\\CommentPost;\nuse Flarum\\Post\\PostRepository;\nuse Flarum\\Settings\\SettingsRepositoryInterface;\nuse Flarum\\User\\User;\nuse Illuminate\\Support\\Str;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Parser;\n\nclass ConfigureMentions\n{\n    /**\n     * @var UrlGenerator\n     */\n    protected $url;\n\n    /**\n     * @param UrlGenerator $url\n     */\n    public function __construct(UrlGenerator $url)\n    {\n        $this->url = $url;\n    }\n\n    public function __invoke(Configurator $config)\n    {\n        $this->configureUserMentions($config);\n        $this->configurePostMentions($config);\n        $this->configureGroupMentions($config);\n    }\n\n    private function configureUserMentions(Configurator $config)\n    {\n        $config->rendering->parameters['PROFILE_URL'] = $this->url->to('forum')->route('user', ['username' => '']);\n\n        $tagName = 'USERMENTION';\n\n        $tag = $config->tags->add($tagName);\n        $tag->attributes->add('displayname');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <a href=\"{$PROFILE_URL}{@slug}\" class=\"UserMention\">@<xsl:value-of select=\"@displayname\"/></a>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"UserMention UserMention--deleted\">@<xsl:value-of select=\"@displayname\"/></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n        $tag->filterChain->prepend([static::class, 'addUserId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterUserMentions(tag); }');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<displayname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#(?<id>[0-9]+)\\b/', $tagName);\n        $config->Preg->match('/\\B@(?<username>[a-z0-9_-]+)(?!#)/i', $tagName);\n    }\n\n    /**\n     * @param $tag\n     *\n     * @return bool\n     */\n    public static function addUserId($tag)\n    {\n        $allow_username_format = (bool) resolve(SettingsRepositoryInterface::class)->get('flarum-mentions.allow_username_format');\n\n        if ($tag->hasAttribute('username') && $allow_username_format) {\n            $user = User::where('username', $tag->getAttribute('username'))->first();\n        } elseif ($tag->hasAttribute('id')) {\n            $user = User::find($tag->getAttribute('id'));\n        }\n\n        if (isset($user)) {\n            $tag->setAttribute('id', $user->id);\n            $tag->setAttribute('displayname', $user->display_name);\n\n            return true;\n        }\n\n        $tag->invalidate();\n    }\n\n    private function configurePostMentions(Configurator $config)\n    {\n        $config->rendering->parameters['DISCUSSION_URL'] = $this->url->to('forum')->route('discussion', ['id' => '']);\n\n        $tagName = 'POSTMENTION';\n\n        $tag = $config->tags->add($tagName);\n\n        $tag->attributes->add('displayname');\n        $tag->attributes->add('number')->filterChain->append('#uint');\n        $tag->attributes->add('discussionid')->filterChain->append('#uint');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <a href=\"{$DISCUSSION_URL}{@discussionid}/{@number}\" class=\"PostMention\" data-id=\"{@id}\"><xsl:value-of select=\"@displayname\"/></a>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"PostMention PostMention--deleted\" data-id=\"{@id}\"><xsl:value-of select=\"@displayname\"/></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n\n        $tag->filterChain\n            ->prepend([static::class, 'addPostId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterPostMentions(tag); }')\n            ->addParameterByName('actor');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<displayname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#p(?<id>[0-9]+)\\b/', $tagName);\n    }\n\n    /**\n     * @param $tag\n     * @return bool\n     */\n    public static function addPostId($tag, User $actor)\n    {\n        $post = resolve(PostRepository::class)\n            ->queryVisibleTo($actor)\n            ->find($tag->getAttribute('id'));\n\n        if ($post) {\n            $tag->setAttribute('discussionid', (int) $post->discussion_id);\n            $tag->setAttribute('number', (int) $post->number);\n\n            if ($post->user) {\n                $tag->setAttribute('displayname', $post->user->display_name);\n            }\n\n            return true;\n        }\n    }\n\n    private function configureGroupMentions(Configurator $config)\n    {\n        $tagName = 'GROUPMENTION';\n\n        $tag = $config->tags->add($tagName);\n        $tag->attributes->add('groupname');\n        $tag->attributes->add('icon');\n        $tag->attributes->add('color');\n        $tag->attributes->add('class');\n        $tag->attributes->add('id')->filterChain->append('#uint');\n\n        $tag->template = '\n            <xsl:choose>\n                <xsl:when test=\"@deleted != 1\">\n                    <span class=\"GroupMention {@class}\" style=\"background: {@color}\">@<xsl:value-of select=\"@groupname\"/><i class=\"icon {@icon}\"></i></span>\n                </xsl:when>\n                <xsl:otherwise>\n                    <span class=\"GroupMention GroupMention--deleted\" style=\"background: {@color}\">@<xsl:value-of select=\"@groupname\"/><i class=\"icon {@icon}\"></i></span>\n                </xsl:otherwise>\n            </xsl:choose>';\n        $tag->filterChain->prepend([static::class, 'addGroupId'])\n            ->setJS('function(tag) { return flarum.extensions[\"flarum-mentions\"].filterGroupMentions(tag); }');\n\n        $config->Preg->match('/\\B@[\"|\u201c](?<groupname>((?!\"#[a-z]{0,3}[0-9]+).)+)[\"|\u201d]#g(?<id>[0-9]+)\\b/', $tagName);\n    }\n\n    /**\n     * @param $tag\n     * @return bool\n     */\n    public static function addGroupId($tag)\n    {\n        $group = Group::find($tag->getAttribute('id'));\n\n        if (isset($group) && ! in_array($group->id, [Group::GUEST_ID, Group::MEMBER_ID])) {\n            $tag->setAttribute('id', $group->id);\n            $tag->setAttribute('groupname', $group->name_plural);\n            $tag->setAttribute('icon', $group->icon ?? 'fas fa-at');\n            $tag->setAttribute('color', $group->color);\n            if (! empty($group->color)) {\n                $tag->setAttribute('class', self::isDark($group->color) ? 'GroupMention--light' : 'GroupMention--dark');\n            } else {\n                $tag->setAttribute('class', '');\n            }\n\n            return true;\n        }\n\n        $tag->invalidate();\n    }\n\n    /**\n     * The `isDark` utility converts a hex color to rgb, and then calcul a YIQ\n     * value in order to get the appropriate brightness value (is it dark or is it\n     * light?) See https://www.w3.org/TR/AERT/#color-contrast for references. A YIQ\n     * value >= 128 is a light color.\n     */\n    public static function isDark(?string $hexColor): bool\n    {\n        if (! $hexColor) {\n            return false;\n        }\n\n        $hexNumbers = Str::replace('#', '', $hexColor);\n        if (Str::length($hexNumbers) === 3) {\n            $hexNumbers += $hexNumbers;\n        }\n\n        $r = hexdec(Str::substr($hexNumbers, 0, 2));\n        $g = hexdec(Str::subStr($hexNumbers, 2, 2));\n        $b = hexdec(Str::subStr($hexNumbers, 4, 2));\n        $yiq = ($r * 299 + $g * 587 + $b * 114) / 1000;\n\n        return $yiq >= 128 ? false : true;\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Mentions\\Tests\\integration\\api;\n\nuse Carbon\\Carbon;\nuse Flarum\\Extend;\nuse Flarum\\Post\\CommentPost;\nuse Flarum\\Testing\\integration\\RetrievesAuthorizedUsers;\nuse Flarum\\Testing\\integration\\TestCase;\nuse Flarum\\User\\DisplayName\\DriverInterface;\nuse Flarum\\User\\User;\n\nclass PostMentionsTest extends TestCase\n{\n    use RetrievesAuthorizedUsers;\n\n    /**\n     * @inheritDoc\n     */\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        $this->extension('flarum-mentions');\n\n        $this->prepareDatabase([\n            'users' => [\n                ['id' => 3, 'username' => 'potato', 'email' => 'potato@machine.local', 'is_email_confirmed' => 1],\n                ['id' => 4, 'username' => 'toby', 'email' => 'toby@machine.local', 'is_email_confirmed' => 1],\n                ['id' => 5, 'username' => 'bad_user', 'email' => 'bad_user@machine.local', 'is_email_confirmed' => 1],\n            ],\n            'discussions' => [\n                ['id' => 2, 'title' => __CLASS__, 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 3, 'first_post_id' => 4, 'comment_count' => 2],\n                ['id' => 50, 'title' => __CLASS__, 'is_private' => true, 'created_at' => Carbon::now(), 'last_posted_at' => Carbon::now(), 'user_id' => 3, 'first_post_id' => 4, 'comment_count' => 1],\n            ],\n            'posts' => [\n                ['id' => 4, 'number' => 2, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 3, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"TobyFlarum___\" id=\"5\" number=\"2\" discussionid=\"2\" username=\"toby\">@tobyuuu#5</POSTMENTION></r>'],\n                ['id' => 5, 'number' => 3, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"potato\" id=\"4\" number=\"3\" discussionid=\"2\" username=\"potato\">@potato#4</POSTMENTION></r>'],\n                ['id' => 6, 'number' => 4, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 3, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"i_am_a_deleted_user\" id=\"7\" number=\"5\" discussionid=\"2\" username=\"i_am_a_deleted_user\">@\"i_am_a_deleted_user\"#p7</POSTMENTION></r>'],\n                ['id' => 7, 'number' => 5, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 2021, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"POTATO$\" id=\"2010\" number=\"7\" discussionid=\"2\">@\"POTATO$\"#2010</POSTMENTION></r>'],\n                ['id' => 8, 'number' => 6, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"i_am_a_deleted_user\" id=\"2020\" number=\"8\" discussionid=\"2\" username=\"i_am_a_deleted_user\">@\"i_am_a_deleted_user\"#p2020</POSTMENTION></r>'],\n                ['id' => 9, 'number' => 10, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 5, 'type' => 'comment', 'content' => '<r><p>I am bad</p></r>'],\n                ['id' => 10, 'number' => 11, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"Bad &quot;#p6 User\" id=\"9\" number=\"10\" discussionid=\"2\">@\"Bad \"#p6 User\"#p9</POSTMENTION></r>'],\n                ['id' => 11, 'number' => 12, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 40, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"Bad &quot;#p6 User\" id=\"9\" number=\"10\" discussionid=\"2\">@\"Bad \"#p6 User\"#p9</POSTMENTION></r>'],\n                ['id' => 12, 'number' => 13, 'discussion_id' => 2, 'created_at' => Carbon::now(), 'user_id' => 4, 'type' => 'comment', 'content' => '<r><POSTMENTION displayname=\"deleted_user\" id=\"11\" number=\"12\" discussionid=\"2\">@\"acme\"#p11</POSTMENTION></r>'],\n\n                // Restricted access\n                ['id' => 50, 'number' => 1, 'discussion_id' => 50, 'created_at' => Carbon::now(), 'user_id' => 3, 'type' => 'comment', 'content' => '<r>no</r>'],\n            ],\n            'post_mentions_post' => [\n                ['post_id' => 4, 'mentions_post_id' => 5],\n                ['post_id' => 5, 'mentions_post_id' => 4],\n                ['post_id' => 6, 'mentions_post_id' => 7],\n                ['post_id' => 10, 'mentions_post_id' => 9],\n            ],\n        ]);\n\n        $this->setting('display_name_driver', 'custom_display_name_driver');\n\n        $this->extend(\n            (new Extend\\User)\n                ->displayNameDriver('custom_display_name_driver', CustomOtherDisplayNameDriver::class)\n        );\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_old_format_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@potato#4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@potato#4', $response['data']['attributes']['content']);\n        $this->assertStringNotContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_new_format_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"POTATO$\"#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function cannot_mention_a_post_without_access()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"potato\"#p50',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('potato', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"potato\"#p50', $response['data']['attributes']['content']);\n        $this->assertStringNotContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(50));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_a_valid_post_with_new_format_with_smart_quotes_works_and_falls_back_to_normal_quotes()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\u201cPOTATO$\u201d#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(4));\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_an_invalid_post_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"franzofflarum\"#p215',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringNotContainsString('FRANZOFFLARUM$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"franzofflarum\"#p215', $response['data']['attributes']['content']);\n        $this->assertStringNotContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function mentioning_multiple_posts_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"TOBY$\"#p5 @\"flarum\"#2015 @\"franzofflarum\"#220 @\"POTATO$\"#3 @\"POTATO$\"#p4',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('TOBY$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('FRANZOFFLARUM$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"TOBY$\"#p5 @\"flarum\"#2015 @\"franzofflarum\"#220 @\"POTATO$\"#3 @\"POTATO$\"#p4', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(2, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_render_with_fresh_data()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/4', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('TOBY$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_unparse_with_fresh_data()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/4', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('@\"TOBY$\"#p5', $response['data']['attributes']['content']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_s_user_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('core.lib.username.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/6', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p7', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('i_am_a_deleted_user', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('i_am_a_deleted_user', $response['data']['attributes']['content']);\n        $this->assertCount(1, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('flarum-mentions.forum.post_mention.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/7', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p2010', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['content']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function deleted_post_mentions_and_deleted_user_unparse_and_render_without_user_data()\n    {\n        $deleted_text = $this->app()->getContainer()->make('translator')->trans('flarum-mentions.forum.post_mention.deleted_text');\n\n        $response = $this->send(\n            $this->request('GET', '/api/posts/8', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString($deleted_text, $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"'.$deleted_text.'\"#p2020', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertStringNotContainsString('POTATO$', $response['data']['attributes']['content']);\n        $this->assertCount(0, CommentPost::find($response['data']['id'])->mentionsPosts);\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_with_unremoved_bad_string_from_display_names_doesnt_work()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad \"#p6 User\"#p9',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('POTATO$', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"POTATO$\"#p6 User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(6));\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_unparsing_removes_bad_display_name_string()\n    {\n        $response = $this->send(\n            $this->request('GET', '/api/posts/10', [\n                'authenticatedAs' => 1,\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertStringContainsString('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function post_mentions_with_removed_bad_string_from_display_names_works()\n    {\n        $response = $this->send(\n            $this->request('POST', '/api/posts', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                        'relationships' => [\n                            'discussion' => ['data' => ['id' => 2]],\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(201, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_that_has_a_mention_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/10', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_with_deleted_author_that_has_a_mention_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/11', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"Bad _ User\"#p9',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('Bad \"#p6 User', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"Bad _ User\"#p9', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(9));\n    }\n\n    /**\n     * @test\n     */\n    public function editing_a_post_with_a_mention_of_a_post_with_deleted_author_works()\n    {\n        $response = $this->send(\n            $this->request('PATCH', '/api/posts/12', [\n                'authenticatedAs' => 1,\n                'json' => [\n                    'data' => [\n                        'attributes' => [\n                            'content' => '@\"acme\"#p11',\n                        ],\n                    ],\n                ],\n            ])\n        );\n\n        $this->assertEquals(200, $response->getStatusCode());\n\n        $response = json_decode($response->getBody(), true);\n\n        $this->assertStringContainsString('[deleted]', $response['data']['attributes']['contentHtml']);\n        $this->assertEquals('@\"[deleted]\"#p11', $response['data']['attributes']['content']);\n        $this->assertStringContainsString('PostMention', $response['data']['attributes']['contentHtml']);\n        $this->assertNotNull(CommentPost::find($response['data']['id'])->mentionsPosts->find(11));\n    }\n}\n\nclass CustomOtherDisplayNameDriver implements DriverInterface\n{\n    public function displayName(User $user): string\n    {\n        if ($user->username === 'bad_user') {\n            return 'Bad \"#p6 User';\n        }\n\n        return strtoupper($user->username).'$';\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Formatter;\n\nuse Flarum\\User\\User;\nuse Illuminate\\Contracts\\Cache\\Repository;\nuse Psr\\Http\\Message\\ServerRequestInterface;\nuse s9e\\TextFormatter\\Configurator;\nuse s9e\\TextFormatter\\Renderer;\nuse s9e\\TextFormatter\\Unparser;\nuse s9e\\TextFormatter\\Utils;\n\nclass Formatter\n{\n    protected $configurationCallbacks = [];\n\n    protected $parsingCallbacks = [];\n\n    protected $unparsingCallbacks = [];\n\n    protected $renderingCallbacks = [];\n\n    /**\n     * @var Repository\n     */\n    protected $cache;\n\n    /**\n     * @var string\n     */\n    protected $cacheDir;\n\n    /**\n     * @param Repository $cache\n     * @param string $cacheDir\n     */\n    public function __construct(Repository $cache, $cacheDir)\n    {\n        $this->cache = $cache;\n        $this->cacheDir = $cacheDir;\n    }\n\n    /**\n     * @internal\n     */\n    public function addConfigurationCallback($callback)\n    {\n        $this->configurationCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addParsingCallback($callback)\n    {\n        $this->parsingCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addUnparsingCallback($callback)\n    {\n        $this->unparsingCallbacks[] = $callback;\n    }\n\n    /**\n     * @internal\n     */\n    public function addRenderingCallback($callback)\n    {\n        $this->renderingCallbacks[] = $callback;\n    }\n\n    /**\n     * Parse text.\n     *\n     * @param string $text\n     * @param mixed $context\n     * @param User|null $user\n     * @return string\n     */\n    public function parse($text, $context = null, User $user = null)\n    {\n        $parser = $this->getParser($context);\n\n         /*\n          * Can be injected in tag or attribute filters by calling:\n          * ->addParameterByName('actor') on the filter.\n          * See the mentions extension's ConfigureMentions.php for an example.\n          */\n        $parser->registeredVars['actor'] = $user;\n\n        foreach ($this->parsingCallbacks as $callback) {\n            $text = $callback($parser, $context, $text, $user);\n        }\n\n        return $parser->parse($text);\n    }\n\n    /**\n     * Render parsed XML.\n     *\n     * @param string $xml\n     * @param mixed|null $context\n     * @param ServerRequestInterface|null $request\n     * @return string\n     */\n    public function render($xml, $context = null, ServerRequestInterface $request = null)\n    {\n        $renderer = $this->getRenderer();\n\n        foreach ($this->renderingCallbacks as $callback) {\n            $xml = $callback($renderer, $context, $xml, $request);\n        }\n\n        $xml = $this->configureDefaultsOnLinks($renderer, $xml, $context, $request);\n\n        return $renderer->render($xml);\n    }\n\n    /**\n     * Unparse XML.\n     *\n     * @param string $xml\n     * @param mixed $context\n     * @return string\n     */\n    public function unparse($xml, $context = null)\n    {\n        foreach ($this->unparsingCallbacks as $callback) {\n            $xml = $callback($context, $xml);\n        }\n\n        return Unparser::unparse($xml);\n    }\n\n    /**\n     * Flush the cache so that the formatter components are regenerated.\n     */\n    public function flush()\n    {\n        $this->cache->forget('flarum.formatter');\n    }\n\n    /**\n     * @return Configurator\n     */\n    protected function getConfigurator()\n    {\n        $configurator = new Configurator;\n\n        $configurator->rootRules->enableAutoLineBreaks();\n\n        $configurator->rendering->setEngine('PHP');\n        $configurator->rendering->getEngine()->cacheDir = $this->cacheDir; // @phpstan-ignore-line\n\n        $configurator->enableJavaScript();\n        $configurator->javascript->exports = ['preview'];\n\n        $configurator->javascript->setMinifier('MatthiasMullieMinify')\n            ->keepGoing = true;\n\n        $configurator->Escaper; /** @phpstan-ignore-line */\n        $configurator->Autoemail; /** @phpstan-ignore-line */\n        $configurator->Autolink; /** @phpstan-ignore-line */\n        $configurator->tags->onDuplicate('replace');\n\n        foreach ($this->configurationCallbacks as $callback) {\n            $callback($configurator);\n        }\n\n        $this->configureExternalLinks($configurator);\n\n        return $configurator;\n    }\n\n    /**\n     * @param Configurator $configurator\n     */\n    protected function configureExternalLinks(Configurator $configurator)\n    {\n        /**\n         * @var Configurator\\Items\\TemplateDocument $dom\n         */\n        $dom = $configurator->tags['URL']->template->asDOM();\n\n        foreach ($dom->getElementsByTagName('a') as $a) {\n            /** @var \\s9e\\SweetDOM\\Element $a */\n            $a->prependXslCopyOf('@target');\n            $a->prependXslCopyOf('@rel');\n        }\n\n        $dom->saveChanges();\n    }\n\n    /**\n     * Get a TextFormatter component.\n     *\n     * @param string $name \"renderer\" or \"parser\" or \"js\"\n     * @return mixed\n     */\n    protected function getComponent($name)\n    {\n        $formatter = $this->cache->rememberForever('flarum.formatter', function () {\n            return $this->getConfigurator()->finalize();\n        });\n\n        return $formatter[$name];\n    }\n\n    /**\n     * Get the parser.\n     *\n     * @param mixed $context\n     * @return \\s9e\\TextFormatter\\Parser\n     */\n    protected function getParser($context = null)\n    {\n        $parser = $this->getComponent('parser');\n\n        $parser->registeredVars['context'] = $context;\n\n        return $parser;\n    }\n\n    /**\n     * Get the renderer.\n     *\n     * @return Renderer\n     */\n    protected function getRenderer()\n    {\n        spl_autoload_register(function ($class) {\n            if (file_exists($file = $this->cacheDir.'/'.$class.'.php')) {\n                include $file;\n            }\n        });\n\n        return $this->getComponent('renderer');\n    }\n\n    /**\n     * Get the formatter JavaScript.\n     *\n     * @return string\n     */\n    public function getJs()\n    {\n        return $this->getComponent('js');\n    }\n\n    protected function configureDefaultsOnLinks(\n        Renderer $renderer,\n        string $xml,\n        $context = null,\n        ServerRequestInterface $request = null\n    ): string {\n        return Utils::replaceAttributes($xml, 'URL', function ($attributes) {\n            $attributes['rel'] = $attributes['rel'] ?? 'ugc nofollow';\n\n            return $attributes;\n        });\n    }\n}\n", "<?php\n\n/*\n * This file is part of Flarum.\n *\n * For detailed copyright and license information, please view the\n * LICENSE file that was distributed with this source code.\n */\n\nnamespace Flarum\\Post;\n\nuse Flarum\\Discussion\\Discussion;\nuse Flarum\\User\\User;\nuse Illuminate\\Database\\Eloquent\\Builder;\n\nclass PostRepository\n{\n    /**\n     * Get a new query builder for the posts table.\n     *\n     * @return Builder<Post>\n     */\n    public function query()\n    {\n        return Post::query();\n    }\n\n    /**\n     * @param User|null $user\n     * @return Builder<Post>\n     */\n    public function queryVisibleTo(User $user = null)\n    {\n        $query = $this->query();\n\n        if ($user !== null) {\n            $query->whereVisibleTo($user);\n        }\n\n        return $query;\n    }\n\n    /**\n     * Find a post by ID, optionally making sure it is visible to a certain\n     * user, or throw an exception.\n     *\n     * @param int $id\n     * @param \\Flarum\\User\\User|null $actor\n     * @return Post\n     *\n     * @throws \\Illuminate\\Database\\Eloquent\\ModelNotFoundException\n     */\n    public function findOrFail($id, User $actor = null)\n    {\n        return $this->queryVisibleTo($actor)->findOrFail($id);\n    }\n\n    /**\n     * Find posts that match certain conditions, optionally making sure they\n     * are visible to a certain user, and/or using other criteria.\n     *\n     * @param array $where\n     * @param \\Flarum\\User\\User|null $actor\n     * @param array $sort\n     * @param int $count\n     * @param int $start\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\n     */\n    public function findWhere(array $where = [], User $actor = null, $sort = [], $count = null, $start = 0)\n    {\n        $query = $this->queryVisibleTo($actor)\n            ->where($where)\n            ->skip($start)\n            ->take($count);\n\n        foreach ((array) $sort as $field => $order) {\n            $query->orderBy($field, $order);\n        }\n\n        return $query->get();\n    }\n\n    /**\n     * Filter a list of post IDs to only include posts that are visible to a\n     * certain user.\n     *\n     * @param array $ids\n     * @param User $actor\n     * @return array\n     */\n    public function filterVisibleIds(array $ids, User $actor)\n    {\n        return $this->queryIds($ids, $actor)->pluck('posts.id')->all();\n    }\n\n    /**\n     * Get the position within a discussion where a post with a certain number\n     * is. If the post with that number does not exist, the index of the\n     * closest post to it will be returned.\n     *\n     * @param int $discussionId\n     * @param int $number\n     * @param \\Flarum\\User\\User|null $actor\n     * @return int\n     */\n    public function getIndexForNumber($discussionId, $number, User $actor = null)\n    {\n        $query = Discussion::find($discussionId)\n            ->posts()\n            ->whereVisibleTo($actor)\n            ->where('created_at', '<', function ($query) use ($discussionId, $number) {\n                $query->select('created_at')\n                      ->from('posts')\n                      ->where('discussion_id', $discussionId)\n                      ->whereNotNull('number')\n                      ->take(1)\n\n                      // We don't add $number as a binding because for some\n                      // reason doing so makes the bindings go out of order.\n                      ->orderByRaw('ABS(CAST(number AS SIGNED) - '.(int) $number.')');\n            });\n\n        return $query->count();\n    }\n\n    /**\n     * @param array $ids\n     * @param User|null $actor\n     * @return Builder<Post>\n     */\n    protected function queryIds(array $ids, User $actor = null)\n    {\n        return $this->queryVisibleTo($actor)->whereIn('posts.id', $ids);\n    }\n}\n"], "filenames": ["extensions/mentions/composer.json", "extensions/mentions/extend.php", "extensions/mentions/src/ConfigureMentions.php", "extensions/mentions/tests/integration/api/PostMentionsTest.php", "framework/core/src/Formatter/Formatter.php", "framework/core/src/Post/PostRepository.php"], "buggy_code_start_loc": [22, 94, 14, 40, 92, 32], "buggy_code_end_loc": [23, 99, 130, 133, 92, 33], "fixing_code_start_loc": [22, 93, 15, 41, 93, 32], "fixing_code_end_loc": [23, 96, 135, 169, 100, 33], "type": "NVD-CWE-noinfo", "message": "Flarum is a forum software for building communities. Using the mentions feature provided by the flarum/mentions extension, users can mention any post ID on the forum with the special `@\"<username>\"#p<id>` syntax. The following behavior never changes no matter if the actor should be able to read the mentioned post or not: A URL to the mentioned post is inserted into the actor post HTML, leaking its discussion ID and post number. The `mentionsPosts` relationship included in the `POST /api/posts` and `PATCH /api/posts/<id>` JSON responses leaks the full JSON:API payload of all mentioned posts without any access control. This includes the content, date, number and attributes added by other extensions. An attacker only needs the ability to create new posts on the forum to exploit the vulnerability. This works even if new posts require approval. If they have the ability to edit posts, the attack can be performed even more discreetly by using a single post to scan any size of database and hiding the attack post content afterward. The attack allows the leaking of all posts in the forum database, including posts awaiting approval, posts in tags the user has no access to, and private discussions created by other extensions like FriendsOfFlarum Byobu. This also includes non-comment posts like tag changes or renaming events. The discussion payload is not leaked but using the mention HTML payload it's possible to extract the discussion ID of all posts and combine all posts back together into their original discussions even if the discussion title remains unknown. All Flarum versions prior to 1.6.3 are affected. The vulnerability has been fixed and published as flarum/core v1.6.3. As a workaround, user can disable the mentions extension.", "other": {"cve": {"id": "CVE-2023-22487", "sourceIdentifier": "security-advisories@github.com", "published": "2023-01-11T20:15:08.833", "lastModified": "2023-01-19T16:26:59.697", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Flarum is a forum software for building communities. Using the mentions feature provided by the flarum/mentions extension, users can mention any post ID on the forum with the special `@\"<username>\"#p<id>` syntax. The following behavior never changes no matter if the actor should be able to read the mentioned post or not: A URL to the mentioned post is inserted into the actor post HTML, leaking its discussion ID and post number. The `mentionsPosts` relationship included in the `POST /api/posts` and `PATCH /api/posts/<id>` JSON responses leaks the full JSON:API payload of all mentioned posts without any access control. This includes the content, date, number and attributes added by other extensions. An attacker only needs the ability to create new posts on the forum to exploit the vulnerability. This works even if new posts require approval. If they have the ability to edit posts, the attack can be performed even more discreetly by using a single post to scan any size of database and hiding the attack post content afterward. The attack allows the leaking of all posts in the forum database, including posts awaiting approval, posts in tags the user has no access to, and private discussions created by other extensions like FriendsOfFlarum Byobu. This also includes non-comment posts like tag changes or renaming events. The discussion payload is not leaked but using the mention HTML payload it's possible to extract the discussion ID of all posts and combine all posts back together into their original discussions even if the discussion title remains unknown. All Flarum versions prior to 1.6.3 are affected. The vulnerability has been fixed and published as flarum/core v1.6.3. As a workaround, user can disable the mentions extension."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:flarum:flarum:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.6.3", "matchCriteriaId": "1CCA0BF4-79A3-4528-821A-DF5DB8692C99"}]}]}], "references": [{"url": "https://github.com/flarum/framework/commit/ab1c868b978e8b0d09a5d682c54665dae17d0985", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/flarum/framework/security/advisories/GHSA-22m9-m3ww-53h3", "source": "security-advisories@github.com", "tags": ["Exploit", "Mitigation", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/flarum/framework/commit/ab1c868b978e8b0d09a5d682c54665dae17d0985"}}