{"buggy_code": [".\\\" Automatically generated from an mdoc input file.  Do not edit.\n.\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 1994-1996, 1998-2005, 2007-2023\n.\\\"\tTodd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.\\\" Sponsored in part by the Defense Advanced Research Projects\n.\\\" Agency (DARPA) and Air Force Research Laboratory, Air Force\n.\\\" Materiel Command, USAF, under agreement number F39502-99-1-0512.\n.\\\"\n.nr SL @SEMAN@\n.nr BA @BAMAN@\n.nr LC @LCMAN@\n.nr PS @PSMAN@\n.TH \"SUDOERS\" \"@mansectform@\" \"January 16, 2023\" \"Sudo @PACKAGE_VERSION@\" \"File Formats Manual\"\n.nh\n.if n .ad l\n.SH \"NAME\"\n\\fBsudoers\\fR\n\\- default sudo security policy plugin\n.SH \"DESCRIPTION\"\nThe\n\\fBsudoers\\fR\npolicy plugin determines a user's\n\\fBsudo\\fR\nprivileges.\nIt is the default\n\\fBsudo\\fR\npolicy plugin.\nThe policy is driven by\nthe\n\\fI@sysconfdir@/sudoers\\fR\nfile or, optionally, in LDAP.\nThe policy format is described in detail in the\n\\fISUDOERS FILE FORMAT\\fR\nsection.\nFor information on storing\n\\fBsudoers\\fR\npolicy information\nin LDAP, see\nsudoers.ldap(@mansectform@).\n.SS \"Configuring sudo.conf for sudoers\"\n\\fBsudo\\fR\nconsults the\nsudo.conf(@mansectform@)\nfile to determine which plugins to load.\nIf no\nsudo.conf(@mansectform@)\nfile is present, or if it contains no\n\\fIPlugin\\fR\nlines,\n\\fBsudoers\\fR\nwill be used for auditing, policy decisions and I/O logging.\nTo explicitly configure\nsudo.conf(@mansectform@)\nto use the\n\\fBsudoers\\fR\nplugin, the following configuration can be used.\n.nf\n.sp\n.RS 4n\nPlugin sudoers_audit @sudoers_plugin@\nPlugin sudoers_policy @sudoers_plugin@\nPlugin sudoers_io @sudoers_plugin@\n.RE\n.fi\n.PP\nStarting with\n\\fBsudo\\fR\n1.8.5, it is possible to specify optional arguments to the\n\\fBsudoers\\fR\nplugin in the\nsudo.conf(@mansectform@)\nfile.\nPlugin arguments, if any, should be listed after the path to the plugin\n(i.e., after\n\\fI@sudoers_plugin@\\fR).\nThe arguments are only effective for the plugin that opens (and parses) the\n\\fIsudoers\\fR\nfile.\n.PP\nFor\n\\fBsudo\\fR\nversion 1.9.1 and higher, this is the\n\\fIsudoers_audit\\fR\nplugin.\nFor older versions, it is the\n\\fIsudoers_policy\\fR\nplugin.\nMultiple arguments may be specified, separated by white space.\nFor example:\n.nf\n.sp\n.RS 4n\nPlugin sudoers_audit @sudoers_plugin@ sudoers_mode=0400 error_recovery=false\n.RE\n.fi\n.PP\nThe following plugin arguments are supported:\n.TP 6n\nerror_recovery=bool\nThe\n\\fIerror_recovery\\fR\nargument can be used to control whether\n\\fBsudoers\\fR\nshould attempt to recover from syntax errors in the\n\\fIsudoers\\fR\nfile.\nIf set to\n\\fItrue\\fR\n(the default),\n\\fBsudoers\\fR\nwill try to recover from a syntax error by discarding the portion\nof the line that contains the error until the end of the line.\nA value of\n\\fIfalse\\fR\nwill disable error recovery.\nPrior to version 1.9.3, no error recovery was performed.\n.TP 6n\nldap_conf=pathname\nThe\n\\fIldap_conf\\fR\nargument can be used to override the default path to the\n\\fIldap.conf\\fR\nfile.\n.TP 6n\nldap_secret=pathname\nThe\n\\fIldap_secret\\fR\nargument can be used to override the default path to the\n\\fIldap.secret\\fR\nfile.\n.TP 6n\nsudoers_file=pathname\nThe\n\\fIsudoers_file\\fR\nargument can be used to override the default path to the\n\\fIsudoers\\fR\nfile.\n.TP 6n\nsudoers_uid=user-ID\nThe\n\\fIsudoers_uid\\fR\nargument can be used to override the default owner of the sudoers file.\nIt should be specified as a numeric user-ID.\n.TP 6n\nsudoers_gid=group-ID\nThe\n\\fIsudoers_gid\\fR\nargument can be used to override the default group of the sudoers file.\nIt must be specified as a numeric group-ID (not a group name).\n.TP 6n\nsudoers_mode=mode\nThe\n\\fIsudoers_mode\\fR\nargument can be used to override the default file mode for the sudoers file.\nIt should be specified as an octal value.\n.PP\nFor more information on configuring\nsudo.conf(@mansectform@),\nrefer to its manual.\n.SS \"User Authentication\"\nThe\n\\fBsudoers\\fR\nsecurity policy requires that most users authenticate\nthemselves before they can use\n\\fBsudo\\fR.\nA password is not required\nif the invoking user is\n\\fBroot\\fR,\nif the target user is the same as the invoking user, or if the\npolicy has disabled authentication for the user or command.\nUnlike\nsu(1),\nwhen\n\\fBsudoers\\fR\nrequires\nauthentication, it validates the invoking user's credentials, not\nthe target user's (or\n\\fB@runas_default@\\fR's)\ncredentials.\nThis can be changed via\nthe\n\\fIrootpw\\fR,\n\\fItargetpw\\fR\nand\n\\fIrunaspw\\fR\nflags, described later.\n.PP\nIf a user who is not listed in the policy tries to run a command\nvia\n\\fBsudo\\fR,\nmail is sent to the proper authorities.\nThe address\nused for such mail is configurable via the\n\\fImailto\\fR\nDefaults entry\n(described later) and defaults to\n\\fI@mailto@\\fR.\n.PP\nNo mail will be sent if an unauthorized user tries to run\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noption unless there is an authentication error and\neither the\n\\fImail_always\\fR\nor\n\\fImail_badpass\\fR\nflags are enabled.\nThis allows users to\ndetermine for themselves whether or not they are allowed to use\n\\fBsudo\\fR.\nBy default, all attempts to run\n\\fBsudo\\fR\n(successful or not)\nare logged, regardless of whether or not mail is sent.\n.PP\nIf\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nand the\n\\fRSUDO_USER\\fR\nenvironment variable\nis set, the\n\\fBsudoers\\fR\npolicy will use this value to determine who\nthe actual user is.\nThis can be used by a user to log commands\nthrough sudo even when a\n\\fBroot\\fR\nshell has been invoked.\nIt also\nallows the\n\\fB\\-e\\fR\noption to remain useful even when invoked via a\nsudo-run script or program.\nNote, however, that the\n\\fIsudoers\\fR\nfile lookup is still done for\n\\fBroot\\fR,\nnot the user specified by\n\\fRSUDO_USER\\fR.\n.PP\n\\fBsudoers\\fR\nuses per-user time stamp files for credential caching.\nOnce a user has been authenticated, a record is written\ncontaining the user-ID that was used to authenticate, the\nterminal session ID, the start time of the session leader\n(or parent process) and a time stamp\n(using a monotonic clock if one is available).\nThe user may then use\n\\fBsudo\\fR\nwithout a password for a short period of time (@timeout@ minutes\nunless overridden by the\n\\fItimestamp_timeout\\fR\noption).\nBy default,\n\\fBsudoers\\fR\nuses a separate record for each terminal, which means that\na user's login sessions are authenticated separately.\nThe\n\\fItimestamp_type\\fR\noption can be used to select the type of time stamp record\n\\fBsudoers\\fR\nwill use.\n.SS \"Logging\"\nBy default,\n\\fBsudoers\\fR\nlogs both successful and unsuccessful attempts (as well\nas errors).\nThe\n\\fIlog_allowed\\fR\nand\n\\fIlog_denied\\fR\nflags can be used to control this behavior.\nMessages can be logged to\nsyslog(3),\na log file, or both.\nThe default is to log to\nsyslog(3)\nbut this is configurable via the\n\\fIsyslog\\fR\nand\n\\fIlogfile\\fR\nsettings.\nSee\n\\fIEVENT LOGGING\\fR\nfor a description of the log file format.\n.PP\n\\fBsudoers\\fR\nis also capable of running a command in a pseudo-terminal and logging\ninput and/or output.\nThe standard input, standard output, and standard error can be logged\neven when not associated with a terminal.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\n.PP\nStarting with version 1.9, the\n\\fIlog_servers\\fR\nsetting may be used to send event and I/O log data to a remote server running\n\\fBsudo_logsrvd\\fR\nor another service that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.SS \"Command environment\"\nSince environment variables can influence program behavior,\n\\fBsudoers\\fR\nprovides a means to restrict which variables from the user's\nenvironment are inherited by the command to be run.\nThere are two\ndistinct ways\n\\fBsudoers\\fR\ncan deal with environment variables.\n.PP\nBy default, the\n\\fIenv_reset\\fR\nflag is enabled.\nThis causes commands\nto be executed with a new, minimal environment.\nOn AIX (and Linux\nsystems without PAM), the environment is initialized with the\ncontents of the\n\\fI/etc/environment\\fR\nfile.\n.if \\n(LC \\{\\\nOn\nBSD\nsystems, if the\n\\fIuse_loginclass\\fR\nflag is enabled, the environment is initialized\nbased on the\n\\fIpath\\fR\nand\n\\fIsetenv\\fR\nsettings in\n\\fI/etc/login.conf\\fR.\n.\\}\nThe\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nenvironment variables are initialized based on the target user\nand the\n\\fRSUDO_*\\fR\nvariables are set based on the invoking user.\nAdditional variables, such as\n\\fRDISPLAY\\fR,\n\\fRPATH\\fR\nand\n\\fRTERM\\fR,\nare preserved from the invoking user's environment if permitted by the\n\\fIenv_check\\fR,\nor\n\\fIenv_keep\\fR\noptions.\nA few environment variables are treated specially.\nIf the\n\\fRPATH\\fR\nand\n\\fRTERM\\fR\nvariables are not preserved from the user's environment, they will be set\nto default values.\nThe\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nare handled as a single entity.\nIf one of them is preserved (or removed) from the user's environment,\nthe other will be as well.\nIf\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nare to be preserved but only one of them is present in the user's environment,\nthe other will be set to the same value.\nThis avoids an inconsistent environment where one of the variables\ndescribing the user name is set to the invoking user and one is\nset to the target user.\nEnvironment variables with a value beginning with\n\\(oq()\\(cq\nare removed unless both the name and value parts are matched by\n\\fIenv_keep\\fR\nor\n\\fIenv_check\\fR,\nas they may be interpreted as functions by the\n\\fBbash\\fR\nshell.\nPrior to version 1.8.11, such variables were always removed.\n.PP\nIf, however, the\n\\fIenv_reset\\fR\nflag is disabled, any variables not\nexplicitly denied by the\n\\fIenv_check\\fR\nand\n\\fIenv_delete\\fR\noptions are allowed and their values are\ninherited from the invoking process.\nPrior to version 1.8.21, environment variables with a value beginning with\n\\(oq()\\(cq\nwere always removed.\nBeginning with version 1.8.21, a pattern in\n\\fIenv_delete\\fR\nis used to match\n\\fBbash\\fR\nshell functions instead.\nSince it is not possible\nto block all potentially dangerous environment variables, use\nof the default\n\\fIenv_reset\\fR\nbehavior is encouraged.\n.PP\nEnvironment variables specified by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR\nmay include one or more\n\\(oq*\\(cq\ncharacters which will match zero or more characters.\nNo other wildcard characters are supported.\n.PP\nBy default, environment variables are matched by name.\nHowever, if the pattern includes an equal sign\n(\\(oq=\\&\\(cq),\nboth the variables name and value must match.\nFor example, a\n\\fBbash\\fR\nshell function could be matched as follows:\n.nf\n.sp\n.RS 4n\nenv_keep += \"BASH_FUNC_my_func%%=()*\"\n.RE\n.fi\n.PP\nWithout the\n\\(oq=()*\\(cq\nsuffix, this would not match, as\n\\fBbash\\fR\nshell functions are not preserved by default.\n.PP\nThe complete list of environment variables that are preserved or removed,\nas modified by global Defaults parameters in\n\\fIsudoers\\fR,\nis displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nThe list of environment variables to remove\nvaries based on the operating system\n\\fBsudo\\fR\nis running on.\n.PP\nOther\n\\fBsudoers\\fR\noptions may influence the command environment, such as\n\\fIalways_set_home\\fR,\n\\fIsecure_path\\fR,\n\\fIset_logname\\fR,\nand\n\\fIset_home\\fR.\n.PP\nOn systems that support PAM where the\n\\fBpam_env\\fR\nmodule is enabled for\n\\fBsudo\\fR,\nvariables in the PAM environment may be merged in to the environment.\nIf a variable in the PAM environment is already present in the\nuser's environment, the value will only be overridden if the variable\nwas not preserved by\n\\fBsudoers\\fR.\nWhen\n\\fIenv_reset\\fR\nis enabled, variables preserved from the invoking user's environment\nby the\n\\fIenv_keep\\fR\nlist take precedence over those in the PAM environment.\nWhen\n\\fIenv_reset\\fR\nis disabled, variables present the invoking user's environment\ntake precedence over those in the PAM environment unless they\nmatch a pattern in the\n\\fIenv_delete\\fR\nlist.\n.PP\nThe dynamic linker on most operating systems will remove variables\nthat can control dynamic linking from the environment of set-user-ID\nexecutables, including\n\\fBsudo\\fR.\nDepending on the operating\nsystem this may include\n\\fR_RLD*\\fR,\n\\fRDYLD_*\\fR,\n\\fRLD_*\\fR,\n\\fRLDR_*\\fR,\n\\fRLIBPATH\\fR,\n\\fRSHLIB_PATH\\fR,\nand others.\nThese type of variables are\nremoved from the environment before\n\\fBsudo\\fR\neven begins execution\nand, as such, it is not possible for\n\\fBsudo\\fR\nto preserve them.\n.PP\nAs a special case, if the\n\\fB\\-i\\fR\noption (initial login) is\nspecified,\n\\fBsudoers\\fR\nwill initialize the environment regardless\nof the value of\n\\fIenv_reset\\fR.\nThe\n\\fRDISPLAY\\fR,\n\\fRPATH\\fR\nand\n\\fRTERM\\fR\nvariables remain unchanged;\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRUSER\\fR,\nand\n\\fRLOGNAME\\fR\nare set based on the target user.\nOn AIX (and Linux\nsystems without PAM), the contents of\n\\fI/etc/environment\\fR\nare also\nincluded.\n.if \\n(LC \\{\\\nOn\nBSD\nsystems, if the\n\\fIuse_loginclass\\fR\nflag is\nenabled, the\n\\fIpath\\fR\nand\n\\fIsetenv\\fR\nvariables in\n\\fI/etc/login.conf\\fR\nare also applied.\n.\\}\nAll other environment variables are removed unless permitted by\n\\fIenv_keep\\fR\nor\n\\fIenv_check\\fR,\ndescribed above.\n.PP\nFinally, the\n\\fIrestricted_env_file\\fR\nand\n\\fIenv_file\\fR\nfiles are applied, if present.\nThe variables in\n\\fIrestricted_env_file\\fR\nare applied first and are subject to the same restrictions as the\ninvoking user's environment, as detailed above.\nThe variables in\n\\fIenv_file\\fR\nare applied last and are not subject to these restrictions.\nIn both cases, variables present in the files will only be set to\ntheir specified values if they would not conflict with an existing\nenvironment variable.\n.SH \"SUDOERS FILE FORMAT\"\nThe\n\\fIsudoers\\fR\nfile is composed of two types of entries: aliases\n(basically variables) and user specifications (which specify who\nmay run what).\n.PP\nWhen multiple entries match for a user, they are applied in order.\nWhere there are multiple matches, the last match is used (which is\nnot necessarily the most specific match).\n.PP\nThe\n\\fIsudoers\\fR\nfile grammar will be described below in Extended Backus-Naur\nForm (EBNF).\nDon't despair if you are unfamiliar with EBNF; it is fairly simple,\nand the definitions below are annotated.\n.SS \"Resource limits\"\nBy default,\n\\fBsudoers\\fR\nuses the operating system's native method of setting resource limits\nfor the target user.\nOn Linux systems, resource limits are usually set by the\n\\fIpam_limits.so\\fR\nPAM module.\nOn some BSD systems, the\n\\fI/etc/login.conf\\fR\nfile specifies resource limits for the user.\nOn AIX systems, resource limits are configured in the\n\\fI/etc/security/limits\\fR\nfile.\nIf there is no system mechanism to set per-user resource limits,\nthe command will run with the same limits as the invoking user.\nThe one exception to this is the core dump file size, which is set by\n\\fBsudoers\\fR\nto 0 by default.\nDisabling core dumps by default makes it possible to avoid potential\nsecurity problems where the core file is treated as trusted input.\n.PP\nResource limits may also be set in the\n\\fIsudoers\\fR\nfile itself, in which case they override those set by the system.\nSee the\n\\fIrlimit_as,\\fR\n\\fIrlimit_core,\\fR\n\\fIrlimit_cpu,\\fR\n\\fIrlimit_data,\\fR\n\\fIrlimit_fsize,\\fR\n\\fIrlimit_locks,\\fR\n\\fIrlimit_memlock,\\fR\n\\fIrlimit_nofile,\\fR\n\\fIrlimit_nproc,\\fR\n\\fIrlimit_rss,\\fR\n\\fIrlimit_stack\\fR\noptions described below.\nResource limits in\n\\fBsudoers\\fR\nmay be specified in one of the following formats:\n.TP 8n\n\\(lqvalue\\(rq\nBoth the soft and hard resource limits are set to the same value.\nThe special value\n\\(lqinfinity\\(rq\ncan be used to indicate that the value is unlimited.\n.TP 8n\n\\(lqsoft,hard\\(rq\nTwo comma-separated values.\nThe soft limit is set to the first value and the hard limit is set\nto the second.\nBoth values must either be enclosed in a set of double quotes,\nor the comma must be escaped with a backslash\n(\\(oq\\e\\(cq).\nThe special value\n\\(lqinfinity\\(rq\nmay be used in place of either value.\n.TP 8n\n\\(lqdefault\\(rq\nThe default resource limit for the user will be used.\nThis may be a user-specific value (see above) or the value of the\nresource limit when\n\\fBsudo\\fR\nwas invoked for systems that don't support per-user limits.\n.TP 8n\n\\(lquser\\(rq\nThe invoking user's resource limits will be preserved when running\nthe command.\n.PP\nFor example, to restore the historic core dump file size behavior,\na line like the following may be used.\n.sp\n.RS 6n\nDefaults rlimit_core=default\n.RE\n.PP\nResource limits in\n\\fBsudoers\\fR\nare only supported by version 1.8.7 or higher.\n.SS \"Quick guide to EBNF\"\nEBNF is a concise and exact way of describing the grammar of a language.\nEach EBNF definition is made up of\n\\fIproduction rules\\fR.\nFor example:\n.nf\n.sp\n.RS 4n\nsymbol ::= definition | alternate1 | alternate2 ...\n.RE\n.fi\n.PP\nEach\n\\fIproduction rule\\fR\nreferences others and thus makes up a\ngrammar for the language.\nEBNF also contains the following\noperators, which many readers will recognize from regular\nexpressions.\nDo not, however, confuse them with\n\\(lqwildcard\\(rq\ncharacters, which have different meanings.\n.TP 6n\n\\&?\nMeans that the preceding symbol (or group of symbols) is optional.\nThat is, it may appear once or not at all.\n.TP 6n\n*\nMeans that the preceding symbol (or group of symbols) may appear\nzero or more times.\n.TP 6n\n+\nMeans that the preceding symbol (or group of symbols) may appear\none or more times.\n.PP\nParentheses may be used to group symbols together.\nFor clarity,\nwe will use single quotes\n('')\nto designate what is a verbatim character string (as opposed to a symbol name).\n.SS \"Aliases\"\nThere are four kinds of aliases:\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR\nand\n\\fICmnd_Alias\\fR.\nBeginning with\n\\fBsudo\\fR\n1.9.0,\n\\fICmd_Alias\\fR\nmay be used in place of\n\\fICmnd_Alias\\fR\nif desired.\n.nf\n.sp\n.RS 0n\nAlias ::= 'User_Alias'  User_Alias_Spec (':' User_Alias_Spec)* |\n          'Runas_Alias' Runas_Alias_Spec (':' Runas_Alias_Spec)* |\n          'Host_Alias'  Host_Alias_Spec (':' Host_Alias_Spec)* |\n          'Cmnd_Alias'  Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)* |\n          'Cmd_Alias'   Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)*\n\nUser_Alias ::= NAME\n\nUser_Alias_Spec ::= User_Alias '=' User_List\n\nRunas_Alias ::= NAME\n\nRunas_Alias_Spec ::= Runas_Alias '=' Runas_List\n\nHost_Alias ::= NAME\n\nHost_Alias_Spec ::= Host_Alias '=' Host_List\n\nCmnd_Alias ::= NAME\n\nCmnd_Alias_Spec ::= Cmnd_Alias '=' Cmnd_List\n\nNAME ::= [A-Z]([A-Z][0-9]_)*\n.RE\n.fi\n.PP\nEach\n\\fIalias\\fR\ndefinition is of the form\n.nf\n.sp\n.RS 0n\nAlias_Type NAME = item1, item2, ...\n.RE\n.fi\n.PP\nwhere\n\\fIAlias_Type\\fR\nis one of\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR,\nor\n\\fICmnd_Alias\\fR.\nA\n\\fRNAME\\fR\nis a string of uppercase letters, numbers,\nand underscore characters\n(\\(oq_\\(cq).\nA\n\\fRNAME\\fR\n\\fBmust\\fR\nstart with an\nuppercase letter.\nIt is possible to put several alias definitions\nof the same type on a single line, joined by a colon\n(\\(oq:\\&\\(cq).\nFor example:\n.nf\n.sp\n.RS 0n\nAlias_Type NAME = item1, item2, item3 : NAME = item4, item5\n.RE\n.fi\n.PP\nIt is a syntax error to redefine an existing\n\\fIalias\\fR.\nIt is possible to use the same name for\n\\fIaliases\\fR\nof different types, but this is not recommended.\n.PP\nThe definitions of what constitutes a valid\n\\fIalias\\fR\nmember follow.\n.nf\n.sp\n.RS 0n\nUser_List ::= User |\n              User ',' User_List\n\nUser ::= '!'* user name |\n         '!'* #user-ID |\n         '!'* %group |\n         '!'* %#group-ID |\n         '!'* +netgroup |\n         '!'* %:nonunix_group |\n         '!'* %:#nonunix_gid |\n         '!'* User_Alias\n.RE\n.fi\n.PP\nA\n\\fIUser_List\\fR\nis made up of one or more user names, user-IDs\n(prefixed with\n\\(oq#\\(cq),\nsystem group names and IDs (prefixed with\n\\(oq%\\(cq\nand\n\\(oq%#\\(cq\nrespectively), netgroups (prefixed with\n\\(oq+\\(cq),\nnon-Unix group names and IDs (prefixed with\n\\(oq%:\\(cq\nand\n\\(oq%:#\\(cq\nrespectively), and\n\\fIUser_Alias\\fRes.\nEach list item may be prefixed with zero or more\n\\(oq\\&!\\(cq\noperators.\nAn odd number of\n\\(oq\\&!\\(cq\noperators negate the value of\nthe item; an even number just cancel each other out.\nUser netgroups are matched using the user and domain members only;\nthe host member is not used when matching.\n.PP\nA\n\\fIuser name\\fR,\n\\fIuser-ID\\fR,\n\\fIgroup\\fR,\n\\fIgroup-ID\\fR,\n\\fInetgroup\\fR,\n\\fInonunix_group\\fR\nor\n\\fInonunix_gid\\fR\nmay be enclosed in double quotes to avoid the\nneed for escaping special characters.\nAlternately, special characters\nmay be specified in escaped hex mode, e.g., \\ex20 for space.\nWhen\nusing double quotes, any prefix characters must be included inside\nthe quotes.\n.PP\nThe actual\n\\fInonunix_group\\fR\nand\n\\fInonunix_gid\\fR\nsyntax depends on\nthe underlying group provider plugin.\nFor instance, the QAS AD plugin supports the following formats:\n.TP 3n\n\\fB\\(bu\\fR\nGroup in the same domain: \"%:Group Name\"\n.TP 3n\n\\fB\\(bu\\fR\nGroup in any domain: \"%:Group Name@FULLY.QUALIFIED.DOMAIN\"\n.TP 3n\n\\fB\\(bu\\fR\nGroup SID: \"%:S-1-2-34-5678901234-5678901234-5678901234-567\"\n.PP\nSee\n\\fIGROUP PROVIDER PLUGINS\\fR\nfor more information.\n.PP\nQuotes around group names are optional.\nUnquoted strings must use a backslash\n(\\(oq\\e\\(cq)\nto escape spaces and special characters.\nSee\n\\fIOther special characters and reserved words\\fR\nfor a list of\ncharacters that need to be escaped.\n.nf\n.sp\n.RS 0n\nRunas_List ::= Runas_Member |\n               Runas_Member ',' Runas_List\n\nRunas_Member ::= '!'* user name |\n                 '!'* #user-ID |\n                 '!'* %group |\n                 '!'* %#group-ID |\n                 '!'* %:nonunix_group |\n                 '!'* %:#nonunix_gid |\n                 '!'* +netgroup |\n                 '!'* Runas_Alias |\n                 '!'* ALL\n.RE\n.fi\n.PP\nA\n\\fIRunas_List\\fR\nis similar to a\n\\fIUser_List\\fR\nexcept that instead\nof\n\\fIUser_Alias\\fRes\nit can contain\n\\fIRunas_Alias\\fRes.\nUser names and groups are matched as strings.\nIn other words, two users (groups) with the same user (group) ID\nare considered to be distinct.\nIf you wish to match all user names with the same user-ID (e.g.,\n\\fBroot\\fR\nand\n\\fBtoor\\fR),\nyou can use a user-ID instead of a name (#0 in the example given).\nThe user-ID or group-ID specified in a\n\\fIRunas_Member\\fR\nneed not be listed in the password or group database.\n.nf\n.sp\n.RS 0n\nHost_List ::= Host |\n              Host ',' Host_List\n\nHost ::= '!'* host name |\n         '!'* ip_addr |\n         '!'* network(/netmask)? |\n         '!'* +netgroup |\n         '!'* Host_Alias |\n         '!'* ALL\n.RE\n.fi\n.PP\nA\n\\fIHost_List\\fR\nis made up of one or more host names, IP addresses,\nnetwork numbers, netgroups (prefixed with\n\\(oq+\\(cq),\nand other aliases.\nAgain, the value of an item may be negated with the\n\\(oq\\&!\\(cq\noperator.\nHost netgroups are matched using the host (both qualified and unqualified)\nand domain members only; the user member is not used when matching.\nIf you specify a network number without a netmask,\n\\fBsudo\\fR\nwill query each of the local host's network interfaces and,\nif the network number corresponds to one of the hosts's network\ninterfaces, will use the netmask of that interface.\nThe netmask may be specified either in standard IP address notation\n(e.g., 255.255.255.0 or ffff:ffff:ffff:ffff::),\nor CIDR notation (number of bits, e.g., 24 or 64).\nA host name may include shell-style wildcards (see the\n\\fIWildcards\\fR\nsection below),\nbut unless the\n\\fIhostname\\fR\ncommand on your machine returns the fully\nqualified host name, you'll need to use the\n\\fIfqdn\\fR\nflag for wildcards to be useful.\n\\fBsudo\\fR\nonly inspects actual network interfaces; this means that IP address\n127.0.0.1 (localhost) will never match.\nAlso, the host name\n\\(lqlocalhost\\(rq\nwill only match if that is the actual host name, which is usually\nonly the case for non-networked systems.\n.nf\n.sp\n.RS 0n\ndigest ::= [A-Fa-f0-9]+ |\n           [A-Za-z0-9\\e+/=]+\n\nDigest_Spec ::= \"sha224\" ':' digest |\n                \"sha256\" ':' digest |\n                \"sha384\" ':' digest |\n                \"sha512\" ':' digest\n\nDigest_List ::= Digest_Spec |\n                Digest_Spec ',' Digest_List\n\nCmnd_List ::= Cmnd |\n              Cmnd ',' Cmnd_List\n\ncommand name ::= regex |\n                 file name\n\ncommand ::= command name |\n            command name args |\n            command name regex |\n            command name '\"\"' |\n            ALL\n\nEdit_Spec ::= \"sudoedit\" file name+ |\n              \"sudoedit\" regex |\n              \"sudoedit\"\n\nList_Spec ::= \"list\"\n\nCmnd ::= Digest_List? '!'* command |\n         '!'* directory |\n         '!'* Edit_Spec |\n         '!'* List_Spec |\n         '!'* Cmnd_Alias\n.RE\n.fi\n.PP\nA\n\\fICmnd_List\\fR\nis a list of one or more commands, directories, or aliases.\nA command is a fully qualified file name, which may include\nshell-style wildcards (see the\n\\fIWildcards\\fR\nsection below),\nor a regular expression that starts with\n\\(oq^\\(cq\nand ends with\n\\(oq$\\(cq\n(see the\n\\fIRegular expressions\\fR\nsection below).\nA directory is a\nfully qualified path name ending in a\n\\(oq/\\(cq.\nWhen you specify a directory in a\n\\fICmnd_List\\fR,\nthe user will be able to run any file within that directory\n(but not in any sub-directories therein).\nIf no command line arguments are specified, the user may run the\ncommand with any arguments they choose.\nCommand line arguments can include wildcards or be a regular\nexpression that starts with\n\\(oq^\\(cq\nand ends with\n\\(oq$\\(cq.\nIf the command line arguments consist of\n\\(oq\\&\"\"\\(cq,\nthe command may only be run with\n\\fIno\\fR\narguments.\n.PP\nIf a\n\\fICmnd\\fR\nhas associated command line arguments, the arguments\nin the\n\\fICmnd\\fR\nmust match those given by the user on the command line.\nIf the arguments in a\n\\fICmnd\\fR\nbegin with the\n\\(oq^\\(cq\ncharacter, they will be interpreted as a regular expression\nand matched accordingly.\nOtherwise, shell-style wildcards are used when matching.\nUnless a regular expression is specified, the following characters must\nbe escaped with a\n\\(oq\\e\\(cq\nif they are used in command arguments:\n\\(oq,\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq=\\&\\(cq,\n\\(oq\\e\\(cq.\nTo prevent arguments in a\n\\fICmnd\\fR\nthat begin with a\n\\(oq^\\(cq\ncharacter from being interpreted as a regular expression, the\n\\(oq^\\(cq\nmust be escaped with a\n\\(oq\\e\\(cq.\n.PP\nThere are two commands built into\n\\fBsudo\\fR\nitself:\n\\(lqlist\\(rq\nand\n\\(lqsudoedit\\(rq.\nUnlike other commands, these two must be specified in the\n\\fIsudoers\\fR\nfile\n\\fIwithout\\fR\na leading path.\n.PP\nThe\n\\(lqlist\\(rq\nbuilt-in can be used to permit a user to list another user's privileges with\n\\fBsudo\\fR's\n\\fB\\-U\\fR\noption.\nFor example,\n\\(lqsudo -l -U otheruser\\(rq.\nA user with the\n\\(lqlist\\(rq\nprivilege is able to list another user's privileges even if they\ndon't have permission to run commands as that user.\nBy default, only root or a user with the ability to run any command as\neither root or the specified\n\\fIuser\\fR\non the current host may use the\n\\fB\\-U\\fR\noption.\nNo command line arguments may be specified with the\n\\(lqlist\\(rq\nbuilt-in.\n.PP\nThe\n\\(lqsudoedit\\(rq\nbuilt-in is used to permit a user to run\n\\fBsudo\\fR\nwith the\n\\fB\\-e\\fR\noption (or as\n\\fBsudoedit\\fR).\nIt may take command line arguments just as a normal command does.\nUnlike other commands,\n\\(lqsudoedit\\(rq\nis built into\n\\fBsudo\\fR\nitself and must be specified in the\n\\fIsudoers\\fR\nfile\n\\fIwithout\\fR\na leading path.\nIf a leading path is present, for example\n\\fI/usr/bin/sudoedit\\fR,\nthe path name will be silently converted to\n\\(lqsudoedit\\(rq.\nA fully-qualified path for\n\\fBsudoedit\\fR\nis treated as an error by\n\\fBvisudo\\fR.\n.PP\nA\n\\fIcommand\\fR\nmay be preceded by a\n\\fIDigest_List\\fR,\na comma-separated list of one or more\n\\fIDigest_Spec\\fR\nentries.\nIf a\n\\fIDigest_List\\fR\nis present, the command will only match successfully if it can be verified\nusing one of the SHA-2 digests in the list.\nStarting with version 1.9.0, the\n\\fBALL\\fR\nreserved word can be used in conjunction with a\n\\fIDigest_List\\fR.\nThe following digest formats are supported: sha224, sha256, sha384, and sha512.\nThe string may be specified in either hex or base64 format\n(base64 is more compact).\nThere are several utilities capable of generating SHA-2 digests in hex\nformat such as openssl, shasum, sha224sum, sha256sum, sha384sum, sha512sum.\n.PP\nFor example, using openssl:\n.nf\n.sp\n.RS 0n\n$ openssl dgst -sha224 /bin/ls\nSHA224(/bin/ls)= 118187da8364d490b4a7debbf483004e8f3e053ec954309de2c41a25\n.RE\n.fi\n.PP\nIt is also possible to use openssl to generate base64 output:\n.nf\n.sp\n.RS 0n\n$ openssl dgst -binary -sha224 /bin/ls | openssl base64\nEYGH2oNk1JC0p9679IMATo8+BT7JVDCd4sQaJQ==\n.RE\n.fi\n.PP\nWarning, if the user has write access to the command itself (directly or via a\n\\fBsudo\\fR\ncommand), it may be possible for the user to replace the command after the\ndigest check has been performed but before the command is executed.\nA similar race condition exists on systems that lack the\nfexecve(2)\nsystem call when the directory in which the command is located\nis writable by the user.\nSee the description of the\n\\fIfdexec\\fR\nsetting for more information on how\n\\fBsudo\\fR\nexecutes commands that have an associated digest.\n.PP\nCommand digests are only supported by version 1.8.7 or higher.\n.SS \"Defaults\"\nCertain configuration options may be changed from their default\nvalues at run-time via one or more\n\\fIDefault_Entry\\fR\nlines.\nThese may affect all users on any host, all users on a specific host, a\nspecific user, a specific command, or commands being run as a specific user.\nPer-command entries may not include command line arguments.\nIf you need to specify arguments, define a\n\\fICmnd_Alias\\fR\nand reference\nthat instead.\n.nf\n.sp\n.RS 0n\nDefault_Type ::= 'Defaults' |\n                 'Defaults' '@' Host_List |\n                 'Defaults' ':' User_List |\n                 'Defaults' '!' Cmnd_List |\n                 'Defaults' '>' Runas_List\n\nDefault_Entry ::= Default_Type Parameter_List\n\nParameter_List ::= Parameter |\n                   Parameter ',' Parameter_List\n\nParameter ::= Parameter '=' Value |\n              Parameter '+=' Value |\n              Parameter '-=' Value |\n              '!'* Parameter\n.RE\n.fi\n.PP\nParameters may be\n\\fBflags\\fR,\n\\fBinteger\\fR\nvalues,\n\\fBstrings\\fR,\nor\n\\fBlists\\fR.\nFlags are implicitly boolean and can be turned off via the\n\\(oq\\&!\\(cq\noperator.\nSome integer, string and list parameters may also be\nused in a boolean context to disable them.\nValues may be enclosed\nin double quotes\n(\\&\"\")\nwhen they contain multiple words.\nSpecial characters may be escaped with a backslash\n(\\(oq\\e\\(cq).\n.PP\nTo include a literal backslash character in a command line argument\nyou must escape the backslash twice.\nFor example, to match\n\\(oq\\en\\(cq\nas part of a command line argument, you must use\n\\(oq\\e\\e\\e\\en\\(cq\nin the\n\\fIsudoers\\fR\nfile.\nThis is due to there being two levels of escaping, one in the\n\\fIsudoers\\fR\nparser itself and another when command line arguments are matched by the\nfnmatch(3)\nor\nregexec(3)\nfunction.\n.PP\nLists have two additional assignment operators,\n\\(oq+=\\(cq\nand\n\\(oq-=\\(cq.\nThese operators are used to add to and delete from a list respectively.\nIt is not an error to use the\n\\(oq-=\\(cq\noperator to remove an element\nthat does not exist in a list.\n.PP\nDefaults entries are parsed in the following order: global, host,\nuser, and runas Defaults first, then command defaults.\nIf there are multiple Defaults settings of the same type, the last\nmatching setting is used.\nThe following Defaults settings are parsed before all others since\nthey may affect subsequent entries:\n\\fIfqdn\\fR,\n\\fIgroup_plugin\\fR,\n\\fIrunas_default\\fR,\n\\fIsudoers_locale\\fR.\n.PP\nSee\n\\fISUDOERS OPTIONS\\fR\nfor a list of supported Defaults parameters.\n.SS \"User specification\"\n.nf\n.RS 0n\nUser_Spec ::= User_List Host_List '=' Cmnd_Spec_List \\e\n              (':' Host_List '=' Cmnd_Spec_List)*\n\nCmnd_Spec_List ::= Cmnd_Spec |\n                   Cmnd_Spec ',' Cmnd_Spec_List\n\nCmnd_Spec ::= Runas_Spec? Option_Spec* (Tag_Spec ':')* Cmnd\n\nRunas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'\n\n.ie \\n(SL \\{\\\n.ie \\n(PS Option_Spec ::= (SELinux_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec)\n.el Option_Spec ::= (SELinux_Spec | Date_Spec | Timeout_Spec)\n.\\}\n.el \\{\\\n.ie \\n(PS Option_Spec ::= (Solaris_Priv_Spec | Date_Spec | Timeout_Spec)\n.el Option_Spec ::= (Date_Spec | Timeout_Spec)\n.\\}\n\n.if \\n(SL \\{\\\nSELinux_Spec ::= ('ROLE=role' | 'TYPE=type')\n\n.\\}\nAppArmor_Spec ::= 'APPARMOR_PROFILE=profile'\n\n.if \\n(PS \\{\\\nSolaris_Priv_Spec ::= ('PRIVS=privset' | 'LIMITPRIVS=privset')\n\n.\\}\nDate_Spec ::= ('NOTBEFORE=timestamp' | 'NOTAFTER=timestamp')\n\nTimeout_Spec ::= 'TIMEOUT=timeout'\n\nChdir_Spec ::= 'CWD=directory'\n\nChroot_Spec ::= 'CHROOT=directory'\n\nTag_Spec ::= ('EXEC' | 'NOEXEC' | 'FOLLOW' | 'NOFOLLOW' |\n              'LOG_INPUT' | 'NOLOG_INPUT' | 'LOG_OUTPUT' |\n              'NOLOG_OUTPUT' | 'MAIL' | 'NOMAIL' | 'INTERCEPT' |\n              'NOINTERCEPT' | 'PASSWD' | 'NOPASSWD' | 'SETENV' |\n              'NOSETENV')\n.RE\n.fi\n.PP\nA\n\\fBuser specification\\fR\ndetermines which commands a user may run\n(and as what user) on specified hosts.\nBy default, commands are run as\n\\fB@runas_default@\\fR\n(unless\n\\fIrunas_default\\fR\nhas been set to a different value)\nbut this can also be changed on a per-command basis.\n.PP\nThe basic structure of a user specification is\n\\(lqwho where = (as_whom) what\\(rq.\nLet's break that down into its constituent parts:\n.SS \"Runas_Spec\"\nA\n\\fIRunas_Spec\\fR\ndetermines the user and/or the group that a command\nmay be run as.\nA fully-specified\n\\fIRunas_Spec\\fR\nconsists of two\n\\fIRunas_List\\fRs\n(as defined above) separated by a colon\n(\\(oq:\\&\\(cq)\nand enclosed in a set of parentheses.\nThe first\n\\fIRunas_List\\fR\nindicates which users the command may be run as via the\n\\fB\\-u\\fR\noption.\nThe second defines a list of groups that may be specified via the\n\\fB\\-g\\fR\noption (in addition to any of the target user's groups).\nIf both\n\\fIRunas_List\\fRs\nare specified, the command may be run with any combination of users\nand groups listed in their respective\n\\fIRunas_List\\fRs.\nIf only the first is specified, the command may be run as any user\nin the list and, optionally, with any group the target user belongs to.\nIf the first\n\\fIRunas_List\\fR\nis empty but the\nsecond is specified, the command may be run as the invoking user\nwith the group set to any listed in the\n\\fIRunas_List\\fR.\nIf both\n\\fIRunas_List\\fRs\nare empty, the command may only be run as the invoking user and the\ngroup, if specified, must be one that the invoking user is a member of.\nIf no\n\\fIRunas_Spec\\fR\nis specified, the command may only be run as the\n\\fIrunas_default\\fR\nuser\n(\\fB@runas_default@\\fR\nby default) and the group,\nif specified, must be one that the\n\\fIrunas_default\\fR\nuser is a member of.\n.PP\nA\n\\fIRunas_Spec\\fR\nsets the default for the commands that follow it.\nWhat this means is that for the entry:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm\n.RE\n.fi\n.PP\nThe user\n\\fBdgb\\fR\nmay run\n\\fI/bin/ls\\fR,\n\\fI/bin/kill\\fR,\nand\n\\fI/usr/bin/lprm\\fR\non the host\nboulder\\(embut\nonly as\n\\fBoperator\\fR.\nFor example:\n.nf\n.sp\n.RS 0n\n$ sudo -u operator /bin/ls\n.RE\n.fi\n.PP\nIt is also possible to override a\n\\fIRunas_Spec\\fR\nlater on in an entry.\nIf we modify the entry like so:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm\n.RE\n.fi\n.PP\nThen user\n\\fBdgb\\fR\nis now allowed to run\n\\fI/bin/ls\\fR\nas\n\\fBoperator\\fR,\nbut\n\\fI/bin/kill\\fR\nand\n\\fI/usr/bin/lprm\\fR\nas\n\\fBroot\\fR.\n.PP\nWe can extend this to allow\n\\fBdgb\\fR\nto run\n\\fI/bin/ls\\fR\nwith either\nthe user or group set to\n\\fBoperator\\fR:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator : operator) /bin/ls, (root) /bin/kill,\\e\n\t/usr/bin/lprm\n.RE\n.fi\n.PP\nWhile the group portion of the\n\\fIRunas_Spec\\fR\npermits the\nuser to run as command with that group, it does not force the user\nto do so.\nIf no group is specified on the command line, the command\nwill run with the group listed in the target user's password database\nentry.\nThe following would all be permitted by the sudoers entry above:\n.nf\n.sp\n.RS 0n\n$ sudo -u operator /bin/ls\n$ sudo -u operator -g operator /bin/ls\n$ sudo -g operator /bin/ls\n.RE\n.fi\n.PP\nIn the following example, user\n\\fBtcm\\fR\nmay run commands that access\na modem device file with the dialer group.\n.nf\n.sp\n.RS 0n\ntcm\tboulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\\e\n\t/usr/local/bin/minicom\n.RE\n.fi\n.PP\nIn this example only the group will be set, the command still runs as user\n\\fBtcm\\fR.\nFor example:\n.nf\n.sp\n.RS 0n\n$ sudo -g dialer /usr/bin/cu\n.RE\n.fi\n.PP\nMultiple users and groups may be present in a\n\\fIRunas_Spec\\fR,\nin which case the user may select any combination of users and groups via the\n\\fB\\-u\\fR\nand\n\\fB\\-g\\fR\noptions.\nIn this example:\n.nf\n.sp\n.RS 0n\nalan\tALL = (root, bin : operator, system) ALL\n.RE\n.fi\n.PP\nuser\n\\fBalan\\fR\nmay run any command as either user\n\\fBroot\\fR\nor\n\\fBbin\\fR,\noptionally setting the group to operator or system.\n.SS \"Option_Spec\"\nA\n\\fICmnd\\fR\nmay have zero or more options associated with it.\nOptions may consist of\n.if \\n(SL \\{\\\nSELinux roles and/or types,\n.\\}\nAppArmor profiles,\n.if \\n(PS \\{\\\nSolaris privileges sets,\n.\\}\nstart and/or end dates and command timeouts.\nOnce an option is set for a\n\\fICmnd\\fR,\nsubsequent\n\\fICmnd\\fRs\nin the\n\\fICmnd_Spec_List\\fR,\ninherit that option unless it is overridden by another option.\nOption names are reserved words in\n\\fIsudoers\\fR.\nThis means that none of the valid option names (see below) can be used\nwhen declaring an alias.\n.if \\n(SL \\{\\\n.SS \"SELinux_Spec\"\nOn systems with SELinux support,\n\\fIsudoers\\fR\nfile entries may optionally have an SELinux role and/or type associated\nwith a command.\nThis can be used to implement a form of role-based access control (RBAC).\nIf a role or\ntype is specified with the command it will override any default values\nspecified in\n\\fIsudoers\\fR.\nA role or type specified on the command line,\nhowever, will supersede the values in\n\\fIsudoers\\fR.\n.\\}\n.SS \"AppArmor_Spec\"\nOn systems supporting AppArmor,\n\\fIsudoers\\fR\nfile entries may optionally specify an AppArmor profile that should be\nused to confine a command.\nIf an AppArmor profile is specified with the command, it will override\nany default values specified in\n\\fIsudoers\\fR.\nAppropriate profile transition rules must be defined to support the\nprofile change specified for a user.\n.PP\nAppArmor profiles can be specified in any way that complies with the\nrules of\naa_change_profile(2).\nFor instance, in the following\n\\fIsudoers\\fR\nentry\n.nf\n.sp\n.RS 0n\nalice\tALL = (root)\tAPPARMOR_PROFILE=my-profile\tALL\n.RE\n.fi\n.PP\nthe user\n\\fBalice\\fR\nmay run any command as\n\\fBroot\\fR\nunder confinement by the profile\n\\(oqmy-profile\\(cq.\nYou can also stack profiles, or allow a user to run commands unconfined by\nany profile.\nFor example:\n.nf\n.sp\n.RS 0n\nbob\tALL = (root)\tAPPARMOR_PROFILE=foo//&bar\t/usr/bin/vi\ncathy\tALL = (root)\tAPPARMOR_PROFILE=unconfined\t/bin/ls\n.RE\n.fi\n.PP\nThese\n\\fIsudoers\\fR\nentries allow user\n\\fBbob\\fR\nto run\n\\fI/usr/bin/vi\\fR\nas\n\\fBroot\\fR\nunder the stacked profiles\n\\(oqfoo\\(cq\nand\n\\(oqbar\\(cq,\nand user\n\\fBcathy\\fR\nto run\n\\fI/bin/ls\\fR\nwithout any confinement at all.\n.if \\n(PS \\{\\\n.SS \"Solaris_Priv_Spec\"\nOn Solaris systems,\n\\fIsudoers\\fR\nfile entries may optionally specify Solaris privilege set and/or limit\nprivilege set associated with a command.\nIf privileges or limit privileges are specified with the command\nit will override any default values specified in\n\\fIsudoers\\fR.\n.PP\nA privilege set is a comma-separated list of privilege names.\nThe\nppriv(1)\ncommand can be used to list all privileges known to the system.\nFor example:\n.nf\n.sp\n.RS 0n\n$ ppriv -l\n.RE\n.fi\n.PP\nIn addition, there are several\n\\(lqspecial\\(rq\nprivilege strings:\n.TP 7n\nnone\nthe empty set\n.TP 7n\nall\nthe set of all privileges\n.TP 7n\nzone\nthe set of all privileges available in the current zone\n.TP 7n\nbasic\nthe default set of privileges normal users are granted at login time\n.PP\nPrivileges can be excluded from a set by prefixing the privilege\nname with either an\n\\(oq\\&!\\(cq\nor\n\\(oq\\-\\(cq\ncharacter.\n.\\}\n.SS \"Date_Spec\"\n\\fBsudoers\\fR\nrules can be specified with a start and end date via the\n\\fRNOTBEFORE\\fR\nand\n\\fRNOTAFTER\\fR\nsettings.\nThe time stamp must be specified in\n\\(lqGeneralized Time\\(rq\nas defined by RFC 4517.\nThe format is effectively\n\\(oqyyyymmddHHMMSSZ\\(cq\nwhere the minutes and seconds are optional.\nThe\n\\(oqZ\\(cq\nsuffix indicates that the time stamp is in Coordinated Universal Time (UTC).\nIt is also possible to specify a timezone offset from UTC in hours\nand minutes instead of a\n\\(oqZ\\(cq.\nFor example,\n\\(oq-0500\\(cq\nwould correspond to Eastern Standard time in the US.\nAs an extension, if no\n\\(oqZ\\(cq\nor timezone offset is specified, local time will be used.\n.PP\nThe following are all valid time stamps:\n.nf\n.sp\n.RS 4n\n20170214083000Z\n2017021408Z\n20160315220000-0500\n20151201235900\n.RE\n.fi\n.SS \"Timeout_Spec\"\nA command may have a timeout associated with it.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nThe timeout may be specified in combinations of days, hours,\nminutes, and seconds with a single-letter case-insensitive suffix\nthat indicates the unit of time.\nFor example, a timeout of 7 days, 8 hours, 30 minutes, and\n10 seconds would be written as\n\\(oq7d8h30m10s\\(cq.\nIf a number is specified without a unit, seconds are assumed.\nAny of the days, minutes, hours, or seconds may be omitted.\nThe order must be from largest to smallest unit and a unit\nmay not be specified more than once.\n.PP\nThe following are all\n\\fIvalid\\fR\ntimeout values:\n\\(oq7d8h30m10s\\(cq,\n\\(oq14d\\(cq,\n\\(oq8h30m\\(cq,\n\\(oq600s\\(cq,\n\\(oq3600\\(cq.\nThe following are\n\\fIinvalid\\fR\ntimeout values:\n\\(oq12m2w1d\\(cq,\n\\(oq30s10m4h\\(cq,\n\\(oq1d2d3h\\(cq.\n.PP\nThis setting is only supported by version 1.8.20 or higher.\n.SS \"Chdir_Spec\"\nThe working directory that the command will be run in can be specified\nusing the\n\\fRCWD\\fR\nsetting.\nThe\n\\fIdirectory\\fR\nmust be a fully-qualified path name beginning with a\n\\(oq/\\(cq\nor\n\\(oq~\\(cq\ncharacter, or the special value\n\\(lq*\\(rq.\nA value of\n\\(lq*\\(rq\nindicates that the user may specify the working directory by running\n\\fBsudo\\fR\nwith the\n\\fB\\-D\\fR\noption.\nBy default, commands are run from the invoking user's current working\ndirectory, unless the\n\\fB\\-i\\fR\noption is given.\nPath names of the form\n\\fI~user/path/name\\fR\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.PP\nThis setting is only supported by version 1.9.3 or higher.\n.SS \"Chroot_Spec\"\nThe root directory that the command will be run in can be specified\nusing the\n\\fRCHROOT\\fR\nsetting.\nThe\n\\fIdirectory\\fR\nmust be a fully-qualified path name beginning with a\n\\(oq/\\(cq\nor\n\\(oq~\\(cq\ncharacter, or the special value\n\\(lq*\\(rq.\nA value of\n\\(lq*\\(rq\nindicates that the user may specify the root directory by running\n\\fBsudo\\fR\nwith the\n\\fB\\-R\\fR\noption.\nThis setting can be used to run the command in a\nchroot(2)\n\\(lqsandbox\\(rq\nsimilar to the\nchroot(@mansectsu@)\nutility.\nPath names of the form\n\\fI~user/path/name\\fR\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.PP\nThis setting is only supported by version 1.9.3 or higher.\n.SS \"Tag_Spec\"\nA command may have zero or more tags associated with it.\nThe following tag values are supported:\n\\fREXEC\\fR,\n\\fRNOEXEC\\fR,\n\\fRFOLLOW\\fR,\n\\fRNOFOLLOW\\fR,\n\\fRLOG_INPUT\\fR,\n\\fRNOLOG_INPUT\\fR,\n\\fRLOG_OUTPUT\\fR,\n\\fRNOLOG_OUTPUT\\fR,\n\\fRMAIL\\fR,\n\\fRNOMAIL\\fR,\n\\fRINTERCEPT\\fR,\n\\fRNOINTERCEPT\\fR,\n\\fRPASSWD\\fR,\n\\fRNOPASSWD\\fR,\n\\fRSETENV\\fR,\nand\n\\fRNOSETENV\\fR.\nOnce a tag is set on a\n\\fICmnd\\fR,\nsubsequent\n\\fICmnd\\fRs\nin the\n\\fICmnd_Spec_List\\fR,\ninherit the tag unless it is overridden by the opposite tag (in other words,\n\\fRPASSWD\\fR\noverrides\n\\fRNOPASSWD\\fR\nand\n\\fRNOEXEC\\fR\noverrides\n\\fREXEC\\fR).\n.TP 2n\n\\fREXEC\\fR and \\fRNOEXEC\\fR\n.sp\nIf\n\\fBsudo\\fR\nhas been compiled with\n\\fInoexec\\fR\nsupport and the underlying operating system supports it, the\n\\fRNOEXEC\\fR\ntag can be used to prevent a dynamically-linked executable from\nrunning further commands itself.\n.sp\nIn the following example, user\n\\fBaaron\\fR\nmay run\n\\fI/usr/bin/more\\fR\nand\n\\fI/usr/bin/vi\\fR\nbut shell escapes will be disabled.\n.nf\n.sp\n.RS 2n\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.RE\n.fi\n.RS 2n\n.sp\nSee the\n\\fIPreventing shell escapes\\fR\nsection below for more details on how\n\\fRNOEXEC\\fR\nworks and whether or not it will work on your system.\n.RE\n.TP 2n\n\\fRFOLLOW\\fR and \\fRNOFOLLOW\\fR\n.sp\nStarting with version 1.8.15,\n\\fBsudoedit\\fR\nwill not open a file that is a symbolic link unless the\n\\fIsudoedit_follow\\fR\nflag is enabled.\nThe\n\\fRFOLLOW\\fR\nand\n\\fRNOFOLLOW\\fR\ntags override the value of\n\\fIsudoedit_follow\\fR\nand can be used to permit (or deny) the editing of symbolic links\non a per-command basis.\nThese tags are only effective for the\n\\fIsudoedit\\fR\ncommand and are ignored for all other commands.\n.TP 2n\n\\fRLOG_INPUT\\fR and \\fRNOLOG_INPUT\\fR\n.sp\nThese tags override the value of the\n\\fIlog_input\\fR\nflag on a per-command basis.\nFor more information, see\n\\fII/O LOGGING\\fR.\n.TP 2n\n\\fRLOG_OUTPUT\\fR and \\fRNOLOG_OUTPUT\\fR\n.sp\nThese tags override the value of the\n\\fIlog_output\\fR\nflag on a per-command basis.\nFor more information, see\n\\fII/O LOGGING\\fR.\n.TP 2n\n\\fRMAIL\\fR and \\fRNOMAIL\\fR\n.sp\nThese tags provide fine-grained control over whether\nmail will be sent when a user runs a command by\noverriding the value of the\n\\fImail_all_cmnds\\fR\nflag on a per-command basis.\nThey have no effect when\n\\fBsudo\\fR\nis run with the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noptions.\nA\n\\fRNOMAIL\\fR\ntag will also override the\n\\fImail_always\\fR\nand\n\\fImail_no_perms\\fR\noptions.\nFor more information, see the descriptions of\n\\fImail_all_cmnds\\fR,\n\\fImail_always\\fR,\nand\n\\fImail_no_perms\\fR\nin the\n\\fISUDOERS OPTIONS\\fR\nsection below.\n.TP 2n\n\\fRPASSWD\\fR and \\fRNOPASSWD\\fR\n.sp\nBy default,\n\\fBsudo\\fR\nrequires that a user authenticate\nbefore running a command.\nThis behavior can be modified via the\n\\fRNOPASSWD\\fR\ntag.\nLike a\n\\fIRunas_Spec\\fR,\nthe\n\\fRNOPASSWD\\fR\ntag sets\na default for the commands that follow it in the\n\\fICmnd_Spec_List\\fR.\nConversely, the\n\\fRPASSWD\\fR\ntag can be used to reverse things.\nFor example:\n.nf\n.sp\n.RS 2n\nray\trushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm\n.RE\n.fi\n.RS 2n\n.sp\nwould allow the user\n\\fBray\\fR\nto run\n\\fI/bin/kill\\fR,\n\\fI/bin/ls\\fR,\nand\n\\fI/usr/bin/lprm\\fR\nas\n\\fB@runas_default@\\fR\non the machine\n\\(lqrushmore\\(rq\nwithout authenticating himself.\nIf we only want\n\\fBray\\fR\nto be able to\nrun\n\\fI/bin/kill\\fR\nwithout a password the entry would be:\n.nf\n.sp\n.RS 2n\nray\trushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm\n.RE\n.fi\n.sp\nNote, however, that the\n\\fRPASSWD\\fR\ntag has no effect on users who are in the group specified by the\n\\fIexempt_group\\fR\nsetting.\n.sp\nBy default, if the\n\\fRNOPASSWD\\fR\ntag is applied to any of a user's entries for the current host,\nthe user will be able to run\n\\(oqsudo -l\\(cq\nwithout a password.\nAdditionally, a user may only run\n\\(oqsudo -v\\(cq\nwithout a password if all of the user's entries for the current\nhost have the\n\\fRNOPASSWD\\fR\ntag.\nThis behavior may be overridden via the\n\\fIverifypw\\fR\nand\n\\fIlistpw\\fR\noptions.\n.RE\n.TP 2n\n\\fRSETENV\\fR and \\fRNOSETENV\\fR\n.sp\nThese tags override the value of the\n\\fIsetenv\\fR\nflag on a per-command basis.\nIf\n\\fRSETENV\\fR\nhas been set for a command, the user may disable the\n\\fIenv_reset\\fR\nflag from the command line via the\n\\fB\\-E\\fR\noption.\nAdditionally, environment variables set on the command\nline are not subject to the restrictions imposed by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR.\nAs such, only trusted users should be allowed to set variables in this manner.\nIf the command matched is\n\\fBALL\\fR,\nthe\n\\fRSETENV\\fR\ntag is implied for that command; this default may be overridden by use of the\n\\fRNOSETENV\\fR\ntag.\n.TP 2n\n\\fRINTERCEPT\\fR and \\fRNOINTERCEPT\\fR\n.sp\nIf\n\\fBsudo\\fR\nhas been compiled with\n\\fIintercept\\fR\nsupport and the underlying operating system supports it, the\n\\fRINTERCEPT\\fR\ntag can be used to cause programs spawned by a command to be validated against\n\\fIsudoers\\fR\nand logged just like they would be if run through\n\\fBsudo\\fR\ndirectly.\nThis is useful in conjunction with commands that allow shell escapes\nsuch as editors, shells, and paginators.\nThere is additional overhead due to the policy check that may add\nlatency when running commands such as shell scripts that execute a\nlarge number of sub-commands.\nFor interactive commands, such as a shell or editor,\nthe overhead is not usually noticeable.\n.sp\nIn the following example, user\n\\fBchuck\\fR\nmay run any command on the machine\n\\(lqresearch\\(rq\nin intercept mode.\n.nf\n.sp\n.RS 2n\nchuck\tresearch = INTERCEPT: ALL\n.RE\n.fi\n.RS 2n\n.sp\nSee the\n\\fIPreventing shell escapes\\fR\nsection below for more details on how\n\\fRINTERCEPT\\fR\nworks and whether or not it will work on your system.\n.RE\n.SS \"Wildcards\"\n\\fBsudo\\fR\nallows shell-style\n\\fIwildcards\\fR\n(aka meta or glob characters)\nto be used in host names, path names, and command line arguments in the\n\\fIsudoers\\fR\nfile.\nWildcard matching is done via the\nglob(3)\nand\nfnmatch(3)\nfunctions as specified by\nIEEE Std 1003.1 (\\(lqPOSIX.1\\(rq).\n.TP 8n\n*\nMatches any set of zero or more characters (including white space).\n.TP 8n\n\\&?\nMatches any single character (including white space).\n.TP 8n\n[...]\nMatches any character in the specified range.\n.TP 8n\n[!...]\nMatches any character\n\\fInot\\fR\nin the specified range.\n.TP 8n\n\\ex\nFor any character\n\\(oqx\\(cq,\nevaluates to\n\\(oqx\\(cq.\nThis is used to escape special characters such as:\n\\(oq*\\(cq,\n\\(oq\\&?\\(cq,\n\\(oq[\\&\\(cq,\nand\n\\(oq]\\&\\(cq.\n.PP\n\\fBThese are not regular expressions.\\fR\nUnlike a regular expression there is no way to match one or more\ncharacters within a range.\n.PP\nCharacter classes may be used if your system's\nglob(3)\nand\nfnmatch(3)\nfunctions support them.\nHowever, because the\n\\(oq:\\&\\(cq\ncharacter has special meaning in\n\\fIsudoers\\fR,\nit must be\nescaped.\nFor example:\n.nf\n.sp\n.RS 4n\n/bin/ls [[\\e:\\&alpha\\e:\\&]]*\n.RE\n.fi\n.PP\nWould match any file name beginning with a letter.\n.PP\nA forward slash\n(\\(oq/\\(cq)\nwill\n\\fInot\\fR\nbe matched by\nwildcards used in the file name portion of the command.\nThis is to make a path like:\n.nf\n.sp\n.RS 4n\n/usr/bin/*\n.RE\n.fi\n.PP\nmatch\n\\fI/usr/bin/who\\fR\nbut not\n\\fI/usr/bin/X11/xterm\\fR.\n.PP\nWhen matching the command line arguments, however, a slash\n\\fIdoes\\fR\nget matched by wildcards since command line arguments may contain\narbitrary strings and not just path names.\n.PP\n\\fBWildcards in command line arguments should be used with care.\\fR\n.br\nWildcards can match any character, including white space.\nIn most cases, it is safer to use a regular expression to match\ncommand line arguments.\nFor more information, see\n\\fIWildcards in command arguments\\fR\nbelow.\n.SS \"Exceptions to wildcard rules\"\nThe following exceptions apply to the above rules:\n.TP 10n\n\\&\"\"\nIf the empty string\n\\(oq\\&\"\"\\(cq\nis the only command line argument in the\n\\fIsudoers\\fR\nfile entry it means that command is not allowed to be run with\n\\fIany\\fR\narguments.\n.TP 10n\nsudoedit\nCommand line arguments to the\n\\fIsudoedit\\fR\nbuilt-in command should always be path names, so a forward slash\n(\\(oq/\\(cq)\nwill not be matched by a wildcard.\n.SS \"Regular expressions\"\nStarting with version 1.9.10, it is possible to use\nregular expressions for path names and command line arguments.\nRegular expressions are more expressive than shell-style\n\\fIwildcards\\fR\nand are usually safer because they provide a greater degree of\ncontrol when matching.\nThe type of regular expressions supported by\n\\fBsudoers\\fR\nare POSIX extended regular expressions, similar to those used by the\negrep(1)\nutility.\nThey are usually documented in the\nregex(@mansectmisc@)\nor\nre_format(@mansectmisc@)\nmanual, depending on the system.\nAs an extension, if the regular expression begins with\n\\(lq(?i)\\(rq,\nit will be matched in a case-insensitive manner.\n.PP\nIn\n\\fIsudoers\\fR,\nregular expressions must start with a\n\\(oq^\\(cq\ncharacter and end with a\n\\(oq$\\(cq.\nThis makes it explicit what is, or is not, a regular expression.\nEither the path name, the command line arguments or both may\nbe regular expressions.\nBecause the path name and arguments are matched separately, it is\neven possible to use wildcards for the path name and regular\nexpressions for the arguments.\nIt is not possible to use a single regular expression to match\nboth the command and its arguments.\nRegular expressions in\n\\fIsudoers\\fR\nare limited to 1024 characters.\n.PP\nThere is no need to escape\n\\fIsudoers\\fR\nspecial characters in a regular expression other than the pound sign\n(\\(oq#\\(cq).\n.PP\nIn the following example, user\n\\fBjohn\\fR\ncan run the\npasswd(1)\ncommand as\n\\fB@runas_default@\\fR\non any host but is not allowed to change\n\\fBroot\\fR's\npassword.\nThis kind of rule is impossible to express safely using wildcards.\n.nf\n.sp\n.RS 4n\njohn\tALL = /usr/bin/passwd ^[a-zA-Z0-9_]+$,\\e\n              !/usr/bin/passwd root\n.RE\n.fi\n.PP\nIt is also possible to use a regular expression in conjunction with\n\\fBsudoedit\\fR\nrules.\nThe following rule would give user bob the ability to edit the\n\\fI/etc/motd\\fR,\n\\fI/etc/issue\\fR,\nand\n\\fI/etc/hosts\\fR\nfiles only.\n.nf\n.sp\n.RS 4n\nbob    ALL = sudoedit ^/etc/(motd|issue|hosts)$\n.RE\n.fi\n.PP\nRegular expressions may also be used to match the command itself.\nIn this example, a regular expression is used to allow user\n\\fBsid\\fR\nto run the\n\\fI/usr/sbin/groupadd\\fR,\n\\fI/usr/sbin/groupmod\\fR,\n\\fI/usr/sbin/groupdel\\fR,\n\\fI/usr/sbin/useradd\\fR,\n\\fI/usr/sbin/usermod\\fR,\nand\n\\fI/usr/sbin/userdel\\fR\ncommands as\n\\fB@runas_default@\\fR.\n.nf\n.sp\n.RS 4n\nsid    ALL = ^/usr/sbin/(group|user)(add|mod|del)$\n.RE\n.fi\n.PP\nOne disadvantage of using a regular expression to match the command\nname is that it is not possible to match relative paths such as\n\\fI./useradd\\fR\nor\n\\fI../sbin/useradd\\fR.\nThis has security implications when a regular expression is used\nfor the command name in conjunction with the negation operator,\n\\(oq!\\&\\(cq,\nas such rules can be trivially bypassed.\nBecause of this, using a negated regular expression for the command name is\n\\fBstrongly discouraged\\fR.\nThis does not apply to negated commands that only use a regular\nexpression to match the command arguments.\nSee\n\\fIRegular expressions in command names\\fR\nbelow for more information.\n.SS \"Including other files from within sudoers\"\nIt is possible to include other\n\\fIsudoers\\fR\nfiles from within the\n\\fIsudoers\\fR\nfile currently being parsed using the\n\\fI@include\\fR\nand\n\\fI@includedir\\fR\ndirectives.\nFor compatibility with sudo versions prior to 1.9.1,\n\\fI#include\\fR\nand\n\\fI#includedir\\fR\nare also accepted.\n.PP\nAn include file can be used, for example, to keep a site-wide\n\\fIsudoers\\fR\nfile in addition to a local, per-machine file.\nFor the sake of this example the site-wide\n\\fIsudoers\\fR\nfile will be\n\\fI/etc/sudoers\\fR\nand the per-machine one will be\n\\fI/etc/sudoers.local\\fR.\nTo include\n\\fI/etc/sudoers.local\\fR\nfrom within\n\\fI/etc/sudoers\\fR\none would use the following line in\n\\fI/etc/sudoers\\fR:\n.nf\n.sp\n.RS 4n\n@include /etc/sudoers.local\n.RE\n.fi\n.PP\nWhen\n\\fBsudo\\fR\nreaches this line it will suspend processing of the current file\n(\\fI/etc/sudoers\\fR)\nand switch to\n\\fI/etc/sudoers.local\\fR.\nUpon reaching the end of\n\\fI/etc/sudoers.local\\fR,\nthe rest of\n\\fI/etc/sudoers\\fR\nwill be processed.\nFiles that are included may themselves include other files.\nA hard limit of 128 nested include files is enforced to prevent include\nfile loops.\n.PP\nStarting with version 1.9.1, the path to the include file may contain\nwhite space if it is escaped with a backslash\n(\\(oq\\e\\(cq).\nAlternately, the entire path may be enclosed in double quotes\n(\\&\"\"),\nin which case no escaping is necessary.\nTo include a literal backslash in the path,\n\\(oq\\e\\e\\(cq\nshould be used.\n.PP\nIf the path to the include file is not fully-qualified (does not\nbegin with a\n\\(oq/\\(cq),\nit must be located in the same directory as the sudoers file it was\nincluded from.\nFor example, if\n\\fI/etc/sudoers\\fR\ncontains the line:\n.nf\n.sp\n.RS 4n\n@include sudoers.local\n.RE\n.fi\n.PP\nthe file that will be included is\n\\fI/etc/sudoers.local\\fR.\n.PP\nThe file name may also include the\n\\(oq%h\\(cq\nescape, signifying the short form of the host name.\nIn other words, if the machine's host name is\n\\(lqxerxes\\(rq,\nthen\n.nf\n.sp\n.RS 4n\n@include /etc/sudoers.%h\n.RE\n.fi\n.PP\nwill cause\n\\fBsudo\\fR\nto include the file\n\\fI/etc/sudoers.xerxes\\fR.\n.PP\nThe\n\\fI@includedir\\fR\ndirective can be used to create a\n\\fIsudoers.d\\fR\ndirectory that the system package manager can drop\n\\fIsudoers\\fR\nfile rules into as part of package installation.\nFor example, given:\n.nf\n.sp\n.RS 4n\n@includedir /etc/sudoers.d\n.RE\n.fi\n.PP\n\\fBsudo\\fR\nwill suspend processing of the current file and read each file in\n\\fI/etc/sudoers.d\\fR,\nskipping file names that end in\n\\(oq~\\(cq\nor contain a\n\\(oq.\\&\\(cq\ncharacter to avoid causing problems with package manager or editor\ntemporary/backup files.\n.PP\nFiles are parsed in sorted lexical order.\nThat is,\n\\fI/etc/sudoers.d/01_first\\fR\nwill be parsed before\n\\fI/etc/sudoers.d/10_second\\fR.\nBe aware that because the sorting is lexical, not numeric,\n\\fI/etc/sudoers.d/1_whoops\\fR\nwould be loaded\n\\fIafter\\fR\n\\fI/etc/sudoers.d/10_second\\fR.\nUsing a consistent number of leading zeroes in the file names can be used\nto avoid such problems.\nAfter parsing the files in the directory, control returns to the\nfile that contained the\n\\fI@includedir\\fR\ndirective.\n.PP\nUnlike files included via\n\\fI@include\\fR,\n\\fBvisudo\\fR\nwill not edit the files in a\n\\fI@includedir\\fR\ndirectory unless one of them contains a syntax error.\nIt is still possible to run\n\\fBvisudo\\fR\nwith the\n\\fB\\-f\\fR\nflag to edit the files directly, but this will not catch the\nredefinition of an\n\\fIalias\\fR\nthat is also present in a different file.\n.SS \"Other special characters and reserved words\"\nThe pound sign\n(\\(oq#\\(cq)\nis used to indicate a comment (unless it is part of a #include\ndirective or unless it occurs in the context of a user name and is\nfollowed by one or more digits, in which case it is treated as a\nuser-ID).\nBoth the comment character and any text after it, up to the end of\nthe line, are ignored.\n.PP\nThe reserved word\n\\fBALL\\fR\nis a built-in\n\\fIalias\\fR\nthat always causes a match to succeed.\nIt can be used wherever one might otherwise use a\n\\fICmnd_Alias\\fR,\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\nor\n\\fIHost_Alias\\fR.\nAttempting to define an\n\\fIalias\\fR\nnamed\n\\fBALL\\fR\nwill result in a syntax error.\nUsing\n\\fBALL\\fR\ncan be dangerous since in a command context, it allows the user to run\n\\fIany\\fR\ncommand on the system.\n.PP\nThe following option names permitted in an\n\\fIOption_Spec\\fR\nare also considered reserved words:\n\\fRCHROOT\\fR,\n.if \\n(PS \\{\\\n\\fRPRIVS\\fR,\n.\\}\n.if \\n(PS \\{\\\n\\fRLIMITPRIVS\\fR,\n.\\}\n.if \\n(SL \\{\\\n\\fRROLE\\fR,\n.\\}\n.if \\n(SL \\{\\\n\\fRTYPE\\fR,\n.\\}\n\\fRTIMEOUT\\fR,\n\\fRCWD\\fR,\n\\fRNOTBEFORE\\fR\nand\n\\fRNOTAFTER\\fR.\nAttempting to define an\n\\fIalias\\fR\nwith the same name as one of the options will result in a syntax error.\n.PP\nAn exclamation point\n(\\(oq\\&!\\(cq)\ncan be used as a logical\n\\fInot\\fR\noperator in a list or\n\\fIalias\\fR\nas well as in front of a\n\\fICmnd\\fR.\nThis allows one to exclude certain values.\nFor the\n\\(oq\\&!\\(cq\noperator to be effective, there must be something for it to exclude.\nFor example, to match all users except for\n\\fBroot\\fR\none would use:\n.nf\n.sp\n.RS 4n\nALL, !root\n.RE\n.fi\n.PP\nIf the\n\\fBALL\\fR,\nis omitted, as in:\n.nf\n.sp\n.RS 4n\n!root\n.RE\n.fi\n.PP\nit would explicitly deny\n\\fBroot\\fR\nbut not match any other users.\nThis is different from a true\n\\(lqnegation\\(rq\noperator.\n.PP\nNote, however, that using a\n\\(oq\\&!\\(cq\nin conjunction with the built-in\n\\fBALL\\fR\nalias to allow a user to run\n\\(lqall but a few\\(rq\ncommands rarely works as intended (see\n\\fISECURITY NOTES\\fR\nbelow).\n.PP\nLong lines can be continued with a backslash\n(\\(oq\\e\\(cq)\nas the last character on the line.\n.PP\nWhite space between elements in a list as well as special syntactic\ncharacters in a\n\\fIUser Specification\\fR\n(\\(oq=\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq(\\&\\(cq,\n\\(oq)\\&\\(cq)\nis optional.\n.PP\nThe following characters must be escaped with a backslash\n(\\(oq\\e\\(cq)\nwhen used as part of a word (e.g., a user name or host name):\n\\(oq\\&!\\(cq,\n\\(oq=\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq,\\&\\(cq,\n\\(oq(\\&\\(cq,\n\\(oq)\\&\\(cq,\n\\(oq\\e\\(cq.\n.SH \"SUDOERS OPTIONS\"\n\\fBsudo\\fR's\nbehavior can be modified by\n\\fIDefault_Entry\\fR\nlines, as explained earlier.\nA list of all supported Defaults parameters, grouped by type, are listed below.\n.PP\n\\fBBoolean Flags\\fR:\n.TP 18n\nalways_query_group_plugin\nIf a\n\\fIgroup_plugin\\fR\nis configured, use it to resolve groups of the form\n\\(oq%group\\(cq\nas long as there is not also a system group of the same name.\nNormally, only groups of the form\n\\(oq%:group\\(cq\nare passed to the\n\\fIgroup_plugin\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nalways_set_home\nIf enabled,\n\\fBsudo\\fR\nwill set the\n\\fRHOME\\fR\nenvironment variable to the home directory of the target user\n(which is the\n\\fIrunas_default\\fR\nuser unless the\n\\fB\\-u\\fR\noption is used).\nThis flag is largely obsolete and has no effect unless the\n\\fIenv_reset\\fR\nflag has been disabled or\n\\fRHOME\\fR\nis present in the\n\\fIenv_keep\\fR\nlist, both of which are strongly discouraged.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nauthenticate\nIf set, users must authenticate themselves via a password (or other\nmeans of authentication) before they may run commands.\nThis default may be overridden via the\n\\fRPASSWD\\fR\nand\n\\fRNOPASSWD\\fR\ntags.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\ncase_insensitive_group\nIf enabled, group names in\n\\fIsudoers\\fR\nwill be matched in a case insensitive manner.\nThis may be necessary when users are stored in LDAP or AD.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\ncase_insensitive_user\nIf enabled, user names in\n\\fIsudoers\\fR\nwill be matched in a case insensitive manner.\nThis may be necessary when groups are stored in LDAP or AD.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nclosefrom_override\nIf set, the user may use the\n\\fB\\-C\\fR\noption which overrides the default starting point at which\n\\fBsudo\\fR\nbegins closing open file descriptors.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ncompress_io\nIf set, and\n\\fBsudo\\fR\nis configured to log a command's input or output,\nthe I/O logs will be compressed using\n\\fBzlib\\fR.\nThis flag is\n\\fIon\\fR\nby default when\n\\fBsudo\\fR\nis compiled with\n\\fBzlib\\fR\nsupport.\n.TP 18n\nexec_background\nBy default,\n\\fBsudo\\fR\nruns a command as the foreground process as long as\n\\fBsudo\\fR\nitself is running in the foreground.\nWhen the\n\\fIexec_background\\fR\nflag is enabled and the command is being run in a pseudo-terminal\n(due to I/O logging or the\n\\fIuse_pty\\fR\nflag), the command will be run as a background process.\nAttempts to read from the controlling terminal (or to change terminal\nsettings) will result in the command being suspended with the\n\\fRSIGTTIN\\fR\nsignal (or\n\\fRSIGTTOU\\fR\nin the case of terminal settings).\nIf this happens when\n\\fBsudo\\fR\nis a foreground process, the command will be granted the controlling terminal\nand resumed in the foreground with no user intervention required.\nThe advantage of initially running the command in the background is that\n\\fBsudo\\fR\nneed not read from the terminal unless the command explicitly requests it.\nOtherwise, any terminal input must be passed to the command, whether it\nhas required it or not (the kernel buffers terminals so it is not possible\nto tell whether the command really wants the input).\nThis is different from historic\n\\fIsudo\\fR\nbehavior or when the command is not being run in a pseudo-terminal.\n.sp\nFor this to work seamlessly, the operating system must support the\nautomatic restarting of system calls.\nUnfortunately, not all operating systems do this by default,\nand even those that do may have bugs.\nFor example, macOS fails to restart the\ntcgetattr(3)\nand\ntcsetattr(3)\nfunctions (this is a bug in macOS).\nFurthermore, because this behavior depends on the command stopping with the\n\\fRSIGTTIN\\fR\nor\n\\fRSIGTTOU\\fR\nsignals, programs that catch these signals and suspend themselves\nwith a different signal (usually\n\\fRSIGTOP\\fR)\nwill not be automatically foregrounded.\nSome versions of the linux\nsu(1)\ncommand behave this way.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\nIt has no effect unless I/O logging is enabled or the\n\\fIuse_pty\\fR\nflag is enabled.\n.TP 18n\nenv_editor\nIf set,\n\\fBvisudo\\fR\nwill use the value of the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables before falling back on the default editor list.\n\\fBvisudo\\fR\nis typically run as\n\\fBroot\\fR\nso this flag may allow a user with\n\\fBvisudo\\fR\nprivileges to run arbitrary commands as\n\\fBroot\\fR\nwithout logging.\nAn alternative is to place a colon-separated list of\n\\(lqsafe\\(rq\neditors int the\n\\fIeditor\\fR\nsetting.\n\\fBvisudo\\fR\nwill then only use\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nif they match a value specified in\n\\fIeditor\\fR.\nIf the\n\\fIenv_reset\\fR\nflag is enabled, the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nand/or\n\\fREDITOR\\fR\nenvironment variables must be present in the\n\\fIenv_keep\\fR\nlist for the\n\\fIenv_editor\\fR\nflag to function when\n\\fBvisudo\\fR\nis invoked via\n\\fBsudo\\fR.\nThis flag is\n\\fI@env_editor@\\fR\nby default.\n.TP 18n\nenv_reset\nIf set,\n\\fBsudo\\fR\nwill run the command in a minimal environment containing the\n\\fRTERM\\fR,\n\\fRPATH\\fR,\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRLOGNAME\\fR,\n\\fRUSER\\fR\nand\n\\fRSUDO_*\\fR\nvariables.\nAny variables in the caller's environment or in the file specified\nby the\n\\fIrestricted_env_file\\fR\nsetting that match the\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR\nlists are then added, followed by any variables present in the file\nspecified by the\n\\fIenv_file\\fR\nsetting (if any).\nThe contents of the\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR\nlists, as modified by global Defaults parameters in\n\\fIsudoers\\fR,\nare displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nIf the\n\\fIsecure_path\\fR\nsetting is enabled, its value will be used for the\n\\fRPATH\\fR\nenvironment variable.\nThis flag is\n\\fI@env_reset@\\fR\nby default.\n.TP 18n\nfast_glob\nNormally,\n\\fBsudo\\fR\nuses the\nglob(3)\nfunction to do shell-style globbing when matching path names.\nHowever, since it accesses the file system,\nglob(3)\ncan take a long time to complete for some patterns, especially\nwhen the pattern references a network file system that is mounted\non demand (auto mounted).\nThe\n\\fIfast_glob\\fR\nflag causes\n\\fBsudo\\fR\nto use the\nfnmatch(3)\nfunction, which does not access the file system to do its matching.\nThe disadvantage of\n\\fIfast_glob\\fR\nis that it is unable to match relative paths such as\n\\fI./ls\\fR\nor\n\\fI../bin/ls\\fR.\nThis has security implications when path names that include globbing\ncharacters are used with the negation operator,\n\\(oq!\\&\\(cq,\nas such rules can be trivially bypassed.\nAs such, this flag should not be used when the\n\\fIsudoers\\fR\nfile contains rules that contain negated path names which include globbing\ncharacters.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_passwords\nMost programs that require a user's password will disable echo before\nreading the password to avoid displaying the plaintext password on\nthe screen.\nHowever, if terminal input is being logged (see\n\\fII/O LOGGING\\fR),\nthe password will still be present in the I/O log.\nIf the\n\\fIlog_passwords\\fR\noption is disabled,\n\\fBsudoers\\fR\nwill attempt to prevent passwords from being logged.\nIt does this by using the regular expressions in\n\\fIpassprompt_regex\\fR\nto match a password prompt in the terminal output buffer.\nWhen a match is found, input characters in the I/O log will be replaced with\n\\(oq*\\(cq\nuntil either a line feed or carriage return is found in the terminal input\nor a new terminal output buffer is received.\nIf, however, a program displays characters as the user types\n(such as\n\\fBsudo\\fR\nwhen\n\\fIpwfeedback\\fR\nis set), only the\nfirst character of the password will be replaced in the I/O log.\nThis option has no effect unless\n\\fIlog_input\\fR\nor\n\\fIlog_ttyin\\fR\nare also set.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.TP 18n\nfqdn\nSet this flag if you want to put fully qualified host names in the\n\\fIsudoers\\fR\nfile when the local host name (as returned by the\n\\(oqhostname\\(cq\ncommand) does not contain the domain name.\nIn other words, instead of myhost you would use myhost.mydomain.edu.\nYou may still use the short form if you wish (and even mix the two).\nThis flag is only effective when the\n\\(lqcanonical\\(rq\nhost name, as returned by the\ngetaddrinfo(3)\nor\ngethostbyname(3)\nfunction, is a fully-qualified domain name.\nThis is usually the case when the system is configured to use DNS\nfor host name resolution.\n.sp\nIf the system is configured to use the\n\\fI/etc/hosts\\fR\nfile in preference to DNS, the\n\\(lqcanonical\\(rq\nhost name may not be fully-qualified.\nThe order that sources are queried for host name resolution\nis usually specified in the\n\\fI@nsswitch_conf@\\fR,\n\\fI@netsvc_conf@\\fR,\n\\fI/etc/host.conf\\fR,\nor, in some cases,\n\\fI/etc/resolv.conf\\fR\nfile.\nIn the\n\\fI/etc/hosts\\fR\nfile, the first host name of the entry is considered to be the\n\\(lqcanonical\\(rq\nname; subsequent names are aliases that are not used by\n\\fBsudoers\\fR.\nFor example, the following hosts file line for the machine\n\\(lqxyzzy\\(rq\nhas the fully-qualified domain name as the\n\\(lqcanonical\\(rq\nhost name, and the short version as an alias.\n.sp\n.RS 24n\n192.168.1.1 xyzzy.sudo.ws xyzzy\n.RE\n.RS 18n\n.sp\nIf the machine's hosts file entry is not formatted properly, the\n\\fIfqdn\\fR\nflag will not be effective if it is queried before DNS.\n.sp\nBeware that when using DNS for host name resolution, turning on\n\\fIfqdn\\fR\nrequires\n\\fBsudoers\\fR\nto make DNS lookups which renders\n\\fBsudo\\fR\nunusable if DNS stops working (for example if the machine is disconnected\nfrom the network).\nJust like with the hosts file, you must use the\n\\(lqcanonical\\(rq\nname as DNS knows it.\nThat is, you may not use a host alias (CNAME entry) due to performance\nissues and the fact that there is no way to get all aliases from DNS.\n.sp\nThis flag is\n\\fI@fqdn@\\fR\nby default.\n.RE\n.TP 18n\nignore_audit_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the audit log.\nIf enabled, an audit log write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the audit event is successfully\nwritten.\nThis flag is only effective on systems for which\n\\fBsudoers\\fR\nsupports audit logging, including\nFreeBSD,\nLinux, macOS, and Solaris.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nignore_dot\nIf set,\n\\fBsudo\\fR\nwill ignore \".\" or \"\" (both denoting the current directory) in the\n\\fRPATH\\fR\nenvironment variable; the\n\\fRPATH\\fR\nitself is not modified.\nThis flag is\n\\fI@ignore_dot@\\fR\nby default.\n.TP 18n\nignore_iolog_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the I/O log (local or remote).\nIf enabled, an I/O log write failure is not treated as a fatal error.\nIf disabled, the command will be terminated if the I/O log cannot be written to.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nignore_logfile_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the log file.\nIf enabled, a log file write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the log file entry is successfully\nwritten.\nThis flag only has an effect when\n\\fBsudoers\\fR\nis configured to use file-based logging via the\n\\fIlogfile\\fR\nsetting.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nignore_local_sudoers\nIf set via LDAP, parsing of\n\\fI@sysconfdir@/sudoers\\fR\nwill be skipped.\nThis is intended for sites that wish to prevent the usage of local\nsudoers files so that only LDAP is used.\nThis thwarts the efforts of rogue operators who would attempt to add roles to\n\\fI@sysconfdir@/sudoers\\fR.\nWhen this flag is enabled,\n\\fI@sysconfdir@/sudoers\\fR\ndoes not even need to exist.\nSince this flag tells\n\\fBsudo\\fR\nhow to behave when no specific LDAP entries have been matched, this\nsudoOption is only meaningful for the\n\\(oqcn=defaults\\(cq\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nignore_unknown_defaults\nIf set,\n\\fBsudo\\fR\nwill not produce a warning if it encounters an unknown Defaults entry\nin the\n\\fIsudoers\\fR\nfile or an unknown sudoOption in LDAP.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ninsults\nIf set,\n\\fBsudo\\fR\nwill insult users when they enter an incorrect password.\nThis flag is\n\\fI@insults@\\fR\nby default.\n.TP 18n\nlog_allowed\nIf set,\n\\fBsudoers\\fR\nwill log commands allowed by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.29 or higher.\n.TP 18n\nlog_denied\nIf set,\n\\fBsudoers\\fR\nwill log commands denied by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.29 or higher.\n.TP 18n\nlog_exit_status\nIf set,\n\\fBsudoers\\fR\nwill log the exit value of commands that are run to syslog and/or a log file.\nIf a command was terminated by a signal, the signal name is logged as well.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nlog_host\nIf set, the host name will be included in log entries written to\nthe file configured by the\n\\fIlogfile\\fR\nsetting.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_input\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal (if\n\\fBsudo\\fR\nwas run from a terminal) and log all user input.\nIf the standard input is not connected to the user's terminal, due\nto I/O redirection or because the command is part of a pipeline,\nthat input is also logged.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_output\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal (if\n\\fBsudo\\fR\nwas run from a terminal) and log all output that is sent to the\nuser's terminal, the standard output or the standard error.\nIf the standard output or standard error is not connected to the\nuser's terminal, due to I/O redirection or because the command is\npart of a pipeline, that output is also logged.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_server_keepalive\nIf set,\n\\fBsudo\\fR\nwill enable the TCP keepalive socket option on the connection to the log server.\nThis enables the periodic transmission of keepalive messages to the server.\nIf the server does not respond to a message, the connection will\nbe closed and the running command will be terminated unless the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_verify\n.br\nIf set, the server certificate received during the TLS handshake\nmust be valid and it must contain either the server name (from\n\\fIlog_servers\\fR)\nor its IP address.\nIf either of these conditions is not met, the TLS handshake will fail.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_stderr\nIf set,\n\\fBsudo\\fR\nwill log the standard error if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_stdin\nIf set,\n\\fBsudo\\fR\nwill log the standard input if it is not connected to the user's terminal.\nThis can be used to log input from a pipe or redirected from a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_stdout\nIf set,\n\\fBsudo\\fR\nwill log the standard output if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_subcmds\nIf set,\n\\fBsudoers\\fR\nwill log when a command spawns a child process and executes a program\nusing the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nor\nsystem(3)\nlibrary functions.\nFor example, if a shell is run by\n\\fBsudo\\fR,\nthe individual commands run via the shell will be logged.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThe\n\\fIlog_subcmds\\fR\nflag uses the same underlying mechanism as the\n\\fIintercept\\fR\nsetting.\nSee\n\\fIPreventing shell escapes\\fR\nfor more information on what systems support this option and its limitations.\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\nseccomp(2)\nfilter mode.\n.TP 18n\nlog_ttyin\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal and log user keystrokes\nsent to the user's terminal, if one is present.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\nssh(1),\nthis flag will have no effect.\n.TP 18n\nlog_ttyout\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal and log all output displayed\non the user's terminal, if one is present.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\nssh(1),\nthis flag will have no effect.\n.TP 18n\nlog_year\nIf set, the four-digit year will be logged in the (non-syslog)\n\\fBsudo\\fR\nlog file.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlong_otp_prompt\nWhen validating with a One Time Password (OTP) scheme such as\n\\fBS/Key\\fR\nor\n\\fBOPIE\\fR,\na two-line prompt is used to make it easier\nto cut and paste the challenge to a local window.\nIt's not as pretty as the default but some people find it more convenient.\nThis flag is\n\\fI@long_otp_prompt@\\fR\nby default.\n.TP 18n\nmail_all_cmnds\nSend mail to the\n\\fImailto\\fR\nuser every time a user attempts to run a command via\n\\fBsudo\\fR\n(this includes\n\\fBsudoedit\\fR).\nNo mail will be sent if the user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noption unless there is an authentication error and the\n\\fImail_badpass\\fR\nflag is also set.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_always\nSend mail to the\n\\fImailto\\fR\nuser every time a user runs\n\\fBsudo\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_badpass\nSend mail to the\n\\fImailto\\fR\nuser if the user running\n\\fBsudo\\fR\ndoes not enter the correct password.\nIf the command the user is attempting to run is not permitted by\n\\fBsudoers\\fR\nand one of the\n\\fImail_all_cmnds\\fR,\n\\fImail_always\\fR,\n\\fImail_no_host\\fR,\n\\fImail_no_perms\\fR\nor\n\\fImail_no_user\\fR\nflags are set, this flag will have no effect.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_no_host\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user exists in the\n\\fIsudoers\\fR\nfile, but is not allowed to run commands on the current host.\nThis flag is\n\\fI@mail_no_host@\\fR\nby default.\n.TP 18n\nmail_no_perms\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user is allowed to use\n\\fBsudo\\fR\nbut the command they are trying is not listed in their\n\\fIsudoers\\fR\nfile entry or is explicitly denied.\nThis flag is\n\\fI@mail_no_perms@\\fR\nby default.\n.TP 18n\nmail_no_user\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user is not in the\n\\fIsudoers\\fR\nfile.\nThis flag is\n\\fI@mail_no_user@\\fR\nby default.\n.TP 18n\nmatch_group_by_gid\nBy default,\n\\fBsudoers\\fR\nwill look up each group the user is a member of by group-ID to\ndetermine the group name (this is only done once).\nThe resulting list of the user's group names is used when matching\ngroups listed in the\n\\fIsudoers\\fR\nfile.\nThis works well on systems where the number of groups listed in the\n\\fIsudoers\\fR\nfile is larger than the number of groups a typical user belongs to.\nOn systems where group lookups are slow, where users may belong\nto a large number of groups, or where the number of groups listed\nin the\n\\fIsudoers\\fR\nfile is relatively small, it may be prohibitively expensive and\nrunning commands via\n\\fBsudo\\fR\nmay take longer than normal.\nOn such systems it may be faster to use the\n\\fImatch_group_by_gid\\fR\nflag to avoid resolving the user's group-IDs to group names.\nIn this case,\n\\fBsudoers\\fR\nmust look up any group name listed in the\n\\fIsudoers\\fR\nfile and use the group-ID instead of the group name when determining\nwhether the user is a member of the group.\n.sp\nIf\n\\fImatch_group_by_gid\\fR\nis enabled, group database lookups performed by\n\\fBsudoers\\fR\nwill be keyed by group name as opposed to group-ID.\nOn systems where there are multiple sources for the group database,\nit is possible to have conflicting group names or group-IDs in the local\n\\fI/etc/group\\fR\nfile and the remote group database.\nOn such systems, enabling or disabling\n\\fImatch_group_by_gid\\fR\ncan be used to choose whether group database queries are performed\nby name (enabled) or ID (disabled), which may aid in working around\ngroup entry conflicts.\n.sp\nThe\n\\fImatch_group_by_gid\\fR\nflag has no effect when\n\\fIsudoers\\fR\ndata is stored in LDAP.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.18 or higher.\n.TP 18n\nintercept\nIf set, all commands run via\n\\fBsudo\\fR\nwill behave as if the\n\\fRINTERCEPT\\fR\ntag has been set, unless overridden by an\n\\fRNOINTERCEPT\\fR\ntag.\nSee the description of\n\\fRINTERCEPT and NOINTERCEPT\\fR\nabove as well as the\n\\fIPreventing shell escapes\\fR\nsection at the end of this manual.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\nseccomp(2)\nfilter mode.\n.TP 18n\nintercept_allow_setid\nOn most systems, the dynamic loader will ignore\n\\fRLD_PRELOAD\\fR\n(or the equivalent) when running set-user-ID and set-group-ID\nprograms, effectively disabling intercept mode.\nTo prevent this from happening,\n\\fBsudoers\\fR\nwill not permit a set-user-ID or set-group-ID program to be run in\nintercept mode unless\n\\fIintercept_allow_setid\\fR\nis enable.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command.\nThis flag is\n\\fIon\\fR\nby default when the\n\\fIintercept_type\\fR\noption is set to\n\\fItrace\\fR,\notherwise it default to\n\\fIoff\\fR.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nintercept_authenticate\nIf set, commands run by an intercepted process must be authenticated\nwhen the user's time stamp is not current.\nFor example, if a shell is run with\n\\fIintercept\\fR\nenabled, as soon as the invoking user's time stamp is out of date,\nsubsequent commands will need to be authenticated.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nintercept_verify\nIf set,\n\\fBsudo\\fR\nwill attempt to verify that a command run in intercept mode has\nthe expected path name, command line arguments and environment.\n.sp\nThe process will be stopped after\nexecve(2)\nhas completed but before the new command has had a chance to run.\nTo verify the command,\n\\fBsudo\\fR\nwill read the command's path from\n\\fI/proc/PID/exe\\fR,\nthe command line arguments and environment from the process's memory,\nand compare them against the arguments that were passed to\nexecve(2).\nIn the event of a mismatch, the command will be sent a\n\\fRSIGKILL\\fR\nsignal and terminated.\n.sp\nThis can help prevent a time of check versus time of use issue with\nintercept mode where the\nexecve(2)\narguments could be altered after the\n\\fBsudoers\\fR\npolicy check.\nThe checks can only be performed if the\nproc(@mansectform@)\nfile system is available.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command and the\n\\fIintercept_type\\fR\noption is set to\n\\fItrace\\fR.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.12 or higher.\n.TP 18n\nnetgroup_tuple\nIf set, netgroup lookups will be performed using the full netgroup\ntuple: host name, user name, and domain (if one is set).\nHistorically,\n\\fBsudo\\fR\nonly matched the user name and domain for netgroups used in a\n\\fIUser_List\\fR\nand only matched the host name and domain for netgroups used in a\n\\fIHost_List\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nnoexec\nIf set, all commands run via\n\\fBsudo\\fR\nwill behave as if the\n\\fRNOEXEC\\fR\ntag has been set, unless overridden by an\n\\fREXEC\\fR\ntag.\nSee the description of\n\\fREXEC and NOEXEC\\fR\nabove as well as the\n\\fIPreventing shell escapes\\fR\nsection at the end of this manual.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nnoninteractive_auth\nIf set, authentication will be attempted even in non-interactive mode\n(when\n\\fBsudo\\fR's\n\\fB\\-n\\fR\noption is specified).\nThis allows authentication methods that don't require user interaction\nto succeed.\nAuthentication methods that require input from the user's terminal\nwill still fail.\nIf disabled, authentication will not be attempted in non-interactive mode.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.TP 18n\npam_acct_mgmt\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill perform PAM account validation for the invoking user by default.\nThe actual checks performed depend on which PAM modules are configured.\nIf enabled, account validation will be performed regardless of whether\nor not a password is required.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.28 or higher.\n.TP 18n\npam_rhost\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill set the PAM remote host value to the name of the local host\nwhen the\n\\fIpam_rhost\\fR\nflag is enabled.\nOn Linux systems, enabling\n\\fIpam_rhost\\fR\nmay result in DNS lookups of the local host name when PAM is initialized.\nOn Solaris versions prior to Solaris 8,\n\\fIpam_rhost\\fR\nmust be enabled if\n\\fIpam_ruser\\fR\nis also enabled to avoid a crash in the Solaris PAM implementation.\n.sp\nThis flag is\n\\fIoff\\fR\nby default on systems other than Solaris.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npam_ruser\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill set the PAM remote user value to the name of the user that invoked sudo\nwhen the\n\\fIpam_ruser\\fR\nflag is enabled.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npam_session\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill create a new PAM session for the command to be run in.\nUnless\n\\fBsudo\\fR\nis given the\n\\fB\\-i\\fR\nor\n\\fB\\-s\\fR\noptions, PAM session modules are run with the\n\\(lqsilent\\(rq\nflag enabled.\nThis prevents last login information from being displayed for every\ncommand on some systems.\nDisabling\n\\fIpam_session\\fR\nmay be needed on older PAM implementations or on operating systems where\nopening a PAM session changes the utmp or wtmp files.\nIf PAM session support is disabled, resource limits may not be updated\nfor the command being run.\nIf\n\\fIpam_session\\fR,\n\\fIpam_setcred\\fR,\nand\n\\fIuse_pty\\fR\nare disabled,\n\\fIlog_servers\\fR\nhas not been set and I/O logging has not been configured,\n\\fBsudo\\fR\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n\\fI@pam_session@\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\n.TP 18n\npam_setcred\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill attempt to establish credentials for the target user by default,\nif supported by the underlying authentication system.\nOne example of a credential is a Kerberos ticket.\nIf\n\\fIpam_session\\fR,\n\\fIpam_setcred\\fR,\nand\n\\fIuse_pty\\fR\nare disabled,\n\\fIlog_servers\\fR\nhas not been set and I/O logging has not been configured,\n\\fBsudo\\fR\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npassprompt_override\nIf set, the prompt specified by\n\\fIpassprompt\\fR\nor the\n\\fRSUDO_PROMPT\\fR\nenvironment variable will always be used and will replace the\nprompt provided by a PAM module or other authentication method.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\npath_info\nNormally,\n\\fBsudo\\fR\nwill tell the user when a command could not be\nfound in their\n\\fRPATH\\fR\nenvironment variable.\nSome sites may wish to disable this as it could be used to gather\ninformation on the location of executables that the normal user does\nnot have access to.\nThe disadvantage is that if the executable is simply not in the user's\n\\fRPATH\\fR,\n\\fBsudo\\fR\nwill tell the user that they are not allowed to run it, which can be confusing.\nThis flag is\n\\fI@path_info@\\fR\nby default.\n.TP 18n\npreserve_groups\nBy default,\n\\fBsudo\\fR\nwill initialize the group vector to the list of groups the target user is in.\nWhen\n\\fIpreserve_groups\\fR\nis set, the user's existing group vector is left unaltered.\nThe real and effective group-IDs, however, are still set to match the\ntarget user.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\npwfeedback\nBy default,\n\\fBsudo\\fR\nreads the password like most other Unix programs,\nby turning off echo until the user hits the return (or enter) key.\nSome users become confused by this as it appears to them that\n\\fBsudo\\fR\nhas hung at this point.\nWhen\n\\fIpwfeedback\\fR\nis set,\n\\fBsudo\\fR\nwill provide visual feedback when the user presses a key.\nThis does have a security impact as an onlooker may be able to\ndetermine the length of the password being entered.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nrequiretty\nIf set,\n\\fBsudo\\fR\nwill only run when the user is logged in to a real tty.\nWhen this flag is set,\n\\fBsudo\\fR\ncan only be run from a login session and not via other means such as\ncron(@mansectsu@)\nor cgi-bin scripts.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nroot_sudo\nIf set,\n\\fBroot\\fR\nis allowed to run\n\\fBsudo\\fR\ntoo.\nDisabling this prevents users from\n\\(lqchaining\\(rq\n\\fBsudo\\fR\ncommands to get a\n\\fBroot\\fR\nshell by doing something like\n\\(oqsudo sudo /bin/sh\\(cq.\nNote, however, that turning off\n\\fIroot_sudo\\fR\nwill also prevent\n\\fBroot\\fR\nfrom running\n\\fBsudoedit\\fR.\nDisabling\n\\fIroot_sudo\\fR\nprovides no real additional security; it exists purely for historical reasons.\nThis flag is\n\\fI@root_sudo@\\fR\nby default.\n.TP 18n\nrootpw\nIf set,\n\\fBsudo\\fR\nwill prompt for the\n\\fBroot\\fR\npassword instead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nrunas_allow_unknown_id\nIf enabled, allow matching of runas user and group IDs that are\nnot present in the password or group databases.\nIn addition to explicitly matching unknown user or group IDs in a\n\\fIRunas_List\\fR,\nthis option also allows the\n\\fBALL\\fR\nalias to match unknown IDs.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.30 or higher.\nOlder versions of\n\\fBsudo\\fR\nalways allowed matching of unknown user and group IDs.\n.TP 18n\nrunas_check_shell\n.br\nIf enabled,\n\\fBsudo\\fR\nwill only run commands as a user whose shell appears in the\n\\fI/etc/shells\\fR\nfile, even if the invoking user's\n\\fIRunas_List\\fR\nwould otherwise permit it.\nIf no\n\\fI/etc/shells\\fR\nfile is present, a system-dependent list of built-in default shells is used.\nOn many operating systems, system users such as\n\\(lqbin\\(rq,\ndo not have a valid shell and this flag can be used to prevent\ncommands from being run as those users.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.30 or higher.\n.TP 18n\nrunaspw\nIf set,\n\\fBsudo\\fR\nwill prompt for the password of the user defined by the\n\\fIrunas_default\\fR\noption (defaults to\n\\fB@runas_default@\\fR)\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n\\fIoff\\fR\nby default.\n.if \\n(SL \\{\\\n.TP 18n\nselinux\nIf enabled, the user may specify an SELinux role and/or type to use\nwhen running the command, as permitted by the SELinux policy.\nIf SELinux is disabled on the system, this flag has no effect.\nThis flag is\n\\fIon\\fR\nby default.\n.\\}\n.TP 18n\nset_home\nIf enabled and\n\\fBsudo\\fR\nis invoked with the\n\\fB\\-s\\fR\noption, the\n\\fRHOME\\fR\nenvironment variable will be set to the home directory of the target\nuser (which is the\n\\fIrunas_default\\fR\nuser unless the\n\\fB\\-u\\fR\noption is used).\nThis flag is largely obsolete and has no effect unless the\n\\fIenv_reset\\fR\nflag has been disabled or\n\\fRHOME\\fR\nis present in the\n\\fIenv_keep\\fR\nlist, both of which are strongly discouraged.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nset_logname\nNormally,\n\\fBsudo\\fR\nwill set the\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nenvironment variables to the name of the target user (the user specified by\n\\fIrunas_default\\fR\nunless the\n\\fB\\-u\\fR\noption is given).\nHowever, since some programs (including the RCS revision control system) use\n\\fRLOGNAME\\fR\nto determine the real identity of the user, it may be desirable to\nchange this behavior.\nThis can be done by negating the set_logname option.\nThe\n\\fIset_logname\\fR\noption will have no effect\nif the\n\\fIenv_reset\\fR\noption has not been disabled and the\n\\fIenv_keep\\fR\nlist contains\n\\fRLOGNAME\\fR\nor\n\\fRUSER\\fR.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nset_utmp\nWhen enabled,\n\\fBsudo\\fR\nwill create an entry in the utmp (or utmpx) file when a pseudo-terminal\nis allocated.\nA pseudo-terminal is allocated by\n\\fBsudo\\fR\nwhen it is running in a terminal and one or more of the\n\\fIlog_input\\fR,\n\\fIlog_output\\fR,\n\\fIlog_stdin\\fR,\n\\fIlog_stdout\\fR,\n\\fIlog_stderr\\fR,\n\\fIlog_ttyin\\fR,\n\\fIlog_ttyout\\fR,\nor\n\\fIuse_pty\\fR\nflags is enabled.\nBy default, the new entry will be a copy of the user's existing utmp\nentry (if any), with the tty, time, type, and pid fields updated.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nsetenv\nAllow the user to disable the\n\\fIenv_reset\\fR\noption from the command line via the\n\\fB\\-E\\fR\noption.\nAdditionally, environment variables set via the command line are\nnot subject to the restrictions imposed by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR.\nAs such, only trusted users should be allowed to set variables in this manner.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nshell_noargs\nIf set and\n\\fBsudo\\fR\nis invoked with no arguments it acts as if the\n\\fB\\-s\\fR\noption had been given.\nThat is, it runs a shell as\n\\fBroot\\fR\n(the shell is determined by the\n\\fRSHELL\\fR\nenvironment variable if it is set, falling back on the shell listed\nin the invoking user's /etc/passwd entry if not).\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nstay_setuid\nNormally, when\n\\fBsudo\\fR\nexecutes a command the real and effective user-IDs are set to the target\nuser\n(\\fB@runas_default@\\fR\nby default).\nThis option changes that behavior such that the real user-ID is left\nas the invoking user's user-ID.\nIn other words, this makes\n\\fBsudo\\fR\nact as a set-user-ID wrapper.\nThis can be useful on systems that disable some potentially\ndangerous functionality when a program is run set-user-ID.\nThis option is only effective on systems that support either the\nsetreuid(2)\nor\nsetresuid(2)\nsystem call.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nsudoedit_checkdir\n.br\nIf set,\n\\fBsudoedit\\fR\nwill check all directory components of the path to be edited for writability\nby the invoking user.\nSymbolic links will not be followed in writable directories and\n\\fBsudoedit\\fR\nwill refuse to edit a file located in a writable directory.\nThese restrictions are not enforced when\n\\fBsudoedit\\fR\nis run by\n\\fBroot\\fR.\nOn some systems, if all directory components of the path to be edited\nare not readable by the target user,\n\\fBsudoedit\\fR\nwill be unable to edit the file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting was first introduced in version 1.8.15 but initially\nsuffered from a race condition.\nThe check for symbolic links in writable intermediate directories\nwas added in version 1.8.16.\n.TP 18n\nsudoedit_follow\nBy default,\n\\fBsudoedit\\fR\nwill not follow symbolic links when opening files.\nThe\n\\fIsudoedit_follow\\fR\noption can be enabled to allow\n\\fBsudoedit\\fR\nto open symbolic links.\nIt may be overridden on a per-command basis by the\n\\fRFOLLOW\\fR\nand\n\\fRNOFOLLOW\\fR\ntags.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.15 or higher.\n.TP 18n\nsyslog_pid\nWhen logging via\nsyslog(3),\ninclude the process ID in the log entry.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.21 or higher.\n.TP 18n\ntargetpw\nIf set,\n\\fBsudo\\fR\nwill prompt for the password of the user specified\nby the\n\\fB\\-u\\fR\noption (defaults to the value of\n\\fIrunas_default\\fR)\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag precludes the use of a user-ID not listed in the passwd\ndatabase as an argument to the\n\\fB\\-u\\fR\noption.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ntty_tickets\nIf set, users must authenticate on a per-tty basis.\nWith this flag enabled,\n\\fBsudo\\fR\nwill use a separate record in the time stamp file for each terminal.\nIf disabled, a single record is used for all login sessions.\n.sp\nThis option has been superseded by the\n\\fItimestamp_type\\fR\noption.\n.TP 18n\numask_override\nIf set,\n\\fBsudo\\fR\nwill set the umask as specified in the\n\\fIsudoers\\fR\nfile without modification.\nThis makes it possible to specify a umask in the\n\\fIsudoers\\fR\nfile that is more permissive than the user's own umask and matches\nhistorical behavior.\nIf\n\\fIumask_override\\fR\nis not set,\n\\fBsudo\\fR\nwill set the umask to be the union of the user's umask and what is specified in\n\\fIsudoers\\fR.\nThis flag is\n\\fI@umask_override@\\fR\nby default.\n.if \\n(BA \\{\\\n.TP 18n\nuse_loginclass\nIf set,\n\\fBsudo\\fR\nwill apply the defaults specified for the target user's login class\nif one exists.\nOnly available if\n\\fBsudo\\fR\nis configured with the\n\\fR--with-logincap\\fR\noption.\nThis flag is\n\\fIoff\\fR\nby default.\n.\\}\n.TP 18n\nuse_netgroups\nIf set, netgroups (prefixed with\n\\(oq+\\(cq),\nmay be used in place of a user or host.\nFor LDAP-based sudoers, netgroup support requires an expensive\nsub-string match on the server unless the\n\\fBNETGROUP_BASE\\fR\ndirective is present in the\n\\fI@ldap_conf@\\fR\nfile.\nIf netgroups are not needed, this option can be disabled to reduce the\nload on the LDAP server.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nuse_pty\nIf set, and\n\\fBsudo\\fR\nis running in a terminal, the command will be run in a pseudo-terminal\n(even if no I/O logging is being done).\nIf the\n\\fBsudo\\fR\nprocess is not attached to a terminal,\n\\fIuse_pty\\fR\nhas no effect.\n.sp\nA malicious program run under\n\\fBsudo\\fR\nmay be capable of injecting commands into the user's\nterminal or running a background process that retains access to the\nuser's terminal device even after the main program has finished\nexecuting.\nBy running the command in a separate pseudo-terminal, this attack is\nno longer possible.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nuser_command_timeouts\nIf set, the user may specify a timeout on the command line.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nIf a timeout is specified both in the\n\\fIsudoers\\fR\nfile and on the command line, the smaller of the two timeouts will be used.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\nutmp_runas\nIf set,\n\\fBsudo\\fR\nwill store the name of the runas user when updating the utmp (or utmpx) file.\nBy default,\n\\fBsudo\\fR\nstores the name of the invoking user.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nvisiblepw\nBy default,\n\\fBsudo\\fR\nwill refuse to run if the user must enter a password but it is not\npossible to disable echo on the terminal.\nIf the\n\\fIvisiblepw\\fR\nflag is set,\n\\fBsudo\\fR\nwill prompt for a password even when it would be visible on the screen.\nThis makes it possible to run things like\n\\(oqssh somehost sudo ls\\(cq\nsince by default,\nssh(1)\ndoes\nnot allocate a tty when running a command.\nThis flag is\n\\fIoff\\fR\nby default.\n.PP\n\\fBIntegers\\fR:\n.TP 18n\nclosefrom\nBefore it executes a command,\n\\fBsudo\\fR\nwill close all open file descriptors other than standard input,\nstandard output, and standard error (file descriptors 0-2).\nThe\n\\fIclosefrom\\fR\noption can be used to specify a different file descriptor at which\nto start closing.\nThe default is 3.\n.TP 18n\ncommand_timeout\nThe maximum amount of time a command is allowed to run before\nit is terminated.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\nlog_server_timeout\nThe maximum amount of time to wait when connecting to a log server\nor waiting for a server response.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\nThe default value is 30 seconds.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nmaxseq\nThe maximum sequence number that will be substituted for the\n\\(oq%{seq}\\(cq\nescape in the I/O log file (see the\n\\fIiolog_dir\\fR\ndescription below for more information).\nWhile the value substituted for\n\\(oq%{seq}\\(cq\nis in base 36,\n\\fImaxseq\\fR\nitself should be expressed in decimal.\nValues larger than 2176782336 (which corresponds to the\nbase 36 sequence number\n\\(lqZZZZZZ\\(rq)\nwill be silently truncated to 2176782336.\nThe default value is 2176782336.\n.sp\nOnce the local sequence number reaches the value of\n\\fImaxseq\\fR,\nit will\n\\(lqroll over\\(rq\nto zero, after which\n\\fBsudoers\\fR\nwill truncate and re-use any existing I/O log path names.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\n.TP 18n\npasswd_tries\nThe number of tries a user gets to enter his/her password before\n\\fBsudo\\fR\nlogs the failure and exits.\nThe default is @passwd_tries@.\n.TP 18n\nsyslog_maxlen\nOn many systems,\nsyslog(3)\nhas a relatively small log buffer.\nIETF RFC 5424 states that syslog servers must support messages of\nat least 480 bytes and should support messages up to 2048 bytes.\nBy default,\n\\fBsudoers\\fR\ncreates log messages up to 980 bytes which corresponds to the\nhistoric\nBSD\nsyslog implementation which used a 1024 byte buffer\nto store the message, date, hostname, and program name.\nTo prevent syslog messages from being truncated,\n\\fBsudoers\\fR\nwill split up log messages that are larger than\n\\fIsyslog_maxlen\\fR\nbytes.\nWhen a message is split, additional parts will include the string\n\\(lq(command continued)\\(rq\nafter the user name and before the continued command line arguments.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.PP\n\\fBIntegers that can be used in a boolean context\\fR:\n.TP 18n\nloglinelen\nNumber of characters per line for the file log.\nThis value is used to decide when to wrap lines for nicer log files.\nThis has no effect on the syslog log file, only the file log.\nThe default is @loglen@ (use 0 or negate the option to disable word wrap).\n.TP 18n\npasswd_timeout\nNumber of minutes before the\n\\fBsudo\\fR\npassword prompt times out, or 0 for no timeout.\nThe timeout may include a fractional component\nif minute granularity is insufficient, for example 2.5.\nThe default is @password_timeout@.\n.TP 18n\ntimestamp_timeout\n.br\nNumber of minutes that can elapse before\n\\fBsudo\\fR\nwill ask for a password again.\nThe timeout may include a fractional component if\nminute granularity is insufficient, for example 2.5.\nThe default is @timeout@.\nSet this to 0 to always prompt for a password.\nIf set to a value less than 0 the user's time stamp will not expire\nuntil the system is rebooted.\nThis can be used to allow users to create or delete their own time stamps via\n\\(oqsudo -v\\(cq\nand\n\\(oqsudo -k\\(cq\nrespectively.\n.TP 18n\numask\nFile mode creation mask to use when running the command.\nNegate this option or set it to 0777 to prevent\n\\fBsudoers\\fR\nfrom changing the umask.\nUnless the\n\\fIumask_override\\fR\nflag is set, the actual umask will be the union of the\nuser's umask and the value of the\n\\fIumask\\fR\nsetting, which defaults to @sudo_umask@.\nThis guarantees that\n\\fBsudo\\fR\nnever lowers the umask when running a command.\n.sp\nIf\n\\fIumask\\fR\nis explicitly set in\n\\fIsudoers\\fR,\nit will override any umask setting in PAM or login.conf.\nIf\n\\fIumask\\fR\nis not set in\n\\fIsudoers\\fR,\nthe umask specified by PAM or login.conf will take precedence.\nThe umask setting in PAM is not used for\n\\fBsudoedit\\fR,\nwhich does not create a new PAM session.\n.PP\n\\fBStrings\\fR:\n.TP 18n\napparmor_profile\nThe default AppArmor profile to transition into when executing the\ncommand.\nThe default\n\\fIapparmor_profile\\fR\ncan be overridden for individual\n\\fIsudoers\\fR\nentries by specifying the\n\\fRAPPARMOR_PROFILE\\fR\noption.\nThis option is only available when sudo is built with AppArmor\nsupport.\n.TP 18n\nauthfail_message\nMessage that is displayed after a user fails to authenticate.\nThe message may include the\n\\(oq%d\\(cq\nescape which will expand to the number of failed password attempts.\nIf set, it overrides the default message,\n\\(lq%d incorrect password attempt(s)\\(rq.\n.TP 18n\nbadpass_message\nMessage that is displayed if a user enters an incorrect password.\nThe default is\n\\(lq@badpass_message@\\(rq\nunless insults are enabled.\n.TP 18n\neditor\nA colon\n(\\(oq:\\&\\(cq)\nseparated list of editor path names used by\n\\fBsudoedit\\fR\nand\n\\fBvisudo\\fR.\nFor\n\\fBsudoedit\\fR,\nthis list is used to find an editor when none of the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables are set to an editor that exists and is executable.\nFor\n\\fBvisudo\\fR,\nit is used as a white list of allowed editors;\n\\fBvisudo\\fR\nwill choose the editor that matches the user's\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variable if possible, or the first editor in the\nlist that exists and is executable if not.\nUnless invoked as\n\\fBsudoedit\\fR,\n\\fBsudo\\fR\ndoes not preserve the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables unless they are present in the\n\\fIenv_keep\\fR\nlist or the\n\\fIenv_reset\\fR\noption is disabled.\nThe default is\n\\fI@editor@\\fR.\n.TP 18n\nintercept_type\nThe underlying mechanism used by the\n\\fIintercept\\fR\nand\n\\fIlog_subcmds\\fR\noptions.\nIt has the following possible values:\n.PP\n.RS 18n\n.PD 0\n.TP 8n\ndso\nPreload a dynamic shared object (shared library) that intercepts the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nand\nsystem(3)\nlibrary functions.\nA value of\n\\fIdso\\fR\nis incompatible with\n\\fBsudo\\fR's\nSELinux RBAC support.\n.PD\n.TP 8n\ntrace\nUse\nptrace(2)\nto intercept the\nexecve(2)\nsystem call.\nThis is only supported on Linux systems where\nseccomp(2)\nfiltering is enabled.\nIf the\n\\fI/proc/sys/kernel/seccomp/actions_avail\\fR\nfile is missing or does not contain a\n\\(lqtrap\\(rq\nelement, setting\n\\fIintercept_type\\fR\nto\n\\fItrace\\fR\nwill have no effect and\n\\fIdso\\fR\nwill be used instead.\n.PP\nThe default is to use\n\\fItrace\\fR\nif it is supported by the system and\n\\fIdso\\fR\nif it is not.\n.RE\n.TP 18n\niolog_dir\nThe top-level directory to use when constructing the path name for\nthe input/output log directory.\nOnly used if the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noptions are enabled or when the\n\\fRLOG_INPUT\\fR\nor\n\\fRLOG_OUTPUT\\fR\ntags are present for a command.\nThe session sequence number, if any, is stored in the directory.\nThe default is\n\\fI@iolog_dir@\\fR.\n.sp\nThe following percent\n(\\(oq%\\(cq)\nescape sequences are supported:\n.PP\n.RS 18n\n.PD 0\n.TP 6n\n%{seq}\nexpanded to a monotonically increasing base-36 sequence number, such as 0100A5,\nwhere every two digits are used to form a new directory, e.g.,\n\\fI01/00/A5\\fR\n.PD\n.TP 6n\n%{user}\nexpanded to the invoking user's login name\n.TP 6n\n%{group}\nexpanded to the name of the invoking user's real group-ID\n.TP 6n\n%{runas_user}\nexpanded to the login name of the user the command will\nbe run as (e.g.,\n\\fBroot\\fR)\n.TP 6n\n%{runas_group}\nexpanded to the group name of the user the command will\nbe run as (e.g.,\n\\fBwheel\\fR)\n.TP 6n\n%{hostname}\nexpanded to the local host name without the domain name\n.TP 6n\n%{command}\nexpanded to the base name of the command being run\n.PP\nIn addition, any escape sequences supported by the system's\nstrftime(3)\nfunction will be expanded.\n.sp\nTo include a literal\n\\(oq%\\(cq\ncharacter, the string\n\\(oq%%\\(cq\nshould be used.\n.RE\n.TP 18n\niolog_file\nThe path name, relative to\n\\fIiolog_dir\\fR,\nin which to store input/output logs when the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noptions are enabled or when the\n\\fRLOG_INPUT\\fR\nor\n\\fRLOG_OUTPUT\\fR\ntags are present for a command.\n\\fIiolog_file\\fR\nmay contain directory components.\nThe default is\n\\(oq%{seq}\\(cq.\n.sp\nSee the\n\\fIiolog_dir\\fR\noption above for a list of supported percent\n(\\(oq%\\(cq)\nescape sequences.\n.sp\nIn addition to the escape sequences, path names that end in six or\nmore\n\\fIX\\fRs\nwill have the\n\\fIX\\fRs\nreplaced with a unique combination of digits and letters, similar to the\nmktemp(3)\nfunction.\n.sp\nIf the path created by concatenating\n\\fIiolog_dir\\fR\nand\n\\fIiolog_file\\fR\nalready exists, the existing I/O log file will be truncated and\noverwritten unless\n\\fIiolog_file\\fR\nends in six or\nmore\n\\fIX\\fRs.\n.TP 18n\niolog_flush\nIf set,\n\\fBsudo\\fR\nwill flush I/O log data to disk after each write instead of buffering it.\nThis makes it possible to view the logs in real-time as the program\nis executing but may significantly reduce the effectiveness of I/O\nlog compression.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\niolog_group\nThe group name to look up when setting the group-ID on new I/O log\nfiles and directories.\nIf\n\\fIiolog_group\\fR\nis not set,\nthe primary group-ID of the user specified by\n\\fIiolog_user\\fR\nis used.\nIf neither\n\\fIiolog_group\\fR\nnor\n\\fIiolog_user\\fR\nare set, I/O log files and directories are created with group-ID 0.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\niolog_mode\nThe file mode to use when creating I/O log files.\nMode bits for read and write permissions for owner, group, or other\nare honored, everything else is ignored.\nThe file permissions will always include the owner read and\nwrite bits, even if they are not present in the specified mode.\nWhen creating I/O log directories, search (execute) bits are added\nto match the read and write bits specified by\n\\fIiolog_mode\\fR.\nDefaults to 0600 (read and write by user only).\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\niolog_user\nThe user name to look up when setting the user and group-IDs on new\nI/O log files and directories.\nIf\n\\fIiolog_group\\fR\nis set, it will be used instead of the user's primary group-ID.\nBy default, I/O log files and directories are created with user and\ngroup-ID 0.\n.sp\nThis setting can be useful when the I/O logs are stored on a Network\nFile System (NFS) share.\nHaving a dedicated user own the I/O log files means that\n\\fBsudoers\\fR\ndoes not write to the log files as user-ID 0, which is usually\nnot permitted by NFS.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\nlecture_status_dir\nThe directory in which\n\\fBsudo\\fR\nstores per-user lecture status files.\nOnce a user has received the lecture, a zero-length file is\ncreated in this directory so that\n\\fBsudo\\fR\nwill not lecture the user again.\nThis directory should\n\\fInot\\fR\nbe cleared when the system reboots.\nThe default is\n\\fI@vardir@/lectured\\fR.\n.if \\n(PS \\{\\\n.TP 18n\nlimitprivs\nThe default Solaris limit privileges to use when constructing a new\nprivilege set for a command.\nThis bounds all privileges of the executing process.\nThe default limit privileges may be overridden on a per-command basis in\n\\fIsudoers\\fR.\nThis option is only available if\n\\fBsudoers\\fR\nis built on Solaris 10 or higher.\n.\\}\n.TP 18n\nlog_server_cabundle\nThe path to a certificate authority bundle file, in PEM format,\nto use instead of the system's default certificate authority database\nwhen authenticating the log server.\nThe default is to use the system's default certificate authority database.\nThis setting has no effect unless\n\\fIlog_servers\\fR\nis set and the remote log server is secured with TLS.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_peer_cert\nThe path to the\n\\fBsudo\\fR\nclient's certificate file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n\\fBsudo_logsrvd\\fR,\nclient certificate validation is controlled by the\n\\fItls_checkpeer\\fR\noption, which defaults to\n\\fIfalse\\fR.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_peer_key\nThe path to the\n\\fBsudo\\fR\nclient's private key file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n\\fBsudo_logsrvd\\fR,\nclient certificate validation is controlled by the\n\\fItls_checkpeer\\fR\nflag, which defaults to\n\\fIfalse\\fR.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nmailsub\nSubject of the mail sent to the\n\\fImailto\\fR\nuser.\nThe escape\n\\(oq%h\\(cq\nwill expand to the host name of the machine.\nDefault is\n\\(lq@mailsub@\\(rq.\n.TP 18n\nnoexec_file\nAs of\n\\fBsudo\\fR\nversion 1.8.1 this option is no longer supported.\nThe path to the noexec file should now be set in the\nsudo.conf(@mansectform@)\nfile.\n.TP 18n\npam_askpass_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n\\fB\\-A\\fR\noption is specified.\nThe default value is either\n\\(oqsudo\\(cq\nor\n\\(oq@pam_login_service@\\(cq,\ndepending on whether or not the\n\\fB\\-i\\fR\noption is also specified.\nSee the description of\n\\fIpam_service\\fR\nfor more information.\n.sp\nThis setting is only supported by version 1.9.9 or higher.\n.TP 18n\npam_login_service\n.br\nOn systems that use PAM for authentication, this is the service\nname used when the\n\\fB\\-i\\fR\noption is specified.\nThe default value is\n\\(oq@pam_login_service@\\(cq.\nSee the description of\n\\fIpam_service\\fR\nfor more information.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npam_service\nOn systems that use PAM for authentication, the service name\nspecifies the PAM policy to apply.\nThis usually corresponds to an entry in the\n\\fIpam.conf\\fR\nfile or a file in the\n\\fI/etc/pam.d\\fR\ndirectory.\nThe default value is\n\\(oqsudo\\(cq.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npassprompt\nThe default prompt to use when asking for a password; can be overridden via the\n\\fB\\-p\\fR\noption or the\n\\fRSUDO_PROMPT\\fR\nenvironment variable.\nThe following percent\n(\\(oq%\\(cq)\nescape sequences are supported:\n.PP\n.RS 18n\n.PD 0\n.TP 6n\n%H\nexpanded to the local host name including the domain name\n(only if the machine's host name is fully qualified or the\n\\fIfqdn\\fR\noption is set)\n.PD\n.TP 6n\n%h\nexpanded to the local host name without the domain name\n.TP 6n\n%p\nexpanded to the user whose password is being asked for (respects the\n\\fIrootpw\\fR,\n\\fItargetpw\\fR\nand\n\\fIrunaspw\\fR\nflags in\n\\fIsudoers\\fR)\n.TP 6n\n\\&%U\nexpanded to the login name of the user the command will\nbe run as (defaults to\n\\fB@runas_default@\\fR)\n.TP 6n\n%u\nexpanded to the invoking user's login name\n.TP 6n\n%%\ntwo consecutive\n\\(oq%\\(cq\ncharacters are collapsed into a single\n\\(oq%\\(cq\ncharacter\n.PP\nOn systems that use PAM for authentication,\n\\fIpassprompt\\fR\nwill only be used if the prompt provided by the PAM module matches the string\n\\(lqPassword: \\(rq\nor\n\\(lqusername's Password: \\(rq.\nThis ensures that the\n\\fIpassprompt\\fR\nsetting does not interfere with challenge-response style authentication.\nThe\n\\fIpassprompt_override\\fR\nflag can be used to change this behavior.\n.sp\nThe default value is\n\\(oq@passprompt@\\(cq.\n.RE\n.if \\n(PS \\{\\\n.TP 18n\nprivs\nThe default Solaris privileges to use when constructing a new\nprivilege set for a command.\nThis is passed to the executing process via the inherited privilege set,\nbut is bounded by the limit privileges.\nIf the\n\\fIprivs\\fR\noption is specified but the\n\\fIlimitprivs\\fR\noption is not, the limit privileges of the executing process is set to\n\\fIprivs\\fR.\nThe default privileges may be overridden on a per-command basis in\n\\fIsudoers\\fR.\nThis option is only available if\n\\fBsudoers\\fR\nis built on Solaris 10 or higher.\n.\\}\n.if \\n(SL \\{\\\n.TP 18n\nrole\nThe default SELinux role to use when constructing a new security\ncontext to run the command.\nThe default role may be overridden on a per-command basis in the\n\\fIsudoers\\fR\nfile or via command line options.\nThis option is only available when\n\\fBsudo\\fR\nis built with SELinux support.\n.\\}\n.TP 18n\nrunas_default\nThe default user to run commands as if the\n\\fB\\-u\\fR\noption is not specified on the command line.\nThis defaults to\n\\fB@runas_default@\\fR.\n.TP 18n\nsudoers_locale\nLocale to use when parsing the sudoers file, logging commands, and\nsending email.\nChanging the locale may affect how sudoers is interpreted.\nDefaults to\n\\(oqC\\(cq.\n.TP 18n\ntimestamp_type\n\\fBsudoers\\fR\nuses per-user time stamp files for credential caching.\nThe\n\\fItimestamp_type\\fR\noption can be used to specify the type of time stamp record used.\nIt has the following possible values:\n.PP\n.RS 18n\n.PD 0\n.TP 8n\nglobal\nA single time stamp record is used for all of a user's login sessions,\nregardless of the terminal or parent process ID.\nAn additional record is used to serialize password prompts when\n\\fBsudo\\fR\nis used multiple times in a pipeline, but this does not affect authentication.\n.PD\n.TP 8n\nppid\nA single time stamp record is used for all processes with the same parent\nprocess ID (usually the shell).\nCommands run from the same shell (or other common parent process)\nwill not require a password for\n\\fItimestamp_timeout\\fR\nminutes (@timeout@ by default).\nCommands run via\n\\fBsudo\\fR\nwith a different parent process ID, for example from a shell script,\nwill be authenticated separately.\n.TP 8n\ntty\nOne time stamp record is used for each terminal,\nwhich means that a user's login sessions are authenticated separately.\nIf no terminal is present, the behavior is the same as\n\\fIppid\\fR.\nCommands run from the same terminal will not require a password for\n\\fItimestamp_timeout\\fR\nminutes (@timeout@ by default).\n.TP 8n\nkernel\nThe time stamp is stored in the kernel as an attribute of the terminal\ndevice.\nIf no terminal is present, the behavior is the same as\n\\fIppid\\fR.\nNegative\n\\fItimestamp_timeout\\fR\nvalues are not supported and positive values are limited to a maximum\nof 60 minutes.\nThis is currently only supported on\nOpenBSD.\n.PP\nThe default value is\n\\fI@timestamp_type@\\fR.\n.sp\nThis setting is only supported by version 1.8.21 or higher.\n.RE\n.TP 18n\ntimestampdir\nThe directory in which\n\\fBsudo\\fR\nstores its time stamp files.\nThis directory should be cleared when the system reboots.\nThe default is\n\\fI@rundir@/ts\\fR.\n.TP 18n\ntimestampowner\nThe owner of the lecture status directory, time stamp directory and all\nfiles stored therein.\nThe default is\n\\fBroot\\fR.\n.if \\n(SL \\{\\\n.TP 18n\ntype\nThe default SELinux type to use when constructing a new security\ncontext to run the command.\nThe default type may be overridden on a per-command basis in the\n\\fIsudoers\\fR\nfile or via command line options.\nThis option is only available when\n\\fBsudo\\fR\nis built with SELinux support.\n.PP\n\\fBStrings that can be used in a boolean context\\fR:\n.TP 14n\nadmin_flag\nThe\n\\fIadmin_flag\\fR\noption specifies the path to a file that is created the first time\na user that is a member of the\n\\fIsudo\\fR\nor\n\\fIadmin\\fR\ngroups runs\n\\fBsudo\\fR.\nOnly available if\n\\fBsudo\\fR\nis configured with the\n\\fR--enable-admin-flag\\fR\noption.\nThe default value is\n\\fI~/.sudo_as_admin_successful\\fR.\n.TP 14n\nenv_file\nThe\n\\fIenv_file\\fR\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n\\(oqVARIABLE=value\\(cq\nor\n\\(oqexport VARIABLE=value\\(cq.\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nThis file is considered to be part of the security policy,\nits contents are not subject to other\n\\fBsudo\\fR\nenvironment restrictions such as\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR.\n.TP 14n\nexempt_group\nUsers in this group are exempt from password and PATH requirements.\nThe group name specified should not include a\n\\(oq%\\(cq\nprefix.\nThis is not set by default.\n.TP 14n\nfdexec\nDetermines whether\n\\fBsudo\\fR\nwill execute a command by its path or by an open file descriptor.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nalways\nAlways execute by file descriptor.\n.PD\n.TP 8n\nnever\nNever execute by file descriptor.\n.TP 8n\ndigest_only\nOnly execute by file descriptor if the command has an associated digest\nin the\n\\fIsudoers\\fR\nfile.\n.PP\nThe default value is\n\\fIdigest_only\\fR.\nThis avoids a time of check versus time of use race condition when\nthe command is located in a directory writable by the invoking user.\n.sp\n\\fIfdexec\\fR\nwill change the first element of the argument vector for scripts\n($0 in the shell) due to the way the kernel runs script interpreters.\nInstead of being a normal path, it will refer to a file descriptor.\nFor example,\n\\fI/dev/fd/4\\fR\non Solaris and\n\\fI/proc/self/fd/4\\fR\non Linux.\nA workaround is to use the\n\\fRSUDO_COMMAND\\fR\nenvironment variable instead.\n.sp\nThe\n\\fIfdexec\\fR\nsetting is only used when the command is matched by path name.\nIt has no effect if the command is matched by the built-in\n\\fBALL\\fR\nalias.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\nIf the operating system does not support the\nfexecve(2)\nsystem call, this setting has no effect.\n.RE\n.TP 14n\ngroup_plugin\nA string containing a\n\\fBsudoers\\fR\ngroup plugin with optional arguments.\nThe string should consist of the plugin\npath, either fully-qualified or relative to the\n\\fI@plugindir@\\fR\ndirectory, followed by any configuration arguments the plugin requires.\nThese arguments (if any) will be passed to the plugin's initialization function.\nIf arguments are present, the string must be enclosed in double quotes\n(\\&\"\").\n.sp\nOn 64-bit systems, if the plugin is present but cannot be loaded,\n\\fBsudoers\\fR\nwill look for a 64-bit version and, if it exists, load that as a fallback.\nThe exact rules for this vary by system.\nOn Solaris, if the plugin is stored in a directory ending in\n\\(lqlib\\(rq,\n\\fBsudoers\\fR\nwill create a fallback path by appending\n\\(lq/64\\(rq\nto the directory name;\n\\fI@prefix@/lib/group_plugin.so\\fR\nbecomes\n\\fI@prefix@/lib/64/group_plugin.so\\fR.\nOn Linux, a directory ending in\n\\(lqlib\\(rq\nwill be transformed to\n\\(lqlib64\\(rq\nas the fallback path;\n\\fI@prefix@/lib/group_plugin.so\\fR\nbecomes\n\\fI@prefix@/lib64/group_plugin.so\\fR.\nOn all other systems, the fallback path is generated by adding a\n\\(lq64\\(rq\nbefore the file extension;\n\\fIgroup_plugin.so\\fR\nbecomes\n\\fIgroup_plugin64.so\\fR.\n.sp\nFor more information see\n\\fIGROUP PROVIDER PLUGINS\\fR.\n.TP 14n\nlecture\nThis option controls when a short lecture will be printed along with\nthe password prompt.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nalways\nAlways lecture the user.\n.PD\n.TP 8n\nnever\nNever lecture the user.\n.TP 8n\nonce\nOnly lecture the user the first time they run\n\\fBsudo\\fR.\n.PP\nIf no value is specified, a value of\n\\fIonce\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fI@lecture@\\fR.\n.RE\n.TP 14n\nlecture_file\nPath to a file containing an alternate\n\\fBsudo\\fR\nlecture that will be used in place of the standard lecture if the named\nfile exists.\nBy default,\n\\fBsudo\\fR\nuses a built-in lecture.\n.TP 14n\nlistpw\nThis option controls when a password will be required when a user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\noption.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 6n\nall\nAll the user's\n\\fIsudoers\\fR\nfile entries for the current host must have\nthe\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.PD\n.TP 6n\nalways\nThe user must always enter a password to use the\n\\fB\\-l\\fR\noption.\n.TP 6n\nany\nAt least one of the user's\n\\fIsudoers\\fR\nfile entries for the current host\nmust have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.TP 6n\nnever\n.br\nThe user need never enter a password to use the\n\\fB\\-l\\fR\noption.\n.PP\nIf no value is specified, a value of\n\\fIany\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fIany\\fR.\n.RE\n.TP 14n\nlog_format\nThe event log format.\nSupported log formats are:\n.PP\n.RS 14n\n.PD 0\n.TP 6n\njson\nLogs in JSON format.\nJSON log entries contain the full user details as well as the execution\nenvironment if the command was allowed.\nDue to limitations of the protocol, JSON events sent via\n\\fIsyslog\\fR\nmay be truncated.\n.PD\n.TP 6n\nsudo\nTraditional sudo-style logs, see\n\\fIEVENT LOGGING\\fR\nfor a description of the log file format.\n.PP\nThis setting affects logs sent via\nsyslog(3)\nas well as the file specified by the\n\\fIlogfile\\fR\nsetting, if any.\nThe default value is\n\\fIsudo\\fR.\n.RE\n.TP 14n\nlogfile\nPath to the\n\\fBsudo\\fR\nlog file (not the syslog log file).\nSetting a path turns on logging to a file;\nnegating this option turns it off.\nBy default,\n\\fBsudo\\fR\nlogs via syslog.\n.TP 14n\nmailerflags\nFlags to use when invoking mailer.\nDefaults to\n\\fB\\-t\\fR.\n.TP 14n\nmailerpath\nPath to mail program used to send warning mail (negate to prevent\n\\fBsudo\\fR\nfrom sending mail).\nDefaults to the path to sendmail found at configure time.\n.TP 14n\nmailfrom\nAddress to use for the\n\\(lqfrom\\(rq\naddress when sending warning and error mail.\nThe address should be enclosed in double quotes\n(\\&\"\")\nto protect against\n\\fBsudo\\fR\ninterpreting the\n\\(oq@\\(cq\nsign.\nDefaults to the name of the user running\n\\fBsudo\\fR.\n.TP 14n\nmailto\nAddress to send warning and error mail to (negate to prevent\n\\fBsudo\\fR\nfrom sending mail).\nThe address should be enclosed in double quotes\n(\\&\"\")\nto protect against\n\\fBsudo\\fR\ninterpreting the\n\\(oq@\\(cq\nsign.\nDefaults to @mailto@.\n.TP 14n\nrlimit_as\nThe maximum size to which the process's address space may grow (in bytes),\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_core\nThe largest size core dump file that may be created (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\nDefaults to 0 (no core dump created).\n.TP 14n\nrlimit_cpu\nThe maximum amount of CPU time that the process may use (in seconds).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_data\nThe maximum size of the data segment for the process (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_fsize\nThe largest size file that the process may create (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_locks\nThe maximum number of locks that the process may establish,\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_memlock\nThe maximum size that the process may lock in memory (in bytes),\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_nofile\n.br\nThe maximum number of files that the process may have open.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_nproc\nThe maximum number of processes that the user may run simultaneously.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_rss\nThe maximum size to which the process's resident set size may grow (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_stack\nThe maximum size to which the process's stack may grow (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrestricted_env_file\nThe\n\\fIrestricted_env_file\\fR\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n\\(oqVARIABLE=value\\(cq\nor\n\\(oqexport VARIABLE=value\\(cq.\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nUnlike\n\\fIenv_file\\fR,\nthe file's contents are not trusted and are processed in a manner\nsimilar to that of the invoking user's environment.\nIf\n\\fIenv_reset\\fR\nis enabled, variables in the file will only be added if they are\nmatched by either the\n\\fIenv_check\\fR\nor\n\\fIenv_keep\\fR\nlist.\nIf\n\\fIenv_reset\\fR\nis disabled, variables in the file are added as long as they\nare not matched by the\n\\fIenv_delete\\fR\nlist.\nIn either case, the contents of\n\\fIrestricted_env_file\\fR\nare processed before the contents of\n\\fIenv_file\\fR.\n.TP 14n\nrunchroot\nIf set,\n\\fBsudo\\fR\nwill use this value for the root directory when running a command.\nThe special value\n\\(lq*\\(rq\nwill allow the user to specify the root directory via\n\\fBsudo\\fR's\n\\fB\\-R\\fR\noption.\nSee the\n\\fIChroot_Spec\\fR\nsection for more details.\n.sp\nIt is only possible to use\n\\fIrunchroot\\fR\nas a command-specific Defaults setting if the command exists with\nthe same path both inside and outside the chroot jail.\nThis restriction does not apply to global, host, or user-based\nDefaults settings or to a\n\\fICmnd_Spec\\fR\nthat includes a\n\\fIChroot_Spec\\fR.\n.sp\nThis setting is only supported by version 1.9.3 or higher.\n.TP 14n\nruncwd\nIf set,\n\\fBsudo\\fR\nwill use this value for the working directory when running a command.\nThe special value\n\\(lq*\\(rq\nwill allow the user to specify the working directory via\n\\fBsudo\\fR's\n\\fB\\-D\\fR\noption.\nSee the\n\\fIChdir_Spec\\fR\nsection for more details.\n.sp\nThis setting is only supported by version 1.9.3 or higher.\n.TP 14n\nsecure_path\nIf set,\n\\fBsudo\\fR\nwill use this value in place of the user's\n\\fRPATH\\fR\nenvironment variable.\nThis option can be used to reset the\n\\fRPATH\\fR\nto a known good value that contains directories for system administrator\ncommands such as\n\\fI/usr/sbin\\fR.\n.sp\nUsers in the group specified by the\n\\fIexempt_group\\fR\noption are not affected by\n\\fIsecure_path\\fR.\nThis option is @secure_path@ by default.\n.TP 14n\nsyslog\nSyslog facility if syslog is being used for logging (negate to\ndisable syslog logging).\nDefaults to @logfac@.\n.sp\nThe following syslog facilities are supported:\n\\fBauthpriv\\fR\n(if your\nOS supports it),\n\\fBauth\\fR,\n\\fBdaemon\\fR,\n\\fBuser\\fR,\n\\fBlocal0\\fR,\n\\fBlocal1\\fR,\n\\fBlocal2\\fR,\n\\fBlocal3\\fR,\n\\fBlocal4\\fR,\n\\fBlocal5\\fR,\n\\fBlocal6\\fR,\nand\n\\fBlocal7\\fR.\n.TP 14n\nsyslog_badpri\n.br\nSyslog priority to use when the user is not allowed to run a command or\nwhen authentication is unsuccessful.\nDefaults to @badpri@.\n.sp\nThe following syslog priorities are supported:\n\\fBalert\\fR,\n\\fBcrit\\fR,\n\\fBdebug\\fR,\n\\fBemerg\\fR,\n\\fBerr\\fR,\n\\fBinfo\\fR,\n\\fBnotice\\fR,\n\\fBwarning\\fR,\nand\n\\fBnone\\fR.\nNegating the option or setting it to a value of\n\\fBnone\\fR\nwill disable logging of unsuccessful commands.\n.TP 14n\nsyslog_goodpri\nSyslog priority to use when the user is allowed to run a command and\nauthentication is successful.\nDefaults to @goodpri@.\n.sp\nSee\n\\fIsyslog_badpri\\fR\nfor the list of supported syslog priorities.\nNegating the option or setting it to a value of\n\\fBnone\\fR\nwill disable logging of successful commands.\n.TP 14n\nverifypw\nThis option controls when a password will be required when a user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-v\\fR\noption.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nall\nAll the user's\n\\fIsudoers\\fR\nfile entries for the current host must have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.PD\n.TP 8n\nalways\nThe user must always enter a password to use the\n\\fB\\-v\\fR\noption.\n.TP 8n\nany\nAt least one of the user's\n\\fIsudoers\\fR\nfile entries for the current host must have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.TP 8n\nnever\nThe user need never enter a password to use the\n\\fB\\-v\\fR\noption.\n.PP\nIf no value is specified, a value of\n\\fIall\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fIall\\fR.\n.RE\n.PP\n\\fBLists that can be used in a boolean context\\fR:\n.\\}\n.TP 18n\nenv_check\nEnvironment variables to be removed from the user's environment\nunless they are considered\n\\(lqsafe\\(rq.\nFor all variables except\n\\fRTZ\\fR,\n\\(lqsafe\\(rq\nmeans that the variable's value does not contain any\n\\(oq%\\(cq\nor\n\\(oq/\\(cq\ncharacters.\nThis can be used to guard against printf-style format vulnerabilities\nin poorly-written programs.\nThe\n\\fRTZ\\fR\nvariable is considered unsafe if any of the following are true:\n.PP\n.RS 18n\n.PD 0\n.TP 3n\n\\fB\\(bu\\fR\nIt consists of a fully-qualified path name,\noptionally prefixed with a colon\n(\\(oq:\\&\\(cq),\nthat does not match the location of the\n\\fIzoneinfo\\fR\ndirectory.\n.PD\n.TP 3n\n\\fB\\(bu\\fR\nIt contains a\n\\fI..\\fR\npath element.\n.TP 3n\n\\fB\\(bu\\fR\nIt contains white space or non-printable characters.\n.TP 3n\n\\fB\\(bu\\fR\nIt is longer than the value of\n\\fRPATH_MAX\\fR.\n.PP\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using\nthe\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nRegardless of whether the\n\\fIenv_reset\\fR\noption is enabled or disabled, variables specified by\n\\fIenv_check\\fR\nwill be preserved in the environment if they pass the aforementioned check.\nThe global list of environment variables to check is displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\n.RE\n.TP 18n\nenv_delete\nEnvironment variables to be removed from the user's environment when the\n\\fIenv_reset\\fR\noption is not in effect.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nThe global list of environment variables to remove is displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nMany operating systems will remove potentially dangerous variables\nfrom the environment of any set-user-ID process (such as\n\\fBsudo\\fR).\n.TP 18n\nenv_keep\nEnvironment variables to be preserved in the user's environment when the\n\\fIenv_reset\\fR\noption is in effect.\nThis allows fine-grained control over the environment\n\\fBsudo\\fR-spawned\nprocesses will receive.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nThe global list of variables to keep\nis displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\n.sp\nPreserving the\n\\fRHOME\\fR\nenvironment variable has security implications since many programs use it\nwhen searching for configuration or data files.\nAdding\n\\fRHOME\\fR\nto\n\\fIenv_keep\\fR\nmay enable a user to run unrestricted commands via\n\\fBsudo\\fR\nand is strongly discouraged.\nUsers wishing to edit files with\n\\fBsudo\\fR\nshould run\n\\fBsudoedit\\fR\n(or\n\\fBsudo\\fR \\fB\\-e\\fR)\nto get their accustomed editor configuration instead of\ninvoking the editor directly.\n.TP 18n\nlog_servers\nA list of one or more servers to use for remote event and I/O log storage,\nseparated by white space.\nLog servers must be running\n\\fBsudo_logsrvd\\fR\nor another service that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.sp\nServer addresses should be of the form\n\\(lqhost[:port][(tls)]\\(rq.\nThe host portion may be a host name, an IPv4 address, or an IPv6 address\nin square brackets.\n.sp\nIf the optional\n\\fItls\\fR\nflag is present, the connection will be secured\nwith Transport Layer Security (TLS) version 1.2 or 1.3.\nVersions of TLS prior to 1.2 are not supported.\n.sp\nIf a port is specified, it may either be a port number or a well-known\nservice name as defined by the system service name database.\nIf no port is specified, port 30343 will be used for plaintext\nconnections and port 30344 will be used for TLS connections.\n.sp\nWhen\n\\fIlog_servers\\fR\nis set, event log data will be logged both locally (see the\n\\fIsyslog\\fR\nand\n\\fIlog_file\\fR\nsettings) as well as remotely, but I/O log data will only be logged remotely.\nIf multiple hosts are specified, they will be attempted in reverse order.\nIf no log servers are available, the user will not be able to run\na command unless either the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\nLikewise, if the connection to the log server is interrupted while\n\\fBsudo\\fR\nis running, the command will be terminated unless the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npassprompt_regex\nA list of POSIX extended regular expressions used to\nmatch password prompts in the terminal output.\nAs an extension, if the regular expression begins with\n\\(lq(?i)\\(rq,\nit will be matched in a case-insensitive manner.\nEach regular expression is limited to 1024 characters.\nThis option is only used when\n\\fIlog_passwords\\fR\nhas been disabled.\nThe default value is\n\\(lq[Pp]assword[: ]*\\(rq\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.SH \"GROUP PROVIDER PLUGINS\"\nThe\n\\fBsudoers\\fR\nplugin supports its own plugin interface to allow non-Unix\ngroup lookups which can query a group source other\nthan the standard Unix group database.\nThis can be used to implement support for the\n\\fInonunix_group\\fR\nsyntax described earlier.\n.PP\nGroup provider plugins are specified via the\n\\fIgroup_plugin\\fR\nsetting.\nThe argument to\n\\fIgroup_plugin\\fR\nshould consist of the plugin path, either fully-qualified or relative to the\n\\fI@plugindir@\\fR\ndirectory, followed by any configuration options the plugin requires.\nThese options (if specified) will be passed to the plugin's initialization\nfunction.\nIf options are present, the string must be enclosed in double quotes\n(\\&\"\").\n.PP\nThe following group provider plugins are installed by default:\n.TP 6n\ngroup_file\nThe\n\\fIgroup_file\\fR\nplugin supports an alternate group file that uses the same syntax as the\n\\fI/etc/group\\fR\nfile.\nThe path to the group file should be specified as an option\nto the plugin.\nFor example, if the group file to be used is\n\\fI/etc/sudo-group\\fR:\n.nf\n.sp\n.RS 6n\nDefaults group_plugin=\"group_file.so /etc/sudo-group\"\n.RE\n.fi\n.TP 6n\nsystem_group\nThe\n\\fIsystem_group\\fR\nplugin supports group lookups via the standard C library functions\ngetgrnam(3)\nand\ngetgrid(3).\nThis plugin can be used in instances where the user belongs to\ngroups not present in the user's supplemental group vector.\nThis plugin takes no options:\n.nf\n.sp\n.RS 6n\nDefaults group_plugin=system_group.so\n.RE\n.fi\n.PP\nThe group provider plugin API is described in detail in\nsudo_plugin(@mansectform@).\n.SH \"EVENT LOGGING\"\n\\fBsudoers\\fR\ncan log events in either JSON or\n\\fIsudo\\fR\nformat,\nthis section describes the\n\\fIsudo\\fR\nlog format.\nDepending on\n\\fIsudoers\\fR\nconfiguration,\n\\fBsudoers\\fR\ncan log events via\nsyslog(3),\nto a local log file, or both.\nThe log format is almost identical in both cases.\n.SS \"Accepted command log entries\"\nCommands that sudo runs are logged using the following format (split\ninto multiple lines for readability):\n.nf\n.sp\n.RS 4n\ndate hostname progname: username : TTY=ttyname ; PWD=cwd ; \\e\n    USER=runasuser ; GROUP=runasgroup ; TSID=logid ; \\e\n    ENV=env_vars COMMAND=command\n.RE\n.fi\n.PP\nWhere the fields are as follows:\n.TP 14n\ndate\nThe date the command was run.\nTypically, this is in the format\n\\(lqMMM, DD, HH:MM:SS\\(rq.\nIf logging via\nsyslog(3),\nthe actual date format is controlled by the syslog daemon.\nIf logging to a file and the\n\\fIlog_year\\fR\noption is enabled,\nthe date will also include the year.\n.TP 14n\nhostname\nThe name of the host\n\\fBsudo\\fR\nwas run on.\nThis field is only present when logging via\nsyslog(3).\n.TP 14n\nprogname\nThe name of the program, usually\n\\fIsudo\\fR\nor\n\\fIsudoedit\\fR.\nThis field is only present when logging via\nsyslog(3).\n.TP 14n\nusername\nThe login name of the user who ran\n\\fBsudo\\fR.\n.TP 14n\nttyname\nThe short name of the terminal (e.g.,\n\\(lqconsole\\(rq,\n\\(lqtty01\\(rq,\nor\n\\(lqpts/0\\(rq)\n\\fBsudo\\fR\nwas run on, or\n\\(lqunknown\\(rq\nif there was no terminal present.\n.TP 14n\ncwd\nThe current working directory that\n\\fBsudo\\fR\nwas run in.\n.TP 14n\nrunasuser\nThe user the command was run as.\n.TP 14n\nrunasgroup\nThe group the command was run as if one was specified on the command line.\n.TP 14n\nlogid\nAn I/O log identifier that can be used to replay the command's output.\nThis is only present when the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noption is enabled.\n.TP 14n\nenv_vars\nA list of environment variables specified on the command line,\nif specified.\n.TP 14n\ncommand\nThe actual command that was executed.\n.PP\nMessages are logged using the locale specified by\n\\fIsudoers_locale\\fR,\nwhich defaults to the\n\\(oqC\\(cq\nlocale.\n.SS \"Denied command log entries\"\nIf the user is not allowed to run the command, the reason for the denial\nwill follow the user name.\nPossible reasons include:\n.TP 3n\nuser NOT in sudoers\nThe user is not listed in the\n\\fIsudoers\\fR\nfile.\n.TP 3n\nuser NOT authorized on host\nThe user is listed in the\n\\fIsudoers\\fR\nfile but is not allowed to run commands on the host.\n.TP 3n\ncommand not allowed\nThe user is listed in the\n\\fIsudoers\\fR\nfile for the host but they are not allowed to run the specified command.\n.TP 3n\n3 incorrect password attempts\nThe user failed to enter their password after 3 tries.\nThe actual number of tries will vary based on the number of\nfailed attempts and the value of the\n\\fIpasswd_tries\\fR\noption.\n.TP 3n\na password is required\nThe\n\\fB\\-n\\fR\noption was specified but a password was required.\n.TP 3n\nsorry, you are not allowed to set the following environment variables\nThe user specified environment variables on the command line that\nwere not allowed by\n\\fIsudoers\\fR.\n.SS \"Error log entries\"\nIf an error occurs,\n\\fBsudoers\\fR\nwill log a message and, in most cases, send a message to the\nadministrator via email.\nPossible errors include:\n.TP 3n\nparse error in @sysconfdir@/sudoers near line N\n\\fBsudoers\\fR\nencountered an error when parsing the specified file.\nIn some cases, the actual error may be one line above or below the\nline number listed, depending on the type of error.\n.TP 3n\nproblem with defaults entries\nThe\n\\fIsudoers\\fR\nfile contains one or more unknown Defaults settings.\nThis does not prevent\n\\fBsudo\\fR\nfrom running, but the\n\\fIsudoers\\fR\nfile should be checked using\n\\fBvisudo\\fR.\n.TP 3n\ntimestamp owner (username): \\&No such user\nThe time stamp directory owner, as specified by the\n\\fItimestampowner\\fR\nsetting, could not be found in the password database.\n.TP 3n\nunable to open/read @sysconfdir@/sudoers\nThe\n\\fIsudoers\\fR\nfile could not be opened for reading.\nThis can happen when the\n\\fIsudoers\\fR\nfile is located on a remote file system that maps user-ID 0 to\na different value.\nNormally,\n\\fBsudoers\\fR\ntries to open the\n\\fIsudoers\\fR\nfile using group permissions to avoid this problem.\nConsider either changing the ownership of\n\\fI@sysconfdir@/sudoers\\fR\nor adding an argument like\n\\(lqsudoers_uid=N\\(rq\n(where\n\\(oqN\\(cq\nis the user-ID that owns the\n\\fIsudoers\\fR\nfile) to the end of the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\nunable to open @sysconfdir@/sudoers\nThe\n\\fI@sysconfdir@/sudoers\\fR\nfile is missing.\n.TP 3n\n@sysconfdir@/sudoers is not a regular file\nThe\n\\fI@sysconfdir@/sudoers\\fR\nfile exists but is not a regular file or symbolic link.\n.TP 3n\n@sysconfdir@/sudoers is owned by uid N, should be 0\nThe\n\\fIsudoers\\fR\nfile has the wrong owner.\nIf you wish to change the\n\\fIsudoers\\fR\nfile owner, add\n\\(lqsudoers_uid=N\\(rq\n(where\n\\(oqN\\(cq\nis the user-ID that owns the\n\\fIsudoers\\fR\nfile) to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\n@sysconfdir@/sudoers is world writable\nThe permissions on the\n\\fIsudoers\\fR\nfile allow all users to write to it.\nThe\n\\fIsudoers\\fR\nfile must not be world-writable, the default file mode\nis 0440 (readable by owner and group, writable by none).\nThe default mode may be changed via the\n\\(lqsudoers_mode\\(rq\noption to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\n@sysconfdir@/sudoers is owned by gid N, should be 1\nThe\n\\fIsudoers\\fR\nfile has the wrong group ownership.\nIf you wish to change the\n\\fIsudoers\\fR\nfile group ownership, add\n\\(lqsudoers_gid=N\\(rq\n(where\n\\(oqN\\(cq\nis the group-ID that owns the\n\\fIsudoers\\fR\nfile) to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\nunable to open @rundir@/ts/username\n\\fBsudoers\\fR\nwas unable to read or create the user's time stamp file.\nThis can happen when\n\\fItimestampowner\\fR\nis set to a user other than\n\\fBroot\\fR\nand the mode on\n\\fI@rundir@\\fR\nis not searchable by group or other.\nThe default mode for\n\\fI@rundir@\\fR\nis 0711.\n.TP 3n\nunable to write to @rundir@/ts/username\n\\fBsudoers\\fR\nwas unable to write to the user's time stamp file.\n.TP 3n\n@rundir@/ts is owned by uid X, should be Y\nThe time stamp directory is owned by a user other than\n\\fItimestampowner\\fR.\nThis can occur when the value of\n\\fItimestampowner\\fR\nhas been changed.\n\\fBsudoers\\fR\nwill ignore the time stamp directory until the owner is corrected.\n.TP 3n\n@rundir@/ts is group writable\nThe time stamp directory is group-writable; it should be writable only by\n\\fItimestampowner\\fR.\nThe default mode for the time stamp directory is 0700.\n\\fBsudoers\\fR\nwill ignore the time stamp directory until the mode is corrected.\n.SS \"Notes on logging via syslog\"\nBy default,\n\\fBsudoers\\fR\nlogs messages via\nsyslog(3).\nThe\n\\fIdate\\fR,\n\\fIhostname\\fR,\nand\n\\fIprogname\\fR\nfields are added by the system's\nsyslog(3)\nfunction, not\n\\fBsudoers\\fR\nitself.\nAs such, they may vary in format on different systems.\n.PP\nThe maximum size of syslog messages varies from system to system.\nThe\n\\fIsyslog_maxlen\\fR\nsetting can be used to change the maximum syslog message size\nfrom the default value of 980 bytes.\nFor more information, see the description of\n\\fIsyslog_maxlen\\fR.\n.SS \"Notes on logging to a file\"\nIf the\n\\fIlogfile\\fR\noption is set,\n\\fBsudoers\\fR\nwill log to a local file, such as\n\\fI@log_dir@/sudo\\fR.\nWhen logging to a file,\n\\fBsudoers\\fR\nuses a format similar to\nsyslog(3),\nwith a few important differences:\n.TP 5n\n1.\\&\nThe\n\\fIprogname\\fR\nand\n\\fIhostname\\fR\nfields are not present.\n.TP 5n\n2.\\&\nIf the\n\\fIlog_year\\fR\noption is enabled,\nthe date will also include the year.\n.TP 5n\n3.\\&\nLines that are longer than\n\\fIloglinelen\\fR\ncharacters (80 by default) are word-wrapped and continued on the\nnext line with a four character indent.\nThis makes entries easier to read for a human being, but makes it\nmore difficult to use\ngrep(1)\non the log files.\nIf the\n\\fIloglinelen\\fR\noption is set to 0 (or negated with a\n\\(oq\\&!\\(cq),\nword wrap will be disabled.\n.SH \"I/O LOGGING\"\nWhen I/O logging is enabled,\n\\fBsudo\\fR\nwill runs the command in a pseudo-terminal, logging user input\nand/or output, depending on which\n\\fBsudoers\\fR\nflags are enabled.\nThere are five distinct types of I/O that can be logged, each with\na corresponding\n\\fBsudoers\\fR\nflag.\n.TS\nl l l.\n.PP\n\\fBType\\fR\t\\fBFlag\\fR\t\\fBDescription\\fR\n.PP\nterminal input\tlog_ttyin\tkeystrokes entered by the user\n.PP\nterminal output\tlog_ttyout\tcommand output displayed to the screen\n.PP\nstandard input\tlog_stdin\tinput from a pipe or a file\n.PP\nstandard output\tlog_stdout\toutput to a pipe or a file\n.PP\nstandard error\tlog_stderr\toutput to a pipe or a file\n.TE\n.PP\nIn addition to flags described the above, the\n\\fIlog_input\\fR\nflag and\n\\fRLOG_INPUT\\fR\ncommand tag set both\n\\fIlog_ttyin\\fR\nand\n\\fIlog_stdin\\fR.\nThe\n\\fIlog_output\\fR\nflag and\n\\fRLOG_OUTPUT\\fR\ncommand tag set\n\\fIlog_ttyout\\fR,\n\\fIlog_stdout\\fR,\nand\n\\fIlog_stderr\\fR.\n.PP\nTo capture terminal input and output,\n\\fBsudo\\fR\nrun the command in a pseudo-terminal, logging the input and\noutput before passing it on to the user.\nTo capture the standard input, standard output or standard error,\n\\fBsudo\\fR\nuses a pipe to interpose itself between the input or output stream,\nlogging the I/O before passing it to the other end of the pipe.\n.PP\nI/O can be logged either to the local machine or to a remote log server.\nFor local logs, I/O is logged to the directory specified by the\n\\fIiolog_dir\\fR\noption\n(\\fI@iolog_dir@\\fR\nby default)\nusing a unique session ID that is included in the\n\\fBsudo\\fR\nlog line, prefixed with\n\\(oqTSID=\\(cq.\nThe\n\\fIiolog_file\\fR\noption may be used to control the format of the session ID.\nFor remote logs, the\n\\fIlog_servers\\fR\nsetting is used to specify one or more log servers running\n\\fBsudo_logsrvd\\fR\nor another server that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.SS \"I/O logging pitfals\"\nWhen logging standard input, anything sent to the standard input\nwill be consumed, regardless of whether or not the command run via\n\\fBsudo\\fR\nis actively reading the standard input.\nThis may have unexpected results when using\n\\fBsudo\\fR\nin a shell script that expects to process the standard input.\nFor example, given the following shell script:\n.nf\n.sp\n.RS 4n\n#!/bin/sh\nsudo echo testing\necho done\n.RE\n.fi\n.PP\nIt will behave as expected when the script is passed to the shell as a\nan argument:\n.nf\n.sp\n.RS 4n\n$ sh test.sh\ntesting\ndone\n.RE\n.fi\n.PP\nHowever, if the script is passed to the shell on the standard input, the\n\\(oqsudo echo testing\\(cq\ncommand will consume the rest of the script.\nThis means that the\n\\(oqecho done\\(cq\nstatement is never executed.\n.nf\n.sp\n.RS 4n\n$ sh -s < test.sh\ntesting\n.RE\n.fi\n.PP\nThere are several ways to work around this problem:\n.TP 5n\n1.\\&\nRedirect the standard input from\n\\fI/dev/null\\fR\nwhen running a command via\n\\fBsudo\\fR\nthat does not need to read the standard input.\n.nf\n.sp\n.RS 9n\nsudo echo testing < /dev/null\n.RE\n.fi\n.TP 5n\n2.\\&\nPass the script to the shell by path name instead of via the standard input.\n.nf\n.sp\n.RS 9n\nsh test.sh\n.RE\n.fi\n.TP 5n\n3.\\&\nDisable logging the standard input for commands that do not need\nto read the standard input.\n.nf\n.sp\n.RS 9n\nDefaults!/bin/echo !log_stdin\n.RE\n.fi\n.PP\nDepending on the command, it may not be desirable to log the\nstandard input or standard output.\nFor example, I/O logging of commands that send or receive large\namount of data via the standard output or standard input such as\nrsync(1)\nand\ntar(1)\ncould fill up the log file system with superfluous data.\nIt is possible to disable logging of the standard input and standard\noutput for such commands as follows:\n.nf\n.sp\n.RS 4n\nCmnd_Alias COPY_CMDS = /usr/bin/tar, /usr/bin/cpio, /usr/bin/rsync\n\n# Log input and output but omit stdin and stdout when copying files.\nDefaults log_input, log_output\nDefaults!COPY_CMDS !log_stdin, !log_stdout\n.RE\n.fi\n.PP\nHowever, be aware that using the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag will also enable\n\\fIlog_stdin\\fR.\nLikewise, the\n\\fIlog_ouput\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag will enable\n\\fIlog_stdout\\fR\nand\n\\fIlog_stderr.\\fR\nCareful ordering of rules may be necessary to achieve the results\nthat you expect.\n.SS \"I/O log format\"\nFor both local and remote I/O logs, each log is stored in a separate\ndirectory that contains the following files:\n.TP 10n\n\\fIlog\\fR\nA text file containing information about the command.\nThe first line consists of the following colon-delimited fields:\nthe time the command was run, the name of the user\nwho ran\n\\fBsudo\\fR,\nthe name of the target user, the name of the target group (optional),\nthe terminal that\n\\fBsudo\\fR\nwas run from, and the number of lines and columns of the terminal.\nThe second and third lines contain the working directory the command\nwas run from and the path name of the command itself (with arguments\nif present).\n.TP 10n\n\\fIlog.json\\fR\nA JSON-formatted file containing information about the command.\nThis is similar to the\n\\fIlog\\fR\nfile but contains additional information and is easily extensible.\nThe\n\\fIlog.json\\fR\nfile will be used by\nsudoreplay(@mansectsu@)\nin preference to the\n\\fIlog\\fR\nfile if it exists.\nThe file may contain the following elements:\n.PP\n.RS 10n\n.PD 0\n.TP 6n\ntimestamp\nA JSON object containing time the command was run.\nIt consists of two values,\n\\fIseconds\\fR\nand\n\\fInanoseconds\\fR.\n.PD\n.TP 6n\ncolumns\nThe number of columns of the terminal the command ran on, or zero\nif no terminal was present.\n.TP 6n\ncommand\nThe fully-qualified path of the command that was run.\n.TP 6n\nlines\n.br\nThe number of lines of the terminal the command ran on, or zero\nif no terminal was present.\n.TP 6n\nrunargv\nA JSON array representing the command's argument vector as passed to the\nexecve(2)\nsystem call.\n.TP 6n\nrunenv\nA JSON array representing the command's environment as passed to the\nexecve(2)\nsystem call.\n.TP 6n\nrungid\nThe group ID the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.TP 6n\nrungroup\nThe name of the group the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.TP 6n\nrunuid\nThe user ID the command ran as.\n.TP 6n\nrunuser\nThe name of the user the command ran as.\n.TP 6n\nsubmitcwd\nThe current working directory at the time\n\\fBsudo\\fR\nwas run.\n.TP 6n\nsubmithost\nThe name of the host the command was run on.\n.TP 6n\nsubmituser\nThe name of the user who ran the command via\n\\fBsudo\\fR.\n.TP 6n\nttyname\nThe path name of the terminal the user invoked\n\\fBsudo\\fR\nfrom.\nIf the command was run in a pseudo-terminal,\n\\fIttyname\\fR\nwill be different from the terminal the command actually ran in.\n.PD 0\n.PP\n.RE\n.PD\n.TP 10n\n\\fItiming\\fR\nTiming information used to replay the session.\nEach line consists of the I/O log entry type and amount of time\nsince the last entry, followed by type-specific data.\nThe I/O log entry types and their corresponding type-specific data are:\n.PP\n.RS 10n\n.PD 0\n.TP 6n\n0\nstandard input, number of bytes in the entry\n.TP 6n\n1\nstandard output, number of bytes in the entry\n.TP 6n\n2\nstandard error, number of bytes in the entry\n.TP 6n\n3\nterminal input, number of bytes in the entry\n.TP 6n\n4\nterminal output, number of bytes in the entry\n.TP 6n\n5\nwindow change, new number lines and columns\n.TP 6n\n6\nbug compatibility for\n\\fBsudo\\fR\n1.8.7 terminal output\n.TP 6n\n7\ncommand suspend or resume, signal received\n.PP\n.RE\n.PD\n.TP 10n\n\\fIttyin\\fR\nRaw input from the user's terminal, exactly as it was received.\nThis file is only present if the\n\\fIlog_input\\fR\nor\n\\fIlog_ttyin\\fR\nflags are set and\n\\fBsudo\\fR\nwas run from a terminal.\nNo post-processing is performed.\nFor manual viewing, you may wish to convert carriage return characters\nin the log to line feeds.\nFor example:\n\\(oqgunzip -c ttyin | tr \\&\"\\er\\&\" \\&\"\\en\\&\"\\(cq\n.TP 10n\n\\fIstdin\\fR\nThe standard input when no terminal is present, or input redirected from\na pipe or file.\nThis file is only present if the\n\\fIlog_input\\fR\nor\n\\fIlog_stdin\\fR\nflags are set and the standard input is not connected to a terminal.\n.TP 10n\n\\fIttyout\\fR\nOutput from the pseudo-terminal (what the command writes to the screen).\nTerminal-specific post-processing is performed before the data is logged.\nThis means that, for example, line feeds are usually converted to\nline feed/carriage return pairs and tabs may be expanded to spaces.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_ttyout\\fR\nflags are set and\n\\fBsudo\\fR\nwas run from a terminal.\n.TP 10n\n\\fIstdout\\fR\nThe standard output when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_stdout\\fR\nflags are set and the standard output is not connected to a terminal.\n.TP 10n\n\\fIstderr\\fR\nThe standard error when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_stderr\\fR\nflags are set and the standard error is not connected to a terminal.\n.PP\nAll files other than\n\\fIlog\\fR\nare compressed in gzip format unless the\n\\fIcompress_io\\fR\nflag has been disabled.\nDue to buffering, it is not normally possible to display the I/O logs in\nreal-time as the program is executing.\nThe I/O log data will not be complete until the program run by\n\\fBsudo\\fR\nhas exited or has been terminated by a signal.\nThe\n\\fIiolog_flush\\fR\nflag can be used to disable buffering, in which case I/O log data\nis written to disk as soon as it is available.\nThe output portion of an I/O log file can be viewed with the\nsudoreplay(@mansectsu@)\nutility, which can also be used to list or search the available logs.\n.PP\nUser input may contain sensitive information such as passwords (even\nif they are not echoed to the screen), which will be stored in the\nlog file unencrypted.\nIn most cases, logging the command output via\n\\fIlog_output\\fR\nor\n\\fRLOG_OUTPUT\\fR\nis all that is required.\nWhen logging input, consider disabling the\n\\fIlog_passwords\\fR\nflag.\n.PP\nSince each session's I/O logs are stored in a separate directory,\ntraditional log rotation utilities cannot be used to limit the\nnumber of I/O logs.\nThe simplest way to limit the number of I/O is by setting the\n\\fImaxseq\\fR\noption to the maximum number of logs you wish to store.\nOnce the I/O log sequence number reaches\n\\fImaxseq\\fR,\nit will be reset to zero and\n\\fBsudoers\\fR\nwill truncate and re-use any existing I/O logs.\n.SH \"FILES\"\n.TP 26n\n\\fI@sysconfdir@/sudo.conf\\fR\nSudo front-end configuration\n.TP 26n\n\\fI@sysconfdir@/sudoers\\fR\nList of who can run what\n.TP 26n\n\\fI/etc/group\\fR\nLocal groups file\n.TP 26n\n\\fI/etc/netgroup\\fR\nList of network groups\n.TP 26n\n\\fI@iolog_dir@\\fR\nI/O log files\n.TP 26n\n\\fI@rundir@/ts\\fR\nDirectory containing time stamps for the\n\\fBsudoers\\fR\nsecurity policy\n.TP 26n\n\\fI@vardir@/lectured\\fR\nDirectory containing lecture status files for the\n\\fBsudoers\\fR\nsecurity policy\n.TP 26n\n\\fI/etc/environment\\fR\nInitial environment for\n\\fB\\-i\\fR\nmode on AIX and Linux systems\n.SH \"EXAMPLES\"\nBelow are example\n\\fIsudoers\\fR\nfile entries.\nAdmittedly, some of these are a bit contrived.\nFirst, we allow a few environment variables to pass and then define our\n\\fIaliases\\fR:\n.nf\n.sp\n.RS 0n\n# Run X applications through sudo; HOME is used to find the\n# .Xauthority file.  Other programs use HOME to locate configuration\n# files and this may lead to privilege escalation!\nDefaults env_keep += \"DISPLAY HOME\"\n\n# User alias specification\nUser_Alias\tFULLTIMERS = millert, mikef, dowdy\nUser_Alias\tPARTTIMERS = bostley, jwfox, crawl\nUser_Alias\tWEBADMIN = will, wendy, wim\n\n# Runas alias specification\nRunas_Alias\tOP = root, operator\nRunas_Alias\tDB = oracle, sybase\nRunas_Alias\tADMINGRP = adm, oper\n\n# Host alias specification\nHost_Alias\tSPARC = bigtime, eclipse, moet, anchor :\\e\n\t\tSGI = grolsch, dandelion, black :\\e\n\t\tALPHA = widget, thalamus, foobar :\\e\n\t\tHPPA = boa, nag, python\nHost_Alias\tCUNETS = 128.138.0.0/255.255.0.0\nHost_Alias\tCSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0\nHost_Alias\tSERVERS = primary, mail, www, ns\nHost_Alias\tCDROM = orion, perseus, hercules\n\n# Cmnd alias specification\nCmnd_Alias\tDUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\\e\n\t\t\t/usr/sbin/restore, /usr/sbin/rrestore,\\e\n\t\t\tsha224:0GomF8mNN3wlDt1HD9XldjJ3SNgpFdbjO1+NsQ== \\e\n\t\t\t/home/operator/bin/start_backups\nCmnd_Alias\tKILL = /usr/bin/kill\nCmnd_Alias\tPRINTING = /usr/sbin/lpc, /usr/bin/lprm\nCmnd_Alias\tSHUTDOWN = /usr/sbin/shutdown\nCmnd_Alias\tHALT = /usr/sbin/halt\nCmnd_Alias\tREBOOT = /usr/sbin/reboot\nCmnd_Alias\tSHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\\e\n\t\t\t /usr/local/bin/tcsh, /usr/bin/rsh,\\e\n\t\t\t /usr/local/bin/zsh\nCmnd_Alias\tSU = /usr/bin/su\nCmnd_Alias\tPAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less\n.RE\n.fi\n.PP\nHere we override some of the compiled in default values.\nWe want\n\\fBsudo\\fR\nto log via\nsyslog(3)\nusing the\n\\fIauth\\fR\nfacility in all cases and for commands to be run with\nthe target user's home directory as the working directory.\nWe don't want to subject the full time staff to the\n\\fBsudo\\fR\nlecture and we want to allow them to run commands in a\nchroot(2)\n\\(lqsandbox\\(rq\nvia the\n\\fB\\-R\\fR\noption.\nUser\n\\fBmillert\\fR\nneed not provide a password and we don't want to reset the\n\\fRLOGNAME\\fR\nor\n\\fRUSER\\fR\nenvironment variables when running commands as\n\\fBroot\\fR.\nAdditionally, on the machines in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR,\nwe keep an additional local log file and make sure we log the year\nin each log line since the log entries will be kept around for several years.\nLastly, we disable shell escapes for the commands in the PAGERS\n\\fICmnd_Alias\\fR\n(\\fI/usr/bin/more\\fR,\n\\fI/usr/bin/pg\\fR\nand\n\\fI/usr/bin/less\\fR)\n\\&.\nThis will not effectively constrain users with\n\\fBsudo\\fR\n\\fBALL\\fR\nprivileges.\n.nf\n.sp\n.RS 0n\n# Override built-in defaults\nDefaults\t\tsyslog=auth,runcwd=~\nDefaults>root\t\t!set_logname\nDefaults:FULLTIMERS\t!lecture,runchroot=*\nDefaults:millert\t!authenticate\nDefaults@SERVERS\tlog_year, logfile=@log_dir@/sudo.log\nDefaults!PAGERS\t\tnoexec\n.RE\n.fi\n.PP\nThe\n\\fIUser specification\\fR\nis the part that actually determines who may run what.\n.nf\n.sp\n.RS 0n\nroot\t\tALL = (ALL) ALL\n%wheel\t\tALL = (ALL) ALL\n.RE\n.fi\n.PP\nWe let\n\\fBroot\\fR\nand any user in group\n\\fBwheel\\fR\nrun any command on any host as any user.\n.nf\n.sp\n.RS 0n\nFULLTIMERS\tALL = NOPASSWD: ALL\n.RE\n.fi\n.PP\nFull time sysadmins\n(\\fBmillert\\fR,\n\\fBmikef\\fR,\nand\n\\fBdowdy\\fR)\nmay run any command on any host without authenticating themselves.\n.nf\n.sp\n.RS 0n\nPARTTIMERS\tALL = ALL\n.RE\n.fi\n.PP\nPart time sysadmins\n\\fBbostley\\fR,\n\\fBjwfox\\fR,\nand\n\\fBcrawl\\fR)\nmay run any command on any host but they must authenticate themselves\nfirst (since the entry lacks the\n\\fRNOPASSWD\\fR\ntag).\n.nf\n.sp\n.RS 0n\njack\t\tCSNETS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjack\\fR\nmay run any command on the machines in the\n\\fRCSNETS\\fR\nalias (the networks 128.138.243.0, 128.138.204.0, and 128.138.242.0).\nOf those networks, only 128.138.204.0 has an explicit netmask (in\nCIDR notation) indicating it is a class C network.\nFor the other networks in\n\\fRCSNETS\\fR,\nthe local machine's netmask will be used during matching.\n.nf\n.sp\n.RS 0n\nlisa\t\tCUNETS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBlisa\\fR\nmay run any command on any host in the\n\\fRCUNETS\\fR\nalias (the class B network 128.138.0.0).\n.nf\n.sp\n.RS 0n\noperator\tALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\\e\n\t\tsudoedit /etc/printcap, /usr/oper/bin/\n.RE\n.fi\n.PP\nThe\n\\fBoperator\\fR\nuser may run commands limited to simple maintenance.\nHere, those are commands related to backups, killing processes, the\nprinting system, shutting down the system, and any commands in the\ndirectory\n\\fI/usr/oper/bin/\\fR.\nOne command in the\n\\fRDUMPS\\fR\nCmnd_Alias includes a sha224 digest,\n\\fI/home/operator/bin/start_backups\\fR.\nThis is because the directory containing the script is writable by the\noperator user.\nIf the script is modified (resulting in a digest mismatch) it will no longer\nbe possible to run it via\n\\fBsudo\\fR.\n.nf\n.sp\n.RS 0n\njoe\t\tALL = /usr/bin/su operator\n.RE\n.fi\n.PP\nThe user\n\\fBjoe\\fR\nmay only\nsu(1)\nto operator.\n.nf\n.sp\n.RS 0n\npete\t\tHPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd *root*\n\n%opers\t\tALL = (: ADMINGRP) /usr/sbin/\n.RE\n.fi\n.PP\nUsers in the\n\\fBopers\\fR\ngroup may run commands in\n\\fI/usr/sbin/\\fR\nas themselves\nwith any group in the\n\\fRADMINGRP\\fR\n\\fIRunas_Alias\\fR\n(the\n\\fBadm\\fR\nand\n\\fBoper\\fR\ngroups).\n.PP\nThe user\n\\fBpete\\fR\nis allowed to change anyone's password except for\n\\fBroot\\fR\non the\n\\fRHPPA\\fR\nmachines.\nBecause command line arguments are matched as a single,\nconcatenated string, the\n\\(oq*\\(cq\nwildcard will match\n\\fImultiple\\fR\nwords.\nThis example assumes that\npasswd(1)\ndoes not take multiple user names on the command line.\nOn systems with GNU\ngetopt(3),\noptions to\npasswd(1)\nmay be specified after the user argument.\nAs a result, this rule will also allow:\n.nf\n.sp\n.RS 4n\npasswd username --expire\n.RE\n.fi\n.PP\nwhich may not be desirable.\n.nf\n.sp\n.RS 0n\nbob\t\tSPARC = (OP) ALL : SGI = (OP) ALL\n.RE\n.fi\n.PP\nThe user\n\\fBbob\\fR\nmay run anything on the\n\\fRSPARC\\fR\nand\n\\fRSGI\\fR\nmachines as any user listed in the\n\\fROP\\fR\n\\fIRunas_Alias\\fR\n(\\fBroot\\fR\nand\n\\fBoperator\\fR.)\n.nf\n.sp\n.RS 0n\njim\t\t+biglab = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjim\\fR\nmay run any command on machines in the\n\\fIbiglab\\fR\nnetgroup.\n\\fBsudo\\fR\nknows that\n\\(lqbiglab\\(rq\nis a netgroup due to the\n\\(oq+\\(cq\nprefix.\n.nf\n.sp\n.RS 0n\n+secretaries\tALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser\n.RE\n.fi\n.PP\nUsers in the\n\\fBsecretaries\\fR\nnetgroup need to help manage the printers as well as add and remove users,\nso they are allowed to run those commands on all machines.\n.nf\n.sp\n.RS 0n\nfred\t\tALL = (DB) NOPASSWD: ALL\n.RE\n.fi\n.PP\nThe user\n\\fBfred\\fR\ncan run commands as any user in the\n\\fRDB\\fR\n\\fIRunas_Alias\\fR\n(\\fBoracle\\fR\nor\n\\fBsybase\\fR)\nwithout giving a password.\n.nf\n.sp\n.RS 0n\njohn\t\tALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*\n.RE\n.fi\n.PP\nOn the\n\\fRALPHA\\fR\nmachines, user\n\\fBjohn\\fR\nmay su to anyone except\n\\fBroot\\fR\nbut he is not allowed to specify any options to the\nsu(1)\ncommand.\n.nf\n.sp\n.RS 0n\njen\t\tALL, !SERVERS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjen\\fR\nmay run any command on any machine except for those in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR\n(primary, mail, www, and ns).\n.nf\n.sp\n.RS 0n\njill\t\tSERVERS = /usr/bin/, !SU, !SHELLS\n.RE\n.fi\n.PP\nFor any machine in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR,\n\\fBjill\\fR\nmay run\nany commands in the directory\n\\fI/usr/bin/\\fR\nexcept for those commands\nbelonging to the\n\\fRSU\\fR\nand\n\\fRSHELLS\\fR\n\\fICmnd_Aliases\\fR.\nWhile not specifically mentioned in the rule, the commands in the\n\\fRPAGERS\\fR\n\\fICmnd_Alias\\fR\nall reside in\n\\fI/usr/bin\\fR\nand have the\n\\fInoexec\\fR\noption set.\n.nf\n.sp\n.RS 0n\nsteve\t\tCSNETS = (operator) /usr/local/op_commands/\n.RE\n.fi\n.PP\nThe user\n\\fBsteve\\fR\nmay run any command in the directory /usr/local/op_commands/\nbut only as user operator.\n.nf\n.sp\n.RS 0n\nmatt\t\tvalkyrie = KILL\n.RE\n.fi\n.PP\nOn his personal workstation, valkyrie,\n\\fBmatt\\fR\nneeds to be able to kill hung processes.\n.nf\n.sp\n.RS 0n\nWEBADMIN\twww = (www) ALL, (root) /usr/bin/su www\n.RE\n.fi\n.PP\nOn the host www, any user in the\n\\fRWEBADMIN\\fR\n\\fIUser_Alias\\fR\n(will, wendy, and wim), may run any command as user www (which owns the\nweb pages) or simply\nsu(1)\nto www.\n.nf\n.sp\n.RS 0n\nALL\t\tCDROM = NOPASSWD: /sbin/umount /CDROM,\\e\n\t\t/sbin/mount -o nosuid\\e,nodev /dev/cd0a /CDROM\n.RE\n.fi\n.PP\nAny user may mount or unmount a CD-ROM on the machines in the CDROM\n\\fIHost_Alias\\fR\n(orion, perseus, hercules) without entering a password.\nThis is a bit tedious for users to type, so it is a prime candidate\nfor encapsulating in a shell script.\n.SH \"SECURITY NOTES\"\n.SS \"Limitations of the \\(oq!\\&\\(cq operator\"\nIt is generally not effective to\n\\(lqsubtract\\(rq\ncommands from\n\\fBALL\\fR\nusing the\n\\(oq!\\&\\(cq\noperator.\nA user can trivially circumvent this by copying the desired command\nto a different name and then executing that.\nFor example:\n.nf\n.sp\n.RS 0n\nbill\tALL = ALL, !SU, !SHELLS\n.RE\n.fi\n.PP\nDoesn't really prevent\n\\fBbill\\fR\nfrom running the commands listed in\n\\fRSU\\fR\nor\n\\fRSHELLS\\fR\nsince he can simply copy those commands to a different name, or use\na shell escape from an editor or other program.\nTherefore, these kind of restrictions should be considered\nadvisory at best (and reinforced by policy).\n.PP\nIn general, if a user has sudo\n\\fBALL\\fR\nthere is nothing to prevent them from creating their own program that gives\nthem a\n\\fBroot\\fR\nshell (or making their own copy of a shell) regardless of any\n\\(oq!\\&\\(cq\nelements in the user specification.\n.SS \"Security implications of \\fIfast_glob\\fR\"\nIf the\n\\fIfast_glob\\fR\noption is in use, it is not possible to reliably negate commands where the\npath name includes globbing (aka wildcard) characters.\nThis is because the C library's\nfnmatch(3)\nfunction cannot resolve relative paths.\nWhile this is typically only an inconvenience for rules that grant privileges,\nit can result in a security issue for rules that subtract or revoke privileges.\n.PP\nFor example, given the following\n\\fIsudoers\\fR\nfile entry:\n.nf\n.sp\n.RS 0n\njohn\tALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\\e\n              /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root\n.RE\n.fi\n.PP\nUser\n\\fBjohn\\fR\ncan still run\n\\(oq/usr/bin/passwd root\\(cq\nif\n\\fIfast_glob\\fR\nis enabled by changing to\n\\fI/usr/bin\\fR\nand running\n\\(oq./passwd root\\(cq\ninstead.\n.PP\nAnother potential issue is that when\n\\fBsudo\\fR\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n\\fIsudoers\\fR\nfile.\nThis may lead to a time of check versus time of use race condition.\n.SS \"Wildcards in command arguments\"\nCommand line arguments are matched as a single, concatenated string.\nThis mean a wildcard character such as\n\\(oq\\&?\\(cq\nor\n\\(oq*\\(cq\nwill match across word boundaries, which may be unexpected.\nFor example, while a sudoers entry like:\n.nf\n.sp\n.RS 4n\n%operator ALL = /bin/cat @log_dir@/messages*\n.RE\n.fi\n.PP\nwill allow command like:\n.nf\n.sp\n.RS 4n\n$ sudo cat @log_dir@/messages.1\n.RE\n.fi\n.PP\nIt will also allow:\n.nf\n.sp\n.RS 4n\n$ sudo cat @log_dir@/messages /etc/shadow\n.RE\n.fi\n.PP\nwhich is probably not what was intended.\nA safer alternative is to use a regular expression for matching\ncommand line arguments.\nThe above example can be rewritten as a regular expression:\n.nf\n.sp\n.RS 4n\n%operator ALL = /bin/cat ^@log_dir@/messages[^[:space:]]*$\n.RE\n.fi\n.PP\nThe regular expression will only match a single file with a\nname that begins with\n\\fI@log_dir@/messages\\fR\nand does not include any white space in the name.\nIt is often better to do command line processing outside of the\n\\fIsudoers\\fR\nfile in a scripting language for anything non-trivial.\n.SS \"Regular expressions in command names\"\nUsing a regular expression to match a command name has the same\nsecurity implications as using the\n\\fIfast_glob\\fR\noption:\n.TP 3n\n\\fB\\(bu\\fR\nIt is not possible to reliably negate commands when the\npath name is a regular expression.\n.TP 3n\n\\fB\\(bu\\fR\nWhen\n\\fBsudo\\fR\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n\\fIsudoers\\fR\nfile.\nThis may lead to a time of check versus time of use race condition.\n.PP\nThese issues do not apply to rules where only the command line\noptions are matched using a regular expression.\n.SS \"Preventing shell escapes\"\nOnce\n\\fBsudo\\fR\nexecutes a program, that program is free to do whatever\nit pleases, including run other programs.\nThis can be a security issue since it is not uncommon for a program to\nallow shell escapes, which lets a user bypass\n\\fBsudo\\fR's\naccess control and logging.\nCommon programs that permit shell escapes include shells (obviously),\neditors, paginators, mail, and terminal programs.\n.PP\nThere are four basic approaches to this problem:\n.TP 11n\nrestrict\nAvoid giving users access to commands that allow the user to run\narbitrary commands.\nMany editors have a restricted mode where shell\nescapes are disabled, though\n\\fBsudoedit\\fR\nis a better solution to\nrunning editors via\n\\fBsudo\\fR.\nDue to the large number of programs that\noffer shell escapes, restricting users to the set of programs that\ndo not is often unworkable.\n.TP 11n\nintercept\nOn most systems,\n\\fBsudo\\fR's\n\\fIintercept\\fR\nfunctionality can be used to transparently intercept an attempt to\nrun a new command, allow or deny it based on\n\\fIsudoers\\fR\nrules, and log the result.\nFor example, this can be used to restrict the commands run from\nwithin a privileged shell or editor.\n.sp\nThere are two underlying mechanisms that may be used to implement\n\\fIintercept\\fR\nmode:\n\\fIdso\\fR\nand\n\\fItrace\\fR.\nThe\n\\fIintercept_type\\fR\nsetting can be used to select between them.\n.sp\nThe first mechanism,\n\\fIdso\\fR,\noverrides the standard C library functions that are used to execute a\ncommand.\nIt does this by setting an environment variable (usually\n\\fRLD_PRELOAD\\fR)\nto the path of a dynamic shared object, or shared library,\ncontaining custom versions of the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nand\nsystem(3)\nlibrary functions that connect back to\n\\fBsudo\\fR\nfor a policy decision.\nNote, however, that this applies only to dynamically-linked\nexecutables.\nIt is not possible to intercept commands for statically-linked executables\nor executables that run under binary emulation this way.\nBecause most dynamic loaders ignore\n\\fRLD_PRELOAD\\fR\n(or the equivalent) when running set-user-ID and set-group-ID programs,\n\\fBsudoers\\fR\nwill not permit such programs to be run in\n\\fIintercept\\fR\nmode by default.\nThe\n\\fIdso\\fR\nmechanism is incompatible with\n\\fBsudo\\fR's\nSELinux RBAC support (but see below).\nSELinux disables\n\\fRLD_PRELOAD\\fR\nby default and interferes with file descriptor inheritance, which\n\\fBsudo\\fR\nrelies on.\n.sp\nThe second mechanism,\n\\fItrace\\fR,\nis available on Linux systems that support\nseccomp(2)\nfiltering.\nIt uses\nptrace(2)\nand\nseccomp(2)\nto intercept the\nexecve(2)\nsystem call instead of pre-loading a dynamic shared object.\nBoth static and dynamic executables are supported and it is compatible with\n\\fBsudo\\fR's\nSELinux RBAC mode.\nFunctions utilizing the\nexecveat(2)\nsystem call, such as\nfexecve(3),\nare not currently intercepted.\n.sp\nThe\n\\fIintercept\\fR\nfeature is known to work on Solaris, *BSD, Linux, macOS, HP-UX 11.x\nand AIX 5.3 and above.\nIt should be supported on most operating systems that support the\n\\fRLD_PRELOAD\\fR\nenvironment variable or an equivalent.\nIt is not possible to intercept shell built-in commands or restrict\nthe ability to read or write sensitive files from within a shell.\n.sp\nTo enable intercept mode on a per-command basis, use the\n\\fRINTERCEPT\\fR\ntag as documented in the User Specification section above.\nHere is that example again:\n.nf\n.sp\n.RS 11n\nchuck\tresearch = INTERCEPT: ALL\n.RE\n.fi\n.RS 11n\n.sp\nThis allows user\n\\fBchuck\\fR\nto run any command on the machine\n\\(lqresearch\\(rq\nin intercept mode.\nAny commands run via shell escapes will be validated and logged by\n\\fBsudo\\fR.\nIf you are unsure whether or not your system is capable of supporting\n\\fIintercept\\fR,\nyou can always just try it out and check whether or not external\ncommands run via a shell are logged when\n\\fIintercept\\fR\nis enabled.\n.sp\nThere is an inherent race condition between when a command is checked against\n\\fBsudoers\\fR\nrules and when it is actually executed.\nIf a user is allowed to run arbitrary commands, they may be able\nto change the\nexecve(2)\narguments in the program after the\n\\fBsudoers\\fR\npolicy check has completed but before the new command is executed.\nStarting with version 1.9.12, the\n\\fItrace\\fR\nmethod will verify that the command and its arguments have not\nchanged after\nexecve(2)\nhas completed but before execution of the new program has had a chance to run.\nThis is not the case with the\n\\fIdso\\fR\nmethod.\nSee the description of the\n\\fIintercept_verify\\fR\nsetting for more information.\n.RE\n.TP 11n\nlog\nThere are two separate but related ways to log additional commands.\nThe first is to enable I/O logging using the\n\\fIlog_output\\fR\nflag.\nThis will log the command's output but will not create an event log\nentry when the additional command is run.\nThe second is to enable the\n\\fIlog_subcmds\\fR\nflag in\n\\fIsudoers\\fR\nwhich will create an event log entry every time a new command is run.\nIf I/O logging is also enabled, the log entry will include a time offset\ninto the I/O log to indicate when the command was run.\nThis offset can be passed to the\nsudoreplay(@mansectsu@)\nutility to replay the I/O log at the exact moment when the command was run.\nThe\n\\fIlog_subcmds\\fR\nflag uses the same mechanism as\n\\fIintercept\\fR\n(see above) and has the same limitations.\n.TP 11n\nnoexec\n\\fBsudo\\fR's\n\\fInoexec\\fR\nfunctionality can be used to prevent a program run by\n\\fBsudo\\fR\nfrom executing any other programs.\nOn most systems, it uses the same\n\\fRLD_PRELOAD\\fR\nmechanism as\n\\fIintercept\\fR\n(see above) and thus the same caveats apply.\nThe\n\\fInoexec\\fR\nfunctionality\nis capable of blocking execution of commands run via the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexect(3),\nexecv(3),\nexecveat(3),\nexecvP(3),\nexecvp(3),\nexecvpe(3),\nfexecve(3),\npopen(3),\nposix_spawn(3),\nposix_spawnp(3),\nsystem(3),\nand\nwordexp(3)\nfunctions.\nOn Linux, a\nseccomp(2)\nfilter is used to implement\n\\fInoexec\\fR.\nOn Solaris 10 and higher,\n\\fInoexec\\fR\nuses Solaris privileges instead of the\n\\fRLD_PRELOAD\\fR\nenvironment variable.\n.sp\nTo enable\n\\fInoexec\\fR\nfor a command, use the\n\\fRNOEXEC\\fR\ntag as documented in the User Specification section above.\nHere is that example again:\n.nf\n.sp\n.RS 11n\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.RE\n.fi\n.RS 11n\n.sp\nThis allows user\n\\fBaaron\\fR\nto run\n\\fI/usr/bin/more\\fR\nand\n\\fI/usr/bin/vi\\fR\nwith\n\\fInoexec\\fR\nenabled.\nThis will prevent those two commands from\nexecuting other commands (such as a shell).\nIf you are unsure whether or not your system is capable of supporting\n\\fInoexec\\fR\nyou can always just try it out and check whether shell escapes work when\n\\fInoexec\\fR\nis enabled.\n.RE\n.PP\nRestricting shell escapes is not a panacea.\nPrograms running as\n\\fBroot\\fR\nare still capable of many potentially hazardous operations (such\nas changing or overwriting files) that could lead to unintended\nprivilege escalation.\nIn the specific case of an editor, a safer approach is to give the\nuser permission to run\n\\fBsudoedit\\fR\n(see below).\n.SS \"Secure editing\"\nThe\n\\fBsudoers\\fR\nplugin includes\n\\fBsudoedit\\fR\nsupport which allows users to securely edit files with the editor\nof their choice.\nAs\n\\fBsudoedit\\fR\nis a built-in command, it must be specified in the\n\\fIsudoers\\fR\nfile without a leading path.\nHowever, it may take command line arguments just as a normal command does.\nWildcards used in\n\\fIsudoedit\\fR\ncommand line arguments are expected to be path names, so a forward slash\n(\\(oq/\\(cq)\nwill not be matched by a wildcard.\n.PP\nUnlike other\n\\fBsudo\\fR\ncommands, the editor is run with the permissions of the invoking\nuser and with the environment unmodified.\nMore information may be found in the description of the\n\\fB\\-e\\fR\noption in\nsudo(@mansectsu@).\n.PP\nFor example, to allow user operator to edit the\n\\(lqmessage of the day\\(rq\nfile on any machine:\n.nf\n.sp\n.RS 4n\noperator ALL = sudoedit /etc/motd\n.RE\n.fi\n.PP\nThe operator user then runs\n\\fBsudoedit\\fR\nas follows:\n.nf\n.sp\n.RS 4n\n$ sudoedit /etc/motd\n.RE\n.fi\n.PP\nThe editor will run as the operator user, not\n\\fB@runas_default@\\fR,\non a temporary copy of\n\\fI/etc/motd\\fR.\nAfter the file has been edited,\n\\fI/etc/motd\\fR\nwill be updated with the contents of the temporary copy.\n.PP\nUsers should\n\\fInever\\fR\nbe granted\n\\fBsudoedit\\fR\npermission to edit a file that resides in a directory the user\nhas write access to, either directly or via a wildcard.\nIf the user has write access to the directory it is possible to\nreplace the legitimate file with a link to another file,\nallowing the editing of arbitrary files.\nTo prevent this, starting with version 1.8.16, symbolic links will\nnot be followed in writable directories and\n\\fBsudoedit\\fR\nwill refuse to edit a file located in a writable directory\nunless the\n\\fIsudoedit_checkdir\\fR\noption has been disabled or the invoking user is\n\\fBroot\\fR.\nAdditionally, in version 1.8.15 and higher,\n\\fBsudoedit\\fR\nwill refuse to open a symbolic link unless either the\n\\fIsudoedit_follow\\fR\noption is enabled or the\n\\fIsudoedit\\fR\ncommand is prefixed with the\n\\fRFOLLOW\\fR\ntag in the\n\\fIsudoers\\fR\nfile.\n.SS \"Time stamp file checks\"\n\\fBsudoers\\fR\nwill check the ownership of its time stamp directory\n(\\fI@rundir@/ts\\fR\nby default)\nand ignore the directory's contents if it is not owned by\n\\fBroot\\fR\nor if it is writable by a user other than\n\\fBroot\\fR.\nOlder versions of\n\\fBsudo\\fR\nstored time stamp files in\n\\fI/tmp\\fR;\nthis is no longer recommended as it may be possible for a user\nto create the time stamp themselves on systems that allow\nunprivileged users to change the ownership of files they create.\n.PP\nWhile the time stamp directory\n\\fIshould\\fR\nbe cleared at reboot time, not all systems contain a\n\\fI/run\\fR\nor\n\\fI/var/run\\fR\ndirectory.\nTo avoid potential problems,\n\\fBsudoers\\fR\nwill ignore time stamp files that date from before the machine booted\non systems where the boot time is available.\n.PP\nSome systems with graphical desktop environments allow unprivileged\nusers to change the system clock.\nSince\n\\fBsudoers\\fR\nrelies on the system clock for time stamp validation, it may be\npossible on such systems for a user to run\n\\fBsudo\\fR\nfor longer than\n\\fItimestamp_timeout\\fR\nby setting the clock back.\nTo combat this,\n\\fBsudoers\\fR\nuses a monotonic clock (which never moves backwards) for its time stamps\nif the system supports it.\n.PP\n\\fBsudoers\\fR\nwill not honor time stamps set far in the future.\nTime stamps with a date greater than current_time + 2 *\n\\fRTIMEOUT\\fR\nwill be ignored and\n\\fBsudoers\\fR\nwill log and complain.\n.PP\nIf the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqtty\\(rq,\nthe time stamp record includes the device number of the terminal\nthe user authenticated with.\nThis provides per-terminal granularity but time stamp records may still\noutlive the user's session.\n.PP\nUnless the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqglobal\\(rq,\nthe time stamp record also includes the session ID of the process\nthat last authenticated.\nThis prevents processes in different terminal sessions from using\nthe same time stamp record.\nOn systems where a process's start time can be queried,\nthe start time of the session leader\nis recorded in the time stamp record.\nIf no terminal is present or the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqppid\\(rq,\nthe start time of the parent process is used instead.\nIn most cases this will prevent a time stamp record from being re-used\nwithout the user entering a password when logging out and back in again.\n.SH \"DEBUGGING\"\nVersions 1.8.4 and higher of the\n\\fBsudoers\\fR\nplugin support a flexible debugging framework that can help track\ndown what the plugin is doing internally if there is a problem.\nThis can be configured in the\nsudo.conf(@mansectform@)\nfile.\n.PP\nThe\n\\fBsudoers\\fR\nplugin uses the same debug flag format as the\n\\fBsudo\\fR\nfront-end:\n\\fIsubsystem\\fR@\\fIpriority\\fR.\n.PP\nThe priorities used by\n\\fBsudoers\\fR,\nin order of decreasing severity,\nare:\n\\fIcrit\\fR, \\fIerr\\fR, \\fIwarn\\fR, \\fInotice\\fR, \\fIdiag\\fR, \\fIinfo\\fR, \\fItrace\\fR,\nand\n\\fIdebug\\fR.\nEach priority, when specified, also includes all priorities higher\nthan it.\nFor example, a priority of\n\\fInotice\\fR\nwould include debug messages logged at\n\\fInotice\\fR\nand higher.\n.PP\nThe following subsystems are used by the\n\\fBsudoers\\fR\nplugin:\n.TP 10n\n\\fIalias\\fR\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR\nand\n\\fICmnd_Alias\\fR\nprocessing\n.TP 10n\n\\fIall\\fR\nmatches every subsystem\n.TP 10n\n\\fIaudit\\fR\nBSM and Linux audit code\n.TP 10n\n\\fIauth\\fR\nuser authentication\n.TP 10n\n\\fIdefaults\\fR\n\\fIsudoers\\fR\nfile\n\\fIDefaults\\fR\nsettings\n.TP 10n\n\\fIenv\\fR\nenvironment handling\n.TP 10n\n\\fIldap\\fR\nLDAP-based sudoers\n.TP 10n\n\\fIlogging\\fR\nlogging support\n.TP 10n\n\\fImatch\\fR\nmatching of users, groups, hosts, and netgroups in the\n\\fIsudoers\\fR\nfile\n.TP 10n\n\\fInetif\\fR\nnetwork interface handling\n.TP 10n\n\\fInss\\fR\nnetwork service switch handling in\n\\fBsudoers\\fR\n.TP 10n\n\\fIparser\\fR\n\\fIsudoers\\fR\nfile parsing\n.TP 10n\n\\fIperms\\fR\npermission setting\n.TP 10n\n\\fIplugin\\fR\nThe equivalent of\n\\fImain\\fR\nfor the plugin.\n.TP 10n\n\\fIpty\\fR\npseudo-terminal related code\n.TP 10n\n\\fIrbtree\\fR\nredblack tree internals\n.TP 10n\n\\fIsssd\\fR\nSSSD-based sudoers\n.TP 10n\n\\fIutil\\fR\nutility functions\n.PP\nFor example:\n.nf\n.sp\n.RS 0n\nDebug @sudoers_plugin@ @log_dir@/sudoers_debug match@info,nss@info\n.RE\n.fi\n.PP\nFor more information, see the\nsudo.conf(@mansectform@)\nmanual.\n.SH \"SEE ALSO\"\nssh(1),\nsu(1),\nfnmatch(3),\nglob(3),\nmktemp(3),\nstrftime(3),\nsudo.conf(@mansectform@),\nsudo_plugin(@mansectform@),\nsudoers.ldap(@mansectform@),\nsudoers_timestamp(@mansectform@),\nsudo(@mansectsu@),\nvisudo(@mansectsu@)\n.SH \"AUTHORS\"\nMany people have worked on\n\\fBsudo\\fR\nover the years; this version consists of code written primarily by:\n.sp\n.RS 6n\nTodd C. Miller\n.RE\n.PP\nSee the CONTRIBUTORS.md file in the\n\\fBsudo\\fR\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n\\fBsudo\\fR.\n.SH \"CAVEATS\"\nThe\n\\fIsudoers\\fR\nfile should\n\\fBalways\\fR\nbe edited by the\n\\fBvisudo\\fR\nutility which locks the file and checks for syntax errors.\nIf\n\\fIsudoers\\fR\ncontains syntax errors,\n\\fBsudo\\fR\nmay refuse to run, which is a serious problem if\n\\fBsudo\\fR\nis your only method of obtaining superuser privileges.\nRecent versions of\n\\fBsudoers\\fR\nwill attempt to recover after a syntax error by ignoring the rest of\nthe line after encountering an error.\nOlder versions of\n\\fBsudo\\fR\nwill not run if\n\\fIsudoers\\fR\ncontains a syntax error.\n.PP\nWhen using netgroups of machines (as opposed to users), if you\nstore fully qualified host name in the netgroup (as is usually the\ncase), you either need to have the machine's host name be fully qualified\nas returned by the\n\\fIhostname\\fR\ncommand or use the\n\\fIfqdn\\fR\noption in\n\\fIsudoers\\fR.\n.SH \"BUGS\"\nIf you believe you have found a bug in\n\\fBsudo\\fR,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.SH \"SUPPORT\"\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.SH \"DISCLAIMER\"\n\\fBsudo\\fR\nis provided\n\\(lqAS IS\\(rq\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n\\fBsudo\\fR\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 1994-1996, 1998-2005, 2007-2023\n.\\\"\tTodd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.\\\" Sponsored in part by the Defense Advanced Research Projects\n.\\\" Agency (DARPA) and Air Force Research Laboratory, Air Force\n.\\\" Materiel Command, USAF, under agreement number F39502-99-1-0512.\n.\\\"\n.nr SL @SEMAN@\n.nr AA @AAMAN@\n.nr BA @BAMAN@\n.nr LC @LCMAN@\n.nr PS @PSMAN@\n.Dd January 16, 2023\n.Dt SUDOERS @mansectform@\n.Os Sudo @PACKAGE_VERSION@\n.Sh NAME\n.Nm sudoers\n.Nd default sudo security policy plugin\n.Sh DESCRIPTION\nThe\n.Nm\npolicy plugin determines a user's\n.Nm sudo\nprivileges.\nIt is the default\n.Nm sudo\npolicy plugin.\nThe policy is driven by\nthe\n.Pa @sysconfdir@/sudoers\nfile or, optionally, in LDAP.\nThe policy format is described in detail in the\n.Sx SUDOERS FILE FORMAT\nsection.\nFor information on storing\n.Nm\npolicy information\nin LDAP, see\n.Xr sudoers.ldap @mansectform@ .\n.Ss Configuring sudo.conf for sudoers\n.Nm sudo\nconsults the\n.Xr sudo.conf @mansectform@\nfile to determine which plugins to load.\nIf no\n.Xr sudo.conf @mansectform@\nfile is present, or if it contains no\n.Em Plugin\nlines,\n.Nm\nwill be used for auditing, policy decisions and I/O logging.\nTo explicitly configure\n.Xr sudo.conf @mansectform@\nto use the\n.Nm\nplugin, the following configuration can be used.\n.Bd -literal -offset 4n\nPlugin sudoers_audit @sudoers_plugin@\nPlugin sudoers_policy @sudoers_plugin@\nPlugin sudoers_io @sudoers_plugin@\n.Ed\n.Pp\nStarting with\n.Nm sudo\n1.8.5, it is possible to specify optional arguments to the\n.Nm\nplugin in the\n.Xr sudo.conf @mansectform@\nfile.\nPlugin arguments, if any, should be listed after the path to the plugin\n(i.e., after\n.Pa @sudoers_plugin@ ) .\nThe arguments are only effective for the plugin that opens (and parses) the\n.Em sudoers\nfile.\n.Pp\nFor\n.Nm sudo\nversion 1.9.1 and higher, this is the\n.Em sudoers_audit\nplugin.\nFor older versions, it is the\n.Em sudoers_policy\nplugin.\nMultiple arguments may be specified, separated by white space.\nFor example:\n.Bd -literal -offset 4n\nPlugin sudoers_audit @sudoers_plugin@ sudoers_mode=0400 error_recovery=false\n.Ed\n.Pp\nThe following plugin arguments are supported:\n.Bl -tag -width 4n\n.It error_recovery=bool\nThe\n.Em error_recovery\nargument can be used to control whether\n.Nm\nshould attempt to recover from syntax errors in the\n.Em sudoers\nfile.\nIf set to\n.Em true\n(the default),\n.Nm\nwill try to recover from a syntax error by discarding the portion\nof the line that contains the error until the end of the line.\nA value of\n.Em false\nwill disable error recovery.\nPrior to version 1.9.3, no error recovery was performed.\n.It ldap_conf=pathname\nThe\n.Em ldap_conf\nargument can be used to override the default path to the\n.Pa ldap.conf\nfile.\n.It ldap_secret=pathname\nThe\n.Em ldap_secret\nargument can be used to override the default path to the\n.Pa ldap.secret\nfile.\n.It sudoers_file=pathname\nThe\n.Em sudoers_file\nargument can be used to override the default path to the\n.Em sudoers\nfile.\n.It sudoers_uid=user-ID\nThe\n.Em sudoers_uid\nargument can be used to override the default owner of the sudoers file.\nIt should be specified as a numeric user-ID.\n.It sudoers_gid=group-ID\nThe\n.Em sudoers_gid\nargument can be used to override the default group of the sudoers file.\nIt must be specified as a numeric group-ID (not a group name).\n.It sudoers_mode=mode\nThe\n.Em sudoers_mode\nargument can be used to override the default file mode for the sudoers file.\nIt should be specified as an octal value.\n.El\n.Pp\nFor more information on configuring\n.Xr sudo.conf @mansectform@ ,\nrefer to its manual.\n.Ss User Authentication\nThe\n.Nm\nsecurity policy requires that most users authenticate\nthemselves before they can use\n.Nm sudo .\nA password is not required\nif the invoking user is\n.Sy root ,\nif the target user is the same as the invoking user, or if the\npolicy has disabled authentication for the user or command.\nUnlike\n.Xr su 1 ,\nwhen\n.Nm\nrequires\nauthentication, it validates the invoking user's credentials, not\nthe target user's (or\n.Sy @runas_default@ Ns No 's)\ncredentials.\nThis can be changed via\nthe\n.Em rootpw ,\n.Em targetpw\nand\n.Em runaspw\nflags, described later.\n.Pp\nIf a user who is not listed in the policy tries to run a command\nvia\n.Nm sudo ,\nmail is sent to the proper authorities.\nThe address\nused for such mail is configurable via the\n.Em mailto\nDefaults entry\n(described later) and defaults to\n.Em @mailto@ .\n.Pp\nNo mail will be sent if an unauthorized user tries to run\n.Nm sudo\nwith the\n.Fl l\nor\n.Fl v\noption unless there is an authentication error and\neither the\n.Em mail_always\nor\n.Em mail_badpass\nflags are enabled.\nThis allows users to\ndetermine for themselves whether or not they are allowed to use\n.Nm sudo .\nBy default, all attempts to run\n.Nm sudo\n(successful or not)\nare logged, regardless of whether or not mail is sent.\n.Pp\nIf\n.Nm sudo\nis run by\n.Sy root\nand the\n.Ev SUDO_USER\nenvironment variable\nis set, the\n.Nm\npolicy will use this value to determine who\nthe actual user is.\nThis can be used by a user to log commands\nthrough sudo even when a\n.Sy root\nshell has been invoked.\nIt also\nallows the\n.Fl e\noption to remain useful even when invoked via a\nsudo-run script or program.\nNote, however, that the\n.Em sudoers\nfile lookup is still done for\n.Sy root ,\nnot the user specified by\n.Ev SUDO_USER .\n.Pp\n.Nm\nuses per-user time stamp files for credential caching.\nOnce a user has been authenticated, a record is written\ncontaining the user-ID that was used to authenticate, the\nterminal session ID, the start time of the session leader\n(or parent process) and a time stamp\n(using a monotonic clock if one is available).\nThe user may then use\n.Nm sudo\nwithout a password for a short period of time (@timeout@ minutes\nunless overridden by the\n.Em timestamp_timeout\noption).\nBy default,\n.Nm\nuses a separate record for each terminal, which means that\na user's login sessions are authenticated separately.\nThe\n.Em timestamp_type\noption can be used to select the type of time stamp record\n.Nm\nwill use.\n.Ss Logging\nBy default,\n.Nm\nlogs both successful and unsuccessful attempts (as well\nas errors).\nThe\n.Em log_allowed\nand\n.Em log_denied\nflags can be used to control this behavior.\nMessages can be logged to\n.Xr syslog 3 ,\na log file, or both.\nThe default is to log to\n.Xr syslog 3\nbut this is configurable via the\n.Em syslog\nand\n.Em logfile\nsettings.\nSee\n.Sx \"EVENT LOGGING\"\nfor a description of the log file format.\n.Pp\n.Nm\nis also capable of running a command in a pseudo-terminal and logging\ninput and/or output.\nThe standard input, standard output, and standard error can be logged\neven when not associated with a terminal.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\n.Pp\nStarting with version 1.9, the\n.Em log_servers\nsetting may be used to send event and I/O log data to a remote server running\n.Nm sudo_logsrvd\nor another service that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Ss Command environment\nSince environment variables can influence program behavior,\n.Nm\nprovides a means to restrict which variables from the user's\nenvironment are inherited by the command to be run.\nThere are two\ndistinct ways\n.Nm\ncan deal with environment variables.\n.Pp\nBy default, the\n.Em env_reset\nflag is enabled.\nThis causes commands\nto be executed with a new, minimal environment.\nOn AIX (and Linux\nsystems without PAM), the environment is initialized with the\ncontents of the\n.Pa /etc/environment\nfile.\n.if \\n(LC \\{\\\nOn\n.Bx\nsystems, if the\n.Em use_loginclass\nflag is enabled, the environment is initialized\nbased on the\n.Em path\nand\n.Em setenv\nsettings in\n.Pa /etc/login.conf .\n.\\}\nThe\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev LOGNAME\nand\n.Ev USER\nenvironment variables are initialized based on the target user\nand the\n.Ev SUDO_*\nvariables are set based on the invoking user.\nAdditional variables, such as\n.Ev DISPLAY ,\n.Ev PATH\nand\n.Ev TERM ,\nare preserved from the invoking user's environment if permitted by the\n.Em env_check ,\nor\n.Em env_keep\noptions.\nA few environment variables are treated specially.\nIf the\n.Ev PATH\nand\n.Ev TERM\nvariables are not preserved from the user's environment, they will be set\nto default values.\nThe\n.Ev LOGNAME\nand\n.Ev USER\nare handled as a single entity.\nIf one of them is preserved (or removed) from the user's environment,\nthe other will be as well.\nIf\n.Ev LOGNAME\nand\n.Ev USER\nare to be preserved but only one of them is present in the user's environment,\nthe other will be set to the same value.\nThis avoids an inconsistent environment where one of the variables\ndescribing the user name is set to the invoking user and one is\nset to the target user.\nEnvironment variables with a value beginning with\n.Ql ()\nare removed unless both the name and value parts are matched by\n.Em env_keep\nor\n.Em env_check ,\nas they may be interpreted as functions by the\n.Sy bash\nshell.\nPrior to version 1.8.11, such variables were always removed.\n.Pp\nIf, however, the\n.Em env_reset\nflag is disabled, any variables not\nexplicitly denied by the\n.Em env_check\nand\n.Em env_delete\noptions are allowed and their values are\ninherited from the invoking process.\nPrior to version 1.8.21, environment variables with a value beginning with\n.Ql ()\nwere always removed.\nBeginning with version 1.8.21, a pattern in\n.Em env_delete\nis used to match\n.Sy bash\nshell functions instead.\nSince it is not possible\nto block all potentially dangerous environment variables, use\nof the default\n.Em env_reset\nbehavior is encouraged.\n.Pp\nEnvironment variables specified by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep\nmay include one or more\n.Ql *\ncharacters which will match zero or more characters.\nNo other wildcard characters are supported.\n.Pp\nBy default, environment variables are matched by name.\nHowever, if the pattern includes an equal sign\n.Pq Ql =\\& ,\nboth the variables name and value must match.\nFor example, a\n.Sy bash\nshell function could be matched as follows:\n.Bd -literal -offset 4n\nenv_keep += \"BASH_FUNC_my_func%%=()*\"\n.Ed\n.Pp\nWithout the\n.Ql =()*\nsuffix, this would not match, as\n.Sy bash\nshell functions are not preserved by default.\n.Pp\nThe complete list of environment variables that are preserved or removed,\nas modified by global Defaults parameters in\n.Em sudoers ,\nis displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nThe list of environment variables to remove\nvaries based on the operating system\n.Nm sudo\nis running on.\n.Pp\nOther\n.Nm\noptions may influence the command environment, such as\n.Em always_set_home ,\n.Em secure_path ,\n.Em set_logname ,\nand\n.Em set_home .\n.Pp\nOn systems that support PAM where the\n.Sy pam_env\nmodule is enabled for\n.Nm sudo ,\nvariables in the PAM environment may be merged in to the environment.\nIf a variable in the PAM environment is already present in the\nuser's environment, the value will only be overridden if the variable\nwas not preserved by\n.Nm .\nWhen\n.Em env_reset\nis enabled, variables preserved from the invoking user's environment\nby the\n.Em env_keep\nlist take precedence over those in the PAM environment.\nWhen\n.Em env_reset\nis disabled, variables present the invoking user's environment\ntake precedence over those in the PAM environment unless they\nmatch a pattern in the\n.Em env_delete\nlist.\n.Pp\nThe dynamic linker on most operating systems will remove variables\nthat can control dynamic linking from the environment of set-user-ID\nexecutables, including\n.Nm sudo .\nDepending on the operating\nsystem this may include\n.Ev _RLD* ,\n.Ev DYLD_* ,\n.Ev LD_* ,\n.Ev LDR_* ,\n.Ev LIBPATH ,\n.Ev SHLIB_PATH ,\nand others.\nThese type of variables are\nremoved from the environment before\n.Nm sudo\neven begins execution\nand, as such, it is not possible for\n.Nm sudo\nto preserve them.\n.Pp\nAs a special case, if the\n.Fl i\noption (initial login) is\nspecified,\n.Nm\nwill initialize the environment regardless\nof the value of\n.Em env_reset .\nThe\n.Ev DISPLAY ,\n.Ev PATH\nand\n.Ev TERM\nvariables remain unchanged;\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev USER ,\nand\n.Ev LOGNAME\nare set based on the target user.\nOn AIX (and Linux\nsystems without PAM), the contents of\n.Pa /etc/environment\nare also\nincluded.\n.if \\n(LC \\{\\\nOn\n.Bx\nsystems, if the\n.Em use_loginclass\nflag is\nenabled, the\n.Em path\nand\n.Em setenv\nvariables in\n.Pa /etc/login.conf\nare also applied.\n.\\}\nAll other environment variables are removed unless permitted by\n.Em env_keep\nor\n.Em env_check ,\ndescribed above.\n.Pp\nFinally, the\n.Em restricted_env_file\nand\n.Em env_file\nfiles are applied, if present.\nThe variables in\n.Em restricted_env_file\nare applied first and are subject to the same restrictions as the\ninvoking user's environment, as detailed above.\nThe variables in\n.Em env_file\nare applied last and are not subject to these restrictions.\nIn both cases, variables present in the files will only be set to\ntheir specified values if they would not conflict with an existing\nenvironment variable.\n.Sh SUDOERS FILE FORMAT\nThe\n.Em sudoers\nfile is composed of two types of entries: aliases\n(basically variables) and user specifications (which specify who\nmay run what).\n.Pp\nWhen multiple entries match for a user, they are applied in order.\nWhere there are multiple matches, the last match is used (which is\nnot necessarily the most specific match).\n.Pp\nThe\n.Em sudoers\nfile grammar will be described below in Extended Backus-Naur\nForm (EBNF).\nDon't despair if you are unfamiliar with EBNF; it is fairly simple,\nand the definitions below are annotated.\n.Ss Resource limits\nBy default,\n.Nm\nuses the operating system's native method of setting resource limits\nfor the target user.\nOn Linux systems, resource limits are usually set by the\n.Pa pam_limits.so\nPAM module.\nOn some BSD systems, the\n.Pa /etc/login.conf\nfile specifies resource limits for the user.\nOn AIX systems, resource limits are configured in the\n.Pa /etc/security/limits\nfile.\nIf there is no system mechanism to set per-user resource limits,\nthe command will run with the same limits as the invoking user.\nThe one exception to this is the core dump file size, which is set by\n.Nm\nto 0 by default.\nDisabling core dumps by default makes it possible to avoid potential\nsecurity problems where the core file is treated as trusted input.\n.Pp\nResource limits may also be set in the\n.Em sudoers\nfile itself, in which case they override those set by the system.\nSee the\n.Em rlimit_as,\n.Em rlimit_core,\n.Em rlimit_cpu,\n.Em rlimit_data,\n.Em rlimit_fsize,\n.Em rlimit_locks,\n.Em rlimit_memlock,\n.Em rlimit_nofile,\n.Em rlimit_nproc,\n.Em rlimit_rss,\n.Em rlimit_stack\noptions described below.\nResource limits in\n.Nm\nmay be specified in one of the following formats:\n.Bl -tag -width 6n\n.It Dq value\nBoth the soft and hard resource limits are set to the same value.\nThe special value\n.Dq infinity\ncan be used to indicate that the value is unlimited.\n.It Dq soft,hard\nTwo comma-separated values.\nThe soft limit is set to the first value and the hard limit is set\nto the second.\nBoth values must either be enclosed in a set of double quotes,\nor the comma must be escaped with a backslash\n.Pq Ql \\e .\nThe special value\n.Dq infinity\nmay be used in place of either value.\n.It Dq default\nThe default resource limit for the user will be used.\nThis may be a user-specific value (see above) or the value of the\nresource limit when\n.Nm sudo\nwas invoked for systems that don't support per-user limits.\n.It Dq user\nThe invoking user's resource limits will be preserved when running\nthe command.\n.El\n.Pp\nFor example, to restore the historic core dump file size behavior,\na line like the following may be used.\n.sp\n.Dl Defaults rlimit_core=default\n.Pp\nResource limits in\n.Nm\nare only supported by version 1.8.7 or higher.\n.Ss Quick guide to EBNF\nEBNF is a concise and exact way of describing the grammar of a language.\nEach EBNF definition is made up of\n.Em production rules .\nFor example:\n.Bd -literal -offset 4n\nsymbol ::= definition | alternate1 | alternate2 ...\n.Ed\n.Pp\nEach\n.Em production rule\nreferences others and thus makes up a\ngrammar for the language.\nEBNF also contains the following\noperators, which many readers will recognize from regular\nexpressions.\nDo not, however, confuse them with\n.Dq wildcard\ncharacters, which have different meanings.\n.Bl -tag -width 4n\n.It \\&?\nMeans that the preceding symbol (or group of symbols) is optional.\nThat is, it may appear once or not at all.\n.It *\nMeans that the preceding symbol (or group of symbols) may appear\nzero or more times.\n.It +\nMeans that the preceding symbol (or group of symbols) may appear\none or more times.\n.El\n.Pp\nParentheses may be used to group symbols together.\nFor clarity,\nwe will use single quotes\n.Pq ''\nto designate what is a verbatim character string (as opposed to a symbol name).\n.Ss Aliases\nThere are four kinds of aliases:\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias\nand\n.Em Cmnd_Alias .\nBeginning with\n.Nm sudo\n1.9.0,\n.Em Cmd_Alias\nmay be used in place of\n.Em Cmnd_Alias\nif desired.\n.Bd -literal\nAlias ::= 'User_Alias'  User_Alias_Spec (':' User_Alias_Spec)* |\n          'Runas_Alias' Runas_Alias_Spec (':' Runas_Alias_Spec)* |\n          'Host_Alias'  Host_Alias_Spec (':' Host_Alias_Spec)* |\n          'Cmnd_Alias'  Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)* |\n          'Cmd_Alias'   Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)*\n\nUser_Alias ::= NAME\n\nUser_Alias_Spec ::= User_Alias '=' User_List\n\nRunas_Alias ::= NAME\n\nRunas_Alias_Spec ::= Runas_Alias '=' Runas_List\n\nHost_Alias ::= NAME\n\nHost_Alias_Spec ::= Host_Alias '=' Host_List\n\nCmnd_Alias ::= NAME\n\nCmnd_Alias_Spec ::= Cmnd_Alias '=' Cmnd_List\n\nNAME ::= [A-Z]([A-Z][0-9]_)*\n.Ed\n.Pp\nEach\n.Em alias\ndefinition is of the form\n.Bd -literal\nAlias_Type NAME = item1, item2, ...\n.Ed\n.Pp\nwhere\n.Em Alias_Type\nis one of\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias ,\nor\n.Em Cmnd_Alias .\nA\n.Dv NAME\nis a string of uppercase letters, numbers,\nand underscore characters\n.Pq Ql _ .\nA\n.Dv NAME\n.Sy must\nstart with an\nuppercase letter.\nIt is possible to put several alias definitions\nof the same type on a single line, joined by a colon\n.Pq Ql :\\& .\nFor example:\n.Bd -literal\nAlias_Type NAME = item1, item2, item3 : NAME = item4, item5\n.Ed\n.Pp\nIt is a syntax error to redefine an existing\n.Em alias .\nIt is possible to use the same name for\n.Em aliases\nof different types, but this is not recommended.\n.Pp\nThe definitions of what constitutes a valid\n.Em alias\nmember follow.\n.Bd -literal\nUser_List ::= User |\n              User ',' User_List\n\nUser ::= '!'* user name |\n         '!'* #user-ID |\n         '!'* %group |\n         '!'* %#group-ID |\n         '!'* +netgroup |\n         '!'* %:nonunix_group |\n         '!'* %:#nonunix_gid |\n         '!'* User_Alias\n.Ed\n.Pp\nA\n.Em User_List\nis made up of one or more user names, user-IDs\n(prefixed with\n.Ql # ) ,\nsystem group names and IDs (prefixed with\n.Ql %\nand\n.Ql %#\nrespectively), netgroups (prefixed with\n.Ql + ) ,\nnon-Unix group names and IDs (prefixed with\n.Ql %:\nand\n.Ql %:#\nrespectively), and\n.Em User_Alias Ns es.\nEach list item may be prefixed with zero or more\n.Ql \\&!\noperators.\nAn odd number of\n.Ql \\&!\noperators negate the value of\nthe item; an even number just cancel each other out.\nUser netgroups are matched using the user and domain members only;\nthe host member is not used when matching.\n.Pp\nA\n.Em user name ,\n.Em user-ID ,\n.Em group ,\n.Em group-ID ,\n.Em netgroup ,\n.Em nonunix_group\nor\n.Em nonunix_gid\nmay be enclosed in double quotes to avoid the\nneed for escaping special characters.\nAlternately, special characters\nmay be specified in escaped hex mode, e.g., \\ex20 for space.\nWhen\nusing double quotes, any prefix characters must be included inside\nthe quotes.\n.Pp\nThe actual\n.Em nonunix_group\nand\n.Em nonunix_gid\nsyntax depends on\nthe underlying group provider plugin.\nFor instance, the QAS AD plugin supports the following formats:\n.Bl -bullet -width 1n\n.It\nGroup in the same domain: \"%:Group Name\"\n.It\nGroup in any domain: \"%:Group Name@FULLY.QUALIFIED.DOMAIN\"\n.It\nGroup SID: \"%:S-1-2-34-5678901234-5678901234-5678901234-567\"\n.El\n.Pp\nSee\n.Sx \"GROUP PROVIDER PLUGINS\"\nfor more information.\n.Pp\nQuotes around group names are optional.\nUnquoted strings must use a backslash\n.Pq Ql \\e\nto escape spaces and special characters.\nSee\n.Sx Other special characters and reserved words\nfor a list of\ncharacters that need to be escaped.\n.Bd -literal\nRunas_List ::= Runas_Member |\n               Runas_Member ',' Runas_List\n\nRunas_Member ::= '!'* user name |\n                 '!'* #user-ID |\n                 '!'* %group |\n                 '!'* %#group-ID |\n                 '!'* %:nonunix_group |\n                 '!'* %:#nonunix_gid |\n                 '!'* +netgroup |\n                 '!'* Runas_Alias |\n                 '!'* ALL\n.Ed\n.Pp\nA\n.Em Runas_List\nis similar to a\n.Em User_List\nexcept that instead\nof\n.Em User_Alias Ns es\nit can contain\n.Em Runas_Alias Ns es .\nUser names and groups are matched as strings.\nIn other words, two users (groups) with the same user (group) ID\nare considered to be distinct.\nIf you wish to match all user names with the same user-ID (e.g.,\n.Sy root\nand\n.Sy toor ) ,\nyou can use a user-ID instead of a name (#0 in the example given).\nThe user-ID or group-ID specified in a\n.Em Runas_Member\nneed not be listed in the password or group database.\n.Bd -literal\nHost_List ::= Host |\n              Host ',' Host_List\n\nHost ::= '!'* host name |\n         '!'* ip_addr |\n         '!'* network(/netmask)? |\n         '!'* +netgroup |\n         '!'* Host_Alias |\n         '!'* ALL\n.Ed\n.Pp\nA\n.Em Host_List\nis made up of one or more host names, IP addresses,\nnetwork numbers, netgroups (prefixed with\n.Ql + ) ,\nand other aliases.\nAgain, the value of an item may be negated with the\n.Ql \\&!\noperator.\nHost netgroups are matched using the host (both qualified and unqualified)\nand domain members only; the user member is not used when matching.\nIf you specify a network number without a netmask,\n.Nm sudo\nwill query each of the local host's network interfaces and,\nif the network number corresponds to one of the hosts's network\ninterfaces, will use the netmask of that interface.\nThe netmask may be specified either in standard IP address notation\n(e.g., 255.255.255.0 or ffff:ffff:ffff:ffff::),\nor CIDR notation (number of bits, e.g., 24 or 64).\nA host name may include shell-style wildcards (see the\n.Sx Wildcards\nsection below),\nbut unless the\n.Em hostname\ncommand on your machine returns the fully\nqualified host name, you'll need to use the\n.Em fqdn\nflag for wildcards to be useful.\n.Nm sudo\nonly inspects actual network interfaces; this means that IP address\n127.0.0.1 (localhost) will never match.\nAlso, the host name\n.Dq localhost\nwill only match if that is the actual host name, which is usually\nonly the case for non-networked systems.\n.Bd -literal\ndigest ::= [A-Fa-f0-9]+ |\n           [A-Za-z0-9\\e+/=]+\n\nDigest_Spec ::= \"sha224\" ':' digest |\n                \"sha256\" ':' digest |\n                \"sha384\" ':' digest |\n                \"sha512\" ':' digest\n\nDigest_List ::= Digest_Spec |\n                Digest_Spec ',' Digest_List\n\nCmnd_List ::= Cmnd |\n              Cmnd ',' Cmnd_List\n\ncommand name ::= regex |\n                 file name\n\ncommand ::= command name |\n            command name args |\n            command name regex |\n            command name '\"\"' |\n            ALL\n\nEdit_Spec ::= \"sudoedit\" file name+ |\n              \"sudoedit\" regex |\n              \"sudoedit\"\n\nList_Spec ::= \"list\"\n\nCmnd ::= Digest_List? '!'* command |\n         '!'* directory |\n         '!'* Edit_Spec |\n         '!'* List_Spec |\n         '!'* Cmnd_Alias\n.Ed\n.Pp\nA\n.Em Cmnd_List\nis a list of one or more commands, directories, or aliases.\nA command is a fully qualified file name, which may include\nshell-style wildcards (see the\n.Sx Wildcards\nsection below),\nor a regular expression that starts with\n.Ql ^\nand ends with\n.Ql $\n(see the\n.Sx Regular expressions\nsection below).\nA directory is a\nfully qualified path name ending in a\n.Ql / .\nWhen you specify a directory in a\n.Em Cmnd_List ,\nthe user will be able to run any file within that directory\n(but not in any sub-directories therein).\nIf no command line arguments are specified, the user may run the\ncommand with any arguments they choose.\nCommand line arguments can include wildcards or be a regular\nexpression that starts with\n.Ql ^\nand ends with\n.Ql $ .\nIf the command line arguments consist of\n.Ql \\&\"\" ,\nthe command may only be run with\n.Em no\narguments.\n.Pp\nIf a\n.Em Cmnd\nhas associated command line arguments, the arguments\nin the\n.Em Cmnd\nmust match those given by the user on the command line.\nIf the arguments in a\n.Em Cmnd\nbegin with the\n.Ql ^\ncharacter, they will be interpreted as a regular expression\nand matched accordingly.\nOtherwise, shell-style wildcards are used when matching.\nUnless a regular expression is specified, the following characters must\nbe escaped with a\n.Ql \\e\nif they are used in command arguments:\n.Ql ,\\& ,\n.Ql :\\& ,\n.Ql =\\& ,\n.Ql \\e .\nTo prevent arguments in a\n.Em Cmnd\nthat begin with a\n.Ql ^\ncharacter from being interpreted as a regular expression, the\n.Ql ^\nmust be escaped with a\n.Ql \\e .\n.Pp\nThere are two commands built into\n.Nm sudo\nitself:\n.Dq list\nand\n.Dq sudoedit .\nUnlike other commands, these two must be specified in the\n.Em sudoers\nfile\n.Em without\na leading path.\n.Pp\nThe\n.Dq list\nbuilt-in can be used to permit a user to list another user's privileges with\n.Nm sudo Ns 's\n.Fl U\noption.\nFor example,\n.Dq sudo -l -U otheruser .\nA user with the\n.Dq list\nprivilege is able to list another user's privileges even if they\ndon't have permission to run commands as that user.\nBy default, only root or a user with the ability to run any command as\neither root or the specified\n.Ar user\non the current host may use the\n.Fl U\noption.\nNo command line arguments may be specified with the\n.Dq list\nbuilt-in.\n.Pp\nThe\n.Dq sudoedit\nbuilt-in is used to permit a user to run\n.Nm sudo\nwith the\n.Fl e\noption (or as\n.Nm sudoedit ) .\nIt may take command line arguments just as a normal command does.\nUnlike other commands,\n.Dq sudoedit\nis built into\n.Nm sudo\nitself and must be specified in the\n.Em sudoers\nfile\n.Em without\na leading path.\nIf a leading path is present, for example\n.Pa /usr/bin/sudoedit ,\nthe path name will be silently converted to\n.Dq sudoedit .\nA fully-qualified path for\n.Nm sudoedit\nis treated as an error by\n.Nm visudo .\n.Pp\nA\n.Em command\nmay be preceded by a\n.Em Digest_List ,\na comma-separated list of one or more\n.Em Digest_Spec\nentries.\nIf a\n.Em Digest_List\nis present, the command will only match successfully if it can be verified\nusing one of the SHA-2 digests in the list.\nStarting with version 1.9.0, the\n.Sy ALL\nreserved word can be used in conjunction with a\n.Em Digest_List .\nThe following digest formats are supported: sha224, sha256, sha384, and sha512.\nThe string may be specified in either hex or base64 format\n(base64 is more compact).\nThere are several utilities capable of generating SHA-2 digests in hex\nformat such as openssl, shasum, sha224sum, sha256sum, sha384sum, sha512sum.\n.Pp\nFor example, using openssl:\n.Bd -literal\n$ openssl dgst -sha224 /bin/ls\nSHA224(/bin/ls)= 118187da8364d490b4a7debbf483004e8f3e053ec954309de2c41a25\n.Ed\n.Pp\nIt is also possible to use openssl to generate base64 output:\n.Bd -literal\n$ openssl dgst -binary -sha224 /bin/ls | openssl base64\nEYGH2oNk1JC0p9679IMATo8+BT7JVDCd4sQaJQ==\n.Ed\n.Pp\nWarning, if the user has write access to the command itself (directly or via a\n.Nm sudo\ncommand), it may be possible for the user to replace the command after the\ndigest check has been performed but before the command is executed.\nA similar race condition exists on systems that lack the\n.Xr fexecve 2\nsystem call when the directory in which the command is located\nis writable by the user.\nSee the description of the\n.Em fdexec\nsetting for more information on how\n.Nm sudo\nexecutes commands that have an associated digest.\n.Pp\nCommand digests are only supported by version 1.8.7 or higher.\n.Ss Defaults\nCertain configuration options may be changed from their default\nvalues at run-time via one or more\n.Em Default_Entry\nlines.\nThese may affect all users on any host, all users on a specific host, a\nspecific user, a specific command, or commands being run as a specific user.\nPer-command entries may not include command line arguments.\nIf you need to specify arguments, define a\n.Em Cmnd_Alias\nand reference\nthat instead.\n.Bd -literal\nDefault_Type ::= 'Defaults' |\n                 'Defaults' '@' Host_List |\n                 'Defaults' ':' User_List |\n                 'Defaults' '!' Cmnd_List |\n                 'Defaults' '>' Runas_List\n\nDefault_Entry ::= Default_Type Parameter_List\n\nParameter_List ::= Parameter |\n                   Parameter ',' Parameter_List\n\nParameter ::= Parameter '=' Value |\n              Parameter '+=' Value |\n              Parameter '-=' Value |\n              '!'* Parameter\n.Ed\n.Pp\nParameters may be\n.Sy flags ,\n.Sy integer\nvalues,\n.Sy strings ,\nor\n.Sy lists .\nFlags are implicitly boolean and can be turned off via the\n.Ql \\&!\noperator.\nSome integer, string and list parameters may also be\nused in a boolean context to disable them.\nValues may be enclosed\nin double quotes\n.Pq \\&\"\"\nwhen they contain multiple words.\nSpecial characters may be escaped with a backslash\n.Pq Ql \\e .\n.Pp\nTo include a literal backslash character in a command line argument\nyou must escape the backslash twice.\nFor example, to match\n.Ql \\en\nas part of a command line argument, you must use\n.Ql \\e\\e\\e\\en\nin the\n.Em sudoers\nfile.\nThis is due to there being two levels of escaping, one in the\n.Em sudoers\nparser itself and another when command line arguments are matched by the\n.Xr fnmatch 3\nor\n.Xr regexec 3\nfunction.\n.Pp\nLists have two additional assignment operators,\n.Ql +=\nand\n.Ql -= .\nThese operators are used to add to and delete from a list respectively.\nIt is not an error to use the\n.Ql -=\noperator to remove an element\nthat does not exist in a list.\n.Pp\nDefaults entries are parsed in the following order: global, host,\nuser, and runas Defaults first, then command defaults.\nIf there are multiple Defaults settings of the same type, the last\nmatching setting is used.\nThe following Defaults settings are parsed before all others since\nthey may affect subsequent entries:\n.Em fqdn ,\n.Em group_plugin ,\n.Em runas_default ,\n.Em sudoers_locale .\n.Pp\nSee\n.Sx SUDOERS OPTIONS\nfor a list of supported Defaults parameters.\n.Ss User specification\n.Bd -literal\nUser_Spec ::= User_List Host_List '=' Cmnd_Spec_List \\e\n              (':' Host_List '=' Cmnd_Spec_List)*\n\nCmnd_Spec_List ::= Cmnd_Spec |\n                   Cmnd_Spec ',' Cmnd_Spec_List\n\nCmnd_Spec ::= Runas_Spec? Option_Spec* (Tag_Spec ':')* Cmnd\n\nRunas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'\n\n.ie \\n(SL \\{\\\n.ie \\n(PS Option_Spec ::= (SELinux_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (SELinux_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.el \\{\\\n.ie \\n(AA \\{\\\n.ie \\n(PS Option_Spec ::= (AppArmor_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (AppArmor_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.el \\{\\\n.ie \\n(PS Option_Spec ::= (Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.\\}\n\n.if \\n(SL \\{\\\nSELinux_Spec ::= ('ROLE=role' | 'TYPE=type')\n\n.\\}\n.if \\n(AA \\{\\\nAppArmor_Spec ::= 'APPARMOR_PROFILE=profile'\n\n.\\}\n.if \\n(PS \\{\\\nSolaris_Priv_Spec ::= ('PRIVS=privset' | 'LIMITPRIVS=privset')\n\n.\\}\nDate_Spec ::= ('NOTBEFORE=timestamp' | 'NOTAFTER=timestamp')\n\nTimeout_Spec ::= 'TIMEOUT=timeout'\n\nChdir_Spec ::= 'CWD=directory'\n\nChroot_Spec ::= 'CHROOT=directory'\n\nTag_Spec ::= ('EXEC' | 'NOEXEC' | 'FOLLOW' | 'NOFOLLOW' |\n              'LOG_INPUT' | 'NOLOG_INPUT' | 'LOG_OUTPUT' |\n              'NOLOG_OUTPUT' | 'MAIL' | 'NOMAIL' | 'INTERCEPT' |\n              'NOINTERCEPT' | 'PASSWD' | 'NOPASSWD' | 'SETENV' |\n              'NOSETENV')\n.Ed\n.Pp\nA\n.Sy user specification\ndetermines which commands a user may run\n(and as what user) on specified hosts.\nBy default, commands are run as\n.Sy @runas_default@\n(unless\n.Em runas_default\nhas been set to a different value)\nbut this can also be changed on a per-command basis.\n.Pp\nThe basic structure of a user specification is\n.Dq who where = (as_whom) what .\nLet's break that down into its constituent parts:\n.Ss Runas_Spec\nA\n.Em Runas_Spec\ndetermines the user and/or the group that a command\nmay be run as.\nA fully-specified\n.Em Runas_Spec\nconsists of two\n.Em Runas_List Ns s\n(as defined above) separated by a colon\n.Pq Ql :\\&\nand enclosed in a set of parentheses.\nThe first\n.Em Runas_List\nindicates which users the command may be run as via the\n.Fl u\noption.\nThe second defines a list of groups that may be specified via the\n.Fl g\noption (in addition to any of the target user's groups).\nIf both\n.Em Runas_List Ns s\nare specified, the command may be run with any combination of users\nand groups listed in their respective\n.Em Runas_List Ns s.\nIf only the first is specified, the command may be run as any user\nin the list and, optionally, with any group the target user belongs to.\nIf the first\n.Em Runas_List\nis empty but the\nsecond is specified, the command may be run as the invoking user\nwith the group set to any listed in the\n.Em Runas_List .\nIf both\n.Em Runas_List Ns s\nare empty, the command may only be run as the invoking user and the\ngroup, if specified, must be one that the invoking user is a member of.\nIf no\n.Em Runas_Spec\nis specified, the command may only be run as the\n.Em runas_default\nuser\n.Sy ( @runas_default@\nby default) and the group,\nif specified, must be one that the\n.Em runas_default\nuser is a member of.\n.Pp\nA\n.Em Runas_Spec\nsets the default for the commands that follow it.\nWhat this means is that for the entry:\n.Bd -literal\ndgb\tboulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm\n.Ed\n.Pp\nThe user\n.Sy dgb\nmay run\n.Pa /bin/ls ,\n.Pa /bin/kill ,\nand\n.Pa /usr/bin/lprm\non the host\n.No boulder Ns \\(em Ns but\nonly as\n.Sy operator .\nFor example:\n.Bd -literal\n$ sudo -u operator /bin/ls\n.Ed\n.Pp\nIt is also possible to override a\n.Em Runas_Spec\nlater on in an entry.\nIf we modify the entry like so:\n.Bd -literal\ndgb\tboulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm\n.Ed\n.Pp\nThen user\n.Sy dgb\nis now allowed to run\n.Pa /bin/ls\nas\n.Sy operator ,\nbut\n.Pa /bin/kill\nand\n.Pa /usr/bin/lprm\nas\n.Sy root .\n.Pp\nWe can extend this to allow\n.Sy dgb\nto run\n.Pa /bin/ls\nwith either\nthe user or group set to\n.Sy operator :\n.Bd -literal\ndgb\tboulder = (operator : operator) /bin/ls, (root) /bin/kill,\\e\n\t/usr/bin/lprm\n.Ed\n.Pp\nWhile the group portion of the\n.Em Runas_Spec\npermits the\nuser to run as command with that group, it does not force the user\nto do so.\nIf no group is specified on the command line, the command\nwill run with the group listed in the target user's password database\nentry.\nThe following would all be permitted by the sudoers entry above:\n.Bd -literal\n$ sudo -u operator /bin/ls\n$ sudo -u operator -g operator /bin/ls\n$ sudo -g operator /bin/ls\n.Ed\n.Pp\nIn the following example, user\n.Sy tcm\nmay run commands that access\na modem device file with the dialer group.\n.Bd -literal\ntcm\tboulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\\e\n\t/usr/local/bin/minicom\n.Ed\n.Pp\nIn this example only the group will be set, the command still runs as user\n.Sy tcm .\nFor example:\n.Bd -literal\n$ sudo -g dialer /usr/bin/cu\n.Ed\n.Pp\nMultiple users and groups may be present in a\n.Em Runas_Spec ,\nin which case the user may select any combination of users and groups via the\n.Fl u\nand\n.Fl g\noptions.\nIn this example:\n.Bd -literal\nalan\tALL = (root, bin : operator, system) ALL\n.Ed\n.Pp\nuser\n.Sy alan\nmay run any command as either user\n.Sy root\nor\n.Sy bin ,\noptionally setting the group to operator or system.\n.Ss Option_Spec\nA\n.Em Cmnd\nmay have zero or more options associated with it.\nOptions may consist of\n.if \\n(SL \\{\\\nSELinux roles and/or types,\n.\\}\n.if \\n(AA \\{\\\nAppArmor profiles,\n.\\}\n.if \\n(PS \\{\\\nSolaris privileges sets,\n.\\}\nstart and/or end dates and command timeouts.\nOnce an option is set for a\n.Em Cmnd ,\nsubsequent\n.Em Cmnd Ns s\nin the\n.Em Cmnd_Spec_List ,\ninherit that option unless it is overridden by another option.\nOption names are reserved words in\n.Em sudoers .\nThis means that none of the valid option names (see below) can be used\nwhen declaring an alias.\n.if \\n(SL \\{\\\n.Ss SELinux_Spec\nOn systems with SELinux support,\n.Em sudoers\nfile entries may optionally have an SELinux role and/or type associated\nwith a command.\nThis can be used to implement a form of role-based access control (RBAC).\nIf a role or\ntype is specified with the command it will override any default values\nspecified in\n.Em sudoers .\nA role or type specified on the command line,\nhowever, will supersede the values in\n.Em sudoers .\n.\\}\n.if \\n(AA \\{\\\n.Ss AppArmor_Spec\nOn systems supporting AppArmor,\n.Em sudoers\nfile entries may optionally specify an AppArmor profile that should be\nused to confine a command.\nIf an AppArmor profile is specified with the command, it will override\nany default values specified in\n.Em sudoers .\nAppropriate profile transition rules must be defined to support the\nprofile change specified for a user.\n.Pp\nAppArmor profiles can be specified in any way that complies with the\nrules of\n.Xr aa_change_profile 2 .\nFor instance, in the following\n.Em sudoers\nentry\n.Bd -literal\nalice\tALL = (root)\tAPPARMOR_PROFILE=my-profile\tALL\n.Ed\n.Pp\nthe user\n.Sy alice\nmay run any command as\n.Sy root\nunder confinement by the profile\n.Ql my-profile .\nYou can also stack profiles, or allow a user to run commands unconfined by\nany profile.\nFor example:\n.Bd -literal\nbob\tALL = (root)\tAPPARMOR_PROFILE=foo//&bar\t/usr/bin/vi\ncathy\tALL = (root)\tAPPARMOR_PROFILE=unconfined\t/bin/ls\n.Ed\n.Pp\nThese\n.Em sudoers\nentries allow user\n.Sy bob\nto run\n.Pa /usr/bin/vi\nas\n.Sy root\nunder the stacked profiles\n.Ql foo\nand\n.Ql bar ,\nand user\n.Sy cathy\nto run\n.Pa /bin/ls\nwithout any confinement at all.\n.\\}\n.if \\n(PS \\{\\\n.Ss Solaris_Priv_Spec\nOn Solaris systems,\n.Em sudoers\nfile entries may optionally specify Solaris privilege set and/or limit\nprivilege set associated with a command.\nIf privileges or limit privileges are specified with the command\nit will override any default values specified in\n.Em sudoers .\n.Pp\nA privilege set is a comma-separated list of privilege names.\nThe\n.Xr ppriv 1\ncommand can be used to list all privileges known to the system.\nFor example:\n.Bd -literal\n$ ppriv -l\n.Ed\n.Pp\nIn addition, there are several\n.Dq special\nprivilege strings:\n.Bl -tag -width \"basic\"\n.It none\nthe empty set\n.It all\nthe set of all privileges\n.It zone\nthe set of all privileges available in the current zone\n.It basic\nthe default set of privileges normal users are granted at login time\n.El\n.Pp\nPrivileges can be excluded from a set by prefixing the privilege\nname with either an\n.Ql \\&!\nor\n.Ql \\-\ncharacter.\n.\\}\n.Ss Date_Spec\n.Nm\nrules can be specified with a start and end date via the\n.Dv NOTBEFORE\nand\n.Dv NOTAFTER\nsettings.\nThe time stamp must be specified in\n.Dq Generalized Time\nas defined by RFC 4517.\nThe format is effectively\n.Ql yyyymmddHHMMSSZ\nwhere the minutes and seconds are optional.\nThe\n.Ql Z\nsuffix indicates that the time stamp is in Coordinated Universal Time (UTC).\nIt is also possible to specify a timezone offset from UTC in hours\nand minutes instead of a\n.Ql Z .\nFor example,\n.Ql -0500\nwould correspond to Eastern Standard time in the US.\nAs an extension, if no\n.Ql Z\nor timezone offset is specified, local time will be used.\n.Pp\nThe following are all valid time stamps:\n.Bd -literal -offset 4n\n20170214083000Z\n2017021408Z\n20160315220000-0500\n20151201235900\n.Ed\n.Ss Timeout_Spec\nA command may have a timeout associated with it.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nThe timeout may be specified in combinations of days, hours,\nminutes, and seconds with a single-letter case-insensitive suffix\nthat indicates the unit of time.\nFor example, a timeout of 7 days, 8 hours, 30 minutes, and\n10 seconds would be written as\n.Ql 7d8h30m10s .\nIf a number is specified without a unit, seconds are assumed.\nAny of the days, minutes, hours, or seconds may be omitted.\nThe order must be from largest to smallest unit and a unit\nmay not be specified more than once.\n.Pp\nThe following are all\n.Em valid\ntimeout values:\n.Ql 7d8h30m10s ,\n.Ql 14d ,\n.Ql 8h30m ,\n.Ql 600s ,\n.Ql 3600 .\nThe following are\n.Em invalid\ntimeout values:\n.Ql 12m2w1d ,\n.Ql 30s10m4h ,\n.Ql 1d2d3h .\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.Ss Chdir_Spec\nThe working directory that the command will be run in can be specified\nusing the\n.Dv CWD\nsetting.\nThe\n.Fa directory\nmust be a fully-qualified path name beginning with a\n.Sq /\nor\n.Sq ~\ncharacter, or the special value\n.Dq * .\nA value of\n.Dq *\nindicates that the user may specify the working directory by running\n.Nm sudo\nwith the\n.Fl D\noption.\nBy default, commands are run from the invoking user's current working\ndirectory, unless the\n.Fl i\noption is given.\nPath names of the form\n.Pa ~user/path/name\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.Ss Chroot_Spec\nThe root directory that the command will be run in can be specified\nusing the\n.Dv CHROOT\nsetting.\nThe\n.Fa directory\nmust be a fully-qualified path name beginning with a\n.Sq /\nor\n.Sq ~\ncharacter, or the special value\n.Dq * .\nA value of\n.Dq *\nindicates that the user may specify the root directory by running\n.Nm sudo\nwith the\n.Fl R\noption.\nThis setting can be used to run the command in a\n.Xr chroot 2\n.Dq sandbox\nsimilar to the\n.Xr chroot @mansectsu@\nutility.\nPath names of the form\n.Pa ~user/path/name\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.Ss Tag_Spec\nA command may have zero or more tags associated with it.\nThe following tag values are supported:\n.Dv EXEC ,\n.Dv NOEXEC ,\n.Dv FOLLOW ,\n.Dv NOFOLLOW ,\n.Dv LOG_INPUT ,\n.Dv NOLOG_INPUT ,\n.Dv LOG_OUTPUT ,\n.Dv NOLOG_OUTPUT ,\n.Dv MAIL ,\n.Dv NOMAIL ,\n.Dv INTERCEPT ,\n.Dv NOINTERCEPT ,\n.Dv PASSWD ,\n.Dv NOPASSWD ,\n.Dv SETENV ,\nand\n.Dv NOSETENV .\nOnce a tag is set on a\n.Em Cmnd ,\nsubsequent\n.Em Cmnd Ns s\nin the\n.Em Cmnd_Spec_List ,\ninherit the tag unless it is overridden by the opposite tag (in other words,\n.Dv PASSWD\noverrides\n.Dv NOPASSWD\nand\n.Dv NOEXEC\noverrides\n.Dv EXEC ) .\n.Bl -hang -width 0n\n.It Dv EXEC No and Dv NOEXEC\n.sp\nIf\n.Nm sudo\nhas been compiled with\n.Em noexec\nsupport and the underlying operating system supports it, the\n.Dv NOEXEC\ntag can be used to prevent a dynamically-linked executable from\nrunning further commands itself.\n.Pp\nIn the following example, user\n.Sy aaron\nmay run\n.Pa /usr/bin/more\nand\n.Pa /usr/bin/vi\nbut shell escapes will be disabled.\n.Bd -literal\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.Ed\n.Pp\nSee the\n.Sx Preventing shell escapes\nsection below for more details on how\n.Dv NOEXEC\nworks and whether or not it will work on your system.\n.It Dv FOLLOW No and Dv NOFOLLOW\n.sp\nStarting with version 1.8.15,\n.Nm sudoedit\nwill not open a file that is a symbolic link unless the\n.Em sudoedit_follow\nflag is enabled.\nThe\n.Dv FOLLOW\nand\n.Dv NOFOLLOW\ntags override the value of\n.Em sudoedit_follow\nand can be used to permit (or deny) the editing of symbolic links\non a per-command basis.\nThese tags are only effective for the\n.Em sudoedit\ncommand and are ignored for all other commands.\n.It Dv LOG_INPUT No and Dv NOLOG_INPUT\n.sp\nThese tags override the value of the\n.Em log_input\nflag on a per-command basis.\nFor more information, see\n.Sx \"I/O LOGGING\" .\n.It Dv LOG_OUTPUT No and Dv NOLOG_OUTPUT\n.sp\nThese tags override the value of the\n.Em log_output\nflag on a per-command basis.\nFor more information, see\n.Sx \"I/O LOGGING\" .\n.It Dv MAIL No and Dv NOMAIL\n.sp\nThese tags provide fine-grained control over whether\nmail will be sent when a user runs a command by\noverriding the value of the\n.Em mail_all_cmnds\nflag on a per-command basis.\nThey have no effect when\n.Nm sudo\nis run with the\n.Fl l\nor\n.Fl v\noptions.\nA\n.Dv NOMAIL\ntag will also override the\n.Em mail_always\nand\n.Em mail_no_perms\noptions.\nFor more information, see the descriptions of\n.Em mail_all_cmnds ,\n.Em mail_always ,\nand\n.Em mail_no_perms\nin the\n.Sx SUDOERS OPTIONS\nsection below.\n.It Dv PASSWD No and Dv NOPASSWD\n.sp\nBy default,\n.Nm sudo\nrequires that a user authenticate\nbefore running a command.\nThis behavior can be modified via the\n.Dv NOPASSWD\ntag.\nLike a\n.Em Runas_Spec ,\nthe\n.Dv NOPASSWD\ntag sets\na default for the commands that follow it in the\n.Em Cmnd_Spec_List .\nConversely, the\n.Dv PASSWD\ntag can be used to reverse things.\nFor example:\n.Bd -literal\nray\trushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm\n.Ed\n.Pp\nwould allow the user\n.Sy ray\nto run\n.Pa /bin/kill ,\n.Pa /bin/ls ,\nand\n.Pa /usr/bin/lprm\nas\n.Sy @runas_default@\non the machine\n.Dq rushmore\nwithout authenticating himself.\nIf we only want\n.Sy ray\nto be able to\nrun\n.Pa /bin/kill\nwithout a password the entry would be:\n.Bd -literal\nray\trushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm\n.Ed\n.Pp\nNote, however, that the\n.Dv PASSWD\ntag has no effect on users who are in the group specified by the\n.Em exempt_group\nsetting.\n.Pp\nBy default, if the\n.Dv NOPASSWD\ntag is applied to any of a user's entries for the current host,\nthe user will be able to run\n.Ql sudo -l\nwithout a password.\nAdditionally, a user may only run\n.Ql sudo -v\nwithout a password if all of the user's entries for the current\nhost have the\n.Dv NOPASSWD\ntag.\nThis behavior may be overridden via the\n.Em verifypw\nand\n.Em listpw\noptions.\n.It Dv SETENV No and Dv NOSETENV\n.sp\nThese tags override the value of the\n.Em setenv\nflag on a per-command basis.\nIf\n.Dv SETENV\nhas been set for a command, the user may disable the\n.Em env_reset\nflag from the command line via the\n.Fl E\noption.\nAdditionally, environment variables set on the command\nline are not subject to the restrictions imposed by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep .\nAs such, only trusted users should be allowed to set variables in this manner.\nIf the command matched is\n.Sy ALL ,\nthe\n.Dv SETENV\ntag is implied for that command; this default may be overridden by use of the\n.Dv NOSETENV\ntag.\n.It Dv INTERCEPT No and Dv NOINTERCEPT\n.sp\nIf\n.Nm sudo\nhas been compiled with\n.Em intercept\nsupport and the underlying operating system supports it, the\n.Dv INTERCEPT\ntag can be used to cause programs spawned by a command to be validated against\n.Em sudoers\nand logged just like they would be if run through\n.Nm sudo\ndirectly.\nThis is useful in conjunction with commands that allow shell escapes\nsuch as editors, shells, and paginators.\nThere is additional overhead due to the policy check that may add\nlatency when running commands such as shell scripts that execute a\nlarge number of sub-commands.\nFor interactive commands, such as a shell or editor,\nthe overhead is not usually noticeable.\n.Pp\nIn the following example, user\n.Sy chuck\nmay run any command on the machine\n.Dq research\nin intercept mode.\n.Bd -literal\nchuck\tresearch = INTERCEPT: ALL\n.Ed\n.Pp\nSee the\n.Sx Preventing shell escapes\nsection below for more details on how\n.Dv INTERCEPT\nworks and whether or not it will work on your system.\n.El\n.Ss Wildcards\n.Nm sudo\nallows shell-style\n.Em wildcards\n(aka meta or glob characters)\nto be used in host names, path names, and command line arguments in the\n.Em sudoers\nfile.\nWildcard matching is done via the\n.Xr glob 3\nand\n.Xr fnmatch 3\nfunctions as specified by\n.St -p1003.1 .\n.Bl -tag -width \"[!...]\"\n.It *\nMatches any set of zero or more characters (including white space).\n.It \\&?\nMatches any single character (including white space).\n.It [...]\nMatches any character in the specified range.\n.It [!...]\nMatches any character\n.Em not\nin the specified range.\n.It \\ex\nFor any character\n.Sq x ,\nevaluates to\n.Sq x .\nThis is used to escape special characters such as:\n.Ql * ,\n.Ql \\&? ,\n.Ql [\\& ,\nand\n.Ql ]\\& .\n.El\n.Pp\n.Bf -symbolic\nThese are not regular expressions.\n.Ef\nUnlike a regular expression there is no way to match one or more\ncharacters within a range.\n.Pp\nCharacter classes may be used if your system's\n.Xr glob 3\nand\n.Xr fnmatch 3\nfunctions support them.\nHowever, because the\n.Ql :\\&\ncharacter has special meaning in\n.Em sudoers ,\nit must be\nescaped.\nFor example:\n.Bd -literal -offset 4n\n/bin/ls [[\\e:\\&alpha\\e:\\&]]*\n.Ed\n.Pp\nWould match any file name beginning with a letter.\n.Pp\nA forward slash\n.Pq Ql /\nwill\n.Em not\nbe matched by\nwildcards used in the file name portion of the command.\nThis is to make a path like:\n.Bd -literal -offset 4n\n/usr/bin/*\n.Ed\n.Pp\nmatch\n.Pa /usr/bin/who\nbut not\n.Pa /usr/bin/X11/xterm .\n.Pp\nWhen matching the command line arguments, however, a slash\n.Em does\nget matched by wildcards since command line arguments may contain\narbitrary strings and not just path names.\n.Pp\n.Bf -symbolic\nWildcards in command line arguments should be used with care.\n.Ef\n.br\nWildcards can match any character, including white space.\nIn most cases, it is safer to use a regular expression to match\ncommand line arguments.\nFor more information, see\n.Sx Wildcards in command arguments\nbelow.\n.Ss Exceptions to wildcard rules\nThe following exceptions apply to the above rules:\n.Bl -tag -width \"sudoedit\"\n.It \\&\"\"\nIf the empty string\n.Ql \\&\"\"\nis the only command line argument in the\n.Em sudoers\nfile entry it means that command is not allowed to be run with\n.Em any\narguments.\n.It sudoedit\nCommand line arguments to the\n.Em sudoedit\nbuilt-in command should always be path names, so a forward slash\n.Pq Ql /\nwill not be matched by a wildcard.\n.El\n.Ss Regular expressions\nStarting with version 1.9.10, it is possible to use\nregular expressions for path names and command line arguments.\nRegular expressions are more expressive than shell-style\n.Em wildcards\nand are usually safer because they provide a greater degree of\ncontrol when matching.\nThe type of regular expressions supported by\n.Nm\nare POSIX extended regular expressions, similar to those used by the\n.Xr egrep 1\nutility.\nThey are usually documented in the\n.Xr regex @mansectmisc@\nor\n.Xr re_format @mansectmisc@\nmanual, depending on the system.\nAs an extension, if the regular expression begins with\n.Dq (?i) ,\nit will be matched in a case-insensitive manner.\n.Pp\nIn\n.Em sudoers ,\nregular expressions must start with a\n.Ql ^\ncharacter and end with a\n.Ql $ .\nThis makes it explicit what is, or is not, a regular expression.\nEither the path name, the command line arguments or both may\nbe regular expressions.\nBecause the path name and arguments are matched separately, it is\neven possible to use wildcards for the path name and regular\nexpressions for the arguments.\nIt is not possible to use a single regular expression to match\nboth the command and its arguments.\nRegular expressions in\n.Em sudoers\nare limited to 1024 characters.\n.Pp\nThere is no need to escape\n.Em sudoers\nspecial characters in a regular expression other than the pound sign\n.Pq Ql # .\n.Pp\nIn the following example, user\n.Sy john\ncan run the\n.Xr passwd 1\ncommand as\n.Sy @runas_default@\non any host but is not allowed to change\n.Sy root Ns No 's\npassword.\nThis kind of rule is impossible to express safely using wildcards.\n.Bd -literal -offset 4n\njohn\tALL = /usr/bin/passwd ^[a-zA-Z0-9_]+$,\\e\n              !/usr/bin/passwd root\n.Ed\n.Pp\nIt is also possible to use a regular expression in conjunction with\n.Nm sudoedit\nrules.\nThe following rule would give user bob the ability to edit the\n.Pa /etc/motd ,\n.Pa /etc/issue ,\nand\n.Pa /etc/hosts\nfiles only.\n.Bd -literal -offset 4n\nbob    ALL = sudoedit ^/etc/(motd|issue|hosts)$\n.Ed\n.Pp\nRegular expressions may also be used to match the command itself.\nIn this example, a regular expression is used to allow user\n.Sy sid\nto run the\n.Pa /usr/sbin/groupadd ,\n.Pa /usr/sbin/groupmod ,\n.Pa /usr/sbin/groupdel ,\n.Pa /usr/sbin/useradd ,\n.Pa /usr/sbin/usermod ,\nand\n.Pa /usr/sbin/userdel\ncommands as\n.Sy @runas_default@ .\n.Bd -literal -offset 4n\nsid    ALL = ^/usr/sbin/(group|user)(add|mod|del)$\n.Ed\n.Pp\nOne disadvantage of using a regular expression to match the command\nname is that it is not possible to match relative paths such as\n.Pa ./useradd\nor\n.Pa ../sbin/useradd .\nThis has security implications when a regular expression is used\nfor the command name in conjunction with the negation operator,\n.Ql !\\& ,\nas such rules can be trivially bypassed.\nBecause of this, using a negated regular expression for the command name is\n.Sy strongly discouraged .\nThis does not apply to negated commands that only use a regular\nexpression to match the command arguments.\nSee\n.Sx Regular expressions in command names\nbelow for more information.\n.Ss Including other files from within sudoers\nIt is possible to include other\n.Em sudoers\nfiles from within the\n.Em sudoers\nfile currently being parsed using the\n.Em @include\nand\n.Em @includedir\ndirectives.\nFor compatibility with sudo versions prior to 1.9.1,\n.Em #include\nand\n.Em #includedir\nare also accepted.\n.Pp\nAn include file can be used, for example, to keep a site-wide\n.Em sudoers\nfile in addition to a local, per-machine file.\nFor the sake of this example the site-wide\n.Em sudoers\nfile will be\n.Pa /etc/sudoers\nand the per-machine one will be\n.Pa /etc/sudoers.local .\nTo include\n.Pa /etc/sudoers.local\nfrom within\n.Pa /etc/sudoers\none would use the following line in\n.Pa /etc/sudoers :\n.Bd -literal -offset 4n\n@include /etc/sudoers.local\n.Ed\n.Pp\nWhen\n.Nm sudo\nreaches this line it will suspend processing of the current file\n.Pq Pa /etc/sudoers\nand switch to\n.Pa /etc/sudoers.local .\nUpon reaching the end of\n.Pa /etc/sudoers.local ,\nthe rest of\n.Pa /etc/sudoers\nwill be processed.\nFiles that are included may themselves include other files.\nA hard limit of 128 nested include files is enforced to prevent include\nfile loops.\n.Pp\nStarting with version 1.9.1, the path to the include file may contain\nwhite space if it is escaped with a backslash\n.Pq Ql \\e .\nAlternately, the entire path may be enclosed in double quotes\n.Pq \\&\"\" ,\nin which case no escaping is necessary.\nTo include a literal backslash in the path,\n.Ql \\e\\e\nshould be used.\n.Pp\nIf the path to the include file is not fully-qualified (does not\nbegin with a\n.Ql / ) ,\nit must be located in the same directory as the sudoers file it was\nincluded from.\nFor example, if\n.Pa /etc/sudoers\ncontains the line:\n.Bd -literal -offset 4n\n@include sudoers.local\n.Ed\n.Pp\nthe file that will be included is\n.Pa /etc/sudoers.local .\n.Pp\nThe file name may also include the\n.Ql %h\nescape, signifying the short form of the host name.\nIn other words, if the machine's host name is\n.Dq xerxes ,\nthen\n.Bd -literal -offset 4n\n@include /etc/sudoers.%h\n.Ed\n.Pp\nwill cause\n.Nm sudo\nto include the file\n.Pa /etc/sudoers.xerxes .\n.Pp\nThe\n.Em @includedir\ndirective can be used to create a\n.Pa sudoers.d\ndirectory that the system package manager can drop\n.Em sudoers\nfile rules into as part of package installation.\nFor example, given:\n.Bd -literal -offset 4n\n@includedir /etc/sudoers.d\n.Ed\n.Pp\n.Nm sudo\nwill suspend processing of the current file and read each file in\n.Pa /etc/sudoers.d ,\nskipping file names that end in\n.Ql ~\nor contain a\n.Ql .\\&\ncharacter to avoid causing problems with package manager or editor\ntemporary/backup files.\n.Pp\nFiles are parsed in sorted lexical order.\nThat is,\n.Pa /etc/sudoers.d/01_first\nwill be parsed before\n.Pa /etc/sudoers.d/10_second .\nBe aware that because the sorting is lexical, not numeric,\n.Pa /etc/sudoers.d/1_whoops\nwould be loaded\n.Em after\n.Pa /etc/sudoers.d/10_second .\nUsing a consistent number of leading zeroes in the file names can be used\nto avoid such problems.\nAfter parsing the files in the directory, control returns to the\nfile that contained the\n.Em @includedir\ndirective.\n.Pp\nUnlike files included via\n.Em @include ,\n.Nm visudo\nwill not edit the files in a\n.Em @includedir\ndirectory unless one of them contains a syntax error.\nIt is still possible to run\n.Nm visudo\nwith the\n.Fl f\nflag to edit the files directly, but this will not catch the\nredefinition of an\n.Em alias\nthat is also present in a different file.\n.Ss Other special characters and reserved words\nThe pound sign\n.Pq Ql #\nis used to indicate a comment (unless it is part of a #include\ndirective or unless it occurs in the context of a user name and is\nfollowed by one or more digits, in which case it is treated as a\nuser-ID).\nBoth the comment character and any text after it, up to the end of\nthe line, are ignored.\n.Pp\nThe reserved word\n.Sy ALL\nis a built-in\n.Em alias\nthat always causes a match to succeed.\nIt can be used wherever one might otherwise use a\n.Em Cmnd_Alias ,\n.Em User_Alias ,\n.Em Runas_Alias ,\nor\n.Em Host_Alias .\nAttempting to define an\n.Em alias\nnamed\n.Sy ALL\nwill result in a syntax error.\nUsing\n.Sy ALL\ncan be dangerous since in a command context, it allows the user to run\n.Em any\ncommand on the system.\n.Pp\nThe following option names permitted in an\n.Em Option_Spec\nare also considered reserved words:\n.Dv CHROOT ,\n.if \\n(PS \\{\\\n.Dv PRIVS ,\n.Dv LIMITPRIVS ,\n.\\}\n.if \\n(SL \\{\\\n.Dv ROLE ,\n.Dv TYPE ,\n.\\}\n.Dv TIMEOUT ,\n.Dv CWD ,\n.Dv NOTBEFORE\nand\n.Dv NOTAFTER .\nAttempting to define an\n.Em alias\nwith the same name as one of the options will result in a syntax error.\n.Pp\nAn exclamation point\n.Pq Ql \\&!\ncan be used as a logical\n.Em not\noperator in a list or\n.Em alias\nas well as in front of a\n.Em Cmnd .\nThis allows one to exclude certain values.\nFor the\n.Ql \\&!\noperator to be effective, there must be something for it to exclude.\nFor example, to match all users except for\n.Sy root\none would use:\n.Bd -literal -offset 4n\nALL, !root\n.Ed\n.Pp\nIf the\n.Sy ALL ,\nis omitted, as in:\n.Bd -literal -offset 4n\n!root\n.Ed\n.Pp\nit would explicitly deny\n.Sy root\nbut not match any other users.\nThis is different from a true\n.Dq negation\noperator.\n.Pp\nNote, however, that using a\n.Ql \\&!\nin conjunction with the built-in\n.Sy ALL\nalias to allow a user to run\n.Dq all but a few\ncommands rarely works as intended (see\n.Sx SECURITY NOTES\nbelow).\n.Pp\nLong lines can be continued with a backslash\n.Pq Ql \\e\nas the last character on the line.\n.Pp\nWhite space between elements in a list as well as special syntactic\ncharacters in a\n.Em User Specification\n.Po\n.Ql =\\& ,\n.Ql :\\& ,\n.Ql (\\& ,\n.Ql )\\&\n.Pc\nis optional.\n.Pp\nThe following characters must be escaped with a backslash\n.Pq Ql \\e\nwhen used as part of a word (e.g., a user name or host name):\n.Ql \\&! ,\n.Ql =\\& ,\n.Ql :\\& ,\n.Ql ,\\& ,\n.Ql (\\& ,\n.Ql )\\& ,\n.Ql \\e .\n.Sh SUDOERS OPTIONS\n.Nm sudo Ns 's\nbehavior can be modified by\n.Em Default_Entry\nlines, as explained earlier.\nA list of all supported Defaults parameters, grouped by type, are listed below.\n.Pp\n.Sy Boolean Flags :\n.Bl -tag -width 16n\n.It always_query_group_plugin\nIf a\n.Em group_plugin\nis configured, use it to resolve groups of the form\n.Ql %group\nas long as there is not also a system group of the same name.\nNormally, only groups of the form\n.Ql %:group\nare passed to the\n.Em group_plugin .\nThis flag is\n.Em off\nby default.\n.It always_set_home\nIf enabled,\n.Nm sudo\nwill set the\n.Ev HOME\nenvironment variable to the home directory of the target user\n(which is the\n.Em runas_default\nuser unless the\n.Fl u\noption is used).\nThis flag is largely obsolete and has no effect unless the\n.Em env_reset\nflag has been disabled or\n.Ev HOME\nis present in the\n.Em env_keep\nlist, both of which are strongly discouraged.\nThis flag is\n.Em off\nby default.\n.It authenticate\nIf set, users must authenticate themselves via a password (or other\nmeans of authentication) before they may run commands.\nThis default may be overridden via the\n.Dv PASSWD\nand\n.Dv NOPASSWD\ntags.\nThis flag is\n.Em on\nby default.\n.It case_insensitive_group\nIf enabled, group names in\n.Em sudoers\nwill be matched in a case insensitive manner.\nThis may be necessary when users are stored in LDAP or AD.\nThis flag is\n.Em on\nby default.\n.It case_insensitive_user\nIf enabled, user names in\n.Em sudoers\nwill be matched in a case insensitive manner.\nThis may be necessary when groups are stored in LDAP or AD.\nThis flag is\n.Em on\nby default.\n.It closefrom_override\nIf set, the user may use the\n.Fl C\noption which overrides the default starting point at which\n.Nm sudo\nbegins closing open file descriptors.\nThis flag is\n.Em off\nby default.\n.It compress_io\nIf set, and\n.Nm sudo\nis configured to log a command's input or output,\nthe I/O logs will be compressed using\n.Sy zlib .\nThis flag is\n.Em on\nby default when\n.Nm sudo\nis compiled with\n.Sy zlib\nsupport.\n.It exec_background\nBy default,\n.Nm sudo\nruns a command as the foreground process as long as\n.Nm sudo\nitself is running in the foreground.\nWhen the\n.Em exec_background\nflag is enabled and the command is being run in a pseudo-terminal\n(due to I/O logging or the\n.Em use_pty\nflag), the command will be run as a background process.\nAttempts to read from the controlling terminal (or to change terminal\nsettings) will result in the command being suspended with the\n.Dv SIGTTIN\nsignal (or\n.Dv SIGTTOU\nin the case of terminal settings).\nIf this happens when\n.Nm sudo\nis a foreground process, the command will be granted the controlling terminal\nand resumed in the foreground with no user intervention required.\nThe advantage of initially running the command in the background is that\n.Nm sudo\nneed not read from the terminal unless the command explicitly requests it.\nOtherwise, any terminal input must be passed to the command, whether it\nhas required it or not (the kernel buffers terminals so it is not possible\nto tell whether the command really wants the input).\nThis is different from historic\n.Em sudo\nbehavior or when the command is not being run in a pseudo-terminal.\n.Pp\nFor this to work seamlessly, the operating system must support the\nautomatic restarting of system calls.\nUnfortunately, not all operating systems do this by default,\nand even those that do may have bugs.\nFor example, macOS fails to restart the\n.Xr tcgetattr 3\nand\n.Xr tcsetattr 3\nfunctions (this is a bug in macOS).\nFurthermore, because this behavior depends on the command stopping with the\n.Dv SIGTTIN\nor\n.Dv SIGTTOU\nsignals, programs that catch these signals and suspend themselves\nwith a different signal (usually\n.Dv SIGTOP )\nwill not be automatically foregrounded.\nSome versions of the linux\n.Xr su 1\ncommand behave this way.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\nIt has no effect unless I/O logging is enabled or the\n.Em use_pty\nflag is enabled.\n.It env_editor\nIf set,\n.Nm visudo\nwill use the value of the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables before falling back on the default editor list.\n.Nm visudo\nis typically run as\n.Sy root\nso this flag may allow a user with\n.Nm visudo\nprivileges to run arbitrary commands as\n.Sy root\nwithout logging.\nAn alternative is to place a colon-separated list of\n.Dq safe\neditors int the\n.Em editor\nsetting.\n.Nm visudo\nwill then only use\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nif they match a value specified in\n.Em editor .\nIf the\n.Em env_reset\nflag is enabled, the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nand/or\n.Ev EDITOR\nenvironment variables must be present in the\n.Em env_keep\nlist for the\n.Em env_editor\nflag to function when\n.Nm visudo\nis invoked via\n.Nm sudo .\nThis flag is\n.Em @env_editor@\nby default.\n.It env_reset\nIf set,\n.Nm sudo\nwill run the command in a minimal environment containing the\n.Ev TERM ,\n.Ev PATH ,\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev LOGNAME ,\n.Ev USER\nand\n.Ev SUDO_*\nvariables.\nAny variables in the caller's environment or in the file specified\nby the\n.Em restricted_env_file\nsetting that match the\n.Em env_keep\nand\n.Em env_check\nlists are then added, followed by any variables present in the file\nspecified by the\n.Em env_file\nsetting (if any).\nThe contents of the\n.Em env_keep\nand\n.Em env_check\nlists, as modified by global Defaults parameters in\n.Em sudoers ,\nare displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nIf the\n.Em secure_path\nsetting is enabled, its value will be used for the\n.Ev PATH\nenvironment variable.\nThis flag is\n.Em @env_reset@\nby default.\n.It fast_glob\nNormally,\n.Nm sudo\nuses the\n.Xr glob 3\nfunction to do shell-style globbing when matching path names.\nHowever, since it accesses the file system,\n.Xr glob 3\ncan take a long time to complete for some patterns, especially\nwhen the pattern references a network file system that is mounted\non demand (auto mounted).\nThe\n.Em fast_glob\nflag causes\n.Nm sudo\nto use the\n.Xr fnmatch 3\nfunction, which does not access the file system to do its matching.\nThe disadvantage of\n.Em fast_glob\nis that it is unable to match relative paths such as\n.Pa ./ls\nor\n.Pa ../bin/ls .\nThis has security implications when path names that include globbing\ncharacters are used with the negation operator,\n.Ql !\\& ,\nas such rules can be trivially bypassed.\nAs such, this flag should not be used when the\n.Em sudoers\nfile contains rules that contain negated path names which include globbing\ncharacters.\nThis flag is\n.Em off\nby default.\n.It log_passwords\nMost programs that require a user's password will disable echo before\nreading the password to avoid displaying the plaintext password on\nthe screen.\nHowever, if terminal input is being logged (see\n.Sx \"I/O LOGGING\" ) ,\nthe password will still be present in the I/O log.\nIf the\n.Em log_passwords\noption is disabled,\n.Nm\nwill attempt to prevent passwords from being logged.\nIt does this by using the regular expressions in\n.Em passprompt_regex\nto match a password prompt in the terminal output buffer.\nWhen a match is found, input characters in the I/O log will be replaced with\n.Ql *\nuntil either a line feed or carriage return is found in the terminal input\nor a new terminal output buffer is received.\nIf, however, a program displays characters as the user types\n(such as\n.Nm sudo\nwhen\n.Em pwfeedback\nis set), only the\nfirst character of the password will be replaced in the I/O log.\nThis option has no effect unless\n.Em log_input\nor\n.Em log_ttyin\nare also set.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.It fqdn\nSet this flag if you want to put fully qualified host names in the\n.Em sudoers\nfile when the local host name (as returned by the\n.Ql hostname\ncommand) does not contain the domain name.\nIn other words, instead of myhost you would use myhost.mydomain.edu.\nYou may still use the short form if you wish (and even mix the two).\nThis flag is only effective when the\n.Dq canonical\nhost name, as returned by the\n.Xr getaddrinfo 3\nor\n.Xr gethostbyname 3\nfunction, is a fully-qualified domain name.\nThis is usually the case when the system is configured to use DNS\nfor host name resolution.\n.Pp\nIf the system is configured to use the\n.Pa /etc/hosts\nfile in preference to DNS, the\n.Dq canonical\nhost name may not be fully-qualified.\nThe order that sources are queried for host name resolution\nis usually specified in the\n.Pa @nsswitch_conf@ ,\n.Pa @netsvc_conf@ ,\n.Pa /etc/host.conf ,\nor, in some cases,\n.Pa /etc/resolv.conf\nfile.\nIn the\n.Pa /etc/hosts\nfile, the first host name of the entry is considered to be the\n.Dq canonical\nname; subsequent names are aliases that are not used by\n.Nm .\nFor example, the following hosts file line for the machine\n.Dq xyzzy\nhas the fully-qualified domain name as the\n.Dq canonical\nhost name, and the short version as an alias.\n.sp\n.Dl 192.168.1.1 xyzzy.sudo.ws xyzzy\n.sp\nIf the machine's hosts file entry is not formatted properly, the\n.Em fqdn\nflag will not be effective if it is queried before DNS.\n.Pp\nBeware that when using DNS for host name resolution, turning on\n.Em fqdn\nrequires\n.Nm\nto make DNS lookups which renders\n.Nm sudo\nunusable if DNS stops working (for example if the machine is disconnected\nfrom the network).\nJust like with the hosts file, you must use the\n.Dq canonical\nname as DNS knows it.\nThat is, you may not use a host alias (CNAME entry) due to performance\nissues and the fact that there is no way to get all aliases from DNS.\n.Pp\nThis flag is\n.Em @fqdn@\nby default.\n.It ignore_audit_errors\nAllow commands to be run even if\n.Nm\ncannot write to the audit log.\nIf enabled, an audit log write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the audit event is successfully\nwritten.\nThis flag is only effective on systems for which\n.Nm\nsupports audit logging, including\n.Fx ,\nLinux, macOS, and Solaris.\nThis flag is\n.Em on\nby default.\n.It ignore_dot\nIf set,\n.Nm sudo\nwill ignore \".\" or \"\" (both denoting the current directory) in the\n.Ev PATH\nenvironment variable; the\n.Ev PATH\nitself is not modified.\nThis flag is\n.Em @ignore_dot@\nby default.\n.It ignore_iolog_errors\nAllow commands to be run even if\n.Nm\ncannot write to the I/O log (local or remote).\nIf enabled, an I/O log write failure is not treated as a fatal error.\nIf disabled, the command will be terminated if the I/O log cannot be written to.\nThis flag is\n.Em off\nby default.\n.It ignore_logfile_errors\nAllow commands to be run even if\n.Nm\ncannot write to the log file.\nIf enabled, a log file write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the log file entry is successfully\nwritten.\nThis flag only has an effect when\n.Nm\nis configured to use file-based logging via the\n.Em logfile\nsetting.\nThis flag is\n.Em on\nby default.\n.It ignore_local_sudoers\nIf set via LDAP, parsing of\n.Pa @sysconfdir@/sudoers\nwill be skipped.\nThis is intended for sites that wish to prevent the usage of local\nsudoers files so that only LDAP is used.\nThis thwarts the efforts of rogue operators who would attempt to add roles to\n.Pa @sysconfdir@/sudoers .\nWhen this flag is enabled,\n.Pa @sysconfdir@/sudoers\ndoes not even need to exist.\nSince this flag tells\n.Nm sudo\nhow to behave when no specific LDAP entries have been matched, this\nsudoOption is only meaningful for the\n.Ql cn=defaults\nsection.\nThis flag is\n.Em off\nby default.\n.It ignore_unknown_defaults\nIf set,\n.Nm sudo\nwill not produce a warning if it encounters an unknown Defaults entry\nin the\n.Em sudoers\nfile or an unknown sudoOption in LDAP.\nThis flag is\n.Em off\nby default.\n.It insults\nIf set,\n.Nm sudo\nwill insult users when they enter an incorrect password.\nThis flag is\n.Em @insults@\nby default.\n.It log_allowed\nIf set,\n.Nm\nwill log commands allowed by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.29 or higher.\n.It log_denied\nIf set,\n.Nm\nwill log commands denied by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.29 or higher.\n.It log_exit_status\nIf set,\n.Nm\nwill log the exit value of commands that are run to syslog and/or a log file.\nIf a command was terminated by a signal, the signal name is logged as well.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It log_host\nIf set, the host name will be included in log entries written to\nthe file configured by the\n.Em logfile\nsetting.\nThis flag is\n.Em off\nby default.\n.It log_input\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal (if\n.Nm sudo\nwas run from a terminal) and log all user input.\nIf the standard input is not connected to the user's terminal, due\nto I/O redirection or because the command is part of a pipeline,\nthat input is also logged.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\nThis flag is\n.Em off\nby default.\n.It log_output\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal (if\n.Nm sudo\nwas run from a terminal) and log all output that is sent to the\nuser's terminal, the standard output or the standard error.\nIf the standard output or standard error is not connected to the\nuser's terminal, due to I/O redirection or because the command is\npart of a pipeline, that output is also logged.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\nThis flag is\n.Em off\nby default.\n.It log_server_keepalive\nIf set,\n.Nm sudo\nwill enable the TCP keepalive socket option on the connection to the log server.\nThis enables the periodic transmission of keepalive messages to the server.\nIf the server does not respond to a message, the connection will\nbe closed and the running command will be terminated unless the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_verify\nIf set, the server certificate received during the TLS handshake\nmust be valid and it must contain either the server name (from\n.Em log_servers )\nor its IP address.\nIf either of these conditions is not met, the TLS handshake will fail.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_stderr\nIf set,\n.Nm sudo\nwill log the standard error if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\n.It log_stdin\nIf set,\n.Nm sudo\nwill log the standard input if it is not connected to the user's terminal.\nThis can be used to log input from a pipe or redirected from a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag is set.\n.It log_stdout\nIf set,\n.Nm sudo\nwill log the standard output if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\n.It log_subcmds\nIf set,\n.Nm\nwill log when a command spawns a child process and executes a program\nusing the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nor\n.Xr system 3\nlibrary functions.\nFor example, if a shell is run by\n.Nm sudo ,\nthe individual commands run via the shell will be logged.\nThis flag is\n.Em off\nby default.\n.Pp\nThe\n.Em log_subcmds\nflag uses the same underlying mechanism as the\n.Em intercept\nsetting.\nSee\n.Sx Preventing shell escapes\nfor more information on what systems support this option and its limitations.\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\n.Xr seccomp 2\nfilter mode.\n.It log_ttyin\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal and log user keystrokes\nsent to the user's terminal, if one is present.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\n.Xr ssh 1 ,\nthis flag will have no effect.\n.It log_ttyout\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal and log all output displayed\non the user's terminal, if one is present.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\n.Xr ssh 1 ,\nthis flag will have no effect.\n.It log_year\nIf set, the four-digit year will be logged in the (non-syslog)\n.Nm sudo\nlog file.\nThis flag is\n.Em off\nby default.\n.It long_otp_prompt\nWhen validating with a One Time Password (OTP) scheme such as\n.Sy S/Key\nor\n.Sy OPIE ,\na two-line prompt is used to make it easier\nto cut and paste the challenge to a local window.\nIt's not as pretty as the default but some people find it more convenient.\nThis flag is\n.Em @long_otp_prompt@\nby default.\n.It mail_all_cmnds\nSend mail to the\n.Em mailto\nuser every time a user attempts to run a command via\n.Nm sudo\n(this includes\n.Nm sudoedit ) .\nNo mail will be sent if the user runs\n.Nm sudo\nwith the\n.Fl l\nor\n.Fl v\noption unless there is an authentication error and the\n.Em mail_badpass\nflag is also set.\nThis flag is\n.Em off\nby default.\n.It mail_always\nSend mail to the\n.Em mailto\nuser every time a user runs\n.Nm sudo .\nThis flag is\n.Em off\nby default.\n.It mail_badpass\nSend mail to the\n.Em mailto\nuser if the user running\n.Nm sudo\ndoes not enter the correct password.\nIf the command the user is attempting to run is not permitted by\n.Nm\nand one of the\n.Em mail_all_cmnds ,\n.Em mail_always ,\n.Em mail_no_host ,\n.Em mail_no_perms\nor\n.Em mail_no_user\nflags are set, this flag will have no effect.\nThis flag is\n.Em off\nby default.\n.It mail_no_host\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user exists in the\n.Em sudoers\nfile, but is not allowed to run commands on the current host.\nThis flag is\n.Em @mail_no_host@\nby default.\n.It mail_no_perms\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user is allowed to use\n.Nm sudo\nbut the command they are trying is not listed in their\n.Em sudoers\nfile entry or is explicitly denied.\nThis flag is\n.Em @mail_no_perms@\nby default.\n.It mail_no_user\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user is not in the\n.Em sudoers\nfile.\nThis flag is\n.Em @mail_no_user@\nby default.\n.It match_group_by_gid\nBy default,\n.Nm\nwill look up each group the user is a member of by group-ID to\ndetermine the group name (this is only done once).\nThe resulting list of the user's group names is used when matching\ngroups listed in the\n.Em sudoers\nfile.\nThis works well on systems where the number of groups listed in the\n.Em sudoers\nfile is larger than the number of groups a typical user belongs to.\nOn systems where group lookups are slow, where users may belong\nto a large number of groups, or where the number of groups listed\nin the\n.Em sudoers\nfile is relatively small, it may be prohibitively expensive and\nrunning commands via\n.Nm sudo\nmay take longer than normal.\nOn such systems it may be faster to use the\n.Em match_group_by_gid\nflag to avoid resolving the user's group-IDs to group names.\nIn this case,\n.Nm\nmust look up any group name listed in the\n.Em sudoers\nfile and use the group-ID instead of the group name when determining\nwhether the user is a member of the group.\n.Pp\nIf\n.Em match_group_by_gid\nis enabled, group database lookups performed by\n.Nm\nwill be keyed by group name as opposed to group-ID.\nOn systems where there are multiple sources for the group database,\nit is possible to have conflicting group names or group-IDs in the local\n.Pa /etc/group\nfile and the remote group database.\nOn such systems, enabling or disabling\n.Em match_group_by_gid\ncan be used to choose whether group database queries are performed\nby name (enabled) or ID (disabled), which may aid in working around\ngroup entry conflicts.\n.Pp\nThe\n.Em match_group_by_gid\nflag has no effect when\n.Em sudoers\ndata is stored in LDAP.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.18 or higher.\n.It intercept\nIf set, all commands run via\n.Nm sudo\nwill behave as if the\n.Dv INTERCEPT\ntag has been set, unless overridden by an\n.Dv NOINTERCEPT\ntag.\nSee the description of\n.Dv INTERCEPT and NOINTERCEPT\nabove as well as the\n.Sx Preventing shell escapes\nsection at the end of this manual.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\n.Xr seccomp 2\nfilter mode.\n.It intercept_allow_setid\nOn most systems, the dynamic loader will ignore\n.Ev LD_PRELOAD\n(or the equivalent) when running set-user-ID and set-group-ID\nprograms, effectively disabling intercept mode.\nTo prevent this from happening,\n.Nm\nwill not permit a set-user-ID or set-group-ID program to be run in\nintercept mode unless\n.Em intercept_allow_setid\nis enable.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command.\nThis flag is\n.Em on\nby default when the\n.Em intercept_type\noption is set to\n.Em trace ,\notherwise it default to\n.Em off .\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It intercept_authenticate\nIf set, commands run by an intercepted process must be authenticated\nwhen the user's time stamp is not current.\nFor example, if a shell is run with\n.Em intercept\nenabled, as soon as the invoking user's time stamp is out of date,\nsubsequent commands will need to be authenticated.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It intercept_verify\nIf set,\n.Nm sudo\nwill attempt to verify that a command run in intercept mode has\nthe expected path name, command line arguments and environment.\n.Pp\nThe process will be stopped after\n.Xr execve 2\nhas completed but before the new command has had a chance to run.\nTo verify the command,\n.Nm sudo\nwill read the command's path from\n.Pa /proc/PID/exe ,\nthe command line arguments and environment from the process's memory,\nand compare them against the arguments that were passed to\n.Xr execve 2 .\nIn the event of a mismatch, the command will be sent a\n.Dv SIGKILL\nsignal and terminated.\n.Pp\nThis can help prevent a time of check versus time of use issue with\nintercept mode where the\n.Xr execve 2\narguments could be altered after the\n.Nm\npolicy check.\nThe checks can only be performed if the\n.Xr proc @mansectform@\nfile system is available.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command and the\n.Em intercept_type\noption is set to\n.Em trace .\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.12 or higher.\n.It netgroup_tuple\nIf set, netgroup lookups will be performed using the full netgroup\ntuple: host name, user name, and domain (if one is set).\nHistorically,\n.Nm sudo\nonly matched the user name and domain for netgroups used in a\n.Em User_List\nand only matched the host name and domain for netgroups used in a\n.Em Host_List .\nThis flag is\n.Em off\nby default.\n.It noexec\nIf set, all commands run via\n.Nm sudo\nwill behave as if the\n.Dv NOEXEC\ntag has been set, unless overridden by an\n.Dv EXEC\ntag.\nSee the description of\n.Dv EXEC and NOEXEC\nabove as well as the\n.Sx Preventing shell escapes\nsection at the end of this manual.\nThis flag is\n.Em off\nby default.\n.It noninteractive_auth\nIf set, authentication will be attempted even in non-interactive mode\n(when\n.Nm sudo Ns 's\n.Fl n\noption is specified).\nThis allows authentication methods that don't require user interaction\nto succeed.\nAuthentication methods that require input from the user's terminal\nwill still fail.\nIf disabled, authentication will not be attempted in non-interactive mode.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.It pam_acct_mgmt\nOn systems that use PAM for authentication,\n.Nm sudo\nwill perform PAM account validation for the invoking user by default.\nThe actual checks performed depend on which PAM modules are configured.\nIf enabled, account validation will be performed regardless of whether\nor not a password is required.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.28 or higher.\n.It pam_rhost\nOn systems that use PAM for authentication,\n.Nm sudo\nwill set the PAM remote host value to the name of the local host\nwhen the\n.Em pam_rhost\nflag is enabled.\nOn Linux systems, enabling\n.Em pam_rhost\nmay result in DNS lookups of the local host name when PAM is initialized.\nOn Solaris versions prior to Solaris 8,\n.Em pam_rhost\nmust be enabled if\n.Em pam_ruser\nis also enabled to avoid a crash in the Solaris PAM implementation.\n.Pp\nThis flag is\n.Em off\nby default on systems other than Solaris.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It pam_ruser\nOn systems that use PAM for authentication,\n.Nm sudo\nwill set the PAM remote user value to the name of the user that invoked sudo\nwhen the\n.Em pam_ruser\nflag is enabled.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It pam_session\nOn systems that use PAM for authentication,\n.Nm sudo\nwill create a new PAM session for the command to be run in.\nUnless\n.Nm sudo\nis given the\n.Fl i\nor\n.Fl s\noptions, PAM session modules are run with the\n.Dq silent\nflag enabled.\nThis prevents last login information from being displayed for every\ncommand on some systems.\nDisabling\n.Em pam_session\nmay be needed on older PAM implementations or on operating systems where\nopening a PAM session changes the utmp or wtmp files.\nIf PAM session support is disabled, resource limits may not be updated\nfor the command being run.\nIf\n.Em pam_session ,\n.Em pam_setcred ,\nand\n.Em use_pty\nare disabled,\n.Em log_servers\nhas not been set and I/O logging has not been configured,\n.Nm sudo\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n.Em @pam_session@\nby default.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\n.It pam_setcred\nOn systems that use PAM for authentication,\n.Nm sudo\nwill attempt to establish credentials for the target user by default,\nif supported by the underlying authentication system.\nOne example of a credential is a Kerberos ticket.\nIf\n.Em pam_session ,\n.Em pam_setcred ,\nand\n.Em use_pty\nare disabled,\n.Em log_servers\nhas not been set and I/O logging has not been configured,\n.Nm sudo\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It passprompt_override\nIf set, the prompt specified by\n.Em passprompt\nor the\n.Ev SUDO_PROMPT\nenvironment variable will always be used and will replace the\nprompt provided by a PAM module or other authentication method.\nThis flag is\n.Em off\nby default.\n.It path_info\nNormally,\n.Nm sudo\nwill tell the user when a command could not be\nfound in their\n.Ev PATH\nenvironment variable.\nSome sites may wish to disable this as it could be used to gather\ninformation on the location of executables that the normal user does\nnot have access to.\nThe disadvantage is that if the executable is simply not in the user's\n.Ev PATH ,\n.Nm sudo\nwill tell the user that they are not allowed to run it, which can be confusing.\nThis flag is\n.Em @path_info@\nby default.\n.It preserve_groups\nBy default,\n.Nm sudo\nwill initialize the group vector to the list of groups the target user is in.\nWhen\n.Em preserve_groups\nis set, the user's existing group vector is left unaltered.\nThe real and effective group-IDs, however, are still set to match the\ntarget user.\nThis flag is\n.Em off\nby default.\n.It pwfeedback\nBy default,\n.Nm sudo\nreads the password like most other Unix programs,\nby turning off echo until the user hits the return (or enter) key.\nSome users become confused by this as it appears to them that\n.Nm sudo\nhas hung at this point.\nWhen\n.Em pwfeedback\nis set,\n.Nm sudo\nwill provide visual feedback when the user presses a key.\nThis does have a security impact as an onlooker may be able to\ndetermine the length of the password being entered.\nThis flag is\n.Em off\nby default.\n.It requiretty\nIf set,\n.Nm sudo\nwill only run when the user is logged in to a real tty.\nWhen this flag is set,\n.Nm sudo\ncan only be run from a login session and not via other means such as\n.Xr cron @mansectsu@\nor cgi-bin scripts.\nThis flag is\n.Em off\nby default.\n.It root_sudo\nIf set,\n.Sy root\nis allowed to run\n.Nm sudo\ntoo.\nDisabling this prevents users from\n.Dq chaining\n.Nm sudo\ncommands to get a\n.Sy root\nshell by doing something like\n.Ql sudo sudo /bin/sh .\nNote, however, that turning off\n.Em root_sudo\nwill also prevent\n.Sy root\nfrom running\n.Nm sudoedit .\nDisabling\n.Em root_sudo\nprovides no real additional security; it exists purely for historical reasons.\nThis flag is\n.Em @root_sudo@\nby default.\n.It rootpw\nIf set,\n.Nm sudo\nwill prompt for the\n.Sy root\npassword instead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n.Em off\nby default.\n.It runas_allow_unknown_id\nIf enabled, allow matching of runas user and group IDs that are\nnot present in the password or group databases.\nIn addition to explicitly matching unknown user or group IDs in a\n.Em Runas_List ,\nthis option also allows the\n.Sy ALL\nalias to match unknown IDs.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.30 or higher.\nOlder versions of\n.Nm sudo\nalways allowed matching of unknown user and group IDs.\n.It runas_check_shell\nIf enabled,\n.Nm sudo\nwill only run commands as a user whose shell appears in the\n.Pa /etc/shells\nfile, even if the invoking user's\n.Em Runas_List\nwould otherwise permit it.\nIf no\n.Pa /etc/shells\nfile is present, a system-dependent list of built-in default shells is used.\nOn many operating systems, system users such as\n.Dq bin ,\ndo not have a valid shell and this flag can be used to prevent\ncommands from being run as those users.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.30 or higher.\n.It runaspw\nIf set,\n.Nm sudo\nwill prompt for the password of the user defined by the\n.Em runas_default\noption (defaults to\n.Sy @runas_default@ )\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n.Em off\nby default.\n.if \\n(SL \\{\\\n.It selinux\nIf enabled, the user may specify an SELinux role and/or type to use\nwhen running the command, as permitted by the SELinux policy.\nIf SELinux is disabled on the system, this flag has no effect.\nThis flag is\n.Em on\nby default.\n.\\}\n.It set_home\nIf enabled and\n.Nm sudo\nis invoked with the\n.Fl s\noption, the\n.Ev HOME\nenvironment variable will be set to the home directory of the target\nuser (which is the\n.Em runas_default\nuser unless the\n.Fl u\noption is used).\nThis flag is largely obsolete and has no effect unless the\n.Em env_reset\nflag has been disabled or\n.Ev HOME\nis present in the\n.Em env_keep\nlist, both of which are strongly discouraged.\nThis flag is\n.Em off\nby default.\n.It set_logname\nNormally,\n.Nm sudo\nwill set the\n.Ev LOGNAME\nand\n.Ev USER\nenvironment variables to the name of the target user (the user specified by\n.Em runas_default\nunless the\n.Fl u\noption is given).\nHowever, since some programs (including the RCS revision control system) use\n.Ev LOGNAME\nto determine the real identity of the user, it may be desirable to\nchange this behavior.\nThis can be done by negating the set_logname option.\nThe\n.Em set_logname\noption will have no effect\nif the\n.Em env_reset\noption has not been disabled and the\n.Em env_keep\nlist contains\n.Ev LOGNAME\nor\n.Ev USER .\nThis flag is\n.Em on\nby default.\n.It set_utmp\nWhen enabled,\n.Nm sudo\nwill create an entry in the utmp (or utmpx) file when a pseudo-terminal\nis allocated.\nA pseudo-terminal is allocated by\n.Nm sudo\nwhen it is running in a terminal and one or more of the\n.Em log_input ,\n.Em log_output ,\n.Em log_stdin ,\n.Em log_stdout ,\n.Em log_stderr ,\n.Em log_ttyin ,\n.Em log_ttyout ,\nor\n.Em use_pty\nflags is enabled.\nBy default, the new entry will be a copy of the user's existing utmp\nentry (if any), with the tty, time, type, and pid fields updated.\nThis flag is\n.Em on\nby default.\n.It setenv\nAllow the user to disable the\n.Em env_reset\noption from the command line via the\n.Fl E\noption.\nAdditionally, environment variables set via the command line are\nnot subject to the restrictions imposed by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep .\nAs such, only trusted users should be allowed to set variables in this manner.\nThis flag is\n.Em off\nby default.\n.It shell_noargs\nIf set and\n.Nm sudo\nis invoked with no arguments it acts as if the\n.Fl s\noption had been given.\nThat is, it runs a shell as\n.Sy root\n(the shell is determined by the\n.Ev SHELL\nenvironment variable if it is set, falling back on the shell listed\nin the invoking user's /etc/passwd entry if not).\nThis flag is\n.Em off\nby default.\n.It stay_setuid\nNormally, when\n.Nm sudo\nexecutes a command the real and effective user-IDs are set to the target\nuser\n.Sy ( @runas_default@\nby default).\nThis option changes that behavior such that the real user-ID is left\nas the invoking user's user-ID.\nIn other words, this makes\n.Nm sudo\nact as a set-user-ID wrapper.\nThis can be useful on systems that disable some potentially\ndangerous functionality when a program is run set-user-ID.\nThis option is only effective on systems that support either the\n.Xr setreuid 2\nor\n.Xr setresuid 2\nsystem call.\nThis flag is\n.Em off\nby default.\n.It sudoedit_checkdir\nIf set,\n.Nm sudoedit\nwill check all directory components of the path to be edited for writability\nby the invoking user.\nSymbolic links will not be followed in writable directories and\n.Nm sudoedit\nwill refuse to edit a file located in a writable directory.\nThese restrictions are not enforced when\n.Nm sudoedit\nis run by\n.Sy root .\nOn some systems, if all directory components of the path to be edited\nare not readable by the target user,\n.Nm sudoedit\nwill be unable to edit the file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting was first introduced in version 1.8.15 but initially\nsuffered from a race condition.\nThe check for symbolic links in writable intermediate directories\nwas added in version 1.8.16.\n.It sudoedit_follow\nBy default,\n.Nm sudoedit\nwill not follow symbolic links when opening files.\nThe\n.Em sudoedit_follow\noption can be enabled to allow\n.Nm sudoedit\nto open symbolic links.\nIt may be overridden on a per-command basis by the\n.Dv FOLLOW\nand\n.Dv NOFOLLOW\ntags.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.15 or higher.\n.It syslog_pid\nWhen logging via\n.Xr syslog 3 ,\ninclude the process ID in the log entry.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.21 or higher.\n.It targetpw\nIf set,\n.Nm sudo\nwill prompt for the password of the user specified\nby the\n.Fl u\noption (defaults to the value of\n.Em runas_default )\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag precludes the use of a user-ID not listed in the passwd\ndatabase as an argument to the\n.Fl u\noption.\nThis flag is\n.Em off\nby default.\n.It tty_tickets\nIf set, users must authenticate on a per-tty basis.\nWith this flag enabled,\n.Nm sudo\nwill use a separate record in the time stamp file for each terminal.\nIf disabled, a single record is used for all login sessions.\n.Pp\nThis option has been superseded by the\n.Em timestamp_type\noption.\n.It umask_override\nIf set,\n.Nm sudo\nwill set the umask as specified in the\n.Em sudoers\nfile without modification.\nThis makes it possible to specify a umask in the\n.Em sudoers\nfile that is more permissive than the user's own umask and matches\nhistorical behavior.\nIf\n.Em umask_override\nis not set,\n.Nm sudo\nwill set the umask to be the union of the user's umask and what is specified in\n.Em sudoers .\nThis flag is\n.Em @umask_override@\nby default.\n.if \\n(LC \\{\\\n.It use_loginclass\nIf set,\n.Nm sudo\nwill apply the defaults specified for the target user's login class\nif one exists.\nOnly available if\n.Nm sudo\nis configured with the\n.Li --with-logincap\noption.\nThis flag is\n.Em off\nby default.\n.\\}\n.It use_netgroups\nIf set, netgroups (prefixed with\n.Ql + ) ,\nmay be used in place of a user or host.\nFor LDAP-based sudoers, netgroup support requires an expensive\nsub-string match on the server unless the\n.Sy NETGROUP_BASE\ndirective is present in the\n.Pa @ldap_conf@\nfile.\nIf netgroups are not needed, this option can be disabled to reduce the\nload on the LDAP server.\nThis flag is\n.Em on\nby default.\n.It use_pty\nIf set, and\n.Nm sudo\nis running in a terminal, the command will be run in a pseudo-terminal\n(even if no I/O logging is being done).\nIf the\n.Nm sudo\nprocess is not attached to a terminal,\n.Em use_pty\nhas no effect.\n.Pp\nA malicious program run under\n.Nm sudo\nmay be capable of injecting commands into the user's\nterminal or running a background process that retains access to the\nuser's terminal device even after the main program has finished\nexecuting.\nBy running the command in a separate pseudo-terminal, this attack is\nno longer possible.\nThis flag is\n.Em off\nby default.\n.It user_command_timeouts\nIf set, the user may specify a timeout on the command line.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nIf a timeout is specified both in the\n.Pa sudoers\nfile and on the command line, the smaller of the two timeouts will be used.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It utmp_runas\nIf set,\n.Nm sudo\nwill store the name of the runas user when updating the utmp (or utmpx) file.\nBy default,\n.Nm sudo\nstores the name of the invoking user.\nThis flag is\n.Em off\nby default.\n.It visiblepw\nBy default,\n.Nm sudo\nwill refuse to run if the user must enter a password but it is not\npossible to disable echo on the terminal.\nIf the\n.Em visiblepw\nflag is set,\n.Nm sudo\nwill prompt for a password even when it would be visible on the screen.\nThis makes it possible to run things like\n.Ql ssh somehost sudo ls\nsince by default,\n.Xr ssh 1\ndoes\nnot allocate a tty when running a command.\nThis flag is\n.Em off\nby default.\n.El\n.Pp\n.Sy Integers :\n.Bl -tag -width 16n\n.It closefrom\nBefore it executes a command,\n.Nm sudo\nwill close all open file descriptors other than standard input,\nstandard output, and standard error (file descriptors 0-2).\nThe\n.Em closefrom\noption can be used to specify a different file descriptor at which\nto start closing.\nThe default is 3.\n.It command_timeout\nThe maximum amount of time a command is allowed to run before\nit is terminated.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It log_server_timeout\nThe maximum amount of time to wait when connecting to a log server\nor waiting for a server response.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\nThe default value is 30 seconds.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It maxseq\nThe maximum sequence number that will be substituted for the\n.Ql %{seq}\nescape in the I/O log file (see the\n.Em iolog_dir\ndescription below for more information).\nWhile the value substituted for\n.Ql %{seq}\nis in base 36,\n.Em maxseq\nitself should be expressed in decimal.\nValues larger than 2176782336 (which corresponds to the\nbase 36 sequence number\n.Dq ZZZZZZ )\nwill be silently truncated to 2176782336.\nThe default value is 2176782336.\n.Pp\nOnce the local sequence number reaches the value of\n.Em maxseq ,\nit will\n.Dq roll over\nto zero, after which\n.Nm\nwill truncate and re-use any existing I/O log path names.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\n.It passwd_tries\nThe number of tries a user gets to enter his/her password before\n.Nm sudo\nlogs the failure and exits.\nThe default is @passwd_tries@.\n.It syslog_maxlen\nOn many systems,\n.Xr syslog 3\nhas a relatively small log buffer.\nIETF RFC 5424 states that syslog servers must support messages of\nat least 480 bytes and should support messages up to 2048 bytes.\nBy default,\n.Nm\ncreates log messages up to 980 bytes which corresponds to the\nhistoric\n.Bx\nsyslog implementation which used a 1024 byte buffer\nto store the message, date, hostname, and program name.\nTo prevent syslog messages from being truncated,\n.Nm\nwill split up log messages that are larger than\n.Em syslog_maxlen\nbytes.\nWhen a message is split, additional parts will include the string\n.Dq Pq command continued\nafter the user name and before the continued command line arguments.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.El\n.Pp\n.Sy Integers that can be used in a boolean context :\n.Bl -tag -width 16n\n.It loglinelen\nNumber of characters per line for the file log.\nThis value is used to decide when to wrap lines for nicer log files.\nThis has no effect on the syslog log file, only the file log.\nThe default is @loglen@ (use 0 or negate the option to disable word wrap).\n.It passwd_timeout\nNumber of minutes before the\n.Nm sudo\npassword prompt times out, or 0 for no timeout.\nThe timeout may include a fractional component\nif minute granularity is insufficient, for example 2.5.\nThe default is @password_timeout@.\n.It timestamp_timeout\nNumber of minutes that can elapse before\n.Nm sudo\nwill ask for a password again.\nThe timeout may include a fractional component if\nminute granularity is insufficient, for example 2.5.\nThe default is @timeout@.\nSet this to 0 to always prompt for a password.\nIf set to a value less than 0 the user's time stamp will not expire\nuntil the system is rebooted.\nThis can be used to allow users to create or delete their own time stamps via\n.Ql sudo -v\nand\n.Ql sudo -k\nrespectively.\n.It umask\nFile mode creation mask to use when running the command.\nNegate this option or set it to 0777 to prevent\n.Nm\nfrom changing the umask.\nUnless the\n.Em umask_override\nflag is set, the actual umask will be the union of the\nuser's umask and the value of the\n.Em umask\nsetting, which defaults to @sudo_umask@.\nThis guarantees that\n.Nm sudo\nnever lowers the umask when running a command.\n.Pp\nIf\n.Em umask\nis explicitly set in\n.Em sudoers ,\nit will override any umask setting in PAM or login.conf.\nIf\n.Em umask\nis not set in\n.Em sudoers ,\nthe umask specified by PAM or login.conf will take precedence.\nThe umask setting in PAM is not used for\n.Nm sudoedit ,\nwhich does not create a new PAM session.\n.El\n.Pp\n.Sy Strings :\n.Bl -tag -width 16n\n.if \\n(AA \\{\\\n.It apparmor_profile\nThe default AppArmor profile to transition into when executing the\ncommand.\nThe default\n.Em apparmor_profile\ncan be overridden for individual\n.Em sudoers\nentries by specifying the\n.Dv APPARMOR_PROFILE\noption.\nThis option is only available when sudo is built with AppArmor\nsupport.\n.\\}\n.It authfail_message\nMessage that is displayed after a user fails to authenticate.\nThe message may include the\n.Ql %d\nescape which will expand to the number of failed password attempts.\nIf set, it overrides the default message,\n.Dq %d incorrect password attempt(s) .\n.It badpass_message\nMessage that is displayed if a user enters an incorrect password.\nThe default is\n.Dq @badpass_message@\nunless insults are enabled.\n.It editor\nA colon\n.Pq Ql :\\&\nseparated list of editor path names used by\n.Nm sudoedit\nand\n.Nm visudo .\nFor\n.Nm sudoedit ,\nthis list is used to find an editor when none of the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables are set to an editor that exists and is executable.\nFor\n.Nm visudo ,\nit is used as a white list of allowed editors;\n.Nm visudo\nwill choose the editor that matches the user's\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variable if possible, or the first editor in the\nlist that exists and is executable if not.\nUnless invoked as\n.Nm sudoedit ,\n.Nm sudo\ndoes not preserve the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables unless they are present in the\n.Em env_keep\nlist or the\n.Em env_reset\noption is disabled.\nThe default is\n.Pa @editor@ .\n.It intercept_type\nThe underlying mechanism used by the\n.Em intercept\nand\n.Em log_subcmds\noptions.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It dso\nPreload a dynamic shared object (shared library) that intercepts the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nand\n.Xr system 3\nlibrary functions.\nA value of\n.Em dso\nis incompatible with\n.Nm sudo Ns 's\nSELinux RBAC support.\n.It trace\nUse\n.Xr ptrace 2\nto intercept the\n.Xr execve 2\nsystem call.\nThis is only supported on Linux systems where\n.Xr seccomp 2\nfiltering is enabled.\nIf the\n.Pa /proc/sys/kernel/seccomp/actions_avail\nfile is missing or does not contain a\n.Dq trap\nelement, setting\n.Em intercept_type\nto\n.Em trace\nwill have no effect and\n.Em dso\nwill be used instead.\n.El\n.Pp\nThe default is to use\n.Em trace\nif it is supported by the system and\n.Em dso\nif it is not.\n.It iolog_dir\nThe top-level directory to use when constructing the path name for\nthe input/output log directory.\nOnly used if the\n.Em log_input\nor\n.Em log_output\noptions are enabled or when the\n.Dv LOG_INPUT\nor\n.Dv LOG_OUTPUT\ntags are present for a command.\nThe session sequence number, if any, is stored in the directory.\nThe default is\n.Pa @iolog_dir@ .\n.Pp\nThe following percent\n.Pq Ql %\nescape sequences are supported:\n.Bl -tag -width 4n\n.It %{seq}\nexpanded to a monotonically increasing base-36 sequence number, such as 0100A5,\nwhere every two digits are used to form a new directory, e.g.,\n.Pa 01/00/A5\n.It %{user}\nexpanded to the invoking user's login name\n.It %{group}\nexpanded to the name of the invoking user's real group-ID\n.It %{runas_user}\nexpanded to the login name of the user the command will\nbe run as (e.g.,\n.Sy root )\n.It %{runas_group}\nexpanded to the group name of the user the command will\nbe run as (e.g.,\n.Sy wheel )\n.It %{hostname}\nexpanded to the local host name without the domain name\n.It %{command}\nexpanded to the base name of the command being run\n.El\n.Pp\nIn addition, any escape sequences supported by the system's\n.Xr strftime 3\nfunction will be expanded.\n.Pp\nTo include a literal\n.Ql %\ncharacter, the string\n.Ql %%\nshould be used.\n.It iolog_file\nThe path name, relative to\n.Em iolog_dir ,\nin which to store input/output logs when the\n.Em log_input\nor\n.Em log_output\noptions are enabled or when the\n.Dv LOG_INPUT\nor\n.Dv LOG_OUTPUT\ntags are present for a command.\n.Em iolog_file\nmay contain directory components.\nThe default is\n.Ql %{seq} .\n.Pp\nSee the\n.Em iolog_dir\noption above for a list of supported percent\n.Pq Ql %\nescape sequences.\n.Pp\nIn addition to the escape sequences, path names that end in six or\nmore\n.Em X Ns s\nwill have the\n.Em X Ns s\nreplaced with a unique combination of digits and letters, similar to the\n.Xr mktemp 3\nfunction.\n.Pp\nIf the path created by concatenating\n.Em iolog_dir\nand\n.Em iolog_file\nalready exists, the existing I/O log file will be truncated and\noverwritten unless\n.Em iolog_file\nends in six or\nmore\n.Em X Ns s .\n.It iolog_flush\nIf set,\n.Nm sudo\nwill flush I/O log data to disk after each write instead of buffering it.\nThis makes it possible to view the logs in real-time as the program\nis executing but may significantly reduce the effectiveness of I/O\nlog compression.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It iolog_group\nThe group name to look up when setting the group-ID on new I/O log\nfiles and directories.\nIf\n.Em iolog_group\nis not set,\nthe primary group-ID of the user specified by\n.Em iolog_user\nis used.\nIf neither\n.Em iolog_group\nnor\n.Em iolog_user\nare set, I/O log files and directories are created with group-ID 0.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It iolog_mode\nThe file mode to use when creating I/O log files.\nMode bits for read and write permissions for owner, group, or other\nare honored, everything else is ignored.\nThe file permissions will always include the owner read and\nwrite bits, even if they are not present in the specified mode.\nWhen creating I/O log directories, search (execute) bits are added\nto match the read and write bits specified by\n.Em iolog_mode .\nDefaults to 0600 (read and write by user only).\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It iolog_user\nThe user name to look up when setting the user and group-IDs on new\nI/O log files and directories.\nIf\n.Em iolog_group\nis set, it will be used instead of the user's primary group-ID.\nBy default, I/O log files and directories are created with user and\ngroup-ID 0.\n.Pp\nThis setting can be useful when the I/O logs are stored on a Network\nFile System (NFS) share.\nHaving a dedicated user own the I/O log files means that\n.Nm\ndoes not write to the log files as user-ID 0, which is usually\nnot permitted by NFS.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It lecture_status_dir\nThe directory in which\n.Nm sudo\nstores per-user lecture status files.\nOnce a user has received the lecture, a zero-length file is\ncreated in this directory so that\n.Nm sudo\nwill not lecture the user again.\nThis directory should\n.Em not\nbe cleared when the system reboots.\nThe default is\n.Pa @vardir@/lectured .\n.if \\n(PS \\{\\\n.It limitprivs\nThe default Solaris limit privileges to use when constructing a new\nprivilege set for a command.\nThis bounds all privileges of the executing process.\nThe default limit privileges may be overridden on a per-command basis in\n.Em sudoers .\nThis option is only available if\n.Nm\nis built on Solaris 10 or higher.\n.\\}\n.It log_server_cabundle\nThe path to a certificate authority bundle file, in PEM format,\nto use instead of the system's default certificate authority database\nwhen authenticating the log server.\nThe default is to use the system's default certificate authority database.\nThis setting has no effect unless\n.Em log_servers\nis set and the remote log server is secured with TLS.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_peer_cert\nThe path to the\n.Nm sudo\nclient's certificate file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n.Nm sudo_logsrvd ,\nclient certificate validation is controlled by the\n.Em tls_checkpeer\noption, which defaults to\n.Em false .\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_peer_key\nThe path to the\n.Nm sudo\nclient's private key file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n.Nm sudo_logsrvd ,\nclient certificate validation is controlled by the\n.Em tls_checkpeer\nflag, which defaults to\n.Em false .\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It mailsub\nSubject of the mail sent to the\n.Em mailto\nuser.\nThe escape\n.Ql %h\nwill expand to the host name of the machine.\nDefault is\n.Dq @mailsub@ .\n.It noexec_file\nAs of\n.Nm sudo\nversion 1.8.1 this option is no longer supported.\nThe path to the noexec file should now be set in the\n.Xr sudo.conf @mansectform@\nfile.\n.It pam_askpass_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n.Fl A\noption is specified.\nThe default value is either\n.Ql sudo\nor\n.Ql @pam_login_service@ ,\ndepending on whether or not the\n.Fl i\noption is also specified.\nSee the description of\n.Em pam_service\nfor more information.\n.Pp\nThis setting is only supported by version 1.9.9 or higher.\n.It pam_login_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n.Fl i\noption is specified.\nThe default value is\n.Ql @pam_login_service@ .\nSee the description of\n.Em pam_service\nfor more information.\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It pam_service\nOn systems that use PAM for authentication, the service name\nspecifies the PAM policy to apply.\nThis usually corresponds to an entry in the\n.Pa pam.conf\nfile or a file in the\n.Pa /etc/pam.d\ndirectory.\nThe default value is\n.Ql sudo .\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It passprompt\nThe default prompt to use when asking for a password; can be overridden via the\n.Fl p\noption or the\n.Ev SUDO_PROMPT\nenvironment variable.\nThe following percent\n.Pq Ql %\nescape sequences are supported:\n.Bl -tag -width 4n\n.It %H\nexpanded to the local host name including the domain name\n(only if the machine's host name is fully qualified or the\n.Em fqdn\noption is set)\n.It %h\nexpanded to the local host name without the domain name\n.It %p\nexpanded to the user whose password is being asked for (respects the\n.Em rootpw ,\n.Em targetpw\nand\n.Em runaspw\nflags in\n.Em sudoers )\n.It \\&%U\nexpanded to the login name of the user the command will\nbe run as (defaults to\n.Sy @runas_default@ )\n.It %u\nexpanded to the invoking user's login name\n.It %%\ntwo consecutive\n.Ql %\ncharacters are collapsed into a single\n.Ql %\ncharacter\n.El\n.Pp\nOn systems that use PAM for authentication,\n.Em passprompt\nwill only be used if the prompt provided by the PAM module matches the string\n.Dq \"Password: \"\nor\n.Dq \"username's Password: \" .\nThis ensures that the\n.Em passprompt\nsetting does not interfere with challenge-response style authentication.\nThe\n.Em passprompt_override\nflag can be used to change this behavior.\n.Pp\nThe default value is\n.Ql \"@passprompt@\" .\n.if \\n(PS \\{\\\n.It privs\nThe default Solaris privileges to use when constructing a new\nprivilege set for a command.\nThis is passed to the executing process via the inherited privilege set,\nbut is bounded by the limit privileges.\nIf the\n.Em privs\noption is specified but the\n.Em limitprivs\noption is not, the limit privileges of the executing process is set to\n.Em privs .\nThe default privileges may be overridden on a per-command basis in\n.Em sudoers .\nThis option is only available if\n.Nm\nis built on Solaris 10 or higher.\n.\\}\n.if \\n(SL \\{\\\n.It role\nThe default SELinux role to use when constructing a new security\ncontext to run the command.\nThe default role may be overridden on a per-command basis in the\n.Em sudoers\nfile or via command line options.\nThis option is only available when\n.Nm sudo\nis built with SELinux support.\n.\\}\n.It runas_default\nThe default user to run commands as if the\n.Fl u\noption is not specified on the command line.\nThis defaults to\n.Sy @runas_default@ .\n.It sudoers_locale\nLocale to use when parsing the sudoers file, logging commands, and\nsending email.\nChanging the locale may affect how sudoers is interpreted.\nDefaults to\n.Ql C .\n.It timestamp_type\n.Nm\nuses per-user time stamp files for credential caching.\nThe\n.Em timestamp_type\noption can be used to specify the type of time stamp record used.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It global\nA single time stamp record is used for all of a user's login sessions,\nregardless of the terminal or parent process ID.\nAn additional record is used to serialize password prompts when\n.Nm sudo\nis used multiple times in a pipeline, but this does not affect authentication.\n.It ppid\nA single time stamp record is used for all processes with the same parent\nprocess ID (usually the shell).\nCommands run from the same shell (or other common parent process)\nwill not require a password for\n.Em timestamp_timeout\nminutes (@timeout@ by default).\nCommands run via\n.Nm sudo\nwith a different parent process ID, for example from a shell script,\nwill be authenticated separately.\n.It tty\nOne time stamp record is used for each terminal,\nwhich means that a user's login sessions are authenticated separately.\nIf no terminal is present, the behavior is the same as\n.Em ppid .\nCommands run from the same terminal will not require a password for\n.Em timestamp_timeout\nminutes (@timeout@ by default).\n.It kernel\nThe time stamp is stored in the kernel as an attribute of the terminal\ndevice.\nIf no terminal is present, the behavior is the same as\n.Em ppid .\nNegative\n.Em timestamp_timeout\nvalues are not supported and positive values are limited to a maximum\nof 60 minutes.\nThis is currently only supported on\n.Ox .\n.El\n.Pp\nThe default value is\n.Em @timestamp_type@ .\n.Pp\nThis setting is only supported by version 1.8.21 or higher.\n.It timestampdir\nThe directory in which\n.Nm sudo\nstores its time stamp files.\nThis directory should be cleared when the system reboots.\nThe default is\n.Pa @rundir@/ts .\n.It timestampowner\nThe owner of the lecture status directory, time stamp directory and all\nfiles stored therein.\nThe default is\n.Sy root .\n.if \\n(SL \\{\\\n.It type\nThe default SELinux type to use when constructing a new security\ncontext to run the command.\nThe default type may be overridden on a per-command basis in the\n.Em sudoers\nfile or via command line options.\nThis option is only available when\n.Nm sudo\nis built with SELinux support.\n.\\}\n.El\n.Pp\n.Sy Strings that can be used in a boolean context :\n.Bl -tag -width 12n\n.It admin_flag\nThe\n.Em admin_flag\noption specifies the path to a file that is created the first time\na user that is a member of the\n.Em sudo\nor\n.Em admin\ngroups runs\n.Nm sudo .\nOnly available if\n.Nm sudo\nis configured with the\n.Li --enable-admin-flag\noption.\nThe default value is\n.Pa ~/.sudo_as_admin_successful .\n.It env_file\nThe\n.Em env_file\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n.Ql VARIABLE=value\nor\n.Ql export VARIABLE=value .\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nThis file is considered to be part of the security policy,\nits contents are not subject to other\n.Nm sudo\nenvironment restrictions such as\n.Em env_keep\nand\n.Em env_check .\n.It exempt_group\nUsers in this group are exempt from password and PATH requirements.\nThe group name specified should not include a\n.Ql %\nprefix.\nThis is not set by default.\n.It fdexec\nDetermines whether\n.Nm sudo\nwill execute a command by its path or by an open file descriptor.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It always\nAlways execute by file descriptor.\n.It never\nNever execute by file descriptor.\n.It digest_only\nOnly execute by file descriptor if the command has an associated digest\nin the\n.Em sudoers\nfile.\n.El\n.Pp\nThe default value is\n.Em digest_only .\nThis avoids a time of check versus time of use race condition when\nthe command is located in a directory writable by the invoking user.\n.Pp\n.Em fdexec\nwill change the first element of the argument vector for scripts\n($0 in the shell) due to the way the kernel runs script interpreters.\nInstead of being a normal path, it will refer to a file descriptor.\nFor example,\n.Pa /dev/fd/4\non Solaris and\n.Pa /proc/self/fd/4\non Linux.\nA workaround is to use the\n.Dv SUDO_COMMAND\nenvironment variable instead.\n.Pp\nThe\n.Em fdexec\nsetting is only used when the command is matched by path name.\nIt has no effect if the command is matched by the built-in\n.Sy ALL\nalias.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\nIf the operating system does not support the\n.Xr fexecve 2\nsystem call, this setting has no effect.\n.It group_plugin\nA string containing a\n.Nm\ngroup plugin with optional arguments.\nThe string should consist of the plugin\npath, either fully-qualified or relative to the\n.Pa @plugindir@\ndirectory, followed by any configuration arguments the plugin requires.\nThese arguments (if any) will be passed to the plugin's initialization function.\nIf arguments are present, the string must be enclosed in double quotes\n.Pq \\&\"\" .\n.Pp\nOn 64-bit systems, if the plugin is present but cannot be loaded,\n.Nm\nwill look for a 64-bit version and, if it exists, load that as a fallback.\nThe exact rules for this vary by system.\nOn Solaris, if the plugin is stored in a directory ending in\n.Dq lib ,\n.Nm\nwill create a fallback path by appending\n.Dq /64\nto the directory name;\n.Pa @prefix@/lib/group_plugin.so\nbecomes\n.Pa @prefix@/lib/64/group_plugin.so .\nOn Linux, a directory ending in\n.Dq lib\nwill be transformed to\n.Dq lib64\nas the fallback path;\n.Pa @prefix@/lib/group_plugin.so\nbecomes\n.Pa @prefix@/lib64/group_plugin.so .\nOn all other systems, the fallback path is generated by adding a\n.Dq 64\nbefore the file extension;\n.Pa group_plugin.so\nbecomes\n.Pa group_plugin64.so .\n.Pp\nFor more information see\n.Sx \"GROUP PROVIDER PLUGINS\" .\n.It lecture\nThis option controls when a short lecture will be printed along with\nthe password prompt.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It always\nAlways lecture the user.\n.It never\nNever lecture the user.\n.It once\nOnly lecture the user the first time they run\n.Nm sudo .\n.El\n.Pp\nIf no value is specified, a value of\n.Em once\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em @lecture@ .\n.It lecture_file\nPath to a file containing an alternate\n.Nm sudo\nlecture that will be used in place of the standard lecture if the named\nfile exists.\nBy default,\n.Nm sudo\nuses a built-in lecture.\n.It listpw\nThis option controls when a password will be required when a user runs\n.Nm sudo\nwith the\n.Fl l\noption.\nIt has the following possible values:\n.Bl -tag -width 4n\n.It all\nAll the user's\n.Em sudoers\nfile entries for the current host must have\nthe\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It always\nThe user must always enter a password to use the\n.Fl l\noption.\n.It any\nAt least one of the user's\n.Em sudoers\nfile entries for the current host\nmust have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It never\nThe user need never enter a password to use the\n.Fl l\noption.\n.El\n.Pp\nIf no value is specified, a value of\n.Em any\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em any .\n.It log_format\nThe event log format.\nSupported log formats are:\n.Bl -tag -width 4n\n.It json\nLogs in JSON format.\nJSON log entries contain the full user details as well as the execution\nenvironment if the command was allowed.\nDue to limitations of the protocol, JSON events sent via\n.Em syslog\nmay be truncated.\n.It sudo\nTraditional sudo-style logs, see\n.Sx \"EVENT LOGGING\"\nfor a description of the log file format.\n.El\n.Pp\nThis setting affects logs sent via\n.Xr syslog 3\nas well as the file specified by the\n.Em logfile\nsetting, if any.\nThe default value is\n.Em sudo .\n.It logfile\nPath to the\n.Nm sudo\nlog file (not the syslog log file).\nSetting a path turns on logging to a file;\nnegating this option turns it off.\nBy default,\n.Nm sudo\nlogs via syslog.\n.It mailerflags\nFlags to use when invoking mailer.\nDefaults to\n.Fl t .\n.It mailerpath\nPath to mail program used to send warning mail (negate to prevent\n.Nm sudo\nfrom sending mail).\nDefaults to the path to sendmail found at configure time.\n.It mailfrom\nAddress to use for the\n.Dq from\naddress when sending warning and error mail.\nThe address should be enclosed in double quotes\n.Pq \\&\"\"\nto protect against\n.Nm sudo\ninterpreting the\n.Ql @\nsign.\nDefaults to the name of the user running\n.Nm sudo .\n.It mailto\nAddress to send warning and error mail to (negate to prevent\n.Nm sudo\nfrom sending mail).\nThe address should be enclosed in double quotes\n.Pq \\&\"\"\nto protect against\n.Nm sudo\ninterpreting the\n.Ql @\nsign.\nDefaults to @mailto@.\n.It rlimit_as\nThe maximum size to which the process's address space may grow (in bytes),\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_core\nThe largest size core dump file that may be created (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\nDefaults to 0 (no core dump created).\n.It rlimit_cpu\nThe maximum amount of CPU time that the process may use (in seconds).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_data\nThe maximum size of the data segment for the process (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_fsize\nThe largest size file that the process may create (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_locks\nThe maximum number of locks that the process may establish,\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_memlock\nThe maximum size that the process may lock in memory (in bytes),\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_nofile\nThe maximum number of files that the process may have open.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_nproc\nThe maximum number of processes that the user may run simultaneously.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_rss\nThe maximum size to which the process's resident set size may grow (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_stack\nThe maximum size to which the process's stack may grow (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It restricted_env_file\nThe\n.Em restricted_env_file\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n.Ql VARIABLE=value\nor\n.Ql export VARIABLE=value .\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nUnlike\n.Em env_file ,\nthe file's contents are not trusted and are processed in a manner\nsimilar to that of the invoking user's environment.\nIf\n.Em env_reset\nis enabled, variables in the file will only be added if they are\nmatched by either the\n.Em env_check\nor\n.Em env_keep\nlist.\nIf\n.Em env_reset\nis disabled, variables in the file are added as long as they\nare not matched by the\n.Em env_delete\nlist.\nIn either case, the contents of\n.Em restricted_env_file\nare processed before the contents of\n.Em env_file .\n.It runchroot\nIf set,\n.Nm sudo\nwill use this value for the root directory when running a command.\nThe special value\n.Dq *\nwill allow the user to specify the root directory via\n.Nm sudo Ns 's\n.Fl R\noption.\nSee the\n.Sx Chroot_Spec\nsection for more details.\n.Pp\nIt is only possible to use\n.Em runchroot\nas a command-specific Defaults setting if the command exists with\nthe same path both inside and outside the chroot jail.\nThis restriction does not apply to global, host, or user-based\nDefaults settings or to a\n.Em Cmnd_Spec\nthat includes a\n.Em Chroot_Spec .\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.It runcwd\nIf set,\n.Nm sudo\nwill use this value for the working directory when running a command.\nThe special value\n.Dq *\nwill allow the user to specify the working directory via\n.Nm sudo Ns 's\n.Fl D\noption.\nSee the\n.Sx Chdir_Spec\nsection for more details.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.It secure_path\nIf set,\n.Nm sudo\nwill use this value in place of the user's\n.Ev PATH\nenvironment variable.\nThis option can be used to reset the\n.Ev PATH\nto a known good value that contains directories for system administrator\ncommands such as\n.Pa /usr/sbin .\n.Pp\nUsers in the group specified by the\n.Em exempt_group\noption are not affected by\n.Em secure_path .\nThis option is @secure_path@ by default.\n.It syslog\nSyslog facility if syslog is being used for logging (negate to\ndisable syslog logging).\nDefaults to @logfac@.\n.Pp\nThe following syslog facilities are supported:\n.Sy authpriv\n(if your\nOS supports it),\n.Sy auth ,\n.Sy daemon ,\n.Sy user ,\n.Sy local0 ,\n.Sy local1 ,\n.Sy local2 ,\n.Sy local3 ,\n.Sy local4 ,\n.Sy local5 ,\n.Sy local6 ,\nand\n.Sy local7 .\n.It syslog_badpri\nSyslog priority to use when the user is not allowed to run a command or\nwhen authentication is unsuccessful.\nDefaults to @badpri@.\n.Pp\nThe following syslog priorities are supported:\n.Sy alert ,\n.Sy crit ,\n.Sy debug ,\n.Sy emerg ,\n.Sy err ,\n.Sy info ,\n.Sy notice ,\n.Sy warning ,\nand\n.Sy none .\nNegating the option or setting it to a value of\n.Sy none\nwill disable logging of unsuccessful commands.\n.It syslog_goodpri\nSyslog priority to use when the user is allowed to run a command and\nauthentication is successful.\nDefaults to @goodpri@.\n.Pp\nSee\n.Em syslog_badpri\nfor the list of supported syslog priorities.\nNegating the option or setting it to a value of\n.Sy none\nwill disable logging of successful commands.\n.It verifypw\nThis option controls when a password will be required when a user runs\n.Nm sudo\nwith the\n.Fl v\noption.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It all\nAll the user's\n.Em sudoers\nfile entries for the current host must have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It always\nThe user must always enter a password to use the\n.Fl v\noption.\n.It any\nAt least one of the user's\n.Em sudoers\nfile entries for the current host must have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It never\nThe user need never enter a password to use the\n.Fl v\noption.\n.El\n.Pp\nIf no value is specified, a value of\n.Em all\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em all .\n.El\n.Pp\n.Sy Lists that can be used in a boolean context :\n.Bl -tag -width 16n\n.It env_check\nEnvironment variables to be removed from the user's environment\nunless they are considered\n.Dq safe .\nFor all variables except\n.Ev TZ ,\n.Dq safe\nmeans that the variable's value does not contain any\n.Ql %\nor\n.Ql /\ncharacters.\nThis can be used to guard against printf-style format vulnerabilities\nin poorly-written programs.\nThe\n.Ev TZ\nvariable is considered unsafe if any of the following are true:\n.Bl -bullet -width 1n\n.It\nIt consists of a fully-qualified path name,\noptionally prefixed with a colon\n.Pq Ql :\\& ,\nthat does not match the location of the\n.Pa zoneinfo\ndirectory.\n.It\nIt contains a\n.Pa ..\npath element.\n.It\nIt contains white space or non-printable characters.\n.It\nIt is longer than the value of\n.Dv PATH_MAX .\n.El\n.Pp\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using\nthe\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nRegardless of whether the\n.Em env_reset\noption is enabled or disabled, variables specified by\n.Em env_check\nwill be preserved in the environment if they pass the aforementioned check.\nThe global list of environment variables to check is displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\n.It env_delete\nEnvironment variables to be removed from the user's environment when the\n.Em env_reset\noption is not in effect.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nThe global list of environment variables to remove is displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nMany operating systems will remove potentially dangerous variables\nfrom the environment of any set-user-ID process (such as\n.Nm sudo ) .\n.It env_keep\nEnvironment variables to be preserved in the user's environment when the\n.Em env_reset\noption is in effect.\nThis allows fine-grained control over the environment\n.Nm sudo Ns -spawned\nprocesses will receive.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nThe global list of variables to keep\nis displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\n.Pp\nPreserving the\n.Ev HOME\nenvironment variable has security implications since many programs use it\nwhen searching for configuration or data files.\nAdding\n.Ev HOME\nto\n.Em env_keep\nmay enable a user to run unrestricted commands via\n.Nm sudo\nand is strongly discouraged.\nUsers wishing to edit files with\n.Nm sudo\nshould run\n.Nm sudoedit\n(or\n.Nm sudo Fl e )\nto get their accustomed editor configuration instead of\ninvoking the editor directly.\n.It log_servers\nA list of one or more servers to use for remote event and I/O log storage,\nseparated by white space.\nLog servers must be running\n.Nm sudo_logsrvd\nor another service that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Pp\nServer addresses should be of the form\n.Dq host Ns Oo : Ns port Oc Ns Op (tls) .\nThe host portion may be a host name, an IPv4 address, or an IPv6 address\nin square brackets.\n.Pp\nIf the optional\n.Em tls\nflag is present, the connection will be secured\nwith Transport Layer Security (TLS) version 1.2 or 1.3.\nVersions of TLS prior to 1.2 are not supported.\n.Pp\nIf a port is specified, it may either be a port number or a well-known\nservice name as defined by the system service name database.\nIf no port is specified, port 30343 will be used for plaintext\nconnections and port 30344 will be used for TLS connections.\n.Pp\nWhen\n.Em log_servers\nis set, event log data will be logged both locally (see the\n.Em syslog\nand\n.Em log_file\nsettings) as well as remotely, but I/O log data will only be logged remotely.\nIf multiple hosts are specified, they will be attempted in reverse order.\nIf no log servers are available, the user will not be able to run\na command unless either the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\nLikewise, if the connection to the log server is interrupted while\n.Nm sudo\nis running, the command will be terminated unless the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It passprompt_regex\nA list of POSIX extended regular expressions used to\nmatch password prompts in the terminal output.\nAs an extension, if the regular expression begins with\n.Dq (?i) ,\nit will be matched in a case-insensitive manner.\nEach regular expression is limited to 1024 characters.\nThis option is only used when\n.Em log_passwords\nhas been disabled.\nThe default value is\n.Dq [Pp]assword[: ]*\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.El\n.Sh GROUP PROVIDER PLUGINS\nThe\n.Nm\nplugin supports its own plugin interface to allow non-Unix\ngroup lookups which can query a group source other\nthan the standard Unix group database.\nThis can be used to implement support for the\n.Em nonunix_group\nsyntax described earlier.\n.Pp\nGroup provider plugins are specified via the\n.Em group_plugin\nsetting.\nThe argument to\n.Em group_plugin\nshould consist of the plugin path, either fully-qualified or relative to the\n.Pa @plugindir@\ndirectory, followed by any configuration options the plugin requires.\nThese options (if specified) will be passed to the plugin's initialization\nfunction.\nIf options are present, the string must be enclosed in double quotes\n.Pq \\&\"\" .\n.Pp\nThe following group provider plugins are installed by default:\n.Bl -tag -width 4n\n.It group_file\nThe\n.Em group_file\nplugin supports an alternate group file that uses the same syntax as the\n.Pa /etc/group\nfile.\nThe path to the group file should be specified as an option\nto the plugin.\nFor example, if the group file to be used is\n.Pa /etc/sudo-group :\n.Bd -literal\nDefaults group_plugin=\"group_file.so /etc/sudo-group\"\n.Ed\n.It system_group\nThe\n.Em system_group\nplugin supports group lookups via the standard C library functions\n.Xr getgrnam 3\nand\n.Xr getgrid 3 .\nThis plugin can be used in instances where the user belongs to\ngroups not present in the user's supplemental group vector.\nThis plugin takes no options:\n.Bd -literal\nDefaults group_plugin=system_group.so\n.Ed\n.El\n.Pp\nThe group provider plugin API is described in detail in\n.Xr sudo_plugin @mansectform@ .\n.Sh EVENT LOGGING\n.Nm\ncan log events in either JSON or\n.Em sudo\nformat,\nthis section describes the\n.Em sudo\nlog format.\nDepending on\n.Em sudoers\nconfiguration,\n.Nm\ncan log events via\n.Xr syslog 3 ,\nto a local log file, or both.\nThe log format is almost identical in both cases.\n.Ss Accepted command log entries\nCommands that sudo runs are logged using the following format (split\ninto multiple lines for readability):\n.Bd -literal -offset 4n\ndate hostname progname: username : TTY=ttyname ; PWD=cwd ; \\e\n    USER=runasuser ; GROUP=runasgroup ; TSID=logid ; \\e\n    ENV=env_vars COMMAND=command\n.Ed\n.Pp\nWhere the fields are as follows:\n.Bl -tag -width 12n\n.It date\nThe date the command was run.\nTypically, this is in the format\n.Dq MMM, DD, HH:MM:SS .\nIf logging via\n.Xr syslog 3 ,\nthe actual date format is controlled by the syslog daemon.\nIf logging to a file and the\n.Em log_year\noption is enabled,\nthe date will also include the year.\n.It hostname\nThe name of the host\n.Nm sudo\nwas run on.\nThis field is only present when logging via\n.Xr syslog 3 .\n.It progname\nThe name of the program, usually\n.Em sudo\nor\n.Em sudoedit .\nThis field is only present when logging via\n.Xr syslog 3 .\n.It username\nThe login name of the user who ran\n.Nm sudo .\n.It ttyname\nThe short name of the terminal (e.g.,\n.Dq console ,\n.Dq tty01 ,\nor\n.Dq pts/0 )\n.Nm sudo\nwas run on, or\n.Dq unknown\nif there was no terminal present.\n.It cwd\nThe current working directory that\n.Nm sudo\nwas run in.\n.It runasuser\nThe user the command was run as.\n.It runasgroup\nThe group the command was run as if one was specified on the command line.\n.It logid\nAn I/O log identifier that can be used to replay the command's output.\nThis is only present when the\n.Em log_input\nor\n.Em log_output\noption is enabled.\n.It env_vars\nA list of environment variables specified on the command line,\nif specified.\n.It command\nThe actual command that was executed.\n.El\n.Pp\nMessages are logged using the locale specified by\n.Em sudoers_locale ,\nwhich defaults to the\n.Ql C\nlocale.\n.Ss Denied command log entries\nIf the user is not allowed to run the command, the reason for the denial\nwill follow the user name.\nPossible reasons include:\n.Bl -tag -width 4\n.It user NOT in sudoers\nThe user is not listed in the\n.Em sudoers\nfile.\n.It user NOT authorized on host\nThe user is listed in the\n.Em sudoers\nfile but is not allowed to run commands on the host.\n.It command not allowed\nThe user is listed in the\n.Em sudoers\nfile for the host but they are not allowed to run the specified command.\n.It 3 incorrect password attempts\nThe user failed to enter their password after 3 tries.\nThe actual number of tries will vary based on the number of\nfailed attempts and the value of the\n.Em passwd_tries\noption.\n.It a password is required\nThe\n.Fl n\noption was specified but a password was required.\n.It sorry, you are not allowed to set the following environment variables\nThe user specified environment variables on the command line that\nwere not allowed by\n.Em sudoers .\n.El\n.Ss Error log entries\nIf an error occurs,\n.Nm\nwill log a message and, in most cases, send a message to the\nadministrator via email.\nPossible errors include:\n.Bl -tag -width 4\n.It parse error in @sysconfdir@/sudoers near line N\n.Nm\nencountered an error when parsing the specified file.\nIn some cases, the actual error may be one line above or below the\nline number listed, depending on the type of error.\n.It problem with defaults entries\nThe\n.Em sudoers\nfile contains one or more unknown Defaults settings.\nThis does not prevent\n.Nm sudo\nfrom running, but the\n.Em sudoers\nfile should be checked using\n.Nm visudo .\n.It timestamp owner (username): \\&No such user\nThe time stamp directory owner, as specified by the\n.Em timestampowner\nsetting, could not be found in the password database.\n.It unable to open/read @sysconfdir@/sudoers\nThe\n.Em sudoers\nfile could not be opened for reading.\nThis can happen when the\n.Em sudoers\nfile is located on a remote file system that maps user-ID 0 to\na different value.\nNormally,\n.Nm\ntries to open the\n.Em sudoers\nfile using group permissions to avoid this problem.\nConsider either changing the ownership of\n.Pa @sysconfdir@/sudoers\nor adding an argument like\n.Dq sudoers_uid=N\n(where\n.Sq N\nis the user-ID that owns the\n.Em sudoers\nfile) to the end of the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It unable to open @sysconfdir@/sudoers\nThe\n.Pa @sysconfdir@/sudoers\nfile is missing.\n.It @sysconfdir@/sudoers is not a regular file\nThe\n.Pa @sysconfdir@/sudoers\nfile exists but is not a regular file or symbolic link.\n.It @sysconfdir@/sudoers is owned by uid N, should be 0\nThe\n.Em sudoers\nfile has the wrong owner.\nIf you wish to change the\n.Em sudoers\nfile owner, add\n.Dq sudoers_uid=N\n(where\n.Sq N\nis the user-ID that owns the\n.Em sudoers\nfile) to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It @sysconfdir@/sudoers is world writable\nThe permissions on the\n.Em sudoers\nfile allow all users to write to it.\nThe\n.Em sudoers\nfile must not be world-writable, the default file mode\nis 0440 (readable by owner and group, writable by none).\nThe default mode may be changed via the\n.Dq sudoers_mode\noption to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It @sysconfdir@/sudoers is owned by gid N, should be 1\nThe\n.Em sudoers\nfile has the wrong group ownership.\nIf you wish to change the\n.Em sudoers\nfile group ownership, add\n.Dq sudoers_gid=N\n(where\n.Sq N\nis the group-ID that owns the\n.Em sudoers\nfile) to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It unable to open @rundir@/ts/username\n.Nm\nwas unable to read or create the user's time stamp file.\nThis can happen when\n.Em timestampowner\nis set to a user other than\n.Sy root\nand the mode on\n.Pa @rundir@\nis not searchable by group or other.\nThe default mode for\n.Pa @rundir@\nis 0711.\n.It unable to write to @rundir@/ts/username\n.Nm\nwas unable to write to the user's time stamp file.\n.It @rundir@/ts is owned by uid X, should be Y\nThe time stamp directory is owned by a user other than\n.Em timestampowner .\nThis can occur when the value of\n.Em timestampowner\nhas been changed.\n.Nm\nwill ignore the time stamp directory until the owner is corrected.\n.It @rundir@/ts is group writable\nThe time stamp directory is group-writable; it should be writable only by\n.Em timestampowner .\nThe default mode for the time stamp directory is 0700.\n.Nm\nwill ignore the time stamp directory until the mode is corrected.\n.El\n.Ss Notes on logging via syslog\nBy default,\n.Nm\nlogs messages via\n.Xr syslog 3 .\nThe\n.Em date ,\n.Em hostname ,\nand\n.Em progname\nfields are added by the system's\n.Xr syslog 3\nfunction, not\n.Nm\nitself.\nAs such, they may vary in format on different systems.\n.Pp\nThe maximum size of syslog messages varies from system to system.\nThe\n.Em syslog_maxlen\nsetting can be used to change the maximum syslog message size\nfrom the default value of 980 bytes.\nFor more information, see the description of\n.Em syslog_maxlen .\n.Ss Notes on logging to a file\nIf the\n.Em logfile\noption is set,\n.Nm\nwill log to a local file, such as\n.Pa @log_dir@/sudo .\nWhen logging to a file,\n.Nm\nuses a format similar to\n.Xr syslog 3 ,\nwith a few important differences:\n.Bl -enum\n.It\nThe\n.Em progname\nand\n.Em hostname\nfields are not present.\n.It\nIf the\n.Em log_year\noption is enabled,\nthe date will also include the year.\n.It\nLines that are longer than\n.Em loglinelen\ncharacters (80 by default) are word-wrapped and continued on the\nnext line with a four character indent.\nThis makes entries easier to read for a human being, but makes it\nmore difficult to use\n.Xr grep 1\non the log files.\nIf the\n.Em loglinelen\noption is set to 0 (or negated with a\n.Ql \\&! ) ,\nword wrap will be disabled.\n.El\n.Sh I/O LOGGING\nWhen I/O logging is enabled,\n.Nm sudo\nwill runs the command in a pseudo-terminal, logging user input\nand/or output, depending on which\n.Nm\nflags are enabled.\nThere are five distinct types of I/O that can be logged, each with\na corresponding\n.Nm\nflag.\n.Bl -column \"standard output\" \"log_output\" \"command output displayed to the screen\"\n.It Sy Type Ta Sy Flag Ta Sy Description\n.It terminal input Ta log_ttyin Ta keystrokes entered by the user\n.It terminal output Ta log_ttyout Ta command output displayed to the screen\n.It standard input Ta log_stdin Ta input from a pipe or a file\n.It standard output Ta log_stdout Ta output to a pipe or a file\n.It standard error Ta log_stderr Ta output to a pipe or a file\n.El\n.Pp\nIn addition to flags described the above, the\n.Em log_input\nflag and\n.Dv LOG_INPUT\ncommand tag set both\n.Em log_ttyin\nand\n.Em log_stdin .\nThe\n.Em log_output\nflag and\n.Dv LOG_OUTPUT\ncommand tag set\n.Em log_ttyout ,\n.Em log_stdout ,\nand\n.Em log_stderr .\n.Pp\nTo capture terminal input and output,\n.Nm sudo\nrun the command in a pseudo-terminal, logging the input and\noutput before passing it on to the user.\nTo capture the standard input, standard output or standard error,\n.Nm sudo\nuses a pipe to interpose itself between the input or output stream,\nlogging the I/O before passing it to the other end of the pipe.\n.Pp\nI/O can be logged either to the local machine or to a remote log server.\nFor local logs, I/O is logged to the directory specified by the\n.Em iolog_dir\noption\n.Po\n.Pa @iolog_dir@\nby default\n.Pc\nusing a unique session ID that is included in the\n.Nm sudo\nlog line, prefixed with\n.Ql TSID= .\nThe\n.Em iolog_file\noption may be used to control the format of the session ID.\nFor remote logs, the\n.Em log_servers\nsetting is used to specify one or more log servers running\n.Nm sudo_logsrvd\nor another server that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Ss I/O logging pitfals\nWhen logging standard input, anything sent to the standard input\nwill be consumed, regardless of whether or not the command run via\n.Nm sudo\nis actively reading the standard input.\nThis may have unexpected results when using\n.Nm sudo\nin a shell script that expects to process the standard input.\nFor example, given the following shell script:\n.Bd -literal -offset 4n\n#!/bin/sh\nsudo echo testing\necho done\n.Ed\n.Pp\nIt will behave as expected when the script is passed to the shell as a\nan argument:\n.Bd -literal -offset 4n\n$ sh test.sh\ntesting\ndone\n.Ed\n.Pp\nHowever, if the script is passed to the shell on the standard input, the\n.Ql sudo echo testing\ncommand will consume the rest of the script.\nThis means that the\n.Ql echo done\nstatement is never executed.\n.Bd -literal -offset 4n\n$ sh -s < test.sh\ntesting\n.Ed\n.Pp\nThere are several ways to work around this problem:\n.Bl -enum\n.It\nRedirect the standard input from\n.Pa /dev/null\nwhen running a command via\n.Nm sudo\nthat does not need to read the standard input.\n.Bd -literal -offset 4n\nsudo echo testing < /dev/null\n.Ed\n.It\nPass the script to the shell by path name instead of via the standard input.\n.Bd -literal -offset 4n\nsh test.sh\n.Ed\n.It\nDisable logging the standard input for commands that do not need\nto read the standard input.\n.Bd -literal -offset 4n\nDefaults!/bin/echo !log_stdin\n.Ed\n.El\n.Pp\nDepending on the command, it may not be desirable to log the\nstandard input or standard output.\nFor example, I/O logging of commands that send or receive large\namount of data via the standard output or standard input such as\n.Xr rsync 1\nand\n.Xr tar 1\ncould fill up the log file system with superfluous data.\nIt is possible to disable logging of the standard input and standard\noutput for such commands as follows:\n.Bd -literal -offset 4n\nCmnd_Alias COPY_CMDS = /usr/bin/tar, /usr/bin/cpio, /usr/bin/rsync\n\n# Log input and output but omit stdin and stdout when copying files.\nDefaults log_input, log_output\nDefaults!COPY_CMDS !log_stdin, !log_stdout\n.Ed\n.Pp\nHowever, be aware that using the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag will also enable\n.Em log_stdin .\nLikewise, the\n.Em log_ouput\nflag or the\n.Dv LOG_OUTPUT\ncommand tag will enable\n.Em log_stdout\nand\n.Em log_stderr.\nCareful ordering of rules may be necessary to achieve the results\nthat you expect.\n.Ss I/O log format\nFor both local and remote I/O logs, each log is stored in a separate\ndirectory that contains the following files:\n.Bl -tag -width \"log.json\"\n.It Pa log\nA text file containing information about the command.\nThe first line consists of the following colon-delimited fields:\nthe time the command was run, the name of the user\nwho ran\n.Nm sudo ,\nthe name of the target user, the name of the target group (optional),\nthe terminal that\n.Nm sudo\nwas run from, and the number of lines and columns of the terminal.\nThe second and third lines contain the working directory the command\nwas run from and the path name of the command itself (with arguments\nif present).\n.It Pa log.json\nA JSON-formatted file containing information about the command.\nThis is similar to the\n.Pa log\nfile but contains additional information and is easily extensible.\nThe\n.Pa log.json\nfile will be used by\n.Xr sudoreplay @mansectsu@\nin preference to the\n.Pa log\nfile if it exists.\nThe file may contain the following elements:\n.Bl -tag -width 4n\n.It timestamp\nA JSON object containing time the command was run.\nIt consists of two values,\n.Em seconds\nand\n.Em nanoseconds .\n.It columns\nThe number of columns of the terminal the command ran on, or zero\nif no terminal was present.\n.It command\nThe fully-qualified path of the command that was run.\n.It lines\nThe number of lines of the terminal the command ran on, or zero\nif no terminal was present.\n.It runargv\nA JSON array representing the command's argument vector as passed to the\n.Xr execve 2\nsystem call.\n.It runenv\nA JSON array representing the command's environment as passed to the\n.Xr execve 2\nsystem call.\n.It rungid\nThe group ID the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.It rungroup\nThe name of the group the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.It runuid\nThe user ID the command ran as.\n.It runuser\nThe name of the user the command ran as.\n.It submitcwd\nThe current working directory at the time\n.Nm sudo\nwas run.\n.It submithost\nThe name of the host the command was run on.\n.It submituser\nThe name of the user who ran the command via\n.Nm sudo .\n.It ttyname\nThe path name of the terminal the user invoked\n.Nm sudo\nfrom.\nIf the command was run in a pseudo-terminal,\n.Em ttyname\nwill be different from the terminal the command actually ran in.\n.El\n.It Pa timing\nTiming information used to replay the session.\nEach line consists of the I/O log entry type and amount of time\nsince the last entry, followed by type-specific data.\nThe I/O log entry types and their corresponding type-specific data are:\n.Pp\n.Bl -tag -width 4n -compact\n.It 0\nstandard input, number of bytes in the entry\n.It 1\nstandard output, number of bytes in the entry\n.It 2\nstandard error, number of bytes in the entry\n.It 3\nterminal input, number of bytes in the entry\n.It 4\nterminal output, number of bytes in the entry\n.It 5\nwindow change, new number lines and columns\n.It 6\nbug compatibility for\n.Nm sudo\n1.8.7 terminal output\n.It 7\ncommand suspend or resume, signal received\n.El\n.It Pa ttyin\nRaw input from the user's terminal, exactly as it was received.\nThis file is only present if the\n.Em log_input\nor\n.Em log_ttyin\nflags are set and\n.Nm sudo\nwas run from a terminal.\nNo post-processing is performed.\nFor manual viewing, you may wish to convert carriage return characters\nin the log to line feeds.\nFor example:\n.Ql gunzip -c ttyin | tr \\&\"\\er\\&\" \\&\"\\en\\&\"\n.It Pa stdin\nThe standard input when no terminal is present, or input redirected from\na pipe or file.\nThis file is only present if the\n.Em log_input\nor\n.Em log_stdin\nflags are set and the standard input is not connected to a terminal.\n.It Pa ttyout\nOutput from the pseudo-terminal (what the command writes to the screen).\nTerminal-specific post-processing is performed before the data is logged.\nThis means that, for example, line feeds are usually converted to\nline feed/carriage return pairs and tabs may be expanded to spaces.\nThis file is only present if the\n.Em log_output\nor\n.Em log_ttyout\nflags are set and\n.Nm sudo\nwas run from a terminal.\n.It Pa stdout\nThe standard output when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n.Em log_output\nor\n.Em log_stdout\nflags are set and the standard output is not connected to a terminal.\n.It Pa stderr\nThe standard error when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n.Em log_output\nor\n.Em log_stderr\nflags are set and the standard error is not connected to a terminal.\n.El\n.Pp\nAll files other than\n.Pa log\nare compressed in gzip format unless the\n.Em compress_io\nflag has been disabled.\nDue to buffering, it is not normally possible to display the I/O logs in\nreal-time as the program is executing.\nThe I/O log data will not be complete until the program run by\n.Nm sudo\nhas exited or has been terminated by a signal.\nThe\n.Em iolog_flush\nflag can be used to disable buffering, in which case I/O log data\nis written to disk as soon as it is available.\nThe output portion of an I/O log file can be viewed with the\n.Xr sudoreplay @mansectsu@\nutility, which can also be used to list or search the available logs.\n.Pp\nUser input may contain sensitive information such as passwords (even\nif they are not echoed to the screen), which will be stored in the\nlog file unencrypted.\nIn most cases, logging the command output via\n.Em log_output\nor\n.Dv LOG_OUTPUT\nis all that is required.\nWhen logging input, consider disabling the\n.Em log_passwords\nflag.\n.Pp\nSince each session's I/O logs are stored in a separate directory,\ntraditional log rotation utilities cannot be used to limit the\nnumber of I/O logs.\nThe simplest way to limit the number of I/O is by setting the\n.Em maxseq\noption to the maximum number of logs you wish to store.\nOnce the I/O log sequence number reaches\n.Em maxseq ,\nit will be reset to zero and\n.Nm\nwill truncate and re-use any existing I/O logs.\n.Sh FILES\n.Bl -tag -width 24n\n.It Pa @sysconfdir@/sudo.conf\nSudo front-end configuration\n.It Pa @sysconfdir@/sudoers\nList of who can run what\n.It Pa /etc/group\nLocal groups file\n.It Pa /etc/netgroup\nList of network groups\n.It Pa @iolog_dir@\nI/O log files\n.It Pa @rundir@/ts\nDirectory containing time stamps for the\n.Nm\nsecurity policy\n.It Pa @vardir@/lectured\nDirectory containing lecture status files for the\n.Nm\nsecurity policy\n.It Pa /etc/environment\nInitial environment for\n.Fl i\nmode on AIX and Linux systems\n.El\n.Sh EXAMPLES\nBelow are example\n.Em sudoers\nfile entries.\nAdmittedly, some of these are a bit contrived.\nFirst, we allow a few environment variables to pass and then define our\n.Em aliases :\n.Bd -literal\n# Run X applications through sudo; HOME is used to find the\n# .Xauthority file.  Other programs use HOME to locate configuration\n# files and this may lead to privilege escalation!\nDefaults env_keep += \"DISPLAY HOME\"\n\n# User alias specification\nUser_Alias\tFULLTIMERS = millert, mikef, dowdy\nUser_Alias\tPARTTIMERS = bostley, jwfox, crawl\nUser_Alias\tWEBADMIN = will, wendy, wim\n\n# Runas alias specification\nRunas_Alias\tOP = root, operator\nRunas_Alias\tDB = oracle, sybase\nRunas_Alias\tADMINGRP = adm, oper\n\n# Host alias specification\nHost_Alias\tSPARC = bigtime, eclipse, moet, anchor :\\e\n\t\tSGI = grolsch, dandelion, black :\\e\n\t\tALPHA = widget, thalamus, foobar :\\e\n\t\tHPPA = boa, nag, python\nHost_Alias\tCUNETS = 128.138.0.0/255.255.0.0\nHost_Alias\tCSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0\nHost_Alias\tSERVERS = primary, mail, www, ns\nHost_Alias\tCDROM = orion, perseus, hercules\n\n# Cmnd alias specification\nCmnd_Alias\tDUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\\e\n\t\t\t/usr/sbin/restore, /usr/sbin/rrestore,\\e\n\t\t\tsha224:0GomF8mNN3wlDt1HD9XldjJ3SNgpFdbjO1+NsQ== \\e\n\t\t\t/home/operator/bin/start_backups\nCmnd_Alias\tKILL = /usr/bin/kill\nCmnd_Alias\tPRINTING = /usr/sbin/lpc, /usr/bin/lprm\nCmnd_Alias\tSHUTDOWN = /usr/sbin/shutdown\nCmnd_Alias\tHALT = /usr/sbin/halt\nCmnd_Alias\tREBOOT = /usr/sbin/reboot\nCmnd_Alias\tSHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\\e\n\t\t\t /usr/local/bin/tcsh, /usr/bin/rsh,\\e\n\t\t\t /usr/local/bin/zsh\nCmnd_Alias\tSU = /usr/bin/su\nCmnd_Alias\tPAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less\n.Ed\n.Pp\nHere we override some of the compiled in default values.\nWe want\n.Nm sudo\nto log via\n.Xr syslog 3\nusing the\n.Em auth\nfacility in all cases and for commands to be run with\nthe target user's home directory as the working directory.\nWe don't want to subject the full time staff to the\n.Nm sudo\nlecture and we want to allow them to run commands in a\n.Xr chroot 2\n.Dq sandbox\nvia the\n.Fl R\noption.\nUser\n.Sy millert\nneed not provide a password and we don't want to reset the\n.Ev LOGNAME\nor\n.Ev USER\nenvironment variables when running commands as\n.Sy root .\nAdditionally, on the machines in the\n.Dv SERVERS\n.Em Host_Alias ,\nwe keep an additional local log file and make sure we log the year\nin each log line since the log entries will be kept around for several years.\nLastly, we disable shell escapes for the commands in the PAGERS\n.Em Cmnd_Alias\n.Po\n.Pa /usr/bin/more ,\n.Pa /usr/bin/pg\nand\n.Pa /usr/bin/less\n.Pc .\nThis will not effectively constrain users with\n.Nm sudo\n.Sy ALL\nprivileges.\n.Bd -literal\n# Override built-in defaults\nDefaults\t\tsyslog=auth,runcwd=~\nDefaults>root\t\t!set_logname\nDefaults:FULLTIMERS\t!lecture,runchroot=*\nDefaults:millert\t!authenticate\nDefaults@SERVERS\tlog_year, logfile=@log_dir@/sudo.log\nDefaults!PAGERS\t\tnoexec\n.Ed\n.Pp\nThe\n.Em User specification\nis the part that actually determines who may run what.\n.Bd -literal\nroot\t\tALL = (ALL) ALL\n%wheel\t\tALL = (ALL) ALL\n.Ed\n.Pp\nWe let\n.Sy root\nand any user in group\n.Sy wheel\nrun any command on any host as any user.\n.Bd -literal\nFULLTIMERS\tALL = NOPASSWD: ALL\n.Ed\n.Pp\nFull time sysadmins\n.Po\n.Sy millert ,\n.Sy mikef ,\nand\n.Sy dowdy\n.Pc\nmay run any command on any host without authenticating themselves.\n.Bd -literal\nPARTTIMERS\tALL = ALL\n.Ed\n.Pp\nPart time sysadmins\n.Sy bostley ,\n.Sy jwfox ,\nand\n.Sy crawl )\nmay run any command on any host but they must authenticate themselves\nfirst (since the entry lacks the\n.Dv NOPASSWD\ntag).\n.Bd -literal\njack\t\tCSNETS = ALL\n.Ed\n.Pp\nThe user\n.Sy jack\nmay run any command on the machines in the\n.Dv CSNETS\nalias (the networks 128.138.243.0, 128.138.204.0, and 128.138.242.0).\nOf those networks, only 128.138.204.0 has an explicit netmask (in\nCIDR notation) indicating it is a class C network.\nFor the other networks in\n.Dv CSNETS ,\nthe local machine's netmask will be used during matching.\n.Bd -literal\nlisa\t\tCUNETS = ALL\n.Ed\n.Pp\nThe user\n.Sy lisa\nmay run any command on any host in the\n.Dv CUNETS\nalias (the class B network 128.138.0.0).\n.Bd -literal\noperator\tALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\\e\n\t\tsudoedit /etc/printcap, /usr/oper/bin/\n.Ed\n.Pp\nThe\n.Sy operator\nuser may run commands limited to simple maintenance.\nHere, those are commands related to backups, killing processes, the\nprinting system, shutting down the system, and any commands in the\ndirectory\n.Pa /usr/oper/bin/ .\nOne command in the\n.Dv DUMPS\nCmnd_Alias includes a sha224 digest,\n.Pa /home/operator/bin/start_backups .\nThis is because the directory containing the script is writable by the\noperator user.\nIf the script is modified (resulting in a digest mismatch) it will no longer\nbe possible to run it via\n.Nm sudo .\n.Bd -literal\njoe\t\tALL = /usr/bin/su operator\n.Ed\n.Pp\nThe user\n.Sy joe\nmay only\n.Xr su 1\nto operator.\n.Bd -literal\npete\t\tHPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd *root*\n\n%opers\t\tALL = (: ADMINGRP) /usr/sbin/\n.Ed\n.Pp\nUsers in the\n.Sy opers\ngroup may run commands in\n.Pa /usr/sbin/\nas themselves\nwith any group in the\n.Dv ADMINGRP\n.Em Runas_Alias\n(the\n.Sy adm\nand\n.Sy oper\ngroups).\n.Pp\nThe user\n.Sy pete\nis allowed to change anyone's password except for\n.Sy root\non the\n.Dv HPPA\nmachines.\nBecause command line arguments are matched as a single,\nconcatenated string, the\n.Ql *\nwildcard will match\n.Em multiple\nwords.\nThis example assumes that\n.Xr passwd 1\ndoes not take multiple user names on the command line.\nOn systems with GNU\n.Xr getopt 3 ,\noptions to\n.Xr passwd 1\nmay be specified after the user argument.\nAs a result, this rule will also allow:\n.Bd -literal -offset 4n\npasswd username --expire\n.Ed\n.Pp\nwhich may not be desirable.\n.Bd -literal\nbob\t\tSPARC = (OP) ALL : SGI = (OP) ALL\n.Ed\n.Pp\nThe user\n.Sy bob\nmay run anything on the\n.Dv SPARC\nand\n.Dv SGI\nmachines as any user listed in the\n.Dv OP\n.Em Runas_Alias\n.Po\n.Sy root\nand\n.Sy operator .\n.Pc\n.Bd -literal\njim\t\t+biglab = ALL\n.Ed\n.Pp\nThe user\n.Sy jim\nmay run any command on machines in the\n.Em biglab\nnetgroup.\n.Nm sudo\nknows that\n.Dq biglab\nis a netgroup due to the\n.Ql +\nprefix.\n.Bd -literal\n+secretaries\tALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser\n.Ed\n.Pp\nUsers in the\n.Sy secretaries\nnetgroup need to help manage the printers as well as add and remove users,\nso they are allowed to run those commands on all machines.\n.Bd -literal\nfred\t\tALL = (DB) NOPASSWD: ALL\n.Ed\n.Pp\nThe user\n.Sy fred\ncan run commands as any user in the\n.Dv DB\n.Em Runas_Alias\n.Po\n.Sy oracle\nor\n.Sy sybase\n.Pc\nwithout giving a password.\n.Bd -literal\njohn\t\tALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*\n.Ed\n.Pp\nOn the\n.Dv ALPHA\nmachines, user\n.Sy john\nmay su to anyone except\n.Sy root\nbut he is not allowed to specify any options to the\n.Xr su 1\ncommand.\n.Bd -literal\njen\t\tALL, !SERVERS = ALL\n.Ed\n.Pp\nThe user\n.Sy jen\nmay run any command on any machine except for those in the\n.Dv SERVERS\n.Em Host_Alias\n(primary, mail, www, and ns).\n.Bd -literal\njill\t\tSERVERS = /usr/bin/, !SU, !SHELLS\n.Ed\n.Pp\nFor any machine in the\n.Dv SERVERS\n.Em Host_Alias ,\n.Sy jill\nmay run\nany commands in the directory\n.Pa /usr/bin/\nexcept for those commands\nbelonging to the\n.Dv SU\nand\n.Dv SHELLS\n.Em Cmnd_Aliases .\nWhile not specifically mentioned in the rule, the commands in the\n.Dv PAGERS\n.Em Cmnd_Alias\nall reside in\n.Pa /usr/bin\nand have the\n.Em noexec\noption set.\n.Bd -literal\nsteve\t\tCSNETS = (operator) /usr/local/op_commands/\n.Ed\n.Pp\nThe user\n.Sy steve\nmay run any command in the directory /usr/local/op_commands/\nbut only as user operator.\n.Bd -literal\nmatt\t\tvalkyrie = KILL\n.Ed\n.Pp\nOn his personal workstation, valkyrie,\n.Sy matt\nneeds to be able to kill hung processes.\n.Bd -literal\nWEBADMIN\twww = (www) ALL, (root) /usr/bin/su www\n.Ed\n.Pp\nOn the host www, any user in the\n.Dv WEBADMIN\n.Em User_Alias\n(will, wendy, and wim), may run any command as user www (which owns the\nweb pages) or simply\n.Xr su 1\nto www.\n.Bd -literal\nALL\t\tCDROM = NOPASSWD: /sbin/umount /CDROM,\\e\n\t\t/sbin/mount -o nosuid\\e,nodev /dev/cd0a /CDROM\n.Ed\n.Pp\nAny user may mount or unmount a CD-ROM on the machines in the CDROM\n.Em Host_Alias\n(orion, perseus, hercules) without entering a password.\nThis is a bit tedious for users to type, so it is a prime candidate\nfor encapsulating in a shell script.\n.Sh SECURITY NOTES\n.Ss Limitations of the So !\\& Sc operator\nIt is generally not effective to\n.Dq subtract\ncommands from\n.Sy ALL\nusing the\n.Ql !\\&\noperator.\nA user can trivially circumvent this by copying the desired command\nto a different name and then executing that.\nFor example:\n.Bd -literal\nbill\tALL = ALL, !SU, !SHELLS\n.Ed\n.Pp\nDoesn't really prevent\n.Sy bill\nfrom running the commands listed in\n.Dv SU\nor\n.Dv SHELLS\nsince he can simply copy those commands to a different name, or use\na shell escape from an editor or other program.\nTherefore, these kind of restrictions should be considered\nadvisory at best (and reinforced by policy).\n.Pp\nIn general, if a user has sudo\n.Sy ALL\nthere is nothing to prevent them from creating their own program that gives\nthem a\n.Sy root\nshell (or making their own copy of a shell) regardless of any\n.Ql !\\&\nelements in the user specification.\n.Ss Security implications of Em fast_glob\nIf the\n.Em fast_glob\noption is in use, it is not possible to reliably negate commands where the\npath name includes globbing (aka wildcard) characters.\nThis is because the C library's\n.Xr fnmatch 3\nfunction cannot resolve relative paths.\nWhile this is typically only an inconvenience for rules that grant privileges,\nit can result in a security issue for rules that subtract or revoke privileges.\n.Pp\nFor example, given the following\n.Em sudoers\nfile entry:\n.Bd -literal\njohn\tALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\\e\n              /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root\n.Ed\n.Pp\nUser\n.Sy john\ncan still run\n.Ql /usr/bin/passwd root\nif\n.Em fast_glob\nis enabled by changing to\n.Pa /usr/bin\nand running\n.Ql ./passwd root\ninstead.\n.Pp\nAnother potential issue is that when\n.Nm sudo\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n.Em sudoers\nfile.\nThis may lead to a time of check versus time of use race condition.\n.Ss Wildcards in command arguments\nCommand line arguments are matched as a single, concatenated string.\nThis mean a wildcard character such as\n.Ql \\&?\nor\n.Ql *\nwill match across word boundaries, which may be unexpected.\nFor example, while a sudoers entry like:\n.Bd -literal -offset 4n\n%operator ALL = /bin/cat @log_dir@/messages*\n.Ed\n.Pp\nwill allow command like:\n.Bd -literal -offset 4n\n$ sudo cat @log_dir@/messages.1\n.Ed\n.Pp\nIt will also allow:\n.Bd -literal -offset 4n\n$ sudo cat @log_dir@/messages /etc/shadow\n.Ed\n.Pp\nwhich is probably not what was intended.\nA safer alternative is to use a regular expression for matching\ncommand line arguments.\nThe above example can be rewritten as a regular expression:\n.Bd -literal -offset 4n\n%operator ALL = /bin/cat ^@log_dir@/messages[^[:space:]]*$\n.Ed\n.Pp\nThe regular expression will only match a single file with a\nname that begins with\n.Pa @log_dir@/messages\nand does not include any white space in the name.\nIt is often better to do command line processing outside of the\n.Em sudoers\nfile in a scripting language for anything non-trivial.\n.Ss Regular expressions in command names\nUsing a regular expression to match a command name has the same\nsecurity implications as using the\n.Em fast_glob\noption:\n.Bl -bullet -width 1n\n.It\nIt is not possible to reliably negate commands when the\npath name is a regular expression.\n.It\nWhen\n.Nm sudo\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n.Em sudoers\nfile.\nThis may lead to a time of check versus time of use race condition.\n.El\n.Pp\nThese issues do not apply to rules where only the command line\noptions are matched using a regular expression.\n.Ss Preventing shell escapes\nOnce\n.Nm sudo\nexecutes a program, that program is free to do whatever\nit pleases, including run other programs.\nThis can be a security issue since it is not uncommon for a program to\nallow shell escapes, which lets a user bypass\n.Nm sudo Ns 's\naccess control and logging.\nCommon programs that permit shell escapes include shells (obviously),\neditors, paginators, mail, and terminal programs.\n.Pp\nThere are four basic approaches to this problem:\n.Bl -tag -width \"intercept\"\n.It restrict\nAvoid giving users access to commands that allow the user to run\narbitrary commands.\nMany editors have a restricted mode where shell\nescapes are disabled, though\n.Nm sudoedit\nis a better solution to\nrunning editors via\n.Nm sudo .\nDue to the large number of programs that\noffer shell escapes, restricting users to the set of programs that\ndo not is often unworkable.\n.It intercept\nOn most systems,\n.Nm sudo Ns 's\n.Em intercept\nfunctionality can be used to transparently intercept an attempt to\nrun a new command, allow or deny it based on\n.Em sudoers\nrules, and log the result.\nFor example, this can be used to restrict the commands run from\nwithin a privileged shell or editor.\n.Pp\nThere are two underlying mechanisms that may be used to implement\n.Em intercept\nmode:\n.Em dso\nand\n.Em trace .\nThe\n.Em intercept_type\nsetting can be used to select between them.\n.Pp\nThe first mechanism,\n.Em dso ,\noverrides the standard C library functions that are used to execute a\ncommand.\nIt does this by setting an environment variable (usually\n.Ev LD_PRELOAD )\nto the path of a dynamic shared object, or shared library,\ncontaining custom versions of the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nand\n.Xr system 3\nlibrary functions that connect back to\n.Nm sudo\nfor a policy decision.\nNote, however, that this applies only to dynamically-linked\nexecutables.\nIt is not possible to intercept commands for statically-linked executables\nor executables that run under binary emulation this way.\nBecause most dynamic loaders ignore\n.Ev LD_PRELOAD\n(or the equivalent) when running set-user-ID and set-group-ID programs,\n.Nm\nwill not permit such programs to be run in\n.Em intercept\nmode by default.\nThe\n.Em dso\nmechanism is incompatible with\n.Nm sudo Ns 's\nSELinux RBAC support (but see below).\nSELinux disables\n.Ev LD_PRELOAD\nby default and interferes with file descriptor inheritance, which\n.Nm sudo\nrelies on.\n.Pp\nThe second mechanism,\n.Em trace ,\nis available on Linux systems that support\n.Xr seccomp 2\nfiltering.\nIt uses\n.Xr ptrace 2\nand\n.Xr seccomp 2\nto intercept the\n.Xr execve 2\nsystem call instead of pre-loading a dynamic shared object.\nBoth static and dynamic executables are supported and it is compatible with\n.Nm sudo Ns 's\nSELinux RBAC mode.\nFunctions utilizing the\n.Xr execveat 2\nsystem call, such as\n.Xr fexecve 3 ,\nare not currently intercepted.\n.Pp\nThe\n.Em intercept\nfeature is known to work on Solaris, *BSD, Linux, macOS, HP-UX 11.x\nand AIX 5.3 and above.\nIt should be supported on most operating systems that support the\n.Ev LD_PRELOAD\nenvironment variable or an equivalent.\nIt is not possible to intercept shell built-in commands or restrict\nthe ability to read or write sensitive files from within a shell.\n.Pp\nTo enable intercept mode on a per-command basis, use the\n.Dv INTERCEPT\ntag as documented in the User Specification section above.\nHere is that example again:\n.Bd -literal\nchuck\tresearch = INTERCEPT: ALL\n.Ed\n.Pp\nThis allows user\n.Sy chuck\nto run any command on the machine\n.Dq research\nin intercept mode.\nAny commands run via shell escapes will be validated and logged by\n.Nm sudo .\nIf you are unsure whether or not your system is capable of supporting\n.Em intercept ,\nyou can always just try it out and check whether or not external\ncommands run via a shell are logged when\n.Em intercept\nis enabled.\n.Pp\nThere is an inherent race condition between when a command is checked against\n.Nm\nrules and when it is actually executed.\nIf a user is allowed to run arbitrary commands, they may be able\nto change the\n.Xr execve 2\narguments in the program after the\n.Nm\npolicy check has completed but before the new command is executed.\nStarting with version 1.9.12, the\n.Em trace\nmethod will verify that the command and its arguments have not\nchanged after\n.Xr execve 2\nhas completed but before execution of the new program has had a chance to run.\nThis is not the case with the\n.Em dso\nmethod.\nSee the description of the\n.Em intercept_verify\nsetting for more information.\n.It log\nThere are two separate but related ways to log additional commands.\nThe first is to enable I/O logging using the\n.Em log_output\nflag.\nThis will log the command's output but will not create an event log\nentry when the additional command is run.\nThe second is to enable the\n.Em log_subcmds\nflag in\n.Em sudoers\nwhich will create an event log entry every time a new command is run.\nIf I/O logging is also enabled, the log entry will include a time offset\ninto the I/O log to indicate when the command was run.\nThis offset can be passed to the\n.Xr sudoreplay @mansectsu@\nutility to replay the I/O log at the exact moment when the command was run.\nThe\n.Em log_subcmds\nflag uses the same mechanism as\n.Em intercept\n(see above) and has the same limitations.\n.It noexec\n.Nm sudo Ns 's\n.Em noexec\nfunctionality can be used to prevent a program run by\n.Nm sudo\nfrom executing any other programs.\nOn most systems, it uses the same\n.Ev LD_PRELOAD\nmechanism as\n.Em intercept\n(see above) and thus the same caveats apply.\nThe\n.Em noexec\nfunctionality\nis capable of blocking execution of commands run via the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr exect 3 ,\n.Xr execv 3 ,\n.Xr execveat 3 ,\n.Xr execvP 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\n.Xr fexecve 3 ,\n.Xr popen 3 ,\n.Xr posix_spawn 3 ,\n.Xr posix_spawnp 3 ,\n.Xr system 3 ,\nand\n.Xr wordexp 3\nfunctions.\nOn Linux, a\n.Xr seccomp 2\nfilter is used to implement\n.Em noexec .\nOn Solaris 10 and higher,\n.Em noexec\nuses Solaris privileges instead of the\n.Ev LD_PRELOAD\nenvironment variable.\n.Pp\nTo enable\n.Em noexec\nfor a command, use the\n.Dv NOEXEC\ntag as documented in the User Specification section above.\nHere is that example again:\n.Bd -literal\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.Ed\n.Pp\nThis allows user\n.Sy aaron\nto run\n.Pa /usr/bin/more\nand\n.Pa /usr/bin/vi\nwith\n.Em noexec\nenabled.\nThis will prevent those two commands from\nexecuting other commands (such as a shell).\nIf you are unsure whether or not your system is capable of supporting\n.Em noexec\nyou can always just try it out and check whether shell escapes work when\n.Em noexec\nis enabled.\n.El\n.Pp\nRestricting shell escapes is not a panacea.\nPrograms running as\n.Sy root\nare still capable of many potentially hazardous operations (such\nas changing or overwriting files) that could lead to unintended\nprivilege escalation.\nIn the specific case of an editor, a safer approach is to give the\nuser permission to run\n.Nm sudoedit\n(see below).\n.Ss Secure editing\nThe\n.Nm\nplugin includes\n.Nm sudoedit\nsupport which allows users to securely edit files with the editor\nof their choice.\nAs\n.Nm sudoedit\nis a built-in command, it must be specified in the\n.Em sudoers\nfile without a leading path.\nHowever, it may take command line arguments just as a normal command does.\nWildcards used in\n.Em sudoedit\ncommand line arguments are expected to be path names, so a forward slash\n.Pq Ql /\nwill not be matched by a wildcard.\n.Pp\nUnlike other\n.Nm sudo\ncommands, the editor is run with the permissions of the invoking\nuser and with the environment unmodified.\nMore information may be found in the description of the\n.Fl e\noption in\n.Xr sudo @mansectsu@ .\n.Pp\nFor example, to allow user operator to edit the\n.Dq message of the day\nfile on any machine:\n.Bd -literal -offset 4n\noperator ALL = sudoedit /etc/motd\n.Ed\n.Pp\nThe operator user then runs\n.Nm sudoedit\nas follows:\n.Bd -literal -offset 4n\n$ sudoedit /etc/motd\n.Ed\n.Pp\nThe editor will run as the operator user, not\n.Sy @runas_default@ ,\non a temporary copy of\n.Pa /etc/motd .\nAfter the file has been edited,\n.Pa /etc/motd\nwill be updated with the contents of the temporary copy.\n.Pp\nUsers should\n.Em never\nbe granted\n.Nm sudoedit\npermission to edit a file that resides in a directory the user\nhas write access to, either directly or via a wildcard.\nIf the user has write access to the directory it is possible to\nreplace the legitimate file with a link to another file,\nallowing the editing of arbitrary files.\nTo prevent this, starting with version 1.8.16, symbolic links will\nnot be followed in writable directories and\n.Nm sudoedit\nwill refuse to edit a file located in a writable directory\nunless the\n.Em sudoedit_checkdir\noption has been disabled or the invoking user is\n.Sy root .\nAdditionally, in version 1.8.15 and higher,\n.Nm sudoedit\nwill refuse to open a symbolic link unless either the\n.Em sudoedit_follow\noption is enabled or the\n.Em sudoedit\ncommand is prefixed with the\n.Dv FOLLOW\ntag in the\n.Em sudoers\nfile.\n.Ss Time stamp file checks\n.Nm\nwill check the ownership of its time stamp directory\n.Po\n.Pa @rundir@/ts\nby default\n.Pc\nand ignore the directory's contents if it is not owned by\n.Sy root\nor if it is writable by a user other than\n.Sy root .\nOlder versions of\n.Nm sudo\nstored time stamp files in\n.Pa /tmp ;\nthis is no longer recommended as it may be possible for a user\nto create the time stamp themselves on systems that allow\nunprivileged users to change the ownership of files they create.\n.Pp\nWhile the time stamp directory\n.Em should\nbe cleared at reboot time, not all systems contain a\n.Pa /run\nor\n.Pa /var/run\ndirectory.\nTo avoid potential problems,\n.Nm\nwill ignore time stamp files that date from before the machine booted\non systems where the boot time is available.\n.Pp\nSome systems with graphical desktop environments allow unprivileged\nusers to change the system clock.\nSince\n.Nm\nrelies on the system clock for time stamp validation, it may be\npossible on such systems for a user to run\n.Nm sudo\nfor longer than\n.Em timestamp_timeout\nby setting the clock back.\nTo combat this,\n.Nm\nuses a monotonic clock (which never moves backwards) for its time stamps\nif the system supports it.\n.Pp\n.Nm\nwill not honor time stamps set far in the future.\nTime stamps with a date greater than current_time + 2 *\n.Dv TIMEOUT\nwill be ignored and\n.Nm\nwill log and complain.\n.Pp\nIf the\n.Em timestamp_type\noption is set to\n.Dq tty ,\nthe time stamp record includes the device number of the terminal\nthe user authenticated with.\nThis provides per-terminal granularity but time stamp records may still\noutlive the user's session.\n.Pp\nUnless the\n.Em timestamp_type\noption is set to\n.Dq global ,\nthe time stamp record also includes the session ID of the process\nthat last authenticated.\nThis prevents processes in different terminal sessions from using\nthe same time stamp record.\nOn systems where a process's start time can be queried,\nthe start time of the session leader\nis recorded in the time stamp record.\nIf no terminal is present or the\n.Em timestamp_type\noption is set to\n.Dq ppid ,\nthe start time of the parent process is used instead.\nIn most cases this will prevent a time stamp record from being re-used\nwithout the user entering a password when logging out and back in again.\n.Sh DEBUGGING\nVersions 1.8.4 and higher of the\n.Nm\nplugin support a flexible debugging framework that can help track\ndown what the plugin is doing internally if there is a problem.\nThis can be configured in the\n.Xr sudo.conf @mansectform@\nfile.\n.Pp\nThe\n.Nm\nplugin uses the same debug flag format as the\n.Nm sudo\nfront-end:\n.Em subsystem Ns @ Ns Em priority .\n.Pp\nThe priorities used by\n.Nm ,\nin order of decreasing severity,\nare:\n.Em crit , err , warn , notice , diag , info , trace ,\nand\n.Em debug .\nEach priority, when specified, also includes all priorities higher\nthan it.\nFor example, a priority of\n.Em notice\nwould include debug messages logged at\n.Em notice\nand higher.\n.Pp\nThe following subsystems are used by the\n.Nm\nplugin:\n.Bl -tag -width \"defaults\"\n.It Em alias\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias\nand\n.Em Cmnd_Alias\nprocessing\n.It Em all\nmatches every subsystem\n.It Em audit\nBSM and Linux audit code\n.It Em auth\nuser authentication\n.It Em defaults\n.Em sudoers\nfile\n.Em Defaults\nsettings\n.It Em env\nenvironment handling\n.It Em ldap\nLDAP-based sudoers\n.It Em logging\nlogging support\n.It Em match\nmatching of users, groups, hosts, and netgroups in the\n.Em sudoers\nfile\n.It Em netif\nnetwork interface handling\n.It Em nss\nnetwork service switch handling in\n.Nm\n.It Em parser\n.Em sudoers\nfile parsing\n.It Em perms\npermission setting\n.It Em plugin\nThe equivalent of\n.Em main\nfor the plugin.\n.It Em pty\npseudo-terminal related code\n.It Em rbtree\nredblack tree internals\n.It Em sssd\nSSSD-based sudoers\n.It Em util\nutility functions\n.El\n.Pp\nFor example:\n.Bd -literal\nDebug @sudoers_plugin@ @log_dir@/sudoers_debug match@info,nss@info\n.Ed\n.Pp\nFor more information, see the\n.Xr sudo.conf @mansectform@\nmanual.\n.Sh SEE ALSO\n.Xr ssh 1 ,\n.Xr su 1 ,\n.Xr fnmatch 3 ,\n.Xr glob 3 ,\n.Xr mktemp 3 ,\n.Xr strftime 3 ,\n.Xr sudo.conf @mansectform@ ,\n.Xr sudo_plugin @mansectform@ ,\n.Xr sudoers.ldap @mansectform@ ,\n.Xr sudoers_timestamp @mansectform@ ,\n.Xr sudo @mansectsu@ ,\n.Xr visudo @mansectsu@\n.Sh AUTHORS\nMany people have worked on\n.Nm sudo\nover the years; this version consists of code written primarily by:\n.Bd -ragged -offset indent\n.An Todd C. Miller\n.Ed\n.Pp\nSee the CONTRIBUTORS.md file in the\n.Nm sudo\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n.Nm sudo .\n.Sh CAVEATS\nThe\n.Em sudoers\nfile should\n.Sy always\nbe edited by the\n.Nm visudo\nutility which locks the file and checks for syntax errors.\nIf\n.Em sudoers\ncontains syntax errors,\n.Nm sudo\nmay refuse to run, which is a serious problem if\n.Nm sudo\nis your only method of obtaining superuser privileges.\nRecent versions of\n.Nm\nwill attempt to recover after a syntax error by ignoring the rest of\nthe line after encountering an error.\nOlder versions of\n.Nm sudo\nwill not run if\n.Em sudoers\ncontains a syntax error.\n.Pp\nWhen using netgroups of machines (as opposed to users), if you\nstore fully qualified host name in the netgroup (as is usually the\ncase), you either need to have the machine's host name be fully qualified\nas returned by the\n.Em hostname\ncommand or use the\n.Em fqdn\noption in\n.Em sudoers .\n.Sh BUGS\nIf you believe you have found a bug in\n.Nm sudo ,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.Sh SUPPORT\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.Sh DISCLAIMER\n.Nm sudo\nis provided\n.Dq AS IS\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n.Nm sudo\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\" Automatically generated from an mdoc input file.  Do not edit.\n.\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.TH \"SUDOREPLAY\" \"@mansectsu@\" \"January 16, 2023\" \"Sudo @PACKAGE_VERSION@\" \"System Manager's Manual\"\n.nh\n.if n .ad l\n.SH \"NAME\"\n\\fBsudoreplay\\fR\n\\- replay sudo session logs\n.SH \"SYNOPSIS\"\n.HP 11n\n\\fBsudoreplay\\fR\n[\\fB\\-FhnRS\\fR]\n[\\fB\\-d\\fR\\ \\fIdir\\fR]\n[\\fB\\-f\\fR\\ \\fIfilter\\fR]\n[\\fB\\-m\\fR\\ \\fInum\\fR]\n[\\fB\\-s\\fR\\ \\fInum\\fR]\nID[\\fI@offset\\fR]\n.HP 11n\n\\fBsudoreplay\\fR\n[\\fB\\-h\\fR]\n[\\fB\\-d\\fR\\ \\fIdir\\fR]\n\\fB\\-l\\fR\n[search\\ expression]\n.SH \"DESCRIPTION\"\n\\fBsudoreplay\\fR\nplays back or lists the output logs created by\n\\fBsudo\\fR.\nWhen replaying,\n\\fBsudoreplay\\fR\ncan play the session back in real-time, or the playback speed may be\nadjusted (faster or slower) based on the command line options.\n.PP\nThe\n\\fIID\\fR\nshould either be a six character sequence of digits and\nupper case letters, e.g.,\n\\(lq0100A5\\(rq\nor a path name.\nThe\n\\fIID\\fR\nmay include an optional\n\\fI@offset\\fR\nsuffix which may be used to start replaying at a specific time offset.\nThe\n\\fI@offset\\fR\nis specified as a number in seconds since the start of the session\nwith an optional decimal fraction.\n.PP\nPath names may be relative to the I/O log directory\n\\fI@iolog_dir@\\fR\n(unless overridden by the\n\\fB\\-d\\fR\noption) or fully qualified, beginning with a\n\\(oq/\\(cq\ncharacter.\nWhen a command is run via\n\\fBsudo\\fR\nwith\n\\fIlog_output\\fR\nenabled in the\n\\fIsudoers\\fR\nfile, a\n\\(lqTSID=ID\\(rq\nstring is logged via\nsyslog(3)\nor to the\n\\fBsudo\\fR\nlog file.\nThe\n\\fIID\\fR\nmay also be determined using\n\\fBsudoreplay\\fR's\nlist mode.\n.PP\nIn list mode,\n\\fBsudoreplay\\fR\ncan be used to find the ID of a session based on a number of criteria\nsuch as the user, tty, or command run.\n.PP\nIn replay mode, if the standard input and output are connected to a terminal\nand the\n\\fB\\-n\\fR\noption is not specified,\n\\fBsudoreplay\\fR\nwill operate interactively.\nIn interactive mode,\n\\fBsudoreplay\\fR\nwill attempt to adjust the terminal size to match that of the session and\nwrite directly to the terminal (not all terminals support this).\nAdditionally, it will poll the keyboard and act on the following keys:\n.TP 14n\n\\(oq\\fR\\en\\fR\\(cq or \\(oq\\fR\\er\\fR\\(cq\nSkip to the next replay event; useful for long pauses.\n.TP 14n\n\\(oq\\fR\\ \\fR\\(cq (space)\nPause output; press any key to resume.\n.TP 14n\n\\(oq<\\(cq\nReduce the playback speed by one half.\n.TP 14n\n\\(oq>\\(cq\nDouble the playback speed.\n.PP\nThe session can be interrupted via control-C.\nWhen the session has finished, the terminal is restored to its\noriginal size if it was changed during playback.\n.PP\nThe options are as follows:\n.TP 8n\n\\fB\\-d\\fR \\fIdir\\fR, \\fB\\--directory\\fR=\\fIdir\\fR\nStore session logs in\n\\fIdir\\fR\ninstead of the default,\n\\fI@iolog_dir@\\fR.\n.TP 8n\n\\fB\\-f\\fR \\fIfilter\\fR, \\fB\\--filter\\fR=\\fIfilter\\fR\nSelect which I/O type(s) to display.\nBy default,\n\\fBsudoreplay\\fR\nwill display the command's standard output, standard error, and tty output.\nThe\n\\fIfilter\\fR\nargument is a comma-separated list, consisting of one or more of following:\n\\fIstdin\\fR,\n\\fIstdout\\fR,\n\\fIstderr\\fR,\n\\fIttyin\\fR,\nand\n\\fIttyout\\fR.\n.TP 8n\n\\fB\\-F\\fR, \\fB\\--follow\\fR\nEnable\n\\(lqfollow mode\\(rq.\nWhen replaying a session,\n\\fBsudoreplay\\fR\nwill ignore end-of-file and keep replaying until the log is complete.\nThis can be used to replay a session that is still in progress,\nsimilar to\n\\(lqtail -f\\(rq.\nAn I/O log file is considered to be complete when the write bits\nhave been cleared on the session's timing file.\nVersions of\n\\fBsudo\\fR\nprior to 1.9.1 do not clear the write bits upon completion.\n.TP 8n\n\\fB\\-h\\fR, \\fB\\--help\\fR\nDisplay a short help message to the standard output and exit.\n.TP 8n\n\\fB\\-l\\fR, \\fB\\--list\\fR [\\fIsearch expression\\fR]\nEnable\n\\(lqlist mode\\(rq.\nIn this mode,\n\\fBsudoreplay\\fR\nwill list available sessions in a format similar to the\n\\fBsudo\\fR\nlog file format, sorted by file name (or sequence number).\nIf a\n\\fIsearch expression\\fR\nis specified, it will be used to restrict the IDs that are displayed.\nAn expression is composed of the following predicates:\n.PP\n.RS 8n\n.PD 0\n.TP 8n\ncommand \\fIpattern\\fR\nEvaluates to true if the command run matches the POSIX extended\nregular expression\n\\fIpattern\\fR.\n.PD\n.TP 8n\ncwd \\fIdirectory\\fR\nEvaluates to true if the command was run with the specified current\nworking directory.\n.TP 8n\nfromdate \\fIdate\\fR\nEvaluates to true if the command was run on or after\n\\fIdate\\fR.\nSee\n\\fIDate and time format\\fR\nfor a description of supported date and time formats.\n.TP 8n\ngroup \\fIrunas_group\\fR\nEvaluates to true if the command was run with the specified\n\\fIrunas_group\\fR.\nUnless a\n\\fIrunas_group\\fR\nwas explicitly specified when\n\\fBsudo\\fR\nwas run this field will be empty in the log.\n.TP 8n\nhost \\fIhostname\\fR\nEvaluates to true if the command was run on the specified\n\\fIhostname\\fR.\n.TP 8n\nrunas \\fIrunas_user\\fR\nEvaluates to true if the command was run as the specified\n\\fIrunas_user\\fR.\nBy default,\n\\fBsudo\\fR\nruns commands as the\n\\fBroot\\fR\nuser.\n.TP 8n\ntodate \\fIdate\\fR\nEvaluates to true if the command was run on or prior to\n\\fIdate\\fR.\nSee\n\\fIDate and time format\\fR\nfor a description of supported date and time formats.\n.TP 8n\ntty \\fItty name\\fR\nEvaluates to true if the command was run on the specified terminal device.\nThe\n\\fItty name\\fR\nshould be specified without the\n\\fI/dev/\\fR\nprefix, e.g.,\n\\fItty01\\fR\ninstead of\n\\fI/dev/tty01\\fR.\n.TP 8n\nuser \\fIuser name\\fR\nEvaluates to true if the ID matches a command run by\n\\fIuser name\\fR.\n.PP\nPredicates may be abbreviated to the shortest unique string.\n.sp\nPredicates may be combined using\n\\fIand\\fR,\n\\fIor\\fR,\nand\n\\fI\\&!\\fR\noperators as well as\n\\(oq\\&(\\(cq\nand\n\\(oq\\&)\\(cq\ngrouping (parentheses must generally be escaped from the shell).\nThe\n\\fIand\\fR\noperator is optional, adjacent predicates have an implied\n\\fIand\\fR\nunless separated by an\n\\fIor\\fR.\n.RE\n.TP 8n\n\\fB\\-m\\fR, \\fB\\--max-wait\\fR \\fImax_wait\\fR\nSpecify an upper bound on how long to wait between key presses or output data.\nBy default,\n\\fBsudoreplay\\fR\nwill accurately reproduce the delays between key presses or program output.\nHowever, this can be tedious when the session includes long pauses.\nWhen the\n\\fB\\-m\\fR\noption is specified,\n\\fBsudoreplay\\fR\nwill limit these pauses to at most\n\\fImax_wait\\fR\nseconds.\nThe value may be specified as a floating point number, e.g.,\n\\fI2.5\\fR.\nA\n\\fImax_wait\\fR\nof zero or less will eliminate the pauses entirely.\n.TP 8n\n\\fB\\-n\\fR, \\fB\\--non-interactive\\fR\nDo not prompt for user input or attempt to re-size the terminal.\nThe session is written to the standard output, not directly to\nthe user's terminal.\n.TP 8n\n\\fB\\-R\\fR, \\fB\\--no-resize\\fR\nDo not attempt to re-size the terminal to match the terminal size\nof the session.\n.TP 8n\n\\fB\\-S\\fR, \\fB\\--suspend-wait\\fR\nWait while the command was suspended.\nBy default,\n\\fBsudoreplay\\fR\nwill ignore the time interval between when the command was suspended\nand when it was resumed.\nIf the\n\\fB\\-S\\fR\noption is specified,\n\\fBsudoreplay\\fR\nwill wait instead.\n.TP 8n\n\\fB\\-s\\fR, \\fB\\--speed\\fR \\fIspeed_factor\\fR\nThis option causes\n\\fBsudoreplay\\fR\nto adjust the number of seconds it will wait between key presses or\nprogram output.\nThis can be used to slow down or speed up the display.\nFor example, a\n\\fIspeed_factor\\fR\nof\n\\fI2\\fR\nwould make the output twice as fast whereas a\n\\fIspeed_factor\\fR\nof\n\\fI.5\\fR\nwould make the output twice as slow.\n.TP 8n\n\\fB\\-V\\fR, \\fB\\--version\\fR\nPrint the\n\\fBsudoreplay\\fR\nversions version number and exit.\n.SS \"Date and time format\"\nThe time and date may be specified multiple ways, common formats include:\n.TP 8n\nHH:MM:SS am MM/DD/CCYY timezone\n24 hour time may be used in place of am/pm.\n.TP 8n\nHH:MM:SS am Month, Day Year timezone\n24 hour time may be used in place of am/pm, and month and day names\nmay be abbreviated.\nMonth and day of the week names must be specified in English.\n.TP 8n\nCCYY-MM-DD HH:MM:SS\nISO time format\n.TP 8n\nDD Month CCYY HH:MM:SS\nThe month name may be abbreviated.\n.PP\nEither time or date may be omitted, the am/pm and timezone are optional.\nIf no date is specified, the current day is assumed; if no time is\nspecified, the first second of the specified date is used.\nThe less significant parts of both time and date may also be omitted,\nin which case zero is assumed.\n.PP\nThe following are all valid time and date specifications:\n.TP 8n\nnow\nThe current time and date.\n.TP 8n\ntomorrow\nExactly one day from now.\n.TP 8n\nyesterday\n24 hours ago.\n.TP 8n\n2 hours ago\n2 hours ago.\n.TP 8n\nnext Friday\nThe first second of the Friday in the next (upcoming) week.\nNot to be confused with\n\\(lqthis Friday\\(rq\nwhich would match the Friday of the current week.\n.TP 8n\nlast week\nThe current time but 7 days ago.\nThis is equivalent to\n\\(lqa week ago\\(rq.\n.TP 8n\na fortnight ago\nThe current time but 14 days ago.\n.TP 8n\n10:01 am 9/17/2009\n10:01 am, September 17, 2009.\n.TP 8n\n10:01 am\n10:01 am on the current day.\n.TP 8n\n10\n10:00 am on the current day.\n.TP 8n\n9/17/2009\n00:00 am, September 17, 2009.\n.TP 8n\n10:01 am Sep 17, 2009\n10:01 am, September 17, 2009.\n.PP\nRelative time specifications do not always work as expected.\nFor example, the\n\\(lqnext\\(rq\nqualifier is intended to be used in conjunction with a day such as\n\\(lqnext Monday\\(rq.\nWhen used with units of weeks, months, years, etc\nthe result will be one more than expected.\nFor example,\n\\(lqnext week\\(rq\nwill result in a time exactly two weeks from now, which is probably\nnot what was intended.\nThis will be addressed in a future version of\n\\fBsudoreplay\\fR.\n.SS \"Debugging sudoreplay\"\n\\fBsudoreplay\\fR\nversions 1.8.4 and higher support a flexible debugging framework\nthat is configured via\n\\fIDebug\\fR\nlines in the\nsudo.conf(@mansectform@)\nfile.\n.PP\nFor more information on configuring\nsudo.conf(@mansectform@),\nrefer to its manual.\n.SH \"FILES\"\n.TP 26n\n\\fI@sysconfdir@/sudo.conf\\fR\nDebugging framework configuration\n.TP 26n\n\\fI@iolog_dir@\\fR\nThe default I/O log directory.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/log\\fR\nExample session log info.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/log.json\\fR\nExample session log info (JSON format).\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stdin\\fR\nExample session standard input log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stdout\\fR\nExample session standard output log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stderr\\fR\nExample session standard error log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/ttyin\\fR\nExample session tty input file.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/ttyout\\fR\nExample session tty output file.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/timing\\fR\nExample session timing file.\n.PP\nThe\n\\fIstdin\\fR,\n\\fIstdout\\fR\nand\n\\fIstderr\\fR\nfiles will be empty unless\n\\fBsudo\\fR\nwas used as part of a pipeline for a particular command.\n.SH \"EXAMPLES\"\nList sessions run by user\n\\fImillert\\fR:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user millert\n.RE\n.fi\n.PP\nList sessions run by user\n\\fIbob\\fR\nwith a command containing the string vi:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user bob command vi\n.RE\n.fi\n.PP\nList sessions run by user\n\\fIjeff\\fR\nthat match a regular expression:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user jeff command '/bin/[a-z]*sh'\n.RE\n.fi\n.PP\nList sessions run by jeff or bob on the console:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l ( user jeff or user bob ) tty console\n.RE\n.fi\n.SH \"SEE ALSO\"\nscript(1),\nsudo.conf(@mansectform@),\nsudo(@mansectsu@)\n.SH \"AUTHORS\"\nMany people have worked on\n\\fBsudo\\fR\nover the years; this version consists of code written primarily by:\n.sp\n.RS 6n\nTodd C. Miller\n.RE\n.PP\nSee the CONTRIBUTORS.md file in the\n\\fBsudo\\fR\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n\\fBsudo\\fR.\n.SH \"BUGS\"\nIf you believe you have found a bug in\n\\fBsudoreplay\\fR,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.SH \"SUPPORT\"\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.SH \"DISCLAIMER\"\n\\fBsudoreplay\\fR\nis provided\n\\(lqAS IS\\(rq\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n\\fBsudo\\fR\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.Dd January 16, 2023\n.Dt SUDOREPLAY @mansectsu@\n.Os Sudo @PACKAGE_VERSION@\n.Sh NAME\n.Nm sudoreplay\n.Nd replay sudo session logs\n.Sh SYNOPSIS\n.Nm sudoreplay\n.Op Fl FhnRS\n.Op Fl d Ar dir\n.Op Fl f Ar filter\n.Op Fl m Ar num\n.Op Fl s Ar num\n.No ID Ns Op Ar @offset\n.Pp\n.Nm\n.Op Fl h\n.Op Fl d Ar dir\n.Fl l\n.Op search expression\n.Sh DESCRIPTION\n.Nm\nplays back or lists the output logs created by\n.Nm sudo .\nWhen replaying,\n.Nm\ncan play the session back in real-time, or the playback speed may be\nadjusted (faster or slower) based on the command line options.\n.Pp\nThe\n.Em ID\nshould either be a six character sequence of digits and\nupper case letters, e.g.,\n.Dq 0100A5\nor a path name.\nThe\n.Em ID\nmay include an optional\n.Ar @offset\nsuffix which may be used to start replaying at a specific time offset.\nThe\n.Ar @offset\nis specified as a number in seconds since the start of the session\nwith an optional decimal fraction.\n.Pp\nPath names may be relative to the I/O log directory\n.Pa @iolog_dir@\n(unless overridden by the\n.Fl d\noption) or fully qualified, beginning with a\n.Ql /\ncharacter.\nWhen a command is run via\n.Nm sudo\nwith\n.Em log_output\nenabled in the\n.Em sudoers\nfile, a\n.Dq TSID=ID\nstring is logged via\n.Xr syslog 3\nor to the\n.Nm sudo\nlog file.\nThe\n.Em ID\nmay also be determined using\n.Nm sudoreplay Ns 's\nlist mode.\n.Pp\nIn list mode,\n.Nm\ncan be used to find the ID of a session based on a number of criteria\nsuch as the user, tty, or command run.\n.Pp\nIn replay mode, if the standard input and output are connected to a terminal\nand the\n.Fl n\noption is not specified,\n.Nm\nwill operate interactively.\nIn interactive mode,\n.Nm\nwill attempt to adjust the terminal size to match that of the session and\nwrite directly to the terminal (not all terminals support this).\nAdditionally, it will poll the keyboard and act on the following keys:\n.Bl -tag -width 12n\n.It So Li \\en Sc No or So Li \\er Sc\nSkip to the next replay event; useful for long pauses.\n.It So Li \\  Sc Pq space\nPause output; press any key to resume.\n.It Ql <\nReduce the playback speed by one half.\n.It Ql >\nDouble the playback speed.\n.El\n.Pp\nThe session can be interrupted via control-C.\nWhen the session has finished, the terminal is restored to its\noriginal size if it was changed during playback.\n.Pp\nThe options are as follows:\n.Bl -tag -width Ds\n.It Fl d Ar dir , Fl -directory Ns = Ns Ar dir\nStore session logs in\n.Ar dir\ninstead of the default,\n.Pa @iolog_dir@ .\n.It Fl f Ar filter , Fl -filter Ns = Ns Ar filter\nSelect which I/O type(s) to display.\nBy default,\n.Nm\nwill display the command's standard output, standard error, and tty output.\nThe\n.Ar filter\nargument is a comma-separated list, consisting of one or more of following:\n.Em stdin ,\n.Em stdout ,\n.Em stderr ,\n.Em ttyin ,\nand\n.Em ttyout .\n.It Fl F , -follow\nEnable\n.Dq follow mode .\nWhen replaying a session,\n.Nm\nwill ignore end-of-file and keep replaying until the log is complete.\nThis can be used to replay a session that is still in progress,\nsimilar to\n.Dq tail -f .\nAn I/O log file is considered to be complete when the write bits\nhave been cleared on the session's timing file.\nVersions of\n.Nm sudo\nprior to 1.9.1 do not clear the write bits upon completion.\n.It Fl h , -help\nDisplay a short help message to the standard output and exit.\n.It Fl l , -list Op Ar search expression\nEnable\n.Dq list mode .\nIn this mode,\n.Nm\nwill list available sessions in a format similar to the\n.Nm sudo\nlog file format, sorted by file name (or sequence number).\nIf a\n.Ar search expression\nis specified, it will be used to restrict the IDs that are displayed.\nAn expression is composed of the following predicates:\n.Bl -tag -width 6n\n.It command Ar pattern\nEvaluates to true if the command run matches the POSIX extended\nregular expression\n.Ar pattern .\n.It cwd Ar directory\nEvaluates to true if the command was run with the specified current\nworking directory.\n.It fromdate Ar date\nEvaluates to true if the command was run on or after\n.Ar date .\nSee\n.Sx Date and time format\nfor a description of supported date and time formats.\n.It group Ar runas_group\nEvaluates to true if the command was run with the specified\n.Ar runas_group .\nUnless a\n.Ar runas_group\nwas explicitly specified when\n.Nm sudo\nwas run this field will be empty in the log.\n.It host Ar hostname\nEvaluates to true if the command was run on the specified\n.Ar hostname .\n.It runas Ar runas_user\nEvaluates to true if the command was run as the specified\n.Ar runas_user .\nBy default,\n.Nm sudo\nruns commands as the\n.Sy root\nuser.\n.It todate Ar date\nEvaluates to true if the command was run on or prior to\n.Ar date .\nSee\n.Sx Date and time format\nfor a description of supported date and time formats.\n.It tty Ar tty name\nEvaluates to true if the command was run on the specified terminal device.\nThe\n.Ar tty name\nshould be specified without the\n.Pa /dev/\nprefix, e.g.,\n.Pa tty01\ninstead of\n.Pa /dev/tty01 .\n.It user Ar user name\nEvaluates to true if the ID matches a command run by\n.Ar user name .\n.El\n.Pp\nPredicates may be abbreviated to the shortest unique string.\n.Pp\nPredicates may be combined using\n.Em and ,\n.Em or ,\nand\n.Em \\&!\noperators as well as\n.Ql \\&(\nand\n.Ql \\&)\ngrouping (parentheses must generally be escaped from the shell).\nThe\n.Em and\noperator is optional, adjacent predicates have an implied\n.Em and\nunless separated by an\n.Em or .\n.It Fl m , -max-wait Ar max_wait\nSpecify an upper bound on how long to wait between key presses or output data.\nBy default,\n.Nm\nwill accurately reproduce the delays between key presses or program output.\nHowever, this can be tedious when the session includes long pauses.\nWhen the\n.Fl m\noption is specified,\n.Nm\nwill limit these pauses to at most\n.Em max_wait\nseconds.\nThe value may be specified as a floating point number, e.g.,\n.Em 2.5 .\nA\n.Em max_wait\nof zero or less will eliminate the pauses entirely.\n.It Fl n , -non-interactive\nDo not prompt for user input or attempt to re-size the terminal.\nThe session is written to the standard output, not directly to\nthe user's terminal.\n.It Fl R , -no-resize\nDo not attempt to re-size the terminal to match the terminal size\nof the session.\n.It Fl S , -suspend-wait\nWait while the command was suspended.\nBy default,\n.Nm\nwill ignore the time interval between when the command was suspended\nand when it was resumed.\nIf the\n.Fl S\noption is specified,\n.Nm\nwill wait instead.\n.It Fl s , -speed Ar speed_factor\nThis option causes\n.Nm\nto adjust the number of seconds it will wait between key presses or\nprogram output.\nThis can be used to slow down or speed up the display.\nFor example, a\n.Ar speed_factor\nof\n.Em 2\nwould make the output twice as fast whereas a\n.Ar speed_factor\nof\n.Em .5\nwould make the output twice as slow.\n.It Fl V , -version\nPrint the\n.Nm\nversions version number and exit.\n.El\n.Ss Date and time format\nThe time and date may be specified multiple ways, common formats include:\n.Bl -tag -width 6n\n.It HH:MM:SS am MM/DD/CCYY timezone\n24 hour time may be used in place of am/pm.\n.It HH:MM:SS am Month, Day Year timezone\n24 hour time may be used in place of am/pm, and month and day names\nmay be abbreviated.\nMonth and day of the week names must be specified in English.\n.It CCYY-MM-DD HH:MM:SS\nISO time format\n.It DD Month CCYY HH:MM:SS\nThe month name may be abbreviated.\n.El\n.Pp\nEither time or date may be omitted, the am/pm and timezone are optional.\nIf no date is specified, the current day is assumed; if no time is\nspecified, the first second of the specified date is used.\nThe less significant parts of both time and date may also be omitted,\nin which case zero is assumed.\n.Pp\nThe following are all valid time and date specifications:\n.Bl -tag -width 6n\n.It now\nThe current time and date.\n.It tomorrow\nExactly one day from now.\n.It yesterday\n24 hours ago.\n.It 2 hours ago\n2 hours ago.\n.It next Friday\nThe first second of the Friday in the next (upcoming) week.\nNot to be confused with\n.Dq this Friday\nwhich would match the Friday of the current week.\n.It last week\nThe current time but 7 days ago.\nThis is equivalent to\n.Dq a week ago .\n.It a fortnight ago\nThe current time but 14 days ago.\n.It 10:01 am 9/17/2009\n10:01 am, September 17, 2009.\n.It 10:01 am\n10:01 am on the current day.\n.It 10\n10:00 am on the current day.\n.It 9/17/2009\n00:00 am, September 17, 2009.\n.It 10:01 am Sep 17, 2009\n10:01 am, September 17, 2009.\n.El\n.Pp\nRelative time specifications do not always work as expected.\nFor example, the\n.Dq next\nqualifier is intended to be used in conjunction with a day such as\n.Dq next Monday .\nWhen used with units of weeks, months, years, etc\nthe result will be one more than expected.\nFor example,\n.Dq next week\nwill result in a time exactly two weeks from now, which is probably\nnot what was intended.\nThis will be addressed in a future version of\n.Nm .\n.Ss Debugging sudoreplay\n.Nm\nversions 1.8.4 and higher support a flexible debugging framework\nthat is configured via\n.Em Debug\nlines in the\n.Xr sudo.conf @mansectform@\nfile.\n.Pp\nFor more information on configuring\n.Xr sudo.conf @mansectform@ ,\nrefer to its manual.\n.Sh FILES\n.Bl -tag -width 24n\n.It Pa @sysconfdir@/sudo.conf\nDebugging framework configuration\n.It Pa @iolog_dir@\nThe default I/O log directory.\n.It Pa @iolog_dir@/00/00/01/log\nExample session log info.\n.It Pa @iolog_dir@/00/00/01/log.json\nExample session log info (JSON format).\n.It Pa @iolog_dir@/00/00/01/stdin\nExample session standard input log.\n.It Pa @iolog_dir@/00/00/01/stdout\nExample session standard output log.\n.It Pa @iolog_dir@/00/00/01/stderr\nExample session standard error log.\n.It Pa @iolog_dir@/00/00/01/ttyin\nExample session tty input file.\n.It Pa @iolog_dir@/00/00/01/ttyout\nExample session tty output file.\n.It Pa @iolog_dir@/00/00/01/timing\nExample session timing file.\n.El\n.Pp\nThe\n.Em stdin ,\n.Em stdout\nand\n.Em stderr\nfiles will be empty unless\n.Nm sudo\nwas used as part of a pipeline for a particular command.\n.Sh EXAMPLES\nList sessions run by user\n.Em millert :\n.Bd -literal -offset 4n\n# sudoreplay -l user millert\n.Ed\n.Pp\nList sessions run by user\n.Em bob\nwith a command containing the string vi:\n.Bd -literal -offset 4n\n# sudoreplay -l user bob command vi\n.Ed\n.Pp\nList sessions run by user\n.Em jeff\nthat match a regular expression:\n.Bd -literal -offset 4n\n# sudoreplay -l user jeff command '/bin/[a-z]*sh'\n.Ed\n.Pp\nList sessions run by jeff or bob on the console:\n.Bd -literal -offset 4n\n# sudoreplay -l ( user jeff or user bob ) tty console\n.Ed\n.Sh SEE ALSO\n.Xr script 1 ,\n.Xr sudo.conf @mansectform@ ,\n.Xr sudo @mansectsu@\n.Sh AUTHORS\nMany people have worked on\n.Nm sudo\nover the years; this version consists of code written primarily by:\n.Bd -ragged -offset indent\n.An Todd C. Miller\n.Ed\n.Pp\nSee the CONTRIBUTORS.md file in the\n.Nm sudo\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n.Nm sudo .\n.Sh BUGS\nIf you believe you have found a bug in\n.Nm ,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.Sh SUPPORT\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.Sh DISCLAIMER\n.Nm\nis provided\n.Dq AS IS\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n.Nm sudo\nor https://www.sudo.ws/about/license/ for complete details.\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2007, 2010, 2011, 2013-2015, 2023\n *\tTodd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef SUDO_LBUF_H\n#define SUDO_LBUF_H\n\n/*\n * Line buffer struct.\n */\nstruct sudo_lbuf {\n    int (*output)(const char *);\n    char *buf;\n    const char *continuation;\n    unsigned int indent;\n    unsigned int len;\n    unsigned int size;\n    unsigned short cols;\n    unsigned short error;\n};\n\ntypedef int (*sudo_lbuf_output_t)(const char *);\n\nsudo_dso_public void sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output, int indent, const char *continuation, int cols);\nsudo_dso_public void sudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public bool sudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...) sudo_printflike(2, 3);\nsudo_dso_public bool sudo_lbuf_append_quoted_v1(struct sudo_lbuf *lbuf, const char *set, const char *fmt, ...) sudo_printflike(3, 4);\nsudo_dso_public void sudo_lbuf_print_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public bool sudo_lbuf_error_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public void sudo_lbuf_clearerr_v1(struct sudo_lbuf *lbuf);\n\n#define sudo_lbuf_init(_a, _b, _c, _d, _e) sudo_lbuf_init_v1((_a), (_b), (_c), (_d), (_e))\n#define sudo_lbuf_destroy(_a) sudo_lbuf_destroy_v1((_a))\n#define sudo_lbuf_append sudo_lbuf_append_v1\n#define sudo_lbuf_append_quoted sudo_lbuf_append_quoted_v1\n#define sudo_lbuf_print(_a) sudo_lbuf_print_v1((_a))\n#define sudo_lbuf_error(_a) sudo_lbuf_error_v1((_a))\n#define sudo_lbuf_clearerr(_a) sudo_lbuf_clearerr_v1((_a))\n\n#endif /* SUDO_LBUF_H */\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 1994-1996, 1998-2021 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * Sponsored in part by the Defense Advanced Research Projects\n * Agency (DARPA) and Air Force Research Laboratory, Air Force\n * Materiel Command, USAF, under agreement number F39502-99-1-0512.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <netinet/in.h>\n\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <grp.h>\n#include <locale.h>\n#include <pwd.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <syslog.h>\n#include <time.h>\n#include <unistd.h>\n\n#include \"pathnames.h\"\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_json.h\"\n#include \"sudo_queue.h\"\n#include \"sudo_util.h\"\n\n#define\tLL_HOST_STR\t\"HOST=\"\n#define\tLL_TTY_STR\t\"TTY=\"\n#define\tLL_CHROOT_STR\t\"CHROOT=\"\n#define\tLL_CWD_STR\t\"PWD=\"\n#define\tLL_USER_STR\t\"USER=\"\n#define\tLL_GROUP_STR\t\"GROUP=\"\n#define\tLL_ENV_STR\t\"ENV=\"\n#define\tLL_CMND_STR\t\"COMMAND=\"\n#define\tLL_TSID_STR\t\"TSID=\"\n#define\tLL_EXIT_STR\t\"EXIT=\"\n#define\tLL_SIGNAL_STR\t\"SIGNAL=\"\n\n#define IS_SESSID(s) ( \\\n    isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\\n    (s)[2] == '/' && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    (s)[5] == '/' && \\\n    isalnum((unsigned char)(s)[6]) && isalnum((unsigned char)(s)[7]) && \\\n    (s)[8] == '\\0')\n\nstruct eventlog_args {\n    const char *reason;\n    const char *errstr;\n    const struct timespec *event_time;\n    eventlog_json_callback_t json_info_cb;\n    void *json_info;\n};\n\n/*\n * Allocate and fill in a new logline.\n */\nstatic char *\nnew_logline(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *line = NULL, *evstr = NULL;\n    const char *iolog_file;\n    const char *tty, *tsid = NULL;\n    char exit_str[(((sizeof(int) * 8) + 2) / 3) + 2];\n    char sessid[7], offsetstr[64] = \"\";\n    size_t len = 0;\n    int i;\n    debug_decl(new_logline, SUDO_DEBUG_UTIL);\n\n    if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {\n\tif (args->reason != NULL) {\n\t    if (args->errstr != NULL) {\n\t\tif (asprintf(&line, \"%s: %s\", args->reason, args->errstr) == -1)\n\t\t    goto oom;\n\t    } else {\n\t\tif ((line = strdup(args->reason)) == NULL)\n\t\t    goto oom;\n\t    }\n\t}\n\tdebug_return_str(line);\n    }\n\n    /* A TSID may be a sudoers-style session ID or a free-form string. */\n    iolog_file = evlog->iolog_file;\n    if (iolog_file != NULL) {\n\tif (IS_SESSID(iolog_file)) {\n\t    sessid[0] = iolog_file[0];\n\t    sessid[1] = iolog_file[1];\n\t    sessid[2] = iolog_file[3];\n\t    sessid[3] = iolog_file[4];\n\t    sessid[4] = iolog_file[6];\n\t    sessid[5] = iolog_file[7];\n\t    sessid[6] = '\\0';\n\t    tsid = sessid;\n\t} else {\n\t    tsid = iolog_file;\n\t}\n\tif (sudo_timespecisset(&evlog->iolog_offset)) {\n\t    /* Only write up to two significant digits for the decimal part. */\n\t    if (evlog->iolog_offset.tv_nsec > 10000000) {\n\t\t(void)snprintf(offsetstr, sizeof(offsetstr), \"@%lld.%02ld\",\n\t\t    (long long)evlog->iolog_offset.tv_sec,\n\t\t    evlog->iolog_offset.tv_nsec / 10000000);\n\t    } else if (evlog->iolog_offset.tv_sec != 0) {\n\t\t(void)snprintf(offsetstr, sizeof(offsetstr), \"@%lld\",\n\t\t    (long long)evlog->iolog_offset.tv_sec);\n\t    }\n\t}\n    }\n\n    /* Sudo-format logs use the short form of the ttyname. */\n    if ((tty = evlog->ttyname) != NULL) {\n\tif (strncmp(tty, _PATH_DEV, sizeof(_PATH_DEV) - 1) == 0)\n\t    tty += sizeof(_PATH_DEV) - 1;\n    }\n\n    /*\n     * Compute line length\n     */\n    if (args->reason != NULL)\n\tlen += strlen(args->reason) + 3;\n    if (args->errstr != NULL)\n\tlen += strlen(args->errstr) + 3;\n    if (evlog->submithost != NULL && !evl_conf->omit_hostname)\n\tlen += sizeof(LL_HOST_STR) + 2 + strlen(evlog->submithost);\n    if (tty != NULL)\n\tlen += sizeof(LL_TTY_STR) + 2 + strlen(tty);\n    if (evlog->runchroot != NULL)\n\tlen += sizeof(LL_CHROOT_STR) + 2 + strlen(evlog->runchroot);\n    if (evlog->runcwd != NULL)\n\tlen += sizeof(LL_CWD_STR) + 2 + strlen(evlog->runcwd);\n    if (evlog->runuser != NULL)\n\tlen += sizeof(LL_USER_STR) + 2 + strlen(evlog->runuser);\n    if (evlog->rungroup != NULL)\n\tlen += sizeof(LL_GROUP_STR) + 2 + strlen(evlog->rungroup);\n    if (tsid != NULL) {\n\tlen += sizeof(LL_TSID_STR) + 2 + strlen(tsid) + strlen(offsetstr);\n    }\n    if (evlog->env_add != NULL) {\n\tsize_t evlen = 0;\n\tchar * const *ep;\n\n\tfor (ep = evlog->env_add; *ep != NULL; ep++)\n\t    evlen += strlen(*ep) + 1;\n\tif (evlen != 0) {\n\t    if ((evstr = malloc(evlen)) == NULL)\n\t\tgoto oom;\n\t    ep = evlog->env_add;\n\t    if (strlcpy(evstr, *ep, evlen) >= evlen)\n\t\tgoto toobig;\n\t    while (*++ep != NULL) {\n\t\tif (strlcat(evstr, \" \", evlen) >= evlen ||\n\t\t    strlcat(evstr, *ep, evlen) >= evlen)\n\t\t    goto toobig;\n\t    }\n\t    len += sizeof(LL_ENV_STR) + 2 + evlen;\n\t}\n    }\n    if (evlog->command != NULL) {\n\tlen += sizeof(LL_CMND_STR) - 1 + strlen(evlog->command);\n\tif (evlog->argv != NULL && evlog->argv[0] != NULL) {\n\t    for (i = 1; evlog->argv[i] != NULL; i++)\n\t\tlen += strlen(evlog->argv[i]) + 1;\n\t}\n\tif (event_type == EVLOG_EXIT) {\n\t    if (evlog->signal_name != NULL)\n\t\tlen += sizeof(LL_SIGNAL_STR) + 2 + strlen(evlog->signal_name);\n\t    if (evlog->exit_value != -1) {\n\t\t(void)snprintf(exit_str, sizeof(exit_str), \"%d\", evlog->exit_value);\n\t\tlen += sizeof(LL_EXIT_STR) + 2 + strlen(exit_str);\n\t    }\n\t}\n    }\n\n    /*\n     * Allocate and build up the line.\n     */\n    if ((line = malloc(++len)) == NULL)\n\tgoto oom;\n    line[0] = '\\0';\n\n    if (args->reason != NULL) {\n\tif (strlcat(line, args->reason, len) >= len ||\n\t    strlcat(line, args->errstr ? \" : \" : \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (args->errstr != NULL) {\n\tif (strlcat(line, args->errstr, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evlog->submithost != NULL && !evl_conf->omit_hostname) {\n\tif (strlcat(line, LL_HOST_STR, len) >= len ||\n\t    strlcat(line, evlog->submithost, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (tty != NULL) {\n\tif (strlcat(line, LL_TTY_STR, len) >= len ||\n\t    strlcat(line, tty, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evlog->runchroot != NULL) {\n\tif (strlcat(line, LL_CHROOT_STR, len) >= len ||\n\t    strlcat(line, evlog->runchroot, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evlog->runcwd != NULL) {\n\tif (strlcat(line, LL_CWD_STR, len) >= len ||\n\t    strlcat(line, evlog->runcwd, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evlog->runuser != NULL) {\n\tif (strlcat(line, LL_USER_STR, len) >= len ||\n\t    strlcat(line, evlog->runuser, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evlog->rungroup != NULL) {\n\tif (strlcat(line, LL_GROUP_STR, len) >= len ||\n\t    strlcat(line, evlog->rungroup, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (tsid != NULL) {\n\tif (strlcat(line, LL_TSID_STR, len) >= len ||\n\t    strlcat(line, tsid, len) >= len ||\n\t    strlcat(line, offsetstr, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n    }\n    if (evstr != NULL) {\n\tif (strlcat(line, LL_ENV_STR, len) >= len ||\n\t    strlcat(line, evstr, len) >= len ||\n\t    strlcat(line, \" ; \", len) >= len)\n\t    goto toobig;\n\tfree(evstr);\n\tevstr = NULL;\n    }\n    if (evlog->command != NULL) {\n\tif (strlcat(line, LL_CMND_STR, len) >= len)\n\t    goto toobig;\n\tif (strlcat(line, evlog->command, len) >= len)\n\t    goto toobig;\n\tif (evlog->argv != NULL && evlog->argv[0] != NULL) {\n\t    for (i = 1; evlog->argv[i] != NULL; i++) {\n\t\tif (strlcat(line, \" \", len) >= len ||\n\t\t    strlcat(line, evlog->argv[i], len) >= len)\n\t\t    goto toobig;\n\t    }\n\t}\n\tif (event_type == EVLOG_EXIT) {\n\t    if (evlog->signal_name != NULL) {\n\t\tif (strlcat(line, \" ; \", len) >= len ||\n\t\t    strlcat(line, LL_SIGNAL_STR, len) >= len ||\n\t\t    strlcat(line, evlog->signal_name, len) >= len)\n\t\t    goto toobig;\n\t    }\n\t    if (evlog->exit_value != -1) {\n\t\tif (strlcat(line, \" ; \", len) >= len ||\n\t\t    strlcat(line, LL_EXIT_STR, len) >= len ||\n\t\t    strlcat(line, exit_str, len) >= len)\n\t\t    goto toobig;\n\t    }\n\t}\n    }\n\n    debug_return_str(line);\noom:\n    free(evstr);\n    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    debug_return_str(NULL);\ntoobig:\n    free(evstr);\n    free(line);\n    sudo_warnx(U_(\"internal error, %s overflow\"), __func__);\n    debug_return_str(NULL);\n}\n\nstatic void\nclosefrom_nodebug(int lowfd)\n{\n    unsigned char *debug_fds;\n    int fd, startfd;\n    debug_decl(closefrom_nodebug, SUDO_DEBUG_UTIL);\n\n    startfd = sudo_debug_get_fds(&debug_fds) + 1;\n    if (lowfd > startfd)\n\tstartfd = lowfd;\n\n    /* Close fds higher than the debug fds. */\n    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\"closing fds >= %d\", startfd);\n    closefrom(startfd);\n\n    /* Close fds [lowfd, startfd) that are not in debug_fds. */\n    for (fd = lowfd; fd < startfd; fd++) {\n\tif (sudo_isset(debug_fds, fd))\n\t    continue;\n\tsudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t    \"closing fd %d\", fd);\n#ifdef __APPLE__\n\t/* Avoid potential libdispatch crash when we close its fds. */\n\t(void) fcntl(fd, F_SETFD, FD_CLOEXEC);\n#else\n\t(void) close(fd);\n#endif\n    }\n    debug_return;\n}\n\n#define MAX_MAILFLAGS\t63\n\nsudo_noreturn static void\nexec_mailer(int pipein)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *last, *mflags, *p, *argv[MAX_MAILFLAGS + 1];\n    const char *mpath = evl_conf->mailerpath;\n    int i;\n    const char * const root_envp[] = {\n\t\"HOME=/\",\n\t\"PATH=/usr/bin:/bin:/usr/sbin:/sbin\",\n\t\"LOGNAME=root\",\n\t\"USER=root\",\n# ifdef _AIX\n\t\"LOGIN=root\",\n# endif\n\tNULL\n    };\n    debug_decl(exec_mailer, SUDO_DEBUG_UTIL);\n\n    /* Set stdin to read side of the pipe. */\n    if (dup3(pipein, STDIN_FILENO, 0) == -1) {\n\tsyslog(LOG_ERR, _(\"unable to dup stdin: %m\")); // -V618\n\tsudo_debug_printf(SUDO_DEBUG_ERROR,\n\t    \"unable to dup stdin: %s\", strerror(errno));\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(127);\n    }\n\n    /* Build up an argv based on the mailer path and flags */\n    if ((mflags = strdup(evl_conf->mailerflags)) == NULL) {\n\tsyslog(LOG_ERR, _(\"unable to allocate memory\")); // -V618\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(127);\n    }\n    argv[0] = sudo_basename(mpath);\n\n    i = 1;\n    if ((p = strtok_r(mflags, \" \\t\", &last))) {\n\tdo {\n\t    argv[i] = p;\n\t} while (++i < MAX_MAILFLAGS && (p = strtok_r(NULL, \" \\t\", &last)));\n    }\n    argv[i] = NULL;\n\n    /*\n     * Depending on the config, either run the mailer as root\n     * (so user cannot kill it) or as the user (for the paranoid).\n     */\n    if (setuid(ROOT_UID) != 0) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to change uid to %u\",\n\t    ROOT_UID);\n    }\n    if (evl_conf->mailuid != ROOT_UID) {\n\tif (setuid(evl_conf->mailuid) != 0) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to change uid to %u\",\n\t\t(unsigned int)evl_conf->mailuid);\n\t}\n    }\n    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n    if (evl_conf->mailuid == ROOT_UID)\n\texecve(mpath, argv, (char **)root_envp);\n    else\n\texecv(mpath, argv);\n    syslog(LOG_ERR, _(\"unable to execute %s: %m\"), mpath); // -V618\n    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to execute %s: %s\",\n\tmpath, strerror(errno));\n    _exit(127);\n}\n\n/* Send a message to the mailto user */\nstatic bool\nsend_mail(const struct eventlog *evlog, const char *fmt, ...)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const char *cp, *timefmt = evl_conf->time_fmt;\n    struct sigaction sa;\n    char timebuf[1024];\n    sigset_t chldmask;\n    struct tm tm;\n    time_t now;\n    FILE *mail;\n    int fd, len, pfd[2], status;\n    pid_t pid, rv;\n    struct stat sb;\n    va_list ap;\n#if defined(HAVE_NL_LANGINFO) && defined(CODESET)\n    char *locale;\n#endif\n    debug_decl(send_mail, SUDO_DEBUG_UTIL);\n\n    /* If mailer is disabled just return. */\n    if (evl_conf->mailerpath == NULL || evl_conf->mailto == NULL)\n\tdebug_return_bool(true);\n\n    /* Make sure the mailer exists and is a regular file. */\n    if (stat(evl_conf->mailerpath, &sb) != 0 || !S_ISREG(sb.st_mode))\n\tdebug_return_bool(false);\n\n    time(&now);\n    if (localtime_r(&now, &tm) == NULL)\n\tdebug_return_bool(false);\n\n    /* Block SIGCHLD for the duration since we call waitpid() below. */\n    sigemptyset(&chldmask);\n    sigaddset(&chldmask, SIGCHLD);\n    (void)sigprocmask(SIG_BLOCK, &chldmask, NULL);\n\n    /* Fork and return, child will daemonize. */\n    switch (pid = sudo_debug_fork()) {\n\tcase -1:\n\t    /* Error. */\n\t    sudo_warn(\"%s\", U_(\"unable to fork\"));\n\n\t    /* Unblock SIGCHLD and return. */\n\t    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\t    debug_return_bool(false);\n\tcase 0:\n\t    /* Child. */\n\t    switch (fork()) {\n\t\tcase -1:\n\t\t    /* Error. */\n\t\t    syslog(LOG_ERR, _(\"unable to fork: %m\")); // -V618\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to fork: %s\",\n\t\t\tstrerror(errno));\n\t\t    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t\t    _exit(EXIT_FAILURE);\n\t\tcase 0:\n\t\t    /* Grandchild continues below. */\n\t\t    sudo_debug_enter(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t\t    break;\n\t\tdefault:\n\t\t    /* Parent will wait for us. */\n\t\t    _exit(EXIT_SUCCESS);\n\t    }\n\t    break;\n\tdefault:\n\t    /* Parent. */\n\t    for (;;) {\n\t\trv = waitpid(pid, &status, 0);\n\t\tif (rv == -1 && errno != EINTR)\n\t\t    break;\n\t\tif (rv != -1 && !WIFSTOPPED(status))\n\t\t    break;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\t\"child (%d) exit value %d\", (int)rv, status);\n\n\t    /* Unblock SIGCHLD and return. */\n\t    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\t    debug_return_bool(true);\n    }\n\n    /* Reset SIGCHLD to default and unblock it. */\n    memset(&sa, 0, sizeof(sa));\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    sa.sa_handler = SIG_DFL;\n    (void)sigaction(SIGCHLD, &sa, NULL);\n    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\n    /* Daemonize - disassociate from session/tty. */\n    if (setsid() == -1)\n      sudo_warn(\"setsid\");\n    if (chdir(\"/\") == -1)\n      sudo_warn(\"chdir(/)\");\n    fd = open(_PATH_DEVNULL, O_RDWR, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);\n    if (fd != -1) {\n\t(void) dup2(fd, STDIN_FILENO);\n\t(void) dup2(fd, STDOUT_FILENO);\n\t(void) dup2(fd, STDERR_FILENO);\n    }\n\n    /* Close non-debug fds so we don't leak anything. */\n    closefrom_nodebug(STDERR_FILENO + 1);\n\n    if (pipe2(pfd, O_CLOEXEC) == -1) {\n\tsyslog(LOG_ERR, _(\"unable to open pipe: %m\")); // -V618\n\tsudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to open pipe: %s\",\n\t    strerror(errno));\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(EXIT_FAILURE);\n    }\n\n    switch (pid = sudo_debug_fork()) {\n\tcase -1:\n\t    /* Error. */\n\t    syslog(LOG_ERR, _(\"unable to fork: %m\")); // -V618\n\t    sudo_debug_printf(\n\t\tSUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t\t\"unable to fork\");\n\t    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t    _exit(EXIT_FAILURE);\n\t    break;\n\tcase 0:\n\t    /* Child. */\n\t    exec_mailer(pfd[0]);\n\t    /* NOTREACHED */\n    }\n\n    (void) close(pfd[0]);\n    if ((mail = fdopen(pfd[1], \"w\")) == NULL) {\n\tsyslog(LOG_ERR, \"fdopen: %m\");\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to fdopen pipe\");\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(EXIT_FAILURE);\n    }\n\n    /* Pipes are all setup, send message. */\n    (void) fprintf(mail, \"To: %s\\nFrom: %s\\nAuto-Submitted: %s\\nSubject: \",\n\tevl_conf->mailto,\n\tevl_conf->mailfrom ? evl_conf->mailfrom :\n\t(evlog ? evlog->submituser : \"root\"),\n\t\"auto-generated\");\n    for (cp = _(evl_conf->mailsub); *cp; cp++) {\n\t/* Expand escapes in the subject */\n\tif (*cp == '%' && *(cp+1) != '%') {\n\t    switch (*(++cp)) {\n\t\tcase 'h':\n\t\t    if (evlog != NULL)\n\t\t\t(void) fputs(evlog->submithost, mail);\n\t\t    break;\n\t\tcase 'u':\n\t\t    if (evlog != NULL)\n\t\t\t(void) fputs(evlog->submituser, mail);\n\t\t    break;\n\t\tdefault:\n\t\t    cp--;\n\t\t    break;\n\t    }\n\t} else\n\t    (void) fputc(*cp, mail);\n    }\n\n#if defined(HAVE_NL_LANGINFO) && defined(CODESET)\n    locale = setlocale(LC_ALL, NULL);\n    if (locale[0] != 'C' || locale[1] != '\\0')\n\t(void) fprintf(mail, \"\\nContent-Type: text/plain; charset=\\\"%s\\\"\\nContent-Transfer-Encoding: 8bit\", nl_langinfo(CODESET));\n#endif /* HAVE_NL_LANGINFO && CODESET */\n\n    timebuf[sizeof(timebuf) - 1] = '\\0';\n    len = strftime(timebuf, sizeof(timebuf), timefmt, &tm);\n    if (len == 0 || timebuf[sizeof(timebuf) - 1] != '\\0') {\n\tsudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_ERROR,\n\t    \"strftime() failed to format time: %s\", timefmt);\n\t/* Fall back to default time format string. */\n\ttimebuf[sizeof(timebuf) - 1] = '\\0';\n\tlen = strftime(timebuf, sizeof(timebuf), \"%h %e %T\", &tm);\n\tif (len == 0 || timebuf[sizeof(timebuf) - 1] != '\\0') {\n\t    timebuf[0] = '\\0';\t\t/* give up */\n\t}\n    }\n    if (evlog != NULL) {\n\t(void) fprintf(mail, \"\\n\\n%s : %s : %s : \", evlog->submithost, timebuf,\n\t    evlog->submituser);\n    } else {\n\t(void) fprintf(mail, \"\\n\\n%s : \", timebuf);\n    }\n    va_start(ap, fmt);\n    (void) vfprintf(mail, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\\n\", mail);\n\n    fclose(mail);\n    for (;;) {\n\trv = waitpid(pid, &status, 0);\n\tif (rv == -1 && errno != EINTR)\n\t    break;\n\tif (rv != -1 && !WIFSTOPPED(status))\n\t    break;\n    }\n    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\"child (%d) exit value %d\", (int)rv, status);\n    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n    _exit(EXIT_SUCCESS);\n}\n\nstatic bool\njson_add_timestamp(struct json_container *jsonc, const char *name,\n    const struct timespec *ts, bool format_timestamp)\n{\n    struct json_value json_value;\n    int len;\n    debug_decl(json_add_timestamp, SUDO_DEBUG_PLUGIN);\n\n    if (!sudo_json_open_object(jsonc, name))\n\tgoto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = ts->tv_sec;\n    if (!sudo_json_add_value(jsonc, \"seconds\", &json_value))\n\tgoto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = ts->tv_nsec;\n    if (!sudo_json_add_value(jsonc, \"nanoseconds\", &json_value))\n\tgoto oom;\n\n    if (format_timestamp) {\n\tconst struct eventlog_config *evl_conf = eventlog_getconf();\n\tconst char *timefmt = evl_conf->time_fmt;\n\ttime_t secs = ts->tv_sec;\n\tchar timebuf[1024];\n\tstruct tm tm;\n\n\tif (gmtime_r(&secs, &tm) != NULL) {\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    len = strftime(timebuf, sizeof(timebuf), \"%Y%m%d%H%M%SZ\", &tm);\n\t    if (len != 0 && timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\tjson_value.type = JSON_STRING;\n\t\tjson_value.u.string = timebuf; // -V507\n\t\tif (!sudo_json_add_value(jsonc, \"iso8601\", &json_value))\n\t\t    goto oom;\n\t    }\n\t}\n\n\tif (localtime_r(&secs, &tm) != NULL) {\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    len = strftime(timebuf, sizeof(timebuf), timefmt, &tm);\n\t    if (len != 0 && timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\tjson_value.type = JSON_STRING;\n\t\tjson_value.u.string = timebuf; // -V507\n\t\tif (!sudo_json_add_value(jsonc, \"localtime\", &json_value))\n\t\t    goto oom;\n\t    }\n\t}\n    }\n\n    if (!sudo_json_close_object(jsonc))\n\tgoto oom;\n\n    debug_return_bool(true);\noom:\n    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t\"%s: %s\", __func__, \"unable to allocate memory\");\n    debug_return_bool(false);\n}\n\n/*\n * Store the contents of struct eventlog as JSON.\n * The submit_time and iolog_path members are not stored, they should\n * be stored and formatted by the caller.\n */\nbool\neventlog_store_json(struct json_container *jsonc, const struct eventlog *evlog)\n{\n    struct json_value json_value;\n    size_t i;\n    char *cp;\n    debug_decl(eventlog_store_json, SUDO_DEBUG_UTIL);\n\n    /* Required settings. */\n    if (evlog == NULL || evlog->submituser == NULL)\n\tdebug_return_bool(false);\n\n    /*\n     * The most important values are written first in case\n     * the log record gets truncated.\n     * Note: submit_time and iolog_path are not stored here.\n     */\n\n    json_value.type = JSON_STRING;\n    json_value.u.string = evlog->submituser;\n    if (!sudo_json_add_value(jsonc, \"submituser\", &json_value))\n\tgoto oom;\n\n    if (evlog->command != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->command;\n\tif (!sudo_json_add_value(jsonc, \"command\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runuser != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runuser;\n\tif (!sudo_json_add_value(jsonc, \"runuser\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->rungroup != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->rungroup;\n\tif (!sudo_json_add_value(jsonc, \"rungroup\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runchroot != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runchroot;\n\tif (!sudo_json_add_value(jsonc, \"runchroot\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runcwd != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runcwd;\n\tif (!sudo_json_add_value(jsonc, \"runcwd\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->ttyname != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->ttyname;\n\tif (!sudo_json_add_value(jsonc, \"ttyname\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->submithost != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->submithost;\n\tif (!sudo_json_add_value(jsonc, \"submithost\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->cwd != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->cwd;\n\tif (!sudo_json_add_value(jsonc, \"submitcwd\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->rungroup!= NULL && evlog->rungid != (gid_t)-1) {\n\tjson_value.type = JSON_ID;\n\tjson_value.u.id = evlog->rungid;\n\tif (!sudo_json_add_value(jsonc, \"rungid\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runuid != (uid_t)-1) {\n\tjson_value.type = JSON_ID;\n\tjson_value.u.id = evlog->runuid;\n\tif (!sudo_json_add_value(jsonc, \"runuid\", &json_value))\n\t    goto oom;\n    }\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = evlog->columns;\n    if (!sudo_json_add_value(jsonc, \"columns\", &json_value))\n        goto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = evlog->lines;\n    if (!sudo_json_add_value(jsonc, \"lines\", &json_value))\n        goto oom;\n\n    if (evlog->argv != NULL) {\n\tif (!sudo_json_open_array(jsonc, \"runargv\"))\n\t    goto oom;\n\tfor (i = 0; (cp = evlog->argv[i]) != NULL; i++) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = cp;\n\t    if (!sudo_json_add_value(jsonc, NULL, &json_value))\n\t\tgoto oom;\n\t}\n\tif (!sudo_json_close_array(jsonc))\n\t    goto oom;\n    }\n\n    if (evlog->envp != NULL) {\n\tif (!sudo_json_open_array(jsonc, \"runenv\"))\n\t    goto oom;\n\tfor (i = 0; (cp = evlog->envp[i]) != NULL; i++) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = cp;\n\t    if (!sudo_json_add_value(jsonc, NULL, &json_value))\n\t\tgoto oom;\n\t}\n\tif (!sudo_json_close_array(jsonc))\n\t    goto oom;\n    }\n\n    debug_return_bool(true);\n\noom:\n    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    debug_return_bool(false);\n}\n\nstatic bool\ndefault_json_cb(struct json_container *jsonc, void *v)\n{\n    return eventlog_store_json(jsonc, v);\n}\n\nstatic char *\nformat_json(int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog, bool compact)\n{\n    eventlog_json_callback_t info_cb = args->json_info_cb;\n    void *info = args->json_info;\n    struct json_container jsonc = { 0 };\n    struct json_value json_value;\n    const char *time_str, *type_str;\n    struct timespec now;\n    debug_decl(format_json, SUDO_DEBUG_UTIL);\n\n    if (info_cb == NULL) {\n\tinfo_cb = default_json_cb;\n\tinfo = (void *)evlog;\n    }\n\n    if (sudo_gettime_real(&now) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to read the clock\");\n\tdebug_return_str(NULL);\n    }\n\n    switch (event_type) {\n    case EVLOG_ACCEPT:\n\ttype_str = \"accept\";\n\ttime_str = \"submit_time\";\n\tbreak;\n    case EVLOG_REJECT:\n\ttype_str = \"reject\";\n\ttime_str = \"submit_time\";\n\tbreak;\n    case EVLOG_ALERT:\n\ttype_str = \"alert\";\n\ttime_str = \"alert_time\";\n\tbreak;\n    case EVLOG_EXIT:\n\ttype_str = \"exit\";\n\ttime_str = \"exit_time\";\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected event type %d\", event_type);\n\tdebug_return_str(NULL);\n    }\n\n    if (!sudo_json_init(&jsonc, 4, compact, false, false))\n\tgoto bad;\n    if (!sudo_json_open_object(&jsonc, type_str))\n\tgoto bad;\n\n    if (evlog != NULL && evlog->uuid_str[0] != '\\0') {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->uuid_str;\n\tif (!sudo_json_add_value(&jsonc, \"uuid\", &json_value))\n\t    goto bad;\n    }\n\n    /* Reject and Alert events include a reason and optional error string. */\n    if (args->reason != NULL) {\n\tchar *ereason = NULL;\n\n\tif (args->errstr != NULL) {\n\t    const int len = asprintf(&ereason, _(\"%s: %s\"), args->reason,\n\t\targs->errstr);\n\t    if (len == -1) {\n\t\tsudo_warnx(U_(\"%s: %s\"), __func__,\n\t\t    U_(\"unable to allocate memory\"));\n\t\tgoto bad;\n\t    }\n\t}\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = ereason ? ereason : args->reason;\n\tif (!sudo_json_add_value(&jsonc, \"reason\", &json_value)) {\n\t    free(ereason);\n\t    goto bad;\n\t}\n\tfree(ereason);\n    }\n\n    /* Log event time on server (set earlier) */\n    if (!json_add_timestamp(&jsonc, \"server_time\", &now, true)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unable format timestamp\");\n\tgoto bad;\n    }\n\n    /* Log event time from client */\n    if (args->event_time != NULL) {\n\tif (!json_add_timestamp(&jsonc, time_str, args->event_time, true)) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\"unable format timestamp\");\n\t    goto bad;\n\t}\n    }\n\n    if (event_type == EVLOG_EXIT) {\n\t/* Exit events don't need evlog details if there is a UUID. */\n\tif (evlog != NULL && evlog->uuid_str[0] != '\\0') {\n\t    if (args->json_info == NULL)\n\t\tinfo = NULL;\n\t}\n\n\tif (sudo_timespecisset(&evlog->run_time)) {\n\t    if (!json_add_timestamp(&jsonc, \"run_time\", &evlog->run_time, false)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable format timestamp\");\n\t\tgoto bad;\n\t    }\n\t}\n\tif (evlog->signal_name != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->signal_name;\n\t    if (!sudo_json_add_value(&jsonc, \"signal\", &json_value))\n\t\tgoto bad;\n\n\t    json_value.type = JSON_BOOL;\n\t    json_value.u.boolean = evlog->dumped_core;\n\t    if (!sudo_json_add_value(&jsonc, \"dumped_core\", &json_value))\n\t\tgoto bad;\n\t}\n\tjson_value.type = JSON_NUMBER;\n\tjson_value.u.number = evlog->exit_value;\n\tif (!sudo_json_add_value(&jsonc, \"exit_value\", &json_value))\n\t    goto bad;\n    }\n\n     /* Event log info may be missing for alert messages. */\n     if (evlog != NULL) {\n\tif (evlog->peeraddr != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->peeraddr;\n\t    if (!sudo_json_add_value(&jsonc, \"peeraddr\", &json_value))\n\t\tgoto bad;\n\t}\n\n\tif (evlog->iolog_path != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->iolog_path;\n\t    if (!sudo_json_add_value(&jsonc, \"iolog_path\", &json_value))\n\t\tgoto bad;\n\n\t    if (sudo_timespecisset(&evlog->iolog_offset)) {\n\t\tif (!json_add_timestamp(&jsonc, \"iolog_offset\", &evlog->iolog_offset, false)) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"unable format timestamp\");\n\t\t    goto bad;\n\t\t}\n\t    }\n\t}\n    }\n\n    /* Write log info. */\n    if (info != NULL) {\n\tif (!info_cb(&jsonc, info))\n\t    goto bad;\n    }\n\n    if (!sudo_json_close_object(&jsonc))\n\tgoto bad;\n\n    /* Caller is responsible for freeing the buffer. */\n    debug_return_str(sudo_json_get_buf(&jsonc));\n\nbad:\n    sudo_json_free(&jsonc);\n    debug_return_str(NULL);\n}\n\n/*\n * Log a message to syslog, prepending the username and splitting the\n * message into parts if it is longer than syslog_maxlen.\n */\nstatic bool\ndo_syslog_sudo(int pri, char *logline, const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    size_t len, maxlen;\n    char *p, *tmp, save;\n    const char *fmt;\n    debug_decl(do_syslog_sudo, SUDO_DEBUG_UTIL);\n\n    evl_conf->open_log(EVLOG_SYSLOG, NULL);\n\n    if (evlog == NULL) {\n\t/* Not a command, just log it as-is. */\n\tsyslog(pri, \"%s\", logline);\n\tgoto done;\n    }\n\n    /*\n     * Log the full line, breaking into multiple syslog(3) calls if necessary\n     */\n    fmt = _(\"%8s : %s\");\n    maxlen = evl_conf->syslog_maxlen -\n\t(strlen(fmt) - 5 + strlen(evlog->submituser));\n    for (p = logline; *p != '\\0'; ) {\n\tlen = strlen(p);\n\tif (len > maxlen) {\n\t    /*\n\t     * Break up the line into what will fit on one syslog(3) line\n\t     * Try to avoid breaking words into several lines if possible.\n\t     */\n\t    tmp = memrchr(p, ' ', maxlen);\n\t    if (tmp == NULL)\n\t\ttmp = p + maxlen;\n\n\t    /* NULL terminate line, but save the char to restore later */\n\t    save = *tmp;\n\t    *tmp = '\\0';\n\n\t    syslog(pri, fmt, evlog->submituser, p);\n\n\t    *tmp = save;\t\t\t/* restore saved character */\n\n\t    /* Advance p and eliminate leading whitespace */\n\t    for (p = tmp; *p == ' '; p++)\n\t\tcontinue;\n\t} else {\n\t    syslog(pri, fmt, evlog->submituser, p);\n\t    p += len;\n\t}\n\tfmt = _(\"%8s : (command continued) %s\");\n\tmaxlen = evl_conf->syslog_maxlen -\n\t    (strlen(fmt) - 5 + strlen(evlog->submituser));\n    }\ndone:\n    evl_conf->close_log(EVLOG_SYSLOG, NULL);\n\n    debug_return_bool(true);\n}\n\nstatic bool\ndo_syslog_json(int pri, int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *json_str;\n    debug_decl(do_syslog_json, SUDO_DEBUG_UTIL);\n\n    /* Format as a compact JSON message (no newlines) */\n    json_str = format_json(event_type, args, evlog, true);\n    if (json_str == NULL)\n\tdebug_return_bool(false);\n\n    /* Syslog it in a sudo object with a @cee: prefix. */\n    /* TODO: use evl_conf->syslog_maxlen to break up long messages. */\n    evl_conf->open_log(EVLOG_SYSLOG, NULL);\n    syslog(pri, \"@cee:{\\\"sudo\\\":{%s}}\", json_str);\n    evl_conf->close_log(EVLOG_SYSLOG, NULL);\n    free(json_str);\n    debug_return_bool(true);\n}\n\n/*\n * Log a message to syslog in either sudo or JSON format.\n */\nstatic bool\ndo_syslog(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *logline = NULL;\n    bool ret = false;\n    int pri;\n    debug_decl(do_syslog, SUDO_DEBUG_UTIL);\n\n    /* Sudo format logs and mailed logs use the same log line format. */\n    if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {\n\tlogline = new_logline(event_type, flags, args, evlog);\n\tif (logline == NULL)\n\t    debug_return_bool(false);\n\n\tif (ISSET(flags, EVLOG_MAIL)) {\n\t    if (!send_mail(evlog, \"%s\", logline)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to mail log line\");\n\t    }\n\t    if (ISSET(flags, EVLOG_MAIL_ONLY)) {\n\t\tfree(logline);\n\t\tdebug_return_bool(true);\n\t    }\n\t}\n    }\n\n    switch (event_type) {\n    case EVLOG_ACCEPT:\n    case EVLOG_EXIT:\n\tpri = evl_conf->syslog_acceptpri;\n\tbreak;\n    case EVLOG_REJECT:\n\tpri = evl_conf->syslog_rejectpri;\n\tbreak;\n    case EVLOG_ALERT:\n\tpri = evl_conf->syslog_alertpri;\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected event type %d\", event_type);\n\tpri = -1;\n\tbreak;\n    }\n    if (pri == -1) {\n\t/* syslog disabled for this message type */\n\tfree(logline);\n\tdebug_return_bool(true);\n    }\n\n    switch (evl_conf->format) {\n    case EVLOG_SUDO:\n\tret = do_syslog_sudo(pri, logline, evlog);\n\tbreak;\n    case EVLOG_JSON:\n\tret = do_syslog_json(pri, event_type, args, evlog);\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected eventlog format %d\", evl_conf->format);\n\tbreak;\n    }\n    free(logline);\n\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile_sudo(const char *logline, const struct eventlog *evlog,\n    const struct timespec *event_time)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *full_line, timebuf[8192], *timestr = NULL;\n    const char *timefmt = evl_conf->time_fmt;\n    const char *logfile = evl_conf->logpath;\n    struct tm tm;\n    bool ret = false;\n    FILE *fp;\n    int len;\n    debug_decl(do_logfile_sudo, SUDO_DEBUG_UTIL);\n\n    if ((fp = evl_conf->open_log(EVLOG_FILE, logfile)) == NULL)\n\tdebug_return_bool(false);\n\n    if (!sudo_lock_file(fileno(fp), SUDO_LOCK)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to lock log file %s\", logfile);\n\tgoto done;\n    }\n\n    if (event_time != NULL) {\n\ttime_t tv_sec = event_time->tv_sec;\n\tif (localtime_r(&tv_sec, &tm) != NULL) {\n\t    /* strftime() does not guarantee to NUL-terminate so we must check. */\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    if (strftime(timebuf, sizeof(timebuf), timefmt, &tm) != 0 &&\n\t\t    timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\ttimestr = timebuf;\n\t    }\n\t}\n    }\n    if (evlog != NULL) {\n\tlen = asprintf(&full_line, \"%s : %s : %s\",\n\t    timestr ? timestr : \"invalid date\", evlog->submituser, logline);\n    } else {\n\tlen = asprintf(&full_line, \"%s : %s\",\n\t    timestr ? timestr : \"invalid date\", logline);\n    }\n    if (len == -1) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tgoto done;\n    }\n    eventlog_writeln(fp, full_line, len, evl_conf->file_maxlen);\n    free(full_line);\n    (void)fflush(fp);\n    if (ferror(fp)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to write log file %s\", logfile);\n\tgoto done;\n    }\n    ret = true;\n\ndone:\n    (void)sudo_lock_file(fileno(fp), SUDO_UNLOCK);\n    evl_conf->close_log(EVLOG_FILE, fp);\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile_json(int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const char *logfile = evl_conf->logpath;\n    struct stat sb;\n    char *json_str;\n    int ret = false;\n    FILE *fp;\n    debug_decl(do_logfile_json, SUDO_DEBUG_UTIL);\n\n    if ((fp = evl_conf->open_log(EVLOG_FILE, logfile)) == NULL)\n\tdebug_return_bool(false);\n\n    json_str = format_json(event_type, args, evlog, false);\n    if (json_str == NULL)\n\tgoto done;\n\n    if (!sudo_lock_file(fileno(fp), SUDO_LOCK)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to lock log file %s\", logfile);\n\tgoto done;\n    }\n\n    /* Note: assumes file ends in \"\\n}\\n\" */\n    if (fstat(fileno(fp), &sb) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t    \"unable to stat %s\", logfile);\n\tgoto done;\n    }\n    if (sb.st_size == 0) {\n\t/* New file */\n\tputc('{', fp);\n    } else if (fseeko(fp, -3, SEEK_END) == 0) {\n\t/* Continue file, overwrite the final \"\\n}\\n\" */\n\tputc(',', fp);\n    } else {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t    \"unable to seek %s\", logfile);\n\tgoto done;\n    }\n    fputs(json_str, fp);\n    fputs(\"\\n}\\n\", fp);\t\t\t/* close JSON */\n    fflush(fp);\n    /* XXX - check for file error and recover */\n\n    ret = true;\n\ndone:\n    free(json_str);\n    (void)sudo_lock_file(fileno(fp), SUDO_UNLOCK);\n    evl_conf->close_log(EVLOG_FILE, fp);\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    bool ret = false;\n    char *logline = NULL;\n    debug_decl(do_logfile, SUDO_DEBUG_UTIL);\n\n    /* Sudo format logs and mailed logs use the same log line format. */\n    if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {\n\tlogline = new_logline(event_type, flags, args, evlog);\n\tif (logline == NULL)\n\t    debug_return_bool(false);\n\n\tif (ISSET(flags, EVLOG_MAIL)) {\n\t    if (!send_mail(evlog, \"%s\", logline)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to mail log line\");\n\t    }\n\t    if (ISSET(flags, EVLOG_MAIL_ONLY)) {\n\t\tfree(logline);\n\t\tdebug_return_bool(true);\n\t    }\n\t}\n    }\n\n    switch (evl_conf->format) {\n    case EVLOG_SUDO:\n\tret = do_logfile_sudo(logline ? logline : args->reason, evlog,\n\t    args->event_time);\n\tbreak;\n    case EVLOG_JSON:\n\tret = do_logfile_json(event_type, args, evlog);\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected eventlog format %d\", evl_conf->format);\n\tbreak;\n    }\n    free(logline);\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_accept(const struct eventlog *evlog, int flags,\n    eventlog_json_callback_t info_cb, void *info)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_accept, SUDO_DEBUG_UTIL);\n\n    args.event_time = &evlog->submit_time;\n    args.json_info_cb = info_cb;\n    args.json_info = info;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_ACCEPT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_ACCEPT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_reject(const struct eventlog *evlog, int flags, const char *reason,\n    eventlog_json_callback_t info_cb, void *info)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_reject, SUDO_DEBUG_UTIL);\n\n    args.reason = reason;\n    args.event_time = &evlog->submit_time;\n    args.json_info_cb = info_cb;\n    args.json_info = info;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_REJECT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_REJECT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_alert(const struct eventlog *evlog, int flags,\n    struct timespec *alert_time, const char *reason, const char *errstr)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_alert, SUDO_DEBUG_UTIL);\n\n    args.reason = reason;\n    args.errstr = errstr;\n    args.event_time = alert_time;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_ALERT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_ALERT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_exit(const struct eventlog *evlog, int flags)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    struct timespec exit_time;\n    bool ret = true;\n    debug_decl(eventlog_exit, SUDO_DEBUG_UTIL);\n\n    if (sudo_timespecisset(&evlog->run_time)) {\n\tsudo_timespecadd(&evlog->submit_time, &evlog->run_time, &exit_time);\n\targs.event_time = &exit_time;\n    }\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_EXIT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_EXIT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2020-2021 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef HAVE_STDBOOL_H\n# include <stdbool.h>\n#else\n# include \"compat/stdbool.h\"\n#endif /* HAVE_STDBOOL_H */\n#include <string.h>\n#include <unistd.h>\n#include <ctype.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <time.h>\n\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_iolog.h\"\n#include \"sudo_util.h\"\n\n#include \"iolog_json.h\"\n\nstruct json_stack {\n    unsigned int depth;\n    unsigned int maxdepth;\n    struct json_object *frames[64];\n};\n#define JSON_STACK_INTIALIZER(s) { 0, nitems((s).frames) };\n\nstatic bool\njson_store_columns(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_columns, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 1 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"tty cols %lld: out of range\", item->u.number);\n\tevlog->columns = 0;\n\tdebug_return_bool(false);\n    }\n\n    evlog->columns = item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_command(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_command, SUDO_DEBUG_UTIL);\n\n    /*\n     * Note: struct eventlog must store command + args.\n     *       We don't have argv yet so we append the args later.\n     */\n    free(evlog->command);\n    evlog->command = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_dumped_core(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_dumped_core, SUDO_DEBUG_UTIL);\n\n    evlog->dumped_core = item->u.boolean;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_exit_value(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_exit_value, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 0 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"exit value %lld: out of range\", item->u.number);\n\tevlog->exit_value = -1;\n\tdebug_return_bool(false);\n    }\n\n    evlog->exit_value = item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_lines(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_lines, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 1 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"tty lines %lld: out of range\", item->u.number);\n\tevlog->lines = 0;\n\tdebug_return_bool(false);\n    }\n\n    evlog->lines = item->u.number;\n    debug_return_bool(true);\n}\n\nchar **\njson_array_to_strvec(struct json_object *array)\n{\n    struct json_item *item;\n    int len = 0;\n    char **ret;\n    debug_decl(json_array_to_strvec, SUDO_DEBUG_UTIL);\n\n    TAILQ_FOREACH(item, &array->items, entries) {\n\t/* Can only convert arrays of string. */\n\tif (item->type != JSON_STRING) {\n\t    sudo_warnx(U_(\"expected JSON_STRING, got %d\"), item->type);\n\t    debug_return_ptr(NULL);\n\t}\n\t/* Prevent integer overflow. */\n\tif (++len == INT_MAX) {\n\t    sudo_warnx(\"%s\", U_(\"JSON_ARRAY too large\"));\n\t    debug_return_ptr(NULL);\n\t}\n    }\n    if ((ret = reallocarray(NULL, len + 1, sizeof(char *))) == NULL) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tdebug_return_ptr(NULL);\n    }\n    len = 0;\n    TAILQ_FOREACH(item, &array->items, entries) {\n\tret[len++] = item->u.string;\n\titem->u.string = NULL;\n    }\n    ret[len] = NULL;\n\n    debug_return_ptr(ret);\n}\n\nstatic bool\njson_store_runargv(struct json_item *item, struct eventlog *evlog)\n{\n    int i;\n    debug_decl(json_store_runargv, SUDO_DEBUG_UTIL);\n\n    if (evlog->argv != NULL) {\n\tfor (i = 0; evlog->argv[i] != NULL; i++)\n\t    free(evlog->argv[i]);\n\tfree(evlog->argv);\n    }\n    evlog->argv = json_array_to_strvec(&item->u.child);\n\n    debug_return_bool(evlog->argv != NULL);\n}\n\nstatic bool\njson_store_runenv(struct json_item *item, struct eventlog *evlog)\n{\n    int i;\n    debug_decl(json_store_runenv, SUDO_DEBUG_UTIL);\n\n    if (evlog->envp != NULL) {\n\tfor (i = 0; evlog->envp[i] != NULL; i++)\n\t    free(evlog->envp[i]);\n\tfree(evlog->envp);\n    }\n    evlog->envp = json_array_to_strvec(&item->u.child);\n\n    debug_return_bool(evlog->envp != NULL);\n}\n\nstatic bool\njson_store_rungid(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_rungid, SUDO_DEBUG_UTIL);\n\n    evlog->rungid = (gid_t)item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_rungroup(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_rungroup, SUDO_DEBUG_UTIL);\n\n    free(evlog->rungroup);\n    evlog->rungroup = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runuid(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runuid, SUDO_DEBUG_UTIL);\n\n    evlog->runuid = (uid_t)item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runuser(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runuser, SUDO_DEBUG_UTIL);\n\n    free(evlog->runuser);\n    evlog->runuser = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runchroot(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runchroot, SUDO_DEBUG_UTIL);\n\n    free(evlog->runchroot);\n    evlog->runchroot = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runcwd(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runcwd, SUDO_DEBUG_UTIL);\n\n    free(evlog->runcwd);\n    evlog->runcwd = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_signal(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_signal, SUDO_DEBUG_UTIL);\n\n    free(evlog->signal_name);\n    evlog->signal_name = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submitcwd(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submitcwd, SUDO_DEBUG_UTIL);\n\n    free(evlog->cwd);\n    evlog->cwd = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submithost(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submithost, SUDO_DEBUG_UTIL);\n\n    free(evlog->submithost);\n    evlog->submithost = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submituser(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submituser, SUDO_DEBUG_UTIL);\n\n    free(evlog->submituser);\n    evlog->submituser = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_timespec(struct json_item *item, struct timespec *ts)\n{\n    struct json_object *object;\n    debug_decl(json_store_timespec, SUDO_DEBUG_UTIL);\n\n    object = &item->u.child;\n    TAILQ_FOREACH(item, &object->items, entries) {\n\tif (item->type != JSON_NUMBER)\n\t    continue;\n\tif (strcmp(item->name, \"seconds\") == 0) {\n\t    ts->tv_sec = item->u.number;\n\t    continue;\n\t}\n\tif (strcmp(item->name, \"nanoseconds\") == 0) {\n\t    ts->tv_nsec = item->u.number;\n\t    continue;\n\t}\n    }\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_run_time(struct json_item *item, struct eventlog *evlog)\n{\n    return json_store_timespec(item, &evlog->run_time);\n}\n\nstatic bool\njson_store_timestamp(struct json_item *item, struct eventlog *evlog)\n{\n    return json_store_timespec(item, &evlog->submit_time);\n}\n\nstatic bool\njson_store_ttyname(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_ttyname, SUDO_DEBUG_UTIL);\n\n    free(evlog->ttyname);\n    evlog->ttyname = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic struct iolog_json_key {\n    const char *name;\n    enum json_value_type type;\n    bool (*setter)(struct json_item *, struct eventlog *);\n} iolog_json_keys[] = {\n    { \"columns\", JSON_NUMBER, json_store_columns },\n    { \"command\", JSON_STRING, json_store_command },\n    { \"dumped_core\", JSON_BOOL, json_store_dumped_core },\n    { \"exit_value\", JSON_NUMBER, json_store_exit_value },\n    { \"lines\", JSON_NUMBER, json_store_lines },\n    { \"run_time\", JSON_OBJECT, json_store_run_time },\n    { \"runargv\", JSON_ARRAY, json_store_runargv },\n    { \"runenv\", JSON_ARRAY, json_store_runenv },\n    { \"rungid\", JSON_ID, json_store_rungid },\n    { \"rungroup\", JSON_STRING, json_store_rungroup },\n    { \"runuid\", JSON_ID, json_store_runuid },\n    { \"runuser\", JSON_STRING, json_store_runuser },\n    { \"runchroot\", JSON_STRING, json_store_runchroot },\n    { \"runcwd\", JSON_STRING, json_store_runcwd },\n    { \"signal\", JSON_STRING, json_store_signal },\n    { \"submitcwd\", JSON_STRING, json_store_submitcwd },\n    { \"submithost\", JSON_STRING, json_store_submithost },\n    { \"submituser\", JSON_STRING, json_store_submituser },\n    { \"timestamp\", JSON_OBJECT, json_store_timestamp },\n    { \"ttyname\", JSON_STRING, json_store_ttyname },\n    { NULL }\n};\n\nstatic struct json_item *\nnew_json_item(enum json_value_type type, char *name, unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(new_json_item, SUDO_DEBUG_UTIL);\n\n    if ((item = malloc(sizeof(*item))) == NULL)  {\n\tsudo_warnx(U_(\"%s: %s\"), __func__,\n\t    U_(\"unable to allocate memory\"));\n\tdebug_return_ptr(NULL);\n    }\n    item->name = name;\n    item->type = type;\n    item->lineno = lineno;\n\n    debug_return_ptr(item);\n}\n\nstatic char *\njson_parse_string(char **strp)\n{\n    char *dst, *end, *ret, *src = *strp + 1;\n    size_t len;\n    debug_decl(json_parse_string, SUDO_DEBUG_UTIL);\n\n    for (end = src; *end != '\"' && *end != '\\0'; end++) {\n\tif (end[0] == '\\\\' && end[1] == '\"')\n\t    end++;\n    }\n    if (*end != '\"') {\n\tsudo_warnx(\"%s\", U_(\"missing double quote in name\"));\n\tdebug_return_str(NULL);\n    }\n    len = (size_t)(end - src);\n\n    /* Copy string, flattening escaped chars. */\n    dst = ret = malloc(len + 1);\n    if (dst == NULL) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tdebug_return_str(NULL);\n    }\n    while (src < end) {\n\tchar ch = *src++;\n\tif (ch == '\\\\') {\n\t    switch (*src) {\n\t    case 'b':\n\t\tch = '\\b';\n\t\tbreak;\n\t    case 'f':\n\t\tch = '\\f';\n\t\tbreak;\n\t    case 'n':\n\t\tch = '\\n';\n\t\tbreak;\n\t    case 'r':\n\t\tch = '\\r';\n\t\tbreak;\n\t    case 't':\n\t\tch = '\\t';\n\t\tbreak;\n\t    case 'u':\n\t\t/* Only currently handles 8-bit ASCII. */\n\t\tif (src[1] == '0' && src[2] == '0') {\n\t\t    ch = sudo_hexchar(&src[3]);\n\t\t    if (ch != -1) {\n\t\t\tsrc += 4;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\t/* Not in \\u00XX format. */\n\t\tFALLTHROUGH;\n\t    case '\"':\n\t    case '\\\\':\n\t    default:\n\t\t/* Note: a bare \\ at the end of a string will be removed. */\n\t\tch = *src;\n\t\tbreak;\n\t    }\n\t    src++;\n\t}\n\t*dst++ = ch;\n    }\n    *dst = '\\0';\n\n    /* Trim trailing whitespace. */\n    do {\n\tend++;\n    } while (isspace((unsigned char)*end));\n    *strp = end;\n\n    debug_return_str(ret);\n}\n\nvoid\nfree_json_items(struct json_item_list *items)\n{\n    struct json_item *item;\n    debug_decl(free_json_items, SUDO_DEBUG_UTIL);\n\n    while ((item = TAILQ_FIRST(items)) != NULL) {\n\tTAILQ_REMOVE(items, item, entries);\n\tswitch (item->type) {\n\tcase JSON_STRING:\n\t    free(item->u.string);\n\t    break;\n\tcase JSON_ARRAY:\n\tcase JSON_OBJECT:\n\t    free_json_items(&item->u.child.items);\n\t    break;\n\tcase JSON_ID:\n\tcase JSON_NUMBER:\n\tcase JSON_BOOL:\n\tcase JSON_NULL:\n\t    /* Nothing to free. */\n\t    break;\n\tdefault:\n\t    sudo_warnx(\"%s: internal error, invalid JSON type %d\",\n\t\t__func__, item->type);\n\t    break;\n\t}\n\tfree(item->name);\n\tfree(item);\n    }\n\n    debug_return;\n}\n\nstatic bool\niolog_parse_json_object(struct json_object *object, struct eventlog *evlog)\n{\n    struct json_item *item;\n    bool ret = false;\n    debug_decl(iolog_parse_json_object, SUDO_DEBUG_UTIL);\n\n    /* First object holds all the actual data. */\n    item = TAILQ_FIRST(&object->items);\n    if (item == NULL) {\n\tsudo_warnx(\"%s\", U_(\"missing JSON_OBJECT\"));\n\tgoto done;\n    }\n    if (item->type != JSON_OBJECT) {\n\tsudo_warnx(U_(\"expected JSON_OBJECT, got %d\"), item->type);\n\tgoto done;\n    }\n    object = &item->u.child;\n\n    TAILQ_FOREACH(item, &object->items, entries) {\n\tstruct iolog_json_key *key;\n\n\t/* expecting key:value pairs */\n\tif (item->name == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: missing object name\", __func__);\n\t    goto done;\n\t}\n\n\t/* lookup name */\n\tfor (key = iolog_json_keys; key->name != NULL; key++) {\n\t    if (strcmp(item->name, key->name) == 0)\n\t\tbreak;\n\t}\n\tif (key->name == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: unknown key %s\", __func__, item->name);\n\t} else if (key->type != item->type &&\n\t\t(key->type != JSON_ID || item->type != JSON_NUMBER)) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: key mismatch %s type %d, expected %d\", __func__,\n\t\titem->name, item->type, key->type);\n\t    goto done;\n\t} else {\n\t    /* Matched name and type. */\n\t    if (!key->setter(item, evlog)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to store %s\", key->name);\n\t\tgoto done;\n\t    }\n\t}\n    }\n\n    /* Merge cmd and argv as sudoreplay expects. */\n    if (evlog->command != NULL && evlog->argv != NULL && evlog->argv[0] != NULL) {\n\tsize_t len, bufsize = strlen(evlog->command) + 1;\n\tchar *cp, *buf;\n\tint ac;\n\n\t/* Skip argv[0], we use evlog->command instead. */\n\tfor (ac = 1; evlog->argv[ac] != NULL; ac++)\n\t    bufsize += strlen(evlog->argv[ac]) + 1;\n\n\tif ((buf = malloc(bufsize)) == NULL) {\n\t    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\t    goto done;\n\t}\n\tcp = buf;\n\n\tlen = strlcpy(cp, evlog->command, bufsize);\n\tif (len >= bufsize)\n\t    sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n\tcp += len;\n\tbufsize -= len;\n\n\tfor (ac = 1; evlog->argv[ac] != NULL; ac++) {\n\t    if (bufsize < 2)\n\t\tsudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n\t    *cp++ = ' ';\n\t    bufsize--;\n\n\t    len = strlcpy(cp, evlog->argv[ac], bufsize);\n\t    if (len >= bufsize)\n\t\tsudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n\t    cp += len;\n\t    bufsize -= len;\n\t}\n\n\tfree(evlog->command);\n\tevlog->command = buf;\n    }\n\n    ret = true;\n\ndone:\n    debug_return_bool(ret);\n}\n\nstatic bool\njson_insert_bool(struct json_item_list *items, char *name, bool value,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_bool, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_BOOL, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.boolean = value;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_null(struct json_item_list *items, char *name, unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_null, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_NULL, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_num(struct json_item_list *items, char *name, long long value,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_num, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_NUMBER, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.number = value;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_str(struct json_item_list *items, char *name, char **strp,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_str, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_STRING, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.string = json_parse_string(strp);\n    if (item->u.string == NULL) {\n\tfree(item);\n\tdebug_return_bool(false);\n    }\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic struct json_object *\njson_stack_push(struct json_stack *stack, struct json_item_list *items,\n    struct json_object *frame, enum json_value_type type, char *name,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_stack_push, SUDO_DEBUG_UTIL);\n\n    /* We limit the stack size rather than expanding it. */\n    if (stack->depth >= stack->maxdepth) {\n\tsudo_warnx(U_(\"json stack exhausted (max %u frames)\"), stack->maxdepth);\n\tdebug_return_ptr(NULL);\n    }\n\n    /* Allocate a new item and insert it into the list. */\n    if ((item = new_json_item(type, name, lineno)) == NULL)\n\tdebug_return_ptr(NULL);\n    TAILQ_INIT(&item->u.child.items);\n    item->u.child.parent = item;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    /* Push the current frame onto the stack (depth check performed above). */\n    stack->frames[stack->depth++] = frame;\n\n    /* Return the new frame */\n    debug_return_ptr(&item->u.child);\n}\n\n/* Only expect a value if a name is defined or we are in an array. */\n#define expect_value (name != NULL || (frame->parent != NULL && frame->parent->type == JSON_ARRAY))\n\nbool\niolog_parse_json(FILE *fp, const char *filename, struct json_object *root)\n{\n    struct json_object *frame = root;\n    struct json_stack stack = JSON_STACK_INTIALIZER(stack);\n    unsigned int lineno = 0;\n    char *name = NULL;\n    char *cp, *buf = NULL;\n    size_t bufsize = 0;\n    ssize_t len;\n    bool ret = false;\n    bool saw_comma = false;\n    long long num;\n    char ch;\n    debug_decl(iolog_parse_json, SUDO_DEBUG_UTIL);\n\n    root->parent = NULL;\n    TAILQ_INIT(&root->items);\n\n    while ((len = getdelim(&buf, &bufsize, '\\n', fp)) != -1) {\n\tchar *ep = buf + len - 1;\n\tcp = buf;\n\n\tlineno++;\n\n\t/* Trim trailing whitespace. */\n\twhile (ep > cp && isspace((unsigned char)*ep))\n\t    ep--;\n\tep[1] = '\\0';\n\n\tfor (;;) {\n\t    const char *errstr;\n\n\t    /* Trim leading whitespace, skip blank lines. */\n\t    while (isspace((unsigned char)*cp))\n\t\tcp++;\n\n\t    /* Check for comma separator and strip it out. */\n\t    if (*cp == ',') {\n\t\tsaw_comma = true;\n\t\tcp++;\n\t\twhile (isspace((unsigned char)*cp))\n\t\t    cp++;\n\t    }\n\n\t    /* End of line? */\n\t    if (*cp == '\\0')\n\t\tbreak;\n\n\t    switch (*cp) {\n\t    case '{':\n\t\tif (name == NULL && frame->parent != NULL) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"objects must consist of name:value pairs\"));\n\t\t    goto done;\n\t\t}\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tsaw_comma = false;\n\t\tframe = json_stack_push(&stack, &frame->items, frame,\n\t\t    JSON_OBJECT, name, lineno);\n\t\tif (frame == NULL)\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case '}':\n\t\tif (stack.depth == 0 || frame->parent == NULL ||\n\t\t\tframe->parent->type != JSON_OBJECT) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unmatched close brace\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tframe = stack.frames[--stack.depth];\n\t\tsaw_comma = false;\n\t\tbreak;\n\t    case '[':\n\t\tif (frame->parent == NULL) {\n\t\t    /* Must have an enclosing object. */\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected array\"));\n\t\t    goto done;\n\t\t}\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tsaw_comma = false;\n\t\tframe = json_stack_push(&stack, &frame->items, frame,\n\t\t    JSON_ARRAY, name, lineno);\n\t\tif (frame == NULL)\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case ']':\n\t\tif (stack.depth == 0 || frame->parent == NULL ||\n\t\t\tframe->parent->type != JSON_ARRAY) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unmatched close bracket\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tframe = stack.frames[--stack.depth];\n\t\tsaw_comma = false;\n\t\tbreak;\n\t    case '\"':\n\t\tif (frame->parent == NULL) {\n\t\t    /* Must have an enclosing object. */\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected string\"));\n\t\t    goto done;\n\t\t}\n\n\t\tif (!expect_value) {\n\t\t    /* Parse \"name\": */\n\t\t    if ((name = json_parse_string(&cp)) == NULL)\n\t\t\tgoto done;\n\t\t    /* TODO: allow colon on next line? */\n\t\t    if (*cp != ':') {\n\t\t\tsudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\t    U_(\"missing colon after name\"));\n\t\t\tgoto done;\n\t\t    }\n\t\t    cp++;\n\t\t} else {\n\t\t    if (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t\tsudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\t    U_(\"missing separator between values\"));\n\t\t\tgoto done;\n\t\t    }\n\t\t    saw_comma = false;\n\t\t    if (!json_insert_str(&frame->items, name, &cp, lineno))\n\t\t\tgoto done;\n\t\t    name = NULL;\n\t\t}\n\t\tbreak;\n\t    case 't':\n\t\tif (strncmp(cp, \"true\", sizeof(\"true\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected boolean\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"true\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_bool(&frame->items, name, true, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case 'f':\n\t\tif (strncmp(cp, \"false\", sizeof(\"false\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected boolean\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"false\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_bool(&frame->items, name, false, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case 'n':\n\t\tif (strncmp(cp, \"null\", sizeof(\"null\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected null\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"null\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_null(&frame->items, name, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case '+': case '-': case '0': case '1': case '2': case '3':\n\t    case '4': case '5': case '6': case '7': case '8': case '9':\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected number\"));\n\t\t    goto done;\n\t\t}\n\t\t/* XXX - strtonumx() would be simpler here. */\n\t\tlen = strcspn(cp, \" \\f\\n\\r\\t\\v,\");\n\t\tch = cp[len];\n\t\tcp[len] = '\\0';\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\t\tnum = sudo_strtonum(cp, LLONG_MIN, LLONG_MAX, &errstr);\n\t\tif (errstr != NULL) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s: %s\", filename, lineno, cp - buf,\n\t\t\tcp, U_(errstr));\n\t\t    goto done;\n\t\t}\n\t\tcp += len;\n\t\t*cp = ch;\n\n\t\tif (!json_insert_num(&frame->items, name, num, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    default:\n\t\tgoto parse_error;\n\t    }\n\t}\n    }\n    if (stack.depth != 0) {\n\tframe = stack.frames[stack.depth - 1];\n\tif (frame->parent == NULL || frame->parent->type == JSON_OBJECT) {\n\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf,\n\t\tU_(\"unmatched close brace\"));\n\t} else {\n\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf,\n\t\tU_(\"unmatched close bracket\"));\n\t}\n\tgoto done;\n    }\n\n    ret = true;\n    goto done;\n\nparse_error:\n    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, U_(\"parse error\"));\ndone:\n    free(buf);\n    free(name);\n    if (!ret)\n\tfree_json_items(&root->items);\n\n    debug_return_bool(ret);\n}\n\nbool\niolog_parse_loginfo_json(FILE *fp, const char *iolog_dir, struct eventlog *evlog)\n{\n    struct json_object root;\n    bool ret = false;\n    debug_decl(iolog_parse_loginfo_json, SUDO_DEBUG_UTIL);\n\n    if (iolog_parse_json(fp, iolog_dir, &root)) {\n\t/* Walk the stack and parse entries. */\n\tret = iolog_parse_json_object(&root, evlog);\n\n\t/* Cleanup. */\n\tfree_json_items(&root.items);\n    }\n\n    debug_return_bool(ret);\n}\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2007-2015, 2023 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_lbuf.h\"\n#include \"sudo_util.h\"\n\nvoid\nsudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output,\n    int indent, const char *continuation, int cols)\n{\n    debug_decl(sudo_lbuf_init, SUDO_DEBUG_UTIL);\n\n    lbuf->output = output;\n    lbuf->continuation = continuation;\n    lbuf->indent = indent;\n    lbuf->cols = cols;\n    lbuf->error = 0;\n    lbuf->len = 0;\n    lbuf->size = 0;\n    lbuf->buf = NULL;\n\n    debug_return;\n}\n\nvoid\nsudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf)\n{\n    debug_decl(sudo_lbuf_destroy, SUDO_DEBUG_UTIL);\n\n    free(lbuf->buf);\n    lbuf->error = 0;\n    lbuf->len = 0;\n    lbuf->size = 0;\n    lbuf->buf = NULL;\n\n    debug_return;\n}\n\nstatic bool\nsudo_lbuf_expand(struct sudo_lbuf *lbuf, unsigned int extra)\n{\n    debug_decl(sudo_lbuf_expand, SUDO_DEBUG_UTIL);\n\n    if (lbuf->len + extra + 1 <= lbuf->len) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"integer overflow updating lbuf->len\");\n\tlbuf->error = 1;\n\tdebug_return_bool(false);\n    }\n\n    if (lbuf->len + extra + 1 > lbuf->size) {\n\tunsigned int new_size = sudo_pow2_roundup(lbuf->len + extra + 1);\n\tchar *new_buf;\n\n\tif (new_size < 1024)\n\t    new_size = 1024;\n\tif ((new_buf = realloc(lbuf->buf, new_size)) == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\"unable to allocate memory\");\n\t    lbuf->error = 1;\n\t    debug_return_bool(false);\n\t}\n\tlbuf->buf = new_buf;\n\tlbuf->size = new_size;\n    }\n    debug_return_bool(true);\n}\n\n/*\n * Parse the format and append strings, only %s and %% escapes are supported.\n * Any characters in set are quoted with a backslash.\n */\nbool\nsudo_lbuf_append_quoted_v1(struct sudo_lbuf *lbuf, const char *set, const char *fmt, ...)\n{\n    unsigned int saved_len = lbuf->len;\n    bool ret = false;\n    const char *cp, *s;\n    va_list ap;\n    int len;\n    debug_decl(sudo_lbuf_append_quoted, SUDO_DEBUG_UTIL);\n\n    if (sudo_lbuf_error(lbuf))\n\tdebug_return_bool(false);\n\n    va_start(ap, fmt);\n    while (*fmt != '\\0') {\n\tif (fmt[0] == '%' && fmt[1] == 's') {\n\t    if ((s = va_arg(ap, char *)) == NULL)\n\t\ts = \"(NULL)\";\n\t    while ((cp = strpbrk(s, set)) != NULL) {\n\t\tlen = (int)(cp - s);\n\t\tif (!sudo_lbuf_expand(lbuf, len + 2))\n\t\t    goto done;\n\t\tmemcpy(lbuf->buf + lbuf->len, s, len);\n\t\tlbuf->len += len;\n\t\tlbuf->buf[lbuf->len++] = '\\\\';\n\t\tlbuf->buf[lbuf->len++] = *cp;\n\t\ts = cp + 1;\n\t    }\n\t    if (*s != '\\0') {\n\t\tlen = strlen(s);\n\t\tif (!sudo_lbuf_expand(lbuf, len))\n\t\t    goto done;\n\t\tmemcpy(lbuf->buf + lbuf->len, s, len);\n\t\tlbuf->len += len;\n\t    }\n\t    fmt += 2;\n\t    continue;\n\t}\n\tif (!sudo_lbuf_expand(lbuf, 2))\n\t    goto done;\n\tif (strchr(set, *fmt) != NULL)\n\t    lbuf->buf[lbuf->len++] = '\\\\';\n\tlbuf->buf[lbuf->len++] = *fmt++;\n    }\n    ret = true;\n\ndone:\n    if (!ret)\n\tlbuf->len = saved_len;\n    if (lbuf->size != 0)\n\tlbuf->buf[lbuf->len] = '\\0';\n    va_end(ap);\n\n    debug_return_bool(ret);\n}\n\n/*\n * Parse the format and append strings, only %s and %% escapes are supported.\n */\nbool\nsudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...)\n{\n    unsigned int saved_len = lbuf->len;\n    bool ret = false;\n    va_list ap;\n    const char *s;\n    int len;\n    debug_decl(sudo_lbuf_append, SUDO_DEBUG_UTIL);\n\n    if (sudo_lbuf_error(lbuf))\n\tdebug_return_bool(false);\n\n    va_start(ap, fmt);\n    while (*fmt != '\\0') {\n\tif (fmt[0] == '%' && fmt[1] == 's') {\n\t    if ((s = va_arg(ap, char *)) == NULL)\n\t\ts = \"(NULL)\";\n\t    len = strlen(s);\n\t    if (!sudo_lbuf_expand(lbuf, len))\n\t\tgoto done;\n\t    memcpy(lbuf->buf + lbuf->len, s, len);\n\t    lbuf->len += len;\n\t    fmt += 2;\n\t    continue;\n\t}\n\tif (!sudo_lbuf_expand(lbuf, 1))\n\t    goto done;\n\tlbuf->buf[lbuf->len++] = *fmt++;\n    }\n    ret = true;\n\ndone:\n    if (!ret)\n\tlbuf->len = saved_len;\n    if (lbuf->size != 0)\n\tlbuf->buf[lbuf->len] = '\\0';\n    va_end(ap);\n\n    debug_return_bool(ret);\n}\n\n/* XXX - check output function return value */\nstatic void\nsudo_lbuf_println(struct sudo_lbuf *lbuf, char *line, int len)\n{\n    char *cp, save;\n    int i, have, contlen = 0;\n    int indent = lbuf->indent;\n    bool is_comment = false;\n    debug_decl(sudo_lbuf_println, SUDO_DEBUG_UTIL);\n\n    /* Comment lines don't use continuation and only indent is for \"# \" */\n    if (line[0] == '#' && isblank((unsigned char)line[1])) {\n\tis_comment = true;\n\tindent = 2;\n    }\n    if (lbuf->continuation != NULL && !is_comment)\n\tcontlen = strlen(lbuf->continuation);\n\n    /*\n     * Print the buffer, splitting the line as needed on a word\n     * boundary.\n     */\n    cp = line;\n    have = lbuf->cols;\n    while (cp != NULL && *cp != '\\0') {\n\tchar *ep = NULL;\n\tint need = len - (int)(cp - line);\n\n\tif (need > have) {\n\t    have -= contlen;\t\t/* subtract for continuation char */\n\t    if ((ep = memrchr(cp, ' ', have)) == NULL)\n\t\tep = memchr(cp + have, ' ', need - have);\n\t    if (ep != NULL)\n\t\tneed = (int)(ep - cp);\n\t}\n\tif (cp != line) {\n\t    if (is_comment) {\n\t\tlbuf->output(\"# \");\n\t    } else {\n\t\t/* indent continued lines */\n\t\t/* XXX - build up string instead? */\n\t\tfor (i = 0; i < indent; i++)\n\t\t    lbuf->output(\" \");\n\t    }\n\t}\n\t/* NUL-terminate cp for the output function and restore afterwards */\n\tsave = cp[need];\n\tcp[need] = '\\0';\n\tlbuf->output(cp);\n\tcp[need] = save;\n\tcp = ep;\n\n\t/*\n\t * If there is more to print, reset have, incremement cp past\n\t * the whitespace, and print a line continuaton char if needed.\n\t */\n\tif (cp != NULL) {\n\t    have = lbuf->cols - indent;\n\t    ep = line + len;\n\t    while (cp < ep && isblank((unsigned char)*cp)) {\n\t\tcp++;\n\t    }\n\t    if (contlen)\n\t\tlbuf->output(lbuf->continuation);\n\t}\n\tlbuf->output(\"\\n\");\n    }\n\n    debug_return;\n}\n\n/*\n * Print the buffer with word wrap based on the tty width.\n * The lbuf is reset on return.\n * XXX - check output function return value\n */\nvoid\nsudo_lbuf_print_v1(struct sudo_lbuf *lbuf)\n{\n    char *cp, *ep;\n    int len;\n    debug_decl(sudo_lbuf_print, SUDO_DEBUG_UTIL);\n\n    if (lbuf->buf == NULL || lbuf->len == 0)\n\tgoto done;\n\n    /* For very small widths just give up... */\n    len = lbuf->continuation ? strlen(lbuf->continuation) : 0;\n    if (lbuf->cols <= lbuf->indent + len + 20) {\n\tlbuf->buf[lbuf->len] = '\\0';\n\tlbuf->output(lbuf->buf);\n\tif (lbuf->buf[lbuf->len - 1] != '\\n')\n\t    lbuf->output(\"\\n\");\n\tgoto done;\n    }\n\n    /* Print each line in the buffer */\n    for (cp = lbuf->buf; cp != NULL && *cp != '\\0'; ) {\n\tif (*cp == '\\n') {\n\t    lbuf->output(\"\\n\");\n\t    cp++;\n\t} else {\n\t    len = lbuf->len - (cp - lbuf->buf);\n\t    if ((ep = memchr(cp, '\\n', len)) != NULL)\n\t\tlen = (int)(ep - cp);\n\t    if (len)\n\t\tsudo_lbuf_println(lbuf, cp, len);\n\t    cp = ep ? ep + 1 : NULL;\n\t}\n    }\n\ndone:\n    lbuf->len = 0;\t\t/* reset the buffer for re-use. */\n    lbuf->error = 0;\n\n    debug_return;\n}\n\nbool\nsudo_lbuf_error_v1(struct sudo_lbuf *lbuf)\n{\n    if (lbuf != NULL && lbuf->error != 0)\n\treturn true;\n    return false;\n}\n\nvoid\nsudo_lbuf_clearerr_v1(struct sudo_lbuf *lbuf)\n{\n    if (lbuf != NULL)\n\tlbuf->error = 0;\n}\n", "@COMPAT_EXP@initprogname\ninitprogname2\nsudo_basename_v1\nsudo_conf_askpass_path_v1\nsudo_conf_clear_paths_v1\nsudo_conf_debug_files_v1\nsudo_conf_debugging_v1\nsudo_conf_developer_mode_v1\nsudo_conf_devsearch_path_v1\nsudo_conf_disable_coredump_v1\nsudo_conf_group_source_v1\nsudo_conf_intercept_path_v1\nsudo_conf_max_groups_v1\nsudo_conf_noexec_path_v1\nsudo_conf_plugin_dir_path_v1\nsudo_conf_plugins_v1\nsudo_conf_probe_interfaces_v1\nsudo_conf_read_v1\nsudo_conf_sesh_path_v1\nsudo_debug_deregister_v1\nsudo_debug_enter_v1\nsudo_debug_execve2_v1\nsudo_debug_exit_bool_v1\nsudo_debug_exit_id_t_v1\nsudo_debug_exit_int_v1\nsudo_debug_exit_long_v1\nsudo_debug_exit_ptr_v1\nsudo_debug_exit_size_t_v1\nsudo_debug_exit_ssize_t_v1\nsudo_debug_exit_str_masked_v1\nsudo_debug_exit_str_v1\nsudo_debug_exit_time_t_v1\nsudo_debug_exit_v1\nsudo_debug_fork_v1\nsudo_debug_get_active_instance_v1\nsudo_debug_get_fds_v1\nsudo_debug_get_instance_v1\nsudo_debug_needed_v1\nsudo_debug_parse_flags_v1\nsudo_debug_printf2_v1\nsudo_debug_register_v1\nsudo_debug_register_v2\nsudo_debug_set_active_instance_v1\nsudo_debug_update_fd_v1\nsudo_debug_vprintf2_v1\nsudo_debug_write2_v1\nsudo_digest_alloc_v1\nsudo_digest_final_v1\nsudo_digest_free_v1\nsudo_digest_getlen_v1\nsudo_digest_reset_v1\nsudo_digest_update_v1\nsudo_dso_findsym_v1\nsudo_dso_load_v1\nsudo_dso_preload_table_v1\nsudo_dso_strerror_v1\nsudo_dso_unload_v1\nsudo_ev_add_v1\nsudo_ev_add_v2\nsudo_ev_alloc_v1\nsudo_ev_base_alloc_v1\nsudo_ev_base_free_v1\nsudo_ev_base_setdef_v1\nsudo_ev_del_v1\nsudo_ev_dispatch_v1\nsudo_ev_free_v1\nsudo_ev_get_timeleft_v1\nsudo_ev_get_timeleft_v2\nsudo_ev_got_break_v1\nsudo_ev_got_exit_v1\nsudo_ev_loop_v1\nsudo_ev_loopbreak_v1\nsudo_ev_loopcontinue_v1\nsudo_ev_loopexit_v1\nsudo_ev_pending_v1\nsudo_ev_set_v1\nsudo_fatal_callback_deregister_v1\nsudo_fatal_callback_register_v1\nsudo_fatal_nodebug_v1\nsudo_fatalx_nodebug_v1\nsudo_gai_fatal_nodebug_v1\nsudo_gai_vfatal_nodebug_v1\nsudo_gai_vwarn_nodebug_v1\nsudo_gai_warn_nodebug_v1\nsudo_get_ttysize_v1\nsudo_getgrouplist2_v1\nsudo_gethostname_v1\nsudo_gettime_awake_v1\nsudo_gettime_mono_v1\nsudo_gettime_real_v1\nsudo_hexchar_v1\nsudo_json_add_value_as_object_v1\nsudo_json_add_value_v1\nsudo_json_close_array_v1\nsudo_json_close_object_v1\nsudo_json_free_v1\nsudo_json_get_buf_v1\nsudo_json_get_len_v1\nsudo_json_init_v1\nsudo_json_init_v2\nsudo_json_open_array_v1\nsudo_json_open_object_v1\nsudo_lbuf_append_quoted_v1\nsudo_lbuf_append_v1\nsudo_lbuf_clearerr_v1\nsudo_lbuf_destroy_v1\nsudo_lbuf_error_v1\nsudo_lbuf_init_v1\nsudo_lbuf_print_v1\nsudo_lock_file_v1\nsudo_lock_region_v1\nsudo_logfac2str_v1\nsudo_logpri2str_v1\nsudo_mkdir_parents_v1\nsudo_mmap_alloc_v1\nsudo_mmap_allocarray_v1\nsudo_mmap_free_v1\nsudo_mmap_protect_v1\nsudo_mmap_strdup_v1\nsudo_new_key_val_v1\nsudo_open_parent_dir_v1\nsudo_parse_gids_v1\nsudo_parseln_v1\nsudo_parseln_v2\nsudo_pow2_roundup_v1\nsudo_rcstr_addref\nsudo_rcstr_alloc\nsudo_rcstr_delref\nsudo_rcstr_dup\nsudo_regex_compile_v1\nsudo_secure_dir_v1\nsudo_secure_file_v1\nsudo_secure_open_dir_v1\nsudo_secure_open_file_v1\nsudo_setgroups_v1\nsudo_stat_multiarch_v1\nsudo_str2logfac_v1\nsudo_str2logpri_v1\nsudo_strsplit_v1\nsudo_strtobool_v1\nsudo_strtoid_v1\nsudo_strtoid_v2\nsudo_strtoidx_v1\nsudo_strtomode_v1\nsudo_strtonum\nsudo_term_cbreak_v1\nsudo_term_copy_v1\nsudo_term_eof\nsudo_term_erase\nsudo_term_is_raw_v1\nsudo_term_kill\nsudo_term_noecho_v1\nsudo_term_raw_v1\nsudo_term_restore_v1\nsudo_ttyname_dev_v1\nsudo_uuid_create_v1\nsudo_uuid_to_string_v1\nsudo_vfatal_nodebug_v1\nsudo_vfatalx_nodebug_v1\nsudo_vwarn_nodebug_v1\nsudo_vwarnx_nodebug_v1\nsudo_warn_nodebug_v1\nsudo_warn_set_conversation_v1\nsudo_warn_set_locale_func_v1\nsudo_warnx_nodebug_v1\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <sys/uio.h>\n#include <sys/stat.h>\n#include <sys/ioctl.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#if defined(HAVE_STDINT_H)\n# include <stdint.h>\n#elif defined(HAVE_INTTYPES_H)\n# include <inttypes.h>\n#endif\n#include <string.h>\n#include <unistd.h>\n#include <time.h>\n#include <ctype.h>\n#include <errno.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <dirent.h>\n#ifdef HAVE_STDBOOL_H\n# include <stdbool.h>\n#else\n# include \"compat/stdbool.h\"\n#endif /* HAVE_STDBOOL_H */\n#include <regex.h>\n#include <signal.h>\n#ifdef HAVE_GETOPT_LONG\n# include <getopt.h>\n# else\n# include \"compat/getopt.h\"\n#endif /* HAVE_GETOPT_LONG */\n\n#include \"pathnames.h\"\n#include \"sudo_compat.h\"\n#include \"sudo_conf.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_event.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_iolog.h\"\n#include \"sudo_plugin.h\"\n#include \"sudo_queue.h\"\n#include \"sudo_util.h\"\n\n#include \"logging.h\"\n\nstruct replay_closure {\n    const char *iolog_dir;\n    struct sudo_event_base *evbase;\n    struct sudo_event *delay_ev;\n    struct sudo_event *keyboard_ev;\n    struct sudo_event *output_ev;\n    struct sudo_event *sighup_ev;\n    struct sudo_event *sigint_ev;\n    struct sudo_event *sigquit_ev;\n    struct sudo_event *sigterm_ev;\n    struct sudo_event *sigtstp_ev;\n    struct timespec *offset;\n    struct timespec *max_delay;\n    struct timing_closure timing;\n    int iolog_dir_fd;\n    bool interactive;\n    bool suspend_wait;\n    struct io_buffer {\n\tunsigned int len; /* buffer length (how much produced) */\n\tunsigned int off; /* write position (how much already consumed) */\n\tunsigned int toread; /* how much remains to be read */\n\tint lastc;\t  /* last char written */\n\tchar buf[64 * 1024];\n    } iobuf;\n};\n\n/*\n * Handle expressions like:\n * ( user millert or user root ) and tty console and command /bin/sh\n */\nSTAILQ_HEAD(search_node_list, search_node);\nstruct search_node {\n    STAILQ_ENTRY(search_node) entries;\n#define ST_EXPR\t\t1\n#define ST_TTY\t\t2\n#define ST_USER\t\t3\n#define ST_PATTERN\t4\n#define ST_RUNASUSER\t5\n#define ST_RUNASGROUP\t6\n#define ST_FROMDATE\t7\n#define ST_TODATE\t8\n#define ST_CWD\t\t9\n#define ST_HOST\t\t10\n    char type;\n    bool negated;\n    bool or;\n    union {\n\tregex_t cmdre;\n\tstruct timespec tstamp;\n\tchar *cwd;\n\tchar *host;\n\tchar *tty;\n\tchar *user;\n\tchar *runas_group;\n\tchar *runas_user;\n\tstruct search_node_list expr;\n\tvoid *ptr;\n    } u;\n};\n\nstatic struct search_node_list search_expr = STAILQ_HEAD_INITIALIZER(search_expr);\n\nstatic double speed_factor = 1.0;\n\nstatic const char *session_dir = _PATH_SUDO_IO_LOGDIR;\n\nstatic bool terminal_can_resize, terminal_was_resized, follow_mode;\n\nstatic int terminal_lines, terminal_cols;\n\nstatic int ttyfd = -1;\n\nstatic struct iolog_file iolog_files[] = {\n    { false },\t/* IOFD_STDIN */\n    { false },\t/* IOFD_STDOUT */\n    { false },\t/* IOFD_STDERR */\n    { false },\t/* IOFD_TTYIN  */\n    { false },\t/* IOFD_TTYOUT */\n    { true, },\t/* IOFD_TIMING */\n};\n\nstatic const char short_opts[] =  \"d:f:Fhlm:nRSs:V\";\nstatic struct option long_opts[] = {\n    { \"directory\",\trequired_argument,\tNULL,\t'd' },\n    { \"filter\",\t\trequired_argument,\tNULL,\t'f' },\n    { \"follow\",\t\tno_argument,\t\tNULL,\t'F' },\n    { \"help\",\t\tno_argument,\t\tNULL,\t'h' },\n    { \"list\",\t\tno_argument,\t\tNULL,\t'l' },\n    { \"max-wait\",\trequired_argument,\tNULL,\t'm' },\n    { \"non-interactive\", no_argument,\t\tNULL,\t'n' },\n    { \"no-resize\",\tno_argument,\t\tNULL,\t'R' },\n    { \"suspend-wait\",\tno_argument,\t\tNULL,\t'S' },\n    { \"speed\",\t\trequired_argument,\tNULL,\t's' },\n    { \"version\",\tno_argument,\t\tNULL,\t'V' },\n    { NULL,\t\tno_argument,\t\tNULL,\t'\\0' },\n};\n\n/* XXX move to separate header? (currently in sudoers.h) */\nextern char *get_timestr(time_t, int);\nextern time_t get_date(char *);\n\nstatic int list_sessions(int, char **, const char *, const char *, const char *);\nstatic int parse_expr(struct search_node_list *, char **, bool);\nstatic void read_keyboard(int fd, int what, void *v);\nstatic int replay_session(int iolog_dir_fd, const char *iolog_dir,\n    struct timespec *offset, struct timespec *max_wait, const char *decimal,\n    bool interactive, bool suspend_wait);\nstatic void sudoreplay_cleanup(void);\nstatic void write_output(int fd, int what, void *v);\nstatic void restore_terminal_size(void);\nstatic void setup_terminal(struct eventlog *evlog, bool interactive, bool resize);\nsudo_noreturn static void help(void);\nsudo_noreturn static void usage(void);\n\n#define VALID_ID(s) (isalnum((unsigned char)(s)[0]) && \\\n    isalnum((unsigned char)(s)[1]) && isalnum((unsigned char)(s)[2]) && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    isalnum((unsigned char)(s)[5]) && (s)[6] == '\\0')\n\n#define IS_IDLOG(s) ( \\\n    isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\\n    (s)[2] == '/' && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    (s)[5] == '/' && \\\n    isalnum((unsigned char)(s)[6]) && isalnum((unsigned char)(s)[7]) && \\\n    (s)[8] == '\\0')\n\nsudo_dso_public int main(int argc, char *argv[]);\n\nint\nmain(int argc, char *argv[])\n{\n    int ch, i, iolog_dir_fd, len, exitcode = EXIT_FAILURE;\n    bool def_filter = true, listonly = false;\n    bool interactive = true, suspend_wait = false, resize = true;\n    const char *decimal, *id, *user = NULL, *pattern = NULL, *tty = NULL;\n    char *cp, *ep, iolog_dir[PATH_MAX];\n    struct timespec offset = { 0, 0};\n    struct eventlog *evlog;\n    struct timespec max_delay_storage, *max_delay = NULL;\n    double dval;\n    debug_decl(main, SUDO_DEBUG_MAIN);\n\n#if defined(SUDO_DEVEL) && defined(__OpenBSD__)\n    {\n\textern char *malloc_options;\n\tmalloc_options = \"S\";\n    }\n#endif\n\n    initprogname(argc > 0 ? argv[0] : \"sudoreplay\");\n    setlocale(LC_ALL, \"\");\n    decimal = localeconv()->decimal_point;\n    bindtextdomain(\"sudoers\", LOCALEDIR); /* XXX - should have sudoreplay domain */\n    textdomain(\"sudoers\");\n\n    /* Register fatal/fatalx callback. */\n    sudo_fatal_callback_register(sudoreplay_cleanup);\n\n    /* Read sudo.conf and initialize the debug subsystem. */\n    if (sudo_conf_read(NULL, SUDO_CONF_DEBUG) == -1)\n\texit(EXIT_FAILURE);\n    sudo_debug_register(getprogname(), NULL, NULL,\n\tsudo_conf_debug_files(getprogname()), -1);\n\n    while ((ch = getopt_long(argc, argv, short_opts, long_opts, NULL)) != -1) {\n\tswitch (ch) {\n\tcase 'd':\n\t    session_dir = optarg;\n\t    break;\n\tcase 'f':\n\t    /* Set the replay filter. */\n\t    def_filter = false;\n\t    for (cp = strtok_r(optarg, \",\", &ep); cp; cp = strtok_r(NULL, \",\", &ep)) {\n\t\tif (strcmp(cp, \"stdin\") == 0)\n\t\t    iolog_files[IOFD_STDIN].enabled = true;\n\t\telse if (strcmp(cp, \"stdout\") == 0)\n\t\t    iolog_files[IOFD_STDOUT].enabled = true;\n\t\telse if (strcmp(cp, \"stderr\") == 0)\n\t\t    iolog_files[IOFD_STDERR].enabled = true;\n\t\telse if (strcmp(cp, \"ttyin\") == 0)\n\t\t    iolog_files[IOFD_TTYIN].enabled = true;\n\t\telse if (strcmp(cp, \"ttyout\") == 0)\n\t\t    iolog_files[IOFD_TTYOUT].enabled = true;\n\t\telse\n\t\t    sudo_fatalx(U_(\"invalid filter option: %s\"), optarg);\n\t    }\n\t    break;\n\tcase 'F':\n\t    follow_mode = true;\n\t    break;\n\tcase 'h':\n\t    help();\n\t    /* NOTREACHED */\n\tcase 'l':\n\t    listonly = true;\n\t    break;\n\tcase 'm':\n\t    errno = 0;\n\t    dval = strtod(optarg, &ep);\n\t    if (*ep != '\\0' || errno != 0)\n\t\tsudo_fatalx(U_(\"invalid max wait: %s\"), optarg);\n\t    if (dval <= 0.0) {\n\t\tsudo_timespecclear(&max_delay_storage);\n\t    } else {\n\t\tmax_delay_storage.tv_sec = dval;\n\t\tmax_delay_storage.tv_nsec =\n\t\t    (dval - max_delay_storage.tv_sec) * 1000000000.0;\n\t    }\n\t    max_delay = &max_delay_storage;\n\t    break;\n\tcase 'n':\n\t    interactive = false;\n\t    break;\n\tcase 'R':\n\t    resize = false;\n\t    break;\n\tcase 'S':\n\t    suspend_wait = true;\n\t    break;\n\tcase 's':\n\t    errno = 0;\n\t    speed_factor = strtod(optarg, &ep);\n\t    if (*ep != '\\0' || errno != 0)\n\t\tsudo_fatalx(U_(\"invalid speed factor: %s\"), optarg);\n\t    break;\n\tcase 'V':\n\t    (void) printf(_(\"%s version %s\\n\"), getprogname(), PACKAGE_VERSION);\n\t    exitcode = EXIT_SUCCESS;\n\t    goto done;\n\tdefault:\n\t    usage();\n\t    /* NOTREACHED */\n\t}\n\n    }\n    argc -= optind;\n    argv += optind;\n\n    if (listonly) {\n\texitcode = list_sessions(argc, argv, pattern, user, tty);\n\tgoto done;\n    }\n\n    if (argc != 1)\n\tusage();\n\n    /* By default we replay stdout, stderr and ttyout. */\n    if (def_filter) {\n\tiolog_files[IOFD_STDOUT].enabled = true;\n\tiolog_files[IOFD_STDERR].enabled = true;\n\tiolog_files[IOFD_TTYOUT].enabled = true;\n    }\n\n    /* Check for offset in @sec.nsec form at the end of the id. */\n    id = argv[0];\n    if ((cp = strchr(id, '@')) != NULL) {\n\tep = iolog_parse_delay(cp + 1, &offset, decimal);\n\tif (ep == NULL || *ep != '\\0')\n\t    sudo_fatalx(U_(\"invalid time offset %s\"), cp + 1);\n\t*cp = '\\0';\n    }\n\n    /* 6 digit ID in base 36, e.g. 01G712AB or free-form name */\n    if (VALID_ID(id)) {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s/%.2s/%.2s/%.2s\",\n\t    session_dir, id, &id[2], &id[4]);\n\tif (len < 0 || len >= ssizeof(iolog_dir))\n\t    sudo_fatalx(U_(\"%s/%.2s/%.2s/%.2s: %s\"), session_dir,\n\t\tid, &id[2], &id[4], strerror(ENAMETOOLONG));\n    } else if (id[0] == '/') {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s\", id);\n\tif (len < 0 || len >= ssizeof(iolog_dir))\n\t    sudo_fatalx(U_(\"%s/timing: %s\"), id, strerror(ENAMETOOLONG));\n    } else {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s/%s\", session_dir, id);\n\tif (len < 0 || len >= ssizeof(iolog_dir)) {\n\t    sudo_fatalx(U_(\"%s/%s: %s\"), session_dir, id,\n\t\tstrerror(ENAMETOOLONG));\n\t}\n    }\n\n    /* Open files for replay, applying replay filter for the -f flag. */\n    if ((iolog_dir_fd = iolog_openat(AT_FDCWD, iolog_dir, O_RDONLY)) == -1)\n\tsudo_fatal(\"%s\", iolog_dir);\n    for (i = 0; i < IOFD_MAX; i++) {\n\tif (!iolog_open(&iolog_files[i], iolog_dir_fd, i, \"r\")) {\n\t    if (errno != ENOENT) {\n\t\tsudo_fatal(U_(\"unable to open %s/%s\"), iolog_dir,\n\t\t    iolog_fd_to_name(i));\n\t    }\n\t}\n    }\n    if (!iolog_files[IOFD_TIMING].enabled) {\n\tsudo_fatal(U_(\"unable to open %s/%s\"), iolog_dir,\n\t    iolog_fd_to_name(IOFD_TIMING));\n    }\n\n    /* Parse log file. */\n    if ((evlog = iolog_parse_loginfo(iolog_dir_fd, iolog_dir)) == NULL)\n\tgoto done;\n    printf(_(\"Replaying sudo session: %s\"), evlog->command);\n\n    /* Setup terminal if appropriate. */\n    if (!isatty(STDIN_FILENO) || !isatty(STDOUT_FILENO))\n\tinteractive = false;\n    setup_terminal(evlog, interactive, resize);\n    putchar('\\r');\n    putchar('\\n');\n\n    /* Done with parsed log file. */\n    eventlog_free(evlog);\n    evlog = NULL;\n\n    /* Replay session corresponding to iolog_files[]. */\n    exitcode = replay_session(iolog_dir_fd, iolog_dir, &offset, max_delay,\n\tdecimal, interactive, suspend_wait);\n\n    restore_terminal_size();\n    sudo_term_restore(ttyfd, true);\ndone:\n    sudo_debug_exit_int(__func__, __FILE__, __LINE__, sudo_debug_subsys, exitcode);\n    return exitcode;\n}\n\n/*\n * List of terminals that support xterm-like resizing.\n * This is not an exhaustive list.\n * For a list of VT100 style escape codes, see:\n *  http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#VT100%20Mode\n */\nstruct term_names {\n    const char *name;\n    unsigned int len;\n} compatible_terms[] = {\n    { \"Eterm\", 5 },\n    { \"aterm\", 5 },\n    { \"dtterm\", 6 },\n    { \"gnome\", 5 },\n    { \"konsole\", 7 },\n    { \"kvt\\0\", 4 },\n    { \"mlterm\", 6 },\n    { \"rxvt\", 4 },\n    { \"xterm\", 5 },\n    { NULL, 0 }\n};\n\nstruct getsize_closure {\n    int nums[2];\n    int nums_depth;\n    int nums_maxdepth;\n    int state;\n    const char *cp;\n    struct sudo_event *ev;\n    struct timespec timeout;\n};\n\n/* getsize states */\n#define INITIAL\t\t0x00\n#define NEW_NUMBER\t0x01\n#define NUMBER\t\t0x02\n#define GOTSIZE\t\t0x04\n#define READCHAR\t0x10\n\n/*\n * Callback for reading the terminal size response.\n * We use an event for this to support timeouts.\n */\nstatic void\ngetsize_cb(int fd, int what, void *v)\n{\n    struct getsize_closure *gc = v;\n    unsigned char ch = '\\0';\n    debug_decl(getsize_cb, SUDO_DEBUG_UTIL);\n\n    for (;;) {\n\tif (gc->cp[0] == '\\0') {\n\t    gc->state = GOTSIZE;\n\t    goto done;\n\t}\n\tif (ISSET(gc->state, READCHAR)) {\n\t    ssize_t nread = read(ttyfd, &ch, 1);\n\t    switch (nread) {\n\t    case -1:\n\t\tif (errno == EAGAIN)\n\t\t    goto another;\n\t\tFALLTHROUGH;\n\t    case 0:\n\t\tgoto done;\n\t    default:\n\t\tCLR(gc->state, READCHAR);\n\t\tbreak;\n\t    }\n\t}\n\tswitch (gc->state) {\n\tcase INITIAL:\n\t    if (ch == 0233 && gc->cp[0] == '\\033') {\n\t\t/* meta escape, equivalent to ESC[ */\n\t\tch = '[';\n\t\tgc->cp++;\n\t    }\n\t    if (gc->cp[0] == '%' && gc->cp[1] == 'd') {\n\t\tgc->state = NEW_NUMBER;\n\t\tcontinue;\n\t    }\n\t    if (gc->cp[0] != ch) {\n\t\tsudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t    \"got %d, expected %d\", ch, gc->cp[0]);\n\t\tgoto done;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"got %d\", ch);\n\t    SET(gc->state, READCHAR);\n\t    gc->cp++;\n\t    break;\n\tcase NEW_NUMBER:\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"parsing number\");\n\t    if (!isdigit(ch))\n\t\tgoto done;\n\t    gc->cp += 2;\n\t    if (gc->nums_depth > gc->nums_maxdepth)\n\t\tgoto done;\n\t    gc->nums[gc->nums_depth] = 0;\n\t    gc->state = NUMBER;\n\t    FALLTHROUGH;\n\tcase NUMBER:\n\t    if (!isdigit(ch)) {\n\t\t/* done with number, reparse ch */\n\t\tsudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t    \"number %d (ch %d)\", gc->nums[gc->nums_depth], ch);\n\t\tgc->nums_depth++;\n\t\tgc->state = INITIAL;\n\t\tcontinue;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"got %d\", ch);\n\t    if (gc->nums[gc->nums_depth] > INT_MAX / 10)\n\t\tgoto done;\n\t    gc->nums[gc->nums_depth] *= 10;\n\t    gc->nums[gc->nums_depth] += (ch - '0');\n\t    SET(gc->state, READCHAR);\n\t    break;\n\t}\n    }\n\nanother:\n    if (sudo_ev_add(NULL, gc->ev, &gc->timeout, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\ndone:\n    debug_return;\n}\n\n\n/*\n * Get the terminal size using vt100 terminal escapes.\n */\nstatic bool\nxterm_get_size(int *new_lines, int *new_cols)\n{\n    struct sudo_event_base *evbase;\n    struct getsize_closure gc;\n    const char getsize_request[] = \"\\0337\\033[r\\033[999;999H\\033[6n\";\n    const char getsize_response[] = \"\\033[%d;%dR\";\n    bool ret = false;\n    debug_decl(xterm_get_size, SUDO_DEBUG_UTIL);\n\n    /* request the terminal's size */\n    if (write(ttyfd, getsize_request, strlen(getsize_request)) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"%s: error writing xterm size request\", __func__);\n\tgoto done;\n    }\n\n    /*\n     * Callback info for reading back the size with a 10 second timeout.\n     * We expect two numbers (lines and cols).\n     */\n    gc.state = INITIAL|READCHAR;\n    gc.nums_depth = 0;\n    gc.nums_maxdepth = 1;\n    gc.cp = getsize_response;\n    gc.timeout.tv_sec = 10;\n    gc.timeout.tv_nsec = 0;\n\n    /* Setup an event for reading the terminal size */\n    evbase = sudo_ev_base_alloc();\n    if (evbase == NULL)\n\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    gc.ev = sudo_ev_alloc(ttyfd, SUDO_EV_READ, getsize_cb, &gc);\n    if (gc.ev == NULL)\n\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\n    /* Read back terminal size response */\n    if (sudo_ev_add(evbase, gc.ev, &gc.timeout, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    sudo_ev_dispatch(evbase);\n\n    if (gc.state == GOTSIZE) {\n\tsudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t    \"terminal size %d x %x\", gc.nums[0], gc.nums[1]);\n\t*new_lines = gc.nums[0];\n\t*new_cols = gc.nums[1];\n\tret = true;\n    }\n\n    sudo_ev_base_free(evbase);\n    sudo_ev_free(gc.ev);\n\ndone:\n    debug_return_bool(ret);\n}\n\n/*\n * Set the size of the text area to lines and cols.\n * Depending on the terminal implementation, the window itself may\n * or may not shrink to a smaller size.\n */\nstatic bool\nxterm_set_size(int lines, int cols)\n{\n    const char setsize_fmt[] = \"\\033[8;%d;%dt\";\n    int len, new_lines, new_cols;\n    bool ret = false;\n    char buf[1024];\n    debug_decl(xterm_set_size, SUDO_DEBUG_UTIL);\n\n    /* XXX - save cursor and position restore after resizing */\n    len = snprintf(buf, sizeof(buf), setsize_fmt, lines, cols);\n    if (len < 0 || len >= ssizeof(buf)) {\n\t/* not possible due to size of buf */\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"%s: internal error, buffer too small?\", __func__);\n\tgoto done;\n    }\n    if (write(ttyfd, buf, strlen(buf)) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"%s: error writing xterm resize request\", __func__);\n\tgoto done;\n    }\n    /* XXX - keyboard input will interfere with this */\n    if (!xterm_get_size(&new_lines, &new_cols))\n\tgoto done;\n    if (lines == new_lines && cols == new_cols)\n\tret = true;\n\ndone:\n    debug_return_bool(ret);\n}\n\nstatic void\nsetup_terminal(struct eventlog *evlog, bool interactive, bool resize)\n{\n    const char *term;\n    debug_decl(check_terminal, SUDO_DEBUG_UTIL);\n\n    fflush(stdout);\n\n    /* Open fd for /dev/tty and set to raw mode. */\n    if (interactive) {\n\tttyfd = open(_PATH_TTY, O_RDWR);\n\twhile (!sudo_term_raw(ttyfd, 1)) {\n\t    if (errno != EINTR)\n\t\tsudo_fatal(\"%s\", U_(\"unable to set tty to raw mode\"));\n\t    kill(getpid(), SIGTTOU);\n\t}\n    }\n\n    /* Find terminal size if the session has size info. */\n    if (evlog->lines == 0 && evlog->columns == 0) {\n\t/* no tty size info, hope for the best... */\n\tdebug_return;\n    }\n\n    if (resize && ttyfd != -1) {\n\tterm = getenv(\"TERM\");\n\tif (term != NULL && *term != '\\0') {\n\t    struct term_names *tn;\n\n\t    for (tn = compatible_terms; tn->name != NULL; tn++) {\n\t\tif (strncmp(term, tn->name, tn->len) == 0) {\n\t\t    /* xterm-like terminals can resize themselves. */\n\t\t    if (xterm_get_size(&terminal_lines, &terminal_cols))\n\t\t\tterminal_can_resize = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n    }\n\n    if (!terminal_can_resize) {\n\t/* either not xterm or not interactive */\n\tsudo_get_ttysize(&terminal_lines, &terminal_cols);\n    }\n\n    if (evlog->lines == terminal_lines && evlog->columns == terminal_cols) {\n\t/* nothing to change */\n\tdebug_return;\n    }\n\n    if (terminal_can_resize) {\n\t/* session terminal size is different, try to resize ours */\n\tif (xterm_set_size(evlog->lines, evlog->columns)) {\n\t    /* success */\n\t    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\t\"resized terminal to %d x %x\", evlog->lines, evlog->columns);\n\t    terminal_was_resized = true;\n\t    debug_return;\n\t}\n\t/* resize failed, don't try again */\n\tterminal_can_resize = false;\n    }\n\n    if (evlog->lines > terminal_lines || evlog->columns > terminal_cols) {\n\tfputs(_(\"Warning: your terminal is too small to properly replay the log.\\n\"), stdout);\n\tprintf(_(\"Log geometry is %d x %d, your terminal's geometry is %d x %d.\"), evlog->lines, evlog->columns, terminal_lines, terminal_cols);\n    }\n    debug_return;\n}\n\nstatic void\nresize_terminal(int lines, int cols)\n{\n    debug_decl(resize_terminal, SUDO_DEBUG_UTIL);\n\n    if (terminal_can_resize) {\n\tif (xterm_set_size(lines, cols))\n\t    terminal_was_resized = true;\n\telse\n\t    terminal_can_resize = false;\n    }\n\n    debug_return;\n}\n\nstatic void\nrestore_terminal_size(void)\n{\n    debug_decl(restore_terminal, SUDO_DEBUG_UTIL);\n\n    if (terminal_was_resized) {\n\t/* We are still in raw mode, hence the carriage return. */\n\tputchar('\\r');\n\tfputs(U_(\"Replay finished, press any key to restore the terminal.\"),\n\t    stdout);\n\tfflush(stdout);\n\t(void)getchar();\n\txterm_set_size(terminal_lines, terminal_cols);\n\tputchar('\\r');\n\tputchar('\\n');\n    }\n\n    debug_return;\n}\n\nstatic bool\niolog_complete(struct replay_closure *closure)\n{\n    struct stat sb;\n    debug_decl(iolog_complete, SUDO_DEBUG_UTIL);\n\n    if (fstatat(closure->iolog_dir_fd, \"timing\", &sb, 0) != -1) {\n\tif (ISSET(sb.st_mode, S_IWUSR|S_IWGRP|S_IWOTH))\n\t    debug_return_bool(false);\n    }\n\n    debug_return_bool(true);\n}\n\n/*\n * Read the next record from the timing file and schedule a delay\n * event with the specified timeout.\n * In follow mode, ignore EOF and just delay for a short time.\n * Return 0 on success, 1 on EOF and -1 on error.\n */\nstatic int\nget_timing_record(struct replay_closure *closure)\n{\n    struct timing_closure *timing = &closure->timing;\n    bool nodelay = false;\n    debug_decl(get_timing_record, SUDO_DEBUG_UTIL);\n\n    if (follow_mode && timing->event == IO_EVENT_COUNT) {\n\t/* In follow mode, we already waited. */\n\tnodelay = true;\n    }\n\n    switch (iolog_read_timing_record(&iolog_files[IOFD_TIMING], timing)) {\n    case -1:\n\t/* error */\n\tdebug_return_int(-1);\n    case 1:\n\t/* EOF */\n\tif (!follow_mode || iolog_complete(closure)) {\n\t    debug_return_int(1);\n\t}\n\t/* Follow mode, keep reading until done. */\n\tiolog_clearerr(&iolog_files[IOFD_TIMING]);\n\ttiming->delay.tv_sec = 0;\n\ttiming->delay.tv_nsec = 1000000;\n\ttiming->iol = NULL;\n\ttiming->event = IO_EVENT_COUNT;\n\tbreak;\n    default:\n\t/* Record number bytes to read. */\n\tif (timing->event != IO_EVENT_WINSIZE &&\n\t\ttiming->event != IO_EVENT_SUSPEND) {\n\t    closure->iobuf.len = 0;\n\t    closure->iobuf.off = 0;\n\t    closure->iobuf.lastc = '\\0';\n\t    closure->iobuf.toread = timing->u.nbytes;\n\t}\n\n\tif (sudo_timespecisset(closure->offset)) {\n\t    if (sudo_timespeccmp(&timing->delay, closure->offset, >)) {\n\t\tsudo_timespecsub(&timing->delay, closure->offset, &timing->delay);\n\t\tsudo_timespecclear(closure->offset);\n\t    } else {\n\t\tsudo_timespecsub(closure->offset, &timing->delay, closure->offset);\n\t\tsudo_timespecclear(&timing->delay);\n\t    }\n\t}\n\n\tif (nodelay) {\n\t    /* Already waited, fire immediately. */\n\t    timing->delay.tv_sec = 0;\n\t    timing->delay.tv_nsec = 0;\n\t} else {\n\t    /* Adjust delay using speed factor and max_delay. */\n\t    iolog_adjust_delay(&timing->delay, closure->max_delay,\n\t\tspeed_factor);\n\t}\n\tbreak;\n    }\n\n    /* Schedule the delay event. */\n    if (sudo_ev_add(closure->evbase, closure->delay_ev, &timing->delay, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    debug_return_int(0);\n}\n\n/*\n * Read next timing record.\n * Exits the event loop on EOF, breaks out on error.\n */\nstatic void\nnext_timing_record(struct replay_closure *closure)\n{\n    debug_decl(next_timing_record, SUDO_DEBUG_UTIL);\n\nagain:\n    switch (get_timing_record(closure)) {\n    case 0:\n\t/* success */\n\tif (closure->timing.event == IO_EVENT_SUSPEND &&\n\t    closure->timing.u.signo == SIGCONT && !closure->suspend_wait) {\n\t    /* Ignore time spent suspended. */\n\t    goto again;\n\t}\n\tbreak;\n    case 1:\n\t/* EOF */\n\tsudo_ev_loopexit(closure->evbase);\n\tbreak;\n    default:\n\t/* error */\n\tsudo_ev_loopbreak(closure->evbase);\n\tbreak;\n    }\n    debug_return;\n}\n\nstatic bool\nfill_iobuf(struct replay_closure *closure)\n{\n    const size_t space = sizeof(closure->iobuf.buf) - closure->iobuf.len;\n    const struct timing_closure *timing = &closure->timing;\n    const char *errstr;\n    debug_decl(fill_iobuf, SUDO_DEBUG_UTIL);\n\n    if (closure->iobuf.toread != 0 && space != 0) {\n\tconst size_t len =\n\t    closure->iobuf.toread < space ? closure->iobuf.toread : space;\n\tssize_t nread = iolog_read(timing->iol,\n\t    closure->iobuf.buf + closure->iobuf.off, len, &errstr);\n\tif (nread <= 0) {\n\t    if (nread == 0) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"%s/%s: premature EOF, expected %u bytes\",\n\t\t    closure->iolog_dir, iolog_fd_to_name(timing->event),\n\t\t    closure->iobuf.toread);\n\t    } else {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"%s/%s: read error: %s\", closure->iolog_dir,\n\t\t    iolog_fd_to_name(timing->event), errstr);\n\t    }\n\t    sudo_warnx(U_(\"unable to read %s/%s: %s\"),\n\t\tclosure->iolog_dir, iolog_fd_to_name(timing->event), errstr);\n\t    debug_return_bool(false);\n\t}\n\tclosure->iobuf.toread -= nread;\n\tclosure->iobuf.len += nread;\n    }\n\n    debug_return_bool(true);\n}\n\n/*\n * Called when the inter-record delay has expired.\n * Depending on the record type, either reads the next\n * record or changes window size.\n */\nstatic void\ndelay_cb(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    struct timing_closure *timing = &closure->timing;\n    debug_decl(delay_cb, SUDO_DEBUG_UTIL);\n\n    switch (timing->event) {\n    case IO_EVENT_WINSIZE:\n\tresize_terminal(timing->u.winsize.lines, timing->u.winsize.cols);\n\tbreak;\n    case IO_EVENT_STDIN:\n\tif (iolog_files[IOFD_STDIN].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDIN];\n\tbreak;\n    case IO_EVENT_STDOUT:\n\tif (iolog_files[IOFD_STDOUT].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDOUT];\n\tbreak;\n    case IO_EVENT_STDERR:\n\tif (iolog_files[IOFD_STDERR].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDERR];\n\tbreak;\n    case IO_EVENT_TTYIN:\n\tif (iolog_files[IOFD_TTYIN].enabled)\n\t    timing->iol = &iolog_files[IOFD_TTYIN];\n\tbreak;\n    case IO_EVENT_TTYOUT:\n\tif (iolog_files[IOFD_TTYOUT].enabled)\n\t    timing->iol = &iolog_files[IOFD_TTYOUT];\n\tbreak;\n    }\n\n    if (timing->iol != NULL) {\n\t/* If the stream is open, enable the write event. */\n\tif (sudo_ev_add(closure->evbase, closure->output_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    } else {\n\t/* Not replaying, get the next timing record and continue. */\n\tnext_timing_record(closure);\n    }\n\n    debug_return;\n}\n\nstatic void\nreplay_closure_free(struct replay_closure *closure)\n{\n    /*\n     * Free events and event base, then the closure itself.\n     */\n    if (closure->iolog_dir_fd != -1)\n\tclose(closure->iolog_dir_fd);\n    sudo_ev_free(closure->delay_ev);\n    sudo_ev_free(closure->keyboard_ev);\n    sudo_ev_free(closure->output_ev);\n    sudo_ev_free(closure->sighup_ev);\n    sudo_ev_free(closure->sigint_ev);\n    sudo_ev_free(closure->sigquit_ev);\n    sudo_ev_free(closure->sigterm_ev);\n    sudo_ev_free(closure->sigtstp_ev);\n    sudo_ev_base_free(closure->evbase);\n    free(closure);\n}\n\nstatic void\nsignal_cb(int signo, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    debug_decl(signal_cb, SUDO_DEBUG_UTIL);\n\n    switch (signo) {\n    case SIGHUP:\n    case SIGINT:\n    case SIGQUIT:\n    case SIGTERM:\n\t/* Free the event base and restore signal handlers. */\n\treplay_closure_free(closure);\n\n\t/* Restore the terminal and die. */\n\tsudoreplay_cleanup();\n\tkill(getpid(), signo);\n\tbreak;\n    case SIGTSTP:\n\t/* Ignore ^Z since we have no way to restore the screen. */\n\tbreak;\n    }\n\n    debug_return;\n}\n\nstatic struct replay_closure *\nreplay_closure_alloc(int iolog_dir_fd, const char *iolog_dir,\n    struct timespec *offset, struct timespec *max_delay, const char *decimal,\n    bool interactive, bool suspend_wait)\n{\n    struct replay_closure *closure;\n    debug_decl(replay_closure_alloc, SUDO_DEBUG_UTIL);\n\n    if ((closure = calloc(1, sizeof(*closure))) == NULL)\n\tdebug_return_ptr(NULL);\n\n    closure->iolog_dir_fd = iolog_dir_fd;\n    closure->iolog_dir = iolog_dir;\n    closure->interactive = interactive;\n    closure->offset = offset;\n    closure->suspend_wait = suspend_wait;\n    closure->max_delay = max_delay;\n    closure->timing.decimal = decimal;\n\n    /*\n     * Setup event base and delay, input and output events.\n     * If interactive, take input from and write to /dev/tty.\n     * If not interactive there is no input event.\n     */\n    closure->evbase = sudo_ev_base_alloc();\n    if (closure->evbase == NULL)\n\tgoto bad;\n    closure->delay_ev = sudo_ev_alloc(-1, SUDO_EV_TIMEOUT, delay_cb, closure);\n    if (closure->delay_ev == NULL)\n        goto bad;\n    if (interactive) {\n\tclosure->keyboard_ev = sudo_ev_alloc(ttyfd, SUDO_EV_READ|SUDO_EV_PERSIST,\n\t    read_keyboard, closure);\n\tif (closure->keyboard_ev == NULL)\n\t    goto bad;\n\tif (sudo_ev_add(closure->evbase, closure->keyboard_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    }\n    closure->output_ev = sudo_ev_alloc(interactive ? ttyfd : STDOUT_FILENO,\n\tSUDO_EV_WRITE, write_output, closure);\n    if (closure->output_ev == NULL)\n        goto bad;\n\n    /*\n     * Setup signal events, we need to restore the terminal if killed.\n     */\n    closure->sighup_ev = sudo_ev_alloc(SIGHUP, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sighup_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sighup_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigint_ev = sudo_ev_alloc(SIGINT, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigint_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigint_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigquit_ev = sudo_ev_alloc(SIGQUIT, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigquit_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigquit_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigterm_ev = sudo_ev_alloc(SIGTERM, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigterm_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigterm_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigtstp_ev = sudo_ev_alloc(SIGTSTP, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigtstp_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigtstp_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    debug_return_ptr(closure);\nbad:\n    replay_closure_free(closure);\n    debug_return_ptr(NULL);\n}\n\nstatic int\nreplay_session(int iolog_dir_fd, const char *iolog_dir, struct timespec *offset,\n    struct timespec *max_delay, const char *decimal, bool interactive,\n    bool suspend_wait)\n{\n    struct replay_closure *closure;\n    int ret = 0;\n    debug_decl(replay_session, SUDO_DEBUG_UTIL);\n\n    /* Allocate the delay closure and read the first timing record. */\n    closure = replay_closure_alloc(iolog_dir_fd, iolog_dir, offset, max_delay,\n\tdecimal, interactive, suspend_wait);\n    if (get_timing_record(closure) != 0) {\n\tret = 1;\n\tgoto done;\n    }\n\n    /* Run event loop. */\n    sudo_ev_dispatch(closure->evbase);\n    if (sudo_ev_got_break(closure->evbase))\n\tret = 1;\n\ndone:\n    /* Clean up and return. */\n    replay_closure_free(closure);\n    debug_return_int(ret);\n}\n\n/*\n * Write the I/O buffer.\n */\nstatic void\nwrite_output(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    const struct timing_closure *timing = &closure->timing;\n    struct io_buffer *iobuf = &closure->iobuf;\n    unsigned iovcnt = 1;\n    struct iovec iov[2];\n    bool added_cr = false;\n    size_t nbytes, nwritten;\n    debug_decl(write_output, SUDO_DEBUG_UTIL);\n\n    /* Refill iobuf if there is more to read and buf is empty. */\n    if (!fill_iobuf(closure)) {\n\tsudo_ev_loopbreak(closure->evbase);\n\tdebug_return;\n    }\n\n    nbytes = iobuf->len - iobuf->off;\n    iov[0].iov_base = iobuf->buf + iobuf->off;\n    iov[0].iov_len = nbytes;\n\n    if (closure->interactive &&\n\t(timing->event == IO_EVENT_STDOUT || timing->event == IO_EVENT_STDERR)) {\n\tchar *nl;\n\n\t/*\n\t * We may need to insert a carriage return before the newline.\n\t * Note that the carriage return may have already been written.\n\t */\n\tnl = memchr(iov[0].iov_base, '\\n', iov[0].iov_len);\n\tif (nl != NULL) {\n\t    size_t len = (size_t)(nl - (char *)iov[0].iov_base);\n\t    if ((nl == iov[0].iov_base && iobuf->lastc != '\\r') ||\n\t\t(nl != iov[0].iov_base && nl[-1] != '\\r')) {\n\t\tiov[0].iov_len = len;\n\t\tiov[1].iov_base = (char *)\"\\r\\n\";\n\t\tiov[1].iov_len = 2;\n\t\tiovcnt = 2;\n\t\tnbytes = iov[0].iov_len + iov[1].iov_len;\n\t\tadded_cr = true;\n\t    }\n\t}\n    }\n\n    nwritten = writev(fd, iov, iovcnt);\n    switch ((ssize_t)nwritten) {\n    case -1:\n\tif (errno != EINTR && errno != EAGAIN)\n\t    sudo_fatal(U_(\"unable to write to %s\"), \"stdout\");\n\tbreak;\n    case 0:\n\t/* Should not happen. */\n\tbreak;\n    default:\n\tif (added_cr && nwritten >= nbytes - 1) {\n\t    /* The last char written was either '\\r' or '\\n'. */\n\t    iobuf->lastc = nwritten == nbytes ? '\\n' : '\\r';\n\t} else {\n\t    /* Stash the last char written. */\n\t    iobuf->lastc = *((char *)iov[0].iov_base + nwritten);\n\t}\n\tif (added_cr) {\n\t    /* Subtract one for the carriage return we added above. */\n\t    nwritten--;\n\t}\n\tiobuf->off += nwritten;\n\tbreak;\n    }\n\n    if (iobuf->off == iobuf->len) {\n\t/* Write complete, go to next timing entry if possible. */\n\tswitch (get_timing_record(closure)) {\n\tcase 0:\n\t    /* success */\n\t    break;\n\tcase 1:\n\t    /* EOF */\n\t    sudo_ev_loopexit(closure->evbase);\n\t    break;\n\tdefault:\n\t    /* error */\n\t    sudo_ev_loopbreak(closure->evbase);\n\t    break;\n\t}\n    } else {\n\t/* Reschedule event to write remainder. */\n\tif (sudo_ev_add(NULL, closure->output_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    }\n    debug_return;\n}\n\n/*\n * Build expression list from search args\n */\nstatic int\nparse_expr(struct search_node_list *head, char *argv[], bool sub_expr)\n{\n    bool or = false, not = false;\n    struct search_node *sn;\n    char type, **av;\n    const char *errstr;\n    debug_decl(parse_expr, SUDO_DEBUG_UTIL);\n\n    for (av = argv; *av != NULL; av++) {\n\tswitch (av[0][0]) {\n\tcase 'a': /* and (ignore) */\n\t    if (strncmp(*av, \"and\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    continue;\n\tcase 'o': /* or */\n\t    if (strncmp(*av, \"or\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    or = true;\n\t    continue;\n\tcase '!': /* negate */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    not = true;\n\t    continue;\n\tcase 'c': /* cwd or command */\n\t    if (av[0][1] == '\\0')\n\t\tsudo_fatalx(U_(\"ambiguous expression \\\"%s\\\"\"), *av);\n\t    if (strncmp(*av, \"cwd\", strlen(*av)) == 0)\n\t\ttype = ST_CWD;\n\t    else if (strncmp(*av, \"command\", strlen(*av)) == 0)\n\t\ttype = ST_PATTERN;\n\t    else\n\t\tgoto bad;\n\t    break;\n\tcase 'f': /* from date */\n\t    if (strncmp(*av, \"fromdate\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_FROMDATE;\n\t    break;\n\tcase 'g': /* runas group */\n\t    if (strncmp(*av, \"group\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_RUNASGROUP;\n\t    break;\n\tcase 'h': /* host */\n\t    if (strncmp(*av, \"host\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_HOST;\n\t    break;\n\tcase 'r': /* runas user */\n\t    if (strncmp(*av, \"runas\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_RUNASUSER;\n\t    break;\n\tcase 't': /* tty or to date */\n\t    if (av[0][1] == '\\0')\n\t\tsudo_fatalx(U_(\"ambiguous expression \\\"%s\\\"\"), *av);\n\t    if (strncmp(*av, \"todate\", strlen(*av)) == 0)\n\t\ttype = ST_TODATE;\n\t    else if (strncmp(*av, \"tty\", strlen(*av)) == 0)\n\t\ttype = ST_TTY;\n\t    else\n\t\tgoto bad;\n\t    break;\n\tcase 'u': /* user */\n\t    if (strncmp(*av, \"user\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_USER;\n\t    break;\n\tcase '(': /* start sub-expression */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    type = ST_EXPR;\n\t    break;\n\tcase ')': /* end sub-expression */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    if (!sub_expr)\n\t\tsudo_fatalx(\"%s\", U_(\"unmatched ')' in expression\"));\n\t    debug_return_int(av - argv + 1);\n\tdefault:\n\tbad:\n\t    sudo_fatalx(U_(\"unknown search term \\\"%s\\\"\"), *av);\n\t    /* NOTREACHED */\n\t}\n\n\t/* Allocate new search node */\n\tif ((sn = calloc(1, sizeof(*sn))) == NULL)\n\t    sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tsn->type = type;\n\tsn->or = or;\n\tsn->negated = not;\n\tif (type == ST_EXPR) {\n\t    STAILQ_INIT(&sn->u.expr);\n\t    av += parse_expr(&sn->u.expr, av + 1, true);\n\t} else {\n\t    if (*(++av) == NULL)\n\t\tsudo_fatalx(U_(\"%s requires an argument\"), av[-1]);\n\t    if (type == ST_PATTERN) {\n\t\tif (!sudo_regex_compile(&sn->u.cmdre, *av, &errstr)) {\n\t\t    sudo_fatalx(U_(\"invalid regular expression \\\"%s\\\": %s\"),\n\t\t\t*av, U_(errstr));\n\t\t}\n\t    } else if (type == ST_TODATE || type == ST_FROMDATE) {\n\t\tsn->u.tstamp.tv_sec = get_date(*av);\n\t\tsn->u.tstamp.tv_nsec = 0;\n\t\tif (sn->u.tstamp.tv_sec == -1)\n\t\t    sudo_fatalx(U_(\"could not parse date \\\"%s\\\"\"), *av);\n\t    } else {\n\t\tsn->u.ptr = *av;\n\t    }\n\t}\n\tnot = or = false; /* reset state */\n\tSTAILQ_INSERT_TAIL(head, sn, entries);\n    }\n    if (sub_expr)\n\tsudo_fatalx(\"%s\", U_(\"unmatched '(' in expression\"));\n    if (or)\n\tsudo_fatalx(\"%s\", U_(\"illegal trailing \\\"or\\\"\"));\n    if (not)\n\tsudo_fatalx(\"%s\", U_(\"illegal trailing \\\"!\\\"\"));\n\n    debug_return_int(av - argv);\n}\n\nstatic bool\nmatch_expr(struct search_node_list *head, struct eventlog *evlog, bool last_match)\n{\n    struct search_node *sn;\n    bool res = false, matched = last_match;\n    int rc;\n    debug_decl(match_expr, SUDO_DEBUG_UTIL);\n\n    STAILQ_FOREACH(sn, head, entries) {\n\tswitch (sn->type) {\n\tcase ST_EXPR:\n\t    res = match_expr(&sn->u.expr, evlog, matched);\n\t    break;\n\tcase ST_CWD:\n\t    if (evlog->cwd != NULL)\n\t\tres = strcmp(sn->u.cwd, evlog->cwd) == 0;\n\t    break;\n\tcase ST_HOST:\n\t    if (evlog->submithost != NULL)\n\t\tres = strcmp(sn->u.host, evlog->submithost) == 0;\n\t    break;\n\tcase ST_TTY:\n\t    if (evlog->ttyname != NULL)\n\t\tres = strcmp(sn->u.tty, evlog->ttyname) == 0;\n\t    break;\n\tcase ST_RUNASGROUP:\n\t    if (evlog->rungroup != NULL)\n\t\tres = strcmp(sn->u.runas_group, evlog->rungroup) == 0;\n\t    break;\n\tcase ST_RUNASUSER:\n\t    if (evlog->runuser != NULL)\n\t\tres = strcmp(sn->u.runas_user, evlog->runuser) == 0;\n\t    break;\n\tcase ST_USER:\n\t    if (evlog->submituser != NULL)\n\t\tres = strcmp(sn->u.user, evlog->submituser) == 0;\n\t    break;\n\tcase ST_PATTERN:\n\t    rc = regexec(&sn->u.cmdre, evlog->command, 0, NULL, 0);\n\t    if (rc && rc != REG_NOMATCH) {\n\t\tchar buf[BUFSIZ];\n\t\tregerror(rc, &sn->u.cmdre, buf, sizeof(buf));\n\t\tsudo_fatalx(\"%s\", buf);\n\t    }\n\t    res = rc == REG_NOMATCH ? 0 : 1;\n\t    break;\n\tcase ST_FROMDATE:\n\t    res = sudo_timespeccmp(&evlog->submit_time, &sn->u.tstamp, >=);\n\t    break;\n\tcase ST_TODATE:\n\t    res = sudo_timespeccmp(&evlog->submit_time, &sn->u.tstamp, <=);\n\t    break;\n\tdefault:\n\t    sudo_fatalx(U_(\"unknown search type %d\"), sn->type);\n\t    /* NOTREACHED */\n\t}\n\tif (sn->negated)\n\t    res = !res;\n\tmatched = sn->or ? (res || last_match) : (res && last_match);\n\tlast_match = matched;\n    }\n    debug_return_bool(matched);\n}\n\nstatic int\nlist_session(char *log_dir, regex_t *re, const char *user, const char *tty)\n{\n    char idbuf[7], *idstr, *cp;\n    struct eventlog *evlog = NULL;\n    const char *timestr;\n    int ret = -1;\n    debug_decl(list_session, SUDO_DEBUG_UTIL);\n\n    if ((evlog = iolog_parse_loginfo(-1, log_dir)) == NULL)\n\tgoto done;\n\n    if (evlog->command == NULL || evlog->submituser == NULL ||\n\t    evlog->runuser == NULL) {\n\tgoto done;\n    }\n\n    /* Match on search expression if there is one. */\n    if (!STAILQ_EMPTY(&search_expr) && !match_expr(&search_expr, evlog, true))\n\tgoto done;\n\n    /* Convert from /var/log/sudo-sessions/00/00/01 to 000001 */\n    cp = log_dir + strlen(session_dir) + 1;\n    if (IS_IDLOG(cp)) {\n\tidbuf[0] = cp[0];\n\tidbuf[1] = cp[1];\n\tidbuf[2] = cp[3];\n\tidbuf[3] = cp[4];\n\tidbuf[4] = cp[6];\n\tidbuf[5] = cp[7];\n\tidbuf[6] = '\\0';\n\tidstr = idbuf;\n    } else {\n\t/* Not an id, use as-is. */\n\tidstr = cp;\n    }\n    /* XXX - print lines + cols? */\n    timestr = get_timestr(evlog->submit_time.tv_sec, 1);\n    printf(\"%s : %s : \", timestr ? timestr : \"invalid date\", evlog->submituser);\n    if (evlog->submithost != NULL)\n\tprintf(\"HOST=%s ; \", evlog->submithost);\n    if (evlog->ttyname != NULL)\n\tprintf(\"TTY=%s ; \", evlog->ttyname);\n    if (evlog->runchroot != NULL)\n\tprintf(\"CHROOT=%s ; \", evlog->runchroot);\n    if (evlog->runcwd != NULL || evlog->cwd != NULL)\n\tprintf(\"CWD=%s ; \", evlog->runcwd ? evlog->runcwd : evlog->cwd);\n    printf(\"USER=%s ; \", evlog->runuser);\n    if (evlog->rungroup != NULL)\n\tprintf(\"GROUP=%s ; \", evlog->rungroup);\n    printf(\"TSID=%s ; COMMAND=%s\\n\", idstr, evlog->command);\n\n    ret = 0;\n\ndone:\n    eventlog_free(evlog);\n    debug_return_int(ret);\n}\n\nstatic int\nsession_compare(const void *v1, const void *v2)\n{\n    const char *s1 = *(const char **)v1;\n    const char *s2 = *(const char **)v2;\n    return strcmp(s1, s2);\n}\n\n/* XXX - always returns 0, calls sudo_fatal() on failure */\nstatic int\nfind_sessions(const char *dir, regex_t *re, const char *user, const char *tty)\n{\n    DIR *d;\n    struct dirent *dp;\n    struct stat sb;\n    size_t sdlen, sessions_len = 0, sessions_size = 0;\n    unsigned int i;\n    int len;\n    char pathbuf[PATH_MAX], **sessions = NULL;\n#ifdef HAVE_STRUCT_DIRENT_D_TYPE\n    bool checked_type = true;\n#else\n    const bool checked_type = false;\n#endif\n    debug_decl(find_sessions, SUDO_DEBUG_UTIL);\n\n    d = opendir(dir);\n    if (d == NULL)\n\tsudo_fatal(U_(\"unable to open %s\"), dir);\n\n    /* XXX - would be faster to use openat() and relative names */\n    sdlen = strlcpy(pathbuf, dir, sizeof(pathbuf));\n    if (sdlen + 1 >= sizeof(pathbuf)) {\n\terrno = ENAMETOOLONG;\n\tsudo_fatal(\"%s/\", dir);\n    }\n    pathbuf[sdlen++] = '/';\n    pathbuf[sdlen] = '\\0';\n\n    /* Store potential session dirs for sorting. */\n    while ((dp = readdir(d)) != NULL) {\n\t/* Skip \".\" and \"..\" */\n\tif (dp->d_name[0] == '.' && (dp->d_name[1] == '\\0' ||\n\t    (dp->d_name[1] == '.' && dp->d_name[2] == '\\0')))\n\t    continue;\n#ifdef HAVE_STRUCT_DIRENT_D_TYPE\n\tif (checked_type) {\n\t    if (dp->d_type != DT_DIR) {\n\t\t/* Not all file systems support d_type. */\n\t\tif (dp->d_type != DT_UNKNOWN)\n\t\t    continue;\n\t\tchecked_type = false;\n\t    }\n\t}\n#endif\n\n\t/* Add name to session list. */\n\tif (sessions_len + 1 > sessions_size) {\n\t    if (sessions_size == 0)\n\t\tsessions_size = 36 * 36 / 2;\n\t    sessions = reallocarray(sessions, sessions_size, 2 * sizeof(char *));\n\t    if (sessions == NULL)\n\t\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\t    sessions_size *= 2;\n\t}\n\tif ((sessions[sessions_len] = strdup(dp->d_name)) == NULL)\n\t    sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tsessions_len++;\n    }\n    closedir(d);\n\n    /* Sort and list the sessions. */\n    if (sessions != NULL) {\n\tqsort(sessions, sessions_len, sizeof(char *), session_compare);\n\tfor (i = 0; i < sessions_len; i++) {\n\t    len = snprintf(&pathbuf[sdlen], sizeof(pathbuf) - sdlen,\n\t\t\"%s/log\", sessions[i]);\n\t    if (len < 0 || (size_t)len >= sizeof(pathbuf) - sdlen) {\n\t\terrno = ENAMETOOLONG;\n\t\tsudo_fatal(\"%s/%s/log\", dir, sessions[i]);\n\t    }\n\t    free(sessions[i]);\n\n\t    /* Check for dir with a log file. */\n\t    if (lstat(pathbuf, &sb) == 0 && S_ISREG(sb.st_mode)) {\n\t\tpathbuf[sdlen + len - 4] = '\\0';\n\t\tlist_session(pathbuf, re, user, tty);\n\t    } else {\n\t\t/* Strip off \"/log\" and recurse if a non-log dir. */\n\t\tpathbuf[sdlen + len - 4] = '\\0';\n\t\tif (checked_type ||\n\t\t    (lstat(pathbuf, &sb) == 0 && S_ISDIR(sb.st_mode)))\n\t\t    find_sessions(pathbuf, re, user, tty);\n\t    }\n\t}\n\tfree(sessions);\n    }\n\n    debug_return_int(0);\n}\n\n/* XXX - always returns 0, calls sudo_fatal() on failure */\nstatic int\nlist_sessions(int argc, char **argv, const char *pattern, const char *user,\n    const char *tty)\n{\n    regex_t rebuf, *re = NULL;\n    const char *errstr;\n    debug_decl(list_sessions, SUDO_DEBUG_UTIL);\n\n    /* Parse search expression if present */\n    parse_expr(&search_expr, argv, false);\n\n    /* optional regex */\n    if (pattern) {\n\tre = &rebuf;\n\tif (!sudo_regex_compile(re, pattern, &errstr)) {\n\t    sudo_fatalx(U_(\"invalid regular expression \\\"%s\\\": %s\"),\n\t\tpattern, U_(errstr));\n\t}\n    }\n\n    debug_return_int(find_sessions(session_dir, re, user, tty));\n}\n\n/*\n * Check keyboard for ' ', '<', '>', return\n * pause, slow, fast, next\n */\nstatic void\nread_keyboard(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    static bool paused = false;\n    struct timespec ts;\n    ssize_t nread;\n    char ch;\n    debug_decl(read_keyboard, SUDO_DEBUG_UTIL);\n\n    nread = read(fd, &ch, 1);\n    switch (nread) {\n    case -1:\n\tif (errno != EINTR && errno != EAGAIN)\n\t    sudo_fatal(U_(\"unable to read %s\"), \"stdin\");\n\tbreak;\n    case 0:\n\t/* Ignore EOF. */\n\tbreak;\n    default:\n\tif (paused) {\n\t    /* Any key will unpause, run the delay callback directly. */\n\t    paused = false;\n\t    delay_cb(-1, SUDO_EV_TIMEOUT, closure);\n\t    debug_return;\n\t}\n\tswitch (ch) {\n\tcase ' ':\n\t    paused = true;\n\t    /* Disable the delay event until we unpause. */\n\t    sudo_ev_del(closure->evbase, closure->delay_ev);\n\t    break;\n\tcase '<':\n\t    speed_factor /= 2;\n\t    if (sudo_ev_pending(closure->delay_ev, SUDO_EV_TIMEOUT, &ts)) {\n\t\t/* Double remaining timeout. */\n\t\tts.tv_sec *= 2;\n\t\tts.tv_nsec *= 2;\n\t\tif (ts.tv_nsec >= 1000000000) {\n\t\t    ts.tv_sec++;\n\t\t    ts.tv_nsec -= 1000000000;\n\t\t}\n\t\tif (sudo_ev_add(NULL, closure->delay_ev, &ts, false) == -1) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"failed to double remaining delay timeout\");\n\t\t}\n            }\n\t    break;\n\tcase '>':\n\t    speed_factor *= 2;\n\t    if (sudo_ev_pending(closure->delay_ev, SUDO_EV_TIMEOUT, &ts)) {\n\t\t/* Halve remaining timeout. */\n\t\tif (ts.tv_sec & 1)\n\t\t    ts.tv_nsec += 500000000;\n\t\tts.tv_sec /= 2;\n\t\tts.tv_nsec /= 2;\n\t\tif (sudo_ev_add(NULL, closure->delay_ev, &ts, false) == -1) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"failed to halve remaining delay timeout\");\n\t\t}\n            }\n\t    break;\n\tcase '\\r':\n\tcase '\\n':\n\t    /* Cancel existing delay, run callback directly. */\n\t    sudo_ev_del(closure->evbase, closure->delay_ev);\n\t    delay_cb(-1, SUDO_EV_TIMEOUT, closure);\n\t    break;\n\tdefault:\n\t    /* Unknown key, nothing to do. */\n\t    break;\n\t}\n\tbreak;\n    }\n    debug_return;\n}\n\nstatic void\nprint_usage(FILE *fp)\n{\n    fprintf(fp, _(\"usage: %s [-hnRS] [-d dir] [-m num] [-s num] ID\\n\"),\n\tgetprogname());\n    fprintf(fp, _(\"usage: %s [-h] [-d dir] -l [search expression]\\n\"),\n\tgetprogname());\n}\n\nstatic void\nusage(void)\n{\n    print_usage(stderr);\n    exit(EXIT_FAILURE);\n}\n\nstatic void\nhelp(void)\n{\n    (void) printf(_(\"%s - replay sudo session logs\\n\\n\"), getprogname());\n    print_usage(stdout);\n    (void) puts(_(\"\\nOptions:\\n\"\n\t\"  -d, --directory=dir    specify directory for session logs\\n\"\n\t\"  -f, --filter=filter    specify which I/O type(s) to display\\n\"\n\t\"  -h, --help             display help message and exit\\n\"\n\t\"  -l, --list             list available session IDs, with optional expression\\n\"\n\t\"  -m, --max-wait=num     max number of seconds to wait between events\\n\"\n\t\"  -n, --non-interactive  no prompts, session is sent to the standard output\\n\"\n\t\"  -R, --no-resize        do not attempt to re-size the terminal\\n\"\n\t\"  -S, --suspend-wait     wait while the command was suspended\\n\"\n\t\"  -s, --speed=num        speed up or slow down output\\n\"\n\t\"  -V, --version          display version information and exit\"));\n    exit(EXIT_SUCCESS);\n}\n\n/*\n * Cleanup hook for sudo_fatal()/sudo_fatalx()\n  */\nstatic void\nsudoreplay_cleanup(void)\n{\n    restore_terminal_size();\n    sudo_term_restore(ttyfd, false);\n}\n"], "fixing_code": [".\\\" Automatically generated from an mdoc input file.  Do not edit.\n.\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 1994-1996, 1998-2005, 2007-2023\n.\\\"\tTodd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.\\\" Sponsored in part by the Defense Advanced Research Projects\n.\\\" Agency (DARPA) and Air Force Research Laboratory, Air Force\n.\\\" Materiel Command, USAF, under agreement number F39502-99-1-0512.\n.\\\"\n.nr SL @SEMAN@\n.nr BA @BAMAN@\n.nr LC @LCMAN@\n.nr PS @PSMAN@\n.TH \"SUDOERS\" \"@mansectform@\" \"January 16, 2023\" \"Sudo @PACKAGE_VERSION@\" \"File Formats Manual\"\n.nh\n.if n .ad l\n.SH \"NAME\"\n\\fBsudoers\\fR\n\\- default sudo security policy plugin\n.SH \"DESCRIPTION\"\nThe\n\\fBsudoers\\fR\npolicy plugin determines a user's\n\\fBsudo\\fR\nprivileges.\nIt is the default\n\\fBsudo\\fR\npolicy plugin.\nThe policy is driven by\nthe\n\\fI@sysconfdir@/sudoers\\fR\nfile or, optionally, in LDAP.\nThe policy format is described in detail in the\n\\fISUDOERS FILE FORMAT\\fR\nsection.\nFor information on storing\n\\fBsudoers\\fR\npolicy information\nin LDAP, see\nsudoers.ldap(@mansectform@).\n.SS \"Configuring sudo.conf for sudoers\"\n\\fBsudo\\fR\nconsults the\nsudo.conf(@mansectform@)\nfile to determine which plugins to load.\nIf no\nsudo.conf(@mansectform@)\nfile is present, or if it contains no\n\\fIPlugin\\fR\nlines,\n\\fBsudoers\\fR\nwill be used for auditing, policy decisions and I/O logging.\nTo explicitly configure\nsudo.conf(@mansectform@)\nto use the\n\\fBsudoers\\fR\nplugin, the following configuration can be used.\n.nf\n.sp\n.RS 4n\nPlugin sudoers_audit @sudoers_plugin@\nPlugin sudoers_policy @sudoers_plugin@\nPlugin sudoers_io @sudoers_plugin@\n.RE\n.fi\n.PP\nStarting with\n\\fBsudo\\fR\n1.8.5, it is possible to specify optional arguments to the\n\\fBsudoers\\fR\nplugin in the\nsudo.conf(@mansectform@)\nfile.\nPlugin arguments, if any, should be listed after the path to the plugin\n(i.e., after\n\\fI@sudoers_plugin@\\fR).\nThe arguments are only effective for the plugin that opens (and parses) the\n\\fIsudoers\\fR\nfile.\n.PP\nFor\n\\fBsudo\\fR\nversion 1.9.1 and higher, this is the\n\\fIsudoers_audit\\fR\nplugin.\nFor older versions, it is the\n\\fIsudoers_policy\\fR\nplugin.\nMultiple arguments may be specified, separated by white space.\nFor example:\n.nf\n.sp\n.RS 4n\nPlugin sudoers_audit @sudoers_plugin@ sudoers_mode=0400 error_recovery=false\n.RE\n.fi\n.PP\nThe following plugin arguments are supported:\n.TP 6n\nerror_recovery=bool\nThe\n\\fIerror_recovery\\fR\nargument can be used to control whether\n\\fBsudoers\\fR\nshould attempt to recover from syntax errors in the\n\\fIsudoers\\fR\nfile.\nIf set to\n\\fItrue\\fR\n(the default),\n\\fBsudoers\\fR\nwill try to recover from a syntax error by discarding the portion\nof the line that contains the error until the end of the line.\nA value of\n\\fIfalse\\fR\nwill disable error recovery.\nPrior to version 1.9.3, no error recovery was performed.\n.TP 6n\nldap_conf=pathname\nThe\n\\fIldap_conf\\fR\nargument can be used to override the default path to the\n\\fIldap.conf\\fR\nfile.\n.TP 6n\nldap_secret=pathname\nThe\n\\fIldap_secret\\fR\nargument can be used to override the default path to the\n\\fIldap.secret\\fR\nfile.\n.TP 6n\nsudoers_file=pathname\nThe\n\\fIsudoers_file\\fR\nargument can be used to override the default path to the\n\\fIsudoers\\fR\nfile.\n.TP 6n\nsudoers_uid=user-ID\nThe\n\\fIsudoers_uid\\fR\nargument can be used to override the default owner of the sudoers file.\nIt should be specified as a numeric user-ID.\n.TP 6n\nsudoers_gid=group-ID\nThe\n\\fIsudoers_gid\\fR\nargument can be used to override the default group of the sudoers file.\nIt must be specified as a numeric group-ID (not a group name).\n.TP 6n\nsudoers_mode=mode\nThe\n\\fIsudoers_mode\\fR\nargument can be used to override the default file mode for the sudoers file.\nIt should be specified as an octal value.\n.PP\nFor more information on configuring\nsudo.conf(@mansectform@),\nrefer to its manual.\n.SS \"User Authentication\"\nThe\n\\fBsudoers\\fR\nsecurity policy requires that most users authenticate\nthemselves before they can use\n\\fBsudo\\fR.\nA password is not required\nif the invoking user is\n\\fBroot\\fR,\nif the target user is the same as the invoking user, or if the\npolicy has disabled authentication for the user or command.\nUnlike\nsu(1),\nwhen\n\\fBsudoers\\fR\nrequires\nauthentication, it validates the invoking user's credentials, not\nthe target user's (or\n\\fB@runas_default@\\fR's)\ncredentials.\nThis can be changed via\nthe\n\\fIrootpw\\fR,\n\\fItargetpw\\fR\nand\n\\fIrunaspw\\fR\nflags, described later.\n.PP\nIf a user who is not listed in the policy tries to run a command\nvia\n\\fBsudo\\fR,\nmail is sent to the proper authorities.\nThe address\nused for such mail is configurable via the\n\\fImailto\\fR\nDefaults entry\n(described later) and defaults to\n\\fI@mailto@\\fR.\n.PP\nNo mail will be sent if an unauthorized user tries to run\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noption unless there is an authentication error and\neither the\n\\fImail_always\\fR\nor\n\\fImail_badpass\\fR\nflags are enabled.\nThis allows users to\ndetermine for themselves whether or not they are allowed to use\n\\fBsudo\\fR.\nBy default, all attempts to run\n\\fBsudo\\fR\n(successful or not)\nare logged, regardless of whether or not mail is sent.\n.PP\nIf\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nand the\n\\fRSUDO_USER\\fR\nenvironment variable\nis set, the\n\\fBsudoers\\fR\npolicy will use this value to determine who\nthe actual user is.\nThis can be used by a user to log commands\nthrough sudo even when a\n\\fBroot\\fR\nshell has been invoked.\nIt also\nallows the\n\\fB\\-e\\fR\noption to remain useful even when invoked via a\nsudo-run script or program.\nNote, however, that the\n\\fIsudoers\\fR\nfile lookup is still done for\n\\fBroot\\fR,\nnot the user specified by\n\\fRSUDO_USER\\fR.\n.PP\n\\fBsudoers\\fR\nuses per-user time stamp files for credential caching.\nOnce a user has been authenticated, a record is written\ncontaining the user-ID that was used to authenticate, the\nterminal session ID, the start time of the session leader\n(or parent process) and a time stamp\n(using a monotonic clock if one is available).\nThe user may then use\n\\fBsudo\\fR\nwithout a password for a short period of time (@timeout@ minutes\nunless overridden by the\n\\fItimestamp_timeout\\fR\noption).\nBy default,\n\\fBsudoers\\fR\nuses a separate record for each terminal, which means that\na user's login sessions are authenticated separately.\nThe\n\\fItimestamp_type\\fR\noption can be used to select the type of time stamp record\n\\fBsudoers\\fR\nwill use.\n.SS \"Logging\"\nBy default,\n\\fBsudoers\\fR\nlogs both successful and unsuccessful attempts (as well\nas errors).\nThe\n\\fIlog_allowed\\fR\nand\n\\fIlog_denied\\fR\nflags can be used to control this behavior.\nMessages can be logged to\nsyslog(3),\na log file, or both.\nThe default is to log to\nsyslog(3)\nbut this is configurable via the\n\\fIsyslog\\fR\nand\n\\fIlogfile\\fR\nsettings.\nSee\n\\fIEVENT LOGGING\\fR\nfor a description of the log file format.\n.PP\n\\fBsudoers\\fR\nis also capable of running a command in a pseudo-terminal and logging\ninput and/or output.\nThe standard input, standard output, and standard error can be logged\neven when not associated with a terminal.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\n.PP\nStarting with version 1.9, the\n\\fIlog_servers\\fR\nsetting may be used to send event and I/O log data to a remote server running\n\\fBsudo_logsrvd\\fR\nor another service that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.SS \"Command environment\"\nSince environment variables can influence program behavior,\n\\fBsudoers\\fR\nprovides a means to restrict which variables from the user's\nenvironment are inherited by the command to be run.\nThere are two\ndistinct ways\n\\fBsudoers\\fR\ncan deal with environment variables.\n.PP\nBy default, the\n\\fIenv_reset\\fR\nflag is enabled.\nThis causes commands\nto be executed with a new, minimal environment.\nOn AIX (and Linux\nsystems without PAM), the environment is initialized with the\ncontents of the\n\\fI/etc/environment\\fR\nfile.\n.if \\n(LC \\{\\\nOn\nBSD\nsystems, if the\n\\fIuse_loginclass\\fR\nflag is enabled, the environment is initialized\nbased on the\n\\fIpath\\fR\nand\n\\fIsetenv\\fR\nsettings in\n\\fI/etc/login.conf\\fR.\n.\\}\nThe\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nenvironment variables are initialized based on the target user\nand the\n\\fRSUDO_*\\fR\nvariables are set based on the invoking user.\nAdditional variables, such as\n\\fRDISPLAY\\fR,\n\\fRPATH\\fR\nand\n\\fRTERM\\fR,\nare preserved from the invoking user's environment if permitted by the\n\\fIenv_check\\fR,\nor\n\\fIenv_keep\\fR\noptions.\nA few environment variables are treated specially.\nIf the\n\\fRPATH\\fR\nand\n\\fRTERM\\fR\nvariables are not preserved from the user's environment, they will be set\nto default values.\nThe\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nare handled as a single entity.\nIf one of them is preserved (or removed) from the user's environment,\nthe other will be as well.\nIf\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nare to be preserved but only one of them is present in the user's environment,\nthe other will be set to the same value.\nThis avoids an inconsistent environment where one of the variables\ndescribing the user name is set to the invoking user and one is\nset to the target user.\nEnvironment variables with a value beginning with\n\\(oq()\\(cq\nare removed unless both the name and value parts are matched by\n\\fIenv_keep\\fR\nor\n\\fIenv_check\\fR,\nas they may be interpreted as functions by the\n\\fBbash\\fR\nshell.\nPrior to version 1.8.11, such variables were always removed.\n.PP\nIf, however, the\n\\fIenv_reset\\fR\nflag is disabled, any variables not\nexplicitly denied by the\n\\fIenv_check\\fR\nand\n\\fIenv_delete\\fR\noptions are allowed and their values are\ninherited from the invoking process.\nPrior to version 1.8.21, environment variables with a value beginning with\n\\(oq()\\(cq\nwere always removed.\nBeginning with version 1.8.21, a pattern in\n\\fIenv_delete\\fR\nis used to match\n\\fBbash\\fR\nshell functions instead.\nSince it is not possible\nto block all potentially dangerous environment variables, use\nof the default\n\\fIenv_reset\\fR\nbehavior is encouraged.\n.PP\nEnvironment variables specified by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR\nmay include one or more\n\\(oq*\\(cq\ncharacters which will match zero or more characters.\nNo other wildcard characters are supported.\n.PP\nBy default, environment variables are matched by name.\nHowever, if the pattern includes an equal sign\n(\\(oq=\\&\\(cq),\nboth the variables name and value must match.\nFor example, a\n\\fBbash\\fR\nshell function could be matched as follows:\n.nf\n.sp\n.RS 4n\nenv_keep += \"BASH_FUNC_my_func%%=()*\"\n.RE\n.fi\n.PP\nWithout the\n\\(oq=()*\\(cq\nsuffix, this would not match, as\n\\fBbash\\fR\nshell functions are not preserved by default.\n.PP\nThe complete list of environment variables that are preserved or removed,\nas modified by global Defaults parameters in\n\\fIsudoers\\fR,\nis displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nThe list of environment variables to remove\nvaries based on the operating system\n\\fBsudo\\fR\nis running on.\n.PP\nOther\n\\fBsudoers\\fR\noptions may influence the command environment, such as\n\\fIalways_set_home\\fR,\n\\fIsecure_path\\fR,\n\\fIset_logname\\fR,\nand\n\\fIset_home\\fR.\n.PP\nOn systems that support PAM where the\n\\fBpam_env\\fR\nmodule is enabled for\n\\fBsudo\\fR,\nvariables in the PAM environment may be merged in to the environment.\nIf a variable in the PAM environment is already present in the\nuser's environment, the value will only be overridden if the variable\nwas not preserved by\n\\fBsudoers\\fR.\nWhen\n\\fIenv_reset\\fR\nis enabled, variables preserved from the invoking user's environment\nby the\n\\fIenv_keep\\fR\nlist take precedence over those in the PAM environment.\nWhen\n\\fIenv_reset\\fR\nis disabled, variables present the invoking user's environment\ntake precedence over those in the PAM environment unless they\nmatch a pattern in the\n\\fIenv_delete\\fR\nlist.\n.PP\nThe dynamic linker on most operating systems will remove variables\nthat can control dynamic linking from the environment of set-user-ID\nexecutables, including\n\\fBsudo\\fR.\nDepending on the operating\nsystem this may include\n\\fR_RLD*\\fR,\n\\fRDYLD_*\\fR,\n\\fRLD_*\\fR,\n\\fRLDR_*\\fR,\n\\fRLIBPATH\\fR,\n\\fRSHLIB_PATH\\fR,\nand others.\nThese type of variables are\nremoved from the environment before\n\\fBsudo\\fR\neven begins execution\nand, as such, it is not possible for\n\\fBsudo\\fR\nto preserve them.\n.PP\nAs a special case, if the\n\\fB\\-i\\fR\noption (initial login) is\nspecified,\n\\fBsudoers\\fR\nwill initialize the environment regardless\nof the value of\n\\fIenv_reset\\fR.\nThe\n\\fRDISPLAY\\fR,\n\\fRPATH\\fR\nand\n\\fRTERM\\fR\nvariables remain unchanged;\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRUSER\\fR,\nand\n\\fRLOGNAME\\fR\nare set based on the target user.\nOn AIX (and Linux\nsystems without PAM), the contents of\n\\fI/etc/environment\\fR\nare also\nincluded.\n.if \\n(LC \\{\\\nOn\nBSD\nsystems, if the\n\\fIuse_loginclass\\fR\nflag is\nenabled, the\n\\fIpath\\fR\nand\n\\fIsetenv\\fR\nvariables in\n\\fI/etc/login.conf\\fR\nare also applied.\n.\\}\nAll other environment variables are removed unless permitted by\n\\fIenv_keep\\fR\nor\n\\fIenv_check\\fR,\ndescribed above.\n.PP\nFinally, the\n\\fIrestricted_env_file\\fR\nand\n\\fIenv_file\\fR\nfiles are applied, if present.\nThe variables in\n\\fIrestricted_env_file\\fR\nare applied first and are subject to the same restrictions as the\ninvoking user's environment, as detailed above.\nThe variables in\n\\fIenv_file\\fR\nare applied last and are not subject to these restrictions.\nIn both cases, variables present in the files will only be set to\ntheir specified values if they would not conflict with an existing\nenvironment variable.\n.SH \"SUDOERS FILE FORMAT\"\nThe\n\\fIsudoers\\fR\nfile is composed of two types of entries: aliases\n(basically variables) and user specifications (which specify who\nmay run what).\n.PP\nWhen multiple entries match for a user, they are applied in order.\nWhere there are multiple matches, the last match is used (which is\nnot necessarily the most specific match).\n.PP\nThe\n\\fIsudoers\\fR\nfile grammar will be described below in Extended Backus-Naur\nForm (EBNF).\nDon't despair if you are unfamiliar with EBNF; it is fairly simple,\nand the definitions below are annotated.\n.SS \"Resource limits\"\nBy default,\n\\fBsudoers\\fR\nuses the operating system's native method of setting resource limits\nfor the target user.\nOn Linux systems, resource limits are usually set by the\n\\fIpam_limits.so\\fR\nPAM module.\nOn some BSD systems, the\n\\fI/etc/login.conf\\fR\nfile specifies resource limits for the user.\nOn AIX systems, resource limits are configured in the\n\\fI/etc/security/limits\\fR\nfile.\nIf there is no system mechanism to set per-user resource limits,\nthe command will run with the same limits as the invoking user.\nThe one exception to this is the core dump file size, which is set by\n\\fBsudoers\\fR\nto 0 by default.\nDisabling core dumps by default makes it possible to avoid potential\nsecurity problems where the core file is treated as trusted input.\n.PP\nResource limits may also be set in the\n\\fIsudoers\\fR\nfile itself, in which case they override those set by the system.\nSee the\n\\fIrlimit_as,\\fR\n\\fIrlimit_core,\\fR\n\\fIrlimit_cpu,\\fR\n\\fIrlimit_data,\\fR\n\\fIrlimit_fsize,\\fR\n\\fIrlimit_locks,\\fR\n\\fIrlimit_memlock,\\fR\n\\fIrlimit_nofile,\\fR\n\\fIrlimit_nproc,\\fR\n\\fIrlimit_rss,\\fR\n\\fIrlimit_stack\\fR\noptions described below.\nResource limits in\n\\fBsudoers\\fR\nmay be specified in one of the following formats:\n.TP 8n\n\\(lqvalue\\(rq\nBoth the soft and hard resource limits are set to the same value.\nThe special value\n\\(lqinfinity\\(rq\ncan be used to indicate that the value is unlimited.\n.TP 8n\n\\(lqsoft,hard\\(rq\nTwo comma-separated values.\nThe soft limit is set to the first value and the hard limit is set\nto the second.\nBoth values must either be enclosed in a set of double quotes,\nor the comma must be escaped with a backslash\n(\\(oq\\e\\(cq).\nThe special value\n\\(lqinfinity\\(rq\nmay be used in place of either value.\n.TP 8n\n\\(lqdefault\\(rq\nThe default resource limit for the user will be used.\nThis may be a user-specific value (see above) or the value of the\nresource limit when\n\\fBsudo\\fR\nwas invoked for systems that don't support per-user limits.\n.TP 8n\n\\(lquser\\(rq\nThe invoking user's resource limits will be preserved when running\nthe command.\n.PP\nFor example, to restore the historic core dump file size behavior,\na line like the following may be used.\n.sp\n.RS 6n\nDefaults rlimit_core=default\n.RE\n.PP\nResource limits in\n\\fBsudoers\\fR\nare only supported by version 1.8.7 or higher.\n.SS \"Quick guide to EBNF\"\nEBNF is a concise and exact way of describing the grammar of a language.\nEach EBNF definition is made up of\n\\fIproduction rules\\fR.\nFor example:\n.nf\n.sp\n.RS 4n\nsymbol ::= definition | alternate1 | alternate2 ...\n.RE\n.fi\n.PP\nEach\n\\fIproduction rule\\fR\nreferences others and thus makes up a\ngrammar for the language.\nEBNF also contains the following\noperators, which many readers will recognize from regular\nexpressions.\nDo not, however, confuse them with\n\\(lqwildcard\\(rq\ncharacters, which have different meanings.\n.TP 6n\n\\&?\nMeans that the preceding symbol (or group of symbols) is optional.\nThat is, it may appear once or not at all.\n.TP 6n\n*\nMeans that the preceding symbol (or group of symbols) may appear\nzero or more times.\n.TP 6n\n+\nMeans that the preceding symbol (or group of symbols) may appear\none or more times.\n.PP\nParentheses may be used to group symbols together.\nFor clarity,\nwe will use single quotes\n('')\nto designate what is a verbatim character string (as opposed to a symbol name).\n.SS \"Aliases\"\nThere are four kinds of aliases:\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR\nand\n\\fICmnd_Alias\\fR.\nBeginning with\n\\fBsudo\\fR\n1.9.0,\n\\fICmd_Alias\\fR\nmay be used in place of\n\\fICmnd_Alias\\fR\nif desired.\n.nf\n.sp\n.RS 0n\nAlias ::= 'User_Alias'  User_Alias_Spec (':' User_Alias_Spec)* |\n          'Runas_Alias' Runas_Alias_Spec (':' Runas_Alias_Spec)* |\n          'Host_Alias'  Host_Alias_Spec (':' Host_Alias_Spec)* |\n          'Cmnd_Alias'  Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)* |\n          'Cmd_Alias'   Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)*\n\nUser_Alias ::= NAME\n\nUser_Alias_Spec ::= User_Alias '=' User_List\n\nRunas_Alias ::= NAME\n\nRunas_Alias_Spec ::= Runas_Alias '=' Runas_List\n\nHost_Alias ::= NAME\n\nHost_Alias_Spec ::= Host_Alias '=' Host_List\n\nCmnd_Alias ::= NAME\n\nCmnd_Alias_Spec ::= Cmnd_Alias '=' Cmnd_List\n\nNAME ::= [A-Z]([A-Z][0-9]_)*\n.RE\n.fi\n.PP\nEach\n\\fIalias\\fR\ndefinition is of the form\n.nf\n.sp\n.RS 0n\nAlias_Type NAME = item1, item2, ...\n.RE\n.fi\n.PP\nwhere\n\\fIAlias_Type\\fR\nis one of\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR,\nor\n\\fICmnd_Alias\\fR.\nA\n\\fRNAME\\fR\nis a string of uppercase letters, numbers,\nand underscore characters\n(\\(oq_\\(cq).\nA\n\\fRNAME\\fR\n\\fBmust\\fR\nstart with an\nuppercase letter.\nIt is possible to put several alias definitions\nof the same type on a single line, joined by a colon\n(\\(oq:\\&\\(cq).\nFor example:\n.nf\n.sp\n.RS 0n\nAlias_Type NAME = item1, item2, item3 : NAME = item4, item5\n.RE\n.fi\n.PP\nIt is a syntax error to redefine an existing\n\\fIalias\\fR.\nIt is possible to use the same name for\n\\fIaliases\\fR\nof different types, but this is not recommended.\n.PP\nThe definitions of what constitutes a valid\n\\fIalias\\fR\nmember follow.\n.nf\n.sp\n.RS 0n\nUser_List ::= User |\n              User ',' User_List\n\nUser ::= '!'* user name |\n         '!'* #user-ID |\n         '!'* %group |\n         '!'* %#group-ID |\n         '!'* +netgroup |\n         '!'* %:nonunix_group |\n         '!'* %:#nonunix_gid |\n         '!'* User_Alias\n.RE\n.fi\n.PP\nA\n\\fIUser_List\\fR\nis made up of one or more user names, user-IDs\n(prefixed with\n\\(oq#\\(cq),\nsystem group names and IDs (prefixed with\n\\(oq%\\(cq\nand\n\\(oq%#\\(cq\nrespectively), netgroups (prefixed with\n\\(oq+\\(cq),\nnon-Unix group names and IDs (prefixed with\n\\(oq%:\\(cq\nand\n\\(oq%:#\\(cq\nrespectively), and\n\\fIUser_Alias\\fRes.\nEach list item may be prefixed with zero or more\n\\(oq\\&!\\(cq\noperators.\nAn odd number of\n\\(oq\\&!\\(cq\noperators negate the value of\nthe item; an even number just cancel each other out.\nUser netgroups are matched using the user and domain members only;\nthe host member is not used when matching.\n.PP\nA\n\\fIuser name\\fR,\n\\fIuser-ID\\fR,\n\\fIgroup\\fR,\n\\fIgroup-ID\\fR,\n\\fInetgroup\\fR,\n\\fInonunix_group\\fR\nor\n\\fInonunix_gid\\fR\nmay be enclosed in double quotes to avoid the\nneed for escaping special characters.\nAlternately, special characters\nmay be specified in escaped hex mode, e.g., \\ex20 for space.\nWhen\nusing double quotes, any prefix characters must be included inside\nthe quotes.\n.PP\nThe actual\n\\fInonunix_group\\fR\nand\n\\fInonunix_gid\\fR\nsyntax depends on\nthe underlying group provider plugin.\nFor instance, the QAS AD plugin supports the following formats:\n.TP 3n\n\\fB\\(bu\\fR\nGroup in the same domain: \"%:Group Name\"\n.TP 3n\n\\fB\\(bu\\fR\nGroup in any domain: \"%:Group Name@FULLY.QUALIFIED.DOMAIN\"\n.TP 3n\n\\fB\\(bu\\fR\nGroup SID: \"%:S-1-2-34-5678901234-5678901234-5678901234-567\"\n.PP\nSee\n\\fIGROUP PROVIDER PLUGINS\\fR\nfor more information.\n.PP\nQuotes around group names are optional.\nUnquoted strings must use a backslash\n(\\(oq\\e\\(cq)\nto escape spaces and special characters.\nSee\n\\fIOther special characters and reserved words\\fR\nfor a list of\ncharacters that need to be escaped.\n.nf\n.sp\n.RS 0n\nRunas_List ::= Runas_Member |\n               Runas_Member ',' Runas_List\n\nRunas_Member ::= '!'* user name |\n                 '!'* #user-ID |\n                 '!'* %group |\n                 '!'* %#group-ID |\n                 '!'* %:nonunix_group |\n                 '!'* %:#nonunix_gid |\n                 '!'* +netgroup |\n                 '!'* Runas_Alias |\n                 '!'* ALL\n.RE\n.fi\n.PP\nA\n\\fIRunas_List\\fR\nis similar to a\n\\fIUser_List\\fR\nexcept that instead\nof\n\\fIUser_Alias\\fRes\nit can contain\n\\fIRunas_Alias\\fRes.\nUser names and groups are matched as strings.\nIn other words, two users (groups) with the same user (group) ID\nare considered to be distinct.\nIf you wish to match all user names with the same user-ID (e.g.,\n\\fBroot\\fR\nand\n\\fBtoor\\fR),\nyou can use a user-ID instead of a name (#0 in the example given).\nThe user-ID or group-ID specified in a\n\\fIRunas_Member\\fR\nneed not be listed in the password or group database.\n.nf\n.sp\n.RS 0n\nHost_List ::= Host |\n              Host ',' Host_List\n\nHost ::= '!'* host name |\n         '!'* ip_addr |\n         '!'* network(/netmask)? |\n         '!'* +netgroup |\n         '!'* Host_Alias |\n         '!'* ALL\n.RE\n.fi\n.PP\nA\n\\fIHost_List\\fR\nis made up of one or more host names, IP addresses,\nnetwork numbers, netgroups (prefixed with\n\\(oq+\\(cq),\nand other aliases.\nAgain, the value of an item may be negated with the\n\\(oq\\&!\\(cq\noperator.\nHost netgroups are matched using the host (both qualified and unqualified)\nand domain members only; the user member is not used when matching.\nIf you specify a network number without a netmask,\n\\fBsudo\\fR\nwill query each of the local host's network interfaces and,\nif the network number corresponds to one of the hosts's network\ninterfaces, will use the netmask of that interface.\nThe netmask may be specified either in standard IP address notation\n(e.g., 255.255.255.0 or ffff:ffff:ffff:ffff::),\nor CIDR notation (number of bits, e.g., 24 or 64).\nA host name may include shell-style wildcards (see the\n\\fIWildcards\\fR\nsection below),\nbut unless the\n\\fIhostname\\fR\ncommand on your machine returns the fully\nqualified host name, you'll need to use the\n\\fIfqdn\\fR\nflag for wildcards to be useful.\n\\fBsudo\\fR\nonly inspects actual network interfaces; this means that IP address\n127.0.0.1 (localhost) will never match.\nAlso, the host name\n\\(lqlocalhost\\(rq\nwill only match if that is the actual host name, which is usually\nonly the case for non-networked systems.\n.nf\n.sp\n.RS 0n\ndigest ::= [A-Fa-f0-9]+ |\n           [A-Za-z0-9\\e+/=]+\n\nDigest_Spec ::= \"sha224\" ':' digest |\n                \"sha256\" ':' digest |\n                \"sha384\" ':' digest |\n                \"sha512\" ':' digest\n\nDigest_List ::= Digest_Spec |\n                Digest_Spec ',' Digest_List\n\nCmnd_List ::= Cmnd |\n              Cmnd ',' Cmnd_List\n\ncommand name ::= regex |\n                 file name\n\ncommand ::= command name |\n            command name args |\n            command name regex |\n            command name '\"\"' |\n            ALL\n\nEdit_Spec ::= \"sudoedit\" file name+ |\n              \"sudoedit\" regex |\n              \"sudoedit\"\n\nList_Spec ::= \"list\"\n\nCmnd ::= Digest_List? '!'* command |\n         '!'* directory |\n         '!'* Edit_Spec |\n         '!'* List_Spec |\n         '!'* Cmnd_Alias\n.RE\n.fi\n.PP\nA\n\\fICmnd_List\\fR\nis a list of one or more commands, directories, or aliases.\nA command is a fully qualified file name, which may include\nshell-style wildcards (see the\n\\fIWildcards\\fR\nsection below),\nor a regular expression that starts with\n\\(oq^\\(cq\nand ends with\n\\(oq$\\(cq\n(see the\n\\fIRegular expressions\\fR\nsection below).\nA directory is a\nfully qualified path name ending in a\n\\(oq/\\(cq.\nWhen you specify a directory in a\n\\fICmnd_List\\fR,\nthe user will be able to run any file within that directory\n(but not in any sub-directories therein).\nIf no command line arguments are specified, the user may run the\ncommand with any arguments they choose.\nCommand line arguments can include wildcards or be a regular\nexpression that starts with\n\\(oq^\\(cq\nand ends with\n\\(oq$\\(cq.\nIf the command line arguments consist of\n\\(oq\\&\"\"\\(cq,\nthe command may only be run with\n\\fIno\\fR\narguments.\n.PP\nIf a\n\\fICmnd\\fR\nhas associated command line arguments, the arguments\nin the\n\\fICmnd\\fR\nmust match those given by the user on the command line.\nIf the arguments in a\n\\fICmnd\\fR\nbegin with the\n\\(oq^\\(cq\ncharacter, they will be interpreted as a regular expression\nand matched accordingly.\nOtherwise, shell-style wildcards are used when matching.\nUnless a regular expression is specified, the following characters must\nbe escaped with a\n\\(oq\\e\\(cq\nif they are used in command arguments:\n\\(oq,\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq=\\&\\(cq,\n\\(oq\\e\\(cq.\nTo prevent arguments in a\n\\fICmnd\\fR\nthat begin with a\n\\(oq^\\(cq\ncharacter from being interpreted as a regular expression, the\n\\(oq^\\(cq\nmust be escaped with a\n\\(oq\\e\\(cq.\n.PP\nThere are two commands built into\n\\fBsudo\\fR\nitself:\n\\(lqlist\\(rq\nand\n\\(lqsudoedit\\(rq.\nUnlike other commands, these two must be specified in the\n\\fIsudoers\\fR\nfile\n\\fIwithout\\fR\na leading path.\n.PP\nThe\n\\(lqlist\\(rq\nbuilt-in can be used to permit a user to list another user's privileges with\n\\fBsudo\\fR's\n\\fB\\-U\\fR\noption.\nFor example,\n\\(lqsudo -l -U otheruser\\(rq.\nA user with the\n\\(lqlist\\(rq\nprivilege is able to list another user's privileges even if they\ndon't have permission to run commands as that user.\nBy default, only root or a user with the ability to run any command as\neither root or the specified\n\\fIuser\\fR\non the current host may use the\n\\fB\\-U\\fR\noption.\nNo command line arguments may be specified with the\n\\(lqlist\\(rq\nbuilt-in.\n.PP\nThe\n\\(lqsudoedit\\(rq\nbuilt-in is used to permit a user to run\n\\fBsudo\\fR\nwith the\n\\fB\\-e\\fR\noption (or as\n\\fBsudoedit\\fR).\nIt may take command line arguments just as a normal command does.\nUnlike other commands,\n\\(lqsudoedit\\(rq\nis built into\n\\fBsudo\\fR\nitself and must be specified in the\n\\fIsudoers\\fR\nfile\n\\fIwithout\\fR\na leading path.\nIf a leading path is present, for example\n\\fI/usr/bin/sudoedit\\fR,\nthe path name will be silently converted to\n\\(lqsudoedit\\(rq.\nA fully-qualified path for\n\\fBsudoedit\\fR\nis treated as an error by\n\\fBvisudo\\fR.\n.PP\nA\n\\fIcommand\\fR\nmay be preceded by a\n\\fIDigest_List\\fR,\na comma-separated list of one or more\n\\fIDigest_Spec\\fR\nentries.\nIf a\n\\fIDigest_List\\fR\nis present, the command will only match successfully if it can be verified\nusing one of the SHA-2 digests in the list.\nStarting with version 1.9.0, the\n\\fBALL\\fR\nreserved word can be used in conjunction with a\n\\fIDigest_List\\fR.\nThe following digest formats are supported: sha224, sha256, sha384, and sha512.\nThe string may be specified in either hex or base64 format\n(base64 is more compact).\nThere are several utilities capable of generating SHA-2 digests in hex\nformat such as openssl, shasum, sha224sum, sha256sum, sha384sum, sha512sum.\n.PP\nFor example, using openssl:\n.nf\n.sp\n.RS 0n\n$ openssl dgst -sha224 /bin/ls\nSHA224(/bin/ls)= 118187da8364d490b4a7debbf483004e8f3e053ec954309de2c41a25\n.RE\n.fi\n.PP\nIt is also possible to use openssl to generate base64 output:\n.nf\n.sp\n.RS 0n\n$ openssl dgst -binary -sha224 /bin/ls | openssl base64\nEYGH2oNk1JC0p9679IMATo8+BT7JVDCd4sQaJQ==\n.RE\n.fi\n.PP\nWarning, if the user has write access to the command itself (directly or via a\n\\fBsudo\\fR\ncommand), it may be possible for the user to replace the command after the\ndigest check has been performed but before the command is executed.\nA similar race condition exists on systems that lack the\nfexecve(2)\nsystem call when the directory in which the command is located\nis writable by the user.\nSee the description of the\n\\fIfdexec\\fR\nsetting for more information on how\n\\fBsudo\\fR\nexecutes commands that have an associated digest.\n.PP\nCommand digests are only supported by version 1.8.7 or higher.\n.SS \"Defaults\"\nCertain configuration options may be changed from their default\nvalues at run-time via one or more\n\\fIDefault_Entry\\fR\nlines.\nThese may affect all users on any host, all users on a specific host, a\nspecific user, a specific command, or commands being run as a specific user.\nPer-command entries may not include command line arguments.\nIf you need to specify arguments, define a\n\\fICmnd_Alias\\fR\nand reference\nthat instead.\n.nf\n.sp\n.RS 0n\nDefault_Type ::= 'Defaults' |\n                 'Defaults' '@' Host_List |\n                 'Defaults' ':' User_List |\n                 'Defaults' '!' Cmnd_List |\n                 'Defaults' '>' Runas_List\n\nDefault_Entry ::= Default_Type Parameter_List\n\nParameter_List ::= Parameter |\n                   Parameter ',' Parameter_List\n\nParameter ::= Parameter '=' Value |\n              Parameter '+=' Value |\n              Parameter '-=' Value |\n              '!'* Parameter\n.RE\n.fi\n.PP\nParameters may be\n\\fBflags\\fR,\n\\fBinteger\\fR\nvalues,\n\\fBstrings\\fR,\nor\n\\fBlists\\fR.\nFlags are implicitly boolean and can be turned off via the\n\\(oq\\&!\\(cq\noperator.\nSome integer, string and list parameters may also be\nused in a boolean context to disable them.\nValues may be enclosed\nin double quotes\n(\\&\"\")\nwhen they contain multiple words.\nSpecial characters may be escaped with a backslash\n(\\(oq\\e\\(cq).\n.PP\nTo include a literal backslash character in a command line argument\nyou must escape the backslash twice.\nFor example, to match\n\\(oq\\en\\(cq\nas part of a command line argument, you must use\n\\(oq\\e\\e\\e\\en\\(cq\nin the\n\\fIsudoers\\fR\nfile.\nThis is due to there being two levels of escaping, one in the\n\\fIsudoers\\fR\nparser itself and another when command line arguments are matched by the\nfnmatch(3)\nor\nregexec(3)\nfunction.\n.PP\nLists have two additional assignment operators,\n\\(oq+=\\(cq\nand\n\\(oq-=\\(cq.\nThese operators are used to add to and delete from a list respectively.\nIt is not an error to use the\n\\(oq-=\\(cq\noperator to remove an element\nthat does not exist in a list.\n.PP\nDefaults entries are parsed in the following order: global, host,\nuser, and runas Defaults first, then command defaults.\nIf there are multiple Defaults settings of the same type, the last\nmatching setting is used.\nThe following Defaults settings are parsed before all others since\nthey may affect subsequent entries:\n\\fIfqdn\\fR,\n\\fIgroup_plugin\\fR,\n\\fIrunas_default\\fR,\n\\fIsudoers_locale\\fR.\n.PP\nSee\n\\fISUDOERS OPTIONS\\fR\nfor a list of supported Defaults parameters.\n.SS \"User specification\"\n.nf\n.RS 0n\nUser_Spec ::= User_List Host_List '=' Cmnd_Spec_List \\e\n              (':' Host_List '=' Cmnd_Spec_List)*\n\nCmnd_Spec_List ::= Cmnd_Spec |\n                   Cmnd_Spec ',' Cmnd_Spec_List\n\nCmnd_Spec ::= Runas_Spec? Option_Spec* (Tag_Spec ':')* Cmnd\n\nRunas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'\n\n.ie \\n(SL \\{\\\n.ie \\n(PS Option_Spec ::= (SELinux_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec)\n.el Option_Spec ::= (SELinux_Spec | Date_Spec | Timeout_Spec)\n.\\}\n.el \\{\\\n.ie \\n(PS Option_Spec ::= (Solaris_Priv_Spec | Date_Spec | Timeout_Spec)\n.el Option_Spec ::= (Date_Spec | Timeout_Spec)\n.\\}\n\n.if \\n(SL \\{\\\nSELinux_Spec ::= ('ROLE=role' | 'TYPE=type')\n\n.\\}\nAppArmor_Spec ::= 'APPARMOR_PROFILE=profile'\n\n.if \\n(PS \\{\\\nSolaris_Priv_Spec ::= ('PRIVS=privset' | 'LIMITPRIVS=privset')\n\n.\\}\nDate_Spec ::= ('NOTBEFORE=timestamp' | 'NOTAFTER=timestamp')\n\nTimeout_Spec ::= 'TIMEOUT=timeout'\n\nChdir_Spec ::= 'CWD=directory'\n\nChroot_Spec ::= 'CHROOT=directory'\n\nTag_Spec ::= ('EXEC' | 'NOEXEC' | 'FOLLOW' | 'NOFOLLOW' |\n              'LOG_INPUT' | 'NOLOG_INPUT' | 'LOG_OUTPUT' |\n              'NOLOG_OUTPUT' | 'MAIL' | 'NOMAIL' | 'INTERCEPT' |\n              'NOINTERCEPT' | 'PASSWD' | 'NOPASSWD' | 'SETENV' |\n              'NOSETENV')\n.RE\n.fi\n.PP\nA\n\\fBuser specification\\fR\ndetermines which commands a user may run\n(and as what user) on specified hosts.\nBy default, commands are run as\n\\fB@runas_default@\\fR\n(unless\n\\fIrunas_default\\fR\nhas been set to a different value)\nbut this can also be changed on a per-command basis.\n.PP\nThe basic structure of a user specification is\n\\(lqwho where = (as_whom) what\\(rq.\nLet's break that down into its constituent parts:\n.SS \"Runas_Spec\"\nA\n\\fIRunas_Spec\\fR\ndetermines the user and/or the group that a command\nmay be run as.\nA fully-specified\n\\fIRunas_Spec\\fR\nconsists of two\n\\fIRunas_List\\fRs\n(as defined above) separated by a colon\n(\\(oq:\\&\\(cq)\nand enclosed in a set of parentheses.\nThe first\n\\fIRunas_List\\fR\nindicates which users the command may be run as via the\n\\fB\\-u\\fR\noption.\nThe second defines a list of groups that may be specified via the\n\\fB\\-g\\fR\noption (in addition to any of the target user's groups).\nIf both\n\\fIRunas_List\\fRs\nare specified, the command may be run with any combination of users\nand groups listed in their respective\n\\fIRunas_List\\fRs.\nIf only the first is specified, the command may be run as any user\nin the list and, optionally, with any group the target user belongs to.\nIf the first\n\\fIRunas_List\\fR\nis empty but the\nsecond is specified, the command may be run as the invoking user\nwith the group set to any listed in the\n\\fIRunas_List\\fR.\nIf both\n\\fIRunas_List\\fRs\nare empty, the command may only be run as the invoking user and the\ngroup, if specified, must be one that the invoking user is a member of.\nIf no\n\\fIRunas_Spec\\fR\nis specified, the command may only be run as the\n\\fIrunas_default\\fR\nuser\n(\\fB@runas_default@\\fR\nby default) and the group,\nif specified, must be one that the\n\\fIrunas_default\\fR\nuser is a member of.\n.PP\nA\n\\fIRunas_Spec\\fR\nsets the default for the commands that follow it.\nWhat this means is that for the entry:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm\n.RE\n.fi\n.PP\nThe user\n\\fBdgb\\fR\nmay run\n\\fI/bin/ls\\fR,\n\\fI/bin/kill\\fR,\nand\n\\fI/usr/bin/lprm\\fR\non the host\nboulder\\(embut\nonly as\n\\fBoperator\\fR.\nFor example:\n.nf\n.sp\n.RS 0n\n$ sudo -u operator /bin/ls\n.RE\n.fi\n.PP\nIt is also possible to override a\n\\fIRunas_Spec\\fR\nlater on in an entry.\nIf we modify the entry like so:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm\n.RE\n.fi\n.PP\nThen user\n\\fBdgb\\fR\nis now allowed to run\n\\fI/bin/ls\\fR\nas\n\\fBoperator\\fR,\nbut\n\\fI/bin/kill\\fR\nand\n\\fI/usr/bin/lprm\\fR\nas\n\\fBroot\\fR.\n.PP\nWe can extend this to allow\n\\fBdgb\\fR\nto run\n\\fI/bin/ls\\fR\nwith either\nthe user or group set to\n\\fBoperator\\fR:\n.nf\n.sp\n.RS 0n\ndgb\tboulder = (operator : operator) /bin/ls, (root) /bin/kill,\\e\n\t/usr/bin/lprm\n.RE\n.fi\n.PP\nWhile the group portion of the\n\\fIRunas_Spec\\fR\npermits the\nuser to run as command with that group, it does not force the user\nto do so.\nIf no group is specified on the command line, the command\nwill run with the group listed in the target user's password database\nentry.\nThe following would all be permitted by the sudoers entry above:\n.nf\n.sp\n.RS 0n\n$ sudo -u operator /bin/ls\n$ sudo -u operator -g operator /bin/ls\n$ sudo -g operator /bin/ls\n.RE\n.fi\n.PP\nIn the following example, user\n\\fBtcm\\fR\nmay run commands that access\na modem device file with the dialer group.\n.nf\n.sp\n.RS 0n\ntcm\tboulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\\e\n\t/usr/local/bin/minicom\n.RE\n.fi\n.PP\nIn this example only the group will be set, the command still runs as user\n\\fBtcm\\fR.\nFor example:\n.nf\n.sp\n.RS 0n\n$ sudo -g dialer /usr/bin/cu\n.RE\n.fi\n.PP\nMultiple users and groups may be present in a\n\\fIRunas_Spec\\fR,\nin which case the user may select any combination of users and groups via the\n\\fB\\-u\\fR\nand\n\\fB\\-g\\fR\noptions.\nIn this example:\n.nf\n.sp\n.RS 0n\nalan\tALL = (root, bin : operator, system) ALL\n.RE\n.fi\n.PP\nuser\n\\fBalan\\fR\nmay run any command as either user\n\\fBroot\\fR\nor\n\\fBbin\\fR,\noptionally setting the group to operator or system.\n.SS \"Option_Spec\"\nA\n\\fICmnd\\fR\nmay have zero or more options associated with it.\nOptions may consist of\n.if \\n(SL \\{\\\nSELinux roles and/or types,\n.\\}\nAppArmor profiles,\n.if \\n(PS \\{\\\nSolaris privileges sets,\n.\\}\nstart and/or end dates and command timeouts.\nOnce an option is set for a\n\\fICmnd\\fR,\nsubsequent\n\\fICmnd\\fRs\nin the\n\\fICmnd_Spec_List\\fR,\ninherit that option unless it is overridden by another option.\nOption names are reserved words in\n\\fIsudoers\\fR.\nThis means that none of the valid option names (see below) can be used\nwhen declaring an alias.\n.if \\n(SL \\{\\\n.SS \"SELinux_Spec\"\nOn systems with SELinux support,\n\\fIsudoers\\fR\nfile entries may optionally have an SELinux role and/or type associated\nwith a command.\nThis can be used to implement a form of role-based access control (RBAC).\nIf a role or\ntype is specified with the command it will override any default values\nspecified in\n\\fIsudoers\\fR.\nA role or type specified on the command line,\nhowever, will supersede the values in\n\\fIsudoers\\fR.\n.\\}\n.SS \"AppArmor_Spec\"\nOn systems supporting AppArmor,\n\\fIsudoers\\fR\nfile entries may optionally specify an AppArmor profile that should be\nused to confine a command.\nIf an AppArmor profile is specified with the command, it will override\nany default values specified in\n\\fIsudoers\\fR.\nAppropriate profile transition rules must be defined to support the\nprofile change specified for a user.\n.PP\nAppArmor profiles can be specified in any way that complies with the\nrules of\naa_change_profile(2).\nFor instance, in the following\n\\fIsudoers\\fR\nentry\n.nf\n.sp\n.RS 0n\nalice\tALL = (root)\tAPPARMOR_PROFILE=my-profile\tALL\n.RE\n.fi\n.PP\nthe user\n\\fBalice\\fR\nmay run any command as\n\\fBroot\\fR\nunder confinement by the profile\n\\(oqmy-profile\\(cq.\nYou can also stack profiles, or allow a user to run commands unconfined by\nany profile.\nFor example:\n.nf\n.sp\n.RS 0n\nbob\tALL = (root)\tAPPARMOR_PROFILE=foo//&bar\t/usr/bin/vi\ncathy\tALL = (root)\tAPPARMOR_PROFILE=unconfined\t/bin/ls\n.RE\n.fi\n.PP\nThese\n\\fIsudoers\\fR\nentries allow user\n\\fBbob\\fR\nto run\n\\fI/usr/bin/vi\\fR\nas\n\\fBroot\\fR\nunder the stacked profiles\n\\(oqfoo\\(cq\nand\n\\(oqbar\\(cq,\nand user\n\\fBcathy\\fR\nto run\n\\fI/bin/ls\\fR\nwithout any confinement at all.\n.if \\n(PS \\{\\\n.SS \"Solaris_Priv_Spec\"\nOn Solaris systems,\n\\fIsudoers\\fR\nfile entries may optionally specify Solaris privilege set and/or limit\nprivilege set associated with a command.\nIf privileges or limit privileges are specified with the command\nit will override any default values specified in\n\\fIsudoers\\fR.\n.PP\nA privilege set is a comma-separated list of privilege names.\nThe\nppriv(1)\ncommand can be used to list all privileges known to the system.\nFor example:\n.nf\n.sp\n.RS 0n\n$ ppriv -l\n.RE\n.fi\n.PP\nIn addition, there are several\n\\(lqspecial\\(rq\nprivilege strings:\n.TP 7n\nnone\nthe empty set\n.TP 7n\nall\nthe set of all privileges\n.TP 7n\nzone\nthe set of all privileges available in the current zone\n.TP 7n\nbasic\nthe default set of privileges normal users are granted at login time\n.PP\nPrivileges can be excluded from a set by prefixing the privilege\nname with either an\n\\(oq\\&!\\(cq\nor\n\\(oq\\-\\(cq\ncharacter.\n.\\}\n.SS \"Date_Spec\"\n\\fBsudoers\\fR\nrules can be specified with a start and end date via the\n\\fRNOTBEFORE\\fR\nand\n\\fRNOTAFTER\\fR\nsettings.\nThe time stamp must be specified in\n\\(lqGeneralized Time\\(rq\nas defined by RFC 4517.\nThe format is effectively\n\\(oqyyyymmddHHMMSSZ\\(cq\nwhere the minutes and seconds are optional.\nThe\n\\(oqZ\\(cq\nsuffix indicates that the time stamp is in Coordinated Universal Time (UTC).\nIt is also possible to specify a timezone offset from UTC in hours\nand minutes instead of a\n\\(oqZ\\(cq.\nFor example,\n\\(oq-0500\\(cq\nwould correspond to Eastern Standard time in the US.\nAs an extension, if no\n\\(oqZ\\(cq\nor timezone offset is specified, local time will be used.\n.PP\nThe following are all valid time stamps:\n.nf\n.sp\n.RS 4n\n20170214083000Z\n2017021408Z\n20160315220000-0500\n20151201235900\n.RE\n.fi\n.SS \"Timeout_Spec\"\nA command may have a timeout associated with it.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nThe timeout may be specified in combinations of days, hours,\nminutes, and seconds with a single-letter case-insensitive suffix\nthat indicates the unit of time.\nFor example, a timeout of 7 days, 8 hours, 30 minutes, and\n10 seconds would be written as\n\\(oq7d8h30m10s\\(cq.\nIf a number is specified without a unit, seconds are assumed.\nAny of the days, minutes, hours, or seconds may be omitted.\nThe order must be from largest to smallest unit and a unit\nmay not be specified more than once.\n.PP\nThe following are all\n\\fIvalid\\fR\ntimeout values:\n\\(oq7d8h30m10s\\(cq,\n\\(oq14d\\(cq,\n\\(oq8h30m\\(cq,\n\\(oq600s\\(cq,\n\\(oq3600\\(cq.\nThe following are\n\\fIinvalid\\fR\ntimeout values:\n\\(oq12m2w1d\\(cq,\n\\(oq30s10m4h\\(cq,\n\\(oq1d2d3h\\(cq.\n.PP\nThis setting is only supported by version 1.8.20 or higher.\n.SS \"Chdir_Spec\"\nThe working directory that the command will be run in can be specified\nusing the\n\\fRCWD\\fR\nsetting.\nThe\n\\fIdirectory\\fR\nmust be a fully-qualified path name beginning with a\n\\(oq/\\(cq\nor\n\\(oq~\\(cq\ncharacter, or the special value\n\\(lq*\\(rq.\nA value of\n\\(lq*\\(rq\nindicates that the user may specify the working directory by running\n\\fBsudo\\fR\nwith the\n\\fB\\-D\\fR\noption.\nBy default, commands are run from the invoking user's current working\ndirectory, unless the\n\\fB\\-i\\fR\noption is given.\nPath names of the form\n\\fI~user/path/name\\fR\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.PP\nThis setting is only supported by version 1.9.3 or higher.\n.SS \"Chroot_Spec\"\nThe root directory that the command will be run in can be specified\nusing the\n\\fRCHROOT\\fR\nsetting.\nThe\n\\fIdirectory\\fR\nmust be a fully-qualified path name beginning with a\n\\(oq/\\(cq\nor\n\\(oq~\\(cq\ncharacter, or the special value\n\\(lq*\\(rq.\nA value of\n\\(lq*\\(rq\nindicates that the user may specify the root directory by running\n\\fBsudo\\fR\nwith the\n\\fB\\-R\\fR\noption.\nThis setting can be used to run the command in a\nchroot(2)\n\\(lqsandbox\\(rq\nsimilar to the\nchroot(@mansectsu@)\nutility.\nPath names of the form\n\\fI~user/path/name\\fR\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.PP\nThis setting is only supported by version 1.9.3 or higher.\n.SS \"Tag_Spec\"\nA command may have zero or more tags associated with it.\nThe following tag values are supported:\n\\fREXEC\\fR,\n\\fRNOEXEC\\fR,\n\\fRFOLLOW\\fR,\n\\fRNOFOLLOW\\fR,\n\\fRLOG_INPUT\\fR,\n\\fRNOLOG_INPUT\\fR,\n\\fRLOG_OUTPUT\\fR,\n\\fRNOLOG_OUTPUT\\fR,\n\\fRMAIL\\fR,\n\\fRNOMAIL\\fR,\n\\fRINTERCEPT\\fR,\n\\fRNOINTERCEPT\\fR,\n\\fRPASSWD\\fR,\n\\fRNOPASSWD\\fR,\n\\fRSETENV\\fR,\nand\n\\fRNOSETENV\\fR.\nOnce a tag is set on a\n\\fICmnd\\fR,\nsubsequent\n\\fICmnd\\fRs\nin the\n\\fICmnd_Spec_List\\fR,\ninherit the tag unless it is overridden by the opposite tag (in other words,\n\\fRPASSWD\\fR\noverrides\n\\fRNOPASSWD\\fR\nand\n\\fRNOEXEC\\fR\noverrides\n\\fREXEC\\fR).\n.TP 2n\n\\fREXEC\\fR and \\fRNOEXEC\\fR\n.sp\nIf\n\\fBsudo\\fR\nhas been compiled with\n\\fInoexec\\fR\nsupport and the underlying operating system supports it, the\n\\fRNOEXEC\\fR\ntag can be used to prevent a dynamically-linked executable from\nrunning further commands itself.\n.sp\nIn the following example, user\n\\fBaaron\\fR\nmay run\n\\fI/usr/bin/more\\fR\nand\n\\fI/usr/bin/vi\\fR\nbut shell escapes will be disabled.\n.nf\n.sp\n.RS 2n\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.RE\n.fi\n.RS 2n\n.sp\nSee the\n\\fIPreventing shell escapes\\fR\nsection below for more details on how\n\\fRNOEXEC\\fR\nworks and whether or not it will work on your system.\n.RE\n.TP 2n\n\\fRFOLLOW\\fR and \\fRNOFOLLOW\\fR\n.sp\nStarting with version 1.8.15,\n\\fBsudoedit\\fR\nwill not open a file that is a symbolic link unless the\n\\fIsudoedit_follow\\fR\nflag is enabled.\nThe\n\\fRFOLLOW\\fR\nand\n\\fRNOFOLLOW\\fR\ntags override the value of\n\\fIsudoedit_follow\\fR\nand can be used to permit (or deny) the editing of symbolic links\non a per-command basis.\nThese tags are only effective for the\n\\fIsudoedit\\fR\ncommand and are ignored for all other commands.\n.TP 2n\n\\fRLOG_INPUT\\fR and \\fRNOLOG_INPUT\\fR\n.sp\nThese tags override the value of the\n\\fIlog_input\\fR\nflag on a per-command basis.\nFor more information, see\n\\fII/O LOGGING\\fR.\n.TP 2n\n\\fRLOG_OUTPUT\\fR and \\fRNOLOG_OUTPUT\\fR\n.sp\nThese tags override the value of the\n\\fIlog_output\\fR\nflag on a per-command basis.\nFor more information, see\n\\fII/O LOGGING\\fR.\n.TP 2n\n\\fRMAIL\\fR and \\fRNOMAIL\\fR\n.sp\nThese tags provide fine-grained control over whether\nmail will be sent when a user runs a command by\noverriding the value of the\n\\fImail_all_cmnds\\fR\nflag on a per-command basis.\nThey have no effect when\n\\fBsudo\\fR\nis run with the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noptions.\nA\n\\fRNOMAIL\\fR\ntag will also override the\n\\fImail_always\\fR\nand\n\\fImail_no_perms\\fR\noptions.\nFor more information, see the descriptions of\n\\fImail_all_cmnds\\fR,\n\\fImail_always\\fR,\nand\n\\fImail_no_perms\\fR\nin the\n\\fISUDOERS OPTIONS\\fR\nsection below.\n.TP 2n\n\\fRPASSWD\\fR and \\fRNOPASSWD\\fR\n.sp\nBy default,\n\\fBsudo\\fR\nrequires that a user authenticate\nbefore running a command.\nThis behavior can be modified via the\n\\fRNOPASSWD\\fR\ntag.\nLike a\n\\fIRunas_Spec\\fR,\nthe\n\\fRNOPASSWD\\fR\ntag sets\na default for the commands that follow it in the\n\\fICmnd_Spec_List\\fR.\nConversely, the\n\\fRPASSWD\\fR\ntag can be used to reverse things.\nFor example:\n.nf\n.sp\n.RS 2n\nray\trushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm\n.RE\n.fi\n.RS 2n\n.sp\nwould allow the user\n\\fBray\\fR\nto run\n\\fI/bin/kill\\fR,\n\\fI/bin/ls\\fR,\nand\n\\fI/usr/bin/lprm\\fR\nas\n\\fB@runas_default@\\fR\non the machine\n\\(lqrushmore\\(rq\nwithout authenticating himself.\nIf we only want\n\\fBray\\fR\nto be able to\nrun\n\\fI/bin/kill\\fR\nwithout a password the entry would be:\n.nf\n.sp\n.RS 2n\nray\trushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm\n.RE\n.fi\n.sp\nNote, however, that the\n\\fRPASSWD\\fR\ntag has no effect on users who are in the group specified by the\n\\fIexempt_group\\fR\nsetting.\n.sp\nBy default, if the\n\\fRNOPASSWD\\fR\ntag is applied to any of a user's entries for the current host,\nthe user will be able to run\n\\(oqsudo -l\\(cq\nwithout a password.\nAdditionally, a user may only run\n\\(oqsudo -v\\(cq\nwithout a password if all of the user's entries for the current\nhost have the\n\\fRNOPASSWD\\fR\ntag.\nThis behavior may be overridden via the\n\\fIverifypw\\fR\nand\n\\fIlistpw\\fR\noptions.\n.RE\n.TP 2n\n\\fRSETENV\\fR and \\fRNOSETENV\\fR\n.sp\nThese tags override the value of the\n\\fIsetenv\\fR\nflag on a per-command basis.\nIf\n\\fRSETENV\\fR\nhas been set for a command, the user may disable the\n\\fIenv_reset\\fR\nflag from the command line via the\n\\fB\\-E\\fR\noption.\nAdditionally, environment variables set on the command\nline are not subject to the restrictions imposed by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR.\nAs such, only trusted users should be allowed to set variables in this manner.\nIf the command matched is\n\\fBALL\\fR,\nthe\n\\fRSETENV\\fR\ntag is implied for that command; this default may be overridden by use of the\n\\fRNOSETENV\\fR\ntag.\n.TP 2n\n\\fRINTERCEPT\\fR and \\fRNOINTERCEPT\\fR\n.sp\nIf\n\\fBsudo\\fR\nhas been compiled with\n\\fIintercept\\fR\nsupport and the underlying operating system supports it, the\n\\fRINTERCEPT\\fR\ntag can be used to cause programs spawned by a command to be validated against\n\\fIsudoers\\fR\nand logged just like they would be if run through\n\\fBsudo\\fR\ndirectly.\nThis is useful in conjunction with commands that allow shell escapes\nsuch as editors, shells, and paginators.\nThere is additional overhead due to the policy check that may add\nlatency when running commands such as shell scripts that execute a\nlarge number of sub-commands.\nFor interactive commands, such as a shell or editor,\nthe overhead is not usually noticeable.\n.sp\nIn the following example, user\n\\fBchuck\\fR\nmay run any command on the machine\n\\(lqresearch\\(rq\nin intercept mode.\n.nf\n.sp\n.RS 2n\nchuck\tresearch = INTERCEPT: ALL\n.RE\n.fi\n.RS 2n\n.sp\nSee the\n\\fIPreventing shell escapes\\fR\nsection below for more details on how\n\\fRINTERCEPT\\fR\nworks and whether or not it will work on your system.\n.RE\n.SS \"Wildcards\"\n\\fBsudo\\fR\nallows shell-style\n\\fIwildcards\\fR\n(aka meta or glob characters)\nto be used in host names, path names, and command line arguments in the\n\\fIsudoers\\fR\nfile.\nWildcard matching is done via the\nglob(3)\nand\nfnmatch(3)\nfunctions as specified by\nIEEE Std 1003.1 (\\(lqPOSIX.1\\(rq).\n.TP 8n\n*\nMatches any set of zero or more characters (including white space).\n.TP 8n\n\\&?\nMatches any single character (including white space).\n.TP 8n\n[...]\nMatches any character in the specified range.\n.TP 8n\n[!...]\nMatches any character\n\\fInot\\fR\nin the specified range.\n.TP 8n\n\\ex\nFor any character\n\\(oqx\\(cq,\nevaluates to\n\\(oqx\\(cq.\nThis is used to escape special characters such as:\n\\(oq*\\(cq,\n\\(oq\\&?\\(cq,\n\\(oq[\\&\\(cq,\nand\n\\(oq]\\&\\(cq.\n.PP\n\\fBThese are not regular expressions.\\fR\nUnlike a regular expression there is no way to match one or more\ncharacters within a range.\n.PP\nCharacter classes may be used if your system's\nglob(3)\nand\nfnmatch(3)\nfunctions support them.\nHowever, because the\n\\(oq:\\&\\(cq\ncharacter has special meaning in\n\\fIsudoers\\fR,\nit must be\nescaped.\nFor example:\n.nf\n.sp\n.RS 4n\n/bin/ls [[\\e:\\&alpha\\e:\\&]]*\n.RE\n.fi\n.PP\nWould match any file name beginning with a letter.\n.PP\nA forward slash\n(\\(oq/\\(cq)\nwill\n\\fInot\\fR\nbe matched by\nwildcards used in the file name portion of the command.\nThis is to make a path like:\n.nf\n.sp\n.RS 4n\n/usr/bin/*\n.RE\n.fi\n.PP\nmatch\n\\fI/usr/bin/who\\fR\nbut not\n\\fI/usr/bin/X11/xterm\\fR.\n.PP\nWhen matching the command line arguments, however, a slash\n\\fIdoes\\fR\nget matched by wildcards since command line arguments may contain\narbitrary strings and not just path names.\n.PP\n\\fBWildcards in command line arguments should be used with care.\\fR\n.br\nWildcards can match any character, including white space.\nIn most cases, it is safer to use a regular expression to match\ncommand line arguments.\nFor more information, see\n\\fIWildcards in command arguments\\fR\nbelow.\n.SS \"Exceptions to wildcard rules\"\nThe following exceptions apply to the above rules:\n.TP 10n\n\\&\"\"\nIf the empty string\n\\(oq\\&\"\"\\(cq\nis the only command line argument in the\n\\fIsudoers\\fR\nfile entry it means that command is not allowed to be run with\n\\fIany\\fR\narguments.\n.TP 10n\nsudoedit\nCommand line arguments to the\n\\fIsudoedit\\fR\nbuilt-in command should always be path names, so a forward slash\n(\\(oq/\\(cq)\nwill not be matched by a wildcard.\n.SS \"Regular expressions\"\nStarting with version 1.9.10, it is possible to use\nregular expressions for path names and command line arguments.\nRegular expressions are more expressive than shell-style\n\\fIwildcards\\fR\nand are usually safer because they provide a greater degree of\ncontrol when matching.\nThe type of regular expressions supported by\n\\fBsudoers\\fR\nare POSIX extended regular expressions, similar to those used by the\negrep(1)\nutility.\nThey are usually documented in the\nregex(@mansectmisc@)\nor\nre_format(@mansectmisc@)\nmanual, depending on the system.\nAs an extension, if the regular expression begins with\n\\(lq(?i)\\(rq,\nit will be matched in a case-insensitive manner.\n.PP\nIn\n\\fIsudoers\\fR,\nregular expressions must start with a\n\\(oq^\\(cq\ncharacter and end with a\n\\(oq$\\(cq.\nThis makes it explicit what is, or is not, a regular expression.\nEither the path name, the command line arguments or both may\nbe regular expressions.\nBecause the path name and arguments are matched separately, it is\neven possible to use wildcards for the path name and regular\nexpressions for the arguments.\nIt is not possible to use a single regular expression to match\nboth the command and its arguments.\nRegular expressions in\n\\fIsudoers\\fR\nare limited to 1024 characters.\n.PP\nThere is no need to escape\n\\fIsudoers\\fR\nspecial characters in a regular expression other than the pound sign\n(\\(oq#\\(cq).\n.PP\nIn the following example, user\n\\fBjohn\\fR\ncan run the\npasswd(1)\ncommand as\n\\fB@runas_default@\\fR\non any host but is not allowed to change\n\\fBroot\\fR's\npassword.\nThis kind of rule is impossible to express safely using wildcards.\n.nf\n.sp\n.RS 4n\njohn\tALL = /usr/bin/passwd ^[a-zA-Z0-9_]+$,\\e\n              !/usr/bin/passwd root\n.RE\n.fi\n.PP\nIt is also possible to use a regular expression in conjunction with\n\\fBsudoedit\\fR\nrules.\nThe following rule would give user bob the ability to edit the\n\\fI/etc/motd\\fR,\n\\fI/etc/issue\\fR,\nand\n\\fI/etc/hosts\\fR\nfiles only.\n.nf\n.sp\n.RS 4n\nbob    ALL = sudoedit ^/etc/(motd|issue|hosts)$\n.RE\n.fi\n.PP\nRegular expressions may also be used to match the command itself.\nIn this example, a regular expression is used to allow user\n\\fBsid\\fR\nto run the\n\\fI/usr/sbin/groupadd\\fR,\n\\fI/usr/sbin/groupmod\\fR,\n\\fI/usr/sbin/groupdel\\fR,\n\\fI/usr/sbin/useradd\\fR,\n\\fI/usr/sbin/usermod\\fR,\nand\n\\fI/usr/sbin/userdel\\fR\ncommands as\n\\fB@runas_default@\\fR.\n.nf\n.sp\n.RS 4n\nsid    ALL = ^/usr/sbin/(group|user)(add|mod|del)$\n.RE\n.fi\n.PP\nOne disadvantage of using a regular expression to match the command\nname is that it is not possible to match relative paths such as\n\\fI./useradd\\fR\nor\n\\fI../sbin/useradd\\fR.\nThis has security implications when a regular expression is used\nfor the command name in conjunction with the negation operator,\n\\(oq!\\&\\(cq,\nas such rules can be trivially bypassed.\nBecause of this, using a negated regular expression for the command name is\n\\fBstrongly discouraged\\fR.\nThis does not apply to negated commands that only use a regular\nexpression to match the command arguments.\nSee\n\\fIRegular expressions in command names\\fR\nbelow for more information.\n.SS \"Including other files from within sudoers\"\nIt is possible to include other\n\\fIsudoers\\fR\nfiles from within the\n\\fIsudoers\\fR\nfile currently being parsed using the\n\\fI@include\\fR\nand\n\\fI@includedir\\fR\ndirectives.\nFor compatibility with sudo versions prior to 1.9.1,\n\\fI#include\\fR\nand\n\\fI#includedir\\fR\nare also accepted.\n.PP\nAn include file can be used, for example, to keep a site-wide\n\\fIsudoers\\fR\nfile in addition to a local, per-machine file.\nFor the sake of this example the site-wide\n\\fIsudoers\\fR\nfile will be\n\\fI/etc/sudoers\\fR\nand the per-machine one will be\n\\fI/etc/sudoers.local\\fR.\nTo include\n\\fI/etc/sudoers.local\\fR\nfrom within\n\\fI/etc/sudoers\\fR\none would use the following line in\n\\fI/etc/sudoers\\fR:\n.nf\n.sp\n.RS 4n\n@include /etc/sudoers.local\n.RE\n.fi\n.PP\nWhen\n\\fBsudo\\fR\nreaches this line it will suspend processing of the current file\n(\\fI/etc/sudoers\\fR)\nand switch to\n\\fI/etc/sudoers.local\\fR.\nUpon reaching the end of\n\\fI/etc/sudoers.local\\fR,\nthe rest of\n\\fI/etc/sudoers\\fR\nwill be processed.\nFiles that are included may themselves include other files.\nA hard limit of 128 nested include files is enforced to prevent include\nfile loops.\n.PP\nStarting with version 1.9.1, the path to the include file may contain\nwhite space if it is escaped with a backslash\n(\\(oq\\e\\(cq).\nAlternately, the entire path may be enclosed in double quotes\n(\\&\"\"),\nin which case no escaping is necessary.\nTo include a literal backslash in the path,\n\\(oq\\e\\e\\(cq\nshould be used.\n.PP\nIf the path to the include file is not fully-qualified (does not\nbegin with a\n\\(oq/\\(cq),\nit must be located in the same directory as the sudoers file it was\nincluded from.\nFor example, if\n\\fI/etc/sudoers\\fR\ncontains the line:\n.nf\n.sp\n.RS 4n\n@include sudoers.local\n.RE\n.fi\n.PP\nthe file that will be included is\n\\fI/etc/sudoers.local\\fR.\n.PP\nThe file name may also include the\n\\(oq%h\\(cq\nescape, signifying the short form of the host name.\nIn other words, if the machine's host name is\n\\(lqxerxes\\(rq,\nthen\n.nf\n.sp\n.RS 4n\n@include /etc/sudoers.%h\n.RE\n.fi\n.PP\nwill cause\n\\fBsudo\\fR\nto include the file\n\\fI/etc/sudoers.xerxes\\fR.\n.PP\nThe\n\\fI@includedir\\fR\ndirective can be used to create a\n\\fIsudoers.d\\fR\ndirectory that the system package manager can drop\n\\fIsudoers\\fR\nfile rules into as part of package installation.\nFor example, given:\n.nf\n.sp\n.RS 4n\n@includedir /etc/sudoers.d\n.RE\n.fi\n.PP\n\\fBsudo\\fR\nwill suspend processing of the current file and read each file in\n\\fI/etc/sudoers.d\\fR,\nskipping file names that end in\n\\(oq~\\(cq\nor contain a\n\\(oq.\\&\\(cq\ncharacter to avoid causing problems with package manager or editor\ntemporary/backup files.\n.PP\nFiles are parsed in sorted lexical order.\nThat is,\n\\fI/etc/sudoers.d/01_first\\fR\nwill be parsed before\n\\fI/etc/sudoers.d/10_second\\fR.\nBe aware that because the sorting is lexical, not numeric,\n\\fI/etc/sudoers.d/1_whoops\\fR\nwould be loaded\n\\fIafter\\fR\n\\fI/etc/sudoers.d/10_second\\fR.\nUsing a consistent number of leading zeroes in the file names can be used\nto avoid such problems.\nAfter parsing the files in the directory, control returns to the\nfile that contained the\n\\fI@includedir\\fR\ndirective.\n.PP\nUnlike files included via\n\\fI@include\\fR,\n\\fBvisudo\\fR\nwill not edit the files in a\n\\fI@includedir\\fR\ndirectory unless one of them contains a syntax error.\nIt is still possible to run\n\\fBvisudo\\fR\nwith the\n\\fB\\-f\\fR\nflag to edit the files directly, but this will not catch the\nredefinition of an\n\\fIalias\\fR\nthat is also present in a different file.\n.SS \"Other special characters and reserved words\"\nThe pound sign\n(\\(oq#\\(cq)\nis used to indicate a comment (unless it is part of a #include\ndirective or unless it occurs in the context of a user name and is\nfollowed by one or more digits, in which case it is treated as a\nuser-ID).\nBoth the comment character and any text after it, up to the end of\nthe line, are ignored.\n.PP\nThe reserved word\n\\fBALL\\fR\nis a built-in\n\\fIalias\\fR\nthat always causes a match to succeed.\nIt can be used wherever one might otherwise use a\n\\fICmnd_Alias\\fR,\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\nor\n\\fIHost_Alias\\fR.\nAttempting to define an\n\\fIalias\\fR\nnamed\n\\fBALL\\fR\nwill result in a syntax error.\nUsing\n\\fBALL\\fR\ncan be dangerous since in a command context, it allows the user to run\n\\fIany\\fR\ncommand on the system.\n.PP\nThe following option names permitted in an\n\\fIOption_Spec\\fR\nare also considered reserved words:\n\\fRCHROOT\\fR,\n.if \\n(PS \\{\\\n\\fRPRIVS\\fR,\n.\\}\n.if \\n(PS \\{\\\n\\fRLIMITPRIVS\\fR,\n.\\}\n.if \\n(SL \\{\\\n\\fRROLE\\fR,\n.\\}\n.if \\n(SL \\{\\\n\\fRTYPE\\fR,\n.\\}\n\\fRTIMEOUT\\fR,\n\\fRCWD\\fR,\n\\fRNOTBEFORE\\fR\nand\n\\fRNOTAFTER\\fR.\nAttempting to define an\n\\fIalias\\fR\nwith the same name as one of the options will result in a syntax error.\n.PP\nAn exclamation point\n(\\(oq\\&!\\(cq)\ncan be used as a logical\n\\fInot\\fR\noperator in a list or\n\\fIalias\\fR\nas well as in front of a\n\\fICmnd\\fR.\nThis allows one to exclude certain values.\nFor the\n\\(oq\\&!\\(cq\noperator to be effective, there must be something for it to exclude.\nFor example, to match all users except for\n\\fBroot\\fR\none would use:\n.nf\n.sp\n.RS 4n\nALL, !root\n.RE\n.fi\n.PP\nIf the\n\\fBALL\\fR,\nis omitted, as in:\n.nf\n.sp\n.RS 4n\n!root\n.RE\n.fi\n.PP\nit would explicitly deny\n\\fBroot\\fR\nbut not match any other users.\nThis is different from a true\n\\(lqnegation\\(rq\noperator.\n.PP\nNote, however, that using a\n\\(oq\\&!\\(cq\nin conjunction with the built-in\n\\fBALL\\fR\nalias to allow a user to run\n\\(lqall but a few\\(rq\ncommands rarely works as intended (see\n\\fISECURITY NOTES\\fR\nbelow).\n.PP\nLong lines can be continued with a backslash\n(\\(oq\\e\\(cq)\nas the last character on the line.\n.PP\nWhite space between elements in a list as well as special syntactic\ncharacters in a\n\\fIUser Specification\\fR\n(\\(oq=\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq(\\&\\(cq,\n\\(oq)\\&\\(cq)\nis optional.\n.PP\nThe following characters must be escaped with a backslash\n(\\(oq\\e\\(cq)\nwhen used as part of a word (e.g., a user name or host name):\n\\(oq\\&!\\(cq,\n\\(oq=\\&\\(cq,\n\\(oq:\\&\\(cq,\n\\(oq,\\&\\(cq,\n\\(oq(\\&\\(cq,\n\\(oq)\\&\\(cq,\n\\(oq\\e\\(cq.\n.SH \"SUDOERS OPTIONS\"\n\\fBsudo\\fR's\nbehavior can be modified by\n\\fIDefault_Entry\\fR\nlines, as explained earlier.\nA list of all supported Defaults parameters, grouped by type, are listed below.\n.PP\n\\fBBoolean Flags\\fR:\n.TP 18n\nalways_query_group_plugin\nIf a\n\\fIgroup_plugin\\fR\nis configured, use it to resolve groups of the form\n\\(oq%group\\(cq\nas long as there is not also a system group of the same name.\nNormally, only groups of the form\n\\(oq%:group\\(cq\nare passed to the\n\\fIgroup_plugin\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nalways_set_home\nIf enabled,\n\\fBsudo\\fR\nwill set the\n\\fRHOME\\fR\nenvironment variable to the home directory of the target user\n(which is the\n\\fIrunas_default\\fR\nuser unless the\n\\fB\\-u\\fR\noption is used).\nThis flag is largely obsolete and has no effect unless the\n\\fIenv_reset\\fR\nflag has been disabled or\n\\fRHOME\\fR\nis present in the\n\\fIenv_keep\\fR\nlist, both of which are strongly discouraged.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nauthenticate\nIf set, users must authenticate themselves via a password (or other\nmeans of authentication) before they may run commands.\nThis default may be overridden via the\n\\fRPASSWD\\fR\nand\n\\fRNOPASSWD\\fR\ntags.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\ncase_insensitive_group\nIf enabled, group names in\n\\fIsudoers\\fR\nwill be matched in a case insensitive manner.\nThis may be necessary when users are stored in LDAP or AD.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\ncase_insensitive_user\nIf enabled, user names in\n\\fIsudoers\\fR\nwill be matched in a case insensitive manner.\nThis may be necessary when groups are stored in LDAP or AD.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nclosefrom_override\nIf set, the user may use the\n\\fB\\-C\\fR\noption which overrides the default starting point at which\n\\fBsudo\\fR\nbegins closing open file descriptors.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ncompress_io\nIf set, and\n\\fBsudo\\fR\nis configured to log a command's input or output,\nthe I/O logs will be compressed using\n\\fBzlib\\fR.\nThis flag is\n\\fIon\\fR\nby default when\n\\fBsudo\\fR\nis compiled with\n\\fBzlib\\fR\nsupport.\n.TP 18n\nexec_background\nBy default,\n\\fBsudo\\fR\nruns a command as the foreground process as long as\n\\fBsudo\\fR\nitself is running in the foreground.\nWhen the\n\\fIexec_background\\fR\nflag is enabled and the command is being run in a pseudo-terminal\n(due to I/O logging or the\n\\fIuse_pty\\fR\nflag), the command will be run as a background process.\nAttempts to read from the controlling terminal (or to change terminal\nsettings) will result in the command being suspended with the\n\\fRSIGTTIN\\fR\nsignal (or\n\\fRSIGTTOU\\fR\nin the case of terminal settings).\nIf this happens when\n\\fBsudo\\fR\nis a foreground process, the command will be granted the controlling terminal\nand resumed in the foreground with no user intervention required.\nThe advantage of initially running the command in the background is that\n\\fBsudo\\fR\nneed not read from the terminal unless the command explicitly requests it.\nOtherwise, any terminal input must be passed to the command, whether it\nhas required it or not (the kernel buffers terminals so it is not possible\nto tell whether the command really wants the input).\nThis is different from historic\n\\fIsudo\\fR\nbehavior or when the command is not being run in a pseudo-terminal.\n.sp\nFor this to work seamlessly, the operating system must support the\nautomatic restarting of system calls.\nUnfortunately, not all operating systems do this by default,\nand even those that do may have bugs.\nFor example, macOS fails to restart the\ntcgetattr(3)\nand\ntcsetattr(3)\nfunctions (this is a bug in macOS).\nFurthermore, because this behavior depends on the command stopping with the\n\\fRSIGTTIN\\fR\nor\n\\fRSIGTTOU\\fR\nsignals, programs that catch these signals and suspend themselves\nwith a different signal (usually\n\\fRSIGTOP\\fR)\nwill not be automatically foregrounded.\nSome versions of the linux\nsu(1)\ncommand behave this way.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\nIt has no effect unless I/O logging is enabled or the\n\\fIuse_pty\\fR\nflag is enabled.\n.TP 18n\nenv_editor\nIf set,\n\\fBvisudo\\fR\nwill use the value of the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables before falling back on the default editor list.\n\\fBvisudo\\fR\nis typically run as\n\\fBroot\\fR\nso this flag may allow a user with\n\\fBvisudo\\fR\nprivileges to run arbitrary commands as\n\\fBroot\\fR\nwithout logging.\nAn alternative is to place a colon-separated list of\n\\(lqsafe\\(rq\neditors int the\n\\fIeditor\\fR\nsetting.\n\\fBvisudo\\fR\nwill then only use\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nif they match a value specified in\n\\fIeditor\\fR.\nIf the\n\\fIenv_reset\\fR\nflag is enabled, the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nand/or\n\\fREDITOR\\fR\nenvironment variables must be present in the\n\\fIenv_keep\\fR\nlist for the\n\\fIenv_editor\\fR\nflag to function when\n\\fBvisudo\\fR\nis invoked via\n\\fBsudo\\fR.\nThis flag is\n\\fI@env_editor@\\fR\nby default.\n.TP 18n\nenv_reset\nIf set,\n\\fBsudo\\fR\nwill run the command in a minimal environment containing the\n\\fRTERM\\fR,\n\\fRPATH\\fR,\n\\fRHOME\\fR,\n\\fRMAIL\\fR,\n\\fRSHELL\\fR,\n\\fRLOGNAME\\fR,\n\\fRUSER\\fR\nand\n\\fRSUDO_*\\fR\nvariables.\nAny variables in the caller's environment or in the file specified\nby the\n\\fIrestricted_env_file\\fR\nsetting that match the\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR\nlists are then added, followed by any variables present in the file\nspecified by the\n\\fIenv_file\\fR\nsetting (if any).\nThe contents of the\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR\nlists, as modified by global Defaults parameters in\n\\fIsudoers\\fR,\nare displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nIf the\n\\fIsecure_path\\fR\nsetting is enabled, its value will be used for the\n\\fRPATH\\fR\nenvironment variable.\nThis flag is\n\\fI@env_reset@\\fR\nby default.\n.TP 18n\nfast_glob\nNormally,\n\\fBsudo\\fR\nuses the\nglob(3)\nfunction to do shell-style globbing when matching path names.\nHowever, since it accesses the file system,\nglob(3)\ncan take a long time to complete for some patterns, especially\nwhen the pattern references a network file system that is mounted\non demand (auto mounted).\nThe\n\\fIfast_glob\\fR\nflag causes\n\\fBsudo\\fR\nto use the\nfnmatch(3)\nfunction, which does not access the file system to do its matching.\nThe disadvantage of\n\\fIfast_glob\\fR\nis that it is unable to match relative paths such as\n\\fI./ls\\fR\nor\n\\fI../bin/ls\\fR.\nThis has security implications when path names that include globbing\ncharacters are used with the negation operator,\n\\(oq!\\&\\(cq,\nas such rules can be trivially bypassed.\nAs such, this flag should not be used when the\n\\fIsudoers\\fR\nfile contains rules that contain negated path names which include globbing\ncharacters.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_passwords\nMost programs that require a user's password will disable echo before\nreading the password to avoid displaying the plaintext password on\nthe screen.\nHowever, if terminal input is being logged (see\n\\fII/O LOGGING\\fR),\nthe password will still be present in the I/O log.\nIf the\n\\fIlog_passwords\\fR\noption is disabled,\n\\fBsudoers\\fR\nwill attempt to prevent passwords from being logged.\nIt does this by using the regular expressions in\n\\fIpassprompt_regex\\fR\nto match a password prompt in the terminal output buffer.\nWhen a match is found, input characters in the I/O log will be replaced with\n\\(oq*\\(cq\nuntil either a line feed or carriage return is found in the terminal input\nor a new terminal output buffer is received.\nIf, however, a program displays characters as the user types\n(such as\n\\fBsudo\\fR\nwhen\n\\fIpwfeedback\\fR\nis set), only the\nfirst character of the password will be replaced in the I/O log.\nThis option has no effect unless\n\\fIlog_input\\fR\nor\n\\fIlog_ttyin\\fR\nare also set.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.TP 18n\nfqdn\nSet this flag if you want to put fully qualified host names in the\n\\fIsudoers\\fR\nfile when the local host name (as returned by the\n\\(oqhostname\\(cq\ncommand) does not contain the domain name.\nIn other words, instead of myhost you would use myhost.mydomain.edu.\nYou may still use the short form if you wish (and even mix the two).\nThis flag is only effective when the\n\\(lqcanonical\\(rq\nhost name, as returned by the\ngetaddrinfo(3)\nor\ngethostbyname(3)\nfunction, is a fully-qualified domain name.\nThis is usually the case when the system is configured to use DNS\nfor host name resolution.\n.sp\nIf the system is configured to use the\n\\fI/etc/hosts\\fR\nfile in preference to DNS, the\n\\(lqcanonical\\(rq\nhost name may not be fully-qualified.\nThe order that sources are queried for host name resolution\nis usually specified in the\n\\fI@nsswitch_conf@\\fR,\n\\fI@netsvc_conf@\\fR,\n\\fI/etc/host.conf\\fR,\nor, in some cases,\n\\fI/etc/resolv.conf\\fR\nfile.\nIn the\n\\fI/etc/hosts\\fR\nfile, the first host name of the entry is considered to be the\n\\(lqcanonical\\(rq\nname; subsequent names are aliases that are not used by\n\\fBsudoers\\fR.\nFor example, the following hosts file line for the machine\n\\(lqxyzzy\\(rq\nhas the fully-qualified domain name as the\n\\(lqcanonical\\(rq\nhost name, and the short version as an alias.\n.sp\n.RS 24n\n192.168.1.1 xyzzy.sudo.ws xyzzy\n.RE\n.RS 18n\n.sp\nIf the machine's hosts file entry is not formatted properly, the\n\\fIfqdn\\fR\nflag will not be effective if it is queried before DNS.\n.sp\nBeware that when using DNS for host name resolution, turning on\n\\fIfqdn\\fR\nrequires\n\\fBsudoers\\fR\nto make DNS lookups which renders\n\\fBsudo\\fR\nunusable if DNS stops working (for example if the machine is disconnected\nfrom the network).\nJust like with the hosts file, you must use the\n\\(lqcanonical\\(rq\nname as DNS knows it.\nThat is, you may not use a host alias (CNAME entry) due to performance\nissues and the fact that there is no way to get all aliases from DNS.\n.sp\nThis flag is\n\\fI@fqdn@\\fR\nby default.\n.RE\n.TP 18n\nignore_audit_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the audit log.\nIf enabled, an audit log write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the audit event is successfully\nwritten.\nThis flag is only effective on systems for which\n\\fBsudoers\\fR\nsupports audit logging, including\nFreeBSD,\nLinux, macOS, and Solaris.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nignore_dot\nIf set,\n\\fBsudo\\fR\nwill ignore \".\" or \"\" (both denoting the current directory) in the\n\\fRPATH\\fR\nenvironment variable; the\n\\fRPATH\\fR\nitself is not modified.\nThis flag is\n\\fI@ignore_dot@\\fR\nby default.\n.TP 18n\nignore_iolog_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the I/O log (local or remote).\nIf enabled, an I/O log write failure is not treated as a fatal error.\nIf disabled, the command will be terminated if the I/O log cannot be written to.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nignore_logfile_errors\nAllow commands to be run even if\n\\fBsudoers\\fR\ncannot write to the log file.\nIf enabled, a log file write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the log file entry is successfully\nwritten.\nThis flag only has an effect when\n\\fBsudoers\\fR\nis configured to use file-based logging via the\n\\fIlogfile\\fR\nsetting.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nignore_local_sudoers\nIf set via LDAP, parsing of\n\\fI@sysconfdir@/sudoers\\fR\nwill be skipped.\nThis is intended for sites that wish to prevent the usage of local\nsudoers files so that only LDAP is used.\nThis thwarts the efforts of rogue operators who would attempt to add roles to\n\\fI@sysconfdir@/sudoers\\fR.\nWhen this flag is enabled,\n\\fI@sysconfdir@/sudoers\\fR\ndoes not even need to exist.\nSince this flag tells\n\\fBsudo\\fR\nhow to behave when no specific LDAP entries have been matched, this\nsudoOption is only meaningful for the\n\\(oqcn=defaults\\(cq\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nignore_unknown_defaults\nIf set,\n\\fBsudo\\fR\nwill not produce a warning if it encounters an unknown Defaults entry\nin the\n\\fIsudoers\\fR\nfile or an unknown sudoOption in LDAP.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ninsults\nIf set,\n\\fBsudo\\fR\nwill insult users when they enter an incorrect password.\nThis flag is\n\\fI@insults@\\fR\nby default.\n.TP 18n\nlog_allowed\nIf set,\n\\fBsudoers\\fR\nwill log commands allowed by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.29 or higher.\n.TP 18n\nlog_denied\nIf set,\n\\fBsudoers\\fR\nwill log commands denied by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.29 or higher.\n.TP 18n\nlog_exit_status\nIf set,\n\\fBsudoers\\fR\nwill log the exit value of commands that are run to syslog and/or a log file.\nIf a command was terminated by a signal, the signal name is logged as well.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nlog_host\nIf set, the host name will be included in log entries written to\nthe file configured by the\n\\fIlogfile\\fR\nsetting.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_input\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal (if\n\\fBsudo\\fR\nwas run from a terminal) and log all user input.\nIf the standard input is not connected to the user's terminal, due\nto I/O redirection or because the command is part of a pipeline,\nthat input is also logged.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_output\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal (if\n\\fBsudo\\fR\nwas run from a terminal) and log all output that is sent to the\nuser's terminal, the standard output or the standard error.\nIf the standard output or standard error is not connected to the\nuser's terminal, due to I/O redirection or because the command is\npart of a pipeline, that output is also logged.\nFor more information about I/O logging, see the\n\\fII/O LOGGING\\fR\nsection.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlog_server_keepalive\nIf set,\n\\fBsudo\\fR\nwill enable the TCP keepalive socket option on the connection to the log server.\nThis enables the periodic transmission of keepalive messages to the server.\nIf the server does not respond to a message, the connection will\nbe closed and the running command will be terminated unless the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_verify\n.br\nIf set, the server certificate received during the TLS handshake\nmust be valid and it must contain either the server name (from\n\\fIlog_servers\\fR)\nor its IP address.\nIf either of these conditions is not met, the TLS handshake will fail.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_stderr\nIf set,\n\\fBsudo\\fR\nwill log the standard error if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_stdin\nIf set,\n\\fBsudo\\fR\nwill log the standard input if it is not connected to the user's terminal.\nThis can be used to log input from a pipe or redirected from a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_stdout\nIf set,\n\\fBsudo\\fR\nwill log the standard output if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\n.TP 18n\nlog_subcmds\nIf set,\n\\fBsudoers\\fR\nwill log when a command spawns a child process and executes a program\nusing the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nor\nsystem(3)\nlibrary functions.\nFor example, if a shell is run by\n\\fBsudo\\fR,\nthe individual commands run via the shell will be logged.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThe\n\\fIlog_subcmds\\fR\nflag uses the same underlying mechanism as the\n\\fIintercept\\fR\nsetting.\nSee\n\\fIPreventing shell escapes\\fR\nfor more information on what systems support this option and its limitations.\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\nseccomp(2)\nfilter mode.\n.TP 18n\nlog_ttyin\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal and log user keystrokes\nsent to the user's terminal, if one is present.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\nssh(1),\nthis flag will have no effect.\n.TP 18n\nlog_ttyout\nIf set,\n\\fBsudo\\fR\nwill run the command in a pseudo-terminal and log all output displayed\non the user's terminal, if one is present.\nThis flag is\n\\fIoff\\fR\nby default but is enabled when either the\n\\fIlog_output\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\nssh(1),\nthis flag will have no effect.\n.TP 18n\nlog_year\nIf set, the four-digit year will be logged in the (non-syslog)\n\\fBsudo\\fR\nlog file.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nlong_otp_prompt\nWhen validating with a One Time Password (OTP) scheme such as\n\\fBS/Key\\fR\nor\n\\fBOPIE\\fR,\na two-line prompt is used to make it easier\nto cut and paste the challenge to a local window.\nIt's not as pretty as the default but some people find it more convenient.\nThis flag is\n\\fI@long_otp_prompt@\\fR\nby default.\n.TP 18n\nmail_all_cmnds\nSend mail to the\n\\fImailto\\fR\nuser every time a user attempts to run a command via\n\\fBsudo\\fR\n(this includes\n\\fBsudoedit\\fR).\nNo mail will be sent if the user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\nor\n\\fB\\-v\\fR\noption unless there is an authentication error and the\n\\fImail_badpass\\fR\nflag is also set.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_always\nSend mail to the\n\\fImailto\\fR\nuser every time a user runs\n\\fBsudo\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_badpass\nSend mail to the\n\\fImailto\\fR\nuser if the user running\n\\fBsudo\\fR\ndoes not enter the correct password.\nIf the command the user is attempting to run is not permitted by\n\\fBsudoers\\fR\nand one of the\n\\fImail_all_cmnds\\fR,\n\\fImail_always\\fR,\n\\fImail_no_host\\fR,\n\\fImail_no_perms\\fR\nor\n\\fImail_no_user\\fR\nflags are set, this flag will have no effect.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nmail_no_host\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user exists in the\n\\fIsudoers\\fR\nfile, but is not allowed to run commands on the current host.\nThis flag is\n\\fI@mail_no_host@\\fR\nby default.\n.TP 18n\nmail_no_perms\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user is allowed to use\n\\fBsudo\\fR\nbut the command they are trying is not listed in their\n\\fIsudoers\\fR\nfile entry or is explicitly denied.\nThis flag is\n\\fI@mail_no_perms@\\fR\nby default.\n.TP 18n\nmail_no_user\nIf set, mail will be sent to the\n\\fImailto\\fR\nuser if the invoking user is not in the\n\\fIsudoers\\fR\nfile.\nThis flag is\n\\fI@mail_no_user@\\fR\nby default.\n.TP 18n\nmatch_group_by_gid\nBy default,\n\\fBsudoers\\fR\nwill look up each group the user is a member of by group-ID to\ndetermine the group name (this is only done once).\nThe resulting list of the user's group names is used when matching\ngroups listed in the\n\\fIsudoers\\fR\nfile.\nThis works well on systems where the number of groups listed in the\n\\fIsudoers\\fR\nfile is larger than the number of groups a typical user belongs to.\nOn systems where group lookups are slow, where users may belong\nto a large number of groups, or where the number of groups listed\nin the\n\\fIsudoers\\fR\nfile is relatively small, it may be prohibitively expensive and\nrunning commands via\n\\fBsudo\\fR\nmay take longer than normal.\nOn such systems it may be faster to use the\n\\fImatch_group_by_gid\\fR\nflag to avoid resolving the user's group-IDs to group names.\nIn this case,\n\\fBsudoers\\fR\nmust look up any group name listed in the\n\\fIsudoers\\fR\nfile and use the group-ID instead of the group name when determining\nwhether the user is a member of the group.\n.sp\nIf\n\\fImatch_group_by_gid\\fR\nis enabled, group database lookups performed by\n\\fBsudoers\\fR\nwill be keyed by group name as opposed to group-ID.\nOn systems where there are multiple sources for the group database,\nit is possible to have conflicting group names or group-IDs in the local\n\\fI/etc/group\\fR\nfile and the remote group database.\nOn such systems, enabling or disabling\n\\fImatch_group_by_gid\\fR\ncan be used to choose whether group database queries are performed\nby name (enabled) or ID (disabled), which may aid in working around\ngroup entry conflicts.\n.sp\nThe\n\\fImatch_group_by_gid\\fR\nflag has no effect when\n\\fIsudoers\\fR\ndata is stored in LDAP.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.18 or higher.\n.TP 18n\nintercept\nIf set, all commands run via\n\\fBsudo\\fR\nwill behave as if the\n\\fRINTERCEPT\\fR\ntag has been set, unless overridden by an\n\\fRNOINTERCEPT\\fR\ntag.\nSee the description of\n\\fRINTERCEPT and NOINTERCEPT\\fR\nabove as well as the\n\\fIPreventing shell escapes\\fR\nsection at the end of this manual.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\nseccomp(2)\nfilter mode.\n.TP 18n\nintercept_allow_setid\nOn most systems, the dynamic loader will ignore\n\\fRLD_PRELOAD\\fR\n(or the equivalent) when running set-user-ID and set-group-ID\nprograms, effectively disabling intercept mode.\nTo prevent this from happening,\n\\fBsudoers\\fR\nwill not permit a set-user-ID or set-group-ID program to be run in\nintercept mode unless\n\\fIintercept_allow_setid\\fR\nis enable.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command.\nThis flag is\n\\fIon\\fR\nby default when the\n\\fIintercept_type\\fR\noption is set to\n\\fItrace\\fR,\notherwise it default to\n\\fIoff\\fR.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nintercept_authenticate\nIf set, commands run by an intercepted process must be authenticated\nwhen the user's time stamp is not current.\nFor example, if a shell is run with\n\\fIintercept\\fR\nenabled, as soon as the invoking user's time stamp is out of date,\nsubsequent commands will need to be authenticated.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.8 or higher.\n.TP 18n\nintercept_verify\nIf set,\n\\fBsudo\\fR\nwill attempt to verify that a command run in intercept mode has\nthe expected path name, command line arguments and environment.\n.sp\nThe process will be stopped after\nexecve(2)\nhas completed but before the new command has had a chance to run.\nTo verify the command,\n\\fBsudo\\fR\nwill read the command's path from\n\\fI/proc/PID/exe\\fR,\nthe command line arguments and environment from the process's memory,\nand compare them against the arguments that were passed to\nexecve(2).\nIn the event of a mismatch, the command will be sent a\n\\fRSIGKILL\\fR\nsignal and terminated.\n.sp\nThis can help prevent a time of check versus time of use issue with\nintercept mode where the\nexecve(2)\narguments could be altered after the\n\\fBsudoers\\fR\npolicy check.\nThe checks can only be performed if the\nproc(@mansectform@)\nfile system is available.\nThis flag has no effect unless the\n\\fIintercept\\fR\nflag is enabled or the\n\\fRINTERCEPT\\fR\ntag has been set for the command and the\n\\fIintercept_type\\fR\noption is set to\n\\fItrace\\fR.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.12 or higher.\n.TP 18n\nnetgroup_tuple\nIf set, netgroup lookups will be performed using the full netgroup\ntuple: host name, user name, and domain (if one is set).\nHistorically,\n\\fBsudo\\fR\nonly matched the user name and domain for netgroups used in a\n\\fIUser_List\\fR\nand only matched the host name and domain for netgroups used in a\n\\fIHost_List\\fR.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nnoexec\nIf set, all commands run via\n\\fBsudo\\fR\nwill behave as if the\n\\fRNOEXEC\\fR\ntag has been set, unless overridden by an\n\\fREXEC\\fR\ntag.\nSee the description of\n\\fREXEC and NOEXEC\\fR\nabove as well as the\n\\fIPreventing shell escapes\\fR\nsection at the end of this manual.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nnoninteractive_auth\nIf set, authentication will be attempted even in non-interactive mode\n(when\n\\fBsudo\\fR's\n\\fB\\-n\\fR\noption is specified).\nThis allows authentication methods that don't require user interaction\nto succeed.\nAuthentication methods that require input from the user's terminal\nwill still fail.\nIf disabled, authentication will not be attempted in non-interactive mode.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.TP 18n\npam_acct_mgmt\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill perform PAM account validation for the invoking user by default.\nThe actual checks performed depend on which PAM modules are configured.\nIf enabled, account validation will be performed regardless of whether\nor not a password is required.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.28 or higher.\n.TP 18n\npam_rhost\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill set the PAM remote host value to the name of the local host\nwhen the\n\\fIpam_rhost\\fR\nflag is enabled.\nOn Linux systems, enabling\n\\fIpam_rhost\\fR\nmay result in DNS lookups of the local host name when PAM is initialized.\nOn Solaris versions prior to Solaris 8,\n\\fIpam_rhost\\fR\nmust be enabled if\n\\fIpam_ruser\\fR\nis also enabled to avoid a crash in the Solaris PAM implementation.\n.sp\nThis flag is\n\\fIoff\\fR\nby default on systems other than Solaris.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npam_ruser\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill set the PAM remote user value to the name of the user that invoked sudo\nwhen the\n\\fIpam_ruser\\fR\nflag is enabled.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npam_session\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill create a new PAM session for the command to be run in.\nUnless\n\\fBsudo\\fR\nis given the\n\\fB\\-i\\fR\nor\n\\fB\\-s\\fR\noptions, PAM session modules are run with the\n\\(lqsilent\\(rq\nflag enabled.\nThis prevents last login information from being displayed for every\ncommand on some systems.\nDisabling\n\\fIpam_session\\fR\nmay be needed on older PAM implementations or on operating systems where\nopening a PAM session changes the utmp or wtmp files.\nIf PAM session support is disabled, resource limits may not be updated\nfor the command being run.\nIf\n\\fIpam_session\\fR,\n\\fIpam_setcred\\fR,\nand\n\\fIuse_pty\\fR\nare disabled,\n\\fIlog_servers\\fR\nhas not been set and I/O logging has not been configured,\n\\fBsudo\\fR\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n\\fI@pam_session@\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\n.TP 18n\npam_setcred\nOn systems that use PAM for authentication,\n\\fBsudo\\fR\nwill attempt to establish credentials for the target user by default,\nif supported by the underlying authentication system.\nOne example of a credential is a Kerberos ticket.\nIf\n\\fIpam_session\\fR,\n\\fIpam_setcred\\fR,\nand\n\\fIuse_pty\\fR\nare disabled,\n\\fIlog_servers\\fR\nhas not been set and I/O logging has not been configured,\n\\fBsudo\\fR\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npassprompt_override\nIf set, the prompt specified by\n\\fIpassprompt\\fR\nor the\n\\fRSUDO_PROMPT\\fR\nenvironment variable will always be used and will replace the\nprompt provided by a PAM module or other authentication method.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\npath_info\nNormally,\n\\fBsudo\\fR\nwill tell the user when a command could not be\nfound in their\n\\fRPATH\\fR\nenvironment variable.\nSome sites may wish to disable this as it could be used to gather\ninformation on the location of executables that the normal user does\nnot have access to.\nThe disadvantage is that if the executable is simply not in the user's\n\\fRPATH\\fR,\n\\fBsudo\\fR\nwill tell the user that they are not allowed to run it, which can be confusing.\nThis flag is\n\\fI@path_info@\\fR\nby default.\n.TP 18n\npreserve_groups\nBy default,\n\\fBsudo\\fR\nwill initialize the group vector to the list of groups the target user is in.\nWhen\n\\fIpreserve_groups\\fR\nis set, the user's existing group vector is left unaltered.\nThe real and effective group-IDs, however, are still set to match the\ntarget user.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\npwfeedback\nBy default,\n\\fBsudo\\fR\nreads the password like most other Unix programs,\nby turning off echo until the user hits the return (or enter) key.\nSome users become confused by this as it appears to them that\n\\fBsudo\\fR\nhas hung at this point.\nWhen\n\\fIpwfeedback\\fR\nis set,\n\\fBsudo\\fR\nwill provide visual feedback when the user presses a key.\nThis does have a security impact as an onlooker may be able to\ndetermine the length of the password being entered.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nrequiretty\nIf set,\n\\fBsudo\\fR\nwill only run when the user is logged in to a real tty.\nWhen this flag is set,\n\\fBsudo\\fR\ncan only be run from a login session and not via other means such as\ncron(@mansectsu@)\nor cgi-bin scripts.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nroot_sudo\nIf set,\n\\fBroot\\fR\nis allowed to run\n\\fBsudo\\fR\ntoo.\nDisabling this prevents users from\n\\(lqchaining\\(rq\n\\fBsudo\\fR\ncommands to get a\n\\fBroot\\fR\nshell by doing something like\n\\(oqsudo sudo /bin/sh\\(cq.\nNote, however, that turning off\n\\fIroot_sudo\\fR\nwill also prevent\n\\fBroot\\fR\nfrom running\n\\fBsudoedit\\fR.\nDisabling\n\\fIroot_sudo\\fR\nprovides no real additional security; it exists purely for historical reasons.\nThis flag is\n\\fI@root_sudo@\\fR\nby default.\n.TP 18n\nrootpw\nIf set,\n\\fBsudo\\fR\nwill prompt for the\n\\fBroot\\fR\npassword instead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nrunas_allow_unknown_id\nIf enabled, allow matching of runas user and group IDs that are\nnot present in the password or group databases.\nIn addition to explicitly matching unknown user or group IDs in a\n\\fIRunas_List\\fR,\nthis option also allows the\n\\fBALL\\fR\nalias to match unknown IDs.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.30 or higher.\nOlder versions of\n\\fBsudo\\fR\nalways allowed matching of unknown user and group IDs.\n.TP 18n\nrunas_check_shell\n.br\nIf enabled,\n\\fBsudo\\fR\nwill only run commands as a user whose shell appears in the\n\\fI/etc/shells\\fR\nfile, even if the invoking user's\n\\fIRunas_List\\fR\nwould otherwise permit it.\nIf no\n\\fI/etc/shells\\fR\nfile is present, a system-dependent list of built-in default shells is used.\nOn many operating systems, system users such as\n\\(lqbin\\(rq,\ndo not have a valid shell and this flag can be used to prevent\ncommands from being run as those users.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.30 or higher.\n.TP 18n\nrunaspw\nIf set,\n\\fBsudo\\fR\nwill prompt for the password of the user defined by the\n\\fIrunas_default\\fR\noption (defaults to\n\\fB@runas_default@\\fR)\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n\\fIoff\\fR\nby default.\n.if \\n(SL \\{\\\n.TP 18n\nselinux\nIf enabled, the user may specify an SELinux role and/or type to use\nwhen running the command, as permitted by the SELinux policy.\nIf SELinux is disabled on the system, this flag has no effect.\nThis flag is\n\\fIon\\fR\nby default.\n.\\}\n.TP 18n\nset_home\nIf enabled and\n\\fBsudo\\fR\nis invoked with the\n\\fB\\-s\\fR\noption, the\n\\fRHOME\\fR\nenvironment variable will be set to the home directory of the target\nuser (which is the\n\\fIrunas_default\\fR\nuser unless the\n\\fB\\-u\\fR\noption is used).\nThis flag is largely obsolete and has no effect unless the\n\\fIenv_reset\\fR\nflag has been disabled or\n\\fRHOME\\fR\nis present in the\n\\fIenv_keep\\fR\nlist, both of which are strongly discouraged.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nset_logname\nNormally,\n\\fBsudo\\fR\nwill set the\n\\fRLOGNAME\\fR\nand\n\\fRUSER\\fR\nenvironment variables to the name of the target user (the user specified by\n\\fIrunas_default\\fR\nunless the\n\\fB\\-u\\fR\noption is given).\nHowever, since some programs (including the RCS revision control system) use\n\\fRLOGNAME\\fR\nto determine the real identity of the user, it may be desirable to\nchange this behavior.\nThis can be done by negating the set_logname option.\nThe\n\\fIset_logname\\fR\noption will have no effect\nif the\n\\fIenv_reset\\fR\noption has not been disabled and the\n\\fIenv_keep\\fR\nlist contains\n\\fRLOGNAME\\fR\nor\n\\fRUSER\\fR.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nset_utmp\nWhen enabled,\n\\fBsudo\\fR\nwill create an entry in the utmp (or utmpx) file when a pseudo-terminal\nis allocated.\nA pseudo-terminal is allocated by\n\\fBsudo\\fR\nwhen it is running in a terminal and one or more of the\n\\fIlog_input\\fR,\n\\fIlog_output\\fR,\n\\fIlog_stdin\\fR,\n\\fIlog_stdout\\fR,\n\\fIlog_stderr\\fR,\n\\fIlog_ttyin\\fR,\n\\fIlog_ttyout\\fR,\nor\n\\fIuse_pty\\fR\nflags is enabled.\nBy default, the new entry will be a copy of the user's existing utmp\nentry (if any), with the tty, time, type, and pid fields updated.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nsetenv\nAllow the user to disable the\n\\fIenv_reset\\fR\noption from the command line via the\n\\fB\\-E\\fR\noption.\nAdditionally, environment variables set via the command line are\nnot subject to the restrictions imposed by\n\\fIenv_check\\fR,\n\\fIenv_delete\\fR,\nor\n\\fIenv_keep\\fR.\nAs such, only trusted users should be allowed to set variables in this manner.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nshell_noargs\nIf set and\n\\fBsudo\\fR\nis invoked with no arguments it acts as if the\n\\fB\\-s\\fR\noption had been given.\nThat is, it runs a shell as\n\\fBroot\\fR\n(the shell is determined by the\n\\fRSHELL\\fR\nenvironment variable if it is set, falling back on the shell listed\nin the invoking user's /etc/passwd entry if not).\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nstay_setuid\nNormally, when\n\\fBsudo\\fR\nexecutes a command the real and effective user-IDs are set to the target\nuser\n(\\fB@runas_default@\\fR\nby default).\nThis option changes that behavior such that the real user-ID is left\nas the invoking user's user-ID.\nIn other words, this makes\n\\fBsudo\\fR\nact as a set-user-ID wrapper.\nThis can be useful on systems that disable some potentially\ndangerous functionality when a program is run set-user-ID.\nThis option is only effective on systems that support either the\nsetreuid(2)\nor\nsetresuid(2)\nsystem call.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nsudoedit_checkdir\n.br\nIf set,\n\\fBsudoedit\\fR\nwill check all directory components of the path to be edited for writability\nby the invoking user.\nSymbolic links will not be followed in writable directories and\n\\fBsudoedit\\fR\nwill refuse to edit a file located in a writable directory.\nThese restrictions are not enforced when\n\\fBsudoedit\\fR\nis run by\n\\fBroot\\fR.\nOn some systems, if all directory components of the path to be edited\nare not readable by the target user,\n\\fBsudoedit\\fR\nwill be unable to edit the file.\nThis flag is\n\\fIon\\fR\nby default.\n.sp\nThis setting was first introduced in version 1.8.15 but initially\nsuffered from a race condition.\nThe check for symbolic links in writable intermediate directories\nwas added in version 1.8.16.\n.TP 18n\nsudoedit_follow\nBy default,\n\\fBsudoedit\\fR\nwill not follow symbolic links when opening files.\nThe\n\\fIsudoedit_follow\\fR\noption can be enabled to allow\n\\fBsudoedit\\fR\nto open symbolic links.\nIt may be overridden on a per-command basis by the\n\\fRFOLLOW\\fR\nand\n\\fRNOFOLLOW\\fR\ntags.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.15 or higher.\n.TP 18n\nsyslog_pid\nWhen logging via\nsyslog(3),\ninclude the process ID in the log entry.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.21 or higher.\n.TP 18n\ntargetpw\nIf set,\n\\fBsudo\\fR\nwill prompt for the password of the user specified\nby the\n\\fB\\-u\\fR\noption (defaults to the value of\n\\fIrunas_default\\fR)\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag precludes the use of a user-ID not listed in the passwd\ndatabase as an argument to the\n\\fB\\-u\\fR\noption.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\ntty_tickets\nIf set, users must authenticate on a per-tty basis.\nWith this flag enabled,\n\\fBsudo\\fR\nwill use a separate record in the time stamp file for each terminal.\nIf disabled, a single record is used for all login sessions.\n.sp\nThis option has been superseded by the\n\\fItimestamp_type\\fR\noption.\n.TP 18n\numask_override\nIf set,\n\\fBsudo\\fR\nwill set the umask as specified in the\n\\fIsudoers\\fR\nfile without modification.\nThis makes it possible to specify a umask in the\n\\fIsudoers\\fR\nfile that is more permissive than the user's own umask and matches\nhistorical behavior.\nIf\n\\fIumask_override\\fR\nis not set,\n\\fBsudo\\fR\nwill set the umask to be the union of the user's umask and what is specified in\n\\fIsudoers\\fR.\nThis flag is\n\\fI@umask_override@\\fR\nby default.\n.if \\n(BA \\{\\\n.TP 18n\nuse_loginclass\nIf set,\n\\fBsudo\\fR\nwill apply the defaults specified for the target user's login class\nif one exists.\nOnly available if\n\\fBsudo\\fR\nis configured with the\n\\fR--with-logincap\\fR\noption.\nThis flag is\n\\fIoff\\fR\nby default.\n.\\}\n.TP 18n\nuse_netgroups\nIf set, netgroups (prefixed with\n\\(oq+\\(cq),\nmay be used in place of a user or host.\nFor LDAP-based sudoers, netgroup support requires an expensive\nsub-string match on the server unless the\n\\fBNETGROUP_BASE\\fR\ndirective is present in the\n\\fI@ldap_conf@\\fR\nfile.\nIf netgroups are not needed, this option can be disabled to reduce the\nload on the LDAP server.\nThis flag is\n\\fIon\\fR\nby default.\n.TP 18n\nuse_pty\nIf set, and\n\\fBsudo\\fR\nis running in a terminal, the command will be run in a pseudo-terminal\n(even if no I/O logging is being done).\nIf the\n\\fBsudo\\fR\nprocess is not attached to a terminal,\n\\fIuse_pty\\fR\nhas no effect.\n.sp\nA malicious program run under\n\\fBsudo\\fR\nmay be capable of injecting commands into the user's\nterminal or running a background process that retains access to the\nuser's terminal device even after the main program has finished\nexecuting.\nBy running the command in a separate pseudo-terminal, this attack is\nno longer possible.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nuser_command_timeouts\nIf set, the user may specify a timeout on the command line.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nIf a timeout is specified both in the\n\\fIsudoers\\fR\nfile and on the command line, the smaller of the two timeouts will be used.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\nutmp_runas\nIf set,\n\\fBsudo\\fR\nwill store the name of the runas user when updating the utmp (or utmpx) file.\nBy default,\n\\fBsudo\\fR\nstores the name of the invoking user.\nThis flag is\n\\fIoff\\fR\nby default.\n.TP 18n\nvisiblepw\nBy default,\n\\fBsudo\\fR\nwill refuse to run if the user must enter a password but it is not\npossible to disable echo on the terminal.\nIf the\n\\fIvisiblepw\\fR\nflag is set,\n\\fBsudo\\fR\nwill prompt for a password even when it would be visible on the screen.\nThis makes it possible to run things like\n\\(oqssh somehost sudo ls\\(cq\nsince by default,\nssh(1)\ndoes\nnot allocate a tty when running a command.\nThis flag is\n\\fIoff\\fR\nby default.\n.PP\n\\fBIntegers\\fR:\n.TP 18n\nclosefrom\nBefore it executes a command,\n\\fBsudo\\fR\nwill close all open file descriptors other than standard input,\nstandard output, and standard error (file descriptors 0-2).\nThe\n\\fIclosefrom\\fR\noption can be used to specify a different file descriptor at which\nto start closing.\nThe default is 3.\n.TP 18n\ncommand_timeout\nThe maximum amount of time a command is allowed to run before\nit is terminated.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\nlog_server_timeout\nThe maximum amount of time to wait when connecting to a log server\nor waiting for a server response.\nSee the\n\\fITimeout_Spec\\fR\nsection for a description of the timeout syntax.\nThe default value is 30 seconds.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nmaxseq\nThe maximum sequence number that will be substituted for the\n\\(oq%{seq}\\(cq\nescape in the I/O log file (see the\n\\fIiolog_dir\\fR\ndescription below for more information).\nWhile the value substituted for\n\\(oq%{seq}\\(cq\nis in base 36,\n\\fImaxseq\\fR\nitself should be expressed in decimal.\nValues larger than 2176782336 (which corresponds to the\nbase 36 sequence number\n\\(lqZZZZZZ\\(rq)\nwill be silently truncated to 2176782336.\nThe default value is 2176782336.\n.sp\nOnce the local sequence number reaches the value of\n\\fImaxseq\\fR,\nit will\n\\(lqroll over\\(rq\nto zero, after which\n\\fBsudoers\\fR\nwill truncate and re-use any existing I/O log path names.\n.sp\nThis setting is only supported by version 1.8.7 or higher.\n.TP 18n\npasswd_tries\nThe number of tries a user gets to enter his/her password before\n\\fBsudo\\fR\nlogs the failure and exits.\nThe default is @passwd_tries@.\n.TP 18n\nsyslog_maxlen\nOn many systems,\nsyslog(3)\nhas a relatively small log buffer.\nIETF RFC 5424 states that syslog servers must support messages of\nat least 480 bytes and should support messages up to 2048 bytes.\nBy default,\n\\fBsudoers\\fR\ncreates log messages up to 980 bytes which corresponds to the\nhistoric\nBSD\nsyslog implementation which used a 1024 byte buffer\nto store the message, date, hostname, and program name.\nTo prevent syslog messages from being truncated,\n\\fBsudoers\\fR\nwill split up log messages that are larger than\n\\fIsyslog_maxlen\\fR\nbytes.\nWhen a message is split, additional parts will include the string\n\\(lq(command continued)\\(rq\nafter the user name and before the continued command line arguments.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.PP\n\\fBIntegers that can be used in a boolean context\\fR:\n.TP 18n\nloglinelen\nNumber of characters per line for the file log.\nThis value is used to decide when to wrap lines for nicer log files.\nThis has no effect on the syslog log file, only the file log.\nThe default is @loglen@ (use 0 or negate the option to disable word wrap).\n.TP 18n\npasswd_timeout\nNumber of minutes before the\n\\fBsudo\\fR\npassword prompt times out, or 0 for no timeout.\nThe timeout may include a fractional component\nif minute granularity is insufficient, for example 2.5.\nThe default is @password_timeout@.\n.TP 18n\ntimestamp_timeout\n.br\nNumber of minutes that can elapse before\n\\fBsudo\\fR\nwill ask for a password again.\nThe timeout may include a fractional component if\nminute granularity is insufficient, for example 2.5.\nThe default is @timeout@.\nSet this to 0 to always prompt for a password.\nIf set to a value less than 0 the user's time stamp will not expire\nuntil the system is rebooted.\nThis can be used to allow users to create or delete their own time stamps via\n\\(oqsudo -v\\(cq\nand\n\\(oqsudo -k\\(cq\nrespectively.\n.TP 18n\numask\nFile mode creation mask to use when running the command.\nNegate this option or set it to 0777 to prevent\n\\fBsudoers\\fR\nfrom changing the umask.\nUnless the\n\\fIumask_override\\fR\nflag is set, the actual umask will be the union of the\nuser's umask and the value of the\n\\fIumask\\fR\nsetting, which defaults to @sudo_umask@.\nThis guarantees that\n\\fBsudo\\fR\nnever lowers the umask when running a command.\n.sp\nIf\n\\fIumask\\fR\nis explicitly set in\n\\fIsudoers\\fR,\nit will override any umask setting in PAM or login.conf.\nIf\n\\fIumask\\fR\nis not set in\n\\fIsudoers\\fR,\nthe umask specified by PAM or login.conf will take precedence.\nThe umask setting in PAM is not used for\n\\fBsudoedit\\fR,\nwhich does not create a new PAM session.\n.PP\n\\fBStrings\\fR:\n.TP 18n\napparmor_profile\nThe default AppArmor profile to transition into when executing the\ncommand.\nThe default\n\\fIapparmor_profile\\fR\ncan be overridden for individual\n\\fIsudoers\\fR\nentries by specifying the\n\\fRAPPARMOR_PROFILE\\fR\noption.\nThis option is only available when sudo is built with AppArmor\nsupport.\n.TP 18n\nauthfail_message\nMessage that is displayed after a user fails to authenticate.\nThe message may include the\n\\(oq%d\\(cq\nescape which will expand to the number of failed password attempts.\nIf set, it overrides the default message,\n\\(lq%d incorrect password attempt(s)\\(rq.\n.TP 18n\nbadpass_message\nMessage that is displayed if a user enters an incorrect password.\nThe default is\n\\(lq@badpass_message@\\(rq\nunless insults are enabled.\n.TP 18n\neditor\nA colon\n(\\(oq:\\&\\(cq)\nseparated list of editor path names used by\n\\fBsudoedit\\fR\nand\n\\fBvisudo\\fR.\nFor\n\\fBsudoedit\\fR,\nthis list is used to find an editor when none of the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables are set to an editor that exists and is executable.\nFor\n\\fBvisudo\\fR,\nit is used as a white list of allowed editors;\n\\fBvisudo\\fR\nwill choose the editor that matches the user's\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variable if possible, or the first editor in the\nlist that exists and is executable if not.\nUnless invoked as\n\\fBsudoedit\\fR,\n\\fBsudo\\fR\ndoes not preserve the\n\\fRSUDO_EDITOR\\fR,\n\\fRVISUAL\\fR\nor\n\\fREDITOR\\fR\nenvironment variables unless they are present in the\n\\fIenv_keep\\fR\nlist or the\n\\fIenv_reset\\fR\noption is disabled.\nThe default is\n\\fI@editor@\\fR.\n.TP 18n\nintercept_type\nThe underlying mechanism used by the\n\\fIintercept\\fR\nand\n\\fIlog_subcmds\\fR\noptions.\nIt has the following possible values:\n.PP\n.RS 18n\n.PD 0\n.TP 8n\ndso\nPreload a dynamic shared object (shared library) that intercepts the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nand\nsystem(3)\nlibrary functions.\nA value of\n\\fIdso\\fR\nis incompatible with\n\\fBsudo\\fR's\nSELinux RBAC support.\n.PD\n.TP 8n\ntrace\nUse\nptrace(2)\nto intercept the\nexecve(2)\nsystem call.\nThis is only supported on Linux systems where\nseccomp(2)\nfiltering is enabled.\nIf the\n\\fI/proc/sys/kernel/seccomp/actions_avail\\fR\nfile is missing or does not contain a\n\\(lqtrap\\(rq\nelement, setting\n\\fIintercept_type\\fR\nto\n\\fItrace\\fR\nwill have no effect and\n\\fIdso\\fR\nwill be used instead.\n.PP\nThe default is to use\n\\fItrace\\fR\nif it is supported by the system and\n\\fIdso\\fR\nif it is not.\n.RE\n.TP 18n\niolog_dir\nThe top-level directory to use when constructing the path name for\nthe input/output log directory.\nOnly used if the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noptions are enabled or when the\n\\fRLOG_INPUT\\fR\nor\n\\fRLOG_OUTPUT\\fR\ntags are present for a command.\nThe session sequence number, if any, is stored in the directory.\nThe default is\n\\fI@iolog_dir@\\fR.\n.sp\nThe following percent\n(\\(oq%\\(cq)\nescape sequences are supported:\n.PP\n.RS 18n\n.PD 0\n.TP 6n\n%{seq}\nexpanded to a monotonically increasing base-36 sequence number, such as 0100A5,\nwhere every two digits are used to form a new directory, e.g.,\n\\fI01/00/A5\\fR\n.PD\n.TP 6n\n%{user}\nexpanded to the invoking user's login name\n.TP 6n\n%{group}\nexpanded to the name of the invoking user's real group-ID\n.TP 6n\n%{runas_user}\nexpanded to the login name of the user the command will\nbe run as (e.g.,\n\\fBroot\\fR)\n.TP 6n\n%{runas_group}\nexpanded to the group name of the user the command will\nbe run as (e.g.,\n\\fBwheel\\fR)\n.TP 6n\n%{hostname}\nexpanded to the local host name without the domain name\n.TP 6n\n%{command}\nexpanded to the base name of the command being run\n.PP\nIn addition, any escape sequences supported by the system's\nstrftime(3)\nfunction will be expanded.\n.sp\nTo include a literal\n\\(oq%\\(cq\ncharacter, the string\n\\(oq%%\\(cq\nshould be used.\n.RE\n.TP 18n\niolog_file\nThe path name, relative to\n\\fIiolog_dir\\fR,\nin which to store input/output logs when the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noptions are enabled or when the\n\\fRLOG_INPUT\\fR\nor\n\\fRLOG_OUTPUT\\fR\ntags are present for a command.\n\\fIiolog_file\\fR\nmay contain directory components.\nThe default is\n\\(oq%{seq}\\(cq.\n.sp\nSee the\n\\fIiolog_dir\\fR\noption above for a list of supported percent\n(\\(oq%\\(cq)\nescape sequences.\n.sp\nIn addition to the escape sequences, path names that end in six or\nmore\n\\fIX\\fRs\nwill have the\n\\fIX\\fRs\nreplaced with a unique combination of digits and letters, similar to the\nmktemp(3)\nfunction.\n.sp\nIf the path created by concatenating\n\\fIiolog_dir\\fR\nand\n\\fIiolog_file\\fR\nalready exists, the existing I/O log file will be truncated and\noverwritten unless\n\\fIiolog_file\\fR\nends in six or\nmore\n\\fIX\\fRs.\n.TP 18n\niolog_flush\nIf set,\n\\fBsudo\\fR\nwill flush I/O log data to disk after each write instead of buffering it.\nThis makes it possible to view the logs in real-time as the program\nis executing but may significantly reduce the effectiveness of I/O\nlog compression.\nThis flag is\n\\fIoff\\fR\nby default.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\n.TP 18n\niolog_group\nThe group name to look up when setting the group-ID on new I/O log\nfiles and directories.\nIf\n\\fIiolog_group\\fR\nis not set,\nthe primary group-ID of the user specified by\n\\fIiolog_user\\fR\nis used.\nIf neither\n\\fIiolog_group\\fR\nnor\n\\fIiolog_user\\fR\nare set, I/O log files and directories are created with group-ID 0.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\niolog_mode\nThe file mode to use when creating I/O log files.\nMode bits for read and write permissions for owner, group, or other\nare honored, everything else is ignored.\nThe file permissions will always include the owner read and\nwrite bits, even if they are not present in the specified mode.\nWhen creating I/O log directories, search (execute) bits are added\nto match the read and write bits specified by\n\\fIiolog_mode\\fR.\nDefaults to 0600 (read and write by user only).\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\niolog_user\nThe user name to look up when setting the user and group-IDs on new\nI/O log files and directories.\nIf\n\\fIiolog_group\\fR\nis set, it will be used instead of the user's primary group-ID.\nBy default, I/O log files and directories are created with user and\ngroup-ID 0.\n.sp\nThis setting can be useful when the I/O logs are stored on a Network\nFile System (NFS) share.\nHaving a dedicated user own the I/O log files means that\n\\fBsudoers\\fR\ndoes not write to the log files as user-ID 0, which is usually\nnot permitted by NFS.\n.sp\nThis setting is only supported by version 1.8.19 or higher.\n.TP 18n\nlecture_status_dir\nThe directory in which\n\\fBsudo\\fR\nstores per-user lecture status files.\nOnce a user has received the lecture, a zero-length file is\ncreated in this directory so that\n\\fBsudo\\fR\nwill not lecture the user again.\nThis directory should\n\\fInot\\fR\nbe cleared when the system reboots.\nThe default is\n\\fI@vardir@/lectured\\fR.\n.if \\n(PS \\{\\\n.TP 18n\nlimitprivs\nThe default Solaris limit privileges to use when constructing a new\nprivilege set for a command.\nThis bounds all privileges of the executing process.\nThe default limit privileges may be overridden on a per-command basis in\n\\fIsudoers\\fR.\nThis option is only available if\n\\fBsudoers\\fR\nis built on Solaris 10 or higher.\n.\\}\n.TP 18n\nlog_server_cabundle\nThe path to a certificate authority bundle file, in PEM format,\nto use instead of the system's default certificate authority database\nwhen authenticating the log server.\nThe default is to use the system's default certificate authority database.\nThis setting has no effect unless\n\\fIlog_servers\\fR\nis set and the remote log server is secured with TLS.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_peer_cert\nThe path to the\n\\fBsudo\\fR\nclient's certificate file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n\\fBsudo_logsrvd\\fR,\nclient certificate validation is controlled by the\n\\fItls_checkpeer\\fR\noption, which defaults to\n\\fIfalse\\fR.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nlog_server_peer_key\nThe path to the\n\\fBsudo\\fR\nclient's private key file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n\\fBsudo_logsrvd\\fR,\nclient certificate validation is controlled by the\n\\fItls_checkpeer\\fR\nflag, which defaults to\n\\fIfalse\\fR.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\nmailsub\nSubject of the mail sent to the\n\\fImailto\\fR\nuser.\nThe escape\n\\(oq%h\\(cq\nwill expand to the host name of the machine.\nDefault is\n\\(lq@mailsub@\\(rq.\n.TP 18n\nnoexec_file\nAs of\n\\fBsudo\\fR\nversion 1.8.1 this option is no longer supported.\nThe path to the noexec file should now be set in the\nsudo.conf(@mansectform@)\nfile.\n.TP 18n\npam_askpass_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n\\fB\\-A\\fR\noption is specified.\nThe default value is either\n\\(oqsudo\\(cq\nor\n\\(oq@pam_login_service@\\(cq,\ndepending on whether or not the\n\\fB\\-i\\fR\noption is also specified.\nSee the description of\n\\fIpam_service\\fR\nfor more information.\n.sp\nThis setting is only supported by version 1.9.9 or higher.\n.TP 18n\npam_login_service\n.br\nOn systems that use PAM for authentication, this is the service\nname used when the\n\\fB\\-i\\fR\noption is specified.\nThe default value is\n\\(oq@pam_login_service@\\(cq.\nSee the description of\n\\fIpam_service\\fR\nfor more information.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npam_service\nOn systems that use PAM for authentication, the service name\nspecifies the PAM policy to apply.\nThis usually corresponds to an entry in the\n\\fIpam.conf\\fR\nfile or a file in the\n\\fI/etc/pam.d\\fR\ndirectory.\nThe default value is\n\\(oqsudo\\(cq.\n.sp\nThis setting is only supported by version 1.8.8 or higher.\n.TP 18n\npassprompt\nThe default prompt to use when asking for a password; can be overridden via the\n\\fB\\-p\\fR\noption or the\n\\fRSUDO_PROMPT\\fR\nenvironment variable.\nThe following percent\n(\\(oq%\\(cq)\nescape sequences are supported:\n.PP\n.RS 18n\n.PD 0\n.TP 6n\n%H\nexpanded to the local host name including the domain name\n(only if the machine's host name is fully qualified or the\n\\fIfqdn\\fR\noption is set)\n.PD\n.TP 6n\n%h\nexpanded to the local host name without the domain name\n.TP 6n\n%p\nexpanded to the user whose password is being asked for (respects the\n\\fIrootpw\\fR,\n\\fItargetpw\\fR\nand\n\\fIrunaspw\\fR\nflags in\n\\fIsudoers\\fR)\n.TP 6n\n\\&%U\nexpanded to the login name of the user the command will\nbe run as (defaults to\n\\fB@runas_default@\\fR)\n.TP 6n\n%u\nexpanded to the invoking user's login name\n.TP 6n\n%%\ntwo consecutive\n\\(oq%\\(cq\ncharacters are collapsed into a single\n\\(oq%\\(cq\ncharacter\n.PP\nOn systems that use PAM for authentication,\n\\fIpassprompt\\fR\nwill only be used if the prompt provided by the PAM module matches the string\n\\(lqPassword: \\(rq\nor\n\\(lqusername's Password: \\(rq.\nThis ensures that the\n\\fIpassprompt\\fR\nsetting does not interfere with challenge-response style authentication.\nThe\n\\fIpassprompt_override\\fR\nflag can be used to change this behavior.\n.sp\nThe default value is\n\\(oq@passprompt@\\(cq.\n.RE\n.if \\n(PS \\{\\\n.TP 18n\nprivs\nThe default Solaris privileges to use when constructing a new\nprivilege set for a command.\nThis is passed to the executing process via the inherited privilege set,\nbut is bounded by the limit privileges.\nIf the\n\\fIprivs\\fR\noption is specified but the\n\\fIlimitprivs\\fR\noption is not, the limit privileges of the executing process is set to\n\\fIprivs\\fR.\nThe default privileges may be overridden on a per-command basis in\n\\fIsudoers\\fR.\nThis option is only available if\n\\fBsudoers\\fR\nis built on Solaris 10 or higher.\n.\\}\n.if \\n(SL \\{\\\n.TP 18n\nrole\nThe default SELinux role to use when constructing a new security\ncontext to run the command.\nThe default role may be overridden on a per-command basis in the\n\\fIsudoers\\fR\nfile or via command line options.\nThis option is only available when\n\\fBsudo\\fR\nis built with SELinux support.\n.\\}\n.TP 18n\nrunas_default\nThe default user to run commands as if the\n\\fB\\-u\\fR\noption is not specified on the command line.\nThis defaults to\n\\fB@runas_default@\\fR.\n.TP 18n\nsudoers_locale\nLocale to use when parsing the sudoers file, logging commands, and\nsending email.\nChanging the locale may affect how sudoers is interpreted.\nDefaults to\n\\(oqC\\(cq.\n.TP 18n\ntimestamp_type\n\\fBsudoers\\fR\nuses per-user time stamp files for credential caching.\nThe\n\\fItimestamp_type\\fR\noption can be used to specify the type of time stamp record used.\nIt has the following possible values:\n.PP\n.RS 18n\n.PD 0\n.TP 8n\nglobal\nA single time stamp record is used for all of a user's login sessions,\nregardless of the terminal or parent process ID.\nAn additional record is used to serialize password prompts when\n\\fBsudo\\fR\nis used multiple times in a pipeline, but this does not affect authentication.\n.PD\n.TP 8n\nppid\nA single time stamp record is used for all processes with the same parent\nprocess ID (usually the shell).\nCommands run from the same shell (or other common parent process)\nwill not require a password for\n\\fItimestamp_timeout\\fR\nminutes (@timeout@ by default).\nCommands run via\n\\fBsudo\\fR\nwith a different parent process ID, for example from a shell script,\nwill be authenticated separately.\n.TP 8n\ntty\nOne time stamp record is used for each terminal,\nwhich means that a user's login sessions are authenticated separately.\nIf no terminal is present, the behavior is the same as\n\\fIppid\\fR.\nCommands run from the same terminal will not require a password for\n\\fItimestamp_timeout\\fR\nminutes (@timeout@ by default).\n.TP 8n\nkernel\nThe time stamp is stored in the kernel as an attribute of the terminal\ndevice.\nIf no terminal is present, the behavior is the same as\n\\fIppid\\fR.\nNegative\n\\fItimestamp_timeout\\fR\nvalues are not supported and positive values are limited to a maximum\nof 60 minutes.\nThis is currently only supported on\nOpenBSD.\n.PP\nThe default value is\n\\fI@timestamp_type@\\fR.\n.sp\nThis setting is only supported by version 1.8.21 or higher.\n.RE\n.TP 18n\ntimestampdir\nThe directory in which\n\\fBsudo\\fR\nstores its time stamp files.\nThis directory should be cleared when the system reboots.\nThe default is\n\\fI@rundir@/ts\\fR.\n.TP 18n\ntimestampowner\nThe owner of the lecture status directory, time stamp directory and all\nfiles stored therein.\nThe default is\n\\fBroot\\fR.\n.if \\n(SL \\{\\\n.TP 18n\ntype\nThe default SELinux type to use when constructing a new security\ncontext to run the command.\nThe default type may be overridden on a per-command basis in the\n\\fIsudoers\\fR\nfile or via command line options.\nThis option is only available when\n\\fBsudo\\fR\nis built with SELinux support.\n.PP\n\\fBStrings that can be used in a boolean context\\fR:\n.TP 14n\nadmin_flag\nThe\n\\fIadmin_flag\\fR\noption specifies the path to a file that is created the first time\na user that is a member of the\n\\fIsudo\\fR\nor\n\\fIadmin\\fR\ngroups runs\n\\fBsudo\\fR.\nOnly available if\n\\fBsudo\\fR\nis configured with the\n\\fR--enable-admin-flag\\fR\noption.\nThe default value is\n\\fI~/.sudo_as_admin_successful\\fR.\n.TP 14n\nenv_file\nThe\n\\fIenv_file\\fR\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n\\(oqVARIABLE=value\\(cq\nor\n\\(oqexport VARIABLE=value\\(cq.\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nThis file is considered to be part of the security policy,\nits contents are not subject to other\n\\fBsudo\\fR\nenvironment restrictions such as\n\\fIenv_keep\\fR\nand\n\\fIenv_check\\fR.\n.TP 14n\nexempt_group\nUsers in this group are exempt from password and PATH requirements.\nThe group name specified should not include a\n\\(oq%\\(cq\nprefix.\nThis is not set by default.\n.TP 14n\nfdexec\nDetermines whether\n\\fBsudo\\fR\nwill execute a command by its path or by an open file descriptor.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nalways\nAlways execute by file descriptor.\n.PD\n.TP 8n\nnever\nNever execute by file descriptor.\n.TP 8n\ndigest_only\nOnly execute by file descriptor if the command has an associated digest\nin the\n\\fIsudoers\\fR\nfile.\n.PP\nThe default value is\n\\fIdigest_only\\fR.\nThis avoids a time of check versus time of use race condition when\nthe command is located in a directory writable by the invoking user.\n.sp\n\\fIfdexec\\fR\nwill change the first element of the argument vector for scripts\n($0 in the shell) due to the way the kernel runs script interpreters.\nInstead of being a normal path, it will refer to a file descriptor.\nFor example,\n\\fI/dev/fd/4\\fR\non Solaris and\n\\fI/proc/self/fd/4\\fR\non Linux.\nA workaround is to use the\n\\fRSUDO_COMMAND\\fR\nenvironment variable instead.\n.sp\nThe\n\\fIfdexec\\fR\nsetting is only used when the command is matched by path name.\nIt has no effect if the command is matched by the built-in\n\\fBALL\\fR\nalias.\n.sp\nThis setting is only supported by version 1.8.20 or higher.\nIf the operating system does not support the\nfexecve(2)\nsystem call, this setting has no effect.\n.RE\n.TP 14n\ngroup_plugin\nA string containing a\n\\fBsudoers\\fR\ngroup plugin with optional arguments.\nThe string should consist of the plugin\npath, either fully-qualified or relative to the\n\\fI@plugindir@\\fR\ndirectory, followed by any configuration arguments the plugin requires.\nThese arguments (if any) will be passed to the plugin's initialization function.\nIf arguments are present, the string must be enclosed in double quotes\n(\\&\"\").\n.sp\nOn 64-bit systems, if the plugin is present but cannot be loaded,\n\\fBsudoers\\fR\nwill look for a 64-bit version and, if it exists, load that as a fallback.\nThe exact rules for this vary by system.\nOn Solaris, if the plugin is stored in a directory ending in\n\\(lqlib\\(rq,\n\\fBsudoers\\fR\nwill create a fallback path by appending\n\\(lq/64\\(rq\nto the directory name;\n\\fI@prefix@/lib/group_plugin.so\\fR\nbecomes\n\\fI@prefix@/lib/64/group_plugin.so\\fR.\nOn Linux, a directory ending in\n\\(lqlib\\(rq\nwill be transformed to\n\\(lqlib64\\(rq\nas the fallback path;\n\\fI@prefix@/lib/group_plugin.so\\fR\nbecomes\n\\fI@prefix@/lib64/group_plugin.so\\fR.\nOn all other systems, the fallback path is generated by adding a\n\\(lq64\\(rq\nbefore the file extension;\n\\fIgroup_plugin.so\\fR\nbecomes\n\\fIgroup_plugin64.so\\fR.\n.sp\nFor more information see\n\\fIGROUP PROVIDER PLUGINS\\fR.\n.TP 14n\nlecture\nThis option controls when a short lecture will be printed along with\nthe password prompt.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nalways\nAlways lecture the user.\n.PD\n.TP 8n\nnever\nNever lecture the user.\n.TP 8n\nonce\nOnly lecture the user the first time they run\n\\fBsudo\\fR.\n.PP\nIf no value is specified, a value of\n\\fIonce\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fI@lecture@\\fR.\n.RE\n.TP 14n\nlecture_file\nPath to a file containing an alternate\n\\fBsudo\\fR\nlecture that will be used in place of the standard lecture if the named\nfile exists.\nBy default,\n\\fBsudo\\fR\nuses a built-in lecture.\n.TP 14n\nlistpw\nThis option controls when a password will be required when a user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-l\\fR\noption.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 6n\nall\nAll the user's\n\\fIsudoers\\fR\nfile entries for the current host must have\nthe\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.PD\n.TP 6n\nalways\nThe user must always enter a password to use the\n\\fB\\-l\\fR\noption.\n.TP 6n\nany\nAt least one of the user's\n\\fIsudoers\\fR\nfile entries for the current host\nmust have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.TP 6n\nnever\n.br\nThe user need never enter a password to use the\n\\fB\\-l\\fR\noption.\n.PP\nIf no value is specified, a value of\n\\fIany\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fIany\\fR.\n.RE\n.TP 14n\nlog_format\nThe event log format.\nSupported log formats are:\n.PP\n.RS 14n\n.PD 0\n.TP 6n\njson\nLogs in JSON format.\nJSON log entries contain the full user details as well as the execution\nenvironment if the command was allowed.\nDue to limitations of the protocol, JSON events sent via\n\\fIsyslog\\fR\nmay be truncated.\n.PD\n.TP 6n\nsudo\nTraditional sudo-style logs, see\n\\fIEVENT LOGGING\\fR\nfor a description of the log file format.\n.PP\nThis setting affects logs sent via\nsyslog(3)\nas well as the file specified by the\n\\fIlogfile\\fR\nsetting, if any.\nThe default value is\n\\fIsudo\\fR.\n.RE\n.TP 14n\nlogfile\nPath to the\n\\fBsudo\\fR\nlog file (not the syslog log file).\nSetting a path turns on logging to a file;\nnegating this option turns it off.\nBy default,\n\\fBsudo\\fR\nlogs via syslog.\n.TP 14n\nmailerflags\nFlags to use when invoking mailer.\nDefaults to\n\\fB\\-t\\fR.\n.TP 14n\nmailerpath\nPath to mail program used to send warning mail (negate to prevent\n\\fBsudo\\fR\nfrom sending mail).\nDefaults to the path to sendmail found at configure time.\n.TP 14n\nmailfrom\nAddress to use for the\n\\(lqfrom\\(rq\naddress when sending warning and error mail.\nThe address should be enclosed in double quotes\n(\\&\"\")\nto protect against\n\\fBsudo\\fR\ninterpreting the\n\\(oq@\\(cq\nsign.\nDefaults to the name of the user running\n\\fBsudo\\fR.\n.TP 14n\nmailto\nAddress to send warning and error mail to (negate to prevent\n\\fBsudo\\fR\nfrom sending mail).\nThe address should be enclosed in double quotes\n(\\&\"\")\nto protect against\n\\fBsudo\\fR\ninterpreting the\n\\(oq@\\(cq\nsign.\nDefaults to @mailto@.\n.TP 14n\nrlimit_as\nThe maximum size to which the process's address space may grow (in bytes),\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_core\nThe largest size core dump file that may be created (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\nDefaults to 0 (no core dump created).\n.TP 14n\nrlimit_cpu\nThe maximum amount of CPU time that the process may use (in seconds).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_data\nThe maximum size of the data segment for the process (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_fsize\nThe largest size file that the process may create (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_locks\nThe maximum number of locks that the process may establish,\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_memlock\nThe maximum size that the process may lock in memory (in bytes),\nif supported by the operating system.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_nofile\n.br\nThe maximum number of files that the process may have open.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_nproc\nThe maximum number of processes that the user may run simultaneously.\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_rss\nThe maximum size to which the process's resident set size may grow (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrlimit_stack\nThe maximum size to which the process's stack may grow (in bytes).\nSee\n\\fIResource limits\\fR\nfor more information.\n.TP 14n\nrestricted_env_file\nThe\n\\fIrestricted_env_file\\fR\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n\\(oqVARIABLE=value\\(cq\nor\n\\(oqexport VARIABLE=value\\(cq.\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nUnlike\n\\fIenv_file\\fR,\nthe file's contents are not trusted and are processed in a manner\nsimilar to that of the invoking user's environment.\nIf\n\\fIenv_reset\\fR\nis enabled, variables in the file will only be added if they are\nmatched by either the\n\\fIenv_check\\fR\nor\n\\fIenv_keep\\fR\nlist.\nIf\n\\fIenv_reset\\fR\nis disabled, variables in the file are added as long as they\nare not matched by the\n\\fIenv_delete\\fR\nlist.\nIn either case, the contents of\n\\fIrestricted_env_file\\fR\nare processed before the contents of\n\\fIenv_file\\fR.\n.TP 14n\nrunchroot\nIf set,\n\\fBsudo\\fR\nwill use this value for the root directory when running a command.\nThe special value\n\\(lq*\\(rq\nwill allow the user to specify the root directory via\n\\fBsudo\\fR's\n\\fB\\-R\\fR\noption.\nSee the\n\\fIChroot_Spec\\fR\nsection for more details.\n.sp\nIt is only possible to use\n\\fIrunchroot\\fR\nas a command-specific Defaults setting if the command exists with\nthe same path both inside and outside the chroot jail.\nThis restriction does not apply to global, host, or user-based\nDefaults settings or to a\n\\fICmnd_Spec\\fR\nthat includes a\n\\fIChroot_Spec\\fR.\n.sp\nThis setting is only supported by version 1.9.3 or higher.\n.TP 14n\nruncwd\nIf set,\n\\fBsudo\\fR\nwill use this value for the working directory when running a command.\nThe special value\n\\(lq*\\(rq\nwill allow the user to specify the working directory via\n\\fBsudo\\fR's\n\\fB\\-D\\fR\noption.\nSee the\n\\fIChdir_Spec\\fR\nsection for more details.\n.sp\nThis setting is only supported by version 1.9.3 or higher.\n.TP 14n\nsecure_path\nIf set,\n\\fBsudo\\fR\nwill use this value in place of the user's\n\\fRPATH\\fR\nenvironment variable.\nThis option can be used to reset the\n\\fRPATH\\fR\nto a known good value that contains directories for system administrator\ncommands such as\n\\fI/usr/sbin\\fR.\n.sp\nUsers in the group specified by the\n\\fIexempt_group\\fR\noption are not affected by\n\\fIsecure_path\\fR.\nThis option is @secure_path@ by default.\n.TP 14n\nsyslog\nSyslog facility if syslog is being used for logging (negate to\ndisable syslog logging).\nDefaults to @logfac@.\n.sp\nThe following syslog facilities are supported:\n\\fBauthpriv\\fR\n(if your\nOS supports it),\n\\fBauth\\fR,\n\\fBdaemon\\fR,\n\\fBuser\\fR,\n\\fBlocal0\\fR,\n\\fBlocal1\\fR,\n\\fBlocal2\\fR,\n\\fBlocal3\\fR,\n\\fBlocal4\\fR,\n\\fBlocal5\\fR,\n\\fBlocal6\\fR,\nand\n\\fBlocal7\\fR.\n.TP 14n\nsyslog_badpri\n.br\nSyslog priority to use when the user is not allowed to run a command or\nwhen authentication is unsuccessful.\nDefaults to @badpri@.\n.sp\nThe following syslog priorities are supported:\n\\fBalert\\fR,\n\\fBcrit\\fR,\n\\fBdebug\\fR,\n\\fBemerg\\fR,\n\\fBerr\\fR,\n\\fBinfo\\fR,\n\\fBnotice\\fR,\n\\fBwarning\\fR,\nand\n\\fBnone\\fR.\nNegating the option or setting it to a value of\n\\fBnone\\fR\nwill disable logging of unsuccessful commands.\n.TP 14n\nsyslog_goodpri\nSyslog priority to use when the user is allowed to run a command and\nauthentication is successful.\nDefaults to @goodpri@.\n.sp\nSee\n\\fIsyslog_badpri\\fR\nfor the list of supported syslog priorities.\nNegating the option or setting it to a value of\n\\fBnone\\fR\nwill disable logging of successful commands.\n.TP 14n\nverifypw\nThis option controls when a password will be required when a user runs\n\\fBsudo\\fR\nwith the\n\\fB\\-v\\fR\noption.\nIt has the following possible values:\n.PP\n.RS 14n\n.PD 0\n.TP 8n\nall\nAll the user's\n\\fIsudoers\\fR\nfile entries for the current host must have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.PD\n.TP 8n\nalways\nThe user must always enter a password to use the\n\\fB\\-v\\fR\noption.\n.TP 8n\nany\nAt least one of the user's\n\\fIsudoers\\fR\nfile entries for the current host must have the\n\\fRNOPASSWD\\fR\nflag set to avoid entering a password.\n.TP 8n\nnever\nThe user need never enter a password to use the\n\\fB\\-v\\fR\noption.\n.PP\nIf no value is specified, a value of\n\\fIall\\fR\nis implied.\nNegating the option results in a value of\n\\fInever\\fR\nbeing used.\nThe default value is\n\\fIall\\fR.\n.RE\n.PP\n\\fBLists that can be used in a boolean context\\fR:\n.\\}\n.TP 18n\nenv_check\nEnvironment variables to be removed from the user's environment\nunless they are considered\n\\(lqsafe\\(rq.\nFor all variables except\n\\fRTZ\\fR,\n\\(lqsafe\\(rq\nmeans that the variable's value does not contain any\n\\(oq%\\(cq\nor\n\\(oq/\\(cq\ncharacters.\nThis can be used to guard against printf-style format vulnerabilities\nin poorly-written programs.\nThe\n\\fRTZ\\fR\nvariable is considered unsafe if any of the following are true:\n.PP\n.RS 18n\n.PD 0\n.TP 3n\n\\fB\\(bu\\fR\nIt consists of a fully-qualified path name,\noptionally prefixed with a colon\n(\\(oq:\\&\\(cq),\nthat does not match the location of the\n\\fIzoneinfo\\fR\ndirectory.\n.PD\n.TP 3n\n\\fB\\(bu\\fR\nIt contains a\n\\fI..\\fR\npath element.\n.TP 3n\n\\fB\\(bu\\fR\nIt contains white space or non-printable characters.\n.TP 3n\n\\fB\\(bu\\fR\nIt is longer than the value of\n\\fRPATH_MAX\\fR.\n.PP\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using\nthe\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nRegardless of whether the\n\\fIenv_reset\\fR\noption is enabled or disabled, variables specified by\n\\fIenv_check\\fR\nwill be preserved in the environment if they pass the aforementioned check.\nThe global list of environment variables to check is displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\n.RE\n.TP 18n\nenv_delete\nEnvironment variables to be removed from the user's environment when the\n\\fIenv_reset\\fR\noption is not in effect.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nThe global list of environment variables to remove is displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\nMany operating systems will remove potentially dangerous variables\nfrom the environment of any set-user-ID process (such as\n\\fBsudo\\fR).\n.TP 18n\nenv_keep\nEnvironment variables to be preserved in the user's environment when the\n\\fIenv_reset\\fR\noption is in effect.\nThis allows fine-grained control over the environment\n\\fBsudo\\fR-spawned\nprocesses will receive.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n\\(oq=\\(cq,\n\\(oq+=\\(cq,\n\\(oq-=\\(cq,\nand\n\\(oq\\&!\\(cq\noperators respectively.\nThe global list of variables to keep\nis displayed when\n\\fBsudo\\fR\nis run by\n\\fBroot\\fR\nwith the\n\\fB\\-V\\fR\noption.\n.sp\nPreserving the\n\\fRHOME\\fR\nenvironment variable has security implications since many programs use it\nwhen searching for configuration or data files.\nAdding\n\\fRHOME\\fR\nto\n\\fIenv_keep\\fR\nmay enable a user to run unrestricted commands via\n\\fBsudo\\fR\nand is strongly discouraged.\nUsers wishing to edit files with\n\\fBsudo\\fR\nshould run\n\\fBsudoedit\\fR\n(or\n\\fBsudo\\fR \\fB\\-e\\fR)\nto get their accustomed editor configuration instead of\ninvoking the editor directly.\n.TP 18n\nlog_servers\nA list of one or more servers to use for remote event and I/O log storage,\nseparated by white space.\nLog servers must be running\n\\fBsudo_logsrvd\\fR\nor another service that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.sp\nServer addresses should be of the form\n\\(lqhost[:port][(tls)]\\(rq.\nThe host portion may be a host name, an IPv4 address, or an IPv6 address\nin square brackets.\n.sp\nIf the optional\n\\fItls\\fR\nflag is present, the connection will be secured\nwith Transport Layer Security (TLS) version 1.2 or 1.3.\nVersions of TLS prior to 1.2 are not supported.\n.sp\nIf a port is specified, it may either be a port number or a well-known\nservice name as defined by the system service name database.\nIf no port is specified, port 30343 will be used for plaintext\nconnections and port 30344 will be used for TLS connections.\n.sp\nWhen\n\\fIlog_servers\\fR\nis set, event log data will be logged both locally (see the\n\\fIsyslog\\fR\nand\n\\fIlog_file\\fR\nsettings) as well as remotely, but I/O log data will only be logged remotely.\nIf multiple hosts are specified, they will be attempted in reverse order.\nIf no log servers are available, the user will not be able to run\na command unless either the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\nLikewise, if the connection to the log server is interrupted while\n\\fBsudo\\fR\nis running, the command will be terminated unless the\n\\fIignore_iolog_errors\\fR\nflag (I/O logging enabled) or the\n\\fIignore_log_errors\\fR\nflag (I/O logging disabled) is set.\n.sp\nThis setting is only supported by version 1.9.0 or higher.\n.TP 18n\npassprompt_regex\nA list of POSIX extended regular expressions used to\nmatch password prompts in the terminal output.\nAs an extension, if the regular expression begins with\n\\(lq(?i)\\(rq,\nit will be matched in a case-insensitive manner.\nEach regular expression is limited to 1024 characters.\nThis option is only used when\n\\fIlog_passwords\\fR\nhas been disabled.\nThe default value is\n\\(lq[Pp]assword[: ]*\\(rq\n.sp\nThis setting is only supported by version 1.9.10 or higher.\n.SH \"GROUP PROVIDER PLUGINS\"\nThe\n\\fBsudoers\\fR\nplugin supports its own plugin interface to allow non-Unix\ngroup lookups which can query a group source other\nthan the standard Unix group database.\nThis can be used to implement support for the\n\\fInonunix_group\\fR\nsyntax described earlier.\n.PP\nGroup provider plugins are specified via the\n\\fIgroup_plugin\\fR\nsetting.\nThe argument to\n\\fIgroup_plugin\\fR\nshould consist of the plugin path, either fully-qualified or relative to the\n\\fI@plugindir@\\fR\ndirectory, followed by any configuration options the plugin requires.\nThese options (if specified) will be passed to the plugin's initialization\nfunction.\nIf options are present, the string must be enclosed in double quotes\n(\\&\"\").\n.PP\nThe following group provider plugins are installed by default:\n.TP 6n\ngroup_file\nThe\n\\fIgroup_file\\fR\nplugin supports an alternate group file that uses the same syntax as the\n\\fI/etc/group\\fR\nfile.\nThe path to the group file should be specified as an option\nto the plugin.\nFor example, if the group file to be used is\n\\fI/etc/sudo-group\\fR:\n.nf\n.sp\n.RS 6n\nDefaults group_plugin=\"group_file.so /etc/sudo-group\"\n.RE\n.fi\n.TP 6n\nsystem_group\nThe\n\\fIsystem_group\\fR\nplugin supports group lookups via the standard C library functions\ngetgrnam(3)\nand\ngetgrid(3).\nThis plugin can be used in instances where the user belongs to\ngroups not present in the user's supplemental group vector.\nThis plugin takes no options:\n.nf\n.sp\n.RS 6n\nDefaults group_plugin=system_group.so\n.RE\n.fi\n.PP\nThe group provider plugin API is described in detail in\nsudo_plugin(@mansectform@).\n.SH \"EVENT LOGGING\"\n\\fBsudoers\\fR\ncan log events in either JSON or\n\\fIsudo\\fR\nformat,\nthis section describes the\n\\fIsudo\\fR\nlog format.\nDepending on\n\\fIsudoers\\fR\nconfiguration,\n\\fBsudoers\\fR\ncan log events via\nsyslog(3),\nto a local log file, or both.\nThe log format is almost identical in both cases.\nAny control characters present in the log data are formatted in octal\nwith a leading\n\\(oq#\\(cq\ncharacter.\nFor example, a horizontal tab is stored as\n\\(oq#011\\(cq\nand an embedded carriage return is stored as\n\\(oq#015\\(cq.\nIn addition, space characters in the command path are stored as\n\\(oq#040\\(cq.\nCommand line arguments that contain spaces are enclosed in single quotes\n('').\nThis makes it possible to distinguish multiple command line arguments\nfrom a single argument that contains spaces.\nLiteral single quotes and backslash characters\n(\\(oq\\e\\(cq)\nin command line arguments are escaped with a backslash.\n.SS \"Accepted command log entries\"\nCommands that sudo runs are logged using the following format (split\ninto multiple lines for readability):\n.nf\n.sp\n.RS 4n\ndate hostname progname: username : TTY=ttyname ; CHROOT=chroot ; \\e\n    PWD=cwd ; USER=runasuser ; GROUP=runasgroup ; TSID=logid ; \\e\n    ENV=env_vars COMMAND=command\n.RE\n.fi\n.PP\nWhere the fields are as follows:\n.TP 14n\ndate\nThe date the command was run.\nTypically, this is in the format\n\\(lqMMM, DD, HH:MM:SS\\(rq.\nIf logging via\nsyslog(3),\nthe actual date format is controlled by the syslog daemon.\nIf logging to a file and the\n\\fIlog_year\\fR\noption is enabled,\nthe date will also include the year.\n.TP 14n\nhostname\nThe name of the host\n\\fBsudo\\fR\nwas run on.\nThis field is only present when logging via\nsyslog(3).\n.TP 14n\nprogname\nThe name of the program, usually\n\\fIsudo\\fR\nor\n\\fIsudoedit\\fR.\nThis field is only present when logging via\nsyslog(3).\n.TP 14n\nusername\nThe login name of the user who ran\n\\fBsudo\\fR.\n.TP 14n\nttyname\nThe short name of the terminal (e.g.,\n\\(lqconsole\\(rq,\n\\(lqtty01\\(rq,\nor\n\\(lqpts/0\\(rq)\n\\fBsudo\\fR\nwas run on, or\n\\(lqunknown\\(rq\nif there was no terminal present.\n.TP 14n\nchroot\nThe root directory that the command was run in, if one was specified.\n.TP 14n\ncwd\nThe current working directory that\n\\fBsudo\\fR\nwas run in.\n.TP 14n\nrunasuser\nThe user the command was run as.\n.TP 14n\nrunasgroup\nThe group the command was run as if one was specified on the command line.\n.TP 14n\nlogid\nAn I/O log identifier that can be used to replay the command's output.\nThis is only present when the\n\\fIlog_input\\fR\nor\n\\fIlog_output\\fR\noption is enabled.\n.TP 14n\nenv_vars\nA list of environment variables specified on the command line,\nif specified.\n.TP 14n\ncommand\nThe actual command that was executed, including any command line arguments.\n.PP\nMessages are logged using the locale specified by\n\\fIsudoers_locale\\fR,\nwhich defaults to the\n\\(oqC\\(cq\nlocale.\n.SS \"Denied command log entries\"\nIf the user is not allowed to run the command, the reason for the denial\nwill follow the user name.\nPossible reasons include:\n.TP 3n\nuser NOT in sudoers\nThe user is not listed in the\n\\fIsudoers\\fR\nfile.\n.TP 3n\nuser NOT authorized on host\nThe user is listed in the\n\\fIsudoers\\fR\nfile but is not allowed to run commands on the host.\n.TP 3n\ncommand not allowed\nThe user is listed in the\n\\fIsudoers\\fR\nfile for the host but they are not allowed to run the specified command.\n.TP 3n\n3 incorrect password attempts\nThe user failed to enter their password after 3 tries.\nThe actual number of tries will vary based on the number of\nfailed attempts and the value of the\n\\fIpasswd_tries\\fR\noption.\n.TP 3n\na password is required\nThe\n\\fB\\-n\\fR\noption was specified but a password was required.\n.TP 3n\nsorry, you are not allowed to set the following environment variables\nThe user specified environment variables on the command line that\nwere not allowed by\n\\fIsudoers\\fR.\n.SS \"Error log entries\"\nIf an error occurs,\n\\fBsudoers\\fR\nwill log a message and, in most cases, send a message to the\nadministrator via email.\nPossible errors include:\n.TP 3n\nparse error in @sysconfdir@/sudoers near line N\n\\fBsudoers\\fR\nencountered an error when parsing the specified file.\nIn some cases, the actual error may be one line above or below the\nline number listed, depending on the type of error.\n.TP 3n\nproblem with defaults entries\nThe\n\\fIsudoers\\fR\nfile contains one or more unknown Defaults settings.\nThis does not prevent\n\\fBsudo\\fR\nfrom running, but the\n\\fIsudoers\\fR\nfile should be checked using\n\\fBvisudo\\fR.\n.TP 3n\ntimestamp owner (username): \\&No such user\nThe time stamp directory owner, as specified by the\n\\fItimestampowner\\fR\nsetting, could not be found in the password database.\n.TP 3n\nunable to open/read @sysconfdir@/sudoers\nThe\n\\fIsudoers\\fR\nfile could not be opened for reading.\nThis can happen when the\n\\fIsudoers\\fR\nfile is located on a remote file system that maps user-ID 0 to\na different value.\nNormally,\n\\fBsudoers\\fR\ntries to open the\n\\fIsudoers\\fR\nfile using group permissions to avoid this problem.\nConsider either changing the ownership of\n\\fI@sysconfdir@/sudoers\\fR\nor adding an argument like\n\\(lqsudoers_uid=N\\(rq\n(where\n\\(oqN\\(cq\nis the user-ID that owns the\n\\fIsudoers\\fR\nfile) to the end of the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\nunable to open @sysconfdir@/sudoers\nThe\n\\fI@sysconfdir@/sudoers\\fR\nfile is missing.\n.TP 3n\n@sysconfdir@/sudoers is not a regular file\nThe\n\\fI@sysconfdir@/sudoers\\fR\nfile exists but is not a regular file or symbolic link.\n.TP 3n\n@sysconfdir@/sudoers is owned by uid N, should be 0\nThe\n\\fIsudoers\\fR\nfile has the wrong owner.\nIf you wish to change the\n\\fIsudoers\\fR\nfile owner, add\n\\(lqsudoers_uid=N\\(rq\n(where\n\\(oqN\\(cq\nis the user-ID that owns the\n\\fIsudoers\\fR\nfile) to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\n@sysconfdir@/sudoers is world writable\nThe permissions on the\n\\fIsudoers\\fR\nfile allow all users to write to it.\nThe\n\\fIsudoers\\fR\nfile must not be world-writable, the default file mode\nis 0440 (readable by owner and group, writable by none).\nThe default mode may be changed via the\n\\(lqsudoers_mode\\(rq\noption to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\n@sysconfdir@/sudoers is owned by gid N, should be 1\nThe\n\\fIsudoers\\fR\nfile has the wrong group ownership.\nIf you wish to change the\n\\fIsudoers\\fR\nfile group ownership, add\n\\(lqsudoers_gid=N\\(rq\n(where\n\\(oqN\\(cq\nis the group-ID that owns the\n\\fIsudoers\\fR\nfile) to the\n\\fBsudoers\\fR\n\\fIPlugin\\fR\nline in the\nsudo.conf(@mansectform@)\nfile.\n.TP 3n\nunable to open @rundir@/ts/username\n\\fBsudoers\\fR\nwas unable to read or create the user's time stamp file.\nThis can happen when\n\\fItimestampowner\\fR\nis set to a user other than\n\\fBroot\\fR\nand the mode on\n\\fI@rundir@\\fR\nis not searchable by group or other.\nThe default mode for\n\\fI@rundir@\\fR\nis 0711.\n.TP 3n\nunable to write to @rundir@/ts/username\n\\fBsudoers\\fR\nwas unable to write to the user's time stamp file.\n.TP 3n\n@rundir@/ts is owned by uid X, should be Y\nThe time stamp directory is owned by a user other than\n\\fItimestampowner\\fR.\nThis can occur when the value of\n\\fItimestampowner\\fR\nhas been changed.\n\\fBsudoers\\fR\nwill ignore the time stamp directory until the owner is corrected.\n.TP 3n\n@rundir@/ts is group writable\nThe time stamp directory is group-writable; it should be writable only by\n\\fItimestampowner\\fR.\nThe default mode for the time stamp directory is 0700.\n\\fBsudoers\\fR\nwill ignore the time stamp directory until the mode is corrected.\n.SS \"Notes on logging via syslog\"\nBy default,\n\\fBsudoers\\fR\nlogs messages via\nsyslog(3).\nThe\n\\fIdate\\fR,\n\\fIhostname\\fR,\nand\n\\fIprogname\\fR\nfields are added by the system's\nsyslog(3)\nfunction, not\n\\fBsudoers\\fR\nitself.\nAs such, they may vary in format on different systems.\n.PP\nThe maximum size of syslog messages varies from system to system.\nThe\n\\fIsyslog_maxlen\\fR\nsetting can be used to change the maximum syslog message size\nfrom the default value of 980 bytes.\nFor more information, see the description of\n\\fIsyslog_maxlen\\fR.\n.SS \"Notes on logging to a file\"\nIf the\n\\fIlogfile\\fR\noption is set,\n\\fBsudoers\\fR\nwill log to a local file, such as\n\\fI@log_dir@/sudo\\fR.\nWhen logging to a file,\n\\fBsudoers\\fR\nuses a format similar to\nsyslog(3),\nwith a few important differences:\n.TP 5n\n1.\\&\nThe\n\\fIprogname\\fR\nfield is not present.\n.TP 5n\n2.\\&\nThe\n\\fIhostname\\fR\nis only logged if the\n\\fIlog_host\\fR\noption is enabled.\n.TP 5n\n3.\\&\nThe date does not include the year unless the\n\\fIlog_year\\fR\noption is enabled.\n.TP 5n\n4.\\&\nLines that are longer than\n\\fIloglinelen\\fR\ncharacters (80 by default) are word-wrapped and continued on the\nnext line with a four character indent.\nThis makes entries easier to read for a human being, but makes it\nmore difficult to use\ngrep(1)\non the log files.\nIf the\n\\fIloglinelen\\fR\noption is set to 0 (or negated with a\n\\(oq\\&!\\(cq),\nword wrap will be disabled.\n.SH \"I/O LOGGING\"\nWhen I/O logging is enabled,\n\\fBsudo\\fR\nwill runs the command in a pseudo-terminal, logging user input\nand/or output, depending on which\n\\fBsudoers\\fR\nflags are enabled.\nThere are five distinct types of I/O that can be logged, each with\na corresponding\n\\fBsudoers\\fR\nflag.\n.TS\nl l l.\n.PP\n\\fBType\\fR\t\\fBFlag\\fR\t\\fBDescription\\fR\n.PP\nterminal input\tlog_ttyin\tkeystrokes entered by the user\n.PP\nterminal output\tlog_ttyout\tcommand output displayed to the screen\n.PP\nstandard input\tlog_stdin\tinput from a pipe or a file\n.PP\nstandard output\tlog_stdout\toutput to a pipe or a file\n.PP\nstandard error\tlog_stderr\toutput to a pipe or a file\n.TE\n.PP\nIn addition to flags described the above, the\n\\fIlog_input\\fR\nflag and\n\\fRLOG_INPUT\\fR\ncommand tag set both\n\\fIlog_ttyin\\fR\nand\n\\fIlog_stdin\\fR.\nThe\n\\fIlog_output\\fR\nflag and\n\\fRLOG_OUTPUT\\fR\ncommand tag set\n\\fIlog_ttyout\\fR,\n\\fIlog_stdout\\fR,\nand\n\\fIlog_stderr\\fR.\n.PP\nTo capture terminal input and output,\n\\fBsudo\\fR\nrun the command in a pseudo-terminal, logging the input and\noutput before passing it on to the user.\nTo capture the standard input, standard output or standard error,\n\\fBsudo\\fR\nuses a pipe to interpose itself between the input or output stream,\nlogging the I/O before passing it to the other end of the pipe.\n.PP\nI/O can be logged either to the local machine or to a remote log server.\nFor local logs, I/O is logged to the directory specified by the\n\\fIiolog_dir\\fR\noption\n(\\fI@iolog_dir@\\fR\nby default)\nusing a unique session ID that is included in the\n\\fBsudo\\fR\nlog line, prefixed with\n\\(oqTSID=\\(cq.\nThe\n\\fIiolog_file\\fR\noption may be used to control the format of the session ID.\nFor remote logs, the\n\\fIlog_servers\\fR\nsetting is used to specify one or more log servers running\n\\fBsudo_logsrvd\\fR\nor another server that implements the protocol described by\nsudo_logsrv.proto(@mansectform@).\n.SS \"I/O logging pitfals\"\nWhen logging standard input, anything sent to the standard input\nwill be consumed, regardless of whether or not the command run via\n\\fBsudo\\fR\nis actively reading the standard input.\nThis may have unexpected results when using\n\\fBsudo\\fR\nin a shell script that expects to process the standard input.\nFor example, given the following shell script:\n.nf\n.sp\n.RS 4n\n#!/bin/sh\nsudo echo testing\necho done\n.RE\n.fi\n.PP\nIt will behave as expected when the script is passed to the shell as a\nan argument:\n.nf\n.sp\n.RS 4n\n$ sh test.sh\ntesting\ndone\n.RE\n.fi\n.PP\nHowever, if the script is passed to the shell on the standard input, the\n\\(oqsudo echo testing\\(cq\ncommand will consume the rest of the script.\nThis means that the\n\\(oqecho done\\(cq\nstatement is never executed.\n.nf\n.sp\n.RS 4n\n$ sh -s < test.sh\ntesting\n.RE\n.fi\n.PP\nThere are several ways to work around this problem:\n.TP 5n\n1.\\&\nRedirect the standard input from\n\\fI/dev/null\\fR\nwhen running a command via\n\\fBsudo\\fR\nthat does not need to read the standard input.\n.nf\n.sp\n.RS 9n\nsudo echo testing < /dev/null\n.RE\n.fi\n.TP 5n\n2.\\&\nPass the script to the shell by path name instead of via the standard input.\n.nf\n.sp\n.RS 9n\nsh test.sh\n.RE\n.fi\n.TP 5n\n3.\\&\nDisable logging the standard input for commands that do not need\nto read the standard input.\n.nf\n.sp\n.RS 9n\nDefaults!/bin/echo !log_stdin\n.RE\n.fi\n.PP\nDepending on the command, it may not be desirable to log the\nstandard input or standard output.\nFor example, I/O logging of commands that send or receive large\namount of data via the standard output or standard input such as\nrsync(1)\nand\ntar(1)\ncould fill up the log file system with superfluous data.\nIt is possible to disable logging of the standard input and standard\noutput for such commands as follows:\n.nf\n.sp\n.RS 4n\nCmnd_Alias COPY_CMDS = /usr/bin/tar, /usr/bin/cpio, /usr/bin/rsync\n\n# Log input and output but omit stdin and stdout when copying files.\nDefaults log_input, log_output\nDefaults!COPY_CMDS !log_stdin, !log_stdout\n.RE\n.fi\n.PP\nHowever, be aware that using the\n\\fIlog_input\\fR\nflag or the\n\\fRLOG_INPUT\\fR\ncommand tag will also enable\n\\fIlog_stdin\\fR.\nLikewise, the\n\\fIlog_ouput\\fR\nflag or the\n\\fRLOG_OUTPUT\\fR\ncommand tag will enable\n\\fIlog_stdout\\fR\nand\n\\fIlog_stderr.\\fR\nCareful ordering of rules may be necessary to achieve the results\nthat you expect.\n.SS \"I/O log format\"\nFor both local and remote I/O logs, each log is stored in a separate\ndirectory that contains the following files:\n.TP 10n\n\\fIlog\\fR\nA text file containing information about the command.\nThe first line consists of the following colon-delimited fields:\nthe time the command was run, the name of the user\nwho ran\n\\fBsudo\\fR,\nthe name of the target user, the name of the target group (optional),\nthe terminal that\n\\fBsudo\\fR\nwas run from, and the number of lines and columns of the terminal.\nThe second and third lines contain the working directory the command\nwas run from and the path name of the command itself (with arguments\nif present).\n.TP 10n\n\\fIlog.json\\fR\nA JSON-formatted file containing information about the command.\nThis is similar to the\n\\fIlog\\fR\nfile but contains additional information and is easily extensible.\nThe\n\\fIlog.json\\fR\nfile will be used by\nsudoreplay(@mansectsu@)\nin preference to the\n\\fIlog\\fR\nfile if it exists.\nThe file may contain the following elements:\n.PP\n.RS 10n\n.PD 0\n.TP 6n\ntimestamp\nA JSON object containing time the command was run.\nIt consists of two values,\n\\fIseconds\\fR\nand\n\\fInanoseconds\\fR.\n.PD\n.TP 6n\ncolumns\nThe number of columns of the terminal the command ran on, or zero\nif no terminal was present.\n.TP 6n\ncommand\nThe fully-qualified path of the command that was run.\n.TP 6n\nlines\n.br\nThe number of lines of the terminal the command ran on, or zero\nif no terminal was present.\n.TP 6n\nrunargv\nA JSON array representing the command's argument vector as passed to the\nexecve(2)\nsystem call.\n.TP 6n\nrunenv\nA JSON array representing the command's environment as passed to the\nexecve(2)\nsystem call.\n.TP 6n\nrungid\nThe group ID the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.TP 6n\nrungroup\nThe name of the group the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.TP 6n\nrunuid\nThe user ID the command ran as.\n.TP 6n\nrunuser\nThe name of the user the command ran as.\n.TP 6n\nsubmitcwd\nThe current working directory at the time\n\\fBsudo\\fR\nwas run.\n.TP 6n\nsubmithost\nThe name of the host the command was run on.\n.TP 6n\nsubmituser\nThe name of the user who ran the command via\n\\fBsudo\\fR.\n.TP 6n\nttyname\nThe path name of the terminal the user invoked\n\\fBsudo\\fR\nfrom.\nIf the command was run in a pseudo-terminal,\n\\fIttyname\\fR\nwill be different from the terminal the command actually ran in.\n.PD 0\n.PP\n.RE\n.PD\n.TP 10n\n\\fItiming\\fR\nTiming information used to replay the session.\nEach line consists of the I/O log entry type and amount of time\nsince the last entry, followed by type-specific data.\nThe I/O log entry types and their corresponding type-specific data are:\n.PP\n.RS 10n\n.PD 0\n.TP 6n\n0\nstandard input, number of bytes in the entry\n.TP 6n\n1\nstandard output, number of bytes in the entry\n.TP 6n\n2\nstandard error, number of bytes in the entry\n.TP 6n\n3\nterminal input, number of bytes in the entry\n.TP 6n\n4\nterminal output, number of bytes in the entry\n.TP 6n\n5\nwindow change, new number lines and columns\n.TP 6n\n6\nbug compatibility for\n\\fBsudo\\fR\n1.8.7 terminal output\n.TP 6n\n7\ncommand suspend or resume, signal received\n.PP\n.RE\n.PD\n.TP 10n\n\\fIttyin\\fR\nRaw input from the user's terminal, exactly as it was received.\nThis file is only present if the\n\\fIlog_input\\fR\nor\n\\fIlog_ttyin\\fR\nflags are set and\n\\fBsudo\\fR\nwas run from a terminal.\nNo post-processing is performed.\nFor manual viewing, you may wish to convert carriage return characters\nin the log to line feeds.\nFor example:\n\\(oqgunzip -c ttyin | tr \\&\"\\er\\&\" \\&\"\\en\\&\"\\(cq\n.TP 10n\n\\fIstdin\\fR\nThe standard input when no terminal is present, or input redirected from\na pipe or file.\nThis file is only present if the\n\\fIlog_input\\fR\nor\n\\fIlog_stdin\\fR\nflags are set and the standard input is not connected to a terminal.\n.TP 10n\n\\fIttyout\\fR\nOutput from the pseudo-terminal (what the command writes to the screen).\nTerminal-specific post-processing is performed before the data is logged.\nThis means that, for example, line feeds are usually converted to\nline feed/carriage return pairs and tabs may be expanded to spaces.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_ttyout\\fR\nflags are set and\n\\fBsudo\\fR\nwas run from a terminal.\n.TP 10n\n\\fIstdout\\fR\nThe standard output when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_stdout\\fR\nflags are set and the standard output is not connected to a terminal.\n.TP 10n\n\\fIstderr\\fR\nThe standard error when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n\\fIlog_output\\fR\nor\n\\fIlog_stderr\\fR\nflags are set and the standard error is not connected to a terminal.\n.PP\nAll files other than\n\\fIlog\\fR\nare compressed in gzip format unless the\n\\fIcompress_io\\fR\nflag has been disabled.\nDue to buffering, it is not normally possible to display the I/O logs in\nreal-time as the program is executing.\nThe I/O log data will not be complete until the program run by\n\\fBsudo\\fR\nhas exited or has been terminated by a signal.\nThe\n\\fIiolog_flush\\fR\nflag can be used to disable buffering, in which case I/O log data\nis written to disk as soon as it is available.\nThe output portion of an I/O log file can be viewed with the\nsudoreplay(@mansectsu@)\nutility, which can also be used to list or search the available logs.\n.PP\nUser input may contain sensitive information such as passwords (even\nif they are not echoed to the screen), which will be stored in the\nlog file unencrypted.\nIn most cases, logging the command output via\n\\fIlog_output\\fR\nor\n\\fRLOG_OUTPUT\\fR\nis all that is required.\nWhen logging input, consider disabling the\n\\fIlog_passwords\\fR\nflag.\n.PP\nSince each session's I/O logs are stored in a separate directory,\ntraditional log rotation utilities cannot be used to limit the\nnumber of I/O logs.\nThe simplest way to limit the number of I/O is by setting the\n\\fImaxseq\\fR\noption to the maximum number of logs you wish to store.\nOnce the I/O log sequence number reaches\n\\fImaxseq\\fR,\nit will be reset to zero and\n\\fBsudoers\\fR\nwill truncate and re-use any existing I/O logs.\n.SH \"FILES\"\n.TP 26n\n\\fI@sysconfdir@/sudo.conf\\fR\nSudo front-end configuration\n.TP 26n\n\\fI@sysconfdir@/sudoers\\fR\nList of who can run what\n.TP 26n\n\\fI/etc/group\\fR\nLocal groups file\n.TP 26n\n\\fI/etc/netgroup\\fR\nList of network groups\n.TP 26n\n\\fI@iolog_dir@\\fR\nI/O log files\n.TP 26n\n\\fI@rundir@/ts\\fR\nDirectory containing time stamps for the\n\\fBsudoers\\fR\nsecurity policy\n.TP 26n\n\\fI@vardir@/lectured\\fR\nDirectory containing lecture status files for the\n\\fBsudoers\\fR\nsecurity policy\n.TP 26n\n\\fI/etc/environment\\fR\nInitial environment for\n\\fB\\-i\\fR\nmode on AIX and Linux systems\n.SH \"EXAMPLES\"\nBelow are example\n\\fIsudoers\\fR\nfile entries.\nAdmittedly, some of these are a bit contrived.\nFirst, we allow a few environment variables to pass and then define our\n\\fIaliases\\fR:\n.nf\n.sp\n.RS 0n\n# Run X applications through sudo; HOME is used to find the\n# .Xauthority file.  Other programs use HOME to locate configuration\n# files and this may lead to privilege escalation!\nDefaults env_keep += \"DISPLAY HOME\"\n\n# User alias specification\nUser_Alias\tFULLTIMERS = millert, mikef, dowdy\nUser_Alias\tPARTTIMERS = bostley, jwfox, crawl\nUser_Alias\tWEBADMIN = will, wendy, wim\n\n# Runas alias specification\nRunas_Alias\tOP = root, operator\nRunas_Alias\tDB = oracle, sybase\nRunas_Alias\tADMINGRP = adm, oper\n\n# Host alias specification\nHost_Alias\tSPARC = bigtime, eclipse, moet, anchor :\\e\n\t\tSGI = grolsch, dandelion, black :\\e\n\t\tALPHA = widget, thalamus, foobar :\\e\n\t\tHPPA = boa, nag, python\nHost_Alias\tCUNETS = 128.138.0.0/255.255.0.0\nHost_Alias\tCSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0\nHost_Alias\tSERVERS = primary, mail, www, ns\nHost_Alias\tCDROM = orion, perseus, hercules\n\n# Cmnd alias specification\nCmnd_Alias\tDUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\\e\n\t\t\t/usr/sbin/restore, /usr/sbin/rrestore,\\e\n\t\t\tsha224:0GomF8mNN3wlDt1HD9XldjJ3SNgpFdbjO1+NsQ== \\e\n\t\t\t/home/operator/bin/start_backups\nCmnd_Alias\tKILL = /usr/bin/kill\nCmnd_Alias\tPRINTING = /usr/sbin/lpc, /usr/bin/lprm\nCmnd_Alias\tSHUTDOWN = /usr/sbin/shutdown\nCmnd_Alias\tHALT = /usr/sbin/halt\nCmnd_Alias\tREBOOT = /usr/sbin/reboot\nCmnd_Alias\tSHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\\e\n\t\t\t /usr/local/bin/tcsh, /usr/bin/rsh,\\e\n\t\t\t /usr/local/bin/zsh\nCmnd_Alias\tSU = /usr/bin/su\nCmnd_Alias\tPAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less\n.RE\n.fi\n.PP\nHere we override some of the compiled in default values.\nWe want\n\\fBsudo\\fR\nto log via\nsyslog(3)\nusing the\n\\fIauth\\fR\nfacility in all cases and for commands to be run with\nthe target user's home directory as the working directory.\nWe don't want to subject the full time staff to the\n\\fBsudo\\fR\nlecture and we want to allow them to run commands in a\nchroot(2)\n\\(lqsandbox\\(rq\nvia the\n\\fB\\-R\\fR\noption.\nUser\n\\fBmillert\\fR\nneed not provide a password and we don't want to reset the\n\\fRLOGNAME\\fR\nor\n\\fRUSER\\fR\nenvironment variables when running commands as\n\\fBroot\\fR.\nAdditionally, on the machines in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR,\nwe keep an additional local log file and make sure we log the year\nin each log line since the log entries will be kept around for several years.\nLastly, we disable shell escapes for the commands in the PAGERS\n\\fICmnd_Alias\\fR\n(\\fI/usr/bin/more\\fR,\n\\fI/usr/bin/pg\\fR\nand\n\\fI/usr/bin/less\\fR)\n\\&.\nThis will not effectively constrain users with\n\\fBsudo\\fR\n\\fBALL\\fR\nprivileges.\n.nf\n.sp\n.RS 0n\n# Override built-in defaults\nDefaults\t\tsyslog=auth,runcwd=~\nDefaults>root\t\t!set_logname\nDefaults:FULLTIMERS\t!lecture,runchroot=*\nDefaults:millert\t!authenticate\nDefaults@SERVERS\tlog_year, logfile=@log_dir@/sudo.log\nDefaults!PAGERS\t\tnoexec\n.RE\n.fi\n.PP\nThe\n\\fIUser specification\\fR\nis the part that actually determines who may run what.\n.nf\n.sp\n.RS 0n\nroot\t\tALL = (ALL) ALL\n%wheel\t\tALL = (ALL) ALL\n.RE\n.fi\n.PP\nWe let\n\\fBroot\\fR\nand any user in group\n\\fBwheel\\fR\nrun any command on any host as any user.\n.nf\n.sp\n.RS 0n\nFULLTIMERS\tALL = NOPASSWD: ALL\n.RE\n.fi\n.PP\nFull time sysadmins\n(\\fBmillert\\fR,\n\\fBmikef\\fR,\nand\n\\fBdowdy\\fR)\nmay run any command on any host without authenticating themselves.\n.nf\n.sp\n.RS 0n\nPARTTIMERS\tALL = ALL\n.RE\n.fi\n.PP\nPart time sysadmins\n\\fBbostley\\fR,\n\\fBjwfox\\fR,\nand\n\\fBcrawl\\fR)\nmay run any command on any host but they must authenticate themselves\nfirst (since the entry lacks the\n\\fRNOPASSWD\\fR\ntag).\n.nf\n.sp\n.RS 0n\njack\t\tCSNETS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjack\\fR\nmay run any command on the machines in the\n\\fRCSNETS\\fR\nalias (the networks 128.138.243.0, 128.138.204.0, and 128.138.242.0).\nOf those networks, only 128.138.204.0 has an explicit netmask (in\nCIDR notation) indicating it is a class C network.\nFor the other networks in\n\\fRCSNETS\\fR,\nthe local machine's netmask will be used during matching.\n.nf\n.sp\n.RS 0n\nlisa\t\tCUNETS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBlisa\\fR\nmay run any command on any host in the\n\\fRCUNETS\\fR\nalias (the class B network 128.138.0.0).\n.nf\n.sp\n.RS 0n\noperator\tALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\\e\n\t\tsudoedit /etc/printcap, /usr/oper/bin/\n.RE\n.fi\n.PP\nThe\n\\fBoperator\\fR\nuser may run commands limited to simple maintenance.\nHere, those are commands related to backups, killing processes, the\nprinting system, shutting down the system, and any commands in the\ndirectory\n\\fI/usr/oper/bin/\\fR.\nOne command in the\n\\fRDUMPS\\fR\nCmnd_Alias includes a sha224 digest,\n\\fI/home/operator/bin/start_backups\\fR.\nThis is because the directory containing the script is writable by the\noperator user.\nIf the script is modified (resulting in a digest mismatch) it will no longer\nbe possible to run it via\n\\fBsudo\\fR.\n.nf\n.sp\n.RS 0n\njoe\t\tALL = /usr/bin/su operator\n.RE\n.fi\n.PP\nThe user\n\\fBjoe\\fR\nmay only\nsu(1)\nto operator.\n.nf\n.sp\n.RS 0n\npete\t\tHPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd *root*\n\n%opers\t\tALL = (: ADMINGRP) /usr/sbin/\n.RE\n.fi\n.PP\nUsers in the\n\\fBopers\\fR\ngroup may run commands in\n\\fI/usr/sbin/\\fR\nas themselves\nwith any group in the\n\\fRADMINGRP\\fR\n\\fIRunas_Alias\\fR\n(the\n\\fBadm\\fR\nand\n\\fBoper\\fR\ngroups).\n.PP\nThe user\n\\fBpete\\fR\nis allowed to change anyone's password except for\n\\fBroot\\fR\non the\n\\fRHPPA\\fR\nmachines.\nBecause command line arguments are matched as a single,\nconcatenated string, the\n\\(oq*\\(cq\nwildcard will match\n\\fImultiple\\fR\nwords.\nThis example assumes that\npasswd(1)\ndoes not take multiple user names on the command line.\nOn systems with GNU\ngetopt(3),\noptions to\npasswd(1)\nmay be specified after the user argument.\nAs a result, this rule will also allow:\n.nf\n.sp\n.RS 4n\npasswd username --expire\n.RE\n.fi\n.PP\nwhich may not be desirable.\n.nf\n.sp\n.RS 0n\nbob\t\tSPARC = (OP) ALL : SGI = (OP) ALL\n.RE\n.fi\n.PP\nThe user\n\\fBbob\\fR\nmay run anything on the\n\\fRSPARC\\fR\nand\n\\fRSGI\\fR\nmachines as any user listed in the\n\\fROP\\fR\n\\fIRunas_Alias\\fR\n(\\fBroot\\fR\nand\n\\fBoperator\\fR.)\n.nf\n.sp\n.RS 0n\njim\t\t+biglab = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjim\\fR\nmay run any command on machines in the\n\\fIbiglab\\fR\nnetgroup.\n\\fBsudo\\fR\nknows that\n\\(lqbiglab\\(rq\nis a netgroup due to the\n\\(oq+\\(cq\nprefix.\n.nf\n.sp\n.RS 0n\n+secretaries\tALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser\n.RE\n.fi\n.PP\nUsers in the\n\\fBsecretaries\\fR\nnetgroup need to help manage the printers as well as add and remove users,\nso they are allowed to run those commands on all machines.\n.nf\n.sp\n.RS 0n\nfred\t\tALL = (DB) NOPASSWD: ALL\n.RE\n.fi\n.PP\nThe user\n\\fBfred\\fR\ncan run commands as any user in the\n\\fRDB\\fR\n\\fIRunas_Alias\\fR\n(\\fBoracle\\fR\nor\n\\fBsybase\\fR)\nwithout giving a password.\n.nf\n.sp\n.RS 0n\njohn\t\tALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*\n.RE\n.fi\n.PP\nOn the\n\\fRALPHA\\fR\nmachines, user\n\\fBjohn\\fR\nmay su to anyone except\n\\fBroot\\fR\nbut he is not allowed to specify any options to the\nsu(1)\ncommand.\n.nf\n.sp\n.RS 0n\njen\t\tALL, !SERVERS = ALL\n.RE\n.fi\n.PP\nThe user\n\\fBjen\\fR\nmay run any command on any machine except for those in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR\n(primary, mail, www, and ns).\n.nf\n.sp\n.RS 0n\njill\t\tSERVERS = /usr/bin/, !SU, !SHELLS\n.RE\n.fi\n.PP\nFor any machine in the\n\\fRSERVERS\\fR\n\\fIHost_Alias\\fR,\n\\fBjill\\fR\nmay run\nany commands in the directory\n\\fI/usr/bin/\\fR\nexcept for those commands\nbelonging to the\n\\fRSU\\fR\nand\n\\fRSHELLS\\fR\n\\fICmnd_Aliases\\fR.\nWhile not specifically mentioned in the rule, the commands in the\n\\fRPAGERS\\fR\n\\fICmnd_Alias\\fR\nall reside in\n\\fI/usr/bin\\fR\nand have the\n\\fInoexec\\fR\noption set.\n.nf\n.sp\n.RS 0n\nsteve\t\tCSNETS = (operator) /usr/local/op_commands/\n.RE\n.fi\n.PP\nThe user\n\\fBsteve\\fR\nmay run any command in the directory /usr/local/op_commands/\nbut only as user operator.\n.nf\n.sp\n.RS 0n\nmatt\t\tvalkyrie = KILL\n.RE\n.fi\n.PP\nOn his personal workstation, valkyrie,\n\\fBmatt\\fR\nneeds to be able to kill hung processes.\n.nf\n.sp\n.RS 0n\nWEBADMIN\twww = (www) ALL, (root) /usr/bin/su www\n.RE\n.fi\n.PP\nOn the host www, any user in the\n\\fRWEBADMIN\\fR\n\\fIUser_Alias\\fR\n(will, wendy, and wim), may run any command as user www (which owns the\nweb pages) or simply\nsu(1)\nto www.\n.nf\n.sp\n.RS 0n\nALL\t\tCDROM = NOPASSWD: /sbin/umount /CDROM,\\e\n\t\t/sbin/mount -o nosuid\\e,nodev /dev/cd0a /CDROM\n.RE\n.fi\n.PP\nAny user may mount or unmount a CD-ROM on the machines in the CDROM\n\\fIHost_Alias\\fR\n(orion, perseus, hercules) without entering a password.\nThis is a bit tedious for users to type, so it is a prime candidate\nfor encapsulating in a shell script.\n.SH \"SECURITY NOTES\"\n.SS \"Limitations of the \\(oq!\\&\\(cq operator\"\nIt is generally not effective to\n\\(lqsubtract\\(rq\ncommands from\n\\fBALL\\fR\nusing the\n\\(oq!\\&\\(cq\noperator.\nA user can trivially circumvent this by copying the desired command\nto a different name and then executing that.\nFor example:\n.nf\n.sp\n.RS 0n\nbill\tALL = ALL, !SU, !SHELLS\n.RE\n.fi\n.PP\nDoesn't really prevent\n\\fBbill\\fR\nfrom running the commands listed in\n\\fRSU\\fR\nor\n\\fRSHELLS\\fR\nsince he can simply copy those commands to a different name, or use\na shell escape from an editor or other program.\nTherefore, these kind of restrictions should be considered\nadvisory at best (and reinforced by policy).\n.PP\nIn general, if a user has sudo\n\\fBALL\\fR\nthere is nothing to prevent them from creating their own program that gives\nthem a\n\\fBroot\\fR\nshell (or making their own copy of a shell) regardless of any\n\\(oq!\\&\\(cq\nelements in the user specification.\n.SS \"Security implications of \\fIfast_glob\\fR\"\nIf the\n\\fIfast_glob\\fR\noption is in use, it is not possible to reliably negate commands where the\npath name includes globbing (aka wildcard) characters.\nThis is because the C library's\nfnmatch(3)\nfunction cannot resolve relative paths.\nWhile this is typically only an inconvenience for rules that grant privileges,\nit can result in a security issue for rules that subtract or revoke privileges.\n.PP\nFor example, given the following\n\\fIsudoers\\fR\nfile entry:\n.nf\n.sp\n.RS 0n\njohn\tALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\\e\n              /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root\n.RE\n.fi\n.PP\nUser\n\\fBjohn\\fR\ncan still run\n\\(oq/usr/bin/passwd root\\(cq\nif\n\\fIfast_glob\\fR\nis enabled by changing to\n\\fI/usr/bin\\fR\nand running\n\\(oq./passwd root\\(cq\ninstead.\n.PP\nAnother potential issue is that when\n\\fBsudo\\fR\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n\\fIsudoers\\fR\nfile.\nThis may lead to a time of check versus time of use race condition.\n.SS \"Wildcards in command arguments\"\nCommand line arguments are matched as a single, concatenated string.\nThis mean a wildcard character such as\n\\(oq\\&?\\(cq\nor\n\\(oq*\\(cq\nwill match across word boundaries, which may be unexpected.\nFor example, while a sudoers entry like:\n.nf\n.sp\n.RS 4n\n%operator ALL = /bin/cat @log_dir@/messages*\n.RE\n.fi\n.PP\nwill allow command like:\n.nf\n.sp\n.RS 4n\n$ sudo cat @log_dir@/messages.1\n.RE\n.fi\n.PP\nIt will also allow:\n.nf\n.sp\n.RS 4n\n$ sudo cat @log_dir@/messages /etc/shadow\n.RE\n.fi\n.PP\nwhich is probably not what was intended.\nA safer alternative is to use a regular expression for matching\ncommand line arguments.\nThe above example can be rewritten as a regular expression:\n.nf\n.sp\n.RS 4n\n%operator ALL = /bin/cat ^@log_dir@/messages[^[:space:]]*$\n.RE\n.fi\n.PP\nThe regular expression will only match a single file with a\nname that begins with\n\\fI@log_dir@/messages\\fR\nand does not include any white space in the name.\nIt is often better to do command line processing outside of the\n\\fIsudoers\\fR\nfile in a scripting language for anything non-trivial.\n.SS \"Regular expressions in command names\"\nUsing a regular expression to match a command name has the same\nsecurity implications as using the\n\\fIfast_glob\\fR\noption:\n.TP 3n\n\\fB\\(bu\\fR\nIt is not possible to reliably negate commands when the\npath name is a regular expression.\n.TP 3n\n\\fB\\(bu\\fR\nWhen\n\\fBsudo\\fR\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n\\fIsudoers\\fR\nfile.\nThis may lead to a time of check versus time of use race condition.\n.PP\nThese issues do not apply to rules where only the command line\noptions are matched using a regular expression.\n.SS \"Preventing shell escapes\"\nOnce\n\\fBsudo\\fR\nexecutes a program, that program is free to do whatever\nit pleases, including run other programs.\nThis can be a security issue since it is not uncommon for a program to\nallow shell escapes, which lets a user bypass\n\\fBsudo\\fR's\naccess control and logging.\nCommon programs that permit shell escapes include shells (obviously),\neditors, paginators, mail, and terminal programs.\n.PP\nThere are four basic approaches to this problem:\n.TP 11n\nrestrict\nAvoid giving users access to commands that allow the user to run\narbitrary commands.\nMany editors have a restricted mode where shell\nescapes are disabled, though\n\\fBsudoedit\\fR\nis a better solution to\nrunning editors via\n\\fBsudo\\fR.\nDue to the large number of programs that\noffer shell escapes, restricting users to the set of programs that\ndo not is often unworkable.\n.TP 11n\nintercept\nOn most systems,\n\\fBsudo\\fR's\n\\fIintercept\\fR\nfunctionality can be used to transparently intercept an attempt to\nrun a new command, allow or deny it based on\n\\fIsudoers\\fR\nrules, and log the result.\nFor example, this can be used to restrict the commands run from\nwithin a privileged shell or editor.\n.sp\nThere are two underlying mechanisms that may be used to implement\n\\fIintercept\\fR\nmode:\n\\fIdso\\fR\nand\n\\fItrace\\fR.\nThe\n\\fIintercept_type\\fR\nsetting can be used to select between them.\n.sp\nThe first mechanism,\n\\fIdso\\fR,\noverrides the standard C library functions that are used to execute a\ncommand.\nIt does this by setting an environment variable (usually\n\\fRLD_PRELOAD\\fR)\nto the path of a dynamic shared object, or shared library,\ncontaining custom versions of the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexecv(3),\nexecvp(3),\nexecvpe(3),\nand\nsystem(3)\nlibrary functions that connect back to\n\\fBsudo\\fR\nfor a policy decision.\nNote, however, that this applies only to dynamically-linked\nexecutables.\nIt is not possible to intercept commands for statically-linked executables\nor executables that run under binary emulation this way.\nBecause most dynamic loaders ignore\n\\fRLD_PRELOAD\\fR\n(or the equivalent) when running set-user-ID and set-group-ID programs,\n\\fBsudoers\\fR\nwill not permit such programs to be run in\n\\fIintercept\\fR\nmode by default.\nThe\n\\fIdso\\fR\nmechanism is incompatible with\n\\fBsudo\\fR's\nSELinux RBAC support (but see below).\nSELinux disables\n\\fRLD_PRELOAD\\fR\nby default and interferes with file descriptor inheritance, which\n\\fBsudo\\fR\nrelies on.\n.sp\nThe second mechanism,\n\\fItrace\\fR,\nis available on Linux systems that support\nseccomp(2)\nfiltering.\nIt uses\nptrace(2)\nand\nseccomp(2)\nto intercept the\nexecve(2)\nsystem call instead of pre-loading a dynamic shared object.\nBoth static and dynamic executables are supported and it is compatible with\n\\fBsudo\\fR's\nSELinux RBAC mode.\nFunctions utilizing the\nexecveat(2)\nsystem call, such as\nfexecve(3),\nare not currently intercepted.\n.sp\nThe\n\\fIintercept\\fR\nfeature is known to work on Solaris, *BSD, Linux, macOS, HP-UX 11.x\nand AIX 5.3 and above.\nIt should be supported on most operating systems that support the\n\\fRLD_PRELOAD\\fR\nenvironment variable or an equivalent.\nIt is not possible to intercept shell built-in commands or restrict\nthe ability to read or write sensitive files from within a shell.\n.sp\nTo enable intercept mode on a per-command basis, use the\n\\fRINTERCEPT\\fR\ntag as documented in the User Specification section above.\nHere is that example again:\n.nf\n.sp\n.RS 11n\nchuck\tresearch = INTERCEPT: ALL\n.RE\n.fi\n.RS 11n\n.sp\nThis allows user\n\\fBchuck\\fR\nto run any command on the machine\n\\(lqresearch\\(rq\nin intercept mode.\nAny commands run via shell escapes will be validated and logged by\n\\fBsudo\\fR.\nIf you are unsure whether or not your system is capable of supporting\n\\fIintercept\\fR,\nyou can always just try it out and check whether or not external\ncommands run via a shell are logged when\n\\fIintercept\\fR\nis enabled.\n.sp\nThere is an inherent race condition between when a command is checked against\n\\fBsudoers\\fR\nrules and when it is actually executed.\nIf a user is allowed to run arbitrary commands, they may be able\nto change the\nexecve(2)\narguments in the program after the\n\\fBsudoers\\fR\npolicy check has completed but before the new command is executed.\nStarting with version 1.9.12, the\n\\fItrace\\fR\nmethod will verify that the command and its arguments have not\nchanged after\nexecve(2)\nhas completed but before execution of the new program has had a chance to run.\nThis is not the case with the\n\\fIdso\\fR\nmethod.\nSee the description of the\n\\fIintercept_verify\\fR\nsetting for more information.\n.RE\n.TP 11n\nlog\nThere are two separate but related ways to log additional commands.\nThe first is to enable I/O logging using the\n\\fIlog_output\\fR\nflag.\nThis will log the command's output but will not create an event log\nentry when the additional command is run.\nThe second is to enable the\n\\fIlog_subcmds\\fR\nflag in\n\\fIsudoers\\fR\nwhich will create an event log entry every time a new command is run.\nIf I/O logging is also enabled, the log entry will include a time offset\ninto the I/O log to indicate when the command was run.\nThis offset can be passed to the\nsudoreplay(@mansectsu@)\nutility to replay the I/O log at the exact moment when the command was run.\nThe\n\\fIlog_subcmds\\fR\nflag uses the same mechanism as\n\\fIintercept\\fR\n(see above) and has the same limitations.\n.TP 11n\nnoexec\n\\fBsudo\\fR's\n\\fInoexec\\fR\nfunctionality can be used to prevent a program run by\n\\fBsudo\\fR\nfrom executing any other programs.\nOn most systems, it uses the same\n\\fRLD_PRELOAD\\fR\nmechanism as\n\\fIintercept\\fR\n(see above) and thus the same caveats apply.\nThe\n\\fInoexec\\fR\nfunctionality\nis capable of blocking execution of commands run via the\nexecve(2),\nexecl(3),\nexecle(3),\nexeclp(3),\nexect(3),\nexecv(3),\nexecveat(3),\nexecvP(3),\nexecvp(3),\nexecvpe(3),\nfexecve(3),\npopen(3),\nposix_spawn(3),\nposix_spawnp(3),\nsystem(3),\nand\nwordexp(3)\nfunctions.\nOn Linux, a\nseccomp(2)\nfilter is used to implement\n\\fInoexec\\fR.\nOn Solaris 10 and higher,\n\\fInoexec\\fR\nuses Solaris privileges instead of the\n\\fRLD_PRELOAD\\fR\nenvironment variable.\n.sp\nTo enable\n\\fInoexec\\fR\nfor a command, use the\n\\fRNOEXEC\\fR\ntag as documented in the User Specification section above.\nHere is that example again:\n.nf\n.sp\n.RS 11n\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.RE\n.fi\n.RS 11n\n.sp\nThis allows user\n\\fBaaron\\fR\nto run\n\\fI/usr/bin/more\\fR\nand\n\\fI/usr/bin/vi\\fR\nwith\n\\fInoexec\\fR\nenabled.\nThis will prevent those two commands from\nexecuting other commands (such as a shell).\nIf you are unsure whether or not your system is capable of supporting\n\\fInoexec\\fR\nyou can always just try it out and check whether shell escapes work when\n\\fInoexec\\fR\nis enabled.\n.RE\n.PP\nRestricting shell escapes is not a panacea.\nPrograms running as\n\\fBroot\\fR\nare still capable of many potentially hazardous operations (such\nas changing or overwriting files) that could lead to unintended\nprivilege escalation.\nIn the specific case of an editor, a safer approach is to give the\nuser permission to run\n\\fBsudoedit\\fR\n(see below).\n.SS \"Secure editing\"\nThe\n\\fBsudoers\\fR\nplugin includes\n\\fBsudoedit\\fR\nsupport which allows users to securely edit files with the editor\nof their choice.\nAs\n\\fBsudoedit\\fR\nis a built-in command, it must be specified in the\n\\fIsudoers\\fR\nfile without a leading path.\nHowever, it may take command line arguments just as a normal command does.\nWildcards used in\n\\fIsudoedit\\fR\ncommand line arguments are expected to be path names, so a forward slash\n(\\(oq/\\(cq)\nwill not be matched by a wildcard.\n.PP\nUnlike other\n\\fBsudo\\fR\ncommands, the editor is run with the permissions of the invoking\nuser and with the environment unmodified.\nMore information may be found in the description of the\n\\fB\\-e\\fR\noption in\nsudo(@mansectsu@).\n.PP\nFor example, to allow user operator to edit the\n\\(lqmessage of the day\\(rq\nfile on any machine:\n.nf\n.sp\n.RS 4n\noperator ALL = sudoedit /etc/motd\n.RE\n.fi\n.PP\nThe operator user then runs\n\\fBsudoedit\\fR\nas follows:\n.nf\n.sp\n.RS 4n\n$ sudoedit /etc/motd\n.RE\n.fi\n.PP\nThe editor will run as the operator user, not\n\\fB@runas_default@\\fR,\non a temporary copy of\n\\fI/etc/motd\\fR.\nAfter the file has been edited,\n\\fI/etc/motd\\fR\nwill be updated with the contents of the temporary copy.\n.PP\nUsers should\n\\fInever\\fR\nbe granted\n\\fBsudoedit\\fR\npermission to edit a file that resides in a directory the user\nhas write access to, either directly or via a wildcard.\nIf the user has write access to the directory it is possible to\nreplace the legitimate file with a link to another file,\nallowing the editing of arbitrary files.\nTo prevent this, starting with version 1.8.16, symbolic links will\nnot be followed in writable directories and\n\\fBsudoedit\\fR\nwill refuse to edit a file located in a writable directory\nunless the\n\\fIsudoedit_checkdir\\fR\noption has been disabled or the invoking user is\n\\fBroot\\fR.\nAdditionally, in version 1.8.15 and higher,\n\\fBsudoedit\\fR\nwill refuse to open a symbolic link unless either the\n\\fIsudoedit_follow\\fR\noption is enabled or the\n\\fIsudoedit\\fR\ncommand is prefixed with the\n\\fRFOLLOW\\fR\ntag in the\n\\fIsudoers\\fR\nfile.\n.SS \"Time stamp file checks\"\n\\fBsudoers\\fR\nwill check the ownership of its time stamp directory\n(\\fI@rundir@/ts\\fR\nby default)\nand ignore the directory's contents if it is not owned by\n\\fBroot\\fR\nor if it is writable by a user other than\n\\fBroot\\fR.\nOlder versions of\n\\fBsudo\\fR\nstored time stamp files in\n\\fI/tmp\\fR;\nthis is no longer recommended as it may be possible for a user\nto create the time stamp themselves on systems that allow\nunprivileged users to change the ownership of files they create.\n.PP\nWhile the time stamp directory\n\\fIshould\\fR\nbe cleared at reboot time, not all systems contain a\n\\fI/run\\fR\nor\n\\fI/var/run\\fR\ndirectory.\nTo avoid potential problems,\n\\fBsudoers\\fR\nwill ignore time stamp files that date from before the machine booted\non systems where the boot time is available.\n.PP\nSome systems with graphical desktop environments allow unprivileged\nusers to change the system clock.\nSince\n\\fBsudoers\\fR\nrelies on the system clock for time stamp validation, it may be\npossible on such systems for a user to run\n\\fBsudo\\fR\nfor longer than\n\\fItimestamp_timeout\\fR\nby setting the clock back.\nTo combat this,\n\\fBsudoers\\fR\nuses a monotonic clock (which never moves backwards) for its time stamps\nif the system supports it.\n.PP\n\\fBsudoers\\fR\nwill not honor time stamps set far in the future.\nTime stamps with a date greater than current_time + 2 *\n\\fRTIMEOUT\\fR\nwill be ignored and\n\\fBsudoers\\fR\nwill log and complain.\n.PP\nIf the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqtty\\(rq,\nthe time stamp record includes the device number of the terminal\nthe user authenticated with.\nThis provides per-terminal granularity but time stamp records may still\noutlive the user's session.\n.PP\nUnless the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqglobal\\(rq,\nthe time stamp record also includes the session ID of the process\nthat last authenticated.\nThis prevents processes in different terminal sessions from using\nthe same time stamp record.\nOn systems where a process's start time can be queried,\nthe start time of the session leader\nis recorded in the time stamp record.\nIf no terminal is present or the\n\\fItimestamp_type\\fR\noption is set to\n\\(lqppid\\(rq,\nthe start time of the parent process is used instead.\nIn most cases this will prevent a time stamp record from being re-used\nwithout the user entering a password when logging out and back in again.\n.SH \"DEBUGGING\"\nVersions 1.8.4 and higher of the\n\\fBsudoers\\fR\nplugin support a flexible debugging framework that can help track\ndown what the plugin is doing internally if there is a problem.\nThis can be configured in the\nsudo.conf(@mansectform@)\nfile.\n.PP\nThe\n\\fBsudoers\\fR\nplugin uses the same debug flag format as the\n\\fBsudo\\fR\nfront-end:\n\\fIsubsystem\\fR@\\fIpriority\\fR.\n.PP\nThe priorities used by\n\\fBsudoers\\fR,\nin order of decreasing severity,\nare:\n\\fIcrit\\fR, \\fIerr\\fR, \\fIwarn\\fR, \\fInotice\\fR, \\fIdiag\\fR, \\fIinfo\\fR, \\fItrace\\fR,\nand\n\\fIdebug\\fR.\nEach priority, when specified, also includes all priorities higher\nthan it.\nFor example, a priority of\n\\fInotice\\fR\nwould include debug messages logged at\n\\fInotice\\fR\nand higher.\n.PP\nThe following subsystems are used by the\n\\fBsudoers\\fR\nplugin:\n.TP 10n\n\\fIalias\\fR\n\\fIUser_Alias\\fR,\n\\fIRunas_Alias\\fR,\n\\fIHost_Alias\\fR\nand\n\\fICmnd_Alias\\fR\nprocessing\n.TP 10n\n\\fIall\\fR\nmatches every subsystem\n.TP 10n\n\\fIaudit\\fR\nBSM and Linux audit code\n.TP 10n\n\\fIauth\\fR\nuser authentication\n.TP 10n\n\\fIdefaults\\fR\n\\fIsudoers\\fR\nfile\n\\fIDefaults\\fR\nsettings\n.TP 10n\n\\fIenv\\fR\nenvironment handling\n.TP 10n\n\\fIldap\\fR\nLDAP-based sudoers\n.TP 10n\n\\fIlogging\\fR\nlogging support\n.TP 10n\n\\fImatch\\fR\nmatching of users, groups, hosts, and netgroups in the\n\\fIsudoers\\fR\nfile\n.TP 10n\n\\fInetif\\fR\nnetwork interface handling\n.TP 10n\n\\fInss\\fR\nnetwork service switch handling in\n\\fBsudoers\\fR\n.TP 10n\n\\fIparser\\fR\n\\fIsudoers\\fR\nfile parsing\n.TP 10n\n\\fIperms\\fR\npermission setting\n.TP 10n\n\\fIplugin\\fR\nThe equivalent of\n\\fImain\\fR\nfor the plugin.\n.TP 10n\n\\fIpty\\fR\npseudo-terminal related code\n.TP 10n\n\\fIrbtree\\fR\nredblack tree internals\n.TP 10n\n\\fIsssd\\fR\nSSSD-based sudoers\n.TP 10n\n\\fIutil\\fR\nutility functions\n.PP\nFor example:\n.nf\n.sp\n.RS 0n\nDebug @sudoers_plugin@ @log_dir@/sudoers_debug match@info,nss@info\n.RE\n.fi\n.PP\nFor more information, see the\nsudo.conf(@mansectform@)\nmanual.\n.SH \"SEE ALSO\"\nssh(1),\nsu(1),\nfnmatch(3),\nglob(3),\nmktemp(3),\nstrftime(3),\nsudo.conf(@mansectform@),\nsudo_plugin(@mansectform@),\nsudoers.ldap(@mansectform@),\nsudoers_timestamp(@mansectform@),\nsudo(@mansectsu@),\nvisudo(@mansectsu@)\n.SH \"AUTHORS\"\nMany people have worked on\n\\fBsudo\\fR\nover the years; this version consists of code written primarily by:\n.sp\n.RS 6n\nTodd C. Miller\n.RE\n.PP\nSee the CONTRIBUTORS.md file in the\n\\fBsudo\\fR\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n\\fBsudo\\fR.\n.SH \"CAVEATS\"\nThe\n\\fIsudoers\\fR\nfile should\n\\fBalways\\fR\nbe edited by the\n\\fBvisudo\\fR\nutility which locks the file and checks for syntax errors.\nIf\n\\fIsudoers\\fR\ncontains syntax errors,\n\\fBsudo\\fR\nmay refuse to run, which is a serious problem if\n\\fBsudo\\fR\nis your only method of obtaining superuser privileges.\nRecent versions of\n\\fBsudoers\\fR\nwill attempt to recover after a syntax error by ignoring the rest of\nthe line after encountering an error.\nOlder versions of\n\\fBsudo\\fR\nwill not run if\n\\fIsudoers\\fR\ncontains a syntax error.\n.PP\nWhen using netgroups of machines (as opposed to users), if you\nstore fully qualified host name in the netgroup (as is usually the\ncase), you either need to have the machine's host name be fully qualified\nas returned by the\n\\fIhostname\\fR\ncommand or use the\n\\fIfqdn\\fR\noption in\n\\fIsudoers\\fR.\n.SH \"BUGS\"\nIf you believe you have found a bug in\n\\fBsudo\\fR,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.SH \"SUPPORT\"\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.SH \"DISCLAIMER\"\n\\fBsudo\\fR\nis provided\n\\(lqAS IS\\(rq\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n\\fBsudo\\fR\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 1994-1996, 1998-2005, 2007-2023\n.\\\"\tTodd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.\\\" Sponsored in part by the Defense Advanced Research Projects\n.\\\" Agency (DARPA) and Air Force Research Laboratory, Air Force\n.\\\" Materiel Command, USAF, under agreement number F39502-99-1-0512.\n.\\\"\n.nr SL @SEMAN@\n.nr AA @AAMAN@\n.nr BA @BAMAN@\n.nr LC @LCMAN@\n.nr PS @PSMAN@\n.Dd January 16, 2023\n.Dt SUDOERS @mansectform@\n.Os Sudo @PACKAGE_VERSION@\n.Sh NAME\n.Nm sudoers\n.Nd default sudo security policy plugin\n.Sh DESCRIPTION\nThe\n.Nm\npolicy plugin determines a user's\n.Nm sudo\nprivileges.\nIt is the default\n.Nm sudo\npolicy plugin.\nThe policy is driven by\nthe\n.Pa @sysconfdir@/sudoers\nfile or, optionally, in LDAP.\nThe policy format is described in detail in the\n.Sx SUDOERS FILE FORMAT\nsection.\nFor information on storing\n.Nm\npolicy information\nin LDAP, see\n.Xr sudoers.ldap @mansectform@ .\n.Ss Configuring sudo.conf for sudoers\n.Nm sudo\nconsults the\n.Xr sudo.conf @mansectform@\nfile to determine which plugins to load.\nIf no\n.Xr sudo.conf @mansectform@\nfile is present, or if it contains no\n.Em Plugin\nlines,\n.Nm\nwill be used for auditing, policy decisions and I/O logging.\nTo explicitly configure\n.Xr sudo.conf @mansectform@\nto use the\n.Nm\nplugin, the following configuration can be used.\n.Bd -literal -offset 4n\nPlugin sudoers_audit @sudoers_plugin@\nPlugin sudoers_policy @sudoers_plugin@\nPlugin sudoers_io @sudoers_plugin@\n.Ed\n.Pp\nStarting with\n.Nm sudo\n1.8.5, it is possible to specify optional arguments to the\n.Nm\nplugin in the\n.Xr sudo.conf @mansectform@\nfile.\nPlugin arguments, if any, should be listed after the path to the plugin\n(i.e., after\n.Pa @sudoers_plugin@ ) .\nThe arguments are only effective for the plugin that opens (and parses) the\n.Em sudoers\nfile.\n.Pp\nFor\n.Nm sudo\nversion 1.9.1 and higher, this is the\n.Em sudoers_audit\nplugin.\nFor older versions, it is the\n.Em sudoers_policy\nplugin.\nMultiple arguments may be specified, separated by white space.\nFor example:\n.Bd -literal -offset 4n\nPlugin sudoers_audit @sudoers_plugin@ sudoers_mode=0400 error_recovery=false\n.Ed\n.Pp\nThe following plugin arguments are supported:\n.Bl -tag -width 4n\n.It error_recovery=bool\nThe\n.Em error_recovery\nargument can be used to control whether\n.Nm\nshould attempt to recover from syntax errors in the\n.Em sudoers\nfile.\nIf set to\n.Em true\n(the default),\n.Nm\nwill try to recover from a syntax error by discarding the portion\nof the line that contains the error until the end of the line.\nA value of\n.Em false\nwill disable error recovery.\nPrior to version 1.9.3, no error recovery was performed.\n.It ldap_conf=pathname\nThe\n.Em ldap_conf\nargument can be used to override the default path to the\n.Pa ldap.conf\nfile.\n.It ldap_secret=pathname\nThe\n.Em ldap_secret\nargument can be used to override the default path to the\n.Pa ldap.secret\nfile.\n.It sudoers_file=pathname\nThe\n.Em sudoers_file\nargument can be used to override the default path to the\n.Em sudoers\nfile.\n.It sudoers_uid=user-ID\nThe\n.Em sudoers_uid\nargument can be used to override the default owner of the sudoers file.\nIt should be specified as a numeric user-ID.\n.It sudoers_gid=group-ID\nThe\n.Em sudoers_gid\nargument can be used to override the default group of the sudoers file.\nIt must be specified as a numeric group-ID (not a group name).\n.It sudoers_mode=mode\nThe\n.Em sudoers_mode\nargument can be used to override the default file mode for the sudoers file.\nIt should be specified as an octal value.\n.El\n.Pp\nFor more information on configuring\n.Xr sudo.conf @mansectform@ ,\nrefer to its manual.\n.Ss User Authentication\nThe\n.Nm\nsecurity policy requires that most users authenticate\nthemselves before they can use\n.Nm sudo .\nA password is not required\nif the invoking user is\n.Sy root ,\nif the target user is the same as the invoking user, or if the\npolicy has disabled authentication for the user or command.\nUnlike\n.Xr su 1 ,\nwhen\n.Nm\nrequires\nauthentication, it validates the invoking user's credentials, not\nthe target user's (or\n.Sy @runas_default@ Ns No 's)\ncredentials.\nThis can be changed via\nthe\n.Em rootpw ,\n.Em targetpw\nand\n.Em runaspw\nflags, described later.\n.Pp\nIf a user who is not listed in the policy tries to run a command\nvia\n.Nm sudo ,\nmail is sent to the proper authorities.\nThe address\nused for such mail is configurable via the\n.Em mailto\nDefaults entry\n(described later) and defaults to\n.Em @mailto@ .\n.Pp\nNo mail will be sent if an unauthorized user tries to run\n.Nm sudo\nwith the\n.Fl l\nor\n.Fl v\noption unless there is an authentication error and\neither the\n.Em mail_always\nor\n.Em mail_badpass\nflags are enabled.\nThis allows users to\ndetermine for themselves whether or not they are allowed to use\n.Nm sudo .\nBy default, all attempts to run\n.Nm sudo\n(successful or not)\nare logged, regardless of whether or not mail is sent.\n.Pp\nIf\n.Nm sudo\nis run by\n.Sy root\nand the\n.Ev SUDO_USER\nenvironment variable\nis set, the\n.Nm\npolicy will use this value to determine who\nthe actual user is.\nThis can be used by a user to log commands\nthrough sudo even when a\n.Sy root\nshell has been invoked.\nIt also\nallows the\n.Fl e\noption to remain useful even when invoked via a\nsudo-run script or program.\nNote, however, that the\n.Em sudoers\nfile lookup is still done for\n.Sy root ,\nnot the user specified by\n.Ev SUDO_USER .\n.Pp\n.Nm\nuses per-user time stamp files for credential caching.\nOnce a user has been authenticated, a record is written\ncontaining the user-ID that was used to authenticate, the\nterminal session ID, the start time of the session leader\n(or parent process) and a time stamp\n(using a monotonic clock if one is available).\nThe user may then use\n.Nm sudo\nwithout a password for a short period of time (@timeout@ minutes\nunless overridden by the\n.Em timestamp_timeout\noption).\nBy default,\n.Nm\nuses a separate record for each terminal, which means that\na user's login sessions are authenticated separately.\nThe\n.Em timestamp_type\noption can be used to select the type of time stamp record\n.Nm\nwill use.\n.Ss Logging\nBy default,\n.Nm\nlogs both successful and unsuccessful attempts (as well\nas errors).\nThe\n.Em log_allowed\nand\n.Em log_denied\nflags can be used to control this behavior.\nMessages can be logged to\n.Xr syslog 3 ,\na log file, or both.\nThe default is to log to\n.Xr syslog 3\nbut this is configurable via the\n.Em syslog\nand\n.Em logfile\nsettings.\nSee\n.Sx \"EVENT LOGGING\"\nfor a description of the log file format.\n.Pp\n.Nm\nis also capable of running a command in a pseudo-terminal and logging\ninput and/or output.\nThe standard input, standard output, and standard error can be logged\neven when not associated with a terminal.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\n.Pp\nStarting with version 1.9, the\n.Em log_servers\nsetting may be used to send event and I/O log data to a remote server running\n.Nm sudo_logsrvd\nor another service that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Ss Command environment\nSince environment variables can influence program behavior,\n.Nm\nprovides a means to restrict which variables from the user's\nenvironment are inherited by the command to be run.\nThere are two\ndistinct ways\n.Nm\ncan deal with environment variables.\n.Pp\nBy default, the\n.Em env_reset\nflag is enabled.\nThis causes commands\nto be executed with a new, minimal environment.\nOn AIX (and Linux\nsystems without PAM), the environment is initialized with the\ncontents of the\n.Pa /etc/environment\nfile.\n.if \\n(LC \\{\\\nOn\n.Bx\nsystems, if the\n.Em use_loginclass\nflag is enabled, the environment is initialized\nbased on the\n.Em path\nand\n.Em setenv\nsettings in\n.Pa /etc/login.conf .\n.\\}\nThe\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev LOGNAME\nand\n.Ev USER\nenvironment variables are initialized based on the target user\nand the\n.Ev SUDO_*\nvariables are set based on the invoking user.\nAdditional variables, such as\n.Ev DISPLAY ,\n.Ev PATH\nand\n.Ev TERM ,\nare preserved from the invoking user's environment if permitted by the\n.Em env_check ,\nor\n.Em env_keep\noptions.\nA few environment variables are treated specially.\nIf the\n.Ev PATH\nand\n.Ev TERM\nvariables are not preserved from the user's environment, they will be set\nto default values.\nThe\n.Ev LOGNAME\nand\n.Ev USER\nare handled as a single entity.\nIf one of them is preserved (or removed) from the user's environment,\nthe other will be as well.\nIf\n.Ev LOGNAME\nand\n.Ev USER\nare to be preserved but only one of them is present in the user's environment,\nthe other will be set to the same value.\nThis avoids an inconsistent environment where one of the variables\ndescribing the user name is set to the invoking user and one is\nset to the target user.\nEnvironment variables with a value beginning with\n.Ql ()\nare removed unless both the name and value parts are matched by\n.Em env_keep\nor\n.Em env_check ,\nas they may be interpreted as functions by the\n.Sy bash\nshell.\nPrior to version 1.8.11, such variables were always removed.\n.Pp\nIf, however, the\n.Em env_reset\nflag is disabled, any variables not\nexplicitly denied by the\n.Em env_check\nand\n.Em env_delete\noptions are allowed and their values are\ninherited from the invoking process.\nPrior to version 1.8.21, environment variables with a value beginning with\n.Ql ()\nwere always removed.\nBeginning with version 1.8.21, a pattern in\n.Em env_delete\nis used to match\n.Sy bash\nshell functions instead.\nSince it is not possible\nto block all potentially dangerous environment variables, use\nof the default\n.Em env_reset\nbehavior is encouraged.\n.Pp\nEnvironment variables specified by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep\nmay include one or more\n.Ql *\ncharacters which will match zero or more characters.\nNo other wildcard characters are supported.\n.Pp\nBy default, environment variables are matched by name.\nHowever, if the pattern includes an equal sign\n.Pq Ql =\\& ,\nboth the variables name and value must match.\nFor example, a\n.Sy bash\nshell function could be matched as follows:\n.Bd -literal -offset 4n\nenv_keep += \"BASH_FUNC_my_func%%=()*\"\n.Ed\n.Pp\nWithout the\n.Ql =()*\nsuffix, this would not match, as\n.Sy bash\nshell functions are not preserved by default.\n.Pp\nThe complete list of environment variables that are preserved or removed,\nas modified by global Defaults parameters in\n.Em sudoers ,\nis displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nThe list of environment variables to remove\nvaries based on the operating system\n.Nm sudo\nis running on.\n.Pp\nOther\n.Nm\noptions may influence the command environment, such as\n.Em always_set_home ,\n.Em secure_path ,\n.Em set_logname ,\nand\n.Em set_home .\n.Pp\nOn systems that support PAM where the\n.Sy pam_env\nmodule is enabled for\n.Nm sudo ,\nvariables in the PAM environment may be merged in to the environment.\nIf a variable in the PAM environment is already present in the\nuser's environment, the value will only be overridden if the variable\nwas not preserved by\n.Nm .\nWhen\n.Em env_reset\nis enabled, variables preserved from the invoking user's environment\nby the\n.Em env_keep\nlist take precedence over those in the PAM environment.\nWhen\n.Em env_reset\nis disabled, variables present the invoking user's environment\ntake precedence over those in the PAM environment unless they\nmatch a pattern in the\n.Em env_delete\nlist.\n.Pp\nThe dynamic linker on most operating systems will remove variables\nthat can control dynamic linking from the environment of set-user-ID\nexecutables, including\n.Nm sudo .\nDepending on the operating\nsystem this may include\n.Ev _RLD* ,\n.Ev DYLD_* ,\n.Ev LD_* ,\n.Ev LDR_* ,\n.Ev LIBPATH ,\n.Ev SHLIB_PATH ,\nand others.\nThese type of variables are\nremoved from the environment before\n.Nm sudo\neven begins execution\nand, as such, it is not possible for\n.Nm sudo\nto preserve them.\n.Pp\nAs a special case, if the\n.Fl i\noption (initial login) is\nspecified,\n.Nm\nwill initialize the environment regardless\nof the value of\n.Em env_reset .\nThe\n.Ev DISPLAY ,\n.Ev PATH\nand\n.Ev TERM\nvariables remain unchanged;\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev USER ,\nand\n.Ev LOGNAME\nare set based on the target user.\nOn AIX (and Linux\nsystems without PAM), the contents of\n.Pa /etc/environment\nare also\nincluded.\n.if \\n(LC \\{\\\nOn\n.Bx\nsystems, if the\n.Em use_loginclass\nflag is\nenabled, the\n.Em path\nand\n.Em setenv\nvariables in\n.Pa /etc/login.conf\nare also applied.\n.\\}\nAll other environment variables are removed unless permitted by\n.Em env_keep\nor\n.Em env_check ,\ndescribed above.\n.Pp\nFinally, the\n.Em restricted_env_file\nand\n.Em env_file\nfiles are applied, if present.\nThe variables in\n.Em restricted_env_file\nare applied first and are subject to the same restrictions as the\ninvoking user's environment, as detailed above.\nThe variables in\n.Em env_file\nare applied last and are not subject to these restrictions.\nIn both cases, variables present in the files will only be set to\ntheir specified values if they would not conflict with an existing\nenvironment variable.\n.Sh SUDOERS FILE FORMAT\nThe\n.Em sudoers\nfile is composed of two types of entries: aliases\n(basically variables) and user specifications (which specify who\nmay run what).\n.Pp\nWhen multiple entries match for a user, they are applied in order.\nWhere there are multiple matches, the last match is used (which is\nnot necessarily the most specific match).\n.Pp\nThe\n.Em sudoers\nfile grammar will be described below in Extended Backus-Naur\nForm (EBNF).\nDon't despair if you are unfamiliar with EBNF; it is fairly simple,\nand the definitions below are annotated.\n.Ss Resource limits\nBy default,\n.Nm\nuses the operating system's native method of setting resource limits\nfor the target user.\nOn Linux systems, resource limits are usually set by the\n.Pa pam_limits.so\nPAM module.\nOn some BSD systems, the\n.Pa /etc/login.conf\nfile specifies resource limits for the user.\nOn AIX systems, resource limits are configured in the\n.Pa /etc/security/limits\nfile.\nIf there is no system mechanism to set per-user resource limits,\nthe command will run with the same limits as the invoking user.\nThe one exception to this is the core dump file size, which is set by\n.Nm\nto 0 by default.\nDisabling core dumps by default makes it possible to avoid potential\nsecurity problems where the core file is treated as trusted input.\n.Pp\nResource limits may also be set in the\n.Em sudoers\nfile itself, in which case they override those set by the system.\nSee the\n.Em rlimit_as,\n.Em rlimit_core,\n.Em rlimit_cpu,\n.Em rlimit_data,\n.Em rlimit_fsize,\n.Em rlimit_locks,\n.Em rlimit_memlock,\n.Em rlimit_nofile,\n.Em rlimit_nproc,\n.Em rlimit_rss,\n.Em rlimit_stack\noptions described below.\nResource limits in\n.Nm\nmay be specified in one of the following formats:\n.Bl -tag -width 6n\n.It Dq value\nBoth the soft and hard resource limits are set to the same value.\nThe special value\n.Dq infinity\ncan be used to indicate that the value is unlimited.\n.It Dq soft,hard\nTwo comma-separated values.\nThe soft limit is set to the first value and the hard limit is set\nto the second.\nBoth values must either be enclosed in a set of double quotes,\nor the comma must be escaped with a backslash\n.Pq Ql \\e .\nThe special value\n.Dq infinity\nmay be used in place of either value.\n.It Dq default\nThe default resource limit for the user will be used.\nThis may be a user-specific value (see above) or the value of the\nresource limit when\n.Nm sudo\nwas invoked for systems that don't support per-user limits.\n.It Dq user\nThe invoking user's resource limits will be preserved when running\nthe command.\n.El\n.Pp\nFor example, to restore the historic core dump file size behavior,\na line like the following may be used.\n.sp\n.Dl Defaults rlimit_core=default\n.Pp\nResource limits in\n.Nm\nare only supported by version 1.8.7 or higher.\n.Ss Quick guide to EBNF\nEBNF is a concise and exact way of describing the grammar of a language.\nEach EBNF definition is made up of\n.Em production rules .\nFor example:\n.Bd -literal -offset 4n\nsymbol ::= definition | alternate1 | alternate2 ...\n.Ed\n.Pp\nEach\n.Em production rule\nreferences others and thus makes up a\ngrammar for the language.\nEBNF also contains the following\noperators, which many readers will recognize from regular\nexpressions.\nDo not, however, confuse them with\n.Dq wildcard\ncharacters, which have different meanings.\n.Bl -tag -width 4n\n.It \\&?\nMeans that the preceding symbol (or group of symbols) is optional.\nThat is, it may appear once or not at all.\n.It *\nMeans that the preceding symbol (or group of symbols) may appear\nzero or more times.\n.It +\nMeans that the preceding symbol (or group of symbols) may appear\none or more times.\n.El\n.Pp\nParentheses may be used to group symbols together.\nFor clarity,\nwe will use single quotes\n.Pq ''\nto designate what is a verbatim character string (as opposed to a symbol name).\n.Ss Aliases\nThere are four kinds of aliases:\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias\nand\n.Em Cmnd_Alias .\nBeginning with\n.Nm sudo\n1.9.0,\n.Em Cmd_Alias\nmay be used in place of\n.Em Cmnd_Alias\nif desired.\n.Bd -literal\nAlias ::= 'User_Alias'  User_Alias_Spec (':' User_Alias_Spec)* |\n          'Runas_Alias' Runas_Alias_Spec (':' Runas_Alias_Spec)* |\n          'Host_Alias'  Host_Alias_Spec (':' Host_Alias_Spec)* |\n          'Cmnd_Alias'  Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)* |\n          'Cmd_Alias'   Cmnd_Alias_Spec (':' Cmnd_Alias_Spec)*\n\nUser_Alias ::= NAME\n\nUser_Alias_Spec ::= User_Alias '=' User_List\n\nRunas_Alias ::= NAME\n\nRunas_Alias_Spec ::= Runas_Alias '=' Runas_List\n\nHost_Alias ::= NAME\n\nHost_Alias_Spec ::= Host_Alias '=' Host_List\n\nCmnd_Alias ::= NAME\n\nCmnd_Alias_Spec ::= Cmnd_Alias '=' Cmnd_List\n\nNAME ::= [A-Z]([A-Z][0-9]_)*\n.Ed\n.Pp\nEach\n.Em alias\ndefinition is of the form\n.Bd -literal\nAlias_Type NAME = item1, item2, ...\n.Ed\n.Pp\nwhere\n.Em Alias_Type\nis one of\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias ,\nor\n.Em Cmnd_Alias .\nA\n.Dv NAME\nis a string of uppercase letters, numbers,\nand underscore characters\n.Pq Ql _ .\nA\n.Dv NAME\n.Sy must\nstart with an\nuppercase letter.\nIt is possible to put several alias definitions\nof the same type on a single line, joined by a colon\n.Pq Ql :\\& .\nFor example:\n.Bd -literal\nAlias_Type NAME = item1, item2, item3 : NAME = item4, item5\n.Ed\n.Pp\nIt is a syntax error to redefine an existing\n.Em alias .\nIt is possible to use the same name for\n.Em aliases\nof different types, but this is not recommended.\n.Pp\nThe definitions of what constitutes a valid\n.Em alias\nmember follow.\n.Bd -literal\nUser_List ::= User |\n              User ',' User_List\n\nUser ::= '!'* user name |\n         '!'* #user-ID |\n         '!'* %group |\n         '!'* %#group-ID |\n         '!'* +netgroup |\n         '!'* %:nonunix_group |\n         '!'* %:#nonunix_gid |\n         '!'* User_Alias\n.Ed\n.Pp\nA\n.Em User_List\nis made up of one or more user names, user-IDs\n(prefixed with\n.Ql # ) ,\nsystem group names and IDs (prefixed with\n.Ql %\nand\n.Ql %#\nrespectively), netgroups (prefixed with\n.Ql + ) ,\nnon-Unix group names and IDs (prefixed with\n.Ql %:\nand\n.Ql %:#\nrespectively), and\n.Em User_Alias Ns es.\nEach list item may be prefixed with zero or more\n.Ql \\&!\noperators.\nAn odd number of\n.Ql \\&!\noperators negate the value of\nthe item; an even number just cancel each other out.\nUser netgroups are matched using the user and domain members only;\nthe host member is not used when matching.\n.Pp\nA\n.Em user name ,\n.Em user-ID ,\n.Em group ,\n.Em group-ID ,\n.Em netgroup ,\n.Em nonunix_group\nor\n.Em nonunix_gid\nmay be enclosed in double quotes to avoid the\nneed for escaping special characters.\nAlternately, special characters\nmay be specified in escaped hex mode, e.g., \\ex20 for space.\nWhen\nusing double quotes, any prefix characters must be included inside\nthe quotes.\n.Pp\nThe actual\n.Em nonunix_group\nand\n.Em nonunix_gid\nsyntax depends on\nthe underlying group provider plugin.\nFor instance, the QAS AD plugin supports the following formats:\n.Bl -bullet -width 1n\n.It\nGroup in the same domain: \"%:Group Name\"\n.It\nGroup in any domain: \"%:Group Name@FULLY.QUALIFIED.DOMAIN\"\n.It\nGroup SID: \"%:S-1-2-34-5678901234-5678901234-5678901234-567\"\n.El\n.Pp\nSee\n.Sx \"GROUP PROVIDER PLUGINS\"\nfor more information.\n.Pp\nQuotes around group names are optional.\nUnquoted strings must use a backslash\n.Pq Ql \\e\nto escape spaces and special characters.\nSee\n.Sx Other special characters and reserved words\nfor a list of\ncharacters that need to be escaped.\n.Bd -literal\nRunas_List ::= Runas_Member |\n               Runas_Member ',' Runas_List\n\nRunas_Member ::= '!'* user name |\n                 '!'* #user-ID |\n                 '!'* %group |\n                 '!'* %#group-ID |\n                 '!'* %:nonunix_group |\n                 '!'* %:#nonunix_gid |\n                 '!'* +netgroup |\n                 '!'* Runas_Alias |\n                 '!'* ALL\n.Ed\n.Pp\nA\n.Em Runas_List\nis similar to a\n.Em User_List\nexcept that instead\nof\n.Em User_Alias Ns es\nit can contain\n.Em Runas_Alias Ns es .\nUser names and groups are matched as strings.\nIn other words, two users (groups) with the same user (group) ID\nare considered to be distinct.\nIf you wish to match all user names with the same user-ID (e.g.,\n.Sy root\nand\n.Sy toor ) ,\nyou can use a user-ID instead of a name (#0 in the example given).\nThe user-ID or group-ID specified in a\n.Em Runas_Member\nneed not be listed in the password or group database.\n.Bd -literal\nHost_List ::= Host |\n              Host ',' Host_List\n\nHost ::= '!'* host name |\n         '!'* ip_addr |\n         '!'* network(/netmask)? |\n         '!'* +netgroup |\n         '!'* Host_Alias |\n         '!'* ALL\n.Ed\n.Pp\nA\n.Em Host_List\nis made up of one or more host names, IP addresses,\nnetwork numbers, netgroups (prefixed with\n.Ql + ) ,\nand other aliases.\nAgain, the value of an item may be negated with the\n.Ql \\&!\noperator.\nHost netgroups are matched using the host (both qualified and unqualified)\nand domain members only; the user member is not used when matching.\nIf you specify a network number without a netmask,\n.Nm sudo\nwill query each of the local host's network interfaces and,\nif the network number corresponds to one of the hosts's network\ninterfaces, will use the netmask of that interface.\nThe netmask may be specified either in standard IP address notation\n(e.g., 255.255.255.0 or ffff:ffff:ffff:ffff::),\nor CIDR notation (number of bits, e.g., 24 or 64).\nA host name may include shell-style wildcards (see the\n.Sx Wildcards\nsection below),\nbut unless the\n.Em hostname\ncommand on your machine returns the fully\nqualified host name, you'll need to use the\n.Em fqdn\nflag for wildcards to be useful.\n.Nm sudo\nonly inspects actual network interfaces; this means that IP address\n127.0.0.1 (localhost) will never match.\nAlso, the host name\n.Dq localhost\nwill only match if that is the actual host name, which is usually\nonly the case for non-networked systems.\n.Bd -literal\ndigest ::= [A-Fa-f0-9]+ |\n           [A-Za-z0-9\\e+/=]+\n\nDigest_Spec ::= \"sha224\" ':' digest |\n                \"sha256\" ':' digest |\n                \"sha384\" ':' digest |\n                \"sha512\" ':' digest\n\nDigest_List ::= Digest_Spec |\n                Digest_Spec ',' Digest_List\n\nCmnd_List ::= Cmnd |\n              Cmnd ',' Cmnd_List\n\ncommand name ::= regex |\n                 file name\n\ncommand ::= command name |\n            command name args |\n            command name regex |\n            command name '\"\"' |\n            ALL\n\nEdit_Spec ::= \"sudoedit\" file name+ |\n              \"sudoedit\" regex |\n              \"sudoedit\"\n\nList_Spec ::= \"list\"\n\nCmnd ::= Digest_List? '!'* command |\n         '!'* directory |\n         '!'* Edit_Spec |\n         '!'* List_Spec |\n         '!'* Cmnd_Alias\n.Ed\n.Pp\nA\n.Em Cmnd_List\nis a list of one or more commands, directories, or aliases.\nA command is a fully qualified file name, which may include\nshell-style wildcards (see the\n.Sx Wildcards\nsection below),\nor a regular expression that starts with\n.Ql ^\nand ends with\n.Ql $\n(see the\n.Sx Regular expressions\nsection below).\nA directory is a\nfully qualified path name ending in a\n.Ql / .\nWhen you specify a directory in a\n.Em Cmnd_List ,\nthe user will be able to run any file within that directory\n(but not in any sub-directories therein).\nIf no command line arguments are specified, the user may run the\ncommand with any arguments they choose.\nCommand line arguments can include wildcards or be a regular\nexpression that starts with\n.Ql ^\nand ends with\n.Ql $ .\nIf the command line arguments consist of\n.Ql \\&\"\" ,\nthe command may only be run with\n.Em no\narguments.\n.Pp\nIf a\n.Em Cmnd\nhas associated command line arguments, the arguments\nin the\n.Em Cmnd\nmust match those given by the user on the command line.\nIf the arguments in a\n.Em Cmnd\nbegin with the\n.Ql ^\ncharacter, they will be interpreted as a regular expression\nand matched accordingly.\nOtherwise, shell-style wildcards are used when matching.\nUnless a regular expression is specified, the following characters must\nbe escaped with a\n.Ql \\e\nif they are used in command arguments:\n.Ql ,\\& ,\n.Ql :\\& ,\n.Ql =\\& ,\n.Ql \\e .\nTo prevent arguments in a\n.Em Cmnd\nthat begin with a\n.Ql ^\ncharacter from being interpreted as a regular expression, the\n.Ql ^\nmust be escaped with a\n.Ql \\e .\n.Pp\nThere are two commands built into\n.Nm sudo\nitself:\n.Dq list\nand\n.Dq sudoedit .\nUnlike other commands, these two must be specified in the\n.Em sudoers\nfile\n.Em without\na leading path.\n.Pp\nThe\n.Dq list\nbuilt-in can be used to permit a user to list another user's privileges with\n.Nm sudo Ns 's\n.Fl U\noption.\nFor example,\n.Dq sudo -l -U otheruser .\nA user with the\n.Dq list\nprivilege is able to list another user's privileges even if they\ndon't have permission to run commands as that user.\nBy default, only root or a user with the ability to run any command as\neither root or the specified\n.Ar user\non the current host may use the\n.Fl U\noption.\nNo command line arguments may be specified with the\n.Dq list\nbuilt-in.\n.Pp\nThe\n.Dq sudoedit\nbuilt-in is used to permit a user to run\n.Nm sudo\nwith the\n.Fl e\noption (or as\n.Nm sudoedit ) .\nIt may take command line arguments just as a normal command does.\nUnlike other commands,\n.Dq sudoedit\nis built into\n.Nm sudo\nitself and must be specified in the\n.Em sudoers\nfile\n.Em without\na leading path.\nIf a leading path is present, for example\n.Pa /usr/bin/sudoedit ,\nthe path name will be silently converted to\n.Dq sudoedit .\nA fully-qualified path for\n.Nm sudoedit\nis treated as an error by\n.Nm visudo .\n.Pp\nA\n.Em command\nmay be preceded by a\n.Em Digest_List ,\na comma-separated list of one or more\n.Em Digest_Spec\nentries.\nIf a\n.Em Digest_List\nis present, the command will only match successfully if it can be verified\nusing one of the SHA-2 digests in the list.\nStarting with version 1.9.0, the\n.Sy ALL\nreserved word can be used in conjunction with a\n.Em Digest_List .\nThe following digest formats are supported: sha224, sha256, sha384, and sha512.\nThe string may be specified in either hex or base64 format\n(base64 is more compact).\nThere are several utilities capable of generating SHA-2 digests in hex\nformat such as openssl, shasum, sha224sum, sha256sum, sha384sum, sha512sum.\n.Pp\nFor example, using openssl:\n.Bd -literal\n$ openssl dgst -sha224 /bin/ls\nSHA224(/bin/ls)= 118187da8364d490b4a7debbf483004e8f3e053ec954309de2c41a25\n.Ed\n.Pp\nIt is also possible to use openssl to generate base64 output:\n.Bd -literal\n$ openssl dgst -binary -sha224 /bin/ls | openssl base64\nEYGH2oNk1JC0p9679IMATo8+BT7JVDCd4sQaJQ==\n.Ed\n.Pp\nWarning, if the user has write access to the command itself (directly or via a\n.Nm sudo\ncommand), it may be possible for the user to replace the command after the\ndigest check has been performed but before the command is executed.\nA similar race condition exists on systems that lack the\n.Xr fexecve 2\nsystem call when the directory in which the command is located\nis writable by the user.\nSee the description of the\n.Em fdexec\nsetting for more information on how\n.Nm sudo\nexecutes commands that have an associated digest.\n.Pp\nCommand digests are only supported by version 1.8.7 or higher.\n.Ss Defaults\nCertain configuration options may be changed from their default\nvalues at run-time via one or more\n.Em Default_Entry\nlines.\nThese may affect all users on any host, all users on a specific host, a\nspecific user, a specific command, or commands being run as a specific user.\nPer-command entries may not include command line arguments.\nIf you need to specify arguments, define a\n.Em Cmnd_Alias\nand reference\nthat instead.\n.Bd -literal\nDefault_Type ::= 'Defaults' |\n                 'Defaults' '@' Host_List |\n                 'Defaults' ':' User_List |\n                 'Defaults' '!' Cmnd_List |\n                 'Defaults' '>' Runas_List\n\nDefault_Entry ::= Default_Type Parameter_List\n\nParameter_List ::= Parameter |\n                   Parameter ',' Parameter_List\n\nParameter ::= Parameter '=' Value |\n              Parameter '+=' Value |\n              Parameter '-=' Value |\n              '!'* Parameter\n.Ed\n.Pp\nParameters may be\n.Sy flags ,\n.Sy integer\nvalues,\n.Sy strings ,\nor\n.Sy lists .\nFlags are implicitly boolean and can be turned off via the\n.Ql \\&!\noperator.\nSome integer, string and list parameters may also be\nused in a boolean context to disable them.\nValues may be enclosed\nin double quotes\n.Pq \\&\"\"\nwhen they contain multiple words.\nSpecial characters may be escaped with a backslash\n.Pq Ql \\e .\n.Pp\nTo include a literal backslash character in a command line argument\nyou must escape the backslash twice.\nFor example, to match\n.Ql \\en\nas part of a command line argument, you must use\n.Ql \\e\\e\\e\\en\nin the\n.Em sudoers\nfile.\nThis is due to there being two levels of escaping, one in the\n.Em sudoers\nparser itself and another when command line arguments are matched by the\n.Xr fnmatch 3\nor\n.Xr regexec 3\nfunction.\n.Pp\nLists have two additional assignment operators,\n.Ql +=\nand\n.Ql -= .\nThese operators are used to add to and delete from a list respectively.\nIt is not an error to use the\n.Ql -=\noperator to remove an element\nthat does not exist in a list.\n.Pp\nDefaults entries are parsed in the following order: global, host,\nuser, and runas Defaults first, then command defaults.\nIf there are multiple Defaults settings of the same type, the last\nmatching setting is used.\nThe following Defaults settings are parsed before all others since\nthey may affect subsequent entries:\n.Em fqdn ,\n.Em group_plugin ,\n.Em runas_default ,\n.Em sudoers_locale .\n.Pp\nSee\n.Sx SUDOERS OPTIONS\nfor a list of supported Defaults parameters.\n.Ss User specification\n.Bd -literal\nUser_Spec ::= User_List Host_List '=' Cmnd_Spec_List \\e\n              (':' Host_List '=' Cmnd_Spec_List)*\n\nCmnd_Spec_List ::= Cmnd_Spec |\n                   Cmnd_Spec ',' Cmnd_Spec_List\n\nCmnd_Spec ::= Runas_Spec? Option_Spec* (Tag_Spec ':')* Cmnd\n\nRunas_Spec ::= '(' Runas_List? (':' Runas_List)? ')'\n\n.ie \\n(SL \\{\\\n.ie \\n(PS Option_Spec ::= (SELinux_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (SELinux_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.el \\{\\\n.ie \\n(AA \\{\\\n.ie \\n(PS Option_Spec ::= (AppArmor_Spec | Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (AppArmor_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.el \\{\\\n.ie \\n(PS Option_Spec ::= (Solaris_Priv_Spec | Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.el Option_Spec ::= (Date_Spec | Timeout_Spec | Chdir_Spec | Chroot_Spec)\n.\\}\n.\\}\n\n.if \\n(SL \\{\\\nSELinux_Spec ::= ('ROLE=role' | 'TYPE=type')\n\n.\\}\n.if \\n(AA \\{\\\nAppArmor_Spec ::= 'APPARMOR_PROFILE=profile'\n\n.\\}\n.if \\n(PS \\{\\\nSolaris_Priv_Spec ::= ('PRIVS=privset' | 'LIMITPRIVS=privset')\n\n.\\}\nDate_Spec ::= ('NOTBEFORE=timestamp' | 'NOTAFTER=timestamp')\n\nTimeout_Spec ::= 'TIMEOUT=timeout'\n\nChdir_Spec ::= 'CWD=directory'\n\nChroot_Spec ::= 'CHROOT=directory'\n\nTag_Spec ::= ('EXEC' | 'NOEXEC' | 'FOLLOW' | 'NOFOLLOW' |\n              'LOG_INPUT' | 'NOLOG_INPUT' | 'LOG_OUTPUT' |\n              'NOLOG_OUTPUT' | 'MAIL' | 'NOMAIL' | 'INTERCEPT' |\n              'NOINTERCEPT' | 'PASSWD' | 'NOPASSWD' | 'SETENV' |\n              'NOSETENV')\n.Ed\n.Pp\nA\n.Sy user specification\ndetermines which commands a user may run\n(and as what user) on specified hosts.\nBy default, commands are run as\n.Sy @runas_default@\n(unless\n.Em runas_default\nhas been set to a different value)\nbut this can also be changed on a per-command basis.\n.Pp\nThe basic structure of a user specification is\n.Dq who where = (as_whom) what .\nLet's break that down into its constituent parts:\n.Ss Runas_Spec\nA\n.Em Runas_Spec\ndetermines the user and/or the group that a command\nmay be run as.\nA fully-specified\n.Em Runas_Spec\nconsists of two\n.Em Runas_List Ns s\n(as defined above) separated by a colon\n.Pq Ql :\\&\nand enclosed in a set of parentheses.\nThe first\n.Em Runas_List\nindicates which users the command may be run as via the\n.Fl u\noption.\nThe second defines a list of groups that may be specified via the\n.Fl g\noption (in addition to any of the target user's groups).\nIf both\n.Em Runas_List Ns s\nare specified, the command may be run with any combination of users\nand groups listed in their respective\n.Em Runas_List Ns s.\nIf only the first is specified, the command may be run as any user\nin the list and, optionally, with any group the target user belongs to.\nIf the first\n.Em Runas_List\nis empty but the\nsecond is specified, the command may be run as the invoking user\nwith the group set to any listed in the\n.Em Runas_List .\nIf both\n.Em Runas_List Ns s\nare empty, the command may only be run as the invoking user and the\ngroup, if specified, must be one that the invoking user is a member of.\nIf no\n.Em Runas_Spec\nis specified, the command may only be run as the\n.Em runas_default\nuser\n.Sy ( @runas_default@\nby default) and the group,\nif specified, must be one that the\n.Em runas_default\nuser is a member of.\n.Pp\nA\n.Em Runas_Spec\nsets the default for the commands that follow it.\nWhat this means is that for the entry:\n.Bd -literal\ndgb\tboulder = (operator) /bin/ls, /bin/kill, /usr/bin/lprm\n.Ed\n.Pp\nThe user\n.Sy dgb\nmay run\n.Pa /bin/ls ,\n.Pa /bin/kill ,\nand\n.Pa /usr/bin/lprm\non the host\n.No boulder Ns \\(em Ns but\nonly as\n.Sy operator .\nFor example:\n.Bd -literal\n$ sudo -u operator /bin/ls\n.Ed\n.Pp\nIt is also possible to override a\n.Em Runas_Spec\nlater on in an entry.\nIf we modify the entry like so:\n.Bd -literal\ndgb\tboulder = (operator) /bin/ls, (root) /bin/kill, /usr/bin/lprm\n.Ed\n.Pp\nThen user\n.Sy dgb\nis now allowed to run\n.Pa /bin/ls\nas\n.Sy operator ,\nbut\n.Pa /bin/kill\nand\n.Pa /usr/bin/lprm\nas\n.Sy root .\n.Pp\nWe can extend this to allow\n.Sy dgb\nto run\n.Pa /bin/ls\nwith either\nthe user or group set to\n.Sy operator :\n.Bd -literal\ndgb\tboulder = (operator : operator) /bin/ls, (root) /bin/kill,\\e\n\t/usr/bin/lprm\n.Ed\n.Pp\nWhile the group portion of the\n.Em Runas_Spec\npermits the\nuser to run as command with that group, it does not force the user\nto do so.\nIf no group is specified on the command line, the command\nwill run with the group listed in the target user's password database\nentry.\nThe following would all be permitted by the sudoers entry above:\n.Bd -literal\n$ sudo -u operator /bin/ls\n$ sudo -u operator -g operator /bin/ls\n$ sudo -g operator /bin/ls\n.Ed\n.Pp\nIn the following example, user\n.Sy tcm\nmay run commands that access\na modem device file with the dialer group.\n.Bd -literal\ntcm\tboulder = (:dialer) /usr/bin/tip, /usr/bin/cu,\\e\n\t/usr/local/bin/minicom\n.Ed\n.Pp\nIn this example only the group will be set, the command still runs as user\n.Sy tcm .\nFor example:\n.Bd -literal\n$ sudo -g dialer /usr/bin/cu\n.Ed\n.Pp\nMultiple users and groups may be present in a\n.Em Runas_Spec ,\nin which case the user may select any combination of users and groups via the\n.Fl u\nand\n.Fl g\noptions.\nIn this example:\n.Bd -literal\nalan\tALL = (root, bin : operator, system) ALL\n.Ed\n.Pp\nuser\n.Sy alan\nmay run any command as either user\n.Sy root\nor\n.Sy bin ,\noptionally setting the group to operator or system.\n.Ss Option_Spec\nA\n.Em Cmnd\nmay have zero or more options associated with it.\nOptions may consist of\n.if \\n(SL \\{\\\nSELinux roles and/or types,\n.\\}\n.if \\n(AA \\{\\\nAppArmor profiles,\n.\\}\n.if \\n(PS \\{\\\nSolaris privileges sets,\n.\\}\nstart and/or end dates and command timeouts.\nOnce an option is set for a\n.Em Cmnd ,\nsubsequent\n.Em Cmnd Ns s\nin the\n.Em Cmnd_Spec_List ,\ninherit that option unless it is overridden by another option.\nOption names are reserved words in\n.Em sudoers .\nThis means that none of the valid option names (see below) can be used\nwhen declaring an alias.\n.if \\n(SL \\{\\\n.Ss SELinux_Spec\nOn systems with SELinux support,\n.Em sudoers\nfile entries may optionally have an SELinux role and/or type associated\nwith a command.\nThis can be used to implement a form of role-based access control (RBAC).\nIf a role or\ntype is specified with the command it will override any default values\nspecified in\n.Em sudoers .\nA role or type specified on the command line,\nhowever, will supersede the values in\n.Em sudoers .\n.\\}\n.if \\n(AA \\{\\\n.Ss AppArmor_Spec\nOn systems supporting AppArmor,\n.Em sudoers\nfile entries may optionally specify an AppArmor profile that should be\nused to confine a command.\nIf an AppArmor profile is specified with the command, it will override\nany default values specified in\n.Em sudoers .\nAppropriate profile transition rules must be defined to support the\nprofile change specified for a user.\n.Pp\nAppArmor profiles can be specified in any way that complies with the\nrules of\n.Xr aa_change_profile 2 .\nFor instance, in the following\n.Em sudoers\nentry\n.Bd -literal\nalice\tALL = (root)\tAPPARMOR_PROFILE=my-profile\tALL\n.Ed\n.Pp\nthe user\n.Sy alice\nmay run any command as\n.Sy root\nunder confinement by the profile\n.Ql my-profile .\nYou can also stack profiles, or allow a user to run commands unconfined by\nany profile.\nFor example:\n.Bd -literal\nbob\tALL = (root)\tAPPARMOR_PROFILE=foo//&bar\t/usr/bin/vi\ncathy\tALL = (root)\tAPPARMOR_PROFILE=unconfined\t/bin/ls\n.Ed\n.Pp\nThese\n.Em sudoers\nentries allow user\n.Sy bob\nto run\n.Pa /usr/bin/vi\nas\n.Sy root\nunder the stacked profiles\n.Ql foo\nand\n.Ql bar ,\nand user\n.Sy cathy\nto run\n.Pa /bin/ls\nwithout any confinement at all.\n.\\}\n.if \\n(PS \\{\\\n.Ss Solaris_Priv_Spec\nOn Solaris systems,\n.Em sudoers\nfile entries may optionally specify Solaris privilege set and/or limit\nprivilege set associated with a command.\nIf privileges or limit privileges are specified with the command\nit will override any default values specified in\n.Em sudoers .\n.Pp\nA privilege set is a comma-separated list of privilege names.\nThe\n.Xr ppriv 1\ncommand can be used to list all privileges known to the system.\nFor example:\n.Bd -literal\n$ ppriv -l\n.Ed\n.Pp\nIn addition, there are several\n.Dq special\nprivilege strings:\n.Bl -tag -width \"basic\"\n.It none\nthe empty set\n.It all\nthe set of all privileges\n.It zone\nthe set of all privileges available in the current zone\n.It basic\nthe default set of privileges normal users are granted at login time\n.El\n.Pp\nPrivileges can be excluded from a set by prefixing the privilege\nname with either an\n.Ql \\&!\nor\n.Ql \\-\ncharacter.\n.\\}\n.Ss Date_Spec\n.Nm\nrules can be specified with a start and end date via the\n.Dv NOTBEFORE\nand\n.Dv NOTAFTER\nsettings.\nThe time stamp must be specified in\n.Dq Generalized Time\nas defined by RFC 4517.\nThe format is effectively\n.Ql yyyymmddHHMMSSZ\nwhere the minutes and seconds are optional.\nThe\n.Ql Z\nsuffix indicates that the time stamp is in Coordinated Universal Time (UTC).\nIt is also possible to specify a timezone offset from UTC in hours\nand minutes instead of a\n.Ql Z .\nFor example,\n.Ql -0500\nwould correspond to Eastern Standard time in the US.\nAs an extension, if no\n.Ql Z\nor timezone offset is specified, local time will be used.\n.Pp\nThe following are all valid time stamps:\n.Bd -literal -offset 4n\n20170214083000Z\n2017021408Z\n20160315220000-0500\n20151201235900\n.Ed\n.Ss Timeout_Spec\nA command may have a timeout associated with it.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nThe timeout may be specified in combinations of days, hours,\nminutes, and seconds with a single-letter case-insensitive suffix\nthat indicates the unit of time.\nFor example, a timeout of 7 days, 8 hours, 30 minutes, and\n10 seconds would be written as\n.Ql 7d8h30m10s .\nIf a number is specified without a unit, seconds are assumed.\nAny of the days, minutes, hours, or seconds may be omitted.\nThe order must be from largest to smallest unit and a unit\nmay not be specified more than once.\n.Pp\nThe following are all\n.Em valid\ntimeout values:\n.Ql 7d8h30m10s ,\n.Ql 14d ,\n.Ql 8h30m ,\n.Ql 600s ,\n.Ql 3600 .\nThe following are\n.Em invalid\ntimeout values:\n.Ql 12m2w1d ,\n.Ql 30s10m4h ,\n.Ql 1d2d3h .\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.Ss Chdir_Spec\nThe working directory that the command will be run in can be specified\nusing the\n.Dv CWD\nsetting.\nThe\n.Fa directory\nmust be a fully-qualified path name beginning with a\n.Sq /\nor\n.Sq ~\ncharacter, or the special value\n.Dq * .\nA value of\n.Dq *\nindicates that the user may specify the working directory by running\n.Nm sudo\nwith the\n.Fl D\noption.\nBy default, commands are run from the invoking user's current working\ndirectory, unless the\n.Fl i\noption is given.\nPath names of the form\n.Pa ~user/path/name\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.Ss Chroot_Spec\nThe root directory that the command will be run in can be specified\nusing the\n.Dv CHROOT\nsetting.\nThe\n.Fa directory\nmust be a fully-qualified path name beginning with a\n.Sq /\nor\n.Sq ~\ncharacter, or the special value\n.Dq * .\nA value of\n.Dq *\nindicates that the user may specify the root directory by running\n.Nm sudo\nwith the\n.Fl R\noption.\nThis setting can be used to run the command in a\n.Xr chroot 2\n.Dq sandbox\nsimilar to the\n.Xr chroot @mansectsu@\nutility.\nPath names of the form\n.Pa ~user/path/name\nare interpreted as being relative to the named user's home directory.\nIf the user name is omitted, the path will be relative to the runas\nuser's home directory.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.Ss Tag_Spec\nA command may have zero or more tags associated with it.\nThe following tag values are supported:\n.Dv EXEC ,\n.Dv NOEXEC ,\n.Dv FOLLOW ,\n.Dv NOFOLLOW ,\n.Dv LOG_INPUT ,\n.Dv NOLOG_INPUT ,\n.Dv LOG_OUTPUT ,\n.Dv NOLOG_OUTPUT ,\n.Dv MAIL ,\n.Dv NOMAIL ,\n.Dv INTERCEPT ,\n.Dv NOINTERCEPT ,\n.Dv PASSWD ,\n.Dv NOPASSWD ,\n.Dv SETENV ,\nand\n.Dv NOSETENV .\nOnce a tag is set on a\n.Em Cmnd ,\nsubsequent\n.Em Cmnd Ns s\nin the\n.Em Cmnd_Spec_List ,\ninherit the tag unless it is overridden by the opposite tag (in other words,\n.Dv PASSWD\noverrides\n.Dv NOPASSWD\nand\n.Dv NOEXEC\noverrides\n.Dv EXEC ) .\n.Bl -hang -width 0n\n.It Dv EXEC No and Dv NOEXEC\n.sp\nIf\n.Nm sudo\nhas been compiled with\n.Em noexec\nsupport and the underlying operating system supports it, the\n.Dv NOEXEC\ntag can be used to prevent a dynamically-linked executable from\nrunning further commands itself.\n.Pp\nIn the following example, user\n.Sy aaron\nmay run\n.Pa /usr/bin/more\nand\n.Pa /usr/bin/vi\nbut shell escapes will be disabled.\n.Bd -literal\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.Ed\n.Pp\nSee the\n.Sx Preventing shell escapes\nsection below for more details on how\n.Dv NOEXEC\nworks and whether or not it will work on your system.\n.It Dv FOLLOW No and Dv NOFOLLOW\n.sp\nStarting with version 1.8.15,\n.Nm sudoedit\nwill not open a file that is a symbolic link unless the\n.Em sudoedit_follow\nflag is enabled.\nThe\n.Dv FOLLOW\nand\n.Dv NOFOLLOW\ntags override the value of\n.Em sudoedit_follow\nand can be used to permit (or deny) the editing of symbolic links\non a per-command basis.\nThese tags are only effective for the\n.Em sudoedit\ncommand and are ignored for all other commands.\n.It Dv LOG_INPUT No and Dv NOLOG_INPUT\n.sp\nThese tags override the value of the\n.Em log_input\nflag on a per-command basis.\nFor more information, see\n.Sx \"I/O LOGGING\" .\n.It Dv LOG_OUTPUT No and Dv NOLOG_OUTPUT\n.sp\nThese tags override the value of the\n.Em log_output\nflag on a per-command basis.\nFor more information, see\n.Sx \"I/O LOGGING\" .\n.It Dv MAIL No and Dv NOMAIL\n.sp\nThese tags provide fine-grained control over whether\nmail will be sent when a user runs a command by\noverriding the value of the\n.Em mail_all_cmnds\nflag on a per-command basis.\nThey have no effect when\n.Nm sudo\nis run with the\n.Fl l\nor\n.Fl v\noptions.\nA\n.Dv NOMAIL\ntag will also override the\n.Em mail_always\nand\n.Em mail_no_perms\noptions.\nFor more information, see the descriptions of\n.Em mail_all_cmnds ,\n.Em mail_always ,\nand\n.Em mail_no_perms\nin the\n.Sx SUDOERS OPTIONS\nsection below.\n.It Dv PASSWD No and Dv NOPASSWD\n.sp\nBy default,\n.Nm sudo\nrequires that a user authenticate\nbefore running a command.\nThis behavior can be modified via the\n.Dv NOPASSWD\ntag.\nLike a\n.Em Runas_Spec ,\nthe\n.Dv NOPASSWD\ntag sets\na default for the commands that follow it in the\n.Em Cmnd_Spec_List .\nConversely, the\n.Dv PASSWD\ntag can be used to reverse things.\nFor example:\n.Bd -literal\nray\trushmore = NOPASSWD: /bin/kill, /bin/ls, /usr/bin/lprm\n.Ed\n.Pp\nwould allow the user\n.Sy ray\nto run\n.Pa /bin/kill ,\n.Pa /bin/ls ,\nand\n.Pa /usr/bin/lprm\nas\n.Sy @runas_default@\non the machine\n.Dq rushmore\nwithout authenticating himself.\nIf we only want\n.Sy ray\nto be able to\nrun\n.Pa /bin/kill\nwithout a password the entry would be:\n.Bd -literal\nray\trushmore = NOPASSWD: /bin/kill, PASSWD: /bin/ls, /usr/bin/lprm\n.Ed\n.Pp\nNote, however, that the\n.Dv PASSWD\ntag has no effect on users who are in the group specified by the\n.Em exempt_group\nsetting.\n.Pp\nBy default, if the\n.Dv NOPASSWD\ntag is applied to any of a user's entries for the current host,\nthe user will be able to run\n.Ql sudo -l\nwithout a password.\nAdditionally, a user may only run\n.Ql sudo -v\nwithout a password if all of the user's entries for the current\nhost have the\n.Dv NOPASSWD\ntag.\nThis behavior may be overridden via the\n.Em verifypw\nand\n.Em listpw\noptions.\n.It Dv SETENV No and Dv NOSETENV\n.sp\nThese tags override the value of the\n.Em setenv\nflag on a per-command basis.\nIf\n.Dv SETENV\nhas been set for a command, the user may disable the\n.Em env_reset\nflag from the command line via the\n.Fl E\noption.\nAdditionally, environment variables set on the command\nline are not subject to the restrictions imposed by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep .\nAs such, only trusted users should be allowed to set variables in this manner.\nIf the command matched is\n.Sy ALL ,\nthe\n.Dv SETENV\ntag is implied for that command; this default may be overridden by use of the\n.Dv NOSETENV\ntag.\n.It Dv INTERCEPT No and Dv NOINTERCEPT\n.sp\nIf\n.Nm sudo\nhas been compiled with\n.Em intercept\nsupport and the underlying operating system supports it, the\n.Dv INTERCEPT\ntag can be used to cause programs spawned by a command to be validated against\n.Em sudoers\nand logged just like they would be if run through\n.Nm sudo\ndirectly.\nThis is useful in conjunction with commands that allow shell escapes\nsuch as editors, shells, and paginators.\nThere is additional overhead due to the policy check that may add\nlatency when running commands such as shell scripts that execute a\nlarge number of sub-commands.\nFor interactive commands, such as a shell or editor,\nthe overhead is not usually noticeable.\n.Pp\nIn the following example, user\n.Sy chuck\nmay run any command on the machine\n.Dq research\nin intercept mode.\n.Bd -literal\nchuck\tresearch = INTERCEPT: ALL\n.Ed\n.Pp\nSee the\n.Sx Preventing shell escapes\nsection below for more details on how\n.Dv INTERCEPT\nworks and whether or not it will work on your system.\n.El\n.Ss Wildcards\n.Nm sudo\nallows shell-style\n.Em wildcards\n(aka meta or glob characters)\nto be used in host names, path names, and command line arguments in the\n.Em sudoers\nfile.\nWildcard matching is done via the\n.Xr glob 3\nand\n.Xr fnmatch 3\nfunctions as specified by\n.St -p1003.1 .\n.Bl -tag -width \"[!...]\"\n.It *\nMatches any set of zero or more characters (including white space).\n.It \\&?\nMatches any single character (including white space).\n.It [...]\nMatches any character in the specified range.\n.It [!...]\nMatches any character\n.Em not\nin the specified range.\n.It \\ex\nFor any character\n.Sq x ,\nevaluates to\n.Sq x .\nThis is used to escape special characters such as:\n.Ql * ,\n.Ql \\&? ,\n.Ql [\\& ,\nand\n.Ql ]\\& .\n.El\n.Pp\n.Bf -symbolic\nThese are not regular expressions.\n.Ef\nUnlike a regular expression there is no way to match one or more\ncharacters within a range.\n.Pp\nCharacter classes may be used if your system's\n.Xr glob 3\nand\n.Xr fnmatch 3\nfunctions support them.\nHowever, because the\n.Ql :\\&\ncharacter has special meaning in\n.Em sudoers ,\nit must be\nescaped.\nFor example:\n.Bd -literal -offset 4n\n/bin/ls [[\\e:\\&alpha\\e:\\&]]*\n.Ed\n.Pp\nWould match any file name beginning with a letter.\n.Pp\nA forward slash\n.Pq Ql /\nwill\n.Em not\nbe matched by\nwildcards used in the file name portion of the command.\nThis is to make a path like:\n.Bd -literal -offset 4n\n/usr/bin/*\n.Ed\n.Pp\nmatch\n.Pa /usr/bin/who\nbut not\n.Pa /usr/bin/X11/xterm .\n.Pp\nWhen matching the command line arguments, however, a slash\n.Em does\nget matched by wildcards since command line arguments may contain\narbitrary strings and not just path names.\n.Pp\n.Bf -symbolic\nWildcards in command line arguments should be used with care.\n.Ef\n.br\nWildcards can match any character, including white space.\nIn most cases, it is safer to use a regular expression to match\ncommand line arguments.\nFor more information, see\n.Sx Wildcards in command arguments\nbelow.\n.Ss Exceptions to wildcard rules\nThe following exceptions apply to the above rules:\n.Bl -tag -width \"sudoedit\"\n.It \\&\"\"\nIf the empty string\n.Ql \\&\"\"\nis the only command line argument in the\n.Em sudoers\nfile entry it means that command is not allowed to be run with\n.Em any\narguments.\n.It sudoedit\nCommand line arguments to the\n.Em sudoedit\nbuilt-in command should always be path names, so a forward slash\n.Pq Ql /\nwill not be matched by a wildcard.\n.El\n.Ss Regular expressions\nStarting with version 1.9.10, it is possible to use\nregular expressions for path names and command line arguments.\nRegular expressions are more expressive than shell-style\n.Em wildcards\nand are usually safer because they provide a greater degree of\ncontrol when matching.\nThe type of regular expressions supported by\n.Nm\nare POSIX extended regular expressions, similar to those used by the\n.Xr egrep 1\nutility.\nThey are usually documented in the\n.Xr regex @mansectmisc@\nor\n.Xr re_format @mansectmisc@\nmanual, depending on the system.\nAs an extension, if the regular expression begins with\n.Dq (?i) ,\nit will be matched in a case-insensitive manner.\n.Pp\nIn\n.Em sudoers ,\nregular expressions must start with a\n.Ql ^\ncharacter and end with a\n.Ql $ .\nThis makes it explicit what is, or is not, a regular expression.\nEither the path name, the command line arguments or both may\nbe regular expressions.\nBecause the path name and arguments are matched separately, it is\neven possible to use wildcards for the path name and regular\nexpressions for the arguments.\nIt is not possible to use a single regular expression to match\nboth the command and its arguments.\nRegular expressions in\n.Em sudoers\nare limited to 1024 characters.\n.Pp\nThere is no need to escape\n.Em sudoers\nspecial characters in a regular expression other than the pound sign\n.Pq Ql # .\n.Pp\nIn the following example, user\n.Sy john\ncan run the\n.Xr passwd 1\ncommand as\n.Sy @runas_default@\non any host but is not allowed to change\n.Sy root Ns No 's\npassword.\nThis kind of rule is impossible to express safely using wildcards.\n.Bd -literal -offset 4n\njohn\tALL = /usr/bin/passwd ^[a-zA-Z0-9_]+$,\\e\n              !/usr/bin/passwd root\n.Ed\n.Pp\nIt is also possible to use a regular expression in conjunction with\n.Nm sudoedit\nrules.\nThe following rule would give user bob the ability to edit the\n.Pa /etc/motd ,\n.Pa /etc/issue ,\nand\n.Pa /etc/hosts\nfiles only.\n.Bd -literal -offset 4n\nbob    ALL = sudoedit ^/etc/(motd|issue|hosts)$\n.Ed\n.Pp\nRegular expressions may also be used to match the command itself.\nIn this example, a regular expression is used to allow user\n.Sy sid\nto run the\n.Pa /usr/sbin/groupadd ,\n.Pa /usr/sbin/groupmod ,\n.Pa /usr/sbin/groupdel ,\n.Pa /usr/sbin/useradd ,\n.Pa /usr/sbin/usermod ,\nand\n.Pa /usr/sbin/userdel\ncommands as\n.Sy @runas_default@ .\n.Bd -literal -offset 4n\nsid    ALL = ^/usr/sbin/(group|user)(add|mod|del)$\n.Ed\n.Pp\nOne disadvantage of using a regular expression to match the command\nname is that it is not possible to match relative paths such as\n.Pa ./useradd\nor\n.Pa ../sbin/useradd .\nThis has security implications when a regular expression is used\nfor the command name in conjunction with the negation operator,\n.Ql !\\& ,\nas such rules can be trivially bypassed.\nBecause of this, using a negated regular expression for the command name is\n.Sy strongly discouraged .\nThis does not apply to negated commands that only use a regular\nexpression to match the command arguments.\nSee\n.Sx Regular expressions in command names\nbelow for more information.\n.Ss Including other files from within sudoers\nIt is possible to include other\n.Em sudoers\nfiles from within the\n.Em sudoers\nfile currently being parsed using the\n.Em @include\nand\n.Em @includedir\ndirectives.\nFor compatibility with sudo versions prior to 1.9.1,\n.Em #include\nand\n.Em #includedir\nare also accepted.\n.Pp\nAn include file can be used, for example, to keep a site-wide\n.Em sudoers\nfile in addition to a local, per-machine file.\nFor the sake of this example the site-wide\n.Em sudoers\nfile will be\n.Pa /etc/sudoers\nand the per-machine one will be\n.Pa /etc/sudoers.local .\nTo include\n.Pa /etc/sudoers.local\nfrom within\n.Pa /etc/sudoers\none would use the following line in\n.Pa /etc/sudoers :\n.Bd -literal -offset 4n\n@include /etc/sudoers.local\n.Ed\n.Pp\nWhen\n.Nm sudo\nreaches this line it will suspend processing of the current file\n.Pq Pa /etc/sudoers\nand switch to\n.Pa /etc/sudoers.local .\nUpon reaching the end of\n.Pa /etc/sudoers.local ,\nthe rest of\n.Pa /etc/sudoers\nwill be processed.\nFiles that are included may themselves include other files.\nA hard limit of 128 nested include files is enforced to prevent include\nfile loops.\n.Pp\nStarting with version 1.9.1, the path to the include file may contain\nwhite space if it is escaped with a backslash\n.Pq Ql \\e .\nAlternately, the entire path may be enclosed in double quotes\n.Pq \\&\"\" ,\nin which case no escaping is necessary.\nTo include a literal backslash in the path,\n.Ql \\e\\e\nshould be used.\n.Pp\nIf the path to the include file is not fully-qualified (does not\nbegin with a\n.Ql / ) ,\nit must be located in the same directory as the sudoers file it was\nincluded from.\nFor example, if\n.Pa /etc/sudoers\ncontains the line:\n.Bd -literal -offset 4n\n@include sudoers.local\n.Ed\n.Pp\nthe file that will be included is\n.Pa /etc/sudoers.local .\n.Pp\nThe file name may also include the\n.Ql %h\nescape, signifying the short form of the host name.\nIn other words, if the machine's host name is\n.Dq xerxes ,\nthen\n.Bd -literal -offset 4n\n@include /etc/sudoers.%h\n.Ed\n.Pp\nwill cause\n.Nm sudo\nto include the file\n.Pa /etc/sudoers.xerxes .\n.Pp\nThe\n.Em @includedir\ndirective can be used to create a\n.Pa sudoers.d\ndirectory that the system package manager can drop\n.Em sudoers\nfile rules into as part of package installation.\nFor example, given:\n.Bd -literal -offset 4n\n@includedir /etc/sudoers.d\n.Ed\n.Pp\n.Nm sudo\nwill suspend processing of the current file and read each file in\n.Pa /etc/sudoers.d ,\nskipping file names that end in\n.Ql ~\nor contain a\n.Ql .\\&\ncharacter to avoid causing problems with package manager or editor\ntemporary/backup files.\n.Pp\nFiles are parsed in sorted lexical order.\nThat is,\n.Pa /etc/sudoers.d/01_first\nwill be parsed before\n.Pa /etc/sudoers.d/10_second .\nBe aware that because the sorting is lexical, not numeric,\n.Pa /etc/sudoers.d/1_whoops\nwould be loaded\n.Em after\n.Pa /etc/sudoers.d/10_second .\nUsing a consistent number of leading zeroes in the file names can be used\nto avoid such problems.\nAfter parsing the files in the directory, control returns to the\nfile that contained the\n.Em @includedir\ndirective.\n.Pp\nUnlike files included via\n.Em @include ,\n.Nm visudo\nwill not edit the files in a\n.Em @includedir\ndirectory unless one of them contains a syntax error.\nIt is still possible to run\n.Nm visudo\nwith the\n.Fl f\nflag to edit the files directly, but this will not catch the\nredefinition of an\n.Em alias\nthat is also present in a different file.\n.Ss Other special characters and reserved words\nThe pound sign\n.Pq Ql #\nis used to indicate a comment (unless it is part of a #include\ndirective or unless it occurs in the context of a user name and is\nfollowed by one or more digits, in which case it is treated as a\nuser-ID).\nBoth the comment character and any text after it, up to the end of\nthe line, are ignored.\n.Pp\nThe reserved word\n.Sy ALL\nis a built-in\n.Em alias\nthat always causes a match to succeed.\nIt can be used wherever one might otherwise use a\n.Em Cmnd_Alias ,\n.Em User_Alias ,\n.Em Runas_Alias ,\nor\n.Em Host_Alias .\nAttempting to define an\n.Em alias\nnamed\n.Sy ALL\nwill result in a syntax error.\nUsing\n.Sy ALL\ncan be dangerous since in a command context, it allows the user to run\n.Em any\ncommand on the system.\n.Pp\nThe following option names permitted in an\n.Em Option_Spec\nare also considered reserved words:\n.Dv CHROOT ,\n.if \\n(PS \\{\\\n.Dv PRIVS ,\n.Dv LIMITPRIVS ,\n.\\}\n.if \\n(SL \\{\\\n.Dv ROLE ,\n.Dv TYPE ,\n.\\}\n.Dv TIMEOUT ,\n.Dv CWD ,\n.Dv NOTBEFORE\nand\n.Dv NOTAFTER .\nAttempting to define an\n.Em alias\nwith the same name as one of the options will result in a syntax error.\n.Pp\nAn exclamation point\n.Pq Ql \\&!\ncan be used as a logical\n.Em not\noperator in a list or\n.Em alias\nas well as in front of a\n.Em Cmnd .\nThis allows one to exclude certain values.\nFor the\n.Ql \\&!\noperator to be effective, there must be something for it to exclude.\nFor example, to match all users except for\n.Sy root\none would use:\n.Bd -literal -offset 4n\nALL, !root\n.Ed\n.Pp\nIf the\n.Sy ALL ,\nis omitted, as in:\n.Bd -literal -offset 4n\n!root\n.Ed\n.Pp\nit would explicitly deny\n.Sy root\nbut not match any other users.\nThis is different from a true\n.Dq negation\noperator.\n.Pp\nNote, however, that using a\n.Ql \\&!\nin conjunction with the built-in\n.Sy ALL\nalias to allow a user to run\n.Dq all but a few\ncommands rarely works as intended (see\n.Sx SECURITY NOTES\nbelow).\n.Pp\nLong lines can be continued with a backslash\n.Pq Ql \\e\nas the last character on the line.\n.Pp\nWhite space between elements in a list as well as special syntactic\ncharacters in a\n.Em User Specification\n.Po\n.Ql =\\& ,\n.Ql :\\& ,\n.Ql (\\& ,\n.Ql )\\&\n.Pc\nis optional.\n.Pp\nThe following characters must be escaped with a backslash\n.Pq Ql \\e\nwhen used as part of a word (e.g., a user name or host name):\n.Ql \\&! ,\n.Ql =\\& ,\n.Ql :\\& ,\n.Ql ,\\& ,\n.Ql (\\& ,\n.Ql )\\& ,\n.Ql \\e .\n.Sh SUDOERS OPTIONS\n.Nm sudo Ns 's\nbehavior can be modified by\n.Em Default_Entry\nlines, as explained earlier.\nA list of all supported Defaults parameters, grouped by type, are listed below.\n.Pp\n.Sy Boolean Flags :\n.Bl -tag -width 16n\n.It always_query_group_plugin\nIf a\n.Em group_plugin\nis configured, use it to resolve groups of the form\n.Ql %group\nas long as there is not also a system group of the same name.\nNormally, only groups of the form\n.Ql %:group\nare passed to the\n.Em group_plugin .\nThis flag is\n.Em off\nby default.\n.It always_set_home\nIf enabled,\n.Nm sudo\nwill set the\n.Ev HOME\nenvironment variable to the home directory of the target user\n(which is the\n.Em runas_default\nuser unless the\n.Fl u\noption is used).\nThis flag is largely obsolete and has no effect unless the\n.Em env_reset\nflag has been disabled or\n.Ev HOME\nis present in the\n.Em env_keep\nlist, both of which are strongly discouraged.\nThis flag is\n.Em off\nby default.\n.It authenticate\nIf set, users must authenticate themselves via a password (or other\nmeans of authentication) before they may run commands.\nThis default may be overridden via the\n.Dv PASSWD\nand\n.Dv NOPASSWD\ntags.\nThis flag is\n.Em on\nby default.\n.It case_insensitive_group\nIf enabled, group names in\n.Em sudoers\nwill be matched in a case insensitive manner.\nThis may be necessary when users are stored in LDAP or AD.\nThis flag is\n.Em on\nby default.\n.It case_insensitive_user\nIf enabled, user names in\n.Em sudoers\nwill be matched in a case insensitive manner.\nThis may be necessary when groups are stored in LDAP or AD.\nThis flag is\n.Em on\nby default.\n.It closefrom_override\nIf set, the user may use the\n.Fl C\noption which overrides the default starting point at which\n.Nm sudo\nbegins closing open file descriptors.\nThis flag is\n.Em off\nby default.\n.It compress_io\nIf set, and\n.Nm sudo\nis configured to log a command's input or output,\nthe I/O logs will be compressed using\n.Sy zlib .\nThis flag is\n.Em on\nby default when\n.Nm sudo\nis compiled with\n.Sy zlib\nsupport.\n.It exec_background\nBy default,\n.Nm sudo\nruns a command as the foreground process as long as\n.Nm sudo\nitself is running in the foreground.\nWhen the\n.Em exec_background\nflag is enabled and the command is being run in a pseudo-terminal\n(due to I/O logging or the\n.Em use_pty\nflag), the command will be run as a background process.\nAttempts to read from the controlling terminal (or to change terminal\nsettings) will result in the command being suspended with the\n.Dv SIGTTIN\nsignal (or\n.Dv SIGTTOU\nin the case of terminal settings).\nIf this happens when\n.Nm sudo\nis a foreground process, the command will be granted the controlling terminal\nand resumed in the foreground with no user intervention required.\nThe advantage of initially running the command in the background is that\n.Nm sudo\nneed not read from the terminal unless the command explicitly requests it.\nOtherwise, any terminal input must be passed to the command, whether it\nhas required it or not (the kernel buffers terminals so it is not possible\nto tell whether the command really wants the input).\nThis is different from historic\n.Em sudo\nbehavior or when the command is not being run in a pseudo-terminal.\n.Pp\nFor this to work seamlessly, the operating system must support the\nautomatic restarting of system calls.\nUnfortunately, not all operating systems do this by default,\nand even those that do may have bugs.\nFor example, macOS fails to restart the\n.Xr tcgetattr 3\nand\n.Xr tcsetattr 3\nfunctions (this is a bug in macOS).\nFurthermore, because this behavior depends on the command stopping with the\n.Dv SIGTTIN\nor\n.Dv SIGTTOU\nsignals, programs that catch these signals and suspend themselves\nwith a different signal (usually\n.Dv SIGTOP )\nwill not be automatically foregrounded.\nSome versions of the linux\n.Xr su 1\ncommand behave this way.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\nIt has no effect unless I/O logging is enabled or the\n.Em use_pty\nflag is enabled.\n.It env_editor\nIf set,\n.Nm visudo\nwill use the value of the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables before falling back on the default editor list.\n.Nm visudo\nis typically run as\n.Sy root\nso this flag may allow a user with\n.Nm visudo\nprivileges to run arbitrary commands as\n.Sy root\nwithout logging.\nAn alternative is to place a colon-separated list of\n.Dq safe\neditors int the\n.Em editor\nsetting.\n.Nm visudo\nwill then only use\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nif they match a value specified in\n.Em editor .\nIf the\n.Em env_reset\nflag is enabled, the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nand/or\n.Ev EDITOR\nenvironment variables must be present in the\n.Em env_keep\nlist for the\n.Em env_editor\nflag to function when\n.Nm visudo\nis invoked via\n.Nm sudo .\nThis flag is\n.Em @env_editor@\nby default.\n.It env_reset\nIf set,\n.Nm sudo\nwill run the command in a minimal environment containing the\n.Ev TERM ,\n.Ev PATH ,\n.Ev HOME ,\n.Ev MAIL ,\n.Ev SHELL ,\n.Ev LOGNAME ,\n.Ev USER\nand\n.Ev SUDO_*\nvariables.\nAny variables in the caller's environment or in the file specified\nby the\n.Em restricted_env_file\nsetting that match the\n.Em env_keep\nand\n.Em env_check\nlists are then added, followed by any variables present in the file\nspecified by the\n.Em env_file\nsetting (if any).\nThe contents of the\n.Em env_keep\nand\n.Em env_check\nlists, as modified by global Defaults parameters in\n.Em sudoers ,\nare displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nIf the\n.Em secure_path\nsetting is enabled, its value will be used for the\n.Ev PATH\nenvironment variable.\nThis flag is\n.Em @env_reset@\nby default.\n.It fast_glob\nNormally,\n.Nm sudo\nuses the\n.Xr glob 3\nfunction to do shell-style globbing when matching path names.\nHowever, since it accesses the file system,\n.Xr glob 3\ncan take a long time to complete for some patterns, especially\nwhen the pattern references a network file system that is mounted\non demand (auto mounted).\nThe\n.Em fast_glob\nflag causes\n.Nm sudo\nto use the\n.Xr fnmatch 3\nfunction, which does not access the file system to do its matching.\nThe disadvantage of\n.Em fast_glob\nis that it is unable to match relative paths such as\n.Pa ./ls\nor\n.Pa ../bin/ls .\nThis has security implications when path names that include globbing\ncharacters are used with the negation operator,\n.Ql !\\& ,\nas such rules can be trivially bypassed.\nAs such, this flag should not be used when the\n.Em sudoers\nfile contains rules that contain negated path names which include globbing\ncharacters.\nThis flag is\n.Em off\nby default.\n.It log_passwords\nMost programs that require a user's password will disable echo before\nreading the password to avoid displaying the plaintext password on\nthe screen.\nHowever, if terminal input is being logged (see\n.Sx \"I/O LOGGING\" ) ,\nthe password will still be present in the I/O log.\nIf the\n.Em log_passwords\noption is disabled,\n.Nm\nwill attempt to prevent passwords from being logged.\nIt does this by using the regular expressions in\n.Em passprompt_regex\nto match a password prompt in the terminal output buffer.\nWhen a match is found, input characters in the I/O log will be replaced with\n.Ql *\nuntil either a line feed or carriage return is found in the terminal input\nor a new terminal output buffer is received.\nIf, however, a program displays characters as the user types\n(such as\n.Nm sudo\nwhen\n.Em pwfeedback\nis set), only the\nfirst character of the password will be replaced in the I/O log.\nThis option has no effect unless\n.Em log_input\nor\n.Em log_ttyin\nare also set.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.It fqdn\nSet this flag if you want to put fully qualified host names in the\n.Em sudoers\nfile when the local host name (as returned by the\n.Ql hostname\ncommand) does not contain the domain name.\nIn other words, instead of myhost you would use myhost.mydomain.edu.\nYou may still use the short form if you wish (and even mix the two).\nThis flag is only effective when the\n.Dq canonical\nhost name, as returned by the\n.Xr getaddrinfo 3\nor\n.Xr gethostbyname 3\nfunction, is a fully-qualified domain name.\nThis is usually the case when the system is configured to use DNS\nfor host name resolution.\n.Pp\nIf the system is configured to use the\n.Pa /etc/hosts\nfile in preference to DNS, the\n.Dq canonical\nhost name may not be fully-qualified.\nThe order that sources are queried for host name resolution\nis usually specified in the\n.Pa @nsswitch_conf@ ,\n.Pa @netsvc_conf@ ,\n.Pa /etc/host.conf ,\nor, in some cases,\n.Pa /etc/resolv.conf\nfile.\nIn the\n.Pa /etc/hosts\nfile, the first host name of the entry is considered to be the\n.Dq canonical\nname; subsequent names are aliases that are not used by\n.Nm .\nFor example, the following hosts file line for the machine\n.Dq xyzzy\nhas the fully-qualified domain name as the\n.Dq canonical\nhost name, and the short version as an alias.\n.sp\n.Dl 192.168.1.1 xyzzy.sudo.ws xyzzy\n.sp\nIf the machine's hosts file entry is not formatted properly, the\n.Em fqdn\nflag will not be effective if it is queried before DNS.\n.Pp\nBeware that when using DNS for host name resolution, turning on\n.Em fqdn\nrequires\n.Nm\nto make DNS lookups which renders\n.Nm sudo\nunusable if DNS stops working (for example if the machine is disconnected\nfrom the network).\nJust like with the hosts file, you must use the\n.Dq canonical\nname as DNS knows it.\nThat is, you may not use a host alias (CNAME entry) due to performance\nissues and the fact that there is no way to get all aliases from DNS.\n.Pp\nThis flag is\n.Em @fqdn@\nby default.\n.It ignore_audit_errors\nAllow commands to be run even if\n.Nm\ncannot write to the audit log.\nIf enabled, an audit log write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the audit event is successfully\nwritten.\nThis flag is only effective on systems for which\n.Nm\nsupports audit logging, including\n.Fx ,\nLinux, macOS, and Solaris.\nThis flag is\n.Em on\nby default.\n.It ignore_dot\nIf set,\n.Nm sudo\nwill ignore \".\" or \"\" (both denoting the current directory) in the\n.Ev PATH\nenvironment variable; the\n.Ev PATH\nitself is not modified.\nThis flag is\n.Em @ignore_dot@\nby default.\n.It ignore_iolog_errors\nAllow commands to be run even if\n.Nm\ncannot write to the I/O log (local or remote).\nIf enabled, an I/O log write failure is not treated as a fatal error.\nIf disabled, the command will be terminated if the I/O log cannot be written to.\nThis flag is\n.Em off\nby default.\n.It ignore_logfile_errors\nAllow commands to be run even if\n.Nm\ncannot write to the log file.\nIf enabled, a log file write failure is not treated as a fatal error.\nIf disabled, a command may only be run after the log file entry is successfully\nwritten.\nThis flag only has an effect when\n.Nm\nis configured to use file-based logging via the\n.Em logfile\nsetting.\nThis flag is\n.Em on\nby default.\n.It ignore_local_sudoers\nIf set via LDAP, parsing of\n.Pa @sysconfdir@/sudoers\nwill be skipped.\nThis is intended for sites that wish to prevent the usage of local\nsudoers files so that only LDAP is used.\nThis thwarts the efforts of rogue operators who would attempt to add roles to\n.Pa @sysconfdir@/sudoers .\nWhen this flag is enabled,\n.Pa @sysconfdir@/sudoers\ndoes not even need to exist.\nSince this flag tells\n.Nm sudo\nhow to behave when no specific LDAP entries have been matched, this\nsudoOption is only meaningful for the\n.Ql cn=defaults\nsection.\nThis flag is\n.Em off\nby default.\n.It ignore_unknown_defaults\nIf set,\n.Nm sudo\nwill not produce a warning if it encounters an unknown Defaults entry\nin the\n.Em sudoers\nfile or an unknown sudoOption in LDAP.\nThis flag is\n.Em off\nby default.\n.It insults\nIf set,\n.Nm sudo\nwill insult users when they enter an incorrect password.\nThis flag is\n.Em @insults@\nby default.\n.It log_allowed\nIf set,\n.Nm\nwill log commands allowed by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.29 or higher.\n.It log_denied\nIf set,\n.Nm\nwill log commands denied by the policy to the system audit log\n(where supported) as well as to syslog and/or a log file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.29 or higher.\n.It log_exit_status\nIf set,\n.Nm\nwill log the exit value of commands that are run to syslog and/or a log file.\nIf a command was terminated by a signal, the signal name is logged as well.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It log_host\nIf set, the host name will be included in log entries written to\nthe file configured by the\n.Em logfile\nsetting.\nThis flag is\n.Em off\nby default.\n.It log_input\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal (if\n.Nm sudo\nwas run from a terminal) and log all user input.\nIf the standard input is not connected to the user's terminal, due\nto I/O redirection or because the command is part of a pipeline,\nthat input is also logged.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\nThis flag is\n.Em off\nby default.\n.It log_output\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal (if\n.Nm sudo\nwas run from a terminal) and log all output that is sent to the\nuser's terminal, the standard output or the standard error.\nIf the standard output or standard error is not connected to the\nuser's terminal, due to I/O redirection or because the command is\npart of a pipeline, that output is also logged.\nFor more information about I/O logging, see the\n.Sx \"I/O LOGGING\"\nsection.\nThis flag is\n.Em off\nby default.\n.It log_server_keepalive\nIf set,\n.Nm sudo\nwill enable the TCP keepalive socket option on the connection to the log server.\nThis enables the periodic transmission of keepalive messages to the server.\nIf the server does not respond to a message, the connection will\nbe closed and the running command will be terminated unless the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_verify\nIf set, the server certificate received during the TLS handshake\nmust be valid and it must contain either the server name (from\n.Em log_servers )\nor its IP address.\nIf either of these conditions is not met, the TLS handshake will fail.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_stderr\nIf set,\n.Nm sudo\nwill log the standard error if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\n.It log_stdin\nIf set,\n.Nm sudo\nwill log the standard input if it is not connected to the user's terminal.\nThis can be used to log input from a pipe or redirected from a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag is set.\n.It log_stdout\nIf set,\n.Nm sudo\nwill log the standard output if it is not connected to the user's terminal.\nThis can be used to log output to a pipe or redirected to a file.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\n.It log_subcmds\nIf set,\n.Nm\nwill log when a command spawns a child process and executes a program\nusing the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nor\n.Xr system 3\nlibrary functions.\nFor example, if a shell is run by\n.Nm sudo ,\nthe individual commands run via the shell will be logged.\nThis flag is\n.Em off\nby default.\n.Pp\nThe\n.Em log_subcmds\nflag uses the same underlying mechanism as the\n.Em intercept\nsetting.\nSee\n.Sx Preventing shell escapes\nfor more information on what systems support this option and its limitations.\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\n.Xr seccomp 2\nfilter mode.\n.It log_ttyin\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal and log user keystrokes\nsent to the user's terminal, if one is present.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\n.Xr ssh 1 ,\nthis flag will have no effect.\n.It log_ttyout\nIf set,\n.Nm sudo\nwill run the command in a pseudo-terminal and log all output displayed\non the user's terminal, if one is present.\nThis flag is\n.Em off\nby default but is enabled when either the\n.Em log_output\nflag or the\n.Dv LOG_OUTPUT\ncommand tag is set.\nIf no terminal is present, for example when running a remote command using\n.Xr ssh 1 ,\nthis flag will have no effect.\n.It log_year\nIf set, the four-digit year will be logged in the (non-syslog)\n.Nm sudo\nlog file.\nThis flag is\n.Em off\nby default.\n.It long_otp_prompt\nWhen validating with a One Time Password (OTP) scheme such as\n.Sy S/Key\nor\n.Sy OPIE ,\na two-line prompt is used to make it easier\nto cut and paste the challenge to a local window.\nIt's not as pretty as the default but some people find it more convenient.\nThis flag is\n.Em @long_otp_prompt@\nby default.\n.It mail_all_cmnds\nSend mail to the\n.Em mailto\nuser every time a user attempts to run a command via\n.Nm sudo\n(this includes\n.Nm sudoedit ) .\nNo mail will be sent if the user runs\n.Nm sudo\nwith the\n.Fl l\nor\n.Fl v\noption unless there is an authentication error and the\n.Em mail_badpass\nflag is also set.\nThis flag is\n.Em off\nby default.\n.It mail_always\nSend mail to the\n.Em mailto\nuser every time a user runs\n.Nm sudo .\nThis flag is\n.Em off\nby default.\n.It mail_badpass\nSend mail to the\n.Em mailto\nuser if the user running\n.Nm sudo\ndoes not enter the correct password.\nIf the command the user is attempting to run is not permitted by\n.Nm\nand one of the\n.Em mail_all_cmnds ,\n.Em mail_always ,\n.Em mail_no_host ,\n.Em mail_no_perms\nor\n.Em mail_no_user\nflags are set, this flag will have no effect.\nThis flag is\n.Em off\nby default.\n.It mail_no_host\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user exists in the\n.Em sudoers\nfile, but is not allowed to run commands on the current host.\nThis flag is\n.Em @mail_no_host@\nby default.\n.It mail_no_perms\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user is allowed to use\n.Nm sudo\nbut the command they are trying is not listed in their\n.Em sudoers\nfile entry or is explicitly denied.\nThis flag is\n.Em @mail_no_perms@\nby default.\n.It mail_no_user\nIf set, mail will be sent to the\n.Em mailto\nuser if the invoking user is not in the\n.Em sudoers\nfile.\nThis flag is\n.Em @mail_no_user@\nby default.\n.It match_group_by_gid\nBy default,\n.Nm\nwill look up each group the user is a member of by group-ID to\ndetermine the group name (this is only done once).\nThe resulting list of the user's group names is used when matching\ngroups listed in the\n.Em sudoers\nfile.\nThis works well on systems where the number of groups listed in the\n.Em sudoers\nfile is larger than the number of groups a typical user belongs to.\nOn systems where group lookups are slow, where users may belong\nto a large number of groups, or where the number of groups listed\nin the\n.Em sudoers\nfile is relatively small, it may be prohibitively expensive and\nrunning commands via\n.Nm sudo\nmay take longer than normal.\nOn such systems it may be faster to use the\n.Em match_group_by_gid\nflag to avoid resolving the user's group-IDs to group names.\nIn this case,\n.Nm\nmust look up any group name listed in the\n.Em sudoers\nfile and use the group-ID instead of the group name when determining\nwhether the user is a member of the group.\n.Pp\nIf\n.Em match_group_by_gid\nis enabled, group database lookups performed by\n.Nm\nwill be keyed by group name as opposed to group-ID.\nOn systems where there are multiple sources for the group database,\nit is possible to have conflicting group names or group-IDs in the local\n.Pa /etc/group\nfile and the remote group database.\nOn such systems, enabling or disabling\n.Em match_group_by_gid\ncan be used to choose whether group database queries are performed\nby name (enabled) or ID (disabled), which may aid in working around\ngroup entry conflicts.\n.Pp\nThe\n.Em match_group_by_gid\nflag has no effect when\n.Em sudoers\ndata is stored in LDAP.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.18 or higher.\n.It intercept\nIf set, all commands run via\n.Nm sudo\nwill behave as if the\n.Dv INTERCEPT\ntag has been set, unless overridden by an\n.Dv NOINTERCEPT\ntag.\nSee the description of\n.Dv INTERCEPT and NOINTERCEPT\nabove as well as the\n.Sx Preventing shell escapes\nsection at the end of this manual.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher\nand is incompatible with SELinux RBAC support unless the system supports\n.Xr seccomp 2\nfilter mode.\n.It intercept_allow_setid\nOn most systems, the dynamic loader will ignore\n.Ev LD_PRELOAD\n(or the equivalent) when running set-user-ID and set-group-ID\nprograms, effectively disabling intercept mode.\nTo prevent this from happening,\n.Nm\nwill not permit a set-user-ID or set-group-ID program to be run in\nintercept mode unless\n.Em intercept_allow_setid\nis enable.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command.\nThis flag is\n.Em on\nby default when the\n.Em intercept_type\noption is set to\n.Em trace ,\notherwise it default to\n.Em off .\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It intercept_authenticate\nIf set, commands run by an intercepted process must be authenticated\nwhen the user's time stamp is not current.\nFor example, if a shell is run with\n.Em intercept\nenabled, as soon as the invoking user's time stamp is out of date,\nsubsequent commands will need to be authenticated.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.8 or higher.\n.It intercept_verify\nIf set,\n.Nm sudo\nwill attempt to verify that a command run in intercept mode has\nthe expected path name, command line arguments and environment.\n.Pp\nThe process will be stopped after\n.Xr execve 2\nhas completed but before the new command has had a chance to run.\nTo verify the command,\n.Nm sudo\nwill read the command's path from\n.Pa /proc/PID/exe ,\nthe command line arguments and environment from the process's memory,\nand compare them against the arguments that were passed to\n.Xr execve 2 .\nIn the event of a mismatch, the command will be sent a\n.Dv SIGKILL\nsignal and terminated.\n.Pp\nThis can help prevent a time of check versus time of use issue with\nintercept mode where the\n.Xr execve 2\narguments could be altered after the\n.Nm\npolicy check.\nThe checks can only be performed if the\n.Xr proc @mansectform@\nfile system is available.\nThis flag has no effect unless the\n.Em intercept\nflag is enabled or the\n.Dv INTERCEPT\ntag has been set for the command and the\n.Em intercept_type\noption is set to\n.Em trace .\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.12 or higher.\n.It netgroup_tuple\nIf set, netgroup lookups will be performed using the full netgroup\ntuple: host name, user name, and domain (if one is set).\nHistorically,\n.Nm sudo\nonly matched the user name and domain for netgroups used in a\n.Em User_List\nand only matched the host name and domain for netgroups used in a\n.Em Host_List .\nThis flag is\n.Em off\nby default.\n.It noexec\nIf set, all commands run via\n.Nm sudo\nwill behave as if the\n.Dv NOEXEC\ntag has been set, unless overridden by an\n.Dv EXEC\ntag.\nSee the description of\n.Dv EXEC and NOEXEC\nabove as well as the\n.Sx Preventing shell escapes\nsection at the end of this manual.\nThis flag is\n.Em off\nby default.\n.It noninteractive_auth\nIf set, authentication will be attempted even in non-interactive mode\n(when\n.Nm sudo Ns 's\n.Fl n\noption is specified).\nThis allows authentication methods that don't require user interaction\nto succeed.\nAuthentication methods that require input from the user's terminal\nwill still fail.\nIf disabled, authentication will not be attempted in non-interactive mode.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.It pam_acct_mgmt\nOn systems that use PAM for authentication,\n.Nm sudo\nwill perform PAM account validation for the invoking user by default.\nThe actual checks performed depend on which PAM modules are configured.\nIf enabled, account validation will be performed regardless of whether\nor not a password is required.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.28 or higher.\n.It pam_rhost\nOn systems that use PAM for authentication,\n.Nm sudo\nwill set the PAM remote host value to the name of the local host\nwhen the\n.Em pam_rhost\nflag is enabled.\nOn Linux systems, enabling\n.Em pam_rhost\nmay result in DNS lookups of the local host name when PAM is initialized.\nOn Solaris versions prior to Solaris 8,\n.Em pam_rhost\nmust be enabled if\n.Em pam_ruser\nis also enabled to avoid a crash in the Solaris PAM implementation.\n.Pp\nThis flag is\n.Em off\nby default on systems other than Solaris.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It pam_ruser\nOn systems that use PAM for authentication,\n.Nm sudo\nwill set the PAM remote user value to the name of the user that invoked sudo\nwhen the\n.Em pam_ruser\nflag is enabled.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It pam_session\nOn systems that use PAM for authentication,\n.Nm sudo\nwill create a new PAM session for the command to be run in.\nUnless\n.Nm sudo\nis given the\n.Fl i\nor\n.Fl s\noptions, PAM session modules are run with the\n.Dq silent\nflag enabled.\nThis prevents last login information from being displayed for every\ncommand on some systems.\nDisabling\n.Em pam_session\nmay be needed on older PAM implementations or on operating systems where\nopening a PAM session changes the utmp or wtmp files.\nIf PAM session support is disabled, resource limits may not be updated\nfor the command being run.\nIf\n.Em pam_session ,\n.Em pam_setcred ,\nand\n.Em use_pty\nare disabled,\n.Em log_servers\nhas not been set and I/O logging has not been configured,\n.Nm sudo\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n.Em @pam_session@\nby default.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\n.It pam_setcred\nOn systems that use PAM for authentication,\n.Nm sudo\nwill attempt to establish credentials for the target user by default,\nif supported by the underlying authentication system.\nOne example of a credential is a Kerberos ticket.\nIf\n.Em pam_session ,\n.Em pam_setcred ,\nand\n.Em use_pty\nare disabled,\n.Em log_servers\nhas not been set and I/O logging has not been configured,\n.Nm sudo\nwill execute the command directly instead of running it as a child\nprocess.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It passprompt_override\nIf set, the prompt specified by\n.Em passprompt\nor the\n.Ev SUDO_PROMPT\nenvironment variable will always be used and will replace the\nprompt provided by a PAM module or other authentication method.\nThis flag is\n.Em off\nby default.\n.It path_info\nNormally,\n.Nm sudo\nwill tell the user when a command could not be\nfound in their\n.Ev PATH\nenvironment variable.\nSome sites may wish to disable this as it could be used to gather\ninformation on the location of executables that the normal user does\nnot have access to.\nThe disadvantage is that if the executable is simply not in the user's\n.Ev PATH ,\n.Nm sudo\nwill tell the user that they are not allowed to run it, which can be confusing.\nThis flag is\n.Em @path_info@\nby default.\n.It preserve_groups\nBy default,\n.Nm sudo\nwill initialize the group vector to the list of groups the target user is in.\nWhen\n.Em preserve_groups\nis set, the user's existing group vector is left unaltered.\nThe real and effective group-IDs, however, are still set to match the\ntarget user.\nThis flag is\n.Em off\nby default.\n.It pwfeedback\nBy default,\n.Nm sudo\nreads the password like most other Unix programs,\nby turning off echo until the user hits the return (or enter) key.\nSome users become confused by this as it appears to them that\n.Nm sudo\nhas hung at this point.\nWhen\n.Em pwfeedback\nis set,\n.Nm sudo\nwill provide visual feedback when the user presses a key.\nThis does have a security impact as an onlooker may be able to\ndetermine the length of the password being entered.\nThis flag is\n.Em off\nby default.\n.It requiretty\nIf set,\n.Nm sudo\nwill only run when the user is logged in to a real tty.\nWhen this flag is set,\n.Nm sudo\ncan only be run from a login session and not via other means such as\n.Xr cron @mansectsu@\nor cgi-bin scripts.\nThis flag is\n.Em off\nby default.\n.It root_sudo\nIf set,\n.Sy root\nis allowed to run\n.Nm sudo\ntoo.\nDisabling this prevents users from\n.Dq chaining\n.Nm sudo\ncommands to get a\n.Sy root\nshell by doing something like\n.Ql sudo sudo /bin/sh .\nNote, however, that turning off\n.Em root_sudo\nwill also prevent\n.Sy root\nfrom running\n.Nm sudoedit .\nDisabling\n.Em root_sudo\nprovides no real additional security; it exists purely for historical reasons.\nThis flag is\n.Em @root_sudo@\nby default.\n.It rootpw\nIf set,\n.Nm sudo\nwill prompt for the\n.Sy root\npassword instead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n.Em off\nby default.\n.It runas_allow_unknown_id\nIf enabled, allow matching of runas user and group IDs that are\nnot present in the password or group databases.\nIn addition to explicitly matching unknown user or group IDs in a\n.Em Runas_List ,\nthis option also allows the\n.Sy ALL\nalias to match unknown IDs.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.30 or higher.\nOlder versions of\n.Nm sudo\nalways allowed matching of unknown user and group IDs.\n.It runas_check_shell\nIf enabled,\n.Nm sudo\nwill only run commands as a user whose shell appears in the\n.Pa /etc/shells\nfile, even if the invoking user's\n.Em Runas_List\nwould otherwise permit it.\nIf no\n.Pa /etc/shells\nfile is present, a system-dependent list of built-in default shells is used.\nOn many operating systems, system users such as\n.Dq bin ,\ndo not have a valid shell and this flag can be used to prevent\ncommands from being run as those users.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.30 or higher.\n.It runaspw\nIf set,\n.Nm sudo\nwill prompt for the password of the user defined by the\n.Em runas_default\noption (defaults to\n.Sy @runas_default@ )\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag is\n.Em off\nby default.\n.if \\n(SL \\{\\\n.It selinux\nIf enabled, the user may specify an SELinux role and/or type to use\nwhen running the command, as permitted by the SELinux policy.\nIf SELinux is disabled on the system, this flag has no effect.\nThis flag is\n.Em on\nby default.\n.\\}\n.It set_home\nIf enabled and\n.Nm sudo\nis invoked with the\n.Fl s\noption, the\n.Ev HOME\nenvironment variable will be set to the home directory of the target\nuser (which is the\n.Em runas_default\nuser unless the\n.Fl u\noption is used).\nThis flag is largely obsolete and has no effect unless the\n.Em env_reset\nflag has been disabled or\n.Ev HOME\nis present in the\n.Em env_keep\nlist, both of which are strongly discouraged.\nThis flag is\n.Em off\nby default.\n.It set_logname\nNormally,\n.Nm sudo\nwill set the\n.Ev LOGNAME\nand\n.Ev USER\nenvironment variables to the name of the target user (the user specified by\n.Em runas_default\nunless the\n.Fl u\noption is given).\nHowever, since some programs (including the RCS revision control system) use\n.Ev LOGNAME\nto determine the real identity of the user, it may be desirable to\nchange this behavior.\nThis can be done by negating the set_logname option.\nThe\n.Em set_logname\noption will have no effect\nif the\n.Em env_reset\noption has not been disabled and the\n.Em env_keep\nlist contains\n.Ev LOGNAME\nor\n.Ev USER .\nThis flag is\n.Em on\nby default.\n.It set_utmp\nWhen enabled,\n.Nm sudo\nwill create an entry in the utmp (or utmpx) file when a pseudo-terminal\nis allocated.\nA pseudo-terminal is allocated by\n.Nm sudo\nwhen it is running in a terminal and one or more of the\n.Em log_input ,\n.Em log_output ,\n.Em log_stdin ,\n.Em log_stdout ,\n.Em log_stderr ,\n.Em log_ttyin ,\n.Em log_ttyout ,\nor\n.Em use_pty\nflags is enabled.\nBy default, the new entry will be a copy of the user's existing utmp\nentry (if any), with the tty, time, type, and pid fields updated.\nThis flag is\n.Em on\nby default.\n.It setenv\nAllow the user to disable the\n.Em env_reset\noption from the command line via the\n.Fl E\noption.\nAdditionally, environment variables set via the command line are\nnot subject to the restrictions imposed by\n.Em env_check ,\n.Em env_delete ,\nor\n.Em env_keep .\nAs such, only trusted users should be allowed to set variables in this manner.\nThis flag is\n.Em off\nby default.\n.It shell_noargs\nIf set and\n.Nm sudo\nis invoked with no arguments it acts as if the\n.Fl s\noption had been given.\nThat is, it runs a shell as\n.Sy root\n(the shell is determined by the\n.Ev SHELL\nenvironment variable if it is set, falling back on the shell listed\nin the invoking user's /etc/passwd entry if not).\nThis flag is\n.Em off\nby default.\n.It stay_setuid\nNormally, when\n.Nm sudo\nexecutes a command the real and effective user-IDs are set to the target\nuser\n.Sy ( @runas_default@\nby default).\nThis option changes that behavior such that the real user-ID is left\nas the invoking user's user-ID.\nIn other words, this makes\n.Nm sudo\nact as a set-user-ID wrapper.\nThis can be useful on systems that disable some potentially\ndangerous functionality when a program is run set-user-ID.\nThis option is only effective on systems that support either the\n.Xr setreuid 2\nor\n.Xr setresuid 2\nsystem call.\nThis flag is\n.Em off\nby default.\n.It sudoedit_checkdir\nIf set,\n.Nm sudoedit\nwill check all directory components of the path to be edited for writability\nby the invoking user.\nSymbolic links will not be followed in writable directories and\n.Nm sudoedit\nwill refuse to edit a file located in a writable directory.\nThese restrictions are not enforced when\n.Nm sudoedit\nis run by\n.Sy root .\nOn some systems, if all directory components of the path to be edited\nare not readable by the target user,\n.Nm sudoedit\nwill be unable to edit the file.\nThis flag is\n.Em on\nby default.\n.Pp\nThis setting was first introduced in version 1.8.15 but initially\nsuffered from a race condition.\nThe check for symbolic links in writable intermediate directories\nwas added in version 1.8.16.\n.It sudoedit_follow\nBy default,\n.Nm sudoedit\nwill not follow symbolic links when opening files.\nThe\n.Em sudoedit_follow\noption can be enabled to allow\n.Nm sudoedit\nto open symbolic links.\nIt may be overridden on a per-command basis by the\n.Dv FOLLOW\nand\n.Dv NOFOLLOW\ntags.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.15 or higher.\n.It syslog_pid\nWhen logging via\n.Xr syslog 3 ,\ninclude the process ID in the log entry.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.21 or higher.\n.It targetpw\nIf set,\n.Nm sudo\nwill prompt for the password of the user specified\nby the\n.Fl u\noption (defaults to the value of\n.Em runas_default )\ninstead of the password of the invoking user\nwhen running a command or editing a file.\nThis flag precludes the use of a user-ID not listed in the passwd\ndatabase as an argument to the\n.Fl u\noption.\nThis flag is\n.Em off\nby default.\n.It tty_tickets\nIf set, users must authenticate on a per-tty basis.\nWith this flag enabled,\n.Nm sudo\nwill use a separate record in the time stamp file for each terminal.\nIf disabled, a single record is used for all login sessions.\n.Pp\nThis option has been superseded by the\n.Em timestamp_type\noption.\n.It umask_override\nIf set,\n.Nm sudo\nwill set the umask as specified in the\n.Em sudoers\nfile without modification.\nThis makes it possible to specify a umask in the\n.Em sudoers\nfile that is more permissive than the user's own umask and matches\nhistorical behavior.\nIf\n.Em umask_override\nis not set,\n.Nm sudo\nwill set the umask to be the union of the user's umask and what is specified in\n.Em sudoers .\nThis flag is\n.Em @umask_override@\nby default.\n.if \\n(LC \\{\\\n.It use_loginclass\nIf set,\n.Nm sudo\nwill apply the defaults specified for the target user's login class\nif one exists.\nOnly available if\n.Nm sudo\nis configured with the\n.Li --with-logincap\noption.\nThis flag is\n.Em off\nby default.\n.\\}\n.It use_netgroups\nIf set, netgroups (prefixed with\n.Ql + ) ,\nmay be used in place of a user or host.\nFor LDAP-based sudoers, netgroup support requires an expensive\nsub-string match on the server unless the\n.Sy NETGROUP_BASE\ndirective is present in the\n.Pa @ldap_conf@\nfile.\nIf netgroups are not needed, this option can be disabled to reduce the\nload on the LDAP server.\nThis flag is\n.Em on\nby default.\n.It use_pty\nIf set, and\n.Nm sudo\nis running in a terminal, the command will be run in a pseudo-terminal\n(even if no I/O logging is being done).\nIf the\n.Nm sudo\nprocess is not attached to a terminal,\n.Em use_pty\nhas no effect.\n.Pp\nA malicious program run under\n.Nm sudo\nmay be capable of injecting commands into the user's\nterminal or running a background process that retains access to the\nuser's terminal device even after the main program has finished\nexecuting.\nBy running the command in a separate pseudo-terminal, this attack is\nno longer possible.\nThis flag is\n.Em off\nby default.\n.It user_command_timeouts\nIf set, the user may specify a timeout on the command line.\nIf the timeout expires before the command has exited, the\ncommand will be terminated.\nIf a timeout is specified both in the\n.Pa sudoers\nfile and on the command line, the smaller of the two timeouts will be used.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It utmp_runas\nIf set,\n.Nm sudo\nwill store the name of the runas user when updating the utmp (or utmpx) file.\nBy default,\n.Nm sudo\nstores the name of the invoking user.\nThis flag is\n.Em off\nby default.\n.It visiblepw\nBy default,\n.Nm sudo\nwill refuse to run if the user must enter a password but it is not\npossible to disable echo on the terminal.\nIf the\n.Em visiblepw\nflag is set,\n.Nm sudo\nwill prompt for a password even when it would be visible on the screen.\nThis makes it possible to run things like\n.Ql ssh somehost sudo ls\nsince by default,\n.Xr ssh 1\ndoes\nnot allocate a tty when running a command.\nThis flag is\n.Em off\nby default.\n.El\n.Pp\n.Sy Integers :\n.Bl -tag -width 16n\n.It closefrom\nBefore it executes a command,\n.Nm sudo\nwill close all open file descriptors other than standard input,\nstandard output, and standard error (file descriptors 0-2).\nThe\n.Em closefrom\noption can be used to specify a different file descriptor at which\nto start closing.\nThe default is 3.\n.It command_timeout\nThe maximum amount of time a command is allowed to run before\nit is terminated.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It log_server_timeout\nThe maximum amount of time to wait when connecting to a log server\nor waiting for a server response.\nSee the\n.Em Timeout_Spec\nsection for a description of the timeout syntax.\nThe default value is 30 seconds.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It maxseq\nThe maximum sequence number that will be substituted for the\n.Ql %{seq}\nescape in the I/O log file (see the\n.Em iolog_dir\ndescription below for more information).\nWhile the value substituted for\n.Ql %{seq}\nis in base 36,\n.Em maxseq\nitself should be expressed in decimal.\nValues larger than 2176782336 (which corresponds to the\nbase 36 sequence number\n.Dq ZZZZZZ )\nwill be silently truncated to 2176782336.\nThe default value is 2176782336.\n.Pp\nOnce the local sequence number reaches the value of\n.Em maxseq ,\nit will\n.Dq roll over\nto zero, after which\n.Nm\nwill truncate and re-use any existing I/O log path names.\n.Pp\nThis setting is only supported by version 1.8.7 or higher.\n.It passwd_tries\nThe number of tries a user gets to enter his/her password before\n.Nm sudo\nlogs the failure and exits.\nThe default is @passwd_tries@.\n.It syslog_maxlen\nOn many systems,\n.Xr syslog 3\nhas a relatively small log buffer.\nIETF RFC 5424 states that syslog servers must support messages of\nat least 480 bytes and should support messages up to 2048 bytes.\nBy default,\n.Nm\ncreates log messages up to 980 bytes which corresponds to the\nhistoric\n.Bx\nsyslog implementation which used a 1024 byte buffer\nto store the message, date, hostname, and program name.\nTo prevent syslog messages from being truncated,\n.Nm\nwill split up log messages that are larger than\n.Em syslog_maxlen\nbytes.\nWhen a message is split, additional parts will include the string\n.Dq Pq command continued\nafter the user name and before the continued command line arguments.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.El\n.Pp\n.Sy Integers that can be used in a boolean context :\n.Bl -tag -width 16n\n.It loglinelen\nNumber of characters per line for the file log.\nThis value is used to decide when to wrap lines for nicer log files.\nThis has no effect on the syslog log file, only the file log.\nThe default is @loglen@ (use 0 or negate the option to disable word wrap).\n.It passwd_timeout\nNumber of minutes before the\n.Nm sudo\npassword prompt times out, or 0 for no timeout.\nThe timeout may include a fractional component\nif minute granularity is insufficient, for example 2.5.\nThe default is @password_timeout@.\n.It timestamp_timeout\nNumber of minutes that can elapse before\n.Nm sudo\nwill ask for a password again.\nThe timeout may include a fractional component if\nminute granularity is insufficient, for example 2.5.\nThe default is @timeout@.\nSet this to 0 to always prompt for a password.\nIf set to a value less than 0 the user's time stamp will not expire\nuntil the system is rebooted.\nThis can be used to allow users to create or delete their own time stamps via\n.Ql sudo -v\nand\n.Ql sudo -k\nrespectively.\n.It umask\nFile mode creation mask to use when running the command.\nNegate this option or set it to 0777 to prevent\n.Nm\nfrom changing the umask.\nUnless the\n.Em umask_override\nflag is set, the actual umask will be the union of the\nuser's umask and the value of the\n.Em umask\nsetting, which defaults to @sudo_umask@.\nThis guarantees that\n.Nm sudo\nnever lowers the umask when running a command.\n.Pp\nIf\n.Em umask\nis explicitly set in\n.Em sudoers ,\nit will override any umask setting in PAM or login.conf.\nIf\n.Em umask\nis not set in\n.Em sudoers ,\nthe umask specified by PAM or login.conf will take precedence.\nThe umask setting in PAM is not used for\n.Nm sudoedit ,\nwhich does not create a new PAM session.\n.El\n.Pp\n.Sy Strings :\n.Bl -tag -width 16n\n.if \\n(AA \\{\\\n.It apparmor_profile\nThe default AppArmor profile to transition into when executing the\ncommand.\nThe default\n.Em apparmor_profile\ncan be overridden for individual\n.Em sudoers\nentries by specifying the\n.Dv APPARMOR_PROFILE\noption.\nThis option is only available when sudo is built with AppArmor\nsupport.\n.\\}\n.It authfail_message\nMessage that is displayed after a user fails to authenticate.\nThe message may include the\n.Ql %d\nescape which will expand to the number of failed password attempts.\nIf set, it overrides the default message,\n.Dq %d incorrect password attempt(s) .\n.It badpass_message\nMessage that is displayed if a user enters an incorrect password.\nThe default is\n.Dq @badpass_message@\nunless insults are enabled.\n.It editor\nA colon\n.Pq Ql :\\&\nseparated list of editor path names used by\n.Nm sudoedit\nand\n.Nm visudo .\nFor\n.Nm sudoedit ,\nthis list is used to find an editor when none of the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables are set to an editor that exists and is executable.\nFor\n.Nm visudo ,\nit is used as a white list of allowed editors;\n.Nm visudo\nwill choose the editor that matches the user's\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variable if possible, or the first editor in the\nlist that exists and is executable if not.\nUnless invoked as\n.Nm sudoedit ,\n.Nm sudo\ndoes not preserve the\n.Ev SUDO_EDITOR ,\n.Ev VISUAL\nor\n.Ev EDITOR\nenvironment variables unless they are present in the\n.Em env_keep\nlist or the\n.Em env_reset\noption is disabled.\nThe default is\n.Pa @editor@ .\n.It intercept_type\nThe underlying mechanism used by the\n.Em intercept\nand\n.Em log_subcmds\noptions.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It dso\nPreload a dynamic shared object (shared library) that intercepts the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nand\n.Xr system 3\nlibrary functions.\nA value of\n.Em dso\nis incompatible with\n.Nm sudo Ns 's\nSELinux RBAC support.\n.It trace\nUse\n.Xr ptrace 2\nto intercept the\n.Xr execve 2\nsystem call.\nThis is only supported on Linux systems where\n.Xr seccomp 2\nfiltering is enabled.\nIf the\n.Pa /proc/sys/kernel/seccomp/actions_avail\nfile is missing or does not contain a\n.Dq trap\nelement, setting\n.Em intercept_type\nto\n.Em trace\nwill have no effect and\n.Em dso\nwill be used instead.\n.El\n.Pp\nThe default is to use\n.Em trace\nif it is supported by the system and\n.Em dso\nif it is not.\n.It iolog_dir\nThe top-level directory to use when constructing the path name for\nthe input/output log directory.\nOnly used if the\n.Em log_input\nor\n.Em log_output\noptions are enabled or when the\n.Dv LOG_INPUT\nor\n.Dv LOG_OUTPUT\ntags are present for a command.\nThe session sequence number, if any, is stored in the directory.\nThe default is\n.Pa @iolog_dir@ .\n.Pp\nThe following percent\n.Pq Ql %\nescape sequences are supported:\n.Bl -tag -width 4n\n.It %{seq}\nexpanded to a monotonically increasing base-36 sequence number, such as 0100A5,\nwhere every two digits are used to form a new directory, e.g.,\n.Pa 01/00/A5\n.It %{user}\nexpanded to the invoking user's login name\n.It %{group}\nexpanded to the name of the invoking user's real group-ID\n.It %{runas_user}\nexpanded to the login name of the user the command will\nbe run as (e.g.,\n.Sy root )\n.It %{runas_group}\nexpanded to the group name of the user the command will\nbe run as (e.g.,\n.Sy wheel )\n.It %{hostname}\nexpanded to the local host name without the domain name\n.It %{command}\nexpanded to the base name of the command being run\n.El\n.Pp\nIn addition, any escape sequences supported by the system's\n.Xr strftime 3\nfunction will be expanded.\n.Pp\nTo include a literal\n.Ql %\ncharacter, the string\n.Ql %%\nshould be used.\n.It iolog_file\nThe path name, relative to\n.Em iolog_dir ,\nin which to store input/output logs when the\n.Em log_input\nor\n.Em log_output\noptions are enabled or when the\n.Dv LOG_INPUT\nor\n.Dv LOG_OUTPUT\ntags are present for a command.\n.Em iolog_file\nmay contain directory components.\nThe default is\n.Ql %{seq} .\n.Pp\nSee the\n.Em iolog_dir\noption above for a list of supported percent\n.Pq Ql %\nescape sequences.\n.Pp\nIn addition to the escape sequences, path names that end in six or\nmore\n.Em X Ns s\nwill have the\n.Em X Ns s\nreplaced with a unique combination of digits and letters, similar to the\n.Xr mktemp 3\nfunction.\n.Pp\nIf the path created by concatenating\n.Em iolog_dir\nand\n.Em iolog_file\nalready exists, the existing I/O log file will be truncated and\noverwritten unless\n.Em iolog_file\nends in six or\nmore\n.Em X Ns s .\n.It iolog_flush\nIf set,\n.Nm sudo\nwill flush I/O log data to disk after each write instead of buffering it.\nThis makes it possible to view the logs in real-time as the program\nis executing but may significantly reduce the effectiveness of I/O\nlog compression.\nThis flag is\n.Em off\nby default.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\n.It iolog_group\nThe group name to look up when setting the group-ID on new I/O log\nfiles and directories.\nIf\n.Em iolog_group\nis not set,\nthe primary group-ID of the user specified by\n.Em iolog_user\nis used.\nIf neither\n.Em iolog_group\nnor\n.Em iolog_user\nare set, I/O log files and directories are created with group-ID 0.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It iolog_mode\nThe file mode to use when creating I/O log files.\nMode bits for read and write permissions for owner, group, or other\nare honored, everything else is ignored.\nThe file permissions will always include the owner read and\nwrite bits, even if they are not present in the specified mode.\nWhen creating I/O log directories, search (execute) bits are added\nto match the read and write bits specified by\n.Em iolog_mode .\nDefaults to 0600 (read and write by user only).\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It iolog_user\nThe user name to look up when setting the user and group-IDs on new\nI/O log files and directories.\nIf\n.Em iolog_group\nis set, it will be used instead of the user's primary group-ID.\nBy default, I/O log files and directories are created with user and\ngroup-ID 0.\n.Pp\nThis setting can be useful when the I/O logs are stored on a Network\nFile System (NFS) share.\nHaving a dedicated user own the I/O log files means that\n.Nm\ndoes not write to the log files as user-ID 0, which is usually\nnot permitted by NFS.\n.Pp\nThis setting is only supported by version 1.8.19 or higher.\n.It lecture_status_dir\nThe directory in which\n.Nm sudo\nstores per-user lecture status files.\nOnce a user has received the lecture, a zero-length file is\ncreated in this directory so that\n.Nm sudo\nwill not lecture the user again.\nThis directory should\n.Em not\nbe cleared when the system reboots.\nThe default is\n.Pa @vardir@/lectured .\n.if \\n(PS \\{\\\n.It limitprivs\nThe default Solaris limit privileges to use when constructing a new\nprivilege set for a command.\nThis bounds all privileges of the executing process.\nThe default limit privileges may be overridden on a per-command basis in\n.Em sudoers .\nThis option is only available if\n.Nm\nis built on Solaris 10 or higher.\n.\\}\n.It log_server_cabundle\nThe path to a certificate authority bundle file, in PEM format,\nto use instead of the system's default certificate authority database\nwhen authenticating the log server.\nThe default is to use the system's default certificate authority database.\nThis setting has no effect unless\n.Em log_servers\nis set and the remote log server is secured with TLS.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_peer_cert\nThe path to the\n.Nm sudo\nclient's certificate file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n.Nm sudo_logsrvd ,\nclient certificate validation is controlled by the\n.Em tls_checkpeer\noption, which defaults to\n.Em false .\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It log_server_peer_key\nThe path to the\n.Nm sudo\nclient's private key file, in PEM format.\nThis setting is required when the remote log server is secured\nwith TLS and client certificate validation is enabled.\nFor\n.Nm sudo_logsrvd ,\nclient certificate validation is controlled by the\n.Em tls_checkpeer\nflag, which defaults to\n.Em false .\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It mailsub\nSubject of the mail sent to the\n.Em mailto\nuser.\nThe escape\n.Ql %h\nwill expand to the host name of the machine.\nDefault is\n.Dq @mailsub@ .\n.It noexec_file\nAs of\n.Nm sudo\nversion 1.8.1 this option is no longer supported.\nThe path to the noexec file should now be set in the\n.Xr sudo.conf @mansectform@\nfile.\n.It pam_askpass_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n.Fl A\noption is specified.\nThe default value is either\n.Ql sudo\nor\n.Ql @pam_login_service@ ,\ndepending on whether or not the\n.Fl i\noption is also specified.\nSee the description of\n.Em pam_service\nfor more information.\n.Pp\nThis setting is only supported by version 1.9.9 or higher.\n.It pam_login_service\nOn systems that use PAM for authentication, this is the service\nname used when the\n.Fl i\noption is specified.\nThe default value is\n.Ql @pam_login_service@ .\nSee the description of\n.Em pam_service\nfor more information.\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It pam_service\nOn systems that use PAM for authentication, the service name\nspecifies the PAM policy to apply.\nThis usually corresponds to an entry in the\n.Pa pam.conf\nfile or a file in the\n.Pa /etc/pam.d\ndirectory.\nThe default value is\n.Ql sudo .\n.Pp\nThis setting is only supported by version 1.8.8 or higher.\n.It passprompt\nThe default prompt to use when asking for a password; can be overridden via the\n.Fl p\noption or the\n.Ev SUDO_PROMPT\nenvironment variable.\nThe following percent\n.Pq Ql %\nescape sequences are supported:\n.Bl -tag -width 4n\n.It %H\nexpanded to the local host name including the domain name\n(only if the machine's host name is fully qualified or the\n.Em fqdn\noption is set)\n.It %h\nexpanded to the local host name without the domain name\n.It %p\nexpanded to the user whose password is being asked for (respects the\n.Em rootpw ,\n.Em targetpw\nand\n.Em runaspw\nflags in\n.Em sudoers )\n.It \\&%U\nexpanded to the login name of the user the command will\nbe run as (defaults to\n.Sy @runas_default@ )\n.It %u\nexpanded to the invoking user's login name\n.It %%\ntwo consecutive\n.Ql %\ncharacters are collapsed into a single\n.Ql %\ncharacter\n.El\n.Pp\nOn systems that use PAM for authentication,\n.Em passprompt\nwill only be used if the prompt provided by the PAM module matches the string\n.Dq \"Password: \"\nor\n.Dq \"username's Password: \" .\nThis ensures that the\n.Em passprompt\nsetting does not interfere with challenge-response style authentication.\nThe\n.Em passprompt_override\nflag can be used to change this behavior.\n.Pp\nThe default value is\n.Ql \"@passprompt@\" .\n.if \\n(PS \\{\\\n.It privs\nThe default Solaris privileges to use when constructing a new\nprivilege set for a command.\nThis is passed to the executing process via the inherited privilege set,\nbut is bounded by the limit privileges.\nIf the\n.Em privs\noption is specified but the\n.Em limitprivs\noption is not, the limit privileges of the executing process is set to\n.Em privs .\nThe default privileges may be overridden on a per-command basis in\n.Em sudoers .\nThis option is only available if\n.Nm\nis built on Solaris 10 or higher.\n.\\}\n.if \\n(SL \\{\\\n.It role\nThe default SELinux role to use when constructing a new security\ncontext to run the command.\nThe default role may be overridden on a per-command basis in the\n.Em sudoers\nfile or via command line options.\nThis option is only available when\n.Nm sudo\nis built with SELinux support.\n.\\}\n.It runas_default\nThe default user to run commands as if the\n.Fl u\noption is not specified on the command line.\nThis defaults to\n.Sy @runas_default@ .\n.It sudoers_locale\nLocale to use when parsing the sudoers file, logging commands, and\nsending email.\nChanging the locale may affect how sudoers is interpreted.\nDefaults to\n.Ql C .\n.It timestamp_type\n.Nm\nuses per-user time stamp files for credential caching.\nThe\n.Em timestamp_type\noption can be used to specify the type of time stamp record used.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It global\nA single time stamp record is used for all of a user's login sessions,\nregardless of the terminal or parent process ID.\nAn additional record is used to serialize password prompts when\n.Nm sudo\nis used multiple times in a pipeline, but this does not affect authentication.\n.It ppid\nA single time stamp record is used for all processes with the same parent\nprocess ID (usually the shell).\nCommands run from the same shell (or other common parent process)\nwill not require a password for\n.Em timestamp_timeout\nminutes (@timeout@ by default).\nCommands run via\n.Nm sudo\nwith a different parent process ID, for example from a shell script,\nwill be authenticated separately.\n.It tty\nOne time stamp record is used for each terminal,\nwhich means that a user's login sessions are authenticated separately.\nIf no terminal is present, the behavior is the same as\n.Em ppid .\nCommands run from the same terminal will not require a password for\n.Em timestamp_timeout\nminutes (@timeout@ by default).\n.It kernel\nThe time stamp is stored in the kernel as an attribute of the terminal\ndevice.\nIf no terminal is present, the behavior is the same as\n.Em ppid .\nNegative\n.Em timestamp_timeout\nvalues are not supported and positive values are limited to a maximum\nof 60 minutes.\nThis is currently only supported on\n.Ox .\n.El\n.Pp\nThe default value is\n.Em @timestamp_type@ .\n.Pp\nThis setting is only supported by version 1.8.21 or higher.\n.It timestampdir\nThe directory in which\n.Nm sudo\nstores its time stamp files.\nThis directory should be cleared when the system reboots.\nThe default is\n.Pa @rundir@/ts .\n.It timestampowner\nThe owner of the lecture status directory, time stamp directory and all\nfiles stored therein.\nThe default is\n.Sy root .\n.if \\n(SL \\{\\\n.It type\nThe default SELinux type to use when constructing a new security\ncontext to run the command.\nThe default type may be overridden on a per-command basis in the\n.Em sudoers\nfile or via command line options.\nThis option is only available when\n.Nm sudo\nis built with SELinux support.\n.\\}\n.El\n.Pp\n.Sy Strings that can be used in a boolean context :\n.Bl -tag -width 12n\n.It admin_flag\nThe\n.Em admin_flag\noption specifies the path to a file that is created the first time\na user that is a member of the\n.Em sudo\nor\n.Em admin\ngroups runs\n.Nm sudo .\nOnly available if\n.Nm sudo\nis configured with the\n.Li --enable-admin-flag\noption.\nThe default value is\n.Pa ~/.sudo_as_admin_successful .\n.It env_file\nThe\n.Em env_file\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n.Ql VARIABLE=value\nor\n.Ql export VARIABLE=value .\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nThis file is considered to be part of the security policy,\nits contents are not subject to other\n.Nm sudo\nenvironment restrictions such as\n.Em env_keep\nand\n.Em env_check .\n.It exempt_group\nUsers in this group are exempt from password and PATH requirements.\nThe group name specified should not include a\n.Ql %\nprefix.\nThis is not set by default.\n.It fdexec\nDetermines whether\n.Nm sudo\nwill execute a command by its path or by an open file descriptor.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It always\nAlways execute by file descriptor.\n.It never\nNever execute by file descriptor.\n.It digest_only\nOnly execute by file descriptor if the command has an associated digest\nin the\n.Em sudoers\nfile.\n.El\n.Pp\nThe default value is\n.Em digest_only .\nThis avoids a time of check versus time of use race condition when\nthe command is located in a directory writable by the invoking user.\n.Pp\n.Em fdexec\nwill change the first element of the argument vector for scripts\n($0 in the shell) due to the way the kernel runs script interpreters.\nInstead of being a normal path, it will refer to a file descriptor.\nFor example,\n.Pa /dev/fd/4\non Solaris and\n.Pa /proc/self/fd/4\non Linux.\nA workaround is to use the\n.Dv SUDO_COMMAND\nenvironment variable instead.\n.Pp\nThe\n.Em fdexec\nsetting is only used when the command is matched by path name.\nIt has no effect if the command is matched by the built-in\n.Sy ALL\nalias.\n.Pp\nThis setting is only supported by version 1.8.20 or higher.\nIf the operating system does not support the\n.Xr fexecve 2\nsystem call, this setting has no effect.\n.It group_plugin\nA string containing a\n.Nm\ngroup plugin with optional arguments.\nThe string should consist of the plugin\npath, either fully-qualified or relative to the\n.Pa @plugindir@\ndirectory, followed by any configuration arguments the plugin requires.\nThese arguments (if any) will be passed to the plugin's initialization function.\nIf arguments are present, the string must be enclosed in double quotes\n.Pq \\&\"\" .\n.Pp\nOn 64-bit systems, if the plugin is present but cannot be loaded,\n.Nm\nwill look for a 64-bit version and, if it exists, load that as a fallback.\nThe exact rules for this vary by system.\nOn Solaris, if the plugin is stored in a directory ending in\n.Dq lib ,\n.Nm\nwill create a fallback path by appending\n.Dq /64\nto the directory name;\n.Pa @prefix@/lib/group_plugin.so\nbecomes\n.Pa @prefix@/lib/64/group_plugin.so .\nOn Linux, a directory ending in\n.Dq lib\nwill be transformed to\n.Dq lib64\nas the fallback path;\n.Pa @prefix@/lib/group_plugin.so\nbecomes\n.Pa @prefix@/lib64/group_plugin.so .\nOn all other systems, the fallback path is generated by adding a\n.Dq 64\nbefore the file extension;\n.Pa group_plugin.so\nbecomes\n.Pa group_plugin64.so .\n.Pp\nFor more information see\n.Sx \"GROUP PROVIDER PLUGINS\" .\n.It lecture\nThis option controls when a short lecture will be printed along with\nthe password prompt.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It always\nAlways lecture the user.\n.It never\nNever lecture the user.\n.It once\nOnly lecture the user the first time they run\n.Nm sudo .\n.El\n.Pp\nIf no value is specified, a value of\n.Em once\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em @lecture@ .\n.It lecture_file\nPath to a file containing an alternate\n.Nm sudo\nlecture that will be used in place of the standard lecture if the named\nfile exists.\nBy default,\n.Nm sudo\nuses a built-in lecture.\n.It listpw\nThis option controls when a password will be required when a user runs\n.Nm sudo\nwith the\n.Fl l\noption.\nIt has the following possible values:\n.Bl -tag -width 4n\n.It all\nAll the user's\n.Em sudoers\nfile entries for the current host must have\nthe\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It always\nThe user must always enter a password to use the\n.Fl l\noption.\n.It any\nAt least one of the user's\n.Em sudoers\nfile entries for the current host\nmust have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It never\nThe user need never enter a password to use the\n.Fl l\noption.\n.El\n.Pp\nIf no value is specified, a value of\n.Em any\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em any .\n.It log_format\nThe event log format.\nSupported log formats are:\n.Bl -tag -width 4n\n.It json\nLogs in JSON format.\nJSON log entries contain the full user details as well as the execution\nenvironment if the command was allowed.\nDue to limitations of the protocol, JSON events sent via\n.Em syslog\nmay be truncated.\n.It sudo\nTraditional sudo-style logs, see\n.Sx \"EVENT LOGGING\"\nfor a description of the log file format.\n.El\n.Pp\nThis setting affects logs sent via\n.Xr syslog 3\nas well as the file specified by the\n.Em logfile\nsetting, if any.\nThe default value is\n.Em sudo .\n.It logfile\nPath to the\n.Nm sudo\nlog file (not the syslog log file).\nSetting a path turns on logging to a file;\nnegating this option turns it off.\nBy default,\n.Nm sudo\nlogs via syslog.\n.It mailerflags\nFlags to use when invoking mailer.\nDefaults to\n.Fl t .\n.It mailerpath\nPath to mail program used to send warning mail (negate to prevent\n.Nm sudo\nfrom sending mail).\nDefaults to the path to sendmail found at configure time.\n.It mailfrom\nAddress to use for the\n.Dq from\naddress when sending warning and error mail.\nThe address should be enclosed in double quotes\n.Pq \\&\"\"\nto protect against\n.Nm sudo\ninterpreting the\n.Ql @\nsign.\nDefaults to the name of the user running\n.Nm sudo .\n.It mailto\nAddress to send warning and error mail to (negate to prevent\n.Nm sudo\nfrom sending mail).\nThe address should be enclosed in double quotes\n.Pq \\&\"\"\nto protect against\n.Nm sudo\ninterpreting the\n.Ql @\nsign.\nDefaults to @mailto@.\n.It rlimit_as\nThe maximum size to which the process's address space may grow (in bytes),\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_core\nThe largest size core dump file that may be created (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\nDefaults to 0 (no core dump created).\n.It rlimit_cpu\nThe maximum amount of CPU time that the process may use (in seconds).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_data\nThe maximum size of the data segment for the process (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_fsize\nThe largest size file that the process may create (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_locks\nThe maximum number of locks that the process may establish,\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_memlock\nThe maximum size that the process may lock in memory (in bytes),\nif supported by the operating system.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_nofile\nThe maximum number of files that the process may have open.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_nproc\nThe maximum number of processes that the user may run simultaneously.\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_rss\nThe maximum size to which the process's resident set size may grow (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It rlimit_stack\nThe maximum size to which the process's stack may grow (in bytes).\nSee\n.Sx \"Resource limits\"\nfor more information.\n.It restricted_env_file\nThe\n.Em restricted_env_file\noption specifies the fully qualified path to a file containing variables\nto be set in the environment of the program being run.\nEntries in this file should either be of the form\n.Ql VARIABLE=value\nor\n.Ql export VARIABLE=value .\nThe value may optionally be enclosed in single or double quotes.\nVariables in this file are only added if the variable does not already\nexist in the environment.\nUnlike\n.Em env_file ,\nthe file's contents are not trusted and are processed in a manner\nsimilar to that of the invoking user's environment.\nIf\n.Em env_reset\nis enabled, variables in the file will only be added if they are\nmatched by either the\n.Em env_check\nor\n.Em env_keep\nlist.\nIf\n.Em env_reset\nis disabled, variables in the file are added as long as they\nare not matched by the\n.Em env_delete\nlist.\nIn either case, the contents of\n.Em restricted_env_file\nare processed before the contents of\n.Em env_file .\n.It runchroot\nIf set,\n.Nm sudo\nwill use this value for the root directory when running a command.\nThe special value\n.Dq *\nwill allow the user to specify the root directory via\n.Nm sudo Ns 's\n.Fl R\noption.\nSee the\n.Sx Chroot_Spec\nsection for more details.\n.Pp\nIt is only possible to use\n.Em runchroot\nas a command-specific Defaults setting if the command exists with\nthe same path both inside and outside the chroot jail.\nThis restriction does not apply to global, host, or user-based\nDefaults settings or to a\n.Em Cmnd_Spec\nthat includes a\n.Em Chroot_Spec .\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.It runcwd\nIf set,\n.Nm sudo\nwill use this value for the working directory when running a command.\nThe special value\n.Dq *\nwill allow the user to specify the working directory via\n.Nm sudo Ns 's\n.Fl D\noption.\nSee the\n.Sx Chdir_Spec\nsection for more details.\n.Pp\nThis setting is only supported by version 1.9.3 or higher.\n.It secure_path\nIf set,\n.Nm sudo\nwill use this value in place of the user's\n.Ev PATH\nenvironment variable.\nThis option can be used to reset the\n.Ev PATH\nto a known good value that contains directories for system administrator\ncommands such as\n.Pa /usr/sbin .\n.Pp\nUsers in the group specified by the\n.Em exempt_group\noption are not affected by\n.Em secure_path .\nThis option is @secure_path@ by default.\n.It syslog\nSyslog facility if syslog is being used for logging (negate to\ndisable syslog logging).\nDefaults to @logfac@.\n.Pp\nThe following syslog facilities are supported:\n.Sy authpriv\n(if your\nOS supports it),\n.Sy auth ,\n.Sy daemon ,\n.Sy user ,\n.Sy local0 ,\n.Sy local1 ,\n.Sy local2 ,\n.Sy local3 ,\n.Sy local4 ,\n.Sy local5 ,\n.Sy local6 ,\nand\n.Sy local7 .\n.It syslog_badpri\nSyslog priority to use when the user is not allowed to run a command or\nwhen authentication is unsuccessful.\nDefaults to @badpri@.\n.Pp\nThe following syslog priorities are supported:\n.Sy alert ,\n.Sy crit ,\n.Sy debug ,\n.Sy emerg ,\n.Sy err ,\n.Sy info ,\n.Sy notice ,\n.Sy warning ,\nand\n.Sy none .\nNegating the option or setting it to a value of\n.Sy none\nwill disable logging of unsuccessful commands.\n.It syslog_goodpri\nSyslog priority to use when the user is allowed to run a command and\nauthentication is successful.\nDefaults to @goodpri@.\n.Pp\nSee\n.Em syslog_badpri\nfor the list of supported syslog priorities.\nNegating the option or setting it to a value of\n.Sy none\nwill disable logging of successful commands.\n.It verifypw\nThis option controls when a password will be required when a user runs\n.Nm sudo\nwith the\n.Fl v\noption.\nIt has the following possible values:\n.Bl -tag -width 6n\n.It all\nAll the user's\n.Em sudoers\nfile entries for the current host must have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It always\nThe user must always enter a password to use the\n.Fl v\noption.\n.It any\nAt least one of the user's\n.Em sudoers\nfile entries for the current host must have the\n.Dv NOPASSWD\nflag set to avoid entering a password.\n.It never\nThe user need never enter a password to use the\n.Fl v\noption.\n.El\n.Pp\nIf no value is specified, a value of\n.Em all\nis implied.\nNegating the option results in a value of\n.Em never\nbeing used.\nThe default value is\n.Em all .\n.El\n.Pp\n.Sy Lists that can be used in a boolean context :\n.Bl -tag -width 16n\n.It env_check\nEnvironment variables to be removed from the user's environment\nunless they are considered\n.Dq safe .\nFor all variables except\n.Ev TZ ,\n.Dq safe\nmeans that the variable's value does not contain any\n.Ql %\nor\n.Ql /\ncharacters.\nThis can be used to guard against printf-style format vulnerabilities\nin poorly-written programs.\nThe\n.Ev TZ\nvariable is considered unsafe if any of the following are true:\n.Bl -bullet -width 1n\n.It\nIt consists of a fully-qualified path name,\noptionally prefixed with a colon\n.Pq Ql :\\& ,\nthat does not match the location of the\n.Pa zoneinfo\ndirectory.\n.It\nIt contains a\n.Pa ..\npath element.\n.It\nIt contains white space or non-printable characters.\n.It\nIt is longer than the value of\n.Dv PATH_MAX .\n.El\n.Pp\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using\nthe\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nRegardless of whether the\n.Em env_reset\noption is enabled or disabled, variables specified by\n.Em env_check\nwill be preserved in the environment if they pass the aforementioned check.\nThe global list of environment variables to check is displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\n.It env_delete\nEnvironment variables to be removed from the user's environment when the\n.Em env_reset\noption is not in effect.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nThe global list of environment variables to remove is displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\nMany operating systems will remove potentially dangerous variables\nfrom the environment of any set-user-ID process (such as\n.Nm sudo ) .\n.It env_keep\nEnvironment variables to be preserved in the user's environment when the\n.Em env_reset\noption is in effect.\nThis allows fine-grained control over the environment\n.Nm sudo Ns -spawned\nprocesses will receive.\nThe argument may be a double-quoted, space-separated list or a\nsingle value without double-quotes.\nThe list can be replaced, added to, deleted from, or disabled by using the\n.Ql = ,\n.Ql += ,\n.Ql -= ,\nand\n.Ql \\&!\noperators respectively.\nThe global list of variables to keep\nis displayed when\n.Nm sudo\nis run by\n.Sy root\nwith the\n.Fl V\noption.\n.Pp\nPreserving the\n.Ev HOME\nenvironment variable has security implications since many programs use it\nwhen searching for configuration or data files.\nAdding\n.Ev HOME\nto\n.Em env_keep\nmay enable a user to run unrestricted commands via\n.Nm sudo\nand is strongly discouraged.\nUsers wishing to edit files with\n.Nm sudo\nshould run\n.Nm sudoedit\n(or\n.Nm sudo Fl e )\nto get their accustomed editor configuration instead of\ninvoking the editor directly.\n.It log_servers\nA list of one or more servers to use for remote event and I/O log storage,\nseparated by white space.\nLog servers must be running\n.Nm sudo_logsrvd\nor another service that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Pp\nServer addresses should be of the form\n.Dq host Ns Oo : Ns port Oc Ns Op (tls) .\nThe host portion may be a host name, an IPv4 address, or an IPv6 address\nin square brackets.\n.Pp\nIf the optional\n.Em tls\nflag is present, the connection will be secured\nwith Transport Layer Security (TLS) version 1.2 or 1.3.\nVersions of TLS prior to 1.2 are not supported.\n.Pp\nIf a port is specified, it may either be a port number or a well-known\nservice name as defined by the system service name database.\nIf no port is specified, port 30343 will be used for plaintext\nconnections and port 30344 will be used for TLS connections.\n.Pp\nWhen\n.Em log_servers\nis set, event log data will be logged both locally (see the\n.Em syslog\nand\n.Em log_file\nsettings) as well as remotely, but I/O log data will only be logged remotely.\nIf multiple hosts are specified, they will be attempted in reverse order.\nIf no log servers are available, the user will not be able to run\na command unless either the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\nLikewise, if the connection to the log server is interrupted while\n.Nm sudo\nis running, the command will be terminated unless the\n.Em ignore_iolog_errors\nflag (I/O logging enabled) or the\n.Em ignore_log_errors\nflag (I/O logging disabled) is set.\n.Pp\nThis setting is only supported by version 1.9.0 or higher.\n.It passprompt_regex\nA list of POSIX extended regular expressions used to\nmatch password prompts in the terminal output.\nAs an extension, if the regular expression begins with\n.Dq (?i) ,\nit will be matched in a case-insensitive manner.\nEach regular expression is limited to 1024 characters.\nThis option is only used when\n.Em log_passwords\nhas been disabled.\nThe default value is\n.Dq [Pp]assword[: ]*\n.Pp\nThis setting is only supported by version 1.9.10 or higher.\n.El\n.Sh GROUP PROVIDER PLUGINS\nThe\n.Nm\nplugin supports its own plugin interface to allow non-Unix\ngroup lookups which can query a group source other\nthan the standard Unix group database.\nThis can be used to implement support for the\n.Em nonunix_group\nsyntax described earlier.\n.Pp\nGroup provider plugins are specified via the\n.Em group_plugin\nsetting.\nThe argument to\n.Em group_plugin\nshould consist of the plugin path, either fully-qualified or relative to the\n.Pa @plugindir@\ndirectory, followed by any configuration options the plugin requires.\nThese options (if specified) will be passed to the plugin's initialization\nfunction.\nIf options are present, the string must be enclosed in double quotes\n.Pq \\&\"\" .\n.Pp\nThe following group provider plugins are installed by default:\n.Bl -tag -width 4n\n.It group_file\nThe\n.Em group_file\nplugin supports an alternate group file that uses the same syntax as the\n.Pa /etc/group\nfile.\nThe path to the group file should be specified as an option\nto the plugin.\nFor example, if the group file to be used is\n.Pa /etc/sudo-group :\n.Bd -literal\nDefaults group_plugin=\"group_file.so /etc/sudo-group\"\n.Ed\n.It system_group\nThe\n.Em system_group\nplugin supports group lookups via the standard C library functions\n.Xr getgrnam 3\nand\n.Xr getgrid 3 .\nThis plugin can be used in instances where the user belongs to\ngroups not present in the user's supplemental group vector.\nThis plugin takes no options:\n.Bd -literal\nDefaults group_plugin=system_group.so\n.Ed\n.El\n.Pp\nThe group provider plugin API is described in detail in\n.Xr sudo_plugin @mansectform@ .\n.Sh EVENT LOGGING\n.Nm\ncan log events in either JSON or\n.Em sudo\nformat,\nthis section describes the\n.Em sudo\nlog format.\nDepending on\n.Em sudoers\nconfiguration,\n.Nm\ncan log events via\n.Xr syslog 3 ,\nto a local log file, or both.\nThe log format is almost identical in both cases.\nAny control characters present in the log data are formatted in octal\nwith a leading\n.Ql #\ncharacter.\nFor example, a horizontal tab is stored as\n.Ql #011\nand an embedded carriage return is stored as\n.Ql #015 .\nIn addition, space characters in the command path are stored as\n.Ql #040 .\nCommand line arguments that contain spaces are enclosed in single quotes\n.Pq '' .\nThis makes it possible to distinguish multiple command line arguments\nfrom a single argument that contains spaces.\nLiteral single quotes and backslash characters\n.Pq Ql \\e\nin command line arguments are escaped with a backslash.\n.Ss Accepted command log entries\nCommands that sudo runs are logged using the following format (split\ninto multiple lines for readability):\n.Bd -literal -offset 4n\ndate hostname progname: username : TTY=ttyname ; CHROOT=chroot ; \\e\n    PWD=cwd ; USER=runasuser ; GROUP=runasgroup ; TSID=logid ; \\e\n    ENV=env_vars COMMAND=command\n.Ed\n.Pp\nWhere the fields are as follows:\n.Bl -tag -width 12n\n.It date\nThe date the command was run.\nTypically, this is in the format\n.Dq MMM, DD, HH:MM:SS .\nIf logging via\n.Xr syslog 3 ,\nthe actual date format is controlled by the syslog daemon.\nIf logging to a file and the\n.Em log_year\noption is enabled,\nthe date will also include the year.\n.It hostname\nThe name of the host\n.Nm sudo\nwas run on.\nThis field is only present when logging via\n.Xr syslog 3 .\n.It progname\nThe name of the program, usually\n.Em sudo\nor\n.Em sudoedit .\nThis field is only present when logging via\n.Xr syslog 3 .\n.It username\nThe login name of the user who ran\n.Nm sudo .\n.It ttyname\nThe short name of the terminal (e.g.,\n.Dq console ,\n.Dq tty01 ,\nor\n.Dq pts/0 )\n.Nm sudo\nwas run on, or\n.Dq unknown\nif there was no terminal present.\n.It chroot\nThe root directory that the command was run in, if one was specified.\n.It cwd\nThe current working directory that\n.Nm sudo\nwas run in.\n.It runasuser\nThe user the command was run as.\n.It runasgroup\nThe group the command was run as if one was specified on the command line.\n.It logid\nAn I/O log identifier that can be used to replay the command's output.\nThis is only present when the\n.Em log_input\nor\n.Em log_output\noption is enabled.\n.It env_vars\nA list of environment variables specified on the command line,\nif specified.\n.It command\nThe actual command that was executed, including any command line arguments.\n.El\n.Pp\nMessages are logged using the locale specified by\n.Em sudoers_locale ,\nwhich defaults to the\n.Ql C\nlocale.\n.Ss Denied command log entries\nIf the user is not allowed to run the command, the reason for the denial\nwill follow the user name.\nPossible reasons include:\n.Bl -tag -width 4\n.It user NOT in sudoers\nThe user is not listed in the\n.Em sudoers\nfile.\n.It user NOT authorized on host\nThe user is listed in the\n.Em sudoers\nfile but is not allowed to run commands on the host.\n.It command not allowed\nThe user is listed in the\n.Em sudoers\nfile for the host but they are not allowed to run the specified command.\n.It 3 incorrect password attempts\nThe user failed to enter their password after 3 tries.\nThe actual number of tries will vary based on the number of\nfailed attempts and the value of the\n.Em passwd_tries\noption.\n.It a password is required\nThe\n.Fl n\noption was specified but a password was required.\n.It sorry, you are not allowed to set the following environment variables\nThe user specified environment variables on the command line that\nwere not allowed by\n.Em sudoers .\n.El\n.Ss Error log entries\nIf an error occurs,\n.Nm\nwill log a message and, in most cases, send a message to the\nadministrator via email.\nPossible errors include:\n.Bl -tag -width 4\n.It parse error in @sysconfdir@/sudoers near line N\n.Nm\nencountered an error when parsing the specified file.\nIn some cases, the actual error may be one line above or below the\nline number listed, depending on the type of error.\n.It problem with defaults entries\nThe\n.Em sudoers\nfile contains one or more unknown Defaults settings.\nThis does not prevent\n.Nm sudo\nfrom running, but the\n.Em sudoers\nfile should be checked using\n.Nm visudo .\n.It timestamp owner (username): \\&No such user\nThe time stamp directory owner, as specified by the\n.Em timestampowner\nsetting, could not be found in the password database.\n.It unable to open/read @sysconfdir@/sudoers\nThe\n.Em sudoers\nfile could not be opened for reading.\nThis can happen when the\n.Em sudoers\nfile is located on a remote file system that maps user-ID 0 to\na different value.\nNormally,\n.Nm\ntries to open the\n.Em sudoers\nfile using group permissions to avoid this problem.\nConsider either changing the ownership of\n.Pa @sysconfdir@/sudoers\nor adding an argument like\n.Dq sudoers_uid=N\n(where\n.Sq N\nis the user-ID that owns the\n.Em sudoers\nfile) to the end of the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It unable to open @sysconfdir@/sudoers\nThe\n.Pa @sysconfdir@/sudoers\nfile is missing.\n.It @sysconfdir@/sudoers is not a regular file\nThe\n.Pa @sysconfdir@/sudoers\nfile exists but is not a regular file or symbolic link.\n.It @sysconfdir@/sudoers is owned by uid N, should be 0\nThe\n.Em sudoers\nfile has the wrong owner.\nIf you wish to change the\n.Em sudoers\nfile owner, add\n.Dq sudoers_uid=N\n(where\n.Sq N\nis the user-ID that owns the\n.Em sudoers\nfile) to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It @sysconfdir@/sudoers is world writable\nThe permissions on the\n.Em sudoers\nfile allow all users to write to it.\nThe\n.Em sudoers\nfile must not be world-writable, the default file mode\nis 0440 (readable by owner and group, writable by none).\nThe default mode may be changed via the\n.Dq sudoers_mode\noption to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It @sysconfdir@/sudoers is owned by gid N, should be 1\nThe\n.Em sudoers\nfile has the wrong group ownership.\nIf you wish to change the\n.Em sudoers\nfile group ownership, add\n.Dq sudoers_gid=N\n(where\n.Sq N\nis the group-ID that owns the\n.Em sudoers\nfile) to the\n.Nm\n.Em Plugin\nline in the\n.Xr sudo.conf @mansectform@\nfile.\n.It unable to open @rundir@/ts/username\n.Nm\nwas unable to read or create the user's time stamp file.\nThis can happen when\n.Em timestampowner\nis set to a user other than\n.Sy root\nand the mode on\n.Pa @rundir@\nis not searchable by group or other.\nThe default mode for\n.Pa @rundir@\nis 0711.\n.It unable to write to @rundir@/ts/username\n.Nm\nwas unable to write to the user's time stamp file.\n.It @rundir@/ts is owned by uid X, should be Y\nThe time stamp directory is owned by a user other than\n.Em timestampowner .\nThis can occur when the value of\n.Em timestampowner\nhas been changed.\n.Nm\nwill ignore the time stamp directory until the owner is corrected.\n.It @rundir@/ts is group writable\nThe time stamp directory is group-writable; it should be writable only by\n.Em timestampowner .\nThe default mode for the time stamp directory is 0700.\n.Nm\nwill ignore the time stamp directory until the mode is corrected.\n.El\n.Ss Notes on logging via syslog\nBy default,\n.Nm\nlogs messages via\n.Xr syslog 3 .\nThe\n.Em date ,\n.Em hostname ,\nand\n.Em progname\nfields are added by the system's\n.Xr syslog 3\nfunction, not\n.Nm\nitself.\nAs such, they may vary in format on different systems.\n.Pp\nThe maximum size of syslog messages varies from system to system.\nThe\n.Em syslog_maxlen\nsetting can be used to change the maximum syslog message size\nfrom the default value of 980 bytes.\nFor more information, see the description of\n.Em syslog_maxlen .\n.Ss Notes on logging to a file\nIf the\n.Em logfile\noption is set,\n.Nm\nwill log to a local file, such as\n.Pa @log_dir@/sudo .\nWhen logging to a file,\n.Nm\nuses a format similar to\n.Xr syslog 3 ,\nwith a few important differences:\n.Bl -enum\n.It\nThe\n.Em progname\nfield is not present.\n.It\nThe\n.Em hostname\nis only logged if the\n.Em log_host\noption is enabled.\n.It\nThe date does not include the year unless the\n.Em log_year\noption is enabled.\n.It\nLines that are longer than\n.Em loglinelen\ncharacters (80 by default) are word-wrapped and continued on the\nnext line with a four character indent.\nThis makes entries easier to read for a human being, but makes it\nmore difficult to use\n.Xr grep 1\non the log files.\nIf the\n.Em loglinelen\noption is set to 0 (or negated with a\n.Ql \\&! ) ,\nword wrap will be disabled.\n.El\n.Sh I/O LOGGING\nWhen I/O logging is enabled,\n.Nm sudo\nwill runs the command in a pseudo-terminal, logging user input\nand/or output, depending on which\n.Nm\nflags are enabled.\nThere are five distinct types of I/O that can be logged, each with\na corresponding\n.Nm\nflag.\n.Bl -column \"standard output\" \"log_output\" \"command output displayed to the screen\"\n.It Sy Type Ta Sy Flag Ta Sy Description\n.It terminal input Ta log_ttyin Ta keystrokes entered by the user\n.It terminal output Ta log_ttyout Ta command output displayed to the screen\n.It standard input Ta log_stdin Ta input from a pipe or a file\n.It standard output Ta log_stdout Ta output to a pipe or a file\n.It standard error Ta log_stderr Ta output to a pipe or a file\n.El\n.Pp\nIn addition to flags described the above, the\n.Em log_input\nflag and\n.Dv LOG_INPUT\ncommand tag set both\n.Em log_ttyin\nand\n.Em log_stdin .\nThe\n.Em log_output\nflag and\n.Dv LOG_OUTPUT\ncommand tag set\n.Em log_ttyout ,\n.Em log_stdout ,\nand\n.Em log_stderr .\n.Pp\nTo capture terminal input and output,\n.Nm sudo\nrun the command in a pseudo-terminal, logging the input and\noutput before passing it on to the user.\nTo capture the standard input, standard output or standard error,\n.Nm sudo\nuses a pipe to interpose itself between the input or output stream,\nlogging the I/O before passing it to the other end of the pipe.\n.Pp\nI/O can be logged either to the local machine or to a remote log server.\nFor local logs, I/O is logged to the directory specified by the\n.Em iolog_dir\noption\n.Po\n.Pa @iolog_dir@\nby default\n.Pc\nusing a unique session ID that is included in the\n.Nm sudo\nlog line, prefixed with\n.Ql TSID= .\nThe\n.Em iolog_file\noption may be used to control the format of the session ID.\nFor remote logs, the\n.Em log_servers\nsetting is used to specify one or more log servers running\n.Nm sudo_logsrvd\nor another server that implements the protocol described by\n.Xr sudo_logsrv.proto @mansectform@ .\n.Ss I/O logging pitfals\nWhen logging standard input, anything sent to the standard input\nwill be consumed, regardless of whether or not the command run via\n.Nm sudo\nis actively reading the standard input.\nThis may have unexpected results when using\n.Nm sudo\nin a shell script that expects to process the standard input.\nFor example, given the following shell script:\n.Bd -literal -offset 4n\n#!/bin/sh\nsudo echo testing\necho done\n.Ed\n.Pp\nIt will behave as expected when the script is passed to the shell as a\nan argument:\n.Bd -literal -offset 4n\n$ sh test.sh\ntesting\ndone\n.Ed\n.Pp\nHowever, if the script is passed to the shell on the standard input, the\n.Ql sudo echo testing\ncommand will consume the rest of the script.\nThis means that the\n.Ql echo done\nstatement is never executed.\n.Bd -literal -offset 4n\n$ sh -s < test.sh\ntesting\n.Ed\n.Pp\nThere are several ways to work around this problem:\n.Bl -enum\n.It\nRedirect the standard input from\n.Pa /dev/null\nwhen running a command via\n.Nm sudo\nthat does not need to read the standard input.\n.Bd -literal -offset 4n\nsudo echo testing < /dev/null\n.Ed\n.It\nPass the script to the shell by path name instead of via the standard input.\n.Bd -literal -offset 4n\nsh test.sh\n.Ed\n.It\nDisable logging the standard input for commands that do not need\nto read the standard input.\n.Bd -literal -offset 4n\nDefaults!/bin/echo !log_stdin\n.Ed\n.El\n.Pp\nDepending on the command, it may not be desirable to log the\nstandard input or standard output.\nFor example, I/O logging of commands that send or receive large\namount of data via the standard output or standard input such as\n.Xr rsync 1\nand\n.Xr tar 1\ncould fill up the log file system with superfluous data.\nIt is possible to disable logging of the standard input and standard\noutput for such commands as follows:\n.Bd -literal -offset 4n\nCmnd_Alias COPY_CMDS = /usr/bin/tar, /usr/bin/cpio, /usr/bin/rsync\n\n# Log input and output but omit stdin and stdout when copying files.\nDefaults log_input, log_output\nDefaults!COPY_CMDS !log_stdin, !log_stdout\n.Ed\n.Pp\nHowever, be aware that using the\n.Em log_input\nflag or the\n.Dv LOG_INPUT\ncommand tag will also enable\n.Em log_stdin .\nLikewise, the\n.Em log_ouput\nflag or the\n.Dv LOG_OUTPUT\ncommand tag will enable\n.Em log_stdout\nand\n.Em log_stderr.\nCareful ordering of rules may be necessary to achieve the results\nthat you expect.\n.Ss I/O log format\nFor both local and remote I/O logs, each log is stored in a separate\ndirectory that contains the following files:\n.Bl -tag -width \"log.json\"\n.It Pa log\nA text file containing information about the command.\nThe first line consists of the following colon-delimited fields:\nthe time the command was run, the name of the user\nwho ran\n.Nm sudo ,\nthe name of the target user, the name of the target group (optional),\nthe terminal that\n.Nm sudo\nwas run from, and the number of lines and columns of the terminal.\nThe second and third lines contain the working directory the command\nwas run from and the path name of the command itself (with arguments\nif present).\n.It Pa log.json\nA JSON-formatted file containing information about the command.\nThis is similar to the\n.Pa log\nfile but contains additional information and is easily extensible.\nThe\n.Pa log.json\nfile will be used by\n.Xr sudoreplay @mansectsu@\nin preference to the\n.Pa log\nfile if it exists.\nThe file may contain the following elements:\n.Bl -tag -width 4n\n.It timestamp\nA JSON object containing time the command was run.\nIt consists of two values,\n.Em seconds\nand\n.Em nanoseconds .\n.It columns\nThe number of columns of the terminal the command ran on, or zero\nif no terminal was present.\n.It command\nThe fully-qualified path of the command that was run.\n.It lines\nThe number of lines of the terminal the command ran on, or zero\nif no terminal was present.\n.It runargv\nA JSON array representing the command's argument vector as passed to the\n.Xr execve 2\nsystem call.\n.It runenv\nA JSON array representing the command's environment as passed to the\n.Xr execve 2\nsystem call.\n.It rungid\nThe group ID the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.It rungroup\nThe name of the group the command ran as.\nThis element is only present when the user specifies a group on the\ncommand line.\n.It runuid\nThe user ID the command ran as.\n.It runuser\nThe name of the user the command ran as.\n.It submitcwd\nThe current working directory at the time\n.Nm sudo\nwas run.\n.It submithost\nThe name of the host the command was run on.\n.It submituser\nThe name of the user who ran the command via\n.Nm sudo .\n.It ttyname\nThe path name of the terminal the user invoked\n.Nm sudo\nfrom.\nIf the command was run in a pseudo-terminal,\n.Em ttyname\nwill be different from the terminal the command actually ran in.\n.El\n.It Pa timing\nTiming information used to replay the session.\nEach line consists of the I/O log entry type and amount of time\nsince the last entry, followed by type-specific data.\nThe I/O log entry types and their corresponding type-specific data are:\n.Pp\n.Bl -tag -width 4n -compact\n.It 0\nstandard input, number of bytes in the entry\n.It 1\nstandard output, number of bytes in the entry\n.It 2\nstandard error, number of bytes in the entry\n.It 3\nterminal input, number of bytes in the entry\n.It 4\nterminal output, number of bytes in the entry\n.It 5\nwindow change, new number lines and columns\n.It 6\nbug compatibility for\n.Nm sudo\n1.8.7 terminal output\n.It 7\ncommand suspend or resume, signal received\n.El\n.It Pa ttyin\nRaw input from the user's terminal, exactly as it was received.\nThis file is only present if the\n.Em log_input\nor\n.Em log_ttyin\nflags are set and\n.Nm sudo\nwas run from a terminal.\nNo post-processing is performed.\nFor manual viewing, you may wish to convert carriage return characters\nin the log to line feeds.\nFor example:\n.Ql gunzip -c ttyin | tr \\&\"\\er\\&\" \\&\"\\en\\&\"\n.It Pa stdin\nThe standard input when no terminal is present, or input redirected from\na pipe or file.\nThis file is only present if the\n.Em log_input\nor\n.Em log_stdin\nflags are set and the standard input is not connected to a terminal.\n.It Pa ttyout\nOutput from the pseudo-terminal (what the command writes to the screen).\nTerminal-specific post-processing is performed before the data is logged.\nThis means that, for example, line feeds are usually converted to\nline feed/carriage return pairs and tabs may be expanded to spaces.\nThis file is only present if the\n.Em log_output\nor\n.Em log_ttyout\nflags are set and\n.Nm sudo\nwas run from a terminal.\n.It Pa stdout\nThe standard output when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n.Em log_output\nor\n.Em log_stdout\nflags are set and the standard output is not connected to a terminal.\n.It Pa stderr\nThe standard error when no terminal is present, or output redirected to\na pipe or file.\nThis file is only present if the\n.Em log_output\nor\n.Em log_stderr\nflags are set and the standard error is not connected to a terminal.\n.El\n.Pp\nAll files other than\n.Pa log\nare compressed in gzip format unless the\n.Em compress_io\nflag has been disabled.\nDue to buffering, it is not normally possible to display the I/O logs in\nreal-time as the program is executing.\nThe I/O log data will not be complete until the program run by\n.Nm sudo\nhas exited or has been terminated by a signal.\nThe\n.Em iolog_flush\nflag can be used to disable buffering, in which case I/O log data\nis written to disk as soon as it is available.\nThe output portion of an I/O log file can be viewed with the\n.Xr sudoreplay @mansectsu@\nutility, which can also be used to list or search the available logs.\n.Pp\nUser input may contain sensitive information such as passwords (even\nif they are not echoed to the screen), which will be stored in the\nlog file unencrypted.\nIn most cases, logging the command output via\n.Em log_output\nor\n.Dv LOG_OUTPUT\nis all that is required.\nWhen logging input, consider disabling the\n.Em log_passwords\nflag.\n.Pp\nSince each session's I/O logs are stored in a separate directory,\ntraditional log rotation utilities cannot be used to limit the\nnumber of I/O logs.\nThe simplest way to limit the number of I/O is by setting the\n.Em maxseq\noption to the maximum number of logs you wish to store.\nOnce the I/O log sequence number reaches\n.Em maxseq ,\nit will be reset to zero and\n.Nm\nwill truncate and re-use any existing I/O logs.\n.Sh FILES\n.Bl -tag -width 24n\n.It Pa @sysconfdir@/sudo.conf\nSudo front-end configuration\n.It Pa @sysconfdir@/sudoers\nList of who can run what\n.It Pa /etc/group\nLocal groups file\n.It Pa /etc/netgroup\nList of network groups\n.It Pa @iolog_dir@\nI/O log files\n.It Pa @rundir@/ts\nDirectory containing time stamps for the\n.Nm\nsecurity policy\n.It Pa @vardir@/lectured\nDirectory containing lecture status files for the\n.Nm\nsecurity policy\n.It Pa /etc/environment\nInitial environment for\n.Fl i\nmode on AIX and Linux systems\n.El\n.Sh EXAMPLES\nBelow are example\n.Em sudoers\nfile entries.\nAdmittedly, some of these are a bit contrived.\nFirst, we allow a few environment variables to pass and then define our\n.Em aliases :\n.Bd -literal\n# Run X applications through sudo; HOME is used to find the\n# .Xauthority file.  Other programs use HOME to locate configuration\n# files and this may lead to privilege escalation!\nDefaults env_keep += \"DISPLAY HOME\"\n\n# User alias specification\nUser_Alias\tFULLTIMERS = millert, mikef, dowdy\nUser_Alias\tPARTTIMERS = bostley, jwfox, crawl\nUser_Alias\tWEBADMIN = will, wendy, wim\n\n# Runas alias specification\nRunas_Alias\tOP = root, operator\nRunas_Alias\tDB = oracle, sybase\nRunas_Alias\tADMINGRP = adm, oper\n\n# Host alias specification\nHost_Alias\tSPARC = bigtime, eclipse, moet, anchor :\\e\n\t\tSGI = grolsch, dandelion, black :\\e\n\t\tALPHA = widget, thalamus, foobar :\\e\n\t\tHPPA = boa, nag, python\nHost_Alias\tCUNETS = 128.138.0.0/255.255.0.0\nHost_Alias\tCSNETS = 128.138.243.0, 128.138.204.0/24, 128.138.242.0\nHost_Alias\tSERVERS = primary, mail, www, ns\nHost_Alias\tCDROM = orion, perseus, hercules\n\n# Cmnd alias specification\nCmnd_Alias\tDUMPS = /usr/bin/mt, /usr/sbin/dump, /usr/sbin/rdump,\\e\n\t\t\t/usr/sbin/restore, /usr/sbin/rrestore,\\e\n\t\t\tsha224:0GomF8mNN3wlDt1HD9XldjJ3SNgpFdbjO1+NsQ== \\e\n\t\t\t/home/operator/bin/start_backups\nCmnd_Alias\tKILL = /usr/bin/kill\nCmnd_Alias\tPRINTING = /usr/sbin/lpc, /usr/bin/lprm\nCmnd_Alias\tSHUTDOWN = /usr/sbin/shutdown\nCmnd_Alias\tHALT = /usr/sbin/halt\nCmnd_Alias\tREBOOT = /usr/sbin/reboot\nCmnd_Alias\tSHELLS = /usr/bin/sh, /usr/bin/csh, /usr/bin/ksh,\\e\n\t\t\t /usr/local/bin/tcsh, /usr/bin/rsh,\\e\n\t\t\t /usr/local/bin/zsh\nCmnd_Alias\tSU = /usr/bin/su\nCmnd_Alias\tPAGERS = /usr/bin/more, /usr/bin/pg, /usr/bin/less\n.Ed\n.Pp\nHere we override some of the compiled in default values.\nWe want\n.Nm sudo\nto log via\n.Xr syslog 3\nusing the\n.Em auth\nfacility in all cases and for commands to be run with\nthe target user's home directory as the working directory.\nWe don't want to subject the full time staff to the\n.Nm sudo\nlecture and we want to allow them to run commands in a\n.Xr chroot 2\n.Dq sandbox\nvia the\n.Fl R\noption.\nUser\n.Sy millert\nneed not provide a password and we don't want to reset the\n.Ev LOGNAME\nor\n.Ev USER\nenvironment variables when running commands as\n.Sy root .\nAdditionally, on the machines in the\n.Dv SERVERS\n.Em Host_Alias ,\nwe keep an additional local log file and make sure we log the year\nin each log line since the log entries will be kept around for several years.\nLastly, we disable shell escapes for the commands in the PAGERS\n.Em Cmnd_Alias\n.Po\n.Pa /usr/bin/more ,\n.Pa /usr/bin/pg\nand\n.Pa /usr/bin/less\n.Pc .\nThis will not effectively constrain users with\n.Nm sudo\n.Sy ALL\nprivileges.\n.Bd -literal\n# Override built-in defaults\nDefaults\t\tsyslog=auth,runcwd=~\nDefaults>root\t\t!set_logname\nDefaults:FULLTIMERS\t!lecture,runchroot=*\nDefaults:millert\t!authenticate\nDefaults@SERVERS\tlog_year, logfile=@log_dir@/sudo.log\nDefaults!PAGERS\t\tnoexec\n.Ed\n.Pp\nThe\n.Em User specification\nis the part that actually determines who may run what.\n.Bd -literal\nroot\t\tALL = (ALL) ALL\n%wheel\t\tALL = (ALL) ALL\n.Ed\n.Pp\nWe let\n.Sy root\nand any user in group\n.Sy wheel\nrun any command on any host as any user.\n.Bd -literal\nFULLTIMERS\tALL = NOPASSWD: ALL\n.Ed\n.Pp\nFull time sysadmins\n.Po\n.Sy millert ,\n.Sy mikef ,\nand\n.Sy dowdy\n.Pc\nmay run any command on any host without authenticating themselves.\n.Bd -literal\nPARTTIMERS\tALL = ALL\n.Ed\n.Pp\nPart time sysadmins\n.Sy bostley ,\n.Sy jwfox ,\nand\n.Sy crawl )\nmay run any command on any host but they must authenticate themselves\nfirst (since the entry lacks the\n.Dv NOPASSWD\ntag).\n.Bd -literal\njack\t\tCSNETS = ALL\n.Ed\n.Pp\nThe user\n.Sy jack\nmay run any command on the machines in the\n.Dv CSNETS\nalias (the networks 128.138.243.0, 128.138.204.0, and 128.138.242.0).\nOf those networks, only 128.138.204.0 has an explicit netmask (in\nCIDR notation) indicating it is a class C network.\nFor the other networks in\n.Dv CSNETS ,\nthe local machine's netmask will be used during matching.\n.Bd -literal\nlisa\t\tCUNETS = ALL\n.Ed\n.Pp\nThe user\n.Sy lisa\nmay run any command on any host in the\n.Dv CUNETS\nalias (the class B network 128.138.0.0).\n.Bd -literal\noperator\tALL = DUMPS, KILL, SHUTDOWN, HALT, REBOOT, PRINTING,\\e\n\t\tsudoedit /etc/printcap, /usr/oper/bin/\n.Ed\n.Pp\nThe\n.Sy operator\nuser may run commands limited to simple maintenance.\nHere, those are commands related to backups, killing processes, the\nprinting system, shutting down the system, and any commands in the\ndirectory\n.Pa /usr/oper/bin/ .\nOne command in the\n.Dv DUMPS\nCmnd_Alias includes a sha224 digest,\n.Pa /home/operator/bin/start_backups .\nThis is because the directory containing the script is writable by the\noperator user.\nIf the script is modified (resulting in a digest mismatch) it will no longer\nbe possible to run it via\n.Nm sudo .\n.Bd -literal\njoe\t\tALL = /usr/bin/su operator\n.Ed\n.Pp\nThe user\n.Sy joe\nmay only\n.Xr su 1\nto operator.\n.Bd -literal\npete\t\tHPPA = /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd *root*\n\n%opers\t\tALL = (: ADMINGRP) /usr/sbin/\n.Ed\n.Pp\nUsers in the\n.Sy opers\ngroup may run commands in\n.Pa /usr/sbin/\nas themselves\nwith any group in the\n.Dv ADMINGRP\n.Em Runas_Alias\n(the\n.Sy adm\nand\n.Sy oper\ngroups).\n.Pp\nThe user\n.Sy pete\nis allowed to change anyone's password except for\n.Sy root\non the\n.Dv HPPA\nmachines.\nBecause command line arguments are matched as a single,\nconcatenated string, the\n.Ql *\nwildcard will match\n.Em multiple\nwords.\nThis example assumes that\n.Xr passwd 1\ndoes not take multiple user names on the command line.\nOn systems with GNU\n.Xr getopt 3 ,\noptions to\n.Xr passwd 1\nmay be specified after the user argument.\nAs a result, this rule will also allow:\n.Bd -literal -offset 4n\npasswd username --expire\n.Ed\n.Pp\nwhich may not be desirable.\n.Bd -literal\nbob\t\tSPARC = (OP) ALL : SGI = (OP) ALL\n.Ed\n.Pp\nThe user\n.Sy bob\nmay run anything on the\n.Dv SPARC\nand\n.Dv SGI\nmachines as any user listed in the\n.Dv OP\n.Em Runas_Alias\n.Po\n.Sy root\nand\n.Sy operator .\n.Pc\n.Bd -literal\njim\t\t+biglab = ALL\n.Ed\n.Pp\nThe user\n.Sy jim\nmay run any command on machines in the\n.Em biglab\nnetgroup.\n.Nm sudo\nknows that\n.Dq biglab\nis a netgroup due to the\n.Ql +\nprefix.\n.Bd -literal\n+secretaries\tALL = PRINTING, /usr/bin/adduser, /usr/bin/rmuser\n.Ed\n.Pp\nUsers in the\n.Sy secretaries\nnetgroup need to help manage the printers as well as add and remove users,\nso they are allowed to run those commands on all machines.\n.Bd -literal\nfred\t\tALL = (DB) NOPASSWD: ALL\n.Ed\n.Pp\nThe user\n.Sy fred\ncan run commands as any user in the\n.Dv DB\n.Em Runas_Alias\n.Po\n.Sy oracle\nor\n.Sy sybase\n.Pc\nwithout giving a password.\n.Bd -literal\njohn\t\tALPHA = /usr/bin/su [!-]*, !/usr/bin/su *root*\n.Ed\n.Pp\nOn the\n.Dv ALPHA\nmachines, user\n.Sy john\nmay su to anyone except\n.Sy root\nbut he is not allowed to specify any options to the\n.Xr su 1\ncommand.\n.Bd -literal\njen\t\tALL, !SERVERS = ALL\n.Ed\n.Pp\nThe user\n.Sy jen\nmay run any command on any machine except for those in the\n.Dv SERVERS\n.Em Host_Alias\n(primary, mail, www, and ns).\n.Bd -literal\njill\t\tSERVERS = /usr/bin/, !SU, !SHELLS\n.Ed\n.Pp\nFor any machine in the\n.Dv SERVERS\n.Em Host_Alias ,\n.Sy jill\nmay run\nany commands in the directory\n.Pa /usr/bin/\nexcept for those commands\nbelonging to the\n.Dv SU\nand\n.Dv SHELLS\n.Em Cmnd_Aliases .\nWhile not specifically mentioned in the rule, the commands in the\n.Dv PAGERS\n.Em Cmnd_Alias\nall reside in\n.Pa /usr/bin\nand have the\n.Em noexec\noption set.\n.Bd -literal\nsteve\t\tCSNETS = (operator) /usr/local/op_commands/\n.Ed\n.Pp\nThe user\n.Sy steve\nmay run any command in the directory /usr/local/op_commands/\nbut only as user operator.\n.Bd -literal\nmatt\t\tvalkyrie = KILL\n.Ed\n.Pp\nOn his personal workstation, valkyrie,\n.Sy matt\nneeds to be able to kill hung processes.\n.Bd -literal\nWEBADMIN\twww = (www) ALL, (root) /usr/bin/su www\n.Ed\n.Pp\nOn the host www, any user in the\n.Dv WEBADMIN\n.Em User_Alias\n(will, wendy, and wim), may run any command as user www (which owns the\nweb pages) or simply\n.Xr su 1\nto www.\n.Bd -literal\nALL\t\tCDROM = NOPASSWD: /sbin/umount /CDROM,\\e\n\t\t/sbin/mount -o nosuid\\e,nodev /dev/cd0a /CDROM\n.Ed\n.Pp\nAny user may mount or unmount a CD-ROM on the machines in the CDROM\n.Em Host_Alias\n(orion, perseus, hercules) without entering a password.\nThis is a bit tedious for users to type, so it is a prime candidate\nfor encapsulating in a shell script.\n.Sh SECURITY NOTES\n.Ss Limitations of the So !\\& Sc operator\nIt is generally not effective to\n.Dq subtract\ncommands from\n.Sy ALL\nusing the\n.Ql !\\&\noperator.\nA user can trivially circumvent this by copying the desired command\nto a different name and then executing that.\nFor example:\n.Bd -literal\nbill\tALL = ALL, !SU, !SHELLS\n.Ed\n.Pp\nDoesn't really prevent\n.Sy bill\nfrom running the commands listed in\n.Dv SU\nor\n.Dv SHELLS\nsince he can simply copy those commands to a different name, or use\na shell escape from an editor or other program.\nTherefore, these kind of restrictions should be considered\nadvisory at best (and reinforced by policy).\n.Pp\nIn general, if a user has sudo\n.Sy ALL\nthere is nothing to prevent them from creating their own program that gives\nthem a\n.Sy root\nshell (or making their own copy of a shell) regardless of any\n.Ql !\\&\nelements in the user specification.\n.Ss Security implications of Em fast_glob\nIf the\n.Em fast_glob\noption is in use, it is not possible to reliably negate commands where the\npath name includes globbing (aka wildcard) characters.\nThis is because the C library's\n.Xr fnmatch 3\nfunction cannot resolve relative paths.\nWhile this is typically only an inconvenience for rules that grant privileges,\nit can result in a security issue for rules that subtract or revoke privileges.\n.Pp\nFor example, given the following\n.Em sudoers\nfile entry:\n.Bd -literal\njohn\tALL = /usr/bin/passwd [a-zA-Z0-9]*, /usr/bin/chsh [a-zA-Z0-9]*,\\e\n              /usr/bin/chfn [a-zA-Z0-9]*, !/usr/bin/* root\n.Ed\n.Pp\nUser\n.Sy john\ncan still run\n.Ql /usr/bin/passwd root\nif\n.Em fast_glob\nis enabled by changing to\n.Pa /usr/bin\nand running\n.Ql ./passwd root\ninstead.\n.Pp\nAnother potential issue is that when\n.Nm sudo\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n.Em sudoers\nfile.\nThis may lead to a time of check versus time of use race condition.\n.Ss Wildcards in command arguments\nCommand line arguments are matched as a single, concatenated string.\nThis mean a wildcard character such as\n.Ql \\&?\nor\n.Ql *\nwill match across word boundaries, which may be unexpected.\nFor example, while a sudoers entry like:\n.Bd -literal -offset 4n\n%operator ALL = /bin/cat @log_dir@/messages*\n.Ed\n.Pp\nwill allow command like:\n.Bd -literal -offset 4n\n$ sudo cat @log_dir@/messages.1\n.Ed\n.Pp\nIt will also allow:\n.Bd -literal -offset 4n\n$ sudo cat @log_dir@/messages /etc/shadow\n.Ed\n.Pp\nwhich is probably not what was intended.\nA safer alternative is to use a regular expression for matching\ncommand line arguments.\nThe above example can be rewritten as a regular expression:\n.Bd -literal -offset 4n\n%operator ALL = /bin/cat ^@log_dir@/messages[^[:space:]]*$\n.Ed\n.Pp\nThe regular expression will only match a single file with a\nname that begins with\n.Pa @log_dir@/messages\nand does not include any white space in the name.\nIt is often better to do command line processing outside of the\n.Em sudoers\nfile in a scripting language for anything non-trivial.\n.Ss Regular expressions in command names\nUsing a regular expression to match a command name has the same\nsecurity implications as using the\n.Em fast_glob\noption:\n.Bl -bullet -width 1n\n.It\nIt is not possible to reliably negate commands when the\npath name is a regular expression.\n.It\nWhen\n.Nm sudo\nexecutes the command, it must use the command or path specified by\nthe user instead of a path listed in the\n.Em sudoers\nfile.\nThis may lead to a time of check versus time of use race condition.\n.El\n.Pp\nThese issues do not apply to rules where only the command line\noptions are matched using a regular expression.\n.Ss Preventing shell escapes\nOnce\n.Nm sudo\nexecutes a program, that program is free to do whatever\nit pleases, including run other programs.\nThis can be a security issue since it is not uncommon for a program to\nallow shell escapes, which lets a user bypass\n.Nm sudo Ns 's\naccess control and logging.\nCommon programs that permit shell escapes include shells (obviously),\neditors, paginators, mail, and terminal programs.\n.Pp\nThere are four basic approaches to this problem:\n.Bl -tag -width \"intercept\"\n.It restrict\nAvoid giving users access to commands that allow the user to run\narbitrary commands.\nMany editors have a restricted mode where shell\nescapes are disabled, though\n.Nm sudoedit\nis a better solution to\nrunning editors via\n.Nm sudo .\nDue to the large number of programs that\noffer shell escapes, restricting users to the set of programs that\ndo not is often unworkable.\n.It intercept\nOn most systems,\n.Nm sudo Ns 's\n.Em intercept\nfunctionality can be used to transparently intercept an attempt to\nrun a new command, allow or deny it based on\n.Em sudoers\nrules, and log the result.\nFor example, this can be used to restrict the commands run from\nwithin a privileged shell or editor.\n.Pp\nThere are two underlying mechanisms that may be used to implement\n.Em intercept\nmode:\n.Em dso\nand\n.Em trace .\nThe\n.Em intercept_type\nsetting can be used to select between them.\n.Pp\nThe first mechanism,\n.Em dso ,\noverrides the standard C library functions that are used to execute a\ncommand.\nIt does this by setting an environment variable (usually\n.Ev LD_PRELOAD )\nto the path of a dynamic shared object, or shared library,\ncontaining custom versions of the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr execv 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\nand\n.Xr system 3\nlibrary functions that connect back to\n.Nm sudo\nfor a policy decision.\nNote, however, that this applies only to dynamically-linked\nexecutables.\nIt is not possible to intercept commands for statically-linked executables\nor executables that run under binary emulation this way.\nBecause most dynamic loaders ignore\n.Ev LD_PRELOAD\n(or the equivalent) when running set-user-ID and set-group-ID programs,\n.Nm\nwill not permit such programs to be run in\n.Em intercept\nmode by default.\nThe\n.Em dso\nmechanism is incompatible with\n.Nm sudo Ns 's\nSELinux RBAC support (but see below).\nSELinux disables\n.Ev LD_PRELOAD\nby default and interferes with file descriptor inheritance, which\n.Nm sudo\nrelies on.\n.Pp\nThe second mechanism,\n.Em trace ,\nis available on Linux systems that support\n.Xr seccomp 2\nfiltering.\nIt uses\n.Xr ptrace 2\nand\n.Xr seccomp 2\nto intercept the\n.Xr execve 2\nsystem call instead of pre-loading a dynamic shared object.\nBoth static and dynamic executables are supported and it is compatible with\n.Nm sudo Ns 's\nSELinux RBAC mode.\nFunctions utilizing the\n.Xr execveat 2\nsystem call, such as\n.Xr fexecve 3 ,\nare not currently intercepted.\n.Pp\nThe\n.Em intercept\nfeature is known to work on Solaris, *BSD, Linux, macOS, HP-UX 11.x\nand AIX 5.3 and above.\nIt should be supported on most operating systems that support the\n.Ev LD_PRELOAD\nenvironment variable or an equivalent.\nIt is not possible to intercept shell built-in commands or restrict\nthe ability to read or write sensitive files from within a shell.\n.Pp\nTo enable intercept mode on a per-command basis, use the\n.Dv INTERCEPT\ntag as documented in the User Specification section above.\nHere is that example again:\n.Bd -literal\nchuck\tresearch = INTERCEPT: ALL\n.Ed\n.Pp\nThis allows user\n.Sy chuck\nto run any command on the machine\n.Dq research\nin intercept mode.\nAny commands run via shell escapes will be validated and logged by\n.Nm sudo .\nIf you are unsure whether or not your system is capable of supporting\n.Em intercept ,\nyou can always just try it out and check whether or not external\ncommands run via a shell are logged when\n.Em intercept\nis enabled.\n.Pp\nThere is an inherent race condition between when a command is checked against\n.Nm\nrules and when it is actually executed.\nIf a user is allowed to run arbitrary commands, they may be able\nto change the\n.Xr execve 2\narguments in the program after the\n.Nm\npolicy check has completed but before the new command is executed.\nStarting with version 1.9.12, the\n.Em trace\nmethod will verify that the command and its arguments have not\nchanged after\n.Xr execve 2\nhas completed but before execution of the new program has had a chance to run.\nThis is not the case with the\n.Em dso\nmethod.\nSee the description of the\n.Em intercept_verify\nsetting for more information.\n.It log\nThere are two separate but related ways to log additional commands.\nThe first is to enable I/O logging using the\n.Em log_output\nflag.\nThis will log the command's output but will not create an event log\nentry when the additional command is run.\nThe second is to enable the\n.Em log_subcmds\nflag in\n.Em sudoers\nwhich will create an event log entry every time a new command is run.\nIf I/O logging is also enabled, the log entry will include a time offset\ninto the I/O log to indicate when the command was run.\nThis offset can be passed to the\n.Xr sudoreplay @mansectsu@\nutility to replay the I/O log at the exact moment when the command was run.\nThe\n.Em log_subcmds\nflag uses the same mechanism as\n.Em intercept\n(see above) and has the same limitations.\n.It noexec\n.Nm sudo Ns 's\n.Em noexec\nfunctionality can be used to prevent a program run by\n.Nm sudo\nfrom executing any other programs.\nOn most systems, it uses the same\n.Ev LD_PRELOAD\nmechanism as\n.Em intercept\n(see above) and thus the same caveats apply.\nThe\n.Em noexec\nfunctionality\nis capable of blocking execution of commands run via the\n.Xr execve 2 ,\n.Xr execl 3 ,\n.Xr execle 3 ,\n.Xr execlp 3 ,\n.Xr exect 3 ,\n.Xr execv 3 ,\n.Xr execveat 3 ,\n.Xr execvP 3 ,\n.Xr execvp 3 ,\n.Xr execvpe 3 ,\n.Xr fexecve 3 ,\n.Xr popen 3 ,\n.Xr posix_spawn 3 ,\n.Xr posix_spawnp 3 ,\n.Xr system 3 ,\nand\n.Xr wordexp 3\nfunctions.\nOn Linux, a\n.Xr seccomp 2\nfilter is used to implement\n.Em noexec .\nOn Solaris 10 and higher,\n.Em noexec\nuses Solaris privileges instead of the\n.Ev LD_PRELOAD\nenvironment variable.\n.Pp\nTo enable\n.Em noexec\nfor a command, use the\n.Dv NOEXEC\ntag as documented in the User Specification section above.\nHere is that example again:\n.Bd -literal\naaron\tshanty = NOEXEC: /usr/bin/more, /usr/bin/vi\n.Ed\n.Pp\nThis allows user\n.Sy aaron\nto run\n.Pa /usr/bin/more\nand\n.Pa /usr/bin/vi\nwith\n.Em noexec\nenabled.\nThis will prevent those two commands from\nexecuting other commands (such as a shell).\nIf you are unsure whether or not your system is capable of supporting\n.Em noexec\nyou can always just try it out and check whether shell escapes work when\n.Em noexec\nis enabled.\n.El\n.Pp\nRestricting shell escapes is not a panacea.\nPrograms running as\n.Sy root\nare still capable of many potentially hazardous operations (such\nas changing or overwriting files) that could lead to unintended\nprivilege escalation.\nIn the specific case of an editor, a safer approach is to give the\nuser permission to run\n.Nm sudoedit\n(see below).\n.Ss Secure editing\nThe\n.Nm\nplugin includes\n.Nm sudoedit\nsupport which allows users to securely edit files with the editor\nof their choice.\nAs\n.Nm sudoedit\nis a built-in command, it must be specified in the\n.Em sudoers\nfile without a leading path.\nHowever, it may take command line arguments just as a normal command does.\nWildcards used in\n.Em sudoedit\ncommand line arguments are expected to be path names, so a forward slash\n.Pq Ql /\nwill not be matched by a wildcard.\n.Pp\nUnlike other\n.Nm sudo\ncommands, the editor is run with the permissions of the invoking\nuser and with the environment unmodified.\nMore information may be found in the description of the\n.Fl e\noption in\n.Xr sudo @mansectsu@ .\n.Pp\nFor example, to allow user operator to edit the\n.Dq message of the day\nfile on any machine:\n.Bd -literal -offset 4n\noperator ALL = sudoedit /etc/motd\n.Ed\n.Pp\nThe operator user then runs\n.Nm sudoedit\nas follows:\n.Bd -literal -offset 4n\n$ sudoedit /etc/motd\n.Ed\n.Pp\nThe editor will run as the operator user, not\n.Sy @runas_default@ ,\non a temporary copy of\n.Pa /etc/motd .\nAfter the file has been edited,\n.Pa /etc/motd\nwill be updated with the contents of the temporary copy.\n.Pp\nUsers should\n.Em never\nbe granted\n.Nm sudoedit\npermission to edit a file that resides in a directory the user\nhas write access to, either directly or via a wildcard.\nIf the user has write access to the directory it is possible to\nreplace the legitimate file with a link to another file,\nallowing the editing of arbitrary files.\nTo prevent this, starting with version 1.8.16, symbolic links will\nnot be followed in writable directories and\n.Nm sudoedit\nwill refuse to edit a file located in a writable directory\nunless the\n.Em sudoedit_checkdir\noption has been disabled or the invoking user is\n.Sy root .\nAdditionally, in version 1.8.15 and higher,\n.Nm sudoedit\nwill refuse to open a symbolic link unless either the\n.Em sudoedit_follow\noption is enabled or the\n.Em sudoedit\ncommand is prefixed with the\n.Dv FOLLOW\ntag in the\n.Em sudoers\nfile.\n.Ss Time stamp file checks\n.Nm\nwill check the ownership of its time stamp directory\n.Po\n.Pa @rundir@/ts\nby default\n.Pc\nand ignore the directory's contents if it is not owned by\n.Sy root\nor if it is writable by a user other than\n.Sy root .\nOlder versions of\n.Nm sudo\nstored time stamp files in\n.Pa /tmp ;\nthis is no longer recommended as it may be possible for a user\nto create the time stamp themselves on systems that allow\nunprivileged users to change the ownership of files they create.\n.Pp\nWhile the time stamp directory\n.Em should\nbe cleared at reboot time, not all systems contain a\n.Pa /run\nor\n.Pa /var/run\ndirectory.\nTo avoid potential problems,\n.Nm\nwill ignore time stamp files that date from before the machine booted\non systems where the boot time is available.\n.Pp\nSome systems with graphical desktop environments allow unprivileged\nusers to change the system clock.\nSince\n.Nm\nrelies on the system clock for time stamp validation, it may be\npossible on such systems for a user to run\n.Nm sudo\nfor longer than\n.Em timestamp_timeout\nby setting the clock back.\nTo combat this,\n.Nm\nuses a monotonic clock (which never moves backwards) for its time stamps\nif the system supports it.\n.Pp\n.Nm\nwill not honor time stamps set far in the future.\nTime stamps with a date greater than current_time + 2 *\n.Dv TIMEOUT\nwill be ignored and\n.Nm\nwill log and complain.\n.Pp\nIf the\n.Em timestamp_type\noption is set to\n.Dq tty ,\nthe time stamp record includes the device number of the terminal\nthe user authenticated with.\nThis provides per-terminal granularity but time stamp records may still\noutlive the user's session.\n.Pp\nUnless the\n.Em timestamp_type\noption is set to\n.Dq global ,\nthe time stamp record also includes the session ID of the process\nthat last authenticated.\nThis prevents processes in different terminal sessions from using\nthe same time stamp record.\nOn systems where a process's start time can be queried,\nthe start time of the session leader\nis recorded in the time stamp record.\nIf no terminal is present or the\n.Em timestamp_type\noption is set to\n.Dq ppid ,\nthe start time of the parent process is used instead.\nIn most cases this will prevent a time stamp record from being re-used\nwithout the user entering a password when logging out and back in again.\n.Sh DEBUGGING\nVersions 1.8.4 and higher of the\n.Nm\nplugin support a flexible debugging framework that can help track\ndown what the plugin is doing internally if there is a problem.\nThis can be configured in the\n.Xr sudo.conf @mansectform@\nfile.\n.Pp\nThe\n.Nm\nplugin uses the same debug flag format as the\n.Nm sudo\nfront-end:\n.Em subsystem Ns @ Ns Em priority .\n.Pp\nThe priorities used by\n.Nm ,\nin order of decreasing severity,\nare:\n.Em crit , err , warn , notice , diag , info , trace ,\nand\n.Em debug .\nEach priority, when specified, also includes all priorities higher\nthan it.\nFor example, a priority of\n.Em notice\nwould include debug messages logged at\n.Em notice\nand higher.\n.Pp\nThe following subsystems are used by the\n.Nm\nplugin:\n.Bl -tag -width \"defaults\"\n.It Em alias\n.Em User_Alias ,\n.Em Runas_Alias ,\n.Em Host_Alias\nand\n.Em Cmnd_Alias\nprocessing\n.It Em all\nmatches every subsystem\n.It Em audit\nBSM and Linux audit code\n.It Em auth\nuser authentication\n.It Em defaults\n.Em sudoers\nfile\n.Em Defaults\nsettings\n.It Em env\nenvironment handling\n.It Em ldap\nLDAP-based sudoers\n.It Em logging\nlogging support\n.It Em match\nmatching of users, groups, hosts, and netgroups in the\n.Em sudoers\nfile\n.It Em netif\nnetwork interface handling\n.It Em nss\nnetwork service switch handling in\n.Nm\n.It Em parser\n.Em sudoers\nfile parsing\n.It Em perms\npermission setting\n.It Em plugin\nThe equivalent of\n.Em main\nfor the plugin.\n.It Em pty\npseudo-terminal related code\n.It Em rbtree\nredblack tree internals\n.It Em sssd\nSSSD-based sudoers\n.It Em util\nutility functions\n.El\n.Pp\nFor example:\n.Bd -literal\nDebug @sudoers_plugin@ @log_dir@/sudoers_debug match@info,nss@info\n.Ed\n.Pp\nFor more information, see the\n.Xr sudo.conf @mansectform@\nmanual.\n.Sh SEE ALSO\n.Xr ssh 1 ,\n.Xr su 1 ,\n.Xr fnmatch 3 ,\n.Xr glob 3 ,\n.Xr mktemp 3 ,\n.Xr strftime 3 ,\n.Xr sudo.conf @mansectform@ ,\n.Xr sudo_plugin @mansectform@ ,\n.Xr sudoers.ldap @mansectform@ ,\n.Xr sudoers_timestamp @mansectform@ ,\n.Xr sudo @mansectsu@ ,\n.Xr visudo @mansectsu@\n.Sh AUTHORS\nMany people have worked on\n.Nm sudo\nover the years; this version consists of code written primarily by:\n.Bd -ragged -offset indent\n.An Todd C. Miller\n.Ed\n.Pp\nSee the CONTRIBUTORS.md file in the\n.Nm sudo\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n.Nm sudo .\n.Sh CAVEATS\nThe\n.Em sudoers\nfile should\n.Sy always\nbe edited by the\n.Nm visudo\nutility which locks the file and checks for syntax errors.\nIf\n.Em sudoers\ncontains syntax errors,\n.Nm sudo\nmay refuse to run, which is a serious problem if\n.Nm sudo\nis your only method of obtaining superuser privileges.\nRecent versions of\n.Nm\nwill attempt to recover after a syntax error by ignoring the rest of\nthe line after encountering an error.\nOlder versions of\n.Nm sudo\nwill not run if\n.Em sudoers\ncontains a syntax error.\n.Pp\nWhen using netgroups of machines (as opposed to users), if you\nstore fully qualified host name in the netgroup (as is usually the\ncase), you either need to have the machine's host name be fully qualified\nas returned by the\n.Em hostname\ncommand or use the\n.Em fqdn\noption in\n.Em sudoers .\n.Sh BUGS\nIf you believe you have found a bug in\n.Nm sudo ,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.Sh SUPPORT\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.Sh DISCLAIMER\n.Nm sudo\nis provided\n.Dq AS IS\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n.Nm sudo\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\" Automatically generated from an mdoc input file.  Do not edit.\n.\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.TH \"SUDOREPLAY\" \"@mansectsu@\" \"January 16, 2023\" \"Sudo @PACKAGE_VERSION@\" \"System Manager's Manual\"\n.nh\n.if n .ad l\n.SH \"NAME\"\n\\fBsudoreplay\\fR\n\\- replay sudo session logs\n.SH \"SYNOPSIS\"\n.HP 11n\n\\fBsudoreplay\\fR\n[\\fB\\-FhnRS\\fR]\n[\\fB\\-d\\fR\\ \\fIdir\\fR]\n[\\fB\\-f\\fR\\ \\fIfilter\\fR]\n[\\fB\\-m\\fR\\ \\fInum\\fR]\n[\\fB\\-s\\fR\\ \\fInum\\fR]\nID[\\fI@offset\\fR]\n.HP 11n\n\\fBsudoreplay\\fR\n[\\fB\\-h\\fR]\n[\\fB\\-d\\fR\\ \\fIdir\\fR]\n\\fB\\-l\\fR\n[search\\ expression]\n.SH \"DESCRIPTION\"\n\\fBsudoreplay\\fR\nplays back or lists the output logs created by\n\\fBsudo\\fR.\nWhen replaying,\n\\fBsudoreplay\\fR\ncan play the session back in real-time, or the playback speed may be\nadjusted (faster or slower) based on the command line options.\n.PP\nThe\n\\fIID\\fR\nshould either be a six character sequence of digits and\nupper case letters, e.g.,\n\\(lq0100A5\\(rq\nor a path name.\nThe\n\\fIID\\fR\nmay include an optional\n\\fI@offset\\fR\nsuffix which may be used to start replaying at a specific time offset.\nThe\n\\fI@offset\\fR\nis specified as a number in seconds since the start of the session\nwith an optional decimal fraction.\n.PP\nPath names may be relative to the I/O log directory\n\\fI@iolog_dir@\\fR\n(unless overridden by the\n\\fB\\-d\\fR\noption) or fully qualified, beginning with a\n\\(oq/\\(cq\ncharacter.\nWhen a command is run via\n\\fBsudo\\fR\nwith\n\\fIlog_output\\fR\nenabled in the\n\\fIsudoers\\fR\nfile, a\n\\(lqTSID=ID\\(rq\nstring is logged via\nsyslog(3)\nor to the\n\\fBsudo\\fR\nlog file.\nThe\n\\fIID\\fR\nmay also be determined using\n\\fBsudoreplay\\fR's\nlist mode.\n.PP\nIn list mode,\n\\fBsudoreplay\\fR\ncan be used to find the ID of a session based on a number of criteria\nsuch as the user, tty, or command run.\n.PP\nIn replay mode, if the standard input and output are connected to a terminal\nand the\n\\fB\\-n\\fR\noption is not specified,\n\\fBsudoreplay\\fR\nwill operate interactively.\nIn interactive mode,\n\\fBsudoreplay\\fR\nwill attempt to adjust the terminal size to match that of the session and\nwrite directly to the terminal (not all terminals support this).\nAdditionally, it will poll the keyboard and act on the following keys:\n.TP 14n\n\\(oq\\fR\\en\\fR\\(cq or \\(oq\\fR\\er\\fR\\(cq\nSkip to the next replay event; useful for long pauses.\n.TP 14n\n\\(oq\\fR\\ \\fR\\(cq (space)\nPause output; press any key to resume.\n.TP 14n\n\\(oq<\\(cq\nReduce the playback speed by one half.\n.TP 14n\n\\(oq>\\(cq\nDouble the playback speed.\n.PP\nThe session can be interrupted via control-C.\nWhen the session has finished, the terminal is restored to its\noriginal size if it was changed during playback.\n.PP\nThe options are as follows:\n.TP 8n\n\\fB\\-d\\fR \\fIdir\\fR, \\fB\\--directory\\fR=\\fIdir\\fR\nStore session logs in\n\\fIdir\\fR\ninstead of the default,\n\\fI@iolog_dir@\\fR.\n.TP 8n\n\\fB\\-f\\fR \\fIfilter\\fR, \\fB\\--filter\\fR=\\fIfilter\\fR\nSelect which I/O type(s) to display.\nBy default,\n\\fBsudoreplay\\fR\nwill display the command's standard output, standard error, and tty output.\nThe\n\\fIfilter\\fR\nargument is a comma-separated list, consisting of one or more of following:\n\\fIstdin\\fR,\n\\fIstdout\\fR,\n\\fIstderr\\fR,\n\\fIttyin\\fR,\nand\n\\fIttyout\\fR.\n.TP 8n\n\\fB\\-F\\fR, \\fB\\--follow\\fR\nEnable\n\\(lqfollow mode\\(rq.\nWhen replaying a session,\n\\fBsudoreplay\\fR\nwill ignore end-of-file and keep replaying until the log is complete.\nThis can be used to replay a session that is still in progress,\nsimilar to\n\\(lqtail -f\\(rq.\nAn I/O log file is considered to be complete when the write bits\nhave been cleared on the session's timing file.\nVersions of\n\\fBsudo\\fR\nprior to 1.9.1 do not clear the write bits upon completion.\n.TP 8n\n\\fB\\-h\\fR, \\fB\\--help\\fR\nDisplay a short help message to the standard output and exit.\n.TP 8n\n\\fB\\-l\\fR, \\fB\\--list\\fR [\\fIsearch expression\\fR]\nEnable\n\\(lqlist mode\\(rq.\nIn this mode,\n\\fBsudoreplay\\fR\nwill list available sessions in a format similar to the\n\\fBsudo\\fR\nlog file format, sorted by file name (or sequence number).\nAny control characters present in the log data are formated in octal\nwith a leading\n\\(oq#\\(cq\ncharacter.\nFor example, a horizontal tab is displayed as\n\\(oq#011\\(cq\nand an embedded carriage return is displayed as\n\\(oq#015\\(cq.\n.sp\nIf a\n\\fIsearch expression\\fR\nis specified, it will be used to restrict the IDs that are displayed.\nAn expression is composed of the following predicates:\n.PP\n.RS 8n\n.PD 0\n.TP 8n\ncommand \\fIpattern\\fR\nEvaluates to true if the command run matches the POSIX extended\nregular expression\n\\fIpattern\\fR.\n.PD\n.TP 8n\ncwd \\fIdirectory\\fR\nEvaluates to true if the command was run with the specified current\nworking directory.\n.TP 8n\nfromdate \\fIdate\\fR\nEvaluates to true if the command was run on or after\n\\fIdate\\fR.\nSee\n\\fIDate and time format\\fR\nfor a description of supported date and time formats.\n.TP 8n\ngroup \\fIrunas_group\\fR\nEvaluates to true if the command was run with the specified\n\\fIrunas_group\\fR.\nUnless a\n\\fIrunas_group\\fR\nwas explicitly specified when\n\\fBsudo\\fR\nwas run this field will be empty in the log.\n.TP 8n\nhost \\fIhostname\\fR\nEvaluates to true if the command was run on the specified\n\\fIhostname\\fR.\n.TP 8n\nrunas \\fIrunas_user\\fR\nEvaluates to true if the command was run as the specified\n\\fIrunas_user\\fR.\nBy default,\n\\fBsudo\\fR\nruns commands as the\n\\fBroot\\fR\nuser.\n.TP 8n\ntodate \\fIdate\\fR\nEvaluates to true if the command was run on or prior to\n\\fIdate\\fR.\nSee\n\\fIDate and time format\\fR\nfor a description of supported date and time formats.\n.TP 8n\ntty \\fItty name\\fR\nEvaluates to true if the command was run on the specified terminal device.\nThe\n\\fItty name\\fR\nshould be specified without the\n\\fI/dev/\\fR\nprefix, e.g.,\n\\fItty01\\fR\ninstead of\n\\fI/dev/tty01\\fR.\n.TP 8n\nuser \\fIuser name\\fR\nEvaluates to true if the ID matches a command run by\n\\fIuser name\\fR.\n.PP\nPredicates may be abbreviated to the shortest unique string.\n.sp\nPredicates may be combined using\n\\fIand\\fR,\n\\fIor\\fR,\nand\n\\fI\\&!\\fR\noperators as well as\n\\(oq\\&(\\(cq\nand\n\\(oq\\&)\\(cq\ngrouping (parentheses must generally be escaped from the shell).\nThe\n\\fIand\\fR\noperator is optional, adjacent predicates have an implied\n\\fIand\\fR\nunless separated by an\n\\fIor\\fR.\n.RE\n.TP 8n\n\\fB\\-m\\fR, \\fB\\--max-wait\\fR \\fImax_wait\\fR\nSpecify an upper bound on how long to wait between key presses or output data.\nBy default,\n\\fBsudoreplay\\fR\nwill accurately reproduce the delays between key presses or program output.\nHowever, this can be tedious when the session includes long pauses.\nWhen the\n\\fB\\-m\\fR\noption is specified,\n\\fBsudoreplay\\fR\nwill limit these pauses to at most\n\\fImax_wait\\fR\nseconds.\nThe value may be specified as a floating point number, e.g.,\n\\fI2.5\\fR.\nA\n\\fImax_wait\\fR\nof zero or less will eliminate the pauses entirely.\n.TP 8n\n\\fB\\-n\\fR, \\fB\\--non-interactive\\fR\nDo not prompt for user input or attempt to re-size the terminal.\nThe session is written to the standard output, not directly to\nthe user's terminal.\n.TP 8n\n\\fB\\-R\\fR, \\fB\\--no-resize\\fR\nDo not attempt to re-size the terminal to match the terminal size\nof the session.\n.TP 8n\n\\fB\\-S\\fR, \\fB\\--suspend-wait\\fR\nWait while the command was suspended.\nBy default,\n\\fBsudoreplay\\fR\nwill ignore the time interval between when the command was suspended\nand when it was resumed.\nIf the\n\\fB\\-S\\fR\noption is specified,\n\\fBsudoreplay\\fR\nwill wait instead.\n.TP 8n\n\\fB\\-s\\fR, \\fB\\--speed\\fR \\fIspeed_factor\\fR\nThis option causes\n\\fBsudoreplay\\fR\nto adjust the number of seconds it will wait between key presses or\nprogram output.\nThis can be used to slow down or speed up the display.\nFor example, a\n\\fIspeed_factor\\fR\nof\n\\fI2\\fR\nwould make the output twice as fast whereas a\n\\fIspeed_factor\\fR\nof\n\\fI.5\\fR\nwould make the output twice as slow.\n.TP 8n\n\\fB\\-V\\fR, \\fB\\--version\\fR\nPrint the\n\\fBsudoreplay\\fR\nversions version number and exit.\n.SS \"Date and time format\"\nThe time and date may be specified multiple ways, common formats include:\n.TP 8n\nHH:MM:SS am MM/DD/CCYY timezone\n24 hour time may be used in place of am/pm.\n.TP 8n\nHH:MM:SS am Month, Day Year timezone\n24 hour time may be used in place of am/pm, and month and day names\nmay be abbreviated.\nMonth and day of the week names must be specified in English.\n.TP 8n\nCCYY-MM-DD HH:MM:SS\nISO time format\n.TP 8n\nDD Month CCYY HH:MM:SS\nThe month name may be abbreviated.\n.PP\nEither time or date may be omitted, the am/pm and timezone are optional.\nIf no date is specified, the current day is assumed; if no time is\nspecified, the first second of the specified date is used.\nThe less significant parts of both time and date may also be omitted,\nin which case zero is assumed.\n.PP\nThe following are all valid time and date specifications:\n.TP 8n\nnow\nThe current time and date.\n.TP 8n\ntomorrow\nExactly one day from now.\n.TP 8n\nyesterday\n24 hours ago.\n.TP 8n\n2 hours ago\n2 hours ago.\n.TP 8n\nnext Friday\nThe first second of the Friday in the next (upcoming) week.\nNot to be confused with\n\\(lqthis Friday\\(rq\nwhich would match the Friday of the current week.\n.TP 8n\nlast week\nThe current time but 7 days ago.\nThis is equivalent to\n\\(lqa week ago\\(rq.\n.TP 8n\na fortnight ago\nThe current time but 14 days ago.\n.TP 8n\n10:01 am 9/17/2009\n10:01 am, September 17, 2009.\n.TP 8n\n10:01 am\n10:01 am on the current day.\n.TP 8n\n10\n10:00 am on the current day.\n.TP 8n\n9/17/2009\n00:00 am, September 17, 2009.\n.TP 8n\n10:01 am Sep 17, 2009\n10:01 am, September 17, 2009.\n.PP\nRelative time specifications do not always work as expected.\nFor example, the\n\\(lqnext\\(rq\nqualifier is intended to be used in conjunction with a day such as\n\\(lqnext Monday\\(rq.\nWhen used with units of weeks, months, years, etc\nthe result will be one more than expected.\nFor example,\n\\(lqnext week\\(rq\nwill result in a time exactly two weeks from now, which is probably\nnot what was intended.\nThis will be addressed in a future version of\n\\fBsudoreplay\\fR.\n.SS \"Debugging sudoreplay\"\n\\fBsudoreplay\\fR\nversions 1.8.4 and higher support a flexible debugging framework\nthat is configured via\n\\fIDebug\\fR\nlines in the\nsudo.conf(@mansectform@)\nfile.\n.PP\nFor more information on configuring\nsudo.conf(@mansectform@),\nrefer to its manual.\n.SH \"FILES\"\n.TP 26n\n\\fI@sysconfdir@/sudo.conf\\fR\nDebugging framework configuration\n.TP 26n\n\\fI@iolog_dir@\\fR\nThe default I/O log directory.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/log\\fR\nExample session log info.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/log.json\\fR\nExample session log info (JSON format).\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stdin\\fR\nExample session standard input log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stdout\\fR\nExample session standard output log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/stderr\\fR\nExample session standard error log.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/ttyin\\fR\nExample session tty input file.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/ttyout\\fR\nExample session tty output file.\n.TP 26n\n\\fI@iolog_dir@/00/00/01/timing\\fR\nExample session timing file.\n.PP\nThe\n\\fIstdin\\fR,\n\\fIstdout\\fR\nand\n\\fIstderr\\fR\nfiles will be empty unless\n\\fBsudo\\fR\nwas used as part of a pipeline for a particular command.\n.SH \"EXAMPLES\"\nList sessions run by user\n\\fImillert\\fR:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user millert\n.RE\n.fi\n.PP\nList sessions run by user\n\\fIbob\\fR\nwith a command containing the string vi:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user bob command vi\n.RE\n.fi\n.PP\nList sessions run by user\n\\fIjeff\\fR\nthat match a regular expression:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l user jeff command '/bin/[a-z]*sh'\n.RE\n.fi\n.PP\nList sessions run by jeff or bob on the console:\n.nf\n.sp\n.RS 4n\n# sudoreplay -l ( user jeff or user bob ) tty console\n.RE\n.fi\n.SH \"SEE ALSO\"\nscript(1),\nsudo.conf(@mansectform@),\nsudo(@mansectsu@)\n.SH \"AUTHORS\"\nMany people have worked on\n\\fBsudo\\fR\nover the years; this version consists of code written primarily by:\n.sp\n.RS 6n\nTodd C. Miller\n.RE\n.PP\nSee the CONTRIBUTORS.md file in the\n\\fBsudo\\fR\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n\\fBsudo\\fR.\n.SH \"BUGS\"\nIf you believe you have found a bug in\n\\fBsudoreplay\\fR,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.SH \"SUPPORT\"\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.SH \"DISCLAIMER\"\n\\fBsudoreplay\\fR\nis provided\n\\(lqAS IS\\(rq\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n\\fBsudo\\fR\nor https://www.sudo.ws/about/license/ for complete details.\n", ".\\\"\n.\\\" SPDX-License-Identifier: ISC\n.\\\"\n.\\\" Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n.\\\"\n.\\\" Permission to use, copy, modify, and distribute this software for any\n.\\\" purpose with or without fee is hereby granted, provided that the above\n.\\\" copyright notice and this permission notice appear in all copies.\n.\\\"\n.\\\" THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n.\\\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n.\\\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n.\\\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n.\\\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n.\\\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n.\\\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n.\\\"\n.Dd January 16, 2023\n.Dt SUDOREPLAY @mansectsu@\n.Os Sudo @PACKAGE_VERSION@\n.Sh NAME\n.Nm sudoreplay\n.Nd replay sudo session logs\n.Sh SYNOPSIS\n.Nm sudoreplay\n.Op Fl FhnRS\n.Op Fl d Ar dir\n.Op Fl f Ar filter\n.Op Fl m Ar num\n.Op Fl s Ar num\n.No ID Ns Op Ar @offset\n.Pp\n.Nm\n.Op Fl h\n.Op Fl d Ar dir\n.Fl l\n.Op search expression\n.Sh DESCRIPTION\n.Nm\nplays back or lists the output logs created by\n.Nm sudo .\nWhen replaying,\n.Nm\ncan play the session back in real-time, or the playback speed may be\nadjusted (faster or slower) based on the command line options.\n.Pp\nThe\n.Em ID\nshould either be a six character sequence of digits and\nupper case letters, e.g.,\n.Dq 0100A5\nor a path name.\nThe\n.Em ID\nmay include an optional\n.Ar @offset\nsuffix which may be used to start replaying at a specific time offset.\nThe\n.Ar @offset\nis specified as a number in seconds since the start of the session\nwith an optional decimal fraction.\n.Pp\nPath names may be relative to the I/O log directory\n.Pa @iolog_dir@\n(unless overridden by the\n.Fl d\noption) or fully qualified, beginning with a\n.Ql /\ncharacter.\nWhen a command is run via\n.Nm sudo\nwith\n.Em log_output\nenabled in the\n.Em sudoers\nfile, a\n.Dq TSID=ID\nstring is logged via\n.Xr syslog 3\nor to the\n.Nm sudo\nlog file.\nThe\n.Em ID\nmay also be determined using\n.Nm sudoreplay Ns 's\nlist mode.\n.Pp\nIn list mode,\n.Nm\ncan be used to find the ID of a session based on a number of criteria\nsuch as the user, tty, or command run.\n.Pp\nIn replay mode, if the standard input and output are connected to a terminal\nand the\n.Fl n\noption is not specified,\n.Nm\nwill operate interactively.\nIn interactive mode,\n.Nm\nwill attempt to adjust the terminal size to match that of the session and\nwrite directly to the terminal (not all terminals support this).\nAdditionally, it will poll the keyboard and act on the following keys:\n.Bl -tag -width 12n\n.It So Li \\en Sc No or So Li \\er Sc\nSkip to the next replay event; useful for long pauses.\n.It So Li \\  Sc Pq space\nPause output; press any key to resume.\n.It Ql <\nReduce the playback speed by one half.\n.It Ql >\nDouble the playback speed.\n.El\n.Pp\nThe session can be interrupted via control-C.\nWhen the session has finished, the terminal is restored to its\noriginal size if it was changed during playback.\n.Pp\nThe options are as follows:\n.Bl -tag -width Ds\n.It Fl d Ar dir , Fl -directory Ns = Ns Ar dir\nStore session logs in\n.Ar dir\ninstead of the default,\n.Pa @iolog_dir@ .\n.It Fl f Ar filter , Fl -filter Ns = Ns Ar filter\nSelect which I/O type(s) to display.\nBy default,\n.Nm\nwill display the command's standard output, standard error, and tty output.\nThe\n.Ar filter\nargument is a comma-separated list, consisting of one or more of following:\n.Em stdin ,\n.Em stdout ,\n.Em stderr ,\n.Em ttyin ,\nand\n.Em ttyout .\n.It Fl F , -follow\nEnable\n.Dq follow mode .\nWhen replaying a session,\n.Nm\nwill ignore end-of-file and keep replaying until the log is complete.\nThis can be used to replay a session that is still in progress,\nsimilar to\n.Dq tail -f .\nAn I/O log file is considered to be complete when the write bits\nhave been cleared on the session's timing file.\nVersions of\n.Nm sudo\nprior to 1.9.1 do not clear the write bits upon completion.\n.It Fl h , -help\nDisplay a short help message to the standard output and exit.\n.It Fl l , -list Op Ar search expression\nEnable\n.Dq list mode .\nIn this mode,\n.Nm\nwill list available sessions in a format similar to the\n.Nm sudo\nlog file format, sorted by file name (or sequence number).\nAny control characters present in the log data are formatted in octal\nwith a leading\n.Ql #\ncharacter.\nFor example, a horizontal tab is displayed as\n.Ql #011\nand an embedded carriage return is displayed as\n.Ql #015 .\nSpace characters in the command name and arguments are also formatted in octal.\n.Pp\nIf a\n.Ar search expression\nis specified, it will be used to restrict the IDs that are displayed.\nAn expression is composed of the following predicates:\n.Bl -tag -width 6n\n.It command Ar pattern\nEvaluates to true if the command run matches the POSIX extended\nregular expression\n.Ar pattern .\n.It cwd Ar directory\nEvaluates to true if the command was run with the specified current\nworking directory.\n.It fromdate Ar date\nEvaluates to true if the command was run on or after\n.Ar date .\nSee\n.Sx Date and time format\nfor a description of supported date and time formats.\n.It group Ar runas_group\nEvaluates to true if the command was run with the specified\n.Ar runas_group .\nUnless a\n.Ar runas_group\nwas explicitly specified when\n.Nm sudo\nwas run this field will be empty in the log.\n.It host Ar hostname\nEvaluates to true if the command was run on the specified\n.Ar hostname .\n.It runas Ar runas_user\nEvaluates to true if the command was run as the specified\n.Ar runas_user .\nBy default,\n.Nm sudo\nruns commands as the\n.Sy root\nuser.\n.It todate Ar date\nEvaluates to true if the command was run on or prior to\n.Ar date .\nSee\n.Sx Date and time format\nfor a description of supported date and time formats.\n.It tty Ar tty name\nEvaluates to true if the command was run on the specified terminal device.\nThe\n.Ar tty name\nshould be specified without the\n.Pa /dev/\nprefix, e.g.,\n.Pa tty01\ninstead of\n.Pa /dev/tty01 .\n.It user Ar user name\nEvaluates to true if the ID matches a command run by\n.Ar user name .\n.El\n.Pp\nPredicates may be abbreviated to the shortest unique string.\n.Pp\nPredicates may be combined using\n.Em and ,\n.Em or ,\nand\n.Em \\&!\noperators as well as\n.Ql \\&(\nand\n.Ql \\&)\ngrouping (parentheses must generally be escaped from the shell).\nThe\n.Em and\noperator is optional, adjacent predicates have an implied\n.Em and\nunless separated by an\n.Em or .\n.It Fl m , -max-wait Ar max_wait\nSpecify an upper bound on how long to wait between key presses or output data.\nBy default,\n.Nm\nwill accurately reproduce the delays between key presses or program output.\nHowever, this can be tedious when the session includes long pauses.\nWhen the\n.Fl m\noption is specified,\n.Nm\nwill limit these pauses to at most\n.Em max_wait\nseconds.\nThe value may be specified as a floating point number, e.g.,\n.Em 2.5 .\nA\n.Em max_wait\nof zero or less will eliminate the pauses entirely.\n.It Fl n , -non-interactive\nDo not prompt for user input or attempt to re-size the terminal.\nThe session is written to the standard output, not directly to\nthe user's terminal.\n.It Fl R , -no-resize\nDo not attempt to re-size the terminal to match the terminal size\nof the session.\n.It Fl S , -suspend-wait\nWait while the command was suspended.\nBy default,\n.Nm\nwill ignore the time interval between when the command was suspended\nand when it was resumed.\nIf the\n.Fl S\noption is specified,\n.Nm\nwill wait instead.\n.It Fl s , -speed Ar speed_factor\nThis option causes\n.Nm\nto adjust the number of seconds it will wait between key presses or\nprogram output.\nThis can be used to slow down or speed up the display.\nFor example, a\n.Ar speed_factor\nof\n.Em 2\nwould make the output twice as fast whereas a\n.Ar speed_factor\nof\n.Em .5\nwould make the output twice as slow.\n.It Fl V , -version\nPrint the\n.Nm\nversions version number and exit.\n.El\n.Ss Date and time format\nThe time and date may be specified multiple ways, common formats include:\n.Bl -tag -width 6n\n.It HH:MM:SS am MM/DD/CCYY timezone\n24 hour time may be used in place of am/pm.\n.It HH:MM:SS am Month, Day Year timezone\n24 hour time may be used in place of am/pm, and month and day names\nmay be abbreviated.\nMonth and day of the week names must be specified in English.\n.It CCYY-MM-DD HH:MM:SS\nISO time format\n.It DD Month CCYY HH:MM:SS\nThe month name may be abbreviated.\n.El\n.Pp\nEither time or date may be omitted, the am/pm and timezone are optional.\nIf no date is specified, the current day is assumed; if no time is\nspecified, the first second of the specified date is used.\nThe less significant parts of both time and date may also be omitted,\nin which case zero is assumed.\n.Pp\nThe following are all valid time and date specifications:\n.Bl -tag -width 6n\n.It now\nThe current time and date.\n.It tomorrow\nExactly one day from now.\n.It yesterday\n24 hours ago.\n.It 2 hours ago\n2 hours ago.\n.It next Friday\nThe first second of the Friday in the next (upcoming) week.\nNot to be confused with\n.Dq this Friday\nwhich would match the Friday of the current week.\n.It last week\nThe current time but 7 days ago.\nThis is equivalent to\n.Dq a week ago .\n.It a fortnight ago\nThe current time but 14 days ago.\n.It 10:01 am 9/17/2009\n10:01 am, September 17, 2009.\n.It 10:01 am\n10:01 am on the current day.\n.It 10\n10:00 am on the current day.\n.It 9/17/2009\n00:00 am, September 17, 2009.\n.It 10:01 am Sep 17, 2009\n10:01 am, September 17, 2009.\n.El\n.Pp\nRelative time specifications do not always work as expected.\nFor example, the\n.Dq next\nqualifier is intended to be used in conjunction with a day such as\n.Dq next Monday .\nWhen used with units of weeks, months, years, etc\nthe result will be one more than expected.\nFor example,\n.Dq next week\nwill result in a time exactly two weeks from now, which is probably\nnot what was intended.\nThis will be addressed in a future version of\n.Nm .\n.Ss Debugging sudoreplay\n.Nm\nversions 1.8.4 and higher support a flexible debugging framework\nthat is configured via\n.Em Debug\nlines in the\n.Xr sudo.conf @mansectform@\nfile.\n.Pp\nFor more information on configuring\n.Xr sudo.conf @mansectform@ ,\nrefer to its manual.\n.Sh FILES\n.Bl -tag -width 24n\n.It Pa @sysconfdir@/sudo.conf\nDebugging framework configuration\n.It Pa @iolog_dir@\nThe default I/O log directory.\n.It Pa @iolog_dir@/00/00/01/log\nExample session log info.\n.It Pa @iolog_dir@/00/00/01/log.json\nExample session log info (JSON format).\n.It Pa @iolog_dir@/00/00/01/stdin\nExample session standard input log.\n.It Pa @iolog_dir@/00/00/01/stdout\nExample session standard output log.\n.It Pa @iolog_dir@/00/00/01/stderr\nExample session standard error log.\n.It Pa @iolog_dir@/00/00/01/ttyin\nExample session tty input file.\n.It Pa @iolog_dir@/00/00/01/ttyout\nExample session tty output file.\n.It Pa @iolog_dir@/00/00/01/timing\nExample session timing file.\n.El\n.Pp\nThe\n.Em stdin ,\n.Em stdout\nand\n.Em stderr\nfiles will be empty unless\n.Nm sudo\nwas used as part of a pipeline for a particular command.\n.Sh EXAMPLES\nList sessions run by user\n.Em millert :\n.Bd -literal -offset 4n\n# sudoreplay -l user millert\n.Ed\n.Pp\nList sessions run by user\n.Em bob\nwith a command containing the string vi:\n.Bd -literal -offset 4n\n# sudoreplay -l user bob command vi\n.Ed\n.Pp\nList sessions run by user\n.Em jeff\nthat match a regular expression:\n.Bd -literal -offset 4n\n# sudoreplay -l user jeff command '/bin/[a-z]*sh'\n.Ed\n.Pp\nList sessions run by jeff or bob on the console:\n.Bd -literal -offset 4n\n# sudoreplay -l ( user jeff or user bob ) tty console\n.Ed\n.Sh SEE ALSO\n.Xr script 1 ,\n.Xr sudo.conf @mansectform@ ,\n.Xr sudo @mansectsu@\n.Sh AUTHORS\nMany people have worked on\n.Nm sudo\nover the years; this version consists of code written primarily by:\n.Bd -ragged -offset indent\n.An Todd C. Miller\n.Ed\n.Pp\nSee the CONTRIBUTORS.md file in the\n.Nm sudo\ndistribution (https://www.sudo.ws/about/contributors/) for an\nexhaustive list of people who have contributed to\n.Nm sudo .\n.Sh BUGS\nIf you believe you have found a bug in\n.Nm ,\nyou can submit a bug report at https://bugzilla.sudo.ws/\n.Sh SUPPORT\nLimited free support is available via the sudo-users mailing list,\nsee https://www.sudo.ws/mailman/listinfo/sudo-users to subscribe or\nsearch the archives.\n.Sh DISCLAIMER\n.Nm\nis provided\n.Dq AS IS\nand any express or implied warranties, including, but not limited\nto, the implied warranties of merchantability and fitness for a\nparticular purpose are disclaimed.\nSee the LICENSE.md file distributed with\n.Nm sudo\nor https://www.sudo.ws/about/license/ for complete details.\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2007, 2010, 2011, 2013-2015, 2023\n *\tTodd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n#ifndef SUDO_LBUF_H\n#define SUDO_LBUF_H\n\n/*\n * Line buffer struct.\n */\nstruct sudo_lbuf {\n    int (*output)(const char *);\n    char *buf;\n    const char *continuation;\n    unsigned int indent;\n    unsigned int len;\n    unsigned int size;\n    unsigned short cols;\n    unsigned short error;\n};\n\ntypedef int (*sudo_lbuf_output_t)(const char *);\n\n/* Flags for sudo_lbuf_append_esc() */\n#define LBUF_ESC_CNTRL\t0x01\n#define LBUF_ESC_BLANK\t0x02\n#define LBUF_ESC_QUOTE\t0x04\n\nsudo_dso_public void sudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output, int indent, const char *continuation, int cols);\nsudo_dso_public void sudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public bool sudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...) sudo_printflike(2, 3);\nsudo_dso_public bool sudo_lbuf_append_esc_v1(struct sudo_lbuf *lbuf, int flags, const char *fmt, ...) sudo_printflike(3, 4);\nsudo_dso_public bool sudo_lbuf_append_quoted_v1(struct sudo_lbuf *lbuf, const char *set, const char *fmt, ...) sudo_printflike(3, 4);\nsudo_dso_public void sudo_lbuf_print_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public bool sudo_lbuf_error_v1(struct sudo_lbuf *lbuf);\nsudo_dso_public void sudo_lbuf_clearerr_v1(struct sudo_lbuf *lbuf);\n\n#define sudo_lbuf_init(_a, _b, _c, _d, _e) sudo_lbuf_init_v1((_a), (_b), (_c), (_d), (_e))\n#define sudo_lbuf_destroy(_a) sudo_lbuf_destroy_v1((_a))\n#define sudo_lbuf_append sudo_lbuf_append_v1\n#define sudo_lbuf_append_esc sudo_lbuf_append_esc_v1\n#define sudo_lbuf_append_quoted sudo_lbuf_append_quoted_v1\n#define sudo_lbuf_print(_a) sudo_lbuf_print_v1((_a))\n#define sudo_lbuf_error(_a) sudo_lbuf_error_v1((_a))\n#define sudo_lbuf_clearerr(_a) sudo_lbuf_clearerr_v1((_a))\n\n#endif /* SUDO_LBUF_H */\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 1994-1996, 1998-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * Sponsored in part by the Defense Advanced Research Projects\n * Agency (DARPA) and Air Force Research Laboratory, Air Force\n * Materiel Command, USAF, under agreement number F39502-99-1-0512.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/wait.h>\n#include <netinet/in.h>\n\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <grp.h>\n#include <locale.h>\n#include <pwd.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <syslog.h>\n#include <time.h>\n#include <unistd.h>\n\n#include \"pathnames.h\"\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_lbuf.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_json.h\"\n#include \"sudo_queue.h\"\n#include \"sudo_util.h\"\n\n#define IS_SESSID(s) ( \\\n    isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\\n    (s)[2] == '/' && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    (s)[5] == '/' && \\\n    isalnum((unsigned char)(s)[6]) && isalnum((unsigned char)(s)[7]) && \\\n    (s)[8] == '\\0')\n\nstruct eventlog_args {\n    const char *reason;\n    const char *errstr;\n    const struct timespec *event_time;\n    eventlog_json_callback_t json_info_cb;\n    void *json_info;\n};\n\n/*\n * Allocate and fill in a new logline.\n */\nstatic char *\nnew_logline(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const char *iolog_file;\n    const char *tty, *tsid = NULL;\n    char exit_str[(((sizeof(int) * 8) + 2) / 3) + 2];\n    char sessid[7], offsetstr[64] = \"\";\n    struct sudo_lbuf lbuf;\n    int i;\n    debug_decl(new_logline, SUDO_DEBUG_UTIL);\n\n    sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);\n\n    if (ISSET(flags, EVLOG_RAW) || evlog == NULL) {\n\tif (args->reason != NULL) {\n\t    if (args->errstr != NULL) {\n\t\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s: %s\",\n\t\t    args->reason, args->errstr);\n\t    } else {\n\t\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s\", args->reason);\n\t    }\n\t    if (sudo_lbuf_error(&lbuf))\n\t\tgoto oom;\n\t}\n\tdebug_return_str(lbuf.buf);\n    }\n\n    /* A TSID may be a sudoers-style session ID or a free-form string. */\n    iolog_file = evlog->iolog_file;\n    if (iolog_file != NULL) {\n\tif (IS_SESSID(iolog_file)) {\n\t    sessid[0] = iolog_file[0];\n\t    sessid[1] = iolog_file[1];\n\t    sessid[2] = iolog_file[3];\n\t    sessid[3] = iolog_file[4];\n\t    sessid[4] = iolog_file[6];\n\t    sessid[5] = iolog_file[7];\n\t    sessid[6] = '\\0';\n\t    tsid = sessid;\n\t} else {\n\t    tsid = iolog_file;\n\t}\n\tif (sudo_timespecisset(&evlog->iolog_offset)) {\n\t    /* Only write up to two significant digits for the decimal part. */\n\t    if (evlog->iolog_offset.tv_nsec > 10000000) {\n\t\t(void)snprintf(offsetstr, sizeof(offsetstr), \"@%lld.%02ld\",\n\t\t    (long long)evlog->iolog_offset.tv_sec,\n\t\t    evlog->iolog_offset.tv_nsec / 10000000);\n\t    } else if (evlog->iolog_offset.tv_sec != 0) {\n\t\t(void)snprintf(offsetstr, sizeof(offsetstr), \"@%lld\",\n\t\t    (long long)evlog->iolog_offset.tv_sec);\n\t    }\n\t}\n    }\n\n    /* Sudo-format logs use the short form of the ttyname. */\n    if ((tty = evlog->ttyname) != NULL) {\n\tif (strncmp(tty, _PATH_DEV, sizeof(_PATH_DEV) - 1) == 0)\n\t    tty += sizeof(_PATH_DEV) - 1;\n    }\n\n    /*\n     * Format the log line as an lbuf, escaping control characters in\n     * octal form (#0nn).  Error checking (ENOMEM) is done at the end.\n     */\n    if (args->reason != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s%s\", args->reason,\n\t    args->errstr ? \" : \" : \" ; \");\n    }\n    if (args->errstr != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"%s ; \", args->errstr);\n    }\n    if (evlog->submithost != NULL && !evl_conf->omit_hostname) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",\n\t    evlog->submithost);\n    }\n    if (tty != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \", tty);\n    }\n    if (evlog->runchroot != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",\n\t    evlog->runchroot);\n    }\n    if (evlog->runcwd != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"PWD=%s ; \",\n\t    evlog->runcwd);\n    }\n    if (evlog->runuser != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \",\n\t    evlog->runuser);\n    }\n    if (evlog->rungroup != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",\n\t    evlog->rungroup);\n    }\n    if (tsid != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"TSID=%s%s ; \", tsid,\n\t    offsetstr);\n    }\n    if (evlog->env_add != NULL && evlog->env_add[0] != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \"ENV=%s\",\n\t    evlog->env_add[0]);\n\tfor (i = 1; evlog->env_add[i] != NULL; i++) {\n\t    sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" %s\",\n\t\tevlog->env_add[i]);\n\t}\n    }\n    if (evlog->command != NULL) {\n\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,\n\t    \"COMMAND=%s\", evlog->command);\n\tif (evlog->argv != NULL && evlog->argv[0] != NULL) {\n\t    for (i = 1; evlog->argv[i] != NULL; i++) {\n\t\tsudo_lbuf_append(&lbuf, \" \");\n\t\tif (strchr(evlog->argv[i], ' ') != NULL) {\n\t\t    /* Wrap args containing spaces in single quotes. */\n\t\t    sudo_lbuf_append(&lbuf, \"'\");\n\t\t    sudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,\n\t\t\t\"%s\", evlog->argv[i]);\n\t\t    sudo_lbuf_append(&lbuf, \"'\");\n\t\t} else {\n\t\t    /* Escape quotes here too for consistency. */\n\t\t    sudo_lbuf_append_esc(&lbuf,\n\t\t\tLBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,\n\t\t\t\"%s\", evlog->argv[i]);\n\t\t}\n\t    }\n\t}\n\tif (event_type == EVLOG_EXIT) {\n\t    if (evlog->signal_name != NULL) {\n\t\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; SIGNAL=%s\",\n\t\t    evlog->signal_name);\n\t    }\n\t    if (evlog->exit_value != -1) {\n\t\t(void)snprintf(exit_str, sizeof(exit_str), \"%d\",\n\t\t    evlog->exit_value);\n\t\tsudo_lbuf_append_esc(&lbuf, LBUF_ESC_CNTRL, \" ; EXIT=%s\",\n\t\t    exit_str);\n\t    }\n\t}\n    }\n    if (!sudo_lbuf_error(&lbuf))\n\tdebug_return_str(lbuf.buf);\noom:\n    sudo_lbuf_destroy(&lbuf);\n    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    debug_return_str(NULL);\n}\n\nstatic void\nclosefrom_nodebug(int lowfd)\n{\n    unsigned char *debug_fds;\n    int fd, startfd;\n    debug_decl(closefrom_nodebug, SUDO_DEBUG_UTIL);\n\n    startfd = sudo_debug_get_fds(&debug_fds) + 1;\n    if (lowfd > startfd)\n\tstartfd = lowfd;\n\n    /* Close fds higher than the debug fds. */\n    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\"closing fds >= %d\", startfd);\n    closefrom(startfd);\n\n    /* Close fds [lowfd, startfd) that are not in debug_fds. */\n    for (fd = lowfd; fd < startfd; fd++) {\n\tif (sudo_isset(debug_fds, fd))\n\t    continue;\n\tsudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t    \"closing fd %d\", fd);\n#ifdef __APPLE__\n\t/* Avoid potential libdispatch crash when we close its fds. */\n\t(void) fcntl(fd, F_SETFD, FD_CLOEXEC);\n#else\n\t(void) close(fd);\n#endif\n    }\n    debug_return;\n}\n\n#define MAX_MAILFLAGS\t63\n\nsudo_noreturn static void\nexec_mailer(int pipein)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *last, *mflags, *p, *argv[MAX_MAILFLAGS + 1];\n    const char *mpath = evl_conf->mailerpath;\n    int i;\n    const char * const root_envp[] = {\n\t\"HOME=/\",\n\t\"PATH=/usr/bin:/bin:/usr/sbin:/sbin\",\n\t\"LOGNAME=root\",\n\t\"USER=root\",\n# ifdef _AIX\n\t\"LOGIN=root\",\n# endif\n\tNULL\n    };\n    debug_decl(exec_mailer, SUDO_DEBUG_UTIL);\n\n    /* Set stdin to read side of the pipe. */\n    if (dup3(pipein, STDIN_FILENO, 0) == -1) {\n\tsyslog(LOG_ERR, _(\"unable to dup stdin: %m\")); // -V618\n\tsudo_debug_printf(SUDO_DEBUG_ERROR,\n\t    \"unable to dup stdin: %s\", strerror(errno));\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(127);\n    }\n\n    /* Build up an argv based on the mailer path and flags */\n    if ((mflags = strdup(evl_conf->mailerflags)) == NULL) {\n\tsyslog(LOG_ERR, _(\"unable to allocate memory\")); // -V618\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(127);\n    }\n    argv[0] = sudo_basename(mpath);\n\n    i = 1;\n    if ((p = strtok_r(mflags, \" \\t\", &last))) {\n\tdo {\n\t    argv[i] = p;\n\t} while (++i < MAX_MAILFLAGS && (p = strtok_r(NULL, \" \\t\", &last)));\n    }\n    argv[i] = NULL;\n\n    /*\n     * Depending on the config, either run the mailer as root\n     * (so user cannot kill it) or as the user (for the paranoid).\n     */\n    if (setuid(ROOT_UID) != 0) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to change uid to %u\",\n\t    ROOT_UID);\n    }\n    if (evl_conf->mailuid != ROOT_UID) {\n\tif (setuid(evl_conf->mailuid) != 0) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to change uid to %u\",\n\t\t(unsigned int)evl_conf->mailuid);\n\t}\n    }\n    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n    if (evl_conf->mailuid == ROOT_UID)\n\texecve(mpath, argv, (char **)root_envp);\n    else\n\texecv(mpath, argv);\n    syslog(LOG_ERR, _(\"unable to execute %s: %m\"), mpath); // -V618\n    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to execute %s: %s\",\n\tmpath, strerror(errno));\n    _exit(127);\n}\n\n/* Send a message to the mailto user */\nstatic bool\nsend_mail(const struct eventlog *evlog, const char *fmt, ...)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const char *cp, *timefmt = evl_conf->time_fmt;\n    struct sigaction sa;\n    char timebuf[1024];\n    sigset_t chldmask;\n    struct tm tm;\n    time_t now;\n    FILE *mail;\n    int fd, len, pfd[2], status;\n    pid_t pid, rv;\n    struct stat sb;\n    va_list ap;\n#if defined(HAVE_NL_LANGINFO) && defined(CODESET)\n    char *locale;\n#endif\n    debug_decl(send_mail, SUDO_DEBUG_UTIL);\n\n    /* If mailer is disabled just return. */\n    if (evl_conf->mailerpath == NULL || evl_conf->mailto == NULL)\n\tdebug_return_bool(true);\n\n    /* Make sure the mailer exists and is a regular file. */\n    if (stat(evl_conf->mailerpath, &sb) != 0 || !S_ISREG(sb.st_mode))\n\tdebug_return_bool(false);\n\n    time(&now);\n    if (localtime_r(&now, &tm) == NULL)\n\tdebug_return_bool(false);\n\n    /* Block SIGCHLD for the duration since we call waitpid() below. */\n    sigemptyset(&chldmask);\n    sigaddset(&chldmask, SIGCHLD);\n    (void)sigprocmask(SIG_BLOCK, &chldmask, NULL);\n\n    /* Fork and return, child will daemonize. */\n    switch (pid = sudo_debug_fork()) {\n\tcase -1:\n\t    /* Error. */\n\t    sudo_warn(\"%s\", U_(\"unable to fork\"));\n\n\t    /* Unblock SIGCHLD and return. */\n\t    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\t    debug_return_bool(false);\n\tcase 0:\n\t    /* Child. */\n\t    switch (fork()) {\n\t\tcase -1:\n\t\t    /* Error. */\n\t\t    syslog(LOG_ERR, _(\"unable to fork: %m\")); // -V618\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to fork: %s\",\n\t\t\tstrerror(errno));\n\t\t    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t\t    _exit(EXIT_FAILURE);\n\t\tcase 0:\n\t\t    /* Grandchild continues below. */\n\t\t    sudo_debug_enter(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t\t    break;\n\t\tdefault:\n\t\t    /* Parent will wait for us. */\n\t\t    _exit(EXIT_SUCCESS);\n\t    }\n\t    break;\n\tdefault:\n\t    /* Parent. */\n\t    for (;;) {\n\t\trv = waitpid(pid, &status, 0);\n\t\tif (rv == -1 && errno != EINTR)\n\t\t    break;\n\t\tif (rv != -1 && !WIFSTOPPED(status))\n\t\t    break;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\t\"child (%d) exit value %d\", (int)rv, status);\n\n\t    /* Unblock SIGCHLD and return. */\n\t    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\t    debug_return_bool(true);\n    }\n\n    /* Reset SIGCHLD to default and unblock it. */\n    memset(&sa, 0, sizeof(sa));\n    sigemptyset(&sa.sa_mask);\n    sa.sa_flags = SA_RESTART;\n    sa.sa_handler = SIG_DFL;\n    (void)sigaction(SIGCHLD, &sa, NULL);\n    (void)sigprocmask(SIG_UNBLOCK, &chldmask, NULL);\n\n    /* Daemonize - disassociate from session/tty. */\n    if (setsid() == -1)\n      sudo_warn(\"setsid\");\n    if (chdir(\"/\") == -1)\n      sudo_warn(\"chdir(/)\");\n    fd = open(_PATH_DEVNULL, O_RDWR, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);\n    if (fd != -1) {\n\t(void) dup2(fd, STDIN_FILENO);\n\t(void) dup2(fd, STDOUT_FILENO);\n\t(void) dup2(fd, STDERR_FILENO);\n    }\n\n    /* Close non-debug fds so we don't leak anything. */\n    closefrom_nodebug(STDERR_FILENO + 1);\n\n    if (pipe2(pfd, O_CLOEXEC) == -1) {\n\tsyslog(LOG_ERR, _(\"unable to open pipe: %m\")); // -V618\n\tsudo_debug_printf(SUDO_DEBUG_ERROR, \"unable to open pipe: %s\",\n\t    strerror(errno));\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(EXIT_FAILURE);\n    }\n\n    switch (pid = sudo_debug_fork()) {\n\tcase -1:\n\t    /* Error. */\n\t    syslog(LOG_ERR, _(\"unable to fork: %m\")); // -V618\n\t    sudo_debug_printf(\n\t\tSUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t\t\"unable to fork\");\n\t    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t    _exit(EXIT_FAILURE);\n\t    break;\n\tcase 0:\n\t    /* Child. */\n\t    exec_mailer(pfd[0]);\n\t    /* NOTREACHED */\n    }\n\n    (void) close(pfd[0]);\n    if ((mail = fdopen(pfd[1], \"w\")) == NULL) {\n\tsyslog(LOG_ERR, \"fdopen: %m\");\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to fdopen pipe\");\n\tsudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n\t_exit(EXIT_FAILURE);\n    }\n\n    /* Pipes are all setup, send message. */\n    (void) fprintf(mail, \"To: %s\\nFrom: %s\\nAuto-Submitted: %s\\nSubject: \",\n\tevl_conf->mailto,\n\tevl_conf->mailfrom ? evl_conf->mailfrom :\n\t(evlog ? evlog->submituser : \"root\"),\n\t\"auto-generated\");\n    for (cp = _(evl_conf->mailsub); *cp; cp++) {\n\t/* Expand escapes in the subject */\n\tif (*cp == '%' && *(cp+1) != '%') {\n\t    switch (*(++cp)) {\n\t\tcase 'h':\n\t\t    if (evlog != NULL)\n\t\t\t(void) fputs(evlog->submithost, mail);\n\t\t    break;\n\t\tcase 'u':\n\t\t    if (evlog != NULL)\n\t\t\t(void) fputs(evlog->submituser, mail);\n\t\t    break;\n\t\tdefault:\n\t\t    cp--;\n\t\t    break;\n\t    }\n\t} else\n\t    (void) fputc(*cp, mail);\n    }\n\n#if defined(HAVE_NL_LANGINFO) && defined(CODESET)\n    locale = setlocale(LC_ALL, NULL);\n    if (locale[0] != 'C' || locale[1] != '\\0')\n\t(void) fprintf(mail, \"\\nContent-Type: text/plain; charset=\\\"%s\\\"\\nContent-Transfer-Encoding: 8bit\", nl_langinfo(CODESET));\n#endif /* HAVE_NL_LANGINFO && CODESET */\n\n    timebuf[sizeof(timebuf) - 1] = '\\0';\n    len = strftime(timebuf, sizeof(timebuf), timefmt, &tm);\n    if (len == 0 || timebuf[sizeof(timebuf) - 1] != '\\0') {\n\tsudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_ERROR,\n\t    \"strftime() failed to format time: %s\", timefmt);\n\t/* Fall back to default time format string. */\n\ttimebuf[sizeof(timebuf) - 1] = '\\0';\n\tlen = strftime(timebuf, sizeof(timebuf), \"%h %e %T\", &tm);\n\tif (len == 0 || timebuf[sizeof(timebuf) - 1] != '\\0') {\n\t    timebuf[0] = '\\0';\t\t/* give up */\n\t}\n    }\n    if (evlog != NULL) {\n\t(void) fprintf(mail, \"\\n\\n%s : %s : %s : \", evlog->submithost, timebuf,\n\t    evlog->submituser);\n    } else {\n\t(void) fprintf(mail, \"\\n\\n%s : \", timebuf);\n    }\n    va_start(ap, fmt);\n    (void) vfprintf(mail, fmt, ap);\n    va_end(ap);\n    fputs(\"\\n\\n\", mail);\n\n    fclose(mail);\n    for (;;) {\n\trv = waitpid(pid, &status, 0);\n\tif (rv == -1 && errno != EINTR)\n\t    break;\n\tif (rv != -1 && !WIFSTOPPED(status))\n\t    break;\n    }\n    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\"child (%d) exit value %d\", (int)rv, status);\n    sudo_debug_exit(__func__, __FILE__, __LINE__, sudo_debug_subsys);\n    _exit(EXIT_SUCCESS);\n}\n\nstatic bool\njson_add_timestamp(struct json_container *jsonc, const char *name,\n    const struct timespec *ts, bool format_timestamp)\n{\n    struct json_value json_value;\n    int len;\n    debug_decl(json_add_timestamp, SUDO_DEBUG_PLUGIN);\n\n    if (!sudo_json_open_object(jsonc, name))\n\tgoto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = ts->tv_sec;\n    if (!sudo_json_add_value(jsonc, \"seconds\", &json_value))\n\tgoto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = ts->tv_nsec;\n    if (!sudo_json_add_value(jsonc, \"nanoseconds\", &json_value))\n\tgoto oom;\n\n    if (format_timestamp) {\n\tconst struct eventlog_config *evl_conf = eventlog_getconf();\n\tconst char *timefmt = evl_conf->time_fmt;\n\ttime_t secs = ts->tv_sec;\n\tchar timebuf[1024];\n\tstruct tm tm;\n\n\tif (gmtime_r(&secs, &tm) != NULL) {\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    len = strftime(timebuf, sizeof(timebuf), \"%Y%m%d%H%M%SZ\", &tm);\n\t    if (len != 0 && timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\tjson_value.type = JSON_STRING;\n\t\tjson_value.u.string = timebuf; // -V507\n\t\tif (!sudo_json_add_value(jsonc, \"iso8601\", &json_value))\n\t\t    goto oom;\n\t    }\n\t}\n\n\tif (localtime_r(&secs, &tm) != NULL) {\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    len = strftime(timebuf, sizeof(timebuf), timefmt, &tm);\n\t    if (len != 0 && timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\tjson_value.type = JSON_STRING;\n\t\tjson_value.u.string = timebuf; // -V507\n\t\tif (!sudo_json_add_value(jsonc, \"localtime\", &json_value))\n\t\t    goto oom;\n\t    }\n\t}\n    }\n\n    if (!sudo_json_close_object(jsonc))\n\tgoto oom;\n\n    debug_return_bool(true);\noom:\n    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t\"%s: %s\", __func__, \"unable to allocate memory\");\n    debug_return_bool(false);\n}\n\n/*\n * Store the contents of struct eventlog as JSON.\n * The submit_time and iolog_path members are not stored, they should\n * be stored and formatted by the caller.\n */\nbool\neventlog_store_json(struct json_container *jsonc, const struct eventlog *evlog)\n{\n    struct json_value json_value;\n    size_t i;\n    char *cp;\n    debug_decl(eventlog_store_json, SUDO_DEBUG_UTIL);\n\n    /* Required settings. */\n    if (evlog == NULL || evlog->submituser == NULL)\n\tdebug_return_bool(false);\n\n    /*\n     * The most important values are written first in case\n     * the log record gets truncated.\n     * Note: submit_time and iolog_path are not stored here.\n     */\n\n    json_value.type = JSON_STRING;\n    json_value.u.string = evlog->submituser;\n    if (!sudo_json_add_value(jsonc, \"submituser\", &json_value))\n\tgoto oom;\n\n    if (evlog->command != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->command;\n\tif (!sudo_json_add_value(jsonc, \"command\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runuser != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runuser;\n\tif (!sudo_json_add_value(jsonc, \"runuser\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->rungroup != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->rungroup;\n\tif (!sudo_json_add_value(jsonc, \"rungroup\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runchroot != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runchroot;\n\tif (!sudo_json_add_value(jsonc, \"runchroot\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runcwd != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->runcwd;\n\tif (!sudo_json_add_value(jsonc, \"runcwd\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->ttyname != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->ttyname;\n\tif (!sudo_json_add_value(jsonc, \"ttyname\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->submithost != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->submithost;\n\tif (!sudo_json_add_value(jsonc, \"submithost\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->cwd != NULL) {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->cwd;\n\tif (!sudo_json_add_value(jsonc, \"submitcwd\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->rungroup!= NULL && evlog->rungid != (gid_t)-1) {\n\tjson_value.type = JSON_ID;\n\tjson_value.u.id = evlog->rungid;\n\tif (!sudo_json_add_value(jsonc, \"rungid\", &json_value))\n\t    goto oom;\n    }\n\n    if (evlog->runuid != (uid_t)-1) {\n\tjson_value.type = JSON_ID;\n\tjson_value.u.id = evlog->runuid;\n\tif (!sudo_json_add_value(jsonc, \"runuid\", &json_value))\n\t    goto oom;\n    }\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = evlog->columns;\n    if (!sudo_json_add_value(jsonc, \"columns\", &json_value))\n        goto oom;\n\n    json_value.type = JSON_NUMBER;\n    json_value.u.number = evlog->lines;\n    if (!sudo_json_add_value(jsonc, \"lines\", &json_value))\n        goto oom;\n\n    if (evlog->argv != NULL) {\n\tif (!sudo_json_open_array(jsonc, \"runargv\"))\n\t    goto oom;\n\tfor (i = 0; (cp = evlog->argv[i]) != NULL; i++) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = cp;\n\t    if (!sudo_json_add_value(jsonc, NULL, &json_value))\n\t\tgoto oom;\n\t}\n\tif (!sudo_json_close_array(jsonc))\n\t    goto oom;\n    }\n\n    if (evlog->envp != NULL) {\n\tif (!sudo_json_open_array(jsonc, \"runenv\"))\n\t    goto oom;\n\tfor (i = 0; (cp = evlog->envp[i]) != NULL; i++) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = cp;\n\t    if (!sudo_json_add_value(jsonc, NULL, &json_value))\n\t\tgoto oom;\n\t}\n\tif (!sudo_json_close_array(jsonc))\n\t    goto oom;\n    }\n\n    debug_return_bool(true);\n\noom:\n    sudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    debug_return_bool(false);\n}\n\nstatic bool\ndefault_json_cb(struct json_container *jsonc, void *v)\n{\n    return eventlog_store_json(jsonc, v);\n}\n\nstatic char *\nformat_json(int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog, bool compact)\n{\n    eventlog_json_callback_t info_cb = args->json_info_cb;\n    void *info = args->json_info;\n    struct json_container jsonc = { 0 };\n    struct json_value json_value;\n    const char *time_str, *type_str;\n    struct timespec now;\n    debug_decl(format_json, SUDO_DEBUG_UTIL);\n\n    if (info_cb == NULL) {\n\tinfo_cb = default_json_cb;\n\tinfo = (void *)evlog;\n    }\n\n    if (sudo_gettime_real(&now) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to read the clock\");\n\tdebug_return_str(NULL);\n    }\n\n    switch (event_type) {\n    case EVLOG_ACCEPT:\n\ttype_str = \"accept\";\n\ttime_str = \"submit_time\";\n\tbreak;\n    case EVLOG_REJECT:\n\ttype_str = \"reject\";\n\ttime_str = \"submit_time\";\n\tbreak;\n    case EVLOG_ALERT:\n\ttype_str = \"alert\";\n\ttime_str = \"alert_time\";\n\tbreak;\n    case EVLOG_EXIT:\n\ttype_str = \"exit\";\n\ttime_str = \"exit_time\";\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected event type %d\", event_type);\n\tdebug_return_str(NULL);\n    }\n\n    if (!sudo_json_init(&jsonc, 4, compact, false, false))\n\tgoto bad;\n    if (!sudo_json_open_object(&jsonc, type_str))\n\tgoto bad;\n\n    if (evlog != NULL && evlog->uuid_str[0] != '\\0') {\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = evlog->uuid_str;\n\tif (!sudo_json_add_value(&jsonc, \"uuid\", &json_value))\n\t    goto bad;\n    }\n\n    /* Reject and Alert events include a reason and optional error string. */\n    if (args->reason != NULL) {\n\tchar *ereason = NULL;\n\n\tif (args->errstr != NULL) {\n\t    const int len = asprintf(&ereason, _(\"%s: %s\"), args->reason,\n\t\targs->errstr);\n\t    if (len == -1) {\n\t\tsudo_warnx(U_(\"%s: %s\"), __func__,\n\t\t    U_(\"unable to allocate memory\"));\n\t\tgoto bad;\n\t    }\n\t}\n\tjson_value.type = JSON_STRING;\n\tjson_value.u.string = ereason ? ereason : args->reason;\n\tif (!sudo_json_add_value(&jsonc, \"reason\", &json_value)) {\n\t    free(ereason);\n\t    goto bad;\n\t}\n\tfree(ereason);\n    }\n\n    /* Log event time on server (set earlier) */\n    if (!json_add_timestamp(&jsonc, \"server_time\", &now, true)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unable format timestamp\");\n\tgoto bad;\n    }\n\n    /* Log event time from client */\n    if (args->event_time != NULL) {\n\tif (!json_add_timestamp(&jsonc, time_str, args->event_time, true)) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\"unable format timestamp\");\n\t    goto bad;\n\t}\n    }\n\n    if (event_type == EVLOG_EXIT) {\n\t/* Exit events don't need evlog details if there is a UUID. */\n\tif (evlog != NULL && evlog->uuid_str[0] != '\\0') {\n\t    if (args->json_info == NULL)\n\t\tinfo = NULL;\n\t}\n\n\tif (sudo_timespecisset(&evlog->run_time)) {\n\t    if (!json_add_timestamp(&jsonc, \"run_time\", &evlog->run_time, false)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable format timestamp\");\n\t\tgoto bad;\n\t    }\n\t}\n\tif (evlog->signal_name != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->signal_name;\n\t    if (!sudo_json_add_value(&jsonc, \"signal\", &json_value))\n\t\tgoto bad;\n\n\t    json_value.type = JSON_BOOL;\n\t    json_value.u.boolean = evlog->dumped_core;\n\t    if (!sudo_json_add_value(&jsonc, \"dumped_core\", &json_value))\n\t\tgoto bad;\n\t}\n\tjson_value.type = JSON_NUMBER;\n\tjson_value.u.number = evlog->exit_value;\n\tif (!sudo_json_add_value(&jsonc, \"exit_value\", &json_value))\n\t    goto bad;\n    }\n\n     /* Event log info may be missing for alert messages. */\n     if (evlog != NULL) {\n\tif (evlog->peeraddr != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->peeraddr;\n\t    if (!sudo_json_add_value(&jsonc, \"peeraddr\", &json_value))\n\t\tgoto bad;\n\t}\n\n\tif (evlog->iolog_path != NULL) {\n\t    json_value.type = JSON_STRING;\n\t    json_value.u.string = evlog->iolog_path;\n\t    if (!sudo_json_add_value(&jsonc, \"iolog_path\", &json_value))\n\t\tgoto bad;\n\n\t    if (sudo_timespecisset(&evlog->iolog_offset)) {\n\t\tif (!json_add_timestamp(&jsonc, \"iolog_offset\", &evlog->iolog_offset, false)) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"unable format timestamp\");\n\t\t    goto bad;\n\t\t}\n\t    }\n\t}\n    }\n\n    /* Write log info. */\n    if (info != NULL) {\n\tif (!info_cb(&jsonc, info))\n\t    goto bad;\n    }\n\n    if (!sudo_json_close_object(&jsonc))\n\tgoto bad;\n\n    /* Caller is responsible for freeing the buffer. */\n    debug_return_str(sudo_json_get_buf(&jsonc));\n\nbad:\n    sudo_json_free(&jsonc);\n    debug_return_str(NULL);\n}\n\n/*\n * Log a message to syslog, prepending the username and splitting the\n * message into parts if it is longer than syslog_maxlen.\n */\nstatic bool\ndo_syslog_sudo(int pri, char *logline, const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    size_t len, maxlen;\n    char *p, *tmp, save;\n    const char *fmt;\n    debug_decl(do_syslog_sudo, SUDO_DEBUG_UTIL);\n\n    evl_conf->open_log(EVLOG_SYSLOG, NULL);\n\n    if (evlog == NULL) {\n\t/* Not a command, just log it as-is. */\n\tsyslog(pri, \"%s\", logline);\n\tgoto done;\n    }\n\n    /*\n     * Log the full line, breaking into multiple syslog(3) calls if necessary\n     */\n    fmt = _(\"%8s : %s\");\n    maxlen = evl_conf->syslog_maxlen -\n\t(strlen(fmt) - 5 + strlen(evlog->submituser));\n    for (p = logline; *p != '\\0'; ) {\n\tlen = strlen(p);\n\tif (len > maxlen) {\n\t    /*\n\t     * Break up the line into what will fit on one syslog(3) line\n\t     * Try to avoid breaking words into several lines if possible.\n\t     */\n\t    tmp = memrchr(p, ' ', maxlen);\n\t    if (tmp == NULL)\n\t\ttmp = p + maxlen;\n\n\t    /* NULL terminate line, but save the char to restore later */\n\t    save = *tmp;\n\t    *tmp = '\\0';\n\n\t    syslog(pri, fmt, evlog->submituser, p);\n\n\t    *tmp = save;\t\t\t/* restore saved character */\n\n\t    /* Advance p and eliminate leading whitespace */\n\t    for (p = tmp; *p == ' '; p++)\n\t\tcontinue;\n\t} else {\n\t    syslog(pri, fmt, evlog->submituser, p);\n\t    p += len;\n\t}\n\tfmt = _(\"%8s : (command continued) %s\");\n\tmaxlen = evl_conf->syslog_maxlen -\n\t    (strlen(fmt) - 5 + strlen(evlog->submituser));\n    }\ndone:\n    evl_conf->close_log(EVLOG_SYSLOG, NULL);\n\n    debug_return_bool(true);\n}\n\nstatic bool\ndo_syslog_json(int pri, int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *json_str;\n    debug_decl(do_syslog_json, SUDO_DEBUG_UTIL);\n\n    /* Format as a compact JSON message (no newlines) */\n    json_str = format_json(event_type, args, evlog, true);\n    if (json_str == NULL)\n\tdebug_return_bool(false);\n\n    /* Syslog it in a sudo object with a @cee: prefix. */\n    /* TODO: use evl_conf->syslog_maxlen to break up long messages. */\n    evl_conf->open_log(EVLOG_SYSLOG, NULL);\n    syslog(pri, \"@cee:{\\\"sudo\\\":{%s}}\", json_str);\n    evl_conf->close_log(EVLOG_SYSLOG, NULL);\n    free(json_str);\n    debug_return_bool(true);\n}\n\n/*\n * Log a message to syslog in either sudo or JSON format.\n */\nstatic bool\ndo_syslog(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *logline = NULL;\n    bool ret = false;\n    int pri;\n    debug_decl(do_syslog, SUDO_DEBUG_UTIL);\n\n    /* Sudo format logs and mailed logs use the same log line format. */\n    if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {\n\tlogline = new_logline(event_type, flags, args, evlog);\n\tif (logline == NULL)\n\t    debug_return_bool(false);\n\n\tif (ISSET(flags, EVLOG_MAIL)) {\n\t    if (!send_mail(evlog, \"%s\", logline)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to mail log line\");\n\t    }\n\t    if (ISSET(flags, EVLOG_MAIL_ONLY)) {\n\t\tfree(logline);\n\t\tdebug_return_bool(true);\n\t    }\n\t}\n    }\n\n    switch (event_type) {\n    case EVLOG_ACCEPT:\n    case EVLOG_EXIT:\n\tpri = evl_conf->syslog_acceptpri;\n\tbreak;\n    case EVLOG_REJECT:\n\tpri = evl_conf->syslog_rejectpri;\n\tbreak;\n    case EVLOG_ALERT:\n\tpri = evl_conf->syslog_alertpri;\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected event type %d\", event_type);\n\tpri = -1;\n\tbreak;\n    }\n    if (pri == -1) {\n\t/* syslog disabled for this message type */\n\tfree(logline);\n\tdebug_return_bool(true);\n    }\n\n    switch (evl_conf->format) {\n    case EVLOG_SUDO:\n\tret = do_syslog_sudo(pri, logline, evlog);\n\tbreak;\n    case EVLOG_JSON:\n\tret = do_syslog_json(pri, event_type, args, evlog);\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected eventlog format %d\", evl_conf->format);\n\tbreak;\n    }\n    free(logline);\n\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile_sudo(const char *logline, const struct eventlog *evlog,\n    const struct timespec *event_time)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    char *full_line, timebuf[8192], *timestr = NULL;\n    const char *timefmt = evl_conf->time_fmt;\n    const char *logfile = evl_conf->logpath;\n    struct tm tm;\n    bool ret = false;\n    FILE *fp;\n    int len;\n    debug_decl(do_logfile_sudo, SUDO_DEBUG_UTIL);\n\n    if ((fp = evl_conf->open_log(EVLOG_FILE, logfile)) == NULL)\n\tdebug_return_bool(false);\n\n    if (!sudo_lock_file(fileno(fp), SUDO_LOCK)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to lock log file %s\", logfile);\n\tgoto done;\n    }\n\n    if (event_time != NULL) {\n\ttime_t tv_sec = event_time->tv_sec;\n\tif (localtime_r(&tv_sec, &tm) != NULL) {\n\t    /* strftime() does not guarantee to NUL-terminate so we must check. */\n\t    timebuf[sizeof(timebuf) - 1] = '\\0';\n\t    if (strftime(timebuf, sizeof(timebuf), timefmt, &tm) != 0 &&\n\t\t    timebuf[sizeof(timebuf) - 1] == '\\0') {\n\t\ttimestr = timebuf;\n\t    }\n\t}\n    }\n    if (evlog != NULL) {\n\tlen = asprintf(&full_line, \"%s : %s : %s\",\n\t    timestr ? timestr : \"invalid date\", evlog->submituser, logline);\n    } else {\n\tlen = asprintf(&full_line, \"%s : %s\",\n\t    timestr ? timestr : \"invalid date\", logline);\n    }\n    if (len == -1) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tgoto done;\n    }\n    eventlog_writeln(fp, full_line, len, evl_conf->file_maxlen);\n    free(full_line);\n    (void)fflush(fp);\n    if (ferror(fp)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to write log file %s\", logfile);\n\tgoto done;\n    }\n    ret = true;\n\ndone:\n    (void)sudo_lock_file(fileno(fp), SUDO_UNLOCK);\n    evl_conf->close_log(EVLOG_FILE, fp);\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile_json(int event_type, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const char *logfile = evl_conf->logpath;\n    struct stat sb;\n    char *json_str;\n    int ret = false;\n    FILE *fp;\n    debug_decl(do_logfile_json, SUDO_DEBUG_UTIL);\n\n    if ((fp = evl_conf->open_log(EVLOG_FILE, logfile)) == NULL)\n\tdebug_return_bool(false);\n\n    json_str = format_json(event_type, args, evlog, false);\n    if (json_str == NULL)\n\tgoto done;\n\n    if (!sudo_lock_file(fileno(fp), SUDO_LOCK)) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"unable to lock log file %s\", logfile);\n\tgoto done;\n    }\n\n    /* Note: assumes file ends in \"\\n}\\n\" */\n    if (fstat(fileno(fp), &sb) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t    \"unable to stat %s\", logfile);\n\tgoto done;\n    }\n    if (sb.st_size == 0) {\n\t/* New file */\n\tputc('{', fp);\n    } else if (fseeko(fp, -3, SEEK_END) == 0) {\n\t/* Continue file, overwrite the final \"\\n}\\n\" */\n\tputc(',', fp);\n    } else {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_ERRNO|SUDO_DEBUG_LINENO,\n\t    \"unable to seek %s\", logfile);\n\tgoto done;\n    }\n    fputs(json_str, fp);\n    fputs(\"\\n}\\n\", fp);\t\t\t/* close JSON */\n    fflush(fp);\n    /* XXX - check for file error and recover */\n\n    ret = true;\n\ndone:\n    free(json_str);\n    (void)sudo_lock_file(fileno(fp), SUDO_UNLOCK);\n    evl_conf->close_log(EVLOG_FILE, fp);\n    debug_return_bool(ret);\n}\n\nstatic bool\ndo_logfile(int event_type, int flags, struct eventlog_args *args,\n    const struct eventlog *evlog)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    bool ret = false;\n    char *logline = NULL;\n    debug_decl(do_logfile, SUDO_DEBUG_UTIL);\n\n    /* Sudo format logs and mailed logs use the same log line format. */\n    if (evl_conf->format == EVLOG_SUDO || ISSET(flags, EVLOG_MAIL)) {\n\tlogline = new_logline(event_type, flags, args, evlog);\n\tif (logline == NULL)\n\t    debug_return_bool(false);\n\n\tif (ISSET(flags, EVLOG_MAIL)) {\n\t    if (!send_mail(evlog, \"%s\", logline)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to mail log line\");\n\t    }\n\t    if (ISSET(flags, EVLOG_MAIL_ONLY)) {\n\t\tfree(logline);\n\t\tdebug_return_bool(true);\n\t    }\n\t}\n    }\n\n    switch (evl_conf->format) {\n    case EVLOG_SUDO:\n\tret = do_logfile_sudo(logline ? logline : args->reason, evlog,\n\t    args->event_time);\n\tbreak;\n    case EVLOG_JSON:\n\tret = do_logfile_json(event_type, args, evlog);\n\tbreak;\n    default:\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"unexpected eventlog format %d\", evl_conf->format);\n\tbreak;\n    }\n    free(logline);\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_accept(const struct eventlog *evlog, int flags,\n    eventlog_json_callback_t info_cb, void *info)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_accept, SUDO_DEBUG_UTIL);\n\n    args.event_time = &evlog->submit_time;\n    args.json_info_cb = info_cb;\n    args.json_info = info;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_ACCEPT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_ACCEPT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_reject(const struct eventlog *evlog, int flags, const char *reason,\n    eventlog_json_callback_t info_cb, void *info)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_reject, SUDO_DEBUG_UTIL);\n\n    args.reason = reason;\n    args.event_time = &evlog->submit_time;\n    args.json_info_cb = info_cb;\n    args.json_info = info;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_REJECT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_REJECT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_alert(const struct eventlog *evlog, int flags,\n    struct timespec *alert_time, const char *reason, const char *errstr)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    bool ret = true;\n    debug_decl(log_alert, SUDO_DEBUG_UTIL);\n\n    args.reason = reason;\n    args.errstr = errstr;\n    args.event_time = alert_time;\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_ALERT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_ALERT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n\nbool\neventlog_exit(const struct eventlog *evlog, int flags)\n{\n    const struct eventlog_config *evl_conf = eventlog_getconf();\n    const int log_type = evl_conf->type;\n    struct eventlog_args args = { NULL };\n    struct timespec exit_time;\n    bool ret = true;\n    debug_decl(eventlog_exit, SUDO_DEBUG_UTIL);\n\n    if (sudo_timespecisset(&evlog->run_time)) {\n\tsudo_timespecadd(&evlog->submit_time, &evlog->run_time, &exit_time);\n\targs.event_time = &exit_time;\n    }\n\n    if (ISSET(log_type, EVLOG_SYSLOG)) {\n\tif (!do_syslog(EVLOG_EXIT, flags, &args, evlog))\n\t    ret = false;\n\tCLR(flags, EVLOG_MAIL);\n    }\n    if (ISSET(log_type, EVLOG_FILE)) {\n\tif (!do_logfile(EVLOG_EXIT, flags, &args, evlog))\n\t    ret = false;\n    }\n\n    debug_return_bool(ret);\n}\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2020-2021 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef HAVE_STDBOOL_H\n# include <stdbool.h>\n#else\n# include \"compat/stdbool.h\"\n#endif /* HAVE_STDBOOL_H */\n#include <string.h>\n#include <unistd.h>\n#include <ctype.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <time.h>\n\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_iolog.h\"\n#include \"sudo_util.h\"\n\n#include \"iolog_json.h\"\n\nstruct json_stack {\n    unsigned int depth;\n    unsigned int maxdepth;\n    struct json_object *frames[64];\n};\n#define JSON_STACK_INTIALIZER(s) { 0, nitems((s).frames) };\n\nstatic bool\njson_store_columns(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_columns, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 1 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"tty cols %lld: out of range\", item->u.number);\n\tevlog->columns = 0;\n\tdebug_return_bool(false);\n    }\n\n    evlog->columns = item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_command(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_command, SUDO_DEBUG_UTIL);\n\n    /*\n     * Note: struct eventlog must store command + args.\n     *       We don't have argv yet so we append the args later.\n     */\n    free(evlog->command);\n    evlog->command = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_dumped_core(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_dumped_core, SUDO_DEBUG_UTIL);\n\n    evlog->dumped_core = item->u.boolean;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_exit_value(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_exit_value, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 0 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"exit value %lld: out of range\", item->u.number);\n\tevlog->exit_value = -1;\n\tdebug_return_bool(false);\n    }\n\n    evlog->exit_value = item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_lines(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_lines, SUDO_DEBUG_UTIL);\n\n    if (item->u.number < 1 || item->u.number > INT_MAX) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"tty lines %lld: out of range\", item->u.number);\n\tevlog->lines = 0;\n\tdebug_return_bool(false);\n    }\n\n    evlog->lines = item->u.number;\n    debug_return_bool(true);\n}\n\nchar **\njson_array_to_strvec(struct json_object *array)\n{\n    struct json_item *item;\n    int len = 0;\n    char **ret;\n    debug_decl(json_array_to_strvec, SUDO_DEBUG_UTIL);\n\n    TAILQ_FOREACH(item, &array->items, entries) {\n\t/* Can only convert arrays of string. */\n\tif (item->type != JSON_STRING) {\n\t    sudo_warnx(U_(\"expected JSON_STRING, got %d\"), item->type);\n\t    debug_return_ptr(NULL);\n\t}\n\t/* Prevent integer overflow. */\n\tif (++len == INT_MAX) {\n\t    sudo_warnx(\"%s\", U_(\"JSON_ARRAY too large\"));\n\t    debug_return_ptr(NULL);\n\t}\n    }\n    if ((ret = reallocarray(NULL, len + 1, sizeof(char *))) == NULL) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tdebug_return_ptr(NULL);\n    }\n    len = 0;\n    TAILQ_FOREACH(item, &array->items, entries) {\n\tret[len++] = item->u.string;\n\titem->u.string = NULL;\n    }\n    ret[len] = NULL;\n\n    debug_return_ptr(ret);\n}\n\nstatic bool\njson_store_runargv(struct json_item *item, struct eventlog *evlog)\n{\n    int i;\n    debug_decl(json_store_runargv, SUDO_DEBUG_UTIL);\n\n    if (evlog->argv != NULL) {\n\tfor (i = 0; evlog->argv[i] != NULL; i++)\n\t    free(evlog->argv[i]);\n\tfree(evlog->argv);\n    }\n    evlog->argv = json_array_to_strvec(&item->u.child);\n\n    debug_return_bool(evlog->argv != NULL);\n}\n\nstatic bool\njson_store_runenv(struct json_item *item, struct eventlog *evlog)\n{\n    int i;\n    debug_decl(json_store_runenv, SUDO_DEBUG_UTIL);\n\n    if (evlog->envp != NULL) {\n\tfor (i = 0; evlog->envp[i] != NULL; i++)\n\t    free(evlog->envp[i]);\n\tfree(evlog->envp);\n    }\n    evlog->envp = json_array_to_strvec(&item->u.child);\n\n    debug_return_bool(evlog->envp != NULL);\n}\n\nstatic bool\njson_store_rungid(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_rungid, SUDO_DEBUG_UTIL);\n\n    evlog->rungid = (gid_t)item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_rungroup(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_rungroup, SUDO_DEBUG_UTIL);\n\n    free(evlog->rungroup);\n    evlog->rungroup = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runuid(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runuid, SUDO_DEBUG_UTIL);\n\n    evlog->runuid = (uid_t)item->u.number;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runuser(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runuser, SUDO_DEBUG_UTIL);\n\n    free(evlog->runuser);\n    evlog->runuser = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runchroot(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runchroot, SUDO_DEBUG_UTIL);\n\n    free(evlog->runchroot);\n    evlog->runchroot = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_runcwd(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_runcwd, SUDO_DEBUG_UTIL);\n\n    free(evlog->runcwd);\n    evlog->runcwd = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_signal(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_signal, SUDO_DEBUG_UTIL);\n\n    free(evlog->signal_name);\n    evlog->signal_name = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submitcwd(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submitcwd, SUDO_DEBUG_UTIL);\n\n    free(evlog->cwd);\n    evlog->cwd = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submithost(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submithost, SUDO_DEBUG_UTIL);\n\n    free(evlog->submithost);\n    evlog->submithost = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_submituser(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_submituser, SUDO_DEBUG_UTIL);\n\n    free(evlog->submituser);\n    evlog->submituser = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_timespec(struct json_item *item, struct timespec *ts)\n{\n    struct json_object *object;\n    debug_decl(json_store_timespec, SUDO_DEBUG_UTIL);\n\n    object = &item->u.child;\n    TAILQ_FOREACH(item, &object->items, entries) {\n\tif (item->type != JSON_NUMBER)\n\t    continue;\n\tif (strcmp(item->name, \"seconds\") == 0) {\n\t    ts->tv_sec = item->u.number;\n\t    continue;\n\t}\n\tif (strcmp(item->name, \"nanoseconds\") == 0) {\n\t    ts->tv_nsec = item->u.number;\n\t    continue;\n\t}\n    }\n    debug_return_bool(true);\n}\n\nstatic bool\njson_store_run_time(struct json_item *item, struct eventlog *evlog)\n{\n    return json_store_timespec(item, &evlog->run_time);\n}\n\nstatic bool\njson_store_timestamp(struct json_item *item, struct eventlog *evlog)\n{\n    return json_store_timespec(item, &evlog->submit_time);\n}\n\nstatic bool\njson_store_ttyname(struct json_item *item, struct eventlog *evlog)\n{\n    debug_decl(json_store_ttyname, SUDO_DEBUG_UTIL);\n\n    free(evlog->ttyname);\n    evlog->ttyname = item->u.string;\n    item->u.string = NULL;\n    debug_return_bool(true);\n}\n\nstatic struct iolog_json_key {\n    const char *name;\n    enum json_value_type type;\n    bool (*setter)(struct json_item *, struct eventlog *);\n} iolog_json_keys[] = {\n    { \"columns\", JSON_NUMBER, json_store_columns },\n    { \"command\", JSON_STRING, json_store_command },\n    { \"dumped_core\", JSON_BOOL, json_store_dumped_core },\n    { \"exit_value\", JSON_NUMBER, json_store_exit_value },\n    { \"lines\", JSON_NUMBER, json_store_lines },\n    { \"run_time\", JSON_OBJECT, json_store_run_time },\n    { \"runargv\", JSON_ARRAY, json_store_runargv },\n    { \"runenv\", JSON_ARRAY, json_store_runenv },\n    { \"rungid\", JSON_ID, json_store_rungid },\n    { \"rungroup\", JSON_STRING, json_store_rungroup },\n    { \"runuid\", JSON_ID, json_store_runuid },\n    { \"runuser\", JSON_STRING, json_store_runuser },\n    { \"runchroot\", JSON_STRING, json_store_runchroot },\n    { \"runcwd\", JSON_STRING, json_store_runcwd },\n    { \"signal\", JSON_STRING, json_store_signal },\n    { \"submitcwd\", JSON_STRING, json_store_submitcwd },\n    { \"submithost\", JSON_STRING, json_store_submithost },\n    { \"submituser\", JSON_STRING, json_store_submituser },\n    { \"timestamp\", JSON_OBJECT, json_store_timestamp },\n    { \"ttyname\", JSON_STRING, json_store_ttyname },\n    { NULL }\n};\n\nstatic struct json_item *\nnew_json_item(enum json_value_type type, char *name, unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(new_json_item, SUDO_DEBUG_UTIL);\n\n    if ((item = malloc(sizeof(*item))) == NULL)  {\n\tsudo_warnx(U_(\"%s: %s\"), __func__,\n\t    U_(\"unable to allocate memory\"));\n\tdebug_return_ptr(NULL);\n    }\n    item->name = name;\n    item->type = type;\n    item->lineno = lineno;\n\n    debug_return_ptr(item);\n}\n\nstatic char *\njson_parse_string(char **strp)\n{\n    char *dst, *end, *ret, *src = *strp + 1;\n    size_t len;\n    debug_decl(json_parse_string, SUDO_DEBUG_UTIL);\n\n    for (end = src; *end != '\"' && *end != '\\0'; end++) {\n\tif (end[0] == '\\\\' && end[1] == '\"')\n\t    end++;\n    }\n    if (*end != '\"') {\n\tsudo_warnx(\"%s\", U_(\"missing double quote in name\"));\n\tdebug_return_str(NULL);\n    }\n    len = (size_t)(end - src);\n\n    /* Copy string, flattening escaped chars. */\n    dst = ret = malloc(len + 1);\n    if (dst == NULL) {\n\tsudo_warnx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tdebug_return_str(NULL);\n    }\n    while (src < end) {\n\tchar ch = *src++;\n\tif (ch == '\\\\') {\n\t    switch (*src) {\n\t    case 'b':\n\t\tch = '\\b';\n\t\tbreak;\n\t    case 'f':\n\t\tch = '\\f';\n\t\tbreak;\n\t    case 'n':\n\t\tch = '\\n';\n\t\tbreak;\n\t    case 'r':\n\t\tch = '\\r';\n\t\tbreak;\n\t    case 't':\n\t\tch = '\\t';\n\t\tbreak;\n\t    case 'u':\n\t\t/* Only currently handles 8-bit ASCII. */\n\t\tif (src[1] == '0' && src[2] == '0') {\n\t\t    ch = sudo_hexchar(&src[3]);\n\t\t    if (ch != -1) {\n\t\t\tsrc += 4;\n\t\t\tbreak;\n\t\t    }\n\t\t}\n\t\t/* Not in \\u00XX format. */\n\t\tFALLTHROUGH;\n\t    case '\"':\n\t    case '\\\\':\n\t    default:\n\t\t/* Note: a bare \\ at the end of a string will be removed. */\n\t\tch = *src;\n\t\tbreak;\n\t    }\n\t    src++;\n\t}\n\t*dst++ = ch;\n    }\n    *dst = '\\0';\n\n    /* Trim trailing whitespace. */\n    do {\n\tend++;\n    } while (isspace((unsigned char)*end));\n    *strp = end;\n\n    debug_return_str(ret);\n}\n\nvoid\nfree_json_items(struct json_item_list *items)\n{\n    struct json_item *item;\n    debug_decl(free_json_items, SUDO_DEBUG_UTIL);\n\n    while ((item = TAILQ_FIRST(items)) != NULL) {\n\tTAILQ_REMOVE(items, item, entries);\n\tswitch (item->type) {\n\tcase JSON_STRING:\n\t    free(item->u.string);\n\t    break;\n\tcase JSON_ARRAY:\n\tcase JSON_OBJECT:\n\t    free_json_items(&item->u.child.items);\n\t    break;\n\tcase JSON_ID:\n\tcase JSON_NUMBER:\n\tcase JSON_BOOL:\n\tcase JSON_NULL:\n\t    /* Nothing to free. */\n\t    break;\n\tdefault:\n\t    sudo_warnx(\"%s: internal error, invalid JSON type %d\",\n\t\t__func__, item->type);\n\t    break;\n\t}\n\tfree(item->name);\n\tfree(item);\n    }\n\n    debug_return;\n}\n\nstatic bool\niolog_parse_json_object(struct json_object *object, struct eventlog *evlog)\n{\n    struct json_item *item;\n    bool ret = false;\n    debug_decl(iolog_parse_json_object, SUDO_DEBUG_UTIL);\n\n    /* First object holds all the actual data. */\n    item = TAILQ_FIRST(&object->items);\n    if (item == NULL) {\n\tsudo_warnx(\"%s\", U_(\"missing JSON_OBJECT\"));\n\tgoto done;\n    }\n    if (item->type != JSON_OBJECT) {\n\tsudo_warnx(U_(\"expected JSON_OBJECT, got %d\"), item->type);\n\tgoto done;\n    }\n    object = &item->u.child;\n\n    TAILQ_FOREACH(item, &object->items, entries) {\n\tstruct iolog_json_key *key;\n\n\t/* expecting key:value pairs */\n\tif (item->name == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: missing object name\", __func__);\n\t    goto done;\n\t}\n\n\t/* lookup name */\n\tfor (key = iolog_json_keys; key->name != NULL; key++) {\n\t    if (strcmp(item->name, key->name) == 0)\n\t\tbreak;\n\t}\n\tif (key->name == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: unknown key %s\", __func__, item->name);\n\t} else if (key->type != item->type &&\n\t\t(key->type != JSON_ID || item->type != JSON_NUMBER)) {\n\t    sudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t\"%s: key mismatch %s type %d, expected %d\", __func__,\n\t\titem->name, item->type, key->type);\n\t    goto done;\n\t} else {\n\t    /* Matched name and type. */\n\t    if (!key->setter(item, evlog)) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"unable to store %s\", key->name);\n\t\tgoto done;\n\t    }\n\t}\n    }\n\n    ret = true;\n\ndone:\n    debug_return_bool(ret);\n}\n\nstatic bool\njson_insert_bool(struct json_item_list *items, char *name, bool value,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_bool, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_BOOL, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.boolean = value;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_null(struct json_item_list *items, char *name, unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_null, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_NULL, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_num(struct json_item_list *items, char *name, long long value,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_num, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_NUMBER, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.number = value;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic bool\njson_insert_str(struct json_item_list *items, char *name, char **strp,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_insert_str, SUDO_DEBUG_UTIL);\n\n    if ((item = new_json_item(JSON_STRING, name, lineno)) == NULL)\n\tdebug_return_bool(false);\n    item->u.string = json_parse_string(strp);\n    if (item->u.string == NULL) {\n\tfree(item);\n\tdebug_return_bool(false);\n    }\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    debug_return_bool(true);\n}\n\nstatic struct json_object *\njson_stack_push(struct json_stack *stack, struct json_item_list *items,\n    struct json_object *frame, enum json_value_type type, char *name,\n    unsigned int lineno)\n{\n    struct json_item *item;\n    debug_decl(json_stack_push, SUDO_DEBUG_UTIL);\n\n    /* We limit the stack size rather than expanding it. */\n    if (stack->depth >= stack->maxdepth) {\n\tsudo_warnx(U_(\"json stack exhausted (max %u frames)\"), stack->maxdepth);\n\tdebug_return_ptr(NULL);\n    }\n\n    /* Allocate a new item and insert it into the list. */\n    if ((item = new_json_item(type, name, lineno)) == NULL)\n\tdebug_return_ptr(NULL);\n    TAILQ_INIT(&item->u.child.items);\n    item->u.child.parent = item;\n    TAILQ_INSERT_TAIL(items, item, entries);\n\n    /* Push the current frame onto the stack (depth check performed above). */\n    stack->frames[stack->depth++] = frame;\n\n    /* Return the new frame */\n    debug_return_ptr(&item->u.child);\n}\n\n/* Only expect a value if a name is defined or we are in an array. */\n#define expect_value (name != NULL || (frame->parent != NULL && frame->parent->type == JSON_ARRAY))\n\nbool\niolog_parse_json(FILE *fp, const char *filename, struct json_object *root)\n{\n    struct json_object *frame = root;\n    struct json_stack stack = JSON_STACK_INTIALIZER(stack);\n    unsigned int lineno = 0;\n    char *name = NULL;\n    char *cp, *buf = NULL;\n    size_t bufsize = 0;\n    ssize_t len;\n    bool ret = false;\n    bool saw_comma = false;\n    long long num;\n    char ch;\n    debug_decl(iolog_parse_json, SUDO_DEBUG_UTIL);\n\n    root->parent = NULL;\n    TAILQ_INIT(&root->items);\n\n    while ((len = getdelim(&buf, &bufsize, '\\n', fp)) != -1) {\n\tchar *ep = buf + len - 1;\n\tcp = buf;\n\n\tlineno++;\n\n\t/* Trim trailing whitespace. */\n\twhile (ep > cp && isspace((unsigned char)*ep))\n\t    ep--;\n\tep[1] = '\\0';\n\n\tfor (;;) {\n\t    const char *errstr;\n\n\t    /* Trim leading whitespace, skip blank lines. */\n\t    while (isspace((unsigned char)*cp))\n\t\tcp++;\n\n\t    /* Check for comma separator and strip it out. */\n\t    if (*cp == ',') {\n\t\tsaw_comma = true;\n\t\tcp++;\n\t\twhile (isspace((unsigned char)*cp))\n\t\t    cp++;\n\t    }\n\n\t    /* End of line? */\n\t    if (*cp == '\\0')\n\t\tbreak;\n\n\t    switch (*cp) {\n\t    case '{':\n\t\tif (name == NULL && frame->parent != NULL) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"objects must consist of name:value pairs\"));\n\t\t    goto done;\n\t\t}\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tsaw_comma = false;\n\t\tframe = json_stack_push(&stack, &frame->items, frame,\n\t\t    JSON_OBJECT, name, lineno);\n\t\tif (frame == NULL)\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case '}':\n\t\tif (stack.depth == 0 || frame->parent == NULL ||\n\t\t\tframe->parent->type != JSON_OBJECT) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unmatched close brace\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tframe = stack.frames[--stack.depth];\n\t\tsaw_comma = false;\n\t\tbreak;\n\t    case '[':\n\t\tif (frame->parent == NULL) {\n\t\t    /* Must have an enclosing object. */\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected array\"));\n\t\t    goto done;\n\t\t}\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tsaw_comma = false;\n\t\tframe = json_stack_push(&stack, &frame->items, frame,\n\t\t    JSON_ARRAY, name, lineno);\n\t\tif (frame == NULL)\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case ']':\n\t\tif (stack.depth == 0 || frame->parent == NULL ||\n\t\t\tframe->parent->type != JSON_ARRAY) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unmatched close bracket\"));\n\t\t    goto done;\n\t\t}\n\t\tcp++;\n\t\tframe = stack.frames[--stack.depth];\n\t\tsaw_comma = false;\n\t\tbreak;\n\t    case '\"':\n\t\tif (frame->parent == NULL) {\n\t\t    /* Must have an enclosing object. */\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected string\"));\n\t\t    goto done;\n\t\t}\n\n\t\tif (!expect_value) {\n\t\t    /* Parse \"name\": */\n\t\t    if ((name = json_parse_string(&cp)) == NULL)\n\t\t\tgoto done;\n\t\t    /* TODO: allow colon on next line? */\n\t\t    if (*cp != ':') {\n\t\t\tsudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\t    U_(\"missing colon after name\"));\n\t\t\tgoto done;\n\t\t    }\n\t\t    cp++;\n\t\t} else {\n\t\t    if (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t\tsudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\t    U_(\"missing separator between values\"));\n\t\t\tgoto done;\n\t\t    }\n\t\t    saw_comma = false;\n\t\t    if (!json_insert_str(&frame->items, name, &cp, lineno))\n\t\t\tgoto done;\n\t\t    name = NULL;\n\t\t}\n\t\tbreak;\n\t    case 't':\n\t\tif (strncmp(cp, \"true\", sizeof(\"true\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected boolean\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"true\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_bool(&frame->items, name, true, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case 'f':\n\t\tif (strncmp(cp, \"false\", sizeof(\"false\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected boolean\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"false\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_bool(&frame->items, name, false, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case 'n':\n\t\tif (strncmp(cp, \"null\", sizeof(\"null\") - 1) != 0)\n\t\t    goto parse_error;\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected null\"));\n\t\t    goto done;\n\t\t}\n\t\tcp += sizeof(\"null\") - 1;\n\t\tif (*cp != ',' && !isspace((unsigned char)*cp) && *cp != '\\0')\n\t\t    goto parse_error;\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\n\t\tif (!json_insert_null(&frame->items, name, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    case '+': case '-': case '0': case '1': case '2': case '3':\n\t    case '4': case '5': case '6': case '7': case '8': case '9':\n\t\tif (!expect_value) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"unexpected number\"));\n\t\t    goto done;\n\t\t}\n\t\t/* XXX - strtonumx() would be simpler here. */\n\t\tlen = strcspn(cp, \" \\f\\n\\r\\t\\v,\");\n\t\tch = cp[len];\n\t\tcp[len] = '\\0';\n\t\tif (!saw_comma && !TAILQ_EMPTY(&frame->items)) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, \n\t\t\tU_(\"missing separator between values\"));\n\t\t    goto done;\n\t\t}\n\t\tsaw_comma = false;\n\t\tnum = sudo_strtonum(cp, LLONG_MIN, LLONG_MAX, &errstr);\n\t\tif (errstr != NULL) {\n\t\t    sudo_warnx(\"%s:%u:%td: %s: %s\", filename, lineno, cp - buf,\n\t\t\tcp, U_(errstr));\n\t\t    goto done;\n\t\t}\n\t\tcp += len;\n\t\t*cp = ch;\n\n\t\tif (!json_insert_num(&frame->items, name, num, lineno))\n\t\t    goto done;\n\t\tname = NULL;\n\t\tbreak;\n\t    default:\n\t\tgoto parse_error;\n\t    }\n\t}\n    }\n    if (stack.depth != 0) {\n\tframe = stack.frames[stack.depth - 1];\n\tif (frame->parent == NULL || frame->parent->type == JSON_OBJECT) {\n\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf,\n\t\tU_(\"unmatched close brace\"));\n\t} else {\n\t    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf,\n\t\tU_(\"unmatched close bracket\"));\n\t}\n\tgoto done;\n    }\n\n    ret = true;\n    goto done;\n\nparse_error:\n    sudo_warnx(\"%s:%u:%td: %s\", filename, lineno, cp - buf, U_(\"parse error\"));\ndone:\n    free(buf);\n    free(name);\n    if (!ret)\n\tfree_json_items(&root->items);\n\n    debug_return_bool(ret);\n}\n\nbool\niolog_parse_loginfo_json(FILE *fp, const char *iolog_dir, struct eventlog *evlog)\n{\n    struct json_object root;\n    bool ret = false;\n    debug_decl(iolog_parse_loginfo_json, SUDO_DEBUG_UTIL);\n\n    if (iolog_parse_json(fp, iolog_dir, &root)) {\n\t/* Walk the stack and parse entries. */\n\tret = iolog_parse_json_object(&root, evlog);\n\n\t/* Cleanup. */\n\tfree_json_items(&root.items);\n    }\n\n    debug_return_bool(ret);\n}\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2007-2015, 2023 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <stdlib.h>\n#include <string.h>\n#include <ctype.h>\n\n#include \"sudo_compat.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_lbuf.h\"\n#include \"sudo_util.h\"\n\nvoid\nsudo_lbuf_init_v1(struct sudo_lbuf *lbuf, sudo_lbuf_output_t output,\n    int indent, const char *continuation, int cols)\n{\n    debug_decl(sudo_lbuf_init, SUDO_DEBUG_UTIL);\n\n    lbuf->output = output;\n    lbuf->continuation = continuation;\n    lbuf->indent = indent;\n    lbuf->cols = cols;\n    lbuf->error = 0;\n    lbuf->len = 0;\n    lbuf->size = 0;\n    lbuf->buf = NULL;\n\n    debug_return;\n}\n\nvoid\nsudo_lbuf_destroy_v1(struct sudo_lbuf *lbuf)\n{\n    debug_decl(sudo_lbuf_destroy, SUDO_DEBUG_UTIL);\n\n    free(lbuf->buf);\n    lbuf->error = 0;\n    lbuf->len = 0;\n    lbuf->size = 0;\n    lbuf->buf = NULL;\n\n    debug_return;\n}\n\nstatic bool\nsudo_lbuf_expand(struct sudo_lbuf *lbuf, unsigned int extra)\n{\n    debug_decl(sudo_lbuf_expand, SUDO_DEBUG_UTIL);\n\n    if (lbuf->len + extra + 1 <= lbuf->len) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"integer overflow updating lbuf->len\");\n\tlbuf->error = 1;\n\tdebug_return_bool(false);\n    }\n\n    if (lbuf->len + extra + 1 > lbuf->size) {\n\tunsigned int new_size = sudo_pow2_roundup(lbuf->len + extra + 1);\n\tchar *new_buf;\n\n\tif (new_size < 1024)\n\t    new_size = 1024;\n\tif ((new_buf = realloc(lbuf->buf, new_size)) == NULL) {\n\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\"unable to allocate memory\");\n\t    lbuf->error = 1;\n\t    debug_return_bool(false);\n\t}\n\tlbuf->buf = new_buf;\n\tlbuf->size = new_size;\n    }\n    debug_return_bool(true);\n}\n\n/*\n * Escape a character in octal form (#0n) and store it as a string\n * in buf, which must have at least 6 bytes available.\n * Returns the length of buf, not counting the terminating NUL byte.\n */\nstatic int\nescape(unsigned char ch, char *buf)\n{\n    const int len = ch < 0100 ? (ch < 010 ? 3 : 4) : 5;\n\n    /* Work backwards from the least significant digit to most significant. */\n    switch (len) {\n    case 5:\n\tbuf[4] = (ch & 7) + '0';\n\tch >>= 3;\n\tFALLTHROUGH;\n    case 4:\n\tbuf[3] = (ch & 7) + '0';\n\tch >>= 3;\n\tFALLTHROUGH;\n    case 3:\n\tbuf[2] = (ch & 7) + '0';\n\tbuf[1] = '0';\n\tbuf[0] = '#';\n\tbreak;\n    }\n    buf[len] = '\\0';\n\n    return len;\n}\n\n/*\n * Parse the format and append strings, only %s and %% escapes are supported.\n * Any non-printable characters are escaped in octal as #0nn.\n */\nbool\nsudo_lbuf_append_esc_v1(struct sudo_lbuf *lbuf, int flags, const char *fmt, ...)\n{\n    unsigned int saved_len = lbuf->len;\n    bool ret = false;\n    const char *s;\n    va_list ap;\n    debug_decl(sudo_lbuf_append_esc, SUDO_DEBUG_UTIL);\n\n    if (sudo_lbuf_error(lbuf))\n\tdebug_return_bool(false);\n\n#define should_escape(ch) \\\n    ((ISSET(flags, LBUF_ESC_CNTRL) && iscntrl((unsigned char)ch)) || \\\n    (ISSET(flags, LBUF_ESC_BLANK) && isblank((unsigned char)ch)))\n#define should_quote(ch) \\\n    (ISSET(flags, LBUF_ESC_QUOTE) && (ch == '\\'' || ch == '\\\\'))\n\n    va_start(ap, fmt);\n    while (*fmt != '\\0') {\n\tif (fmt[0] == '%' && fmt[1] == 's') {\n\t    if ((s = va_arg(ap, char *)) == NULL)\n\t\ts = \"(NULL)\";\n\t    while (*s != '\\0') {\n\t\tif (should_escape(*s)) {\n\t\t    if (!sudo_lbuf_expand(lbuf, sizeof(\"#0177\") - 1))\n\t\t\tgoto done;\n\t\t    lbuf->len += escape(*s++, lbuf->buf + lbuf->len);\n\t\t    continue;\n\t\t}\n\t\tif (should_quote(*s)) {\n\t\t    if (!sudo_lbuf_expand(lbuf, 2))\n\t\t\tgoto done;\n\t\t    lbuf->buf[lbuf->len++] = '\\\\';\n\t\t    lbuf->buf[lbuf->len++] = *s++;\n\t\t    continue;\n\t\t}\n\t\tif (!sudo_lbuf_expand(lbuf, 1))\n\t\t    goto done;\n\t\tlbuf->buf[lbuf->len++] = *s++;\n\t    }\n\t    fmt += 2;\n\t    continue;\n\t}\n\tif (should_escape(*fmt)) {\n\t    if (!sudo_lbuf_expand(lbuf, sizeof(\"#0177\") - 1))\n\t\tgoto done;\n\t    if (*fmt == '\\'') {\n\t\tlbuf->buf[lbuf->len++] = '\\\\';\n\t\tlbuf->buf[lbuf->len++] = *fmt++;\n\t    } else {\n\t\tlbuf->len += escape(*fmt++, lbuf->buf + lbuf->len);\n\t    }\n\t    continue;\n\t}\n\tif (!sudo_lbuf_expand(lbuf, 1))\n\t    goto done;\n\tlbuf->buf[lbuf->len++] = *fmt++;\n    }\n    ret = true;\n\ndone:\n    if (!ret)\n\tlbuf->len = saved_len;\n    if (lbuf->size != 0)\n\tlbuf->buf[lbuf->len] = '\\0';\n    va_end(ap);\n\n    debug_return_bool(ret);\n}\n\n/*\n * Parse the format and append strings, only %s and %% escapes are supported.\n * Any characters in set are quoted with a backslash.\n */\nbool\nsudo_lbuf_append_quoted_v1(struct sudo_lbuf *lbuf, const char *set, const char *fmt, ...)\n{\n    unsigned int saved_len = lbuf->len;\n    bool ret = false;\n    const char *cp, *s;\n    va_list ap;\n    int len;\n    debug_decl(sudo_lbuf_append_quoted, SUDO_DEBUG_UTIL);\n\n    if (sudo_lbuf_error(lbuf))\n\tdebug_return_bool(false);\n\n    va_start(ap, fmt);\n    while (*fmt != '\\0') {\n\tif (fmt[0] == '%' && fmt[1] == 's') {\n\t    if ((s = va_arg(ap, char *)) == NULL)\n\t\ts = \"(NULL)\";\n\t    while ((cp = strpbrk(s, set)) != NULL) {\n\t\tlen = (int)(cp - s);\n\t\tif (!sudo_lbuf_expand(lbuf, len + 2))\n\t\t    goto done;\n\t\tmemcpy(lbuf->buf + lbuf->len, s, len);\n\t\tlbuf->len += len;\n\t\tlbuf->buf[lbuf->len++] = '\\\\';\n\t\tlbuf->buf[lbuf->len++] = *cp;\n\t\ts = cp + 1;\n\t    }\n\t    if (*s != '\\0') {\n\t\tlen = strlen(s);\n\t\tif (!sudo_lbuf_expand(lbuf, len))\n\t\t    goto done;\n\t\tmemcpy(lbuf->buf + lbuf->len, s, len);\n\t\tlbuf->len += len;\n\t    }\n\t    fmt += 2;\n\t    continue;\n\t}\n\tif (!sudo_lbuf_expand(lbuf, 2))\n\t    goto done;\n\tif (strchr(set, *fmt) != NULL)\n\t    lbuf->buf[lbuf->len++] = '\\\\';\n\tlbuf->buf[lbuf->len++] = *fmt++;\n    }\n    ret = true;\n\ndone:\n    if (!ret)\n\tlbuf->len = saved_len;\n    if (lbuf->size != 0)\n\tlbuf->buf[lbuf->len] = '\\0';\n    va_end(ap);\n\n    debug_return_bool(ret);\n}\n\n/*\n * Parse the format and append strings, only %s and %% escapes are supported.\n */\nbool\nsudo_lbuf_append_v1(struct sudo_lbuf *lbuf, const char *fmt, ...)\n{\n    unsigned int saved_len = lbuf->len;\n    bool ret = false;\n    va_list ap;\n    const char *s;\n    int len;\n    debug_decl(sudo_lbuf_append, SUDO_DEBUG_UTIL);\n\n    if (sudo_lbuf_error(lbuf))\n\tdebug_return_bool(false);\n\n    va_start(ap, fmt);\n    while (*fmt != '\\0') {\n\tif (fmt[0] == '%' && fmt[1] == 's') {\n\t    if ((s = va_arg(ap, char *)) == NULL)\n\t\ts = \"(NULL)\";\n\t    len = strlen(s);\n\t    if (!sudo_lbuf_expand(lbuf, len))\n\t\tgoto done;\n\t    memcpy(lbuf->buf + lbuf->len, s, len);\n\t    lbuf->len += len;\n\t    fmt += 2;\n\t    continue;\n\t}\n\tif (!sudo_lbuf_expand(lbuf, 1))\n\t    goto done;\n\tlbuf->buf[lbuf->len++] = *fmt++;\n    }\n    ret = true;\n\ndone:\n    if (!ret)\n\tlbuf->len = saved_len;\n    if (lbuf->size != 0)\n\tlbuf->buf[lbuf->len] = '\\0';\n    va_end(ap);\n\n    debug_return_bool(ret);\n}\n\n/* XXX - check output function return value */\nstatic void\nsudo_lbuf_println(struct sudo_lbuf *lbuf, char *line, int len)\n{\n    char *cp, save;\n    int i, have, contlen = 0;\n    int indent = lbuf->indent;\n    bool is_comment = false;\n    debug_decl(sudo_lbuf_println, SUDO_DEBUG_UTIL);\n\n    /* Comment lines don't use continuation and only indent is for \"# \" */\n    if (line[0] == '#' && isblank((unsigned char)line[1])) {\n\tis_comment = true;\n\tindent = 2;\n    }\n    if (lbuf->continuation != NULL && !is_comment)\n\tcontlen = strlen(lbuf->continuation);\n\n    /*\n     * Print the buffer, splitting the line as needed on a word\n     * boundary.\n     */\n    cp = line;\n    have = lbuf->cols;\n    while (cp != NULL && *cp != '\\0') {\n\tchar *ep = NULL;\n\tint need = len - (int)(cp - line);\n\n\tif (need > have) {\n\t    have -= contlen;\t\t/* subtract for continuation char */\n\t    if ((ep = memrchr(cp, ' ', have)) == NULL)\n\t\tep = memchr(cp + have, ' ', need - have);\n\t    if (ep != NULL)\n\t\tneed = (int)(ep - cp);\n\t}\n\tif (cp != line) {\n\t    if (is_comment) {\n\t\tlbuf->output(\"# \");\n\t    } else {\n\t\t/* indent continued lines */\n\t\t/* XXX - build up string instead? */\n\t\tfor (i = 0; i < indent; i++)\n\t\t    lbuf->output(\" \");\n\t    }\n\t}\n\t/* NUL-terminate cp for the output function and restore afterwards */\n\tsave = cp[need];\n\tcp[need] = '\\0';\n\tlbuf->output(cp);\n\tcp[need] = save;\n\tcp = ep;\n\n\t/*\n\t * If there is more to print, reset have, incremement cp past\n\t * the whitespace, and print a line continuaton char if needed.\n\t */\n\tif (cp != NULL) {\n\t    have = lbuf->cols - indent;\n\t    ep = line + len;\n\t    while (cp < ep && isblank((unsigned char)*cp)) {\n\t\tcp++;\n\t    }\n\t    if (contlen)\n\t\tlbuf->output(lbuf->continuation);\n\t}\n\tlbuf->output(\"\\n\");\n    }\n\n    debug_return;\n}\n\n/*\n * Print the buffer with word wrap based on the tty width.\n * The lbuf is reset on return.\n * XXX - check output function return value\n */\nvoid\nsudo_lbuf_print_v1(struct sudo_lbuf *lbuf)\n{\n    char *cp, *ep;\n    int len;\n    debug_decl(sudo_lbuf_print, SUDO_DEBUG_UTIL);\n\n    if (lbuf->buf == NULL || lbuf->len == 0)\n\tgoto done;\n\n    /* For very small widths just give up... */\n    len = lbuf->continuation ? strlen(lbuf->continuation) : 0;\n    if (lbuf->cols <= lbuf->indent + len + 20) {\n\tlbuf->buf[lbuf->len] = '\\0';\n\tlbuf->output(lbuf->buf);\n\tif (lbuf->buf[lbuf->len - 1] != '\\n')\n\t    lbuf->output(\"\\n\");\n\tgoto done;\n    }\n\n    /* Print each line in the buffer */\n    for (cp = lbuf->buf; cp != NULL && *cp != '\\0'; ) {\n\tif (*cp == '\\n') {\n\t    lbuf->output(\"\\n\");\n\t    cp++;\n\t} else {\n\t    len = lbuf->len - (cp - lbuf->buf);\n\t    if ((ep = memchr(cp, '\\n', len)) != NULL)\n\t\tlen = (int)(ep - cp);\n\t    if (len)\n\t\tsudo_lbuf_println(lbuf, cp, len);\n\t    cp = ep ? ep + 1 : NULL;\n\t}\n    }\n\ndone:\n    lbuf->len = 0;\t\t/* reset the buffer for re-use. */\n    lbuf->error = 0;\n\n    debug_return;\n}\n\nbool\nsudo_lbuf_error_v1(struct sudo_lbuf *lbuf)\n{\n    if (lbuf != NULL && lbuf->error != 0)\n\treturn true;\n    return false;\n}\n\nvoid\nsudo_lbuf_clearerr_v1(struct sudo_lbuf *lbuf)\n{\n    if (lbuf != NULL)\n\tlbuf->error = 0;\n}\n", "@COMPAT_EXP@initprogname\ninitprogname2\nsudo_basename_v1\nsudo_conf_askpass_path_v1\nsudo_conf_clear_paths_v1\nsudo_conf_debug_files_v1\nsudo_conf_debugging_v1\nsudo_conf_developer_mode_v1\nsudo_conf_devsearch_path_v1\nsudo_conf_disable_coredump_v1\nsudo_conf_group_source_v1\nsudo_conf_intercept_path_v1\nsudo_conf_max_groups_v1\nsudo_conf_noexec_path_v1\nsudo_conf_plugin_dir_path_v1\nsudo_conf_plugins_v1\nsudo_conf_probe_interfaces_v1\nsudo_conf_read_v1\nsudo_conf_sesh_path_v1\nsudo_debug_deregister_v1\nsudo_debug_enter_v1\nsudo_debug_execve2_v1\nsudo_debug_exit_bool_v1\nsudo_debug_exit_id_t_v1\nsudo_debug_exit_int_v1\nsudo_debug_exit_long_v1\nsudo_debug_exit_ptr_v1\nsudo_debug_exit_size_t_v1\nsudo_debug_exit_ssize_t_v1\nsudo_debug_exit_str_masked_v1\nsudo_debug_exit_str_v1\nsudo_debug_exit_time_t_v1\nsudo_debug_exit_v1\nsudo_debug_fork_v1\nsudo_debug_get_active_instance_v1\nsudo_debug_get_fds_v1\nsudo_debug_get_instance_v1\nsudo_debug_needed_v1\nsudo_debug_parse_flags_v1\nsudo_debug_printf2_v1\nsudo_debug_register_v1\nsudo_debug_register_v2\nsudo_debug_set_active_instance_v1\nsudo_debug_update_fd_v1\nsudo_debug_vprintf2_v1\nsudo_debug_write2_v1\nsudo_digest_alloc_v1\nsudo_digest_final_v1\nsudo_digest_free_v1\nsudo_digest_getlen_v1\nsudo_digest_reset_v1\nsudo_digest_update_v1\nsudo_dso_findsym_v1\nsudo_dso_load_v1\nsudo_dso_preload_table_v1\nsudo_dso_strerror_v1\nsudo_dso_unload_v1\nsudo_ev_add_v1\nsudo_ev_add_v2\nsudo_ev_alloc_v1\nsudo_ev_base_alloc_v1\nsudo_ev_base_free_v1\nsudo_ev_base_setdef_v1\nsudo_ev_del_v1\nsudo_ev_dispatch_v1\nsudo_ev_free_v1\nsudo_ev_get_timeleft_v1\nsudo_ev_get_timeleft_v2\nsudo_ev_got_break_v1\nsudo_ev_got_exit_v1\nsudo_ev_loop_v1\nsudo_ev_loopbreak_v1\nsudo_ev_loopcontinue_v1\nsudo_ev_loopexit_v1\nsudo_ev_pending_v1\nsudo_ev_set_v1\nsudo_fatal_callback_deregister_v1\nsudo_fatal_callback_register_v1\nsudo_fatal_nodebug_v1\nsudo_fatalx_nodebug_v1\nsudo_gai_fatal_nodebug_v1\nsudo_gai_vfatal_nodebug_v1\nsudo_gai_vwarn_nodebug_v1\nsudo_gai_warn_nodebug_v1\nsudo_get_ttysize_v1\nsudo_getgrouplist2_v1\nsudo_gethostname_v1\nsudo_gettime_awake_v1\nsudo_gettime_mono_v1\nsudo_gettime_real_v1\nsudo_hexchar_v1\nsudo_json_add_value_as_object_v1\nsudo_json_add_value_v1\nsudo_json_close_array_v1\nsudo_json_close_object_v1\nsudo_json_free_v1\nsudo_json_get_buf_v1\nsudo_json_get_len_v1\nsudo_json_init_v1\nsudo_json_init_v2\nsudo_json_open_array_v1\nsudo_json_open_object_v1\nsudo_lbuf_append_esc_v1\nsudo_lbuf_append_quoted_v1\nsudo_lbuf_append_v1\nsudo_lbuf_clearerr_v1\nsudo_lbuf_destroy_v1\nsudo_lbuf_error_v1\nsudo_lbuf_init_v1\nsudo_lbuf_print_v1\nsudo_lock_file_v1\nsudo_lock_region_v1\nsudo_logfac2str_v1\nsudo_logpri2str_v1\nsudo_mkdir_parents_v1\nsudo_mmap_alloc_v1\nsudo_mmap_allocarray_v1\nsudo_mmap_free_v1\nsudo_mmap_protect_v1\nsudo_mmap_strdup_v1\nsudo_new_key_val_v1\nsudo_open_parent_dir_v1\nsudo_parse_gids_v1\nsudo_parseln_v1\nsudo_parseln_v2\nsudo_pow2_roundup_v1\nsudo_rcstr_addref\nsudo_rcstr_alloc\nsudo_rcstr_delref\nsudo_rcstr_dup\nsudo_regex_compile_v1\nsudo_secure_dir_v1\nsudo_secure_file_v1\nsudo_secure_open_dir_v1\nsudo_secure_open_file_v1\nsudo_setgroups_v1\nsudo_stat_multiarch_v1\nsudo_str2logfac_v1\nsudo_str2logpri_v1\nsudo_strsplit_v1\nsudo_strtobool_v1\nsudo_strtoid_v1\nsudo_strtoid_v2\nsudo_strtoidx_v1\nsudo_strtomode_v1\nsudo_strtonum\nsudo_term_cbreak_v1\nsudo_term_copy_v1\nsudo_term_eof\nsudo_term_erase\nsudo_term_is_raw_v1\nsudo_term_kill\nsudo_term_noecho_v1\nsudo_term_raw_v1\nsudo_term_restore_v1\nsudo_ttyname_dev_v1\nsudo_uuid_create_v1\nsudo_uuid_to_string_v1\nsudo_vfatal_nodebug_v1\nsudo_vfatalx_nodebug_v1\nsudo_vwarn_nodebug_v1\nsudo_vwarnx_nodebug_v1\nsudo_warn_nodebug_v1\nsudo_warn_set_conversation_v1\nsudo_warn_set_locale_func_v1\nsudo_warnx_nodebug_v1\n", "/*\n * SPDX-License-Identifier: ISC\n *\n * Copyright (c) 2009-2023 Todd C. Miller <Todd.Miller@sudo.ws>\n *\n * Permission to use, copy, modify, and distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\n/*\n * This is an open source non-commercial project. Dear PVS-Studio, please check it.\n * PVS-Studio Static Code Analyzer for C, C++ and C#: http://www.viva64.com\n */\n\n#include <config.h>\n\n#include <sys/types.h>\n#include <sys/uio.h>\n#include <sys/stat.h>\n#include <sys/ioctl.h>\n\n#include <stdio.h>\n#include <stdlib.h>\n#if defined(HAVE_STDINT_H)\n# include <stdint.h>\n#elif defined(HAVE_INTTYPES_H)\n# include <inttypes.h>\n#endif\n#include <string.h>\n#include <unistd.h>\n#include <time.h>\n#include <ctype.h>\n#include <errno.h>\n#include <limits.h>\n#include <fcntl.h>\n#include <dirent.h>\n#ifdef HAVE_STDBOOL_H\n# include <stdbool.h>\n#else\n# include \"compat/stdbool.h\"\n#endif /* HAVE_STDBOOL_H */\n#include <regex.h>\n#include <signal.h>\n#ifdef HAVE_GETOPT_LONG\n# include <getopt.h>\n# else\n# include \"compat/getopt.h\"\n#endif /* HAVE_GETOPT_LONG */\n\n#include \"pathnames.h\"\n#include \"sudo_compat.h\"\n#include \"sudo_conf.h\"\n#include \"sudo_debug.h\"\n#include \"sudo_event.h\"\n#include \"sudo_eventlog.h\"\n#include \"sudo_lbuf.h\"\n#include \"sudo_fatal.h\"\n#include \"sudo_gettext.h\"\n#include \"sudo_iolog.h\"\n#include \"sudo_plugin.h\"\n#include \"sudo_queue.h\"\n#include \"sudo_util.h\"\n\n#include \"logging.h\"\n\nstruct replay_closure {\n    const char *iolog_dir;\n    struct sudo_event_base *evbase;\n    struct sudo_event *delay_ev;\n    struct sudo_event *keyboard_ev;\n    struct sudo_event *output_ev;\n    struct sudo_event *sighup_ev;\n    struct sudo_event *sigint_ev;\n    struct sudo_event *sigquit_ev;\n    struct sudo_event *sigterm_ev;\n    struct sudo_event *sigtstp_ev;\n    struct timespec *offset;\n    struct timespec *max_delay;\n    struct timing_closure timing;\n    int iolog_dir_fd;\n    bool interactive;\n    bool suspend_wait;\n    struct io_buffer {\n\tunsigned int len; /* buffer length (how much produced) */\n\tunsigned int off; /* write position (how much already consumed) */\n\tunsigned int toread; /* how much remains to be read */\n\tint lastc;\t  /* last char written */\n\tchar buf[64 * 1024];\n    } iobuf;\n};\n\n/*\n * Handle expressions like:\n * ( user millert or user root ) and tty console and command /bin/sh\n */\nSTAILQ_HEAD(search_node_list, search_node);\nstruct search_node {\n    STAILQ_ENTRY(search_node) entries;\n#define ST_EXPR\t\t1\n#define ST_TTY\t\t2\n#define ST_USER\t\t3\n#define ST_PATTERN\t4\n#define ST_RUNASUSER\t5\n#define ST_RUNASGROUP\t6\n#define ST_FROMDATE\t7\n#define ST_TODATE\t8\n#define ST_CWD\t\t9\n#define ST_HOST\t\t10\n    char type;\n    bool negated;\n    bool or;\n    union {\n\tregex_t cmdre;\n\tstruct timespec tstamp;\n\tchar *cwd;\n\tchar *host;\n\tchar *tty;\n\tchar *user;\n\tchar *runas_group;\n\tchar *runas_user;\n\tstruct search_node_list expr;\n\tvoid *ptr;\n    } u;\n};\n\nstatic struct search_node_list search_expr = STAILQ_HEAD_INITIALIZER(search_expr);\n\nstatic double speed_factor = 1.0;\n\nstatic const char *session_dir = _PATH_SUDO_IO_LOGDIR;\n\nstatic bool terminal_can_resize, terminal_was_resized, follow_mode;\n\nstatic int terminal_lines, terminal_cols;\n\nstatic int ttyfd = -1;\n\nstatic struct iolog_file iolog_files[] = {\n    { false },\t/* IOFD_STDIN */\n    { false },\t/* IOFD_STDOUT */\n    { false },\t/* IOFD_STDERR */\n    { false },\t/* IOFD_TTYIN  */\n    { false },\t/* IOFD_TTYOUT */\n    { true, },\t/* IOFD_TIMING */\n};\n\nstatic const char short_opts[] =  \"d:f:Fhlm:nRSs:V\";\nstatic struct option long_opts[] = {\n    { \"directory\",\trequired_argument,\tNULL,\t'd' },\n    { \"filter\",\t\trequired_argument,\tNULL,\t'f' },\n    { \"follow\",\t\tno_argument,\t\tNULL,\t'F' },\n    { \"help\",\t\tno_argument,\t\tNULL,\t'h' },\n    { \"list\",\t\tno_argument,\t\tNULL,\t'l' },\n    { \"max-wait\",\trequired_argument,\tNULL,\t'm' },\n    { \"non-interactive\", no_argument,\t\tNULL,\t'n' },\n    { \"no-resize\",\tno_argument,\t\tNULL,\t'R' },\n    { \"suspend-wait\",\tno_argument,\t\tNULL,\t'S' },\n    { \"speed\",\t\trequired_argument,\tNULL,\t's' },\n    { \"version\",\tno_argument,\t\tNULL,\t'V' },\n    { NULL,\t\tno_argument,\t\tNULL,\t'\\0' },\n};\n\n/* XXX move to separate header? (currently in sudoers.h) */\nextern char *get_timestr(time_t, int);\nextern time_t get_date(char *);\n\nstatic int list_sessions(int, char **, const char *, const char *, const char *);\nstatic int parse_expr(struct search_node_list *, char **, bool);\nstatic void read_keyboard(int fd, int what, void *v);\nstatic int replay_session(int iolog_dir_fd, const char *iolog_dir,\n    struct timespec *offset, struct timespec *max_wait, const char *decimal,\n    bool interactive, bool suspend_wait);\nstatic void sudoreplay_cleanup(void);\nstatic void write_output(int fd, int what, void *v);\nstatic void restore_terminal_size(void);\nstatic void setup_terminal(struct eventlog *evlog, bool interactive, bool resize);\nsudo_noreturn static void help(void);\nsudo_noreturn static void usage(void);\n\n#define VALID_ID(s) (isalnum((unsigned char)(s)[0]) && \\\n    isalnum((unsigned char)(s)[1]) && isalnum((unsigned char)(s)[2]) && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    isalnum((unsigned char)(s)[5]) && (s)[6] == '\\0')\n\n#define IS_IDLOG(s) ( \\\n    isalnum((unsigned char)(s)[0]) && isalnum((unsigned char)(s)[1]) && \\\n    (s)[2] == '/' && \\\n    isalnum((unsigned char)(s)[3]) && isalnum((unsigned char)(s)[4]) && \\\n    (s)[5] == '/' && \\\n    isalnum((unsigned char)(s)[6]) && isalnum((unsigned char)(s)[7]) && \\\n    (s)[8] == '\\0')\n\nsudo_dso_public int main(int argc, char *argv[]);\n\nint\nmain(int argc, char *argv[])\n{\n    int ch, i, iolog_dir_fd, len, exitcode = EXIT_FAILURE;\n    bool def_filter = true, listonly = false;\n    bool interactive = true, suspend_wait = false, resize = true;\n    const char *decimal, *id, *user = NULL, *pattern = NULL, *tty = NULL;\n    char *cp, *ep, iolog_dir[PATH_MAX];\n    struct timespec offset = { 0, 0};\n    struct eventlog *evlog;\n    struct timespec max_delay_storage, *max_delay = NULL;\n    double dval;\n    debug_decl(main, SUDO_DEBUG_MAIN);\n\n#if defined(SUDO_DEVEL) && defined(__OpenBSD__)\n    {\n\textern char *malloc_options;\n\tmalloc_options = \"S\";\n    }\n#endif\n\n    initprogname(argc > 0 ? argv[0] : \"sudoreplay\");\n    setlocale(LC_ALL, \"\");\n    decimal = localeconv()->decimal_point;\n    bindtextdomain(\"sudoers\", LOCALEDIR); /* XXX - should have sudoreplay domain */\n    textdomain(\"sudoers\");\n\n    /* Register fatal/fatalx callback. */\n    sudo_fatal_callback_register(sudoreplay_cleanup);\n\n    /* Read sudo.conf and initialize the debug subsystem. */\n    if (sudo_conf_read(NULL, SUDO_CONF_DEBUG) == -1)\n\texit(EXIT_FAILURE);\n    sudo_debug_register(getprogname(), NULL, NULL,\n\tsudo_conf_debug_files(getprogname()), -1);\n\n    while ((ch = getopt_long(argc, argv, short_opts, long_opts, NULL)) != -1) {\n\tswitch (ch) {\n\tcase 'd':\n\t    session_dir = optarg;\n\t    break;\n\tcase 'f':\n\t    /* Set the replay filter. */\n\t    def_filter = false;\n\t    for (cp = strtok_r(optarg, \",\", &ep); cp; cp = strtok_r(NULL, \",\", &ep)) {\n\t\tif (strcmp(cp, \"stdin\") == 0)\n\t\t    iolog_files[IOFD_STDIN].enabled = true;\n\t\telse if (strcmp(cp, \"stdout\") == 0)\n\t\t    iolog_files[IOFD_STDOUT].enabled = true;\n\t\telse if (strcmp(cp, \"stderr\") == 0)\n\t\t    iolog_files[IOFD_STDERR].enabled = true;\n\t\telse if (strcmp(cp, \"ttyin\") == 0)\n\t\t    iolog_files[IOFD_TTYIN].enabled = true;\n\t\telse if (strcmp(cp, \"ttyout\") == 0)\n\t\t    iolog_files[IOFD_TTYOUT].enabled = true;\n\t\telse\n\t\t    sudo_fatalx(U_(\"invalid filter option: %s\"), optarg);\n\t    }\n\t    break;\n\tcase 'F':\n\t    follow_mode = true;\n\t    break;\n\tcase 'h':\n\t    help();\n\t    /* NOTREACHED */\n\tcase 'l':\n\t    listonly = true;\n\t    break;\n\tcase 'm':\n\t    errno = 0;\n\t    dval = strtod(optarg, &ep);\n\t    if (*ep != '\\0' || errno != 0)\n\t\tsudo_fatalx(U_(\"invalid max wait: %s\"), optarg);\n\t    if (dval <= 0.0) {\n\t\tsudo_timespecclear(&max_delay_storage);\n\t    } else {\n\t\tmax_delay_storage.tv_sec = dval;\n\t\tmax_delay_storage.tv_nsec =\n\t\t    (dval - max_delay_storage.tv_sec) * 1000000000.0;\n\t    }\n\t    max_delay = &max_delay_storage;\n\t    break;\n\tcase 'n':\n\t    interactive = false;\n\t    break;\n\tcase 'R':\n\t    resize = false;\n\t    break;\n\tcase 'S':\n\t    suspend_wait = true;\n\t    break;\n\tcase 's':\n\t    errno = 0;\n\t    speed_factor = strtod(optarg, &ep);\n\t    if (*ep != '\\0' || errno != 0)\n\t\tsudo_fatalx(U_(\"invalid speed factor: %s\"), optarg);\n\t    break;\n\tcase 'V':\n\t    (void) printf(_(\"%s version %s\\n\"), getprogname(), PACKAGE_VERSION);\n\t    exitcode = EXIT_SUCCESS;\n\t    goto done;\n\tdefault:\n\t    usage();\n\t    /* NOTREACHED */\n\t}\n\n    }\n    argc -= optind;\n    argv += optind;\n\n    if (listonly) {\n\texitcode = list_sessions(argc, argv, pattern, user, tty);\n\tgoto done;\n    }\n\n    if (argc != 1)\n\tusage();\n\n    /* By default we replay stdout, stderr and ttyout. */\n    if (def_filter) {\n\tiolog_files[IOFD_STDOUT].enabled = true;\n\tiolog_files[IOFD_STDERR].enabled = true;\n\tiolog_files[IOFD_TTYOUT].enabled = true;\n    }\n\n    /* Check for offset in @sec.nsec form at the end of the id. */\n    id = argv[0];\n    if ((cp = strchr(id, '@')) != NULL) {\n\tep = iolog_parse_delay(cp + 1, &offset, decimal);\n\tif (ep == NULL || *ep != '\\0')\n\t    sudo_fatalx(U_(\"invalid time offset %s\"), cp + 1);\n\t*cp = '\\0';\n    }\n\n    /* 6 digit ID in base 36, e.g. 01G712AB or free-form name */\n    if (VALID_ID(id)) {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s/%.2s/%.2s/%.2s\",\n\t    session_dir, id, &id[2], &id[4]);\n\tif (len < 0 || len >= ssizeof(iolog_dir))\n\t    sudo_fatalx(U_(\"%s/%.2s/%.2s/%.2s: %s\"), session_dir,\n\t\tid, &id[2], &id[4], strerror(ENAMETOOLONG));\n    } else if (id[0] == '/') {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s\", id);\n\tif (len < 0 || len >= ssizeof(iolog_dir))\n\t    sudo_fatalx(U_(\"%s/timing: %s\"), id, strerror(ENAMETOOLONG));\n    } else {\n\tlen = snprintf(iolog_dir, sizeof(iolog_dir), \"%s/%s\", session_dir, id);\n\tif (len < 0 || len >= ssizeof(iolog_dir)) {\n\t    sudo_fatalx(U_(\"%s/%s: %s\"), session_dir, id,\n\t\tstrerror(ENAMETOOLONG));\n\t}\n    }\n\n    /* Open files for replay, applying replay filter for the -f flag. */\n    if ((iolog_dir_fd = iolog_openat(AT_FDCWD, iolog_dir, O_RDONLY)) == -1)\n\tsudo_fatal(\"%s\", iolog_dir);\n    for (i = 0; i < IOFD_MAX; i++) {\n\tif (!iolog_open(&iolog_files[i], iolog_dir_fd, i, \"r\")) {\n\t    if (errno != ENOENT) {\n\t\tsudo_fatal(U_(\"unable to open %s/%s\"), iolog_dir,\n\t\t    iolog_fd_to_name(i));\n\t    }\n\t}\n    }\n    if (!iolog_files[IOFD_TIMING].enabled) {\n\tsudo_fatal(U_(\"unable to open %s/%s\"), iolog_dir,\n\t    iolog_fd_to_name(IOFD_TIMING));\n    }\n\n    /* Parse log file. */\n    if ((evlog = iolog_parse_loginfo(iolog_dir_fd, iolog_dir)) == NULL)\n\tgoto done;\n    printf(_(\"Replaying sudo session: %s\"), evlog->command);\n    if (evlog->argv != NULL && evlog->argv[0] != NULL) {\n\tfor (i = 1; evlog->argv[i] != NULL; i++)\n\t    printf(\" %s\", evlog->argv[i]);\n    }\n\n    /* Setup terminal if appropriate. */\n    if (!isatty(STDIN_FILENO) || !isatty(STDOUT_FILENO))\n\tinteractive = false;\n    setup_terminal(evlog, interactive, resize);\n    putchar('\\r');\n    putchar('\\n');\n\n    /* Done with parsed log file. */\n    eventlog_free(evlog);\n    evlog = NULL;\n\n    /* Replay session corresponding to iolog_files[]. */\n    exitcode = replay_session(iolog_dir_fd, iolog_dir, &offset, max_delay,\n\tdecimal, interactive, suspend_wait);\n\n    restore_terminal_size();\n    sudo_term_restore(ttyfd, true);\ndone:\n    sudo_debug_exit_int(__func__, __FILE__, __LINE__, sudo_debug_subsys, exitcode);\n    return exitcode;\n}\n\n/*\n * List of terminals that support xterm-like resizing.\n * This is not an exhaustive list.\n * For a list of VT100 style escape codes, see:\n *  http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#VT100%20Mode\n */\nstruct term_names {\n    const char *name;\n    unsigned int len;\n} compatible_terms[] = {\n    { \"Eterm\", 5 },\n    { \"aterm\", 5 },\n    { \"dtterm\", 6 },\n    { \"gnome\", 5 },\n    { \"konsole\", 7 },\n    { \"kvt\\0\", 4 },\n    { \"mlterm\", 6 },\n    { \"rxvt\", 4 },\n    { \"xterm\", 5 },\n    { NULL, 0 }\n};\n\nstruct getsize_closure {\n    int nums[2];\n    int nums_depth;\n    int nums_maxdepth;\n    int state;\n    const char *cp;\n    struct sudo_event *ev;\n    struct timespec timeout;\n};\n\n/* getsize states */\n#define INITIAL\t\t0x00\n#define NEW_NUMBER\t0x01\n#define NUMBER\t\t0x02\n#define GOTSIZE\t\t0x04\n#define READCHAR\t0x10\n\n/*\n * Callback for reading the terminal size response.\n * We use an event for this to support timeouts.\n */\nstatic void\ngetsize_cb(int fd, int what, void *v)\n{\n    struct getsize_closure *gc = v;\n    unsigned char ch = '\\0';\n    debug_decl(getsize_cb, SUDO_DEBUG_UTIL);\n\n    for (;;) {\n\tif (gc->cp[0] == '\\0') {\n\t    gc->state = GOTSIZE;\n\t    goto done;\n\t}\n\tif (ISSET(gc->state, READCHAR)) {\n\t    ssize_t nread = read(ttyfd, &ch, 1);\n\t    switch (nread) {\n\t    case -1:\n\t\tif (errno == EAGAIN)\n\t\t    goto another;\n\t\tFALLTHROUGH;\n\t    case 0:\n\t\tgoto done;\n\t    default:\n\t\tCLR(gc->state, READCHAR);\n\t\tbreak;\n\t    }\n\t}\n\tswitch (gc->state) {\n\tcase INITIAL:\n\t    if (ch == 0233 && gc->cp[0] == '\\033') {\n\t\t/* meta escape, equivalent to ESC[ */\n\t\tch = '[';\n\t\tgc->cp++;\n\t    }\n\t    if (gc->cp[0] == '%' && gc->cp[1] == 'd') {\n\t\tgc->state = NEW_NUMBER;\n\t\tcontinue;\n\t    }\n\t    if (gc->cp[0] != ch) {\n\t\tsudo_debug_printf(SUDO_DEBUG_WARN|SUDO_DEBUG_LINENO,\n\t\t    \"got %d, expected %d\", ch, gc->cp[0]);\n\t\tgoto done;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"got %d\", ch);\n\t    SET(gc->state, READCHAR);\n\t    gc->cp++;\n\t    break;\n\tcase NEW_NUMBER:\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"parsing number\");\n\t    if (!isdigit(ch))\n\t\tgoto done;\n\t    gc->cp += 2;\n\t    if (gc->nums_depth > gc->nums_maxdepth)\n\t\tgoto done;\n\t    gc->nums[gc->nums_depth] = 0;\n\t    gc->state = NUMBER;\n\t    FALLTHROUGH;\n\tcase NUMBER:\n\t    if (!isdigit(ch)) {\n\t\t/* done with number, reparse ch */\n\t\tsudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t    \"number %d (ch %d)\", gc->nums[gc->nums_depth], ch);\n\t\tgc->nums_depth++;\n\t\tgc->state = INITIAL;\n\t\tcontinue;\n\t    }\n\t    sudo_debug_printf(SUDO_DEBUG_DEBUG|SUDO_DEBUG_LINENO,\n\t\t\"got %d\", ch);\n\t    if (gc->nums[gc->nums_depth] > INT_MAX / 10)\n\t\tgoto done;\n\t    gc->nums[gc->nums_depth] *= 10;\n\t    gc->nums[gc->nums_depth] += (ch - '0');\n\t    SET(gc->state, READCHAR);\n\t    break;\n\t}\n    }\n\nanother:\n    if (sudo_ev_add(NULL, gc->ev, &gc->timeout, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\ndone:\n    debug_return;\n}\n\n\n/*\n * Get the terminal size using vt100 terminal escapes.\n */\nstatic bool\nxterm_get_size(int *new_lines, int *new_cols)\n{\n    struct sudo_event_base *evbase;\n    struct getsize_closure gc;\n    const char getsize_request[] = \"\\0337\\033[r\\033[999;999H\\033[6n\";\n    const char getsize_response[] = \"\\033[%d;%dR\";\n    bool ret = false;\n    debug_decl(xterm_get_size, SUDO_DEBUG_UTIL);\n\n    /* request the terminal's size */\n    if (write(ttyfd, getsize_request, strlen(getsize_request)) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"%s: error writing xterm size request\", __func__);\n\tgoto done;\n    }\n\n    /*\n     * Callback info for reading back the size with a 10 second timeout.\n     * We expect two numbers (lines and cols).\n     */\n    gc.state = INITIAL|READCHAR;\n    gc.nums_depth = 0;\n    gc.nums_maxdepth = 1;\n    gc.cp = getsize_response;\n    gc.timeout.tv_sec = 10;\n    gc.timeout.tv_nsec = 0;\n\n    /* Setup an event for reading the terminal size */\n    evbase = sudo_ev_base_alloc();\n    if (evbase == NULL)\n\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    gc.ev = sudo_ev_alloc(ttyfd, SUDO_EV_READ, getsize_cb, &gc);\n    if (gc.ev == NULL)\n\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\n    /* Read back terminal size response */\n    if (sudo_ev_add(evbase, gc.ev, &gc.timeout, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    sudo_ev_dispatch(evbase);\n\n    if (gc.state == GOTSIZE) {\n\tsudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t    \"terminal size %d x %x\", gc.nums[0], gc.nums[1]);\n\t*new_lines = gc.nums[0];\n\t*new_cols = gc.nums[1];\n\tret = true;\n    }\n\n    sudo_ev_base_free(evbase);\n    sudo_ev_free(gc.ev);\n\ndone:\n    debug_return_bool(ret);\n}\n\n/*\n * Set the size of the text area to lines and cols.\n * Depending on the terminal implementation, the window itself may\n * or may not shrink to a smaller size.\n */\nstatic bool\nxterm_set_size(int lines, int cols)\n{\n    const char setsize_fmt[] = \"\\033[8;%d;%dt\";\n    int len, new_lines, new_cols;\n    bool ret = false;\n    char buf[1024];\n    debug_decl(xterm_set_size, SUDO_DEBUG_UTIL);\n\n    /* XXX - save cursor and position restore after resizing */\n    len = snprintf(buf, sizeof(buf), setsize_fmt, lines, cols);\n    if (len < 0 || len >= ssizeof(buf)) {\n\t/* not possible due to size of buf */\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t    \"%s: internal error, buffer too small?\", __func__);\n\tgoto done;\n    }\n    if (write(ttyfd, buf, strlen(buf)) == -1) {\n\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO|SUDO_DEBUG_ERRNO,\n\t    \"%s: error writing xterm resize request\", __func__);\n\tgoto done;\n    }\n    /* XXX - keyboard input will interfere with this */\n    if (!xterm_get_size(&new_lines, &new_cols))\n\tgoto done;\n    if (lines == new_lines && cols == new_cols)\n\tret = true;\n\ndone:\n    debug_return_bool(ret);\n}\n\nstatic void\nsetup_terminal(struct eventlog *evlog, bool interactive, bool resize)\n{\n    const char *term;\n    debug_decl(check_terminal, SUDO_DEBUG_UTIL);\n\n    fflush(stdout);\n\n    /* Open fd for /dev/tty and set to raw mode. */\n    if (interactive) {\n\tttyfd = open(_PATH_TTY, O_RDWR);\n\twhile (!sudo_term_raw(ttyfd, 1)) {\n\t    if (errno != EINTR)\n\t\tsudo_fatal(\"%s\", U_(\"unable to set tty to raw mode\"));\n\t    kill(getpid(), SIGTTOU);\n\t}\n    }\n\n    /* Find terminal size if the session has size info. */\n    if (evlog->lines == 0 && evlog->columns == 0) {\n\t/* no tty size info, hope for the best... */\n\tdebug_return;\n    }\n\n    if (resize && ttyfd != -1) {\n\tterm = getenv(\"TERM\");\n\tif (term != NULL && *term != '\\0') {\n\t    struct term_names *tn;\n\n\t    for (tn = compatible_terms; tn->name != NULL; tn++) {\n\t\tif (strncmp(term, tn->name, tn->len) == 0) {\n\t\t    /* xterm-like terminals can resize themselves. */\n\t\t    if (xterm_get_size(&terminal_lines, &terminal_cols))\n\t\t\tterminal_can_resize = true;\n\t\t    break;\n\t\t}\n\t    }\n\t}\n    }\n\n    if (!terminal_can_resize) {\n\t/* either not xterm or not interactive */\n\tsudo_get_ttysize(&terminal_lines, &terminal_cols);\n    }\n\n    if (evlog->lines == terminal_lines && evlog->columns == terminal_cols) {\n\t/* nothing to change */\n\tdebug_return;\n    }\n\n    if (terminal_can_resize) {\n\t/* session terminal size is different, try to resize ours */\n\tif (xterm_set_size(evlog->lines, evlog->columns)) {\n\t    /* success */\n\t    sudo_debug_printf(SUDO_DEBUG_INFO|SUDO_DEBUG_LINENO,\n\t\t\"resized terminal to %d x %x\", evlog->lines, evlog->columns);\n\t    terminal_was_resized = true;\n\t    debug_return;\n\t}\n\t/* resize failed, don't try again */\n\tterminal_can_resize = false;\n    }\n\n    if (evlog->lines > terminal_lines || evlog->columns > terminal_cols) {\n\tfputs(_(\"Warning: your terminal is too small to properly replay the log.\\n\"), stdout);\n\tprintf(_(\"Log geometry is %d x %d, your terminal's geometry is %d x %d.\"), evlog->lines, evlog->columns, terminal_lines, terminal_cols);\n    }\n    debug_return;\n}\n\nstatic void\nresize_terminal(int lines, int cols)\n{\n    debug_decl(resize_terminal, SUDO_DEBUG_UTIL);\n\n    if (terminal_can_resize) {\n\tif (xterm_set_size(lines, cols))\n\t    terminal_was_resized = true;\n\telse\n\t    terminal_can_resize = false;\n    }\n\n    debug_return;\n}\n\nstatic void\nrestore_terminal_size(void)\n{\n    debug_decl(restore_terminal, SUDO_DEBUG_UTIL);\n\n    if (terminal_was_resized) {\n\t/* We are still in raw mode, hence the carriage return. */\n\tputchar('\\r');\n\tfputs(U_(\"Replay finished, press any key to restore the terminal.\"),\n\t    stdout);\n\tfflush(stdout);\n\t(void)getchar();\n\txterm_set_size(terminal_lines, terminal_cols);\n\tputchar('\\r');\n\tputchar('\\n');\n    }\n\n    debug_return;\n}\n\nstatic bool\niolog_complete(struct replay_closure *closure)\n{\n    struct stat sb;\n    debug_decl(iolog_complete, SUDO_DEBUG_UTIL);\n\n    if (fstatat(closure->iolog_dir_fd, \"timing\", &sb, 0) != -1) {\n\tif (ISSET(sb.st_mode, S_IWUSR|S_IWGRP|S_IWOTH))\n\t    debug_return_bool(false);\n    }\n\n    debug_return_bool(true);\n}\n\n/*\n * Read the next record from the timing file and schedule a delay\n * event with the specified timeout.\n * In follow mode, ignore EOF and just delay for a short time.\n * Return 0 on success, 1 on EOF and -1 on error.\n */\nstatic int\nget_timing_record(struct replay_closure *closure)\n{\n    struct timing_closure *timing = &closure->timing;\n    bool nodelay = false;\n    debug_decl(get_timing_record, SUDO_DEBUG_UTIL);\n\n    if (follow_mode && timing->event == IO_EVENT_COUNT) {\n\t/* In follow mode, we already waited. */\n\tnodelay = true;\n    }\n\n    switch (iolog_read_timing_record(&iolog_files[IOFD_TIMING], timing)) {\n    case -1:\n\t/* error */\n\tdebug_return_int(-1);\n    case 1:\n\t/* EOF */\n\tif (!follow_mode || iolog_complete(closure)) {\n\t    debug_return_int(1);\n\t}\n\t/* Follow mode, keep reading until done. */\n\tiolog_clearerr(&iolog_files[IOFD_TIMING]);\n\ttiming->delay.tv_sec = 0;\n\ttiming->delay.tv_nsec = 1000000;\n\ttiming->iol = NULL;\n\ttiming->event = IO_EVENT_COUNT;\n\tbreak;\n    default:\n\t/* Record number bytes to read. */\n\tif (timing->event != IO_EVENT_WINSIZE &&\n\t\ttiming->event != IO_EVENT_SUSPEND) {\n\t    closure->iobuf.len = 0;\n\t    closure->iobuf.off = 0;\n\t    closure->iobuf.lastc = '\\0';\n\t    closure->iobuf.toread = timing->u.nbytes;\n\t}\n\n\tif (sudo_timespecisset(closure->offset)) {\n\t    if (sudo_timespeccmp(&timing->delay, closure->offset, >)) {\n\t\tsudo_timespecsub(&timing->delay, closure->offset, &timing->delay);\n\t\tsudo_timespecclear(closure->offset);\n\t    } else {\n\t\tsudo_timespecsub(closure->offset, &timing->delay, closure->offset);\n\t\tsudo_timespecclear(&timing->delay);\n\t    }\n\t}\n\n\tif (nodelay) {\n\t    /* Already waited, fire immediately. */\n\t    timing->delay.tv_sec = 0;\n\t    timing->delay.tv_nsec = 0;\n\t} else {\n\t    /* Adjust delay using speed factor and max_delay. */\n\t    iolog_adjust_delay(&timing->delay, closure->max_delay,\n\t\tspeed_factor);\n\t}\n\tbreak;\n    }\n\n    /* Schedule the delay event. */\n    if (sudo_ev_add(closure->evbase, closure->delay_ev, &timing->delay, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    debug_return_int(0);\n}\n\n/*\n * Read next timing record.\n * Exits the event loop on EOF, breaks out on error.\n */\nstatic void\nnext_timing_record(struct replay_closure *closure)\n{\n    debug_decl(next_timing_record, SUDO_DEBUG_UTIL);\n\nagain:\n    switch (get_timing_record(closure)) {\n    case 0:\n\t/* success */\n\tif (closure->timing.event == IO_EVENT_SUSPEND &&\n\t    closure->timing.u.signo == SIGCONT && !closure->suspend_wait) {\n\t    /* Ignore time spent suspended. */\n\t    goto again;\n\t}\n\tbreak;\n    case 1:\n\t/* EOF */\n\tsudo_ev_loopexit(closure->evbase);\n\tbreak;\n    default:\n\t/* error */\n\tsudo_ev_loopbreak(closure->evbase);\n\tbreak;\n    }\n    debug_return;\n}\n\nstatic bool\nfill_iobuf(struct replay_closure *closure)\n{\n    const size_t space = sizeof(closure->iobuf.buf) - closure->iobuf.len;\n    const struct timing_closure *timing = &closure->timing;\n    const char *errstr;\n    debug_decl(fill_iobuf, SUDO_DEBUG_UTIL);\n\n    if (closure->iobuf.toread != 0 && space != 0) {\n\tconst size_t len =\n\t    closure->iobuf.toread < space ? closure->iobuf.toread : space;\n\tssize_t nread = iolog_read(timing->iol,\n\t    closure->iobuf.buf + closure->iobuf.off, len, &errstr);\n\tif (nread <= 0) {\n\t    if (nread == 0) {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"%s/%s: premature EOF, expected %u bytes\",\n\t\t    closure->iolog_dir, iolog_fd_to_name(timing->event),\n\t\t    closure->iobuf.toread);\n\t    } else {\n\t\tsudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t    \"%s/%s: read error: %s\", closure->iolog_dir,\n\t\t    iolog_fd_to_name(timing->event), errstr);\n\t    }\n\t    sudo_warnx(U_(\"unable to read %s/%s: %s\"),\n\t\tclosure->iolog_dir, iolog_fd_to_name(timing->event), errstr);\n\t    debug_return_bool(false);\n\t}\n\tclosure->iobuf.toread -= nread;\n\tclosure->iobuf.len += nread;\n    }\n\n    debug_return_bool(true);\n}\n\n/*\n * Called when the inter-record delay has expired.\n * Depending on the record type, either reads the next\n * record or changes window size.\n */\nstatic void\ndelay_cb(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    struct timing_closure *timing = &closure->timing;\n    debug_decl(delay_cb, SUDO_DEBUG_UTIL);\n\n    switch (timing->event) {\n    case IO_EVENT_WINSIZE:\n\tresize_terminal(timing->u.winsize.lines, timing->u.winsize.cols);\n\tbreak;\n    case IO_EVENT_STDIN:\n\tif (iolog_files[IOFD_STDIN].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDIN];\n\tbreak;\n    case IO_EVENT_STDOUT:\n\tif (iolog_files[IOFD_STDOUT].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDOUT];\n\tbreak;\n    case IO_EVENT_STDERR:\n\tif (iolog_files[IOFD_STDERR].enabled)\n\t    timing->iol = &iolog_files[IOFD_STDERR];\n\tbreak;\n    case IO_EVENT_TTYIN:\n\tif (iolog_files[IOFD_TTYIN].enabled)\n\t    timing->iol = &iolog_files[IOFD_TTYIN];\n\tbreak;\n    case IO_EVENT_TTYOUT:\n\tif (iolog_files[IOFD_TTYOUT].enabled)\n\t    timing->iol = &iolog_files[IOFD_TTYOUT];\n\tbreak;\n    }\n\n    if (timing->iol != NULL) {\n\t/* If the stream is open, enable the write event. */\n\tif (sudo_ev_add(closure->evbase, closure->output_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    } else {\n\t/* Not replaying, get the next timing record and continue. */\n\tnext_timing_record(closure);\n    }\n\n    debug_return;\n}\n\nstatic void\nreplay_closure_free(struct replay_closure *closure)\n{\n    /*\n     * Free events and event base, then the closure itself.\n     */\n    if (closure->iolog_dir_fd != -1)\n\tclose(closure->iolog_dir_fd);\n    sudo_ev_free(closure->delay_ev);\n    sudo_ev_free(closure->keyboard_ev);\n    sudo_ev_free(closure->output_ev);\n    sudo_ev_free(closure->sighup_ev);\n    sudo_ev_free(closure->sigint_ev);\n    sudo_ev_free(closure->sigquit_ev);\n    sudo_ev_free(closure->sigterm_ev);\n    sudo_ev_free(closure->sigtstp_ev);\n    sudo_ev_base_free(closure->evbase);\n    free(closure);\n}\n\nstatic void\nsignal_cb(int signo, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    debug_decl(signal_cb, SUDO_DEBUG_UTIL);\n\n    switch (signo) {\n    case SIGHUP:\n    case SIGINT:\n    case SIGQUIT:\n    case SIGTERM:\n\t/* Free the event base and restore signal handlers. */\n\treplay_closure_free(closure);\n\n\t/* Restore the terminal and die. */\n\tsudoreplay_cleanup();\n\tkill(getpid(), signo);\n\tbreak;\n    case SIGTSTP:\n\t/* Ignore ^Z since we have no way to restore the screen. */\n\tbreak;\n    }\n\n    debug_return;\n}\n\nstatic struct replay_closure *\nreplay_closure_alloc(int iolog_dir_fd, const char *iolog_dir,\n    struct timespec *offset, struct timespec *max_delay, const char *decimal,\n    bool interactive, bool suspend_wait)\n{\n    struct replay_closure *closure;\n    debug_decl(replay_closure_alloc, SUDO_DEBUG_UTIL);\n\n    if ((closure = calloc(1, sizeof(*closure))) == NULL)\n\tdebug_return_ptr(NULL);\n\n    closure->iolog_dir_fd = iolog_dir_fd;\n    closure->iolog_dir = iolog_dir;\n    closure->interactive = interactive;\n    closure->offset = offset;\n    closure->suspend_wait = suspend_wait;\n    closure->max_delay = max_delay;\n    closure->timing.decimal = decimal;\n\n    /*\n     * Setup event base and delay, input and output events.\n     * If interactive, take input from and write to /dev/tty.\n     * If not interactive there is no input event.\n     */\n    closure->evbase = sudo_ev_base_alloc();\n    if (closure->evbase == NULL)\n\tgoto bad;\n    closure->delay_ev = sudo_ev_alloc(-1, SUDO_EV_TIMEOUT, delay_cb, closure);\n    if (closure->delay_ev == NULL)\n        goto bad;\n    if (interactive) {\n\tclosure->keyboard_ev = sudo_ev_alloc(ttyfd, SUDO_EV_READ|SUDO_EV_PERSIST,\n\t    read_keyboard, closure);\n\tif (closure->keyboard_ev == NULL)\n\t    goto bad;\n\tif (sudo_ev_add(closure->evbase, closure->keyboard_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    }\n    closure->output_ev = sudo_ev_alloc(interactive ? ttyfd : STDOUT_FILENO,\n\tSUDO_EV_WRITE, write_output, closure);\n    if (closure->output_ev == NULL)\n        goto bad;\n\n    /*\n     * Setup signal events, we need to restore the terminal if killed.\n     */\n    closure->sighup_ev = sudo_ev_alloc(SIGHUP, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sighup_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sighup_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigint_ev = sudo_ev_alloc(SIGINT, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigint_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigint_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigquit_ev = sudo_ev_alloc(SIGQUIT, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigquit_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigquit_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigterm_ev = sudo_ev_alloc(SIGTERM, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigterm_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigterm_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    closure->sigtstp_ev = sudo_ev_alloc(SIGTSTP, SUDO_EV_SIGNAL, signal_cb,\n\tclosure);\n    if (closure->sigtstp_ev == NULL)\n\tgoto bad;\n    if (sudo_ev_add(closure->evbase, closure->sigtstp_ev, NULL, false) == -1)\n\tsudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n\n    debug_return_ptr(closure);\nbad:\n    replay_closure_free(closure);\n    debug_return_ptr(NULL);\n}\n\nstatic int\nreplay_session(int iolog_dir_fd, const char *iolog_dir, struct timespec *offset,\n    struct timespec *max_delay, const char *decimal, bool interactive,\n    bool suspend_wait)\n{\n    struct replay_closure *closure;\n    int ret = 0;\n    debug_decl(replay_session, SUDO_DEBUG_UTIL);\n\n    /* Allocate the delay closure and read the first timing record. */\n    closure = replay_closure_alloc(iolog_dir_fd, iolog_dir, offset, max_delay,\n\tdecimal, interactive, suspend_wait);\n    if (get_timing_record(closure) != 0) {\n\tret = 1;\n\tgoto done;\n    }\n\n    /* Run event loop. */\n    sudo_ev_dispatch(closure->evbase);\n    if (sudo_ev_got_break(closure->evbase))\n\tret = 1;\n\ndone:\n    /* Clean up and return. */\n    replay_closure_free(closure);\n    debug_return_int(ret);\n}\n\n/*\n * Write the I/O buffer.\n */\nstatic void\nwrite_output(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    const struct timing_closure *timing = &closure->timing;\n    struct io_buffer *iobuf = &closure->iobuf;\n    unsigned iovcnt = 1;\n    struct iovec iov[2];\n    bool added_cr = false;\n    size_t nbytes, nwritten;\n    debug_decl(write_output, SUDO_DEBUG_UTIL);\n\n    /* Refill iobuf if there is more to read and buf is empty. */\n    if (!fill_iobuf(closure)) {\n\tsudo_ev_loopbreak(closure->evbase);\n\tdebug_return;\n    }\n\n    nbytes = iobuf->len - iobuf->off;\n    iov[0].iov_base = iobuf->buf + iobuf->off;\n    iov[0].iov_len = nbytes;\n\n    if (closure->interactive &&\n\t(timing->event == IO_EVENT_STDOUT || timing->event == IO_EVENT_STDERR)) {\n\tchar *nl;\n\n\t/*\n\t * We may need to insert a carriage return before the newline.\n\t * Note that the carriage return may have already been written.\n\t */\n\tnl = memchr(iov[0].iov_base, '\\n', iov[0].iov_len);\n\tif (nl != NULL) {\n\t    size_t len = (size_t)(nl - (char *)iov[0].iov_base);\n\t    if ((nl == iov[0].iov_base && iobuf->lastc != '\\r') ||\n\t\t(nl != iov[0].iov_base && nl[-1] != '\\r')) {\n\t\tiov[0].iov_len = len;\n\t\tiov[1].iov_base = (char *)\"\\r\\n\";\n\t\tiov[1].iov_len = 2;\n\t\tiovcnt = 2;\n\t\tnbytes = iov[0].iov_len + iov[1].iov_len;\n\t\tadded_cr = true;\n\t    }\n\t}\n    }\n\n    nwritten = writev(fd, iov, iovcnt);\n    switch ((ssize_t)nwritten) {\n    case -1:\n\tif (errno != EINTR && errno != EAGAIN)\n\t    sudo_fatal(U_(\"unable to write to %s\"), \"stdout\");\n\tbreak;\n    case 0:\n\t/* Should not happen. */\n\tbreak;\n    default:\n\tif (added_cr && nwritten >= nbytes - 1) {\n\t    /* The last char written was either '\\r' or '\\n'. */\n\t    iobuf->lastc = nwritten == nbytes ? '\\n' : '\\r';\n\t} else {\n\t    /* Stash the last char written. */\n\t    iobuf->lastc = *((char *)iov[0].iov_base + nwritten);\n\t}\n\tif (added_cr) {\n\t    /* Subtract one for the carriage return we added above. */\n\t    nwritten--;\n\t}\n\tiobuf->off += nwritten;\n\tbreak;\n    }\n\n    if (iobuf->off == iobuf->len) {\n\t/* Write complete, go to next timing entry if possible. */\n\tswitch (get_timing_record(closure)) {\n\tcase 0:\n\t    /* success */\n\t    break;\n\tcase 1:\n\t    /* EOF */\n\t    sudo_ev_loopexit(closure->evbase);\n\t    break;\n\tdefault:\n\t    /* error */\n\t    sudo_ev_loopbreak(closure->evbase);\n\t    break;\n\t}\n    } else {\n\t/* Reschedule event to write remainder. */\n\tif (sudo_ev_add(NULL, closure->output_ev, NULL, false) == -1)\n\t    sudo_fatal(\"%s\", U_(\"unable to add event to queue\"));\n    }\n    debug_return;\n}\n\n/*\n * Build expression list from search args\n */\nstatic int\nparse_expr(struct search_node_list *head, char *argv[], bool sub_expr)\n{\n    bool or = false, not = false;\n    struct search_node *sn;\n    char type, **av;\n    const char *errstr;\n    debug_decl(parse_expr, SUDO_DEBUG_UTIL);\n\n    for (av = argv; *av != NULL; av++) {\n\tswitch (av[0][0]) {\n\tcase 'a': /* and (ignore) */\n\t    if (strncmp(*av, \"and\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    continue;\n\tcase 'o': /* or */\n\t    if (strncmp(*av, \"or\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    or = true;\n\t    continue;\n\tcase '!': /* negate */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    not = true;\n\t    continue;\n\tcase 'c': /* cwd or command */\n\t    if (av[0][1] == '\\0')\n\t\tsudo_fatalx(U_(\"ambiguous expression \\\"%s\\\"\"), *av);\n\t    if (strncmp(*av, \"cwd\", strlen(*av)) == 0)\n\t\ttype = ST_CWD;\n\t    else if (strncmp(*av, \"command\", strlen(*av)) == 0)\n\t\ttype = ST_PATTERN;\n\t    else\n\t\tgoto bad;\n\t    break;\n\tcase 'f': /* from date */\n\t    if (strncmp(*av, \"fromdate\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_FROMDATE;\n\t    break;\n\tcase 'g': /* runas group */\n\t    if (strncmp(*av, \"group\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_RUNASGROUP;\n\t    break;\n\tcase 'h': /* host */\n\t    if (strncmp(*av, \"host\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_HOST;\n\t    break;\n\tcase 'r': /* runas user */\n\t    if (strncmp(*av, \"runas\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_RUNASUSER;\n\t    break;\n\tcase 't': /* tty or to date */\n\t    if (av[0][1] == '\\0')\n\t\tsudo_fatalx(U_(\"ambiguous expression \\\"%s\\\"\"), *av);\n\t    if (strncmp(*av, \"todate\", strlen(*av)) == 0)\n\t\ttype = ST_TODATE;\n\t    else if (strncmp(*av, \"tty\", strlen(*av)) == 0)\n\t\ttype = ST_TTY;\n\t    else\n\t\tgoto bad;\n\t    break;\n\tcase 'u': /* user */\n\t    if (strncmp(*av, \"user\", strlen(*av)) != 0)\n\t\tgoto bad;\n\t    type = ST_USER;\n\t    break;\n\tcase '(': /* start sub-expression */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    type = ST_EXPR;\n\t    break;\n\tcase ')': /* end sub-expression */\n\t    if (av[0][1] != '\\0')\n\t\tgoto bad;\n\t    if (!sub_expr)\n\t\tsudo_fatalx(\"%s\", U_(\"unmatched ')' in expression\"));\n\t    debug_return_int(av - argv + 1);\n\tdefault:\n\tbad:\n\t    sudo_fatalx(U_(\"unknown search term \\\"%s\\\"\"), *av);\n\t    /* NOTREACHED */\n\t}\n\n\t/* Allocate new search node */\n\tif ((sn = calloc(1, sizeof(*sn))) == NULL)\n\t    sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tsn->type = type;\n\tsn->or = or;\n\tsn->negated = not;\n\tif (type == ST_EXPR) {\n\t    STAILQ_INIT(&sn->u.expr);\n\t    av += parse_expr(&sn->u.expr, av + 1, true);\n\t} else {\n\t    if (*(++av) == NULL)\n\t\tsudo_fatalx(U_(\"%s requires an argument\"), av[-1]);\n\t    if (type == ST_PATTERN) {\n\t\tif (!sudo_regex_compile(&sn->u.cmdre, *av, &errstr)) {\n\t\t    sudo_fatalx(U_(\"invalid regular expression \\\"%s\\\": %s\"),\n\t\t\t*av, U_(errstr));\n\t\t}\n\t    } else if (type == ST_TODATE || type == ST_FROMDATE) {\n\t\tsn->u.tstamp.tv_sec = get_date(*av);\n\t\tsn->u.tstamp.tv_nsec = 0;\n\t\tif (sn->u.tstamp.tv_sec == -1)\n\t\t    sudo_fatalx(U_(\"could not parse date \\\"%s\\\"\"), *av);\n\t    } else {\n\t\tsn->u.ptr = *av;\n\t    }\n\t}\n\tnot = or = false; /* reset state */\n\tSTAILQ_INSERT_TAIL(head, sn, entries);\n    }\n    if (sub_expr)\n\tsudo_fatalx(\"%s\", U_(\"unmatched '(' in expression\"));\n    if (or)\n\tsudo_fatalx(\"%s\", U_(\"illegal trailing \\\"or\\\"\"));\n    if (not)\n\tsudo_fatalx(\"%s\", U_(\"illegal trailing \\\"!\\\"\"));\n\n    debug_return_int(av - argv);\n}\n\nstatic char *\nexpand_command(struct eventlog *evlog, char **newbuf)\n{\n    size_t len, bufsize = strlen(evlog->command) + 1;\n    char *cp, *buf;\n    int ac;\n    debug_decl(expand_command, SUDO_DEBUG_UTIL);\n\n    if (evlog->argv == NULL || evlog->argv[0] == NULL || evlog->argv[1] == NULL) {\n\t/* No arguments, we can use the command as-is. */\n\t*newbuf = NULL;\n\tdebug_return_str(evlog->command);\n    }\n\n    /* Skip argv[0], we use evlog->command instead. */\n    for (ac = 1; evlog->argv[ac] != NULL; ac++)\n\tbufsize += strlen(evlog->argv[ac]) + 1;\n\n    if ((buf = malloc(bufsize)) == NULL)\n\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n    cp = buf;\n\n    len = strlcpy(cp, evlog->command, bufsize);\n    if (len >= bufsize)\n\tsudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n    cp += len;\n    bufsize -= len;\n\n    for (ac = 1; evlog->argv[ac] != NULL; ac++) {\n\tif (bufsize < 2)\n\t    sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n\t*cp++ = ' ';\n\tbufsize--;\n\n\tlen = strlcpy(cp, evlog->argv[ac], bufsize);\n\tif (len >= bufsize)\n\t    sudo_fatalx(U_(\"internal error, %s overflow\"), __func__);\n\tcp += len;\n\tbufsize -= len;\n    }\n\n    *newbuf = buf;\n    debug_return_str(buf);\n}\n\nstatic bool\nmatch_expr(struct search_node_list *head, struct eventlog *evlog, bool last_match)\n{\n    struct search_node *sn;\n    bool res = false, matched = last_match;\n    char *tofree;\n    int rc;\n    debug_decl(match_expr, SUDO_DEBUG_UTIL);\n\n    STAILQ_FOREACH(sn, head, entries) {\n\tswitch (sn->type) {\n\tcase ST_EXPR:\n\t    res = match_expr(&sn->u.expr, evlog, matched);\n\t    break;\n\tcase ST_CWD:\n\t    if (evlog->cwd != NULL)\n\t\tres = strcmp(sn->u.cwd, evlog->cwd) == 0;\n\t    break;\n\tcase ST_HOST:\n\t    if (evlog->submithost != NULL)\n\t\tres = strcmp(sn->u.host, evlog->submithost) == 0;\n\t    break;\n\tcase ST_TTY:\n\t    if (evlog->ttyname != NULL)\n\t\tres = strcmp(sn->u.tty, evlog->ttyname) == 0;\n\t    break;\n\tcase ST_RUNASGROUP:\n\t    if (evlog->rungroup != NULL)\n\t\tres = strcmp(sn->u.runas_group, evlog->rungroup) == 0;\n\t    break;\n\tcase ST_RUNASUSER:\n\t    if (evlog->runuser != NULL)\n\t\tres = strcmp(sn->u.runas_user, evlog->runuser) == 0;\n\t    break;\n\tcase ST_USER:\n\t    if (evlog->submituser != NULL)\n\t\tres = strcmp(sn->u.user, evlog->submituser) == 0;\n\t    break;\n\tcase ST_PATTERN:\n\t    rc = regexec(&sn->u.cmdre, expand_command(evlog, &tofree),\n\t\t0, NULL, 0);\n\t    if (rc && rc != REG_NOMATCH) {\n\t\tchar buf[BUFSIZ];\n\t\tregerror(rc, &sn->u.cmdre, buf, sizeof(buf));\n\t\tsudo_fatalx(\"%s\", buf);\n\t    }\n\t    res = rc == REG_NOMATCH ? 0 : 1;\n\t    free(tofree);\n\t    break;\n\tcase ST_FROMDATE:\n\t    res = sudo_timespeccmp(&evlog->submit_time, &sn->u.tstamp, >=);\n\t    break;\n\tcase ST_TODATE:\n\t    res = sudo_timespeccmp(&evlog->submit_time, &sn->u.tstamp, <=);\n\t    break;\n\tdefault:\n\t    sudo_fatalx(U_(\"unknown search type %d\"), sn->type);\n\t    /* NOTREACHED */\n\t}\n\tif (sn->negated)\n\t    res = !res;\n\tmatched = sn->or ? (res || last_match) : (res && last_match);\n\tlast_match = matched;\n    }\n    debug_return_bool(matched);\n}\n\nstatic int\nlist_session(struct sudo_lbuf *lbuf, char *log_dir, regex_t *re,\n    const char *user, const char *tty)\n{\n    char idbuf[7], *idstr, *cp;\n    struct eventlog *evlog = NULL;\n    const char *timestr;\n    int i, ret = -1;\n    debug_decl(list_session, SUDO_DEBUG_UTIL);\n\n    if ((evlog = iolog_parse_loginfo(-1, log_dir)) == NULL)\n\tgoto done;\n\n    if (evlog->command == NULL || evlog->submituser == NULL ||\n\t    evlog->runuser == NULL) {\n\tgoto done;\n    }\n\n    /* Match on search expression if there is one. */\n    if (!STAILQ_EMPTY(&search_expr) && !match_expr(&search_expr, evlog, true))\n\tgoto done;\n\n    /* Convert from /var/log/sudo-sessions/00/00/01 to 000001 */\n    cp = log_dir + strlen(session_dir) + 1;\n    if (IS_IDLOG(cp)) {\n\tidbuf[0] = cp[0];\n\tidbuf[1] = cp[1];\n\tidbuf[2] = cp[3];\n\tidbuf[3] = cp[4];\n\tidbuf[4] = cp[6];\n\tidbuf[5] = cp[7];\n\tidbuf[6] = '\\0';\n\tidstr = idbuf;\n    } else {\n\t/* Not an id, use as-is. */\n\tidstr = cp;\n    }\n    /* XXX - print lines + cols? */\n    timestr = get_timestr(evlog->submit_time.tv_sec, 1);\n    sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"%s : %s : \",\n\ttimestr ? timestr : \"invalid date\", evlog->submituser);\n    if (evlog->submithost != NULL) {\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"HOST=%s ; \",\n\t    evlog->submithost);\n    }\n    if (evlog->ttyname != NULL) {\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TTY=%s ; \",\n\t    evlog->ttyname);\n    }\n    if (evlog->runchroot != NULL) {\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CHROOT=%s ; \",\n\t    evlog->runchroot);\n    }\n    if (evlog->runcwd != NULL || evlog->cwd != NULL) {\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"CWD=%s ; \",\n\t    evlog->runcwd ? evlog->runcwd : evlog->cwd);\n    }\n    sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"USER=%s ; \", evlog->runuser);\n    if (evlog->rungroup != NULL) {\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"GROUP=%s ; \",\n\t    evlog->rungroup);\n    }\n    sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"TSID=%s ; \", idstr);\n\n    /* \n     * If we have both command and argv from info.json we can escape\n     * blanks in the the command and arguments.  If all we have is a\n     * single string containing both the command and arguments we cannot.\n     */\n    if (evlog->argv != NULL) {\n\t/* Command plus argv from the info.json file. */\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_BLANK,\n\t    \"COMMAND=%s\", evlog->command);\n\tif (evlog->argv[0] != NULL) {\n\t    for (i = 1; evlog->argv[i] != NULL; i++) {\n\t\tsudo_lbuf_append(lbuf, \" \");\n\t\tif (strchr(evlog->argv[i], ' ') != NULL) {\n\t\t    /* Wrap args containing spaces in single quotes. */\n\t\t    sudo_lbuf_append(lbuf, \"'\");\n\t\t    sudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL|LBUF_ESC_QUOTE,\n\t\t\t\"%s\", evlog->argv[i]);\n\t\t    sudo_lbuf_append(lbuf, \"'\");\n\t\t} else {\n\t\t    /* Escape quotes here too for consistency. */\n\t\t    sudo_lbuf_append_esc(lbuf,\n\t\t\tLBUF_ESC_CNTRL|LBUF_ESC_BLANK|LBUF_ESC_QUOTE,\n\t\t\t\"%s\", evlog->argv[i]);\n\t\t}\n\t    }\n\t}\n    } else {\n\t/* Single string from the legacy info file. */\n\tsudo_lbuf_append_esc(lbuf, LBUF_ESC_CNTRL, \"COMMAND=%s\",\n\t    evlog->command);\n    }\n\n    if (!sudo_lbuf_error(lbuf)) {\n\tputs(lbuf->buf);\n\tret = 0;\n    }\n\ndone:\n    lbuf->error = 0;\n    lbuf->len = 0;\n    eventlog_free(evlog);\n    debug_return_int(ret);\n}\n\nstatic int\nsession_compare(const void *v1, const void *v2)\n{\n    const char *s1 = *(const char **)v1;\n    const char *s2 = *(const char **)v2;\n    return strcmp(s1, s2);\n}\n\n/* XXX - always returns 0, calls sudo_fatal() on failure */\nstatic int\nfind_sessions(const char *dir, regex_t *re, const char *user, const char *tty)\n{\n    DIR *d;\n    struct dirent *dp;\n    struct stat sb;\n    struct sudo_lbuf lbuf;\n    size_t sdlen, sessions_len = 0, sessions_size = 0;\n    unsigned int i;\n    int len;\n    char pathbuf[PATH_MAX], **sessions = NULL;\n#ifdef HAVE_STRUCT_DIRENT_D_TYPE\n    bool checked_type = true;\n#else\n    const bool checked_type = false;\n#endif\n    debug_decl(find_sessions, SUDO_DEBUG_UTIL);\n\n    sudo_lbuf_init(&lbuf, NULL, 0, NULL, 0);\n\n    d = opendir(dir);\n    if (d == NULL)\n\tsudo_fatal(U_(\"unable to open %s\"), dir);\n\n    /* XXX - would be faster to use openat() and relative names */\n    sdlen = strlcpy(pathbuf, dir, sizeof(pathbuf));\n    if (sdlen + 1 >= sizeof(pathbuf)) {\n\terrno = ENAMETOOLONG;\n\tsudo_fatal(\"%s/\", dir);\n    }\n    pathbuf[sdlen++] = '/';\n    pathbuf[sdlen] = '\\0';\n\n    /* Store potential session dirs for sorting. */\n    while ((dp = readdir(d)) != NULL) {\n\t/* Skip \".\" and \"..\" */\n\tif (dp->d_name[0] == '.' && (dp->d_name[1] == '\\0' ||\n\t    (dp->d_name[1] == '.' && dp->d_name[2] == '\\0')))\n\t    continue;\n#ifdef HAVE_STRUCT_DIRENT_D_TYPE\n\tif (checked_type) {\n\t    if (dp->d_type != DT_DIR) {\n\t\t/* Not all file systems support d_type. */\n\t\tif (dp->d_type != DT_UNKNOWN)\n\t\t    continue;\n\t\tchecked_type = false;\n\t    }\n\t}\n#endif\n\n\t/* Add name to session list. */\n\tif (sessions_len + 1 > sessions_size) {\n\t    if (sessions_size == 0)\n\t\tsessions_size = 36 * 36 / 2;\n\t    sessions = reallocarray(sessions, sessions_size, 2 * sizeof(char *));\n\t    if (sessions == NULL)\n\t\tsudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\t    sessions_size *= 2;\n\t}\n\tif ((sessions[sessions_len] = strdup(dp->d_name)) == NULL)\n\t    sudo_fatalx(U_(\"%s: %s\"), __func__, U_(\"unable to allocate memory\"));\n\tsessions_len++;\n    }\n    closedir(d);\n\n    /* Sort and list the sessions. */\n    if (sessions != NULL) {\n\tqsort(sessions, sessions_len, sizeof(char *), session_compare);\n\tfor (i = 0; i < sessions_len; i++) {\n\t    len = snprintf(&pathbuf[sdlen], sizeof(pathbuf) - sdlen,\n\t\t\"%s/log\", sessions[i]);\n\t    if (len < 0 || (size_t)len >= sizeof(pathbuf) - sdlen) {\n\t\terrno = ENAMETOOLONG;\n\t\tsudo_fatal(\"%s/%s/log\", dir, sessions[i]);\n\t    }\n\t    free(sessions[i]);\n\n\t    /* Check for dir with a log file. */\n\t    if (lstat(pathbuf, &sb) == 0 && S_ISREG(sb.st_mode)) {\n\t\tpathbuf[sdlen + len - 4] = '\\0';\n\t\tlist_session(&lbuf, pathbuf, re, user, tty);\n\t    } else {\n\t\t/* Strip off \"/log\" and recurse if a non-log dir. */\n\t\tpathbuf[sdlen + len - 4] = '\\0';\n\t\tif (checked_type ||\n\t\t    (lstat(pathbuf, &sb) == 0 && S_ISDIR(sb.st_mode)))\n\t\t    find_sessions(pathbuf, re, user, tty);\n\t    }\n\t}\n\tfree(sessions);\n    }\n    sudo_lbuf_destroy(&lbuf);\n\n    debug_return_int(0);\n}\n\n/* XXX - always returns 0, calls sudo_fatal() on failure */\nstatic int\nlist_sessions(int argc, char **argv, const char *pattern, const char *user,\n    const char *tty)\n{\n    regex_t rebuf, *re = NULL;\n    const char *errstr;\n    debug_decl(list_sessions, SUDO_DEBUG_UTIL);\n\n    /* Parse search expression if present */\n    parse_expr(&search_expr, argv, false);\n\n    /* optional regex */\n    if (pattern) {\n\tre = &rebuf;\n\tif (!sudo_regex_compile(re, pattern, &errstr)) {\n\t    sudo_fatalx(U_(\"invalid regular expression \\\"%s\\\": %s\"),\n\t\tpattern, U_(errstr));\n\t}\n    }\n\n    debug_return_int(find_sessions(session_dir, re, user, tty));\n}\n\n/*\n * Check keyboard for ' ', '<', '>', return\n * pause, slow, fast, next\n */\nstatic void\nread_keyboard(int fd, int what, void *v)\n{\n    struct replay_closure *closure = v;\n    static bool paused = false;\n    struct timespec ts;\n    ssize_t nread;\n    char ch;\n    debug_decl(read_keyboard, SUDO_DEBUG_UTIL);\n\n    nread = read(fd, &ch, 1);\n    switch (nread) {\n    case -1:\n\tif (errno != EINTR && errno != EAGAIN)\n\t    sudo_fatal(U_(\"unable to read %s\"), \"stdin\");\n\tbreak;\n    case 0:\n\t/* Ignore EOF. */\n\tbreak;\n    default:\n\tif (paused) {\n\t    /* Any key will unpause, run the delay callback directly. */\n\t    paused = false;\n\t    delay_cb(-1, SUDO_EV_TIMEOUT, closure);\n\t    debug_return;\n\t}\n\tswitch (ch) {\n\tcase ' ':\n\t    paused = true;\n\t    /* Disable the delay event until we unpause. */\n\t    sudo_ev_del(closure->evbase, closure->delay_ev);\n\t    break;\n\tcase '<':\n\t    speed_factor /= 2;\n\t    if (sudo_ev_pending(closure->delay_ev, SUDO_EV_TIMEOUT, &ts)) {\n\t\t/* Double remaining timeout. */\n\t\tts.tv_sec *= 2;\n\t\tts.tv_nsec *= 2;\n\t\tif (ts.tv_nsec >= 1000000000) {\n\t\t    ts.tv_sec++;\n\t\t    ts.tv_nsec -= 1000000000;\n\t\t}\n\t\tif (sudo_ev_add(NULL, closure->delay_ev, &ts, false) == -1) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"failed to double remaining delay timeout\");\n\t\t}\n            }\n\t    break;\n\tcase '>':\n\t    speed_factor *= 2;\n\t    if (sudo_ev_pending(closure->delay_ev, SUDO_EV_TIMEOUT, &ts)) {\n\t\t/* Halve remaining timeout. */\n\t\tif (ts.tv_sec & 1)\n\t\t    ts.tv_nsec += 500000000;\n\t\tts.tv_sec /= 2;\n\t\tts.tv_nsec /= 2;\n\t\tif (sudo_ev_add(NULL, closure->delay_ev, &ts, false) == -1) {\n\t\t    sudo_debug_printf(SUDO_DEBUG_ERROR|SUDO_DEBUG_LINENO,\n\t\t\t\"failed to halve remaining delay timeout\");\n\t\t}\n            }\n\t    break;\n\tcase '\\r':\n\tcase '\\n':\n\t    /* Cancel existing delay, run callback directly. */\n\t    sudo_ev_del(closure->evbase, closure->delay_ev);\n\t    delay_cb(-1, SUDO_EV_TIMEOUT, closure);\n\t    break;\n\tdefault:\n\t    /* Unknown key, nothing to do. */\n\t    break;\n\t}\n\tbreak;\n    }\n    debug_return;\n}\n\nstatic void\nprint_usage(FILE *fp)\n{\n    fprintf(fp, _(\"usage: %s [-hnRS] [-d dir] [-m num] [-s num] ID\\n\"),\n\tgetprogname());\n    fprintf(fp, _(\"usage: %s [-h] [-d dir] -l [search expression]\\n\"),\n\tgetprogname());\n}\n\nstatic void\nusage(void)\n{\n    print_usage(stderr);\n    exit(EXIT_FAILURE);\n}\n\nstatic void\nhelp(void)\n{\n    (void) printf(_(\"%s - replay sudo session logs\\n\\n\"), getprogname());\n    print_usage(stdout);\n    (void) puts(_(\"\\nOptions:\\n\"\n\t\"  -d, --directory=dir    specify directory for session logs\\n\"\n\t\"  -f, --filter=filter    specify which I/O type(s) to display\\n\"\n\t\"  -h, --help             display help message and exit\\n\"\n\t\"  -l, --list             list available session IDs, with optional expression\\n\"\n\t\"  -m, --max-wait=num     max number of seconds to wait between events\\n\"\n\t\"  -n, --non-interactive  no prompts, session is sent to the standard output\\n\"\n\t\"  -R, --no-resize        do not attempt to re-size the terminal\\n\"\n\t\"  -S, --suspend-wait     wait while the command was suspended\\n\"\n\t\"  -s, --speed=num        speed up or slow down output\\n\"\n\t\"  -V, --version          display version information and exit\"));\n    exit(EXIT_SUCCESS);\n}\n\n/*\n * Cleanup hook for sudo_fatal()/sudo_fatalx()\n  */\nstatic void\nsudoreplay_cleanup(void)\n{\n    restore_terminal_size();\n    sudo_term_restore(ttyfd, false);\n}\n"], "filenames": ["docs/sudoers.man.in", "docs/sudoers.mdoc.in", "docs/sudoreplay.man.in", "docs/sudoreplay.mdoc.in", "include/sudo_lbuf.h", "lib/eventlog/eventlog.c", "lib/iolog/iolog_json.c", "lib/util/lbuf.c", "lib/util/util.exp.in", "plugins/sudoers/sudoreplay.c"], "buggy_code_start_loc": [5879, 5505, 172, 164, 38, 4, 554, 97, 102, 64], "buggy_code_end_loc": [6208, 5805, 172, 164, 49, 315, 593, 97, 102, 1537], "fixing_code_start_loc": [5880, 5506, 173, 165, 39, 4, 553, 98, 103, 65], "fixing_code_end_loc": [6233, 5827, 182, 175, 57, 226, 553, 204, 104, 1644], "type": "CWE-116", "message": "Sudo before 1.9.13 does not escape control characters in sudoreplay output.", "other": {"cve": {"id": "CVE-2023-28487", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-16T01:15:47.067", "lastModified": "2023-04-20T09:15:10.490", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Sudo before 1.9.13 does not escape control characters in sudoreplay output."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-116"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:sudo_project:sudo:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.9.13", "matchCriteriaId": "5E60309C-D7D6-4036-94D8-2A947AFCC1F9"}]}]}], "references": [{"url": "https://github.com/sudo-project/sudo/commit/334daf92b31b79ce68ed75e2ee14fca265f029ca", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://github.com/sudo-project/sudo/releases/tag/SUDO_1_9_13", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://security.netapp.com/advisory/ntap-20230420-0002/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/sudo-project/sudo/commit/334daf92b31b79ce68ed75e2ee14fca265f029ca"}}