{"buggy_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\ndeclare(strict_types=1);\n\nnamespace Pimcore\\Model\\Notification\\Service;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Notification;\nuse Pimcore\\Model\\Notification\\Listing;\nuse Pimcore\\Model\\User;\n\nclass NotificationService\n{\n    /** @var UserService */\n    private $userService;\n\n    /**\n     * NotificationService constructor.\n     *\n     * @param UserService $userService\n     */\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $fromUser\n     * @param string $title\n     * @param string $message\n     * @param ElementInterface|null $element\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function sendToUser(\n        int $userId,\n        int $fromUser,\n        string $title,\n        string $message,\n        ?ElementInterface $element = null\n    ) {\n        $this->beginTransaction();\n\n        $sender = User::getById($fromUser);\n        $recipient = User::getById($userId);\n\n        if (!$recipient instanceof User) {\n            throw new \\UnexpectedValueException(sprintf('No user found with the ID %d', $userId));\n        }\n\n        $notification = new Notification();\n        $notification->setRecipient($recipient);\n        $notification->setSender($sender);\n        $notification->setTitle($title);\n        $notification->setMessage($message);\n        $notification->setLinkedElement($element);\n        $notification->save();\n\n        $this->commit();\n    }\n\n    /**\n     * @param int $groupId\n     * @param int $fromUser\n     * @param string $title\n     * @param string $message\n     * @param ElementInterface|null $element\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function sendToGroup(\n        int $groupId,\n        int $fromUser,\n        string $title,\n        string $message,\n        ?ElementInterface $element = null\n    ) {\n        $group = User\\Role::getById($groupId);\n\n        if (!$group instanceof User\\Role) {\n            throw new \\UnexpectedValueException(sprintf('No group found with the ID %d', $groupId));\n        }\n\n        $filter = [\n            'id != ?' => $fromUser,\n            'active = ?' => 1,\n            'roles LIKE ?' => '%' . $groupId . '%'\n        ];\n\n        $condition = implode(' AND ', array_keys($filter));\n        $conditionVariables = array_values($filter);\n\n        $listing = new User\\Listing();\n        $listing->setCondition($condition, $conditionVariables);\n        $listing->setOrderKey('name');\n        $listing->setOrder('ASC');\n        $listing->load();\n\n        $users = $listing->getUsers() ?? [];\n        $users = $this->userService->filterUsersWithPermission($users);\n\n        foreach ($users as $user) {\n            $this->sendToUser($user->getId(), $fromUser, $title, $message, $element);\n        }\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return Notification\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function find(int $id): Notification\n    {\n        $notification = Notification::getById($id);\n\n        if (!$notification instanceof Notification) {\n            throw new \\UnexpectedValueException(\"Notification with the ID {$id} doesn't exists\");\n        }\n\n        return $notification;\n    }\n\n    /**\n     * @param int $id\n     * @param int|null $recipientId\n     *\n     * @return Notification\n     */\n    public function findAndMarkAsRead(int $id, ?int $recipientId = null): Notification\n    {\n        $this->beginTransaction();\n        $notification = $this->find($id);\n\n        if ($recipientId && $recipientId == $notification->getRecipient()->getId()) {\n            $notification->setRead(true);\n            $notification->save();\n            $this->commit();\n        }\n\n        return $notification;\n    }\n\n    /**\n     * @param array $filter\n     * @param array $options\n     *\n     * @return array\n     */\n    public function findAll(array $filter = [], array $options = []): array\n    {\n        $listing = new Listing();\n\n        if (!empty($filter)) {\n            $condition = implode(' AND ', array_keys($filter));\n            $conditionVariables = array_values($filter);\n            $listing->setCondition($condition, $conditionVariables);\n        }\n\n        $listing->setOrderKey('creationDate');\n        $listing->setOrder('DESC');\n        $offset = (int) $options['offset'] ?? 0;\n        $limit = (int) $options['limit'] ?? 0;\n\n        $this->beginTransaction();\n\n        $result = [\n            'total' => $listing->count(),\n            'data' => $listing->getItems($offset, $limit)\n        ];\n\n        $this->commit();\n\n        return $result;\n    }\n\n    /**\n     * @param int $user\n     * @param int $interval\n     *\n     * @return array\n     */\n    public function findLastUnread(int $user, int $interval): array\n    {\n        $listing = new Listing();\n        $listing->setCondition(\n            'recipient = ? AND `read` = 0 AND creationDate >= ?',\n            [\n                $user,\n                date('Y-m-d H:i:s', time() - $interval)\n            ]\n        );\n        $listing->setOrderKey('creationDate');\n        $listing->setOrder('DESC');\n        $listing->setLimit(1);\n\n        $this->beginTransaction();\n\n        $result = [\n            'total' => $listing->count(),\n            'data' => $listing->getData()\n        ];\n\n        $this->commit();\n\n        return $result;\n    }\n\n    /**\n     * @param Notification $notification\n     *\n     * @return array\n     */\n    public function format(Notification $notification): array\n    {\n        $data = [\n            'id' => $notification->getId(),\n            'type' => $notification->getType(),\n            'title' => $notification->getTitle(),\n            'message' => $notification->getMessage(),\n            'sender' => '',\n            'read' => (int) $notification->isRead(),\n            'date' => $notification->getCreationDate(),\n            'linkedElementType' => $notification->getLinkedElementType(),\n            'linkedElementId' => null,\n        ];\n\n        if ($notification->getLinkedElement()) {\n            $data['linkedElementId'] = $notification->getLinkedElement()->getId();\n        }\n\n        $sender = $notification->getSender();\n\n        if ($sender instanceof User\\AbstractUser) {\n            $from = trim(sprintf('%s %s', $sender->getFirstname(), $sender->getLastname()));\n\n            if (strlen($from) === 0) {\n                $from = $sender->getName();\n            }\n\n            $data['sender'] = $from;\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param int $user\n     *\n     * @return int\n     */\n    public function countAllUnread(int $user): int\n    {\n        $listing = new Listing();\n        $listing->setCondition('recipient = ? AND `read` = 0', [$user]);\n\n        return $listing->count();\n    }\n\n    /**\n     * @param int $id\n     * @param int|null $recipientId\n     */\n    public function delete(int $id, ?int $recipientId = null): void\n    {\n        $this->beginTransaction();\n\n        $notification = $this->find($id);\n\n        if ($recipientId && $recipientId == $notification->getRecipient()->getId()) {\n            $notification->delete();\n        }\n\n        $this->commit();\n    }\n\n    /**\n     * @param int $user\n     */\n    public function deleteAll(int $user): void\n    {\n        $listing = new Listing();\n        $listing->setCondition('recipient = ?', [$user]);\n\n        $this->beginTransaction();\n\n        foreach ($listing->getData() as $notification) {\n            $notification->delete();\n        }\n\n        $this->commit();\n    }\n\n    private function beginTransaction(): void\n    {\n        \\Pimcore\\Db::getConnection()->beginTransaction();\n    }\n\n    private function commit(): void\n    {\n        \\Pimcore\\Db::getConnection()->commit();\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\ndeclare(strict_types=1);\n\nnamespace Pimcore\\Model\\Notification\\Service;\n\nuse Pimcore\\Model\\Element\\ElementInterface;\nuse Pimcore\\Model\\Notification;\nuse Pimcore\\Model\\Notification\\Listing;\nuse Pimcore\\Model\\User;\nuse Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException;\n\nclass NotificationService\n{\n    /** @var UserService */\n    private $userService;\n\n    /**\n     * NotificationService constructor.\n     *\n     * @param UserService $userService\n     */\n    public function __construct(UserService $userService)\n    {\n        $this->userService = $userService;\n    }\n\n    /**\n     * @param int $userId\n     * @param int $fromUser\n     * @param string $title\n     * @param string $message\n     * @param ElementInterface|null $element\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function sendToUser(\n        int $userId,\n        int $fromUser,\n        string $title,\n        string $message,\n        ?ElementInterface $element = null\n    ) {\n        $this->beginTransaction();\n\n        $sender = User::getById($fromUser);\n        $recipient = User::getById($userId);\n\n        if (!$recipient instanceof User) {\n            throw new \\UnexpectedValueException(sprintf('No user found with the ID %d', $userId));\n        }\n\n        $notification = new Notification();\n        $notification->setRecipient($recipient);\n        $notification->setSender($sender);\n        $notification->setTitle($title);\n        $notification->setMessage($message);\n        $notification->setLinkedElement($element);\n        $notification->save();\n\n        $this->commit();\n    }\n\n    /**\n     * @param int $groupId\n     * @param int $fromUser\n     * @param string $title\n     * @param string $message\n     * @param ElementInterface|null $element\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function sendToGroup(\n        int $groupId,\n        int $fromUser,\n        string $title,\n        string $message,\n        ?ElementInterface $element = null\n    ) {\n        $group = User\\Role::getById($groupId);\n\n        if (!$group instanceof User\\Role) {\n            throw new \\UnexpectedValueException(sprintf('No group found with the ID %d', $groupId));\n        }\n\n        $filter = [\n            'id != ?' => $fromUser,\n            'active = ?' => 1,\n            'roles LIKE ?' => '%' . $groupId . '%'\n        ];\n\n        $condition = implode(' AND ', array_keys($filter));\n        $conditionVariables = array_values($filter);\n\n        $listing = new User\\Listing();\n        $listing->setCondition($condition, $conditionVariables);\n        $listing->setOrderKey('name');\n        $listing->setOrder('ASC');\n        $listing->load();\n\n        $users = $listing->getUsers() ?? [];\n        $users = $this->userService->filterUsersWithPermission($users);\n\n        foreach ($users as $user) {\n            $this->sendToUser($user->getId(), $fromUser, $title, $message, $element);\n        }\n    }\n\n    /**\n     * @param int $id\n     *\n     * @return Notification\n     *\n     * @throws \\UnexpectedValueException\n     */\n    public function find(int $id): Notification\n    {\n        $notification = Notification::getById($id);\n\n        if (!$notification instanceof Notification) {\n            throw new \\UnexpectedValueException(\"Notification with the ID {$id} doesn't exists\");\n        }\n\n        return $notification;\n    }\n\n    /**\n     * @param int $id\n     * @param int|null $recipientId\n     *\n     * @return Notification\n     */\n    public function findAndMarkAsRead(int $id, ?int $recipientId = null): Notification\n    {\n        $this->beginTransaction();\n        $notification = $this->find($id);\n\n        if($notification->getRecipient()->getId() != $recipientId) {\n            throw new AccessDeniedHttpException();\n        }\n\n        if ($recipientId && $recipientId == $notification->getRecipient()->getId()) {\n            $notification->setRead(true);\n            $notification->save();\n            $this->commit();\n        }\n\n        return $notification;\n    }\n\n    /**\n     * @param array $filter\n     * @param array $options\n     *\n     * @return array\n     */\n    public function findAll(array $filter = [], array $options = []): array\n    {\n        $listing = new Listing();\n\n        if (!empty($filter)) {\n            $condition = implode(' AND ', array_keys($filter));\n            $conditionVariables = array_values($filter);\n            $listing->setCondition($condition, $conditionVariables);\n        }\n\n        $listing->setOrderKey('creationDate');\n        $listing->setOrder('DESC');\n        $offset = (int) $options['offset'] ?? 0;\n        $limit = (int) $options['limit'] ?? 0;\n\n        $this->beginTransaction();\n\n        $result = [\n            'total' => $listing->count(),\n            'data' => $listing->getItems($offset, $limit)\n        ];\n\n        $this->commit();\n\n        return $result;\n    }\n\n    /**\n     * @param int $user\n     * @param int $interval\n     *\n     * @return array\n     */\n    public function findLastUnread(int $user, int $interval): array\n    {\n        $listing = new Listing();\n        $listing->setCondition(\n            'recipient = ? AND `read` = 0 AND creationDate >= ?',\n            [\n                $user,\n                date('Y-m-d H:i:s', time() - $interval)\n            ]\n        );\n        $listing->setOrderKey('creationDate');\n        $listing->setOrder('DESC');\n        $listing->setLimit(1);\n\n        $this->beginTransaction();\n\n        $result = [\n            'total' => $listing->count(),\n            'data' => $listing->getData()\n        ];\n\n        $this->commit();\n\n        return $result;\n    }\n\n    /**\n     * @param Notification $notification\n     *\n     * @return array\n     */\n    public function format(Notification $notification): array\n    {\n        $data = [\n            'id' => $notification->getId(),\n            'type' => $notification->getType(),\n            'title' => $notification->getTitle(),\n            'message' => $notification->getMessage(),\n            'sender' => '',\n            'read' => (int) $notification->isRead(),\n            'date' => $notification->getCreationDate(),\n            'linkedElementType' => $notification->getLinkedElementType(),\n            'linkedElementId' => null,\n        ];\n\n        if ($notification->getLinkedElement()) {\n            $data['linkedElementId'] = $notification->getLinkedElement()->getId();\n        }\n\n        $sender = $notification->getSender();\n\n        if ($sender instanceof User\\AbstractUser) {\n            $from = trim(sprintf('%s %s', $sender->getFirstname(), $sender->getLastname()));\n\n            if (strlen($from) === 0) {\n                $from = $sender->getName();\n            }\n\n            $data['sender'] = $from;\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param int $user\n     *\n     * @return int\n     */\n    public function countAllUnread(int $user): int\n    {\n        $listing = new Listing();\n        $listing->setCondition('recipient = ? AND `read` = 0', [$user]);\n\n        return $listing->count();\n    }\n\n    /**\n     * @param int $id\n     * @param int|null $recipientId\n     */\n    public function delete(int $id, ?int $recipientId = null): void\n    {\n        $this->beginTransaction();\n\n        $notification = $this->find($id);\n\n        if ($recipientId && $recipientId == $notification->getRecipient()->getId()) {\n            $notification->delete();\n        }\n\n        $this->commit();\n    }\n\n    /**\n     * @param int $user\n     */\n    public function deleteAll(int $user): void\n    {\n        $listing = new Listing();\n        $listing->setCondition('recipient = ?', [$user]);\n\n        $this->beginTransaction();\n\n        foreach ($listing->getData() as $notification) {\n            $notification->delete();\n        }\n\n        $this->commit();\n    }\n\n    private function beginTransaction(): void\n    {\n        \\Pimcore\\Db::getConnection()->beginTransaction();\n    }\n\n    private function commit(): void\n    {\n        \\Pimcore\\Db::getConnection()->commit();\n    }\n}\n"], "filenames": ["models/Notification/Service/NotificationService.php"], "buggy_code_start_loc": [22], "buggy_code_end_loc": [147], "fixing_code_start_loc": [23], "fixing_code_end_loc": [153], "type": "CWE-838", "message": "Pimcore before 6.2.2 lacks an Access Denied outcome for a certain scenario of an incorrect recipient ID of a notification.", "other": {"cve": {"id": "CVE-2019-18981", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-15T05:15:12.813", "lastModified": "2019-11-21T18:48:18.097", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Pimcore before 6.2.2 lacks an Access Denied outcome for a certain scenario of an incorrect recipient ID of a notification."}, {"lang": "es", "value": "Pimcore versiones anteriores a la versi\u00f3n 6.2.2, carece de un resultado de Acceso Denegado para un determinado escenario de un ID de destinatario incorrecto de una notificaci\u00f3n."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-838"}, {"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.2.2", "matchCriteriaId": "FC1E711F-EA7D-4A6E-B1CF-43EE13E12654"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/0a5d80b2593b2ebe35d19756b730ba33aa049106", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/compare/v6.2.1...v6.2.2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/0a5d80b2593b2ebe35d19756b730ba33aa049106"}}