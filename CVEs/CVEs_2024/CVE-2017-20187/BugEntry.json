{"buggy_code": ["<?php\n\n/**\n * This file is part of the floriangaerber/magnesium package.\n *\n * @copyright 2017 Florian G\u00e4rber\n * @license MIT\n * @license See \"LICENSE\" for details\n */\n\nnamespace Magnesium\\Message;\n\nuse Mailgun\\Mailgun;\n\n/**\n * Base class for all message types.\n */\nclass Base\n{\n    /**\n     * Mailgun API client.\n     *\n     * @property \\Mailgun\\Mailgun $mailgunClient\n     */\n    protected $mailgunClient;\n\n    /**\n     * Mailgun domain.\n     *\n     * @property string $domain\n     */\n    protected $domain;\n\n    /**\n     * From-address and optional name.\n     *\n     * @property array $from\n     */\n    protected $from = [];\n\n    /**\n     * Reply-To-address and optional name.\n     *\n     * @property array $replyTo\n     */\n    protected $replyTo = [];\n\n    /**\n     * Subject.\n     *\n     * @property string $subject\n     */\n    protected $subject = '';\n\n    /**\n     * HTML message body.\n     *\n     * @property string $htmlBody\n     */\n    protected $htmlBody;\n\n    /**\n     * Text message body.\n     *\n     * @property string $textBody\n     */\n    protected $textBody;\n\n    /**\n     * Whether to use testmode.\n     *\n     * @property bool $isTestmode\n     */\n    protected $isTestmode = false;\n\n    /**\n     * Whether TLS is required.\n     *\n     * @property bool $requireTls\n     */\n    protected $requireTls = true;\n\n    /**\n     * Is verification skipped.\n     *\n     * @property bool $skipVerification\n     */\n    protected $skipVerification = false;\n\n    /**\n     * Set delivery time.\n     *\n     * @property\n     */\n    protected $deliveryTime;\n\n    /**\n     * Set tags.\n     *\n     * @property\n     */\n    protected $tags;\n\n    /**\n     * Set custom headers.\n     *\n     * @property array $customHeaders\n     */\n    protected $customHeaders = [];\n\n    /**\n     * Instantiate message with your API-key and domain.\n     *\n     * @param string $key    Your Mailgun API-key\n     * @param string $domain Your Mailgun domain\n     */\n    public function __construct(string $key, string $domain)\n    {\n        $this->setDomain($domain);\n        $this->mailgunClient = new Mailgun($key);\n    }\n\n    /**\n     * Sets the domain to send from.\n     *\n     * @param string $domain\n     *\n     * @return Base\n     */\n    public function setDomain(string $domain)\n    {\n        $this->domain = $domain;\n\n        return $this;\n    }\n\n    /**\n     * Gets the mailgun domain.\n     *\n     * @return string\n     */\n    public function getDomain()\n    {\n        return $this->domain;\n    }\n\n    /**\n     * Sets the \"From\" address.\n     *\n     * @param string $email Displayed sender address\n     * @param string $name  Optional display name\n     *\n     * @return Base\n     */\n    public function setFrom(string $email, string $name = null)\n    {\n        $this->from = [\n            'email' => $email,\n            'name' => $name,\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Gets the \"From\" data.\n     *\n     * @return array\n     */\n    public function getFrom()\n    {\n        return [\n            'email' => $this->getFromEmail(),\n            'name' => $this->getFromName(),\n        ];\n    }\n\n    /**\n     * Get the sender email address.\n     *\n     * Defaults to postmaster@<MailgunDomain>\n     *\n     * @return string\n     */\n    public function getFromEmail()\n    {\n        return isset($this->from['email'])\n        ? $this->from['email']\n        : 'postmaster@'.$this->domain;\n    }\n\n    /**\n     * Get the sender display name.\n     *\n     * @return string\n     */\n    public function getFromName()\n    {\n        return isset($this->from['name'])\n        ? $this->from['name']\n        : null;\n    }\n\n    /**\n     * Gets the formatted email string.\n     *\n     * @return string\n     */\n    public function getFromString()\n    {\n        return $this->formatEmailString($this->getFromEmail(), $this->getFromName());\n    }\n\n    /**\n     * Formats email and name into email string for To/From/Reply-To fields.\n     *\n     * The address can be either of:\n     * - \"Sender <sender@example.com>\"\n     * - \"sender@example.com\"\n     * Depending on whether a name was set.\n     *\n     * @param string $email\n     * @param string $name  (Optional)\n     *\n     * @return string\n     */\n    protected function formatEmailString(string $email, string $name = null)\n    {\n        return $name\n        ? sprintf('%s <%s>', $name, $email)\n        : $email;\n    }\n\n    /**\n     * Sets the \"Reply-To\" address.\n     *\n     * @param string $email\n     * @param string $name  Optional name to be used\n     *\n     * @return Base\n     */\n    public function setReplyTo(string $email, string $name = null)\n    {\n        $this->replyTo = [\n            'email' => $email,\n            'name' => $name,\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Gets the \"Reply-To\" data.\n     *\n     * @return array\n     */\n    public function getReplyTo()\n    {\n        return [\n            'email' => $this->getReplyToEmail(),\n            'name' => $this->getReplyToName(),\n        ];\n    }\n\n    /**\n     * Get the \"Reply-To\" email address.\n     *\n     * @return string\n     */\n    public function getReplyToEmail()\n    {\n        return isset($this->replyTo['email'])\n        ? $this->replyTo['email']\n        : null;\n    }\n\n    /**\n     * Get the \"Reply-To\" display name.\n     *\n     * @return string\n     */\n    public function getReplyToName()\n    {\n        return isset($this->replyTo['name'])\n        ? $this->replyTo['name']\n        : null;\n    }\n\n    /**\n     * Gets the formatted \"Reply-To\" string.\n     *\n     * @return string\n     */\n    public function getReplyToString()\n    {\n        return $this->getReplyToEmail()\n        ? $this->formatEmailString($this->getReplyToEmail(), $this->getReplyToName())\n        : null;\n    }\n\n    /**\n     * Sets the subject.\n     *\n     * @param string $subject\n     *\n     * @return Base\n     */\n    public function setSubject(string $subject)\n    {\n        $this->subject = $subject;\n\n        return $this;\n    }\n\n    /**\n     * Gets the subject.\n     *\n     * @return string\n     */\n    public function getSubject()\n    {\n        return $this->subject;\n    }\n\n    /**\n     * Sets the HTML-body.\n     *\n     * @param string $html\n     *\n     * @return Base\n     */\n    public function setHtml(string $html)\n    {\n        $this->htmlBody = $html;\n\n        return $this;\n    }\n\n    /**\n     * Gets the HTML-body.\n     *\n     * @return string\n     */\n    public function getHtml()\n    {\n        return $this->htmlBody ?: null;\n    }\n\n    /**\n     * Sets the text-body.\n     *\n     * @param string $txt\n     *\n     * @return Base\n     */\n    public function setText(string $txt)\n    {\n        $this->textBody = $txt;\n\n        return $this;\n    }\n\n    /**\n     * Gets the text-body.\n     *\n     * @return string\n     */\n    public function getText()\n    {\n        return $this->textBody ?: null;\n    }\n\n    /**\n     * Set Mailgun Testmode.\n     *\n     * Mailgun will accept, but not send messages sent in testmode.\n     *\n     * @param bool $bool\n     *\n     * @return Base\n     */\n    public function setTestmode(bool $bool)\n    {\n        $this->isTestmode = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Shows whether or not testmode is enabled.\n     *\n     * @return bool\n     */\n    public function isTestmode()\n    {\n        return $this->isTestmode;\n    }\n\n    /**\n     * Whether to require TLS or not.\n     *\n     * @param bool $bool\n     *\n     * @return Base\n     */\n    public function setRequireTls(bool $bool)\n    {\n        $this->requireTls = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Whether TLS is currently required or not.\n     *\n     * @return bool\n     */\n    public function isRequiringTls()\n    {\n        return $this->requireTls;\n    }\n\n    /**\n     * Whether to skip verification or not.\n     *\n     * @param bool $bool\n     *\n     * @return Bulk\n     */\n    public function setSkipVerification(bool $bool)\n    {\n        $this->skipVerification = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Whether skipping verification or not.\n     *\n     * @return bool\n     */\n    public function isSkippingVerification()\n    {\n        return $this->skipVerification;\n    }\n\n    /**\n     * Delivery timestamp. Must be parseable by \\DateTime.\n     *\n     * @param $timestamp\n     *\n     * @return Base\n     */\n    public function setDeliveryTime($timestamp = null)\n    {\n        $this->deliveryTime = $timestamp;\n\n        return $this;\n    }\n\n    /**\n     * Returns the delivery time as RFC2822.\n     *\n     * Magnesium parses the given timestamp into RFC2822 using \\DateTime\n     *\n     * @return string RFC2822-Timestamp\n     */\n    public function getDeliveryTime()\n    {\n        return $this->deliveryTime\n        ? (new \\DateTime($this->deliveryTime))->format(\\DateTime::RFC2822)\n        : null;\n    }\n\n    /**\n     * Array of tags that apply to this message.\n     *\n     * @param array $tags\n     *\n     * @return Base\n     */\n    public function setTags(array $tags = null)\n    {\n        $this->tags = $tags;\n\n        return $this;\n    }\n\n    /**\n     * Get the tags you set.\n     *\n     * @return array\n     */\n    public function getTags()\n    {\n        return $this->tags;\n    }\n\n    /**\n     * Add a custom header.\n     *\n     * @param string $name\n     * @param string $value\n     *\n     * @return Base\n     */\n    public function addCustomHeader(string $name, string $value)\n    {\n        $this->customHeaders[$name] = $value;\n\n        return $this;\n    }\n\n    /**\n     * Remove a custom header by name.\n     *\n     * @param string $name\n     *\n     * @return Base\n     */\n    public function removeCustomHeader(string $name)\n    {\n        unset($this->customHeaders[$name]);\n\n        return $this;\n    }\n\n    /**\n     * Remove all custom headers.\n     *\n     * @return Base\n     */\n    public function removeCustomHeaders()\n    {\n        $this->customHeaders = [];\n\n        return $this;\n    }\n\n    /**\n     * Get custom header by name.\n     *\n     * @param string $name\n     *\n     * @return string\n     */\n    public function getCustomHeader(string $name)\n    {\n        return isset($this->customHeaders[$name]) ? $this->customHeaders[$name] : null;\n    }\n\n    /**\n     * Get all custom headers.\n     *\n     * @return array\n     */\n    public function getCustomHeaders()\n    {\n        return $this->customHeaders;\n    }\n\n    /**\n     * Adds custom headers as h:$name to array.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addCustomHeadersToConfig(array $config)\n    {\n        foreach ($this->getCustomHeaders() as $key => $value) {\n            $config[\"h:$name\"] = $value;\n        }\n\n        return $config;\n    }\n\n    // TODO Custom Variables\n\n    /**\n     * Adds options o:... to array.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addOptionsToConfig(array $config)\n    {\n        $config['o:testmode'] = $this->isTestmode();\n        $config['o:require-tls'] = $this->isRequiringTls();\n        $config['o:skip-verification'] = $this->isSkippingVerification();\n        if ($this->getDeliveryTime()) {\n            $config['o:deliverytime'] = $this->getDeliveryTime();\n        }\n        // TODO Tracking options\n        if ($this->getTags()) {\n            $config['o:tag'] = $this->getTags();\n        }\n\n        return $config;\n    }\n\n    /**\n     * Adds From, Subject, ReplyTo to config.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addFSRtToConfig(array $config)\n    {\n        $config['subject'] = $this->getSubject();\n        $config['from'] = $this->getFromString();\n\n        if ($this->getReplyToString()) {\n            $config['h:Reply-To'] = $this->getReplyToString();\n        }\n\n        return $config;\n    }\n\n    /**\n     * Adds HTML and Text message bodies to config.\n     *\n     * Override set HTMl and Text through arguments.\n     *\n     * @param array  $config\n     * @param string $html   Custom HTML body\n     * @param string $text   Custom Text body\n     *\n     * @return array\n     */\n    protected function addMessageBodyToConfig(array $config, string $html = null, string $text = null)\n    {\n        $config['html'] = $html ?: $this->getHtml();\n        $config['text'] = $text ?: $this->getText();\n\n        return $config;\n    }\n\n    /**\n     * Sends the message via the mailgun client.\n     *\n     * @param array $config Mailgun send options\n     *\n     * @return array Mailgun Response\n     */\n    protected function sendMessage(array $config)\n    {\n        return $this->mailgunClient->sendMessage($this->getDomain(), $config);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * This file is part of the floriangaerber/magnesium package.\n *\n * @copyright 2017 Florian G\u00e4rber\n * @license MIT\n * @license See \"LICENSE\" for details\n */\n\nnamespace Magnesium\\Message;\n\nuse Mailgun\\Mailgun;\n\n/**\n * Base class for all message types.\n */\nclass Base\n{\n    /**\n     * Mailgun API client.\n     *\n     * @property \\Mailgun\\Mailgun $mailgunClient\n     */\n    protected $mailgunClient;\n\n    /**\n     * Mailgun domain.\n     *\n     * @property string $domain\n     */\n    protected $domain;\n\n    /**\n     * From-address and optional name.\n     *\n     * @property array $from\n     */\n    protected $from = [];\n\n    /**\n     * Reply-To-address and optional name.\n     *\n     * @property array $replyTo\n     */\n    protected $replyTo = [];\n\n    /**\n     * Subject.\n     *\n     * @property string $subject\n     */\n    protected $subject = '';\n\n    /**\n     * HTML message body.\n     *\n     * @property string $htmlBody\n     */\n    protected $htmlBody;\n\n    /**\n     * Text message body.\n     *\n     * @property string $textBody\n     */\n    protected $textBody;\n\n    /**\n     * Whether to use testmode.\n     *\n     * @property bool $isTestmode\n     */\n    protected $isTestmode = false;\n\n    /**\n     * Whether TLS is required.\n     *\n     * @property bool $requireTls\n     */\n    protected $requireTls = true;\n\n    /**\n     * Is verification skipped.\n     *\n     * @property bool $skipVerification\n     */\n    protected $skipVerification = false;\n\n    /**\n     * Set delivery time.\n     *\n     * @property\n     */\n    protected $deliveryTime;\n\n    /**\n     * Set tags.\n     *\n     * @property\n     */\n    protected $tags;\n\n    /**\n     * Set custom headers.\n     *\n     * @property array $customHeaders\n     */\n    protected $customHeaders = [];\n\n    /**\n     * Instantiate message with your API-key and domain.\n     *\n     * @param string $key    Your Mailgun API-key\n     * @param string $domain Your Mailgun domain\n     */\n    public function __construct(string $key, string $domain)\n    {\n        $this->setDomain($domain);\n        $this->mailgunClient = new Mailgun($key);\n    }\n\n    /**\n     * Sets the domain to send from.\n     *\n     * @param string $domain\n     *\n     * @return Base\n     */\n    public function setDomain(string $domain)\n    {\n        $this->domain = $domain;\n\n        return $this;\n    }\n\n    /**\n     * Gets the mailgun domain.\n     *\n     * @return string\n     */\n    public function getDomain()\n    {\n        return $this->domain;\n    }\n\n    /**\n     * Sets the \"From\" address.\n     *\n     * @param string $email Displayed sender address\n     * @param string $name  Optional display name\n     *\n     * @return Base\n     */\n    public function setFrom(string $email, string $name = null)\n    {\n        $this->from = [\n            'email' => $email,\n            'name' => $name,\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Gets the \"From\" data.\n     *\n     * @return array\n     */\n    public function getFrom()\n    {\n        return [\n            'email' => $this->getFromEmail(),\n            'name' => $this->getFromName(),\n        ];\n    }\n\n    /**\n     * Get the sender email address.\n     *\n     * Defaults to postmaster@<MailgunDomain>\n     *\n     * @return string\n     */\n    public function getFromEmail()\n    {\n        return isset($this->from['email'])\n        ? $this->from['email']\n        : 'postmaster@'.$this->domain;\n    }\n\n    /**\n     * Get the sender display name.\n     *\n     * @return string\n     */\n    public function getFromName()\n    {\n        return isset($this->from['name'])\n        ? $this->from['name']\n        : null;\n    }\n\n    /**\n     * Gets the formatted email string.\n     *\n     * @return string\n     */\n    public function getFromString()\n    {\n        return $this->formatEmailString($this->getFromEmail(), $this->getFromName());\n    }\n\n    /**\n     * Formats email and name into email string for To/From/Reply-To fields.\n     *\n     * The address can be either of:\n     * - \"Sender <sender@example.com>\"\n     * - \"sender@example.com\"\n     * Depending on whether a name was set.\n     *\n     * @param string $email\n     * @param string $name  (Optional)\n     *\n     * @return string\n     */\n    protected function formatEmailString(string $email, string $name = null)\n    {\n        return $name\n        ? sprintf(\n            '%s <%s>',\n            $this->removeToStringBreakingSymbols($name, false),\n            $this->removeToStringBreakingSymbols($email, true))\n        : $this->removeToStringBreakingSymbols($email, true);\n    }\n\n    /**\n     *\n     * Should a user have chosen a name like \"no1@example.com, Not Okay <no2@example.com>, Sherbert\",\n     * Mailgun would accept the following to: \"user@example.com, user2@example.com, no1@example.com, Not Okay <no2@example.com>, Sherbert <hello@example.com>\"\n     * and would send it accordingly, which is unwanted behavior.\n     * Removing only \",\" breaks the To-string, sending the message to\n     * \"user@example.com, user2@example.com, no1@example.com Not Okay <no2@example.com> Sherbert\" hello@example.com,\n     * revealing email addresses of other users.\n     * Removing only either of \"<,>\" or \"@,\" breaks the string the same way.\n     * Only removing \"<>@,\" from the string prevents breaking (as far as I know).\n     *\n     * Also use an input validation library like Respect/Validation or find\n     * another way to prevent emails and names from containing \"<>,\"!\n     *\n     * @param string $string\n     * @param bool   $isEmail\n     *\n     * @return string\n     */\n    protected function removeToStringBreakingSymbols(string $string, bool $isEmail)\n    {\n        return str_replace($isEmail ? ['>', '<', ','] : ['>', '<', ',', '@'], '', $string);\n    }\n\n    /**\n     * Sets the \"Reply-To\" address.\n     *\n     * @param string $email\n     * @param string $name  Optional name to be used\n     *\n     * @return Base\n     */\n    public function setReplyTo(string $email, string $name = null)\n    {\n        $this->replyTo = [\n            'email' => $email,\n            'name' => $name,\n        ];\n\n        return $this;\n    }\n\n    /**\n     * Gets the \"Reply-To\" data.\n     *\n     * @return array\n     */\n    public function getReplyTo()\n    {\n        return [\n            'email' => $this->getReplyToEmail(),\n            'name' => $this->getReplyToName(),\n        ];\n    }\n\n    /**\n     * Get the \"Reply-To\" email address.\n     *\n     * @return string\n     */\n    public function getReplyToEmail()\n    {\n        return isset($this->replyTo['email'])\n        ? $this->replyTo['email']\n        : null;\n    }\n\n    /**\n     * Get the \"Reply-To\" display name.\n     *\n     * @return string\n     */\n    public function getReplyToName()\n    {\n        return isset($this->replyTo['name'])\n        ? $this->replyTo['name']\n        : null;\n    }\n\n    /**\n     * Gets the formatted \"Reply-To\" string.\n     *\n     * @return string\n     */\n    public function getReplyToString()\n    {\n        return $this->getReplyToEmail()\n        ? $this->formatEmailString($this->getReplyToEmail(), $this->getReplyToName())\n        : null;\n    }\n\n    /**\n     * Sets the subject.\n     *\n     * @param string $subject\n     *\n     * @return Base\n     */\n    public function setSubject(string $subject)\n    {\n        $this->subject = $subject;\n\n        return $this;\n    }\n\n    /**\n     * Gets the subject.\n     *\n     * @return string\n     */\n    public function getSubject()\n    {\n        return $this->subject;\n    }\n\n    /**\n     * Sets the HTML-body.\n     *\n     * @param string $html\n     *\n     * @return Base\n     */\n    public function setHtml(string $html)\n    {\n        $this->htmlBody = $html;\n\n        return $this;\n    }\n\n    /**\n     * Gets the HTML-body.\n     *\n     * @return string\n     */\n    public function getHtml()\n    {\n        return $this->htmlBody ?: null;\n    }\n\n    /**\n     * Sets the text-body.\n     *\n     * @param string $txt\n     *\n     * @return Base\n     */\n    public function setText(string $txt)\n    {\n        $this->textBody = $txt;\n\n        return $this;\n    }\n\n    /**\n     * Gets the text-body.\n     *\n     * @return string\n     */\n    public function getText()\n    {\n        return $this->textBody ?: null;\n    }\n\n    /**\n     * Set Mailgun Testmode.\n     *\n     * Mailgun will accept, but not send messages sent in testmode.\n     *\n     * @param bool $bool\n     *\n     * @return Base\n     */\n    public function setTestmode(bool $bool)\n    {\n        $this->isTestmode = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Shows whether or not testmode is enabled.\n     *\n     * @return bool\n     */\n    public function isTestmode()\n    {\n        return $this->isTestmode;\n    }\n\n    /**\n     * Whether to require TLS or not.\n     *\n     * @param bool $bool\n     *\n     * @return Base\n     */\n    public function setRequireTls(bool $bool)\n    {\n        $this->requireTls = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Whether TLS is currently required or not.\n     *\n     * @return bool\n     */\n    public function isRequiringTls()\n    {\n        return $this->requireTls;\n    }\n\n    /**\n     * Whether to skip verification or not.\n     *\n     * @param bool $bool\n     *\n     * @return Bulk\n     */\n    public function setSkipVerification(bool $bool)\n    {\n        $this->skipVerification = $bool;\n\n        return $this;\n    }\n\n    /**\n     * Whether skipping verification or not.\n     *\n     * @return bool\n     */\n    public function isSkippingVerification()\n    {\n        return $this->skipVerification;\n    }\n\n    /**\n     * Delivery timestamp. Must be parseable by \\DateTime.\n     *\n     * @param $timestamp\n     *\n     * @return Base\n     */\n    public function setDeliveryTime($timestamp = null)\n    {\n        $this->deliveryTime = $timestamp;\n\n        return $this;\n    }\n\n    /**\n     * Returns the delivery time as RFC2822.\n     *\n     * Magnesium parses the given timestamp into RFC2822 using \\DateTime\n     *\n     * @return string RFC2822-Timestamp\n     */\n    public function getDeliveryTime()\n    {\n        return $this->deliveryTime\n        ? (new \\DateTime($this->deliveryTime))->format(\\DateTime::RFC2822)\n        : null;\n    }\n\n    /**\n     * Array of tags that apply to this message.\n     *\n     * @param array $tags\n     *\n     * @return Base\n     */\n    public function setTags(array $tags = null)\n    {\n        $this->tags = $tags;\n\n        return $this;\n    }\n\n    /**\n     * Get the tags you set.\n     *\n     * @return array\n     */\n    public function getTags()\n    {\n        return $this->tags;\n    }\n\n    /**\n     * Add a custom header.\n     *\n     * @param string $name\n     * @param string $value\n     *\n     * @return Base\n     */\n    public function addCustomHeader(string $name, string $value)\n    {\n        $this->customHeaders[$name] = $value;\n\n        return $this;\n    }\n\n    /**\n     * Remove a custom header by name.\n     *\n     * @param string $name\n     *\n     * @return Base\n     */\n    public function removeCustomHeader(string $name)\n    {\n        unset($this->customHeaders[$name]);\n\n        return $this;\n    }\n\n    /**\n     * Remove all custom headers.\n     *\n     * @return Base\n     */\n    public function removeCustomHeaders()\n    {\n        $this->customHeaders = [];\n\n        return $this;\n    }\n\n    /**\n     * Get custom header by name.\n     *\n     * @param string $name\n     *\n     * @return string\n     */\n    public function getCustomHeader(string $name)\n    {\n        return isset($this->customHeaders[$name]) ? $this->customHeaders[$name] : null;\n    }\n\n    /**\n     * Get all custom headers.\n     *\n     * @return array\n     */\n    public function getCustomHeaders()\n    {\n        return $this->customHeaders;\n    }\n\n    /**\n     * Adds custom headers as h:$name to array.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addCustomHeadersToConfig(array $config)\n    {\n        foreach ($this->getCustomHeaders() as $key => $value) {\n            $config[\"h:$name\"] = $value;\n        }\n\n        return $config;\n    }\n\n    // TODO Custom Variables\n\n    /**\n     * Adds options o:... to array.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addOptionsToConfig(array $config)\n    {\n        $config['o:testmode'] = $this->isTestmode();\n        $config['o:require-tls'] = $this->isRequiringTls();\n        $config['o:skip-verification'] = $this->isSkippingVerification();\n        if ($this->getDeliveryTime()) {\n            $config['o:deliverytime'] = $this->getDeliveryTime();\n        }\n        // TODO Tracking options\n        if ($this->getTags()) {\n            $config['o:tag'] = $this->getTags();\n        }\n\n        return $config;\n    }\n\n    /**\n     * Adds From, Subject, ReplyTo to config.\n     *\n     * @param array $config\n     *\n     * @return array\n     */\n    protected function addFSRtToConfig(array $config)\n    {\n        $config['subject'] = $this->getSubject();\n        $config['from'] = $this->getFromString();\n\n        if ($this->getReplyToString()) {\n            $config['h:Reply-To'] = $this->getReplyToString();\n        }\n\n        return $config;\n    }\n\n    /**\n     * Adds HTML and Text message bodies to config.\n     *\n     * Override set HTMl and Text through arguments.\n     *\n     * @param array  $config\n     * @param string $html   Custom HTML body\n     * @param string $text   Custom Text body\n     *\n     * @return array\n     */\n    protected function addMessageBodyToConfig(array $config, string $html = null, string $text = null)\n    {\n        $config['html'] = $html ?: $this->getHtml();\n        $config['text'] = $text ?: $this->getText();\n\n        return $config;\n    }\n\n    /**\n     * Sends the message via the mailgun client.\n     *\n     * @param array $config Mailgun send options\n     *\n     * @return array Mailgun Response\n     */\n    protected function sendMessage(array $config)\n    {\n        return $this->mailgunClient->sendMessage($this->getDomain(), $config);\n    }\n}\n"], "filenames": ["src/Magnesium/Message/Base.php"], "buggy_code_start_loc": [230], "buggy_code_end_loc": [232], "fixing_code_start_loc": [230], "fixing_code_end_loc": [259], "type": "CWE-74", "message": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in Magnesium-PHP up to 0.3.0. It has been classified as problematic. Affected is the function formatEmailString of the file src/Magnesium/Message/Base.php. The manipulation of the argument email/name leads to injection. Upgrading to version 0.3.1 is able to address this issue. The patch is identified as 500d340e1f6421007413cc08a8383475221c2604. It is recommended to upgrade the affected component. VDB-244482 is the identifier assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2017-20187", "sourceIdentifier": "cna@vuldb.com", "published": "2023-11-05T21:15:09.190", "lastModified": "2024-02-29T01:20:30.167", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in Magnesium-PHP up to 0.3.0. It has been classified as problematic. Affected is the function formatEmailString of the file src/Magnesium/Message/Base.php. The manipulation of the argument email/name leads to injection. Upgrading to version 0.3.1 is able to address this issue. The patch is identified as 500d340e1f6421007413cc08a8383475221c2604. It is recommended to upgrade the affected component. VDB-244482 is the identifier assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}, {"lang": "es", "value": "** NO SOPORTADO CUANDO EST\u00c1 ASIGNADO ** ** NO SOPORTADO CUANDO EST\u00c1 ASIGNADO ** Se encontr\u00f3 una vulnerabilidad en Magnesium-PHP hasta 0.3.0. Ha sido clasificada como problem\u00e1tica. La funci\u00f3n formatEmailString del archivo src/Magnesium/Message/Base.php es afectada por la vulnerabilidad. La manipulaci\u00f3n del argumento correo electr\u00f3nico/nombre conduce a la inyecci\u00f3n. La actualizaci\u00f3n a la versi\u00f3n 0.3.1 puede solucionar este problema. El parche se identifica como 500d340e1f6421007413cc08a8383475221c2604. Se recomienda actualizar el componente afectado. VDB-244482 es el identificador asignado a esta vulnerabilidad. NOTA: Esta vulnerabilidad solo afecta a productos que ya no son compatibles con el mantenedor."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:A/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.7}, "baseSeverity": "LOW", "exploitabilityScore": 5.1, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-74"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:floriangaerber:magnesium-php:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.3.0", "matchCriteriaId": "676606C9-E5D4-4AEB-BB62-2532B3B85E1B"}]}]}], "references": [{"url": "https://github.com/floriangaerber/Magnesium-PHP/commit/500d340e1f6421007413cc08a8383475221c2604", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/floriangaerber/Magnesium-PHP/releases/tag/v0.3.1", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.244482", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.244482", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/floriangaerber/Magnesium-PHP/commit/500d340e1f6421007413cc08a8383475221c2604"}}