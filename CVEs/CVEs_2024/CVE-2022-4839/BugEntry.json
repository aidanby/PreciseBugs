{"buggy_code": ["import { blockElementParserList, inlineElementParserList } from \"./parser\";\n\nexport const marked = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n  for (const parser of blockParsers) {\n    const matchResult = parser.matcher(markdownStr);\n    if (!matchResult) {\n      continue;\n    }\n    const matchedStr = matchResult[0];\n    const retainContent = markdownStr.slice(matchedStr.length);\n\n    if (parser.name === \"br\") {\n      return parser.renderer(matchedStr) + marked(retainContent, blockParsers, inlineParsers);\n    } else {\n      if (retainContent === \"\") {\n        return parser.renderer(matchedStr);\n      } else if (retainContent.startsWith(\"\\n\")) {\n        return parser.renderer(matchedStr) + marked(retainContent.slice(1), blockParsers, inlineParsers);\n      }\n    }\n  }\n\n  let matchedInlineParser = undefined;\n  let matchedIndex = -1;\n\n  for (const parser of inlineParsers) {\n    const matchResult = parser.matcher(markdownStr);\n    if (!matchResult) {\n      continue;\n    }\n\n    if (parser.name === \"plain text\" && matchedInlineParser !== undefined) {\n      continue;\n    }\n\n    const startIndex = matchResult.index as number;\n    if (matchedInlineParser === undefined || matchedIndex > startIndex) {\n      matchedInlineParser = parser;\n      matchedIndex = startIndex;\n    }\n  }\n\n  if (matchedInlineParser) {\n    const matchResult = matchedInlineParser.matcher(markdownStr);\n    if (matchResult) {\n      const matchedStr = matchResult[0];\n      const matchedLength = matchedStr.length;\n      const prefixStr = markdownStr.slice(0, matchedIndex);\n      const suffixStr = markdownStr.slice(matchedIndex + matchedLength);\n      return prefixStr + matchedInlineParser.renderer(matchedStr) + marked(suffixStr, [], inlineParsers);\n    }\n  }\n\n  return markdownStr;\n};\n\ninterface MatchedNode {\n  parserName: string;\n  matchedContent: string;\n}\n\nexport const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n  const matchedNodeList: MatchedNode[] = [];\n\n  const walkthough = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n    for (const parser of blockParsers) {\n      const matchResult = parser.matcher(markdownStr);\n      if (!matchResult) {\n        continue;\n      }\n      const matchedStr = matchResult[0];\n      const retainContent = markdownStr.slice(matchedStr.length);\n      matchedNodeList.push({\n        parserName: parser.name,\n        matchedContent: matchedStr,\n      });\n\n      if (parser.name === \"br\") {\n        return walkthough(retainContent, blockParsers, inlineParsers);\n      } else {\n        if (retainContent.startsWith(\"\\n\")) {\n          return walkthough(retainContent.slice(1), blockParsers, inlineParsers);\n        }\n      }\n    }\n\n    let matchedInlineParser = undefined;\n    let matchedIndex = -1;\n\n    for (const parser of inlineParsers) {\n      const matchResult = parser.matcher(markdownStr);\n      if (!matchResult) {\n        continue;\n      }\n\n      if (parser.name === \"plain text\" && matchedInlineParser !== undefined) {\n        continue;\n      }\n\n      const startIndex = matchResult.index as number;\n      if (matchedInlineParser === undefined || matchedIndex > startIndex) {\n        matchedInlineParser = parser;\n        matchedIndex = startIndex;\n      }\n    }\n\n    if (matchedInlineParser) {\n      const matchResult = matchedInlineParser.matcher(markdownStr);\n      if (matchResult) {\n        const matchedStr = matchResult[0];\n        const matchedLength = matchedStr.length;\n        const suffixStr = markdownStr.slice(matchedIndex + matchedLength);\n        matchedNodeList.push({\n          parserName: matchedInlineParser.name,\n          matchedContent: matchedStr,\n        });\n        return walkthough(suffixStr, [], inlineParsers);\n      }\n    }\n\n    return markdownStr;\n  };\n\n  walkthough(markdownStr);\n\n  return matchedNodeList;\n};\n", "import { escape } from \"lodash\";\nimport { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(escape(matchResult[1]), [], [Link]);\n  return `<strong>${parsedContent}</strong>`;\n};\n\nexport default {\n  name: \"bold\",\n  regex: BOLD_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash\";\nimport { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_EMPHASIS_REG = /\\*\\*\\*(.+?)\\*\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(escape(matchResult[1]), [], [Link]);\n  return `<strong><em>${parsedContent}</em></strong>`;\n};\n\nexport default {\n  name: \"bold emphasis\",\n  regex: BOLD_EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash\";\nimport { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const EMPHASIS_REG = /\\*(.+?)\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(escape(matchResult[1]), [], [Link]);\n  return `<em>${parsedContent}</em>`;\n};\n\nexport default {\n  name: \"emphasis\",\n  regex: EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash-es\";\nimport Emphasis from \"./Emphasis\";\nimport Bold from \"./Bold\";\nimport { marked } from \"..\";\nimport InlineCode from \"./InlineCode\";\nimport BoldEmphasis from \"./BoldEmphasis\";\n\nexport const LINK_REG = /\\[(.*?)\\]\\((.+?)\\)+/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(LINK_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n  const parsedContent = marked(escape(matchResult[1]), [], [InlineCode, BoldEmphasis, Emphasis, Bold]);\n  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[2])}'>${parsedContent}</a>`;\n};\n\nexport default {\n  name: \"link\",\n  regex: LINK_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\n\nexport const STRIKETHROUGH_REG = /~~(.+?)~~/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(STRIKETHROUGH_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], []);\n  return `<del>${parsedContent}</del>`;\n};\n\nexport default {\n  name: \"Strikethrough\",\n  regex: STRIKETHROUGH_REG,\n  matcher,\n  renderer,\n};\n"], "fixing_code": ["import { blockElementParserList, inlineElementParserList } from \"./parser\";\n\nexport const marked = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n  for (const parser of blockParsers) {\n    const matchResult = parser.matcher(markdownStr);\n    if (!matchResult) {\n      continue;\n    }\n    const matchedStr = matchResult[0];\n    const retainContent = markdownStr.slice(matchedStr.length);\n\n    if (parser.name === \"br\") {\n      return parser.renderer(matchedStr) + marked(retainContent, blockParsers, inlineParsers);\n    } else {\n      if (retainContent === \"\") {\n        return parser.renderer(matchedStr);\n      } else if (retainContent.startsWith(\"\\n\")) {\n        return parser.renderer(matchedStr) + marked(retainContent.slice(1), blockParsers, inlineParsers);\n      }\n    }\n  }\n\n  let matchedInlineParser = undefined;\n  let matchedIndex = -1;\n\n  for (const parser of inlineParsers) {\n    const matchResult = parser.matcher(markdownStr);\n    if (!matchResult) {\n      continue;\n    }\n\n    if (parser.name === \"plain text\" && matchedInlineParser !== undefined) {\n      continue;\n    }\n\n    const startIndex = matchResult.index as number;\n    if (matchedInlineParser === undefined || matchedIndex > startIndex) {\n      matchedInlineParser = parser;\n      matchedIndex = startIndex;\n    }\n  }\n\n  if (matchedInlineParser) {\n    const matchResult = matchedInlineParser.matcher(markdownStr);\n    if (matchResult) {\n      const matchedStr = matchResult[0];\n      const matchedLength = matchedStr.length;\n      const prefixStr = markdownStr.slice(0, matchedIndex);\n      const suffixStr = markdownStr.slice(matchedIndex + matchedLength);\n      return marked(prefixStr, [], inlineParsers) + matchedInlineParser.renderer(matchedStr) + marked(suffixStr, [], inlineParsers);\n    }\n  }\n\n  return markdownStr;\n};\n\ninterface MatchedNode {\n  parserName: string;\n  matchedContent: string;\n}\n\nexport const getMatchedNodes = (markdownStr: string): MatchedNode[] => {\n  const matchedNodeList: MatchedNode[] = [];\n\n  const walkthough = (markdownStr: string, blockParsers = blockElementParserList, inlineParsers = inlineElementParserList): string => {\n    for (const parser of blockParsers) {\n      const matchResult = parser.matcher(markdownStr);\n      if (!matchResult) {\n        continue;\n      }\n      const matchedStr = matchResult[0];\n      const retainContent = markdownStr.slice(matchedStr.length);\n      matchedNodeList.push({\n        parserName: parser.name,\n        matchedContent: matchedStr,\n      });\n\n      if (parser.name === \"br\") {\n        return walkthough(retainContent, blockParsers, inlineParsers);\n      } else {\n        if (retainContent.startsWith(\"\\n\")) {\n          return walkthough(retainContent.slice(1), blockParsers, inlineParsers);\n        }\n      }\n    }\n\n    let matchedInlineParser = undefined;\n    let matchedIndex = -1;\n\n    for (const parser of inlineParsers) {\n      const matchResult = parser.matcher(markdownStr);\n      if (!matchResult) {\n        continue;\n      }\n\n      if (parser.name === \"plain text\" && matchedInlineParser !== undefined) {\n        continue;\n      }\n\n      const startIndex = matchResult.index as number;\n      if (matchedInlineParser === undefined || matchedIndex > startIndex) {\n        matchedInlineParser = parser;\n        matchedIndex = startIndex;\n      }\n    }\n\n    if (matchedInlineParser) {\n      const matchResult = matchedInlineParser.matcher(markdownStr);\n      if (matchResult) {\n        const matchedStr = matchResult[0];\n        const matchedLength = matchedStr.length;\n        const suffixStr = markdownStr.slice(matchedIndex + matchedLength);\n        matchedNodeList.push({\n          parserName: matchedInlineParser.name,\n          matchedContent: matchedStr,\n        });\n        return walkthough(suffixStr, [], inlineParsers);\n      }\n    }\n\n    return markdownStr;\n  };\n\n  walkthough(markdownStr);\n\n  return matchedNodeList;\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<strong>${parsedContent}</strong>`;\n};\n\nexport default {\n  name: \"bold\",\n  regex: BOLD_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_EMPHASIS_REG = /\\*\\*\\*(.+?)\\*\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<strong><em>${parsedContent}</em></strong>`;\n};\n\nexport default {\n  name: \"bold emphasis\",\n  regex: BOLD_EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const EMPHASIS_REG = /\\*(.+?)\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<em>${parsedContent}</em>`;\n};\n\nexport default {\n  name: \"emphasis\",\n  regex: EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash-es\";\nimport Emphasis from \"./Emphasis\";\nimport Bold from \"./Bold\";\nimport { marked } from \"..\";\nimport InlineCode from \"./InlineCode\";\nimport BoldEmphasis from \"./BoldEmphasis\";\n\nexport const LINK_REG = /\\[(.*?)\\]\\((.+?)\\)+/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(LINK_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n  const parsedContent = marked(matchResult[1], [], [InlineCode, BoldEmphasis, Emphasis, Bold]);\n  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[2])}'>${parsedContent}</a>`;\n};\n\nexport default {\n  name: \"link\",\n  regex: LINK_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash\";\n\nexport const STRIKETHROUGH_REG = /~~(.+?)~~/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(STRIKETHROUGH_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  return `<del>${escape(matchResult[1])}</del>`;\n};\n\nexport default {\n  name: \"Strikethrough\",\n  regex: STRIKETHROUGH_REG,\n  matcher,\n  renderer,\n};\n"], "filenames": ["web/src/labs/marked/index.ts", "web/src/labs/marked/parser/Bold.ts", "web/src/labs/marked/parser/BoldEmphasis.ts", "web/src/labs/marked/parser/Emphasis.ts", "web/src/labs/marked/parser/Link.ts", "web/src/labs/marked/parser/Strikethrough.ts"], "buggy_code_start_loc": [50, 1, 1, 1, 20, 1], "buggy_code_end_loc": [51, 19, 19, 19, 21, 18], "fixing_code_start_loc": [50, 0, 0, 0, 20, 1], "fixing_code_end_loc": [51, 18, 18, 18, 21, 17], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1.", "other": {"cve": {"id": "CVE-2022-4839", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-29T17:15:21.247", "lastModified": "2023-01-05T21:20:00.337", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:usememos:memos:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.1", "matchCriteriaId": "7E75ADB4-9898-49F3-BF80-3C54F4CE0FB4"}]}]}], "references": [{"url": "https://github.com/usememos/memos/commit/64e5c343c5f74b0abdf3ac0d21a6139daea58cf8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ad954cab-f026-4895-8003-99f5e3b507ed", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/usememos/memos/commit/64e5c343c5f74b0abdf3ac0d21a6139daea58cf8"}}