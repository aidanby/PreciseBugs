{"buggy_code": ["June 2022 8.0\n  - Extended user account status and locking options\n  - Fixed bugs:\n   -> Hidden account is displayed (257)\n\n09.03.2022 7.9\n  - Tree view:\n   -> Support multiple roots (e.g. add \"cn=config\")\n   -> Added function to check password hashes against a given password\n  - Shadow: allow to set shadowLastChange in file upload\n  - Docker: upgrade OS to Debian Bullseye\n  - LAM Pro:\n   -> Support multiple TO addresses for license expiration email\n   -> Custom scripts: $INFO.debug$ wildcard prints all possible wildcards and their values\n   -> Custom scripts: extra INFO wildcards for password change options\n   -> Configuration import: allow to select self service profiles to import (168)\n  - Fixed bugs:\n   -> Tree view: check session expiration\n\n28.12.2021 7.8\n  - Restyling of LAM\n  - Allow to override global password policy in server profile (160)\n  - Do not print random password if sent via email (165)\n  - LAM Pro:\n   -> PowerDNS support\n   -> Device: allow multiple cn values\n  - Fixed bugs:\n   -> PDF does not contain all group members (249)\n   -> File upload issue on PHP 8 (153)\n   -> Export issue on non-Pro version (155)\n   -> Force password change for 389ds does not work on password quick change page (251)\n\n\n30.09.2021 7.7\n  - 2-factor authentication with OpenID\n  - Send proper response code on failed login\n  - LAM Pro:\n   -> OpenLDAP 2FA support for TOTP\n  ->Fixed bugs:\n   -> Issues with list filter if only one result is found (241)\n   -> Allow to sync empty list of groups in group of names user module (242)\n   -> Windows lockout duration and password maximum age computed incorrectly\n   -> Wrong status for nsAccountLock (245)\n\n\n05.07.2021 7.6\n  - Allow to store whole LAM configuration in MySQL database\n  - Docker: new options for configuration location and LAM Pro license\n  - Full PHP 8 compatibility\n  - Replaced tree view and moved it to tools menu\n  - Wildcards in edit screen support lower-case mode (e.g. \"$_firstname\")\n  - Windows: more fields can be hidden\n  - LAM Pro:\n   -> Export/Import of cron jobs\n   -> Mail server encryption type can be configured (TLS/SSL/none)\n   -> User self registration: support to define uid field to use constant or custom validation\n   -> Group of names user module: allow to sync memberships from other user\n   -> Custom fields:\n    * Support password change dialog in user edit view\n    * Added date and email validation for text fields\n    * Support password reset page for password fields\n    * New field types: LDAP date, LDAP date and time\n   -> Password self reset: fields on first page can be prefilled by URL parameter\n  - Fixed bugs:\n   -> Truncated mail text field in \"LAM Pro password mail settings\" and 2FA base URLs\n   -> 389ds: support password change and force password in one save action\n\n\n30.03.2021 7.5\n  - PHP 7.3 required\n  - PHP 8.0 compatibility (except tree view)\n  - Support copying LDAP entries from account list\n  - Account/PDF profiles: management of global templates and logos\n  - Group of names: allow filter by member/owner (#151)\n  - General information: link to groups (#152)\n  - LAM Pro:\n   -> Self registration: support binary attributes (e.g. for jpegPhoto)\n   -> Self registration: support custom mail attributes and mail from constant value (149)\n   -> Self registration: evaluate autorange at account creation (154)\n   -> MIT Kerberos: check Kerberos password policy on password change, better error handling\n   -> Self Service: new field to show user's quota values\n   -> Self Service: allow to create Unix home directory during registration\n   -> Custom type: allow for user/group/host to be able to reuse existing modules\n\n\n06.12.2020 7.4\n  - Argond2id support for password hashes (requires PHP 7.3) (#113)\n  - 2-factor authentication:\n   -> Support for Okta\n   -> WebAuthn devices can be named in Self Service and WebAuthn tool\n  - LAM Pro:\n   -> MIT Kerberos policies support\n   -> User self registration: added admin approval option and info mail for user after creation\n\n\n22.09.2020 7.3\n  - PHP 7.4 compatibility\n  - Configuration export and import\n  - Server profiles support to specify a part of the DN to hide\n  - Show password prompt when a user with expired password logs into LAM admin interface (requires PHP 7.2)\n  - Better error messages on login when account is expired/deactivated/...\n  - Personal/Windows: photo can be uploaded via webcam\n  - Windows users: group display format can be configured (cn/dn)\n  - Support PBKDF2-SHA512 password hashes\n  - LAM Pro:\n   -> Windows: new cron job to send users a summary of their managed groups\n  - Fixed bugs:\n   -> Unix groups: memberUid was not deleted correctly when forced sync with group of names is active\n\n\n01.05.2020 7.2\n  - Unix: allow to create group with same name during user creation\n  - LAM Pro:\n   -> EMail sending can be done via SMTP without local mail server\n   -> License expiration warning can be sent via email or disabled\n  - Fixed bugs:\n   -> Captcha don't show anymore in Self Service login page (213)\n   -> Unix memberships cannot be changed. This issue can also affect other membership relations.\n   -> Missing locales on Docker image\n\n\n17.03.2020 7.1\n  - PHP 7 required\n  - WebAuthn/FIDO2 support for 2-factor-authentication (requires PHP 7.2)\n  - IMAP: changed library to support latest TLS versions\n  - Personal: support display name (hidden by default in server profile)\n  - Windows users: support allowed workstations, more profile options\n  - Reactivated Polish translation\n  - LAM Pro:\n   -> PPolicy: support for password check module\n   -> Windows AD LDS support (users and groups)\n   -> User self registration: support Active Directory/Samba4\n\n\n21.12.2019 7.0\n  - Lamdaemon can be configured with directory prefix for homedirs\n  - Account list filters match on substrings instead of whole value\n  - YubiKey: support to configure multiple verification servers\n  - Windows hosts: added last password change and last login\n  - Deactivated non-maintained translations: Catalan, Czech, Hungarian, Polish and Turkish\n    Contact us if you would like to take over. Translators get LAM Pro for free (commercial use included).\n  - Docker updates\n  - Fixed bugs:\n   -> Missing CSS for Duo\n   -> Editing of DNs with comma on Windows (210)\n\n\n29.09.2019 6.9\n  - Group account types can show member+owner count in list view\n  - 2-factor authentication:\n   -> Duo support\n   -> user name attribute for privacyIDEA can be specified\n  - LAM Pro:\n   -> New self service settings for login and main page footer\n   -> Custom fields: custom labels for LDAP search select list\n  - Fixed bugs:\n   -> Configuration issue with Unix user/host module (206)\n\n\n02.07.2019 6.8\n  - Parallel editing of multiple entries in different browser tabs supported\n  - LAM supports the progressive web app standard which allows to install LAM as an icon on home screen\n  - Windows: added home drive and force password change to profile editor\n  - Unix: password management can be disabled in module settings\n  - LAM Pro:\n   -> Bind DLZ: entry table can show record data (use special attribute \"#records\" in server profile)\n   -> Self service: support legacy attribute \"email\" for password self reset and user self registration\n  - Fixed bugs:\n   -> Users: No drop-down filter box for account status (200)\n   -> Custom fields: Account type \"Groups\" not saving/deleting fields (66)\n\n\n25.03.2019 6.7\n  - Added YubiKey as 2-factor authentication provider\n  - Support logging to remote syslog server\n  - PHP 7.3 support\n  - LAM Pro:\n   -> Allow to mark text and text area fields as required\n   -> New self service fields:\n    -> Mail routing\n    -> Windows proxy addresses + mail alias\n    -> Shadow account expiration date\n    -> Unix and group of names memberships\n   -> Base URL for emails in self service can be configured in self service profile\n   -> Bind DLZ: support DNAME+XFR records and descriptions in records (requires latest LDAP schema)\n   -> Cron jobs: added Shadow account expiration notification job\n  - Fixed bugs:\n   -> Allow tree-only configurations without any other tab\n\n\n28.12.2018 6.6\n  - New import/export in tools menu\n  - YubiKey support\n  - Windows users:\n    -> Manage \"departmentNumber\" (needs to be activated via LAM server profile)\n    -> Sync group memberships from Unix and group of names\n  - LAM Pro:\n    -> Easy setting of background color in self service profile\n    -> Cron jobs: added Windows/Qmail/FreeRadius account expiration notification jobs\n    -> Bind DLZ: usability improvements and small fixes\n\n\n25.09.2018 6.5\n  - Password change possible via LDAP EXOP operation (set LDAP_EXOP as password hash, requires PHP 7.2)\n  - Support Imagick and GD\n  - Dropped support for Apache 2.2\n  - Upload: allow to overwrite existing accounts\n  - Personal: photos can be printed in PDF export\n  - Kolab updates\n  - LAM Pro:\n   -> Auto deletion of entries with dynamic directory services support (requires PHP 7.2)\n  - Fixed bugs:\n   -> Issue when changing key case of uid (#197)\n\n\n20.06.2018 6.4\n  - Imagick PHP extension required\n  - Passwords can be checked against external service (e.g. https://api.pwnedpasswords.com/range)\n  - Personal/Windows: image cropping support\n  - Better filtering of account lists\n  - Unix: Unix, Windows and group of names memberships can be synced in group selection\n  - IMAP: create mailbox via file upload\n  - PHP 7.2 support\n  - Support for \",\" in DN\n  - LAM Pro:\n   -> Better support for 389ds password expiration\n  - Fixed bugs:\n   -> Error on password reset page when custom fields is used (194)\n\n\n19.03.2018 6.3\n  - Server profile: added option if referential integrity overlay is active to skip cleanup actions\n  - Unix: several options are now specific to subaccount types (reconfiguration required!)\n  - Fixed bugs:\n   -> Security fixes (XSS vulnerabilities CVE-2018-8763 and CSRF token in URL CVE-2018-8764)\n   -> Quota for Windows groups did not work\n  - LAM Pro:\n   -> Support custom structural object classes with new custom type\n   -> Support dynamic lists\n   -> Self service login and password self reset can be secured with captcha\n\n\n04.02.2018 6.2.1\n  - Fixed bugs:\n   -> Login page not working when no server profile exists (44)\n   -> LAM Pro: Password Self Reset has issues when both security question and confirmation mail are activated.\n   -> LAM main configuration: certificate buttons do not work\n\n\n13.12.2017 6.2\n  - License changed from GPL v2 to GPL v3\n  - PHP 5.6 and Internet Explorer 11 or later required\n  - PDF export supports Chinese, Japan and Korean\n  - Account status also shows expired accounts\n  - Quota: support k/m/g/t/K/M/G/T to specify values in e.g. kB\n  - LAM Pro:\n   -> Cron jobs include better logging and support dry-run\n\n\n19.09.2017 6.1\n  - Automatically trim input fields to avoid trailing/leading spaces\n  - LAM Pro:\n   -> Custom fields: support wildcards in text fields such as $firstname\n   -> Custom fields: specify minimum/maximum count for multi-value entries\n   -> Custom fields: new type for constant values\n  - Fixed bugs:\n   -> Password modify page reports error on password change when posixAccount is present for users\n   -> Nginx configuration files did not include \"fastcgi_param SCRIPT_FILENAME $request_filename;\" (193)\n\n\n20.07.2017 6.0.1\n  - Fixed bugs:\n   -> Configuration file fills up with empty values\n   -> Tool visibility settings\n\n\n26.06.2017 6.0\n  - Support multiple configurations for same account type\n  - PHP 7.1 compatibility\n  - Courier users and mail aliases\n  - Windows: Support unlocking of users with too many failed login attempts\n  - Samba 3: added account expiration date to PDF fields\n  - LAM Pro:\n   -> Custom fields: can be used for file upload\n   -> Custom fields: new selection list type that gets options from LDAP search\n   -> Kopano support\n\n\n15.03.2017 5.7\n  - 2-factor authentication for admin login and self service with privacyIDEA\n  - PDF files use DejaVu serif font for better readability and more supported characters (e.g. Cyrillic)\n  - Windows users: the department option now uses attribute \"department\" instead of \"departmentNumber\"\n  - Updated Debian dependencies\n  - Fixed bugs:\n   -> Comparison issue prevents saving of values (185)\n\n\n18.12.2016 5.6\n  - New mechanism to replace wildcards in user edit screen. Personal/Unix support more wildcards like \"$firstname\".\n  - Windows: added support for pager, otherPager, mobile, otherMobile, company and proxyAddresses (disabled by default in server profile)\n  - Mail routing: enable for groups and allow to add/remove the extension\n  - LAM Pro:\n   -> Password self reset: support for up to 3 security questions\n   -> 389ds: new wildcards for custom scripts: $INFO.389lockingStatusChange$ and $INFO.389deactivationStatusChange$\n   -> Custom scripts: custom button label supported for manual scripts\n\n\n10.09.2016 5.5\n  - Windows: allow to show effective members of a group\n  - Lamdaemon: support SSH key authentication\n  - LAM Pro:\n   -> Group of names/members + roles: allow to show effective members of a group\n   -> Cron jobs:\n     * Move or delete expired accounts (Shadow, Windows, qmail, FreeRadius)\n     * 389ds: added job to notify before password expires\n   -> 389ds: manage password expiration time with module \"Account locking\"\n  - Fixed bugs:\n   -> PHP 7 issues on edit page\n\n\n21.06.2016 5.4\n  - Unix: support magic numbers for UIDs/GIDs (e.g. 389 server DNA plugin)\n  - Samba 3: support for Samba password history (RFE 133)\n  - LAM Pro:\n   -> New module for 389ds unlocking and account (de)activation\n   -> Self registration: support for Google reCAPTCHA\n   -> Password notification jobs support CC and BCC\n   -> Self Service: Samba 3 supports password history and minimum age check\n\n\n21.03.2016 5.3\n  - Requires PHP 5.4.0 or higher\n  - PHP 7 support\n  - Windows: support management of fax number\n  - Login can show display name instead of server URL\n  - Personal/Unix: support K5KEY hash type for smbk5pwd\n  - New NIS netgroup module for hosts\n  - Puppet: autocompletion for classes and variables, allow to enforce list of possible classes\n  - Fixed bugs:\n   -> Autoload errors in tree view\n   -> Set correct content type on JSON requests (174)\n  - LAM Pro:\n   -> Support for LDAP views based on nsview object class\n   -> Password notification jobs support to print expiration date in email\n   -> PPolicy password notification job takes pwdExpireWarning into account\n   -> Custom fields: support calendar fields\n   -> Zarafa contacts: allow to create contacts without Unix extension\n   -> Added options for password rest page to server profile\n\n\n15.12.2015 5.2\n  - Windows: support for additional attributes (jpegPhoto, title, carLicense,\n    employeeNumber, employeeType, businessCategory, departmentNumber, ou, o, manager)\n  - SSH public key: added possibility to add/remove SSH extension\n  - MIT Kerberos: set krbExtraData for new accounts\n  - IMAP: allow to specify initial folders to create\n  - LAM Pro:\n   -> Users: allow to manage IP addresses with ipHost module\n   -> Self Service: added time zone setting in self service profile\n   -> Shadow: added job to notify before Shadow password expires\n   -> Windows: added job to notify before Windows password expires\n\n\n31.08.2015 5.1\n  - IMAP: support Windows users\n  - SSH public key: check uploaded files if in right format\n  - LAM Pro:\n   -> Self Service optimized also for mobile devices\n   -> MySQL support for cron jobs\n   -> Self registration: support auto-numbering for attributes (e.g. to create Unix accounts)\n\n\n30.06.2015 5.0\n  - Microsoft IE 8 no longer supported\n  - Security: added CSRF protection\n  - NIS net groups: user module to manage NIS net groups on user page\n  - Zarafa users: allow to change display format of \"Send As\"\n  - User list: support to filter by account status\n  - Lamdaemon: update group of home directory if user's primary group changes\n  - Personal: allow to add ou=addressbook subentry for users (RFE 117)\n  - Unix: support auto-UID/GID with msSFU30DomainInfo\n  - Windows groups: support editing of member of\n  - Central time zone setting in server profile\n  - LAM Pro:\n   -> Cron job to notify users before password expires (PPolicy)\n   -> Password Self Reset: added 389 Directory Server schema file\n   -> Support for groupOfMembers (RFE 121)\n   -> Rfc2307bis Unix groups: added option to force syncing with group of names\n\n\n31.03.2015 4.9\n  - Requires PHP 5.3.2 or higher\n  - Templates for server profiles\n  - Unix/Personal: support SASL as password hash type\n  - PDF export: added option to print primary group members\n  - Use HTTP_X_REAL_IP/HTTP_X_FORWARDED_FOR to log IP addresses (RFE 120)\n  - LAM Pro:\n   -> Personal: support image file size limit and cropping (requires php-imagick) in self service\n   -> Password self reset: allow to enter custom security questions (RFE 115)\n   -> Unix groups (rfc2307bis): allow to sync members from group of (unique) names (RFE 116)\n   -> Self Service: support password change with old password (requires PHP >= 5.4.26)\n  - Fixed bugs:\n   -> Self Service shows password reuse error after password change was required\n\n\n16.12.2014 4.8\n  - Active Directory: support paged result as workaround for size limit exceeded\n  - FreeRadius: support dialupAccess and radiusProfileDn\n  - Usability improvements\n  - LAM Pro:\n   -> Self service: added option if referrals should be followed\n  - fixed bugs:\n   -> missing LDAP_DEREF_NEVER in some cases (169)\n\n\n07.10.2014 4.7.1\n  - fixed bugs:\n   -> Blank page and \"User tried to access entry of type ...\" log message when DN suffix does not exactly match case in LDAP\n\n\n28.09.2014 4.7\n  - Nginx webserver support\n  - DHCP: support pooling of IP ranges (RFE 107)\n  - Personal: support pager attribute (hidden by default)\n  - Renamed config/lam.conf_sample to lam.conf.sample and config.cfg_sample to config.cfg.sample\n  - LAM Pro:\n   -> Password dialog: preset alternate email address with backup email address (RFE 111)\n\n\n12.06.2014 4.6\n  - Unix groups: allow to disable membership management\n  - Extended LAM's internal password policies\n  - Lamdaemon: move home directory on server if changed\n  - Password policy check during typing\n  - LAM Pro:\n   -> Password self reset and user self registration support to set a header text\n   -> Sudo roles: support latest schema\n   -> Bind DLZ: automatic PTR management (disabled by default) and better formatting of e.g. TTL values\n\n\n18.03.2014 4.5\n  - IMAP: allow dynamic admin user names by replacing wildcards with LDAP attributes\n  - Personal: allow to set fields read-only\n  - NIS mail aliases can be managed on user page\n  - Added option to server profile if referrals should be followed (fixes problems with Samba 4 and AD)\n  - Windows user/group: NIS support (msSFU30NisDomain, msSFU30Name)\n  - LAM Pro:\n   -> Allow to set single account types read-only\n   -> Support for organizationalRole entries\n   -> Separate IP restriction list for self service\n   -> Bind DLZ: support TXT/SRV records\n   -> Self Service: added language selection\n   -> Password self reset: support backup email address\n   -> Custom fields: support help texts\n   -> Support for Oracle databases (orclNetService) (RFE 104)\n  - fixed bugs:\n   -> PDF export for multiple entries does not work (163)\n   -> Personal: fixed photo upload if Imagick is not installed (161)\n   -> Use account filters for Unix membership management (165)\n\n\n18.12.2013 4.4\n  - PyKota support: users, groups, printers, billing codes\n  - Kolab shared folder support\n  - New tool \"Multi edit\" allows LDAP operations on a large number of entries (e.g. adding attributes)\n  - Allow to set a custom label for each account type\n  - Unix: switch also additional membership if primary group is changed (RFE 108)\n  - Windows: fixed user name handling, sAMAccountName now optional\n  - Apache 2.4 support (requires Apache \"version\" module)\n  - Added Turkish, Ukrainian and US English translation\n  - LAM Pro:\n   -> Bind DLZ support\n   -> Samba/Shadow: display password change date in self service\n   -> Custom fields: support custom label and icon, auto-completion\n   -> User self registration: support constant attribute values\n   -> Self service: allow to set custom field labels\n  - Fixed bugs:\n   -> Format of photo in Personal tab (158)\n\n\n25.09.2013 4.3\n  - Custom SSL CA certificates can be setup in LAM main configuration\n  - Unix user and group support for Samba 4\n  - Samba 3 groups: support local members\n  - Kolab: support group accounts and allowed senders/receivers for users\n  - SSH public key: support file upload and self service enhancements (RFE 101)\n  - DHCP: support more options (RFE 99)\n  - LAM Pro:\n   -> PPolicy: check password history for password reuse\n   -> Custom fields: read-only fields for admin interface and file upload for binary data\n   -> Custom scripts: support user self registration\n   -> Password self reset: Samba 3 sync, identification with login attribute, Samba 4 support\n  - Fixed bugs:\n   -> Custom fields: auto-adding object classes via profile editor fixed\n   -> PHP 5.5 compatibility\n   -> Lamdaemon: do not show message if home directory to delete was not found (154)\n\n\n18.06.2013 4.2.1\n  - Fixed bugs:\n   -> Unix: suggested user name must be lower case\n   -> Quota: profile editor does not work in some cases\n\n\n04.06.2013 4.2\n  - Samba 4 support: users, groups, hosts\n  - Unix: allow to change format for suggested user name\n  - LAM Pro:\n   -> Zarafa support for Samba 4\n   -> allow to hide buttons to create/delete entries for each account type\n   -> Password self reset: support new identification methods: user, email, user or email, employee number\n   -> Custom fields: support PDF, profiles and multi-value text fields\n   -> Personal: support password mail sending in file upload\n\n\n19.03.2013 4.1\n  - Updated EDU person module (RFE 3599128)\n  - Personal: allow management of user certificates (RFE 1753030)\n  - Unix: Support Samba Unix Id pool for automatic UID/GID generation\n  - DHCP: support separated dhcpServer and dhcpService entries\n  - LAM Pro:\n   -> Support Qmail groups\n  - Fixed bugs:\n   -> changed user and group size limits (3601649)\n\n\n06.01.2013 4.0.1\n  - support additional LDAP filters for account types\n  - allow to hide account types (that are required by other account types)\n  - fixed bugs:\n   -> missing directories config/pdf and config/profiles on fresh installations\n\n\n17.12.2012 4.0\n  - account profiles and PDF structures are now bound to server profile\n  - IMAP: support \"/\" as path separator (RFE 3575692)\n  - show server profile name on config pages (RFE 3579768)\n  - LAM Pro:\n   -> Custom fields for admin interface\n   -> MIT Kerberos support\n   -> Qmail user support\n\n\n25.09.2012 3.9\n  - Kolab 2.4 support\n  - Puppet support\n  - LAM Pro\n   -> support RFC2307bis automount entries\n   -> read-only fields in self service\n  - fixed bugs\n   -> Hidden tools are still shown on the \"Tools\" page (3546092)\n\n\n19.07.2012 3.8\n  - quick (un)lock for users\n  - allow to disable tools\n  - LAM Pro:\n   -> Custom fields module allows to manage custom LDAP attributes in Self Service\n   -> Self service now supports user self registration\n   -> Separate group of names module for users allows to manage memberships if Unix module is not used (RFE 3504429)\n   -> Named object module for groups (used for rfc2307bis schema)\n   -> Password change page allows account (un)locking\n   -> Allow to send password mails on user edit page\n   -> Custom scripts: supports manual scripts that can be run from account edit pages\n   -> Zarafa 7.1 support (proxy URL for servers)\n  - fixed bugs\n   -> Asterisk extensions with same name (3528288)\n\n\n25.03.2012 3.7\n  - Login: support bind user for login search\n  - Personal: added labeledURI and cosmetic changes, description is now multi-valued (RFE 3446363)\n  - Asterisk extensions: group extension entries by name and context\n  - File upload:\n   -> support custom scripts postCreate (LAM Pro)\n   -> PDF export\n  - New translation: Slovakian\n  - removed phpGroupWare support (project no longer exists)\n  - Use new password after self password change (RFE 3446350)\n  - LAM Pro:\n   -> Password self reset can send password confirmation and notification mails\n   -> Zarafa archiver support\n   -> Heimdal Kerberos support\n  - Fixed bugs:\n   -> DHCP: error message not displayed properly (3441975)\n   -> Profile loading not possible if required fields are not filled (3444948)\n   -> Tree view: unable to add object class (3446037)\n   -> Edit page: unable to move accounts to different OU\n   -> Self Service: support forced password changes (PPolicy) (3483907)\n   -> XSS security patch (3496624)\n\n\n23.11.2011 3.6.1\n  - LAM Pro: fixed password reset function\n\n\n22.11.2011 3.6\n  - support HTTP authentication for admin pages and self service\n  - new modules\n   -> authorizedServiceObject\n   -> FreeRadius\n  - LAM Pro\n   -> added password self reset feature\n   -> Zarafa 7 support\n   -> Zarafa support for dynamic groups, address lists and contacts\n   -> Unix: group of names can be managed on user edit page\n  - Fixed bugs:\n   -> Unix: check for upper-case characters in user name (3416180)\n\n\n09.08.2011 3.5.0\n  - New modules:\n   -> \"General information\": shows internal data about accounts (e.g. creation time)\n   -> \"Quota\": manage filesystem quota inside LDAP (Linux DiskQuota) (RFE 1811449)\n  - Personal: New attributes o, employeeNumber, initials\n  - Unix: Support to create home directories on multiple servers and also for existing users\n  - Server information shows data from cn=monitor\n  - Lots of small improvements\n  - LAM Pro:\n   -> Automount: allow to create automount maps\n   -> Password policy: allow to (un)lock accounts\n  - Fixed bugs:\n   -> Owner attribute is multi-valued (3300727)\n\n2011-04-25 3.4.0\n  - IMAP mailboxes:\n   -> support to read user name from uid attribute\n   -> added quota management\n  - Personal: added additional options for account profiles\n  - Mail aliases: sort recipients (RFE 3170336)\n  - Asterisk: support all attributes (can be disabled in configuration)\n  - Samba 3/Shadow: allow to sync expiration date (RFE 3147751)\n  - LAM Pro:\n   -> support automount entries\n   -> Zarafa groups: allow combination with group of names\n   -> enhanced wildcards for custom scripts\n   -> Group of (unique) names: allow members to be optional\n  - Fixed bugs:\n   -> Renaming of default profile (3183920)\n   -> Profile editor: fixed problems with multi select\n\n\n12.02.2011 3.3.0\n  - additional usability enhancements\n  - new IMAP module (\"Mailbox (imapAccess)\") allows to create/delete user mailboxes\n  - LAM Pro: enhanced Zarafa to support users and groups for \"Send as\" (new configuration option)\n  - PDF export: higher resolution for logos\n  - reduced number of LDAP queries\n  - lamdaemon: support journaled quotas\n  - Fixed bugs:\n   -> ignore comment lines in shells file (3107124)\n   -> home directory creation on file upload\n\n\n28.10.2010 3.2.0\n  - large usability enhancements\n  - Shadow: allow to force password change when maximum password age is set\n  - DHCP: renamed module \"Fixed IPs\" to \"Hosts\", IP is now optional (3038797)\n  - PHP version 5.2.4 or higher required\n  - LAM Pro:\n   -> Zarafa support (user, group, server)\n   -> Password policy: allow to force password change (RFE 3026940)\n   -> Password reset page: mail subject, text and from address can be set in server profile\n   -> Self service: Asterisk (voicemail) password synchronisation\n  - Fixed bugs:\n   -> Email check did not include \"+\" (3033605)\n   -> Tab index on login page (3042622)\n\n\n04.07.2010 3.1.1\n  - LAM Pro: fix for user self service\n\n\n25.06.2010 3.1.0\n  - usability improvements\n  - Asterisk voicemail support\n  - new hosts module for user accounts to define valid login workstations (replaces inetOrgPerson schema hack) (2951116)\n  - PDF editor: descriptive fields\n  - lamdaemon:\n   -> sudo entry needs to be changed to \".../lamdaemon.pl *\"\n   -> replaced PHP SSH2 with phpseclib\n  - LAM Pro\n   -> custom scripts: new options to hide executed commands and define if output is HTML or plain text\n   -> support sudo entry management (object class sudoRole)\n  - fixed bugs:\n   -> Asterisk password handling (patch 2979728)\n   -> Samba domain SID check (2994528)\n   -> language selection at login (2996335)\n\n\n24.03.2010 3.0.0\n  - support to remove extension from an existing account: shadowAccount, sambaSamAccount, eduPerson\n  - file upload: allow to select account modules for upload\n  - removed frames\n  - Unix: automatic user name generation from first and last name (2492675)\n  - LAM Pro:\n   -> support OpenLDAP password policies (ppolicy)\n   -> manage host IP addresses (ipHost)\n  - fixed bugs:\n   -> Multi-delete not working (2931458)\n   -> Samba: can/must change password needs to be read from domain policy (2919236)\n   -> DNs which include \"#\" are not editable/deletable (2931461)\n   -> fixed configure/Makefile\n   -> Asterisk input fields and authentication realm (patch 2971792)\n\n\n16.12.2009 2.9.0\n  - Asterisk support\n  - new tool: server information\n  - consolidated LAM documentation in new manual (docs/manual/index.html)\n\t- DHCP: add host name to fixed IPs (RFE 2898948)\n\t- LAM Pro:\n\t -> enabled custom scripts for self service\n\t -> support for nisObject object class\n  - fixed bugs:\n\t -> unable to edit accounts with DNs that contain spaces next to a comma (2889473)\n\t -> login method \"LDAP search\" has problems if LDAP server is down (2889414)\n\t -> filter in account lists did not support non-ASCII letters\n\t -> alias handling (2901248)\n\t -> DHCP range check (2903267)\n\n\n28.10.2009 2.8.0\n  - ability to hide fields: inetOrgPerson, sambaSamAccount\n\t- compatibility with PHP 5.3\n\t- one central button to change passwords on account pages\n\t- removed support for Samba 2 accounts\n\t- removed lamdaemonOld script\n\n\n05.08.2009 2.7.0\n  - LAM Pro: allow to execute custom scripts\n  - log client IP at login attempt\n  - added separate configuration option to enable/disable TLS encryption\n  - Samba 3: allow to disable LM hashes (on by default) (RFE 2657140)\n  - DHCP: added description field and reordered fixed IP input fields\n  - fixed bugs:\n    * added additional check for creating home directories (2798489)\n\t\t* support memcache for session storage (2811505)\n\n\n08.04.2009 2.6.0\n  - support NIS netgroups\n  - support EDU person accounts (RFE 1413731)\n  - Personal: support departmentNumber attribute\n  - DHCP: allow file upload\n  - added config option to search LAM login users in LDAP (RFE 2494249)\n  - help messages are displayed as tooltips\n  - LAM Pro:\n   -> add businessCategory to self service (RFE 2494246)\n   -> allow to customize page headers and use custom CSS styles\n\n\n21.01.2009 2.5.0\n  - LAM Pro:\n   -> supports rfc2307bis schema for Unix groups (RFE 2111694)\n   -> added alias management (object classes alias + uidObject) (RFE 1912779)\n  - Shadow: module is now optional when creating new accounts\n  - Kolab:\n   -> account extension is now optional\n   -> can be used without Unix module\n   -> self service uses no extra LDAP suffix but uses global setting\n  - DHCP:\n   -> several bugfixes\n   -> added PDF support\n   -> support multiple Netbios name servers (RFE 2180179)\n  - Samba 3:\n   -> self service sets attribute \"sambaPwdLastSet\" on password change (LAM Pro)\n   -> password timestamps can be updated on password reset page (LAM Pro)\n   -> option to force password change on next login\n   -> profile options for time when the user can/must change the password\n\n\n15.10.2008 2.4.0\n  - added DHCP management (donated by Siedl networks GmbH)\n  - requires PHP 5.1.2\n  - MHash dependendy replaced by Hash\n  - save last selected server profile from login page\n  - lamdaemon: allow to specify SSH port\n  - lamdaemon: added Syslog logging\n  - Unix: added profile options for lamdaemon\n  - LAM Pro: password reset page is able to unlock Samba accounts and sets shadowLastChange\n  - fixed bugs:\n    * problems with DN containing ( and ) (2059740)\n    * problem with gecos field in file upload (2103936)\n\n\n30.04.2008 2.3.0\n  - added Polish translation\n  - support phpGroupWare accounts\n  - password policies\n  - redesigned PDF editor\n  - show mail addresses as link in account list\n  - Unix: allow primary group members to be added as memberUid\n  - Kolab: support LAM Pro self service\n  - LAM Pro: new account type for groupOf(Unique)Names\n  - fixed bugs:\n   -> XHTML headers should be removed (1912736)\n\n\n23.01.2008 2.2.0\n  - account lists:\n   -> allow to switch sorting\n   -> added separate configuration page and store settings in cookies\n   -> list size can now be set individually for each account type on the list configuration page\n   -> new PDF buttons\n  - use suffix from account list as default for new accounts (patch 1823583)\n  - Security: passwords in configuration files are now saved as hash values\n  - improved design\n  - style fixes for Internet Explorer users\n  - Unix: allow to set host passwords (RFE 1754069)\n  - Unix: allow to generate random passwords for users\n  - Samba 3 groups: Samba part is now optional\n  - Personal: add object classes person and organizationalPerson for new accounts (RFE 1830033)\n  - new LDAP schema check on tests page\n  - LAM Pro:\n   -> added possibility for deskside support to reset passwords at account list page\n   -> access levels (read only, change passwords, write access) for server profiles\n\n\n07.11.2007 2.1.0\n  - tabular design for account pages\n  - show DN on account pages\n  - Samba 3: made Samba account optional\n  - Samba 3: manages now terminal server settings\n  - fixed bugs:\n   -> LAM Pro: UTF-8 characters are invalid displayed on configuration page (1788752)\n   -> LAM works again on PHP 5.1.x (1792447)\n   -> Quota: managing group quotas does not work (1811728)\n   -> Samba 3 domains: lockout users after bad logon attempts must allow 0 - 999 (1814578)\n\n\n08.08.2007 2.0.0\n  - new translations: Chinese (Simplified), Czech and Portuguese\n  - usability improvements\n  - LDAP accounts including child entries can now be moved\n  - group list can show primary members (RFE 1517679 and patch 1722460)\n  - more translated example texts (RFE 1702140)\n  - inetOrgPerson: now manages homePhone, roomNumber, businessCategory\n  - posixAccount: allow to create home directories in file upload (RFE 1665034)\n  - account lists: display buttons on top and bottom (RFE 1702136)\n  - fixed bugs:\n   -> OU editor: help images (1702132)\n   -> config editor: extra space (1702269)\n   -> fixed some inconsistent help entries (1694863)\n   -> user list: refreshing GID translation did not work (1719168)\n   -> allow uid as RDN attribute for inetOrgPerson (1740499)\n   -> PHP Warning: mcrypt_decrypt(): The IV parameter must be ... (1742543)\n   -> uid attribute no longer required for InetOrgPerson (1757215)\n\n\n28.03.2007 1.3.0\n  - improved design\n  - user list can now display jpegPhoto attributes\n  - lamdaemon: support for multiple servers\n  - LAM Pro: users may change their photos (jpegPhoto)\n  - fixed bugs:\n   -> ShadowAccount: PDF entry for expire date was wrong (1658868)\n   -> Samba groups: fixed help entry (patch 1664542)\n   -> Debian package did not include lamdaemonOld.pl (1660493)\n   -> NIS mail aliases: allow more characters in alias name (1674198)\n   -> fixed syntax errors in some .htaccess files\n   -> security fix: HTML special characters in LDAP data were not escaped\n\n  Developers:\n    API changes:\n    - added listPrintTableCellContent() to class lamList\n    - added listPrintAdditionalOptions() to class lamList\n    - added preModifyActions() to class baseModule\n    - added postModifyActions() to class baseModule\n    - added preDeleteActions() to class baseModule\n    - added postDeleteActions() to class baseModule\n\n\n24.01.2007 1.2.0\n  - Samba 3: better handling of date values\n  - Samba 3: Handling of locked accounts (RFE 1609076)\n  - LAM Pro: modules can define configuration settings (Unix: password hashing)\n  - LAM Pro: management of groupOfNames and groupOfUniqueNames entries (RFE 875482)\n  - fixed bugs:\n   -> Lamdaemon test did not work on PHP 4\n   -> InetOrgPerson: Problems with error messages (1628799)\n\n  Developers:\n    API changes:\n    - removed get_configDescription() from module interface\n    - added functions to handle configuration settings for LAM Pro\n\n\n01.11.2006 1.1.1\n   - Lamdaemon: added test page (Tools -> Tests -> Lamdaemon test)\n   - LAM Pro: Samba passwords can now be synchronized with Unix password\n   - Shadow account: better management of expiration date\n   - fixed bugs:\n    -> Unix: password hashing problem (1562426)\n    -> Unix: No error message for wrong UID numbers in file upload\n    -> Filters in account lists get lost when sorting the table\n\n\n20.09.2006 1.1.0\n   - Lamdaemon now uses the SSH implementation from PECL which is much more stable\n   - Samba 2/3: \"Use Unix password\" now on by default (1517678)\n\n  Developers:\n    API changes:\n    - removed $post parameters from module functions (delete_attributes(),\n      process_...(), display_html_...()). Use $_POST instead.\n    - process_...() functions: returned messages are no longer grouped\n      (e.g. return: array(array('INFO', 'headline', 'text'), array('INFO', 'headline2', 'text2')))\n\n\n10.08.2006 1.0.4\n   - added Russian translation\n   - Samba 3: added policies for domain objects\n   - inetLocalMailRecipient: print warning if local address is already in use\n\n\n05.07.2006 1.0.3\n   - fixed bugs:\n    -> Kolab: fixed problem with message about missing password\n    -> Unix groups: fixed auto GID\n    -> Unix users/groups: fixed silent unlocking of passwords\n    -> Unix users/groups: removed invalid password option\n    -> Shadow: account expiration date was incorrect in some time zones\n    -> User list: fixed problems when deleting users and translated GIDs are activated (1503367)\n\n\n24.05.2006 1.0.2\n   - security enhancements: session timeout, logging, host restrictions\n   - handle LDAP attribute aliases correctly\n   - fixed bugs:\n    -> PDF creation bug when GID translation is activated (1477111)\n    -> allow \"@\" in passwords (1477878)\n    -> Samba 2/3: fixed NT hashes\n    -> fixed handling of multi-value attributes (e.g. in inetLocalMailRecipient)\n\n\n12.04.2006 1.0.1\n   - LAM can now be installed with \"configure\" and \"make install\"\n   - added workaround for misspelled object classes (e.g. sambaSAMAccount by smbldap-tools)\n   - Unix: merged password hash settings for Unix users and groups\n   - Samba 3: added Windows group to profile options\n   - security: LAM checks the session id and client IP\n   - fixed bugs:\n    -> Samba 3: hash values were wrong in some rare cases (1440021)\n    -> Samba 3: re-added time zone selection for logon hours (1407761)\n    -> Unix: call of unknown function (1450464)\n\n\n01.03.2006 1.0.0\n   - new architecture with support for more account types\n   - new translations: Traditional Chinese, Dutch\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n    -> improved sorting of account lists\n    -> fixed language setting in default configuration profile\n    -> fixed PHP5 warnings (getdate() and mktime())\n    -> error messages in Samba domain module (1437425)\n    -> fixed expired passwords with shadowAccount module\n    -> added lamdaemon.pl compatibility and security patches by Tim Rice\n\n\n08.02.2006 1.0.rc2\n   - new translation: Dutch\n   - fixed bugs:\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n\n\n09.01.2006 1.0.rc1\n   - new architecture with support for more account types\n   - new translation: Traditional Chinese\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n\n\n14.12.2005 0.5.3\n   - accounts are now deleted with subentries\n   - big update for Italian translation\n   - inetOrgPerson: support jpegPhoto images\n   - less restrictive input checks\n   - fixed bugs:\n    -> fixed problems with case-insensitive DNs\n    -> file upload did not work when max_execution_time=0 (1367957)\n    -> posixGroup: fixed help entries\n\n\n16.11.2005 0.5.2\n   - New module for SSH public keys\n   - check file permissions on login page\n   - fixed bugs:\n    -> creation of home directories did not work\n    -> allow spaces in profile names (1333058)\n    -> fixed problem with magic_quotes_gpc in profile editor (1333069)\n    -> inetOrgPerson: deletion of postal address and fax number now works\n\n\n19.10.2005 0.5.1\n   - Samba 3: added support for account expiration\n   - fixed bugs:\n    -> automatic UID/GID assignment did not fully work\n    -> PDF: additional groups for Unix users\n    -> inetOrgPerson: fixed mobile number\n    -> Samba 2/3: passwords fixed for file uploads (1311561)\n    -> Samba 3: fixed logon hours (patch 1311915)\n    -> Samba 3: loading of domain setting from profile did not work\n    -> Quota: profile settings fixed\n    -> reduced memory usage\n\n\n28.09.2005 0.5.0\n   - Samba 2/3: added display name in account pages\n   - fixed bugs:\n    -> fixed error message when creating new accounts with shadowAccount\n    -> added missing help entries on main account page\n    -> Samba 2/3: fixed settings for password expiration, no password and deactivated account\n    -> changing of RDN caused problems in some cases\n\n\n08.09.2005 0.5.rc3\n   - INFO messages no longer prevent changing to subpages of a module\n   - fixed bugs:\n    -> buttons on account page are better sorted\n    -> account module: some problems solved when used for user accounts\n    -> nisMailAlias: fixed missing RDN possibility\n    -> fixed conflicts when accounts were built with other base modules\n    -> Samba 2/3: setting allowed workstations failed\n    -> magic_quotes_gpc = Off prevented editing of accounts\n    -> fixed help links on Samba and Unix pages\n\n\n18.08.2005 0.5.rc2\n   - allow user accounts based only on \"account\" module\n   - inetOrgPerson: allow setting a password if posixAccount is not active\n   - fixed bugs:\n    -> removed Blowfish encryption (bad performance)\n    -> Kolab now complains if no user password is set\n\n\n08.08.2005 0.5.rc1\n   - Kolab 2 support\n   - added manager and post office box for inetOrgPerson\n   - Samba 3: added support for logon hours\n   - Samba 3: added sambaSID as possible RDN attribute\n   - improved error handling in profile editor\n   - now quotas can be set on CSV upload\n   - new logo\n   - fixed bugs:\n    -> several fixes for PHP5\n    -> fixes for PDF editor and output\n    -> password changing in tree view did not work\n    -> fixed changing of group memberships for users\n\n\n28.07.2005 0.4.10\n  - PHP5 compatibility added\n\n\n30.06.2005 0.5.alpha2\n   - added documentation about schemas\n   - PDF now uses UTF-8 fonts\n   - added possibility to create plain inetOrgPerson accounts\n   - fixed bugs:\n    -> set DN suffix and RDN on profile loading\n    -> several fixes for PDF editor\n    -> creating Samba hosts now works\n\n\n11.05.2005 0.5.alpha1\n  - new modular architecture\n   -> possibility to create Unix-only accounts\n   -> plugins for more objectClasses planned\n   -> enhanced PDF output\n   -> enhanced file upload\n   -> enhanced editor for account profiles\n   -> dynamic configuration options (based on modules)\n  - all pages in UTF-8\n  - added developer documentation\n  - PHPDoc formatted comments\n  - new plugin for managing MAC addresses (RFE 926017)\n  - new plugin for managing NIS mail aliases (RFE 1050036)\n  - new plugin for managing mail routing with inetLocalMailRecipient (RFE 1092137)\n  - schema browser\n  - tree view\n\n\n09.03.2005 0.4.9\n  - fixed bugs:\n      fixed error messages when moving an user account\n      fixed problem with special group SIDs\n      lamdaemon.pl security fix\n\n\n26.01.2005 0.4.8\n  - allow \"%\" at the beginning of Samba home/profile path (1107998)\n  - fixed bugs:\n      fixed IE fix ;-)\n      no more warnings for profiles with no additional groups set\n\n\n19.12.2004 0.4.7\n  - added \"*.exe\" to Samba logon script regex (1081715)\n  - fixed bugs:\n      fixed doctype of main frame\n      removed syntax check for LDAP suffixes\n      fixed IE bug at login\n      fixed encoding in HTTP header\n      passwords with \"'\" are now handled correctly at login (1081460)\n      fixed Samba flags if multiple hosts were created\n      updated .htaccess files to be compatible with newer Apache versions\n\n\n26.05.2004 0.4.6\n  - fixed bugs:\n      password hashes were not disabled correctly\n      street was copied to postal code on modify (938502)\n      underscore was not allowed for host names (934445)\n      deleting postal address or facsimile number failed (948616)\n      TLS error handling (958497)\n      smaller fixes on personal settings page\n\n\n21.03.2004 0.4.5\n  - added French translation\n  - fixed bugs:\n      StatusMessages with additional variables did not work\n      Samba hosts had unnecessary objectClass shadowAccount (910084)\n      Samba host passwords were still wrong\n      LAM had problems with non-standard spelled object classes (907636)\n      Perl scripts did not work if Perl is not installed in /usr/bin/perl (913554)\n      problems when cn!=uid (915041)\n      home directories were not deleted by lamdaemon.pl (913552)\n\n\n29.02.2004 0.4.4 (stable)\n  - fixed bugs:\n      plain posix groups could not be used as Samba 3 primary group\n      if magic_quotes_gpc in php.ini is was set to \"Off\", several pages did not work\n      some smaller bugs in mass upload\n      Samba hash values for hosts were not correct\n      Unix passwords could be disabled but not re-enabled\n      fixed problem with eval() in status.inc (894433)\n\n\n08.02.2004 0.4.3\n  - new login layout\n  - added Hungarian and Japanese translations\n  - fixed bugs:\n      Samba passwords were sometimes empty for new users (892272)\n      links in list views may not work with web servers other than Apache\n\n\n21.01.2004 0.4.2\n  - added config wizard\n  - MHash is only needed for PHP < 4.3\n  - use Blowfish for encryption instead of MCrypt\n\n\n29.12.2003 0.4.1\n\n  - better error handling at login\n  - support spaces in DNs\n  - PDF text for users\n  - create missing OUs recursively\n  - fixed bugs:\n      SMD5 passwords were wrong\n      primaryGroupSID wrong if SID has no relation to Algorithmic RID Base\n      Samba 2 accounts could not be created\n\n\n29.10.2003 0.4 (Beta1)\n\n  - improved design\n  - improved documentation\n  - Fixed possible error which could delete entries if objectclass didn't fit\n  - Fixed many samba 3.0 related bugs, most related to SIDs\n  - edit group members directly\n  - support for several password hashes (CRYPT/SHA/SSHA/MD5/SMD5/PLAIN)\n  - PDF output for groups and hosts\n\n\n31.08.2003 0.3 (Alpha 3)\n\n  - Samba 3 support\n  - manage Samba 3 domains\n  - multiple configuration files\n  - PDF output\n  - better mass creation\n\n\n04.07.2003 0.2 (Alpha 2)\n\n  - support for multiple OUs + OU-Editor\n  - account creation via file upload\n  - profile editor\n  - experimental Samba 3 support\n  - fixed a lot of bugs\n\n\n23.05.2003 0.1 (Alpha 1)\n\n  Initial release\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2010 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Interface between modules and other parts of LAM.\n*\n* @package metaHTML\n* @author Roland Gruber\n*/\n\n/**\n * Returns the marker for required values.\n *\n * @return string HTML code for required marker\n */\nfunction htmlGetRequiredMarker(): string {\n\treturn '<span class=\"lam-required\" title=\"' . _('required') . '\">*</span>';\n}\n\n/**\n * Returns the marker for required values.\n *\n * @return htmlSpan HTML code for required marker\n */\nfunction htmlGetRequiredMarkerElement(): htmlSpan {\n\t$span = new htmlSpan(new htmlOutputText('*'), array('lam-required'));\n\t$span->setTitle(_('required'));\n\treturn $span;\n}\n\n/**\n * Represents a HTML element.\n * This is used to build HTML code by using objects.\n *\n * @package metaHTML\n */\nabstract class htmlElement {\n\n\t/** align to top */\n\tconst ALIGN_TOP = 0;\n\t/** align to left */\n\tconst ALIGN_LEFT = 1;\n\t/** align to right */\n\tconst ALIGN_RIGHT = 2;\n\t/** align to bottom */\n\tconst ALIGN_BOTTOM = 3;\n\t/** align to center */\n\tconst ALIGN_CENTER = 4;\n\n\t/** validation rule to allow only numbers ([0-9]+) */\n\tconst VALIDATE_NUMERIC = 'numeric';\n\t/** validation rule to allow positive/negative numbers ([-]?[0-9]+) */\n\tconst VALIDATE_NUMERIC_WITH_NEGATIVE = 'numericWithNegative';\n\n\t/** alignment when inside a table */\n\tpublic $alignment = null;\n\t/** colspan if inside a table */\n\tpublic $colspan = null;\n\t/** rowspan if inside a table */\n\tpublic $rowspan = null;\n\t/** CSS classes */\n\tprotected $cssClasses = array();\n\t/** table cell CSS classes */\n\tprotected $tableCellCssClasses = array();\n\t/** data attributes */\n\tprivate $dataAttributes = array();\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tabstract function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope);\n\n\t/**\n\t * Returns the HTML attributes for the alignment.\n\t *\n\t * @return String alignment HTML attributes (e.g. align=\"right\" valign=\"top\")\n\t */\n\tpublic function getAlignmentString() {\n\t\t$align = '';\n\t\tif ($this->alignment !== null) {\n\t\t\tswitch ($this->alignment) {\n\t\t\t\tcase htmlElement::ALIGN_BOTTOM:\n\t\t\t\t\t$align = 'valign=\"bottom\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_TOP:\n\t\t\t\t\t$align = 'valign=\"top\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_LEFT:\n\t\t\t\t\t$align = 'align=\"left\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_RIGHT:\n\t\t\t\t\t$align = 'align=\"right\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_CENTER:\n\t\t\t\t\t$align = 'align=\"center\"';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $align;\n\t}\n\n\t/**\n\t * Returns the HTML attribute for the colspan.\n\t *\n\t * @return String colspan HTML attribute (e.g. colspan=3)\n\t */\n\tpublic function getColspanString() {\n\t\tif ($this->colspan == null) {\n\t\t\treturn '';\n\t\t}\n\t\telse return 'colspan=\"' . $this->colspan . '\"';\n\t}\n\n\t/**\n\t * Returns the HTML attribute for the rowspan.\n\t *\n\t * @return String rowspan HTML attribute (e.g. rowspan=3)\n\t */\n\tpublic function getRowspanString() {\n\t\tif ($this->rowspan == null) {\n\t\t\treturn '';\n\t\t}\n\t\telse return 'rowspan=\"' . $this->rowspan . '\"';\n\t}\n\n\t/**\n\t * Returns the CSS classes of this element.\n\t *\n\t * @return array $classes CSS class names\n\t */\n\tpublic function getCSSClasses() {\n\t\treturn $this->cssClasses;\n\t}\n\n\t/**\n\t * Adds CSS classes to this element.\n\t *\n\t * @param array $classes CSS class names\n\t */\n\tpublic function setCSSClasses($classes) {\n\t\t$this->cssClasses = $classes;\n\t}\n\n\t/**\n\t * Adds CSS classes to the surrounding table cell for this element.\n\t *\n\t * @param array $classes CSS class names\n\t */\n\tpublic function setTableCellCSSClasses($classes) {\n\t\t$this->tableCellCssClasses = $classes;\n\t}\n\n\t/**\n\t * Returns the CSS classes of the surrounding table cell for this element.\n\t *\n\t * @return array CSS classes\n\t */\n\tpublic function getTableCellCSSClasses() {\n\t\treturn $this->tableCellCssClasses;\n\t}\n\n\t/**\n\t * Adds a data attribute.\n\t *\n\t * @param string $key attribute name (without \"data-\")\n\t * @param string $value attribute value\n\t */\n\tpublic function addDataAttribute($key, $value) {\n\t\t$this->dataAttributes[$key] = $value;\n\t}\n\n\t/**\n\t * Returns the data attributes as rendered string.\n\t *\n\t * @return string data attributes\n\t */\n\tprotected function getDataAttributesAsString() {\n\t\t$result = '';\n\t\tforeach ($this->dataAttributes as $key => $value) {\n\t\t\t$result .= ' data-' . htmlspecialchars($key) . '=\"' . htmlspecialchars($value) . '\"';\n\t\t}\n\t\treturn $result;\n\t}\n\n}\n\n/**\n * Structures elements using a table.\n *\n * @package metaHTML\n */\nclass htmlTable extends htmlElement {\n\n\t/** table footer */\n\tconst FOOTER = \"</table>\\n\";\n\t/** new line */\n\tconst NEWLINE = \"</tr><tr>\\n\";\n\n\t/** list of subelements */\n\tprivate $elements = array();\n\t/** specifies if currently a row is open */\n\tprivate $rowOpen = false;\n\t/** table width */\n\tprivate $width = null;\n\t/** HTML ID */\n\tprivate $id = null;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $width table width (e.g. 100%)\n\t * @see htmlElement\n\t */\n\tfunction __construct($width = null, $id = null) {\n\t\t$this->width = $width;\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * Adds an element to the table. The element may be a htmlElement object or a simple String.\n\t *\n\t * @param mixed $element htmlElement object or a simple String\n\t * @param boolean $newLine adds a new line after the element (optional, default false)\n\t * @param boolean $isTableHeadElement specifies if this is a head or body element (default: body)\n\t */\n\tpublic function addElement($element, $newLine = false, $isTableHeadElement = false) {\n\t\t// add row element\n\t\tif ($element instanceof htmlTableRow) {\n\t\t\t// check if a row needs to be closed\n\t\t\tif ($this->rowOpen) {\n\t\t\t\t$this->elements[] = \"</tr>\\n\";\n\t\t\t\t$this->rowOpen = false;\n\t\t\t}\n\t\t\t$this->elements[] = $element;\n\t\t}\n\t\t// add cell element\n\t\telseif ($element instanceof htmlElement) {\n\t\t\t// check if a row needs to be opened\n\t\t\tif (!$this->rowOpen) {\n\t\t\t\t$this->elements[] = \"<tr>\\n\";\n\t\t\t\t$this->rowOpen = true;\n\t\t\t}\n\t\t\t// check if alignment option was given\n\t\t\t$align = $element->getAlignmentString();\n\t\t\t$colspan = $element->getColspanString();\n\t\t\t$rowspan = $element->getRowspanString();\n\t\t\t$css = '';\n\t\t\tif (sizeof($element->getTableCellCSSClasses()) > 0) {\n\t\t\t\t$css = 'class=\"' . implode(' ', $element->getTableCellCSSClasses()) . '\"';\n\t\t\t}\n\t\t\t$tagName = 'td';\n\t\t\tif ($isTableHeadElement) {\n\t\t\t\t$tagName = 'th';\n\t\t\t}\n\t\t\t$this->elements[] = \"<$tagName $align $colspan $rowspan $css>\\n\";\n\t\t\t$this->elements[] = $element;\n\t\t\t$this->elements[] = \"</$tagName>\\n\";\n\t\t\tif ($newLine) {\n\t\t\t\t$this->addNewLine();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('ERROR', 'Invalid element', print_r($element, true));\n\t\t}\n\t}\n\n\t/**\n\t * Adds another line to the table.\n\t */\n\tpublic function addNewLine() {\n\t\tif (!$this->rowOpen) {\n\t\t\t$this->elements[] = \"<tr>\\n\";\n\t\t}\n\t\telse {\n\t\t\t$this->elements[] = htmlTable::NEWLINE;\n\t\t}\n\t}\n\n\t/**\n\t * Adds an htmlSpacer with the given width.\n\t *\n\t * @param String $width width (e.g. 10px)\n\t */\n\tpublic function addSpace($width) {\n\t\t$this->addElement(new htmlSpacer($width, null));\n\t}\n\n\t/**\n\t * Adds an htmlSpacer with the given height and ends the row.\n\t *\n\t * @param String $height height (e.g. 10px)\n\t */\n\tpublic function addVerticalSpace($height) {\n\t\t$this->addElement(new htmlSpacer(null, $height), true);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$width = '';\n\t\tif ($this->width != null) {\n\t\t\t$width = ' width=\"' . htmlspecialchars($this->width) . '\"';\n\t\t}\n\t\t$id = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$id = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo \"<table\" . $width . $id . $classAttr . \">\\n\";\n\t\t// print all contained elements\n\t\tfor ($i = 0; $i < sizeof($this->elements); $i++) {\n\t\t\t// print htmlElement objects\n\t\t\tif ($this->elements[$i] instanceof htmlElement) {\n\t\t\t\t$fields = $this->elements[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t\t$return = array_merge($return, $fields);\n\t\t\t}\n\t\t\t// print simple Strings\n\t\t\telse {\n\t\t\t\tif ($i != (sizeof($this->elements) - 1) || !($this->elements[$i] == htmlTable::NEWLINE) ) {\n\t\t\t\t\techo $this->elements[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->rowOpen) {\n\t\t\techo \"</tr>\\n\";\n\t\t}\n\t\techo htmlTable::FOOTER;\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Merges the content of another htmlTable object into this table.\n\t *\n\t * @param $table table to get elements\n\t */\n\tpublic function mergeTableElements($table) {\n\t\tif (is_null($table) || !($table instanceof htmlTable)) {\n\t\t\treturn;\n\t\t}\n\t\t// remove obsolete new lines at the end\n\t\tif ($table->elements[sizeof($table->elements) - 1] == htmlTable::NEWLINE) {\n\t\t\tunset($table->elements[sizeof($table->elements) - 1]);\n\t\t}\n\t\t// close last row of other table if needed\n\t\tif ($table->rowOpen) {\n\t\t\t$table->elements[] = \"</tr>\\n\";\n\t\t}\n\t\t// close last own row if needed\n\t\tif ($this->rowOpen) {\n\t\t\tif ($this->elements[sizeof($this->elements) - 1] == htmlTable::NEWLINE) {\n\t\t\t\tunset($this->elements[sizeof($this->elements) - 1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->elements[] = \"</tr>\\n\";\n\t\t\t}\n\t\t\t$this->rowOpen = false;\n\t\t}\n\t\t$this->elements = array_merge($this->elements, $table->elements);\n\t}\n\n}\n\n/**\n * A row inside a htmlTable.\n *\n * @see htmlTable\n * @package metaHTML\n */\nclass htmlTableRow extends htmlElement {\n\n\t/** table cells */\n\tprivate $cells;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param array $cells list of htmlElements\n\t * @see htmlElement\n\t */\n\tpublic function __construct($cells) {\n\t\t$this->cells = $cells;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$types = array();\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo \"<tr\" . $classAttr . \">\\n\";\n\t\t\tfor ($i = 0; $i < sizeof($this->cells); $i++) {\n\t\t\t\t// check if alignment option was given\n\t\t\t\t$align = $this->cells[$i]->getAlignmentString();\n\t\t\t\t$colspan = $this->cells[$i]->getColspanString();\n\t\t\t\t$rowspan = $this->cells[$i]->getRowspanString();\n\t\t\t\techo \"<td $align $colspan $rowspan>\\n\";\n\t\t\t\t$types = array_merge($types, $this->cells[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t\t\techo \"</td>\\n\";\n\t\t\t}\n\t\techo \"</tr>\";\n\t\treturn $types;\n\t}\n\n}\n\n/**\n * A standard input field.\n *\n * @package metaHTML\n */\nclass htmlInputField extends htmlElement {\n\n\t/** unique field name */\n\tprotected $fieldName;\n\t/** field value */\n\tprotected $fieldValue = '';\n\t/** field size (default 30) */\n\tprotected $fieldSize = 30;\n\t/** field max length (default 1000) */\n\tprotected $fieldMaxLength = 1000;\n\t/** on keypress event */\n\tprotected $onKeyPress = null;\n\t/** on keyupp event */\n\tprotected $onKeyUp = null;\n\t/** oninput event */\n\tprotected $onInput = null;\n\t/** password field */\n\tprotected $isPassword = false;\n\t/** check password strength */\n\tprotected $checkPasswordStrength = false;\n\t/** disables browser autofilling of password fields */\n\tprotected $disableAutoFill = false;\n\t/** enabled or disabled */\n\tprotected $isEnabled = true;\n\t/** indicates that the value should be saved in obfuscated form */\n\tprotected $obfuscate = false;\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprotected $transient = false;\n\t/** required field */\n\tprotected $required = false;\n\t/** validation rule */\n\tprotected $validationRule = null;\n\t/** enable autocomplete */\n\tprotected $autocomplete = false;\n\t/** autocompletion suggestions */\n\tprotected $autocompleteValues = array();\n\t/** autocomplete start at this input length */\n\tprotected $autocompleteMinLength = 1;\n\t/** show calendar */\n\tprotected $showCalendar = false;\n\t/** show DN selection */\n\tprotected $showDnSelection = false;\n\t/** calendar format */\n\tprotected $calendarFormat = '';\n\t/** calendar with time */\n\tprotected $calendarFormatWithTime = false;\n\t/** calendar with seconds */\n\tprotected $calendarFormatWithSeconds = false;\n\t/** title attribute */\n\tprotected $title = null;\n\t/** field ID that needs to have same value (e.g. password field) */\n\tprotected $sameValueFieldID = null;\n\t/** marks the input field as auto trimmed (remove spaces at start/end) */\n\tprotected $autoTrim = true;\n\t/** minimum value */\n\tprotected $minValue = null;\n\t/** maximum value */\n\tprotected $maxValue = null;\n\t/** id */\n\tprotected $id = null;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String $fieldSize input field length (default 30)\n\t */\n\tfunction __construct($fieldName, $fieldValue = null, $fieldSize = null) {\n\t\tif (isObfuscatedText($fieldValue)) {\n\t\t\t$fieldValue = deobfuscateText($fieldValue);\n\t\t}\n\t\t$this->fieldName = htmlspecialchars($fieldName);\n\t\tif ($fieldValue !== null) {\n\t\t\t$this->fieldValue = htmlspecialchars($fieldValue);\n\t\t}\n\t\tif ($fieldSize !== null) {\n\t\t\t$this->fieldSize = $fieldSize;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif ($this->isAutoTrim()) {\n\t\t\t$this->cssClasses[] = 'lam-autotrim';\n\t\t}\n\t\tif (isset($values[$this->fieldName])) {\n\t\t\tif (isObfuscatedText($values[$this->fieldName][0])) {\n\t\t\t\t$this->fieldValue = deobfuscateText($values[$this->fieldName][0]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->fieldValue = $values[$this->fieldName][0];\n\t\t\t}\n\t\t}\n\t\t$validators = array();\n\t\tif ($this->required) {\n\t\t\t$validators[] = 'required';\n\t\t}\n\t\tif ($this->validationRule != null) {\n\t\t\t$validators[] = 'custom[' . $this->validationRule . ']';\n\t\t}\n\t\t$min = '';\n\t\tif ($this->minValue !== null) {\n\t\t\t$min = ' min=\"' . $this->minValue . '\"';\n\t\t}\n\t\t$max = '';\n\t\tif ($this->maxValue !== null) {\n\t\t\t$max = ' max=\"' . $this->maxValue . '\"';\n\t\t}\n\t\t// print input field\n\t\tif ($this->autocomplete) {\n\t\t\t$this->cssClasses[] = 'lam-autocomplete';\n\t\t}\n\t\tif (sizeof($validators) > 0) {\n\t\t\t$class = ' class=\"validate[' . implode(',', $validators) . '] ' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\telse {\n\t\t\t$class = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$name = ' name=\"' . $this->fieldName . '\"';\n\t\t$idValue = ($this->id !== null) ? $this->id : $this->fieldName;\n\t\t$id = ' id=\"' . $idValue . '\"';\n\t\t$value = '';\n\t\tif ($this->fieldValue != null) {\n\t\t\t$value = ' value=\"' . $this->fieldValue . '\"';\n\t\t}\n\t\t$maxLength = '';\n\t\tif ($this->fieldMaxLength != null) {\n\t\t\t$maxLength = ' maxlength=\"' . $this->fieldMaxLength . '\"';\n\t\t}\n\t\t$size = '';\n\t\tif ($this->fieldSize != null) {\n\t\t\t$size = ' size=\"' . $this->fieldSize . '\"';\n\t\t}\n\t\t$fieldTabIndex = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$inputType = 'text';\n\t\tif ($this->isPassword) {\n\t\t\t$inputType = 'password';\n\t\t}\n\t\telseif (($this->minValue !== null) || ($this->maxValue !== null)) {\n\t\t\t$inputType = 'number';\n\t\t}\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$onKeyPress = '';\n\t\tif ($this->onKeyPress != null) {\n\t\t\t$onKeyPress = ' onkeypress=\"' . $this->onKeyPress . '\"';\n\t\t}\n\t\t$onKeyUp = '';\n\t\tif ($this->onKeyUp != null) {\n\t\t\t$onKeyUp = ' onkeyup=\"' . $this->onKeyUp . '\"';\n\t\t}\n\t\t$onInput = '';\n\t\tif ($this->onInput != null) {\n\t\t\t$onInput = ' oninput=\"' . $this->onInput . '\"';\n\t\t}\n\t\t$title = '';\n\t\tif (!empty($this->title)) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$autoCompleteVal = '';\n\t\tif ($this->disableAutoFill) {\n\t\t\t$autoCompleteVal = ' autocomplete=\"new-password\"';\n\t\t}\n\t\t$autoCompleteData = '';\n\t\tif ($this->autocomplete) {\n\t\t\t$autoCompleteData = ' data-autocomplete=\"' . base64_encode(json_encode($this->autocompleteValues)) . '\"';\n\t\t\t$autoCompleteData .= ' data-autocomplete-minLength=\"' . $this->autocompleteMinLength . '\"';\n\t\t}\n\t\tif ($this->showDnSelection) {\n\t\t\techo '<span class=\"nowrap\">';\n\t\t}\n\t\techo '<input type=\"' . $inputType . '\"' . $class . $name . $id . $value . $maxLength\n\t\t\t. $min . $max . $size . $fieldTabIndex . $onKeyPress . $onKeyUp . $onInput . $title . $disabled\n\t\t\t. $this->getDataAttributesAsString() . $autoCompleteVal . $autoCompleteData . '>';\n\t\tif ($this->showDnSelection) {\n\t\t\techo '<img class=\"align-middle\" src=\"../../graphics/search-color.svg\"\n\t\t\t\t\t   width=\"16\" height=\"16\" title=\"' . _('Choose entry') . '\"\n\t\t\t\t\t   onclick=\"window.lam.html.showDnSelection(\\'' . $this->fieldName . '\\', \\'' . _('Choose entry') . '\\'\n\t\t\t\t\t   \t\t\t, \\'' . _('Ok') . '\\', \\'' . _('Cancel') . '\\', \\'' . getSecurityTokenName() . '\\'\n\t\t\t\t\t   \t\t\t, \\'' . getSecurityTokenValue() . '\\');\">';\n\t\t\techo '</span>';\n\t\t}\n\t\t// calendar\n\t\tif ($this->showCalendar) {\n\t\t\t$locale = 'en';\n\t\t\t$sessionLanguage = $_SESSION['language'];\n\t\t\t$sessionLanguage = str_replace('.utf8', '', $sessionLanguage);\n\t\t\tif ($sessionLanguage === 'zh_TW') {\n\t\t\t\t$locale = 'zh_tw';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$sessionLanguageParts = explode('_', $sessionLanguage);\n\t\t\t\t$locale = $sessionLanguageParts[0];\n\t\t\t}\n\t\t\t$calendarWithTime = $this->calendarFormatWithTime ? \"enableTime: true, \" : \"\";\n\t\t\t$calendarWithSeconds = $this->calendarFormatWithSeconds ? \"enableSeconds: true, \" : \"\";\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(function() {\n\t\t\t\t\t$(\"#' . $this->fieldName . '\").flatpickr({\n\t\t\t\t\t\tdateFormat: \"' . $this->calendarFormat . '\",\n\t\t\t\t\t\thourIncrement: 1,\n\t\t\t\t\t\tminuteIncrement: 1,\n\t\t\t\t\t\ttime_24hr: true,\n\t\t\t\t\t\t' . $calendarWithTime . $calendarWithSeconds . '\n\t\t\t\t\t\tlocale: \"' . $locale . '\"\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\t// check value against reference field\n\t\tif ($this->sameValueFieldID != null) {\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tcheckFieldsHaveSameValues(\"' . $this->fieldName . '\", \"' . $this->sameValueFieldID . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\tif ($this->checkPasswordStrength) {\n\t\t\t$query = '?admin=1';\n\t\t\tif (isSelfService()) {\n\t\t\t\t$query = '?selfservice=1';\n\t\t\t}\n\t\t\t$ajaxPath = \"../templates/misc/ajax.php\";\n\t\t\tif (is_file(\"../../templates/misc/ajax.php\")) {\n\t\t\t\t$ajaxPath = \"../../templates/misc/ajax.php\";\n\t\t\t}\n\t\t\telseif (is_file(\"../../../templates/misc/ajax.php\")) {\n\t\t\t\t$ajaxPath = \"../../../templates/misc/ajax.php\";\n\t\t\t}\n\t\t\t$ajaxPath .=  $query;\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tcheckPasswordStrength(\"' . $this->fieldName . '\", \"' . $ajaxPath . '\", \"' . getSecurityTokenName() . '\", \"' . getSecurityTokenValue() . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->obfuscate) {\n\t\t\treturn array($this->fieldName => 'text_obfuscated');\n\t\t}\n\t\telse {\n\t\t\treturn array($this->fieldName => 'text');\n\t\t}\n\t}\n\n\t/**\n\t * Sets the maximum field length.\n\t *\n\t * @param int $fieldMaxLength length\n\t */\n\tpublic function setFieldMaxLength($fieldMaxLength) {\n\t\t$this->fieldMaxLength = $fieldMaxLength;\n\t}\n\n\t/**\n\t * Sets the field size (default is 30).\n\t *\n\t * @param int $fieldSize size\n\t */\n\tpublic function setFieldSize($fieldSize) {\n\t\t$this->fieldSize = $fieldSize;\n\t}\n\n\t/**\n\t * Specifies if this is a password field.\n\t *\n\t * @param boolean $isPassword password field\n\t * @param boolean $checkStrength check if matches password policy (default: false)\n\t * @param boolean $disableAutoFill prevent autofilling by browser\n\t */\n\tpublic function setIsPassword($isPassword, $checkStrength = false, $disableAutoFill = false) {\n\t\t$this->isPassword = $isPassword;\n\t\t$this->checkPasswordStrength = $checkStrength;\n\t\t$this->disableAutoFill = $disableAutoFill;\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies if the value should be saved in obfuscated form (e.g. self service profile).\n\t *\n\t * @param boolean $obfuscate obfuscate value\n\t */\n\tpublic function setObfuscate($obfuscate) {\n\t\t$this->obfuscate = $obfuscate;\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * Specifies if the input field is required.\n\t *\n\t * @param boolean $required required\n\t */\n\tpublic function setRequired($required) {\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Specifies the validation rule (e.g. htmlElement::VALIDATE_NUMERIC) for this field.\n\t * This rule is checked on client side when the input field looses focus.\n\t *\n\t * @param boolean $rule rule name\n\t */\n\tpublic function setValidationRule($rule) {\n\t\t$this->validationRule = $rule;\n\t}\n\n\t/**\n\t * Sets the field as number field with minimum and maximum values.\n\t *\n\t * @param integer $minimum minimum\n\t * @param integer $maximum maximum\n\t */\n\tpublic function setMinimumAndMaximumNumber($minimum, $maximum = null) {\n\t\t$this->minValue = $minimum;\n\t\t$this->maxValue = $maximum;\n\t}\n\n\t/**\n\t * Enables autocompletion for this input field.\n\t *\n\t * @param array $values list of values to suggest\n\t * @param int $minLength autocompletion starts after this number of characters entered (default 1; 0 means immediate start)\n\t */\n\tpublic function enableAutocompletion($values, $minLength = 1) {\n\t\t$this->autocomplete = true;\n\t\t$this->autocompleteValues = $values;\n\t\t$this->autocompleteMinLength = $minLength;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onKeyPress event.\n\t *\n\t * @param String $onKeyPress JavaScript code\n\t */\n\tpublic function setOnKeyPress($onKeyPress) {\n\t\t$this->onKeyPress = $onKeyPress;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onKeyUp event.\n\t *\n\t * @param String $onKeyUp JavaScript code\n\t */\n\tpublic function setOnKeyUp($onKeyUp) {\n\t\t$this->onKeyUp = $onKeyUp;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onInput event.\n\t *\n\t * @param string $onInput JavaScript code\n\t */\n\tpublic function setOnInput(string $onInput): void {\n\t\t$this->onInput = $onInput;\n\t}\n\n\t/**\n\t * Shows a calendar when the field is selected.\n\t *\n\t * @param String $format calendar format (e.g. Y-m-d)\n\t * @param bool $withTime activate time selection\n\t * @param bool $withSeconds show seconds\n\t */\n\tpublic function showCalendar($format, $withTime = false, $withSeconds = false) {\n\t\t$this->showCalendar = true;\n\t\t$this->calendarFormatWithTime = $withTime;\n\t\t$this->calendarFormatWithSeconds = $withSeconds;\n\t\t$format = str_replace('yy', 'Y', $format);\n\t\t$format = str_replace('dd', 'd', $format);\n\t\t$format = str_replace('mm', 'm', $format);\n\t\t$this->calendarFormat = $format;\n\t}\n\n\t/**\n\t * Shows a DN selection next to input field.\n\t */\n\tpublic function showDnSelection() {\n\t\t$this->showDnSelection = true;\n\t}\n\n\t/**\n\t * Sets the title for the input field.\n\t *\n\t * @param String $title title value\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n\t/**\n\t * Specifies the ID of a second field that must have the same value as this field.\n\t * This field is marked red if different or green if equal.\n\t *\n\t * @param String $sameValueFieldID ID of reference field\n\t */\n\tpublic function setSameValueFieldID($sameValueFieldID) {\n\t\t$this->sameValueFieldID = $sameValueFieldID;\n\t}\n\n\t/**\n\t * Turns this field into a live filter for a select box.\n\t * Cannot be used together with setOnKeyUp().\n\t *\n\t * @param String $name select box name\n\t */\n\tpublic function filterSelectBox($name) {\n\t\t$this->setOnKeyUp('window.lam.filterSelect.activate(\\'' . $this->fieldName . '\\', \\'' . $name . '\\', event);');\n\t}\n\n\t/**\n\t * Returns if the field content should be auto-trimmed (remove spaces at start/end).\n\t *\n\t * @return boolean auto-trim input\n\t */\n\tprotected function isAutoTrim() {\n\t\treturn $this->autoTrim && !$this->isPassword;\n\t}\n\n\tpublic function disableAutoTrim() {\n\t\t$this->autoTrim = false;\n\t}\n\n\t/**\n\t * Sets the element ID.\n\t *\n\t * @param string $id id\n\t */\n\tpublic function setId(string $id) {\n\t\t$this->id = $id;\n\t}\n\n}\n\n/**\n * An extended input field that combines label, input field and help.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputField extends htmlInputField {\n\n\t/** Descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $label descriptive label\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String $helpID help ID (optional)\n\t * @param boolean $required input required\n\t */\n\tfunction __construct($label, $fieldName, $fieldValue = null, $helpID = null, $required = false) {\n\t\tparent::__construct($fieldName, $fieldValue);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t// print label text\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\tif ($this->required) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t// print input field\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Renders a help link.\n *\n * @package metaHTML\n */\nclass htmlHelpLink extends htmlElement {\n\n\t/** help ID */\n\tprivate $helpID;\n\t/** module name if it should be forced */\n\tprivate $module;\n\t/** account type if it should be forced */\n\tprivate $scope;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $helpID help ID\n\t * @param String $module module name (optional, only if value from generateHTML() should be overwritten)\n\t * @param String $scope account type (e.g. user) (optional, only if value from generateHTML() should be overwritten)\n\t */\n\tfunction __construct($helpID, $module = null, $scope = null) {\n\t\t$this->helpID = $helpID;\n\t\t$this->module = $module;\n\t\t$this->scope = $scope;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t// overwrite module and scope if needed\n\t\tif ($this->module != null) {\n\t\t\t$module = $this->module;\n\t\t}\n\t\tif ($this->scope != null) {\n\t\t\t$scope = $this->scope;\n\t\t}\n\t\t// print link\n\t\t$helpEntry = getHelp($module, $this->helpID, $scope);\n\t\tif (empty($helpEntry)) {\n\t\t\treturn array();\n\t\t}\n\t\tprintHelpLink($helpEntry, $this->helpID, $module, $scope, $this->cssClasses);\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Simple button.\n *\n * @package metaHTML\n */\nclass htmlButton extends htmlElement {\n\n\t/** button name */\n\tprotected $name;\n\t/** button text or image */\n\tprotected $value;\n\t/** image button or text button */\n\tprotected $isImageButton;\n\t/** title */\n\tprivate $title = null;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** icon class (CSS) for buttons with icon + text */\n\tprivate $iconClass = null;\n\t/** onclick event */\n\tprivate $onClick = null;\n\t/** button type (default: \"submit\" if no onClick and \"button\" with onClick) */\n\tprivate $type = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name button name\n\t * @param String $value button text or image (16x16px, relative to graphics folder)\n\t * @param String $isImageButton image or text button (default text)\n\t */\n\tfunction __construct($name, $value, $isImageButton = false) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t\t$this->isImageButton = $isImageButton;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($restricted) {\n\t\t\t// no buttons in restricted mode\n\t\t\tlogNewMessage(LOG_ERR, 'Meta HTML: Requested button in restricted mode.');\n\t\t\treturn array();\n\t\t}\n\t\t$fieldTabIndex = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$style = '';\n\t\t$classList = $this->cssClasses;\n\t\t$class = '';\n\t\t$title = '';\n\t\t$name = ' name=\"' . $this->name . '\"';\n\t\t// image button\n\t\tif ($this->isImageButton) {\n\t\t\t$classList[] = 'smallImageButton';\n\t\t\t$classList[] = 'align-middle';\n\t\t\t$style = ' style=\"background-image: url(../../graphics/' . $this->value . ');\"';\n\t\t}\n\t\t// text button\n\t\telseif ($this->iconClass == null) {\n\t\t\t$classList[] = 'smallPadding';\n\t\t}\n\t\t// button with text and icon\n\t\telse {\n\t\t\t$classList[] = 'margin5';\n\t\t}\n\t\tif (sizeof($classList) > 0) {\n\t\t\t$class = ' class=\"' . implode(' ', $classList) . '\"';\n\t\t}\n\t\tif ($this->title != null) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\tif ($this->type == null) {\n\t\t\t$type = ' type=\"submit\"';\n\t\t}\n\t\telse {\n\t\t\t$type = ' type=\"' . $this->type . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\tif ($this->type == null) {\n\t\t\t\t$type = ' type=\"button\"';\n\t\t\t}\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\t$id = ' id=\"btn_' . preg_replace('/[^a-zA-Z0-9_-]/', '', $this->name) . '\"';\n\t\tif ($this->isImageButton) {\n\t\t\techo '<input type=\"submit\" ' . $id . ' value=\" \"' . $name . $onClick . $fieldTabIndex . $style . $class . $title . $disabled . $this->getDataAttributesAsString() . '>';\n\t\t}\n\t\telse {\n\t\t\techo '<button' . $id . $name . $fieldTabIndex . $type . $onClick . $style . $class . $title . $disabled . $this->getDataAttributesAsString() . '>' . $this->value . '</button>';\n\t\t\t// text buttons get JQuery style\n\t\t\tif ($this->iconClass != null) {\n\t\t\t\t$icon = '{ icons: { primary: \\'' . $this->iconClass . '\\' } }';\n\t\t\t\techo '<script type=\"text/javascript\">';\n\t\t\t\techo \"jQuery('#btn_\" . $this->name . \"').button(\" . $icon . \");\";\n\t\t\t\techo '</script>';\n\t\t\t}\n\t\t}\n\t\treturn array($this->name => 'submit');\n\t}\n\n\t/**\n\t * Sets the button title (tooltip).\n\t *\n\t * @param String $title title\n\t */\n\tpublic function setTitle($title) {\n\t\tif ($title !== null) {\n\t\t\t$this->title = htmlspecialchars($title);\n\t\t}\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Sets an additional icon for a text button.\n\t * The icon class is a CSS class that specifies the icon image (e.g. \"deleteButton\" in layout.css).\n\t *\n\t * @param String $iconClass icon class\n\t */\n\tpublic function setIconClass($iconClass) {\n\t\t$this->iconClass = htmlspecialchars($iconClass);\n\t}\n\n\t/**\n\t * Sets the onclick event code.\n\t * This makes this button a simple button that does not submit a form.\n\t *\n\t * @param String $onClick JS code\n\t */\n\tpublic function setOnClick($onClick) {\n\t\t$this->onClick = $onClick;\n\t}\n\n\t/**\n\t * Allows to override the default button type (\"submit\" if no onClick and \"button\" with onClick).\n\t */\n\tpublic function setType($type) {\n\t\t$this->type = $type;\n\t}\n\n}\n\n/**\n * Prints a button for the account pages.\n *\n * @package metaHTML\n */\nclass htmlAccountPageButton extends htmlButton {\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $targetModule module name which renders next page\n\t * @param String $targetPage name of next page\n\t * @param String $identifier identifier for button\n\t * @param String $value button text or image (16x16px, relative to graphics folder)\n\t * @param String $isImageButton image or text button (default text)\n\t * @param String $title title to show\n\t */\n\tfunction __construct($targetModule, $targetPage, $identifier, $value, $isImageButton = false, $title = null) {\n\t\t$this->name = htmlspecialchars('form_subpage_' . $targetModule . '_' . $targetPage . '_' . $identifier);\n\t\t$this->value = $value;\n\t\t$this->isImageButton = $isImageButton;\n\t\tif ($title != null) {\n\t\t\t$this->setTitle($title);\n\t\t}\n\t}\n\n}\n\n/**\n * Represents a select box.\n *\n * @package metaHTML\n */\nclass htmlSelect extends htmlElement {\n\n\t/** name of select field */\n\tprivate $name;\n\t/** size */\n\tprivate $size;\n\t/** allows multi-selection */\n\tprivate $multiSelect = false;\n\t/** elements */\n\tprivate $elements;\n\t/** selected elements */\n\tprivate $selectedElements = array();\n\t/** descriptive elements */\n\tprivate $hasDescriptiveElements = false;\n\t/** contains optgroups */\n\tprivate $containsOptgroups = false;\n\t/** sorting enabled */\n\tprivate $sortElements = true;\n\t/** right to left text direction */\n\tprivate $rightToLeftTextDirection = false;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** width of input element */\n\tprivate $width = '';\n\t/** transform select boxes with one element to text */\n\tprivate $transformSingleSelect = true;\n\t/** onchange event */\n\tprivate $onchangeEvent = null;\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprivate $transient = false;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\t/** dynamic scrolling */\n\tprivate $dynamicScrolling = false;\n\t/** CSS classes for values */\n\tprivate $optionCssClasses = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * <br>Examples:\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('value1', 'value2'), array('value1'));\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('label1' => 'value1', 'label2' => 'value2'), array('value1'));\n\t * <br>$select->setHasDescriptiveElements(true);\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('optgroupLabel' => array('value1', 'value2')), array('value1'));\n\t * <br>$select->setHasDescriptiveElements(true);\n\t * <br>$select->setContainsOptgroups(true);\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value) or array(value1, value2) or array('optgroup' => array(...))\n\t * @param array $selectedElements list of selected elements (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements = array(), $size = 1) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->elements = $elements;\n\t\tif ($selectedElements != null) {\n\t\t\t$this->selectedElements = $selectedElements;\n\t\t}\n\t\t$this->size = htmlspecialchars($size);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif (isset($values[$this->name])) {\n\t\t\t$this->selectedElements = $values[$this->name];\n\t\t}\n\t\t$multi = '';\n\t\t$name = ' name=\"' . $this->name . '\" id=\"' . $this->name . '\"';\n\t\tif ($this->multiSelect) {\n\t\t\t$multi = ' multiple';\n\t\t\t$name = ' name=\"' . $this->name . '[]\" id=\"' . $this->name . '\"';\n\t\t}\n\t\t$size = ' size=\"' . $this->size . '\"';\n\t\t$class = '';\n\t\t$classList = $this->cssClasses;\n\t\tif ($this->rightToLeftTextDirection) {\n\t\t\t$classList[] = 'rightToLeftText';\n\t\t}\n\t\t$class = ' class=\"' . implode(' ', $classList) . '\"';\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$style = '';\n\t\tif ($this->width != '') {\n\t\t\t$style = ' style=\"width: ' . $this->width . '\"';\n\t\t}\n\t\t$onchange = '';\n\t\tif ($this->onchangeEvent != null) {\n\t\t\t$onchange = $this->onchangeEvent;\n\t\t}\n\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t$this->printCodeForShowHideTableRows($onchange);\n\t\t}\n\t\tif ($onchange != '') {\n\t\t\t$onchange = ' onchange=\"' . $onchange . '\"';\n\t\t}\n\t\t// hide select boxes that contain less than 2 elements\n\t\tif ((sizeof($this->elements) < 2) && !$this->multiSelect && !$this->containsOptgroups && $this->transformSingleSelect) {\n\t\t\techo '<div class=\"hidden\">';\n\t\t}\n\t\t// print select box\n\t\techo '<select' . $this->getDataAttributesAsString() . $class . $style\n\t\t\t\t. $name . $size . $multi . $disabled . $onchange\n\t\t\t\t. ' tabindex=\"' . $tabindex . \"\\\">\\n\";\n\t\t$tabindex++;\n\t\tif ($this->containsOptgroups) {\n\t\t\tforeach ($this->elements as $label => $elements) {\n\t\t\t\tif (sizeof($elements) > 0) {\n\t\t\t\t\techo '<optgroup label=\"' . $label . '\">';\n\t\t\t\t\t$this->printOptionsHTML($elements);\n\t\t\t\t\techo '</optgroup>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$this->printOptionsHTML($this->elements);\n\t\t}\n\t\techo \"</select>\\n\";\n\t\t// if select box has only one element then show it as text\n\t\tif ((sizeof($this->elements) < 2) && !$this->multiSelect && !$this->containsOptgroups && $this->transformSingleSelect) {\n\t\t\techo '</div>';\n\t\t\tif (sizeof($this->elements) == 1) {\n\t\t\t\techo '&nbsp;';\n\t\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\t\t$keys = array_keys($this->elements);\n\t\t\t\t\techo $keys[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\techo $this->elements[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->multiSelect) {\n\t\t\treturn array($this->name => 'multiselect');\n\t\t}\n\t\telse {\n\t\t\treturn array($this->name => 'select');\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code of the option tags.\n\t *\n\t * @param array $elements list of options\n\t */\n\tprivate function printOptionsHTML($elements) {\n\t\tif ($this->dynamicScrolling) {\n\t\t\techo \"<option value=\\\"#\\\">#</option>\\n\";\n\t\t\treturn;\n\t\t}\n\t\t// sorting\n\t\tif ($this->sortElements) {\n\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\t$labels = array_keys($elements);\n\t\t\t\tnatcasesort($labels);\n\t\t\t\t$newElements = array();\n\t\t\t\tforeach ($labels as $label) {\n\t\t\t\t\t$newElements[$label] = $elements[$label];\n\t\t\t\t}\n\t\t\t\t$elements = $newElements;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnatcasesort($elements);\n\t\t\t}\n\t\t}\n\t\tforeach ($elements as $key => $value) {\n\t\t\t$selected = '';\n\t\t\t$optionClass = '';\n\t\t\tif (isset($this->optionCssClasses[$value])) {\n\t\t\t\t$optionClass = 'class=\"' . $this->optionCssClasses[$value] . '\"';\n\t\t\t}\n\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\tif (in_array($value, $this->selectedElements) || (empty($this->selectedElements) && empty($value))) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\techo \"<option value=\\\"\" . htmlspecialchars($value) . \"\\\"$selected $optionClass>\" . htmlspecialchars($key) . \"</option>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (in_array($value, $this->selectedElements) || (empty($this->selectedElements) && empty($value))) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\techo \"<option$selected $optionClass>\" . htmlspecialchars($value) . \"</option>\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specifies if the elements are just a simple list or an assoziative array (default: simple list).\n\t *\n\t * @param boolean $hasDescriptiveElements activates descriptive elements\n\t */\n\tpublic function setHasDescriptiveElements($hasDescriptiveElements) {\n\t\t$this->hasDescriptiveElements = $hasDescriptiveElements;\n\t}\n\n\t/**\n\t * Specifies if the elements are divided into optgroups.\n\t * In this case the provided options are an array where the key is the optgroup label and the value is an array containing the options for the optgroup.\n\t *\n\t * @param boolean $containsOptgroups activates optgroups\n\t */\n\tpublic function setContainsOptgroups($containsOptgroups) {\n\t\t$this->containsOptgroups = $containsOptgroups;\n\t}\n\n\t/**\n\t * Specifies if multi-selection is enabled (default: disabled).\n\t *\n\t * @param boolean $multiSelect allows multi-selection\n\t */\n\tpublic function setMultiSelect($multiSelect) {\n\t\t$this->multiSelect = $multiSelect;\n\t}\n\n\t/**\n\t * Specifies if the elements should be sorted (default: sort).\n\t *\n\t * @param boolean $sortElements sort elements\n\t */\n\tpublic function setSortElements($sortElements) {\n\t\t$this->sortElements = $sortElements;\n\t}\n\n\t/**\n\t * Specifies if the text direction should be set to right to left.\n\t *\n\t * @param boolean $rightToLeftTextDirection if true use right to left direction\n\t */\n\tpublic function setRightToLeftTextDirection($rightToLeftTextDirection) {\n\t\t$this->rightToLeftTextDirection = $rightToLeftTextDirection;\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies the width of this selection box.\n\t *\n\t * @param String $width width (e.g. 20em)\n\t */\n\tpublic function setWidth($width) {\n\t\t$this->width = htmlspecialchars($width);\n\t}\n\n\t/**\n\t * Specifies if select boxes that contain only a single element should be transformed to a simple text field.\n\t *\n\t * @param boolean $transformSingleSelect transform single options to text\n\t */\n\tpublic function setTransformSingleSelect($transformSingleSelect) {\n\t\t$this->transformSingleSelect = $transformSingleSelect;\n\t}\n\n\t/**\n\t * Sets the JavaScript code for the onchange event.\n\t *\n\t * @param String $onchangeEvent onchange event code (e.g. myfunction();)\n\t */\n\tpublic function setOnchangeEvent($onchangeEvent) {\n\t\t$this->onchangeEvent = htmlspecialchars($onchangeEvent);\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the select is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t * <br>\n\t * <br> Example for $tableRowsToHide:\n\t * <br> array('yes' => array('option1', 'option2'), 'no' => array('option3'))\n\t *\n\t * @param array $tableRowsToHide array of select value => array of IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the select is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t * <br>\n\t * <br> Example for $tableRowsToShow:\n\t * <br> array('yes' => array('option1', 'option2'), 'no' => array('option3'))\n\t *\n\t * @param array $tableRowsToShow array of select value => array of IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n\t/**\n\t * Creates the JavaScript code to hide/show table rows based on the select value.\n\t *\n\t * @param String $onChange onChange code\n\t */\n\tprivate function printCodeForShowHideTableRows(&$onChange) {\n\t\tif ((sizeof($this->tableRowsToHide) == 0) && (sizeof($this->tableRowsToShow) == 0)) {\n\t\t\treturn;\n\t\t}\n\t\t$values = array();\n\t\tif (!empty($this->tableRowsToHide)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToHide));\n\t\t}\n\t\tif (!empty($this->tableRowsToShow)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToShow));\n\t\t}\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build Java script to show/hide depending fields\n\t\tforeach ($values as $val) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . '\\').val() == \\'' . $val . '\\') {';\n\t\t\tif (isset($this->tableRowsToShow[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$val][$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($this->tableRowsToHide[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$val][$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t}\n\t\t// build script to set initial state\n\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {' . \"\\n\";\n\t\tif (isset($this->tableRowsToShow[$this->selectedElements[0]])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$this->selectedElements[0]]); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$this->selectedElements[0]][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\tif (isset($this->tableRowsToHide[$this->selectedElements[0]])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$this->selectedElements[0]]); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$this->selectedElements[0]][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\t$script .= '});</script>';\n\t\techo $script;\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Enable dynamic scrolling. This limits the number of select options to 10000 by dynamically adding/removing options.\n\t * This will not be enabled when optgroups are used or the option size is less than 10000.\n\t */\n\tpublic function enableDynamicScrolling() {\n\t\t// not possible for optgroups and smaller option lists\n\t\tif ((sizeof($this->elements) < 10000) || $this->containsOptgroups) {\n\t\t\treturn;\n\t\t}\n\t\t$this->dynamicScrolling = true;\n\t\t$elementData = array();\n\t\tforeach ($this->elements as $key => $value) {\n\t\t\t$elementData[] = array('label' => $key, 'value' => $value);\n\t\t}\n\t\t$this->addDataAttribute('dynamic-options', json_encode($elementData));\n\t\t$this->cssClasses[] = 'lam-dynamicOptions';\n\t}\n\n\t/**\n\t * Sets CSS classes for option values.\n\t *\n\t * @param array $optionCssClasses array('option value' => 'CSS class(es)')\n\t */\n\tpublic function setOptionCssClasses(array $optionCssClasses): void {\n\t\t$this->optionCssClasses = $optionCssClasses;\n\t}\n\n}\n\n/**\n * Select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedSelect extends htmlSelect {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements, $label, $helpID = null, $size = 1) {\n\t\tparent::__construct($name, $elements, $selectedElements, $size);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Represents a radio selection.\n *\n * @package metaHTML\n */\nclass htmlRadio extends htmlElement {\n\n\t/** name of select field */\n\tprivate $name;\n\t/** elements */\n\tprivate $elements;\n\t/** selected element */\n\tprivate $selectedElement = null;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** on change code */\n\tprivate $onchangeEvent = null;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * <br>Examples:\n\t * <br>\n\t * <br>$radio = new htmlRadio('myName', array('label1' => 'value1', 'label2' => 'value2'), array('value1'));\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value)\n\t * @param String $selectedElement value of selected element (optional, default none)\n\t */\n\tfunction __construct($name, $elements, $selectedElement = null) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->elements = $elements;\n\t\tif ($selectedElement != null) {\n\t\t\t$this->selectedElement = $selectedElement;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (isset($values[$this->name][0])) {\n\t\t\t$this->selectedElement = $values[$this->name][0];\n\t\t}\n\t\t$name = ' name=\"' . $this->name . '\"';\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t$this->printInitialState();\n\t\t}\n\t\t// print radio list\n\t\t$counter = 0;\n\t\tforeach ($this->elements as $label => $value) {\n\t\t\t$showHideOnchange = '';\n\t\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t\t$showHideOnchange = $this->getOnchangeCodeForShowHideTableRows($counter);\n\t\t\t}\n\t\t\t$onchange = '';\n\t\t\tif ($this->onchangeEvent != null) {\n\t\t\t\t$onchange = ' onchange=\"' . $this->onchangeEvent . '\"';\n\t\t\t}\n\t\t\telseif (!empty($showHideOnchange)) {\n\t\t\t\t$onchange = ' onchange=\"' . $showHideOnchange . '\"';\n\t\t\t}\n\t\t\t$onClick = 'onClick=\"\n\t\t\t\tjQuery(\\'input[name=' . $this->name . ']\\').prop(\\'checked\\', false);\n\t\t\t\tjQuery(\\'#' . $this->name . $counter . '\\').prop(\\'checked\\', true);\n\t\t\t\tjQuery(\\'#' . $this->name . $counter . '\\').trigger(\\'change\\');\n\t\t\t\t\"';\n\t\t\tif ($this->isEnabled === false) {\n\t\t\t\t$onClick = '';\n\t\t\t}\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\t$selected = '';\n\t\t\tif ($value == $this->selectedElement) {\n\t\t\t\t$selected = ' checked';\n\t\t\t}\n\t\t\techo '<input type=\"radio\" id=\"' . $this->name . $counter . '\"' . $name . $disabled . $selected . $onchange . ' value=\"' . $value . '\" tabindex=\"' . $tabindex . '\"> ' . $label;\n\t\t\techo '</div>';\n\t\t\t$tabindex++;\n\t\t\t$counter++;\n\t\t}\n\t\treturn array($this->name => 'select');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Sets the JavaScript code for the onchange event.\n\t *\n\t * @param String $onchangeEvent onchange event code (e.g. myfunction();)\n\t */\n\tpublic function setOnchangeEvent($onchangeEvent) {\n\t\t$this->onchangeEvent = htmlspecialchars($onchangeEvent);\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Creates the JavaScript code to hide/show table rows based on the select value.\n\t *\n\t * @param int $counter index\n\t * @return String onChange code\n\t */\n\tprivate function getOnchangeCodeForShowHideTableRows($counter) {\n\t\t$onChange = '';\n\t\tif ((sizeof($this->tableRowsToHide) == 0) && (sizeof($this->tableRowsToShow) == 0)) {\n\t\t\treturn;\n\t\t}\n\t\t$values = array();\n\t\tif (!empty($this->tableRowsToHide)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToHide));\n\t\t}\n\t\tif (!empty($this->tableRowsToShow)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToShow));\n\t\t}\n\t\t$values = array_unique($values);\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build Java script to show/hide depending fields\n\t\tforeach ($values as $val) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . $counter . '\\').val() == \\'' . $val . '\\') {';\n\t\t\tif (isset($this->tableRowsToShow[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$val][$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($this->tableRowsToHide[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$val][$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t}\n\t\treturn $onChange;\n\t}\n\n\tprivate function printInitialState() {\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build script to set initial state\n\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {' . \"\\n\";\n\t\tif (isset($this->tableRowsToShow[$this->selectedElement])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$this->selectedElement]); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$this->selectedElement][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\tif (isset($this->tableRowsToHide[$this->selectedElement])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$this->selectedElement]); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$this->selectedElement][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\t$script .= '});</script>';\n\t\techo $script;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the radio is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br> Example for $tableRowsToHide:\n\t * <br> array('val1' => array('option1', 'option2'), 'val2' => array('option3'))\n\t *\n\t * @param array $tableRowsToHide array of select value => array of IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the radio is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br> Example for $tableRowsToShow:\n\t * <br> array('val1' => array('option1', 'option2'), 'val2' => array('option3'))\n\t *\n\t * @param array $tableRowsToShow array of select value => array of IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n}\n\n/**\n * Radio list with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedRadio extends htmlRadio {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label descriptive label\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value)\n\t * @param String $selectedElement value of selected element (optional, default none)\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($label, $name, $elements, $selectedElement = null, $helpID = null) {\n\t\tparent::__construct($name, $elements, $selectedElement);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->label != null) {\n\t\t\techo '<div class=\"nowrap\">';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t}\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td valign=\\\"top\\\">\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the text and escapes contained HTML code by default.\n *\n * @package metaHTML\n */\nclass htmlOutputText extends htmlElement {\n\n\t/** the text to print */\n\tprivate $string;\n\t/** specifies if HTML code should be escaped */\n\tprivate $escapeHTML;\n\t/** bold text */\n\tprivate $isBold = false;\n\t/** mark as required */\n\tprivate $markAsRequired = false;\n\t/** no wrap */\n\tprivate $noWrap = false;\n\t/** preformatted */\n\tprivate $isPreformatted = false;\n\t/** title */\n\tprivate $title = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $string output text\n\t * @param boolean $escapeHTML escape HTML code (default yes)\n\t * @param boolean $markAsRequired mark text like a required field\n\t */\n\tfunction __construct($string, $escapeHTML = true, $markAsRequired = false) {\n\t\t$this->string = $string;\n\t\t$this->escapeHTML = $escapeHTML;\n\t\t$this->markAsRequired = $markAsRequired;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$cssClasses = empty($this->cssClasses) ? '' : 'class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\tif (!empty($this->title)) {\n\t\t\techo '<span title=\"' . $this->title . '\">';\n\t\t}\n\t\tif ($this->noWrap) {\n\t\t\techo \"<div class=\\\"nowrap\\\">\";\n\t\t}\n\t\tif ($this->isBold) {\n\t\t\techo \"<b>\";\n\t\t}\n\t\tif ($this->isPreformatted) {\n\t\t\techo \"<pre $cssClasses>\";\n\t\t}\n\t\telseif (!empty($cssClasses)) {\n\t\t\techo \"<span $cssClasses>\";\n\t\t}\n\t\tif ($this->escapeHTML) {\n\t\t\techo htmlspecialchars($this->string);\n\t\t}\n\t\telse {\n\t\t\techo $this->string;\n\t\t}\n\t\tif ($this->markAsRequired) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\tif ($this->isPreformatted) {\n\t\t\techo \"</pre>\";\n\t\t}\n\t\telseif (!empty($cssClasses)) {\n\t\t\techo \"</span>\";\n\t\t}\n\t\tif ($this->isBold) {\n\t\t\techo \"</b>\";\n\t\t}\n\t\tif ($this->noWrap) {\n\t\t\techo \"</div>\";\n\t\t}\n\t\tif (!empty($this->title)) {\n\t\t\techo \"</span>\";\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Specifies if the whole text should be printed in bold.\n\t *\n\t * @param boolean $isBold bold text\n\t */\n\tpublic function setIsBold($isBold) {\n\t\t$this->isBold = $isBold;\n\t}\n\n\t/**\n\t * Adds a marker that indicates a required field.\n\t *\n\t * @param boolean $markAsRequired add marker\n\t */\n\tpublic function setMarkAsRequired($markAsRequired) {\n\t\t$this->markAsRequired = $markAsRequired;\n\t}\n\n\t/**\n\t * Specifies if word wrap is allowed for this text.\n\t *\n\t * @param boolean $noWrap no wrapping if set to true (default false)\n\t */\n\tpublic function setNoWrap($noWrap) {\n\t\t$this->noWrap = $noWrap;\n\t}\n\n\t/**\n\t * Sets if the text is preformatted.\n\t *\n\t * @param boolean $preformatted is preformatted (default true)\n\t */\n\tpublic function setPreformatted($preformatted = true) {\n\t\t$this->isPreformatted = $preformatted;\n\t}\n\n\t/**\n\t * Sets a title for this text.\n\t *\n\t * @param string|null $title title\n\t */\n\tpublic function setTitle(?string $title): void {\n\t\t$this->title = $title;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a checkbox.\n *\n * @package metaHTML\n */\nclass htmlInputCheckbox extends htmlElement {\n\n\t/** unique name of input element */\n\tprotected $name;\n\t/** value */\n\tprotected $checked;\n\t/** enabled or disabled */\n\tprotected $isEnabled = true;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprivate $transient = false;\n\t/** list of input elements to enable when checked */\n\tprotected $elementsToEnable = array();\n\t/** list of input elements to disable when checked */\n\tprotected $elementsToDisable = array();\n\t/** onclick event code */\n\tprivate $onClick;\n\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t */\n\tfunction __construct($name, $checked) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->checked = $checked;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (isset($values[$this->name])) {\n\t\t\tif ($values[$this->name][0] == 'true') {\n\t\t\t\t$this->checked = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->checked = false;\n\t\t\t}\n\t\t}\n\t\t$checked = '';\n\t\tif ($this->checked) {\n\t\t\t$checked = ' checked';\n\t\t}\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classes = ' ';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classes = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t// build Java script to show/hide depending fields\n\t\t$onChange = '';\n\t\t$script = '';\n\t\t$selector = $this->getShowHideSelector();\n\t\tif ((sizeof($this->tableRowsToShow) > 0) || (sizeof($this->tableRowsToHide) > 0)) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . ':checked\\').val() !== undefined) {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t}\n\t\t\t$onChange .= '}';\n\t\t\t$onChange .= 'else {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t\t// build script to set initial state\n\t\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'removeClass';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'addClass';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');';\n\t\t\t}\n\t\t\t$script .= '});</script>';\n\t\t}\n\t\t// build Java script to enable/disable elements\n\t\tif ((sizeof($this->elementsToEnable) > 0) || (sizeof($this->elementsToDisable) > 0)) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . ':checked\\').val() !== undefined) {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', false);';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', true);';\n\t\t\t}\n\t\t\t$onChange .= '}';\n\t\t\t$onChange .= 'else {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', true);';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', false);';\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t\t// build script to set initial state\n\t\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$classType = 'true';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'false';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', ' . $classType . ');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$classType = 'false';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'true';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', ' . $classType . ');';\n\t\t\t}\n\t\t\t$script .= '});</script>';\n\t\t}\n\t\tif (!empty($onChange)) {\n\t\t\t$onChange = ' onChange=\"' . $onChange . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif (!empty($this->onClick)) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\techo '<input type=\"checkbox\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $classes . $tabindexValue . $onChange . $onClick . $checked . $disabled . '>';\n\t\techo $script;\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array($this->name => 'checkbox');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the checkbox is checked.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t *\n\t * @param array $tableRowsToHide IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the checkbox is checked.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t *\n\t * @param array $tableRowsToShow IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * This will disable the given input elements when the checkbox is checked.\n\t * The given IDs can be of any input element (e.g. select, checkbox, ...).\n\t *\n\t * @param array $elements IDs of elements to disable\n\t */\n\tpublic function setElementsToDisable($elements) {\n\t\t$this->elementsToDisable = $elements;\n\t}\n\n\t/**\n\t * This will enable the given input elements when the checkbox is checked.\n\t * The given IDs can be of any input element (e.g. select, checkbox, ...).\n\t *\n\t * @param array $elements IDs of elements to enable\n\t */\n\tpublic function setElementsToEnable($elements) {\n\t\t$this->elementsToEnable = $elements;\n\t}\n\n\t/**\n\t * Returns the CSS selector to use to find show/hide elements.\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Sets the onclick code.\n\t *\n\t * @param string $code JS code\n\t */\n\tpublic function setOnClick($code) {\n\t\t$this->onClick = $code;\n\t}\n\n}\n\n/**\n * Checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** specifies if label is printed before the checkbox */\n\tprivate $labelFirst;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param boolean $labelFirst specifies if the label is at the beginning or at the end (optional, default beginning)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $labelFirst = true) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->labelFirst = $labelFirst;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$onClick = 'onClick=\"jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();\"';\n\t\tif ($this->labelFirst) {\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\telse {\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t}\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlLabeledInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** specifies if label is printed before the checkbox */\n\tprivate $labelFirst;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param boolean $labelFirst specifies if the label is at the beginning or at the end (optional, default beginning)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $labelFirst = true) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->labelFirst = $labelFirst;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$onClick = 'onClick=\"jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();\"';\n\t\tif ($this->labelFirst) {\n\t\t\techo '<span class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</span>';\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\telse {\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\techo '<span class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</span>';\n\t\t}\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a file upload field.\n *\n * @package metaHTML\n */\nclass htmlInputFileUpload extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t */\n\tfunction __construct($name) {\n\t\t$this->name = htmlspecialchars($name);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<input type=\"file\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $tabindexValue . $classValue .\n\t\t\t$disabled . $this->getDataAttributesAsString() . '>';\n\t\treturn array($this->name => 'file');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n}\n\n/**\n * File upload with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputFileUpload extends htmlInputFileUpload {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($name, $label, $helpID = null) {\n\t\tparent::__construct($name);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a textarea.\n *\n * @package metaHTML\n */\nclass htmlInputTextarea extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** value */\n\tprivate $value;\n\t/** column count */\n\tprivate $colCount;\n\t/** row count */\n\tprivate $rowCount;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** specifies if LAM should display this field with a WYSIWYG editor */\n\tprotected $richEdit = false;\n\t/** required field */\n\tprotected $required = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t\t$this->colCount = htmlspecialchars($colCount);\n\t\t$this->rowCount = htmlspecialchars($rowCount);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif (isset($values[$this->name])) {\n\t\t\t$this->value = implode(\"\\r\\n\", $values[$this->name]);\n\t\t}\n\t\t$colCount = ($this->colCount != null) ? ' cols=\"' . $this->colCount . '\"' : '';\n\t\t$rowCount = ($this->rowCount != null) ? ' rows=\"' . $this->rowCount . '\"' : '';\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classList = $this->cssClasses;\n\t\t$classes = '';\n\t\tif ($this->richEdit) {\n\t\t\t$classList[] = 'ckeditor';\n\t\t}\n\t\t$validators = array();\n\t\tif ($this->required) {\n\t\t\t$validators[] = 'required';\n\t\t}\n\t\tif (!empty($validators)) {\n\t\t\t$classList[] = 'validate[' . implode(',', $validators) . ']';\n\t\t}\n\t\t$classes = ' class=\"' . implode(' ', $classList) . '\"';\n\t\techo '<textarea name=\"' . $this->name . '\" id=\"' . $this->name . '\"' . $tabindexValue . $classes . $colCount .\n\t\t\t$rowCount . $this->getDataAttributesAsString() . $disabled . '>' . $this->value . '</textarea>';\n\t\treturn array($this->name => 'textarea');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies if the textarea should be displayed with a WYSIWYG editor.\n\t * <br>This requires that the page which displays the textarea also includes the ckeditor JS.\n\t * <br>Rich editing is disabled by default.\n\t *\n\t * @param boolean $richEdit rich edit or standard\n\t */\n\tpublic function setIsRichEdit($richEdit) {\n\t\t$this->richEdit = $richEdit;\n\t}\n\n\t/**\n\t * Specifies if the input field is required.\n\t *\n\t * @param boolean $required required\n\t */\n\tpublic function setRequired($required) {\n\t\t$this->required = $required;\n\t}\n\n}\n\n/**\n * Text area with label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputTextarea extends htmlInputTextarea {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount, $label, $helpID = null) {\n\t\tparent::__construct($name, $value, $colCount, $rowCount);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\tif ($this->required) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td valign=\\\"top\\\">\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a color picker field.\n *\n * @package metaHTML\n */\nclass htmlInputColorPicker extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** color value */\n\tprivate $color;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name unique name\n\t * @param string $colorValue color value (e.g. #000000)\n\t */\n\tpublic function __construct($name, $colorValue = '#000000') {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->color = htmlspecialchars($colorValue);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\techo '<input type=\"color\" value=\"' . $this->color . '\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $tabindexValue . $disabled . '>';\n\t\treturn array($this->name => 'file');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n}\n\n/**\n * Color picker with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputColorPicker extends htmlInputColorPicker {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name unique name\n\t * @param string $colorValue color value (e.g. #000000)\n\t * @param string $label descriptive label\n\t * @param string $helpID help ID\n\t */\n\tpublic function __construct($name, $colorValue, $label, $helpID = null) {\n\t\tparent::__construct($name, $colorValue);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputColorPicker::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n}\n\n/**\n * Prints the HTML code for an image.\n *\n * @package metaHTML\n */\nclass htmlImage extends htmlElement {\n\n\t/** path to image */\n\tprivate $path;\n\t/** width */\n\tprivate $width;\n\t/** height */\n\tprivate $height;\n\t/** alt text */\n\tprivate $alt;\n\t/** title */\n\tprivate $title;\n\t/** onClick event */\n\tprivate $onClick = null;\n\t/** enable cropping */\n\tprivate $crop = false;\n\t/** enable lightbox */\n\tprivate $lightbox = false;\n\t/** @var string help popup title */\n\tprivate $helpTitle = null;\n\t/** @var htmlElement help popup content\t*/\n\tprivate $helpContent = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $path image location\n\t * @param int $width image width (optional, default original size)\n\t * @param int $height image height (optional, default original size)\n\t * @param String $alt alt text (optional)\n\t * @param String $onClick onClick code (optional)\n\t */\n\tpublic function __construct($path, $width = null, $height = null, $alt = ' ', $title = null, $onClick = null) {\n\t\t$this->path = htmlspecialchars($path);\n\t\t$this->width = $width;\n\t\t$this->height = $height;\n\t\t$this->alt = htmlspecialchars($alt);\n\t\t$this->title = $title;\n\t\t$this->onClick = $onClick;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$path = ' src=\"' . $this->path . '\"';\n\t\t$width = '';\n\t\tif ($this->width != null) {\n\t\t\t$width = ' width=\"' . $this->width . '\"';\n\t\t}\n\t\t$height = '';\n\t\tif ($this->height != null) {\n\t\t\t$height = ' height=\"' . $this->height . '\"';\n\t\t}\n\t\t$alt = ' alt=\"' . $this->alt . '\"';\n\t\t$title = '';\n\t\tif (!empty($this->title)) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\tif ($this->crop) {\n\t\t\t$this->cssClasses[] = 'cropperjsImage';\n\t\t}\n\t\t$classes = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classes = 'class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\tif ($this->lightbox) {\n\t\t\techo '<a href=\"' . $this->path . '\" class=\"lam-lightbox\">';\n\t\t}\n\t\t$helpTitleValue = '';\n\t\t$helpContentValue = '';\n\t\tif ($this->helpTitle !== null) {\n\t\t\t$helpTitleValue = ' helptitle=\"' . $this->helpTitle . '\"';\n\t\t\tob_start();\n\t\t\t$this->helpContent->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t$helpContentString = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$helpContentValue = ' helpdata=\"' . htmlspecialchars($helpContentString) . '\"';\n\t\t}\n\t\techo '<img' . $path . $width . $height . $alt . $title . $classes . $onClick . $helpTitleValue . $helpContentValue . $this->getDataAttributesAsString() . \">\";\n\t\tif ($this->lightbox) {\n\t\t\techo '</a>';\n\t\t}\n\t\tif ($this->crop) {\n\t\t\t$cropJsPath = 'templates/lib/extra/cropperjs/cropper.js';\n\t\t\tif (is_file('../../templates/login.php')) {\n\t\t\t\t$cropJsPath = '../../' . $cropJsPath;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$cropJsPath = '../' . $cropJsPath;\n\t\t\t}\n\t\t\techo '<script type=\"text/javascript\" src=\"' . $cropJsPath . '\"></script>';\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tvar image = jQuery(\\'.cropperjsImage\\')[0];\n\t\t\t\t\tvar cropper = new Cropper(image, {\n\t\t\t\t\t\tviewMode: 1,\n\t\t\t\t\t\tmovable: false,\n\t\t\t\t\t\tzoomable: false,\n\t\t\t\t\t\tcrop: function(event) {\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataX\\').val(event.detail.x);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataY\\').val(event.detail.y);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataWidth\\').val(event.detail.width);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataHeight\\').val(event.detail.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t</script>';\n\t\t\techo '<input id=\"croppingDataX\" type=\"hidden\" name=\"croppingDataX\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataY\" type=\"hidden\" name=\"croppingDataY\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataWidth\" type=\"hidden\" name=\"croppingDataWidth\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataHeight\" type=\"hidden\" name=\"croppingDataHeight\" value=\"0\"/>';\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Enables cropping feature.\n\t * This will display a cropping box on the image. The cropping data\n\t * can be found in POST data (croppingDataX, croppingDataY, croppingDataWidth, croppingDataHeight).\n\t */\n\tpublic function enableCropping() {\n\t\t$this->crop = true;\n\t}\n\n\t/**\n\t * Enables lightbox feature.\n\t */\n\tpublic function enableLightbox() {\n\t\t$this->lightbox = true;\n\t}\n\n\t/**\n\t * Activates the help popup on hover.\n\t *\n\t * @param string $title title\n\t * @param htmlElement $content help content\n\t */\n\tpublic function setHelpData(string $title, htmlElement $content) {\n\t\t$this->helpTitle = htmlspecialchars($title);\n\t\t$this->helpContent = $content;\n\t}\n\n\t/**\n\t * Sets the onClick event code.\n\t *\n\t * @param string $code JS code\n\t */\n\tpublic function setOnClick(string $code): void {\n\t\t$this->onClick = $code;\n\t}\n\n}\n\n/**\n * Adds an empty space with given width and height.\n *\n * @package metaHTML\n */\nclass htmlSpacer extends htmlElement {\n\n\t/** width of spacer in px */\n\tprivate $width = null;\n\t/** height of spacer in px */\n\tprivate $height = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $width width (e.g. 10px)\n\t * @param String $height height (e.g. 10px)\n\t */\n\tfunction __construct($width, $height = null) {\n\t\tif ($width !== null) {\n\t\t\t$this->width = htmlspecialchars($width);\n\t\t}\n\t\tif ($height !== null) {\n\t\t\t$this->height = htmlspecialchars($height);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$width = '';\n\t\tif ($this->width !== null) {\n\t\t\t$width = 'width: ' . $this->width . ';';\n\t\t}\n\t\t$height = '';\n\t\tif ($this->height !== null) {\n\t\t\t$height = 'height: ' . $this->height . ';';\n\t\t}\n\t\techo \"<div style=\\\"$width $height display: inline-block;\\\"></div>\\n\";\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Prints a status message (e.g. error message).\n *\n * @package metaHTML\n */\nclass htmlStatusMessage extends htmlElement {\n\n\t/** message type (e.g. ERROR) */\n\tprivate $type;\n\t/** message title */\n\tprivate $title;\n\t/** message text */\n\tprivate $text;\n\t/** message parameters */\n\tprivate $params;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $type message type (e.g. ERROR)\n\t * @param String $title message title\n\t * @param String $text message (optional)\n\t * @param array $params additional message parameters\n\t */\n\tpublic function __construct($type, $title, $text = null, $params = null) {\n\t\t$this->type = $type;\n\t\t$this->title = $title;\n\t\t$this->text = $text;\n\t\t$this->params = $params;\n\t}\n\n\t/**\n\t * Constructor with parameter array.\n\t *\n\t * @param array $params parameters in same order as normal constructor\n\t * @return htmlStatusMessage\n\t */\n\tpublic static function fromParamArray($params) {\n\t\tif (sizeof($params) < 2) {\n\t\t\tthrow new BadMethodCallException(\"Invalid parameter count\");\n\t\t}\n\n\t\t$count = count($params);\n\t\tswitch ($count) {\n\t\t\tcase 2:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1], $params[2]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1], $params[2], $params[3]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new BadMethodCallException(\"Invalid parameter count\");\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (!empty($this->cssClasses)) {\n\t\t\techo '<div class=\"' . implode(' ', $this->cssClasses) . '\">';\n\t\t}\n\t\tStatusMessage($this->type, $this->title, $this->text, $this->params);\n\t\tif (!empty($this->cssClasses)) {\n\t\t\techo '</div>';\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns the message type.\n\t *\n\t * @return String type\n\t */\n\tpublic function getType() {\n\t\treturn $this->type;\n\t}\n\n}\n\n/**\n * Generates a title line. This is used for page titles.\n *\n * @package metaHTML\n */\nclass htmlTitle extends htmlElement {\n\n\t/** descriptive label */\n\tprivate $label = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label label\n\t */\n\tfunction __construct($label) {\n\t\t$this->label = htmlspecialchars($label);\n\t\t// the title should not end at a table cell\n\t\t$this->colspan = 100;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo \"<div class=\\\"title\\\">\\n\";\n\t\techo \"<h2 class=\\\"titleText\\\">\\n\";\n\t\techo $this->label;\n\t\techo \"</h2>\\n\";\n\t\techo \"</div>\\n\";\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Generates a subtitle line. This is used to group multiple fields.\n *\n * @package metaHTML\n */\nclass htmlSubTitle extends htmlElement {\n\n\t/** descriptive label */\n\tprivate $label = null;\n\t/** optional image */\n\tprivate $image = null;\n\t/** optional ID for this element (e.g. to use for JavaScript) */\n\tprivate $id = null;\n\t/** show large icon */\n\tprivate $largeIcon = false;\n\t/** help ID */\n\tprivate $helpId = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label label\n\t * @param String $image optional image\n\t * @param String $id optional ID for this element (e.g. to use for JavaScript)\n\t * @param bool $largeIcon show large (32x32px) icon instead of small one (16x16px)\n\t */\n\tpublic function __construct($label, $image = null, $id = null, $largeIcon = false) {\n\t\t$this->label = htmlspecialchars($label);\n\t\tif ($image !== null) {\n\t\t\t$this->image = htmlspecialchars($image);\n\t\t}\n\t\tif ($id !== null) {\n\t\t\t$this->id = htmlspecialchars($id);\n\t\t}\n\t\t// the title should not end at a table cell\n\t\t$this->colspan = 100;\n\t\t$this->largeIcon = $largeIcon;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$idValue = '';\n\t\tif ($this->id != null) {\n\t\t\t$idValue = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo \"<div $idValue class=\\\"subTitle\\\">\\n\";\n\t\techo \"<h4 class=\\\"subTitleText\\\">\\n\";\n\t\tif ($this->image != null) {\n\t\t\t$size = $this->largeIcon ? 32 : 16;\n\t\t\techo '<img height=' . $size . ' width=' . $size . ' src=\"' . $this->image . '\" alt=\"' . $this->label . '\">&nbsp;';\n\t\t}\n\t\techo $this->label;\n\t\tif ($this->helpId !== null) {\n\t\t\t$spacer = new htmlSpacer('0.5rem', null);\n\t\t\t$spacer->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t$helpLink = new htmlHelpLink($this->helpId);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo \"</h4>\\n\";\n\t\techo \"</div>\\n\";\n\t\treturn array();\n\t}\n\n\t/**\n\t * Sets an additional help id.\n\t *\n\t * @param string|array $helpId\n\t */\n\tpublic function setHelpId($helpId) {\n\t\t$this->helpId = $helpId;\n\t}\n\n}\n\n/**\n * Generates a hidden input field.\n *\n * @package metaHTML\n */\nclass htmlHiddenInput extends htmlElement {\n\n\t/** field name */\n\tprivate $name = null;\n\t/** field value */\n\tprivate $value = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name input name\n\t * @param String $value input value\n\t */\n\tfunction __construct($name, $value) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<input type=\"hidden\" name=\"' . $this->name . '\" id=\"' . $this->name . '\" value=\"' . $this->value . '\">';\n\t\treturn array($this->name => 'hidden');\n\t}\n\n}\n\n/**\n * Generates a link.\n * The link can include an optional image in front of the link text.\n *\n * @package metaHTML\n */\nclass htmlLink extends htmlElement {\n\n\t/** link text */\n\tprivate $text = null;\n\t/** link target */\n\tprotected $target = null;\n\t/** optional image */\n\tprivate $image = null;\n\t/** title */\n\tprivate $title = null;\n\t/** target window */\n\tprivate $targetWindow = null;\n\t/** onClick event */\n\tprivate $onClick = null;\n\t/** onMouseOver event */\n\tprivate $onMouseOver = null;\n\t/** link id */\n\tprivate $id;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $text label\n\t * @param String $target target URL\n\t * @param String $image URL of optional image\n\t */\n\tfunction __construct($text, $target, $image = null) {\n\t\tif ($text !== null) {\n\t\t\t$this->text = htmlspecialchars($text);\n\t\t}\n\t\tif ($target !== null) {\n\t\t\t$this->target = htmlspecialchars($target);\n\t\t}\n\t\tif ($image !== null) {\n\t\t\t$this->image = htmlspecialchars($image);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$text = $this->getContent();\n\t\t$image = '';\n\t\tif ($this->image != null) {\n\t\t\t$image = '<img class=\"align-middle\" src=\"' . $this->image . '\" alt=\"' . $this->getAlt() . '\">';\n\t\t\tif (!empty($text)) {\n\t\t\t\t$image .= '&nbsp;';\n\t\t\t}\n\t\t}\n\t\t$title = '';\n\t\tif ($this->title != null) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$targetWindow = '';\n\t\tif ($this->targetWindow != null) {\n\t\t\t$targetWindow = ' target=\"' . $this->targetWindow . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\t$onMouseOver = '';\n\t\tif ($this->onMouseOver != null) {\n\t\t\t$onMouseOver = ' onmouseover=\"' . $this->onMouseOver . '\"';\n\t\t}\n\t\t$idAttr = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$id = !empty($this->id) ? $this->id : 'a_' . preg_replace('/[^a-zA-Z0-9_]+/', '_', $this->target);\n\t\t\t$idAttr = ' id=\"' . $id . '\"';\n\t\t}\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<a href=\"' . $this->target . '\"' . $idAttr . $classAttr . $title . $targetWindow . $onClick . $onMouseOver . $this->getDataAttributesAsString() . '>' . $image . $text . '</a>';\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns the value for the alt attribute.\n\t *\n\t * @return string alt value\n\t */\n\tprotected function getAlt() {\n\t\treturn $this->text;\n\t}\n\n\t/**\n\t * Returns the value for the link content.\n\t *\n\t * @return string content\n\t */\n\tprotected function getContent() {\n\t\treturn $this->text;\n\t}\n\n\t/**\n\t * Sets the link title.\n\t *\n\t * @param String $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n\t/**\n\t * Sets the target window (e.g. _blank).\n\t *\n\t * @param String $window target window (e.g. _blank)\n\t */\n\tpublic function setTargetWindow($window) {\n\t\t$this->targetWindow = htmlspecialchars($window);\n\t}\n\n\t/**\n\t * Sets the onClick event.\n\t *\n\t * @param String $event JavaScript code\n\t */\n\tpublic function setOnClick($event) {\n\t\t$this->onClick = htmlspecialchars($event);\n\t}\n\n\t/**\n\t * Sets the onMouseOver event.\n\t *\n\t * @param String $event JavaScript code\n\t */\n\tpublic function setOnMouseOver($event) {\n\t\t$this->onMouseOver = htmlspecialchars($event);\n\t}\n\n\t/**\n\t * Sets the element id.\n\t *\n\t * @param string $id unique id\n\t */\n\tpublic function setId($id) {\n\t\t$this->id = $id;\n\t}\n\n}\n\n/**\n * Generates a link around a htmlElement.\n *\n * @package metaHTML\n */\nclass htmlContentLink extends htmlLink {\n\n\tprivate $content = null;\n\tprivate $contentText = '';\n\n\t/**\n\t * Constructor\n\t *\n\t * @param htmlElement $content content to link\n\t * @param String $target link target\n\t * @param boolean $highlightOnHover highlight content on hover\n\t */\n\tfunction __construct($content, $target) {\n\t\t$this->content = $content;\n\t\t$this->target = htmlspecialchars($target);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tob_start();\n\t\tparseHtml($module, $this->content, $values, $restricted, $tabindex, $scope);\n\t\t$this->contentText = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Returns the value for the alt attribute.\n\t *\n\t * @return string alt value\n\t */\n\tprotected function getAlt() {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the value for the link content.\n\t *\n\t * @return string content\n\t */\n\tprotected function getContent() {\n\t\treturn $this->contentText;\n\t}\n\n}\n\n/**\n * Groups multiple htmlElements.\n * This is useful if multiple elements should be included in a single table cell.\n * The HTML code of the subelements is printed in the order they were added. No additional code is added.\n *\n * @package metaHTML\n */\nclass htmlGroup extends htmlElement {\n\n\t/** link text */\n\tprivate $subelements = array();\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\tfor ($i = 0; $i < sizeof($this->subelements); $i++) {\n\t\t\t$return = array_merge($return, $this->subelements[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Adds a subelement.\n\t *\n\t * @param htmlElement $sub subelement\n\t */\n\tpublic function addElement($sub) {\n\t\t$this->subelements[] = $sub;\n\t}\n\n}\n\n/**\n * Prints a horizontal line.\n *\n * @package metaHTML\n */\nclass htmlHorizontalLine extends htmlElement {\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo \"<hr>\";\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a simple DIV element.\n *\n * @package metaHTML\n */\nclass htmlDiv extends htmlElement {\n\n\t/** unique ID */\n\tprivate $id = null;\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $id unique ID\n\t * @param htmlElement $content inner content\n\t * @param array $classes CSS classes\n\t * @param string[] $cssClasses CSS classes\n\t */\n\tfunction __construct($id, $content, $cssClasses = null) {\n\t\tif ($id !== null) {\n\t\t\t$this->id = htmlspecialchars($id);\n\t\t}\n\t\t$this->content = $content;\n\t\t$this->cssClasses = $cssClasses;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$idValue = '';\n\t\tif ($this->id != null) {\n\t\t\t$idValue = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\t$classesValue = '';\n\t\tif (($this->cssClasses != null) && (sizeof($this->cssClasses) > 0)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<div' . $idValue . $classesValue . $this->getDataAttributesAsString() . '>';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n}\n\n/**\n * Creates a simple SPAN element.\n *\n * @package metaHTML\n */\nclass htmlSpan extends htmlElement {\n\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\t/** onclick handler */\n\tprivate $onclick = null;\n\t/** title */\n\tprivate $title = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param htmlElement $content inner content\n\t * @param array $classes CSS classes\n\t * @param string[] $cssClasses CSS classes\n\t */\n\tfunction __construct($content, $cssClasses = null) {\n\t\t$this->content = $content;\n\t\t$this->cssClasses = $cssClasses;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$classesValue = '';\n\t\tif (($this->cssClasses != null) && (sizeof($this->cssClasses) > 0)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$onclickHandler = '';\n\t\tif (!empty($this->onclick)) {\n\t\t\t$onclickHandler = ' onclick=\"' . $this->onclick . '\"';\n\t\t}\n\t\t$titleCode = '';\n\t\tif ($this->title !== null) {\n\t\t\t$titleCode = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\techo '<span' . $classesValue . $titleCode . $onclickHandler . '>';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</span>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the onclick event.\n\t *\n\t * @param string $event event handler code\n\t */\n\tpublic function setOnclick($event) {\n\t\t$this->onclick = $event;\n\t}\n\n\t/**\n\t * Sets the title.\n\t *\n\t * @param string|null $title title\n\t */\n\tpublic function setTitle(?string $title): void {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n}\n\n/**\n * Creates a JavaScript element.\n *\n * @package metaHTML\n */\nclass htmlJavaScript extends htmlElement {\n\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $content script\n\t */\n\tfunction __construct($content) {\n\t\t$this->content = $content;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<script type=\"text/javascript\">';\n\t\techo $this->content;\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a iframe element.\n *\n * @package metaHTML\n */\nclass htmlIframe extends htmlElement {\n\n\t/** HTML id */\n\tprivate $id = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $content script\n\t */\n\tfunction __construct($id = null) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$idAttr = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$idAttr = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo '<iframe ' . $idAttr . $this->getDataAttributesAsString() . '>';\n\t\techo '</iframe>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a Script element to integrate external JavaScript files.\n *\n * @package metaHTML\n */\nclass htmlScript extends htmlElement {\n\n\t/** src value */\n\tprivate $src = null;\n\t/** is async */\n\tprivate $async = false;\n\t/** execute after page is parsed */\n\tprivate $defer = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $src script path\n\t * @param boolean $isAsync script will be executed while the page continues the parsing (default true)\n\t * @param boolean $isDeferred script is executed when the page has finished parsing (default true)\n\t */\n\tfunction __construct($src, $isAsync = true, $isDeferred = true) {\n\t\t$this->src = $src;\n\t\t$this->async = $isAsync;\n\t\t$this->defer = $isDeferred;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$async = $this->async ? ' async' : '';\n\t\t$defer = $this->defer ? ' defer=\"defer\"' : '';\n\t\techo '<script src=\"' . $this->src . '\"' . $async . $defer . '>';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a link element to integrate external CSS files.\n *\n * @package metaHTML\n */\nclass htmlLinkCss extends htmlElement {\n\n\t/** src value */\n\tprivate $src = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $src script path\n\t */\n\tfunction __construct($src) {\n\t\t$this->src = $src;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<link href=\"' . $this->src . '\" type=\"text/css\" rel=\"stylesheet\"/>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Sets all given elements to the same width.\n *\n * @package metaHTML\n */\nclass htmlEqualWidth extends htmlElement {\n\n\t/** list of element IDs */\n\tprivate $elements = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of element IDs\n\t */\n\tfunction __construct($elements) {\n\t\tforeach ($elements as $element) {\n\t\t\t$this->elements[] = htmlspecialchars($element);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\t$listContent = \"'#\" . $this->elements[0] . \"'\";\n\t\tfor ($i = 1; $i < sizeof($this->elements); $i++) {\n\t\t\t$listContent .= \", '#\" . $this->elements[$i] . \"'\";\n\t\t}\n\t\techo '<script type=\"text/javascript\">';\n\t\techo ' jQuery(document).ready(function() {';\n\t\techo '  var equalWidthElements = new Array(' . $listContent . ');';\n\t\techo '  equalWidth(equalWidthElements);';\n\t\techo ' });';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Sets all given elements to the same height.\n *\n * @package metaHTML\n */\nclass htmlEqualHeight extends htmlElement {\n\n\t/** list of element IDs */\n\tprivate $elements = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of element IDs\n\t */\n\tfunction __construct($elements) {\n\t\tforeach ($elements as $element) {\n\t\t\t$this->elements[] = htmlspecialchars($element);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\t$listContent = \"'#\" . $this->elements[0] . \"'\";\n\t\tfor ($i = 1; $i < sizeof($this->elements); $i++) {\n\t\t\t$listContent .= \", '#\" . $this->elements[$i] . \"'\";\n\t\t}\n\t\techo '<script type=\"text/javascript\">';\n\t\techo ' jQuery(document).ready(function() {';\n\t\techo '  var equalHeightElements = new Array(' . $listContent . ');';\n\t\techo '  equalHeight(equalHeightElements);';\n\t\techo ' });';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a list of elements that can be sorted by the user via drag'n'drop.\n *\n * @package metaHTML\n */\nclass htmlSortableList extends htmlElement {\n\n\t/** list of elements */\n\tprivate $elements = array();\n\t/** HTML ID */\n\tprivate $id = '';\n\t/** element width */\n\tprivate $elementWidth = '';\n\t/** on update event */\n\tprivate $onUpdate = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of elements as text (HTML special chars must be escaped already) or htmlElement\n\t * @param String HTML ID\n\t * @param String $elementWidth width of elements (default 250px)\n\t */\n\tfunction __construct($elements, $id, $elementWidth='250px') {\n\t\t$this->elements = $elements;\n\t\t$this->id = htmlspecialchars($id);\n\t\t$this->elementWidth = $elementWidth;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\techo '<ul style=\"width:' . $this->elementWidth . ';\" class=\"sortableList\" id=\"' . $this->id . '\">';\n\t\tforeach ($this->elements as $element) {\n\t\t\techo '<li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>';\n\t\t\tif ($element instanceof htmlElement) {\n\t\t\t\tparseHtml($module, $element, $values, $restricted, $tabindex, $scope);\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo $element;\n\t\t\t}\n\t\t\techo '</li>';\n\t\t}\n\t\techo '</ul>';\n\t\t$onUpdate = '';\n\t\tif ($this->onUpdate != null) {\n\t\t\t$onUpdate = '{\n\t\t\t\tupdate: function(event, ui) {' . $this->onUpdate . '},\n\t\t\t\tstart:  function(event, ui) {\n\t\t\t\t            var posOrig = ui.item.index();\n            \t\t\t\tui.item.data(\\'posOrig\\', posOrig);\n        \t\t\t\t}\n\t\t\t}';\n\t\t}\n\t\t$scriptContent = '\n\t\t\tjQuery(function() {\n\t\t\t\t$(\"#' . $this->id . '\").sortable(' . $onUpdate . ');\n\t\t\t\t$(\"#' . $this->id . '\").disableSelection();\n\t\t\t});';\n\t\t$script = new htmlJavaScript($scriptContent);\n\t\t$script->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the JS code that is executed when the element order was changed.\n\t * The code can access the variables event and ui. See JQueryUI docs for details.\n\t * ui.item.data('posOrig') will contain the original position of the moved element.\n\t *\n\t * @param String $onUpdate JS code\n\t */\n\tpublic function setOnUpdate($onUpdate) {\n\t\t$this->onUpdate = $onUpdate;\n\t}\n\n}\n\n/**\n * Creates a list of content elements in accordion style.\n * HTML special characters must be escaped before providing to htmlAccordion.\n */\nclass htmlAccordion extends htmlElement {\n\n\tprivate $id = null;\n\tprivate $elements = null;\n\tprivate $openInitial = '1';\n\tprivate $collapsible = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $id HTML ID\n\t * @param array $elements list of content elements array('title' => htmlElement)\n\t * @param String $openInitial index of element that is initially opened (default: 0), set to 'false' to close all\n\t * @param boolean $collapsible specifies if all elements may be closed at the same time (default: false, true if $openInitial is false)\n\t */\n\tfunction __construct($id, $elements, $openInitial = '0', $collapsible = false) {\n\t\t$this->id = $id;\n\t\t$this->elements = $elements;\n\t\t$this->openInitial = $openInitial;\n\t\tif (($openInitial === 'false') || ($openInitial === false)) {\n\t\t\t$this->collapsible = true;\n\t\t}\n\t\telse {\n\t\t\t$this->collapsible = $collapsible;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$result = array();\n\t\t$collapsible = 'false';\n\t\tif ($this->collapsible) {\n\t\t\t$collapsible = 'true';\n\t\t}\n\t\t$active = 'false';\n\t\tif ($this->openInitial !== false) {\n\t\t\t$active = $this->openInitial;\n\t\t}\n\t\techo '<div id=\"' . $this->id . '\">';\n\t\tforeach ($this->elements as $label => $content) {\n\t\t\techo '<h3>' . $label . '</h3>';\n\t\t\techo '<div>';\n\t\t\t$result = array_merge($result, $content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t\techo '</div>';\n\t\t}\n\t\techo '</div>';\n\t\t$hiddenIndexId = $this->id . \"_index\";\n\t\techo '<input type=\"hidden\" name=\"' . $hiddenIndexId . '\" id=\"' . $hiddenIndexId . '\" value=\"' . $active . '\">';\n\t\t$script = 'jQuery(function() {\n\t\t\t\t\t\t$( \"#' . $this->id . '\" ).accordion({\n\t\t\t\t\t\tcollapsible: ' . $collapsible . ',\n\t\t\t\t\t\tactive: ' . $active . ',\n\t\t\t\t\t\tactivate: function( event, ui ) {\n\t\t\t\t\t\t\t\t\tvar newOption = jQuery(\"#' . $this->id . '\").accordion( \"option\", \"active\" );\n\t\t\t\t\t\t\t\t\tjQuery(\"#' . $this->id . '_index\").val(newOption);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});';\n\t\t$js = new htmlJavaScript($script);\n\t\t$js->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\treturn $result;\n\t}\n\n}\n\n/**\n * Creates a Google reCAPTCHA element.\n *\n * @package metaHTML\n */\nclass htmlReCAPTCHA extends htmlElement {\n\n\t/** site key */\n\tprivate $key = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $key site key\n\t */\n\tfunction __construct($key) {\n\t\t$this->key = htmlspecialchars($key);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$script = new htmlScript('https://www.google.com/recaptcha/api.js');\n\t\t$script->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\techo '<div class=\"g-recaptcha\" data-sitekey=\"' . $this->key . '\"></div>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Responsive row with 12 column layout.\n */\nclass htmlResponsiveRow extends htmlElement {\n\n\t/** @var htmlResponsiveCell[] cells */\n\tprivate $cells = array();\n\t/** HTML ID */\n\tprivate $id = null;\n\n\t/**\n\t * Creates a new responsive row.\n\t *\n\t * @param htmlElement $label label element if this is a simple label+field row\n\t * @param htmlElement $field field element if this is a simple label+field row\n\t */\n\tpublic function __construct($label = null, $field = null) {\n\t\t$this->cells = array();\n\t\tif ($label != null) {\n\t\t\t$this->addLabel($label);\n\t\t}\n\t\tif ($field != null) {\n\t\t\t$this->addField($field);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the HTML id.\n\t *\n\t * @param string $id ID\n\t */\n\tpublic function setId($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * Adds a responsive cell to the row.\n\t *\n\t * @param htmlResponsiveCell $cell cell\n\t */\n\tpublic function addCell($cell) {\n\t\t$this->cells[] = $cell;\n\t}\n\n\t/**\n\t * Adds a cell with the given content and column counts.\n\t *\n\t * @param htmlElement $content content inside cell\n\t * @param int $numMobile number of columns for mobile view\n\t * @param int $numTablet number of columns for tablet view (set to mobile if null)\n\t * @param int $numDesktop number of columns for desktop view (set to tablet if null)\n\t * @param String $classes CSS classes separated by space\n\t */\n\tpublic function add($content, $numMobile = 12, $numTablet = null, $numDesktop = null, $classes = '') {\n\t\t$tabletCols = ($numTablet === null) ? $numMobile : $numTablet;\n\t\t$desktopCols = ($numDesktop === null) ? $tabletCols : $numDesktop;\n\t\t$this->addCell(new htmlResponsiveCell($content, $numMobile, $tabletCols, $desktopCols, $classes));\n\t}\n\n\t/**\n\t * Adds the content as a typical label with 12/6/6 columns and CSS class \"responsiveLabel\".\n\t *\n\t * @param htmlElement $content label\n\t * @param string $cssClasses additional CSS classes\n\t */\n\tpublic function addLabel($content, $cssClasses = '') {\n\t\t$this->add($content, 12, 6, 6, 'responsiveLabel nowrap ' . $cssClasses);\n\t}\n\n\t/**\n\t * Adds the content as a typical field with 12/6/6 columns and CSS class \"responsiveField\".\n\t *\n\t * @param htmlElement $content field\n\t * @param string $cssClasses CSS class names separated by space\n\t */\n\tpublic function addField($content, $cssClasses = '') {\n\t\t$this->add($content, 12, 6, 6, 'responsiveField ' . $cssClasses);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$cssClasses = implode(' ', $this->cssClasses);\n\t\t$idParam = '';\n\t\tif ($this->id !== null) {\n\t\t\t$idParam = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo '<div class=\"row ' . $cssClasses . '\"' .  $this->getDataAttributesAsString() . $idParam . '>';\n\t\tforeach ($this->cells as $cell) {\n\t\t\t$return = array_merge($return, $cell->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Adds a vertical spacer with 12 columns.\n\t *\n\t * @param string $space space in px or rem\n\t */\n\tpublic function addVerticalSpacer($space) {\n\t\t$this->add(new htmlSpacer(null,\t$space), 12);\n\t}\n\n\t/**\n\t * Returns the current number of cells.\n\t *\n\t * @return int cell count\n\t */\n\tpublic function getCellCount(): int {\n\t\treturn sizeof($this->cells);\n\t}\n\n}\n\n/**\n * Responsive cell inside htmlResponsiveRow with 12 column layout.\n */\nclass htmlResponsiveCell extends htmlElement {\n\n\tprivate $content = null;\n\tprivate $mobile = null;\n\tprivate $tablet = null;\n\tprivate $desktop = null;\n\tprivate $classes = '';\n\n\t/**\n\t * Constructs a cell inside a responsive row with 12 columns.\n\t *\n\t * @param htmlElement $content content inside cell\n\t * @param int $numMobile number of columns for mobile view\n\t * @param int $numTablet number of columns for tablet view\n\t * @param int $numDesktop number of columns for desktop view\n\t * @param String $classes CSS classes separated by space\n\t */\n\tpublic function __construct($content, $numMobile, $numTablet, $numDesktop, $classes = '') {\n\t\t$this->content = $content;\n\t\t$this->mobile = $numMobile;\n\t\t$this->tablet = $numTablet;\n\t\t$this->desktop = $numDesktop;\n\t\t$this->classes = $classes;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$clMobile = ($this->mobile > 0) ? 'small-' . $this->mobile : 'hide-for-small-only';\n\t\t$clTablet = ($this->tablet > 0) ? 'medium-' . $this->tablet : 'hide-for-medium-only';\n\t\t$clDesktop = ($this->desktop > 0) ? 'large-' . $this->desktop : 'hide-for-large-only';\n\n\t\techo '<div class=\"' . $clMobile . ' ' . $clTablet . ' ' . $clDesktop . ' columns ' . $this->classes . '\">';\n\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * A responsive input field that combines label, input field and help.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputField extends htmlInputField {\n\n\t/** Descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\t\n\t/**\n\t * Constructor\n\t *\n\t * @param String $label descriptive label\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param bool $required field is required\n\t */\n\tfunction __construct($label, $fieldName, $fieldValue = null, $helpID = null, $required = false) {\n\t\tparent::__construct($fieldName, $fieldValue);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->fieldSize = null;\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$tabletDesktopLabelColumns = $this->shortLabel ? 4 : 6;\n\t\t$row->add($labelGroup, 12, $tabletDesktopLabelColumns, $tabletDesktopLabelColumns, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$tabletDesktopFieldColumns = $this->shortLabel ? 8 : 6;\n\t\t$row->add($fieldGroup, 12, $tabletDesktopFieldColumns, $tabletDesktopFieldColumns, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * File upload with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputFileUpload extends htmlInputFileUpload {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** required */\n\tprivate $required = false;\n\t\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param string $required required field\n\t */\n\tfunction __construct($name, $label, $helpID = null, $required = false) {\n\t\tparent::__construct($name);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Sets the field required.\n\t *\n\t * @param bool $required field is required (default: true)\n\t */\n\tpublic function setRequired($required = true) {\n\t\t$this->required = $required;\n\t}\n\n}\n\n/**\n * Responsive text area with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputTextarea extends htmlInputTextarea {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount, $label, $helpID = null) {\n\t\tparent::__construct($name, $value, $colCount, $rowCount);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpCssClasses = array('margin-left5');\n\t\t\tif (!$this->richEdit) {\n\t\t\t\t$helpCssClasses[] = 'hide-on-tablet';\n\t\t\t}\n\t\t\t$helpLinkLabel->setCSSClasses($helpCssClasses);\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID) && !$this->richEdit) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('align-top', 'hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n}\n\n/**\n * Responsive select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveSelect extends htmlSelect {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements, $label, $helpID = null, $size = 1) {\n\t\tparent::__construct($name, $elements, $selectedElements, $size);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$tabletDesktopLabelColumns = $this->shortLabel ? 4 : 6;\n\t\t$row->add($labelGroup, 12, $tabletDesktopLabelColumns, $tabletDesktopLabelColumns, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\t$tabletDesktopFieldColumns = $this->shortLabel ? 8 : 6;\n\t\t$row->add($fieldGroup, 12, $tabletDesktopFieldColumns, $tabletDesktopFieldColumns, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlSelect::getShowHideSelector()\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * Responsive select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveRadio extends htmlRadio {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($label, $name, $elements, $selectedElement = null, $helpID = null) {\n\t\tparent::__construct($name, $elements, $selectedElement);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement(new htmlDiv(null, $this, array('float-left')));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement(new htmlDiv(null, $helpLink));\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n}\n\n/**\n * Responsive checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** long label */\n\tprivate $longLabel = false;\n\t/** label after checkbox */\n\tprivate $labelAfterCheckbox = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\t\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param bool $longLabel more space for label (default: false)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $longLabel = false) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->longLabel = $longLabel;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t$tabletColumnsLabel = 6;\n\t\t$tabletColumnsBox = 6;\n\t\t$mobileColumnsLabel = 10;\n\t\t$mobileColumnsBox = 2;\n\t\tif ($this->longLabel) {\n\t\t\t$tabletColumnsLabel = 10;\n\t\t\t$tabletColumnsBox = 2;\n\t\t}\n\t\tif ($this->shortLabel) {\n\t\t\t$tabletColumnsLabel = 4;\n\t\t\t$tabletColumnsBox = 8;\n\t\t}\n\t\t// label text\n\t\t$text = new htmlSpan(new htmlOutputText($this->label));\n\t\t$text->setCSSClasses($this->cssClasses);\n\t\t$text->setOnclick('jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('margin-left5 align-unset-img'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\tif ($this->labelAfterCheckbox) {\n\t\t\t$row->add($fieldGroup, $mobileColumnsBox, $tabletColumnsBox, $tabletColumnsBox, 'responsiveLabel nowrap');\n\t\t\t$row->add($text, $mobileColumnsLabel, $tabletColumnsLabel, $tabletColumnsLabel, 'responsiveField');\n\t\t}\n\t\telse {\n\t\t\t$row->add($text, $mobileColumnsLabel, $tabletColumnsLabel, $tabletColumnsLabel, 'responsiveLabel');\n\t\t\t$row->add($fieldGroup, $mobileColumnsBox, $tabletColumnsBox, $tabletColumnsBox, 'responsiveField nowrap');\n\t\t}\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputCheckbox::getShowHideSelector()\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n\t/**\n\t * Sets if the label should be shown after the checkbox instead before it.\n\t *\n\t * @param bool $labelAfterCheckbox show label after box\n\t */\n\tpublic function setLabelAfterCheckbox($labelAfterCheckbox = true) {\n\t\t$this->labelAfterCheckbox = $labelAfterCheckbox;\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * Responsive table.\n *\n * @author roland Gruber\n */\nclass htmlResponsiveTable extends htmlElement {\n\n\t/** @var string[] row titles */\n\tprivate $titles;\n\n\t/** htmlElement[][] data rows */\n\tprivate $data;\n\n\t/** widthes of the columns */\n\tprivate $widths = array();\n\n\t/** highlighted rows */\n\tprivate $highlighted = array();\n\t/** CSS class for odd row numbers */\n\tprivate $cssOddRow;\n\t/** CSS class for even row numbers */\n\tprivate $cssEvenRow;\n\t/** onclick code (row number => code) */\n\tprivate $onClick = array();\n\t/** ondoubleclick code (row number => code) */\n\tprivate $onDoubleClick = array();\n\n\t/**\n\t * Creates the table.\n\t *\n\t * @param string[] $titles row titles\n\t * @param htmlElement[][] $data data rows\n\t * @param int[] $highlighted list of row numbers that should be highlighted (starting at 0)\n\t */\n\tpublic function __construct($titles, $data, $highlighted = null) {\n\t\t$this->titles = $titles;\n\t\t$this->data = $data;\n\t\tif (!empty($highlighted) && is_array($highlighted)) {\n\t\t\t$this->highlighted = $highlighted;\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$classes = $this->cssClasses;\n\t\t$classes[] = 'responsive-table';\n\t\techo '<table class=\"' . implode(' ', $classes) . '\">';\n\t\techo '<thead>';\n\t\t$headClass = empty($this->cssOddRow) ? '' : ' class=\"' . $this->cssOddRow . '\"';\n\t\techo '<tr ' . $headClass . '>';\n\t\t$counter = 0;\n\t\tforeach ($this->titles as $title) {\n\t\t\t$width = '';\n\t\t\tif (isset($this->widths[$counter])) {\n\t\t\t\t$width = 'width=\"' . $this->widths[$counter] . '\"';\n\t\t\t}\n\t\t\techo '<th ' . $width . '>' . htmlspecialchars($title) . '</th>';\n\t\t\t$counter++;\n\t\t}\n\t\techo '</tr>';\n\t\techo '</thead>';\n\t\techo '<tbody>';\n\t\t$titleCount = sizeof($this->titles);\n\t\t$counter = 0;\n\t\tforeach ($this->data as $row) {\n\t\t\t$cssClass = '';\n\t\t\t$cssClasses = array();\n\t\t\tif (in_array($counter, $this->highlighted)) {\n\t\t\t\t$cssClasses[] = 'highlighted';\n\t\t\t}\n\t\t\tif (!empty($this->cssEvenRow) && ($counter % 2 === 0)) {\n\t\t\t\t$cssClasses[] = $this->cssEvenRow;\n\t\t\t}\n\t\t\tif (!empty($this->cssOddRow) && ($counter % 2 === 1)) {\n\t\t\t\t$cssClasses[] = $this->cssOddRow;\n\t\t\t}\n\t\t\tif (!empty($cssClasses)) {\n\t\t\t\t$cssClass = ' class=\"' . implode(' ', $cssClasses) . '\"';\n\t\t\t}\n\t\t\t$onClick = '';\n\t\t\tif (!empty($this->onClick[$counter])) {\n\t\t\t\t$onClick = ' onclick=\"' . $this->onClick[$counter] . '\"';\n\t\t\t}\n\t\t\t$onDoubleClick = '';\n\t\t\tif (!empty($this->onDoubleClick[$counter])) {\n\t\t\t\t$onDoubleClick = ' ondblclick=\"' . $this->onDoubleClick[$counter] . '\"';\n\t\t\t}\n\t\t\techo '<tr ' . $cssClass . $onClick . $onDoubleClick . '>';\n\t\t\tfor ($i = 0; $i < $titleCount; $i++) {\n\t\t\t\techo '<td data-label=\"' . $this->titles[$i] . '\">';\n\t\t\t\t$ids = parseHtml($module, $row[$i], $values, $restricted, $tabindex, $scope);\n\t\t\t\t$return = array_merge($return, $ids);\n\t\t\t\techo '</td>';\n\t\t\t}\n\t\t\techo '</tr>';\n\t\t\t$counter++;\n\t\t}\n\t\techo '</tbody>';\n\t\techo '</table>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the width of each column.\n\t *\n\t * @param string[] $widths widths\n\t */\n\tpublic function setWidths($widths) {\n\t\t$this->widths = $widths;\n\t}\n\n\t/**\n\t * Sets the CSS classes for odd and even rows.\n\t * The title row counts as row number -1.\n\t *\n\t * @param string $oddClass class for odd rows\n\t * @param string $evenClass class for even rows\n\t */\n\tpublic function setRowClasses($oddClass, $evenClass) {\n\t\t$this->cssOddRow = $oddClass;\n\t\t$this->cssEvenRow = $evenClass;\n\t}\n\n\t/**\n\t * Sets the onclick code for the rows.\n\t *\n\t * @param array $calls row number => code\n\t */\n\tpublic function setOnClickEvents($calls) {\n\t\t$this->onClick = $calls;\n\t}\n\n\t/**\n\t * Sets the ondoubleclick code for the rows.\n\t *\n\t * @param array $calls row number => code\n\t */\n\tpublic function setOnDoubleClickEvents($calls) {\n\t\t$this->onDoubleClick = $calls;\n\t}\n\n}\n\n/**\n * Renders a canvas.\n *\n * @author Roland Gruber\n */\nclass htmlCanvas extends htmlElement {\n\n\tprivate $id;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $id html id\n\t */\n\tpublic function __construct($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$classesValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<canvas id=\"' . $this->id . '\" ' . $classesValue . '>';\n\t\techo '</canvas>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Renders a video.\n *\n * @author Roland Gruber\n */\nclass htmlVideo extends htmlElement {\n\n\tprivate $id;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $id html id\n\t */\n\tpublic function __construct($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$classesValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<video id=\"' . $this->id . '\" ' . $classesValue . '>';\n\t\techo '</video>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Creates a form element for POST.\n *\n * @package metaHTML\n */\nclass htmlForm extends htmlElement {\n\n\t/** form name */\n\tprivate $name = null;\n\t/** submit target */\n\tprivate $action = null;\n\t/** inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name name\n\t * @param string $action target URL\n\t */\n\tfunction __construct(string $name, string $action, htmlElement $content) {\n\t\t$this->name = $name;\n\t\t$this->action = $action;\n\t\t$this->content = $content;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<form name=\"' . $this->name . '\" action=\"' . $this->action . '\" method=\"post\" enctype=\"multipart/form-data\">';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</form>';\n\t\treturn $return;\n\t}\n\n}\n\n", "<?php\nnamespace LAM\\TOOLS\\PDF_EDITOR;\nuse \\htmlResponsiveRow;\nuse \\htmlResponsiveSelect;\nuse \\htmlResponsiveInputField;\nuse \\htmlTitle;\nuse \\htmlButton;\nuse \\htmlOutputText;\nuse \\htmlGroup;\nuse \\htmlSelect;\nuse \\htmlInputField;\nuse \\htmlSubTitle;\nuse \\htmlResponsiveInputTextarea;\nuse \\htmlHiddenInput;\nuse \\htmlSpacer;\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PDF\\PDFTextSection;\nuse LAM\\PDF\\PDFEntrySection;\nuse LAM\\PDF\\PDFStructure;\nuse LAM\\PDF\\PDFSectionEntry;\nuse LAMException;\n\n/*\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2007 - 2021  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  Manages creating/changing of pdf structures.\n*/\n\n/**\n* Displays the main page of the PDF editor where the user can select the displayed entries.\n*\n* @author Michael Duergner\n* @author Roland Gruber\n* @package PDF\n*/\n\n/** security functions */\ninclude_once(__DIR__ . \"/../../lib/security.inc\");\n/** access to PDF configuration files */\ninclude_once(__DIR__ . '/../../lib/pdfstruct.inc');\n/** LDAP object */\ninclude_once(__DIR__ . '/../../lib/ldap.inc');\n/** LAM configuration */\ninclude_once(__DIR__ . '/../../lib/config.inc');\n/** module functions */\ninclude_once(__DIR__ . '/../../lib/modules.inc');\n\n// start session\nstartSecureSession();\nenforceUserIsLoggedIn();\n\n// die if no write access\nif (!checkIfWriteAccessIsAllowed()) {\n\tdie();\n}\n\ncheckIfToolIsActive('toolPDFEditor');\n\nsetlanguage();\n\nif (!empty($_POST)) {\n\tvalidateSecurityToken();\n}\n\n// check if user is logged in, if not go to login\nif (!$_SESSION['ldap'] || !$_SESSION['ldap']->server()) {\n\tmetaRefresh(\"../login.php\");\n\texit;\n}\n\n// Write $_POST variables to $_GET when form was submitted via post\nif (isset($_POST['type'])) {\n\t$_GET = $_POST;\n}\n\n$typeManager = new \\LAM\\TYPES\\TypeManager();\n$type = $typeManager->getConfiguredType($_GET['type']);\nif ($type->isHidden() || !checkIfWriteAccessIsAllowed($type->getId())) {\n\tlogNewMessage(LOG_ERR, 'User tried to access hidden PDF structure: ' . $type->getId());\n\tdie();\n}\n\n\n// Abort and go back to main pdf structure page\nif(isset($_GET['abort'])) {\n\tmetarefresh('pdfmain.php');\n\texit;\n}\n\n$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\n// Load PDF structure from file if it is not defined in session\nif (!isset($_SESSION['currentPDFStructure'])) {\n\t// Load structure file to be edit\n\ttry {\n\t\tif (isset($_GET['edit'])) {\n\t\t\t$_SESSION['currentPDFStructure'] = $pdfStructurePersistenceManager->readPdfStructure($_SESSION['config']->getName(),\n                $type->getId(), $_GET['edit']);\n\t\t}\n\t\t// Load default structure file when creating a new one\n\t\telse {\n\t\t    $structureNames = $pdfStructurePersistenceManager->getPDFStructures($_SESSION['config']->getName(),\n\t\t\t    $type->getId());\n\t\t    if (in_array('default', $structureNames)) {\n\t\t\t    $_SESSION['currentPDFStructure'] = $pdfStructurePersistenceManager->readPdfStructure($_SESSION['config']->getName(),\n\t\t\t\t    $type->getId(), 'default');\n            }\n\t\t    else {\n\t\t\t    $_SESSION['currentPDFStructure'] = new PDFStructure();\n            }\n\t\t}\n\t}\n\tcatch (LAMException $e) {\n\t\tmetaRefresh('pdfmain.php?loadFailed=1&name=' . $_GET['edit']);\n\t\texit;\n\t}\n}\n\nif (!empty($_POST['form_submit'])) {\n\tupdateBasicSettings($_SESSION['currentPDFStructure']);\n\tupdateSectionTitles($_SESSION['currentPDFStructure']);\n\taddSection($_SESSION['currentPDFStructure']);\n\taddSectionEntry($_SESSION['currentPDFStructure']);\n\tremoveItem($_SESSION['currentPDFStructure']);\n\tmoveUp($_SESSION['currentPDFStructure']);\n\tmoveDown($_SESSION['currentPDFStructure']);\n}\n\n// Check if pdfname is valid, then save current structure to file and go to\n// main pdf structure page\n$saveErrors = array();\nif(isset($_GET['submit'])) {\n\ttry {\n\t    $pdfStructurePersistenceManager->savePdfStructure($_SESSION['config']->getName(), $type->getId(), $_POST['pdfname'], $_SESSION['currentPDFStructure']);\n\t\tunset($_SESSION['currentPDFStructure']);\n\t\tmetaRefresh('pdfmain.php?savedSuccessfully=' . $_POST['pdfname']);\n\t\texit;\n\t}\n\tcatch (LAMException $e) {\n\t\t$saveErrors[] = array('ERROR', $e->getTitle(), $e->getMessage());\n\t}\n}\n\n$availablePDFFields = getAvailablePDFFields($type->getId());\n\n// Create the values for the dropdown boxes for section headline defined by\n// value entries and fetch all available modules\n$modules = array();\n$section_items_array = array();\n$section_items = '';\n$sortedModules = array();\nforeach($availablePDFFields as $module => $fields) {\n\tif ($module != 'main') {\n\t\t$title = getModuleAlias($module, $type->getScope());\n\t}\n\telse {\n\t\t$title = _('Main');\n\t}\n\t$sortedModules[$module] = $title;\n}\nnatcasesort($sortedModules);\nforeach($sortedModules as $module => $title) {\n\t$values = $availablePDFFields[$module];\n\tif (!is_array($values) || (sizeof($values) < 1)) {\n\t\tcontinue;\n\t}\n\t$modules[] = $module;\n\t$section_items .= \"<optgroup label=\\\"\" . $title . \"\\\"\\n>\";\n\tnatcasesort($values);\n\tforeach($values as $attribute => $attributeLabel) {\n\t\t$section_items_array[] = $module . '_' . $attribute;\n\t\t$section_items .= \"<option value=\\\"\" . $module . '_' . $attribute . \"\\\">\" . $attributeLabel . \"</option>\\n\";\n\t}\n\t$section_items .= \"</optgroup>\\n\";\n}\n$modules = join(',',$modules);\n\n// print header\ninclude __DIR__ . '/../../lib/adminHeader.inc';\n?>\n\t<div class=\"smallPaddingContent\">\n<?php\n\n// print error messages if any\nif (sizeof($saveErrors) > 0) {\n\tforeach ($saveErrors as $saveError) {\n\t\tcall_user_func_array('StatusMessage', $saveError);\n\t}\n\techo \"<br>\\n\";\n}\n\n$newFieldFieldElements = array();\nforeach($sortedModules as $module => $title) {\n\t$fields = $availablePDFFields[$module];\n\tif (isset($fields) && is_array($fields) && (sizeof($fields) > 0)) {\n\t\t$moduleFields = array();\n\t\tforeach ($fields as $field => $fieldLabel) {\n\t\t\t$moduleFields[$fieldLabel] = $module . \"_\" . $field;\n\t\t}\n\t\t$newFieldFieldElements[$title] = $moduleFields;\n\t}\n}\n\n// structure name\n$structureName = '';\nif (isset($_GET['edit'])) {\n\t$structureName = $_GET['edit'];\n}\nelse if (isset($_POST['pdfname'])) {\n\t$structureName = $_POST['pdfname'];\n}\n// headline\n$headline = $_SESSION['currentPDFStructure']->getTitle();\n// logo\n$logoFiles = $pdfStructurePersistenceManager->getPdfLogos($_SESSION['config']->getName(), true);\n$logos = array(_('No logo') => 'none');\nforeach($logoFiles as $logoFile) {\n\t$logos[$logoFile->getName() . ' (' . $logoFile->getWidth() . ' x ' . $logoFile->getHeight() . \")\"] = $logoFile->getName();\n}\n$selectedLogo = array('printLogo.jpg');\nif (isset($_SESSION['currentPDFStructure'])) {\n\t$selectedLogo = array($_SESSION['currentPDFStructure']->getLogo());\n}\n\n?>\n\t<form id=\"inputForm\" action=\"pdfpage.php\" method=\"post\" onSubmit=\"saveScrollPosition('inputForm')\">\n<?php\n$sectionElements = array();\n$nonTextSectionElements = array();\n\n$container = new htmlResponsiveRow();\n$container->add(new htmlTitle(_('PDF editor')), 12);\n\n// main content\n$mainContent = new htmlResponsiveRow();\n$structureNameInput = new htmlResponsiveInputField(_(\"Structure name\"), 'pdfname', $structureName, '360');\n$structureNameInput->setRequired(true);\n$mainContent->add($structureNameInput, 12);\n$mainContent->add(new htmlResponsiveInputField(_('Headline'), 'headline', $headline), 12);\n$logoSelect = new htmlResponsiveSelect('logoFile', $logos, $selectedLogo, _('Logo'));\n$logoSelect->setHasDescriptiveElements(true);\n$mainContent->add($logoSelect, 12);\n$foldingMarks = 'no';\nif (isset($_SESSION['currentPDFStructure'])) {\n\t$foldingMarks = $_SESSION['currentPDFStructure']->getFoldingMarks();\n}\n$possibleFoldingMarks = array(_('No') => 'no', _('Yes') => 'standard');\n$foldingMarksSelect = new htmlResponsiveSelect('foldingmarks', $possibleFoldingMarks, array($foldingMarks), _('Folding marks'));\n$foldingMarksSelect->setHasDescriptiveElements(true);\n$mainContent->add($foldingMarksSelect, 12);\n$mainContent->addVerticalSpacer('3rem');\n// PDF structure\n$structure = $_SESSION['currentPDFStructure'];\n// print every entry in the current structure\n$structureContent = new htmlResponsiveRow();\n$sections = $structure->getSections();\nforeach ($sections as $key => $section) {\n\t// create the up/down/remove links\n\t$linkUp = new htmlButton('up_section_' . $key, 'up.svg', true);\n\t$linkUp->setTitle(_(\"Up\"));\n\t$linkDown = new htmlButton('down_section_' . $key, 'down.svg', true);\n\t$linkDown->setTitle(_(\"Down\"));\n\t$linkRemove = new htmlButton('remove_section_' . $key, 'del.svg', true);\n\t$linkRemove->setTitle(_(\"Remove\"));\n\t$emptyBox = new htmlSpacer('19px', null);\n\t// We have a new section to start\n\tif($section instanceof PDFEntrySection) {\n\t\tif($section->isAttributeTitle()) {\n\t\t\t$section_headline = translateFieldIDToName($section->getPdfKey(), $type->getScope(), $availablePDFFields);\n\t\t\tif ($section_headline === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$section_headline = $section->getTitle();\n\t\t}\n\t\t$nonTextSectionElements[$section_headline] = $key;\n\t\t$sectionElements[$section_headline] = $key;\n\t\t$structureContent->addVerticalSpacer('2rem');\n\t\t// Section headline is a value entry\n\t\tif($section->isAttributeTitle()) {\n\t\t\t$headlineElements = array();\n\t\t\tforeach($section_items_array as $item) {\n\t\t\t\t$headlineElements[translateFieldIDToName($item, $type->getScope(), $availablePDFFields)] = '_' . $item;\n\t\t\t}\n\t\t\t$sectionHeadlineSelect = new htmlSelect('section_' . $key, $headlineElements, array('_' . $section->getPdfKey()));\n\t\t\t$sectionHeadlineSelect->setHasDescriptiveElements(true);\n\t\t\t$structureContent->addLabel($sectionHeadlineSelect);\n\t\t}\n\t\t// Section headline is a user text\n\t\telse {\n\t\t\t$sectionHeadlineInput = new htmlInputField('section_' . $key, $section_headline);\n\t\t\t$structureContent->addLabel($sectionHeadlineInput);\n\t\t}\n\t\t$actionGroup = new htmlGroup();\n\t\tif ($key != 0) {\n\t\t\t$actionGroup->addElement($linkUp);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$hasAdditionalSections = $key < (sizeof($sections) - 1);\n\t\tif ($hasAdditionalSections) {\n\t\t\t$actionGroup->addElement($linkDown);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$actionGroup->addElement($linkRemove);\n\t\t$structureContent->addField($actionGroup);\n\t\t// add section entries\n\t\t$sectionEntries = $section->getEntries();\n\t\tforeach ($sectionEntries as $e => $sectionEntry) {\n\t\t\t$fieldLabel = translateFieldIDToName($sectionEntry->getKey(), $type->getScope(), $availablePDFFields);\n\t\t\tif ($fieldLabel === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$structureContent->addVerticalSpacer('1rem');\n\t\t\t$fieldOutput = new htmlOutputText($fieldLabel);\n\t\t\t$structureContent->addLabel($fieldOutput);\n\t\t\t$actionGroup = new htmlGroup();\n\t\t\tif ($e != 0) {\n\t\t\t\t$entryLinkUp = new htmlButton('up_entry_' . $key . '_' . $e, 'up.svg', true);\n\t\t\t\t$entryLinkUp->setTitle(_(\"Up\"));\n\t\t\t\t$actionGroup->addElement($entryLinkUp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$actionGroup->addElement($emptyBox);\n\t\t\t}\n\t\t\tif ($e < (sizeof($sectionEntries) - 1)) {\n\t\t\t\t$linkDown = new htmlButton('down_entry_' . $key . '_' . $e, 'down.svg', true);\n\t\t\t\t$linkDown->setTitle(_(\"Down\"));\n\t\t\t\t$actionGroup->addElement($linkDown);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$actionGroup->addElement($emptyBox);\n\t\t\t}\n\t\t\t$entryLinkRemove = new htmlButton('remove_entry_' . $key . '_' . $e, 'del.svg', true);\n\t\t\t$entryLinkRemove->setTitle(_(\"Remove\"));\n\t\t\t$actionGroup->addElement($entryLinkRemove, true);\n\t\t\t$structureContent->addField($actionGroup);\n\t\t}\n\t}\n\t// We have to include a static text.\n\telseif($section instanceof PDFTextSection) {\n\t\t// Add current satic text for dropdown box needed for the position when inserting a new\n\t\t// section or static text entry\n\t\t$textSnippet = $section->getText();\n\t\t$textSnippet = str_replace(array(\"\\n\", \"\\r\"), array(\" \", \" \"), $textSnippet);\n\t\t$textSnippet = trim($textSnippet);\n\t\tif (strlen($textSnippet) > 15) {\n\t\t\t$textSnippet = substr($textSnippet, 0, 15) . '...';\n\t\t}\n\t\t$textSnippet = htmlspecialchars($textSnippet);\n\t\t$sectionElements[_('Static text') . ': ' . $textSnippet] = $key;\n\t\t$sectionHeadlineOutput = new htmlOutputText(_('Static text'));\n\t\t$structureContent->addLabel($sectionHeadlineOutput);\n\t\t$actionGroup = new htmlGroup();\n\t\tif ($key != 0) {\n\t\t\t$actionGroup->addElement($linkUp);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\tif ($key != sizeof($sections) - 1) {\n\t\t\t$actionGroup->addElement($linkDown);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$actionGroup->addElement($linkRemove, true);\n\t\t$structureContent->addField($actionGroup);\n\t\t$structureContent->addVerticalSpacer('1rem');\n\t\t$staticTextOutput = new htmlOutputText($section->getText());\n\t\t$staticTextOutput->setPreformatted();\n\t\t$structureContent->add($staticTextOutput, 12);\n\t}\n}\n$sectionElements[_('End')] = sizeof($structure->getSections());\n$mainContent->add($structureContent, 12);\n$container->add($mainContent, 12);\n$container->addVerticalSpacer('2rem');\n\n// new field\nif (!empty($nonTextSectionElements)) {\n\t$newFieldContainer = new htmlResponsiveRow();\n\t$newFieldContainer->add(new htmlSubTitle(_('New field')), 12);\n\t$newFieldFieldSelect = new htmlResponsiveSelect('new_field', $newFieldFieldElements, array(), _('Field'));\n\t$newFieldFieldSelect->setHasDescriptiveElements(true);\n\t$newFieldFieldSelect->setContainsOptgroups(true);\n\t$newFieldContainer->add($newFieldFieldSelect, 12);\n\t$newFieldSectionSelect = new htmlResponsiveSelect('add_field_position', $nonTextSectionElements, array(), _('Position'));\n\t$newFieldSectionSelect->setHasDescriptiveElements(true);\n\t$newFieldContainer->add($newFieldSectionSelect, 12);\n\t$newFieldContainer->addLabel(new htmlOutputText('&nbsp;', false));\n\t$newFieldContainer->addField(new htmlButton('add_new_field', _('Add')));\n\t$container->add($newFieldContainer, 12);\n}\n\n// new section\n$container->addVerticalSpacer('1rem');\n$newSectionContent = new htmlResponsiveRow();\n$newSectionContent->add(new htmlSubTitle(_('New section')), 12);\n// add new section with text title\n$newSectionContent->add(new htmlResponsiveInputField(_(\"Headline\"), 'new_section_text'), 12);\n$newSectionPositionSelect1 = new htmlResponsiveSelect('add_sectionText_position', $sectionElements, array(), _('Position'));\n$newSectionPositionSelect1->setHasDescriptiveElements(true);\n$newSectionPositionSelect1->setSortElements(false);\n$newSectionContent->add($newSectionPositionSelect1, 12);\n$newSectionContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newSectionContent->addField(new htmlButton('add_sectionText', _('Add')));\n$newSectionContent->addVerticalSpacer('2rem');\n// add new section with field title\n$newSectionFieldSelect = new htmlResponsiveSelect('new_section_item', $newFieldFieldElements, array(), _(\"Headline\"));\n$newSectionFieldSelect->setHasDescriptiveElements(true);\n$newSectionFieldSelect->setContainsOptgroups(true);\n$newSectionContent->add($newSectionFieldSelect, 12);\n$newSectionPositionSelect2 = new htmlResponsiveSelect('add_section_position', $sectionElements, array(), _('Position'));\n$newSectionPositionSelect2->setHasDescriptiveElements(true);\n$newSectionPositionSelect2->setSortElements(false);\n$newSectionContent->add($newSectionPositionSelect2, 12);\n$newSectionContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newSectionContent->addField(new htmlButton('add_section', _('Add')));\n\n// new text area\n$container->add($newSectionContent, 12);\n$container->addVerticalSpacer('1rem');\n$newTextFieldContent = new htmlResponsiveRow();\n$newTextFieldContent->add(new htmlSubTitle(_('New text area')), 12);\n$newTextFieldContent->add(new htmlResponsiveInputTextarea('text_text', '', 40, 3, _('Static text')), 12);\n$newTextFieldPositionSelect = new htmlResponsiveSelect('add_text_position', $sectionElements, array(), _('Position'));\n$newTextFieldPositionSelect->setHasDescriptiveElements(true);\n$newTextFieldPositionSelect->setSortElements(false);\n$newTextFieldContent->add($newTextFieldPositionSelect, 12);\n$newTextFieldContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newTextFieldContent->addField(new htmlButton('add_text', _('Add')));\n$newTextFieldContent->addVerticalSpacer('2rem');\n$container->add($newTextFieldContent, 12);\n\n// buttons\n$buttonContainer = new htmlResponsiveRow();\n$saveButton = new htmlButton('submit', _(\"Save\"));\n$saveButton->setCSSClasses(array('lam-primary'));\n$cancelButton = new htmlButton('abort', _(\"Cancel\"));\n$buttonGroup = new htmlGroup();\n$buttonGroup->addElement($saveButton);\n$buttonGroup->addElement($cancelButton);\n$buttonContainer->add($buttonGroup, 12);\n$buttonContainer->add(new htmlHiddenInput('modules', $modules), 4);\n$buttonContainer->add(new htmlHiddenInput('type', $type->getId()), 4);\n$buttonContainer->add(new htmlHiddenInput('form_submit', 'true'), 4);\n\n$container->add($buttonContainer, 12);\naddSecurityTokenToMetaHTML($container);\n\n$tabindex = 1;\nparseHtml(null, $container, array(), false, $tabindex, $type->getScope());\n\nif ((sizeof($saveErrors) == 0) && isset($_POST['scrollPositionTop']) && isset($_POST['scrollPositionLeft'])) {\n\t// scroll to last position\n\techo '<script type=\"text/javascript\">\n\t\tjQuery(document).ready(function() {\n\t\t\tjQuery(window).scrollTop(' . $_POST['scrollPositionTop'] . ');\n\t\t\tjQuery(window).scrollLeft('. $_POST['scrollPositionLeft'] . ');\n\t});\n\t</script>';\n}\n\necho '</form></div>';\ninclude __DIR__ . '/../../lib/adminFooter.inc';\n\n\n/**\n * Translates a given field ID (e.g. inetOrgPerson_givenName) to its descriptive name.\n *\n * @param String $id field ID\n * @param String $scope account type\n * @param array $availablePDFFields available PDF fields\n * @return string|null field label or null if no matching module found\n */\nfunction translateFieldIDToName($id, $scope, $availablePDFFields) {\n\tforeach ($availablePDFFields as $module => $fields) {\n\t\tif (!(strpos($id, $module . '_') === 0)) {\n\t\t\tcontinue;\n\t\t}\n\t\tforeach ($fields as $name => $label) {\n\t\t\tif ($id == $module . '_' . $name) {\n\t\t\t\tif ($module == 'main') {\n\t\t\t\t\treturn _('Main') . ': ' . $label;\n\t\t\t\t}\n\t\t\t\telse  {\n\t\t\t\t\treturn getModuleAlias($module, $scope) . ': ' . $label;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Updates basic settings such as logo and head line.\n *\n * @param PDFStructure $structure\n */\nfunction updateBasicSettings(PDFStructure &$structure) {\n\t// set headline\n\tif (isset($_POST['headline'])) {\n\t\t$structure->setTitle(str_replace('<', '', str_replace('>', '', $_POST['headline'])));\n\t}\n\t// set logo\n\tif (isset($_POST['logoFile'])) {\n\t\t$structure->setLogo($_POST['logoFile']);\n\t}\n\t// set folding marks\n\tif (isset($_POST['foldingmarks'])) {\n\t\t$structure->setFoldingMarks($_POST['foldingmarks']);\n\t}\n}\n\n/**\n * Updates section titles.\n *\n * @param PDFStructure $structure\n */\nfunction updateSectionTitles(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\tif (strpos($key, 'section_') === 0) {\n\t\t\t$pos = substr($key, strlen('section_'));\n\t\t\t$sections[$pos]->setTitle($value);\n\t\t}\n\t}\n}\n\n/**\n * Adds a new section if requested.\n *\n * @param PDFStructure $structure\n */\nfunction addSection(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\t// add a new text field\n\tif(isset($_POST['add_text'])) {\n\t\t// Check if text for static text field is specified\n\t\tif(empty($_POST['text_text'])) {\n\t\t\tStatusMessage('ERROR',_('No static text specified'),_('The static text must contain at least one character.'));\n\t\t}\n\t\telse {\n\t\t\t$section = new PDFTextSection(str_replace(\"\\r\", \"\", $_POST['text_text']));\n\t\t\tarray_splice($sections, $_POST['add_text_position'], 0, array($section));\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n\t// add a new section with text headline\n\telseif(isset($_POST['add_sectionText'])) {\n\t\t// Check if name for new section is specified when needed\n\t\tif(empty($_POST['new_section_text'])) {\n\t\t\tStatusMessage('ERROR',_('No section text specified'),_('The headline for a new section must contain at least one character.'));\n\t\t}\n\t\telse {\n\t\t\t$section = new PDFEntrySection($_POST['new_section_text']);\n\t\t\tarray_splice($sections, $_POST['add_sectionText_position'], 0, array($section));\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n\t// Add a new section with item as headline\n\telseif(isset($_POST['add_section'])) {\n\t\t$section = new PDFEntrySection('_' . $_POST['new_section_item']);\n\t\tarray_splice($sections, $_POST['add_section_position'], 0, array($section));\n\t\t$structure->setSections($sections);\n\t}\n}\n\n/**\n * Adds a new entry to a section if requested.\n *\n * @param PDFStructure $structure\n */\nfunction addSectionEntry(PDFStructure &$structure) {\n\tif(isset($_POST['add_new_field'])) {\n\t\t$field = new PDFSectionEntry($_POST['new_field']);\n\t\t$sections = $structure->getSections();\n\t\t$pos = $_POST['add_field_position'];\n\t\t$entries = $sections[$pos]->getEntries();\n\t\t$entries[] = $field;\n\t\t$sections[$pos]->setEntries($entries);\n\t\t$structure->setSections($sections);\n\t}\n}\n\n/**\n * Removes a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction removeItem(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// remove section\n\t\tif (strpos($key, 'remove_section_') === 0) {\n\t\t\t$pos = substr($key, strlen('remove_section_'));\n\t\t\tunset($sections[$pos]);\n\t\t\t$sections = array_values($sections);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// remove section entry\n\t\tif (strpos($key, 'remove_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('remove_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = $parts[1];\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\tunset($entries[$entryPos]);\n\t\t\t$entries = array_values($entries);\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n\n/**\n * Moves up a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction moveUp(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// move section\n\t\tif (strpos($key, 'up_section_') === 0) {\n\t\t\t$pos = intval(substr($key, strlen('up_section_')));\n\t\t\t$sectionTmp = $sections[$pos - 1];\n\t\t\t$sections[$pos - 1] = $sections[$pos];\n\t\t\t$sections[$pos] = $sectionTmp;\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// move section entry\n\t\tif (strpos($key, 'up_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('up_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = intval($parts[1]);\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\t$entryTmp = $entries[$entryPos - 1];\n\t\t\t$entries[$entryPos - 1] = $entries[$entryPos];\n\t\t\t$entries[$entryPos] = $entryTmp;\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n\n/**\n * Moves down a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction moveDown(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// move section\n\t\tif (strpos($key, 'down_section_') === 0) {\n\t\t\t$pos = intval(substr($key, strlen('down_section_')));\n\t\t\t$sectionTmp = $sections[$pos + 1];\n\t\t\t$sections[$pos + 1] = $sections[$pos];\n\t\t\t$sections[$pos] = $sectionTmp;\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// move section entry\n\t\tif (strpos($key, 'down_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('down_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = intval($parts[1]);\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\t$entryTmp = $entries[$entryPos + 1];\n\t\t\t$entries[$entryPos + 1] = $entries[$entryPos];\n\t\t\t$entries[$entryPos] = $entryTmp;\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n"], "fixing_code": ["June 2022 8.0\n  - Extended user account status and locking options\n  - Fixed bugs:\n   -> Hidden account is displayed (257)\n   -> Security issues in PDF editor and profile editor\n\n09.03.2022 7.9\n  - Tree view:\n   -> Support multiple roots (e.g. add \"cn=config\")\n   -> Added function to check password hashes against a given password\n  - Shadow: allow to set shadowLastChange in file upload\n  - Docker: upgrade OS to Debian Bullseye\n  - LAM Pro:\n   -> Support multiple TO addresses for license expiration email\n   -> Custom scripts: $INFO.debug$ wildcard prints all possible wildcards and their values\n   -> Custom scripts: extra INFO wildcards for password change options\n   -> Configuration import: allow to select self service profiles to import (168)\n  - Fixed bugs:\n   -> Tree view: check session expiration\n\n28.12.2021 7.8\n  - Restyling of LAM\n  - Allow to override global password policy in server profile (160)\n  - Do not print random password if sent via email (165)\n  - LAM Pro:\n   -> PowerDNS support\n   -> Device: allow multiple cn values\n  - Fixed bugs:\n   -> PDF does not contain all group members (249)\n   -> File upload issue on PHP 8 (153)\n   -> Export issue on non-Pro version (155)\n   -> Force password change for 389ds does not work on password quick change page (251)\n\n\n30.09.2021 7.7\n  - 2-factor authentication with OpenID\n  - Send proper response code on failed login\n  - LAM Pro:\n   -> OpenLDAP 2FA support for TOTP\n  ->Fixed bugs:\n   -> Issues with list filter if only one result is found (241)\n   -> Allow to sync empty list of groups in group of names user module (242)\n   -> Windows lockout duration and password maximum age computed incorrectly\n   -> Wrong status for nsAccountLock (245)\n\n\n05.07.2021 7.6\n  - Allow to store whole LAM configuration in MySQL database\n  - Docker: new options for configuration location and LAM Pro license\n  - Full PHP 8 compatibility\n  - Replaced tree view and moved it to tools menu\n  - Wildcards in edit screen support lower-case mode (e.g. \"$_firstname\")\n  - Windows: more fields can be hidden\n  - LAM Pro:\n   -> Export/Import of cron jobs\n   -> Mail server encryption type can be configured (TLS/SSL/none)\n   -> User self registration: support to define uid field to use constant or custom validation\n   -> Group of names user module: allow to sync memberships from other user\n   -> Custom fields:\n    * Support password change dialog in user edit view\n    * Added date and email validation for text fields\n    * Support password reset page for password fields\n    * New field types: LDAP date, LDAP date and time\n   -> Password self reset: fields on first page can be prefilled by URL parameter\n  - Fixed bugs:\n   -> Truncated mail text field in \"LAM Pro password mail settings\" and 2FA base URLs\n   -> 389ds: support password change and force password in one save action\n\n\n30.03.2021 7.5\n  - PHP 7.3 required\n  - PHP 8.0 compatibility (except tree view)\n  - Support copying LDAP entries from account list\n  - Account/PDF profiles: management of global templates and logos\n  - Group of names: allow filter by member/owner (#151)\n  - General information: link to groups (#152)\n  - LAM Pro:\n   -> Self registration: support binary attributes (e.g. for jpegPhoto)\n   -> Self registration: support custom mail attributes and mail from constant value (149)\n   -> Self registration: evaluate autorange at account creation (154)\n   -> MIT Kerberos: check Kerberos password policy on password change, better error handling\n   -> Self Service: new field to show user's quota values\n   -> Self Service: allow to create Unix home directory during registration\n   -> Custom type: allow for user/group/host to be able to reuse existing modules\n\n\n06.12.2020 7.4\n  - Argond2id support for password hashes (requires PHP 7.3) (#113)\n  - 2-factor authentication:\n   -> Support for Okta\n   -> WebAuthn devices can be named in Self Service and WebAuthn tool\n  - LAM Pro:\n   -> MIT Kerberos policies support\n   -> User self registration: added admin approval option and info mail for user after creation\n\n\n22.09.2020 7.3\n  - PHP 7.4 compatibility\n  - Configuration export and import\n  - Server profiles support to specify a part of the DN to hide\n  - Show password prompt when a user with expired password logs into LAM admin interface (requires PHP 7.2)\n  - Better error messages on login when account is expired/deactivated/...\n  - Personal/Windows: photo can be uploaded via webcam\n  - Windows users: group display format can be configured (cn/dn)\n  - Support PBKDF2-SHA512 password hashes\n  - LAM Pro:\n   -> Windows: new cron job to send users a summary of their managed groups\n  - Fixed bugs:\n   -> Unix groups: memberUid was not deleted correctly when forced sync with group of names is active\n\n\n01.05.2020 7.2\n  - Unix: allow to create group with same name during user creation\n  - LAM Pro:\n   -> EMail sending can be done via SMTP without local mail server\n   -> License expiration warning can be sent via email or disabled\n  - Fixed bugs:\n   -> Captcha don't show anymore in Self Service login page (213)\n   -> Unix memberships cannot be changed. This issue can also affect other membership relations.\n   -> Missing locales on Docker image\n\n\n17.03.2020 7.1\n  - PHP 7 required\n  - WebAuthn/FIDO2 support for 2-factor-authentication (requires PHP 7.2)\n  - IMAP: changed library to support latest TLS versions\n  - Personal: support display name (hidden by default in server profile)\n  - Windows users: support allowed workstations, more profile options\n  - Reactivated Polish translation\n  - LAM Pro:\n   -> PPolicy: support for password check module\n   -> Windows AD LDS support (users and groups)\n   -> User self registration: support Active Directory/Samba4\n\n\n21.12.2019 7.0\n  - Lamdaemon can be configured with directory prefix for homedirs\n  - Account list filters match on substrings instead of whole value\n  - YubiKey: support to configure multiple verification servers\n  - Windows hosts: added last password change and last login\n  - Deactivated non-maintained translations: Catalan, Czech, Hungarian, Polish and Turkish\n    Contact us if you would like to take over. Translators get LAM Pro for free (commercial use included).\n  - Docker updates\n  - Fixed bugs:\n   -> Missing CSS for Duo\n   -> Editing of DNs with comma on Windows (210)\n\n\n29.09.2019 6.9\n  - Group account types can show member+owner count in list view\n  - 2-factor authentication:\n   -> Duo support\n   -> user name attribute for privacyIDEA can be specified\n  - LAM Pro:\n   -> New self service settings for login and main page footer\n   -> Custom fields: custom labels for LDAP search select list\n  - Fixed bugs:\n   -> Configuration issue with Unix user/host module (206)\n\n\n02.07.2019 6.8\n  - Parallel editing of multiple entries in different browser tabs supported\n  - LAM supports the progressive web app standard which allows to install LAM as an icon on home screen\n  - Windows: added home drive and force password change to profile editor\n  - Unix: password management can be disabled in module settings\n  - LAM Pro:\n   -> Bind DLZ: entry table can show record data (use special attribute \"#records\" in server profile)\n   -> Self service: support legacy attribute \"email\" for password self reset and user self registration\n  - Fixed bugs:\n   -> Users: No drop-down filter box for account status (200)\n   -> Custom fields: Account type \"Groups\" not saving/deleting fields (66)\n\n\n25.03.2019 6.7\n  - Added YubiKey as 2-factor authentication provider\n  - Support logging to remote syslog server\n  - PHP 7.3 support\n  - LAM Pro:\n   -> Allow to mark text and text area fields as required\n   -> New self service fields:\n    -> Mail routing\n    -> Windows proxy addresses + mail alias\n    -> Shadow account expiration date\n    -> Unix and group of names memberships\n   -> Base URL for emails in self service can be configured in self service profile\n   -> Bind DLZ: support DNAME+XFR records and descriptions in records (requires latest LDAP schema)\n   -> Cron jobs: added Shadow account expiration notification job\n  - Fixed bugs:\n   -> Allow tree-only configurations without any other tab\n\n\n28.12.2018 6.6\n  - New import/export in tools menu\n  - YubiKey support\n  - Windows users:\n    -> Manage \"departmentNumber\" (needs to be activated via LAM server profile)\n    -> Sync group memberships from Unix and group of names\n  - LAM Pro:\n    -> Easy setting of background color in self service profile\n    -> Cron jobs: added Windows/Qmail/FreeRadius account expiration notification jobs\n    -> Bind DLZ: usability improvements and small fixes\n\n\n25.09.2018 6.5\n  - Password change possible via LDAP EXOP operation (set LDAP_EXOP as password hash, requires PHP 7.2)\n  - Support Imagick and GD\n  - Dropped support for Apache 2.2\n  - Upload: allow to overwrite existing accounts\n  - Personal: photos can be printed in PDF export\n  - Kolab updates\n  - LAM Pro:\n   -> Auto deletion of entries with dynamic directory services support (requires PHP 7.2)\n  - Fixed bugs:\n   -> Issue when changing key case of uid (#197)\n\n\n20.06.2018 6.4\n  - Imagick PHP extension required\n  - Passwords can be checked against external service (e.g. https://api.pwnedpasswords.com/range)\n  - Personal/Windows: image cropping support\n  - Better filtering of account lists\n  - Unix: Unix, Windows and group of names memberships can be synced in group selection\n  - IMAP: create mailbox via file upload\n  - PHP 7.2 support\n  - Support for \",\" in DN\n  - LAM Pro:\n   -> Better support for 389ds password expiration\n  - Fixed bugs:\n   -> Error on password reset page when custom fields is used (194)\n\n\n19.03.2018 6.3\n  - Server profile: added option if referential integrity overlay is active to skip cleanup actions\n  - Unix: several options are now specific to subaccount types (reconfiguration required!)\n  - Fixed bugs:\n   -> Security fixes (XSS vulnerabilities CVE-2018-8763 and CSRF token in URL CVE-2018-8764)\n   -> Quota for Windows groups did not work\n  - LAM Pro:\n   -> Support custom structural object classes with new custom type\n   -> Support dynamic lists\n   -> Self service login and password self reset can be secured with captcha\n\n\n04.02.2018 6.2.1\n  - Fixed bugs:\n   -> Login page not working when no server profile exists (44)\n   -> LAM Pro: Password Self Reset has issues when both security question and confirmation mail are activated.\n   -> LAM main configuration: certificate buttons do not work\n\n\n13.12.2017 6.2\n  - License changed from GPL v2 to GPL v3\n  - PHP 5.6 and Internet Explorer 11 or later required\n  - PDF export supports Chinese, Japan and Korean\n  - Account status also shows expired accounts\n  - Quota: support k/m/g/t/K/M/G/T to specify values in e.g. kB\n  - LAM Pro:\n   -> Cron jobs include better logging and support dry-run\n\n\n19.09.2017 6.1\n  - Automatically trim input fields to avoid trailing/leading spaces\n  - LAM Pro:\n   -> Custom fields: support wildcards in text fields such as $firstname\n   -> Custom fields: specify minimum/maximum count for multi-value entries\n   -> Custom fields: new type for constant values\n  - Fixed bugs:\n   -> Password modify page reports error on password change when posixAccount is present for users\n   -> Nginx configuration files did not include \"fastcgi_param SCRIPT_FILENAME $request_filename;\" (193)\n\n\n20.07.2017 6.0.1\n  - Fixed bugs:\n   -> Configuration file fills up with empty values\n   -> Tool visibility settings\n\n\n26.06.2017 6.0\n  - Support multiple configurations for same account type\n  - PHP 7.1 compatibility\n  - Courier users and mail aliases\n  - Windows: Support unlocking of users with too many failed login attempts\n  - Samba 3: added account expiration date to PDF fields\n  - LAM Pro:\n   -> Custom fields: can be used for file upload\n   -> Custom fields: new selection list type that gets options from LDAP search\n   -> Kopano support\n\n\n15.03.2017 5.7\n  - 2-factor authentication for admin login and self service with privacyIDEA\n  - PDF files use DejaVu serif font for better readability and more supported characters (e.g. Cyrillic)\n  - Windows users: the department option now uses attribute \"department\" instead of \"departmentNumber\"\n  - Updated Debian dependencies\n  - Fixed bugs:\n   -> Comparison issue prevents saving of values (185)\n\n\n18.12.2016 5.6\n  - New mechanism to replace wildcards in user edit screen. Personal/Unix support more wildcards like \"$firstname\".\n  - Windows: added support for pager, otherPager, mobile, otherMobile, company and proxyAddresses (disabled by default in server profile)\n  - Mail routing: enable for groups and allow to add/remove the extension\n  - LAM Pro:\n   -> Password self reset: support for up to 3 security questions\n   -> 389ds: new wildcards for custom scripts: $INFO.389lockingStatusChange$ and $INFO.389deactivationStatusChange$\n   -> Custom scripts: custom button label supported for manual scripts\n\n\n10.09.2016 5.5\n  - Windows: allow to show effective members of a group\n  - Lamdaemon: support SSH key authentication\n  - LAM Pro:\n   -> Group of names/members + roles: allow to show effective members of a group\n   -> Cron jobs:\n     * Move or delete expired accounts (Shadow, Windows, qmail, FreeRadius)\n     * 389ds: added job to notify before password expires\n   -> 389ds: manage password expiration time with module \"Account locking\"\n  - Fixed bugs:\n   -> PHP 7 issues on edit page\n\n\n21.06.2016 5.4\n  - Unix: support magic numbers for UIDs/GIDs (e.g. 389 server DNA plugin)\n  - Samba 3: support for Samba password history (RFE 133)\n  - LAM Pro:\n   -> New module for 389ds unlocking and account (de)activation\n   -> Self registration: support for Google reCAPTCHA\n   -> Password notification jobs support CC and BCC\n   -> Self Service: Samba 3 supports password history and minimum age check\n\n\n21.03.2016 5.3\n  - Requires PHP 5.4.0 or higher\n  - PHP 7 support\n  - Windows: support management of fax number\n  - Login can show display name instead of server URL\n  - Personal/Unix: support K5KEY hash type for smbk5pwd\n  - New NIS netgroup module for hosts\n  - Puppet: autocompletion for classes and variables, allow to enforce list of possible classes\n  - Fixed bugs:\n   -> Autoload errors in tree view\n   -> Set correct content type on JSON requests (174)\n  - LAM Pro:\n   -> Support for LDAP views based on nsview object class\n   -> Password notification jobs support to print expiration date in email\n   -> PPolicy password notification job takes pwdExpireWarning into account\n   -> Custom fields: support calendar fields\n   -> Zarafa contacts: allow to create contacts without Unix extension\n   -> Added options for password rest page to server profile\n\n\n15.12.2015 5.2\n  - Windows: support for additional attributes (jpegPhoto, title, carLicense,\n    employeeNumber, employeeType, businessCategory, departmentNumber, ou, o, manager)\n  - SSH public key: added possibility to add/remove SSH extension\n  - MIT Kerberos: set krbExtraData for new accounts\n  - IMAP: allow to specify initial folders to create\n  - LAM Pro:\n   -> Users: allow to manage IP addresses with ipHost module\n   -> Self Service: added time zone setting in self service profile\n   -> Shadow: added job to notify before Shadow password expires\n   -> Windows: added job to notify before Windows password expires\n\n\n31.08.2015 5.1\n  - IMAP: support Windows users\n  - SSH public key: check uploaded files if in right format\n  - LAM Pro:\n   -> Self Service optimized also for mobile devices\n   -> MySQL support for cron jobs\n   -> Self registration: support auto-numbering for attributes (e.g. to create Unix accounts)\n\n\n30.06.2015 5.0\n  - Microsoft IE 8 no longer supported\n  - Security: added CSRF protection\n  - NIS net groups: user module to manage NIS net groups on user page\n  - Zarafa users: allow to change display format of \"Send As\"\n  - User list: support to filter by account status\n  - Lamdaemon: update group of home directory if user's primary group changes\n  - Personal: allow to add ou=addressbook subentry for users (RFE 117)\n  - Unix: support auto-UID/GID with msSFU30DomainInfo\n  - Windows groups: support editing of member of\n  - Central time zone setting in server profile\n  - LAM Pro:\n   -> Cron job to notify users before password expires (PPolicy)\n   -> Password Self Reset: added 389 Directory Server schema file\n   -> Support for groupOfMembers (RFE 121)\n   -> Rfc2307bis Unix groups: added option to force syncing with group of names\n\n\n31.03.2015 4.9\n  - Requires PHP 5.3.2 or higher\n  - Templates for server profiles\n  - Unix/Personal: support SASL as password hash type\n  - PDF export: added option to print primary group members\n  - Use HTTP_X_REAL_IP/HTTP_X_FORWARDED_FOR to log IP addresses (RFE 120)\n  - LAM Pro:\n   -> Personal: support image file size limit and cropping (requires php-imagick) in self service\n   -> Password self reset: allow to enter custom security questions (RFE 115)\n   -> Unix groups (rfc2307bis): allow to sync members from group of (unique) names (RFE 116)\n   -> Self Service: support password change with old password (requires PHP >= 5.4.26)\n  - Fixed bugs:\n   -> Self Service shows password reuse error after password change was required\n\n\n16.12.2014 4.8\n  - Active Directory: support paged result as workaround for size limit exceeded\n  - FreeRadius: support dialupAccess and radiusProfileDn\n  - Usability improvements\n  - LAM Pro:\n   -> Self service: added option if referrals should be followed\n  - fixed bugs:\n   -> missing LDAP_DEREF_NEVER in some cases (169)\n\n\n07.10.2014 4.7.1\n  - fixed bugs:\n   -> Blank page and \"User tried to access entry of type ...\" log message when DN suffix does not exactly match case in LDAP\n\n\n28.09.2014 4.7\n  - Nginx webserver support\n  - DHCP: support pooling of IP ranges (RFE 107)\n  - Personal: support pager attribute (hidden by default)\n  - Renamed config/lam.conf_sample to lam.conf.sample and config.cfg_sample to config.cfg.sample\n  - LAM Pro:\n   -> Password dialog: preset alternate email address with backup email address (RFE 111)\n\n\n12.06.2014 4.6\n  - Unix groups: allow to disable membership management\n  - Extended LAM's internal password policies\n  - Lamdaemon: move home directory on server if changed\n  - Password policy check during typing\n  - LAM Pro:\n   -> Password self reset and user self registration support to set a header text\n   -> Sudo roles: support latest schema\n   -> Bind DLZ: automatic PTR management (disabled by default) and better formatting of e.g. TTL values\n\n\n18.03.2014 4.5\n  - IMAP: allow dynamic admin user names by replacing wildcards with LDAP attributes\n  - Personal: allow to set fields read-only\n  - NIS mail aliases can be managed on user page\n  - Added option to server profile if referrals should be followed (fixes problems with Samba 4 and AD)\n  - Windows user/group: NIS support (msSFU30NisDomain, msSFU30Name)\n  - LAM Pro:\n   -> Allow to set single account types read-only\n   -> Support for organizationalRole entries\n   -> Separate IP restriction list for self service\n   -> Bind DLZ: support TXT/SRV records\n   -> Self Service: added language selection\n   -> Password self reset: support backup email address\n   -> Custom fields: support help texts\n   -> Support for Oracle databases (orclNetService) (RFE 104)\n  - fixed bugs:\n   -> PDF export for multiple entries does not work (163)\n   -> Personal: fixed photo upload if Imagick is not installed (161)\n   -> Use account filters for Unix membership management (165)\n\n\n18.12.2013 4.4\n  - PyKota support: users, groups, printers, billing codes\n  - Kolab shared folder support\n  - New tool \"Multi edit\" allows LDAP operations on a large number of entries (e.g. adding attributes)\n  - Allow to set a custom label for each account type\n  - Unix: switch also additional membership if primary group is changed (RFE 108)\n  - Windows: fixed user name handling, sAMAccountName now optional\n  - Apache 2.4 support (requires Apache \"version\" module)\n  - Added Turkish, Ukrainian and US English translation\n  - LAM Pro:\n   -> Bind DLZ support\n   -> Samba/Shadow: display password change date in self service\n   -> Custom fields: support custom label and icon, auto-completion\n   -> User self registration: support constant attribute values\n   -> Self service: allow to set custom field labels\n  - Fixed bugs:\n   -> Format of photo in Personal tab (158)\n\n\n25.09.2013 4.3\n  - Custom SSL CA certificates can be setup in LAM main configuration\n  - Unix user and group support for Samba 4\n  - Samba 3 groups: support local members\n  - Kolab: support group accounts and allowed senders/receivers for users\n  - SSH public key: support file upload and self service enhancements (RFE 101)\n  - DHCP: support more options (RFE 99)\n  - LAM Pro:\n   -> PPolicy: check password history for password reuse\n   -> Custom fields: read-only fields for admin interface and file upload for binary data\n   -> Custom scripts: support user self registration\n   -> Password self reset: Samba 3 sync, identification with login attribute, Samba 4 support\n  - Fixed bugs:\n   -> Custom fields: auto-adding object classes via profile editor fixed\n   -> PHP 5.5 compatibility\n   -> Lamdaemon: do not show message if home directory to delete was not found (154)\n\n\n18.06.2013 4.2.1\n  - Fixed bugs:\n   -> Unix: suggested user name must be lower case\n   -> Quota: profile editor does not work in some cases\n\n\n04.06.2013 4.2\n  - Samba 4 support: users, groups, hosts\n  - Unix: allow to change format for suggested user name\n  - LAM Pro:\n   -> Zarafa support for Samba 4\n   -> allow to hide buttons to create/delete entries for each account type\n   -> Password self reset: support new identification methods: user, email, user or email, employee number\n   -> Custom fields: support PDF, profiles and multi-value text fields\n   -> Personal: support password mail sending in file upload\n\n\n19.03.2013 4.1\n  - Updated EDU person module (RFE 3599128)\n  - Personal: allow management of user certificates (RFE 1753030)\n  - Unix: Support Samba Unix Id pool for automatic UID/GID generation\n  - DHCP: support separated dhcpServer and dhcpService entries\n  - LAM Pro:\n   -> Support Qmail groups\n  - Fixed bugs:\n   -> changed user and group size limits (3601649)\n\n\n06.01.2013 4.0.1\n  - support additional LDAP filters for account types\n  - allow to hide account types (that are required by other account types)\n  - fixed bugs:\n   -> missing directories config/pdf and config/profiles on fresh installations\n\n\n17.12.2012 4.0\n  - account profiles and PDF structures are now bound to server profile\n  - IMAP: support \"/\" as path separator (RFE 3575692)\n  - show server profile name on config pages (RFE 3579768)\n  - LAM Pro:\n   -> Custom fields for admin interface\n   -> MIT Kerberos support\n   -> Qmail user support\n\n\n25.09.2012 3.9\n  - Kolab 2.4 support\n  - Puppet support\n  - LAM Pro\n   -> support RFC2307bis automount entries\n   -> read-only fields in self service\n  - fixed bugs\n   -> Hidden tools are still shown on the \"Tools\" page (3546092)\n\n\n19.07.2012 3.8\n  - quick (un)lock for users\n  - allow to disable tools\n  - LAM Pro:\n   -> Custom fields module allows to manage custom LDAP attributes in Self Service\n   -> Self service now supports user self registration\n   -> Separate group of names module for users allows to manage memberships if Unix module is not used (RFE 3504429)\n   -> Named object module for groups (used for rfc2307bis schema)\n   -> Password change page allows account (un)locking\n   -> Allow to send password mails on user edit page\n   -> Custom scripts: supports manual scripts that can be run from account edit pages\n   -> Zarafa 7.1 support (proxy URL for servers)\n  - fixed bugs\n   -> Asterisk extensions with same name (3528288)\n\n\n25.03.2012 3.7\n  - Login: support bind user for login search\n  - Personal: added labeledURI and cosmetic changes, description is now multi-valued (RFE 3446363)\n  - Asterisk extensions: group extension entries by name and context\n  - File upload:\n   -> support custom scripts postCreate (LAM Pro)\n   -> PDF export\n  - New translation: Slovakian\n  - removed phpGroupWare support (project no longer exists)\n  - Use new password after self password change (RFE 3446350)\n  - LAM Pro:\n   -> Password self reset can send password confirmation and notification mails\n   -> Zarafa archiver support\n   -> Heimdal Kerberos support\n  - Fixed bugs:\n   -> DHCP: error message not displayed properly (3441975)\n   -> Profile loading not possible if required fields are not filled (3444948)\n   -> Tree view: unable to add object class (3446037)\n   -> Edit page: unable to move accounts to different OU\n   -> Self Service: support forced password changes (PPolicy) (3483907)\n   -> XSS security patch (3496624)\n\n\n23.11.2011 3.6.1\n  - LAM Pro: fixed password reset function\n\n\n22.11.2011 3.6\n  - support HTTP authentication for admin pages and self service\n  - new modules\n   -> authorizedServiceObject\n   -> FreeRadius\n  - LAM Pro\n   -> added password self reset feature\n   -> Zarafa 7 support\n   -> Zarafa support for dynamic groups, address lists and contacts\n   -> Unix: group of names can be managed on user edit page\n  - Fixed bugs:\n   -> Unix: check for upper-case characters in user name (3416180)\n\n\n09.08.2011 3.5.0\n  - New modules:\n   -> \"General information\": shows internal data about accounts (e.g. creation time)\n   -> \"Quota\": manage filesystem quota inside LDAP (Linux DiskQuota) (RFE 1811449)\n  - Personal: New attributes o, employeeNumber, initials\n  - Unix: Support to create home directories on multiple servers and also for existing users\n  - Server information shows data from cn=monitor\n  - Lots of small improvements\n  - LAM Pro:\n   -> Automount: allow to create automount maps\n   -> Password policy: allow to (un)lock accounts\n  - Fixed bugs:\n   -> Owner attribute is multi-valued (3300727)\n\n2011-04-25 3.4.0\n  - IMAP mailboxes:\n   -> support to read user name from uid attribute\n   -> added quota management\n  - Personal: added additional options for account profiles\n  - Mail aliases: sort recipients (RFE 3170336)\n  - Asterisk: support all attributes (can be disabled in configuration)\n  - Samba 3/Shadow: allow to sync expiration date (RFE 3147751)\n  - LAM Pro:\n   -> support automount entries\n   -> Zarafa groups: allow combination with group of names\n   -> enhanced wildcards for custom scripts\n   -> Group of (unique) names: allow members to be optional\n  - Fixed bugs:\n   -> Renaming of default profile (3183920)\n   -> Profile editor: fixed problems with multi select\n\n\n12.02.2011 3.3.0\n  - additional usability enhancements\n  - new IMAP module (\"Mailbox (imapAccess)\") allows to create/delete user mailboxes\n  - LAM Pro: enhanced Zarafa to support users and groups for \"Send as\" (new configuration option)\n  - PDF export: higher resolution for logos\n  - reduced number of LDAP queries\n  - lamdaemon: support journaled quotas\n  - Fixed bugs:\n   -> ignore comment lines in shells file (3107124)\n   -> home directory creation on file upload\n\n\n28.10.2010 3.2.0\n  - large usability enhancements\n  - Shadow: allow to force password change when maximum password age is set\n  - DHCP: renamed module \"Fixed IPs\" to \"Hosts\", IP is now optional (3038797)\n  - PHP version 5.2.4 or higher required\n  - LAM Pro:\n   -> Zarafa support (user, group, server)\n   -> Password policy: allow to force password change (RFE 3026940)\n   -> Password reset page: mail subject, text and from address can be set in server profile\n   -> Self service: Asterisk (voicemail) password synchronisation\n  - Fixed bugs:\n   -> Email check did not include \"+\" (3033605)\n   -> Tab index on login page (3042622)\n\n\n04.07.2010 3.1.1\n  - LAM Pro: fix for user self service\n\n\n25.06.2010 3.1.0\n  - usability improvements\n  - Asterisk voicemail support\n  - new hosts module for user accounts to define valid login workstations (replaces inetOrgPerson schema hack) (2951116)\n  - PDF editor: descriptive fields\n  - lamdaemon:\n   -> sudo entry needs to be changed to \".../lamdaemon.pl *\"\n   -> replaced PHP SSH2 with phpseclib\n  - LAM Pro\n   -> custom scripts: new options to hide executed commands and define if output is HTML or plain text\n   -> support sudo entry management (object class sudoRole)\n  - fixed bugs:\n   -> Asterisk password handling (patch 2979728)\n   -> Samba domain SID check (2994528)\n   -> language selection at login (2996335)\n\n\n24.03.2010 3.0.0\n  - support to remove extension from an existing account: shadowAccount, sambaSamAccount, eduPerson\n  - file upload: allow to select account modules for upload\n  - removed frames\n  - Unix: automatic user name generation from first and last name (2492675)\n  - LAM Pro:\n   -> support OpenLDAP password policies (ppolicy)\n   -> manage host IP addresses (ipHost)\n  - fixed bugs:\n   -> Multi-delete not working (2931458)\n   -> Samba: can/must change password needs to be read from domain policy (2919236)\n   -> DNs which include \"#\" are not editable/deletable (2931461)\n   -> fixed configure/Makefile\n   -> Asterisk input fields and authentication realm (patch 2971792)\n\n\n16.12.2009 2.9.0\n  - Asterisk support\n  - new tool: server information\n  - consolidated LAM documentation in new manual (docs/manual/index.html)\n\t- DHCP: add host name to fixed IPs (RFE 2898948)\n\t- LAM Pro:\n\t -> enabled custom scripts for self service\n\t -> support for nisObject object class\n  - fixed bugs:\n\t -> unable to edit accounts with DNs that contain spaces next to a comma (2889473)\n\t -> login method \"LDAP search\" has problems if LDAP server is down (2889414)\n\t -> filter in account lists did not support non-ASCII letters\n\t -> alias handling (2901248)\n\t -> DHCP range check (2903267)\n\n\n28.10.2009 2.8.0\n  - ability to hide fields: inetOrgPerson, sambaSamAccount\n\t- compatibility with PHP 5.3\n\t- one central button to change passwords on account pages\n\t- removed support for Samba 2 accounts\n\t- removed lamdaemonOld script\n\n\n05.08.2009 2.7.0\n  - LAM Pro: allow to execute custom scripts\n  - log client IP at login attempt\n  - added separate configuration option to enable/disable TLS encryption\n  - Samba 3: allow to disable LM hashes (on by default) (RFE 2657140)\n  - DHCP: added description field and reordered fixed IP input fields\n  - fixed bugs:\n    * added additional check for creating home directories (2798489)\n\t\t* support memcache for session storage (2811505)\n\n\n08.04.2009 2.6.0\n  - support NIS netgroups\n  - support EDU person accounts (RFE 1413731)\n  - Personal: support departmentNumber attribute\n  - DHCP: allow file upload\n  - added config option to search LAM login users in LDAP (RFE 2494249)\n  - help messages are displayed as tooltips\n  - LAM Pro:\n   -> add businessCategory to self service (RFE 2494246)\n   -> allow to customize page headers and use custom CSS styles\n\n\n21.01.2009 2.5.0\n  - LAM Pro:\n   -> supports rfc2307bis schema for Unix groups (RFE 2111694)\n   -> added alias management (object classes alias + uidObject) (RFE 1912779)\n  - Shadow: module is now optional when creating new accounts\n  - Kolab:\n   -> account extension is now optional\n   -> can be used without Unix module\n   -> self service uses no extra LDAP suffix but uses global setting\n  - DHCP:\n   -> several bugfixes\n   -> added PDF support\n   -> support multiple Netbios name servers (RFE 2180179)\n  - Samba 3:\n   -> self service sets attribute \"sambaPwdLastSet\" on password change (LAM Pro)\n   -> password timestamps can be updated on password reset page (LAM Pro)\n   -> option to force password change on next login\n   -> profile options for time when the user can/must change the password\n\n\n15.10.2008 2.4.0\n  - added DHCP management (donated by Siedl networks GmbH)\n  - requires PHP 5.1.2\n  - MHash dependendy replaced by Hash\n  - save last selected server profile from login page\n  - lamdaemon: allow to specify SSH port\n  - lamdaemon: added Syslog logging\n  - Unix: added profile options for lamdaemon\n  - LAM Pro: password reset page is able to unlock Samba accounts and sets shadowLastChange\n  - fixed bugs:\n    * problems with DN containing ( and ) (2059740)\n    * problem with gecos field in file upload (2103936)\n\n\n30.04.2008 2.3.0\n  - added Polish translation\n  - support phpGroupWare accounts\n  - password policies\n  - redesigned PDF editor\n  - show mail addresses as link in account list\n  - Unix: allow primary group members to be added as memberUid\n  - Kolab: support LAM Pro self service\n  - LAM Pro: new account type for groupOf(Unique)Names\n  - fixed bugs:\n   -> XHTML headers should be removed (1912736)\n\n\n23.01.2008 2.2.0\n  - account lists:\n   -> allow to switch sorting\n   -> added separate configuration page and store settings in cookies\n   -> list size can now be set individually for each account type on the list configuration page\n   -> new PDF buttons\n  - use suffix from account list as default for new accounts (patch 1823583)\n  - Security: passwords in configuration files are now saved as hash values\n  - improved design\n  - style fixes for Internet Explorer users\n  - Unix: allow to set host passwords (RFE 1754069)\n  - Unix: allow to generate random passwords for users\n  - Samba 3 groups: Samba part is now optional\n  - Personal: add object classes person and organizationalPerson for new accounts (RFE 1830033)\n  - new LDAP schema check on tests page\n  - LAM Pro:\n   -> added possibility for deskside support to reset passwords at account list page\n   -> access levels (read only, change passwords, write access) for server profiles\n\n\n07.11.2007 2.1.0\n  - tabular design for account pages\n  - show DN on account pages\n  - Samba 3: made Samba account optional\n  - Samba 3: manages now terminal server settings\n  - fixed bugs:\n   -> LAM Pro: UTF-8 characters are invalid displayed on configuration page (1788752)\n   -> LAM works again on PHP 5.1.x (1792447)\n   -> Quota: managing group quotas does not work (1811728)\n   -> Samba 3 domains: lockout users after bad logon attempts must allow 0 - 999 (1814578)\n\n\n08.08.2007 2.0.0\n  - new translations: Chinese (Simplified), Czech and Portuguese\n  - usability improvements\n  - LDAP accounts including child entries can now be moved\n  - group list can show primary members (RFE 1517679 and patch 1722460)\n  - more translated example texts (RFE 1702140)\n  - inetOrgPerson: now manages homePhone, roomNumber, businessCategory\n  - posixAccount: allow to create home directories in file upload (RFE 1665034)\n  - account lists: display buttons on top and bottom (RFE 1702136)\n  - fixed bugs:\n   -> OU editor: help images (1702132)\n   -> config editor: extra space (1702269)\n   -> fixed some inconsistent help entries (1694863)\n   -> user list: refreshing GID translation did not work (1719168)\n   -> allow uid as RDN attribute for inetOrgPerson (1740499)\n   -> PHP Warning: mcrypt_decrypt(): The IV parameter must be ... (1742543)\n   -> uid attribute no longer required for InetOrgPerson (1757215)\n\n\n28.03.2007 1.3.0\n  - improved design\n  - user list can now display jpegPhoto attributes\n  - lamdaemon: support for multiple servers\n  - LAM Pro: users may change their photos (jpegPhoto)\n  - fixed bugs:\n   -> ShadowAccount: PDF entry for expire date was wrong (1658868)\n   -> Samba groups: fixed help entry (patch 1664542)\n   -> Debian package did not include lamdaemonOld.pl (1660493)\n   -> NIS mail aliases: allow more characters in alias name (1674198)\n   -> fixed syntax errors in some .htaccess files\n   -> security fix: HTML special characters in LDAP data were not escaped\n\n  Developers:\n    API changes:\n    - added listPrintTableCellContent() to class lamList\n    - added listPrintAdditionalOptions() to class lamList\n    - added preModifyActions() to class baseModule\n    - added postModifyActions() to class baseModule\n    - added preDeleteActions() to class baseModule\n    - added postDeleteActions() to class baseModule\n\n\n24.01.2007 1.2.0\n  - Samba 3: better handling of date values\n  - Samba 3: Handling of locked accounts (RFE 1609076)\n  - LAM Pro: modules can define configuration settings (Unix: password hashing)\n  - LAM Pro: management of groupOfNames and groupOfUniqueNames entries (RFE 875482)\n  - fixed bugs:\n   -> Lamdaemon test did not work on PHP 4\n   -> InetOrgPerson: Problems with error messages (1628799)\n\n  Developers:\n    API changes:\n    - removed get_configDescription() from module interface\n    - added functions to handle configuration settings for LAM Pro\n\n\n01.11.2006 1.1.1\n   - Lamdaemon: added test page (Tools -> Tests -> Lamdaemon test)\n   - LAM Pro: Samba passwords can now be synchronized with Unix password\n   - Shadow account: better management of expiration date\n   - fixed bugs:\n    -> Unix: password hashing problem (1562426)\n    -> Unix: No error message for wrong UID numbers in file upload\n    -> Filters in account lists get lost when sorting the table\n\n\n20.09.2006 1.1.0\n   - Lamdaemon now uses the SSH implementation from PECL which is much more stable\n   - Samba 2/3: \"Use Unix password\" now on by default (1517678)\n\n  Developers:\n    API changes:\n    - removed $post parameters from module functions (delete_attributes(),\n      process_...(), display_html_...()). Use $_POST instead.\n    - process_...() functions: returned messages are no longer grouped\n      (e.g. return: array(array('INFO', 'headline', 'text'), array('INFO', 'headline2', 'text2')))\n\n\n10.08.2006 1.0.4\n   - added Russian translation\n   - Samba 3: added policies for domain objects\n   - inetLocalMailRecipient: print warning if local address is already in use\n\n\n05.07.2006 1.0.3\n   - fixed bugs:\n    -> Kolab: fixed problem with message about missing password\n    -> Unix groups: fixed auto GID\n    -> Unix users/groups: fixed silent unlocking of passwords\n    -> Unix users/groups: removed invalid password option\n    -> Shadow: account expiration date was incorrect in some time zones\n    -> User list: fixed problems when deleting users and translated GIDs are activated (1503367)\n\n\n24.05.2006 1.0.2\n   - security enhancements: session timeout, logging, host restrictions\n   - handle LDAP attribute aliases correctly\n   - fixed bugs:\n    -> PDF creation bug when GID translation is activated (1477111)\n    -> allow \"@\" in passwords (1477878)\n    -> Samba 2/3: fixed NT hashes\n    -> fixed handling of multi-value attributes (e.g. in inetLocalMailRecipient)\n\n\n12.04.2006 1.0.1\n   - LAM can now be installed with \"configure\" and \"make install\"\n   - added workaround for misspelled object classes (e.g. sambaSAMAccount by smbldap-tools)\n   - Unix: merged password hash settings for Unix users and groups\n   - Samba 3: added Windows group to profile options\n   - security: LAM checks the session id and client IP\n   - fixed bugs:\n    -> Samba 3: hash values were wrong in some rare cases (1440021)\n    -> Samba 3: re-added time zone selection for logon hours (1407761)\n    -> Unix: call of unknown function (1450464)\n\n\n01.03.2006 1.0.0\n   - new architecture with support for more account types\n   - new translations: Traditional Chinese, Dutch\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n    -> improved sorting of account lists\n    -> fixed language setting in default configuration profile\n    -> fixed PHP5 warnings (getdate() and mktime())\n    -> error messages in Samba domain module (1437425)\n    -> fixed expired passwords with shadowAccount module\n    -> added lamdaemon.pl compatibility and security patches by Tim Rice\n\n\n08.02.2006 1.0.rc2\n   - new translation: Dutch\n   - fixed bugs:\n    -> changed check for mail addresses (patch 1403922)\n    -> fixed JPG upload when MCrypt is enabled\n    -> fixed login problems for AD servers\n\n\n09.01.2006 1.0.rc1\n   - new architecture with support for more account types\n   - new translation: Traditional Chinese\n   - fixed bugs:\n    -> Samba groups: editing of special groups fixed\n\n\n14.12.2005 0.5.3\n   - accounts are now deleted with subentries\n   - big update for Italian translation\n   - inetOrgPerson: support jpegPhoto images\n   - less restrictive input checks\n   - fixed bugs:\n    -> fixed problems with case-insensitive DNs\n    -> file upload did not work when max_execution_time=0 (1367957)\n    -> posixGroup: fixed help entries\n\n\n16.11.2005 0.5.2\n   - New module for SSH public keys\n   - check file permissions on login page\n   - fixed bugs:\n    -> creation of home directories did not work\n    -> allow spaces in profile names (1333058)\n    -> fixed problem with magic_quotes_gpc in profile editor (1333069)\n    -> inetOrgPerson: deletion of postal address and fax number now works\n\n\n19.10.2005 0.5.1\n   - Samba 3: added support for account expiration\n   - fixed bugs:\n    -> automatic UID/GID assignment did not fully work\n    -> PDF: additional groups for Unix users\n    -> inetOrgPerson: fixed mobile number\n    -> Samba 2/3: passwords fixed for file uploads (1311561)\n    -> Samba 3: fixed logon hours (patch 1311915)\n    -> Samba 3: loading of domain setting from profile did not work\n    -> Quota: profile settings fixed\n    -> reduced memory usage\n\n\n28.09.2005 0.5.0\n   - Samba 2/3: added display name in account pages\n   - fixed bugs:\n    -> fixed error message when creating new accounts with shadowAccount\n    -> added missing help entries on main account page\n    -> Samba 2/3: fixed settings for password expiration, no password and deactivated account\n    -> changing of RDN caused problems in some cases\n\n\n08.09.2005 0.5.rc3\n   - INFO messages no longer prevent changing to subpages of a module\n   - fixed bugs:\n    -> buttons on account page are better sorted\n    -> account module: some problems solved when used for user accounts\n    -> nisMailAlias: fixed missing RDN possibility\n    -> fixed conflicts when accounts were built with other base modules\n    -> Samba 2/3: setting allowed workstations failed\n    -> magic_quotes_gpc = Off prevented editing of accounts\n    -> fixed help links on Samba and Unix pages\n\n\n18.08.2005 0.5.rc2\n   - allow user accounts based only on \"account\" module\n   - inetOrgPerson: allow setting a password if posixAccount is not active\n   - fixed bugs:\n    -> removed Blowfish encryption (bad performance)\n    -> Kolab now complains if no user password is set\n\n\n08.08.2005 0.5.rc1\n   - Kolab 2 support\n   - added manager and post office box for inetOrgPerson\n   - Samba 3: added support for logon hours\n   - Samba 3: added sambaSID as possible RDN attribute\n   - improved error handling in profile editor\n   - now quotas can be set on CSV upload\n   - new logo\n   - fixed bugs:\n    -> several fixes for PHP5\n    -> fixes for PDF editor and output\n    -> password changing in tree view did not work\n    -> fixed changing of group memberships for users\n\n\n28.07.2005 0.4.10\n  - PHP5 compatibility added\n\n\n30.06.2005 0.5.alpha2\n   - added documentation about schemas\n   - PDF now uses UTF-8 fonts\n   - added possibility to create plain inetOrgPerson accounts\n   - fixed bugs:\n    -> set DN suffix and RDN on profile loading\n    -> several fixes for PDF editor\n    -> creating Samba hosts now works\n\n\n11.05.2005 0.5.alpha1\n  - new modular architecture\n   -> possibility to create Unix-only accounts\n   -> plugins for more objectClasses planned\n   -> enhanced PDF output\n   -> enhanced file upload\n   -> enhanced editor for account profiles\n   -> dynamic configuration options (based on modules)\n  - all pages in UTF-8\n  - added developer documentation\n  - PHPDoc formatted comments\n  - new plugin for managing MAC addresses (RFE 926017)\n  - new plugin for managing NIS mail aliases (RFE 1050036)\n  - new plugin for managing mail routing with inetLocalMailRecipient (RFE 1092137)\n  - schema browser\n  - tree view\n\n\n09.03.2005 0.4.9\n  - fixed bugs:\n      fixed error messages when moving an user account\n      fixed problem with special group SIDs\n      lamdaemon.pl security fix\n\n\n26.01.2005 0.4.8\n  - allow \"%\" at the beginning of Samba home/profile path (1107998)\n  - fixed bugs:\n      fixed IE fix ;-)\n      no more warnings for profiles with no additional groups set\n\n\n19.12.2004 0.4.7\n  - added \"*.exe\" to Samba logon script regex (1081715)\n  - fixed bugs:\n      fixed doctype of main frame\n      removed syntax check for LDAP suffixes\n      fixed IE bug at login\n      fixed encoding in HTTP header\n      passwords with \"'\" are now handled correctly at login (1081460)\n      fixed Samba flags if multiple hosts were created\n      updated .htaccess files to be compatible with newer Apache versions\n\n\n26.05.2004 0.4.6\n  - fixed bugs:\n      password hashes were not disabled correctly\n      street was copied to postal code on modify (938502)\n      underscore was not allowed for host names (934445)\n      deleting postal address or facsimile number failed (948616)\n      TLS error handling (958497)\n      smaller fixes on personal settings page\n\n\n21.03.2004 0.4.5\n  - added French translation\n  - fixed bugs:\n      StatusMessages with additional variables did not work\n      Samba hosts had unnecessary objectClass shadowAccount (910084)\n      Samba host passwords were still wrong\n      LAM had problems with non-standard spelled object classes (907636)\n      Perl scripts did not work if Perl is not installed in /usr/bin/perl (913554)\n      problems when cn!=uid (915041)\n      home directories were not deleted by lamdaemon.pl (913552)\n\n\n29.02.2004 0.4.4 (stable)\n  - fixed bugs:\n      plain posix groups could not be used as Samba 3 primary group\n      if magic_quotes_gpc in php.ini is was set to \"Off\", several pages did not work\n      some smaller bugs in mass upload\n      Samba hash values for hosts were not correct\n      Unix passwords could be disabled but not re-enabled\n      fixed problem with eval() in status.inc (894433)\n\n\n08.02.2004 0.4.3\n  - new login layout\n  - added Hungarian and Japanese translations\n  - fixed bugs:\n      Samba passwords were sometimes empty for new users (892272)\n      links in list views may not work with web servers other than Apache\n\n\n21.01.2004 0.4.2\n  - added config wizard\n  - MHash is only needed for PHP < 4.3\n  - use Blowfish for encryption instead of MCrypt\n\n\n29.12.2003 0.4.1\n\n  - better error handling at login\n  - support spaces in DNs\n  - PDF text for users\n  - create missing OUs recursively\n  - fixed bugs:\n      SMD5 passwords were wrong\n      primaryGroupSID wrong if SID has no relation to Algorithmic RID Base\n      Samba 2 accounts could not be created\n\n\n29.10.2003 0.4 (Beta1)\n\n  - improved design\n  - improved documentation\n  - Fixed possible error which could delete entries if objectclass didn't fit\n  - Fixed many samba 3.0 related bugs, most related to SIDs\n  - edit group members directly\n  - support for several password hashes (CRYPT/SHA/SSHA/MD5/SMD5/PLAIN)\n  - PDF output for groups and hosts\n\n\n31.08.2003 0.3 (Alpha 3)\n\n  - Samba 3 support\n  - manage Samba 3 domains\n  - multiple configuration files\n  - PDF output\n  - better mass creation\n\n\n04.07.2003 0.2 (Alpha 2)\n\n  - support for multiple OUs + OU-Editor\n  - account creation via file upload\n  - profile editor\n  - experimental Samba 3 support\n  - fixed a lot of bugs\n\n\n23.05.2003 0.1 (Alpha 1)\n\n  Initial release\n", "<?php\n/*\n\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2010 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n*/\n\n/**\n* Interface between modules and other parts of LAM.\n*\n* @package metaHTML\n* @author Roland Gruber\n*/\n\n/**\n * Returns the marker for required values.\n *\n * @return string HTML code for required marker\n */\nfunction htmlGetRequiredMarker(): string {\n\treturn '<span class=\"lam-required\" title=\"' . _('required') . '\">*</span>';\n}\n\n/**\n * Returns the marker for required values.\n *\n * @return htmlSpan HTML code for required marker\n */\nfunction htmlGetRequiredMarkerElement(): htmlSpan {\n\t$span = new htmlSpan(new htmlOutputText('*'), array('lam-required'));\n\t$span->setTitle(_('required'));\n\treturn $span;\n}\n\n/**\n * Represents a HTML element.\n * This is used to build HTML code by using objects.\n *\n * @package metaHTML\n */\nabstract class htmlElement {\n\n\t/** align to top */\n\tconst ALIGN_TOP = 0;\n\t/** align to left */\n\tconst ALIGN_LEFT = 1;\n\t/** align to right */\n\tconst ALIGN_RIGHT = 2;\n\t/** align to bottom */\n\tconst ALIGN_BOTTOM = 3;\n\t/** align to center */\n\tconst ALIGN_CENTER = 4;\n\n\t/** validation rule to allow only numbers ([0-9]+) */\n\tconst VALIDATE_NUMERIC = 'numeric';\n\t/** validation rule to allow positive/negative numbers ([-]?[0-9]+) */\n\tconst VALIDATE_NUMERIC_WITH_NEGATIVE = 'numericWithNegative';\n\n\t/** alignment when inside a table */\n\tpublic $alignment = null;\n\t/** colspan if inside a table */\n\tpublic $colspan = null;\n\t/** rowspan if inside a table */\n\tpublic $rowspan = null;\n\t/** CSS classes */\n\tprotected $cssClasses = array();\n\t/** table cell CSS classes */\n\tprotected $tableCellCssClasses = array();\n\t/** data attributes */\n\tprivate $dataAttributes = array();\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tabstract function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope);\n\n\t/**\n\t * Returns the HTML attributes for the alignment.\n\t *\n\t * @return String alignment HTML attributes (e.g. align=\"right\" valign=\"top\")\n\t */\n\tpublic function getAlignmentString() {\n\t\t$align = '';\n\t\tif ($this->alignment !== null) {\n\t\t\tswitch ($this->alignment) {\n\t\t\t\tcase htmlElement::ALIGN_BOTTOM:\n\t\t\t\t\t$align = 'valign=\"bottom\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_TOP:\n\t\t\t\t\t$align = 'valign=\"top\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_LEFT:\n\t\t\t\t\t$align = 'align=\"left\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_RIGHT:\n\t\t\t\t\t$align = 'align=\"right\"';\n\t\t\t\tbreak;\n\t\t\t\tcase htmlElement::ALIGN_CENTER:\n\t\t\t\t\t$align = 'align=\"center\"';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn $align;\n\t}\n\n\t/**\n\t * Returns the HTML attribute for the colspan.\n\t *\n\t * @return String colspan HTML attribute (e.g. colspan=3)\n\t */\n\tpublic function getColspanString() {\n\t\tif ($this->colspan == null) {\n\t\t\treturn '';\n\t\t}\n\t\telse return 'colspan=\"' . $this->colspan . '\"';\n\t}\n\n\t/**\n\t * Returns the HTML attribute for the rowspan.\n\t *\n\t * @return String rowspan HTML attribute (e.g. rowspan=3)\n\t */\n\tpublic function getRowspanString() {\n\t\tif ($this->rowspan == null) {\n\t\t\treturn '';\n\t\t}\n\t\telse return 'rowspan=\"' . $this->rowspan . '\"';\n\t}\n\n\t/**\n\t * Returns the CSS classes of this element.\n\t *\n\t * @return array $classes CSS class names\n\t */\n\tpublic function getCSSClasses() {\n\t\treturn $this->cssClasses;\n\t}\n\n\t/**\n\t * Adds CSS classes to this element.\n\t *\n\t * @param array $classes CSS class names\n\t */\n\tpublic function setCSSClasses($classes) {\n\t\t$this->cssClasses = $classes;\n\t}\n\n\t/**\n\t * Adds CSS classes to the surrounding table cell for this element.\n\t *\n\t * @param array $classes CSS class names\n\t */\n\tpublic function setTableCellCSSClasses($classes) {\n\t\t$this->tableCellCssClasses = $classes;\n\t}\n\n\t/**\n\t * Returns the CSS classes of the surrounding table cell for this element.\n\t *\n\t * @return array CSS classes\n\t */\n\tpublic function getTableCellCSSClasses() {\n\t\treturn $this->tableCellCssClasses;\n\t}\n\n\t/**\n\t * Adds a data attribute.\n\t *\n\t * @param string $key attribute name (without \"data-\")\n\t * @param string $value attribute value\n\t */\n\tpublic function addDataAttribute($key, $value) {\n\t\t$this->dataAttributes[$key] = $value;\n\t}\n\n\t/**\n\t * Returns the data attributes as rendered string.\n\t *\n\t * @return string data attributes\n\t */\n\tprotected function getDataAttributesAsString() {\n\t\t$result = '';\n\t\tforeach ($this->dataAttributes as $key => $value) {\n\t\t\t$result .= ' data-' . htmlspecialchars($key) . '=\"' . htmlspecialchars($value) . '\"';\n\t\t}\n\t\treturn $result;\n\t}\n\n}\n\n/**\n * Structures elements using a table.\n *\n * @package metaHTML\n */\nclass htmlTable extends htmlElement {\n\n\t/** table footer */\n\tconst FOOTER = \"</table>\\n\";\n\t/** new line */\n\tconst NEWLINE = \"</tr><tr>\\n\";\n\n\t/** list of subelements */\n\tprivate $elements = array();\n\t/** specifies if currently a row is open */\n\tprivate $rowOpen = false;\n\t/** table width */\n\tprivate $width = null;\n\t/** HTML ID */\n\tprivate $id = null;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $width table width (e.g. 100%)\n\t * @see htmlElement\n\t */\n\tfunction __construct($width = null, $id = null) {\n\t\t$this->width = $width;\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * Adds an element to the table. The element may be a htmlElement object or a simple String.\n\t *\n\t * @param mixed $element htmlElement object or a simple String\n\t * @param boolean $newLine adds a new line after the element (optional, default false)\n\t * @param boolean $isTableHeadElement specifies if this is a head or body element (default: body)\n\t */\n\tpublic function addElement($element, $newLine = false, $isTableHeadElement = false) {\n\t\t// add row element\n\t\tif ($element instanceof htmlTableRow) {\n\t\t\t// check if a row needs to be closed\n\t\t\tif ($this->rowOpen) {\n\t\t\t\t$this->elements[] = \"</tr>\\n\";\n\t\t\t\t$this->rowOpen = false;\n\t\t\t}\n\t\t\t$this->elements[] = $element;\n\t\t}\n\t\t// add cell element\n\t\telseif ($element instanceof htmlElement) {\n\t\t\t// check if a row needs to be opened\n\t\t\tif (!$this->rowOpen) {\n\t\t\t\t$this->elements[] = \"<tr>\\n\";\n\t\t\t\t$this->rowOpen = true;\n\t\t\t}\n\t\t\t// check if alignment option was given\n\t\t\t$align = $element->getAlignmentString();\n\t\t\t$colspan = $element->getColspanString();\n\t\t\t$rowspan = $element->getRowspanString();\n\t\t\t$css = '';\n\t\t\tif (sizeof($element->getTableCellCSSClasses()) > 0) {\n\t\t\t\t$css = 'class=\"' . implode(' ', $element->getTableCellCSSClasses()) . '\"';\n\t\t\t}\n\t\t\t$tagName = 'td';\n\t\t\tif ($isTableHeadElement) {\n\t\t\t\t$tagName = 'th';\n\t\t\t}\n\t\t\t$this->elements[] = \"<$tagName $align $colspan $rowspan $css>\\n\";\n\t\t\t$this->elements[] = $element;\n\t\t\t$this->elements[] = \"</$tagName>\\n\";\n\t\t\tif ($newLine) {\n\t\t\t\t$this->addNewLine();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tStatusMessage('ERROR', 'Invalid element', print_r($element, true));\n\t\t}\n\t}\n\n\t/**\n\t * Adds another line to the table.\n\t */\n\tpublic function addNewLine() {\n\t\tif (!$this->rowOpen) {\n\t\t\t$this->elements[] = \"<tr>\\n\";\n\t\t}\n\t\telse {\n\t\t\t$this->elements[] = htmlTable::NEWLINE;\n\t\t}\n\t}\n\n\t/**\n\t * Adds an htmlSpacer with the given width.\n\t *\n\t * @param String $width width (e.g. 10px)\n\t */\n\tpublic function addSpace($width) {\n\t\t$this->addElement(new htmlSpacer($width, null));\n\t}\n\n\t/**\n\t * Adds an htmlSpacer with the given height and ends the row.\n\t *\n\t * @param String $height height (e.g. 10px)\n\t */\n\tpublic function addVerticalSpace($height) {\n\t\t$this->addElement(new htmlSpacer(null, $height), true);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$width = '';\n\t\tif ($this->width != null) {\n\t\t\t$width = ' width=\"' . htmlspecialchars($this->width) . '\"';\n\t\t}\n\t\t$id = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$id = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo \"<table\" . $width . $id . $classAttr . \">\\n\";\n\t\t// print all contained elements\n\t\tfor ($i = 0; $i < sizeof($this->elements); $i++) {\n\t\t\t// print htmlElement objects\n\t\t\tif ($this->elements[$i] instanceof htmlElement) {\n\t\t\t\t$fields = $this->elements[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t\t$return = array_merge($return, $fields);\n\t\t\t}\n\t\t\t// print simple Strings\n\t\t\telse {\n\t\t\t\tif ($i != (sizeof($this->elements) - 1) || !($this->elements[$i] == htmlTable::NEWLINE) ) {\n\t\t\t\t\techo $this->elements[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->rowOpen) {\n\t\t\techo \"</tr>\\n\";\n\t\t}\n\t\techo htmlTable::FOOTER;\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Merges the content of another htmlTable object into this table.\n\t *\n\t * @param $table table to get elements\n\t */\n\tpublic function mergeTableElements($table) {\n\t\tif (is_null($table) || !($table instanceof htmlTable)) {\n\t\t\treturn;\n\t\t}\n\t\t// remove obsolete new lines at the end\n\t\tif ($table->elements[sizeof($table->elements) - 1] == htmlTable::NEWLINE) {\n\t\t\tunset($table->elements[sizeof($table->elements) - 1]);\n\t\t}\n\t\t// close last row of other table if needed\n\t\tif ($table->rowOpen) {\n\t\t\t$table->elements[] = \"</tr>\\n\";\n\t\t}\n\t\t// close last own row if needed\n\t\tif ($this->rowOpen) {\n\t\t\tif ($this->elements[sizeof($this->elements) - 1] == htmlTable::NEWLINE) {\n\t\t\t\tunset($this->elements[sizeof($this->elements) - 1]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->elements[] = \"</tr>\\n\";\n\t\t\t}\n\t\t\t$this->rowOpen = false;\n\t\t}\n\t\t$this->elements = array_merge($this->elements, $table->elements);\n\t}\n\n}\n\n/**\n * A row inside a htmlTable.\n *\n * @see htmlTable\n * @package metaHTML\n */\nclass htmlTableRow extends htmlElement {\n\n\t/** table cells */\n\tprivate $cells;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param array $cells list of htmlElements\n\t * @see htmlElement\n\t */\n\tpublic function __construct($cells) {\n\t\t$this->cells = $cells;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$types = array();\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo \"<tr\" . $classAttr . \">\\n\";\n\t\t\tfor ($i = 0; $i < sizeof($this->cells); $i++) {\n\t\t\t\t// check if alignment option was given\n\t\t\t\t$align = $this->cells[$i]->getAlignmentString();\n\t\t\t\t$colspan = $this->cells[$i]->getColspanString();\n\t\t\t\t$rowspan = $this->cells[$i]->getRowspanString();\n\t\t\t\techo \"<td $align $colspan $rowspan>\\n\";\n\t\t\t\t$types = array_merge($types, $this->cells[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t\t\techo \"</td>\\n\";\n\t\t\t}\n\t\techo \"</tr>\";\n\t\treturn $types;\n\t}\n\n}\n\n/**\n * A standard input field.\n *\n * @package metaHTML\n */\nclass htmlInputField extends htmlElement {\n\n\t/** unique field name */\n\tprotected $fieldName;\n\t/** field value */\n\tprotected $fieldValue = '';\n\t/** field size (default 30) */\n\tprotected $fieldSize = 30;\n\t/** field max length (default 1000) */\n\tprotected $fieldMaxLength = 1000;\n\t/** on keypress event */\n\tprotected $onKeyPress = null;\n\t/** on keyupp event */\n\tprotected $onKeyUp = null;\n\t/** oninput event */\n\tprotected $onInput = null;\n\t/** password field */\n\tprotected $isPassword = false;\n\t/** check password strength */\n\tprotected $checkPasswordStrength = false;\n\t/** disables browser autofilling of password fields */\n\tprotected $disableAutoFill = false;\n\t/** enabled or disabled */\n\tprotected $isEnabled = true;\n\t/** indicates that the value should be saved in obfuscated form */\n\tprotected $obfuscate = false;\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprotected $transient = false;\n\t/** required field */\n\tprotected $required = false;\n\t/** validation rule */\n\tprotected $validationRule = null;\n\t/** enable autocomplete */\n\tprotected $autocomplete = false;\n\t/** autocompletion suggestions */\n\tprotected $autocompleteValues = array();\n\t/** autocomplete start at this input length */\n\tprotected $autocompleteMinLength = 1;\n\t/** show calendar */\n\tprotected $showCalendar = false;\n\t/** show DN selection */\n\tprotected $showDnSelection = false;\n\t/** calendar format */\n\tprotected $calendarFormat = '';\n\t/** calendar with time */\n\tprotected $calendarFormatWithTime = false;\n\t/** calendar with seconds */\n\tprotected $calendarFormatWithSeconds = false;\n\t/** title attribute */\n\tprotected $title = null;\n\t/** field ID that needs to have same value (e.g. password field) */\n\tprotected $sameValueFieldID = null;\n\t/** marks the input field as auto trimmed (remove spaces at start/end) */\n\tprotected $autoTrim = true;\n\t/** minimum value */\n\tprotected $minValue = null;\n\t/** maximum value */\n\tprotected $maxValue = null;\n\t/** id */\n\tprotected $id = null;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String $fieldSize input field length (default 30)\n\t */\n\tfunction __construct($fieldName, $fieldValue = null, $fieldSize = null) {\n\t\tif (isObfuscatedText($fieldValue)) {\n\t\t\t$fieldValue = deobfuscateText($fieldValue);\n\t\t}\n\t\t$this->fieldName = htmlspecialchars($fieldName);\n\t\tif ($fieldValue !== null) {\n\t\t\t$this->fieldValue = htmlspecialchars($fieldValue);\n\t\t}\n\t\tif ($fieldSize !== null) {\n\t\t\t$this->fieldSize = $fieldSize;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif ($this->isAutoTrim()) {\n\t\t\t$this->cssClasses[] = 'lam-autotrim';\n\t\t}\n\t\tif (isset($values[$this->fieldName])) {\n\t\t\tif (isObfuscatedText($values[$this->fieldName][0])) {\n\t\t\t\t$this->fieldValue = htmlspecialchars(deobfuscateText($values[$this->fieldName][0]));\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->fieldValue = htmlspecialchars($values[$this->fieldName][0]);\n\t\t\t}\n\t\t}\n\t\t$validators = array();\n\t\tif ($this->required) {\n\t\t\t$validators[] = 'required';\n\t\t}\n\t\tif ($this->validationRule != null) {\n\t\t\t$validators[] = 'custom[' . $this->validationRule . ']';\n\t\t}\n\t\t$min = '';\n\t\tif ($this->minValue !== null) {\n\t\t\t$min = ' min=\"' . $this->minValue . '\"';\n\t\t}\n\t\t$max = '';\n\t\tif ($this->maxValue !== null) {\n\t\t\t$max = ' max=\"' . $this->maxValue . '\"';\n\t\t}\n\t\t// print input field\n\t\tif ($this->autocomplete) {\n\t\t\t$this->cssClasses[] = 'lam-autocomplete';\n\t\t}\n\t\tif (sizeof($validators) > 0) {\n\t\t\t$class = ' class=\"validate[' . implode(',', $validators) . '] ' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\telse {\n\t\t\t$class = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$name = ' name=\"' . $this->fieldName . '\"';\n\t\t$idValue = ($this->id !== null) ? $this->id : $this->fieldName;\n\t\t$id = ' id=\"' . $idValue . '\"';\n\t\t$value = '';\n\t\tif ($this->fieldValue != null) {\n\t\t\t$value = ' value=\"' . $this->fieldValue . '\"';\n\t\t}\n\t\t$maxLength = '';\n\t\tif ($this->fieldMaxLength != null) {\n\t\t\t$maxLength = ' maxlength=\"' . $this->fieldMaxLength . '\"';\n\t\t}\n\t\t$size = '';\n\t\tif ($this->fieldSize != null) {\n\t\t\t$size = ' size=\"' . $this->fieldSize . '\"';\n\t\t}\n\t\t$fieldTabIndex = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$inputType = 'text';\n\t\tif ($this->isPassword) {\n\t\t\t$inputType = 'password';\n\t\t}\n\t\telseif (($this->minValue !== null) || ($this->maxValue !== null)) {\n\t\t\t$inputType = 'number';\n\t\t}\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$onKeyPress = '';\n\t\tif ($this->onKeyPress != null) {\n\t\t\t$onKeyPress = ' onkeypress=\"' . $this->onKeyPress . '\"';\n\t\t}\n\t\t$onKeyUp = '';\n\t\tif ($this->onKeyUp != null) {\n\t\t\t$onKeyUp = ' onkeyup=\"' . $this->onKeyUp . '\"';\n\t\t}\n\t\t$onInput = '';\n\t\tif ($this->onInput != null) {\n\t\t\t$onInput = ' oninput=\"' . $this->onInput . '\"';\n\t\t}\n\t\t$title = '';\n\t\tif (!empty($this->title)) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$autoCompleteVal = '';\n\t\tif ($this->disableAutoFill) {\n\t\t\t$autoCompleteVal = ' autocomplete=\"new-password\"';\n\t\t}\n\t\t$autoCompleteData = '';\n\t\tif ($this->autocomplete) {\n\t\t\t$autoCompleteData = ' data-autocomplete=\"' . base64_encode(json_encode($this->autocompleteValues)) . '\"';\n\t\t\t$autoCompleteData .= ' data-autocomplete-minLength=\"' . $this->autocompleteMinLength . '\"';\n\t\t}\n\t\tif ($this->showDnSelection) {\n\t\t\techo '<span class=\"nowrap\">';\n\t\t}\n\t\techo '<input type=\"' . $inputType . '\"' . $class . $name . $id . $value . $maxLength\n\t\t\t. $min . $max . $size . $fieldTabIndex . $onKeyPress . $onKeyUp . $onInput . $title . $disabled\n\t\t\t. $this->getDataAttributesAsString() . $autoCompleteVal . $autoCompleteData . '>';\n\t\tif ($this->showDnSelection) {\n\t\t\techo '<img class=\"align-middle\" src=\"../../graphics/search-color.svg\"\n\t\t\t\t\t   width=\"16\" height=\"16\" title=\"' . _('Choose entry') . '\"\n\t\t\t\t\t   onclick=\"window.lam.html.showDnSelection(\\'' . $this->fieldName . '\\', \\'' . _('Choose entry') . '\\'\n\t\t\t\t\t   \t\t\t, \\'' . _('Ok') . '\\', \\'' . _('Cancel') . '\\', \\'' . getSecurityTokenName() . '\\'\n\t\t\t\t\t   \t\t\t, \\'' . getSecurityTokenValue() . '\\');\">';\n\t\t\techo '</span>';\n\t\t}\n\t\t// calendar\n\t\tif ($this->showCalendar) {\n\t\t\t$locale = 'en';\n\t\t\t$sessionLanguage = $_SESSION['language'];\n\t\t\t$sessionLanguage = str_replace('.utf8', '', $sessionLanguage);\n\t\t\tif ($sessionLanguage === 'zh_TW') {\n\t\t\t\t$locale = 'zh_tw';\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$sessionLanguageParts = explode('_', $sessionLanguage);\n\t\t\t\t$locale = $sessionLanguageParts[0];\n\t\t\t}\n\t\t\t$calendarWithTime = $this->calendarFormatWithTime ? \"enableTime: true, \" : \"\";\n\t\t\t$calendarWithSeconds = $this->calendarFormatWithSeconds ? \"enableSeconds: true, \" : \"\";\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\tjQuery(function() {\n\t\t\t\t\t$(\"#' . $this->fieldName . '\").flatpickr({\n\t\t\t\t\t\tdateFormat: \"' . $this->calendarFormat . '\",\n\t\t\t\t\t\thourIncrement: 1,\n\t\t\t\t\t\tminuteIncrement: 1,\n\t\t\t\t\t\ttime_24hr: true,\n\t\t\t\t\t\t' . $calendarWithTime . $calendarWithSeconds . '\n\t\t\t\t\t\tlocale: \"' . $locale . '\"\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\t// check value against reference field\n\t\tif ($this->sameValueFieldID != null) {\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tcheckFieldsHaveSameValues(\"' . $this->fieldName . '\", \"' . $this->sameValueFieldID . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\tif ($this->checkPasswordStrength) {\n\t\t\t$query = '?admin=1';\n\t\t\tif (isSelfService()) {\n\t\t\t\t$query = '?selfservice=1';\n\t\t\t}\n\t\t\t$ajaxPath = \"../templates/misc/ajax.php\";\n\t\t\tif (is_file(\"../../templates/misc/ajax.php\")) {\n\t\t\t\t$ajaxPath = \"../../templates/misc/ajax.php\";\n\t\t\t}\n\t\t\telseif (is_file(\"../../../templates/misc/ajax.php\")) {\n\t\t\t\t$ajaxPath = \"../../../templates/misc/ajax.php\";\n\t\t\t}\n\t\t\t$ajaxPath .=  $query;\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tcheckPasswordStrength(\"' . $this->fieldName . '\", \"' . $ajaxPath . '\", \"' . getSecurityTokenName() . '\", \"' . getSecurityTokenValue() . '\");\n\t\t\t\t</script>\n\t\t\t';\n\t\t}\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->obfuscate) {\n\t\t\treturn array($this->fieldName => 'text_obfuscated');\n\t\t}\n\t\telse {\n\t\t\treturn array($this->fieldName => 'text');\n\t\t}\n\t}\n\n\t/**\n\t * Sets the maximum field length.\n\t *\n\t * @param int $fieldMaxLength length\n\t */\n\tpublic function setFieldMaxLength($fieldMaxLength) {\n\t\t$this->fieldMaxLength = $fieldMaxLength;\n\t}\n\n\t/**\n\t * Sets the field size (default is 30).\n\t *\n\t * @param int $fieldSize size\n\t */\n\tpublic function setFieldSize($fieldSize) {\n\t\t$this->fieldSize = $fieldSize;\n\t}\n\n\t/**\n\t * Specifies if this is a password field.\n\t *\n\t * @param boolean $isPassword password field\n\t * @param boolean $checkStrength check if matches password policy (default: false)\n\t * @param boolean $disableAutoFill prevent autofilling by browser\n\t */\n\tpublic function setIsPassword($isPassword, $checkStrength = false, $disableAutoFill = false) {\n\t\t$this->isPassword = $isPassword;\n\t\t$this->checkPasswordStrength = $checkStrength;\n\t\t$this->disableAutoFill = $disableAutoFill;\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies if the value should be saved in obfuscated form (e.g. self service profile).\n\t *\n\t * @param boolean $obfuscate obfuscate value\n\t */\n\tpublic function setObfuscate($obfuscate) {\n\t\t$this->obfuscate = $obfuscate;\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * Specifies if the input field is required.\n\t *\n\t * @param boolean $required required\n\t */\n\tpublic function setRequired($required) {\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Specifies the validation rule (e.g. htmlElement::VALIDATE_NUMERIC) for this field.\n\t * This rule is checked on client side when the input field looses focus.\n\t *\n\t * @param boolean $rule rule name\n\t */\n\tpublic function setValidationRule($rule) {\n\t\t$this->validationRule = $rule;\n\t}\n\n\t/**\n\t * Sets the field as number field with minimum and maximum values.\n\t *\n\t * @param integer $minimum minimum\n\t * @param integer $maximum maximum\n\t */\n\tpublic function setMinimumAndMaximumNumber($minimum, $maximum = null) {\n\t\t$this->minValue = $minimum;\n\t\t$this->maxValue = $maximum;\n\t}\n\n\t/**\n\t * Enables autocompletion for this input field.\n\t *\n\t * @param array $values list of values to suggest\n\t * @param int $minLength autocompletion starts after this number of characters entered (default 1; 0 means immediate start)\n\t */\n\tpublic function enableAutocompletion($values, $minLength = 1) {\n\t\t$this->autocomplete = true;\n\t\t$this->autocompleteValues = $values;\n\t\t$this->autocompleteMinLength = $minLength;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onKeyPress event.\n\t *\n\t * @param String $onKeyPress JavaScript code\n\t */\n\tpublic function setOnKeyPress($onKeyPress) {\n\t\t$this->onKeyPress = $onKeyPress;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onKeyUp event.\n\t *\n\t * @param String $onKeyUp JavaScript code\n\t */\n\tpublic function setOnKeyUp($onKeyUp) {\n\t\t$this->onKeyUp = $onKeyUp;\n\t}\n\n\t/**\n\t * Sets the JavaScript for the onInput event.\n\t *\n\t * @param string $onInput JavaScript code\n\t */\n\tpublic function setOnInput(string $onInput): void {\n\t\t$this->onInput = $onInput;\n\t}\n\n\t/**\n\t * Shows a calendar when the field is selected.\n\t *\n\t * @param String $format calendar format (e.g. Y-m-d)\n\t * @param bool $withTime activate time selection\n\t * @param bool $withSeconds show seconds\n\t */\n\tpublic function showCalendar($format, $withTime = false, $withSeconds = false) {\n\t\t$this->showCalendar = true;\n\t\t$this->calendarFormatWithTime = $withTime;\n\t\t$this->calendarFormatWithSeconds = $withSeconds;\n\t\t$format = str_replace('yy', 'Y', $format);\n\t\t$format = str_replace('dd', 'd', $format);\n\t\t$format = str_replace('mm', 'm', $format);\n\t\t$this->calendarFormat = $format;\n\t}\n\n\t/**\n\t * Shows a DN selection next to input field.\n\t */\n\tpublic function showDnSelection() {\n\t\t$this->showDnSelection = true;\n\t}\n\n\t/**\n\t * Sets the title for the input field.\n\t *\n\t * @param String $title title value\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n\t/**\n\t * Specifies the ID of a second field that must have the same value as this field.\n\t * This field is marked red if different or green if equal.\n\t *\n\t * @param String $sameValueFieldID ID of reference field\n\t */\n\tpublic function setSameValueFieldID($sameValueFieldID) {\n\t\t$this->sameValueFieldID = $sameValueFieldID;\n\t}\n\n\t/**\n\t * Turns this field into a live filter for a select box.\n\t * Cannot be used together with setOnKeyUp().\n\t *\n\t * @param String $name select box name\n\t */\n\tpublic function filterSelectBox($name) {\n\t\t$this->setOnKeyUp('window.lam.filterSelect.activate(\\'' . $this->fieldName . '\\', \\'' . $name . '\\', event);');\n\t}\n\n\t/**\n\t * Returns if the field content should be auto-trimmed (remove spaces at start/end).\n\t *\n\t * @return boolean auto-trim input\n\t */\n\tprotected function isAutoTrim() {\n\t\treturn $this->autoTrim && !$this->isPassword;\n\t}\n\n\tpublic function disableAutoTrim() {\n\t\t$this->autoTrim = false;\n\t}\n\n\t/**\n\t * Sets the element ID.\n\t *\n\t * @param string $id id\n\t */\n\tpublic function setId(string $id) {\n\t\t$this->id = $id;\n\t}\n\n}\n\n/**\n * An extended input field that combines label, input field and help.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputField extends htmlInputField {\n\n\t/** Descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $label descriptive label\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String $helpID help ID (optional)\n\t * @param boolean $required input required\n\t */\n\tfunction __construct($label, $fieldName, $fieldValue = null, $helpID = null, $required = false) {\n\t\tparent::__construct($fieldName, $fieldValue);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t// print label text\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\tif ($this->required) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t// print input field\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Renders a help link.\n *\n * @package metaHTML\n */\nclass htmlHelpLink extends htmlElement {\n\n\t/** help ID */\n\tprivate $helpID;\n\t/** module name if it should be forced */\n\tprivate $module;\n\t/** account type if it should be forced */\n\tprivate $scope;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $helpID help ID\n\t * @param String $module module name (optional, only if value from generateHTML() should be overwritten)\n\t * @param String $scope account type (e.g. user) (optional, only if value from generateHTML() should be overwritten)\n\t */\n\tfunction __construct($helpID, $module = null, $scope = null) {\n\t\t$this->helpID = $helpID;\n\t\t$this->module = $module;\n\t\t$this->scope = $scope;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t// overwrite module and scope if needed\n\t\tif ($this->module != null) {\n\t\t\t$module = $this->module;\n\t\t}\n\t\tif ($this->scope != null) {\n\t\t\t$scope = $this->scope;\n\t\t}\n\t\t// print link\n\t\t$helpEntry = getHelp($module, $this->helpID, $scope);\n\t\tif (empty($helpEntry)) {\n\t\t\treturn array();\n\t\t}\n\t\tprintHelpLink($helpEntry, $this->helpID, $module, $scope, $this->cssClasses);\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Simple button.\n *\n * @package metaHTML\n */\nclass htmlButton extends htmlElement {\n\n\t/** button name */\n\tprotected $name;\n\t/** button text or image */\n\tprotected $value;\n\t/** image button or text button */\n\tprotected $isImageButton;\n\t/** title */\n\tprivate $title = null;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** icon class (CSS) for buttons with icon + text */\n\tprivate $iconClass = null;\n\t/** onclick event */\n\tprivate $onClick = null;\n\t/** button type (default: \"submit\" if no onClick and \"button\" with onClick) */\n\tprivate $type = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name button name\n\t * @param String $value button text or image (16x16px, relative to graphics folder)\n\t * @param String $isImageButton image or text button (default text)\n\t */\n\tfunction __construct($name, $value, $isImageButton = false) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t\t$this->isImageButton = $isImageButton;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($restricted) {\n\t\t\t// no buttons in restricted mode\n\t\t\tlogNewMessage(LOG_ERR, 'Meta HTML: Requested button in restricted mode.');\n\t\t\treturn array();\n\t\t}\n\t\t$fieldTabIndex = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$style = '';\n\t\t$classList = $this->cssClasses;\n\t\t$class = '';\n\t\t$title = '';\n\t\t$name = ' name=\"' . $this->name . '\"';\n\t\t// image button\n\t\tif ($this->isImageButton) {\n\t\t\t$classList[] = 'smallImageButton';\n\t\t\t$classList[] = 'align-middle';\n\t\t\t$style = ' style=\"background-image: url(../../graphics/' . $this->value . ');\"';\n\t\t}\n\t\t// text button\n\t\telseif ($this->iconClass == null) {\n\t\t\t$classList[] = 'smallPadding';\n\t\t}\n\t\t// button with text and icon\n\t\telse {\n\t\t\t$classList[] = 'margin5';\n\t\t}\n\t\tif (sizeof($classList) > 0) {\n\t\t\t$class = ' class=\"' . implode(' ', $classList) . '\"';\n\t\t}\n\t\tif ($this->title != null) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\tif ($this->type == null) {\n\t\t\t$type = ' type=\"submit\"';\n\t\t}\n\t\telse {\n\t\t\t$type = ' type=\"' . $this->type . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\tif ($this->type == null) {\n\t\t\t\t$type = ' type=\"button\"';\n\t\t\t}\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\t$id = ' id=\"btn_' . preg_replace('/[^a-zA-Z0-9_-]/', '', $this->name) . '\"';\n\t\tif ($this->isImageButton) {\n\t\t\techo '<input type=\"submit\" ' . $id . ' value=\" \"' . $name . $onClick . $fieldTabIndex . $style . $class . $title . $disabled . $this->getDataAttributesAsString() . '>';\n\t\t}\n\t\telse {\n\t\t\techo '<button' . $id . $name . $fieldTabIndex . $type . $onClick . $style . $class . $title . $disabled . $this->getDataAttributesAsString() . '>' . $this->value . '</button>';\n\t\t\t// text buttons get JQuery style\n\t\t\tif ($this->iconClass != null) {\n\t\t\t\t$icon = '{ icons: { primary: \\'' . $this->iconClass . '\\' } }';\n\t\t\t\techo '<script type=\"text/javascript\">';\n\t\t\t\techo \"jQuery('#btn_\" . $this->name . \"').button(\" . $icon . \");\";\n\t\t\t\techo '</script>';\n\t\t\t}\n\t\t}\n\t\treturn array($this->name => 'submit');\n\t}\n\n\t/**\n\t * Sets the button title (tooltip).\n\t *\n\t * @param String $title title\n\t */\n\tpublic function setTitle($title) {\n\t\tif ($title !== null) {\n\t\t\t$this->title = htmlspecialchars($title);\n\t\t}\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Sets an additional icon for a text button.\n\t * The icon class is a CSS class that specifies the icon image (e.g. \"deleteButton\" in layout.css).\n\t *\n\t * @param String $iconClass icon class\n\t */\n\tpublic function setIconClass($iconClass) {\n\t\t$this->iconClass = htmlspecialchars($iconClass);\n\t}\n\n\t/**\n\t * Sets the onclick event code.\n\t * This makes this button a simple button that does not submit a form.\n\t *\n\t * @param String $onClick JS code\n\t */\n\tpublic function setOnClick($onClick) {\n\t\t$this->onClick = $onClick;\n\t}\n\n\t/**\n\t * Allows to override the default button type (\"submit\" if no onClick and \"button\" with onClick).\n\t */\n\tpublic function setType($type) {\n\t\t$this->type = $type;\n\t}\n\n}\n\n/**\n * Prints a button for the account pages.\n *\n * @package metaHTML\n */\nclass htmlAccountPageButton extends htmlButton {\n\n\t/**\n\t * Constructor\n\t *\n\t * @param String $targetModule module name which renders next page\n\t * @param String $targetPage name of next page\n\t * @param String $identifier identifier for button\n\t * @param String $value button text or image (16x16px, relative to graphics folder)\n\t * @param String $isImageButton image or text button (default text)\n\t * @param String $title title to show\n\t */\n\tfunction __construct($targetModule, $targetPage, $identifier, $value, $isImageButton = false, $title = null) {\n\t\t$this->name = htmlspecialchars('form_subpage_' . $targetModule . '_' . $targetPage . '_' . $identifier);\n\t\t$this->value = $value;\n\t\t$this->isImageButton = $isImageButton;\n\t\tif ($title != null) {\n\t\t\t$this->setTitle($title);\n\t\t}\n\t}\n\n}\n\n/**\n * Represents a select box.\n *\n * @package metaHTML\n */\nclass htmlSelect extends htmlElement {\n\n\t/** name of select field */\n\tprivate $name;\n\t/** size */\n\tprivate $size;\n\t/** allows multi-selection */\n\tprivate $multiSelect = false;\n\t/** elements */\n\tprivate $elements;\n\t/** selected elements */\n\tprivate $selectedElements = array();\n\t/** descriptive elements */\n\tprivate $hasDescriptiveElements = false;\n\t/** contains optgroups */\n\tprivate $containsOptgroups = false;\n\t/** sorting enabled */\n\tprivate $sortElements = true;\n\t/** right to left text direction */\n\tprivate $rightToLeftTextDirection = false;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** width of input element */\n\tprivate $width = '';\n\t/** transform select boxes with one element to text */\n\tprivate $transformSingleSelect = true;\n\t/** onchange event */\n\tprivate $onchangeEvent = null;\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprivate $transient = false;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\t/** dynamic scrolling */\n\tprivate $dynamicScrolling = false;\n\t/** CSS classes for values */\n\tprivate $optionCssClasses = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * <br>Examples:\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('value1', 'value2'), array('value1'));\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('label1' => 'value1', 'label2' => 'value2'), array('value1'));\n\t * <br>$select->setHasDescriptiveElements(true);\n\t * <br>\n\t * <br>$select = new htmlSelect('myName', array('optgroupLabel' => array('value1', 'value2')), array('value1'));\n\t * <br>$select->setHasDescriptiveElements(true);\n\t * <br>$select->setContainsOptgroups(true);\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value) or array(value1, value2) or array('optgroup' => array(...))\n\t * @param array $selectedElements list of selected elements (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements = array(), $size = 1) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->elements = $elements;\n\t\tif ($selectedElements != null) {\n\t\t\t$this->selectedElements = $selectedElements;\n\t\t}\n\t\t$this->size = htmlspecialchars($size);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif (isset($values[$this->name])) {\n\t\t\t$this->selectedElements = $values[$this->name];\n\t\t}\n\t\t$multi = '';\n\t\t$name = ' name=\"' . $this->name . '\" id=\"' . $this->name . '\"';\n\t\tif ($this->multiSelect) {\n\t\t\t$multi = ' multiple';\n\t\t\t$name = ' name=\"' . $this->name . '[]\" id=\"' . $this->name . '\"';\n\t\t}\n\t\t$size = ' size=\"' . $this->size . '\"';\n\t\t$class = '';\n\t\t$classList = $this->cssClasses;\n\t\tif ($this->rightToLeftTextDirection) {\n\t\t\t$classList[] = 'rightToLeftText';\n\t\t}\n\t\t$class = ' class=\"' . implode(' ', $classList) . '\"';\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$style = '';\n\t\tif ($this->width != '') {\n\t\t\t$style = ' style=\"width: ' . $this->width . '\"';\n\t\t}\n\t\t$onchange = '';\n\t\tif ($this->onchangeEvent != null) {\n\t\t\t$onchange = $this->onchangeEvent;\n\t\t}\n\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t$this->printCodeForShowHideTableRows($onchange);\n\t\t}\n\t\tif ($onchange != '') {\n\t\t\t$onchange = ' onchange=\"' . $onchange . '\"';\n\t\t}\n\t\t// hide select boxes that contain less than 2 elements\n\t\tif ((sizeof($this->elements) < 2) && !$this->multiSelect && !$this->containsOptgroups && $this->transformSingleSelect) {\n\t\t\techo '<div class=\"hidden\">';\n\t\t}\n\t\t// print select box\n\t\techo '<select' . $this->getDataAttributesAsString() . $class . $style\n\t\t\t\t. $name . $size . $multi . $disabled . $onchange\n\t\t\t\t. ' tabindex=\"' . $tabindex . \"\\\">\\n\";\n\t\t$tabindex++;\n\t\tif ($this->containsOptgroups) {\n\t\t\tforeach ($this->elements as $label => $elements) {\n\t\t\t\tif (sizeof($elements) > 0) {\n\t\t\t\t\techo '<optgroup label=\"' . $label . '\">';\n\t\t\t\t\t$this->printOptionsHTML($elements);\n\t\t\t\t\techo '</optgroup>';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$this->printOptionsHTML($this->elements);\n\t\t}\n\t\techo \"</select>\\n\";\n\t\t// if select box has only one element then show it as text\n\t\tif ((sizeof($this->elements) < 2) && !$this->multiSelect && !$this->containsOptgroups && $this->transformSingleSelect) {\n\t\t\techo '</div>';\n\t\t\tif (sizeof($this->elements) == 1) {\n\t\t\t\techo '&nbsp;';\n\t\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\t\t$keys = array_keys($this->elements);\n\t\t\t\t\techo $keys[0];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\techo $this->elements[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\tif ($this->multiSelect) {\n\t\t\treturn array($this->name => 'multiselect');\n\t\t}\n\t\telse {\n\t\t\treturn array($this->name => 'select');\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code of the option tags.\n\t *\n\t * @param array $elements list of options\n\t */\n\tprivate function printOptionsHTML($elements) {\n\t\tif ($this->dynamicScrolling) {\n\t\t\techo \"<option value=\\\"#\\\">#</option>\\n\";\n\t\t\treturn;\n\t\t}\n\t\t// sorting\n\t\tif ($this->sortElements) {\n\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\t$labels = array_keys($elements);\n\t\t\t\tnatcasesort($labels);\n\t\t\t\t$newElements = array();\n\t\t\t\tforeach ($labels as $label) {\n\t\t\t\t\t$newElements[$label] = $elements[$label];\n\t\t\t\t}\n\t\t\t\t$elements = $newElements;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tnatcasesort($elements);\n\t\t\t}\n\t\t}\n\t\tforeach ($elements as $key => $value) {\n\t\t\t$selected = '';\n\t\t\t$optionClass = '';\n\t\t\tif (isset($this->optionCssClasses[$value])) {\n\t\t\t\t$optionClass = 'class=\"' . $this->optionCssClasses[$value] . '\"';\n\t\t\t}\n\t\t\tif ($this->hasDescriptiveElements) {\n\t\t\t\tif (in_array($value, $this->selectedElements) || (empty($this->selectedElements) && empty($value))) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\techo \"<option value=\\\"\" . htmlspecialchars($value) . \"\\\"$selected $optionClass>\" . htmlspecialchars($key) . \"</option>\\n\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (in_array($value, $this->selectedElements) || (empty($this->selectedElements) && empty($value))) {\n\t\t\t\t\t$selected = ' selected';\n\t\t\t\t}\n\t\t\t\techo \"<option$selected $optionClass>\" . htmlspecialchars($value) . \"</option>\\n\";\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Specifies if the elements are just a simple list or an assoziative array (default: simple list).\n\t *\n\t * @param boolean $hasDescriptiveElements activates descriptive elements\n\t */\n\tpublic function setHasDescriptiveElements($hasDescriptiveElements) {\n\t\t$this->hasDescriptiveElements = $hasDescriptiveElements;\n\t}\n\n\t/**\n\t * Specifies if the elements are divided into optgroups.\n\t * In this case the provided options are an array where the key is the optgroup label and the value is an array containing the options for the optgroup.\n\t *\n\t * @param boolean $containsOptgroups activates optgroups\n\t */\n\tpublic function setContainsOptgroups($containsOptgroups) {\n\t\t$this->containsOptgroups = $containsOptgroups;\n\t}\n\n\t/**\n\t * Specifies if multi-selection is enabled (default: disabled).\n\t *\n\t * @param boolean $multiSelect allows multi-selection\n\t */\n\tpublic function setMultiSelect($multiSelect) {\n\t\t$this->multiSelect = $multiSelect;\n\t}\n\n\t/**\n\t * Specifies if the elements should be sorted (default: sort).\n\t *\n\t * @param boolean $sortElements sort elements\n\t */\n\tpublic function setSortElements($sortElements) {\n\t\t$this->sortElements = $sortElements;\n\t}\n\n\t/**\n\t * Specifies if the text direction should be set to right to left.\n\t *\n\t * @param boolean $rightToLeftTextDirection if true use right to left direction\n\t */\n\tpublic function setRightToLeftTextDirection($rightToLeftTextDirection) {\n\t\t$this->rightToLeftTextDirection = $rightToLeftTextDirection;\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies the width of this selection box.\n\t *\n\t * @param String $width width (e.g. 20em)\n\t */\n\tpublic function setWidth($width) {\n\t\t$this->width = htmlspecialchars($width);\n\t}\n\n\t/**\n\t * Specifies if select boxes that contain only a single element should be transformed to a simple text field.\n\t *\n\t * @param boolean $transformSingleSelect transform single options to text\n\t */\n\tpublic function setTransformSingleSelect($transformSingleSelect) {\n\t\t$this->transformSingleSelect = $transformSingleSelect;\n\t}\n\n\t/**\n\t * Sets the JavaScript code for the onchange event.\n\t *\n\t * @param String $onchangeEvent onchange event code (e.g. myfunction();)\n\t */\n\tpublic function setOnchangeEvent($onchangeEvent) {\n\t\t$this->onchangeEvent = htmlspecialchars($onchangeEvent);\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the select is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t * <br>\n\t * <br> Example for $tableRowsToHide:\n\t * <br> array('yes' => array('option1', 'option2'), 'no' => array('option3'))\n\t *\n\t * @param array $tableRowsToHide array of select value => array of IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the select is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t * <br>\n\t * <br> Example for $tableRowsToShow:\n\t * <br> array('yes' => array('option1', 'option2'), 'no' => array('option3'))\n\t *\n\t * @param array $tableRowsToShow array of select value => array of IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n\t/**\n\t * Creates the JavaScript code to hide/show table rows based on the select value.\n\t *\n\t * @param String $onChange onChange code\n\t */\n\tprivate function printCodeForShowHideTableRows(&$onChange) {\n\t\tif ((sizeof($this->tableRowsToHide) == 0) && (sizeof($this->tableRowsToShow) == 0)) {\n\t\t\treturn;\n\t\t}\n\t\t$values = array();\n\t\tif (!empty($this->tableRowsToHide)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToHide));\n\t\t}\n\t\tif (!empty($this->tableRowsToShow)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToShow));\n\t\t}\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build Java script to show/hide depending fields\n\t\tforeach ($values as $val) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . '\\').val() == \\'' . $val . '\\') {';\n\t\t\tif (isset($this->tableRowsToShow[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$val][$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($this->tableRowsToHide[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$val][$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t}\n\t\t// build script to set initial state\n\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {' . \"\\n\";\n\t\tif (isset($this->tableRowsToShow[$this->selectedElements[0]])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$this->selectedElements[0]]); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$this->selectedElements[0]][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\tif (isset($this->tableRowsToHide[$this->selectedElements[0]])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$this->selectedElements[0]]); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$this->selectedElements[0]][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\t$script .= '});</script>';\n\t\techo $script;\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Enable dynamic scrolling. This limits the number of select options to 10000 by dynamically adding/removing options.\n\t * This will not be enabled when optgroups are used or the option size is less than 10000.\n\t */\n\tpublic function enableDynamicScrolling() {\n\t\t// not possible for optgroups and smaller option lists\n\t\tif ((sizeof($this->elements) < 10000) || $this->containsOptgroups) {\n\t\t\treturn;\n\t\t}\n\t\t$this->dynamicScrolling = true;\n\t\t$elementData = array();\n\t\tforeach ($this->elements as $key => $value) {\n\t\t\t$elementData[] = array('label' => $key, 'value' => $value);\n\t\t}\n\t\t$this->addDataAttribute('dynamic-options', json_encode($elementData));\n\t\t$this->cssClasses[] = 'lam-dynamicOptions';\n\t}\n\n\t/**\n\t * Sets CSS classes for option values.\n\t *\n\t * @param array $optionCssClasses array('option value' => 'CSS class(es)')\n\t */\n\tpublic function setOptionCssClasses(array $optionCssClasses): void {\n\t\t$this->optionCssClasses = $optionCssClasses;\n\t}\n\n}\n\n/**\n * Select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedSelect extends htmlSelect {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements, $label, $helpID = null, $size = 1) {\n\t\tparent::__construct($name, $elements, $selectedElements, $size);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Represents a radio selection.\n *\n * @package metaHTML\n */\nclass htmlRadio extends htmlElement {\n\n\t/** name of select field */\n\tprivate $name;\n\t/** elements */\n\tprivate $elements;\n\t/** selected element */\n\tprivate $selectedElement = null;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** on change code */\n\tprivate $onchangeEvent = null;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * <br>Examples:\n\t * <br>\n\t * <br>$radio = new htmlRadio('myName', array('label1' => 'value1', 'label2' => 'value2'), array('value1'));\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value)\n\t * @param String $selectedElement value of selected element (optional, default none)\n\t */\n\tfunction __construct($name, $elements, $selectedElement = null) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->elements = $elements;\n\t\tif ($selectedElement != null) {\n\t\t\t$this->selectedElement = $selectedElement;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (isset($values[$this->name][0])) {\n\t\t\t$this->selectedElement = $values[$this->name][0];\n\t\t}\n\t\t$name = ' name=\"' . $this->name . '\"';\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t$this->printInitialState();\n\t\t}\n\t\t// print radio list\n\t\t$counter = 0;\n\t\tforeach ($this->elements as $label => $value) {\n\t\t\t$showHideOnchange = '';\n\t\t\tif (($this->tableRowsToHide != null) || ($this->tableRowsToShow != null)) {\n\t\t\t\t$showHideOnchange = $this->getOnchangeCodeForShowHideTableRows($counter);\n\t\t\t}\n\t\t\t$onchange = '';\n\t\t\tif ($this->onchangeEvent != null) {\n\t\t\t\t$onchange = ' onchange=\"' . $this->onchangeEvent . '\"';\n\t\t\t}\n\t\t\telseif (!empty($showHideOnchange)) {\n\t\t\t\t$onchange = ' onchange=\"' . $showHideOnchange . '\"';\n\t\t\t}\n\t\t\t$onClick = 'onClick=\"\n\t\t\t\tjQuery(\\'input[name=' . $this->name . ']\\').prop(\\'checked\\', false);\n\t\t\t\tjQuery(\\'#' . $this->name . $counter . '\\').prop(\\'checked\\', true);\n\t\t\t\tjQuery(\\'#' . $this->name . $counter . '\\').trigger(\\'change\\');\n\t\t\t\t\"';\n\t\t\tif ($this->isEnabled === false) {\n\t\t\t\t$onClick = '';\n\t\t\t}\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\t$selected = '';\n\t\t\tif ($value == $this->selectedElement) {\n\t\t\t\t$selected = ' checked';\n\t\t\t}\n\t\t\techo '<input type=\"radio\" id=\"' . $this->name . $counter . '\"' . $name . $disabled . $selected . $onchange . ' value=\"' . $value . '\" tabindex=\"' . $tabindex . '\"> ' . $label;\n\t\t\techo '</div>';\n\t\t\t$tabindex++;\n\t\t\t$counter++;\n\t\t}\n\t\treturn array($this->name => 'select');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Sets the JavaScript code for the onchange event.\n\t *\n\t * @param String $onchangeEvent onchange event code (e.g. myfunction();)\n\t */\n\tpublic function setOnchangeEvent($onchangeEvent) {\n\t\t$this->onchangeEvent = htmlspecialchars($onchangeEvent);\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Creates the JavaScript code to hide/show table rows based on the select value.\n\t *\n\t * @param int $counter index\n\t * @return String onChange code\n\t */\n\tprivate function getOnchangeCodeForShowHideTableRows($counter) {\n\t\t$onChange = '';\n\t\tif ((sizeof($this->tableRowsToHide) == 0) && (sizeof($this->tableRowsToShow) == 0)) {\n\t\t\treturn;\n\t\t}\n\t\t$values = array();\n\t\tif (!empty($this->tableRowsToHide)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToHide));\n\t\t}\n\t\tif (!empty($this->tableRowsToShow)) {\n\t\t\t$values = array_merge($values, array_keys($this->tableRowsToShow));\n\t\t}\n\t\t$values = array_unique($values);\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build Java script to show/hide depending fields\n\t\tforeach ($values as $val) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . $counter . '\\').val() == \\'' . $val . '\\') {';\n\t\t\tif (isset($this->tableRowsToShow[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$val][$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($this->tableRowsToHide[$val])) {\n\t\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$val]); $i++) {\n\t\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$val][$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t}\n\t\treturn $onChange;\n\t}\n\n\tprivate function printInitialState() {\n\t\t$selector = $this->getShowHideSelector();\n\t\t// build script to set initial state\n\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {' . \"\\n\";\n\t\tif (isset($this->tableRowsToShow[$this->selectedElement])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow[$this->selectedElement]); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$this->selectedElement][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\tif (isset($this->tableRowsToHide[$this->selectedElement])) {\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide[$this->selectedElement]); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$this->selectedElement][$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');' . \"\\n\";\n\t\t\t}\n\t\t}\n\t\t$script .= '});</script>';\n\t\techo $script;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the radio is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br> Example for $tableRowsToHide:\n\t * <br> array('val1' => array('option1', 'option2'), 'val2' => array('option3'))\n\t *\n\t * @param array $tableRowsToHide array of select value => array of IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the radio is changed to the specified value.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br> Example for $tableRowsToShow:\n\t * <br> array('val1' => array('option1', 'option2'), 'val2' => array('option3'))\n\t *\n\t * @param array $tableRowsToShow array of select value => array of IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n}\n\n/**\n * Radio list with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedRadio extends htmlRadio {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label descriptive label\n\t * @param String $name element name\n\t * @param array $elements list of elements array(label => value)\n\t * @param String $selectedElement value of selected element (optional, default none)\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($label, $name, $elements, $selectedElement = null, $helpID = null) {\n\t\tparent::__construct($name, $elements, $selectedElement);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->label != null) {\n\t\t\techo '<div class=\"nowrap\">';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t}\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td valign=\\\"top\\\">\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the text and escapes contained HTML code by default.\n *\n * @package metaHTML\n */\nclass htmlOutputText extends htmlElement {\n\n\t/** the text to print */\n\tprivate $string;\n\t/** specifies if HTML code should be escaped */\n\tprivate $escapeHTML;\n\t/** bold text */\n\tprivate $isBold = false;\n\t/** mark as required */\n\tprivate $markAsRequired = false;\n\t/** no wrap */\n\tprivate $noWrap = false;\n\t/** preformatted */\n\tprivate $isPreformatted = false;\n\t/** title */\n\tprivate $title = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $string output text\n\t * @param boolean $escapeHTML escape HTML code (default yes)\n\t * @param boolean $markAsRequired mark text like a required field\n\t */\n\tfunction __construct($string, $escapeHTML = true, $markAsRequired = false) {\n\t\t$this->string = $string;\n\t\t$this->escapeHTML = $escapeHTML;\n\t\t$this->markAsRequired = $markAsRequired;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$cssClasses = empty($this->cssClasses) ? '' : 'class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\tif (!empty($this->title)) {\n\t\t\techo '<span title=\"' . $this->title . '\">';\n\t\t}\n\t\tif ($this->noWrap) {\n\t\t\techo \"<div class=\\\"nowrap\\\">\";\n\t\t}\n\t\tif ($this->isBold) {\n\t\t\techo \"<b>\";\n\t\t}\n\t\tif ($this->isPreformatted) {\n\t\t\techo \"<pre $cssClasses>\";\n\t\t}\n\t\telseif (!empty($cssClasses)) {\n\t\t\techo \"<span $cssClasses>\";\n\t\t}\n\t\tif ($this->escapeHTML) {\n\t\t\techo htmlspecialchars($this->string);\n\t\t}\n\t\telse {\n\t\t\techo $this->string;\n\t\t}\n\t\tif ($this->markAsRequired) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\tif ($this->isPreformatted) {\n\t\t\techo \"</pre>\";\n\t\t}\n\t\telseif (!empty($cssClasses)) {\n\t\t\techo \"</span>\";\n\t\t}\n\t\tif ($this->isBold) {\n\t\t\techo \"</b>\";\n\t\t}\n\t\tif ($this->noWrap) {\n\t\t\techo \"</div>\";\n\t\t}\n\t\tif (!empty($this->title)) {\n\t\t\techo \"</span>\";\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Specifies if the whole text should be printed in bold.\n\t *\n\t * @param boolean $isBold bold text\n\t */\n\tpublic function setIsBold($isBold) {\n\t\t$this->isBold = $isBold;\n\t}\n\n\t/**\n\t * Adds a marker that indicates a required field.\n\t *\n\t * @param boolean $markAsRequired add marker\n\t */\n\tpublic function setMarkAsRequired($markAsRequired) {\n\t\t$this->markAsRequired = $markAsRequired;\n\t}\n\n\t/**\n\t * Specifies if word wrap is allowed for this text.\n\t *\n\t * @param boolean $noWrap no wrapping if set to true (default false)\n\t */\n\tpublic function setNoWrap($noWrap) {\n\t\t$this->noWrap = $noWrap;\n\t}\n\n\t/**\n\t * Sets if the text is preformatted.\n\t *\n\t * @param boolean $preformatted is preformatted (default true)\n\t */\n\tpublic function setPreformatted($preformatted = true) {\n\t\t$this->isPreformatted = $preformatted;\n\t}\n\n\t/**\n\t * Sets a title for this text.\n\t *\n\t * @param string|null $title title\n\t */\n\tpublic function setTitle(?string $title): void {\n\t\t$this->title = $title;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a checkbox.\n *\n * @package metaHTML\n */\nclass htmlInputCheckbox extends htmlElement {\n\n\t/** unique name of input element */\n\tprotected $name;\n\t/** value */\n\tprotected $checked;\n\t/** enabled or disabled */\n\tprotected $isEnabled = true;\n\t/** list of enclosing table rows to hide when checked */\n\tprotected $tableRowsToHide = array();\n\t/** list of enclosing table rows to show when checked */\n\tprotected $tableRowsToShow = array();\n\t/** indicates that this field should not automatically be saved in the self service or server profile */\n\tprivate $transient = false;\n\t/** list of input elements to enable when checked */\n\tprotected $elementsToEnable = array();\n\t/** list of input elements to disable when checked */\n\tprotected $elementsToDisable = array();\n\t/** onclick event code */\n\tprivate $onClick;\n\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t */\n\tfunction __construct($name, $checked) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->checked = $checked;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (isset($values[$this->name])) {\n\t\t\tif ($values[$this->name][0] == 'true') {\n\t\t\t\t$this->checked = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$this->checked = false;\n\t\t\t}\n\t\t}\n\t\t$checked = '';\n\t\tif ($this->checked) {\n\t\t\t$checked = ' checked';\n\t\t}\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classes = ' ';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classes = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t// build Java script to show/hide depending fields\n\t\t$onChange = '';\n\t\t$script = '';\n\t\t$selector = $this->getShowHideSelector();\n\t\tif ((sizeof($this->tableRowsToShow) > 0) || (sizeof($this->tableRowsToHide) > 0)) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . ':checked\\').val() !== undefined) {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t}\n\t\t\t$onChange .= '}';\n\t\t\t$onChange .= 'else {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').addClass(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').removeClass(\\'hidden\\');';\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t\t// build script to set initial state\n\t\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {';\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToShow); $i++) {\n\t\t\t\t$classType = 'addClass';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'removeClass';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToShow[$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->tableRowsToHide); $i++) {\n\t\t\t\t$classType = 'removeClass';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'addClass';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->tableRowsToHide[$i] . '\\').closest(\\'' . $selector . '\\').' . $classType . '(\\'hidden\\');';\n\t\t\t}\n\t\t\t$script .= '});</script>';\n\t\t}\n\t\t// build Java script to enable/disable elements\n\t\tif ((sizeof($this->elementsToEnable) > 0) || (sizeof($this->elementsToDisable) > 0)) {\n\t\t\t// build onChange listener\n\t\t\t$onChange .= 'if (jQuery(\\'#' . $this->name . ':checked\\').val() !== undefined) {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', false);';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', true);';\n\t\t\t}\n\t\t\t$onChange .= '}';\n\t\t\t$onChange .= 'else {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', true);';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$onChange .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', false);';\n\t\t\t}\n\t\t\t$onChange .= '};';\n\t\t\t// build script to set initial state\n\t\t\t$script = '<script type=\"text/javascript\">jQuery(document).ready(function() {';\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToEnable); $i++) {\n\t\t\t\t$classType = 'true';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'false';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->elementsToEnable[$i] . '\\').prop(\\'disabled\\', ' . $classType . ');';\n\t\t\t}\n\t\t\tfor ($i = 0; $i < sizeof($this->elementsToDisable); $i++) {\n\t\t\t\t$classType = 'false';\n\t\t\t\tif ($this->checked) {\n\t\t\t\t\t$classType = 'true';\n\t\t\t\t}\n\t\t\t\t$script .= 'jQuery(\\'#' . $this->elementsToDisable[$i] . '\\').prop(\\'disabled\\', ' . $classType . ');';\n\t\t\t}\n\t\t\t$script .= '});</script>';\n\t\t}\n\t\tif (!empty($onChange)) {\n\t\t\t$onChange = ' onChange=\"' . $onChange . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif (!empty($this->onClick)) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\techo '<input type=\"checkbox\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $classes . $tabindexValue . $onChange . $onClick . $checked . $disabled . '>';\n\t\techo $script;\n\t\tif ($this->transient) {\n\t\t\treturn array();\n\t\t}\n\t\treturn array($this->name => 'checkbox');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * This will hide the given table rows when the checkbox is checked.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t *\n\t * @param array $tableRowsToHide IDs of child elements to hide\n\t */\n\tpublic function setTableRowsToHide($tableRowsToHide) {\n\t\t$this->tableRowsToHide = $tableRowsToHide;\n\t}\n\n\t/**\n\t * This will show the given table rows when the checkbox is checked.\n\t * The given IDs can be of any e.g. input element. Starting from this element\n\t * the first parent \"<tr>\" element will be used to show/hide.\n\t * <br>\n\t * <br>\n\t * <br>Example: <tr><td><input type=\"checkbox\" id=\"mycheckbox\"></td></tr>\n\t * <br> Using \"mycheckbox\" will use this \"tr\" to hide/show.\n\t *\n\t * @param array $tableRowsToShow IDs of child elements to show\n\t */\n\tpublic function setTableRowsToShow($tableRowsToShow) {\n\t\t$this->tableRowsToShow = $tableRowsToShow;\n\t}\n\n\t/**\n\t * Specifies that the value should not be automatically saved when used in self service or server profile (default: false).\n\t *\n\t * @param boolean $transient transient field\n\t */\n\tpublic function setTransient($transient) {\n\t\t$this->transient = $transient;\n\t}\n\n\t/**\n\t * This will disable the given input elements when the checkbox is checked.\n\t * The given IDs can be of any input element (e.g. select, checkbox, ...).\n\t *\n\t * @param array $elements IDs of elements to disable\n\t */\n\tpublic function setElementsToDisable($elements) {\n\t\t$this->elementsToDisable = $elements;\n\t}\n\n\t/**\n\t * This will enable the given input elements when the checkbox is checked.\n\t * The given IDs can be of any input element (e.g. select, checkbox, ...).\n\t *\n\t * @param array $elements IDs of elements to enable\n\t */\n\tpublic function setElementsToEnable($elements) {\n\t\t$this->elementsToEnable = $elements;\n\t}\n\n\t/**\n\t * Returns the CSS selector to use to find show/hide elements.\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn 'tr';\n\t}\n\n\t/**\n\t * Sets the onclick code.\n\t *\n\t * @param string $code JS code\n\t */\n\tpublic function setOnClick($code) {\n\t\t$this->onClick = $code;\n\t}\n\n}\n\n/**\n * Checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** specifies if label is printed before the checkbox */\n\tprivate $labelFirst;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param boolean $labelFirst specifies if the label is at the beginning or at the end (optional, default beginning)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $labelFirst = true) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->labelFirst = $labelFirst;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$onClick = 'onClick=\"jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();\"';\n\t\tif ($this->labelFirst) {\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\telse {\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\techo '<div class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</div>';\n\t\t}\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlLabeledInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** specifies if label is printed before the checkbox */\n\tprivate $labelFirst;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param boolean $labelFirst specifies if the label is at the beginning or at the end (optional, default beginning)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $labelFirst = true) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->labelFirst = $labelFirst;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$onClick = 'onClick=\"jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();\"';\n\t\tif ($this->labelFirst) {\n\t\t\techo '<span class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</span>';\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\telse {\n\t\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\techo '<span class=\"nowrap\" ' . $onClick . '>';\n\t\t\techo $this->label;\n\t\t\techo '</span>';\n\t\t}\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a file upload field.\n *\n * @package metaHTML\n */\nclass htmlInputFileUpload extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t */\n\tfunction __construct($name) {\n\t\t$this->name = htmlspecialchars($name);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<input type=\"file\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $tabindexValue . $classValue .\n\t\t\t$disabled . $this->getDataAttributesAsString() . '>';\n\t\treturn array($this->name => 'file');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n}\n\n/**\n * File upload with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputFileUpload extends htmlInputFileUpload {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($name, $label, $helpID = null) {\n\t\tparent::__construct($name);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a textarea.\n *\n * @package metaHTML\n */\nclass htmlInputTextarea extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** value */\n\tprivate $value;\n\t/** column count */\n\tprivate $colCount;\n\t/** row count */\n\tprivate $rowCount;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\t/** specifies if LAM should display this field with a WYSIWYG editor */\n\tprotected $richEdit = false;\n\t/** required field */\n\tprotected $required = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t\t$this->colCount = htmlspecialchars($colCount);\n\t\t$this->rowCount = htmlspecialchars($rowCount);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$this->cssClasses[] = 'ui-corner-all';\n\t\tif (isset($values[$this->name])) {\n\t\t\t$this->value = implode(\"\\r\\n\", $values[$this->name]);\n\t\t}\n\t\t$colCount = ($this->colCount != null) ? ' cols=\"' . $this->colCount . '\"' : '';\n\t\t$rowCount = ($this->rowCount != null) ? ' rows=\"' . $this->rowCount . '\"' : '';\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\t$classList = $this->cssClasses;\n\t\t$classes = '';\n\t\tif ($this->richEdit) {\n\t\t\t$classList[] = 'ckeditor';\n\t\t}\n\t\t$validators = array();\n\t\tif ($this->required) {\n\t\t\t$validators[] = 'required';\n\t\t}\n\t\tif (!empty($validators)) {\n\t\t\t$classList[] = 'validate[' . implode(',', $validators) . ']';\n\t\t}\n\t\t$classes = ' class=\"' . implode(' ', $classList) . '\"';\n\t\techo '<textarea name=\"' . $this->name . '\" id=\"' . $this->name . '\"' . $tabindexValue . $classes . $colCount .\n\t\t\t$rowCount . $this->getDataAttributesAsString() . $disabled . '>' . $this->value . '</textarea>';\n\t\treturn array($this->name => 'textarea');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n\t/**\n\t * Specifies if the textarea should be displayed with a WYSIWYG editor.\n\t * <br>This requires that the page which displays the textarea also includes the ckeditor JS.\n\t * <br>Rich editing is disabled by default.\n\t *\n\t * @param boolean $richEdit rich edit or standard\n\t */\n\tpublic function setIsRichEdit($richEdit) {\n\t\t$this->richEdit = $richEdit;\n\t}\n\n\t/**\n\t * Specifies if the input field is required.\n\t *\n\t * @param boolean $required required\n\t */\n\tpublic function setRequired($required) {\n\t\t$this->required = $required;\n\t}\n\n}\n\n/**\n * Text area with label and help link.\n *\n * @package metaHTML\n */\nclass htmlTableExtendedInputTextarea extends htmlInputTextarea {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount, $label, $helpID = null) {\n\t\tparent::__construct($name, $value, $colCount, $rowCount);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<div class=\"nowrap\">';\n\t\techo $this->label;\n\t\tif ($this->required) {\n\t\t\techo htmlGetRequiredMarker();\n\t\t}\n\t\techo '</div>';\n\t\techo \"\\n</td>\\n<td>\\n\";\n\t\t$return = parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t// print help link\n\t\tif ($this->helpID != null) {\n\t\t\techo \"\\n</td>\\n<td valign=\\\"top\\\">\\n\";\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Prints the HTML code for a color picker field.\n *\n * @package metaHTML\n */\nclass htmlInputColorPicker extends htmlElement {\n\n\t/** unique name of input element */\n\tprivate $name;\n\t/** color value */\n\tprivate $color;\n\t/** enabled or disabled */\n\tprivate $isEnabled = true;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name unique name\n\t * @param string $colorValue color value (e.g. #000000)\n\t */\n\tpublic function __construct($name, $colorValue = '#000000') {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->color = htmlspecialchars($colorValue);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$tabindexValue = ' tabindex=\"' . $tabindex . '\"';\n\t\t$tabindex++;\n\t\t$disabled = '';\n\t\tif (!$this->isEnabled) {\n\t\t\t$disabled = ' disabled';\n\t\t}\n\t\techo '<input type=\"color\" value=\"' . $this->color . '\" id=\"' . $this->name . '\" name=\"' . $this->name . '\"' . $tabindexValue . $disabled . '>';\n\t\treturn array($this->name => 'file');\n\t}\n\n\t/**\n\t * Specifies if this component is enabled and accepts user modification.\n\t *\n\t * @param boolean $isEnabled enabled if true\n\t */\n\tpublic function setIsEnabled($isEnabled) {\n\t\t$this->isEnabled = $isEnabled;\n\t}\n\n}\n\n/**\n * Color picker with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputColorPicker extends htmlInputColorPicker {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name unique name\n\t * @param string $colorValue color value (e.g. #000000)\n\t * @param string $label descriptive label\n\t * @param string $helpID help ID\n\t */\n\tpublic function __construct($name, $colorValue, $label, $helpID = null) {\n\t\tparent::__construct($name, $colorValue);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputColorPicker::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n}\n\n/**\n * Prints the HTML code for an image.\n *\n * @package metaHTML\n */\nclass htmlImage extends htmlElement {\n\n\t/** path to image */\n\tprivate $path;\n\t/** width */\n\tprivate $width;\n\t/** height */\n\tprivate $height;\n\t/** alt text */\n\tprivate $alt;\n\t/** title */\n\tprivate $title;\n\t/** onClick event */\n\tprivate $onClick = null;\n\t/** enable cropping */\n\tprivate $crop = false;\n\t/** enable lightbox */\n\tprivate $lightbox = false;\n\t/** @var string help popup title */\n\tprivate $helpTitle = null;\n\t/** @var htmlElement help popup content\t*/\n\tprivate $helpContent = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $path image location\n\t * @param int $width image width (optional, default original size)\n\t * @param int $height image height (optional, default original size)\n\t * @param String $alt alt text (optional)\n\t * @param String $onClick onClick code (optional)\n\t */\n\tpublic function __construct($path, $width = null, $height = null, $alt = ' ', $title = null, $onClick = null) {\n\t\t$this->path = htmlspecialchars($path);\n\t\t$this->width = $width;\n\t\t$this->height = $height;\n\t\t$this->alt = htmlspecialchars($alt);\n\t\t$this->title = $title;\n\t\t$this->onClick = $onClick;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$path = ' src=\"' . $this->path . '\"';\n\t\t$width = '';\n\t\tif ($this->width != null) {\n\t\t\t$width = ' width=\"' . $this->width . '\"';\n\t\t}\n\t\t$height = '';\n\t\tif ($this->height != null) {\n\t\t\t$height = ' height=\"' . $this->height . '\"';\n\t\t}\n\t\t$alt = ' alt=\"' . $this->alt . '\"';\n\t\t$title = '';\n\t\tif (!empty($this->title)) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\tif ($this->crop) {\n\t\t\t$this->cssClasses[] = 'cropperjsImage';\n\t\t}\n\t\t$classes = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classes = 'class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\tif ($this->lightbox) {\n\t\t\techo '<a href=\"' . $this->path . '\" class=\"lam-lightbox\">';\n\t\t}\n\t\t$helpTitleValue = '';\n\t\t$helpContentValue = '';\n\t\tif ($this->helpTitle !== null) {\n\t\t\t$helpTitleValue = ' helptitle=\"' . $this->helpTitle . '\"';\n\t\t\tob_start();\n\t\t\t$this->helpContent->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t$helpContentString = ob_get_contents();\n\t\t\tob_end_clean();\n\t\t\t$helpContentValue = ' helpdata=\"' . htmlspecialchars($helpContentString) . '\"';\n\t\t}\n\t\techo '<img' . $path . $width . $height . $alt . $title . $classes . $onClick . $helpTitleValue . $helpContentValue . $this->getDataAttributesAsString() . \">\";\n\t\tif ($this->lightbox) {\n\t\t\techo '</a>';\n\t\t}\n\t\tif ($this->crop) {\n\t\t\t$cropJsPath = 'templates/lib/extra/cropperjs/cropper.js';\n\t\t\tif (is_file('../../templates/login.php')) {\n\t\t\t\t$cropJsPath = '../../' . $cropJsPath;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$cropJsPath = '../' . $cropJsPath;\n\t\t\t}\n\t\t\techo '<script type=\"text/javascript\" src=\"' . $cropJsPath . '\"></script>';\n\t\t\techo '<script type=\"text/javascript\">\n\t\t\t\t\tvar image = jQuery(\\'.cropperjsImage\\')[0];\n\t\t\t\t\tvar cropper = new Cropper(image, {\n\t\t\t\t\t\tviewMode: 1,\n\t\t\t\t\t\tmovable: false,\n\t\t\t\t\t\tzoomable: false,\n\t\t\t\t\t\tcrop: function(event) {\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataX\\').val(event.detail.x);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataY\\').val(event.detail.y);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataWidth\\').val(event.detail.width);\n\t\t\t\t\t\t\tjQuery(\\'#croppingDataHeight\\').val(event.detail.height);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t</script>';\n\t\t\techo '<input id=\"croppingDataX\" type=\"hidden\" name=\"croppingDataX\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataY\" type=\"hidden\" name=\"croppingDataY\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataWidth\" type=\"hidden\" name=\"croppingDataWidth\" value=\"0\"/>';\n\t\t\techo '<input id=\"croppingDataHeight\" type=\"hidden\" name=\"croppingDataHeight\" value=\"0\"/>';\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Enables cropping feature.\n\t * This will display a cropping box on the image. The cropping data\n\t * can be found in POST data (croppingDataX, croppingDataY, croppingDataWidth, croppingDataHeight).\n\t */\n\tpublic function enableCropping() {\n\t\t$this->crop = true;\n\t}\n\n\t/**\n\t * Enables lightbox feature.\n\t */\n\tpublic function enableLightbox() {\n\t\t$this->lightbox = true;\n\t}\n\n\t/**\n\t * Activates the help popup on hover.\n\t *\n\t * @param string $title title\n\t * @param htmlElement $content help content\n\t */\n\tpublic function setHelpData(string $title, htmlElement $content) {\n\t\t$this->helpTitle = htmlspecialchars($title);\n\t\t$this->helpContent = $content;\n\t}\n\n\t/**\n\t * Sets the onClick event code.\n\t *\n\t * @param string $code JS code\n\t */\n\tpublic function setOnClick(string $code): void {\n\t\t$this->onClick = $code;\n\t}\n\n}\n\n/**\n * Adds an empty space with given width and height.\n *\n * @package metaHTML\n */\nclass htmlSpacer extends htmlElement {\n\n\t/** width of spacer in px */\n\tprivate $width = null;\n\t/** height of spacer in px */\n\tprivate $height = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $width width (e.g. 10px)\n\t * @param String $height height (e.g. 10px)\n\t */\n\tfunction __construct($width, $height = null) {\n\t\tif ($width !== null) {\n\t\t\t$this->width = htmlspecialchars($width);\n\t\t}\n\t\tif ($height !== null) {\n\t\t\t$this->height = htmlspecialchars($height);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$width = '';\n\t\tif ($this->width !== null) {\n\t\t\t$width = 'width: ' . $this->width . ';';\n\t\t}\n\t\t$height = '';\n\t\tif ($this->height !== null) {\n\t\t\t$height = 'height: ' . $this->height . ';';\n\t\t}\n\t\techo \"<div style=\\\"$width $height display: inline-block;\\\"></div>\\n\";\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Prints a status message (e.g. error message).\n *\n * @package metaHTML\n */\nclass htmlStatusMessage extends htmlElement {\n\n\t/** message type (e.g. ERROR) */\n\tprivate $type;\n\t/** message title */\n\tprivate $title;\n\t/** message text */\n\tprivate $text;\n\t/** message parameters */\n\tprivate $params;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $type message type (e.g. ERROR)\n\t * @param String $title message title\n\t * @param String $text message (optional)\n\t * @param array $params additional message parameters\n\t */\n\tpublic function __construct($type, $title, $text = null, $params = null) {\n\t\t$this->type = $type;\n\t\t$this->title = $title;\n\t\t$this->text = $text;\n\t\t$this->params = $params;\n\t}\n\n\t/**\n\t * Constructor with parameter array.\n\t *\n\t * @param array $params parameters in same order as normal constructor\n\t * @return htmlStatusMessage\n\t */\n\tpublic static function fromParamArray($params) {\n\t\tif (sizeof($params) < 2) {\n\t\t\tthrow new BadMethodCallException(\"Invalid parameter count\");\n\t\t}\n\n\t\t$count = count($params);\n\t\tswitch ($count) {\n\t\t\tcase 2:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1]);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1], $params[2]);\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\treturn new htmlStatusMessage($params[0], $params[1], $params[2], $params[3]);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new BadMethodCallException(\"Invalid parameter count\");\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (!empty($this->cssClasses)) {\n\t\t\techo '<div class=\"' . implode(' ', $this->cssClasses) . '\">';\n\t\t}\n\t\tStatusMessage($this->type, $this->title, $this->text, $this->params);\n\t\tif (!empty($this->cssClasses)) {\n\t\t\techo '</div>';\n\t\t}\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns the message type.\n\t *\n\t * @return String type\n\t */\n\tpublic function getType() {\n\t\treturn $this->type;\n\t}\n\n}\n\n/**\n * Generates a title line. This is used for page titles.\n *\n * @package metaHTML\n */\nclass htmlTitle extends htmlElement {\n\n\t/** descriptive label */\n\tprivate $label = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label label\n\t */\n\tfunction __construct($label) {\n\t\t$this->label = htmlspecialchars($label);\n\t\t// the title should not end at a table cell\n\t\t$this->colspan = 100;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo \"<div class=\\\"title\\\">\\n\";\n\t\techo \"<h2 class=\\\"titleText\\\">\\n\";\n\t\techo $this->label;\n\t\techo \"</h2>\\n\";\n\t\techo \"</div>\\n\";\n\t\treturn array();\n\t}\n\n}\n\n/**\n * Generates a subtitle line. This is used to group multiple fields.\n *\n * @package metaHTML\n */\nclass htmlSubTitle extends htmlElement {\n\n\t/** descriptive label */\n\tprivate $label = null;\n\t/** optional image */\n\tprivate $image = null;\n\t/** optional ID for this element (e.g. to use for JavaScript) */\n\tprivate $id = null;\n\t/** show large icon */\n\tprivate $largeIcon = false;\n\t/** help ID */\n\tprivate $helpId = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $label label\n\t * @param String $image optional image\n\t * @param String $id optional ID for this element (e.g. to use for JavaScript)\n\t * @param bool $largeIcon show large (32x32px) icon instead of small one (16x16px)\n\t */\n\tpublic function __construct($label, $image = null, $id = null, $largeIcon = false) {\n\t\t$this->label = htmlspecialchars($label);\n\t\tif ($image !== null) {\n\t\t\t$this->image = htmlspecialchars($image);\n\t\t}\n\t\tif ($id !== null) {\n\t\t\t$this->id = htmlspecialchars($id);\n\t\t}\n\t\t// the title should not end at a table cell\n\t\t$this->colspan = 100;\n\t\t$this->largeIcon = $largeIcon;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$idValue = '';\n\t\tif ($this->id != null) {\n\t\t\t$idValue = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo \"<div $idValue class=\\\"subTitle\\\">\\n\";\n\t\techo \"<h4 class=\\\"subTitleText\\\">\\n\";\n\t\tif ($this->image != null) {\n\t\t\t$size = $this->largeIcon ? 32 : 16;\n\t\t\techo '<img height=' . $size . ' width=' . $size . ' src=\"' . $this->image . '\" alt=\"' . $this->label . '\">&nbsp;';\n\t\t}\n\t\techo $this->label;\n\t\tif ($this->helpId !== null) {\n\t\t\t$spacer = new htmlSpacer('0.5rem', null);\n\t\t\t$spacer->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t\t$helpLink = new htmlHelpLink($this->helpId);\n\t\t\t$helpLink->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo \"</h4>\\n\";\n\t\techo \"</div>\\n\";\n\t\treturn array();\n\t}\n\n\t/**\n\t * Sets an additional help id.\n\t *\n\t * @param string|array $helpId\n\t */\n\tpublic function setHelpId($helpId) {\n\t\t$this->helpId = $helpId;\n\t}\n\n}\n\n/**\n * Generates a hidden input field.\n *\n * @package metaHTML\n */\nclass htmlHiddenInput extends htmlElement {\n\n\t/** field name */\n\tprivate $name = null;\n\t/** field value */\n\tprivate $value = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name input name\n\t * @param String $value input value\n\t */\n\tfunction __construct($name, $value) {\n\t\t$this->name = htmlspecialchars($name);\n\t\t$this->value = htmlspecialchars($value);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\techo '<input type=\"hidden\" name=\"' . $this->name . '\" id=\"' . $this->name . '\" value=\"' . $this->value . '\">';\n\t\treturn array($this->name => 'hidden');\n\t}\n\n}\n\n/**\n * Generates a link.\n * The link can include an optional image in front of the link text.\n *\n * @package metaHTML\n */\nclass htmlLink extends htmlElement {\n\n\t/** link text */\n\tprivate $text = null;\n\t/** link target */\n\tprotected $target = null;\n\t/** optional image */\n\tprivate $image = null;\n\t/** title */\n\tprivate $title = null;\n\t/** target window */\n\tprivate $targetWindow = null;\n\t/** onClick event */\n\tprivate $onClick = null;\n\t/** onMouseOver event */\n\tprivate $onMouseOver = null;\n\t/** link id */\n\tprivate $id;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $text label\n\t * @param String $target target URL\n\t * @param String $image URL of optional image\n\t */\n\tfunction __construct($text, $target, $image = null) {\n\t\tif ($text !== null) {\n\t\t\t$this->text = htmlspecialchars($text);\n\t\t}\n\t\tif ($target !== null) {\n\t\t\t$this->target = htmlspecialchars($target);\n\t\t}\n\t\tif ($image !== null) {\n\t\t\t$this->image = htmlspecialchars($image);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$text = $this->getContent();\n\t\t$image = '';\n\t\tif ($this->image != null) {\n\t\t\t$image = '<img class=\"align-middle\" src=\"' . $this->image . '\" alt=\"' . $this->getAlt() . '\">';\n\t\t\tif (!empty($text)) {\n\t\t\t\t$image .= '&nbsp;';\n\t\t\t}\n\t\t}\n\t\t$title = '';\n\t\tif ($this->title != null) {\n\t\t\t$title = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\t$targetWindow = '';\n\t\tif ($this->targetWindow != null) {\n\t\t\t$targetWindow = ' target=\"' . $this->targetWindow . '\"';\n\t\t}\n\t\t$onClick = '';\n\t\tif ($this->onClick != null) {\n\t\t\t$onClick = ' onclick=\"' . $this->onClick . '\"';\n\t\t}\n\t\t$onMouseOver = '';\n\t\tif ($this->onMouseOver != null) {\n\t\t\t$onMouseOver = ' onmouseover=\"' . $this->onMouseOver . '\"';\n\t\t}\n\t\t$idAttr = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$id = !empty($this->id) ? $this->id : 'a_' . preg_replace('/[^a-zA-Z0-9_]+/', '_', $this->target);\n\t\t\t$idAttr = ' id=\"' . $id . '\"';\n\t\t}\n\t\t$classAttr = '';\n\t\tif (sizeof($this->cssClasses) > 0) {\n\t\t\t$classAttr = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<a href=\"' . $this->target . '\"' . $idAttr . $classAttr . $title . $targetWindow . $onClick . $onMouseOver . $this->getDataAttributesAsString() . '>' . $image . $text . '</a>';\n\t\treturn array();\n\t}\n\n\t/**\n\t * Returns the value for the alt attribute.\n\t *\n\t * @return string alt value\n\t */\n\tprotected function getAlt() {\n\t\treturn $this->text;\n\t}\n\n\t/**\n\t * Returns the value for the link content.\n\t *\n\t * @return string content\n\t */\n\tprotected function getContent() {\n\t\treturn $this->text;\n\t}\n\n\t/**\n\t * Sets the link title.\n\t *\n\t * @param String $title title\n\t */\n\tpublic function setTitle($title) {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n\t/**\n\t * Sets the target window (e.g. _blank).\n\t *\n\t * @param String $window target window (e.g. _blank)\n\t */\n\tpublic function setTargetWindow($window) {\n\t\t$this->targetWindow = htmlspecialchars($window);\n\t}\n\n\t/**\n\t * Sets the onClick event.\n\t *\n\t * @param String $event JavaScript code\n\t */\n\tpublic function setOnClick($event) {\n\t\t$this->onClick = htmlspecialchars($event);\n\t}\n\n\t/**\n\t * Sets the onMouseOver event.\n\t *\n\t * @param String $event JavaScript code\n\t */\n\tpublic function setOnMouseOver($event) {\n\t\t$this->onMouseOver = htmlspecialchars($event);\n\t}\n\n\t/**\n\t * Sets the element id.\n\t *\n\t * @param string $id unique id\n\t */\n\tpublic function setId($id) {\n\t\t$this->id = $id;\n\t}\n\n}\n\n/**\n * Generates a link around a htmlElement.\n *\n * @package metaHTML\n */\nclass htmlContentLink extends htmlLink {\n\n\tprivate $content = null;\n\tprivate $contentText = '';\n\n\t/**\n\t * Constructor\n\t *\n\t * @param htmlElement $content content to link\n\t * @param String $target link target\n\t * @param boolean $highlightOnHover highlight content on hover\n\t */\n\tfunction __construct($content, $target) {\n\t\t$this->content = $content;\n\t\t$this->target = htmlspecialchars($target);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tob_start();\n\t\tparseHtml($module, $this->content, $values, $restricted, $tabindex, $scope);\n\t\t$this->contentText = ob_get_contents();\n\t\tob_end_clean();\n\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Returns the value for the alt attribute.\n\t *\n\t * @return string alt value\n\t */\n\tprotected function getAlt() {\n\t\treturn '';\n\t}\n\n\t/**\n\t * Returns the value for the link content.\n\t *\n\t * @return string content\n\t */\n\tprotected function getContent() {\n\t\treturn $this->contentText;\n\t}\n\n}\n\n/**\n * Groups multiple htmlElements.\n * This is useful if multiple elements should be included in a single table cell.\n * The HTML code of the subelements is printed in the order they were added. No additional code is added.\n *\n * @package metaHTML\n */\nclass htmlGroup extends htmlElement {\n\n\t/** link text */\n\tprivate $subelements = array();\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\tfor ($i = 0; $i < sizeof($this->subelements); $i++) {\n\t\t\t$return = array_merge($return, $this->subelements[$i]->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Adds a subelement.\n\t *\n\t * @param htmlElement $sub subelement\n\t */\n\tpublic function addElement($sub) {\n\t\t$this->subelements[] = $sub;\n\t}\n\n}\n\n/**\n * Prints a horizontal line.\n *\n * @package metaHTML\n */\nclass htmlHorizontalLine extends htmlElement {\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo \"<hr>\";\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a simple DIV element.\n *\n * @package metaHTML\n */\nclass htmlDiv extends htmlElement {\n\n\t/** unique ID */\n\tprivate $id = null;\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $id unique ID\n\t * @param htmlElement $content inner content\n\t * @param array $classes CSS classes\n\t * @param string[] $cssClasses CSS classes\n\t */\n\tfunction __construct($id, $content, $cssClasses = null) {\n\t\tif ($id !== null) {\n\t\t\t$this->id = htmlspecialchars($id);\n\t\t}\n\t\t$this->content = $content;\n\t\t$this->cssClasses = $cssClasses;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$idValue = '';\n\t\tif ($this->id != null) {\n\t\t\t$idValue = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\t$classesValue = '';\n\t\tif (($this->cssClasses != null) && (sizeof($this->cssClasses) > 0)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<div' . $idValue . $classesValue . $this->getDataAttributesAsString() . '>';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n}\n\n/**\n * Creates a simple SPAN element.\n *\n * @package metaHTML\n */\nclass htmlSpan extends htmlElement {\n\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\t/** onclick handler */\n\tprivate $onclick = null;\n\t/** title */\n\tprivate $title = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param htmlElement $content inner content\n\t * @param array $classes CSS classes\n\t * @param string[] $cssClasses CSS classes\n\t */\n\tfunction __construct($content, $cssClasses = null) {\n\t\t$this->content = $content;\n\t\t$this->cssClasses = $cssClasses;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$classesValue = '';\n\t\tif (($this->cssClasses != null) && (sizeof($this->cssClasses) > 0)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\t$onclickHandler = '';\n\t\tif (!empty($this->onclick)) {\n\t\t\t$onclickHandler = ' onclick=\"' . $this->onclick . '\"';\n\t\t}\n\t\t$titleCode = '';\n\t\tif ($this->title !== null) {\n\t\t\t$titleCode = ' title=\"' . $this->title . '\"';\n\t\t}\n\t\techo '<span' . $classesValue . $titleCode . $onclickHandler . '>';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</span>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the onclick event.\n\t *\n\t * @param string $event event handler code\n\t */\n\tpublic function setOnclick($event) {\n\t\t$this->onclick = $event;\n\t}\n\n\t/**\n\t * Sets the title.\n\t *\n\t * @param string|null $title title\n\t */\n\tpublic function setTitle(?string $title): void {\n\t\t$this->title = htmlspecialchars($title);\n\t}\n\n}\n\n/**\n * Creates a JavaScript element.\n *\n * @package metaHTML\n */\nclass htmlJavaScript extends htmlElement {\n\n\t/** htmlElement that generates inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $content script\n\t */\n\tfunction __construct($content) {\n\t\t$this->content = $content;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<script type=\"text/javascript\">';\n\t\techo $this->content;\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a iframe element.\n *\n * @package metaHTML\n */\nclass htmlIframe extends htmlElement {\n\n\t/** HTML id */\n\tprivate $id = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $content script\n\t */\n\tfunction __construct($id = null) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$idAttr = '';\n\t\tif (!empty($this->id)) {\n\t\t\t$idAttr = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo '<iframe ' . $idAttr . $this->getDataAttributesAsString() . '>';\n\t\techo '</iframe>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a Script element to integrate external JavaScript files.\n *\n * @package metaHTML\n */\nclass htmlScript extends htmlElement {\n\n\t/** src value */\n\tprivate $src = null;\n\t/** is async */\n\tprivate $async = false;\n\t/** execute after page is parsed */\n\tprivate $defer = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $src script path\n\t * @param boolean $isAsync script will be executed while the page continues the parsing (default true)\n\t * @param boolean $isDeferred script is executed when the page has finished parsing (default true)\n\t */\n\tfunction __construct($src, $isAsync = true, $isDeferred = true) {\n\t\t$this->src = $src;\n\t\t$this->async = $isAsync;\n\t\t$this->defer = $isDeferred;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$async = $this->async ? ' async' : '';\n\t\t$defer = $this->defer ? ' defer=\"defer\"' : '';\n\t\techo '<script src=\"' . $this->src . '\"' . $async . $defer . '>';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a link element to integrate external CSS files.\n *\n * @package metaHTML\n */\nclass htmlLinkCss extends htmlElement {\n\n\t/** src value */\n\tprivate $src = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $src script path\n\t */\n\tfunction __construct($src) {\n\t\t$this->src = $src;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<link href=\"' . $this->src . '\" type=\"text/css\" rel=\"stylesheet\"/>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Sets all given elements to the same width.\n *\n * @package metaHTML\n */\nclass htmlEqualWidth extends htmlElement {\n\n\t/** list of element IDs */\n\tprivate $elements = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of element IDs\n\t */\n\tfunction __construct($elements) {\n\t\tforeach ($elements as $element) {\n\t\t\t$this->elements[] = htmlspecialchars($element);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\t$listContent = \"'#\" . $this->elements[0] . \"'\";\n\t\tfor ($i = 1; $i < sizeof($this->elements); $i++) {\n\t\t\t$listContent .= \", '#\" . $this->elements[$i] . \"'\";\n\t\t}\n\t\techo '<script type=\"text/javascript\">';\n\t\techo ' jQuery(document).ready(function() {';\n\t\techo '  var equalWidthElements = new Array(' . $listContent . ');';\n\t\techo '  equalWidth(equalWidthElements);';\n\t\techo ' });';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Sets all given elements to the same height.\n *\n * @package metaHTML\n */\nclass htmlEqualHeight extends htmlElement {\n\n\t/** list of element IDs */\n\tprivate $elements = array();\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of element IDs\n\t */\n\tfunction __construct($elements) {\n\t\tforeach ($elements as $element) {\n\t\t\t$this->elements[] = htmlspecialchars($element);\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\t$listContent = \"'#\" . $this->elements[0] . \"'\";\n\t\tfor ($i = 1; $i < sizeof($this->elements); $i++) {\n\t\t\t$listContent .= \", '#\" . $this->elements[$i] . \"'\";\n\t\t}\n\t\techo '<script type=\"text/javascript\">';\n\t\techo ' jQuery(document).ready(function() {';\n\t\techo '  var equalHeightElements = new Array(' . $listContent . ');';\n\t\techo '  equalHeight(equalHeightElements);';\n\t\techo ' });';\n\t\techo '</script>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * Creates a list of elements that can be sorted by the user via drag'n'drop.\n *\n * @package metaHTML\n */\nclass htmlSortableList extends htmlElement {\n\n\t/** list of elements */\n\tprivate $elements = array();\n\t/** HTML ID */\n\tprivate $id = '';\n\t/** element width */\n\tprivate $elementWidth = '';\n\t/** on update event */\n\tprivate $onUpdate = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param array $elements list of elements as text (HTML special chars must be escaped already) or htmlElement\n\t * @param String HTML ID\n\t * @param String $elementWidth width of elements (default 250px)\n\t */\n\tfunction __construct($elements, $id, $elementWidth='250px') {\n\t\t$this->elements = $elements;\n\t\t$this->id = htmlspecialchars($id);\n\t\t$this->elementWidth = $elementWidth;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif (sizeof($this->elements) == 0) {\n\t\t\treturn array();\n\t\t}\n\t\t$return = array();\n\t\techo '<ul style=\"width:' . $this->elementWidth . ';\" class=\"sortableList\" id=\"' . $this->id . '\">';\n\t\tforeach ($this->elements as $element) {\n\t\t\techo '<li class=\"ui-state-default\"><span class=\"ui-icon ui-icon-arrowthick-2-n-s\"></span>';\n\t\t\tif ($element instanceof htmlElement) {\n\t\t\t\tparseHtml($module, $element, $values, $restricted, $tabindex, $scope);\n\t\t\t}\n\t\t\telse {\n\t\t\t\techo $element;\n\t\t\t}\n\t\t\techo '</li>';\n\t\t}\n\t\techo '</ul>';\n\t\t$onUpdate = '';\n\t\tif ($this->onUpdate != null) {\n\t\t\t$onUpdate = '{\n\t\t\t\tupdate: function(event, ui) {' . $this->onUpdate . '},\n\t\t\t\tstart:  function(event, ui) {\n\t\t\t\t            var posOrig = ui.item.index();\n            \t\t\t\tui.item.data(\\'posOrig\\', posOrig);\n        \t\t\t\t}\n\t\t\t}';\n\t\t}\n\t\t$scriptContent = '\n\t\t\tjQuery(function() {\n\t\t\t\t$(\"#' . $this->id . '\").sortable(' . $onUpdate . ');\n\t\t\t\t$(\"#' . $this->id . '\").disableSelection();\n\t\t\t});';\n\t\t$script = new htmlJavaScript($scriptContent);\n\t\t$script->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the JS code that is executed when the element order was changed.\n\t * The code can access the variables event and ui. See JQueryUI docs for details.\n\t * ui.item.data('posOrig') will contain the original position of the moved element.\n\t *\n\t * @param String $onUpdate JS code\n\t */\n\tpublic function setOnUpdate($onUpdate) {\n\t\t$this->onUpdate = $onUpdate;\n\t}\n\n}\n\n/**\n * Creates a list of content elements in accordion style.\n * HTML special characters must be escaped before providing to htmlAccordion.\n */\nclass htmlAccordion extends htmlElement {\n\n\tprivate $id = null;\n\tprivate $elements = null;\n\tprivate $openInitial = '1';\n\tprivate $collapsible = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $id HTML ID\n\t * @param array $elements list of content elements array('title' => htmlElement)\n\t * @param String $openInitial index of element that is initially opened (default: 0), set to 'false' to close all\n\t * @param boolean $collapsible specifies if all elements may be closed at the same time (default: false, true if $openInitial is false)\n\t */\n\tfunction __construct($id, $elements, $openInitial = '0', $collapsible = false) {\n\t\t$this->id = $id;\n\t\t$this->elements = $elements;\n\t\t$this->openInitial = $openInitial;\n\t\tif (($openInitial === 'false') || ($openInitial === false)) {\n\t\t\t$this->collapsible = true;\n\t\t}\n\t\telse {\n\t\t\t$this->collapsible = $collapsible;\n\t\t}\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$result = array();\n\t\t$collapsible = 'false';\n\t\tif ($this->collapsible) {\n\t\t\t$collapsible = 'true';\n\t\t}\n\t\t$active = 'false';\n\t\tif ($this->openInitial !== false) {\n\t\t\t$active = $this->openInitial;\n\t\t}\n\t\techo '<div id=\"' . $this->id . '\">';\n\t\tforeach ($this->elements as $label => $content) {\n\t\t\techo '<h3>' . $label . '</h3>';\n\t\t\techo '<div>';\n\t\t\t$result = array_merge($result, $content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t\techo '</div>';\n\t\t}\n\t\techo '</div>';\n\t\t$hiddenIndexId = $this->id . \"_index\";\n\t\techo '<input type=\"hidden\" name=\"' . $hiddenIndexId . '\" id=\"' . $hiddenIndexId . '\" value=\"' . $active . '\">';\n\t\t$script = 'jQuery(function() {\n\t\t\t\t\t\t$( \"#' . $this->id . '\" ).accordion({\n\t\t\t\t\t\tcollapsible: ' . $collapsible . ',\n\t\t\t\t\t\tactive: ' . $active . ',\n\t\t\t\t\t\tactivate: function( event, ui ) {\n\t\t\t\t\t\t\t\t\tvar newOption = jQuery(\"#' . $this->id . '\").accordion( \"option\", \"active\" );\n\t\t\t\t\t\t\t\t\tjQuery(\"#' . $this->id . '_index\").val(newOption);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});';\n\t\t$js = new htmlJavaScript($script);\n\t\t$js->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\treturn $result;\n\t}\n\n}\n\n/**\n * Creates a Google reCAPTCHA element.\n *\n * @package metaHTML\n */\nclass htmlReCAPTCHA extends htmlElement {\n\n\t/** site key */\n\tprivate $key = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $key site key\n\t */\n\tfunction __construct($key) {\n\t\t$this->key = htmlspecialchars($key);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$script = new htmlScript('https://www.google.com/recaptcha/api.js');\n\t\t$script->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\techo '<div class=\"g-recaptcha\" data-sitekey=\"' . $this->key . '\"></div>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Responsive row with 12 column layout.\n */\nclass htmlResponsiveRow extends htmlElement {\n\n\t/** @var htmlResponsiveCell[] cells */\n\tprivate $cells = array();\n\t/** HTML ID */\n\tprivate $id = null;\n\n\t/**\n\t * Creates a new responsive row.\n\t *\n\t * @param htmlElement $label label element if this is a simple label+field row\n\t * @param htmlElement $field field element if this is a simple label+field row\n\t */\n\tpublic function __construct($label = null, $field = null) {\n\t\t$this->cells = array();\n\t\tif ($label != null) {\n\t\t\t$this->addLabel($label);\n\t\t}\n\t\tif ($field != null) {\n\t\t\t$this->addField($field);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the HTML id.\n\t *\n\t * @param string $id ID\n\t */\n\tpublic function setId($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * Adds a responsive cell to the row.\n\t *\n\t * @param htmlResponsiveCell $cell cell\n\t */\n\tpublic function addCell($cell) {\n\t\t$this->cells[] = $cell;\n\t}\n\n\t/**\n\t * Adds a cell with the given content and column counts.\n\t *\n\t * @param htmlElement $content content inside cell\n\t * @param int $numMobile number of columns for mobile view\n\t * @param int $numTablet number of columns for tablet view (set to mobile if null)\n\t * @param int $numDesktop number of columns for desktop view (set to tablet if null)\n\t * @param String $classes CSS classes separated by space\n\t */\n\tpublic function add($content, $numMobile = 12, $numTablet = null, $numDesktop = null, $classes = '') {\n\t\t$tabletCols = ($numTablet === null) ? $numMobile : $numTablet;\n\t\t$desktopCols = ($numDesktop === null) ? $tabletCols : $numDesktop;\n\t\t$this->addCell(new htmlResponsiveCell($content, $numMobile, $tabletCols, $desktopCols, $classes));\n\t}\n\n\t/**\n\t * Adds the content as a typical label with 12/6/6 columns and CSS class \"responsiveLabel\".\n\t *\n\t * @param htmlElement $content label\n\t * @param string $cssClasses additional CSS classes\n\t */\n\tpublic function addLabel($content, $cssClasses = '') {\n\t\t$this->add($content, 12, 6, 6, 'responsiveLabel nowrap ' . $cssClasses);\n\t}\n\n\t/**\n\t * Adds the content as a typical field with 12/6/6 columns and CSS class \"responsiveField\".\n\t *\n\t * @param htmlElement $content field\n\t * @param string $cssClasses CSS class names separated by space\n\t */\n\tpublic function addField($content, $cssClasses = '') {\n\t\t$this->add($content, 12, 6, 6, 'responsiveField ' . $cssClasses);\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$cssClasses = implode(' ', $this->cssClasses);\n\t\t$idParam = '';\n\t\tif ($this->id !== null) {\n\t\t\t$idParam = ' id=\"' . $this->id . '\"';\n\t\t}\n\t\techo '<div class=\"row ' . $cssClasses . '\"' .  $this->getDataAttributesAsString() . $idParam . '>';\n\t\tforeach ($this->cells as $cell) {\n\t\t\t$return = array_merge($return, $cell->generateHTML($module, $input, $values, $restricted, $tabindex, $scope));\n\t\t}\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Adds a vertical spacer with 12 columns.\n\t *\n\t * @param string $space space in px or rem\n\t */\n\tpublic function addVerticalSpacer($space) {\n\t\t$this->add(new htmlSpacer(null,\t$space), 12);\n\t}\n\n\t/**\n\t * Returns the current number of cells.\n\t *\n\t * @return int cell count\n\t */\n\tpublic function getCellCount(): int {\n\t\treturn sizeof($this->cells);\n\t}\n\n}\n\n/**\n * Responsive cell inside htmlResponsiveRow with 12 column layout.\n */\nclass htmlResponsiveCell extends htmlElement {\n\n\tprivate $content = null;\n\tprivate $mobile = null;\n\tprivate $tablet = null;\n\tprivate $desktop = null;\n\tprivate $classes = '';\n\n\t/**\n\t * Constructs a cell inside a responsive row with 12 columns.\n\t *\n\t * @param htmlElement $content content inside cell\n\t * @param int $numMobile number of columns for mobile view\n\t * @param int $numTablet number of columns for tablet view\n\t * @param int $numDesktop number of columns for desktop view\n\t * @param String $classes CSS classes separated by space\n\t */\n\tpublic function __construct($content, $numMobile, $numTablet, $numDesktop, $classes = '') {\n\t\t$this->content = $content;\n\t\t$this->mobile = $numMobile;\n\t\t$this->tablet = $numTablet;\n\t\t$this->desktop = $numDesktop;\n\t\t$this->classes = $classes;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$clMobile = ($this->mobile > 0) ? 'small-' . $this->mobile : 'hide-for-small-only';\n\t\t$clTablet = ($this->tablet > 0) ? 'medium-' . $this->tablet : 'hide-for-medium-only';\n\t\t$clDesktop = ($this->desktop > 0) ? 'large-' . $this->desktop : 'hide-for-large-only';\n\n\t\techo '<div class=\"' . $clMobile . ' ' . $clTablet . ' ' . $clDesktop . ' columns ' . $this->classes . '\">';\n\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\techo '</div>';\n\t\treturn $return;\n\t}\n\n}\n\n/**\n * A responsive input field that combines label, input field and help.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputField extends htmlInputField {\n\n\t/** Descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\t\n\t/**\n\t * Constructor\n\t *\n\t * @param String $label descriptive label\n\t * @param String $fieldName unique field name\n\t * @param String $fieldValue value of input field (optional)\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param bool $required field is required\n\t */\n\tfunction __construct($label, $fieldName, $fieldValue = null, $helpID = null, $required = false) {\n\t\tparent::__construct($fieldName, $fieldValue);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->fieldSize = null;\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$tabletDesktopLabelColumns = $this->shortLabel ? 4 : 6;\n\t\t$row->add($labelGroup, 12, $tabletDesktopLabelColumns, $tabletDesktopLabelColumns, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$tabletDesktopFieldColumns = $this->shortLabel ? 8 : 6;\n\t\t$row->add($fieldGroup, 12, $tabletDesktopFieldColumns, $tabletDesktopFieldColumns, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * File upload with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputFileUpload extends htmlInputFileUpload {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** required */\n\tprivate $required = false;\n\t\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID\n\t * @param string $required required field\n\t */\n\tfunction __construct($name, $label, $helpID = null, $required = false) {\n\t\tparent::__construct($name);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->required = $required;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkField = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkField->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLinkField);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Sets the field required.\n\t *\n\t * @param bool $required field is required (default: true)\n\t */\n\tpublic function setRequired($required = true) {\n\t\t$this->required = $required;\n\t}\n\n}\n\n/**\n * Responsive text area with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputTextarea extends htmlInputTextarea {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param String $value value\n\t * @param int $colCount number of characters per line\n\t * @param int $rowCount number of rows\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID\n\t */\n\tfunction __construct($name, $value, $colCount, $rowCount, $label, $helpID = null) {\n\t\tparent::__construct($name, $value, $colCount, $rowCount);\n\t\t$this->label = htmlspecialchars($label);\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->alignment = htmlElement::ALIGN_TOP;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif ($this->required) {\n\t\t\t$labelGroup->addElement(htmlGetRequiredMarkerElement());\n\t\t}\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpCssClasses = array('margin-left5');\n\t\t\tif (!$this->richEdit) {\n\t\t\t\t$helpCssClasses[] = 'hide-on-tablet';\n\t\t\t}\n\t\t\t$helpLinkLabel->setCSSClasses($helpCssClasses);\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID) && !$this->richEdit) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('align-top', 'hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n}\n\n/**\n * Responsive select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveSelect extends htmlSelect {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($name, $elements, $selectedElements, $label, $helpID = null, $size = 1) {\n\t\tparent::__construct($name, $elements, $selectedElements, $size);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$tabletDesktopLabelColumns = $this->shortLabel ? 4 : 6;\n\t\t$row->add($labelGroup, 12, $tabletDesktopLabelColumns, $tabletDesktopLabelColumns, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\t$tabletDesktopFieldColumns = $this->shortLabel ? 8 : 6;\n\t\t$row->add($fieldGroup, 12, $tabletDesktopFieldColumns, $tabletDesktopFieldColumns, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlSelect::getShowHideSelector()\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * Responsive select with label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveRadio extends htmlRadio {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name element name\n\t * @param array $elements list of elememts\n\t * @param array $selectedElements list of selected elements\n\t * @param String $label descriptive label\n\t * @param String $helpID help ID (optional, default none)\n\t * @param int $size size (optional, default = 1)\n\t */\n\tfunction __construct($label, $name, $elements, $selectedElement = null, $helpID = null) {\n\t\tparent::__construct($name, $elements, $selectedElement);\n\t\t$this->label = htmlspecialchars($label);\n\t\t$this->helpID = $helpID;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t// label text\n\t\t$labelGroup = new htmlGroup();\n\t\t$labelGroup->addElement(new htmlOutputText($this->label));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLinkLabel = new htmlHelpLink($this->helpID);\n\t\t\t$helpLinkLabel->setCSSClasses(array('hide-on-tablet', 'margin-left5'));\n\t\t\t$labelGroup->addElement($helpLinkLabel);\n\t\t}\n\t\t$row->add($labelGroup, 12, 6, 6, 'responsiveLabel');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement(new htmlDiv(null, $this, array('float-left')));\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID);\n\t\t\t$helpLink->setCSSClasses(array('hide-on-mobile'));\n\t\t\t$fieldGroup->addElement(new htmlDiv(null, $helpLink));\n\t\t}\n\t\t$row->add($fieldGroup, 12, 6, 6, 'responsiveField nowrap');\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * Returns the selector to use to find the show/hide elements.\n\t *\n\t * @return string selector\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n}\n\n/**\n * Responsive checkbox with descriptive label and help link.\n *\n * @package metaHTML\n */\nclass htmlResponsiveInputCheckbox extends htmlInputCheckbox {\n\n\t/** descriptive label */\n\tprivate $label;\n\t/** help ID */\n\tprivate $helpID;\n\t/** help module name */\n\tprivate $helpModule = null;\n\t/** render HTML of parent class */\n\tprivate $renderParentHtml = false;\n\t/** long label */\n\tprivate $longLabel = false;\n\t/** label after checkbox */\n\tprivate $labelAfterCheckbox = false;\n\t/** short label */\n\tprivate $shortLabel = false;\n\t\n\t/**\n\t * Constructor.\n\t *\n\t * @param String $name unique name\n\t * @param boolean $checked checked\n\t * @param String $label descriptive label\n\t * @param String|array $helpID help ID or array of help ID + module name (optional)\n\t * @param bool $longLabel more space for label (default: false)\n\t */\n\tfunction __construct($name, $checked, $label, $helpID = null, $longLabel = false) {\n\t\tparent::__construct($name, $checked);\n\t\t$this->label = $label;\n\t\tif (is_string($helpID)) {\n\t\t\t$this->helpID = $helpID;\n\t\t}\n\t\telseif (is_array($helpID)) {\n\t\t\t$this->helpID = $helpID[0];\n\t\t\t$this->helpModule = $helpID[1];\n\t\t}\n\t\t$this->longLabel = $longLabel;\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputField::generateHTML()\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\tif ($this->renderParentHtml) {\n\t\t\treturn parent::generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\t// HTML of parent class is rendered on second call (done by htmlResponsiveRow)\n\t\t$this->renderParentHtml = true;\n\t\t$row = new htmlResponsiveRow();\n\t\t$tabletColumnsLabel = 6;\n\t\t$tabletColumnsBox = 6;\n\t\t$mobileColumnsLabel = 10;\n\t\t$mobileColumnsBox = 2;\n\t\tif ($this->longLabel) {\n\t\t\t$tabletColumnsLabel = 10;\n\t\t\t$tabletColumnsBox = 2;\n\t\t}\n\t\tif ($this->shortLabel) {\n\t\t\t$tabletColumnsLabel = 4;\n\t\t\t$tabletColumnsBox = 8;\n\t\t}\n\t\t// label text\n\t\t$text = new htmlSpan(new htmlOutputText($this->label));\n\t\t$text->setCSSClasses($this->cssClasses);\n\t\t$text->setOnclick('jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\',!jQuery(\\'#' . $this->name . '\\').prop(\\'checked\\')); jQuery(\\'#' . $this->name . '\\').change();');\n\t\t// input field\n\t\t$fieldGroup = new htmlGroup();\n\t\t$fieldGroup->addElement($this);\n\t\tif (!empty($this->helpID)) {\n\t\t\t$helpLink = new htmlHelpLink($this->helpID, $this->helpModule);\n\t\t\t$helpLink->setCSSClasses(array('margin-left5 align-unset-img'));\n\t\t\t$fieldGroup->addElement($helpLink);\n\t\t}\n\t\tif ($this->labelAfterCheckbox) {\n\t\t\t$row->add($fieldGroup, $mobileColumnsBox, $tabletColumnsBox, $tabletColumnsBox, 'responsiveLabel nowrap');\n\t\t\t$row->add($text, $mobileColumnsLabel, $tabletColumnsLabel, $tabletColumnsLabel, 'responsiveField');\n\t\t}\n\t\telse {\n\t\t\t$row->add($text, $mobileColumnsLabel, $tabletColumnsLabel, $tabletColumnsLabel, 'responsiveLabel');\n\t\t\t$row->add($fieldGroup, $mobileColumnsBox, $tabletColumnsBox, $tabletColumnsBox, 'responsiveField nowrap');\n\t\t}\n\t\treturn $row->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlInputCheckbox::getShowHideSelector()\n\t */\n\tprotected function getShowHideSelector() {\n\t\treturn '.row';\n\t}\n\n\t/**\n\t * Sets if the label should be shown after the checkbox instead before it.\n\t *\n\t * @param bool $labelAfterCheckbox show label after box\n\t */\n\tpublic function setLabelAfterCheckbox($labelAfterCheckbox = true) {\n\t\t$this->labelAfterCheckbox = $labelAfterCheckbox;\n\t}\n\n\t/**\n\t * Use a short label (4 columns instead of 6) for tablet/desktop.\n\t */\n\tpublic function setShortLabel() {\n\t\t$this->shortLabel = true;\n\t}\n\n}\n\n/**\n * Responsive table.\n *\n * @author roland Gruber\n */\nclass htmlResponsiveTable extends htmlElement {\n\n\t/** @var string[] row titles */\n\tprivate $titles;\n\n\t/** htmlElement[][] data rows */\n\tprivate $data;\n\n\t/** widthes of the columns */\n\tprivate $widths = array();\n\n\t/** highlighted rows */\n\tprivate $highlighted = array();\n\t/** CSS class for odd row numbers */\n\tprivate $cssOddRow;\n\t/** CSS class for even row numbers */\n\tprivate $cssEvenRow;\n\t/** onclick code (row number => code) */\n\tprivate $onClick = array();\n\t/** ondoubleclick code (row number => code) */\n\tprivate $onDoubleClick = array();\n\n\t/**\n\t * Creates the table.\n\t *\n\t * @param string[] $titles row titles\n\t * @param htmlElement[][] $data data rows\n\t * @param int[] $highlighted list of row numbers that should be highlighted (starting at 0)\n\t */\n\tpublic function __construct($titles, $data, $highlighted = null) {\n\t\t$this->titles = $titles;\n\t\t$this->data = $data;\n\t\tif (!empty($highlighted) && is_array($highlighted)) {\n\t\t\t$this->highlighted = $highlighted;\n\t\t}\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t * @see htmlElement::generateHTML()\n\t */\n\tpublic function generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\t$classes = $this->cssClasses;\n\t\t$classes[] = 'responsive-table';\n\t\techo '<table class=\"' . implode(' ', $classes) . '\">';\n\t\techo '<thead>';\n\t\t$headClass = empty($this->cssOddRow) ? '' : ' class=\"' . $this->cssOddRow . '\"';\n\t\techo '<tr ' . $headClass . '>';\n\t\t$counter = 0;\n\t\tforeach ($this->titles as $title) {\n\t\t\t$width = '';\n\t\t\tif (isset($this->widths[$counter])) {\n\t\t\t\t$width = 'width=\"' . $this->widths[$counter] . '\"';\n\t\t\t}\n\t\t\techo '<th ' . $width . '>' . htmlspecialchars($title) . '</th>';\n\t\t\t$counter++;\n\t\t}\n\t\techo '</tr>';\n\t\techo '</thead>';\n\t\techo '<tbody>';\n\t\t$titleCount = sizeof($this->titles);\n\t\t$counter = 0;\n\t\tforeach ($this->data as $row) {\n\t\t\t$cssClass = '';\n\t\t\t$cssClasses = array();\n\t\t\tif (in_array($counter, $this->highlighted)) {\n\t\t\t\t$cssClasses[] = 'highlighted';\n\t\t\t}\n\t\t\tif (!empty($this->cssEvenRow) && ($counter % 2 === 0)) {\n\t\t\t\t$cssClasses[] = $this->cssEvenRow;\n\t\t\t}\n\t\t\tif (!empty($this->cssOddRow) && ($counter % 2 === 1)) {\n\t\t\t\t$cssClasses[] = $this->cssOddRow;\n\t\t\t}\n\t\t\tif (!empty($cssClasses)) {\n\t\t\t\t$cssClass = ' class=\"' . implode(' ', $cssClasses) . '\"';\n\t\t\t}\n\t\t\t$onClick = '';\n\t\t\tif (!empty($this->onClick[$counter])) {\n\t\t\t\t$onClick = ' onclick=\"' . $this->onClick[$counter] . '\"';\n\t\t\t}\n\t\t\t$onDoubleClick = '';\n\t\t\tif (!empty($this->onDoubleClick[$counter])) {\n\t\t\t\t$onDoubleClick = ' ondblclick=\"' . $this->onDoubleClick[$counter] . '\"';\n\t\t\t}\n\t\t\techo '<tr ' . $cssClass . $onClick . $onDoubleClick . '>';\n\t\t\tfor ($i = 0; $i < $titleCount; $i++) {\n\t\t\t\techo '<td data-label=\"' . $this->titles[$i] . '\">';\n\t\t\t\t$ids = parseHtml($module, $row[$i], $values, $restricted, $tabindex, $scope);\n\t\t\t\t$return = array_merge($return, $ids);\n\t\t\t\techo '</td>';\n\t\t\t}\n\t\t\techo '</tr>';\n\t\t\t$counter++;\n\t\t}\n\t\techo '</tbody>';\n\t\techo '</table>';\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Sets the width of each column.\n\t *\n\t * @param string[] $widths widths\n\t */\n\tpublic function setWidths($widths) {\n\t\t$this->widths = $widths;\n\t}\n\n\t/**\n\t * Sets the CSS classes for odd and even rows.\n\t * The title row counts as row number -1.\n\t *\n\t * @param string $oddClass class for odd rows\n\t * @param string $evenClass class for even rows\n\t */\n\tpublic function setRowClasses($oddClass, $evenClass) {\n\t\t$this->cssOddRow = $oddClass;\n\t\t$this->cssEvenRow = $evenClass;\n\t}\n\n\t/**\n\t * Sets the onclick code for the rows.\n\t *\n\t * @param array $calls row number => code\n\t */\n\tpublic function setOnClickEvents($calls) {\n\t\t$this->onClick = $calls;\n\t}\n\n\t/**\n\t * Sets the ondoubleclick code for the rows.\n\t *\n\t * @param array $calls row number => code\n\t */\n\tpublic function setOnDoubleClickEvents($calls) {\n\t\t$this->onDoubleClick = $calls;\n\t}\n\n}\n\n/**\n * Renders a canvas.\n *\n * @author Roland Gruber\n */\nclass htmlCanvas extends htmlElement {\n\n\tprivate $id;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $id html id\n\t */\n\tpublic function __construct($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$classesValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<canvas id=\"' . $this->id . '\" ' . $classesValue . '>';\n\t\techo '</canvas>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Renders a video.\n *\n * @author Roland Gruber\n */\nclass htmlVideo extends htmlElement {\n\n\tprivate $id;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param string $id html id\n\t */\n\tpublic function __construct($id) {\n\t\t$this->id = $id;\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$classesValue = '';\n\t\tif (!empty($this->cssClasses)) {\n\t\t\t$classesValue = ' class=\"' . implode(' ', $this->cssClasses) . '\"';\n\t\t}\n\t\techo '<video id=\"' . $this->id . '\" ' . $classesValue . '>';\n\t\techo '</video>';\n\t\treturn array();\n\t}\n}\n\n/**\n * Creates a form element for POST.\n *\n * @package metaHTML\n */\nclass htmlForm extends htmlElement {\n\n\t/** form name */\n\tprivate $name = null;\n\t/** submit target */\n\tprivate $action = null;\n\t/** inner content */\n\tprivate $content = null;\n\n\t/**\n\t * Constructor.\n\t *\n\t * @param string $name name\n\t * @param string $action target URL\n\t */\n\tfunction __construct(string $name, string $action, htmlElement $content) {\n\t\t$this->name = $name;\n\t\t$this->action = $action;\n\t\t$this->content = $content;\n\t}\n\n\t/**\n\t * Prints the HTML code for this element.\n\t *\n\t * @param string $module Name of account module\n\t * @param array $input List of meta-HTML elements\n\t * @param array $values List of values which override the defaults in $input (name => value)\n\t * @param boolean $restricted If true then no buttons will be displayed\n\t * @param integer $tabindex Start value of tabulator index for input fields\n\t * @param string $scope Account type\n\t * @return array List of input field names and their type (name => type)\n\t */\n\tfunction generateHTML($module, $input, $values, $restricted, &$tabindex, $scope) {\n\t\t$return = array();\n\t\techo '<form name=\"' . $this->name . '\" action=\"' . $this->action . '\" method=\"post\" enctype=\"multipart/form-data\">';\n\t\tif ($this->content != null) {\n\t\t\t$return = $this->content->generateHTML($module, $input, $values, $restricted, $tabindex, $scope);\n\t\t}\n\t\techo '</form>';\n\t\treturn $return;\n\t}\n\n}\n\n", "<?php\nnamespace LAM\\TOOLS\\PDF_EDITOR;\nuse \\htmlResponsiveRow;\nuse \\htmlResponsiveSelect;\nuse \\htmlResponsiveInputField;\nuse \\htmlTitle;\nuse \\htmlButton;\nuse \\htmlOutputText;\nuse \\htmlGroup;\nuse \\htmlSelect;\nuse \\htmlInputField;\nuse \\htmlSubTitle;\nuse \\htmlResponsiveInputTextarea;\nuse \\htmlHiddenInput;\nuse \\htmlSpacer;\nuse LAM\\PDF\\PdfLogo;\nuse LAM\\PDF\\PdfStructurePersistenceManager;\nuse LAM\\PDF\\PDFTextSection;\nuse LAM\\PDF\\PDFEntrySection;\nuse LAM\\PDF\\PDFStructure;\nuse LAM\\PDF\\PDFSectionEntry;\nuse LAMException;\n\n/*\n  This code is part of LDAP Account Manager (http://www.ldap-account-manager.org/)\n  Copyright (C) 2003 - 2006  Michael Duergner\n                2007 - 2022  Roland Gruber\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n  Manages creating/changing of pdf structures.\n*/\n\n/**\n* Displays the main page of the PDF editor where the user can select the displayed entries.\n*\n* @author Michael Duergner\n* @author Roland Gruber\n* @package PDF\n*/\n\n/** security functions */\ninclude_once(__DIR__ . \"/../../lib/security.inc\");\n/** access to PDF configuration files */\ninclude_once(__DIR__ . '/../../lib/pdfstruct.inc');\n/** LDAP object */\ninclude_once(__DIR__ . '/../../lib/ldap.inc');\n/** LAM configuration */\ninclude_once(__DIR__ . '/../../lib/config.inc');\n/** module functions */\ninclude_once(__DIR__ . '/../../lib/modules.inc');\n\n// start session\nstartSecureSession();\nenforceUserIsLoggedIn();\n\n// die if no write access\nif (!checkIfWriteAccessIsAllowed()) {\n\tdie();\n}\n\ncheckIfToolIsActive('toolPDFEditor');\n\nsetlanguage();\n\nif (!empty($_POST)) {\n\tvalidateSecurityToken();\n}\n\n// check if user is logged in, if not go to login\nif (!$_SESSION['ldap'] || !$_SESSION['ldap']->server()) {\n\tmetaRefresh(\"../login.php\");\n\texit;\n}\n\n// Write $_POST variables to $_GET when form was submitted via post\nif (isset($_POST['type'])) {\n\t$_GET = $_POST;\n}\n\n$typeManager = new \\LAM\\TYPES\\TypeManager();\n$type = $typeManager->getConfiguredType($_GET['type']);\nif ($type->isHidden() || !checkIfWriteAccessIsAllowed($type->getId())) {\n\tlogNewMessage(LOG_ERR, 'User tried to access hidden PDF structure: ' . $type->getId());\n\tdie();\n}\n\n\n// Abort and go back to main pdf structure page\nif(isset($_GET['abort'])) {\n\tmetarefresh('pdfmain.php');\n\texit;\n}\n\n$pdfStructurePersistenceManager = new PdfStructurePersistenceManager();\n\n// Load PDF structure from file if it is not defined in session\nif (!isset($_SESSION['currentPDFStructure'])) {\n\t// Load structure file to be edit\n\ttry {\n\t\tif (isset($_GET['edit'])) {\n\t\t\t$_SESSION['currentPDFStructure'] = $pdfStructurePersistenceManager->readPdfStructure($_SESSION['config']->getName(),\n                $type->getId(), $_GET['edit']);\n\t\t}\n\t\t// Load default structure file when creating a new one\n\t\telse {\n\t\t    $structureNames = $pdfStructurePersistenceManager->getPDFStructures($_SESSION['config']->getName(),\n\t\t\t    $type->getId());\n\t\t    if (in_array('default', $structureNames)) {\n\t\t\t    $_SESSION['currentPDFStructure'] = $pdfStructurePersistenceManager->readPdfStructure($_SESSION['config']->getName(),\n\t\t\t\t    $type->getId(), 'default');\n            }\n\t\t    else {\n\t\t\t    $_SESSION['currentPDFStructure'] = new PDFStructure();\n            }\n\t\t}\n\t}\n\tcatch (LAMException $e) {\n\t\tmetaRefresh('pdfmain.php?loadFailed=1&name=' . $_GET['edit']);\n\t\texit;\n\t}\n}\n\n$logoFiles = $pdfStructurePersistenceManager->getPdfLogos($_SESSION['config']->getName(), true);\nif (!empty($_POST['form_submit'])) {\n\tupdateBasicSettings($_SESSION['currentPDFStructure'], $logoFiles);\n\tupdateSectionTitles($_SESSION['currentPDFStructure']);\n\taddSection($_SESSION['currentPDFStructure']);\n\taddSectionEntry($_SESSION['currentPDFStructure']);\n\tremoveItem($_SESSION['currentPDFStructure']);\n\tmoveUp($_SESSION['currentPDFStructure']);\n\tmoveDown($_SESSION['currentPDFStructure']);\n}\n\n// Check if pdfname is valid, then save current structure to file and go to\n// main pdf structure page\n$saveErrors = array();\nif(isset($_GET['submit'])) {\n\ttry {\n\t    $pdfStructurePersistenceManager->savePdfStructure($_SESSION['config']->getName(), $type->getId(), $_POST['pdfname'], $_SESSION['currentPDFStructure']);\n\t\tunset($_SESSION['currentPDFStructure']);\n\t\tmetaRefresh('pdfmain.php?savedSuccessfully=' . $_POST['pdfname']);\n\t\texit;\n\t}\n\tcatch (LAMException $e) {\n\t\t$saveErrors[] = array('ERROR', $e->getTitle(), $e->getMessage());\n\t}\n}\n\n$availablePDFFields = getAvailablePDFFields($type->getId());\n\n// Create the values for the dropdown boxes for section headline defined by\n// value entries and fetch all available modules\n$modules = array();\n$section_items_array = array();\n$section_items = '';\n$sortedModules = array();\nforeach($availablePDFFields as $module => $fields) {\n\tif ($module != 'main') {\n\t\t$title = getModuleAlias($module, $type->getScope());\n\t}\n\telse {\n\t\t$title = _('Main');\n\t}\n\t$sortedModules[$module] = $title;\n}\nnatcasesort($sortedModules);\nforeach($sortedModules as $module => $title) {\n\t$values = $availablePDFFields[$module];\n\tif (!is_array($values) || (sizeof($values) < 1)) {\n\t\tcontinue;\n\t}\n\t$modules[] = $module;\n\t$section_items .= \"<optgroup label=\\\"\" . $title . \"\\\"\\n>\";\n\tnatcasesort($values);\n\tforeach($values as $attribute => $attributeLabel) {\n\t\t$section_items_array[] = $module . '_' . $attribute;\n\t\t$section_items .= \"<option value=\\\"\" . $module . '_' . $attribute . \"\\\">\" . $attributeLabel . \"</option>\\n\";\n\t}\n\t$section_items .= \"</optgroup>\\n\";\n}\n$modules = join(',',$modules);\n\n// print header\ninclude __DIR__ . '/../../lib/adminHeader.inc';\n?>\n\t<div class=\"smallPaddingContent\">\n<?php\n\n// print error messages if any\nif (sizeof($saveErrors) > 0) {\n\tforeach ($saveErrors as $saveError) {\n\t\tcall_user_func_array('StatusMessage', $saveError);\n\t}\n\techo \"<br>\\n\";\n}\n\n$newFieldFieldElements = array();\nforeach($sortedModules as $module => $title) {\n\t$fields = $availablePDFFields[$module];\n\tif (isset($fields) && is_array($fields) && (sizeof($fields) > 0)) {\n\t\t$moduleFields = array();\n\t\tforeach ($fields as $field => $fieldLabel) {\n\t\t\t$moduleFields[$fieldLabel] = $module . \"_\" . $field;\n\t\t}\n\t\t$newFieldFieldElements[$title] = $moduleFields;\n\t}\n}\n\n// structure name\n$structureName = '';\nif (isset($_GET['edit'])) {\n\t$structureName = $_GET['edit'];\n}\nelse if (isset($_POST['pdfname'])) {\n\t$structureName = $_POST['pdfname'];\n}\n// headline\n$headline = $_SESSION['currentPDFStructure']->getTitle();\n// logo\n$logos = array(_('No logo') => 'none');\nforeach($logoFiles as $logoFile) {\n\t$logos[$logoFile->getName() . ' (' . $logoFile->getWidth() . ' x ' . $logoFile->getHeight() . \")\"] = $logoFile->getName();\n}\n$selectedLogo = array('printLogo.jpg');\nif (isset($_SESSION['currentPDFStructure'])) {\n\t$selectedLogo = array($_SESSION['currentPDFStructure']->getLogo());\n}\n\n?>\n\t<form id=\"inputForm\" action=\"pdfpage.php\" method=\"post\" onSubmit=\"saveScrollPosition('inputForm')\">\n<?php\n$sectionElements = array();\n$nonTextSectionElements = array();\n\n$container = new htmlResponsiveRow();\n$container->add(new htmlTitle(_('PDF editor')), 12);\n\n// main content\n$mainContent = new htmlResponsiveRow();\n$structureNameInput = new htmlResponsiveInputField(_(\"Structure name\"), 'pdfname', $structureName, '360');\n$structureNameInput->setRequired(true);\n$mainContent->add($structureNameInput, 12);\n$mainContent->add(new htmlResponsiveInputField(_('Headline'), 'headline', $headline), 12);\n$logoSelect = new htmlResponsiveSelect('logoFile', $logos, $selectedLogo, _('Logo'));\n$logoSelect->setHasDescriptiveElements(true);\n$mainContent->add($logoSelect, 12);\n$foldingMarks = 'no';\nif (isset($_SESSION['currentPDFStructure'])) {\n\t$foldingMarks = $_SESSION['currentPDFStructure']->getFoldingMarks();\n}\n$possibleFoldingMarks = array(_('No') => 'no', _('Yes') => 'standard');\n$foldingMarksSelect = new htmlResponsiveSelect('foldingmarks', $possibleFoldingMarks, array($foldingMarks), _('Folding marks'));\n$foldingMarksSelect->setHasDescriptiveElements(true);\n$mainContent->add($foldingMarksSelect, 12);\n$mainContent->addVerticalSpacer('3rem');\n// PDF structure\n$structure = $_SESSION['currentPDFStructure'];\n// print every entry in the current structure\n$structureContent = new htmlResponsiveRow();\n$sections = $structure->getSections();\nforeach ($sections as $key => $section) {\n\t// create the up/down/remove links\n\t$linkUp = new htmlButton('up_section_' . $key, 'up.svg', true);\n\t$linkUp->setTitle(_(\"Up\"));\n\t$linkDown = new htmlButton('down_section_' . $key, 'down.svg', true);\n\t$linkDown->setTitle(_(\"Down\"));\n\t$linkRemove = new htmlButton('remove_section_' . $key, 'del.svg', true);\n\t$linkRemove->setTitle(_(\"Remove\"));\n\t$emptyBox = new htmlSpacer('19px', null);\n\t// We have a new section to start\n\tif($section instanceof PDFEntrySection) {\n\t\tif($section->isAttributeTitle()) {\n\t\t\t$section_headline = translateFieldIDToName($section->getPdfKey(), $type->getScope(), $availablePDFFields);\n\t\t\tif ($section_headline === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$section_headline = $section->getTitle();\n\t\t}\n\t\t$nonTextSectionElements[$section_headline] = $key;\n\t\t$sectionElements[$section_headline] = $key;\n\t\t$structureContent->addVerticalSpacer('2rem');\n\t\t// Section headline is a value entry\n\t\tif($section->isAttributeTitle()) {\n\t\t\t$headlineElements = array();\n\t\t\tforeach($section_items_array as $item) {\n\t\t\t\t$headlineElements[translateFieldIDToName($item, $type->getScope(), $availablePDFFields)] = '_' . $item;\n\t\t\t}\n\t\t\t$sectionHeadlineSelect = new htmlSelect('section_' . $key, $headlineElements, array('_' . $section->getPdfKey()));\n\t\t\t$sectionHeadlineSelect->setHasDescriptiveElements(true);\n\t\t\t$structureContent->addLabel($sectionHeadlineSelect);\n\t\t}\n\t\t// Section headline is a user text\n\t\telse {\n\t\t\t$sectionHeadlineInput = new htmlInputField('section_' . $key, $section_headline);\n\t\t\t$structureContent->addLabel($sectionHeadlineInput);\n\t\t}\n\t\t$actionGroup = new htmlGroup();\n\t\tif ($key != 0) {\n\t\t\t$actionGroup->addElement($linkUp);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$hasAdditionalSections = $key < (sizeof($sections) - 1);\n\t\tif ($hasAdditionalSections) {\n\t\t\t$actionGroup->addElement($linkDown);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$actionGroup->addElement($linkRemove);\n\t\t$structureContent->addField($actionGroup);\n\t\t// add section entries\n\t\t$sectionEntries = $section->getEntries();\n\t\tforeach ($sectionEntries as $e => $sectionEntry) {\n\t\t\t$fieldLabel = translateFieldIDToName($sectionEntry->getKey(), $type->getScope(), $availablePDFFields);\n\t\t\tif ($fieldLabel === null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t$structureContent->addVerticalSpacer('1rem');\n\t\t\t$fieldOutput = new htmlOutputText($fieldLabel);\n\t\t\t$structureContent->addLabel($fieldOutput);\n\t\t\t$actionGroup = new htmlGroup();\n\t\t\tif ($e != 0) {\n\t\t\t\t$entryLinkUp = new htmlButton('up_entry_' . $key . '_' . $e, 'up.svg', true);\n\t\t\t\t$entryLinkUp->setTitle(_(\"Up\"));\n\t\t\t\t$actionGroup->addElement($entryLinkUp);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$actionGroup->addElement($emptyBox);\n\t\t\t}\n\t\t\tif ($e < (sizeof($sectionEntries) - 1)) {\n\t\t\t\t$linkDown = new htmlButton('down_entry_' . $key . '_' . $e, 'down.svg', true);\n\t\t\t\t$linkDown->setTitle(_(\"Down\"));\n\t\t\t\t$actionGroup->addElement($linkDown);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$actionGroup->addElement($emptyBox);\n\t\t\t}\n\t\t\t$entryLinkRemove = new htmlButton('remove_entry_' . $key . '_' . $e, 'del.svg', true);\n\t\t\t$entryLinkRemove->setTitle(_(\"Remove\"));\n\t\t\t$actionGroup->addElement($entryLinkRemove, true);\n\t\t\t$structureContent->addField($actionGroup);\n\t\t}\n\t}\n\t// We have to include a static text.\n\telseif($section instanceof PDFTextSection) {\n\t\t// Add current satic text for dropdown box needed for the position when inserting a new\n\t\t// section or static text entry\n\t\t$textSnippet = $section->getText();\n\t\t$textSnippet = str_replace(array(\"\\n\", \"\\r\"), array(\" \", \" \"), $textSnippet);\n\t\t$textSnippet = trim($textSnippet);\n\t\tif (strlen($textSnippet) > 15) {\n\t\t\t$textSnippet = substr($textSnippet, 0, 15) . '...';\n\t\t}\n\t\t$textSnippet = htmlspecialchars($textSnippet);\n\t\t$sectionElements[_('Static text') . ': ' . $textSnippet] = $key;\n\t\t$sectionHeadlineOutput = new htmlOutputText(_('Static text'));\n\t\t$structureContent->addLabel($sectionHeadlineOutput);\n\t\t$actionGroup = new htmlGroup();\n\t\tif ($key != 0) {\n\t\t\t$actionGroup->addElement($linkUp);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\tif ($key != sizeof($sections) - 1) {\n\t\t\t$actionGroup->addElement($linkDown);\n\t\t}\n\t\telse {\n\t\t\t$actionGroup->addElement($emptyBox);\n\t\t}\n\t\t$actionGroup->addElement($linkRemove, true);\n\t\t$structureContent->addField($actionGroup);\n\t\t$structureContent->addVerticalSpacer('1rem');\n\t\t$staticTextOutput = new htmlOutputText($section->getText());\n\t\t$staticTextOutput->setPreformatted();\n\t\t$structureContent->add($staticTextOutput, 12);\n\t}\n}\n$sectionElements[_('End')] = sizeof($structure->getSections());\n$mainContent->add($structureContent, 12);\n$container->add($mainContent, 12);\n$container->addVerticalSpacer('2rem');\n\n// new field\nif (!empty($nonTextSectionElements)) {\n\t$newFieldContainer = new htmlResponsiveRow();\n\t$newFieldContainer->add(new htmlSubTitle(_('New field')), 12);\n\t$newFieldFieldSelect = new htmlResponsiveSelect('new_field', $newFieldFieldElements, array(), _('Field'));\n\t$newFieldFieldSelect->setHasDescriptiveElements(true);\n\t$newFieldFieldSelect->setContainsOptgroups(true);\n\t$newFieldContainer->add($newFieldFieldSelect, 12);\n\t$newFieldSectionSelect = new htmlResponsiveSelect('add_field_position', $nonTextSectionElements, array(), _('Position'));\n\t$newFieldSectionSelect->setHasDescriptiveElements(true);\n\t$newFieldContainer->add($newFieldSectionSelect, 12);\n\t$newFieldContainer->addLabel(new htmlOutputText('&nbsp;', false));\n\t$newFieldContainer->addField(new htmlButton('add_new_field', _('Add')));\n\t$container->add($newFieldContainer, 12);\n}\n\n// new section\n$container->addVerticalSpacer('1rem');\n$newSectionContent = new htmlResponsiveRow();\n$newSectionContent->add(new htmlSubTitle(_('New section')), 12);\n// add new section with text title\n$newSectionContent->add(new htmlResponsiveInputField(_(\"Headline\"), 'new_section_text'), 12);\n$newSectionPositionSelect1 = new htmlResponsiveSelect('add_sectionText_position', $sectionElements, array(), _('Position'));\n$newSectionPositionSelect1->setHasDescriptiveElements(true);\n$newSectionPositionSelect1->setSortElements(false);\n$newSectionContent->add($newSectionPositionSelect1, 12);\n$newSectionContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newSectionContent->addField(new htmlButton('add_sectionText', _('Add')));\n$newSectionContent->addVerticalSpacer('2rem');\n// add new section with field title\n$newSectionFieldSelect = new htmlResponsiveSelect('new_section_item', $newFieldFieldElements, array(), _(\"Headline\"));\n$newSectionFieldSelect->setHasDescriptiveElements(true);\n$newSectionFieldSelect->setContainsOptgroups(true);\n$newSectionContent->add($newSectionFieldSelect, 12);\n$newSectionPositionSelect2 = new htmlResponsiveSelect('add_section_position', $sectionElements, array(), _('Position'));\n$newSectionPositionSelect2->setHasDescriptiveElements(true);\n$newSectionPositionSelect2->setSortElements(false);\n$newSectionContent->add($newSectionPositionSelect2, 12);\n$newSectionContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newSectionContent->addField(new htmlButton('add_section', _('Add')));\n\n// new text area\n$container->add($newSectionContent, 12);\n$container->addVerticalSpacer('1rem');\n$newTextFieldContent = new htmlResponsiveRow();\n$newTextFieldContent->add(new htmlSubTitle(_('New text area')), 12);\n$newTextFieldContent->add(new htmlResponsiveInputTextarea('text_text', '', 40, 3, _('Static text')), 12);\n$newTextFieldPositionSelect = new htmlResponsiveSelect('add_text_position', $sectionElements, array(), _('Position'));\n$newTextFieldPositionSelect->setHasDescriptiveElements(true);\n$newTextFieldPositionSelect->setSortElements(false);\n$newTextFieldContent->add($newTextFieldPositionSelect, 12);\n$newTextFieldContent->addLabel(new htmlOutputText('&nbsp;', false));\n$newTextFieldContent->addField(new htmlButton('add_text', _('Add')));\n$newTextFieldContent->addVerticalSpacer('2rem');\n$container->add($newTextFieldContent, 12);\n\n// buttons\n$buttonContainer = new htmlResponsiveRow();\n$saveButton = new htmlButton('submit', _(\"Save\"));\n$saveButton->setCSSClasses(array('lam-primary'));\n$cancelButton = new htmlButton('abort', _(\"Cancel\"));\n$buttonGroup = new htmlGroup();\n$buttonGroup->addElement($saveButton);\n$buttonGroup->addElement($cancelButton);\n$buttonContainer->add($buttonGroup, 12);\n$buttonContainer->add(new htmlHiddenInput('modules', $modules), 4);\n$buttonContainer->add(new htmlHiddenInput('type', $type->getId()), 4);\n$buttonContainer->add(new htmlHiddenInput('form_submit', 'true'), 4);\n\n$container->add($buttonContainer, 12);\naddSecurityTokenToMetaHTML($container);\n\n$tabindex = 1;\nparseHtml(null, $container, array(), false, $tabindex, $type->getScope());\n\nif ((sizeof($saveErrors) == 0) && isset($_POST['scrollPositionTop']) && isset($_POST['scrollPositionLeft'])) {\n\t// scroll to last position\n\techo '<script type=\"text/javascript\">\n\t\tjQuery(document).ready(function() {\n\t\t\tjQuery(window).scrollTop(' . $_POST['scrollPositionTop'] . ');\n\t\t\tjQuery(window).scrollLeft('. $_POST['scrollPositionLeft'] . ');\n\t});\n\t</script>';\n}\n\necho '</form></div>';\ninclude __DIR__ . '/../../lib/adminFooter.inc';\n\n\n/**\n * Translates a given field ID (e.g. inetOrgPerson_givenName) to its descriptive name.\n *\n * @param String $id field ID\n * @param String $scope account type\n * @param array $availablePDFFields available PDF fields\n * @return string|null field label or null if no matching module found\n */\nfunction translateFieldIDToName($id, $scope, $availablePDFFields) {\n\tforeach ($availablePDFFields as $module => $fields) {\n\t\tif (!(strpos($id, $module . '_') === 0)) {\n\t\t\tcontinue;\n\t\t}\n\t\tforeach ($fields as $name => $label) {\n\t\t\tif ($id == $module . '_' . $name) {\n\t\t\t\tif ($module == 'main') {\n\t\t\t\t\treturn _('Main') . ': ' . $label;\n\t\t\t\t}\n\t\t\t\telse  {\n\t\t\t\t\treturn getModuleAlias($module, $scope) . ': ' . $label;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Updates basic settings such as logo and head line.\n *\n * @param PDFStructure $structure PDF structure\n * @param PdfLogo[] $logoFiles logos\n */\nfunction updateBasicSettings(PDFStructure &$structure, array $logoFiles) {\n\t// set headline\n\tif (isset($_POST['headline'])) {\n\t\t$structure->setTitle(str_replace('<', '', str_replace('>', '', $_POST['headline'])));\n\t}\n\t// set logo\n\tif (isset($_POST['logoFile'])) {\n\t    $fileName = $_POST['logoFile'];\n\t    $found = false;\n\t    foreach ($logoFiles as $logoFile) {\n\t        if ($logoFile->getName() === $fileName) {\n\t            $found = true;\n            }\n        }\n\t    if (!$found) {\n\t        logNewMessage(LOG_ERR, 'Invalid PDF logo file: ' . $fileName);\n\t        return;\n        }\n\t\t$structure->setLogo($fileName);\n\t}\n\t// set folding marks\n\tif (isset($_POST['foldingmarks'])) {\n\t\t$structure->setFoldingMarks($_POST['foldingmarks']);\n\t}\n}\n\n/**\n * Updates section titles.\n *\n * @param PDFStructure $structure\n */\nfunction updateSectionTitles(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\tif (strpos($key, 'section_') === 0) {\n\t\t\t$pos = substr($key, strlen('section_'));\n\t\t\t$sections[$pos]->setTitle($value);\n\t\t}\n\t}\n}\n\n/**\n * Adds a new section if requested.\n *\n * @param PDFStructure $structure\n */\nfunction addSection(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\t// add a new text field\n\tif(isset($_POST['add_text'])) {\n\t\t// Check if text for static text field is specified\n\t\tif(empty($_POST['text_text'])) {\n\t\t\tStatusMessage('ERROR',_('No static text specified'),_('The static text must contain at least one character.'));\n\t\t}\n\t\telse {\n\t\t\t$section = new PDFTextSection(str_replace(\"\\r\", \"\", $_POST['text_text']));\n\t\t\tarray_splice($sections, $_POST['add_text_position'], 0, array($section));\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n\t// add a new section with text headline\n\telseif(isset($_POST['add_sectionText'])) {\n\t\t// Check if name for new section is specified when needed\n\t\tif(empty($_POST['new_section_text'])) {\n\t\t\tStatusMessage('ERROR',_('No section text specified'),_('The headline for a new section must contain at least one character.'));\n\t\t}\n\t\telse {\n\t\t\t$section = new PDFEntrySection($_POST['new_section_text']);\n\t\t\tarray_splice($sections, $_POST['add_sectionText_position'], 0, array($section));\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n\t// Add a new section with item as headline\n\telseif(isset($_POST['add_section'])) {\n\t\t$section = new PDFEntrySection('_' . $_POST['new_section_item']);\n\t\tarray_splice($sections, $_POST['add_section_position'], 0, array($section));\n\t\t$structure->setSections($sections);\n\t}\n}\n\n/**\n * Adds a new entry to a section if requested.\n *\n * @param PDFStructure $structure\n */\nfunction addSectionEntry(PDFStructure &$structure) {\n\tif(isset($_POST['add_new_field'])) {\n\t\t$field = new PDFSectionEntry($_POST['new_field']);\n\t\t$sections = $structure->getSections();\n\t\t$pos = $_POST['add_field_position'];\n\t\t$entries = $sections[$pos]->getEntries();\n\t\t$entries[] = $field;\n\t\t$sections[$pos]->setEntries($entries);\n\t\t$structure->setSections($sections);\n\t}\n}\n\n/**\n * Removes a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction removeItem(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// remove section\n\t\tif (strpos($key, 'remove_section_') === 0) {\n\t\t\t$pos = substr($key, strlen('remove_section_'));\n\t\t\tunset($sections[$pos]);\n\t\t\t$sections = array_values($sections);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// remove section entry\n\t\tif (strpos($key, 'remove_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('remove_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = $parts[1];\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\tunset($entries[$entryPos]);\n\t\t\t$entries = array_values($entries);\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n\n/**\n * Moves up a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction moveUp(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// move section\n\t\tif (strpos($key, 'up_section_') === 0) {\n\t\t\t$pos = intval(substr($key, strlen('up_section_')));\n\t\t\t$sectionTmp = $sections[$pos - 1];\n\t\t\t$sections[$pos - 1] = $sections[$pos];\n\t\t\t$sections[$pos] = $sectionTmp;\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// move section entry\n\t\tif (strpos($key, 'up_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('up_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = intval($parts[1]);\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\t$entryTmp = $entries[$entryPos - 1];\n\t\t\t$entries[$entryPos - 1] = $entries[$entryPos];\n\t\t\t$entries[$entryPos] = $entryTmp;\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n\n/**\n * Moves down a section or entry if requested.\n *\n * @param PDFStructure $structure\n */\nfunction moveDown(PDFStructure &$structure) {\n\t$sections = $structure->getSections();\n\tforeach ($_POST as $key => $value) {\n\t\t// move section\n\t\tif (strpos($key, 'down_section_') === 0) {\n\t\t\t$pos = intval(substr($key, strlen('down_section_')));\n\t\t\t$sectionTmp = $sections[$pos + 1];\n\t\t\t$sections[$pos + 1] = $sections[$pos];\n\t\t\t$sections[$pos] = $sectionTmp;\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t\t// move section entry\n\t\tif (strpos($key, 'down_entry_') === 0) {\n\t\t\t$parts = substr($key, strlen('down_entry_'));\n\t\t\t$parts = explode('_', $parts);\n\t\t\t$sectionPos = $parts[0];\n\t\t\t$entryPos = intval($parts[1]);\n\t\t\t$entries = $sections[$sectionPos]->getEntries();\n\t\t\t$entryTmp = $entries[$entryPos + 1];\n\t\t\t$entries[$entryPos + 1] = $entries[$entryPos];\n\t\t\t$entries[$entryPos] = $entryTmp;\n\t\t\t$sections[$sectionPos]->setEntries($entries);\n\t\t\t$structure->setSections($sections);\n\t\t}\n\t}\n}\n"], "filenames": ["lam/HISTORY", "lam/lib/html.inc", "lam/templates/pdfedit/pdfpage.php"], "buggy_code_start_loc": [4, 561, 15], "buggy_code_end_loc": [4, 565, 529], "fixing_code_start_loc": [5, 561, 16], "fixing_code_end_loc": [6, 565, 542], "type": "CWE-79", "message": "LDAP Account Manager (LAM) is an open source web frontend for managing entries stored in an LDAP directory. The profile editor tool has an edit profile functionality, the parameters on this page are not properly sanitized and hence leads to stored XSS attacks. An authenticated user can store XSS payloads in the profiles, which gets triggered when any other user try to access the edit profile page. The pdf editor tool has an edit pdf profile functionality, the logoFile parameter in it is not properly sanitized and an user can enter relative paths like ../../../../../../../../../../../../../usr/share/icons/hicolor/48x48/apps/gvim.png via tools like burpsuite. Later when a pdf is exported using the edited profile the pdf icon has the image on that path(if image is present). Both issues require an attacker to be able to login to LAM admin interface. The issue is fixed in version 7.9.1.", "other": {"cve": {"id": "CVE-2022-24851", "sourceIdentifier": "security-advisories@github.com", "published": "2022-04-15T19:15:12.383", "lastModified": "2022-10-07T15:21:37.120", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LDAP Account Manager (LAM) is an open source web frontend for managing entries stored in an LDAP directory. The profile editor tool has an edit profile functionality, the parameters on this page are not properly sanitized and hence leads to stored XSS attacks. An authenticated user can store XSS payloads in the profiles, which gets triggered when any other user try to access the edit profile page. The pdf editor tool has an edit pdf profile functionality, the logoFile parameter in it is not properly sanitized and an user can enter relative paths like ../../../../../../../../../../../../../usr/share/icons/hicolor/48x48/apps/gvim.png via tools like burpsuite. Later when a pdf is exported using the edited profile the pdf icon has the image on that path(if image is present). Both issues require an attacker to be able to login to LAM admin interface. The issue is fixed in version 7.9.1."}, {"lang": "es", "value": "LDAP Account Manager (LAM) es un frontend web de c\u00f3digo abierto para administrar las entradas almacenadas en un directorio LDAP. La herramienta de edici\u00f3n de perfiles presenta una funcionalidad de edici\u00f3n de perfiles, los par\u00e1metros en esta p\u00e1gina no est\u00e1n saneados apropiadamente y por lo tanto conlleva a ataques de tipo XSS almacenados. Un usuario autenticado puede almacenar cargas \u00fatiles de tipo XSS en los perfiles, que son desencadenadas cuando cualquier otro usuario intenta acceder a la p\u00e1gina de edici\u00f3n de perfiles. La herramienta de edici\u00f3n de pdf presenta una funcionalidad de edici\u00f3n de perfil de pdf, el par\u00e1metro logoFile en ella no est\u00e1 correctamente saneado y un usuario puede introducir rutas relativas como ../../../../../../../../../../usr/share/icons/hicolor/48x48/apps/gvim.png por medio de herramientas como burpsuite. M\u00e1s tarde, cuando es exportado un pdf usando el perfil editado, el icono del pdf presenta la imagen en esa ruta (si la imagen est\u00e1 presente). Ambos problemas requieren que un atacante sea capaz de acceder a la interfaz de administraci\u00f3n de LAM. El problema ha sido corregido en versi\u00f3n 7.9.1"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.7, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ldap-account-manager:ldap_account_manager:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.9.1", "matchCriteriaId": "7FA2D90C-50A8-451A-97D2-7BAC063193F4"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:11.0:*:*:*:*:*:*:*", "matchCriteriaId": "FA6FEEC2-9F11-4643-8827-749718254FED"}]}]}], "references": [{"url": "https://github.com/LDAPAccountManager/lam/commit/3c6f09a3579e048e224eb5a4c4e3eefaa8bccd49", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/LDAPAccountManager/lam/issues/170", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/LDAPAccountManager/lam/security/advisories/GHSA-f2fr-cccr-583v", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2022/dsa-5177", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LDAPAccountManager/lam/commit/3c6f09a3579e048e224eb5a4c4e3eefaa8bccd49"}}