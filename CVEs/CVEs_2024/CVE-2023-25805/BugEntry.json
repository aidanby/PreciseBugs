{"buggy_code": ["'use strict'\n\nvar child = require('child_process')\n\nfunction GitFn (version, options) {\n  this._version = version\n  this._options = {\n    cwd: options.dir,\n    env: process.env,\n    setsid: false,\n    stdio: [0, 1, 2]\n  }\n}\nmodule.exports = GitFn\n\nGitFn.prototype = {\n  tag: function (cb) {\n    var cmd = ['git', 'tag', 'v' + this._version].join(' ')\n    this._exec(cmd, cb)\n  },\n  untag: function (cb) {\n    var cmd = ['git', 'tag', '-d', 'v' + this._version].join(' ')\n    this._exec(cmd, cb)\n  },\n  commit: function (cb) {\n    var cmd = ['git', 'commit', '-am', '\"' + this._version + '\"'].join(' ')\n    this._exec(cmd, cb)\n  },\n  _exec: function (cmd, cb) {\n    child.exec(cmd, this._options, cb)\n  }\n}\n", "/**\n * versionn\n *\n * @copyright (C) 2014- commenthol\n * @license MIT\n */\n\n'use strict'\n\n/* global describe, it, before, beforeEach */\n\nconst assert = require('assert')\nconst path = require('path')\nconst async = require('asyncc')\nconst sh = require('shelljs')\n\nconst Version = require('../lib/index')\n\nconst fixtures = path.join(__dirname, 'fixtures')\n\ndescribe('#Version', function () {\n  const packageJson = path.join(fixtures, 'package.json')\n\n  it('construct', function () {\n    const v = new Version(packageJson)\n    assert.ok(v instanceof Version)\n  })\n\n  it('construct without new', function () {\n    const v = Version(packageJson)\n    assert.ok(v instanceof Version)\n  })\n\n  it('setVersion', function () {\n    const v = new Version(packageJson)\n    v.setVersion('0.0.0')\n    assert.strictEqual(v.version, '0.0.0')\n  })\n\n  it('setVersion with bad semver', function () {\n    const v = new Version(packageJson)\n    v.setVersion('0a0.0')\n    assert.strictEqual(v.version, undefined)\n  })\n\n  it('inc', function (done) {\n    const v = new Version(packageJson)\n    v.extract(function (err) {\n      assert.ok(!err, '' + err)\n      v.inc('patch')\n      assert.strictEqual(v.version, '0.3.7')\n      done()\n    })\n  })\n\n  it('inc with bad semver command', function (done) {\n    const v = new Version(packageJson)\n    v.extract(function (err) {\n      assert.ok(!err, '' + err)\n      v.inc('patchit')\n      assert.strictEqual(v.version, '0.3.6')\n      done()\n    })\n  })\n\n  it('changefiles with undefined version', function (done) {\n    // var v = new Version(fixture('notthere.json'))\n    Version.changeFiles([], undefined, function (err) {\n      assert.strictEqual(err.message, 'version is undefined')\n      done()\n    })\n  })\n})\n\ndescribe('readFile', function () {\n  it('extract with error ', function (done) {\n    const v = new Version(path.join(fixtures, 'notthere.json'))\n    v.extract(function (err) {\n      assert.strictEqual(err.code, 'ENOENT')\n      done()\n    })\n  })\n\n  it('extract from bad json file ', function (done) {\n    const v = new Version(path.join(fixtures, 'packagebad.json'))\n    v.extract(function (err) {\n      assert.ok(err.message.indexOf('Unexpected string in JSON at') === 0, err.message)\n      done()\n    })\n  })\n\n  it('package.json', function (done) {\n    const v = new Version(path.join(fixtures, 'package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      done()\n    })\n  })\n\n  it('VERSION', function (done) {\n    const v = new Version(path.join(fixtures, 'VERSION'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      done()\n    })\n  })\n\n  it('file.js', function (done) {\n    const v = new Version(path.join(fixtures, 'file.js'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '5.0.23')\n      done()\n    })\n  })\n})\n\ndescribe('change files', function () {\n  before(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('change with error', function () {\n    const v = new Version(path.join(__dirname, 'fixtures/notthere.json'))\n    v.setVersion('0.0.1')\n    v.change(function (err) {\n      assert.strictEqual(err.code, 'ENOENT')\n    })\n  })\n\n  it('package.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      if (v.inc('patch')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '0.3.7')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('VERSION', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '1.1.0')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('file.js', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/file.js'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '5.0.23')\n      if (v.inc('preminor')) {\n        v.change(function (err) {\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.strictEqual(err, undefined)\n            assert.strictEqual(version, '5.1.0-0')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n})\n\ndescribe('change files with modifier', function () {\n  before(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('change package.json using --same', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      if (v.inc('same')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '0.3.6')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n})\n\ndescribe('change multiple files', function () {\n  beforeEach(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('from VERSION', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    let files = ['VERSION', 'package.json', 'file.js']\n\n    files = files.map(function (file) {\n      return path.join(__dirname, 'tmp', file)\n    })\n\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        Version.changeFiles(files, v.version, function (err) {\n          assert.strictEqual(err.length, 0)\n          async.eachLimit(5, files,\n            function (file, _cb) {\n              const vv = new Version(file)\n              vv.extract(function (err, version) {\n                assert.ok(!err, '' + err)\n                assert.strictEqual(version, v.version)\n                _cb()\n              })\n            }, function (_err) {\n              done()\n            })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('from VERSION changes notthere.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    let files = ['VERSION', 'notthere.json', 'package.json', 'file.js']\n\n    files = files.map(function (file) {\n      return path.join(__dirname, 'tmp', file)\n    })\n\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        Version.changeFiles(files, v.version, function (err) {\n          assert.strictEqual(err.length, 1)\n          async.eachLimit(5, files,\n            function (file, _cb) {\n              const vv = new Version(file)\n              vv.extract(function (_err, version) {\n                if (~file.indexOf('notthere.json')) {\n                  assert.strictEqual(version, undefined)\n                } else {\n                  assert.strictEqual(version, v.version)\n                }\n                _cb()\n              })\n            }, function (_err) {\n              done()\n            })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('from notthere.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/notthere.json'))\n\n    v.extract(function (err, version) {\n      assert.strictEqual(err.code, 'ENOENT')\n      assert.strictEqual(version, undefined)\n      try {\n        v.inc('same')\n      } catch (e) {\n        assert.ok(e.message, 'could not increment')\n      }\n      done()\n    })\n  })\n})\n"], "fixing_code": ["'use strict'\n\nconst child = require('child_process')\nconst semver = require('semver')\n\nconst assertVersionValid = version => {\n  if (!semver.valid(version)) {\n    throw new Error('version is invalid')\n  }\n}\n\nconst exec = (cmd, options, cb) => child.exec(cmd, options, cb)\n\nclass GitFn {\n  constructor (version, options) {\n    this._version = version\n    this._options = {\n      cwd: options.dir,\n      env: process.env,\n      setsid: false,\n      stdio: [0, 1, 2]\n    }\n  }\n\n  tag (cb) {\n    assertVersionValid(this._version)\n    const cmd = ['git', 'tag', 'v' + this._version].join(' ')\n    exec(cmd, this._options, cb)\n  }\n\n  untag (cb) {\n    assertVersionValid(this._version)\n    const cmd = ['git', 'tag', '-d', 'v' + this._version].join(' ')\n    exec(cmd, this._options, cb)\n  }\n\n  commit (cb) {\n    assertVersionValid(this._version)\n    const cmd = ['git', 'commit', '-am', '\"' + this._version + '\"'].join(' ')\n    exec(cmd, this._options, cb)\n  }\n}\n\nmodule.exports = GitFn\n", "/**\n * versionn\n *\n * @copyright (C) 2014- commenthol\n * @license MIT\n */\n\n'use strict'\n\n/* global describe, it, before, beforeEach */\n\nconst assert = require('assert')\nconst path = require('path')\nconst async = require('asyncc')\nconst sh = require('shelljs')\n\nconst Version = require('../lib/index')\n\nconst fixtures = path.join(__dirname, 'fixtures')\n\ndescribe('#Version', function () {\n  const packageJson = path.join(fixtures, 'package.json')\n\n  it('construct', function () {\n    const v = new Version(packageJson)\n    assert.ok(v instanceof Version)\n  })\n\n  it('construct without new', function () {\n    const v = Version(packageJson)\n    assert.ok(v instanceof Version)\n  })\n\n  it('setVersion', function () {\n    const v = new Version(packageJson)\n    v.setVersion('0.0.0')\n    assert.strictEqual(v.version, '0.0.0')\n  })\n\n  it('setVersion with bad semver', function () {\n    const v = new Version(packageJson)\n    v.setVersion('0a0.0')\n    assert.strictEqual(v.version, undefined)\n  })\n\n  it('inc', function (done) {\n    const v = new Version(packageJson)\n    v.extract(function (err) {\n      assert.ok(!err, '' + err)\n      v.inc('patch')\n      assert.strictEqual(v.version, '0.3.7')\n      done()\n    })\n  })\n\n  it('inc with bad semver command', function (done) {\n    const v = new Version(packageJson)\n    v.extract(function (err) {\n      assert.ok(!err, '' + err)\n      v.inc('patchit')\n      assert.strictEqual(v.version, '0.3.6')\n      done()\n    })\n  })\n\n  it('changefiles with undefined version', function (done) {\n    // var v = new Version(fixture('notthere.json'))\n    Version.changeFiles([], undefined, function (err) {\n      assert.strictEqual(err.message, 'version is undefined')\n      done()\n    })\n  })\n})\n\ndescribe('readFile', function () {\n  it('extract with error ', function (done) {\n    const v = new Version(path.join(fixtures, 'notthere.json'))\n    v.extract(function (err) {\n      assert.strictEqual(err.code, 'ENOENT')\n      done()\n    })\n  })\n\n  it('extract from bad json file ', function (done) {\n    const v = new Version(path.join(fixtures, 'packagebad.json'))\n    v.extract(function (err) {\n      assert.ok(err.message.indexOf('Unexpected string in JSON at') === 0, err.message)\n      done()\n    })\n  })\n\n  it('package.json', function (done) {\n    const v = new Version(path.join(fixtures, 'package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      done()\n    })\n  })\n\n  it('VERSION', function (done) {\n    const v = new Version(path.join(fixtures, 'VERSION'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      done()\n    })\n  })\n\n  it('file.js', function (done) {\n    const v = new Version(path.join(fixtures, 'file.js'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '5.0.23')\n      done()\n    })\n  })\n})\n\ndescribe('change files', function () {\n  before(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('change with error', function () {\n    const v = new Version(path.join(__dirname, 'fixtures/notthere.json'))\n    v.setVersion('0.0.1')\n    v.change(function (err) {\n      assert.strictEqual(err.code, 'ENOENT')\n    })\n  })\n\n  it('package.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      if (v.inc('patch')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '0.3.7')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('VERSION', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '1.1.0')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('file.js', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/file.js'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '5.0.23')\n      if (v.inc('preminor')) {\n        v.change(function (err) {\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.strictEqual(err, undefined)\n            assert.strictEqual(version, '5.1.0-0')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n})\n\ndescribe('change files with modifier', function () {\n  before(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('change package.json using --same', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/package.json'))\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '0.3.6')\n      if (v.inc('same')) {\n        v.change(function (err) {\n          assert.ok(!err, '' + err)\n          assert.strictEqual(err, null)\n          v.extract(function (err, version) {\n            assert.ok(!err, '' + err)\n            assert.strictEqual(version, '0.3.6')\n            done()\n          })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n})\n\ndescribe('change multiple files', function () {\n  beforeEach(function (done) {\n    sh.cp('-f', path.join(__dirname, 'fixtures/*'), path.join(__dirname, 'tmp/'))\n    done()\n  })\n\n  it('from VERSION', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    let files = ['VERSION', 'package.json', 'file.js']\n\n    files = files.map(function (file) {\n      return path.join(__dirname, 'tmp', file)\n    })\n\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        Version.changeFiles(files, v.version, function (err) {\n          assert.strictEqual(err.length, 0)\n          async.eachLimit(5, files,\n            function (file, _cb) {\n              const vv = new Version(file)\n              vv.extract(function (err, version) {\n                assert.ok(!err, '' + err)\n                assert.strictEqual(version, v.version)\n                _cb()\n              })\n            }, function (_err) {\n              done()\n            })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('from VERSION changes notthere.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/VERSION'))\n    let files = ['VERSION', 'notthere.json', 'package.json', 'file.js']\n\n    files = files.map(function (file) {\n      return path.join(__dirname, 'tmp', file)\n    })\n\n    v.extract(function (err, version) {\n      assert.ok(!err, '' + err)\n      assert.strictEqual(version, '1.0.3-12')\n      if (v.inc('minor')) {\n        Version.changeFiles(files, v.version, function (err) {\n          assert.strictEqual(err.length, 1)\n          async.eachLimit(5, files,\n            function (file, _cb) {\n              const vv = new Version(file)\n              vv.extract(function (_err, version) {\n                if (~file.indexOf('notthere.json')) {\n                  assert.strictEqual(version, undefined)\n                } else {\n                  assert.strictEqual(version, v.version)\n                }\n                _cb()\n              })\n            }, function (_err) {\n              done()\n            })\n        })\n      } else {\n        assert.ok(false, 'could not increment')\n      }\n    })\n  })\n\n  it('from notthere.json', function (done) {\n    const v = new Version(path.join(__dirname, 'tmp/notthere.json'))\n\n    v.extract(function (err, version) {\n      assert.strictEqual(err.code, 'ENOENT')\n      assert.strictEqual(version, undefined)\n      try {\n        v.inc('same')\n      } catch (e) {\n        assert.ok(e.message, 'could not increment')\n      }\n      done()\n    })\n  })\n\n  it('shall throw if not a valid version', function (done) {\n    const gitFn = new Version._.GitFn('& touch newFile', { dir: './' })\n    try {\n      gitFn.tag(done)\n    } catch (e) {\n      assert.strictEqual(e.message, 'version is invalid')\n      done()\n    }\n  })\n})\n"], "filenames": ["lib/gitfn.js", "test/test.js"], "buggy_code_start_loc": [3, 312], "buggy_code_end_loc": [32, 313], "fixing_code_start_loc": [3, 312], "fixing_code_end_loc": [45, 323], "type": "CWE-77", "message": "versionn, software for changing version information across multiple files, has a command injection vulnerability in all versions prior to version 1.1.0. This issue is patched in version 1.1.0.", "other": {"cve": {"id": "CVE-2023-25805", "sourceIdentifier": "security-advisories@github.com", "published": "2023-02-20T16:15:10.827", "lastModified": "2023-03-01T17:40:15.840", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "versionn, software for changing version information across multiple files, has a command injection vulnerability in all versions prior to version 1.1.0. This issue is patched in version 1.1.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-77"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:versionn_project:versionn:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.1.0", "matchCriteriaId": "E1348743-9E3E-400E-91C8-97056CA1C0C4"}]}]}], "references": [{"url": "https://github.com/commenthol/versionn/commit/2ca128823efe962b37f2698f0eb530c2b124842d", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/commenthol/versionn/security/advisories/GHSA-fj78-2vc5-f6cm", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/commenthol/versionn/commit/2ca128823efe962b37f2698f0eb530c2b124842d"}}