{"buggy_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\FRS\\FRSPackageController;\nuse Tuleap\\FRS\\FRSValidator;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementDao;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementDisplay;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementFactory;\nuse Tuleap\\FRS\\UploadedLinksDao;\nuse Tuleap\\FRS\\UploadedLinksInvalidFormException;\nuse Tuleap\\FRS\\UploadedLinksRequestFormatter;\nuse Tuleap\\FRS\\UploadedLinksRetriever;\nuse Tuleap\\FRS\\UploadedLinksUpdater;\nuse Tuleap\\FRS\\UploadedLinkUpdateTablePresenter;\n\nfunction file_utils_header($params)\n{\n    global $group_id;\n\n    if (! array_key_exists('pv', $params) || ! $params['pv']) {\n        $project_manager = ProjectManager::instance();\n        $project         = $project_manager->getProject($group_id);\n\n        $service = $project->getService(Service::FILE);\n        if ($service !== null) {\n            assert($service instanceof ServiceFile);\n            $service->displayFRSHeader($project, $params['title']);\n        }\n    }\n}\n\nfunction file_utils_footer($params)\n{\n    site_project_footer($params);\n}\n\n/*\n\n The following functions are for the FRS (File Release System)\n They were moved here from project_admin_utils.php since they can\n now be used by non-admins (e.g. file releases admins)\n\n*/\n\n\n/*\n\n    pop-up box of supported frs statuses\n\n*/\n\nfunction frs_show_status_popup($name = 'status_id', $checked_val = \"xzxz\")\n{\n    global $Language;\n\n    $package_factory = new FRSPackageFactory();\n    $arr_id          = [$package_factory->STATUS_ACTIVE, $package_factory->STATUS_HIDDEN];\n    $arr_status      = [\n        $Language->getText('file_admin_editpackages', 'status_active'),\n        $Language->getText('file_admin_editpackages', 'status_hidden'),\n    ];\n\n    return html_build_select_box_from_arrays($arr_id, $arr_status, $name, $checked_val, false);\n}\n\n/*\n\n    pop-up box of supported frs filetypes\n\n*/\n\nfunction frs_show_filetype_popup($name = 'type_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of the available filetypes\n    */\n    global $FRS_FILETYPE_RES,$Language;\n    if (! isset($FRS_FILETYPE_RES)) {\n// LJ Sort by type_id added so that new extensions goes\n// LJ in the right place in the menu box\n        $FRS_FILETYPE_RES = db_query(\"SELECT * FROM frs_filetype ORDER BY type_id\");\n    }\n    return html_build_select_box($FRS_FILETYPE_RES, $name, $checked_val, true, $Language->getText('file_file_utils', 'must_choose_one'));\n}\n\n/*\n\n    pop-up box of supported frs processor options\n\n*/\n\nfunction frs_show_processor_popup($group_id, $name = 'processor_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of the available processors\n    */\n    global $FRS_PROCESSOR_RES,$Language;\n    if (! isset($FRS_PROCESSOR_RES)) {\n        $FRS_PROCESSOR_RES = db_query(\"SELECT * FROM frs_processor WHERE group_id=100 OR group_id=\" . db_ei($group_id) . \" ORDER BY `rank`\");\n    }\n    return html_build_select_box($FRS_PROCESSOR_RES, $name, $checked_val, true, $Language->getText('file_file_utils', 'must_choose_one'), false, '', false, '', false, '', CODENDI_PURIFIER_CONVERT_HTML);\n}\n\n\n/*\n\n    pop-up box of packages:releases for this group\n\n*/\n\n\nfunction frs_show_release_popup($group_id, $name = 'release_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of releases for the project\n    */\n    global $FRS_RELEASE_ID_RES,$FRS_RELEASE_NAME_RES,$Language;\n    $release_factory = new FRSReleaseFactory();\n    if (! $group_id) {\n        return $Language->getText('file_file_utils', 'g_id_err');\n    } else {\n        if (! isset($FRS_RELEASE_ID_RES)) {\n            $res                  = $release_factory->getFRSReleasesInfoListFromDb($group_id);\n            $FRS_RELEASE_ID_RES   = [];\n            $FRS_RELEASE_NAME_RES = [];\n            foreach ($res as $release) {\n                $FRS_RELEASE_ID_RES[]   = $release['release_id'];\n                $FRS_RELEASE_NAME_RES[] = $release['package_name'] . ':' . $release['release_name'];\n            }\n        }\n        return html_build_select_box_from_arrays($FRS_RELEASE_ID_RES, $FRS_RELEASE_NAME_RES, $name, $checked_val, false);\n    }\n}\nfunction frs_show_release_popup2($group_id, $name = 'release_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of releases for the project\n    */\n    $release_factory = new FRSReleaseFactory();\n    if (! $group_id) {\n        return $GLOBALS['Language']->getText('file_file_utils', 'g_id_err');\n    } else {\n        $hp  = Codendi_HTMLPurifier::instance();\n        $res = $release_factory->getFRSReleasesInfoListFromDb($group_id);\n        $p   = [];\n        foreach ($res as $release) {\n            $p[$release['package_name']][$release['release_id']] = $release['release_name'];\n        }\n\n        $select = '<select name=\"' . $name . '\">';\n        foreach ($p as $package_name => $releases) {\n            $select .= '<optgroup label=\"' . $package_name . '\">';\n            foreach ($releases as $id => $name) {\n                $select .= '<option value=\"' . $id . '\" ' . ($id == $checked_val ? 'selected=\"selected\"' : '') . '>' . $hp->purify($name) . '</option>';\n            }\n            $select .= '</optgroup>';\n        }\n        $select .= '</select>';\n        return $select;\n    }\n}\n\nfunction file_utils_show_processors($result)\n{\n    global $group_id,$Language;\n    $hp   = Codendi_HTMLPurifier::instance();\n    $rows =  db_numrows($result);\n\n    $title_arr   = [];\n    $title_arr[] = $Language->getText('file_file_utils', 'proc_name');\n    $title_arr[] = $Language->getText('file_file_utils', 'proc_rank');\n    $title_arr[] = $Language->getText('file_file_utils', 'del');\n\n    echo html_build_list_table_top($title_arr);\n\n    for ($j = 0; $j < $rows; $j++) {\n        $proc_id   = db_result($result, $j, 'processor_id');\n        $proc_name = db_result($result, $j, 'name');\n        $proc_rank = db_result($result, $j, 'rank');\n        $gr_id     = db_result($result, $j, 'group_id');\n\n        echo '<tr class=\"' . html_get_alt_row_color($j) . '\">' . \"\\n\";\n\n        if ($gr_id == \"100\") {\n            echo '<td>' . $hp->purify($proc_name) . '</td>';\n        } else {\n            echo '<td><A HREF=\"/file/admin/editproc.php?group_id=' . $group_id . '&proc_id=' . $proc_id . '\" title=\"' . $hp->purify($proc_id . ' - ' . $proc_name) . '\">' . $hp->purify($proc_name) . '</td>';\n        }\n\n        echo '<td>' . $proc_rank . \"</td>\\n\";\n\n        if ($gr_id == \"100\") {\n            // pre-defined processors are not manageable\n            echo '<TD align=center>-</TD>';\n        } else {\n            echo '<TD align=center>' .\n            '<a href=\"/file/admin/manageprocessors.php?mode=delete&group_id=' . $group_id . '&proc_id=' . $proc_id . '\" ' .\n            '\" onClick=\"return confirm(\\'' . $Language->getText('file_file_utils', 'del_proc') . '\\')\">' .\n            '<IMG SRC=\"' . util_get_image_theme(\"ic/trash.png\") . '\" HEIGHT=\"16\" WIDTH=\"16\" BORDER=\"0\" ALT=\"' . $Language->getText('file_file_utils', 'del') . '\"></A></TD>';\n        }\n\n        echo \"</tr>\";\n    }\n    echo \"</table>\";\n}\n\nfunction file_utils_add_proc($pname, $prank)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'INSERT INTO frs_processor' .\n           ' (name,group_id,`rank`)' .\n           ' VALUES' .\n           '(\"%s\",%d,%d)',\n        db_es($pname),\n        db_ei($group_id),\n        db_ei($prank)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'add_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'add_proc_fail'));\n    }\n}\n\nfunction file_utils_update_proc($pid, $pname, $prank)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'UPDATE frs_processor' .\n           ' SET name = \"%s\",`rank` = %d' .\n           ' WHERE processor_id=%d' .\n           ' AND group_id=%d',\n        db_es($pname),\n        db_ei($prank),\n        db_ei($pid),\n        db_ei($group_id)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'update_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'update_proc_fail'));\n    }\n}\n\nfunction file_utils_delete_proc($pid)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'DELETE FROM frs_processor' .\n           ' WHERE group_id=%d' .\n           ' AND processor_id=%d',\n        db_ei($group_id),\n        db_ei($pid)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'delete_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'delete_proc_fail'));\n    }\n}\n\nfunction frs_display_package_form(FRSPackage $package, $title, $url, $siblings)\n{\n    $hp                        = Codendi_HTMLPurifier::instance();\n    $project                   = ProjectManager::instance()->getProject($package->getGroupID());\n    $license_agreement_display = new LicenseAgreementDisplay(\n        $hp,\n        TemplateRendererFactory::build(),\n        new LicenseAgreementFactory(\n            new LicenseAgreementDao(),\n        ),\n    );\n\n    file_utils_header(['title' => $title]);\n    echo '<h3>' . $hp->purify($title, CODENDI_PURIFIER_CONVERT_HTML) . '</h3>\n\n    <form action=\"' . $url . '\" method=\"post\">\n    <table>\n    <tr><th>' . $GLOBALS['Language']->getText('file_admin_editpackages', 'p_name') . ':</th>  <td>\n        <input type=\"text\" name=\"package[name]\" data-test=\"frs-create-package\" CLASS=\"textfield_small\" value=\"' .\n        $hp->purify(\n            util_unconvert_htmlspecialchars($package->getName()),\n            CODENDI_PURIFIER_CONVERT_HTML\n        ) . '\">';\n    //{{{ Rank\n    $nb_siblings = count($siblings);\n    if ($nb_siblings && ($nb_siblings > 1 || $siblings[0] != $package->getPackageId())) {\n        echo '</td></tr>';\n        echo '<tr><th>' . $GLOBALS['Language']->getText('file_admin_editpackages', 'rank_on_screen') . ':</th><td>';\n        echo $GLOBALS['HTML']->selectRank($package->getPackageId(), $package->getRank(), $siblings, ['name' => 'package[rank]']);\n    } else {\n        echo '<input type=\"hidden\" name=\"package[rank]\" value=\"0\" />';\n    }\n    echo '</td></tr>';\n    //}}}\n    echo '<tr><th>' . $GLOBALS['Language']->getText('global', 'status') . ':</th>  <td data-test=\"status\">' . frs_show_status_popup('package[status_id]', $package->getStatusID()) . '</td></tr>';\n    echo $license_agreement_display->getPackageEditSelector($package, $project);\n\n     //We cannot set permission on creation for now\n    if ($package->getPackageID()) {\n        echo '<tr style=\"vertical-align:top\"><th>' . 'Permissions' . ':</th><td>';\n        $package_controller = new FRSPackageController(\n            FRSPackageFactory::instance(),\n            FRSReleaseFactory::instance(),\n            new User_ForgeUserGroupFactory(new UserGroupDao()),\n            PermissionsManager::instance(),\n            new LicenseAgreementFactory(\n                new LicenseAgreementDao()\n            ),\n            Codendi_HTMLPurifier::instance(),\n        );\n\n        $package_controller->displayUserGroups($project, FRSPackage::PERM_READ, $package->getPackageID());\n        echo '</td></tr>';\n    }\n     echo '<tr><td></td><td> <br>\n                <input class=\"btn btn-primary\"\n                       type=\"submit\"\n                       name=\"submit\"\n                       value=\"' . $GLOBALS['Language']->getText('global', 'btn_submit') . '\"\n                       data-test=\"frs-create-package-button\"\n                 /> ';\n     echo '<input class=\"btn\" type=\"submit\" name=\"cancel\" value=\"' . $GLOBALS['Language']->getText('global', 'btn_cancel') . '\" /></td></tr></table>\n     </FORM>';\n\n     file_utils_footer([]);\n}\n\nfunction frs_display_release_form($is_update, &$release, $group_id, $title, $url)\n{\n    global $package_factory, $release_factory, $files_factory;\n    $hp = Codendi_HTMLPurifier::instance();\n    if (is_array($release)) {\n        if (isset($release['date'])) {\n            $release_date = $release['date'];\n        }\n        $release = new FRSRelease($release);\n    }\n    if ($is_update) {\n        $files = $release->getFiles();\n        if (count($files) > 0) {\n            for ($i = 0; $i < count($files); $i++) {\n                if (! $files_factory->compareMd5Checksums($files[$i]->getComputedMd5(), $files[$i]->getReferenceMd5())) {\n                    $GLOBALS['Response']->addFeedback('error', $GLOBALS['Language']->getText('file_admin_editreleases', 'md5_fail', [basename($files[$i]->getFileName()), $files[$i]->getComputedMd5()]));\n                }\n            }\n        }\n    }\n\n    file_utils_header([\n        'title' => $GLOBALS['Language']->getText(\n            'file_admin_editreleases',\n            'release_new_file_version'\n        ),\n    ]);\n\n    echo '<H3>' . $hp->purify($title, CODENDI_PURIFIER_CONVERT_HTML) . '</H3>';\n    $sql          = \"SELECT * FROM frs_processor WHERE (group_id = 100 OR group_id = \" . db_ei($group_id) . \") ORDER BY `rank`\";\n    $result       = db_query($sql);\n    $processor_id = util_result_column_to_array($result, 0);\n    foreach ($processor_id as $key => $id) {\n        $processor_id[$key] = $hp->purify($id, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $processor_name = util_result_column_to_array($result, 1);\n    foreach ($processor_name as $key => $value) {\n        $processor_name[$key] = $hp->purify($value, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $sql     = \"SELECT * FROM frs_filetype ORDER BY type_id\";\n    $result1 = db_query($sql);\n    $type_id = util_result_column_to_array($result1, 0);\n    foreach ($type_id as $key => $id) {\n        $type_id[$key] = $hp->purify($id, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $type_name = util_result_column_to_array($result1, 1);\n    foreach ($type_name as $key => $name) {\n        $type_name[$key] = $hp->purify($name, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $url_news = \"/file/showfiles.php?group_id=\" . $group_id;\n    $script   = \"var processor_id = ['\" . implode(\"', '\", $processor_id) . \"'];\";\n    $script  .= \"var processor_name = ['\" . implode(\"', '\", $processor_name) . \"'];\";\n    $script  .= \"var type_id = ['\" . implode(\"', '\", $type_id) . \"'];\";\n    $script  .= \"var type_name = ['\" . implode(\"', '\", $type_name) . \"'];\";\n    $script  .= \"var group_id = \" . $hp->purify($group_id, CODENDI_PURIFIER_JS_QUOTE) . \";\";\n    $script  .= \"var relname = '\" . $hp->purify($GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'relname'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var choose = '\" . $hp->purify($GLOBALS['Language']->getText('file_file_utils', 'must_choose_one'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var browse = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'browse'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var local_file = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'local_file'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var scp_ftp_files = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'scp_ftp_files'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var upload_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'upload'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var add_file_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'add_file'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var add_change_log_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'add_change_log'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var view_change_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'view_change'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var refresh_files_list = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'refresh_file_list'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var release_mode = '\" . $hp->purify($is_update ? 'edition' : 'creation', CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n\n    if ($is_update) {\n        $pm  = PermissionsManager::instance();\n        $dar = $pm->getAuthorizedUgroups($release->getReleaseID(), FRSRelease::PERM_READ);\n\n        $ugroup_factory      = new User_ForgeUserGroupFactory(new UserGroupDao());\n        $all_project_ugroups = $ugroup_factory->getAllForProject($release->getProject());\n        $project_names       = [];\n        foreach ($all_project_ugroups as $project_ugroup) {\n            $project_names[$project_ugroup->getId()] = $project_ugroup->getName();\n        }\n\n        $ugroups_name = [];\n        foreach ($dar as $row) {\n            if (! isset($row['ugroup_id'], $project_names[$row['ugroup_id']])) {\n                continue;\n            }\n            $ugroups_name[] = $hp->purify($project_names[$row['ugroup_id']], CODENDI_PURIFIER_JS_QUOTE);\n        }\n        $script .= \"var ugroups_name = ' \" . implode(\", \", $ugroups_name) . \" ';\";\n        $script .= \"var default_permissions_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_perm'), CODENDI_PURIFIER_JS_QUOTE) . \" ';\";\n    } else {\n        $script .= \"var default_permissions_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'default_permissions'), CODENDI_PURIFIER_JS_QUOTE) . \" ';\";\n    }\n    $GLOBALS['Response']->includeFooterJavascriptSnippet($script);\n    //set variables for news template\n    $relname = $GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'relname');\n    if (! $is_update) {\n        echo '<p>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'contain_multiple_files')) . '</p>';\n    }\n    ?>\n\n    <FORM id=\"frs_form\" NAME=\"frsRelease\" ENCTYPE=\"multipart/form-data\" METHOD=\"POST\" ACTION=\"<?php echo $url; ?>\" CLASS=\"form-inline\">\n        <INPUT TYPE=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"<?php echo $hp->purify(ForgeConfig::get('sys_max_size_upload')); ?>\">\n        <input type=\"hidden\" name=\"postReceived\" value=\"\" />\n        <?php\n        if ($release->getReleaseId()) {\n            echo '<input type=\"hidden\" id=\"release_id\" name=\"release[release_id]\" value=\"' . $hp->purify($release->getReleaseId()) . '\" />';\n        }\n        ?>\n        <TABLE BORDER=\"0\" width=\"100%\">\n        <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_properties')); ?></LEGEND>\n        <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n            <TR>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editpackages', 'p_name')); ?>:</B>\n                </TD>\n                <TD>\n    <?php\n    $res  = $package_factory->getFRSPackagesFromDb($group_id);\n    $rows = count($res);\n    if (! $res || $rows < 1) {\n        echo '<p class=\"highlight\">' . $hp->purify($GLOBALS['Language']->getText('file_admin_qrs', 'no_p_available')) . '</p>';\n    } else {\n        echo '<SELECT NAME=\"release[package_id]\" id=\"package_id\">';\n        for ($i = 0; $i < $rows; $i++) {\n            echo '<OPTION VALUE=\"' . $hp->purify($res[$i]->getPackageID()) . '\"';\n            if ($res[$i]->getPackageID() == $release->getPackageId()) {\n                echo ' selected';\n            }\n            echo '>' . $hp->purify(util_unconvert_htmlspecialchars($res[$i]->getName()), CODENDI_PURIFIER_CONVERT_HTML) . '</OPTION>';\n        }\n        echo '</SELECT>';\n    }\n    ?>\n                </TD><td></td>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_name')); ?>: <span class=\"highlight\"><strong>*</strong></span></B>\n                </TD>\n                <TD>\n                    <INPUT\n                            TYPE=\"TEXT\"\n                            id=\"release_name\"\n                            name=\"release[name]\"\n                            onBlur=\"update_news()\"\n                            data-test=\"release-name\"\n                            value=\"<?php echo $hp->purify($release->getName()); ?>\"\n                    >\n                </TD>\n            </TR>\n            <TR>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_date')); ?>:</B>\n                </TD>\n                <TD>\n                <?php echo $GLOBALS['HTML']->getDatePicker('release_date', 'release[date]', isset($release_date) ? $hp->purify($release_date) : format_date('Y-m-d', $release->getReleaseDate())); ?>\n                </TD>\n                <td></td>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('global', 'status')); ?>:</B>\n                </TD>\n                <TD>\n                    <?php\n\n                    print frs_show_status_popup($name = 'release[status_id]', $release->getStatusID()) . \"<br>\";\n                    ?>\n                </TD>\n            </TR>\n\n            <?php\n                $additional_info   = '';\n                $notes_in_markdown = false;\n\n                $params = [\n                    'release_id'        => $release->getReleaseId(),\n                    'additional_info'   => &$additional_info,\n                    'notes_in_markdown' => &$notes_in_markdown,\n                ];\n\n                EventManager::instance()->processEvent(\n                    'frs_edit_form_additional_info',\n                    $params\n                );\n\n            if ($additional_info) {\n                echo '<tr>';\n                echo $additional_info;\n                echo '</tr>';\n            }\n            ?>\n\n        </TABLE></FIELDSET>\n        </TD></TR>\n        <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_uploaded_files')); ?></LEGEND>\n    <?php\n\n    $titles   =  [];\n    $titles[] = $is_update ? $GLOBALS['Language']->getText('file_admin_editreleases', 'delete_col') : '';\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'filename');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'processor');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_type');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'md5sum');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'comment');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'user');\n    if ($is_update) {\n        $titles[] = $GLOBALS['Language']->getText('file_admin_editreleasepermissions', 'release');\n        $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'release_date');\n    }\n    echo html_build_list_table_top($titles, false, false, false, 'files');\n    ?>\n            <tbody id=\"files_body\">\n\n    <?php\n        $files = $release->getFiles();\n    for ($i = 0; $i < count($files); $i++) {\n        $fname    = $files[$i]->getFileName();\n        $list     = explode('/', $fname);\n        $fname    = $list[sizeof($list) - 1];\n        $user_id  = $files[$i]->getUserID();\n        $userName = (isset($user_id)) ? UserManager::instance()->getUserById($files[$i]->getUserID())->getRealName() : \"\";\n        echo '<TR>';\n        echo '<TD><INPUT TYPE=\"CHECKBOX\" NAME=\"release_files_to_delete[]\" VALUE=\"' . $hp->purify($files[$i]->getFileID()) . '\"></TD>';\n        echo '<TD>' . $hp->purify($fname, CODENDI_PURIFIER_CONVERT_HTML) . '<INPUT TYPE=\"HIDDEN\" NAME=\"release_files[]\" VALUE=\"' . $hp->purify($files[$i]->getFileID()) . '\"></TD>';\n        echo '<TD>' . frs_show_processor_popup($group_id, $name = 'release_file_processor[]', $files[$i]->getProcessorID()) . '</TD>';\n        echo '<TD>' . frs_show_filetype_popup($name = 'release_file_type[]', $files[$i]->getTypeID()) . '</TD>';\n        //In case of difference between the inserted md5 and the computed one\n        //we dispaly an editable text field to let the user insert the right value\n        //to avoid the error message next time\n        $value = 'value = \"' . $hp->purify($files[$i]->getReferenceMd5()) . '\"';\n        if ($files_factory->compareMd5Checksums($files[$i]->getComputedMd5(), $files[$i]->getReferenceMd5())) {\n            $value = 'value = \"' . $hp->purify($files[$i]->getComputedMd5()) . '\" readonly=\"true\"';\n        }\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"release_reference_md5[]\" ' . $value . ' SIZE=\"36\" ></TD>';\n        $comment = $files[$i]->getComment();\n        echo '<TD><textarea NAME=\"release_comment[]\" cols=\"20\" rows=\"1\">' . $hp->purify($comment) . '</textarea></TD>';\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"user\" value = \"' . $hp->purify($userName) . '\" readonly=\"true\"></TD>';\n        echo '<TD>' . frs_show_release_popup2($group_id, $name = 'new_release_id[]', $files[$i]->getReleaseID()) . '</TD>';\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"release_time[]\" VALUE=\"' . $hp->purify(format_date('Y-m-d', $files[$i]->getReleaseTime())) . '\" SIZE=\"10\" MAXLENGTH=\"10\"></TD></TR>';\n    }\n        echo '<INPUT TYPE=\"HIDDEN\" id=\"nb_files\" NAME=\"nb_files\" VALUE=\"' . $hp->purify(count($files)) . '\">';\n    ?>\n\n                        <tr id=\"row_0\">\n                            <td></td>\n                            <td>\n                                <input type=\"hidden\" name=\"js\" value=\"no_js\"/>\n                                <select name=\"ftp_file[]\" id=\"ftp_file_0\">\n                                    <option value=\"-1\"><?php echo $hp->purify($GLOBALS['Language']->getText('file_file_utils', 'must_choose_one')); ?></option>\n    <?php\n\n    //iterate and show the files in the upload directory\n    $file_list    = $files_factory->getUploadedFileNames($release->getProject());\n    $file_list_js = [];\n    foreach ($file_list as $file) {\n        echo '<option value=\"' . $hp->purify($file) . '\">' . $hp->purify($file, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n        $file_list_js[] = $hp->purify($file, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $GLOBALS['Response']->includeFooterJavascriptSnippet(\"var available_ftp_files = ['\" . implode(\"', '\", $file_list_js) . \"'];\");\n\n    ?>\n                                </select>\n\n                                <span id=\"or\">or</span>\n                                <input type=\"file\" name=\"file[]\" id=\"file_0\" />\n                            </td>\n                            <td>\n                                <?php print frs_show_processor_popup($group_id, $name = 'file_processor'); ?>\n                            </td>\n                            <td>\n                                <?php print frs_show_filetype_popup($name = 'file_type'); ?>\n                            </td>\n                            <td>\n                                <input name=\"reference_md5\" value=\"\" size=\"36\" type=\"TEXT\">\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <?php\n                echo '<span class=\"small\" style=\"color:#666\"><i>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'upload_file_msg', formatByteToMb(ForgeConfig::get('sys_max_size_upload')))) . '</i> </span>';\n\n                $renderer = TemplateRendererFactory::build()->getRenderer(\n                    ForgeConfig::get('codendi_dir') . '/src/templates/frs/'\n                );\n\n                $uploaded_links_retriever = new UploadedLinksRetriever(new UploadedLinksDao(), UserManager::instance());\n                $existing_links           = $uploaded_links_retriever->getLinksForRelease($release);\n\n                $uploaded_link_spresenter_builder = new \\Tuleap\\FRS\\UploadedLinkPresentersBuilder();\n                $existing_links_presenter         = $uploaded_link_spresenter_builder->build($existing_links);\n                $uploaded_links_create_presenter  = new UploadedLinkUpdateTablePresenter($existing_links_presenter);\n\n                echo $renderer->renderToString('uploaded-links-form', $uploaded_links_create_presenter);\n                ?>\n            </FIELDSET>\n            </TD></TR>\n            <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_notes')); ?></LEGEND>\n            <?php\n            if ($notes_in_markdown) {\n                echo '<p class=\"help\">\n                            <i class=\"fa fa-info-circle\"></i>\n                            ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'notes_in_markdown')) . '\n                        </p>';\n            }\n            ?>\n            <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\" WIDTH=\"100%\">\n            <TR id=\"notes_title\">\n                <TD VALIGN=\"TOP\" width=\"10%\">\n                    <span id=\"release_notes\"><B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_notes')); ?>:  </B></span>\n                </TD>\n            </TR>\n            <TR id=\"upload_notes\">\n                <TD>\n                    <input id=\"uploaded_notes\" type=\"file\" name=\"uploaded_release_notes\"  size=\"30\">\n                </TD>\n            </TR>\n            <TR id=\"release_notes_area\">\n                <TD width=\"100%\">\n                    <TEXTAREA NAME=\"release[release_notes]\" rows=\"7\" cols=\"70\" data-test=\"release-note\"><?php echo $hp->purify($release->getNotes(), CODENDI_PURIFIER_CONVERT_HTML);?></TEXTAREA>\n                </TD>\n            </TR>\n            <TR id=\"change_log_title\">\n                <TD VALIGN=\"TOP\" width=\"10%\">\n                    <span id=\"change_log\"><B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'change_log')); ?>:  </B></span>\n                </TD>\n            </TR>\n            <TR id=\"upload_change_log\">\n                <TD>\n                    <input type=\"file\" id=\"uploaded_change_log\" name=\"uploaded_change_log\"  size=\"30\">\n                </TD>\n            </TR>\n            <TR id=\"change_log_area\">\n                <TD width=\"40%\">\n                    <TEXTAREA ID=\"text_area_change_log\" NAME=\"release[change_log]\" ROWS=\"7\" COLS=\"70\"><?php echo $hp->purify($release->getChanges(), CODENDI_PURIFIER_CONVERT_HTML);?></TEXTAREA>\n                </TD>\n            </TR>\n            </TABLE></FIELDSET>\n            </TD></TR>\n            <TR>\n                <TD>\n                    <FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_permissions')); ?></LEGEND>\n                        <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n\n                            <TR id=\"permissions\">\n                                <TD>\n                                    <DIV id=\"permissions_list\">\n                                        <?php\n                                        $project = ProjectManager::instance()->getProject($group_id);\n                                        if ($is_update) {\n                                            $release_controller = new FRSPackageController(\n                                                FRSPackageFactory::instance(),\n                                                FRSReleaseFactory::instance(),\n                                                new User_ForgeUserGroupFactory(new UserGroupDao()),\n                                                PermissionsManager::instance(),\n                                                new LicenseAgreementFactory(\n                                                    new LicenseAgreementDao()\n                                                ),\n                                                Codendi_HTMLPurifier::instance(),\n                                            );\n\n                                            $release_controller->displayUserGroups($project, FRSRelease::PERM_READ, $release->getReleaseID());\n                                        } else {\n                                            $package_controller = new FRSPackageController(\n                                                FRSPackageFactory::instance(),\n                                                FRSReleaseFactory::instance(),\n                                                new User_ForgeUserGroupFactory(new UserGroupDao()),\n                                                PermissionsManager::instance(),\n                                                new LicenseAgreementFactory(\n                                                    new LicenseAgreementDao()\n                                                ),\n                                                Codendi_HTMLPurifier::instance(),\n                                            );\n\n                                            $package_controller->displayUserGroups($project, FRSPackage::PERM_READ, $release->getPackageID());\n                                        }\n                                        ?>\n\n                                    </DIV>\n                                </TD>\n                            </TR>\n                        </TABLE>\n\n                    </FIELDSET>\n                </TD>\n            </TR>\n            <?php\n\n            $is_user_allowed_to_send_news = user_ismember($group_id, 'A') || user_ismember($group_id, 'N2') || user_ismember($group_id, 'N1');\n            if ($project->usesService(Service::NEWS) && $is_user_allowed_to_send_news) {\n                echo '\n            <TR><TD><FIELDSET><LEGEND>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_news')) . '</LEGEND>\n                <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n                    <TR>\n                        <TD VALIGN=\"TOP\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'submit_news')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT ID=\"submit_news\" TYPE=\"CHECKBOX\" NAME=\"release_submit_news\" VALUE=\"1\">\n\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_subject\">\n                        <TD VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'subject')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT TYPE=\"TEXT\" ID=\"release_news_subject\" NAME=\"release_news_subject\" VALUE=\" ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'file_news_subject', $relname)) . '\" SIZE=\"40\" MAXLENGTH=\"60\">\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_details\">\n                        <TD VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'details')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <TEXTAREA ID=\"release_news_details\" NAME=\"release_news_details\" ROWS=\"7\" COLS=\"50\">' . $hp->purify($GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'file_news_details', [$relname, $url_news])) . ' </TEXTAREA>\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_public\">\n                        <TD ROWSPAN=2 VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $GLOBALS['Language']->getText('news_submit', 'news_privacy') . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT TYPE=\"RADIO\" ID=\"publicnews\" NAME=\"private_news\" VALUE=\"0\" CHECKED>' . $GLOBALS['Language']->getText('news_submit', 'public_news') . '\n                        </TD>\n                    </TR >\n                    <TR id=\"tr_private\">\n                        <TD>\n                            <INPUT TYPE=\"RADIO\" ID=\"privatenews\" NAME=\"private_news\" VALUE=\"1\">' . $GLOBALS['Language']->getText('news_submit', 'private_news') . '\n                        </TD>\n                    </TR></DIV>\n                </TABLE></FIELDSET>\n            </TD></TR>';\n            }\n\n            $fmmf  = new FileModuleMonitorFactory();\n            $count = count($fmmf->getFilesModuleMonitorFromDb($release->getPackageId()));\n            if ($count > 0) {\n                echo '<TR><TD><FIELDSET><LEGEND>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_notification')) . '</LEGEND>';\n                echo '<TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">';\n                echo '<TR><TD>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'users_monitor', $count)) . '</TD></TR>';\n                echo '<TR><TD><B>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'mail_file_rel_notice')) . '</B><INPUT TYPE=\"CHECKBOX\" NAME=\"notification\" VALUE=\"1\" CHECKED>';\n                echo '</TD></TR>';\n                echo '</TABLE></FIELDSET></TD></TR>';\n            }\n            ?>\n\n            <TR>\n                <TD ALIGN=\"CENTER\">\n\n                    <INPUT TYPE=\"HIDDEN\" NAME=\"create\" VALUE=\"bla\">\n                    <INPUT\n                            TYPE=\"submit\"\n                            class=\"btn btn-primary\"\n                            ID=\"create_release\"\n                            data-test=\"create-release-button\"\n                            VALUE=\"<?php echo $is_update ? $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'edit_release')) : $hp->purify($GLOBALS['Language']->getText('file_admin_qrs', 'release_file')); ?>\"\n                    >\n                    <?php\n                        $cancel_url = \"/file/showfiles.php?\" . http_build_query(\n                            ['group_id'   => $group_id, 'show_release_id' => $release->getReleaseID()]\n                        );\n\n                        echo '<a class=\"btn\" ID=\"cancel_release\" name=\"cancel\" href=\"' . $cancel_url . '\">' .\n                            $hp->purify($GLOBALS['Language']->getText('global', 'btn_cancel'))\n                        . '</a>';\n                    ?>\n                </TD>\n            </TR>\n        </TABLE>\n    </FORM>\n\n    <?php\n\n    file_utils_footer([]);\n}\n\nfunction frs_process_release_form($is_update, $request, $group_id, $title, $url)\n{\n    global $package_factory, $release_factory, $files_factory;\n\n    $project = ProjectManager::instance()->getProject($group_id);\n\n    //get and filter all inputs from $request\n    $release     = [];\n    $res         = $request->get('release');\n    $vName       = new Valid_String();\n    $vPackage_id = new Valid_UInt();\n    $vStatus_id  =  new Valid_UInt();\n\n    if (\n        $vName->validate($res['name']) &&\n        $vPackage_id->validate($res['package_id']) &&\n        $vStatus_id->validate($res['status_id'])\n    ) {\n        $release['status_id']  = $res['status_id'];\n        $release['name']       = $res['name'];\n        $release['package_id'] = $res['package_id'];\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_update_failed'));\n        $GLOBALS['Response']->redirect('/file/showfiles.php?group_id=' . $group_id);\n    }\n\n    $um   = UserManager::instance();\n    $user = $um->getCurrentUser();\n\n    $vDate = new Valid_String();\n    if ($vDate->validate($res['date'])) {\n        $release['date'] = $res['date'];\n    } else {\n        $release['date'] = \"\";\n    }\n\n    $vRelease_notes = new Valid_Text();\n    if ($vRelease_notes->validate($res['release_notes'])) {\n        $release['release_notes'] = $res['release_notes'];\n    } else {\n        $release['release_notes'] = \"\";\n    }\n\n    $vChange_log = new Valid_Text();\n    if ($vChange_log->validate($res['change_log'])) {\n        $release['change_log'] = $res['change_log'];\n    } else {\n        $release['change_log'] = \"\";\n    }\n\n    if ($request->valid(new Valid_String('js'))) {\n        $js = $request->get('js');\n    } else {\n        $js = \"\";\n    }\n\n    if ($request->validArray(new Valid_String('ftp_file'))) {\n        $ftp_file = $request->get('ftp_file');\n    } else {\n        $ftp_file = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('file_processor'))) {\n        $file_processor = $request->get('file_processor');\n    } else {\n        $file_processor = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('file_type'))) {\n        $file_type = $request->get('file_type');\n    } else {\n        $file_type = [];\n    }\n\n    if ($request->validArray(new Valid_String('reference_md5'))) {\n        $reference_md5 = $request->get('reference_md5');\n    } else {\n        $reference_md5 = [];\n    }\n\n    if ($request->validArray(new Valid_String('comment'))) {\n        $comment = $request->get('comment');\n    } else {\n        $comment = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('ftp_file_processor'))) {\n        $ftp_file_processor = $request->get('ftp_file_processor');\n    } else {\n        $ftp_file_processor = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('ftp_file_type'))) {\n        $ftp_file_type = $request->get('ftp_file_type');\n    } else {\n        $ftp_file_type = [];\n    }\n\n    if ($request->validArray(new Valid_String('ftp_reference_md5'))) {\n        $ftp_reference_md5 = $request->get('ftp_reference_md5');\n    } else {\n        $ftp_reference_md5 = [];\n    }\n\n    if ($request->valid(new Valid_String('release_news_subject'))) {\n        $release_news_subject = $request->get('release_news_subject');\n    } else {\n        $release_news_subject = \"\";\n    }\n\n    if ($request->valid(new Valid_Text('release_news_details'))) {\n        $release_news_details = $request->get('release_news_details');\n    } else {\n        $release_news_details = \"\";\n    }\n\n    if ($request->valid(new Valid_WhiteList('private_news', [0, 1]))) {\n        $private_news = $request->get('private_news');\n    } else {\n        $private_news = 0;\n    }\n\n    if ($project->usesService(Service::NEWS) && $request->valid(new Valid_WhiteList('release_submit_news', [0, 1]))) {\n        $release_submit_news = (int) $request->get('release_submit_news');\n    } else {\n        $release_submit_news = 0;\n    }\n\n    if ($request->valid(new Valid_WhiteList('notification', [0, 1]))) {\n        $notification = $request->get('notification');\n    } else {\n        $notification = 0;\n    }\n\n    if ($is_update) {\n        if ($request->validArray(new Valid_UInt('release_files_to_delete'))) {\n            $release_files_to_delete = $request->get('release_files_to_delete');\n        } else {\n            $release_files_to_delete = [];\n        }\n        $release_links_to_delete = [];\n        if ($request->validArray(new Valid_UInt('release_links_to_delete'))) {\n            $release_links_to_delete = $request->get('release_links_to_delete');\n        }\n\n        if ($request->validArray(new Valid_UInt('release_files'))) {\n            $release_files = $request->get('release_files');\n        } else {\n            $release_files = [];\n        }\n\n        if ($request->validArray(new Valid_UInt('release_file_processor'))) {\n            $release_file_processor = $request->get('release_file_processor');\n        } else {\n            $release_file_processor = [];\n        }\n\n        if ($request->validArray(new Valid_UInt('release_file_type'))) {\n            $release_file_type = $request->get('release_file_type');\n        } else {\n            $release_file_type = [];\n        }\n\n        if ($request->validArray(new Valid_String('release_reference_md5'))) {\n            $release_reference_md5 = $request->get('release_reference_md5');\n        } else {\n            $release_reference_md5 = [];\n        }\n        if ($request->validArray(new Valid_UInt('new_release_id'))) {\n            $new_release_id = $request->get('new_release_id');\n        } else {\n            $new_release_id = [];\n        }\n\n        if ($request->validArray(new Valid_String('release_time'))) {\n            $release_time = $request->get('release_time');\n        } else {\n            $release_time = [];\n        }\n\n        if ($request->validArray(new Valid_String('reference_md5'))) {\n            $reference_md5 = $request->get('reference_md5');\n        } else {\n            $reference_md5 = [];\n        }\n\n        if ($request->validArray(new Valid_Text('release_comment'))) {\n            $release_comment = $request->get('release_comment');\n        } else {\n            $release_comment = [];\n        }\n\n        if ($request->valid(new Valid_UInt('id'))) {\n            $release['release_id'] = $request->get('id');\n        } else {\n            exit;\n        }\n    }\n\n    $warning = [];\n    $error   = [];\n    $info    = [];\n\n    $validator = new FRSValidator();\n\n    if ($is_update) {\n        $valid = $validator->isValidForUpdate($release, $group_id);\n    } else {\n        $valid = $validator->isValidForCreation($release, $group_id);\n    }\n    if ($valid) {\n        //uplaod release_notes and change_log if needed\n        $data_uploaded = false;\n        if (isset($_FILES['uploaded_change_log']) && ! $_FILES['uploaded_change_log']['error']) {\n            $code = addslashes(fread(fopen($_FILES['uploaded_change_log']['tmp_name'], 'r'), \\filesize($_FILES['uploaded_change_log']['tmp_name'])));\n            if ((strlen($code) > 0) && (strlen($code) < ForgeConfig::get('sys_max_size_upload'))) {\n                //size is fine\n                $info[]                = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_uploaded');\n                $data_uploaded         = true;\n                $release['change_log'] = $code;\n            } else {\n                //too big or small\n                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'length_err', ForgeConfig::get('sys_max_size_upload'));\n            }\n        }\n        if (isset($_FILES['uploaded_release_notes']) && ! $_FILES['uploaded_release_notes']['error']) {\n            $code = addslashes(fread(fopen($_FILES['uploaded_release_notes']['tmp_name'], 'r'), \\filesize($_FILES['uploaded_release_notes']['tmp_name'])));\n            if ((strlen($code) > 0) && (strlen($code) < ForgeConfig::get('sys_max_size_upload'))) {\n                //size is fine\n                if (! $data_uploaded) {\n                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_uploaded');\n                }\n                $release['release_notes'] = $code;\n            } else {\n                //too big or small\n                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'length_err', ForgeConfig::get('sys_max_size_upload'));\n            }\n        }\n\n        if ($is_update) {\n            // make sure that we don't change the date by error because of timezone reasons.\n            // eg: release created in India (GMT +5:30) at 2004-06-03.\n            // MLS in Los Angeles (GMT -8) changes the release notes\n            // the release_date that we showed MLS is 2004-06-02.\n            // with mktime(0,0,0,2,6,2004); we will change the unix time in the database\n            // and the people in India will discover that their release has been created on 2004-06-02\n            $rel = $release_factory->getFRSReleaseFromDb($release['release_id']);\n            if (format_date('Y-m-d', $rel->getReleaseDate()) == $release['date']) {\n                // the date didn't change => don't update it\n                $unix_release_time = $rel->getReleaseDate();\n            } else {\n                $date_list         = explode(\"-\", $release['date'], 3);\n                $unix_release_time = mktime(0, 0, 0, $date_list[1], $date_list[2], $date_list[0]);\n            }\n        } else {\n            //parse the date\n            $date_list         = explode(\"-\", $release['date'], 3);\n            $unix_release_time = mktime(0, 0, 0, $date_list[1], $date_list[2], $date_list[0]);\n        }\n\n        //now we create or update the release\n        $array =  [\n            'release_date' => $unix_release_time,\n            'name' => $release['name'],\n            'status_id' => $release['status_id'],\n            'package_id' => $release['package_id'],\n            'notes' => $release['release_notes'],\n            'changes' => $release['change_log'],\n        ];\n        if ($is_update) {\n            $array['release_id'] = $release['release_id'];\n        }\n        $release_id = 0;\n\n        if ($is_update) {\n            $res = $release_factory->update($array);\n            if (! $res) {\n                $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_update_failed');\n            } else {\n                $release_id   = $array['release_id'];\n                $info_success = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_updated', $release['name']);\n            }\n        } else {\n            $res = $release_factory->create($array);\n            if (! $res) {\n                $error[] =  $GLOBALS['Language'] > getText('file_admin_editreleases', 'add_rel_fail');\n                //insert failed - go back to definition screen\n            } else {\n                //release added - now show the detail page for this new release\n                $release_id   = $res;\n                $rel          = $release_factory->getFRSReleaseFromDb($release_id);\n                $info_success = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_added');\n            }\n        }\n        if ($res && isset($rel)) {\n            // extract cross references\n            $reference_manager = ReferenceManager::instance();\n            $reference_manager->extractCrossRef($release['release_notes'], $release_id, ReferenceManager::REFERENCE_NATURE_RELEASE, $group_id);\n            $reference_manager->extractCrossRef($release['change_log'], $release_id, ReferenceManager::REFERENCE_NATURE_RELEASE, $group_id);\n\n            //set the release permissions\n            $ugroups = [];\n            if ($request->get('ugroups')) {\n                $ugroups = $request->get('ugroups');\n            }\n            /** @psalm-suppress DeprecatedFunction */\n            [$return_code, $feedbacks] = permission_process_selection_form($group_id, 'RELEASE_READ', $release_id, $ugroups);\n            if (! $return_code) {\n                $error[] = $GLOBALS['Language']->getText('file_admin_editpackages', 'perm_update_err');\n                $error[] = $feedbacks;\n            }\n\n            //submit news if requested\n            if ($release_id && user_ismember($group_id, 'A') && $release_submit_news) {\n                require_once __DIR__ . '/../news/news_utils.php';\n                news_submit($group_id, $release_news_subject, $release_news_details, $private_news, false);\n            }\n\n            // Send notification\n            if ($notification) {\n                $count = $release_factory->emailNotification($rel);\n                if ($count === false) {\n                    $error[] =  $GLOBALS['Language']->getText('global', 'mail_failed', [\n                        ForgeConfig::get('sys_email_admin'),\n                    ]);\n                } else {\n                    if ($count > 0) {\n                        $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'email_sent', $count);\n                    }\n                }\n            }\n\n            if (isset($release_files_to_delete, $release_files) && $is_update) {\n                $files = $rel->getFiles();\n\n                //remove files\n                foreach ($release_files_to_delete as $rel_file) {\n                    $res   = $files_factory->getFRSFileFromDb($rel_file);\n                    $fname = $res->getFileName();\n                    $res   = $files_factory->delete_file($group_id, $rel_file);\n                    if ($res == 0) {\n                        $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'f_not_yours', basename($fname));\n                    } else {\n                        $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_deleted', basename($fname));\n                    }\n                }\n\n                //update files\n                $index = 0;\n                foreach ($release_files as $rel_file) {\n                    if (empty($release_files_to_delete) || ! in_array($rel_file, $release_files_to_delete)) {\n                        $package_id = $release['package_id'];\n                        $fname      = $files[$index]->getFileName();\n                        $list       = explode('/', $fname);\n                        $fname      = $list[sizeof($list) - 1];\n                        if (! isset($new_release_id)) {\n                            continue;\n                        }\n                        if ($new_release_id[$index] != $release_id) {\n                            //changing to a different release for this file\n                            //see if the new release is valid for this project\n                            $res2 = $release_factory->getFRSReleaseFromDb($new_release_id[$index], $group_id);\n                            if (! $res2 || count($res2) < 1) {\n                                //release not found for this project\n                                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_not_yours', $fname);\n                            } else {\n                                $package_id = $res2->getPackageID();\n                            }\n                        }\n                        if ($new_release_id[$index] == $release_id || (isset($res2) && $res2)) {\n                            if (! isset($release_time)) {\n                                continue;\n                            }\n                            if (! preg_match(\"/[0-9]{4}-[0-9]{2}-[0-9]{2}/\", $release_time[$index])) {\n                                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_not_parsed_file', $fname);\n                            } else {\n                                $res2 = $files_factory->getFRSFileFromDb($rel_file);\n\n                                if (format_date('Y-m-d', $res2->getReleaseTime()) == $release_time[$index]) {\n                                    $unix_release_time = $res2->getReleaseTime();\n                                } else {\n                                    $date_list = explode(\"-\", $release_time[$index], 3);\n                                    assert(isset($date_list[1], $date_list[2], $date_list[0]));\n                                    $unix_release_time = mktime(0, 0, 0, (int) $date_list[1], (int) $date_list[2], (int) $date_list[0]);\n                                }\n                                if (! isset($release_file_type, $release_file_processor, $release_comment, $release_reference_md5)) {\n                                    continue;\n                                }\n\n                                $array =  [\n                                    'release_id'    => $new_release_id[$index],\n                                    'release_time'  => $unix_release_time,\n                                    'type_id'       => $release_file_type[$index],\n                                    'processor_id'  => $release_file_processor[$index],\n                                    'file_id'       => $rel_file,\n                                    'comment'       => $release_comment[$index],\n                                    'filename'      => 'p' . $package_id . '_r' . $new_release_id[$index] . '/' . $fname,\n                                    'filepath'      => 'p' . $package_id . '_r' . $new_release_id[$index] . '/' . $fname . '_' . $unix_release_time,\n                                ];\n                                if ($release_reference_md5[$index] && $release_reference_md5[$index] != '') {\n                                    $array['reference_md5'] = $release_reference_md5[$index];\n                                }\n                                $res = $files_factory->update($array);\n                                if ($res) {\n                                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_updated', $fname);\n                                }\n                            }\n                        }\n                    }\n                    $index++;\n                }\n            }\n\n            if (! empty($release_links_to_delete)) {\n                $uploaded_links_deletor = new \\Tuleap\\FRS\\UploadedLinkDeletor(new UploadedLinksDao(), FRSLog::instance());\n                $uploaded_links_deletor->deleteByIDsAndRelease($release_links_to_delete, $rel, $user);\n            }\n\n            $uploaded_links_updater   = new UploadedLinksUpdater(new UploadedLinksDao(), FRSLog::instance());\n            $uploaded_links_formatter = new UploadedLinksRequestFormatter();\n            try {\n                $release_links = $uploaded_links_formatter->formatFromRequest($request);\n                $uploaded_links_updater->update($release_links, $user, $rel, $rel->getReleaseDate());\n            } catch (UploadedLinksInvalidFormException $e) {\n                $error[] = _('An error occurred in form submission, a link is not valid. Please retry.');\n            }\n\n            $http_files_processor_type_list =  [];\n            $ftp_files_processor_type_list  =  [];\n            if (isset($js) && $js == 'no_js') {\n                //if javascript is not allowed, there is maximum one file to upload\n                // TODO : fix warnings due to array instead of string for \"file_processor\", \"file_type\" & \"reference_md5\"\n                if ($ftp_file[0] != -1) {\n                    $ftp_files_processor_type_list[] =  [\n                        'name'          => $ftp_file[0],\n                        'processor'     => $file_processor,\n                        'type'          => $file_type,\n                        'reference_md5' => $reference_md5,\n                        'comment'       => $comment,\n                    ];\n                } elseif (trim($_FILES['file']['name'][0]) != '') {\n                    $http_files_processor_type_list[] =  [\n                        'error'         => $_FILES['file']['error'][0],\n                        'name'          => stripslashes($_FILES['file']['name'][0]),\n                        'tmp_name'      => $_FILES['file']['tmp_name'][0],\n                        'processor'     => $file_processor,\n                        'type'          => $file_type,\n                        'reference_md5' => $reference_md5,\n                        'comment'       => $comment,\n                    ];\n                }\n            } else {\n                //get http files with the associated processor type and file type in allowed javascript case\n                $nb_files = isset($_FILES['file']) ? count($_FILES['file']['name']) : 0;\n                for ($i = 0; $i < $nb_files; $i++) {\n                    if (trim($_FILES['file']['name'][$i]) != '') {\n                        $http_files_processor_type_list[] =  [\n                            'error'         => $_FILES['file']['error'][$i],\n                            'name'          => stripslashes($_FILES['file']['name'][$i]),\n                            'tmp_name'      => $_FILES['file']['tmp_name'][$i],\n                            'processor'     => $file_processor[$i],\n                            'type'          => $file_type[$i],\n                            'reference_md5' => $reference_md5[$i],\n                            'comment'       => $comment[$i],\n                        ];\n                    }\n                }\n                //remove hidden ftp_file input (if the user let the select boxe on --choose file)\n                $index = 0;\n                foreach ($ftp_file as $file) {\n                    if (trim($file) != '') {\n                        $ftp_files_processor_type_list[] =  [\n                            'name' => $file,\n                            'processor' => $ftp_file_processor[$index],\n                            'type' => $ftp_file_type[$index],\n                            'reference_md5' => $ftp_reference_md5[$index],\n                        ];\n                        $index++;\n                    }\n                }\n            }\n\n            if (count($http_files_processor_type_list) > 0 || count($ftp_files_processor_type_list) > 0) {\n                //see if this release belongs to this project\n                $res1 = $release_factory->getFRSReleaseFromDb($release_id, $group_id);\n                if ($res1 === null) {\n                    //release not found for this project\n                    $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_not_yours');\n                } else {\n                    $addingFiles = false;\n                    //iterate and add the http files to the frs_file table\n                    foreach ($http_files_processor_type_list as $file) {\n                        $filename = $file['name'];\n                        if (isset($file['error'])) {\n                            switch ($file['error']) {\n                                case UPLOAD_ERR_OK:\n                                    // all is OK\n                                    break;\n                                case UPLOAD_ERR_INI_SIZE:\n                                case UPLOAD_ERR_FORM_SIZE:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_size', $file['error']);\n                                    break;\n                                case UPLOAD_ERR_PARTIAL:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_partial', $file['error']);\n                                    break;\n                                case UPLOAD_ERR_NO_FILE:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_nofile', $file['error']);\n                                    break;\n                                default:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_unknown', $file['error']);\n                            }\n                        }\n                        if (is_uploaded_file($file['tmp_name'])) {\n                            $uploaddir  = $files_factory->getSrcDir($request->getProject());\n                            $uploadfile = $uploaddir . \"/\" . basename($filename);\n                            if (! file_exists($uploaddir) || ! is_writable($uploaddir) || ! move_uploaded_file($file['tmp_name'], $uploadfile)) {\n                                $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'not_add_file') . \": \" . basename($filename);\n                            } else {\n                                $newFile = new FRSFile();\n                                $newFile->setRelease($res1);\n                                $newFile->setFileName($filename);\n                                $newFile->setProcessorID($file['processor']);\n                                $newFile->setTypeID($file['type']);\n                                $newFile->setReferenceMd5($file['reference_md5']);\n                                $newFile->setUserId($user->getId());\n                                $newFile->setComment($file['comment']);\n                                try {\n                                    $files_factory->createFile($newFile);\n                                    $addingFiles = true;\n                                } catch (Exception $e) {\n                                    $error[] = $e->getMessage();\n                                }\n                            }\n                        } else {\n                            $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'not_add_file') . \": \" . basename($filename);\n                        }\n                    }\n\n                    //iterate and add the ftp files to the frs_file table\n                    foreach ($ftp_files_processor_type_list as $file) {\n                        $filename = $file['name'];\n\n                        $newFile = new FRSFile();\n                        $newFile->setRelease($res1);\n                        $newFile->setFileName($filename);\n                        $newFile->setProcessorID($file['processor']);\n                        $newFile->setTypeID($file['type']);\n                        $newFile->setReferenceMd5($file['reference_md5']);\n                        $newFile->setUserId($user->getId());\n\n                        try {\n                            $files_factory->createFile($newFile, ~FRSFileFactory::COMPUTE_MD5);\n                            $addingFiles = true;\n                            $em          = EventManager::instance();\n                            $em->processEvent(Event::COMPUTE_MD5SUM, ['fileId' => $newFile->getFileID()]);\n                            $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'offline_md5', $filename);\n                        } catch (Exception $e) {\n                            $error[] = $e->getMessage();\n                        }\n                    }\n                }\n                if (isset($addingFiles) && $addingFiles) {\n                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'add_files');\n                }\n            }\n\n            $error_edit = '';\n            $params     = [\n                'release_id'      => $release_id,\n                'release_request' => $request->get('release'),\n                'error'           => &$error_edit,\n            ];\n\n            EventManager::instance()->processEvent(\n                'frs_process_edit_form',\n                $params\n            );\n\n            if ($error_edit) {\n                $error[] = $error_edit;\n            }\n        }\n    } else {\n        $error[] = $validator->getErrors();\n    }\n\n    foreach ($warning as $warning_message) {\n        $GLOBALS['Response']->addFeedback('warning', $warning_message);\n    }\n\n    foreach ($info as $info_message) {\n        $GLOBALS['Response']->addFeedback('info', $info_message);\n    }\n\n    if (count($error) === 0 && isset($info_success)) {\n        $GLOBALS['Response']->addFeedback('info', $info_success);\n        http_build_query(['group_id' => $group_id]);\n        $GLOBALS['Response']->redirect('/file/showfiles.php?' . http_build_query(\n            ['group_id'   => $group_id, 'show_release_id' => $release_id]\n        ));\n    } else {\n        foreach ($error as $error_message) {\n            $GLOBALS['Response']->addFeedback('error', $error_message);\n        }\n\n        $GLOBALS['Response']->redirect('/file/showfiles.php?group_id=' . urlencode($group_id));\n    }\n}\n\nfunction detectSpecialCharactersInName($name, $type)\n{\n    if (preg_match('/\\+/', $name)) {\n        $GLOBALS['Response']->addFeedback('warning', $GLOBALS['Language']->getText('file_showfiles', 'warn_chars', [$type, $name]));\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright (c) Enalean, 2016 - Present. All Rights Reserved.\n * Copyright (c) Xerox Corporation, Codendi Team, 2001-2009. All rights reserved\n *\n * This file is a part of Tuleap.\n *\n * Tuleap is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * Tuleap is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Tuleap. If not, see <http://www.gnu.org/licenses/>.\n */\n\nuse Tuleap\\FRS\\FRSPackageController;\nuse Tuleap\\FRS\\FRSValidator;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementDao;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementDisplay;\nuse Tuleap\\FRS\\LicenseAgreement\\LicenseAgreementFactory;\nuse Tuleap\\FRS\\UploadedLinksDao;\nuse Tuleap\\FRS\\UploadedLinksInvalidFormException;\nuse Tuleap\\FRS\\UploadedLinksRequestFormatter;\nuse Tuleap\\FRS\\UploadedLinksRetriever;\nuse Tuleap\\FRS\\UploadedLinksUpdater;\nuse Tuleap\\FRS\\UploadedLinkUpdateTablePresenter;\n\nfunction file_utils_header($params)\n{\n    global $group_id;\n\n    if (! array_key_exists('pv', $params) || ! $params['pv']) {\n        $project_manager = ProjectManager::instance();\n        $project         = $project_manager->getProject($group_id);\n\n        $service = $project->getService(Service::FILE);\n        if ($service !== null) {\n            assert($service instanceof ServiceFile);\n            $service->displayFRSHeader($project, $params['title']);\n        }\n    }\n}\n\nfunction file_utils_footer($params)\n{\n    site_project_footer($params);\n}\n\n/*\n\n The following functions are for the FRS (File Release System)\n They were moved here from project_admin_utils.php since they can\n now be used by non-admins (e.g. file releases admins)\n\n*/\n\n\n/*\n\n    pop-up box of supported frs statuses\n\n*/\n\nfunction frs_show_status_popup($name = 'status_id', $checked_val = \"xzxz\")\n{\n    global $Language;\n\n    $package_factory = new FRSPackageFactory();\n    $arr_id          = [$package_factory->STATUS_ACTIVE, $package_factory->STATUS_HIDDEN];\n    $arr_status      = [\n        $Language->getText('file_admin_editpackages', 'status_active'),\n        $Language->getText('file_admin_editpackages', 'status_hidden'),\n    ];\n\n    return html_build_select_box_from_arrays($arr_id, $arr_status, $name, $checked_val, false);\n}\n\n/*\n\n    pop-up box of supported frs filetypes\n\n*/\n\nfunction frs_show_filetype_popup($name = 'type_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of the available filetypes\n    */\n    global $FRS_FILETYPE_RES,$Language;\n    if (! isset($FRS_FILETYPE_RES)) {\n// LJ Sort by type_id added so that new extensions goes\n// LJ in the right place in the menu box\n        $FRS_FILETYPE_RES = db_query(\"SELECT * FROM frs_filetype ORDER BY type_id\");\n    }\n    return html_build_select_box($FRS_FILETYPE_RES, $name, $checked_val, true, $Language->getText('file_file_utils', 'must_choose_one'));\n}\n\n/*\n\n    pop-up box of supported frs processor options\n\n*/\n\nfunction frs_show_processor_popup($group_id, $name = 'processor_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of the available processors\n    */\n    global $FRS_PROCESSOR_RES,$Language;\n    if (! isset($FRS_PROCESSOR_RES)) {\n        $FRS_PROCESSOR_RES = db_query(\"SELECT * FROM frs_processor WHERE group_id=100 OR group_id=\" . db_ei($group_id) . \" ORDER BY `rank`\");\n    }\n    return html_build_select_box($FRS_PROCESSOR_RES, $name, $checked_val, true, $Language->getText('file_file_utils', 'must_choose_one'), false, '', false, '', false, '', CODENDI_PURIFIER_CONVERT_HTML);\n}\n\n\n/*\n\n    pop-up box of packages:releases for this group\n\n*/\n\nfunction frs_show_release_popup2($group_id, $name = 'release_id', $checked_val = \"xzxz\")\n{\n    /*\n        return a pop-up select box of releases for the project\n    */\n    $release_factory = new FRSReleaseFactory();\n    if (! $group_id) {\n        return $GLOBALS['Language']->getText('file_file_utils', 'g_id_err');\n    } else {\n        $hp  = Codendi_HTMLPurifier::instance();\n        $res = $release_factory->getFRSReleasesInfoListFromDb($group_id);\n        $p   = [];\n        foreach ($res as $release) {\n            $p[$release['package_name']][$release['release_id']] = $release['release_name'];\n        }\n\n        $select = '<select name=\"' . $hp->purify($name) . '\">';\n        foreach ($p as $package_name => $releases) {\n            $select .= '<optgroup label=\"' . $hp->purify($package_name) . '\">';\n            foreach ($releases as $id => $name) {\n                $select .= '<option value=\"' . $hp->purify($id) . '\" ' . ($id == $checked_val ? 'selected=\"selected\"' : '') . '>' . $hp->purify($name) . '</option>';\n            }\n            $select .= '</optgroup>';\n        }\n        $select .= '</select>';\n        return $select;\n    }\n}\n\nfunction file_utils_show_processors($result)\n{\n    global $group_id,$Language;\n    $hp   = Codendi_HTMLPurifier::instance();\n    $rows =  db_numrows($result);\n\n    $title_arr   = [];\n    $title_arr[] = $Language->getText('file_file_utils', 'proc_name');\n    $title_arr[] = $Language->getText('file_file_utils', 'proc_rank');\n    $title_arr[] = $Language->getText('file_file_utils', 'del');\n\n    echo html_build_list_table_top($title_arr);\n\n    for ($j = 0; $j < $rows; $j++) {\n        $proc_id   = db_result($result, $j, 'processor_id');\n        $proc_name = db_result($result, $j, 'name');\n        $proc_rank = db_result($result, $j, 'rank');\n        $gr_id     = db_result($result, $j, 'group_id');\n\n        echo '<tr class=\"' . html_get_alt_row_color($j) . '\">' . \"\\n\";\n\n        if ($gr_id == \"100\") {\n            echo '<td>' . $hp->purify($proc_name) . '</td>';\n        } else {\n            echo '<td><A HREF=\"/file/admin/editproc.php?group_id=' . $group_id . '&proc_id=' . $proc_id . '\" title=\"' . $hp->purify($proc_id . ' - ' . $proc_name) . '\">' . $hp->purify($proc_name) . '</td>';\n        }\n\n        echo '<td>' . $proc_rank . \"</td>\\n\";\n\n        if ($gr_id == \"100\") {\n            // pre-defined processors are not manageable\n            echo '<TD align=center>-</TD>';\n        } else {\n            echo '<TD align=center>' .\n            '<a href=\"/file/admin/manageprocessors.php?mode=delete&group_id=' . $group_id . '&proc_id=' . $proc_id . '\" ' .\n            '\" onClick=\"return confirm(\\'' . $Language->getText('file_file_utils', 'del_proc') . '\\')\">' .\n            '<IMG SRC=\"' . util_get_image_theme(\"ic/trash.png\") . '\" HEIGHT=\"16\" WIDTH=\"16\" BORDER=\"0\" ALT=\"' . $Language->getText('file_file_utils', 'del') . '\"></A></TD>';\n        }\n\n        echo \"</tr>\";\n    }\n    echo \"</table>\";\n}\n\nfunction file_utils_add_proc($pname, $prank)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'INSERT INTO frs_processor' .\n           ' (name,group_id,`rank`)' .\n           ' VALUES' .\n           '(\"%s\",%d,%d)',\n        db_es($pname),\n        db_ei($group_id),\n        db_ei($prank)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'add_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'add_proc_fail'));\n    }\n}\n\nfunction file_utils_update_proc($pid, $pname, $prank)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'UPDATE frs_processor' .\n           ' SET name = \"%s\",`rank` = %d' .\n           ' WHERE processor_id=%d' .\n           ' AND group_id=%d',\n        db_es($pname),\n        db_ei($prank),\n        db_ei($pid),\n        db_ei($group_id)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'update_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'update_proc_fail'));\n    }\n}\n\nfunction file_utils_delete_proc($pid)\n{\n    global $group_id,$Language;\n\n    $sql    = sprintf(\n        'DELETE FROM frs_processor' .\n           ' WHERE group_id=%d' .\n           ' AND processor_id=%d',\n        db_ei($group_id),\n        db_ei($pid)\n    );\n    $result = db_query($sql);\n\n    if ($result) {\n        $GLOBALS['Response']->addFeedback('info', $Language->getText('file_file_utils', 'delete_proc_success'));\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $Language->getText('file_file_utils', 'delete_proc_fail'));\n    }\n}\n\nfunction frs_display_package_form(FRSPackage $package, $title, $url, $siblings)\n{\n    $hp                        = Codendi_HTMLPurifier::instance();\n    $project                   = ProjectManager::instance()->getProject($package->getGroupID());\n    $license_agreement_display = new LicenseAgreementDisplay(\n        $hp,\n        TemplateRendererFactory::build(),\n        new LicenseAgreementFactory(\n            new LicenseAgreementDao(),\n        ),\n    );\n\n    file_utils_header(['title' => $title]);\n    echo '<h3>' . $hp->purify($title, CODENDI_PURIFIER_CONVERT_HTML) . '</h3>\n\n    <form action=\"' . $url . '\" method=\"post\">\n    <table>\n    <tr><th>' . $GLOBALS['Language']->getText('file_admin_editpackages', 'p_name') . ':</th>  <td>\n        <input type=\"text\" name=\"package[name]\" data-test=\"frs-create-package\" CLASS=\"textfield_small\" value=\"' .\n        $hp->purify(\n            util_unconvert_htmlspecialchars($package->getName()),\n            CODENDI_PURIFIER_CONVERT_HTML\n        ) . '\">';\n    //{{{ Rank\n    $nb_siblings = count($siblings);\n    if ($nb_siblings && ($nb_siblings > 1 || $siblings[0] != $package->getPackageId())) {\n        echo '</td></tr>';\n        echo '<tr><th>' . $GLOBALS['Language']->getText('file_admin_editpackages', 'rank_on_screen') . ':</th><td>';\n        echo $GLOBALS['HTML']->selectRank($package->getPackageId(), $package->getRank(), $siblings, ['name' => 'package[rank]']);\n    } else {\n        echo '<input type=\"hidden\" name=\"package[rank]\" value=\"0\" />';\n    }\n    echo '</td></tr>';\n    //}}}\n    echo '<tr><th>' . $GLOBALS['Language']->getText('global', 'status') . ':</th>  <td data-test=\"status\">' . frs_show_status_popup('package[status_id]', $package->getStatusID()) . '</td></tr>';\n    echo $license_agreement_display->getPackageEditSelector($package, $project);\n\n     //We cannot set permission on creation for now\n    if ($package->getPackageID()) {\n        echo '<tr style=\"vertical-align:top\"><th>' . 'Permissions' . ':</th><td>';\n        $package_controller = new FRSPackageController(\n            FRSPackageFactory::instance(),\n            FRSReleaseFactory::instance(),\n            new User_ForgeUserGroupFactory(new UserGroupDao()),\n            PermissionsManager::instance(),\n            new LicenseAgreementFactory(\n                new LicenseAgreementDao()\n            ),\n            Codendi_HTMLPurifier::instance(),\n        );\n\n        $package_controller->displayUserGroups($project, FRSPackage::PERM_READ, $package->getPackageID());\n        echo '</td></tr>';\n    }\n     echo '<tr><td></td><td> <br>\n                <input class=\"btn btn-primary\"\n                       type=\"submit\"\n                       name=\"submit\"\n                       value=\"' . $GLOBALS['Language']->getText('global', 'btn_submit') . '\"\n                       data-test=\"frs-create-package-button\"\n                 /> ';\n     echo '<input class=\"btn\" type=\"submit\" name=\"cancel\" value=\"' . $GLOBALS['Language']->getText('global', 'btn_cancel') . '\" /></td></tr></table>\n     </FORM>';\n\n     file_utils_footer([]);\n}\n\nfunction frs_display_release_form($is_update, &$release, $group_id, $title, $url)\n{\n    global $package_factory, $release_factory, $files_factory;\n    $hp = Codendi_HTMLPurifier::instance();\n    if (is_array($release)) {\n        if (isset($release['date'])) {\n            $release_date = $release['date'];\n        }\n        $release = new FRSRelease($release);\n    }\n    if ($is_update) {\n        $files = $release->getFiles();\n        if (count($files) > 0) {\n            for ($i = 0; $i < count($files); $i++) {\n                if (! $files_factory->compareMd5Checksums($files[$i]->getComputedMd5(), $files[$i]->getReferenceMd5())) {\n                    $GLOBALS['Response']->addFeedback('error', $GLOBALS['Language']->getText('file_admin_editreleases', 'md5_fail', [basename($files[$i]->getFileName()), $files[$i]->getComputedMd5()]));\n                }\n            }\n        }\n    }\n\n    file_utils_header([\n        'title' => $GLOBALS['Language']->getText(\n            'file_admin_editreleases',\n            'release_new_file_version'\n        ),\n    ]);\n\n    echo '<H3>' . $hp->purify($title, CODENDI_PURIFIER_CONVERT_HTML) . '</H3>';\n    $sql          = \"SELECT * FROM frs_processor WHERE (group_id = 100 OR group_id = \" . db_ei($group_id) . \") ORDER BY `rank`\";\n    $result       = db_query($sql);\n    $processor_id = util_result_column_to_array($result, 0);\n    foreach ($processor_id as $key => $id) {\n        $processor_id[$key] = $hp->purify($id, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $processor_name = util_result_column_to_array($result, 1);\n    foreach ($processor_name as $key => $value) {\n        $processor_name[$key] = $hp->purify($value, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $sql     = \"SELECT * FROM frs_filetype ORDER BY type_id\";\n    $result1 = db_query($sql);\n    $type_id = util_result_column_to_array($result1, 0);\n    foreach ($type_id as $key => $id) {\n        $type_id[$key] = $hp->purify($id, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $type_name = util_result_column_to_array($result1, 1);\n    foreach ($type_name as $key => $name) {\n        $type_name[$key] = $hp->purify($name, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $url_news = \"/file/showfiles.php?group_id=\" . $group_id;\n    $script   = \"var processor_id = ['\" . implode(\"', '\", $processor_id) . \"'];\";\n    $script  .= \"var processor_name = ['\" . implode(\"', '\", $processor_name) . \"'];\";\n    $script  .= \"var type_id = ['\" . implode(\"', '\", $type_id) . \"'];\";\n    $script  .= \"var type_name = ['\" . implode(\"', '\", $type_name) . \"'];\";\n    $script  .= \"var group_id = \" . $hp->purify($group_id, CODENDI_PURIFIER_JS_QUOTE) . \";\";\n    $script  .= \"var relname = '\" . $hp->purify($GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'relname'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var choose = '\" . $hp->purify($GLOBALS['Language']->getText('file_file_utils', 'must_choose_one'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var browse = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'browse'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var local_file = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'local_file'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var scp_ftp_files = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'scp_ftp_files'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var upload_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'upload'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var add_file_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'add_file'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var add_change_log_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'add_change_log'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var view_change_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'view_change'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var refresh_files_list = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'refresh_file_list'), CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n    $script  .= \"var release_mode = '\" . $hp->purify($is_update ? 'edition' : 'creation', CODENDI_PURIFIER_JS_QUOTE) . \"';\";\n\n    if ($is_update) {\n        $pm  = PermissionsManager::instance();\n        $dar = $pm->getAuthorizedUgroups($release->getReleaseID(), FRSRelease::PERM_READ);\n\n        $ugroup_factory      = new User_ForgeUserGroupFactory(new UserGroupDao());\n        $all_project_ugroups = $ugroup_factory->getAllForProject($release->getProject());\n        $project_names       = [];\n        foreach ($all_project_ugroups as $project_ugroup) {\n            $project_names[$project_ugroup->getId()] = $project_ugroup->getName();\n        }\n\n        $ugroups_name = [];\n        foreach ($dar as $row) {\n            if (! isset($row['ugroup_id'], $project_names[$row['ugroup_id']])) {\n                continue;\n            }\n            $ugroups_name[] = $hp->purify($project_names[$row['ugroup_id']], CODENDI_PURIFIER_JS_QUOTE);\n        }\n        $script .= \"var ugroups_name = ' \" . implode(\", \", $ugroups_name) . \" ';\";\n        $script .= \"var default_permissions_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_perm'), CODENDI_PURIFIER_JS_QUOTE) . \" ';\";\n    } else {\n        $script .= \"var default_permissions_text = '\" . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'default_permissions'), CODENDI_PURIFIER_JS_QUOTE) . \" ';\";\n    }\n    $GLOBALS['Response']->includeFooterJavascriptSnippet($script);\n    //set variables for news template\n    $relname = $GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'relname');\n    if (! $is_update) {\n        echo '<p>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'contain_multiple_files')) . '</p>';\n    }\n    ?>\n\n    <FORM id=\"frs_form\" NAME=\"frsRelease\" ENCTYPE=\"multipart/form-data\" METHOD=\"POST\" ACTION=\"<?php echo $url; ?>\" CLASS=\"form-inline\">\n        <INPUT TYPE=\"hidden\" name=\"MAX_FILE_SIZE\" value=\"<?php echo $hp->purify(ForgeConfig::get('sys_max_size_upload')); ?>\">\n        <input type=\"hidden\" name=\"postReceived\" value=\"\" />\n        <?php\n        if ($release->getReleaseId()) {\n            echo '<input type=\"hidden\" id=\"release_id\" name=\"release[release_id]\" value=\"' . $hp->purify($release->getReleaseId()) . '\" />';\n        }\n        ?>\n        <TABLE BORDER=\"0\" width=\"100%\">\n        <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_properties')); ?></LEGEND>\n        <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n            <TR>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editpackages', 'p_name')); ?>:</B>\n                </TD>\n                <TD>\n    <?php\n    $res  = $package_factory->getFRSPackagesFromDb($group_id);\n    $rows = count($res);\n    if (! $res || $rows < 1) {\n        echo '<p class=\"highlight\">' . $hp->purify($GLOBALS['Language']->getText('file_admin_qrs', 'no_p_available')) . '</p>';\n    } else {\n        echo '<SELECT NAME=\"release[package_id]\" id=\"package_id\">';\n        for ($i = 0; $i < $rows; $i++) {\n            echo '<OPTION VALUE=\"' . $hp->purify($res[$i]->getPackageID()) . '\"';\n            if ($res[$i]->getPackageID() == $release->getPackageId()) {\n                echo ' selected';\n            }\n            echo '>' . $hp->purify(util_unconvert_htmlspecialchars($res[$i]->getName()), CODENDI_PURIFIER_CONVERT_HTML) . '</OPTION>';\n        }\n        echo '</SELECT>';\n    }\n    ?>\n                </TD><td></td>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_name')); ?>: <span class=\"highlight\"><strong>*</strong></span></B>\n                </TD>\n                <TD>\n                    <INPUT\n                            TYPE=\"TEXT\"\n                            id=\"release_name\"\n                            name=\"release[name]\"\n                            onBlur=\"update_news()\"\n                            data-test=\"release-name\"\n                            value=\"<?php echo $hp->purify($release->getName()); ?>\"\n                    >\n                </TD>\n            </TR>\n            <TR>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_date')); ?>:</B>\n                </TD>\n                <TD>\n                <?php echo $GLOBALS['HTML']->getDatePicker('release_date', 'release[date]', isset($release_date) ? $hp->purify($release_date) : format_date('Y-m-d', $release->getReleaseDate())); ?>\n                </TD>\n                <td></td>\n                <TD>\n                    <B><?php echo $hp->purify($GLOBALS['Language']->getText('global', 'status')); ?>:</B>\n                </TD>\n                <TD>\n                    <?php\n\n                    print frs_show_status_popup($name = 'release[status_id]', $release->getStatusID()) . \"<br>\";\n                    ?>\n                </TD>\n            </TR>\n\n            <?php\n                $additional_info   = '';\n                $notes_in_markdown = false;\n\n                $params = [\n                    'release_id'        => $release->getReleaseId(),\n                    'additional_info'   => &$additional_info,\n                    'notes_in_markdown' => &$notes_in_markdown,\n                ];\n\n                EventManager::instance()->processEvent(\n                    'frs_edit_form_additional_info',\n                    $params\n                );\n\n            if ($additional_info) {\n                echo '<tr>';\n                echo $additional_info;\n                echo '</tr>';\n            }\n            ?>\n\n        </TABLE></FIELDSET>\n        </TD></TR>\n        <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_uploaded_files')); ?></LEGEND>\n    <?php\n\n    $titles   =  [];\n    $titles[] = $is_update ? $GLOBALS['Language']->getText('file_admin_editreleases', 'delete_col') : '';\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'filename');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'processor');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_type');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'md5sum');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'comment');\n    $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'user');\n    if ($is_update) {\n        $titles[] = $GLOBALS['Language']->getText('file_admin_editreleasepermissions', 'release');\n        $titles[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'release_date');\n    }\n    echo html_build_list_table_top($titles, false, false, false, 'files');\n    ?>\n            <tbody id=\"files_body\">\n\n    <?php\n        $files = $release->getFiles();\n    for ($i = 0; $i < count($files); $i++) {\n        $fname    = $files[$i]->getFileName();\n        $list     = explode('/', $fname);\n        $fname    = $list[sizeof($list) - 1];\n        $user_id  = $files[$i]->getUserID();\n        $userName = (isset($user_id)) ? UserManager::instance()->getUserById($files[$i]->getUserID())->getRealName() : \"\";\n        echo '<TR>';\n        echo '<TD><INPUT TYPE=\"CHECKBOX\" NAME=\"release_files_to_delete[]\" VALUE=\"' . $hp->purify($files[$i]->getFileID()) . '\"></TD>';\n        echo '<TD>' . $hp->purify($fname, CODENDI_PURIFIER_CONVERT_HTML) . '<INPUT TYPE=\"HIDDEN\" NAME=\"release_files[]\" VALUE=\"' . $hp->purify($files[$i]->getFileID()) . '\"></TD>';\n        echo '<TD>' . frs_show_processor_popup($group_id, $name = 'release_file_processor[]', $files[$i]->getProcessorID()) . '</TD>';\n        echo '<TD>' . frs_show_filetype_popup($name = 'release_file_type[]', $files[$i]->getTypeID()) . '</TD>';\n        //In case of difference between the inserted md5 and the computed one\n        //we dispaly an editable text field to let the user insert the right value\n        //to avoid the error message next time\n        $value = 'value = \"' . $hp->purify($files[$i]->getReferenceMd5()) . '\"';\n        if ($files_factory->compareMd5Checksums($files[$i]->getComputedMd5(), $files[$i]->getReferenceMd5())) {\n            $value = 'value = \"' . $hp->purify($files[$i]->getComputedMd5()) . '\" readonly=\"true\"';\n        }\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"release_reference_md5[]\" ' . $value . ' SIZE=\"36\" ></TD>';\n        $comment = $files[$i]->getComment();\n        echo '<TD><textarea NAME=\"release_comment[]\" cols=\"20\" rows=\"1\">' . $hp->purify($comment) . '</textarea></TD>';\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"user\" value = \"' . $hp->purify($userName) . '\" readonly=\"true\"></TD>';\n        echo '<TD>' . frs_show_release_popup2($group_id, $name = 'new_release_id[]', $files[$i]->getReleaseID()) . '</TD>';\n        echo '<TD><INPUT TYPE=\"TEXT\" NAME=\"release_time[]\" VALUE=\"' . $hp->purify(format_date('Y-m-d', $files[$i]->getReleaseTime())) . '\" SIZE=\"10\" MAXLENGTH=\"10\"></TD></TR>';\n    }\n        echo '<INPUT TYPE=\"HIDDEN\" id=\"nb_files\" NAME=\"nb_files\" VALUE=\"' . $hp->purify(count($files)) . '\">';\n    ?>\n\n                        <tr id=\"row_0\">\n                            <td></td>\n                            <td>\n                                <input type=\"hidden\" name=\"js\" value=\"no_js\"/>\n                                <select name=\"ftp_file[]\" id=\"ftp_file_0\">\n                                    <option value=\"-1\"><?php echo $hp->purify($GLOBALS['Language']->getText('file_file_utils', 'must_choose_one')); ?></option>\n    <?php\n\n    //iterate and show the files in the upload directory\n    $file_list    = $files_factory->getUploadedFileNames($release->getProject());\n    $file_list_js = [];\n    foreach ($file_list as $file) {\n        echo '<option value=\"' . $hp->purify($file) . '\">' . $hp->purify($file, CODENDI_PURIFIER_CONVERT_HTML) . '</option>';\n        $file_list_js[] = $hp->purify($file, CODENDI_PURIFIER_JS_QUOTE);\n    }\n    $GLOBALS['Response']->includeFooterJavascriptSnippet(\"var available_ftp_files = ['\" . implode(\"', '\", $file_list_js) . \"'];\");\n\n    ?>\n                                </select>\n\n                                <span id=\"or\">or</span>\n                                <input type=\"file\" name=\"file[]\" id=\"file_0\" />\n                            </td>\n                            <td>\n                                <?php print frs_show_processor_popup($group_id, $name = 'file_processor'); ?>\n                            </td>\n                            <td>\n                                <?php print frs_show_filetype_popup($name = 'file_type'); ?>\n                            </td>\n                            <td>\n                                <input name=\"reference_md5\" value=\"\" size=\"36\" type=\"TEXT\">\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <?php\n                echo '<span class=\"small\" style=\"color:#666\"><i>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'upload_file_msg', formatByteToMb(ForgeConfig::get('sys_max_size_upload')))) . '</i> </span>';\n\n                $renderer = TemplateRendererFactory::build()->getRenderer(\n                    ForgeConfig::get('codendi_dir') . '/src/templates/frs/'\n                );\n\n                $uploaded_links_retriever = new UploadedLinksRetriever(new UploadedLinksDao(), UserManager::instance());\n                $existing_links           = $uploaded_links_retriever->getLinksForRelease($release);\n\n                $uploaded_link_spresenter_builder = new \\Tuleap\\FRS\\UploadedLinkPresentersBuilder();\n                $existing_links_presenter         = $uploaded_link_spresenter_builder->build($existing_links);\n                $uploaded_links_create_presenter  = new UploadedLinkUpdateTablePresenter($existing_links_presenter);\n\n                echo $renderer->renderToString('uploaded-links-form', $uploaded_links_create_presenter);\n                ?>\n            </FIELDSET>\n            </TD></TR>\n            <TR><TD><FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_notes')); ?></LEGEND>\n            <?php\n            if ($notes_in_markdown) {\n                echo '<p class=\"help\">\n                            <i class=\"fa fa-info-circle\"></i>\n                            ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'notes_in_markdown')) . '\n                        </p>';\n            }\n            ?>\n            <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\" WIDTH=\"100%\">\n            <TR id=\"notes_title\">\n                <TD VALIGN=\"TOP\" width=\"10%\">\n                    <span id=\"release_notes\"><B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'release_notes')); ?>:  </B></span>\n                </TD>\n            </TR>\n            <TR id=\"upload_notes\">\n                <TD>\n                    <input id=\"uploaded_notes\" type=\"file\" name=\"uploaded_release_notes\"  size=\"30\">\n                </TD>\n            </TR>\n            <TR id=\"release_notes_area\">\n                <TD width=\"100%\">\n                    <TEXTAREA NAME=\"release[release_notes]\" rows=\"7\" cols=\"70\" data-test=\"release-note\"><?php echo $hp->purify($release->getNotes(), CODENDI_PURIFIER_CONVERT_HTML);?></TEXTAREA>\n                </TD>\n            </TR>\n            <TR id=\"change_log_title\">\n                <TD VALIGN=\"TOP\" width=\"10%\">\n                    <span id=\"change_log\"><B><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'change_log')); ?>:  </B></span>\n                </TD>\n            </TR>\n            <TR id=\"upload_change_log\">\n                <TD>\n                    <input type=\"file\" id=\"uploaded_change_log\" name=\"uploaded_change_log\"  size=\"30\">\n                </TD>\n            </TR>\n            <TR id=\"change_log_area\">\n                <TD width=\"40%\">\n                    <TEXTAREA ID=\"text_area_change_log\" NAME=\"release[change_log]\" ROWS=\"7\" COLS=\"70\"><?php echo $hp->purify($release->getChanges(), CODENDI_PURIFIER_CONVERT_HTML);?></TEXTAREA>\n                </TD>\n            </TR>\n            </TABLE></FIELDSET>\n            </TD></TR>\n            <TR>\n                <TD>\n                    <FIELDSET><LEGEND><?php echo $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_permissions')); ?></LEGEND>\n                        <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n\n                            <TR id=\"permissions\">\n                                <TD>\n                                    <DIV id=\"permissions_list\">\n                                        <?php\n                                        $project = ProjectManager::instance()->getProject($group_id);\n                                        if ($is_update) {\n                                            $release_controller = new FRSPackageController(\n                                                FRSPackageFactory::instance(),\n                                                FRSReleaseFactory::instance(),\n                                                new User_ForgeUserGroupFactory(new UserGroupDao()),\n                                                PermissionsManager::instance(),\n                                                new LicenseAgreementFactory(\n                                                    new LicenseAgreementDao()\n                                                ),\n                                                Codendi_HTMLPurifier::instance(),\n                                            );\n\n                                            $release_controller->displayUserGroups($project, FRSRelease::PERM_READ, $release->getReleaseID());\n                                        } else {\n                                            $package_controller = new FRSPackageController(\n                                                FRSPackageFactory::instance(),\n                                                FRSReleaseFactory::instance(),\n                                                new User_ForgeUserGroupFactory(new UserGroupDao()),\n                                                PermissionsManager::instance(),\n                                                new LicenseAgreementFactory(\n                                                    new LicenseAgreementDao()\n                                                ),\n                                                Codendi_HTMLPurifier::instance(),\n                                            );\n\n                                            $package_controller->displayUserGroups($project, FRSPackage::PERM_READ, $release->getPackageID());\n                                        }\n                                        ?>\n\n                                    </DIV>\n                                </TD>\n                            </TR>\n                        </TABLE>\n\n                    </FIELDSET>\n                </TD>\n            </TR>\n            <?php\n\n            $is_user_allowed_to_send_news = user_ismember($group_id, 'A') || user_ismember($group_id, 'N2') || user_ismember($group_id, 'N1');\n            if ($project->usesService(Service::NEWS) && $is_user_allowed_to_send_news) {\n                echo '\n            <TR><TD><FIELDSET><LEGEND>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_news')) . '</LEGEND>\n                <TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">\n                    <TR>\n                        <TD VALIGN=\"TOP\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'submit_news')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT ID=\"submit_news\" TYPE=\"CHECKBOX\" NAME=\"release_submit_news\" VALUE=\"1\">\n\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_subject\">\n                        <TD VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'subject')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT TYPE=\"TEXT\" ID=\"release_news_subject\" NAME=\"release_news_subject\" VALUE=\" ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'file_news_subject', $relname)) . '\" SIZE=\"40\" MAXLENGTH=\"60\">\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_details\">\n                        <TD VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'details')) . ' :</B>\n                        </TD>\n                        <TD>\n                            <TEXTAREA ID=\"release_news_details\" NAME=\"release_news_details\" ROWS=\"7\" COLS=\"50\">' . $hp->purify($GLOBALS['Language']->getOverridableText('file_admin_editreleases', 'file_news_details', [$relname, $url_news])) . ' </TEXTAREA>\n                        </TD>\n                    </TR>\n                    <TR id=\"tr_public\">\n                        <TD ROWSPAN=2 VALIGN=\"TOP\" ALIGN=\"RIGHT\">\n                            <B> ' . $GLOBALS['Language']->getText('news_submit', 'news_privacy') . ' :</B>\n                        </TD>\n                        <TD>\n                            <INPUT TYPE=\"RADIO\" ID=\"publicnews\" NAME=\"private_news\" VALUE=\"0\" CHECKED>' . $GLOBALS['Language']->getText('news_submit', 'public_news') . '\n                        </TD>\n                    </TR >\n                    <TR id=\"tr_private\">\n                        <TD>\n                            <INPUT TYPE=\"RADIO\" ID=\"privatenews\" NAME=\"private_news\" VALUE=\"1\">' . $GLOBALS['Language']->getText('news_submit', 'private_news') . '\n                        </TD>\n                    </TR></DIV>\n                </TABLE></FIELDSET>\n            </TD></TR>';\n            }\n\n            $fmmf  = new FileModuleMonitorFactory();\n            $count = count($fmmf->getFilesModuleMonitorFromDb($release->getPackageId()));\n            if ($count > 0) {\n                echo '<TR><TD><FIELDSET><LEGEND>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'fieldset_notification')) . '</LEGEND>';\n                echo '<TABLE BORDER=\"0\" CELLPADDING=\"2\" CELLSPACING=\"2\">';\n                echo '<TR><TD>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'users_monitor', $count)) . '</TD></TR>';\n                echo '<TR><TD><B>' . $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'mail_file_rel_notice')) . '</B><INPUT TYPE=\"CHECKBOX\" NAME=\"notification\" VALUE=\"1\" CHECKED>';\n                echo '</TD></TR>';\n                echo '</TABLE></FIELDSET></TD></TR>';\n            }\n            ?>\n\n            <TR>\n                <TD ALIGN=\"CENTER\">\n\n                    <INPUT TYPE=\"HIDDEN\" NAME=\"create\" VALUE=\"bla\">\n                    <INPUT\n                            TYPE=\"submit\"\n                            class=\"btn btn-primary\"\n                            ID=\"create_release\"\n                            data-test=\"create-release-button\"\n                            VALUE=\"<?php echo $is_update ? $hp->purify($GLOBALS['Language']->getText('file_admin_editreleases', 'edit_release')) : $hp->purify($GLOBALS['Language']->getText('file_admin_qrs', 'release_file')); ?>\"\n                    >\n                    <?php\n                        $cancel_url = \"/file/showfiles.php?\" . http_build_query(\n                            ['group_id'   => $group_id, 'show_release_id' => $release->getReleaseID()]\n                        );\n\n                        echo '<a class=\"btn\" ID=\"cancel_release\" name=\"cancel\" href=\"' . $cancel_url . '\">' .\n                            $hp->purify($GLOBALS['Language']->getText('global', 'btn_cancel'))\n                        . '</a>';\n                    ?>\n                </TD>\n            </TR>\n        </TABLE>\n    </FORM>\n\n    <?php\n\n    file_utils_footer([]);\n}\n\nfunction frs_process_release_form($is_update, $request, $group_id, $title, $url)\n{\n    global $package_factory, $release_factory, $files_factory;\n\n    $project = ProjectManager::instance()->getProject($group_id);\n\n    //get and filter all inputs from $request\n    $release     = [];\n    $res         = $request->get('release');\n    $vName       = new Valid_String();\n    $vPackage_id = new Valid_UInt();\n    $vStatus_id  =  new Valid_UInt();\n\n    if (\n        $vName->validate($res['name']) &&\n        $vPackage_id->validate($res['package_id']) &&\n        $vStatus_id->validate($res['status_id'])\n    ) {\n        $release['status_id']  = $res['status_id'];\n        $release['name']       = $res['name'];\n        $release['package_id'] = $res['package_id'];\n    } else {\n        $GLOBALS['Response']->addFeedback('error', $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_update_failed'));\n        $GLOBALS['Response']->redirect('/file/showfiles.php?group_id=' . $group_id);\n    }\n\n    $um   = UserManager::instance();\n    $user = $um->getCurrentUser();\n\n    $vDate = new Valid_String();\n    if ($vDate->validate($res['date'])) {\n        $release['date'] = $res['date'];\n    } else {\n        $release['date'] = \"\";\n    }\n\n    $vRelease_notes = new Valid_Text();\n    if ($vRelease_notes->validate($res['release_notes'])) {\n        $release['release_notes'] = $res['release_notes'];\n    } else {\n        $release['release_notes'] = \"\";\n    }\n\n    $vChange_log = new Valid_Text();\n    if ($vChange_log->validate($res['change_log'])) {\n        $release['change_log'] = $res['change_log'];\n    } else {\n        $release['change_log'] = \"\";\n    }\n\n    if ($request->valid(new Valid_String('js'))) {\n        $js = $request->get('js');\n    } else {\n        $js = \"\";\n    }\n\n    if ($request->validArray(new Valid_String('ftp_file'))) {\n        $ftp_file = $request->get('ftp_file');\n    } else {\n        $ftp_file = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('file_processor'))) {\n        $file_processor = $request->get('file_processor');\n    } else {\n        $file_processor = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('file_type'))) {\n        $file_type = $request->get('file_type');\n    } else {\n        $file_type = [];\n    }\n\n    if ($request->validArray(new Valid_String('reference_md5'))) {\n        $reference_md5 = $request->get('reference_md5');\n    } else {\n        $reference_md5 = [];\n    }\n\n    if ($request->validArray(new Valid_String('comment'))) {\n        $comment = $request->get('comment');\n    } else {\n        $comment = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('ftp_file_processor'))) {\n        $ftp_file_processor = $request->get('ftp_file_processor');\n    } else {\n        $ftp_file_processor = [];\n    }\n\n    if ($request->validArray(new Valid_UInt('ftp_file_type'))) {\n        $ftp_file_type = $request->get('ftp_file_type');\n    } else {\n        $ftp_file_type = [];\n    }\n\n    if ($request->validArray(new Valid_String('ftp_reference_md5'))) {\n        $ftp_reference_md5 = $request->get('ftp_reference_md5');\n    } else {\n        $ftp_reference_md5 = [];\n    }\n\n    if ($request->valid(new Valid_String('release_news_subject'))) {\n        $release_news_subject = $request->get('release_news_subject');\n    } else {\n        $release_news_subject = \"\";\n    }\n\n    if ($request->valid(new Valid_Text('release_news_details'))) {\n        $release_news_details = $request->get('release_news_details');\n    } else {\n        $release_news_details = \"\";\n    }\n\n    if ($request->valid(new Valid_WhiteList('private_news', [0, 1]))) {\n        $private_news = $request->get('private_news');\n    } else {\n        $private_news = 0;\n    }\n\n    if ($project->usesService(Service::NEWS) && $request->valid(new Valid_WhiteList('release_submit_news', [0, 1]))) {\n        $release_submit_news = (int) $request->get('release_submit_news');\n    } else {\n        $release_submit_news = 0;\n    }\n\n    if ($request->valid(new Valid_WhiteList('notification', [0, 1]))) {\n        $notification = $request->get('notification');\n    } else {\n        $notification = 0;\n    }\n\n    if ($is_update) {\n        if ($request->validArray(new Valid_UInt('release_files_to_delete'))) {\n            $release_files_to_delete = $request->get('release_files_to_delete');\n        } else {\n            $release_files_to_delete = [];\n        }\n        $release_links_to_delete = [];\n        if ($request->validArray(new Valid_UInt('release_links_to_delete'))) {\n            $release_links_to_delete = $request->get('release_links_to_delete');\n        }\n\n        if ($request->validArray(new Valid_UInt('release_files'))) {\n            $release_files = $request->get('release_files');\n        } else {\n            $release_files = [];\n        }\n\n        if ($request->validArray(new Valid_UInt('release_file_processor'))) {\n            $release_file_processor = $request->get('release_file_processor');\n        } else {\n            $release_file_processor = [];\n        }\n\n        if ($request->validArray(new Valid_UInt('release_file_type'))) {\n            $release_file_type = $request->get('release_file_type');\n        } else {\n            $release_file_type = [];\n        }\n\n        if ($request->validArray(new Valid_String('release_reference_md5'))) {\n            $release_reference_md5 = $request->get('release_reference_md5');\n        } else {\n            $release_reference_md5 = [];\n        }\n        if ($request->validArray(new Valid_UInt('new_release_id'))) {\n            $new_release_id = $request->get('new_release_id');\n        } else {\n            $new_release_id = [];\n        }\n\n        if ($request->validArray(new Valid_String('release_time'))) {\n            $release_time = $request->get('release_time');\n        } else {\n            $release_time = [];\n        }\n\n        if ($request->validArray(new Valid_String('reference_md5'))) {\n            $reference_md5 = $request->get('reference_md5');\n        } else {\n            $reference_md5 = [];\n        }\n\n        if ($request->validArray(new Valid_Text('release_comment'))) {\n            $release_comment = $request->get('release_comment');\n        } else {\n            $release_comment = [];\n        }\n\n        if ($request->valid(new Valid_UInt('id'))) {\n            $release['release_id'] = $request->get('id');\n        } else {\n            exit;\n        }\n    }\n\n    $warning = [];\n    $error   = [];\n    $info    = [];\n\n    $validator = new FRSValidator();\n\n    if ($is_update) {\n        $valid = $validator->isValidForUpdate($release, $group_id);\n    } else {\n        $valid = $validator->isValidForCreation($release, $group_id);\n    }\n    if ($valid) {\n        //uplaod release_notes and change_log if needed\n        $data_uploaded = false;\n        if (isset($_FILES['uploaded_change_log']) && ! $_FILES['uploaded_change_log']['error']) {\n            $code = addslashes(fread(fopen($_FILES['uploaded_change_log']['tmp_name'], 'r'), \\filesize($_FILES['uploaded_change_log']['tmp_name'])));\n            if ((strlen($code) > 0) && (strlen($code) < ForgeConfig::get('sys_max_size_upload'))) {\n                //size is fine\n                $info[]                = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_uploaded');\n                $data_uploaded         = true;\n                $release['change_log'] = $code;\n            } else {\n                //too big or small\n                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'length_err', ForgeConfig::get('sys_max_size_upload'));\n            }\n        }\n        if (isset($_FILES['uploaded_release_notes']) && ! $_FILES['uploaded_release_notes']['error']) {\n            $code = addslashes(fread(fopen($_FILES['uploaded_release_notes']['tmp_name'], 'r'), \\filesize($_FILES['uploaded_release_notes']['tmp_name'])));\n            if ((strlen($code) > 0) && (strlen($code) < ForgeConfig::get('sys_max_size_upload'))) {\n                //size is fine\n                if (! $data_uploaded) {\n                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_uploaded');\n                }\n                $release['release_notes'] = $code;\n            } else {\n                //too big or small\n                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'length_err', ForgeConfig::get('sys_max_size_upload'));\n            }\n        }\n\n        if ($is_update) {\n            // make sure that we don't change the date by error because of timezone reasons.\n            // eg: release created in India (GMT +5:30) at 2004-06-03.\n            // MLS in Los Angeles (GMT -8) changes the release notes\n            // the release_date that we showed MLS is 2004-06-02.\n            // with mktime(0,0,0,2,6,2004); we will change the unix time in the database\n            // and the people in India will discover that their release has been created on 2004-06-02\n            $rel = $release_factory->getFRSReleaseFromDb($release['release_id']);\n            if (format_date('Y-m-d', $rel->getReleaseDate()) == $release['date']) {\n                // the date didn't change => don't update it\n                $unix_release_time = $rel->getReleaseDate();\n            } else {\n                $date_list         = explode(\"-\", $release['date'], 3);\n                $unix_release_time = mktime(0, 0, 0, $date_list[1], $date_list[2], $date_list[0]);\n            }\n        } else {\n            //parse the date\n            $date_list         = explode(\"-\", $release['date'], 3);\n            $unix_release_time = mktime(0, 0, 0, $date_list[1], $date_list[2], $date_list[0]);\n        }\n\n        //now we create or update the release\n        $array =  [\n            'release_date' => $unix_release_time,\n            'name' => $release['name'],\n            'status_id' => $release['status_id'],\n            'package_id' => $release['package_id'],\n            'notes' => $release['release_notes'],\n            'changes' => $release['change_log'],\n        ];\n        if ($is_update) {\n            $array['release_id'] = $release['release_id'];\n        }\n        $release_id = 0;\n\n        if ($is_update) {\n            $res = $release_factory->update($array);\n            if (! $res) {\n                $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_update_failed');\n            } else {\n                $release_id   = $array['release_id'];\n                $info_success = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_updated', $release['name']);\n            }\n        } else {\n            $res = $release_factory->create($array);\n            if (! $res) {\n                $error[] =  $GLOBALS['Language'] > getText('file_admin_editreleases', 'add_rel_fail');\n                //insert failed - go back to definition screen\n            } else {\n                //release added - now show the detail page for this new release\n                $release_id   = $res;\n                $rel          = $release_factory->getFRSReleaseFromDb($release_id);\n                $info_success = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_added');\n            }\n        }\n        if ($res && isset($rel)) {\n            // extract cross references\n            $reference_manager = ReferenceManager::instance();\n            $reference_manager->extractCrossRef($release['release_notes'], $release_id, ReferenceManager::REFERENCE_NATURE_RELEASE, $group_id);\n            $reference_manager->extractCrossRef($release['change_log'], $release_id, ReferenceManager::REFERENCE_NATURE_RELEASE, $group_id);\n\n            //set the release permissions\n            $ugroups = [];\n            if ($request->get('ugroups')) {\n                $ugroups = $request->get('ugroups');\n            }\n            /** @psalm-suppress DeprecatedFunction */\n            [$return_code, $feedbacks] = permission_process_selection_form($group_id, 'RELEASE_READ', $release_id, $ugroups);\n            if (! $return_code) {\n                $error[] = $GLOBALS['Language']->getText('file_admin_editpackages', 'perm_update_err');\n                $error[] = $feedbacks;\n            }\n\n            //submit news if requested\n            if ($release_id && user_ismember($group_id, 'A') && $release_submit_news) {\n                require_once __DIR__ . '/../news/news_utils.php';\n                news_submit($group_id, $release_news_subject, $release_news_details, $private_news, false);\n            }\n\n            // Send notification\n            if ($notification) {\n                $count = $release_factory->emailNotification($rel);\n                if ($count === false) {\n                    $error[] =  $GLOBALS['Language']->getText('global', 'mail_failed', [\n                        ForgeConfig::get('sys_email_admin'),\n                    ]);\n                } else {\n                    if ($count > 0) {\n                        $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'email_sent', $count);\n                    }\n                }\n            }\n\n            if (isset($release_files_to_delete, $release_files) && $is_update) {\n                $files = $rel->getFiles();\n\n                //remove files\n                foreach ($release_files_to_delete as $rel_file) {\n                    $res   = $files_factory->getFRSFileFromDb($rel_file);\n                    $fname = $res->getFileName();\n                    $res   = $files_factory->delete_file($group_id, $rel_file);\n                    if ($res == 0) {\n                        $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'f_not_yours', basename($fname));\n                    } else {\n                        $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_deleted', basename($fname));\n                    }\n                }\n\n                //update files\n                $index = 0;\n                foreach ($release_files as $rel_file) {\n                    if (empty($release_files_to_delete) || ! in_array($rel_file, $release_files_to_delete)) {\n                        $package_id = $release['package_id'];\n                        $fname      = $files[$index]->getFileName();\n                        $list       = explode('/', $fname);\n                        $fname      = $list[sizeof($list) - 1];\n                        if (! isset($new_release_id)) {\n                            continue;\n                        }\n                        if ($new_release_id[$index] != $release_id) {\n                            //changing to a different release for this file\n                            //see if the new release is valid for this project\n                            $res2 = $release_factory->getFRSReleaseFromDb($new_release_id[$index], $group_id);\n                            if (! $res2 || count($res2) < 1) {\n                                //release not found for this project\n                                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_not_yours', $fname);\n                            } else {\n                                $package_id = $res2->getPackageID();\n                            }\n                        }\n                        if ($new_release_id[$index] == $release_id || (isset($res2) && $res2)) {\n                            if (! isset($release_time)) {\n                                continue;\n                            }\n                            if (! preg_match(\"/[0-9]{4}-[0-9]{2}-[0-9]{2}/\", $release_time[$index])) {\n                                $warning[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'data_not_parsed_file', $fname);\n                            } else {\n                                $res2 = $files_factory->getFRSFileFromDb($rel_file);\n\n                                if (format_date('Y-m-d', $res2->getReleaseTime()) == $release_time[$index]) {\n                                    $unix_release_time = $res2->getReleaseTime();\n                                } else {\n                                    $date_list = explode(\"-\", $release_time[$index], 3);\n                                    assert(isset($date_list[1], $date_list[2], $date_list[0]));\n                                    $unix_release_time = mktime(0, 0, 0, (int) $date_list[1], (int) $date_list[2], (int) $date_list[0]);\n                                }\n                                if (! isset($release_file_type, $release_file_processor, $release_comment, $release_reference_md5)) {\n                                    continue;\n                                }\n\n                                $array =  [\n                                    'release_id'    => $new_release_id[$index],\n                                    'release_time'  => $unix_release_time,\n                                    'type_id'       => $release_file_type[$index],\n                                    'processor_id'  => $release_file_processor[$index],\n                                    'file_id'       => $rel_file,\n                                    'comment'       => $release_comment[$index],\n                                    'filename'      => 'p' . $package_id . '_r' . $new_release_id[$index] . '/' . $fname,\n                                    'filepath'      => 'p' . $package_id . '_r' . $new_release_id[$index] . '/' . $fname . '_' . $unix_release_time,\n                                ];\n                                if ($release_reference_md5[$index] && $release_reference_md5[$index] != '') {\n                                    $array['reference_md5'] = $release_reference_md5[$index];\n                                }\n                                $res = $files_factory->update($array);\n                                if ($res) {\n                                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'file_updated', $fname);\n                                }\n                            }\n                        }\n                    }\n                    $index++;\n                }\n            }\n\n            if (! empty($release_links_to_delete)) {\n                $uploaded_links_deletor = new \\Tuleap\\FRS\\UploadedLinkDeletor(new UploadedLinksDao(), FRSLog::instance());\n                $uploaded_links_deletor->deleteByIDsAndRelease($release_links_to_delete, $rel, $user);\n            }\n\n            $uploaded_links_updater   = new UploadedLinksUpdater(new UploadedLinksDao(), FRSLog::instance());\n            $uploaded_links_formatter = new UploadedLinksRequestFormatter();\n            try {\n                $release_links = $uploaded_links_formatter->formatFromRequest($request);\n                $uploaded_links_updater->update($release_links, $user, $rel, $rel->getReleaseDate());\n            } catch (UploadedLinksInvalidFormException $e) {\n                $error[] = _('An error occurred in form submission, a link is not valid. Please retry.');\n            }\n\n            $http_files_processor_type_list =  [];\n            $ftp_files_processor_type_list  =  [];\n            if (isset($js) && $js == 'no_js') {\n                //if javascript is not allowed, there is maximum one file to upload\n                // TODO : fix warnings due to array instead of string for \"file_processor\", \"file_type\" & \"reference_md5\"\n                if ($ftp_file[0] != -1) {\n                    $ftp_files_processor_type_list[] =  [\n                        'name'          => $ftp_file[0],\n                        'processor'     => $file_processor,\n                        'type'          => $file_type,\n                        'reference_md5' => $reference_md5,\n                        'comment'       => $comment,\n                    ];\n                } elseif (trim($_FILES['file']['name'][0]) != '') {\n                    $http_files_processor_type_list[] =  [\n                        'error'         => $_FILES['file']['error'][0],\n                        'name'          => stripslashes($_FILES['file']['name'][0]),\n                        'tmp_name'      => $_FILES['file']['tmp_name'][0],\n                        'processor'     => $file_processor,\n                        'type'          => $file_type,\n                        'reference_md5' => $reference_md5,\n                        'comment'       => $comment,\n                    ];\n                }\n            } else {\n                //get http files with the associated processor type and file type in allowed javascript case\n                $nb_files = isset($_FILES['file']) ? count($_FILES['file']['name']) : 0;\n                for ($i = 0; $i < $nb_files; $i++) {\n                    if (trim($_FILES['file']['name'][$i]) != '') {\n                        $http_files_processor_type_list[] =  [\n                            'error'         => $_FILES['file']['error'][$i],\n                            'name'          => stripslashes($_FILES['file']['name'][$i]),\n                            'tmp_name'      => $_FILES['file']['tmp_name'][$i],\n                            'processor'     => $file_processor[$i],\n                            'type'          => $file_type[$i],\n                            'reference_md5' => $reference_md5[$i],\n                            'comment'       => $comment[$i],\n                        ];\n                    }\n                }\n                //remove hidden ftp_file input (if the user let the select boxe on --choose file)\n                $index = 0;\n                foreach ($ftp_file as $file) {\n                    if (trim($file) != '') {\n                        $ftp_files_processor_type_list[] =  [\n                            'name' => $file,\n                            'processor' => $ftp_file_processor[$index],\n                            'type' => $ftp_file_type[$index],\n                            'reference_md5' => $ftp_reference_md5[$index],\n                        ];\n                        $index++;\n                    }\n                }\n            }\n\n            if (count($http_files_processor_type_list) > 0 || count($ftp_files_processor_type_list) > 0) {\n                //see if this release belongs to this project\n                $res1 = $release_factory->getFRSReleaseFromDb($release_id, $group_id);\n                if ($res1 === null) {\n                    //release not found for this project\n                    $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'rel_not_yours');\n                } else {\n                    $addingFiles = false;\n                    //iterate and add the http files to the frs_file table\n                    foreach ($http_files_processor_type_list as $file) {\n                        $filename = $file['name'];\n                        if (isset($file['error'])) {\n                            switch ($file['error']) {\n                                case UPLOAD_ERR_OK:\n                                    // all is OK\n                                    break;\n                                case UPLOAD_ERR_INI_SIZE:\n                                case UPLOAD_ERR_FORM_SIZE:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_size', $file['error']);\n                                    break;\n                                case UPLOAD_ERR_PARTIAL:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_partial', $file['error']);\n                                    break;\n                                case UPLOAD_ERR_NO_FILE:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_nofile', $file['error']);\n                                    break;\n                                default:\n                                    $error[] = $GLOBALS['Language']->getText('global', 'error_upload_unknown', $file['error']);\n                            }\n                        }\n                        if (is_uploaded_file($file['tmp_name'])) {\n                            $uploaddir  = $files_factory->getSrcDir($request->getProject());\n                            $uploadfile = $uploaddir . \"/\" . basename($filename);\n                            if (! file_exists($uploaddir) || ! is_writable($uploaddir) || ! move_uploaded_file($file['tmp_name'], $uploadfile)) {\n                                $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'not_add_file') . \": \" . basename($filename);\n                            } else {\n                                $newFile = new FRSFile();\n                                $newFile->setRelease($res1);\n                                $newFile->setFileName($filename);\n                                $newFile->setProcessorID($file['processor']);\n                                $newFile->setTypeID($file['type']);\n                                $newFile->setReferenceMd5($file['reference_md5']);\n                                $newFile->setUserId($user->getId());\n                                $newFile->setComment($file['comment']);\n                                try {\n                                    $files_factory->createFile($newFile);\n                                    $addingFiles = true;\n                                } catch (Exception $e) {\n                                    $error[] = $e->getMessage();\n                                }\n                            }\n                        } else {\n                            $error[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'not_add_file') . \": \" . basename($filename);\n                        }\n                    }\n\n                    //iterate and add the ftp files to the frs_file table\n                    foreach ($ftp_files_processor_type_list as $file) {\n                        $filename = $file['name'];\n\n                        $newFile = new FRSFile();\n                        $newFile->setRelease($res1);\n                        $newFile->setFileName($filename);\n                        $newFile->setProcessorID($file['processor']);\n                        $newFile->setTypeID($file['type']);\n                        $newFile->setReferenceMd5($file['reference_md5']);\n                        $newFile->setUserId($user->getId());\n\n                        try {\n                            $files_factory->createFile($newFile, ~FRSFileFactory::COMPUTE_MD5);\n                            $addingFiles = true;\n                            $em          = EventManager::instance();\n                            $em->processEvent(Event::COMPUTE_MD5SUM, ['fileId' => $newFile->getFileID()]);\n                            $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'offline_md5', $filename);\n                        } catch (Exception $e) {\n                            $error[] = $e->getMessage();\n                        }\n                    }\n                }\n                if (isset($addingFiles) && $addingFiles) {\n                    $info[] = $GLOBALS['Language']->getText('file_admin_editreleases', 'add_files');\n                }\n            }\n\n            $error_edit = '';\n            $params     = [\n                'release_id'      => $release_id,\n                'release_request' => $request->get('release'),\n                'error'           => &$error_edit,\n            ];\n\n            EventManager::instance()->processEvent(\n                'frs_process_edit_form',\n                $params\n            );\n\n            if ($error_edit) {\n                $error[] = $error_edit;\n            }\n        }\n    } else {\n        $error[] = $validator->getErrors();\n    }\n\n    foreach ($warning as $warning_message) {\n        $GLOBALS['Response']->addFeedback('warning', $warning_message);\n    }\n\n    foreach ($info as $info_message) {\n        $GLOBALS['Response']->addFeedback('info', $info_message);\n    }\n\n    if (count($error) === 0 && isset($info_success)) {\n        $GLOBALS['Response']->addFeedback('info', $info_success);\n        http_build_query(['group_id' => $group_id]);\n        $GLOBALS['Response']->redirect('/file/showfiles.php?' . http_build_query(\n            ['group_id'   => $group_id, 'show_release_id' => $release_id]\n        ));\n    } else {\n        foreach ($error as $error_message) {\n            $GLOBALS['Response']->addFeedback('error', $error_message);\n        }\n\n        $GLOBALS['Response']->redirect('/file/showfiles.php?group_id=' . urlencode($group_id));\n    }\n}\n\nfunction detectSpecialCharactersInName($name, $type)\n{\n    if (preg_match('/\\+/', $name)) {\n        $GLOBALS['Response']->addFeedback('warning', $GLOBALS['Language']->getText('file_showfiles', 'warn_chars', [$type, $name]));\n    }\n}\n"], "filenames": ["src/www/file/file_utils.php"], "buggy_code_start_loc": [129], "buggy_code_end_loc": [173], "fixing_code_start_loc": [128], "fixing_code_end_loc": [150], "type": "CWE-79", "message": "Tuleap is an open source suite to improve management of software developments and collaboration. Prior to version 15.2.99.103 of Tuleap Community Edition and prior to versions 15.2-4 and 15.1-8 of Tuleap Enterprise Edition, the name of the releases are not properly escaped on the edition page of a release. A malicious user with the ability to create a FRS release could force a victim having write permissions in the FRS to execute uncontrolled code. Tuleap Community Edition 15.2.99.103, Tuleap Enterprise Edition 15.2-4, and Tuleap Enterprise Edition 15.1-8 contain a fix for this issue.", "other": {"cve": {"id": "CVE-2023-48715", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-11T19:15:08.860", "lastModified": "2024-02-22T19:15:08.410", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Tuleap is an open source suite to improve management of software developments and collaboration. Prior to version 15.2.99.103 of Tuleap Community Edition and prior to versions 15.2-4 and 15.1-8 of Tuleap Enterprise Edition, the name of the releases are not properly escaped on the edition page of a release. A malicious user with the ability to create a FRS release could force a victim having write permissions in the FRS to execute uncontrolled code. Tuleap Community Edition 15.2.99.103, Tuleap Enterprise Edition 15.2-4, and Tuleap Enterprise Edition 15.1-8 contain a fix for this issue."}, {"lang": "es", "value": "Tuleap es una suite de c\u00f3digo abierto para mejorar la gesti\u00f3n de los desarrollos de software y la colaboraci\u00f3n. Antes de la versi\u00f3n 15.2.99.103 o Tuleap Community Edition y antes de las versiones 15.2-4 y 15.1-8 de Tuleap Enterprise Edition, el nombre de las versiones no aparece correctamente con caracteres de escape en la p\u00e1gina de edici\u00f3n de una versi\u00f3n. Un usuario malintencionado con la capacidad de crear una versi\u00f3n de FRS podr\u00eda obligar a una v\u00edctima que tenga permisos de escritura en FRS a ejecutar c\u00f3digo no controlado. Tuleap Community Edition 15.2.99.103, Tuleap Enterprise Edition 15.2-4 y Tuleap Enterprise Edition 15.1-8 contienen una soluci\u00f3n para este problema."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionEndExcluding": "15.1-8", "matchCriteriaId": "EBC945C2-F92B-4763-81DE-D233176CA6D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:community:*:*:*", "versionEndExcluding": "15.2.99.103", "matchCriteriaId": "72217C7D-C8D3-4647-8B76-72BD84D3962A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:enalean:tuleap:*:*:*:*:enterprise:*:*:*", "versionStartIncluding": "15.2", "versionEndExcluding": "15.2-4", "matchCriteriaId": "AE4D1FFC-AD00-4040-BD6A-3F32BBE7B72B"}]}]}], "references": [{"url": "https://github.com/Enalean/tuleap/commit/ea71ec7ee062aae8d1fa7a7325aaa759205c17d8", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Enalean/tuleap/security/advisories/GHSA-3m7g-7787-wc68", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://tuleap.net/plugins/git/tuleap/tuleap/stable?a=commit&h=ea71ec7ee062aae8d1fa7a7325aaa759205c17d8", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://tuleap.net/plugins/tracker/?aid=35143", "source": "security-advisories@github.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/Enalean/tuleap/commit/ea71ec7ee062aae8d1fa7a7325aaa759205c17d8"}}