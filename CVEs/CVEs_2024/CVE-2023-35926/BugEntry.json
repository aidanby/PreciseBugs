{"buggy_code": ["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Isolate } from 'isolated-vm';\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport fs from 'fs-extra';\nimport { JsonValue } from '@backstage/types';\n\n// language=JavaScript\nconst mkScript = (nunjucksSource: string) => `\nconst { render, renderCompat } = (() => {\n  const module = {};\n  const process = { env: {} };\n  const require = (pkg) => { if (pkg === 'events') { return function (){}; }};\n\n  ${nunjucksSource}\n\n  const env = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '\\${{',\n      variableEnd: '}}',\n    },\n  });\n\n  const compatEnv = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '{{',\n      variableEnd: '}}',\n    },\n  });\n  compatEnv.addFilter('jsonify', compatEnv.getFilter('dump'));\n\n  for (const name of JSON.parse(availableTemplateFilters)) {\n    env.addFilter(name, (...args) => JSON.parse(callFilter(name, args)));\n  }\n  for (const [name, value] of Object.entries(JSON.parse(availableTemplateGlobals))) {\n    env.addGlobal(name, value);\n  }\n  for (const name of JSON.parse(availableTemplateCallbacks)) {\n    env.addGlobal(name, (...args) => JSON.parse(callGlobal(name, args)));\n  }\n\n  let uninstallCompat = undefined;\n\n  function render(str, values) {\n    try {\n      if (uninstallCompat) {\n        uninstallCompat();\n        uninstallCompat = undefined;\n      }\n      return env.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  function renderCompat(str, values) {\n    try {\n      if (!uninstallCompat) {\n        uninstallCompat = module.exports.installJinjaCompat();\n      }\n      return compatEnv.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  return { render, renderCompat };\n})();\n`;\n\n/** @public */\nexport type TemplateFilter = (...args: JsonValue[]) => JsonValue | undefined;\n\n/** @public */\nexport type TemplateGlobal =\n  | ((...args: JsonValue[]) => JsonValue | undefined)\n  | JsonValue;\n\nexport interface SecureTemplaterOptions {\n  /* Enables jinja compatibility and the \"jsonify\" filter */\n  cookiecutterCompat?: boolean;\n  /* Extra user-provided nunjucks filters */\n  templateFilters?: Record<string, TemplateFilter>;\n  /* Extra user-provided nunjucks globals */\n  templateGlobals?: Record<string, TemplateGlobal>;\n}\n\nexport type SecureTemplateRenderer = (\n  template: string,\n  values: unknown,\n) => string;\n\nexport class SecureTemplater {\n  static async loadRenderer(options: SecureTemplaterOptions = {}) {\n    const {\n      cookiecutterCompat,\n      templateFilters = {},\n      templateGlobals = {},\n    } = options;\n    const isolate = new Isolate({ memoryLimit: 128 });\n    const context = await isolate.createContext();\n    const contextGlobal = context.global;\n\n    const nunjucksSource = await fs.readFile(\n      resolvePackagePath(\n        '@backstage/plugin-scaffolder-backend',\n        'assets/nunjucks.js.txt',\n      ),\n      'utf-8',\n    );\n\n    const nunjucksScript = await isolate.compileScript(\n      mkScript(nunjucksSource),\n    );\n\n    const availableFilters = Object.keys(templateFilters);\n\n    await contextGlobal.set(\n      'availableTemplateFilters',\n      JSON.stringify(availableFilters),\n    );\n\n    const globalCallbacks = [];\n    const globalValues: Record<string, unknown> = {};\n    for (const [name, value] of Object.entries(templateGlobals)) {\n      if (typeof value === 'function') {\n        globalCallbacks.push(name);\n      } else {\n        globalValues[name] = value;\n      }\n    }\n\n    await contextGlobal.set(\n      'availableTemplateGlobals',\n      JSON.stringify(globalValues),\n    );\n    await contextGlobal.set(\n      'availableTemplateCallbacks',\n      JSON.stringify(globalCallbacks),\n    );\n\n    await contextGlobal.set(\n      'callFilter',\n      (filterName: string, args: JsonValue[]) => {\n        if (!Object.hasOwn(templateFilters, filterName)) {\n          return '';\n        }\n        return JSON.stringify(templateFilters[filterName](...args));\n      },\n    );\n\n    await contextGlobal.set(\n      'callGlobal',\n      (globalName: string, args: JsonValue[]) => {\n        if (!Object.hasOwn(templateGlobals, globalName)) {\n          return '';\n        }\n        const global = templateGlobals[globalName];\n        if (typeof global !== 'function') {\n          return '';\n        }\n        return JSON.stringify(global(...args));\n      },\n    );\n\n    await nunjucksScript.run(context);\n\n    const render: SecureTemplateRenderer = (template, values) => {\n      if (!context) {\n        throw new Error('SecureTemplater has not been initialized');\n      }\n\n      contextGlobal.setSync('templateStr', String(template));\n      contextGlobal.setSync('templateValues', JSON.stringify(values));\n\n      if (cookiecutterCompat) {\n        return context.evalSync(`renderCompat(templateStr, templateValues)`);\n      }\n\n      return context.evalSync(`render(templateStr, templateValues)`);\n    };\n    return render;\n  }\n}\n"], "fixing_code": ["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Isolate } from 'isolated-vm';\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport fs from 'fs-extra';\nimport { JsonValue } from '@backstage/types';\n\n// language=JavaScript\nconst mkScript = (nunjucksSource: string) => `\nconst { render, renderCompat } = (() => {\n  const module = {};\n  const process = { env: {} };\n  const require = (pkg) => { if (pkg === 'events') { return function (){}; }};\n\n  ${nunjucksSource}\n\n  const env = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '\\${{',\n      variableEnd: '}}',\n    },\n  });\n\n  const compatEnv = module.exports.configure({\n    autoescape: false,\n    tags: {\n      variableStart: '{{',\n      variableEnd: '}}',\n    },\n  });\n  compatEnv.addFilter('jsonify', compatEnv.getFilter('dump'));\n\n  for (const name of JSON.parse(availableTemplateFilters)) {\n    env.addFilter(name, (...args) => JSON.parse(callFilter(name, args)));\n  }\n  for (const [name, value] of Object.entries(JSON.parse(availableTemplateGlobals))) {\n    env.addGlobal(name, value);\n  }\n  for (const name of JSON.parse(availableTemplateCallbacks)) {\n    env.addGlobal(name, (...args) => JSON.parse(callGlobal(name, args)));\n  }\n\n  let uninstallCompat = undefined;\n\n  function render(str, values) {\n    try {\n      if (uninstallCompat) {\n        uninstallCompat();\n        uninstallCompat = undefined;\n      }\n      return env.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  function renderCompat(str, values) {\n    try {\n      if (!uninstallCompat) {\n        uninstallCompat = module.exports.installJinjaCompat();\n      }\n      return compatEnv.renderString(str, JSON.parse(values));\n    } catch (error) {\n      // Make sure errors don't leak anything\n      throw new Error(String(error.message));\n    }\n  }\n\n  return { render, renderCompat };\n})();\n`;\n\n/** @public */\nexport type TemplateFilter = (...args: JsonValue[]) => JsonValue | undefined;\n\n/** @public */\nexport type TemplateGlobal =\n  | ((...args: JsonValue[]) => JsonValue | undefined)\n  | JsonValue;\n\nexport interface SecureTemplaterOptions {\n  /* Enables jinja compatibility and the \"jsonify\" filter */\n  cookiecutterCompat?: boolean;\n  /* Extra user-provided nunjucks filters */\n  templateFilters?: Record<string, TemplateFilter>;\n  /* Extra user-provided nunjucks globals */\n  templateGlobals?: Record<string, TemplateGlobal>;\n}\n\nexport type SecureTemplateRenderer = (\n  template: string,\n  values: unknown,\n) => string;\n\nexport class SecureTemplater {\n  static async loadRenderer(options: SecureTemplaterOptions = {}) {\n    const {\n      cookiecutterCompat,\n      templateFilters = {},\n      templateGlobals = {},\n    } = options;\n\n    const isolate = new Isolate({ memoryLimit: 128 });\n    const context = await isolate.createContext();\n    const contextGlobal = context.global;\n\n    const nunjucksSource = await fs.readFile(\n      resolvePackagePath(\n        '@backstage/plugin-scaffolder-backend',\n        'assets/nunjucks.js.txt',\n      ),\n      'utf-8',\n    );\n\n    const nunjucksScript = await isolate.compileScript(\n      mkScript(nunjucksSource),\n    );\n\n    const availableFilters = Object.keys(templateFilters);\n\n    await contextGlobal.set(\n      'availableTemplateFilters',\n      JSON.stringify(availableFilters),\n    );\n\n    const globalCallbacks = [];\n    const globalValues: Record<string, unknown> = {};\n    for (const [name, value] of Object.entries(templateGlobals)) {\n      if (typeof value === 'function') {\n        globalCallbacks.push(name);\n      } else {\n        globalValues[name] = value;\n      }\n    }\n\n    await contextGlobal.set(\n      'availableTemplateGlobals',\n      JSON.stringify(globalValues),\n    );\n    await contextGlobal.set(\n      'availableTemplateCallbacks',\n      JSON.stringify(globalCallbacks),\n    );\n\n    await contextGlobal.set(\n      'callFilter',\n      (filterName: string, args: JsonValue[]) => {\n        if (!Object.hasOwn(templateFilters, filterName)) {\n          return '';\n        }\n        return JSON.stringify(templateFilters[filterName](...args));\n      },\n    );\n\n    await contextGlobal.set(\n      'callGlobal',\n      (globalName: string, args: JsonValue[]) => {\n        if (!Object.hasOwn(templateGlobals, globalName)) {\n          return '';\n        }\n        const global = templateGlobals[globalName];\n        if (typeof global !== 'function') {\n          return '';\n        }\n        return JSON.stringify(global(...args));\n      },\n    );\n\n    await nunjucksScript.run(context);\n\n    const render: SecureTemplateRenderer = (template, values) => {\n      if (!context) {\n        throw new Error('SecureTemplater has not been initialized');\n      }\n\n      contextGlobal.setSync('templateStr', String(template));\n      contextGlobal.setSync('templateValues', JSON.stringify(values));\n\n      if (cookiecutterCompat) {\n        return context.evalSync(`renderCompat(templateStr, templateValues)`);\n      }\n\n      return context.evalSync(`render(templateStr, templateValues)`);\n    };\n    return render;\n  }\n}\n"], "filenames": ["plugins/scaffolder-backend/src/lib/templating/SecureTemplater.ts"], "buggy_code_start_loc": [117], "buggy_code_end_loc": [117], "fixing_code_start_loc": [118], "fixing_code_end_loc": [119], "type": "CWE-94", "message": "Backstage is an open platform for building developer portals. The Backstage scaffolder-backend plugin uses a templating library that requires sandbox, as it by design allows for code injection. The library used for this sandbox so far has been `vm2`, but in light of several past vulnerabilities and existing vulnerabilities  that may not have a fix, the plugin has switched to using a different sandbox library. A malicious actor with write access to a registered scaffolder template could manipulate the template in a way that allows for remote code execution on the scaffolder-backend instance. This was only exploitable in the template YAML definition itself and not by user input data. This is vulnerability is fixed in version 1.15.0 of `@backstage/plugin-scaffolder-backend`.", "other": {"cve": {"id": "CVE-2023-35926", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-22T14:15:09.607", "lastModified": "2023-06-29T20:54:47.117", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Backstage is an open platform for building developer portals. The Backstage scaffolder-backend plugin uses a templating library that requires sandbox, as it by design allows for code injection. The library used for this sandbox so far has been `vm2`, but in light of several past vulnerabilities and existing vulnerabilities  that may not have a fix, the plugin has switched to using a different sandbox library. A malicious actor with write access to a registered scaffolder template could manipulate the template in a way that allows for remote code execution on the scaffolder-backend instance. This was only exploitable in the template YAML definition itself and not by user input data. This is vulnerability is fixed in version 1.15.0 of `@backstage/plugin-scaffolder-backend`."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:H/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linuxfoundation:backstage:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.15.0", "matchCriteriaId": "41D3145E-0089-49C3-AFAA-7994C26E230A"}]}]}], "references": [{"url": "https://github.com/backstage/backstage/commit/fb7375507d56faedcb7bb3665480070593c8949a", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/backstage/backstage/releases/tag/v1.15.0", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/backstage/backstage/security/advisories/GHSA-wg6p-jmpc-xjmr", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/backstage/backstage/commit/fb7375507d56faedcb7bb3665480070593c8949a"}}