{"buggy_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Layout model\n *\n * @category   Mage\n * @package    Mage_Core\n */\nclass Mage_Core_Model_Layout extends Varien_Simplexml_Config\n{\n    /**\n     * Layout Update module\n     *\n     * @var Mage_Core_Model_Layout_Update\n     */\n    protected $_update;\n\n    /**\n     * Blocks registry\n     *\n     * @var array\n     */\n    protected $_blocks = array();\n\n    /**\n     * Cache of block callbacks to output during rendering\n     *\n     * @var array\n     */\n    protected $_output = array();\n\n    /**\n     * Layout area (f.e. admin, frontend)\n     *\n     * @var string\n     */\n    protected $_area;\n\n    /**\n     * Helper blocks cache for this layout\n     *\n     * @var array\n     */\n    protected $_helpers = array();\n\n    /**\n     * Flag to have blocks' output go directly to browser as oppose to return result\n     *\n     * @var boolean\n     */\n    protected $_directOutput = false;\n\n    /**\n     * Class constructor\n     *\n     * @param array $data\n     */\n    public function __construct($data = array())\n    {\n        $this->_elementClass = Mage::getConfig()->getModelClassName('core/layout_element');\n        $this->setXml(simplexml_load_string('<layout/>', $this->_elementClass));\n        $this->_update = Mage::getModel('core/layout_update');\n        parent::__construct($data);\n    }\n\n    /**\n     * Layout update instance\n     *\n     * @return Mage_Core_Model_Layout_Update\n     */\n    public function getUpdate()\n    {\n        return $this->_update;\n    }\n\n    /**\n     * Set layout area\n     *\n     * @param   string $area\n     * @return  Mage_Core_Model_Layout\n     */\n    public function setArea($area)\n    {\n        $this->_area = $area;\n        return $this;\n    }\n\n    /**\n     * Retrieve layout area\n     *\n     * @return string\n     */\n    public function getArea()\n    {\n        return $this->_area;\n    }\n\n    /**\n     * Declaring layout direct output flag\n     *\n     * @param   bool $flag\n     * @return  Mage_Core_Model_Layout\n     */\n    public function setDirectOutput($flag)\n    {\n        $this->_directOutput = $flag;\n        return $this;\n    }\n\n    /**\n     * Retrieve derect output flag\n     *\n     * @return bool\n     */\n    public function getDirectOutput()\n    {\n        return $this->_directOutput;\n    }\n\n    /**\n     * Loyout xml generation\n     *\n     * @return $this\n     */\n    public function generateXml()\n    {\n        $xml = $this->getUpdate()->asSimplexml();\n        $removeInstructions = $xml->xpath(\"//remove\");\n        if (is_array($removeInstructions)) {\n            foreach ($removeInstructions as $infoNode) {\n                $attributes = $infoNode->attributes();\n                $blockName = (string)$attributes->name;\n                if ($blockName) {\n                    $ignoreNodes = $xml->xpath(\"//block[@name='\".$blockName.\"']\");\n                    if (!is_array($ignoreNodes)) {\n                        continue;\n                    }\n                    $ignoreReferences = $xml->xpath(\"//reference[@name='\".$blockName.\"']\");\n                    if (is_array($ignoreReferences)) {\n                        $ignoreNodes = array_merge($ignoreNodes, $ignoreReferences);\n                    }\n\n                    foreach ($ignoreNodes as $block) {\n                        if ($block->getAttribute('ignore') !== null) {\n                            continue;\n                        }\n                        $acl = (string)$attributes->acl;\n                        if ($acl && Mage::getSingleton('admin/session')->isAllowed($acl)) {\n                            continue;\n                        }\n                        if (!isset($block->attributes()->ignore)) {\n                            $block->addAttribute('ignore', true);\n                        }\n                    }\n                }\n            }\n        }\n        $this->setXml($xml);\n        return $this;\n    }\n\n    /**\n     * Create layout blocks hierarchy from layout xml configuration\n     *\n     * @param Mage_Core_Model_Layout_Element|null $parent\n     */\n    public function generateBlocks($parent = null)\n    {\n        if (empty($parent)) {\n            $parent = $this->getNode();\n        }\n        foreach ($parent as $node) {\n            $attributes = $node->attributes();\n            if ((bool)$attributes->ignore) {\n                continue;\n            }\n            switch ($node->getName()) {\n                case 'block':\n                    $this->_generateBlock($node, $parent);\n                    $this->generateBlocks($node);\n                    break;\n\n                case 'reference':\n                    $this->generateBlocks($node);\n                    break;\n\n                case 'action':\n                    $this->_generateAction($node, $parent);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Add block object to layout based on xml node data\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param Mage_Core_Model_Layout_Element $parent\n     * @return $this\n     */\n    protected function _generateBlock($node, $parent)\n    {\n        if (!empty($node['class'])) {\n            $className = (string)$node['class'];\n        } else {\n            $className = (string)$node['type'];\n        }\n\n        $blockName = (string)$node['name'];\n        $_profilerKey = 'BLOCK: '.$blockName;\n        Varien_Profiler::start($_profilerKey);\n\n        $block = $this->addBlock($className, $blockName);\n        if (!$block) {\n            return $this;\n        }\n\n        if (!empty($node['parent'])) {\n            $parentBlock = $this->getBlock((string)$node['parent']);\n        } else {\n            $parentName = $parent->getBlockName();\n            if (!empty($parentName)) {\n                $parentBlock = $this->getBlock($parentName);\n            }\n        }\n        if (!empty($parentBlock)) {\n            $alias = isset($node['as']) ? (string)$node['as'] : '';\n            if (isset($node['before'])) {\n                $sibling = (string)$node['before'];\n                if ('-'===$sibling) {\n                    $sibling = '';\n                }\n                $parentBlock->insert($block, $sibling, false, $alias);\n            } elseif (isset($node['after'])) {\n                $sibling = (string)$node['after'];\n                if ('-'===$sibling) {\n                    $sibling = '';\n                }\n                $parentBlock->insert($block, $sibling, true, $alias);\n            } else {\n                $parentBlock->append($block, $alias);\n            }\n        }\n        if (!empty($node['template'])) {\n            $block->setTemplate((string)$node['template']);\n        }\n\n        if (!empty($node['output'])) {\n            $method = (string)$node['output'];\n            $this->addOutputBlock($blockName, $method);\n        }\n        Varien_Profiler::stop($_profilerKey);\n\n        return $this;\n    }\n\n    /**\n     * Enter description here...\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param Mage_Core_Model_Layout_Element $parent\n     * @return $this\n     */\n    protected function _generateAction($node, $parent)\n    {\n        if (isset($node['ifconfig']) && ($configPath = (string)$node['ifconfig'])) {\n            if (!Mage::getStoreConfigFlag($configPath)) {\n                return $this;\n            }\n        }\n\n        $method = (string)$node['method'];\n        if (!empty($node['block'])) {\n            $parentName = (string)$node['block'];\n        } else {\n            $parentName = $parent->getBlockName();\n        }\n\n        $_profilerKey = 'BLOCK ACTION: '.$parentName.' -> '.$method;\n        Varien_Profiler::start($_profilerKey);\n\n        if (!empty($parentName)) {\n            $block = $this->getBlock($parentName);\n        }\n        if (!empty($block)) {\n            $args = (array)$node->children();\n            unset($args['@attributes']);\n\n            foreach ($args as $key => $arg) {\n                if (($arg instanceof Mage_Core_Model_Layout_Element)) {\n                    if (isset($arg['helper'])) {\n                        $helperName = explode('/', (string)$arg['helper']);\n                        $helperMethod = array_pop($helperName);\n                        $helperName = implode('/', $helperName);\n                        $arg = $arg->asArray();\n                        unset($arg['@']);\n                        $args[$key] = call_user_func_array(array(Mage::helper($helperName), $helperMethod), $arg);\n                    } else {\n                        /**\n                         * if there is no helper we hope that this is assoc array\n                         */\n                        $arr = array();\n                        /**\n                         * @var string $subkey\n                         * @var Mage_Core_Model_Layout_Element $value\n                         */\n                        foreach ($arg as $subkey => $value) {\n                            $arr[(string)$subkey] = $value->asArray();\n                        }\n                        if (!empty($arr)) {\n                            $args[$key] = $arr;\n                        }\n                    }\n                }\n            }\n\n            if (isset($node['json'])) {\n                $json = explode(' ', (string)$node['json']);\n                foreach ($json as $arg) {\n                    $args[$arg] = Mage::helper('core')->jsonDecode($args[$arg]);\n                }\n            }\n\n            $this->_translateLayoutNode($node, $args);\n            call_user_func_array(array($block, $method), array_values($args));\n        }\n\n        Varien_Profiler::stop($_profilerKey);\n\n        return $this;\n    }\n\n    /**\n     * Translate layout node\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param array $args\n     **/\n    protected function _translateLayoutNode($node, &$args)\n    {\n        if (isset($node['translate'])) {\n            // Translate value by core module if module attribute was not set\n            $moduleName = (isset($node['module'])) ? (string)$node['module'] : 'core';\n\n            // Handle translations in arrays if needed\n            $translatableArguments = explode(' ', (string)$node['translate']);\n            foreach ($translatableArguments as $translatableArgumentName) {\n                /*\n                 * .(dot) character is used as a path separator in nodes hierarchy\n                 * e.g. info.title means that Magento needs to translate value of <title> node\n                 * that is a child of <info> node\n                 */\n                // @var $argumentHierarhy array - path to translatable item in $args array\n                $argumentHierarchy = explode('.', $translatableArgumentName);\n                $argumentStack = &$args;\n                $canTranslate = true;\n                while (is_array($argumentStack) && count($argumentStack) > 0) {\n                    $argumentName = array_shift($argumentHierarchy);\n                    if (isset($argumentStack[$argumentName])) {\n                        /*\n                         * Move to the next element in arguments hieracrhy\n                         * in order to find target translatable argument\n                         */\n                        $argumentStack = &$argumentStack[$argumentName];\n                    } else {\n                        // Target argument cannot be found\n                        $canTranslate = false;\n                        break;\n                    }\n                }\n                if ($canTranslate && is_string($argumentStack)) {\n                    // $argumentStack is now a reference to target translatable argument so it can be translated\n                    $argumentStack = Mage::helper($moduleName)->__($argumentStack);\n                }\n            }\n        }\n    }\n\n    /**\n     * Save block in blocks registry\n     *\n     * @param string $name\n     * @param Mage_Core_Model_Layout $block\n     * @return $this\n     */\n    public function setBlock($name, $block)\n    {\n        $this->_blocks[$name] = $block;\n        return $this;\n    }\n\n    /**\n     * Remove block from registry\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function unsetBlock($name)\n    {\n        $this->_blocks[$name] = null;\n        unset($this->_blocks[$name]);\n        return $this;\n    }\n\n    /**\n     * Block Factory\n     *\n     * @param     string $type\n     * @param     string $name\n     * @param     array $attributes\n     * @return    Mage_Core_Block_Abstract|false\n     */\n    public function createBlock($type, $name = '', array $attributes = array())\n    {\n        try {\n            $block = $this->_getBlockInstance($type, $attributes);\n        } catch (Exception $e) {\n            Mage::logException($e);\n            return false;\n        }\n\n        if (empty($name) || '.'===$name[0]) {\n            $block->setIsAnonymous(true);\n            if (!empty($name)) {\n                $block->setAnonSuffix(substr($name, 1));\n            }\n            $name = 'ANONYMOUS_'.count($this->_blocks);\n        } elseif (isset($this->_blocks[$name]) && Mage::getIsDeveloperMode()) {\n            //Mage::throwException(Mage::helper('core')->__('Block with name \"%s\" already exists', $name));\n        }\n\n        $block->setType($type);\n        $block->setNameInLayout($name);\n        $block->addData($attributes);\n        $block->setLayout($this);\n\n        $this->_blocks[$name] = $block;\n        Mage::dispatchEvent('core_layout_block_create_after', array('block'=>$block));\n        return $this->_blocks[$name];\n    }\n\n    /**\n     * Add a block to registry, create new object if needed\n     *\n     * @param string|Mage_Core_Block_Abstract $block\n     * @param string $blockName\n     * @return Mage_Core_Block_Abstract\n     */\n    public function addBlock($block, $blockName)\n    {\n        return $this->createBlock($block, $blockName);\n    }\n\n    /**\n     * Create block object instance based on block type\n     *\n     * @param string $block\n     * @param array $attributes\n     * @return Mage_Core_Block_Abstract\n     */\n    protected function _getBlockInstance($block, array $attributes = array())\n    {\n        if (is_string($block)) {\n            if (strpos($block, '/')!==false) {\n                if (!$block = Mage::getConfig()->getBlockClassName($block)) {\n                    Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $block));\n                }\n            }\n            if (class_exists($block, false) || mageFindClassFile($block)) {\n                $block = new $block($attributes);\n            }\n        }\n        if (!$block instanceof Mage_Core_Block_Abstract) {\n            Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $block));\n        }\n        return $block;\n    }\n\n    /**\n     * Retrieve all blocks from registry as array\n     *\n     * @return array\n     */\n    public function getAllBlocks()\n    {\n        return $this->_blocks;\n    }\n\n    /**\n     * Get block object by name\n     *\n     * @param string $name\n     * @return Mage_Core_Block_Abstract|false\n     */\n    public function getBlock($name)\n    {\n        if (isset($this->_blocks[$name])) {\n            return $this->_blocks[$name];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add a block to output\n     *\n     * @param string $blockName\n     * @param string $method\n     * @return $this\n     */\n    public function addOutputBlock($blockName, $method = 'toHtml')\n    {\n        //$this->_output[] = array($blockName, $method);\n        $this->_output[$blockName] = array($blockName, $method);\n        return $this;\n    }\n\n    /**\n     * @param string $blockName\n     * @return $this\n     */\n    public function removeOutputBlock($blockName)\n    {\n        unset($this->_output[$blockName]);\n        return $this;\n    }\n\n    /**\n     * Get all blocks marked for output\n     *\n     * @return string\n     */\n    public function getOutput()\n    {\n        $out = '';\n        if (!empty($this->_output)) {\n            foreach ($this->_output as $callback) {\n                $out .= $this->getBlock($callback[0])->{$callback[1]}();\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Retrieve messages block\n     *\n     * @return Mage_Core_Block_Messages\n     */\n    public function getMessagesBlock()\n    {\n        $block = $this->getBlock('messages');\n        if ($block) {\n            return $block;\n        }\n        return $this->createBlock('core/messages', 'messages');\n    }\n\n    /**\n     * Enter description here...\n     *\n     * @param string $type\n     * @return Mage_Core_Block_Abstract\n     */\n    public function getBlockSingleton($type)\n    {\n        if (!isset($this->_helpers[$type])) {\n            $className = Mage::getConfig()->getBlockClassName($type);\n            if (!$className) {\n                Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $type));\n            }\n\n            $helper = new $className();\n            if ($helper) {\n                if ($helper instanceof Mage_Core_Block_Abstract) {\n                    $helper->setLayout($this);\n                }\n                $this->_helpers[$type] = $helper;\n            }\n        }\n        return $this->_helpers[$type];\n    }\n\n    /**\n     * Retrieve helper object\n     *\n     * @param   string $name\n     * @return  Mage_Core_Helper_Abstract|false\n     */\n    public function helper($name)\n    {\n        $helper = Mage::helper($name);\n        if (!$helper) {\n            return false;\n        }\n        return $helper->setLayout($this);\n    }\n\n    /**\n     * Lookup module name for translation from current specified layout node\n     *\n     * Priorities:\n     * 1) \"module\" attribute in the element\n     * 2) \"module\" attribute in any ancestor element\n     * 3) layout handle name - first 1 or 2 parts (namespace is determined automatically)\n     *\n     * @param Varien_Simplexml_Element $node\n     * @return string\n     */\n    public static function findTranslationModuleName(Varien_Simplexml_Element $node)\n    {\n        $result = $node->getAttribute('module');\n        if ($result) {\n            return (string)$result;\n        }\n        /** @var Varien_Simplexml_Element $element */\n        foreach (array_reverse($node->xpath('ancestor::*[@module]')) as $element) {\n            $result = $element->getAttribute('module');\n            if ($result) {\n                return (string)$result;\n            }\n        }\n        foreach ($node->xpath('ancestor-or-self::*[last()-1]') as $handle) {\n            $name = Mage::getConfig()->determineOmittedNamespace($handle->getName());\n            if ($name) {\n                return $name;\n            }\n        }\n        return 'core';\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Magento\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.txt.\n * It is also available through the world-wide-web at this URL:\n * http://opensource.org/licenses/osl-3.0.php\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@magento.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade Magento to newer\n * versions in the future. If you wish to customize Magento for your\n * needs please refer to http://www.magento.com for more information.\n *\n * @category    Mage\n * @package     Mage_Core\n * @copyright  Copyright (c) 2006-2020 Magento, Inc. (http://www.magento.com)\n * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)\n */\n\n/**\n * Layout model\n *\n * @category   Mage\n * @package    Mage_Core\n */\nclass Mage_Core_Model_Layout extends Varien_Simplexml_Config\n{\n    /**\n     * Layout Update module\n     *\n     * @var Mage_Core_Model_Layout_Update\n     */\n    protected $_update;\n\n    /**\n     * Blocks registry\n     *\n     * @var array\n     */\n    protected $_blocks = array();\n\n    /**\n     * Cache of block callbacks to output during rendering\n     *\n     * @var array\n     */\n    protected $_output = array();\n\n    /**\n     * Layout area (f.e. admin, frontend)\n     *\n     * @var string\n     */\n    protected $_area;\n\n    /**\n     * Helper blocks cache for this layout\n     *\n     * @var array\n     */\n    protected $_helpers = array();\n\n    /**\n     * Flag to have blocks' output go directly to browser as oppose to return result\n     *\n     * @var boolean\n     */\n    protected $_directOutput = false;\n\n    protected $invalidActions\n        = [\n            // explicitly not using class constant here Mage_Page_Block_Html_Topmenu_Renderer::class\n            // if the class does not exists it breaks.\n            ['block' => 'Mage_Page_Block_Html_Topmenu_Renderer', 'method' => 'render'],\n            ['block' => 'Mage_Core_Block_Template', 'method' => 'fetchview'],\n        ];\n\n    /**\n     * Class constructor\n     *\n     * @param array $data\n     */\n    public function __construct($data = array())\n    {\n        $this->_elementClass = Mage::getConfig()->getModelClassName('core/layout_element');\n        $this->setXml(simplexml_load_string('<layout/>', $this->_elementClass));\n        $this->_update = Mage::getModel('core/layout_update');\n        parent::__construct($data);\n    }\n\n    /**\n     * Layout update instance\n     *\n     * @return Mage_Core_Model_Layout_Update\n     */\n    public function getUpdate()\n    {\n        return $this->_update;\n    }\n\n    /**\n     * Set layout area\n     *\n     * @param   string $area\n     * @return  Mage_Core_Model_Layout\n     */\n    public function setArea($area)\n    {\n        $this->_area = $area;\n        return $this;\n    }\n\n    /**\n     * Retrieve layout area\n     *\n     * @return string\n     */\n    public function getArea()\n    {\n        return $this->_area;\n    }\n\n    /**\n     * Declaring layout direct output flag\n     *\n     * @param   bool $flag\n     * @return  Mage_Core_Model_Layout\n     */\n    public function setDirectOutput($flag)\n    {\n        $this->_directOutput = $flag;\n        return $this;\n    }\n\n    /**\n     * Retrieve derect output flag\n     *\n     * @return bool\n     */\n    public function getDirectOutput()\n    {\n        return $this->_directOutput;\n    }\n\n    /**\n     * Loyout xml generation\n     *\n     * @return $this\n     */\n    public function generateXml()\n    {\n        $xml = $this->getUpdate()->asSimplexml();\n        $removeInstructions = $xml->xpath(\"//remove\");\n        if (is_array($removeInstructions)) {\n            foreach ($removeInstructions as $infoNode) {\n                $attributes = $infoNode->attributes();\n                $blockName = (string)$attributes->name;\n                if ($blockName) {\n                    $ignoreNodes = $xml->xpath(\"//block[@name='\".$blockName.\"']\");\n                    if (!is_array($ignoreNodes)) {\n                        continue;\n                    }\n                    $ignoreReferences = $xml->xpath(\"//reference[@name='\".$blockName.\"']\");\n                    if (is_array($ignoreReferences)) {\n                        $ignoreNodes = array_merge($ignoreNodes, $ignoreReferences);\n                    }\n\n                    foreach ($ignoreNodes as $block) {\n                        if ($block->getAttribute('ignore') !== null) {\n                            continue;\n                        }\n                        $acl = (string)$attributes->acl;\n                        if ($acl && Mage::getSingleton('admin/session')->isAllowed($acl)) {\n                            continue;\n                        }\n                        if (!isset($block->attributes()->ignore)) {\n                            $block->addAttribute('ignore', true);\n                        }\n                    }\n                }\n            }\n        }\n        $this->setXml($xml);\n        return $this;\n    }\n\n    /**\n     * Create layout blocks hierarchy from layout xml configuration\n     *\n     * @param Mage_Core_Model_Layout_Element|null $parent\n     */\n    public function generateBlocks($parent = null)\n    {\n        if (empty($parent)) {\n            $parent = $this->getNode();\n        }\n        foreach ($parent as $node) {\n            $attributes = $node->attributes();\n            if ((bool)$attributes->ignore) {\n                continue;\n            }\n            switch ($node->getName()) {\n                case 'block':\n                    $this->_generateBlock($node, $parent);\n                    $this->generateBlocks($node);\n                    break;\n\n                case 'reference':\n                    $this->generateBlocks($node);\n                    break;\n\n                case 'action':\n                    $this->_generateAction($node, $parent);\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Add block object to layout based on xml node data\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param Mage_Core_Model_Layout_Element $parent\n     * @return $this\n     */\n    protected function _generateBlock($node, $parent)\n    {\n        if (!empty($node['class'])) {\n            $className = (string)$node['class'];\n        } else {\n            $className = (string)$node['type'];\n        }\n\n        $blockName = (string)$node['name'];\n        $_profilerKey = 'BLOCK: '.$blockName;\n        Varien_Profiler::start($_profilerKey);\n\n        $block = $this->addBlock($className, $blockName);\n        if (!$block) {\n            return $this;\n        }\n\n        if (!empty($node['parent'])) {\n            $parentBlock = $this->getBlock((string)$node['parent']);\n        } else {\n            $parentName = $parent->getBlockName();\n            if (!empty($parentName)) {\n                $parentBlock = $this->getBlock($parentName);\n            }\n        }\n        if (!empty($parentBlock)) {\n            $alias = isset($node['as']) ? (string)$node['as'] : '';\n            if (isset($node['before'])) {\n                $sibling = (string)$node['before'];\n                if ('-'===$sibling) {\n                    $sibling = '';\n                }\n                $parentBlock->insert($block, $sibling, false, $alias);\n            } elseif (isset($node['after'])) {\n                $sibling = (string)$node['after'];\n                if ('-'===$sibling) {\n                    $sibling = '';\n                }\n                $parentBlock->insert($block, $sibling, true, $alias);\n            } else {\n                $parentBlock->append($block, $alias);\n            }\n        }\n        if (!empty($node['template'])) {\n            $block->setTemplate((string)$node['template']);\n        }\n\n        if (!empty($node['output'])) {\n            $method = (string)$node['output'];\n            $this->addOutputBlock($blockName, $method);\n        }\n        Varien_Profiler::stop($_profilerKey);\n\n        return $this;\n    }\n\n    /**\n     * Enter description here...\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param Mage_Core_Model_Layout_Element $parent\n     * @return $this\n     */\n    protected function _generateAction($node, $parent)\n    {\n        if (isset($node['ifconfig']) && ($configPath = (string)$node['ifconfig'])) {\n            if (!Mage::getStoreConfigFlag($configPath)) {\n                return $this;\n            }\n        }\n\n        $method = (string)$node['method'];\n        if (!empty($node['block'])) {\n            $parentName = (string)$node['block'];\n        } else {\n            $parentName = $parent->getBlockName();\n        }\n\n        $_profilerKey = 'BLOCK ACTION: '.$parentName.' -> '.$method;\n        Varien_Profiler::start($_profilerKey);\n\n        if (!empty($parentName)) {\n            $block = $this->getBlock($parentName);\n        }\n        if (!empty($block)) {\n            $args = (array)$node->children();\n            unset($args['@attributes']);\n\n            foreach ($args as $key => $arg) {\n                if (($arg instanceof Mage_Core_Model_Layout_Element)) {\n                    if (isset($arg['helper'])) {\n                        $helperName = explode('/', (string)$arg['helper']);\n                        $helperMethod = array_pop($helperName);\n                        $helperName = implode('/', $helperName);\n                        $arg = $arg->asArray();\n                        unset($arg['@']);\n                        $args[$key] = call_user_func_array(array(Mage::helper($helperName), $helperMethod), $arg);\n                    } else {\n                        /**\n                         * if there is no helper we hope that this is assoc array\n                         */\n                        $arr = array();\n                        /**\n                         * @var string $subkey\n                         * @var Mage_Core_Model_Layout_Element $value\n                         */\n                        foreach ($arg as $subkey => $value) {\n                            $arr[(string)$subkey] = $value->asArray();\n                        }\n                        if (!empty($arr)) {\n                            $args[$key] = $arr;\n                        }\n                    }\n                }\n            }\n\n            if (isset($node['json'])) {\n                $json = explode(' ', (string)$node['json']);\n                foreach ($json as $arg) {\n                    $args[$arg] = Mage::helper('core')->jsonDecode($args[$arg]);\n                }\n            }\n\n            $this->validateAgainstBlacklist($block, $method, $args);\n\n            $this->_translateLayoutNode($node, $args);\n            call_user_func_array(array($block, $method), array_values($args));\n        }\n\n        Varien_Profiler::stop($_profilerKey);\n\n        return $this;\n    }\n\n    /**\n     * @param Mage_Core_Block_Abstract $block\n     * @param string                   $method\n     * @param string[]                 $args\n     *\n     * @throws Mage_Core_Exception\n     */\n    protected function validateAgainstBlacklist(Mage_Core_Block_Abstract $block, $method, array $args)\n    {\n        foreach ($this->invalidActions as $action) {\n            if ($block instanceof $action['block'] && $action['method'] === strtolower($method)) {\n                Mage::throwException(\n                    sprintf('Action with combination block %s and method %s is forbidden.', get_class($block), $method)\n                );\n            }\n        }\n    }\n\n    /**\n     * Translate layout node\n     *\n     * @param Varien_Simplexml_Element $node\n     * @param array $args\n     **/\n    protected function _translateLayoutNode($node, &$args)\n    {\n        if (isset($node['translate'])) {\n            // Translate value by core module if module attribute was not set\n            $moduleName = (isset($node['module'])) ? (string)$node['module'] : 'core';\n\n            // Handle translations in arrays if needed\n            $translatableArguments = explode(' ', (string)$node['translate']);\n            foreach ($translatableArguments as $translatableArgumentName) {\n                /*\n                 * .(dot) character is used as a path separator in nodes hierarchy\n                 * e.g. info.title means that Magento needs to translate value of <title> node\n                 * that is a child of <info> node\n                 */\n                // @var $argumentHierarhy array - path to translatable item in $args array\n                $argumentHierarchy = explode('.', $translatableArgumentName);\n                $argumentStack = &$args;\n                $canTranslate = true;\n                while (is_array($argumentStack) && count($argumentStack) > 0) {\n                    $argumentName = array_shift($argumentHierarchy);\n                    if (isset($argumentStack[$argumentName])) {\n                        /*\n                         * Move to the next element in arguments hieracrhy\n                         * in order to find target translatable argument\n                         */\n                        $argumentStack = &$argumentStack[$argumentName];\n                    } else {\n                        // Target argument cannot be found\n                        $canTranslate = false;\n                        break;\n                    }\n                }\n                if ($canTranslate && is_string($argumentStack)) {\n                    // $argumentStack is now a reference to target translatable argument so it can be translated\n                    $argumentStack = Mage::helper($moduleName)->__($argumentStack);\n                }\n            }\n        }\n    }\n\n    /**\n     * Save block in blocks registry\n     *\n     * @param string $name\n     * @param Mage_Core_Model_Layout $block\n     * @return $this\n     */\n    public function setBlock($name, $block)\n    {\n        $this->_blocks[$name] = $block;\n        return $this;\n    }\n\n    /**\n     * Remove block from registry\n     *\n     * @param string $name\n     * @return $this\n     */\n    public function unsetBlock($name)\n    {\n        $this->_blocks[$name] = null;\n        unset($this->_blocks[$name]);\n        return $this;\n    }\n\n    /**\n     * Block Factory\n     *\n     * @param     string $type\n     * @param     string $name\n     * @param     array $attributes\n     * @return    Mage_Core_Block_Abstract|false\n     */\n    public function createBlock($type, $name = '', array $attributes = array())\n    {\n        try {\n            $block = $this->_getBlockInstance($type, $attributes);\n        } catch (Exception $e) {\n            Mage::logException($e);\n            return false;\n        }\n\n        if (empty($name) || '.'===$name[0]) {\n            $block->setIsAnonymous(true);\n            if (!empty($name)) {\n                $block->setAnonSuffix(substr($name, 1));\n            }\n            $name = 'ANONYMOUS_'.count($this->_blocks);\n        } elseif (isset($this->_blocks[$name]) && Mage::getIsDeveloperMode()) {\n            //Mage::throwException(Mage::helper('core')->__('Block with name \"%s\" already exists', $name));\n        }\n\n        $block->setType($type);\n        $block->setNameInLayout($name);\n        $block->addData($attributes);\n        $block->setLayout($this);\n\n        $this->_blocks[$name] = $block;\n        Mage::dispatchEvent('core_layout_block_create_after', array('block'=>$block));\n        return $this->_blocks[$name];\n    }\n\n    /**\n     * Add a block to registry, create new object if needed\n     *\n     * @param string|Mage_Core_Block_Abstract $block\n     * @param string $blockName\n     * @return Mage_Core_Block_Abstract\n     */\n    public function addBlock($block, $blockName)\n    {\n        return $this->createBlock($block, $blockName);\n    }\n\n    /**\n     * Create block object instance based on block type\n     *\n     * @param string $block\n     * @param array $attributes\n     * @return Mage_Core_Block_Abstract\n     */\n    protected function _getBlockInstance($block, array $attributes = array())\n    {\n        if (is_string($block)) {\n            if (strpos($block, '/')!==false) {\n                if (!$block = Mage::getConfig()->getBlockClassName($block)) {\n                    Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $block));\n                }\n            }\n            if (class_exists($block, false) || mageFindClassFile($block)) {\n                $block = new $block($attributes);\n            }\n        }\n        if (!$block instanceof Mage_Core_Block_Abstract) {\n            Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $block));\n        }\n        return $block;\n    }\n\n    /**\n     * Retrieve all blocks from registry as array\n     *\n     * @return array\n     */\n    public function getAllBlocks()\n    {\n        return $this->_blocks;\n    }\n\n    /**\n     * Get block object by name\n     *\n     * @param string $name\n     * @return Mage_Core_Block_Abstract|false\n     */\n    public function getBlock($name)\n    {\n        if (isset($this->_blocks[$name])) {\n            return $this->_blocks[$name];\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Add a block to output\n     *\n     * @param string $blockName\n     * @param string $method\n     * @return $this\n     */\n    public function addOutputBlock($blockName, $method = 'toHtml')\n    {\n        //$this->_output[] = array($blockName, $method);\n        $this->_output[$blockName] = array($blockName, $method);\n        return $this;\n    }\n\n    /**\n     * @param string $blockName\n     * @return $this\n     */\n    public function removeOutputBlock($blockName)\n    {\n        unset($this->_output[$blockName]);\n        return $this;\n    }\n\n    /**\n     * Get all blocks marked for output\n     *\n     * @return string\n     */\n    public function getOutput()\n    {\n        $out = '';\n        if (!empty($this->_output)) {\n            foreach ($this->_output as $callback) {\n                $out .= $this->getBlock($callback[0])->{$callback[1]}();\n            }\n        }\n\n        return $out;\n    }\n\n    /**\n     * Retrieve messages block\n     *\n     * @return Mage_Core_Block_Messages\n     */\n    public function getMessagesBlock()\n    {\n        $block = $this->getBlock('messages');\n        if ($block) {\n            return $block;\n        }\n        return $this->createBlock('core/messages', 'messages');\n    }\n\n    /**\n     * Enter description here...\n     *\n     * @param string $type\n     * @return Mage_Core_Block_Abstract\n     */\n    public function getBlockSingleton($type)\n    {\n        if (!isset($this->_helpers[$type])) {\n            $className = Mage::getConfig()->getBlockClassName($type);\n            if (!$className) {\n                Mage::throwException(Mage::helper('core')->__('Invalid block type: %s', $type));\n            }\n\n            $helper = new $className();\n            if ($helper) {\n                if ($helper instanceof Mage_Core_Block_Abstract) {\n                    $helper->setLayout($this);\n                }\n                $this->_helpers[$type] = $helper;\n            }\n        }\n        return $this->_helpers[$type];\n    }\n\n    /**\n     * Retrieve helper object\n     *\n     * @param   string $name\n     * @return  Mage_Core_Helper_Abstract|false\n     */\n    public function helper($name)\n    {\n        $helper = Mage::helper($name);\n        if (!$helper) {\n            return false;\n        }\n        return $helper->setLayout($this);\n    }\n\n    /**\n     * Lookup module name for translation from current specified layout node\n     *\n     * Priorities:\n     * 1) \"module\" attribute in the element\n     * 2) \"module\" attribute in any ancestor element\n     * 3) layout handle name - first 1 or 2 parts (namespace is determined automatically)\n     *\n     * @param Varien_Simplexml_Element $node\n     * @return string\n     */\n    public static function findTranslationModuleName(Varien_Simplexml_Element $node)\n    {\n        $result = $node->getAttribute('module');\n        if ($result) {\n            return (string)$result;\n        }\n        /** @var Varien_Simplexml_Element $element */\n        foreach (array_reverse($node->xpath('ancestor::*[@module]')) as $element) {\n            $result = $element->getAttribute('module');\n            if ($result) {\n                return (string)$result;\n            }\n        }\n        foreach ($node->xpath('ancestor-or-self::*[last()-1]') as $handle) {\n            $name = Mage::getConfig()->determineOmittedNamespace($handle->getName());\n            if ($name) {\n                return $name;\n            }\n        }\n        return 'core';\n    }\n}\n"], "filenames": ["app/code/core/Mage/Core/Model/Layout.php"], "buggy_code_start_loc": [76], "buggy_code_end_loc": [354], "fixing_code_start_loc": [77], "fixing_code_end_loc": [383], "type": "CWE-22", "message": "OpenMage is a community-driven alternative to Magento CE. In OpenMage before versions 19.4.10 and 20.0.6, there is a vulnerability which enables remote code execution. In affected versions an administrator with permission to update product data to be able to store an executable file on the server and load it via layout xml. The latest OpenMage Versions up from 19.4.10 and 20.0.6 have this issue solved.", "other": {"cve": {"id": "CVE-2020-26252", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-20T22:15:11.000", "lastModified": "2021-01-28T18:32:38.703", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OpenMage is a community-driven alternative to Magento CE. In OpenMage before versions 19.4.10 and 20.0.6, there is a vulnerability which enables remote code execution. In affected versions an administrator with permission to update product data to be able to store an executable file on the server and load it via layout xml. The latest OpenMage Versions up from 19.4.10 and 20.0.6 have this issue solved."}, {"lang": "es", "value": "OpenMage es una alternativa impulsada por la comunidad a Magento CE. En OpenMage versiones anteriores a 19.4.10 y 20.0.6, se presenta una vulnerabilidad que permite una ejecuci\u00f3n de c\u00f3digo remota. En las versiones afectadas, un administrador con permiso para actualizar los datos del producto es capaz de almacenar un archivo ejecutable en el servidor y cargarlo por medio de un dise\u00f1o xml. Las \u00faltimas versiones de OpenMage desde 19.4.10 y 20.0.6, tienen este problema solucionado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}, {"lang": "en", "value": "CWE-434"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage:*:*:*:*:lts:*:*:*", "versionEndExcluding": "19.4.10", "matchCriteriaId": "E706EF46-D4ED-40AD-B1D8-EAA875FB326B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:openmage:openmage:*:*:*:*:lts:*:*:*", "versionStartIncluding": "20.0.0", "versionEndExcluding": "20.0.6", "matchCriteriaId": "4AB9FF3B-057A-40BC-9506-5BCA449E6CC2"}]}]}], "references": [{"url": "https://github.com/OpenMage/magento-lts/commit/0786aa48bc7b618cfe37b59f45e1da3714c533c3", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/OpenMage/magento-lts/security/advisories/GHSA-99m6-r53j-4hh2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/OpenMage/magento-lts/commit/0786aa48bc7b618cfe37b59f45e1da3714c533c3"}}