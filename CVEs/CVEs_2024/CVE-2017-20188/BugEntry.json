{"buggy_code": ["/*\n * ***** BEGIN LICENSE BLOCK *****\n * Zimbra Collaboration Suite Web Client\n * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Synacor, Inc.\n *\n * The contents of this file are subject to the Common Public Attribution License Version 1.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at: https://www.zimbra.com/license\n * The License is based on the Mozilla Public License Version 1.1 but Sections 14 and 15\n * have been added to cover use of software over a computer network and provide for limited attribution\n * for the Original Developer. In addition, Exhibit A has been modified to be consistent with Exhibit B.\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied.\n * See the License for the specific language governing rights and limitations under the License.\n * The Original Code is Zimbra Open Source Web Client.\n * The Initial Developer of the Original Code is Zimbra, Inc.  All rights to the Original Code were\n * transferred by Zimbra, Inc. to Synacor, Inc. on September 14, 2015.\n *\n * All portions of the code are Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Synacor, Inc. All Rights Reserved.\n * ***** END LICENSE BLOCK *****\n */\n\n\n//\n//\tFactory to create XFormItems from simple attributes (eg: from JS object literals or XML)\n//\n\n/**\n * This object is never instantiated.\n * @class\n * @private \n */\nXFormItemFactory = function() {}\n\n/**\n * Creates a form item.\n *\n * @param attributes\t\tan object whose properties map to component attribute name/value pairs\n * @param parentItem \t\tthe parent item of this item\n * @param {XForm}\txform      the form to which this item is being created\n * \n * @private\n */\nXFormItemFactory.createItem = function (attributes, parentItem, xform) {\n\t// assign a modelItem to the item\n\tvar refPath = this.getRefPath(attributes, parentItem);\n\tvar subRefPath = this.getSubRefPath(attributes, parentItem);\n\n\tvar modelItem, subModelItem;\n\tif (refPath != null) {\n\t\t// assign a modelItem to the item\n\t\tmodelItem = this.getModelItem(xform.xmodel, attributes, refPath);\n\t}\n\t\n\tif (subRefPath != null) {\n\t\t// assign a modelItem to the item\n\t\tsubModelItem = this.getModelItem(xform.xmodel, attributes, subRefPath);\n\t}\n\t// get the class for that type and create one\n\tvar type = this.getItemType(attributes, modelItem);\n\tvar constructor = this.getItemTypeConstructor(type, xform);\n\n\tvar item = new constructor();\n\titem._setAttributes(attributes);\n\n\t// get a unique id for the item\n\tvar idPrefix = (\tattributes.id ? xform.getId() + \"_\" + attributes.id :\n\t\t\t\t\t\t\t  refPath ? xform.getId() + \"_\" + refPath :\n\t\t\t\t\titem.__parentItem ? item.__parentItem.getId() :\n\t\t\t\t\t\t\t\t\t\txform.getId() + \"_\" + item.type\n\t\t\t\t\t);\n\t// assign a unique id to each item\n\t//\t(if the item specifies an id, we use a variant of that, just in case there's more than one)\n\titem.id = xform.getUniqueId(idPrefix);\n\n\titem.refPath = refPath;\n\titem.subRefPath = subRefPath;\n\titem.__modelItem = modelItem;\n\titem.__subModelItem = subModelItem;\n\t\n\titem.__xform = xform;\n\titem.__parentItem = parentItem;\n\t\n\t// assign the item into our form's index so we can be found later\n\txform.indexItem(item, item.id);\n\t\n\n\t// tell the item to initialize any special properties it needs to on construction\n\titem.initFormItem();\n\t\n\t\t\n\treturn item;\n} \n\nXFormItemFactory.getRefPath = function (attributes, parentItem) {\n\tif (attributes.refPath) return attributes.refPath;\n\t\n\tvar ref = attributes.ref;\n\tif (ref == null) return null;\n\t\n\tif (parentItem) {\n\t\tvar parentPath = parentItem.getRefPath();\n\t\tif (parentPath == null) parentPath = \"\";\n\t} else {\n\t\tvar parentPath = \"\";\n\t}\n\t\n\tvar path = ref;\n\tif (ref == \".\") {\n\t\tpath = parentPath;\n\n\t} else if (ref == \"..\") {\n\t\tparentPath = parentPath.split(\"/\");\n\t\tpath = parentPath.slice(0, parentPath.length - 1).join(\"/\");\n\n\t} else if (parentPath == \"\") {\n\t\tpath = ref;\n\n\t} else {\n\t\tpath = parentPath + \"/\" + ref;\n\t}\n\treturn path;\n}\n\nXFormItemFactory.getSubRefPath = function (attributes, parentItem) {\n\tif (attributes.subRefPath) return attributes.subRefPath;\n\t\n\tvar subRref = attributes.subRef;\n\tif (subRref == null) return null;\n\t\n\tif (parentItem) {\n\t\tvar parentPath = parentItem.getSubRefPath();\n\t\tif (parentPath == null) parentPath = \"\";\n\t} else {\n\t\tvar parentPath = \"\";\n\t}\n\t\n\tvar path = subRref;\n\tif (subRref == \".\") {\n\t\tpath = parentPath;\n\n\t} else if (subRref == \"..\") {\n\t\tparentPath = parentPath.split(\"/\");\n\t\tpath = parentPath.slice(0, parentPath.length - 1).join(\"/\");\n\n\t} else if (parentPath == \"\") {\n\t\tpath = subRref;\n\n\t} else {\n\t\tpath = parentPath + \"/\" + subRref;\n\t}\n\treturn path;\n}\n\nXFormItemFactory.getModelItem = function (xmodel, attributes, refPath) {\n\tif (refPath == null || refPath == \"\") return null;\n\treturn xmodel.getItem(refPath, true);\n}\n\nXFormItemFactory.getItemType = function (attributes, modelItem) {\n\tvar type = attributes.type;\n\n\tif (type == null) {\n\t\ttype = attributes.type = _OUTPUT_;\n\t}\n\t\n\tvar modelType = (modelItem && modelItem.type ? modelItem.type : _STRING_);\n\n\tif (type == _INPUT_) {\n\t\tif (attributes.value !== _UNDEFINED_) {\n\t\t\ttype = _CHECKBOX_;\n\t\t} else {\n\t\t\tswitch (modelType) {\n\t\t\t\tcase _STRING_:\n\t\t\t\tcase _NUMBER_:\n\t\t\t\t\ttype = _INPUT_;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _DATE_:\n\t\t\t\tcase _DATETIME_:\n\t\t\t\tcase _TIME_:\n\t\t\t\t\ttype = modelType;\t\t\t\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\ttype = _INPUT_;\n\t\t\t}\n\t\t}\n\t} else if (type == _SELECT_) {\n\t\tvar appearance = attributes.appearance;\n\t\tif (appearance == _RADIO_) {\n\t\t\ttype = _RADIO_;\n\t\t} else {\n\t\t\ttype = _SELECT_;\n\t\t}\n\t}\n\treturn type;\n}\n\nXFormItemFactory.typeConstructorMap = {};\n\nXFormItemFactory.createItemType = \nfunction (typeConstant, typeName, constructor, superClassConstructor) {\n\tif (constructor == null) constructor = new Function();\n\tif (typeof superClassConstructor == \"string\") superClassConstructor = this.getItemTypeConstructor(superClassConstructor);\n\tif (superClassConstructor == null) superClassConstructor = XFormItem;\n\n\t// initialize the constructor\n\tconstructor.prototype = new superClassConstructor();\t\n\n\tconstructor.prototype.type = typeName;\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.toString = new Function(\"return '[XFormItem:\" + typeName + \" ' + this.getId() + ']'\");\n\tconstructor.toString = new Function(\"return '[Class XFormItem:\" + typeName + \"]'\");\n\t\n\t// put the item type into the typemap\n\tthis.registerItemType(typeConstant, typeName, constructor);\n\t\n\t// return the prototype\n\treturn constructor;\n}\n\nXFormItemFactory.registerItemType = \nfunction(typeConstant, typeName, constructor) {\n\t// assign the type constant to the window so everyone else can use it\n\twindow[typeConstant] = typeName;\n\tthis.typeConstructorMap[typeName] = constructor;\t\n}\n\nXFormItemFactory.defaultItemType = \"output\";\nXFormItemFactory.getItemTypeConstructor = \nfunction (typeName, form) {\n\tvar typeConstructorMap = (form && form.typeConstructorMap ? form.typeConstructorMap : this.typeConstructorMap);\n\t\n\tvar typeConstructor = typeConstructorMap[typeName];\n\tif (typeConstructor == null) {\n\t\tvar defaultItemType = (form ? form.defaultItemType : this.defaultItemType);\n\t\ttypeConstructorMap[defaultItemType];\n\t}\n\treturn typeConstructor;\n}\n\nXFormItemFactory.quickClone = \nfunction(object) {\n\tthis.cloner.prototype = object;\n\treturn new this.cloner();\n}\nXFormItemFactory.cloner = function(){}\n\nXFormItemFactory.initItemDefaults = function(form, itemDefaults) {\n\t// create a clone of the XFormItemFactory typeConstructorMap for the form\n\tform.typeConstructorMap =  this.quickClone(this.typeConstructorMap);\n\n\tif (itemDefaults == null) itemDefaults = form.itemDefaults;\n\tif (itemDefaults != null) {\n\t\t// for each type in itemDefaults\n\t\tfor (var type in itemDefaults) {\n\t\t\tvar originalConstructor = this.typeConstructorMap[type];\n\t\t\tvar defaults = itemDefaults[type];\n\n\t\t\tif (originalConstructor == null) {\n\t\t\t\ttype = window[type];\n\t\t\t\toriginalConstructor = this.typeConstructorMap[type];\n\t\t\t}\n\t\t\tif (originalConstructor == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar newConstructor = form.typeConstructorMap[type] = new Function();\n\t\t\tnewConstructor.prototype = new originalConstructor();\n\t\t\t// NOTE: reassigning the constructor here is technically correct,\n\t\t\t//\t\tbut will result in (item.constructor == originalClass.constructor) not working...\n\t\t\tnewConstructor.prototype.constructor = newConstructor;\n\t\t\t\n\t\t\tfor (var prop in defaults) {\n\t\t\t\tnewConstructor.prototype[prop] = defaults[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n//\n//\tAbstract Class XFormItem\n//\n//\tAll other form item classes inherit from this.\n//\n\n\n/**\n * @private\n */\nXFormItem = function() {}\nXFormItem.prototype.constructor = XFormItem;\nXFormItemFactory.registerItemType(\"_FORM_ITEM_\", \"form_item\", XFormItem);\n\nXFormItem.ERROR_STATE_ERROR = 0;\nXFormItem.ERROR_STATE_VALID = 1;\n\n\n//\n// set base class defaults\n// \n\nXFormItem.prototype._isXFormItem = true;\n\n// outputting and inserting\nXFormItem.prototype.writeElementDiv = false;\n\n// appearance\nXFormItem.prototype.labelLocation = _LEFT_;\nXFormItem.prototype.tableCssClass = \"xform_table\";\t\t\t\t// table that encloses one or more cells\nXFormItem.prototype.tableCssStyle = null;\t\t\t\t\t\t// table that encloses one or more cells\nXFormItem.prototype.containerCssClass =  \"xform_container\";\t\t// td that contains the element\nXFormItem.prototype.containerCssStyle =  null;\t\t\t\t\t// td that contains the element\nXFormItem.prototype.cssClass = null;\t\t\t\t\t\t\t// element itself (or element div)\nXFormItem.prototype.labelCssClass =  \"xform_label\";\t\t\t\t// label td\nXFormItem.prototype.errorCssClass =  \"xform_error\";\t\t\t\t// error DIV\nXFormItem.prototype.nowrap = false; \nXFormItem.prototype.labelWrap = false; \nXFormItem.prototype.align = _UNDEFINED_;\t\t\t\t\t\t// _UNDEFINED_ because it's a bit faster to draw\nXFormItem.prototype.valign = _UNDEFINED_;\t\t\t\t\t\t// _UNDEFINED_ because it's a bit faster to draw\nXFormItem.prototype.focusable = false;\nXFormItem.prototype.bmolsnr = false; //Be My Own Listener\n// updating\nXFormItem.prototype.forceUpdate = false;\t\t\t// SET TO true TO FORCE AN ITEM TO UPDATE, EVEN IF VALUE HAS NOT CHANGED\n//XFormItem.prototype.relevant;\n//XFormItem.prototype.relevantIfEmpty = true;\n//XFormItem.prototype.relevantBehavior = _HIDE_;\t\t//\t_HIDE_, _DISABLE_\nXFormItem.prototype.isBlockElement = false;\nXFormItem.prototype.visibilityChecks = []; //array of method references that check whether this element should be visible\nXFormItem.prototype.enableDisableChecks = []; //array of methods that check whether this element should be enabled \nXFormItem.prototype.visibilityChangeEventSources = []; //paths to XModelItems that influence visibility of this XFormItem\nXFormItem.prototype.enableDisableChangeEventSources = []; //paths to XModelItems that influence Enabled/Disabled state of this XFormItem\nXFormItem.prototype.valueChangeEventSources = []; //paths to XModelItems that influence the value this XFormItem\n\n/* array of references to XModel items that may affect the visibility of this item. \n* Whenever any of the XModel items referenced in this array change, they will notify this XForm item\n*/\nXFormItem.prototype.visibilityUpdaters = [];\n\n/* array of references to XModel items that may affect whether this item is enabled. \n* Whenever any of the XModel items referenced in this array change, they will notify this XForm item\n*/\nXFormItem.prototype.enabledDisabledUpdaters = [];\n\n// changing/saving\nXFormItem.prototype.elementChangeHandler = \"onchange\";\n\n                              \n// choices map\nXFormItem.prototype.selection = _CLOSED_;\nXFormItem.prototype.openSelectionLabel = \"\";\n\n// error handling\nXFormItem.prototype.errorLocation = _SELF_;\n\n// show help tooltip icon\nXFormItem.prototype.helpTooltip = false;\n//\n// Methods\n//\n\n\n// set the initializing attributes of this firm\nXFormItem.prototype._setAttributes = function (attributes) {\n\tthis.__attributes = attributes;\n}\n\n// override this to do any item initialization you need to do\n//\tNOTE: this is called AFTER the formItem is initiaized with its modelItem, set in its form, etc\nXFormItem.prototype.initFormItem = function() {\n//\twindow.status = '';\n\tif(this.focusable) {\n\t\tvar currentTabId = XFormItem.getParentTabGroupId(this);\n\t\tif(currentTabId) {\n\t\t\tvar tabGroupItem = this.getForm().getItemById(currentTabId);\n\t\t\ttabGroupItem.tabIdOrder.push(this.getId());\n\t\t}\n\t}\n}\t\n\n// DEFAULT IMPLEMENTATION calls this.getForm().initItemList() on our items array\n//\tSOME CLASSES MAY NOT WANT TO DO THIS (eg: _REPEAT_, which does this dynamically later)\nXFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\tif (items != null) {\n\t\tthis.items = this.getForm().initItemList(items, this);\n\t}\n}\n\nXFormItem.prototype.registerActiveChild = function(item) {\n\tif(!this.activeChildren)\n\t\tthis.activeChildren = {};\n\tthis.activeChildren[item.getId()]=true;\t\n}\n\nXFormItem.prototype.signUpForEvents = function () {\n\tvar modelItem;\n\tmodelItem = this.getModelItem();\n\n\t//register this item's listeners with model items\n\tvar itemsVisibilityChangers = this.getInheritedProperty(\"visibilityChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsVisibilityChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsVisibilityChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsVisibilityChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.updateVisibilityLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar itemsEnableDisableChangers = this.getInheritedProperty(\"enableDisableChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsEnableDisableChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsEnableDisableChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsEnableDisableChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.updateEnabledDisabledLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tvar itemsValueChangers = this.getInheritedProperty(\"valueChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsValueChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsValueChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsValueChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.valueChangeLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//listen to changes of my own model item\n\tvar bmolsnr = this.getInheritedProperty(\"bmolsnr\");\n\tif(modelItem && bmolsnr) {\n\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.valueChangeLsnr);\n\t\tmodelItem.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t}\n}\n\nXFormItem.prototype.valueChangeLsnr = function (event) {\n\tvar updateMethod = this.getUpdateElementMethod();\n\tif(!updateMethod)\n\t\treturn;\n\t\t\n\tvar value = this.getInstanceValue();\t\n\tvar getDisplayValueMethod = this.getDisplayValueMethod();\n\tif(getDisplayValueMethod)\n\t\tvalue = getDisplayValueMethod.call(this,value);\n\t\n\tupdateMethod.call(this, value);\n}\n\nXFormItem.prototype.updateElement = function() {\n\t//run update methods on all initialized children\n\tif(!this.activeChildren)\n\t\treturn;\n\t\t\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateElementMethod();\n\t\t\t\tvar getDisplayValueMethod = item.getDisplayValueMethod();\n\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tvar xmodel = this.getModel();\n\t\t\t\t\tvar value = item.getRefPath() ? xmodel.getInstanceValue(this.getInstance(), item.getRefPath()) : item.getValue();\n\t\t\t\t\tif (getDisplayValueMethod) {\n\t\t\t\t\t\tvalue =  getDisplayValueMethod.call(item,value);\n\t\t\t\t\t}\n\t\t\t\t\tupdateMethod.call(item,value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nXFormItem.prototype.hasReadPermission = function (refToCheck) {\n\tvar instance = this.getInstance();\n\tif (!instance.getAttrs)\n\t\treturn false;\n\t\n\tvar refPath=null;\n\tif(refToCheck) {\n\t\trefPath=refToCheck;\n\t} else {\n\t\tif(!this.refPath)\n\t\t\treturn true;\n\t\telse\n\t\t\trefPath=this.refPath;\n\t}\n\t\t\n\treturn ((instance.getAttrs.all === true) || (instance.getAttrs[refPath] === true));\n}\n\nXFormItem.prototype.hasWritePermission = function (refToCheck) {\n\tvar instance = this.getInstance();\n\tif (!instance.setAttrs)\n\t\treturn false;\n\t\n\tvar refPath=null;\n\tif(refToCheck) {\n\t\trefPath=refToCheck;\n\t} else {\n\t\tif(!this.refPath)\n\t\t\treturn true;\n\t\telse\n\t\t\trefPath=this.refPath;\n\t}\n\t\t\n\treturn ((instance.setAttrs.all === true) || (instance.setAttrs[refPath] === true));\n}\n\nXFormItem.prototype.hasRight = function (right) {\n\tvar instance = this.getInstance();\n\tif (!instance.rights)\n\t\treturn false;\n\t\n\tif(!right)\n\t\treturn true;\n\t\t\n\treturn (instance.rights[right] === true);\n}\n\nXFormItem.prototype.updateVisibilityLsnr = function (event) {\n\tvar updateMethod = this.getUpdateVisibilityMethod();\n\tupdateMethod.call(this);\n}\n\nXFormItem.prototype.updateVisibility = function () {\n\tvar isVisible = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisVisible=this.getParentItem().getIsVisible();\n\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isVisible) {\n\t\tvar myVisibilityChecks = this.getInheritedProperty(\"visibilityChecks\");\n\t\tif(myVisibilityChecks && myVisibilityChecks instanceof Array) {\n\t\t\tvar cnt = myVisibilityChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myVisibilityChecks[i] != null) {\n\t\t\t\t\tif(typeof(myVisibilityChecks[i])==\"function\") {\n\t\t\t\t\t\tisVisible = myVisibilityChecks[i].call(this);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myVisibilityChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myVisibilityChecks[i].shift();\n\t\t\t\t\t\tisVisible = func.apply(this, myVisibilityChecks[i]);\n\t\t\t\t\t\tmyVisibilityChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (typeof (myVisibilityChecks[i]) == \"string\") {\n                        //for relevant backward compatibility\n                        var instance = this.getInstance();\n                        isVisible = eval(myVisibilityChecks[i]) ;\n                        if(!isVisible)\n\t\t\t\t\t\t\tbreak;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\tvar reRunRefresh = false;\t\n\tif(isVisible) {\n\t\tif(this.deferred)\n\t\t\treRunRefresh=true;\n\t\t\t\n\t\tthis.show();\n\t} else\n\t\tthis.hide();\n\t\n\t//update visibility for active child items\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateVisibilityMethod();\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(reRunRefresh) {\n\t\tthis.updateEnabledDisabled();\n\t\tthis.updateElement();\n\t}\t\n}\n\nXFormItem.prototype.updateEnabledDisabledLsnr = function (event) {\n\tvar updateMethod = this.getUpdateEnabledDisabledtMethod();\n\tupdateMethod.call(this);\t\n}\n\nXFormItem.prototype.updateEnabledDisabled = function (parentDisabled) {\n\tvar isEnabled = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisEnabled=this.getParentItem().getIsEnabled();\n\t\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isEnabled) {\n\t\tvar myEnabledDisabledChecks = this.getInheritedProperty(\"enableDisableChecks\");\n\t\tif(myEnabledDisabledChecks && myEnabledDisabledChecks instanceof Array) {\n\t\t\tvar cnt = myEnabledDisabledChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myEnabledDisabledChecks[i] != null) {\n\t\t\t\t\tif(typeof(myEnabledDisabledChecks[i])==\"function\") {\n\t\t\t\t\t\tisEnabled = myEnabledDisabledChecks[i].call(this);\n\t\t\t\t\t\tif(!isEnabled)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myEnabledDisabledChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myEnabledDisabledChecks[i].shift();\n\t\t\t\t\t\tif(!func || !func.apply) continue;\n\t\t\t\t\t\tisEnabled = func.apply(this, myEnabledDisabledChecks[i]);\n\t\t\t\t\t\tmyEnabledDisabledChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isEnabled)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}                      \n\t\t\t\t}\n\t\t\t}\n\t\t}else if (myEnabledDisabledChecks == false) {   //always disable this element\n            isEnabled = false ;\n        }\n\t}\t\n\t\n\tif(isEnabled)\n\t\tthis.enableElement();\n\telse\n\t\tthis.disableElement();\n\t\n\t//update enableddisabled for active child items\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateEnabledDisabledtMethod();\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n// error handling\n\n/**\n * Sets the error message for this form item.\n * This will set the error for this item, or \n * useing the errorLocation, follow the chain up,\n * to set the error on the related item.\n *\n * @param message The message to display. This message should already\n *                be localized.\n */\nXFormItem.prototype.setError = function(message, childError) {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().setError(message, true);\n\t\treturn;\n\t}\n\tthis.getForm().addErrorItem(this);\n\tthis.__errorState = XFormItem.ERROR_STATE_ERROR;\n\tvar container = this.getErrorContainer(true);\n\tif (container) container.innerHTML = message;\n};\n\n/** \n * Clears the error message for this form item. \n * This will clear the error for this item, or \n * useing the errorLocation, follow the chain up,\n * to clear the error on the related item.\n */\nXFormItem.prototype.clearError = function() {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().clearError();\n\t\treturn;\n\t}\n\n\tthis.getForm().removeErrorItem(this);\n\tthis.__errorState = XFormItem.ERROR_STATE_VALID;\n\tthis.removeErrorContainer();\n};\n\nXFormItem.prototype.hasError = function () {\n\treturn (this.__errorState == XFormItem.ERROR_STATE_ERROR);\n};\n\nXFormItem.prototype.getErrorContainer = function(createIfNecessary) {\n\tvar container = this.getElement(this.getId() + \"___error_container\");\n\tif (container != null) return container;\n\t\n\tif (createIfNecessary == true && this.getContainer()) {\n\t\treturn this.createErrorContainer();\n\t}\n\treturn null;\n}\n\nXFormItem.prototype.createErrorContainer = function () {\n\t// output an error container\n\tvar errorContainer = document.createElement(\"div\");\n\terrorContainer.id = this.getId() + \"___error_container\";\n\terrorContainer.className = this.getErrorCssClass();\n\n\tvar container = this.getContainer();\n\tif (container.hasChildNodes()) {\n\t\tcontainer.insertBefore(errorContainer, container.firstChild);\n\t} else {\n\t\tcontainer.appendChild(errorContainer);\n\t}\t\n\treturn errorContainer;\n}\n\nXFormItem.prototype.removeErrorContainer = function () {\n\tvar errorContainer = this.getErrorContainer();\n\tif (errorContainer != null) {\n\t\terrorContainer.parentNode.removeChild(errorContainer);\n\t}\n}\n\n\n//\n// PROPERTIES OF INDIVIDUAL ITEMS\n//\n\n\nXFormItem.prototype.getType = function () {\n\treturn this.type;\n}\n\n\n//XXX\nXFormItem.prototype.getParentItem = function () {\n\treturn this.__parentItem;\n}\n\nXFormItem.prototype.getForm = function () {\n\treturn this.__xform;\n}\n\nXFormItem.prototype.getGlobalRef = function() {\n\treturn this.getForm().getGlobalRefString() + \".getItemById('\" + this.getId() + \"')\";\n}\n\nXFormItem.prototype.getFormGlobalRef = function() {\n\treturn this.getForm().getGlobalRefString();\n}\n\nXFormItem.prototype.getInstance = function() {\n\treturn this.getForm().instance;\n}\n\nXFormItem.prototype.getModel = function () {\n\treturn this.getForm().getModel();\n}\n\nXFormItem.prototype.getController = function () {\n\treturn this.getForm().getController();\n}\n\nXFormItem.prototype.getFormController = function () {\n\treturn this.getForm().getController();\n}\n\n\nXFormItem.prototype.getModelItem = function() {\n\treturn this.__modelItem;\n}\n\nXFormItem.prototype.getSubModelItem = function() {\n\treturn this.__subModelItem;\n}\n\n//XXX NON-STANDARD\nXFormItem.prototype.getRef = function () {\n\tif (this.ref !== _UNDEFINED_) return this.ref;\n\treturn this.__attributes.ref;\n}\n\nXFormItem.prototype.getRefPath = function () {\n\treturn this.refPath;\n}\n\nXFormItem.prototype.getSubRefPath = function () {\n\treturn this.subRefPath;\n}\n\nXFormItem.prototype.getId = function () {\n\treturn this.id;\n}\n\nXFormItem.prototype.getExternalId = function () {\n\tvar ret = null;\n\tif (this.__attributes.id !== _UNDEFINED_) {\n\t\tret = this.__attributes.id;\n\t} else if ( (ret = this.getRef()) !== _UNDEFINED_) {\n\t\t// nothing\n\t} else {\n\t\tret = null;\n\t}\n\treturn ret;\n};\n\n\n\n//\n//\tGENERIC HTML WRITING ROUTINES\n//\n\n\nXFormItem.prototype.getOnChangeMethod = function() {\n\treturn this.cacheInheritedMethod(\"onChange\",\"$onChange\",\"value,event,form\");\n}\n\nXFormItem.prototype.getOnActivateMethod = function() {\n\treturn this.cacheInheritedMethod(\"onActivate\",\"$onActivate\",\"event\");\n}\n\nXFormItem.prototype.getOnClickMethod = function() {\n\treturn this.cacheInheritedMethod(\"onClick\",\"$onClick\",\"event\");\n}\n\nXFormItem.prototype.getExternalChangeHandler = function() {\n\treturn \"var item = \" + this.getGlobalRef() + \"; var elementChangedMethod = item.getElementChangedMethod(); elementChangedMethod.call(item, value, item.getInstanceValue(), event||window.event);\";\n}\nXFormItem.prototype.getElementValueGetterHTML = function () {\n\treturn \"var value = this.value;\";\n}\n\n/**\n* returns the HTML part of an <input > element that is used to set \"onchange\" \n* (or whatever is defined by elementChangehandler)  property of the element\n**/\nXFormItem.prototype.getChangeHandlerHTML = function() {\n\tvar elementChangeHandler = this.getElementChangeHandler();\n\tif (elementChangeHandler != \"onkeypress\") {\n\t\treturn AjxBuffer.concat(\" \", elementChangeHandler, \"=\\\"\", this.getChangehandlerJSCode() + \"\\\"\",this.getKeyPressHandlerHTML());\n\t} else {\n\t\treturn this.getKeyPressHandlerHTML();\n\t}\n}\n\n/**\n* returns JavaScript code that should be executed when an element is changed by a user\n* @author Greg Solovyev\n**/\nXFormItem.prototype.getChangehandlerJSCode = function () {\n\treturn AjxBuffer.concat(this.getElementValueGetterHTML(),this.getExternalChangeHandler());\n}\n\nXFormItem.prototype.getFocusHandlerHTML = function () {\n\tvar formId = this.getFormGlobalRef(),\n\t\titemId = this.getId()\n\t;\n\t\n\tvar inputHelp =  this.getInheritedProperty(\"inputHelp\");\n\tvar clearInputHelpScript = \"\";\n\tif (inputHelp != null) {\n\t\tclearInputHelpScript = \"if (this.value == '\" + inputHelp + \"') this.value=''; \";\n\t\tDBG.println(\"ClearnInputHelpScript = \" + clearInputHelpScript);\n\t}\n\t\n\tvar onFocusAction = null;\n\tif (this.getInheritedProperty(\"onFocus\") != null) {\n\t\tonFocusAction = AjxBuffer.concat(\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"'); \" ,\t\n\t\t\t\t clearInputHelpScript ,\t\t\t \t\n\t\t\t\t this.getInheritedProperty(\"onFocus\") , \".call(\" ,   this.getGlobalRef(), \", event )\\\"\");\n\t}else{\n\t\tonFocusAction = AjxBuffer.concat(\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"');\",\n\t\t\t\t\t\t\t\t\t\tclearInputHelpScript, \"\\\"\" );\n\t}\n\treturn AjxBuffer.concat(\n\t\t//\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"')\\\"\",\n\t\t//HC: unflexible hacking way to support the License Portal text field onFocus event\n\t\tonFocusAction ,\t\t\n\t\t\" onblur=\\\"\", formId, \".onBlur('\", itemId, \"')\\\"\"\n\t);\n}\n\n\nXFormItem.prototype.getOnActivateHandlerHTML = function() {\n\tvar method = this.getOnActivateMethod();\n\tif (method == null) return \"\";\n\t\n\treturn AjxBuffer.concat(\n\t\t\t\" \", this.getElementChangeHandler(), \"=\\\"\", \n\t\t\tthis.getGlobalRef(),\".$onActivate(event||window.event)\\\"\"\n\t\t);\n}\n\nXFormItem.prototype.getClickHandlerHTML =\nfunction () {\n\tvar onClickFunc = this.getOnClickMethod();\n\tif (onClickFunc == null) return \"\" ;\n\t\n\treturn AjxBuffer.concat(\" onclick=\\\"\", \n\t\t\t\tthis.getGlobalRef(),\".$onClick(event||window.event)\\\"\"\n\t\t\t);\n\t\t\t\n\treturn AjxBuffer.concat( onClickAction );\t\n}\n\n/**\n* Schedules {@link #handleKeyPressDelay} to fire later when the user finishes typing\n* @param ev - \"onkeypress\" event \n* @param domItem - HTML form element\n* @author Greg Solovyev\n**/\nXFormItem.prototype.handleKeyUp = function (ev, domItem) {\n\tvar key = DwtKeyEvent.getCharCode(ev);\n\t// don't fire off another if we've already set one up unless this is an ENTER key\n\tif (!AjxUtil.isEmpty(this.keyPressDelayHdlr) && key != DwtKeyEvent.KEY_ENTER) {\n\t\tAjxTimedAction.cancelAction(this.keyPressDelayHdlr);\n\t\tthis.keyPressDelayHdlr = null;\n\t}\n\tvar form = this.getForm();\n\tvar evt = new DwtKeyEvent();\n\tevt.setFromDhtmlEvent(ev);\n\n\tif (key == DwtKeyEvent.KEY_TAB) {\n\t\tDwtUiEvent.setBehaviour(ev, true, false);\n\t\treturn false;\n\t} else {\n\t\tvar action = new AjxTimedAction(this, this.handleKeyPressDelay, [evt, domItem]);\n\t\t//XForm.keyPressDelayHdlr = setTimeout(XForm.handleKeyPressDelay, 250, item, ev, formItem);\n\t\tthis.keyPressDelayHdlr = AjxTimedAction.scheduleAction(action, 250);\n\t}\n};\n\nXFormItem.prototype.handleKeyDown = function (ev, domItem) {\n\tev = (ev != null)? ev: window.event;\n\tvar key = DwtKeyEvent.getCharCode(ev);\n\tif (key == DwtKeyEvent.KEY_ENTER) {\n\t\t// By telling the browser just to let this do the default, and \n\t\t// not let the event bubble, our keyup handler\n\t\t// wil see the enter key.\n\t\tDwtUiEvent.setBehaviour(ev, true, true);\n\t\treturn false;\n\t} else if (key == DwtKeyEvent.KEY_TAB) {\n\t\tDwtUiEvent.setBehaviour(ev, true, false);\n\t\tvar currentTabId = XFormItem.getParentTabGroupId(this) ;\n\t\t//DBG.println(AjxDebug.DBG1, \"Current Tab ID = \" + currentTabId);\n\t\tif(ev.shiftKey)\n\t\t\tthis.getForm().focusPrevious(this.getId(), currentTabId);\t\n\t\telse\n\t\t\tthis.getForm().focusNext(this.getId(), currentTabId);\t\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n* Implements delayed handling of \"keypress\" event. \n* Calls change handler script on the item.\n* See {@link XFormItem.#getChangehandlerJSCode} for change handler script.\n\n**/\nXFormItem.prototype.handleKeyPressDelay = function(ev, domItem) {\t\n\tthis.keyPressDelayHdlr = null;\n\tif (this.$changeHandlerFunc == null) {\n\t\tvar JSCode = this.getChangehandlerJSCode();\n\t\tthis.$changeHandlerFunc = new Function(\"event\", JSCode);\n\t}\n\tif (this.$changeHandlerFunc) {\n\t\tthis.$changeHandlerFunc.call(domItem, ev);\n\t}\n};\n\nXFormItem.prototype.getKeyPressHandlerHTML = function () {\n\n\tvar keydownEv = \"onkeydown\";\n\tif (AjxEnv.isNav) {\n\t\tkeydownEv = \"onkeypress\";\n\t}\n\treturn AjxBuffer.concat(\" \", keydownEv,\"=\\\"\",this.getGlobalRef(), \".handleKeyDown(event, this)\\\"\",\n\t\t\t\t\t\t   \" onkeyup=\\\"\", this.getGlobalRef(), \".handleKeyUp(event, this)\\\"\");\n};\n\n\n//\n//\tcontainer\n//\n\n\nXFormItem.prototype.outputContainerTDStartHTML = function (html,  colSpan, rowSpan) {\n\tvar _align = this.getAlign();\n\thtml.append( \"<td id=\\\"\",  this.getId(), \"___container\\\"\",\n\t\t\t\t\t(colSpan > 1 ? \" colspan=\" + colSpan : \"\"),\n\t\t\t\t\t(rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"),\n\t\t\t\t\tthis.getContainerCssString(), \n\t\t\t\t\t(_align != _UNDEFINED_ ? \" align='\" + _align + \"'\" : \"\"),\n\t\t\t\t\t\">\"\n\t);\n} \n\nXFormItem.prototype.outputContainerTDEndHTML = function (html) {\n\thtml.append(\"</td id=\\\"\",  this.getId(), \"___container\\\">\");\n} \n\n\n//\n//\telement div\n//\n// for items that are effectively elements (or are drawn by something other than this form)\n// NOTE: you can pass in any random CSS properties you want in cssStyle\nXFormItem.prototype.outputElementDivStart = function (html) {\n\thtml.append( \"<div id=\", this.getId(), this.getCssString(), \" xform_type='elementDiv'>\");\n}\n\nXFormItem.prototype.outputElementDivEnd = function (html) {\n\thtml.append(\"</div id=\\\"\", this.getId(), \"\\\">\");\n}\n\n//\n//\tlabel td\n//\nXFormItem.prototype.outputLabelCellHTML = function (html,  rowSpan, labelLocation) {\n\tvar label = this.getLabel();\n\tif (label == null) return;\n\t\n\tif (label == \"\") label = \"&nbsp;\";\n\t\n\tif (labelLocation == _INLINE_) {\n\t\tvar style = this.getLabelCssStyle();\n\t\tif (style == null) style = \"\";\n\t\tstyle = \"position:relative;left:10px;top:5px;text-align:left;background-color:#eeeeee;margin-left:5px;margin-right:5px;\" + style;\n\t\thtml.append( \"<div id=\\\"\", this.getId(),\"___label\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(null, style), \">\",\n\t\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t\t\"</div>\"\n\t\t\t\t\t);\n\t} else {\n\t\t//lable for is allowd the label to associate with an input item\n\t\tvar enableLabelFor = this.getInheritedProperty(\"enableLabelFor\");\n\t\tif (enableLabelFor) {\n\t\t\thtml.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(), \n\t\t\t\t\t\t\t\t(rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\", \n\t\t\t\t\t\t\t\t\"<label for='\", this.getId(), \"'>\", label, \"</label>\"\n\t\t\t\t);\n\t\t}else{\n            if(!this.getInheritedProperty(\"helpTooltip\") ||\n               !this.getInheritedProperty(\"showHelpTooltip\") ||\n               !this.getInheritedProperty(\"hideHelpTooltip\") ){\n                html.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\",\n                    this.getLabelCssString(),\n                    (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\n                    label\n                );\n            }else{\n                html.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\",\n                    this.getLabelCssString(),\n                    \" onclick=\\\"\", \"XFormItem.prototype.showHelpTooltip\" ,\n\t\t\t        \".call(\" ,   this.getGlobalRef(), \", event );\\\" \",\n                    \" onmouseout=\\\"\", \"XFormItem.prototype.hideHelpTooltip\" ,\n\t\t\t        \".call(\" ,   this.getGlobalRef(), \", event );\\\" \",\n                    (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\n                    label\n                );\n            }\n\t\t}\n\t\tif (this.getRequired()) {\n\t\t\thtml.append(\"<span class='redAsteric'>*</span>\");\n\t\t}\n\t\thtml.append(\"</td>\");\n\t}\n\n\n}\n\nXFormItem.getParentTabGroupId =\nfunction (item){\n\t//DBG.println(AjxDebug.DBG1, \"Enter the getParentTabGroupId() ...\");\n\t\n\twhile (item != null) {\n\t\tvar p = item.getParentItem();\n\t\tif (p == null || (! p instanceof XFormItem)){\n\t\t\treturn null ; //no parent item or p is not an XFormItem\n\t\t}else if (p instanceof Group_XFormItem && p.getInheritedProperty(\"isTabGroup\") == true) {\t\n\t\t\treturn p.getId ();\n\t\t}\n\t\t//DBG.println(AjxDebug.DBG1, \"Continue the getParentTabGroupId() ...\");\n\t\titem = p ;\n\t}\n}\n\n\n//\n//\tchange handling\n//\n\nXFormItem.prototype.elementChanged = function(elementValue, instanceValue, event) {\n\tthis.getForm().itemChanged(this.getId(), elementValue, event);\n}\n\n//\n//\tget and set instance values!\n//\n\n\nXFormItem.prototype.getInstanceValue = function (path) {\n\tif (path == null) path = this.getRefPath();\n\tif (path == null) return null;\n\treturn this.getModel().getInstanceValue(this.getInstance(), path);\n}\n\n//NOTE: model.getInstance() gets count of PARENT\nXFormItem.prototype.getInstanceCount = function () {\n\tif (this.getRefPath() == null) return 0;\n\treturn this.getModel().getInstanceCount(this.getInstance(), this.getRefPath());\n}\n\nXFormItem.prototype.setInstanceValue = function (value, path) {\n\tif (path == null) path = this.getRefPath();\n\tif (path == null) return null;\n\treturn this.getModel().setInstanceValue(this.getInstance(), path, value);\n}\nXFormItem.prototype.set = XFormItem.prototype.setInstancevalue;\n\nXFormItem.getValueFromHTMLSelect = function (element) {\n\tvar values = [];\n\tfor (var i = 0; i < element.options.length; i++) {\n\t\tif (element.options[i].selected) {\n\t\t\tvalues[values.length] = element.options[i].value;\t\n\t\t}\n\t}\n\treturn values.join(\",\");\n}\n\nXFormItem.prototype.getValueFromHTMLSelect = function(element) {\n\tif (element == null) element = this.getElement();\n\treturn XFormItem.getValueFromHTMLSelect(element);\n}\n\nXFormItem.updateValueInHTMLSelect1 = function (newValue, element, selectionIsOpen) {\n\tif (element == null) return null;\n\tif (selectionIsOpen == null) selectionIsOpen = false;\n\t\n\tvar options = element.options;\n\tfor (i = 0; i < options.length; i++) {\n\t\tvar choice = options[i];\n\t\tif (choice.value == newValue) {\n\t\t\telement.selectedIndex = i;\n\t\t\treturn element.value;\n\t\t}\n\t}\n\t// default to the first element if nothing was selected (?)\n\tif (options.length > 0) {\n\t\telement.selectedIndex = 0;\n\t\treturn options[0].value;\n\t}\n\treturn null;\n}\nXFormItem.prototype.updateValueInHTMLSelect1 = function (newValue, element, selectionIsOpen) {\n\tif (element == null) element = this.getElement();\n\tif (selectionIsOpen == null) selectionIsOpen = this.getSelectionIsOpen();\n\treturn XFormItem.updateValueInHTMLSelect1(newValue, element, selectionIsOpen);\n}\n\n\nXFormItem.updateValueInHTMLSelect = function (newValue, element, selectionIsOpen) {\n\tif (element == null) return null;\n\tif (newValue == null) newValue = \"\";\n\tif (selectionIsOpen == null) selectionIsOpen = false;\n\t\n\t// assumes newValue is a comma-delimited string or an array\n\tif (typeof newValue == \"string\") newValue = newValue.split(\",\");\n\t// hack up newValue to make searching for a particular option newValue easier\n\tvar uniqueStartStr = \"{|[\", \n\t\tuniqueEndStr = \"]|}\"\n\t;\n\tnewValue = uniqueStartStr + newValue.join(uniqueEndStr + uniqueStartStr) + uniqueEndStr;\n\t\n\tvar options = element.options;\n\tvar anySelected = false;\n\tfor (var i = 0; i < options.length; i++) {\n\t\tvar isPresent = (newValue.indexOf(uniqueStartStr + options[i].value + uniqueEndStr) > -1);\n\t\toptions[i].selected = isPresent;\n\t\tanySelected = anySelected || isPresent;\t\t\n\t}\n\t\n\tif (!anySelected && !selectionIsOpen) {\n\t\t// select the first value???\n\t\toptions[0].selected = true;\n\t}\n}\n\nXFormItem.prototype.updateValueInHTMLSelect = function (newValue, element, selectionIsOpen) {\n\tif (newValue == null) newValue = \"\";\n\tif (element == null) element = this.getElement();\n\tif (selectionIsOpen == null) selectionIsOpen = this.getSelectionIsOpen();\n\treturn XFormItem.updateValueInHTMLSelect(newValue, element, selectionIsOpen);\n}\n\nXFormItem.prototype.getChoicesHTML = function() {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return \"\";\t//throw an error?\n\tvar html = new AjxBuffer();\n\t\n\n\tthis.outputChoicesHTMLStart(html);\n\tvar values = choices.values;\n\tvar labels = choices.labels;\n    var visible = choices.visible ;\n\n    var choiceCssClass = this.getChoiceCssClass();\n\tfor (var i = 0; i < values.length; i++) {\n        if (visible && (visible[i] == false)) {\n            //don't display this choice\n        }else {       //by default, the choice should be visible\n            html.append(\"\", this.getChoiceHTML(i, values[i], labels[i], choiceCssClass, \"\"));\n        }\n    }\n\tthis.outputChoicesHTMLEnd(html);\n\treturn html.toString();\n}\n\nXFormItem.prototype.outputChoicesHTMLStart = function(html) {\n\treturn;\n}\nXFormItem.prototype.outputChoicesHTMLEnd = function(html) {\n\treturn;\n}\n\nXFormItem.prototype.getChoiceCssClass = function() {\n\treturn \"\";\n}\n\nXFormItem.prototype.getChoiceHTML = function (itemNum, value, label, cssClass) {\n\treturn AjxBuffer.concat(\"<option value=\\\"\", value, \"\\\">\", label,\"</option>\");\n}\n\nXFormItem.prototype.updateChoicesHTML = function () {\n\tthis.cleanChoiceDisplay();\n\n\t// NOTE: setting the innerHTML of the options doesn't work\n\t//\tfor now, just set the outer HTML of the entire widget\n\t// TODO: do this by frobbing the options manually for speed and so things don't flash\n\tvar html = new AjxBuffer();\n\tthis.outputHTML(html, new AjxBuffer());\n\tif (this.getContainer())  this.getContainer().innerHTML = html.toString();\n\treturn;       \n}\n\n\nXFormItem.prototype.getInheritedProperty = function(prop) {\n\t// first look in the instance attributes\n\tif (this.__attributes[prop] !== _UNDEFINED_) return this.__attributes[prop];\n\n\t// look up the inheritance chain for this type\n\tif (this[prop] !== _UNDEFINED_) return this[prop];\n\n\t// if not found there, look in the xmodel\n\tvar modelItem = this.__modelItem;\n\tif (modelItem && modelItem[prop] !== _UNDEFINED_) return modelItem[prop];\n\n\treturn null;\n}\n\n// NOTE: cacheProp MUST be different than prop!\nXFormItem.prototype.cacheInheritedProperty = function (prop, cacheProp) {\n\tif (this[cacheProp] !== _UNDEFINED_) return this[cacheProp];\n\treturn (this[cacheProp] = this.getInheritedProperty(prop));\n}\n\nXFormItem.prototype.cacheInheritedMethod = function (methodName, cacheProp, arguments) {\n\tif (this[cacheProp] !== _UNDEFINED_) return this[cacheProp];\n\tvar func = this.getInheritedProperty(methodName);\n\tif (func != null) func = this.convertToFunction(func, arguments);\n\tthis[cacheProp] = func;\n\treturn func;\n}\n\n\n\n\n//\n//\tproperties of the element after its' been drawn\n//\n\n\nXFormItem.prototype.getElement = XForm.prototype.getElement;\nXFormItem.prototype.showElement = function (id) {\n\tXForm.prototype.showElement.call(this, id);\n}\n\nXFormItem.prototype.getIsVisible = function () {\n\treturn this.__isVisible;\n}\n\nXFormItem.prototype.getIsEnabled = function () {\n\treturn this.__isEnabled;\n}\n \nXFormItem.prototype.hideElement = function (id,isBlock) {\n\tXForm.prototype.hideElement.call(this,id,isBlock);\n}\n\nXFormItem.prototype.createElement = XForm.prototype.createElement;\n\nXFormItem.estimateMyWidth = function (label,withIcon,extraMargin, minimum) {\n\tvar width = (String(label).length/2)*XForm.FONT_WIDTH1 + (String(label).length/2)*XForm.FONT_WIDTH2 + 14;\n\tif(withIcon)\n\t\twidth = width + 24;\n\t\n\tif(extraMargin>0)\n\t\twidth = width + extraMargin;\n\t\n\twidth = (width >= minimum) ? width : minimum;\n\treturn [width,\"px\"].join(\"\");\n}\n\nXFormItem.prototype.getWidget = function() {\n\treturn this.widget;\n}\n\nXFormItem.prototype.setWidget = function(widget) {\n\tthis.widget = widget;\n}\n\n\nXFormItem.prototype.getContainer = function() {\n\treturn this.getElement(this.getId() + \"___container\");\n}\nXFormItem.prototype.getLabelContainer = function() {\n\treturn this.getElement(this.getId() + \"___label\");\n}\nXFormItem.prototype.show = function() {\n\tif(this.deferred) {\n\t\tthis._outputHTML();\n\t}\t\n\tvar container = this.getLabelContainer();\n\tif (container) this.showElement(container);\n\tcontainer = this.getContainer();\n\tif (container != null) {\n\t\tthis.showElement(container);\n\t} \n\tthis.__isVisible = true;\n}\n\nXFormItem.prototype.hide = function(isBlock) {\n\tisBlock = this.getInheritedProperty(\"isBlockElement\") || isBlock;\n\tvar container = this.getLabelContainer()\n\tif (container) this.hideElement(container,isBlock);\n\tcontainer = this.getContainer();\n\tif (container != null) {\n\t\tthis.hideElement(container,isBlock);\n\t} else {\n\t\tvar items = this.getItems();\n\t\tif (items != null) {\n\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\titems[i].hide(isBlock);\n\t\t\t}\n\t\t}\n\t}\n\tthis.__isVisible = false;\n}\n\nXFormItem.prototype.focus = function () {\n\tthis.getForm().focusElement(this.getId());\n};\n\n\n//\n//\tSIMPLE ATTRIBUTE ACCESSORS\n//\n//\tNOTE: this is effectively the public API for the properties you can define\n//\t\t\tfor a FormItem\n//\n\nXFormItem.prototype.getRequired = function() {\n\treturn this.getInheritedProperty(\"required\");\n}\n\nXFormItem.prototype.getValue = function() {\n\treturn this.getInheritedProperty(\"value\");\n}\n\n// SPECIAL CASE:  don't take ITEMS from the model...\n//XXX NON-STANDARD\nXFormItem.prototype.getItems = function () {\n\tif (this.items) return this.items;\n\treturn this.__attributes.items;\n}\n\nXFormItem.prototype.getChoices = function () {\n\treturn this.getInheritedProperty(\"choices\");\n}\n\n// normalized choices look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\nXFormItem.prototype.getNormalizedChoices = function () {\n\tif (this.$normalizedChoices) return this.$normalizedChoices;\n\n\tvar choices = this.getChoices();\n\tif (choices == null) return null;\n    if (typeof choices == \"function\") choices = choices.call(this) ;\n    \n    var normalizedChoices;\n\tif (typeof choices.getChoices == \"function\") {\n\t\tnormalizedChoices = choices.getChoices();\n\t} else if (AjxUtil.isArray(choices)) {\n\t\t// it's either an array of objects or an array of strings\n\t\tif (typeof choices[0] == \"object\") {\n\t\t\t// list of objects\n\t\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.OBJECT_LIST);\n\t\t} else {\n\t\t\t// list of simple values\n\t\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.SIMPLE_LIST);\n\t\t}\n\t} else {\n\t\t// assume it's a hash\n\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.HASH);\n\t}\n\tthis.$normalizedChoices = normalizedChoices;\n\treturn this.$normalizedChoices;\n}\n\n\nXFormItem.prototype.getNormalizedValues = function () {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices) return choices.values;\n\treturn null;\n}\n\n\nXFormItem.prototype.getNormalizedLabels = function () {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices) return choices.labels;\n\treturn null;\n}\n\t\n\t\n\t\n//\n//\tappearance methods\n//\n\nXFormItem.prototype.getAppearance = function () {\n\treturn this.getInheritedProperty(\"appearance\");\n}\nXFormItem.prototype.getCssClass = function () {\n\treturn this.getInheritedProperty(\"cssClass\");\n}\n\nXFormItem.prototype.getCssStyle = function () {\n\treturn this.getInheritedProperty(\"cssStyle\");\n}\n\nXFormItem.prototype.getLabel = function (value) {\n\treturn this.getInheritedProperty(\"label\");\n}\n\nXFormItem.prototype.getErrorCssClass = function () {\n\treturn this.getInheritedProperty(\"errorCssClass\");\n}\nXFormItem.prototype.getLabelCssClass = function (className) {\n\tif (className != null) return className;\n\treturn this.getInheritedProperty(\"labelCssClass\");\n}\n\nXFormItem.prototype.getLabelCssStyle = function (style) {\n\tif (style != null) return style;\n\treturn this.getInheritedProperty(\"labelCssStyle\");\n}\n\nXFormItem.prototype.getLabelWrap = function () {\n\treturn this.getInheritedProperty(\"labelWrap\");\n}\n\nXFormItem.prototype.getLabelLocation = function () {\n\treturn this.getInheritedProperty(\"labelLocation\");\n}\n\nXFormItem.prototype.getContainerCssClass = function () {\n\treturn this.getInheritedProperty(\"containerCssClass\");\n}\n\nXFormItem.prototype.getContainerCssStyle = function () {\n\treturn this.getInheritedProperty(\"containerCssStyle\");\n}\n\nXFormItem.prototype.getTableCssClass = function () {\n\treturn this.getInheritedProperty(\"tableCssClass\");\n}\nXFormItem.prototype.getTableCssStyle = function () {\n\treturn this.getInheritedProperty(\"tableCssStyle\");\n}\n\nXFormItem.prototype.getNowrap = function () {\n\treturn this.getInheritedProperty(\"nowrap\");\n}\n\nXFormItem.prototype.getWidth = function () {\n\treturn this.cacheInheritedProperty(\"width\",\"_width\");\n}\n\nXFormItem.prototype.getHeight = function () {\n\treturn this.getInheritedProperty(\"height\");\n}\n\nXFormItem.prototype.getOverflow = function () {\n\treturn this.getInheritedProperty(\"overflow\");\n}\n\nXFormItem.prototype.getNumCols = function () {\n\treturn this.getInheritedProperty(\"numCols\");\n}\n\nXFormItem.prototype.getAlign = function () {\n\treturn this.getInheritedProperty(\"align\");\n}\n\n\nXFormItem.prototype.getValign = function() {\n\treturn this.getInheritedProperty(\"valign\");\n}\n\nXFormItem.prototype.getName = function () {\n\treturn this.getInheritedProperty(\"name\");\n}\n\n// NEW TABLE LAYOUT STUFF\nXFormItem.prototype.useParentTable = true;\nXFormItem.prototype.getUseParentTable = function () {\n\treturn this.getInheritedProperty(\"useParentTable\");\n}\nXFormItem.prototype.colSizes = _UNDEFINED_;\nXFormItem.prototype.getColSizes = function () {\n\treturn this.getInheritedProperty(\"colSizes\");\n}\nXFormItem.prototype.colSpan = 1;\nXFormItem.prototype.getColSpan = function () {\n\treturn this.getInheritedProperty(\"colSpan\");\n}\nXFormItem.prototype.rowSpan = 1;\nXFormItem.prototype.getRowSpan = function () {\n\treturn this.getInheritedProperty(\"rowSpan\");\n}\n\n// END NEW TABLE LAYOUT STUFF\n\n// error handling\nXFormItem.prototype.getErrorLocation = function () {\n\treturn this.getInheritedProperty(\"errorLocation\");\n};\n\n//\n//\tconvenience methods to figure out drawing types for you\n//\n\n// return the \"label\" in the choices array for this item\n//\t(allows us to do lookup of displayed values easily)\nXFormItem.prototype.getChoiceLabel = function (value) {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return value;\n\tif (value == null) value = \"\" ; //make it an empty string, so empty value label can be returned\n    \n    // choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\tvar values = choices.values;\n\tfor (var i = 0; i < values.length; i++) {\n\t\tif (values[i] == value) {\n\t\t\treturn choices.labels[i];\n\t\t}\n\t}\n\t// if we didn't find it, simply return the original value\n\treturn value;\n}\n\n// return the \"label\" in the choices array for this item\n//\t(allows us to do lookup of displayed values easily)\n// If no matching choice is found, the label is returned. \nXFormItem.prototype.getChoiceValue = function (label) {\n\tfunction labelComparator (a, b) {\n\t\t\treturn String(a).toLowerCase() < String(b).toLowerCase() ? -1 : (String(a).toLowerCase() > String(b).toLowerCase() ? 1 : 0);\n\t };\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return label;\n\t\n\t// choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\t// bug 6738: sort will change the mapping between value and label.\n\t/*\n\tvar labels = choices.labels;\n\tvar vec = AjxVector.fromArray(labels);\n\tvec.sort(labelComparator);\n\tvar ix = vec.binarySearch(label,labelComparator); */\n\tvar labels = choices.labels;\n\tvar ix = -1;\n\tfor (var i=0; i < labels.length ; i++ ){\n\t\tif (labelComparator (label, labels[i]) == 0) {\n\t\t\tix = i ;\n\t\t\tbreak;\n\t\t}\t\t\n\t}\n\t\n\tif(ix>=0) \n\t\treturn choices.values[ix];\n\telse \t\t\n\t\t//return choices.values[0];// If no matching choice is found, the label is returned, instead of the first value\n\t\treturn label;\n}\n\n// return the number of the choice for a particular value\n//\treturns -1 if not found\nXFormItem.prototype.getChoiceNum = function (value) {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return -1;\n\t\n\t// choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\tvar values = choices.values;\n\tfor (var i = 0; i < values.length; i++) {\n\t\tif (values[i] == value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1\n}\n\nXFormItem.prototype.getCssString = function () {\n\tvar css = (this.getCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\n\tvar style = (this.getCssStyle() || '');\n\n\tvar width = this.getWidth();\n\tif (width != null && width != \"auto\") {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\n\t\tif (!isNaN(Number(width)))\n\t\t\twidth += 'px';\n\n\t\tstyle += \"width:\" + width;\n\t}\n\n\tvar height = this.getHeight();\n\tif (height != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tif (!isNaN(Number(height)))\n\t\t\theight += 'px';\n\n\t\tstyle += \"height:\" + height;\n\t}\n\n\tvar overflow = this.getOverflow();\n\tif (overflow != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"overflow:\" + overflow;\n\t}\n\t\n\tif (this.getNowrap()) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"white-space:nowrap\";\n\t}\n\n\tvar valign = this.getValign();\n\tif (valign) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"vertical-align:\"+valign;\n\t}\n\t\n\tif (style != '') css += \" style=\\\"\" + style + \";\\\"\";\n\treturn css;\n}\n\n\nXFormItem.prototype.getLabelCssString = function (className, style) {\n\tvar css = (this.getLabelCssClass(className) || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\tvar style = (this.getLabelCssStyle(style) || '');\n\tif (this.getLabelWrap() == false) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\n\t\tstyle += \"white-space:nowrap\";\n\t}\n\tif (style != '') css += \" style=\\\"\" + style + \";\\\"\";\n\t\n\treturn css;\n}\n\n\n\n\nXFormItem.prototype.getTableCssString = function () {\n\tvar css = (this.getTableCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\n\tvar style = this.getTableCssStyle();\n\tif (style == null) style = '';\n\t\n\tvar colSizes = this.getColSizes();\n\tif (colSizes != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"table-layout:fixed\";\n\t}\n\n\tvar width = this.getWidth();\n\tif (width != null) \tstyle += \";width:\"+ width;\n\t\n\tvar overflow = this.getOverflow();\n\tif (overflow != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\n\t\tstyle += \"overflow:\" + overflow;\n\t}\n\n\treturn css + (style != null ? \" style=\\\"\" + style + \";\\\"\" : \"\");\n}\n\n\nXFormItem.prototype.getContainerCssString = function () {\n\tvar css = (this.getContainerCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\tvar style = this.getContainerCssStyle();\n\tif (style == null) style = '';\n\t\n\tvar align = this.getAlign();\n\tif (align != _LEFT_) {\n\t\tif (align == _CENTER_ || align == _MIDDLE_) {\n\t\t\tif(style.length)\n\t\t\t\tstyle += \";\";\n\t\t\t\t\t\t\n\t\t\tstyle += \"text-align:center\";\n\t\t} else if (align == _RIGHT_) {\n\t\t\tif(style.length)\n\t\t\t\tstyle += \";\";\t\t\t\n\t\t\n\t\t\tstyle += \"text-align:right\";\n\t\t}\n\t}\n\tvar valign = this.getValign();\n\tif (valign == _TOP_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"vertical-align:top\";\n\t} else if (valign == _BOTTOM_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"vertical-align:bottom\";\n\t} else if (valign == _CENTER_ || valign == _MIDDLE_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\t\t\n\t\t\t\n\t\tstyle += \"vertical-align:middle\";\n\t}\n\n\tif (style != \"\") css += \" style=\\\"\" + style + \";\\\"\";\n\treturn css;\n}\n\n\n\n\n//\n//\thandling changes to items\n//\nXFormItem.prototype.getElementChangeHandler = function () {\n\treturn this.getInheritedProperty(\"elementChangeHandler\");\n}\n\n\n\n\n//\n//\toutputting, inserting and updating items\n//\n\nXFormItem.prototype.getForceUpdate = function() {\n\treturn this.getInheritedProperty(\"forceUpdate\");\n}\n\nXFormItem.prototype.getOutputHTMLMethod = function() {\n\treturn this.convertToFunction(\n\t\t\t\tthis.getInheritedProperty(\"outputHTML\"),\n\t\t\t\t\"html,currentCol\"\n\t\t);\n}\n\nXFormItem.prototype.getElementChangedMethod = function () {\n\treturn this.cacheInheritedMethod(\"elementChanged\",\"$elementChanged\",\"elementValue, instanceValue, event\");\n}\n\nXFormItem.prototype.getUpdateElementMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateElement\",\"$updateElement\",\"newValue\");\n}\n\nXFormItem.prototype.getDisplayValueMethod = function() {\n\treturn this.cacheInheritedMethod(\"getDisplayValue\",\"$getDisplayValue\",\"newValue\");\n}\n\nXFormItem.prototype.getUpdateVisibilityMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateVisibility\",\"$updateVisibility\");\n}\n\nXFormItem.prototype.getUpdateEnabledDisabledtMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateEnabledDisabled\",\"$updateEnabledDisabled\");\n}\n\nXFormItem.prototype.convertToFunction = function (script, arguments) {\n\tif ((script == null) || (typeof(script) == \"function\")) return script;\n\tif (typeof(this[script]) == \"function\") return this[script];\n\t// CLOSURE???\n\treturn new Function(arguments, script);\n}\n\n\n// note that this form item's display needs to be updated\nXFormItem.prototype.dirtyDisplay = function () {\n\tdelete this.$lastDisplayValue;\n}\n\n// override the next method in your subclass to enable/disable element\nXFormItem.prototype.setElementEnabled = function(enable) {}\n\n// convenience methods that call the above routine\nXFormItem.prototype.disableElement = function () {\n\tthis.setElementEnabled(false);\n\tthis.__isEnabled = false;\n}\n\nXFormItem.prototype.enableElement = function () {\n\tthis.setElementEnabled(true);\n\tthis.__isEnabled = true;\n}\n\n// you can use these to \nXFormItem.prototype.setElementDisabledProperty = function (enable) {\n\tthis.getElement().disabled = (enable != true)\n}\n\n\nXFormItem.prototype.setElementEnabledCssClass = function (enable) {\n\tvar el = this.getElement();\n\tif (!el) return;\n\t\n\tif (enable) {\n\t\tel.className = this.getCssClass();\n\t} else {\n\t\tel.className = (this.getCssClass() + \"_disabled\");\n\t}\n}\n\n\n\n//\n//\t_SELECT_ etc type properties\n//\nXFormItem.prototype.getSelection = function () {\n\treturn this.getInheritedProperty(\"selection\");\n}\n\nXFormItem.prototype.getSelectionIsOpen = function () {\n\treturn this.getInheritedProperty(\"selection\");\n}\n\nXFormItem.prototype.getOpenSelectionLabel = function () {\n\treturn this.getInheritedProperty(\"openSelectionLabel\");\n}\n\n\n//\n//\t_REPEAT_ type properties\n//\n\nXFormItem.prototype.getNumberToShow = function () {\n\treturn this.getInheritedProperty(\"number\");\n}\n\nXFormItem.prototype.getShowAddButton = function () {\n\treturn this.getInheritedProperty(\"showAddButton\");\n}\n\nXFormItem.prototype.getShowRemoveButton = function () {\n\treturn this.getInheritedProperty(\"showRemoveButton\");\n}\n\nXFormItem.prototype.getShowMoveUpButton = function () {\n\treturn this.getInheritedProperty(\"showMoveUpButton\");\n}\n\nXFormItem.prototype.getShowMoveDownButton = function () {\n\treturn this.getInheritedProperty(\"showMoveDownButton\");\n}\n\nXFormItem.prototype.getAddButton = function () {\n\treturn this.getInheritedProperty(\"addButton\");\n}\n\nXFormItem.prototype.getRemoveButton = function () {\n\treturn this.getInheritedProperty(\"removeButton\");\n}\n\nXFormItem.prototype.getMoveUpButton = function () {\n\treturn this.getInheritedProperty(\"moveUpButton\");\n}\n\nXFormItem.prototype.getMoveDownButton = function () {\n\treturn this.getInheritedProperty(\"moveDownButton\");\n}\n\nXFormItem.prototype.getAlwaysShowAddButton = function () {\n\treturn this.getInheritedProperty(\"alwaysShowAddButton\");\n}\n\nXFormItem.prototype.getRepeatInstance = function () {\n\treturn this.getInheritedProperty(\"repeatInstance\");\n}\n\n\n\n\n//\n//\t_IMAGE_ type properties\n//\n\nXFormItem.prototype.getSrc = function () {\n\treturn this.getInheritedProperty(\"src\");\n}\n\nXFormItem.prototype.getSrcPath = function () {\n\treturn this.getInheritedProperty(\"srcPath\");\n}\n\n\n\n//\n//\t_ANCHOR_, _URL_, etc\n//\n//\ttype defaults\nXFormItem.prototype.getShowInNewWindow = function () {\n\treturn this.getInheritedProperty(\"showInNewWindow\");\n}\n\n\n\n\n//\n//\tinternal properties for creating various item types\n//\n\n\nXFormItem.prototype.getWriteElementDiv = function () {\n\treturn this.getInheritedProperty(\"writeElementDiv\");\n}\n\nXFormItem.prototype.getMultiple = function () {\n\treturn this.getInheritedProperty(\"multiple\");\n}\n\nXFormItem.prototype.getAlwaysUpdateChoices = function () {\n\treturn this.getInheritedProperty(\"alwaysUpdateChoices\");\n}\n\nXFormItem.prototype.choicesAreDirty = function () {\n\treturn (this._choiceDisplayIsDirty == true || this.getAlwaysUpdateChoices());\n}\n\nXFormItem.prototype.cleanChoiceDisplay = function () {\n\tthis._choiceDisplayIsDirty = false;\n}\n\nXFormItem.prototype.showInputTooltip =\nfunction (event) {\n\tvar dwtEv = new DwtUiEvent(true);\n\tdwtEv.setFromDhtmlEvent(event)\n\tvar shell = DwtShell.getShell(window);\n\tvar tooltip = shell.getToolTip();\n\ttooltip.setContent(this.getInheritedProperty(\"toolTipContent\"));\n\ttooltip.popup(dwtEv.docX, dwtEv.docY);\n}\n\nXFormItem.prototype.hideInputTooltip =\nfunction (event) {\n\tvar shell = DwtShell.getShell(window);\n\tvar tooltip = shell.getToolTip();\n\ttooltip.popdown();\n}\n\n\n\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _OUTPUT_\n * @constructor\n * \n * @private\n */\nOutput_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_OUTPUT_\", \"output\", Output_XFormItem, XFormItem);\n\n\n//\ttype defaults\nOutput_XFormItem.prototype.writeElementDiv = true;\nOutput_XFormItem.prototype.labelWrap = true;\nOutput_XFormItem.prototype.cssClass =  \"xform_output\";\t// element itself (or element div)\nOutput_XFormItem.prototype.containerCssClass =  \"xform_output_container\";\t// element itself (or element div)\n\n//\tmethods\n\nOutput_XFormItem.prototype.outputHTML = function (html) {\n\t// by defaut, we output the \"attributes.value\" if set \n\t//\t(in case an item only wants to write out on the initial draw)\n\t// NOTE: dereferencing through the choice map happens in getDisplayValue()\n\tvar value = this.getValue();\n\tvar method = this.getDisplayValueMethod();\n\tif (method) {\n\t\tvalue = method.call(this, value);\n\t}\n\t\n\t//set the onClick event handler\n\tvar clickMethod = this.getClickHandlerHTML();\n\tvar htmlWithEvent = null ;\n\tif (clickMethod != null && clickMethod != \"\") {\n\t\thtmlWithEvent = \"<div \" + this.getClickHandlerHTML() +\n\t\t \t\t\t\t\">\" + value + \"</div>\" ; \n\t}\n\t\n\thtml.append(htmlWithEvent || value);\n}\n\n\nOutput_XFormItem.prototype.getDisplayValue = function(newValue) {\n\t// dereference through the choices array, if provided\n\tnewValue = this.getChoiceLabel(newValue);\n\n\tif (newValue == null) {\n\t\tnewValue = \"\";\n\t} else {\n\t\tnewValue = \"\" + newValue;\n\t}\n\treturn newValue;\n}\n\nOutput_XFormItem.prototype.updateElement = function (newValue) {\n\tvar el = this.getElement();\n\tif(el) {\n\t    //set the onClick event handler\n\t    var clickMethod = this.getClickHandlerHTML();\n\t    var htmlWithEvent = null ;\n\t    if (clickMethod != null && clickMethod != \"\") {\n\t\t    htmlWithEvent = \"<div \" + this.getClickHandlerHTML() +\n\t\t \t\t\t\t\">\" + newValue + \"</div>\" ;\n\t    }\n\n        newValue = htmlWithEvent || newValue;\n\t\tthis.getElement().innerHTML = newValue;\n    }\n}\n\nOutput_XFormItem.prototype.initFormItem = function () {\n\t\n\tXFormItem.prototype.initFormItem.call(this);\n\t\n\t// if we're dealing with an XFormChoices object...\n\tvar choices = this.getChoices();\n\tif (choices == null || choices.constructor != XFormChoices) return;\n\n\t//\t...set up to receive notification when its choices change\n\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\n\n    this.signUpForEvents();   //so when the instance value changed, the output display can be updated.\n}\n\nOutput_XFormItem.prototype.dirtyDisplay = function () {\n\tXFormItem.prototype.dirtyDisplay.call(this);\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\n}\n\n// set up how disabling works for this item type\nOutput_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n/**\n * @class defines XFormItem type _TEXTFIELD_\n * @constructor\n * \n * @private\n */\nTextfield_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TEXTFIELD_\", \"textfield\", Textfield_XFormItem, XFormItem);\n// aliases for _TEXTFIELD_:  _INPUT_\nXFormItemFactory.registerItemType(\"_INPUT_\", \"input\", Textfield_XFormItem);\n\n//\ttype defaults\n//Textfield_XFormItem.prototype.width = 100;\nTextfield_XFormItem.prototype._inputType = \"text\";\nTextfield_XFormItem.prototype.cssClass = \"xform_field\";\nTextfield_XFormItem.prototype.elementChangeHandler=\"onchange\";\n//Textfield_XFormItem.prototype.onclickHandler=\"onclick\";\nTextfield_XFormItem.prototype.focusable = true;\nTextfield_XFormItem.prototype.nowrap = false;\nTextfield_XFormItem.prototype.labelWrap = true;\nTextfield_XFormItem.prototype.containerCssClass = \"xform_field_container\";\nTextfield_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nTextfield_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\n//\tmethods\nTextfield_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tvar inputType = this._inputType;\n\tvar value = this.getValue();\n\tvar modelItem = this.getModelItem();\n\tvar inputHelp = this.getInheritedProperty(\"inputHelp\");\n\n\n\t/***\n//XXX this is probably not the best way to tell if we only want to enter numbers...\n\tif (modelItem && (modelItem.type == _NUMBER_)) {// || modelItem.type == _COS_NUMBER_)) {\n\t\tvar keyStrokeHandler = \" onkeypress=\\\"\"\n//\t\t\t+\"',45,46,48,49,50,51,52,53,54,55,56,57,69,101,'.indexOf(','+(event||window.event).keyCode+',') > -1\\\"\"\t\t\n\t\t\t\t+\"var code = ','+(event||window.event).which+',';\"\n\t\t\t\t+\"var isValidChar = (',45,46,48,49,50,51,52,53,54,55,56,57,69,101,'.indexOf(code) > -1);\"\n\t\t\t\t+\"DBG.println(code + ':'+isValidChar);\"\n\t\t\t\t+\"event.returnValue = isValidChar;\"\n\t\t\t\t+\"return isValidChar;\"\n\t\t\t\t+\"\\\"\"\n\t}\n\t/***/\n\thtml.append( \n\t\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", inputType, \"\\\"\", this.getCssString(), \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\t\tthis.getClickHandlerHTML(), this.getMouseoutHandlerHTML(),\n\t\t\t\t(value != null ? \" value=\\\"\" + value + \"\\\"\" :\"\"), //: (inputHelp != null ? \" value=\\\"\" + inputHelp + \"\\\"\"\n\t\t\t\">\");\n}\n\nTextfield_XFormItem.prototype.getClickHandlerHTML =\nfunction () {\n\tvar formId = this.getFormGlobalRef(), \n\t\titemId = this.getId()\n\t\t;\n\t\n\tvar onClickAction = \"\";\n\t\n\tvar onClickFunc = this.getInheritedProperty(\"onClick\") ;\n\tonClickAction = AjxBuffer.concat(\" onclick=\\\"\", onClickFunc || \"XFormItem.prototype.showInputTooltip\" , \n\t\t\t\".call(\" ,   this.getGlobalRef(), \", event );\\\" \");\n\t\t\t\n\treturn AjxBuffer.concat( onClickAction );\t\n}\n\nTextfield_XFormItem.prototype.getMouseoutHandlerHTML =\nfunction () {\n\tvar formId = this.getFormGlobalRef(), \n\t\titemId = this.getId()\n\t\t;\n\t\n\tvar onMouseoutAction = \"\";\n\t\n\tvar onMouseoutFunc = this.getInheritedProperty(\"onMouseout\") ;\n\tonMouseoutAction = AjxBuffer.concat(\" onmouseout=\\\"\", onMouseoutFunc || \"XFormItem.prototype.hideInputTooltip\" , \n\t\t\t\t\t\t\".call(\" ,   this.getGlobalRef(), \", event );\\\" \");\n\t\t\t\t\t\t\n\treturn AjxBuffer.concat( onMouseoutAction );\t\n}\n\nTextfield_XFormItem.prototype.updateElement = function(newValue) {\n\tif (newValue == null) newValue = this.getValue();\n\tvar inputHelp = this.getInheritedProperty(\"inputHelp\");\n\t/*\n\tDBG.println(\"In updateElement: \" + \"newValue=\" + newValue + \"###\" + \"elementValue=\" + this.getElement().value);\t*/\n\tif ((newValue == null) && (inputHelp != null)) {\n\t\t newValue = inputHelp ;\n\t}else if (newValue == null){\n\t\t newValue = \"\";\n\t}\n\t\n\tif (this.getElement() && this.getElement().value != newValue) {\n\t\tthis.getElement().value = newValue;\n\t}\n}\n\n// set up how disabling works for this item type\nTextfield_XFormItem.prototype.setElementEnabled  = function (enabled) {\n\tif (this.getElement()) {\n\t\tthis.setElementDisabledProperty(enabled);\n\t\tthis.setElementEnabledCssClass(enabled);\n\t}\n}\n\n//Creates a datalist element which specifies a list of pre-defined options for an <input> element providing an autocomplete feature.\nTextfield_XFormItem.prototype.createDataList  = function (list) {\n\tif (!AjxEnv.supported.input.list) {\n\t\treturn;\n\t}\n\tlist = list || [];\n\tvar dataListId = this.getId() + \"_datalist\";\n\t// If old datalist is already present remove it.\n\tvar oldDataList = Dwt.getElement(dataListId);\n\tif (oldDataList) {\n\t\toldDataList.parentNode.removeChild(oldDataList);\n\t}\n\tvar element = this.getElement();\n\telement.setAttribute(\"list\", dataListId);\n\tvar dataList = document.createElement(\"datalist\");\n\tdataList.id = dataListId;\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar option = document.createElement('option');\n\t\toption.value = list[i];\n\t\tdataList.appendChild(option);\n\t}\n\telement.parentNode.appendChild(dataList);\n\n\t// if there is an onChange handler, call that during on input event\n\tvar onChangeMethod = this.getOnChangeMethod();\n\tif (typeof onChangeMethod === \"function\") {\n\t\tDwt.setHandler(element, DwtEvent.ONINPUT, function() {\n\t\t\tonChangeMethod.call(this, this.getElement().value, false, this.getForm());\n\t\t}.bind(this));\n\t}\n};\n\n\n/**\n * @class defines XFormItem type _SECRET_\n * @constructor\n * \n * @private\n */\nSecret_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SECRET_\", \"secret\", Secret_XFormItem, Textfield_XFormItem);\n// alias for the SECRET class:  PASSWORD\nXFormItemFactory.registerItemType(\"_PASSWORD_\", \"password\", Secret_XFormItem);\n\n\n//\ttype defaults\nSecret_XFormItem.prototype._inputType = \"password\";\nSecret_XFormItem.prototype.focusable = true;\n\n\n\n\n/**\n * @class defines XFormItem type _FILE_\n * @constructor\n * \n * @private\n */\nFile_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_FILE_\", \"file\", File_XFormItem, Textfield_XFormItem)\n\n//\ttype defaults\nFile_XFormItem.prototype._inputType = \"file\";\nFile_XFormItem.prototype.forceUpdate = false;\nFile_XFormItem.prototype.focusable = true;\n\n\n\n/**\n * @class defines XFormItem type _TEXTAREA_\n * @constructor\n * \n * @private\n */\nTextarea_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TEXTAREA_\", \"textarea\", Textarea_XFormItem, Textfield_XFormItem)\n\nTextarea_XFormItem.prototype.width = \"100%\";\nTextarea_XFormItem.prototype.height = 100;\nTextarea_XFormItem.prototype.focusable = true;\n//\tmethods\nTextarea_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\tvar wrap = this.getInheritedProperty(\"textWrapping\");\n\tif (!wrap)\n\t\twrap = \"off\";\n\t\t\n\thtml.append( \n\t\t\"<textarea id=\\\"\", this.getId(), \"\\\"\", this.getCssString(),\n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), \"wrap='\", wrap, \"'\",\n\t\t\"></textarea>\");\n}\n\n// you can use these to \nTextarea_XFormItem.prototype.setElementDisabledProperty = function (enable) {\n\tthis.getElement().disabled = (enable != true);\n\tthis.getElement().readOnly = (enable != true)\n}\n\nTextarea_XFormItem.prototype.getKeyPressHandlerHTML = function () {\n\n        var keydownEv = \"onkeydown\";\n        if (AjxEnv.isNav || AjxEnv.isChrome || AjxEnv.isSafari) {\n                keydownEv = \"onkeypress\";\n        }\n        return AjxBuffer.concat(\" \", keydownEv,\"=\\\"\",this.getGlobalRef(), \".handleKeyDown(event, this)\\\"\",\n                                                   \" onkeyup=\\\"\", this.getGlobalRef(), \".handleKeyUp(event, this)\\\"\");\n};\n\n/**\n * @class defines XFormItem type _CHECKBOX_\n * @constructor\n * \n * @private\n */\nCheckbox_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_CHECKBOX_\", \"checkbox\", Checkbox_XFormItem, XFormItem)\n // Wiz_checkbox for appNewUI dialog\n Wiz_Checkbox_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_WIZ_CHECKBOX_\", \"wiz_checkbox\", Wiz_Checkbox_XFormItem, Checkbox_XFormItem)\nif(appNewUI){\n   Wiz_Checkbox_XFormItem.prototype.labelLocation = _RIGHT_;\n   Wiz_Checkbox_XFormItem.prototype.align = _RIGHT_;\n   Wiz_Checkbox_XFormItem.prototype.subLabel = \"\";\n}\n\n\n//\ttype defaults\nCheckbox_XFormItem.prototype._inputType = \"checkbox\";\nCheckbox_XFormItem.prototype.elementChangeHandler = \"onclick\";\nCheckbox_XFormItem.prototype.labelLocation = (appNewUI?_LEFT_:_RIGHT_);\nCheckbox_XFormItem.prototype.cssClass = \"xform_checkbox\";\nCheckbox_XFormItem.prototype.labelCssClass = \"xform_checkbox\";\nCheckbox_XFormItem.prototype.align = (appNewUI?_LEFT_:_RIGHT_);\nCheckbox_XFormItem.prototype.trueValue = _UNDEFINED_;\t\t// Don't set in proto so model can override\nCheckbox_XFormItem.prototype.falseValue = _UNDEFINED_;\nCheckbox_XFormItem.prototype.focusable = true;\nCheckbox_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nCheckbox_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\nCheckbox_XFormItem.prototype.nowrap = false;\nCheckbox_XFormItem.prototype.labelWrap = true;\n//if (appNewUI) {\n   // Checkbox_XFormItem.prototype.subLabel = ZaMsg.CaptionEnabled;\n//}\n//\tmethods\nCheckbox_XFormItem.prototype.outputHTML = function (html, currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked,\n\t\t\">\");\n}\n\n\nCheckbox_XFormItem.prototype.getTrueValue = function () {\n\tvar trueValue = this.getInheritedProperty(\"trueValue\");\n\tif (trueValue == null) trueValue = true;\n\treturn trueValue;\n}\n\nCheckbox_XFormItem.prototype.getFalseValue = function () {\n\tvar falseValue = this.getInheritedProperty(\"falseValue\");\n\tif (falseValue == null) falseValue = false;\n\treturn falseValue;\n}\n\n\n\nCheckbox_XFormItem.prototype.updateElement = function(newValue) {\n\tnewValue = (newValue == this.getTrueValue());\n\tthis.getElement().checked = newValue;\n}\n\nCheckbox_XFormItem.prototype.getElementValueGetterHTML = function () {\n\tvar trueValue = this.getTrueValue();\n\tif (trueValue !== _UNDEFINED_) {\n\t\tif (typeof trueValue == \"string\") trueValue = \"'\" + trueValue + \"'\";\n\t\t\n\t\tvar falseValue = this.getFalseValue();\n\t\tif (typeof falseValue == \"string\") falseValue = \"'\" + falseValue + \"'\";\n\t\n\t\tif (trueValue == null) trueValue = true;\n\t\tif (falseValue == null) falseValue = false;\n\t\n\t\treturn AjxBuffer.concat(\n\t\t\t\"var value = (this.checked ? \",  trueValue, \" : \", falseValue, \");\"\n\t\t);\n\t} else {\n\t\treturn \"var value = '\"+this.getValue()+\"';\";\n\t}\n}\n\n\nif (appNewUI) {  //   bug66133,for some particular places, subLabel need\n    Checkbox_XFormItem.prototype.outputContainerTDEndHTML = function (html) {\n        var tdLabel = this.getInheritedProperty(\"subLabel\");\n        if (AjxUtil.isEmpty(tdLabel)) {\n            tdLabel = \"\";\n        } else {\n            tdLabel = \" \" + tdLabel;\n        }\n\n        html.append(tdLabel + \"</td id=\\\"\",  this.getId(), \"___container\\\">\");\n    }\n}\n// set up how disabling works for this item type\n//\tXXXX eventually we want to disable our label as well...\nCheckbox_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _RADIO_\n * @constructor\n * \n * @private\n */\nRadio_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_\", \"radio\", Radio_XFormItem, Checkbox_XFormItem)\n\n//\ttype defaults\nRadio_XFormItem.prototype._inputType = \"radio\";\nRadio_XFormItem.prototype.focusable = true;\nRadio_XFormItem.prototype.groupname=null;\nRadio_XFormItem.prototype.subLabel = (appNewUI?\"\":null);\nRadio_XFormItem.prototype.align = _RIGHT_;\nRadio_XFormItem.prototype.labelLocation = _RIGHT_;\n//\tmethods\n\nRadio_XFormItem.prototype.updateElement = function(newValue) {\n\tthis.getElement().checked = (this.getValue() == newValue);\n}\n\n//\tmethods\nRadio_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked);\n\tvar groupname = this.getInheritedProperty(\"groupname\");\n\tif(groupname) {\n\t\t\thtml.append(\" name='\",groupname,\"'\");\n\t}\n\thtml.append(\">\");\n}\n\n/**\n * @class defines XFormItem type _RADIO_LABEL_\n * @constructor\n * \n * @private\n */\nRadio_Label_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_LABEL_\", \"radio_label\", Radio_Label_XFormItem, Radio_XFormItem)\n\n//\ttype defaults\nRadio_Label_XFormItem.prototype._inputType = \"radio\";\nRadio_Label_XFormItem.prototype.focusable = true;\nRadio_Label_XFormItem.prototype.groupname=null;\n//\tmethods\n\nRadio_XFormItem.prototype.elementChanged = function(elementValue, instanceValue, event) {\n\tif(elementValue==true) {\n\t\t//this.setInstanceValue(this.getValue());\n\t\tthis.getForm().itemChanged(this.getId(), this.getValue(), event);\n\t}\t\n}\n\nRadio_XFormItem.prototype.updateElement = function(newValue) {\n\tthis.getElement().checked = (this.getValue() == newValue);\n\tvar labelEl = XFG.getEl((this.getId()+\"___labelValue\"));\n\tif(labelEl) {\n\t\tvar labelRef = this.getInheritedProperty(\"labelRef\");\n\t\tif (labelRef == null) \n\t\t\treturn;\n\t\tvar label = this.getInstanceValue(labelRef);\t\n\t\tlabelEl.innerHTML = label;\n\t}\n}\n\n//\tmethods\nRadio_Label_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked);\n\tvar groupname = this.getInheritedProperty(\"groupname\");\n\tif(groupname) {\n\t\t\thtml.append(\" name='\",groupname,\"'\");\n\t}\n\thtml.append(\">\");\n}\n\nRadio_Label_XFormItem.prototype.outputLabelCellHTML = function (html,  rowSpan, labelLocation) {\n\tvar labelRef = this.getInheritedProperty(\"labelRef\");\n\tif (labelRef == null) return;\n\tvar label = this.getInstanceValue(labelRef);\n\tif (label == null) return;\n\tif (label == \"\") label = \"&nbsp;\";\n\tvar accessKey = this.getInheritedProperty(\"labelValue\");\n\tif (labelLocation == _INLINE_) {\n\t\tvar style = this.getLabelCssStyle();\n\t\tif (style == null) style = \"\";\n\t\tstyle = \"position:relative;left:10;top:5;text-align:left;background-color:#eeeeee;margin-left:5px;margin-right:5px;\" + style;\n\t\thtml.append( \"<label id=\\\"\", this.getId(),\"___labelValue\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(null, style), \" FOR=\\\"\",this.getId(), \"\\\">\",\n\t\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t\t\"</label>\"\n\t\t\t\t\t);\n\t} else {\n\t\thtml.append( \"<td \", this.getLabelCssString(), (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\t\n\t\t\"<label id=\\\"\", this.getId(),\"___labelValue\\\"\", \" FOR=\\\"\",this.getId(), \"\\\">\",\n\t\tlabel,\"</label>\");\n\t\thtml.append(\"</td>\");\n\t}\n\n}\n\n/**\n * @class defines XFormItem type _BUTTON_\n * this item is a simple HTML &lt;button> element\n * @constructor\n * \n * @private\n */\nButton_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BUTTON_\", \"button\", Button_XFormItem, XFormItem);\nXFormItemFactory.registerItemType(\"_TRIGGER_\", \"trigger\", Button_XFormItem);\n//\ttype defaults\nButton_XFormItem.prototype.forceUpdate = false;\nButton_XFormItem.prototype.elementChangeHandler = \"onclick\";\nButton_XFormItem.prototype.labelLocation = _NONE_;\nButton_XFormItem.prototype.relevantBehavior = _DISABLE_;\nButton_XFormItem.prototype.cssClass = \"xform_button\";\nButton_XFormItem.prototype.focusable = true;\n// \tmethods\nButton_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// write the div to hold the value (will be filled in on update)\n\thtml.append(\n\t\t\"<button id=\\\"\", this.getId(), \"\\\"\", this.getCssString(),\n\t\t\t\"\\r  \", this.getOnActivateHandlerHTML(), \n\t\t\t\"\\r  \", this.getFocusHandlerHTML(),\n\t\t\"\\r\",\">\", \n\t\t\tthis.getLabel(),\n\t\t\"</button>\");\n}\n\n// set up how disabling works for this item type\nButton_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _SUBMIT_\n * this item is a simple HTML <input type=\"submit\"> element\n * @constructor\n * \n * @private\n */\nSubmit_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SUBMIT_\", \"submit\", Submit_XFormItem, Button_XFormItem)\n\n\n//\tmethods\nSubmit_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\t// write the div to hold the value (will be filled in on update)\n\thtml.append(\n\t\t\"<input id=\\\"\", this.getId(), \"\\\" type=\\\"submit\\\"\", this.getCssString(),\n\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\" value=\\\"\", this.getLabel(), \">\"\n\t);\n}\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _ANCHOR_\n * this item is an HTML &lt;a> element\n * @constructor\n * \n * @private\n */\nAnchor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_ANCHOR_\", \"anchor\", Anchor_XFormItem, XFormItem)\n\n//\ttype defaults\nAnchor_XFormItem.prototype.writeElementDiv = true;\nAnchor_XFormItem.prototype.forceUpdate = true;\nAnchor_XFormItem.prototype.cssClass = \"xform_anchor\";\nAnchor_XFormItem.prototype.elementChangeHandler = \"onclick\";\nAnchor_XFormItem.prototype.href = \"javascript:;\";\nAnchor_XFormItem.prototype.showInNewWindow = true;\nAnchor_XFormItem.prototype.focusable = true;\n\nAnchor_XFormItem.prototype.getHref = function () {\n\treturn this.getInheritedProperty(\"href\");\n}\n\n//\ttype defaults\n\n\nAnchor_XFormItem.prototype.getAnchorTag = function(href, label) {\n\tif (href == null) href = this.getHref();\n\tif (label == null) label = this.getLabel();\n\t\n\tvar inNewWindow = this.getShowInNewWindow();\n\treturn AjxBuffer.concat(\n\t\t\t'<a href=', href, \n\t\t\t\tthis.getOnActivateHandlerHTML(), \n\t\t\t\t(inNewWindow ? ' target=\"_blank\"' : ''),\n\t\t\t'>',\n\t\t\t\tlabel,\n\t\t\t'</a>');\n}\n\n//\tmethods\nAnchor_XFormItem.prototype.outputHTML = function (html) {\n\thtml.append(this.getAnchorTag());\n}\n\n\nAnchor_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value);\n}\n\n\n// set up how disabling works for this item type\nAnchor_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n\n/**\n * @class defines XFormItem type _DATA_ANCHOR_\n * this item is an HTML &lt;a> element\n * @constructor\n * \n * @private\n */\nData_Anchor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATA_ANCHOR_\", \"data_anchor\", Data_Anchor_XFormItem, Anchor_XFormItem)\n\n\nData_Anchor_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(null, value);\n}\n\n\n\n\n/**\n * @class defines XFormItem type _URL_\n * @constructor\n * \n * @private\n */\nUrl_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_URL_\", \"url\", Url_XFormItem, Anchor_XFormItem)\n\n\nUrl_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value, value);\n}\n\n/**\n * @class defines XFormItem type _DATA_URL_\n * @constructor\n * @private\n */\nDataUrl_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATA_URL_\", \"rata_url\", DataUrl_XFormItem, Anchor_XFormItem)\n\nUrl_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value, null);\n}\n\n\n\n/**\n * @class defines XFormItem type _MAILTO_\n * this item is an _ANCHOR_ element with \"mailto:\" link\n * @constructor\n * \n * @private\n */\nMailto_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_MAILTO_\", \"mailto\", Mailto_XFormItem, Anchor_XFormItem)\nMailto_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(\"mailto:\"+value, value);\n}\n\n\n\n\n/**\n * @class defines XFormItem type _IMAGE_\n * @constructor\n * \n * @private\n */\nImage_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_IMAGE_\", \"image\", Image_XFormItem, XFormItem)\n\n\n//\ttype defaults\nImage_XFormItem.prototype.forceUpdate = true;\nImage_XFormItem.prototype.src = _UNDEFINED_;\nImage_XFormItem.prototype.srcPath = _UNDEFINED_;;\nImage_XFormItem.prototype.writeElementDiv = true;\n\n\n//\tmethods\nImage_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\t\n\t// dereference through the choices array, if provided\n\tsrc = this.getChoiceLabel(src);\n\n\t// if we didn't get an image name, output nothing (?)\n\tif (src == null || src == \"\") {\n\t\tvar output = \"\";\n\t} else {\n\t\t// prepend the image path\n\t\tvar path = this.getSrcPath();\n\t\tif (path != null) src = path + src;\n\n\t\tvar output = AjxBuffer.concat(\n\t\t\t\"<img id=\\\"\", this.getId(), \"\\\" border=0 \", this.getCssString(),\n\t\t\t\t\" src=\\\"\", src, \"\\\"\",\n\t\t\t\">\"\n\t\t);\n\t}\n\tthis.getElement().innerHTML = output;\n}\n\n\n// set up how disabling works for this item type\nImage_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n// Ajx_Image\nAjx_Image_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_AJX_IMAGE_\", \"ajx_image\", Ajx_Image_XFormItem, XFormItem);\n\n\n//\ttype defaults\nAjx_Image_XFormItem.prototype.forceUpdate = true;\nAjx_Image_XFormItem.prototype.src = _UNDEFINED_;\nAjx_Image_XFormItem.prototype.srcPath = _UNDEFINED_;;\nAjx_Image_XFormItem.prototype.writeElementDiv = false;\n\n// //\tmethods\nAjx_Image_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\n \t// dereference through the choices array, if provided\n \tsrc = this.getChoiceLabel(src);\n\tvar output;\n \t// if we didn't get an image name, output nothing (?)\n \tif (src == null || src == \"\") {\n \t\toutput = \"\";\n \t} else {\n \t\t// prepend the image path\n \t\tvar path = this.getSrcPath();\n \t\tif (path != null) src = path + src;\n \t\tvar style = this.getCssStyle();\n\t\toutput = AjxImg.getImageHtml(src, \"position:relative;\" + (style ? style : '' ));\n \t}\n \tif (this.getContainer()) this.getContainer().innerHTML = output;\n};\n\n\n// Dwt_Image\nDwt_Image_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_IMAGE_\", \"dwt_image\", Dwt_Image_XFormItem, XFormItem);\n\n\n//\ttype defaults\nDwt_Image_XFormItem.prototype.forceUpdate = true;\nDwt_Image_XFormItem.prototype.src = _UNDEFINED_;\nDwt_Image_XFormItem.prototype.srcPath = _UNDEFINED_;;\nDwt_Image_XFormItem.prototype.writeElementDiv = false;\n\n// //\tmethods\nDwt_Image_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\n \t// dereference through the choices array, if provided\n \tsrc = this.getChoiceLabel(src);\n\tvar output;\n \t// if we didn't get an image name, output nothing (?)\n \tif (src == null || src == \"\") {\n \t\toutput = \"\";\n \t} else {\n \t\t// prepend the image path\n \t\tvar path = this.getSrcPath();\n \t\tif (path != null) src = path + src;\n \t\tvar style = this.getCssStyle();\n\t\tstyle = style || \"\";\n\t\tvar styleStr = \"style='position:relative;\"+ style + \"'\";\n\n\t\tif (src) {\n\t\t\toutput = [\"<div class='\", src, \"' \", styleStr, this.getClickHandlerHTML(), \" ></div>\"].join(\"\");\n\t\t} else {\n\t\t\toutput = [\"<div \", styleStr, this.getClickHandlerHTML(), \" ></div>\"].join(\"\");\n\t\t}\n \t}\n \tthis.getContainer().innerHTML = output;\n};\n\n/**\n * @class defines XFormItem type _SELECT1_\n * this item is rendered as HTML &lt;select> element\n * @constructor\n * \n * @private\n */\nSelect1_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SELECT1_\", \"select1\", Select1_XFormItem, XFormItem)\n\n//\ttype defaults\nSelect1_XFormItem.prototype.multiple = false;\nSelect1_XFormItem.prototype.alwaysUpdateChoices = false;\nSelect1_XFormItem.prototype.focusable = true;\nSelect1_XFormItem.prototype.cssClass = \"xform_select1\";\nSelect1_XFormItem.prototype.containerCssClass = \"xform_select_container\";\nSelect1_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nSelect1_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\n//\tmethods\nSelect1_XFormItem.prototype.initFormItem = function () {\n\t// if we're dealing with an XFormChoices object...\n\tvar choices = this.getChoices();\n\tif (choices == null || choices.constructor != XFormChoices) return;\n\n\t//\t...set up to receive notification when its choices change\n\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\n}\n\n\nSelect1_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\thtml.append( \n\t\t\"<select id=\\\"\", this.getId(), \"\\\" \", this.getCssString(), \n\t\t\t(this.getMultiple() ? \"multiple \" : \"\"), \n\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\">\",\n\t\t\tthis.getChoicesHTML(),\n\t\t\"</select>\"\n\t\t);\n\tthis.cleanChoiceDisplay();\n}\n\nSelect1_XFormItem.prototype.getElementValueGetterHTML = function () {\n\treturn \"var value = XFormItem.getValueFromHTMLSelect(this);\";\n}\n\n\n\nSelect1_XFormItem.prototype.setChoices = function(newChoices) {\n\tthis.choices = newChoices;\n\tthis.dirtyDisplay();\n\tthis.updateChoicesHTML();\n}\n\nSelect1_XFormItem.prototype.dirtyDisplay = function () {\n\tXFormItem.prototype.dirtyDisplay.call(this);\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\n}\n\nSelect1_XFormItem.prototype.updateElement = function (newValue) {\n\tif (this.choicesAreDirty()) this.updateChoicesHTML();\n\tthis.updateValueInHTMLSelect1(newValue, this.getElement(), this.getSelectionIsOpen());\n}\n\n\nSelect1_XFormItem.prototype.cleanChoiceDisplay = function () {\n\tthis._choiceDisplayIsDirty = false;\n}\n\n// set up how disabling works for this item type\nSelect1_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _SELECT_\n * this item is rendered as HTML &lt;select> element\n * @constructor\n * \n * @private\n */\nSelect_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SELECT_\", \"select\", Select_XFormItem, Select1_XFormItem)\n\n//\ttype defaults\nSelect_XFormItem.prototype.multiple = true;\nSelect_XFormItem.prototype.selection = _OPEN_;\nSelect_XFormItem.prototype.focusable = true;\nSelect_XFormItem.prototype.containerCssClass = \"xform_select_container\";\n\n//\tmethods\n\nSelect_XFormItem.prototype.updateElement = function (newValue) {\n\tif (this.choicesAreDirty()) this.updateChoicesHTML();\n\tthis.updateValueInHTMLSelect(newValue, this.getElement(), this.getSelectionIsOpen());\n}\n\n\n\n/**\n * @class defines XFormItem type _SPACER_\n * Use to output an entire row spacer\n * @constructor\n * \n * @private\n */\nSpacer_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SPACER_\", \"spacer\", Spacer_XFormItem, XFormItem)\n\n//\ttype defaults\nSpacer_XFormItem.prototype.forceUpdate = false;\nSpacer_XFormItem.prototype.labelLocation = _NONE_;\nSpacer_XFormItem.prototype.width = 1;\nSpacer_XFormItem.prototype.height = 10;\nSpacer_XFormItem.prototype.cssStyle = \"font-size:1px;overflow:hidden;\";\nSpacer_XFormItem.prototype.colSpan = \"*\";\nSpacer_XFormItem.prototype.focusable = false;\n\n// \tmethods\nSpacer_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\thtml.append( \"<div id=\", this.getId(), this.getCssString(),\"></div>\");\n}\n\n// set up how disabling works for this item type\nSpacer_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n/**\n * @class defines XFormItem type _CELL_SPACER_\n * Use to output a single cell of space\n * @constructor\n * \n * @private\n */\nCell_Spacer_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_CELL_SPACER_\", \"cell_spacer\", Cell_Spacer_XFormItem, Spacer_XFormItem)\nXFormItemFactory.registerItemType(\"_CELLSPACER_\", \"cell_spacer\", Cell_Spacer_XFormItem);\nCell_Spacer_XFormItem.prototype.width = 10;\nCell_Spacer_XFormItem.prototype.height = 10;\nCell_Spacer_XFormItem.prototype.colSpan = 1;\nCell_Spacer_XFormItem.prototype.focusable = false;\n\n/**\n * @class defines XFormItem type _SEPARATOR_\n * @constructor\n * \n * @private\n */\nSeparator_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SEPARATOR_\", \"separator\", Separator_XFormItem, XFormItem)\n\n//\ttype defaults\nSeparator_XFormItem.prototype.cssClass = \"xform_separator\";\nSeparator_XFormItem.prototype.colSpan = \"*\";\nSeparator_XFormItem.prototype.align = _CENTER_;\nSeparator_XFormItem.prototype.valign = _CENTER_;\nSeparator_XFormItem.prototype.height = 10;\nSeparator_XFormItem.prototype.focusable = false;\n\n// methods\nSeparator_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tvar css = (this.getCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\t\n\thtml.append( \n\t\t\t\"<table width=100% cellspacing=0 cellpadding=0>\",\n\t\t\t\t\"<tr><td height=\",this.getHeight(),\">\",\n\t\t\t\t\t\"<div \", css,\"></div>\",\n\t\t\t\"</td></tr></table>\"\n\t);\n}\n\n\n// set up how disabling works for this item type\nSeparator_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _GROUP_\n * @constructor\n * \n * @private\n */\nGroup_XFormItem = function() {\n\tthis.tabIdOrder = [];\n}\nXFormItemFactory.createItemType(\"_GROUP_\", \"group\", Group_XFormItem, XFormItem)\n\n//\ttype defaults\nGroup_XFormItem.prototype.forceUpdate = false;\nGroup_XFormItem.prototype.numCols = 2;\nGroup_XFormItem.prototype.useParentTable = false;\nGroup_XFormItem.prototype.focusable = false;\nGroup_XFormItem.prototype.cellspacing = 0;\nGroup_XFormItem.prototype.border = 0;\nGroup_XFormItem.prototype.cellpadding = 0;\nif(appNewUI){\nGroup_XFormItem.prototype.tableCssClass = \"grid_xform_table\";\n}\nGroup_XFormItem.prototype.initFormItem = function () {\n\tXFormItem.prototype.initFormItem.call(this);\t\n\tif(this.getInheritedProperty(\"isTabGroup\")) {\n\t\tvar form = this.getForm();\n\t\tform.tabIdOrder[this.getId()] = this.tabIdOrder;\n\t\tform.addTabGroup(this);\n\t}\n\n}\n\nGroup_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tthis.getForm().outputItemList(this.getItems(), this, html,   this.getNumCols(), currentCol);\n}\n\nGroup_XFormItem.prototype.clearError = function() {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().clearError();\n\t\treturn;\n\t}\n\n\tthis.getForm().removeErrorItem(this);\n\tif(this.items) {\n\t\tvar cnt = this.items.length;\n\t\tfor(var i = 0; i < cnt; i++) {\n\t\t\tif(this.items[i].getErrorLocation() != _PARENT_ &&  this.items[i].getErrorLocation() != _INHERIT_)\n\t\t\t\tthis.items[i].clearError();\n\t\t}\n\t}\n\tthis.__errorState = XFormItem.ERROR_STATE_VALID;\n\tthis.removeErrorContainer();\n};\n\nGroup_XFormItem.prototype.setElementEnabled  =  function (enable) {\n\t\t\n}\n\nGroup_XFormItem.prototype.updateVisibility = function () {\n\tvar isVisible = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisVisible=this.getParentItem().getIsVisible();\n\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isVisible) {\n\t\tvar myVisibilityChecks = this.getInheritedProperty(\"visibilityChecks\");\n\t\tif(myVisibilityChecks && myVisibilityChecks instanceof Array) {\n\t\t\tvar cnt = myVisibilityChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myVisibilityChecks[i] != null) {\n\t\t\t\t\tif(typeof(myVisibilityChecks[i])==\"function\") {\n\t\t\t\t\t\tisVisible = myVisibilityChecks[i].call(this);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myVisibilityChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myVisibilityChecks[i].shift();\n\t\t\t\t\t\tisVisible = func.apply(this, myVisibilityChecks[i]);\n\t\t\t\t\t\tmyVisibilityChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (typeof (myVisibilityChecks[i]) == \"string\") {\n                        //for relevant backward compatibility\n                        var instance = this.getInstance();\n                        isVisible = eval(myVisibilityChecks[i]) ;\n                        if(!isVisible)\n\t\t\t\t\t\t\tbreak;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\tvar reRunRefresh = false;\t\n\tif(isVisible) {\n\t\tif(this.deferred)\n\t\t\treRunRefresh=true;\n\t\t\t\n\t\tthis.show();\n\t} else\n\t\tthis.hide();\n\t\n\t//update visibility for active child items\n\tif(isVisible) {\n\t\tfor(var itemId in this.activeChildren) {\n\t\t\tif(this.activeChildren[itemId]===true) {\n\t\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\t\tif(item && this.getInstance()) {\n\t\t\t\t\tvar updateMethod = item.getUpdateVisibilityMethod();\t\t\t\t\n\t\t\t\t\tif(updateMethod) {\n\t\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(reRunRefresh) {\n\t\tthis.updateEnabledDisabled();\n\t\tthis.updateElement();\n\t}\t\n}\n\n\n\nStep_Choices_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_STEPCHOICE_\", \"stepchoices\", Step_Choices_XFormItem, Group_XFormItem);\n\nStep_Choices_XFormItem.prototype.numCols = 1;\nStep_Choices_XFormItem.prototype.labelVisibility = _UNDEFINED_;\nStep_Choices_XFormItem.prototype.labelUpdateMethod = function(newValue) {\n    var el = this.getElement();\n    var sourceValue =  this.getInheritedProperty(\"sourceValue\");\n    if (sourceValue < newValue) {\n        el.className = \"AdminOutputTabClick\";\n    } else if (sourceValue == newValue) {\n        el.className =  \"AdminOutputTabSelect\";\n    } else {\n        el.className = \"AdminOutputTab\";\n    }\n}\n\nStep_Choices_XFormItem.prototype.getLabelUpdateMethod = function() {\n    return this.cacheInheritedMethod(\"labelUpdateMethod\", \"$labelUpdateMethod\", \"newValue\");\n}\n\nStep_Choices_XFormItem.prototype.labelClickMethod = function(event) {\n    var sourceValue =  this.getInheritedProperty(\"sourceValue\");\n    var instanceValue = this.getInstanceValue();\n    if (sourceValue < instanceValue) {\n        this.setInstanceValue(sourceValue);\n    }\n}\n\nStep_Choices_XFormItem.prototype.getLabelClickMethod = function() {\n    return this.cacheInheritedMethod(\"labelClickMethod\", \"$labelClickMethod\", \"event\");\n}\n\nStep_Choices_XFormItem.prototype.initFormItem = function() {\n    var choices = this.getNormalizedChoices();\n    if (!choices)\n        return;\n\n\tXFormItem.prototype.initFormItem.call(this);\n\n    this.signUpForEvents();\n    var labels = choices.labels;\n    var values =choices.values;\n\n    this.items = [];\n    var currentItem;\n    var labelUpdateMethod = this.getLabelUpdateMethod();\n    var labelVisibility = this.getInheritedProperty (\"labelVisibility\");\n    var labelOnClickMethod = this.getLabelClickMethod();\n    for (var i = 0; i < labels.length; i++) {\n        if (labelVisibility && labelVisibility[values[i]]) {\n            currentItem = {ref: \".\", type:_OUTPUT_,\n                value:labels[i], sourceValue: values[i],\n                updateElement: labelUpdateMethod,\n                visibilityChecks: labelVisibility[values[i]].checks,\n                visibilityChangeEventSources:labelVisibility[values[i]].sources\n            };\n        } else {\n            currentItem = {ref: \".\", type:_OUTPUT_,\n                value:labels[i], sourceValue: values[i],\n                updateElement: labelUpdateMethod\n            };\n        }\n\n        if (labelOnClickMethod) {\n            currentItem.onClick = labelOnClickMethod;\n        }\n        this.items.push(currentItem);\n    }\n}\n /*\nStep_Choices_XFormItem.prototype.updateElement = function (newValue) {\n    var items = this.getItems();\n    var el;\n    for ( var i = 0; i < items.length; i++) {\n        el = items[i].getElement();\n        if (items[i].getInheritedProperty(\"sourceValue\") == newValue) {\n            Dwt.addClass(el, \"AdminOutputTabSelect\");\n            Dwt.delClass(el, \"AdminOutputTab\");\n        } else {\n            Dwt.delClass(el, \"AdminOutputTabSelect\");\n            Dwt.addClass(el, \"AdminOutputTab\");\n        }\n    }\n}\n*/\n\n\nHomeGroup_XFormItem = function() {\n    this.expanded = true;\n}\nXFormItemFactory.createItemType(\"_HOMEGROUP_\", \"homegroup\", HomeGroup_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nHomeGroup_XFormItem.prototype.headCss = \"homeGroupHeader\";\nHomeGroup_XFormItem.prototype.bodyCss = \"homeGroupBody\";\nHomeGroup_XFormItem.prototype.numCols = 1;\nHomeGroup_XFormItem.prototype.width = \"90%\";\nHomeGroup_XFormItem.prototype.cssStyle = \"margin-left:5%; margin-top: 10px;\";\nHomeGroup_XFormItem.prototype.headerLabel = \"Home Group\";\nHomeGroup_XFormItem.prototype.expandedImg =  \"ImgNodeExpanded\";\nHomeGroup_XFormItem.prototype.collapsedImg =  \"ImgNodeCollapsed\";\nHomeGroup_XFormItem.prototype.initializeItems = function () {\n    this.items = [];\n    this.items[0] = this.getHeaderItems();\n    this.items[1] = this.getContentItems();\n    var content = this.items[1].items;\n    var choices = this.getInheritedProperty(\"contentChoices\");\n    if (!choices[0].label)\n        this.items[1].numCols = 1;\n    for (var i = 0; i < choices.length; i ++) {\n        var currentItem = {type:_OUTPUT_, label: choices[i].label,\n                        value: choices[i].value, containerCssStyle:\"color:blue;cursor:pointer\"};\n        if (choices[i].onClick) {\n            currentItem.onClick = choices[i].onClick;\n        }\n        content.push(currentItem);\n    }\n    Group_XFormItem.prototype.initializeItems.call(this);\n}\n\nHomeGroup_XFormItem.prototype.onClick = function(ev) {\n    var homeItem = this.getParentItem().getParentItem();\n    var contentContainer = homeItem.items[1];\n    if (homeItem.expanded) {\n        homeItem.expanded = false;\n        this.updateElement(homeItem.collapsedImg);\n        contentContainer.hide();\n    } else {\n        homeItem.expanded = true;\n        this.updateElement(homeItem.expandedImg);\n        contentContainer.show();\n    }\n}\n\nHomeGroup_XFormItem.prototype.getHeaderItems =\nfunction () {\n    var headerLabel = this.getInheritedProperty(\"headerLabel\");\n    var headerCss = this.getInheritedProperty(\"headCss\");\n    var headerItems = { type:_COMPOSITE_, numCols:3, width:\"100%\",\n            colSizes:[\"20px\", \"100%\", \"20px\"],\n            items:[\n                {type:_DWT_IMAGE_, value: this.expandedImg, cssStyle:\"position:static;\", onClick:this.onClick},\n                {type:_OUTPUT_, value: headerLabel},\n                {type:_AJX_IMAGE_, value: \"BorderNone\"}\n            ],\n            cssClass:headerCss\n        };\n    return headerItems;\n}\n\nHomeGroup_XFormItem.prototype.getContentItems =\nfunction () {\n    var bodyCss = this.getInheritedProperty(\"bodyCss\");\n    var contentItems = { type:_GROUP_, items:[], cssClass:bodyCss\n    };\n    contentItems.items = [];\n    return contentItems;\n}\n\nCollapsedGroup_XFormItem = function() {\n    this.expanded = true;\n}\nXFormItemFactory.createItemType(\"_COLLAPSED_GROUP_\", \"collapsedgroup\", CollapsedGroup_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nCollapsedGroup_XFormItem.prototype.headCss = \"gridGroupHeader\";\nCollapsedGroup_XFormItem.prototype.contentCss = \"gridGroupContent\";\nCollapsedGroup_XFormItem.prototype.gridLabelCss = \"gridGroupBodyLabel\";\nCollapsedGroup_XFormItem.prototype.colSizes = \"100%\";\nCollapsedGroup_XFormItem.prototype.numCols = 1;\nCollapsedGroup_XFormItem.prototype.width = \"100%\";\nCollapsedGroup_XFormItem.prototype.defaultDisplay = true;\nCollapsedGroup_XFormItem.prototype.displayLabelItem = false;\nCollapsedGroup_XFormItem.prototype.cssClass = \"grid_group_container\";\nCollapsedGroup_XFormItem.prototype.cssStyle = \"margin-top: 10px;\";\nCollapsedGroup_XFormItem.prototype.headerLabel = AjxMsg.collapsedGroup;\nCollapsedGroup_XFormItem.prototype.expandedImg =  \"ImgNodeExpanded\";\nCollapsedGroup_XFormItem.prototype.collapsedImg =  \"ImgNodeCollapsed\";\nCollapsedGroup_XFormItem.prototype.contentTableCssClass = \"grid_table\";\nCollapsedGroup_XFormItem.prototype.containerCssClass = \"grid_table_cell_sheet\";\nCollapsedGroup_XFormItem.prototype.initializeItems = function () {\n    var gridLabelCss = this.getInheritedProperty(\"gridLabelCss\");\n    var oldItems = this.getItems();\n    this.items = [];\n    if(this.__attributes.label) {\n        this.headerLabel = this.__attributes.label;\n    }\n    this.items[0] = this.getHeaderItems();\n    this.items[1] = this.getContentItems();\n    if(!this.items[1] || this.items[1].items.length == 0) {\n        if(oldItems) {\n            for(var i = 0; i < oldItems.length; i++) {\n                if(oldItems[i].type == \"radio\")\n                    continue;  // don't deal with _RADIO_\n                if(oldItems[i].label || oldItems[i].txtBoxLabel) {\n                    if (oldItems[i].type) {\n                        var form = this.getForm();\n                        var constructor =   XFormItemFactory.getItemTypeConstructor(oldItems[i].type, form);\n                        //oldItems[i].labelCssStyle = \"text-align:left; background-color:#DEE5F1 !important;padding-left:10px;\";\n                        if (constructor.prototype.labelCssClass) {\n                           oldItems[i].labelCssClass =  constructor.prototype.labelCssClass + \" \" + gridLabelCss;\n                        } else {\n                            oldItems[i].labelCssClass = gridLabelCss;\n                        }\n                    }\n                    else {\n                        oldItems[i].labelCssClass = gridLabelCss;\n                    }\n                }\n            }\n            this.items[1].items =  oldItems;\n        }\n    }\n\n    Group_XFormItem.prototype.initializeItems.call(this);\n}\n\nCollapsedGroup_XFormItem.prototype.onClick = function(ev) {\n    var headerItem =  this.getParentItem();\n    var collapsedItem = headerItem.getParentItem();\n    var headerContainer = headerItem.items[2];\n    var contentContainer = collapsedItem.items[1];\n    var displayLabelItem = collapsedItem.getInheritedProperty(\"displayLabelItem\");\n    if (collapsedItem.expanded) {\n        collapsedItem.expanded = false;\n        this.updateElement(collapsedItem.collapsedImg);\n        contentContainer.hide();\n        if(displayLabelItem)\n            headerContainer.show();\n    } else {\n        collapsedItem.expanded = true;\n        this.updateElement(collapsedItem.expandedImg);\n        contentContainer.show();\n        headerContainer.hide();\n    }\n}\n\nCollapsedGroup_XFormItem.prototype.getHeaderItems =\nfunction () {\n    var headerLabel = this.getInheritedProperty(\"headerLabel\");\n    var headerLabelWidth = this.getInheritedProperty(\"headerLabelWidth\");\n    var headerCss = this.getInheritedProperty(\"headCss\");\n    var headItems = this.getInheritedProperty(\"headerItems\") || [];\n    var headerItems = { type:_COMPOSITE_, numCols:3, width:\"100%\",\n            colSizes:[\"20px\", headerLabelWidth || \"100%\", \"100%\"], colSpan:\"*\",\n            items:[\n                {type:_DWT_IMAGE_, value: this.expandedImg, cssStyle:\"position:static;\", onClick:this.onClick},\n                {type:_OUTPUT_, value: headerLabel},\n                {type:_GROUP_, items: headItems}\n            ],\n            cssClass:headerCss\n        };\n    return headerItems;\n}\n\nCollapsedGroup_XFormItem.prototype.getContentItems =\nfunction () {\n    var colsize = this.getInheritedProperty(\"colSizes\");\n    var numcols = this.getInheritedProperty(\"numCols\");\n    var contentCss = this.getInheritedProperty(\"contentCss\");\n    var tableCssClass = this.getInheritedProperty(\"contentTableCssClass\");\n    var contentItems = { type:_GROUP_, items:[], colSpan:\"*\",\n                         colSizes:colsize,numCols:numcols, width:\"100%\",\n                         cssClass:contentCss, tableCssClass:tableCssClass\n    };\n    var ref = this.getInheritedProperty(\"ref\");\n    if(ref) {\n        contentItems.ref = ref;\n    }\n    var content =  this.getInheritedProperty(\"contentItems\");\n    if(content)\n        contentItems.items = content;\n    return contentItems;\n}\n\nCollapsedGroup_XFormItem.prototype.updateVisibility = function () {\n\n    XFormItem.prototype.updateVisibility.call(this);\n    var display = this.getInheritedProperty(\"defaultDisplay\");\n    var displayLabelItem = this.getInheritedProperty(\"displayLabelItem\");\n    if(display) {\n        this.items[0].items[2].hide();\n        this.items[1].show();\n        this.items[0].items[0].value = this.expandedImg;\n        this.expanded = true;\n    } else {\n        if(displayLabelItem)\n            this.items[0].items[2].show();\n        else this.items[0].items[2].hide();\n        this.items[1].hide();\n        this.items[0].items[0].__attributes.value = this.collapsedImg;\n        this.expanded = false;\n    }\n}\n\nCollapsedGroup_XFormItem.prototype.getLabel = function () {\n    return null;\n}\n\n\n/**\n * @class defines XFormItem type _GROUPER_\n * Draws a simple border around the group, with the label placed over the border\n * @constructor\n * \n * @private\n */\nGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_GROUPER_\", \"grouper\", Grouper_XFormItem, Group_XFormItem);\nGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nGrouper_XFormItem.prototype.borderCssClass = \"GrouperBorder\";\nGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\nGrouper_XFormItem.prototype.getBorderCssClass = function () {\n\treturn this.getInheritedProperty(\"borderCssClass\");\n}\n\nGrouper_XFormItem.prototype.getInsetCssClass = function () {\n\treturn this.getInheritedProperty(\"insetCssClass\");\n}\n\n// output the label\nGrouper_XFormItem.prototype.outputHTMLStart = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"<div class=\", this.getBorderCssClass(), \">\",\n\t\t\t\t\"<span \", this.getLabelCssString(),\">\", this.getLabel(), \"</span>\",\n\t\t\t\t\"<div class=\", this.getInsetCssClass(),\">\"\n\t\t);\n}\n\nGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"</div></div>\"\n\t\t);\n}\n\n\n\nRadioGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_GROUPER_\", \"radiogrouper\", RadioGrouper_XFormItem, Grouper_XFormItem)\nRadioGrouper_XFormItem.prototype.labelCssClass = \"xform_radio_grouper_label\";\nRadioGrouper_XFormItem.prototype.borderCssClass = \"xform_radio_grouper_border\";\nRadioGrouper_XFormItem.prototype.insetCssClass = \"xform_radio_grouper_inset\";\nRadioGrouper_XFormItem.prototype.width = \"100%\";\n\n\n\nCollapsableRadioGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_COLLAPSABLE_RADIO_GROUPER_\", \"collapsableradiogrouper\", CollapsableRadioGrouper_XFormItem, RadioGrouper_XFormItem)\n\nCollapsableRadioGrouper_XFormItem.prototype.getLabel = function () {\n\tvar label = XFormItem.prototype.getLabel.apply(this);\n\treturn \"<nobr><span class=xform_button style='font-size:9px;color:black;'>&nbsp;&ndash;&nbsp;</span>&nbsp;\"+label+\"</nobr>\";\n}\n\n\n\n\n/**\n * @class defines XFormItem type _CASE_\n * @constructor\n * \n * @private\n */\nCase_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n\n}\nXFormItemFactory.createItemType(\"_CASE_\", \"case\", Case_XFormItem, Group_XFormItem);\n\n//\ttype defaults\nCase_XFormItem.prototype.labelLocation = _NONE_;\nCase_XFormItem.prototype.useParentTable = false;\nCase_XFormItem.prototype.width = \"100%\";\nCase_XFormItem.prototype.focusable = false;\nCase_XFormItem.prototype.deferred = true;\nCase_XFormItem.prototype.cellspacing = 0;\nCase_XFormItem.prototype.cellpadding = 0;\nCase_XFormItem.prototype.cssClass = \"XFormCase\";\nCase_XFormItem.prototype.isTabGroup = true;\t\nCase_XFormItem.prototype.caseVarRef = \"currentStep\";\nCase_XFormItem.prototype.visibilityChangeEventSources = [Case_XFormItem.prototype.caseVarRef];\nCase_XFormItem.prototype.initFormItem = function () {\n\tXFormItem.prototype.initFormItem.call(this);\t\n\tif(this.getInheritedProperty(\"isTabGroup\")) {\n\t\tvar form = this.getForm();\n\t\tform.tabIdOrder[this.getId()] = this.tabIdOrder;\n\t\tform.addTabGroup(this,\"caseKey\");\n\t}\n\n}\nCase_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tthis.deferred = this.getInheritedProperty(\"deferred\");\n\tif(this.deferred) {\n\t\tthis.getForm().outputItemList([], this, html,  this.getNumCols(), 0, true, false);\n\t} else {\n\t\tthis.getForm().outputItemList(this.getItems(), this, html,  this.getNumCols(), currentCol);\n\t}\n}\n\nCase_XFormItem.prototype._outputHTML = function () {\n\tvar form = this.getForm();\n\t\n\tvar element = this.getElement();\n\tif(!element) {\n\t\treturn;\n\t}\n\tvar masterId = this.getId();\n\t\n\tif(this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\")) {\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\n\t\tDwt.setSize(element, width, height);\n\t\tvar container = (form.parent instanceof DwtControl) ? form.parent : DwtControl.fromElementId(window._dwtShellId);\n\t\tif(container) {\n\t\t\tif(this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")) {\n\t\t\t\tcontainer.addControlListener(new AjxListener(this, this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")));\n\t\t\t}\n\t\t}\n\t}\t\n\n    if(this.cacheInheritedMethod(\"getCustomPaddingStyle\", \"$getCustomPaddingStyle\")) {\n        var paddingStyle = this.cacheInheritedMethod(\"getCustomPaddingStyle\", \"$getCustomPaddingStyle\").call(this);\n        if(paddingStyle)\n            element.style.cssText += \";\"+paddingStyle;  //\";\"for IE\n    }\n\n\tif (AjxEnv.isIE) {\n\t\tvar tempDiv = this.createElement(\"temp\",null,\"div\",\"\");\n\t\ttempDiv.display = \"none\";\n\t}\n\n\tvar html = new AjxBuffer();\n\t\n\tif (this.outputHTMLStart) {\n\t\tthis.outputHTMLStart(html,  0);\n\t}\n\t\n\tvar drawTable = (this.getUseParentTable() == false);\n\tif (drawTable) {\n\t\tvar colSizes = this.getColSizes();\n\t\tvar cellspacing = this.getInheritedProperty(\"cellspacing\");\n\t\tvar cellpadding = this.getInheritedProperty(\"cellpadding\");\t\t\n\t\thtml.append(\"<table cellspacing=\",cellspacing,\" cellpadding=\",cellpadding,\" \",  \n\t\t\t\t(XForm._showBorder ? \"border=1\" : \"border=0\"),\n\t\t\t\t\" id=\\\"\", this.getId(),\"_table\\\" \", this.getTableCssString(),\">\");\n\t\tif (colSizes != null) {\n\t\t\thtml.append(\" <colgroup>\");\n\t\t\tfor (var i = 0; i < colSizes.length; i++) {\n\t\t\t\tvar size = colSizes[i];\n\t\t\t\tif (size < 1) size = size * 100 + \"%\";\n\t\t\t\thtml.append(\"<col width=\", size, \">\");\n\t\t\t}\n\t\t\thtml.append(\"</colgroup>\");\n\t\t}\n\t\thtml.append(\"<tbody>\");\n\t}\n\t//output HTML for all child elements\n\tform.outputItemList(this.getItems(), this, html, this.getNumCols(), 0, true, true);\n\thtml.append(\"</table>\");\t\n\n\t\n//\tDBG.dumpObj(html.toString());\n    element.innerHTML = html.toString();\n    this.deferred = false;\n}\n\nCase_XFormItem.prototype.hide = function(isBlock) {\n\tXFormItem.prototype.hide.call(this, isBlock);\n\tthis.hideElement(this.getElement(),isBlock)\t;\n}\n\nCase_XFormItem.prototype.show = function(isBlock) {\n\tXFormItem.prototype.show.call(this, isBlock);\n\tthis.showElement(this.getElement(),isBlock)\t;\n}\n\nCase_XFormItem.prototype.isCurrentTab = function () {\n\tvar isCurrent = false;\n\tvar caseKey = this.getInheritedProperty(\"caseKey\");\n\tif(!AjxUtil.isEmpty(caseKey)) {\n\t\tvar caseVarRef = this.getInheritedProperty(\"caseVarRef\");\n\t\tvar currentKey = this.getInstanceValue(caseVarRef);\n\t\tisCurrent = (currentKey == caseKey);\n\t}\n\treturn isCurrent;\n}\nCase_XFormItem.prototype.visibilityChecks = [Case_XFormItem.prototype.isCurrentTab];\n\n/**\n * @class defines XFormItem type _TOP_GROUPER_\n * Draws a simple border around the group, with the label placed over the border\n * @constructor\n * \n * @private\n */\nTopGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TOP_GROUPER_\", \"top_grouper\", TopGrouper_XFormItem, RadioGrouper_XFormItem)\nTopGrouper_XFormItem.prototype.borderCssClass = \"TopGrouperBorder\";\nTopGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nTopGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nTopGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\n\n// output the label\nTopGrouper_XFormItem.prototype.outputHTMLStart = function (html,   currentCol) {\n\thtml.append(\n\t\t\t\"<div class=\", this.getBorderCssClass(), \">\",\n\t\t\t\t\"<div \", this.getLabelCssString(),\">\", this.getLabel(), \"</div>\",\n\t\t\t\t\"<div class=\", this.getInsetCssClass(),\">\"\n\t\t);\n}\n\nTopGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"</div></div>\"\n\t\t);\n}\n\nif (appNewUI) {\n    XFormItemFactory.createItemType(\"_TOP_GROUPER_\", \"top_grouper\", TopGrouper_XFormItem, CollapsedGroup_XFormItem);\n}\n\nBaseTopGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BASE_TOP_GROUPER_\", \"base_top_grouper\", BaseTopGrouper_XFormItem, RadioGrouper_XFormItem)\nBaseTopGrouper_XFormItem.prototype.borderCssClass = \"TopGrouperBorder\";\nBaseTopGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nBaseTopGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nBaseTopGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\n// output the label\nBaseTopGrouper_XFormItem.prototype.outputHTMLStart = function (html,   currentCol) {\n    html.append(\n            \"<div class=\", this.getBorderCssClass(), \">\",\n                \"<div \", this.getLabelCssString(),\">\", this.getLabel(), \"</div>\",\n                \"<div class=\", this.getInsetCssClass(),\">\"\n        );\n}\n\nBaseTopGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n    html.append(\n            \"</div></div>\"\n        );\n    }\n\n/**\n * @class defines XFormItem type _SWITCH_\n * @constructor\n * \n * @private\n */\nSwitch_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SWITCH_\", \"switch\", Switch_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nSwitch_XFormItem.prototype.labelLocation = _NONE_;\nSwitch_XFormItem.prototype.colSpan = \"*\";\nSwitch_XFormItem.prototype.width = \"100%\";\nSwitch_XFormItem.prototype.numCols = 1;\n\nSwitch_XFormItem.prototype.outputHTML = function (html) {\n\tSwitch_XFormItem.outputItemList.call(this.getForm(),this.getItems(), this, html);\n}\n\nSwitch_XFormItem.prototype.setElementEnabled = function (enable) {};\n\nSwitch_XFormItem.outputItemList = function (items, parentItem, html,   numCols, currentCol, skipTable, skipOuter) {\n\tif (parentItem.outputHTMLStart) {\n\t\tparentItem.outputHTMLStart(html,  currentCol);\n\t}\n\tvar outerStyle = null;\n\tif(!skipOuter) {\n\t\touterStyle = parentItem.getCssString();\n\t\tif (outerStyle != null && outerStyle != \"\") {\n\t\t\tparentItem.outputElementDivStart(html);\n\t\t}\n\t}\n\tfor (var itemNum = 0; itemNum < items.length; itemNum++) {\t\n\t\tvar item = items[itemNum];\n\t\tvar isNestingItem = (item.getItems() != null);\n\t\tvar itemUsesParentTable = (item.getUseParentTable() != false);\n\n\t\tvar writeElementDiv = item.getWriteElementDiv();\n\t\tvar outputMethod = item.getOutputHTMLMethod();\n\t\t\n\t\tif (isNestingItem && itemUsesParentTable) {\n\t\t\t// actually write out the item\n\t\t\tif (outputMethod) outputMethod.call(item, html,  currentCol);\n\n\t\t} else {\n\n\t\t\t// begin the element div, if required\n\t\t\tif (writeElementDiv) \titem.outputElementDivStart(html);\n\t\t\t\n\t\t\t// actually write out the item\n\t\t\tif (outputMethod) outputMethod.call(item, html,  0);\n\n\t\n\t\t\t// end the element div, if required\n\t\t\tif (writeElementDiv) \titem.outputElementDivEnd(html);\n\t\n\t\t}\n\t\t\n\t\tif(parentItem)\n\t\t\tparentItem.registerActiveChild(item);\n\t\t\n\t\titem.signUpForEvents();\n\t\t\n\t\tvar itemUpdateMethod = item.getUpdateElementMethod();\n\t\tif(itemUpdateMethod) {\n\t\t\tvar itemRefpath = item.getRefPath();\n\t\t\tif(itemRefpath) {\n\t\t\t\tvar instance = this.getInstance();\n\t\t\t\tif(instance) {\n\t\t\t\t\titemUpdateMethod.call(item, item.getInstanceValue());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (outerStyle != null && outerStyle != \"\") {\n\t\tparentItem.outputElementDivEnd(html);\n\t}\n\n\n\tif (parentItem.outputHTMLEnd) {\n\t\tparentItem.outputHTMLEnd(html,  currentCol);\n\t}\t\t\n}\n\n/**\n * @class defines XFormItem type _REPEAT_\n * @constructor\n * \n * @private\n */\nRepeat_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n}\nXFormItemFactory.createItemType(\"_REPEAT_\", \"repeat\", Repeat_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nRepeat_XFormItem.prototype.useParentTable = false;\nRepeat_XFormItem.prototype.writeElementDiv = true;\nRepeat_XFormItem.prototype.numCols = 1;\nRepeat_XFormItem.prototype.number = 1;\nRepeat_XFormItem.prototype.showRemoveButton = true;\nRepeat_XFormItem.prototype.showAddButton = true;\nRepeat_XFormItem.prototype.alwaysShowAddButton = false;\nRepeat_XFormItem.prototype.showMoveUpButton = false;\nRepeat_XFormItem.prototype.showMoveDownButton = false;\nRepeat_XFormItem.prototype.bmolsnr = true;\nRepeat_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\nRepeat_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\n\nRepeat_XFormItem.haveAnyRows = function () {\n\treturn (this.getParentItem().getInstanceCount() != 0);\n}\n\nRepeat_XFormItem.isLastRow = function () {\n\treturn ((this.getParentItem().getInstanceCount()-1) == this.getParentItem().instanceNum);\n}\n\nRepeat_XFormItem.isAddButtonVisible = function () {\n\treturn (this.getParentItem().getParentItem().getAlwaysShowAddButton() || Repeat_XFormItem.isLastRow.call(this) || !(Repeat_XFormItem.haveAnyRows.call(this)));\n}\n\nRepeat_XFormItem.prototype.getRemoveButton = function () {\n\tif(!this.removeButton) {\n\t\tthis.removeButton = {\n\t\t\ttype:_BUTTON_, \n\t\t\tlabel: AjxMsg.xformRepeatRemove, \n\t\t\t//width:20,\n\t\t\tcssStyle:\"margin-left:20px;\",\n\t\t\tonActivate:function (event) {\n\t\t\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\t\t\trepeatItem.removeRowButtonClicked(this.getParentItem().instanceNum);\n\t\t\t},\n\t\t\tvisibilityChecks:[Repeat_XFormItem.haveAnyRows],\n\t\t\tvisibilityChangeEventSources:[this.getRef()]\n\t\t};\n\t\tvar label = this.getInheritedProperty(\"removeButtonLabel\");\n\t\tif(label)\n\t\t\tthis.removeButton.label = label;\n\t\t\n\t\tvar width = this.getInheritedProperty(\"removeButtonWidth\");\t\t\n\t\tif (width)\n\t\t\tthis.removeButton.width = width ;\t\t\n\t\t\t\n\t\tvar cssStyle = this.getInheritedProperty(\"removeButtonCSSStyle\");\n\t\tif (cssStyle) \n\t\t\tthis.removeButton.cssStyle = cssStyle ;\t\n\t}\n\treturn this.removeButton;\t\n}\n\nRepeat_XFormItem.prototype.getAddButton = function () {\n\tif(!this.addButton) {\n\t\tvar showAddOnNextRow = this.getInheritedProperty(\"showAddOnNextRow\");\n\t\tthis.addButton = {\n\t\t\tref:\".\",\n\t\t\ttype:_BUTTON_, \n\t\t\tlabel: AjxMsg.xformRepeatAdd, \n\t\t\tonActivate:function (event) {\n\t\t\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\t\t\trepeatItem.addRowButtonClicked(this.getParentItem().instanceNum);\n\t\t\t},\n\t\t\tvisibilityChecks:[Repeat_XFormItem.isAddButtonVisible],\n\t\t\tvisibilityChangeEventSources:[this.getRefPath()],\n\t\t\tforceUpdate:true\n\t\t};\n\t\tvar label = this.getInheritedProperty(\"addButtonLabel\");\n\t\tif(label)\n\t\t\tthis.addButton.label = label;\t\t\t\n\t\t\n\t\tvar width = this.getInheritedProperty(\"addButtonWidth\");\t\t\n\t\tif (width)\n\t\t\tthis.addButton.width = width ;\n\n        var cssStyle = this.getInheritedProperty(\"addButtonCSSStyle\");\n\t\tif (cssStyle)\n\t\t\tthis.addButton.cssStyle = cssStyle ;\n\n\t\tif(showAddOnNextRow) {\n\t\t\tthis.addButton.colSpan = \"*\";\n\t\t}\n\t\t\t\n\t}\n\treturn this.addButton;\t\n}\n\nRepeat_XFormItem.prototype.moveUpButton = {\n\ttype:_BUTTON_, \n\tlabel:\"^\", \n\twidth:20,\n\tcssStyle:\"margin-left:20px;\",\n\tonActivate:function (event) {\n\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\trepeatItem.moveUpButtonClicked(this.getParentItem().instanceNum);\n\t}\n}\nRepeat_XFormItem.prototype.moveDownButton = {\n\tref:\".\",\n\ttype:_BUTTON_, \n\tlabel:\"v\", \n\twidth:20,\n\tonActivate:function (event) {\n\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\trepeatItem.moveDownButtonClicked(this.getParentItem().instanceNum);\n\t},\n\tforceUpdate:true\n}\n\nRepeat_XFormItem.groupVisibilityCheck = function () {\n\treturn ( (this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()) || (this.instanceNum==0));\t\n}\n\nRepeat_XFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\n\tif (items.length == 1 && items[0].items) {\n\t\tvar group = items[0];\n\t} else {\n\t\tvar group = {\t\n\t\t\t\tref: this.getRef(), \n\t\t\t\tfromRepeat:true, \n//\t\t\t\tuseParentTable:true,\n\t\t\t\ttype:_GROUP_, \n\t\t\t\tnumCols: items.length,\n\t\t\t\titems:[].concat(items),\n\t\t\t\tvisibilityChangeEventSources:[this.getRefPath()],\n\t\t\t\tvisibilityChecks:[function() {\n\t\t\t\t\treturn (this.instanceNum==0 || (this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()));\n\t\t\t\t}]\n\t\t\t};\n\t}\n\t\n\tgroup.colSpan = 1;\n\n\t//Check if we have an explicit condition defined for Remove button\n\t\n\t// add the add and remove buttons to the original items array, if appropriate\n\tif (this.getShowRemoveButton()) {\n\t\tvar button = this.getRemoveButton();\n\t\tgroup.items[group.items.length] = button;\n\t\tgroup.numCols++;\t\t\t\n\t}\n\tif (this.getShowAddButton()) {\n\t\tvar button = this.getAddButton();\n\t\n\t\tvar showAddOnNextRow = this.getInheritedProperty(\"showAddOnNextRow\");\n\t\tgroup.items[group.items.length] = button;\n\t\tif(showAddOnNextRow) {\n\t\t\tgroup.items[group.items.length] = \n\t\t\t{type:_SPACER_, colSpan:(group.numCols-1), \n\t\t\t\tvisibilityChecks:[Repeat_XFormItem.isLastRow], \n\t\t\t\tvisibilityChangeEventSources:[this.getRefPath()]\n\t\t\t};\n\t\t} else {\n\t\t\tgroup.numCols++;\n\t\t}\n\t}\n\tif (this.getShowMoveUpButton()) {\n\t\tgroup.items[group.items.length] = this.getMoveUpButton();\n\t\tgroup.numCols++;\n\t}\n\tif (this.getShowMoveDownButton()) {\n\t\tgroup.items[group.items.length] = this.getMoveDownButton();\n\t\tgroup.numCols++;\n\t}\n\n\t// save off the original items in the group\n\tthis.__originalItems = group;\n\t// and reset the items array\n\tthis.items = [];\n}\n\nRepeat_XFormItem.prototype.makeRepeatInstance = function() {\n\t// NOTE: We always append the new items to the end, which is OK,\n\t//\t\t\tsince if a *data value* is inserted in the middle,\n\t//\t\t\teach row will show the proper thing when the update script is called\n\t//\n\t//  NOTE: XFORMS SPEC REQUIRES REPEAT ITEMS TO START AT 1, this implementation starts at 0!!!\n\t//\n\tvar originalGroup = this.__originalItems;\n\tvar numCols = this.getNumCols();\n\tvar newItems = [];\n\t\n\tfor (var i = 0; i < numCols; i++) {\n\t\tvar instanceNum = this.items.length;\n\t\n\t\toriginalGroup.refPath = this.getRefPath() + \"[\" + instanceNum + \"]\";\n\t\n\t\t// initialize the originalGroup and its cloned items\n\t\tgroupItem = this.getForm().initItem(originalGroup, this);\n\t\tgroupItem.instanceNum = instanceNum;\n\t\n\t\tnewItems.push(groupItem);\n\t\tthis.items.push(groupItem);\n\t}\t\n\treturn newItems;\n}\n\n\nRepeat_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\t// output one item to start\n\t//\tall other items will be output dynamically\n\tthis.makeRepeatInstance();\n\tthis.getForm().outputItemList(this.items, this, html, this.getNumCols(), 0);\n}\n\n\nRepeat_XFormItem.prototype.updateElement = function (value) {\n\tvar form = this.getForm();\n\t\n\tvar element = this.getElement();\n\tif (value == null || value === \"\") value = [];\n\tvar itemsToShow = Math.max(value.length, this.getNumberToShow());\n\tvar slotsPresent = this.items.length;\n\n\tvar masterId = this.getId();\n\tif (itemsToShow > slotsPresent) {\n\t\tvar missingElementCount = (itemsToShow - slotsPresent);\n\t\t// create some more slots and show them\n\n\t\tvar table = element.getElementsByTagName(\"table\")[0];\n\t\tvar tbody = element.getElementsByTagName(\"tbody\")[0];\n\t\n\t\tvar tempDiv;\t\n\t\tif (AjxEnv.isIE) {\n\t\t\ttempDiv = this.createElement(\"temp\",null,\"div\",\"\");\n\t\t\ttempDiv.display = \"none\";\n\t\t}\n\t\twhile (this.items.length < itemsToShow) {\n\t\t\tvar newItems = this.makeRepeatInstance(this);\n\t\t\tvar html = new AjxBuffer();\n\t\t\tform.outputItemList(newItems, this, html,  this.getNumCols(), 0, true);\n\t\t\tif (AjxEnv.isIE) {\n\t\t\t\ttempDiv.innerHTML = \"<table>\" + html.toString() + \"</table>\";\n\t\t\t\tvar rows = tempDiv.getElementsByTagName(\"table\")[0].rows;\n\t\t\t\tfor (var r = 0; r < rows.length; r++) {\n\t\t\t\t\ttbody.appendChild(rows[r]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar row = table.insertRow(-1);\n\t\t\t\trow.innerHTML = html;\n\t\t\t}\n\t\t\tvar cnt = newItems.length;\n\t\t\tfor(var i = 0; i <cnt; i++) {\n\t\t\t\tvar updateMethod = newItems[i].getUpdateVisibilityMethod();\n\t\t\t\tif(updateMethod)\n\t\t\t\t\tupdateMethod.call(newItems[i]);\n\t\t\t\t\n\t\t\t\tupdateMethod = newItems[i].getUpdateEnabledDisabledtMethod();\n\t\t\t\tif(updateMethod)\n\t\t\t\t\tupdateMethod.call(newItems[i]);\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t/*var updateMethod = this.getUpdateVisibilityMethod();\n\tif(updateMethod)\n\t\tupdateMethod.call(this);\n\tupdateMethod = this.getUpdateEnabledDisabledtMethod();\n\tif(updateMethod)\n\t\tupdateMethod.call(this);\t*/\n\t\n\tXFormItem.prototype.updateElement.call(this, value);\n}\n\nRepeat_XFormItem.prototype.addRowButtonClicked = function (instanceNum) {\n\tvar path = this.getRefPath();\n\tthis.getModel().addRowAfter(this.getInstance(), path, instanceNum);\n}\n\nRepeat_XFormItem.prototype.removeRowButtonClicked = function (instanceNum) {\n\tvar form = this.getForm();\n\tif (this.getOnRemoveMethod() ) {\n\t\tthis.getOnRemoveMethod().call(this, instanceNum, form)\n\t} else {\n\t\tvar path = this.getRefPath();\n\t\tthis.getModel().removeRow(this.getInstance(), path, instanceNum);\n\t}\n\tthis.items[instanceNum].clearError();\n//\tthis.getForm().setIsDirty(true,this);\n\t\n\tvar event = new DwtXFormsEvent(form, this, this.getInstanceValue());\n\tform.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, event);\n}\n\nRepeat_XFormItem.prototype.getOnRemoveMethod = function() {\n\treturn this.cacheInheritedMethod(\"onRemove\",\"$onRemove\",\"index,form\");\n}\n\n\n/**\n * @class defines XFormItem type _REPEAT_GRID_\n * @constructor\n * \n * @private\n */\nRepeat_Grid_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_REPEAT_GRID_\", \"repeat_grid\", Repeat_Grid_XFormItem, Repeat_XFormItem)\nRepeat_Grid_XFormItem.prototype.showRemoveButton = false;\nRepeat_Grid_XFormItem.prototype.showAddButton = false;\nRepeat_Grid_XFormItem.numCols = 2;\n\n\n\n\n\n/**\n * @class defines XFormItem type _COMPOSITE_\n * @constructor\n * \n * @private\n */\nComposite_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n}\nXFormItemFactory.createItemType(\"_COMPOSITE_\", \"composite\", Composite_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nComposite_XFormItem.prototype.useParentTable = false;\nComposite_XFormItem.prototype.tableCssClass = \"xform_composite_table\";\nComposite_XFormItem.prototype.focusable = false;\n\nComposite_XFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\tif (items == null) return;\n\t\n\t// make sure the numCols is defined (default to the number of items in the composite)\n\tif (this.numCols == null) this.numCols = items.length;\n\t\n\t// actually instantiate them as formItems\n\tthis.items = this.getForm().initItemList(items, this);\n}\n\nComposite_XFormItem.onFieldChange = function(value, event, form) {\n\tif (this.getParentItem() && this.getParentItem().getOnChangeMethod()) {\n\t\treturn this.getParentItem().getOnChangeMethod().call(this, value, event, form);\n\t} else {\n\t\treturn this.setInstanceValue(value);\n\t}\n}\n\n\nSetupGroup_XFormItem = function() {\n}\nSetupGroup_XFormItem.prototype.width=\"100%\";\nXFormItemFactory.createItemType(\"_SETUPGROUP_\", \"setupgroup\", SetupGroup_XFormItem, Composite_XFormItem)\nSetupGroup_XFormItem.prototype.initializeItems = function () {\n    var headerLabels = this.getInheritedProperty(\"headerLabels\");\n    var contentItems = this.getInheritedProperty(\"contentItems\");\n    this.items = [];\n    this.width=\"100%\";\n\n    if (headerLabels.length!= 0 && headerLabels.length == contentItems.length) {\n        var firstlabel = 1;\n        var isLast;\n        for (var i = 0; i < headerLabels.length; i++) {\n            if (i != headerLabels.length - 1) {\n                isLast = false;\n            } else {\n                isLast = true;\n            }\n            var result =  this.constructSingleGroup(headerLabels[i], contentItems[i], firstlabel, isLast);\n            if (result != undefined) {\n                this.items.push(result);\n                firstlabel ++;\n            }\n        }\n    }\n    this.numCols = this.items.length;\n    if (this.numCols > 1)  {\n        var colSize =Math.floor(100/(this.numCols));\n        var lastCol = 100 - colSize* (this.numCols - 1);\n        var colArr = [];\n        for (var i = 0; i < this.numCols - 1; i ++) {\n            colArr.push(colSize + \"%\");\n        }\n        colArr.push(lastCol + \"%\");\n        this.colSizes = colArr;\n    }\n    Composite_XFormItem.prototype.initializeItems.call(this);\n}\n\nSetupGroup_XFormItem.prototype.constructSingleGroup = function (headerLabel, contentItem, index, isLast) {\n    var currentGroup = {type:_GROUP_, numCols:2, width: \"100%\", valign:_TOP_, items:[]};\n    var labelMessage = (index) + \"  \" + headerLabel;\n    /*Header Start*/\n    var headerItems;\n    if (isLast) {\n        headerItems = {type:_OUTPUT_, colSpan: \"*\", value: labelMessage, cssClass: \"ZaHomeSetupHeader ZaHomeSetupTitle\"};\n    } else {\n        headerItems = {type:_GROUP_, colSpan: \"*\", numCols:3, cssClass: \"ZaHomeSetupHeader\",\n            items:[\n                {type:_OUTPUT_, value: labelMessage, cssClass: \"ZaHomeSetupTitle\"},\n                {type:_SPACER_, width:\"5px\", colSpan:1},\n                {type:_AJX_IMAGE_, src:\"SetupArrow\"}\n            ]\n        };\n    }\n\n    currentGroup.items.push(headerItems);\n    /*Body Start*/\n    var singleContentItem;\n    var isAdd = false;\n    var labelNumber = 1;\n    var currentLabel ;\n    for (var i = 0; i < contentItem.length; i++) {\n        if (contentItem[i] && contentItem[i].value) {\n            isAdd = true;\n            currentLabel = labelNumber + \".\";\n            labelNumber ++;\n            singleContentItem = {type:_OUTPUT_, label: currentLabel, value: contentItem[i].value, onClick: contentItem[i].onClick, labelCssClass:\"ZaHomeLinkItemLabel\", containerCssClass:\"ZaLinkedItem\"};\n            currentGroup.items.push(singleContentItem);\n        }\n    }\n\n    if (!isAdd)\n        return undefined;\n    else\n        return currentGroup;\n}\n//Composite_XFormItem.prototype.getErrorContainer = function () {\n//\t\n//}\n\n/**\n * @class defines XFormItem type _DATE_\n * @constructor\n * \n * @private\n */\nDate_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATE_\", \"date\", Date_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nDate_XFormItem.prototype.DATE_MONTH_CHOICES = [\n\t\t\t\t{value:1, label:I18nMsg.monthJanMedium},\n\t\t\t\t{value:2, label:I18nMsg.monthFebMedium},\n\t\t\t\t{value:3, label:I18nMsg.monthMarMedium},\n\t\t\t\t{value:4, label:I18nMsg.monthAprMedium},\n\t\t\t\t{value:5, label:I18nMsg.monthMayMedium},\n\t\t\t\t{value:6, label:I18nMsg.monthJunMedium},\n\t\t\t\t{value:7, label:I18nMsg.monthJulMedium},\n\t\t\t\t{value:8, label:I18nMsg.monthAugMedium},\n\t\t\t\t{value:9, label:I18nMsg.monthSepMedium},\n\t\t\t\t{value:10, label:I18nMsg.monthOctMedium},\n\t\t\t\t{value:11, label:I18nMsg.monthNovMedium},\n\t\t\t\t{value:12, label:I18nMsg.monthDecMedium}\n\t\t\t];\nDate_XFormItem.prototype.DATE_DAY_CHOICES = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\n\t\t\t\t\t\t  \"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\n\t\t\t\t\t\t  \"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"];\nDate_XFormItem.prototype.numCols = 3;\nDate_XFormItem.prototype.items = [\n\t{\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\trelevantBehavior:_PARENT_,\n\t\tchoices: Date_XFormItem.prototype.DATE_MONTH_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + (newValue.getMonth() + 1);\n\t\t},\n\t\telementChanged:function (monthStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar month = parseInt(monthStr);\n\t\t\tif (!isNaN(month)) {\n\t\t\t\tmonth -= 1;\n\t\t\t\tcurrentDate.setMonth(month);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\t},\n\t{\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\trelevantBehavior:_PARENT_,\n\t\tlabelLocation:_NONE_,\n\t\tchoices: Date_XFormItem.prototype.DATE_DAY_CHOICES,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + newValue.getDate();\n\t\t},\n\t\telementChanged: function (dateStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar date = parseInt(dateStr);\n\t\t\tif (!isNaN(date)) {\n\t\t\t\tcurrentDate.setDate(date);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\t},\n\t{\ttype:_TEXTFIELD_, \n\t\tref:\".\",\n\t\trelevantBehavior:_PARENT_,\n\t\twidth:45,\n\t\tlabelLocation:_NONE_,\n\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + newValue.getFullYear();\n\t\t},\n\t\telementChanged: function (yearStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar year = parseInt(yearStr);\n\t\t\tif (!isNaN(year)) {\n\t\t\t\tcurrentDate.setYear(year);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\n\t}\n];\n\n\n\n/**\n * @class defines XFormItem type _TIME_\n * @constructor\n * \n * @private\n */\nTime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TIME_\", \"time\", Time_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nTime_XFormItem.prototype.numCols = 3;\nTime_XFormItem.prototype.TIME_HOUR_CHOICES = [\"1\",\"2\",\"3\",\"4\",\"5\", \"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"];\nTime_XFormItem.prototype.TIME_MINUTE_CHOICES = [\"00\",\"05\",\"10\",\"15\",\"20\",\"25\", \"30\",\"35\",\"40\",\"45\",\"50\",\"55\"];\nTime_XFormItem.prototype.TIME_AMPM_CHOICES = [I18nMsg.periodAm,I18nMsg.periodPm];\n\n\nTime_XFormItem.prototype.items = [\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tchoices: Time_XFormItem.prototype.TIME_HOUR_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar hours = \"\" + (newValue.getHours() % 12);\n\t\t\tif (hours == \"0\") hours = \"12\";\n\t\t\treturn hours;\n\t\t},\n\t\telementChanged:function (hoursStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\t\t\tvar hours = parseInt(hoursStr);\n\t\t\tif (!isNaN(hours)) {\n\t\t\t\tif (hours == 12) hours = 0;\n\t\t\t\tvar wasPM = (currentDate.getHours() > 11);\n\t\t\t\tif (wasPM) hours += 12;\n\t\t\t\tthis.__dummyDate.setHours(hours);\n\t\t\t}\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod != null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(),this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t},\n\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tchoices: Time_XFormItem.prototype.TIME_MINUTE_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar minutes = newValue.getMinutes();\n\t\t\tminutes = Math.round(minutes / 5) * 5;\n\t\t\tminutes = (minutes < 10 ? \"0\" + minutes : \"\" + minutes);\n\t\t\treturn minutes;\n\t\t},\n\t\telementChanged:function (minutesStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\t\t\n\t\t\tvar minutes = parseInt(minutesStr);\n\t\t\tif (!isNaN(minutes)) {\n\t\t\t\tthis.__dummyDate.setMinutes(minutes);\n\t\t\t}\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod!= null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(), this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\tchoices: Time_XFormItem.prototype.TIME_AMPM_CHOICES,\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar hours = newValue.getHours();\n\t\t\tif (hours > 11) return I18nMsg.periodPm;\n\t\t\treturn I18nMsg.periodAm;\n\t\t},\n\t\telementChanged:function (ampmStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\n\t\t\tvar isPM = (ampmStr == I18nMsg.periodPm);\n\t\t\tvar hours = currentDate.getHours() % 12;\n\t\t\t\n\t\t\tthis.__dummyDate.setHours(hours + (isPM ? 12 : 0));\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod!= null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(), this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t}\n];\n\n\n\n\n/**\n * @class defines XFormItem type _DATETIME_\n * @constructor\n * \n * @private\n */\nDatetime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATETIME_\", \"datetime\", Datetime_XFormItem, Composite_XFormItem)\n\nDatetime_XFormItem._datetimeFormatToItems = function(format, dateItem, timeItem) {\n\tvar items = [];\n\tvar pattern = /{(\\d+),\\s*(date|time)}/;\n\tvar index = 0;\n\twhile ((index = format.search(pattern)) != -1) {\n\t\tif (index > 0) {\n\t\t\tvar item = { type: _OUTPUT_, value: format.substring(0,index), valign: _CENTER_ };\n\t\t\titems.push(item);\n\t\t\tformat = format.substring(index);\n\t\t}\n\t\tvar result = pattern.exec(format);\n\t\titems.push(result[2] == \"date\" ? dateItem : timeItem);\n\t\tformat = format.substring(result[0].length);\n\t}\n\tif (format.length > 0) {\n\t\tvar item = { type:_OUTPUT_, value: format };\n\t\titems.push(item);\n\t}\n\treturn items;\n}\n\n//\ttype defaults\nDatetime_XFormItem.prototype.numCols = 3;\nDatetime_XFormItem.prototype.items = Datetime_XFormItem._datetimeFormatToItems(\n\tAjxMsg.xformDateTimeFormat,\n\t{type:_DATE_, ref:\".\", labelLocation:_NONE_},\n\t{type:_TIME_, ref:\".\", labelLocation:_NONE_}\n);\n\n\n/**\n * @class defines XFormItem type _WIDGET_ADAPTOR_\n *\tAn adaptor for using any random (non-DWT) widget in an xform\n *\tNOTE: the generic implementation assumes:\n *\t\t\t1) you'll create a method called \"constructWidget()\" which will construct the appropriate widget\n *\t\t\t2) the widget has a function \"insertIntoXForm(form, item, element)\"\n *\t\t\t\t(overide \"this.insertWidget\" to change)\n *\t\t\t3) the widget has a function \"updateInXForm(form, item, value, element)\"\n *\t\t\t\t(overide \"this.updateWidget\" to change)\n *\n * @constructor\n * \n * @private\n */\nWidgetAdaptor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_WIDGET_ADAPTOR_\", \"widget_adaptor\", WidgetAdaptor_XFormItem, XFormItem)\n\n//\ttype defaults\nWidgetAdaptor_XFormItem.prototype.writeElementDiv = true;\nWidgetAdaptor_XFormItem.prototype.focusable = false;\n//\tmethods\n\n// implement the following to actually construct the instance of your widget\nWidgetAdaptor_XFormItem.prototype.constructWidget = function () {}\n\n\n//\n//\tinsertElement must guarantee that each element is only inserted ONCE\n//\nWidgetAdaptor_XFormItem.prototype.insertElement = function () {\n\tif (!this.__alreadyInserted) {\n\t\tthis.__alreadyInserted = true;\n\t\t\n\t\t// try to construct a widget\n\t\tvar widget = this.constructWidget();\n\n\t\t// if we didn't get one, there's nothing to do here\n\t\tif (widget == null) return;\n\n\t\t// otherwise insert it into the form!\n\t\tthis.widget = widget;\n\t\tthis.insertWidget(this.getForm(), this.widget, this.getElement());\n\t}\n}\n\nWidgetAdaptor_XFormItem.prototype.showElement = function (id) {\n\tthis.insertElement();\n\tXForm.prototype.showElement.call(this, id);\n}\n\nWidgetAdaptor_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.widget.insertIntoXForm(form, this, element);\n}\n\nWidgetAdaptor_XFormItem.prototype.updateElement = function(newValue) {\n\tif (this.__alreadyInserted) \n\t\tthis.updateWidget(newValue);\n}\nWidgetAdaptor_XFormItem.prototype.updateWidget = function (newValue) {\n\tthis.widget.updateInXForm(this.getForm(), this, newValue, this.getElement());\n}\n\n\n\n\n\n/**\n * @class defines XFormItem type _DWT_ADAPTOR_\"\n *\n *\tAn adaptor for using any random DWT widget in an xform\n *\n *\tNOTE: the generic implementation assumes:\n *\t\t\t1) you'll create a method called \"constructWidget()\" which will construct the appropriate widget\n *\t\t\t2) you'll adapt \"insertWidget(form,  widget, element)\" to insert the widget properly\n *\t\t\t3) you'll adapt \"updateWidget(newValue)\" to update the value properly\n * @constructor\n * \n * @private\n */\nDwt_Adaptor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_ADAPTOR_\", \"dwt_adaptor\", Dwt_Adaptor_XFormItem, WidgetAdaptor_XFormItem)\n\n//\ttype defaults\nDwt_Adaptor_XFormItem.prototype.focusable = false;\n//\tmethods\n\nDwt_Adaptor_XFormItem.prototype.setElementEnabled = function(enabled) {\n\tWidgetAdaptor_XFormItem.prototype.setElementEnabled.call(this, enabled);\n\tif (this.widget) {\n\t\tthis.widget.setEnabled(enabled);\n\t}\n\tthis._enabled = enabled;\n}\n\n// implement the following to actually construct the instance of your widget\nDwt_Adaptor_XFormItem.prototype.constructWidget = function () {}\n\n\nDwt_Adaptor_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, element);\n}\n\nDwt_Adaptor_XFormItem.prototype.updateWidget = function (newValue) {}\n\nDwt_Adaptor_XFormItem.prototype.getDwtSelectItemChoices = function () {\n\tif (this.__selOption != null) return this.__selOptions;\n\t\n\tvar selectOptions = null;\n\tvar choices = this.getChoices();\n\tif (choices != null) {\n\t\tvar selectOptions = new Array(choices.length);\n\t\tfor (var i = 0; i < choices.length; i++) {\n\t\t\tvar choice = choices[i];\n\t\t\tvar choiceValue = (choice instanceof Object ? choice.value : choice);\n\t\t\tvar choiceLabel = (choice instanceof Object ? choice.label : choice);\n\t\t\tselectOptions[i] = new DwtSelectOptionData(choiceValue, choiceLabel);\n\t\t}\n\t}\n\tthis.__selOptions = selectOptions;\n\treturn this.__selOptions;\n};\n\nDwt_Adaptor_XFormItem.prototype._addCssStylesToDwtWidget = function () {\n\tvar style = this.getCssStyle();\n\tif (style != null){\n\t\tvar styleArr = style.split(\";\");\n\t\tvar el = this.widget.getHtmlElement();\n\t\tvar kp;\n\t\tfor (var i = 0 ; i < styleArr.length ; ++i ){\n\t\t\tkp = styleArr[i].split(\":\");\n\t\t\tif (kp.length > 0){\n\t\t\t\tvar key = kp[0];\n\t\t\t\tif (key != null) {\n\t\t\t\t\tkey = key.replace(/^(\\s)*/,\"\");\n\t\t\t\t}\n\t\t\t\tif (key == \"float\"){\n\t\t\t\t\tkey = (AjxEnv.isIE)? \"styleFloat\": \"cssFloat\";\n\t\t\t\t}\n\t\t\t\tvar val = kp[1];\n\t\t\t\tif (val != null) {\n\t\t\t\t\tel.style[key] = val.replace(/^(\\s)*/,\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @class defines XFormItem type  _DWT_BUTTON_\n * Adapts a DwtButton to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Button_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_BUTTON_\", \"dwt_button\", Dwt_Button_XFormItem, Dwt_Adaptor_XFormItem)\nDwt_Button_XFormItem.estimateMyWidth = function (label,withIcon,extraMargin) {\n    var width;\n    if(ZaZimbraAdmin.LOCALE==\"ja\"||ZaZimbraAdmin.LOCALE==\"ko\"||ZaZimbraAdmin.LOCALE==\"zh_CN\"||ZaZimbraAdmin.LOCALE==\"zh_HK\")\n         width = (String(label).length)*XForm.FONT_WIDTH1 + (String(label).length)*XForm.FONT_WIDTH2 + 14;\n    else\n\t     width = (String(label).length/2)*XForm.FONT_WIDTH1 + (String(label).length/2)*XForm.FONT_WIDTH2 + 14;\n\n    if(withIcon)\n\t\twidth = width + 24;\n\t\n\tif(extraMargin>0)\n\t\twidth = width + extraMargin;\t\n\treturn [width,\"px\"].join(\"\");\n}\n//\ttype defaults\nDwt_Button_XFormItem.prototype.labelLocation = DwtLabel.IMAGE_LEFT | DwtLabel.ALIGN_CENTER;\nDwt_Button_XFormItem.prototype.writeElementDiv = false;\nDwt_Button_XFormItem.prototype.autoPadding= true;\n//\tmethods\n\nDwt_Button_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n};\n\n// implement the following to actually construct the instance of your widget\nDwt_Button_XFormItem.prototype.constructWidget = function () {\n\tvar widget = this.widget = new DwtButton(this.getForm(), this.getLabelLocation(), this.getCssClass());\n\tvar height = this.getHeight();\n\tvar width = this.getWidth();\n\t\n\tvar el = null;\n\tif (width != null || height != null){\n\t\tel = widget.getHtmlElement();\n\t\tif (width != null) el.style.width = width;\n\t\tif (height != null) el.style.height = height;\n\t} \n\tthis._addCssStylesToDwtWidget();\n\t\n\tvar icon = this.getInheritedProperty(\"icon\");\n\tif(icon != null) {\n\t\twidget.setImage(icon);\n\t}\n\t\n\tvar isToolTip = false;\t\n\tvar toolTipContent = this.getInheritedProperty(\"toolTipContent\");\n\tif(toolTipContent != null) {\n\t\twidget.setToolTipContent(toolTipContent);\n\t\tisToolTip = true;\n\t}\n\t\n        var labelContent = this.getLabel();\n\t\n\ttry{\n\t\tvar size = Dwt.getSize(this.getContainer());\n\t\tif(labelContent){\n\t\t\tvar totalCharWidth = AjxStringUtil.getWidth(labelContent);\n\t\t\tvar textLength;\n\t\t\tif(icon){\t\n\t\t\t\ttextLength = size.x - 42; // exclude icons, paddings, margin, borders\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttextLength = size.x - 22; // exclude paddings, margin, borders\n\t\t\t}\n\t\t\t\n\t\t\tif( (textLength > 0) && (totalCharWidth > textLength)){\n\t\t\t\tif(!isToolTip){\n                                \twidget.setToolTipContent(labelContent);\n                                }\n\n\t\t\t\tvar totalNumber = labelContent.length;\n\t\t\t\tvar textLength = textLength - AjxStringUtil.getWidth(\"...\"); // three '.'\n\t\t\t\tvar maxNumberOfLetters= Math.floor(textLength * totalNumber / totalCharWidth);\n\t\t\t\tif(textLength > 0){\n\t\t\t\t\tlabelContent = labelContent.substring(0, maxNumberOfLetters) + \"...\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t \n\t\t\tel =  widget.getHtmlElement();\n            var tableEl = el.firstChild;\n            var isAutoPadding = this.getInheritedProperty(\"autoPadding\");\n            if(!tableEl.style.width && isAutoPadding){\n                 tableEl.style.width = \"100%\";\n            }\n\n\t\t}\t\t\n\t}catch(ex){\n\t}\n\n\twidget.setText(labelContent);\n\n\tvar onActivateMethod = this.getOnActivateMethod();\n\tif (onActivateMethod != null) {\n\t\tvar ls = new AjxListener(this, onActivateMethod);\n\t\twidget.addSelectionListener(ls);\n\t}\n\n\tif (this._enabled !== void 0) {\n\t\t//this.widget = widget;\n\t\tthis.setElementEnabled(this._enabled);\n\t}\n\t\n\treturn widget;\n}\n\nDwt_Button_XFormItem.prototype.getWidget =\nfunction (){\n\treturn this.widget ;\n}\n\n/**\n * @class defines XFormItem type _DWT_SELECT_\n * Adapts a DwtSelect to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Select_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_SELECT_\", \"dwt_select\", Dwt_Select_XFormItem, Dwt_Adaptor_XFormItem)\n\n//\ttype defaults\nDwt_Select_XFormItem.prototype.writeElementDiv = false;\n//\tmethods\n\nDwt_Select_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n}\n\nDwt_Select_XFormItem.prototype.constructWidget = function () {\n\tvar choices = this.getDwtSelectItemChoices(this.getChoices());\n\n\tvar widget = this.widget = new DwtSelect(this.getForm(), choices);\n\tvar height = this.getHeight();\n\tvar width = this.getWidth();\n\tif (width != null || height != null){\n\t\tvar el = widget.getHtmlElement();\n\t\tif (width != null) el.style.width = width;\n\t\tif (height != null) el.style.height = height;\n\t} \n\tthis._addCssStylesToDwtWidget();\n\n\tvar onChangeFunc = new Function(\"event\", \n\t\t\t\"var widget = event._args.selectObj;\\r\"\n\t\t  + \"value = event._args.newValue; \" + this.getExternalChangeHandler()\n\t);\n\tvar ls = new AjxListener(this.getForm(), onChangeFunc);\n\twidget.addChangeListener(ls);\n\n\tif (this._enabled !== void 0) {\n\t\t//this.widget = widget;\n\t\tthis.setElementEnabled(this._enabled);\n\t}\n\treturn widget;\n}\n\nDwt_Select_XFormItem.prototype.updateWidget = function (newValue) {\n\tthis.widget.setSelectedValue(newValue);\n}\n\nDwt_Select_XFormItem.prototype.setElementEnabled = function (enable) {\n\tthis._enabled = enable;\n\tif (this.widget == null) return;\n\tif (enable) {\n\t\tthis.widget.enable();\n\t} else {\n\t\tthis.widget.disable();\n\t}\n};\n\n/**\t\n * @class defines XFormItem type _DWT_COLORPICKER_\n * Adapts a DwtButtonColorPicker to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_ColorPicker_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_COLORPICKER_\", \"dwt_colorpicker\", Dwt_ColorPicker_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_ColorPicker_XFormItem.prototype.cssStyle = \"width:80px;\";\nDwt_ColorPicker_XFormItem.prototype.nowrap = false;\nDwt_ColorPicker_XFormItem.prototype.labelWrap = true;\nDwt_ColorPicker_XFormItem.prototype.constructWidget = function () {\n    var params = {\n        parent: this.getForm(),\n        allowColorInput: true,\n        noFillLabel: ZaMsg.bt_reset\n    };\n    var widget = new DwtButtonColorPicker (params) ;\n\twidget.setActionTiming(DwtButton.ACTION_MOUSEDOWN);\n\n    var buttonImage = this.getInheritedProperty(\"buttonImage\") || \"FontColor\";\n    widget.setImage(buttonImage);\n\twidget.showColorDisplay(true);\n\twidget.setToolTipContent(ZMsg.xformFontColor);\n\tif (this.getInstanceValue() != null) {\n\t\twidget.setColor(this.getInstanceValue());       \n\t}\n//\twidget.addSelectionListener(new AjxListener(this, this._colorOnChange)); //it cause the dwt color picker event handller is not invoked correctly\n    widget.__colorPicker.addSelectionListener(new AjxListener(this, this._colorOnChange)) ;\n\treturn widget;\n}\n\nDwt_ColorPicker_XFormItem.prototype.updateWidget = function (newValue) {\n\tif(!this.widget)\n\t\treturn;\n\t\t\n\t//if(window.console && window.console.log) console.log (\"new color = \" + newValue) ;\n\tif (newValue != null) {\n\t\tthis.widget.setColor(newValue);\n\t}else { //ensure the empty color can be set in the UI\n        this.widget.setColor(\"\");            \n    }\n};\n\nDwt_ColorPicker_XFormItem.prototype._colorOnChange = function (event) {\n\tvar value = event.detail;\n    \n    var elementChanged = this.getElementChangedMethod();\n\tif (elementChanged) {\n\t\telementChanged.call(this,value, this.getInstanceValue(), event);\n\t}\n\tvar onChangeFunc = this.getOnChangeMethod();\n\tif (onChangeFunc) {\n\t\tonChangeFunc.call(this, value, event, this.getForm());\t\n\t}\n};\n\n/**\t\n * @class defines XFormItem type _DWT_DATE_\n * Adapts a DwtCalendar to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Date_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_DATE_\", \"dwt_date\", Dwt_Date_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_Date_XFormItem.prototype.cssClass =  \"xform_dwt_date\";\n\n\n//\tmethods\n\nDwt_Date_XFormItem.prototype.constructWidget = function () {\n\tvar firstDayOfWeek = this.getInheritedProperty(\"firstDayOfWeek\");\n\tvar widget = new DwtButton(this.getForm());\n\twidget.setActionTiming(DwtButton.ACTION_MOUSEDOWN);\n\n\t// ONE MENU??\n\tvar menu = this.menu = new DwtMenu(widget, DwtMenu.CALENDAR_PICKER_STYLE, null, null, this.getForm());\n\tmenu.setSize(\"150\");\n\tmenu._table.width = \"100%\";\n\twidget.setMenu(menu, true);\n\tmenu.setAssociatedObj(widget);\n\n\t// For now, create a new DwtCalendar for each of the buttons, since on\n\t// IE, I'm having trouble getting the one calendar to work.\n\t// TODO: Figure out the IE problem.\n\t//var cal = new DwtCalendar(menu);\n\tvar cal = new DwtCalendar({parent:menu,firstDayOfWeek:(!AjxUtil.isEmpty(firstDayOfWeek) ? firstDayOfWeek : 0)});\n\tcal._invokingForm = this.getForm();\n\tcal._invokingFormItemId = this.getId();\n\tcal.setDate(new Date(), true);\n\tcal.addSelectionListener(new AjxListener(this, this._calOnChange));\n\twidget.__cal = cal;\n\treturn widget; \n}\n\nDwt_Date_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (newValue == null) newValue = new Date();\n\tthis.widget.setText(this.getButtonLabel(newValue));\n\tthis.widget._date = newValue;\n\tthis.widget.__cal.setDate(newValue,true);\n};\n\n\nDwt_Date_XFormItem.prototype._calOnChange = function (event) {\n\tvar value = event.detail;\n\tvar cal = event.item;\n\tvar elemChanged = this.getElementChangedMethod();\n\telemChanged.call(this,value, this.getInstanceValue(), event);\t\n};\n\nDwt_Date_XFormItem.prototype.getButtonLabel = function (newValue) {\n\tif (newValue == null || !(newValue instanceof Date)) return \"\";\n        var formatter = AjxDateFormat.getDateInstance(AjxDateFormat.NUMBER);\n\treturn formatter.format(newValue) ;//(newValue.getMonth()+1) + \"/\" + newValue.getDate() + \"/\" + (newValue.getFullYear());\n};\n\n\n/**\n * @class defines XFormItem type _DWT_TIME_\n * Adapts a DwtTimeSelect to work with the XForm\n * @constructor\n *\n * @private\n */\nDwt_Time_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_TIME_\", \"dwt_time\", Dwt_Time_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_Time_XFormItem.prototype.cssClass =  \"xform_dwt_time\";\n\nDwt_Time_XFormItem.prototype.constructWidget = function () {\n\tvar widget = new DwtTimeSelect(this.getForm());\n    widget.addChangeListener(this._onChange.bind(this));\n    return widget;\n};\n\nDwt_Time_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (newValue == null) {\n        newValue = new Date();\n        newValue.setHours(0, 0, 0, 0);\n    }\n\tthis.widget.set(newValue);\n};\n\nDwt_Time_XFormItem.prototype._onChange = function (event) {\n\tvar value = this.widget.getValue();\n\tvar elemChanged = this.getElementChangedMethod();\n\telemChanged.call(this, value, this.getInstanceValue(), event);\n};\n\n\n/**\n * @class defines XFormItem type _DWT_DATETIME_\n * Composes a _DWT_DATE_ and a (non-DWT) _TIME_ to make a date/time editor, just for kicks.\n * @constructor\n * \n * @private\n */\nDwt_Datetime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_DATETIME_\", \"dwt_datetime\", Dwt_Datetime_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nDwt_Datetime_XFormItem.prototype.numCols = 3;\nDwt_Datetime_XFormItem.prototype.useParentTable = false;\nDwt_Datetime_XFormItem.prototype.cssClass =  \"xform_dwt_datetime\";\nDwt_Datetime_XFormItem.initialize = function(){\n   Dwt_Datetime_XFormItem.prototype.items = Datetime_XFormItem._datetimeFormatToItems(\n\tAjxMsg.xformDateTimeFormat,\n\t{type:_DWT_DATE_, ref:\".\", labelLocation:_NONE_, errorLocation:_PARENT_,\n\t elementChanged:\n\t function (newDate, currentDate, event) {\n\t \tcurrentDate = currentDate ? currentDate : new Date();\n\t\tnewDate.setHours(currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds(), 0);\n\t\tvar elementChangedMethod = this.getParentItem().getElementChangedMethod();\n\t\tif(elementChangedMethod)\n\t\t\telementChangedMethod.call(this.getParentItem(),newDate, currentDate, event);\n\t }\n\t},\n\t{type:_DWT_TIME_, ref:\".\", labelLocation:_NONE_, errorLocation:_PARENT_,\n\t elementChanged:\n\t function (newDate, currentDate, event) {\n\t\tcurrentDate = currentDate ? currentDate : new Date();\n\t\t//If time is changed set the full year of new date with current date.\n\t\tnewDate.setFullYear(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n\t\tvar elementChangedMethod = this.getParentItem().getElementChangedMethod();\n\t\tif(elementChangedMethod)\n\t\t\telementChangedMethod.call(this.getParentItem(),newDate, currentDate, event);\n\t }\n\t}\n);\n}\nDwt_Datetime_XFormItem.initialize();\n\n\n/**\n * @class defines XFormItem type _DWT_LIST_\n * @constructor\n * \n * @private\n */\nDwt_List_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_LIST_\", \"dwt_list\", Dwt_List_XFormItem, Dwt_Adaptor_XFormItem)\n\n//\ttype defaults\nDwt_List_XFormItem.prototype.writeElementDiv = false;\nDwt_List_XFormItem.prototype.widgetClass = DwtListView;\nDwt_List_XFormItem.prototype.bmolsnr = true;\nDwt_List_XFormItem.prototype.getOnSelectionMethod = function() {\n\treturn this.cacheInheritedMethod(\"onSelection\",\"$onSelection\",\"event\");\n}\n\n\nDwt_List_XFormItem.prototype.constructWidget = function () {\n\tvar headerList = this.getInheritedProperty(\"headerList\");\n\tvar listClass = this.getInheritedProperty(\"widgetClass\");\n\t\n\tvar hideHeader = this.getInheritedProperty(\"hideHeader\");\n\n\tvar widget = new listClass(this.getForm(), this.getCssClass(), null, ((hideHeader!=undefined && hideHeader==true ) ? null : headerList));\n\tvar emptyText = this.getInheritedProperty(\"emptyText\");\n\tif(emptyText !=null || emptyText===\"\")\n\t\twidget.emptyText = emptyText;\n\t\t\n\tif(hideHeader != undefined) {\n\t\twidget.hideHeader = hideHeader;\n\t\tif(hideHeader && headerList) {\n\t\t\twidget._headerList = headerList;\n\t\t}\n\t}\t\n\n\tvar multiselect = this.getInheritedProperty(\"multiselect\");\n\tif(multiselect != undefined) {\n\t\twidget.setMultiSelect(multiselect);\n\t}\n\tif(this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\") && this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\")) {\t\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\n\t\tif(width && height)\n\t\t\twidget.setSize(width, height);\t\t\n\t} else {\t\t\t\n\t\t//set the width height here.\n\t\tvar width = this.getWidth();\n\t\tvar height = this.getHeight();\n\t\t\n\t\tif(width && height)\n\t\t\twidget.setSize(width, height);\n\t\t\n\t\t//set the listDiv height\n\t\tif (height && height != Dwt.DEFAULT) {\n\t\t\twidget.setListDivHeight (height) ;\n\t\t}\n\t}\t\t\n\t\n\t// make sure the user defined listener is called \n\t// before our selection listener.\n\tvar selMethod = this.getOnSelectionMethod();\n\tif (selMethod) {\n\t\twidget.addSelectionListener(new AjxListener(this, selMethod));\n\t} else {\n\t\tvar localLs = new AjxListener(this, this._handleSelection);\n\t\twidget.addSelectionListener(localLs);\n\t}\n\t//check if createPopupMenu method is defined\n\tvar createPopupMenumethod = this.cacheInheritedMethod(\"createPopupMenu\",\"$createPopupMenu\",\"parent\");\n\tif(createPopupMenumethod != null) {\n\t\tcreatePopupMenumethod.call(this, widget);\n\t}\n\tvar form=this.getForm();\n\tvar container = (form.parent instanceof DwtControl) ? form.parent : DwtControl.fromElementId(window._dwtShellId);\n\tif(container) {\n\t\tif(this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\") && this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\") && this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\")) {\n\t\t\tcontainer.addControlListener(new AjxListener(this, this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")));\n\t\t}\n\t}\n\n\treturn widget;\n};\n\nDwt_List_XFormItem.prototype.resizeHdlr = \nfunction() {\n\ttry {\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\t\t\n\t\tthis.widget.setSize(width,height);\n\t} catch (ex) {\n\t\talert(ex);\n\t}\n};\n\n\nDwt_List_XFormItem.prototype.getSelection = function () {\n\treturn this.widget.getSelection();\n};\n\nDwt_List_XFormItem.prototype._handleSelection = function (event) {\n\tvar modelItem = this.getModelItem();\n\tvar event = new DwtXModelEvent(this.getInstance(), modelItem, null, null);\n\tmodelItem.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, event);\n};\n\nDwt_List_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n};\n\nDwt_List_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (typeof (newValue) != 'undefined') {\n\t\tthis.setItems(newValue);\n\t}\n};\n\n//the method used to compare the contents of the list array.\n//because object  array  join alwasy return [Object Object]\n//we need to compare the property values\n//we should return once we find the differences\n//Assume that itemArray and existingArr has the same length\nDwt_List_XFormItem.isItemsChanged = function (itemArray, existingArr) {\n    var isChanged = false ;\n    if ((itemArray._version !=null && existingArr._version !=null && (itemArray._version != existingArr._version ))\n\t\t\t|| (itemArray.length != existingArr.length)) {\n        isChanged = true ;\n    } else {\n        var rows = [] ;\n        var existingRows = [] ;\n        for (var i=0; i < itemArray.length; i ++) {\n            if (itemArray[i] instanceof Object)  {\n                for (var p in itemArray[i]) {\n                    rows.push (itemArray[i][p]) ;\n                }\n            } else {\n                rows.push(itemArray[i]) ;\n            }\n\n            if (existingArr[i] instanceof Object)  {\n                for (var p1 in existingArr[i]) {\n                    existingRows.push (existingArr[i][p1]) ;\n                }\n            } else {\n                existingRows.push(existingArr[i]) ;\n            }\n\n            if (rows.join() != existingRows.join()) {\n                isChanged = true;\n                break ;\n            }else{\n                rows = [];\n                existingRows = [] ;\n            }\n        }\n    }\n\n    return isChanged ;\n}\nDwt_List_XFormItem.prototype.setItems = function (itemArray){\n\tvar list = this.widget.getList();\n\tvar existingArr = new Array();\n\tvar tmpArr = new Array();\n\tif (list) {\n\t\texistingArr = list.getArray();\n\t} \n\ttmpArr = new Array();\n\tvar defaultColumnSort = this.getInheritedProperty(\"defaultColumnSortable\") ;\n\tif (itemArray && itemArray.length > 0) {\t\n\t\t//we have to compare the objects, because XForm calls this method every time an item in the list is selected\n\t\tif (this.getForceUpdate() || Dwt_List_XFormItem.isItemsChanged(itemArray, existingArr)) {\n            var preserveSelection = this.getInheritedProperty(\"preserveSelection\");\n\t\t\tvar selection = null;\n\t\t\tif(preserveSelection) {\n\t\t\t\tselection = this.widget.getSelection();\n\t\t\t}\t\t\n\t\t\tvar cnt=itemArray.length;\n\t\t\tfor(var i = 0; i< cnt; i++) {\n\t\t\t\ttmpArr.push(itemArray[i]);\t\t\n\t\t\t}\n\t\t\t//add the default sort column\n\t\t\tthis.widget.set(AjxVector.fromArray(tmpArr), defaultColumnSort);\n\t\t\tif(itemArray._version != undefined && itemArray._version != null)\n\t\t\t\tthis.widget.getList().getArray()._version = itemArray._version;\n\t\t\t\t\n\t\t\tif(preserveSelection && selection) {\n\t\t\t\tthis.widget.setSelectedItems(selection);\n\t\t\t}\n\t\t}\n\t}else{\n\t\t//display the empty list (no result html)\n\t\tthis.widget.set(AjxVector.fromArray([]), defaultColumnSort); \n\t}\n};\n\nDwt_List_XFormItem.prototype.appendItems = function (itemArray){ \n\tthis.widget.addItems(itemArray);\n};\n\n\n/**\n * @class defines XFormItem type _BUTTON_GRID_\n * @constructor\n * \n * @private\n */\nButton_Grid_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BUTTON_GRID_\", \"button_grid\", Button_Grid_XFormItem, WidgetAdaptor_XFormItem)\n\n//\ttype defaults\nButton_Grid_XFormItem.prototype.numCols = 5;\nButton_Grid_XFormItem.prototype.cssClass = \"xform_button_grid_medium\";\nButton_Grid_XFormItem.prototype.forceUpdate = true;\n\n\n//\tmethods\nButton_Grid_XFormItem.prototype.constructWidget = function () {\n\tvar changeHandler = this.getExternalChangeHandler();\n\tvar attributes = {\n\t\tnumCols:this.getNumCols(),\n\t\tchoices:choices.getChoiceObject(),\n\t\tcssClass:this.getCssClass(),\n\t\tonChange:changeHandler,\n\t\taddBracketingCells:(this.getAlign() == _CENTER_)\n\t}\n\tvar multiple = this.getMultiple();\n\tif (multiple !== null) attributes.multiple = multiple;\n\treturn new ButtonGrid(attributes);\n}\n\n\n\n/**\n * @class defines XFormItem type _DWT_CHOOSER_\n * @constructor\n * \n * @private\n */\nDwt_Chooser_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_CHOOSER_\", \"chooser\", Dwt_Chooser_XFormItem, Dwt_Adaptor_XFormItem);\nDwt_Chooser_XFormItem.prototype.widgetClass = DwtChooser;\nDwt_Chooser_XFormItem.prototype.listSize = 100;\n/*\nNOTE: this won't work because attributes.ref is accessed before this\nmethod is called in XFormItemFactory#createItem.\nDwt_Chooser_XFormItem.prototype._setAttributes = function(attributes) {\n\t// allows \"targetRef\" alias for \"ref\" attribute\n\tif (!attributes.ref && attributes.targetRef) {\n\t\tattributes.ref = attributes.targetRef;\n\t}\n\tXFormItem.prototype._setAttributes.call(this, attributes);\n}\n*/\nDwt_Chooser_XFormItem.prototype.getSorted = function() {\n\treturn this.getInheritedProperty(\"sorted\");\n}\nDwt_Chooser_XFormItem.prototype.getListCssClass = function() {\n\treturn this.getInheritedProperty(\"listCssClass\");\n}\n\nDwt_Chooser_XFormItem.prototype.getTargetListCssClass = function() {\n\treturn this.getInheritedProperty(\"targetListCssClass\");\n}\n\nDwt_Chooser_XFormItem.prototype.getSourceInstanceValue = function() {\n\tvar items = this.getModel().getInstanceValue(this.getInstance(), this.getInheritedProperty(\"sourceRef\"));\n\t//items must be either array or vector\n\tif (! items) {\n\t\titems = new AjxVector ();\n\t}else if (typeof items == \"string\") {\n\t\titems = new Array(items);\n\t}\n\treturn items ;\n}\n\nDwt_Chooser_XFormItem.prototype.getTargetInstanceValue = function() {\n\tvar items = this.getInstanceValue();\n\tif (! items) {\n\t\titems = new AjxVector ();\n\t}else if (typeof items == \"string\") {\n\t\titems = new Array(items);\n\t}\n\treturn items ;\n}\n\nDwt_Chooser_XFormItem.prototype._handleStateChange = function(event) {\n\tvar form = this.getForm();\n\tvar id = this.getId();\n\tvar widget = this.getWidget();\n\tvar value = widget.getItems();\n\tthis._skipUpdate = true;\n\tform.itemChanged(id, value);\n\tthis._skipUpdate = false;\n}\n\nDwt_Chooser_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar cssClass = this.getCssClass();\n\tvar sourceListCssClass = this.getListCssClass();\n\tvar targetListCssClass = this.getTargetListCssClass();\n\tvar widgetClass = this.getInheritedProperty(\"widgetClass\");\n\tif (sourceListCssClass && !targetListCssClass) {\n\t\ttargetListCssClass = sourceListCssClass;\n\t}\n\tvar listSize = this.getInheritedProperty(\"listSize\");\n\tvar params = {parent: form, \n\t\t\t\tclassName: cssClass, \n\t\t\t\tslvClassName: sourceListCssClass,\n\t\t\t\ttlvClassName: targetListCssClass, \n\t\t\t\tlayoutStyle: (this.getInheritedProperty(\"layoutStyle\") ? this.getInheritedProperty(\"layoutStyle\") : DwtChooser.HORIZ_STYLE),\n\t\t\t\tlistSize: listSize, \n\t\t\t\tsourceEmptyOk: true, \n\t\t\t\tallButtons: true,\n\t\t\t\tlistWidth: (this.getInheritedProperty(\"listWidth\") ? this.getInheritedProperty(\"listWidth\") : null),\n\t\t\t\tlistHeight: (this.getInheritedProperty(\"listHeight\") ? this.getInheritedProperty(\"listHeight\") : null),\n\t\t\t\ttableWidth: (this.getInheritedProperty(\"tableWidth\") ? this.getInheritedProperty(\"tableWidth\") : null),\n\t\t\t\tlabelWidth: (this.getInheritedProperty(\"labelWidth\") ? this.getInheritedProperty(\"labelWidth\") : null),\n\t\t\t\tsplitButtons:this.getInheritedProperty(\"splitButtons\")\t\n\t\t\t\t};\n\t\n\treturn new widgetClass(params);\n}\n\nDwt_Chooser_XFormItem.prototype.updateWidget = function(newvalue, dedup, compareFunc) {\n\tif (this._skipUpdate) {\n\t\treturn;\n\t}\n\n\tif (this._stateChangeListener) {\n\t\tthis.widget.removeStateChangeListener(this._stateChangeListener);\n\t}\n\telse {\n\t\tthis._stateChangeListener = new AjxListener(this, Dwt_Chooser_XFormItem.prototype._handleStateChange)\n\t}\n\n\tvar origSourceItems = this.getSourceInstanceValue();\n\tvar sourceItems;\n\t\n\tif(origSourceItems instanceof Array) { \n\t\tvar _tmpSrcItems = [];\n\t\tvar cnt = origSourceItems.length;\n\t\tfor(var i=0; i<cnt;i++) {\n\t\t\t_tmpSrcItems.push(origSourceItems[i]);\n\t\t}\n\t\tsourceItems = AjxVector.fromArray(_tmpSrcItems);\n\t} else {\n\t\tsourceItems = origSourceItems.clone();\n\t}\n\t\n\tvar targetItems = this.getTargetInstanceValue();\n\tif(targetItems instanceof Array) targetItems = AjxVector.fromArray(targetItems);\t\n\tif(dedup) {\n\t\tvar cnt = targetItems.size();\n\t\tfor(var i=0; i < cnt; i++) {\n\t\t\tif(compareFunc) {\n\t\t\t \tvar ix=sourceItems.indexOfLike(targetItems.get(i),compareFunc);\n\t\t\t \tif(ix > -1) {\n\t\t\t\t\tsourceItems.removeAt(ix);\n\t\t\t \t}\n\t\t\t} else {\n\t\t\t \tvar ix=sourceItems.indexOf(targetItems.get(i));\n\t\t\t \tif(ix > -1) {\n\t\t\t\t\tsourceItems.removeAt(ix);\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar sorted = this.getSorted();\n\tif (sorted) {\n\t\tsourceItems.sort();\n\t\ttargetItems.sort();\n\t}\n\n\tthis.widget.setItems(sourceItems);\n\tthis.widget.setItems(targetItems, DwtChooserListView.TARGET);\n\n\tthis.widget.addStateChangeListener(this._stateChangeListener);\n}\n\n//\n// XFormItem class: \"alert\"\n//\n\nDwt_Alert_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_ALERT_\", \"alert\", Dwt_Alert_XFormItem, Dwt_Adaptor_XFormItem);\n\nDwt_Alert_XFormItem.prototype.colSpan = \"*\";\nDwt_Alert_XFormItem.prototype.labelLocation = _NONE_;\n\nDwt_Alert_XFormItem.prototype.getStyle = function() {\n\treturn this.getInheritedProperty(\"style\");\n}\nDwt_Alert_XFormItem.prototype.getIconVisible = function() {\n\treturn this.getInheritedProperty(\"iconVisible\");\n}\nDwt_Alert_XFormItem.prototype.getTitle = function() {\n\treturn this.getInheritedProperty(\"title\");\n}\nDwt_Alert_XFormItem.prototype.getContent = function() {\n\treturn this.getInheritedProperty(\"content\");\n}\nDwt_Alert_XFormItem.prototype.getAlertCssClass = function() {\n\treturn this.getInheritedProperty(\"alertCssClass\");\n}\n\nDwt_Alert_XFormItem.prototype.constructWidget = function() {\n\tvar style = this.getStyle();\n\tvar iconVisible = this.getIconVisible();\n\tvar title = this.getTitle();\n\tvar content = this.getContent();\n\tvar alertCssClass = this.getAlertCssClass();\n\t\n\tvar form = this.getForm();\n\tvar alert = new DwtAlert(form, alertCssClass);\n\t\n\talert.setStyle(style);\n\talert.setIconVisible(iconVisible);\n\talert.setTitle(title);\n\talert.setContent(content);\n\t\n\t// bug fix wrong IE box model when conculating the width\n\tif(AjxEnv.isIE){\n\t\ttry{\t\n\t\t\tvar htmlElement = alert.getHtmlElement();\n                \tvar size = Dwt.getSize(htmlElement);\n\t\t\n\t\t\tvar container = this.getContainer();\n\t\t\tvar containerSize =  Dwt.getSize(container);\n\t\t\t\n\t\t\tvar style = DwtCssStyle.getComputedStyleObject(htmlElement);\t\n\t\t        var bl = parseInt(style.borderLeftWidth)     || 1;\n                        var br = parseInt(style.borderRightWidth)    || 1;\n                        var pl = parseInt(style.paddingLeft)         || 5;\n                        var pr = parseInt(style.paddingRight)        || 5;\n                        var ml = parseInt(style.marginLeft)          || 5;\n                        var mr = parseInt(style.marginRight)         || 5;\n                        var extraWidth = bl + br + pl + pr + ml + mr;\n\t\t\t\n\t\t\tif(containerSize.x > extraWidth){\n\t\t\t\tsize.x = containerSize.x - extraWidth;\n\t\t\t\tDwt.setSize(htmlElement, size.x, size.y);\n\t\t\t}\n\t\t}catch(ex){\n\t\t}\n\t}\t\n\treturn alert;\n}\n\nDwt_Alert_XFormItem.prototype.updateWidget = function(newvalue) {\n\t// nothing\n\tvar content = this.getContent();\n\tif(!content && newvalue) {\n\t\tthis.getWidget().setContent(newvalue);\n\t}\n}\n\n//\n// XFormItem class: \"dwt_tab_bar\" (\"tab_bar\")\n//\n\nDwt_TabBar_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TAB_BAR_\", \"tab_bar\", Dwt_TabBar_XFormItem, Dwt_Adaptor_XFormItem);\nDwt_TabBar_XFormItem.prototype.colSpan = \"*\";\nDwt_TabBar_XFormItem.prototype.labelLocation = _NONE_;\nDwt_TabBar_XFormItem.prototype.cssStyle = \"margin-right: 5px\";\n\n// NOTE: Overriding the _TAB_BAR_\n//XFormItemFactory.registerItemType(_TAB_BAR_, \"tab_bar\", Dwt_TabBar_XFormItem);\n\nDwt_TabBar_XFormItem.prototype._value2tabkey;\nDwt_TabBar_XFormItem.prototype._tabkey2value;\n\nDwt_TabBar_XFormItem.prototype._stateChangeListener;\n\nDwt_TabBar_XFormItem.prototype.getChoices = function() {\n\treturn this.getInheritedProperty(\"choices\");\n}\n\nDwt_TabBar_XFormItem.prototype._handleStateChange = function(event) {\n\tvar form = this.getForm();\n\tvar widget = this.getWidget();\n\t\n\tvar tabKey = widget.getCurrentTab();\n\tvar newvalue = this._tabkey2value[tabKey];\n\t\n\tvar id = this.getId();\n\t//release the focus  \n\tform.releaseFocus() ;\n\tform.itemChanged(id, newvalue, event, true);\n}\n\nDwt_TabBar_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar cssClass = this.getCssClass();\n\tvar btnCssClass = this.getInheritedProperty(\"buttonCssClass\");\t\n\t\n\tvar widget = new DwtTabBarFloat(form, cssClass, btnCssClass);\n    this._value2tabkey = {};\n\tthis._tabkey2value = {};\n\t\n\tvar choices = this.getChoices();\n\tif(choices.constructor == XFormChoices) {\n\t\tthis.choices = choices;\n\t\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\t\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\t\n\t\t\n\t\tvar values = this.getNormalizedValues();\n\t\tvar labels = this.getNormalizedLabels();\n\t\tvar cnt = values.length;\n\t\tfor (var i = 0; i < cnt; i++) {\n\t\t\t// NOTE: DwtTabView keeps its own internal keys that are numerical\n\t\t\tthis._value2tabkey[values[i]] = i + 1;\n\t\t\tthis._tabkey2value[i + 1] = values[i];\n\t\t\twidget.addButton(i+1, labels[i]);\n            widget.getButton(i+1).getHtmlElement().style [\"paddingRight\"] = \"2px\" ;\n\t\t}\t\t\t\n\t} else {\n\t\tvar cnt = choices.length;\n\t\tfor (var i = 0; i < cnt; i++) {\n\t\t\tvar choice = choices[i];\n\t\t\t// NOTE: DwtTabView keeps its own internal keys that are numerical\n\t\t\tthis._value2tabkey[choice.value] = i + 1;\n\t\t\tthis._tabkey2value[i + 1] = choice.value;\n\t\t\twidget.addButton(i+1, choice.label);\n            widget.getButton(i+1).getHtmlElement().style [\"paddingRight\"] = \"2px\" ;\n\t\t}\n\t}\n\t\n\treturn widget;\n}\n\nDwt_TabBar_XFormItem.prototype.updateWidget = function(newvalue) {\n\tif (this.widget.isUpdating) {\n\t\tthis.widget.isUpdating = false;\n\t\treturn;\n\t}\n\n\tif (this._stateChangeListener) {\n\t\tthis.widget.removeStateChangeListener(this._stateChangeListener);\n\t}\n\telse {\n\t\tthis._stateChangeListener = new AjxListener(this, Dwt_TabBar_XFormItem.prototype._handleStateChange);\n\t}\n\t\n\tvar tabKey = this._value2tabkey[newvalue];\n\tif (tabKey != this.widget.getCurrentTab()) {\n\t\tthis.widget.openTab(tabKey);\n\t}\n\n\tthis.widget.addStateChangeListener(this._stateChangeListener);\n}\n\nDwt_TabBar_XFormItem.prototype.dirtyDisplay = function() {\n\tthis.$normalizedChoices = null; //nuke these since they are out of date at this point\n\tif(this.choices && this.choices.constructor == XFormChoices) {\n\t\tvar labels = this.getNormalizedLabels();\n\t\tvar values = this.getNormalizedValues();\n\t\tvar cnt = labels.length;\n\t\tfor(var i=0;i<cnt;i++) {\n\t\t\tvar tabKey = this._value2tabkey[values[i]];\n\t\t\tif(tabKey) {\n\t\t\t\tvar btn = this.widget.getButton(tabKey);\n\t\t\t\tif(btn) {\n\t\t\t\t\tbtn.setText(labels[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\t\n}\n\n//\n// XFormItem class: \"alert\"\n//\n\nDwt_ProgressBar_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_PROGRESS_BAR_\", \"dwt_progress_bar\", Dwt_ProgressBar_XFormItem, Dwt_Adaptor_XFormItem);\n\nDwt_ProgressBar_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar widget = new DwtProgressBar(form, null);\n\tvar maxvalue = this.getInheritedProperty(\"maxValue\");\n\tif(!maxvalue) {\n\t\tthis.maxValueRef = this.getInheritedProperty(\"maxValueRef\");\n\t\tmaxvalue = this.getModel().getInstanceValue(this.getInstance(), this.maxValueRef)\n\t}\n\twidget.setMaxValue(maxvalue);\n\t\n\tvar progressCssClass = this.getInheritedProperty(\"progressCssClass\");\n\tif(progressCssClass) {\n\t\twidget.setProgressCssClass(progressCssClass);\n\t}\n\t\n\tvar wholeCssClass = this.getInheritedProperty(\"wholeCssClass\");\n\tif(wholeCssClass) {\n\t\twidget.setWholeCssClass(wholeCssClass);\n\t}\t\n\treturn widget;\n}\n\nDwt_ProgressBar_XFormItem.prototype.updateWidget = function(newvalue) {\n\t// nothing\n\tif(!newvalue)\n\t\tnewvalue=0;\n\tif(this.maxValueRef) {\n\t\tmaxvalue = this.getModel().getInstanceValue(this.getInstance(), this.maxValueRef)\n\t\tthis.getWidget().setMaxValue(maxvalue);\t\n\t}\n\tthis.getWidget().setValue(newvalue);\n}\n"], "fixing_code": ["/*\n * ***** BEGIN LICENSE BLOCK *****\n * Zimbra Collaboration Suite Web Client\n * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Synacor, Inc.\n *\n * The contents of this file are subject to the Common Public Attribution License Version 1.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at: https://www.zimbra.com/license\n * The License is based on the Mozilla Public License Version 1.1 but Sections 14 and 15\n * have been added to cover use of software over a computer network and provide for limited attribution\n * for the Original Developer. In addition, Exhibit A has been modified to be consistent with Exhibit B.\n *\n * Software distributed under the License is distributed on an \"AS IS\" basis,\n * WITHOUT WARRANTY OF ANY KIND, either express or implied.\n * See the License for the specific language governing rights and limitations under the License.\n * The Original Code is Zimbra Open Source Web Client.\n * The Initial Developer of the Original Code is Zimbra, Inc.  All rights to the Original Code were\n * transferred by Zimbra, Inc. to Synacor, Inc. on September 14, 2015.\n *\n * All portions of the code are Copyright (C) 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016 Synacor, Inc. All Rights Reserved.\n * ***** END LICENSE BLOCK *****\n */\n\n\n//\n//\tFactory to create XFormItems from simple attributes (eg: from JS object literals or XML)\n//\n\n/**\n * This object is never instantiated.\n * @class\n * @private \n */\nXFormItemFactory = function() {}\n\n/**\n * Creates a form item.\n *\n * @param attributes\t\tan object whose properties map to component attribute name/value pairs\n * @param parentItem \t\tthe parent item of this item\n * @param {XForm}\txform      the form to which this item is being created\n * \n * @private\n */\nXFormItemFactory.createItem = function (attributes, parentItem, xform) {\n\t// assign a modelItem to the item\n\tvar refPath = this.getRefPath(attributes, parentItem);\n\tvar subRefPath = this.getSubRefPath(attributes, parentItem);\n\n\tvar modelItem, subModelItem;\n\tif (refPath != null) {\n\t\t// assign a modelItem to the item\n\t\tmodelItem = this.getModelItem(xform.xmodel, attributes, refPath);\n\t}\n\t\n\tif (subRefPath != null) {\n\t\t// assign a modelItem to the item\n\t\tsubModelItem = this.getModelItem(xform.xmodel, attributes, subRefPath);\n\t}\n\t// get the class for that type and create one\n\tvar type = this.getItemType(attributes, modelItem);\n\tvar constructor = this.getItemTypeConstructor(type, xform);\n\n\tvar item = new constructor();\n\titem._setAttributes(attributes);\n\n\t// get a unique id for the item\n\tvar idPrefix = (\tattributes.id ? xform.getId() + \"_\" + attributes.id :\n\t\t\t\t\t\t\t  refPath ? xform.getId() + \"_\" + refPath :\n\t\t\t\t\titem.__parentItem ? item.__parentItem.getId() :\n\t\t\t\t\t\t\t\t\t\txform.getId() + \"_\" + item.type\n\t\t\t\t\t);\n\t// assign a unique id to each item\n\t//\t(if the item specifies an id, we use a variant of that, just in case there's more than one)\n\titem.id = xform.getUniqueId(idPrefix);\n\n\titem.refPath = refPath;\n\titem.subRefPath = subRefPath;\n\titem.__modelItem = modelItem;\n\titem.__subModelItem = subModelItem;\n\t\n\titem.__xform = xform;\n\titem.__parentItem = parentItem;\n\t\n\t// assign the item into our form's index so we can be found later\n\txform.indexItem(item, item.id);\n\t\n\n\t// tell the item to initialize any special properties it needs to on construction\n\titem.initFormItem();\n\t\n\t\t\n\treturn item;\n} \n\nXFormItemFactory.getRefPath = function (attributes, parentItem) {\n\tif (attributes.refPath) return attributes.refPath;\n\t\n\tvar ref = attributes.ref;\n\tif (ref == null) return null;\n\t\n\tif (parentItem) {\n\t\tvar parentPath = parentItem.getRefPath();\n\t\tif (parentPath == null) parentPath = \"\";\n\t} else {\n\t\tvar parentPath = \"\";\n\t}\n\t\n\tvar path = ref;\n\tif (ref == \".\") {\n\t\tpath = parentPath;\n\n\t} else if (ref == \"..\") {\n\t\tparentPath = parentPath.split(\"/\");\n\t\tpath = parentPath.slice(0, parentPath.length - 1).join(\"/\");\n\n\t} else if (parentPath == \"\") {\n\t\tpath = ref;\n\n\t} else {\n\t\tpath = parentPath + \"/\" + ref;\n\t}\n\treturn path;\n}\n\nXFormItemFactory.getSubRefPath = function (attributes, parentItem) {\n\tif (attributes.subRefPath) return attributes.subRefPath;\n\t\n\tvar subRref = attributes.subRef;\n\tif (subRref == null) return null;\n\t\n\tif (parentItem) {\n\t\tvar parentPath = parentItem.getSubRefPath();\n\t\tif (parentPath == null) parentPath = \"\";\n\t} else {\n\t\tvar parentPath = \"\";\n\t}\n\t\n\tvar path = subRref;\n\tif (subRref == \".\") {\n\t\tpath = parentPath;\n\n\t} else if (subRref == \"..\") {\n\t\tparentPath = parentPath.split(\"/\");\n\t\tpath = parentPath.slice(0, parentPath.length - 1).join(\"/\");\n\n\t} else if (parentPath == \"\") {\n\t\tpath = subRref;\n\n\t} else {\n\t\tpath = parentPath + \"/\" + subRref;\n\t}\n\treturn path;\n}\n\nXFormItemFactory.getModelItem = function (xmodel, attributes, refPath) {\n\tif (refPath == null || refPath == \"\") return null;\n\treturn xmodel.getItem(refPath, true);\n}\n\nXFormItemFactory.getItemType = function (attributes, modelItem) {\n\tvar type = attributes.type;\n\n\tif (type == null) {\n\t\ttype = attributes.type = _OUTPUT_;\n\t}\n\t\n\tvar modelType = (modelItem && modelItem.type ? modelItem.type : _STRING_);\n\n\tif (type == _INPUT_) {\n\t\tif (attributes.value !== _UNDEFINED_) {\n\t\t\ttype = _CHECKBOX_;\n\t\t} else {\n\t\t\tswitch (modelType) {\n\t\t\t\tcase _STRING_:\n\t\t\t\tcase _NUMBER_:\n\t\t\t\t\ttype = _INPUT_;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase _DATE_:\n\t\t\t\tcase _DATETIME_:\n\t\t\t\tcase _TIME_:\n\t\t\t\t\ttype = modelType;\t\t\t\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\ttype = _INPUT_;\n\t\t\t}\n\t\t}\n\t} else if (type == _SELECT_) {\n\t\tvar appearance = attributes.appearance;\n\t\tif (appearance == _RADIO_) {\n\t\t\ttype = _RADIO_;\n\t\t} else {\n\t\t\ttype = _SELECT_;\n\t\t}\n\t}\n\treturn type;\n}\n\nXFormItemFactory.typeConstructorMap = {};\n\nXFormItemFactory.createItemType = \nfunction (typeConstant, typeName, constructor, superClassConstructor) {\n\tif (constructor == null) constructor = new Function();\n\tif (typeof superClassConstructor == \"string\") superClassConstructor = this.getItemTypeConstructor(superClassConstructor);\n\tif (superClassConstructor == null) superClassConstructor = XFormItem;\n\n\t// initialize the constructor\n\tconstructor.prototype = new superClassConstructor();\t\n\n\tconstructor.prototype.type = typeName;\n\tconstructor.prototype.constructor = constructor;\n\tconstructor.prototype.toString = new Function(\"return '[XFormItem:\" + typeName + \" ' + this.getId() + ']'\");\n\tconstructor.toString = new Function(\"return '[Class XFormItem:\" + typeName + \"]'\");\n\t\n\t// put the item type into the typemap\n\tthis.registerItemType(typeConstant, typeName, constructor);\n\t\n\t// return the prototype\n\treturn constructor;\n}\n\nXFormItemFactory.registerItemType = \nfunction(typeConstant, typeName, constructor) {\n\t// assign the type constant to the window so everyone else can use it\n\twindow[typeConstant] = typeName;\n\tthis.typeConstructorMap[typeName] = constructor;\t\n}\n\nXFormItemFactory.defaultItemType = \"output\";\nXFormItemFactory.getItemTypeConstructor = \nfunction (typeName, form) {\n\tvar typeConstructorMap = (form && form.typeConstructorMap ? form.typeConstructorMap : this.typeConstructorMap);\n\t\n\tvar typeConstructor = typeConstructorMap[typeName];\n\tif (typeConstructor == null) {\n\t\tvar defaultItemType = (form ? form.defaultItemType : this.defaultItemType);\n\t\ttypeConstructorMap[defaultItemType];\n\t}\n\treturn typeConstructor;\n}\n\nXFormItemFactory.quickClone = \nfunction(object) {\n\tthis.cloner.prototype = object;\n\treturn new this.cloner();\n}\nXFormItemFactory.cloner = function(){}\n\nXFormItemFactory.initItemDefaults = function(form, itemDefaults) {\n\t// create a clone of the XFormItemFactory typeConstructorMap for the form\n\tform.typeConstructorMap =  this.quickClone(this.typeConstructorMap);\n\n\tif (itemDefaults == null) itemDefaults = form.itemDefaults;\n\tif (itemDefaults != null) {\n\t\t// for each type in itemDefaults\n\t\tfor (var type in itemDefaults) {\n\t\t\tvar originalConstructor = this.typeConstructorMap[type];\n\t\t\tvar defaults = itemDefaults[type];\n\n\t\t\tif (originalConstructor == null) {\n\t\t\t\ttype = window[type];\n\t\t\t\toriginalConstructor = this.typeConstructorMap[type];\n\t\t\t}\n\t\t\tif (originalConstructor == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar newConstructor = form.typeConstructorMap[type] = new Function();\n\t\t\tnewConstructor.prototype = new originalConstructor();\n\t\t\t// NOTE: reassigning the constructor here is technically correct,\n\t\t\t//\t\tbut will result in (item.constructor == originalClass.constructor) not working...\n\t\t\tnewConstructor.prototype.constructor = newConstructor;\n\t\t\t\n\t\t\tfor (var prop in defaults) {\n\t\t\t\tnewConstructor.prototype[prop] = defaults[prop];\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\n\n//\n//\tAbstract Class XFormItem\n//\n//\tAll other form item classes inherit from this.\n//\n\n\n/**\n * @private\n */\nXFormItem = function() {}\nXFormItem.prototype.constructor = XFormItem;\nXFormItemFactory.registerItemType(\"_FORM_ITEM_\", \"form_item\", XFormItem);\n\nXFormItem.ERROR_STATE_ERROR = 0;\nXFormItem.ERROR_STATE_VALID = 1;\n\n\n//\n// set base class defaults\n// \n\nXFormItem.prototype._isXFormItem = true;\n\n// outputting and inserting\nXFormItem.prototype.writeElementDiv = false;\n\n// appearance\nXFormItem.prototype.labelLocation = _LEFT_;\nXFormItem.prototype.tableCssClass = \"xform_table\";\t\t\t\t// table that encloses one or more cells\nXFormItem.prototype.tableCssStyle = null;\t\t\t\t\t\t// table that encloses one or more cells\nXFormItem.prototype.containerCssClass =  \"xform_container\";\t\t// td that contains the element\nXFormItem.prototype.containerCssStyle =  null;\t\t\t\t\t// td that contains the element\nXFormItem.prototype.cssClass = null;\t\t\t\t\t\t\t// element itself (or element div)\nXFormItem.prototype.labelCssClass =  \"xform_label\";\t\t\t\t// label td\nXFormItem.prototype.errorCssClass =  \"xform_error\";\t\t\t\t// error DIV\nXFormItem.prototype.nowrap = false; \nXFormItem.prototype.labelWrap = false; \nXFormItem.prototype.align = _UNDEFINED_;\t\t\t\t\t\t// _UNDEFINED_ because it's a bit faster to draw\nXFormItem.prototype.valign = _UNDEFINED_;\t\t\t\t\t\t// _UNDEFINED_ because it's a bit faster to draw\nXFormItem.prototype.focusable = false;\nXFormItem.prototype.bmolsnr = false; //Be My Own Listener\n// updating\nXFormItem.prototype.forceUpdate = false;\t\t\t// SET TO true TO FORCE AN ITEM TO UPDATE, EVEN IF VALUE HAS NOT CHANGED\n//XFormItem.prototype.relevant;\n//XFormItem.prototype.relevantIfEmpty = true;\n//XFormItem.prototype.relevantBehavior = _HIDE_;\t\t//\t_HIDE_, _DISABLE_\nXFormItem.prototype.isBlockElement = false;\nXFormItem.prototype.visibilityChecks = []; //array of method references that check whether this element should be visible\nXFormItem.prototype.enableDisableChecks = []; //array of methods that check whether this element should be enabled \nXFormItem.prototype.visibilityChangeEventSources = []; //paths to XModelItems that influence visibility of this XFormItem\nXFormItem.prototype.enableDisableChangeEventSources = []; //paths to XModelItems that influence Enabled/Disabled state of this XFormItem\nXFormItem.prototype.valueChangeEventSources = []; //paths to XModelItems that influence the value this XFormItem\n\n/* array of references to XModel items that may affect the visibility of this item. \n* Whenever any of the XModel items referenced in this array change, they will notify this XForm item\n*/\nXFormItem.prototype.visibilityUpdaters = [];\n\n/* array of references to XModel items that may affect whether this item is enabled. \n* Whenever any of the XModel items referenced in this array change, they will notify this XForm item\n*/\nXFormItem.prototype.enabledDisabledUpdaters = [];\n\n// changing/saving\nXFormItem.prototype.elementChangeHandler = \"onchange\";\n\n                              \n// choices map\nXFormItem.prototype.selection = _CLOSED_;\nXFormItem.prototype.openSelectionLabel = \"\";\n\n// error handling\nXFormItem.prototype.errorLocation = _SELF_;\n\n// show help tooltip icon\nXFormItem.prototype.helpTooltip = false;\n//\n// Methods\n//\n\n\n// set the initializing attributes of this firm\nXFormItem.prototype._setAttributes = function (attributes) {\n\tthis.__attributes = attributes;\n}\n\n// override this to do any item initialization you need to do\n//\tNOTE: this is called AFTER the formItem is initiaized with its modelItem, set in its form, etc\nXFormItem.prototype.initFormItem = function() {\n//\twindow.status = '';\n\tif(this.focusable) {\n\t\tvar currentTabId = XFormItem.getParentTabGroupId(this);\n\t\tif(currentTabId) {\n\t\t\tvar tabGroupItem = this.getForm().getItemById(currentTabId);\n\t\t\ttabGroupItem.tabIdOrder.push(this.getId());\n\t\t}\n\t}\n}\t\n\n// DEFAULT IMPLEMENTATION calls this.getForm().initItemList() on our items array\n//\tSOME CLASSES MAY NOT WANT TO DO THIS (eg: _REPEAT_, which does this dynamically later)\nXFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\tif (items != null) {\n\t\tthis.items = this.getForm().initItemList(items, this);\n\t}\n}\n\nXFormItem.prototype.registerActiveChild = function(item) {\n\tif(!this.activeChildren)\n\t\tthis.activeChildren = {};\n\tthis.activeChildren[item.getId()]=true;\t\n}\n\nXFormItem.prototype.signUpForEvents = function () {\n\tvar modelItem;\n\tmodelItem = this.getModelItem();\n\n\t//register this item's listeners with model items\n\tvar itemsVisibilityChangers = this.getInheritedProperty(\"visibilityChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsVisibilityChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsVisibilityChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsVisibilityChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.updateVisibilityLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar itemsEnableDisableChangers = this.getInheritedProperty(\"enableDisableChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsEnableDisableChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsEnableDisableChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsEnableDisableChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.updateEnabledDisabledLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\t\n\tvar itemsValueChangers = this.getInheritedProperty(\"valueChangeEventSources\");\n\tif(!AjxUtil.isEmpty(itemsValueChangers)) {\n\t\tvar model = this.getModel();\n\t\tvar cnt = itemsValueChangers.length;\n\t\tif(model && cnt>0) {\n\t\t\tfor (var i=0; i < cnt; i++) {\n\t\t\t\tvar modelItm = model.getItem(itemsValueChangers[i], false);\n\t\t\t\tif(modelItm) {\n\t\t\t\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.valueChangeLsnr);\n\t\t\t\t\tmodelItm.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t//listen to changes of my own model item\n\tvar bmolsnr = this.getInheritedProperty(\"bmolsnr\");\n\tif(modelItem && bmolsnr) {\n\t\tvar lsnr = new AjxListener(this, XFormItem.prototype.valueChangeLsnr);\n\t\tmodelItem.addListener(DwtEvent.XFORMS_VALUE_CHANGED, lsnr);\n\t}\n}\n\nXFormItem.prototype.valueChangeLsnr = function (event) {\n\tvar updateMethod = this.getUpdateElementMethod();\n\tif(!updateMethod)\n\t\treturn;\n\t\t\n\tvar value = this.getInstanceValue();\t\n\tvar getDisplayValueMethod = this.getDisplayValueMethod();\n\tif(getDisplayValueMethod)\n\t\tvalue = getDisplayValueMethod.call(this,value);\n\t\n\tupdateMethod.call(this, value);\n}\n\nXFormItem.prototype.updateElement = function() {\n\t//run update methods on all initialized children\n\tif(!this.activeChildren)\n\t\treturn;\n\t\t\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateElementMethod();\n\t\t\t\tvar getDisplayValueMethod = item.getDisplayValueMethod();\n\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tvar xmodel = this.getModel();\n\t\t\t\t\tvar value = item.getRefPath() ? xmodel.getInstanceValue(this.getInstance(), item.getRefPath()) : item.getValue();\n\t\t\t\t\tif (getDisplayValueMethod) {\n\t\t\t\t\t\tvalue =  getDisplayValueMethod.call(item,value);\n\t\t\t\t\t}\n\t\t\t\t\tupdateMethod.call(item,value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nXFormItem.prototype.hasReadPermission = function (refToCheck) {\n\tvar instance = this.getInstance();\n\tif (!instance.getAttrs)\n\t\treturn false;\n\t\n\tvar refPath=null;\n\tif(refToCheck) {\n\t\trefPath=refToCheck;\n\t} else {\n\t\tif(!this.refPath)\n\t\t\treturn true;\n\t\telse\n\t\t\trefPath=this.refPath;\n\t}\n\t\t\n\treturn ((instance.getAttrs.all === true) || (instance.getAttrs[refPath] === true));\n}\n\nXFormItem.prototype.hasWritePermission = function (refToCheck) {\n\tvar instance = this.getInstance();\n\tif (!instance.setAttrs)\n\t\treturn false;\n\t\n\tvar refPath=null;\n\tif(refToCheck) {\n\t\trefPath=refToCheck;\n\t} else {\n\t\tif(!this.refPath)\n\t\t\treturn true;\n\t\telse\n\t\t\trefPath=this.refPath;\n\t}\n\t\t\n\treturn ((instance.setAttrs.all === true) || (instance.setAttrs[refPath] === true));\n}\n\nXFormItem.prototype.hasRight = function (right) {\n\tvar instance = this.getInstance();\n\tif (!instance.rights)\n\t\treturn false;\n\t\n\tif(!right)\n\t\treturn true;\n\t\t\n\treturn (instance.rights[right] === true);\n}\n\nXFormItem.prototype.updateVisibilityLsnr = function (event) {\n\tvar updateMethod = this.getUpdateVisibilityMethod();\n\tupdateMethod.call(this);\n}\n\nXFormItem.prototype.updateVisibility = function () {\n\tvar isVisible = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisVisible=this.getParentItem().getIsVisible();\n\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isVisible) {\n\t\tvar myVisibilityChecks = this.getInheritedProperty(\"visibilityChecks\");\n\t\tif(myVisibilityChecks && myVisibilityChecks instanceof Array) {\n\t\t\tvar cnt = myVisibilityChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myVisibilityChecks[i] != null) {\n\t\t\t\t\tif(typeof(myVisibilityChecks[i])==\"function\") {\n\t\t\t\t\t\tisVisible = myVisibilityChecks[i].call(this);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myVisibilityChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myVisibilityChecks[i].shift();\n\t\t\t\t\t\tisVisible = func.apply(this, myVisibilityChecks[i]);\n\t\t\t\t\t\tmyVisibilityChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (typeof (myVisibilityChecks[i]) == \"string\") {\n                        //for relevant backward compatibility\n                        var instance = this.getInstance();\n                        isVisible = eval(myVisibilityChecks[i]) ;\n                        if(!isVisible)\n\t\t\t\t\t\t\tbreak;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\tvar reRunRefresh = false;\t\n\tif(isVisible) {\n\t\tif(this.deferred)\n\t\t\treRunRefresh=true;\n\t\t\t\n\t\tthis.show();\n\t} else\n\t\tthis.hide();\n\t\n\t//update visibility for active child items\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateVisibilityMethod();\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif(reRunRefresh) {\n\t\tthis.updateEnabledDisabled();\n\t\tthis.updateElement();\n\t}\t\n}\n\nXFormItem.prototype.updateEnabledDisabledLsnr = function (event) {\n\tvar updateMethod = this.getUpdateEnabledDisabledtMethod();\n\tupdateMethod.call(this);\t\n}\n\nXFormItem.prototype.updateEnabledDisabled = function (parentDisabled) {\n\tvar isEnabled = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisEnabled=this.getParentItem().getIsEnabled();\n\t\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isEnabled) {\n\t\tvar myEnabledDisabledChecks = this.getInheritedProperty(\"enableDisableChecks\");\n\t\tif(myEnabledDisabledChecks && myEnabledDisabledChecks instanceof Array) {\n\t\t\tvar cnt = myEnabledDisabledChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myEnabledDisabledChecks[i] != null) {\n\t\t\t\t\tif(typeof(myEnabledDisabledChecks[i])==\"function\") {\n\t\t\t\t\t\tisEnabled = myEnabledDisabledChecks[i].call(this);\n\t\t\t\t\t\tif(!isEnabled)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myEnabledDisabledChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myEnabledDisabledChecks[i].shift();\n\t\t\t\t\t\tif(!func || !func.apply) continue;\n\t\t\t\t\t\tisEnabled = func.apply(this, myEnabledDisabledChecks[i]);\n\t\t\t\t\t\tmyEnabledDisabledChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isEnabled)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}                      \n\t\t\t\t}\n\t\t\t}\n\t\t}else if (myEnabledDisabledChecks == false) {   //always disable this element\n            isEnabled = false ;\n        }\n\t}\t\n\t\n\tif(isEnabled)\n\t\tthis.enableElement();\n\telse\n\t\tthis.disableElement();\n\t\n\t//update enableddisabled for active child items\n\tfor(var itemId in this.activeChildren) {\n\t\tif(this.activeChildren[itemId]===true) {\n\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\tif(item && this.getInstance()) {\n\t\t\t\tvar updateMethod = item.getUpdateEnabledDisabledtMethod();\t\t\t\t\n\t\t\t\tif(updateMethod) {\n\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n// error handling\n\n/**\n * Sets the error message for this form item.\n * This will set the error for this item, or \n * useing the errorLocation, follow the chain up,\n * to set the error on the related item.\n *\n * @param message The message to display. This message should already\n *                be localized.\n */\nXFormItem.prototype.setError = function(message, childError) {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().setError(message, true);\n\t\treturn;\n\t}\n\tthis.getForm().addErrorItem(this);\n\tthis.__errorState = XFormItem.ERROR_STATE_ERROR;\n\tvar container = this.getErrorContainer(true);\n\tif (container) container.innerHTML = AjxStringUtil.htmlEncode(message);\n};\n\n/** \n * Clears the error message for this form item. \n * This will clear the error for this item, or \n * useing the errorLocation, follow the chain up,\n * to clear the error on the related item.\n */\nXFormItem.prototype.clearError = function() {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().clearError();\n\t\treturn;\n\t}\n\n\tthis.getForm().removeErrorItem(this);\n\tthis.__errorState = XFormItem.ERROR_STATE_VALID;\n\tthis.removeErrorContainer();\n};\n\nXFormItem.prototype.hasError = function () {\n\treturn (this.__errorState == XFormItem.ERROR_STATE_ERROR);\n};\n\nXFormItem.prototype.getErrorContainer = function(createIfNecessary) {\n\tvar container = this.getElement(this.getId() + \"___error_container\");\n\tif (container != null) return container;\n\t\n\tif (createIfNecessary == true && this.getContainer()) {\n\t\treturn this.createErrorContainer();\n\t}\n\treturn null;\n}\n\nXFormItem.prototype.createErrorContainer = function () {\n\t// output an error container\n\tvar errorContainer = document.createElement(\"div\");\n\terrorContainer.id = this.getId() + \"___error_container\";\n\terrorContainer.className = this.getErrorCssClass();\n\n\tvar container = this.getContainer();\n\tif (container.hasChildNodes()) {\n\t\tcontainer.insertBefore(errorContainer, container.firstChild);\n\t} else {\n\t\tcontainer.appendChild(errorContainer);\n\t}\t\n\treturn errorContainer;\n}\n\nXFormItem.prototype.removeErrorContainer = function () {\n\tvar errorContainer = this.getErrorContainer();\n\tif (errorContainer != null) {\n\t\terrorContainer.parentNode.removeChild(errorContainer);\n\t}\n}\n\n\n//\n// PROPERTIES OF INDIVIDUAL ITEMS\n//\n\n\nXFormItem.prototype.getType = function () {\n\treturn this.type;\n}\n\n\n//XXX\nXFormItem.prototype.getParentItem = function () {\n\treturn this.__parentItem;\n}\n\nXFormItem.prototype.getForm = function () {\n\treturn this.__xform;\n}\n\nXFormItem.prototype.getGlobalRef = function() {\n\treturn this.getForm().getGlobalRefString() + \".getItemById('\" + this.getId() + \"')\";\n}\n\nXFormItem.prototype.getFormGlobalRef = function() {\n\treturn this.getForm().getGlobalRefString();\n}\n\nXFormItem.prototype.getInstance = function() {\n\treturn this.getForm().instance;\n}\n\nXFormItem.prototype.getModel = function () {\n\treturn this.getForm().getModel();\n}\n\nXFormItem.prototype.getController = function () {\n\treturn this.getForm().getController();\n}\n\nXFormItem.prototype.getFormController = function () {\n\treturn this.getForm().getController();\n}\n\n\nXFormItem.prototype.getModelItem = function() {\n\treturn this.__modelItem;\n}\n\nXFormItem.prototype.getSubModelItem = function() {\n\treturn this.__subModelItem;\n}\n\n//XXX NON-STANDARD\nXFormItem.prototype.getRef = function () {\n\tif (this.ref !== _UNDEFINED_) return this.ref;\n\treturn this.__attributes.ref;\n}\n\nXFormItem.prototype.getRefPath = function () {\n\treturn this.refPath;\n}\n\nXFormItem.prototype.getSubRefPath = function () {\n\treturn this.subRefPath;\n}\n\nXFormItem.prototype.getId = function () {\n\treturn this.id;\n}\n\nXFormItem.prototype.getExternalId = function () {\n\tvar ret = null;\n\tif (this.__attributes.id !== _UNDEFINED_) {\n\t\tret = this.__attributes.id;\n\t} else if ( (ret = this.getRef()) !== _UNDEFINED_) {\n\t\t// nothing\n\t} else {\n\t\tret = null;\n\t}\n\treturn ret;\n};\n\n\n\n//\n//\tGENERIC HTML WRITING ROUTINES\n//\n\n\nXFormItem.prototype.getOnChangeMethod = function() {\n\treturn this.cacheInheritedMethod(\"onChange\",\"$onChange\",\"value,event,form\");\n}\n\nXFormItem.prototype.getOnActivateMethod = function() {\n\treturn this.cacheInheritedMethod(\"onActivate\",\"$onActivate\",\"event\");\n}\n\nXFormItem.prototype.getOnClickMethod = function() {\n\treturn this.cacheInheritedMethod(\"onClick\",\"$onClick\",\"event\");\n}\n\nXFormItem.prototype.getExternalChangeHandler = function() {\n\treturn \"var item = \" + this.getGlobalRef() + \"; var elementChangedMethod = item.getElementChangedMethod(); elementChangedMethod.call(item, value, item.getInstanceValue(), event||window.event);\";\n}\nXFormItem.prototype.getElementValueGetterHTML = function () {\n\treturn \"var value = this.value;\";\n}\n\n/**\n* returns the HTML part of an <input > element that is used to set \"onchange\" \n* (or whatever is defined by elementChangehandler)  property of the element\n**/\nXFormItem.prototype.getChangeHandlerHTML = function() {\n\tvar elementChangeHandler = this.getElementChangeHandler();\n\tif (elementChangeHandler != \"onkeypress\") {\n\t\treturn AjxBuffer.concat(\" \", elementChangeHandler, \"=\\\"\", this.getChangehandlerJSCode() + \"\\\"\",this.getKeyPressHandlerHTML());\n\t} else {\n\t\treturn this.getKeyPressHandlerHTML();\n\t}\n}\n\n/**\n* returns JavaScript code that should be executed when an element is changed by a user\n* @author Greg Solovyev\n**/\nXFormItem.prototype.getChangehandlerJSCode = function () {\n\treturn AjxBuffer.concat(this.getElementValueGetterHTML(),this.getExternalChangeHandler());\n}\n\nXFormItem.prototype.getFocusHandlerHTML = function () {\n\tvar formId = this.getFormGlobalRef(),\n\t\titemId = this.getId()\n\t;\n\t\n\tvar inputHelp =  this.getInheritedProperty(\"inputHelp\");\n\tvar clearInputHelpScript = \"\";\n\tif (inputHelp != null) {\n\t\tclearInputHelpScript = \"if (this.value == '\" + inputHelp + \"') this.value=''; \";\n\t\tDBG.println(\"ClearnInputHelpScript = \" + clearInputHelpScript);\n\t}\n\t\n\tvar onFocusAction = null;\n\tif (this.getInheritedProperty(\"onFocus\") != null) {\n\t\tonFocusAction = AjxBuffer.concat(\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"'); \" ,\t\n\t\t\t\t clearInputHelpScript ,\t\t\t \t\n\t\t\t\t this.getInheritedProperty(\"onFocus\") , \".call(\" ,   this.getGlobalRef(), \", event )\\\"\");\n\t}else{\n\t\tonFocusAction = AjxBuffer.concat(\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"');\",\n\t\t\t\t\t\t\t\t\t\tclearInputHelpScript, \"\\\"\" );\n\t}\n\treturn AjxBuffer.concat(\n\t\t//\" onfocus=\\\"\", formId, \".onFocus('\", itemId, \"')\\\"\",\n\t\t//HC: unflexible hacking way to support the License Portal text field onFocus event\n\t\tonFocusAction ,\t\t\n\t\t\" onblur=\\\"\", formId, \".onBlur('\", itemId, \"')\\\"\"\n\t);\n}\n\n\nXFormItem.prototype.getOnActivateHandlerHTML = function() {\n\tvar method = this.getOnActivateMethod();\n\tif (method == null) return \"\";\n\t\n\treturn AjxBuffer.concat(\n\t\t\t\" \", this.getElementChangeHandler(), \"=\\\"\", \n\t\t\tthis.getGlobalRef(),\".$onActivate(event||window.event)\\\"\"\n\t\t);\n}\n\nXFormItem.prototype.getClickHandlerHTML =\nfunction () {\n\tvar onClickFunc = this.getOnClickMethod();\n\tif (onClickFunc == null) return \"\" ;\n\t\n\treturn AjxBuffer.concat(\" onclick=\\\"\", \n\t\t\t\tthis.getGlobalRef(),\".$onClick(event||window.event)\\\"\"\n\t\t\t);\n\t\t\t\n\treturn AjxBuffer.concat( onClickAction );\t\n}\n\n/**\n* Schedules {@link #handleKeyPressDelay} to fire later when the user finishes typing\n* @param ev - \"onkeypress\" event \n* @param domItem - HTML form element\n* @author Greg Solovyev\n**/\nXFormItem.prototype.handleKeyUp = function (ev, domItem) {\n\tvar key = DwtKeyEvent.getCharCode(ev);\n\t// don't fire off another if we've already set one up unless this is an ENTER key\n\tif (!AjxUtil.isEmpty(this.keyPressDelayHdlr) && key != DwtKeyEvent.KEY_ENTER) {\n\t\tAjxTimedAction.cancelAction(this.keyPressDelayHdlr);\n\t\tthis.keyPressDelayHdlr = null;\n\t}\n\tvar form = this.getForm();\n\tvar evt = new DwtKeyEvent();\n\tevt.setFromDhtmlEvent(ev);\n\n\tif (key == DwtKeyEvent.KEY_TAB) {\n\t\tDwtUiEvent.setBehaviour(ev, true, false);\n\t\treturn false;\n\t} else {\n\t\tvar action = new AjxTimedAction(this, this.handleKeyPressDelay, [evt, domItem]);\n\t\t//XForm.keyPressDelayHdlr = setTimeout(XForm.handleKeyPressDelay, 250, item, ev, formItem);\n\t\tthis.keyPressDelayHdlr = AjxTimedAction.scheduleAction(action, 250);\n\t}\n};\n\nXFormItem.prototype.handleKeyDown = function (ev, domItem) {\n\tev = (ev != null)? ev: window.event;\n\tvar key = DwtKeyEvent.getCharCode(ev);\n\tif (key == DwtKeyEvent.KEY_ENTER) {\n\t\t// By telling the browser just to let this do the default, and \n\t\t// not let the event bubble, our keyup handler\n\t\t// wil see the enter key.\n\t\tDwtUiEvent.setBehaviour(ev, true, true);\n\t\treturn false;\n\t} else if (key == DwtKeyEvent.KEY_TAB) {\n\t\tDwtUiEvent.setBehaviour(ev, true, false);\n\t\tvar currentTabId = XFormItem.getParentTabGroupId(this) ;\n\t\t//DBG.println(AjxDebug.DBG1, \"Current Tab ID = \" + currentTabId);\n\t\tif(ev.shiftKey)\n\t\t\tthis.getForm().focusPrevious(this.getId(), currentTabId);\t\n\t\telse\n\t\t\tthis.getForm().focusNext(this.getId(), currentTabId);\t\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n/**\n* Implements delayed handling of \"keypress\" event. \n* Calls change handler script on the item.\n* See {@link XFormItem.#getChangehandlerJSCode} for change handler script.\n\n**/\nXFormItem.prototype.handleKeyPressDelay = function(ev, domItem) {\t\n\tthis.keyPressDelayHdlr = null;\n\tif (this.$changeHandlerFunc == null) {\n\t\tvar JSCode = this.getChangehandlerJSCode();\n\t\tthis.$changeHandlerFunc = new Function(\"event\", JSCode);\n\t}\n\tif (this.$changeHandlerFunc) {\n\t\tthis.$changeHandlerFunc.call(domItem, ev);\n\t}\n};\n\nXFormItem.prototype.getKeyPressHandlerHTML = function () {\n\n\tvar keydownEv = \"onkeydown\";\n\tif (AjxEnv.isNav) {\n\t\tkeydownEv = \"onkeypress\";\n\t}\n\treturn AjxBuffer.concat(\" \", keydownEv,\"=\\\"\",this.getGlobalRef(), \".handleKeyDown(event, this)\\\"\",\n\t\t\t\t\t\t   \" onkeyup=\\\"\", this.getGlobalRef(), \".handleKeyUp(event, this)\\\"\");\n};\n\n\n//\n//\tcontainer\n//\n\n\nXFormItem.prototype.outputContainerTDStartHTML = function (html,  colSpan, rowSpan) {\n\tvar _align = this.getAlign();\n\thtml.append( \"<td id=\\\"\",  this.getId(), \"___container\\\"\",\n\t\t\t\t\t(colSpan > 1 ? \" colspan=\" + colSpan : \"\"),\n\t\t\t\t\t(rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"),\n\t\t\t\t\tthis.getContainerCssString(), \n\t\t\t\t\t(_align != _UNDEFINED_ ? \" align='\" + _align + \"'\" : \"\"),\n\t\t\t\t\t\">\"\n\t);\n} \n\nXFormItem.prototype.outputContainerTDEndHTML = function (html) {\n\thtml.append(\"</td id=\\\"\",  this.getId(), \"___container\\\">\");\n} \n\n\n//\n//\telement div\n//\n// for items that are effectively elements (or are drawn by something other than this form)\n// NOTE: you can pass in any random CSS properties you want in cssStyle\nXFormItem.prototype.outputElementDivStart = function (html) {\n\thtml.append( \"<div id=\", this.getId(), this.getCssString(), \" xform_type='elementDiv'>\");\n}\n\nXFormItem.prototype.outputElementDivEnd = function (html) {\n\thtml.append(\"</div id=\\\"\", this.getId(), \"\\\">\");\n}\n\n//\n//\tlabel td\n//\nXFormItem.prototype.outputLabelCellHTML = function (html,  rowSpan, labelLocation) {\n\tvar label = this.getLabel();\n\tif (label == null) return;\n\t\n\tif (label == \"\") label = \"&nbsp;\";\n\t\n\tif (labelLocation == _INLINE_) {\n\t\tvar style = this.getLabelCssStyle();\n\t\tif (style == null) style = \"\";\n\t\tstyle = \"position:relative;left:10px;top:5px;text-align:left;background-color:#eeeeee;margin-left:5px;margin-right:5px;\" + style;\n\t\thtml.append( \"<div id=\\\"\", this.getId(),\"___label\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(null, style), \">\",\n\t\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t\t\"</div>\"\n\t\t\t\t\t);\n\t} else {\n\t\t//lable for is allowd the label to associate with an input item\n\t\tvar enableLabelFor = this.getInheritedProperty(\"enableLabelFor\");\n\t\tif (enableLabelFor) {\n\t\t\thtml.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(), \n\t\t\t\t\t\t\t\t(rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\", \n\t\t\t\t\t\t\t\t\"<label for='\", this.getId(), \"'>\", label, \"</label>\"\n\t\t\t\t);\n\t\t}else{\n            if(!this.getInheritedProperty(\"helpTooltip\") ||\n               !this.getInheritedProperty(\"showHelpTooltip\") ||\n               !this.getInheritedProperty(\"hideHelpTooltip\") ){\n                html.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\",\n                    this.getLabelCssString(),\n                    (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\n                    label\n                );\n            }else{\n                html.append( \"<td id=\\\"\", this.getId(),\"___label\\\"\",\n                    this.getLabelCssString(),\n                    \" onclick=\\\"\", \"XFormItem.prototype.showHelpTooltip\" ,\n\t\t\t        \".call(\" ,   this.getGlobalRef(), \", event );\\\" \",\n                    \" onmouseout=\\\"\", \"XFormItem.prototype.hideHelpTooltip\" ,\n\t\t\t        \".call(\" ,   this.getGlobalRef(), \", event );\\\" \",\n                    (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\n                    label\n                );\n            }\n\t\t}\n\t\tif (this.getRequired()) {\n\t\t\thtml.append(\"<span class='redAsteric'>*</span>\");\n\t\t}\n\t\thtml.append(\"</td>\");\n\t}\n\n\n}\n\nXFormItem.getParentTabGroupId =\nfunction (item){\n\t//DBG.println(AjxDebug.DBG1, \"Enter the getParentTabGroupId() ...\");\n\t\n\twhile (item != null) {\n\t\tvar p = item.getParentItem();\n\t\tif (p == null || (! p instanceof XFormItem)){\n\t\t\treturn null ; //no parent item or p is not an XFormItem\n\t\t}else if (p instanceof Group_XFormItem && p.getInheritedProperty(\"isTabGroup\") == true) {\t\n\t\t\treturn p.getId ();\n\t\t}\n\t\t//DBG.println(AjxDebug.DBG1, \"Continue the getParentTabGroupId() ...\");\n\t\titem = p ;\n\t}\n}\n\n\n//\n//\tchange handling\n//\n\nXFormItem.prototype.elementChanged = function(elementValue, instanceValue, event) {\n\tthis.getForm().itemChanged(this.getId(), elementValue, event);\n}\n\n//\n//\tget and set instance values!\n//\n\n\nXFormItem.prototype.getInstanceValue = function (path) {\n\tif (path == null) path = this.getRefPath();\n\tif (path == null) return null;\n\treturn this.getModel().getInstanceValue(this.getInstance(), path);\n}\n\n//NOTE: model.getInstance() gets count of PARENT\nXFormItem.prototype.getInstanceCount = function () {\n\tif (this.getRefPath() == null) return 0;\n\treturn this.getModel().getInstanceCount(this.getInstance(), this.getRefPath());\n}\n\nXFormItem.prototype.setInstanceValue = function (value, path) {\n\tif (path == null) path = this.getRefPath();\n\tif (path == null) return null;\n\treturn this.getModel().setInstanceValue(this.getInstance(), path, value);\n}\nXFormItem.prototype.set = XFormItem.prototype.setInstancevalue;\n\nXFormItem.getValueFromHTMLSelect = function (element) {\n\tvar values = [];\n\tfor (var i = 0; i < element.options.length; i++) {\n\t\tif (element.options[i].selected) {\n\t\t\tvalues[values.length] = element.options[i].value;\t\n\t\t}\n\t}\n\treturn values.join(\",\");\n}\n\nXFormItem.prototype.getValueFromHTMLSelect = function(element) {\n\tif (element == null) element = this.getElement();\n\treturn XFormItem.getValueFromHTMLSelect(element);\n}\n\nXFormItem.updateValueInHTMLSelect1 = function (newValue, element, selectionIsOpen) {\n\tif (element == null) return null;\n\tif (selectionIsOpen == null) selectionIsOpen = false;\n\t\n\tvar options = element.options;\n\tfor (i = 0; i < options.length; i++) {\n\t\tvar choice = options[i];\n\t\tif (choice.value == newValue) {\n\t\t\telement.selectedIndex = i;\n\t\t\treturn element.value;\n\t\t}\n\t}\n\t// default to the first element if nothing was selected (?)\n\tif (options.length > 0) {\n\t\telement.selectedIndex = 0;\n\t\treturn options[0].value;\n\t}\n\treturn null;\n}\nXFormItem.prototype.updateValueInHTMLSelect1 = function (newValue, element, selectionIsOpen) {\n\tif (element == null) element = this.getElement();\n\tif (selectionIsOpen == null) selectionIsOpen = this.getSelectionIsOpen();\n\treturn XFormItem.updateValueInHTMLSelect1(newValue, element, selectionIsOpen);\n}\n\n\nXFormItem.updateValueInHTMLSelect = function (newValue, element, selectionIsOpen) {\n\tif (element == null) return null;\n\tif (newValue == null) newValue = \"\";\n\tif (selectionIsOpen == null) selectionIsOpen = false;\n\t\n\t// assumes newValue is a comma-delimited string or an array\n\tif (typeof newValue == \"string\") newValue = newValue.split(\",\");\n\t// hack up newValue to make searching for a particular option newValue easier\n\tvar uniqueStartStr = \"{|[\", \n\t\tuniqueEndStr = \"]|}\"\n\t;\n\tnewValue = uniqueStartStr + newValue.join(uniqueEndStr + uniqueStartStr) + uniqueEndStr;\n\t\n\tvar options = element.options;\n\tvar anySelected = false;\n\tfor (var i = 0; i < options.length; i++) {\n\t\tvar isPresent = (newValue.indexOf(uniqueStartStr + options[i].value + uniqueEndStr) > -1);\n\t\toptions[i].selected = isPresent;\n\t\tanySelected = anySelected || isPresent;\t\t\n\t}\n\t\n\tif (!anySelected && !selectionIsOpen) {\n\t\t// select the first value???\n\t\toptions[0].selected = true;\n\t}\n}\n\nXFormItem.prototype.updateValueInHTMLSelect = function (newValue, element, selectionIsOpen) {\n\tif (newValue == null) newValue = \"\";\n\tif (element == null) element = this.getElement();\n\tif (selectionIsOpen == null) selectionIsOpen = this.getSelectionIsOpen();\n\treturn XFormItem.updateValueInHTMLSelect(newValue, element, selectionIsOpen);\n}\n\nXFormItem.prototype.getChoicesHTML = function() {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return \"\";\t//throw an error?\n\tvar html = new AjxBuffer();\n\t\n\n\tthis.outputChoicesHTMLStart(html);\n\tvar values = choices.values;\n\tvar labels = choices.labels;\n    var visible = choices.visible ;\n\n    var choiceCssClass = this.getChoiceCssClass();\n\tfor (var i = 0; i < values.length; i++) {\n        if (visible && (visible[i] == false)) {\n            //don't display this choice\n        }else {       //by default, the choice should be visible\n            html.append(\"\", this.getChoiceHTML(i, values[i], labels[i], choiceCssClass, \"\"));\n        }\n    }\n\tthis.outputChoicesHTMLEnd(html);\n\treturn html.toString();\n}\n\nXFormItem.prototype.outputChoicesHTMLStart = function(html) {\n\treturn;\n}\nXFormItem.prototype.outputChoicesHTMLEnd = function(html) {\n\treturn;\n}\n\nXFormItem.prototype.getChoiceCssClass = function() {\n\treturn \"\";\n}\n\nXFormItem.prototype.getChoiceHTML = function (itemNum, value, label, cssClass) {\n\treturn AjxBuffer.concat(\"<option value=\\\"\", value, \"\\\">\", label,\"</option>\");\n}\n\nXFormItem.prototype.updateChoicesHTML = function () {\n\tthis.cleanChoiceDisplay();\n\n\t// NOTE: setting the innerHTML of the options doesn't work\n\t//\tfor now, just set the outer HTML of the entire widget\n\t// TODO: do this by frobbing the options manually for speed and so things don't flash\n\tvar html = new AjxBuffer();\n\tthis.outputHTML(html, new AjxBuffer());\n\tif (this.getContainer())  this.getContainer().innerHTML = html.toString();\n\treturn;       \n}\n\n\nXFormItem.prototype.getInheritedProperty = function(prop) {\n\t// first look in the instance attributes\n\tif (this.__attributes[prop] !== _UNDEFINED_) return this.__attributes[prop];\n\n\t// look up the inheritance chain for this type\n\tif (this[prop] !== _UNDEFINED_) return this[prop];\n\n\t// if not found there, look in the xmodel\n\tvar modelItem = this.__modelItem;\n\tif (modelItem && modelItem[prop] !== _UNDEFINED_) return modelItem[prop];\n\n\treturn null;\n}\n\n// NOTE: cacheProp MUST be different than prop!\nXFormItem.prototype.cacheInheritedProperty = function (prop, cacheProp) {\n\tif (this[cacheProp] !== _UNDEFINED_) return this[cacheProp];\n\treturn (this[cacheProp] = this.getInheritedProperty(prop));\n}\n\nXFormItem.prototype.cacheInheritedMethod = function (methodName, cacheProp, arguments) {\n\tif (this[cacheProp] !== _UNDEFINED_) return this[cacheProp];\n\tvar func = this.getInheritedProperty(methodName);\n\tif (func != null) func = this.convertToFunction(func, arguments);\n\tthis[cacheProp] = func;\n\treturn func;\n}\n\n\n\n\n//\n//\tproperties of the element after its' been drawn\n//\n\n\nXFormItem.prototype.getElement = XForm.prototype.getElement;\nXFormItem.prototype.showElement = function (id) {\n\tXForm.prototype.showElement.call(this, id);\n}\n\nXFormItem.prototype.getIsVisible = function () {\n\treturn this.__isVisible;\n}\n\nXFormItem.prototype.getIsEnabled = function () {\n\treturn this.__isEnabled;\n}\n \nXFormItem.prototype.hideElement = function (id,isBlock) {\n\tXForm.prototype.hideElement.call(this,id,isBlock);\n}\n\nXFormItem.prototype.createElement = XForm.prototype.createElement;\n\nXFormItem.estimateMyWidth = function (label,withIcon,extraMargin, minimum) {\n\tvar width = (String(label).length/2)*XForm.FONT_WIDTH1 + (String(label).length/2)*XForm.FONT_WIDTH2 + 14;\n\tif(withIcon)\n\t\twidth = width + 24;\n\t\n\tif(extraMargin>0)\n\t\twidth = width + extraMargin;\n\t\n\twidth = (width >= minimum) ? width : minimum;\n\treturn [width,\"px\"].join(\"\");\n}\n\nXFormItem.prototype.getWidget = function() {\n\treturn this.widget;\n}\n\nXFormItem.prototype.setWidget = function(widget) {\n\tthis.widget = widget;\n}\n\n\nXFormItem.prototype.getContainer = function() {\n\treturn this.getElement(this.getId() + \"___container\");\n}\nXFormItem.prototype.getLabelContainer = function() {\n\treturn this.getElement(this.getId() + \"___label\");\n}\nXFormItem.prototype.show = function() {\n\tif(this.deferred) {\n\t\tthis._outputHTML();\n\t}\t\n\tvar container = this.getLabelContainer();\n\tif (container) this.showElement(container);\n\tcontainer = this.getContainer();\n\tif (container != null) {\n\t\tthis.showElement(container);\n\t} \n\tthis.__isVisible = true;\n}\n\nXFormItem.prototype.hide = function(isBlock) {\n\tisBlock = this.getInheritedProperty(\"isBlockElement\") || isBlock;\n\tvar container = this.getLabelContainer()\n\tif (container) this.hideElement(container,isBlock);\n\tcontainer = this.getContainer();\n\tif (container != null) {\n\t\tthis.hideElement(container,isBlock);\n\t} else {\n\t\tvar items = this.getItems();\n\t\tif (items != null) {\n\t\t\tfor (var i = 0; i < items.length; i++) {\n\t\t\t\titems[i].hide(isBlock);\n\t\t\t}\n\t\t}\n\t}\n\tthis.__isVisible = false;\n}\n\nXFormItem.prototype.focus = function () {\n\tthis.getForm().focusElement(this.getId());\n};\n\n\n//\n//\tSIMPLE ATTRIBUTE ACCESSORS\n//\n//\tNOTE: this is effectively the public API for the properties you can define\n//\t\t\tfor a FormItem\n//\n\nXFormItem.prototype.getRequired = function() {\n\treturn this.getInheritedProperty(\"required\");\n}\n\nXFormItem.prototype.getValue = function() {\n\treturn this.getInheritedProperty(\"value\");\n}\n\n// SPECIAL CASE:  don't take ITEMS from the model...\n//XXX NON-STANDARD\nXFormItem.prototype.getItems = function () {\n\tif (this.items) return this.items;\n\treturn this.__attributes.items;\n}\n\nXFormItem.prototype.getChoices = function () {\n\treturn this.getInheritedProperty(\"choices\");\n}\n\n// normalized choices look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\nXFormItem.prototype.getNormalizedChoices = function () {\n\tif (this.$normalizedChoices) return this.$normalizedChoices;\n\n\tvar choices = this.getChoices();\n\tif (choices == null) return null;\n    if (typeof choices == \"function\") choices = choices.call(this) ;\n    \n    var normalizedChoices;\n\tif (typeof choices.getChoices == \"function\") {\n\t\tnormalizedChoices = choices.getChoices();\n\t} else if (AjxUtil.isArray(choices)) {\n\t\t// it's either an array of objects or an array of strings\n\t\tif (typeof choices[0] == \"object\") {\n\t\t\t// list of objects\n\t\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.OBJECT_LIST);\n\t\t} else {\n\t\t\t// list of simple values\n\t\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.SIMPLE_LIST);\n\t\t}\n\t} else {\n\t\t// assume it's a hash\n\t\tnormalizedChoices = XFormChoices.normalizeChoices(choices, XFormChoices.HASH);\n\t}\n\tthis.$normalizedChoices = normalizedChoices;\n\treturn this.$normalizedChoices;\n}\n\n\nXFormItem.prototype.getNormalizedValues = function () {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices) return choices.values;\n\treturn null;\n}\n\n\nXFormItem.prototype.getNormalizedLabels = function () {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices) return choices.labels;\n\treturn null;\n}\n\t\n\t\n\t\n//\n//\tappearance methods\n//\n\nXFormItem.prototype.getAppearance = function () {\n\treturn this.getInheritedProperty(\"appearance\");\n}\nXFormItem.prototype.getCssClass = function () {\n\treturn this.getInheritedProperty(\"cssClass\");\n}\n\nXFormItem.prototype.getCssStyle = function () {\n\treturn this.getInheritedProperty(\"cssStyle\");\n}\n\nXFormItem.prototype.getLabel = function (value) {\n\treturn this.getInheritedProperty(\"label\");\n}\n\nXFormItem.prototype.getErrorCssClass = function () {\n\treturn this.getInheritedProperty(\"errorCssClass\");\n}\nXFormItem.prototype.getLabelCssClass = function (className) {\n\tif (className != null) return className;\n\treturn this.getInheritedProperty(\"labelCssClass\");\n}\n\nXFormItem.prototype.getLabelCssStyle = function (style) {\n\tif (style != null) return style;\n\treturn this.getInheritedProperty(\"labelCssStyle\");\n}\n\nXFormItem.prototype.getLabelWrap = function () {\n\treturn this.getInheritedProperty(\"labelWrap\");\n}\n\nXFormItem.prototype.getLabelLocation = function () {\n\treturn this.getInheritedProperty(\"labelLocation\");\n}\n\nXFormItem.prototype.getContainerCssClass = function () {\n\treturn this.getInheritedProperty(\"containerCssClass\");\n}\n\nXFormItem.prototype.getContainerCssStyle = function () {\n\treturn this.getInheritedProperty(\"containerCssStyle\");\n}\n\nXFormItem.prototype.getTableCssClass = function () {\n\treturn this.getInheritedProperty(\"tableCssClass\");\n}\nXFormItem.prototype.getTableCssStyle = function () {\n\treturn this.getInheritedProperty(\"tableCssStyle\");\n}\n\nXFormItem.prototype.getNowrap = function () {\n\treturn this.getInheritedProperty(\"nowrap\");\n}\n\nXFormItem.prototype.getWidth = function () {\n\treturn this.cacheInheritedProperty(\"width\",\"_width\");\n}\n\nXFormItem.prototype.getHeight = function () {\n\treturn this.getInheritedProperty(\"height\");\n}\n\nXFormItem.prototype.getOverflow = function () {\n\treturn this.getInheritedProperty(\"overflow\");\n}\n\nXFormItem.prototype.getNumCols = function () {\n\treturn this.getInheritedProperty(\"numCols\");\n}\n\nXFormItem.prototype.getAlign = function () {\n\treturn this.getInheritedProperty(\"align\");\n}\n\n\nXFormItem.prototype.getValign = function() {\n\treturn this.getInheritedProperty(\"valign\");\n}\n\nXFormItem.prototype.getName = function () {\n\treturn this.getInheritedProperty(\"name\");\n}\n\n// NEW TABLE LAYOUT STUFF\nXFormItem.prototype.useParentTable = true;\nXFormItem.prototype.getUseParentTable = function () {\n\treturn this.getInheritedProperty(\"useParentTable\");\n}\nXFormItem.prototype.colSizes = _UNDEFINED_;\nXFormItem.prototype.getColSizes = function () {\n\treturn this.getInheritedProperty(\"colSizes\");\n}\nXFormItem.prototype.colSpan = 1;\nXFormItem.prototype.getColSpan = function () {\n\treturn this.getInheritedProperty(\"colSpan\");\n}\nXFormItem.prototype.rowSpan = 1;\nXFormItem.prototype.getRowSpan = function () {\n\treturn this.getInheritedProperty(\"rowSpan\");\n}\n\n// END NEW TABLE LAYOUT STUFF\n\n// error handling\nXFormItem.prototype.getErrorLocation = function () {\n\treturn this.getInheritedProperty(\"errorLocation\");\n};\n\n//\n//\tconvenience methods to figure out drawing types for you\n//\n\n// return the \"label\" in the choices array for this item\n//\t(allows us to do lookup of displayed values easily)\nXFormItem.prototype.getChoiceLabel = function (value) {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return value;\n\tif (value == null) value = \"\" ; //make it an empty string, so empty value label can be returned\n    \n    // choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\tvar values = choices.values;\n\tfor (var i = 0; i < values.length; i++) {\n\t\tif (values[i] == value) {\n\t\t\treturn choices.labels[i];\n\t\t}\n\t}\n\t// if we didn't find it, simply return the original value\n\treturn value;\n}\n\n// return the \"label\" in the choices array for this item\n//\t(allows us to do lookup of displayed values easily)\n// If no matching choice is found, the label is returned. \nXFormItem.prototype.getChoiceValue = function (label) {\n\tfunction labelComparator (a, b) {\n\t\t\treturn String(a).toLowerCase() < String(b).toLowerCase() ? -1 : (String(a).toLowerCase() > String(b).toLowerCase() ? 1 : 0);\n\t };\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return label;\n\t\n\t// choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\t// bug 6738: sort will change the mapping between value and label.\n\t/*\n\tvar labels = choices.labels;\n\tvar vec = AjxVector.fromArray(labels);\n\tvec.sort(labelComparator);\n\tvar ix = vec.binarySearch(label,labelComparator); */\n\tvar labels = choices.labels;\n\tvar ix = -1;\n\tfor (var i=0; i < labels.length ; i++ ){\n\t\tif (labelComparator (label, labels[i]) == 0) {\n\t\t\tix = i ;\n\t\t\tbreak;\n\t\t}\t\t\n\t}\n\t\n\tif(ix>=0) \n\t\treturn choices.values[ix];\n\telse \t\t\n\t\t//return choices.values[0];// If no matching choice is found, the label is returned, instead of the first value\n\t\treturn label;\n}\n\n// return the number of the choice for a particular value\n//\treturns -1 if not found\nXFormItem.prototype.getChoiceNum = function (value) {\n\tvar choices = this.getNormalizedChoices();\n\tif (choices == null) return -1;\n\t\n\t// choices will look like:  {values:[v1, v2, v3...], labels:[l1, l2, l3...]}\n\tvar values = choices.values;\n\tfor (var i = 0; i < values.length; i++) {\n\t\tif (values[i] == value) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1\n}\n\nXFormItem.prototype.getCssString = function () {\n\tvar css = (this.getCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\n\tvar style = (this.getCssStyle() || '');\n\n\tvar width = this.getWidth();\n\tif (width != null && width != \"auto\") {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\n\t\tif (!isNaN(Number(width)))\n\t\t\twidth += 'px';\n\n\t\tstyle += \"width:\" + width;\n\t}\n\n\tvar height = this.getHeight();\n\tif (height != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tif (!isNaN(Number(height)))\n\t\t\theight += 'px';\n\n\t\tstyle += \"height:\" + height;\n\t}\n\n\tvar overflow = this.getOverflow();\n\tif (overflow != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"overflow:\" + overflow;\n\t}\n\t\n\tif (this.getNowrap()) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"white-space:nowrap\";\n\t}\n\n\tvar valign = this.getValign();\n\tif (valign) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\n\t\tstyle += \"vertical-align:\"+valign;\n\t}\n\t\n\tif (style != '') css += \" style=\\\"\" + style + \";\\\"\";\n\treturn css;\n}\n\n\nXFormItem.prototype.getLabelCssString = function (className, style) {\n\tvar css = (this.getLabelCssClass(className) || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\tvar style = (this.getLabelCssStyle(style) || '');\n\tif (this.getLabelWrap() == false) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\n\t\tstyle += \"white-space:nowrap\";\n\t}\n\tif (style != '') css += \" style=\\\"\" + style + \";\\\"\";\n\t\n\treturn css;\n}\n\n\n\n\nXFormItem.prototype.getTableCssString = function () {\n\tvar css = (this.getTableCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\n\tvar style = this.getTableCssStyle();\n\tif (style == null) style = '';\n\t\n\tvar colSizes = this.getColSizes();\n\tif (colSizes != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"table-layout:fixed\";\n\t}\n\n\tvar width = this.getWidth();\n\tif (width != null) \tstyle += \";width:\"+ width;\n\t\n\tvar overflow = this.getOverflow();\n\tif (overflow != null) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\n\t\tstyle += \"overflow:\" + overflow;\n\t}\n\n\treturn css + (style != null ? \" style=\\\"\" + style + \";\\\"\" : \"\");\n}\n\n\nXFormItem.prototype.getContainerCssString = function () {\n\tvar css = (this.getContainerCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\tvar style = this.getContainerCssStyle();\n\tif (style == null) style = '';\n\t\n\tvar align = this.getAlign();\n\tif (align != _LEFT_) {\n\t\tif (align == _CENTER_ || align == _MIDDLE_) {\n\t\t\tif(style.length)\n\t\t\t\tstyle += \";\";\n\t\t\t\t\t\t\n\t\t\tstyle += \"text-align:center\";\n\t\t} else if (align == _RIGHT_) {\n\t\t\tif(style.length)\n\t\t\t\tstyle += \";\";\t\t\t\n\t\t\n\t\t\tstyle += \"text-align:right\";\n\t\t}\n\t}\n\tvar valign = this.getValign();\n\tif (valign == _TOP_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"vertical-align:top\";\n\t} else if (valign == _BOTTOM_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\n\t\t\t\t\t\n\t\tstyle += \"vertical-align:bottom\";\n\t} else if (valign == _CENTER_ || valign == _MIDDLE_) {\n\t\tif(style.length)\n\t\t\tstyle += \";\";\t\t\n\t\t\t\n\t\tstyle += \"vertical-align:middle\";\n\t}\n\n\tif (style != \"\") css += \" style=\\\"\" + style + \";\\\"\";\n\treturn css;\n}\n\n\n\n\n//\n//\thandling changes to items\n//\nXFormItem.prototype.getElementChangeHandler = function () {\n\treturn this.getInheritedProperty(\"elementChangeHandler\");\n}\n\n\n\n\n//\n//\toutputting, inserting and updating items\n//\n\nXFormItem.prototype.getForceUpdate = function() {\n\treturn this.getInheritedProperty(\"forceUpdate\");\n}\n\nXFormItem.prototype.getOutputHTMLMethod = function() {\n\treturn this.convertToFunction(\n\t\t\t\tthis.getInheritedProperty(\"outputHTML\"),\n\t\t\t\t\"html,currentCol\"\n\t\t);\n}\n\nXFormItem.prototype.getElementChangedMethod = function () {\n\treturn this.cacheInheritedMethod(\"elementChanged\",\"$elementChanged\",\"elementValue, instanceValue, event\");\n}\n\nXFormItem.prototype.getUpdateElementMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateElement\",\"$updateElement\",\"newValue\");\n}\n\nXFormItem.prototype.getDisplayValueMethod = function() {\n\treturn this.cacheInheritedMethod(\"getDisplayValue\",\"$getDisplayValue\",\"newValue\");\n}\n\nXFormItem.prototype.getUpdateVisibilityMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateVisibility\",\"$updateVisibility\");\n}\n\nXFormItem.prototype.getUpdateEnabledDisabledtMethod = function() {\n\treturn this.cacheInheritedMethod(\"updateEnabledDisabled\",\"$updateEnabledDisabled\");\n}\n\nXFormItem.prototype.convertToFunction = function (script, arguments) {\n\tif ((script == null) || (typeof(script) == \"function\")) return script;\n\tif (typeof(this[script]) == \"function\") return this[script];\n\t// CLOSURE???\n\treturn new Function(arguments, script);\n}\n\n\n// note that this form item's display needs to be updated\nXFormItem.prototype.dirtyDisplay = function () {\n\tdelete this.$lastDisplayValue;\n}\n\n// override the next method in your subclass to enable/disable element\nXFormItem.prototype.setElementEnabled = function(enable) {}\n\n// convenience methods that call the above routine\nXFormItem.prototype.disableElement = function () {\n\tthis.setElementEnabled(false);\n\tthis.__isEnabled = false;\n}\n\nXFormItem.prototype.enableElement = function () {\n\tthis.setElementEnabled(true);\n\tthis.__isEnabled = true;\n}\n\n// you can use these to \nXFormItem.prototype.setElementDisabledProperty = function (enable) {\n\tthis.getElement().disabled = (enable != true)\n}\n\n\nXFormItem.prototype.setElementEnabledCssClass = function (enable) {\n\tvar el = this.getElement();\n\tif (!el) return;\n\t\n\tif (enable) {\n\t\tel.className = this.getCssClass();\n\t} else {\n\t\tel.className = (this.getCssClass() + \"_disabled\");\n\t}\n}\n\n\n\n//\n//\t_SELECT_ etc type properties\n//\nXFormItem.prototype.getSelection = function () {\n\treturn this.getInheritedProperty(\"selection\");\n}\n\nXFormItem.prototype.getSelectionIsOpen = function () {\n\treturn this.getInheritedProperty(\"selection\");\n}\n\nXFormItem.prototype.getOpenSelectionLabel = function () {\n\treturn this.getInheritedProperty(\"openSelectionLabel\");\n}\n\n\n//\n//\t_REPEAT_ type properties\n//\n\nXFormItem.prototype.getNumberToShow = function () {\n\treturn this.getInheritedProperty(\"number\");\n}\n\nXFormItem.prototype.getShowAddButton = function () {\n\treturn this.getInheritedProperty(\"showAddButton\");\n}\n\nXFormItem.prototype.getShowRemoveButton = function () {\n\treturn this.getInheritedProperty(\"showRemoveButton\");\n}\n\nXFormItem.prototype.getShowMoveUpButton = function () {\n\treturn this.getInheritedProperty(\"showMoveUpButton\");\n}\n\nXFormItem.prototype.getShowMoveDownButton = function () {\n\treturn this.getInheritedProperty(\"showMoveDownButton\");\n}\n\nXFormItem.prototype.getAddButton = function () {\n\treturn this.getInheritedProperty(\"addButton\");\n}\n\nXFormItem.prototype.getRemoveButton = function () {\n\treturn this.getInheritedProperty(\"removeButton\");\n}\n\nXFormItem.prototype.getMoveUpButton = function () {\n\treturn this.getInheritedProperty(\"moveUpButton\");\n}\n\nXFormItem.prototype.getMoveDownButton = function () {\n\treturn this.getInheritedProperty(\"moveDownButton\");\n}\n\nXFormItem.prototype.getAlwaysShowAddButton = function () {\n\treturn this.getInheritedProperty(\"alwaysShowAddButton\");\n}\n\nXFormItem.prototype.getRepeatInstance = function () {\n\treturn this.getInheritedProperty(\"repeatInstance\");\n}\n\n\n\n\n//\n//\t_IMAGE_ type properties\n//\n\nXFormItem.prototype.getSrc = function () {\n\treturn this.getInheritedProperty(\"src\");\n}\n\nXFormItem.prototype.getSrcPath = function () {\n\treturn this.getInheritedProperty(\"srcPath\");\n}\n\n\n\n//\n//\t_ANCHOR_, _URL_, etc\n//\n//\ttype defaults\nXFormItem.prototype.getShowInNewWindow = function () {\n\treturn this.getInheritedProperty(\"showInNewWindow\");\n}\n\n\n\n\n//\n//\tinternal properties for creating various item types\n//\n\n\nXFormItem.prototype.getWriteElementDiv = function () {\n\treturn this.getInheritedProperty(\"writeElementDiv\");\n}\n\nXFormItem.prototype.getMultiple = function () {\n\treturn this.getInheritedProperty(\"multiple\");\n}\n\nXFormItem.prototype.getAlwaysUpdateChoices = function () {\n\treturn this.getInheritedProperty(\"alwaysUpdateChoices\");\n}\n\nXFormItem.prototype.choicesAreDirty = function () {\n\treturn (this._choiceDisplayIsDirty == true || this.getAlwaysUpdateChoices());\n}\n\nXFormItem.prototype.cleanChoiceDisplay = function () {\n\tthis._choiceDisplayIsDirty = false;\n}\n\nXFormItem.prototype.showInputTooltip =\nfunction (event) {\n\tvar dwtEv = new DwtUiEvent(true);\n\tdwtEv.setFromDhtmlEvent(event)\n\tvar shell = DwtShell.getShell(window);\n\tvar tooltip = shell.getToolTip();\n\ttooltip.setContent(this.getInheritedProperty(\"toolTipContent\"));\n\ttooltip.popup(dwtEv.docX, dwtEv.docY);\n}\n\nXFormItem.prototype.hideInputTooltip =\nfunction (event) {\n\tvar shell = DwtShell.getShell(window);\n\tvar tooltip = shell.getToolTip();\n\ttooltip.popdown();\n}\n\n\n\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _OUTPUT_\n * @constructor\n * \n * @private\n */\nOutput_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_OUTPUT_\", \"output\", Output_XFormItem, XFormItem);\n\n\n//\ttype defaults\nOutput_XFormItem.prototype.writeElementDiv = true;\nOutput_XFormItem.prototype.labelWrap = true;\nOutput_XFormItem.prototype.cssClass =  \"xform_output\";\t// element itself (or element div)\nOutput_XFormItem.prototype.containerCssClass =  \"xform_output_container\";\t// element itself (or element div)\n\n//\tmethods\n\nOutput_XFormItem.prototype.outputHTML = function (html) {\n\t// by defaut, we output the \"attributes.value\" if set \n\t//\t(in case an item only wants to write out on the initial draw)\n\t// NOTE: dereferencing through the choice map happens in getDisplayValue()\n\tvar value = this.getValue();\n\tvar method = this.getDisplayValueMethod();\n\tif (method) {\n\t\tvalue = method.call(this, value);\n\t}\n\t\n\t//set the onClick event handler\n\tvar clickMethod = this.getClickHandlerHTML();\n\tvar htmlWithEvent = null ;\n\tif (clickMethod != null && clickMethod != \"\") {\n\t\thtmlWithEvent = \"<div \" + this.getClickHandlerHTML() +\n\t\t \t\t\t\t\">\" + value + \"</div>\" ; \n\t}\n\t\n\thtml.append(htmlWithEvent || value);\n}\n\n\nOutput_XFormItem.prototype.getDisplayValue = function(newValue) {\n\t// dereference through the choices array, if provided\n\tnewValue = this.getChoiceLabel(newValue);\n\n\tif (newValue == null) {\n\t\tnewValue = \"\";\n\t} else {\n\t\tnewValue = \"\" + newValue;\n\t}\n\treturn newValue;\n}\n\nOutput_XFormItem.prototype.updateElement = function (newValue) {\n\tvar el = this.getElement();\n\tif(el) {\n\t    //set the onClick event handler\n\t    var clickMethod = this.getClickHandlerHTML();\n\t    var htmlWithEvent = null ;\n\t    if (clickMethod != null && clickMethod != \"\") {\n\t\t    htmlWithEvent = \"<div \" + this.getClickHandlerHTML() +\n\t\t \t\t\t\t\">\" + newValue + \"</div>\" ;\n\t    }\n\n        newValue = htmlWithEvent || newValue;\n\t\tthis.getElement().innerHTML = newValue;\n    }\n}\n\nOutput_XFormItem.prototype.initFormItem = function () {\n\t\n\tXFormItem.prototype.initFormItem.call(this);\n\t\n\t// if we're dealing with an XFormChoices object...\n\tvar choices = this.getChoices();\n\tif (choices == null || choices.constructor != XFormChoices) return;\n\n\t//\t...set up to receive notification when its choices change\n\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\n\n    this.signUpForEvents();   //so when the instance value changed, the output display can be updated.\n}\n\nOutput_XFormItem.prototype.dirtyDisplay = function () {\n\tXFormItem.prototype.dirtyDisplay.call(this);\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\n}\n\n// set up how disabling works for this item type\nOutput_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n/**\n * @class defines XFormItem type _TEXTFIELD_\n * @constructor\n * \n * @private\n */\nTextfield_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TEXTFIELD_\", \"textfield\", Textfield_XFormItem, XFormItem);\n// aliases for _TEXTFIELD_:  _INPUT_\nXFormItemFactory.registerItemType(\"_INPUT_\", \"input\", Textfield_XFormItem);\n\n//\ttype defaults\n//Textfield_XFormItem.prototype.width = 100;\nTextfield_XFormItem.prototype._inputType = \"text\";\nTextfield_XFormItem.prototype.cssClass = \"xform_field\";\nTextfield_XFormItem.prototype.elementChangeHandler=\"onchange\";\n//Textfield_XFormItem.prototype.onclickHandler=\"onclick\";\nTextfield_XFormItem.prototype.focusable = true;\nTextfield_XFormItem.prototype.nowrap = false;\nTextfield_XFormItem.prototype.labelWrap = true;\nTextfield_XFormItem.prototype.containerCssClass = \"xform_field_container\";\nTextfield_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nTextfield_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\n//\tmethods\nTextfield_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tvar inputType = this._inputType;\n\tvar value = this.getValue();\n\tvar modelItem = this.getModelItem();\n\tvar inputHelp = this.getInheritedProperty(\"inputHelp\");\n\n\n\t/***\n//XXX this is probably not the best way to tell if we only want to enter numbers...\n\tif (modelItem && (modelItem.type == _NUMBER_)) {// || modelItem.type == _COS_NUMBER_)) {\n\t\tvar keyStrokeHandler = \" onkeypress=\\\"\"\n//\t\t\t+\"',45,46,48,49,50,51,52,53,54,55,56,57,69,101,'.indexOf(','+(event||window.event).keyCode+',') > -1\\\"\"\t\t\n\t\t\t\t+\"var code = ','+(event||window.event).which+',';\"\n\t\t\t\t+\"var isValidChar = (',45,46,48,49,50,51,52,53,54,55,56,57,69,101,'.indexOf(code) > -1);\"\n\t\t\t\t+\"DBG.println(code + ':'+isValidChar);\"\n\t\t\t\t+\"event.returnValue = isValidChar;\"\n\t\t\t\t+\"return isValidChar;\"\n\t\t\t\t+\"\\\"\"\n\t}\n\t/***/\n\thtml.append( \n\t\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", inputType, \"\\\"\", this.getCssString(), \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\t\tthis.getClickHandlerHTML(), this.getMouseoutHandlerHTML(),\n\t\t\t\t(value != null ? \" value=\\\"\" + value + \"\\\"\" :\"\"), //: (inputHelp != null ? \" value=\\\"\" + inputHelp + \"\\\"\"\n\t\t\t\">\");\n}\n\nTextfield_XFormItem.prototype.getClickHandlerHTML =\nfunction () {\n\tvar formId = this.getFormGlobalRef(), \n\t\titemId = this.getId()\n\t\t;\n\t\n\tvar onClickAction = \"\";\n\t\n\tvar onClickFunc = this.getInheritedProperty(\"onClick\") ;\n\tonClickAction = AjxBuffer.concat(\" onclick=\\\"\", onClickFunc || \"XFormItem.prototype.showInputTooltip\" , \n\t\t\t\".call(\" ,   this.getGlobalRef(), \", event );\\\" \");\n\t\t\t\n\treturn AjxBuffer.concat( onClickAction );\t\n}\n\nTextfield_XFormItem.prototype.getMouseoutHandlerHTML =\nfunction () {\n\tvar formId = this.getFormGlobalRef(), \n\t\titemId = this.getId()\n\t\t;\n\t\n\tvar onMouseoutAction = \"\";\n\t\n\tvar onMouseoutFunc = this.getInheritedProperty(\"onMouseout\") ;\n\tonMouseoutAction = AjxBuffer.concat(\" onmouseout=\\\"\", onMouseoutFunc || \"XFormItem.prototype.hideInputTooltip\" , \n\t\t\t\t\t\t\".call(\" ,   this.getGlobalRef(), \", event );\\\" \");\n\t\t\t\t\t\t\n\treturn AjxBuffer.concat( onMouseoutAction );\t\n}\n\nTextfield_XFormItem.prototype.updateElement = function(newValue) {\n\tif (newValue == null) newValue = this.getValue();\n\tvar inputHelp = this.getInheritedProperty(\"inputHelp\");\n\t/*\n\tDBG.println(\"In updateElement: \" + \"newValue=\" + newValue + \"###\" + \"elementValue=\" + this.getElement().value);\t*/\n\tif ((newValue == null) && (inputHelp != null)) {\n\t\t newValue = inputHelp ;\n\t}else if (newValue == null){\n\t\t newValue = \"\";\n\t}\n\t\n\tif (this.getElement() && this.getElement().value != newValue) {\n\t\tthis.getElement().value = newValue;\n\t}\n}\n\n// set up how disabling works for this item type\nTextfield_XFormItem.prototype.setElementEnabled  = function (enabled) {\n\tif (this.getElement()) {\n\t\tthis.setElementDisabledProperty(enabled);\n\t\tthis.setElementEnabledCssClass(enabled);\n\t}\n}\n\n//Creates a datalist element which specifies a list of pre-defined options for an <input> element providing an autocomplete feature.\nTextfield_XFormItem.prototype.createDataList  = function (list) {\n\tif (!AjxEnv.supported.input.list) {\n\t\treturn;\n\t}\n\tlist = list || [];\n\tvar dataListId = this.getId() + \"_datalist\";\n\t// If old datalist is already present remove it.\n\tvar oldDataList = Dwt.getElement(dataListId);\n\tif (oldDataList) {\n\t\toldDataList.parentNode.removeChild(oldDataList);\n\t}\n\tvar element = this.getElement();\n\telement.setAttribute(\"list\", dataListId);\n\tvar dataList = document.createElement(\"datalist\");\n\tdataList.id = dataListId;\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar option = document.createElement('option');\n\t\toption.value = list[i];\n\t\tdataList.appendChild(option);\n\t}\n\telement.parentNode.appendChild(dataList);\n\n\t// if there is an onChange handler, call that during on input event\n\tvar onChangeMethod = this.getOnChangeMethod();\n\tif (typeof onChangeMethod === \"function\") {\n\t\tDwt.setHandler(element, DwtEvent.ONINPUT, function() {\n\t\t\tonChangeMethod.call(this, this.getElement().value, false, this.getForm());\n\t\t}.bind(this));\n\t}\n};\n\n\n/**\n * @class defines XFormItem type _SECRET_\n * @constructor\n * \n * @private\n */\nSecret_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SECRET_\", \"secret\", Secret_XFormItem, Textfield_XFormItem);\n// alias for the SECRET class:  PASSWORD\nXFormItemFactory.registerItemType(\"_PASSWORD_\", \"password\", Secret_XFormItem);\n\n\n//\ttype defaults\nSecret_XFormItem.prototype._inputType = \"password\";\nSecret_XFormItem.prototype.focusable = true;\n\n\n\n\n/**\n * @class defines XFormItem type _FILE_\n * @constructor\n * \n * @private\n */\nFile_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_FILE_\", \"file\", File_XFormItem, Textfield_XFormItem)\n\n//\ttype defaults\nFile_XFormItem.prototype._inputType = \"file\";\nFile_XFormItem.prototype.forceUpdate = false;\nFile_XFormItem.prototype.focusable = true;\n\n\n\n/**\n * @class defines XFormItem type _TEXTAREA_\n * @constructor\n * \n * @private\n */\nTextarea_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TEXTAREA_\", \"textarea\", Textarea_XFormItem, Textfield_XFormItem)\n\nTextarea_XFormItem.prototype.width = \"100%\";\nTextarea_XFormItem.prototype.height = 100;\nTextarea_XFormItem.prototype.focusable = true;\n//\tmethods\nTextarea_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\tvar wrap = this.getInheritedProperty(\"textWrapping\");\n\tif (!wrap)\n\t\twrap = \"off\";\n\t\t\n\thtml.append( \n\t\t\"<textarea id=\\\"\", this.getId(), \"\\\"\", this.getCssString(),\n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), \"wrap='\", wrap, \"'\",\n\t\t\"></textarea>\");\n}\n\n// you can use these to \nTextarea_XFormItem.prototype.setElementDisabledProperty = function (enable) {\n\tthis.getElement().disabled = (enable != true);\n\tthis.getElement().readOnly = (enable != true)\n}\n\nTextarea_XFormItem.prototype.getKeyPressHandlerHTML = function () {\n\n        var keydownEv = \"onkeydown\";\n        if (AjxEnv.isNav || AjxEnv.isChrome || AjxEnv.isSafari) {\n                keydownEv = \"onkeypress\";\n        }\n        return AjxBuffer.concat(\" \", keydownEv,\"=\\\"\",this.getGlobalRef(), \".handleKeyDown(event, this)\\\"\",\n                                                   \" onkeyup=\\\"\", this.getGlobalRef(), \".handleKeyUp(event, this)\\\"\");\n};\n\n/**\n * @class defines XFormItem type _CHECKBOX_\n * @constructor\n * \n * @private\n */\nCheckbox_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_CHECKBOX_\", \"checkbox\", Checkbox_XFormItem, XFormItem)\n // Wiz_checkbox for appNewUI dialog\n Wiz_Checkbox_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_WIZ_CHECKBOX_\", \"wiz_checkbox\", Wiz_Checkbox_XFormItem, Checkbox_XFormItem)\nif(appNewUI){\n   Wiz_Checkbox_XFormItem.prototype.labelLocation = _RIGHT_;\n   Wiz_Checkbox_XFormItem.prototype.align = _RIGHT_;\n   Wiz_Checkbox_XFormItem.prototype.subLabel = \"\";\n}\n\n\n//\ttype defaults\nCheckbox_XFormItem.prototype._inputType = \"checkbox\";\nCheckbox_XFormItem.prototype.elementChangeHandler = \"onclick\";\nCheckbox_XFormItem.prototype.labelLocation = (appNewUI?_LEFT_:_RIGHT_);\nCheckbox_XFormItem.prototype.cssClass = \"xform_checkbox\";\nCheckbox_XFormItem.prototype.labelCssClass = \"xform_checkbox\";\nCheckbox_XFormItem.prototype.align = (appNewUI?_LEFT_:_RIGHT_);\nCheckbox_XFormItem.prototype.trueValue = _UNDEFINED_;\t\t// Don't set in proto so model can override\nCheckbox_XFormItem.prototype.falseValue = _UNDEFINED_;\nCheckbox_XFormItem.prototype.focusable = true;\nCheckbox_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nCheckbox_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\nCheckbox_XFormItem.prototype.nowrap = false;\nCheckbox_XFormItem.prototype.labelWrap = true;\n//if (appNewUI) {\n   // Checkbox_XFormItem.prototype.subLabel = ZaMsg.CaptionEnabled;\n//}\n//\tmethods\nCheckbox_XFormItem.prototype.outputHTML = function (html, currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked,\n\t\t\">\");\n}\n\n\nCheckbox_XFormItem.prototype.getTrueValue = function () {\n\tvar trueValue = this.getInheritedProperty(\"trueValue\");\n\tif (trueValue == null) trueValue = true;\n\treturn trueValue;\n}\n\nCheckbox_XFormItem.prototype.getFalseValue = function () {\n\tvar falseValue = this.getInheritedProperty(\"falseValue\");\n\tif (falseValue == null) falseValue = false;\n\treturn falseValue;\n}\n\n\n\nCheckbox_XFormItem.prototype.updateElement = function(newValue) {\n\tnewValue = (newValue == this.getTrueValue());\n\tthis.getElement().checked = newValue;\n}\n\nCheckbox_XFormItem.prototype.getElementValueGetterHTML = function () {\n\tvar trueValue = this.getTrueValue();\n\tif (trueValue !== _UNDEFINED_) {\n\t\tif (typeof trueValue == \"string\") trueValue = \"'\" + trueValue + \"'\";\n\t\t\n\t\tvar falseValue = this.getFalseValue();\n\t\tif (typeof falseValue == \"string\") falseValue = \"'\" + falseValue + \"'\";\n\t\n\t\tif (trueValue == null) trueValue = true;\n\t\tif (falseValue == null) falseValue = false;\n\t\n\t\treturn AjxBuffer.concat(\n\t\t\t\"var value = (this.checked ? \",  trueValue, \" : \", falseValue, \");\"\n\t\t);\n\t} else {\n\t\treturn \"var value = '\"+this.getValue()+\"';\";\n\t}\n}\n\n\nif (appNewUI) {  //   bug66133,for some particular places, subLabel need\n    Checkbox_XFormItem.prototype.outputContainerTDEndHTML = function (html) {\n        var tdLabel = this.getInheritedProperty(\"subLabel\");\n        if (AjxUtil.isEmpty(tdLabel)) {\n            tdLabel = \"\";\n        } else {\n            tdLabel = \" \" + tdLabel;\n        }\n\n        html.append(tdLabel + \"</td id=\\\"\",  this.getId(), \"___container\\\">\");\n    }\n}\n// set up how disabling works for this item type\n//\tXXXX eventually we want to disable our label as well...\nCheckbox_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _RADIO_\n * @constructor\n * \n * @private\n */\nRadio_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_\", \"radio\", Radio_XFormItem, Checkbox_XFormItem)\n\n//\ttype defaults\nRadio_XFormItem.prototype._inputType = \"radio\";\nRadio_XFormItem.prototype.focusable = true;\nRadio_XFormItem.prototype.groupname=null;\nRadio_XFormItem.prototype.subLabel = (appNewUI?\"\":null);\nRadio_XFormItem.prototype.align = _RIGHT_;\nRadio_XFormItem.prototype.labelLocation = _RIGHT_;\n//\tmethods\n\nRadio_XFormItem.prototype.updateElement = function(newValue) {\n\tthis.getElement().checked = (this.getValue() == newValue);\n}\n\n//\tmethods\nRadio_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked);\n\tvar groupname = this.getInheritedProperty(\"groupname\");\n\tif(groupname) {\n\t\t\thtml.append(\" name='\",groupname,\"'\");\n\t}\n\thtml.append(\">\");\n}\n\n/**\n * @class defines XFormItem type _RADIO_LABEL_\n * @constructor\n * \n * @private\n */\nRadio_Label_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_LABEL_\", \"radio_label\", Radio_Label_XFormItem, Radio_XFormItem)\n\n//\ttype defaults\nRadio_Label_XFormItem.prototype._inputType = \"radio\";\nRadio_Label_XFormItem.prototype.focusable = true;\nRadio_Label_XFormItem.prototype.groupname=null;\n//\tmethods\n\nRadio_XFormItem.prototype.elementChanged = function(elementValue, instanceValue, event) {\n\tif(elementValue==true) {\n\t\t//this.setInstanceValue(this.getValue());\n\t\tthis.getForm().itemChanged(this.getId(), this.getValue(), event);\n\t}\t\n}\n\nRadio_XFormItem.prototype.updateElement = function(newValue) {\n\tthis.getElement().checked = (this.getValue() == newValue);\n\tvar labelEl = XFG.getEl((this.getId()+\"___labelValue\"));\n\tif(labelEl) {\n\t\tvar labelRef = this.getInheritedProperty(\"labelRef\");\n\t\tif (labelRef == null) \n\t\t\treturn;\n\t\tvar label = this.getInstanceValue(labelRef);\t\n\t\tlabelEl.innerHTML = label;\n\t}\n}\n\n//\tmethods\nRadio_Label_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// figure out how to show the checkbox as checked or not\n\tvar checked = \"\";\n\tif (this.getInstanceValue() == this.getTrueValue()) {\n\t\tchecked = \" CHECKED\";\n\t}\n\thtml.append( \n\t\t\"<input autocomplete='off' id=\\\"\", this.getId(),\"\\\" type=\\\"\", this._inputType, \"\\\"\",  \n\t\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(), checked);\n\tvar groupname = this.getInheritedProperty(\"groupname\");\n\tif(groupname) {\n\t\t\thtml.append(\" name='\",groupname,\"'\");\n\t}\n\thtml.append(\">\");\n}\n\nRadio_Label_XFormItem.prototype.outputLabelCellHTML = function (html,  rowSpan, labelLocation) {\n\tvar labelRef = this.getInheritedProperty(\"labelRef\");\n\tif (labelRef == null) return;\n\tvar label = this.getInstanceValue(labelRef);\n\tif (label == null) return;\n\tif (label == \"\") label = \"&nbsp;\";\n\tvar accessKey = this.getInheritedProperty(\"labelValue\");\n\tif (labelLocation == _INLINE_) {\n\t\tvar style = this.getLabelCssStyle();\n\t\tif (style == null) style = \"\";\n\t\tstyle = \"position:relative;left:10;top:5;text-align:left;background-color:#eeeeee;margin-left:5px;margin-right:5px;\" + style;\n\t\thtml.append( \"<label id=\\\"\", this.getId(),\"___labelValue\\\"\", \n\t\t\t\t\t\t\t\tthis.getLabelCssString(null, style), \" FOR=\\\"\",this.getId(), \"\\\">\",\n\t\t\t\t\t\t\t\tlabel,\n\t\t\t\t\t\t\t\"</label>\"\n\t\t\t\t\t);\n\t} else {\n\t\thtml.append( \"<td \", this.getLabelCssString(), (rowSpan > 1 ? \" rowspan=\" + rowSpan : \"\"), \">\",\t\n\t\t\"<label id=\\\"\", this.getId(),\"___labelValue\\\"\", \" FOR=\\\"\",this.getId(), \"\\\">\",\n\t\tlabel,\"</label>\");\n\t\thtml.append(\"</td>\");\n\t}\n\n}\n\n/**\n * @class defines XFormItem type _BUTTON_\n * this item is a simple HTML &lt;button> element\n * @constructor\n * \n * @private\n */\nButton_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BUTTON_\", \"button\", Button_XFormItem, XFormItem);\nXFormItemFactory.registerItemType(\"_TRIGGER_\", \"trigger\", Button_XFormItem);\n//\ttype defaults\nButton_XFormItem.prototype.forceUpdate = false;\nButton_XFormItem.prototype.elementChangeHandler = \"onclick\";\nButton_XFormItem.prototype.labelLocation = _NONE_;\nButton_XFormItem.prototype.relevantBehavior = _DISABLE_;\nButton_XFormItem.prototype.cssClass = \"xform_button\";\nButton_XFormItem.prototype.focusable = true;\n// \tmethods\nButton_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\t// write the div to hold the value (will be filled in on update)\n\thtml.append(\n\t\t\"<button id=\\\"\", this.getId(), \"\\\"\", this.getCssString(),\n\t\t\t\"\\r  \", this.getOnActivateHandlerHTML(), \n\t\t\t\"\\r  \", this.getFocusHandlerHTML(),\n\t\t\"\\r\",\">\", \n\t\t\tthis.getLabel(),\n\t\t\"</button>\");\n}\n\n// set up how disabling works for this item type\nButton_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _SUBMIT_\n * this item is a simple HTML <input type=\"submit\"> element\n * @constructor\n * \n * @private\n */\nSubmit_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SUBMIT_\", \"submit\", Submit_XFormItem, Button_XFormItem)\n\n\n//\tmethods\nSubmit_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\t// write the div to hold the value (will be filled in on update)\n\thtml.append(\n\t\t\"<input id=\\\"\", this.getId(), \"\\\" type=\\\"submit\\\"\", this.getCssString(),\n\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\" value=\\\"\", this.getLabel(), \">\"\n\t);\n}\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _ANCHOR_\n * this item is an HTML &lt;a> element\n * @constructor\n * \n * @private\n */\nAnchor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_ANCHOR_\", \"anchor\", Anchor_XFormItem, XFormItem)\n\n//\ttype defaults\nAnchor_XFormItem.prototype.writeElementDiv = true;\nAnchor_XFormItem.prototype.forceUpdate = true;\nAnchor_XFormItem.prototype.cssClass = \"xform_anchor\";\nAnchor_XFormItem.prototype.elementChangeHandler = \"onclick\";\nAnchor_XFormItem.prototype.href = \"javascript:;\";\nAnchor_XFormItem.prototype.showInNewWindow = true;\nAnchor_XFormItem.prototype.focusable = true;\n\nAnchor_XFormItem.prototype.getHref = function () {\n\treturn this.getInheritedProperty(\"href\");\n}\n\n//\ttype defaults\n\n\nAnchor_XFormItem.prototype.getAnchorTag = function(href, label) {\n\tif (href == null) href = this.getHref();\n\tif (label == null) label = this.getLabel();\n\t\n\tvar inNewWindow = this.getShowInNewWindow();\n\treturn AjxBuffer.concat(\n\t\t\t'<a href=', href, \n\t\t\t\tthis.getOnActivateHandlerHTML(), \n\t\t\t\t(inNewWindow ? ' target=\"_blank\"' : ''),\n\t\t\t'>',\n\t\t\t\tlabel,\n\t\t\t'</a>');\n}\n\n//\tmethods\nAnchor_XFormItem.prototype.outputHTML = function (html) {\n\thtml.append(this.getAnchorTag());\n}\n\n\nAnchor_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value);\n}\n\n\n// set up how disabling works for this item type\nAnchor_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n\n/**\n * @class defines XFormItem type _DATA_ANCHOR_\n * this item is an HTML &lt;a> element\n * @constructor\n * \n * @private\n */\nData_Anchor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATA_ANCHOR_\", \"data_anchor\", Data_Anchor_XFormItem, Anchor_XFormItem)\n\n\nData_Anchor_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(null, value);\n}\n\n\n\n\n/**\n * @class defines XFormItem type _URL_\n * @constructor\n * \n * @private\n */\nUrl_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_URL_\", \"url\", Url_XFormItem, Anchor_XFormItem)\n\n\nUrl_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value, value);\n}\n\n/**\n * @class defines XFormItem type _DATA_URL_\n * @constructor\n * @private\n */\nDataUrl_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATA_URL_\", \"rata_url\", DataUrl_XFormItem, Anchor_XFormItem)\n\nUrl_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(value, null);\n}\n\n\n\n/**\n * @class defines XFormItem type _MAILTO_\n * this item is an _ANCHOR_ element with \"mailto:\" link\n * @constructor\n * \n * @private\n */\nMailto_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_MAILTO_\", \"mailto\", Mailto_XFormItem, Anchor_XFormItem)\nMailto_XFormItem.prototype.updateElement = function (value) {\n\tthis.getElement().innerHTML = this.getAnchorTag(\"mailto:\"+value, value);\n}\n\n\n\n\n/**\n * @class defines XFormItem type _IMAGE_\n * @constructor\n * \n * @private\n */\nImage_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_IMAGE_\", \"image\", Image_XFormItem, XFormItem)\n\n\n//\ttype defaults\nImage_XFormItem.prototype.forceUpdate = true;\nImage_XFormItem.prototype.src = _UNDEFINED_;\nImage_XFormItem.prototype.srcPath = _UNDEFINED_;;\nImage_XFormItem.prototype.writeElementDiv = true;\n\n\n//\tmethods\nImage_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\t\n\t// dereference through the choices array, if provided\n\tsrc = this.getChoiceLabel(src);\n\n\t// if we didn't get an image name, output nothing (?)\n\tif (src == null || src == \"\") {\n\t\tvar output = \"\";\n\t} else {\n\t\t// prepend the image path\n\t\tvar path = this.getSrcPath();\n\t\tif (path != null) src = path + src;\n\n\t\tvar output = AjxBuffer.concat(\n\t\t\t\"<img id=\\\"\", this.getId(), \"\\\" border=0 \", this.getCssString(),\n\t\t\t\t\" src=\\\"\", src, \"\\\"\",\n\t\t\t\">\"\n\t\t);\n\t}\n\tthis.getElement().innerHTML = output;\n}\n\n\n// set up how disabling works for this item type\nImage_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n// Ajx_Image\nAjx_Image_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_AJX_IMAGE_\", \"ajx_image\", Ajx_Image_XFormItem, XFormItem);\n\n\n//\ttype defaults\nAjx_Image_XFormItem.prototype.forceUpdate = true;\nAjx_Image_XFormItem.prototype.src = _UNDEFINED_;\nAjx_Image_XFormItem.prototype.srcPath = _UNDEFINED_;;\nAjx_Image_XFormItem.prototype.writeElementDiv = false;\n\n// //\tmethods\nAjx_Image_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\n \t// dereference through the choices array, if provided\n \tsrc = this.getChoiceLabel(src);\n\tvar output;\n \t// if we didn't get an image name, output nothing (?)\n \tif (src == null || src == \"\") {\n \t\toutput = \"\";\n \t} else {\n \t\t// prepend the image path\n \t\tvar path = this.getSrcPath();\n \t\tif (path != null) src = path + src;\n \t\tvar style = this.getCssStyle();\n\t\toutput = AjxImg.getImageHtml(src, \"position:relative;\" + (style ? style : '' ));\n \t}\n \tif (this.getContainer()) this.getContainer().innerHTML = output;\n};\n\n\n// Dwt_Image\nDwt_Image_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_IMAGE_\", \"dwt_image\", Dwt_Image_XFormItem, XFormItem);\n\n\n//\ttype defaults\nDwt_Image_XFormItem.prototype.forceUpdate = true;\nDwt_Image_XFormItem.prototype.src = _UNDEFINED_;\nDwt_Image_XFormItem.prototype.srcPath = _UNDEFINED_;;\nDwt_Image_XFormItem.prototype.writeElementDiv = false;\n\n// //\tmethods\nDwt_Image_XFormItem.prototype.updateElement = function (src) {\n\tif (src == null) src = this.getSrc();\n\n \t// dereference through the choices array, if provided\n \tsrc = this.getChoiceLabel(src);\n\tvar output;\n \t// if we didn't get an image name, output nothing (?)\n \tif (src == null || src == \"\") {\n \t\toutput = \"\";\n \t} else {\n \t\t// prepend the image path\n \t\tvar path = this.getSrcPath();\n \t\tif (path != null) src = path + src;\n \t\tvar style = this.getCssStyle();\n\t\tstyle = style || \"\";\n\t\tvar styleStr = \"style='position:relative;\"+ style + \"'\";\n\n\t\tif (src) {\n\t\t\toutput = [\"<div class='\", src, \"' \", styleStr, this.getClickHandlerHTML(), \" ></div>\"].join(\"\");\n\t\t} else {\n\t\t\toutput = [\"<div \", styleStr, this.getClickHandlerHTML(), \" ></div>\"].join(\"\");\n\t\t}\n \t}\n \tthis.getContainer().innerHTML = output;\n};\n\n/**\n * @class defines XFormItem type _SELECT1_\n * this item is rendered as HTML &lt;select> element\n * @constructor\n * \n * @private\n */\nSelect1_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SELECT1_\", \"select1\", Select1_XFormItem, XFormItem)\n\n//\ttype defaults\nSelect1_XFormItem.prototype.multiple = false;\nSelect1_XFormItem.prototype.alwaysUpdateChoices = false;\nSelect1_XFormItem.prototype.focusable = true;\nSelect1_XFormItem.prototype.cssClass = \"xform_select1\";\nSelect1_XFormItem.prototype.containerCssClass = \"xform_select_container\";\nSelect1_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\nSelect1_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\n//\tmethods\nSelect1_XFormItem.prototype.initFormItem = function () {\n\t// if we're dealing with an XFormChoices object...\n\tvar choices = this.getChoices();\n\tif (choices == null || choices.constructor != XFormChoices) return;\n\n\t//\t...set up to receive notification when its choices change\n\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\n}\n\n\nSelect1_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\thtml.append( \n\t\t\"<select id=\\\"\", this.getId(), \"\\\" \", this.getCssString(), \n\t\t\t(this.getMultiple() ? \"multiple \" : \"\"), \n\t\t\tthis.getChangeHandlerHTML(), this.getFocusHandlerHTML(),\n\t\t\">\",\n\t\t\tthis.getChoicesHTML(),\n\t\t\"</select>\"\n\t\t);\n\tthis.cleanChoiceDisplay();\n}\n\nSelect1_XFormItem.prototype.getElementValueGetterHTML = function () {\n\treturn \"var value = XFormItem.getValueFromHTMLSelect(this);\";\n}\n\n\n\nSelect1_XFormItem.prototype.setChoices = function(newChoices) {\n\tthis.choices = newChoices;\n\tthis.dirtyDisplay();\n\tthis.updateChoicesHTML();\n}\n\nSelect1_XFormItem.prototype.dirtyDisplay = function () {\n\tXFormItem.prototype.dirtyDisplay.call(this);\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\n}\n\nSelect1_XFormItem.prototype.updateElement = function (newValue) {\n\tif (this.choicesAreDirty()) this.updateChoicesHTML();\n\tthis.updateValueInHTMLSelect1(newValue, this.getElement(), this.getSelectionIsOpen());\n}\n\n\nSelect1_XFormItem.prototype.cleanChoiceDisplay = function () {\n\tthis._choiceDisplayIsDirty = false;\n}\n\n// set up how disabling works for this item type\nSelect1_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementDisabledProperty;\n\n\n\n/**\n * @class defines XFormItem type _SELECT_\n * this item is rendered as HTML &lt;select> element\n * @constructor\n * \n * @private\n */\nSelect_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SELECT_\", \"select\", Select_XFormItem, Select1_XFormItem)\n\n//\ttype defaults\nSelect_XFormItem.prototype.multiple = true;\nSelect_XFormItem.prototype.selection = _OPEN_;\nSelect_XFormItem.prototype.focusable = true;\nSelect_XFormItem.prototype.containerCssClass = \"xform_select_container\";\n\n//\tmethods\n\nSelect_XFormItem.prototype.updateElement = function (newValue) {\n\tif (this.choicesAreDirty()) this.updateChoicesHTML();\n\tthis.updateValueInHTMLSelect(newValue, this.getElement(), this.getSelectionIsOpen());\n}\n\n\n\n/**\n * @class defines XFormItem type _SPACER_\n * Use to output an entire row spacer\n * @constructor\n * \n * @private\n */\nSpacer_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SPACER_\", \"spacer\", Spacer_XFormItem, XFormItem)\n\n//\ttype defaults\nSpacer_XFormItem.prototype.forceUpdate = false;\nSpacer_XFormItem.prototype.labelLocation = _NONE_;\nSpacer_XFormItem.prototype.width = 1;\nSpacer_XFormItem.prototype.height = 10;\nSpacer_XFormItem.prototype.cssStyle = \"font-size:1px;overflow:hidden;\";\nSpacer_XFormItem.prototype.colSpan = \"*\";\nSpacer_XFormItem.prototype.focusable = false;\n\n// \tmethods\nSpacer_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\thtml.append( \"<div id=\", this.getId(), this.getCssString(),\"></div>\");\n}\n\n// set up how disabling works for this item type\nSpacer_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n/**\n * @class defines XFormItem type _CELL_SPACER_\n * Use to output a single cell of space\n * @constructor\n * \n * @private\n */\nCell_Spacer_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_CELL_SPACER_\", \"cell_spacer\", Cell_Spacer_XFormItem, Spacer_XFormItem)\nXFormItemFactory.registerItemType(\"_CELLSPACER_\", \"cell_spacer\", Cell_Spacer_XFormItem);\nCell_Spacer_XFormItem.prototype.width = 10;\nCell_Spacer_XFormItem.prototype.height = 10;\nCell_Spacer_XFormItem.prototype.colSpan = 1;\nCell_Spacer_XFormItem.prototype.focusable = false;\n\n/**\n * @class defines XFormItem type _SEPARATOR_\n * @constructor\n * \n * @private\n */\nSeparator_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SEPARATOR_\", \"separator\", Separator_XFormItem, XFormItem)\n\n//\ttype defaults\nSeparator_XFormItem.prototype.cssClass = \"xform_separator\";\nSeparator_XFormItem.prototype.colSpan = \"*\";\nSeparator_XFormItem.prototype.align = _CENTER_;\nSeparator_XFormItem.prototype.valign = _CENTER_;\nSeparator_XFormItem.prototype.height = 10;\nSeparator_XFormItem.prototype.focusable = false;\n\n// methods\nSeparator_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tvar css = (this.getCssClass() || '');\n\tif (css != '' && css != null) css = \" class=\\\"\" + css + \"\\\"\";\n\t\n\thtml.append( \n\t\t\t\"<table width=100% cellspacing=0 cellpadding=0>\",\n\t\t\t\t\"<tr><td height=\",this.getHeight(),\">\",\n\t\t\t\t\t\"<div \", css,\"></div>\",\n\t\t\t\"</td></tr></table>\"\n\t);\n}\n\n\n// set up how disabling works for this item type\nSeparator_XFormItem.prototype.setElementEnabled = XFormItem.prototype.setElementEnabledCssClass;\n\n\n\n\n\n\n\n/**\n * @class defines XFormItem type _GROUP_\n * @constructor\n * \n * @private\n */\nGroup_XFormItem = function() {\n\tthis.tabIdOrder = [];\n}\nXFormItemFactory.createItemType(\"_GROUP_\", \"group\", Group_XFormItem, XFormItem)\n\n//\ttype defaults\nGroup_XFormItem.prototype.forceUpdate = false;\nGroup_XFormItem.prototype.numCols = 2;\nGroup_XFormItem.prototype.useParentTable = false;\nGroup_XFormItem.prototype.focusable = false;\nGroup_XFormItem.prototype.cellspacing = 0;\nGroup_XFormItem.prototype.border = 0;\nGroup_XFormItem.prototype.cellpadding = 0;\nif(appNewUI){\nGroup_XFormItem.prototype.tableCssClass = \"grid_xform_table\";\n}\nGroup_XFormItem.prototype.initFormItem = function () {\n\tXFormItem.prototype.initFormItem.call(this);\t\n\tif(this.getInheritedProperty(\"isTabGroup\")) {\n\t\tvar form = this.getForm();\n\t\tform.tabIdOrder[this.getId()] = this.tabIdOrder;\n\t\tform.addTabGroup(this);\n\t}\n\n}\n\nGroup_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tthis.getForm().outputItemList(this.getItems(), this, html,   this.getNumCols(), currentCol);\n}\n\nGroup_XFormItem.prototype.clearError = function() {\n\tvar errLoc = this.getErrorLocation();\n\tif (errLoc == _PARENT_ || errLoc == _INHERIT_){\n\t\tthis.getParentItem().clearError();\n\t\treturn;\n\t}\n\n\tthis.getForm().removeErrorItem(this);\n\tif(this.items) {\n\t\tvar cnt = this.items.length;\n\t\tfor(var i = 0; i < cnt; i++) {\n\t\t\tif(this.items[i].getErrorLocation() != _PARENT_ &&  this.items[i].getErrorLocation() != _INHERIT_)\n\t\t\t\tthis.items[i].clearError();\n\t\t}\n\t}\n\tthis.__errorState = XFormItem.ERROR_STATE_VALID;\n\tthis.removeErrorContainer();\n};\n\nGroup_XFormItem.prototype.setElementEnabled  =  function (enable) {\n\t\t\n}\n\nGroup_XFormItem.prototype.updateVisibility = function () {\n\tvar isVisible = true;\n\t\n\t//check if the parent element is visible\n\tvar parentItem = this.getParentItem();\n\tif(parentItem)\n\t\tisVisible=this.getParentItem().getIsVisible();\n\t\n\t//run stack of visibility checks until encounter a negative result\n\tif(isVisible) {\n\t\tvar myVisibilityChecks = this.getInheritedProperty(\"visibilityChecks\");\n\t\tif(myVisibilityChecks && myVisibilityChecks instanceof Array) {\n\t\t\tvar cnt = myVisibilityChecks.length;\n\t\t\tfor(var i=0;i<cnt;i++) {\n\t\t\t\tif(myVisibilityChecks[i] != null) {\n\t\t\t\t\tif(typeof(myVisibilityChecks[i])==\"function\") {\n\t\t\t\t\t\tisVisible = myVisibilityChecks[i].call(this);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (myVisibilityChecks[i] instanceof Array) {\n\t\t\t\t\t\t//first element is a func reference, the rest of elements are arguments\n\t\t\t\t\t\tvar func = myVisibilityChecks[i].shift();\n\t\t\t\t\t\tisVisible = func.apply(this, myVisibilityChecks[i]);\n\t\t\t\t\t\tmyVisibilityChecks[i].unshift(func);\n\t\t\t\t\t\tif(!isVisible)\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (typeof (myVisibilityChecks[i]) == \"string\") {\n                        //for relevant backward compatibility\n                        var instance = this.getInstance();\n                        isVisible = eval(myVisibilityChecks[i]) ;\n                        if(!isVisible)\n\t\t\t\t\t\t\tbreak;\n                    }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\t\n\tvar reRunRefresh = false;\t\n\tif(isVisible) {\n\t\tif(this.deferred)\n\t\t\treRunRefresh=true;\n\t\t\t\n\t\tthis.show();\n\t} else\n\t\tthis.hide();\n\t\n\t//update visibility for active child items\n\tif(isVisible) {\n\t\tfor(var itemId in this.activeChildren) {\n\t\t\tif(this.activeChildren[itemId]===true) {\n\t\t\t\tvar item = this.getForm().getItemById(itemId);\n\t\t\t\tif(item && this.getInstance()) {\n\t\t\t\t\tvar updateMethod = item.getUpdateVisibilityMethod();\t\t\t\t\n\t\t\t\t\tif(updateMethod) {\n\t\t\t\t\t\tupdateMethod.call(item);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(reRunRefresh) {\n\t\tthis.updateEnabledDisabled();\n\t\tthis.updateElement();\n\t}\t\n}\n\n\n\nStep_Choices_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_STEPCHOICE_\", \"stepchoices\", Step_Choices_XFormItem, Group_XFormItem);\n\nStep_Choices_XFormItem.prototype.numCols = 1;\nStep_Choices_XFormItem.prototype.labelVisibility = _UNDEFINED_;\nStep_Choices_XFormItem.prototype.labelUpdateMethod = function(newValue) {\n    var el = this.getElement();\n    var sourceValue =  this.getInheritedProperty(\"sourceValue\");\n    if (sourceValue < newValue) {\n        el.className = \"AdminOutputTabClick\";\n    } else if (sourceValue == newValue) {\n        el.className =  \"AdminOutputTabSelect\";\n    } else {\n        el.className = \"AdminOutputTab\";\n    }\n}\n\nStep_Choices_XFormItem.prototype.getLabelUpdateMethod = function() {\n    return this.cacheInheritedMethod(\"labelUpdateMethod\", \"$labelUpdateMethod\", \"newValue\");\n}\n\nStep_Choices_XFormItem.prototype.labelClickMethod = function(event) {\n    var sourceValue =  this.getInheritedProperty(\"sourceValue\");\n    var instanceValue = this.getInstanceValue();\n    if (sourceValue < instanceValue) {\n        this.setInstanceValue(sourceValue);\n    }\n}\n\nStep_Choices_XFormItem.prototype.getLabelClickMethod = function() {\n    return this.cacheInheritedMethod(\"labelClickMethod\", \"$labelClickMethod\", \"event\");\n}\n\nStep_Choices_XFormItem.prototype.initFormItem = function() {\n    var choices = this.getNormalizedChoices();\n    if (!choices)\n        return;\n\n\tXFormItem.prototype.initFormItem.call(this);\n\n    this.signUpForEvents();\n    var labels = choices.labels;\n    var values =choices.values;\n\n    this.items = [];\n    var currentItem;\n    var labelUpdateMethod = this.getLabelUpdateMethod();\n    var labelVisibility = this.getInheritedProperty (\"labelVisibility\");\n    var labelOnClickMethod = this.getLabelClickMethod();\n    for (var i = 0; i < labels.length; i++) {\n        if (labelVisibility && labelVisibility[values[i]]) {\n            currentItem = {ref: \".\", type:_OUTPUT_,\n                value:labels[i], sourceValue: values[i],\n                updateElement: labelUpdateMethod,\n                visibilityChecks: labelVisibility[values[i]].checks,\n                visibilityChangeEventSources:labelVisibility[values[i]].sources\n            };\n        } else {\n            currentItem = {ref: \".\", type:_OUTPUT_,\n                value:labels[i], sourceValue: values[i],\n                updateElement: labelUpdateMethod\n            };\n        }\n\n        if (labelOnClickMethod) {\n            currentItem.onClick = labelOnClickMethod;\n        }\n        this.items.push(currentItem);\n    }\n}\n /*\nStep_Choices_XFormItem.prototype.updateElement = function (newValue) {\n    var items = this.getItems();\n    var el;\n    for ( var i = 0; i < items.length; i++) {\n        el = items[i].getElement();\n        if (items[i].getInheritedProperty(\"sourceValue\") == newValue) {\n            Dwt.addClass(el, \"AdminOutputTabSelect\");\n            Dwt.delClass(el, \"AdminOutputTab\");\n        } else {\n            Dwt.delClass(el, \"AdminOutputTabSelect\");\n            Dwt.addClass(el, \"AdminOutputTab\");\n        }\n    }\n}\n*/\n\n\nHomeGroup_XFormItem = function() {\n    this.expanded = true;\n}\nXFormItemFactory.createItemType(\"_HOMEGROUP_\", \"homegroup\", HomeGroup_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nHomeGroup_XFormItem.prototype.headCss = \"homeGroupHeader\";\nHomeGroup_XFormItem.prototype.bodyCss = \"homeGroupBody\";\nHomeGroup_XFormItem.prototype.numCols = 1;\nHomeGroup_XFormItem.prototype.width = \"90%\";\nHomeGroup_XFormItem.prototype.cssStyle = \"margin-left:5%; margin-top: 10px;\";\nHomeGroup_XFormItem.prototype.headerLabel = \"Home Group\";\nHomeGroup_XFormItem.prototype.expandedImg =  \"ImgNodeExpanded\";\nHomeGroup_XFormItem.prototype.collapsedImg =  \"ImgNodeCollapsed\";\nHomeGroup_XFormItem.prototype.initializeItems = function () {\n    this.items = [];\n    this.items[0] = this.getHeaderItems();\n    this.items[1] = this.getContentItems();\n    var content = this.items[1].items;\n    var choices = this.getInheritedProperty(\"contentChoices\");\n    if (!choices[0].label)\n        this.items[1].numCols = 1;\n    for (var i = 0; i < choices.length; i ++) {\n        var currentItem = {type:_OUTPUT_, label: choices[i].label,\n                        value: choices[i].value, containerCssStyle:\"color:blue;cursor:pointer\"};\n        if (choices[i].onClick) {\n            currentItem.onClick = choices[i].onClick;\n        }\n        content.push(currentItem);\n    }\n    Group_XFormItem.prototype.initializeItems.call(this);\n}\n\nHomeGroup_XFormItem.prototype.onClick = function(ev) {\n    var homeItem = this.getParentItem().getParentItem();\n    var contentContainer = homeItem.items[1];\n    if (homeItem.expanded) {\n        homeItem.expanded = false;\n        this.updateElement(homeItem.collapsedImg);\n        contentContainer.hide();\n    } else {\n        homeItem.expanded = true;\n        this.updateElement(homeItem.expandedImg);\n        contentContainer.show();\n    }\n}\n\nHomeGroup_XFormItem.prototype.getHeaderItems =\nfunction () {\n    var headerLabel = this.getInheritedProperty(\"headerLabel\");\n    var headerCss = this.getInheritedProperty(\"headCss\");\n    var headerItems = { type:_COMPOSITE_, numCols:3, width:\"100%\",\n            colSizes:[\"20px\", \"100%\", \"20px\"],\n            items:[\n                {type:_DWT_IMAGE_, value: this.expandedImg, cssStyle:\"position:static;\", onClick:this.onClick},\n                {type:_OUTPUT_, value: headerLabel},\n                {type:_AJX_IMAGE_, value: \"BorderNone\"}\n            ],\n            cssClass:headerCss\n        };\n    return headerItems;\n}\n\nHomeGroup_XFormItem.prototype.getContentItems =\nfunction () {\n    var bodyCss = this.getInheritedProperty(\"bodyCss\");\n    var contentItems = { type:_GROUP_, items:[], cssClass:bodyCss\n    };\n    contentItems.items = [];\n    return contentItems;\n}\n\nCollapsedGroup_XFormItem = function() {\n    this.expanded = true;\n}\nXFormItemFactory.createItemType(\"_COLLAPSED_GROUP_\", \"collapsedgroup\", CollapsedGroup_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nCollapsedGroup_XFormItem.prototype.headCss = \"gridGroupHeader\";\nCollapsedGroup_XFormItem.prototype.contentCss = \"gridGroupContent\";\nCollapsedGroup_XFormItem.prototype.gridLabelCss = \"gridGroupBodyLabel\";\nCollapsedGroup_XFormItem.prototype.colSizes = \"100%\";\nCollapsedGroup_XFormItem.prototype.numCols = 1;\nCollapsedGroup_XFormItem.prototype.width = \"100%\";\nCollapsedGroup_XFormItem.prototype.defaultDisplay = true;\nCollapsedGroup_XFormItem.prototype.displayLabelItem = false;\nCollapsedGroup_XFormItem.prototype.cssClass = \"grid_group_container\";\nCollapsedGroup_XFormItem.prototype.cssStyle = \"margin-top: 10px;\";\nCollapsedGroup_XFormItem.prototype.headerLabel = AjxMsg.collapsedGroup;\nCollapsedGroup_XFormItem.prototype.expandedImg =  \"ImgNodeExpanded\";\nCollapsedGroup_XFormItem.prototype.collapsedImg =  \"ImgNodeCollapsed\";\nCollapsedGroup_XFormItem.prototype.contentTableCssClass = \"grid_table\";\nCollapsedGroup_XFormItem.prototype.containerCssClass = \"grid_table_cell_sheet\";\nCollapsedGroup_XFormItem.prototype.initializeItems = function () {\n    var gridLabelCss = this.getInheritedProperty(\"gridLabelCss\");\n    var oldItems = this.getItems();\n    this.items = [];\n    if(this.__attributes.label) {\n        this.headerLabel = this.__attributes.label;\n    }\n    this.items[0] = this.getHeaderItems();\n    this.items[1] = this.getContentItems();\n    if(!this.items[1] || this.items[1].items.length == 0) {\n        if(oldItems) {\n            for(var i = 0; i < oldItems.length; i++) {\n                if(oldItems[i].type == \"radio\")\n                    continue;  // don't deal with _RADIO_\n                if(oldItems[i].label || oldItems[i].txtBoxLabel) {\n                    if (oldItems[i].type) {\n                        var form = this.getForm();\n                        var constructor =   XFormItemFactory.getItemTypeConstructor(oldItems[i].type, form);\n                        //oldItems[i].labelCssStyle = \"text-align:left; background-color:#DEE5F1 !important;padding-left:10px;\";\n                        if (constructor.prototype.labelCssClass) {\n                           oldItems[i].labelCssClass =  constructor.prototype.labelCssClass + \" \" + gridLabelCss;\n                        } else {\n                            oldItems[i].labelCssClass = gridLabelCss;\n                        }\n                    }\n                    else {\n                        oldItems[i].labelCssClass = gridLabelCss;\n                    }\n                }\n            }\n            this.items[1].items =  oldItems;\n        }\n    }\n\n    Group_XFormItem.prototype.initializeItems.call(this);\n}\n\nCollapsedGroup_XFormItem.prototype.onClick = function(ev) {\n    var headerItem =  this.getParentItem();\n    var collapsedItem = headerItem.getParentItem();\n    var headerContainer = headerItem.items[2];\n    var contentContainer = collapsedItem.items[1];\n    var displayLabelItem = collapsedItem.getInheritedProperty(\"displayLabelItem\");\n    if (collapsedItem.expanded) {\n        collapsedItem.expanded = false;\n        this.updateElement(collapsedItem.collapsedImg);\n        contentContainer.hide();\n        if(displayLabelItem)\n            headerContainer.show();\n    } else {\n        collapsedItem.expanded = true;\n        this.updateElement(collapsedItem.expandedImg);\n        contentContainer.show();\n        headerContainer.hide();\n    }\n}\n\nCollapsedGroup_XFormItem.prototype.getHeaderItems =\nfunction () {\n    var headerLabel = this.getInheritedProperty(\"headerLabel\");\n    var headerLabelWidth = this.getInheritedProperty(\"headerLabelWidth\");\n    var headerCss = this.getInheritedProperty(\"headCss\");\n    var headItems = this.getInheritedProperty(\"headerItems\") || [];\n    var headerItems = { type:_COMPOSITE_, numCols:3, width:\"100%\",\n            colSizes:[\"20px\", headerLabelWidth || \"100%\", \"100%\"], colSpan:\"*\",\n            items:[\n                {type:_DWT_IMAGE_, value: this.expandedImg, cssStyle:\"position:static;\", onClick:this.onClick},\n                {type:_OUTPUT_, value: headerLabel},\n                {type:_GROUP_, items: headItems}\n            ],\n            cssClass:headerCss\n        };\n    return headerItems;\n}\n\nCollapsedGroup_XFormItem.prototype.getContentItems =\nfunction () {\n    var colsize = this.getInheritedProperty(\"colSizes\");\n    var numcols = this.getInheritedProperty(\"numCols\");\n    var contentCss = this.getInheritedProperty(\"contentCss\");\n    var tableCssClass = this.getInheritedProperty(\"contentTableCssClass\");\n    var contentItems = { type:_GROUP_, items:[], colSpan:\"*\",\n                         colSizes:colsize,numCols:numcols, width:\"100%\",\n                         cssClass:contentCss, tableCssClass:tableCssClass\n    };\n    var ref = this.getInheritedProperty(\"ref\");\n    if(ref) {\n        contentItems.ref = ref;\n    }\n    var content =  this.getInheritedProperty(\"contentItems\");\n    if(content)\n        contentItems.items = content;\n    return contentItems;\n}\n\nCollapsedGroup_XFormItem.prototype.updateVisibility = function () {\n\n    XFormItem.prototype.updateVisibility.call(this);\n    var display = this.getInheritedProperty(\"defaultDisplay\");\n    var displayLabelItem = this.getInheritedProperty(\"displayLabelItem\");\n    if(display) {\n        this.items[0].items[2].hide();\n        this.items[1].show();\n        this.items[0].items[0].value = this.expandedImg;\n        this.expanded = true;\n    } else {\n        if(displayLabelItem)\n            this.items[0].items[2].show();\n        else this.items[0].items[2].hide();\n        this.items[1].hide();\n        this.items[0].items[0].__attributes.value = this.collapsedImg;\n        this.expanded = false;\n    }\n}\n\nCollapsedGroup_XFormItem.prototype.getLabel = function () {\n    return null;\n}\n\n\n/**\n * @class defines XFormItem type _GROUPER_\n * Draws a simple border around the group, with the label placed over the border\n * @constructor\n * \n * @private\n */\nGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_GROUPER_\", \"grouper\", Grouper_XFormItem, Group_XFormItem);\nGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nGrouper_XFormItem.prototype.borderCssClass = \"GrouperBorder\";\nGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\nGrouper_XFormItem.prototype.getBorderCssClass = function () {\n\treturn this.getInheritedProperty(\"borderCssClass\");\n}\n\nGrouper_XFormItem.prototype.getInsetCssClass = function () {\n\treturn this.getInheritedProperty(\"insetCssClass\");\n}\n\n// output the label\nGrouper_XFormItem.prototype.outputHTMLStart = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"<div class=\", this.getBorderCssClass(), \">\",\n\t\t\t\t\"<span \", this.getLabelCssString(),\">\", this.getLabel(), \"</span>\",\n\t\t\t\t\"<div class=\", this.getInsetCssClass(),\">\"\n\t\t);\n}\n\nGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"</div></div>\"\n\t\t);\n}\n\n\n\nRadioGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_RADIO_GROUPER_\", \"radiogrouper\", RadioGrouper_XFormItem, Grouper_XFormItem)\nRadioGrouper_XFormItem.prototype.labelCssClass = \"xform_radio_grouper_label\";\nRadioGrouper_XFormItem.prototype.borderCssClass = \"xform_radio_grouper_border\";\nRadioGrouper_XFormItem.prototype.insetCssClass = \"xform_radio_grouper_inset\";\nRadioGrouper_XFormItem.prototype.width = \"100%\";\n\n\n\nCollapsableRadioGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_COLLAPSABLE_RADIO_GROUPER_\", \"collapsableradiogrouper\", CollapsableRadioGrouper_XFormItem, RadioGrouper_XFormItem)\n\nCollapsableRadioGrouper_XFormItem.prototype.getLabel = function () {\n\tvar label = XFormItem.prototype.getLabel.apply(this);\n\treturn \"<nobr><span class=xform_button style='font-size:9px;color:black;'>&nbsp;&ndash;&nbsp;</span>&nbsp;\"+label+\"</nobr>\";\n}\n\n\n\n\n/**\n * @class defines XFormItem type _CASE_\n * @constructor\n * \n * @private\n */\nCase_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n\n}\nXFormItemFactory.createItemType(\"_CASE_\", \"case\", Case_XFormItem, Group_XFormItem);\n\n//\ttype defaults\nCase_XFormItem.prototype.labelLocation = _NONE_;\nCase_XFormItem.prototype.useParentTable = false;\nCase_XFormItem.prototype.width = \"100%\";\nCase_XFormItem.prototype.focusable = false;\nCase_XFormItem.prototype.deferred = true;\nCase_XFormItem.prototype.cellspacing = 0;\nCase_XFormItem.prototype.cellpadding = 0;\nCase_XFormItem.prototype.cssClass = \"XFormCase\";\nCase_XFormItem.prototype.isTabGroup = true;\t\nCase_XFormItem.prototype.caseVarRef = \"currentStep\";\nCase_XFormItem.prototype.visibilityChangeEventSources = [Case_XFormItem.prototype.caseVarRef];\nCase_XFormItem.prototype.initFormItem = function () {\n\tXFormItem.prototype.initFormItem.call(this);\t\n\tif(this.getInheritedProperty(\"isTabGroup\")) {\n\t\tvar form = this.getForm();\n\t\tform.tabIdOrder[this.getId()] = this.tabIdOrder;\n\t\tform.addTabGroup(this,\"caseKey\");\n\t}\n\n}\nCase_XFormItem.prototype.outputHTML = function (html,  currentCol) {\n\tthis.deferred = this.getInheritedProperty(\"deferred\");\n\tif(this.deferred) {\n\t\tthis.getForm().outputItemList([], this, html,  this.getNumCols(), 0, true, false);\n\t} else {\n\t\tthis.getForm().outputItemList(this.getItems(), this, html,  this.getNumCols(), currentCol);\n\t}\n}\n\nCase_XFormItem.prototype._outputHTML = function () {\n\tvar form = this.getForm();\n\t\n\tvar element = this.getElement();\n\tif(!element) {\n\t\treturn;\n\t}\n\tvar masterId = this.getId();\n\t\n\tif(this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\")) {\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\n\t\tDwt.setSize(element, width, height);\n\t\tvar container = (form.parent instanceof DwtControl) ? form.parent : DwtControl.fromElementId(window._dwtShellId);\n\t\tif(container) {\n\t\t\tif(this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")) {\n\t\t\t\tcontainer.addControlListener(new AjxListener(this, this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")));\n\t\t\t}\n\t\t}\n\t}\t\n\n    if(this.cacheInheritedMethod(\"getCustomPaddingStyle\", \"$getCustomPaddingStyle\")) {\n        var paddingStyle = this.cacheInheritedMethod(\"getCustomPaddingStyle\", \"$getCustomPaddingStyle\").call(this);\n        if(paddingStyle)\n            element.style.cssText += \";\"+paddingStyle;  //\";\"for IE\n    }\n\n\tif (AjxEnv.isIE) {\n\t\tvar tempDiv = this.createElement(\"temp\",null,\"div\",\"\");\n\t\ttempDiv.display = \"none\";\n\t}\n\n\tvar html = new AjxBuffer();\n\t\n\tif (this.outputHTMLStart) {\n\t\tthis.outputHTMLStart(html,  0);\n\t}\n\t\n\tvar drawTable = (this.getUseParentTable() == false);\n\tif (drawTable) {\n\t\tvar colSizes = this.getColSizes();\n\t\tvar cellspacing = this.getInheritedProperty(\"cellspacing\");\n\t\tvar cellpadding = this.getInheritedProperty(\"cellpadding\");\t\t\n\t\thtml.append(\"<table cellspacing=\",cellspacing,\" cellpadding=\",cellpadding,\" \",  \n\t\t\t\t(XForm._showBorder ? \"border=1\" : \"border=0\"),\n\t\t\t\t\" id=\\\"\", this.getId(),\"_table\\\" \", this.getTableCssString(),\">\");\n\t\tif (colSizes != null) {\n\t\t\thtml.append(\" <colgroup>\");\n\t\t\tfor (var i = 0; i < colSizes.length; i++) {\n\t\t\t\tvar size = colSizes[i];\n\t\t\t\tif (size < 1) size = size * 100 + \"%\";\n\t\t\t\thtml.append(\"<col width=\", size, \">\");\n\t\t\t}\n\t\t\thtml.append(\"</colgroup>\");\n\t\t}\n\t\thtml.append(\"<tbody>\");\n\t}\n\t//output HTML for all child elements\n\tform.outputItemList(this.getItems(), this, html, this.getNumCols(), 0, true, true);\n\thtml.append(\"</table>\");\t\n\n\t\n//\tDBG.dumpObj(html.toString());\n    element.innerHTML = html.toString();\n    this.deferred = false;\n}\n\nCase_XFormItem.prototype.hide = function(isBlock) {\n\tXFormItem.prototype.hide.call(this, isBlock);\n\tthis.hideElement(this.getElement(),isBlock)\t;\n}\n\nCase_XFormItem.prototype.show = function(isBlock) {\n\tXFormItem.prototype.show.call(this, isBlock);\n\tthis.showElement(this.getElement(),isBlock)\t;\n}\n\nCase_XFormItem.prototype.isCurrentTab = function () {\n\tvar isCurrent = false;\n\tvar caseKey = this.getInheritedProperty(\"caseKey\");\n\tif(!AjxUtil.isEmpty(caseKey)) {\n\t\tvar caseVarRef = this.getInheritedProperty(\"caseVarRef\");\n\t\tvar currentKey = this.getInstanceValue(caseVarRef);\n\t\tisCurrent = (currentKey == caseKey);\n\t}\n\treturn isCurrent;\n}\nCase_XFormItem.prototype.visibilityChecks = [Case_XFormItem.prototype.isCurrentTab];\n\n/**\n * @class defines XFormItem type _TOP_GROUPER_\n * Draws a simple border around the group, with the label placed over the border\n * @constructor\n * \n * @private\n */\nTopGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TOP_GROUPER_\", \"top_grouper\", TopGrouper_XFormItem, RadioGrouper_XFormItem)\nTopGrouper_XFormItem.prototype.borderCssClass = \"TopGrouperBorder\";\nTopGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nTopGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nTopGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\n\n// output the label\nTopGrouper_XFormItem.prototype.outputHTMLStart = function (html,   currentCol) {\n\thtml.append(\n\t\t\t\"<div class=\", this.getBorderCssClass(), \">\",\n\t\t\t\t\"<div \", this.getLabelCssString(),\">\", this.getLabel(), \"</div>\",\n\t\t\t\t\"<div class=\", this.getInsetCssClass(),\">\"\n\t\t);\n}\n\nTopGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n\thtml.append(\n\t\t\t\"</div></div>\"\n\t\t);\n}\n\nif (appNewUI) {\n    XFormItemFactory.createItemType(\"_TOP_GROUPER_\", \"top_grouper\", TopGrouper_XFormItem, CollapsedGroup_XFormItem);\n}\n\nBaseTopGrouper_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BASE_TOP_GROUPER_\", \"base_top_grouper\", BaseTopGrouper_XFormItem, RadioGrouper_XFormItem)\nBaseTopGrouper_XFormItem.prototype.borderCssClass = \"TopGrouperBorder\";\nBaseTopGrouper_XFormItem.prototype.labelCssClass = \"GrouperLabel\";\nBaseTopGrouper_XFormItem.prototype.labelLocation = _INLINE_;\t\t// managed manually by this class\nBaseTopGrouper_XFormItem.prototype.insetCssClass = \"GrouperInset\";\n\n// output the label\nBaseTopGrouper_XFormItem.prototype.outputHTMLStart = function (html,   currentCol) {\n    html.append(\n            \"<div class=\", this.getBorderCssClass(), \">\",\n                \"<div \", this.getLabelCssString(),\">\", this.getLabel(), \"</div>\",\n                \"<div class=\", this.getInsetCssClass(),\">\"\n        );\n}\n\nBaseTopGrouper_XFormItem.prototype.outputHTMLEnd = function (html,  currentCol) {\n    html.append(\n            \"</div></div>\"\n        );\n    }\n\n/**\n * @class defines XFormItem type _SWITCH_\n * @constructor\n * \n * @private\n */\nSwitch_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_SWITCH_\", \"switch\", Switch_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nSwitch_XFormItem.prototype.labelLocation = _NONE_;\nSwitch_XFormItem.prototype.colSpan = \"*\";\nSwitch_XFormItem.prototype.width = \"100%\";\nSwitch_XFormItem.prototype.numCols = 1;\n\nSwitch_XFormItem.prototype.outputHTML = function (html) {\n\tSwitch_XFormItem.outputItemList.call(this.getForm(),this.getItems(), this, html);\n}\n\nSwitch_XFormItem.prototype.setElementEnabled = function (enable) {};\n\nSwitch_XFormItem.outputItemList = function (items, parentItem, html,   numCols, currentCol, skipTable, skipOuter) {\n\tif (parentItem.outputHTMLStart) {\n\t\tparentItem.outputHTMLStart(html,  currentCol);\n\t}\n\tvar outerStyle = null;\n\tif(!skipOuter) {\n\t\touterStyle = parentItem.getCssString();\n\t\tif (outerStyle != null && outerStyle != \"\") {\n\t\t\tparentItem.outputElementDivStart(html);\n\t\t}\n\t}\n\tfor (var itemNum = 0; itemNum < items.length; itemNum++) {\t\n\t\tvar item = items[itemNum];\n\t\tvar isNestingItem = (item.getItems() != null);\n\t\tvar itemUsesParentTable = (item.getUseParentTable() != false);\n\n\t\tvar writeElementDiv = item.getWriteElementDiv();\n\t\tvar outputMethod = item.getOutputHTMLMethod();\n\t\t\n\t\tif (isNestingItem && itemUsesParentTable) {\n\t\t\t// actually write out the item\n\t\t\tif (outputMethod) outputMethod.call(item, html,  currentCol);\n\n\t\t} else {\n\n\t\t\t// begin the element div, if required\n\t\t\tif (writeElementDiv) \titem.outputElementDivStart(html);\n\t\t\t\n\t\t\t// actually write out the item\n\t\t\tif (outputMethod) outputMethod.call(item, html,  0);\n\n\t\n\t\t\t// end the element div, if required\n\t\t\tif (writeElementDiv) \titem.outputElementDivEnd(html);\n\t\n\t\t}\n\t\t\n\t\tif(parentItem)\n\t\t\tparentItem.registerActiveChild(item);\n\t\t\n\t\titem.signUpForEvents();\n\t\t\n\t\tvar itemUpdateMethod = item.getUpdateElementMethod();\n\t\tif(itemUpdateMethod) {\n\t\t\tvar itemRefpath = item.getRefPath();\n\t\t\tif(itemRefpath) {\n\t\t\t\tvar instance = this.getInstance();\n\t\t\t\tif(instance) {\n\t\t\t\t\titemUpdateMethod.call(item, item.getInstanceValue());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (outerStyle != null && outerStyle != \"\") {\n\t\tparentItem.outputElementDivEnd(html);\n\t}\n\n\n\tif (parentItem.outputHTMLEnd) {\n\t\tparentItem.outputHTMLEnd(html,  currentCol);\n\t}\t\t\n}\n\n/**\n * @class defines XFormItem type _REPEAT_\n * @constructor\n * \n * @private\n */\nRepeat_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n}\nXFormItemFactory.createItemType(\"_REPEAT_\", \"repeat\", Repeat_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nRepeat_XFormItem.prototype.useParentTable = false;\nRepeat_XFormItem.prototype.writeElementDiv = true;\nRepeat_XFormItem.prototype.numCols = 1;\nRepeat_XFormItem.prototype.number = 1;\nRepeat_XFormItem.prototype.showRemoveButton = true;\nRepeat_XFormItem.prototype.showAddButton = true;\nRepeat_XFormItem.prototype.alwaysShowAddButton = false;\nRepeat_XFormItem.prototype.showMoveUpButton = false;\nRepeat_XFormItem.prototype.showMoveDownButton = false;\nRepeat_XFormItem.prototype.bmolsnr = true;\nRepeat_XFormItem.prototype.enableDisableChecks = [XFormItem.prototype.hasWritePermission];\nRepeat_XFormItem.prototype.visibilityChecks = [XFormItem.prototype.hasReadPermission];\n\nRepeat_XFormItem.haveAnyRows = function () {\n\treturn (this.getParentItem().getInstanceCount() != 0);\n}\n\nRepeat_XFormItem.isLastRow = function () {\n\treturn ((this.getParentItem().getInstanceCount()-1) == this.getParentItem().instanceNum);\n}\n\nRepeat_XFormItem.isAddButtonVisible = function () {\n\treturn (this.getParentItem().getParentItem().getAlwaysShowAddButton() || Repeat_XFormItem.isLastRow.call(this) || !(Repeat_XFormItem.haveAnyRows.call(this)));\n}\n\nRepeat_XFormItem.prototype.getRemoveButton = function () {\n\tif(!this.removeButton) {\n\t\tthis.removeButton = {\n\t\t\ttype:_BUTTON_, \n\t\t\tlabel: AjxMsg.xformRepeatRemove, \n\t\t\t//width:20,\n\t\t\tcssStyle:\"margin-left:20px;\",\n\t\t\tonActivate:function (event) {\n\t\t\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\t\t\trepeatItem.removeRowButtonClicked(this.getParentItem().instanceNum);\n\t\t\t},\n\t\t\tvisibilityChecks:[Repeat_XFormItem.haveAnyRows],\n\t\t\tvisibilityChangeEventSources:[this.getRef()]\n\t\t};\n\t\tvar label = this.getInheritedProperty(\"removeButtonLabel\");\n\t\tif(label)\n\t\t\tthis.removeButton.label = label;\n\t\t\n\t\tvar width = this.getInheritedProperty(\"removeButtonWidth\");\t\t\n\t\tif (width)\n\t\t\tthis.removeButton.width = width ;\t\t\n\t\t\t\n\t\tvar cssStyle = this.getInheritedProperty(\"removeButtonCSSStyle\");\n\t\tif (cssStyle) \n\t\t\tthis.removeButton.cssStyle = cssStyle ;\t\n\t}\n\treturn this.removeButton;\t\n}\n\nRepeat_XFormItem.prototype.getAddButton = function () {\n\tif(!this.addButton) {\n\t\tvar showAddOnNextRow = this.getInheritedProperty(\"showAddOnNextRow\");\n\t\tthis.addButton = {\n\t\t\tref:\".\",\n\t\t\ttype:_BUTTON_, \n\t\t\tlabel: AjxMsg.xformRepeatAdd, \n\t\t\tonActivate:function (event) {\n\t\t\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\t\t\trepeatItem.addRowButtonClicked(this.getParentItem().instanceNum);\n\t\t\t},\n\t\t\tvisibilityChecks:[Repeat_XFormItem.isAddButtonVisible],\n\t\t\tvisibilityChangeEventSources:[this.getRefPath()],\n\t\t\tforceUpdate:true\n\t\t};\n\t\tvar label = this.getInheritedProperty(\"addButtonLabel\");\n\t\tif(label)\n\t\t\tthis.addButton.label = label;\t\t\t\n\t\t\n\t\tvar width = this.getInheritedProperty(\"addButtonWidth\");\t\t\n\t\tif (width)\n\t\t\tthis.addButton.width = width ;\n\n        var cssStyle = this.getInheritedProperty(\"addButtonCSSStyle\");\n\t\tif (cssStyle)\n\t\t\tthis.addButton.cssStyle = cssStyle ;\n\n\t\tif(showAddOnNextRow) {\n\t\t\tthis.addButton.colSpan = \"*\";\n\t\t}\n\t\t\t\n\t}\n\treturn this.addButton;\t\n}\n\nRepeat_XFormItem.prototype.moveUpButton = {\n\ttype:_BUTTON_, \n\tlabel:\"^\", \n\twidth:20,\n\tcssStyle:\"margin-left:20px;\",\n\tonActivate:function (event) {\n\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\trepeatItem.moveUpButtonClicked(this.getParentItem().instanceNum);\n\t}\n}\nRepeat_XFormItem.prototype.moveDownButton = {\n\tref:\".\",\n\ttype:_BUTTON_, \n\tlabel:\"v\", \n\twidth:20,\n\tonActivate:function (event) {\n\t\tvar repeatItem = this.getParentItem().getParentItem();\n\t\trepeatItem.moveDownButtonClicked(this.getParentItem().instanceNum);\n\t},\n\tforceUpdate:true\n}\n\nRepeat_XFormItem.groupVisibilityCheck = function () {\n\treturn ( (this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()) || (this.instanceNum==0));\t\n}\n\nRepeat_XFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\n\tif (items.length == 1 && items[0].items) {\n\t\tvar group = items[0];\n\t} else {\n\t\tvar group = {\t\n\t\t\t\tref: this.getRef(), \n\t\t\t\tfromRepeat:true, \n//\t\t\t\tuseParentTable:true,\n\t\t\t\ttype:_GROUP_, \n\t\t\t\tnumCols: items.length,\n\t\t\t\titems:[].concat(items),\n\t\t\t\tvisibilityChangeEventSources:[this.getRefPath()],\n\t\t\t\tvisibilityChecks:[function() {\n\t\t\t\t\treturn (this.instanceNum==0 || (this.instanceNum < this.getNumberToShow()) || (this.instanceNum < this.getInstanceCount()));\n\t\t\t\t}]\n\t\t\t};\n\t}\n\t\n\tgroup.colSpan = 1;\n\n\t//Check if we have an explicit condition defined for Remove button\n\t\n\t// add the add and remove buttons to the original items array, if appropriate\n\tif (this.getShowRemoveButton()) {\n\t\tvar button = this.getRemoveButton();\n\t\tgroup.items[group.items.length] = button;\n\t\tgroup.numCols++;\t\t\t\n\t}\n\tif (this.getShowAddButton()) {\n\t\tvar button = this.getAddButton();\n\t\n\t\tvar showAddOnNextRow = this.getInheritedProperty(\"showAddOnNextRow\");\n\t\tgroup.items[group.items.length] = button;\n\t\tif(showAddOnNextRow) {\n\t\t\tgroup.items[group.items.length] = \n\t\t\t{type:_SPACER_, colSpan:(group.numCols-1), \n\t\t\t\tvisibilityChecks:[Repeat_XFormItem.isLastRow], \n\t\t\t\tvisibilityChangeEventSources:[this.getRefPath()]\n\t\t\t};\n\t\t} else {\n\t\t\tgroup.numCols++;\n\t\t}\n\t}\n\tif (this.getShowMoveUpButton()) {\n\t\tgroup.items[group.items.length] = this.getMoveUpButton();\n\t\tgroup.numCols++;\n\t}\n\tif (this.getShowMoveDownButton()) {\n\t\tgroup.items[group.items.length] = this.getMoveDownButton();\n\t\tgroup.numCols++;\n\t}\n\n\t// save off the original items in the group\n\tthis.__originalItems = group;\n\t// and reset the items array\n\tthis.items = [];\n}\n\nRepeat_XFormItem.prototype.makeRepeatInstance = function() {\n\t// NOTE: We always append the new items to the end, which is OK,\n\t//\t\t\tsince if a *data value* is inserted in the middle,\n\t//\t\t\teach row will show the proper thing when the update script is called\n\t//\n\t//  NOTE: XFORMS SPEC REQUIRES REPEAT ITEMS TO START AT 1, this implementation starts at 0!!!\n\t//\n\tvar originalGroup = this.__originalItems;\n\tvar numCols = this.getNumCols();\n\tvar newItems = [];\n\t\n\tfor (var i = 0; i < numCols; i++) {\n\t\tvar instanceNum = this.items.length;\n\t\n\t\toriginalGroup.refPath = this.getRefPath() + \"[\" + instanceNum + \"]\";\n\t\n\t\t// initialize the originalGroup and its cloned items\n\t\tgroupItem = this.getForm().initItem(originalGroup, this);\n\t\tgroupItem.instanceNum = instanceNum;\n\t\n\t\tnewItems.push(groupItem);\n\t\tthis.items.push(groupItem);\n\t}\t\n\treturn newItems;\n}\n\n\nRepeat_XFormItem.prototype.outputHTML = function (html,   currentCol) {\n\t// output one item to start\n\t//\tall other items will be output dynamically\n\tthis.makeRepeatInstance();\n\tthis.getForm().outputItemList(this.items, this, html, this.getNumCols(), 0);\n}\n\n\nRepeat_XFormItem.prototype.updateElement = function (value) {\n\tvar form = this.getForm();\n\t\n\tvar element = this.getElement();\n\tif (value == null || value === \"\") value = [];\n\tvar itemsToShow = Math.max(value.length, this.getNumberToShow());\n\tvar slotsPresent = this.items.length;\n\n\tvar masterId = this.getId();\n\tif (itemsToShow > slotsPresent) {\n\t\tvar missingElementCount = (itemsToShow - slotsPresent);\n\t\t// create some more slots and show them\n\n\t\tvar table = element.getElementsByTagName(\"table\")[0];\n\t\tvar tbody = element.getElementsByTagName(\"tbody\")[0];\n\t\n\t\tvar tempDiv;\t\n\t\tif (AjxEnv.isIE) {\n\t\t\ttempDiv = this.createElement(\"temp\",null,\"div\",\"\");\n\t\t\ttempDiv.display = \"none\";\n\t\t}\n\t\twhile (this.items.length < itemsToShow) {\n\t\t\tvar newItems = this.makeRepeatInstance(this);\n\t\t\tvar html = new AjxBuffer();\n\t\t\tform.outputItemList(newItems, this, html,  this.getNumCols(), 0, true);\n\t\t\tif (AjxEnv.isIE) {\n\t\t\t\ttempDiv.innerHTML = \"<table>\" + html.toString() + \"</table>\";\n\t\t\t\tvar rows = tempDiv.getElementsByTagName(\"table\")[0].rows;\n\t\t\t\tfor (var r = 0; r < rows.length; r++) {\n\t\t\t\t\ttbody.appendChild(rows[r]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar row = table.insertRow(-1);\n\t\t\t\trow.innerHTML = html;\n\t\t\t}\n\t\t\tvar cnt = newItems.length;\n\t\t\tfor(var i = 0; i <cnt; i++) {\n\t\t\t\tvar updateMethod = newItems[i].getUpdateVisibilityMethod();\n\t\t\t\tif(updateMethod)\n\t\t\t\t\tupdateMethod.call(newItems[i]);\n\t\t\t\t\n\t\t\t\tupdateMethod = newItems[i].getUpdateEnabledDisabledtMethod();\n\t\t\t\tif(updateMethod)\n\t\t\t\t\tupdateMethod.call(newItems[i]);\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\t/*var updateMethod = this.getUpdateVisibilityMethod();\n\tif(updateMethod)\n\t\tupdateMethod.call(this);\n\tupdateMethod = this.getUpdateEnabledDisabledtMethod();\n\tif(updateMethod)\n\t\tupdateMethod.call(this);\t*/\n\t\n\tXFormItem.prototype.updateElement.call(this, value);\n}\n\nRepeat_XFormItem.prototype.addRowButtonClicked = function (instanceNum) {\n\tvar path = this.getRefPath();\n\tthis.getModel().addRowAfter(this.getInstance(), path, instanceNum);\n}\n\nRepeat_XFormItem.prototype.removeRowButtonClicked = function (instanceNum) {\n\tvar form = this.getForm();\n\tif (this.getOnRemoveMethod() ) {\n\t\tthis.getOnRemoveMethod().call(this, instanceNum, form)\n\t} else {\n\t\tvar path = this.getRefPath();\n\t\tthis.getModel().removeRow(this.getInstance(), path, instanceNum);\n\t}\n\tthis.items[instanceNum].clearError();\n//\tthis.getForm().setIsDirty(true,this);\n\t\n\tvar event = new DwtXFormsEvent(form, this, this.getInstanceValue());\n\tform.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, event);\n}\n\nRepeat_XFormItem.prototype.getOnRemoveMethod = function() {\n\treturn this.cacheInheritedMethod(\"onRemove\",\"$onRemove\",\"index,form\");\n}\n\n\n/**\n * @class defines XFormItem type _REPEAT_GRID_\n * @constructor\n * \n * @private\n */\nRepeat_Grid_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_REPEAT_GRID_\", \"repeat_grid\", Repeat_Grid_XFormItem, Repeat_XFormItem)\nRepeat_Grid_XFormItem.prototype.showRemoveButton = false;\nRepeat_Grid_XFormItem.prototype.showAddButton = false;\nRepeat_Grid_XFormItem.numCols = 2;\n\n\n\n\n\n/**\n * @class defines XFormItem type _COMPOSITE_\n * @constructor\n * \n * @private\n */\nComposite_XFormItem = function() {\n\tGroup_XFormItem.call(this);\n}\nXFormItemFactory.createItemType(\"_COMPOSITE_\", \"composite\", Composite_XFormItem, Group_XFormItem)\n\n//\ttype defaults\nComposite_XFormItem.prototype.useParentTable = false;\nComposite_XFormItem.prototype.tableCssClass = \"xform_composite_table\";\nComposite_XFormItem.prototype.focusable = false;\n\nComposite_XFormItem.prototype.initializeItems = function () {\n\tvar items = this.getItems();\n\tif (items == null) return;\n\t\n\t// make sure the numCols is defined (default to the number of items in the composite)\n\tif (this.numCols == null) this.numCols = items.length;\n\t\n\t// actually instantiate them as formItems\n\tthis.items = this.getForm().initItemList(items, this);\n}\n\nComposite_XFormItem.onFieldChange = function(value, event, form) {\n\tif (this.getParentItem() && this.getParentItem().getOnChangeMethod()) {\n\t\treturn this.getParentItem().getOnChangeMethod().call(this, value, event, form);\n\t} else {\n\t\treturn this.setInstanceValue(value);\n\t}\n}\n\n\nSetupGroup_XFormItem = function() {\n}\nSetupGroup_XFormItem.prototype.width=\"100%\";\nXFormItemFactory.createItemType(\"_SETUPGROUP_\", \"setupgroup\", SetupGroup_XFormItem, Composite_XFormItem)\nSetupGroup_XFormItem.prototype.initializeItems = function () {\n    var headerLabels = this.getInheritedProperty(\"headerLabels\");\n    var contentItems = this.getInheritedProperty(\"contentItems\");\n    this.items = [];\n    this.width=\"100%\";\n\n    if (headerLabels.length!= 0 && headerLabels.length == contentItems.length) {\n        var firstlabel = 1;\n        var isLast;\n        for (var i = 0; i < headerLabels.length; i++) {\n            if (i != headerLabels.length - 1) {\n                isLast = false;\n            } else {\n                isLast = true;\n            }\n            var result =  this.constructSingleGroup(headerLabels[i], contentItems[i], firstlabel, isLast);\n            if (result != undefined) {\n                this.items.push(result);\n                firstlabel ++;\n            }\n        }\n    }\n    this.numCols = this.items.length;\n    if (this.numCols > 1)  {\n        var colSize =Math.floor(100/(this.numCols));\n        var lastCol = 100 - colSize* (this.numCols - 1);\n        var colArr = [];\n        for (var i = 0; i < this.numCols - 1; i ++) {\n            colArr.push(colSize + \"%\");\n        }\n        colArr.push(lastCol + \"%\");\n        this.colSizes = colArr;\n    }\n    Composite_XFormItem.prototype.initializeItems.call(this);\n}\n\nSetupGroup_XFormItem.prototype.constructSingleGroup = function (headerLabel, contentItem, index, isLast) {\n    var currentGroup = {type:_GROUP_, numCols:2, width: \"100%\", valign:_TOP_, items:[]};\n    var labelMessage = (index) + \"  \" + headerLabel;\n    /*Header Start*/\n    var headerItems;\n    if (isLast) {\n        headerItems = {type:_OUTPUT_, colSpan: \"*\", value: labelMessage, cssClass: \"ZaHomeSetupHeader ZaHomeSetupTitle\"};\n    } else {\n        headerItems = {type:_GROUP_, colSpan: \"*\", numCols:3, cssClass: \"ZaHomeSetupHeader\",\n            items:[\n                {type:_OUTPUT_, value: labelMessage, cssClass: \"ZaHomeSetupTitle\"},\n                {type:_SPACER_, width:\"5px\", colSpan:1},\n                {type:_AJX_IMAGE_, src:\"SetupArrow\"}\n            ]\n        };\n    }\n\n    currentGroup.items.push(headerItems);\n    /*Body Start*/\n    var singleContentItem;\n    var isAdd = false;\n    var labelNumber = 1;\n    var currentLabel ;\n    for (var i = 0; i < contentItem.length; i++) {\n        if (contentItem[i] && contentItem[i].value) {\n            isAdd = true;\n            currentLabel = labelNumber + \".\";\n            labelNumber ++;\n            singleContentItem = {type:_OUTPUT_, label: currentLabel, value: contentItem[i].value, onClick: contentItem[i].onClick, labelCssClass:\"ZaHomeLinkItemLabel\", containerCssClass:\"ZaLinkedItem\"};\n            currentGroup.items.push(singleContentItem);\n        }\n    }\n\n    if (!isAdd)\n        return undefined;\n    else\n        return currentGroup;\n}\n//Composite_XFormItem.prototype.getErrorContainer = function () {\n//\t\n//}\n\n/**\n * @class defines XFormItem type _DATE_\n * @constructor\n * \n * @private\n */\nDate_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATE_\", \"date\", Date_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nDate_XFormItem.prototype.DATE_MONTH_CHOICES = [\n\t\t\t\t{value:1, label:I18nMsg.monthJanMedium},\n\t\t\t\t{value:2, label:I18nMsg.monthFebMedium},\n\t\t\t\t{value:3, label:I18nMsg.monthMarMedium},\n\t\t\t\t{value:4, label:I18nMsg.monthAprMedium},\n\t\t\t\t{value:5, label:I18nMsg.monthMayMedium},\n\t\t\t\t{value:6, label:I18nMsg.monthJunMedium},\n\t\t\t\t{value:7, label:I18nMsg.monthJulMedium},\n\t\t\t\t{value:8, label:I18nMsg.monthAugMedium},\n\t\t\t\t{value:9, label:I18nMsg.monthSepMedium},\n\t\t\t\t{value:10, label:I18nMsg.monthOctMedium},\n\t\t\t\t{value:11, label:I18nMsg.monthNovMedium},\n\t\t\t\t{value:12, label:I18nMsg.monthDecMedium}\n\t\t\t];\nDate_XFormItem.prototype.DATE_DAY_CHOICES = [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\n\t\t\t\t\t\t  \"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\n\t\t\t\t\t\t  \"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"];\nDate_XFormItem.prototype.numCols = 3;\nDate_XFormItem.prototype.items = [\n\t{\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\trelevantBehavior:_PARENT_,\n\t\tchoices: Date_XFormItem.prototype.DATE_MONTH_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + (newValue.getMonth() + 1);\n\t\t},\n\t\telementChanged:function (monthStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar month = parseInt(monthStr);\n\t\t\tif (!isNaN(month)) {\n\t\t\t\tmonth -= 1;\n\t\t\t\tcurrentDate.setMonth(month);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\t},\n\t{\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\trelevantBehavior:_PARENT_,\n\t\tlabelLocation:_NONE_,\n\t\tchoices: Date_XFormItem.prototype.DATE_DAY_CHOICES,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + newValue.getDate();\n\t\t},\n\t\telementChanged: function (dateStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar date = parseInt(dateStr);\n\t\t\tif (!isNaN(date)) {\n\t\t\t\tcurrentDate.setDate(date);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\t},\n\t{\ttype:_TEXTFIELD_, \n\t\tref:\".\",\n\t\trelevantBehavior:_PARENT_,\n\t\twidth:45,\n\t\tlabelLocation:_NONE_,\n\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\treturn \"\" + newValue.getFullYear();\n\t\t},\n\t\telementChanged: function (yearStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other field???\n\t\t\n\t\t\tvar year = parseInt(yearStr);\n\t\t\tif (!isNaN(year)) {\n\t\t\t\tcurrentDate.setYear(year);\n\t\t\t}\n\t\t\tthis.getForm().itemChanged(this.getParentItem(), currentDate, event);\n\t\t}\n\n\t}\n];\n\n\n\n/**\n * @class defines XFormItem type _TIME_\n * @constructor\n * \n * @private\n */\nTime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TIME_\", \"time\", Time_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nTime_XFormItem.prototype.numCols = 3;\nTime_XFormItem.prototype.TIME_HOUR_CHOICES = [\"1\",\"2\",\"3\",\"4\",\"5\", \"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"];\nTime_XFormItem.prototype.TIME_MINUTE_CHOICES = [\"00\",\"05\",\"10\",\"15\",\"20\",\"25\", \"30\",\"35\",\"40\",\"45\",\"50\",\"55\"];\nTime_XFormItem.prototype.TIME_AMPM_CHOICES = [I18nMsg.periodAm,I18nMsg.periodPm];\n\n\nTime_XFormItem.prototype.items = [\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tchoices: Time_XFormItem.prototype.TIME_HOUR_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar hours = \"\" + (newValue.getHours() % 12);\n\t\t\tif (hours == \"0\") hours = \"12\";\n\t\t\treturn hours;\n\t\t},\n\t\telementChanged:function (hoursStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\t\t\tvar hours = parseInt(hoursStr);\n\t\t\tif (!isNaN(hours)) {\n\t\t\t\tif (hours == 12) hours = 0;\n\t\t\t\tvar wasPM = (currentDate.getHours() > 11);\n\t\t\t\tif (wasPM) hours += 12;\n\t\t\t\tthis.__dummyDate.setHours(hours);\n\t\t\t}\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod != null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(),this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t},\n\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tchoices: Time_XFormItem.prototype.TIME_MINUTE_CHOICES,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar minutes = newValue.getMinutes();\n\t\t\tminutes = Math.round(minutes / 5) * 5;\n\t\t\tminutes = (minutes < 10 ? \"0\" + minutes : \"\" + minutes);\n\t\t\treturn minutes;\n\t\t},\n\t\telementChanged:function (minutesStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\t\t\n\t\t\tvar minutes = parseInt(minutesStr);\n\t\t\tif (!isNaN(minutes)) {\n\t\t\t\tthis.__dummyDate.setMinutes(minutes);\n\t\t\t}\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod!= null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(), this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t},\n\t\n\t{\t\n\t\ttype:_SELECT1_, \n\t\tref:\".\",\n\t\tchoices: Time_XFormItem.prototype.TIME_AMPM_CHOICES,\n\t\twidth:50,\n\t\tvalign:_MIDDLE_,\n\t\tlabelLocation:_NONE_,\n\t\tgetDisplayValue:function (newValue) {\n\t\t\tif (!(newValue instanceof Date)) newValue = new Date();\n\t\t\tvar hours = newValue.getHours();\n\t\t\tif (hours > 11) return I18nMsg.periodPm;\n\t\t\treturn I18nMsg.periodAm;\n\t\t},\n\t\telementChanged:function (ampmStr, currentDate, event) {\n\t\t\tif (currentDate == null) currentDate = new Date();\t//??? should get values of other fields???\n\t\t\tif (this.__dummyDate == null) {\n\t\t\t\tthis.__dummyDate = new Date();\n\t\t\t}\n\t\t\tthis.__dummyDate.setTime(currentDate.getTime());\n\n\t\t\tvar isPM = (ampmStr == I18nMsg.periodPm);\n\t\t\tvar hours = currentDate.getHours() % 12;\n\t\t\t\n\t\t\tthis.__dummyDate.setHours(hours + (isPM ? 12 : 0));\n\t\t\tvar parentItem = this.getParentItem();\n\t\t\tvar elementChangedMethod = parentItem.getElementChangedMethod();\n\t\t\tif (elementChangedMethod!= null) {\n\t\t\t\telementChangedMethod.call(this.getParentItem(), this.__dummyDate, currentDate, event);\n\t\t\t} else {\n\t\t\t\tthis.getForm().itemChanged(this.getParentItem(), this.__dummyDate, event);\n\t\t\t}\n\t\t}\n\t}\n];\n\n\n\n\n/**\n * @class defines XFormItem type _DATETIME_\n * @constructor\n * \n * @private\n */\nDatetime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DATETIME_\", \"datetime\", Datetime_XFormItem, Composite_XFormItem)\n\nDatetime_XFormItem._datetimeFormatToItems = function(format, dateItem, timeItem) {\n\tvar items = [];\n\tvar pattern = /{(\\d+),\\s*(date|time)}/;\n\tvar index = 0;\n\twhile ((index = format.search(pattern)) != -1) {\n\t\tif (index > 0) {\n\t\t\tvar item = { type: _OUTPUT_, value: format.substring(0,index), valign: _CENTER_ };\n\t\t\titems.push(item);\n\t\t\tformat = format.substring(index);\n\t\t}\n\t\tvar result = pattern.exec(format);\n\t\titems.push(result[2] == \"date\" ? dateItem : timeItem);\n\t\tformat = format.substring(result[0].length);\n\t}\n\tif (format.length > 0) {\n\t\tvar item = { type:_OUTPUT_, value: format };\n\t\titems.push(item);\n\t}\n\treturn items;\n}\n\n//\ttype defaults\nDatetime_XFormItem.prototype.numCols = 3;\nDatetime_XFormItem.prototype.items = Datetime_XFormItem._datetimeFormatToItems(\n\tAjxMsg.xformDateTimeFormat,\n\t{type:_DATE_, ref:\".\", labelLocation:_NONE_},\n\t{type:_TIME_, ref:\".\", labelLocation:_NONE_}\n);\n\n\n/**\n * @class defines XFormItem type _WIDGET_ADAPTOR_\n *\tAn adaptor for using any random (non-DWT) widget in an xform\n *\tNOTE: the generic implementation assumes:\n *\t\t\t1) you'll create a method called \"constructWidget()\" which will construct the appropriate widget\n *\t\t\t2) the widget has a function \"insertIntoXForm(form, item, element)\"\n *\t\t\t\t(overide \"this.insertWidget\" to change)\n *\t\t\t3) the widget has a function \"updateInXForm(form, item, value, element)\"\n *\t\t\t\t(overide \"this.updateWidget\" to change)\n *\n * @constructor\n * \n * @private\n */\nWidgetAdaptor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_WIDGET_ADAPTOR_\", \"widget_adaptor\", WidgetAdaptor_XFormItem, XFormItem)\n\n//\ttype defaults\nWidgetAdaptor_XFormItem.prototype.writeElementDiv = true;\nWidgetAdaptor_XFormItem.prototype.focusable = false;\n//\tmethods\n\n// implement the following to actually construct the instance of your widget\nWidgetAdaptor_XFormItem.prototype.constructWidget = function () {}\n\n\n//\n//\tinsertElement must guarantee that each element is only inserted ONCE\n//\nWidgetAdaptor_XFormItem.prototype.insertElement = function () {\n\tif (!this.__alreadyInserted) {\n\t\tthis.__alreadyInserted = true;\n\t\t\n\t\t// try to construct a widget\n\t\tvar widget = this.constructWidget();\n\n\t\t// if we didn't get one, there's nothing to do here\n\t\tif (widget == null) return;\n\n\t\t// otherwise insert it into the form!\n\t\tthis.widget = widget;\n\t\tthis.insertWidget(this.getForm(), this.widget, this.getElement());\n\t}\n}\n\nWidgetAdaptor_XFormItem.prototype.showElement = function (id) {\n\tthis.insertElement();\n\tXForm.prototype.showElement.call(this, id);\n}\n\nWidgetAdaptor_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.widget.insertIntoXForm(form, this, element);\n}\n\nWidgetAdaptor_XFormItem.prototype.updateElement = function(newValue) {\n\tif (this.__alreadyInserted) \n\t\tthis.updateWidget(newValue);\n}\nWidgetAdaptor_XFormItem.prototype.updateWidget = function (newValue) {\n\tthis.widget.updateInXForm(this.getForm(), this, newValue, this.getElement());\n}\n\n\n\n\n\n/**\n * @class defines XFormItem type _DWT_ADAPTOR_\"\n *\n *\tAn adaptor for using any random DWT widget in an xform\n *\n *\tNOTE: the generic implementation assumes:\n *\t\t\t1) you'll create a method called \"constructWidget()\" which will construct the appropriate widget\n *\t\t\t2) you'll adapt \"insertWidget(form,  widget, element)\" to insert the widget properly\n *\t\t\t3) you'll adapt \"updateWidget(newValue)\" to update the value properly\n * @constructor\n * \n * @private\n */\nDwt_Adaptor_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_ADAPTOR_\", \"dwt_adaptor\", Dwt_Adaptor_XFormItem, WidgetAdaptor_XFormItem)\n\n//\ttype defaults\nDwt_Adaptor_XFormItem.prototype.focusable = false;\n//\tmethods\n\nDwt_Adaptor_XFormItem.prototype.setElementEnabled = function(enabled) {\n\tWidgetAdaptor_XFormItem.prototype.setElementEnabled.call(this, enabled);\n\tif (this.widget) {\n\t\tthis.widget.setEnabled(enabled);\n\t}\n\tthis._enabled = enabled;\n}\n\n// implement the following to actually construct the instance of your widget\nDwt_Adaptor_XFormItem.prototype.constructWidget = function () {}\n\n\nDwt_Adaptor_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, element);\n}\n\nDwt_Adaptor_XFormItem.prototype.updateWidget = function (newValue) {}\n\nDwt_Adaptor_XFormItem.prototype.getDwtSelectItemChoices = function () {\n\tif (this.__selOption != null) return this.__selOptions;\n\t\n\tvar selectOptions = null;\n\tvar choices = this.getChoices();\n\tif (choices != null) {\n\t\tvar selectOptions = new Array(choices.length);\n\t\tfor (var i = 0; i < choices.length; i++) {\n\t\t\tvar choice = choices[i];\n\t\t\tvar choiceValue = (choice instanceof Object ? choice.value : choice);\n\t\t\tvar choiceLabel = (choice instanceof Object ? choice.label : choice);\n\t\t\tselectOptions[i] = new DwtSelectOptionData(choiceValue, choiceLabel);\n\t\t}\n\t}\n\tthis.__selOptions = selectOptions;\n\treturn this.__selOptions;\n};\n\nDwt_Adaptor_XFormItem.prototype._addCssStylesToDwtWidget = function () {\n\tvar style = this.getCssStyle();\n\tif (style != null){\n\t\tvar styleArr = style.split(\";\");\n\t\tvar el = this.widget.getHtmlElement();\n\t\tvar kp;\n\t\tfor (var i = 0 ; i < styleArr.length ; ++i ){\n\t\t\tkp = styleArr[i].split(\":\");\n\t\t\tif (kp.length > 0){\n\t\t\t\tvar key = kp[0];\n\t\t\t\tif (key != null) {\n\t\t\t\t\tkey = key.replace(/^(\\s)*/,\"\");\n\t\t\t\t}\n\t\t\t\tif (key == \"float\"){\n\t\t\t\t\tkey = (AjxEnv.isIE)? \"styleFloat\": \"cssFloat\";\n\t\t\t\t}\n\t\t\t\tvar val = kp[1];\n\t\t\t\tif (val != null) {\n\t\t\t\t\tel.style[key] = val.replace(/^(\\s)*/,\"\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n/**\n * @class defines XFormItem type  _DWT_BUTTON_\n * Adapts a DwtButton to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Button_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_BUTTON_\", \"dwt_button\", Dwt_Button_XFormItem, Dwt_Adaptor_XFormItem)\nDwt_Button_XFormItem.estimateMyWidth = function (label,withIcon,extraMargin) {\n    var width;\n    if(ZaZimbraAdmin.LOCALE==\"ja\"||ZaZimbraAdmin.LOCALE==\"ko\"||ZaZimbraAdmin.LOCALE==\"zh_CN\"||ZaZimbraAdmin.LOCALE==\"zh_HK\")\n         width = (String(label).length)*XForm.FONT_WIDTH1 + (String(label).length)*XForm.FONT_WIDTH2 + 14;\n    else\n\t     width = (String(label).length/2)*XForm.FONT_WIDTH1 + (String(label).length/2)*XForm.FONT_WIDTH2 + 14;\n\n    if(withIcon)\n\t\twidth = width + 24;\n\t\n\tif(extraMargin>0)\n\t\twidth = width + extraMargin;\t\n\treturn [width,\"px\"].join(\"\");\n}\n//\ttype defaults\nDwt_Button_XFormItem.prototype.labelLocation = DwtLabel.IMAGE_LEFT | DwtLabel.ALIGN_CENTER;\nDwt_Button_XFormItem.prototype.writeElementDiv = false;\nDwt_Button_XFormItem.prototype.autoPadding= true;\n//\tmethods\n\nDwt_Button_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n};\n\n// implement the following to actually construct the instance of your widget\nDwt_Button_XFormItem.prototype.constructWidget = function () {\n\tvar widget = this.widget = new DwtButton(this.getForm(), this.getLabelLocation(), this.getCssClass());\n\tvar height = this.getHeight();\n\tvar width = this.getWidth();\n\t\n\tvar el = null;\n\tif (width != null || height != null){\n\t\tel = widget.getHtmlElement();\n\t\tif (width != null) el.style.width = width;\n\t\tif (height != null) el.style.height = height;\n\t} \n\tthis._addCssStylesToDwtWidget();\n\t\n\tvar icon = this.getInheritedProperty(\"icon\");\n\tif(icon != null) {\n\t\twidget.setImage(icon);\n\t}\n\t\n\tvar isToolTip = false;\t\n\tvar toolTipContent = this.getInheritedProperty(\"toolTipContent\");\n\tif(toolTipContent != null) {\n\t\twidget.setToolTipContent(toolTipContent);\n\t\tisToolTip = true;\n\t}\n\t\n        var labelContent = this.getLabel();\n\t\n\ttry{\n\t\tvar size = Dwt.getSize(this.getContainer());\n\t\tif(labelContent){\n\t\t\tvar totalCharWidth = AjxStringUtil.getWidth(labelContent);\n\t\t\tvar textLength;\n\t\t\tif(icon){\t\n\t\t\t\ttextLength = size.x - 42; // exclude icons, paddings, margin, borders\n\t\t\t}\n\t\t\telse{\n\t\t\t\ttextLength = size.x - 22; // exclude paddings, margin, borders\n\t\t\t}\n\t\t\t\n\t\t\tif( (textLength > 0) && (totalCharWidth > textLength)){\n\t\t\t\tif(!isToolTip){\n                                \twidget.setToolTipContent(labelContent);\n                                }\n\n\t\t\t\tvar totalNumber = labelContent.length;\n\t\t\t\tvar textLength = textLength - AjxStringUtil.getWidth(\"...\"); // three '.'\n\t\t\t\tvar maxNumberOfLetters= Math.floor(textLength * totalNumber / totalCharWidth);\n\t\t\t\tif(textLength > 0){\n\t\t\t\t\tlabelContent = labelContent.substring(0, maxNumberOfLetters) + \"...\";\n\t\t\t\t}\n\t\t\t}\n\t\t\t \n\t\t\tel =  widget.getHtmlElement();\n            var tableEl = el.firstChild;\n            var isAutoPadding = this.getInheritedProperty(\"autoPadding\");\n            if(!tableEl.style.width && isAutoPadding){\n                 tableEl.style.width = \"100%\";\n            }\n\n\t\t}\t\t\n\t}catch(ex){\n\t}\n\n\twidget.setText(labelContent);\n\n\tvar onActivateMethod = this.getOnActivateMethod();\n\tif (onActivateMethod != null) {\n\t\tvar ls = new AjxListener(this, onActivateMethod);\n\t\twidget.addSelectionListener(ls);\n\t}\n\n\tif (this._enabled !== void 0) {\n\t\t//this.widget = widget;\n\t\tthis.setElementEnabled(this._enabled);\n\t}\n\t\n\treturn widget;\n}\n\nDwt_Button_XFormItem.prototype.getWidget =\nfunction (){\n\treturn this.widget ;\n}\n\n/**\n * @class defines XFormItem type _DWT_SELECT_\n * Adapts a DwtSelect to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Select_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_SELECT_\", \"dwt_select\", Dwt_Select_XFormItem, Dwt_Adaptor_XFormItem)\n\n//\ttype defaults\nDwt_Select_XFormItem.prototype.writeElementDiv = false;\n//\tmethods\n\nDwt_Select_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n}\n\nDwt_Select_XFormItem.prototype.constructWidget = function () {\n\tvar choices = this.getDwtSelectItemChoices(this.getChoices());\n\n\tvar widget = this.widget = new DwtSelect(this.getForm(), choices);\n\tvar height = this.getHeight();\n\tvar width = this.getWidth();\n\tif (width != null || height != null){\n\t\tvar el = widget.getHtmlElement();\n\t\tif (width != null) el.style.width = width;\n\t\tif (height != null) el.style.height = height;\n\t} \n\tthis._addCssStylesToDwtWidget();\n\n\tvar onChangeFunc = new Function(\"event\", \n\t\t\t\"var widget = event._args.selectObj;\\r\"\n\t\t  + \"value = event._args.newValue; \" + this.getExternalChangeHandler()\n\t);\n\tvar ls = new AjxListener(this.getForm(), onChangeFunc);\n\twidget.addChangeListener(ls);\n\n\tif (this._enabled !== void 0) {\n\t\t//this.widget = widget;\n\t\tthis.setElementEnabled(this._enabled);\n\t}\n\treturn widget;\n}\n\nDwt_Select_XFormItem.prototype.updateWidget = function (newValue) {\n\tthis.widget.setSelectedValue(newValue);\n}\n\nDwt_Select_XFormItem.prototype.setElementEnabled = function (enable) {\n\tthis._enabled = enable;\n\tif (this.widget == null) return;\n\tif (enable) {\n\t\tthis.widget.enable();\n\t} else {\n\t\tthis.widget.disable();\n\t}\n};\n\n/**\t\n * @class defines XFormItem type _DWT_COLORPICKER_\n * Adapts a DwtButtonColorPicker to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_ColorPicker_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_COLORPICKER_\", \"dwt_colorpicker\", Dwt_ColorPicker_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_ColorPicker_XFormItem.prototype.cssStyle = \"width:80px;\";\nDwt_ColorPicker_XFormItem.prototype.nowrap = false;\nDwt_ColorPicker_XFormItem.prototype.labelWrap = true;\nDwt_ColorPicker_XFormItem.prototype.constructWidget = function () {\n    var params = {\n        parent: this.getForm(),\n        allowColorInput: true,\n        noFillLabel: ZaMsg.bt_reset\n    };\n    var widget = new DwtButtonColorPicker (params) ;\n\twidget.setActionTiming(DwtButton.ACTION_MOUSEDOWN);\n\n    var buttonImage = this.getInheritedProperty(\"buttonImage\") || \"FontColor\";\n    widget.setImage(buttonImage);\n\twidget.showColorDisplay(true);\n\twidget.setToolTipContent(ZMsg.xformFontColor);\n\tif (this.getInstanceValue() != null) {\n\t\twidget.setColor(this.getInstanceValue());       \n\t}\n//\twidget.addSelectionListener(new AjxListener(this, this._colorOnChange)); //it cause the dwt color picker event handller is not invoked correctly\n    widget.__colorPicker.addSelectionListener(new AjxListener(this, this._colorOnChange)) ;\n\treturn widget;\n}\n\nDwt_ColorPicker_XFormItem.prototype.updateWidget = function (newValue) {\n\tif(!this.widget)\n\t\treturn;\n\t\t\n\t//if(window.console && window.console.log) console.log (\"new color = \" + newValue) ;\n\tif (newValue != null) {\n\t\tthis.widget.setColor(newValue);\n\t}else { //ensure the empty color can be set in the UI\n        this.widget.setColor(\"\");            \n    }\n};\n\nDwt_ColorPicker_XFormItem.prototype._colorOnChange = function (event) {\n\tvar value = event.detail;\n    \n    var elementChanged = this.getElementChangedMethod();\n\tif (elementChanged) {\n\t\telementChanged.call(this,value, this.getInstanceValue(), event);\n\t}\n\tvar onChangeFunc = this.getOnChangeMethod();\n\tif (onChangeFunc) {\n\t\tonChangeFunc.call(this, value, event, this.getForm());\t\n\t}\n};\n\n/**\t\n * @class defines XFormItem type _DWT_DATE_\n * Adapts a DwtCalendar to work with the XForm\n * @constructor\n * \n * @private\n */\nDwt_Date_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_DATE_\", \"dwt_date\", Dwt_Date_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_Date_XFormItem.prototype.cssClass =  \"xform_dwt_date\";\n\n\n//\tmethods\n\nDwt_Date_XFormItem.prototype.constructWidget = function () {\n\tvar firstDayOfWeek = this.getInheritedProperty(\"firstDayOfWeek\");\n\tvar widget = new DwtButton(this.getForm());\n\twidget.setActionTiming(DwtButton.ACTION_MOUSEDOWN);\n\n\t// ONE MENU??\n\tvar menu = this.menu = new DwtMenu(widget, DwtMenu.CALENDAR_PICKER_STYLE, null, null, this.getForm());\n\tmenu.setSize(\"150\");\n\tmenu._table.width = \"100%\";\n\twidget.setMenu(menu, true);\n\tmenu.setAssociatedObj(widget);\n\n\t// For now, create a new DwtCalendar for each of the buttons, since on\n\t// IE, I'm having trouble getting the one calendar to work.\n\t// TODO: Figure out the IE problem.\n\t//var cal = new DwtCalendar(menu);\n\tvar cal = new DwtCalendar({parent:menu,firstDayOfWeek:(!AjxUtil.isEmpty(firstDayOfWeek) ? firstDayOfWeek : 0)});\n\tcal._invokingForm = this.getForm();\n\tcal._invokingFormItemId = this.getId();\n\tcal.setDate(new Date(), true);\n\tcal.addSelectionListener(new AjxListener(this, this._calOnChange));\n\twidget.__cal = cal;\n\treturn widget; \n}\n\nDwt_Date_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (newValue == null) newValue = new Date();\n\tthis.widget.setText(this.getButtonLabel(newValue));\n\tthis.widget._date = newValue;\n\tthis.widget.__cal.setDate(newValue,true);\n};\n\n\nDwt_Date_XFormItem.prototype._calOnChange = function (event) {\n\tvar value = event.detail;\n\tvar cal = event.item;\n\tvar elemChanged = this.getElementChangedMethod();\n\telemChanged.call(this,value, this.getInstanceValue(), event);\t\n};\n\nDwt_Date_XFormItem.prototype.getButtonLabel = function (newValue) {\n\tif (newValue == null || !(newValue instanceof Date)) return \"\";\n        var formatter = AjxDateFormat.getDateInstance(AjxDateFormat.NUMBER);\n\treturn formatter.format(newValue) ;//(newValue.getMonth()+1) + \"/\" + newValue.getDate() + \"/\" + (newValue.getFullYear());\n};\n\n\n/**\n * @class defines XFormItem type _DWT_TIME_\n * Adapts a DwtTimeSelect to work with the XForm\n * @constructor\n *\n * @private\n */\nDwt_Time_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_TIME_\", \"dwt_time\", Dwt_Time_XFormItem, Dwt_Adaptor_XFormItem)\n\nDwt_Time_XFormItem.prototype.cssClass =  \"xform_dwt_time\";\n\nDwt_Time_XFormItem.prototype.constructWidget = function () {\n\tvar widget = new DwtTimeSelect(this.getForm());\n    widget.addChangeListener(this._onChange.bind(this));\n    return widget;\n};\n\nDwt_Time_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (newValue == null) {\n        newValue = new Date();\n        newValue.setHours(0, 0, 0, 0);\n    }\n\tthis.widget.set(newValue);\n};\n\nDwt_Time_XFormItem.prototype._onChange = function (event) {\n\tvar value = this.widget.getValue();\n\tvar elemChanged = this.getElementChangedMethod();\n\telemChanged.call(this, value, this.getInstanceValue(), event);\n};\n\n\n/**\n * @class defines XFormItem type _DWT_DATETIME_\n * Composes a _DWT_DATE_ and a (non-DWT) _TIME_ to make a date/time editor, just for kicks.\n * @constructor\n * \n * @private\n */\nDwt_Datetime_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_DATETIME_\", \"dwt_datetime\", Dwt_Datetime_XFormItem, Composite_XFormItem)\n\n//\ttype defaults\nDwt_Datetime_XFormItem.prototype.numCols = 3;\nDwt_Datetime_XFormItem.prototype.useParentTable = false;\nDwt_Datetime_XFormItem.prototype.cssClass =  \"xform_dwt_datetime\";\nDwt_Datetime_XFormItem.initialize = function(){\n   Dwt_Datetime_XFormItem.prototype.items = Datetime_XFormItem._datetimeFormatToItems(\n\tAjxMsg.xformDateTimeFormat,\n\t{type:_DWT_DATE_, ref:\".\", labelLocation:_NONE_, errorLocation:_PARENT_,\n\t elementChanged:\n\t function (newDate, currentDate, event) {\n\t \tcurrentDate = currentDate ? currentDate : new Date();\n\t\tnewDate.setHours(currentDate.getHours(), currentDate.getMinutes(), currentDate.getSeconds(), 0);\n\t\tvar elementChangedMethod = this.getParentItem().getElementChangedMethod();\n\t\tif(elementChangedMethod)\n\t\t\telementChangedMethod.call(this.getParentItem(),newDate, currentDate, event);\n\t }\n\t},\n\t{type:_DWT_TIME_, ref:\".\", labelLocation:_NONE_, errorLocation:_PARENT_,\n\t elementChanged:\n\t function (newDate, currentDate, event) {\n\t\tcurrentDate = currentDate ? currentDate : new Date();\n\t\t//If time is changed set the full year of new date with current date.\n\t\tnewDate.setFullYear(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n\t\tvar elementChangedMethod = this.getParentItem().getElementChangedMethod();\n\t\tif(elementChangedMethod)\n\t\t\telementChangedMethod.call(this.getParentItem(),newDate, currentDate, event);\n\t }\n\t}\n);\n}\nDwt_Datetime_XFormItem.initialize();\n\n\n/**\n * @class defines XFormItem type _DWT_LIST_\n * @constructor\n * \n * @private\n */\nDwt_List_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_LIST_\", \"dwt_list\", Dwt_List_XFormItem, Dwt_Adaptor_XFormItem)\n\n//\ttype defaults\nDwt_List_XFormItem.prototype.writeElementDiv = false;\nDwt_List_XFormItem.prototype.widgetClass = DwtListView;\nDwt_List_XFormItem.prototype.bmolsnr = true;\nDwt_List_XFormItem.prototype.getOnSelectionMethod = function() {\n\treturn this.cacheInheritedMethod(\"onSelection\",\"$onSelection\",\"event\");\n}\n\n\nDwt_List_XFormItem.prototype.constructWidget = function () {\n\tvar headerList = this.getInheritedProperty(\"headerList\");\n\tvar listClass = this.getInheritedProperty(\"widgetClass\");\n\t\n\tvar hideHeader = this.getInheritedProperty(\"hideHeader\");\n\n\tvar widget = new listClass(this.getForm(), this.getCssClass(), null, ((hideHeader!=undefined && hideHeader==true ) ? null : headerList));\n\tvar emptyText = this.getInheritedProperty(\"emptyText\");\n\tif(emptyText !=null || emptyText===\"\")\n\t\twidget.emptyText = emptyText;\n\t\t\n\tif(hideHeader != undefined) {\n\t\twidget.hideHeader = hideHeader;\n\t\tif(hideHeader && headerList) {\n\t\t\twidget._headerList = headerList;\n\t\t}\n\t}\t\n\n\tvar multiselect = this.getInheritedProperty(\"multiselect\");\n\tif(multiselect != undefined) {\n\t\twidget.setMultiSelect(multiselect);\n\t}\n\tif(this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\") && this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\")) {\t\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\n\t\tif(width && height)\n\t\t\twidget.setSize(width, height);\t\t\n\t} else {\t\t\t\n\t\t//set the width height here.\n\t\tvar width = this.getWidth();\n\t\tvar height = this.getHeight();\n\t\t\n\t\tif(width && height)\n\t\t\twidget.setSize(width, height);\n\t\t\n\t\t//set the listDiv height\n\t\tif (height && height != Dwt.DEFAULT) {\n\t\t\twidget.setListDivHeight (height) ;\n\t\t}\n\t}\t\t\n\t\n\t// make sure the user defined listener is called \n\t// before our selection listener.\n\tvar selMethod = this.getOnSelectionMethod();\n\tif (selMethod) {\n\t\twidget.addSelectionListener(new AjxListener(this, selMethod));\n\t} else {\n\t\tvar localLs = new AjxListener(this, this._handleSelection);\n\t\twidget.addSelectionListener(localLs);\n\t}\n\t//check if createPopupMenu method is defined\n\tvar createPopupMenumethod = this.cacheInheritedMethod(\"createPopupMenu\",\"$createPopupMenu\",\"parent\");\n\tif(createPopupMenumethod != null) {\n\t\tcreatePopupMenumethod.call(this, widget);\n\t}\n\tvar form=this.getForm();\n\tvar container = (form.parent instanceof DwtControl) ? form.parent : DwtControl.fromElementId(window._dwtShellId);\n\tif(container) {\n\t\tif(this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\") && this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\") && this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\")) {\n\t\t\tcontainer.addControlListener(new AjxListener(this, this.cacheInheritedMethod(\"resizeHdlr\", \"$resizeHdlr\")));\n\t\t}\n\t}\n\n\treturn widget;\n};\n\nDwt_List_XFormItem.prototype.resizeHdlr = \nfunction() {\n\ttry {\n\t\tvar height = this.cacheInheritedMethod(\"getCustomHeight\", \"$getCustomHeight\").call(this);\n\t\tvar width = this.cacheInheritedMethod(\"getCustomWidth\", \"$getCustomWidth\").call(this);\t\t\n\t\tthis.widget.setSize(width,height);\n\t} catch (ex) {\n\t\talert(ex);\n\t}\n};\n\n\nDwt_List_XFormItem.prototype.getSelection = function () {\n\treturn this.widget.getSelection();\n};\n\nDwt_List_XFormItem.prototype._handleSelection = function (event) {\n\tvar modelItem = this.getModelItem();\n\tvar event = new DwtXModelEvent(this.getInstance(), modelItem, null, null);\n\tmodelItem.notifyListeners(DwtEvent.XFORMS_VALUE_CHANGED, event);\n};\n\nDwt_List_XFormItem.prototype.insertWidget = function (form, widget, element) {\n\tthis.getForm()._reparentDwtObject(widget, this.getContainer());\n};\n\nDwt_List_XFormItem.prototype.updateWidget = function (newValue) {\n\tif (typeof (newValue) != 'undefined') {\n\t\tthis.setItems(newValue);\n\t}\n};\n\n//the method used to compare the contents of the list array.\n//because object  array  join alwasy return [Object Object]\n//we need to compare the property values\n//we should return once we find the differences\n//Assume that itemArray and existingArr has the same length\nDwt_List_XFormItem.isItemsChanged = function (itemArray, existingArr) {\n    var isChanged = false ;\n    if ((itemArray._version !=null && existingArr._version !=null && (itemArray._version != existingArr._version ))\n\t\t\t|| (itemArray.length != existingArr.length)) {\n        isChanged = true ;\n    } else {\n        var rows = [] ;\n        var existingRows = [] ;\n        for (var i=0; i < itemArray.length; i ++) {\n            if (itemArray[i] instanceof Object)  {\n                for (var p in itemArray[i]) {\n                    rows.push (itemArray[i][p]) ;\n                }\n            } else {\n                rows.push(itemArray[i]) ;\n            }\n\n            if (existingArr[i] instanceof Object)  {\n                for (var p1 in existingArr[i]) {\n                    existingRows.push (existingArr[i][p1]) ;\n                }\n            } else {\n                existingRows.push(existingArr[i]) ;\n            }\n\n            if (rows.join() != existingRows.join()) {\n                isChanged = true;\n                break ;\n            }else{\n                rows = [];\n                existingRows = [] ;\n            }\n        }\n    }\n\n    return isChanged ;\n}\nDwt_List_XFormItem.prototype.setItems = function (itemArray){\n\tvar list = this.widget.getList();\n\tvar existingArr = new Array();\n\tvar tmpArr = new Array();\n\tif (list) {\n\t\texistingArr = list.getArray();\n\t} \n\ttmpArr = new Array();\n\tvar defaultColumnSort = this.getInheritedProperty(\"defaultColumnSortable\") ;\n\tif (itemArray && itemArray.length > 0) {\t\n\t\t//we have to compare the objects, because XForm calls this method every time an item in the list is selected\n\t\tif (this.getForceUpdate() || Dwt_List_XFormItem.isItemsChanged(itemArray, existingArr)) {\n            var preserveSelection = this.getInheritedProperty(\"preserveSelection\");\n\t\t\tvar selection = null;\n\t\t\tif(preserveSelection) {\n\t\t\t\tselection = this.widget.getSelection();\n\t\t\t}\t\t\n\t\t\tvar cnt=itemArray.length;\n\t\t\tfor(var i = 0; i< cnt; i++) {\n\t\t\t\ttmpArr.push(itemArray[i]);\t\t\n\t\t\t}\n\t\t\t//add the default sort column\n\t\t\tthis.widget.set(AjxVector.fromArray(tmpArr), defaultColumnSort);\n\t\t\tif(itemArray._version != undefined && itemArray._version != null)\n\t\t\t\tthis.widget.getList().getArray()._version = itemArray._version;\n\t\t\t\t\n\t\t\tif(preserveSelection && selection) {\n\t\t\t\tthis.widget.setSelectedItems(selection);\n\t\t\t}\n\t\t}\n\t}else{\n\t\t//display the empty list (no result html)\n\t\tthis.widget.set(AjxVector.fromArray([]), defaultColumnSort); \n\t}\n};\n\nDwt_List_XFormItem.prototype.appendItems = function (itemArray){ \n\tthis.widget.addItems(itemArray);\n};\n\n\n/**\n * @class defines XFormItem type _BUTTON_GRID_\n * @constructor\n * \n * @private\n */\nButton_Grid_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_BUTTON_GRID_\", \"button_grid\", Button_Grid_XFormItem, WidgetAdaptor_XFormItem)\n\n//\ttype defaults\nButton_Grid_XFormItem.prototype.numCols = 5;\nButton_Grid_XFormItem.prototype.cssClass = \"xform_button_grid_medium\";\nButton_Grid_XFormItem.prototype.forceUpdate = true;\n\n\n//\tmethods\nButton_Grid_XFormItem.prototype.constructWidget = function () {\n\tvar changeHandler = this.getExternalChangeHandler();\n\tvar attributes = {\n\t\tnumCols:this.getNumCols(),\n\t\tchoices:choices.getChoiceObject(),\n\t\tcssClass:this.getCssClass(),\n\t\tonChange:changeHandler,\n\t\taddBracketingCells:(this.getAlign() == _CENTER_)\n\t}\n\tvar multiple = this.getMultiple();\n\tif (multiple !== null) attributes.multiple = multiple;\n\treturn new ButtonGrid(attributes);\n}\n\n\n\n/**\n * @class defines XFormItem type _DWT_CHOOSER_\n * @constructor\n * \n * @private\n */\nDwt_Chooser_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_CHOOSER_\", \"chooser\", Dwt_Chooser_XFormItem, Dwt_Adaptor_XFormItem);\nDwt_Chooser_XFormItem.prototype.widgetClass = DwtChooser;\nDwt_Chooser_XFormItem.prototype.listSize = 100;\n/*\nNOTE: this won't work because attributes.ref is accessed before this\nmethod is called in XFormItemFactory#createItem.\nDwt_Chooser_XFormItem.prototype._setAttributes = function(attributes) {\n\t// allows \"targetRef\" alias for \"ref\" attribute\n\tif (!attributes.ref && attributes.targetRef) {\n\t\tattributes.ref = attributes.targetRef;\n\t}\n\tXFormItem.prototype._setAttributes.call(this, attributes);\n}\n*/\nDwt_Chooser_XFormItem.prototype.getSorted = function() {\n\treturn this.getInheritedProperty(\"sorted\");\n}\nDwt_Chooser_XFormItem.prototype.getListCssClass = function() {\n\treturn this.getInheritedProperty(\"listCssClass\");\n}\n\nDwt_Chooser_XFormItem.prototype.getTargetListCssClass = function() {\n\treturn this.getInheritedProperty(\"targetListCssClass\");\n}\n\nDwt_Chooser_XFormItem.prototype.getSourceInstanceValue = function() {\n\tvar items = this.getModel().getInstanceValue(this.getInstance(), this.getInheritedProperty(\"sourceRef\"));\n\t//items must be either array or vector\n\tif (! items) {\n\t\titems = new AjxVector ();\n\t}else if (typeof items == \"string\") {\n\t\titems = new Array(items);\n\t}\n\treturn items ;\n}\n\nDwt_Chooser_XFormItem.prototype.getTargetInstanceValue = function() {\n\tvar items = this.getInstanceValue();\n\tif (! items) {\n\t\titems = new AjxVector ();\n\t}else if (typeof items == \"string\") {\n\t\titems = new Array(items);\n\t}\n\treturn items ;\n}\n\nDwt_Chooser_XFormItem.prototype._handleStateChange = function(event) {\n\tvar form = this.getForm();\n\tvar id = this.getId();\n\tvar widget = this.getWidget();\n\tvar value = widget.getItems();\n\tthis._skipUpdate = true;\n\tform.itemChanged(id, value);\n\tthis._skipUpdate = false;\n}\n\nDwt_Chooser_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar cssClass = this.getCssClass();\n\tvar sourceListCssClass = this.getListCssClass();\n\tvar targetListCssClass = this.getTargetListCssClass();\n\tvar widgetClass = this.getInheritedProperty(\"widgetClass\");\n\tif (sourceListCssClass && !targetListCssClass) {\n\t\ttargetListCssClass = sourceListCssClass;\n\t}\n\tvar listSize = this.getInheritedProperty(\"listSize\");\n\tvar params = {parent: form, \n\t\t\t\tclassName: cssClass, \n\t\t\t\tslvClassName: sourceListCssClass,\n\t\t\t\ttlvClassName: targetListCssClass, \n\t\t\t\tlayoutStyle: (this.getInheritedProperty(\"layoutStyle\") ? this.getInheritedProperty(\"layoutStyle\") : DwtChooser.HORIZ_STYLE),\n\t\t\t\tlistSize: listSize, \n\t\t\t\tsourceEmptyOk: true, \n\t\t\t\tallButtons: true,\n\t\t\t\tlistWidth: (this.getInheritedProperty(\"listWidth\") ? this.getInheritedProperty(\"listWidth\") : null),\n\t\t\t\tlistHeight: (this.getInheritedProperty(\"listHeight\") ? this.getInheritedProperty(\"listHeight\") : null),\n\t\t\t\ttableWidth: (this.getInheritedProperty(\"tableWidth\") ? this.getInheritedProperty(\"tableWidth\") : null),\n\t\t\t\tlabelWidth: (this.getInheritedProperty(\"labelWidth\") ? this.getInheritedProperty(\"labelWidth\") : null),\n\t\t\t\tsplitButtons:this.getInheritedProperty(\"splitButtons\")\t\n\t\t\t\t};\n\t\n\treturn new widgetClass(params);\n}\n\nDwt_Chooser_XFormItem.prototype.updateWidget = function(newvalue, dedup, compareFunc) {\n\tif (this._skipUpdate) {\n\t\treturn;\n\t}\n\n\tif (this._stateChangeListener) {\n\t\tthis.widget.removeStateChangeListener(this._stateChangeListener);\n\t}\n\telse {\n\t\tthis._stateChangeListener = new AjxListener(this, Dwt_Chooser_XFormItem.prototype._handleStateChange)\n\t}\n\n\tvar origSourceItems = this.getSourceInstanceValue();\n\tvar sourceItems;\n\t\n\tif(origSourceItems instanceof Array) { \n\t\tvar _tmpSrcItems = [];\n\t\tvar cnt = origSourceItems.length;\n\t\tfor(var i=0; i<cnt;i++) {\n\t\t\t_tmpSrcItems.push(origSourceItems[i]);\n\t\t}\n\t\tsourceItems = AjxVector.fromArray(_tmpSrcItems);\n\t} else {\n\t\tsourceItems = origSourceItems.clone();\n\t}\n\t\n\tvar targetItems = this.getTargetInstanceValue();\n\tif(targetItems instanceof Array) targetItems = AjxVector.fromArray(targetItems);\t\n\tif(dedup) {\n\t\tvar cnt = targetItems.size();\n\t\tfor(var i=0; i < cnt; i++) {\n\t\t\tif(compareFunc) {\n\t\t\t \tvar ix=sourceItems.indexOfLike(targetItems.get(i),compareFunc);\n\t\t\t \tif(ix > -1) {\n\t\t\t\t\tsourceItems.removeAt(ix);\n\t\t\t \t}\n\t\t\t} else {\n\t\t\t \tvar ix=sourceItems.indexOf(targetItems.get(i));\n\t\t\t \tif(ix > -1) {\n\t\t\t\t\tsourceItems.removeAt(ix);\n\t\t\t \t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tvar sorted = this.getSorted();\n\tif (sorted) {\n\t\tsourceItems.sort();\n\t\ttargetItems.sort();\n\t}\n\n\tthis.widget.setItems(sourceItems);\n\tthis.widget.setItems(targetItems, DwtChooserListView.TARGET);\n\n\tthis.widget.addStateChangeListener(this._stateChangeListener);\n}\n\n//\n// XFormItem class: \"alert\"\n//\n\nDwt_Alert_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_ALERT_\", \"alert\", Dwt_Alert_XFormItem, Dwt_Adaptor_XFormItem);\n\nDwt_Alert_XFormItem.prototype.colSpan = \"*\";\nDwt_Alert_XFormItem.prototype.labelLocation = _NONE_;\n\nDwt_Alert_XFormItem.prototype.getStyle = function() {\n\treturn this.getInheritedProperty(\"style\");\n}\nDwt_Alert_XFormItem.prototype.getIconVisible = function() {\n\treturn this.getInheritedProperty(\"iconVisible\");\n}\nDwt_Alert_XFormItem.prototype.getTitle = function() {\n\treturn this.getInheritedProperty(\"title\");\n}\nDwt_Alert_XFormItem.prototype.getContent = function() {\n\treturn this.getInheritedProperty(\"content\");\n}\nDwt_Alert_XFormItem.prototype.getAlertCssClass = function() {\n\treturn this.getInheritedProperty(\"alertCssClass\");\n}\n\nDwt_Alert_XFormItem.prototype.constructWidget = function() {\n\tvar style = this.getStyle();\n\tvar iconVisible = this.getIconVisible();\n\tvar title = this.getTitle();\n\tvar content = this.getContent();\n\tvar alertCssClass = this.getAlertCssClass();\n\t\n\tvar form = this.getForm();\n\tvar alert = new DwtAlert(form, alertCssClass);\n\t\n\talert.setStyle(style);\n\talert.setIconVisible(iconVisible);\n\talert.setTitle(title);\n\talert.setContent(content);\n\t\n\t// bug fix wrong IE box model when conculating the width\n\tif(AjxEnv.isIE){\n\t\ttry{\t\n\t\t\tvar htmlElement = alert.getHtmlElement();\n                \tvar size = Dwt.getSize(htmlElement);\n\t\t\n\t\t\tvar container = this.getContainer();\n\t\t\tvar containerSize =  Dwt.getSize(container);\n\t\t\t\n\t\t\tvar style = DwtCssStyle.getComputedStyleObject(htmlElement);\t\n\t\t        var bl = parseInt(style.borderLeftWidth)     || 1;\n                        var br = parseInt(style.borderRightWidth)    || 1;\n                        var pl = parseInt(style.paddingLeft)         || 5;\n                        var pr = parseInt(style.paddingRight)        || 5;\n                        var ml = parseInt(style.marginLeft)          || 5;\n                        var mr = parseInt(style.marginRight)         || 5;\n                        var extraWidth = bl + br + pl + pr + ml + mr;\n\t\t\t\n\t\t\tif(containerSize.x > extraWidth){\n\t\t\t\tsize.x = containerSize.x - extraWidth;\n\t\t\t\tDwt.setSize(htmlElement, size.x, size.y);\n\t\t\t}\n\t\t}catch(ex){\n\t\t}\n\t}\t\n\treturn alert;\n}\n\nDwt_Alert_XFormItem.prototype.updateWidget = function(newvalue) {\n\t// nothing\n\tvar content = this.getContent();\n\tif(!content && newvalue) {\n\t\tthis.getWidget().setContent(newvalue);\n\t}\n}\n\n//\n// XFormItem class: \"dwt_tab_bar\" (\"tab_bar\")\n//\n\nDwt_TabBar_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_TAB_BAR_\", \"tab_bar\", Dwt_TabBar_XFormItem, Dwt_Adaptor_XFormItem);\nDwt_TabBar_XFormItem.prototype.colSpan = \"*\";\nDwt_TabBar_XFormItem.prototype.labelLocation = _NONE_;\nDwt_TabBar_XFormItem.prototype.cssStyle = \"margin-right: 5px\";\n\n// NOTE: Overriding the _TAB_BAR_\n//XFormItemFactory.registerItemType(_TAB_BAR_, \"tab_bar\", Dwt_TabBar_XFormItem);\n\nDwt_TabBar_XFormItem.prototype._value2tabkey;\nDwt_TabBar_XFormItem.prototype._tabkey2value;\n\nDwt_TabBar_XFormItem.prototype._stateChangeListener;\n\nDwt_TabBar_XFormItem.prototype.getChoices = function() {\n\treturn this.getInheritedProperty(\"choices\");\n}\n\nDwt_TabBar_XFormItem.prototype._handleStateChange = function(event) {\n\tvar form = this.getForm();\n\tvar widget = this.getWidget();\n\t\n\tvar tabKey = widget.getCurrentTab();\n\tvar newvalue = this._tabkey2value[tabKey];\n\t\n\tvar id = this.getId();\n\t//release the focus  \n\tform.releaseFocus() ;\n\tform.itemChanged(id, newvalue, event, true);\n}\n\nDwt_TabBar_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar cssClass = this.getCssClass();\n\tvar btnCssClass = this.getInheritedProperty(\"buttonCssClass\");\t\n\t\n\tvar widget = new DwtTabBarFloat(form, cssClass, btnCssClass);\n    this._value2tabkey = {};\n\tthis._tabkey2value = {};\n\t\n\tvar choices = this.getChoices();\n\tif(choices.constructor == XFormChoices) {\n\t\tthis.choices = choices;\n\t\tvar listener = new AjxListener(this, this.dirtyDisplay);\n\t\tchoices.addListener(DwtEvent.XFORMS_CHOICES_CHANGED, listener);\t\n\t\t\n\t\tvar values = this.getNormalizedValues();\n\t\tvar labels = this.getNormalizedLabels();\n\t\tvar cnt = values.length;\n\t\tfor (var i = 0; i < cnt; i++) {\n\t\t\t// NOTE: DwtTabView keeps its own internal keys that are numerical\n\t\t\tthis._value2tabkey[values[i]] = i + 1;\n\t\t\tthis._tabkey2value[i + 1] = values[i];\n\t\t\twidget.addButton(i+1, labels[i]);\n            widget.getButton(i+1).getHtmlElement().style [\"paddingRight\"] = \"2px\" ;\n\t\t}\t\t\t\n\t} else {\n\t\tvar cnt = choices.length;\n\t\tfor (var i = 0; i < cnt; i++) {\n\t\t\tvar choice = choices[i];\n\t\t\t// NOTE: DwtTabView keeps its own internal keys that are numerical\n\t\t\tthis._value2tabkey[choice.value] = i + 1;\n\t\t\tthis._tabkey2value[i + 1] = choice.value;\n\t\t\twidget.addButton(i+1, choice.label);\n            widget.getButton(i+1).getHtmlElement().style [\"paddingRight\"] = \"2px\" ;\n\t\t}\n\t}\n\t\n\treturn widget;\n}\n\nDwt_TabBar_XFormItem.prototype.updateWidget = function(newvalue) {\n\tif (this.widget.isUpdating) {\n\t\tthis.widget.isUpdating = false;\n\t\treturn;\n\t}\n\n\tif (this._stateChangeListener) {\n\t\tthis.widget.removeStateChangeListener(this._stateChangeListener);\n\t}\n\telse {\n\t\tthis._stateChangeListener = new AjxListener(this, Dwt_TabBar_XFormItem.prototype._handleStateChange);\n\t}\n\t\n\tvar tabKey = this._value2tabkey[newvalue];\n\tif (tabKey != this.widget.getCurrentTab()) {\n\t\tthis.widget.openTab(tabKey);\n\t}\n\n\tthis.widget.addStateChangeListener(this._stateChangeListener);\n}\n\nDwt_TabBar_XFormItem.prototype.dirtyDisplay = function() {\n\tthis.$normalizedChoices = null; //nuke these since they are out of date at this point\n\tif(this.choices && this.choices.constructor == XFormChoices) {\n\t\tvar labels = this.getNormalizedLabels();\n\t\tvar values = this.getNormalizedValues();\n\t\tvar cnt = labels.length;\n\t\tfor(var i=0;i<cnt;i++) {\n\t\t\tvar tabKey = this._value2tabkey[values[i]];\n\t\t\tif(tabKey) {\n\t\t\t\tvar btn = this.widget.getButton(tabKey);\n\t\t\t\tif(btn) {\n\t\t\t\t\tbtn.setText(labels[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tthis._choiceDisplayIsDirty = true;\n\tdelete this.$normalizedChoices;\t\n}\n\n//\n// XFormItem class: \"alert\"\n//\n\nDwt_ProgressBar_XFormItem = function() {}\nXFormItemFactory.createItemType(\"_DWT_PROGRESS_BAR_\", \"dwt_progress_bar\", Dwt_ProgressBar_XFormItem, Dwt_Adaptor_XFormItem);\n\nDwt_ProgressBar_XFormItem.prototype.constructWidget = function() {\n\tvar form = this.getForm();\n\tvar widget = new DwtProgressBar(form, null);\n\tvar maxvalue = this.getInheritedProperty(\"maxValue\");\n\tif(!maxvalue) {\n\t\tthis.maxValueRef = this.getInheritedProperty(\"maxValueRef\");\n\t\tmaxvalue = this.getModel().getInstanceValue(this.getInstance(), this.maxValueRef)\n\t}\n\twidget.setMaxValue(maxvalue);\n\t\n\tvar progressCssClass = this.getInheritedProperty(\"progressCssClass\");\n\tif(progressCssClass) {\n\t\twidget.setProgressCssClass(progressCssClass);\n\t}\n\t\n\tvar wholeCssClass = this.getInheritedProperty(\"wholeCssClass\");\n\tif(wholeCssClass) {\n\t\twidget.setWholeCssClass(wholeCssClass);\n\t}\t\n\treturn widget;\n}\n\nDwt_ProgressBar_XFormItem.prototype.updateWidget = function(newvalue) {\n\t// nothing\n\tif(!newvalue)\n\t\tnewvalue=0;\n\tif(this.maxValueRef) {\n\t\tmaxvalue = this.getModel().getInstanceValue(this.getInstance(), this.maxValueRef)\n\t\tthis.getWidget().setMaxValue(maxvalue);\t\n\t}\n\tthis.getWidget().setValue(newvalue);\n}\n"], "filenames": ["WebRoot/js/ajax/dwt/xforms/XFormItem.js"], "buggy_code_start_loc": [691], "buggy_code_end_loc": [692], "fixing_code_start_loc": [691], "fixing_code_end_loc": [692], "type": "CWE-79", "message": "A vulnerability has been found in Zimbra zm-ajax up to 8.8.1 and classified as problematic. Affected by this vulnerability is the function XFormItem.prototype.setError of the file WebRoot/js/ajax/dwt/xforms/XFormItem.js. The manipulation of the argument message leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 8.8.2 is able to address this issue. The identifier of the patch is 8d039d6efe80780adc40c6f670c06d21de272105. It is recommended to upgrade the affected component. The identifier VDB-249421 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2017-20188", "sourceIdentifier": "cna@vuldb.com", "published": "2024-01-02T15:15:08.377", "lastModified": "2024-02-29T01:20:30.267", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A vulnerability has been found in Zimbra zm-ajax up to 8.8.1 and classified as problematic. Affected by this vulnerability is the function XFormItem.prototype.setError of the file WebRoot/js/ajax/dwt/xforms/XFormItem.js. The manipulation of the argument message leads to cross site scripting. The attack can be launched remotely. The complexity of an attack is rather high. The exploitation appears to be difficult. Upgrading to version 8.8.2 is able to address this issue. The identifier of the patch is 8d039d6efe80780adc40c6f670c06d21de272105. It is recommended to upgrade the affected component. The identifier VDB-249421 was assigned to this vulnerability."}, {"lang": "es", "value": "Una vulnerabilidad ha sido encontrada en Zimbra zm-ajax hasta 8.8.1 y clasificada como problem\u00e1tica. La funci\u00f3n XFormItem.prototype.setError del archivo WebRoot/js/ajax/dwt/xforms/XFormItem.js es afectada por esta vulnerabilidad. La manipulaci\u00f3n del mensaje de argumento conduce a cross site scripting. El ataque se puede lanzar de forma remota. La complejidad de un ataque es bastante alta. La explotaci\u00f3n parece dif\u00edcil. La actualizaci\u00f3n a la versi\u00f3n 8.8.2 puede solucionar este problema. El identificador del parche es 8d039d6efe80780adc40c6f670c06d21de272105. Se recomienda actualizar el componente afectado. A esta vulnerabilidad se le asign\u00f3 el identificador VDB-249421."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 2.7}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.6, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zimbra:zm-ajax:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.8.2", "matchCriteriaId": "92DC03A9-1A56-434C-AAF3-79B8DAA0B695"}]}]}], "references": [{"url": "https://github.com/Zimbra/zm-ajax/commit/8d039d6efe80780adc40c6f670c06d21de272105", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/Zimbra/zm-ajax/releases/tag/8.8.2", "source": "cna@vuldb.com", "tags": ["Release Notes"]}, {"url": "https://vuldb.com/?ctiid.249421", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.249421", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Zimbra/zm-ajax/commit/8d039d6efe80780adc40c6f670c06d21de272105"}}