{"buggy_code": ["Django==1.11.17\nMarkdown==2.6.11\nPygments==2.2.0\nboto==2.48.0\ncelery==4.1.1\ndjango-crispy-forms==1.6.1\ndjango-nose==1.4.5\ndocutils==0.14\npackaging==16.8\npy-gfm==0.1.4\npython-dateutil==2.6.1\nraven==6.1.0\nredis==2.10.6\nspec==1.4.1\nyoconfigurator==0.5.2\n", "import re\n\nfrom django.utils.html import format_html\nfrom django.utils.safestring import mark_safe\n\nfrom docutils.core import publish_parts\nfrom markdown import markdown\nfrom mdx_gfm import GithubFlavoredMarkdownExtension\n\n\ndef metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }\n\n\ndef display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))\n\n\ndef render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    return mark_safe(html)\n"], "fixing_code": ["Django==1.11.17\nMarkdown==2.6.11\nPygments==2.2.0\nboto==2.48.0\nbleach==2.1.4\nbleach-whitelist==0.0.9\ncelery==4.1.1\ndjango-crispy-forms==1.6.1\ndjango-nose==1.4.5\ndocutils==0.14\npackaging==16.8\npy-gfm==0.1.4\npython-dateutil==2.6.1\nraven==6.1.0\nredis==2.10.6\nspec==1.4.1\nyoconfigurator==0.5.2\n", "import re\n\nfrom django.utils.html import format_html\nfrom django.utils.safestring import mark_safe\n\nimport bleach\nfrom bleach_whitelist import print_tags, print_attrs, all_styles\nfrom docutils.core import publish_parts\nfrom markdown import markdown\nfrom mdx_gfm import GithubFlavoredMarkdownExtension\n\n\ndef metadata_fields(metadata_version):\n    \"\"\"Return meta-data about the meta-data :)\"\"\"\n\n    if metadata_version not in ('1.0', '1.1', '1.2', '2.1'):\n        raise ValueError(\"Unknown Metadata-Version: %s\" % metadata_version)\n\n    required = set((\n        'Metadata-Version',\n        'Name',\n        'Summary',\n        'Version',\n    ))\n    fields = set((\n        'Author',\n        'Author-email',\n        'Description',\n        'Home-page',\n        'Keywords',\n        'License',\n    ))\n    multivalued = set((\n        'Platform',\n        'Supported-Platform',\n    ))\n    csv = set((\n        'Platform',\n        'Keywords',\n    ))\n    deprecated = set()\n\n    if metadata_version in ('1.0', '1.1'):\n        required.update((\n            'Author-email',\n            'License',\n        ))\n    if metadata_version in ('1.1', '1.2', '2.1'):\n        required.update((\n            'Download-URL',\n        ))\n        multivalued.update((\n            'Classifier',\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n    if metadata_version in ('1.2', '2.1'):\n        required.update((\n            'Requires-Python',\n        ))\n        deprecated.update((\n            'Requires',\n            'Provides',\n            'Obsoletes',\n        ))\n        fields.update((\n            'Maintainer',\n            'Maintainer-email',\n        ))\n        multivalued.update((\n            'Obsoletes-Dist',\n            'Project-URL',\n            'Provides-Dist',\n            'Requires-Dist',\n            'Requires-External',\n        ))\n    if metadata_version in ('2.1',):\n        fields.update((\n            'Description-Content-Type',\n        ))\n        multivalued.update((\n            'Provides-Extra',\n        ))\n    fields.update(required, deprecated, multivalued)\n\n    return {\n        'fields': fields,\n        'required': required,\n        'multivalued': multivalued,\n        'csv': csv,\n        'deprecated': deprecated,\n    }\n\n\ndef display_sort(metadata):\n    \"\"\"Return an ordered list of key-value pairs, of a given metadata dict\"\"\"\n    key_order = (\n        'Name',\n        'Version',\n        'Summary',\n        'License',\n        'Home-page',\n        'Project-URL',\n        'Download-URL',\n        'Description',\n        'Description-Content-Type',\n        'Author',\n        'Author-email',\n        'Maintainer',\n        'Maintainer-email',\n        'Keywords',\n        'Classifier',\n        'Requires-Python',\n        'Requires-External',\n        'Requires-Dist',\n        'Requires',\n        'Provides-Dist',\n        'Provides',\n        'Provides-Extra',\n        'Obsoletes-Dist',\n        'Obsoletes',\n        'Platform',\n        'Supported-Platform',\n        'Metadata-Version',\n    )\n    indices = dict((key, i) for i, key in enumerate(key_order))\n\n    if isinstance(metadata, dict):\n        metadata = metadata.items()\n\n    return sorted(metadata, key=lambda row: (indices.get(row[0], 100), row))\n\n\ndef render_description(text, content_type):\n    \"\"\"Render Description field to HTML\"\"\"\n    if re.match(r'^.+(\\n {8}.*)+\\n?$', text):\n        text = re.sub(r'^ {8}', '', text, flags=re.MULTILINE)\n\n    if content_type == 'text/x-rst':\n        html = publish_parts(\n            text, writer_name='html',\n            settings_overrides={'syntax_highlight': 'short'})['html_body']\n    elif content_type == 'text/markdown':\n        html = markdown(text, extensions=[GithubFlavoredMarkdownExtension()])\n    else:\n        html = format_html('<pre>{}</pre>', text)\n\n    html = bleach.clean(\n        html, print_tags + ['a', 'cite', 'pre'], print_attrs, all_styles)\n\n    return mark_safe(html)\n"], "filenames": ["requirements.txt", "yolapi/pypi/metadata.py"], "buggy_code_start_loc": [4, 5], "buggy_code_end_loc": [4, 146], "fixing_code_start_loc": [5, 6], "fixing_code_end_loc": [7, 152], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, was found in yolapi. Affected is the function render_description of the file yolapi/pypi/metadata.py. The manipulation of the argument text leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a0fe129055a99f429133a5c40cb13b44611ff796. It is recommended to apply a patch to fix this issue. VDB-216966 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2018-25056", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-28T12:15:08.893", "lastModified": "2023-01-06T20:20:26.393", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in yolapi. Affected is the function render_description of the file yolapi/pypi/metadata.py. The manipulation of the argument text leads to cross site scripting. It is possible to launch the attack remotely. The name of the patch is a0fe129055a99f429133a5c40cb13b44611ff796. It is recommended to apply a patch to fix this issue. VDB-216966 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yola:yolapi:-:*:*:*:*:*:*:*", "matchCriteriaId": "62E64D4B-E07E-43F3-9935-43AAA2D9E50C"}]}]}], "references": [{"url": "https://github.com/yola/yolapi/commit/a0fe129055a99f429133a5c40cb13b44611ff796", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.216966", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216966", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/yola/yolapi/commit/a0fe129055a99f429133a5c40cb13b44611ff796"}}