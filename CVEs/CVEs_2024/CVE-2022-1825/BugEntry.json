{"buggy_code": ["<?php\n/* ----------------------------------------------------------------------\n * system/ErrorController.php : Error display controller\n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2009-2021 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * ----------------------------------------------------------------------\n */\n\nrequire_once(__CA_LIB_DIR__.\"/ApplicationError.php\");\n\nclass ErrorController extends ActionController {\n\t# -------------------------------------------------------\n\t\n\t# -------------------------------------------------------\n\tfunction Show() {\n\t\t$o_purify = caGetHTMLPurifier();\n\t\t\n\t\t$va_nums = explode(';', $this->request->getParameter('n', pString));\n\t\t\n\t\t$va_error_messages = array();\n\t\tif (is_array($va_nums)) {\n\t\t\t$o_err = new ApplicationError(0, '', '', '', false, false);\n\t\t\tforeach($va_nums as $vn_error_number) {\n\t\t\t\t$o_err->setError($vn_error_number, '', '', false, false);\n\t\t\t\t$va_error_messages[] = $o_err->getErrorMessage();\n\t\t\t}\n\t\t}\n\t\t$this->view->setVar('error_messages', $va_error_messages);\n\t\t$this->view->setVar('referrer', $o_purify->purify($this->request->getParameter('r', pString)));\n\t\t$this->render('error_html.php');\n\t}\n\t# -------------------------------------------------------\n}\n", "<?php\n/** ---------------------------------------------------------------------\n * app/lib/ApplicationError.php : \n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2000-2015 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * @package CollectiveAccess\n * @subpackage Core\n * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3\n *\n * ----------------------------------------------------------------------\n */\n \n /**\n  *\n  */\n \nrequire_once(__CA_LIB_DIR__.\"/Configuration.php\");\n\n/**\n * Standard error handling class. Each Error instance represents a single error that has occurred.\n *\n * Provides for halting on critical errors, localized and standardized error messages and codes and\n * redirecting to \"site down\" page upon error.\n *\n */\nclass ApplicationError {\n/**\n * Numeric code of current error\n *\n * @access private\n */\n\tprivate $opn_error_number = 0;\t\t\t# standard error code (as defined in $error_messages hash)\n/**\n * Text description of current error\n *\n * @access private\n */\n\tprivate $ops_error_description = '';\t# instance-specific description of error (eg. MySQL error text)\n/**\n * Context of current error. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n *\n * @access private\n */\n\tprivate $ops_error_context = '';\t\t# instance-specific context of error (eg. SQL code that caused MySQL error)\n\n/**\n * Source code for error. While it can be used as a general-purpose identifier for the cause of an error, it typically used to record which field in an input form the error is associated with.\n *\n * @access private\n */\n\tprivate $ops_error_source = '';\t\t\t# instance-specific source of error (eg. the field in a form this error is associated with)\n\n\n/**\n * Boolean indicating if we should halt request on this error\n *\n * @access private\n */\n\tprivate $opb_halt_on_error = true;\n/**\n * Boolean indicating if we should emit visible (and quite ugly) output on this error\n *\n * @access private\n */\n\tprivate $opb_report_on_error = true;\n/**\n * Boolean indicating if we should redirect to the url in $ops_redirect_on_error_page on this error\n *\n * @access private\n */\n\tprivate $opb_redirect_on_error = true;\n/**\n * The current locale. Used to determine which set of localized error messages to use. Default is US English (\"us_en\")\n *\n * @access private\n */\n\tprivate $ops_locale = \"en_us\";\t\t# default locale is US English\n/**\n * URL of page to redirect to upon error, if $opb_redirect_on_error is set\n *\n * @access private\n */\t\n\tprivate $ops_redirect_on_error_page = '';\n/**\n * Indexed array of error numbers to ignore opb_halt_on_error, opb_report_on_error and opb_redirect_on_error for\n *\n * @access private\n */\t\n\tprivate $opa_dont_report_errors = array(251);\t\n/**\n * Configuration() object containing error messages\n *\n * @access private\n */\t\n\tprivate $opo_error_messages;\n\t\n/**\n * Constructor takes optional parameters to create a new error. If parameters are omitted, an empty (non-error state)\n * error object is created. An error state can subsequently be set using the setError() method\n *\n * @param integer $pn_error_number The numeric error code. Code should be defined in the error definition file\n * @param string $ps_error_description Description of error condition\n * @param string $ps_error_context Context where error occurred. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n * @param string $ps_error_source Source of error - typically a string identifying the field in a form where the error occurred.\n * @param bool $pb_halt_on_error Whether or not to halt on error state (ie. whether do die()) [default is true]\n * @param bool $pb_report_on_error Whether or not to emit a visible report of error state [default is true]\n * @param string $ps_error_definition_file Path to error definition file; if omitted default file, based upon locale, is used\n */\t\n\tpublic function __construct($pn_error_number=0, $ps_error_description='', $ps_error_context='', $ps_error_source='', $pb_halt_on_error = true, $pb_report_on_error = true, $ps_error_definition_file='') {\n \t\t$this->opo_config = Configuration::load();\n \t\t\n\t\t$this->ops_redirect_on_error_page = $this->opo_config->get(\"error_redirect_to_page\");\n\t\t\n\t\t# Set locale, if necessary\n\t\tif (($vs_locale = $this->opo_config->get(\"locale\")) && ((file_exists(\"Error/errors.\".$vs_locale)) || ($this->file_exists_incpath(\"Error/errors.\".$vs_locale)))) {\n\t\t\t$this->ops_locale = $vs_locale;\n\t\t} \n\t\t\n\t\t# load error messages\n\t\t$vs_error_definitions_loaded = 0;\n\t\tif ($ps_error_definition_file) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile($ps_error_definition_file);\n\t\t} else {\n\t\t\tif ($vs_config_error_definition_file = $this->opo_config->get(\"error_definition_file\")) {\n\t\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile($vs_config_error_definition_file);\n\t\t\t}\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile(__CA_LIB_DIR__.\"/Error/errors.\".$this->ops_locale);\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile(__CA_LIB_DIR__.\"/Error/errors.en_us\");\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\tdie(\"Error.php: Couldn't load error definitions!\\n\");\n\t\t}\n\t\t\n\t\t\n\t\t$this->opb_halt_on_error = $pb_halt_on_error;\n\t\t$this->opb_report_on_error = $pb_report_on_error;\n\t\tif ($pn_error_number) {\n\t\t\t$this->setError($pn_error_number, $ps_error_description, $ps_error_context, $ps_error_source);\n\t\t}\n\t}\n/**\n * Sets an error state.\n *\n * Note: if the configuration directive 'error_email_notification_to' is set to an e-mail address in the application configuration file\n * a notification of error will be sent.\n *\n * @param integer $pn_error_number The numeric error code. Code should be defined in the error definition file\n * @param string $ps_error_description Description of error condition\n * @param string $ps_error_context Context where error occurred. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n * @param string $ps_error_source Source of error - typically a string identifying the field in a form where the error occurred.\n * @return integer Always returns 1\n */\t\t\n\tpublic function setError ($pn_error_number, $ps_error_description='', $ps_error_context='', $ps_error_source='') {\n\t\t$this->opn_error_number = $pn_error_number;\n\t\t$this->ops_error_description = $ps_error_description;\n\t\t$this->ops_error_context = $ps_error_context;\n\t\t$this->ops_error_source = $ps_error_source;\n\t\t\n\t\tif (($this->opb_halt_on_error) || ($this->opb_report_on_error)) {\n\t\t\t$this->halt();\n\t\t}\n\t\treturn 1;\n\t}\n/**\n * Set error output options: halt on error, report on error and redirect on error. Halt on error, well..., halts the request\n * and prints a message. Report on error prints an error message but does not halt. This can be useful for debugging. Redirect\n * on error redirects the request to a specified URL on error, passing basic information about the error in the URL query\n * parameters. This can be useful for cleanly logging and handling errors in a production application.\n *\n * @param bool $pb_halt_and_report_on_error True if halt, report and redirect should be active, false if not. Generally this\n * method is used to turn all options off in one shot.\n * @return integer Always return 1\n */\t\n\tpublic function setErrorOutput($pb_halt_and_report_on_error) {\n\t\t$this->opb_halt_on_error = $pb_halt_and_report_on_error;\n\t\t$this->opb_report_on_error = $pb_halt_and_report_on_error;\n\t\t$this->opb_redirect_on_error = $pb_halt_and_report_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set halt on error option. If set to true, an error state will cause the request to halt.\n *\n * @param integer $pb_halt_on_error True to halt on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setHaltOnError ($pb_halt_on_error) {\n\t\t$this->opb_halt_on_error = $pb_halt_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set report on error option. If set to true, an error state will cause an error message to be printed.\n *\n * @param integer $pb_report_on_error True to print an error message on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setReportOnError ($pb_report_on_error) {\n\t\t$this->opb_report_on_error = $pb_report_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set redirect on error option. If set to true, an error state will the request to be redirected to a URL\n * specified by the 'error_redirect_to_page' directive in the application configuration file. This\n * URL can be overridden using the setRedirectOnErrorURL() method.\n *\n * Note that query parameters describing the error state will be appended to the redirect URL. These parameters are:\n *\n * - n = Error number [integer]\n * - desc = Error description [string]\n *\n * @param integer $pb_redirect_on_error True to redirect to another URL on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setRedirectOnError ($pb_redirect_on_error) {\n\t\t$this->opb_redirect_on_error = $pb_redirect_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set URL to redirect to when redirect on error option is set. Normally, the URL is taken from the \n * 'error_redirect_to_page' directive in the application configuration file. Use this method to override that\n * value on a per-error basis.\n *\n * @param integer $ps_redirect_on_error_url The URL to redirect to. The URL should be absolute or root-relative \n * without query parameters. Query parameters containing information about the error states will be appended to\n * this URL.\n */\t\n\tpublic function setRedirectOnErrorURL ($ps_redirect_on_error_url) {\n\t\t$this->ops_redirect_on_error_page = $ps_redirect_on_error_url;\n\t\treturn 1;\n\t}\n/**\n * Loads an error definition file. By default, the error definition file is a standard system error file for the current\n * locale (if locale is set by the 'locale' directive in the application configuration file). If the locale is not set or\n * there is no standard error definition file for the locale, the default en_us (US English) locale is used. You can override\n * the use of standard locale-based error messages with your own error definitions by calling this method with the path to your error\n * definition file. \n *\n * An error definition file is simply a standard configuration file containing one error message per line. The configuration directive (or \"key\")\n * for each error is the error number. The value is the error message itself.\n *\n * All error numbers below 9999 are reserved for use by the WebLib libraries.\n *\n * @param string $ps_error_definition_file File path to error definition file\n * @return integer Returns 1 on success, zero on failure\n */\t\n\tpublic function setErrorDefinitionFile ($ps_error_definition_file) {\n\t\t$this->opo_error_messages = Configuration::load($ps_error_definition_file);\n\t\tif ($this->opo_error_messages->isError()) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n/**\n * Returns an indexed array with a complete description of the current error state. The format of the array is:\n *\n * Index 0 = Error number\n * Index 1 = Error message\n * Index 2 = Error description\n * Index 3 = Error context\n * Index 4 = Error source code\n *\n * @return array Error description\n */\n\tpublic function getError () {\n\t\treturn array($this->opn_error_number, $this->getErrorMessage($this->opn_error_number), $this->ops_error_description, $this->ops_error_context, $this->ops_error_source);\n\t}\n/**\n * Returns the error number of the current error state.\n *\n * @return integer Error number\n */\n\tpublic function getErrorNumber() {\n\t\treturn $this->opn_error_number;\n\t}\n/**\n * Returns the error description of the current error state.\n *\n * @return string Error description\n */\n\tpublic function getErrorDescription() {\n\t\treturn $this->ops_error_description;\n\t}\n/**\n * Returns the context of the current error state.\n *\n * @return string Error context\n */\n\tpublic function getErrorContext() {\n\t\treturn $this->ops_error_context;\n\t}\n/**\n * Returns the error message of the current error state.\n *\n * @return string Error message\n */\n\tpublic function getErrorMessage() {\n\t\t$vs_error_message = $this->opo_error_messages->get($this->opn_error_number);\n\t\tif ($vs_error_message) {\n\t\t\treturn $vs_error_message;\n\t\t} else {\n\t\t\treturn \"Unknown error: \".$this->opn_error_number;\n\t\t}\n\t}\n\t\n/**\n * Returns the source of the current error.\n *\n * @return string Error source code\n */\n\tpublic function getErrorSource() {\n\t\treturn $this->ops_error_source;\n\t}\n\t\n/**\n * Returns true if halt on error is current set, false otherwise.\n *\n * @return bool Halt on error option setting\n */\n\tpublic function getHaltOnError () {\n\t\treturn $this->opb_halt_on_error;\n\t}\n/**\n * Returns true if report on error is current set, false otherwise.\n *\n * @return bool Report on error option setting\n */\n\tpublic function getReportOnError () {\n\t\treturn $this->opb_report_on_error;\n\t}\n/**\n * Sets the \"dont report error\" list to the supplied array.\n *\n * @param $pa_list array Indexed array of error number to ignore for halting, reporting or redirecting purposes.\n * @return bool Halt on error option setting\n */\n\tpublic function setDontReportErrorList ($pa_list) {\n\t\tif (!is_array($pa_list)) \n\t\t\treturn false;\n\n\t\t$this->opa_dont_report_errors = $pa_list;\n\n\t\treturn true;\n\t}\n/**\n * Returns array containing list of error numbers to ignore for reporting, halting or redirecting purposes.\n *\n * @return array Indexed array of ignored error numbers\n */\n\tpublic function getDontReportErrorList () {\n\t\treturn $this->opa_dont_report_errors;\n\t}\n/**\n * Clears error state.\n *\n */\n\tpublic function clearError() {\n\t\t$this->opn_error_number = 0;\n\t\t$this->ops_error_description = '';\n\t\t$this->ops_error_context = '';\n\t}\n/**\n * Handles halt on error.\n *\n * @access private\n */\n \tpublic function halt() {\n \t\tif (in_array($this->getErrorNumber(), $this->opa_dont_report_errors)) {\n \t\t\treturn false;\n \t\t}\n\n\t\tif ($this->opb_redirect_on_error) {\n\t\t\tif ($vs_error_page = $this->ops_redirect_on_error_page) {\n\t\t\t\theader(\"Location: \".$vs_error_page.\"?n=\".$this->getErrorNumber().\"&desc=\".urlencode($this->getErrorDescription()));\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->opb_report_on_error) {\n    \t\t$this->haltmsg($this->getErrorNumber().\": \".$this->getErrorMessage().\"<br/>\".$this->getErrorDescription().\" (in \".$this->getErrorContext().\")\");\n\t\t}\n\n    \tif (!$this->opb_halt_on_error)\n      \t\treturn;\n\n      \tdie(\"Request halted.\");\n  \t}\n/**\n * Prints message on halt.\n *\n * @access private\n */\n  \tpublic function haltmsg($msg) {\n    \tprintf(\"</td></tr></table><b>Error</b> %s<br/>\\n\", $msg);\n\t}\n /**\n * Determines whether file exists within include path\n *\n * @access private\n */\n \tpublic function file_exists_incpath($ps_file) {\n  \t\t$va_paths = explode(PATH_SEPARATOR, get_include_path());\n \t\tforeach ($va_paths as $vs_path) {\n\t\t\t$vs_fullpath = $vs_path . DIRECTORY_SEPARATOR . $ps_file;\n\t\t\tif (file_exists($vs_fullpath)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n", "<?php\n/** ---------------------------------------------------------------------\n * app/lib/Controller/Request/RequestHTTP.php :\n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2007-2022 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * @package CollectiveAccess\n * @subpackage Core\n * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3\n *\n * ----------------------------------------------------------------------\n */\n \n /**\n  *\n  */\nrequire_once(__CA_LIB_DIR__.\"/Controller/Request.php\");\n\n# ----------------------------------------\n# Authorization constants\n# ----------------------------------------\ndefine(\"__AUTH_EDIT_ACCESS__\", 0);\ndefine(\"__AUTH_VIEW_ACCESS__\", 1);\ndefine(\"__AUTH_NO_ACCESS__\", 2);\n\nclass RequestHTTP extends Request {\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tprivate $opb_is_dispatched;\n \t\t\n\t/**\n\t * Current session_id\n\t *\n\t * @var session\n\t * @access public\n\t */\n\tpublic $session_id;\n\t\n\t/**\n\t * User object for currently logged in user. Will be undefined if no user is logged in.\n\t * You may check to see if a user is logged in using the isLoggedIn() method.\n\t *\n\t * @var ca_users\n\t * @access public\n\t */\n\tpublic $user;\n\t\n\tprivate $opo_response;\n\t\n\tprivate $ops_script_name;\n\tprivate $ops_base_path;\n\tprivate $ops_path_info;\n\tprivate $ops_request_method;\n\tprivate $ops_raw_post_data = \"\";\n\n\tprivate $opa_params;\n    \n    /**\n     * Parsed request info: controller path, controller and action\n     */\n \tprivate $ops_parsed_module_path;\n \tprivate $ops_parsed_controller;\n \tprivate $ops_parsed_action;\n \tprivate $ops_parsed_action_extra;\n \tprivate $ops_parsed_controller_url;\n \tprivate $ops_parsed_is_app_plugin = false;\n \t\n \t\n \t/**\n \t * \n \t */\n \tstatic $html_purifier;\n \t\t\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function __construct($po_response, $pa_options=null) {\n\t\t$this->opo_response = $po_response;\n\t\tparent::__construct();\n\t\t\n\t\tglobal $AUTH_CURRENT_USER_ID;\n\t\t$AUTH_CURRENT_USER_ID = \"\";\n\n\t\tif (is_array($pa_options)) {\n\t\t\tif (isset($pa_options[\"no_headers\"]) && $pa_options[\"no_headers\"]) {\n\t\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t\t$pa_options[\"dont_create_new_session\"] = true;\n\t\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($pa_options[\"dont_redirect\"]) && $pa_options[\"dont_redirect\"]) {\n\t\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t\t}\n\t\t\t\n\t\t\t$va_sim_params = null;\n\t\t\tif (isset($pa_options[\"simulateWith\"]) && is_array($pa_options[\"simulateWith\"])) {\n\t\t\t\t$va_sim_params = $pa_options[\"simulateWith\"];\n\t\t\t\tif (isset($va_sim_params['GET'])) { $_GET = $va_sim_params['GET']; }\n\t\t\t\tif (isset($va_sim_params['POST'])) {$_POST = $va_sim_params['POST']; }\n\t\t\t\tif (isset($va_sim_params['COOKIE'])) {$_COOKIE = $va_sim_params['COOKIE']; }\n\t\t\t\t$_REQUEST = array_merge($_GET, $_POST, $_COOKIE);\n\t\t\t\t\n\t\t\t\tforeach(array(\n\t\t\t\t\t'SCRIPT_NAME', 'REQUEST_METHOD', 'PHP_AUTH_USER', 'PHP_AUTH_PW',\n\t\t\t\t\t'REQUEST_URI', 'PATH_INFO', 'REMOTE_ADDR', 'HTTP_USER_AGENT'\n\t\t\t\t) as $vs_k) {\n\t\t\t\t\tif (isset($va_sim_params[$vs_k])) { $_SERVER[$vs_k] = $va_sim_params[$vs_k]; }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$pa_options[\"no_authentication\"] = true;\n\t\t\t}\n\t\t}\n\n\t\t# figure out script name\n\t\t$va_tmp = (isset($_SERVER['SCRIPT_NAME']) && $_SERVER['SCRIPT_NAME']) ? explode('/', $_SERVER['SCRIPT_NAME']) : array();\n\t\t$this->ops_script_name = '';\n\t\t\n\t\t// Look for .php element. we can rely upon $_SERVER['SCRIPT_NAME'] to be the actual path to the \n\t\t// executing script due to a PHP bug present in several 7.x versions (see https://bugs.php.net/bug.php?id=74129) \n\t\twhile((!preg_match('!\\.php$!', $this->ops_script_name)) && (sizeof($va_tmp) > 0)) {\n\t\t\t$this->ops_script_name = trim(array_pop($va_tmp));\n\t\t}\n\n\t\t# create session\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n\n\t\t// restore session from token for service requests\n\t\tif(($this->ops_script_name==\"service.php\") && isset($_GET['authToken']) && (strlen($_GET['authToken']) > 0)) {\n\t\t\t$vs_token = preg_replace(\"/[^a-f0-9]/\", \"\", $_GET['authToken']); // sanitize\n\n\t\t\t$this->session_id = Session::restoreFromServiceAuthToken($vs_token, $vs_app_name);\n\t\t}\n\n\t\t// plain old session\n\t\tif(!$this->session_id) {\n\t\t\t$this->session_id = Session::init($vs_app_name, isset($pa_options[\"dont_create_new_session\"]) ? $pa_options[\"dont_create_new_session\"] : false);\n\t\t}\n\t\t\n\t\tif (!isset($pa_options[\"no_authentication\"]) || !$pa_options[\"no_authentication\"]) {\n\t\t\t$this->doAuthentication($pa_options);\n\t\t} else {\n\t\t\tif (isset($va_sim_params['user_id']) && $va_sim_params['user_id']) {\n\t\t\t\t$this->user = new ca_users($va_sim_params['user_id']);\n\t\t\t} else {\n\t\t\t\t$this->user = new ca_users();\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->opb_is_dispatched = false;\n\t\t\n\t\t$this->opa_params['GET'] =& $_GET;\n\t\t$this->opa_params['POST'] =& $_POST;\n\t\t$this->opa_params['COOKIE'] =& $_COOKIE;\n\t\t$this->opa_params['PATH'] = array();\n\t\t\n\t\t$this->ops_request_method = (isset($_SERVER[\"REQUEST_METHOD\"]) ? $_SERVER[\"REQUEST_METHOD\"] : null);\n\t\t\n\t\t/* allow authentication via URL for web service API like so: http://user:pw@example.com/ */\n\t\tif($this->ops_script_name==\"service.php\") {\n\t\t\t$this->ops_raw_post_data = file_get_contents(\"php://input\");\n\n\t\t\tif($_SERVER[\"PHP_AUTH_USER\"] && $_SERVER[\"PHP_AUTH_PW\"]){\n\t\t\t\t$this->doAuthentication(array(\n\t\t\t\t\t'noPublicUsers' => true,\n\t\t\t\t\t\"no_headers\" => true,\n\t\t\t\t\t\"dont_redirect\" => true,\n\t\t\t\t\t\"options\" => array(),\n\t\t\t\t\t\"user_name\" => $_SERVER[\"PHP_AUTH_USER\"],\n\t\t\t\t\t\"password\" => $_SERVER[\"PHP_AUTH_PW\"],\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->ops_base_path = join('/', $va_tmp);\n\t\t$this->ops_full_path = $_SERVER['REQUEST_URI'];\n\t\tif (!caUseCleanUrls() && !preg_match(\"!/index.php!\", $this->ops_full_path) && !preg_match(\"!/service.php!\", $this->ops_full_path)) { $this->ops_full_path = rtrim($this->ops_full_path, \"/\").\"/index.php\"; }\n\t\t$this->ops_full_path = preg_replace(\"![/]+!\", \"/\", $this->ops_full_path);\n\t\t$vs_path_info = str_replace($this->ops_script_name, \"\", str_replace(\"?\".$_SERVER['QUERY_STRING'], \"\", $this->ops_full_path));\n\t\t\n\t\t$this->ops_path_info = preg_replace(\"![/]+!\", \"/\", $vs_path_info ? \"/{$vs_path_info}\" : (isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : ''));\n\t\t\n\t\tif (__CA_URL_ROOT__) { $this->ops_path_info = preg_replace(\"!^\".__CA_URL_ROOT__.\"!\", \"\", $this->ops_path_info); }\n\t}\n\t# -------------------------------------------------------\n\t/** \n\t\tReturns a list of locale_ids to use for UI presentation in priority order\n\t\tThis will include the user's selected locale if one in logged in, as well as\n\t\tthe default locale_id(s) as configured in app.conf or global.conf\n\t\tusing the 'locale_defaults' directive. If no locales are set then a full list\n\t\tof locale_ids is returned.\n\t */\n\tpublic function getUILocales() {\n\t\t$va_locale_codes = array();\n\t\t$va_locale_ids = array();\n\t\tif ($this->isLoggedIn()) {\n\t\t\t$va_locale_codes[] = $this->user->getPreference('ui_locale');\n\t\t}\n\t\t\n\t\tif ($va_tmp = $this->config->getList('locale_defaults')) {\n\t\t\t$va_locale_codes = array_merge($va_locale_codes, $va_tmp);\n\t\t}\n\t\t\n\t\t\n\t\t$t_locale = new ca_locales();\n\t\tif (sizeof($va_locale_codes) == 0) {\n\t\t\tforeach(ca_locales::getLocaleList() as $vn_locale_id => $va_locale_info) {\n\t\t\t\t$va_locale_ids[] = $vn_locale_id;\n\t\t\t}\n\t\t} else {\n\t\t\tforeach($va_locale_codes as $vs_locale_code) {\n\t\t\t\tif ($vn_locale_id = $t_locale->loadLocaleByCode($vs_locale_code)) {\n\t\t\t\t\t$va_locale_ids[] = $vn_locale_id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!sizeof($va_locale_ids)) {\n\t\t\tdie(\"No locales configured?\");\n\t\t}\n\t\t\n\t\treturn $va_locale_ids;\n\t}\n\t# -------------------------------------------------------\n\tpublic static function isAjax() {\n\t\treturn ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH']==\"XMLHttpRequest\"));\n\t}\n\t# -------------------------------------------------------\n\tfunction isDownload($pb_set_download=null) {\n\t\tif (!is_null($pb_set_download)) {\n\t\t\tforeach(array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST') as $vs_method) {\n\t\t\t\t$this->opa_params[$vs_method]['download'] = ($pb_set_download) ? true : false;\n\t\t\t}\n\t\t\treturn $this->opa_params['GET']['download'];\n\t\t} else {\n\t\t\treturn $this->getParameter('download', pInteger) ? true : false;\n\t\t}\n\t}\n\t# -------------------------------------------------------\n\tpublic function getPathInfo() {\n\t\treturn $this->ops_path_info;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getFullUrlPath() {\n\t\treturn $this->ops_full_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getBaseUrlPath() {\n\t\treturn $this->ops_base_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getScriptName() {\n\t\treturn $this->ops_script_name;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRequestMethod() {\n\t\treturn $this->ops_request_method;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRawPostData() {\n\t\treturn $this->ops_raw_post_data;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setRawPostData($ps_post_data) {\n\t\t$this->ops_raw_post_data = $ps_post_data;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getSessionID() {\n\t\treturn $this->session_id;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getUser() {\n\t\treturn $this->user;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Set current user\n\t *\n\t * @param ca_users $user\n\t *\n\t * @return void\n\t */\n\tpublic function setUser(ca_users $user) : void {\n\t\t$this->user = $user;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getThemeUrlPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tif (!$pb_use_default && $this->isLoggedIn()) {\n\t\t\t$vs_theme = $this->user->getPreference('ui_theme');\n\t\t} else {\n\t\t\t$vs_theme = $this->config->get('theme');\t\t// default theme\n\t\t}\n\t\tif (!$vs_theme) { $vs_theme = $this->config->get('theme'); }\n\t\treturn $this->config->get('themes_url').'/'.$vs_theme;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getThemeDirectoryPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tif (!$pb_use_default && $this->isLoggedIn()) {\n\t\t\t$vs_theme = $this->user->getPreference('ui_theme');\n\t\t} else {\n\t\t\t$vs_theme = $this->config->get('theme');\t\t// default theme\n\t\t}\n\t\tif (!$vs_theme) { $vs_theme = $this->config->get('theme'); }\n\t\treturn $this->config->get('themes_directory').'/'.$vs_theme;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Returns url path to \"default\" theme. This is not (necessarily) the same as the configured theme for the installation\n\t * that is returned when calling getThemeUrlPath() with the $pb_use_default parameter set. The path returned\n\t * by this method is the url path to the base theme named \"default\"\n\t */\n\tpublic function getDefaultThemeUrlPath() {\n\t\treturn $this->config->get('themes_url').'/default';\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Returns path to \"default\" theme. This is not (necessarily) the same as the configured theme for the installation\n\t * that is returned when calling getThemeDirectoryPath() with the $pb_use_default parameter set. The path returned\n\t * by this method is the path to the base theme named \"default\"\n\t */\n\tpublic function getDefaultThemeDirectoryPath() {\n\t\treturn $this->config->get('themes_directory').'/default';\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getServiceViewPath(){\n\t\treturn $this->config->get('service_view_path');\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Return file path on server to views path in current theme.\n\t *\n\t * @param bool $pb_use_default Return path in default theme no matter what theme user has selected. [Default is false]\n\t * @return string Path to file on server\n\t */\n\tpublic function getViewsDirectoryPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tswitch($this->getScriptName()){\n\t\t\tcase \"service.php\":\n\t\t\t\treturn $this->getServiceViewPath();\n\t\t\t\tbreak;\n\t\t\tcase \"index.php\":\n\t\t\tdefault:\n\t\t\t\treturn $this->getThemeDirectoryPath($pb_use_default).'/views';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Search for and return file path on server for a theme file. The selected theme will be searched followed\n\t * by the default theme, ceasing when the file is found. \n\t *\n\t * @param string $ps_relative_file_path Path to theme file relative to the theme root directory. To find the file path of the base.css file \"css/base.css\" would be passed.\n\t * @return Path to file on server\n\t */\n\tpublic function getDirectoryPathForThemeFile($ps_relative_file_path) {\n\t\tif(\n\t\t\tfile_exists($vs_path = $this->getThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t\t||\n\t\t\tfile_exists($vs_path = $this->getDefaultThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t) {\n\t\t\treturn $vs_path;\n\t\t} \n\t\treturn null;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Search for and return URL path for a theme file. The selected theme will be searched followed\n\t * by the default theme, ceasing when the file is found. \n\t *\n\t * @param string $ps_relative_file_path Path to theme file relative to the theme root directory. To find the URL path of the base.css file \"css/base.css\" would be passed.\n\t * @return URL to file\n\t */\n\tpublic function getUrlPathForThemeFile($ps_relative_file_path) {\n\t\tif(\n\t\t\tfile_exists($this->getThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t) {\n\t\t\treturn $this->getThemeUrlPath().\"/{$ps_relative_file_path}\";\n\t\t} elseif(file_exists($this->getDefaultThemeDirectoryPath().\"/{$ps_relative_file_path}\")) {\n\t\t\treturn $this->getDefaultThemeUrlPath().\"/{$ps_relative_file_path}\";\n\t\t} \n\t\treturn null;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getAssetsUrlPath() {\n\t\treturn $this->config->get('ca_url_root').\"/assets\";\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getAssetsDirectoryPath() {\n\t\treturn $this->config->get('ca_base_dir').$this->config->get('ca_url_root').\"/assets\";\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function isDispatched() {\n\t\treturn $this->opb_is_dispatched;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function setIsDispatched($ps_is_dispatched=true) {\n\t\t$this->opb_is_dispatched = $ps_is_dispatched;\n\t}\n\t# -------------------------------------------------------\n\tpublic function isApplicationPlugin() {\n\t\treturn $this->ops_parsed_is_app_plugin;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setIsApplicationPlugin($pb_is_app_plugin) {\n\t\t$this->ops_parsed_is_app_plugin = $pb_is_app_plugin;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setModulePath($ps_module_path) {\n\t\t$this->ops_parsed_module_path = $ps_module_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getModulePath() {\n\t\tif ($this->isApplicationPlugin()) {\n\t\t\t// clean up module path for plugins (has \"/controllers\" tagged on the end\n\t\t\treturn preg_replace('!/controllers$!', '', $this->ops_parsed_module_path);\n\t\t}\n\t\treturn $this->ops_parsed_module_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setController($ps_controller) {\n\t\t$this->ops_parsed_controller = $ps_controller;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getController() {\n\t\treturn $this->ops_parsed_controller;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setAction($ps_action) {\n\t\t$this->ops_parsed_action = $ps_action;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getAction() {\n\t\treturn $this->ops_parsed_action;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setActionExtra($ps_action_extra) {\n\t\t$this->ops_parsed_action_extra = $ps_action_extra;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getActionExtra() {\n\t\treturn $this->ops_parsed_action_extra;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setControllerUrl($ps_url) {\n\t\t$this->ops_parsed_controller_url = $ps_url;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getControllerUrl() {\n\t\treturn $this->ops_parsed_controller_url;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRequestUrl($pb_absolute=false) {\n\t\t$va_url = array();\n\t\tif ($vs_tmp = $this->getBaseUrlPath()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getScriptName()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getModulePath()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getController()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getAction()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getActionExtra()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\t\n\t\t//foreach($this->opa_params['PATH'] as $vs_param => $vs_value) {\n\t\t//\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t//}\n\t\tif (is_array($this->opa_params['GET'])) {\n\t\t\tforeach($this->opa_params['GET'] as $vs_param => $vs_value) {\n\t\t\t\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t\t}\n\t\t}\n\t\tif (is_array($this->opa_params['PATH'])) {\n\t\t\tforeach($this->opa_params['PATH'] as $vs_param => $vs_value) {\n\t\t\t\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($pb_absolute) {\n\t\t\t// make returned URL absolute\n\t\t\tarray_unshift($va_url, $this->config->get('site_host'));\n\t\t}\n\t\t\n\t\treturn join('/', $va_url);\n\t}\n\t# --------------------------------------------------------------------------------\n\t/**\n\t * Return HTMLPurifier instance\n\t *\n\t * @return HTMLPurifier Returns instance\n\t */\n\tstatic public function getPurifier() {\n\t\tif (!RequestHTTP::$html_purifier) { \n\t\t\tRequestHTTP::$html_purifier = caGetHTMLPurifier(); \n\t\t}\n\t\treturn RequestHTTP::$html_purifier;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function parameterExists($pa_name, $ps_http_method=null, $pa_options=array()) {\n\t\tif(!is_array($pa_name)) { $pa_name = [$pa_name]; }\n\t\t\n\t\t$vm_val = null;\n\t\tforeach($pa_name as $ps_name) {\n\t\t\tif (in_array($ps_http_method, array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'))) {\n\t\t\t\t$vm_val = $this->opa_params[$ps_http_method][$ps_name];\n\t\t\t} else {\n\t\t\t\tforeach(array('GET', 'POST', 'PATH', 'COOKIE', 'REQUEST') as $http_method) {\n\t\t\t\t\t$vm_val = (array_key_exists($http_method, $this->opa_params) && array_key_exists($ps_name, $this->opa_params[$http_method])) ? $this->opa_params[$http_method][$ps_name] : null;\n\t\t\t\t\tif (isset($vm_val)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_array($vm_val) || (strlen($vm_val) > 0)) { break; } \n\t\t}\n\t\t\n\t\treturn $vm_val;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function getParameter($pa_name, $pn_type, $ps_http_method=null, $pa_options=array()) {\n\t\t$vm_val = $this->parameterExists($pa_name, $ps_http_method, $pa_options);\n\t\tif (!isset($vm_val)) { return \"\"; }\n\t\t\n\t\t$vm_val = str_replace(\"\\0\", '', $vm_val);\n\t\tif((caGetOption('purify', $pa_options, true) && $this->config->get('purify_all_text_input')) || caGetOption('forcePurify', $pa_options, false)) {\n\t\t    if(is_array($vm_val)) {\n\t\t        $vm_val = array_map(function($v) { return is_array($v) ? $v : str_replace(\"&amp;\", \"&\", RequestHTTP::getPurifier()->purify(rawurldecode($v))); }, $vm_val);\n\t\t    } else {\n\t\t        $vm_val = str_replace(\"&amp;\", \"&\", RequestHTTP::getPurifier()->purify(rawurldecode($vm_val)));\n\t\t    }\n\t\t}\n\t\t\n\t\tif ($vm_val == \"\") { return ($pn_type == pArray) ? [] : ''; }\n\t\t\n\t\tswitch($pn_type) {\n\t\t\t# -----------------------------------------\n\t\t\tcase pInteger:\n\t\t\t\tif (is_numeric($vm_val)) {\n\t\t\t\t\tif ($vm_val == intval($vm_val)) {\n\t\t\t\t\t\treturn (int)$vm_val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pFloat:\n\t\t\t\tif (is_numeric($vm_val)) {\n\t\t\t\t\treturn (float)$vm_val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pString:\n\t\t\t\tif (is_string($vm_val)) {\n\t\t\t\t\tif(caGetOption('retainBackslashes', $pa_options, true)) {\n\t\t\t\t\t\t$vm_val = str_replace(\"\\\\\", \"\\\\\\\\\", $vm_val);\t// retain backslashes for some strange people desire them as valid input\n\t\t\t\t\t}\n\t\t\t\t\tif(caGetOption('urldecode', $pa_options, true)) {\n\t\t\t\t\t\t$vm_val = rawurldecode($vm_val);\n\t\t\t\t\t}\n\t\t\t\t\treturn $vm_val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pArray:\n\t\t\t\tif (is_array($vm_val)) {\n\t\t\t\t\treturn $vm_val;\n\t\t\t\t} elseif(is_string($vm_val) || is_numeric($vm_val)) {\n\t\t\t\t\treturn [$vm_val];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t}\n\t\t\n\t\tdie(\"Invalid parameter type for $ps_name\\n\");\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function getParameters($pa_http_methods=null) {\n\t\tif (!$pa_http_methods) { $pa_http_methods = array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'); }\n\t\tif($pa_http_methods && !is_array($pa_http_methods)) { $pa_http_methods = array($pa_http_methods); }\n\t\t$va_params = array();\n\t\tif (!is_array($pa_http_methods)) { $pa_http_methods = array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'); }\n\t\tforeach($pa_http_methods as $http_method) {\n\t\t\tif (isset($this->opa_params[$http_method]) && is_array($this->opa_params[$http_method])) {\n\t\t\t\t$va_params = array_merge($va_params, $this->opa_params[$http_method]);\n\t\t\t}\n\t\t}\n\t\treturn $va_params;\n\t}\n\t# -------------------------------------------------------\n\tfunction setParameter($ps_name, $pm_value, $ps_http_method='GET') {\n\t\tif (in_array($ps_http_method, array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'))) {\n\t\t\t$this->opa_params[$ps_http_method][$ps_name] = $pm_value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t# -------------------------------------------------------\n \t/**\n\t *\n\t * Saves changes to user object and sends asynchronous request for search indexing\n\t * You should call this at the end of every request to ensure that user and session variables are saved.\n\t *\n\t * @access public\n\t */\n\tfunction close() {\n\t\tif (is_object($this->user)) {\n\t\t\t$this->user->close();\n\t\t}\n\n\t\tif(defined('__CA_SITE_HOSTNAME__') && strlen(__CA_SITE_HOSTNAME__) > 0) {\n\t\t\t$host_without_port = __CA_SITE_HOSTNAME__;\n\t\t\t$host_port = null;\n\t\t    if(preg_match(\"/:([\\d]+)$/\", $host_without_port, $m)) {\n\t\t    \t$host_without_port = preg_replace(\"/:[\\d]+$/\", '', $host_without_port);\n\t\t    \t$host_port = (int)$m[1];\n\t\t    } \n\t\t    \n\t\t\tif (\n\t\t\t    !($port = (int)$this->getAppConfig()->get('out_of_process_search_indexing_port'))\n\t\t\t    && \n\t\t\t    !($port = (int)getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_PORT'))\n\t\t\t) {\n                if(__CA_SITE_PROTOCOL__ == 'https') { \n                    $port = $host_port ?? 443;\t\n                } elseif(isset($_SERVER['SERVER_PORT']) &&  $_SERVER['SERVER_PORT']) {\n                    $port = $_SERVER['SERVER_PORT'];\n                } else {\n                    $port = $host_port ?? 80;\n                }\n            }\n\t\t\t\n\t\t\tif (\n\t\t\t    !($proto = trim($this->getAppConfig()->get('out_of_process_search_indexing_protocol')))\n\t\t\t    && \n\t\t\t    !($proto = getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_PROTOCOL'))\n\t\t\t) {\n\t\t\t    $proto = (($port == 443) || (__CA_SITE_PROTOCOL__ == 'https')) ? 'ssl' : 'tcp';\n\t\t\t}\n\t\t\t\n\t\t\tif (\n\t\t\t    !($indexing_hostname = trim($this->getAppConfig()->get('out_of_process_search_indexing_hostname')))\n\t\t\t    && \n\t\t\t    !($indexing_hostname = getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_HOSTNAME'))\n\t\t\t) {\n\t\t\t    $indexing_hostname = $host_without_port;\n\t\t\t}\n\t\t\t\n\t\t\t// trigger async search indexing\n\t\t\tif((__CA_APP_TYPE__ === 'PROVIDENCE') && !$this->getAppConfig()->get('disable_out_of_process_search_indexing')) {\n                require_once(__CA_MODELS_DIR__.\"/ca_search_indexing_queue.php\");\n                if (!ca_search_indexing_queue::lockExists()) {\n                \t$dont_verify_ssl_cert = (bool)$this->getAppConfig()->get('out_of_process_search_indexing_dont_verify_ssl_cert');\n                    $context = stream_context_create([\n\t\t\t\t\t\t'ssl' => [\n\t\t\t\t\t\t\t'verify_peer' => !$dont_verify_ssl_cert,\n\t\t\t\t\t\t\t'verify_peer_name' => !$dont_verify_ssl_cert\n\t\t\t\t\t\t]\n\t\t\t\t\t]);\n\n\t\t\t\t\t$r_socket = stream_socket_client($proto . '://'. $indexing_hostname.':'.$port, $errno, $errstr, ini_get(\"default_socket_timeout\"), STREAM_CLIENT_CONNECT, $context);\n\n                    if ($r_socket) {\n                        $http  = \"GET \".$this->getBaseUrlPath().\"/index.php?processIndexingQueue=1 HTTP/1.1\\r\\n\";\n                        $http .= \"Host: \".__CA_SITE_HOSTNAME__.\"\\r\\n\";\n                        $http .= \"Connection: Close\\r\\n\\r\\n\";\n                        fwrite($r_socket, $http);\n                        fclose($r_socket);\n                    }\n                }\n\t\t\t}\n\t\t}\n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Determines if a user is currently logged in. If a user is logged in you\n     * can safely access the user object via the user property. If this returns\n     * false, the user property will be unset and any method calls on it will (of course)\n     * result in an error.\n     *\n     * @access public \n     * @return bool True if a user is logged in, false if not.\n     */\t\n\tpublic function isLoggedIn() {\n\t\tif (is_object($this->user) && ($this->user->getUserID())) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false; \n\t\t}\n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Returns true if the currently logged in user has the specified role. You may specify the\n     * role as either an integer role_id, the role name or the role short name.\n     *\n     * @access public \n     * @return bool True if user has role, false if not.\n     */\t\n\tpublic function hasRole($pm_role) {\n\t\tif ($this->isLoggedIn()) {\n\t\t\treturn $this->user->hasRole($pm_role);\n\t\t}\n\t\treturn false; \n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Returns the user_id of the currently logged in user. This is the integer user_id,\n     * *NOT* the user name.\n     *\n     * @access public \n     * @return integer User_id of currently logged in user or null if user is not logged in.\n     */\t\n\tpublic function getUserID() {\n\t\tif ($this->isLoggedIn()) {\n\t\t\treturn $this->user->getUserID();\n\t\t}\n\t\treturn null;\n\t}\n\t# ----------------------------------------\n\t# Authentication\n\t# ----------------------------------------\n    /**\n     * \n     * Implements standard username/password and IP-address based user authentication. Applications\n     * requiring completely custom authentication methods should override this method. However, most of\n     * the time if you need custom authentication you can just create a custom user auth handler class (\"username/password\" authentication).\n     *\n     * One clean way to extend Auth is create a sub-class whose constructor calls addUserHandler() and delegates\n     * everything else to Auth.\n     *\n     * @access private \n     * @param array of login options (same as the associative option array in the class constructor)\n     */\t\n\tpublic function doAuthentication($pa_options) {\t\n\t\tglobal $AUTH_CURRENT_USER_ID;\n\n\t\t$o_event_log = new Eventlog();\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n\t\t\n\t\tforeach(array(\n\t\t\t'no_headers', 'dont_redirect_to_login', 'dont_create_new_session', 'dont_redirect_to_welcome',\n\t\t\t'user_name', 'password', 'options', 'noPublicUsers', 'dont_redirect', 'no_headers', 'redirect',\n\t\t\t'allow_external_auth'\n\t\t) as $vs_key) {\n\t\t\tif (!isset($pa_options[$vs_key])) { $pa_options[$vs_key] = null; }\n\t\t}\n\t\tif (!is_array($pa_options[\"options\"])) { $pa_options[\"options\"] = array(); }\n\t\t\n\t\tif ($pa_options[\"no_headers\"]) {\n\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t$pa_options[\"dont_create_new_session\"] = true;\n\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t}\n\t\t\n\t\tif ($pa_options[\"dont_redirect\"]) {\n\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t}\n\t\t\n\t\t$vb_login_successful = false;\n\t\tif (!$pa_options[\"user_name\"]) {\t\t// no incoming login\n\t\t\t//\n\t\t\t// is a user already logged in?\n\t\t\t//\n\t\t\tif ($vn_user_id = Session::getVar($vs_app_name.\"_user_id\")) { \t\t\t\t// does session have a user attached to it?\n\t\t\t\t// user is already logged in\n\n\t\t\t\t$this->user = new ca_users($vn_user_id);\t\t// add user object\n\n\t\t\t\tif ((!$this->user->isActive()) || ($this->user->numErrors()) || ($pa_options['noPublicUsers'] && $this->user->isPublicUser())) {\t\t\t// error means user_id in session is invalid\n\t\t\t\t\t$vb_login_successful = false;\n\t\t\t\t} else {\n\t\t\t\t\t$vb_login_successful = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($vb_login_successful) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Login was successful\n\t\t\t\t\tSession::setVar($vs_app_name.\"_lastping\",time());\t\t\t\t\t// set last time we heard from client in session\n\t\t\t\t\t$this->user->setLastPing(time());\t\n\t\t\t\t\t$AUTH_CURRENT_USER_ID = $vn_user_id;\n\t\t\t\t\t//$this->user->close(); ** will be called externally **\n\t\t\t\t\treturn $vb_login_successful;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!$vb_login_successful) {\n\t\t\t\t$this->user = new ca_users();\t\t// add user object\n\n                if (!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_USE_ADAPTER_LOGIN_FORM__) || $pa_options['allow_external_auth']) {\n                    $vs_tmp1 = $vs_tmp2 = null;\n                    if (($vn_auth_type = $this->user->authenticate($vs_tmp1, $vs_tmp2, $pa_options[\"options\"]))) {\t# error means user_id in session is invalid\n                        if (($pa_options['noPublicUsers'] && $this->user->isPublicUser()) || !$this->user->isActive()) {\n                            $o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login for user id '\".$vn_user_id.\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                            $vb_login_successful = false;\n                        } else {\n                            $vb_login_successful = true;\n                            $vn_user_id = $this->user->getUserID();\n                        }\n                    }\n\n                    if (!$vb_login_successful) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// throw user to login screen\n                        if (!$pa_options[\"dont_redirect_to_login\"]) {\n                            $o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login with redirect for user id '\".$vn_user_id.\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                            $vs_redirect = $this->getRequestUrl(true);\n\n                            if (strpos($vs_redirect, $this->config->get(\"auth_login_path\") !== -1)) {\n                                $vs_redirect = '';\n                            } else {\n                                $vs_redirect = '?redirect=' . urlencode($vs_redirect);\n                            }\n                            if ($_REQUEST['local']) { \n                            \t$vs_redirect .= ($vs_redirect ? \"&\" : \"?\").\"local=1\";\n                            }\n                            $this->opo_response->addHeader(\"Location\", $this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_path\") . $vs_redirect);\n                        }\n                        return false;\n                    }\n                } else {\n                \t// Redirect to external auth?\n                \ttry {\n                \t\treturn $this->user->authenticate($vs_tmp1, $vs_tmp2, $pa_options[\"options\"]);\n                \t} catch (Exception $e) {\n                \t\t$o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login with exception '\".$e->getMessage().\" (\".$_SERVER['REQUEST_URI'].\"); IP=\".$_SERVER[\"REMOTE_ADDR\"].\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                \t\t$this->opo_response->addHeader(\"Location\", $vs_auth_login_url);\n                \t\treturn false;\n                \t}\n                }\n\t\t\t}\n\t\t} \n\t\t\n\t\t//\n\t\t// incoming login\n\t\t//\n\t\tif ($pa_options[\"user_name\"]) {\n\t\t\t$vb_login_successful = false;\n\t\t\t$this->user = new ca_users();\n\n\t\t\tif (($vn_auth_type = $this->user->authenticate($pa_options[\"user_name\"], $pa_options[\"password\"], $pa_options[\"options\"]))) {\t# error means user_id in session is invalid\n\t\t\t\tif (($pa_options['noPublicUsers'] && $this->user->isPublicUser()) || !$this->user->isActive()) {\n\t\t\t\t\t$vb_login_successful = false;\n\t\t\t\t} else {\n\t\t\t\t\t$vb_login_successful = true;\n\t\t\t\t\t$vn_user_id = $this->user->getUserID();\n\t\t\t\t\t\n\t\t\t\t\tif (!defined('__CA_IS_SERVICE_REQUEST__')) { // service need to keep auth tokens around\n\t\t                Session::deleteSession();\n\t\t            }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (!$vb_login_successful) {\t\n\t\t\t$this->user = new ca_users();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// auth failed\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// throw user to login screen\n\t\t\tif ($pa_options[\"user_name\"]) {\n\t\t\t\t$o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login for '\".$pa_options[\"user_name\"].\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n\t\t\t}\n\t\t\tif (!$pa_options[\"dont_redirect_to_login\"]) {\n\t\t\t\t$vs_auth_login_url = $this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_path\");\n\t\t\t\t$this->opo_response->addHeader(\"Location\", $vs_auth_login_url);\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\t\t\n\t\t\t$o_event_log->log(array(\"CODE\" => \"LOGN\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Successful login for '\".$pa_options[\"user_name\"].\"'; IP=\".$_SERVER[\"REMOTE_ADDR\"].\"; user agent=\".RequestHTTP::ip()));\n\t\t    \n\t\t    $this->session_id = Session::init($vs_app_name, isset($pa_options[\"dont_create_new_session\"]) ? $pa_options[\"dont_create_new_session\"] : false);\n\t\t\t\n\t\t\tSession::setVar($vs_app_name.\"_user_auth_type\",$vn_auth_type);\t\t\t\t// type of auth used: 1=username/password; 2=ip-base auth\n\t\t\tSession::setVar($vs_app_name.\"_user_id\",$vn_user_id);\t\t\t\t\t\t// auth succeeded; set user_id in session\n\t\t\tSession::setVar($vs_app_name.\"_logintime\",time());\t\t\t\t\t\t\t// also set login time (unix timestamp) in session\n\t\t\tSession::setVar($vs_app_name.\"_lastping\",time());\n\t\t\t\n\t\t\t$this->user->setVar('last_login', time(), array('volatile' => true));\n\t\t\t$this->user->setLastLogout($this->user->getLastPing(), array('volatile' => true));\n\t\t\t\n\t\t\t$this->user->setMode(ACCESS_WRITE);\n\t\t\t$this->user->update();\n\t\t\t\n\t\t\t$AUTH_CURRENT_USER_ID = $vn_user_id;\n\n\t\t\tif ($pa_options['redirect']) {\n\t\t\t\t// redirect to specified URL\n\t\t\t\t$this->opo_response->setRedirect($pa_options['redirect']);\n\t\t\t\t$this->opo_response->sendResponse();\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\tif ((!$pa_options[\"dont_redirect_to_welcome\"]) && !AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_USE_ADAPTER_LOGIN_FORM__)) {\n\t\t\t\t// redirect to \"welcome\" page\n\t\t\t\t$this->opo_response->setRedirect($this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_welcome_path\"));\n\t\t\t\t$this->opo_response->sendResponse();\n\t\t\t\texit;\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns the IP address of the remote client\n\t *\n\t * @access public\n\t * @return (string) - the IP address of the remote client\n\t */\n\tpublic function getClientIP() {\n\t\treturn self::ip();\n\t}\n\t# ----------------------------------------\n\tpublic function deauthenticate() {\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n    \n        AuthenticationManager::deauthenticate();    \n\t\tif ($this->isLoggedIn()) {\n\t\t\tSession::setVar(\"{$vs_app_name}_user_id\",'');\n\t\t\t//Session::deleteSession();\n\t\t\t$this->user = null;\n\t\t}\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns true if this request is an attempt to authenticate via the web service API\n\t * (in this case access control measures should be disabled)\n\t *\n\t * @return boolean\n\t * @access public\n\t */\n\tpublic function isServiceAuthRequest() {\n\t\tif(defined('__CA_IS_SERVICE_REQUEST__') && __CA_IS_SERVICE_REQUEST__) { return true; }\n\t\tif($this->getParameter(\"method\",pString)==\"auth\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif($this->getParameter(\"method\",pString)==\"getUserID\") {\n\t\t\treturn true;\n\t\t}\n\n\n\t\t$va_action = explode(\"#\",$_SERVER[\"HTTP_SOAPACTION\"]); // I hope this is set no matter what Soap client you use :-)\n\n\t\tif(strlen($va_action[1])>0 && trim(str_replace('\"',\"\",$va_action[1])) == \"auth\"){\n\t\t\treturn true;\n\t\t}\n\n\t\tif(strlen($va_action[1])>0 && trim(str_replace('\"',\"\",$va_action[1])) == \"getUserID\"){\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns a unique key identifying this request for caching purposes\n\t *\n\t * @return string\n\t */\n\tpublic function getHash() {\n\t\treturn md5(\n\t\t\tserialize($this->getParameters(array('POST', 'GET', 'REQUEST'))) .\n\t\t\t$this->getRawPostData() .\n\t\t\t$this->getRequestMethod() .\n\t\t\t$this->getFullUrlPath() .\n\t\t\t$this->getScriptName() .\n\t\t\t($this->isLoggedIn() ? $this->getUserID() : '')\n\t\t);\n\t}\n\t# ----------------------------------------\n\t/** \n\t * Return IP address for current requestor\n\t *\n\t * @return string\n\t */\n\tstatic public function ip() {\n\t\tif (isset($_SERVER['HTTP_X_REAL_IP']) && $_SERVER['HTTP_X_REAL_IP']) { return $_SERVER['HTTP_X_REAL_IP']; }\n\t\tif (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR']) { return $_SERVER['HTTP_X_FORWARDED_FOR']; }\n\t\treturn $_SERVER['REMOTE_ADDR'];\n\t}\n\t# ----------------------------------------\n}\n"], "fixing_code": ["<?php\n/* ----------------------------------------------------------------------\n * system/ErrorController.php : Error display controller\n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2009-2021 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * ----------------------------------------------------------------------\n */\n\nrequire_once(__CA_LIB_DIR__.\"/ApplicationError.php\");\n\nclass ErrorController extends ActionController {\n\t# -------------------------------------------------------\n\tfunction Show() {\n\t\t$o_purify = caGetHTMLPurifier();\n\t\t\n\t\t$va_nums = explode(';', $this->request->getParameter('n', pString));\n\t\t\n\t\t$va_error_messages = array();\n\t\tif (is_array($va_nums)) {\n\t\t\t$o_err = new ApplicationError(0, '', '', '', false, false);\n\t\t\tforeach($va_nums as $vn_error_number) {\n\t\t\t\t$o_err->setError($vn_error_number, '', '', false, false);\n\t\t\t\t$va_error_messages[] = $o_err->getErrorMessage();\n\t\t\t}\n\t\t}\n\t\t$this->view->setVar('error_messages', $va_error_messages);\n\t\t$this->view->setVar('referrer', $o_purify->purify($this->request->getParameter('r', pString)));\n\t\t$this->render('error_html.php');\n\t}\n\t# -------------------------------------------------------\n}\n", "<?php\n/** ---------------------------------------------------------------------\n * app/lib/ApplicationError.php : \n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2000-2015 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * @package CollectiveAccess\n * @subpackage Core\n * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3\n *\n * ----------------------------------------------------------------------\n */\n \n /**\n  *\n  */\n \nrequire_once(__CA_LIB_DIR__.\"/Configuration.php\");\n\n/**\n * Standard error handling class. Each Error instance represents a single error that has occurred.\n *\n * Provides for halting on critical errors, localized and standardized error messages and codes and\n * redirecting to \"site down\" page upon error.\n *\n */\nclass ApplicationError {\n/**\n * Numeric code of current error\n *\n * @access private\n */\n\tprivate $opn_error_number = 0;\t\t\t# standard error code (as defined in $error_messages hash)\n/**\n * Text description of current error\n *\n * @access private\n */\n\tprivate $ops_error_description = '';\t# instance-specific description of error (eg. MySQL error text)\n/**\n * Context of current error. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n *\n * @access private\n */\n\tprivate $ops_error_context = '';\t\t# instance-specific context of error (eg. SQL code that caused MySQL error)\n\n/**\n * Source code for error. While it can be used as a general-purpose identifier for the cause of an error, it typically used to record which field in an input form the error is associated with.\n *\n * @access private\n */\n\tprivate $ops_error_source = '';\t\t\t# instance-specific source of error (eg. the field in a form this error is associated with)\n\n\n/**\n * Boolean indicating if we should halt request on this error\n *\n * @access private\n */\n\tprivate $opb_halt_on_error = true;\n/**\n * Boolean indicating if we should emit visible (and quite ugly) output on this error\n *\n * @access private\n */\n\tprivate $opb_report_on_error = true;\n/**\n * Boolean indicating if we should redirect to the url in $ops_redirect_on_error_page on this error\n *\n * @access private\n */\n\tprivate $opb_redirect_on_error = true;\n/**\n * The current locale. Used to determine which set of localized error messages to use. Default is US English (\"us_en\")\n *\n * @access private\n */\n\tprivate $ops_locale = \"en_us\";\t\t# default locale is US English\n/**\n * URL of page to redirect to upon error, if $opb_redirect_on_error is set\n *\n * @access private\n */\t\n\tprivate $ops_redirect_on_error_page = '';\n/**\n * Indexed array of error numbers to ignore opb_halt_on_error, opb_report_on_error and opb_redirect_on_error for\n *\n * @access private\n */\t\n\tprivate $opa_dont_report_errors = array(251);\t\n/**\n * Configuration() object containing error messages\n *\n * @access private\n */\t\n\tprivate $opo_error_messages;\n\t\n/**\n * Constructor takes optional parameters to create a new error. If parameters are omitted, an empty (non-error state)\n * error object is created. An error state can subsequently be set using the setError() method\n *\n * @param integer $pn_error_number The numeric error code. Code should be defined in the error definition file\n * @param string $ps_error_description Description of error condition\n * @param string $ps_error_context Context where error occurred. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n * @param string $ps_error_source Source of error - typically a string identifying the field in a form where the error occurred.\n * @param bool $pb_halt_on_error Whether or not to halt on error state (ie. whether do die()) [default is true]\n * @param bool $pb_report_on_error Whether or not to emit a visible report of error state [default is true]\n * @param string $ps_error_definition_file Path to error definition file; if omitted default file, based upon locale, is used\n */\t\n\tpublic function __construct($pn_error_number=0, $ps_error_description='', $ps_error_context='', $ps_error_source='', $pb_halt_on_error = true, $pb_report_on_error = true, $ps_error_definition_file='') {\n \t\t$this->opo_config = Configuration::load();\n \t\t\n\t\t$this->ops_redirect_on_error_page = $this->opo_config->get(\"error_redirect_to_page\");\n\t\t\n\t\t# Set locale, if necessary\n\t\tif (($vs_locale = $this->opo_config->get(\"locale\")) && ((file_exists(\"Error/errors.\".$vs_locale)) || ($this->file_exists_incpath(\"Error/errors.\".$vs_locale)))) {\n\t\t\t$this->ops_locale = $vs_locale;\n\t\t} \n\t\t\n\t\t# load error messages\n\t\t$vs_error_definitions_loaded = 0;\n\t\tif ($ps_error_definition_file) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile($ps_error_definition_file);\n\t\t} else {\n\t\t\tif ($vs_config_error_definition_file = $this->opo_config->get(\"error_definition_file\")) {\n\t\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile($vs_config_error_definition_file);\n\t\t\t}\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile(__CA_LIB_DIR__.\"/Error/errors.\".$this->ops_locale);\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\t$vs_error_definitions_loaded = $this->setErrorDefinitionFile(__CA_LIB_DIR__.\"/Error/errors.en_us\");\n\t\t}\n\t\tif (!$vs_error_definitions_loaded) {\n\t\t\tdie(\"Error.php: Couldn't load error definitions!\\n\");\n\t\t}\n\t\t\n\t\t\n\t\t$this->opb_halt_on_error = $pb_halt_on_error;\n\t\t$this->opb_report_on_error = $pb_report_on_error;\n\t\tif ($pn_error_number) {\n\t\t\t$this->setError($pn_error_number, $ps_error_description, $ps_error_context, $ps_error_source);\n\t\t}\n\t}\n/**\n * Sets an error state.\n *\n * Note: if the configuration directive 'error_email_notification_to' is set to an e-mail address in the application configuration file\n * a notification of error will be sent.\n *\n * @param integer $pn_error_number The numeric error code. Code should be defined in the error definition file\n * @param string $ps_error_description Description of error condition\n * @param string $ps_error_context Context where error occurred. This is typically the Class name and method name where the error occurred. Ex. \"Configuration->new()\"\n * @param string $ps_error_source Source of error - typically a string identifying the field in a form where the error occurred.\n * @return integer Always returns 1\n */\t\t\n\tpublic function setError ($pn_error_number, $ps_error_description='', $ps_error_context='', $ps_error_source='') {\n\t\t$this->opn_error_number = (int)$pn_error_number;\n\t\t$this->ops_error_description = $ps_error_description;\n\t\t$this->ops_error_context = $ps_error_context;\n\t\t$this->ops_error_source = $ps_error_source;\n\t\t\n\t\tif (($this->opb_halt_on_error) || ($this->opb_report_on_error)) {\n\t\t\t$this->halt();\n\t\t}\n\t\treturn 1;\n\t}\n/**\n * Set error output options: halt on error, report on error and redirect on error. Halt on error, well..., halts the request\n * and prints a message. Report on error prints an error message but does not halt. This can be useful for debugging. Redirect\n * on error redirects the request to a specified URL on error, passing basic information about the error in the URL query\n * parameters. This can be useful for cleanly logging and handling errors in a production application.\n *\n * @param bool $pb_halt_and_report_on_error True if halt, report and redirect should be active, false if not. Generally this\n * method is used to turn all options off in one shot.\n * @return integer Always return 1\n */\t\n\tpublic function setErrorOutput($pb_halt_and_report_on_error) {\n\t\t$this->opb_halt_on_error = $pb_halt_and_report_on_error;\n\t\t$this->opb_report_on_error = $pb_halt_and_report_on_error;\n\t\t$this->opb_redirect_on_error = $pb_halt_and_report_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set halt on error option. If set to true, an error state will cause the request to halt.\n *\n * @param integer $pb_halt_on_error True to halt on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setHaltOnError ($pb_halt_on_error) {\n\t\t$this->opb_halt_on_error = $pb_halt_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set report on error option. If set to true, an error state will cause an error message to be printed.\n *\n * @param integer $pb_report_on_error True to print an error message on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setReportOnError ($pb_report_on_error) {\n\t\t$this->opb_report_on_error = $pb_report_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set redirect on error option. If set to true, an error state will the request to be redirected to a URL\n * specified by the 'error_redirect_to_page' directive in the application configuration file. This\n * URL can be overridden using the setRedirectOnErrorURL() method.\n *\n * Note that query parameters describing the error state will be appended to the redirect URL. These parameters are:\n *\n * - n = Error number [integer]\n * - desc = Error description [string]\n *\n * @param integer $pb_redirect_on_error True to redirect to another URL on error, false otherwise.\n * @return integer Always returns 1\n */\t\n\tpublic function setRedirectOnError ($pb_redirect_on_error) {\n\t\t$this->opb_redirect_on_error = $pb_redirect_on_error;\n\t\treturn 1;\n\t}\n/**\n * Set URL to redirect to when redirect on error option is set. Normally, the URL is taken from the \n * 'error_redirect_to_page' directive in the application configuration file. Use this method to override that\n * value on a per-error basis.\n *\n * @param integer $ps_redirect_on_error_url The URL to redirect to. The URL should be absolute or root-relative \n * without query parameters. Query parameters containing information about the error states will be appended to\n * this URL.\n */\t\n\tpublic function setRedirectOnErrorURL ($ps_redirect_on_error_url) {\n\t\t$this->ops_redirect_on_error_page = $ps_redirect_on_error_url;\n\t\treturn 1;\n\t}\n/**\n * Loads an error definition file. By default, the error definition file is a standard system error file for the current\n * locale (if locale is set by the 'locale' directive in the application configuration file). If the locale is not set or\n * there is no standard error definition file for the locale, the default en_us (US English) locale is used. You can override\n * the use of standard locale-based error messages with your own error definitions by calling this method with the path to your error\n * definition file. \n *\n * An error definition file is simply a standard configuration file containing one error message per line. The configuration directive (or \"key\")\n * for each error is the error number. The value is the error message itself.\n *\n * All error numbers below 9999 are reserved for use by the WebLib libraries.\n *\n * @param string $ps_error_definition_file File path to error definition file\n * @return integer Returns 1 on success, zero on failure\n */\t\n\tpublic function setErrorDefinitionFile ($ps_error_definition_file) {\n\t\t$this->opo_error_messages = Configuration::load($ps_error_definition_file);\n\t\tif ($this->opo_error_messages->isError()) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn 1;\n\t}\n/**\n * Returns an indexed array with a complete description of the current error state. The format of the array is:\n *\n * Index 0 = Error number\n * Index 1 = Error message\n * Index 2 = Error description\n * Index 3 = Error context\n * Index 4 = Error source code\n *\n * @return array Error description\n */\n\tpublic function getError () {\n\t\treturn array($this->opn_error_number, $this->getErrorMessage($this->opn_error_number), $this->ops_error_description, $this->ops_error_context, $this->ops_error_source);\n\t}\n/**\n * Returns the error number of the current error state.\n *\n * @return integer Error number\n */\n\tpublic function getErrorNumber() {\n\t\treturn $this->opn_error_number;\n\t}\n/**\n * Returns the error description of the current error state.\n *\n * @return string Error description\n */\n\tpublic function getErrorDescription() {\n\t\treturn $this->ops_error_description;\n\t}\n/**\n * Returns the context of the current error state.\n *\n * @return string Error context\n */\n\tpublic function getErrorContext() {\n\t\treturn $this->ops_error_context;\n\t}\n/**\n * Returns the error message of the current error state.\n *\n * @return string Error message\n */\n\tpublic function getErrorMessage() {\n\t\t$vs_error_message = $this->opo_error_messages->get($this->opn_error_number);\n\t\tif ($vs_error_message) {\n\t\t\treturn $vs_error_message;\n\t\t} else {\n\t\t\treturn \"Unknown error: \".(int)$this->opn_error_number;\n\t\t}\n\t}\n\t\n/**\n * Returns the source of the current error.\n *\n * @return string Error source code\n */\n\tpublic function getErrorSource() {\n\t\treturn $this->ops_error_source;\n\t}\n\t\n/**\n * Returns true if halt on error is current set, false otherwise.\n *\n * @return bool Halt on error option setting\n */\n\tpublic function getHaltOnError () {\n\t\treturn $this->opb_halt_on_error;\n\t}\n/**\n * Returns true if report on error is current set, false otherwise.\n *\n * @return bool Report on error option setting\n */\n\tpublic function getReportOnError () {\n\t\treturn $this->opb_report_on_error;\n\t}\n/**\n * Sets the \"dont report error\" list to the supplied array.\n *\n * @param $pa_list array Indexed array of error number to ignore for halting, reporting or redirecting purposes.\n * @return bool Halt on error option setting\n */\n\tpublic function setDontReportErrorList ($pa_list) {\n\t\tif (!is_array($pa_list)) \n\t\t\treturn false;\n\n\t\t$this->opa_dont_report_errors = $pa_list;\n\n\t\treturn true;\n\t}\n/**\n * Returns array containing list of error numbers to ignore for reporting, halting or redirecting purposes.\n *\n * @return array Indexed array of ignored error numbers\n */\n\tpublic function getDontReportErrorList () {\n\t\treturn $this->opa_dont_report_errors;\n\t}\n/**\n * Clears error state.\n *\n */\n\tpublic function clearError() {\n\t\t$this->opn_error_number = 0;\n\t\t$this->ops_error_description = '';\n\t\t$this->ops_error_context = '';\n\t}\n/**\n * Handles halt on error.\n *\n * @access private\n */\n \tpublic function halt() {\n \t\tif (in_array($this->getErrorNumber(), $this->opa_dont_report_errors)) {\n \t\t\treturn false;\n \t\t}\n\n\t\tif ($this->opb_redirect_on_error) {\n\t\t\tif ($vs_error_page = $this->ops_redirect_on_error_page) {\n\t\t\t\theader(\"Location: \".$vs_error_page.\"?n=\".$this->getErrorNumber().\"&desc=\".urlencode($this->getErrorDescription()));\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\n\t\tif ($this->opb_report_on_error) {\n    \t\t$this->haltmsg($this->getErrorNumber().\": \".$this->getErrorMessage().\"<br/>\".$this->getErrorDescription().\" (in \".$this->getErrorContext().\")\");\n\t\t}\n\n    \tif (!$this->opb_halt_on_error)\n      \t\treturn;\n\n      \tdie(\"Request halted.\");\n  \t}\n/**\n * Prints message on halt.\n *\n * @access private\n */\n  \tpublic function haltmsg($msg) {\n    \tprintf(\"</td></tr></table><b>Error</b> %s<br/>\\n\", $msg);\n\t}\n /**\n * Determines whether file exists within include path\n *\n * @access private\n */\n \tpublic function file_exists_incpath($ps_file) {\n  \t\t$va_paths = explode(PATH_SEPARATOR, get_include_path());\n \t\tforeach ($va_paths as $vs_path) {\n\t\t\t$vs_fullpath = $vs_path . DIRECTORY_SEPARATOR . $ps_file;\n\t\t\tif (file_exists($vs_fullpath)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n", "<?php\n/** ---------------------------------------------------------------------\n * app/lib/Controller/Request/RequestHTTP.php :\n * ----------------------------------------------------------------------\n * CollectiveAccess\n * Open-source collections management software\n * ----------------------------------------------------------------------\n *\n * Software by Whirl-i-Gig (http://www.whirl-i-gig.com)\n * Copyright 2007-2022 Whirl-i-Gig\n *\n * For more information visit http://www.CollectiveAccess.org\n *\n * This program is free software; you may redistribute it and/or modify it under\n * the terms of the provided license as published by Whirl-i-Gig\n *\n * CollectiveAccess is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTIES whatsoever, including any implied warranty of \n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * This source code is free and modifiable under the terms of \n * GNU General Public License. (http://www.gnu.org/copyleft/gpl.html). See\n * the \"license.txt\" file for details, or visit the CollectiveAccess web site at\n * http://www.CollectiveAccess.org\n *\n * @package CollectiveAccess\n * @subpackage Core\n * @license http://www.gnu.org/copyleft/gpl.html GNU Public License version 3\n *\n * ----------------------------------------------------------------------\n */\n \n /**\n  *\n  */\nrequire_once(__CA_LIB_DIR__.\"/Controller/Request.php\");\n\n# ----------------------------------------\n# Authorization constants\n# ----------------------------------------\ndefine(\"__AUTH_EDIT_ACCESS__\", 0);\ndefine(\"__AUTH_VIEW_ACCESS__\", 1);\ndefine(\"__AUTH_NO_ACCESS__\", 2);\n\nclass RequestHTTP extends Request {\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tprivate $opb_is_dispatched;\n \t\t\n\t/**\n\t * Current session_id\n\t *\n\t * @var session\n\t * @access public\n\t */\n\tpublic $session_id;\n\t\n\t/**\n\t * User object for currently logged in user. Will be undefined if no user is logged in.\n\t * You may check to see if a user is logged in using the isLoggedIn() method.\n\t *\n\t * @var ca_users\n\t * @access public\n\t */\n\tpublic $user;\n\t\n\tprivate $opo_response;\n\t\n\tprivate $ops_script_name;\n\tprivate $ops_base_path;\n\tprivate $ops_path_info;\n\tprivate $ops_request_method;\n\tprivate $ops_raw_post_data = \"\";\n\n\tprivate $opa_params;\n    \n    /**\n     * Parsed request info: controller path, controller and action\n     */\n \tprivate $ops_parsed_module_path;\n \tprivate $ops_parsed_controller;\n \tprivate $ops_parsed_action;\n \tprivate $ops_parsed_action_extra;\n \tprivate $ops_parsed_controller_url;\n \tprivate $ops_parsed_is_app_plugin = false;\n \t\n \t\n \t/**\n \t * \n \t */\n \tstatic $html_purifier;\n \t\t\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function __construct($po_response, $pa_options=null) {\n\t\t$this->opo_response = $po_response;\n\t\tparent::__construct();\n\t\t\n\t\tglobal $AUTH_CURRENT_USER_ID;\n\t\t$AUTH_CURRENT_USER_ID = \"\";\n\n\t\tif (is_array($pa_options)) {\n\t\t\tif (isset($pa_options[\"no_headers\"]) && $pa_options[\"no_headers\"]) {\n\t\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t\t$pa_options[\"dont_create_new_session\"] = true;\n\t\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t\t}\n\t\t\t\n\t\t\tif (isset($pa_options[\"dont_redirect\"]) && $pa_options[\"dont_redirect\"]) {\n\t\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t\t}\n\t\t\t\n\t\t\t$va_sim_params = null;\n\t\t\tif (isset($pa_options[\"simulateWith\"]) && is_array($pa_options[\"simulateWith\"])) {\n\t\t\t\t$va_sim_params = $pa_options[\"simulateWith\"];\n\t\t\t\tif (isset($va_sim_params['GET'])) { $_GET = $va_sim_params['GET']; }\n\t\t\t\tif (isset($va_sim_params['POST'])) {$_POST = $va_sim_params['POST']; }\n\t\t\t\tif (isset($va_sim_params['COOKIE'])) {$_COOKIE = $va_sim_params['COOKIE']; }\n\t\t\t\t$_REQUEST = array_merge($_GET, $_POST, $_COOKIE);\n\t\t\t\t\n\t\t\t\tforeach(array(\n\t\t\t\t\t'SCRIPT_NAME', 'REQUEST_METHOD', 'PHP_AUTH_USER', 'PHP_AUTH_PW',\n\t\t\t\t\t'REQUEST_URI', 'PATH_INFO', 'REMOTE_ADDR', 'HTTP_USER_AGENT'\n\t\t\t\t) as $vs_k) {\n\t\t\t\t\tif (isset($va_sim_params[$vs_k])) { $_SERVER[$vs_k] = $va_sim_params[$vs_k]; }\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t$pa_options[\"no_authentication\"] = true;\n\t\t\t}\n\t\t}\n\n\t\t# figure out script name\n\t\t$va_tmp = (isset($_SERVER['SCRIPT_NAME']) && $_SERVER['SCRIPT_NAME']) ? explode('/', $_SERVER['SCRIPT_NAME']) : array();\n\t\t$this->ops_script_name = '';\n\t\t\n\t\t// Look for .php element. we can rely upon $_SERVER['SCRIPT_NAME'] to be the actual path to the \n\t\t// executing script due to a PHP bug present in several 7.x versions (see https://bugs.php.net/bug.php?id=74129) \n\t\twhile((!preg_match('!\\.php$!', $this->ops_script_name)) && (sizeof($va_tmp) > 0)) {\n\t\t\t$this->ops_script_name = trim(array_pop($va_tmp));\n\t\t}\n\n\t\t# create session\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n\n\t\t// restore session from token for service requests\n\t\tif(($this->ops_script_name==\"service.php\") && isset($_GET['authToken']) && (strlen($_GET['authToken']) > 0)) {\n\t\t\t$vs_token = preg_replace(\"/[^a-f0-9]/\", \"\", $_GET['authToken']); // sanitize\n\n\t\t\t$this->session_id = Session::restoreFromServiceAuthToken($vs_token, $vs_app_name);\n\t\t}\n\n\t\t// plain old session\n\t\tif(!$this->session_id) {\n\t\t\t$this->session_id = Session::init($vs_app_name, isset($pa_options[\"dont_create_new_session\"]) ? $pa_options[\"dont_create_new_session\"] : false);\n\t\t}\n\t\t\n\t\tif (!isset($pa_options[\"no_authentication\"]) || !$pa_options[\"no_authentication\"]) {\n\t\t\t$this->doAuthentication($pa_options);\n\t\t} else {\n\t\t\tif (isset($va_sim_params['user_id']) && $va_sim_params['user_id']) {\n\t\t\t\t$this->user = new ca_users($va_sim_params['user_id']);\n\t\t\t} else {\n\t\t\t\t$this->user = new ca_users();\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->opb_is_dispatched = false;\n\t\t\n\t\t$this->opa_params['GET'] =& $_GET;\n\t\t$this->opa_params['POST'] =& $_POST;\n\t\t$this->opa_params['COOKIE'] =& $_COOKIE;\n\t\t$this->opa_params['PATH'] = array();\n\t\t\n\t\t$this->ops_request_method = (isset($_SERVER[\"REQUEST_METHOD\"]) ? $_SERVER[\"REQUEST_METHOD\"] : null);\n\t\t\n\t\t/* allow authentication via URL for web service API like so: http://user:pw@example.com/ */\n\t\tif($this->ops_script_name==\"service.php\") {\n\t\t\t$this->ops_raw_post_data = file_get_contents(\"php://input\");\n\n\t\t\tif($_SERVER[\"PHP_AUTH_USER\"] && $_SERVER[\"PHP_AUTH_PW\"]){\n\t\t\t\t$this->doAuthentication(array(\n\t\t\t\t\t'noPublicUsers' => true,\n\t\t\t\t\t\"no_headers\" => true,\n\t\t\t\t\t\"dont_redirect\" => true,\n\t\t\t\t\t\"options\" => array(),\n\t\t\t\t\t\"user_name\" => $_SERVER[\"PHP_AUTH_USER\"],\n\t\t\t\t\t\"password\" => $_SERVER[\"PHP_AUTH_PW\"],\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\t\t\n\t\t$this->ops_base_path = join('/', $va_tmp);\n\t\t$this->ops_full_path = $_SERVER['REQUEST_URI'];\n\t\tif (!caUseCleanUrls() && !preg_match(\"!/index.php!\", $this->ops_full_path) && !preg_match(\"!/service.php!\", $this->ops_full_path)) { $this->ops_full_path = rtrim($this->ops_full_path, \"/\").\"/index.php\"; }\n\t\t$this->ops_full_path = preg_replace(\"![/]+!\", \"/\", $this->ops_full_path);\n\t\t$vs_path_info = str_replace($this->ops_script_name, \"\", str_replace(\"?\".$_SERVER['QUERY_STRING'], \"\", $this->ops_full_path));\n\t\t\n\t\t$this->ops_path_info = preg_replace(\"![/]+!\", \"/\", $vs_path_info ? \"/{$vs_path_info}\" : (isset($_SERVER['PATH_INFO']) ? $_SERVER['PATH_INFO'] : ''));\n\t\t\n\t\tif (__CA_URL_ROOT__) { $this->ops_path_info = preg_replace(\"!^\".__CA_URL_ROOT__.\"!\", \"\", $this->ops_path_info); }\n\t}\n\t# -------------------------------------------------------\n\t/** \n\t\tReturns a list of locale_ids to use for UI presentation in priority order\n\t\tThis will include the user's selected locale if one in logged in, as well as\n\t\tthe default locale_id(s) as configured in app.conf or global.conf\n\t\tusing the 'locale_defaults' directive. If no locales are set then a full list\n\t\tof locale_ids is returned.\n\t */\n\tpublic function getUILocales() {\n\t\t$va_locale_codes = array();\n\t\t$va_locale_ids = array();\n\t\tif ($this->isLoggedIn()) {\n\t\t\t$va_locale_codes[] = $this->user->getPreference('ui_locale');\n\t\t}\n\t\t\n\t\tif ($va_tmp = $this->config->getList('locale_defaults')) {\n\t\t\t$va_locale_codes = array_merge($va_locale_codes, $va_tmp);\n\t\t}\n\t\t\n\t\t\n\t\t$t_locale = new ca_locales();\n\t\tif (sizeof($va_locale_codes) == 0) {\n\t\t\tforeach(ca_locales::getLocaleList() as $vn_locale_id => $va_locale_info) {\n\t\t\t\t$va_locale_ids[] = $vn_locale_id;\n\t\t\t}\n\t\t} else {\n\t\t\tforeach($va_locale_codes as $vs_locale_code) {\n\t\t\t\tif ($vn_locale_id = $t_locale->loadLocaleByCode($vs_locale_code)) {\n\t\t\t\t\t$va_locale_ids[] = $vn_locale_id;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (!sizeof($va_locale_ids)) {\n\t\t\tdie(\"No locales configured?\");\n\t\t}\n\t\t\n\t\treturn $va_locale_ids;\n\t}\n\t# -------------------------------------------------------\n\tpublic static function isAjax() {\n\t\treturn ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && $_SERVER['HTTP_X_REQUESTED_WITH']==\"XMLHttpRequest\"));\n\t}\n\t# -------------------------------------------------------\n\tfunction isDownload($pb_set_download=null) {\n\t\tif (!is_null($pb_set_download)) {\n\t\t\tforeach(array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST') as $vs_method) {\n\t\t\t\t$this->opa_params[$vs_method]['download'] = ($pb_set_download) ? true : false;\n\t\t\t}\n\t\t\treturn $this->opa_params['GET']['download'];\n\t\t} else {\n\t\t\treturn $this->getParameter('download', pInteger) ? true : false;\n\t\t}\n\t}\n\t# -------------------------------------------------------\n\tpublic function getPathInfo() {\n\t\treturn $this->ops_path_info;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getFullUrlPath() {\n\t\treturn $this->ops_full_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getBaseUrlPath() {\n\t\treturn $this->ops_base_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getScriptName() {\n\t\treturn $this->ops_script_name;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRequestMethod() {\n\t\treturn $this->ops_request_method;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRawPostData() {\n\t\treturn $this->ops_raw_post_data;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setRawPostData($ps_post_data) {\n\t\t$this->ops_raw_post_data = $ps_post_data;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getSessionID() {\n\t\treturn $this->session_id;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getUser() {\n\t\treturn $this->user;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Set current user\n\t *\n\t * @param ca_users $user\n\t *\n\t * @return void\n\t */\n\tpublic function setUser(ca_users $user) : void {\n\t\t$this->user = $user;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getThemeUrlPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tif (!$pb_use_default && $this->isLoggedIn()) {\n\t\t\t$vs_theme = $this->user->getPreference('ui_theme');\n\t\t} else {\n\t\t\t$vs_theme = $this->config->get('theme');\t\t// default theme\n\t\t}\n\t\tif (!$vs_theme) { $vs_theme = $this->config->get('theme'); }\n\t\treturn $this->config->get('themes_url').'/'.$vs_theme;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getThemeDirectoryPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tif (!$pb_use_default && $this->isLoggedIn()) {\n\t\t\t$vs_theme = $this->user->getPreference('ui_theme');\n\t\t} else {\n\t\t\t$vs_theme = $this->config->get('theme');\t\t// default theme\n\t\t}\n\t\tif (!$vs_theme) { $vs_theme = $this->config->get('theme'); }\n\t\treturn $this->config->get('themes_directory').'/'.$vs_theme;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Returns url path to \"default\" theme. This is not (necessarily) the same as the configured theme for the installation\n\t * that is returned when calling getThemeUrlPath() with the $pb_use_default parameter set. The path returned\n\t * by this method is the url path to the base theme named \"default\"\n\t */\n\tpublic function getDefaultThemeUrlPath() {\n\t\treturn $this->config->get('themes_url').'/default';\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Returns path to \"default\" theme. This is not (necessarily) the same as the configured theme for the installation\n\t * that is returned when calling getThemeDirectoryPath() with the $pb_use_default parameter set. The path returned\n\t * by this method is the path to the base theme named \"default\"\n\t */\n\tpublic function getDefaultThemeDirectoryPath() {\n\t\treturn $this->config->get('themes_directory').'/default';\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getServiceViewPath(){\n\t\treturn $this->config->get('service_view_path');\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Return file path on server to views path in current theme.\n\t *\n\t * @param bool $pb_use_default Return path in default theme no matter what theme user has selected. [Default is false]\n\t * @return string Path to file on server\n\t */\n\tpublic function getViewsDirectoryPath($pb_use_default=false) {\n\t\tif ($this->config->get('always_use_default_theme')) { $pb_use_default = true; }\n\t\tswitch($this->getScriptName()){\n\t\t\tcase \"service.php\":\n\t\t\t\treturn $this->getServiceViewPath();\n\t\t\t\tbreak;\n\t\t\tcase \"index.php\":\n\t\t\tdefault:\n\t\t\t\treturn $this->getThemeDirectoryPath($pb_use_default).'/views';\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Search for and return file path on server for a theme file. The selected theme will be searched followed\n\t * by the default theme, ceasing when the file is found. \n\t *\n\t * @param string $ps_relative_file_path Path to theme file relative to the theme root directory. To find the file path of the base.css file \"css/base.css\" would be passed.\n\t * @return Path to file on server\n\t */\n\tpublic function getDirectoryPathForThemeFile($ps_relative_file_path) {\n\t\tif(\n\t\t\tfile_exists($vs_path = $this->getThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t\t||\n\t\t\tfile_exists($vs_path = $this->getDefaultThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t) {\n\t\t\treturn $vs_path;\n\t\t} \n\t\treturn null;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * Search for and return URL path for a theme file. The selected theme will be searched followed\n\t * by the default theme, ceasing when the file is found. \n\t *\n\t * @param string $ps_relative_file_path Path to theme file relative to the theme root directory. To find the URL path of the base.css file \"css/base.css\" would be passed.\n\t * @return URL to file\n\t */\n\tpublic function getUrlPathForThemeFile($ps_relative_file_path) {\n\t\tif(\n\t\t\tfile_exists($this->getThemeDirectoryPath().\"/{$ps_relative_file_path}\")\n\t\t) {\n\t\t\treturn $this->getThemeUrlPath().\"/{$ps_relative_file_path}\";\n\t\t} elseif(file_exists($this->getDefaultThemeDirectoryPath().\"/{$ps_relative_file_path}\")) {\n\t\t\treturn $this->getDefaultThemeUrlPath().\"/{$ps_relative_file_path}\";\n\t\t} \n\t\treturn null;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getAssetsUrlPath() {\n\t\treturn $this->config->get('ca_url_root').\"/assets\";\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function getAssetsDirectoryPath() {\n\t\treturn $this->config->get('ca_base_dir').$this->config->get('ca_url_root').\"/assets\";\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function isDispatched() {\n\t\treturn $this->opb_is_dispatched;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t * \n\t */\n\tpublic function setIsDispatched($ps_is_dispatched=true) {\n\t\t$this->opb_is_dispatched = $ps_is_dispatched;\n\t}\n\t# -------------------------------------------------------\n\tpublic function isApplicationPlugin() {\n\t\treturn $this->ops_parsed_is_app_plugin;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setIsApplicationPlugin($pb_is_app_plugin) {\n\t\t$this->ops_parsed_is_app_plugin = $pb_is_app_plugin;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setModulePath($ps_module_path) {\n\t\t$this->ops_parsed_module_path = $ps_module_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getModulePath() {\n\t\tif ($this->isApplicationPlugin()) {\n\t\t\t// clean up module path for plugins (has \"/controllers\" tagged on the end\n\t\t\treturn preg_replace('!/controllers$!', '', $this->ops_parsed_module_path);\n\t\t}\n\t\treturn $this->ops_parsed_module_path;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setController($ps_controller) {\n\t\t$this->ops_parsed_controller = $ps_controller;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getController() {\n\t\treturn $this->ops_parsed_controller;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setAction($ps_action) {\n\t\t$this->ops_parsed_action = $ps_action;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getAction() {\n\t\treturn $this->ops_parsed_action;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setActionExtra($ps_action_extra) {\n\t\t$this->ops_parsed_action_extra = $ps_action_extra;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getActionExtra() {\n\t\treturn $this->ops_parsed_action_extra;\n\t}\n\t# -------------------------------------------------------\n\tpublic function setControllerUrl($ps_url) {\n\t\t$this->ops_parsed_controller_url = $ps_url;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getControllerUrl() {\n\t\treturn $this->ops_parsed_controller_url;\n\t}\n\t# -------------------------------------------------------\n\tpublic function getRequestUrl($pb_absolute=false) {\n\t\t$va_url = array();\n\t\tif ($vs_tmp = $this->getBaseUrlPath()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getScriptName()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getModulePath()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getController()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getAction()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\tif ($vs_tmp = $this->getActionExtra()) {\n\t\t\t$va_url[] = trim($vs_tmp, '/');\n\t\t}\n\t\t\n\t\t//foreach($this->opa_params['PATH'] as $vs_param => $vs_value) {\n\t\t//\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t//}\n\t\tif (is_array($this->opa_params['GET'])) {\n\t\t\tforeach($this->opa_params['GET'] as $vs_param => $vs_value) {\n\t\t\t\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t\t}\n\t\t}\n\t\tif (is_array($this->opa_params['PATH'])) {\n\t\t\tforeach($this->opa_params['PATH'] as $vs_param => $vs_value) {\n\t\t\t\t$va_url[] = urlencode($vs_param).'/'.urlencode($vs_value);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif ($pb_absolute) {\n\t\t\t// make returned URL absolute\n\t\t\tarray_unshift($va_url, $this->config->get('site_host'));\n\t\t}\n\t\t\n\t\treturn join('/', $va_url);\n\t}\n\t# --------------------------------------------------------------------------------\n\t/**\n\t * Return HTMLPurifier instance\n\t *\n\t * @return HTMLPurifier Returns instance\n\t */\n\tstatic public function getPurifier() {\n\t\tif (!RequestHTTP::$html_purifier) { \n\t\t\tRequestHTTP::$html_purifier = caGetHTMLPurifier(); \n\t\t}\n\t\treturn RequestHTTP::$html_purifier;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function parameterExists($pa_name, $ps_http_method=null, $pa_options=array()) {\n\t\tif(!is_array($pa_name)) { $pa_name = [$pa_name]; }\n\t\t\n\t\t$vm_val = null;\n\t\tforeach($pa_name as $ps_name) {\n\t\t\tif (in_array($ps_http_method, array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'))) {\n\t\t\t\t$vm_val = $this->opa_params[$ps_http_method][$ps_name];\n\t\t\t} else {\n\t\t\t\tforeach(array('GET', 'POST', 'PATH', 'COOKIE', 'REQUEST') as $http_method) {\n\t\t\t\t\t$vm_val = (array_key_exists($http_method, $this->opa_params) && array_key_exists($ps_name, $this->opa_params[$http_method])) ? $this->opa_params[$http_method][$ps_name] : null;\n\t\t\t\t\tif (isset($vm_val)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (is_array($vm_val) || (strlen($vm_val) > 0)) { break; } \n\t\t}\n\t\t\n\t\treturn $vm_val;\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function getParameter($pa_name, $pn_type, $ps_http_method=null, $pa_options=array()) {\n\t\t$vm_val = $this->parameterExists($pa_name, $ps_http_method, $pa_options);\n\t\tif (!isset($vm_val)) { return \"\"; }\n\t\t\n\t\t$vm_val = str_replace(\"\\0\", '', $vm_val);\n\t\t\n\t\t$purified = false;\n\t\tif((caGetOption('purify', $pa_options, true) && $this->config->get('purify_all_text_input')) || caGetOption('forcePurify', $pa_options, false)) {\n\t\t    if(is_array($vm_val)) {\n\t\t        $vm_val = array_map(function($v) { return is_array($v) ? $v : str_replace(\"&amp;\", \"&\", RequestHTTP::getPurifier()->purify(rawurldecode($v))); }, $vm_val);\n\t\t    } else {\n\t\t        $vm_val = str_replace(\"&amp;\", \"&\", RequestHTTP::getPurifier()->purify(rawurldecode($vm_val)));\n\t\t    }\n\t\t    $purified = true;\n\t\t}\n\t\t\n\t\tif ($vm_val == \"\") { return ($pn_type == pArray) ? [] : ''; }\n\t\t\n\t\tswitch($pn_type) {\n\t\t\t# -----------------------------------------\n\t\t\tcase pInteger:\n\t\t\t\tif (is_numeric($vm_val)) {\n\t\t\t\t\tif ($vm_val == intval($vm_val)) {\n\t\t\t\t\t\treturn (int)$vm_val;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pFloat:\n\t\t\t\tif (is_numeric($vm_val)) {\n\t\t\t\t\treturn (float)$vm_val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pString:\n\t\t\t\tif (is_string($vm_val)) {\n\t\t\t\t\tif(caGetOption('retainBackslashes', $pa_options, true)) {\n\t\t\t\t\t\t$vm_val = str_replace(\"\\\\\", \"\\\\\\\\\", $vm_val);\t// retain backslashes for some strange people desire them as valid input\n\t\t\t\t\t}\n\t\t\t\t\tif(!$purified && caGetOption('urldecode', $pa_options, true)) {\n\t\t\t\t\t\t$vm_val = rawurldecode($vm_val);\n\t\t\t\t\t}\n\t\t\t\t\treturn $vm_val;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t\tcase pArray:\n\t\t\t\tif (is_array($vm_val)) {\n\t\t\t\t\treturn $vm_val;\n\t\t\t\t} elseif(is_string($vm_val) || is_numeric($vm_val)) {\n\t\t\t\t\treturn [$vm_val];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t# -----------------------------------------\n\t\t}\n\t\t\n\t\tdie(\"Invalid parameter type for $ps_name\\n\");\n\t}\n\t# -------------------------------------------------------\n\t/**\n\t *\n\t */\n\tpublic function getParameters($pa_http_methods=null) {\n\t\tif (!$pa_http_methods) { $pa_http_methods = array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'); }\n\t\tif($pa_http_methods && !is_array($pa_http_methods)) { $pa_http_methods = array($pa_http_methods); }\n\t\t$va_params = array();\n\t\tif (!is_array($pa_http_methods)) { $pa_http_methods = array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'); }\n\t\tforeach($pa_http_methods as $http_method) {\n\t\t\tif (isset($this->opa_params[$http_method]) && is_array($this->opa_params[$http_method])) {\n\t\t\t\t$va_params = array_merge($va_params, $this->opa_params[$http_method]);\n\t\t\t}\n\t\t}\n\t\treturn $va_params;\n\t}\n\t# -------------------------------------------------------\n\tfunction setParameter($ps_name, $pm_value, $ps_http_method='GET') {\n\t\tif (in_array($ps_http_method, array('GET', 'POST', 'COOKIE', 'PATH', 'REQUEST'))) {\n\t\t\t$this->opa_params[$ps_http_method][$ps_name] = $pm_value;\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\t# -------------------------------------------------------\n \t/**\n\t *\n\t * Saves changes to user object and sends asynchronous request for search indexing\n\t * You should call this at the end of every request to ensure that user and session variables are saved.\n\t *\n\t * @access public\n\t */\n\tfunction close() {\n\t\tif (is_object($this->user)) {\n\t\t\t$this->user->close();\n\t\t}\n\n\t\tif(defined('__CA_SITE_HOSTNAME__') && strlen(__CA_SITE_HOSTNAME__) > 0) {\n\t\t\t$host_without_port = __CA_SITE_HOSTNAME__;\n\t\t\t$host_port = null;\n\t\t    if(preg_match(\"/:([\\d]+)$/\", $host_without_port, $m)) {\n\t\t    \t$host_without_port = preg_replace(\"/:[\\d]+$/\", '', $host_without_port);\n\t\t    \t$host_port = (int)$m[1];\n\t\t    } \n\t\t    \n\t\t\tif (\n\t\t\t    !($port = (int)$this->getAppConfig()->get('out_of_process_search_indexing_port'))\n\t\t\t    && \n\t\t\t    !($port = (int)getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_PORT'))\n\t\t\t) {\n                if(__CA_SITE_PROTOCOL__ == 'https') { \n                    $port = $host_port ?? 443;\t\n                } elseif(isset($_SERVER['SERVER_PORT']) &&  $_SERVER['SERVER_PORT']) {\n                    $port = $_SERVER['SERVER_PORT'];\n                } else {\n                    $port = $host_port ?? 80;\n                }\n            }\n\t\t\t\n\t\t\tif (\n\t\t\t    !($proto = trim($this->getAppConfig()->get('out_of_process_search_indexing_protocol')))\n\t\t\t    && \n\t\t\t    !($proto = getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_PROTOCOL'))\n\t\t\t) {\n\t\t\t    $proto = (($port == 443) || (__CA_SITE_PROTOCOL__ == 'https')) ? 'ssl' : 'tcp';\n\t\t\t}\n\t\t\t\n\t\t\tif (\n\t\t\t    !($indexing_hostname = trim($this->getAppConfig()->get('out_of_process_search_indexing_hostname')))\n\t\t\t    && \n\t\t\t    !($indexing_hostname = getenv('CA_OUT_OF_PROCESS_SEARCH_INDEXING_HOSTNAME'))\n\t\t\t) {\n\t\t\t    $indexing_hostname = $host_without_port;\n\t\t\t}\n\t\t\t\n\t\t\t// trigger async search indexing\n\t\t\tif((__CA_APP_TYPE__ === 'PROVIDENCE') && !$this->getAppConfig()->get('disable_out_of_process_search_indexing')) {\n                require_once(__CA_MODELS_DIR__.\"/ca_search_indexing_queue.php\");\n                if (!ca_search_indexing_queue::lockExists()) {\n                \t$dont_verify_ssl_cert = (bool)$this->getAppConfig()->get('out_of_process_search_indexing_dont_verify_ssl_cert');\n                    $context = stream_context_create([\n\t\t\t\t\t\t'ssl' => [\n\t\t\t\t\t\t\t'verify_peer' => !$dont_verify_ssl_cert,\n\t\t\t\t\t\t\t'verify_peer_name' => !$dont_verify_ssl_cert\n\t\t\t\t\t\t]\n\t\t\t\t\t]);\n\n\t\t\t\t\t$r_socket = stream_socket_client($proto . '://'. $indexing_hostname.':'.$port, $errno, $errstr, ini_get(\"default_socket_timeout\"), STREAM_CLIENT_CONNECT, $context);\n\n                    if ($r_socket) {\n                        $http  = \"GET \".$this->getBaseUrlPath().\"/index.php?processIndexingQueue=1 HTTP/1.1\\r\\n\";\n                        $http .= \"Host: \".__CA_SITE_HOSTNAME__.\"\\r\\n\";\n                        $http .= \"Connection: Close\\r\\n\\r\\n\";\n                        fwrite($r_socket, $http);\n                        fclose($r_socket);\n                    }\n                }\n\t\t\t}\n\t\t}\n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Determines if a user is currently logged in. If a user is logged in you\n     * can safely access the user object via the user property. If this returns\n     * false, the user property will be unset and any method calls on it will (of course)\n     * result in an error.\n     *\n     * @access public \n     * @return bool True if a user is logged in, false if not.\n     */\t\n\tpublic function isLoggedIn() {\n\t\tif (is_object($this->user) && ($this->user->getUserID())) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false; \n\t\t}\n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Returns true if the currently logged in user has the specified role. You may specify the\n     * role as either an integer role_id, the role name or the role short name.\n     *\n     * @access public \n     * @return bool True if user has role, false if not.\n     */\t\n\tpublic function hasRole($pm_role) {\n\t\tif ($this->isLoggedIn()) {\n\t\t\treturn $this->user->hasRole($pm_role);\n\t\t}\n\t\treturn false; \n\t}\n\t# ----------------------------------------\n    /**\n     * \n     * Returns the user_id of the currently logged in user. This is the integer user_id,\n     * *NOT* the user name.\n     *\n     * @access public \n     * @return integer User_id of currently logged in user or null if user is not logged in.\n     */\t\n\tpublic function getUserID() {\n\t\tif ($this->isLoggedIn()) {\n\t\t\treturn $this->user->getUserID();\n\t\t}\n\t\treturn null;\n\t}\n\t# ----------------------------------------\n\t# Authentication\n\t# ----------------------------------------\n    /**\n     * \n     * Implements standard username/password and IP-address based user authentication. Applications\n     * requiring completely custom authentication methods should override this method. However, most of\n     * the time if you need custom authentication you can just create a custom user auth handler class (\"username/password\" authentication).\n     *\n     * One clean way to extend Auth is create a sub-class whose constructor calls addUserHandler() and delegates\n     * everything else to Auth.\n     *\n     * @access private \n     * @param array of login options (same as the associative option array in the class constructor)\n     */\t\n\tpublic function doAuthentication($pa_options) {\t\n\t\tglobal $AUTH_CURRENT_USER_ID;\n\n\t\t$o_event_log = new Eventlog();\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n\t\t\n\t\tforeach(array(\n\t\t\t'no_headers', 'dont_redirect_to_login', 'dont_create_new_session', 'dont_redirect_to_welcome',\n\t\t\t'user_name', 'password', 'options', 'noPublicUsers', 'dont_redirect', 'no_headers', 'redirect',\n\t\t\t'allow_external_auth'\n\t\t) as $vs_key) {\n\t\t\tif (!isset($pa_options[$vs_key])) { $pa_options[$vs_key] = null; }\n\t\t}\n\t\tif (!is_array($pa_options[\"options\"])) { $pa_options[\"options\"] = array(); }\n\t\t\n\t\tif ($pa_options[\"no_headers\"]) {\n\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t$pa_options[\"dont_create_new_session\"] = true;\n\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t}\n\t\t\n\t\tif ($pa_options[\"dont_redirect\"]) {\n\t\t\t$pa_options[\"dont_redirect_to_login\"] = true;\n\t\t\t$pa_options[\"dont_redirect_to_welcome\"] = true;\n\t\t}\n\t\t\n\t\t$vb_login_successful = false;\n\t\tif (!$pa_options[\"user_name\"]) {\t\t// no incoming login\n\t\t\t//\n\t\t\t// is a user already logged in?\n\t\t\t//\n\t\t\tif ($vn_user_id = Session::getVar($vs_app_name.\"_user_id\")) { \t\t\t\t// does session have a user attached to it?\n\t\t\t\t// user is already logged in\n\n\t\t\t\t$this->user = new ca_users($vn_user_id);\t\t// add user object\n\n\t\t\t\tif ((!$this->user->isActive()) || ($this->user->numErrors()) || ($pa_options['noPublicUsers'] && $this->user->isPublicUser())) {\t\t\t// error means user_id in session is invalid\n\t\t\t\t\t$vb_login_successful = false;\n\t\t\t\t} else {\n\t\t\t\t\t$vb_login_successful = true;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif ($vb_login_successful) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Login was successful\n\t\t\t\t\tSession::setVar($vs_app_name.\"_lastping\",time());\t\t\t\t\t// set last time we heard from client in session\n\t\t\t\t\t$this->user->setLastPing(time());\t\n\t\t\t\t\t$AUTH_CURRENT_USER_ID = $vn_user_id;\n\t\t\t\t\t//$this->user->close(); ** will be called externally **\n\t\t\t\t\treturn $vb_login_successful;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (!$vb_login_successful) {\n\t\t\t\t$this->user = new ca_users();\t\t// add user object\n\n                if (!AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_USE_ADAPTER_LOGIN_FORM__) || $pa_options['allow_external_auth']) {\n                    $vs_tmp1 = $vs_tmp2 = null;\n                    if (($vn_auth_type = $this->user->authenticate($vs_tmp1, $vs_tmp2, $pa_options[\"options\"]))) {\t# error means user_id in session is invalid\n                        if (($pa_options['noPublicUsers'] && $this->user->isPublicUser()) || !$this->user->isActive()) {\n                            $o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login for user id '\".$vn_user_id.\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                            $vb_login_successful = false;\n                        } else {\n                            $vb_login_successful = true;\n                            $vn_user_id = $this->user->getUserID();\n                        }\n                    }\n\n                    if (!$vb_login_successful) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// throw user to login screen\n                        if (!$pa_options[\"dont_redirect_to_login\"]) {\n                            $o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login with redirect for user id '\".$vn_user_id.\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                            $vs_redirect = $this->getRequestUrl(true);\n\n                            if (strpos($vs_redirect, $this->config->get(\"auth_login_path\") !== -1)) {\n                                $vs_redirect = '';\n                            } else {\n                                $vs_redirect = '?redirect=' . urlencode($vs_redirect);\n                            }\n                            if ($_REQUEST['local']) { \n                            \t$vs_redirect .= ($vs_redirect ? \"&\" : \"?\").\"local=1\";\n                            }\n                            $this->opo_response->addHeader(\"Location\", $this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_path\") . $vs_redirect);\n                        }\n                        return false;\n                    }\n                } else {\n                \t// Redirect to external auth?\n                \ttry {\n                \t\treturn $this->user->authenticate($vs_tmp1, $vs_tmp2, $pa_options[\"options\"]);\n                \t} catch (Exception $e) {\n                \t\t$o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login with exception '\".$e->getMessage().\" (\".$_SERVER['REQUEST_URI'].\"); IP=\".$_SERVER[\"REMOTE_ADDR\"].\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n                \t\t$this->opo_response->addHeader(\"Location\", $vs_auth_login_url);\n                \t\treturn false;\n                \t}\n                }\n\t\t\t}\n\t\t} \n\t\t\n\t\t//\n\t\t// incoming login\n\t\t//\n\t\tif ($pa_options[\"user_name\"]) {\n\t\t\t$vb_login_successful = false;\n\t\t\t$this->user = new ca_users();\n\n\t\t\tif (($vn_auth_type = $this->user->authenticate($pa_options[\"user_name\"], $pa_options[\"password\"], $pa_options[\"options\"]))) {\t# error means user_id in session is invalid\n\t\t\t\tif (($pa_options['noPublicUsers'] && $this->user->isPublicUser()) || !$this->user->isActive()) {\n\t\t\t\t\t$vb_login_successful = false;\n\t\t\t\t} else {\n\t\t\t\t\t$vb_login_successful = true;\n\t\t\t\t\t$vn_user_id = $this->user->getUserID();\n\t\t\t\t\t\n\t\t\t\t\tif (!defined('__CA_IS_SERVICE_REQUEST__')) { // service need to keep auth tokens around\n\t\t                Session::deleteSession();\n\t\t            }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tif (!$vb_login_successful) {\t\n\t\t\t$this->user = new ca_users();\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// auth failed\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// throw user to login screen\n\t\t\tif ($pa_options[\"user_name\"]) {\n\t\t\t\t$o_event_log->log(array(\"CODE\" => \"LOGF\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Failed login for '\".$pa_options[\"user_name\"].\"' (\".$_SERVER['REQUEST_URI'].\"); IP=\".RequestHTTP::ip().\"; user agent='\".$_SERVER[\"HTTP_USER_AGENT\"].\"'\"));\n\t\t\t}\n\t\t\tif (!$pa_options[\"dont_redirect_to_login\"]) {\n\t\t\t\t$vs_auth_login_url = $this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_path\");\n\t\t\t\t$this->opo_response->addHeader(\"Location\", $vs_auth_login_url);\n\t\t\t}\n\t\t\treturn false;\n\t\t} else {\t\t\n\t\t\t$o_event_log->log(array(\"CODE\" => \"LOGN\", \"SOURCE\" => \"Auth\", \"MESSAGE\" => \"Successful login for '\".$pa_options[\"user_name\"].\"'; IP=\".$_SERVER[\"REMOTE_ADDR\"].\"; user agent=\".RequestHTTP::ip()));\n\t\t    \n\t\t    $this->session_id = Session::init($vs_app_name, isset($pa_options[\"dont_create_new_session\"]) ? $pa_options[\"dont_create_new_session\"] : false);\n\t\t\t\n\t\t\tSession::setVar($vs_app_name.\"_user_auth_type\",$vn_auth_type);\t\t\t\t// type of auth used: 1=username/password; 2=ip-base auth\n\t\t\tSession::setVar($vs_app_name.\"_user_id\",$vn_user_id);\t\t\t\t\t\t// auth succeeded; set user_id in session\n\t\t\tSession::setVar($vs_app_name.\"_logintime\",time());\t\t\t\t\t\t\t// also set login time (unix timestamp) in session\n\t\t\tSession::setVar($vs_app_name.\"_lastping\",time());\n\t\t\t\n\t\t\t$this->user->setVar('last_login', time(), array('volatile' => true));\n\t\t\t$this->user->setLastLogout($this->user->getLastPing(), array('volatile' => true));\n\t\t\t\n\t\t\t$this->user->setMode(ACCESS_WRITE);\n\t\t\t$this->user->update();\n\t\t\t\n\t\t\t$AUTH_CURRENT_USER_ID = $vn_user_id;\n\n\t\t\tif ($pa_options['redirect']) {\n\t\t\t\t// redirect to specified URL\n\t\t\t\t$this->opo_response->setRedirect($pa_options['redirect']);\n\t\t\t\t$this->opo_response->sendResponse();\n\t\t\t\texit;\n\t\t\t}\n\n\t\t\tif ((!$pa_options[\"dont_redirect_to_welcome\"]) && !AuthenticationManager::supports(__CA_AUTH_ADAPTER_FEATURE_USE_ADAPTER_LOGIN_FORM__)) {\n\t\t\t\t// redirect to \"welcome\" page\n\t\t\t\t$this->opo_response->setRedirect($this->getBaseUrlPath().'/'.$this->getScriptName().'/'.$this->config->get(\"auth_login_welcome_path\"));\n\t\t\t\t$this->opo_response->sendResponse();\n\t\t\t\texit;\n\t\t\t}\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns the IP address of the remote client\n\t *\n\t * @access public\n\t * @return (string) - the IP address of the remote client\n\t */\n\tpublic function getClientIP() {\n\t\treturn self::ip();\n\t}\n\t# ----------------------------------------\n\tpublic function deauthenticate() {\n\t\t$vs_app_name = $this->config->get(\"app_name\");\n    \n        AuthenticationManager::deauthenticate();    \n\t\tif ($this->isLoggedIn()) {\n\t\t\tSession::setVar(\"{$vs_app_name}_user_id\",'');\n\t\t\t//Session::deleteSession();\n\t\t\t$this->user = null;\n\t\t}\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns true if this request is an attempt to authenticate via the web service API\n\t * (in this case access control measures should be disabled)\n\t *\n\t * @return boolean\n\t * @access public\n\t */\n\tpublic function isServiceAuthRequest() {\n\t\tif(defined('__CA_IS_SERVICE_REQUEST__') && __CA_IS_SERVICE_REQUEST__) { return true; }\n\t\tif($this->getParameter(\"method\",pString)==\"auth\") {\n\t\t\treturn true;\n\t\t}\n\n\t\tif($this->getParameter(\"method\",pString)==\"getUserID\") {\n\t\t\treturn true;\n\t\t}\n\n\n\t\t$va_action = explode(\"#\",$_SERVER[\"HTTP_SOAPACTION\"]); // I hope this is set no matter what Soap client you use :-)\n\n\t\tif(strlen($va_action[1])>0 && trim(str_replace('\"',\"\",$va_action[1])) == \"auth\"){\n\t\t\treturn true;\n\t\t}\n\n\t\tif(strlen($va_action[1])>0 && trim(str_replace('\"',\"\",$va_action[1])) == \"getUserID\"){\n\t\t\treturn true;\n\t\t}\n\t\t\n\t\treturn false;\n\t}\n\t# ----------------------------------------\n\t/**\n\t * Returns a unique key identifying this request for caching purposes\n\t *\n\t * @return string\n\t */\n\tpublic function getHash() {\n\t\treturn md5(\n\t\t\tserialize($this->getParameters(array('POST', 'GET', 'REQUEST'))) .\n\t\t\t$this->getRawPostData() .\n\t\t\t$this->getRequestMethod() .\n\t\t\t$this->getFullUrlPath() .\n\t\t\t$this->getScriptName() .\n\t\t\t($this->isLoggedIn() ? $this->getUserID() : '')\n\t\t);\n\t}\n\t# ----------------------------------------\n\t/** \n\t * Return IP address for current requestor\n\t *\n\t * @return string\n\t */\n\tstatic public function ip() {\n\t\tif (isset($_SERVER['HTTP_X_REAL_IP']) && $_SERVER['HTTP_X_REAL_IP']) { return $_SERVER['HTTP_X_REAL_IP']; }\n\t\tif (isset($_SERVER['HTTP_X_FORWARDED_FOR']) && $_SERVER['HTTP_X_FORWARDED_FOR']) { return $_SERVER['HTTP_X_FORWARDED_FOR']; }\n\t\treturn $_SERVER['REMOTE_ADDR'];\n\t}\n\t# ----------------------------------------\n}\n"], "filenames": ["app/controllers/system/ErrorController.php", "app/lib/ApplicationError.php", "app/lib/Controller/Request/RequestHTTP.php"], "buggy_code_start_loc": [33, 178, 578], "buggy_code_end_loc": [35, 325, 611], "fixing_code_start_loc": [32, 178, 579], "fixing_code_end_loc": [32, 325, 614], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository collectiveaccess/providence prior to 1.8.", "other": {"cve": {"id": "CVE-2022-1825", "sourceIdentifier": "security@huntr.dev", "published": "2022-05-23T11:16:10.670", "lastModified": "2022-05-28T02:16:54.060", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository collectiveaccess/providence prior to 1.8."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-site Scripting (XSS) - Reflejado en el repositorio GitHub collectiveaccess/providence versiones anteriores a 1.8"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:collectiveaccess:providence:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.8", "matchCriteriaId": "B6CBCA5D-5308-4B56-862D-C3351587E45F"}]}]}], "references": [{"url": "https://github.com/collectiveaccess/providence/commit/49de453c8d4942d09fab230e8f242300c831e2a7", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/c6ad4cef-1b3d-472f-af0e-68e46341dfe5", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/collectiveaccess/providence/commit/49de453c8d4942d09fab230e8f242300c831e2a7"}}