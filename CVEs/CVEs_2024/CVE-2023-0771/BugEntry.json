{"buggy_code": ["<?php\n/*\n * vim:set softtabstop=4 shiftwidth=4 expandtab:\n *\n * LICENSE: GNU Affero General Public License, version 3 (AGPL-3.0-or-later)\n * Copyright 2001 - 2022 Ampache.org\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n */\n\ndeclare(strict_types=0);\n\nnamespace Ampache\\Module\\Statistics;\n\nuse Ampache\\Config\\AmpConfig;\nuse Ampache\\Repository\\Model\\Catalog;\nuse Ampache\\Repository\\Model\\Podcast_Episode;\nuse Ampache\\Repository\\Model\\Song;\nuse Ampache\\Repository\\Model\\User;\nuse Ampache\\Repository\\Model\\Video;\nuse Ampache\\Module\\System\\Core;\nuse Ampache\\Module\\System\\Dba;\nuse Ampache\\Module\\User\\Activity\\UserActivityPosterInterface;\nuse Ampache\\Repository\\UserActivityRepositoryInterface;\nuse Ampache\\Repository\\UserRepositoryInterface;\nuse PDOStatement;\n\n/**\n * Stats Class\n *\n * this class handles the object_count\n * stuff, before this was done in the user class\n * but that's not good, all done through here.\n *\n */\nclass Stats\n{\n    /* Base vars */\n    public $id;\n    public $object_type;\n    public $object_id;\n    public $date;\n    public $user;\n    public $agent;\n\n    /**\n     * clear\n     *\n     * This clears all stats for _everything_.\n     * @param integer $user\n     */\n    public static function clear($user = 0)\n    {\n        if ($user > 0) {\n            Dba::write(\"DELETE FROM `object_count` WHERE `user` = ?;\", array($user));\n        } else {\n            Dba::write(\"TRUNCATE `object_count`;\");\n        }\n        Dba::write(\"UPDATE `song` SET `played` = 0;\");\n    }\n\n    /**\n     * garbage_collection\n     *\n     * This removes stats for things that no longer exist.\n     */\n    public static function garbage_collection()\n    {\n        foreach (array('album', 'artist', 'song', 'playlist', 'tag', 'live_stream', 'video', 'podcast', 'podcast_episode') as $object_type) {\n            Dba::write(\"DELETE FROM `object_count` WHERE `object_type` = '$object_type' AND `object_count`.`object_id` NOT IN (SELECT `$object_type`.`id` FROM `$object_type`);\");\n        }\n    }\n\n    /**\n     * Migrate an object associate stats to a new object\n     * @param string $object_type\n     * @param integer $old_object_id\n     * @param integer $new_object_id\n     * @param int|null $child_id\n     * @return PDOStatement|boolean\n     */\n    public static function migrate($object_type, $old_object_id, $new_object_id, $child_id = null)\n    {\n        if (!in_array($object_type, array('song', 'album', 'artist', 'video', 'live_stream', 'playlist', 'podcast', 'podcast_episode', 'tvshow'))) {\n            return false;\n        }\n        $sql    = \"UPDATE IGNORE `object_count` SET `object_id` = ? WHERE `object_type` = ? AND `object_id` = ?\";\n        $params = array($new_object_id, $object_type, $old_object_id);\n        if ($child_id) {\n            $sql .= \" AND `date` IN (SELECT `date` FROM (SELECT `date` FROM `object_count` WHERE `object_type` = 'song' AND object_id = ?) AS `song_date`)\";\n            $params[] = $child_id;\n        }\n\n        return Dba::write($sql, $params);\n    }\n\n    /**\n     * When creating an artist_map, duplicate the stat rows\n     */\n    public static function duplicate_map(string $source_type, int $source_id, string $dest_type, int $dest_id)\n    {\n        if ($source_id > 0 && $dest_id > 0) {\n            debug_event(__CLASS__, \"duplicate_map \" . $source_type . \" {\" . $source_id . \"} => \" . $dest_type . \" {\" . $dest_id . \"}\", 5);\n            $sql        = \"SELECT `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`geo_latitude`, `object_count`.`geo_longitude`, `object_count`.`geo_name`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`object_type` = ? AND `object_count`.`object_id` = ?;\";\n            $db_results = Dba::read($sql, array($source_type, $source_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"INSERT IGNORE INTO `object_count` (`object_type`, `object_id`, `count_type`, `date`, `user`, `agent`, `geo_latitude`, `geo_longitude`, `geo_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n                Dba::write($sql, array($dest_type, $dest_id, $row['count_type'], $row['date'], $row['user'], $row['agent'], $row['geo_latitude'], $row['geo_longitude'], $row['geo_name']));\n            }\n        }\n    }\n\n    /**\n     * When deleting an artist_map, remove the stat rows too\n     */\n    public static function delete_map(string $source_type, int $source_id, string $dest_type, int $dest_id)\n    {\n        if ($source_id > 0 && $dest_id > 0) {\n            debug_event(__CLASS__, \"delete_map \" . $source_type . \" {\" . $source_id . \"} => \" . $dest_type . \" {\" . $dest_id . \"}\", 5);\n            $sql        = \"SELECT `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`geo_latitude`, `object_count`.`geo_longitude`, `object_count`.`geo_name`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`object_type` = ? AND `object_count`.`object_id` = ?;\";\n            $db_results = Dba::read($sql, array($source_type, $source_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"DELETE FROM `object_count` WHERE `object_count`.`object_type` = ? AND `object_count`.`object_id` = ? AND `object_count`.`date` = ? AND `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`geo_latitude` = ? AND `object_count`.`geo_longitude` = ? AND `object_count`.`geo_name` = ? AND `object_count`.`count_type` = ?\";\n                Dba::write($sql, array($dest_type, $dest_id, $row['date'], $row['user'], $row['agent'], $row['geo_latitude'], $row['geo_longitude'], $row['geo_name'], $row['count_type']));\n            }\n        }\n    }\n\n    /**\n     * Delete a user activity in object_count\n     */\n    public static function delete(int $activity_id)\n    {\n        if ($activity_id > 0) {\n            $sql        = \"SELECT `object_count`.`object_id`, `object_count`.`object_type`, `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`id` = ?;\";\n            $db_results = Dba::read($sql, array($activity_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"DELETE FROM `object_count` WHERE `object_count`.`date` = ? AND `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`count_type` = ?\";\n                Dba::write($sql, array($row['date'], $row['user'], $row['agent'], $row['count_type']));\n                if (in_array($row['object_type'], array('song', 'album', 'video', 'podcast', 'podcast_episode')) && $row['count_type'] === 'stream' && $row['user'] > 0 && $row['agent'] !== 'debug') {\n                    self::count($row['object_type'], $row['object_id'], 'down');\n                }\n            }\n        }\n    }\n\n    /**\n     * update the play_count for an object\n     */\n    public static function count(string $type, int $object_id, $count_type = 'up')\n    {\n        switch ($type) {\n            case 'song':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'video':\n                $sql = ($count_type == 'down')\n                    ? \"UPDATE `$type` SET `total_count` = `total_count` - 1, `total_skip` = `total_skip` + 1 WHERE `id` = ? AND `total_count` > 0\"\n                    : \"UPDATE `$type` SET `total_count` = `total_count` + 1 WHERE `id` = ?\";\n                Dba::write($sql, array($object_id));\n                break;\n            case 'album':\n            case 'artist':\n                $sql = ($count_type == 'down')\n                    ? \"UPDATE `$type` SET `total_count` = `total_count` - 1 WHERE `id` = ? AND `total_count` > 0\"\n                    : \"UPDATE `$type` SET `total_count` = `total_count` + 1 WHERE `id` = ?\";\n                Dba::write($sql, array($object_id));\n                break;\n        }\n    }\n\n    /**\n     * insert\n     * This inserts a new record for the specified object\n     * with the specified information, amazing!\n     * @param string $input_type\n     * @param integer $object_id\n     * @param integer $user_id\n     * @param string $agent\n     * @param array $location\n     * @param string $count_type\n     * @param integer $date\n     * @return boolean\n     */\n    public static function insert(\n        $input_type,\n        $object_id,\n        $user_id,\n        $agent = '',\n        $location = [],\n        $count_type = 'stream',\n        $date = null\n    ) {\n        if (AmpConfig::get('use_auth') && $user_id < 0) {\n            debug_event(self::class, 'Invalid user given ' . $user_id, 3);\n\n            return false;\n        }\n        $type = self::validate_type($input_type);\n        if (self::is_already_inserted($type, $object_id, $user_id, $agent, $date)) {\n            return false;\n        }\n\n        $latitude  = null;\n        $longitude = null;\n        $geoname   = null;\n        if (isset($location['latitude'])) {\n            $latitude = $location['latitude'];\n        }\n        if (isset($location['longitude'])) {\n            $longitude = $location['longitude'];\n        }\n        if (isset($location['name'])) {\n            $geoname = $location['name'];\n        }\n        // allow setting date for scrobbles\n        if (!is_numeric($date)) {\n            $date = time();\n        }\n\n        $sql        = \"INSERT IGNORE INTO `object_count` (`object_type`, `object_id`, `count_type`, `date`, `user`, `agent`, `geo_latitude`, `geo_longitude`, `geo_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n        $db_results = Dba::write($sql, array($type, $object_id, $count_type, $date, $user_id, $agent, $latitude, $longitude, $geoname));\n\n        // the count was inserted\n        if ($db_results) {\n            if (in_array($type, array('song', 'album', 'artist', 'video', 'podcast', 'podcast_episode')) && $count_type === 'stream' && $user_id > 0 && $agent !== 'debug') {\n                self::count($type, $object_id);\n                // don't register activity for album or artist plays\n                if (!in_array($type, array('album', 'artist', 'podcast'))) {\n                    static::getUserActivityPoster()->post((int)$user_id, 'play', $type, (int)$object_id, (int)$date);\n                }\n            }\n\n            return true;\n        }\n        debug_event(self::class, 'Unable to insert statistics for ' . $user_id . ':' . $object_id, 3);\n\n        return false;\n    } // insert\n\n    /**\n     * is_already_inserted\n     * Check if the same stat has not already been inserted within a graceful delay\n     * @param string $type\n     * @param integer $object_id\n     * @param integer $user\n     * @param string $agent\n     * @param integer $time\n     * @param bool $exact\n     * @return boolean\n     */\n    public static function is_already_inserted($type, $object_id, $user, $agent, $time, $exact = false)\n    {\n        $sql = ($exact)\n            ? \"SELECT `object_id`, `date`, `count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` = ? AND `object_count`.`count_type` = 'stream' AND `object_count`.`date` = $time \"\n            : \"SELECT `object_id`, `date`, `count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` = ? AND `object_count`.`count_type` = 'stream' AND (`object_count`.`date` >= ($time - 5) AND `object_count`.`date` <= ($time + 5)) \";\n        $params = array($user, $type);\n        if ($agent !== '') {\n            $sql .= \"AND `object_count`.`agent` = ? \";\n            $params[] = $agent;\n        }\n        $sql .= \"ORDER BY `object_count`.`date` DESC\";\n\n        $db_results = Dba::read($sql, $params);\n        while ($row = Dba::fetch_assoc($db_results)) {\n            // Stop double ups\n            if ($row['object_id'] == $object_id) {\n                debug_event(self::class, 'Object already inserted {' . (string) $object_id . '} date: ' . (string) $time, 5);\n\n                return true;\n            }\n        }\n\n        return false;\n    } // is_already_inserted\n\n    /**\n     * get_object_count\n     * Get count for an object\n     * @param string $object_type\n     * @param integer $object_id\n     * @param string $threshold\n     * @param string $count_type\n     * @return integer\n     */\n    public static function get_object_count($object_type, $object_id, $threshold = null, $count_type = 'stream')\n    {\n        if ($threshold === null || $threshold === '') {\n            $threshold = 0;\n        }\n\n        if (AmpConfig::get('cron_cache')) {\n            $sql = \"SELECT `count` AS `total_count` FROM `cache_object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ? AND `threshold` = \" . $threshold;\n        } else {\n            $sql = \"SELECT COUNT(*) AS `total_count` FROM `object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ?\";\n            if ($threshold > 0) {\n                $date = time() - (86400 * (int)$threshold);\n                $sql .= \"AND `date` >= '\" . $date . \"'\";\n            }\n        }\n\n        $db_results = Dba::read($sql, array($object_type, $object_id, $count_type));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int)$results['total_count'];\n    } // get_object_count\n\n    /**\n     * get_object_total\n     * Get count for an object\n     * @param string $object_type\n     * @param integer $object_id\n     * @param string $threshold\n     * @param string $count_type\n     * @return integer\n     */\n    public static function get_object_total($object_type, $object_id, $threshold = null, $count_type = 'stream')\n    {\n        if ($threshold === null || $threshold === '') {\n            $threshold = 0;\n        }\n\n        if (AmpConfig::get('cron_cache')) {\n            $sql = \"SELECT `count_total` AS `total_count` FROM `object_total` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ? AND `threshold` = \" . $threshold;\n        } else {\n            $sql = \"SELECT COUNT(*) AS `total_count` FROM `object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ?\";\n            if ($threshold > 0) {\n                $date = time() - (86400 * (int)$threshold);\n                $sql .= \"AND `date` >= '\" . $date . \"'\";\n            }\n        }\n\n        $db_results = Dba::read($sql, array($object_type, $object_id, $count_type));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int)$results['total_count'];\n    } // get_object_count\n\n    /**\n     * get_cached_place_name\n     * @param $latitude\n     * @param $longitude\n     * @return mixed|null\n     */\n    public static function get_cached_place_name($latitude, $longitude)\n    {\n        $name       = null;\n        $sql        = \"SELECT `geo_name` FROM `object_count` WHERE `geo_latitude` = ? AND `geo_longitude` = ? AND `geo_name` IS NOT NULL ORDER BY `id` DESC LIMIT 1\";\n        $db_results = Dba::read($sql, array($latitude, $longitude));\n        $results    = Dba::fetch_assoc($db_results);\n        if (!empty($results)) {\n            $name = $results['geo_name'];\n        }\n\n        return $name;\n    }\n\n    /**\n     * get_last_play\n     * This returns the full data for the last song/video/podcast_episode that was played, including when it\n     * was played, this is used by, among other things, the LastFM plugin to figure out\n     * if we should re-submit or if this is a duplicate / if it's too soon. This takes an\n     * optional user_id because when streaming we don't have $GLOBALS()\n     * @param string $user_id\n     * @param string $agent\n     * @param integer $date\n     * @return array\n     */\n    public static function get_last_play($user_id = '', $agent = '', $date = 0)\n    {\n        if ($user_id === '') {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        if ((int)$user_id == 0) {\n            return array(\n                'id' => 0,\n                'object_type' => false,\n                'object_id' => false,\n                'user' => 0,\n                'agent' => '',\n                'date' => 0,\n                'count_type' => ''\n            );\n        }\n\n        $sql    = \"SELECT `object_count`.`id`, `object_count`.`object_type`, `object_count`.`object_id`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`date`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` IN ('song', 'video', 'podcast_episode') AND `object_count`.`count_type` IN ('stream', 'skip') \";\n        $params = array($user_id);\n        if ($agent) {\n            $sql .= \"AND `object_count`.`agent` = ? \";\n            $params[] = $agent;\n        }\n        if ($date > 0) {\n            $sql .= \"AND `object_count`.`date` <= ? \";\n            $params[] = $date;\n        }\n        $sql .= \"ORDER BY `object_count`.`date` DESC LIMIT 1\";\n        $db_results = Dba::read($sql, $params);\n\n        return Dba::fetch_assoc($db_results);\n    } // get_last_play\n\n    /**\n     * shift_last_play\n     * When you play or pause the song, shift the start time to allow better skip recording\n     *\n     * @param string $user_id\n     * @param string $agent\n     * @param integer $original_date\n     * @param integer $new_date\n     */\n    public static function shift_last_play($user_id, $agent, $original_date, $new_date)\n    {\n        // update the object_count table\n        $sql = \"UPDATE `object_count` SET `object_count`.`date` = ? WHERE `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`date` = ?\";\n        Dba::write($sql, array($new_date, $user_id, $agent, $original_date));\n\n        // update the user_activity table\n        $sql = \"UPDATE `user_activity` SET `user_activity`.`activity_date` = ? WHERE `user_activity`.`user` = ? AND `user_activity`.`activity_date` = ?\";\n        Dba::write($sql, array($new_date, $user_id, $original_date));\n    } // shift_last_play\n\n    /**\n     * get_time\n     *\n     * get the time for the object (song, video, podcast_episode)\n     * @param integer $object_id\n     * @param string $object_type\n     * @return integer\n     */\n    public static function get_time($object_id, $object_type)\n    {\n        // you can't get the last played when you haven't played something before\n        if (!$object_id || !$object_type) {\n            return 0;\n        }\n        $sql        = \"SELECT `time` FROM `$object_type` WHERE `id` = ?\";\n        $db_results = Dba::read($sql, array($object_id));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int) $results['time'];\n    } // get_time\n\n    /**\n     * skip_last_play\n     * this sets the object_counts count type to skipped\n     * Gets called when the next song is played in quick succession\n     *\n     * @param integer $date\n     * @param string $agent\n     * @param integer $user_id\n     * @param integer $object_id\n     * @param string $object_type\n     * @return PDOStatement|boolean\n     */\n    public static function skip_last_play($date, $agent, $user_id, $object_id, $object_type)\n    {\n        // change from a stream to a skip\n        $sql = \"UPDATE `object_count` SET `count_type` = 'skip' WHERE `date` = ? AND `agent` = ? AND `user` = ? AND `object_count`.`object_type` = ? ORDER BY `object_count`.`date` DESC\";\n        Dba::write($sql, array($date, $agent, $user_id, $object_type));\n\n        // update the total counts (and total_skip counts) as well\n        if ($user_id > 0 && $agent !== 'debug') {\n            $song = new Song($object_id);\n            self::count('song', $song->id, 'down');\n            self::count('album', $song->album, 'down');\n            $artists = array_unique(array_merge(Song::get_parent_array($song->id), Song::get_parent_array($song->album, 'album')));\n            foreach ($artists as $artist_id) {\n                self::count('artist', $artist_id, 'down');\n            }\n            if (in_array($object_type, array('song', 'video', 'podcast_episode'))) {\n                $sql  = \"UPDATE `user_data`, (SELECT `$object_type`.`size` FROM `$object_type` WHERE `$object_type`.`id` = ?) AS `$object_type` SET `value` = `value` - `$object_type`.`size` WHERE `user` = ? AND `value` = 'play_size'\";\n                Dba::write($sql, array($object_id, $object_id));\n            }\n        }\n\n        // To remove associated album and artist entries\n        $sql = \"DELETE FROM `object_count` WHERE `object_type` IN ('album', 'artist', 'podcast') AND `date` = ? AND `agent` = ? AND `user` = ? \";\n\n        return Dba::write($sql, array($date, $agent, $user_id));\n    } // skip_last_play\n\n    /**\n     * has_played_history\n     * this checks to see if the current object has been played recently by the user\n     * @param string $object_type\n     * @param Song|Podcast_Episode|Video $object\n     * @param integer $user\n     * @param string $agent\n     * @param integer $date\n     * @return boolean\n     */\n    public static function has_played_history($object_type, $object, $user, $agent, $date)\n    {\n        if (AmpConfig::get('use_auth') && $user == -1) {\n            return false;\n        }\n        // if it's already recorded (but from a different agent), don't do it again\n        if (self::is_already_inserted($object_type, $object->id, $user, '', $date, true)) {\n            return false;\n        }\n        $previous  = self::get_last_play($user, $agent, $date);\n        // no previous data?\n        if (!array_key_exists('object_id', $previous) || !array_key_exists('object_type', $previous)) {\n            return true;\n        }\n        $last_time = self::get_time($previous['object_id'], $previous['object_type']);\n        $diff      = $date - (int) $previous['date'];\n        $item_time = $object->time;\n        $skip_time = AmpConfig::get_skip_timer($last_time);\n\n        // if your last song is 30 seconds and your skip timer is 40 you don't want to keep skipping it.\n        if ($last_time > 0 && $last_time < $skip_time) {\n            return true;\n        }\n\n        // this object was your last play and the length between plays is too short.\n        if ($previous['object_id'] == $object->id && $diff < ($item_time)) {\n            debug_event(self::class, 'Repeated the same ' . get_class($object) . ' too quickly (' . $diff . '/' . ($item_time) . 's), not recording stats for {' . $object->id . '}', 3);\n\n            return false;\n        }\n\n        // when the difference between recordings is too short, the previous object has been skipped, so note that\n        if (($diff < $skip_time || ($diff < $skip_time && $last_time > $skip_time))) {\n            debug_event(self::class, 'Last ' . $previous['object_type'] . ' played within skip limit (' . $diff . '/' . $skip_time . 's). Skipping {' . $previous['object_id'] . '}', 3);\n            self::skip_last_play($previous['date'], $previous['agent'], $previous['user'], $previous['object_id'], $previous['object_type']);\n            // delete song, podcast_episode and video from user_activity to keep stats in line\n            static::getUseractivityRepository()->deleteByDate($previous['date'], 'play', (int) $previous['user']);\n        }\n\n        return true;\n    } // has_played_history\n\n    private static function getUseractivityRepository(): UserActivityRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserActivityRepositoryInterface::class);\n    }\n\n    /**\n     * get_object_history\n     * This returns the objects that have happened for $user_id sometime after $time\n     * used primarily by the democratic cooldown code\n     * @param integer $user_id\n     * @param integer $time\n     * @param boolean $newest\n     * @return array\n     */\n    public static function get_object_history($user_id, $time, $newest = true)\n    {\n        if (!in_array((string)$user_id, static::getUserRepository()->getValid())) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $order = ($newest) ? 'DESC' : 'ASC';\n        $sql   = (AmpConfig::get('catalog_disable'))\n            ? \"SELECT * FROM `object_count` LEFT JOIN `song` ON `song`.`id` = `object_count`.`object_id` LEFT JOIN `catalog` ON `catalog`.`id` = `song`.`catalog` WHERE `object_count`.`user` = ? AND `object_count`.`object_type`='song' AND `object_count`.`date` >= ? AND `catalog`.`enabled` = '1' \"\n            : \"SELECT * FROM `object_count` LEFT JOIN `song` ON `song`.`id` = `object_count`.`object_id` WHERE `object_count`.`user` = ? AND `object_count`.`object_type`='song' AND `object_count`.`date` >= ? \";\n        $sql .= (AmpConfig::get('catalog_filter') && $user_id > 0)\n            ? \" AND\" . Catalog::get_user_filter('song', $user_id) . \"ORDER BY `object_count`.`date` \" . $order\n            : \"ORDER BY `object_count`.`date` \" . $order;\n        $db_results = Dba::read($sql, array($user_id, $time));\n\n        $results = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['object_id'];\n        }\n\n        return $results;\n    } // get_object_history\n\n    /**\n     * get_top_sql\n     * This returns the get_top sql\n     * @param string $input_type\n     * @param string $threshold\n     * @param string $count_type\n     * @param integer $user_id\n     * @param boolean $random\n     * @param boolean $addAdditionalColumns\n     * @return string\n     */\n    public static function get_top_sql(\n        $input_type,\n        $threshold,\n        $count_type = 'stream',\n        $user_id = null,\n        $random = false,\n        bool $addAdditionalColumns = false\n    ) {\n        $type           = self::validate_type($input_type);\n        $date           = time() - (86400 * (int)$threshold);\n        $catalog_filter = (AmpConfig::get('catalog_filter'));\n        if ($type == 'playlist' && !$addAdditionalColumns) {\n            $sql = \"SELECT `id` FROM `playlist`\";\n            if ($threshold > 0) {\n                $sql .= \" WHERE `last_update` >= '\" . $date . \"' \";\n            }\n            if ($catalog_filter && $user_id > 0) {\n                $sql .= ($threshold > 0)\n                    ? \" AND\" . Catalog::get_user_filter($type, $user_id)\n                    : \" WHERE\" . Catalog::get_user_filter($type, $user_id);\n            }\n            // playlist is now available in object_count too\n            $sql .= \"UNION SELECT `object_id` FROM `object_count` WHERE `object_type` = 'playlist'\";\n            if ($threshold > 0) {\n                $sql .= \" AND `date` >= '\" . $date . \"' \";\n            }\n            if ($catalog_filter && $user_id > 0) {\n                $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_\" . $type, $user_id);\n            }\n            //debug_event(self::class, 'get_top_sql ' . $sql, 5);\n\n            return $sql;\n        }\n        if ($user_id === null && AmpConfig::get('cron_cache') && !$addAdditionalColumns && in_array($type, array('album', 'artist', 'song', 'genre', 'catalog', 'live_stream', 'video', 'podcast', 'podcast_episode', 'playlist'))) {\n            $sql = \"SELECT `object_id` AS `id`, MAX(`count`) AS `count` FROM `cache_object_count` WHERE `object_type` = '\" . $type . \"' AND `count_type` = '\" . $count_type . \"' AND `threshold` = '\" . $threshold . \"' GROUP BY `object_id`, `object_type`\";\n        } else {\n            $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n            $is_podcast        = ($type == 'podcast');\n            $select_sql        = ($is_podcast)\n                ? \"`podcast_episode`.`podcast`\"\n                : \"MIN(`object_id`)\";\n            // Select Top objects counting by # of rows for you only\n            $sql = \"SELECT $select_sql AS `id`, COUNT(*) AS `count`\";\n            // Add additional columns to use the select query as insert values directly\n            if ($addAdditionalColumns) {\n                $sql .= ($is_podcast)\n                    ? \", 'podcast' AS `object_type`, `count_type`, \" . $threshold . \" AS `threshold`\"\n                    : \", `object_type`, `count_type`, \" . $threshold . \" AS `threshold`\";\n            }\n            $sql .= \" FROM `object_count`\";\n            if ($allow_group_disks) {\n                $sql .= \" LEFT JOIN `album` ON `album`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'album'\";\n            }\n            if ($is_podcast) {\n                $type = 'podcast_episode';\n                $sql .= \" LEFT JOIN `podcast_episode` ON `podcast_episode`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'podcast_episode'\";\n            }\n            if ($user_id !== null) {\n                $sql .= \" WHERE `object_type` = '\" . $type . \"' AND `user` = \" . (string)$user_id;\n            } else {\n                $sql .= \" WHERE `object_type` = '\" . $type . \"' \";\n                if ($threshold > 0) {\n                    $sql .= \"AND `date` >= '\" . $date . \"'\";\n                }\n            }\n            if (AmpConfig::get('catalog_disable') && in_array($type, array('song', 'artist', 'album', 'video'))) {\n                $sql .= \" AND \" . Catalog::get_enable_filter($type, '`object_id`');\n            }\n            if (AmpConfig::get('catalog_filter') && in_array($type, array('song', 'artist', 'album', 'podcast_episode', 'video')) && $user_id > 0) {\n                $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_$type\", $user_id);\n            }\n            $rating_filter = AmpConfig::get_rating_filter();\n            if ($rating_filter > 0 && $rating_filter <= 5 && $user_id !== null) {\n                $sql .= \" AND `object_id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \")\";\n            }\n            $sql .= \" AND `count_type` = '\" . $count_type . \"'\";\n            if ($allow_group_disks) {\n                $sql .= \" GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group`, `object_count`.`object_type`, `object_count`.`count_type`\";\n            } else {\n                $sql .= ($is_podcast)\n                    ? \" GROUP BY `podcast_episode`.`podcast`, `object_count`.`object_type`, `object_count`.`count_type`\"\n                    : \" GROUP BY `object_count`.`object_id`, `object_count`.`object_type`, `object_count`.`count_type`\";\n            }\n        }\n        if ($random) {\n            $sql .= \" ORDER BY RAND() DESC \";\n        } else {\n            $sql .= \" ORDER BY `count` DESC \";\n        }\n        //debug_event(self::class, 'get_top_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_top\n     * This returns the top X for type Y from the\n     * last stats_threshold days\n     * @param string $type\n     * @param integer $count\n     * @param integer $threshold\n     * @param integer $offset\n     * @param integer $user_id\n     * @param boolean $random\n     * @return array\n     */\n    public static function get_top($type, $count, $threshold, $offset = 0, $user_id = null, $random = false)\n    {\n        $limit = ($offset < 1) ? $count : $offset . \",\" . $count;\n        $sql   = self::get_top_sql($type, $threshold, 'stream', $user_id, $random);\n\n        if ($limit) {\n            $sql .= \"LIMIT $limit\";\n        }\n        //debug_event(self::class, 'get_top ' . $sql, 5);\n\n        $db_results = Dba::read($sql);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['id'];\n        }\n\n        return $results;\n    } // get_top\n\n    /**\n     * get_recent_sql\n     * This returns the get_recent sql\n     * @param string $input_type\n     * @param int $user_id\n     * @param boolean $newest\n     * @return string\n     */\n    public static function get_recent_sql($input_type, $user_id = null, $newest = true)\n    {\n        $type              = self::validate_type($input_type);\n        $ordersql          = ($newest === true) ? 'DESC' : 'ASC';\n        $user_sql          = (!empty($user_id)) ? \" AND `user` = '\" . $user_id . \"'\" : '';\n        $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n        $catalog_filter    = (AmpConfig::get('catalog_filter'));\n\n        $sql = ($allow_group_disks)\n            ? \"SELECT MIN(`object_id`) AS `id`, MAX(`date`) AS `date` FROM `object_count` LEFT JOIN `album` ON `album`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'album' WHERE `object_type` = '\" . $type . \"'\" . $user_sql\n            : \"SELECT `object_id` AS `id`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_type` = '\" . $type . \"'\" . $user_sql;\n        if (AmpConfig::get('catalog_disable') && in_array($type, array('song', 'artist', 'album'))) {\n            $sql .= \" AND \" . Catalog::get_enable_filter($type, '`object_id`');\n        }\n        if ($catalog_filter && in_array($type, array('video', 'artist', 'album', 'song')) && $user_id > 0) {\n            $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_$type\", $user_id);\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        if ($rating_filter > 0 && $rating_filter <= 5 && !empty($user_id)) {\n            $sql .= \" AND `object_id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \")\";\n        }\n        $sql .= ($allow_group_disks)\n            ? \" GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group` ORDER BY MAX(`date`) \" . $ordersql . \", `id` \"\n            : \" GROUP BY `object_count`.`object_id` ORDER BY MAX(`date`) \" . $ordersql . \", `object_count`.`object_id` \";\n\n        // playlists aren't the same as other objects so change the sql\n        if ($type === 'playlist') {\n            $sql = \"SELECT `id`, `last_update` AS `date` FROM `playlist`\";\n            if (!empty($user_id)) {\n                $sql .= \" WHERE `user` = '\" . $user_id . \"'\";\n                if ($catalog_filter) {\n                    $sql .= \" AND\" . Catalog::get_user_filter($type, $user_id);\n                }\n            }\n            $sql .= \" ORDER BY `last_update` \" . $ordersql;\n        }\n        //debug_event(self::class, 'get_recent_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_recent\n     * This returns the recent X for type Y\n     * @param string $input_type\n     * @param integer $count\n     * @param integer $offset\n     * @param boolean $newest\n     * @return array\n     */\n    public static function get_recent($input_type, $count = 0, $offset = 0, $newest = true)\n    {\n        if ($count < 1) {\n            $count = AmpConfig::get('popular_threshold', 10);\n        }\n        $limit = ($offset < 1) ? $count : $offset . \",\" . $count;\n\n        $type = self::validate_type($input_type);\n        $sql  = self::get_recent_sql($type, null, $newest);\n        $sql .= \"LIMIT $limit\";\n\n        $db_results = Dba::read($sql);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['id'];\n        }\n\n        return $results;\n    } // get_recent\n\n    /**\n     * get_user\n     * This gets all stats for a type based on user with thresholds and all\n     * If full is passed, doesn't limit based on date\n     * @param string $input_count\n     * @param string $input_type\n     * @param integer $user\n     * @param integer $full\n     * @return array\n     */\n    public static function get_user($input_count, $input_type, $user, $full = 0)\n    {\n        $type = self::validate_type($input_type);\n\n        // If full then don't limit on date\n        $date = ($full > 0) ? '0' : time() - (86400 * (int)AmpConfig::get('stats_threshold', 7));\n\n        // Select Objects based on user\n        // FIXME:: Requires table scan, look at improving\n        $sql        = \"SELECT `object_id`, COUNT(`id`) AS `count` FROM `object_count` WHERE `object_type` = ? AND `date` >= ? AND `user` = ? GROUP BY `object_id` ORDER BY `count` DESC LIMIT $input_count\";\n        $db_results = Dba::read($sql, array($type, $date, $user));\n\n        $results = array();\n\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row;\n        }\n\n        return $results;\n    } // get_user\n\n    /**\n     * validate_type\n     * This function takes a type and returns only those\n     * which are allowed, ensures good data gets put into the db\n     * @param string $type\n     * @return string\n     */\n    public static function validate_type($type)\n    {\n        switch ($type) {\n            case 'artist':\n            case 'album':\n            case 'tag':\n            case 'song':\n            case 'video':\n            case 'tvshow':\n            case 'tvshow_season':\n            case 'tvshow_episode':\n            case 'movie':\n            case 'playlist':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'live_stream':\n                return $type;\n            case 'genre':\n                return 'tag';\n            default:\n                return 'song';\n        } // end switch\n    } // validate_type\n\n    /**\n     * get_newest_sql\n     * This returns the get_newest sql\n     * @param string $input_type\n     * @param integer $catalog\n     * @return string\n     */\n    public static function get_newest_sql($input_type, $catalog = 0, $user_id = null)\n    {\n        $type = self::validate_type($input_type);\n        // all objects could be filtered\n        $catalog_filter = (AmpConfig::get('catalog_filter'));\n\n        // add playlists to mashup browsing\n        if ($type == 'playlist') {\n            $sql = ($catalog_filter && $user_id > 0)\n                ? \"SELECT `playlist`.`id`, MAX(`playlist`.`last_update`) AS `real_atime` FROM `playlist` WHERE\" . Catalog::get_user_filter($type, $user_id) . \"GROUP BY `playlist`.`id` ORDER BY `real_atime` DESC \"\n                : \"SELECT `playlist`.`id`, MAX(`playlist`.`last_update`) AS `real_atime` FROM `playlist` GROUP BY `playlist`.`id` ORDER BY `real_atime` DESC \";\n\n            return $sql;\n        }\n        $base_type         = 'song';\n        $join              = 'WHERE';\n        $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n        $filter_type       = $type;\n        // everything else\n        if ($type === 'song') {\n            $sql      = \"SELECT DISTINCT(`song`.`id`) AS `id`, `song`.`addition_time` AS `real_atime` FROM `song` \";\n            $sql_type = \"`song`.`id`\";\n        } elseif ($type === 'album') {\n            $base_type = 'album';\n            $sql       = \"SELECT MIN(`album`.`id`) AS `id`, MIN(`album`.`addition_time`) AS `real_atime` FROM `album` \";\n            $sql_type  = \"`album`.`id`\";\n        } elseif ($type === 'video') {\n            $base_type = 'video';\n            $sql       = \"SELECT DISTINCT(`video`.`id`) AS `id`, `video`.`addition_time` AS `real_atime` FROM `video` \";\n            $sql_type  = \"`video`.`id`\";\n        } elseif ($type === 'artist') {\n            $sql         = \"SELECT MIN(`song`.`artist`) AS `id`, MIN(`song`.`addition_time`) AS `real_atime` FROM `song` \";\n            $sql_type    = \"`song`.`artist`\";\n            $filter_type = 'song_artist';\n        } elseif ($type === 'podcast') {\n            $base_type = 'podcast';\n            $sql       = \"SELECT MIN(`podcast`.`id`) AS `id`, MIN(`podcast`.`lastsync`) AS `real_atime` FROM `podcast` \";\n            $sql_type  = \"`podcast`.`id`\";\n        } elseif ($type === 'podcast_episode') {\n            $base_type = 'podcast_episode';\n            $sql       = \"SELECT MIN(`podcast_episode`.`id`) AS `id`, MIN(`podcast_episode`.`addition_time`) AS `real_atime` FROM `podcast_episode` \";\n            $sql_type  = \"`podcast_episode`.`id`\";\n        } else {\n            // what else?\n            $sql      = \"SELECT MIN(`$type`) AS `id`, MIN(`song`.`addition_time`) AS `real_atime` FROM `$base_type` \";\n            $sql_type = \"`song`.`\" . $type . \"`\";\n        }\n        // join catalogs\n        $sql .= \"LEFT JOIN `catalog` ON `catalog`.`id` = `\" . $base_type . \"`.`catalog` \";\n        if (AmpConfig::get('catalog_disable')) {\n            $sql .= $join . \" `catalog`.`enabled` = '1' \";\n            $join = ' AND';\n        }\n        if ($catalog_filter && $user_id > 0) {\n            $sql .= $join . Catalog::get_user_filter($filter_type, $user_id) . \" \";\n            $join = ' AND';\n        }\n        if ($catalog > 0) {\n            $sql .= $join . \" `catalog` = '\" . (string)scrub_in($catalog) . \"' \";\n            $join = ' AND';\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        $user_id       = (int)Core::get_global('user')->id;\n        if ($rating_filter > 0 && $rating_filter <= 5 && $user_id > 0) {\n            $sql .= $join . \" \" . $sql_type . \" NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \") \";\n            $join = ' AND';\n        }\n        if ($allow_group_disks) {\n            $sql .= $join . \" `album`.`id` IS NOT NULL GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group` ORDER BY `real_atime` DESC \";\n        } elseif ($type === 'song' || $base_type === 'video') {\n            $sql .= \"GROUP BY $sql_type, `real_atime` ORDER BY `real_atime` DESC \";\n        } else {\n            $sql .= \"GROUP BY $sql_type ORDER BY `real_atime` DESC \";\n        }\n        //debug_event(self::class, 'get_newest_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_newest\n     * This returns an array of the newest artists/albums/whatever\n     * in this Ampache instance\n     * @param string $type\n     * @param integer $count\n     * @param integer $offset\n     * @param integer $catalog\n     * @param integer $user_id\n     * @return integer[]\n     */\n    public static function get_newest($type, $count = 0, $offset = 0, $catalog = 0, $user_id = null)\n    {\n        if ($count < 1) {\n            $count = AmpConfig::get('popular_threshold', 10);\n        }\n        if ($offset < 1) {\n            $limit = $count;\n        } else {\n            $limit = $offset . ', ' . $count;\n        }\n\n        $sql = self::get_newest_sql($type, $catalog, $user_id);\n        $sql .= \"LIMIT $limit\";\n        $db_results = Dba::read($sql);\n\n        $items = array();\n\n        while ($row = Dba::fetch_row($db_results)) {\n            $items[] = (int) $row[0];\n        } // end while results\n\n        return $items;\n    } // get_newest\n\n    /**\n     * @deprecated inject dependency\n     */\n    private static function getUserActivityPoster(): UserActivityPosterInterface\n    {\n        global $dic;\n\n        return $dic->get(UserActivityPosterInterface::class);\n    }\n\n    /**\n     * @deprecated inject dependency\n     */\n    private static function getUserRepository(): UserRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserRepositoryInterface::class);\n    }\n}\n", "<?php\n/*\n * vim:set softtabstop=4 shiftwidth=4 expandtab:\n *\n * LICENSE: GNU Affero General Public License, version 3 (AGPL-3.0-or-later)\n * Copyright 2001 - 2022 Ampache.org\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=0);\n\nnamespace Ampache\\Repository\\Model;\n\nuse Ampache\\Module\\Authorization\\Access;\nuse Ampache\\Repository\\Model\\Metadata\\Repository\\MetadataField;\nuse Ampache\\Module\\System\\Dba;\nuse Ampache\\Config\\AmpConfig;\nuse Ampache\\Module\\System\\Core;\nuse Ampache\\Repository\\LicenseRepositoryInterface;\nuse Ampache\\Repository\\UserRepositoryInterface;\n\n/**\n * Search-related voodoo.  Beware tentacles.\n */\nclass Search extends playlist_object\n{\n    protected const DB_TABLENAME = 'search';\n    public const VALID_TYPES     = array('song', 'album', 'song_artist', 'album_artist', 'artist', 'genre', 'label', 'playlist', 'podcast', 'podcast_episode', 'tag', 'user', 'video');\n\n    public $searchType;\n    public $objectType;\n    public $rules          = array(); // rules used to actually search\n    public $logic_operator = 'AND';\n    public $type           = 'public';\n    public $random         = 0;\n    public $limit          = 0;\n    public $last_count     = 0;\n    public $last_duration  = 0;\n    public $date           = 0;\n\n    public $basetypes;\n    public $types; // rules that are available to the objectType\n\n    public $search_user;\n\n    private $stars;\n    private $order_by;\n\n    /**\n     * constructor\n     * @param integer $search_id\n     * @param string $searchType\n     * @param User|null $user\n     */\n    public function __construct($search_id = 0, $searchType = 'song', ?User $user = null)\n    {\n        if ($user !== null) {\n            $this->search_user = $user;\n        } else {\n            $this->search_user = Core::get_global('user');\n        }\n        //debug_event(self::class, \"SearchID: $search_id; Search Type: $searchType\\n\" . print_r($this, true), 5);\n        $searchType       = (in_array(strtolower($searchType), self::VALID_TYPES))\n            ? strtolower($searchType)\n            : 'song';\n        $this->searchType = $searchType;\n        $this->objectType = $searchType;\n        if ($search_id > 0) {\n            $info = $this->get_info($search_id);\n            foreach ($info as $key => $value) {\n                $this->$key = ($key == 'rules')\n                    ? json_decode((string)$value, true)\n                    : $value;\n            }\n            // make sure saved rules match the correct names\n            $rule_count = 0;\n            foreach ($this->rules as $rule) {\n                $this->rules[$rule_count][0] = $this->_get_rule_name($rule[0]);\n                $rule_count++;\n            }\n        }\n        $this->date = time();\n\n        $this->stars = array(\n            T_('0 Stars'),\n            T_('1 Star'),\n            T_('2 Stars'),\n            T_('3 Stars'),\n            T_('4 Stars'),\n            T_('5 Stars')\n        );\n\n        // Define our basetypes\n        $this->_set_basetypes();\n\n        $this->types = array();\n        switch ($searchType) {\n            case 'song':\n                $this->_set_types_song();\n                $this->order_by = '`song`.`file`';\n                break;\n            case 'album':\n                $this->_set_types_album();\n                $this->order_by = (AmpConfig::get('album_group')) ? '`album`.`name`' : '`album`.`name`, `album`.`disk`';\n                break;\n            case 'video':\n                $this->_set_types_video();\n                $this->order_by = '`video`.`file`';\n                break;\n            case 'album_artist':\n            case 'song_artist':\n                $this->_set_types_artist();\n                $this->order_by   = '`artist`.`name`';\n                $this->objectType = 'artist';\n                break;\n            case 'artist':\n                $this->_set_types_artist();\n                $this->order_by = '`artist`.`name`';\n                break;\n            case 'playlist':\n                $this->_set_types_playlist();\n                $this->order_by = '`playlist`.`name`';\n                break;\n            case 'podcast':\n                $this->_set_types_podcast();\n                $this->order_by = '`podcast`.`title`';\n                break;\n            case 'podcast_episode':\n                $this->_set_types_podcast_episode();\n                $this->order_by = '`podcast_episode`.`pubdate` DESC';\n                break;\n            case 'label':\n                $this->_set_types_label();\n                $this->order_by = '`label`.`name`';\n                break;\n            case 'user':\n                $this->_set_types_user();\n                $this->order_by = '`user`.`username`';\n                break;\n            case 'tag':\n            case 'genre':\n                $this->_set_types_tag();\n                $this->order_by = '`tag`.`name`';\n                break;\n        } // end switch on searchType\n    } // end constructor\n\n    public function getId(): int\n    {\n        return (int)$this->id;\n    }\n\n    /**\n     * _set_basetypes\n     *\n     * Function called during construction to set the different types and rules for search\n     */\n    private function _set_basetypes()\n    {\n        $this->basetypes['numeric'][] = array(\n            'name' => 'gte',\n            'description' => T_('is greater than or equal to'),\n            'sql' => '>='\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'lte',\n            'description' => T_('is less than or equal to'),\n            'sql' => '<='\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'equal',\n            'description' => T_('equals'),\n            'sql' => '<=>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'ne',\n            'description' => T_('does not equal'),\n            'sql' => '<>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'gt',\n            'description' => T_('is greater than'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'lt',\n            'description' => T_('is less than'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['is_true'][] = array(\n            'name' => 'true',\n            'description' => T_('is true'),\n            'sql' => '1'\n        );\n\n        $this->basetypes['boolean'][] = array(\n            'name' => 'true',\n            'description' => T_('is true'),\n            'sql' => '1'\n        );\n\n        $this->basetypes['boolean'][] = array(\n            'name' => 'false',\n            'description' => T_('is false'),\n            'sql' => '0'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'contain',\n            'description' => T_('contains'),\n            'sql' => 'LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notcontain',\n            'description' => T_('does not contain'),\n            'sql' => 'NOT LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'start',\n            'description' => T_('starts with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/$/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'end',\n            'description' => T_('ends with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/^/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '='\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'not equal',\n            'description' => T_('is not'),\n            'sql' => '!='\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'sounds',\n            'description' => T_('sounds like'),\n            'sql' => 'SOUNDS LIKE'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notsounds',\n            'description' => T_('does not sound like'),\n            'sql' => 'NOT SOUNDS LIKE'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'regexp',\n            'description' => T_('matches regular expression'),\n            'sql' => 'REGEXP'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notregexp',\n            'description' => T_('does not match regular expression'),\n            'sql' => 'NOT REGEXP'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'contain',\n            'description' => T_('contains'),\n            'sql' => 'LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'notcontain',\n            'description' => T_('does not contain'),\n            'sql' => 'NOT LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'start',\n            'description' => T_('starts with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/$/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'end',\n            'description' => T_('ends with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/^/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'not equal',\n            'description' => T_('is not'),\n            'sql' => '='\n        );\n\n        $this->basetypes['boolean_numeric'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '<=>'\n        );\n\n        $this->basetypes['boolean_numeric'][] = array(\n            'name' => 'ne',\n            'description' => T_('is not'),\n            'sql' => '<>'\n        );\n\n        $this->basetypes['boolean_subsearch'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => ''\n        );\n\n        $this->basetypes['boolean_subsearch'][] = array(\n            'name' => 'ne',\n            'description' => T_('is not'),\n            'sql' => 'NOT'\n        );\n\n        $this->basetypes['date'][] = array(\n            'name' => 'lt',\n            'description' => T_('before'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['date'][] = array(\n            'name' => 'gt',\n            'description' => T_('after'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['days'][] = array(\n            'name' => 'lt',\n            'description' => T_('before (x) days ago'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['days'][] = array(\n            'name' => 'gt',\n            'description' => T_('after (x) days ago'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['recent_played'][] = array(\n            'name' => 'ply',\n            'description' => T_('Limit'),\n            'sql' => '`date`'\n        );\n        $this->basetypes['recent_added'][] = array(\n            'name' => 'add',\n            'description' => T_('Limit'),\n            'sql' => '`addition_time`'\n        );\n\n        $this->basetypes['recent_updated'][] = array(\n            'name' => 'upd',\n            'description' => T_('Limit'),\n            'sql' => '`update_time`'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => 'love',\n            'description' => T_('has loved'),\n            'sql' => 'userflag'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '5star',\n            'description' => T_('has rated 5 stars'),\n            'sql' => '`rating` = 5'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '4star',\n            'description' => T_('has rated 4 stars'),\n            'sql' => '`rating` = 4'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '3star',\n            'description' => T_('has rated 3 stars'),\n            'sql' => '`rating` = 3'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '2star',\n            'description' => T_('has rated 2 stars'),\n            'sql' => '`rating` = 2'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '1star',\n            'description' => T_('has rated 1 star'),\n            'sql' => '`rating` = 1'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => 'unrated',\n            'description' => T_('has not rated'),\n            'sql' => 'unrated'\n        );\n        $this->basetypes['multiple'] = array_merge($this->basetypes['text'], $this->basetypes['numeric']);\n    }\n\n    /**\n     * _add_type_numeric\n     *\n     * Generic integer searches rules\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param string $group\n     */\n    private function _add_type_numeric($name, $label, $type = 'numeric', $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('input', 'number'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_date\n     *\n     * Generic date searches rules\n     * @param string $name\n     * @param string $label\n     * @param string $group\n     */\n    private function _add_type_date($name, $label, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => 'date',\n            'widget' => array('input', 'datetime-local'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_text\n     *\n     * Generic text rules\n     * @param string $name\n     * @param string $label\n     * @param string $group\n     */\n    private function _add_type_text($name, $label, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => 'text',\n            'widget' => array('input', 'text'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_select\n     *\n     * Generic rule to select from a list\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param array $array\n     * @param string $group\n     */\n    private function _add_type_select($name, $label, $type, $array, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('select', $array),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_boolean\n     *\n     * True or false generic searches\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param string $group\n     */\n    private function _add_type_boolean($name, $label, $type = 'boolean', $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('input', 'hidden'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _set_types_song\n     *\n     * this is where all the searchTypes for songs are defined\n     */\n    private function _set_types_song()\n    {\n        $user_id = $this->search_user->id ?? 0;\n        $this->_add_type_text('anywhere', T_('Any searchable text'));\n\n        $t_song_data = T_('Song Data');\n        $this->_add_type_text('title', T_('Title'), $t_song_data);\n        $this->_add_type_text('album', T_('Album'), $t_song_data);\n        $this->_add_type_text('artist', T_('Song Artist'), $t_song_data);\n        $this->_add_type_text('album_artist', T_('Album Artist'), $t_song_data);\n        $this->_add_type_text('composer', T_('Composer'), $t_song_data);\n        $this->_add_type_numeric('track', T_('Track'), 'numeric', $t_song_data);\n        $this->_add_type_numeric('year', T_('Year'), 'numeric', $t_song_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_song_data);\n        $this->_add_type_text('label', T_('Label'), $t_song_data);\n        $this->_add_type_text('comment', T_('Comment'), $t_song_data);\n        $this->_add_type_text('lyrics', T_('Lyrics'), $t_song_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('albumrating', T_('My Rating (Album)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('artistrating', T_('My Rating (Artist)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $this->_add_type_text('favorite_album', T_('Favorites (Album)'), $t_ratings);\n            $this->_add_type_text('favorite_artist', T_('Favorites (Artist)'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n            $this->_add_type_select('other_user_album', T_('Another User (Album)'), 'user_numeric', $users, $t_ratings);\n            $this->_add_type_select('other_user_artist', T_('Another User (Artist)'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        /* HINT: Number of times object has been skipped */\n        $this->_add_type_numeric('skipped_times', T_('# Skipped'), 'numeric', $t_play_data);\n        /* HINT: Number of times object has been played OR skipped */\n        $this->_add_type_numeric('played_or_skipped_times', T_('# Played or Skipped'), 'numeric', $t_play_data);\n        /* HINT: Percentage of (Times Played / Times skipped) * 100 */\n        $this->_add_type_numeric('play_skip_ratio', T_('Played/Skipped ratio'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedalbum', T_('Played by Me (Album)'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedartist', T_('Played by Me (Artist)'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('album_genre', T_('Album Genre'), $t_genre);\n        $this->_add_type_text('artist_genre', T_('Artist Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $playlists = self::get_search_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('smartplaylist', T_('Smart Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $bitrate_array = array(\n            '32',\n            '40',\n            '48',\n            '56',\n            '64',\n            '80',\n            '96',\n            '112',\n            '128',\n            '160',\n            '192',\n            '224',\n            '256',\n            '320',\n            '640',\n            '1280'\n        );\n        $this->_add_type_select('bitrate', T_('Bitrate'), 'numeric', $bitrate_array, $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n        $this->_add_type_date('updated', T_('Updated'), $t_file_data);\n        if (AmpConfig::get('licensing')) {\n            $licenses = array();\n            foreach ($this->getLicenseRepository()->getAll() as $license_id) {\n                $license               = new License($license_id);\n                $licenses[$license_id] = $license->name;\n            }\n            $this->_add_type_select('license', T_('Music License'), 'boolean_numeric', $licenses, $t_file_data);\n        }\n        $this->_add_type_numeric('recent_added', T_('Recently added'), 'recent_added', $t_file_data);\n        $this->_add_type_numeric('recent_updated', T_('Recently updated'), 'recent_updated', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate_album', T_('Possible Duplicate Albums'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('orphaned_album', T_('Orphaned Album'), 'is_true', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_album', T_('MusicBrainz ID (Album)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_artist', T_('MusicBrainz ID (Artist)'), $t_musicbrainz);\n\n        $t_metadata = T_('Metadata');\n        if (AmpConfig::get('enable_custom_metadata')) {\n            $metadataFields          = array();\n            $metadataFieldRepository = new MetadataField();\n            foreach ($metadataFieldRepository->findAll() as $metadata) {\n                $metadataFields[$metadata->getId()] = $metadata->getName();\n            }\n            $this->types[] = array(\n                'name' => 'metadata',\n                'label' => $t_metadata,\n                'type' => 'multiple',\n                'subtypes' => $metadataFields,\n                'widget' => array('subtypes', array('input', 'text')),\n                'title' => $t_metadata\n            );\n        }\n    }\n\n    /**\n     * _set_types_artist\n     *\n     * this is where all the searchTypes for artists are defined\n     */\n    private function _set_types_artist()\n    {\n        $user_id       = $this->search_user->id ?? 0;\n        $t_artist_data = T_('Artist Data');\n        $this->_add_type_text('title', T_('Name'), $t_artist_data);\n        $this->_add_type_text('album', T_('Album Title'), $t_artist_data);\n        $this->_add_type_text('song', T_('Song Title'), $t_artist_data);\n        $this->_add_type_text('summary', T_('Summary'), $t_artist_data);\n        $this->_add_type_numeric('yearformed', T_('Year Formed'), 'numeric', $t_artist_data);\n        $this->_add_type_text('placeformed', T_('Place Formed'), $t_artist_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_artist_data);\n        $this->_add_type_numeric('album_count', T_('Album Count'), 'numeric', $t_artist_data);\n        $this->_add_type_numeric('song_count', T_('Song Count'), 'numeric', $t_artist_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('songrating', T_('My Rating (Song)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('albumrating', T_('My Rating (Album)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('song_genre', T_('Song Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_boolean('has_image', T_('Local Image'), 'boolean', $t_file_data);\n        $this->_add_type_numeric('image_width', T_('Image Width'), 'numeric', $t_file_data);\n        $this->_add_type_numeric('image_height', T_('Image Height'), 'numeric', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate_album', T_('Possible Duplicate Albums'), 'is_true', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_album', T_('MusicBrainz ID (Album)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_song', T_('MusicBrainz ID (Song)'), $t_musicbrainz);\n    } // artisttypes\n\n    /**\n     * _set_types_album\n     *\n     * this is where all the searchTypes for albums are defined\n     */\n    private function _set_types_album()\n    {\n        $user_id      = $this->search_user->id ?? 0;\n        $t_album_data = T_('Album Data');\n        $this->_add_type_text('title', T_('Title'), $t_album_data);\n        $this->_add_type_text('artist', T_('Album Artist'), $t_album_data);\n        $this->_add_type_text('song_artist', T_('Song Artist'), $t_album_data);\n        $this->_add_type_text('song', T_('Song Title'), $t_album_data);\n        $this->_add_type_numeric('year', T_('Year'), 'numeric', $t_album_data);\n        $this->_add_type_numeric('original_year', T_('Original Year'), 'numeric', $t_album_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_album_data);\n        $this->_add_type_text('release_type', T_('Release Type'), $t_album_data);\n        $this->_add_type_text('release_status', T_('Release Status'), $t_album_data);\n        $this->_add_type_numeric('song_count', T_('Song Count'), 'numeric', $t_album_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('songrating', T_('My Rating (Song)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('artistrating', T_('My Rating (Artist)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedartist', T_('Played by Me (Artist)'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('song_genre', T_('Song Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_boolean('has_image', T_('Local Image'), 'boolean', $t_file_data);\n        $this->_add_type_numeric('image_width', T_('Image Width'), 'numeric', $t_file_data);\n        $this->_add_type_numeric('image_height', T_('Image Height'), 'numeric', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('duplicate_mbid_group', T_('Duplicate MusicBrainz Release Group'), 'is_true', $t_file_data);\n        $this->_add_type_numeric('recent_added', T_('Recently added'), 'recent_added', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_artist', T_('MusicBrainz ID (Artist)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_song', T_('MusicBrainz ID (Song)'), $t_musicbrainz);\n    } // albumtypes\n\n    /**\n     * _set_types_video\n     *\n     * this is where all the searchTypes for videos are defined\n     */\n    private function _set_types_video()\n    {\n        $this->_add_type_text('file', T_('Filename'));\n    }\n\n    /**\n     * _set_types_playlist\n     *\n     * this is where all the searchTypes for playlists are defined\n     */\n    private function _set_types_playlist()\n    {\n        $t_playlist = T_('Playlist');\n        $this->_add_type_text('title', T_('Name'), $t_playlist);\n        $playlist_types = array(\n            0 => T_('public'),\n            1 => T_('private')\n        );\n        $this->_add_type_select('type', T_('Type'), 'boolean_numeric', $playlist_types, $t_playlist);\n        $users = $this->getUserRepository()->getValidArray();\n        $this->_add_type_select('owner', T_('Owner'), 'user_numeric', $users, $t_playlist);\n    }\n\n    /**\n     * _set_types_podcast\n     *\n     * this is where all the searchTypes for podcasts are defined\n     */\n    private function _set_types_podcast()\n    {\n        $t_podcasts = T_('Podcast');\n        $this->_add_type_text('title', T_('Name'), $t_podcasts);\n\n        $t_podcast_episodes = T_('Podcast Episodes');\n        $this->_add_type_text('podcast_episode', T_('Podcast Episode'), $t_podcast_episodes);\n        $episode_states = array(\n            0 => T_('skipped'),\n            1 => T_('pending'),\n            2 => T_('completed')\n        );\n        $this->_add_type_select('state', T_('State'), 'boolean_numeric', $episode_states, $t_podcast_episodes);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_podcast_episodes);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_date('pubdate', T_('Publication Date'), $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n    }\n\n    /**\n     * _set_types_podcast_episode\n     *\n     * this is where all the searchTypes for podcast_episodes are defined\n     */\n    private function _set_types_podcast_episode()\n    {\n        $t_podcast_episodes = T_('Podcast Episode');\n        $this->_add_type_text('title', T_('Name'), $t_podcast_episodes);\n        $this->_add_type_text('podcast', T_('Podcast'), $t_podcast_episodes);\n        $episode_states = array(\n            0 => T_('skipped'),\n            1 => T_('pending'),\n            2 => T_('completed')\n        );\n        $this->_add_type_select('state', T_('State'), 'boolean_numeric', $episode_states, $t_podcast_episodes);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_podcast_episodes);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_date('pubdate', T_('Publication Date'), $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n    }\n\n    /**\n     * _set_types_label\n     *\n     * this is where all the searchTypes for labels are defined\n     */\n    private function _set_types_label()\n    {\n        $t_label = T_('Label');\n        $this->_add_type_text('title', T_('Name'), $t_label);\n        $this->_add_type_text('category', T_('Category'), $t_label);\n    }\n\n    /**\n     * _set_types_user\n     *\n     * this is where all the searchTypes for users are defined\n     */\n    private function _set_types_user()\n    {\n        $this->_add_type_text('username', T_('Username'));\n    }\n\n    /**\n     * _set_types_tag\n     *\n     * this is where all the searchTypes for Genres are defined\n     */\n    private function _set_types_tag()\n    {\n        $this->_add_type_text('title', T_('Genre'));\n    }\n\n    /**\n     * _filter_request\n     *\n     * Sanitizes raw search data\n     * @param array $data\n     * @return array\n     */\n    private static function _filter_request($data)\n    {\n        $request = array();\n        foreach ($data as $key => $value) {\n            $prefix = substr($key, 0, 4);\n            $value  = (string)$value;\n\n            if ($prefix == 'rule' && strlen((string)$value)) {\n                $request[$key] = Dba::escape($value);\n            }\n        }\n        // Figure out if they want an AND based search or an OR based search\n        $operator = $data['operator'] ?? '';\n        switch (strtolower($operator)) {\n            case 'or':\n                $request['operator'] = 'OR';\n                break;\n            case 'and':\n            default:\n                $request['operator'] = 'AND';\n                break;\n        }\n        if (array_key_exists('limit', $data)) {\n            $request['limit'] = $data['limit'];\n        }\n        if (array_key_exists('offset', $data)) {\n            $request['offset'] = $data['offset'];\n        }\n        if (array_key_exists('random', $data)) {\n            $request['random'] = $data['random'];\n        }\n\n        // Verify the type\n        $search_type = strtolower($data['type'] ?? '');\n        //Search::VALID_TYPES = array('song', 'album', 'song_artist', 'album_artist', 'artist', 'label', 'playlist', 'podcast', 'podcast_episode', 'tag', 'user', 'video')\n        switch ($search_type) {\n            case 'song':\n            case 'album':\n            case 'song_artist':\n            case 'album_artist':\n            case 'artist':\n            case 'label':\n            case 'playlist':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'tag':  // for Genres\n            case 'user':\n            case 'video':\n                $request['type'] = $search_type;\n                break;\n            case 'genre':\n                $request['type'] = 'tag';\n                break;\n            default:\n                debug_event(self::class, \"_filter_request: search_type '$search_type' reset to: song\", 5);\n                $request['type'] = 'song';\n                break;\n        }\n\n        return $request;\n    } // end _filter_request\n\n    /**\n     * get_name_byid\n     *\n     * Returns the name of the saved search corresponding to the given ID\n     * @param string $search_id\n     * @return string\n     */\n    public static function get_name_byid($search_id)\n    {\n        $sql        = \"SELECT `name` FROM `search` WHERE `id` = ?\";\n        $db_results = Dba::read($sql, array($search_id));\n        $row        = Dba::fetch_assoc($db_results);\n\n        return $row['name'];\n    }\n\n    /**\n     * get_searches\n     *\n     * Return the IDs of all saved searches accessible by the current user.\n     * @param integer $user_id\n     * @return array\n     */\n    public static function get_searches($user_id = null)\n    {\n        if ($user_id === null) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $key     = 'searches';\n        if (parent::is_cached($key, $user_id)) {\n            return parent::get_from_cache($key, $user_id);\n        }\n        $is_admin = (Access::check('interface', 100, $user_id) || $user_id == -1);\n        $sql      = \"SELECT `id` FROM `search` \";\n        $params   = array();\n\n        if (!$is_admin) {\n            $sql .= \"WHERE (`user` = ? OR `type` = 'public') \";\n            $params[] = $user_id;\n        }\n        $sql .= \"ORDER BY `name`\";\n\n        $db_results = Dba::read($sql, $params);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[$row['id']] = $row['name'];\n        }\n\n        parent::add_to_cache($key, $user_id, $results);\n\n        return $results;\n    }\n\n    /**\n     * get_search_array\n     * Returns a list of searches accessible by the user with formatted name.\n     * @param integer $user_id\n     * @return array\n     */\n    public static function get_search_array($user_id = null)\n    {\n        if ($user_id === null) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $key = 'searcharray';\n        if (parent::is_cached($key, $user_id)) {\n            return parent::get_from_cache($key, $user_id);\n        }\n        $is_admin = (Access::check('interface', 100, $user_id) || $user_id == -1);\n        $sql      = \"SELECT `id`, IF(`user` = ?, `name`, CONCAT(`name`, ' (', `username`, ')')) AS `name` FROM `search` \";\n        $params   = array($user_id);\n\n        if (!$is_admin) {\n            $sql .= \"WHERE (`user` = ? OR `type` = 'public') \";\n            $params[] = $user_id;\n        }\n        $sql .= \"ORDER BY `name`\";\n        //debug_event(self::class, 'get_searches query: ' . $sql . \"\\n\" . print_r($params, true), 5);\n\n        $db_results = Dba::read($sql, $params);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[$row['id']] = $row['name'];\n        }\n\n        parent::add_to_cache($key, $user_id, $results);\n\n        return $results;\n    } // get_smartlist_array\n\n    /**\n     * run\n     *\n     * This function actually runs the search and returns an array of the\n     * results.\n     * @param array $data\n     * @param User $user\n     * @return integer[]\n     */\n    public static function run($data, $user = null)\n    {\n        $limit  = (int)($data['limit'] ?? 0);\n        $offset = (int)($data['offset'] ?? 0);\n        $random = ((int)($data['random'] ?? 0) > 0) ? 1 : 0;\n        $search = new Search(null, $data['type'], $user);\n        $search->set_rules($data);\n\n        // Generate BASE SQL\n        $limit_sql = \"\";\n        if ($limit > 0) {\n            $limit_sql = ' LIMIT ';\n            if ($offset > 0) {\n                $limit_sql .= $offset . \", \";\n            }\n            $limit_sql .= $limit;\n        }\n\n        $search_info = $search->to_sql();\n        $sql         = $search_info['base'] . ' ' . $search_info['table_sql'];\n        if (!empty($search_info['where_sql'])) {\n            $sql .= ' WHERE ' . $search_info['where_sql'];\n        }\n        if (!empty($search_info['group_sql'])) {\n            $sql .= ' GROUP BY ' . $search_info['group_sql'];\n            if (!empty($search_info['having_sql'])) {\n                $sql .= ' HAVING ' . $search_info['having_sql'];\n            }\n        }\n        $sql .= ($random > 0) ? \" ORDER BY RAND()\" : \" ORDER BY \" . $search->order_by;\n        $sql .= ' ' . $limit_sql;\n        $sql = trim((string)$sql);\n        //debug_event(self::class, 'SQL run: ' . $sql . \"\\n\" . print_r($search_info['parameters'], true), 5);\n\n        $db_results = Dba::read($sql, $search_info['parameters']);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = (int)$row['id'];\n        }\n\n        return $results;\n    }\n\n    /**\n     * delete\n     *\n     * Does what it says on the tin.\n     * @return boolean\n     */\n    public function delete()\n    {\n        $search_id = Dba::escape($this->id);\n        $sql       = \"DELETE FROM `search` WHERE `id` = ?\";\n        Dba::write($sql, array($search_id));\n        Catalog::count_table('search');\n\n        return true;\n    }\n\n    /**\n     * format\n     * Gussy up the data\n     * @param boolean $details\n     */\n    public function format($details = true)\n    {\n        parent::format();\n    }\n\n    /**\n     * get_items\n     *\n     * Return an array of the items output by our search (part of the\n     * playlist interface).\n     * @return array\n     */\n    public function get_items()\n    {\n        $results = array();\n\n        $sqltbl = $this->to_sql();\n        $sql    = $sqltbl['base'] . ' ' . $sqltbl['table_sql'];\n        if (!empty($sqltbl['where_sql'])) {\n            $sql .= ' WHERE ' . $sqltbl['where_sql'];\n        }\n        if (!empty($sqltbl['group_sql'])) {\n            $sql .= ' GROUP BY ' . $sqltbl['group_sql'];\n        }\n        if (!empty($sqltbl['having_sql'])) {\n            $sql .= ' HAVING ' . $sqltbl['having_sql'];\n        }\n\n        $sql .= ($this->random > 0) ? \" ORDER BY RAND()\" : \" ORDER BY \" . $this->order_by;\n        if ($this->limit > 0) {\n            $sql .= \" LIMIT \" . (string)($this->limit);\n        }\n        //debug_event(self::class, 'SQL get_items: ' . $sql . \"\\n\" . print_r($sqltbl['parameters'], true), 5);\n\n        $count      = 1;\n        $db_results = Dba::read($sql, $sqltbl['parameters']);\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = array(\n                'object_id' => $row['id'],\n                'object_type' => $this->objectType,\n                'track' => $count++,\n                'track_id' => $row['id'],\n            );\n        }\n        $this->date = time();\n        $this->set_last(count($results), 'last_count');\n        $this->set_last(self::get_total_duration($results), 'last_duration');\n\n        return $results;\n    }\n\n    /**\n     * set_last\n     *\n     * @param integer $count\n     * @param string $column\n     */\n    private function set_last($count, $column)\n    {\n        if (in_array($column, array('last_count', 'last_duration'))) {\n            $search_id = Dba::escape($this->id);\n            $sql       = \"UPDATE `search` SET `\" . Dba::escape($column) . \"` = ? WHERE `id` = ?\";\n            Dba::write($sql, array($count, $search_id));\n        }\n    }\n\n    /**\n     * get_random_items\n     *\n     * Returns a randomly sorted array (with an optional limit) of the items\n     * output by our search (part of the playlist interface)\n     * @param integer $limit\n     * @return array\n     */\n    public function get_random_items($limit = null)\n    {\n        $results = array();\n\n        $sqltbl = $this->to_sql();\n        $sql    = $sqltbl['base'] . ' ' . $sqltbl['table_sql'];\n        if (!empty($sqltbl['where_sql'])) {\n            $sql .= ' WHERE ' . $sqltbl['where_sql'];\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        if ($rating_filter > 0 && $rating_filter <= 5 && !empty(Core::get_global('user')) && Core::get_global('user')->id > 0) {\n            $user_id = Core::get_global('user')->id;\n            if (empty($sqltbl['where_sql'])) {\n                $sql .= \" WHERE \";\n            } else {\n                $sql .= \" AND \";\n            }\n            $sql .= \"`\" . $this->objectType . \"`.`id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $this->objectType . \"' AND `rating`.`rating` <=$rating_filter AND `rating`.`user` = $user_id)\";\n        }\n        if (!empty($sqltbl['group_sql'])) {\n            $sql .= ' GROUP BY ' . $sqltbl['group_sql'];\n        }\n        if (!empty($sqltbl['having_sql'])) {\n            $sql .= ' HAVING ' . $sqltbl['having_sql'];\n        }\n\n        $sql .= \" ORDER BY RAND()\";\n        $sql .= ($limit)\n            ? \" LIMIT \" . (string) ($limit)\n            : \"\";\n        //debug_event(self::class, 'SQL get_random_items: ' . $sql . \"\\n\" . print_r($sqltbl['parameters'], true), 5);\n\n        $db_results = Dba::read($sql, $sqltbl['parameters']);\n\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = array(\n                'object_id' => $row['id'],\n                'object_type' => $this->objectType\n            );\n        }\n\n        return $results;\n    }\n\n    /**\n     * get_total_duration\n     * Get the total duration of all songs.\n     * @param array $songs\n     * @return integer\n     */\n    public static function get_total_duration($songs)\n    {\n        $song_ids = array();\n        foreach ($songs as $objects) {\n            $song_ids[] = (string)$objects['object_id'];\n        }\n        $idlist = '(' . implode(',', $song_ids) . ')';\n        if ($idlist == '()') {\n            return 0;\n        }\n        $sql = \"SELECT SUM(`time`) FROM `song` WHERE `id` IN $idlist\";\n\n        $db_results = Dba::read($sql);\n        $row        = Dba::fetch_row($db_results);\n\n        return (int)($row[0] ?? 0);\n    } // get_total_duration\n\n    /**\n     * _get_rule_name\n     *\n     * Iterate over $this->types to validate the rule name and return the rule type\n     * (text, date, etc)\n     * @param string $name\n     * @return string\n     */\n    private function _get_rule_name($name)\n    {\n        // check that the rule you sent is not an alias (needed for pulling details from the rule)\n        switch ($this->objectType) {\n            case 'song':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'album_title':\n                        $name = 'album';\n                        break;\n                    case 'album_artist_title':\n                        $name = 'album_artist';\n                        break;\n                    case 'song_artist_title':\n                        $name = 'song_artist';\n                        break;\n                    case 'tag':\n                    case 'song_tag':\n                    case 'song_genre':\n                        $name = 'genre';\n                        break;\n                    case 'album_tag':\n                        $name = 'album_genre';\n                        break;\n                    case 'artist_tag':\n                        $name = 'artist_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_song':\n                        $name = 'mbid';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'album':\n                switch ($name) {\n                    case 'name':\n                    case 'album_title':\n                        $name = 'title';\n                        break;\n                    case 'song_title':\n                        $name = 'song';\n                        break;\n                    case 'album_artist':\n                    case 'album_artist_title':\n                        $name = 'artist';\n                        break;\n                    case 'tag':\n                    case 'album_tag':\n                    case 'album_genre':\n                        $name = 'genre';\n                        break;\n                    case 'song_tag':\n                        $name = 'song_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_album':\n                        $name = 'mbid';\n                        break;\n                    case 'possible_duplicate_album':\n                        $name = 'possible_duplicate';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'artist':\n                switch ($name) {\n                    case 'name':\n                    case 'artist_title':\n                        $name = 'title';\n                        break;\n                    case 'album_title':\n                        $name = 'album';\n                        break;\n                    case 'song_title':\n                        $name = 'song';\n                        break;\n                    case 'tag':\n                    case 'artist_tag':\n                    case 'artist_genre':\n                        $name = 'genre';\n                        break;\n                    case 'song_tag':\n                        $name = 'song_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_artist':\n                        $name = 'mbid';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'podcast':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'podcast_episode_title':\n                        $name = 'podcast_episode';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'podcast_episode':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'podcast_title':\n                        $name = 'podcast';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'genre':\n            case 'tag':\n            case 'label':\n            case 'playlist':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n        }\n        //debug_event(self::class, '__get_rule_name: ' . $name, 5);\n\n        return $name;\n    }\n\n    /**\n     * _get_rule_type\n     *\n     * Iterate over $this->types to validate the rule name and return the rule type\n     * (text, date, etc)\n     * @param string $name\n     * @return string|false\n     */\n    private function _get_rule_type($name)\n    {\n        //debug_event(self::class, '_get_rule_type: ' . $name, 5);\n        foreach ($this->types as $type) {\n            if ($type['name'] == $name) {\n                return $type['type'];\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * set_rules\n     *\n     * Takes an array of sanitized search data from the form and generates our real array from it.\n     * @param array $data\n     */\n    public function set_rules($data)\n    {\n        $data        = self::_filter_request($data);\n        $this->rules = array();\n        $user_rules  = array();\n        // check that a limit or random flag and operator have been sent\n        $this->random         = (isset($data['random'])) ? (int) $data['random'] : $this->random;\n        $this->limit          = (isset($data['limit'])) ? (int) $data['limit'] : $this->limit;\n        $this->logic_operator = $data['operator'] ?? 'AND';\n        // match the numeric rules you send (e.g. rule_1, rule_6000)\n        foreach ($data as $rule => $value) {\n            if (preg_match('/^rule_(\\d+)$/', $rule, $ruleID)) {\n                $user_rules[] = $ruleID[1];\n            }\n        }\n        // get the data for each rule group the user sent\n        foreach ($user_rules as $ruleID) {\n            $rule_name     = $this->_get_rule_name($data[\"rule_\" . $ruleID]);\n            $rule_type     = $this->_get_rule_type($rule_name);\n            $rule_input    = (string)($data['rule_' . $ruleID . '_input'] ?? '');\n            $rule_operator = $this->basetypes[$rule_type][$data['rule_' . $ruleID . '_operator']]['name'] ?? '';\n            // keep vertical bar in regular expression\n            $is_regex = in_array($rule_operator, ['regexp', 'notregexp']);\n            if ($is_regex) {\n                $rule_input = str_replace(\"|\", \"\\0\", $rule_input);\n            }\n            // attach the rules to the search\n            foreach (explode('|', $rule_input) as $input) {\n                $this->rules[] = array(\n                    $rule_name,\n                    $rule_operator,\n                    ($is_regex) ? str_replace(\"\\0\", \"|\", $input) : $input,\n                    $data['rule_' . $ruleID . '_subtype'] ?? null\n                );\n            }\n        }\n    }\n\n    /**\n     * create\n     *\n     * Save this search to the database for use as a smart playlist\n     * @return string|null\n     */\n    public function create()\n    {\n        $user = Core::get_global('user');\n        // Make sure we have a unique name\n        if (!$this->name) {\n            $this->name = $user->username . ' - ' . get_datetime(time());\n        }\n        $sql        = \"SELECT `id` FROM `search` WHERE `name` = ? AND `user` = ? AND `type` = ?;\";\n        $db_results = Dba::read($sql, array($this->name, $user->id, $this->type));\n        if (Dba::num_rows($db_results)) {\n            $this->name .= uniqid('', true);\n        }\n\n        $sql = \"INSERT INTO `search` (`name`, `type`, `user`, `username`, `rules`, `logic_operator`, `random`, `limit`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\n        Dba::write($sql, array(\n            $this->name,\n            $this->type,\n            $user->id,\n            $user->username,\n            json_encode($this->rules),\n            $this->logic_operator,\n            ($this->random > 0) ? 1 : 0,\n            $this->limit\n        ));\n        $insert_id = Dba::insert_id();\n        $this->id  = (int)$insert_id;\n        Catalog::count_table('search');\n\n        return $insert_id;\n    }\n\n    /**\n     * to_js\n     *\n     * Outputs the javascript necessary to re-show the current set of rules.\n     * @return string\n     */\n    public function to_js()\n    {\n        $javascript = \"\";\n        foreach ($this->rules as $rule) {\n            $javascript .= '<script>' . 'SearchRow.add(\"' . $rule[0] . '\",\"' . $rule[1] . '\",\"' . $rule[2] . '\", \"' . $rule[3] . '\"); </script>';\n        }\n\n        return $javascript;\n    }\n\n    /**\n     * to_sql\n     *\n     * Call the appropriate real function.\n     * @return array\n     */\n    public function to_sql()\n    {\n        return call_user_func(array($this, '_get_sql_' . $this->searchType));\n    }\n\n    /**\n     * update\n     *\n     * This function updates the saved search with the current settings.\n     * @param array|null $data\n     * @return integer\n     */\n    public function update(array $data = null)\n    {\n        if ($data && is_array($data)) {\n            $this->name   = $data['name'] ?? $this->name;\n            $this->type   = $data['pl_type'] ?? $this->type;\n            $this->user   = $data['pl_user'] ?? $this->user;\n            $this->random = ((int)($data['random'] ?? 0) > 0) ? 1 : 0;\n            $this->limit  = $data['limit'] ?? $this->limit;\n        }\n        $this->username = User::get_username($this->user);\n\n        if (!$this->id) {\n            return 0;\n        }\n\n        $sql = \"UPDATE `search` SET `name` = ?, `type` = ?, `user` = ?, `username` = ?, `rules` = ?, `logic_operator` = ?, `random` = ?, `limit` = ? WHERE `id` = ?\";\n        Dba::write($sql, array(\n            $this->name,\n            $this->type,\n            $this->user,\n            $this->username,\n            json_encode($this->rules),\n            $this->logic_operator,\n            $this->random,\n            $this->limit,\n            $this->id\n        ));\n        // reformat after an update\n        $this->format();\n\n        return $this->id;\n    }\n\n    /**\n     * _filter_input\n     *\n     * Private convenience function.  Mangles the input according to a set\n     * of predefined rules so that we don't have to include this logic in\n     * _get_sql_foo.\n     * @param array|string $data\n     * @param string|false $type\n     * @param array $operator\n     * @return array|boolean|integer|string|string[]|null\n     */\n    private function _filter_input($data, $type, $operator)\n    {\n        if (array_key_exists('preg_match', $operator)) {\n            $data = preg_replace($operator['preg_match'], $operator['preg_replace'], $data);\n        }\n\n        if ($type == 'numeric' || $type == 'days') {\n            return (int)($data);\n        }\n\n        if ($type == 'boolean') {\n            return make_bool($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * _get_sql_album\n     *\n     * Handles the generation of the SQL for album searches.\n     * @return array\n     */\n    private function _get_sql_album()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n        $join['tag'] = array();\n        $groupdisks  = AmpConfig::get('album_group');\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n            if ($groupdisks) {\n                /** 'album_group' DEFAULT:\n                 * `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group`\n                 */\n                $group[] = \"`album`.`prefix`\";\n                $group[] = \"`album`.`name`\";\n                $group[] = \"`album`.`album_artist`\";\n                $group[] = \"`album`.`release_type`\";\n                $group[] = \"`album`.`release_status`\";\n                $group[] = \"`album`.`mbid`\";\n                $group[] = \"`album`.`year`\";\n                $group[] = \"`album`.`original_year`\";\n                $group[] = \"`album`.`mbid_group`\";\n            } else {\n                $group[] = \"`album`.`id`\";\n                $group[] = \"`album`.`disk`\";\n            }\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?)\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'year':\n                case 'release_type':\n                case 'release_status':\n                case 'catalog':\n                    $where[]      = \"`album`.`\" . $rule[0] . \"` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'original_year':\n                    $where[]    = \"(`album`.`original_year` $sql_match_operator ? OR (`album`.`original_year` IS NULL AND `album`.`year` $sql_match_operator ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`album`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='album' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `album`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `favorite_album_$user_id`.`user` = $user_id AND `favorite_album_$user_id`.`object_type` = 'album'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_album_$user_id` ON `album`.`id` = `favorite_album_$user_id`.`object_id` AND `favorite_album_$user_id`.`object_type` = 'album'\"\n                        : \"\";\n                    break;\n                case 'myrating':\n                case 'artistrating':\n                    // combine these as they all do the same thing just different tables\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'my') ? '`album`.`id`' : '`album_map`.`object_id`';\n                    $my_type = ($looking == 'my') ? 'album' : $looking;\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = $column\"\n                        : \"\";\n                    if ($my_type == 'artist') {\n                        $join['album_map'] = true;\n                    }\n                    break;\n                case 'songrating':\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` NOT IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song')))\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song' AND `rating` $sql_match_operator ?))) OR `album`.`id` NOT IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song')))\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song' AND `rating` $sql_match_operator ?)))\";\n                        $parameters[] = $input;\n                    }\n                    break;\n                case 'myplayed':\n                case 'myplayedartist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('myplayed', '', $rule[0]);\n                    $column       = ($looking == 'artist') ? 'album_artist' : 'id';\n                    $my_type      = ($looking == 'artist') ? 'artist' : 'album';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `album`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'played':\n                    $column       = 'id';\n                    $my_type      = 'album';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('played', $table)) {\n                        $table['played'] = '';\n                    }\n                    $table['played'] .= (!strpos((string) $table['played'], \"played_\" . $my_type))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' GROUP BY `object_id`, `object_type`, `user`) AS `played_\" . $my_type . \"` ON `album`.`$column` = `played_\" . $my_type . \"`.`object_id` AND `played_\" . $my_type . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`played_\" . $my_type . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'last_play':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `album`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[]      = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    break;\n                case 'last_skip':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'played_times':\n                    if ($groupdisks) {\n                        $table['play_count'] = \"LEFT JOIN (SELECT MIN(`album`.`id`) AS `id`, SUM(`total_count`) AS `total_count` FROM `album` GROUP BY `album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`,`album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`) AS `album_total_count` ON `album`.`id` = `album_total_count`.`id`\";\n                        $where[]             = \"(`album_total_count`.`total_count` $sql_match_operator ?)\";\n                    } else {\n                        $where[] = \"(`album`.`total_count` $sql_match_operator ?)\";\n                    }\n                    $parameters[]        = $input;\n                    break;\n                case 'song_count':\n                    if ($groupdisks) {\n                        $table['play_count'] = \"LEFT JOIN (SELECT MIN(`album`.`id`) AS `id`, SUM(`song_count`) AS `song_count` FROM `album` GROUP BY `album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`,`album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`) AS `album_song_count` ON `album`.`id` = `album_song_count`.`id`\";\n                        $where[]             = \"(`album_song_count`.`song_count` $sql_match_operator ?)\";\n                    } else {\n                        $where[]      = \"(`album`.`song_count` $sql_match_operator ?)\";\n                    }\n                    $parameters[] = $input;\n                    break;\n                case 'other_user':\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_album_$other_userid`.`user` = $other_userid AND `favorite_album_$other_userid`.`object_type` = 'album'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$other_userid\"))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_album_$other_userid` ON `album`.`id` = `favorite_album_$other_userid`.`object_id` AND `favorite_album_$other_userid`.`object_type` = 'album'\"\n                            : \"\";\n                    } else {\n                        $column  = 'id';\n                        $my_type = 'album';\n                        $where[] = \"`rating_album_\" . $other_userid . '`.' . $sql_match_operator . \" AND `rating_album_$other_userid`.`user` = $other_userid AND `rating_album_$other_userid`.`object_type` = 'album'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `$my_type`.`$column` AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`user` = $user_id \"\n                            : \"\";\n                    }\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'album' ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `played_$key` ON `album`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'recent_added':\n                    $key                       = md5($input . $sql_match_operator);\n                    $where[]                   = \"`addition_time_$key`.`id` IS NOT NULL\";\n                    $table['addition_' . $key] = \"LEFT JOIN (SELECT `id` FROM `album` ORDER BY $sql_match_operator DESC LIMIT $input) AS `addition_time_$key` ON `album`.`id` = `addition_time_$key`.`id`\";\n                    break;\n                case 'genre':\n                    $where[]      = \"`album`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`album`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'song_genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'playlist_name':\n                    $where[]      = \"`album`.`id` IN (SELECT `song`.`album` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' WHERE `playlist`.`name` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'playlist':\n                    $where[]      = \"`album`.`id` $sql_match_operator IN (SELECT `song`.`album` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                    $where[]      = \"`song`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'has_image':\n                    $where[]            = ($sql_match_operator == '1') ? \"`has_image`.`object_id` IS NOT NULL\" : \"`has_image`.`object_id` IS NULL\";\n                    $table['has_image'] = \"LEFT JOIN (SELECT `object_id` FROM `image` WHERE `object_type` = 'album') AS `has_image` ON `album`.`id` = `has_image`.`object_id`\";\n                    break;\n                case 'image_height':\n                case 'image_width':\n                    $looking       = strpos($rule[0], \"image_\") ? str_replace('image_', '', $rule[0]) : str_replace('image ', '', $rule[0]);\n                    $where[]       = \"`image`.`$looking` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['image'] = true;\n                    break;\n                case 'artist':\n                case 'album_artist':\n                    $where[]           = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `album_map`.`object_type` = 'album')\";\n                    $parameters        = array_merge($parameters, array($input, $input));\n                    $join['album_map'] = true;\n                    break;\n                case 'song':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    $join['song'] = true;\n                    break;\n                case 'song_artist':\n                    $where[]           = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `album_map`.`object_type` = 'song')\";\n                    $parameters        = array_merge($parameters, array($input, $input));\n                    $join['album_map'] = true;\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_song':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'mbid_artist':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]           = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['album_map'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`id`) AS `dupe_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_search1` ON `album`.`id` = `dupe_search1`.`dupe_id1`\";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`id`) AS `dupe_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_search2` ON `album`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'duplicate_mbid_group':\n                    $where[] = \"`mbid_group` IN (SELECT `mbid_group` FROM `album` WHERE `disk` = 1 GROUP BY `mbid_group`, `disk` HAVING COUNT(`mbid_group`) > 1)\";\n                    break;\n                default:\n                    break;\n            } // switch on ruletype album\n        } // foreach rule\n\n        $join['song']        = array_key_exists('song', $join);\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('album_map', $join)) {\n            $table['0_album_map'] = \"LEFT JOIN `album_map` ON `album`.`id` = `album_map`.`album_id`\";\n            $table['artist']      = \"LEFT JOIN `artist` ON `artist`.`id` = `album_map`.`object_id`\";\n        }\n        if ($join['song']) {\n            $table['0_song'] = \"LEFT JOIN `song` ON `song`.`album` = `album`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_album` ON `catalog_map_album`.`object_type` = 'album' AND `catalog_map_album`.`object_id` = `album`.`id`\";\n            $table['3_catalog']     = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `catalog_map_album`.`catalog_id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1'\";\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('count', $join)) {\n            $table['object_count'] = \"LEFT JOIN (SELECT `object_count`.`object_id`, MAX(`object_count`.`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'album' AND `object_count`.`user`='\" . $user_id . \"' AND `object_count`.`count_type` = 'stream' GROUP BY `object_count`.`object_id`) AS `object_count` ON `object_count`.`object_id` = `album`.`id`\";\n        }\n        if (array_key_exists('image', $join)) {\n            $table['0_song'] = \"LEFT JOIN `song` ON `song`.`album` = `album`.`id` LEFT JOIN `image` ON `image`.`object_id` = `album`.`id`\";\n            $where_sql       = \"(\" . $where_sql . \") AND `image`.`object_type`='album' AND `image`.`size`='original'\";\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => ($groupdisks) ? 'SELECT MIN(`album`.`id`) AS `id`, MAX(`album`.`disk`) AS `disk` FROM `album`' : 'SELECT `album`.`id` AS `id` FROM `album`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_song_artist\n     *\n     * Handles the generation of the SQL for song_artist searches.\n     * @return array\n     */\n    private function _get_sql_song_artist()\n    {\n        return self::_get_sql_artist();\n    }\n\n    /**\n     * _get_sql_album_artist\n     *\n     * Handles the generation of the SQL for album_artist searches.\n     * @return array\n     */\n    private function _get_sql_album_artist()\n    {\n        return self::_get_sql_artist();\n    }\n\n    /**\n     * _get_sql_artist\n     *\n     * Handles the generation of the SQL for artist searches.\n     * @return array\n     */\n    private function _get_sql_artist()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n        $album_artist       = ($this->searchType == 'album_artist');\n        $song_artist        = ($this->searchType == 'song_artist');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'yearformed':\n                case 'placeformed':\n                    $where[]      = \"`artist`.`$rule[0]` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`artist`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'genre':\n                    $where[]      = \"`artist`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'song_genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`artist`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'playlist_name':\n                    $where[]    = \"(`artist`.`id` IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist`.`name` $sql_match_operator ?) OR `artist`.`id` IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`album` AND `artist_map`.`object_type` = 'album' WHERE `playlist`.`name` $sql_match_operator ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'playlist':\n                    $where[]    = \"(`artist`.`id` $sql_match_operator IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?) OR `artist`.`id` $sql_match_operator IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='artist' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `artist`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `favorite_artist_$user_id`.`user` = $user_id AND `favorite_artist_$user_id`.`object_type` = 'artist'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_artist_$user_id` ON `artist`.`id` = `favorite_artist_$user_id`.`object_id` AND `favorite_artist_$user_id`.`object_type` = 'artist'\"\n                        : \"\";\n                    break;\n                case 'file':\n                    $where[]      = \"`song`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'has_image':\n                    $where[]            = ($sql_match_operator == '1') ? \"`has_image`.`object_id` IS NOT NULL\" : \"`has_image`.`object_id` IS NULL\";\n                    $table['has_image'] = \"LEFT JOIN (SELECT `object_id` FROM `image` WHERE `object_type` = 'artist') AS `has_image` ON `artist`.`id` = `has_image`.`object_id`\";\n                    break;\n                case 'image_height':\n                case 'image_width':\n                    $looking       = strpos($rule[0], \"image_\") ? str_replace('image_', '', $rule[0]) : str_replace('image ', '', $rule[0]);\n                    $where[]       = \"`image`.`$looking` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['image'] = true;\n                    break;\n                case 'myrating':\n                    $column  = 'id';\n                    $my_type = 'artist';\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '=';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `artist`.`$column`\"\n                        : \"\";\n                    break;\n                case 'albumrating':\n                case 'songrating':\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'album') ? 'album_artist' : 'artist';\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` NOT IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking')))\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking' AND `rating` $sql_match_operator ?))) OR `$looking`.`$column` NOT IN (SELECT `$column` FROM `$looking` WHERE `id` IN (SELECT `$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking')))\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking' AND `rating` $sql_match_operator ?)))\";\n                        $parameters[] = $input;\n                    }\n                    break;\n                case 'myplayed':\n                    $column       = 'id';\n                    $my_type      = 'artist';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT DISTINCT `artist_map`.`artist_id`, `object_count`.`user` FROM `object_count` LEFT JOIN `artist_map` ON `object_count`.`object_type` = `artist_map`.`object_type` AND `artist_map`.`object_id` = `object_count`.`object_id` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `artist_map`.`artist_id`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `artist`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`artist_id`\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`artist_id` $operator_sql\";\n                    break;\n                case 'played':\n                    $column       = 'id';\n                    $my_type      = 'artist';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('played', $table)) {\n                        $table['played'] = '';\n                    }\n                    $table['played'] .= (!strpos((string) $table['played'], \"played_\" . $my_type))\n                        ? \"LEFT JOIN (SELECT DISTINCT `artist_map`.`artist_id`, `object_count`.`user` FROM `object_count` LEFT JOIN `artist_map` ON `object_count`.`object_type` = `artist_map`.`object_type` AND `artist_map`.`object_id` = `object_count`.`object_id` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'stream' GROUP BY `artist_map`.`artist_id`, `user`) AS `played_\" . $my_type . \"` ON `artist`.`$column` = `played_\" . $my_type . \"`.`artist_id`\"\n                        : \"\";\n                    $where[] = \"`played_\" . $my_type . \"`.`artist_id` $operator_sql\";\n                    break;\n                case 'last_play':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `artist`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[]      = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    break;\n                case 'last_skip':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'played_times':\n                    $where[]      = \"(`artist`.`total_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'summary':\n                    $where[]      = \"`artist`.`summary` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    break;\n                case 'album':\n                    $where[]       = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `artist_map`.`artist_id` IS NOT NULL\";\n                    $parameters    = array_merge($parameters, array($input, $input));\n                    $join['album'] = true;\n                    break;\n                case 'song':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    $join['song'] = true;\n                    break;\n                case 'album_count':\n                    $group_column = (AmpConfig::get('album_group')) ? '`artist`.`album_group_count`' : '`artist`.`album_count`';\n                    $where[]      = \"($group_column $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'song_count':\n                    $where[]      = \"(`artist`.`song_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'other_user':\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_artist_$other_userid`.`user` = $other_userid AND `favorite_artist_$other_userid`.`object_type` = 'artist'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$other_userid\"))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_artist_$other_userid` ON `artist`.`id` = `favorite_artist_$other_userid`.`object_id` AND `favorite_artist_$other_userid`.`object_type` = 'artist'\"\n                            : \"\";\n                    } else {\n                        $column  = 'id';\n                        $my_type = 'artist';\n                        $where[] = \"`rating_artist_\" . $other_userid . '`.' . $sql_match_operator . \" AND `rating_artist_$other_userid`.`user` = $other_userid AND `rating_artist_$other_userid`.`object_type` = 'artist'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `$my_type`.`$column` AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`user` = $user_id \"\n                            : \"\";\n                    }\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'artist' ORDER BY $sql_match_operator DESC LIMIT $input) AS `played_$key` ON `artist`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'catalog':\n                    $where[]         = \"`catalog_se`.`id` $sql_match_operator ?\";\n                    $parameters[]    = $input;\n                    $join['catalog'] = true;\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_album':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]       = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['album'] = true;\n                    break;\n                case 'mbid_song':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`id`) AS `dupe_id1`, LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`))) AS `Counting` FROM `artist` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search1` ON `artist`.`id` = `dupe_search1`.`dupe_id1`\";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`id`) AS `dupe_id2`, LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`))) AS `Counting` FROM `artist` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search2` ON `artist`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'possible_duplicate_album':\n                    $where[]                     = \"((`dupe_album_search1`.`dupe_album_id1` IS NOT NULL OR `dupe_album_search2`.`dupe_album_id2` IS NOT NULL))\";\n                    $table['dupe_album_search1'] = \"LEFT JOIN (SELECT `album_artist`, MIN(`id`) AS `dupe_album_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search1` ON `artist`.`id` = `dupe_album_search1`.`album_artist`\";\n                    $table['dupe_album_search2'] = \"LEFT JOIN (SELECT `album_artist`, MAX(`id`) AS `dupe_album_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search2` ON `artist`.`id` = `dupe_album_search2`.`album_artist`\";\n                    break;\n                default:\n                    break;\n            } // switch on ruletype artist\n        } // foreach rule\n\n        $join['catalog']     = array_key_exists('catalog', $join) || $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('song', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['1_song']       = \"LEFT JOIN `song` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song'\";\n        }\n        if (array_key_exists('album', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['4_album_map']  = \"LEFT JOIN `album_map` ON `album_map`.`object_id` = `artist`.`id` AND `artist_map`.`object_type` = `album_map`.`object_type`\";\n            $table['album']        = \"LEFT JOIN `album` ON `album_map`.`album_id` = `album`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_artist` ON `catalog_map_artist`.`object_id` = `artist`.`id` AND `catalog_map_artist`.`object_type` = 'artist'\";\n            $table['3_catalog']     = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `catalog_map_artist`.`catalog_id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1'\";\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('count', $join)) {\n            $table['object_count'] = \"LEFT JOIN (SELECT `object_count`.`object_id`, MAX(`object_count`.`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'artist' AND `object_count`.`user`='\" . $user_id . \"' AND `object_count`.`count_type` = 'stream' GROUP BY `object_count`.`object_id`) AS `object_count` ON `object_count`.`object_id` = `artist`.`id`\";\n        }\n        if (array_key_exists('image', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['1_song']       = \"LEFT JOIN `song` ON `artist_map`.`artist_id` = `artist`.`id` AND `artist_map`.`object_type` = 'song'\";\n            $where_sql             = \"(\" . $where_sql . \") AND `image`.`object_type`='artist' AND `image`.`size`='original'\";\n        }\n        if ($album_artist) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `artist`.`album_count` > 0\";\n            } else {\n                $where_sql = \"`artist`.`album_count` > 0\";\n            }\n        }\n        if ($song_artist) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `artist`.`song_count` > 0\";\n            } else {\n                $where_sql = \"`artist`.`song_count` > 0\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => \"SELECT DISTINCT(`artist`.`id`), `artist`.`name` FROM `artist`\",\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_song\n     * Handles the generation of the SQL for song searches.\n     * @return array\n     */\n    private function _get_sql_song()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n        $metadata    = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'anywhere':\n                    // 'anywhere' searches song title, song filename, song genre, album title, artist title, label title and song comment\n                    $tag_string   = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    // we want AND NOT and like for this query to really exclude them\n                    if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT'))) {\n                        $where[] = \"NOT ((`artist`.`name` LIKE ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) LIKE ?) OR (`album`.`name` LIKE ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) LIKE ?) OR `song_data`.`comment` LIKE ? OR `song_data`.`label` LIKE ? OR `song`.`file` LIKE ? OR `song`.`title` LIKE ? OR NOT \" . $tag_string . ')';\n                    } else {\n                        $where[] = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) OR (`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) OR `song_data`.`comment` $sql_match_operator ? OR `song_data`.`label` $sql_match_operator ? OR `song`.`file` $sql_match_operator ? OR `song`.`title` $sql_match_operator ? OR \" . $tag_string . ')';\n                    }\n                    $parameters = array_merge($parameters, array($input, $input, $input, $input, $input, $input, $input, $input));\n                    // join it all up\n                    $join['album']     = true;\n                    $join['artist']    = true;\n                    $join['song_data'] = true;\n                    break;\n                case 'title':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'album_genre':\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    $where[]        = \"`album`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[]   = $input;\n                    break;\n                case 'artist_genre':\n                    $where[]         = \"`artist`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[]    = $input;\n                    $join['artist']  = true;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`song`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'album':\n                    $where[]        = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?)\";\n                    $parameters     = array_merge($parameters, array($input, $input));\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    break;\n                case 'artist':\n                    $where[]        = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters     = array_merge($parameters, array($input, $input));\n                    $join['artist'] = true;\n                    break;\n                case 'album_artist':\n                    $where[]               = \"(`album_artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album_artist`.`prefix`, ''), ' ', `album_artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters            = array_merge($parameters, array($input, $input));\n                    $table['album']        = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    $table['album_artist'] = \"LEFT JOIN `artist` AS `album_artist` ON `album`.`album_artist` = `album_artist`.`id`\";\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`song`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                case 'composer':\n                case 'year':\n                case 'track':\n                case 'catalog':\n                case 'license':\n                    $where[]      = \"`song`.`$rule[0]` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'comment':\n                    $where[]           = \"`song_data`.`comment` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['song_data'] = true;\n                    break;\n                case 'label':\n                    $join['song_data'] = true;\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song_data`.`label` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song_data`.`label` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song_data`.`label` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'lyrics':\n                    $where[]           = \"`song_data`.`lyrics` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['song_data'] = true;\n                    break;\n                case 'played':\n                    $where[] = \"`song`.`played` = '$sql_match_operator'\";\n                    break;\n                case 'last_play':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'last_skip':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type' \"\n                        : \"\";\n                    $where[] = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'played_times':\n                    $where[]      = \"(`song`.`total_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'skipped_times':\n                    $where[]      = \"(`song`.`total_skip` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'played_or_skipped_times':\n                    $where[]      = \"((`song`.`total_count` + `song`.`total_skip`) $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'play_skip_ratio':\n                    $where[]      = \"(((`song`.`total_count`/`song`.`total_skip`) * 100) $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'myplayed':\n                case 'myplayedalbum':\n                case 'myplayedartist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('myplayed', '', $rule[0]);\n                    $column       = ($looking == '') ? 'id' : $looking;\n                    $my_type      = ($looking == '') ? 'song' : $looking;\n                    $operator_sql = ((int) $sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'bitrate':\n                    $input        = $input * 1000;\n                    $where[]      = \"`song`.`bitrate` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='song' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `song`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]      = \"`song`.`title` $sql_match_operator ? AND `favorite_song_$user_id`.`user` = $user_id AND `favorite_song_$user_id`.`object_type` = 'song'\";\n                    $parameters[] = $input;\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_song_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_song_$user_id` ON `song`.`id` = `favorite_song_$user_id`.`object_id` AND `favorite_song_$user_id`.`object_type` = 'song'\"\n                        : \"\";\n                    break;\n                case 'favorite_album':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `favorite_album_$user_id`.`user` = $user_id AND `favorite_album_$user_id`.`object_type` = 'album'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_album_$user_id` ON `album`.`id` = `favorite_album_$user_id`.`object_id` AND `favorite_album_$user_id`.`object_type` = 'album'\"\n                        : \"\";\n                    $join['album'] = true;\n                    break;\n                case 'favorite_artist':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `favorite_artist_$user_id`.`user` = $user_id AND `favorite_artist_$user_id`.`object_type` = 'artist'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_artist_$user_id` ON `artist`.`id` = `favorite_artist_$user_id`.`object_id` AND `favorite_artist_$user_id`.`object_type` = 'artist'\"\n                        : \"\";\n                    $join['artist'] = true;\n                    break;\n                case 'myrating':\n                case 'albumrating':\n                case 'artistrating':\n                    // combine these as they all do the same thing just different tables\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'my') ? 'id' : $looking;\n                    $my_type = ($looking == 'my') ? 'song' : $looking;\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '=';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `song`.`$column`\"\n                        : \"\";\n                    break;\n                case 'other_user':\n                case 'other_user_album':\n                case 'other_user_artist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('other_user_', '', $rule[0]);\n                    $column       = ($looking == 'other_user') ? 'id' : $looking;\n                    $my_type      = ($looking == 'other_user') ? 'song' : $looking;\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid AND `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_\" . $my_type . \"_\" . $other_userid))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_\" . $my_type . \"_\" . $other_userid . \"` ON `song`.`$column` = `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_id` AND `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\"\n                            : \"\";\n                    } else {\n                        $unrated = ($sql_match_operator == 'unrated');\n                        $where[] = ($unrated) ? \"`song`.`$column` NOT IN (SELECT `object_id` FROM `rating` WHERE `object_type` = '$my_type' AND `user` = $other_userid)\" : \"`rating_\" . $my_type . \"_\" . $other_userid . \"`.$sql_match_operator AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $other_userid))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $other_userid . \"` ON `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_id` = `song`.`$column` AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid \"\n                            : \"\";\n                    }\n                    break;\n                case 'playlist_name':\n                    $join['playlist']      = true;\n                    $join['playlist_data'] = true;\n                    $where[]               = \"`playlist`.`name` $sql_match_operator ?\";\n                    $parameters[]          = $input;\n                    break;\n                case 'playlist':\n                    $where[]      = \"`song`.`id` $sql_match_operator IN (SELECT `object_id` FROM `playlist_data` WHERE `playlist_data`.`playlist` = ? AND `playlist_data`.`object_type` = 'song')\";\n                    $parameters[] = $input;\n                    break;\n                case 'smartplaylist':\n                    //debug_event(self::class, '_get_sql_song: SUBSEARCH ' . $input, 5);\n                    $subsearch  = new Search($input, 'song', $this->search_user);\n                    $results    = $subsearch->get_items();\n                    $itemstring = '';\n                    if (count($results) > 0) {\n                        foreach ($results as $item) {\n                            $itemstring .= $item['object_id'] . ',';\n                        }\n                        $where[]  = \"`song`.`id` $sql_match_operator IN (\" . substr($itemstring, 0, -1) . \")\";\n                    }\n                    break;\n                case 'added':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`song`.`addition_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'updated':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`song`.`update_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'song' ORDER BY $sql_match_operator DESC LIMIT $input) AS `played_$key` ON `song`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'recent_added':\n                    $key                       = md5($input . $sql_match_operator);\n                    $where[]                   = \"`addition_time_$key`.`id` IS NOT NULL\";\n                    $table['addition_' . $key] = \"LEFT JOIN (SELECT `id` FROM `song` ORDER BY $sql_match_operator DESC LIMIT $input) AS `addition_time_$key` ON `song`.`id` = `addition_time_$key`.`id`\";\n                    break;\n                case 'recent_updated':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`update_time_$key`.`id` IS NOT NULL\";\n                    $table['update_' . $key] = \"LEFT JOIN (SELECT `id` FROM `song` ORDER BY $sql_match_operator DESC LIMIT $input) AS `update_time_$key` ON `song`.`id` = `update_time_$key`.`id`\";\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_album':\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]        = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[]   = $input;\n                    break;\n                case 'mbid_artist':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]        = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[]   = $input;\n                    $join['artist'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`song`.`id`) AS `dupe_id1`, CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`) AS `fullname`, COUNT(CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`)) AS `counting` FROM `song` LEFT JOIN `album` ON `song`.`album` = `album`.`id` LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search1` ON `song`.`id` = `dupe_search1`.`dupe_id1` \";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`song`.`id`) AS `dupe_id2`, CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`) AS `fullname`, COUNT(CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`)) AS `counting` FROM `song` LEFT JOIN `album` ON `song`.`album` = `album`.`id` LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search2` ON `song`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'possible_duplicate_album':\n                    $where[]                     = \"((`dupe_album_search1`.`dupe_album_id1` IS NOT NULL OR `dupe_album_search2`.`dupe_album_id2` IS NOT NULL))\";\n                    $table['dupe_album_search1'] = \"LEFT JOIN (SELECT `album_artist`, MIN(`id`) AS `dupe_album_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search1` ON `album`.`id` = `dupe_album_search1`.`dupe_album_id1`\";\n                    $table['dupe_album_search2'] = \"LEFT JOIN (SELECT `album_artist`, MAX(`id`) AS `dupe_album_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search2` ON `album`.`id` = `dupe_album_search2`.`dupe_album_id2`\";\n                    $join['album']               = true;\n                    break;\n                case 'orphaned_album':\n                    $where[] = \"`song`.`album` IN (SELECT `album_id` FROM `album_map` WHERE `album_id` NOT IN (SELECT `id` from `album`))\";\n                    break;\n                case 'metadata':\n                    $field = (int)$rule[3];\n                    if ($sql_match_operator === '=' && strlen($input) == 0) {\n                        $where[] = \"NOT EXISTS (SELECT NULL FROM `metadata` WHERE `metadata`.`object_id` = `song`.`id` AND `metadata`.`field` = {$field})\";\n                    } else {\n                        $parsedInput = is_numeric($input) ? $input : '\"' . $input . '\"';\n                        if (!array_key_exists($field, $metadata)) {\n                            $metadata[$field] = array();\n                        }\n                        $metadata[$field][] = \"`metadata`.`data` $sql_match_operator ?\";\n                        $parameters[]       = $parsedInput;\n                    }\n                    break;\n                default:\n                    break;\n            } // switch on ruletype song\n        } // foreach over rules\n\n        // translate metadata queries into sql for each field\n        foreach ($metadata as $metadata_field => $metadata_queries) {\n            $metadata_sql = \"EXISTS (SELECT NULL FROM `metadata` WHERE `metadata`.`object_id` = `song`.`id` AND `metadata`.`field` = {$metadata_field} AND (\";\n            $metadata_sql .= implode(\" $sql_logic_operator \", $metadata_queries);\n            $where[] = $metadata_sql . '))';\n        }\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        // now that we know which things we want to JOIN...\n        if (array_key_exists('song_data', $join)) {\n            $table['song_data'] = \"LEFT JOIN `song_data` ON `song`.`id` = `song_data`.`song_id`\";\n        }\n        if (array_key_exists('playlist_data', $join)) {\n            $table['playlist_data'] = \"LEFT JOIN `playlist_data` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type`='song'\";\n            if (array_key_exists('playlist', $join)) {\n                $table['playlist'] = \"LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id`\";\n            }\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_song` ON `catalog_map_song`.`object_id` = `song`.`id` AND `catalog_map_song`.`object_type` = 'song' AND `catalog_map_song`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('artist', $join)) {\n            $table['3_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song'\";\n            $table['4_artist']     = \"LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id`\";\n        }\n        if (array_key_exists('album', $join)) {\n            $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`song`.`id`), `song`.`file` FROM `song`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_video\n     *\n     * Handles the generation of the SQL for video searches.\n     * @return array\n     */\n    private function _get_sql_video()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'file':\n                    $where[]      = \"`video`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `video`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `video`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `video`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_video` ON `catalog_map_video`.`object_id` = `video`.`id` AND `catalog_map_video`.`object_type` = 'video' AND `catalog_map_video`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`video`.`id`), `video`.`file` FROM `video`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_playlist\n     *\n     * Handles the generation of the SQL for playlist searches.\n     * @return array\n     */\n    private function _get_sql_playlist()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            $where[] = \"(`playlist`.`type` = 'public' OR `playlist`.`user`=\" . $user_id . \")\";\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`playlist`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'type':\n                    $where[]      = \"`playlist`.`type` $sql_match_operator ?\";\n                    $parameters[] = ($input == 1)\n                        ? 'private'\n                        : 'public';\n                    break;\n                case 'owner':\n                    $where[]      = \"`playlist`.`user` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        // always join the table data\n        $table['0_playlist_data'] = \"LEFT JOIN `playlist_data` ON `playlist_data`.`playlist` = `playlist`.`id`\";\n        if ($join['catalog']) {\n            $table['0_song']    = \"LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id`\";\n            $where_sql          = \"(\" . $where_sql . \") AND `playlist_data`.`object_type` = 'song'\";\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`playlist`.`id`), `playlist`.`name` FROM `playlist`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_podcast\n     *\n     * Handles the generation of the SQL for podcast_episode searches.\n     * @return array\n     */\n    private function _get_sql_podcast()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`podcast`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'podcast_episode':\n                case 'podcast_episode_title':\n                    $where[]                 = \"`podcast_episode`.`title` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'time':\n                    $input                   = $input * 60;\n                    $where[]                 = \"`podcast_episode`.`time` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'state':\n                    $where[]      = \"`podcast_episode`.`state` $sql_match_operator ?\";\n                    switch ($input) {\n                        case 0:\n                            $parameters[] = 'skipped';\n                            break;\n                        case 1:\n                            $parameters[] = 'pending';\n                            break;\n                        case 2:\n                            $parameters[] = 'completed';\n                    }\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'pubdate':\n                    $input                   = strtotime((string) $input);\n                    $where[]                 = \"`podcast_episode`.`pubdate` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'added':\n                    $input                   = strtotime((string) $input);\n                    $where[]                 = \"`podcast_episode`.`addition_time` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'file':\n                    $where[]                 = \"`podcast_episode`.`file` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('podcast_episode', $join)) {\n            $table['0_podcast'] = \"LEFT JOIN `podcast_episode` ON `podcast_episode`.`podcast` = `podcast`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `podcast`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`podcast`.`id`), `podcast`.`title` FROM `podcast`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_podcast_episode\n     *\n     * Handles the generation of the SQL for podcast_episode searches.\n     * @return array\n     */\n    private function _get_sql_podcast_episode()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`podcast_episode`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'podcast':\n                case 'podcast_title':\n                    $where[]         = \"`podcast`.`title` $sql_match_operator ?\";\n                    $parameters[]    = $input;\n                    $join['podcast'] = true;\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`podcast_episode`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'state':\n                    $where[]      = \"`podcast_episode`.`state` $sql_match_operator ?\";\n                    switch ($input) {\n                        case 0:\n                            $parameters[] = 'skipped';\n                            break;\n                        case 1:\n                            $parameters[] = 'pending';\n                            break;\n                        case 2:\n                            $parameters[] = 'completed';\n                    }\n                    break;\n                case 'pubdate':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`podcast_episode`.`pubdate` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'added':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`podcast_episode`.`addition_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                    $where[]      = \"`podcast_episode`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('podcast', $join)) {\n            $table['0_podcast'] = \"LEFT JOIN `podcast` ON `podcast`.`id` = `podcast_episode`.`podcast`\";\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `podcast_episode`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`podcast_episode`.`id`), `podcast_episode`.`pubdate` FROM `podcast_episode`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_label\n     *\n     * Handles the generation of the SQL for label searches.\n     * @return array\n     */\n    private function _get_sql_label()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`label`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'category':\n                    $where[]      = \"`label`.`category` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($catalog_disable || $catalog_filter) {\n            $table['0_label_asso']  = \"LEFT JOIN `label_asso` ON `label_asso`.`label` = `label`.`id`\";\n            $table['1_artist']      = \"LEFT JOIN `artist` ON `label_asso`.`artist` = `artist`.`id`\";\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_artist` ON `catalog_map_artist`.`object_id` = `artist`.`id` AND `catalog_map_artist`.`object_type` = 'artist'\";\n        }\n\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_map_artist`.`object_type` = 'artist' AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_map_artist`.`object_type` = 'artist' AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if ($join['catalog']) {\n            $table['3_catalog'] = \"LEFT JOIN `catalog`AS `catalog_se` ON `catalog_map_artist`.`catalog_id` = `catalog_se`.`id`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        $table_sql = implode(' ', $table);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`label`.`id`), `label`.`name` FROM `label`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_tag\n     *\n     * Handles the generation of the SQL for tag (genre) searches.\n     * @return array\n     */\n    private function _get_sql_tag()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`tag`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'category':\n                    $where[]      = \"`tag`.`category` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_album` ON `catalog_map_album`.`object_id` = `album`.`id` AND `catalog_map_album`.`object_type` = 'album' AND `catalog_map_album`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n\n        return array(\n            'base' => 'SELECT DISTINCT(`tag`.`id`) FROM `tag`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => '',\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_user\n     *\n     * Handles the generation of the SQL for user searches.\n     * @return array\n     */\n    private function _get_sql_user()\n    {\n        $sql_logic_operator = $this->logic_operator;\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'username':\n                    $where[]      = \"`user`.`username` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n        ksort($table);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`user`.`id`), `user`.`username` FROM `user`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => '',\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * year_search\n     *\n     * Build search rules for year -> year searching.\n     * @param $fromYear\n     * @param $toYear\n     * @param $size\n     * @param $offset\n     * @return array\n     */\n    public static function year_search($fromYear, $toYear, $size, $offset)\n    {\n        $search           = array();\n        $search['limit']  = $size;\n        $search['offset'] = $offset;\n        $search['type']   = \"album\";\n        $count            = 0;\n        if ($fromYear) {\n            $search['rule_' . $count . '_input']    = $fromYear;\n            $search['rule_' . $count . '_operator'] = 0;\n            $search['rule_' . $count]               = \"original_year\";\n            ++$count;\n        }\n        if ($toYear) {\n            $search['rule_' . $count . '_input']    = $toYear;\n            $search['rule_' . $count . '_operator'] = 1;\n            $search['rule_' . $count]               = \"original_year\";\n            ++$count;\n        }\n\n        return $search;\n    }\n\n    /**\n     * @deprecated\n     */\n    private function getLicenseRepository(): LicenseRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(LicenseRepositoryInterface::class);\n    }\n\n    /**\n     * @deprecated inject dependency\n     */\n    private function getUserRepository(): UserRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserRepositoryInterface::class);\n    }\n}\n"], "fixing_code": ["<?php\n/*\n * vim:set softtabstop=4 shiftwidth=4 expandtab:\n *\n * LICENSE: GNU Affero General Public License, version 3 (AGPL-3.0-or-later)\n * Copyright 2001 - 2022 Ampache.org\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n *\n */\n\ndeclare(strict_types=0);\n\nnamespace Ampache\\Module\\Statistics;\n\nuse Ampache\\Config\\AmpConfig;\nuse Ampache\\Repository\\Model\\Catalog;\nuse Ampache\\Repository\\Model\\Podcast_Episode;\nuse Ampache\\Repository\\Model\\Song;\nuse Ampache\\Repository\\Model\\User;\nuse Ampache\\Repository\\Model\\Video;\nuse Ampache\\Module\\System\\Core;\nuse Ampache\\Module\\System\\Dba;\nuse Ampache\\Module\\User\\Activity\\UserActivityPosterInterface;\nuse Ampache\\Repository\\UserActivityRepositoryInterface;\nuse Ampache\\Repository\\UserRepositoryInterface;\nuse PDOStatement;\n\n/**\n * Stats Class\n *\n * this class handles the object_count\n * stuff, before this was done in the user class\n * but that's not good, all done through here.\n *\n */\nclass Stats\n{\n    /* Base vars */\n    public $id;\n    public $object_type;\n    public $object_id;\n    public $date;\n    public $user;\n    public $agent;\n\n    /**\n     * clear\n     *\n     * This clears all stats for _everything_.\n     * @param integer $user\n     */\n    public static function clear($user = 0)\n    {\n        if ($user > 0) {\n            Dba::write(\"DELETE FROM `object_count` WHERE `user` = ?;\", array($user));\n        } else {\n            Dba::write(\"TRUNCATE `object_count`;\");\n        }\n        Dba::write(\"UPDATE `song` SET `played` = 0;\");\n    }\n\n    /**\n     * garbage_collection\n     *\n     * This removes stats for things that no longer exist.\n     */\n    public static function garbage_collection()\n    {\n        foreach (array('album', 'artist', 'song', 'playlist', 'tag', 'live_stream', 'video', 'podcast', 'podcast_episode') as $object_type) {\n            Dba::write(\"DELETE FROM `object_count` WHERE `object_type` = '$object_type' AND `object_count`.`object_id` NOT IN (SELECT `$object_type`.`id` FROM `$object_type`);\");\n        }\n    }\n\n    /**\n     * Migrate an object associate stats to a new object\n     * @param string $object_type\n     * @param integer $old_object_id\n     * @param integer $new_object_id\n     * @param int|null $child_id\n     * @return PDOStatement|boolean\n     */\n    public static function migrate($object_type, $old_object_id, $new_object_id, $child_id = null)\n    {\n        if (!in_array($object_type, array('song', 'album', 'artist', 'video', 'live_stream', 'playlist', 'podcast', 'podcast_episode', 'tvshow'))) {\n            return false;\n        }\n        $sql    = \"UPDATE IGNORE `object_count` SET `object_id` = ? WHERE `object_type` = ? AND `object_id` = ?\";\n        $params = array($new_object_id, $object_type, $old_object_id);\n        if ($child_id) {\n            $sql .= \" AND `date` IN (SELECT `date` FROM (SELECT `date` FROM `object_count` WHERE `object_type` = 'song' AND object_id = ?) AS `song_date`)\";\n            $params[] = $child_id;\n        }\n\n        return Dba::write($sql, $params);\n    }\n\n    /**\n     * When creating an artist_map, duplicate the stat rows\n     */\n    public static function duplicate_map(string $source_type, int $source_id, string $dest_type, int $dest_id)\n    {\n        if ($source_id > 0 && $dest_id > 0) {\n            debug_event(__CLASS__, \"duplicate_map \" . $source_type . \" {\" . $source_id . \"} => \" . $dest_type . \" {\" . $dest_id . \"}\", 5);\n            $sql        = \"SELECT `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`geo_latitude`, `object_count`.`geo_longitude`, `object_count`.`geo_name`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`object_type` = ? AND `object_count`.`object_id` = ?;\";\n            $db_results = Dba::read($sql, array($source_type, $source_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"INSERT IGNORE INTO `object_count` (`object_type`, `object_id`, `count_type`, `date`, `user`, `agent`, `geo_latitude`, `geo_longitude`, `geo_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n                Dba::write($sql, array($dest_type, $dest_id, $row['count_type'], $row['date'], $row['user'], $row['agent'], $row['geo_latitude'], $row['geo_longitude'], $row['geo_name']));\n            }\n        }\n    }\n\n    /**\n     * When deleting an artist_map, remove the stat rows too\n     */\n    public static function delete_map(string $source_type, int $source_id, string $dest_type, int $dest_id)\n    {\n        if ($source_id > 0 && $dest_id > 0) {\n            debug_event(__CLASS__, \"delete_map \" . $source_type . \" {\" . $source_id . \"} => \" . $dest_type . \" {\" . $dest_id . \"}\", 5);\n            $sql        = \"SELECT `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`geo_latitude`, `object_count`.`geo_longitude`, `object_count`.`geo_name`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`object_type` = ? AND `object_count`.`object_id` = ?;\";\n            $db_results = Dba::read($sql, array($source_type, $source_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"DELETE FROM `object_count` WHERE `object_count`.`object_type` = ? AND `object_count`.`object_id` = ? AND `object_count`.`date` = ? AND `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`geo_latitude` = ? AND `object_count`.`geo_longitude` = ? AND `object_count`.`geo_name` = ? AND `object_count`.`count_type` = ?\";\n                Dba::write($sql, array($dest_type, $dest_id, $row['date'], $row['user'], $row['agent'], $row['geo_latitude'], $row['geo_longitude'], $row['geo_name'], $row['count_type']));\n            }\n        }\n    }\n\n    /**\n     * Delete a user activity in object_count\n     */\n    public static function delete(int $activity_id)\n    {\n        if ($activity_id > 0) {\n            $sql        = \"SELECT `object_count`.`object_id`, `object_count`.`object_type`, `object_count`.`date`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`id` = ?;\";\n            $db_results = Dba::read($sql, array($activity_id));\n            while ($row = Dba::fetch_assoc($db_results)) {\n                $sql = \"DELETE FROM `object_count` WHERE `object_count`.`date` = ? AND `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`count_type` = ?\";\n                Dba::write($sql, array($row['date'], $row['user'], $row['agent'], $row['count_type']));\n                if (in_array($row['object_type'], array('song', 'album', 'video', 'podcast', 'podcast_episode')) && $row['count_type'] === 'stream' && $row['user'] > 0 && $row['agent'] !== 'debug') {\n                    self::count($row['object_type'], $row['object_id'], 'down');\n                }\n            }\n        }\n    }\n\n    /**\n     * update the play_count for an object\n     */\n    public static function count(string $type, int $object_id, $count_type = 'up')\n    {\n        switch ($type) {\n            case 'song':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'video':\n                $sql = ($count_type == 'down')\n                    ? \"UPDATE `$type` SET `total_count` = `total_count` - 1, `total_skip` = `total_skip` + 1 WHERE `id` = ? AND `total_count` > 0\"\n                    : \"UPDATE `$type` SET `total_count` = `total_count` + 1 WHERE `id` = ?\";\n                Dba::write($sql, array($object_id));\n                break;\n            case 'album':\n            case 'artist':\n                $sql = ($count_type == 'down')\n                    ? \"UPDATE `$type` SET `total_count` = `total_count` - 1 WHERE `id` = ? AND `total_count` > 0\"\n                    : \"UPDATE `$type` SET `total_count` = `total_count` + 1 WHERE `id` = ?\";\n                Dba::write($sql, array($object_id));\n                break;\n        }\n    }\n\n    /**\n     * insert\n     * This inserts a new record for the specified object\n     * with the specified information, amazing!\n     * @param string $input_type\n     * @param integer $object_id\n     * @param integer $user_id\n     * @param string $agent\n     * @param array $location\n     * @param string $count_type\n     * @param integer $date\n     * @return boolean\n     */\n    public static function insert(\n        $input_type,\n        $object_id,\n        $user_id,\n        $agent = '',\n        $location = [],\n        $count_type = 'stream',\n        $date = null\n    ) {\n        if (AmpConfig::get('use_auth') && $user_id < 0) {\n            debug_event(self::class, 'Invalid user given ' . $user_id, 3);\n\n            return false;\n        }\n        $type = self::validate_type($input_type);\n        if (self::is_already_inserted($type, $object_id, $user_id, $agent, $date)) {\n            return false;\n        }\n\n        $latitude  = null;\n        $longitude = null;\n        $geoname   = null;\n        if (isset($location['latitude'])) {\n            $latitude = $location['latitude'];\n        }\n        if (isset($location['longitude'])) {\n            $longitude = $location['longitude'];\n        }\n        if (isset($location['name'])) {\n            $geoname = $location['name'];\n        }\n        // allow setting date for scrobbles\n        if (!is_numeric($date)) {\n            $date = time();\n        }\n\n        $sql        = \"INSERT IGNORE INTO `object_count` (`object_type`, `object_id`, `count_type`, `date`, `user`, `agent`, `geo_latitude`, `geo_longitude`, `geo_name`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)\";\n        $db_results = Dba::write($sql, array($type, $object_id, $count_type, $date, $user_id, $agent, $latitude, $longitude, $geoname));\n\n        // the count was inserted\n        if ($db_results) {\n            if (in_array($type, array('song', 'album', 'artist', 'video', 'podcast', 'podcast_episode')) && $count_type === 'stream' && $user_id > 0 && $agent !== 'debug') {\n                self::count($type, $object_id);\n                // don't register activity for album or artist plays\n                if (!in_array($type, array('album', 'artist', 'podcast'))) {\n                    static::getUserActivityPoster()->post((int)$user_id, 'play', $type, (int)$object_id, (int)$date);\n                }\n            }\n\n            return true;\n        }\n        debug_event(self::class, 'Unable to insert statistics for ' . $user_id . ':' . $object_id, 3);\n\n        return false;\n    } // insert\n\n    /**\n     * is_already_inserted\n     * Check if the same stat has not already been inserted within a graceful delay\n     * @param string $type\n     * @param integer $object_id\n     * @param integer $user\n     * @param string $agent\n     * @param integer $time\n     * @param bool $exact\n     * @return boolean\n     */\n    public static function is_already_inserted($type, $object_id, $user, $agent, $time, $exact = false)\n    {\n        $sql = ($exact)\n            ? \"SELECT `object_id`, `date`, `count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` = ? AND `object_count`.`count_type` = 'stream' AND `object_count`.`date` = $time \"\n            : \"SELECT `object_id`, `date`, `count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` = ? AND `object_count`.`count_type` = 'stream' AND (`object_count`.`date` >= ($time - 5) AND `object_count`.`date` <= ($time + 5)) \";\n        $params = array($user, $type);\n        if ($agent !== '') {\n            $sql .= \"AND `object_count`.`agent` = ? \";\n            $params[] = $agent;\n        }\n        $sql .= \"ORDER BY `object_count`.`date` DESC\";\n\n        $db_results = Dba::read($sql, $params);\n        while ($row = Dba::fetch_assoc($db_results)) {\n            // Stop double ups\n            if ($row['object_id'] == $object_id) {\n                debug_event(self::class, 'Object already inserted {' . (string) $object_id . '} date: ' . (string) $time, 5);\n\n                return true;\n            }\n        }\n\n        return false;\n    } // is_already_inserted\n\n    /**\n     * get_object_count\n     * Get count for an object\n     * @param string $object_type\n     * @param integer $object_id\n     * @param string $threshold\n     * @param string $count_type\n     * @return integer\n     */\n    public static function get_object_count($object_type, $object_id, $threshold = null, $count_type = 'stream')\n    {\n        if ($threshold === null || $threshold === '') {\n            $threshold = 0;\n        }\n\n        if (AmpConfig::get('cron_cache')) {\n            $sql = \"SELECT `count` AS `total_count` FROM `cache_object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ? AND `threshold` = \" . $threshold;\n        } else {\n            $sql = \"SELECT COUNT(*) AS `total_count` FROM `object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ?\";\n            if ($threshold > 0) {\n                $date = time() - (86400 * (int)$threshold);\n                $sql .= \"AND `date` >= '\" . $date . \"'\";\n            }\n        }\n\n        $db_results = Dba::read($sql, array($object_type, $object_id, $count_type));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int)$results['total_count'];\n    } // get_object_count\n\n    /**\n     * get_object_total\n     * Get count for an object\n     * @param string $object_type\n     * @param integer $object_id\n     * @param string $threshold\n     * @param string $count_type\n     * @return integer\n     */\n    public static function get_object_total($object_type, $object_id, $threshold = null, $count_type = 'stream')\n    {\n        if ($threshold === null || $threshold === '') {\n            $threshold = 0;\n        }\n\n        if (AmpConfig::get('cron_cache')) {\n            $sql = \"SELECT `count_total` AS `total_count` FROM `object_total` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ? AND `threshold` = \" . $threshold;\n        } else {\n            $sql = \"SELECT COUNT(*) AS `total_count` FROM `object_count` WHERE `object_type`= ? AND `object_id` = ? AND `count_type` = ?\";\n            if ($threshold > 0) {\n                $date = time() - (86400 * (int)$threshold);\n                $sql .= \"AND `date` >= '\" . $date . \"'\";\n            }\n        }\n\n        $db_results = Dba::read($sql, array($object_type, $object_id, $count_type));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int)$results['total_count'];\n    } // get_object_count\n\n    /**\n     * get_cached_place_name\n     * @param $latitude\n     * @param $longitude\n     * @return mixed|null\n     */\n    public static function get_cached_place_name($latitude, $longitude)\n    {\n        $name       = null;\n        $sql        = \"SELECT `geo_name` FROM `object_count` WHERE `geo_latitude` = ? AND `geo_longitude` = ? AND `geo_name` IS NOT NULL ORDER BY `id` DESC LIMIT 1\";\n        $db_results = Dba::read($sql, array($latitude, $longitude));\n        $results    = Dba::fetch_assoc($db_results);\n        if (!empty($results)) {\n            $name = $results['geo_name'];\n        }\n\n        return $name;\n    }\n\n    /**\n     * get_last_play\n     * This returns the full data for the last song/video/podcast_episode that was played, including when it\n     * was played, this is used by, among other things, the LastFM plugin to figure out\n     * if we should re-submit or if this is a duplicate / if it's too soon. This takes an\n     * optional user_id because when streaming we don't have $GLOBALS()\n     * @param string $user_id\n     * @param string $agent\n     * @param integer $date\n     * @return array\n     */\n    public static function get_last_play($user_id = '', $agent = '', $date = 0)\n    {\n        if ($user_id === '') {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        if ((int)$user_id == 0) {\n            return array(\n                'id' => 0,\n                'object_type' => false,\n                'object_id' => false,\n                'user' => 0,\n                'agent' => '',\n                'date' => 0,\n                'count_type' => ''\n            );\n        }\n\n        $sql    = \"SELECT `object_count`.`id`, `object_count`.`object_type`, `object_count`.`object_id`, `object_count`.`user`, `object_count`.`agent`, `object_count`.`date`, `object_count`.`count_type` FROM `object_count` WHERE `object_count`.`user` = ? AND `object_count`.`object_type` IN ('song', 'video', 'podcast_episode') AND `object_count`.`count_type` IN ('stream', 'skip') \";\n        $params = array($user_id);\n        if ($agent) {\n            $sql .= \"AND `object_count`.`agent` = ? \";\n            $params[] = $agent;\n        }\n        if ($date > 0) {\n            $sql .= \"AND `object_count`.`date` <= ? \";\n            $params[] = $date;\n        }\n        $sql .= \"ORDER BY `object_count`.`date` DESC LIMIT 1\";\n        $db_results = Dba::read($sql, $params);\n\n        return Dba::fetch_assoc($db_results);\n    } // get_last_play\n\n    /**\n     * shift_last_play\n     * When you play or pause the song, shift the start time to allow better skip recording\n     *\n     * @param string $user_id\n     * @param string $agent\n     * @param integer $original_date\n     * @param integer $new_date\n     */\n    public static function shift_last_play($user_id, $agent, $original_date, $new_date)\n    {\n        // update the object_count table\n        $sql = \"UPDATE `object_count` SET `object_count`.`date` = ? WHERE `object_count`.`user` = ? AND `object_count`.`agent` = ? AND `object_count`.`date` = ?\";\n        Dba::write($sql, array($new_date, $user_id, $agent, $original_date));\n\n        // update the user_activity table\n        $sql = \"UPDATE `user_activity` SET `user_activity`.`activity_date` = ? WHERE `user_activity`.`user` = ? AND `user_activity`.`activity_date` = ?\";\n        Dba::write($sql, array($new_date, $user_id, $original_date));\n    } // shift_last_play\n\n    /**\n     * get_time\n     *\n     * get the time for the object (song, video, podcast_episode)\n     * @param integer $object_id\n     * @param string $object_type\n     * @return integer\n     */\n    public static function get_time($object_id, $object_type)\n    {\n        // you can't get the last played when you haven't played something before\n        if (!$object_id || !$object_type) {\n            return 0;\n        }\n        $sql        = \"SELECT `time` FROM `$object_type` WHERE `id` = ?\";\n        $db_results = Dba::read($sql, array($object_id));\n        $results    = Dba::fetch_assoc($db_results);\n\n        return (int) $results['time'];\n    } // get_time\n\n    /**\n     * skip_last_play\n     * this sets the object_counts count type to skipped\n     * Gets called when the next song is played in quick succession\n     *\n     * @param integer $date\n     * @param string $agent\n     * @param integer $user_id\n     * @param integer $object_id\n     * @param string $object_type\n     * @return PDOStatement|boolean\n     */\n    public static function skip_last_play($date, $agent, $user_id, $object_id, $object_type)\n    {\n        // change from a stream to a skip\n        $sql = \"UPDATE `object_count` SET `count_type` = 'skip' WHERE `date` = ? AND `agent` = ? AND `user` = ? AND `object_count`.`object_type` = ? ORDER BY `object_count`.`date` DESC\";\n        Dba::write($sql, array($date, $agent, $user_id, $object_type));\n\n        // update the total counts (and total_skip counts) as well\n        if ($user_id > 0 && $agent !== 'debug') {\n            $song = new Song($object_id);\n            self::count('song', $song->id, 'down');\n            self::count('album', $song->album, 'down');\n            $artists = array_unique(array_merge(Song::get_parent_array($song->id), Song::get_parent_array($song->album, 'album')));\n            foreach ($artists as $artist_id) {\n                self::count('artist', $artist_id, 'down');\n            }\n            if (in_array($object_type, array('song', 'video', 'podcast_episode'))) {\n                $sql  = \"UPDATE `user_data`, (SELECT `$object_type`.`size` FROM `$object_type` WHERE `$object_type`.`id` = ?) AS `$object_type` SET `value` = `value` - `$object_type`.`size` WHERE `user` = ? AND `value` = 'play_size'\";\n                Dba::write($sql, array($object_id, $object_id));\n            }\n        }\n\n        // To remove associated album and artist entries\n        $sql = \"DELETE FROM `object_count` WHERE `object_type` IN ('album', 'artist', 'podcast') AND `date` = ? AND `agent` = ? AND `user` = ? \";\n\n        return Dba::write($sql, array($date, $agent, $user_id));\n    } // skip_last_play\n\n    /**\n     * has_played_history\n     * this checks to see if the current object has been played recently by the user\n     * @param string $object_type\n     * @param Song|Podcast_Episode|Video $object\n     * @param integer $user\n     * @param string $agent\n     * @param integer $date\n     * @return boolean\n     */\n    public static function has_played_history($object_type, $object, $user, $agent, $date)\n    {\n        if (AmpConfig::get('use_auth') && $user == -1) {\n            return false;\n        }\n        // if it's already recorded (but from a different agent), don't do it again\n        if (self::is_already_inserted($object_type, $object->id, $user, '', $date, true)) {\n            return false;\n        }\n        $previous  = self::get_last_play($user, $agent, $date);\n        // no previous data?\n        if (!array_key_exists('object_id', $previous) || !array_key_exists('object_type', $previous)) {\n            return true;\n        }\n        $last_time = self::get_time($previous['object_id'], $previous['object_type']);\n        $diff      = $date - (int) $previous['date'];\n        $item_time = $object->time;\n        $skip_time = AmpConfig::get_skip_timer($last_time);\n\n        // if your last song is 30 seconds and your skip timer is 40 you don't want to keep skipping it.\n        if ($last_time > 0 && $last_time < $skip_time) {\n            return true;\n        }\n\n        // this object was your last play and the length between plays is too short.\n        if ($previous['object_id'] == $object->id && $diff < ($item_time)) {\n            debug_event(self::class, 'Repeated the same ' . get_class($object) . ' too quickly (' . $diff . '/' . ($item_time) . 's), not recording stats for {' . $object->id . '}', 3);\n\n            return false;\n        }\n\n        // when the difference between recordings is too short, the previous object has been skipped, so note that\n        if (($diff < $skip_time || ($diff < $skip_time && $last_time > $skip_time))) {\n            debug_event(self::class, 'Last ' . $previous['object_type'] . ' played within skip limit (' . $diff . '/' . $skip_time . 's). Skipping {' . $previous['object_id'] . '}', 3);\n            self::skip_last_play($previous['date'], $previous['agent'], $previous['user'], $previous['object_id'], $previous['object_type']);\n            // delete song, podcast_episode and video from user_activity to keep stats in line\n            static::getUseractivityRepository()->deleteByDate($previous['date'], 'play', (int) $previous['user']);\n        }\n\n        return true;\n    } // has_played_history\n\n    private static function getUseractivityRepository(): UserActivityRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserActivityRepositoryInterface::class);\n    }\n\n    /**\n     * get_object_history\n     * This returns the objects that have happened for $user_id sometime after $time\n     * used primarily by the democratic cooldown code\n     * @param integer $user_id\n     * @param integer $time\n     * @param boolean $newest\n     * @return array\n     */\n    public static function get_object_history($user_id, $time, $newest = true)\n    {\n        if (!in_array((string)$user_id, static::getUserRepository()->getValid())) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $order = ($newest) ? 'DESC' : 'ASC';\n        $sql   = (AmpConfig::get('catalog_disable'))\n            ? \"SELECT * FROM `object_count` LEFT JOIN `song` ON `song`.`id` = `object_count`.`object_id` LEFT JOIN `catalog` ON `catalog`.`id` = `song`.`catalog` WHERE `object_count`.`user` = ? AND `object_count`.`object_type`='song' AND `object_count`.`date` >= ? AND `catalog`.`enabled` = '1' \"\n            : \"SELECT * FROM `object_count` LEFT JOIN `song` ON `song`.`id` = `object_count`.`object_id` WHERE `object_count`.`user` = ? AND `object_count`.`object_type`='song' AND `object_count`.`date` >= ? \";\n        $sql .= (AmpConfig::get('catalog_filter') && $user_id > 0)\n            ? \" AND\" . Catalog::get_user_filter('song', $user_id) . \"ORDER BY `object_count`.`date` \" . $order\n            : \"ORDER BY `object_count`.`date` \" . $order;\n        $db_results = Dba::read($sql, array($user_id, $time));\n\n        $results = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['object_id'];\n        }\n\n        return $results;\n    } // get_object_history\n\n    /**\n     * get_top_sql\n     * This returns the get_top sql\n     * @param string $input_type\n     * @param string $threshold\n     * @param string $count_type\n     * @param integer $user_id\n     * @param boolean $random\n     * @param boolean $addAdditionalColumns\n     * @return string\n     */\n    public static function get_top_sql(\n        $input_type,\n        $threshold,\n        $count_type = 'stream',\n        $user_id = null,\n        $random = false,\n        bool $addAdditionalColumns = false\n    ) {\n        $type           = self::validate_type($input_type);\n        $date           = time() - (86400 * (int)$threshold);\n        $catalog_filter = (AmpConfig::get('catalog_filter'));\n        if ($type == 'playlist' && !$addAdditionalColumns) {\n            $sql = \"SELECT `id` FROM `playlist`\";\n            if ($threshold > 0) {\n                $sql .= \" WHERE `last_update` >= '\" . $date . \"' \";\n            }\n            if ($catalog_filter && $user_id > 0) {\n                $sql .= ($threshold > 0)\n                    ? \" AND\" . Catalog::get_user_filter($type, $user_id)\n                    : \" WHERE\" . Catalog::get_user_filter($type, $user_id);\n            }\n            // playlist is now available in object_count too\n            $sql .= \"UNION SELECT `object_id` FROM `object_count` WHERE `object_type` = 'playlist'\";\n            if ($threshold > 0) {\n                $sql .= \" AND `date` >= '\" . $date . \"' \";\n            }\n            if ($catalog_filter && $user_id > 0) {\n                $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_\" . $type, $user_id);\n            }\n            //debug_event(self::class, 'get_top_sql ' . $sql, 5);\n\n            return $sql;\n        }\n        if ($user_id === null && AmpConfig::get('cron_cache') && !$addAdditionalColumns && in_array($type, array('album', 'artist', 'song', 'genre', 'catalog', 'live_stream', 'video', 'podcast', 'podcast_episode', 'playlist'))) {\n            $sql = \"SELECT `object_id` AS `id`, MAX(`count`) AS `count` FROM `cache_object_count` WHERE `object_type` = '\" . $type . \"' AND `count_type` = '\" . $count_type . \"' AND `threshold` = '\" . $threshold . \"' GROUP BY `object_id`, `object_type`\";\n        } else {\n            $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n            $is_podcast        = ($type == 'podcast');\n            $select_sql        = ($is_podcast)\n                ? \"`podcast_episode`.`podcast`\"\n                : \"MIN(`object_id`)\";\n            // Select Top objects counting by # of rows for you only\n            $sql = \"SELECT $select_sql AS `id`, COUNT(*) AS `count`\";\n            // Add additional columns to use the select query as insert values directly\n            if ($addAdditionalColumns) {\n                $sql .= ($is_podcast)\n                    ? \", 'podcast' AS `object_type`, `count_type`, \" . $threshold . \" AS `threshold`\"\n                    : \", `object_type`, `count_type`, \" . $threshold . \" AS `threshold`\";\n            }\n            $sql .= \" FROM `object_count`\";\n            if ($allow_group_disks) {\n                $sql .= \" LEFT JOIN `album` ON `album`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'album'\";\n            }\n            if ($is_podcast) {\n                $type = 'podcast_episode';\n                $sql .= \" LEFT JOIN `podcast_episode` ON `podcast_episode`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'podcast_episode'\";\n            }\n            if ($user_id !== null) {\n                $sql .= \" WHERE `object_type` = '\" . $type . \"' AND `user` = \" . (string)$user_id;\n            } else {\n                $sql .= \" WHERE `object_type` = '\" . $type . \"' \";\n                if ($threshold > 0) {\n                    $sql .= \"AND `date` >= '\" . $date . \"'\";\n                }\n            }\n            if (AmpConfig::get('catalog_disable') && in_array($type, array('song', 'artist', 'album', 'video'))) {\n                $sql .= \" AND \" . Catalog::get_enable_filter($type, '`object_id`');\n            }\n            if (AmpConfig::get('catalog_filter') && in_array($type, array('song', 'artist', 'album', 'podcast_episode', 'video')) && $user_id > 0) {\n                $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_$type\", $user_id);\n            }\n            $rating_filter = AmpConfig::get_rating_filter();\n            if ($rating_filter > 0 && $rating_filter <= 5 && $user_id !== null) {\n                $sql .= \" AND `object_id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \")\";\n            }\n            $sql .= \" AND `count_type` = '\" . $count_type . \"'\";\n            if ($allow_group_disks) {\n                $sql .= \" GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group`, `object_count`.`object_type`, `object_count`.`count_type`\";\n            } else {\n                $sql .= ($is_podcast)\n                    ? \" GROUP BY `podcast_episode`.`podcast`, `object_count`.`object_type`, `object_count`.`count_type`\"\n                    : \" GROUP BY `object_count`.`object_id`, `object_count`.`object_type`, `object_count`.`count_type`\";\n            }\n        }\n        if ($random) {\n            $sql .= \" ORDER BY RAND() DESC \";\n        } else {\n            $sql .= \" ORDER BY `count` DESC \";\n        }\n        //debug_event(self::class, 'get_top_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_top\n     * This returns the top X for type Y from the\n     * last stats_threshold days\n     * @param string $type\n     * @param integer $count\n     * @param integer $threshold\n     * @param integer $offset\n     * @param integer $user_id\n     * @param boolean $random\n     * @return array\n     */\n    public static function get_top($type, $count, $threshold, $offset = 0, $user_id = null, $random = false)\n    {\n        $limit = ($offset < 1) ? $count : $offset . \",\" . $count;\n        $sql   = self::get_top_sql($type, $threshold, 'stream', $user_id, $random);\n\n        if ($limit) {\n            $sql .= \"LIMIT $limit\";\n        }\n        //debug_event(self::class, 'get_top ' . $sql, 5);\n\n        $db_results = Dba::read($sql);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['id'];\n        }\n\n        return $results;\n    } // get_top\n\n    /**\n     * get_recent_sql\n     * This returns the get_recent sql\n     * @param string $input_type\n     * @param int $user_id\n     * @param boolean $newest\n     * @return string\n     */\n    public static function get_recent_sql($input_type, $user_id = null, $newest = true)\n    {\n        $type              = self::validate_type($input_type);\n        $ordersql          = ($newest === true) ? 'DESC' : 'ASC';\n        $user_sql          = (!empty($user_id)) ? \" AND `user` = '\" . $user_id . \"'\" : '';\n        $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n        $catalog_filter    = (AmpConfig::get('catalog_filter'));\n\n        $sql = ($allow_group_disks)\n            ? \"SELECT MIN(`object_id`) AS `id`, MAX(`date`) AS `date` FROM `object_count` LEFT JOIN `album` ON `album`.`id` = `object_count`.`object_id` AND `object_count`.`object_type` = 'album' WHERE `object_type` = '\" . $type . \"'\" . $user_sql\n            : \"SELECT `object_id` AS `id`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_type` = '\" . $type . \"'\" . $user_sql;\n        if (AmpConfig::get('catalog_disable') && in_array($type, array('song', 'artist', 'album'))) {\n            $sql .= \" AND \" . Catalog::get_enable_filter($type, '`object_id`');\n        }\n        if ($catalog_filter && in_array($type, array('video', 'artist', 'album', 'song')) && $user_id > 0) {\n            $sql .= \" AND\" . Catalog::get_user_filter(\"object_count_$type\", $user_id);\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        if ($rating_filter > 0 && $rating_filter <= 5 && !empty($user_id)) {\n            $sql .= \" AND `object_id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \")\";\n        }\n        $sql .= ($allow_group_disks)\n            ? \" GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group` ORDER BY MAX(`date`) \" . $ordersql . \", `id` \"\n            : \" GROUP BY `object_count`.`object_id` ORDER BY MAX(`date`) \" . $ordersql . \", `object_count`.`object_id` \";\n\n        // playlists aren't the same as other objects so change the sql\n        if ($type === 'playlist') {\n            $sql = \"SELECT `id`, `last_update` AS `date` FROM `playlist`\";\n            if (!empty($user_id)) {\n                $sql .= \" WHERE `user` = '\" . $user_id . \"'\";\n                if ($catalog_filter) {\n                    $sql .= \" AND\" . Catalog::get_user_filter($type, $user_id);\n                }\n            }\n            $sql .= \" ORDER BY `last_update` \" . $ordersql;\n        }\n        //debug_event(self::class, 'get_recent_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_recent\n     * This returns the recent X for type Y\n     * @param string $input_type\n     * @param integer $count\n     * @param integer $offset\n     * @param boolean $newest\n     * @return array\n     */\n    public static function get_recent($input_type, $count = 0, $offset = 0, $newest = true)\n    {\n        if ($count < 1) {\n            $count = AmpConfig::get('popular_threshold', 10);\n        }\n        $limit = ($offset < 1) ? $count : $offset . \",\" . $count;\n\n        $type = self::validate_type($input_type);\n        $sql  = self::get_recent_sql($type, null, $newest);\n        $sql .= \"LIMIT $limit\";\n\n        $db_results = Dba::read($sql);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row['id'];\n        }\n\n        return $results;\n    } // get_recent\n\n    /**\n     * get_user\n     * This gets all stats for a type based on user with thresholds and all\n     * If full is passed, doesn't limit based on date\n     * @param string $count\n     * @param string $input_type\n     * @param integer $user\n     * @param integer $full\n     * @return array\n     */\n    public static function get_user($count, $input_type, $user, $full = 0)\n    {\n        $type = self::validate_type($input_type);\n\n        // If full then don't limit on date\n        $date = ($full > 0) ? '0' : time() - (86400 * (int)AmpConfig::get('stats_threshold', 7));\n\n        // Select Objects based on user\n        // FIXME:: Requires table scan, look at improving\n        $sql        = \"SELECT `object_id`, COUNT(`id`) AS `count` FROM `object_count` WHERE `object_type` = ? AND `date` >= ? AND `user` = ? GROUP BY `object_id` ORDER BY `count` DESC LIMIT \" . (int)$count;\n        $db_results = Dba::read($sql, array($type, $date, $user));\n\n        $results = array();\n\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = $row;\n        }\n\n        return $results;\n    } // get_user\n\n    /**\n     * validate_type\n     * This function takes a type and returns only those\n     * which are allowed, ensures good data gets put into the db\n     * @param string $type\n     * @return string\n     */\n    public static function validate_type($type)\n    {\n        switch ($type) {\n            case 'artist':\n            case 'album':\n            case 'tag':\n            case 'song':\n            case 'video':\n            case 'tvshow':\n            case 'tvshow_season':\n            case 'tvshow_episode':\n            case 'movie':\n            case 'playlist':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'live_stream':\n                return $type;\n            case 'genre':\n                return 'tag';\n            default:\n                return 'song';\n        } // end switch\n    } // validate_type\n\n    /**\n     * get_newest_sql\n     * This returns the get_newest sql\n     * @param string $input_type\n     * @param integer $catalog\n     * @return string\n     */\n    public static function get_newest_sql($input_type, $catalog = 0, $user_id = null)\n    {\n        $type = self::validate_type($input_type);\n        // all objects could be filtered\n        $catalog_filter = (AmpConfig::get('catalog_filter'));\n\n        // add playlists to mashup browsing\n        if ($type == 'playlist') {\n            $sql = ($catalog_filter && $user_id > 0)\n                ? \"SELECT `playlist`.`id`, MAX(`playlist`.`last_update`) AS `real_atime` FROM `playlist` WHERE\" . Catalog::get_user_filter($type, $user_id) . \"GROUP BY `playlist`.`id` ORDER BY `real_atime` DESC \"\n                : \"SELECT `playlist`.`id`, MAX(`playlist`.`last_update`) AS `real_atime` FROM `playlist` GROUP BY `playlist`.`id` ORDER BY `real_atime` DESC \";\n\n            return $sql;\n        }\n        $base_type         = 'song';\n        $join              = 'WHERE';\n        $allow_group_disks = AmpConfig::get('album_group') && $type == 'album';\n        $filter_type       = $type;\n        // everything else\n        if ($type === 'song') {\n            $sql      = \"SELECT DISTINCT(`song`.`id`) AS `id`, `song`.`addition_time` AS `real_atime` FROM `song` \";\n            $sql_type = \"`song`.`id`\";\n        } elseif ($type === 'album') {\n            $base_type = 'album';\n            $sql       = \"SELECT MIN(`album`.`id`) AS `id`, MIN(`album`.`addition_time`) AS `real_atime` FROM `album` \";\n            $sql_type  = \"`album`.`id`\";\n        } elseif ($type === 'video') {\n            $base_type = 'video';\n            $sql       = \"SELECT DISTINCT(`video`.`id`) AS `id`, `video`.`addition_time` AS `real_atime` FROM `video` \";\n            $sql_type  = \"`video`.`id`\";\n        } elseif ($type === 'artist') {\n            $sql         = \"SELECT MIN(`song`.`artist`) AS `id`, MIN(`song`.`addition_time`) AS `real_atime` FROM `song` \";\n            $sql_type    = \"`song`.`artist`\";\n            $filter_type = 'song_artist';\n        } elseif ($type === 'podcast') {\n            $base_type = 'podcast';\n            $sql       = \"SELECT MIN(`podcast`.`id`) AS `id`, MIN(`podcast`.`lastsync`) AS `real_atime` FROM `podcast` \";\n            $sql_type  = \"`podcast`.`id`\";\n        } elseif ($type === 'podcast_episode') {\n            $base_type = 'podcast_episode';\n            $sql       = \"SELECT MIN(`podcast_episode`.`id`) AS `id`, MIN(`podcast_episode`.`addition_time`) AS `real_atime` FROM `podcast_episode` \";\n            $sql_type  = \"`podcast_episode`.`id`\";\n        } else {\n            // what else?\n            $sql      = \"SELECT MIN(`$type`) AS `id`, MIN(`song`.`addition_time`) AS `real_atime` FROM `$base_type` \";\n            $sql_type = \"`song`.`\" . $type . \"`\";\n        }\n        // join catalogs\n        $sql .= \"LEFT JOIN `catalog` ON `catalog`.`id` = `\" . $base_type . \"`.`catalog` \";\n        if (AmpConfig::get('catalog_disable')) {\n            $sql .= $join . \" `catalog`.`enabled` = '1' \";\n            $join = ' AND';\n        }\n        if ($catalog_filter && $user_id > 0) {\n            $sql .= $join . Catalog::get_user_filter($filter_type, $user_id) . \" \";\n            $join = ' AND';\n        }\n        if ($catalog > 0) {\n            $sql .= $join . \" `catalog` = '\" . (string)scrub_in($catalog) . \"' \";\n            $join = ' AND';\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        $user_id       = (int)Core::get_global('user')->id;\n        if ($rating_filter > 0 && $rating_filter <= 5 && $user_id > 0) {\n            $sql .= $join . \" \" . $sql_type . \" NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $type . \"' AND `rating`.`rating` <=\" . $rating_filter . \" AND `rating`.`user` = \" . $user_id . \") \";\n            $join = ' AND';\n        }\n        if ($allow_group_disks) {\n            $sql .= $join . \" `album`.`id` IS NOT NULL GROUP BY `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group` ORDER BY `real_atime` DESC \";\n        } elseif ($type === 'song' || $base_type === 'video') {\n            $sql .= \"GROUP BY $sql_type, `real_atime` ORDER BY `real_atime` DESC \";\n        } else {\n            $sql .= \"GROUP BY $sql_type ORDER BY `real_atime` DESC \";\n        }\n        //debug_event(self::class, 'get_newest_sql ' . $sql, 5);\n\n        return $sql;\n    }\n\n    /**\n     * get_newest\n     * This returns an array of the newest artists/albums/whatever\n     * in this Ampache instance\n     * @param string $type\n     * @param integer $count\n     * @param integer $offset\n     * @param integer $catalog\n     * @param integer $user_id\n     * @return integer[]\n     */\n    public static function get_newest($type, $count = 0, $offset = 0, $catalog = 0, $user_id = null)\n    {\n        if ($count < 1) {\n            $count = AmpConfig::get('popular_threshold', 10);\n        }\n        if ($offset < 1) {\n            $limit = $count;\n        } else {\n            $limit = $offset . ', ' . $count;\n        }\n\n        $sql = self::get_newest_sql($type, $catalog, $user_id);\n        $sql .= \"LIMIT $limit\";\n        $db_results = Dba::read($sql);\n\n        $items = array();\n\n        while ($row = Dba::fetch_row($db_results)) {\n            $items[] = (int) $row[0];\n        } // end while results\n\n        return $items;\n    } // get_newest\n\n    /**\n     * @deprecated inject dependency\n     */\n    private static function getUserActivityPoster(): UserActivityPosterInterface\n    {\n        global $dic;\n\n        return $dic->get(UserActivityPosterInterface::class);\n    }\n\n    /**\n     * @deprecated inject dependency\n     */\n    private static function getUserRepository(): UserRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserRepositoryInterface::class);\n    }\n}\n", "<?php\n/*\n * vim:set softtabstop=4 shiftwidth=4 expandtab:\n *\n * LICENSE: GNU Affero General Public License, version 3 (AGPL-3.0-or-later)\n * Copyright 2001 - 2022 Ampache.org\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\ndeclare(strict_types=0);\n\nnamespace Ampache\\Repository\\Model;\n\nuse Ampache\\Module\\Authorization\\Access;\nuse Ampache\\Repository\\Model\\Metadata\\Repository\\MetadataField;\nuse Ampache\\Module\\System\\Dba;\nuse Ampache\\Config\\AmpConfig;\nuse Ampache\\Module\\System\\Core;\nuse Ampache\\Repository\\LicenseRepositoryInterface;\nuse Ampache\\Repository\\UserRepositoryInterface;\n\n/**\n * Search-related voodoo.  Beware tentacles.\n */\nclass Search extends playlist_object\n{\n    protected const DB_TABLENAME = 'search';\n    public const VALID_TYPES     = array('song', 'album', 'song_artist', 'album_artist', 'artist', 'genre', 'label', 'playlist', 'podcast', 'podcast_episode', 'tag', 'user', 'video');\n\n    public $searchType;\n    public $objectType;\n    public $rules          = array(); // rules used to actually search\n    public $logic_operator = 'AND';\n    public $type           = 'public';\n    public $random         = 0;\n    public $limit          = 0;\n    public $last_count     = 0;\n    public $last_duration  = 0;\n    public $date           = 0;\n\n    public $basetypes;\n    public $types; // rules that are available to the objectType\n\n    public $search_user;\n\n    private $stars;\n    private $order_by;\n\n    /**\n     * constructor\n     * @param integer $search_id\n     * @param string $searchType\n     * @param User|null $user\n     */\n    public function __construct($search_id = 0, $searchType = 'song', ?User $user = null)\n    {\n        if ($user !== null) {\n            $this->search_user = $user;\n        } else {\n            $this->search_user = Core::get_global('user');\n        }\n        //debug_event(self::class, \"SearchID: $search_id; Search Type: $searchType\\n\" . print_r($this, true), 5);\n        $searchType       = (in_array(strtolower($searchType), self::VALID_TYPES))\n            ? strtolower($searchType)\n            : 'song';\n        $this->searchType = $searchType;\n        $this->objectType = $searchType;\n        if ($search_id > 0) {\n            $info = $this->get_info($search_id);\n            foreach ($info as $key => $value) {\n                $this->$key = ($key == 'rules')\n                    ? json_decode((string)$value, true)\n                    : $value;\n            }\n            // make sure saved rules match the correct names\n            $rule_count = 0;\n            foreach ($this->rules as $rule) {\n                $this->rules[$rule_count][0] = $this->_get_rule_name($rule[0]);\n                $rule_count++;\n            }\n        }\n        $this->date = time();\n\n        $this->stars = array(\n            T_('0 Stars'),\n            T_('1 Star'),\n            T_('2 Stars'),\n            T_('3 Stars'),\n            T_('4 Stars'),\n            T_('5 Stars')\n        );\n\n        // Define our basetypes\n        $this->_set_basetypes();\n\n        $this->types = array();\n        switch ($searchType) {\n            case 'song':\n                $this->_set_types_song();\n                $this->order_by = '`song`.`file`';\n                break;\n            case 'album':\n                $this->_set_types_album();\n                $this->order_by = (AmpConfig::get('album_group')) ? '`album`.`name`' : '`album`.`name`, `album`.`disk`';\n                break;\n            case 'video':\n                $this->_set_types_video();\n                $this->order_by = '`video`.`file`';\n                break;\n            case 'album_artist':\n            case 'song_artist':\n                $this->_set_types_artist();\n                $this->order_by   = '`artist`.`name`';\n                $this->objectType = 'artist';\n                break;\n            case 'artist':\n                $this->_set_types_artist();\n                $this->order_by = '`artist`.`name`';\n                break;\n            case 'playlist':\n                $this->_set_types_playlist();\n                $this->order_by = '`playlist`.`name`';\n                break;\n            case 'podcast':\n                $this->_set_types_podcast();\n                $this->order_by = '`podcast`.`title`';\n                break;\n            case 'podcast_episode':\n                $this->_set_types_podcast_episode();\n                $this->order_by = '`podcast_episode`.`pubdate` DESC';\n                break;\n            case 'label':\n                $this->_set_types_label();\n                $this->order_by = '`label`.`name`';\n                break;\n            case 'user':\n                $this->_set_types_user();\n                $this->order_by = '`user`.`username`';\n                break;\n            case 'tag':\n            case 'genre':\n                $this->_set_types_tag();\n                $this->order_by = '`tag`.`name`';\n                break;\n        } // end switch on searchType\n    } // end constructor\n\n    public function getId(): int\n    {\n        return (int)$this->id;\n    }\n\n    /**\n     * _set_basetypes\n     *\n     * Function called during construction to set the different types and rules for search\n     */\n    private function _set_basetypes()\n    {\n        $this->basetypes['numeric'][] = array(\n            'name' => 'gte',\n            'description' => T_('is greater than or equal to'),\n            'sql' => '>='\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'lte',\n            'description' => T_('is less than or equal to'),\n            'sql' => '<='\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'equal',\n            'description' => T_('equals'),\n            'sql' => '<=>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'ne',\n            'description' => T_('does not equal'),\n            'sql' => '<>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'gt',\n            'description' => T_('is greater than'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['numeric'][] = array(\n            'name' => 'lt',\n            'description' => T_('is less than'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['is_true'][] = array(\n            'name' => 'true',\n            'description' => T_('is true'),\n            'sql' => '1'\n        );\n\n        $this->basetypes['boolean'][] = array(\n            'name' => 'true',\n            'description' => T_('is true'),\n            'sql' => '1'\n        );\n\n        $this->basetypes['boolean'][] = array(\n            'name' => 'false',\n            'description' => T_('is false'),\n            'sql' => '0'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'contain',\n            'description' => T_('contains'),\n            'sql' => 'LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notcontain',\n            'description' => T_('does not contain'),\n            'sql' => 'NOT LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'start',\n            'description' => T_('starts with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/$/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'end',\n            'description' => T_('ends with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/^/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '='\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'not equal',\n            'description' => T_('is not'),\n            'sql' => '!='\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'sounds',\n            'description' => T_('sounds like'),\n            'sql' => 'SOUNDS LIKE'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notsounds',\n            'description' => T_('does not sound like'),\n            'sql' => 'NOT SOUNDS LIKE'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'regexp',\n            'description' => T_('matches regular expression'),\n            'sql' => 'REGEXP'\n        );\n\n        $this->basetypes['text'][] = array(\n            'name' => 'notregexp',\n            'description' => T_('does not match regular expression'),\n            'sql' => 'NOT REGEXP'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'contain',\n            'description' => T_('contains'),\n            'sql' => 'LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'notcontain',\n            'description' => T_('does not contain'),\n            'sql' => 'NOT LIKE',\n            'preg_match' => array('/^/', '/$/'),\n            'preg_replace' => array('%', '%')\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'start',\n            'description' => T_('starts with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/$/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'end',\n            'description' => T_('ends with'),\n            'sql' => 'LIKE',\n            'preg_match' => '/^/',\n            'preg_replace' => '%'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['tags'][] = array(\n            'name' => 'not equal',\n            'description' => T_('is not'),\n            'sql' => '='\n        );\n\n        $this->basetypes['boolean_numeric'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => '<=>'\n        );\n\n        $this->basetypes['boolean_numeric'][] = array(\n            'name' => 'ne',\n            'description' => T_('is not'),\n            'sql' => '<>'\n        );\n\n        $this->basetypes['boolean_subsearch'][] = array(\n            'name' => 'equal',\n            'description' => T_('is'),\n            'sql' => ''\n        );\n\n        $this->basetypes['boolean_subsearch'][] = array(\n            'name' => 'ne',\n            'description' => T_('is not'),\n            'sql' => 'NOT'\n        );\n\n        $this->basetypes['date'][] = array(\n            'name' => 'lt',\n            'description' => T_('before'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['date'][] = array(\n            'name' => 'gt',\n            'description' => T_('after'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['days'][] = array(\n            'name' => 'lt',\n            'description' => T_('before (x) days ago'),\n            'sql' => '<'\n        );\n\n        $this->basetypes['days'][] = array(\n            'name' => 'gt',\n            'description' => T_('after (x) days ago'),\n            'sql' => '>'\n        );\n\n        $this->basetypes['recent_played'][] = array(\n            'name' => 'ply',\n            'description' => T_('Limit'),\n            'sql' => '`date`'\n        );\n        $this->basetypes['recent_added'][] = array(\n            'name' => 'add',\n            'description' => T_('Limit'),\n            'sql' => '`addition_time`'\n        );\n\n        $this->basetypes['recent_updated'][] = array(\n            'name' => 'upd',\n            'description' => T_('Limit'),\n            'sql' => '`update_time`'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => 'love',\n            'description' => T_('has loved'),\n            'sql' => 'userflag'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '5star',\n            'description' => T_('has rated 5 stars'),\n            'sql' => '`rating` = 5'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '4star',\n            'description' => T_('has rated 4 stars'),\n            'sql' => '`rating` = 4'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '3star',\n            'description' => T_('has rated 3 stars'),\n            'sql' => '`rating` = 3'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '2star',\n            'description' => T_('has rated 2 stars'),\n            'sql' => '`rating` = 2'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => '1star',\n            'description' => T_('has rated 1 star'),\n            'sql' => '`rating` = 1'\n        );\n\n        $this->basetypes['user_numeric'][] = array(\n            'name' => 'unrated',\n            'description' => T_('has not rated'),\n            'sql' => 'unrated'\n        );\n        $this->basetypes['multiple'] = array_merge($this->basetypes['text'], $this->basetypes['numeric']);\n    }\n\n    /**\n     * _add_type_numeric\n     *\n     * Generic integer searches rules\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param string $group\n     */\n    private function _add_type_numeric($name, $label, $type = 'numeric', $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('input', 'number'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_date\n     *\n     * Generic date searches rules\n     * @param string $name\n     * @param string $label\n     * @param string $group\n     */\n    private function _add_type_date($name, $label, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => 'date',\n            'widget' => array('input', 'datetime-local'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_text\n     *\n     * Generic text rules\n     * @param string $name\n     * @param string $label\n     * @param string $group\n     */\n    private function _add_type_text($name, $label, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => 'text',\n            'widget' => array('input', 'text'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_select\n     *\n     * Generic rule to select from a list\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param array $array\n     * @param string $group\n     */\n    private function _add_type_select($name, $label, $type, $array, $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('select', $array),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _add_type_boolean\n     *\n     * True or false generic searches\n     * @param string $name\n     * @param string $label\n     * @param string $type\n     * @param string $group\n     */\n    private function _add_type_boolean($name, $label, $type = 'boolean', $group = '')\n    {\n        $this->types[] = array(\n            'name' => $name,\n            'label' => $label,\n            'type' => $type,\n            'widget' => array('input', 'hidden'),\n            'title' => $group\n        );\n    }\n\n    /**\n     * _set_types_song\n     *\n     * this is where all the searchTypes for songs are defined\n     */\n    private function _set_types_song()\n    {\n        $user_id = $this->search_user->id ?? 0;\n        $this->_add_type_text('anywhere', T_('Any searchable text'));\n\n        $t_song_data = T_('Song Data');\n        $this->_add_type_text('title', T_('Title'), $t_song_data);\n        $this->_add_type_text('album', T_('Album'), $t_song_data);\n        $this->_add_type_text('artist', T_('Song Artist'), $t_song_data);\n        $this->_add_type_text('album_artist', T_('Album Artist'), $t_song_data);\n        $this->_add_type_text('composer', T_('Composer'), $t_song_data);\n        $this->_add_type_numeric('track', T_('Track'), 'numeric', $t_song_data);\n        $this->_add_type_numeric('year', T_('Year'), 'numeric', $t_song_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_song_data);\n        $this->_add_type_text('label', T_('Label'), $t_song_data);\n        $this->_add_type_text('comment', T_('Comment'), $t_song_data);\n        $this->_add_type_text('lyrics', T_('Lyrics'), $t_song_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('albumrating', T_('My Rating (Album)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('artistrating', T_('My Rating (Artist)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $this->_add_type_text('favorite_album', T_('Favorites (Album)'), $t_ratings);\n            $this->_add_type_text('favorite_artist', T_('Favorites (Artist)'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n            $this->_add_type_select('other_user_album', T_('Another User (Album)'), 'user_numeric', $users, $t_ratings);\n            $this->_add_type_select('other_user_artist', T_('Another User (Artist)'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        /* HINT: Number of times object has been skipped */\n        $this->_add_type_numeric('skipped_times', T_('# Skipped'), 'numeric', $t_play_data);\n        /* HINT: Number of times object has been played OR skipped */\n        $this->_add_type_numeric('played_or_skipped_times', T_('# Played or Skipped'), 'numeric', $t_play_data);\n        /* HINT: Percentage of (Times Played / Times skipped) * 100 */\n        $this->_add_type_numeric('play_skip_ratio', T_('Played/Skipped ratio'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedalbum', T_('Played by Me (Album)'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedartist', T_('Played by Me (Artist)'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('album_genre', T_('Album Genre'), $t_genre);\n        $this->_add_type_text('artist_genre', T_('Artist Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $playlists = self::get_search_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('smartplaylist', T_('Smart Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $bitrate_array = array(\n            '32',\n            '40',\n            '48',\n            '56',\n            '64',\n            '80',\n            '96',\n            '112',\n            '128',\n            '160',\n            '192',\n            '224',\n            '256',\n            '320',\n            '640',\n            '1280'\n        );\n        $this->_add_type_select('bitrate', T_('Bitrate'), 'numeric', $bitrate_array, $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n        $this->_add_type_date('updated', T_('Updated'), $t_file_data);\n        if (AmpConfig::get('licensing')) {\n            $licenses = array();\n            foreach ($this->getLicenseRepository()->getAll() as $license_id) {\n                $license               = new License($license_id);\n                $licenses[$license_id] = $license->name;\n            }\n            $this->_add_type_select('license', T_('Music License'), 'boolean_numeric', $licenses, $t_file_data);\n        }\n        $this->_add_type_numeric('recent_added', T_('Recently added'), 'recent_added', $t_file_data);\n        $this->_add_type_numeric('recent_updated', T_('Recently updated'), 'recent_updated', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate_album', T_('Possible Duplicate Albums'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('orphaned_album', T_('Orphaned Album'), 'is_true', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_album', T_('MusicBrainz ID (Album)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_artist', T_('MusicBrainz ID (Artist)'), $t_musicbrainz);\n\n        $t_metadata = T_('Metadata');\n        if (AmpConfig::get('enable_custom_metadata')) {\n            $metadataFields          = array();\n            $metadataFieldRepository = new MetadataField();\n            foreach ($metadataFieldRepository->findAll() as $metadata) {\n                $metadataFields[$metadata->getId()] = $metadata->getName();\n            }\n            $this->types[] = array(\n                'name' => 'metadata',\n                'label' => $t_metadata,\n                'type' => 'multiple',\n                'subtypes' => $metadataFields,\n                'widget' => array('subtypes', array('input', 'text')),\n                'title' => $t_metadata\n            );\n        }\n    }\n\n    /**\n     * _set_types_artist\n     *\n     * this is where all the searchTypes for artists are defined\n     */\n    private function _set_types_artist()\n    {\n        $user_id       = $this->search_user->id ?? 0;\n        $t_artist_data = T_('Artist Data');\n        $this->_add_type_text('title', T_('Name'), $t_artist_data);\n        $this->_add_type_text('album', T_('Album Title'), $t_artist_data);\n        $this->_add_type_text('song', T_('Song Title'), $t_artist_data);\n        $this->_add_type_text('summary', T_('Summary'), $t_artist_data);\n        $this->_add_type_numeric('yearformed', T_('Year Formed'), 'numeric', $t_artist_data);\n        $this->_add_type_text('placeformed', T_('Place Formed'), $t_artist_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_artist_data);\n        $this->_add_type_numeric('album_count', T_('Album Count'), 'numeric', $t_artist_data);\n        $this->_add_type_numeric('song_count', T_('Song Count'), 'numeric', $t_artist_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('songrating', T_('My Rating (Song)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('albumrating', T_('My Rating (Album)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('song_genre', T_('Song Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_boolean('has_image', T_('Local Image'), 'boolean', $t_file_data);\n        $this->_add_type_numeric('image_width', T_('Image Width'), 'numeric', $t_file_data);\n        $this->_add_type_numeric('image_height', T_('Image Height'), 'numeric', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate_album', T_('Possible Duplicate Albums'), 'is_true', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_album', T_('MusicBrainz ID (Album)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_song', T_('MusicBrainz ID (Song)'), $t_musicbrainz);\n    } // artisttypes\n\n    /**\n     * _set_types_album\n     *\n     * this is where all the searchTypes for albums are defined\n     */\n    private function _set_types_album()\n    {\n        $user_id      = $this->search_user->id ?? 0;\n        $t_album_data = T_('Album Data');\n        $this->_add_type_text('title', T_('Title'), $t_album_data);\n        $this->_add_type_text('artist', T_('Album Artist'), $t_album_data);\n        $this->_add_type_text('song_artist', T_('Song Artist'), $t_album_data);\n        $this->_add_type_text('song', T_('Song Title'), $t_album_data);\n        $this->_add_type_numeric('year', T_('Year'), 'numeric', $t_album_data);\n        $this->_add_type_numeric('original_year', T_('Original Year'), 'numeric', $t_album_data);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_album_data);\n        $this->_add_type_text('release_type', T_('Release Type'), $t_album_data);\n        $this->_add_type_text('release_status', T_('Release Status'), $t_album_data);\n        $this->_add_type_numeric('song_count', T_('Song Count'), 'numeric', $t_album_data);\n\n        $t_ratings = T_('Ratings');\n        if (AmpConfig::get('ratings')) {\n            $this->_add_type_select('myrating', T_('My Rating'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('rating', T_('Rating (Average)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('songrating', T_('My Rating (Song)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_select('artistrating', T_('My Rating (Artist)'), 'numeric', $this->stars, $t_ratings);\n            $this->_add_type_text('favorite', T_('Favorites'), $t_ratings);\n            $users = $this->getUserRepository()->getValidArray();\n            $this->_add_type_select('other_user', T_('Another User'), 'user_numeric', $users, $t_ratings);\n        }\n\n        $t_play_data = T_('Play History');\n        /* HINT: Number of times object has been played */\n        $this->_add_type_numeric('played_times', T_('# Played'), 'numeric', $t_play_data);\n        $this->_add_type_numeric('last_play', T_('My Last Play'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_skip', T_('My Last Skip'), 'days', $t_play_data);\n        $this->_add_type_numeric('last_play_or_skip', T_('My Last Play or Skip'), 'days', $t_play_data);\n        $this->_add_type_boolean('played', T_('Played'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayed', T_('Played by Me'), 'boolean', $t_play_data);\n        $this->_add_type_boolean('myplayedartist', T_('Played by Me (Artist)'), 'boolean', $t_play_data);\n        $this->_add_type_numeric('recent_played', T_('Recently played'), 'recent_played', $t_play_data);\n\n        $t_genre = T_('Genre');\n        $this->_add_type_text('genre', $t_genre, $t_genre);\n        $this->_add_type_text('song_genre', T_('Song Genre'), $t_genre);\n        $this->_add_type_boolean('no_genre', T_('No Genre'), 'is_true', $t_genre);\n\n        $t_playlists = T_('Playlists');\n        $playlists   = Playlist::get_playlist_array($user_id);\n        if (!empty($playlists)) {\n            $this->_add_type_select('playlist', T_('Playlist'), 'boolean_subsearch', $playlists, $t_playlists);\n        }\n        $this->_add_type_text('playlist_name', T_('Playlist Name'), $t_playlists);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_boolean('has_image', T_('Local Image'), 'boolean', $t_file_data);\n        $this->_add_type_numeric('image_width', T_('Image Width'), 'numeric', $t_file_data);\n        $this->_add_type_numeric('image_height', T_('Image Height'), 'numeric', $t_file_data);\n        $this->_add_type_boolean('possible_duplicate', T_('Possible Duplicate'), 'is_true', $t_file_data);\n        $this->_add_type_boolean('duplicate_mbid_group', T_('Duplicate MusicBrainz Release Group'), 'is_true', $t_file_data);\n        $this->_add_type_numeric('recent_added', T_('Recently added'), 'recent_added', $t_file_data);\n        $catalogs = array();\n        foreach (Catalog::get_catalogs('music', $user_id) as $catid) {\n            $catalog = Catalog::create_from_id($catid);\n            $catalog->format();\n            $catalogs[$catid] = $catalog->name;\n        }\n        if (!empty($catalogs)) {\n            $this->_add_type_select('catalog', T_('Catalog'), 'boolean_numeric', $catalogs, $t_file_data);\n        }\n\n        $t_musicbrainz = T_('MusicBrainz');\n        $this->_add_type_text('mbid', T_('MusicBrainz ID'), $t_musicbrainz);\n        $this->_add_type_text('mbid_artist', T_('MusicBrainz ID (Artist)'), $t_musicbrainz);\n        $this->_add_type_text('mbid_song', T_('MusicBrainz ID (Song)'), $t_musicbrainz);\n    } // albumtypes\n\n    /**\n     * _set_types_video\n     *\n     * this is where all the searchTypes for videos are defined\n     */\n    private function _set_types_video()\n    {\n        $this->_add_type_text('file', T_('Filename'));\n    }\n\n    /**\n     * _set_types_playlist\n     *\n     * this is where all the searchTypes for playlists are defined\n     */\n    private function _set_types_playlist()\n    {\n        $t_playlist = T_('Playlist');\n        $this->_add_type_text('title', T_('Name'), $t_playlist);\n        $playlist_types = array(\n            0 => T_('public'),\n            1 => T_('private')\n        );\n        $this->_add_type_select('type', T_('Type'), 'boolean_numeric', $playlist_types, $t_playlist);\n        $users = $this->getUserRepository()->getValidArray();\n        $this->_add_type_select('owner', T_('Owner'), 'user_numeric', $users, $t_playlist);\n    }\n\n    /**\n     * _set_types_podcast\n     *\n     * this is where all the searchTypes for podcasts are defined\n     */\n    private function _set_types_podcast()\n    {\n        $t_podcasts = T_('Podcast');\n        $this->_add_type_text('title', T_('Name'), $t_podcasts);\n\n        $t_podcast_episodes = T_('Podcast Episodes');\n        $this->_add_type_text('podcast_episode', T_('Podcast Episode'), $t_podcast_episodes);\n        $episode_states = array(\n            0 => T_('skipped'),\n            1 => T_('pending'),\n            2 => T_('completed')\n        );\n        $this->_add_type_select('state', T_('State'), 'boolean_numeric', $episode_states, $t_podcast_episodes);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_podcast_episodes);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_date('pubdate', T_('Publication Date'), $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n    }\n\n    /**\n     * _set_types_podcast_episode\n     *\n     * this is where all the searchTypes for podcast_episodes are defined\n     */\n    private function _set_types_podcast_episode()\n    {\n        $t_podcast_episodes = T_('Podcast Episode');\n        $this->_add_type_text('title', T_('Name'), $t_podcast_episodes);\n        $this->_add_type_text('podcast', T_('Podcast'), $t_podcast_episodes);\n        $episode_states = array(\n            0 => T_('skipped'),\n            1 => T_('pending'),\n            2 => T_('completed')\n        );\n        $this->_add_type_select('state', T_('State'), 'boolean_numeric', $episode_states, $t_podcast_episodes);\n        $this->_add_type_numeric('time', T_('Length (in minutes)'), 'numeric', $t_podcast_episodes);\n\n        $t_file_data = T_('File Data');\n        $this->_add_type_text('file', T_('Filename'), $t_file_data);\n        $this->_add_type_date('pubdate', T_('Publication Date'), $t_file_data);\n        $this->_add_type_date('added', T_('Added'), $t_file_data);\n    }\n\n    /**\n     * _set_types_label\n     *\n     * this is where all the searchTypes for labels are defined\n     */\n    private function _set_types_label()\n    {\n        $t_label = T_('Label');\n        $this->_add_type_text('title', T_('Name'), $t_label);\n        $this->_add_type_text('category', T_('Category'), $t_label);\n    }\n\n    /**\n     * _set_types_user\n     *\n     * this is where all the searchTypes for users are defined\n     */\n    private function _set_types_user()\n    {\n        $this->_add_type_text('username', T_('Username'));\n    }\n\n    /**\n     * _set_types_tag\n     *\n     * this is where all the searchTypes for Genres are defined\n     */\n    private function _set_types_tag()\n    {\n        $this->_add_type_text('title', T_('Genre'));\n    }\n\n    /**\n     * _filter_request\n     *\n     * Sanitizes raw search data\n     * @param array $data\n     * @return array\n     */\n    private static function _filter_request($data)\n    {\n        $request = array();\n        foreach ($data as $key => $value) {\n            $prefix = substr($key, 0, 4);\n            $value  = (string)$value;\n\n            if ($prefix == 'rule' && strlen((string)$value)) {\n                $request[$key] = Dba::escape($value);\n            }\n        }\n        // Figure out if they want an AND based search or an OR based search\n        $operator = $data['operator'] ?? '';\n        switch (strtolower($operator)) {\n            case 'or':\n                $request['operator'] = 'OR';\n                break;\n            case 'and':\n            default:\n                $request['operator'] = 'AND';\n                break;\n        }\n        if (array_key_exists('limit', $data)) {\n            $request['limit'] = $data['limit'];\n        }\n        if (array_key_exists('offset', $data)) {\n            $request['offset'] = $data['offset'];\n        }\n        if (array_key_exists('random', $data)) {\n            $request['random'] = $data['random'];\n        }\n\n        // Verify the type\n        $search_type = strtolower($data['type'] ?? '');\n        //Search::VALID_TYPES = array('song', 'album', 'song_artist', 'album_artist', 'artist', 'label', 'playlist', 'podcast', 'podcast_episode', 'tag', 'user', 'video')\n        switch ($search_type) {\n            case 'song':\n            case 'album':\n            case 'song_artist':\n            case 'album_artist':\n            case 'artist':\n            case 'label':\n            case 'playlist':\n            case 'podcast':\n            case 'podcast_episode':\n            case 'tag':  // for Genres\n            case 'user':\n            case 'video':\n                $request['type'] = $search_type;\n                break;\n            case 'genre':\n                $request['type'] = 'tag';\n                break;\n            default:\n                debug_event(self::class, \"_filter_request: search_type '$search_type' reset to: song\", 5);\n                $request['type'] = 'song';\n                break;\n        }\n\n        return $request;\n    } // end _filter_request\n\n    /**\n     * get_name_byid\n     *\n     * Returns the name of the saved search corresponding to the given ID\n     * @param string $search_id\n     * @return string\n     */\n    public static function get_name_byid($search_id)\n    {\n        $sql        = \"SELECT `name` FROM `search` WHERE `id` = ?\";\n        $db_results = Dba::read($sql, array($search_id));\n        $row        = Dba::fetch_assoc($db_results);\n\n        return $row['name'];\n    }\n\n    /**\n     * get_searches\n     *\n     * Return the IDs of all saved searches accessible by the current user.\n     * @param integer $user_id\n     * @return array\n     */\n    public static function get_searches($user_id = null)\n    {\n        if ($user_id === null) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $key     = 'searches';\n        if (parent::is_cached($key, $user_id)) {\n            return parent::get_from_cache($key, $user_id);\n        }\n        $is_admin = (Access::check('interface', 100, $user_id) || $user_id == -1);\n        $sql      = \"SELECT `id` FROM `search` \";\n        $params   = array();\n\n        if (!$is_admin) {\n            $sql .= \"WHERE (`user` = ? OR `type` = 'public') \";\n            $params[] = $user_id;\n        }\n        $sql .= \"ORDER BY `name`\";\n\n        $db_results = Dba::read($sql, $params);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[$row['id']] = $row['name'];\n        }\n\n        parent::add_to_cache($key, $user_id, $results);\n\n        return $results;\n    }\n\n    /**\n     * get_search_array\n     * Returns a list of searches accessible by the user with formatted name.\n     * @param integer $user_id\n     * @return array\n     */\n    public static function get_search_array($user_id = null)\n    {\n        if ($user_id === null) {\n            $user    = Core::get_global('user');\n            $user_id = $user->id ?? 0;\n        }\n        $key = 'searcharray';\n        if (parent::is_cached($key, $user_id)) {\n            return parent::get_from_cache($key, $user_id);\n        }\n        $is_admin = (Access::check('interface', 100, $user_id) || $user_id == -1);\n        $sql      = \"SELECT `id`, IF(`user` = ?, `name`, CONCAT(`name`, ' (', `username`, ')')) AS `name` FROM `search` \";\n        $params   = array($user_id);\n\n        if (!$is_admin) {\n            $sql .= \"WHERE (`user` = ? OR `type` = 'public') \";\n            $params[] = $user_id;\n        }\n        $sql .= \"ORDER BY `name`\";\n        //debug_event(self::class, 'get_searches query: ' . $sql . \"\\n\" . print_r($params, true), 5);\n\n        $db_results = Dba::read($sql, $params);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[$row['id']] = $row['name'];\n        }\n\n        parent::add_to_cache($key, $user_id, $results);\n\n        return $results;\n    } // get_smartlist_array\n\n    /**\n     * run\n     *\n     * This function actually runs the search and returns an array of the\n     * results.\n     * @param array $data\n     * @param User $user\n     * @return integer[]\n     */\n    public static function run($data, $user = null)\n    {\n        $limit  = (int)($data['limit'] ?? 0);\n        $offset = (int)($data['offset'] ?? 0);\n        $random = ((int)($data['random'] ?? 0) > 0) ? 1 : 0;\n        $search = new Search(null, $data['type'], $user);\n        $search->set_rules($data);\n\n        // Generate BASE SQL\n        $limit_sql = \"\";\n        if ($limit > 0) {\n            $limit_sql = ' LIMIT ';\n            if ($offset > 0) {\n                $limit_sql .= $offset . \", \";\n            }\n            $limit_sql .= $limit;\n        }\n\n        $search_info = $search->to_sql();\n        $sql         = $search_info['base'] . ' ' . $search_info['table_sql'];\n        if (!empty($search_info['where_sql'])) {\n            $sql .= ' WHERE ' . $search_info['where_sql'];\n        }\n        if (!empty($search_info['group_sql'])) {\n            $sql .= ' GROUP BY ' . $search_info['group_sql'];\n            if (!empty($search_info['having_sql'])) {\n                $sql .= ' HAVING ' . $search_info['having_sql'];\n            }\n        }\n        $sql .= ($random > 0) ? \" ORDER BY RAND()\" : \" ORDER BY \" . $search->order_by;\n        $sql .= ' ' . $limit_sql;\n        $sql = trim((string)$sql);\n        //debug_event(self::class, 'SQL run: ' . $sql . \"\\n\" . print_r($search_info['parameters'], true), 5);\n\n        $db_results = Dba::read($sql, $search_info['parameters']);\n        $results    = array();\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = (int)$row['id'];\n        }\n\n        return $results;\n    }\n\n    /**\n     * delete\n     *\n     * Does what it says on the tin.\n     * @return boolean\n     */\n    public function delete()\n    {\n        $search_id = Dba::escape($this->id);\n        $sql       = \"DELETE FROM `search` WHERE `id` = ?\";\n        Dba::write($sql, array($search_id));\n        Catalog::count_table('search');\n\n        return true;\n    }\n\n    /**\n     * format\n     * Gussy up the data\n     * @param boolean $details\n     */\n    public function format($details = true)\n    {\n        parent::format();\n    }\n\n    /**\n     * get_items\n     *\n     * Return an array of the items output by our search (part of the\n     * playlist interface).\n     * @return array\n     */\n    public function get_items()\n    {\n        $results = array();\n\n        $sqltbl = $this->to_sql();\n        $sql    = $sqltbl['base'] . ' ' . $sqltbl['table_sql'];\n        if (!empty($sqltbl['where_sql'])) {\n            $sql .= ' WHERE ' . $sqltbl['where_sql'];\n        }\n        if (!empty($sqltbl['group_sql'])) {\n            $sql .= ' GROUP BY ' . $sqltbl['group_sql'];\n        }\n        if (!empty($sqltbl['having_sql'])) {\n            $sql .= ' HAVING ' . $sqltbl['having_sql'];\n        }\n\n        $sql .= ($this->random > 0) ? \" ORDER BY RAND()\" : \" ORDER BY \" . $this->order_by;\n        if ($this->limit > 0) {\n            $sql .= \" LIMIT \" . (string)($this->limit);\n        }\n        //debug_event(self::class, 'SQL get_items: ' . $sql . \"\\n\" . print_r($sqltbl['parameters'], true), 5);\n\n        $count      = 1;\n        $db_results = Dba::read($sql, $sqltbl['parameters']);\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = array(\n                'object_id' => $row['id'],\n                'object_type' => $this->objectType,\n                'track' => $count++,\n                'track_id' => $row['id'],\n            );\n        }\n        $this->date = time();\n        $this->set_last(count($results), 'last_count');\n        $this->set_last(self::get_total_duration($results), 'last_duration');\n\n        return $results;\n    }\n\n    /**\n     * set_last\n     *\n     * @param integer $count\n     * @param string $column\n     */\n    private function set_last($count, $column)\n    {\n        if (in_array($column, array('last_count', 'last_duration'))) {\n            $search_id = Dba::escape($this->id);\n            $sql       = \"UPDATE `search` SET `\" . Dba::escape($column) . \"` = ? WHERE `id` = ?\";\n            Dba::write($sql, array($count, $search_id));\n        }\n    }\n\n    /**\n     * get_random_items\n     *\n     * Returns a randomly sorted array (with an optional limit) of the items\n     * output by our search (part of the playlist interface)\n     * @param integer $limit\n     * @return array\n     */\n    public function get_random_items($limit = null)\n    {\n        $results = array();\n\n        $sqltbl = $this->to_sql();\n        $sql    = $sqltbl['base'] . ' ' . $sqltbl['table_sql'];\n        if (!empty($sqltbl['where_sql'])) {\n            $sql .= ' WHERE ' . $sqltbl['where_sql'];\n        }\n        $rating_filter = AmpConfig::get_rating_filter();\n        if ($rating_filter > 0 && $rating_filter <= 5 && !empty(Core::get_global('user')) && Core::get_global('user')->id > 0) {\n            $user_id = Core::get_global('user')->id;\n            if (empty($sqltbl['where_sql'])) {\n                $sql .= \" WHERE \";\n            } else {\n                $sql .= \" AND \";\n            }\n            $sql .= \"`\" . $this->objectType . \"`.`id` NOT IN (SELECT `object_id` FROM `rating` WHERE `rating`.`object_type` = '\" . $this->objectType . \"' AND `rating`.`rating` <=$rating_filter AND `rating`.`user` = $user_id)\";\n        }\n        if (!empty($sqltbl['group_sql'])) {\n            $sql .= ' GROUP BY ' . $sqltbl['group_sql'];\n        }\n        if (!empty($sqltbl['having_sql'])) {\n            $sql .= ' HAVING ' . $sqltbl['having_sql'];\n        }\n\n        $sql .= \" ORDER BY RAND()\";\n        $sql .= ($limit)\n            ? \" LIMIT \" . (string) ($limit)\n            : \"\";\n        //debug_event(self::class, 'SQL get_random_items: ' . $sql . \"\\n\" . print_r($sqltbl['parameters'], true), 5);\n\n        $db_results = Dba::read($sql, $sqltbl['parameters']);\n\n        while ($row = Dba::fetch_assoc($db_results)) {\n            $results[] = array(\n                'object_id' => $row['id'],\n                'object_type' => $this->objectType\n            );\n        }\n\n        return $results;\n    }\n\n    /**\n     * get_total_duration\n     * Get the total duration of all songs.\n     * @param array $songs\n     * @return integer\n     */\n    public static function get_total_duration($songs)\n    {\n        $song_ids = array();\n        foreach ($songs as $objects) {\n            $song_ids[] = (string)$objects['object_id'];\n        }\n        $idlist = '(' . implode(',', $song_ids) . ')';\n        if ($idlist == '()') {\n            return 0;\n        }\n        $sql = \"SELECT SUM(`time`) FROM `song` WHERE `id` IN $idlist\";\n\n        $db_results = Dba::read($sql);\n        $row        = Dba::fetch_row($db_results);\n\n        return (int)($row[0] ?? 0);\n    } // get_total_duration\n\n    /**\n     * _get_rule_name\n     *\n     * Iterate over $this->types to validate the rule name and return the rule type\n     * (text, date, etc)\n     * @param string $name\n     * @return string\n     */\n    private function _get_rule_name($name)\n    {\n        // check that the rule you sent is not an alias (needed for pulling details from the rule)\n        switch ($this->objectType) {\n            case 'song':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'album_title':\n                        $name = 'album';\n                        break;\n                    case 'album_artist_title':\n                        $name = 'album_artist';\n                        break;\n                    case 'song_artist_title':\n                        $name = 'song_artist';\n                        break;\n                    case 'tag':\n                    case 'song_tag':\n                    case 'song_genre':\n                        $name = 'genre';\n                        break;\n                    case 'album_tag':\n                        $name = 'album_genre';\n                        break;\n                    case 'artist_tag':\n                        $name = 'artist_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_song':\n                        $name = 'mbid';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'album':\n                switch ($name) {\n                    case 'name':\n                    case 'album_title':\n                        $name = 'title';\n                        break;\n                    case 'song_title':\n                        $name = 'song';\n                        break;\n                    case 'album_artist':\n                    case 'album_artist_title':\n                        $name = 'artist';\n                        break;\n                    case 'tag':\n                    case 'album_tag':\n                    case 'album_genre':\n                        $name = 'genre';\n                        break;\n                    case 'song_tag':\n                        $name = 'song_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_album':\n                        $name = 'mbid';\n                        break;\n                    case 'possible_duplicate_album':\n                        $name = 'possible_duplicate';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'artist':\n                switch ($name) {\n                    case 'name':\n                    case 'artist_title':\n                        $name = 'title';\n                        break;\n                    case 'album_title':\n                        $name = 'album';\n                        break;\n                    case 'song_title':\n                        $name = 'song';\n                        break;\n                    case 'tag':\n                    case 'artist_tag':\n                    case 'artist_genre':\n                        $name = 'genre';\n                        break;\n                    case 'song_tag':\n                        $name = 'song_genre';\n                        break;\n                    case 'no_tag':\n                        $name = 'no_genre';\n                        break;\n                    case 'mbid_artist':\n                        $name = 'mbid';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'podcast':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'podcast_episode_title':\n                        $name = 'podcast_episode';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'podcast_episode':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    case 'podcast_title':\n                        $name = 'podcast';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n            case 'genre':\n            case 'tag':\n            case 'label':\n            case 'playlist':\n                switch ($name) {\n                    case 'name':\n                        $name = 'title';\n                        break;\n                    default:\n                        break;\n                }\n                break;\n        }\n        //debug_event(self::class, '__get_rule_name: ' . $name, 5);\n\n        return $name;\n    }\n\n    /**\n     * _get_rule_type\n     *\n     * Iterate over $this->types to validate the rule name and return the rule type\n     * (text, date, etc)\n     * @param string $name\n     * @return string|false\n     */\n    private function _get_rule_type($name)\n    {\n        //debug_event(self::class, '_get_rule_type: ' . $name, 5);\n        foreach ($this->types as $type) {\n            if ($type['name'] == $name) {\n                return $type['type'];\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * set_rules\n     *\n     * Takes an array of sanitized search data from the form and generates our real array from it.\n     * @param array $data\n     */\n    public function set_rules($data)\n    {\n        $data        = self::_filter_request($data);\n        $this->rules = array();\n        $user_rules  = array();\n        // check that a limit or random flag and operator have been sent\n        $this->random         = (isset($data['random'])) ? (int) $data['random'] : $this->random;\n        $this->limit          = (isset($data['limit'])) ? (int) $data['limit'] : $this->limit;\n        $this->logic_operator = $data['operator'] ?? 'AND';\n        // match the numeric rules you send (e.g. rule_1, rule_6000)\n        foreach ($data as $rule => $value) {\n            if (preg_match('/^rule_(\\d+)$/', $rule, $ruleID)) {\n                $user_rules[] = $ruleID[1];\n            }\n        }\n        // get the data for each rule group the user sent\n        foreach ($user_rules as $ruleID) {\n            $rule_name     = $this->_get_rule_name($data[\"rule_\" . $ruleID]);\n            $rule_type     = $this->_get_rule_type($rule_name);\n            $rule_input    = (string)($data['rule_' . $ruleID . '_input'] ?? '');\n            $rule_operator = $this->basetypes[$rule_type][$data['rule_' . $ruleID . '_operator']]['name'] ?? '';\n            // keep vertical bar in regular expression\n            $is_regex = in_array($rule_operator, ['regexp', 'notregexp']);\n            if ($is_regex) {\n                $rule_input = str_replace(\"|\", \"\\0\", $rule_input);\n            }\n            // attach the rules to the search\n            foreach (explode('|', $rule_input) as $input) {\n                $this->rules[] = array(\n                    $rule_name,\n                    $rule_operator,\n                    ($is_regex) ? str_replace(\"\\0\", \"|\", $input) : $input,\n                    $data['rule_' . $ruleID . '_subtype'] ?? null\n                );\n            }\n        }\n    }\n\n    /**\n     * create\n     *\n     * Save this search to the database for use as a smart playlist\n     * @return string|null\n     */\n    public function create()\n    {\n        $user = Core::get_global('user');\n        // Make sure we have a unique name\n        if (!$this->name) {\n            $this->name = $user->username . ' - ' . get_datetime(time());\n        }\n        $sql        = \"SELECT `id` FROM `search` WHERE `name` = ? AND `user` = ? AND `type` = ?;\";\n        $db_results = Dba::read($sql, array($this->name, $user->id, $this->type));\n        if (Dba::num_rows($db_results)) {\n            $this->name .= uniqid('', true);\n        }\n\n        $sql = \"INSERT INTO `search` (`name`, `type`, `user`, `username`, `rules`, `logic_operator`, `random`, `limit`) VALUES (?, ?, ?, ?, ?, ?, ?, ?)\";\n        Dba::write($sql, array(\n            $this->name,\n            $this->type,\n            $user->id,\n            $user->username,\n            json_encode($this->rules),\n            $this->logic_operator,\n            ($this->random > 0) ? 1 : 0,\n            $this->limit\n        ));\n        $insert_id = Dba::insert_id();\n        $this->id  = (int)$insert_id;\n        Catalog::count_table('search');\n\n        return $insert_id;\n    }\n\n    /**\n     * to_js\n     *\n     * Outputs the javascript necessary to re-show the current set of rules.\n     * @return string\n     */\n    public function to_js()\n    {\n        $javascript = \"\";\n        foreach ($this->rules as $rule) {\n            $javascript .= '<script>' . 'SearchRow.add(\"' . $rule[0] . '\",\"' . $rule[1] . '\",\"' . $rule[2] . '\", \"' . $rule[3] . '\"); </script>';\n        }\n\n        return $javascript;\n    }\n\n    /**\n     * to_sql\n     *\n     * Call the appropriate real function.\n     * @return array\n     */\n    public function to_sql()\n    {\n        return call_user_func(array($this, '_get_sql_' . $this->searchType));\n    }\n\n    /**\n     * update\n     *\n     * This function updates the saved search with the current settings.\n     * @param array|null $data\n     * @return integer\n     */\n    public function update(array $data = null)\n    {\n        if ($data && is_array($data)) {\n            $this->name   = $data['name'] ?? $this->name;\n            $this->type   = $data['pl_type'] ?? $this->type;\n            $this->user   = $data['pl_user'] ?? $this->user;\n            $this->random = ((int)($data['random'] ?? 0) > 0) ? 1 : 0;\n            $this->limit  = $data['limit'] ?? $this->limit;\n        }\n        $this->username = User::get_username($this->user);\n\n        if (!$this->id) {\n            return 0;\n        }\n\n        $sql = \"UPDATE `search` SET `name` = ?, `type` = ?, `user` = ?, `username` = ?, `rules` = ?, `logic_operator` = ?, `random` = ?, `limit` = ? WHERE `id` = ?\";\n        Dba::write($sql, array(\n            $this->name,\n            $this->type,\n            $this->user,\n            $this->username,\n            json_encode($this->rules),\n            $this->logic_operator,\n            $this->random,\n            $this->limit,\n            $this->id\n        ));\n        // reformat after an update\n        $this->format();\n\n        return $this->id;\n    }\n\n    /**\n     * _filter_input\n     *\n     * Private convenience function.  Mangles the input according to a set\n     * of predefined rules so that we don't have to include this logic in\n     * _get_sql_foo.\n     * @param array|string $data\n     * @param string|false $type\n     * @param array $operator\n     * @return array|boolean|integer|string|string[]|null\n     */\n    private function _filter_input($data, $type, $operator)\n    {\n        if (array_key_exists('preg_match', $operator)) {\n            $data = preg_replace($operator['preg_match'], $operator['preg_replace'], $data);\n        }\n\n        if ($type == 'numeric' || $type == 'days') {\n            return (int)($data);\n        }\n\n        if ($type == 'boolean') {\n            return make_bool($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * _get_sql_album\n     *\n     * Handles the generation of the SQL for album searches.\n     * @return array\n     */\n    private function _get_sql_album()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n        $join['tag'] = array();\n        $groupdisks  = AmpConfig::get('album_group');\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n            if ($groupdisks) {\n                /** 'album_group' DEFAULT:\n                 * `album`.`prefix`, `album`.`name`, `album`.`album_artist`, `album`.`release_type`, `album`.`release_status`, `album`.`mbid`, `album`.`year`, `album`.`original_year`, `album`.`mbid_group`\n                 */\n                $group[] = \"`album`.`prefix`\";\n                $group[] = \"`album`.`name`\";\n                $group[] = \"`album`.`album_artist`\";\n                $group[] = \"`album`.`release_type`\";\n                $group[] = \"`album`.`release_status`\";\n                $group[] = \"`album`.`mbid`\";\n                $group[] = \"`album`.`year`\";\n                $group[] = \"`album`.`original_year`\";\n                $group[] = \"`album`.`mbid_group`\";\n            } else {\n                $group[] = \"`album`.`id`\";\n                $group[] = \"`album`.`disk`\";\n            }\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?)\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'year':\n                case 'release_type':\n                case 'release_status':\n                case 'catalog':\n                    $where[]      = \"`album`.`\" . $rule[0] . \"` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'original_year':\n                    $where[]    = \"(`album`.`original_year` $sql_match_operator ? OR (`album`.`original_year` IS NULL AND `album`.`year` $sql_match_operator ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`album`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='album' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `album`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `favorite_album_$user_id`.`user` = $user_id AND `favorite_album_$user_id`.`object_type` = 'album'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_album_$user_id` ON `album`.`id` = `favorite_album_$user_id`.`object_id` AND `favorite_album_$user_id`.`object_type` = 'album'\"\n                        : \"\";\n                    break;\n                case 'myrating':\n                case 'artistrating':\n                    // combine these as they all do the same thing just different tables\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'my') ? '`album`.`id`' : '`album_map`.`object_id`';\n                    $my_type = ($looking == 'my') ? 'album' : $looking;\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = $column\"\n                        : \"\";\n                    if ($my_type == 'artist') {\n                        $join['album_map'] = true;\n                    }\n                    break;\n                case 'songrating':\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` NOT IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song')))\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song' AND `rating` $sql_match_operator ?))) OR `album`.`id` NOT IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song')))\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`album`.`id` IN (SELECT `id` FROM `album` WHERE `id` IN (SELECT `album` FROM `song` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='song' AND `rating` $sql_match_operator ?)))\";\n                        $parameters[] = $input;\n                    }\n                    break;\n                case 'myplayed':\n                case 'myplayedartist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('myplayed', '', $rule[0]);\n                    $column       = ($looking == 'artist') ? 'album_artist' : 'id';\n                    $my_type      = ($looking == 'artist') ? 'artist' : 'album';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `album`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'played':\n                    $column       = 'id';\n                    $my_type      = 'album';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('played', $table)) {\n                        $table['played'] = '';\n                    }\n                    $table['played'] .= (!strpos((string) $table['played'], \"played_\" . $my_type))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' GROUP BY `object_id`, `object_type`, `user`) AS `played_\" . $my_type . \"` ON `album`.`$column` = `played_\" . $my_type . \"`.`object_id` AND `played_\" . $my_type . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`played_\" . $my_type . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'last_play':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `album`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[]      = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    break;\n                case 'last_skip':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'album';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'played_times':\n                    if ($groupdisks) {\n                        $table['play_count'] = \"LEFT JOIN (SELECT MIN(`album`.`id`) AS `id`, SUM(`total_count`) AS `total_count` FROM `album` GROUP BY `album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`,`album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`) AS `album_total_count` ON `album`.`id` = `album_total_count`.`id`\";\n                        $where[]             = \"(`album_total_count`.`total_count` $sql_match_operator ?)\";\n                    } else {\n                        $where[] = \"(`album`.`total_count` $sql_match_operator ?)\";\n                    }\n                    $parameters[]        = $input;\n                    break;\n                case 'song_count':\n                    if ($groupdisks) {\n                        $table['play_count'] = \"LEFT JOIN (SELECT MIN(`album`.`id`) AS `id`, SUM(`song_count`) AS `song_count` FROM `album` GROUP BY `album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`,`album`.`prefix`,`album`.`name`,`album`.`album_artist`,`album`.`release_type`,`album`.`release_status`,`album`.`mbid`,`album`.`year`,`album`.`original_year`,`album`.`mbid_group`) AS `album_song_count` ON `album`.`id` = `album_song_count`.`id`\";\n                        $where[]             = \"(`album_song_count`.`song_count` $sql_match_operator ?)\";\n                    } else {\n                        $where[]      = \"(`album`.`song_count` $sql_match_operator ?)\";\n                    }\n                    $parameters[] = $input;\n                    break;\n                case 'other_user':\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_album_$other_userid`.`user` = $other_userid AND `favorite_album_$other_userid`.`object_type` = 'album'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$other_userid\"))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_album_$other_userid` ON `album`.`id` = `favorite_album_$other_userid`.`object_id` AND `favorite_album_$other_userid`.`object_type` = 'album'\"\n                            : \"\";\n                    } else {\n                        $column  = 'id';\n                        $my_type = 'album';\n                        $where[] = \"`rating_album_\" . $other_userid . '`.' . $sql_match_operator . \" AND `rating_album_$other_userid`.`user` = $other_userid AND `rating_album_$other_userid`.`object_type` = 'album'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `$my_type`.`$column` AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`user` = $user_id \"\n                            : \"\";\n                    }\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'album' ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `played_$key` ON `album`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'recent_added':\n                    $key                       = md5($input . $sql_match_operator);\n                    $where[]                   = \"`addition_time_$key`.`id` IS NOT NULL\";\n                    $table['addition_' . $key] = \"LEFT JOIN (SELECT `id` FROM `album` ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `addition_time_$key` ON `album`.`id` = `addition_time_$key`.`id`\";\n                    break;\n                case 'genre':\n                    $where[]      = \"`album`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`album`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'song_genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'playlist_name':\n                    $where[]      = \"`album`.`id` IN (SELECT `song`.`album` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' WHERE `playlist`.`name` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'playlist':\n                    $where[]      = \"`album`.`id` $sql_match_operator IN (SELECT `song`.`album` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                    $where[]      = \"`song`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'has_image':\n                    $where[]            = ($sql_match_operator == '1') ? \"`has_image`.`object_id` IS NOT NULL\" : \"`has_image`.`object_id` IS NULL\";\n                    $table['has_image'] = \"LEFT JOIN (SELECT `object_id` FROM `image` WHERE `object_type` = 'album') AS `has_image` ON `album`.`id` = `has_image`.`object_id`\";\n                    break;\n                case 'image_height':\n                case 'image_width':\n                    $looking       = strpos($rule[0], \"image_\") ? str_replace('image_', '', $rule[0]) : str_replace('image ', '', $rule[0]);\n                    $where[]       = \"`image`.`$looking` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['image'] = true;\n                    break;\n                case 'artist':\n                case 'album_artist':\n                    $where[]           = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `album_map`.`object_type` = 'album')\";\n                    $parameters        = array_merge($parameters, array($input, $input));\n                    $join['album_map'] = true;\n                    break;\n                case 'song':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    $join['song'] = true;\n                    break;\n                case 'song_artist':\n                    $where[]           = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `album_map`.`object_type` = 'song')\";\n                    $parameters        = array_merge($parameters, array($input, $input));\n                    $join['album_map'] = true;\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_song':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'mbid_artist':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]           = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['album_map'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`id`) AS `dupe_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_search1` ON `album`.`id` = `dupe_search1`.`dupe_id1`\";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`id`) AS `dupe_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_search2` ON `album`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'duplicate_mbid_group':\n                    $where[] = \"`mbid_group` IN (SELECT `mbid_group` FROM `album` WHERE `disk` = 1 GROUP BY `mbid_group`, `disk` HAVING COUNT(`mbid_group`) > 1)\";\n                    break;\n                default:\n                    break;\n            } // switch on ruletype album\n        } // foreach rule\n\n        $join['song']        = array_key_exists('song', $join);\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('album_map', $join)) {\n            $table['0_album_map'] = \"LEFT JOIN `album_map` ON `album`.`id` = `album_map`.`album_id`\";\n            $table['artist']      = \"LEFT JOIN `artist` ON `artist`.`id` = `album_map`.`object_id`\";\n        }\n        if ($join['song']) {\n            $table['0_song'] = \"LEFT JOIN `song` ON `song`.`album` = `album`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_album` ON `catalog_map_album`.`object_type` = 'album' AND `catalog_map_album`.`object_id` = `album`.`id`\";\n            $table['3_catalog']     = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `catalog_map_album`.`catalog_id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1'\";\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('count', $join)) {\n            $table['object_count'] = \"LEFT JOIN (SELECT `object_count`.`object_id`, MAX(`object_count`.`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'album' AND `object_count`.`user`='\" . $user_id . \"' AND `object_count`.`count_type` = 'stream' GROUP BY `object_count`.`object_id`) AS `object_count` ON `object_count`.`object_id` = `album`.`id`\";\n        }\n        if (array_key_exists('image', $join)) {\n            $table['0_song'] = \"LEFT JOIN `song` ON `song`.`album` = `album`.`id` LEFT JOIN `image` ON `image`.`object_id` = `album`.`id`\";\n            $where_sql       = \"(\" . $where_sql . \") AND `image`.`object_type`='album' AND `image`.`size`='original'\";\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => ($groupdisks) ? 'SELECT MIN(`album`.`id`) AS `id`, MAX(`album`.`disk`) AS `disk` FROM `album`' : 'SELECT `album`.`id` AS `id` FROM `album`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_song_artist\n     *\n     * Handles the generation of the SQL for song_artist searches.\n     * @return array\n     */\n    private function _get_sql_song_artist()\n    {\n        return self::_get_sql_artist();\n    }\n\n    /**\n     * _get_sql_album_artist\n     *\n     * Handles the generation of the SQL for album_artist searches.\n     * @return array\n     */\n    private function _get_sql_album_artist()\n    {\n        return self::_get_sql_artist();\n    }\n\n    /**\n     * _get_sql_artist\n     *\n     * Handles the generation of the SQL for artist searches.\n     * @return array\n     */\n    private function _get_sql_artist()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n        $album_artist       = ($this->searchType == 'album_artist');\n        $song_artist        = ($this->searchType == 'song_artist');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'yearformed':\n                case 'placeformed':\n                    $where[]      = \"`artist`.`$rule[0]` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`artist`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'genre':\n                    $where[]      = \"`artist`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'song_genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`artist`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'playlist_name':\n                    $where[]    = \"(`artist`.`id` IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist`.`name` $sql_match_operator ?) OR `artist`.`id` IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`album` AND `artist_map`.`object_type` = 'album' WHERE `playlist`.`name` $sql_match_operator ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'playlist':\n                    $where[]    = \"(`artist`.`id` $sql_match_operator IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?) OR `artist`.`id` $sql_match_operator IN (SELECT `artist_map`.`artist_id` FROM `playlist_data` LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type` = 'song' LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' WHERE `playlist_data`.`playlist` = ?))\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='artist' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `artist`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `favorite_artist_$user_id`.`user` = $user_id AND `favorite_artist_$user_id`.`object_type` = 'artist'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_artist_$user_id` ON `artist`.`id` = `favorite_artist_$user_id`.`object_id` AND `favorite_artist_$user_id`.`object_type` = 'artist'\"\n                        : \"\";\n                    break;\n                case 'file':\n                    $where[]      = \"`song`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'has_image':\n                    $where[]            = ($sql_match_operator == '1') ? \"`has_image`.`object_id` IS NOT NULL\" : \"`has_image`.`object_id` IS NULL\";\n                    $table['has_image'] = \"LEFT JOIN (SELECT `object_id` FROM `image` WHERE `object_type` = 'artist') AS `has_image` ON `artist`.`id` = `has_image`.`object_id`\";\n                    break;\n                case 'image_height':\n                case 'image_width':\n                    $looking       = strpos($rule[0], \"image_\") ? str_replace('image_', '', $rule[0]) : str_replace('image ', '', $rule[0]);\n                    $where[]       = \"`image`.`$looking` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['image'] = true;\n                    break;\n                case 'myrating':\n                    $column  = 'id';\n                    $my_type = 'artist';\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '=';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `artist`.`$column`\"\n                        : \"\";\n                    break;\n                case 'albumrating':\n                case 'songrating':\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'album') ? 'album_artist' : 'artist';\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '<=>';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` NOT IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking')))\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking' AND `rating` $sql_match_operator ?))) OR `$looking`.`$column` NOT IN (SELECT `$column` FROM `$looking` WHERE `id` IN (SELECT `$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking')))\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`artist`.`id` IN (SELECT `id` FROM `artist` WHERE `id` IN (SELECT `$looking`.`$column` FROM `$looking` WHERE `id` IN (SELECT `object_id` FROM `rating` WHERE `user` = $user_id AND `object_type`='$looking' AND `rating` $sql_match_operator ?)))\";\n                        $parameters[] = $input;\n                    }\n                    break;\n                case 'myplayed':\n                    $column       = 'id';\n                    $my_type      = 'artist';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT DISTINCT `artist_map`.`artist_id`, `object_count`.`user` FROM `object_count` LEFT JOIN `artist_map` ON `object_count`.`object_type` = `artist_map`.`object_type` AND `artist_map`.`object_id` = `object_count`.`object_id` WHERE `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `artist_map`.`artist_id`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `artist`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`artist_id`\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`artist_id` $operator_sql\";\n                    break;\n                case 'played':\n                    $column       = 'id';\n                    $my_type      = 'artist';\n                    $operator_sql = ((int)$sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('played', $table)) {\n                        $table['played'] = '';\n                    }\n                    $table['played'] .= (!strpos((string) $table['played'], \"played_\" . $my_type))\n                        ? \"LEFT JOIN (SELECT DISTINCT `artist_map`.`artist_id`, `object_count`.`user` FROM `object_count` LEFT JOIN `artist_map` ON `object_count`.`object_type` = `artist_map`.`object_type` AND `artist_map`.`object_id` = `object_count`.`object_id` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'stream' GROUP BY `artist_map`.`artist_id`, `user`) AS `played_\" . $my_type . \"` ON `artist`.`$column` = `played_\" . $my_type . \"`.`artist_id`\"\n                        : \"\";\n                    $where[] = \"`played_\" . $my_type . \"`.`artist_id` $operator_sql\";\n                    break;\n                case 'last_play':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `artist`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[]      = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    break;\n                case 'last_skip':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'artist';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'song' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = 'song'\"\n                        : \"\";\n                    $where[]      = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - (? * 86400))\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'played_times':\n                    $where[]      = \"(`artist`.`total_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'summary':\n                    $where[]      = \"`artist`.`summary` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    break;\n                case 'album':\n                    $where[]       = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `artist_map`.`artist_id` IS NOT NULL\";\n                    $parameters    = array_merge($parameters, array($input, $input));\n                    $join['album'] = true;\n                    break;\n                case 'song':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters   = array_merge($parameters, array($input));\n                    $join['song'] = true;\n                    break;\n                case 'album_count':\n                    $group_column = (AmpConfig::get('album_group')) ? '`artist`.`album_group_count`' : '`artist`.`album_count`';\n                    $where[]      = \"($group_column $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'song_count':\n                    $where[]      = \"(`artist`.`song_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'other_user':\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_artist_$other_userid`.`user` = $other_userid AND `favorite_artist_$other_userid`.`object_type` = 'artist'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$other_userid\"))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_artist_$other_userid` ON `artist`.`id` = `favorite_artist_$other_userid`.`object_id` AND `favorite_artist_$other_userid`.`object_type` = 'artist'\"\n                            : \"\";\n                    } else {\n                        $column  = 'id';\n                        $my_type = 'artist';\n                        $where[] = \"`rating_artist_\" . $other_userid . '`.' . $sql_match_operator . \" AND `rating_artist_$other_userid`.`user` = $other_userid AND `rating_artist_$other_userid`.`object_type` = 'artist'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `$my_type`.`$column` AND `rating_\" . $my_type . \"_\" . $user_id . \"`.`user` = $user_id \"\n                            : \"\";\n                    }\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'artist' ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `played_$key` ON `artist`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'catalog':\n                    $where[]         = \"`catalog_se`.`id` $sql_match_operator ?\";\n                    $parameters[]    = $input;\n                    $join['catalog'] = true;\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_album':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]       = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[]  = $input;\n                    $join['album'] = true;\n                    break;\n                case 'mbid_song':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    $join['song'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`id`) AS `dupe_id1`, LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`))) AS `Counting` FROM `artist` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search1` ON `artist`.`id` = `dupe_search1`.`dupe_id1`\";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`id`) AS `dupe_id2`, LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`))) AS `Counting` FROM `artist` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search2` ON `artist`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'possible_duplicate_album':\n                    $where[]                     = \"((`dupe_album_search1`.`dupe_album_id1` IS NOT NULL OR `dupe_album_search2`.`dupe_album_id2` IS NOT NULL))\";\n                    $table['dupe_album_search1'] = \"LEFT JOIN (SELECT `album_artist`, MIN(`id`) AS `dupe_album_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search1` ON `artist`.`id` = `dupe_album_search1`.`album_artist`\";\n                    $table['dupe_album_search2'] = \"LEFT JOIN (SELECT `album_artist`, MAX(`id`) AS `dupe_album_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search2` ON `artist`.`id` = `dupe_album_search2`.`album_artist`\";\n                    break;\n                default:\n                    break;\n            } // switch on ruletype artist\n        } // foreach rule\n\n        $join['catalog']     = array_key_exists('catalog', $join) || $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('song', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['1_song']       = \"LEFT JOIN `song` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song'\";\n        }\n        if (array_key_exists('album', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['4_album_map']  = \"LEFT JOIN `album_map` ON `album_map`.`object_id` = `artist`.`id` AND `artist_map`.`object_type` = `album_map`.`object_type`\";\n            $table['album']        = \"LEFT JOIN `album` ON `album_map`.`album_id` = `album`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_artist` ON `catalog_map_artist`.`object_id` = `artist`.`id` AND `catalog_map_artist`.`object_type` = 'artist'\";\n            $table['3_catalog']     = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `catalog_map_artist`.`catalog_id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1'\";\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('count', $join)) {\n            $table['object_count'] = \"LEFT JOIN (SELECT `object_count`.`object_id`, MAX(`object_count`.`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = 'artist' AND `object_count`.`user`='\" . $user_id . \"' AND `object_count`.`count_type` = 'stream' GROUP BY `object_count`.`object_id`) AS `object_count` ON `object_count`.`object_id` = `artist`.`id`\";\n        }\n        if (array_key_exists('image', $join)) {\n            $table['0_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`artist_id` = `artist`.`id`\";\n            $table['1_song']       = \"LEFT JOIN `song` ON `artist_map`.`artist_id` = `artist`.`id` AND `artist_map`.`object_type` = 'song'\";\n            $where_sql             = \"(\" . $where_sql . \") AND `image`.`object_type`='artist' AND `image`.`size`='original'\";\n        }\n        if ($album_artist) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `artist`.`album_count` > 0\";\n            } else {\n                $where_sql = \"`artist`.`album_count` > 0\";\n            }\n        }\n        if ($song_artist) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `artist`.`song_count` > 0\";\n            } else {\n                $where_sql = \"`artist`.`song_count` > 0\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => \"SELECT DISTINCT(`artist`.`id`), `artist`.`name` FROM `artist`\",\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_song\n     * Handles the generation of the SQL for song searches.\n     * @return array\n     */\n    private function _get_sql_song()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n        $metadata    = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'anywhere':\n                    // 'anywhere' searches song title, song filename, song genre, album title, artist title, label title and song comment\n                    $tag_string   = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    // we want AND NOT and like for this query to really exclude them\n                    if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT'))) {\n                        $where[] = \"NOT ((`artist`.`name` LIKE ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) LIKE ?) OR (`album`.`name` LIKE ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) LIKE ?) OR `song_data`.`comment` LIKE ? OR `song_data`.`label` LIKE ? OR `song`.`file` LIKE ? OR `song`.`title` LIKE ? OR NOT \" . $tag_string . ')';\n                    } else {\n                        $where[] = \"((`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) OR (`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) OR `song_data`.`comment` $sql_match_operator ? OR `song_data`.`label` $sql_match_operator ? OR `song`.`file` $sql_match_operator ? OR `song`.`title` $sql_match_operator ? OR \" . $tag_string . ')';\n                    }\n                    $parameters = array_merge($parameters, array($input, $input, $input, $input, $input, $input, $input, $input));\n                    // join it all up\n                    $join['album']     = true;\n                    $join['artist']    = true;\n                    $join['song_data'] = true;\n                    break;\n                case 'title':\n                    $where[]      = \"`song`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'genre':\n                    $where[]      = \"`song`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[] = $input;\n                    break;\n                case 'album_genre':\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    $where[]        = \"`album`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='album' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[]   = $input;\n                    break;\n                case 'artist_genre':\n                    $where[]         = \"`artist`.`id` IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 AND `tag`.`name` $sql_match_operator ? WHERE `tag_map`.`object_type`='artist' AND `tag`.`id` IS NOT NULL)\";\n                    $parameters[]    = $input;\n                    $join['artist']  = true;\n                    break;\n                case 'no_genre':\n                    $where[] = \"`song`.`id` NOT IN (SELECT `tag_map`.`object_id` FROM `tag_map` LEFT JOIN `tag` ON `tag_map`.`tag_id` = `tag`.`id` AND `tag`.`is_hidden` = 0 WHERE `tag_map`.`object_type`='song' AND `tag`.`id` IS NOT NULL)\";\n                    break;\n                case 'album':\n                    $where[]        = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?)\";\n                    $parameters     = array_merge($parameters, array($input, $input));\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    break;\n                case 'artist':\n                    $where[]        = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters     = array_merge($parameters, array($input, $input));\n                    $join['artist'] = true;\n                    break;\n                case 'album_artist':\n                    $where[]               = \"(`album_artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album_artist`.`prefix`, ''), ' ', `album_artist`.`name`)) $sql_match_operator ?)\";\n                    $parameters            = array_merge($parameters, array($input, $input));\n                    $table['album']        = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    $table['album_artist'] = \"LEFT JOIN `artist` AS `album_artist` ON `album`.`album_artist` = `album_artist`.`id`\";\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`song`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                case 'composer':\n                case 'year':\n                case 'track':\n                case 'catalog':\n                case 'license':\n                    $where[]      = \"`song`.`$rule[0]` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'comment':\n                    $where[]           = \"`song_data`.`comment` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['song_data'] = true;\n                    break;\n                case 'label':\n                    $join['song_data'] = true;\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song_data`.`label` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song_data`.`label` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song_data`.`label` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'lyrics':\n                    $where[]           = \"`song_data`.`lyrics` $sql_match_operator ?\";\n                    $parameters[]      = $input;\n                    $join['song_data'] = true;\n                    break;\n                case 'played':\n                    $where[] = \"`song`.`played` = '$sql_match_operator'\";\n                    break;\n                case 'last_play':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_play', $table)) {\n                        $table['last_play'] = '';\n                    }\n                    $table['last_play'] .= (!strpos((string) $table['last_play'], \"last_play_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`last_play_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'last_skip':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_skip', $table)) {\n                        $table['last_skip'] = '';\n                    }\n                    $table['last_skip'] .= (!strpos((string) $table['last_skip'], \"last_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'skip' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type' \"\n                        : \"\";\n                    $where[] = \"`last_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'last_play_or_skip':\n                    $my_type = 'song';\n                    if (!array_key_exists('last_play_or_skip', $table)) {\n                        $table['last_play_or_skip'] = '';\n                    }\n                    $table['last_play_or_skip'] .= (!strpos((string) $table['last_play_or_skip'], \"last_play_or_skip_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user`, MAX(`date`) AS `date` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` IN ('stream', 'skip') AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`id` = `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`last_play_or_skip_\" . $my_type . \"_\" . $user_id . \"`.`date` $sql_match_operator (UNIX_TIMESTAMP() - ($input * 86400))\";\n                    break;\n                case 'played_times':\n                    $where[]      = \"(`song`.`total_count` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'skipped_times':\n                    $where[]      = \"(`song`.`total_skip` $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'played_or_skipped_times':\n                    $where[]      = \"((`song`.`total_count` + `song`.`total_skip`) $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'play_skip_ratio':\n                    $where[]      = \"(((`song`.`total_count`/`song`.`total_skip`) * 100) $sql_match_operator ?)\";\n                    $parameters[] = $input;\n                    break;\n                case 'myplayed':\n                case 'myplayedalbum':\n                case 'myplayedartist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('myplayed', '', $rule[0]);\n                    $column       = ($looking == '') ? 'id' : $looking;\n                    $my_type      = ($looking == '') ? 'song' : $looking;\n                    $operator_sql = ((int) $sql_match_operator == 0) ? 'IS NULL' : 'IS NOT NULL';\n                    // played once per user\n                    if (!array_key_exists('myplayed', $table)) {\n                        $table['myplayed'] = '';\n                    }\n                    $table['myplayed'] .= (!strpos((string) $table['myplayed'], \"myplayed_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `object_count` WHERE `object_count`.`object_type` = '$my_type' AND `object_count`.`count_type` = 'stream' AND `object_count`.`user`=$user_id GROUP BY `object_id`, `object_type`, `user`) AS `myplayed_\" . $my_type . \"_\" . $user_id . \"` ON `song`.`$column` = `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` AND `myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_type` = '$my_type'\"\n                        : \"\";\n                    $where[] = \"`myplayed_\" . $my_type . \"_\" . $user_id . \"`.`object_id` $operator_sql\";\n                    break;\n                case 'bitrate':\n                    $input        = $input * 1000;\n                    $where[]      = \"`song`.`bitrate` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'rating':\n                    // average ratings only\n                    $where[]          = \"`average_rating`.`avg` $sql_match_operator ?\";\n                    $parameters[]     = $input;\n                    $table['average'] = \"LEFT JOIN (SELECT `object_id`, ROUND(AVG(IFNULL(`rating`.`rating`,0))) AS `avg` FROM `rating` WHERE `rating`.`object_type`='song' GROUP BY `object_id`) AS `average_rating` ON `average_rating`.`object_id` = `song`.`id` \";\n                    break;\n                case 'favorite':\n                    $where[]      = \"`song`.`title` $sql_match_operator ? AND `favorite_song_$user_id`.`user` = $user_id AND `favorite_song_$user_id`.`object_type` = 'song'\";\n                    $parameters[] = $input;\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_song_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_song_$user_id` ON `song`.`id` = `favorite_song_$user_id`.`object_id` AND `favorite_song_$user_id`.`object_type` = 'song'\"\n                        : \"\";\n                    break;\n                case 'favorite_album':\n                    $where[]    = \"(`album`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) $sql_match_operator ?) AND `favorite_album_$user_id`.`user` = $user_id AND `favorite_album_$user_id`.`object_type` = 'album'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_album_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_album_$user_id` ON `album`.`id` = `favorite_album_$user_id`.`object_id` AND `favorite_album_$user_id`.`object_type` = 'album'\"\n                        : \"\";\n                    $join['album'] = true;\n                    break;\n                case 'favorite_artist':\n                    $where[]    = \"(`artist`.`name` $sql_match_operator ? OR LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)) $sql_match_operator ?) AND `favorite_artist_$user_id`.`user` = $user_id AND `favorite_artist_$user_id`.`object_type` = 'artist'\";\n                    $parameters = array_merge($parameters, array($input, $input));\n                    // flag once per user\n                    if (!array_key_exists('favorite', $table)) {\n                        $table['favorite'] = '';\n                    }\n                    $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_artist_$user_id\"))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $user_id) AS `favorite_artist_$user_id` ON `artist`.`id` = `favorite_artist_$user_id`.`object_id` AND `favorite_artist_$user_id`.`object_type` = 'artist'\"\n                        : \"\";\n                    $join['artist'] = true;\n                    break;\n                case 'myrating':\n                case 'albumrating':\n                case 'artistrating':\n                    // combine these as they all do the same thing just different tables\n                    $looking = str_replace('rating', '', $rule[0]);\n                    $column  = ($looking == 'my') ? 'id' : $looking;\n                    $my_type = ($looking == 'my') ? 'song' : $looking;\n                    if ($input == 0 && $sql_match_operator == '>=') {\n                        break;\n                    }\n                    if ($input == 0 && $sql_match_operator == '<') {\n                        $input              = -1;\n                        $sql_match_operator = '=';\n                    }\n                    if ($input == 0 && $sql_match_operator == '<>') {\n                        $input              = 1;\n                        $sql_match_operator = '>=';\n                    }\n                    if (($input == 0 && $sql_match_operator != '>') || ($input == 1 && $sql_match_operator == '<')) {\n                        $where[] = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL\";\n                    } elseif (in_array($sql_match_operator, array('<>', '<', '<=', '!='))) {\n                        $where[]      = \"(`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ? OR `rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` IS NULL)\";\n                        $parameters[] = $input;\n                    } else {\n                        $where[]      = \"`rating_\" . $my_type . \"_\" . $user_id . \"`.`rating` $sql_match_operator ?\";\n                        $parameters[] = $input;\n                    }\n                    // rating once per user\n                    if (!array_key_exists('rating', $table)) {\n                        $table['rating'] = '';\n                    }\n                    $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $user_id))\n                        ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `rating` FROM `rating` WHERE `user` = $user_id AND `object_type`='$my_type') AS `rating_\" . $my_type . \"_\" . $user_id . \"` ON `rating_\" . $my_type . \"_\" . $user_id . \"`.`object_id` = `song`.`$column`\"\n                        : \"\";\n                    break;\n                case 'other_user':\n                case 'other_user_album':\n                case 'other_user_artist':\n                    // combine these as they all do the same thing just different tables\n                    $looking      = str_replace('other_user_', '', $rule[0]);\n                    $column       = ($looking == 'other_user') ? 'id' : $looking;\n                    $my_type      = ($looking == 'other_user') ? 'song' : $looking;\n                    $other_userid = $input;\n                    if ($sql_match_operator == 'userflag') {\n                        $where[] = \"`favorite_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid AND `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\";\n                        // flag once per user\n                        if (!array_key_exists('favorite', $table)) {\n                            $table['favorite'] = '';\n                        }\n                        $table['favorite'] .= (!strpos((string) $table['favorite'], \"favorite_\" . $my_type . \"_\" . $other_userid))\n                            ? \"LEFT JOIN (SELECT `object_id`, `object_type`, `user` FROM `user_flag` WHERE `user` = $other_userid) AS `favorite_\" . $my_type . \"_\" . $other_userid . \"` ON `song`.`$column` = `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_id` AND `favorite_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\"\n                            : \"\";\n                    } else {\n                        $unrated = ($sql_match_operator == 'unrated');\n                        $where[] = ($unrated) ? \"`song`.`$column` NOT IN (SELECT `object_id` FROM `rating` WHERE `object_type` = '$my_type' AND `user` = $other_userid)\" : \"`rating_\" . $my_type . \"_\" . $other_userid . \"`.$sql_match_operator AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_type` = '$my_type'\";\n                        // rating once per user\n                        if (!array_key_exists('rating', $table)) {\n                            $table['rating'] = '';\n                        }\n                        $table['rating'] .= (!strpos((string) $table['rating'], \"rating_\" . $my_type . \"_\" . $other_userid))\n                            ? \"LEFT JOIN `rating` AS `rating_\" . $my_type . \"_\" . $other_userid . \"` ON `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_type`='$my_type' AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`object_id` = `song`.`$column` AND `rating_\" . $my_type . \"_\" . $other_userid . \"`.`user` = $other_userid \"\n                            : \"\";\n                    }\n                    break;\n                case 'playlist_name':\n                    $join['playlist']      = true;\n                    $join['playlist_data'] = true;\n                    $where[]               = \"`playlist`.`name` $sql_match_operator ?\";\n                    $parameters[]          = $input;\n                    break;\n                case 'playlist':\n                    $where[]      = \"`song`.`id` $sql_match_operator IN (SELECT `object_id` FROM `playlist_data` WHERE `playlist_data`.`playlist` = ? AND `playlist_data`.`object_type` = 'song')\";\n                    $parameters[] = $input;\n                    break;\n                case 'smartplaylist':\n                    //debug_event(self::class, '_get_sql_song: SUBSEARCH ' . $input, 5);\n                    $subsearch  = new Search($input, 'song', $this->search_user);\n                    $results    = $subsearch->get_items();\n                    $itemstring = '';\n                    if (count($results) > 0) {\n                        foreach ($results as $item) {\n                            $itemstring .= $item['object_id'] . ',';\n                        }\n                        $where[]  = \"`song`.`id` $sql_match_operator IN (\" . substr($itemstring, 0, -1) . \")\";\n                    }\n                    break;\n                case 'added':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`song`.`addition_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'updated':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`song`.`update_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'recent_played':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`played_$key`.`object_id` IS NOT NULL\";\n                    $table['played_' . $key] = \"LEFT JOIN (SELECT `object_id` FROM `object_count` WHERE `object_type` = 'song' ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `played_$key` ON `song`.`id` = `played_$key`.`object_id`\";\n                    break;\n                case 'recent_added':\n                    $key                       = md5($input . $sql_match_operator);\n                    $where[]                   = \"`addition_time_$key`.`id` IS NOT NULL\";\n                    $table['addition_' . $key] = \"LEFT JOIN (SELECT `id` FROM `song` ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `addition_time_$key` ON `song`.`id` = `addition_time_$key`.`id`\";\n                    break;\n                case 'recent_updated':\n                    $key                     = md5($input . $sql_match_operator);\n                    $where[]                 = \"`update_time_$key`.`id` IS NOT NULL\";\n                    $table['update_' . $key] = \"LEFT JOIN (SELECT `id` FROM `song` ORDER BY $sql_match_operator DESC LIMIT \" . (int)$input . \") AS `update_time_$key` ON `song`.`id` = `update_time_$key`.`id`\";\n                    break;\n                case 'mbid':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`song`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]      = \"`song`.`mbid` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'mbid_album':\n                    $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`album`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]        = \"`album`.`mbid` $sql_match_operator ?\";\n                    $parameters[]   = $input;\n                    break;\n                case 'mbid_artist':\n                    if (!$input || $input == '%%' || $input == '%') {\n                        if (in_array($sql_match_operator, array('=', 'LIKE', 'SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NULL\";\n                            break;\n                        }\n                        if (in_array($sql_match_operator, array('!=', 'NOT LIKE', 'NOT SOUNDS LIKE'))) {\n                            $where[]      = \"`artist`.`mbid` IS NOT NULL\";\n                            break;\n                        }\n                    }\n                    $where[]        = \"`artist`.`mbid` $sql_match_operator ?\";\n                    $parameters[]   = $input;\n                    $join['artist'] = true;\n                    break;\n                case 'possible_duplicate':\n                    $where[]               = \"(`dupe_search1`.`dupe_id1` IS NOT NULL OR `dupe_search2`.`dupe_id2` IS NOT NULL)\";\n                    $table['dupe_search1'] = \"LEFT JOIN (SELECT MIN(`song`.`id`) AS `dupe_id1`, CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`) AS `fullname`, COUNT(CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`)) AS `counting` FROM `song` LEFT JOIN `album` ON `song`.`album` = `album`.`id` LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search1` ON `song`.`id` = `dupe_search1`.`dupe_id1` \";\n                    $table['dupe_search2'] = \"LEFT JOIN (SELECT MAX(`song`.`id`) AS `dupe_id2`, CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`) AS `fullname`, COUNT(CONCAT(LTRIM(CONCAT(COALESCE(`artist`.`prefix`, ''), ' ', `artist`.`name`)), LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `album`.`disk`, `song`.`title`)) AS `counting` FROM `song` LEFT JOIN `album` ON `song`.`album` = `album`.`id` LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song' LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id` GROUP BY `fullname` HAVING `Counting` > 1) AS `dupe_search2` ON `song`.`id` = `dupe_search2`.`dupe_id2`\";\n                    break;\n                case 'possible_duplicate_album':\n                    $where[]                     = \"((`dupe_album_search1`.`dupe_album_id1` IS NOT NULL OR `dupe_album_search2`.`dupe_album_id2` IS NOT NULL))\";\n                    $table['dupe_album_search1'] = \"LEFT JOIN (SELECT `album_artist`, MIN(`id`) AS `dupe_album_id1`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search1` ON `album`.`id` = `dupe_album_search1`.`dupe_album_id1`\";\n                    $table['dupe_album_search2'] = \"LEFT JOIN (SELECT `album_artist`, MAX(`id`) AS `dupe_album_id2`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)) AS `fullname`, COUNT(LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`))) AS `Counting` FROM `album` GROUP BY `album_artist`, LTRIM(CONCAT(COALESCE(`album`.`prefix`, ''), ' ', `album`.`name`)), `disk`, `year`, `release_type`, `release_status` HAVING `Counting` > 1) AS `dupe_album_search2` ON `album`.`id` = `dupe_album_search2`.`dupe_album_id2`\";\n                    $join['album']               = true;\n                    break;\n                case 'orphaned_album':\n                    $where[] = \"`song`.`album` IN (SELECT `album_id` FROM `album_map` WHERE `album_id` NOT IN (SELECT `id` from `album`))\";\n                    break;\n                case 'metadata':\n                    $field = (int)$rule[3];\n                    if ($sql_match_operator === '=' && strlen($input) == 0) {\n                        $where[] = \"NOT EXISTS (SELECT NULL FROM `metadata` WHERE `metadata`.`object_id` = `song`.`id` AND `metadata`.`field` = {$field})\";\n                    } else {\n                        $parsedInput = is_numeric($input) ? $input : '\"' . $input . '\"';\n                        if (!array_key_exists($field, $metadata)) {\n                            $metadata[$field] = array();\n                        }\n                        $metadata[$field][] = \"`metadata`.`data` $sql_match_operator ?\";\n                        $parameters[]       = $parsedInput;\n                    }\n                    break;\n                default:\n                    break;\n            } // switch on ruletype song\n        } // foreach over rules\n\n        // translate metadata queries into sql for each field\n        foreach ($metadata as $metadata_field => $metadata_queries) {\n            $metadata_sql = \"EXISTS (SELECT NULL FROM `metadata` WHERE `metadata`.`object_id` = `song`.`id` AND `metadata`.`field` = {$metadata_field} AND (\";\n            $metadata_sql .= implode(\" $sql_logic_operator \", $metadata_queries);\n            $where[] = $metadata_sql . '))';\n        }\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        // now that we know which things we want to JOIN...\n        if (array_key_exists('song_data', $join)) {\n            $table['song_data'] = \"LEFT JOIN `song_data` ON `song`.`id` = `song_data`.`song_id`\";\n        }\n        if (array_key_exists('playlist_data', $join)) {\n            $table['playlist_data'] = \"LEFT JOIN `playlist_data` ON `song`.`id` = `playlist_data`.`object_id` AND `playlist_data`.`object_type`='song'\";\n            if (array_key_exists('playlist', $join)) {\n                $table['playlist'] = \"LEFT JOIN `playlist` ON `playlist_data`.`playlist` = `playlist`.`id`\";\n            }\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_song` ON `catalog_map_song`.`object_id` = `song`.`id` AND `catalog_map_song`.`object_type` = 'song' AND `catalog_map_song`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if (array_key_exists('artist', $join)) {\n            $table['3_artist_map'] = \"LEFT JOIN `artist_map` ON `artist_map`.`object_id` = `song`.`id` AND `artist_map`.`object_type` = 'song'\";\n            $table['4_artist']     = \"LEFT JOIN `artist` ON `artist_map`.`artist_id` = `artist`.`id`\";\n        }\n        if (array_key_exists('album', $join)) {\n            $table['album'] = \"LEFT JOIN `album` ON `song`.`album` = `album`.`id`\";\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`song`.`id`), `song`.`file` FROM `song`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_video\n     *\n     * Handles the generation of the SQL for video searches.\n     * @return array\n     */\n    private function _get_sql_video()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'file':\n                    $where[]      = \"`video`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `video`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `video`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `video`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_video` ON `catalog_map_video`.`object_id` = `video`.`id` AND `catalog_map_video`.`object_type` = 'video' AND `catalog_map_video`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`video`.`id`), `video`.`file` FROM `video`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_playlist\n     *\n     * Handles the generation of the SQL for playlist searches.\n     * @return array\n     */\n    private function _get_sql_playlist()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            $where[] = \"(`playlist`.`type` = 'public' OR `playlist`.`user`=\" . $user_id . \")\";\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`playlist`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'type':\n                    $where[]      = \"`playlist`.`type` $sql_match_operator ?\";\n                    $parameters[] = ($input == 1)\n                        ? 'private'\n                        : 'public';\n                    break;\n                case 'owner':\n                    $where[]      = \"`playlist`.`user` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        // always join the table data\n        $table['0_playlist_data'] = \"LEFT JOIN `playlist_data` ON `playlist_data`.`playlist` = `playlist`.`id`\";\n        if ($join['catalog']) {\n            $table['0_song']    = \"LEFT JOIN `song` ON `song`.`id` = `playlist_data`.`object_id`\";\n            $where_sql          = \"(\" . $where_sql . \") AND `playlist_data`.`object_type` = 'song'\";\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`playlist`.`id`), `playlist`.`name` FROM `playlist`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_podcast\n     *\n     * Handles the generation of the SQL for podcast_episode searches.\n     * @return array\n     */\n    private function _get_sql_podcast()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`podcast`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'podcast_episode':\n                case 'podcast_episode_title':\n                    $where[]                 = \"`podcast_episode`.`title` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'time':\n                    $input                   = $input * 60;\n                    $where[]                 = \"`podcast_episode`.`time` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'state':\n                    $where[]      = \"`podcast_episode`.`state` $sql_match_operator ?\";\n                    switch ($input) {\n                        case 0:\n                            $parameters[] = 'skipped';\n                            break;\n                        case 1:\n                            $parameters[] = 'pending';\n                            break;\n                        case 2:\n                            $parameters[] = 'completed';\n                    }\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'pubdate':\n                    $input                   = strtotime((string) $input);\n                    $where[]                 = \"`podcast_episode`.`pubdate` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'added':\n                    $input                   = strtotime((string) $input);\n                    $where[]                 = \"`podcast_episode`.`addition_time` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                case 'file':\n                    $where[]                 = \"`podcast_episode`.`file` $sql_match_operator ?\";\n                    $parameters[]            = $input;\n                    $join['podcast_episode'] = true;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('podcast_episode', $join)) {\n            $table['0_podcast'] = \"LEFT JOIN `podcast_episode` ON `podcast_episode`.`podcast` = `podcast`.`id`\";\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `podcast`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`podcast`.`id`), `podcast`.`title` FROM `podcast`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_podcast_episode\n     *\n     * Handles the generation of the SQL for podcast_episode searches.\n     * @return array\n     */\n    private function _get_sql_podcast_episode()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $group       = array();\n        $having      = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`podcast_episode`.`title` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'podcast':\n                case 'podcast_title':\n                    $where[]         = \"`podcast`.`title` $sql_match_operator ?\";\n                    $parameters[]    = $input;\n                    $join['podcast'] = true;\n                    break;\n                case 'time':\n                    $input        = $input * 60;\n                    $where[]      = \"`podcast_episode`.`time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'state':\n                    $where[]      = \"`podcast_episode`.`state` $sql_match_operator ?\";\n                    switch ($input) {\n                        case 0:\n                            $parameters[] = 'skipped';\n                            break;\n                        case 1:\n                            $parameters[] = 'pending';\n                            break;\n                        case 2:\n                            $parameters[] = 'completed';\n                    }\n                    break;\n                case 'pubdate':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`podcast_episode`.`pubdate` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'added':\n                    $input        = strtotime((string) $input);\n                    $where[]      = \"`podcast_episode`.`addition_time` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'file':\n                    $where[]      = \"`podcast_episode`.`file` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n        $join['catalog_map'] = $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if (array_key_exists('podcast', $join)) {\n            $table['0_podcast'] = \"LEFT JOIN `podcast` ON `podcast`.`id` = `podcast_episode`.`podcast`\";\n        }\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `podcast_episode`.`catalog`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        ksort($table);\n        $table_sql  = implode(' ', $table);\n        $group_sql  = implode(',', $group);\n        $having_sql = implode(\" $sql_logic_operator \", $having);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`podcast_episode`.`id`), `podcast_episode`.`pubdate` FROM `podcast_episode`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => $group_sql,\n            'having_sql' => $having_sql,\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_label\n     *\n     * Handles the generation of the SQL for label searches.\n     * @return array\n     */\n    private function _get_sql_label()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`label`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'category':\n                    $where[]      = \"`label`.`category` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($catalog_disable || $catalog_filter) {\n            $table['0_label_asso']  = \"LEFT JOIN `label_asso` ON `label_asso`.`label` = `label`.`id`\";\n            $table['1_artist']      = \"LEFT JOIN `artist` ON `label_asso`.`artist` = `artist`.`id`\";\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_artist` ON `catalog_map_artist`.`object_id` = `artist`.`id` AND `catalog_map_artist`.`object_type` = 'artist'\";\n        }\n\n        if ($join['catalog_map']) {\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_map_artist`.`object_type` = 'artist' AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_map_artist`.`object_type` = 'artist' AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n        if ($join['catalog']) {\n            $table['3_catalog'] = \"LEFT JOIN `catalog`AS `catalog_se` ON `catalog_map_artist`.`catalog_id` = `catalog_se`.`id`\";\n            if ($catalog_disable) {\n                if (!empty($where_sql)) {\n                    $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1'\";\n                } else {\n                    $where_sql = \"`catalog_se`.`enabled` = '1'\";\n                }\n            }\n        }\n        $table_sql = implode(' ', $table);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`label`.`id`), `label`.`name` FROM `label`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => $table_sql,\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_tag\n     *\n     * Handles the generation of the SQL for tag (genre) searches.\n     * @return array\n     */\n    private function _get_sql_tag()\n    {\n        $sql_logic_operator = $this->logic_operator;\n        $user_id            = $this->search_user->id ?? 0;\n        $catalog_disable    = AmpConfig::get('catalog_disable');\n        $catalog_filter     = AmpConfig::get('catalog_filter');\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'title':\n                    $where[]      = \"`tag`.`name` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                case 'category':\n                    $where[]      = \"`tag`.`category` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $join['catalog_map'] = $catalog_filter;\n        $join['catalog']     = $catalog_disable || $catalog_filter;\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n\n        if ($join['catalog']) {\n            $table['1_catalog'] = \"LEFT JOIN `catalog` AS `catalog_se` ON `catalog_se`.`id` = `song`.`catalog`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            } else {\n                $where_sql = \"`catalog_se`.`enabled` = '1' AND `song`.`enabled` = 1\";\n            }\n        }\n        if ($join['catalog_map']) {\n            $table['2_catalog_map'] = \"LEFT JOIN `catalog_map` AS `catalog_map_album` ON `catalog_map_album`.`object_id` = `album`.`id` AND `catalog_map_album`.`object_type` = 'album' AND `catalog_map_album`.`catalog_id` = `catalog_se`.`id`\";\n            if (!empty($where_sql)) {\n                $where_sql = \"(\" . $where_sql . \") AND `catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            } else {\n                $where_sql = \"`catalog_se`.`id` IN (SELECT `catalog_id` FROM `catalog_filter_group_map` INNER JOIN `user` ON `user`.`catalog_filter_group` = `catalog_filter_group_map`.`group_id` WHERE `user`.`id` = $user_id AND `catalog_filter_group_map`.`enabled`=1)\";\n            }\n        }\n\n        return array(\n            'base' => 'SELECT DISTINCT(`tag`.`id`) FROM `tag`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => '',\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * _get_sql_user\n     *\n     * Handles the generation of the SQL for user searches.\n     * @return array\n     */\n    private function _get_sql_user()\n    {\n        $sql_logic_operator = $this->logic_operator;\n\n        $where       = array();\n        $table       = array();\n        $join        = array();\n        $parameters  = array();\n\n        foreach ($this->rules as $rule) {\n            $type     = $this->_get_rule_type($rule[0]);\n            $operator = array();\n            if (!$type) {\n                continue;\n            }\n            foreach ($this->basetypes[$type] as $op) {\n                if ($op['name'] == $rule[1]) {\n                    $operator = $op;\n                    break;\n                }\n            }\n            $input              = $this->_filter_input($rule[2], $type, $operator);\n            $sql_match_operator = $operator['sql'] ?? '';\n\n            switch ($rule[0]) {\n                case 'username':\n                    $where[]      = \"`user`.`username` $sql_match_operator ?\";\n                    $parameters[] = $input;\n                    break;\n                default:\n                    break;\n            } // switch on ruletype\n        } // foreach rule\n\n        $where_sql = implode(\" $sql_logic_operator \", $where);\n        ksort($table);\n\n        return array(\n            'base' => 'SELECT DISTINCT(`user`.`id`), `user`.`username` FROM `user`',\n            'join' => $join,\n            'where' => $where,\n            'where_sql' => $where_sql,\n            'table' => $table,\n            'table_sql' => '',\n            'group_sql' => '',\n            'having_sql' => '',\n            'parameters' => $parameters\n        );\n    }\n\n    /**\n     * year_search\n     *\n     * Build search rules for year -> year searching.\n     * @param $fromYear\n     * @param $toYear\n     * @param $size\n     * @param $offset\n     * @return array\n     */\n    public static function year_search($fromYear, $toYear, $size, $offset)\n    {\n        $search           = array();\n        $search['limit']  = $size;\n        $search['offset'] = $offset;\n        $search['type']   = \"album\";\n        $count            = 0;\n        if ($fromYear) {\n            $search['rule_' . $count . '_input']    = $fromYear;\n            $search['rule_' . $count . '_operator'] = 0;\n            $search['rule_' . $count]               = \"original_year\";\n            ++$count;\n        }\n        if ($toYear) {\n            $search['rule_' . $count . '_input']    = $toYear;\n            $search['rule_' . $count . '_operator'] = 1;\n            $search['rule_' . $count]               = \"original_year\";\n            ++$count;\n        }\n\n        return $search;\n    }\n\n    /**\n     * @deprecated\n     */\n    private function getLicenseRepository(): LicenseRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(LicenseRepositoryInterface::class);\n    }\n\n    /**\n     * @deprecated inject dependency\n     */\n    private function getUserRepository(): UserRepositoryInterface\n    {\n        global $dic;\n\n        return $dic->get(UserRepositoryInterface::class);\n    }\n}\n"], "filenames": ["src/Module/Statistics/Stats.php", "src/Repository/Model/Search.php"], "buggy_code_start_loc": [804, 1940], "buggy_code_end_loc": [820, 2889], "fixing_code_start_loc": [804, 1940], "fixing_code_end_loc": [820, 2889], "type": "CWE-89", "message": "SQL Injection in GitHub repository ampache/ampache prior to 5.5.7,develop.", "other": {"cve": {"id": "CVE-2023-0771", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-10T01:15:10.453", "lastModified": "2023-02-16T18:09:45.910", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "SQL Injection in GitHub repository ampache/ampache prior to 5.5.7,develop."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ampache:ampache:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.5.7", "matchCriteriaId": "AA237F19-986D-4470-86E7-CEA9F0BBE2C3"}]}]}], "references": [{"url": "https://github.com/ampache/ampache/commit/c456e66ef6fd8d11390181a40c66910ae01fbf4c", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/2493f350-271b-4c38-9e1d-c8fa189c5ce1", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ampache/ampache/commit/c456e66ef6fd8d11390181a40c66910ae01fbf4c"}}