{"buggy_code": ["<?php declare(strict_types=1);\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace FOSSBilling;\n\nclass ErrorPage\n{\n    public function __construct()\n    {\n        /* If the __trans function is undefined, this probably means we experienced an unrecoverable error during the initialization of FOSSBilling.\n         * As a workaround, we define a \"polyfill\" for it here which just returns the original (english) string, handling placeholders in the process.\n         * This allows us to have translation functionality in our error pages, while also handling cases where they aren't setup.\n         */\n        if (!function_exists('__trans')) {\n            function __trans(string $msgid, array $values = null)\n            {\n                if (is_array($values)) {\n                    $msgid = strtr($msgid, $values);\n                }\n\n                return $msgid;\n            }\n        }\n    }\n\n    /**\n     * Returns the list of error codes and their specialized messages. All Error code parameters are optional.\n     *\n     * @return array\n     */\n    private function getCodes(): array\n    {\n        return [\n            '1' => [\n                'title' => __trans('Unable to find Composer Packages'),\n                'message' => 'The composer packages appear to be missing. This shouldn\\'t happen if you are using a release version of FOSSBilling. If you are developer, you will need to install dependencies using :code.', [':code' => '<code>composer install</code>'],\n                'link' => [\n                    'label' => __trans('View more info on the composer website'),\n                    'href' => 'https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies',\n                ],\n            ],\n            '2' => [\n                'message' => __trans('For security reasons, you must delete the installation directory before you can use FOSSBilling. :code', [':code' => '(<code>/install</code>)']),\n                'link' => [\n                    'label' => __trans('View more info on the Getting Started guide'),\n                    'href' => 'https://fossbilling.org/docs/getting-started/shared#remove-the-installer',\n                ]\n            ],\n            '3' => [\n                'title' => __trans('Your Configuration is Empty'),\n                'message' => __trans('Your FOSSBilling configuration seems to either be empty or non-existent. You may need to re-install FOSSBilling, or re-create the :code file based on the example config.', [':code' => '<code>config.php</code>']),\n                'link' => [\n                    'label' => __trans('See the example config.'),\n                    'href' => 'https://github.com/FOSSBilling/FOSSBilling/blob/main/src/config-sample.php',\n                ]\n            ],\n            '4' => [\n                'title' => __trans('Migration is required'),\n                'message' => __trans('Legacy BoxBilling or FOSSBilling preview files have been found. The file structure within FOSSBilling, along with the configuration format, has since changed. :lineBreak See the migration guide for assistance in migrating to the latest version of FOSSBilling.', [':lineBreak' => '<br>']),\n                'link' => [\n                    'label' => __trans('Check the migration guide.'),\n                    'href' => 'https://fossbilling.org/docs/getting-started/migrate-from-boxbilling',\n                ]\n            ],\n            '5' => [\n                'title' => __trans(\"Missing .htaccess file\"),\n                'message' => __trans(\"You appear to be running an Apache or LiteSpeed based webserver without a valid :code file. Please create one using the default FOSSBilling .htaccess file.\", [':code', '<b><em>.htaccess</em></b>']),\n                'link' => [\n                    'label' => __trans(\"Check the default .htaccess\"),\n                    'href' => 'https://github.com/FOSSBilling/FOSSBilling/blob/main/src/.htaccess',\n                ]\n            ],\n        ];\n    }\n\n    /* List of code categories. The \"start\" and \"end\" values are considered valid for a category.\n     * (Example: an error code of 50 will match the \"FOSSBilling Loader\" category)\n     */\n    private array $codeCategories = [\n        'FOSSBilling Loader' => [\n            'start' => 1,\n            'end' => 50,\n        ],\n        'HTTP Error Codes' => [\n            'start' => 400,\n            'end' => 599,\n        ],\n    ];\n\n    /**\n     * Gets info for a specified error code, using placeholders for anything undefined.\n     *\n     * @param int $code The error code\n     * @return array\n     */\n    private function getCodeInfo(int $code): array\n    {\n        $errorDetails = [\n            'title' => __trans('An error has occurred.'),\n            'link' => [\n                'label' => __trans('View the FOSSBilling documentation'),\n                'href' => 'https://fossbilling.org/docs',\n            ],\n            'category' => __trans('None')\n        ];\n\n        $codes = $this->getCodes();\n\n        if (key_exists($code, $codes)) {\n            $codeInfo = $codes[$code];\n            $errorDetails = array_merge($errorDetails, $codeInfo);\n        }\n\n        $errorDetails['category'] = 'Generic';\n        foreach ($this->codeCategories as $categoryName => $categoryRange) {\n            if ($code >= $categoryRange['start'] && $code <= $categoryRange['end']) {\n                $errorDetails['category'] = $categoryName;\n                break;\n            }\n        }\n\n        return $errorDetails;\n    }\n\n    /**\n     * @param int $code Error code\n     * @param string $message The original exception message\n     * @return never\n     */\n    public function generatePage(int $code, string $message)\n    {\n        $error = $this->getCodeInfo($code);\n        $error['message'] ??= __trans('Uh-oh! You\\'ve received a generic error message: :errorMessage', [':errorMessage' => '<code>' . $message . '</code>']);\n\n        $page = '\n        <!DOCTYPE html>\n        <html>\n            <head>\n            <title>FOSSBilling Error | ' . $error['title'] . '</title>\n            <style>\n            body {\n                background-color: #222;\n                color: #fff;\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n                font-size: 16px;\n                line-height: 1.5;\n                margin: 0;\n                padding: 0;\n                text-align: left;\n            }\n\n            .container {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100vh;\n            }\n\n            .error-container {\n                width: 75%;\n                background-color: #313131;\n                border-radius: 25px;\n                padding: 1%;\n            }\n\n            .error-title {\n                font-size: 3.75rem;\n                font-weight: 600;\n                margin-bottom: 0px;\n            }\n\n            .error-code {\n                font-size: 1rem;\n                font-weight: 200;\n                margin: 0px;\n            }\n\n            .error-category {\n                font-size: 1rem;\n                font-weight: 200;\n                margin: 0px;\n            }\n\n            .error-message {\n                font-size: 1.25rem;\n                margin-bottom: 30px;\n                line-height: 1.8;\n            }\n\n            code {\n                background-color: #f2f2f2;\n                color: #333;\n                border-radius: 3px;\n            }\n\n            .footer {\n                color: #fff;\n                padding: 5px;\n                text-align: center;\n                font-size: 14px;\n            }\n\n            .footer a {\n                color: #fff;\n                text-decoration: none;\n                margin: 0 10px;\n            }\n\n            .footer a:hover {\n                text-decoration: underline;\n            }\n\n            a {\n                color: #3291ff;\n            }\n\n            a:visited {\n                color: inherit;\n                text-decoration: none;\n            }\n\n            a:hover {\n                text-decoration: underline;\n            }\n\n            .button {\n                background-color: #3291ff;\n                border: none;\n                color: #fff;\n                padding: 10px 20px;\n                border-radius: 5px;\n                font-size: 15px;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                text-decoration: none;\n            }\n\n            .button:hover {\n                background-color: #3d9dff;\n                text-decoration: none;\n            }\n\n            </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                <div class=\"error-container\">\n                    <p class=\"error-title\">' . $error['title'] . '</p>\n                    <p class=\"error-code\">' . __trans('Error Code: #:number', [':number' => $code]) . '</p>\n                    <p class=\"error-category\">' . __trans('Component: :category', [':category' => $error['category']]) . '</p>\n                    <p class=\"error-message\" id=\"specialized\">' . $error['message'] . '</p>\n                    <p class=\"error-message\" id=\"original\" style=\"display: none;\">' . $message . '</p>\n\n                    <div class=\"link-container\">\n                        <button id=\"toggle\" class=\"button\" onclick=\"toggle()\">' . __trans(\"Show original message\") . '</button>\n                        <a class=\"button\" target=\"_blank\" href=\"' . $error['link']['href'] . '\">' . $error['link']['label'] . '</a>\n                    </div>\n\n                    <div class=\"footer\" style=\"clear:both\">\n                        <hr>\n                        <p>Powered By FOSSBilling</p>\n                        <p>\n                            <a href=\"https://github.com/fossbilling/fossbilling\">Source code</a> |\n                            <a href=\"https://fossbilling.org/discord\">Discord</a> |\n                            <a href=\"https://fossbilling.org/docs\">Documentation</a> |\n                            <a href=\"https://forum.fossbilling.com/\">Forum</a> |\n                            <a href=\"https://opencollective.com/FOSSBilling\">Donate</a>\n                        </p>\n                    </div>\n                </div>\n                </div>\n                <script>\n                    function toggle() {\n                        var og = document.getElementById(\"original\");\n                        var specialized = document.getElementById(\"specialized\");\n\n                        if (og.style.display === \"none\") {\n                            og.style.display = \"block\";\n                            specialized.style.display = \"none\";\n                            document.querySelector(\"#toggle\").innerHTML = \"' . __trans(\"Show specialized message\") . '\";\n                        } else {\n                            og.style.display = \"none\";\n                            specialized.style.display = \"block\";\n                            document.querySelector(\"#toggle\").innerHTML = \"' . __trans(\"Show original message\") . '\";\n                        }\n                    }\n                </script>\n            </body>\n        </html>';\n        echo $page;\n        die();\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Whoops\\Handler\\PrettyPageHandler;\nuse Whoops\\Run;\n\ndefined('APPLICATION_ENV') || define('APPLICATION_ENV', getenv('APPLICATION_ENV') ?: 'production');\nconst PATH_ROOT = __DIR__;\nconst PATH_VENDOR = PATH_ROOT . DIRECTORY_SEPARATOR . 'vendor';\nconst PATH_LIBRARY = PATH_ROOT . DIRECTORY_SEPARATOR . 'library';\nconst PATH_THEMES = PATH_ROOT . DIRECTORY_SEPARATOR . 'themes';\nconst PATH_MODS = PATH_ROOT . DIRECTORY_SEPARATOR . 'modules';\nconst PATH_LANGS = PATH_ROOT . DIRECTORY_SEPARATOR . 'locale';\nconst PATH_UPLOADS = PATH_ROOT . DIRECTORY_SEPARATOR . 'uploads';\nconst PATH_DATA = PATH_ROOT . DIRECTORY_SEPARATOR . 'data';\nconst PATH_CONFIG = PATH_ROOT . DIRECTORY_SEPARATOR . 'config.php';\n\n/*\n * Check configuration exists, and is valid.\n */\nfunction checkConfig()\n{\n    $filesystem = new Filesystem();\n\n    $base_url = 'http' . ((isset($_SERVER['HTTPS']) && ('on' === $_SERVER['HTTPS'] || 1 == $_SERVER['HTTPS'])) || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && 'https' === $_SERVER['HTTP_X_FORWARDED_PROTO']) ? 's' : '') . '://' . ($_SERVER['HTTP_HOST'] ?? '');\n    $base_url .= rtrim(dirname($_SERVER['SCRIPT_NAME']), '/');\n\n    // Check if configuration is available, and redirect to installer if not.\n    if (!$filesystem->exists(PATH_CONFIG)) {\n        if ($filesystem->exists('install/index.php')) {\n            header(\"Location: \" . $base_url . '/install/index.php', true, 307);\n        } else {\n            throw new Exception(\"The FOSSBilling configuration file is empty or invalid.\", 3);\n        }\n    }\n}\n\n/*\n * Check if the installer is present.\n */\nfunction checkInstaller()\n{\n    $filesystem = new Filesystem();\n\n    // Check if /install directory still exists after installation has been completed.\n    if ($filesystem->exists(PATH_CONFIG) && $filesystem->exists('install/index.php')) {\n        throw new Exception('For security reasons, you have to delete the install directory before you can use FOSSBilling.', 2);\n    }\n}\n\n/*\n * Check if any legacy BoxBilling/FOSSBilling files are present.\n */\nfunction checkLegacyFiles()\n{\n    $filesystem = new Filesystem();\n\n    // Detect old files and folders from legacy BoxBilling or FOSSBilling installations.\n    $toCheck = ['bb-data', 'bb-library', 'bb-locale', 'bb-modules', 'bb-themes', 'bb-uploads', 'bb-cron.php', 'bb-di.php', 'bb-load.php', 'bb-config.php'];\n    $legacyFound = null;\n    foreach ($toCheck as $path) {\n        if ($filesystem->exists($path)) {\n            $legacyFound = true;\n            break;\n        }\n    }\n\n    // Show an error if any legacy files/folders found.\n    if ($legacyFound) {\n        throw new Exception('Migration from BoxBilling is required.', 4);\n    }\n}\n\n/*\n * Check hard requirements such as PHP version, Composer packages, etc.\n */\nfunction checkRequirements()\n{\n    // Check for Composer packages / vendor folder.\n    if (!file_exists(PATH_VENDOR)) {\n        throw new Exception(\"The composer packages are missing.\", 1);\n    }\n}\n\n/*\n * Check if SSL required, and enforce if so.\n */\nfunction checkSSL()\n{\n    $config = include PATH_CONFIG;\n    if (isset($config['security']['force_https']) && $config['security']['force_https'] && 'cli' !== PHP_SAPI) {\n        $isHTTPS = false;\n\n        if (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off') {\n            $isHTTPS = true;\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) == 'https') {\n            $isHTTPS = true;\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_SSL']) && strtolower($_SERVER['HTTP_X_FORWARDED_SSL']) == 'on') {\n            $isHTTPS = true;\n        }\n\n        if (!$isHTTPS) {\n            $url = 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];\n            header('Location: ' . $url);\n            exit;\n        }\n    }\n}\n\n/*\n * Check the web server config.\n */\nfunction checkWebServer()\n{\n    $filesystem = new Filesystem();\n\n    // Check for missing required .htaccess on Apache and Apache-compatible web servers.\n    $isApache = function_exists('apache_get_version') ? true : false;\n    $serverSoftware = $_SERVER['SERVER_SOFTWARE'] ?? '';\n    if ($isApache or (stripos($serverSoftware, 'apache') !== false) or (stripos($serverSoftware, 'litespeed')) !== false) {\n        if (!$filesystem->exists('.htaccess')) {\n            throw new Exception('Missing .htaccess file', 5);\n        }\n    }\n}\n\n/*\n * Error handler.\n */\nfunction errorHandler(int $number, string $message, string $file, int $line)\n{\n    if (E_RECOVERABLE_ERROR === $number) {\n        exceptionHandler(new ErrorException($message, $number, 0, $file, $line));\n    } else {\n        error_log($number . ' ' . $message . ' ' . $file . ' ' . $line);\n    }\n    return false;\n}\n\n/*\n * Exception handler.\n */\nfunction exceptionHandler($e)\n{\n    if (APPLICATION_ENV === 'testing') {\n        echo $e->getMessage() . PHP_EOL;\n\n        return;\n    }\n    error_log($e->getMessage());\n\n    if (defined('BB_MODE_API')) {\n        $code = $e->getCode() ?: 9998;\n        $result = ['result' => null, 'error' => ['message' => $e->getMessage(), 'code' => $code]];\n        echo json_encode($result);\n\n        return false;\n    }\n\n    if (defined('BB_DEBUG') && BB_DEBUG && file_exists(PATH_VENDOR)) {\n        /**\n         * If advanced debugging is enabled, print Whoops instead of our error page.\n         * flip/whoops documentation: https://github.com/filp/whoops/blob/master/docs/API%20Documentation.md.\n         */\n        $whoops = new Run();\n        $prettyPage = new PrettyPageHandler();\n        $prettyPage->setPageTitle('An error ocurred');\n        $prettyPage->addDataTable('FOSSBilling environment', [\n            'PHP Version' => PHP_VERSION,\n            'Error code' => $e->getCode(),\n        ]);\n        $whoops->pushHandler($prettyPage);\n        $whoops->allowQuit(false);\n        $whoops->writeToOutput(false);\n\n        echo $whoops->handleException($e);\n    } else {\n        include PATH_LIBRARY . DIRECTORY_SEPARATOR . 'FOSSBilling' . DIRECTORY_SEPARATOR . 'ErrorPage.php';\n        $errorPage = new \\FOSSBilling\\ErrorPage();\n        $errorPage->generatePage($e->getCode(), $e->getMessage());\n    }\n}\n\n/*\n *\n * Initialize App.\n *\n */\n\n// Define custom error handlers.\nset_exception_handler('exceptionHandler');\nset_error_handler('errorHandler');\n\n//Enabled during setup, is then overridden once we have loaded the config.\nini_set('display_errors', '1');\nini_set('display_startup_errors', '1');\n\n// Check hard requirements.\ncheckRequirements();\n\n// Requirements met - load required packages/files.\nrequire PATH_VENDOR . DIRECTORY_SEPARATOR . 'autoload.php';\n\n// Check web server and web server settings.\ncheckWebServer();\n\n// Check for legacy BoxBilling/FOSSBilling files.\ncheckLegacyFiles();\n\n// Check config exists.\ncheckConfig();\n\n//All seems good, so load the config file.\n$config = require PATH_CONFIG;\n\n// Verify the installer was removed.\ncheckInstaller();\n\n// Config loaded - set globals and relevant settings.\ndate_default_timezone_set($config['i18n']['timezone'] ?? 'UTC');\ndefine('BB_DEBUG', $config['debug']);\ndefine('BB_URL', $config['url']);\ndefine('PATH_CACHE', $config['path_data'] . DIRECTORY_SEPARATOR . 'cache');\ndefine('PATH_LOG', $config['path_data'] . DIRECTORY_SEPARATOR . 'log');\ndefine('BB_SSL', str_starts_with($config['url'], 'https'));\ndefine('ADMIN_PREFIX', $config['admin_area_prefix']);\ndefine('BB_URL_API', $config['url'] . 'api/');\n\n//Initial setup and checks passed, now we setup our custom autoloader.\n$loader = new AntCMS\\AntLoader([\n    'mode' => 'filesystem',\n    'path' => PATH_CACHE . DIRECTORY_SEPARATOR . 'classMap.php',\n]);\n$loader->addNamespace('', PATH_LIBRARY, 'psr0');\n$loader->addNamespace('Box\\\\Mod\\\\', PATH_MODS);\n$loader->checkClassMap();\n$loader->register();\n\n// Check if SSL required, and enforce if so.\ncheckSSL();\n\n// Set error and exception handlers, and default logging settings.\nini_set('log_errors', '1');\nini_set('html_errors', false);\nini_set('error_log', PATH_LOG . DIRECTORY_SEPARATOR . 'php_error.log');\nif ($config['debug']) {\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n    ini_set('display_startup_errors', '1');\n} else {\n    error_reporting(E_RECOVERABLE_ERROR);\n    ini_set('display_errors', '0');\n    ini_set('display_startup_errors', '0');\n}\n"], "fixing_code": ["<?php declare(strict_types=1);\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nnamespace FOSSBilling;\n\nclass ErrorPage\n{\n    public function __construct()\n    {\n        /* If the __trans function is undefined, this probably means we experienced an unrecoverable error during the initialization of FOSSBilling.\n         * As a workaround, we define a \"polyfill\" for it here which just returns the original (english) string, handling placeholders in the process.\n         * This allows us to have translation functionality in our error pages, while also handling cases where they aren't setup.\n         */\n        if (!function_exists('__trans')) {\n            function __trans(string $msgid, array $values = null)\n            {\n                if (is_array($values)) {\n                    $msgid = strtr($msgid, $values);\n                }\n\n                return $msgid;\n            }\n        }\n    }\n\n    /**\n     * Returns the list of error codes and their specialized messages. All Error code parameters are optional.\n     *\n     * @return array\n     */\n    private function getCodes(): array\n    {\n        return [\n            '1' => [\n                'title' => __trans('Unable to find Composer Packages'),\n                'message' => 'The composer packages appear to be missing. This shouldn\\'t happen if you are using a release version of FOSSBilling. If you are developer, you will need to install dependencies using :code.', [':code' => '<code>composer install</code>'],\n                'link' => [\n                    'label' => __trans('View more info on the composer website'),\n                    'href' => 'https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies',\n                ],\n            ],\n            '2' => [\n                'message' => __trans('For security reasons, you must delete the installation directory before you can use FOSSBilling. :code', [':code' => '(<code>/install</code>)']),\n                'link' => [\n                    'label' => __trans('View more info on the Getting Started guide'),\n                    'href' => 'https://fossbilling.org/docs/getting-started/shared#remove-the-installer',\n                ]\n            ],\n            '3' => [\n                'title' => __trans('Your Configuration is Empty'),\n                'message' => __trans('Your FOSSBilling configuration seems to either be empty or non-existent. You may need to re-install FOSSBilling, or re-create the :code file based on the example config.', [':code' => '<code>config.php</code>']),\n                'link' => [\n                    'label' => __trans('See the example config.'),\n                    'href' => 'https://github.com/FOSSBilling/FOSSBilling/blob/main/src/config-sample.php',\n                ]\n            ],\n            '4' => [\n                'title' => __trans('Migration is required'),\n                'message' => __trans('Legacy BoxBilling or FOSSBilling preview files have been found. The file structure within FOSSBilling, along with the configuration format, has since changed. :lineBreak See the migration guide for assistance in migrating to the latest version of FOSSBilling.', [':lineBreak' => '<br>']),\n                'link' => [\n                    'label' => __trans('Check the migration guide.'),\n                    'href' => 'https://fossbilling.org/docs/getting-started/migrate-from-boxbilling',\n                ]\n            ],\n            '5' => [\n                'title' => __trans(\"Missing .htaccess file\"),\n                'message' => __trans(\"You appear to be running an Apache or LiteSpeed based webserver without a valid :code file. Please create one using the default FOSSBilling .htaccess file.\", [':code', '<b><em>.htaccess</em></b>']),\n                'link' => [\n                    'label' => __trans(\"Check the default .htaccess\"),\n                    'href' => 'https://github.com/FOSSBilling/FOSSBilling/blob/main/src/.htaccess',\n                ]\n            ],\n        ];\n    }\n\n    /* List of code categories. The \"start\" and \"end\" values are considered valid for a category.\n     * (Example: an error code of 50 will match the \"FOSSBilling Loader\" category)\n     */\n    private array $codeCategories = [\n        'FOSSBilling Loader' => [\n            'start' => 1,\n            'end' => 50,\n        ],\n        'HTTP Error Codes' => [\n            'start' => 400,\n            'end' => 599,\n        ],\n    ];\n\n    /**\n     * Gets info for a specified error code, using placeholders for anything undefined.\n     *\n     * @param int $code The error code\n     * @return array\n     */\n    private function getCodeInfo(int $code): array\n    {\n        $errorDetails = [\n            'title' => __trans('An error has occurred.'),\n            'link' => [\n                'label' => __trans('View the FOSSBilling documentation'),\n                'href' => 'https://fossbilling.org/docs',\n            ],\n            'category' => __trans('None')\n        ];\n\n        $codes = $this->getCodes();\n\n        if (key_exists($code, $codes)) {\n            $codeInfo = $codes[$code];\n            $errorDetails = array_merge($errorDetails, $codeInfo);\n        }\n\n        $errorDetails['category'] = 'Generic';\n        foreach ($this->codeCategories as $categoryName => $categoryRange) {\n            if ($code >= $categoryRange['start'] && $code <= $categoryRange['end']) {\n                $errorDetails['category'] = $categoryName;\n                break;\n            }\n        }\n\n        return $errorDetails;\n    }\n\n    /**\n     * @param int $code Error code\n     * @param string $message The original exception message\n     * @return never\n     */\n    public function generatePage(int $code, string $message)\n    {\n        $error = $this->getCodeInfo($code);\n        $error['message'] ??= __trans('You\\'ve received a generic error message: :errorMessage', [':errorMessage' => '<code>' . $message . '</code>']);\n\n        $page = '\n        <!DOCTYPE html>\n        <html>\n            <head>\n            <title>FOSSBilling Error | ' . $error['title'] . '</title>\n            <style>\n            body {\n                background-color: #222;\n                color: #fff;\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n                font-size: 16px;\n                line-height: 1.5;\n                margin: 0;\n                padding: 0;\n                text-align: left;\n            }\n\n            .container {\n                display: flex;\n                justify-content: center;\n                align-items: center;\n                height: 100vh;\n            }\n\n            .error-container {\n                width: 75%;\n                background-color: #313131;\n                border-radius: 25px;\n                padding: 1%;\n            }\n\n            .error-title {\n                font-size: 3.75rem;\n                font-weight: 600;\n                margin-bottom: 0px;\n            }\n\n            .error-code {\n                font-size: 1rem;\n                font-weight: 200;\n                margin: 0px;\n            }\n\n            .error-category {\n                font-size: 1rem;\n                font-weight: 200;\n                margin: 0px;\n            }\n\n            .error-message {\n                font-size: 1.25rem;\n                margin-bottom: 30px;\n                line-height: 1.8;\n            }\n\n            code {\n                background-color: #f2f2f2;\n                color: #333;\n                border-radius: 3px;\n            }\n\n            .footer {\n                color: #fff;\n                padding: 5px;\n                text-align: center;\n                font-size: 14px;\n            }\n\n            .footer a {\n                color: #fff;\n                text-decoration: none;\n                margin: 0 10px;\n            }\n\n            .footer a:hover {\n                text-decoration: underline;\n            }\n\n            a {\n                color: #3291ff;\n            }\n\n            a:visited {\n                color: inherit;\n                text-decoration: none;\n            }\n\n            a:hover {\n                text-decoration: underline;\n            }\n\n            .button {\n                background-color: #3291ff;\n                border: none;\n                color: #fff;\n                padding: 10px 20px;\n                border-radius: 5px;\n                font-size: 15px;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                text-decoration: none;\n            }\n\n            .button:hover {\n                background-color: #3d9dff;\n                text-decoration: none;\n            }\n\n            </style>\n            </head>\n            <body>\n                <div class=\"container\">\n                <div class=\"error-container\">\n                    <p class=\"error-title\">' . $error['title'] . '</p>\n                    <p class=\"error-code\">' . __trans('Error Code: #:number', [':number' => $code]) . '</p>\n                    <p class=\"error-category\">' . __trans('Component: :category', [':category' => $error['category']]) . '</p>\n                    <p class=\"error-message\" id=\"specialized\">' . $error['message'] . '</p>\n                    <p class=\"error-message\" id=\"original\" style=\"display: none;\">' . $message . '</p>\n\n                    <div class=\"link-container\">\n                        <button id=\"toggle\" class=\"button\" onclick=\"toggle()\">' . __trans(\"Show original message\") . '</button>\n                        <a class=\"button\" target=\"_blank\" href=\"' . $error['link']['href'] . '\">' . $error['link']['label'] . '</a>\n                    </div>\n\n                    <div class=\"footer\" style=\"clear:both\">\n                        <hr>\n                        <p>Powered By FOSSBilling</p>\n                        <p>\n                            <a href=\"https://github.com/fossbilling/fossbilling\">Source code</a> |\n                            <a href=\"https://fossbilling.org/discord\">Discord</a> |\n                            <a href=\"https://fossbilling.org/docs\">Documentation</a> |\n                            <a href=\"https://forum.fossbilling.com/\">Forum</a> |\n                            <a href=\"https://opencollective.com/FOSSBilling\">Donate</a>\n                        </p>\n                    </div>\n                </div>\n                </div>\n                <script>\n                    function toggle() {\n                        var og = document.getElementById(\"original\");\n                        var specialized = document.getElementById(\"specialized\");\n\n                        if (og.style.display === \"none\") {\n                            og.style.display = \"block\";\n                            specialized.style.display = \"none\";\n                            document.querySelector(\"#toggle\").innerHTML = \"' . __trans(\"Show specialized message\") . '\";\n                        } else {\n                            og.style.display = \"none\";\n                            specialized.style.display = \"block\";\n                            document.querySelector(\"#toggle\").innerHTML = \"' . __trans(\"Show original message\") . '\";\n                        }\n                    }\n                </script>\n            </body>\n        </html>';\n        echo $page;\n        die();\n    }\n}\n", "<?php\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Whoops\\Handler\\PrettyPageHandler;\nuse Whoops\\Run;\n\ndefined('APPLICATION_ENV') || define('APPLICATION_ENV', getenv('APPLICATION_ENV') ?: 'production');\nconst PATH_ROOT = __DIR__;\nconst PATH_VENDOR = PATH_ROOT . DIRECTORY_SEPARATOR . 'vendor';\nconst PATH_LIBRARY = PATH_ROOT . DIRECTORY_SEPARATOR . 'library';\nconst PATH_THEMES = PATH_ROOT . DIRECTORY_SEPARATOR . 'themes';\nconst PATH_MODS = PATH_ROOT . DIRECTORY_SEPARATOR . 'modules';\nconst PATH_LANGS = PATH_ROOT . DIRECTORY_SEPARATOR . 'locale';\nconst PATH_UPLOADS = PATH_ROOT . DIRECTORY_SEPARATOR . 'uploads';\nconst PATH_DATA = PATH_ROOT . DIRECTORY_SEPARATOR . 'data';\nconst PATH_CONFIG = PATH_ROOT . DIRECTORY_SEPARATOR . 'config.php';\n\n/*\n * Check configuration exists, and is valid.\n */\nfunction checkConfig()\n{\n    $filesystem = new Filesystem();\n\n    $base_url = 'http' . ((isset($_SERVER['HTTPS']) && ('on' === $_SERVER['HTTPS'] || 1 == $_SERVER['HTTPS'])) || (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && 'https' === $_SERVER['HTTP_X_FORWARDED_PROTO']) ? 's' : '') . '://' . ($_SERVER['HTTP_HOST'] ?? '');\n    $base_url .= rtrim(dirname($_SERVER['SCRIPT_NAME']), '/');\n\n    // Check if configuration is available, and redirect to installer if not.\n    if (!$filesystem->exists(PATH_CONFIG)) {\n        if ($filesystem->exists('install/index.php')) {\n            header(\"Location: \" . $base_url . '/install/index.php', true, 307);\n        } else {\n            throw new Exception(\"The FOSSBilling configuration file is empty or invalid.\", 3);\n        }\n    }\n}\n\n/*\n * Check if the installer is present.\n */\nfunction checkInstaller()\n{\n    $filesystem = new Filesystem();\n\n    // Check if /install directory still exists after installation has been completed.\n    if ($filesystem->exists(PATH_CONFIG) && $filesystem->exists('install/index.php')) {\n        throw new Exception('For security reasons, you have to delete the install directory before you can use FOSSBilling.', 2);\n    }\n}\n\n/*\n * Check if any legacy BoxBilling/FOSSBilling files are present.\n */\nfunction checkLegacyFiles()\n{\n    $filesystem = new Filesystem();\n\n    // Detect old files and folders from legacy BoxBilling or FOSSBilling installations.\n    $toCheck = ['bb-data', 'bb-library', 'bb-locale', 'bb-modules', 'bb-themes', 'bb-uploads', 'bb-cron.php', 'bb-di.php', 'bb-load.php', 'bb-config.php'];\n    $legacyFound = null;\n    foreach ($toCheck as $path) {\n        if ($filesystem->exists($path)) {\n            $legacyFound = true;\n            break;\n        }\n    }\n\n    // Show an error if any legacy files/folders found.\n    if ($legacyFound) {\n        throw new Exception('Migration from BoxBilling is required.', 4);\n    }\n}\n\n/*\n * Check hard requirements such as PHP version, Composer packages, etc.\n */\nfunction checkRequirements()\n{\n    // Check for Composer packages / vendor folder.\n    if (!file_exists(PATH_VENDOR)) {\n        throw new Exception(\"The composer packages are missing.\", 1);\n    }\n}\n\n/*\n * Check if SSL required, and enforce if so.\n */\nfunction checkSSL()\n{\n    $config = include PATH_CONFIG;\n    if (isset($config['security']['force_https']) && $config['security']['force_https'] && 'cli' !== PHP_SAPI) {\n        $isHTTPS = false;\n\n        if (!empty($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) !== 'off') {\n            $isHTTPS = true;\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && strtolower($_SERVER['HTTP_X_FORWARDED_PROTO']) == 'https') {\n            $isHTTPS = true;\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_SSL']) && strtolower($_SERVER['HTTP_X_FORWARDED_SSL']) == 'on') {\n            $isHTTPS = true;\n        }\n\n        if (!$isHTTPS) {\n            $url = 'https://' . $_SERVER['HTTP_HOST'] . $_SERVER['REQUEST_URI'];\n            header('Location: ' . $url);\n            exit;\n        }\n    }\n}\n\n/*\n * Check the web server config.\n */\nfunction checkWebServer()\n{\n    $filesystem = new Filesystem();\n\n    // Check for missing required .htaccess on Apache and Apache-compatible web servers.\n    $isApache = function_exists('apache_get_version') ? true : false;\n    $serverSoftware = $_SERVER['SERVER_SOFTWARE'] ?? '';\n    if ($isApache or (stripos($serverSoftware, 'apache') !== false) or (stripos($serverSoftware, 'litespeed')) !== false) {\n        if (!$filesystem->exists('.htaccess')) {\n            throw new Exception('Missing .htaccess file', 5);\n        }\n    }\n}\n\n/*\n * Error handler.\n */\nfunction errorHandler(int $number, string $message, string $file, int $line)\n{\n    if (E_RECOVERABLE_ERROR === $number) {\n        exceptionHandler(new ErrorException($message, $number, 0, $file, $line));\n    } else {\n        error_log($number . ' ' . $message . ' ' . $file . ' ' . $line);\n    }\n    return false;\n}\n\n/*\n * Exception handler.\n */\nfunction exceptionHandler($e)\n{\n    $message = htmlspecialchars($e->getMessage());\n    if (APPLICATION_ENV === 'testing') {\n        echo $message . PHP_EOL;\n\n        return;\n    }\n    error_log($message);\n\n    if (defined('BB_MODE_API')) {\n        $code = $e->getCode() ?: 9998;\n        $result = ['result' => null, 'error' => ['message' => $message, 'code' => $code]];\n        echo json_encode($result);\n\n        return false;\n    }\n\n    if (defined('BB_DEBUG') && BB_DEBUG && file_exists(PATH_VENDOR)) {\n        /**\n         * If advanced debugging is enabled, print Whoops instead of our error page.\n         * flip/whoops documentation: https://github.com/filp/whoops/blob/master/docs/API%20Documentation.md.\n         */\n        $whoops = new Run();\n        $prettyPage = new PrettyPageHandler();\n        $prettyPage->setPageTitle('An error ocurred');\n        $prettyPage->addDataTable('FOSSBilling environment', [\n            'PHP Version' => PHP_VERSION,\n            'Error code' => $e->getCode(),\n        ]);\n        $whoops->pushHandler($prettyPage);\n        $whoops->allowQuit(false);\n        $whoops->writeToOutput(false);\n\n        echo $whoops->handleException($e);\n    } else {\n        include PATH_LIBRARY . DIRECTORY_SEPARATOR . 'FOSSBilling' . DIRECTORY_SEPARATOR . 'ErrorPage.php';\n        $errorPage = new \\FOSSBilling\\ErrorPage();\n        $errorPage->generatePage($e->getCode(), $message);\n    }\n}\n\n/*\n *\n * Initialize App.\n *\n */\n\n// Define custom error handlers.\nset_exception_handler('exceptionHandler');\nset_error_handler('errorHandler');\n\n//Enabled during setup, is then overridden once we have loaded the config.\nini_set('display_errors', '1');\nini_set('display_startup_errors', '1');\n\n// Check hard requirements.\ncheckRequirements();\n\n// Requirements met - load required packages/files.\nrequire PATH_VENDOR . DIRECTORY_SEPARATOR . 'autoload.php';\n\n// Check web server and web server settings.\ncheckWebServer();\n\n// Check for legacy BoxBilling/FOSSBilling files.\ncheckLegacyFiles();\n\n// Check config exists.\ncheckConfig();\n\n//All seems good, so load the config file.\n$config = require PATH_CONFIG;\n\n// Verify the installer was removed.\ncheckInstaller();\n\n// Config loaded - set globals and relevant settings.\ndate_default_timezone_set($config['i18n']['timezone'] ?? 'UTC');\ndefine('BB_DEBUG', $config['debug']);\ndefine('BB_URL', $config['url']);\ndefine('PATH_CACHE', $config['path_data'] . DIRECTORY_SEPARATOR . 'cache');\ndefine('PATH_LOG', $config['path_data'] . DIRECTORY_SEPARATOR . 'log');\ndefine('BB_SSL', str_starts_with($config['url'], 'https'));\ndefine('ADMIN_PREFIX', $config['admin_area_prefix']);\ndefine('BB_URL_API', $config['url'] . 'api/');\n\n//Initial setup and checks passed, now we setup our custom autoloader.\n$loader = new AntCMS\\AntLoader([\n    'mode' => 'filesystem',\n    'path' => PATH_CACHE . DIRECTORY_SEPARATOR . 'classMap.php',\n]);\n$loader->addNamespace('', PATH_LIBRARY, 'psr0');\n$loader->addNamespace('Box\\\\Mod\\\\', PATH_MODS);\n$loader->checkClassMap();\n$loader->register();\n\n// Check if SSL required, and enforce if so.\ncheckSSL();\n\n// Set error and exception handlers, and default logging settings.\nini_set('log_errors', '1');\nini_set('html_errors', false);\nini_set('error_log', PATH_LOG . DIRECTORY_SEPARATOR . 'php_error.log');\nif ($config['debug']) {\n    error_reporting(E_ALL);\n    ini_set('display_errors', '1');\n    ini_set('display_startup_errors', '1');\n} else {\n    error_reporting(E_RECOVERABLE_ERROR);\n    ini_set('display_errors', '0');\n    ini_set('display_startup_errors', '0');\n}\n"], "filenames": ["src/library/FOSSBilling/ErrorPage.php", "src/load.php"], "buggy_code_start_loc": [140, 154], "buggy_code_end_loc": [141, 191], "fixing_code_start_loc": [140, 155], "fixing_code_end_loc": [141, 192], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository fossbilling/fossbilling prior to 0.5.4.", "other": {"cve": {"id": "CVE-2023-3521", "sourceIdentifier": "security@huntr.dev", "published": "2023-07-06T02:15:09.510", "lastModified": "2023-07-10T14:01:36.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository fossbilling/fossbilling prior to 0.5.4."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.4", "matchCriteriaId": "FD927918-5473-4C93-876B-CD900A091403"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/5eb516d4ebcb764db1b2edf9c8d0539e76ebde52", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/76a3441d-7f75-4a8d-a7a0-95a7f5456eb0", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/5eb516d4ebcb764db1b2edf9c8d0539e76ebde52"}}