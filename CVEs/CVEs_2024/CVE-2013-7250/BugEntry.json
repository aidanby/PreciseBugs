{"buggy_code": ["/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.core;\n\nimport java.util.Collection;\n\nimport org.apache.commons.lang.ObjectUtils;\n\npublic class JsonBuilder\n{\n  final private StringBuilder sb = new StringBuilder();\n\n  /**\n   * Creates Json result string from the given list.<br/>\n   * [[\"Horst\"], [\"Klaus\"], ...]] // For single property<br/>\n   * [[\"Klein\", \"Horst\"],[\"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) [[\"id:37\", \"Klein\", \"Horst\"],[\"id:42\",\n   * \"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) with id. <br/>\n   * Uses ObjectUtils.toString(Object) for formatting each value.\n   * @param col The array representation: List<Object> or List<Object[]>. If null then \"[]\" is returned.\n   * @return\n   */\n  public static String buildToStringRows(final Collection< ? > col)\n  {\n    if (col == null) {\n      return \"[]\";\n    }\n    final JsonBuilder builder = new JsonBuilder();\n    return builder.append(col).getAsString();\n  }\n\n  public String getAsString()\n  {\n    return sb.toString();\n  }\n\n  /**\n   * Appends objects to buffer, e. g.: [\"Horst\"], [\"Klaus\"], ... Uses formatValue(Object) to render the values.\n   * @param oArray\n   * @return This (fluent)\n   */\n  public JsonBuilder append(final Object[] oArray)\n  {\n    sb.append(\" [\"); // begin array\n    String separator = \"\";\n    for (final Object obj : oArray) {\n      sb.append(separator);\n      separator = \",\";\n      sb.append(escapeString(formatValue(obj)));\n    }\n    sb.append(\"]\"); // end array\n    return this;\n  }\n\n  private String escapeString(final String string)\n  {\n    if (string == null || string.length() == 0) {\n      return \"\\\"\\\"\";\n    }\n    char c = 0;\n    int i;\n    final int len = string.length();\n    final StringBuilder sb = new StringBuilder(len + 4);\n    String t;\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n      c = string.charAt(i);\n      switch (c) {\n        case '\\\\':\n        case '\"':\n          sb.append('\\\\');\n          sb.append(c);\n          break;\n        case '/':\n          // if (b == '<') {\n          sb.append('\\\\');\n          // }\n          sb.append(c);\n          break;\n        case '\\b':\n          sb.append(\"\\\\b\");\n          break;\n        case '\\t':\n          sb.append(\"\\\\t\");\n          break;\n        case '\\n':\n          sb.append(\"\\\\n\");\n          break;\n        case '\\f':\n          sb.append(\"\\\\f\");\n          break;\n        case '\\r':\n          sb.append(\"\\\\r\");\n          break;\n        default:\n          if (c < ' ') {\n            t = \"000\" + Integer.toHexString(c);\n            sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n          } else {\n            sb.append(c);\n          }\n      }\n    }\n    sb.append('\"');\n    return sb.toString();\n  }\n\n  /**\n   * Creates Json result string from the given list.<br/>\n   * [[\"Horst\"], [\"Klaus\"], ...]] // For single property<br/>\n   * [[\"Klein\", \"Horst\"],[\"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) [[\"id:37\", \"Klein\", \"Horst\"],[\"id:42\",\n   * \"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) with id. <br/>\n   * Uses formatValue(Object) for formatting each value.\n   * @param col The array representation: List<Object> or List<Object[]>. If null then \"[]\" is returned.\n   * @return\n   */\n  public JsonBuilder append(final Collection< ? > col)\n  {\n    if (col == null) {\n      sb.append(\"[]\");\n      return this;\n    }\n    // Format: [[\"1.1\", \"1.2\", ...],[\"2.1\", \"2.2\", ...]]\n    sb.append(\"[\\n\");\n    String separator = \"\\n\";\n    for (final Object os : col) {\n      sb.append(separator);\n      separator = \",\\n\";\n      if (os instanceof Object[]) { // Multiple properties\n        append((Object[]) os);\n      } else { // Only one property\n        append(transform(os));\n      }\n    }\n    sb.append(\"]\"); // end data\n    return this;\n  }\n\n  /**\n   * @param obj\n   * @return\n   * @see ObjectUtils#toString(Object)\n   */\n  protected String formatValue(final Object obj)\n  {\n    return ObjectUtils.toString(obj);\n  }\n\n  protected JsonBuilder append(final Object obj)\n  {\n    if (obj instanceof Object[]) {\n      return append((Object[]) obj);\n    }\n    sb.append(\" [\"); // begin row\n    // \" must be quoted as \\\":\n    sb.append(escapeString(formatValue(obj)));\n    sb.append(\"]\"); // end row\n    return this;\n  }\n\n  /**\n   * Before rendering a obj of e. g. a collection the obj can be transformed e. g. in an Object array of dimension 2 containing label and\n   * value.\n   * @param obj\n   * @return obj (identity function) if not overload.\n   */\n  protected Object transform(final Object obj)\n  {\n    return obj;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket.autocompletion;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.extensions.ajax.markup.html.autocomplete.IAutoCompleteRenderer;\nimport org.apache.wicket.markup.head.IHeaderResponse;\nimport org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem;\nimport org.apache.wicket.markup.head.OnDomReadyHeaderItem;\nimport org.apache.wicket.request.cycle.RequestCycle;\nimport org.apache.wicket.request.handler.TextRequestHandler;\nimport org.apache.wicket.util.string.Strings;\nimport org.projectforge.web.core.JsonBuilder;\nimport org.projectforge.web.wicket.WicketRenderHeadUtils;\n\npublic abstract class PFAutoCompleteBehavior<T> extends AbstractDefaultAjaxBehavior\n{\n  private static final long serialVersionUID = -6532710378025987377L;\n\n  protected PFAutoCompleteSettings settings;\n\n  protected IAutoCompleteRenderer<String> renderer;\n\n  public PFAutoCompleteBehavior(final IAutoCompleteRenderer<String> renderer, final PFAutoCompleteSettings settings)\n  {\n    this.renderer = renderer;\n    this.settings = settings;\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#renderHead(org.apache.wicket.Component,\n   *      org.apache.wicket.markup.html.IHeaderResponse)\n   */\n  @Override\n  public void renderHead(final Component component, final IHeaderResponse response)\n  {\n    super.renderHead(component, response);\n    WicketRenderHeadUtils.renderMainJavaScriptIncludes(response);\n    response.render(JavaScriptReferenceHeaderItem.forUrl(\"scripts/jquery.wicket-autocomplete.js\"));\n    renderAutocompleteHead(response);\n  }\n\n  /**\n   * Render autocomplete init javascript and other head contributions\n   * \n   * @param response\n   */\n  private void renderAutocompleteHead(final IHeaderResponse response)\n  {\n    final String id = getComponent().getMarkupId();\n    String indicatorId = findIndicatorId();\n    if (Strings.isEmpty(indicatorId)) {\n      indicatorId = \"null\";\n    } else {\n      indicatorId = \"'\" + indicatorId + \"'\";\n    }\n    final StringBuffer buf = new StringBuffer();\n    buf.append(\"var favorite\" + id + \" = \");\n    final List<T> favorites = getFavorites();\n    final MyJsonBuilder builder = new MyJsonBuilder();\n    if (favorites != null) {\n      buf.append(builder.append(favorites).getAsString());\n    } else {\n      buf.append(builder.append(getRecentUserInputs()).getAsString());\n    }\n    buf.append(\";\").append(\"var z = $(\\\"#\").append(id).append(\"\\\");\\n\").append(\"z.autocomplete(\\\"\").append(getCallbackUrl()).append(\"\\\",{\");\n    boolean first = true;\n    for (final String setting : getSettingsJS()) {\n      if (first == true)\n        first = false;\n      else buf.append(\", \");\n      buf.append(setting);\n    }\n    if (first == true)\n      first = false;\n    else buf.append(\", \");\n    buf.append(\"favoriteEntries:favorite\" + id);\n    buf.append(\"});\");\n    if (settings.isHasFocus() == true) {\n      buf.append(\"\\nz.focus();\");\n    }\n    final String initJS = buf.toString();\n    // String initJS = String.format(\"new Wicket.AutoComplete('%s','%s',%s,%s);\", id, getCallbackUrl(), constructSettingsJS(), indicatorId);\n    response.render(OnDomReadyHeaderItem.forScript(initJS));\n  }\n\n  protected final List<String> getSettingsJS()\n  {\n    final List<String> result = new ArrayList<String>();\n    addSetting(result, \"matchContains\", settings.isMatchContains());\n    addSetting(result, \"minChars\", settings.getMinChars());\n    addSetting(result, \"delay\", settings.getDelay());\n    addSetting(result, \"matchCase\", settings.isMatchCase());\n    addSetting(result, \"matchSubset\", settings.isMatchSubset());\n    addSetting(result, \"cacheLength\", settings.getCacheLength());\n    addSetting(result, \"mustMatch\", settings.isMustMatch());\n    addSetting(result, \"selectFirst\", settings.isSelectFirst());\n    addSetting(result, \"selectOnly\", settings.isSelectOnly());\n    addSetting(result, \"maxItemsToShow\", settings.getMaxItemsToShow());\n    addSetting(result, \"autoFill\", settings.isAutoFill());\n    addSetting(result, \"autoSubmit\", settings.isAutoSubmit());\n    addSetting(result, \"scroll\", settings.isScroll());\n    addSetting(result, \"scrollHeight\", settings.getScrollHeight());\n    addSetting(result, \"width\", settings.getWidth());\n    addSetting(result, \"deletableItem\", settings.isDeletableItem());\n    if (settings.isLabelValue() == true) {\n      addSetting(result, \"labelValue\", settings.isLabelValue());\n    }\n    return result;\n  }\n\n  private final void addSetting(final List<String> result, final String name, final Boolean value)\n  {\n    if (value == null) {\n      return;\n    }\n    result.add(name + \":\" + ((value == true) ? \"1\" : \"0\"));\n  }\n\n  private final void addSetting(final List<String> result, final String name, final Integer value)\n  {\n    if (value == null) {\n      return;\n    }\n    result.add(name + \":\" + value);\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#onBind()\n   */\n  @Override\n  protected void onBind()\n  {\n    // add empty AbstractDefaultAjaxBehavior to the component, to force\n    // rendering wicket-ajax.js reference if no other ajax behavior is on\n    // page\n    getComponent().add(new AbstractDefaultAjaxBehavior() {\n      private static final long serialVersionUID = 1L;\n\n      @Override\n      protected void respond(final AjaxRequestTarget target)\n      {\n      }\n    });\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)\n   */\n  @Override\n  protected void respond(final AjaxRequestTarget target)\n  {\n    final RequestCycle requestCycle = RequestCycle.get();\n    final org.apache.wicket.util.string.StringValue val = requestCycle.getRequest().getQueryParameters().getParameterValue(\"q\");\n    onRequest(val != null ? val.toString() : null, requestCycle);\n  }\n\n  protected final void onRequest(final String val, final RequestCycle requestCycle)\n  {\n    // final PageParameters pageParameters = new PageParameters(requestCycle.getRequest().getParameterMap());\n    final List<T> choices = getChoices(val);\n    final MyJsonBuilder builder = new MyJsonBuilder();\n    final String json = builder.append(choices).getAsString();\n    requestCycle.scheduleRequestHandlerAfterCurrent(new TextRequestHandler(\"application/json\", \"utf-8\", json));\n\n    /*\n     * IRequestTarget target = new IRequestTarget() {\n     * \n     * public void respond(RequestCycle requestCycle) {\n     * \n     * WebResponse r = (WebResponse) requestCycle.getResponse(); // Determine encoding final String encoding =\n     * Application.get().getRequestCycleSettings().getResponseRequestEncoding(); r.setCharacterEncoding(encoding);\n     * r.setContentType(\"application/json\"); // Make sure it is not cached by a r.setHeader(\"Expires\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n     * r.setHeader(\"Cache-Control\", \"no-cache, must-revalidate\"); r.setHeader(\"Pragma\", \"no-cache\");\n     * \n     * final List<T> choices = getChoices(val); renderer.renderHeader(r); renderer.render(JsonBuilder.buildRows(false, choices), r, val);\n     * renderer.renderFooter(r); }\n     * \n     * public void detach(RequestCycle requestCycle) { } }; requestCycle.setRequestTarget(target);\n     */\n  }\n\n  /**\n   * Callback method that should return an iterator over all possible choice objects. These objects will be passed to the renderer to\n   * generate output. Usually it is enough to return an iterator over strings.\n   * \n   * @param input current input\n   * @return iterator over all possible choice objects\n   */\n  protected abstract List<T> getChoices(String input);\n\n  /**\n   * Callback method that should return a list of all possible default choice objects to show, if the user double clicks the empty input\n   * field. These objects will be passed to the renderer to generate output. Usually it is enough to return an iterator over strings.\n   */\n  protected abstract List<T> getFavorites();\n\n  /**\n   * Callback method that should return a list of all recent user inputs in the text input field. They will be shown, if the user double\n   * clicks the empty input field. These objects will be passed to the renderer to generate output. Usually it is enough to return an\n   * iterator over strings. <br/>\n   * Please note: Please, use only getFavorites() OR getRecentUserInputs()!\n   */\n  protected abstract List<String> getRecentUserInputs();\n\n  /**\n   * Used for formatting the values.\n   */\n  protected abstract String formatValue(T value);\n\n  /**\n   * Used for formatting the labels if labelValue is set to true.\n   * @return null at default (if not overload).\n   */\n  protected String formatLabel(final T value)\n  {\n    return null;\n  }\n\n  private class MyJsonBuilder extends JsonBuilder\n  {\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected String formatValue(final Object obj)\n    {\n      if (obj instanceof String) {\n        return obj.toString();\n      } else {\n        return PFAutoCompleteBehavior.this.formatValue((T) obj);\n      }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected Object transform(final Object obj)\n    {\n      if (settings.isLabelValue() == true) {\n        final Object[] oa = new Object[2];\n        if (obj instanceof String) {\n          oa[0] = obj;\n          oa[1] = obj;\n        } else {\n          oa[0] = PFAutoCompleteBehavior.this.formatLabel((T) obj);\n          oa[1] = PFAutoCompleteBehavior.this.formatValue((T) obj);\n        }\n        return oa;\n      } else {\n        return obj;\n      }\n    }\n  };\n}\n"], "fixing_code": ["/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.core;\n\nimport java.util.Collection;\n\nimport org.apache.commons.lang.ObjectUtils;\n\npublic class JsonBuilder\n{\n  final private StringBuilder sb = new StringBuilder();\n\n  private boolean escapeHtml;\n\n  /**\n   * Creates Json result string from the given list.<br/>\n   * [[\"Horst\"], [\"Klaus\"], ...]] // For single property<br/>\n   * [[\"Klein\", \"Horst\"],[\"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) [[\"id:37\", \"Klein\", \"Horst\"],[\"id:42\",\n   * \"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) with id. <br/>\n   * Uses ObjectUtils.toString(Object) for formatting each value.\n   * @param col The array representation: List<Object> or List<Object[]>. If null then \"[]\" is returned.\n   * @return\n   */\n  public static String buildToStringRows(final Collection< ? > col)\n  {\n    if (col == null) {\n      return \"[]\";\n    }\n    final JsonBuilder builder = new JsonBuilder();\n    return builder.append(col).getAsString();\n  }\n\n  /**\n   * @param escapeHtml the escapeHtml to set (default is false).\n   * @return this for chaining.\n   */\n  public JsonBuilder setEscapeHtml(final boolean escapeHtml)\n  {\n    this.escapeHtml = escapeHtml;\n    return this;\n  }\n\n  public String getAsString()\n  {\n    return sb.toString();\n  }\n\n  /**\n   * Appends objects to buffer, e. g.: [\"Horst\"], [\"Klaus\"], ... Uses formatValue(Object) to render the values.\n   * @param oArray\n   * @return This (fluent)\n   */\n  public JsonBuilder append(final Object[] oArray)\n  {\n    sb.append(\" [\"); // begin array\n    String separator = \"\";\n    for (final Object obj : oArray) {\n      sb.append(separator);\n      separator = \",\";\n      sb.append(escapeString(formatValue(obj)));\n    }\n    sb.append(\"]\"); // end array\n    return this;\n  }\n\n  private String escapeString(final String string)\n  {\n    if (string == null || string.length() == 0) {\n      return \"\\\"\\\"\";\n    }\n    char c = 0;\n    int i;\n    final int len = string.length();\n    final StringBuilder sb = new StringBuilder(len + 4);\n    String t;\n    sb.append('\"');\n    for (i = 0; i < len; i += 1) {\n      c = string.charAt(i);\n      switch (c) {\n        case '\\\\':\n        case '\"':\n          sb.append('\\\\');\n          sb.append(c);\n          break;\n        case '/':\n          // if (b == '<') {\n          sb.append('\\\\');\n          // }\n          sb.append(c);\n          break;\n        case '\\b':\n          sb.append(\"\\\\b\");\n          break;\n        case '\\t':\n          sb.append(\"\\\\t\");\n          break;\n        case '\\n':\n          sb.append(\"\\\\n\");\n          break;\n        case '\\f':\n          sb.append(\"\\\\f\");\n          break;\n        case '\\r':\n          sb.append(\"\\\\r\");\n          break;\n        default:\n          if (c < ' ') {\n            t = \"000\" + Integer.toHexString(c);\n            sb.append(\"\\\\u\" + t.substring(t.length() - 4));\n          } else {\n            if (escapeHtml == true) {\n              switch (c) {\n                case '<':\n                  sb.append(\"&lt;\");\n                  break;\n                case '>':\n                  sb.append(\"&gt;\");\n                  break;\n                case '&':\n                  sb.append(\"&amp;\");\n                  break;\n                case '\"':\n                  sb.append(\"&quot;\");\n                  break;\n                case '\\'':\n                  sb.append(\"&#x27;\");\n                  break;\n                case '/':\n                  sb.append(\"&#x2F;\");\n                  break;\n                default:\n                  sb.append(c);\n              }\n            } else {\n              sb.append(c);\n            }\n          }\n      }\n    }\n    sb.append('\"');\n    return sb.toString();\n  }\n\n  /**\n   * Creates Json result string from the given list.<br/>\n   * [[\"Horst\"], [\"Klaus\"], ...]] // For single property<br/>\n   * [[\"Klein\", \"Horst\"],[\"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) [[\"id:37\", \"Klein\", \"Horst\"],[\"id:42\",\n   * \"Schmidt\", \"Klaus\"], ...] // For two Properties (e. g. name, first name) with id. <br/>\n   * Uses formatValue(Object) for formatting each value.\n   * @param col The array representation: List<Object> or List<Object[]>. If null then \"[]\" is returned.\n   * @return\n   */\n  public JsonBuilder append(final Collection< ? > col)\n  {\n    if (col == null) {\n      sb.append(\"[]\");\n      return this;\n    }\n    // Format: [[\"1.1\", \"1.2\", ...],[\"2.1\", \"2.2\", ...]]\n    sb.append(\"[\\n\");\n    String separator = \"\\n\";\n    for (final Object os : col) {\n      sb.append(separator);\n      separator = \",\\n\";\n      if (os instanceof Object[]) { // Multiple properties\n        append((Object[]) os);\n      } else { // Only one property\n        append(transform(os));\n      }\n    }\n    sb.append(\"]\"); // end data\n    return this;\n  }\n\n  /**\n   * @param obj\n   * @return\n   * @see ObjectUtils#toString(Object)\n   */\n  protected String formatValue(final Object obj)\n  {\n    return ObjectUtils.toString(obj);\n  }\n\n  protected JsonBuilder append(final Object obj)\n  {\n    if (obj instanceof Object[]) {\n      return append((Object[]) obj);\n    }\n    sb.append(\" [\"); // begin row\n    // \" must be quoted as \\\":\n    sb.append(escapeString(formatValue(obj)));\n    sb.append(\"]\"); // end row\n    return this;\n  }\n\n  /**\n   * Before rendering a obj of e. g. a collection the obj can be transformed e. g. in an Object array of dimension 2 containing label and\n   * value.\n   * @param obj\n   * @return obj (identity function) if not overload.\n   */\n  protected Object transform(final Object obj)\n  {\n    return obj;\n  }\n}\n", "/////////////////////////////////////////////////////////////////////////////\n//\n// Project ProjectForge Community Edition\n//         www.projectforge.org\n//\n// Copyright (C) 2001-2013 Kai Reinhard (k.reinhard@micromata.de)\n//\n// ProjectForge is dual-licensed.\n//\n// This community edition is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License as published\n// by the Free Software Foundation; version 3 of the License.\n//\n// This community edition is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General\n// Public License for more details.\n//\n// You should have received a copy of the GNU General Public License along\n// with this program; if not, see http://www.gnu.org/licenses/.\n//\n/////////////////////////////////////////////////////////////////////////////\n\npackage org.projectforge.web.wicket.autocompletion;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.apache.wicket.Component;\nimport org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;\nimport org.apache.wicket.ajax.AjaxRequestTarget;\nimport org.apache.wicket.extensions.ajax.markup.html.autocomplete.IAutoCompleteRenderer;\nimport org.apache.wicket.markup.head.IHeaderResponse;\nimport org.apache.wicket.markup.head.JavaScriptReferenceHeaderItem;\nimport org.apache.wicket.markup.head.OnDomReadyHeaderItem;\nimport org.apache.wicket.request.cycle.RequestCycle;\nimport org.apache.wicket.request.handler.TextRequestHandler;\nimport org.apache.wicket.util.string.Strings;\nimport org.projectforge.web.core.JsonBuilder;\nimport org.projectforge.web.wicket.WicketRenderHeadUtils;\n\npublic abstract class PFAutoCompleteBehavior<T> extends AbstractDefaultAjaxBehavior\n{\n  private static final long serialVersionUID = -6532710378025987377L;\n\n  protected PFAutoCompleteSettings settings;\n\n  protected IAutoCompleteRenderer<String> renderer;\n\n  public PFAutoCompleteBehavior(final IAutoCompleteRenderer<String> renderer, final PFAutoCompleteSettings settings)\n  {\n    this.renderer = renderer;\n    this.settings = settings;\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#renderHead(org.apache.wicket.Component,\n   *      org.apache.wicket.markup.html.IHeaderResponse)\n   */\n  @Override\n  public void renderHead(final Component component, final IHeaderResponse response)\n  {\n    super.renderHead(component, response);\n    WicketRenderHeadUtils.renderMainJavaScriptIncludes(response);\n    response.render(JavaScriptReferenceHeaderItem.forUrl(\"scripts/jquery.wicket-autocomplete.js\"));\n    renderAutocompleteHead(response);\n  }\n\n  /**\n   * Render autocomplete init javascript and other head contributions\n   * \n   * @param response\n   */\n  private void renderAutocompleteHead(final IHeaderResponse response)\n  {\n    final String id = getComponent().getMarkupId();\n    String indicatorId = findIndicatorId();\n    if (Strings.isEmpty(indicatorId)) {\n      indicatorId = \"null\";\n    } else {\n      indicatorId = \"'\" + indicatorId + \"'\";\n    }\n    final StringBuffer buf = new StringBuffer();\n    buf.append(\"var favorite\" + id + \" = \");\n    final List<T> favorites = getFavorites();\n    final MyJsonBuilder builder = new MyJsonBuilder();\n    if (favorites != null) {\n      buf.append(builder.append(favorites).getAsString());\n    } else {\n      buf.append(builder.append(getRecentUserInputs()).getAsString());\n    }\n    buf.append(\";\").append(\"var z = $(\\\"#\").append(id).append(\"\\\");\\n\").append(\"z.autocomplete(\\\"\").append(getCallbackUrl()).append(\"\\\",{\");\n    boolean first = true;\n    for (final String setting : getSettingsJS()) {\n      if (first == true)\n        first = false;\n      else buf.append(\", \");\n      buf.append(setting);\n    }\n    if (first == true)\n      first = false;\n    else buf.append(\", \");\n    buf.append(\"favoriteEntries:favorite\" + id);\n    buf.append(\"});\");\n    if (settings.isHasFocus() == true) {\n      buf.append(\"\\nz.focus();\");\n    }\n    final String initJS = buf.toString();\n    // String initJS = String.format(\"new Wicket.AutoComplete('%s','%s',%s,%s);\", id, getCallbackUrl(), constructSettingsJS(), indicatorId);\n    response.render(OnDomReadyHeaderItem.forScript(initJS));\n  }\n\n  protected final List<String> getSettingsJS()\n  {\n    final List<String> result = new ArrayList<String>();\n    addSetting(result, \"matchContains\", settings.isMatchContains());\n    addSetting(result, \"minChars\", settings.getMinChars());\n    addSetting(result, \"delay\", settings.getDelay());\n    addSetting(result, \"matchCase\", settings.isMatchCase());\n    addSetting(result, \"matchSubset\", settings.isMatchSubset());\n    addSetting(result, \"cacheLength\", settings.getCacheLength());\n    addSetting(result, \"mustMatch\", settings.isMustMatch());\n    addSetting(result, \"selectFirst\", settings.isSelectFirst());\n    addSetting(result, \"selectOnly\", settings.isSelectOnly());\n    addSetting(result, \"maxItemsToShow\", settings.getMaxItemsToShow());\n    addSetting(result, \"autoFill\", settings.isAutoFill());\n    addSetting(result, \"autoSubmit\", settings.isAutoSubmit());\n    addSetting(result, \"scroll\", settings.isScroll());\n    addSetting(result, \"scrollHeight\", settings.getScrollHeight());\n    addSetting(result, \"width\", settings.getWidth());\n    addSetting(result, \"deletableItem\", settings.isDeletableItem());\n    if (settings.isLabelValue() == true) {\n      addSetting(result, \"labelValue\", settings.isLabelValue());\n    }\n    return result;\n  }\n\n  private final void addSetting(final List<String> result, final String name, final Boolean value)\n  {\n    if (value == null) {\n      return;\n    }\n    result.add(name + \":\" + ((value == true) ? \"1\" : \"0\"));\n  }\n\n  private final void addSetting(final List<String> result, final String name, final Integer value)\n  {\n    if (value == null) {\n      return;\n    }\n    result.add(name + \":\" + value);\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#onBind()\n   */\n  @Override\n  protected void onBind()\n  {\n    // add empty AbstractDefaultAjaxBehavior to the component, to force\n    // rendering wicket-ajax.js reference if no other ajax behavior is on\n    // page\n    getComponent().add(new AbstractDefaultAjaxBehavior() {\n      private static final long serialVersionUID = 1L;\n\n      @Override\n      protected void respond(final AjaxRequestTarget target)\n      {\n      }\n    });\n  }\n\n  /**\n   * @see org.apache.wicket.ajax.AbstractDefaultAjaxBehavior#respond(org.apache.wicket.ajax.AjaxRequestTarget)\n   */\n  @Override\n  protected void respond(final AjaxRequestTarget target)\n  {\n    final RequestCycle requestCycle = RequestCycle.get();\n    final org.apache.wicket.util.string.StringValue val = requestCycle.getRequest().getQueryParameters().getParameterValue(\"q\");\n    onRequest(val != null ? val.toString() : null, requestCycle);\n  }\n\n  protected final void onRequest(final String val, final RequestCycle requestCycle)\n  {\n    // final PageParameters pageParameters = new PageParameters(requestCycle.getRequest().getParameterMap());\n    final List<T> choices = getChoices(val);\n    final MyJsonBuilder builder = new MyJsonBuilder();\n    final String json = builder.append(choices).getAsString();\n    requestCycle.scheduleRequestHandlerAfterCurrent(new TextRequestHandler(\"application/json\", \"utf-8\", json));\n\n    /*\n     * IRequestTarget target = new IRequestTarget() {\n     * \n     * public void respond(RequestCycle requestCycle) {\n     * \n     * WebResponse r = (WebResponse) requestCycle.getResponse(); // Determine encoding final String encoding =\n     * Application.get().getRequestCycleSettings().getResponseRequestEncoding(); r.setCharacterEncoding(encoding);\n     * r.setContentType(\"application/json\"); // Make sure it is not cached by a r.setHeader(\"Expires\", \"Mon, 26 Jul 1997 05:00:00 GMT\");\n     * r.setHeader(\"Cache-Control\", \"no-cache, must-revalidate\"); r.setHeader(\"Pragma\", \"no-cache\");\n     * \n     * final List<T> choices = getChoices(val); renderer.renderHeader(r); renderer.render(JsonBuilder.buildRows(false, choices), r, val);\n     * renderer.renderFooter(r); }\n     * \n     * public void detach(RequestCycle requestCycle) { } }; requestCycle.setRequestTarget(target);\n     */\n  }\n\n  /**\n   * Callback method that should return an iterator over all possible choice objects. These objects will be passed to the renderer to\n   * generate output. Usually it is enough to return an iterator over strings.\n   * \n   * @param input current input\n   * @return iterator over all possible choice objects\n   */\n  protected abstract List<T> getChoices(String input);\n\n  /**\n   * Callback method that should return a list of all possible default choice objects to show, if the user double clicks the empty input\n   * field. These objects will be passed to the renderer to generate output. Usually it is enough to return an iterator over strings.\n   */\n  protected abstract List<T> getFavorites();\n\n  /**\n   * Callback method that should return a list of all recent user inputs in the text input field. They will be shown, if the user double\n   * clicks the empty input field. These objects will be passed to the renderer to generate output. Usually it is enough to return an\n   * iterator over strings. <br/>\n   * Please note: Please, use only getFavorites() OR getRecentUserInputs()!\n   */\n  protected abstract List<String> getRecentUserInputs();\n\n  /**\n   * Used for formatting the values.\n   */\n  protected abstract String formatValue(T value);\n\n  /**\n   * Used for formatting the labels if labelValue is set to true.\n   * @return null at default (if not overload).\n   */\n  protected String formatLabel(final T value)\n  {\n    return null;\n  }\n\n  private class MyJsonBuilder extends JsonBuilder\n  {\n    private MyJsonBuilder()\n    {\n      setEscapeHtml(true);\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected String formatValue(final Object obj)\n    {\n      if (obj instanceof String) {\n        return obj.toString();\n      } else {\n        return PFAutoCompleteBehavior.this.formatValue((T) obj);\n      }\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    @Override\n    protected Object transform(final Object obj)\n    {\n      if (settings.isLabelValue() == true) {\n        final Object[] oa = new Object[2];\n        if (obj instanceof String) {\n          oa[0] = obj;\n          oa[1] = obj;\n        } else {\n          oa[0] = PFAutoCompleteBehavior.this.formatLabel((T) obj);\n          oa[1] = PFAutoCompleteBehavior.this.formatValue((T) obj);\n        }\n        return oa;\n      } else {\n        return obj;\n      }\n    }\n  };\n}\n"], "filenames": ["src/main/java/org/projectforge/web/core/JsonBuilder.java", "src/main/java/org/projectforge/web/wicket/autocompletion/PFAutoCompleteBehavior.java"], "buggy_code_start_loc": [32, 247], "buggy_code_end_loc": [121, 247], "fixing_code_start_loc": [33, 248], "fixing_code_end_loc": [158, 253], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in the JsonBuilder implementation in ProjectForge before 5.3 allows remote authenticated users to inject arbitrary web script or HTML via an autocompletion string, related to web/core/JsonBuilder.java and web/wicket/autocompletion/PFAutoCompleteBehavior.java.", "other": {"cve": {"id": "CVE-2013-7250", "sourceIdentifier": "cve@mitre.org", "published": "2014-01-02T14:59:04.237", "lastModified": "2016-12-31T02:59:09.483", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in the JsonBuilder implementation in ProjectForge before 5.3 allows remote authenticated users to inject arbitrary web script or HTML via an autocompletion string, related to web/core/JsonBuilder.java and web/wicket/autocompletion/PFAutoCompleteBehavior.java."}, {"lang": "es", "value": "Cross-site scripting (XSS) en la implementaci\u00f3n JsonBuilder en ProjectForge antes de 5.3 permite a los usuarios remotos autenticados inyectar secuencias de comandos web o HTML a trav\u00e9s de una cadena de autocompletado, relacionado con web / core / JsonBuilder.java y web/wicket/autocompletion/PFAutoCompleteBehavior.java."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.2", "matchCriteriaId": "BF5D532A-E85C-4239-827F-6C4ADF04B1F5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:5.0:*:*:*:*:*:*:*", "matchCriteriaId": "12F8E378-EC24-4458-A0BB-B479FDC9D9A2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:projectforge:projectforge:5.1:*:*:*:*:*:*:*", "matchCriteriaId": "53F6C76A-C058-4732-84CB-B4F1F1E39FD4"}]}]}], "references": [{"url": "http://www.projectforge.org/pf-en/News", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/64632", "source": "cve@mitre.org"}, {"url": "https://github.com/micromata/projectforge-webapp/commit/5a6a25366491443b76e528a04a9e4ba26f08a83c", "source": "cve@mitre.org", "tags": ["Exploit", "Patch"]}, {"url": "https://www.projectforge.org/jira/browse/PF-483", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/micromata/projectforge-webapp/commit/5a6a25366491443b76e528a04a9e4ba26f08a83c"}}