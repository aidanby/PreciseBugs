{"buggy_code": ["<?php\n/* Pi-hole: A black hole for Internet advertisements\n*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n*  Network-wide ad blocking via your own hardware.\n*\n*  This file is copyright under the latest version of the EUPL.\n*  Please see LICENSE file for your rights under this license. */\n\n    require_once('func.php');\n\n    // Start a new PHP session (or continue an existing one)\n    // Prevents javascript XSS attacks aimed to steal the session ID\n    ini_set('session.cookie_httponly', 1);\n    // Prevent Session ID from being passed through  URLs\n    ini_set('session.use_only_cookies', 1);\n    session_start();\n\n    // Read setupVars.conf file\n    $setupVars = parse_ini_file(\"/etc/pihole/setupVars.conf\");\n    // Try to read password hash from setupVars.conf\n    if(isset($setupVars['WEBPASSWORD']))\n    {\n        $pwhash = $setupVars['WEBPASSWORD'];\n    }\n    else\n    {\n        $pwhash = \"\";\n    }\n\n    // If the user wants to log out, we free all session variables currently registered\n    // and delete any persistent cookie.\n    if(isset($_GET[\"logout\"]))\n    {\n        session_unset();\n        setcookie('persistentlogin', '', 1);\n        header('Location: index.php');\n        exit();\n    }\n\n    $wrongpassword = false;\n    $auth = false;\n\n    // Test if password is set\n    if(strlen($pwhash) > 0)\n    {\n        // Check for and authorize from persistent cookie\n        if (isset($_COOKIE[\"persistentlogin\"]))\n        {\n            if (hash_equals($pwhash, $_COOKIE[\"persistentlogin\"]))\n            {\n                $auth = true;\n                // Refresh cookie with new expiry\n                setcookie('persistentlogin', $pwhash, time()+60*60*24*7);\n            }\n            else\n            {\n                // Invalid cookie\n                $auth = false;\n                setcookie('persistentlogin', '', 1);\n            }\n        }\n        // Compare doubly hashes password input with saved hash\n        else if(isset($_POST[\"pw\"]))\n        {\n            $postinput = hash('sha256',hash('sha256',$_POST[\"pw\"]));\n            if(hash_equals($pwhash, $postinput))\n            {\n                // Regenerate session ID to prevent session fixation\n                session_regenerate_id();\n\n                // Clear the old session\n                $_SESSION = array();\n\n                // Set hash in new session\n                $_SESSION[\"hash\"] = $pwhash;\n\n                // Login successful, redirect the user to the homepage to discard the POST request\n                if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['QUERY_STRING'] === 'login') {\n                    // Set persistent cookie if selected\n                    if (isset($_POST['persistentlogin']))\n                    {\n                        setcookie('persistentlogin', $pwhash, time()+60*60*24*7);\n                    }\n                    header('Location: index.php');\n                    exit();\n                }\n\n                $auth = true;\n            }\n            else\n            {\n                $wrongpassword = true;\n            }\n        }\n        // Compare auth hash with saved hash\n        else if (isset($_SESSION[\"hash\"]))\n        {\n            if(hash_equals($pwhash, $_SESSION[\"hash\"]))\n                $auth = true;\n        }\n        // API can use the hash to get data without logging in via plain-text password\n        else if (isset($api) && isset($_GET[\"auth\"]))\n        {\n            if(hash_equals($pwhash, $_GET[\"auth\"]))\n                $auth = true;\n        }\n        else\n        {\n            // Password or hash wrong\n            $auth = false;\n        }\n    }\n    else\n    {\n        // No password set\n        $auth = true;\n    }\n?>\n"], "fixing_code": ["<?php\n/* Pi-hole: A black hole for Internet advertisements\n*  (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n*  Network-wide ad blocking via your own hardware.\n*\n*  This file is copyright under the latest version of the EUPL.\n*  Please see LICENSE file for your rights under this license. */\n\n    require_once('func.php');\n\n    // Start a new PHP session (or continue an existing one)\n    // Prevents javascript XSS attacks aimed to steal the session ID\n    ini_set('session.cookie_httponly', 1);\n    // Prevent Session ID from being passed through  URLs\n    ini_set('session.use_only_cookies', 1);\n    session_start();\n\n    // Read setupVars.conf file\n    $setupVars = parse_ini_file(\"/etc/pihole/setupVars.conf\");\n    // Try to read password hash from setupVars.conf\n    if(isset($setupVars['WEBPASSWORD']))\n    {\n        $pwhash = $setupVars['WEBPASSWORD'];\n    }\n    else\n    {\n        $pwhash = \"\";\n    }\n\n    // If the user wants to log out, we free all session variables currently registered\n    // and delete any persistent cookie.\n    if(isset($_GET[\"logout\"]))\n    {\n        session_unset();\n        setcookie('persistentlogin', '', 1);\n        header('Location: index.php');\n        exit();\n    }\n\n    $wrongpassword = false;\n    $auth = false;\n\n    // Test if password is set\n    if(strlen($pwhash) > 0)\n    {\n        // Check for and authorize from persistent cookie\n        if (isset($_COOKIE[\"persistentlogin\"]))\n        {\n            if (hash_equals($pwhash, $_COOKIE[\"persistentlogin\"]))\n            {\n                $auth = true;\n                // Refresh cookie with new expiry\n                // setcookie( $name, $value, $expire, $path, $domain, $secure, $httponly )\n                setcookie('persistentlogin', $pwhash, time()+60*60*24*7, null, null, null, true );\n            }\n            else\n            {\n                // Invalid cookie\n                $auth = false;\n                setcookie('persistentlogin', '', 1);\n            }\n        }\n        // Compare doubly hashes password input with saved hash\n        else if(isset($_POST[\"pw\"]))\n        {\n            $postinput = hash('sha256',hash('sha256',$_POST[\"pw\"]));\n            if(hash_equals($pwhash, $postinput))\n            {\n                // Regenerate session ID to prevent session fixation\n                session_regenerate_id();\n\n                // Clear the old session\n                $_SESSION = array();\n\n                // Set hash in new session\n                $_SESSION[\"hash\"] = $pwhash;\n\n                // Login successful, redirect the user to the homepage to discard the POST request\n                if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_SERVER['QUERY_STRING'] === 'login') {\n                    // Set persistent cookie if selected\n                    if (isset($_POST['persistentlogin']))\n                    {\n                        // setcookie( $name, $value, $expire, $path, $domain, $secure, $httponly )\n                        setcookie('persistentlogin', $pwhash, time()+60*60*24*7, null, null, null, true );\n                    }\n                    header('Location: index.php');\n                    exit();\n                }\n\n                $auth = true;\n            }\n            else\n            {\n                $wrongpassword = true;\n            }\n        }\n        // Compare auth hash with saved hash\n        else if (isset($_SESSION[\"hash\"]))\n        {\n            if(hash_equals($pwhash, $_SESSION[\"hash\"]))\n                $auth = true;\n        }\n        // API can use the hash to get data without logging in via plain-text password\n        else if (isset($api) && isset($_GET[\"auth\"]))\n        {\n            if(hash_equals($pwhash, $_GET[\"auth\"]))\n                $auth = true;\n        }\n        else\n        {\n            // Password or hash wrong\n            $auth = false;\n        }\n    }\n    else\n    {\n        // No password set\n        $auth = true;\n    }\n?>\n"], "filenames": ["scripts/pi-hole/php/password.php"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [83], "fixing_code_start_loc": [53], "fixing_code_end_loc": [85], "type": "CWE-732", "message": "adminlte is vulnerable to Sensitive Cookie Without 'HttpOnly' Flag", "other": {"cve": {"id": "CVE-2021-3706", "sourceIdentifier": "security@huntr.dev", "published": "2021-09-15T07:15:06.777", "lastModified": "2022-10-25T18:30:08.040", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "adminlte is vulnerable to Sensitive Cookie Without 'HttpOnly' Flag"}, {"lang": "es", "value": "adminlte es vulnerable a Cookie confidencial sin flag \"HttpOnl\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:H/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.4, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.4, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-732"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-1004"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pi-hole:web_interface:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.6", "matchCriteriaId": "6D79F113-D19A-4712-94DD-5DCF23E6416B"}]}]}], "references": [{"url": "https://github.com/pi-hole/adminlte/commit/cf8602eedd4a31eadb72372fc878c12d342f8600", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/ac7fd77b-b31b-4d02-aebd-f89ecbae3fce", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pi-hole/adminlte/commit/cf8602eedd4a31eadb72372fc878c12d342f8600"}}