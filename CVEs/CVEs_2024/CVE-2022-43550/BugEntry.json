{"buggy_code": ["/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.java.sip.communicator.impl.browserlauncher;\n\nimport net.java.sip.communicator.service.browserlauncher.*;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.jitsi.service.configuration.*;\n\nimport com.apple.eio.*;\n\n/**\n * Implements a <tt>BrowserLauncherService</tt> which opens a specified URL in\n * an OS-specific associated browser.\n *\n * @author Yana Stamcheva\n * @author Lubomir Marinov\n */\npublic class BrowserLauncherImpl\n    implements BrowserLauncherService\n{\n    /**\n     * The name of the property which holds the colon-separated list of browsers\n     * to try on linux.\n     */\n    private static final String LINUX_BROWSERS_PROP_NAME\n            = \"net.java.sip.communicator.impl.browserlauncher.LINUX_BROWSERS\";\n    /**\n     * The <tt>Logger</tt> instance used by the <tt>BrowserLauncherImpl</tt>\n     * class and its instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(BrowserLauncherImpl.class);\n\n    /**\n     * The name of the browser executable to use on linux\n     */\n    private static String linuxBrowser = null;\n\n    private final ConfigurationService configService;\n\n    public BrowserLauncherImpl(ConfigurationService configService)\n    {\n        this.configService = configService;\n    }\n\n    /**\n     * Opens the specified URL in an OS-specific associated browser.\n     *\n     * @param url a <tt>String</tt> value which represents the URL to be opened\n     * in a browser\n     * @throws Exception if no associated browser was found for the specified\n     * URL or there was an error during the instruction of the found associated\n     * browser to open the specified URL\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void launchBrowser(String url)\n        throws Exception\n    {\n        if (SystemUtils.IS_OS_MAC)\n        {\n            FileManager.openURL(url);\n        }\n        else if (SystemUtils.IS_OS_WINDOWS)\n        {\n            Runtime\n                .getRuntime()\n                    .exec(\"rundll32 url.dll,FileProtocolHandler \" + url);\n        }\n        else\n        {\n            String browser = getLinuxBrowser();\n\n            if (browser == null)\n                logger.error(\"Could not find web browser\");\n            else\n                Runtime.getRuntime().exec(new String[]{browser, url});\n        }\n    }\n\n    /**\n     * Gets the name (or absolute path) to the executable to use as a browser\n     * on linux.\n     *\n     * @return the name (or absolute path) to the executable to use as a browser\n     * on linux.\n     *\n     * @throws Exception on failure from <tt>Runtime.exec()</tt>\n     */\n    private String getLinuxBrowser()\n            throws Exception\n    {\n        if (linuxBrowser == null)\n        {\n            String browsers= configService.getString(LINUX_BROWSERS_PROP_NAME);\n            if (browsers== null)\n            {\n                logger.error(\"Required property not set: \" +\n                        LINUX_BROWSERS_PROP_NAME);\n                return null;\n            }\n\n            Runtime runtime = Runtime.getRuntime();\n            for (String b : browsers.split(\":\"))\n            {\n                if (runtime.exec(new String[] { \"which\", b }).waitFor() == 0)\n                {\n                    linuxBrowser = b;\n                    break;\n                }\n            }\n        }\n\n        return linuxBrowser;\n    }\n\n    /**\n     * Tries to open the specified URL in a browser. The attempt is asynchronously\n     * executed and does not wait for possible errors related to the launching\n     * of the associated browser and the opening of the specified URL in it i.e.\n     * the method returns immediately and does not report the success or the\n     * failure of the opening.\n     *\n     * @param url a <tt>String</tt> value which represents the URL to be opened\n     * in a browser\n     * @see BrowserLauncherService#openURL(java.lang.String)\n     */\n    public void openURL(final String url)\n    {\n        Thread launchBrowserThread\n            = new Thread(getClass().getName())\n                    {\n                        @Override\n                        public void run()\n                        {\n                            try\n                            {\n                                launchBrowser(url);\n                            }\n                            catch (Exception e)\n                            {\n                                logger.error(\"Failed to launch browser\", e);\n                            }\n                        }\n                    };\n\n        launchBrowserThread.start();\n    }\n}\n"], "fixing_code": ["/*\n * Jitsi, the OpenSource Java VoIP and Instant Messaging client.\n *\n * Copyright @ 2015 Atlassian Pty Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage net.java.sip.communicator.impl.browserlauncher;\n\nimport net.java.sip.communicator.service.browserlauncher.*;\nimport org.apache.commons.lang3.SystemUtils;\nimport org.jitsi.service.configuration.*;\n\nimport com.apple.eio.*;\n\n/**\n * Implements a <tt>BrowserLauncherService</tt> which opens a specified URL in\n * an OS-specific associated browser.\n *\n * @author Yana Stamcheva\n * @author Lubomir Marinov\n */\npublic class BrowserLauncherImpl\n    implements BrowserLauncherService\n{\n    /**\n     * The name of the property which holds the colon-separated list of browsers\n     * to try on linux.\n     */\n    private static final String LINUX_BROWSERS_PROP_NAME\n            = \"net.java.sip.communicator.impl.browserlauncher.LINUX_BROWSERS\";\n    /**\n     * The <tt>Logger</tt> instance used by the <tt>BrowserLauncherImpl</tt>\n     * class and its instances for logging output.\n     */\n    private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(BrowserLauncherImpl.class);\n\n    /**\n     * The name of the browser executable to use on linux\n     */\n    private static String linuxBrowser = null;\n\n    private final ConfigurationService configService;\n\n    public BrowserLauncherImpl(ConfigurationService configService)\n    {\n        this.configService = configService;\n    }\n\n    /**\n     * Opens the specified URL in an OS-specific associated browser.\n     *\n     * @param url a <tt>String</tt> value which represents the URL to be opened\n     * in a browser\n     * @throws Exception if no associated browser was found for the specified\n     * URL or there was an error during the instruction of the found associated\n     * browser to open the specified URL\n     */\n    @SuppressWarnings(\"deprecation\")\n    private void launchBrowser(String url)\n        throws Exception\n    {\n        if (SystemUtils.IS_OS_MAC)\n        {\n            FileManager.openURL(url);\n        }\n        else if (SystemUtils.IS_OS_WINDOWS)\n        {\n            Runtime\n                .getRuntime()\n                    .exec(\"rundll32 url.dll,FileProtocolHandler \" + url);\n        }\n        else\n        {\n            String browser = getLinuxBrowser();\n\n            if (browser == null)\n                logger.error(\"Could not find web browser\");\n            else\n                Runtime.getRuntime().exec(new String[]{browser, url});\n        }\n    }\n\n    /**\n     * Gets the name (or absolute path) to the executable to use as a browser\n     * on linux.\n     *\n     * @return the name (or absolute path) to the executable to use as a browser\n     * on linux.\n     *\n     * @throws Exception on failure from <tt>Runtime.exec()</tt>\n     */\n    private String getLinuxBrowser()\n            throws Exception\n    {\n        if (linuxBrowser == null)\n        {\n            String browsers= configService.getString(LINUX_BROWSERS_PROP_NAME);\n            if (browsers== null)\n            {\n                logger.error(\"Required property not set: \" +\n                        LINUX_BROWSERS_PROP_NAME);\n                return null;\n            }\n\n            Runtime runtime = Runtime.getRuntime();\n            for (String b : browsers.split(\":\"))\n            {\n                if (runtime.exec(new String[] { \"which\", b }).waitFor() == 0)\n                {\n                    linuxBrowser = b;\n                    break;\n                }\n            }\n        }\n\n        return linuxBrowser;\n    }\n\n    /**\n     * Tries to open the specified URL in a browser. The attempt is asynchronously\n     * executed and does not wait for possible errors related to the launching\n     * of the associated browser and the opening of the specified URL in it i.e.\n     * the method returns immediately and does not report the success or the\n     * failure of the opening.\n     *\n     * @param url a <tt>String</tt> value which represents the URL to be opened\n     * in a browser\n     * @see BrowserLauncherService#openURL(java.lang.String)\n     */\n    public void openURL(final String url)\n    {\n        if (url == null || !url.startsWith(\"http\"))\n        {\n            logger.warn(\"Not a valid URL to open:\" + url);\n            return;\n        }\n        Thread launchBrowserThread\n            = new Thread(getClass().getName())\n                    {\n                        @Override\n                        public void run()\n                        {\n                            try\n                            {\n                                launchBrowser(url);\n                            }\n                            catch (Exception e)\n                            {\n                                logger.error(\"Failed to launch browser\", e);\n                            }\n                        }\n                    };\n\n        launchBrowserThread.start();\n    }\n}\n"], "filenames": ["modules/service/browserlauncher/src/main/java/net/java/sip/communicator/impl/browserlauncher/BrowserLauncherImpl.java"], "buggy_code_start_loc": [142], "buggy_code_end_loc": [142], "fixing_code_start_loc": [143], "fixing_code_end_loc": [148], "type": "CWE-77", "message": "A command injection vulnerability exists in Jitsi before commit 8aa7be58522f4264078d54752aae5483bfd854b2 when launching browsers on Windows which could allow an attacker to insert an arbitrary URL which opens up the opportunity to remote execution.", "other": {"cve": {"id": "CVE-2022-43550", "sourceIdentifier": "support@hackerone.com", "published": "2023-02-09T20:15:10.873", "lastModified": "2023-02-16T20:22:18.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A command injection vulnerability exists in Jitsi before commit 8aa7be58522f4264078d54752aae5483bfd854b2 when launching browsers on Windows which could allow an attacker to insert an arbitrary URL which opens up the opportunity to remote execution."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-77"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jitsi:jitsi:*:*:*:*:*:*:*:*", "versionEndExcluding": "2022-09-14", "matchCriteriaId": "9250D064-9AC5-4B6A-8669-0A2BD89C3250"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*", "matchCriteriaId": "A2572D17-1DE6-457B-99CC-64AFD54487EA"}]}]}], "references": [{"url": "https://github.com/jitsi/jitsi/commit/8aa7be58522f4264078d54752aae5483bfd854b2", "source": "support@hackerone.com", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/jitsi/jitsi/commit/8aa7be58522f4264078d54752aae5483bfd854b2"}}