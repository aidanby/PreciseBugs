{"buggy_code": ["<?php\n/**\n * LoginController.php\n * Copyright (c) 2020 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Auth;\n\nuse Adldap;\nuse Cookie;\nuse DB;\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Providers\\RouteServiceProvider;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\ValidationException;\nuse Illuminate\\View\\View;\nuse Log;\n\n/**\n * Class LoginController\n *\n * This controller handles authenticating users for the application and\n * redirecting them to your home screen. The controller uses a trait\n * to conveniently provide its functionality to your applications.\n *\n * @codeCoverageIgnore\n */\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers;\n\n    /**\n     * Where to redirect users after login.\n     *\n     * @var string\n     */\n    protected string $redirectTo = RouteServiceProvider::HOME;\n\n    private string $username;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->username = 'email';\n        $this->middleware('guest')->except('logout');\n    }\n\n    /**\n     * Handle a login request to the application.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse|RedirectResponse\n     *\n     * @throws ValidationException\n     */\n    public function login(Request $request)\n    {\n        Log::channel('audit')->info(sprintf('User is trying to login using \"%s\"', $request->get('email')));\n        Log::info(sprintf('User is trying to login.'));\n\n        $guard = config('auth.defaults.guard');\n\n        // if the user logs in using LDAP the field is also changed (per LDAP config)\n        if ('ldap' === $guard) {\n            Log::debug('User wishes to login using LDAP.');\n            $this->username = config('firefly.ldap_auth_field');\n        }\n\n\n        $this->validateLogin($request);\n        Log::debug('Login data is valid.');\n\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        // If the class is using the ThrottlesLogins trait, we can automatically throttle\n        // the login attempts for this application. We'll key this by the username and\n        // the IP address of the client making these requests into this application.\n        if (method_exists($this, 'hasTooManyLoginAttempts') && $this->hasTooManyLoginAttempts($request)) {\n            Log::channel('audit')->info(sprintf('Login for user \"%s\" was locked out.', $request->get($this->username())));\n            Log::error(sprintf('Login for user \"%s\" was locked out.', $request->get($this->username())));\n            $this->fireLockoutEvent($request);\n\n            $this->sendLockoutResponse($request);\n        }\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        if ($this->attemptLogin($request)) {\n            Log::channel('audit')->info(sprintf('User \"%s\" has been logged in.', $request->get($this->username())));\n            Log::debug(sprintf('Redirect after login is %s.', $this->redirectPath()));\n\n            // if you just logged in, it can't be that you have a valid 2FA cookie.\n\n            return $this->sendLoginResponse($request);\n        }\n        Log::warning('Login attempt failed.');\n\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        // If the login attempt was unsuccessful we will increment the number of attempts\n        // to login and redirect the user back to the login form. Of course, when this\n        // user surpasses their maximum number of attempts they will get locked out.\n        $this->incrementLoginAttempts($request);\n        Log::channel('audit')->info(sprintf('Login failed. Attempt for user \"%s\" failed.', $request->get($this->username())));\n\n        $this->sendFailedLoginResponse($request);\n    }\n\n    /**\n     * Log the user out of the application.\n     *\n     * @param Request $request\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function logout(Request $request)\n    {\n        $authGuard = config('firefly.authentication_guard');\n        $logoutUri = config('firefly.custom_logout_url');\n        if ('remote_user_guard' === $authGuard && '' !== $logoutUri) {\n            return redirect($logoutUri);\n        }\n        if ('remote_user_guard' === $authGuard && '' === $logoutUri) {\n            session()->flash('error', trans('firefly.cant_logout_guard'));\n        }\n\n        // also logout current 2FA tokens.\n        $cookieName = config('google2fa.cookie_name', 'google2fa_token');\n        Cookie::forget($cookieName);\n\n        $this->guard()->logout();\n\n        $request->session()->invalidate();\n\n        $request->session()->regenerateToken();\n\n        if ($response = $this->loggedOut($request)) {\n            return $response;\n        }\n\n        return $request->wantsJson()\n            ? new \\Illuminate\\Http\\Response('', 204)\n            : redirect('/');\n    }\n\n    /**\n     * Get the failed login response instance.\n     *\n     * @param Request $request\n     *\n     * @return void\n     *\n     * @throws ValidationException\n     */\n    protected function sendFailedLoginResponse(Request $request)\n    {\n        $exception             = ValidationException::withMessages(\n            [\n                $this->username() => [trans('auth.failed')],\n            ]\n        );\n        $exception->redirectTo = route('login');\n\n        throw $exception;\n    }\n\n    /**\n     * Show the application's login form.\n     *\n     * @param Request $request\n     *\n     * @return Factory|\\Illuminate\\Http\\Response|View\n     * @throws \\FireflyIII\\Exceptions\\FireflyException\n     */\n    public function showLoginForm(Request $request)\n    {\n        Log::channel('audit')->info('Show login form (1.1).');\n\n        $count = DB::table('users')->count();\n        $guard = config('auth.defaults.guard');\n        $title = (string)trans('firefly.login_page_title');\n\n        if (0 === $count && 'web' === $guard) {\n            return redirect(route('register'));\n        }\n\n        // switch to LDAP settings:\n        if ('ldap' === $guard) {\n            Log::debug('User wishes to login using LDAP.');\n            $this->username = config('firefly.ldap_auth_field');\n        }\n\n        // throw warning if still using login_provider\n        $ldapWarning = false;\n        if ('ldap' === config('firefly.login_provider')) {\n            $ldapWarning = true;\n        }\n        // is allowed to register, etc.\n        $singleUserMode    = app('fireflyconfig')->get('single_user_mode', config('firefly.configuration.single_user_mode'))->data;\n        $allowRegistration = true;\n        $allowReset        = true;\n        if (true === $singleUserMode && $count > 0) {\n            $allowRegistration = false;\n        }\n\n        // single user mode is ignored when the user is not using eloquent:\n        if ('web' !== $guard) {\n            $allowRegistration = false;\n            $allowReset        = false;\n        }\n\n        $email    = $request->old('email');\n        $remember = $request->old('remember');\n\n        $storeInCookie = config('google2fa.store_in_cookie', false);\n        if (false !== $storeInCookie) {\n            $cookieName = config('google2fa.cookie_name', 'google2fa_token');\n            request()->cookies->set($cookieName, 'invalid');\n        }\n        $usernameField = $this->username();\n\n        return prefixView('auth.login', compact('allowRegistration', 'email', 'remember', 'ldapWarning', 'allowReset', 'title', 'usernameField'));\n    }\n\n    /**\n     * Get the login username to be used by the controller.\n     *\n     * @return string\n     */\n    public function username()\n    {\n        return $this->username;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * LoginController.php\n * Copyright (c) 2020 james@firefly-iii.org\n *\n * This file is part of Firefly III (https://github.com/firefly-iii).\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Affero General Public License as\n * published by the Free Software Foundation, either version 3 of the\n * License, or (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Affero General Public License for more details.\n *\n * You should have received a copy of the GNU Affero General Public License\n * along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\ndeclare(strict_types=1);\n\nnamespace FireflyIII\\Http\\Controllers\\Auth;\n\nuse Adldap;\nuse Cookie;\nuse DB;\nuse FireflyIII\\Http\\Controllers\\Controller;\nuse FireflyIII\\Providers\\RouteServiceProvider;\nuse Illuminate\\Contracts\\View\\Factory;\nuse Illuminate\\Foundation\\Auth\\AuthenticatesUsers;\nuse Illuminate\\Foundation\\Auth\\ThrottlesLogins;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\RedirectResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\ValidationException;\nuse Illuminate\\View\\View;\nuse Log;\n\n/**\n * Class LoginController\n *\n * This controller handles authenticating users for the application and\n * redirecting them to your home screen. The controller uses a trait\n * to conveniently provide its functionality to your applications.\n *\n * @codeCoverageIgnore\n */\nclass LoginController extends Controller\n{\n    use AuthenticatesUsers, ThrottlesLogins;\n\n    /**\n     * Where to redirect users after login.\n     *\n     * @var string\n     */\n    protected string $redirectTo = RouteServiceProvider::HOME;\n\n    private string $username;\n\n    /**\n     * Create a new controller instance.\n     *\n     * @return void\n     */\n    public function __construct()\n    {\n        parent::__construct();\n        $this->username = 'email';\n        $this->middleware('guest')->except('logout');\n    }\n\n    /**\n     * Handle a login request to the application.\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse|RedirectResponse\n     *\n     * @throws ValidationException\n     */\n    public function login(Request $request)\n    {\n        Log::channel('audit')->info(sprintf('User is trying to login using \"%s\"', $request->get('email')));\n        Log::info(sprintf('User is trying to login.'));\n\n        $guard = config('auth.defaults.guard');\n\n        // if the user logs in using LDAP the field is also changed (per LDAP config)\n        if ('ldap' === $guard) {\n            Log::debug('User wishes to login using LDAP.');\n            $this->username = config('firefly.ldap_auth_field');\n        }\n\n\n        $this->validateLogin($request);\n        Log::debug('Login data is valid.');\n\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        // If the class is using the ThrottlesLogins trait, we can automatically throttle\n        // the login attempts for this application. We'll key this by the username and\n        // the IP address of the client making these requests into this application.\n        if (method_exists($this, 'hasTooManyLoginAttempts') && $this->hasTooManyLoginAttempts($request)) {\n            Log::channel('audit')->info(sprintf('Login for user \"%s\" was locked out.', $request->get($this->username())));\n            Log::error(sprintf('Login for user \"%s\" was locked out.', $request->get($this->username())));\n            $this->fireLockoutEvent($request);\n\n            $this->sendLockoutResponse($request);\n        }\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        if ($this->attemptLogin($request)) {\n            Log::channel('audit')->info(sprintf('User \"%s\" has been logged in.', $request->get($this->username())));\n            Log::debug(sprintf('Redirect after login is %s.', $this->redirectPath()));\n\n            // if you just logged in, it can't be that you have a valid 2FA cookie.\n\n            return $this->sendLoginResponse($request);\n        }\n        Log::warning('Login attempt failed.');\n\n        /** Copied directly from AuthenticatesUsers, but with logging added: */\n        // If the login attempt was unsuccessful we will increment the number of attempts\n        // to login and redirect the user back to the login form. Of course, when this\n        // user surpasses their maximum number of attempts they will get locked out.\n        $this->incrementLoginAttempts($request);\n        Log::channel('audit')->info(sprintf('Login failed. Attempt for user \"%s\" failed.', $request->get($this->username())));\n\n        $this->sendFailedLoginResponse($request);\n    }\n\n    /**\n     * Log the user out of the application.\n     *\n     * @param Request $request\n     *\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function logout(Request $request)\n    {\n        $authGuard = config('firefly.authentication_guard');\n        $logoutUri = config('firefly.custom_logout_url');\n        if ('remote_user_guard' === $authGuard && '' !== $logoutUri) {\n            return redirect($logoutUri);\n        }\n        if ('remote_user_guard' === $authGuard && '' === $logoutUri) {\n            session()->flash('error', trans('firefly.cant_logout_guard'));\n        }\n\n        // also logout current 2FA tokens.\n        $cookieName = config('google2fa.cookie_name', 'google2fa_token');\n        Cookie::forget($cookieName);\n\n        $this->guard()->logout();\n\n        $request->session()->invalidate();\n\n        $request->session()->regenerateToken();\n\n        if ($response = $this->loggedOut($request)) {\n            return $response;\n        }\n\n        return $request->wantsJson()\n            ? new \\Illuminate\\Http\\Response('', 204)\n            : redirect('/');\n    }\n\n    /**\n     * Get the failed login response instance.\n     *\n     * @param Request $request\n     *\n     * @return void\n     *\n     * @throws ValidationException\n     */\n    protected function sendFailedLoginResponse(Request $request)\n    {\n        $exception             = ValidationException::withMessages(\n            [\n                $this->username() => [trans('auth.failed')],\n            ]\n        );\n        $exception->redirectTo = route('login');\n\n        throw $exception;\n    }\n\n    /**\n     * Show the application's login form.\n     *\n     * @param Request $request\n     *\n     * @return Factory|\\Illuminate\\Http\\Response|View\n     * @throws \\FireflyIII\\Exceptions\\FireflyException\n     */\n    public function showLoginForm(Request $request)\n    {\n        Log::channel('audit')->info('Show login form (1.1).');\n\n        $count = DB::table('users')->count();\n        $guard = config('auth.defaults.guard');\n        $title = (string)trans('firefly.login_page_title');\n\n        if (0 === $count && 'web' === $guard) {\n            return redirect(route('register'));\n        }\n\n        // switch to LDAP settings:\n        if ('ldap' === $guard) {\n            Log::debug('User wishes to login using LDAP.');\n            $this->username = config('firefly.ldap_auth_field');\n        }\n\n        // throw warning if still using login_provider\n        $ldapWarning = false;\n        if ('ldap' === config('firefly.login_provider')) {\n            $ldapWarning = true;\n        }\n        // is allowed to register, etc.\n        $singleUserMode    = app('fireflyconfig')->get('single_user_mode', config('firefly.configuration.single_user_mode'))->data;\n        $allowRegistration = true;\n        $allowReset        = true;\n        if (true === $singleUserMode && $count > 0) {\n            $allowRegistration = false;\n        }\n\n        // single user mode is ignored when the user is not using eloquent:\n        if ('web' !== $guard) {\n            $allowRegistration = false;\n            $allowReset        = false;\n        }\n\n        $email    = $request->old('email');\n        $remember = $request->old('remember');\n\n        $storeInCookie = config('google2fa.store_in_cookie', false);\n        if (false !== $storeInCookie) {\n            $cookieName = config('google2fa.cookie_name', 'google2fa_token');\n            request()->cookies->set($cookieName, 'invalid');\n        }\n        $usernameField = $this->username();\n\n        return prefixView('auth.login', compact('allowRegistration', 'email', 'remember', 'ldapWarning', 'allowReset', 'title', 'usernameField'));\n    }\n\n    /**\n     * Get the login username to be used by the controller.\n     *\n     * @return string\n     */\n    public function username()\n    {\n        return $this->username;\n    }\n}\n"], "filenames": ["app/Http/Controllers/Auth/LoginController.php"], "buggy_code_start_loc": [31], "buggy_code_end_loc": [51], "fixing_code_start_loc": [32], "fixing_code_end_loc": [52], "type": "CWE-307", "message": "firefly-iii is vulnerable to Improper Restriction of Excessive Authentication Attempts", "other": {"cve": {"id": "CVE-2021-3663", "sourceIdentifier": "security@huntr.dev", "published": "2021-07-25T14:15:08.317", "lastModified": "2021-08-04T17:14:11.133", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "firefly-iii is vulnerable to Improper Restriction of Excessive Authentication Attempts"}, {"lang": "es", "value": "firefly-iii es vulnerable a la Restricci\u00f3n Inapropiada de Intentos de Autenticaci\u00f3n Excesivos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-307"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-307"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:firefly-iii:firefly_iii:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.5.12", "matchCriteriaId": "8CCADEFF-E42E-4D24-B69F-275FE4DBFD93"}]}]}], "references": [{"url": "https://github.com/firefly-iii/firefly-iii/commit/afc9f4b7ebc8a240c85864a6e1abda62bfeefae8", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/497bdf6d-7dba-49c3-8011-1c64dfbb3380", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/firefly-iii/firefly-iii/commit/afc9f4b7ebc8a240c85864a6e1abda62bfeefae8"}}